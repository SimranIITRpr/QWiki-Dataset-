<mediawiki xmlns="http://www.mediawiki.org/xml/export-0.10/" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.mediawiki.org/xml/export-0.10/ http://www.mediawiki.org/xml/export-0.10.xsd" version="0.10" xml:lang="en">
  <siteinfo>
    <sitename>JOCWiki</sitename>
    <dbname>joc_wiki</dbname>
    <base>http://sccilabs.org/jocwiki/index.php/Main_Page</base>
    <generator>MediaWiki 1.30.0</generator>
    <case>first-letter</case>
    <namespaces>
      <namespace key="-2" case="first-letter">Media</namespace>
      <namespace key="-1" case="first-letter">Special</namespace>
      <namespace key="0" case="first-letter" />
      <namespace key="1" case="first-letter">Talk</namespace>
      <namespace key="2" case="first-letter">User</namespace>
      <namespace key="3" case="first-letter">User talk</namespace>
      <namespace key="4" case="first-letter">JOCWiki</namespace>
      <namespace key="5" case="first-letter">JOCWiki talk</namespace>
      <namespace key="6" case="first-letter">File</namespace>
      <namespace key="7" case="first-letter">File talk</namespace>
      <namespace key="8" case="first-letter">MediaWiki</namespace>
      <namespace key="9" case="first-letter">MediaWiki talk</namespace>
      <namespace key="10" case="first-letter">Template</namespace>
      <namespace key="11" case="first-letter">Template talk</namespace>
      <namespace key="12" case="first-letter">Help</namespace>
      <namespace key="13" case="first-letter">Help talk</namespace>
      <namespace key="14" case="first-letter">Category</namespace>
      <namespace key="15" case="first-letter">Category talk</namespace>
      <namespace key="828" case="first-letter">Module</namespace>
      <namespace key="829" case="first-letter">Module talk</namespace>
      <namespace key="2300" case="first-letter">Gadget</namespace>
      <namespace key="2301" case="first-letter">Gadget talk</namespace>
      <namespace key="2302" case="case-sensitive">Gadget definition</namespace>
      <namespace key="2303" case="case-sensitive">Gadget definition talk</namespace>
      <namespace key="2600" case="first-letter">Topic</namespace>
    </namespaces>
  </siteinfo>
  <page>
    <title>Lecture Notes: Week 10</title>
    <ns>0</ns>
    <id>848</id>
    <revision>
      <id>3932</id>
      <parentid>3930</parentid>
      <timestamp>2018-10-01T07:40:23Z</timestamp>
      <contributor>
        <username>Sam</username>
        <id>673</id>
      </contributor>
      <comment>/* FLAMES */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="627">==Week 10==
https://onlinecourses.nptel.ac.in/noc18_cs35/unit?unit=30&amp;lesson=31
=FLAMES - a Childhood play=
In childhood, we might have played a game called FLAMES to find the relationship (illusion!!) between a boy and a girl.  

All you have to do is

&lt;b&gt; Steps : &lt;/b&gt;
 1. write their name and strike out the common characters that occur in both their names.
 2. Count the remaining letters (SAY X)
 3. Write the word FLAMES and start counting from F and strike out the X&lt;sup&gt;th&lt;/sup&gt; letter till only one character remains
 4. If it is F - then the two are Friends. L - Love, A - Affection,  M - Marriage  E- Enemy S- Sister</text>
      <sha1>qn1ykmjl8if5upidpingkqjqv4a2amq</sha1>
    </revision>
    <revision>
      <id>3933</id>
      <parentid>3932</parentid>
      <timestamp>2018-10-01T07:41:18Z</timestamp>
      <contributor>
        <username>Sam</username>
        <id>673</id>
      </contributor>
      <comment>/* FLAMES - a Childhood play */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="628">==Week 10==
https://onlinecourses.nptel.ac.in/noc18_cs35/unit?unit=30&amp;lesson=31
=FLAMES - a Childhood play=
In childhood, we might have played a game called FLAMES to find the relationship (illusion!!) between a boy and a girl.  

All you have to do is

&lt;b&gt; Steps : &lt;/b&gt;
 1. write their names and strike out the common characters that occur in both their names.
 2. Count the remaining letters (SAY X)
 3. Write the word FLAMES and start counting from F and strike out the X&lt;sup&gt;th&lt;/sup&gt; letter till only one character remains
 4. If it is F - then the two are Friends. L - Love, A - Affection,  M - Marriage  E- Enemy S- Sister</text>
      <sha1>e6fo0fgvy207zolwdbxfr61vgxite6q</sha1>
    </revision>
    <revision>
      <id>3937</id>
      <parentid>3933</parentid>
      <timestamp>2018-10-01T07:47:45Z</timestamp>
      <contributor>
        <username>Sam</username>
        <id>673</id>
      </contributor>
      <comment>/* FLAMES - a Childhood play */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1013">==Week 10==
https://onlinecourses.nptel.ac.in/noc18_cs35/unit?unit=30&amp;lesson=31
=FLAMES - a Childhood play=
In childhood, we might have played a game called FLAMES to find the relationship (illusion!!) between a boy and a girl.  

All you have to do is

&lt;b&gt; Steps : &lt;/b&gt;
 1. write their names and strike out the common characters that occur in both their names.
 2. Count the remaining letters (SAY X)
 3. Write the word FLAMES and start counting from F and strike out the X&lt;sup&gt;th&lt;/sup&gt; letter till only one character remains
 4. If it is F - then the two are Friends. L - Love, A - Affection,  M - Marriage  E- Enemy S- Sister

&lt;table width=&quot;449&quot; height=&quot;116&quot; border=&quot;1&quot;&gt;
 &lt;tr&gt;
    &lt;td&gt;[[File:flame_step1.jpg|200px]]&lt;/td&gt;
    &lt;td&gt;[[File:flame_step2.jpg|200px]]&lt;/td&gt;
    &lt;td&gt;[[File:flame_step3.jpg|200px]]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Remaining No. of Characters = 7&lt;/td&gt;
    &lt;td&gt;Counting from F, wrap over and strike the 7th letter&lt;/td&gt;
    &lt;td&gt;The remaining letter denotes the relationship&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;</text>
      <sha1>jt588vb28iouspyxyf4emxb1v9u34eg</sha1>
    </revision>
    <revision>
      <id>3938</id>
      <parentid>3937</parentid>
      <timestamp>2018-10-01T07:50:20Z</timestamp>
      <contributor>
        <username>Sam</username>
        <id>673</id>
      </contributor>
      <comment>/* FLAMES - a Childhood play */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1013">==Week 10==
https://onlinecourses.nptel.ac.in/noc18_cs35/unit?unit=30&amp;lesson=31
=FLAMES - a Childhood play=
In childhood, we might have played a game called FLAMES to find the relationship (illusion!!) between a boy and a girl.  

All you have to do is

&lt;b&gt; Steps : &lt;/b&gt;
 1. write their names and strike out the common characters that occur in both their names.
 2. Count the remaining letters (SAY X)
 3. Write the word FLAMES and start counting from F and strike out the X&lt;sup&gt;th&lt;/sup&gt; letter till only one character remains
 4. If it is F - then the two are Friends. L - Love, A - Affection,  M - Marriage  E- Enemy S- Sister

&lt;table width=&quot;449&quot; height=&quot;116&quot; border=&quot;1&quot;&gt;
 &lt;tr&gt;
    &lt;td&gt;[[File:flame step1.jpg|200px]]&lt;/td&gt;
    &lt;td&gt;[[File:flame_step2.jpg|200px]]&lt;/td&gt;
    &lt;td&gt;[[File:flame_step3.jpg|200px]]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Remaining No. of Characters = 7&lt;/td&gt;
    &lt;td&gt;Counting from F, wrap over and strike the 7th letter&lt;/td&gt;
    &lt;td&gt;The remaining letter denotes the relationship&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;</text>
      <sha1>0lzc0t15cchm4524a739v4qzgtgpxbt</sha1>
    </revision>
    <revision>
      <id>3939</id>
      <parentid>3938</parentid>
      <timestamp>2018-10-01T07:50:45Z</timestamp>
      <contributor>
        <username>Sam</username>
        <id>673</id>
      </contributor>
      <comment>/* FLAMES - a Childhood play */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1015">==Week 10==
https://onlinecourses.nptel.ac.in/noc18_cs35/unit?unit=30&amp;lesson=31
=FLAMES - a Childhood play=
In childhood, we might have played a game called FLAMES to find the relationship (illusion!!) between a boy and a girl.  

All you have to do is

&lt;b&gt; Steps : &lt;/b&gt;
 1. write their names and strike out the common characters that occur in both their names.
 2. Count the remaining letters (SAY X)
 3. Write the word FLAMES and start counting from F and strike out the X&lt;sup&gt;th&lt;/sup&gt; letter till only one character remains
 4. If it is F - then the two are Friends. L - Love, A - Affection,  M - Marriage  E- Enemy S- Sister

&lt;table width=&quot;449&quot; height=&quot;116&quot; border=&quot;1&quot;&gt;
 &lt;tr&gt;
    &lt;td&gt;[[File:&quot;flame step1.jpg&quot;|200px]]&lt;/td&gt;
    &lt;td&gt;[[File:flame_step2.jpg|200px]]&lt;/td&gt;
    &lt;td&gt;[[File:flame_step3.jpg|200px]]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Remaining No. of Characters = 7&lt;/td&gt;
    &lt;td&gt;Counting from F, wrap over and strike the 7th letter&lt;/td&gt;
    &lt;td&gt;The remaining letter denotes the relationship&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;</text>
      <sha1>cktaddtst3lcuqyzpqnp0toripi109i</sha1>
    </revision>
    <revision>
      <id>3943</id>
      <parentid>3939</parentid>
      <timestamp>2018-10-01T08:00:31Z</timestamp>
      <contributor>
        <username>Sam</username>
        <id>673</id>
      </contributor>
      <comment>/* FLAMES - a Childhood play */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1011">==Week 10==
https://onlinecourses.nptel.ac.in/noc18_cs35/unit?unit=30&amp;lesson=31
=FLAMES - a Childhood play=
In childhood, we might have played a game called FLAMES to find the relationship (illusion!!) between a boy and a girl.  

All you have to do is

&lt;b&gt; Steps : &lt;/b&gt;
 1. write their names and strike out the common characters that occur in both their names.
 2. Count the remaining letters (SAY X)
 3. Write the word FLAMES and start counting from F and strike out the X&lt;sup&gt;th&lt;/sup&gt; letter till only one character remains
 4. If it is F - then the two are Friends. L - Love, A - Affection,  M - Marriage  E- Enemy S- Sister

&lt;table width=&quot;449&quot; height=&quot;116&quot; border=&quot;1&quot;&gt;
 &lt;tr&gt;
    &lt;td&gt;[[File:flamestep1.jpg|200px]]&lt;/td&gt;
    &lt;td&gt;[[File:flamestep2.jpg|200px]]&lt;/td&gt;
    &lt;td&gt;[[File:flame_step3.jpg|200px]]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Remaining No. of Characters = 7&lt;/td&gt;
    &lt;td&gt;Counting from F, wrap over and strike the 7th letter&lt;/td&gt;
    &lt;td&gt;The remaining letter denotes the relationship&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;</text>
      <sha1>l2ndpnvfynxo63ylagbv9d1jvsney6a</sha1>
    </revision>
    <revision>
      <id>3944</id>
      <parentid>3943</parentid>
      <timestamp>2018-10-01T08:01:28Z</timestamp>
      <contributor>
        <username>Sam</username>
        <id>673</id>
      </contributor>
      <comment>/* FLAMES - a Childhood play */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1011">==Week 10==
https://onlinecourses.nptel.ac.in/noc18_cs35/unit?unit=30&amp;lesson=31
=FLAMES - a Childhood play=
In childhood, we might have played a game called FLAMES to find the relationship (illusion!!) between a boy and a girl.  

All you have to do is

&lt;b&gt; Steps : &lt;/b&gt;
 1. write their names and strike out the common characters that occur in both their names.
 2. Count the remaining letters (SAY X)
 3. Write the word FLAMES and start counting from F and strike out the X&lt;sup&gt;th&lt;/sup&gt; letter till only one character remains
 4. If it is F - then the two are Friends. L - Love, A - Affection,  M - Marriage  E- Enemy S- Sister

&lt;table width=&quot;449&quot; height=&quot;116&quot; border=&quot;1&quot;&gt;
 &lt;tr&gt;
    &lt;td&gt;[[File:Flamestep1.jpg|200px]]&lt;/td&gt;
    &lt;td&gt;[[File:Flamestep2.jpg|200px]]&lt;/td&gt;
    &lt;td&gt;[[File:flame_step3.jpg|200px]]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Remaining No. of Characters = 7&lt;/td&gt;
    &lt;td&gt;Counting from F, wrap over and strike the 7th letter&lt;/td&gt;
    &lt;td&gt;The remaining letter denotes the relationship&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;</text>
      <sha1>7q3jd3sjbqw9y4dqseqw35th4nz3ll0</sha1>
    </revision>
    <revision>
      <id>3947</id>
      <parentid>3944</parentid>
      <timestamp>2018-10-01T08:17:34Z</timestamp>
      <contributor>
        <username>Sam</username>
        <id>673</id>
      </contributor>
      <comment>/* FLAMES - a Childhood play */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1010">==Week 10==
https://onlinecourses.nptel.ac.in/noc18_cs35/unit?unit=30&amp;lesson=31
=FLAMES - a Childhood play=
In childhood, we might have played a game called FLAMES to find the relationship (illusion!!) between a boy and a girl.  

All you have to do is

&lt;b&gt; Steps : &lt;/b&gt;
 1. write their names and strike out the common characters that occur in both their names.
 2. Count the remaining letters (SAY X)
 3. Write the word FLAMES and start counting from F and strike out the X&lt;sup&gt;th&lt;/sup&gt; letter till only one character remains
 4. If it is F - then the two are Friends. L - Love, A - Affection,  M - Marriage  E- Enemy S- Sister

&lt;table width=&quot;449&quot; height=&quot;116&quot; border=&quot;1&quot;&gt;
 &lt;tr&gt;
    &lt;td&gt;[[File:Flamestep1.jpg|200px]]&lt;/td&gt;
    &lt;td&gt;[[File:Flamestep2.jpg|200px]]&lt;/td&gt;
    &lt;td&gt;[[File:flamestep3.jpg|200px]]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Remaining No. of Characters = 7&lt;/td&gt;
    &lt;td&gt;Counting from F, wrap over and strike the 7th letter&lt;/td&gt;
    &lt;td&gt;The remaining letter denotes the relationship&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;</text>
      <sha1>p4s9taiql4rzgy701fud51ljn54iw2p</sha1>
    </revision>
    <revision>
      <id>3948</id>
      <parentid>3947</parentid>
      <timestamp>2018-10-01T08:18:45Z</timestamp>
      <contributor>
        <username>Sam</username>
        <id>673</id>
      </contributor>
      <comment>/* FLAMES - a Childhood play */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1021">==Week 10==
https://onlinecourses.nptel.ac.in/noc18_cs35/unit?unit=30&amp;lesson=31
=FLAMES - a Childhood play=
In childhood, we might have played a game called FLAMES to find the relationship (illusion!!) between a boy and a girl.  

All you have to do is

&lt;b&gt; Steps : &lt;/b&gt;
 1. write their names and strike out the common characters that occur in both their names.
 2. Count the remaining letters (SAY X)
 3. Write the word FLAMES and start counting from F and strike out the X&lt;sup&gt;th&lt;/sup&gt; letter till only one character remains
 4. If it is F - then the two are Friends. L - Love, A - Affection,  M - Marriage  E- Enemy S- Sister

&lt;table width=&quot;449&quot; height=&quot;116&quot; border=&quot;1&quot;&gt;
 &lt;tr&gt;
    &lt;td&gt;[[File:Flamestep1.JPG|200px]]&lt;/td&gt;
    &lt;td&gt;[[File:Flamestep2.JPG|200px]]&lt;/td&gt;
    &lt;td&gt;[[File:flamestep3.JPG|200px]]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Remaining No. of Characters = 7&lt;/td&gt;
    &lt;td&gt;Counting from F, wrap over and strike the 7&lt;SUP&gt;th&lt;/SUP&gt; letter&lt;/td&gt;
    &lt;td&gt;The remaining letter denotes the relationship&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;</text>
      <sha1>7ifqnomyb0sdr1zb5s7gqtzjiwfiflk</sha1>
    </revision>
    <revision>
      <id>3949</id>
      <parentid>3948</parentid>
      <timestamp>2018-10-01T08:20:50Z</timestamp>
      <contributor>
        <username>Sam</username>
        <id>673</id>
      </contributor>
      <comment>/* FLAMES - a Childhood play */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1057">==Week 10==
https://onlinecourses.nptel.ac.in/noc18_cs35/unit?unit=30&amp;lesson=31
=FLAMES - a Childhood play=
In childhood, we might have played a game called FLAMES to find the relationship (illusion!!) between a boy and a girl.  

All you have to do is

&lt;b&gt; Steps : &lt;/b&gt;
 1. write their names and strike out the common characters that occur in both their names.
 2. Count the remaining letters (SAY X)
 3. Write the word FLAMES and start counting from F and strike out the X&lt;sup&gt;th&lt;/sup&gt; letter till only one character remains
 4. If it is F - then the two are Friends. L - Love, A - Affection,  M - Marriage  E- Enemy S- Sister

&lt;table width=&quot;449&quot; height=&quot;116&quot; border=&quot;1&quot;&gt;
 &lt;tr&gt;
    &lt;td&gt;[[File:Flamestep1.JPG|300px]]&lt;/td&gt;
    &lt;td&gt;[[File:Flamestep2.JPG|300px]]&lt;/td&gt;
    &lt;td&gt;[[File:flamestep3.JPG|300px]]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td width = 200&gt;Remaining No. of Characters = 7&lt;/td&gt;
    &lt;td width = 200&gt;Counting from F, wrap over and strike the 7&lt;SUP&gt;th&lt;/SUP&gt; letter&lt;/td&gt;
    &lt;td width = 200&gt;The remaining letter denotes the relationship&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;</text>
      <sha1>fb8wcw92o3dxe76s7f6huox04eq6c9j</sha1>
    </revision>
    <revision>
      <id>3952</id>
      <parentid>3949</parentid>
      <timestamp>2018-10-01T10:53:48Z</timestamp>
      <contributor>
        <username>Sam</username>
        <id>673</id>
      </contributor>
      <comment>/* FLAMES - a Childhood play */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="2590">==Week 10==
https://onlinecourses.nptel.ac.in/noc18_cs35/unit?unit=30&amp;lesson=31
=FLAMES - a Childhood play=
In childhood, we might have played a game called FLAMES to find the relationship (illusion!!) between a boy and a girl.  

All you have to do is

&lt;b&gt; Steps : &lt;/b&gt;
 1. write their names and strike out the common characters that occur in both their names.
 2. Count the remaining letters (SAY X)
 3. Write the word FLAMES and start counting from F and strike out the X&lt;sup&gt;th&lt;/sup&gt; letter till only one character remains
 4. If it is F - then the two are Friends. L - Love, A - Affection,  M - Marriage  E- Enemy S- Sister

&lt;table width=&quot;449&quot; height=&quot;116&quot; border=&quot;1&quot;&gt;
 &lt;tr&gt;
    &lt;td&gt;[[File:Flamestep1.JPG|300px]]&lt;/td&gt;
    &lt;td&gt;[[File:Flamestep2.JPG|300px]]&lt;/td&gt;
    &lt;td&gt;[[File:flamestep3.JPG|300px]]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td width = 200&gt;Remaining No. of Characters = 7&lt;/td&gt;
    &lt;td width = 200&gt;Counting from F, wrap over and strike the 7&lt;SUP&gt;th&lt;/SUP&gt; letter&lt;/td&gt;
    &lt;td width = 200&gt;The remaining letter denotes the relationship&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;
== Refresh the operations on Strings and Lists ==
&lt;table width=&quot;200&quot; border=&quot;1&quot;&gt;
  &lt;tr&gt;
    &lt;th scope=&quot;col&quot;&gt;Functions&lt;/th&gt;
    &lt;th scope=&quot;col&quot;&gt;Example&lt;/th&gt;
    &lt;th scope=&quot;col&quot;&gt;Result&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;import &lt;/td&gt;
    &lt;td&gt;import string&lt;/td&gt;
    &lt;td&gt;import string module&lt;/td&gt;
  &lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;input a string&lt;/td&gt;
    &lt;td&gt;s = input()&lt;/td&gt;
    &lt;td&gt;input a string to the variable s&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Convert to lower case&lt;/td&gt;
    &lt;td&gt;s.lower()&lt;/td&gt;
    &lt;td width = 200&gt;converts the string  s to lower case. s = &quot;Raj&quot; s.lower() will be raj &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Convert to upper case&lt;/td&gt;
    &lt;td&gt;s.upper()&lt;/td&gt;
    &lt;td&gt;converts the string  s to upper case. s = &quot;Raj&quot; s.upper() will be RAJ&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Convert the string to list&lt;/td&gt;
    &lt;td&gt;s1 = list(s)&lt;/td&gt;
    &lt;td&gt;s1=['R','a''j']&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Replace a character&lt;/td&gt;
    &lt;td&gt;s1.replace(&quot;j&quot;,&quot;#&quot;&lt;/td&gt;
    &lt;td&gt;s1 = ['R','a','#']&lt;/td&gt;
  &lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;Replace more than one character&lt;/td&gt;
    &lt;td&gt;s1.replace(&quot;aj&quot;,&quot;#&quot;&lt;/td&gt;
    &lt;td&gt;s1 = ['R','#']&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;slice&lt;/td&gt;
    &lt;td&gt;l[1:4]&lt;/td&gt;
    &lt;td&gt;let l = ['a','b','c','d','e'] l[1:4] will be bcd &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;slice. Default is 0 if first index is omitted&lt;/td&gt;
    &lt;td&gt;l[:4]&lt;/td&gt;
    &lt;td&gt;let l = ['a','b','c','d','e'] l[:4] will be abcd &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;slice. Default is length of the list if second index is omitted&lt;/td&gt;
    &lt;td&gt;l[1:]&lt;/td&gt;
    &lt;td&gt;let l = ['a','b','c','d','e'] l[1:4] will be bcd &lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;</text>
      <sha1>e7q6fmeqaenxj2vwp0dxprifob1s27y</sha1>
    </revision>
    <revision>
      <id>3954</id>
      <parentid>3952</parentid>
      <timestamp>2018-10-01T11:09:12Z</timestamp>
      <contributor>
        <username>Sam</username>
        <id>673</id>
      </contributor>
      <comment>/* Refresh the operations on Strings and Lists */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="2471">==Week 10==
https://onlinecourses.nptel.ac.in/noc18_cs35/unit?unit=30&amp;lesson=31
=FLAMES - a Childhood play=
In childhood, we might have played a game called FLAMES to find the relationship (illusion!!) between a boy and a girl.  

All you have to do is

&lt;b&gt; Steps : &lt;/b&gt;
 1. write their names and strike out the common characters that occur in both their names.
 2. Count the remaining letters (SAY X)
 3. Write the word FLAMES and start counting from F and strike out the X&lt;sup&gt;th&lt;/sup&gt; letter till only one character remains
 4. If it is F - then the two are Friends. L - Love, A - Affection,  M - Marriage  E- Enemy S- Sister

&lt;table width=&quot;449&quot; height=&quot;116&quot; border=&quot;1&quot;&gt;
 &lt;tr&gt;
    &lt;td&gt;[[File:Flamestep1.JPG|300px]]&lt;/td&gt;
    &lt;td&gt;[[File:Flamestep2.JPG|300px]]&lt;/td&gt;
    &lt;td&gt;[[File:flamestep3.JPG|300px]]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td width = 200&gt;Remaining No. of Characters = 7&lt;/td&gt;
    &lt;td width = 200&gt;Counting from F, wrap over and strike the 7&lt;SUP&gt;th&lt;/SUP&gt; letter&lt;/td&gt;
    &lt;td width = 200&gt;The remaining letter denotes the relationship&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;
== Refresh the operations on Strings and Lists ==
&lt;table width=&quot;200&quot; border=&quot;1&quot;&gt;
  &lt;tr&gt;
    &lt;th scope=&quot;col&quot; width=100&gt;Functions&lt;/th&gt;
    &lt;th scope=&quot;col&quot; width=100&gt;Example&lt;/th&gt;
    &lt;th scope=&quot;col&quot; width=100&gt;Result&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;import &lt;/td&gt;
    &lt;td&gt;import string&lt;/td&gt;
    &lt;td&gt;import string module&lt;/td&gt;
  &lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;input a string&lt;/td&gt;
    &lt;td&gt;s = input()&lt;/td&gt;
    &lt;td&gt;input a string to the variable s&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Convert to lower case&lt;/td&gt;
    &lt;td&gt;print(s.lower())&lt;/td&gt;
    &lt;td &gt; raj &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Convert to upper case&lt;/td&gt;
    &lt;td&gt;print(s.upper())&lt;/td&gt;
    &lt;td&gt; RAJ&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Convert the string to list&lt;/td&gt;
    &lt;td&gt;s1 = list(s)&lt;/td&gt;
    &lt;td&gt;s1 will be ['R','a','j']&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Replace a character&lt;/td&gt;
    &lt;td&gt;print(s.replace(&quot;j&quot;,&quot;#&quot;))&lt;/td&gt;
    &lt;td&gt;'Ra#' .Note: the content of s is not changed.&lt;/td&gt;
  &lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;Replace more than one character&lt;/td&gt;
    &lt;td&gt;print(s.replace(&quot;aj&quot;,&quot;#&quot;))&lt;/td&gt;
    &lt;td&gt;'R#'&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;slice. l = ['a','b','c','d','e']&lt;/td&gt;
    &lt;td&gt;l[1:4]&lt;/td&gt;
    &lt;td&gt;['b', 'c', 'd'] &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;slice. Default is 0 if first index is omitted&lt;/td&gt;
    &lt;td&gt;l[:4]&lt;/td&gt;
    &lt;td&gt; ['a', 'b', 'c', 'd']&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;slice. Default is length of the list if second index is omitted&lt;/td&gt;
    &lt;td&gt;l[1:]&lt;/td&gt;
    &lt;td&gt; ['b', 'c', 'd', 'e']&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;</text>
      <sha1>kb64t0zekfnax3xq11q2bcuf0xndx9w</sha1>
    </revision>
    <revision>
      <id>3955</id>
      <parentid>3954</parentid>
      <timestamp>2018-10-01T11:10:34Z</timestamp>
      <contributor>
        <username>Sam</username>
        <id>673</id>
      </contributor>
      <comment>/* Refresh the operations on Strings and Lists */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="2522">==Week 10==
https://onlinecourses.nptel.ac.in/noc18_cs35/unit?unit=30&amp;lesson=31
=FLAMES - a Childhood play=
In childhood, we might have played a game called FLAMES to find the relationship (illusion!!) between a boy and a girl.  

All you have to do is

&lt;b&gt; Steps : &lt;/b&gt;
 1. write their names and strike out the common characters that occur in both their names.
 2. Count the remaining letters (SAY X)
 3. Write the word FLAMES and start counting from F and strike out the X&lt;sup&gt;th&lt;/sup&gt; letter till only one character remains
 4. If it is F - then the two are Friends. L - Love, A - Affection,  M - Marriage  E- Enemy S- Sister

&lt;table width=&quot;449&quot; height=&quot;116&quot; border=&quot;1&quot;&gt;
 &lt;tr&gt;
    &lt;td&gt;[[File:Flamestep1.JPG|300px]]&lt;/td&gt;
    &lt;td&gt;[[File:Flamestep2.JPG|300px]]&lt;/td&gt;
    &lt;td&gt;[[File:flamestep3.JPG|300px]]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td width = 200&gt;Remaining No. of Characters = 7&lt;/td&gt;
    &lt;td width = 200&gt;Counting from F, wrap over and strike the 7&lt;SUP&gt;th&lt;/SUP&gt; letter&lt;/td&gt;
    &lt;td width = 200&gt;The remaining letter denotes the relationship&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;
== Refresh the operations on Strings and Lists ==
&lt;table width=&quot;200&quot; border=&quot;1&quot;&gt;
  &lt;tr&gt;
    &lt;th scope=&quot;col&quot; width=100&gt;Functions&lt;/th&gt;
    &lt;th scope=&quot;col&quot; width=100&gt;Example&lt;/th&gt;
    &lt;th scope=&quot;col&quot; width=100&gt;Result&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;import &lt;/td&gt;
    &lt;td&gt;import string&lt;/td&gt;
    &lt;td&gt;import string module&lt;/td&gt;
  &lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;input a string&lt;/td&gt;
    &lt;td&gt;s = input()&lt;/td&gt;
    &lt;td&gt;input a string to the variable s&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Convert to lower case&lt;/td&gt;
    &lt;td&gt;print(s.lower())&lt;/td&gt;
    &lt;td &gt; raj &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Convert to upper case&lt;/td&gt;
    &lt;td&gt;print(s.upper())&lt;/td&gt;
    &lt;td&gt; RAJ&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Convert the string to list&lt;/td&gt;
    &lt;td&gt;s1 = list(s)&lt;/td&gt;
    &lt;td&gt;s1 will be ['R','a','j']&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Replace a character&lt;/td&gt;
    &lt;td&gt;print(s.replace(&quot;j&quot;,&quot;#&quot;))&lt;/td&gt;
    &lt;td&gt;'Ra#' .Note: the content of s is not changed.&lt;/td&gt;
  &lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;Replace more than one character&lt;/td&gt;
    &lt;td&gt;print(s.replace(&quot;aj&quot;,&quot;#&quot;))&lt;/td&gt;
    &lt;td&gt;'R#'&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;slice. l = ['a','b','c','d','e']&lt;/td&gt;
    &lt;td&gt;l[1:4]&lt;/td&gt;
    &lt;td&gt;['b', 'c', 'd'] &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;slice. First index is missing &lt;/td&gt;
    &lt;td&gt;l[:4]&lt;/td&gt;
    &lt;td&gt; ['a', 'b', 'c', 'd']  Default is 0 if first index is omitted &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;slice. Second index is missing &lt;/td&gt;
    &lt;td&gt;l[1:]&lt;/td&gt;
    &lt;td&gt; ['b', 'c', 'd', 'e'] Default is length of the list if second index is omitted&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;</text>
      <sha1>pd4zlk8plbmebhbtacdat1durbxjq1w</sha1>
    </revision>
    <revision>
      <id>3956</id>
      <parentid>3955</parentid>
      <timestamp>2018-10-01T11:16:07Z</timestamp>
      <contributor>
        <username>Sam</username>
        <id>673</id>
      </contributor>
      <comment>/* Refresh the operations on Strings and Lists */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="2739">==Week 10==
https://onlinecourses.nptel.ac.in/noc18_cs35/unit?unit=30&amp;lesson=31
=FLAMES - a Childhood play=
In childhood, we might have played a game called FLAMES to find the relationship (illusion!!) between a boy and a girl.  

All you have to do is

&lt;b&gt; Steps : &lt;/b&gt;
 1. write their names and strike out the common characters that occur in both their names.
 2. Count the remaining letters (SAY X)
 3. Write the word FLAMES and start counting from F and strike out the X&lt;sup&gt;th&lt;/sup&gt; letter till only one character remains
 4. If it is F - then the two are Friends. L - Love, A - Affection,  M - Marriage  E- Enemy S- Sister

&lt;table width=&quot;449&quot; height=&quot;116&quot; border=&quot;1&quot;&gt;
 &lt;tr&gt;
    &lt;td&gt;[[File:Flamestep1.JPG|300px]]&lt;/td&gt;
    &lt;td&gt;[[File:Flamestep2.JPG|300px]]&lt;/td&gt;
    &lt;td&gt;[[File:flamestep3.JPG|300px]]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td width = 200&gt;Remaining No. of Characters = 7&lt;/td&gt;
    &lt;td width = 200&gt;Counting from F, wrap over and strike the 7&lt;SUP&gt;th&lt;/SUP&gt; letter&lt;/td&gt;
    &lt;td width = 200&gt;The remaining letter denotes the relationship&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;
== Refresh the operations on Strings and Lists ==
&lt;table width=&quot;200&quot; border=&quot;1&quot;&gt;
  &lt;tr&gt;
    &lt;th scope=&quot;col&quot; width=100&gt;Functions&lt;/th&gt;
    &lt;th scope=&quot;col&quot; width=100&gt;Example&lt;/th&gt;
    &lt;th scope=&quot;col&quot; width=100&gt;Result&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;import &lt;/td&gt;
    &lt;td&gt;import string&lt;/td&gt;
    &lt;td&gt;import string module&lt;/td&gt;
  &lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;input a string&lt;/td&gt;
    &lt;td&gt;s = input()&lt;/td&gt;
    &lt;td&gt;input a string to the variable s&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Convert to lower case&lt;/td&gt;
    &lt;td&gt;print(s.lower())&lt;/td&gt;
    &lt;td &gt; raj &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Convert to upper case&lt;/td&gt;
    &lt;td&gt;print(s.upper())&lt;/td&gt;
    &lt;td&gt; RAJ&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Convert the string to list&lt;/td&gt;
    &lt;td&gt;s1 = list(s)&lt;/td&gt;
    &lt;td&gt;s1 will be ['R','a','j']&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Replace a character&lt;/td&gt;
    &lt;td&gt;print(s.replace(&quot;j&quot;,&quot;#&quot;))&lt;/td&gt;
    &lt;td&gt;'Ra#' .Note: the content of s is not changed.&lt;/td&gt;
  &lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;Replace more than one character&lt;/td&gt;
    &lt;td&gt;print(s.replace(&quot;aj&quot;,&quot;#&quot;))&lt;/td&gt;
    &lt;td&gt;'R#'&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;slice. l = ['a','b','c','d','e']&lt;/td&gt;
    &lt;td&gt;l[1:4]&lt;/td&gt;
    &lt;td&gt;['b', 'c', 'd'] &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;slice. Start index is missing &lt;/td&gt;
    &lt;td&gt;l[:4]&lt;/td&gt;
    &lt;td&gt; ['a', 'b', 'c', 'd']  Default is 0 if start index is omitted &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;slice. End index is missing &lt;/td&gt;
    &lt;td&gt;l[1:]&lt;/td&gt;
    &lt;td&gt; ['b', 'c', 'd', 'e'] Default is length of the list if end index is omitted&lt;/td&gt;
  &lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;slice. Both index missing &lt;/td&gt;
    &lt;td&gt;l[:]&lt;/td&gt;
    &lt;td&gt; ['a','b','c','d','e'] &lt;/td&gt;
  &lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;Index of first occurrence of a char.  &lt;/td&gt;
    &lt;td&gt;print(l.index('d'))&lt;/td&gt;
    &lt;td&gt; 3 &lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;</text>
      <sha1>6h9zm0urjuhk6i5dqqkewd26d3qh003</sha1>
    </revision>
    <revision>
      <id>3957</id>
      <parentid>3956</parentid>
      <timestamp>2018-10-01T11:46:10Z</timestamp>
      <contributor>
        <username>Sam</username>
        <id>673</id>
      </contributor>
      <comment>/* Refresh the operations on Strings and Lists */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="3865">==Week 10==
https://onlinecourses.nptel.ac.in/noc18_cs35/unit?unit=30&amp;lesson=31
=FLAMES - a Childhood play=
In childhood, we might have played a game called FLAMES to find the relationship (illusion!!) between a boy and a girl.  

All you have to do is

&lt;b&gt; Steps : &lt;/b&gt;
 1. write their names and strike out the common characters that occur in both their names.
 2. Count the remaining letters (SAY X)
 3. Write the word FLAMES and start counting from F and strike out the X&lt;sup&gt;th&lt;/sup&gt; letter till only one character remains
 4. If it is F - then the two are Friends. L - Love, A - Affection,  M - Marriage  E- Enemy S- Sister

&lt;table width=&quot;449&quot; height=&quot;116&quot; border=&quot;1&quot;&gt;
 &lt;tr&gt;
    &lt;td&gt;[[File:Flamestep1.JPG|300px]]&lt;/td&gt;
    &lt;td&gt;[[File:Flamestep2.JPG|300px]]&lt;/td&gt;
    &lt;td&gt;[[File:flamestep3.JPG|300px]]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td width = 200&gt;Remaining No. of Characters = 7&lt;/td&gt;
    &lt;td width = 200&gt;Counting from F, wrap over and strike the 7&lt;SUP&gt;th&lt;/SUP&gt; letter&lt;/td&gt;
    &lt;td width = 200&gt;The remaining letter denotes the relationship&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;
== Refresh the operations on Strings and Lists ==
&lt;table width=&quot;200&quot; border=&quot;1&quot;&gt;
  &lt;tr&gt;
    &lt;th scope=&quot;col&quot; width=100&gt;Functions&lt;/th&gt;
    &lt;th scope=&quot;col&quot; width=100&gt;Example&lt;/th&gt;
    &lt;th scope=&quot;col&quot; width=100&gt;Result&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;import &lt;/td&gt;
    &lt;td&gt;import string&lt;/td&gt;
    &lt;td&gt;import string module&lt;/td&gt;
  &lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;input a string&lt;/td&gt;
    &lt;td&gt;s = input()&lt;/td&gt;
    &lt;td&gt;input a string to the variable s&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Convert to lower case&lt;/td&gt;
    &lt;td&gt;print(s.lower())&lt;/td&gt;
    &lt;td &gt; raj &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Convert to upper case&lt;/td&gt;
    &lt;td&gt;print(s.upper())&lt;/td&gt;
    &lt;td&gt; RAJ&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Convert the string to list&lt;/td&gt;
    &lt;td&gt;s1 = list(s)&lt;/td&gt;
    &lt;td&gt;s1 will be ['R','a','j']&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Replace a character&lt;/td&gt;
    &lt;td&gt;print(s.replace(&quot;j&quot;,&quot;#&quot;))&lt;/td&gt;
    &lt;td&gt;'Ra#' .Note: the content of s is not changed.&lt;/td&gt;
  &lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;Replace more than one character&lt;/td&gt;
    &lt;td&gt;print(s.replace(&quot;aj&quot;,&quot;#&quot;))&lt;/td&gt;
    &lt;td&gt;'R#'&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;slice. l = ['a','b','c','d','e']&lt;/td&gt;
    &lt;td&gt;l[1:4]&lt;/td&gt;
    &lt;td&gt;['b', 'c', 'd'] &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;slice. Start index is missing &lt;/td&gt;
    &lt;td&gt;l[:4]&lt;/td&gt;
    &lt;td&gt; ['a', 'b', 'c', 'd']  Default is 0 if start index is omitted &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;slice. End index is missing &lt;/td&gt;
    &lt;td&gt;l[1:]&lt;/td&gt;
    &lt;td&gt; ['b', 'c', 'd', 'e'] Default is length of the list if end index is omitted&lt;/td&gt;
  &lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;slice. Both index missing &lt;/td&gt;
    &lt;td&gt;l[:]&lt;/td&gt;
    &lt;td&gt; ['a','b','c','d','e'] &lt;/td&gt;
  &lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;Index of first occurrence of a char.  &lt;/td&gt;
    &lt;td&gt;print(l.index('d'))&lt;/td&gt;
    &lt;td&gt; 3 &lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;
== Code as given by Vidya ==
&lt;pre&gt;
import string

def remove_matching_letter(l1,l2) :
    for i in range(len(l1)) :
        for j in range(len(l2)):
            if l1[i] == l2[j] :
                c = l1[i]
                l1.remove(c)
                l2.remove(c)
                l = l1 + ['*'] +l2
                return[l,True]
    l = l1+['*']+l2
    return[l,False]


p1 = input(&quot;Enter first person name:&quot;)
p1 = p1.lower()
p1=  p1.replace(&quot; &quot;,&quot;&quot;)

p2 = input(&quot;Enter Second person name:&quot;)
p2 = p2.lower()
p2 =  p2.replace(&quot; &quot;,&quot;&quot;)

l1 = list(p1)
l2 = list(p2)

proceed = True
while proceed:
    [con_list,proceed] = remove_matching_letter(l1,l2)
    star_index = con_list.index('*')
    l1 = con_list[:star_index]
    l2 = con_list[star_index+1:]
    
count = len(l1) + len(l2)
result = ['Friends','Love','Affection','Marriage','Enemy','Sibling']

while len(result) &gt; 1 :
    split_index = (count%len(result)) -1
    if split_index &gt;= 0 :
        right = result[split_index + 1 :]
        left = result[:split_index]
        result = right + left
    else :
        result = result[:len(result) -1]
print(result[0])
&lt;/pre&gt;</text>
      <sha1>k7egjqmpb3xflk6d4keyvhclup1fi6p</sha1>
    </revision>
    <revision>
      <id>3958</id>
      <parentid>3957</parentid>
      <timestamp>2018-10-01T11:46:47Z</timestamp>
      <contributor>
        <username>Sam</username>
        <id>673</id>
      </contributor>
      <comment>/* Week 10 */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="3879">==Week 10 Download URL==
https://onlinecourses.nptel.ac.in/noc18_cs35/unit?unit=30&amp;lesson=31

=FLAMES - a Childhood play=
In childhood, we might have played a game called FLAMES to find the relationship (illusion!!) between a boy and a girl.  

All you have to do is

&lt;b&gt; Steps : &lt;/b&gt;
 1. write their names and strike out the common characters that occur in both their names.
 2. Count the remaining letters (SAY X)
 3. Write the word FLAMES and start counting from F and strike out the X&lt;sup&gt;th&lt;/sup&gt; letter till only one character remains
 4. If it is F - then the two are Friends. L - Love, A - Affection,  M - Marriage  E- Enemy S- Sister

&lt;table width=&quot;449&quot; height=&quot;116&quot; border=&quot;1&quot;&gt;
 &lt;tr&gt;
    &lt;td&gt;[[File:Flamestep1.JPG|300px]]&lt;/td&gt;
    &lt;td&gt;[[File:Flamestep2.JPG|300px]]&lt;/td&gt;
    &lt;td&gt;[[File:flamestep3.JPG|300px]]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td width = 200&gt;Remaining No. of Characters = 7&lt;/td&gt;
    &lt;td width = 200&gt;Counting from F, wrap over and strike the 7&lt;SUP&gt;th&lt;/SUP&gt; letter&lt;/td&gt;
    &lt;td width = 200&gt;The remaining letter denotes the relationship&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;
== Refresh the operations on Strings and Lists ==
&lt;table width=&quot;200&quot; border=&quot;1&quot;&gt;
  &lt;tr&gt;
    &lt;th scope=&quot;col&quot; width=100&gt;Functions&lt;/th&gt;
    &lt;th scope=&quot;col&quot; width=100&gt;Example&lt;/th&gt;
    &lt;th scope=&quot;col&quot; width=100&gt;Result&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;import &lt;/td&gt;
    &lt;td&gt;import string&lt;/td&gt;
    &lt;td&gt;import string module&lt;/td&gt;
  &lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;input a string&lt;/td&gt;
    &lt;td&gt;s = input()&lt;/td&gt;
    &lt;td&gt;input a string to the variable s&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Convert to lower case&lt;/td&gt;
    &lt;td&gt;print(s.lower())&lt;/td&gt;
    &lt;td &gt; raj &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Convert to upper case&lt;/td&gt;
    &lt;td&gt;print(s.upper())&lt;/td&gt;
    &lt;td&gt; RAJ&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Convert the string to list&lt;/td&gt;
    &lt;td&gt;s1 = list(s)&lt;/td&gt;
    &lt;td&gt;s1 will be ['R','a','j']&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Replace a character&lt;/td&gt;
    &lt;td&gt;print(s.replace(&quot;j&quot;,&quot;#&quot;))&lt;/td&gt;
    &lt;td&gt;'Ra#' .Note: the content of s is not changed.&lt;/td&gt;
  &lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;Replace more than one character&lt;/td&gt;
    &lt;td&gt;print(s.replace(&quot;aj&quot;,&quot;#&quot;))&lt;/td&gt;
    &lt;td&gt;'R#'&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;slice. l = ['a','b','c','d','e']&lt;/td&gt;
    &lt;td&gt;l[1:4]&lt;/td&gt;
    &lt;td&gt;['b', 'c', 'd'] &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;slice. Start index is missing &lt;/td&gt;
    &lt;td&gt;l[:4]&lt;/td&gt;
    &lt;td&gt; ['a', 'b', 'c', 'd']  Default is 0 if start index is omitted &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;slice. End index is missing &lt;/td&gt;
    &lt;td&gt;l[1:]&lt;/td&gt;
    &lt;td&gt; ['b', 'c', 'd', 'e'] Default is length of the list if end index is omitted&lt;/td&gt;
  &lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;slice. Both index missing &lt;/td&gt;
    &lt;td&gt;l[:]&lt;/td&gt;
    &lt;td&gt; ['a','b','c','d','e'] &lt;/td&gt;
  &lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;Index of first occurrence of a char.  &lt;/td&gt;
    &lt;td&gt;print(l.index('d'))&lt;/td&gt;
    &lt;td&gt; 3 &lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;
== Code as given by Vidya ==
&lt;pre&gt;
import string

def remove_matching_letter(l1,l2) :
    for i in range(len(l1)) :
        for j in range(len(l2)):
            if l1[i] == l2[j] :
                c = l1[i]
                l1.remove(c)
                l2.remove(c)
                l = l1 + ['*'] +l2
                return[l,True]
    l = l1+['*']+l2
    return[l,False]


p1 = input(&quot;Enter first person name:&quot;)
p1 = p1.lower()
p1=  p1.replace(&quot; &quot;,&quot;&quot;)

p2 = input(&quot;Enter Second person name:&quot;)
p2 = p2.lower()
p2 =  p2.replace(&quot; &quot;,&quot;&quot;)

l1 = list(p1)
l2 = list(p2)

proceed = True
while proceed:
    [con_list,proceed] = remove_matching_letter(l1,l2)
    star_index = con_list.index('*')
    l1 = con_list[:star_index]
    l2 = con_list[star_index+1:]
    
count = len(l1) + len(l2)
result = ['Friends','Love','Affection','Marriage','Enemy','Sibling']

while len(result) &gt; 1 :
    split_index = (count%len(result)) -1
    if split_index &gt;= 0 :
        right = result[split_index + 1 :]
        left = result[:split_index]
        result = right + left
    else :
        result = result[:len(result) -1]
print(result[0])
&lt;/pre&gt;</text>
      <sha1>o50ij6onuxifu7t06nmk71pfol457fq</sha1>
    </revision>
    <revision>
      <id>3959</id>
      <parentid>3958</parentid>
      <timestamp>2018-10-01T11:51:43Z</timestamp>
      <contributor>
        <username>Sam</username>
        <id>673</id>
      </contributor>
      <comment>/* Code as given by Vidya */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="4182">==Week 10 Download URL==
https://onlinecourses.nptel.ac.in/noc18_cs35/unit?unit=30&amp;lesson=31

=FLAMES - a Childhood play=
In childhood, we might have played a game called FLAMES to find the relationship (illusion!!) between a boy and a girl.  

All you have to do is

&lt;b&gt; Steps : &lt;/b&gt;
 1. write their names and strike out the common characters that occur in both their names.
 2. Count the remaining letters (SAY X)
 3. Write the word FLAMES and start counting from F and strike out the X&lt;sup&gt;th&lt;/sup&gt; letter till only one character remains
 4. If it is F - then the two are Friends. L - Love, A - Affection,  M - Marriage  E- Enemy S- Sister

&lt;table width=&quot;449&quot; height=&quot;116&quot; border=&quot;1&quot;&gt;
 &lt;tr&gt;
    &lt;td&gt;[[File:Flamestep1.JPG|300px]]&lt;/td&gt;
    &lt;td&gt;[[File:Flamestep2.JPG|300px]]&lt;/td&gt;
    &lt;td&gt;[[File:flamestep3.JPG|300px]]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td width = 200&gt;Remaining No. of Characters = 7&lt;/td&gt;
    &lt;td width = 200&gt;Counting from F, wrap over and strike the 7&lt;SUP&gt;th&lt;/SUP&gt; letter&lt;/td&gt;
    &lt;td width = 200&gt;The remaining letter denotes the relationship&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;
== Refresh the operations on Strings and Lists ==
&lt;table width=&quot;200&quot; border=&quot;1&quot;&gt;
  &lt;tr&gt;
    &lt;th scope=&quot;col&quot; width=100&gt;Functions&lt;/th&gt;
    &lt;th scope=&quot;col&quot; width=100&gt;Example&lt;/th&gt;
    &lt;th scope=&quot;col&quot; width=100&gt;Result&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;import &lt;/td&gt;
    &lt;td&gt;import string&lt;/td&gt;
    &lt;td&gt;import string module&lt;/td&gt;
  &lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;input a string&lt;/td&gt;
    &lt;td&gt;s = input()&lt;/td&gt;
    &lt;td&gt;input a string to the variable s&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Convert to lower case&lt;/td&gt;
    &lt;td&gt;print(s.lower())&lt;/td&gt;
    &lt;td &gt; raj &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Convert to upper case&lt;/td&gt;
    &lt;td&gt;print(s.upper())&lt;/td&gt;
    &lt;td&gt; RAJ&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Convert the string to list&lt;/td&gt;
    &lt;td&gt;s1 = list(s)&lt;/td&gt;
    &lt;td&gt;s1 will be ['R','a','j']&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Replace a character&lt;/td&gt;
    &lt;td&gt;print(s.replace(&quot;j&quot;,&quot;#&quot;))&lt;/td&gt;
    &lt;td&gt;'Ra#' .Note: the content of s is not changed.&lt;/td&gt;
  &lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;Replace more than one character&lt;/td&gt;
    &lt;td&gt;print(s.replace(&quot;aj&quot;,&quot;#&quot;))&lt;/td&gt;
    &lt;td&gt;'R#'&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;slice. l = ['a','b','c','d','e']&lt;/td&gt;
    &lt;td&gt;l[1:4]&lt;/td&gt;
    &lt;td&gt;['b', 'c', 'd'] &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;slice. Start index is missing &lt;/td&gt;
    &lt;td&gt;l[:4]&lt;/td&gt;
    &lt;td&gt; ['a', 'b', 'c', 'd']  Default is 0 if start index is omitted &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;slice. End index is missing &lt;/td&gt;
    &lt;td&gt;l[1:]&lt;/td&gt;
    &lt;td&gt; ['b', 'c', 'd', 'e'] Default is length of the list if end index is omitted&lt;/td&gt;
  &lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;slice. Both index missing &lt;/td&gt;
    &lt;td&gt;l[:]&lt;/td&gt;
    &lt;td&gt; ['a','b','c','d','e'] &lt;/td&gt;
  &lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;Index of first occurrence of a char.  &lt;/td&gt;
    &lt;td&gt;print(l.index('d'))&lt;/td&gt;
    &lt;td&gt; 3 &lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;
== Code as given by Vidya ==
&lt;pre&gt;
import string

def remove_matching_letter(l1,l2) :
    for i in range(len(l1)) :
        for j in range(len(l2)):
            if l1[i] == l2[j] :
                c = l1[i]
                l1.remove(c)
                l2.remove(c)
                l = l1 + ['*'] +l2
                return[l,True]
    l = l1+['*']+l2
    return[l,False]


p1 = input(&quot;Enter first person name:&quot;)
p1 = p1.lower()
p1=  p1.replace(&quot; &quot;,&quot;&quot;)

p2 = input(&quot;Enter Second person name:&quot;)
p2 = p2.lower()
p2 =  p2.replace(&quot; &quot;,&quot;&quot;)

l1 = list(p1)
l2 = list(p2)

proceed = True
while proceed:
    [con_list,proceed] = remove_matching_letter(l1,l2)
    star_index = con_list.index('*')
    l1 = con_list[:star_index]
    l2 = con_list[star_index+1:]
    
count = len(l1) + len(l2)
result = ['Friends','Love','Affection','Marriage','Enemy','Sibling']

while len(result) &gt; 1 :
    split_index = (count%len(result)) -1
    if split_index &gt;= 0 :
        right = result[split_index + 1 :]
        left = result[:split_index]
        result = right + left
    else :
        result = result[:len(result) -1]
print(result[0])
&lt;/pre&gt;
== Image Compression ==
Suppose you have a web page with lots of images.  It will take more time to download.  To make downloading faster, either you remove the images or reduce the size of the images.  Both methods will not give a good or required result.  Instead you can do &lt;b&gt; Image Compression&lt;/b&gt;</text>
      <sha1>2h79zhcdo8prm9br9j35l7nobq9qtz8</sha1>
    </revision>
    <revision>
      <id>3960</id>
      <parentid>3959</parentid>
      <timestamp>2018-10-01T11:52:56Z</timestamp>
      <contributor>
        <username>Sam</username>
        <id>673</id>
      </contributor>
      <comment>/* Image Compression */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="4180">==Week 10 Download URL==
https://onlinecourses.nptel.ac.in/noc18_cs35/unit?unit=30&amp;lesson=31

=FLAMES - a Childhood play=
In childhood, we might have played a game called FLAMES to find the relationship (illusion!!) between a boy and a girl.  

All you have to do is

&lt;b&gt; Steps : &lt;/b&gt;
 1. write their names and strike out the common characters that occur in both their names.
 2. Count the remaining letters (SAY X)
 3. Write the word FLAMES and start counting from F and strike out the X&lt;sup&gt;th&lt;/sup&gt; letter till only one character remains
 4. If it is F - then the two are Friends. L - Love, A - Affection,  M - Marriage  E- Enemy S- Sister

&lt;table width=&quot;449&quot; height=&quot;116&quot; border=&quot;1&quot;&gt;
 &lt;tr&gt;
    &lt;td&gt;[[File:Flamestep1.JPG|300px]]&lt;/td&gt;
    &lt;td&gt;[[File:Flamestep2.JPG|300px]]&lt;/td&gt;
    &lt;td&gt;[[File:flamestep3.JPG|300px]]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td width = 200&gt;Remaining No. of Characters = 7&lt;/td&gt;
    &lt;td width = 200&gt;Counting from F, wrap over and strike the 7&lt;SUP&gt;th&lt;/SUP&gt; letter&lt;/td&gt;
    &lt;td width = 200&gt;The remaining letter denotes the relationship&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;
== Refresh the operations on Strings and Lists ==
&lt;table width=&quot;200&quot; border=&quot;1&quot;&gt;
  &lt;tr&gt;
    &lt;th scope=&quot;col&quot; width=100&gt;Functions&lt;/th&gt;
    &lt;th scope=&quot;col&quot; width=100&gt;Example&lt;/th&gt;
    &lt;th scope=&quot;col&quot; width=100&gt;Result&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;import &lt;/td&gt;
    &lt;td&gt;import string&lt;/td&gt;
    &lt;td&gt;import string module&lt;/td&gt;
  &lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;input a string&lt;/td&gt;
    &lt;td&gt;s = input()&lt;/td&gt;
    &lt;td&gt;input a string to the variable s&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Convert to lower case&lt;/td&gt;
    &lt;td&gt;print(s.lower())&lt;/td&gt;
    &lt;td &gt; raj &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Convert to upper case&lt;/td&gt;
    &lt;td&gt;print(s.upper())&lt;/td&gt;
    &lt;td&gt; RAJ&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Convert the string to list&lt;/td&gt;
    &lt;td&gt;s1 = list(s)&lt;/td&gt;
    &lt;td&gt;s1 will be ['R','a','j']&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Replace a character&lt;/td&gt;
    &lt;td&gt;print(s.replace(&quot;j&quot;,&quot;#&quot;))&lt;/td&gt;
    &lt;td&gt;'Ra#' .Note: the content of s is not changed.&lt;/td&gt;
  &lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;Replace more than one character&lt;/td&gt;
    &lt;td&gt;print(s.replace(&quot;aj&quot;,&quot;#&quot;))&lt;/td&gt;
    &lt;td&gt;'R#'&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;slice. l = ['a','b','c','d','e']&lt;/td&gt;
    &lt;td&gt;l[1:4]&lt;/td&gt;
    &lt;td&gt;['b', 'c', 'd'] &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;slice. Start index is missing &lt;/td&gt;
    &lt;td&gt;l[:4]&lt;/td&gt;
    &lt;td&gt; ['a', 'b', 'c', 'd']  Default is 0 if start index is omitted &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;slice. End index is missing &lt;/td&gt;
    &lt;td&gt;l[1:]&lt;/td&gt;
    &lt;td&gt; ['b', 'c', 'd', 'e'] Default is length of the list if end index is omitted&lt;/td&gt;
  &lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;slice. Both index missing &lt;/td&gt;
    &lt;td&gt;l[:]&lt;/td&gt;
    &lt;td&gt; ['a','b','c','d','e'] &lt;/td&gt;
  &lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;Index of first occurrence of a char.  &lt;/td&gt;
    &lt;td&gt;print(l.index('d'))&lt;/td&gt;
    &lt;td&gt; 3 &lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;
== Code as given by Vidya ==
&lt;pre&gt;
import string

def remove_matching_letter(l1,l2) :
    for i in range(len(l1)) :
        for j in range(len(l2)):
            if l1[i] == l2[j] :
                c = l1[i]
                l1.remove(c)
                l2.remove(c)
                l = l1 + ['*'] +l2
                return[l,True]
    l = l1+['*']+l2
    return[l,False]


p1 = input(&quot;Enter first person name:&quot;)
p1 = p1.lower()
p1=  p1.replace(&quot; &quot;,&quot;&quot;)

p2 = input(&quot;Enter Second person name:&quot;)
p2 = p2.lower()
p2 =  p2.replace(&quot; &quot;,&quot;&quot;)

l1 = list(p1)
l2 = list(p2)

proceed = True
while proceed:
    [con_list,proceed] = remove_matching_letter(l1,l2)
    star_index = con_list.index('*')
    l1 = con_list[:star_index]
    l2 = con_list[star_index+1:]
    
count = len(l1) + len(l2)
result = ['Friends','Love','Affection','Marriage','Enemy','Sibling']

while len(result) &gt; 1 :
    split_index = (count%len(result)) -1
    if split_index &gt;= 0 :
        right = result[split_index + 1 :]
        left = result[:split_index]
        result = right + left
    else :
        result = result[:len(result) -1]
print(result[0])
&lt;/pre&gt;
= Image Compression =
Suppose you have a web page with lots of images.  It will take more time to download.  To make downloading faster, either you remove the images or reduce the size of the images.  Both methods will not give a good or required result.  Instead you can do &lt;b&gt; Image Compression&lt;/b&gt;</text>
      <sha1>jf88muam1ksaqamwtdgbsngojqqv0qz</sha1>
    </revision>
    <revision>
      <id>3961</id>
      <parentid>3960</parentid>
      <timestamp>2018-10-01T12:00:14Z</timestamp>
      <contributor>
        <username>Sam</username>
        <id>673</id>
      </contributor>
      <comment>/* Image Compression */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="4456">==Week 10 Download URL==
https://onlinecourses.nptel.ac.in/noc18_cs35/unit?unit=30&amp;lesson=31

=FLAMES - a Childhood play=
In childhood, we might have played a game called FLAMES to find the relationship (illusion!!) between a boy and a girl.  

All you have to do is

&lt;b&gt; Steps : &lt;/b&gt;
 1. write their names and strike out the common characters that occur in both their names.
 2. Count the remaining letters (SAY X)
 3. Write the word FLAMES and start counting from F and strike out the X&lt;sup&gt;th&lt;/sup&gt; letter till only one character remains
 4. If it is F - then the two are Friends. L - Love, A - Affection,  M - Marriage  E- Enemy S- Sister

&lt;table width=&quot;449&quot; height=&quot;116&quot; border=&quot;1&quot;&gt;
 &lt;tr&gt;
    &lt;td&gt;[[File:Flamestep1.JPG|300px]]&lt;/td&gt;
    &lt;td&gt;[[File:Flamestep2.JPG|300px]]&lt;/td&gt;
    &lt;td&gt;[[File:flamestep3.JPG|300px]]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td width = 200&gt;Remaining No. of Characters = 7&lt;/td&gt;
    &lt;td width = 200&gt;Counting from F, wrap over and strike the 7&lt;SUP&gt;th&lt;/SUP&gt; letter&lt;/td&gt;
    &lt;td width = 200&gt;The remaining letter denotes the relationship&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;
== Refresh the operations on Strings and Lists ==
&lt;table width=&quot;200&quot; border=&quot;1&quot;&gt;
  &lt;tr&gt;
    &lt;th scope=&quot;col&quot; width=100&gt;Functions&lt;/th&gt;
    &lt;th scope=&quot;col&quot; width=100&gt;Example&lt;/th&gt;
    &lt;th scope=&quot;col&quot; width=100&gt;Result&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;import &lt;/td&gt;
    &lt;td&gt;import string&lt;/td&gt;
    &lt;td&gt;import string module&lt;/td&gt;
  &lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;input a string&lt;/td&gt;
    &lt;td&gt;s = input()&lt;/td&gt;
    &lt;td&gt;input a string to the variable s&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Convert to lower case&lt;/td&gt;
    &lt;td&gt;print(s.lower())&lt;/td&gt;
    &lt;td &gt; raj &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Convert to upper case&lt;/td&gt;
    &lt;td&gt;print(s.upper())&lt;/td&gt;
    &lt;td&gt; RAJ&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Convert the string to list&lt;/td&gt;
    &lt;td&gt;s1 = list(s)&lt;/td&gt;
    &lt;td&gt;s1 will be ['R','a','j']&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Replace a character&lt;/td&gt;
    &lt;td&gt;print(s.replace(&quot;j&quot;,&quot;#&quot;))&lt;/td&gt;
    &lt;td&gt;'Ra#' .Note: the content of s is not changed.&lt;/td&gt;
  &lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;Replace more than one character&lt;/td&gt;
    &lt;td&gt;print(s.replace(&quot;aj&quot;,&quot;#&quot;))&lt;/td&gt;
    &lt;td&gt;'R#'&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;slice. l = ['a','b','c','d','e']&lt;/td&gt;
    &lt;td&gt;l[1:4]&lt;/td&gt;
    &lt;td&gt;['b', 'c', 'd'] &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;slice. Start index is missing &lt;/td&gt;
    &lt;td&gt;l[:4]&lt;/td&gt;
    &lt;td&gt; ['a', 'b', 'c', 'd']  Default is 0 if start index is omitted &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;slice. End index is missing &lt;/td&gt;
    &lt;td&gt;l[1:]&lt;/td&gt;
    &lt;td&gt; ['b', 'c', 'd', 'e'] Default is length of the list if end index is omitted&lt;/td&gt;
  &lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;slice. Both index missing &lt;/td&gt;
    &lt;td&gt;l[:]&lt;/td&gt;
    &lt;td&gt; ['a','b','c','d','e'] &lt;/td&gt;
  &lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;Index of first occurrence of a char.  &lt;/td&gt;
    &lt;td&gt;print(l.index('d'))&lt;/td&gt;
    &lt;td&gt; 3 &lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;
== Code as given by Vidya ==
&lt;pre&gt;
import string

def remove_matching_letter(l1,l2) :
    for i in range(len(l1)) :
        for j in range(len(l2)):
            if l1[i] == l2[j] :
                c = l1[i]
                l1.remove(c)
                l2.remove(c)
                l = l1 + ['*'] +l2
                return[l,True]
    l = l1+['*']+l2
    return[l,False]


p1 = input(&quot;Enter first person name:&quot;)
p1 = p1.lower()
p1=  p1.replace(&quot; &quot;,&quot;&quot;)

p2 = input(&quot;Enter Second person name:&quot;)
p2 = p2.lower()
p2 =  p2.replace(&quot; &quot;,&quot;&quot;)

l1 = list(p1)
l2 = list(p2)

proceed = True
while proceed:
    [con_list,proceed] = remove_matching_letter(l1,l2)
    star_index = con_list.index('*')
    l1 = con_list[:star_index]
    l2 = con_list[star_index+1:]
    
count = len(l1) + len(l2)
result = ['Friends','Love','Affection','Marriage','Enemy','Sibling']

while len(result) &gt; 1 :
    split_index = (count%len(result)) -1
    if split_index &gt;= 0 :
        right = result[split_index + 1 :]
        left = result[:split_index]
        result = right + left
    else :
        result = result[:len(result) -1]
print(result[0])
&lt;/pre&gt;
= Image Compression =
Suppose you have a web page with lots of images.  It will take more time to download.  To make downloading faster, either you remove the images or reduce the size of the images.  Both methods will not give a good or required result.  Instead you can do &lt;b&gt; Image Compression&lt;/b&gt;
==NumPy==
NumPy is module for Python. The name is an acronym for &quot;Numeric Python&quot;. It enriches Python with powerful data structures, implementing multi-dimensional arrays and matrices. To work with Artificial Intelligence, Machine Learning or Deep Learning NumPy is required.</text>
      <sha1>9tl4gpdrhi5psbb8hv8em8tld45q4to</sha1>
    </revision>
    <revision>
      <id>3962</id>
      <parentid>3961</parentid>
      <timestamp>2018-10-01T12:01:14Z</timestamp>
      <contributor>
        <username>Sam</username>
        <id>673</id>
      </contributor>
      <comment>/* NumPy */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="4465">==Week 10 Download URL==
https://onlinecourses.nptel.ac.in/noc18_cs35/unit?unit=30&amp;lesson=31

=FLAMES - a Childhood play=
In childhood, we might have played a game called FLAMES to find the relationship (illusion!!) between a boy and a girl.  

All you have to do is

&lt;b&gt; Steps : &lt;/b&gt;
 1. write their names and strike out the common characters that occur in both their names.
 2. Count the remaining letters (SAY X)
 3. Write the word FLAMES and start counting from F and strike out the X&lt;sup&gt;th&lt;/sup&gt; letter till only one character remains
 4. If it is F - then the two are Friends. L - Love, A - Affection,  M - Marriage  E- Enemy S- Sister

&lt;table width=&quot;449&quot; height=&quot;116&quot; border=&quot;1&quot;&gt;
 &lt;tr&gt;
    &lt;td&gt;[[File:Flamestep1.JPG|300px]]&lt;/td&gt;
    &lt;td&gt;[[File:Flamestep2.JPG|300px]]&lt;/td&gt;
    &lt;td&gt;[[File:flamestep3.JPG|300px]]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td width = 200&gt;Remaining No. of Characters = 7&lt;/td&gt;
    &lt;td width = 200&gt;Counting from F, wrap over and strike the 7&lt;SUP&gt;th&lt;/SUP&gt; letter&lt;/td&gt;
    &lt;td width = 200&gt;The remaining letter denotes the relationship&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;
== Refresh the operations on Strings and Lists ==
&lt;table width=&quot;200&quot; border=&quot;1&quot;&gt;
  &lt;tr&gt;
    &lt;th scope=&quot;col&quot; width=100&gt;Functions&lt;/th&gt;
    &lt;th scope=&quot;col&quot; width=100&gt;Example&lt;/th&gt;
    &lt;th scope=&quot;col&quot; width=100&gt;Result&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;import &lt;/td&gt;
    &lt;td&gt;import string&lt;/td&gt;
    &lt;td&gt;import string module&lt;/td&gt;
  &lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;input a string&lt;/td&gt;
    &lt;td&gt;s = input()&lt;/td&gt;
    &lt;td&gt;input a string to the variable s&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Convert to lower case&lt;/td&gt;
    &lt;td&gt;print(s.lower())&lt;/td&gt;
    &lt;td &gt; raj &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Convert to upper case&lt;/td&gt;
    &lt;td&gt;print(s.upper())&lt;/td&gt;
    &lt;td&gt; RAJ&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Convert the string to list&lt;/td&gt;
    &lt;td&gt;s1 = list(s)&lt;/td&gt;
    &lt;td&gt;s1 will be ['R','a','j']&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Replace a character&lt;/td&gt;
    &lt;td&gt;print(s.replace(&quot;j&quot;,&quot;#&quot;))&lt;/td&gt;
    &lt;td&gt;'Ra#' .Note: the content of s is not changed.&lt;/td&gt;
  &lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;Replace more than one character&lt;/td&gt;
    &lt;td&gt;print(s.replace(&quot;aj&quot;,&quot;#&quot;))&lt;/td&gt;
    &lt;td&gt;'R#'&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;slice. l = ['a','b','c','d','e']&lt;/td&gt;
    &lt;td&gt;l[1:4]&lt;/td&gt;
    &lt;td&gt;['b', 'c', 'd'] &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;slice. Start index is missing &lt;/td&gt;
    &lt;td&gt;l[:4]&lt;/td&gt;
    &lt;td&gt; ['a', 'b', 'c', 'd']  Default is 0 if start index is omitted &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;slice. End index is missing &lt;/td&gt;
    &lt;td&gt;l[1:]&lt;/td&gt;
    &lt;td&gt; ['b', 'c', 'd', 'e'] Default is length of the list if end index is omitted&lt;/td&gt;
  &lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;slice. Both index missing &lt;/td&gt;
    &lt;td&gt;l[:]&lt;/td&gt;
    &lt;td&gt; ['a','b','c','d','e'] &lt;/td&gt;
  &lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;Index of first occurrence of a char.  &lt;/td&gt;
    &lt;td&gt;print(l.index('d'))&lt;/td&gt;
    &lt;td&gt; 3 &lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;
== Code as given by Vidya ==
&lt;pre&gt;
import string

def remove_matching_letter(l1,l2) :
    for i in range(len(l1)) :
        for j in range(len(l2)):
            if l1[i] == l2[j] :
                c = l1[i]
                l1.remove(c)
                l2.remove(c)
                l = l1 + ['*'] +l2
                return[l,True]
    l = l1+['*']+l2
    return[l,False]


p1 = input(&quot;Enter first person name:&quot;)
p1 = p1.lower()
p1=  p1.replace(&quot; &quot;,&quot;&quot;)

p2 = input(&quot;Enter Second person name:&quot;)
p2 = p2.lower()
p2 =  p2.replace(&quot; &quot;,&quot;&quot;)

l1 = list(p1)
l2 = list(p2)

proceed = True
while proceed:
    [con_list,proceed] = remove_matching_letter(l1,l2)
    star_index = con_list.index('*')
    l1 = con_list[:star_index]
    l2 = con_list[star_index+1:]
    
count = len(l1) + len(l2)
result = ['Friends','Love','Affection','Marriage','Enemy','Sibling']

while len(result) &gt; 1 :
    split_index = (count%len(result)) -1
    if split_index &gt;= 0 :
        right = result[split_index + 1 :]
        left = result[:split_index]
        result = right + left
    else :
        result = result[:len(result) -1]
print(result[0])
&lt;/pre&gt;
= Image Compression =
Suppose you have a web page with lots of images.  It will take more time to download.  To make downloading faster, either you remove the images or reduce the size of the images.  Both methods will not give a good or required result.  Instead you can do &lt;b&gt; Image Compression&lt;/b&gt;
==NumPy Module==
NumPy is a module for Python. The name is an acronym for &quot;Numeric Python&quot;. It enriches Python with powerful data structures, implementing multi-dimensional arrays and matrices. To work with Artificial Intelligence, Machine Learning or Deep Learning NumPy is required.</text>
      <sha1>lfyegjvsx272lz0s3eimxkceq11450a</sha1>
    </revision>
    <revision>
      <id>3963</id>
      <parentid>3962</parentid>
      <timestamp>2018-10-01T12:12:44Z</timestamp>
      <contributor>
        <username>Sam</username>
        <id>673</id>
      </contributor>
      <comment>/* NumPy Module */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="5195">==Week 10 Download URL==
https://onlinecourses.nptel.ac.in/noc18_cs35/unit?unit=30&amp;lesson=31

=FLAMES - a Childhood play=
In childhood, we might have played a game called FLAMES to find the relationship (illusion!!) between a boy and a girl.  

All you have to do is

&lt;b&gt; Steps : &lt;/b&gt;
 1. write their names and strike out the common characters that occur in both their names.
 2. Count the remaining letters (SAY X)
 3. Write the word FLAMES and start counting from F and strike out the X&lt;sup&gt;th&lt;/sup&gt; letter till only one character remains
 4. If it is F - then the two are Friends. L - Love, A - Affection,  M - Marriage  E- Enemy S- Sister

&lt;table width=&quot;449&quot; height=&quot;116&quot; border=&quot;1&quot;&gt;
 &lt;tr&gt;
    &lt;td&gt;[[File:Flamestep1.JPG|300px]]&lt;/td&gt;
    &lt;td&gt;[[File:Flamestep2.JPG|300px]]&lt;/td&gt;
    &lt;td&gt;[[File:flamestep3.JPG|300px]]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td width = 200&gt;Remaining No. of Characters = 7&lt;/td&gt;
    &lt;td width = 200&gt;Counting from F, wrap over and strike the 7&lt;SUP&gt;th&lt;/SUP&gt; letter&lt;/td&gt;
    &lt;td width = 200&gt;The remaining letter denotes the relationship&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;
== Refresh the operations on Strings and Lists ==
&lt;table width=&quot;200&quot; border=&quot;1&quot;&gt;
  &lt;tr&gt;
    &lt;th scope=&quot;col&quot; width=100&gt;Functions&lt;/th&gt;
    &lt;th scope=&quot;col&quot; width=100&gt;Example&lt;/th&gt;
    &lt;th scope=&quot;col&quot; width=100&gt;Result&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;import &lt;/td&gt;
    &lt;td&gt;import string&lt;/td&gt;
    &lt;td&gt;import string module&lt;/td&gt;
  &lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;input a string&lt;/td&gt;
    &lt;td&gt;s = input()&lt;/td&gt;
    &lt;td&gt;input a string to the variable s&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Convert to lower case&lt;/td&gt;
    &lt;td&gt;print(s.lower())&lt;/td&gt;
    &lt;td &gt; raj &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Convert to upper case&lt;/td&gt;
    &lt;td&gt;print(s.upper())&lt;/td&gt;
    &lt;td&gt; RAJ&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Convert the string to list&lt;/td&gt;
    &lt;td&gt;s1 = list(s)&lt;/td&gt;
    &lt;td&gt;s1 will be ['R','a','j']&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Replace a character&lt;/td&gt;
    &lt;td&gt;print(s.replace(&quot;j&quot;,&quot;#&quot;))&lt;/td&gt;
    &lt;td&gt;'Ra#' .Note: the content of s is not changed.&lt;/td&gt;
  &lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;Replace more than one character&lt;/td&gt;
    &lt;td&gt;print(s.replace(&quot;aj&quot;,&quot;#&quot;))&lt;/td&gt;
    &lt;td&gt;'R#'&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;slice. l = ['a','b','c','d','e']&lt;/td&gt;
    &lt;td&gt;l[1:4]&lt;/td&gt;
    &lt;td&gt;['b', 'c', 'd'] &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;slice. Start index is missing &lt;/td&gt;
    &lt;td&gt;l[:4]&lt;/td&gt;
    &lt;td&gt; ['a', 'b', 'c', 'd']  Default is 0 if start index is omitted &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;slice. End index is missing &lt;/td&gt;
    &lt;td&gt;l[1:]&lt;/td&gt;
    &lt;td&gt; ['b', 'c', 'd', 'e'] Default is length of the list if end index is omitted&lt;/td&gt;
  &lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;slice. Both index missing &lt;/td&gt;
    &lt;td&gt;l[:]&lt;/td&gt;
    &lt;td&gt; ['a','b','c','d','e'] &lt;/td&gt;
  &lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;Index of first occurrence of a char.  &lt;/td&gt;
    &lt;td&gt;print(l.index('d'))&lt;/td&gt;
    &lt;td&gt; 3 &lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;
== Code as given by Vidya ==
&lt;pre&gt;
import string

def remove_matching_letter(l1,l2) :
    for i in range(len(l1)) :
        for j in range(len(l2)):
            if l1[i] == l2[j] :
                c = l1[i]
                l1.remove(c)
                l2.remove(c)
                l = l1 + ['*'] +l2
                return[l,True]
    l = l1+['*']+l2
    return[l,False]


p1 = input(&quot;Enter first person name:&quot;)
p1 = p1.lower()
p1=  p1.replace(&quot; &quot;,&quot;&quot;)

p2 = input(&quot;Enter Second person name:&quot;)
p2 = p2.lower()
p2 =  p2.replace(&quot; &quot;,&quot;&quot;)

l1 = list(p1)
l2 = list(p2)

proceed = True
while proceed:
    [con_list,proceed] = remove_matching_letter(l1,l2)
    star_index = con_list.index('*')
    l1 = con_list[:star_index]
    l2 = con_list[star_index+1:]
    
count = len(l1) + len(l2)
result = ['Friends','Love','Affection','Marriage','Enemy','Sibling']

while len(result) &gt; 1 :
    split_index = (count%len(result)) -1
    if split_index &gt;= 0 :
        right = result[split_index + 1 :]
        left = result[:split_index]
        result = right + left
    else :
        result = result[:len(result) -1]
print(result[0])
&lt;/pre&gt;
= Image Compression =
Suppose you have a web page with lots of images.  It will take more time to download.  To make downloading faster, either you remove the images or reduce the size of the images.  Both methods will not give a good or required result.  Instead you can do &lt;b&gt; Image Compression&lt;/b&gt;
==NumPy Module==
NumPy is a module for Python. The name is an acronym for &quot;Numeric Python&quot;. It enriches Python with powerful data structures, implementing multi-dimensional arrays and matrices. To work with Artificial Intelligence, Machine Learning or Deep Learning NumPy is required.
&lt;table width=&quot;200&quot; border=&quot;1&quot;&gt;
  &lt;tr&gt;
    &lt;th scope=&quot;col&quot;&gt;Operations&lt;/th&gt;
    &lt;th scope=&quot;col&quot;&gt;Descriptions&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;import numpy as np &lt;/td&gt;
    &lt;td&gt;numpy is imported and can be accessed with a short name np&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;a=np.array([1,2,3])&lt;/td&gt;
    &lt;td&gt;One dimensional array 'a' is created&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;print(type(a))&lt;/td&gt;
    &lt;td&gt;&lt;class 'numpy.ndarray'&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;print(a.shape)&lt;/td&gt;
    &lt;td&gt;(3,)&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;print (a[0],a[1],a[2])&lt;/td&gt;
    &lt;td&gt;1 2 3&lt;/td&gt;
  &lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;b=np.array([[1,2,3],[4,5,6]])&lt;/td&gt;
    &lt;td&gt;Two dimensional array 'b' is created&lt;/td&gt;
  &lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;print(b.shape)&lt;/td&gt;
    &lt;td&gt;(2,3)&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;</text>
      <sha1>js68g4g71rphthrenpq1nbrs45pu9mo</sha1>
    </revision>
    <revision>
      <id>3967</id>
      <parentid>3963</parentid>
      <timestamp>2018-10-01T12:29:13Z</timestamp>
      <contributor>
        <username>Sam</username>
        <id>673</id>
      </contributor>
      <comment>/* NumPy Module */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="5672">==Week 10 Download URL==
https://onlinecourses.nptel.ac.in/noc18_cs35/unit?unit=30&amp;lesson=31

=FLAMES - a Childhood play=
In childhood, we might have played a game called FLAMES to find the relationship (illusion!!) between a boy and a girl.  

All you have to do is

&lt;b&gt; Steps : &lt;/b&gt;
 1. write their names and strike out the common characters that occur in both their names.
 2. Count the remaining letters (SAY X)
 3. Write the word FLAMES and start counting from F and strike out the X&lt;sup&gt;th&lt;/sup&gt; letter till only one character remains
 4. If it is F - then the two are Friends. L - Love, A - Affection,  M - Marriage  E- Enemy S- Sister

&lt;table width=&quot;449&quot; height=&quot;116&quot; border=&quot;1&quot;&gt;
 &lt;tr&gt;
    &lt;td&gt;[[File:Flamestep1.JPG|300px]]&lt;/td&gt;
    &lt;td&gt;[[File:Flamestep2.JPG|300px]]&lt;/td&gt;
    &lt;td&gt;[[File:flamestep3.JPG|300px]]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td width = 200&gt;Remaining No. of Characters = 7&lt;/td&gt;
    &lt;td width = 200&gt;Counting from F, wrap over and strike the 7&lt;SUP&gt;th&lt;/SUP&gt; letter&lt;/td&gt;
    &lt;td width = 200&gt;The remaining letter denotes the relationship&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;
== Refresh the operations on Strings and Lists ==
&lt;table width=&quot;200&quot; border=&quot;1&quot;&gt;
  &lt;tr&gt;
    &lt;th scope=&quot;col&quot; width=100&gt;Functions&lt;/th&gt;
    &lt;th scope=&quot;col&quot; width=100&gt;Example&lt;/th&gt;
    &lt;th scope=&quot;col&quot; width=100&gt;Result&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;import &lt;/td&gt;
    &lt;td&gt;import string&lt;/td&gt;
    &lt;td&gt;import string module&lt;/td&gt;
  &lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;input a string&lt;/td&gt;
    &lt;td&gt;s = input()&lt;/td&gt;
    &lt;td&gt;input a string to the variable s&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Convert to lower case&lt;/td&gt;
    &lt;td&gt;print(s.lower())&lt;/td&gt;
    &lt;td &gt; raj &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Convert to upper case&lt;/td&gt;
    &lt;td&gt;print(s.upper())&lt;/td&gt;
    &lt;td&gt; RAJ&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Convert the string to list&lt;/td&gt;
    &lt;td&gt;s1 = list(s)&lt;/td&gt;
    &lt;td&gt;s1 will be ['R','a','j']&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Replace a character&lt;/td&gt;
    &lt;td&gt;print(s.replace(&quot;j&quot;,&quot;#&quot;))&lt;/td&gt;
    &lt;td&gt;'Ra#' .Note: the content of s is not changed.&lt;/td&gt;
  &lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;Replace more than one character&lt;/td&gt;
    &lt;td&gt;print(s.replace(&quot;aj&quot;,&quot;#&quot;))&lt;/td&gt;
    &lt;td&gt;'R#'&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;slice. l = ['a','b','c','d','e']&lt;/td&gt;
    &lt;td&gt;l[1:4]&lt;/td&gt;
    &lt;td&gt;['b', 'c', 'd'] &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;slice. Start index is missing &lt;/td&gt;
    &lt;td&gt;l[:4]&lt;/td&gt;
    &lt;td&gt; ['a', 'b', 'c', 'd']  Default is 0 if start index is omitted &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;slice. End index is missing &lt;/td&gt;
    &lt;td&gt;l[1:]&lt;/td&gt;
    &lt;td&gt; ['b', 'c', 'd', 'e'] Default is length of the list if end index is omitted&lt;/td&gt;
  &lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;slice. Both index missing &lt;/td&gt;
    &lt;td&gt;l[:]&lt;/td&gt;
    &lt;td&gt; ['a','b','c','d','e'] &lt;/td&gt;
  &lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;Index of first occurrence of a char.  &lt;/td&gt;
    &lt;td&gt;print(l.index('d'))&lt;/td&gt;
    &lt;td&gt; 3 &lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;
== Code as given by Vidya ==
&lt;pre&gt;
import string

def remove_matching_letter(l1,l2) :
    for i in range(len(l1)) :
        for j in range(len(l2)):
            if l1[i] == l2[j] :
                c = l1[i]
                l1.remove(c)
                l2.remove(c)
                l = l1 + ['*'] +l2
                return[l,True]
    l = l1+['*']+l2
    return[l,False]


p1 = input(&quot;Enter first person name:&quot;)
p1 = p1.lower()
p1=  p1.replace(&quot; &quot;,&quot;&quot;)

p2 = input(&quot;Enter Second person name:&quot;)
p2 = p2.lower()
p2 =  p2.replace(&quot; &quot;,&quot;&quot;)

l1 = list(p1)
l2 = list(p2)

proceed = True
while proceed:
    [con_list,proceed] = remove_matching_letter(l1,l2)
    star_index = con_list.index('*')
    l1 = con_list[:star_index]
    l2 = con_list[star_index+1:]
    
count = len(l1) + len(l2)
result = ['Friends','Love','Affection','Marriage','Enemy','Sibling']

while len(result) &gt; 1 :
    split_index = (count%len(result)) -1
    if split_index &gt;= 0 :
        right = result[split_index + 1 :]
        left = result[:split_index]
        result = right + left
    else :
        result = result[:len(result) -1]
print(result[0])
&lt;/pre&gt;
= Image Compression =
Suppose you have a web page with lots of images.  It will take more time to download.  To make downloading faster, either you remove the images or reduce the size of the images.  Both methods will not give a good or required result.  Instead you can do &lt;b&gt; Image Compression&lt;/b&gt;
==NumPy Module==
NumPy is a module for Python. The name is an acronym for &quot;Numeric Python&quot;. It enriches Python with powerful data structures, implementing multi-dimensional arrays and matrices. To work with Artificial Intelligence, Machine Learning or Deep Learning NumPy is required.

&lt;b&gt; How is it superior to List &lt;/b&gt;
Operations on numpy arrays and matrices are easier than Lists.
Consider  the following

cvalues = [22.1, 22.8, 21.9, 22.5, 22.7, 22.3, 21.8, 21.2, 22.9, 22.1]

C = np.array(cvalues)

We would like to find the values into degrees Fahrenheit. This can be easily accomplished using a simple scalar multiplication:

print(C * 9 / 5 + 32)

Using Lists, it should have been fvalues = [ x*9/5 + 32 for x in cvalues] 

&lt;b&gt; Operations on numpy &lt;/b&gt;
&lt;table width=&quot;200&quot; border=&quot;1&quot;&gt;
  &lt;tr&gt;
    &lt;th scope=&quot;col&quot;&gt;Operations&lt;/th&gt;
    &lt;th scope=&quot;col&quot;&gt;Descriptions&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;import numpy as np &lt;/td&gt;
    &lt;td&gt;numpy is imported and can be accessed with a short name np&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;a=np.array([1,2,3])&lt;/td&gt;
    &lt;td&gt;One dimensional array 'a' is created&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;print(type(a))&lt;/td&gt;
    &lt;td&gt;&lt;class 'numpy.ndarray'&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;print(a.shape)&lt;/td&gt;
    &lt;td&gt;(3,)&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;print (a[0],a[1],a[2])&lt;/td&gt;
    &lt;td&gt;1 2 3&lt;/td&gt;
  &lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;b=np.array([[1,2,3],[4,5,6]])&lt;/td&gt;
    &lt;td&gt;Two dimensional array 'b' is created&lt;/td&gt;
  &lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;print(b.shape)&lt;/td&gt;
    &lt;td&gt;(2,3)&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;</text>
      <sha1>ghizqvl0qqjd3dwkv8q27787damczta</sha1>
    </revision>
    <revision>
      <id>3968</id>
      <parentid>3967</parentid>
      <timestamp>2018-10-01T12:29:37Z</timestamp>
      <contributor>
        <username>Sam</username>
        <id>673</id>
      </contributor>
      <comment>/* NumPy Module */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="5674">==Week 10 Download URL==
https://onlinecourses.nptel.ac.in/noc18_cs35/unit?unit=30&amp;lesson=31

=FLAMES - a Childhood play=
In childhood, we might have played a game called FLAMES to find the relationship (illusion!!) between a boy and a girl.  

All you have to do is

&lt;b&gt; Steps : &lt;/b&gt;
 1. write their names and strike out the common characters that occur in both their names.
 2. Count the remaining letters (SAY X)
 3. Write the word FLAMES and start counting from F and strike out the X&lt;sup&gt;th&lt;/sup&gt; letter till only one character remains
 4. If it is F - then the two are Friends. L - Love, A - Affection,  M - Marriage  E- Enemy S- Sister

&lt;table width=&quot;449&quot; height=&quot;116&quot; border=&quot;1&quot;&gt;
 &lt;tr&gt;
    &lt;td&gt;[[File:Flamestep1.JPG|300px]]&lt;/td&gt;
    &lt;td&gt;[[File:Flamestep2.JPG|300px]]&lt;/td&gt;
    &lt;td&gt;[[File:flamestep3.JPG|300px]]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td width = 200&gt;Remaining No. of Characters = 7&lt;/td&gt;
    &lt;td width = 200&gt;Counting from F, wrap over and strike the 7&lt;SUP&gt;th&lt;/SUP&gt; letter&lt;/td&gt;
    &lt;td width = 200&gt;The remaining letter denotes the relationship&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;
== Refresh the operations on Strings and Lists ==
&lt;table width=&quot;200&quot; border=&quot;1&quot;&gt;
  &lt;tr&gt;
    &lt;th scope=&quot;col&quot; width=100&gt;Functions&lt;/th&gt;
    &lt;th scope=&quot;col&quot; width=100&gt;Example&lt;/th&gt;
    &lt;th scope=&quot;col&quot; width=100&gt;Result&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;import &lt;/td&gt;
    &lt;td&gt;import string&lt;/td&gt;
    &lt;td&gt;import string module&lt;/td&gt;
  &lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;input a string&lt;/td&gt;
    &lt;td&gt;s = input()&lt;/td&gt;
    &lt;td&gt;input a string to the variable s&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Convert to lower case&lt;/td&gt;
    &lt;td&gt;print(s.lower())&lt;/td&gt;
    &lt;td &gt; raj &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Convert to upper case&lt;/td&gt;
    &lt;td&gt;print(s.upper())&lt;/td&gt;
    &lt;td&gt; RAJ&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Convert the string to list&lt;/td&gt;
    &lt;td&gt;s1 = list(s)&lt;/td&gt;
    &lt;td&gt;s1 will be ['R','a','j']&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Replace a character&lt;/td&gt;
    &lt;td&gt;print(s.replace(&quot;j&quot;,&quot;#&quot;))&lt;/td&gt;
    &lt;td&gt;'Ra#' .Note: the content of s is not changed.&lt;/td&gt;
  &lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;Replace more than one character&lt;/td&gt;
    &lt;td&gt;print(s.replace(&quot;aj&quot;,&quot;#&quot;))&lt;/td&gt;
    &lt;td&gt;'R#'&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;slice. l = ['a','b','c','d','e']&lt;/td&gt;
    &lt;td&gt;l[1:4]&lt;/td&gt;
    &lt;td&gt;['b', 'c', 'd'] &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;slice. Start index is missing &lt;/td&gt;
    &lt;td&gt;l[:4]&lt;/td&gt;
    &lt;td&gt; ['a', 'b', 'c', 'd']  Default is 0 if start index is omitted &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;slice. End index is missing &lt;/td&gt;
    &lt;td&gt;l[1:]&lt;/td&gt;
    &lt;td&gt; ['b', 'c', 'd', 'e'] Default is length of the list if end index is omitted&lt;/td&gt;
  &lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;slice. Both index missing &lt;/td&gt;
    &lt;td&gt;l[:]&lt;/td&gt;
    &lt;td&gt; ['a','b','c','d','e'] &lt;/td&gt;
  &lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;Index of first occurrence of a char.  &lt;/td&gt;
    &lt;td&gt;print(l.index('d'))&lt;/td&gt;
    &lt;td&gt; 3 &lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;
== Code as given by Vidya ==
&lt;pre&gt;
import string

def remove_matching_letter(l1,l2) :
    for i in range(len(l1)) :
        for j in range(len(l2)):
            if l1[i] == l2[j] :
                c = l1[i]
                l1.remove(c)
                l2.remove(c)
                l = l1 + ['*'] +l2
                return[l,True]
    l = l1+['*']+l2
    return[l,False]


p1 = input(&quot;Enter first person name:&quot;)
p1 = p1.lower()
p1=  p1.replace(&quot; &quot;,&quot;&quot;)

p2 = input(&quot;Enter Second person name:&quot;)
p2 = p2.lower()
p2 =  p2.replace(&quot; &quot;,&quot;&quot;)

l1 = list(p1)
l2 = list(p2)

proceed = True
while proceed:
    [con_list,proceed] = remove_matching_letter(l1,l2)
    star_index = con_list.index('*')
    l1 = con_list[:star_index]
    l2 = con_list[star_index+1:]
    
count = len(l1) + len(l2)
result = ['Friends','Love','Affection','Marriage','Enemy','Sibling']

while len(result) &gt; 1 :
    split_index = (count%len(result)) -1
    if split_index &gt;= 0 :
        right = result[split_index + 1 :]
        left = result[:split_index]
        result = right + left
    else :
        result = result[:len(result) -1]
print(result[0])
&lt;/pre&gt;
= Image Compression =
Suppose you have a web page with lots of images.  It will take more time to download.  To make downloading faster, either you remove the images or reduce the size of the images.  Both methods will not give a good or required result.  Instead you can do &lt;b&gt; Image Compression&lt;/b&gt;
==NumPy Module==
NumPy is a module for Python. The name is an acronym for &quot;Numeric Python&quot;. It enriches Python with powerful data structures, implementing multi-dimensional arrays and matrices. To work with Artificial Intelligence, Machine Learning or Deep Learning NumPy is required.

&lt;b&gt; How is it superior to List &lt;/b&gt;
Operations on numpy arrays and matrices are easier than Lists.
Consider  the following

cvalues = [22.1, 22.8, 21.9, 22.5, 22.7, 22.3, 21.8, 21.2, 22.9, 22.1]

C = np.array(cvalues)

We would like to find the values into degrees Fahrenheit. This can be easily accomplished using a simple scalar multiplication:

print(C * 9 / 5 + 32)

Using Lists, it should have been

 fvalues = [ x*9/5 + 32 for x in cvalues] 

&lt;b&gt; Operations on numpy &lt;/b&gt;
&lt;table width=&quot;200&quot; border=&quot;1&quot;&gt;
  &lt;tr&gt;
    &lt;th scope=&quot;col&quot;&gt;Operations&lt;/th&gt;
    &lt;th scope=&quot;col&quot;&gt;Descriptions&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;import numpy as np &lt;/td&gt;
    &lt;td&gt;numpy is imported and can be accessed with a short name np&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;a=np.array([1,2,3])&lt;/td&gt;
    &lt;td&gt;One dimensional array 'a' is created&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;print(type(a))&lt;/td&gt;
    &lt;td&gt;&lt;class 'numpy.ndarray'&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;print(a.shape)&lt;/td&gt;
    &lt;td&gt;(3,)&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;print (a[0],a[1],a[2])&lt;/td&gt;
    &lt;td&gt;1 2 3&lt;/td&gt;
  &lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;b=np.array([[1,2,3],[4,5,6]])&lt;/td&gt;
    &lt;td&gt;Two dimensional array 'b' is created&lt;/td&gt;
  &lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;print(b.shape)&lt;/td&gt;
    &lt;td&gt;(2,3)&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;</text>
      <sha1>85jhwep959axqkly6qrv4rudybp9re3</sha1>
    </revision>
    <revision>
      <id>3977</id>
      <parentid>3968</parentid>
      <timestamp>2018-10-02T06:01:09Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* Code as given by Vidya */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="5710">==Week 10 Download URL==
https://onlinecourses.nptel.ac.in/noc18_cs35/unit?unit=30&amp;lesson=31

=FLAMES - a Childhood play=
In childhood, we might have played a game called FLAMES to find the relationship (illusion!!) between a boy and a girl.  

All you have to do is

&lt;b&gt; Steps : &lt;/b&gt;
 1. write their names and strike out the common characters that occur in both their names.
 2. Count the remaining letters (SAY X)
 3. Write the word FLAMES and start counting from F and strike out the X&lt;sup&gt;th&lt;/sup&gt; letter till only one character remains
 4. If it is F - then the two are Friends. L - Love, A - Affection,  M - Marriage  E- Enemy S- Sister

&lt;table width=&quot;449&quot; height=&quot;116&quot; border=&quot;1&quot;&gt;
 &lt;tr&gt;
    &lt;td&gt;[[File:Flamestep1.JPG|300px]]&lt;/td&gt;
    &lt;td&gt;[[File:Flamestep2.JPG|300px]]&lt;/td&gt;
    &lt;td&gt;[[File:flamestep3.JPG|300px]]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td width = 200&gt;Remaining No. of Characters = 7&lt;/td&gt;
    &lt;td width = 200&gt;Counting from F, wrap over and strike the 7&lt;SUP&gt;th&lt;/SUP&gt; letter&lt;/td&gt;
    &lt;td width = 200&gt;The remaining letter denotes the relationship&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;
== Refresh the operations on Strings and Lists ==
&lt;table width=&quot;200&quot; border=&quot;1&quot;&gt;
  &lt;tr&gt;
    &lt;th scope=&quot;col&quot; width=100&gt;Functions&lt;/th&gt;
    &lt;th scope=&quot;col&quot; width=100&gt;Example&lt;/th&gt;
    &lt;th scope=&quot;col&quot; width=100&gt;Result&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;import &lt;/td&gt;
    &lt;td&gt;import string&lt;/td&gt;
    &lt;td&gt;import string module&lt;/td&gt;
  &lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;input a string&lt;/td&gt;
    &lt;td&gt;s = input()&lt;/td&gt;
    &lt;td&gt;input a string to the variable s&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Convert to lower case&lt;/td&gt;
    &lt;td&gt;print(s.lower())&lt;/td&gt;
    &lt;td &gt; raj &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Convert to upper case&lt;/td&gt;
    &lt;td&gt;print(s.upper())&lt;/td&gt;
    &lt;td&gt; RAJ&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Convert the string to list&lt;/td&gt;
    &lt;td&gt;s1 = list(s)&lt;/td&gt;
    &lt;td&gt;s1 will be ['R','a','j']&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Replace a character&lt;/td&gt;
    &lt;td&gt;print(s.replace(&quot;j&quot;,&quot;#&quot;))&lt;/td&gt;
    &lt;td&gt;'Ra#' .Note: the content of s is not changed.&lt;/td&gt;
  &lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;Replace more than one character&lt;/td&gt;
    &lt;td&gt;print(s.replace(&quot;aj&quot;,&quot;#&quot;))&lt;/td&gt;
    &lt;td&gt;'R#'&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;slice. l = ['a','b','c','d','e']&lt;/td&gt;
    &lt;td&gt;l[1:4]&lt;/td&gt;
    &lt;td&gt;['b', 'c', 'd'] &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;slice. Start index is missing &lt;/td&gt;
    &lt;td&gt;l[:4]&lt;/td&gt;
    &lt;td&gt; ['a', 'b', 'c', 'd']  Default is 0 if start index is omitted &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;slice. End index is missing &lt;/td&gt;
    &lt;td&gt;l[1:]&lt;/td&gt;
    &lt;td&gt; ['b', 'c', 'd', 'e'] Default is length of the list if end index is omitted&lt;/td&gt;
  &lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;slice. Both index missing &lt;/td&gt;
    &lt;td&gt;l[:]&lt;/td&gt;
    &lt;td&gt; ['a','b','c','d','e'] &lt;/td&gt;
  &lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;Index of first occurrence of a char.  &lt;/td&gt;
    &lt;td&gt;print(l.index('d'))&lt;/td&gt;
    &lt;td&gt; 3 &lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;
== Code as given by Vidya ==
&lt;pre&gt;
import string

def remove_matching_letter(l1,l2) :
    for i in range(len(l1)) :
        for j in range(len(l2)):
            if l1[i] == l2[j] :
                c = l1[i]
                l1.remove(c)
                l2.remove(c)
                l = l1 + ['*'] +l2
                return[l,True]
    l = l1+['*']+l2
    return[l,False]


p1 = input(&quot;Enter first person name:&quot;)
p1 = p1.lower()
p1=  p1.replace(&quot; &quot;,&quot;&quot;)

p2 = input(&quot;Enter Second person name:&quot;)
p2 = p2.lower()
p2 =  p2.replace(&quot; &quot;,&quot;&quot;)

l1 = list(p1)
l2 = list(p2)

proceed = True
while proceed:
    [con_list,proceed] = remove_matching_letter(l1,l2)
    star_index = con_list.index('*')
    l1 = con_list[:star_index]
    l2 = con_list[star_index+1:]
    
count = len(l1) + len(l2)
result = ['Friends','Love','Affection','Marriage','Enemy','Sibling']

while len(result) &gt; 1 :
    split_index = (count%len(result)) -1
    if split_index &gt;= 0 :
        right = result[split_index + 1 :]
        left = result[:split_index]
        result = right + left
    else :
        result = result[:len(result) -1]
print(result[0])
&lt;/pre&gt;

Output:

[[File:flameOutput.png]]

= Image Compression =
Suppose you have a web page with lots of images.  It will take more time to download.  To make downloading faster, either you remove the images or reduce the size of the images.  Both methods will not give a good or required result.  Instead you can do &lt;b&gt; Image Compression&lt;/b&gt;
==NumPy Module==
NumPy is a module for Python. The name is an acronym for &quot;Numeric Python&quot;. It enriches Python with powerful data structures, implementing multi-dimensional arrays and matrices. To work with Artificial Intelligence, Machine Learning or Deep Learning NumPy is required.

&lt;b&gt; How is it superior to List &lt;/b&gt;
Operations on numpy arrays and matrices are easier than Lists.
Consider  the following

cvalues = [22.1, 22.8, 21.9, 22.5, 22.7, 22.3, 21.8, 21.2, 22.9, 22.1]

C = np.array(cvalues)

We would like to find the values into degrees Fahrenheit. This can be easily accomplished using a simple scalar multiplication:

print(C * 9 / 5 + 32)

Using Lists, it should have been

 fvalues = [ x*9/5 + 32 for x in cvalues] 

&lt;b&gt; Operations on numpy &lt;/b&gt;
&lt;table width=&quot;200&quot; border=&quot;1&quot;&gt;
  &lt;tr&gt;
    &lt;th scope=&quot;col&quot;&gt;Operations&lt;/th&gt;
    &lt;th scope=&quot;col&quot;&gt;Descriptions&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;import numpy as np &lt;/td&gt;
    &lt;td&gt;numpy is imported and can be accessed with a short name np&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;a=np.array([1,2,3])&lt;/td&gt;
    &lt;td&gt;One dimensional array 'a' is created&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;print(type(a))&lt;/td&gt;
    &lt;td&gt;&lt;class 'numpy.ndarray'&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;print(a.shape)&lt;/td&gt;
    &lt;td&gt;(3,)&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;print (a[0],a[1],a[2])&lt;/td&gt;
    &lt;td&gt;1 2 3&lt;/td&gt;
  &lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;b=np.array([[1,2,3],[4,5,6]])&lt;/td&gt;
    &lt;td&gt;Two dimensional array 'b' is created&lt;/td&gt;
  &lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;print(b.shape)&lt;/td&gt;
    &lt;td&gt;(2,3)&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;</text>
      <sha1>mgf47qqszc1iyqidbvgsjp9mas9oqkz</sha1>
    </revision>
    <revision>
      <id>3979</id>
      <parentid>3977</parentid>
      <timestamp>2018-10-02T06:12:54Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* NumPy Module */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="5719">==Week 10 Download URL==
https://onlinecourses.nptel.ac.in/noc18_cs35/unit?unit=30&amp;lesson=31

=FLAMES - a Childhood play=
In childhood, we might have played a game called FLAMES to find the relationship (illusion!!) between a boy and a girl.  

All you have to do is

&lt;b&gt; Steps : &lt;/b&gt;
 1. write their names and strike out the common characters that occur in both their names.
 2. Count the remaining letters (SAY X)
 3. Write the word FLAMES and start counting from F and strike out the X&lt;sup&gt;th&lt;/sup&gt; letter till only one character remains
 4. If it is F - then the two are Friends. L - Love, A - Affection,  M - Marriage  E- Enemy S- Sister

&lt;table width=&quot;449&quot; height=&quot;116&quot; border=&quot;1&quot;&gt;
 &lt;tr&gt;
    &lt;td&gt;[[File:Flamestep1.JPG|300px]]&lt;/td&gt;
    &lt;td&gt;[[File:Flamestep2.JPG|300px]]&lt;/td&gt;
    &lt;td&gt;[[File:flamestep3.JPG|300px]]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td width = 200&gt;Remaining No. of Characters = 7&lt;/td&gt;
    &lt;td width = 200&gt;Counting from F, wrap over and strike the 7&lt;SUP&gt;th&lt;/SUP&gt; letter&lt;/td&gt;
    &lt;td width = 200&gt;The remaining letter denotes the relationship&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;
== Refresh the operations on Strings and Lists ==
&lt;table width=&quot;200&quot; border=&quot;1&quot;&gt;
  &lt;tr&gt;
    &lt;th scope=&quot;col&quot; width=100&gt;Functions&lt;/th&gt;
    &lt;th scope=&quot;col&quot; width=100&gt;Example&lt;/th&gt;
    &lt;th scope=&quot;col&quot; width=100&gt;Result&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;import &lt;/td&gt;
    &lt;td&gt;import string&lt;/td&gt;
    &lt;td&gt;import string module&lt;/td&gt;
  &lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;input a string&lt;/td&gt;
    &lt;td&gt;s = input()&lt;/td&gt;
    &lt;td&gt;input a string to the variable s&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Convert to lower case&lt;/td&gt;
    &lt;td&gt;print(s.lower())&lt;/td&gt;
    &lt;td &gt; raj &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Convert to upper case&lt;/td&gt;
    &lt;td&gt;print(s.upper())&lt;/td&gt;
    &lt;td&gt; RAJ&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Convert the string to list&lt;/td&gt;
    &lt;td&gt;s1 = list(s)&lt;/td&gt;
    &lt;td&gt;s1 will be ['R','a','j']&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Replace a character&lt;/td&gt;
    &lt;td&gt;print(s.replace(&quot;j&quot;,&quot;#&quot;))&lt;/td&gt;
    &lt;td&gt;'Ra#' .Note: the content of s is not changed.&lt;/td&gt;
  &lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;Replace more than one character&lt;/td&gt;
    &lt;td&gt;print(s.replace(&quot;aj&quot;,&quot;#&quot;))&lt;/td&gt;
    &lt;td&gt;'R#'&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;slice. l = ['a','b','c','d','e']&lt;/td&gt;
    &lt;td&gt;l[1:4]&lt;/td&gt;
    &lt;td&gt;['b', 'c', 'd'] &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;slice. Start index is missing &lt;/td&gt;
    &lt;td&gt;l[:4]&lt;/td&gt;
    &lt;td&gt; ['a', 'b', 'c', 'd']  Default is 0 if start index is omitted &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;slice. End index is missing &lt;/td&gt;
    &lt;td&gt;l[1:]&lt;/td&gt;
    &lt;td&gt; ['b', 'c', 'd', 'e'] Default is length of the list if end index is omitted&lt;/td&gt;
  &lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;slice. Both index missing &lt;/td&gt;
    &lt;td&gt;l[:]&lt;/td&gt;
    &lt;td&gt; ['a','b','c','d','e'] &lt;/td&gt;
  &lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;Index of first occurrence of a char.  &lt;/td&gt;
    &lt;td&gt;print(l.index('d'))&lt;/td&gt;
    &lt;td&gt; 3 &lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;
== Code as given by Vidya ==
&lt;pre&gt;
import string

def remove_matching_letter(l1,l2) :
    for i in range(len(l1)) :
        for j in range(len(l2)):
            if l1[i] == l2[j] :
                c = l1[i]
                l1.remove(c)
                l2.remove(c)
                l = l1 + ['*'] +l2
                return[l,True]
    l = l1+['*']+l2
    return[l,False]


p1 = input(&quot;Enter first person name:&quot;)
p1 = p1.lower()
p1=  p1.replace(&quot; &quot;,&quot;&quot;)

p2 = input(&quot;Enter Second person name:&quot;)
p2 = p2.lower()
p2 =  p2.replace(&quot; &quot;,&quot;&quot;)

l1 = list(p1)
l2 = list(p2)

proceed = True
while proceed:
    [con_list,proceed] = remove_matching_letter(l1,l2)
    star_index = con_list.index('*')
    l1 = con_list[:star_index]
    l2 = con_list[star_index+1:]
    
count = len(l1) + len(l2)
result = ['Friends','Love','Affection','Marriage','Enemy','Sibling']

while len(result) &gt; 1 :
    split_index = (count%len(result)) -1
    if split_index &gt;= 0 :
        right = result[split_index + 1 :]
        left = result[:split_index]
        result = right + left
    else :
        result = result[:len(result) -1]
print(result[0])
&lt;/pre&gt;

Output:

[[File:flameOutput.png]]

= Image Compression =
Suppose you have a web page with lots of images.  It will take more time to download.  To make downloading faster, either you remove the images or reduce the size of the images.  Both methods will not give a good or required result.  Instead you can do &lt;b&gt; Image Compression&lt;/b&gt;
==NumPy Module==
NumPy is a module for Python. The name is an acronym for &quot;Numeric Python&quot;. It enriches Python with powerful data structures, implementing multi-dimensional arrays and matrices. To work with Artificial Intelligence, Machine Learning or Deep Learning NumPy is required.

&lt;b&gt; How is it superior to List &lt;/b&gt;
Operations on numpy arrays and matrices are easier than Lists.
Consider  the following

cvalues = [22.1, 22.8, 21.9, 22.5, 22.7, 22.3, 21.8, 21.2, 22.9, 22.1]

C = np.array(cvalues)

We would like to find the values into degrees Fahrenheit. This can be easily accomplished using a simple scalar multiplication:

print(C * 9 / 5 + 32)

Using Lists, it should have been

 fvalues = [ x*9/5 + 32 for x in cvalues] 

&lt;b&gt; Operations on numpy &lt;/b&gt;
&lt;table width=&quot;200&quot; border=&quot;1&quot;&gt;
  &lt;tr&gt;
    &lt;th scope=&quot;col&quot;&gt;Operations&lt;/th&gt;
    &lt;th scope=&quot;col&quot;&gt;Descriptions&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;import numpy as np &lt;/td&gt;
    &lt;td&gt;numpy is imported and can be accessed with a short name np&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;a=np.array([1,2,3])&lt;/td&gt;
    &lt;td&gt;One dimensional array 'a' is created&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;print(type(a))&lt;/td&gt;
    &lt;td&gt;&lt;class 'numpy.ndarray'&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;print(a.shape)&lt;/td&gt;
    &lt;td&gt;(3,)&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;print (a[0],a[1],a[2])&lt;/td&gt;
    &lt;td&gt;1 2 3&lt;/td&gt;
  &lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;b=np.array([[1,2,3],[4,5,6]])&lt;/td&gt;
    &lt;td&gt;Two dimensional array 'b' is created&lt;/td&gt;
  &lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;print(b.shape)&lt;/td&gt;
    &lt;td&gt;(2,3)&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;
[[#Top]]</text>
      <sha1>j1k8yiwye05xxi4g70ba6mjeusupy73</sha1>
    </revision>
    <revision>
      <id>3980</id>
      <parentid>3979</parentid>
      <timestamp>2018-10-02T06:13:36Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* NumPy Module */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="5742">==Week 10 Download URL==
https://onlinecourses.nptel.ac.in/noc18_cs35/unit?unit=30&amp;lesson=31

=FLAMES - a Childhood play=
In childhood, we might have played a game called FLAMES to find the relationship (illusion!!) between a boy and a girl.  

All you have to do is

&lt;b&gt; Steps : &lt;/b&gt;
 1. write their names and strike out the common characters that occur in both their names.
 2. Count the remaining letters (SAY X)
 3. Write the word FLAMES and start counting from F and strike out the X&lt;sup&gt;th&lt;/sup&gt; letter till only one character remains
 4. If it is F - then the two are Friends. L - Love, A - Affection,  M - Marriage  E- Enemy S- Sister

&lt;table width=&quot;449&quot; height=&quot;116&quot; border=&quot;1&quot;&gt;
 &lt;tr&gt;
    &lt;td&gt;[[File:Flamestep1.JPG|300px]]&lt;/td&gt;
    &lt;td&gt;[[File:Flamestep2.JPG|300px]]&lt;/td&gt;
    &lt;td&gt;[[File:flamestep3.JPG|300px]]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td width = 200&gt;Remaining No. of Characters = 7&lt;/td&gt;
    &lt;td width = 200&gt;Counting from F, wrap over and strike the 7&lt;SUP&gt;th&lt;/SUP&gt; letter&lt;/td&gt;
    &lt;td width = 200&gt;The remaining letter denotes the relationship&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;
== Refresh the operations on Strings and Lists ==
&lt;table width=&quot;200&quot; border=&quot;1&quot;&gt;
  &lt;tr&gt;
    &lt;th scope=&quot;col&quot; width=100&gt;Functions&lt;/th&gt;
    &lt;th scope=&quot;col&quot; width=100&gt;Example&lt;/th&gt;
    &lt;th scope=&quot;col&quot; width=100&gt;Result&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;import &lt;/td&gt;
    &lt;td&gt;import string&lt;/td&gt;
    &lt;td&gt;import string module&lt;/td&gt;
  &lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;input a string&lt;/td&gt;
    &lt;td&gt;s = input()&lt;/td&gt;
    &lt;td&gt;input a string to the variable s&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Convert to lower case&lt;/td&gt;
    &lt;td&gt;print(s.lower())&lt;/td&gt;
    &lt;td &gt; raj &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Convert to upper case&lt;/td&gt;
    &lt;td&gt;print(s.upper())&lt;/td&gt;
    &lt;td&gt; RAJ&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Convert the string to list&lt;/td&gt;
    &lt;td&gt;s1 = list(s)&lt;/td&gt;
    &lt;td&gt;s1 will be ['R','a','j']&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Replace a character&lt;/td&gt;
    &lt;td&gt;print(s.replace(&quot;j&quot;,&quot;#&quot;))&lt;/td&gt;
    &lt;td&gt;'Ra#' .Note: the content of s is not changed.&lt;/td&gt;
  &lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;Replace more than one character&lt;/td&gt;
    &lt;td&gt;print(s.replace(&quot;aj&quot;,&quot;#&quot;))&lt;/td&gt;
    &lt;td&gt;'R#'&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;slice. l = ['a','b','c','d','e']&lt;/td&gt;
    &lt;td&gt;l[1:4]&lt;/td&gt;
    &lt;td&gt;['b', 'c', 'd'] &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;slice. Start index is missing &lt;/td&gt;
    &lt;td&gt;l[:4]&lt;/td&gt;
    &lt;td&gt; ['a', 'b', 'c', 'd']  Default is 0 if start index is omitted &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;slice. End index is missing &lt;/td&gt;
    &lt;td&gt;l[1:]&lt;/td&gt;
    &lt;td&gt; ['b', 'c', 'd', 'e'] Default is length of the list if end index is omitted&lt;/td&gt;
  &lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;slice. Both index missing &lt;/td&gt;
    &lt;td&gt;l[:]&lt;/td&gt;
    &lt;td&gt; ['a','b','c','d','e'] &lt;/td&gt;
  &lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;Index of first occurrence of a char.  &lt;/td&gt;
    &lt;td&gt;print(l.index('d'))&lt;/td&gt;
    &lt;td&gt; 3 &lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;
== Code as given by Vidya ==
&lt;pre&gt;
import string

def remove_matching_letter(l1,l2) :
    for i in range(len(l1)) :
        for j in range(len(l2)):
            if l1[i] == l2[j] :
                c = l1[i]
                l1.remove(c)
                l2.remove(c)
                l = l1 + ['*'] +l2
                return[l,True]
    l = l1+['*']+l2
    return[l,False]


p1 = input(&quot;Enter first person name:&quot;)
p1 = p1.lower()
p1=  p1.replace(&quot; &quot;,&quot;&quot;)

p2 = input(&quot;Enter Second person name:&quot;)
p2 = p2.lower()
p2 =  p2.replace(&quot; &quot;,&quot;&quot;)

l1 = list(p1)
l2 = list(p2)

proceed = True
while proceed:
    [con_list,proceed] = remove_matching_letter(l1,l2)
    star_index = con_list.index('*')
    l1 = con_list[:star_index]
    l2 = con_list[star_index+1:]
    
count = len(l1) + len(l2)
result = ['Friends','Love','Affection','Marriage','Enemy','Sibling']

while len(result) &gt; 1 :
    split_index = (count%len(result)) -1
    if split_index &gt;= 0 :
        right = result[split_index + 1 :]
        left = result[:split_index]
        result = right + left
    else :
        result = result[:len(result) -1]
print(result[0])
&lt;/pre&gt;

Output:

[[File:flameOutput.png]]

= Image Compression =
Suppose you have a web page with lots of images.  It will take more time to download.  To make downloading faster, either you remove the images or reduce the size of the images.  Both methods will not give a good or required result.  Instead you can do &lt;b&gt; Image Compression&lt;/b&gt;
==NumPy Module==
NumPy is a module for Python. The name is an acronym for &quot;Numeric Python&quot;. It enriches Python with powerful data structures, implementing multi-dimensional arrays and matrices. To work with Artificial Intelligence, Machine Learning or Deep Learning NumPy is required.

&lt;b&gt; How is it superior to List &lt;/b&gt;
Operations on numpy arrays and matrices are easier than Lists.
Consider  the following

cvalues = [22.1, 22.8, 21.9, 22.5, 22.7, 22.3, 21.8, 21.2, 22.9, 22.1]

C = np.array(cvalues)

We would like to find the values into degrees Fahrenheit. This can be easily accomplished using a simple scalar multiplication:

print(C * 9 / 5 + 32)

Using Lists, it should have been

 fvalues = [ x*9/5 + 32 for x in cvalues] 

&lt;b&gt; Operations on numpy &lt;/b&gt;
&lt;table width=&quot;200&quot; border=&quot;1&quot;&gt;
  &lt;tr&gt;
    &lt;th scope=&quot;col&quot;&gt;Operations&lt;/th&gt;
    &lt;th scope=&quot;col&quot;&gt;Descriptions&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;import numpy as np &lt;/td&gt;
    &lt;td&gt;numpy is imported and can be accessed with a short name np&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;a=np.array([1,2,3])&lt;/td&gt;
    &lt;td&gt;One dimensional array 'a' is created&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;print(type(a))&lt;/td&gt;
    &lt;td&gt;&lt;class 'numpy.ndarray'&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;print(a.shape)&lt;/td&gt;
    &lt;td&gt;(3,)&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;print (a[0],a[1],a[2])&lt;/td&gt;
    &lt;td&gt;1 2 3&lt;/td&gt;
  &lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;b=np.array([[1,2,3],[4,5,6]])&lt;/td&gt;
    &lt;td&gt;Two dimensional array 'b' is created&lt;/td&gt;
  &lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;print(b.shape)&lt;/td&gt;
    &lt;td&gt;(2,3)&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;
[[#Top]]
=== Numpy Examples ===</text>
      <sha1>qk5lmu0sy2wecd8mpwzkv3783paix2u</sha1>
    </revision>
    <revision>
      <id>3981</id>
      <parentid>3980</parentid>
      <timestamp>2018-10-02T06:14:10Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* Numpy Examples */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="5855">==Week 10 Download URL==
https://onlinecourses.nptel.ac.in/noc18_cs35/unit?unit=30&amp;lesson=31

=FLAMES - a Childhood play=
In childhood, we might have played a game called FLAMES to find the relationship (illusion!!) between a boy and a girl.  

All you have to do is

&lt;b&gt; Steps : &lt;/b&gt;
 1. write their names and strike out the common characters that occur in both their names.
 2. Count the remaining letters (SAY X)
 3. Write the word FLAMES and start counting from F and strike out the X&lt;sup&gt;th&lt;/sup&gt; letter till only one character remains
 4. If it is F - then the two are Friends. L - Love, A - Affection,  M - Marriage  E- Enemy S- Sister

&lt;table width=&quot;449&quot; height=&quot;116&quot; border=&quot;1&quot;&gt;
 &lt;tr&gt;
    &lt;td&gt;[[File:Flamestep1.JPG|300px]]&lt;/td&gt;
    &lt;td&gt;[[File:Flamestep2.JPG|300px]]&lt;/td&gt;
    &lt;td&gt;[[File:flamestep3.JPG|300px]]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td width = 200&gt;Remaining No. of Characters = 7&lt;/td&gt;
    &lt;td width = 200&gt;Counting from F, wrap over and strike the 7&lt;SUP&gt;th&lt;/SUP&gt; letter&lt;/td&gt;
    &lt;td width = 200&gt;The remaining letter denotes the relationship&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;
== Refresh the operations on Strings and Lists ==
&lt;table width=&quot;200&quot; border=&quot;1&quot;&gt;
  &lt;tr&gt;
    &lt;th scope=&quot;col&quot; width=100&gt;Functions&lt;/th&gt;
    &lt;th scope=&quot;col&quot; width=100&gt;Example&lt;/th&gt;
    &lt;th scope=&quot;col&quot; width=100&gt;Result&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;import &lt;/td&gt;
    &lt;td&gt;import string&lt;/td&gt;
    &lt;td&gt;import string module&lt;/td&gt;
  &lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;input a string&lt;/td&gt;
    &lt;td&gt;s = input()&lt;/td&gt;
    &lt;td&gt;input a string to the variable s&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Convert to lower case&lt;/td&gt;
    &lt;td&gt;print(s.lower())&lt;/td&gt;
    &lt;td &gt; raj &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Convert to upper case&lt;/td&gt;
    &lt;td&gt;print(s.upper())&lt;/td&gt;
    &lt;td&gt; RAJ&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Convert the string to list&lt;/td&gt;
    &lt;td&gt;s1 = list(s)&lt;/td&gt;
    &lt;td&gt;s1 will be ['R','a','j']&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Replace a character&lt;/td&gt;
    &lt;td&gt;print(s.replace(&quot;j&quot;,&quot;#&quot;))&lt;/td&gt;
    &lt;td&gt;'Ra#' .Note: the content of s is not changed.&lt;/td&gt;
  &lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;Replace more than one character&lt;/td&gt;
    &lt;td&gt;print(s.replace(&quot;aj&quot;,&quot;#&quot;))&lt;/td&gt;
    &lt;td&gt;'R#'&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;slice. l = ['a','b','c','d','e']&lt;/td&gt;
    &lt;td&gt;l[1:4]&lt;/td&gt;
    &lt;td&gt;['b', 'c', 'd'] &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;slice. Start index is missing &lt;/td&gt;
    &lt;td&gt;l[:4]&lt;/td&gt;
    &lt;td&gt; ['a', 'b', 'c', 'd']  Default is 0 if start index is omitted &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;slice. End index is missing &lt;/td&gt;
    &lt;td&gt;l[1:]&lt;/td&gt;
    &lt;td&gt; ['b', 'c', 'd', 'e'] Default is length of the list if end index is omitted&lt;/td&gt;
  &lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;slice. Both index missing &lt;/td&gt;
    &lt;td&gt;l[:]&lt;/td&gt;
    &lt;td&gt; ['a','b','c','d','e'] &lt;/td&gt;
  &lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;Index of first occurrence of a char.  &lt;/td&gt;
    &lt;td&gt;print(l.index('d'))&lt;/td&gt;
    &lt;td&gt; 3 &lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;
== Code as given by Vidya ==
&lt;pre&gt;
import string

def remove_matching_letter(l1,l2) :
    for i in range(len(l1)) :
        for j in range(len(l2)):
            if l1[i] == l2[j] :
                c = l1[i]
                l1.remove(c)
                l2.remove(c)
                l = l1 + ['*'] +l2
                return[l,True]
    l = l1+['*']+l2
    return[l,False]


p1 = input(&quot;Enter first person name:&quot;)
p1 = p1.lower()
p1=  p1.replace(&quot; &quot;,&quot;&quot;)

p2 = input(&quot;Enter Second person name:&quot;)
p2 = p2.lower()
p2 =  p2.replace(&quot; &quot;,&quot;&quot;)

l1 = list(p1)
l2 = list(p2)

proceed = True
while proceed:
    [con_list,proceed] = remove_matching_letter(l1,l2)
    star_index = con_list.index('*')
    l1 = con_list[:star_index]
    l2 = con_list[star_index+1:]
    
count = len(l1) + len(l2)
result = ['Friends','Love','Affection','Marriage','Enemy','Sibling']

while len(result) &gt; 1 :
    split_index = (count%len(result)) -1
    if split_index &gt;= 0 :
        right = result[split_index + 1 :]
        left = result[:split_index]
        result = right + left
    else :
        result = result[:len(result) -1]
print(result[0])
&lt;/pre&gt;

Output:

[[File:flameOutput.png]]

= Image Compression =
Suppose you have a web page with lots of images.  It will take more time to download.  To make downloading faster, either you remove the images or reduce the size of the images.  Both methods will not give a good or required result.  Instead you can do &lt;b&gt; Image Compression&lt;/b&gt;
==NumPy Module==
NumPy is a module for Python. The name is an acronym for &quot;Numeric Python&quot;. It enriches Python with powerful data structures, implementing multi-dimensional arrays and matrices. To work with Artificial Intelligence, Machine Learning or Deep Learning NumPy is required.

&lt;b&gt; How is it superior to List &lt;/b&gt;
Operations on numpy arrays and matrices are easier than Lists.
Consider  the following

cvalues = [22.1, 22.8, 21.9, 22.5, 22.7, 22.3, 21.8, 21.2, 22.9, 22.1]

C = np.array(cvalues)

We would like to find the values into degrees Fahrenheit. This can be easily accomplished using a simple scalar multiplication:

print(C * 9 / 5 + 32)

Using Lists, it should have been

 fvalues = [ x*9/5 + 32 for x in cvalues] 

&lt;b&gt; Operations on numpy &lt;/b&gt;
&lt;table width=&quot;200&quot; border=&quot;1&quot;&gt;
  &lt;tr&gt;
    &lt;th scope=&quot;col&quot;&gt;Operations&lt;/th&gt;
    &lt;th scope=&quot;col&quot;&gt;Descriptions&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;import numpy as np &lt;/td&gt;
    &lt;td&gt;numpy is imported and can be accessed with a short name np&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;a=np.array([1,2,3])&lt;/td&gt;
    &lt;td&gt;One dimensional array 'a' is created&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;print(type(a))&lt;/td&gt;
    &lt;td&gt;&lt;class 'numpy.ndarray'&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;print(a.shape)&lt;/td&gt;
    &lt;td&gt;(3,)&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;print (a[0],a[1],a[2])&lt;/td&gt;
    &lt;td&gt;1 2 3&lt;/td&gt;
  &lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;b=np.array([[1,2,3],[4,5,6]])&lt;/td&gt;
    &lt;td&gt;Two dimensional array 'b' is created&lt;/td&gt;
  &lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;print(b.shape)&lt;/td&gt;
    &lt;td&gt;(2,3)&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;
[[#Top]]
=== Numpy Examples ===
&lt;pre&gt;
import numpy as np

#pass list as argument to np.array
a=np.array([1,2,3])
print(a)#Output: [1 2 3]
&lt;/pre&gt;</text>
      <sha1>re8zutzypq5un12etarcjgq278sb0d7</sha1>
    </revision>
    <revision>
      <id>3982</id>
      <parentid>3981</parentid>
      <timestamp>2018-10-02T06:14:54Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* Numpy Examples */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="5888">==Week 10 Download URL==
https://onlinecourses.nptel.ac.in/noc18_cs35/unit?unit=30&amp;lesson=31

=FLAMES - a Childhood play=
In childhood, we might have played a game called FLAMES to find the relationship (illusion!!) between a boy and a girl.  

All you have to do is

&lt;b&gt; Steps : &lt;/b&gt;
 1. write their names and strike out the common characters that occur in both their names.
 2. Count the remaining letters (SAY X)
 3. Write the word FLAMES and start counting from F and strike out the X&lt;sup&gt;th&lt;/sup&gt; letter till only one character remains
 4. If it is F - then the two are Friends. L - Love, A - Affection,  M - Marriage  E- Enemy S- Sister

&lt;table width=&quot;449&quot; height=&quot;116&quot; border=&quot;1&quot;&gt;
 &lt;tr&gt;
    &lt;td&gt;[[File:Flamestep1.JPG|300px]]&lt;/td&gt;
    &lt;td&gt;[[File:Flamestep2.JPG|300px]]&lt;/td&gt;
    &lt;td&gt;[[File:flamestep3.JPG|300px]]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td width = 200&gt;Remaining No. of Characters = 7&lt;/td&gt;
    &lt;td width = 200&gt;Counting from F, wrap over and strike the 7&lt;SUP&gt;th&lt;/SUP&gt; letter&lt;/td&gt;
    &lt;td width = 200&gt;The remaining letter denotes the relationship&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;
== Refresh the operations on Strings and Lists ==
&lt;table width=&quot;200&quot; border=&quot;1&quot;&gt;
  &lt;tr&gt;
    &lt;th scope=&quot;col&quot; width=100&gt;Functions&lt;/th&gt;
    &lt;th scope=&quot;col&quot; width=100&gt;Example&lt;/th&gt;
    &lt;th scope=&quot;col&quot; width=100&gt;Result&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;import &lt;/td&gt;
    &lt;td&gt;import string&lt;/td&gt;
    &lt;td&gt;import string module&lt;/td&gt;
  &lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;input a string&lt;/td&gt;
    &lt;td&gt;s = input()&lt;/td&gt;
    &lt;td&gt;input a string to the variable s&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Convert to lower case&lt;/td&gt;
    &lt;td&gt;print(s.lower())&lt;/td&gt;
    &lt;td &gt; raj &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Convert to upper case&lt;/td&gt;
    &lt;td&gt;print(s.upper())&lt;/td&gt;
    &lt;td&gt; RAJ&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Convert the string to list&lt;/td&gt;
    &lt;td&gt;s1 = list(s)&lt;/td&gt;
    &lt;td&gt;s1 will be ['R','a','j']&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Replace a character&lt;/td&gt;
    &lt;td&gt;print(s.replace(&quot;j&quot;,&quot;#&quot;))&lt;/td&gt;
    &lt;td&gt;'Ra#' .Note: the content of s is not changed.&lt;/td&gt;
  &lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;Replace more than one character&lt;/td&gt;
    &lt;td&gt;print(s.replace(&quot;aj&quot;,&quot;#&quot;))&lt;/td&gt;
    &lt;td&gt;'R#'&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;slice. l = ['a','b','c','d','e']&lt;/td&gt;
    &lt;td&gt;l[1:4]&lt;/td&gt;
    &lt;td&gt;['b', 'c', 'd'] &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;slice. Start index is missing &lt;/td&gt;
    &lt;td&gt;l[:4]&lt;/td&gt;
    &lt;td&gt; ['a', 'b', 'c', 'd']  Default is 0 if start index is omitted &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;slice. End index is missing &lt;/td&gt;
    &lt;td&gt;l[1:]&lt;/td&gt;
    &lt;td&gt; ['b', 'c', 'd', 'e'] Default is length of the list if end index is omitted&lt;/td&gt;
  &lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;slice. Both index missing &lt;/td&gt;
    &lt;td&gt;l[:]&lt;/td&gt;
    &lt;td&gt; ['a','b','c','d','e'] &lt;/td&gt;
  &lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;Index of first occurrence of a char.  &lt;/td&gt;
    &lt;td&gt;print(l.index('d'))&lt;/td&gt;
    &lt;td&gt; 3 &lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;
== Code as given by Vidya ==
&lt;pre&gt;
import string

def remove_matching_letter(l1,l2) :
    for i in range(len(l1)) :
        for j in range(len(l2)):
            if l1[i] == l2[j] :
                c = l1[i]
                l1.remove(c)
                l2.remove(c)
                l = l1 + ['*'] +l2
                return[l,True]
    l = l1+['*']+l2
    return[l,False]


p1 = input(&quot;Enter first person name:&quot;)
p1 = p1.lower()
p1=  p1.replace(&quot; &quot;,&quot;&quot;)

p2 = input(&quot;Enter Second person name:&quot;)
p2 = p2.lower()
p2 =  p2.replace(&quot; &quot;,&quot;&quot;)

l1 = list(p1)
l2 = list(p2)

proceed = True
while proceed:
    [con_list,proceed] = remove_matching_letter(l1,l2)
    star_index = con_list.index('*')
    l1 = con_list[:star_index]
    l2 = con_list[star_index+1:]
    
count = len(l1) + len(l2)
result = ['Friends','Love','Affection','Marriage','Enemy','Sibling']

while len(result) &gt; 1 :
    split_index = (count%len(result)) -1
    if split_index &gt;= 0 :
        right = result[split_index + 1 :]
        left = result[:split_index]
        result = right + left
    else :
        result = result[:len(result) -1]
print(result[0])
&lt;/pre&gt;

Output:

[[File:flameOutput.png]]

= Image Compression =
Suppose you have a web page with lots of images.  It will take more time to download.  To make downloading faster, either you remove the images or reduce the size of the images.  Both methods will not give a good or required result.  Instead you can do &lt;b&gt; Image Compression&lt;/b&gt;
==NumPy Module==
NumPy is a module for Python. The name is an acronym for &quot;Numeric Python&quot;. It enriches Python with powerful data structures, implementing multi-dimensional arrays and matrices. To work with Artificial Intelligence, Machine Learning or Deep Learning NumPy is required.

&lt;b&gt; How is it superior to List &lt;/b&gt;
Operations on numpy arrays and matrices are easier than Lists.
Consider  the following

cvalues = [22.1, 22.8, 21.9, 22.5, 22.7, 22.3, 21.8, 21.2, 22.9, 22.1]

C = np.array(cvalues)

We would like to find the values into degrees Fahrenheit. This can be easily accomplished using a simple scalar multiplication:

print(C * 9 / 5 + 32)

Using Lists, it should have been

 fvalues = [ x*9/5 + 32 for x in cvalues] 

&lt;b&gt; Operations on numpy &lt;/b&gt;
&lt;table width=&quot;200&quot; border=&quot;1&quot;&gt;
  &lt;tr&gt;
    &lt;th scope=&quot;col&quot;&gt;Operations&lt;/th&gt;
    &lt;th scope=&quot;col&quot;&gt;Descriptions&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;import numpy as np &lt;/td&gt;
    &lt;td&gt;numpy is imported and can be accessed with a short name np&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;a=np.array([1,2,3])&lt;/td&gt;
    &lt;td&gt;One dimensional array 'a' is created&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;print(type(a))&lt;/td&gt;
    &lt;td&gt;&lt;class 'numpy.ndarray'&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;print(a.shape)&lt;/td&gt;
    &lt;td&gt;(3,)&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;print (a[0],a[1],a[2])&lt;/td&gt;
    &lt;td&gt;1 2 3&lt;/td&gt;
  &lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;b=np.array([[1,2,3],[4,5,6]])&lt;/td&gt;
    &lt;td&gt;Two dimensional array 'b' is created&lt;/td&gt;
  &lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;print(b.shape)&lt;/td&gt;
    &lt;td&gt;(2,3)&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;
[[#Top]]
=== Numpy Examples ===
'''Example: Print Numpy Array'''
&lt;pre&gt;
import numpy as np

#pass list as argument to np.array
a=np.array([1,2,3])
print(a)#Output: [1 2 3]
&lt;/pre&gt;</text>
      <sha1>pkhttx3c54phxemv83l3nlr4gb0cy6z</sha1>
    </revision>
    <revision>
      <id>3983</id>
      <parentid>3982</parentid>
      <timestamp>2018-10-02T06:15:17Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* Numpy Examples */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="5888">==Week 10 Download URL==
https://onlinecourses.nptel.ac.in/noc18_cs35/unit?unit=30&amp;lesson=31

=FLAMES - a Childhood play=
In childhood, we might have played a game called FLAMES to find the relationship (illusion!!) between a boy and a girl.  

All you have to do is

&lt;b&gt; Steps : &lt;/b&gt;
 1. write their names and strike out the common characters that occur in both their names.
 2. Count the remaining letters (SAY X)
 3. Write the word FLAMES and start counting from F and strike out the X&lt;sup&gt;th&lt;/sup&gt; letter till only one character remains
 4. If it is F - then the two are Friends. L - Love, A - Affection,  M - Marriage  E- Enemy S- Sister

&lt;table width=&quot;449&quot; height=&quot;116&quot; border=&quot;1&quot;&gt;
 &lt;tr&gt;
    &lt;td&gt;[[File:Flamestep1.JPG|300px]]&lt;/td&gt;
    &lt;td&gt;[[File:Flamestep2.JPG|300px]]&lt;/td&gt;
    &lt;td&gt;[[File:flamestep3.JPG|300px]]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td width = 200&gt;Remaining No. of Characters = 7&lt;/td&gt;
    &lt;td width = 200&gt;Counting from F, wrap over and strike the 7&lt;SUP&gt;th&lt;/SUP&gt; letter&lt;/td&gt;
    &lt;td width = 200&gt;The remaining letter denotes the relationship&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;
== Refresh the operations on Strings and Lists ==
&lt;table width=&quot;200&quot; border=&quot;1&quot;&gt;
  &lt;tr&gt;
    &lt;th scope=&quot;col&quot; width=100&gt;Functions&lt;/th&gt;
    &lt;th scope=&quot;col&quot; width=100&gt;Example&lt;/th&gt;
    &lt;th scope=&quot;col&quot; width=100&gt;Result&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;import &lt;/td&gt;
    &lt;td&gt;import string&lt;/td&gt;
    &lt;td&gt;import string module&lt;/td&gt;
  &lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;input a string&lt;/td&gt;
    &lt;td&gt;s = input()&lt;/td&gt;
    &lt;td&gt;input a string to the variable s&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Convert to lower case&lt;/td&gt;
    &lt;td&gt;print(s.lower())&lt;/td&gt;
    &lt;td &gt; raj &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Convert to upper case&lt;/td&gt;
    &lt;td&gt;print(s.upper())&lt;/td&gt;
    &lt;td&gt; RAJ&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Convert the string to list&lt;/td&gt;
    &lt;td&gt;s1 = list(s)&lt;/td&gt;
    &lt;td&gt;s1 will be ['R','a','j']&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Replace a character&lt;/td&gt;
    &lt;td&gt;print(s.replace(&quot;j&quot;,&quot;#&quot;))&lt;/td&gt;
    &lt;td&gt;'Ra#' .Note: the content of s is not changed.&lt;/td&gt;
  &lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;Replace more than one character&lt;/td&gt;
    &lt;td&gt;print(s.replace(&quot;aj&quot;,&quot;#&quot;))&lt;/td&gt;
    &lt;td&gt;'R#'&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;slice. l = ['a','b','c','d','e']&lt;/td&gt;
    &lt;td&gt;l[1:4]&lt;/td&gt;
    &lt;td&gt;['b', 'c', 'd'] &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;slice. Start index is missing &lt;/td&gt;
    &lt;td&gt;l[:4]&lt;/td&gt;
    &lt;td&gt; ['a', 'b', 'c', 'd']  Default is 0 if start index is omitted &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;slice. End index is missing &lt;/td&gt;
    &lt;td&gt;l[1:]&lt;/td&gt;
    &lt;td&gt; ['b', 'c', 'd', 'e'] Default is length of the list if end index is omitted&lt;/td&gt;
  &lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;slice. Both index missing &lt;/td&gt;
    &lt;td&gt;l[:]&lt;/td&gt;
    &lt;td&gt; ['a','b','c','d','e'] &lt;/td&gt;
  &lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;Index of first occurrence of a char.  &lt;/td&gt;
    &lt;td&gt;print(l.index('d'))&lt;/td&gt;
    &lt;td&gt; 3 &lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;
== Code as given by Vidya ==
&lt;pre&gt;
import string

def remove_matching_letter(l1,l2) :
    for i in range(len(l1)) :
        for j in range(len(l2)):
            if l1[i] == l2[j] :
                c = l1[i]
                l1.remove(c)
                l2.remove(c)
                l = l1 + ['*'] +l2
                return[l,True]
    l = l1+['*']+l2
    return[l,False]


p1 = input(&quot;Enter first person name:&quot;)
p1 = p1.lower()
p1=  p1.replace(&quot; &quot;,&quot;&quot;)

p2 = input(&quot;Enter Second person name:&quot;)
p2 = p2.lower()
p2 =  p2.replace(&quot; &quot;,&quot;&quot;)

l1 = list(p1)
l2 = list(p2)

proceed = True
while proceed:
    [con_list,proceed] = remove_matching_letter(l1,l2)
    star_index = con_list.index('*')
    l1 = con_list[:star_index]
    l2 = con_list[star_index+1:]
    
count = len(l1) + len(l2)
result = ['Friends','Love','Affection','Marriage','Enemy','Sibling']

while len(result) &gt; 1 :
    split_index = (count%len(result)) -1
    if split_index &gt;= 0 :
        right = result[split_index + 1 :]
        left = result[:split_index]
        result = right + left
    else :
        result = result[:len(result) -1]
print(result[0])
&lt;/pre&gt;

Output:

[[File:flameOutput.png]]

= Image Compression =
Suppose you have a web page with lots of images.  It will take more time to download.  To make downloading faster, either you remove the images or reduce the size of the images.  Both methods will not give a good or required result.  Instead you can do &lt;b&gt; Image Compression&lt;/b&gt;
==NumPy Module==
NumPy is a module for Python. The name is an acronym for &quot;Numeric Python&quot;. It enriches Python with powerful data structures, implementing multi-dimensional arrays and matrices. To work with Artificial Intelligence, Machine Learning or Deep Learning NumPy is required.

&lt;b&gt; How is it superior to List &lt;/b&gt;
Operations on numpy arrays and matrices are easier than Lists.
Consider  the following

cvalues = [22.1, 22.8, 21.9, 22.5, 22.7, 22.3, 21.8, 21.2, 22.9, 22.1]

C = np.array(cvalues)

We would like to find the values into degrees Fahrenheit. This can be easily accomplished using a simple scalar multiplication:

print(C * 9 / 5 + 32)

Using Lists, it should have been

 fvalues = [ x*9/5 + 32 for x in cvalues] 

&lt;b&gt; Operations on numpy &lt;/b&gt;
&lt;table width=&quot;200&quot; border=&quot;1&quot;&gt;
  &lt;tr&gt;
    &lt;th scope=&quot;col&quot;&gt;Operations&lt;/th&gt;
    &lt;th scope=&quot;col&quot;&gt;Descriptions&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;import numpy as np &lt;/td&gt;
    &lt;td&gt;numpy is imported and can be accessed with a short name np&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;a=np.array([1,2,3])&lt;/td&gt;
    &lt;td&gt;One dimensional array 'a' is created&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;print(type(a))&lt;/td&gt;
    &lt;td&gt;&lt;class 'numpy.ndarray'&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;print(a.shape)&lt;/td&gt;
    &lt;td&gt;(3,)&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;print (a[0],a[1],a[2])&lt;/td&gt;
    &lt;td&gt;1 2 3&lt;/td&gt;
  &lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;b=np.array([[1,2,3],[4,5,6]])&lt;/td&gt;
    &lt;td&gt;Two dimensional array 'b' is created&lt;/td&gt;
  &lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;print(b.shape)&lt;/td&gt;
    &lt;td&gt;(2,3)&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;
[[#Top]]
=== NumPy Examples ===
'''Example: Print NumPy Array'''
&lt;pre&gt;
import numpy as np

#pass list as argument to np.array
a=np.array([1,2,3])
print(a)#Output: [1 2 3]
&lt;/pre&gt;</text>
      <sha1>c0y8k0sv0h8glh36j09fl7zxuljzz27</sha1>
    </revision>
    <revision>
      <id>3984</id>
      <parentid>3983</parentid>
      <timestamp>2018-10-02T06:15:34Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* NumPy Examples */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="5889">==Week 10 Download URL==
https://onlinecourses.nptel.ac.in/noc18_cs35/unit?unit=30&amp;lesson=31

=FLAMES - a Childhood play=
In childhood, we might have played a game called FLAMES to find the relationship (illusion!!) between a boy and a girl.  

All you have to do is

&lt;b&gt; Steps : &lt;/b&gt;
 1. write their names and strike out the common characters that occur in both their names.
 2. Count the remaining letters (SAY X)
 3. Write the word FLAMES and start counting from F and strike out the X&lt;sup&gt;th&lt;/sup&gt; letter till only one character remains
 4. If it is F - then the two are Friends. L - Love, A - Affection,  M - Marriage  E- Enemy S- Sister

&lt;table width=&quot;449&quot; height=&quot;116&quot; border=&quot;1&quot;&gt;
 &lt;tr&gt;
    &lt;td&gt;[[File:Flamestep1.JPG|300px]]&lt;/td&gt;
    &lt;td&gt;[[File:Flamestep2.JPG|300px]]&lt;/td&gt;
    &lt;td&gt;[[File:flamestep3.JPG|300px]]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td width = 200&gt;Remaining No. of Characters = 7&lt;/td&gt;
    &lt;td width = 200&gt;Counting from F, wrap over and strike the 7&lt;SUP&gt;th&lt;/SUP&gt; letter&lt;/td&gt;
    &lt;td width = 200&gt;The remaining letter denotes the relationship&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;
== Refresh the operations on Strings and Lists ==
&lt;table width=&quot;200&quot; border=&quot;1&quot;&gt;
  &lt;tr&gt;
    &lt;th scope=&quot;col&quot; width=100&gt;Functions&lt;/th&gt;
    &lt;th scope=&quot;col&quot; width=100&gt;Example&lt;/th&gt;
    &lt;th scope=&quot;col&quot; width=100&gt;Result&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;import &lt;/td&gt;
    &lt;td&gt;import string&lt;/td&gt;
    &lt;td&gt;import string module&lt;/td&gt;
  &lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;input a string&lt;/td&gt;
    &lt;td&gt;s = input()&lt;/td&gt;
    &lt;td&gt;input a string to the variable s&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Convert to lower case&lt;/td&gt;
    &lt;td&gt;print(s.lower())&lt;/td&gt;
    &lt;td &gt; raj &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Convert to upper case&lt;/td&gt;
    &lt;td&gt;print(s.upper())&lt;/td&gt;
    &lt;td&gt; RAJ&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Convert the string to list&lt;/td&gt;
    &lt;td&gt;s1 = list(s)&lt;/td&gt;
    &lt;td&gt;s1 will be ['R','a','j']&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Replace a character&lt;/td&gt;
    &lt;td&gt;print(s.replace(&quot;j&quot;,&quot;#&quot;))&lt;/td&gt;
    &lt;td&gt;'Ra#' .Note: the content of s is not changed.&lt;/td&gt;
  &lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;Replace more than one character&lt;/td&gt;
    &lt;td&gt;print(s.replace(&quot;aj&quot;,&quot;#&quot;))&lt;/td&gt;
    &lt;td&gt;'R#'&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;slice. l = ['a','b','c','d','e']&lt;/td&gt;
    &lt;td&gt;l[1:4]&lt;/td&gt;
    &lt;td&gt;['b', 'c', 'd'] &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;slice. Start index is missing &lt;/td&gt;
    &lt;td&gt;l[:4]&lt;/td&gt;
    &lt;td&gt; ['a', 'b', 'c', 'd']  Default is 0 if start index is omitted &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;slice. End index is missing &lt;/td&gt;
    &lt;td&gt;l[1:]&lt;/td&gt;
    &lt;td&gt; ['b', 'c', 'd', 'e'] Default is length of the list if end index is omitted&lt;/td&gt;
  &lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;slice. Both index missing &lt;/td&gt;
    &lt;td&gt;l[:]&lt;/td&gt;
    &lt;td&gt; ['a','b','c','d','e'] &lt;/td&gt;
  &lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;Index of first occurrence of a char.  &lt;/td&gt;
    &lt;td&gt;print(l.index('d'))&lt;/td&gt;
    &lt;td&gt; 3 &lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;
== Code as given by Vidya ==
&lt;pre&gt;
import string

def remove_matching_letter(l1,l2) :
    for i in range(len(l1)) :
        for j in range(len(l2)):
            if l1[i] == l2[j] :
                c = l1[i]
                l1.remove(c)
                l2.remove(c)
                l = l1 + ['*'] +l2
                return[l,True]
    l = l1+['*']+l2
    return[l,False]


p1 = input(&quot;Enter first person name:&quot;)
p1 = p1.lower()
p1=  p1.replace(&quot; &quot;,&quot;&quot;)

p2 = input(&quot;Enter Second person name:&quot;)
p2 = p2.lower()
p2 =  p2.replace(&quot; &quot;,&quot;&quot;)

l1 = list(p1)
l2 = list(p2)

proceed = True
while proceed:
    [con_list,proceed] = remove_matching_letter(l1,l2)
    star_index = con_list.index('*')
    l1 = con_list[:star_index]
    l2 = con_list[star_index+1:]
    
count = len(l1) + len(l2)
result = ['Friends','Love','Affection','Marriage','Enemy','Sibling']

while len(result) &gt; 1 :
    split_index = (count%len(result)) -1
    if split_index &gt;= 0 :
        right = result[split_index + 1 :]
        left = result[:split_index]
        result = right + left
    else :
        result = result[:len(result) -1]
print(result[0])
&lt;/pre&gt;

Output:

[[File:flameOutput.png]]

= Image Compression =
Suppose you have a web page with lots of images.  It will take more time to download.  To make downloading faster, either you remove the images or reduce the size of the images.  Both methods will not give a good or required result.  Instead you can do &lt;b&gt; Image Compression&lt;/b&gt;
==NumPy Module==
NumPy is a module for Python. The name is an acronym for &quot;Numeric Python&quot;. It enriches Python with powerful data structures, implementing multi-dimensional arrays and matrices. To work with Artificial Intelligence, Machine Learning or Deep Learning NumPy is required.

&lt;b&gt; How is it superior to List &lt;/b&gt;
Operations on numpy arrays and matrices are easier than Lists.
Consider  the following

cvalues = [22.1, 22.8, 21.9, 22.5, 22.7, 22.3, 21.8, 21.2, 22.9, 22.1]

C = np.array(cvalues)

We would like to find the values into degrees Fahrenheit. This can be easily accomplished using a simple scalar multiplication:

print(C * 9 / 5 + 32)

Using Lists, it should have been

 fvalues = [ x*9/5 + 32 for x in cvalues] 

&lt;b&gt; Operations on numpy &lt;/b&gt;
&lt;table width=&quot;200&quot; border=&quot;1&quot;&gt;
  &lt;tr&gt;
    &lt;th scope=&quot;col&quot;&gt;Operations&lt;/th&gt;
    &lt;th scope=&quot;col&quot;&gt;Descriptions&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;import numpy as np &lt;/td&gt;
    &lt;td&gt;numpy is imported and can be accessed with a short name np&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;a=np.array([1,2,3])&lt;/td&gt;
    &lt;td&gt;One dimensional array 'a' is created&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;print(type(a))&lt;/td&gt;
    &lt;td&gt;&lt;class 'numpy.ndarray'&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;print(a.shape)&lt;/td&gt;
    &lt;td&gt;(3,)&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;print (a[0],a[1],a[2])&lt;/td&gt;
    &lt;td&gt;1 2 3&lt;/td&gt;
  &lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;b=np.array([[1,2,3],[4,5,6]])&lt;/td&gt;
    &lt;td&gt;Two dimensional array 'b' is created&lt;/td&gt;
  &lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;print(b.shape)&lt;/td&gt;
    &lt;td&gt;(2,3)&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;
[[#Top]]
=== NumPy Examples ===
'''Example: Print NumPy Array'''
&lt;pre&gt;
import numpy as np

#pass list as argument to np.array
a=np.array([1,2,3])
print(a)
#Output: [1 2 3]
&lt;/pre&gt;</text>
      <sha1>l4xwq9sxcpv8mbjk68in8ky0nhy3rxw</sha1>
    </revision>
    <revision>
      <id>3985</id>
      <parentid>3984</parentid>
      <timestamp>2018-10-02T06:34:15Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* NumPy Examples */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="6534">==Week 10 Download URL==
https://onlinecourses.nptel.ac.in/noc18_cs35/unit?unit=30&amp;lesson=31

=FLAMES - a Childhood play=
In childhood, we might have played a game called FLAMES to find the relationship (illusion!!) between a boy and a girl.  

All you have to do is

&lt;b&gt; Steps : &lt;/b&gt;
 1. write their names and strike out the common characters that occur in both their names.
 2. Count the remaining letters (SAY X)
 3. Write the word FLAMES and start counting from F and strike out the X&lt;sup&gt;th&lt;/sup&gt; letter till only one character remains
 4. If it is F - then the two are Friends. L - Love, A - Affection,  M - Marriage  E- Enemy S- Sister

&lt;table width=&quot;449&quot; height=&quot;116&quot; border=&quot;1&quot;&gt;
 &lt;tr&gt;
    &lt;td&gt;[[File:Flamestep1.JPG|300px]]&lt;/td&gt;
    &lt;td&gt;[[File:Flamestep2.JPG|300px]]&lt;/td&gt;
    &lt;td&gt;[[File:flamestep3.JPG|300px]]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td width = 200&gt;Remaining No. of Characters = 7&lt;/td&gt;
    &lt;td width = 200&gt;Counting from F, wrap over and strike the 7&lt;SUP&gt;th&lt;/SUP&gt; letter&lt;/td&gt;
    &lt;td width = 200&gt;The remaining letter denotes the relationship&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;
== Refresh the operations on Strings and Lists ==
&lt;table width=&quot;200&quot; border=&quot;1&quot;&gt;
  &lt;tr&gt;
    &lt;th scope=&quot;col&quot; width=100&gt;Functions&lt;/th&gt;
    &lt;th scope=&quot;col&quot; width=100&gt;Example&lt;/th&gt;
    &lt;th scope=&quot;col&quot; width=100&gt;Result&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;import &lt;/td&gt;
    &lt;td&gt;import string&lt;/td&gt;
    &lt;td&gt;import string module&lt;/td&gt;
  &lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;input a string&lt;/td&gt;
    &lt;td&gt;s = input()&lt;/td&gt;
    &lt;td&gt;input a string to the variable s&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Convert to lower case&lt;/td&gt;
    &lt;td&gt;print(s.lower())&lt;/td&gt;
    &lt;td &gt; raj &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Convert to upper case&lt;/td&gt;
    &lt;td&gt;print(s.upper())&lt;/td&gt;
    &lt;td&gt; RAJ&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Convert the string to list&lt;/td&gt;
    &lt;td&gt;s1 = list(s)&lt;/td&gt;
    &lt;td&gt;s1 will be ['R','a','j']&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Replace a character&lt;/td&gt;
    &lt;td&gt;print(s.replace(&quot;j&quot;,&quot;#&quot;))&lt;/td&gt;
    &lt;td&gt;'Ra#' .Note: the content of s is not changed.&lt;/td&gt;
  &lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;Replace more than one character&lt;/td&gt;
    &lt;td&gt;print(s.replace(&quot;aj&quot;,&quot;#&quot;))&lt;/td&gt;
    &lt;td&gt;'R#'&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;slice. l = ['a','b','c','d','e']&lt;/td&gt;
    &lt;td&gt;l[1:4]&lt;/td&gt;
    &lt;td&gt;['b', 'c', 'd'] &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;slice. Start index is missing &lt;/td&gt;
    &lt;td&gt;l[:4]&lt;/td&gt;
    &lt;td&gt; ['a', 'b', 'c', 'd']  Default is 0 if start index is omitted &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;slice. End index is missing &lt;/td&gt;
    &lt;td&gt;l[1:]&lt;/td&gt;
    &lt;td&gt; ['b', 'c', 'd', 'e'] Default is length of the list if end index is omitted&lt;/td&gt;
  &lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;slice. Both index missing &lt;/td&gt;
    &lt;td&gt;l[:]&lt;/td&gt;
    &lt;td&gt; ['a','b','c','d','e'] &lt;/td&gt;
  &lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;Index of first occurrence of a char.  &lt;/td&gt;
    &lt;td&gt;print(l.index('d'))&lt;/td&gt;
    &lt;td&gt; 3 &lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;
== Code as given by Vidya ==
&lt;pre&gt;
import string

def remove_matching_letter(l1,l2) :
    for i in range(len(l1)) :
        for j in range(len(l2)):
            if l1[i] == l2[j] :
                c = l1[i]
                l1.remove(c)
                l2.remove(c)
                l = l1 + ['*'] +l2
                return[l,True]
    l = l1+['*']+l2
    return[l,False]


p1 = input(&quot;Enter first person name:&quot;)
p1 = p1.lower()
p1=  p1.replace(&quot; &quot;,&quot;&quot;)

p2 = input(&quot;Enter Second person name:&quot;)
p2 = p2.lower()
p2 =  p2.replace(&quot; &quot;,&quot;&quot;)

l1 = list(p1)
l2 = list(p2)

proceed = True
while proceed:
    [con_list,proceed] = remove_matching_letter(l1,l2)
    star_index = con_list.index('*')
    l1 = con_list[:star_index]
    l2 = con_list[star_index+1:]
    
count = len(l1) + len(l2)
result = ['Friends','Love','Affection','Marriage','Enemy','Sibling']

while len(result) &gt; 1 :
    split_index = (count%len(result)) -1
    if split_index &gt;= 0 :
        right = result[split_index + 1 :]
        left = result[:split_index]
        result = right + left
    else :
        result = result[:len(result) -1]
print(result[0])
&lt;/pre&gt;

Output:

[[File:flameOutput.png]]

= Image Compression =
Suppose you have a web page with lots of images.  It will take more time to download.  To make downloading faster, either you remove the images or reduce the size of the images.  Both methods will not give a good or required result.  Instead you can do &lt;b&gt; Image Compression&lt;/b&gt;
==NumPy Module==
NumPy is a module for Python. The name is an acronym for &quot;Numeric Python&quot;. It enriches Python with powerful data structures, implementing multi-dimensional arrays and matrices. To work with Artificial Intelligence, Machine Learning or Deep Learning NumPy is required.

&lt;b&gt; How is it superior to List &lt;/b&gt;
Operations on numpy arrays and matrices are easier than Lists.
Consider  the following

cvalues = [22.1, 22.8, 21.9, 22.5, 22.7, 22.3, 21.8, 21.2, 22.9, 22.1]

C = np.array(cvalues)

We would like to find the values into degrees Fahrenheit. This can be easily accomplished using a simple scalar multiplication:

print(C * 9 / 5 + 32)

Using Lists, it should have been

 fvalues = [ x*9/5 + 32 for x in cvalues] 

&lt;b&gt; Operations on numpy &lt;/b&gt;
&lt;table width=&quot;200&quot; border=&quot;1&quot;&gt;
  &lt;tr&gt;
    &lt;th scope=&quot;col&quot;&gt;Operations&lt;/th&gt;
    &lt;th scope=&quot;col&quot;&gt;Descriptions&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;import numpy as np &lt;/td&gt;
    &lt;td&gt;numpy is imported and can be accessed with a short name np&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;a=np.array([1,2,3])&lt;/td&gt;
    &lt;td&gt;One dimensional array 'a' is created&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;print(type(a))&lt;/td&gt;
    &lt;td&gt;&lt;class 'numpy.ndarray'&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;print(a.shape)&lt;/td&gt;
    &lt;td&gt;(3,)&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;print (a[0],a[1],a[2])&lt;/td&gt;
    &lt;td&gt;1 2 3&lt;/td&gt;
  &lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;b=np.array([[1,2,3],[4,5,6]])&lt;/td&gt;
    &lt;td&gt;Two dimensional array 'b' is created&lt;/td&gt;
  &lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;print(b.shape)&lt;/td&gt;
    &lt;td&gt;(2,3)&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;
[[#Top]]
=== NumPy Examples ===
'''Example: Print NumPy Array'''
&lt;pre&gt;
import numpy as np

#pass list as argument to np.array
a=np.array([1,2,3])
print(a)
#Output: [1 2 3]

#type of numpy array
print(type(a))
#Output: &lt;class 'numpy.ndarray'&gt;

#shape of numpy array
print(a.shape)
#Output: (3,)

#print elements of numpy using indexes
print(a[0], a[1], a[2])
#Output: 1 2 3

b=np.array([[1,2,3],[4,5,6]])
print(b.shape)
#Output: (2, 3) - 23 rows and 3 columns

#array of '0'
a=np.zeros((2,2))
print(a)
'''Output:
[[0. 0.]
 [0. 0.]]'''

#array of '1'
b= np.ones((2,2))
print(b)
'''Output:
[[1. 1.]
 [1. 1.]]'''

#2x2 array of 6
c= np.full((2,2),6)
print(c)
'''Output:
[[6 6]
 [6 6]]'''

#2x2 array of random number
d=np.random.random((2,2))
print(d)
'''Output:
 [[0.45937293 0.72546193]
 [0.28374715 0.63269858]]'''
 

&lt;/pre&gt;</text>
      <sha1>kbwmpuay31de4w5a09aufi6rmws5y7z</sha1>
    </revision>
    <revision>
      <id>3986</id>
      <parentid>3985</parentid>
      <timestamp>2018-10-02T06:34:45Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* NumPy Examples */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="6546">==Week 10 Download URL==
https://onlinecourses.nptel.ac.in/noc18_cs35/unit?unit=30&amp;lesson=31

=FLAMES - a Childhood play=
In childhood, we might have played a game called FLAMES to find the relationship (illusion!!) between a boy and a girl.  

All you have to do is

&lt;b&gt; Steps : &lt;/b&gt;
 1. write their names and strike out the common characters that occur in both their names.
 2. Count the remaining letters (SAY X)
 3. Write the word FLAMES and start counting from F and strike out the X&lt;sup&gt;th&lt;/sup&gt; letter till only one character remains
 4. If it is F - then the two are Friends. L - Love, A - Affection,  M - Marriage  E- Enemy S- Sister

&lt;table width=&quot;449&quot; height=&quot;116&quot; border=&quot;1&quot;&gt;
 &lt;tr&gt;
    &lt;td&gt;[[File:Flamestep1.JPG|300px]]&lt;/td&gt;
    &lt;td&gt;[[File:Flamestep2.JPG|300px]]&lt;/td&gt;
    &lt;td&gt;[[File:flamestep3.JPG|300px]]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td width = 200&gt;Remaining No. of Characters = 7&lt;/td&gt;
    &lt;td width = 200&gt;Counting from F, wrap over and strike the 7&lt;SUP&gt;th&lt;/SUP&gt; letter&lt;/td&gt;
    &lt;td width = 200&gt;The remaining letter denotes the relationship&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;
== Refresh the operations on Strings and Lists ==
&lt;table width=&quot;200&quot; border=&quot;1&quot;&gt;
  &lt;tr&gt;
    &lt;th scope=&quot;col&quot; width=100&gt;Functions&lt;/th&gt;
    &lt;th scope=&quot;col&quot; width=100&gt;Example&lt;/th&gt;
    &lt;th scope=&quot;col&quot; width=100&gt;Result&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;import &lt;/td&gt;
    &lt;td&gt;import string&lt;/td&gt;
    &lt;td&gt;import string module&lt;/td&gt;
  &lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;input a string&lt;/td&gt;
    &lt;td&gt;s = input()&lt;/td&gt;
    &lt;td&gt;input a string to the variable s&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Convert to lower case&lt;/td&gt;
    &lt;td&gt;print(s.lower())&lt;/td&gt;
    &lt;td &gt; raj &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Convert to upper case&lt;/td&gt;
    &lt;td&gt;print(s.upper())&lt;/td&gt;
    &lt;td&gt; RAJ&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Convert the string to list&lt;/td&gt;
    &lt;td&gt;s1 = list(s)&lt;/td&gt;
    &lt;td&gt;s1 will be ['R','a','j']&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Replace a character&lt;/td&gt;
    &lt;td&gt;print(s.replace(&quot;j&quot;,&quot;#&quot;))&lt;/td&gt;
    &lt;td&gt;'Ra#' .Note: the content of s is not changed.&lt;/td&gt;
  &lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;Replace more than one character&lt;/td&gt;
    &lt;td&gt;print(s.replace(&quot;aj&quot;,&quot;#&quot;))&lt;/td&gt;
    &lt;td&gt;'R#'&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;slice. l = ['a','b','c','d','e']&lt;/td&gt;
    &lt;td&gt;l[1:4]&lt;/td&gt;
    &lt;td&gt;['b', 'c', 'd'] &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;slice. Start index is missing &lt;/td&gt;
    &lt;td&gt;l[:4]&lt;/td&gt;
    &lt;td&gt; ['a', 'b', 'c', 'd']  Default is 0 if start index is omitted &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;slice. End index is missing &lt;/td&gt;
    &lt;td&gt;l[1:]&lt;/td&gt;
    &lt;td&gt; ['b', 'c', 'd', 'e'] Default is length of the list if end index is omitted&lt;/td&gt;
  &lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;slice. Both index missing &lt;/td&gt;
    &lt;td&gt;l[:]&lt;/td&gt;
    &lt;td&gt; ['a','b','c','d','e'] &lt;/td&gt;
  &lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;Index of first occurrence of a char.  &lt;/td&gt;
    &lt;td&gt;print(l.index('d'))&lt;/td&gt;
    &lt;td&gt; 3 &lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;
== Code as given by Vidya ==
&lt;pre&gt;
import string

def remove_matching_letter(l1,l2) :
    for i in range(len(l1)) :
        for j in range(len(l2)):
            if l1[i] == l2[j] :
                c = l1[i]
                l1.remove(c)
                l2.remove(c)
                l = l1 + ['*'] +l2
                return[l,True]
    l = l1+['*']+l2
    return[l,False]


p1 = input(&quot;Enter first person name:&quot;)
p1 = p1.lower()
p1=  p1.replace(&quot; &quot;,&quot;&quot;)

p2 = input(&quot;Enter Second person name:&quot;)
p2 = p2.lower()
p2 =  p2.replace(&quot; &quot;,&quot;&quot;)

l1 = list(p1)
l2 = list(p2)

proceed = True
while proceed:
    [con_list,proceed] = remove_matching_letter(l1,l2)
    star_index = con_list.index('*')
    l1 = con_list[:star_index]
    l2 = con_list[star_index+1:]
    
count = len(l1) + len(l2)
result = ['Friends','Love','Affection','Marriage','Enemy','Sibling']

while len(result) &gt; 1 :
    split_index = (count%len(result)) -1
    if split_index &gt;= 0 :
        right = result[split_index + 1 :]
        left = result[:split_index]
        result = right + left
    else :
        result = result[:len(result) -1]
print(result[0])
&lt;/pre&gt;

Output:

[[File:flameOutput.png]]

= Image Compression =
Suppose you have a web page with lots of images.  It will take more time to download.  To make downloading faster, either you remove the images or reduce the size of the images.  Both methods will not give a good or required result.  Instead you can do &lt;b&gt; Image Compression&lt;/b&gt;
==NumPy Module==
NumPy is a module for Python. The name is an acronym for &quot;Numeric Python&quot;. It enriches Python with powerful data structures, implementing multi-dimensional arrays and matrices. To work with Artificial Intelligence, Machine Learning or Deep Learning NumPy is required.

&lt;b&gt; How is it superior to List &lt;/b&gt;
Operations on numpy arrays and matrices are easier than Lists.
Consider  the following

cvalues = [22.1, 22.8, 21.9, 22.5, 22.7, 22.3, 21.8, 21.2, 22.9, 22.1]

C = np.array(cvalues)

We would like to find the values into degrees Fahrenheit. This can be easily accomplished using a simple scalar multiplication:

print(C * 9 / 5 + 32)

Using Lists, it should have been

 fvalues = [ x*9/5 + 32 for x in cvalues] 

&lt;b&gt; Operations on numpy &lt;/b&gt;
&lt;table width=&quot;200&quot; border=&quot;1&quot;&gt;
  &lt;tr&gt;
    &lt;th scope=&quot;col&quot;&gt;Operations&lt;/th&gt;
    &lt;th scope=&quot;col&quot;&gt;Descriptions&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;import numpy as np &lt;/td&gt;
    &lt;td&gt;numpy is imported and can be accessed with a short name np&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;a=np.array([1,2,3])&lt;/td&gt;
    &lt;td&gt;One dimensional array 'a' is created&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;print(type(a))&lt;/td&gt;
    &lt;td&gt;&lt;class 'numpy.ndarray'&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;print(a.shape)&lt;/td&gt;
    &lt;td&gt;(3,)&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;print (a[0],a[1],a[2])&lt;/td&gt;
    &lt;td&gt;1 2 3&lt;/td&gt;
  &lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;b=np.array([[1,2,3],[4,5,6]])&lt;/td&gt;
    &lt;td&gt;Two dimensional array 'b' is created&lt;/td&gt;
  &lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;print(b.shape)&lt;/td&gt;
    &lt;td&gt;(2,3)&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;
[[#Top]]
=== NumPy Examples ===
'''Example: Print NumPy Array'''
&lt;pre&gt;
import numpy as np

#pass list as argument to np.array
a=np.array([1,2,3])
print(a)
#Output: [1 2 3]
&lt;/pre&gt;
&lt;pre&gt;
#type of numpy array
print(type(a))
#Output: &lt;class 'numpy.ndarray'&gt;

#shape of numpy array
print(a.shape)
#Output: (3,)

#print elements of numpy using indexes
print(a[0], a[1], a[2])
#Output: 1 2 3

b=np.array([[1,2,3],[4,5,6]])
print(b.shape)
#Output: (2, 3) - 23 rows and 3 columns

#array of '0'
a=np.zeros((2,2))
print(a)
'''Output:
[[0. 0.]
 [0. 0.]]'''

#array of '1'
b= np.ones((2,2))
print(b)
'''Output:
[[1. 1.]
 [1. 1.]]'''

#2x2 array of 6
c= np.full((2,2),6)
print(c)
'''Output:
[[6 6]
 [6 6]]'''

#2x2 array of random number
d=np.random.random((2,2))
print(d)
'''Output:
 [[0.45937293 0.72546193]
 [0.28374715 0.63269858]]'''
 

&lt;/pre&gt;</text>
      <sha1>p9zqdqdraqnj4qsvpby06leczw6eno6</sha1>
    </revision>
    <revision>
      <id>3987</id>
      <parentid>3986</parentid>
      <timestamp>2018-10-02T06:35:33Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* NumPy Examples */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="6601">==Week 10 Download URL==
https://onlinecourses.nptel.ac.in/noc18_cs35/unit?unit=30&amp;lesson=31

=FLAMES - a Childhood play=
In childhood, we might have played a game called FLAMES to find the relationship (illusion!!) between a boy and a girl.  

All you have to do is

&lt;b&gt; Steps : &lt;/b&gt;
 1. write their names and strike out the common characters that occur in both their names.
 2. Count the remaining letters (SAY X)
 3. Write the word FLAMES and start counting from F and strike out the X&lt;sup&gt;th&lt;/sup&gt; letter till only one character remains
 4. If it is F - then the two are Friends. L - Love, A - Affection,  M - Marriage  E- Enemy S- Sister

&lt;table width=&quot;449&quot; height=&quot;116&quot; border=&quot;1&quot;&gt;
 &lt;tr&gt;
    &lt;td&gt;[[File:Flamestep1.JPG|300px]]&lt;/td&gt;
    &lt;td&gt;[[File:Flamestep2.JPG|300px]]&lt;/td&gt;
    &lt;td&gt;[[File:flamestep3.JPG|300px]]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td width = 200&gt;Remaining No. of Characters = 7&lt;/td&gt;
    &lt;td width = 200&gt;Counting from F, wrap over and strike the 7&lt;SUP&gt;th&lt;/SUP&gt; letter&lt;/td&gt;
    &lt;td width = 200&gt;The remaining letter denotes the relationship&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;
== Refresh the operations on Strings and Lists ==
&lt;table width=&quot;200&quot; border=&quot;1&quot;&gt;
  &lt;tr&gt;
    &lt;th scope=&quot;col&quot; width=100&gt;Functions&lt;/th&gt;
    &lt;th scope=&quot;col&quot; width=100&gt;Example&lt;/th&gt;
    &lt;th scope=&quot;col&quot; width=100&gt;Result&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;import &lt;/td&gt;
    &lt;td&gt;import string&lt;/td&gt;
    &lt;td&gt;import string module&lt;/td&gt;
  &lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;input a string&lt;/td&gt;
    &lt;td&gt;s = input()&lt;/td&gt;
    &lt;td&gt;input a string to the variable s&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Convert to lower case&lt;/td&gt;
    &lt;td&gt;print(s.lower())&lt;/td&gt;
    &lt;td &gt; raj &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Convert to upper case&lt;/td&gt;
    &lt;td&gt;print(s.upper())&lt;/td&gt;
    &lt;td&gt; RAJ&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Convert the string to list&lt;/td&gt;
    &lt;td&gt;s1 = list(s)&lt;/td&gt;
    &lt;td&gt;s1 will be ['R','a','j']&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Replace a character&lt;/td&gt;
    &lt;td&gt;print(s.replace(&quot;j&quot;,&quot;#&quot;))&lt;/td&gt;
    &lt;td&gt;'Ra#' .Note: the content of s is not changed.&lt;/td&gt;
  &lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;Replace more than one character&lt;/td&gt;
    &lt;td&gt;print(s.replace(&quot;aj&quot;,&quot;#&quot;))&lt;/td&gt;
    &lt;td&gt;'R#'&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;slice. l = ['a','b','c','d','e']&lt;/td&gt;
    &lt;td&gt;l[1:4]&lt;/td&gt;
    &lt;td&gt;['b', 'c', 'd'] &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;slice. Start index is missing &lt;/td&gt;
    &lt;td&gt;l[:4]&lt;/td&gt;
    &lt;td&gt; ['a', 'b', 'c', 'd']  Default is 0 if start index is omitted &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;slice. End index is missing &lt;/td&gt;
    &lt;td&gt;l[1:]&lt;/td&gt;
    &lt;td&gt; ['b', 'c', 'd', 'e'] Default is length of the list if end index is omitted&lt;/td&gt;
  &lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;slice. Both index missing &lt;/td&gt;
    &lt;td&gt;l[:]&lt;/td&gt;
    &lt;td&gt; ['a','b','c','d','e'] &lt;/td&gt;
  &lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;Index of first occurrence of a char.  &lt;/td&gt;
    &lt;td&gt;print(l.index('d'))&lt;/td&gt;
    &lt;td&gt; 3 &lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;
== Code as given by Vidya ==
&lt;pre&gt;
import string

def remove_matching_letter(l1,l2) :
    for i in range(len(l1)) :
        for j in range(len(l2)):
            if l1[i] == l2[j] :
                c = l1[i]
                l1.remove(c)
                l2.remove(c)
                l = l1 + ['*'] +l2
                return[l,True]
    l = l1+['*']+l2
    return[l,False]


p1 = input(&quot;Enter first person name:&quot;)
p1 = p1.lower()
p1=  p1.replace(&quot; &quot;,&quot;&quot;)

p2 = input(&quot;Enter Second person name:&quot;)
p2 = p2.lower()
p2 =  p2.replace(&quot; &quot;,&quot;&quot;)

l1 = list(p1)
l2 = list(p2)

proceed = True
while proceed:
    [con_list,proceed] = remove_matching_letter(l1,l2)
    star_index = con_list.index('*')
    l1 = con_list[:star_index]
    l2 = con_list[star_index+1:]
    
count = len(l1) + len(l2)
result = ['Friends','Love','Affection','Marriage','Enemy','Sibling']

while len(result) &gt; 1 :
    split_index = (count%len(result)) -1
    if split_index &gt;= 0 :
        right = result[split_index + 1 :]
        left = result[:split_index]
        result = right + left
    else :
        result = result[:len(result) -1]
print(result[0])
&lt;/pre&gt;

Output:

[[File:flameOutput.png]]

= Image Compression =
Suppose you have a web page with lots of images.  It will take more time to download.  To make downloading faster, either you remove the images or reduce the size of the images.  Both methods will not give a good or required result.  Instead you can do &lt;b&gt; Image Compression&lt;/b&gt;
==NumPy Module==
NumPy is a module for Python. The name is an acronym for &quot;Numeric Python&quot;. It enriches Python with powerful data structures, implementing multi-dimensional arrays and matrices. To work with Artificial Intelligence, Machine Learning or Deep Learning NumPy is required.

&lt;b&gt; How is it superior to List &lt;/b&gt;
Operations on numpy arrays and matrices are easier than Lists.
Consider  the following

cvalues = [22.1, 22.8, 21.9, 22.5, 22.7, 22.3, 21.8, 21.2, 22.9, 22.1]

C = np.array(cvalues)

We would like to find the values into degrees Fahrenheit. This can be easily accomplished using a simple scalar multiplication:

print(C * 9 / 5 + 32)

Using Lists, it should have been

 fvalues = [ x*9/5 + 32 for x in cvalues] 

&lt;b&gt; Operations on numpy &lt;/b&gt;
&lt;table width=&quot;200&quot; border=&quot;1&quot;&gt;
  &lt;tr&gt;
    &lt;th scope=&quot;col&quot;&gt;Operations&lt;/th&gt;
    &lt;th scope=&quot;col&quot;&gt;Descriptions&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;import numpy as np &lt;/td&gt;
    &lt;td&gt;numpy is imported and can be accessed with a short name np&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;a=np.array([1,2,3])&lt;/td&gt;
    &lt;td&gt;One dimensional array 'a' is created&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;print(type(a))&lt;/td&gt;
    &lt;td&gt;&lt;class 'numpy.ndarray'&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;print(a.shape)&lt;/td&gt;
    &lt;td&gt;(3,)&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;print (a[0],a[1],a[2])&lt;/td&gt;
    &lt;td&gt;1 2 3&lt;/td&gt;
  &lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;b=np.array([[1,2,3],[4,5,6]])&lt;/td&gt;
    &lt;td&gt;Two dimensional array 'b' is created&lt;/td&gt;
  &lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;print(b.shape)&lt;/td&gt;
    &lt;td&gt;(2,3)&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;
[[#Top]]
=== NumPy Examples ===
'''Example: Print NumPy Array'''
&lt;pre&gt;
import numpy as np

#pass list as argument to np.array
a=np.array([1,2,3])
print(a)
#Output: [1 2 3]
&lt;/pre&gt;

'''Example: Print type of numpy array'''
&lt;pre&gt;
#type of numpy array
print(type(a))
#Output: &lt;class 'numpy.ndarray'&gt;
&lt;/pre&gt;

&lt;pre&gt;
#shape of numpy array
print(a.shape)
#Output: (3,)

#print elements of numpy using indexes
print(a[0], a[1], a[2])
#Output: 1 2 3

b=np.array([[1,2,3],[4,5,6]])
print(b.shape)
#Output: (2, 3) - 23 rows and 3 columns

#array of '0'
a=np.zeros((2,2))
print(a)
'''Output:
[[0. 0.]
 [0. 0.]]'''

#array of '1'
b= np.ones((2,2))
print(b)
'''Output:
[[1. 1.]
 [1. 1.]]'''

#2x2 array of 6
c= np.full((2,2),6)
print(c)
'''Output:
[[6 6]
 [6 6]]'''

#2x2 array of random number
d=np.random.random((2,2))
print(d)
'''Output:
 [[0.45937293 0.72546193]
 [0.28374715 0.63269858]]'''
 

&lt;/pre&gt;</text>
      <sha1>pfkit5l7mlojxrf8mwtoe0nadu2btva</sha1>
    </revision>
    <revision>
      <id>3988</id>
      <parentid>3987</parentid>
      <timestamp>2018-10-02T06:36:25Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* NumPy Examples */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="6666">==Week 10 Download URL==
https://onlinecourses.nptel.ac.in/noc18_cs35/unit?unit=30&amp;lesson=31

=FLAMES - a Childhood play=
In childhood, we might have played a game called FLAMES to find the relationship (illusion!!) between a boy and a girl.  

All you have to do is

&lt;b&gt; Steps : &lt;/b&gt;
 1. write their names and strike out the common characters that occur in both their names.
 2. Count the remaining letters (SAY X)
 3. Write the word FLAMES and start counting from F and strike out the X&lt;sup&gt;th&lt;/sup&gt; letter till only one character remains
 4. If it is F - then the two are Friends. L - Love, A - Affection,  M - Marriage  E- Enemy S- Sister

&lt;table width=&quot;449&quot; height=&quot;116&quot; border=&quot;1&quot;&gt;
 &lt;tr&gt;
    &lt;td&gt;[[File:Flamestep1.JPG|300px]]&lt;/td&gt;
    &lt;td&gt;[[File:Flamestep2.JPG|300px]]&lt;/td&gt;
    &lt;td&gt;[[File:flamestep3.JPG|300px]]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td width = 200&gt;Remaining No. of Characters = 7&lt;/td&gt;
    &lt;td width = 200&gt;Counting from F, wrap over and strike the 7&lt;SUP&gt;th&lt;/SUP&gt; letter&lt;/td&gt;
    &lt;td width = 200&gt;The remaining letter denotes the relationship&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;
== Refresh the operations on Strings and Lists ==
&lt;table width=&quot;200&quot; border=&quot;1&quot;&gt;
  &lt;tr&gt;
    &lt;th scope=&quot;col&quot; width=100&gt;Functions&lt;/th&gt;
    &lt;th scope=&quot;col&quot; width=100&gt;Example&lt;/th&gt;
    &lt;th scope=&quot;col&quot; width=100&gt;Result&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;import &lt;/td&gt;
    &lt;td&gt;import string&lt;/td&gt;
    &lt;td&gt;import string module&lt;/td&gt;
  &lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;input a string&lt;/td&gt;
    &lt;td&gt;s = input()&lt;/td&gt;
    &lt;td&gt;input a string to the variable s&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Convert to lower case&lt;/td&gt;
    &lt;td&gt;print(s.lower())&lt;/td&gt;
    &lt;td &gt; raj &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Convert to upper case&lt;/td&gt;
    &lt;td&gt;print(s.upper())&lt;/td&gt;
    &lt;td&gt; RAJ&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Convert the string to list&lt;/td&gt;
    &lt;td&gt;s1 = list(s)&lt;/td&gt;
    &lt;td&gt;s1 will be ['R','a','j']&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Replace a character&lt;/td&gt;
    &lt;td&gt;print(s.replace(&quot;j&quot;,&quot;#&quot;))&lt;/td&gt;
    &lt;td&gt;'Ra#' .Note: the content of s is not changed.&lt;/td&gt;
  &lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;Replace more than one character&lt;/td&gt;
    &lt;td&gt;print(s.replace(&quot;aj&quot;,&quot;#&quot;))&lt;/td&gt;
    &lt;td&gt;'R#'&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;slice. l = ['a','b','c','d','e']&lt;/td&gt;
    &lt;td&gt;l[1:4]&lt;/td&gt;
    &lt;td&gt;['b', 'c', 'd'] &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;slice. Start index is missing &lt;/td&gt;
    &lt;td&gt;l[:4]&lt;/td&gt;
    &lt;td&gt; ['a', 'b', 'c', 'd']  Default is 0 if start index is omitted &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;slice. End index is missing &lt;/td&gt;
    &lt;td&gt;l[1:]&lt;/td&gt;
    &lt;td&gt; ['b', 'c', 'd', 'e'] Default is length of the list if end index is omitted&lt;/td&gt;
  &lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;slice. Both index missing &lt;/td&gt;
    &lt;td&gt;l[:]&lt;/td&gt;
    &lt;td&gt; ['a','b','c','d','e'] &lt;/td&gt;
  &lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;Index of first occurrence of a char.  &lt;/td&gt;
    &lt;td&gt;print(l.index('d'))&lt;/td&gt;
    &lt;td&gt; 3 &lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;
== Code as given by Vidya ==
&lt;pre&gt;
import string

def remove_matching_letter(l1,l2) :
    for i in range(len(l1)) :
        for j in range(len(l2)):
            if l1[i] == l2[j] :
                c = l1[i]
                l1.remove(c)
                l2.remove(c)
                l = l1 + ['*'] +l2
                return[l,True]
    l = l1+['*']+l2
    return[l,False]


p1 = input(&quot;Enter first person name:&quot;)
p1 = p1.lower()
p1=  p1.replace(&quot; &quot;,&quot;&quot;)

p2 = input(&quot;Enter Second person name:&quot;)
p2 = p2.lower()
p2 =  p2.replace(&quot; &quot;,&quot;&quot;)

l1 = list(p1)
l2 = list(p2)

proceed = True
while proceed:
    [con_list,proceed] = remove_matching_letter(l1,l2)
    star_index = con_list.index('*')
    l1 = con_list[:star_index]
    l2 = con_list[star_index+1:]
    
count = len(l1) + len(l2)
result = ['Friends','Love','Affection','Marriage','Enemy','Sibling']

while len(result) &gt; 1 :
    split_index = (count%len(result)) -1
    if split_index &gt;= 0 :
        right = result[split_index + 1 :]
        left = result[:split_index]
        result = right + left
    else :
        result = result[:len(result) -1]
print(result[0])
&lt;/pre&gt;

Output:

[[File:flameOutput.png]]

= Image Compression =
Suppose you have a web page with lots of images.  It will take more time to download.  To make downloading faster, either you remove the images or reduce the size of the images.  Both methods will not give a good or required result.  Instead you can do &lt;b&gt; Image Compression&lt;/b&gt;
==NumPy Module==
NumPy is a module for Python. The name is an acronym for &quot;Numeric Python&quot;. It enriches Python with powerful data structures, implementing multi-dimensional arrays and matrices. To work with Artificial Intelligence, Machine Learning or Deep Learning NumPy is required.

&lt;b&gt; How is it superior to List &lt;/b&gt;
Operations on numpy arrays and matrices are easier than Lists.
Consider  the following

cvalues = [22.1, 22.8, 21.9, 22.5, 22.7, 22.3, 21.8, 21.2, 22.9, 22.1]

C = np.array(cvalues)

We would like to find the values into degrees Fahrenheit. This can be easily accomplished using a simple scalar multiplication:

print(C * 9 / 5 + 32)

Using Lists, it should have been

 fvalues = [ x*9/5 + 32 for x in cvalues] 

&lt;b&gt; Operations on numpy &lt;/b&gt;
&lt;table width=&quot;200&quot; border=&quot;1&quot;&gt;
  &lt;tr&gt;
    &lt;th scope=&quot;col&quot;&gt;Operations&lt;/th&gt;
    &lt;th scope=&quot;col&quot;&gt;Descriptions&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;import numpy as np &lt;/td&gt;
    &lt;td&gt;numpy is imported and can be accessed with a short name np&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;a=np.array([1,2,3])&lt;/td&gt;
    &lt;td&gt;One dimensional array 'a' is created&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;print(type(a))&lt;/td&gt;
    &lt;td&gt;&lt;class 'numpy.ndarray'&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;print(a.shape)&lt;/td&gt;
    &lt;td&gt;(3,)&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;print (a[0],a[1],a[2])&lt;/td&gt;
    &lt;td&gt;1 2 3&lt;/td&gt;
  &lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;b=np.array([[1,2,3],[4,5,6]])&lt;/td&gt;
    &lt;td&gt;Two dimensional array 'b' is created&lt;/td&gt;
  &lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;print(b.shape)&lt;/td&gt;
    &lt;td&gt;(2,3)&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;
[[#Top]]
=== NumPy Examples ===
'''Example: Print NumPy Array'''
&lt;pre&gt;
import numpy as np

#pass list as argument to np.array
a=np.array([1,2,3])
print(a)
#Output: [1 2 3]
&lt;/pre&gt;

'''Example: Print type of numpy array'''
&lt;pre&gt;
#type of numpy array
print(type(a))
#Output: &lt;class 'numpy.ndarray'&gt;
&lt;/pre&gt;

'''Example: Print shape i.e.size of numpy array'''
&lt;pre&gt;
#shape of numpy array
print(a.shape)
#Output: (3,)
&lt;/pre&gt;


&lt;pre&gt;
#print elements of numpy using indexes
print(a[0], a[1], a[2])
#Output: 1 2 3

b=np.array([[1,2,3],[4,5,6]])
print(b.shape)
#Output: (2, 3) - 23 rows and 3 columns

#array of '0'
a=np.zeros((2,2))
print(a)
'''Output:
[[0. 0.]
 [0. 0.]]'''

#array of '1'
b= np.ones((2,2))
print(b)
'''Output:
[[1. 1.]
 [1. 1.]]'''

#2x2 array of 6
c= np.full((2,2),6)
print(c)
'''Output:
[[6 6]
 [6 6]]'''

#2x2 array of random number
d=np.random.random((2,2))
print(d)
'''Output:
 [[0.45937293 0.72546193]
 [0.28374715 0.63269858]]'''
 

&lt;/pre&gt;</text>
      <sha1>esoehm4sluilc2zscy9zcb7g594f8bq</sha1>
    </revision>
    <revision>
      <id>3989</id>
      <parentid>3988</parentid>
      <timestamp>2018-10-02T06:37:14Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* NumPy Examples */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="6731">==Week 10 Download URL==
https://onlinecourses.nptel.ac.in/noc18_cs35/unit?unit=30&amp;lesson=31

=FLAMES - a Childhood play=
In childhood, we might have played a game called FLAMES to find the relationship (illusion!!) between a boy and a girl.  

All you have to do is

&lt;b&gt; Steps : &lt;/b&gt;
 1. write their names and strike out the common characters that occur in both their names.
 2. Count the remaining letters (SAY X)
 3. Write the word FLAMES and start counting from F and strike out the X&lt;sup&gt;th&lt;/sup&gt; letter till only one character remains
 4. If it is F - then the two are Friends. L - Love, A - Affection,  M - Marriage  E- Enemy S- Sister

&lt;table width=&quot;449&quot; height=&quot;116&quot; border=&quot;1&quot;&gt;
 &lt;tr&gt;
    &lt;td&gt;[[File:Flamestep1.JPG|300px]]&lt;/td&gt;
    &lt;td&gt;[[File:Flamestep2.JPG|300px]]&lt;/td&gt;
    &lt;td&gt;[[File:flamestep3.JPG|300px]]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td width = 200&gt;Remaining No. of Characters = 7&lt;/td&gt;
    &lt;td width = 200&gt;Counting from F, wrap over and strike the 7&lt;SUP&gt;th&lt;/SUP&gt; letter&lt;/td&gt;
    &lt;td width = 200&gt;The remaining letter denotes the relationship&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;
== Refresh the operations on Strings and Lists ==
&lt;table width=&quot;200&quot; border=&quot;1&quot;&gt;
  &lt;tr&gt;
    &lt;th scope=&quot;col&quot; width=100&gt;Functions&lt;/th&gt;
    &lt;th scope=&quot;col&quot; width=100&gt;Example&lt;/th&gt;
    &lt;th scope=&quot;col&quot; width=100&gt;Result&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;import &lt;/td&gt;
    &lt;td&gt;import string&lt;/td&gt;
    &lt;td&gt;import string module&lt;/td&gt;
  &lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;input a string&lt;/td&gt;
    &lt;td&gt;s = input()&lt;/td&gt;
    &lt;td&gt;input a string to the variable s&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Convert to lower case&lt;/td&gt;
    &lt;td&gt;print(s.lower())&lt;/td&gt;
    &lt;td &gt; raj &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Convert to upper case&lt;/td&gt;
    &lt;td&gt;print(s.upper())&lt;/td&gt;
    &lt;td&gt; RAJ&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Convert the string to list&lt;/td&gt;
    &lt;td&gt;s1 = list(s)&lt;/td&gt;
    &lt;td&gt;s1 will be ['R','a','j']&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Replace a character&lt;/td&gt;
    &lt;td&gt;print(s.replace(&quot;j&quot;,&quot;#&quot;))&lt;/td&gt;
    &lt;td&gt;'Ra#' .Note: the content of s is not changed.&lt;/td&gt;
  &lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;Replace more than one character&lt;/td&gt;
    &lt;td&gt;print(s.replace(&quot;aj&quot;,&quot;#&quot;))&lt;/td&gt;
    &lt;td&gt;'R#'&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;slice. l = ['a','b','c','d','e']&lt;/td&gt;
    &lt;td&gt;l[1:4]&lt;/td&gt;
    &lt;td&gt;['b', 'c', 'd'] &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;slice. Start index is missing &lt;/td&gt;
    &lt;td&gt;l[:4]&lt;/td&gt;
    &lt;td&gt; ['a', 'b', 'c', 'd']  Default is 0 if start index is omitted &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;slice. End index is missing &lt;/td&gt;
    &lt;td&gt;l[1:]&lt;/td&gt;
    &lt;td&gt; ['b', 'c', 'd', 'e'] Default is length of the list if end index is omitted&lt;/td&gt;
  &lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;slice. Both index missing &lt;/td&gt;
    &lt;td&gt;l[:]&lt;/td&gt;
    &lt;td&gt; ['a','b','c','d','e'] &lt;/td&gt;
  &lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;Index of first occurrence of a char.  &lt;/td&gt;
    &lt;td&gt;print(l.index('d'))&lt;/td&gt;
    &lt;td&gt; 3 &lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;
== Code as given by Vidya ==
&lt;pre&gt;
import string

def remove_matching_letter(l1,l2) :
    for i in range(len(l1)) :
        for j in range(len(l2)):
            if l1[i] == l2[j] :
                c = l1[i]
                l1.remove(c)
                l2.remove(c)
                l = l1 + ['*'] +l2
                return[l,True]
    l = l1+['*']+l2
    return[l,False]


p1 = input(&quot;Enter first person name:&quot;)
p1 = p1.lower()
p1=  p1.replace(&quot; &quot;,&quot;&quot;)

p2 = input(&quot;Enter Second person name:&quot;)
p2 = p2.lower()
p2 =  p2.replace(&quot; &quot;,&quot;&quot;)

l1 = list(p1)
l2 = list(p2)

proceed = True
while proceed:
    [con_list,proceed] = remove_matching_letter(l1,l2)
    star_index = con_list.index('*')
    l1 = con_list[:star_index]
    l2 = con_list[star_index+1:]
    
count = len(l1) + len(l2)
result = ['Friends','Love','Affection','Marriage','Enemy','Sibling']

while len(result) &gt; 1 :
    split_index = (count%len(result)) -1
    if split_index &gt;= 0 :
        right = result[split_index + 1 :]
        left = result[:split_index]
        result = right + left
    else :
        result = result[:len(result) -1]
print(result[0])
&lt;/pre&gt;

Output:

[[File:flameOutput.png]]

= Image Compression =
Suppose you have a web page with lots of images.  It will take more time to download.  To make downloading faster, either you remove the images or reduce the size of the images.  Both methods will not give a good or required result.  Instead you can do &lt;b&gt; Image Compression&lt;/b&gt;
==NumPy Module==
NumPy is a module for Python. The name is an acronym for &quot;Numeric Python&quot;. It enriches Python with powerful data structures, implementing multi-dimensional arrays and matrices. To work with Artificial Intelligence, Machine Learning or Deep Learning NumPy is required.

&lt;b&gt; How is it superior to List &lt;/b&gt;
Operations on numpy arrays and matrices are easier than Lists.
Consider  the following

cvalues = [22.1, 22.8, 21.9, 22.5, 22.7, 22.3, 21.8, 21.2, 22.9, 22.1]

C = np.array(cvalues)

We would like to find the values into degrees Fahrenheit. This can be easily accomplished using a simple scalar multiplication:

print(C * 9 / 5 + 32)

Using Lists, it should have been

 fvalues = [ x*9/5 + 32 for x in cvalues] 

&lt;b&gt; Operations on numpy &lt;/b&gt;
&lt;table width=&quot;200&quot; border=&quot;1&quot;&gt;
  &lt;tr&gt;
    &lt;th scope=&quot;col&quot;&gt;Operations&lt;/th&gt;
    &lt;th scope=&quot;col&quot;&gt;Descriptions&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;import numpy as np &lt;/td&gt;
    &lt;td&gt;numpy is imported and can be accessed with a short name np&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;a=np.array([1,2,3])&lt;/td&gt;
    &lt;td&gt;One dimensional array 'a' is created&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;print(type(a))&lt;/td&gt;
    &lt;td&gt;&lt;class 'numpy.ndarray'&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;print(a.shape)&lt;/td&gt;
    &lt;td&gt;(3,)&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;print (a[0],a[1],a[2])&lt;/td&gt;
    &lt;td&gt;1 2 3&lt;/td&gt;
  &lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;b=np.array([[1,2,3],[4,5,6]])&lt;/td&gt;
    &lt;td&gt;Two dimensional array 'b' is created&lt;/td&gt;
  &lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;print(b.shape)&lt;/td&gt;
    &lt;td&gt;(2,3)&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;
[[#Top]]
=== NumPy Examples ===
'''Example: Print NumPy Array'''
&lt;pre&gt;
import numpy as np

#pass list as argument to np.array
a=np.array([1,2,3])
print(a)
#Output: [1 2 3]
&lt;/pre&gt;

'''Example: Print type of numpy array'''
&lt;pre&gt;
#type of numpy array
print(type(a))
#Output: &lt;class 'numpy.ndarray'&gt;
&lt;/pre&gt;

'''Example: Print shape i.e.size of numpy array'''
&lt;pre&gt;
#shape of numpy array
print(a.shape)
#Output: (3,)
&lt;/pre&gt;

'''Example: Print elements of numpy using indexes'''
&lt;pre&gt;
#print elements of numpy using indexes
print(a[0], a[1], a[2])
#Output: 1 2 3
&lt;/pre&gt;

&lt;pre&gt;
b=np.array([[1,2,3],[4,5,6]])
print(b.shape)
#Output: (2, 3) - 23 rows and 3 columns

#array of '0'
a=np.zeros((2,2))
print(a)
'''Output:
[[0. 0.]
 [0. 0.]]'''

#array of '1'
b= np.ones((2,2))
print(b)
'''Output:
[[1. 1.]
 [1. 1.]]'''

#2x2 array of 6
c= np.full((2,2),6)
print(c)
'''Output:
[[6 6]
 [6 6]]'''

#2x2 array of random number
d=np.random.random((2,2))
print(d)
'''Output:
 [[0.45937293 0.72546193]
 [0.28374715 0.63269858]]'''
 

&lt;/pre&gt;</text>
      <sha1>ckbotit7eiktf6zihvkruby0gzq1otj</sha1>
    </revision>
    <revision>
      <id>3990</id>
      <parentid>3989</parentid>
      <timestamp>2018-10-02T06:38:31Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* NumPy Examples */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="6797">==Week 10 Download URL==
https://onlinecourses.nptel.ac.in/noc18_cs35/unit?unit=30&amp;lesson=31

=FLAMES - a Childhood play=
In childhood, we might have played a game called FLAMES to find the relationship (illusion!!) between a boy and a girl.  

All you have to do is

&lt;b&gt; Steps : &lt;/b&gt;
 1. write their names and strike out the common characters that occur in both their names.
 2. Count the remaining letters (SAY X)
 3. Write the word FLAMES and start counting from F and strike out the X&lt;sup&gt;th&lt;/sup&gt; letter till only one character remains
 4. If it is F - then the two are Friends. L - Love, A - Affection,  M - Marriage  E- Enemy S- Sister

&lt;table width=&quot;449&quot; height=&quot;116&quot; border=&quot;1&quot;&gt;
 &lt;tr&gt;
    &lt;td&gt;[[File:Flamestep1.JPG|300px]]&lt;/td&gt;
    &lt;td&gt;[[File:Flamestep2.JPG|300px]]&lt;/td&gt;
    &lt;td&gt;[[File:flamestep3.JPG|300px]]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td width = 200&gt;Remaining No. of Characters = 7&lt;/td&gt;
    &lt;td width = 200&gt;Counting from F, wrap over and strike the 7&lt;SUP&gt;th&lt;/SUP&gt; letter&lt;/td&gt;
    &lt;td width = 200&gt;The remaining letter denotes the relationship&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;
== Refresh the operations on Strings and Lists ==
&lt;table width=&quot;200&quot; border=&quot;1&quot;&gt;
  &lt;tr&gt;
    &lt;th scope=&quot;col&quot; width=100&gt;Functions&lt;/th&gt;
    &lt;th scope=&quot;col&quot; width=100&gt;Example&lt;/th&gt;
    &lt;th scope=&quot;col&quot; width=100&gt;Result&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;import &lt;/td&gt;
    &lt;td&gt;import string&lt;/td&gt;
    &lt;td&gt;import string module&lt;/td&gt;
  &lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;input a string&lt;/td&gt;
    &lt;td&gt;s = input()&lt;/td&gt;
    &lt;td&gt;input a string to the variable s&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Convert to lower case&lt;/td&gt;
    &lt;td&gt;print(s.lower())&lt;/td&gt;
    &lt;td &gt; raj &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Convert to upper case&lt;/td&gt;
    &lt;td&gt;print(s.upper())&lt;/td&gt;
    &lt;td&gt; RAJ&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Convert the string to list&lt;/td&gt;
    &lt;td&gt;s1 = list(s)&lt;/td&gt;
    &lt;td&gt;s1 will be ['R','a','j']&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Replace a character&lt;/td&gt;
    &lt;td&gt;print(s.replace(&quot;j&quot;,&quot;#&quot;))&lt;/td&gt;
    &lt;td&gt;'Ra#' .Note: the content of s is not changed.&lt;/td&gt;
  &lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;Replace more than one character&lt;/td&gt;
    &lt;td&gt;print(s.replace(&quot;aj&quot;,&quot;#&quot;))&lt;/td&gt;
    &lt;td&gt;'R#'&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;slice. l = ['a','b','c','d','e']&lt;/td&gt;
    &lt;td&gt;l[1:4]&lt;/td&gt;
    &lt;td&gt;['b', 'c', 'd'] &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;slice. Start index is missing &lt;/td&gt;
    &lt;td&gt;l[:4]&lt;/td&gt;
    &lt;td&gt; ['a', 'b', 'c', 'd']  Default is 0 if start index is omitted &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;slice. End index is missing &lt;/td&gt;
    &lt;td&gt;l[1:]&lt;/td&gt;
    &lt;td&gt; ['b', 'c', 'd', 'e'] Default is length of the list if end index is omitted&lt;/td&gt;
  &lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;slice. Both index missing &lt;/td&gt;
    &lt;td&gt;l[:]&lt;/td&gt;
    &lt;td&gt; ['a','b','c','d','e'] &lt;/td&gt;
  &lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;Index of first occurrence of a char.  &lt;/td&gt;
    &lt;td&gt;print(l.index('d'))&lt;/td&gt;
    &lt;td&gt; 3 &lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;
== Code as given by Vidya ==
&lt;pre&gt;
import string

def remove_matching_letter(l1,l2) :
    for i in range(len(l1)) :
        for j in range(len(l2)):
            if l1[i] == l2[j] :
                c = l1[i]
                l1.remove(c)
                l2.remove(c)
                l = l1 + ['*'] +l2
                return[l,True]
    l = l1+['*']+l2
    return[l,False]


p1 = input(&quot;Enter first person name:&quot;)
p1 = p1.lower()
p1=  p1.replace(&quot; &quot;,&quot;&quot;)

p2 = input(&quot;Enter Second person name:&quot;)
p2 = p2.lower()
p2 =  p2.replace(&quot; &quot;,&quot;&quot;)

l1 = list(p1)
l2 = list(p2)

proceed = True
while proceed:
    [con_list,proceed] = remove_matching_letter(l1,l2)
    star_index = con_list.index('*')
    l1 = con_list[:star_index]
    l2 = con_list[star_index+1:]
    
count = len(l1) + len(l2)
result = ['Friends','Love','Affection','Marriage','Enemy','Sibling']

while len(result) &gt; 1 :
    split_index = (count%len(result)) -1
    if split_index &gt;= 0 :
        right = result[split_index + 1 :]
        left = result[:split_index]
        result = right + left
    else :
        result = result[:len(result) -1]
print(result[0])
&lt;/pre&gt;

Output:

[[File:flameOutput.png]]

= Image Compression =
Suppose you have a web page with lots of images.  It will take more time to download.  To make downloading faster, either you remove the images or reduce the size of the images.  Both methods will not give a good or required result.  Instead you can do &lt;b&gt; Image Compression&lt;/b&gt;
==NumPy Module==
NumPy is a module for Python. The name is an acronym for &quot;Numeric Python&quot;. It enriches Python with powerful data structures, implementing multi-dimensional arrays and matrices. To work with Artificial Intelligence, Machine Learning or Deep Learning NumPy is required.

&lt;b&gt; How is it superior to List &lt;/b&gt;
Operations on numpy arrays and matrices are easier than Lists.
Consider  the following

cvalues = [22.1, 22.8, 21.9, 22.5, 22.7, 22.3, 21.8, 21.2, 22.9, 22.1]

C = np.array(cvalues)

We would like to find the values into degrees Fahrenheit. This can be easily accomplished using a simple scalar multiplication:

print(C * 9 / 5 + 32)

Using Lists, it should have been

 fvalues = [ x*9/5 + 32 for x in cvalues] 

&lt;b&gt; Operations on numpy &lt;/b&gt;
&lt;table width=&quot;200&quot; border=&quot;1&quot;&gt;
  &lt;tr&gt;
    &lt;th scope=&quot;col&quot;&gt;Operations&lt;/th&gt;
    &lt;th scope=&quot;col&quot;&gt;Descriptions&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;import numpy as np &lt;/td&gt;
    &lt;td&gt;numpy is imported and can be accessed with a short name np&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;a=np.array([1,2,3])&lt;/td&gt;
    &lt;td&gt;One dimensional array 'a' is created&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;print(type(a))&lt;/td&gt;
    &lt;td&gt;&lt;class 'numpy.ndarray'&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;print(a.shape)&lt;/td&gt;
    &lt;td&gt;(3,)&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;print (a[0],a[1],a[2])&lt;/td&gt;
    &lt;td&gt;1 2 3&lt;/td&gt;
  &lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;b=np.array([[1,2,3],[4,5,6]])&lt;/td&gt;
    &lt;td&gt;Two dimensional array 'b' is created&lt;/td&gt;
  &lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;print(b.shape)&lt;/td&gt;
    &lt;td&gt;(2,3)&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;
[[#Top]]
=== NumPy Examples ===
'''Example: Print NumPy Array'''
&lt;pre&gt;
import numpy as np

#pass list as argument to np.array
a=np.array([1,2,3])
print(a)
#Output: [1 2 3]
&lt;/pre&gt;

'''Example: Print type of numpy array'''
&lt;pre&gt;
#type of numpy array
print(type(a))
#Output: &lt;class 'numpy.ndarray'&gt;
&lt;/pre&gt;

'''Example: Print shape i.e.size of numpy array'''
&lt;pre&gt;
#shape of numpy array
print(a.shape)
#Output: (3,)
&lt;/pre&gt;

'''Example: Print elements of numpy using indexes'''
&lt;pre&gt;
#print elements of numpy using indexes
print(a[0], a[1], a[2])
#Output: 1 2 3
&lt;/pre&gt;

'''Example: Print shape of array: rows and columns'''
&lt;pre&gt;
b=np.array([[1,2,3],[4,5,6]])
print(b.shape)
#Output: (2, 3) - 2 rows and 3 columns
&lt;/pre&gt;

&lt;pre&gt;
#array of '0'
a=np.zeros((2,2))
print(a)
'''Output:
[[0. 0.]
 [0. 0.]]'''

#array of '1'
b= np.ones((2,2))
print(b)
'''Output:
[[1. 1.]
 [1. 1.]]'''

#2x2 array of 6
c= np.full((2,2),6)
print(c)
'''Output:
[[6 6]
 [6 6]]'''

#2x2 array of random number
d=np.random.random((2,2))
print(d)
'''Output:
 [[0.45937293 0.72546193]
 [0.28374715 0.63269858]]'''
 

&lt;/pre&gt;</text>
      <sha1>8bsz2pldfogo2h8fhtdzhzqri1rh2qj</sha1>
    </revision>
    <revision>
      <id>3991</id>
      <parentid>3990</parentid>
      <timestamp>2018-10-02T06:39:24Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* NumPy Examples */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="6864">==Week 10 Download URL==
https://onlinecourses.nptel.ac.in/noc18_cs35/unit?unit=30&amp;lesson=31

=FLAMES - a Childhood play=
In childhood, we might have played a game called FLAMES to find the relationship (illusion!!) between a boy and a girl.  

All you have to do is

&lt;b&gt; Steps : &lt;/b&gt;
 1. write their names and strike out the common characters that occur in both their names.
 2. Count the remaining letters (SAY X)
 3. Write the word FLAMES and start counting from F and strike out the X&lt;sup&gt;th&lt;/sup&gt; letter till only one character remains
 4. If it is F - then the two are Friends. L - Love, A - Affection,  M - Marriage  E- Enemy S- Sister

&lt;table width=&quot;449&quot; height=&quot;116&quot; border=&quot;1&quot;&gt;
 &lt;tr&gt;
    &lt;td&gt;[[File:Flamestep1.JPG|300px]]&lt;/td&gt;
    &lt;td&gt;[[File:Flamestep2.JPG|300px]]&lt;/td&gt;
    &lt;td&gt;[[File:flamestep3.JPG|300px]]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td width = 200&gt;Remaining No. of Characters = 7&lt;/td&gt;
    &lt;td width = 200&gt;Counting from F, wrap over and strike the 7&lt;SUP&gt;th&lt;/SUP&gt; letter&lt;/td&gt;
    &lt;td width = 200&gt;The remaining letter denotes the relationship&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;
== Refresh the operations on Strings and Lists ==
&lt;table width=&quot;200&quot; border=&quot;1&quot;&gt;
  &lt;tr&gt;
    &lt;th scope=&quot;col&quot; width=100&gt;Functions&lt;/th&gt;
    &lt;th scope=&quot;col&quot; width=100&gt;Example&lt;/th&gt;
    &lt;th scope=&quot;col&quot; width=100&gt;Result&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;import &lt;/td&gt;
    &lt;td&gt;import string&lt;/td&gt;
    &lt;td&gt;import string module&lt;/td&gt;
  &lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;input a string&lt;/td&gt;
    &lt;td&gt;s = input()&lt;/td&gt;
    &lt;td&gt;input a string to the variable s&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Convert to lower case&lt;/td&gt;
    &lt;td&gt;print(s.lower())&lt;/td&gt;
    &lt;td &gt; raj &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Convert to upper case&lt;/td&gt;
    &lt;td&gt;print(s.upper())&lt;/td&gt;
    &lt;td&gt; RAJ&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Convert the string to list&lt;/td&gt;
    &lt;td&gt;s1 = list(s)&lt;/td&gt;
    &lt;td&gt;s1 will be ['R','a','j']&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Replace a character&lt;/td&gt;
    &lt;td&gt;print(s.replace(&quot;j&quot;,&quot;#&quot;))&lt;/td&gt;
    &lt;td&gt;'Ra#' .Note: the content of s is not changed.&lt;/td&gt;
  &lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;Replace more than one character&lt;/td&gt;
    &lt;td&gt;print(s.replace(&quot;aj&quot;,&quot;#&quot;))&lt;/td&gt;
    &lt;td&gt;'R#'&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;slice. l = ['a','b','c','d','e']&lt;/td&gt;
    &lt;td&gt;l[1:4]&lt;/td&gt;
    &lt;td&gt;['b', 'c', 'd'] &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;slice. Start index is missing &lt;/td&gt;
    &lt;td&gt;l[:4]&lt;/td&gt;
    &lt;td&gt; ['a', 'b', 'c', 'd']  Default is 0 if start index is omitted &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;slice. End index is missing &lt;/td&gt;
    &lt;td&gt;l[1:]&lt;/td&gt;
    &lt;td&gt; ['b', 'c', 'd', 'e'] Default is length of the list if end index is omitted&lt;/td&gt;
  &lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;slice. Both index missing &lt;/td&gt;
    &lt;td&gt;l[:]&lt;/td&gt;
    &lt;td&gt; ['a','b','c','d','e'] &lt;/td&gt;
  &lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;Index of first occurrence of a char.  &lt;/td&gt;
    &lt;td&gt;print(l.index('d'))&lt;/td&gt;
    &lt;td&gt; 3 &lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;
== Code as given by Vidya ==
&lt;pre&gt;
import string

def remove_matching_letter(l1,l2) :
    for i in range(len(l1)) :
        for j in range(len(l2)):
            if l1[i] == l2[j] :
                c = l1[i]
                l1.remove(c)
                l2.remove(c)
                l = l1 + ['*'] +l2
                return[l,True]
    l = l1+['*']+l2
    return[l,False]


p1 = input(&quot;Enter first person name:&quot;)
p1 = p1.lower()
p1=  p1.replace(&quot; &quot;,&quot;&quot;)

p2 = input(&quot;Enter Second person name:&quot;)
p2 = p2.lower()
p2 =  p2.replace(&quot; &quot;,&quot;&quot;)

l1 = list(p1)
l2 = list(p2)

proceed = True
while proceed:
    [con_list,proceed] = remove_matching_letter(l1,l2)
    star_index = con_list.index('*')
    l1 = con_list[:star_index]
    l2 = con_list[star_index+1:]
    
count = len(l1) + len(l2)
result = ['Friends','Love','Affection','Marriage','Enemy','Sibling']

while len(result) &gt; 1 :
    split_index = (count%len(result)) -1
    if split_index &gt;= 0 :
        right = result[split_index + 1 :]
        left = result[:split_index]
        result = right + left
    else :
        result = result[:len(result) -1]
print(result[0])
&lt;/pre&gt;

Output:

[[File:flameOutput.png]]

= Image Compression =
Suppose you have a web page with lots of images.  It will take more time to download.  To make downloading faster, either you remove the images or reduce the size of the images.  Both methods will not give a good or required result.  Instead you can do &lt;b&gt; Image Compression&lt;/b&gt;
==NumPy Module==
NumPy is a module for Python. The name is an acronym for &quot;Numeric Python&quot;. It enriches Python with powerful data structures, implementing multi-dimensional arrays and matrices. To work with Artificial Intelligence, Machine Learning or Deep Learning NumPy is required.

&lt;b&gt; How is it superior to List &lt;/b&gt;
Operations on numpy arrays and matrices are easier than Lists.
Consider  the following

cvalues = [22.1, 22.8, 21.9, 22.5, 22.7, 22.3, 21.8, 21.2, 22.9, 22.1]

C = np.array(cvalues)

We would like to find the values into degrees Fahrenheit. This can be easily accomplished using a simple scalar multiplication:

print(C * 9 / 5 + 32)

Using Lists, it should have been

 fvalues = [ x*9/5 + 32 for x in cvalues] 

&lt;b&gt; Operations on numpy &lt;/b&gt;
&lt;table width=&quot;200&quot; border=&quot;1&quot;&gt;
  &lt;tr&gt;
    &lt;th scope=&quot;col&quot;&gt;Operations&lt;/th&gt;
    &lt;th scope=&quot;col&quot;&gt;Descriptions&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;import numpy as np &lt;/td&gt;
    &lt;td&gt;numpy is imported and can be accessed with a short name np&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;a=np.array([1,2,3])&lt;/td&gt;
    &lt;td&gt;One dimensional array 'a' is created&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;print(type(a))&lt;/td&gt;
    &lt;td&gt;&lt;class 'numpy.ndarray'&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;print(a.shape)&lt;/td&gt;
    &lt;td&gt;(3,)&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;print (a[0],a[1],a[2])&lt;/td&gt;
    &lt;td&gt;1 2 3&lt;/td&gt;
  &lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;b=np.array([[1,2,3],[4,5,6]])&lt;/td&gt;
    &lt;td&gt;Two dimensional array 'b' is created&lt;/td&gt;
  &lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;print(b.shape)&lt;/td&gt;
    &lt;td&gt;(2,3)&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;
[[#Top]]
=== NumPy Examples ===
importing numpy module is common to following examples.
&lt;pre&gt;import numpy as np&lt;/pre&gt;

'''Example: Print NumPy Array'''
&lt;pre&gt;
#pass list as argument to np.array
a=np.array([1,2,3])
print(a)
#Output: [1 2 3]
&lt;/pre&gt;

'''Example: Print type of numpy array'''
&lt;pre&gt;
#type of numpy array
print(type(a))
#Output: &lt;class 'numpy.ndarray'&gt;
&lt;/pre&gt;

'''Example: Print shape i.e.size of numpy array'''
&lt;pre&gt;
#shape of numpy array
print(a.shape)
#Output: (3,)
&lt;/pre&gt;

'''Example: Print elements of numpy using indexes'''
&lt;pre&gt;
#print elements of numpy using indexes
print(a[0], a[1], a[2])
#Output: 1 2 3
&lt;/pre&gt;

'''Example: Print shape of array: rows and columns'''
&lt;pre&gt;
b=np.array([[1,2,3],[4,5,6]])
print(b.shape)
#Output: (2, 3) - 2 rows and 3 columns
&lt;/pre&gt;

&lt;pre&gt;
#array of '0'
a=np.zeros((2,2))
print(a)
'''Output:
[[0. 0.]
 [0. 0.]]'''

#array of '1'
b= np.ones((2,2))
print(b)
'''Output:
[[1. 1.]
 [1. 1.]]'''

#2x2 array of 6
c= np.full((2,2),6)
print(c)
'''Output:
[[6 6]
 [6 6]]'''

#2x2 array of random number
d=np.random.random((2,2))
print(d)
'''Output:
 [[0.45937293 0.72546193]
 [0.28374715 0.63269858]]'''
 

&lt;/pre&gt;</text>
      <sha1>ea06pg8a5kdei4hm7pqupwr922klxnt</sha1>
    </revision>
    <revision>
      <id>3992</id>
      <parentid>3991</parentid>
      <timestamp>2018-10-02T06:40:15Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* NumPy Examples */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="6894">==Week 10 Download URL==
https://onlinecourses.nptel.ac.in/noc18_cs35/unit?unit=30&amp;lesson=31

=FLAMES - a Childhood play=
In childhood, we might have played a game called FLAMES to find the relationship (illusion!!) between a boy and a girl.  

All you have to do is

&lt;b&gt; Steps : &lt;/b&gt;
 1. write their names and strike out the common characters that occur in both their names.
 2. Count the remaining letters (SAY X)
 3. Write the word FLAMES and start counting from F and strike out the X&lt;sup&gt;th&lt;/sup&gt; letter till only one character remains
 4. If it is F - then the two are Friends. L - Love, A - Affection,  M - Marriage  E- Enemy S- Sister

&lt;table width=&quot;449&quot; height=&quot;116&quot; border=&quot;1&quot;&gt;
 &lt;tr&gt;
    &lt;td&gt;[[File:Flamestep1.JPG|300px]]&lt;/td&gt;
    &lt;td&gt;[[File:Flamestep2.JPG|300px]]&lt;/td&gt;
    &lt;td&gt;[[File:flamestep3.JPG|300px]]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td width = 200&gt;Remaining No. of Characters = 7&lt;/td&gt;
    &lt;td width = 200&gt;Counting from F, wrap over and strike the 7&lt;SUP&gt;th&lt;/SUP&gt; letter&lt;/td&gt;
    &lt;td width = 200&gt;The remaining letter denotes the relationship&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;
== Refresh the operations on Strings and Lists ==
&lt;table width=&quot;200&quot; border=&quot;1&quot;&gt;
  &lt;tr&gt;
    &lt;th scope=&quot;col&quot; width=100&gt;Functions&lt;/th&gt;
    &lt;th scope=&quot;col&quot; width=100&gt;Example&lt;/th&gt;
    &lt;th scope=&quot;col&quot; width=100&gt;Result&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;import &lt;/td&gt;
    &lt;td&gt;import string&lt;/td&gt;
    &lt;td&gt;import string module&lt;/td&gt;
  &lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;input a string&lt;/td&gt;
    &lt;td&gt;s = input()&lt;/td&gt;
    &lt;td&gt;input a string to the variable s&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Convert to lower case&lt;/td&gt;
    &lt;td&gt;print(s.lower())&lt;/td&gt;
    &lt;td &gt; raj &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Convert to upper case&lt;/td&gt;
    &lt;td&gt;print(s.upper())&lt;/td&gt;
    &lt;td&gt; RAJ&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Convert the string to list&lt;/td&gt;
    &lt;td&gt;s1 = list(s)&lt;/td&gt;
    &lt;td&gt;s1 will be ['R','a','j']&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Replace a character&lt;/td&gt;
    &lt;td&gt;print(s.replace(&quot;j&quot;,&quot;#&quot;))&lt;/td&gt;
    &lt;td&gt;'Ra#' .Note: the content of s is not changed.&lt;/td&gt;
  &lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;Replace more than one character&lt;/td&gt;
    &lt;td&gt;print(s.replace(&quot;aj&quot;,&quot;#&quot;))&lt;/td&gt;
    &lt;td&gt;'R#'&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;slice. l = ['a','b','c','d','e']&lt;/td&gt;
    &lt;td&gt;l[1:4]&lt;/td&gt;
    &lt;td&gt;['b', 'c', 'd'] &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;slice. Start index is missing &lt;/td&gt;
    &lt;td&gt;l[:4]&lt;/td&gt;
    &lt;td&gt; ['a', 'b', 'c', 'd']  Default is 0 if start index is omitted &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;slice. End index is missing &lt;/td&gt;
    &lt;td&gt;l[1:]&lt;/td&gt;
    &lt;td&gt; ['b', 'c', 'd', 'e'] Default is length of the list if end index is omitted&lt;/td&gt;
  &lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;slice. Both index missing &lt;/td&gt;
    &lt;td&gt;l[:]&lt;/td&gt;
    &lt;td&gt; ['a','b','c','d','e'] &lt;/td&gt;
  &lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;Index of first occurrence of a char.  &lt;/td&gt;
    &lt;td&gt;print(l.index('d'))&lt;/td&gt;
    &lt;td&gt; 3 &lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;
== Code as given by Vidya ==
&lt;pre&gt;
import string

def remove_matching_letter(l1,l2) :
    for i in range(len(l1)) :
        for j in range(len(l2)):
            if l1[i] == l2[j] :
                c = l1[i]
                l1.remove(c)
                l2.remove(c)
                l = l1 + ['*'] +l2
                return[l,True]
    l = l1+['*']+l2
    return[l,False]


p1 = input(&quot;Enter first person name:&quot;)
p1 = p1.lower()
p1=  p1.replace(&quot; &quot;,&quot;&quot;)

p2 = input(&quot;Enter Second person name:&quot;)
p2 = p2.lower()
p2 =  p2.replace(&quot; &quot;,&quot;&quot;)

l1 = list(p1)
l2 = list(p2)

proceed = True
while proceed:
    [con_list,proceed] = remove_matching_letter(l1,l2)
    star_index = con_list.index('*')
    l1 = con_list[:star_index]
    l2 = con_list[star_index+1:]
    
count = len(l1) + len(l2)
result = ['Friends','Love','Affection','Marriage','Enemy','Sibling']

while len(result) &gt; 1 :
    split_index = (count%len(result)) -1
    if split_index &gt;= 0 :
        right = result[split_index + 1 :]
        left = result[:split_index]
        result = right + left
    else :
        result = result[:len(result) -1]
print(result[0])
&lt;/pre&gt;

Output:

[[File:flameOutput.png]]

= Image Compression =
Suppose you have a web page with lots of images.  It will take more time to download.  To make downloading faster, either you remove the images or reduce the size of the images.  Both methods will not give a good or required result.  Instead you can do &lt;b&gt; Image Compression&lt;/b&gt;
==NumPy Module==
NumPy is a module for Python. The name is an acronym for &quot;Numeric Python&quot;. It enriches Python with powerful data structures, implementing multi-dimensional arrays and matrices. To work with Artificial Intelligence, Machine Learning or Deep Learning NumPy is required.

&lt;b&gt; How is it superior to List &lt;/b&gt;
Operations on numpy arrays and matrices are easier than Lists.
Consider  the following

cvalues = [22.1, 22.8, 21.9, 22.5, 22.7, 22.3, 21.8, 21.2, 22.9, 22.1]

C = np.array(cvalues)

We would like to find the values into degrees Fahrenheit. This can be easily accomplished using a simple scalar multiplication:

print(C * 9 / 5 + 32)

Using Lists, it should have been

 fvalues = [ x*9/5 + 32 for x in cvalues] 

&lt;b&gt; Operations on numpy &lt;/b&gt;
&lt;table width=&quot;200&quot; border=&quot;1&quot;&gt;
  &lt;tr&gt;
    &lt;th scope=&quot;col&quot;&gt;Operations&lt;/th&gt;
    &lt;th scope=&quot;col&quot;&gt;Descriptions&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;import numpy as np &lt;/td&gt;
    &lt;td&gt;numpy is imported and can be accessed with a short name np&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;a=np.array([1,2,3])&lt;/td&gt;
    &lt;td&gt;One dimensional array 'a' is created&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;print(type(a))&lt;/td&gt;
    &lt;td&gt;&lt;class 'numpy.ndarray'&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;print(a.shape)&lt;/td&gt;
    &lt;td&gt;(3,)&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;print (a[0],a[1],a[2])&lt;/td&gt;
    &lt;td&gt;1 2 3&lt;/td&gt;
  &lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;b=np.array([[1,2,3],[4,5,6]])&lt;/td&gt;
    &lt;td&gt;Two dimensional array 'b' is created&lt;/td&gt;
  &lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;print(b.shape)&lt;/td&gt;
    &lt;td&gt;(2,3)&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;
[[#Top]]
=== NumPy Examples ===
importing numpy module is common to following examples.
&lt;pre&gt;import numpy as np&lt;/pre&gt;

'''Example: Print NumPy Array'''
&lt;pre&gt;
#pass list as argument to np.array
a=np.array([1,2,3])
print(a)
#Output: [1 2 3]
&lt;/pre&gt;

'''Example: Print type of numpy array'''
&lt;pre&gt;
#type of numpy array
print(type(a))
#Output: &lt;class 'numpy.ndarray'&gt;
&lt;/pre&gt;

'''Example: Print shape i.e.size of numpy array'''
&lt;pre&gt;
#shape of numpy array
print(a.shape)
#Output: (3,)
&lt;/pre&gt;

'''Example: Print elements of numpy using indexes'''
&lt;pre&gt;
#print elements of numpy using indexes
print(a[0], a[1], a[2])
#Output: 1 2 3
&lt;/pre&gt;

'''Example: Print shape of array: rows and columns'''
&lt;pre&gt;
b=np.array([[1,2,3],[4,5,6]])
print(b.shape)
#Output: (2, 3) - 2 rows and 3 columns
&lt;/pre&gt;

''' Example: array of '0' '''
&lt;pre&gt;
#array of '0'
a=np.zeros((2,2))
print(a)
'''Output:
[[0. 0.]
 [0. 0.]]'''

#array of '1'
b= np.ones((2,2))
print(b)
'''Output:
[[1. 1.]
 [1. 1.]]'''

#2x2 array of 6
c= np.full((2,2),6)
print(c)
'''Output:
[[6 6]
 [6 6]]'''

#2x2 array of random number
d=np.random.random((2,2))
print(d)
'''Output:
 [[0.45937293 0.72546193]
 [0.28374715 0.63269858]]'''
 

&lt;/pre&gt;</text>
      <sha1>k6l4b1ia0xcadrff8okuze697zy7xfk</sha1>
    </revision>
    <revision>
      <id>3993</id>
      <parentid>3992</parentid>
      <timestamp>2018-10-02T06:41:49Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* NumPy Examples */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="7005">==Week 10 Download URL==
https://onlinecourses.nptel.ac.in/noc18_cs35/unit?unit=30&amp;lesson=31

=FLAMES - a Childhood play=
In childhood, we might have played a game called FLAMES to find the relationship (illusion!!) between a boy and a girl.  

All you have to do is

&lt;b&gt; Steps : &lt;/b&gt;
 1. write their names and strike out the common characters that occur in both their names.
 2. Count the remaining letters (SAY X)
 3. Write the word FLAMES and start counting from F and strike out the X&lt;sup&gt;th&lt;/sup&gt; letter till only one character remains
 4. If it is F - then the two are Friends. L - Love, A - Affection,  M - Marriage  E- Enemy S- Sister

&lt;table width=&quot;449&quot; height=&quot;116&quot; border=&quot;1&quot;&gt;
 &lt;tr&gt;
    &lt;td&gt;[[File:Flamestep1.JPG|300px]]&lt;/td&gt;
    &lt;td&gt;[[File:Flamestep2.JPG|300px]]&lt;/td&gt;
    &lt;td&gt;[[File:flamestep3.JPG|300px]]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td width = 200&gt;Remaining No. of Characters = 7&lt;/td&gt;
    &lt;td width = 200&gt;Counting from F, wrap over and strike the 7&lt;SUP&gt;th&lt;/SUP&gt; letter&lt;/td&gt;
    &lt;td width = 200&gt;The remaining letter denotes the relationship&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;
== Refresh the operations on Strings and Lists ==
&lt;table width=&quot;200&quot; border=&quot;1&quot;&gt;
  &lt;tr&gt;
    &lt;th scope=&quot;col&quot; width=100&gt;Functions&lt;/th&gt;
    &lt;th scope=&quot;col&quot; width=100&gt;Example&lt;/th&gt;
    &lt;th scope=&quot;col&quot; width=100&gt;Result&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;import &lt;/td&gt;
    &lt;td&gt;import string&lt;/td&gt;
    &lt;td&gt;import string module&lt;/td&gt;
  &lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;input a string&lt;/td&gt;
    &lt;td&gt;s = input()&lt;/td&gt;
    &lt;td&gt;input a string to the variable s&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Convert to lower case&lt;/td&gt;
    &lt;td&gt;print(s.lower())&lt;/td&gt;
    &lt;td &gt; raj &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Convert to upper case&lt;/td&gt;
    &lt;td&gt;print(s.upper())&lt;/td&gt;
    &lt;td&gt; RAJ&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Convert the string to list&lt;/td&gt;
    &lt;td&gt;s1 = list(s)&lt;/td&gt;
    &lt;td&gt;s1 will be ['R','a','j']&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Replace a character&lt;/td&gt;
    &lt;td&gt;print(s.replace(&quot;j&quot;,&quot;#&quot;))&lt;/td&gt;
    &lt;td&gt;'Ra#' .Note: the content of s is not changed.&lt;/td&gt;
  &lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;Replace more than one character&lt;/td&gt;
    &lt;td&gt;print(s.replace(&quot;aj&quot;,&quot;#&quot;))&lt;/td&gt;
    &lt;td&gt;'R#'&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;slice. l = ['a','b','c','d','e']&lt;/td&gt;
    &lt;td&gt;l[1:4]&lt;/td&gt;
    &lt;td&gt;['b', 'c', 'd'] &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;slice. Start index is missing &lt;/td&gt;
    &lt;td&gt;l[:4]&lt;/td&gt;
    &lt;td&gt; ['a', 'b', 'c', 'd']  Default is 0 if start index is omitted &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;slice. End index is missing &lt;/td&gt;
    &lt;td&gt;l[1:]&lt;/td&gt;
    &lt;td&gt; ['b', 'c', 'd', 'e'] Default is length of the list if end index is omitted&lt;/td&gt;
  &lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;slice. Both index missing &lt;/td&gt;
    &lt;td&gt;l[:]&lt;/td&gt;
    &lt;td&gt; ['a','b','c','d','e'] &lt;/td&gt;
  &lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;Index of first occurrence of a char.  &lt;/td&gt;
    &lt;td&gt;print(l.index('d'))&lt;/td&gt;
    &lt;td&gt; 3 &lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;
== Code as given by Vidya ==
&lt;pre&gt;
import string

def remove_matching_letter(l1,l2) :
    for i in range(len(l1)) :
        for j in range(len(l2)):
            if l1[i] == l2[j] :
                c = l1[i]
                l1.remove(c)
                l2.remove(c)
                l = l1 + ['*'] +l2
                return[l,True]
    l = l1+['*']+l2
    return[l,False]


p1 = input(&quot;Enter first person name:&quot;)
p1 = p1.lower()
p1=  p1.replace(&quot; &quot;,&quot;&quot;)

p2 = input(&quot;Enter Second person name:&quot;)
p2 = p2.lower()
p2 =  p2.replace(&quot; &quot;,&quot;&quot;)

l1 = list(p1)
l2 = list(p2)

proceed = True
while proceed:
    [con_list,proceed] = remove_matching_letter(l1,l2)
    star_index = con_list.index('*')
    l1 = con_list[:star_index]
    l2 = con_list[star_index+1:]
    
count = len(l1) + len(l2)
result = ['Friends','Love','Affection','Marriage','Enemy','Sibling']

while len(result) &gt; 1 :
    split_index = (count%len(result)) -1
    if split_index &gt;= 0 :
        right = result[split_index + 1 :]
        left = result[:split_index]
        result = right + left
    else :
        result = result[:len(result) -1]
print(result[0])
&lt;/pre&gt;

Output:

[[File:flameOutput.png]]

= Image Compression =
Suppose you have a web page with lots of images.  It will take more time to download.  To make downloading faster, either you remove the images or reduce the size of the images.  Both methods will not give a good or required result.  Instead you can do &lt;b&gt; Image Compression&lt;/b&gt;
==NumPy Module==
NumPy is a module for Python. The name is an acronym for &quot;Numeric Python&quot;. It enriches Python with powerful data structures, implementing multi-dimensional arrays and matrices. To work with Artificial Intelligence, Machine Learning or Deep Learning NumPy is required.

&lt;b&gt; How is it superior to List &lt;/b&gt;
Operations on numpy arrays and matrices are easier than Lists.
Consider  the following

cvalues = [22.1, 22.8, 21.9, 22.5, 22.7, 22.3, 21.8, 21.2, 22.9, 22.1]

C = np.array(cvalues)

We would like to find the values into degrees Fahrenheit. This can be easily accomplished using a simple scalar multiplication:

print(C * 9 / 5 + 32)

Using Lists, it should have been

 fvalues = [ x*9/5 + 32 for x in cvalues] 

&lt;b&gt; Operations on numpy &lt;/b&gt;
&lt;table width=&quot;200&quot; border=&quot;1&quot;&gt;
  &lt;tr&gt;
    &lt;th scope=&quot;col&quot;&gt;Operations&lt;/th&gt;
    &lt;th scope=&quot;col&quot;&gt;Descriptions&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;import numpy as np &lt;/td&gt;
    &lt;td&gt;numpy is imported and can be accessed with a short name np&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;a=np.array([1,2,3])&lt;/td&gt;
    &lt;td&gt;One dimensional array 'a' is created&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;print(type(a))&lt;/td&gt;
    &lt;td&gt;&lt;class 'numpy.ndarray'&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;print(a.shape)&lt;/td&gt;
    &lt;td&gt;(3,)&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;print (a[0],a[1],a[2])&lt;/td&gt;
    &lt;td&gt;1 2 3&lt;/td&gt;
  &lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;b=np.array([[1,2,3],[4,5,6]])&lt;/td&gt;
    &lt;td&gt;Two dimensional array 'b' is created&lt;/td&gt;
  &lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;print(b.shape)&lt;/td&gt;
    &lt;td&gt;(2,3)&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;
[[#Top]]
=== NumPy Examples ===
importing numpy module is common to following examples.
&lt;pre&gt;import numpy as np&lt;/pre&gt;

'''Example: Print NumPy Array'''
&lt;pre&gt;
#pass list as argument to np.array
a=np.array([1,2,3])
print(a)
#Output: [1 2 3]
&lt;/pre&gt;

'''Example: Print type of numpy array'''
&lt;pre&gt;
#type of numpy array
print(type(a))
#Output: &lt;class 'numpy.ndarray'&gt;
&lt;/pre&gt;

'''Example: Print shape i.e.size of numpy array'''
&lt;pre&gt;
#shape of numpy array
print(a.shape)
#Output: (3,)
&lt;/pre&gt;

'''Example: Print elements of numpy using indexes'''
&lt;pre&gt;
#print elements of numpy using indexes
print(a[0], a[1], a[2])
#Output: 1 2 3
&lt;/pre&gt;

'''Example: Print shape of array: rows and columns'''
&lt;pre&gt;
b=np.array([[1,2,3],[4,5,6]])
print(b.shape)
#Output: (2, 3) - 2 rows and 3 columns
&lt;/pre&gt;

''' Example: 2x2 array of '0' '''
&lt;pre&gt;
#array of '0'
a=np.zeros((2,2))
print(a)
'''Output:
[[0. 0.]
 [0. 0.]]'''
&lt;/pre&gt;

''' Example: 2x2 array of '1' '''
&lt;pre&gt;
#array of '1'
b= np.ones((2,2))
print(b)
'''Output:
[[1. 1.]
 [1. 1.]]'''
&lt;/pre&gt;

''' Example: 2x2 array of '6' '''
&lt;pre&gt;
#2x2 array of 6
c= np.full((2,2),6)
print(c)
'''Output:
[[6 6]
 [6 6]]'''
&lt;/pre&gt;

&lt;pre&gt;
#2x2 array of random number
d=np.random.random((2,2))
print(d)
'''Output:
 [[0.45937293 0.72546193]
 [0.28374715 0.63269858]]'''
 

&lt;/pre&gt;</text>
      <sha1>7y5o28ru7ggqk1zantu9uroyzefj5m5</sha1>
    </revision>
    <revision>
      <id>3994</id>
      <parentid>3993</parentid>
      <timestamp>2018-10-02T06:42:26Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* NumPy Examples */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="7046">==Week 10 Download URL==
https://onlinecourses.nptel.ac.in/noc18_cs35/unit?unit=30&amp;lesson=31

=FLAMES - a Childhood play=
In childhood, we might have played a game called FLAMES to find the relationship (illusion!!) between a boy and a girl.  

All you have to do is

&lt;b&gt; Steps : &lt;/b&gt;
 1. write their names and strike out the common characters that occur in both their names.
 2. Count the remaining letters (SAY X)
 3. Write the word FLAMES and start counting from F and strike out the X&lt;sup&gt;th&lt;/sup&gt; letter till only one character remains
 4. If it is F - then the two are Friends. L - Love, A - Affection,  M - Marriage  E- Enemy S- Sister

&lt;table width=&quot;449&quot; height=&quot;116&quot; border=&quot;1&quot;&gt;
 &lt;tr&gt;
    &lt;td&gt;[[File:Flamestep1.JPG|300px]]&lt;/td&gt;
    &lt;td&gt;[[File:Flamestep2.JPG|300px]]&lt;/td&gt;
    &lt;td&gt;[[File:flamestep3.JPG|300px]]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td width = 200&gt;Remaining No. of Characters = 7&lt;/td&gt;
    &lt;td width = 200&gt;Counting from F, wrap over and strike the 7&lt;SUP&gt;th&lt;/SUP&gt; letter&lt;/td&gt;
    &lt;td width = 200&gt;The remaining letter denotes the relationship&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;
== Refresh the operations on Strings and Lists ==
&lt;table width=&quot;200&quot; border=&quot;1&quot;&gt;
  &lt;tr&gt;
    &lt;th scope=&quot;col&quot; width=100&gt;Functions&lt;/th&gt;
    &lt;th scope=&quot;col&quot; width=100&gt;Example&lt;/th&gt;
    &lt;th scope=&quot;col&quot; width=100&gt;Result&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;import &lt;/td&gt;
    &lt;td&gt;import string&lt;/td&gt;
    &lt;td&gt;import string module&lt;/td&gt;
  &lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;input a string&lt;/td&gt;
    &lt;td&gt;s = input()&lt;/td&gt;
    &lt;td&gt;input a string to the variable s&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Convert to lower case&lt;/td&gt;
    &lt;td&gt;print(s.lower())&lt;/td&gt;
    &lt;td &gt; raj &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Convert to upper case&lt;/td&gt;
    &lt;td&gt;print(s.upper())&lt;/td&gt;
    &lt;td&gt; RAJ&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Convert the string to list&lt;/td&gt;
    &lt;td&gt;s1 = list(s)&lt;/td&gt;
    &lt;td&gt;s1 will be ['R','a','j']&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Replace a character&lt;/td&gt;
    &lt;td&gt;print(s.replace(&quot;j&quot;,&quot;#&quot;))&lt;/td&gt;
    &lt;td&gt;'Ra#' .Note: the content of s is not changed.&lt;/td&gt;
  &lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;Replace more than one character&lt;/td&gt;
    &lt;td&gt;print(s.replace(&quot;aj&quot;,&quot;#&quot;))&lt;/td&gt;
    &lt;td&gt;'R#'&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;slice. l = ['a','b','c','d','e']&lt;/td&gt;
    &lt;td&gt;l[1:4]&lt;/td&gt;
    &lt;td&gt;['b', 'c', 'd'] &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;slice. Start index is missing &lt;/td&gt;
    &lt;td&gt;l[:4]&lt;/td&gt;
    &lt;td&gt; ['a', 'b', 'c', 'd']  Default is 0 if start index is omitted &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;slice. End index is missing &lt;/td&gt;
    &lt;td&gt;l[1:]&lt;/td&gt;
    &lt;td&gt; ['b', 'c', 'd', 'e'] Default is length of the list if end index is omitted&lt;/td&gt;
  &lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;slice. Both index missing &lt;/td&gt;
    &lt;td&gt;l[:]&lt;/td&gt;
    &lt;td&gt; ['a','b','c','d','e'] &lt;/td&gt;
  &lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;Index of first occurrence of a char.  &lt;/td&gt;
    &lt;td&gt;print(l.index('d'))&lt;/td&gt;
    &lt;td&gt; 3 &lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;
== Code as given by Vidya ==
&lt;pre&gt;
import string

def remove_matching_letter(l1,l2) :
    for i in range(len(l1)) :
        for j in range(len(l2)):
            if l1[i] == l2[j] :
                c = l1[i]
                l1.remove(c)
                l2.remove(c)
                l = l1 + ['*'] +l2
                return[l,True]
    l = l1+['*']+l2
    return[l,False]


p1 = input(&quot;Enter first person name:&quot;)
p1 = p1.lower()
p1=  p1.replace(&quot; &quot;,&quot;&quot;)

p2 = input(&quot;Enter Second person name:&quot;)
p2 = p2.lower()
p2 =  p2.replace(&quot; &quot;,&quot;&quot;)

l1 = list(p1)
l2 = list(p2)

proceed = True
while proceed:
    [con_list,proceed] = remove_matching_letter(l1,l2)
    star_index = con_list.index('*')
    l1 = con_list[:star_index]
    l2 = con_list[star_index+1:]
    
count = len(l1) + len(l2)
result = ['Friends','Love','Affection','Marriage','Enemy','Sibling']

while len(result) &gt; 1 :
    split_index = (count%len(result)) -1
    if split_index &gt;= 0 :
        right = result[split_index + 1 :]
        left = result[:split_index]
        result = right + left
    else :
        result = result[:len(result) -1]
print(result[0])
&lt;/pre&gt;

Output:

[[File:flameOutput.png]]

= Image Compression =
Suppose you have a web page with lots of images.  It will take more time to download.  To make downloading faster, either you remove the images or reduce the size of the images.  Both methods will not give a good or required result.  Instead you can do &lt;b&gt; Image Compression&lt;/b&gt;
==NumPy Module==
NumPy is a module for Python. The name is an acronym for &quot;Numeric Python&quot;. It enriches Python with powerful data structures, implementing multi-dimensional arrays and matrices. To work with Artificial Intelligence, Machine Learning or Deep Learning NumPy is required.

&lt;b&gt; How is it superior to List &lt;/b&gt;
Operations on numpy arrays and matrices are easier than Lists.
Consider  the following

cvalues = [22.1, 22.8, 21.9, 22.5, 22.7, 22.3, 21.8, 21.2, 22.9, 22.1]

C = np.array(cvalues)

We would like to find the values into degrees Fahrenheit. This can be easily accomplished using a simple scalar multiplication:

print(C * 9 / 5 + 32)

Using Lists, it should have been

 fvalues = [ x*9/5 + 32 for x in cvalues] 

&lt;b&gt; Operations on numpy &lt;/b&gt;
&lt;table width=&quot;200&quot; border=&quot;1&quot;&gt;
  &lt;tr&gt;
    &lt;th scope=&quot;col&quot;&gt;Operations&lt;/th&gt;
    &lt;th scope=&quot;col&quot;&gt;Descriptions&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;import numpy as np &lt;/td&gt;
    &lt;td&gt;numpy is imported and can be accessed with a short name np&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;a=np.array([1,2,3])&lt;/td&gt;
    &lt;td&gt;One dimensional array 'a' is created&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;print(type(a))&lt;/td&gt;
    &lt;td&gt;&lt;class 'numpy.ndarray'&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;print(a.shape)&lt;/td&gt;
    &lt;td&gt;(3,)&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;print (a[0],a[1],a[2])&lt;/td&gt;
    &lt;td&gt;1 2 3&lt;/td&gt;
  &lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;b=np.array([[1,2,3],[4,5,6]])&lt;/td&gt;
    &lt;td&gt;Two dimensional array 'b' is created&lt;/td&gt;
  &lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;print(b.shape)&lt;/td&gt;
    &lt;td&gt;(2,3)&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;
[[#Top]]
=== NumPy Examples ===
importing numpy module is common to following examples.
&lt;pre&gt;import numpy as np&lt;/pre&gt;

'''Example: Print NumPy Array'''
&lt;pre&gt;
#pass list as argument to np.array
a=np.array([1,2,3])
print(a)
#Output: [1 2 3]
&lt;/pre&gt;

'''Example: Print type of numpy array'''
&lt;pre&gt;
#type of numpy array
print(type(a))
#Output: &lt;class 'numpy.ndarray'&gt;
&lt;/pre&gt;

'''Example: Print shape i.e.size of numpy array'''
&lt;pre&gt;
#shape of numpy array
print(a.shape)
#Output: (3,)
&lt;/pre&gt;

'''Example: Print elements of numpy using indexes'''
&lt;pre&gt;
#print elements of numpy using indexes
print(a[0], a[1], a[2])
#Output: 1 2 3
&lt;/pre&gt;

'''Example: Print shape of array: rows and columns'''
&lt;pre&gt;
b=np.array([[1,2,3],[4,5,6]])
print(b.shape)
#Output: (2, 3) - 2 rows and 3 columns
&lt;/pre&gt;

''' Example: 2x2 array of '0' '''
&lt;pre&gt;
#array of '0'
a=np.zeros((2,2))
print(a)
'''Output:
[[0. 0.]
 [0. 0.]]'''
&lt;/pre&gt;

''' Example: 2x2 array of '1' '''
&lt;pre&gt;
#array of '1'
b= np.ones((2,2))
print(b)
'''Output:
[[1. 1.]
 [1. 1.]]'''
&lt;/pre&gt;

''' Example: 2x2 array of '6' '''
&lt;pre&gt;
#2x2 array of 6
c= np.full((2,2),6)
print(c)
'''Output:
[[6 6]
 [6 6]]'''
&lt;/pre&gt;

''' Example: 2x2 array of random number '''
&lt;pre&gt;
#2x2 array of random number
d=np.random.random((2,2))
print(d)
'''Output:
 [[0.45937293 0.72546193]
 [0.28374715 0.63269858]]'''
&lt;/pre&gt;</text>
      <sha1>efita3uaa8f00l5qke00fys4w42salp</sha1>
    </revision>
    <revision>
      <id>3995</id>
      <parentid>3994</parentid>
      <timestamp>2018-10-02T08:45:59Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* NumPy Examples */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="7291">==Week 10 Download URL==
https://onlinecourses.nptel.ac.in/noc18_cs35/unit?unit=30&amp;lesson=31

=FLAMES - a Childhood play=
In childhood, we might have played a game called FLAMES to find the relationship (illusion!!) between a boy and a girl.  

All you have to do is

&lt;b&gt; Steps : &lt;/b&gt;
 1. write their names and strike out the common characters that occur in both their names.
 2. Count the remaining letters (SAY X)
 3. Write the word FLAMES and start counting from F and strike out the X&lt;sup&gt;th&lt;/sup&gt; letter till only one character remains
 4. If it is F - then the two are Friends. L - Love, A - Affection,  M - Marriage  E- Enemy S- Sister

&lt;table width=&quot;449&quot; height=&quot;116&quot; border=&quot;1&quot;&gt;
 &lt;tr&gt;
    &lt;td&gt;[[File:Flamestep1.JPG|300px]]&lt;/td&gt;
    &lt;td&gt;[[File:Flamestep2.JPG|300px]]&lt;/td&gt;
    &lt;td&gt;[[File:flamestep3.JPG|300px]]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td width = 200&gt;Remaining No. of Characters = 7&lt;/td&gt;
    &lt;td width = 200&gt;Counting from F, wrap over and strike the 7&lt;SUP&gt;th&lt;/SUP&gt; letter&lt;/td&gt;
    &lt;td width = 200&gt;The remaining letter denotes the relationship&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;
== Refresh the operations on Strings and Lists ==
&lt;table width=&quot;200&quot; border=&quot;1&quot;&gt;
  &lt;tr&gt;
    &lt;th scope=&quot;col&quot; width=100&gt;Functions&lt;/th&gt;
    &lt;th scope=&quot;col&quot; width=100&gt;Example&lt;/th&gt;
    &lt;th scope=&quot;col&quot; width=100&gt;Result&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;import &lt;/td&gt;
    &lt;td&gt;import string&lt;/td&gt;
    &lt;td&gt;import string module&lt;/td&gt;
  &lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;input a string&lt;/td&gt;
    &lt;td&gt;s = input()&lt;/td&gt;
    &lt;td&gt;input a string to the variable s&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Convert to lower case&lt;/td&gt;
    &lt;td&gt;print(s.lower())&lt;/td&gt;
    &lt;td &gt; raj &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Convert to upper case&lt;/td&gt;
    &lt;td&gt;print(s.upper())&lt;/td&gt;
    &lt;td&gt; RAJ&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Convert the string to list&lt;/td&gt;
    &lt;td&gt;s1 = list(s)&lt;/td&gt;
    &lt;td&gt;s1 will be ['R','a','j']&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Replace a character&lt;/td&gt;
    &lt;td&gt;print(s.replace(&quot;j&quot;,&quot;#&quot;))&lt;/td&gt;
    &lt;td&gt;'Ra#' .Note: the content of s is not changed.&lt;/td&gt;
  &lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;Replace more than one character&lt;/td&gt;
    &lt;td&gt;print(s.replace(&quot;aj&quot;,&quot;#&quot;))&lt;/td&gt;
    &lt;td&gt;'R#'&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;slice. l = ['a','b','c','d','e']&lt;/td&gt;
    &lt;td&gt;l[1:4]&lt;/td&gt;
    &lt;td&gt;['b', 'c', 'd'] &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;slice. Start index is missing &lt;/td&gt;
    &lt;td&gt;l[:4]&lt;/td&gt;
    &lt;td&gt; ['a', 'b', 'c', 'd']  Default is 0 if start index is omitted &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;slice. End index is missing &lt;/td&gt;
    &lt;td&gt;l[1:]&lt;/td&gt;
    &lt;td&gt; ['b', 'c', 'd', 'e'] Default is length of the list if end index is omitted&lt;/td&gt;
  &lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;slice. Both index missing &lt;/td&gt;
    &lt;td&gt;l[:]&lt;/td&gt;
    &lt;td&gt; ['a','b','c','d','e'] &lt;/td&gt;
  &lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;Index of first occurrence of a char.  &lt;/td&gt;
    &lt;td&gt;print(l.index('d'))&lt;/td&gt;
    &lt;td&gt; 3 &lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;
== Code as given by Vidya ==
&lt;pre&gt;
import string

def remove_matching_letter(l1,l2) :
    for i in range(len(l1)) :
        for j in range(len(l2)):
            if l1[i] == l2[j] :
                c = l1[i]
                l1.remove(c)
                l2.remove(c)
                l = l1 + ['*'] +l2
                return[l,True]
    l = l1+['*']+l2
    return[l,False]


p1 = input(&quot;Enter first person name:&quot;)
p1 = p1.lower()
p1=  p1.replace(&quot; &quot;,&quot;&quot;)

p2 = input(&quot;Enter Second person name:&quot;)
p2 = p2.lower()
p2 =  p2.replace(&quot; &quot;,&quot;&quot;)

l1 = list(p1)
l2 = list(p2)

proceed = True
while proceed:
    [con_list,proceed] = remove_matching_letter(l1,l2)
    star_index = con_list.index('*')
    l1 = con_list[:star_index]
    l2 = con_list[star_index+1:]
    
count = len(l1) + len(l2)
result = ['Friends','Love','Affection','Marriage','Enemy','Sibling']

while len(result) &gt; 1 :
    split_index = (count%len(result)) -1
    if split_index &gt;= 0 :
        right = result[split_index + 1 :]
        left = result[:split_index]
        result = right + left
    else :
        result = result[:len(result) -1]
print(result[0])
&lt;/pre&gt;

Output:

[[File:flameOutput.png]]

= Image Compression =
Suppose you have a web page with lots of images.  It will take more time to download.  To make downloading faster, either you remove the images or reduce the size of the images.  Both methods will not give a good or required result.  Instead you can do &lt;b&gt; Image Compression&lt;/b&gt;
==NumPy Module==
NumPy is a module for Python. The name is an acronym for &quot;Numeric Python&quot;. It enriches Python with powerful data structures, implementing multi-dimensional arrays and matrices. To work with Artificial Intelligence, Machine Learning or Deep Learning NumPy is required.

&lt;b&gt; How is it superior to List &lt;/b&gt;
Operations on numpy arrays and matrices are easier than Lists.
Consider  the following

cvalues = [22.1, 22.8, 21.9, 22.5, 22.7, 22.3, 21.8, 21.2, 22.9, 22.1]

C = np.array(cvalues)

We would like to find the values into degrees Fahrenheit. This can be easily accomplished using a simple scalar multiplication:

print(C * 9 / 5 + 32)

Using Lists, it should have been

 fvalues = [ x*9/5 + 32 for x in cvalues] 

&lt;b&gt; Operations on numpy &lt;/b&gt;
&lt;table width=&quot;200&quot; border=&quot;1&quot;&gt;
  &lt;tr&gt;
    &lt;th scope=&quot;col&quot;&gt;Operations&lt;/th&gt;
    &lt;th scope=&quot;col&quot;&gt;Descriptions&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;import numpy as np &lt;/td&gt;
    &lt;td&gt;numpy is imported and can be accessed with a short name np&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;a=np.array([1,2,3])&lt;/td&gt;
    &lt;td&gt;One dimensional array 'a' is created&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;print(type(a))&lt;/td&gt;
    &lt;td&gt;&lt;class 'numpy.ndarray'&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;print(a.shape)&lt;/td&gt;
    &lt;td&gt;(3,)&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;print (a[0],a[1],a[2])&lt;/td&gt;
    &lt;td&gt;1 2 3&lt;/td&gt;
  &lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;b=np.array([[1,2,3],[4,5,6]])&lt;/td&gt;
    &lt;td&gt;Two dimensional array 'b' is created&lt;/td&gt;
  &lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;print(b.shape)&lt;/td&gt;
    &lt;td&gt;(2,3)&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;
[[#Top]]
=== NumPy Examples ===
importing numpy module is common to following examples.
&lt;pre&gt;import numpy as np&lt;/pre&gt;

'''Example: Print NumPy Array'''
&lt;pre&gt;
#pass list as argument to np.array
a=np.array([1,2,3])
print(a)
#Output: [1 2 3]
&lt;/pre&gt;

'''Example: Print type of numpy array'''
&lt;pre&gt;
#type of numpy array
print(type(a))
#Output: &lt;class 'numpy.ndarray'&gt;
&lt;/pre&gt;

'''Example: Print shape i.e.size of numpy array'''
&lt;pre&gt;
#shape of numpy array
print(a.shape)
#Output: (3,)
&lt;/pre&gt;

'''Example: Print elements of numpy using indexes'''
&lt;pre&gt;
#print elements of numpy using indexes
print(a[0], a[1], a[2])
#Output: 1 2 3
&lt;/pre&gt;

'''Example: Print shape of array: rows and columns'''
&lt;pre&gt;
b=np.array([[1,2,3],[4,5,6]])
print(b.shape)
#Output: (2, 3) - 2 rows and 3 columns
&lt;/pre&gt;

''' Example: 2x2 array of '0' '''
&lt;pre&gt;
#array of '0'
a=np.zeros((2,2))
print(a)
'''Output:
[[0. 0.]
 [0. 0.]]'''
&lt;/pre&gt;

''' Example: 2x2 array of '1' '''
&lt;pre&gt;
#array of '1'
b= np.ones((2,2))
print(b)
'''Output:
[[1. 1.]
 [1. 1.]]'''
&lt;/pre&gt;

''' Example: 2x2 array of '6' '''
&lt;pre&gt;
#2x2 array of 6
c= np.full((2,2),6)
print(c)
'''Output:
[[6 6]
 [6 6]]'''
&lt;/pre&gt;

''' Example: 2x2 array of random number '''
&lt;pre&gt;
#2x2 array of random number
d=np.random.random((2,2))
print(d)
'''Output:
 [[0.45937293 0.72546193]
 [0.28374715 0.63269858]]'''
&lt;/pre&gt;

'''Example: Data type of array'''
&lt;pre&gt;
x=np.array([1,2])

#data type of x
print(x.dtype)
#Output : int32
&lt;/pre&gt;
&lt;pre&gt;
y=np.array([1.2,3])
print(y.dtype)
#Output: float64


x=np.array([1,2], dtype=np.int64)
print(x.dtype)
#Output: int64
&lt;/pre&gt;</text>
      <sha1>sra4q1dg1zt6ptmj3tl5rty2eh6di2v</sha1>
    </revision>
    <revision>
      <id>3996</id>
      <parentid>3995</parentid>
      <timestamp>2018-10-02T08:47:14Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* NumPy Examples */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="7352">==Week 10 Download URL==
https://onlinecourses.nptel.ac.in/noc18_cs35/unit?unit=30&amp;lesson=31

=FLAMES - a Childhood play=
In childhood, we might have played a game called FLAMES to find the relationship (illusion!!) between a boy and a girl.  

All you have to do is

&lt;b&gt; Steps : &lt;/b&gt;
 1. write their names and strike out the common characters that occur in both their names.
 2. Count the remaining letters (SAY X)
 3. Write the word FLAMES and start counting from F and strike out the X&lt;sup&gt;th&lt;/sup&gt; letter till only one character remains
 4. If it is F - then the two are Friends. L - Love, A - Affection,  M - Marriage  E- Enemy S- Sister

&lt;table width=&quot;449&quot; height=&quot;116&quot; border=&quot;1&quot;&gt;
 &lt;tr&gt;
    &lt;td&gt;[[File:Flamestep1.JPG|300px]]&lt;/td&gt;
    &lt;td&gt;[[File:Flamestep2.JPG|300px]]&lt;/td&gt;
    &lt;td&gt;[[File:flamestep3.JPG|300px]]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td width = 200&gt;Remaining No. of Characters = 7&lt;/td&gt;
    &lt;td width = 200&gt;Counting from F, wrap over and strike the 7&lt;SUP&gt;th&lt;/SUP&gt; letter&lt;/td&gt;
    &lt;td width = 200&gt;The remaining letter denotes the relationship&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;
== Refresh the operations on Strings and Lists ==
&lt;table width=&quot;200&quot; border=&quot;1&quot;&gt;
  &lt;tr&gt;
    &lt;th scope=&quot;col&quot; width=100&gt;Functions&lt;/th&gt;
    &lt;th scope=&quot;col&quot; width=100&gt;Example&lt;/th&gt;
    &lt;th scope=&quot;col&quot; width=100&gt;Result&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;import &lt;/td&gt;
    &lt;td&gt;import string&lt;/td&gt;
    &lt;td&gt;import string module&lt;/td&gt;
  &lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;input a string&lt;/td&gt;
    &lt;td&gt;s = input()&lt;/td&gt;
    &lt;td&gt;input a string to the variable s&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Convert to lower case&lt;/td&gt;
    &lt;td&gt;print(s.lower())&lt;/td&gt;
    &lt;td &gt; raj &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Convert to upper case&lt;/td&gt;
    &lt;td&gt;print(s.upper())&lt;/td&gt;
    &lt;td&gt; RAJ&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Convert the string to list&lt;/td&gt;
    &lt;td&gt;s1 = list(s)&lt;/td&gt;
    &lt;td&gt;s1 will be ['R','a','j']&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Replace a character&lt;/td&gt;
    &lt;td&gt;print(s.replace(&quot;j&quot;,&quot;#&quot;))&lt;/td&gt;
    &lt;td&gt;'Ra#' .Note: the content of s is not changed.&lt;/td&gt;
  &lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;Replace more than one character&lt;/td&gt;
    &lt;td&gt;print(s.replace(&quot;aj&quot;,&quot;#&quot;))&lt;/td&gt;
    &lt;td&gt;'R#'&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;slice. l = ['a','b','c','d','e']&lt;/td&gt;
    &lt;td&gt;l[1:4]&lt;/td&gt;
    &lt;td&gt;['b', 'c', 'd'] &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;slice. Start index is missing &lt;/td&gt;
    &lt;td&gt;l[:4]&lt;/td&gt;
    &lt;td&gt; ['a', 'b', 'c', 'd']  Default is 0 if start index is omitted &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;slice. End index is missing &lt;/td&gt;
    &lt;td&gt;l[1:]&lt;/td&gt;
    &lt;td&gt; ['b', 'c', 'd', 'e'] Default is length of the list if end index is omitted&lt;/td&gt;
  &lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;slice. Both index missing &lt;/td&gt;
    &lt;td&gt;l[:]&lt;/td&gt;
    &lt;td&gt; ['a','b','c','d','e'] &lt;/td&gt;
  &lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;Index of first occurrence of a char.  &lt;/td&gt;
    &lt;td&gt;print(l.index('d'))&lt;/td&gt;
    &lt;td&gt; 3 &lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;
== Code as given by Vidya ==
&lt;pre&gt;
import string

def remove_matching_letter(l1,l2) :
    for i in range(len(l1)) :
        for j in range(len(l2)):
            if l1[i] == l2[j] :
                c = l1[i]
                l1.remove(c)
                l2.remove(c)
                l = l1 + ['*'] +l2
                return[l,True]
    l = l1+['*']+l2
    return[l,False]


p1 = input(&quot;Enter first person name:&quot;)
p1 = p1.lower()
p1=  p1.replace(&quot; &quot;,&quot;&quot;)

p2 = input(&quot;Enter Second person name:&quot;)
p2 = p2.lower()
p2 =  p2.replace(&quot; &quot;,&quot;&quot;)

l1 = list(p1)
l2 = list(p2)

proceed = True
while proceed:
    [con_list,proceed] = remove_matching_letter(l1,l2)
    star_index = con_list.index('*')
    l1 = con_list[:star_index]
    l2 = con_list[star_index+1:]
    
count = len(l1) + len(l2)
result = ['Friends','Love','Affection','Marriage','Enemy','Sibling']

while len(result) &gt; 1 :
    split_index = (count%len(result)) -1
    if split_index &gt;= 0 :
        right = result[split_index + 1 :]
        left = result[:split_index]
        result = right + left
    else :
        result = result[:len(result) -1]
print(result[0])
&lt;/pre&gt;

Output:

[[File:flameOutput.png]]

= Image Compression =
Suppose you have a web page with lots of images.  It will take more time to download.  To make downloading faster, either you remove the images or reduce the size of the images.  Both methods will not give a good or required result.  Instead you can do &lt;b&gt; Image Compression&lt;/b&gt;
==NumPy Module==
NumPy is a module for Python. The name is an acronym for &quot;Numeric Python&quot;. It enriches Python with powerful data structures, implementing multi-dimensional arrays and matrices. To work with Artificial Intelligence, Machine Learning or Deep Learning NumPy is required.

&lt;b&gt; How is it superior to List &lt;/b&gt;
Operations on numpy arrays and matrices are easier than Lists.
Consider  the following

cvalues = [22.1, 22.8, 21.9, 22.5, 22.7, 22.3, 21.8, 21.2, 22.9, 22.1]

C = np.array(cvalues)

We would like to find the values into degrees Fahrenheit. This can be easily accomplished using a simple scalar multiplication:

print(C * 9 / 5 + 32)

Using Lists, it should have been

 fvalues = [ x*9/5 + 32 for x in cvalues] 

&lt;b&gt; Operations on numpy &lt;/b&gt;
&lt;table width=&quot;200&quot; border=&quot;1&quot;&gt;
  &lt;tr&gt;
    &lt;th scope=&quot;col&quot;&gt;Operations&lt;/th&gt;
    &lt;th scope=&quot;col&quot;&gt;Descriptions&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;import numpy as np &lt;/td&gt;
    &lt;td&gt;numpy is imported and can be accessed with a short name np&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;a=np.array([1,2,3])&lt;/td&gt;
    &lt;td&gt;One dimensional array 'a' is created&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;print(type(a))&lt;/td&gt;
    &lt;td&gt;&lt;class 'numpy.ndarray'&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;print(a.shape)&lt;/td&gt;
    &lt;td&gt;(3,)&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;print (a[0],a[1],a[2])&lt;/td&gt;
    &lt;td&gt;1 2 3&lt;/td&gt;
  &lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;b=np.array([[1,2,3],[4,5,6]])&lt;/td&gt;
    &lt;td&gt;Two dimensional array 'b' is created&lt;/td&gt;
  &lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;print(b.shape)&lt;/td&gt;
    &lt;td&gt;(2,3)&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;
[[#Top]]
=== NumPy Examples ===
importing numpy module is common to following examples.
&lt;pre&gt;import numpy as np&lt;/pre&gt;

'''Example: Print NumPy Array'''
&lt;pre&gt;
#pass list as argument to np.array
a=np.array([1,2,3])
print(a)
#Output: [1 2 3]
&lt;/pre&gt;

'''Example: Print type of numpy array'''
&lt;pre&gt;
#type of numpy array
print(type(a))
#Output: &lt;class 'numpy.ndarray'&gt;
&lt;/pre&gt;

'''Example: Print shape i.e.size of numpy array'''
&lt;pre&gt;
#shape of numpy array
print(a.shape)
#Output: (3,)
&lt;/pre&gt;

'''Example: Print elements of numpy using indexes'''
&lt;pre&gt;
#print elements of numpy using indexes
print(a[0], a[1], a[2])
#Output: 1 2 3
&lt;/pre&gt;

'''Example: Print shape of array: rows and columns'''
&lt;pre&gt;
b=np.array([[1,2,3],[4,5,6]])
print(b.shape)
#Output: (2, 3) - 2 rows and 3 columns
&lt;/pre&gt;

''' Example: 2x2 array of '0' '''
&lt;pre&gt;
#array of '0'
a=np.zeros((2,2))
print(a)
'''Output:
[[0. 0.]
 [0. 0.]]'''
&lt;/pre&gt;

''' Example: 2x2 array of '1' '''
&lt;pre&gt;
#array of '1'
b= np.ones((2,2))
print(b)
'''Output:
[[1. 1.]
 [1. 1.]]'''
&lt;/pre&gt;

''' Example: 2x2 array of '6' '''
&lt;pre&gt;
#2x2 array of 6
c= np.full((2,2),6)
print(c)
'''Output:
[[6 6]
 [6 6]]'''
&lt;/pre&gt;

''' Example: 2x2 array of random number '''
&lt;pre&gt;
#2x2 array of random number
d=np.random.random((2,2))
print(d)
'''Output:
 [[0.45937293 0.72546193]
 [0.28374715 0.63269858]]'''
&lt;/pre&gt;

'''Example: int32 Data type of array'''
&lt;pre&gt;
x=np.array([1,2])

#data type of x
print(x.dtype)
#Output : int32
&lt;/pre&gt;

'''Example: float64 Data type of array'''
&lt;pre&gt;
y=np.array([1.2,3])
print(y.dtype)
#Output: float64
&lt;/pre&gt;

&lt;pre&gt;
x=np.array([1,2], dtype=np.int64)
print(x.dtype)
#Output: int64
&lt;/pre&gt;</text>
      <sha1>iqr1ok4p2mx7qjs16hmtrarzawmyykc</sha1>
    </revision>
    <revision>
      <id>3997</id>
      <parentid>3996</parentid>
      <timestamp>2018-10-02T08:48:10Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* NumPy Examples */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="7416">==Week 10 Download URL==
https://onlinecourses.nptel.ac.in/noc18_cs35/unit?unit=30&amp;lesson=31

=FLAMES - a Childhood play=
In childhood, we might have played a game called FLAMES to find the relationship (illusion!!) between a boy and a girl.  

All you have to do is

&lt;b&gt; Steps : &lt;/b&gt;
 1. write their names and strike out the common characters that occur in both their names.
 2. Count the remaining letters (SAY X)
 3. Write the word FLAMES and start counting from F and strike out the X&lt;sup&gt;th&lt;/sup&gt; letter till only one character remains
 4. If it is F - then the two are Friends. L - Love, A - Affection,  M - Marriage  E- Enemy S- Sister

&lt;table width=&quot;449&quot; height=&quot;116&quot; border=&quot;1&quot;&gt;
 &lt;tr&gt;
    &lt;td&gt;[[File:Flamestep1.JPG|300px]]&lt;/td&gt;
    &lt;td&gt;[[File:Flamestep2.JPG|300px]]&lt;/td&gt;
    &lt;td&gt;[[File:flamestep3.JPG|300px]]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td width = 200&gt;Remaining No. of Characters = 7&lt;/td&gt;
    &lt;td width = 200&gt;Counting from F, wrap over and strike the 7&lt;SUP&gt;th&lt;/SUP&gt; letter&lt;/td&gt;
    &lt;td width = 200&gt;The remaining letter denotes the relationship&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;
== Refresh the operations on Strings and Lists ==
&lt;table width=&quot;200&quot; border=&quot;1&quot;&gt;
  &lt;tr&gt;
    &lt;th scope=&quot;col&quot; width=100&gt;Functions&lt;/th&gt;
    &lt;th scope=&quot;col&quot; width=100&gt;Example&lt;/th&gt;
    &lt;th scope=&quot;col&quot; width=100&gt;Result&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;import &lt;/td&gt;
    &lt;td&gt;import string&lt;/td&gt;
    &lt;td&gt;import string module&lt;/td&gt;
  &lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;input a string&lt;/td&gt;
    &lt;td&gt;s = input()&lt;/td&gt;
    &lt;td&gt;input a string to the variable s&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Convert to lower case&lt;/td&gt;
    &lt;td&gt;print(s.lower())&lt;/td&gt;
    &lt;td &gt; raj &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Convert to upper case&lt;/td&gt;
    &lt;td&gt;print(s.upper())&lt;/td&gt;
    &lt;td&gt; RAJ&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Convert the string to list&lt;/td&gt;
    &lt;td&gt;s1 = list(s)&lt;/td&gt;
    &lt;td&gt;s1 will be ['R','a','j']&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Replace a character&lt;/td&gt;
    &lt;td&gt;print(s.replace(&quot;j&quot;,&quot;#&quot;))&lt;/td&gt;
    &lt;td&gt;'Ra#' .Note: the content of s is not changed.&lt;/td&gt;
  &lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;Replace more than one character&lt;/td&gt;
    &lt;td&gt;print(s.replace(&quot;aj&quot;,&quot;#&quot;))&lt;/td&gt;
    &lt;td&gt;'R#'&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;slice. l = ['a','b','c','d','e']&lt;/td&gt;
    &lt;td&gt;l[1:4]&lt;/td&gt;
    &lt;td&gt;['b', 'c', 'd'] &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;slice. Start index is missing &lt;/td&gt;
    &lt;td&gt;l[:4]&lt;/td&gt;
    &lt;td&gt; ['a', 'b', 'c', 'd']  Default is 0 if start index is omitted &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;slice. End index is missing &lt;/td&gt;
    &lt;td&gt;l[1:]&lt;/td&gt;
    &lt;td&gt; ['b', 'c', 'd', 'e'] Default is length of the list if end index is omitted&lt;/td&gt;
  &lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;slice. Both index missing &lt;/td&gt;
    &lt;td&gt;l[:]&lt;/td&gt;
    &lt;td&gt; ['a','b','c','d','e'] &lt;/td&gt;
  &lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;Index of first occurrence of a char.  &lt;/td&gt;
    &lt;td&gt;print(l.index('d'))&lt;/td&gt;
    &lt;td&gt; 3 &lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;
== Code as given by Vidya ==
&lt;pre&gt;
import string

def remove_matching_letter(l1,l2) :
    for i in range(len(l1)) :
        for j in range(len(l2)):
            if l1[i] == l2[j] :
                c = l1[i]
                l1.remove(c)
                l2.remove(c)
                l = l1 + ['*'] +l2
                return[l,True]
    l = l1+['*']+l2
    return[l,False]


p1 = input(&quot;Enter first person name:&quot;)
p1 = p1.lower()
p1=  p1.replace(&quot; &quot;,&quot;&quot;)

p2 = input(&quot;Enter Second person name:&quot;)
p2 = p2.lower()
p2 =  p2.replace(&quot; &quot;,&quot;&quot;)

l1 = list(p1)
l2 = list(p2)

proceed = True
while proceed:
    [con_list,proceed] = remove_matching_letter(l1,l2)
    star_index = con_list.index('*')
    l1 = con_list[:star_index]
    l2 = con_list[star_index+1:]
    
count = len(l1) + len(l2)
result = ['Friends','Love','Affection','Marriage','Enemy','Sibling']

while len(result) &gt; 1 :
    split_index = (count%len(result)) -1
    if split_index &gt;= 0 :
        right = result[split_index + 1 :]
        left = result[:split_index]
        result = right + left
    else :
        result = result[:len(result) -1]
print(result[0])
&lt;/pre&gt;

Output:

[[File:flameOutput.png]]

= Image Compression =
Suppose you have a web page with lots of images.  It will take more time to download.  To make downloading faster, either you remove the images or reduce the size of the images.  Both methods will not give a good or required result.  Instead you can do &lt;b&gt; Image Compression&lt;/b&gt;
==NumPy Module==
NumPy is a module for Python. The name is an acronym for &quot;Numeric Python&quot;. It enriches Python with powerful data structures, implementing multi-dimensional arrays and matrices. To work with Artificial Intelligence, Machine Learning or Deep Learning NumPy is required.

&lt;b&gt; How is it superior to List &lt;/b&gt;
Operations on numpy arrays and matrices are easier than Lists.
Consider  the following

cvalues = [22.1, 22.8, 21.9, 22.5, 22.7, 22.3, 21.8, 21.2, 22.9, 22.1]

C = np.array(cvalues)

We would like to find the values into degrees Fahrenheit. This can be easily accomplished using a simple scalar multiplication:

print(C * 9 / 5 + 32)

Using Lists, it should have been

 fvalues = [ x*9/5 + 32 for x in cvalues] 

&lt;b&gt; Operations on numpy &lt;/b&gt;
&lt;table width=&quot;200&quot; border=&quot;1&quot;&gt;
  &lt;tr&gt;
    &lt;th scope=&quot;col&quot;&gt;Operations&lt;/th&gt;
    &lt;th scope=&quot;col&quot;&gt;Descriptions&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;import numpy as np &lt;/td&gt;
    &lt;td&gt;numpy is imported and can be accessed with a short name np&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;a=np.array([1,2,3])&lt;/td&gt;
    &lt;td&gt;One dimensional array 'a' is created&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;print(type(a))&lt;/td&gt;
    &lt;td&gt;&lt;class 'numpy.ndarray'&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;print(a.shape)&lt;/td&gt;
    &lt;td&gt;(3,)&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;print (a[0],a[1],a[2])&lt;/td&gt;
    &lt;td&gt;1 2 3&lt;/td&gt;
  &lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;b=np.array([[1,2,3],[4,5,6]])&lt;/td&gt;
    &lt;td&gt;Two dimensional array 'b' is created&lt;/td&gt;
  &lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;print(b.shape)&lt;/td&gt;
    &lt;td&gt;(2,3)&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;
[[#Top]]
=== NumPy Examples ===
importing numpy module is common to following examples.
&lt;pre&gt;import numpy as np&lt;/pre&gt;

'''Example: Print NumPy Array'''
&lt;pre&gt;
#pass list as argument to np.array
a=np.array([1,2,3])
print(a)
#Output: [1 2 3]
&lt;/pre&gt;

'''Example: Print type of numpy array'''
&lt;pre&gt;
#type of numpy array
print(type(a))
#Output: &lt;class 'numpy.ndarray'&gt;
&lt;/pre&gt;

'''Example: Print shape i.e.size of numpy array'''
&lt;pre&gt;
#shape of numpy array
print(a.shape)
#Output: (3,)
&lt;/pre&gt;

'''Example: Print elements of numpy using indexes'''
&lt;pre&gt;
#print elements of numpy using indexes
print(a[0], a[1], a[2])
#Output: 1 2 3
&lt;/pre&gt;

'''Example: Print shape of array: rows and columns'''
&lt;pre&gt;
b=np.array([[1,2,3],[4,5,6]])
print(b.shape)
#Output: (2, 3) - 2 rows and 3 columns
&lt;/pre&gt;

''' Example: 2x2 array of '0' '''
&lt;pre&gt;
#array of '0'
a=np.zeros((2,2))
print(a)
'''Output:
[[0. 0.]
 [0. 0.]]'''
&lt;/pre&gt;

''' Example: 2x2 array of '1' '''
&lt;pre&gt;
#array of '1'
b= np.ones((2,2))
print(b)
'''Output:
[[1. 1.]
 [1. 1.]]'''
&lt;/pre&gt;

''' Example: 2x2 array of '6' '''
&lt;pre&gt;
#2x2 array of 6
c= np.full((2,2),6)
print(c)
'''Output:
[[6 6]
 [6 6]]'''
&lt;/pre&gt;

''' Example: 2x2 array of random number '''
&lt;pre&gt;
#2x2 array of random number
d=np.random.random((2,2))
print(d)
'''Output:
 [[0.45937293 0.72546193]
 [0.28374715 0.63269858]]'''
&lt;/pre&gt;

'''Example: int32 Data type of array'''
&lt;pre&gt;
x=np.array([1,2])

#data type of x
print(x.dtype)
#Output : int32
&lt;/pre&gt;

'''Example: float64 Data type of array'''
&lt;pre&gt;
y=np.array([1.2,3])
print(y.dtype)
#Output: float64
&lt;/pre&gt;

'''Example: Specifically setting Data type of array as int64'''
&lt;pre&gt;
x=np.array([1,2], dtype=np.int64)
print(x.dtype)
#Output: int64
&lt;/pre&gt;</text>
      <sha1>rm4v1uryb7zzd91drglsfid6xkyb3qy</sha1>
    </revision>
    <revision>
      <id>3998</id>
      <parentid>3997</parentid>
      <timestamp>2018-10-02T08:48:32Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* NumPy Examples */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="7425">==Week 10 Download URL==
https://onlinecourses.nptel.ac.in/noc18_cs35/unit?unit=30&amp;lesson=31

=FLAMES - a Childhood play=
In childhood, we might have played a game called FLAMES to find the relationship (illusion!!) between a boy and a girl.  

All you have to do is

&lt;b&gt; Steps : &lt;/b&gt;
 1. write their names and strike out the common characters that occur in both their names.
 2. Count the remaining letters (SAY X)
 3. Write the word FLAMES and start counting from F and strike out the X&lt;sup&gt;th&lt;/sup&gt; letter till only one character remains
 4. If it is F - then the two are Friends. L - Love, A - Affection,  M - Marriage  E- Enemy S- Sister

&lt;table width=&quot;449&quot; height=&quot;116&quot; border=&quot;1&quot;&gt;
 &lt;tr&gt;
    &lt;td&gt;[[File:Flamestep1.JPG|300px]]&lt;/td&gt;
    &lt;td&gt;[[File:Flamestep2.JPG|300px]]&lt;/td&gt;
    &lt;td&gt;[[File:flamestep3.JPG|300px]]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td width = 200&gt;Remaining No. of Characters = 7&lt;/td&gt;
    &lt;td width = 200&gt;Counting from F, wrap over and strike the 7&lt;SUP&gt;th&lt;/SUP&gt; letter&lt;/td&gt;
    &lt;td width = 200&gt;The remaining letter denotes the relationship&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;
== Refresh the operations on Strings and Lists ==
&lt;table width=&quot;200&quot; border=&quot;1&quot;&gt;
  &lt;tr&gt;
    &lt;th scope=&quot;col&quot; width=100&gt;Functions&lt;/th&gt;
    &lt;th scope=&quot;col&quot; width=100&gt;Example&lt;/th&gt;
    &lt;th scope=&quot;col&quot; width=100&gt;Result&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;import &lt;/td&gt;
    &lt;td&gt;import string&lt;/td&gt;
    &lt;td&gt;import string module&lt;/td&gt;
  &lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;input a string&lt;/td&gt;
    &lt;td&gt;s = input()&lt;/td&gt;
    &lt;td&gt;input a string to the variable s&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Convert to lower case&lt;/td&gt;
    &lt;td&gt;print(s.lower())&lt;/td&gt;
    &lt;td &gt; raj &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Convert to upper case&lt;/td&gt;
    &lt;td&gt;print(s.upper())&lt;/td&gt;
    &lt;td&gt; RAJ&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Convert the string to list&lt;/td&gt;
    &lt;td&gt;s1 = list(s)&lt;/td&gt;
    &lt;td&gt;s1 will be ['R','a','j']&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Replace a character&lt;/td&gt;
    &lt;td&gt;print(s.replace(&quot;j&quot;,&quot;#&quot;))&lt;/td&gt;
    &lt;td&gt;'Ra#' .Note: the content of s is not changed.&lt;/td&gt;
  &lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;Replace more than one character&lt;/td&gt;
    &lt;td&gt;print(s.replace(&quot;aj&quot;,&quot;#&quot;))&lt;/td&gt;
    &lt;td&gt;'R#'&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;slice. l = ['a','b','c','d','e']&lt;/td&gt;
    &lt;td&gt;l[1:4]&lt;/td&gt;
    &lt;td&gt;['b', 'c', 'd'] &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;slice. Start index is missing &lt;/td&gt;
    &lt;td&gt;l[:4]&lt;/td&gt;
    &lt;td&gt; ['a', 'b', 'c', 'd']  Default is 0 if start index is omitted &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;slice. End index is missing &lt;/td&gt;
    &lt;td&gt;l[1:]&lt;/td&gt;
    &lt;td&gt; ['b', 'c', 'd', 'e'] Default is length of the list if end index is omitted&lt;/td&gt;
  &lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;slice. Both index missing &lt;/td&gt;
    &lt;td&gt;l[:]&lt;/td&gt;
    &lt;td&gt; ['a','b','c','d','e'] &lt;/td&gt;
  &lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;Index of first occurrence of a char.  &lt;/td&gt;
    &lt;td&gt;print(l.index('d'))&lt;/td&gt;
    &lt;td&gt; 3 &lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;
== Code as given by Vidya ==
&lt;pre&gt;
import string

def remove_matching_letter(l1,l2) :
    for i in range(len(l1)) :
        for j in range(len(l2)):
            if l1[i] == l2[j] :
                c = l1[i]
                l1.remove(c)
                l2.remove(c)
                l = l1 + ['*'] +l2
                return[l,True]
    l = l1+['*']+l2
    return[l,False]


p1 = input(&quot;Enter first person name:&quot;)
p1 = p1.lower()
p1=  p1.replace(&quot; &quot;,&quot;&quot;)

p2 = input(&quot;Enter Second person name:&quot;)
p2 = p2.lower()
p2 =  p2.replace(&quot; &quot;,&quot;&quot;)

l1 = list(p1)
l2 = list(p2)

proceed = True
while proceed:
    [con_list,proceed] = remove_matching_letter(l1,l2)
    star_index = con_list.index('*')
    l1 = con_list[:star_index]
    l2 = con_list[star_index+1:]
    
count = len(l1) + len(l2)
result = ['Friends','Love','Affection','Marriage','Enemy','Sibling']

while len(result) &gt; 1 :
    split_index = (count%len(result)) -1
    if split_index &gt;= 0 :
        right = result[split_index + 1 :]
        left = result[:split_index]
        result = right + left
    else :
        result = result[:len(result) -1]
print(result[0])
&lt;/pre&gt;

Output:

[[File:flameOutput.png]]

= Image Compression =
Suppose you have a web page with lots of images.  It will take more time to download.  To make downloading faster, either you remove the images or reduce the size of the images.  Both methods will not give a good or required result.  Instead you can do &lt;b&gt; Image Compression&lt;/b&gt;
==NumPy Module==
NumPy is a module for Python. The name is an acronym for &quot;Numeric Python&quot;. It enriches Python with powerful data structures, implementing multi-dimensional arrays and matrices. To work with Artificial Intelligence, Machine Learning or Deep Learning NumPy is required.

&lt;b&gt; How is it superior to List &lt;/b&gt;
Operations on numpy arrays and matrices are easier than Lists.
Consider  the following

cvalues = [22.1, 22.8, 21.9, 22.5, 22.7, 22.3, 21.8, 21.2, 22.9, 22.1]

C = np.array(cvalues)

We would like to find the values into degrees Fahrenheit. This can be easily accomplished using a simple scalar multiplication:

print(C * 9 / 5 + 32)

Using Lists, it should have been

 fvalues = [ x*9/5 + 32 for x in cvalues] 

&lt;b&gt; Operations on numpy &lt;/b&gt;
&lt;table width=&quot;200&quot; border=&quot;1&quot;&gt;
  &lt;tr&gt;
    &lt;th scope=&quot;col&quot;&gt;Operations&lt;/th&gt;
    &lt;th scope=&quot;col&quot;&gt;Descriptions&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;import numpy as np &lt;/td&gt;
    &lt;td&gt;numpy is imported and can be accessed with a short name np&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;a=np.array([1,2,3])&lt;/td&gt;
    &lt;td&gt;One dimensional array 'a' is created&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;print(type(a))&lt;/td&gt;
    &lt;td&gt;&lt;class 'numpy.ndarray'&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;print(a.shape)&lt;/td&gt;
    &lt;td&gt;(3,)&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;print (a[0],a[1],a[2])&lt;/td&gt;
    &lt;td&gt;1 2 3&lt;/td&gt;
  &lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;b=np.array([[1,2,3],[4,5,6]])&lt;/td&gt;
    &lt;td&gt;Two dimensional array 'b' is created&lt;/td&gt;
  &lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;print(b.shape)&lt;/td&gt;
    &lt;td&gt;(2,3)&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;
[[#Top]]
=== NumPy Examples ===
importing numpy module is common to following examples.
&lt;pre&gt;import numpy as np&lt;/pre&gt;

'''Example: Print NumPy Array'''
&lt;pre&gt;
#pass list as argument to np.array
a=np.array([1,2,3])
print(a)
#Output: [1 2 3]
&lt;/pre&gt;

'''Example: Print type of numpy array'''
&lt;pre&gt;
#type of numpy array
print(type(a))
#Output: &lt;class 'numpy.ndarray'&gt;
&lt;/pre&gt;

'''Example: Print shape i.e.size of numpy array'''
&lt;pre&gt;
#shape of numpy array
print(a.shape)
#Output: (3,)
&lt;/pre&gt;

'''Example: Print elements of numpy using indexes'''
&lt;pre&gt;
#print elements of numpy using indexes
print(a[0], a[1], a[2])
#Output: 1 2 3
&lt;/pre&gt;

'''Example: Print shape of array: rows and columns'''
&lt;pre&gt;
b=np.array([[1,2,3],[4,5,6]])
print(b.shape)
#Output: (2, 3) - 2 rows and 3 columns
&lt;/pre&gt;

''' Example: 2x2 array of '0' '''
&lt;pre&gt;
#array of '0'
a=np.zeros((2,2))
print(a)
'''Output:
[[0. 0.]
 [0. 0.]]'''
&lt;/pre&gt;

''' Example: 2x2 array of '1' '''
&lt;pre&gt;
#array of '1'
b= np.ones((2,2))
print(b)
'''Output:
[[1. 1.]
 [1. 1.]]'''
&lt;/pre&gt;

''' Example: 2x2 array of '6' '''
&lt;pre&gt;
#2x2 array of 6
c= np.full((2,2),6)
print(c)
'''Output:
[[6 6]
 [6 6]]'''
&lt;/pre&gt;

''' Example: 2x2 array of random number '''
&lt;pre&gt;
#2x2 array of random number
d=np.random.random((2,2))
print(d)
'''Output:
 [[0.45937293 0.72546193]
 [0.28374715 0.63269858]]'''
&lt;/pre&gt;

'''Example: int32 Data type of array'''
&lt;pre&gt;
x=np.array([1,2])

#data type of x
print(x.dtype)
#Output : int32
&lt;/pre&gt;

'''Example: float64 Data type of array'''
&lt;pre&gt;
y=np.array([1.2,3])
print(y.dtype)
#Output: float64
&lt;/pre&gt;

'''Example: Specifically setting Data type of array as int64'''
&lt;pre&gt;
x=np.array([1,2], dtype=np.int64)
print(x.dtype)
#Output: int64
&lt;/pre&gt;
[[#Top]]</text>
      <sha1>1zsht9pk35fjp9uemfz45ns76ifl9cp</sha1>
    </revision>
    <revision>
      <id>3999</id>
      <parentid>3998</parentid>
      <timestamp>2018-10-02T09:07:52Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* NumPy Examples */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="8416">==Week 10 Download URL==
https://onlinecourses.nptel.ac.in/noc18_cs35/unit?unit=30&amp;lesson=31

=FLAMES - a Childhood play=
In childhood, we might have played a game called FLAMES to find the relationship (illusion!!) between a boy and a girl.  

All you have to do is

&lt;b&gt; Steps : &lt;/b&gt;
 1. write their names and strike out the common characters that occur in both their names.
 2. Count the remaining letters (SAY X)
 3. Write the word FLAMES and start counting from F and strike out the X&lt;sup&gt;th&lt;/sup&gt; letter till only one character remains
 4. If it is F - then the two are Friends. L - Love, A - Affection,  M - Marriage  E- Enemy S- Sister

&lt;table width=&quot;449&quot; height=&quot;116&quot; border=&quot;1&quot;&gt;
 &lt;tr&gt;
    &lt;td&gt;[[File:Flamestep1.JPG|300px]]&lt;/td&gt;
    &lt;td&gt;[[File:Flamestep2.JPG|300px]]&lt;/td&gt;
    &lt;td&gt;[[File:flamestep3.JPG|300px]]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td width = 200&gt;Remaining No. of Characters = 7&lt;/td&gt;
    &lt;td width = 200&gt;Counting from F, wrap over and strike the 7&lt;SUP&gt;th&lt;/SUP&gt; letter&lt;/td&gt;
    &lt;td width = 200&gt;The remaining letter denotes the relationship&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;
== Refresh the operations on Strings and Lists ==
&lt;table width=&quot;200&quot; border=&quot;1&quot;&gt;
  &lt;tr&gt;
    &lt;th scope=&quot;col&quot; width=100&gt;Functions&lt;/th&gt;
    &lt;th scope=&quot;col&quot; width=100&gt;Example&lt;/th&gt;
    &lt;th scope=&quot;col&quot; width=100&gt;Result&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;import &lt;/td&gt;
    &lt;td&gt;import string&lt;/td&gt;
    &lt;td&gt;import string module&lt;/td&gt;
  &lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;input a string&lt;/td&gt;
    &lt;td&gt;s = input()&lt;/td&gt;
    &lt;td&gt;input a string to the variable s&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Convert to lower case&lt;/td&gt;
    &lt;td&gt;print(s.lower())&lt;/td&gt;
    &lt;td &gt; raj &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Convert to upper case&lt;/td&gt;
    &lt;td&gt;print(s.upper())&lt;/td&gt;
    &lt;td&gt; RAJ&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Convert the string to list&lt;/td&gt;
    &lt;td&gt;s1 = list(s)&lt;/td&gt;
    &lt;td&gt;s1 will be ['R','a','j']&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Replace a character&lt;/td&gt;
    &lt;td&gt;print(s.replace(&quot;j&quot;,&quot;#&quot;))&lt;/td&gt;
    &lt;td&gt;'Ra#' .Note: the content of s is not changed.&lt;/td&gt;
  &lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;Replace more than one character&lt;/td&gt;
    &lt;td&gt;print(s.replace(&quot;aj&quot;,&quot;#&quot;))&lt;/td&gt;
    &lt;td&gt;'R#'&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;slice. l = ['a','b','c','d','e']&lt;/td&gt;
    &lt;td&gt;l[1:4]&lt;/td&gt;
    &lt;td&gt;['b', 'c', 'd'] &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;slice. Start index is missing &lt;/td&gt;
    &lt;td&gt;l[:4]&lt;/td&gt;
    &lt;td&gt; ['a', 'b', 'c', 'd']  Default is 0 if start index is omitted &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;slice. End index is missing &lt;/td&gt;
    &lt;td&gt;l[1:]&lt;/td&gt;
    &lt;td&gt; ['b', 'c', 'd', 'e'] Default is length of the list if end index is omitted&lt;/td&gt;
  &lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;slice. Both index missing &lt;/td&gt;
    &lt;td&gt;l[:]&lt;/td&gt;
    &lt;td&gt; ['a','b','c','d','e'] &lt;/td&gt;
  &lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;Index of first occurrence of a char.  &lt;/td&gt;
    &lt;td&gt;print(l.index('d'))&lt;/td&gt;
    &lt;td&gt; 3 &lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;
== Code as given by Vidya ==
&lt;pre&gt;
import string

def remove_matching_letter(l1,l2) :
    for i in range(len(l1)) :
        for j in range(len(l2)):
            if l1[i] == l2[j] :
                c = l1[i]
                l1.remove(c)
                l2.remove(c)
                l = l1 + ['*'] +l2
                return[l,True]
    l = l1+['*']+l2
    return[l,False]


p1 = input(&quot;Enter first person name:&quot;)
p1 = p1.lower()
p1=  p1.replace(&quot; &quot;,&quot;&quot;)

p2 = input(&quot;Enter Second person name:&quot;)
p2 = p2.lower()
p2 =  p2.replace(&quot; &quot;,&quot;&quot;)

l1 = list(p1)
l2 = list(p2)

proceed = True
while proceed:
    [con_list,proceed] = remove_matching_letter(l1,l2)
    star_index = con_list.index('*')
    l1 = con_list[:star_index]
    l2 = con_list[star_index+1:]
    
count = len(l1) + len(l2)
result = ['Friends','Love','Affection','Marriage','Enemy','Sibling']

while len(result) &gt; 1 :
    split_index = (count%len(result)) -1
    if split_index &gt;= 0 :
        right = result[split_index + 1 :]
        left = result[:split_index]
        result = right + left
    else :
        result = result[:len(result) -1]
print(result[0])
&lt;/pre&gt;

Output:

[[File:flameOutput.png]]

= Image Compression =
Suppose you have a web page with lots of images.  It will take more time to download.  To make downloading faster, either you remove the images or reduce the size of the images.  Both methods will not give a good or required result.  Instead you can do &lt;b&gt; Image Compression&lt;/b&gt;
==NumPy Module==
NumPy is a module for Python. The name is an acronym for &quot;Numeric Python&quot;. It enriches Python with powerful data structures, implementing multi-dimensional arrays and matrices. To work with Artificial Intelligence, Machine Learning or Deep Learning NumPy is required.

&lt;b&gt; How is it superior to List &lt;/b&gt;
Operations on numpy arrays and matrices are easier than Lists.
Consider  the following

cvalues = [22.1, 22.8, 21.9, 22.5, 22.7, 22.3, 21.8, 21.2, 22.9, 22.1]

C = np.array(cvalues)

We would like to find the values into degrees Fahrenheit. This can be easily accomplished using a simple scalar multiplication:

print(C * 9 / 5 + 32)

Using Lists, it should have been

 fvalues = [ x*9/5 + 32 for x in cvalues] 

&lt;b&gt; Operations on numpy &lt;/b&gt;
&lt;table width=&quot;200&quot; border=&quot;1&quot;&gt;
  &lt;tr&gt;
    &lt;th scope=&quot;col&quot;&gt;Operations&lt;/th&gt;
    &lt;th scope=&quot;col&quot;&gt;Descriptions&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;import numpy as np &lt;/td&gt;
    &lt;td&gt;numpy is imported and can be accessed with a short name np&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;a=np.array([1,2,3])&lt;/td&gt;
    &lt;td&gt;One dimensional array 'a' is created&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;print(type(a))&lt;/td&gt;
    &lt;td&gt;&lt;class 'numpy.ndarray'&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;print(a.shape)&lt;/td&gt;
    &lt;td&gt;(3,)&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;print (a[0],a[1],a[2])&lt;/td&gt;
    &lt;td&gt;1 2 3&lt;/td&gt;
  &lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;b=np.array([[1,2,3],[4,5,6]])&lt;/td&gt;
    &lt;td&gt;Two dimensional array 'b' is created&lt;/td&gt;
  &lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;print(b.shape)&lt;/td&gt;
    &lt;td&gt;(2,3)&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;
[[#Top]]
=== NumPy Examples ===
importing numpy module is common to following examples.
&lt;pre&gt;import numpy as np&lt;/pre&gt;

'''Example: Print NumPy Array'''
&lt;pre&gt;
#pass list as argument to np.array
a=np.array([1,2,3])
print(a)
#Output: [1 2 3]
&lt;/pre&gt;

'''Example: Print type of numpy array'''
&lt;pre&gt;
#type of numpy array
print(type(a))
#Output: &lt;class 'numpy.ndarray'&gt;
&lt;/pre&gt;

'''Example: Print shape i.e.size of numpy array'''
&lt;pre&gt;
#shape of numpy array
print(a.shape)
#Output: (3,)
&lt;/pre&gt;

'''Example: Print elements of numpy using indexes'''
&lt;pre&gt;
#print elements of numpy using indexes
print(a[0], a[1], a[2])
#Output: 1 2 3
&lt;/pre&gt;

'''Example: Print shape of array: rows and columns'''
&lt;pre&gt;
b=np.array([[1,2,3],[4,5,6]])
print(b.shape)
#Output: (2, 3) - 2 rows and 3 columns
&lt;/pre&gt;

''' Example: 2x2 array of '0' '''
&lt;pre&gt;
#array of '0'
a=np.zeros((2,2))
print(a)
'''Output:
[[0. 0.]
 [0. 0.]]'''
&lt;/pre&gt;

''' Example: 2x2 array of '1' '''
&lt;pre&gt;
#array of '1'
b= np.ones((2,2))
print(b)
'''Output:
[[1. 1.]
 [1. 1.]]'''
&lt;/pre&gt;

''' Example: 2x2 array of '6' '''
&lt;pre&gt;
#2x2 array of 6
c= np.full((2,2),6)
print(c)
'''Output:
[[6 6]
 [6 6]]'''
&lt;/pre&gt;

''' Example: 2x2 array of random number '''
&lt;pre&gt;
#2x2 array of random number
d=np.random.random((2,2))
print(d)
'''Output:
 [[0.45937293 0.72546193]
 [0.28374715 0.63269858]]'''
&lt;/pre&gt;

'''Example: int32 Data type of array'''
&lt;pre&gt;
x=np.array([1,2])

#data type of x
print(x.dtype)
#Output : int32
&lt;/pre&gt;

'''Example: float64 Data type of array'''
&lt;pre&gt;
y=np.array([1.2,3])
print(y.dtype)
#Output: float64
&lt;/pre&gt;

'''Example: Specifically setting Data type of array as int64'''
&lt;pre&gt;
x=np.array([1,2], dtype=np.int64)
print(x.dtype)
#Output: int64
&lt;/pre&gt;
[[#Top]]

===NumPy array operations===
&lt;pre&gt;
import numpy as np
x=np.array([[1,2],[3,4]],dtype=np.float64)
y=np.array([[5,6],[7,8]],dtype=np.float64)
print(x)
'''Output:
[[1. 2.]
 [3. 4.]]'''
print(y)
'''Output:
[[5. 6.]
 [7. 8.]]
'''

print(x+y)
print(np.add(x,y))

'''
Output:
[[ 6.  8.]
 [10. 12.]]

[[ 6.  8.]
 [10. 12.]]
 '''

print(x-y)
print(np.subtract(x,y))
'''Output:
[[-4. -4.]
 [-4. -4.]]
[[-4. -4.]
 [-4. -4.]]
'''
print(x*y)
print(np.multiply(x,y))
'''Output:
[[ 5. 12.]
 [21. 32.]]
[[ 5. 12.]
 [21. 32.]]
'''
print(x/y)
'''Output:
[[0.2        0.33333333]
 [0.42857143 0.5       ]]
'''
print(np.sqrt(x))
'''Output:
[[1.         1.41421356]
 [1.73205081 2.        ]]
'''
print(np.sqrt(y))
'''Output:
[[2.23606798 2.44948974]
 [2.64575131 2.82842712]]
'''
#Transposition of matrix
np.array([[1,2],[3,4]])
print(x.T)
'''Output:
[[1. 3.]
 [2. 4.]]
 '''
#sum of all elements
print(np.sum(x))#Output:10.0
print(np.sum(x,axis=0))#Output:[4. 6.]
print(np.sum(x,axis=1))#Output:[3. 7.]

&lt;/pre&gt;</text>
      <sha1>7ifh40naoen8q4sabq0qyyfmw4yxbk6</sha1>
    </revision>
    <revision>
      <id>4000</id>
      <parentid>3999</parentid>
      <timestamp>2018-10-02T09:27:04Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* Image Compression */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="8576">==Week 10 Download URL==
https://onlinecourses.nptel.ac.in/noc18_cs35/unit?unit=30&amp;lesson=31

=FLAMES - a Childhood play=
In childhood, we might have played a game called FLAMES to find the relationship (illusion!!) between a boy and a girl.  

All you have to do is

&lt;b&gt; Steps : &lt;/b&gt;
 1. write their names and strike out the common characters that occur in both their names.
 2. Count the remaining letters (SAY X)
 3. Write the word FLAMES and start counting from F and strike out the X&lt;sup&gt;th&lt;/sup&gt; letter till only one character remains
 4. If it is F - then the two are Friends. L - Love, A - Affection,  M - Marriage  E- Enemy S- Sister

&lt;table width=&quot;449&quot; height=&quot;116&quot; border=&quot;1&quot;&gt;
 &lt;tr&gt;
    &lt;td&gt;[[File:Flamestep1.JPG|300px]]&lt;/td&gt;
    &lt;td&gt;[[File:Flamestep2.JPG|300px]]&lt;/td&gt;
    &lt;td&gt;[[File:flamestep3.JPG|300px]]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td width = 200&gt;Remaining No. of Characters = 7&lt;/td&gt;
    &lt;td width = 200&gt;Counting from F, wrap over and strike the 7&lt;SUP&gt;th&lt;/SUP&gt; letter&lt;/td&gt;
    &lt;td width = 200&gt;The remaining letter denotes the relationship&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;
== Refresh the operations on Strings and Lists ==
&lt;table width=&quot;200&quot; border=&quot;1&quot;&gt;
  &lt;tr&gt;
    &lt;th scope=&quot;col&quot; width=100&gt;Functions&lt;/th&gt;
    &lt;th scope=&quot;col&quot; width=100&gt;Example&lt;/th&gt;
    &lt;th scope=&quot;col&quot; width=100&gt;Result&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;import &lt;/td&gt;
    &lt;td&gt;import string&lt;/td&gt;
    &lt;td&gt;import string module&lt;/td&gt;
  &lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;input a string&lt;/td&gt;
    &lt;td&gt;s = input()&lt;/td&gt;
    &lt;td&gt;input a string to the variable s&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Convert to lower case&lt;/td&gt;
    &lt;td&gt;print(s.lower())&lt;/td&gt;
    &lt;td &gt; raj &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Convert to upper case&lt;/td&gt;
    &lt;td&gt;print(s.upper())&lt;/td&gt;
    &lt;td&gt; RAJ&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Convert the string to list&lt;/td&gt;
    &lt;td&gt;s1 = list(s)&lt;/td&gt;
    &lt;td&gt;s1 will be ['R','a','j']&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Replace a character&lt;/td&gt;
    &lt;td&gt;print(s.replace(&quot;j&quot;,&quot;#&quot;))&lt;/td&gt;
    &lt;td&gt;'Ra#' .Note: the content of s is not changed.&lt;/td&gt;
  &lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;Replace more than one character&lt;/td&gt;
    &lt;td&gt;print(s.replace(&quot;aj&quot;,&quot;#&quot;))&lt;/td&gt;
    &lt;td&gt;'R#'&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;slice. l = ['a','b','c','d','e']&lt;/td&gt;
    &lt;td&gt;l[1:4]&lt;/td&gt;
    &lt;td&gt;['b', 'c', 'd'] &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;slice. Start index is missing &lt;/td&gt;
    &lt;td&gt;l[:4]&lt;/td&gt;
    &lt;td&gt; ['a', 'b', 'c', 'd']  Default is 0 if start index is omitted &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;slice. End index is missing &lt;/td&gt;
    &lt;td&gt;l[1:]&lt;/td&gt;
    &lt;td&gt; ['b', 'c', 'd', 'e'] Default is length of the list if end index is omitted&lt;/td&gt;
  &lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;slice. Both index missing &lt;/td&gt;
    &lt;td&gt;l[:]&lt;/td&gt;
    &lt;td&gt; ['a','b','c','d','e'] &lt;/td&gt;
  &lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;Index of first occurrence of a char.  &lt;/td&gt;
    &lt;td&gt;print(l.index('d'))&lt;/td&gt;
    &lt;td&gt; 3 &lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;
== Code as given by Vidya ==
&lt;pre&gt;
import string

def remove_matching_letter(l1,l2) :
    for i in range(len(l1)) :
        for j in range(len(l2)):
            if l1[i] == l2[j] :
                c = l1[i]
                l1.remove(c)
                l2.remove(c)
                l = l1 + ['*'] +l2
                return[l,True]
    l = l1+['*']+l2
    return[l,False]


p1 = input(&quot;Enter first person name:&quot;)
p1 = p1.lower()
p1=  p1.replace(&quot; &quot;,&quot;&quot;)

p2 = input(&quot;Enter Second person name:&quot;)
p2 = p2.lower()
p2 =  p2.replace(&quot; &quot;,&quot;&quot;)

l1 = list(p1)
l2 = list(p2)

proceed = True
while proceed:
    [con_list,proceed] = remove_matching_letter(l1,l2)
    star_index = con_list.index('*')
    l1 = con_list[:star_index]
    l2 = con_list[star_index+1:]
    
count = len(l1) + len(l2)
result = ['Friends','Love','Affection','Marriage','Enemy','Sibling']

while len(result) &gt; 1 :
    split_index = (count%len(result)) -1
    if split_index &gt;= 0 :
        right = result[split_index + 1 :]
        left = result[:split_index]
        result = right + left
    else :
        result = result[:len(result) -1]
print(result[0])
&lt;/pre&gt;

Output:

[[File:flameOutput.png]]

= Image Compression =
Suppose you have a web page with lots of images.  It will take more time to download.  To make downloading faster, either you remove the images or reduce the size of the images.  Both methods will not give a good or required result.  Instead you can do &lt;b&gt; Image Compression&lt;/b&gt;
==NumPy Module==
NumPy is a module for Python. The name is an acronym for &quot;Numeric Python&quot;. It enriches Python with powerful data structures, implementing multi-dimensional arrays and matrices. To work with Artificial Intelligence, Machine Learning or Deep Learning NumPy is required.

&lt;b&gt; How is it superior to List &lt;/b&gt;
Operations on numpy arrays and matrices are easier than Lists.
Consider  the following

cvalues = [22.1, 22.8, 21.9, 22.5, 22.7, 22.3, 21.8, 21.2, 22.9, 22.1]

C = np.array(cvalues)

We would like to find the values into degrees Fahrenheit. This can be easily accomplished using a simple scalar multiplication:

print(C * 9 / 5 + 32)

Using Lists, it should have been

 fvalues = [ x*9/5 + 32 for x in cvalues] 

&lt;b&gt; Operations on numpy &lt;/b&gt;
&lt;table width=&quot;200&quot; border=&quot;1&quot;&gt;
  &lt;tr&gt;
    &lt;th scope=&quot;col&quot;&gt;Operations&lt;/th&gt;
    &lt;th scope=&quot;col&quot;&gt;Descriptions&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;import numpy as np &lt;/td&gt;
    &lt;td&gt;numpy is imported and can be accessed with a short name np&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;a=np.array([1,2,3])&lt;/td&gt;
    &lt;td&gt;One dimensional array 'a' is created&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;print(type(a))&lt;/td&gt;
    &lt;td&gt;&lt;class 'numpy.ndarray'&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;print(a.shape)&lt;/td&gt;
    &lt;td&gt;(3,)&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;print (a[0],a[1],a[2])&lt;/td&gt;
    &lt;td&gt;1 2 3&lt;/td&gt;
  &lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;b=np.array([[1,2,3],[4,5,6]])&lt;/td&gt;
    &lt;td&gt;Two dimensional array 'b' is created&lt;/td&gt;
  &lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;print(b.shape)&lt;/td&gt;
    &lt;td&gt;(2,3)&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;
[[#Top]]
=== NumPy Examples ===
importing numpy module is common to following examples.
&lt;pre&gt;import numpy as np&lt;/pre&gt;

'''Example: Print NumPy Array'''
&lt;pre&gt;
#pass list as argument to np.array
a=np.array([1,2,3])
print(a)
#Output: [1 2 3]
&lt;/pre&gt;

'''Example: Print type of numpy array'''
&lt;pre&gt;
#type of numpy array
print(type(a))
#Output: &lt;class 'numpy.ndarray'&gt;
&lt;/pre&gt;

'''Example: Print shape i.e.size of numpy array'''
&lt;pre&gt;
#shape of numpy array
print(a.shape)
#Output: (3,)
&lt;/pre&gt;

'''Example: Print elements of numpy using indexes'''
&lt;pre&gt;
#print elements of numpy using indexes
print(a[0], a[1], a[2])
#Output: 1 2 3
&lt;/pre&gt;

'''Example: Print shape of array: rows and columns'''
&lt;pre&gt;
b=np.array([[1,2,3],[4,5,6]])
print(b.shape)
#Output: (2, 3) - 2 rows and 3 columns
&lt;/pre&gt;

''' Example: 2x2 array of '0' '''
&lt;pre&gt;
#array of '0'
a=np.zeros((2,2))
print(a)
'''Output:
[[0. 0.]
 [0. 0.]]'''
&lt;/pre&gt;

''' Example: 2x2 array of '1' '''
&lt;pre&gt;
#array of '1'
b= np.ones((2,2))
print(b)
'''Output:
[[1. 1.]
 [1. 1.]]'''
&lt;/pre&gt;

''' Example: 2x2 array of '6' '''
&lt;pre&gt;
#2x2 array of 6
c= np.full((2,2),6)
print(c)
'''Output:
[[6 6]
 [6 6]]'''
&lt;/pre&gt;

''' Example: 2x2 array of random number '''
&lt;pre&gt;
#2x2 array of random number
d=np.random.random((2,2))
print(d)
'''Output:
 [[0.45937293 0.72546193]
 [0.28374715 0.63269858]]'''
&lt;/pre&gt;

'''Example: int32 Data type of array'''
&lt;pre&gt;
x=np.array([1,2])

#data type of x
print(x.dtype)
#Output : int32
&lt;/pre&gt;

'''Example: float64 Data type of array'''
&lt;pre&gt;
y=np.array([1.2,3])
print(y.dtype)
#Output: float64
&lt;/pre&gt;

'''Example: Specifically setting Data type of array as int64'''
&lt;pre&gt;
x=np.array([1,2], dtype=np.int64)
print(x.dtype)
#Output: int64
&lt;/pre&gt;
[[#Top]]

===NumPy array operations===
&lt;pre&gt;
import numpy as np
x=np.array([[1,2],[3,4]],dtype=np.float64)
y=np.array([[5,6],[7,8]],dtype=np.float64)
print(x)
'''Output:
[[1. 2.]
 [3. 4.]]'''
print(y)
'''Output:
[[5. 6.]
 [7. 8.]]
'''

print(x+y)
print(np.add(x,y))

'''
Output:
[[ 6.  8.]
 [10. 12.]]

[[ 6.  8.]
 [10. 12.]]
 '''

print(x-y)
print(np.subtract(x,y))
'''Output:
[[-4. -4.]
 [-4. -4.]]
[[-4. -4.]
 [-4. -4.]]
'''
print(x*y)
print(np.multiply(x,y))
'''Output:
[[ 5. 12.]
 [21. 32.]]
[[ 5. 12.]
 [21. 32.]]
'''
print(x/y)
'''Output:
[[0.2        0.33333333]
 [0.42857143 0.5       ]]
'''
print(np.sqrt(x))
'''Output:
[[1.         1.41421356]
 [1.73205081 2.        ]]
'''
print(np.sqrt(y))
'''Output:
[[2.23606798 2.44948974]
 [2.64575131 2.82842712]]
'''
#Transposition of matrix
np.array([[1,2],[3,4]])
print(x.T)
'''Output:
[[1. 3.]
 [2. 4.]]
 '''
#sum of all elements
print(np.sum(x))#Output:10.0
print(np.sum(x,axis=0))#Output:[4. 6.]
print(np.sum(x,axis=1))#Output:[3. 7.]

&lt;/pre&gt;

==Lossy Compression==
Compression in which data is lost during compression.
==Lossless Compression==
Compression in which data is not lost during compression.</text>
      <sha1>cm4stp3ddhgbn9kyvyeerk1tlrbc9s0</sha1>
    </revision>
    <revision>
      <id>4001</id>
      <parentid>4000</parentid>
      <timestamp>2018-10-02T09:30:27Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* Lossy Compression */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="8577">==Week 10 Download URL==
https://onlinecourses.nptel.ac.in/noc18_cs35/unit?unit=30&amp;lesson=31

=FLAMES - a Childhood play=
In childhood, we might have played a game called FLAMES to find the relationship (illusion!!) between a boy and a girl.  

All you have to do is

&lt;b&gt; Steps : &lt;/b&gt;
 1. write their names and strike out the common characters that occur in both their names.
 2. Count the remaining letters (SAY X)
 3. Write the word FLAMES and start counting from F and strike out the X&lt;sup&gt;th&lt;/sup&gt; letter till only one character remains
 4. If it is F - then the two are Friends. L - Love, A - Affection,  M - Marriage  E- Enemy S- Sister

&lt;table width=&quot;449&quot; height=&quot;116&quot; border=&quot;1&quot;&gt;
 &lt;tr&gt;
    &lt;td&gt;[[File:Flamestep1.JPG|300px]]&lt;/td&gt;
    &lt;td&gt;[[File:Flamestep2.JPG|300px]]&lt;/td&gt;
    &lt;td&gt;[[File:flamestep3.JPG|300px]]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td width = 200&gt;Remaining No. of Characters = 7&lt;/td&gt;
    &lt;td width = 200&gt;Counting from F, wrap over and strike the 7&lt;SUP&gt;th&lt;/SUP&gt; letter&lt;/td&gt;
    &lt;td width = 200&gt;The remaining letter denotes the relationship&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;
== Refresh the operations on Strings and Lists ==
&lt;table width=&quot;200&quot; border=&quot;1&quot;&gt;
  &lt;tr&gt;
    &lt;th scope=&quot;col&quot; width=100&gt;Functions&lt;/th&gt;
    &lt;th scope=&quot;col&quot; width=100&gt;Example&lt;/th&gt;
    &lt;th scope=&quot;col&quot; width=100&gt;Result&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;import &lt;/td&gt;
    &lt;td&gt;import string&lt;/td&gt;
    &lt;td&gt;import string module&lt;/td&gt;
  &lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;input a string&lt;/td&gt;
    &lt;td&gt;s = input()&lt;/td&gt;
    &lt;td&gt;input a string to the variable s&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Convert to lower case&lt;/td&gt;
    &lt;td&gt;print(s.lower())&lt;/td&gt;
    &lt;td &gt; raj &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Convert to upper case&lt;/td&gt;
    &lt;td&gt;print(s.upper())&lt;/td&gt;
    &lt;td&gt; RAJ&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Convert the string to list&lt;/td&gt;
    &lt;td&gt;s1 = list(s)&lt;/td&gt;
    &lt;td&gt;s1 will be ['R','a','j']&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Replace a character&lt;/td&gt;
    &lt;td&gt;print(s.replace(&quot;j&quot;,&quot;#&quot;))&lt;/td&gt;
    &lt;td&gt;'Ra#' .Note: the content of s is not changed.&lt;/td&gt;
  &lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;Replace more than one character&lt;/td&gt;
    &lt;td&gt;print(s.replace(&quot;aj&quot;,&quot;#&quot;))&lt;/td&gt;
    &lt;td&gt;'R#'&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;slice. l = ['a','b','c','d','e']&lt;/td&gt;
    &lt;td&gt;l[1:4]&lt;/td&gt;
    &lt;td&gt;['b', 'c', 'd'] &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;slice. Start index is missing &lt;/td&gt;
    &lt;td&gt;l[:4]&lt;/td&gt;
    &lt;td&gt; ['a', 'b', 'c', 'd']  Default is 0 if start index is omitted &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;slice. End index is missing &lt;/td&gt;
    &lt;td&gt;l[1:]&lt;/td&gt;
    &lt;td&gt; ['b', 'c', 'd', 'e'] Default is length of the list if end index is omitted&lt;/td&gt;
  &lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;slice. Both index missing &lt;/td&gt;
    &lt;td&gt;l[:]&lt;/td&gt;
    &lt;td&gt; ['a','b','c','d','e'] &lt;/td&gt;
  &lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;Index of first occurrence of a char.  &lt;/td&gt;
    &lt;td&gt;print(l.index('d'))&lt;/td&gt;
    &lt;td&gt; 3 &lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;
== Code as given by Vidya ==
&lt;pre&gt;
import string

def remove_matching_letter(l1,l2) :
    for i in range(len(l1)) :
        for j in range(len(l2)):
            if l1[i] == l2[j] :
                c = l1[i]
                l1.remove(c)
                l2.remove(c)
                l = l1 + ['*'] +l2
                return[l,True]
    l = l1+['*']+l2
    return[l,False]


p1 = input(&quot;Enter first person name:&quot;)
p1 = p1.lower()
p1=  p1.replace(&quot; &quot;,&quot;&quot;)

p2 = input(&quot;Enter Second person name:&quot;)
p2 = p2.lower()
p2 =  p2.replace(&quot; &quot;,&quot;&quot;)

l1 = list(p1)
l2 = list(p2)

proceed = True
while proceed:
    [con_list,proceed] = remove_matching_letter(l1,l2)
    star_index = con_list.index('*')
    l1 = con_list[:star_index]
    l2 = con_list[star_index+1:]
    
count = len(l1) + len(l2)
result = ['Friends','Love','Affection','Marriage','Enemy','Sibling']

while len(result) &gt; 1 :
    split_index = (count%len(result)) -1
    if split_index &gt;= 0 :
        right = result[split_index + 1 :]
        left = result[:split_index]
        result = right + left
    else :
        result = result[:len(result) -1]
print(result[0])
&lt;/pre&gt;

Output:

[[File:flameOutput.png]]

= Image Compression =
Suppose you have a web page with lots of images.  It will take more time to download.  To make downloading faster, either you remove the images or reduce the size of the images.  Both methods will not give a good or required result.  Instead you can do &lt;b&gt; Image Compression&lt;/b&gt;
==NumPy Module==
NumPy is a module for Python. The name is an acronym for &quot;Numeric Python&quot;. It enriches Python with powerful data structures, implementing multi-dimensional arrays and matrices. To work with Artificial Intelligence, Machine Learning or Deep Learning NumPy is required.

&lt;b&gt; How is it superior to List &lt;/b&gt;
Operations on numpy arrays and matrices are easier than Lists.
Consider  the following

cvalues = [22.1, 22.8, 21.9, 22.5, 22.7, 22.3, 21.8, 21.2, 22.9, 22.1]

C = np.array(cvalues)

We would like to find the values into degrees Fahrenheit. This can be easily accomplished using a simple scalar multiplication:

print(C * 9 / 5 + 32)

Using Lists, it should have been

 fvalues = [ x*9/5 + 32 for x in cvalues] 

&lt;b&gt; Operations on numpy &lt;/b&gt;
&lt;table width=&quot;200&quot; border=&quot;1&quot;&gt;
  &lt;tr&gt;
    &lt;th scope=&quot;col&quot;&gt;Operations&lt;/th&gt;
    &lt;th scope=&quot;col&quot;&gt;Descriptions&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;import numpy as np &lt;/td&gt;
    &lt;td&gt;numpy is imported and can be accessed with a short name np&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;a=np.array([1,2,3])&lt;/td&gt;
    &lt;td&gt;One dimensional array 'a' is created&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;print(type(a))&lt;/td&gt;
    &lt;td&gt;&lt;class 'numpy.ndarray'&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;print(a.shape)&lt;/td&gt;
    &lt;td&gt;(3,)&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;print (a[0],a[1],a[2])&lt;/td&gt;
    &lt;td&gt;1 2 3&lt;/td&gt;
  &lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;b=np.array([[1,2,3],[4,5,6]])&lt;/td&gt;
    &lt;td&gt;Two dimensional array 'b' is created&lt;/td&gt;
  &lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;print(b.shape)&lt;/td&gt;
    &lt;td&gt;(2,3)&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;
[[#Top]]
=== NumPy Examples ===
importing numpy module is common to following examples.
&lt;pre&gt;import numpy as np&lt;/pre&gt;

'''Example: Print NumPy Array'''
&lt;pre&gt;
#pass list as argument to np.array
a=np.array([1,2,3])
print(a)
#Output: [1 2 3]
&lt;/pre&gt;

'''Example: Print type of numpy array'''
&lt;pre&gt;
#type of numpy array
print(type(a))
#Output: &lt;class 'numpy.ndarray'&gt;
&lt;/pre&gt;

'''Example: Print shape i.e.size of numpy array'''
&lt;pre&gt;
#shape of numpy array
print(a.shape)
#Output: (3,)
&lt;/pre&gt;

'''Example: Print elements of numpy using indexes'''
&lt;pre&gt;
#print elements of numpy using indexes
print(a[0], a[1], a[2])
#Output: 1 2 3
&lt;/pre&gt;

'''Example: Print shape of array: rows and columns'''
&lt;pre&gt;
b=np.array([[1,2,3],[4,5,6]])
print(b.shape)
#Output: (2, 3) - 2 rows and 3 columns
&lt;/pre&gt;

''' Example: 2x2 array of '0' '''
&lt;pre&gt;
#array of '0'
a=np.zeros((2,2))
print(a)
'''Output:
[[0. 0.]
 [0. 0.]]'''
&lt;/pre&gt;

''' Example: 2x2 array of '1' '''
&lt;pre&gt;
#array of '1'
b= np.ones((2,2))
print(b)
'''Output:
[[1. 1.]
 [1. 1.]]'''
&lt;/pre&gt;

''' Example: 2x2 array of '6' '''
&lt;pre&gt;
#2x2 array of 6
c= np.full((2,2),6)
print(c)
'''Output:
[[6 6]
 [6 6]]'''
&lt;/pre&gt;

''' Example: 2x2 array of random number '''
&lt;pre&gt;
#2x2 array of random number
d=np.random.random((2,2))
print(d)
'''Output:
 [[0.45937293 0.72546193]
 [0.28374715 0.63269858]]'''
&lt;/pre&gt;

'''Example: int32 Data type of array'''
&lt;pre&gt;
x=np.array([1,2])

#data type of x
print(x.dtype)
#Output : int32
&lt;/pre&gt;

'''Example: float64 Data type of array'''
&lt;pre&gt;
y=np.array([1.2,3])
print(y.dtype)
#Output: float64
&lt;/pre&gt;

'''Example: Specifically setting Data type of array as int64'''
&lt;pre&gt;
x=np.array([1,2], dtype=np.int64)
print(x.dtype)
#Output: int64
&lt;/pre&gt;
[[#Top]]

===NumPy array operations===
&lt;pre&gt;
import numpy as np
x=np.array([[1,2],[3,4]],dtype=np.float64)
y=np.array([[5,6],[7,8]],dtype=np.float64)
print(x)
'''Output:
[[1. 2.]
 [3. 4.]]'''
print(y)
'''Output:
[[5. 6.]
 [7. 8.]]
'''

print(x+y)
print(np.add(x,y))

'''
Output:
[[ 6.  8.]
 [10. 12.]]

[[ 6.  8.]
 [10. 12.]]
 '''

print(x-y)
print(np.subtract(x,y))
'''Output:
[[-4. -4.]
 [-4. -4.]]
[[-4. -4.]
 [-4. -4.]]
'''
print(x*y)
print(np.multiply(x,y))
'''Output:
[[ 5. 12.]
 [21. 32.]]
[[ 5. 12.]
 [21. 32.]]
'''
print(x/y)
'''Output:
[[0.2        0.33333333]
 [0.42857143 0.5       ]]
'''
print(np.sqrt(x))
'''Output:
[[1.         1.41421356]
 [1.73205081 2.        ]]
'''
print(np.sqrt(y))
'''Output:
[[2.23606798 2.44948974]
 [2.64575131 2.82842712]]
'''
#Transposition of matrix
np.array([[1,2],[3,4]])
print(x.T)
'''Output:
[[1. 3.]
 [2. 4.]]
 '''
#sum of all elements
print(np.sum(x))#Output:10.0
print(np.sum(x,axis=0))#Output:[4. 6.]
print(np.sum(x,axis=1))#Output:[3. 7.]

&lt;/pre&gt;

==Lossy Compression==
Compression in which data is lost during compression.

==Lossless Compression==
Compression in which data is not lost during compression.</text>
      <sha1>1kfbnqej9ds6aue47nfxa6zh2w3m5zl</sha1>
    </revision>
    <revision>
      <id>4002</id>
      <parentid>4001</parentid>
      <timestamp>2018-10-02T09:32:11Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* Image Compression */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="8679">==Week 10 Download URL==
https://onlinecourses.nptel.ac.in/noc18_cs35/unit?unit=30&amp;lesson=31

=FLAMES - a Childhood play=
In childhood, we might have played a game called FLAMES to find the relationship (illusion!!) between a boy and a girl.  

All you have to do is

&lt;b&gt; Steps : &lt;/b&gt;
 1. write their names and strike out the common characters that occur in both their names.
 2. Count the remaining letters (SAY X)
 3. Write the word FLAMES and start counting from F and strike out the X&lt;sup&gt;th&lt;/sup&gt; letter till only one character remains
 4. If it is F - then the two are Friends. L - Love, A - Affection,  M - Marriage  E- Enemy S- Sister

&lt;table width=&quot;449&quot; height=&quot;116&quot; border=&quot;1&quot;&gt;
 &lt;tr&gt;
    &lt;td&gt;[[File:Flamestep1.JPG|300px]]&lt;/td&gt;
    &lt;td&gt;[[File:Flamestep2.JPG|300px]]&lt;/td&gt;
    &lt;td&gt;[[File:flamestep3.JPG|300px]]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td width = 200&gt;Remaining No. of Characters = 7&lt;/td&gt;
    &lt;td width = 200&gt;Counting from F, wrap over and strike the 7&lt;SUP&gt;th&lt;/SUP&gt; letter&lt;/td&gt;
    &lt;td width = 200&gt;The remaining letter denotes the relationship&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;
== Refresh the operations on Strings and Lists ==
&lt;table width=&quot;200&quot; border=&quot;1&quot;&gt;
  &lt;tr&gt;
    &lt;th scope=&quot;col&quot; width=100&gt;Functions&lt;/th&gt;
    &lt;th scope=&quot;col&quot; width=100&gt;Example&lt;/th&gt;
    &lt;th scope=&quot;col&quot; width=100&gt;Result&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;import &lt;/td&gt;
    &lt;td&gt;import string&lt;/td&gt;
    &lt;td&gt;import string module&lt;/td&gt;
  &lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;input a string&lt;/td&gt;
    &lt;td&gt;s = input()&lt;/td&gt;
    &lt;td&gt;input a string to the variable s&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Convert to lower case&lt;/td&gt;
    &lt;td&gt;print(s.lower())&lt;/td&gt;
    &lt;td &gt; raj &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Convert to upper case&lt;/td&gt;
    &lt;td&gt;print(s.upper())&lt;/td&gt;
    &lt;td&gt; RAJ&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Convert the string to list&lt;/td&gt;
    &lt;td&gt;s1 = list(s)&lt;/td&gt;
    &lt;td&gt;s1 will be ['R','a','j']&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Replace a character&lt;/td&gt;
    &lt;td&gt;print(s.replace(&quot;j&quot;,&quot;#&quot;))&lt;/td&gt;
    &lt;td&gt;'Ra#' .Note: the content of s is not changed.&lt;/td&gt;
  &lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;Replace more than one character&lt;/td&gt;
    &lt;td&gt;print(s.replace(&quot;aj&quot;,&quot;#&quot;))&lt;/td&gt;
    &lt;td&gt;'R#'&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;slice. l = ['a','b','c','d','e']&lt;/td&gt;
    &lt;td&gt;l[1:4]&lt;/td&gt;
    &lt;td&gt;['b', 'c', 'd'] &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;slice. Start index is missing &lt;/td&gt;
    &lt;td&gt;l[:4]&lt;/td&gt;
    &lt;td&gt; ['a', 'b', 'c', 'd']  Default is 0 if start index is omitted &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;slice. End index is missing &lt;/td&gt;
    &lt;td&gt;l[1:]&lt;/td&gt;
    &lt;td&gt; ['b', 'c', 'd', 'e'] Default is length of the list if end index is omitted&lt;/td&gt;
  &lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;slice. Both index missing &lt;/td&gt;
    &lt;td&gt;l[:]&lt;/td&gt;
    &lt;td&gt; ['a','b','c','d','e'] &lt;/td&gt;
  &lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;Index of first occurrence of a char.  &lt;/td&gt;
    &lt;td&gt;print(l.index('d'))&lt;/td&gt;
    &lt;td&gt; 3 &lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;
== Code as given by Vidya ==
&lt;pre&gt;
import string

def remove_matching_letter(l1,l2) :
    for i in range(len(l1)) :
        for j in range(len(l2)):
            if l1[i] == l2[j] :
                c = l1[i]
                l1.remove(c)
                l2.remove(c)
                l = l1 + ['*'] +l2
                return[l,True]
    l = l1+['*']+l2
    return[l,False]


p1 = input(&quot;Enter first person name:&quot;)
p1 = p1.lower()
p1=  p1.replace(&quot; &quot;,&quot;&quot;)

p2 = input(&quot;Enter Second person name:&quot;)
p2 = p2.lower()
p2 =  p2.replace(&quot; &quot;,&quot;&quot;)

l1 = list(p1)
l2 = list(p2)

proceed = True
while proceed:
    [con_list,proceed] = remove_matching_letter(l1,l2)
    star_index = con_list.index('*')
    l1 = con_list[:star_index]
    l2 = con_list[star_index+1:]
    
count = len(l1) + len(l2)
result = ['Friends','Love','Affection','Marriage','Enemy','Sibling']

while len(result) &gt; 1 :
    split_index = (count%len(result)) -1
    if split_index &gt;= 0 :
        right = result[split_index + 1 :]
        left = result[:split_index]
        result = right + left
    else :
        result = result[:len(result) -1]
print(result[0])
&lt;/pre&gt;

Output:

[[File:flameOutput.png]]

= Image Compression =
Suppose you have a web page with lots of images.  It will take more time to download.  To make downloading faster, either you remove the images or reduce the size of the images.  Both methods will not give a good or required result.  Instead you can do &lt;b&gt; Image Compression&lt;/b&gt;
==NumPy Module==
NumPy is a module for Python. The name is an acronym for &quot;Numeric Python&quot;. It enriches Python with powerful data structures, implementing multi-dimensional arrays and matrices. To work with Artificial Intelligence, Machine Learning or Deep Learning NumPy is required.

&lt;b&gt; How is it superior to List &lt;/b&gt;
Operations on numpy arrays and matrices are easier than Lists.
Consider  the following

cvalues = [22.1, 22.8, 21.9, 22.5, 22.7, 22.3, 21.8, 21.2, 22.9, 22.1]

C = np.array(cvalues)

We would like to find the values into degrees Fahrenheit. This can be easily accomplished using a simple scalar multiplication:

print(C * 9 / 5 + 32)

Using Lists, it should have been

 fvalues = [ x*9/5 + 32 for x in cvalues] 

&lt;b&gt; Operations on numpy &lt;/b&gt;
&lt;table width=&quot;200&quot; border=&quot;1&quot;&gt;
  &lt;tr&gt;
    &lt;th scope=&quot;col&quot;&gt;Operations&lt;/th&gt;
    &lt;th scope=&quot;col&quot;&gt;Descriptions&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;import numpy as np &lt;/td&gt;
    &lt;td&gt;numpy is imported and can be accessed with a short name np&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;a=np.array([1,2,3])&lt;/td&gt;
    &lt;td&gt;One dimensional array 'a' is created&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;print(type(a))&lt;/td&gt;
    &lt;td&gt;&lt;class 'numpy.ndarray'&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;print(a.shape)&lt;/td&gt;
    &lt;td&gt;(3,)&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;print (a[0],a[1],a[2])&lt;/td&gt;
    &lt;td&gt;1 2 3&lt;/td&gt;
  &lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;b=np.array([[1,2,3],[4,5,6]])&lt;/td&gt;
    &lt;td&gt;Two dimensional array 'b' is created&lt;/td&gt;
  &lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;print(b.shape)&lt;/td&gt;
    &lt;td&gt;(2,3)&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;
[[#Top]]
=== NumPy Examples ===
importing numpy module is common to following examples.
&lt;pre&gt;import numpy as np&lt;/pre&gt;

'''Example: Print NumPy Array'''
&lt;pre&gt;
#pass list as argument to np.array
a=np.array([1,2,3])
print(a)
#Output: [1 2 3]
&lt;/pre&gt;

'''Example: Print type of numpy array'''
&lt;pre&gt;
#type of numpy array
print(type(a))
#Output: &lt;class 'numpy.ndarray'&gt;
&lt;/pre&gt;

'''Example: Print shape i.e.size of numpy array'''
&lt;pre&gt;
#shape of numpy array
print(a.shape)
#Output: (3,)
&lt;/pre&gt;

'''Example: Print elements of numpy using indexes'''
&lt;pre&gt;
#print elements of numpy using indexes
print(a[0], a[1], a[2])
#Output: 1 2 3
&lt;/pre&gt;

'''Example: Print shape of array: rows and columns'''
&lt;pre&gt;
b=np.array([[1,2,3],[4,5,6]])
print(b.shape)
#Output: (2, 3) - 2 rows and 3 columns
&lt;/pre&gt;

''' Example: 2x2 array of '0' '''
&lt;pre&gt;
#array of '0'
a=np.zeros((2,2))
print(a)
'''Output:
[[0. 0.]
 [0. 0.]]'''
&lt;/pre&gt;

''' Example: 2x2 array of '1' '''
&lt;pre&gt;
#array of '1'
b= np.ones((2,2))
print(b)
'''Output:
[[1. 1.]
 [1. 1.]]'''
&lt;/pre&gt;

''' Example: 2x2 array of '6' '''
&lt;pre&gt;
#2x2 array of 6
c= np.full((2,2),6)
print(c)
'''Output:
[[6 6]
 [6 6]]'''
&lt;/pre&gt;

''' Example: 2x2 array of random number '''
&lt;pre&gt;
#2x2 array of random number
d=np.random.random((2,2))
print(d)
'''Output:
 [[0.45937293 0.72546193]
 [0.28374715 0.63269858]]'''
&lt;/pre&gt;

'''Example: int32 Data type of array'''
&lt;pre&gt;
x=np.array([1,2])

#data type of x
print(x.dtype)
#Output : int32
&lt;/pre&gt;

'''Example: float64 Data type of array'''
&lt;pre&gt;
y=np.array([1.2,3])
print(y.dtype)
#Output: float64
&lt;/pre&gt;

'''Example: Specifically setting Data type of array as int64'''
&lt;pre&gt;
x=np.array([1,2], dtype=np.int64)
print(x.dtype)
#Output: int64
&lt;/pre&gt;
[[#Top]]

===NumPy array operations===
&lt;pre&gt;
import numpy as np
x=np.array([[1,2],[3,4]],dtype=np.float64)
y=np.array([[5,6],[7,8]],dtype=np.float64)
print(x)
'''Output:
[[1. 2.]
 [3. 4.]]'''
print(y)
'''Output:
[[5. 6.]
 [7. 8.]]
'''

print(x+y)
print(np.add(x,y))

'''
Output:
[[ 6.  8.]
 [10. 12.]]

[[ 6.  8.]
 [10. 12.]]
 '''

print(x-y)
print(np.subtract(x,y))
'''Output:
[[-4. -4.]
 [-4. -4.]]
[[-4. -4.]
 [-4. -4.]]
'''
print(x*y)
print(np.multiply(x,y))
'''Output:
[[ 5. 12.]
 [21. 32.]]
[[ 5. 12.]
 [21. 32.]]
'''
print(x/y)
'''Output:
[[0.2        0.33333333]
 [0.42857143 0.5       ]]
'''
print(np.sqrt(x))
'''Output:
[[1.         1.41421356]
 [1.73205081 2.        ]]
'''
print(np.sqrt(y))
'''Output:
[[2.23606798 2.44948974]
 [2.64575131 2.82842712]]
'''
#Transposition of matrix
np.array([[1,2],[3,4]])
print(x.T)
'''Output:
[[1. 3.]
 [2. 4.]]
 '''
#sum of all elements
print(np.sum(x))#Output:10.0
print(np.sum(x,axis=0))#Output:[4. 6.]
print(np.sum(x,axis=1))#Output:[3. 7.]

&lt;/pre&gt;

==Lossy Compression==
Compression in which data is lost during compression.

==Lossless Compression==
Compression in which data is not lost during compression.

We will use the black and white lena image from net.
[[File:Lena-Original-Image-512x512-pixels.png]]</text>
      <sha1>nda1qd8qizk7i7lnd8hyjr86l36o7gw</sha1>
    </revision>
    <revision>
      <id>4004</id>
      <parentid>4002</parentid>
      <timestamp>2018-10-02T09:34:28Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* Lossless Compression */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="8702">==Week 10 Download URL==
https://onlinecourses.nptel.ac.in/noc18_cs35/unit?unit=30&amp;lesson=31

=FLAMES - a Childhood play=
In childhood, we might have played a game called FLAMES to find the relationship (illusion!!) between a boy and a girl.  

All you have to do is

&lt;b&gt; Steps : &lt;/b&gt;
 1. write their names and strike out the common characters that occur in both their names.
 2. Count the remaining letters (SAY X)
 3. Write the word FLAMES and start counting from F and strike out the X&lt;sup&gt;th&lt;/sup&gt; letter till only one character remains
 4. If it is F - then the two are Friends. L - Love, A - Affection,  M - Marriage  E- Enemy S- Sister

&lt;table width=&quot;449&quot; height=&quot;116&quot; border=&quot;1&quot;&gt;
 &lt;tr&gt;
    &lt;td&gt;[[File:Flamestep1.JPG|300px]]&lt;/td&gt;
    &lt;td&gt;[[File:Flamestep2.JPG|300px]]&lt;/td&gt;
    &lt;td&gt;[[File:flamestep3.JPG|300px]]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td width = 200&gt;Remaining No. of Characters = 7&lt;/td&gt;
    &lt;td width = 200&gt;Counting from F, wrap over and strike the 7&lt;SUP&gt;th&lt;/SUP&gt; letter&lt;/td&gt;
    &lt;td width = 200&gt;The remaining letter denotes the relationship&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;
== Refresh the operations on Strings and Lists ==
&lt;table width=&quot;200&quot; border=&quot;1&quot;&gt;
  &lt;tr&gt;
    &lt;th scope=&quot;col&quot; width=100&gt;Functions&lt;/th&gt;
    &lt;th scope=&quot;col&quot; width=100&gt;Example&lt;/th&gt;
    &lt;th scope=&quot;col&quot; width=100&gt;Result&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;import &lt;/td&gt;
    &lt;td&gt;import string&lt;/td&gt;
    &lt;td&gt;import string module&lt;/td&gt;
  &lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;input a string&lt;/td&gt;
    &lt;td&gt;s = input()&lt;/td&gt;
    &lt;td&gt;input a string to the variable s&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Convert to lower case&lt;/td&gt;
    &lt;td&gt;print(s.lower())&lt;/td&gt;
    &lt;td &gt; raj &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Convert to upper case&lt;/td&gt;
    &lt;td&gt;print(s.upper())&lt;/td&gt;
    &lt;td&gt; RAJ&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Convert the string to list&lt;/td&gt;
    &lt;td&gt;s1 = list(s)&lt;/td&gt;
    &lt;td&gt;s1 will be ['R','a','j']&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Replace a character&lt;/td&gt;
    &lt;td&gt;print(s.replace(&quot;j&quot;,&quot;#&quot;))&lt;/td&gt;
    &lt;td&gt;'Ra#' .Note: the content of s is not changed.&lt;/td&gt;
  &lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;Replace more than one character&lt;/td&gt;
    &lt;td&gt;print(s.replace(&quot;aj&quot;,&quot;#&quot;))&lt;/td&gt;
    &lt;td&gt;'R#'&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;slice. l = ['a','b','c','d','e']&lt;/td&gt;
    &lt;td&gt;l[1:4]&lt;/td&gt;
    &lt;td&gt;['b', 'c', 'd'] &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;slice. Start index is missing &lt;/td&gt;
    &lt;td&gt;l[:4]&lt;/td&gt;
    &lt;td&gt; ['a', 'b', 'c', 'd']  Default is 0 if start index is omitted &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;slice. End index is missing &lt;/td&gt;
    &lt;td&gt;l[1:]&lt;/td&gt;
    &lt;td&gt; ['b', 'c', 'd', 'e'] Default is length of the list if end index is omitted&lt;/td&gt;
  &lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;slice. Both index missing &lt;/td&gt;
    &lt;td&gt;l[:]&lt;/td&gt;
    &lt;td&gt; ['a','b','c','d','e'] &lt;/td&gt;
  &lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;Index of first occurrence of a char.  &lt;/td&gt;
    &lt;td&gt;print(l.index('d'))&lt;/td&gt;
    &lt;td&gt; 3 &lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;
== Code as given by Vidya ==
&lt;pre&gt;
import string

def remove_matching_letter(l1,l2) :
    for i in range(len(l1)) :
        for j in range(len(l2)):
            if l1[i] == l2[j] :
                c = l1[i]
                l1.remove(c)
                l2.remove(c)
                l = l1 + ['*'] +l2
                return[l,True]
    l = l1+['*']+l2
    return[l,False]


p1 = input(&quot;Enter first person name:&quot;)
p1 = p1.lower()
p1=  p1.replace(&quot; &quot;,&quot;&quot;)

p2 = input(&quot;Enter Second person name:&quot;)
p2 = p2.lower()
p2 =  p2.replace(&quot; &quot;,&quot;&quot;)

l1 = list(p1)
l2 = list(p2)

proceed = True
while proceed:
    [con_list,proceed] = remove_matching_letter(l1,l2)
    star_index = con_list.index('*')
    l1 = con_list[:star_index]
    l2 = con_list[star_index+1:]
    
count = len(l1) + len(l2)
result = ['Friends','Love','Affection','Marriage','Enemy','Sibling']

while len(result) &gt; 1 :
    split_index = (count%len(result)) -1
    if split_index &gt;= 0 :
        right = result[split_index + 1 :]
        left = result[:split_index]
        result = right + left
    else :
        result = result[:len(result) -1]
print(result[0])
&lt;/pre&gt;

Output:

[[File:flameOutput.png]]

= Image Compression =
Suppose you have a web page with lots of images.  It will take more time to download.  To make downloading faster, either you remove the images or reduce the size of the images.  Both methods will not give a good or required result.  Instead you can do &lt;b&gt; Image Compression&lt;/b&gt;
==NumPy Module==
NumPy is a module for Python. The name is an acronym for &quot;Numeric Python&quot;. It enriches Python with powerful data structures, implementing multi-dimensional arrays and matrices. To work with Artificial Intelligence, Machine Learning or Deep Learning NumPy is required.

&lt;b&gt; How is it superior to List &lt;/b&gt;
Operations on numpy arrays and matrices are easier than Lists.
Consider  the following

cvalues = [22.1, 22.8, 21.9, 22.5, 22.7, 22.3, 21.8, 21.2, 22.9, 22.1]

C = np.array(cvalues)

We would like to find the values into degrees Fahrenheit. This can be easily accomplished using a simple scalar multiplication:

print(C * 9 / 5 + 32)

Using Lists, it should have been

 fvalues = [ x*9/5 + 32 for x in cvalues] 

&lt;b&gt; Operations on numpy &lt;/b&gt;
&lt;table width=&quot;200&quot; border=&quot;1&quot;&gt;
  &lt;tr&gt;
    &lt;th scope=&quot;col&quot;&gt;Operations&lt;/th&gt;
    &lt;th scope=&quot;col&quot;&gt;Descriptions&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;import numpy as np &lt;/td&gt;
    &lt;td&gt;numpy is imported and can be accessed with a short name np&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;a=np.array([1,2,3])&lt;/td&gt;
    &lt;td&gt;One dimensional array 'a' is created&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;print(type(a))&lt;/td&gt;
    &lt;td&gt;&lt;class 'numpy.ndarray'&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;print(a.shape)&lt;/td&gt;
    &lt;td&gt;(3,)&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;print (a[0],a[1],a[2])&lt;/td&gt;
    &lt;td&gt;1 2 3&lt;/td&gt;
  &lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;b=np.array([[1,2,3],[4,5,6]])&lt;/td&gt;
    &lt;td&gt;Two dimensional array 'b' is created&lt;/td&gt;
  &lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;print(b.shape)&lt;/td&gt;
    &lt;td&gt;(2,3)&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;
[[#Top]]
=== NumPy Examples ===
importing numpy module is common to following examples.
&lt;pre&gt;import numpy as np&lt;/pre&gt;

'''Example: Print NumPy Array'''
&lt;pre&gt;
#pass list as argument to np.array
a=np.array([1,2,3])
print(a)
#Output: [1 2 3]
&lt;/pre&gt;

'''Example: Print type of numpy array'''
&lt;pre&gt;
#type of numpy array
print(type(a))
#Output: &lt;class 'numpy.ndarray'&gt;
&lt;/pre&gt;

'''Example: Print shape i.e.size of numpy array'''
&lt;pre&gt;
#shape of numpy array
print(a.shape)
#Output: (3,)
&lt;/pre&gt;

'''Example: Print elements of numpy using indexes'''
&lt;pre&gt;
#print elements of numpy using indexes
print(a[0], a[1], a[2])
#Output: 1 2 3
&lt;/pre&gt;

'''Example: Print shape of array: rows and columns'''
&lt;pre&gt;
b=np.array([[1,2,3],[4,5,6]])
print(b.shape)
#Output: (2, 3) - 2 rows and 3 columns
&lt;/pre&gt;

''' Example: 2x2 array of '0' '''
&lt;pre&gt;
#array of '0'
a=np.zeros((2,2))
print(a)
'''Output:
[[0. 0.]
 [0. 0.]]'''
&lt;/pre&gt;

''' Example: 2x2 array of '1' '''
&lt;pre&gt;
#array of '1'
b= np.ones((2,2))
print(b)
'''Output:
[[1. 1.]
 [1. 1.]]'''
&lt;/pre&gt;

''' Example: 2x2 array of '6' '''
&lt;pre&gt;
#2x2 array of 6
c= np.full((2,2),6)
print(c)
'''Output:
[[6 6]
 [6 6]]'''
&lt;/pre&gt;

''' Example: 2x2 array of random number '''
&lt;pre&gt;
#2x2 array of random number
d=np.random.random((2,2))
print(d)
'''Output:
 [[0.45937293 0.72546193]
 [0.28374715 0.63269858]]'''
&lt;/pre&gt;

'''Example: int32 Data type of array'''
&lt;pre&gt;
x=np.array([1,2])

#data type of x
print(x.dtype)
#Output : int32
&lt;/pre&gt;

'''Example: float64 Data type of array'''
&lt;pre&gt;
y=np.array([1.2,3])
print(y.dtype)
#Output: float64
&lt;/pre&gt;

'''Example: Specifically setting Data type of array as int64'''
&lt;pre&gt;
x=np.array([1,2], dtype=np.int64)
print(x.dtype)
#Output: int64
&lt;/pre&gt;
[[#Top]]

===NumPy array operations===
&lt;pre&gt;
import numpy as np
x=np.array([[1,2],[3,4]],dtype=np.float64)
y=np.array([[5,6],[7,8]],dtype=np.float64)
print(x)
'''Output:
[[1. 2.]
 [3. 4.]]'''
print(y)
'''Output:
[[5. 6.]
 [7. 8.]]
'''

print(x+y)
print(np.add(x,y))

'''
Output:
[[ 6.  8.]
 [10. 12.]]

[[ 6.  8.]
 [10. 12.]]
 '''

print(x-y)
print(np.subtract(x,y))
'''Output:
[[-4. -4.]
 [-4. -4.]]
[[-4. -4.]
 [-4. -4.]]
'''
print(x*y)
print(np.multiply(x,y))
'''Output:
[[ 5. 12.]
 [21. 32.]]
[[ 5. 12.]
 [21. 32.]]
'''
print(x/y)
'''Output:
[[0.2        0.33333333]
 [0.42857143 0.5       ]]
'''
print(np.sqrt(x))
'''Output:
[[1.         1.41421356]
 [1.73205081 2.        ]]
'''
print(np.sqrt(y))
'''Output:
[[2.23606798 2.44948974]
 [2.64575131 2.82842712]]
'''
#Transposition of matrix
np.array([[1,2],[3,4]])
print(x.T)
'''Output:
[[1. 3.]
 [2. 4.]]
 '''
#sum of all elements
print(np.sum(x))#Output:10.0
print(np.sum(x,axis=0))#Output:[4. 6.]
print(np.sum(x,axis=1))#Output:[3. 7.]

&lt;/pre&gt;

==Lossy Compression==
Compression in which data is lost during compression.

==Lossless Compression==
Compression in which data is not lost during compression.

==Compression coding==
We will use the black and white lena image from net.
[[File:Lena-Original-Image-512x512-pixels.png]]</text>
      <sha1>444bqblohzdxov7z25v6rviwebni0pw</sha1>
    </revision>
    <revision>
      <id>4006</id>
      <parentid>4004</parentid>
      <timestamp>2018-10-02T10:00:10Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* Compression coding */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="9353">==Week 10 Download URL==
https://onlinecourses.nptel.ac.in/noc18_cs35/unit?unit=30&amp;lesson=31

=FLAMES - a Childhood play=
In childhood, we might have played a game called FLAMES to find the relationship (illusion!!) between a boy and a girl.  

All you have to do is

&lt;b&gt; Steps : &lt;/b&gt;
 1. write their names and strike out the common characters that occur in both their names.
 2. Count the remaining letters (SAY X)
 3. Write the word FLAMES and start counting from F and strike out the X&lt;sup&gt;th&lt;/sup&gt; letter till only one character remains
 4. If it is F - then the two are Friends. L - Love, A - Affection,  M - Marriage  E- Enemy S- Sister

&lt;table width=&quot;449&quot; height=&quot;116&quot; border=&quot;1&quot;&gt;
 &lt;tr&gt;
    &lt;td&gt;[[File:Flamestep1.JPG|300px]]&lt;/td&gt;
    &lt;td&gt;[[File:Flamestep2.JPG|300px]]&lt;/td&gt;
    &lt;td&gt;[[File:flamestep3.JPG|300px]]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td width = 200&gt;Remaining No. of Characters = 7&lt;/td&gt;
    &lt;td width = 200&gt;Counting from F, wrap over and strike the 7&lt;SUP&gt;th&lt;/SUP&gt; letter&lt;/td&gt;
    &lt;td width = 200&gt;The remaining letter denotes the relationship&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;
== Refresh the operations on Strings and Lists ==
&lt;table width=&quot;200&quot; border=&quot;1&quot;&gt;
  &lt;tr&gt;
    &lt;th scope=&quot;col&quot; width=100&gt;Functions&lt;/th&gt;
    &lt;th scope=&quot;col&quot; width=100&gt;Example&lt;/th&gt;
    &lt;th scope=&quot;col&quot; width=100&gt;Result&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;import &lt;/td&gt;
    &lt;td&gt;import string&lt;/td&gt;
    &lt;td&gt;import string module&lt;/td&gt;
  &lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;input a string&lt;/td&gt;
    &lt;td&gt;s = input()&lt;/td&gt;
    &lt;td&gt;input a string to the variable s&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Convert to lower case&lt;/td&gt;
    &lt;td&gt;print(s.lower())&lt;/td&gt;
    &lt;td &gt; raj &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Convert to upper case&lt;/td&gt;
    &lt;td&gt;print(s.upper())&lt;/td&gt;
    &lt;td&gt; RAJ&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Convert the string to list&lt;/td&gt;
    &lt;td&gt;s1 = list(s)&lt;/td&gt;
    &lt;td&gt;s1 will be ['R','a','j']&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Replace a character&lt;/td&gt;
    &lt;td&gt;print(s.replace(&quot;j&quot;,&quot;#&quot;))&lt;/td&gt;
    &lt;td&gt;'Ra#' .Note: the content of s is not changed.&lt;/td&gt;
  &lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;Replace more than one character&lt;/td&gt;
    &lt;td&gt;print(s.replace(&quot;aj&quot;,&quot;#&quot;))&lt;/td&gt;
    &lt;td&gt;'R#'&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;slice. l = ['a','b','c','d','e']&lt;/td&gt;
    &lt;td&gt;l[1:4]&lt;/td&gt;
    &lt;td&gt;['b', 'c', 'd'] &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;slice. Start index is missing &lt;/td&gt;
    &lt;td&gt;l[:4]&lt;/td&gt;
    &lt;td&gt; ['a', 'b', 'c', 'd']  Default is 0 if start index is omitted &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;slice. End index is missing &lt;/td&gt;
    &lt;td&gt;l[1:]&lt;/td&gt;
    &lt;td&gt; ['b', 'c', 'd', 'e'] Default is length of the list if end index is omitted&lt;/td&gt;
  &lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;slice. Both index missing &lt;/td&gt;
    &lt;td&gt;l[:]&lt;/td&gt;
    &lt;td&gt; ['a','b','c','d','e'] &lt;/td&gt;
  &lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;Index of first occurrence of a char.  &lt;/td&gt;
    &lt;td&gt;print(l.index('d'))&lt;/td&gt;
    &lt;td&gt; 3 &lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;
== Code as given by Vidya ==
&lt;pre&gt;
import string

def remove_matching_letter(l1,l2) :
    for i in range(len(l1)) :
        for j in range(len(l2)):
            if l1[i] == l2[j] :
                c = l1[i]
                l1.remove(c)
                l2.remove(c)
                l = l1 + ['*'] +l2
                return[l,True]
    l = l1+['*']+l2
    return[l,False]


p1 = input(&quot;Enter first person name:&quot;)
p1 = p1.lower()
p1=  p1.replace(&quot; &quot;,&quot;&quot;)

p2 = input(&quot;Enter Second person name:&quot;)
p2 = p2.lower()
p2 =  p2.replace(&quot; &quot;,&quot;&quot;)

l1 = list(p1)
l2 = list(p2)

proceed = True
while proceed:
    [con_list,proceed] = remove_matching_letter(l1,l2)
    star_index = con_list.index('*')
    l1 = con_list[:star_index]
    l2 = con_list[star_index+1:]
    
count = len(l1) + len(l2)
result = ['Friends','Love','Affection','Marriage','Enemy','Sibling']

while len(result) &gt; 1 :
    split_index = (count%len(result)) -1
    if split_index &gt;= 0 :
        right = result[split_index + 1 :]
        left = result[:split_index]
        result = right + left
    else :
        result = result[:len(result) -1]
print(result[0])
&lt;/pre&gt;

Output:

[[File:flameOutput.png]]

= Image Compression =
Suppose you have a web page with lots of images.  It will take more time to download.  To make downloading faster, either you remove the images or reduce the size of the images.  Both methods will not give a good or required result.  Instead you can do &lt;b&gt; Image Compression&lt;/b&gt;
==NumPy Module==
NumPy is a module for Python. The name is an acronym for &quot;Numeric Python&quot;. It enriches Python with powerful data structures, implementing multi-dimensional arrays and matrices. To work with Artificial Intelligence, Machine Learning or Deep Learning NumPy is required.

&lt;b&gt; How is it superior to List &lt;/b&gt;
Operations on numpy arrays and matrices are easier than Lists.
Consider  the following

cvalues = [22.1, 22.8, 21.9, 22.5, 22.7, 22.3, 21.8, 21.2, 22.9, 22.1]

C = np.array(cvalues)

We would like to find the values into degrees Fahrenheit. This can be easily accomplished using a simple scalar multiplication:

print(C * 9 / 5 + 32)

Using Lists, it should have been

 fvalues = [ x*9/5 + 32 for x in cvalues] 

&lt;b&gt; Operations on numpy &lt;/b&gt;
&lt;table width=&quot;200&quot; border=&quot;1&quot;&gt;
  &lt;tr&gt;
    &lt;th scope=&quot;col&quot;&gt;Operations&lt;/th&gt;
    &lt;th scope=&quot;col&quot;&gt;Descriptions&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;import numpy as np &lt;/td&gt;
    &lt;td&gt;numpy is imported and can be accessed with a short name np&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;a=np.array([1,2,3])&lt;/td&gt;
    &lt;td&gt;One dimensional array 'a' is created&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;print(type(a))&lt;/td&gt;
    &lt;td&gt;&lt;class 'numpy.ndarray'&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;print(a.shape)&lt;/td&gt;
    &lt;td&gt;(3,)&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;print (a[0],a[1],a[2])&lt;/td&gt;
    &lt;td&gt;1 2 3&lt;/td&gt;
  &lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;b=np.array([[1,2,3],[4,5,6]])&lt;/td&gt;
    &lt;td&gt;Two dimensional array 'b' is created&lt;/td&gt;
  &lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;print(b.shape)&lt;/td&gt;
    &lt;td&gt;(2,3)&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;
[[#Top]]
=== NumPy Examples ===
importing numpy module is common to following examples.
&lt;pre&gt;import numpy as np&lt;/pre&gt;

'''Example: Print NumPy Array'''
&lt;pre&gt;
#pass list as argument to np.array
a=np.array([1,2,3])
print(a)
#Output: [1 2 3]
&lt;/pre&gt;

'''Example: Print type of numpy array'''
&lt;pre&gt;
#type of numpy array
print(type(a))
#Output: &lt;class 'numpy.ndarray'&gt;
&lt;/pre&gt;

'''Example: Print shape i.e.size of numpy array'''
&lt;pre&gt;
#shape of numpy array
print(a.shape)
#Output: (3,)
&lt;/pre&gt;

'''Example: Print elements of numpy using indexes'''
&lt;pre&gt;
#print elements of numpy using indexes
print(a[0], a[1], a[2])
#Output: 1 2 3
&lt;/pre&gt;

'''Example: Print shape of array: rows and columns'''
&lt;pre&gt;
b=np.array([[1,2,3],[4,5,6]])
print(b.shape)
#Output: (2, 3) - 2 rows and 3 columns
&lt;/pre&gt;

''' Example: 2x2 array of '0' '''
&lt;pre&gt;
#array of '0'
a=np.zeros((2,2))
print(a)
'''Output:
[[0. 0.]
 [0. 0.]]'''
&lt;/pre&gt;

''' Example: 2x2 array of '1' '''
&lt;pre&gt;
#array of '1'
b= np.ones((2,2))
print(b)
'''Output:
[[1. 1.]
 [1. 1.]]'''
&lt;/pre&gt;

''' Example: 2x2 array of '6' '''
&lt;pre&gt;
#2x2 array of 6
c= np.full((2,2),6)
print(c)
'''Output:
[[6 6]
 [6 6]]'''
&lt;/pre&gt;

''' Example: 2x2 array of random number '''
&lt;pre&gt;
#2x2 array of random number
d=np.random.random((2,2))
print(d)
'''Output:
 [[0.45937293 0.72546193]
 [0.28374715 0.63269858]]'''
&lt;/pre&gt;

'''Example: int32 Data type of array'''
&lt;pre&gt;
x=np.array([1,2])

#data type of x
print(x.dtype)
#Output : int32
&lt;/pre&gt;

'''Example: float64 Data type of array'''
&lt;pre&gt;
y=np.array([1.2,3])
print(y.dtype)
#Output: float64
&lt;/pre&gt;

'''Example: Specifically setting Data type of array as int64'''
&lt;pre&gt;
x=np.array([1,2], dtype=np.int64)
print(x.dtype)
#Output: int64
&lt;/pre&gt;
[[#Top]]

===NumPy array operations===
&lt;pre&gt;
import numpy as np
x=np.array([[1,2],[3,4]],dtype=np.float64)
y=np.array([[5,6],[7,8]],dtype=np.float64)
print(x)
'''Output:
[[1. 2.]
 [3. 4.]]'''
print(y)
'''Output:
[[5. 6.]
 [7. 8.]]
'''

print(x+y)
print(np.add(x,y))

'''
Output:
[[ 6.  8.]
 [10. 12.]]

[[ 6.  8.]
 [10. 12.]]
 '''

print(x-y)
print(np.subtract(x,y))
'''Output:
[[-4. -4.]
 [-4. -4.]]
[[-4. -4.]
 [-4. -4.]]
'''
print(x*y)
print(np.multiply(x,y))
'''Output:
[[ 5. 12.]
 [21. 32.]]
[[ 5. 12.]
 [21. 32.]]
'''
print(x/y)
'''Output:
[[0.2        0.33333333]
 [0.42857143 0.5       ]]
'''
print(np.sqrt(x))
'''Output:
[[1.         1.41421356]
 [1.73205081 2.        ]]
'''
print(np.sqrt(y))
'''Output:
[[2.23606798 2.44948974]
 [2.64575131 2.82842712]]
'''
#Transposition of matrix
np.array([[1,2],[3,4]])
print(x.T)
'''Output:
[[1. 3.]
 [2. 4.]]
 '''
#sum of all elements
print(np.sum(x))#Output:10.0
print(np.sum(x,axis=0))#Output:[4. 6.]
print(np.sum(x,axis=1))#Output:[3. 7.]

&lt;/pre&gt;

==Lossy Compression==
Compression in which data is lost during compression.

==Lossless Compression==
Compression in which data is not lost during compression.

==Compression coding==
We will use the black and white ''lena'' image from net.
[[File:Lena-Original-Image-512x512-pixels.png]]


'''Output:
[[[159 159 159]
  [159 159 159]
  [158 158 158]
  ...
  [168 168 168]
  [151 151 151]
  [119 119 119]]

 [[159 159 159]
  [159 159 159]
  [158 158 158]
  ...
  [168 168 168]
  [151 151 151]
  [119 119 119]]

 [[159 159 159]
  [159 159 159]
  [158 158 158]
  ...
  [168 168 168]
  [151 151 151]
  [119 119 119]]

 ...

 [[ 20  20  20]
  [ 29  29  29]
  [ 25  25  25]
  ...
  [ 91  91  91]
  [ 87  87  87]
  [ 84  84  84]]

 [[ 22  22  22]
  [ 34  34  34]
  [ 30  30  30]
  ...
  [ 91  91  91]
  [ 93  93  93]
  [ 96  96  96]]

 [[ 22  22  22]
  [ 34  34  34]
  [ 30  30  30]
  ...
  [ 91  91  91]
  [ 93  93  93]
  [ 96  96  96]]]
'''</text>
      <sha1>hkecw4qwcciiweqlgqltd2hanh1jacf</sha1>
    </revision>
    <revision>
      <id>4007</id>
      <parentid>4006</parentid>
      <timestamp>2018-10-02T10:03:43Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* Compression coding */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="9482">==Week 10 Download URL==
https://onlinecourses.nptel.ac.in/noc18_cs35/unit?unit=30&amp;lesson=31

=FLAMES - a Childhood play=
In childhood, we might have played a game called FLAMES to find the relationship (illusion!!) between a boy and a girl.  

All you have to do is

&lt;b&gt; Steps : &lt;/b&gt;
 1. write their names and strike out the common characters that occur in both their names.
 2. Count the remaining letters (SAY X)
 3. Write the word FLAMES and start counting from F and strike out the X&lt;sup&gt;th&lt;/sup&gt; letter till only one character remains
 4. If it is F - then the two are Friends. L - Love, A - Affection,  M - Marriage  E- Enemy S- Sister

&lt;table width=&quot;449&quot; height=&quot;116&quot; border=&quot;1&quot;&gt;
 &lt;tr&gt;
    &lt;td&gt;[[File:Flamestep1.JPG|300px]]&lt;/td&gt;
    &lt;td&gt;[[File:Flamestep2.JPG|300px]]&lt;/td&gt;
    &lt;td&gt;[[File:flamestep3.JPG|300px]]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td width = 200&gt;Remaining No. of Characters = 7&lt;/td&gt;
    &lt;td width = 200&gt;Counting from F, wrap over and strike the 7&lt;SUP&gt;th&lt;/SUP&gt; letter&lt;/td&gt;
    &lt;td width = 200&gt;The remaining letter denotes the relationship&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;
== Refresh the operations on Strings and Lists ==
&lt;table width=&quot;200&quot; border=&quot;1&quot;&gt;
  &lt;tr&gt;
    &lt;th scope=&quot;col&quot; width=100&gt;Functions&lt;/th&gt;
    &lt;th scope=&quot;col&quot; width=100&gt;Example&lt;/th&gt;
    &lt;th scope=&quot;col&quot; width=100&gt;Result&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;import &lt;/td&gt;
    &lt;td&gt;import string&lt;/td&gt;
    &lt;td&gt;import string module&lt;/td&gt;
  &lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;input a string&lt;/td&gt;
    &lt;td&gt;s = input()&lt;/td&gt;
    &lt;td&gt;input a string to the variable s&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Convert to lower case&lt;/td&gt;
    &lt;td&gt;print(s.lower())&lt;/td&gt;
    &lt;td &gt; raj &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Convert to upper case&lt;/td&gt;
    &lt;td&gt;print(s.upper())&lt;/td&gt;
    &lt;td&gt; RAJ&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Convert the string to list&lt;/td&gt;
    &lt;td&gt;s1 = list(s)&lt;/td&gt;
    &lt;td&gt;s1 will be ['R','a','j']&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Replace a character&lt;/td&gt;
    &lt;td&gt;print(s.replace(&quot;j&quot;,&quot;#&quot;))&lt;/td&gt;
    &lt;td&gt;'Ra#' .Note: the content of s is not changed.&lt;/td&gt;
  &lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;Replace more than one character&lt;/td&gt;
    &lt;td&gt;print(s.replace(&quot;aj&quot;,&quot;#&quot;))&lt;/td&gt;
    &lt;td&gt;'R#'&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;slice. l = ['a','b','c','d','e']&lt;/td&gt;
    &lt;td&gt;l[1:4]&lt;/td&gt;
    &lt;td&gt;['b', 'c', 'd'] &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;slice. Start index is missing &lt;/td&gt;
    &lt;td&gt;l[:4]&lt;/td&gt;
    &lt;td&gt; ['a', 'b', 'c', 'd']  Default is 0 if start index is omitted &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;slice. End index is missing &lt;/td&gt;
    &lt;td&gt;l[1:]&lt;/td&gt;
    &lt;td&gt; ['b', 'c', 'd', 'e'] Default is length of the list if end index is omitted&lt;/td&gt;
  &lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;slice. Both index missing &lt;/td&gt;
    &lt;td&gt;l[:]&lt;/td&gt;
    &lt;td&gt; ['a','b','c','d','e'] &lt;/td&gt;
  &lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;Index of first occurrence of a char.  &lt;/td&gt;
    &lt;td&gt;print(l.index('d'))&lt;/td&gt;
    &lt;td&gt; 3 &lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;
== Code as given by Vidya ==
&lt;pre&gt;
import string

def remove_matching_letter(l1,l2) :
    for i in range(len(l1)) :
        for j in range(len(l2)):
            if l1[i] == l2[j] :
                c = l1[i]
                l1.remove(c)
                l2.remove(c)
                l = l1 + ['*'] +l2
                return[l,True]
    l = l1+['*']+l2
    return[l,False]


p1 = input(&quot;Enter first person name:&quot;)
p1 = p1.lower()
p1=  p1.replace(&quot; &quot;,&quot;&quot;)

p2 = input(&quot;Enter Second person name:&quot;)
p2 = p2.lower()
p2 =  p2.replace(&quot; &quot;,&quot;&quot;)

l1 = list(p1)
l2 = list(p2)

proceed = True
while proceed:
    [con_list,proceed] = remove_matching_letter(l1,l2)
    star_index = con_list.index('*')
    l1 = con_list[:star_index]
    l2 = con_list[star_index+1:]
    
count = len(l1) + len(l2)
result = ['Friends','Love','Affection','Marriage','Enemy','Sibling']

while len(result) &gt; 1 :
    split_index = (count%len(result)) -1
    if split_index &gt;= 0 :
        right = result[split_index + 1 :]
        left = result[:split_index]
        result = right + left
    else :
        result = result[:len(result) -1]
print(result[0])
&lt;/pre&gt;

Output:

[[File:flameOutput.png]]

= Image Compression =
Suppose you have a web page with lots of images.  It will take more time to download.  To make downloading faster, either you remove the images or reduce the size of the images.  Both methods will not give a good or required result.  Instead you can do &lt;b&gt; Image Compression&lt;/b&gt;
==NumPy Module==
NumPy is a module for Python. The name is an acronym for &quot;Numeric Python&quot;. It enriches Python with powerful data structures, implementing multi-dimensional arrays and matrices. To work with Artificial Intelligence, Machine Learning or Deep Learning NumPy is required.

&lt;b&gt; How is it superior to List &lt;/b&gt;
Operations on numpy arrays and matrices are easier than Lists.
Consider  the following

cvalues = [22.1, 22.8, 21.9, 22.5, 22.7, 22.3, 21.8, 21.2, 22.9, 22.1]

C = np.array(cvalues)

We would like to find the values into degrees Fahrenheit. This can be easily accomplished using a simple scalar multiplication:

print(C * 9 / 5 + 32)

Using Lists, it should have been

 fvalues = [ x*9/5 + 32 for x in cvalues] 

&lt;b&gt; Operations on numpy &lt;/b&gt;
&lt;table width=&quot;200&quot; border=&quot;1&quot;&gt;
  &lt;tr&gt;
    &lt;th scope=&quot;col&quot;&gt;Operations&lt;/th&gt;
    &lt;th scope=&quot;col&quot;&gt;Descriptions&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;import numpy as np &lt;/td&gt;
    &lt;td&gt;numpy is imported and can be accessed with a short name np&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;a=np.array([1,2,3])&lt;/td&gt;
    &lt;td&gt;One dimensional array 'a' is created&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;print(type(a))&lt;/td&gt;
    &lt;td&gt;&lt;class 'numpy.ndarray'&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;print(a.shape)&lt;/td&gt;
    &lt;td&gt;(3,)&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;print (a[0],a[1],a[2])&lt;/td&gt;
    &lt;td&gt;1 2 3&lt;/td&gt;
  &lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;b=np.array([[1,2,3],[4,5,6]])&lt;/td&gt;
    &lt;td&gt;Two dimensional array 'b' is created&lt;/td&gt;
  &lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;print(b.shape)&lt;/td&gt;
    &lt;td&gt;(2,3)&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;
[[#Top]]
=== NumPy Examples ===
importing numpy module is common to following examples.
&lt;pre&gt;import numpy as np&lt;/pre&gt;

'''Example: Print NumPy Array'''
&lt;pre&gt;
#pass list as argument to np.array
a=np.array([1,2,3])
print(a)
#Output: [1 2 3]
&lt;/pre&gt;

'''Example: Print type of numpy array'''
&lt;pre&gt;
#type of numpy array
print(type(a))
#Output: &lt;class 'numpy.ndarray'&gt;
&lt;/pre&gt;

'''Example: Print shape i.e.size of numpy array'''
&lt;pre&gt;
#shape of numpy array
print(a.shape)
#Output: (3,)
&lt;/pre&gt;

'''Example: Print elements of numpy using indexes'''
&lt;pre&gt;
#print elements of numpy using indexes
print(a[0], a[1], a[2])
#Output: 1 2 3
&lt;/pre&gt;

'''Example: Print shape of array: rows and columns'''
&lt;pre&gt;
b=np.array([[1,2,3],[4,5,6]])
print(b.shape)
#Output: (2, 3) - 2 rows and 3 columns
&lt;/pre&gt;

''' Example: 2x2 array of '0' '''
&lt;pre&gt;
#array of '0'
a=np.zeros((2,2))
print(a)
'''Output:
[[0. 0.]
 [0. 0.]]'''
&lt;/pre&gt;

''' Example: 2x2 array of '1' '''
&lt;pre&gt;
#array of '1'
b= np.ones((2,2))
print(b)
'''Output:
[[1. 1.]
 [1. 1.]]'''
&lt;/pre&gt;

''' Example: 2x2 array of '6' '''
&lt;pre&gt;
#2x2 array of 6
c= np.full((2,2),6)
print(c)
'''Output:
[[6 6]
 [6 6]]'''
&lt;/pre&gt;

''' Example: 2x2 array of random number '''
&lt;pre&gt;
#2x2 array of random number
d=np.random.random((2,2))
print(d)
'''Output:
 [[0.45937293 0.72546193]
 [0.28374715 0.63269858]]'''
&lt;/pre&gt;

'''Example: int32 Data type of array'''
&lt;pre&gt;
x=np.array([1,2])

#data type of x
print(x.dtype)
#Output : int32
&lt;/pre&gt;

'''Example: float64 Data type of array'''
&lt;pre&gt;
y=np.array([1.2,3])
print(y.dtype)
#Output: float64
&lt;/pre&gt;

'''Example: Specifically setting Data type of array as int64'''
&lt;pre&gt;
x=np.array([1,2], dtype=np.int64)
print(x.dtype)
#Output: int64
&lt;/pre&gt;
[[#Top]]

===NumPy array operations===
&lt;pre&gt;
import numpy as np
x=np.array([[1,2],[3,4]],dtype=np.float64)
y=np.array([[5,6],[7,8]],dtype=np.float64)
print(x)
'''Output:
[[1. 2.]
 [3. 4.]]'''
print(y)
'''Output:
[[5. 6.]
 [7. 8.]]
'''

print(x+y)
print(np.add(x,y))

'''
Output:
[[ 6.  8.]
 [10. 12.]]

[[ 6.  8.]
 [10. 12.]]
 '''

print(x-y)
print(np.subtract(x,y))
'''Output:
[[-4. -4.]
 [-4. -4.]]
[[-4. -4.]
 [-4. -4.]]
'''
print(x*y)
print(np.multiply(x,y))
'''Output:
[[ 5. 12.]
 [21. 32.]]
[[ 5. 12.]
 [21. 32.]]
'''
print(x/y)
'''Output:
[[0.2        0.33333333]
 [0.42857143 0.5       ]]
'''
print(np.sqrt(x))
'''Output:
[[1.         1.41421356]
 [1.73205081 2.        ]]
'''
print(np.sqrt(y))
'''Output:
[[2.23606798 2.44948974]
 [2.64575131 2.82842712]]
'''
#Transposition of matrix
np.array([[1,2],[3,4]])
print(x.T)
'''Output:
[[1. 3.]
 [2. 4.]]
 '''
#sum of all elements
print(np.sum(x))#Output:10.0
print(np.sum(x,axis=0))#Output:[4. 6.]
print(np.sum(x,axis=1))#Output:[3. 7.]

&lt;/pre&gt;

==Lossy Compression==
Compression in which data is lost during compression.

==Lossless Compression==
Compression in which data is not lost during compression.

==Compression coding==
We will use the black and white ''lena'' image from net.
[[File:Lena-Original-Image-512x512-pixels.png]]

&lt;pre&gt;
import numpy
from PIL import Image
I=numpy.asanyarray(Image.open('Lena-Original-Image-512x512-pixels.png'))
print(I)
&lt;/pre&gt;
'''Output:
[[[159 159 159]
  [159 159 159]
  [158 158 158]
  ...
  [168 168 168]
  [151 151 151]
  [119 119 119]]

 [[159 159 159]
  [159 159 159]
  [158 158 158]
  ...
  [168 168 168]
  [151 151 151]
  [119 119 119]]

 [[159 159 159]
  [159 159 159]
  [158 158 158]
  ...
  [168 168 168]
  [151 151 151]
  [119 119 119]]

 ...

 [[ 20  20  20]
  [ 29  29  29]
  [ 25  25  25]
  ...
  [ 91  91  91]
  [ 87  87  87]
  [ 84  84  84]]

 [[ 22  22  22]
  [ 34  34  34]
  [ 30  30  30]
  ...
  [ 91  91  91]
  [ 93  93  93]
  [ 96  96  96]]

 [[ 22  22  22]
  [ 34  34  34]
  [ 30  30  30]
  ...
  [ 91  91  91]
  [ 93  93  93]
  [ 96  96  96]]]
'''</text>
      <sha1>8iwt8tyofhtt8vnrfpc3fh0bzk45xuj</sha1>
    </revision>
    <revision>
      <id>4008</id>
      <parentid>4007</parentid>
      <timestamp>2018-10-02T10:36:20Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* Compression coding */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="9627">==Week 10 Download URL==
https://onlinecourses.nptel.ac.in/noc18_cs35/unit?unit=30&amp;lesson=31

=FLAMES - a Childhood play=
In childhood, we might have played a game called FLAMES to find the relationship (illusion!!) between a boy and a girl.  

All you have to do is

&lt;b&gt; Steps : &lt;/b&gt;
 1. write their names and strike out the common characters that occur in both their names.
 2. Count the remaining letters (SAY X)
 3. Write the word FLAMES and start counting from F and strike out the X&lt;sup&gt;th&lt;/sup&gt; letter till only one character remains
 4. If it is F - then the two are Friends. L - Love, A - Affection,  M - Marriage  E- Enemy S- Sister

&lt;table width=&quot;449&quot; height=&quot;116&quot; border=&quot;1&quot;&gt;
 &lt;tr&gt;
    &lt;td&gt;[[File:Flamestep1.JPG|300px]]&lt;/td&gt;
    &lt;td&gt;[[File:Flamestep2.JPG|300px]]&lt;/td&gt;
    &lt;td&gt;[[File:flamestep3.JPG|300px]]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td width = 200&gt;Remaining No. of Characters = 7&lt;/td&gt;
    &lt;td width = 200&gt;Counting from F, wrap over and strike the 7&lt;SUP&gt;th&lt;/SUP&gt; letter&lt;/td&gt;
    &lt;td width = 200&gt;The remaining letter denotes the relationship&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;
== Refresh the operations on Strings and Lists ==
&lt;table width=&quot;200&quot; border=&quot;1&quot;&gt;
  &lt;tr&gt;
    &lt;th scope=&quot;col&quot; width=100&gt;Functions&lt;/th&gt;
    &lt;th scope=&quot;col&quot; width=100&gt;Example&lt;/th&gt;
    &lt;th scope=&quot;col&quot; width=100&gt;Result&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;import &lt;/td&gt;
    &lt;td&gt;import string&lt;/td&gt;
    &lt;td&gt;import string module&lt;/td&gt;
  &lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;input a string&lt;/td&gt;
    &lt;td&gt;s = input()&lt;/td&gt;
    &lt;td&gt;input a string to the variable s&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Convert to lower case&lt;/td&gt;
    &lt;td&gt;print(s.lower())&lt;/td&gt;
    &lt;td &gt; raj &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Convert to upper case&lt;/td&gt;
    &lt;td&gt;print(s.upper())&lt;/td&gt;
    &lt;td&gt; RAJ&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Convert the string to list&lt;/td&gt;
    &lt;td&gt;s1 = list(s)&lt;/td&gt;
    &lt;td&gt;s1 will be ['R','a','j']&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Replace a character&lt;/td&gt;
    &lt;td&gt;print(s.replace(&quot;j&quot;,&quot;#&quot;))&lt;/td&gt;
    &lt;td&gt;'Ra#' .Note: the content of s is not changed.&lt;/td&gt;
  &lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;Replace more than one character&lt;/td&gt;
    &lt;td&gt;print(s.replace(&quot;aj&quot;,&quot;#&quot;))&lt;/td&gt;
    &lt;td&gt;'R#'&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;slice. l = ['a','b','c','d','e']&lt;/td&gt;
    &lt;td&gt;l[1:4]&lt;/td&gt;
    &lt;td&gt;['b', 'c', 'd'] &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;slice. Start index is missing &lt;/td&gt;
    &lt;td&gt;l[:4]&lt;/td&gt;
    &lt;td&gt; ['a', 'b', 'c', 'd']  Default is 0 if start index is omitted &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;slice. End index is missing &lt;/td&gt;
    &lt;td&gt;l[1:]&lt;/td&gt;
    &lt;td&gt; ['b', 'c', 'd', 'e'] Default is length of the list if end index is omitted&lt;/td&gt;
  &lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;slice. Both index missing &lt;/td&gt;
    &lt;td&gt;l[:]&lt;/td&gt;
    &lt;td&gt; ['a','b','c','d','e'] &lt;/td&gt;
  &lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;Index of first occurrence of a char.  &lt;/td&gt;
    &lt;td&gt;print(l.index('d'))&lt;/td&gt;
    &lt;td&gt; 3 &lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;
== Code as given by Vidya ==
&lt;pre&gt;
import string

def remove_matching_letter(l1,l2) :
    for i in range(len(l1)) :
        for j in range(len(l2)):
            if l1[i] == l2[j] :
                c = l1[i]
                l1.remove(c)
                l2.remove(c)
                l = l1 + ['*'] +l2
                return[l,True]
    l = l1+['*']+l2
    return[l,False]


p1 = input(&quot;Enter first person name:&quot;)
p1 = p1.lower()
p1=  p1.replace(&quot; &quot;,&quot;&quot;)

p2 = input(&quot;Enter Second person name:&quot;)
p2 = p2.lower()
p2 =  p2.replace(&quot; &quot;,&quot;&quot;)

l1 = list(p1)
l2 = list(p2)

proceed = True
while proceed:
    [con_list,proceed] = remove_matching_letter(l1,l2)
    star_index = con_list.index('*')
    l1 = con_list[:star_index]
    l2 = con_list[star_index+1:]
    
count = len(l1) + len(l2)
result = ['Friends','Love','Affection','Marriage','Enemy','Sibling']

while len(result) &gt; 1 :
    split_index = (count%len(result)) -1
    if split_index &gt;= 0 :
        right = result[split_index + 1 :]
        left = result[:split_index]
        result = right + left
    else :
        result = result[:len(result) -1]
print(result[0])
&lt;/pre&gt;

Output:

[[File:flameOutput.png]]

= Image Compression =
Suppose you have a web page with lots of images.  It will take more time to download.  To make downloading faster, either you remove the images or reduce the size of the images.  Both methods will not give a good or required result.  Instead you can do &lt;b&gt; Image Compression&lt;/b&gt;
==NumPy Module==
NumPy is a module for Python. The name is an acronym for &quot;Numeric Python&quot;. It enriches Python with powerful data structures, implementing multi-dimensional arrays and matrices. To work with Artificial Intelligence, Machine Learning or Deep Learning NumPy is required.

&lt;b&gt; How is it superior to List &lt;/b&gt;
Operations on numpy arrays and matrices are easier than Lists.
Consider  the following

cvalues = [22.1, 22.8, 21.9, 22.5, 22.7, 22.3, 21.8, 21.2, 22.9, 22.1]

C = np.array(cvalues)

We would like to find the values into degrees Fahrenheit. This can be easily accomplished using a simple scalar multiplication:

print(C * 9 / 5 + 32)

Using Lists, it should have been

 fvalues = [ x*9/5 + 32 for x in cvalues] 

&lt;b&gt; Operations on numpy &lt;/b&gt;
&lt;table width=&quot;200&quot; border=&quot;1&quot;&gt;
  &lt;tr&gt;
    &lt;th scope=&quot;col&quot;&gt;Operations&lt;/th&gt;
    &lt;th scope=&quot;col&quot;&gt;Descriptions&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;import numpy as np &lt;/td&gt;
    &lt;td&gt;numpy is imported and can be accessed with a short name np&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;a=np.array([1,2,3])&lt;/td&gt;
    &lt;td&gt;One dimensional array 'a' is created&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;print(type(a))&lt;/td&gt;
    &lt;td&gt;&lt;class 'numpy.ndarray'&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;print(a.shape)&lt;/td&gt;
    &lt;td&gt;(3,)&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;print (a[0],a[1],a[2])&lt;/td&gt;
    &lt;td&gt;1 2 3&lt;/td&gt;
  &lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;b=np.array([[1,2,3],[4,5,6]])&lt;/td&gt;
    &lt;td&gt;Two dimensional array 'b' is created&lt;/td&gt;
  &lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;print(b.shape)&lt;/td&gt;
    &lt;td&gt;(2,3)&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;
[[#Top]]
=== NumPy Examples ===
importing numpy module is common to following examples.
&lt;pre&gt;import numpy as np&lt;/pre&gt;

'''Example: Print NumPy Array'''
&lt;pre&gt;
#pass list as argument to np.array
a=np.array([1,2,3])
print(a)
#Output: [1 2 3]
&lt;/pre&gt;

'''Example: Print type of numpy array'''
&lt;pre&gt;
#type of numpy array
print(type(a))
#Output: &lt;class 'numpy.ndarray'&gt;
&lt;/pre&gt;

'''Example: Print shape i.e.size of numpy array'''
&lt;pre&gt;
#shape of numpy array
print(a.shape)
#Output: (3,)
&lt;/pre&gt;

'''Example: Print elements of numpy using indexes'''
&lt;pre&gt;
#print elements of numpy using indexes
print(a[0], a[1], a[2])
#Output: 1 2 3
&lt;/pre&gt;

'''Example: Print shape of array: rows and columns'''
&lt;pre&gt;
b=np.array([[1,2,3],[4,5,6]])
print(b.shape)
#Output: (2, 3) - 2 rows and 3 columns
&lt;/pre&gt;

''' Example: 2x2 array of '0' '''
&lt;pre&gt;
#array of '0'
a=np.zeros((2,2))
print(a)
'''Output:
[[0. 0.]
 [0. 0.]]'''
&lt;/pre&gt;

''' Example: 2x2 array of '1' '''
&lt;pre&gt;
#array of '1'
b= np.ones((2,2))
print(b)
'''Output:
[[1. 1.]
 [1. 1.]]'''
&lt;/pre&gt;

''' Example: 2x2 array of '6' '''
&lt;pre&gt;
#2x2 array of 6
c= np.full((2,2),6)
print(c)
'''Output:
[[6 6]
 [6 6]]'''
&lt;/pre&gt;

''' Example: 2x2 array of random number '''
&lt;pre&gt;
#2x2 array of random number
d=np.random.random((2,2))
print(d)
'''Output:
 [[0.45937293 0.72546193]
 [0.28374715 0.63269858]]'''
&lt;/pre&gt;

'''Example: int32 Data type of array'''
&lt;pre&gt;
x=np.array([1,2])

#data type of x
print(x.dtype)
#Output : int32
&lt;/pre&gt;

'''Example: float64 Data type of array'''
&lt;pre&gt;
y=np.array([1.2,3])
print(y.dtype)
#Output: float64
&lt;/pre&gt;

'''Example: Specifically setting Data type of array as int64'''
&lt;pre&gt;
x=np.array([1,2], dtype=np.int64)
print(x.dtype)
#Output: int64
&lt;/pre&gt;
[[#Top]]

===NumPy array operations===
&lt;pre&gt;
import numpy as np
x=np.array([[1,2],[3,4]],dtype=np.float64)
y=np.array([[5,6],[7,8]],dtype=np.float64)
print(x)
'''Output:
[[1. 2.]
 [3. 4.]]'''
print(y)
'''Output:
[[5. 6.]
 [7. 8.]]
'''

print(x+y)
print(np.add(x,y))

'''
Output:
[[ 6.  8.]
 [10. 12.]]

[[ 6.  8.]
 [10. 12.]]
 '''

print(x-y)
print(np.subtract(x,y))
'''Output:
[[-4. -4.]
 [-4. -4.]]
[[-4. -4.]
 [-4. -4.]]
'''
print(x*y)
print(np.multiply(x,y))
'''Output:
[[ 5. 12.]
 [21. 32.]]
[[ 5. 12.]
 [21. 32.]]
'''
print(x/y)
'''Output:
[[0.2        0.33333333]
 [0.42857143 0.5       ]]
'''
print(np.sqrt(x))
'''Output:
[[1.         1.41421356]
 [1.73205081 2.        ]]
'''
print(np.sqrt(y))
'''Output:
[[2.23606798 2.44948974]
 [2.64575131 2.82842712]]
'''
#Transposition of matrix
np.array([[1,2],[3,4]])
print(x.T)
'''Output:
[[1. 3.]
 [2. 4.]]
 '''
#sum of all elements
print(np.sum(x))#Output:10.0
print(np.sum(x,axis=0))#Output:[4. 6.]
print(np.sum(x,axis=1))#Output:[3. 7.]

&lt;/pre&gt;

==Lossy Compression==
Compression in which data is lost during compression.

==Lossless Compression==
Compression in which data is not lost during compression.

==Compression coding==
We will use the black and white ''lena'' image from net.
[[File:Lena-Original-Image-512x512-pixels.png]]

&lt;pre&gt;
import numpy
from PIL import Image
I=numpy.asanyarray(Image.open('Lena-Original-Image-512x512-pixels.png'))
print(I)
&lt;/pre&gt;
'''Output:
[[[159 159 159]
  [159 159 159]
  [158 158 158]
  ...
  [168 168 168]
  [151 151 151]
  [119 119 119]]

 [[159 159 159]
  [159 159 159]
  [158 158 158]
  ...
  [168 168 168]
  [151 151 151]
  [119 119 119]]

 [[159 159 159]
  [159 159 159]
  [158 158 158]
  ...
  [168 168 168]
  [151 151 151]
  [119 119 119]]

 ...

 [[ 20  20  20]
  [ 29  29  29]
  [ 25  25  25]
  ...
  [ 91  91  91]
  [ 87  87  87]
  [ 84  84  84]]

 [[ 22  22  22]
  [ 34  34  34]
  [ 30  30  30]
  ...
  [ 91  91  91]
  [ 93  93  93]
  [ 96  96  96]]

 [[ 22  22  22]
  [ 34  34  34]
  [ 30  30  30]
  ...
  [ 91  91  91]
  [ 93  93  93]
  [ 96  96  96]]]
'''

===Load the image===
&lt;pre&gt;
import numpy
from PIL import Image
im=Image.open('Lena-Original-Image-512x512-pixels.png')
pixelMap=im.load()
&lt;/pre&gt;</text>
      <sha1>4mlcvog3dpj19yz6jkkhge6nj5dbvl7</sha1>
    </revision>
    <revision>
      <id>4009</id>
      <parentid>4008</parentid>
      <timestamp>2018-10-02T10:37:32Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* Load the image */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="9852">==Week 10 Download URL==
https://onlinecourses.nptel.ac.in/noc18_cs35/unit?unit=30&amp;lesson=31

=FLAMES - a Childhood play=
In childhood, we might have played a game called FLAMES to find the relationship (illusion!!) between a boy and a girl.  

All you have to do is

&lt;b&gt; Steps : &lt;/b&gt;
 1. write their names and strike out the common characters that occur in both their names.
 2. Count the remaining letters (SAY X)
 3. Write the word FLAMES and start counting from F and strike out the X&lt;sup&gt;th&lt;/sup&gt; letter till only one character remains
 4. If it is F - then the two are Friends. L - Love, A - Affection,  M - Marriage  E- Enemy S- Sister

&lt;table width=&quot;449&quot; height=&quot;116&quot; border=&quot;1&quot;&gt;
 &lt;tr&gt;
    &lt;td&gt;[[File:Flamestep1.JPG|300px]]&lt;/td&gt;
    &lt;td&gt;[[File:Flamestep2.JPG|300px]]&lt;/td&gt;
    &lt;td&gt;[[File:flamestep3.JPG|300px]]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td width = 200&gt;Remaining No. of Characters = 7&lt;/td&gt;
    &lt;td width = 200&gt;Counting from F, wrap over and strike the 7&lt;SUP&gt;th&lt;/SUP&gt; letter&lt;/td&gt;
    &lt;td width = 200&gt;The remaining letter denotes the relationship&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;
== Refresh the operations on Strings and Lists ==
&lt;table width=&quot;200&quot; border=&quot;1&quot;&gt;
  &lt;tr&gt;
    &lt;th scope=&quot;col&quot; width=100&gt;Functions&lt;/th&gt;
    &lt;th scope=&quot;col&quot; width=100&gt;Example&lt;/th&gt;
    &lt;th scope=&quot;col&quot; width=100&gt;Result&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;import &lt;/td&gt;
    &lt;td&gt;import string&lt;/td&gt;
    &lt;td&gt;import string module&lt;/td&gt;
  &lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;input a string&lt;/td&gt;
    &lt;td&gt;s = input()&lt;/td&gt;
    &lt;td&gt;input a string to the variable s&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Convert to lower case&lt;/td&gt;
    &lt;td&gt;print(s.lower())&lt;/td&gt;
    &lt;td &gt; raj &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Convert to upper case&lt;/td&gt;
    &lt;td&gt;print(s.upper())&lt;/td&gt;
    &lt;td&gt; RAJ&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Convert the string to list&lt;/td&gt;
    &lt;td&gt;s1 = list(s)&lt;/td&gt;
    &lt;td&gt;s1 will be ['R','a','j']&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Replace a character&lt;/td&gt;
    &lt;td&gt;print(s.replace(&quot;j&quot;,&quot;#&quot;))&lt;/td&gt;
    &lt;td&gt;'Ra#' .Note: the content of s is not changed.&lt;/td&gt;
  &lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;Replace more than one character&lt;/td&gt;
    &lt;td&gt;print(s.replace(&quot;aj&quot;,&quot;#&quot;))&lt;/td&gt;
    &lt;td&gt;'R#'&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;slice. l = ['a','b','c','d','e']&lt;/td&gt;
    &lt;td&gt;l[1:4]&lt;/td&gt;
    &lt;td&gt;['b', 'c', 'd'] &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;slice. Start index is missing &lt;/td&gt;
    &lt;td&gt;l[:4]&lt;/td&gt;
    &lt;td&gt; ['a', 'b', 'c', 'd']  Default is 0 if start index is omitted &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;slice. End index is missing &lt;/td&gt;
    &lt;td&gt;l[1:]&lt;/td&gt;
    &lt;td&gt; ['b', 'c', 'd', 'e'] Default is length of the list if end index is omitted&lt;/td&gt;
  &lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;slice. Both index missing &lt;/td&gt;
    &lt;td&gt;l[:]&lt;/td&gt;
    &lt;td&gt; ['a','b','c','d','e'] &lt;/td&gt;
  &lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;Index of first occurrence of a char.  &lt;/td&gt;
    &lt;td&gt;print(l.index('d'))&lt;/td&gt;
    &lt;td&gt; 3 &lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;
== Code as given by Vidya ==
&lt;pre&gt;
import string

def remove_matching_letter(l1,l2) :
    for i in range(len(l1)) :
        for j in range(len(l2)):
            if l1[i] == l2[j] :
                c = l1[i]
                l1.remove(c)
                l2.remove(c)
                l = l1 + ['*'] +l2
                return[l,True]
    l = l1+['*']+l2
    return[l,False]


p1 = input(&quot;Enter first person name:&quot;)
p1 = p1.lower()
p1=  p1.replace(&quot; &quot;,&quot;&quot;)

p2 = input(&quot;Enter Second person name:&quot;)
p2 = p2.lower()
p2 =  p2.replace(&quot; &quot;,&quot;&quot;)

l1 = list(p1)
l2 = list(p2)

proceed = True
while proceed:
    [con_list,proceed] = remove_matching_letter(l1,l2)
    star_index = con_list.index('*')
    l1 = con_list[:star_index]
    l2 = con_list[star_index+1:]
    
count = len(l1) + len(l2)
result = ['Friends','Love','Affection','Marriage','Enemy','Sibling']

while len(result) &gt; 1 :
    split_index = (count%len(result)) -1
    if split_index &gt;= 0 :
        right = result[split_index + 1 :]
        left = result[:split_index]
        result = right + left
    else :
        result = result[:len(result) -1]
print(result[0])
&lt;/pre&gt;

Output:

[[File:flameOutput.png]]

= Image Compression =
Suppose you have a web page with lots of images.  It will take more time to download.  To make downloading faster, either you remove the images or reduce the size of the images.  Both methods will not give a good or required result.  Instead you can do &lt;b&gt; Image Compression&lt;/b&gt;
==NumPy Module==
NumPy is a module for Python. The name is an acronym for &quot;Numeric Python&quot;. It enriches Python with powerful data structures, implementing multi-dimensional arrays and matrices. To work with Artificial Intelligence, Machine Learning or Deep Learning NumPy is required.

&lt;b&gt; How is it superior to List &lt;/b&gt;
Operations on numpy arrays and matrices are easier than Lists.
Consider  the following

cvalues = [22.1, 22.8, 21.9, 22.5, 22.7, 22.3, 21.8, 21.2, 22.9, 22.1]

C = np.array(cvalues)

We would like to find the values into degrees Fahrenheit. This can be easily accomplished using a simple scalar multiplication:

print(C * 9 / 5 + 32)

Using Lists, it should have been

 fvalues = [ x*9/5 + 32 for x in cvalues] 

&lt;b&gt; Operations on numpy &lt;/b&gt;
&lt;table width=&quot;200&quot; border=&quot;1&quot;&gt;
  &lt;tr&gt;
    &lt;th scope=&quot;col&quot;&gt;Operations&lt;/th&gt;
    &lt;th scope=&quot;col&quot;&gt;Descriptions&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;import numpy as np &lt;/td&gt;
    &lt;td&gt;numpy is imported and can be accessed with a short name np&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;a=np.array([1,2,3])&lt;/td&gt;
    &lt;td&gt;One dimensional array 'a' is created&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;print(type(a))&lt;/td&gt;
    &lt;td&gt;&lt;class 'numpy.ndarray'&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;print(a.shape)&lt;/td&gt;
    &lt;td&gt;(3,)&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;print (a[0],a[1],a[2])&lt;/td&gt;
    &lt;td&gt;1 2 3&lt;/td&gt;
  &lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;b=np.array([[1,2,3],[4,5,6]])&lt;/td&gt;
    &lt;td&gt;Two dimensional array 'b' is created&lt;/td&gt;
  &lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;print(b.shape)&lt;/td&gt;
    &lt;td&gt;(2,3)&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;
[[#Top]]
=== NumPy Examples ===
importing numpy module is common to following examples.
&lt;pre&gt;import numpy as np&lt;/pre&gt;

'''Example: Print NumPy Array'''
&lt;pre&gt;
#pass list as argument to np.array
a=np.array([1,2,3])
print(a)
#Output: [1 2 3]
&lt;/pre&gt;

'''Example: Print type of numpy array'''
&lt;pre&gt;
#type of numpy array
print(type(a))
#Output: &lt;class 'numpy.ndarray'&gt;
&lt;/pre&gt;

'''Example: Print shape i.e.size of numpy array'''
&lt;pre&gt;
#shape of numpy array
print(a.shape)
#Output: (3,)
&lt;/pre&gt;

'''Example: Print elements of numpy using indexes'''
&lt;pre&gt;
#print elements of numpy using indexes
print(a[0], a[1], a[2])
#Output: 1 2 3
&lt;/pre&gt;

'''Example: Print shape of array: rows and columns'''
&lt;pre&gt;
b=np.array([[1,2,3],[4,5,6]])
print(b.shape)
#Output: (2, 3) - 2 rows and 3 columns
&lt;/pre&gt;

''' Example: 2x2 array of '0' '''
&lt;pre&gt;
#array of '0'
a=np.zeros((2,2))
print(a)
'''Output:
[[0. 0.]
 [0. 0.]]'''
&lt;/pre&gt;

''' Example: 2x2 array of '1' '''
&lt;pre&gt;
#array of '1'
b= np.ones((2,2))
print(b)
'''Output:
[[1. 1.]
 [1. 1.]]'''
&lt;/pre&gt;

''' Example: 2x2 array of '6' '''
&lt;pre&gt;
#2x2 array of 6
c= np.full((2,2),6)
print(c)
'''Output:
[[6 6]
 [6 6]]'''
&lt;/pre&gt;

''' Example: 2x2 array of random number '''
&lt;pre&gt;
#2x2 array of random number
d=np.random.random((2,2))
print(d)
'''Output:
 [[0.45937293 0.72546193]
 [0.28374715 0.63269858]]'''
&lt;/pre&gt;

'''Example: int32 Data type of array'''
&lt;pre&gt;
x=np.array([1,2])

#data type of x
print(x.dtype)
#Output : int32
&lt;/pre&gt;

'''Example: float64 Data type of array'''
&lt;pre&gt;
y=np.array([1.2,3])
print(y.dtype)
#Output: float64
&lt;/pre&gt;

'''Example: Specifically setting Data type of array as int64'''
&lt;pre&gt;
x=np.array([1,2], dtype=np.int64)
print(x.dtype)
#Output: int64
&lt;/pre&gt;
[[#Top]]

===NumPy array operations===
&lt;pre&gt;
import numpy as np
x=np.array([[1,2],[3,4]],dtype=np.float64)
y=np.array([[5,6],[7,8]],dtype=np.float64)
print(x)
'''Output:
[[1. 2.]
 [3. 4.]]'''
print(y)
'''Output:
[[5. 6.]
 [7. 8.]]
'''

print(x+y)
print(np.add(x,y))

'''
Output:
[[ 6.  8.]
 [10. 12.]]

[[ 6.  8.]
 [10. 12.]]
 '''

print(x-y)
print(np.subtract(x,y))
'''Output:
[[-4. -4.]
 [-4. -4.]]
[[-4. -4.]
 [-4. -4.]]
'''
print(x*y)
print(np.multiply(x,y))
'''Output:
[[ 5. 12.]
 [21. 32.]]
[[ 5. 12.]
 [21. 32.]]
'''
print(x/y)
'''Output:
[[0.2        0.33333333]
 [0.42857143 0.5       ]]
'''
print(np.sqrt(x))
'''Output:
[[1.         1.41421356]
 [1.73205081 2.        ]]
'''
print(np.sqrt(y))
'''Output:
[[2.23606798 2.44948974]
 [2.64575131 2.82842712]]
'''
#Transposition of matrix
np.array([[1,2],[3,4]])
print(x.T)
'''Output:
[[1. 3.]
 [2. 4.]]
 '''
#sum of all elements
print(np.sum(x))#Output:10.0
print(np.sum(x,axis=0))#Output:[4. 6.]
print(np.sum(x,axis=1))#Output:[3. 7.]

&lt;/pre&gt;

==Lossy Compression==
Compression in which data is lost during compression.

==Lossless Compression==
Compression in which data is not lost during compression.

==Compression coding==
We will use the black and white ''lena'' image from net.
[[File:Lena-Original-Image-512x512-pixels.png]]

&lt;pre&gt;
import numpy
from PIL import Image
I=numpy.asanyarray(Image.open('Lena-Original-Image-512x512-pixels.png'))
print(I)
&lt;/pre&gt;
'''Output:
[[[159 159 159]
  [159 159 159]
  [158 158 158]
  ...
  [168 168 168]
  [151 151 151]
  [119 119 119]]

 [[159 159 159]
  [159 159 159]
  [158 158 158]
  ...
  [168 168 168]
  [151 151 151]
  [119 119 119]]

 [[159 159 159]
  [159 159 159]
  [158 158 158]
  ...
  [168 168 168]
  [151 151 151]
  [119 119 119]]

 ...

 [[ 20  20  20]
  [ 29  29  29]
  [ 25  25  25]
  ...
  [ 91  91  91]
  [ 87  87  87]
  [ 84  84  84]]

 [[ 22  22  22]
  [ 34  34  34]
  [ 30  30  30]
  ...
  [ 91  91  91]
  [ 93  93  93]
  [ 96  96  96]]

 [[ 22  22  22]
  [ 34  34  34]
  [ 30  30  30]
  ...
  [ 91  91  91]
  [ 93  93  93]
  [ 96  96  96]]]
'''

===Load the image===
&lt;pre&gt;
import numpy
from PIL import Image
im=Image.open('Lena-Original-Image-512x512-pixels.png')
pixelMap=im.load()
&lt;/pre&gt;

===Create blank image of same size and type===
&lt;pre&gt;
#mode is type of image
#blank image with same mode and size of original image
img=Image.new(im.mode,im.size)
pixelNew=img.load()
&lt;/pre&gt;

===Logic of Image  Compression===</text>
      <sha1>pdo6igt7tzpo3dgjdtg7mcxcu5ra4lf</sha1>
    </revision>
    <revision>
      <id>4010</id>
      <parentid>4009</parentid>
      <timestamp>2018-10-02T11:01:10Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* Logic of Image  Compression */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="10069">==Week 10 Download URL==
https://onlinecourses.nptel.ac.in/noc18_cs35/unit?unit=30&amp;lesson=31

=FLAMES - a Childhood play=
In childhood, we might have played a game called FLAMES to find the relationship (illusion!!) between a boy and a girl.  

All you have to do is

&lt;b&gt; Steps : &lt;/b&gt;
 1. write their names and strike out the common characters that occur in both their names.
 2. Count the remaining letters (SAY X)
 3. Write the word FLAMES and start counting from F and strike out the X&lt;sup&gt;th&lt;/sup&gt; letter till only one character remains
 4. If it is F - then the two are Friends. L - Love, A - Affection,  M - Marriage  E- Enemy S- Sister

&lt;table width=&quot;449&quot; height=&quot;116&quot; border=&quot;1&quot;&gt;
 &lt;tr&gt;
    &lt;td&gt;[[File:Flamestep1.JPG|300px]]&lt;/td&gt;
    &lt;td&gt;[[File:Flamestep2.JPG|300px]]&lt;/td&gt;
    &lt;td&gt;[[File:flamestep3.JPG|300px]]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td width = 200&gt;Remaining No. of Characters = 7&lt;/td&gt;
    &lt;td width = 200&gt;Counting from F, wrap over and strike the 7&lt;SUP&gt;th&lt;/SUP&gt; letter&lt;/td&gt;
    &lt;td width = 200&gt;The remaining letter denotes the relationship&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;
== Refresh the operations on Strings and Lists ==
&lt;table width=&quot;200&quot; border=&quot;1&quot;&gt;
  &lt;tr&gt;
    &lt;th scope=&quot;col&quot; width=100&gt;Functions&lt;/th&gt;
    &lt;th scope=&quot;col&quot; width=100&gt;Example&lt;/th&gt;
    &lt;th scope=&quot;col&quot; width=100&gt;Result&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;import &lt;/td&gt;
    &lt;td&gt;import string&lt;/td&gt;
    &lt;td&gt;import string module&lt;/td&gt;
  &lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;input a string&lt;/td&gt;
    &lt;td&gt;s = input()&lt;/td&gt;
    &lt;td&gt;input a string to the variable s&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Convert to lower case&lt;/td&gt;
    &lt;td&gt;print(s.lower())&lt;/td&gt;
    &lt;td &gt; raj &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Convert to upper case&lt;/td&gt;
    &lt;td&gt;print(s.upper())&lt;/td&gt;
    &lt;td&gt; RAJ&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Convert the string to list&lt;/td&gt;
    &lt;td&gt;s1 = list(s)&lt;/td&gt;
    &lt;td&gt;s1 will be ['R','a','j']&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Replace a character&lt;/td&gt;
    &lt;td&gt;print(s.replace(&quot;j&quot;,&quot;#&quot;))&lt;/td&gt;
    &lt;td&gt;'Ra#' .Note: the content of s is not changed.&lt;/td&gt;
  &lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;Replace more than one character&lt;/td&gt;
    &lt;td&gt;print(s.replace(&quot;aj&quot;,&quot;#&quot;))&lt;/td&gt;
    &lt;td&gt;'R#'&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;slice. l = ['a','b','c','d','e']&lt;/td&gt;
    &lt;td&gt;l[1:4]&lt;/td&gt;
    &lt;td&gt;['b', 'c', 'd'] &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;slice. Start index is missing &lt;/td&gt;
    &lt;td&gt;l[:4]&lt;/td&gt;
    &lt;td&gt; ['a', 'b', 'c', 'd']  Default is 0 if start index is omitted &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;slice. End index is missing &lt;/td&gt;
    &lt;td&gt;l[1:]&lt;/td&gt;
    &lt;td&gt; ['b', 'c', 'd', 'e'] Default is length of the list if end index is omitted&lt;/td&gt;
  &lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;slice. Both index missing &lt;/td&gt;
    &lt;td&gt;l[:]&lt;/td&gt;
    &lt;td&gt; ['a','b','c','d','e'] &lt;/td&gt;
  &lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;Index of first occurrence of a char.  &lt;/td&gt;
    &lt;td&gt;print(l.index('d'))&lt;/td&gt;
    &lt;td&gt; 3 &lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;
== Code as given by Vidya ==
&lt;pre&gt;
import string

def remove_matching_letter(l1,l2) :
    for i in range(len(l1)) :
        for j in range(len(l2)):
            if l1[i] == l2[j] :
                c = l1[i]
                l1.remove(c)
                l2.remove(c)
                l = l1 + ['*'] +l2
                return[l,True]
    l = l1+['*']+l2
    return[l,False]


p1 = input(&quot;Enter first person name:&quot;)
p1 = p1.lower()
p1=  p1.replace(&quot; &quot;,&quot;&quot;)

p2 = input(&quot;Enter Second person name:&quot;)
p2 = p2.lower()
p2 =  p2.replace(&quot; &quot;,&quot;&quot;)

l1 = list(p1)
l2 = list(p2)

proceed = True
while proceed:
    [con_list,proceed] = remove_matching_letter(l1,l2)
    star_index = con_list.index('*')
    l1 = con_list[:star_index]
    l2 = con_list[star_index+1:]
    
count = len(l1) + len(l2)
result = ['Friends','Love','Affection','Marriage','Enemy','Sibling']

while len(result) &gt; 1 :
    split_index = (count%len(result)) -1
    if split_index &gt;= 0 :
        right = result[split_index + 1 :]
        left = result[:split_index]
        result = right + left
    else :
        result = result[:len(result) -1]
print(result[0])
&lt;/pre&gt;

Output:

[[File:flameOutput.png]]

= Image Compression =
Suppose you have a web page with lots of images.  It will take more time to download.  To make downloading faster, either you remove the images or reduce the size of the images.  Both methods will not give a good or required result.  Instead you can do &lt;b&gt; Image Compression&lt;/b&gt;
==NumPy Module==
NumPy is a module for Python. The name is an acronym for &quot;Numeric Python&quot;. It enriches Python with powerful data structures, implementing multi-dimensional arrays and matrices. To work with Artificial Intelligence, Machine Learning or Deep Learning NumPy is required.

&lt;b&gt; How is it superior to List &lt;/b&gt;
Operations on numpy arrays and matrices are easier than Lists.
Consider  the following

cvalues = [22.1, 22.8, 21.9, 22.5, 22.7, 22.3, 21.8, 21.2, 22.9, 22.1]

C = np.array(cvalues)

We would like to find the values into degrees Fahrenheit. This can be easily accomplished using a simple scalar multiplication:

print(C * 9 / 5 + 32)

Using Lists, it should have been

 fvalues = [ x*9/5 + 32 for x in cvalues] 

&lt;b&gt; Operations on numpy &lt;/b&gt;
&lt;table width=&quot;200&quot; border=&quot;1&quot;&gt;
  &lt;tr&gt;
    &lt;th scope=&quot;col&quot;&gt;Operations&lt;/th&gt;
    &lt;th scope=&quot;col&quot;&gt;Descriptions&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;import numpy as np &lt;/td&gt;
    &lt;td&gt;numpy is imported and can be accessed with a short name np&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;a=np.array([1,2,3])&lt;/td&gt;
    &lt;td&gt;One dimensional array 'a' is created&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;print(type(a))&lt;/td&gt;
    &lt;td&gt;&lt;class 'numpy.ndarray'&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;print(a.shape)&lt;/td&gt;
    &lt;td&gt;(3,)&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;print (a[0],a[1],a[2])&lt;/td&gt;
    &lt;td&gt;1 2 3&lt;/td&gt;
  &lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;b=np.array([[1,2,3],[4,5,6]])&lt;/td&gt;
    &lt;td&gt;Two dimensional array 'b' is created&lt;/td&gt;
  &lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;print(b.shape)&lt;/td&gt;
    &lt;td&gt;(2,3)&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;
[[#Top]]
=== NumPy Examples ===
importing numpy module is common to following examples.
&lt;pre&gt;import numpy as np&lt;/pre&gt;

'''Example: Print NumPy Array'''
&lt;pre&gt;
#pass list as argument to np.array
a=np.array([1,2,3])
print(a)
#Output: [1 2 3]
&lt;/pre&gt;

'''Example: Print type of numpy array'''
&lt;pre&gt;
#type of numpy array
print(type(a))
#Output: &lt;class 'numpy.ndarray'&gt;
&lt;/pre&gt;

'''Example: Print shape i.e.size of numpy array'''
&lt;pre&gt;
#shape of numpy array
print(a.shape)
#Output: (3,)
&lt;/pre&gt;

'''Example: Print elements of numpy using indexes'''
&lt;pre&gt;
#print elements of numpy using indexes
print(a[0], a[1], a[2])
#Output: 1 2 3
&lt;/pre&gt;

'''Example: Print shape of array: rows and columns'''
&lt;pre&gt;
b=np.array([[1,2,3],[4,5,6]])
print(b.shape)
#Output: (2, 3) - 2 rows and 3 columns
&lt;/pre&gt;

''' Example: 2x2 array of '0' '''
&lt;pre&gt;
#array of '0'
a=np.zeros((2,2))
print(a)
'''Output:
[[0. 0.]
 [0. 0.]]'''
&lt;/pre&gt;

''' Example: 2x2 array of '1' '''
&lt;pre&gt;
#array of '1'
b= np.ones((2,2))
print(b)
'''Output:
[[1. 1.]
 [1. 1.]]'''
&lt;/pre&gt;

''' Example: 2x2 array of '6' '''
&lt;pre&gt;
#2x2 array of 6
c= np.full((2,2),6)
print(c)
'''Output:
[[6 6]
 [6 6]]'''
&lt;/pre&gt;

''' Example: 2x2 array of random number '''
&lt;pre&gt;
#2x2 array of random number
d=np.random.random((2,2))
print(d)
'''Output:
 [[0.45937293 0.72546193]
 [0.28374715 0.63269858]]'''
&lt;/pre&gt;

'''Example: int32 Data type of array'''
&lt;pre&gt;
x=np.array([1,2])

#data type of x
print(x.dtype)
#Output : int32
&lt;/pre&gt;

'''Example: float64 Data type of array'''
&lt;pre&gt;
y=np.array([1.2,3])
print(y.dtype)
#Output: float64
&lt;/pre&gt;

'''Example: Specifically setting Data type of array as int64'''
&lt;pre&gt;
x=np.array([1,2], dtype=np.int64)
print(x.dtype)
#Output: int64
&lt;/pre&gt;
[[#Top]]

===NumPy array operations===
&lt;pre&gt;
import numpy as np
x=np.array([[1,2],[3,4]],dtype=np.float64)
y=np.array([[5,6],[7,8]],dtype=np.float64)
print(x)
'''Output:
[[1. 2.]
 [3. 4.]]'''
print(y)
'''Output:
[[5. 6.]
 [7. 8.]]
'''

print(x+y)
print(np.add(x,y))

'''
Output:
[[ 6.  8.]
 [10. 12.]]

[[ 6.  8.]
 [10. 12.]]
 '''

print(x-y)
print(np.subtract(x,y))
'''Output:
[[-4. -4.]
 [-4. -4.]]
[[-4. -4.]
 [-4. -4.]]
'''
print(x*y)
print(np.multiply(x,y))
'''Output:
[[ 5. 12.]
 [21. 32.]]
[[ 5. 12.]
 [21. 32.]]
'''
print(x/y)
'''Output:
[[0.2        0.33333333]
 [0.42857143 0.5       ]]
'''
print(np.sqrt(x))
'''Output:
[[1.         1.41421356]
 [1.73205081 2.        ]]
'''
print(np.sqrt(y))
'''Output:
[[2.23606798 2.44948974]
 [2.64575131 2.82842712]]
'''
#Transposition of matrix
np.array([[1,2],[3,4]])
print(x.T)
'''Output:
[[1. 3.]
 [2. 4.]]
 '''
#sum of all elements
print(np.sum(x))#Output:10.0
print(np.sum(x,axis=0))#Output:[4. 6.]
print(np.sum(x,axis=1))#Output:[3. 7.]

&lt;/pre&gt;

==Lossy Compression==
Compression in which data is lost during compression.

==Lossless Compression==
Compression in which data is not lost during compression.

==Compression coding==
We will use the black and white ''lena'' image from net.
[[File:Lena-Original-Image-512x512-pixels.png]]

&lt;pre&gt;
import numpy
from PIL import Image
I=numpy.asanyarray(Image.open('Lena-Original-Image-512x512-pixels.png'))
print(I)
&lt;/pre&gt;
'''Output:
[[[159 159 159]
  [159 159 159]
  [158 158 158]
  ...
  [168 168 168]
  [151 151 151]
  [119 119 119]]

 [[159 159 159]
  [159 159 159]
  [158 158 158]
  ...
  [168 168 168]
  [151 151 151]
  [119 119 119]]

 [[159 159 159]
  [159 159 159]
  [158 158 158]
  ...
  [168 168 168]
  [151 151 151]
  [119 119 119]]

 ...

 [[ 20  20  20]
  [ 29  29  29]
  [ 25  25  25]
  ...
  [ 91  91  91]
  [ 87  87  87]
  [ 84  84  84]]

 [[ 22  22  22]
  [ 34  34  34]
  [ 30  30  30]
  ...
  [ 91  91  91]
  [ 93  93  93]
  [ 96  96  96]]

 [[ 22  22  22]
  [ 34  34  34]
  [ 30  30  30]
  ...
  [ 91  91  91]
  [ 93  93  93]
  [ 96  96  96]]]
'''

===Load the image===
&lt;pre&gt;
import numpy
from PIL import Image
im=Image.open('Lena-Original-Image-512x512-pixels.png')
pixelMap=im.load()
&lt;/pre&gt;

===Create blank image of same size and type===
&lt;pre&gt;
#mode is type of image
#blank image with same mode and size of original image
img=Image.new(im.mode,im.size)
pixelNew=img.load()
&lt;/pre&gt;

===Logic of Image  Compression===
We will convert image from 8-bit to 3-bit.

'''
8bit to 3 bit
2^8&gt;2^3
2^5=32

for:
0-31 put 0
32-63 put 1
64-95 put 2
96-127 put 3
128-159 put 4
160-191 put 5
192-223 put 6
224-255 put 7
'''
===Coding===
&lt;pre&gt;
&lt;/pre&gt;</text>
      <sha1>6nyygj8a7l6obfj3zkcvq3jqj1a6tlg</sha1>
    </revision>
    <revision>
      <id>4011</id>
      <parentid>4010</parentid>
      <timestamp>2018-10-02T11:01:28Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* Logic of Image  Compression */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="10082">==Week 10 Download URL==
https://onlinecourses.nptel.ac.in/noc18_cs35/unit?unit=30&amp;lesson=31

=FLAMES - a Childhood play=
In childhood, we might have played a game called FLAMES to find the relationship (illusion!!) between a boy and a girl.  

All you have to do is

&lt;b&gt; Steps : &lt;/b&gt;
 1. write their names and strike out the common characters that occur in both their names.
 2. Count the remaining letters (SAY X)
 3. Write the word FLAMES and start counting from F and strike out the X&lt;sup&gt;th&lt;/sup&gt; letter till only one character remains
 4. If it is F - then the two are Friends. L - Love, A - Affection,  M - Marriage  E- Enemy S- Sister

&lt;table width=&quot;449&quot; height=&quot;116&quot; border=&quot;1&quot;&gt;
 &lt;tr&gt;
    &lt;td&gt;[[File:Flamestep1.JPG|300px]]&lt;/td&gt;
    &lt;td&gt;[[File:Flamestep2.JPG|300px]]&lt;/td&gt;
    &lt;td&gt;[[File:flamestep3.JPG|300px]]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td width = 200&gt;Remaining No. of Characters = 7&lt;/td&gt;
    &lt;td width = 200&gt;Counting from F, wrap over and strike the 7&lt;SUP&gt;th&lt;/SUP&gt; letter&lt;/td&gt;
    &lt;td width = 200&gt;The remaining letter denotes the relationship&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;
== Refresh the operations on Strings and Lists ==
&lt;table width=&quot;200&quot; border=&quot;1&quot;&gt;
  &lt;tr&gt;
    &lt;th scope=&quot;col&quot; width=100&gt;Functions&lt;/th&gt;
    &lt;th scope=&quot;col&quot; width=100&gt;Example&lt;/th&gt;
    &lt;th scope=&quot;col&quot; width=100&gt;Result&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;import &lt;/td&gt;
    &lt;td&gt;import string&lt;/td&gt;
    &lt;td&gt;import string module&lt;/td&gt;
  &lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;input a string&lt;/td&gt;
    &lt;td&gt;s = input()&lt;/td&gt;
    &lt;td&gt;input a string to the variable s&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Convert to lower case&lt;/td&gt;
    &lt;td&gt;print(s.lower())&lt;/td&gt;
    &lt;td &gt; raj &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Convert to upper case&lt;/td&gt;
    &lt;td&gt;print(s.upper())&lt;/td&gt;
    &lt;td&gt; RAJ&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Convert the string to list&lt;/td&gt;
    &lt;td&gt;s1 = list(s)&lt;/td&gt;
    &lt;td&gt;s1 will be ['R','a','j']&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Replace a character&lt;/td&gt;
    &lt;td&gt;print(s.replace(&quot;j&quot;,&quot;#&quot;))&lt;/td&gt;
    &lt;td&gt;'Ra#' .Note: the content of s is not changed.&lt;/td&gt;
  &lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;Replace more than one character&lt;/td&gt;
    &lt;td&gt;print(s.replace(&quot;aj&quot;,&quot;#&quot;))&lt;/td&gt;
    &lt;td&gt;'R#'&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;slice. l = ['a','b','c','d','e']&lt;/td&gt;
    &lt;td&gt;l[1:4]&lt;/td&gt;
    &lt;td&gt;['b', 'c', 'd'] &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;slice. Start index is missing &lt;/td&gt;
    &lt;td&gt;l[:4]&lt;/td&gt;
    &lt;td&gt; ['a', 'b', 'c', 'd']  Default is 0 if start index is omitted &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;slice. End index is missing &lt;/td&gt;
    &lt;td&gt;l[1:]&lt;/td&gt;
    &lt;td&gt; ['b', 'c', 'd', 'e'] Default is length of the list if end index is omitted&lt;/td&gt;
  &lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;slice. Both index missing &lt;/td&gt;
    &lt;td&gt;l[:]&lt;/td&gt;
    &lt;td&gt; ['a','b','c','d','e'] &lt;/td&gt;
  &lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;Index of first occurrence of a char.  &lt;/td&gt;
    &lt;td&gt;print(l.index('d'))&lt;/td&gt;
    &lt;td&gt; 3 &lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;
== Code as given by Vidya ==
&lt;pre&gt;
import string

def remove_matching_letter(l1,l2) :
    for i in range(len(l1)) :
        for j in range(len(l2)):
            if l1[i] == l2[j] :
                c = l1[i]
                l1.remove(c)
                l2.remove(c)
                l = l1 + ['*'] +l2
                return[l,True]
    l = l1+['*']+l2
    return[l,False]


p1 = input(&quot;Enter first person name:&quot;)
p1 = p1.lower()
p1=  p1.replace(&quot; &quot;,&quot;&quot;)

p2 = input(&quot;Enter Second person name:&quot;)
p2 = p2.lower()
p2 =  p2.replace(&quot; &quot;,&quot;&quot;)

l1 = list(p1)
l2 = list(p2)

proceed = True
while proceed:
    [con_list,proceed] = remove_matching_letter(l1,l2)
    star_index = con_list.index('*')
    l1 = con_list[:star_index]
    l2 = con_list[star_index+1:]
    
count = len(l1) + len(l2)
result = ['Friends','Love','Affection','Marriage','Enemy','Sibling']

while len(result) &gt; 1 :
    split_index = (count%len(result)) -1
    if split_index &gt;= 0 :
        right = result[split_index + 1 :]
        left = result[:split_index]
        result = right + left
    else :
        result = result[:len(result) -1]
print(result[0])
&lt;/pre&gt;

Output:

[[File:flameOutput.png]]

= Image Compression =
Suppose you have a web page with lots of images.  It will take more time to download.  To make downloading faster, either you remove the images or reduce the size of the images.  Both methods will not give a good or required result.  Instead you can do &lt;b&gt; Image Compression&lt;/b&gt;
==NumPy Module==
NumPy is a module for Python. The name is an acronym for &quot;Numeric Python&quot;. It enriches Python with powerful data structures, implementing multi-dimensional arrays and matrices. To work with Artificial Intelligence, Machine Learning or Deep Learning NumPy is required.

&lt;b&gt; How is it superior to List &lt;/b&gt;
Operations on numpy arrays and matrices are easier than Lists.
Consider  the following

cvalues = [22.1, 22.8, 21.9, 22.5, 22.7, 22.3, 21.8, 21.2, 22.9, 22.1]

C = np.array(cvalues)

We would like to find the values into degrees Fahrenheit. This can be easily accomplished using a simple scalar multiplication:

print(C * 9 / 5 + 32)

Using Lists, it should have been

 fvalues = [ x*9/5 + 32 for x in cvalues] 

&lt;b&gt; Operations on numpy &lt;/b&gt;
&lt;table width=&quot;200&quot; border=&quot;1&quot;&gt;
  &lt;tr&gt;
    &lt;th scope=&quot;col&quot;&gt;Operations&lt;/th&gt;
    &lt;th scope=&quot;col&quot;&gt;Descriptions&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;import numpy as np &lt;/td&gt;
    &lt;td&gt;numpy is imported and can be accessed with a short name np&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;a=np.array([1,2,3])&lt;/td&gt;
    &lt;td&gt;One dimensional array 'a' is created&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;print(type(a))&lt;/td&gt;
    &lt;td&gt;&lt;class 'numpy.ndarray'&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;print(a.shape)&lt;/td&gt;
    &lt;td&gt;(3,)&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;print (a[0],a[1],a[2])&lt;/td&gt;
    &lt;td&gt;1 2 3&lt;/td&gt;
  &lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;b=np.array([[1,2,3],[4,5,6]])&lt;/td&gt;
    &lt;td&gt;Two dimensional array 'b' is created&lt;/td&gt;
  &lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;print(b.shape)&lt;/td&gt;
    &lt;td&gt;(2,3)&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;
[[#Top]]
=== NumPy Examples ===
importing numpy module is common to following examples.
&lt;pre&gt;import numpy as np&lt;/pre&gt;

'''Example: Print NumPy Array'''
&lt;pre&gt;
#pass list as argument to np.array
a=np.array([1,2,3])
print(a)
#Output: [1 2 3]
&lt;/pre&gt;

'''Example: Print type of numpy array'''
&lt;pre&gt;
#type of numpy array
print(type(a))
#Output: &lt;class 'numpy.ndarray'&gt;
&lt;/pre&gt;

'''Example: Print shape i.e.size of numpy array'''
&lt;pre&gt;
#shape of numpy array
print(a.shape)
#Output: (3,)
&lt;/pre&gt;

'''Example: Print elements of numpy using indexes'''
&lt;pre&gt;
#print elements of numpy using indexes
print(a[0], a[1], a[2])
#Output: 1 2 3
&lt;/pre&gt;

'''Example: Print shape of array: rows and columns'''
&lt;pre&gt;
b=np.array([[1,2,3],[4,5,6]])
print(b.shape)
#Output: (2, 3) - 2 rows and 3 columns
&lt;/pre&gt;

''' Example: 2x2 array of '0' '''
&lt;pre&gt;
#array of '0'
a=np.zeros((2,2))
print(a)
'''Output:
[[0. 0.]
 [0. 0.]]'''
&lt;/pre&gt;

''' Example: 2x2 array of '1' '''
&lt;pre&gt;
#array of '1'
b= np.ones((2,2))
print(b)
'''Output:
[[1. 1.]
 [1. 1.]]'''
&lt;/pre&gt;

''' Example: 2x2 array of '6' '''
&lt;pre&gt;
#2x2 array of 6
c= np.full((2,2),6)
print(c)
'''Output:
[[6 6]
 [6 6]]'''
&lt;/pre&gt;

''' Example: 2x2 array of random number '''
&lt;pre&gt;
#2x2 array of random number
d=np.random.random((2,2))
print(d)
'''Output:
 [[0.45937293 0.72546193]
 [0.28374715 0.63269858]]'''
&lt;/pre&gt;

'''Example: int32 Data type of array'''
&lt;pre&gt;
x=np.array([1,2])

#data type of x
print(x.dtype)
#Output : int32
&lt;/pre&gt;

'''Example: float64 Data type of array'''
&lt;pre&gt;
y=np.array([1.2,3])
print(y.dtype)
#Output: float64
&lt;/pre&gt;

'''Example: Specifically setting Data type of array as int64'''
&lt;pre&gt;
x=np.array([1,2], dtype=np.int64)
print(x.dtype)
#Output: int64
&lt;/pre&gt;
[[#Top]]

===NumPy array operations===
&lt;pre&gt;
import numpy as np
x=np.array([[1,2],[3,4]],dtype=np.float64)
y=np.array([[5,6],[7,8]],dtype=np.float64)
print(x)
'''Output:
[[1. 2.]
 [3. 4.]]'''
print(y)
'''Output:
[[5. 6.]
 [7. 8.]]
'''

print(x+y)
print(np.add(x,y))

'''
Output:
[[ 6.  8.]
 [10. 12.]]

[[ 6.  8.]
 [10. 12.]]
 '''

print(x-y)
print(np.subtract(x,y))
'''Output:
[[-4. -4.]
 [-4. -4.]]
[[-4. -4.]
 [-4. -4.]]
'''
print(x*y)
print(np.multiply(x,y))
'''Output:
[[ 5. 12.]
 [21. 32.]]
[[ 5. 12.]
 [21. 32.]]
'''
print(x/y)
'''Output:
[[0.2        0.33333333]
 [0.42857143 0.5       ]]
'''
print(np.sqrt(x))
'''Output:
[[1.         1.41421356]
 [1.73205081 2.        ]]
'''
print(np.sqrt(y))
'''Output:
[[2.23606798 2.44948974]
 [2.64575131 2.82842712]]
'''
#Transposition of matrix
np.array([[1,2],[3,4]])
print(x.T)
'''Output:
[[1. 3.]
 [2. 4.]]
 '''
#sum of all elements
print(np.sum(x))#Output:10.0
print(np.sum(x,axis=0))#Output:[4. 6.]
print(np.sum(x,axis=1))#Output:[3. 7.]

&lt;/pre&gt;

==Lossy Compression==
Compression in which data is lost during compression.

==Lossless Compression==
Compression in which data is not lost during compression.

==Compression coding==
We will use the black and white ''lena'' image from net.
[[File:Lena-Original-Image-512x512-pixels.png]]

&lt;pre&gt;
import numpy
from PIL import Image
I=numpy.asanyarray(Image.open('Lena-Original-Image-512x512-pixels.png'))
print(I)
&lt;/pre&gt;
'''Output:
[[[159 159 159]
  [159 159 159]
  [158 158 158]
  ...
  [168 168 168]
  [151 151 151]
  [119 119 119]]

 [[159 159 159]
  [159 159 159]
  [158 158 158]
  ...
  [168 168 168]
  [151 151 151]
  [119 119 119]]

 [[159 159 159]
  [159 159 159]
  [158 158 158]
  ...
  [168 168 168]
  [151 151 151]
  [119 119 119]]

 ...

 [[ 20  20  20]
  [ 29  29  29]
  [ 25  25  25]
  ...
  [ 91  91  91]
  [ 87  87  87]
  [ 84  84  84]]

 [[ 22  22  22]
  [ 34  34  34]
  [ 30  30  30]
  ...
  [ 91  91  91]
  [ 93  93  93]
  [ 96  96  96]]

 [[ 22  22  22]
  [ 34  34  34]
  [ 30  30  30]
  ...
  [ 91  91  91]
  [ 93  93  93]
  [ 96  96  96]]]
'''

===Load the image===
&lt;pre&gt;
import numpy
from PIL import Image
im=Image.open('Lena-Original-Image-512x512-pixels.png')
pixelMap=im.load()
&lt;/pre&gt;

===Create blank image of same size and type===
&lt;pre&gt;
#mode is type of image
#blank image with same mode and size of original image
img=Image.new(im.mode,im.size)
pixelNew=img.load()
&lt;/pre&gt;

===Logic of Image  Compression===
We will convert image from 8-bit to 3-bit.
&lt;pre&gt;
'''
8bit to 3 bit
2^8&gt;2^3
2^5=32

for:
0-31 put 0
32-63 put 1
64-95 put 2
96-127 put 3
128-159 put 4
160-191 put 5
192-223 put 6
224-255 put 7
'''
&lt;/pre&gt;

===Coding===
&lt;pre&gt;
&lt;/pre&gt;</text>
      <sha1>l08xztb8nyr6wpf4exg7wrz8y25pwyn</sha1>
    </revision>
    <revision>
      <id>4012</id>
      <parentid>4011</parentid>
      <timestamp>2018-10-02T11:09:18Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* Coding */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="11211">==Week 10 Download URL==
https://onlinecourses.nptel.ac.in/noc18_cs35/unit?unit=30&amp;lesson=31

=FLAMES - a Childhood play=
In childhood, we might have played a game called FLAMES to find the relationship (illusion!!) between a boy and a girl.  

All you have to do is

&lt;b&gt; Steps : &lt;/b&gt;
 1. write their names and strike out the common characters that occur in both their names.
 2. Count the remaining letters (SAY X)
 3. Write the word FLAMES and start counting from F and strike out the X&lt;sup&gt;th&lt;/sup&gt; letter till only one character remains
 4. If it is F - then the two are Friends. L - Love, A - Affection,  M - Marriage  E- Enemy S- Sister

&lt;table width=&quot;449&quot; height=&quot;116&quot; border=&quot;1&quot;&gt;
 &lt;tr&gt;
    &lt;td&gt;[[File:Flamestep1.JPG|300px]]&lt;/td&gt;
    &lt;td&gt;[[File:Flamestep2.JPG|300px]]&lt;/td&gt;
    &lt;td&gt;[[File:flamestep3.JPG|300px]]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td width = 200&gt;Remaining No. of Characters = 7&lt;/td&gt;
    &lt;td width = 200&gt;Counting from F, wrap over and strike the 7&lt;SUP&gt;th&lt;/SUP&gt; letter&lt;/td&gt;
    &lt;td width = 200&gt;The remaining letter denotes the relationship&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;
== Refresh the operations on Strings and Lists ==
&lt;table width=&quot;200&quot; border=&quot;1&quot;&gt;
  &lt;tr&gt;
    &lt;th scope=&quot;col&quot; width=100&gt;Functions&lt;/th&gt;
    &lt;th scope=&quot;col&quot; width=100&gt;Example&lt;/th&gt;
    &lt;th scope=&quot;col&quot; width=100&gt;Result&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;import &lt;/td&gt;
    &lt;td&gt;import string&lt;/td&gt;
    &lt;td&gt;import string module&lt;/td&gt;
  &lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;input a string&lt;/td&gt;
    &lt;td&gt;s = input()&lt;/td&gt;
    &lt;td&gt;input a string to the variable s&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Convert to lower case&lt;/td&gt;
    &lt;td&gt;print(s.lower())&lt;/td&gt;
    &lt;td &gt; raj &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Convert to upper case&lt;/td&gt;
    &lt;td&gt;print(s.upper())&lt;/td&gt;
    &lt;td&gt; RAJ&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Convert the string to list&lt;/td&gt;
    &lt;td&gt;s1 = list(s)&lt;/td&gt;
    &lt;td&gt;s1 will be ['R','a','j']&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Replace a character&lt;/td&gt;
    &lt;td&gt;print(s.replace(&quot;j&quot;,&quot;#&quot;))&lt;/td&gt;
    &lt;td&gt;'Ra#' .Note: the content of s is not changed.&lt;/td&gt;
  &lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;Replace more than one character&lt;/td&gt;
    &lt;td&gt;print(s.replace(&quot;aj&quot;,&quot;#&quot;))&lt;/td&gt;
    &lt;td&gt;'R#'&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;slice. l = ['a','b','c','d','e']&lt;/td&gt;
    &lt;td&gt;l[1:4]&lt;/td&gt;
    &lt;td&gt;['b', 'c', 'd'] &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;slice. Start index is missing &lt;/td&gt;
    &lt;td&gt;l[:4]&lt;/td&gt;
    &lt;td&gt; ['a', 'b', 'c', 'd']  Default is 0 if start index is omitted &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;slice. End index is missing &lt;/td&gt;
    &lt;td&gt;l[1:]&lt;/td&gt;
    &lt;td&gt; ['b', 'c', 'd', 'e'] Default is length of the list if end index is omitted&lt;/td&gt;
  &lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;slice. Both index missing &lt;/td&gt;
    &lt;td&gt;l[:]&lt;/td&gt;
    &lt;td&gt; ['a','b','c','d','e'] &lt;/td&gt;
  &lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;Index of first occurrence of a char.  &lt;/td&gt;
    &lt;td&gt;print(l.index('d'))&lt;/td&gt;
    &lt;td&gt; 3 &lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;
== Code as given by Vidya ==
&lt;pre&gt;
import string

def remove_matching_letter(l1,l2) :
    for i in range(len(l1)) :
        for j in range(len(l2)):
            if l1[i] == l2[j] :
                c = l1[i]
                l1.remove(c)
                l2.remove(c)
                l = l1 + ['*'] +l2
                return[l,True]
    l = l1+['*']+l2
    return[l,False]


p1 = input(&quot;Enter first person name:&quot;)
p1 = p1.lower()
p1=  p1.replace(&quot; &quot;,&quot;&quot;)

p2 = input(&quot;Enter Second person name:&quot;)
p2 = p2.lower()
p2 =  p2.replace(&quot; &quot;,&quot;&quot;)

l1 = list(p1)
l2 = list(p2)

proceed = True
while proceed:
    [con_list,proceed] = remove_matching_letter(l1,l2)
    star_index = con_list.index('*')
    l1 = con_list[:star_index]
    l2 = con_list[star_index+1:]
    
count = len(l1) + len(l2)
result = ['Friends','Love','Affection','Marriage','Enemy','Sibling']

while len(result) &gt; 1 :
    split_index = (count%len(result)) -1
    if split_index &gt;= 0 :
        right = result[split_index + 1 :]
        left = result[:split_index]
        result = right + left
    else :
        result = result[:len(result) -1]
print(result[0])
&lt;/pre&gt;

Output:

[[File:flameOutput.png]]

= Image Compression =
Suppose you have a web page with lots of images.  It will take more time to download.  To make downloading faster, either you remove the images or reduce the size of the images.  Both methods will not give a good or required result.  Instead you can do &lt;b&gt; Image Compression&lt;/b&gt;
==NumPy Module==
NumPy is a module for Python. The name is an acronym for &quot;Numeric Python&quot;. It enriches Python with powerful data structures, implementing multi-dimensional arrays and matrices. To work with Artificial Intelligence, Machine Learning or Deep Learning NumPy is required.

&lt;b&gt; How is it superior to List &lt;/b&gt;
Operations on numpy arrays and matrices are easier than Lists.
Consider  the following

cvalues = [22.1, 22.8, 21.9, 22.5, 22.7, 22.3, 21.8, 21.2, 22.9, 22.1]

C = np.array(cvalues)

We would like to find the values into degrees Fahrenheit. This can be easily accomplished using a simple scalar multiplication:

print(C * 9 / 5 + 32)

Using Lists, it should have been

 fvalues = [ x*9/5 + 32 for x in cvalues] 

&lt;b&gt; Operations on numpy &lt;/b&gt;
&lt;table width=&quot;200&quot; border=&quot;1&quot;&gt;
  &lt;tr&gt;
    &lt;th scope=&quot;col&quot;&gt;Operations&lt;/th&gt;
    &lt;th scope=&quot;col&quot;&gt;Descriptions&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;import numpy as np &lt;/td&gt;
    &lt;td&gt;numpy is imported and can be accessed with a short name np&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;a=np.array([1,2,3])&lt;/td&gt;
    &lt;td&gt;One dimensional array 'a' is created&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;print(type(a))&lt;/td&gt;
    &lt;td&gt;&lt;class 'numpy.ndarray'&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;print(a.shape)&lt;/td&gt;
    &lt;td&gt;(3,)&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;print (a[0],a[1],a[2])&lt;/td&gt;
    &lt;td&gt;1 2 3&lt;/td&gt;
  &lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;b=np.array([[1,2,3],[4,5,6]])&lt;/td&gt;
    &lt;td&gt;Two dimensional array 'b' is created&lt;/td&gt;
  &lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;print(b.shape)&lt;/td&gt;
    &lt;td&gt;(2,3)&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;
[[#Top]]
=== NumPy Examples ===
importing numpy module is common to following examples.
&lt;pre&gt;import numpy as np&lt;/pre&gt;

'''Example: Print NumPy Array'''
&lt;pre&gt;
#pass list as argument to np.array
a=np.array([1,2,3])
print(a)
#Output: [1 2 3]
&lt;/pre&gt;

'''Example: Print type of numpy array'''
&lt;pre&gt;
#type of numpy array
print(type(a))
#Output: &lt;class 'numpy.ndarray'&gt;
&lt;/pre&gt;

'''Example: Print shape i.e.size of numpy array'''
&lt;pre&gt;
#shape of numpy array
print(a.shape)
#Output: (3,)
&lt;/pre&gt;

'''Example: Print elements of numpy using indexes'''
&lt;pre&gt;
#print elements of numpy using indexes
print(a[0], a[1], a[2])
#Output: 1 2 3
&lt;/pre&gt;

'''Example: Print shape of array: rows and columns'''
&lt;pre&gt;
b=np.array([[1,2,3],[4,5,6]])
print(b.shape)
#Output: (2, 3) - 2 rows and 3 columns
&lt;/pre&gt;

''' Example: 2x2 array of '0' '''
&lt;pre&gt;
#array of '0'
a=np.zeros((2,2))
print(a)
'''Output:
[[0. 0.]
 [0. 0.]]'''
&lt;/pre&gt;

''' Example: 2x2 array of '1' '''
&lt;pre&gt;
#array of '1'
b= np.ones((2,2))
print(b)
'''Output:
[[1. 1.]
 [1. 1.]]'''
&lt;/pre&gt;

''' Example: 2x2 array of '6' '''
&lt;pre&gt;
#2x2 array of 6
c= np.full((2,2),6)
print(c)
'''Output:
[[6 6]
 [6 6]]'''
&lt;/pre&gt;

''' Example: 2x2 array of random number '''
&lt;pre&gt;
#2x2 array of random number
d=np.random.random((2,2))
print(d)
'''Output:
 [[0.45937293 0.72546193]
 [0.28374715 0.63269858]]'''
&lt;/pre&gt;

'''Example: int32 Data type of array'''
&lt;pre&gt;
x=np.array([1,2])

#data type of x
print(x.dtype)
#Output : int32
&lt;/pre&gt;

'''Example: float64 Data type of array'''
&lt;pre&gt;
y=np.array([1.2,3])
print(y.dtype)
#Output: float64
&lt;/pre&gt;

'''Example: Specifically setting Data type of array as int64'''
&lt;pre&gt;
x=np.array([1,2], dtype=np.int64)
print(x.dtype)
#Output: int64
&lt;/pre&gt;
[[#Top]]

===NumPy array operations===
&lt;pre&gt;
import numpy as np
x=np.array([[1,2],[3,4]],dtype=np.float64)
y=np.array([[5,6],[7,8]],dtype=np.float64)
print(x)
'''Output:
[[1. 2.]
 [3. 4.]]'''
print(y)
'''Output:
[[5. 6.]
 [7. 8.]]
'''

print(x+y)
print(np.add(x,y))

'''
Output:
[[ 6.  8.]
 [10. 12.]]

[[ 6.  8.]
 [10. 12.]]
 '''

print(x-y)
print(np.subtract(x,y))
'''Output:
[[-4. -4.]
 [-4. -4.]]
[[-4. -4.]
 [-4. -4.]]
'''
print(x*y)
print(np.multiply(x,y))
'''Output:
[[ 5. 12.]
 [21. 32.]]
[[ 5. 12.]
 [21. 32.]]
'''
print(x/y)
'''Output:
[[0.2        0.33333333]
 [0.42857143 0.5       ]]
'''
print(np.sqrt(x))
'''Output:
[[1.         1.41421356]
 [1.73205081 2.        ]]
'''
print(np.sqrt(y))
'''Output:
[[2.23606798 2.44948974]
 [2.64575131 2.82842712]]
'''
#Transposition of matrix
np.array([[1,2],[3,4]])
print(x.T)
'''Output:
[[1. 3.]
 [2. 4.]]
 '''
#sum of all elements
print(np.sum(x))#Output:10.0
print(np.sum(x,axis=0))#Output:[4. 6.]
print(np.sum(x,axis=1))#Output:[3. 7.]

&lt;/pre&gt;

==Lossy Compression==
Compression in which data is lost during compression.

==Lossless Compression==
Compression in which data is not lost during compression.

==Compression coding==
We will use the black and white ''lena'' image from net.
[[File:Lena-Original-Image-512x512-pixels.png]]

&lt;pre&gt;
import numpy
from PIL import Image
I=numpy.asanyarray(Image.open('Lena-Original-Image-512x512-pixels.png'))
print(I)
&lt;/pre&gt;
'''Output:
[[[159 159 159]
  [159 159 159]
  [158 158 158]
  ...
  [168 168 168]
  [151 151 151]
  [119 119 119]]

 [[159 159 159]
  [159 159 159]
  [158 158 158]
  ...
  [168 168 168]
  [151 151 151]
  [119 119 119]]

 [[159 159 159]
  [159 159 159]
  [158 158 158]
  ...
  [168 168 168]
  [151 151 151]
  [119 119 119]]

 ...

 [[ 20  20  20]
  [ 29  29  29]
  [ 25  25  25]
  ...
  [ 91  91  91]
  [ 87  87  87]
  [ 84  84  84]]

 [[ 22  22  22]
  [ 34  34  34]
  [ 30  30  30]
  ...
  [ 91  91  91]
  [ 93  93  93]
  [ 96  96  96]]

 [[ 22  22  22]
  [ 34  34  34]
  [ 30  30  30]
  ...
  [ 91  91  91]
  [ 93  93  93]
  [ 96  96  96]]]
'''

===Load the image===
&lt;pre&gt;
import numpy
from PIL import Image
im=Image.open('Lena-Original-Image-512x512-pixels.png')
pixelMap=im.load()
&lt;/pre&gt;

===Create blank image of same size and type===
&lt;pre&gt;
#mode is type of image
#blank image with same mode and size of original image
img=Image.new(im.mode,im.size)
pixelNew=img.load()
&lt;/pre&gt;

===Logic of Image  Compression===
We will convert image from 8-bit to 3-bit.
&lt;pre&gt;
'''
8bit to 3 bit
2^8&gt;2^3
2^5=32

for:
0-31 put 0
32-63 put 1
64-95 put 2
96-127 put 3
128-159 put 4
160-191 put 5
192-223 put 6
224-255 put 7
'''
&lt;/pre&gt;

===Coding===
&lt;pre&gt;
import numpy
from PIL import Image
im=Image.open('Lena-Original-Image-512x512-pixels.png')
pixelMap=im.load()
#I=numpy.asanyarray(Image.open('Lena-Original-Image-512x512-pixels.png'))
#print(I)

#mode is type of image
#blank image with same mode and size of original image
img=Image.new(im.mode,im.size)
pixelNew=img.load()


for i in range(img.size[0]):
    for j in range(img.size[1]):
        if(pixelMap[i,j]&gt;=0 and pixelMap[i,j]&lt;=31):
            pixelNew[i,j]=0
        elif(pixelMap[i,j]&gt;=32 and pixelMap[i,j]&lt;=63):
            pixelNew[i,j]=1
        elif(pixelMap[i,j]&gt;=64 and pixelMap[i,j]&lt;=95):
            pixelNew[i,j]=2
        elif(pixelMap[i,j]&gt;=96 and pixelMap[i,j]&lt;=127):
            pixelNew[i,j]=3
        elif(pixelMap[i,j]&gt;=128 and pixelMap[i,j]&lt;=159):
            pixelNew[i,j]=4
        elif(pixelMap[i,j]&gt;=160 and pixelMap[i,j]&lt;=191):
            pixelNew[i,j]=5    
        elif(pixelMap[i,j]&gt;=192 and pixelMap[i,j]&lt;=223):
            pixelNew[i,j]=6
        elif(pixelMap[i,j]&gt;=224 and pixelMap[i,j]&lt;=255):
            pixelNew[i,j]=7

img.save('lena2.jpg')
J=numpy.asanyarray(Image.open('lena2.jpg'))
&lt;/pre&gt;</text>
      <sha1>5y5zmkqrgjb65tamjhdqf5qnflrlmvd</sha1>
    </revision>
    <revision>
      <id>4013</id>
      <parentid>4012</parentid>
      <timestamp>2018-10-02T11:22:34Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* Coding */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="11230">==Week 10 Download URL==
https://onlinecourses.nptel.ac.in/noc18_cs35/unit?unit=30&amp;lesson=31

=FLAMES - a Childhood play=
In childhood, we might have played a game called FLAMES to find the relationship (illusion!!) between a boy and a girl.  

All you have to do is

&lt;b&gt; Steps : &lt;/b&gt;
 1. write their names and strike out the common characters that occur in both their names.
 2. Count the remaining letters (SAY X)
 3. Write the word FLAMES and start counting from F and strike out the X&lt;sup&gt;th&lt;/sup&gt; letter till only one character remains
 4. If it is F - then the two are Friends. L - Love, A - Affection,  M - Marriage  E- Enemy S- Sister

&lt;table width=&quot;449&quot; height=&quot;116&quot; border=&quot;1&quot;&gt;
 &lt;tr&gt;
    &lt;td&gt;[[File:Flamestep1.JPG|300px]]&lt;/td&gt;
    &lt;td&gt;[[File:Flamestep2.JPG|300px]]&lt;/td&gt;
    &lt;td&gt;[[File:flamestep3.JPG|300px]]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td width = 200&gt;Remaining No. of Characters = 7&lt;/td&gt;
    &lt;td width = 200&gt;Counting from F, wrap over and strike the 7&lt;SUP&gt;th&lt;/SUP&gt; letter&lt;/td&gt;
    &lt;td width = 200&gt;The remaining letter denotes the relationship&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;
== Refresh the operations on Strings and Lists ==
&lt;table width=&quot;200&quot; border=&quot;1&quot;&gt;
  &lt;tr&gt;
    &lt;th scope=&quot;col&quot; width=100&gt;Functions&lt;/th&gt;
    &lt;th scope=&quot;col&quot; width=100&gt;Example&lt;/th&gt;
    &lt;th scope=&quot;col&quot; width=100&gt;Result&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;import &lt;/td&gt;
    &lt;td&gt;import string&lt;/td&gt;
    &lt;td&gt;import string module&lt;/td&gt;
  &lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;input a string&lt;/td&gt;
    &lt;td&gt;s = input()&lt;/td&gt;
    &lt;td&gt;input a string to the variable s&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Convert to lower case&lt;/td&gt;
    &lt;td&gt;print(s.lower())&lt;/td&gt;
    &lt;td &gt; raj &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Convert to upper case&lt;/td&gt;
    &lt;td&gt;print(s.upper())&lt;/td&gt;
    &lt;td&gt; RAJ&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Convert the string to list&lt;/td&gt;
    &lt;td&gt;s1 = list(s)&lt;/td&gt;
    &lt;td&gt;s1 will be ['R','a','j']&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Replace a character&lt;/td&gt;
    &lt;td&gt;print(s.replace(&quot;j&quot;,&quot;#&quot;))&lt;/td&gt;
    &lt;td&gt;'Ra#' .Note: the content of s is not changed.&lt;/td&gt;
  &lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;Replace more than one character&lt;/td&gt;
    &lt;td&gt;print(s.replace(&quot;aj&quot;,&quot;#&quot;))&lt;/td&gt;
    &lt;td&gt;'R#'&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;slice. l = ['a','b','c','d','e']&lt;/td&gt;
    &lt;td&gt;l[1:4]&lt;/td&gt;
    &lt;td&gt;['b', 'c', 'd'] &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;slice. Start index is missing &lt;/td&gt;
    &lt;td&gt;l[:4]&lt;/td&gt;
    &lt;td&gt; ['a', 'b', 'c', 'd']  Default is 0 if start index is omitted &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;slice. End index is missing &lt;/td&gt;
    &lt;td&gt;l[1:]&lt;/td&gt;
    &lt;td&gt; ['b', 'c', 'd', 'e'] Default is length of the list if end index is omitted&lt;/td&gt;
  &lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;slice. Both index missing &lt;/td&gt;
    &lt;td&gt;l[:]&lt;/td&gt;
    &lt;td&gt; ['a','b','c','d','e'] &lt;/td&gt;
  &lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;Index of first occurrence of a char.  &lt;/td&gt;
    &lt;td&gt;print(l.index('d'))&lt;/td&gt;
    &lt;td&gt; 3 &lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;
== Code as given by Vidya ==
&lt;pre&gt;
import string

def remove_matching_letter(l1,l2) :
    for i in range(len(l1)) :
        for j in range(len(l2)):
            if l1[i] == l2[j] :
                c = l1[i]
                l1.remove(c)
                l2.remove(c)
                l = l1 + ['*'] +l2
                return[l,True]
    l = l1+['*']+l2
    return[l,False]


p1 = input(&quot;Enter first person name:&quot;)
p1 = p1.lower()
p1=  p1.replace(&quot; &quot;,&quot;&quot;)

p2 = input(&quot;Enter Second person name:&quot;)
p2 = p2.lower()
p2 =  p2.replace(&quot; &quot;,&quot;&quot;)

l1 = list(p1)
l2 = list(p2)

proceed = True
while proceed:
    [con_list,proceed] = remove_matching_letter(l1,l2)
    star_index = con_list.index('*')
    l1 = con_list[:star_index]
    l2 = con_list[star_index+1:]
    
count = len(l1) + len(l2)
result = ['Friends','Love','Affection','Marriage','Enemy','Sibling']

while len(result) &gt; 1 :
    split_index = (count%len(result)) -1
    if split_index &gt;= 0 :
        right = result[split_index + 1 :]
        left = result[:split_index]
        result = right + left
    else :
        result = result[:len(result) -1]
print(result[0])
&lt;/pre&gt;

Output:

[[File:flameOutput.png]]

= Image Compression =
Suppose you have a web page with lots of images.  It will take more time to download.  To make downloading faster, either you remove the images or reduce the size of the images.  Both methods will not give a good or required result.  Instead you can do &lt;b&gt; Image Compression&lt;/b&gt;
==NumPy Module==
NumPy is a module for Python. The name is an acronym for &quot;Numeric Python&quot;. It enriches Python with powerful data structures, implementing multi-dimensional arrays and matrices. To work with Artificial Intelligence, Machine Learning or Deep Learning NumPy is required.

&lt;b&gt; How is it superior to List &lt;/b&gt;
Operations on numpy arrays and matrices are easier than Lists.
Consider  the following

cvalues = [22.1, 22.8, 21.9, 22.5, 22.7, 22.3, 21.8, 21.2, 22.9, 22.1]

C = np.array(cvalues)

We would like to find the values into degrees Fahrenheit. This can be easily accomplished using a simple scalar multiplication:

print(C * 9 / 5 + 32)

Using Lists, it should have been

 fvalues = [ x*9/5 + 32 for x in cvalues] 

&lt;b&gt; Operations on numpy &lt;/b&gt;
&lt;table width=&quot;200&quot; border=&quot;1&quot;&gt;
  &lt;tr&gt;
    &lt;th scope=&quot;col&quot;&gt;Operations&lt;/th&gt;
    &lt;th scope=&quot;col&quot;&gt;Descriptions&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;import numpy as np &lt;/td&gt;
    &lt;td&gt;numpy is imported and can be accessed with a short name np&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;a=np.array([1,2,3])&lt;/td&gt;
    &lt;td&gt;One dimensional array 'a' is created&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;print(type(a))&lt;/td&gt;
    &lt;td&gt;&lt;class 'numpy.ndarray'&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;print(a.shape)&lt;/td&gt;
    &lt;td&gt;(3,)&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;print (a[0],a[1],a[2])&lt;/td&gt;
    &lt;td&gt;1 2 3&lt;/td&gt;
  &lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;b=np.array([[1,2,3],[4,5,6]])&lt;/td&gt;
    &lt;td&gt;Two dimensional array 'b' is created&lt;/td&gt;
  &lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;print(b.shape)&lt;/td&gt;
    &lt;td&gt;(2,3)&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;
[[#Top]]
=== NumPy Examples ===
importing numpy module is common to following examples.
&lt;pre&gt;import numpy as np&lt;/pre&gt;

'''Example: Print NumPy Array'''
&lt;pre&gt;
#pass list as argument to np.array
a=np.array([1,2,3])
print(a)
#Output: [1 2 3]
&lt;/pre&gt;

'''Example: Print type of numpy array'''
&lt;pre&gt;
#type of numpy array
print(type(a))
#Output: &lt;class 'numpy.ndarray'&gt;
&lt;/pre&gt;

'''Example: Print shape i.e.size of numpy array'''
&lt;pre&gt;
#shape of numpy array
print(a.shape)
#Output: (3,)
&lt;/pre&gt;

'''Example: Print elements of numpy using indexes'''
&lt;pre&gt;
#print elements of numpy using indexes
print(a[0], a[1], a[2])
#Output: 1 2 3
&lt;/pre&gt;

'''Example: Print shape of array: rows and columns'''
&lt;pre&gt;
b=np.array([[1,2,3],[4,5,6]])
print(b.shape)
#Output: (2, 3) - 2 rows and 3 columns
&lt;/pre&gt;

''' Example: 2x2 array of '0' '''
&lt;pre&gt;
#array of '0'
a=np.zeros((2,2))
print(a)
'''Output:
[[0. 0.]
 [0. 0.]]'''
&lt;/pre&gt;

''' Example: 2x2 array of '1' '''
&lt;pre&gt;
#array of '1'
b= np.ones((2,2))
print(b)
'''Output:
[[1. 1.]
 [1. 1.]]'''
&lt;/pre&gt;

''' Example: 2x2 array of '6' '''
&lt;pre&gt;
#2x2 array of 6
c= np.full((2,2),6)
print(c)
'''Output:
[[6 6]
 [6 6]]'''
&lt;/pre&gt;

''' Example: 2x2 array of random number '''
&lt;pre&gt;
#2x2 array of random number
d=np.random.random((2,2))
print(d)
'''Output:
 [[0.45937293 0.72546193]
 [0.28374715 0.63269858]]'''
&lt;/pre&gt;

'''Example: int32 Data type of array'''
&lt;pre&gt;
x=np.array([1,2])

#data type of x
print(x.dtype)
#Output : int32
&lt;/pre&gt;

'''Example: float64 Data type of array'''
&lt;pre&gt;
y=np.array([1.2,3])
print(y.dtype)
#Output: float64
&lt;/pre&gt;

'''Example: Specifically setting Data type of array as int64'''
&lt;pre&gt;
x=np.array([1,2], dtype=np.int64)
print(x.dtype)
#Output: int64
&lt;/pre&gt;
[[#Top]]

===NumPy array operations===
&lt;pre&gt;
import numpy as np
x=np.array([[1,2],[3,4]],dtype=np.float64)
y=np.array([[5,6],[7,8]],dtype=np.float64)
print(x)
'''Output:
[[1. 2.]
 [3. 4.]]'''
print(y)
'''Output:
[[5. 6.]
 [7. 8.]]
'''

print(x+y)
print(np.add(x,y))

'''
Output:
[[ 6.  8.]
 [10. 12.]]

[[ 6.  8.]
 [10. 12.]]
 '''

print(x-y)
print(np.subtract(x,y))
'''Output:
[[-4. -4.]
 [-4. -4.]]
[[-4. -4.]
 [-4. -4.]]
'''
print(x*y)
print(np.multiply(x,y))
'''Output:
[[ 5. 12.]
 [21. 32.]]
[[ 5. 12.]
 [21. 32.]]
'''
print(x/y)
'''Output:
[[0.2        0.33333333]
 [0.42857143 0.5       ]]
'''
print(np.sqrt(x))
'''Output:
[[1.         1.41421356]
 [1.73205081 2.        ]]
'''
print(np.sqrt(y))
'''Output:
[[2.23606798 2.44948974]
 [2.64575131 2.82842712]]
'''
#Transposition of matrix
np.array([[1,2],[3,4]])
print(x.T)
'''Output:
[[1. 3.]
 [2. 4.]]
 '''
#sum of all elements
print(np.sum(x))#Output:10.0
print(np.sum(x,axis=0))#Output:[4. 6.]
print(np.sum(x,axis=1))#Output:[3. 7.]

&lt;/pre&gt;

==Lossy Compression==
Compression in which data is lost during compression.

==Lossless Compression==
Compression in which data is not lost during compression.

==Compression coding==
We will use the black and white ''lena'' image from net.
[[File:Lena-Original-Image-512x512-pixels.png]]

&lt;pre&gt;
import numpy
from PIL import Image
I=numpy.asanyarray(Image.open('Lena-Original-Image-512x512-pixels.png'))
print(I)
&lt;/pre&gt;
'''Output:
[[[159 159 159]
  [159 159 159]
  [158 158 158]
  ...
  [168 168 168]
  [151 151 151]
  [119 119 119]]

 [[159 159 159]
  [159 159 159]
  [158 158 158]
  ...
  [168 168 168]
  [151 151 151]
  [119 119 119]]

 [[159 159 159]
  [159 159 159]
  [158 158 158]
  ...
  [168 168 168]
  [151 151 151]
  [119 119 119]]

 ...

 [[ 20  20  20]
  [ 29  29  29]
  [ 25  25  25]
  ...
  [ 91  91  91]
  [ 87  87  87]
  [ 84  84  84]]

 [[ 22  22  22]
  [ 34  34  34]
  [ 30  30  30]
  ...
  [ 91  91  91]
  [ 93  93  93]
  [ 96  96  96]]

 [[ 22  22  22]
  [ 34  34  34]
  [ 30  30  30]
  ...
  [ 91  91  91]
  [ 93  93  93]
  [ 96  96  96]]]
'''

===Load the image===
&lt;pre&gt;
import numpy
from PIL import Image
im=Image.open('Lena-Original-Image-512x512-pixels.png')
pixelMap=im.load()
&lt;/pre&gt;

===Create blank image of same size and type===
&lt;pre&gt;
#mode is type of image
#blank image with same mode and size of original image
img=Image.new(im.mode,im.size)
pixelNew=img.load()
&lt;/pre&gt;

===Logic of Image  Compression===
We will convert image from 8-bit to 3-bit.
&lt;pre&gt;
'''
8bit to 3 bit
2^8&gt;2^3
2^5=32

for:
0-31 put 0
32-63 put 1
64-95 put 2
96-127 put 3
128-159 put 4
160-191 put 5
192-223 put 6
224-255 put 7
'''
&lt;/pre&gt;

===Coding===
&lt;pre&gt;
import numpy
from PIL import Image
im=Image.open('Lena-Original-Image-512x512-pixels.png')
pixelMap=im.load()
#I=numpy.asanyarray(Image.open('Lena-Original-Image-512x512-pixels.png'))
#print(I)

#mode is type of image
#blank image with same mode and size of original image
img=Image.new(im.mode,im.size)
pixelNew=img.load()


for i in range(img.size[0]):
    for j in range(img.size[1]):
        if(pixelMap[i,j]&gt;=0 and pixelMap[i,j]&lt;=31):
            pixelNew[i,j]=0
        elif(pixelMap[i,j]&gt;=32 and pixelMap[i,j]&lt;=63):
            pixelNew[i,j]=1
        elif(pixelMap[i,j]&gt;=64 and pixelMap[i,j]&lt;=95):
            pixelNew[i,j]=2
        elif(pixelMap[i,j]&gt;=96 and pixelMap[i,j]&lt;=127):
            pixelNew[i,j]=3
        elif(pixelMap[i,j]&gt;=128 and pixelMap[i,j]&lt;=159):
            pixelNew[i,j]=4
        elif(pixelMap[i,j]&gt;=160 and pixelMap[i,j]&lt;=191):
            pixelNew[i,j]=5    
        elif(pixelMap[i,j]&gt;=192 and pixelMap[i,j]&lt;=223):
            pixelNew[i,j]=6
        elif(pixelMap[i,j]&gt;=224 and pixelMap[i,j]&lt;=255):
            pixelNew[i,j]=7

img.save('lena2.png')
J=numpy.asanyarray(Image.open('lena2.png'))
&lt;/pre&gt;
[[File:lena2.jpg]]</text>
      <sha1>5pyk4juy9wt36nkq8o4t85lvs770re5</sha1>
    </revision>
    <revision>
      <id>4015</id>
      <parentid>4013</parentid>
      <timestamp>2018-10-02T11:36:43Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* Compression coding */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="11264">==Week 10 Download URL==
https://onlinecourses.nptel.ac.in/noc18_cs35/unit?unit=30&amp;lesson=31

=FLAMES - a Childhood play=
In childhood, we might have played a game called FLAMES to find the relationship (illusion!!) between a boy and a girl.  

All you have to do is

&lt;b&gt; Steps : &lt;/b&gt;
 1. write their names and strike out the common characters that occur in both their names.
 2. Count the remaining letters (SAY X)
 3. Write the word FLAMES and start counting from F and strike out the X&lt;sup&gt;th&lt;/sup&gt; letter till only one character remains
 4. If it is F - then the two are Friends. L - Love, A - Affection,  M - Marriage  E- Enemy S- Sister

&lt;table width=&quot;449&quot; height=&quot;116&quot; border=&quot;1&quot;&gt;
 &lt;tr&gt;
    &lt;td&gt;[[File:Flamestep1.JPG|300px]]&lt;/td&gt;
    &lt;td&gt;[[File:Flamestep2.JPG|300px]]&lt;/td&gt;
    &lt;td&gt;[[File:flamestep3.JPG|300px]]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td width = 200&gt;Remaining No. of Characters = 7&lt;/td&gt;
    &lt;td width = 200&gt;Counting from F, wrap over and strike the 7&lt;SUP&gt;th&lt;/SUP&gt; letter&lt;/td&gt;
    &lt;td width = 200&gt;The remaining letter denotes the relationship&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;
== Refresh the operations on Strings and Lists ==
&lt;table width=&quot;200&quot; border=&quot;1&quot;&gt;
  &lt;tr&gt;
    &lt;th scope=&quot;col&quot; width=100&gt;Functions&lt;/th&gt;
    &lt;th scope=&quot;col&quot; width=100&gt;Example&lt;/th&gt;
    &lt;th scope=&quot;col&quot; width=100&gt;Result&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;import &lt;/td&gt;
    &lt;td&gt;import string&lt;/td&gt;
    &lt;td&gt;import string module&lt;/td&gt;
  &lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;input a string&lt;/td&gt;
    &lt;td&gt;s = input()&lt;/td&gt;
    &lt;td&gt;input a string to the variable s&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Convert to lower case&lt;/td&gt;
    &lt;td&gt;print(s.lower())&lt;/td&gt;
    &lt;td &gt; raj &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Convert to upper case&lt;/td&gt;
    &lt;td&gt;print(s.upper())&lt;/td&gt;
    &lt;td&gt; RAJ&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Convert the string to list&lt;/td&gt;
    &lt;td&gt;s1 = list(s)&lt;/td&gt;
    &lt;td&gt;s1 will be ['R','a','j']&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Replace a character&lt;/td&gt;
    &lt;td&gt;print(s.replace(&quot;j&quot;,&quot;#&quot;))&lt;/td&gt;
    &lt;td&gt;'Ra#' .Note: the content of s is not changed.&lt;/td&gt;
  &lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;Replace more than one character&lt;/td&gt;
    &lt;td&gt;print(s.replace(&quot;aj&quot;,&quot;#&quot;))&lt;/td&gt;
    &lt;td&gt;'R#'&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;slice. l = ['a','b','c','d','e']&lt;/td&gt;
    &lt;td&gt;l[1:4]&lt;/td&gt;
    &lt;td&gt;['b', 'c', 'd'] &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;slice. Start index is missing &lt;/td&gt;
    &lt;td&gt;l[:4]&lt;/td&gt;
    &lt;td&gt; ['a', 'b', 'c', 'd']  Default is 0 if start index is omitted &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;slice. End index is missing &lt;/td&gt;
    &lt;td&gt;l[1:]&lt;/td&gt;
    &lt;td&gt; ['b', 'c', 'd', 'e'] Default is length of the list if end index is omitted&lt;/td&gt;
  &lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;slice. Both index missing &lt;/td&gt;
    &lt;td&gt;l[:]&lt;/td&gt;
    &lt;td&gt; ['a','b','c','d','e'] &lt;/td&gt;
  &lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;Index of first occurrence of a char.  &lt;/td&gt;
    &lt;td&gt;print(l.index('d'))&lt;/td&gt;
    &lt;td&gt; 3 &lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;
== Code as given by Vidya ==
&lt;pre&gt;
import string

def remove_matching_letter(l1,l2) :
    for i in range(len(l1)) :
        for j in range(len(l2)):
            if l1[i] == l2[j] :
                c = l1[i]
                l1.remove(c)
                l2.remove(c)
                l = l1 + ['*'] +l2
                return[l,True]
    l = l1+['*']+l2
    return[l,False]


p1 = input(&quot;Enter first person name:&quot;)
p1 = p1.lower()
p1=  p1.replace(&quot; &quot;,&quot;&quot;)

p2 = input(&quot;Enter Second person name:&quot;)
p2 = p2.lower()
p2 =  p2.replace(&quot; &quot;,&quot;&quot;)

l1 = list(p1)
l2 = list(p2)

proceed = True
while proceed:
    [con_list,proceed] = remove_matching_letter(l1,l2)
    star_index = con_list.index('*')
    l1 = con_list[:star_index]
    l2 = con_list[star_index+1:]
    
count = len(l1) + len(l2)
result = ['Friends','Love','Affection','Marriage','Enemy','Sibling']

while len(result) &gt; 1 :
    split_index = (count%len(result)) -1
    if split_index &gt;= 0 :
        right = result[split_index + 1 :]
        left = result[:split_index]
        result = right + left
    else :
        result = result[:len(result) -1]
print(result[0])
&lt;/pre&gt;

Output:

[[File:flameOutput.png]]

= Image Compression =
Suppose you have a web page with lots of images.  It will take more time to download.  To make downloading faster, either you remove the images or reduce the size of the images.  Both methods will not give a good or required result.  Instead you can do &lt;b&gt; Image Compression&lt;/b&gt;
==NumPy Module==
NumPy is a module for Python. The name is an acronym for &quot;Numeric Python&quot;. It enriches Python with powerful data structures, implementing multi-dimensional arrays and matrices. To work with Artificial Intelligence, Machine Learning or Deep Learning NumPy is required.

&lt;b&gt; How is it superior to List &lt;/b&gt;
Operations on numpy arrays and matrices are easier than Lists.
Consider  the following

cvalues = [22.1, 22.8, 21.9, 22.5, 22.7, 22.3, 21.8, 21.2, 22.9, 22.1]

C = np.array(cvalues)

We would like to find the values into degrees Fahrenheit. This can be easily accomplished using a simple scalar multiplication:

print(C * 9 / 5 + 32)

Using Lists, it should have been

 fvalues = [ x*9/5 + 32 for x in cvalues] 

&lt;b&gt; Operations on numpy &lt;/b&gt;
&lt;table width=&quot;200&quot; border=&quot;1&quot;&gt;
  &lt;tr&gt;
    &lt;th scope=&quot;col&quot;&gt;Operations&lt;/th&gt;
    &lt;th scope=&quot;col&quot;&gt;Descriptions&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;import numpy as np &lt;/td&gt;
    &lt;td&gt;numpy is imported and can be accessed with a short name np&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;a=np.array([1,2,3])&lt;/td&gt;
    &lt;td&gt;One dimensional array 'a' is created&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;print(type(a))&lt;/td&gt;
    &lt;td&gt;&lt;class 'numpy.ndarray'&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;print(a.shape)&lt;/td&gt;
    &lt;td&gt;(3,)&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;print (a[0],a[1],a[2])&lt;/td&gt;
    &lt;td&gt;1 2 3&lt;/td&gt;
  &lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;b=np.array([[1,2,3],[4,5,6]])&lt;/td&gt;
    &lt;td&gt;Two dimensional array 'b' is created&lt;/td&gt;
  &lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;print(b.shape)&lt;/td&gt;
    &lt;td&gt;(2,3)&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;
[[#Top]]
=== NumPy Examples ===
importing numpy module is common to following examples.
&lt;pre&gt;import numpy as np&lt;/pre&gt;

'''Example: Print NumPy Array'''
&lt;pre&gt;
#pass list as argument to np.array
a=np.array([1,2,3])
print(a)
#Output: [1 2 3]
&lt;/pre&gt;

'''Example: Print type of numpy array'''
&lt;pre&gt;
#type of numpy array
print(type(a))
#Output: &lt;class 'numpy.ndarray'&gt;
&lt;/pre&gt;

'''Example: Print shape i.e.size of numpy array'''
&lt;pre&gt;
#shape of numpy array
print(a.shape)
#Output: (3,)
&lt;/pre&gt;

'''Example: Print elements of numpy using indexes'''
&lt;pre&gt;
#print elements of numpy using indexes
print(a[0], a[1], a[2])
#Output: 1 2 3
&lt;/pre&gt;

'''Example: Print shape of array: rows and columns'''
&lt;pre&gt;
b=np.array([[1,2,3],[4,5,6]])
print(b.shape)
#Output: (2, 3) - 2 rows and 3 columns
&lt;/pre&gt;

''' Example: 2x2 array of '0' '''
&lt;pre&gt;
#array of '0'
a=np.zeros((2,2))
print(a)
'''Output:
[[0. 0.]
 [0. 0.]]'''
&lt;/pre&gt;

''' Example: 2x2 array of '1' '''
&lt;pre&gt;
#array of '1'
b= np.ones((2,2))
print(b)
'''Output:
[[1. 1.]
 [1. 1.]]'''
&lt;/pre&gt;

''' Example: 2x2 array of '6' '''
&lt;pre&gt;
#2x2 array of 6
c= np.full((2,2),6)
print(c)
'''Output:
[[6 6]
 [6 6]]'''
&lt;/pre&gt;

''' Example: 2x2 array of random number '''
&lt;pre&gt;
#2x2 array of random number
d=np.random.random((2,2))
print(d)
'''Output:
 [[0.45937293 0.72546193]
 [0.28374715 0.63269858]]'''
&lt;/pre&gt;

'''Example: int32 Data type of array'''
&lt;pre&gt;
x=np.array([1,2])

#data type of x
print(x.dtype)
#Output : int32
&lt;/pre&gt;

'''Example: float64 Data type of array'''
&lt;pre&gt;
y=np.array([1.2,3])
print(y.dtype)
#Output: float64
&lt;/pre&gt;

'''Example: Specifically setting Data type of array as int64'''
&lt;pre&gt;
x=np.array([1,2], dtype=np.int64)
print(x.dtype)
#Output: int64
&lt;/pre&gt;
[[#Top]]

===NumPy array operations===
&lt;pre&gt;
import numpy as np
x=np.array([[1,2],[3,4]],dtype=np.float64)
y=np.array([[5,6],[7,8]],dtype=np.float64)
print(x)
'''Output:
[[1. 2.]
 [3. 4.]]'''
print(y)
'''Output:
[[5. 6.]
 [7. 8.]]
'''

print(x+y)
print(np.add(x,y))

'''
Output:
[[ 6.  8.]
 [10. 12.]]

[[ 6.  8.]
 [10. 12.]]
 '''

print(x-y)
print(np.subtract(x,y))
'''Output:
[[-4. -4.]
 [-4. -4.]]
[[-4. -4.]
 [-4. -4.]]
'''
print(x*y)
print(np.multiply(x,y))
'''Output:
[[ 5. 12.]
 [21. 32.]]
[[ 5. 12.]
 [21. 32.]]
'''
print(x/y)
'''Output:
[[0.2        0.33333333]
 [0.42857143 0.5       ]]
'''
print(np.sqrt(x))
'''Output:
[[1.         1.41421356]
 [1.73205081 2.        ]]
'''
print(np.sqrt(y))
'''Output:
[[2.23606798 2.44948974]
 [2.64575131 2.82842712]]
'''
#Transposition of matrix
np.array([[1,2],[3,4]])
print(x.T)
'''Output:
[[1. 3.]
 [2. 4.]]
 '''
#sum of all elements
print(np.sum(x))#Output:10.0
print(np.sum(x,axis=0))#Output:[4. 6.]
print(np.sum(x,axis=1))#Output:[3. 7.]

&lt;/pre&gt;

==Lossy Compression==
Compression in which data is lost during compression.

==Lossless Compression==
Compression in which data is not lost during compression.

==Compression coding==
We will use the black and white ''lena'' image from net.
[[File:Lena-Original-Image.jpg]]

&lt;pre&gt;
import numpy
from PIL import Image
I=numpy.asanyarray(Image.open('Lena-Original-Image-512x512-pixels.png'))
print(I)
&lt;/pre&gt;
'''Output:
[[[159 159 159]
  [159 159 159]
  [158 158 158]
  ...
  [168 168 168]
  [151 151 151]
  [119 119 119]]

 [[159 159 159]
  [159 159 159]
  [158 158 158]
  ...
  [168 168 168]
  [151 151 151]
  [119 119 119]]

 [[159 159 159]
  [159 159 159]
  [158 158 158]
  ...
  [168 168 168]
  [151 151 151]
  [119 119 119]]

 ...

 [[ 20  20  20]
  [ 29  29  29]
  [ 25  25  25]
  ...
  [ 91  91  91]
  [ 87  87  87]
  [ 84  84  84]]

 [[ 22  22  22]
  [ 34  34  34]
  [ 30  30  30]
  ...
  [ 91  91  91]
  [ 93  93  93]
  [ 96  96  96]]

 [[ 22  22  22]
  [ 34  34  34]
  [ 30  30  30]
  ...
  [ 91  91  91]
  [ 93  93  93]
  [ 96  96  96]]]
'''

===Load the image===
&lt;pre&gt;
import numpy
from PIL import Image
im=Image.open('Lena-Original-Image-512x512-pixels.png')
pixelMap=im.load()
&lt;/pre&gt;

===Create blank image of same size and type===
&lt;pre&gt;
#mode is type of image
#blank image with same mode and size of original image
img=Image.new(im.mode,im.size)
pixelNew=img.load()
&lt;/pre&gt;

===Logic of Image  Compression===
We will convert image from 8-bit to 3-bit.
&lt;pre&gt;
'''
8bit to 3 bit
2^8&gt;2^3
2^5=32

for:
0-31 put 0
32-63 put 1
64-95 put 2
96-127 put 3
128-159 put 4
160-191 put 5
192-223 put 6
224-255 put 7
'''
&lt;/pre&gt;

===Coding===
&lt;pre&gt;
import numpy
from PIL import Image
im=Image.open('Lena-Original-Image.jpg')
pixelMap=im.load()

#mode is type of image
#blank image with same mode and size of original image
img=Image.new(im.mode,im.size)
pixelNew=img.load()

'''
8bit to 3 bit
2^8&gt;2^3
2^5=32

for:
0-31 put 0
32-63 put 1
64-95 put 2
96-127 put 3
128-159 put 4
160-191 put 5
192-223 put 6
224-255 put 7
'''

for i in range(img.size[0]):
    for j in range(img.size[1]):
        if(pixelMap[i,j]&gt;=0 and pixelMap[i,j]&lt;=31):
            pixelNew[i,j]=0
        elif(pixelMap[i,j]&gt;=32 and pixelMap[i,j]&lt;=63):
            pixelNew[i,j]=1
        elif(pixelMap[i,j]&gt;=64 and pixelMap[i,j]&lt;=95):
            pixelNew[i,j]=2
        elif(pixelMap[i,j]&gt;=96 and pixelMap[i,j]&lt;=127):
            pixelNew[i,j]=3
        elif(pixelMap[i,j]&gt;=128 and pixelMap[i,j]&lt;=159):
            pixelNew[i,j]=4
        elif(pixelMap[i,j]&gt;=160 and pixelMap[i,j]&lt;=191):
            pixelNew[i,j]=5    
        elif(pixelMap[i,j]&gt;=192 and pixelMap[i,j]&lt;=223):
            pixelNew[i,j]=6
        elif(pixelMap[i,j]&gt;=224 and pixelMap[i,j]&lt;=255):
            pixelNew[i,j]=7

img.save('lena2.jpg')
J=numpy.asanyarray(Image.open('lena2.jpg'))

&lt;/pre&gt;
[[File:lena2.jpg]]</text>
      <sha1>1lynwh9xrlf384jwsu5bhttgao49kcg</sha1>
    </revision>
    <revision>
      <id>4018</id>
      <parentid>4015</parentid>
      <timestamp>2018-10-03T04:28:27Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="11374">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_10 Contributors of this page]
==Week 10 Download URL==
https://onlinecourses.nptel.ac.in/noc18_cs35/unit?unit=30&amp;lesson=31

=FLAMES - a Childhood play=
In childhood, we might have played a game called FLAMES to find the relationship (illusion!!) between a boy and a girl.  

All you have to do is

&lt;b&gt; Steps : &lt;/b&gt;
 1. write their names and strike out the common characters that occur in both their names.
 2. Count the remaining letters (SAY X)
 3. Write the word FLAMES and start counting from F and strike out the X&lt;sup&gt;th&lt;/sup&gt; letter till only one character remains
 4. If it is F - then the two are Friends. L - Love, A - Affection,  M - Marriage  E- Enemy S- Sister

&lt;table width=&quot;449&quot; height=&quot;116&quot; border=&quot;1&quot;&gt;
 &lt;tr&gt;
    &lt;td&gt;[[File:Flamestep1.JPG|300px]]&lt;/td&gt;
    &lt;td&gt;[[File:Flamestep2.JPG|300px]]&lt;/td&gt;
    &lt;td&gt;[[File:flamestep3.JPG|300px]]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td width = 200&gt;Remaining No. of Characters = 7&lt;/td&gt;
    &lt;td width = 200&gt;Counting from F, wrap over and strike the 7&lt;SUP&gt;th&lt;/SUP&gt; letter&lt;/td&gt;
    &lt;td width = 200&gt;The remaining letter denotes the relationship&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;
== Refresh the operations on Strings and Lists ==
&lt;table width=&quot;200&quot; border=&quot;1&quot;&gt;
  &lt;tr&gt;
    &lt;th scope=&quot;col&quot; width=100&gt;Functions&lt;/th&gt;
    &lt;th scope=&quot;col&quot; width=100&gt;Example&lt;/th&gt;
    &lt;th scope=&quot;col&quot; width=100&gt;Result&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;import &lt;/td&gt;
    &lt;td&gt;import string&lt;/td&gt;
    &lt;td&gt;import string module&lt;/td&gt;
  &lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;input a string&lt;/td&gt;
    &lt;td&gt;s = input()&lt;/td&gt;
    &lt;td&gt;input a string to the variable s&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Convert to lower case&lt;/td&gt;
    &lt;td&gt;print(s.lower())&lt;/td&gt;
    &lt;td &gt; raj &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Convert to upper case&lt;/td&gt;
    &lt;td&gt;print(s.upper())&lt;/td&gt;
    &lt;td&gt; RAJ&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Convert the string to list&lt;/td&gt;
    &lt;td&gt;s1 = list(s)&lt;/td&gt;
    &lt;td&gt;s1 will be ['R','a','j']&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Replace a character&lt;/td&gt;
    &lt;td&gt;print(s.replace(&quot;j&quot;,&quot;#&quot;))&lt;/td&gt;
    &lt;td&gt;'Ra#' .Note: the content of s is not changed.&lt;/td&gt;
  &lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;Replace more than one character&lt;/td&gt;
    &lt;td&gt;print(s.replace(&quot;aj&quot;,&quot;#&quot;))&lt;/td&gt;
    &lt;td&gt;'R#'&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;slice. l = ['a','b','c','d','e']&lt;/td&gt;
    &lt;td&gt;l[1:4]&lt;/td&gt;
    &lt;td&gt;['b', 'c', 'd'] &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;slice. Start index is missing &lt;/td&gt;
    &lt;td&gt;l[:4]&lt;/td&gt;
    &lt;td&gt; ['a', 'b', 'c', 'd']  Default is 0 if start index is omitted &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;slice. End index is missing &lt;/td&gt;
    &lt;td&gt;l[1:]&lt;/td&gt;
    &lt;td&gt; ['b', 'c', 'd', 'e'] Default is length of the list if end index is omitted&lt;/td&gt;
  &lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;slice. Both index missing &lt;/td&gt;
    &lt;td&gt;l[:]&lt;/td&gt;
    &lt;td&gt; ['a','b','c','d','e'] &lt;/td&gt;
  &lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;Index of first occurrence of a char.  &lt;/td&gt;
    &lt;td&gt;print(l.index('d'))&lt;/td&gt;
    &lt;td&gt; 3 &lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;
== Code as given by Vidya ==
&lt;pre&gt;
import string

def remove_matching_letter(l1,l2) :
    for i in range(len(l1)) :
        for j in range(len(l2)):
            if l1[i] == l2[j] :
                c = l1[i]
                l1.remove(c)
                l2.remove(c)
                l = l1 + ['*'] +l2
                return[l,True]
    l = l1+['*']+l2
    return[l,False]


p1 = input(&quot;Enter first person name:&quot;)
p1 = p1.lower()
p1=  p1.replace(&quot; &quot;,&quot;&quot;)

p2 = input(&quot;Enter Second person name:&quot;)
p2 = p2.lower()
p2 =  p2.replace(&quot; &quot;,&quot;&quot;)

l1 = list(p1)
l2 = list(p2)

proceed = True
while proceed:
    [con_list,proceed] = remove_matching_letter(l1,l2)
    star_index = con_list.index('*')
    l1 = con_list[:star_index]
    l2 = con_list[star_index+1:]
    
count = len(l1) + len(l2)
result = ['Friends','Love','Affection','Marriage','Enemy','Sibling']

while len(result) &gt; 1 :
    split_index = (count%len(result)) -1
    if split_index &gt;= 0 :
        right = result[split_index + 1 :]
        left = result[:split_index]
        result = right + left
    else :
        result = result[:len(result) -1]
print(result[0])
&lt;/pre&gt;

Output:

[[File:flameOutput.png]]

= Image Compression =
Suppose you have a web page with lots of images.  It will take more time to download.  To make downloading faster, either you remove the images or reduce the size of the images.  Both methods will not give a good or required result.  Instead you can do &lt;b&gt; Image Compression&lt;/b&gt;
==NumPy Module==
NumPy is a module for Python. The name is an acronym for &quot;Numeric Python&quot;. It enriches Python with powerful data structures, implementing multi-dimensional arrays and matrices. To work with Artificial Intelligence, Machine Learning or Deep Learning NumPy is required.

&lt;b&gt; How is it superior to List &lt;/b&gt;
Operations on numpy arrays and matrices are easier than Lists.
Consider  the following

cvalues = [22.1, 22.8, 21.9, 22.5, 22.7, 22.3, 21.8, 21.2, 22.9, 22.1]

C = np.array(cvalues)

We would like to find the values into degrees Fahrenheit. This can be easily accomplished using a simple scalar multiplication:

print(C * 9 / 5 + 32)

Using Lists, it should have been

 fvalues = [ x*9/5 + 32 for x in cvalues] 

&lt;b&gt; Operations on numpy &lt;/b&gt;
&lt;table width=&quot;200&quot; border=&quot;1&quot;&gt;
  &lt;tr&gt;
    &lt;th scope=&quot;col&quot;&gt;Operations&lt;/th&gt;
    &lt;th scope=&quot;col&quot;&gt;Descriptions&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;import numpy as np &lt;/td&gt;
    &lt;td&gt;numpy is imported and can be accessed with a short name np&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;a=np.array([1,2,3])&lt;/td&gt;
    &lt;td&gt;One dimensional array 'a' is created&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;print(type(a))&lt;/td&gt;
    &lt;td&gt;&lt;class 'numpy.ndarray'&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;print(a.shape)&lt;/td&gt;
    &lt;td&gt;(3,)&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;print (a[0],a[1],a[2])&lt;/td&gt;
    &lt;td&gt;1 2 3&lt;/td&gt;
  &lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;b=np.array([[1,2,3],[4,5,6]])&lt;/td&gt;
    &lt;td&gt;Two dimensional array 'b' is created&lt;/td&gt;
  &lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;print(b.shape)&lt;/td&gt;
    &lt;td&gt;(2,3)&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;
[[#Top]]
=== NumPy Examples ===
importing numpy module is common to following examples.
&lt;pre&gt;import numpy as np&lt;/pre&gt;

'''Example: Print NumPy Array'''
&lt;pre&gt;
#pass list as argument to np.array
a=np.array([1,2,3])
print(a)
#Output: [1 2 3]
&lt;/pre&gt;

'''Example: Print type of numpy array'''
&lt;pre&gt;
#type of numpy array
print(type(a))
#Output: &lt;class 'numpy.ndarray'&gt;
&lt;/pre&gt;

'''Example: Print shape i.e.size of numpy array'''
&lt;pre&gt;
#shape of numpy array
print(a.shape)
#Output: (3,)
&lt;/pre&gt;

'''Example: Print elements of numpy using indexes'''
&lt;pre&gt;
#print elements of numpy using indexes
print(a[0], a[1], a[2])
#Output: 1 2 3
&lt;/pre&gt;

'''Example: Print shape of array: rows and columns'''
&lt;pre&gt;
b=np.array([[1,2,3],[4,5,6]])
print(b.shape)
#Output: (2, 3) - 2 rows and 3 columns
&lt;/pre&gt;

''' Example: 2x2 array of '0' '''
&lt;pre&gt;
#array of '0'
a=np.zeros((2,2))
print(a)
'''Output:
[[0. 0.]
 [0. 0.]]'''
&lt;/pre&gt;

''' Example: 2x2 array of '1' '''
&lt;pre&gt;
#array of '1'
b= np.ones((2,2))
print(b)
'''Output:
[[1. 1.]
 [1. 1.]]'''
&lt;/pre&gt;

''' Example: 2x2 array of '6' '''
&lt;pre&gt;
#2x2 array of 6
c= np.full((2,2),6)
print(c)
'''Output:
[[6 6]
 [6 6]]'''
&lt;/pre&gt;

''' Example: 2x2 array of random number '''
&lt;pre&gt;
#2x2 array of random number
d=np.random.random((2,2))
print(d)
'''Output:
 [[0.45937293 0.72546193]
 [0.28374715 0.63269858]]'''
&lt;/pre&gt;

'''Example: int32 Data type of array'''
&lt;pre&gt;
x=np.array([1,2])

#data type of x
print(x.dtype)
#Output : int32
&lt;/pre&gt;

'''Example: float64 Data type of array'''
&lt;pre&gt;
y=np.array([1.2,3])
print(y.dtype)
#Output: float64
&lt;/pre&gt;

'''Example: Specifically setting Data type of array as int64'''
&lt;pre&gt;
x=np.array([1,2], dtype=np.int64)
print(x.dtype)
#Output: int64
&lt;/pre&gt;
[[#Top]]

===NumPy array operations===
&lt;pre&gt;
import numpy as np
x=np.array([[1,2],[3,4]],dtype=np.float64)
y=np.array([[5,6],[7,8]],dtype=np.float64)
print(x)
'''Output:
[[1. 2.]
 [3. 4.]]'''
print(y)
'''Output:
[[5. 6.]
 [7. 8.]]
'''

print(x+y)
print(np.add(x,y))

'''
Output:
[[ 6.  8.]
 [10. 12.]]

[[ 6.  8.]
 [10. 12.]]
 '''

print(x-y)
print(np.subtract(x,y))
'''Output:
[[-4. -4.]
 [-4. -4.]]
[[-4. -4.]
 [-4. -4.]]
'''
print(x*y)
print(np.multiply(x,y))
'''Output:
[[ 5. 12.]
 [21. 32.]]
[[ 5. 12.]
 [21. 32.]]
'''
print(x/y)
'''Output:
[[0.2        0.33333333]
 [0.42857143 0.5       ]]
'''
print(np.sqrt(x))
'''Output:
[[1.         1.41421356]
 [1.73205081 2.        ]]
'''
print(np.sqrt(y))
'''Output:
[[2.23606798 2.44948974]
 [2.64575131 2.82842712]]
'''
#Transposition of matrix
np.array([[1,2],[3,4]])
print(x.T)
'''Output:
[[1. 3.]
 [2. 4.]]
 '''
#sum of all elements
print(np.sum(x))#Output:10.0
print(np.sum(x,axis=0))#Output:[4. 6.]
print(np.sum(x,axis=1))#Output:[3. 7.]

&lt;/pre&gt;

==Lossy Compression==
Compression in which data is lost during compression.

==Lossless Compression==
Compression in which data is not lost during compression.

==Compression coding==
We will use the black and white ''lena'' image from net.
[[File:Lena-Original-Image.jpg]]

&lt;pre&gt;
import numpy
from PIL import Image
I=numpy.asanyarray(Image.open('Lena-Original-Image-512x512-pixels.png'))
print(I)
&lt;/pre&gt;
'''Output:
[[[159 159 159]
  [159 159 159]
  [158 158 158]
  ...
  [168 168 168]
  [151 151 151]
  [119 119 119]]

 [[159 159 159]
  [159 159 159]
  [158 158 158]
  ...
  [168 168 168]
  [151 151 151]
  [119 119 119]]

 [[159 159 159]
  [159 159 159]
  [158 158 158]
  ...
  [168 168 168]
  [151 151 151]
  [119 119 119]]

 ...

 [[ 20  20  20]
  [ 29  29  29]
  [ 25  25  25]
  ...
  [ 91  91  91]
  [ 87  87  87]
  [ 84  84  84]]

 [[ 22  22  22]
  [ 34  34  34]
  [ 30  30  30]
  ...
  [ 91  91  91]
  [ 93  93  93]
  [ 96  96  96]]

 [[ 22  22  22]
  [ 34  34  34]
  [ 30  30  30]
  ...
  [ 91  91  91]
  [ 93  93  93]
  [ 96  96  96]]]
'''

===Load the image===
&lt;pre&gt;
import numpy
from PIL import Image
im=Image.open('Lena-Original-Image-512x512-pixels.png')
pixelMap=im.load()
&lt;/pre&gt;

===Create blank image of same size and type===
&lt;pre&gt;
#mode is type of image
#blank image with same mode and size of original image
img=Image.new(im.mode,im.size)
pixelNew=img.load()
&lt;/pre&gt;

===Logic of Image  Compression===
We will convert image from 8-bit to 3-bit.
&lt;pre&gt;
'''
8bit to 3 bit
2^8&gt;2^3
2^5=32

for:
0-31 put 0
32-63 put 1
64-95 put 2
96-127 put 3
128-159 put 4
160-191 put 5
192-223 put 6
224-255 put 7
'''
&lt;/pre&gt;

===Coding===
&lt;pre&gt;
import numpy
from PIL import Image
im=Image.open('Lena-Original-Image.jpg')
pixelMap=im.load()

#mode is type of image
#blank image with same mode and size of original image
img=Image.new(im.mode,im.size)
pixelNew=img.load()

'''
8bit to 3 bit
2^8&gt;2^3
2^5=32

for:
0-31 put 0
32-63 put 1
64-95 put 2
96-127 put 3
128-159 put 4
160-191 put 5
192-223 put 6
224-255 put 7
'''

for i in range(img.size[0]):
    for j in range(img.size[1]):
        if(pixelMap[i,j]&gt;=0 and pixelMap[i,j]&lt;=31):
            pixelNew[i,j]=0
        elif(pixelMap[i,j]&gt;=32 and pixelMap[i,j]&lt;=63):
            pixelNew[i,j]=1
        elif(pixelMap[i,j]&gt;=64 and pixelMap[i,j]&lt;=95):
            pixelNew[i,j]=2
        elif(pixelMap[i,j]&gt;=96 and pixelMap[i,j]&lt;=127):
            pixelNew[i,j]=3
        elif(pixelMap[i,j]&gt;=128 and pixelMap[i,j]&lt;=159):
            pixelNew[i,j]=4
        elif(pixelMap[i,j]&gt;=160 and pixelMap[i,j]&lt;=191):
            pixelNew[i,j]=5    
        elif(pixelMap[i,j]&gt;=192 and pixelMap[i,j]&lt;=223):
            pixelNew[i,j]=6
        elif(pixelMap[i,j]&gt;=224 and pixelMap[i,j]&lt;=255):
            pixelNew[i,j]=7

img.save('lena2.jpg')
J=numpy.asanyarray(Image.open('lena2.jpg'))

&lt;/pre&gt;
[[File:lena2.jpg]]</text>
      <sha1>oercxa47mr73ah582x6qjx0bhgk438y</sha1>
    </revision>
    <revision>
      <id>4041</id>
      <parentid>4018</parentid>
      <timestamp>2018-10-04T08:31:33Z</timestamp>
      <contributor>
        <username>SoniaJain</username>
        <id>3164</id>
      </contributor>
      <minor/>
      <comment>/* Code as given by Vidya */ changes in comparing two list(string)</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="11079">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_10 Contributors of this page]
==Week 10 Download URL==
https://onlinecourses.nptel.ac.in/noc18_cs35/unit?unit=30&amp;lesson=31

=FLAMES - a Childhood play=
In childhood, we might have played a game called FLAMES to find the relationship (illusion!!) between a boy and a girl.  

All you have to do is

&lt;b&gt; Steps : &lt;/b&gt;
 1. write their names and strike out the common characters that occur in both their names.
 2. Count the remaining letters (SAY X)
 3. Write the word FLAMES and start counting from F and strike out the X&lt;sup&gt;th&lt;/sup&gt; letter till only one character remains
 4. If it is F - then the two are Friends. L - Love, A - Affection,  M - Marriage  E- Enemy S- Sister

&lt;table width=&quot;449&quot; height=&quot;116&quot; border=&quot;1&quot;&gt;
 &lt;tr&gt;
    &lt;td&gt;[[File:Flamestep1.JPG|300px]]&lt;/td&gt;
    &lt;td&gt;[[File:Flamestep2.JPG|300px]]&lt;/td&gt;
    &lt;td&gt;[[File:flamestep3.JPG|300px]]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td width = 200&gt;Remaining No. of Characters = 7&lt;/td&gt;
    &lt;td width = 200&gt;Counting from F, wrap over and strike the 7&lt;SUP&gt;th&lt;/SUP&gt; letter&lt;/td&gt;
    &lt;td width = 200&gt;The remaining letter denotes the relationship&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;
== Refresh the operations on Strings and Lists ==
&lt;table width=&quot;200&quot; border=&quot;1&quot;&gt;
  &lt;tr&gt;
    &lt;th scope=&quot;col&quot; width=100&gt;Functions&lt;/th&gt;
    &lt;th scope=&quot;col&quot; width=100&gt;Example&lt;/th&gt;
    &lt;th scope=&quot;col&quot; width=100&gt;Result&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;import &lt;/td&gt;
    &lt;td&gt;import string&lt;/td&gt;
    &lt;td&gt;import string module&lt;/td&gt;
  &lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;input a string&lt;/td&gt;
    &lt;td&gt;s = input()&lt;/td&gt;
    &lt;td&gt;input a string to the variable s&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Convert to lower case&lt;/td&gt;
    &lt;td&gt;print(s.lower())&lt;/td&gt;
    &lt;td &gt; raj &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Convert to upper case&lt;/td&gt;
    &lt;td&gt;print(s.upper())&lt;/td&gt;
    &lt;td&gt; RAJ&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Convert the string to list&lt;/td&gt;
    &lt;td&gt;s1 = list(s)&lt;/td&gt;
    &lt;td&gt;s1 will be ['R','a','j']&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Replace a character&lt;/td&gt;
    &lt;td&gt;print(s.replace(&quot;j&quot;,&quot;#&quot;))&lt;/td&gt;
    &lt;td&gt;'Ra#' .Note: the content of s is not changed.&lt;/td&gt;
  &lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;Replace more than one character&lt;/td&gt;
    &lt;td&gt;print(s.replace(&quot;aj&quot;,&quot;#&quot;))&lt;/td&gt;
    &lt;td&gt;'R#'&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;slice. l = ['a','b','c','d','e']&lt;/td&gt;
    &lt;td&gt;l[1:4]&lt;/td&gt;
    &lt;td&gt;['b', 'c', 'd'] &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;slice. Start index is missing &lt;/td&gt;
    &lt;td&gt;l[:4]&lt;/td&gt;
    &lt;td&gt; ['a', 'b', 'c', 'd']  Default is 0 if start index is omitted &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;slice. End index is missing &lt;/td&gt;
    &lt;td&gt;l[1:]&lt;/td&gt;
    &lt;td&gt; ['b', 'c', 'd', 'e'] Default is length of the list if end index is omitted&lt;/td&gt;
  &lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;slice. Both index missing &lt;/td&gt;
    &lt;td&gt;l[:]&lt;/td&gt;
    &lt;td&gt; ['a','b','c','d','e'] &lt;/td&gt;
  &lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;Index of first occurrence of a char.  &lt;/td&gt;
    &lt;td&gt;print(l.index('d'))&lt;/td&gt;
    &lt;td&gt; 3 &lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;
== Changes done by Sonia ==
&lt;pre&gt;
import string

p1 = input(&quot;Enter first person name:&quot;)
p1 = p1.lower()
p1=  p1.replace(&quot; &quot;,&quot;&quot;)

p2 = input(&quot;Enter Second person name:&quot;)
p2 = p2.lower()
p2 =  p2.replace(&quot; &quot;,&quot;&quot;)

l1 = list(p1)
l2 = list(p2)

proceed = True
while proceed:
   for i in l1:
        if i in l2:
            c=i
            l1.remove(c)
            l2.remove(c)
            proceed=True
            break
        else:
            proceed=False
    
count = len(l1) + len(l2)
result = ['Friends','Love','Affection','Marriage','Enemy','Sibling']

while len(result) &gt; 1 :
    split_index = (count%len(result)) -1
    if split_index &gt;= 0 :
        right = result[split_index + 1 :]
        left = result[:split_index]
        result = right + left
    else :
        result = result[:len(result) -1]
print(result[0])
&lt;/pre&gt;

Output:

[[File:flameOutput.png]]

= Image Compression =
Suppose you have a web page with lots of images.  It will take more time to download.  To make downloading faster, either you remove the images or reduce the size of the images.  Both methods will not give a good or required result.  Instead you can do &lt;b&gt; Image Compression&lt;/b&gt;
==NumPy Module==
NumPy is a module for Python. The name is an acronym for &quot;Numeric Python&quot;. It enriches Python with powerful data structures, implementing multi-dimensional arrays and matrices. To work with Artificial Intelligence, Machine Learning or Deep Learning NumPy is required.

&lt;b&gt; How is it superior to List &lt;/b&gt;
Operations on numpy arrays and matrices are easier than Lists.
Consider  the following

cvalues = [22.1, 22.8, 21.9, 22.5, 22.7, 22.3, 21.8, 21.2, 22.9, 22.1]

C = np.array(cvalues)

We would like to find the values into degrees Fahrenheit. This can be easily accomplished using a simple scalar multiplication:

print(C * 9 / 5 + 32)

Using Lists, it should have been

 fvalues = [ x*9/5 + 32 for x in cvalues] 

&lt;b&gt; Operations on numpy &lt;/b&gt;
&lt;table width=&quot;200&quot; border=&quot;1&quot;&gt;
  &lt;tr&gt;
    &lt;th scope=&quot;col&quot;&gt;Operations&lt;/th&gt;
    &lt;th scope=&quot;col&quot;&gt;Descriptions&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;import numpy as np &lt;/td&gt;
    &lt;td&gt;numpy is imported and can be accessed with a short name np&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;a=np.array([1,2,3])&lt;/td&gt;
    &lt;td&gt;One dimensional array 'a' is created&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;print(type(a))&lt;/td&gt;
    &lt;td&gt;&lt;class 'numpy.ndarray'&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;print(a.shape)&lt;/td&gt;
    &lt;td&gt;(3,)&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;print (a[0],a[1],a[2])&lt;/td&gt;
    &lt;td&gt;1 2 3&lt;/td&gt;
  &lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;b=np.array([[1,2,3],[4,5,6]])&lt;/td&gt;
    &lt;td&gt;Two dimensional array 'b' is created&lt;/td&gt;
  &lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;print(b.shape)&lt;/td&gt;
    &lt;td&gt;(2,3)&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;
[[#Top]]
=== NumPy Examples ===
importing numpy module is common to following examples.
&lt;pre&gt;import numpy as np&lt;/pre&gt;

'''Example: Print NumPy Array'''
&lt;pre&gt;
#pass list as argument to np.array
a=np.array([1,2,3])
print(a)
#Output: [1 2 3]
&lt;/pre&gt;

'''Example: Print type of numpy array'''
&lt;pre&gt;
#type of numpy array
print(type(a))
#Output: &lt;class 'numpy.ndarray'&gt;
&lt;/pre&gt;

'''Example: Print shape i.e.size of numpy array'''
&lt;pre&gt;
#shape of numpy array
print(a.shape)
#Output: (3,)
&lt;/pre&gt;

'''Example: Print elements of numpy using indexes'''
&lt;pre&gt;
#print elements of numpy using indexes
print(a[0], a[1], a[2])
#Output: 1 2 3
&lt;/pre&gt;

'''Example: Print shape of array: rows and columns'''
&lt;pre&gt;
b=np.array([[1,2,3],[4,5,6]])
print(b.shape)
#Output: (2, 3) - 2 rows and 3 columns
&lt;/pre&gt;

''' Example: 2x2 array of '0' '''
&lt;pre&gt;
#array of '0'
a=np.zeros((2,2))
print(a)
'''Output:
[[0. 0.]
 [0. 0.]]'''
&lt;/pre&gt;

''' Example: 2x2 array of '1' '''
&lt;pre&gt;
#array of '1'
b= np.ones((2,2))
print(b)
'''Output:
[[1. 1.]
 [1. 1.]]'''
&lt;/pre&gt;

''' Example: 2x2 array of '6' '''
&lt;pre&gt;
#2x2 array of 6
c= np.full((2,2),6)
print(c)
'''Output:
[[6 6]
 [6 6]]'''
&lt;/pre&gt;

''' Example: 2x2 array of random number '''
&lt;pre&gt;
#2x2 array of random number
d=np.random.random((2,2))
print(d)
'''Output:
 [[0.45937293 0.72546193]
 [0.28374715 0.63269858]]'''
&lt;/pre&gt;

'''Example: int32 Data type of array'''
&lt;pre&gt;
x=np.array([1,2])

#data type of x
print(x.dtype)
#Output : int32
&lt;/pre&gt;

'''Example: float64 Data type of array'''
&lt;pre&gt;
y=np.array([1.2,3])
print(y.dtype)
#Output: float64
&lt;/pre&gt;

'''Example: Specifically setting Data type of array as int64'''
&lt;pre&gt;
x=np.array([1,2], dtype=np.int64)
print(x.dtype)
#Output: int64
&lt;/pre&gt;
[[#Top]]

===NumPy array operations===
&lt;pre&gt;
import numpy as np
x=np.array([[1,2],[3,4]],dtype=np.float64)
y=np.array([[5,6],[7,8]],dtype=np.float64)
print(x)
'''Output:
[[1. 2.]
 [3. 4.]]'''
print(y)
'''Output:
[[5. 6.]
 [7. 8.]]
'''

print(x+y)
print(np.add(x,y))

'''
Output:
[[ 6.  8.]
 [10. 12.]]

[[ 6.  8.]
 [10. 12.]]
 '''

print(x-y)
print(np.subtract(x,y))
'''Output:
[[-4. -4.]
 [-4. -4.]]
[[-4. -4.]
 [-4. -4.]]
'''
print(x*y)
print(np.multiply(x,y))
'''Output:
[[ 5. 12.]
 [21. 32.]]
[[ 5. 12.]
 [21. 32.]]
'''
print(x/y)
'''Output:
[[0.2        0.33333333]
 [0.42857143 0.5       ]]
'''
print(np.sqrt(x))
'''Output:
[[1.         1.41421356]
 [1.73205081 2.        ]]
'''
print(np.sqrt(y))
'''Output:
[[2.23606798 2.44948974]
 [2.64575131 2.82842712]]
'''
#Transposition of matrix
np.array([[1,2],[3,4]])
print(x.T)
'''Output:
[[1. 3.]
 [2. 4.]]
 '''
#sum of all elements
print(np.sum(x))#Output:10.0
print(np.sum(x,axis=0))#Output:[4. 6.]
print(np.sum(x,axis=1))#Output:[3. 7.]

&lt;/pre&gt;

==Lossy Compression==
Compression in which data is lost during compression.

==Lossless Compression==
Compression in which data is not lost during compression.

==Compression coding==
We will use the black and white ''lena'' image from net.
[[File:Lena-Original-Image.jpg]]

&lt;pre&gt;
import numpy
from PIL import Image
I=numpy.asanyarray(Image.open('Lena-Original-Image-512x512-pixels.png'))
print(I)
&lt;/pre&gt;
'''Output:
[[[159 159 159]
  [159 159 159]
  [158 158 158]
  ...
  [168 168 168]
  [151 151 151]
  [119 119 119]]

 [[159 159 159]
  [159 159 159]
  [158 158 158]
  ...
  [168 168 168]
  [151 151 151]
  [119 119 119]]

 [[159 159 159]
  [159 159 159]
  [158 158 158]
  ...
  [168 168 168]
  [151 151 151]
  [119 119 119]]

 ...

 [[ 20  20  20]
  [ 29  29  29]
  [ 25  25  25]
  ...
  [ 91  91  91]
  [ 87  87  87]
  [ 84  84  84]]

 [[ 22  22  22]
  [ 34  34  34]
  [ 30  30  30]
  ...
  [ 91  91  91]
  [ 93  93  93]
  [ 96  96  96]]

 [[ 22  22  22]
  [ 34  34  34]
  [ 30  30  30]
  ...
  [ 91  91  91]
  [ 93  93  93]
  [ 96  96  96]]]
'''

===Load the image===
&lt;pre&gt;
import numpy
from PIL import Image
im=Image.open('Lena-Original-Image-512x512-pixels.png')
pixelMap=im.load()
&lt;/pre&gt;

===Create blank image of same size and type===
&lt;pre&gt;
#mode is type of image
#blank image with same mode and size of original image
img=Image.new(im.mode,im.size)
pixelNew=img.load()
&lt;/pre&gt;

===Logic of Image  Compression===
We will convert image from 8-bit to 3-bit.
&lt;pre&gt;
'''
8bit to 3 bit
2^8&gt;2^3
2^5=32

for:
0-31 put 0
32-63 put 1
64-95 put 2
96-127 put 3
128-159 put 4
160-191 put 5
192-223 put 6
224-255 put 7
'''
&lt;/pre&gt;

===Coding===
&lt;pre&gt;
import numpy
from PIL import Image
im=Image.open('Lena-Original-Image.jpg')
pixelMap=im.load()

#mode is type of image
#blank image with same mode and size of original image
img=Image.new(im.mode,im.size)
pixelNew=img.load()

'''
8bit to 3 bit
2^8&gt;2^3
2^5=32

for:
0-31 put 0
32-63 put 1
64-95 put 2
96-127 put 3
128-159 put 4
160-191 put 5
192-223 put 6
224-255 put 7
'''

for i in range(img.size[0]):
    for j in range(img.size[1]):
        if(pixelMap[i,j]&gt;=0 and pixelMap[i,j]&lt;=31):
            pixelNew[i,j]=0
        elif(pixelMap[i,j]&gt;=32 and pixelMap[i,j]&lt;=63):
            pixelNew[i,j]=1
        elif(pixelMap[i,j]&gt;=64 and pixelMap[i,j]&lt;=95):
            pixelNew[i,j]=2
        elif(pixelMap[i,j]&gt;=96 and pixelMap[i,j]&lt;=127):
            pixelNew[i,j]=3
        elif(pixelMap[i,j]&gt;=128 and pixelMap[i,j]&lt;=159):
            pixelNew[i,j]=4
        elif(pixelMap[i,j]&gt;=160 and pixelMap[i,j]&lt;=191):
            pixelNew[i,j]=5    
        elif(pixelMap[i,j]&gt;=192 and pixelMap[i,j]&lt;=223):
            pixelNew[i,j]=6
        elif(pixelMap[i,j]&gt;=224 and pixelMap[i,j]&lt;=255):
            pixelNew[i,j]=7

img.save('lena2.jpg')
J=numpy.asanyarray(Image.open('lena2.jpg'))

&lt;/pre&gt;
[[File:lena2.jpg]]</text>
      <sha1>grclphmd8opruoo0amylccufdunbf9d</sha1>
    </revision>
    <revision>
      <id>4134</id>
      <parentid>4041</parentid>
      <timestamp>2018-10-08T13:06:18Z</timestamp>
      <contributor>
        <username>Ajabdeh</username>
        <id>3176</id>
      </contributor>
      <comment>/* NumPy Examples */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="11280">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_10 Contributors of this page]
==Week 10 Download URL==
https://onlinecourses.nptel.ac.in/noc18_cs35/unit?unit=30&amp;lesson=31

=FLAMES - a Childhood play=
In childhood, we might have played a game called FLAMES to find the relationship (illusion!!) between a boy and a girl.  

All you have to do is

&lt;b&gt; Steps : &lt;/b&gt;
 1. write their names and strike out the common characters that occur in both their names.
 2. Count the remaining letters (SAY X)
 3. Write the word FLAMES and start counting from F and strike out the X&lt;sup&gt;th&lt;/sup&gt; letter till only one character remains
 4. If it is F - then the two are Friends. L - Love, A - Affection,  M - Marriage  E- Enemy S- Sister

&lt;table width=&quot;449&quot; height=&quot;116&quot; border=&quot;1&quot;&gt;
 &lt;tr&gt;
    &lt;td&gt;[[File:Flamestep1.JPG|300px]]&lt;/td&gt;
    &lt;td&gt;[[File:Flamestep2.JPG|300px]]&lt;/td&gt;
    &lt;td&gt;[[File:flamestep3.JPG|300px]]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td width = 200&gt;Remaining No. of Characters = 7&lt;/td&gt;
    &lt;td width = 200&gt;Counting from F, wrap over and strike the 7&lt;SUP&gt;th&lt;/SUP&gt; letter&lt;/td&gt;
    &lt;td width = 200&gt;The remaining letter denotes the relationship&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;
== Refresh the operations on Strings and Lists ==
&lt;table width=&quot;200&quot; border=&quot;1&quot;&gt;
  &lt;tr&gt;
    &lt;th scope=&quot;col&quot; width=100&gt;Functions&lt;/th&gt;
    &lt;th scope=&quot;col&quot; width=100&gt;Example&lt;/th&gt;
    &lt;th scope=&quot;col&quot; width=100&gt;Result&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;import &lt;/td&gt;
    &lt;td&gt;import string&lt;/td&gt;
    &lt;td&gt;import string module&lt;/td&gt;
  &lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;input a string&lt;/td&gt;
    &lt;td&gt;s = input()&lt;/td&gt;
    &lt;td&gt;input a string to the variable s&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Convert to lower case&lt;/td&gt;
    &lt;td&gt;print(s.lower())&lt;/td&gt;
    &lt;td &gt; raj &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Convert to upper case&lt;/td&gt;
    &lt;td&gt;print(s.upper())&lt;/td&gt;
    &lt;td&gt; RAJ&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Convert the string to list&lt;/td&gt;
    &lt;td&gt;s1 = list(s)&lt;/td&gt;
    &lt;td&gt;s1 will be ['R','a','j']&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Replace a character&lt;/td&gt;
    &lt;td&gt;print(s.replace(&quot;j&quot;,&quot;#&quot;))&lt;/td&gt;
    &lt;td&gt;'Ra#' .Note: the content of s is not changed.&lt;/td&gt;
  &lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;Replace more than one character&lt;/td&gt;
    &lt;td&gt;print(s.replace(&quot;aj&quot;,&quot;#&quot;))&lt;/td&gt;
    &lt;td&gt;'R#'&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;slice. l = ['a','b','c','d','e']&lt;/td&gt;
    &lt;td&gt;l[1:4]&lt;/td&gt;
    &lt;td&gt;['b', 'c', 'd'] &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;slice. Start index is missing &lt;/td&gt;
    &lt;td&gt;l[:4]&lt;/td&gt;
    &lt;td&gt; ['a', 'b', 'c', 'd']  Default is 0 if start index is omitted &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;slice. End index is missing &lt;/td&gt;
    &lt;td&gt;l[1:]&lt;/td&gt;
    &lt;td&gt; ['b', 'c', 'd', 'e'] Default is length of the list if end index is omitted&lt;/td&gt;
  &lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;slice. Both index missing &lt;/td&gt;
    &lt;td&gt;l[:]&lt;/td&gt;
    &lt;td&gt; ['a','b','c','d','e'] &lt;/td&gt;
  &lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;Index of first occurrence of a char.  &lt;/td&gt;
    &lt;td&gt;print(l.index('d'))&lt;/td&gt;
    &lt;td&gt; 3 &lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;
== Changes done by Sonia ==
&lt;pre&gt;
import string

p1 = input(&quot;Enter first person name:&quot;)
p1 = p1.lower()
p1=  p1.replace(&quot; &quot;,&quot;&quot;)

p2 = input(&quot;Enter Second person name:&quot;)
p2 = p2.lower()
p2 =  p2.replace(&quot; &quot;,&quot;&quot;)

l1 = list(p1)
l2 = list(p2)

proceed = True
while proceed:
   for i in l1:
        if i in l2:
            c=i
            l1.remove(c)
            l2.remove(c)
            proceed=True
            break
        else:
            proceed=False
    
count = len(l1) + len(l2)
result = ['Friends','Love','Affection','Marriage','Enemy','Sibling']

while len(result) &gt; 1 :
    split_index = (count%len(result)) -1
    if split_index &gt;= 0 :
        right = result[split_index + 1 :]
        left = result[:split_index]
        result = right + left
    else :
        result = result[:len(result) -1]
print(result[0])
&lt;/pre&gt;

Output:

[[File:flameOutput.png]]

= Image Compression =
Suppose you have a web page with lots of images.  It will take more time to download.  To make downloading faster, either you remove the images or reduce the size of the images.  Both methods will not give a good or required result.  Instead you can do &lt;b&gt; Image Compression&lt;/b&gt;
==NumPy Module==
NumPy is a module for Python. The name is an acronym for &quot;Numeric Python&quot;. It enriches Python with powerful data structures, implementing multi-dimensional arrays and matrices. To work with Artificial Intelligence, Machine Learning or Deep Learning NumPy is required.

&lt;b&gt; How is it superior to List &lt;/b&gt;
Operations on numpy arrays and matrices are easier than Lists.
Consider  the following

cvalues = [22.1, 22.8, 21.9, 22.5, 22.7, 22.3, 21.8, 21.2, 22.9, 22.1]

C = np.array(cvalues)

We would like to find the values into degrees Fahrenheit. This can be easily accomplished using a simple scalar multiplication:

print(C * 9 / 5 + 32)

Using Lists, it should have been

 fvalues = [ x*9/5 + 32 for x in cvalues] 

&lt;b&gt; Operations on numpy &lt;/b&gt;
&lt;table width=&quot;200&quot; border=&quot;1&quot;&gt;
  &lt;tr&gt;
    &lt;th scope=&quot;col&quot;&gt;Operations&lt;/th&gt;
    &lt;th scope=&quot;col&quot;&gt;Descriptions&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;import numpy as np &lt;/td&gt;
    &lt;td&gt;numpy is imported and can be accessed with a short name np&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;a=np.array([1,2,3])&lt;/td&gt;
    &lt;td&gt;One dimensional array 'a' is created&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;print(type(a))&lt;/td&gt;
    &lt;td&gt;&lt;class 'numpy.ndarray'&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;print(a.shape)&lt;/td&gt;
    &lt;td&gt;(3,)&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;print (a[0],a[1],a[2])&lt;/td&gt;
    &lt;td&gt;1 2 3&lt;/td&gt;
  &lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;b=np.array([[1,2,3],[4,5,6]])&lt;/td&gt;
    &lt;td&gt;Two dimensional array 'b' is created&lt;/td&gt;
  &lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;print(b.shape)&lt;/td&gt;
    &lt;td&gt;(2,3)&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;
[[#Top]]
=== NumPy Examples ===
importing numpy module is common to following examples.
&lt;pre&gt;import numpy as np&lt;/pre&gt;

'''Example: Print NumPy Array'''
&lt;pre&gt;
#pass list as argument to np.array
a=np.array([1,2,3])
print(a)
#Output: [1 2 3]
&lt;/pre&gt;

'''Example: Print type of numpy array'''
&lt;pre&gt;
#type of numpy array
print(type(a))
#Output: &lt;class 'numpy.ndarray'&gt;
&lt;/pre&gt;

'''Example: Print shape i.e.size of numpy array'''
&lt;pre&gt;
#shape of numpy array
print(a.shape)
#Output: (3,)
&lt;/pre&gt;

'''Example: Print elements of numpy using indexes'''
&lt;pre&gt;
#print elements of numpy using indexes
print(a[0], a[1], a[2])
#Output: 1 2 3
&lt;/pre&gt;

'''Example: Print shape of array: rows and columns'''
&lt;pre&gt;
b=np.array([[1,2,3],[4,5,6]])
print(b.shape)
#Output: (2, 3) - 2 rows and 3 columns
&lt;/pre&gt;

''' Example: 2x2 array of '0' '''
&lt;pre&gt;
#array of '0'
a=np.zeros((2,2))
print(a)
'''Output:
[[0. 0.]
 [0. 0.]]'''
&lt;/pre&gt;

''' Example: 2x2 array of '1' '''
&lt;pre&gt;
#array of '1'
b= np.ones((2,2))
print(b)
'''Output:
[[1. 1.]
 [1. 1.]]'''
&lt;/pre&gt;

''' Example: 2x2 array of '6' '''
&lt;pre&gt;
#2x2 array of 6
c= np.full((2,2),6)
print(c)
'''Output:
[[6 6]
 [6 6]]'''
&lt;/pre&gt;

''' Example: 2x2 array of random number '''
&lt;pre&gt;
#2x2 array of random number
d=np.random.random((2,2))
print(d)
'''Output:
 [[0.45937293 0.72546193]
 [0.28374715 0.63269858]]'''
&lt;/pre&gt;

''' Example: nxn array of random integer'''
&lt;pre&gt;
#2x2 array of random integer
d=np.random.randint(0,5,(2,2))
print(d)
'''Output:
  [[2 2 1 0 4]
   [3 1 0 3 4]]'''
Returns elements from 0 to 5
&lt;/pre&gt;

'''Example: int32 Data type of array'''
&lt;pre&gt;
x=np.array([1,2])

#data type of x
print(x.dtype)
#Output : int32
&lt;/pre&gt;

'''Example: float64 Data type of array'''
&lt;pre&gt;
y=np.array([1.2,3])
print(y.dtype)
#Output: float64
&lt;/pre&gt;

'''Example: Specifically setting Data type of array as int64'''
&lt;pre&gt;
x=np.array([1,2], dtype=np.int64)
print(x.dtype)
#Output: int64
&lt;/pre&gt;
[[#Top]]

===NumPy array operations===
&lt;pre&gt;
import numpy as np
x=np.array([[1,2],[3,4]],dtype=np.float64)
y=np.array([[5,6],[7,8]],dtype=np.float64)
print(x)
'''Output:
[[1. 2.]
 [3. 4.]]'''
print(y)
'''Output:
[[5. 6.]
 [7. 8.]]
'''

print(x+y)
print(np.add(x,y))

'''
Output:
[[ 6.  8.]
 [10. 12.]]

[[ 6.  8.]
 [10. 12.]]
 '''

print(x-y)
print(np.subtract(x,y))
'''Output:
[[-4. -4.]
 [-4. -4.]]
[[-4. -4.]
 [-4. -4.]]
'''
print(x*y)
print(np.multiply(x,y))
'''Output:
[[ 5. 12.]
 [21. 32.]]
[[ 5. 12.]
 [21. 32.]]
'''
print(x/y)
'''Output:
[[0.2        0.33333333]
 [0.42857143 0.5       ]]
'''
print(np.sqrt(x))
'''Output:
[[1.         1.41421356]
 [1.73205081 2.        ]]
'''
print(np.sqrt(y))
'''Output:
[[2.23606798 2.44948974]
 [2.64575131 2.82842712]]
'''
#Transposition of matrix
np.array([[1,2],[3,4]])
print(x.T)
'''Output:
[[1. 3.]
 [2. 4.]]
 '''
#sum of all elements
print(np.sum(x))#Output:10.0
print(np.sum(x,axis=0))#Output:[4. 6.]
print(np.sum(x,axis=1))#Output:[3. 7.]

&lt;/pre&gt;

==Lossy Compression==
Compression in which data is lost during compression.

==Lossless Compression==
Compression in which data is not lost during compression.

==Compression coding==
We will use the black and white ''lena'' image from net.
[[File:Lena-Original-Image.jpg]]

&lt;pre&gt;
import numpy
from PIL import Image
I=numpy.asanyarray(Image.open('Lena-Original-Image-512x512-pixels.png'))
print(I)
&lt;/pre&gt;
'''Output:
[[[159 159 159]
  [159 159 159]
  [158 158 158]
  ...
  [168 168 168]
  [151 151 151]
  [119 119 119]]

 [[159 159 159]
  [159 159 159]
  [158 158 158]
  ...
  [168 168 168]
  [151 151 151]
  [119 119 119]]

 [[159 159 159]
  [159 159 159]
  [158 158 158]
  ...
  [168 168 168]
  [151 151 151]
  [119 119 119]]

 ...

 [[ 20  20  20]
  [ 29  29  29]
  [ 25  25  25]
  ...
  [ 91  91  91]
  [ 87  87  87]
  [ 84  84  84]]

 [[ 22  22  22]
  [ 34  34  34]
  [ 30  30  30]
  ...
  [ 91  91  91]
  [ 93  93  93]
  [ 96  96  96]]

 [[ 22  22  22]
  [ 34  34  34]
  [ 30  30  30]
  ...
  [ 91  91  91]
  [ 93  93  93]
  [ 96  96  96]]]
'''

===Load the image===
&lt;pre&gt;
import numpy
from PIL import Image
im=Image.open('Lena-Original-Image-512x512-pixels.png')
pixelMap=im.load()
&lt;/pre&gt;

===Create blank image of same size and type===
&lt;pre&gt;
#mode is type of image
#blank image with same mode and size of original image
img=Image.new(im.mode,im.size)
pixelNew=img.load()
&lt;/pre&gt;

===Logic of Image  Compression===
We will convert image from 8-bit to 3-bit.
&lt;pre&gt;
'''
8bit to 3 bit
2^8&gt;2^3
2^5=32

for:
0-31 put 0
32-63 put 1
64-95 put 2
96-127 put 3
128-159 put 4
160-191 put 5
192-223 put 6
224-255 put 7
'''
&lt;/pre&gt;

===Coding===
&lt;pre&gt;
import numpy
from PIL import Image
im=Image.open('Lena-Original-Image.jpg')
pixelMap=im.load()

#mode is type of image
#blank image with same mode and size of original image
img=Image.new(im.mode,im.size)
pixelNew=img.load()

'''
8bit to 3 bit
2^8&gt;2^3
2^5=32

for:
0-31 put 0
32-63 put 1
64-95 put 2
96-127 put 3
128-159 put 4
160-191 put 5
192-223 put 6
224-255 put 7
'''

for i in range(img.size[0]):
    for j in range(img.size[1]):
        if(pixelMap[i,j]&gt;=0 and pixelMap[i,j]&lt;=31):
            pixelNew[i,j]=0
        elif(pixelMap[i,j]&gt;=32 and pixelMap[i,j]&lt;=63):
            pixelNew[i,j]=1
        elif(pixelMap[i,j]&gt;=64 and pixelMap[i,j]&lt;=95):
            pixelNew[i,j]=2
        elif(pixelMap[i,j]&gt;=96 and pixelMap[i,j]&lt;=127):
            pixelNew[i,j]=3
        elif(pixelMap[i,j]&gt;=128 and pixelMap[i,j]&lt;=159):
            pixelNew[i,j]=4
        elif(pixelMap[i,j]&gt;=160 and pixelMap[i,j]&lt;=191):
            pixelNew[i,j]=5    
        elif(pixelMap[i,j]&gt;=192 and pixelMap[i,j]&lt;=223):
            pixelNew[i,j]=6
        elif(pixelMap[i,j]&gt;=224 and pixelMap[i,j]&lt;=255):
            pixelNew[i,j]=7

img.save('lena2.jpg')
J=numpy.asanyarray(Image.open('lena2.jpg'))

&lt;/pre&gt;
[[File:lena2.jpg]]</text>
      <sha1>2dei5zmh313l9u0fgwpmd375k6zuo73</sha1>
    </revision>
    <revision>
      <id>4135</id>
      <parentid>4134</parentid>
      <timestamp>2018-10-08T13:09:33Z</timestamp>
      <contributor>
        <username>Ajabdeh</username>
        <id>3176</id>
      </contributor>
      <comment>/* NumPy Examples */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="11280">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_10 Contributors of this page]
==Week 10 Download URL==
https://onlinecourses.nptel.ac.in/noc18_cs35/unit?unit=30&amp;lesson=31

=FLAMES - a Childhood play=
In childhood, we might have played a game called FLAMES to find the relationship (illusion!!) between a boy and a girl.  

All you have to do is

&lt;b&gt; Steps : &lt;/b&gt;
 1. write their names and strike out the common characters that occur in both their names.
 2. Count the remaining letters (SAY X)
 3. Write the word FLAMES and start counting from F and strike out the X&lt;sup&gt;th&lt;/sup&gt; letter till only one character remains
 4. If it is F - then the two are Friends. L - Love, A - Affection,  M - Marriage  E- Enemy S- Sister

&lt;table width=&quot;449&quot; height=&quot;116&quot; border=&quot;1&quot;&gt;
 &lt;tr&gt;
    &lt;td&gt;[[File:Flamestep1.JPG|300px]]&lt;/td&gt;
    &lt;td&gt;[[File:Flamestep2.JPG|300px]]&lt;/td&gt;
    &lt;td&gt;[[File:flamestep3.JPG|300px]]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td width = 200&gt;Remaining No. of Characters = 7&lt;/td&gt;
    &lt;td width = 200&gt;Counting from F, wrap over and strike the 7&lt;SUP&gt;th&lt;/SUP&gt; letter&lt;/td&gt;
    &lt;td width = 200&gt;The remaining letter denotes the relationship&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;
== Refresh the operations on Strings and Lists ==
&lt;table width=&quot;200&quot; border=&quot;1&quot;&gt;
  &lt;tr&gt;
    &lt;th scope=&quot;col&quot; width=100&gt;Functions&lt;/th&gt;
    &lt;th scope=&quot;col&quot; width=100&gt;Example&lt;/th&gt;
    &lt;th scope=&quot;col&quot; width=100&gt;Result&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;import &lt;/td&gt;
    &lt;td&gt;import string&lt;/td&gt;
    &lt;td&gt;import string module&lt;/td&gt;
  &lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;input a string&lt;/td&gt;
    &lt;td&gt;s = input()&lt;/td&gt;
    &lt;td&gt;input a string to the variable s&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Convert to lower case&lt;/td&gt;
    &lt;td&gt;print(s.lower())&lt;/td&gt;
    &lt;td &gt; raj &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Convert to upper case&lt;/td&gt;
    &lt;td&gt;print(s.upper())&lt;/td&gt;
    &lt;td&gt; RAJ&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Convert the string to list&lt;/td&gt;
    &lt;td&gt;s1 = list(s)&lt;/td&gt;
    &lt;td&gt;s1 will be ['R','a','j']&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Replace a character&lt;/td&gt;
    &lt;td&gt;print(s.replace(&quot;j&quot;,&quot;#&quot;))&lt;/td&gt;
    &lt;td&gt;'Ra#' .Note: the content of s is not changed.&lt;/td&gt;
  &lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;Replace more than one character&lt;/td&gt;
    &lt;td&gt;print(s.replace(&quot;aj&quot;,&quot;#&quot;))&lt;/td&gt;
    &lt;td&gt;'R#'&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;slice. l = ['a','b','c','d','e']&lt;/td&gt;
    &lt;td&gt;l[1:4]&lt;/td&gt;
    &lt;td&gt;['b', 'c', 'd'] &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;slice. Start index is missing &lt;/td&gt;
    &lt;td&gt;l[:4]&lt;/td&gt;
    &lt;td&gt; ['a', 'b', 'c', 'd']  Default is 0 if start index is omitted &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;slice. End index is missing &lt;/td&gt;
    &lt;td&gt;l[1:]&lt;/td&gt;
    &lt;td&gt; ['b', 'c', 'd', 'e'] Default is length of the list if end index is omitted&lt;/td&gt;
  &lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;slice. Both index missing &lt;/td&gt;
    &lt;td&gt;l[:]&lt;/td&gt;
    &lt;td&gt; ['a','b','c','d','e'] &lt;/td&gt;
  &lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;Index of first occurrence of a char.  &lt;/td&gt;
    &lt;td&gt;print(l.index('d'))&lt;/td&gt;
    &lt;td&gt; 3 &lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;
== Changes done by Sonia ==
&lt;pre&gt;
import string

p1 = input(&quot;Enter first person name:&quot;)
p1 = p1.lower()
p1=  p1.replace(&quot; &quot;,&quot;&quot;)

p2 = input(&quot;Enter Second person name:&quot;)
p2 = p2.lower()
p2 =  p2.replace(&quot; &quot;,&quot;&quot;)

l1 = list(p1)
l2 = list(p2)

proceed = True
while proceed:
   for i in l1:
        if i in l2:
            c=i
            l1.remove(c)
            l2.remove(c)
            proceed=True
            break
        else:
            proceed=False
    
count = len(l1) + len(l2)
result = ['Friends','Love','Affection','Marriage','Enemy','Sibling']

while len(result) &gt; 1 :
    split_index = (count%len(result)) -1
    if split_index &gt;= 0 :
        right = result[split_index + 1 :]
        left = result[:split_index]
        result = right + left
    else :
        result = result[:len(result) -1]
print(result[0])
&lt;/pre&gt;

Output:

[[File:flameOutput.png]]

= Image Compression =
Suppose you have a web page with lots of images.  It will take more time to download.  To make downloading faster, either you remove the images or reduce the size of the images.  Both methods will not give a good or required result.  Instead you can do &lt;b&gt; Image Compression&lt;/b&gt;
==NumPy Module==
NumPy is a module for Python. The name is an acronym for &quot;Numeric Python&quot;. It enriches Python with powerful data structures, implementing multi-dimensional arrays and matrices. To work with Artificial Intelligence, Machine Learning or Deep Learning NumPy is required.

&lt;b&gt; How is it superior to List &lt;/b&gt;
Operations on numpy arrays and matrices are easier than Lists.
Consider  the following

cvalues = [22.1, 22.8, 21.9, 22.5, 22.7, 22.3, 21.8, 21.2, 22.9, 22.1]

C = np.array(cvalues)

We would like to find the values into degrees Fahrenheit. This can be easily accomplished using a simple scalar multiplication:

print(C * 9 / 5 + 32)

Using Lists, it should have been

 fvalues = [ x*9/5 + 32 for x in cvalues] 

&lt;b&gt; Operations on numpy &lt;/b&gt;
&lt;table width=&quot;200&quot; border=&quot;1&quot;&gt;
  &lt;tr&gt;
    &lt;th scope=&quot;col&quot;&gt;Operations&lt;/th&gt;
    &lt;th scope=&quot;col&quot;&gt;Descriptions&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;import numpy as np &lt;/td&gt;
    &lt;td&gt;numpy is imported and can be accessed with a short name np&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;a=np.array([1,2,3])&lt;/td&gt;
    &lt;td&gt;One dimensional array 'a' is created&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;print(type(a))&lt;/td&gt;
    &lt;td&gt;&lt;class 'numpy.ndarray'&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;print(a.shape)&lt;/td&gt;
    &lt;td&gt;(3,)&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;print (a[0],a[1],a[2])&lt;/td&gt;
    &lt;td&gt;1 2 3&lt;/td&gt;
  &lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;b=np.array([[1,2,3],[4,5,6]])&lt;/td&gt;
    &lt;td&gt;Two dimensional array 'b' is created&lt;/td&gt;
  &lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;print(b.shape)&lt;/td&gt;
    &lt;td&gt;(2,3)&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;
[[#Top]]
=== NumPy Examples ===
importing numpy module is common to following examples.
&lt;pre&gt;import numpy as np&lt;/pre&gt;

'''Example: Print NumPy Array'''
&lt;pre&gt;
#pass list as argument to np.array
a=np.array([1,2,3])
print(a)
#Output: [1 2 3]
&lt;/pre&gt;

'''Example: Print type of numpy array'''
&lt;pre&gt;
#type of numpy array
print(type(a))
#Output: &lt;class 'numpy.ndarray'&gt;
&lt;/pre&gt;

'''Example: Print shape i.e.size of numpy array'''
&lt;pre&gt;
#shape of numpy array
print(a.shape)
#Output: (3,)
&lt;/pre&gt;

'''Example: Print elements of numpy using indexes'''
&lt;pre&gt;
#print elements of numpy using indexes
print(a[0], a[1], a[2])
#Output: 1 2 3
&lt;/pre&gt;

'''Example: Print shape of array: rows and columns'''
&lt;pre&gt;
b=np.array([[1,2,3],[4,5,6]])
print(b.shape)
#Output: (2, 3) - 2 rows and 3 columns
&lt;/pre&gt;

''' Example: 2x2 array of '0' '''
&lt;pre&gt;
#array of '0'
a=np.zeros((2,2))
print(a)
'''Output:
[[0. 0.]
 [0. 0.]]'''
&lt;/pre&gt;

''' Example: 2x2 array of '1' '''
&lt;pre&gt;
#array of '1'
b= np.ones((2,2))
print(b)
'''Output:
[[1. 1.]
 [1. 1.]]'''
&lt;/pre&gt;

''' Example: 2x2 array of '6' '''
&lt;pre&gt;
#2x2 array of 6
c= np.full((2,2),6)
print(c)
'''Output:
[[6 6]
 [6 6]]'''
&lt;/pre&gt;

''' Example: 2x2 array of random number '''
&lt;pre&gt;
#2x2 array of random number
d=np.random.random((2,2))
print(d)
'''Output:
 [[0.45937293 0.72546193]
 [0.28374715 0.63269858]]'''
&lt;/pre&gt;

''' Example: nxn array of random integer'''
&lt;pre&gt;
#2x2 array of random integer
d=np.random.randint(0,5,(2,2))
print(d)
'''Output:
  [[2 2 1 0 4]
   [3 1 0 3 4]]'''
Returns elements from 0 to 4
&lt;/pre&gt;

'''Example: int32 Data type of array'''
&lt;pre&gt;
x=np.array([1,2])

#data type of x
print(x.dtype)
#Output : int32
&lt;/pre&gt;

'''Example: float64 Data type of array'''
&lt;pre&gt;
y=np.array([1.2,3])
print(y.dtype)
#Output: float64
&lt;/pre&gt;

'''Example: Specifically setting Data type of array as int64'''
&lt;pre&gt;
x=np.array([1,2], dtype=np.int64)
print(x.dtype)
#Output: int64
&lt;/pre&gt;
[[#Top]]

===NumPy array operations===
&lt;pre&gt;
import numpy as np
x=np.array([[1,2],[3,4]],dtype=np.float64)
y=np.array([[5,6],[7,8]],dtype=np.float64)
print(x)
'''Output:
[[1. 2.]
 [3. 4.]]'''
print(y)
'''Output:
[[5. 6.]
 [7. 8.]]
'''

print(x+y)
print(np.add(x,y))

'''
Output:
[[ 6.  8.]
 [10. 12.]]

[[ 6.  8.]
 [10. 12.]]
 '''

print(x-y)
print(np.subtract(x,y))
'''Output:
[[-4. -4.]
 [-4. -4.]]
[[-4. -4.]
 [-4. -4.]]
'''
print(x*y)
print(np.multiply(x,y))
'''Output:
[[ 5. 12.]
 [21. 32.]]
[[ 5. 12.]
 [21. 32.]]
'''
print(x/y)
'''Output:
[[0.2        0.33333333]
 [0.42857143 0.5       ]]
'''
print(np.sqrt(x))
'''Output:
[[1.         1.41421356]
 [1.73205081 2.        ]]
'''
print(np.sqrt(y))
'''Output:
[[2.23606798 2.44948974]
 [2.64575131 2.82842712]]
'''
#Transposition of matrix
np.array([[1,2],[3,4]])
print(x.T)
'''Output:
[[1. 3.]
 [2. 4.]]
 '''
#sum of all elements
print(np.sum(x))#Output:10.0
print(np.sum(x,axis=0))#Output:[4. 6.]
print(np.sum(x,axis=1))#Output:[3. 7.]

&lt;/pre&gt;

==Lossy Compression==
Compression in which data is lost during compression.

==Lossless Compression==
Compression in which data is not lost during compression.

==Compression coding==
We will use the black and white ''lena'' image from net.
[[File:Lena-Original-Image.jpg]]

&lt;pre&gt;
import numpy
from PIL import Image
I=numpy.asanyarray(Image.open('Lena-Original-Image-512x512-pixels.png'))
print(I)
&lt;/pre&gt;
'''Output:
[[[159 159 159]
  [159 159 159]
  [158 158 158]
  ...
  [168 168 168]
  [151 151 151]
  [119 119 119]]

 [[159 159 159]
  [159 159 159]
  [158 158 158]
  ...
  [168 168 168]
  [151 151 151]
  [119 119 119]]

 [[159 159 159]
  [159 159 159]
  [158 158 158]
  ...
  [168 168 168]
  [151 151 151]
  [119 119 119]]

 ...

 [[ 20  20  20]
  [ 29  29  29]
  [ 25  25  25]
  ...
  [ 91  91  91]
  [ 87  87  87]
  [ 84  84  84]]

 [[ 22  22  22]
  [ 34  34  34]
  [ 30  30  30]
  ...
  [ 91  91  91]
  [ 93  93  93]
  [ 96  96  96]]

 [[ 22  22  22]
  [ 34  34  34]
  [ 30  30  30]
  ...
  [ 91  91  91]
  [ 93  93  93]
  [ 96  96  96]]]
'''

===Load the image===
&lt;pre&gt;
import numpy
from PIL import Image
im=Image.open('Lena-Original-Image-512x512-pixels.png')
pixelMap=im.load()
&lt;/pre&gt;

===Create blank image of same size and type===
&lt;pre&gt;
#mode is type of image
#blank image with same mode and size of original image
img=Image.new(im.mode,im.size)
pixelNew=img.load()
&lt;/pre&gt;

===Logic of Image  Compression===
We will convert image from 8-bit to 3-bit.
&lt;pre&gt;
'''
8bit to 3 bit
2^8&gt;2^3
2^5=32

for:
0-31 put 0
32-63 put 1
64-95 put 2
96-127 put 3
128-159 put 4
160-191 put 5
192-223 put 6
224-255 put 7
'''
&lt;/pre&gt;

===Coding===
&lt;pre&gt;
import numpy
from PIL import Image
im=Image.open('Lena-Original-Image.jpg')
pixelMap=im.load()

#mode is type of image
#blank image with same mode and size of original image
img=Image.new(im.mode,im.size)
pixelNew=img.load()

'''
8bit to 3 bit
2^8&gt;2^3
2^5=32

for:
0-31 put 0
32-63 put 1
64-95 put 2
96-127 put 3
128-159 put 4
160-191 put 5
192-223 put 6
224-255 put 7
'''

for i in range(img.size[0]):
    for j in range(img.size[1]):
        if(pixelMap[i,j]&gt;=0 and pixelMap[i,j]&lt;=31):
            pixelNew[i,j]=0
        elif(pixelMap[i,j]&gt;=32 and pixelMap[i,j]&lt;=63):
            pixelNew[i,j]=1
        elif(pixelMap[i,j]&gt;=64 and pixelMap[i,j]&lt;=95):
            pixelNew[i,j]=2
        elif(pixelMap[i,j]&gt;=96 and pixelMap[i,j]&lt;=127):
            pixelNew[i,j]=3
        elif(pixelMap[i,j]&gt;=128 and pixelMap[i,j]&lt;=159):
            pixelNew[i,j]=4
        elif(pixelMap[i,j]&gt;=160 and pixelMap[i,j]&lt;=191):
            pixelNew[i,j]=5    
        elif(pixelMap[i,j]&gt;=192 and pixelMap[i,j]&lt;=223):
            pixelNew[i,j]=6
        elif(pixelMap[i,j]&gt;=224 and pixelMap[i,j]&lt;=255):
            pixelNew[i,j]=7

img.save('lena2.jpg')
J=numpy.asanyarray(Image.open('lena2.jpg'))

&lt;/pre&gt;
[[File:lena2.jpg]]</text>
      <sha1>apleriqa9ox5hsvr9l7g2bgzogxj598</sha1>
    </revision>
    <revision>
      <id>4136</id>
      <parentid>4135</parentid>
      <timestamp>2018-10-08T13:16:18Z</timestamp>
      <contributor>
        <username>Ajabdeh</username>
        <id>3176</id>
      </contributor>
      <comment>/* NumPy Examples */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="11280">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_10 Contributors of this page]
==Week 10 Download URL==
https://onlinecourses.nptel.ac.in/noc18_cs35/unit?unit=30&amp;lesson=31

=FLAMES - a Childhood play=
In childhood, we might have played a game called FLAMES to find the relationship (illusion!!) between a boy and a girl.  

All you have to do is

&lt;b&gt; Steps : &lt;/b&gt;
 1. write their names and strike out the common characters that occur in both their names.
 2. Count the remaining letters (SAY X)
 3. Write the word FLAMES and start counting from F and strike out the X&lt;sup&gt;th&lt;/sup&gt; letter till only one character remains
 4. If it is F - then the two are Friends. L - Love, A - Affection,  M - Marriage  E- Enemy S- Sister

&lt;table width=&quot;449&quot; height=&quot;116&quot; border=&quot;1&quot;&gt;
 &lt;tr&gt;
    &lt;td&gt;[[File:Flamestep1.JPG|300px]]&lt;/td&gt;
    &lt;td&gt;[[File:Flamestep2.JPG|300px]]&lt;/td&gt;
    &lt;td&gt;[[File:flamestep3.JPG|300px]]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td width = 200&gt;Remaining No. of Characters = 7&lt;/td&gt;
    &lt;td width = 200&gt;Counting from F, wrap over and strike the 7&lt;SUP&gt;th&lt;/SUP&gt; letter&lt;/td&gt;
    &lt;td width = 200&gt;The remaining letter denotes the relationship&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;
== Refresh the operations on Strings and Lists ==
&lt;table width=&quot;200&quot; border=&quot;1&quot;&gt;
  &lt;tr&gt;
    &lt;th scope=&quot;col&quot; width=100&gt;Functions&lt;/th&gt;
    &lt;th scope=&quot;col&quot; width=100&gt;Example&lt;/th&gt;
    &lt;th scope=&quot;col&quot; width=100&gt;Result&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;import &lt;/td&gt;
    &lt;td&gt;import string&lt;/td&gt;
    &lt;td&gt;import string module&lt;/td&gt;
  &lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;input a string&lt;/td&gt;
    &lt;td&gt;s = input()&lt;/td&gt;
    &lt;td&gt;input a string to the variable s&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Convert to lower case&lt;/td&gt;
    &lt;td&gt;print(s.lower())&lt;/td&gt;
    &lt;td &gt; raj &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Convert to upper case&lt;/td&gt;
    &lt;td&gt;print(s.upper())&lt;/td&gt;
    &lt;td&gt; RAJ&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Convert the string to list&lt;/td&gt;
    &lt;td&gt;s1 = list(s)&lt;/td&gt;
    &lt;td&gt;s1 will be ['R','a','j']&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Replace a character&lt;/td&gt;
    &lt;td&gt;print(s.replace(&quot;j&quot;,&quot;#&quot;))&lt;/td&gt;
    &lt;td&gt;'Ra#' .Note: the content of s is not changed.&lt;/td&gt;
  &lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;Replace more than one character&lt;/td&gt;
    &lt;td&gt;print(s.replace(&quot;aj&quot;,&quot;#&quot;))&lt;/td&gt;
    &lt;td&gt;'R#'&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;slice. l = ['a','b','c','d','e']&lt;/td&gt;
    &lt;td&gt;l[1:4]&lt;/td&gt;
    &lt;td&gt;['b', 'c', 'd'] &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;slice. Start index is missing &lt;/td&gt;
    &lt;td&gt;l[:4]&lt;/td&gt;
    &lt;td&gt; ['a', 'b', 'c', 'd']  Default is 0 if start index is omitted &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;slice. End index is missing &lt;/td&gt;
    &lt;td&gt;l[1:]&lt;/td&gt;
    &lt;td&gt; ['b', 'c', 'd', 'e'] Default is length of the list if end index is omitted&lt;/td&gt;
  &lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;slice. Both index missing &lt;/td&gt;
    &lt;td&gt;l[:]&lt;/td&gt;
    &lt;td&gt; ['a','b','c','d','e'] &lt;/td&gt;
  &lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;Index of first occurrence of a char.  &lt;/td&gt;
    &lt;td&gt;print(l.index('d'))&lt;/td&gt;
    &lt;td&gt; 3 &lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;
== Changes done by Sonia ==
&lt;pre&gt;
import string

p1 = input(&quot;Enter first person name:&quot;)
p1 = p1.lower()
p1=  p1.replace(&quot; &quot;,&quot;&quot;)

p2 = input(&quot;Enter Second person name:&quot;)
p2 = p2.lower()
p2 =  p2.replace(&quot; &quot;,&quot;&quot;)

l1 = list(p1)
l2 = list(p2)

proceed = True
while proceed:
   for i in l1:
        if i in l2:
            c=i
            l1.remove(c)
            l2.remove(c)
            proceed=True
            break
        else:
            proceed=False
    
count = len(l1) + len(l2)
result = ['Friends','Love','Affection','Marriage','Enemy','Sibling']

while len(result) &gt; 1 :
    split_index = (count%len(result)) -1
    if split_index &gt;= 0 :
        right = result[split_index + 1 :]
        left = result[:split_index]
        result = right + left
    else :
        result = result[:len(result) -1]
print(result[0])
&lt;/pre&gt;

Output:

[[File:flameOutput.png]]

= Image Compression =
Suppose you have a web page with lots of images.  It will take more time to download.  To make downloading faster, either you remove the images or reduce the size of the images.  Both methods will not give a good or required result.  Instead you can do &lt;b&gt; Image Compression&lt;/b&gt;
==NumPy Module==
NumPy is a module for Python. The name is an acronym for &quot;Numeric Python&quot;. It enriches Python with powerful data structures, implementing multi-dimensional arrays and matrices. To work with Artificial Intelligence, Machine Learning or Deep Learning NumPy is required.

&lt;b&gt; How is it superior to List &lt;/b&gt;
Operations on numpy arrays and matrices are easier than Lists.
Consider  the following

cvalues = [22.1, 22.8, 21.9, 22.5, 22.7, 22.3, 21.8, 21.2, 22.9, 22.1]

C = np.array(cvalues)

We would like to find the values into degrees Fahrenheit. This can be easily accomplished using a simple scalar multiplication:

print(C * 9 / 5 + 32)

Using Lists, it should have been

 fvalues = [ x*9/5 + 32 for x in cvalues] 

&lt;b&gt; Operations on numpy &lt;/b&gt;
&lt;table width=&quot;200&quot; border=&quot;1&quot;&gt;
  &lt;tr&gt;
    &lt;th scope=&quot;col&quot;&gt;Operations&lt;/th&gt;
    &lt;th scope=&quot;col&quot;&gt;Descriptions&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;import numpy as np &lt;/td&gt;
    &lt;td&gt;numpy is imported and can be accessed with a short name np&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;a=np.array([1,2,3])&lt;/td&gt;
    &lt;td&gt;One dimensional array 'a' is created&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;print(type(a))&lt;/td&gt;
    &lt;td&gt;&lt;class 'numpy.ndarray'&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;print(a.shape)&lt;/td&gt;
    &lt;td&gt;(3,)&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;print (a[0],a[1],a[2])&lt;/td&gt;
    &lt;td&gt;1 2 3&lt;/td&gt;
  &lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;b=np.array([[1,2,3],[4,5,6]])&lt;/td&gt;
    &lt;td&gt;Two dimensional array 'b' is created&lt;/td&gt;
  &lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;print(b.shape)&lt;/td&gt;
    &lt;td&gt;(2,3)&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;
[[#Top]]
=== NumPy Examples ===
importing numpy module is common to following examples.
&lt;pre&gt;import numpy as np&lt;/pre&gt;

'''Example: Print NumPy Array'''
&lt;pre&gt;
#pass list as argument to np.array
a=np.array([1,2,3])
print(a)
#Output: [1 2 3]
&lt;/pre&gt;

'''Example: Print type of numpy array'''
&lt;pre&gt;
#type of numpy array
print(type(a))
#Output: &lt;class 'numpy.ndarray'&gt;
&lt;/pre&gt;

'''Example: Print shape i.e.size of numpy array'''
&lt;pre&gt;
#shape of numpy array
print(a.shape)
#Output: (3,)
&lt;/pre&gt;

'''Example: Print elements of numpy using indexes'''
&lt;pre&gt;
#print elements of numpy using indexes
print(a[0], a[1], a[2])
#Output: 1 2 3
&lt;/pre&gt;

'''Example: Print shape of array: rows and columns'''
&lt;pre&gt;
b=np.array([[1,2,3],[4,5,6]])
print(b.shape)
#Output: (2, 3) - 2 rows and 3 columns
&lt;/pre&gt;

''' Example: 2x2 array of '0' '''
&lt;pre&gt;
#array of '0'
a=np.zeros((2,2))
print(a)
'''Output:
[[0. 0.]
 [0. 0.]]'''
&lt;/pre&gt;

''' Example: 2x2 array of '1' '''
&lt;pre&gt;
#array of '1'
b= np.ones((2,2))
print(b)
'''Output:
[[1. 1.]
 [1. 1.]]'''
&lt;/pre&gt;

''' Example: 2x2 array of '6' '''
&lt;pre&gt;
#2x2 array of 6
c= np.full((2,2),6)
print(c)
'''Output:
[[6 6]
 [6 6]]'''
&lt;/pre&gt;

''' Example: 2x2 array of random number '''
&lt;pre&gt;
#2x2 array of random number
d=np.random.random((2,2))
print(d)
'''Output:
 [[0.45937293 0.72546193]
 [0.28374715 0.63269858]]'''
&lt;/pre&gt;

''' Example: nxn array of random integer'''
&lt;pre&gt;
#2x2 array of random integer
d=np.random.randint(0,5,(2,5))
print(d)
'''Output:
  [[2 2 1 0 4]
   [3 1 0 3 4]]'''
Returns elements from 0 to 4
&lt;/pre&gt;

'''Example: int32 Data type of array'''
&lt;pre&gt;
x=np.array([1,2])

#data type of x
print(x.dtype)
#Output : int32
&lt;/pre&gt;

'''Example: float64 Data type of array'''
&lt;pre&gt;
y=np.array([1.2,3])
print(y.dtype)
#Output: float64
&lt;/pre&gt;

'''Example: Specifically setting Data type of array as int64'''
&lt;pre&gt;
x=np.array([1,2], dtype=np.int64)
print(x.dtype)
#Output: int64
&lt;/pre&gt;
[[#Top]]

===NumPy array operations===
&lt;pre&gt;
import numpy as np
x=np.array([[1,2],[3,4]],dtype=np.float64)
y=np.array([[5,6],[7,8]],dtype=np.float64)
print(x)
'''Output:
[[1. 2.]
 [3. 4.]]'''
print(y)
'''Output:
[[5. 6.]
 [7. 8.]]
'''

print(x+y)
print(np.add(x,y))

'''
Output:
[[ 6.  8.]
 [10. 12.]]

[[ 6.  8.]
 [10. 12.]]
 '''

print(x-y)
print(np.subtract(x,y))
'''Output:
[[-4. -4.]
 [-4. -4.]]
[[-4. -4.]
 [-4. -4.]]
'''
print(x*y)
print(np.multiply(x,y))
'''Output:
[[ 5. 12.]
 [21. 32.]]
[[ 5. 12.]
 [21. 32.]]
'''
print(x/y)
'''Output:
[[0.2        0.33333333]
 [0.42857143 0.5       ]]
'''
print(np.sqrt(x))
'''Output:
[[1.         1.41421356]
 [1.73205081 2.        ]]
'''
print(np.sqrt(y))
'''Output:
[[2.23606798 2.44948974]
 [2.64575131 2.82842712]]
'''
#Transposition of matrix
np.array([[1,2],[3,4]])
print(x.T)
'''Output:
[[1. 3.]
 [2. 4.]]
 '''
#sum of all elements
print(np.sum(x))#Output:10.0
print(np.sum(x,axis=0))#Output:[4. 6.]
print(np.sum(x,axis=1))#Output:[3. 7.]

&lt;/pre&gt;

==Lossy Compression==
Compression in which data is lost during compression.

==Lossless Compression==
Compression in which data is not lost during compression.

==Compression coding==
We will use the black and white ''lena'' image from net.
[[File:Lena-Original-Image.jpg]]

&lt;pre&gt;
import numpy
from PIL import Image
I=numpy.asanyarray(Image.open('Lena-Original-Image-512x512-pixels.png'))
print(I)
&lt;/pre&gt;
'''Output:
[[[159 159 159]
  [159 159 159]
  [158 158 158]
  ...
  [168 168 168]
  [151 151 151]
  [119 119 119]]

 [[159 159 159]
  [159 159 159]
  [158 158 158]
  ...
  [168 168 168]
  [151 151 151]
  [119 119 119]]

 [[159 159 159]
  [159 159 159]
  [158 158 158]
  ...
  [168 168 168]
  [151 151 151]
  [119 119 119]]

 ...

 [[ 20  20  20]
  [ 29  29  29]
  [ 25  25  25]
  ...
  [ 91  91  91]
  [ 87  87  87]
  [ 84  84  84]]

 [[ 22  22  22]
  [ 34  34  34]
  [ 30  30  30]
  ...
  [ 91  91  91]
  [ 93  93  93]
  [ 96  96  96]]

 [[ 22  22  22]
  [ 34  34  34]
  [ 30  30  30]
  ...
  [ 91  91  91]
  [ 93  93  93]
  [ 96  96  96]]]
'''

===Load the image===
&lt;pre&gt;
import numpy
from PIL import Image
im=Image.open('Lena-Original-Image-512x512-pixels.png')
pixelMap=im.load()
&lt;/pre&gt;

===Create blank image of same size and type===
&lt;pre&gt;
#mode is type of image
#blank image with same mode and size of original image
img=Image.new(im.mode,im.size)
pixelNew=img.load()
&lt;/pre&gt;

===Logic of Image  Compression===
We will convert image from 8-bit to 3-bit.
&lt;pre&gt;
'''
8bit to 3 bit
2^8&gt;2^3
2^5=32

for:
0-31 put 0
32-63 put 1
64-95 put 2
96-127 put 3
128-159 put 4
160-191 put 5
192-223 put 6
224-255 put 7
'''
&lt;/pre&gt;

===Coding===
&lt;pre&gt;
import numpy
from PIL import Image
im=Image.open('Lena-Original-Image.jpg')
pixelMap=im.load()

#mode is type of image
#blank image with same mode and size of original image
img=Image.new(im.mode,im.size)
pixelNew=img.load()

'''
8bit to 3 bit
2^8&gt;2^3
2^5=32

for:
0-31 put 0
32-63 put 1
64-95 put 2
96-127 put 3
128-159 put 4
160-191 put 5
192-223 put 6
224-255 put 7
'''

for i in range(img.size[0]):
    for j in range(img.size[1]):
        if(pixelMap[i,j]&gt;=0 and pixelMap[i,j]&lt;=31):
            pixelNew[i,j]=0
        elif(pixelMap[i,j]&gt;=32 and pixelMap[i,j]&lt;=63):
            pixelNew[i,j]=1
        elif(pixelMap[i,j]&gt;=64 and pixelMap[i,j]&lt;=95):
            pixelNew[i,j]=2
        elif(pixelMap[i,j]&gt;=96 and pixelMap[i,j]&lt;=127):
            pixelNew[i,j]=3
        elif(pixelMap[i,j]&gt;=128 and pixelMap[i,j]&lt;=159):
            pixelNew[i,j]=4
        elif(pixelMap[i,j]&gt;=160 and pixelMap[i,j]&lt;=191):
            pixelNew[i,j]=5    
        elif(pixelMap[i,j]&gt;=192 and pixelMap[i,j]&lt;=223):
            pixelNew[i,j]=6
        elif(pixelMap[i,j]&gt;=224 and pixelMap[i,j]&lt;=255):
            pixelNew[i,j]=7

img.save('lena2.jpg')
J=numpy.asanyarray(Image.open('lena2.jpg'))

&lt;/pre&gt;
[[File:lena2.jpg]]</text>
      <sha1>coonm0acg5tta7othe0lhh7mnhwcsvx</sha1>
    </revision>
    <revision>
      <id>4148</id>
      <parentid>4136</parentid>
      <timestamp>2018-10-09T10:15:48Z</timestamp>
      <contributor>
        <username>Saurav</username>
        <id>2056</id>
      </contributor>
      <comment>/* FLAMES - a Childhood play */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="12155">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_10 Contributors of this page]
==Week 10 Download URL==
https://onlinecourses.nptel.ac.in/noc18_cs35/unit?unit=30&amp;lesson=31

=FLAMES - a Childhood play=
In childhood, we might have played a game called FLAMES to find the relationship (illusion!!) between a boy and a girl.  

All you have to do is

&lt;b&gt; Steps : &lt;/b&gt;
 1. write their names and strike out the common characters that occur in both their names.
 2. Count the remaining letters (SAY X)
 3. Write the word FLAMES and start counting from F and strike out the X&lt;sup&gt;th&lt;/sup&gt; letter till only one character remains
 4. If it is F - then the two are Friends. L - Love, A - Affection,  M - Marriage  E- Enemy S- Sister

&lt;table width=&quot;449&quot; height=&quot;116&quot; border=&quot;1&quot;&gt;
 &lt;tr&gt;
    &lt;td&gt;[[File:Flamestep1.JPG|300px]]&lt;/td&gt;
    &lt;td&gt;[[File:Flamestep2.JPG|300px]]&lt;/td&gt;
    &lt;td&gt;[[File:flamestep3.JPG|300px]]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td width = 200&gt;Remaining No. of Characters = 7&lt;/td&gt;
    &lt;td width = 200&gt;Counting from F, wrap over and strike the 7&lt;SUP&gt;th&lt;/SUP&gt; letter&lt;/td&gt;
    &lt;td width = 200&gt;The remaining letter denotes the relationship&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;
== Refresh the operations on Strings and Lists ==
&lt;table width=&quot;200&quot; border=&quot;1&quot;&gt;
  &lt;tr&gt;
    &lt;th scope=&quot;col&quot; width=100&gt;Functions&lt;/th&gt;
    &lt;th scope=&quot;col&quot; width=100&gt;Example&lt;/th&gt;
    &lt;th scope=&quot;col&quot; width=100&gt;Result&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;import &lt;/td&gt;
    &lt;td&gt;import string&lt;/td&gt;
    &lt;td&gt;import string module&lt;/td&gt;
  &lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;input a string&lt;/td&gt;
    &lt;td&gt;s = input()&lt;/td&gt;
    &lt;td&gt;input a string to the variable s&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Convert to lower case&lt;/td&gt;
    &lt;td&gt;print(s.lower())&lt;/td&gt;
    &lt;td &gt; raj &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Convert to upper case&lt;/td&gt;
    &lt;td&gt;print(s.upper())&lt;/td&gt;
    &lt;td&gt; RAJ&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Convert the string to list&lt;/td&gt;
    &lt;td&gt;s1 = list(s)&lt;/td&gt;
    &lt;td&gt;s1 will be ['R','a','j']&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Replace a character&lt;/td&gt;
    &lt;td&gt;print(s.replace(&quot;j&quot;,&quot;#&quot;))&lt;/td&gt;
    &lt;td&gt;'Ra#' .Note: the content of s is not changed.&lt;/td&gt;
  &lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;Replace more than one character&lt;/td&gt;
    &lt;td&gt;print(s.replace(&quot;aj&quot;,&quot;#&quot;))&lt;/td&gt;
    &lt;td&gt;'R#'&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;slice. l = ['a','b','c','d','e']&lt;/td&gt;
    &lt;td&gt;l[1:4]&lt;/td&gt;
    &lt;td&gt;['b', 'c', 'd'] &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;slice. Start index is missing &lt;/td&gt;
    &lt;td&gt;l[:4]&lt;/td&gt;
    &lt;td&gt; ['a', 'b', 'c', 'd']  Default is 0 if start index is omitted &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;slice. End index is missing &lt;/td&gt;
    &lt;td&gt;l[1:]&lt;/td&gt;
    &lt;td&gt; ['b', 'c', 'd', 'e'] Default is length of the list if end index is omitted&lt;/td&gt;
  &lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;slice. Both index missing &lt;/td&gt;
    &lt;td&gt;l[:]&lt;/td&gt;
    &lt;td&gt; ['a','b','c','d','e'] &lt;/td&gt;
  &lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;Index of first occurrence of a char.  &lt;/td&gt;
    &lt;td&gt;print(l.index('d'))&lt;/td&gt;
    &lt;td&gt; 3 &lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;
== Changes done by Sonia ==
&lt;pre&gt;
import string

p1 = input(&quot;Enter first person name:&quot;)
p1 = p1.lower()
p1=  p1.replace(&quot; &quot;,&quot;&quot;)

p2 = input(&quot;Enter Second person name:&quot;)
p2 = p2.lower()
p2 =  p2.replace(&quot; &quot;,&quot;&quot;)

l1 = list(p1)
l2 = list(p2)

proceed = True
while proceed:
   for i in l1:
        if i in l2:
            c=i
            l1.remove(c)
            l2.remove(c)
            proceed=True
            break
        else:
            proceed=False
    
count = len(l1) + len(l2)
result = ['Friends','Love','Affection','Marriage','Enemy','Sibling']

while len(result) &gt; 1 :
    split_index = (count%len(result)) -1
    if split_index &gt;= 0 :
        right = result[split_index + 1 :]
        left = result[:split_index]
        result = right + left
    else :
        result = result[:len(result) -1]
print(result[0])
&lt;/pre&gt;

Output:

[[File:flameOutput.png]]
===FLAMES(a Fun game) :By SAURAV===
== code==

def Count_uncommon_char(l1,l2):
    for i in (l1):
        for j in (l2):
            if j==i:
                l1.remove(i)
                l2.remove(j)
                break
    l=l1+l2
    return (len(l))      
     
p1=input(&quot;Enter first person your name:&quot;)
p1=p1.upper()
p1=p1.replace(&quot; &quot;,&quot;&quot;)
p2=input(&quot;Enter second person your name:&quot;)
p2=p2.upper()
p2=p2.replace(&quot; &quot;,&quot;&quot;)
l1=list(p1)
l2=list(p2)
result=['Frieand','Love','Affaction','marry','Enemy','siblings']
while(len(result)&gt;1):
    c=Count_uncommon_char(l1,l2)
    c=c%len(result)-1
    if c==-1:
        result=result[:len(result)-1]
    else:
        result=result[c+1:]+result[:c]
print(result[0])

==OUTPUT:==
Enter first person your name:ram

Enter second person your name:sita
Frieand
Enter first person your name:radha

Enter second person your name:mohan
marry

= Image Compression =
Suppose you have a web page with lots of images.  It will take more time to download.  To make downloading faster, either you remove the images or reduce the size of the images.  Both methods will not give a good or required result.  Instead you can do &lt;b&gt; Image Compression&lt;/b&gt;
==NumPy Module==
NumPy is a module for Python. The name is an acronym for &quot;Numeric Python&quot;. It enriches Python with powerful data structures, implementing multi-dimensional arrays and matrices. To work with Artificial Intelligence, Machine Learning or Deep Learning NumPy is required.

&lt;b&gt; How is it superior to List &lt;/b&gt;
Operations on numpy arrays and matrices are easier than Lists.
Consider  the following

cvalues = [22.1, 22.8, 21.9, 22.5, 22.7, 22.3, 21.8, 21.2, 22.9, 22.1]

C = np.array(cvalues)

We would like to find the values into degrees Fahrenheit. This can be easily accomplished using a simple scalar multiplication:

print(C * 9 / 5 + 32)

Using Lists, it should have been

 fvalues = [ x*9/5 + 32 for x in cvalues] 

&lt;b&gt; Operations on numpy &lt;/b&gt;
&lt;table width=&quot;200&quot; border=&quot;1&quot;&gt;
  &lt;tr&gt;
    &lt;th scope=&quot;col&quot;&gt;Operations&lt;/th&gt;
    &lt;th scope=&quot;col&quot;&gt;Descriptions&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;import numpy as np &lt;/td&gt;
    &lt;td&gt;numpy is imported and can be accessed with a short name np&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;a=np.array([1,2,3])&lt;/td&gt;
    &lt;td&gt;One dimensional array 'a' is created&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;print(type(a))&lt;/td&gt;
    &lt;td&gt;&lt;class 'numpy.ndarray'&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;print(a.shape)&lt;/td&gt;
    &lt;td&gt;(3,)&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;print (a[0],a[1],a[2])&lt;/td&gt;
    &lt;td&gt;1 2 3&lt;/td&gt;
  &lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;b=np.array([[1,2,3],[4,5,6]])&lt;/td&gt;
    &lt;td&gt;Two dimensional array 'b' is created&lt;/td&gt;
  &lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;print(b.shape)&lt;/td&gt;
    &lt;td&gt;(2,3)&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;
[[#Top]]
=== NumPy Examples ===
importing numpy module is common to following examples.
&lt;pre&gt;import numpy as np&lt;/pre&gt;

'''Example: Print NumPy Array'''
&lt;pre&gt;
#pass list as argument to np.array
a=np.array([1,2,3])
print(a)
#Output: [1 2 3]
&lt;/pre&gt;

'''Example: Print type of numpy array'''
&lt;pre&gt;
#type of numpy array
print(type(a))
#Output: &lt;class 'numpy.ndarray'&gt;
&lt;/pre&gt;

'''Example: Print shape i.e.size of numpy array'''
&lt;pre&gt;
#shape of numpy array
print(a.shape)
#Output: (3,)
&lt;/pre&gt;

'''Example: Print elements of numpy using indexes'''
&lt;pre&gt;
#print elements of numpy using indexes
print(a[0], a[1], a[2])
#Output: 1 2 3
&lt;/pre&gt;

'''Example: Print shape of array: rows and columns'''
&lt;pre&gt;
b=np.array([[1,2,3],[4,5,6]])
print(b.shape)
#Output: (2, 3) - 2 rows and 3 columns
&lt;/pre&gt;

''' Example: 2x2 array of '0' '''
&lt;pre&gt;
#array of '0'
a=np.zeros((2,2))
print(a)
'''Output:
[[0. 0.]
 [0. 0.]]'''
&lt;/pre&gt;

''' Example: 2x2 array of '1' '''
&lt;pre&gt;
#array of '1'
b= np.ones((2,2))
print(b)
'''Output:
[[1. 1.]
 [1. 1.]]'''
&lt;/pre&gt;

''' Example: 2x2 array of '6' '''
&lt;pre&gt;
#2x2 array of 6
c= np.full((2,2),6)
print(c)
'''Output:
[[6 6]
 [6 6]]'''
&lt;/pre&gt;

''' Example: 2x2 array of random number '''
&lt;pre&gt;
#2x2 array of random number
d=np.random.random((2,2))
print(d)
'''Output:
 [[0.45937293 0.72546193]
 [0.28374715 0.63269858]]'''
&lt;/pre&gt;

''' Example: nxn array of random integer'''
&lt;pre&gt;
#2x2 array of random integer
d=np.random.randint(0,5,(2,5))
print(d)
'''Output:
  [[2 2 1 0 4]
   [3 1 0 3 4]]'''
Returns elements from 0 to 4
&lt;/pre&gt;

'''Example: int32 Data type of array'''
&lt;pre&gt;
x=np.array([1,2])

#data type of x
print(x.dtype)
#Output : int32
&lt;/pre&gt;

'''Example: float64 Data type of array'''
&lt;pre&gt;
y=np.array([1.2,3])
print(y.dtype)
#Output: float64
&lt;/pre&gt;

'''Example: Specifically setting Data type of array as int64'''
&lt;pre&gt;
x=np.array([1,2], dtype=np.int64)
print(x.dtype)
#Output: int64
&lt;/pre&gt;
[[#Top]]

===NumPy array operations===
&lt;pre&gt;
import numpy as np
x=np.array([[1,2],[3,4]],dtype=np.float64)
y=np.array([[5,6],[7,8]],dtype=np.float64)
print(x)
'''Output:
[[1. 2.]
 [3. 4.]]'''
print(y)
'''Output:
[[5. 6.]
 [7. 8.]]
'''

print(x+y)
print(np.add(x,y))

'''
Output:
[[ 6.  8.]
 [10. 12.]]

[[ 6.  8.]
 [10. 12.]]
 '''

print(x-y)
print(np.subtract(x,y))
'''Output:
[[-4. -4.]
 [-4. -4.]]
[[-4. -4.]
 [-4. -4.]]
'''
print(x*y)
print(np.multiply(x,y))
'''Output:
[[ 5. 12.]
 [21. 32.]]
[[ 5. 12.]
 [21. 32.]]
'''
print(x/y)
'''Output:
[[0.2        0.33333333]
 [0.42857143 0.5       ]]
'''
print(np.sqrt(x))
'''Output:
[[1.         1.41421356]
 [1.73205081 2.        ]]
'''
print(np.sqrt(y))
'''Output:
[[2.23606798 2.44948974]
 [2.64575131 2.82842712]]
'''
#Transposition of matrix
np.array([[1,2],[3,4]])
print(x.T)
'''Output:
[[1. 3.]
 [2. 4.]]
 '''
#sum of all elements
print(np.sum(x))#Output:10.0
print(np.sum(x,axis=0))#Output:[4. 6.]
print(np.sum(x,axis=1))#Output:[3. 7.]

&lt;/pre&gt;

==Lossy Compression==
Compression in which data is lost during compression.

==Lossless Compression==
Compression in which data is not lost during compression.

==Compression coding==
We will use the black and white ''lena'' image from net.
[[File:Lena-Original-Image.jpg]]

&lt;pre&gt;
import numpy
from PIL import Image
I=numpy.asanyarray(Image.open('Lena-Original-Image-512x512-pixels.png'))
print(I)
&lt;/pre&gt;
'''Output:
[[[159 159 159]
  [159 159 159]
  [158 158 158]
  ...
  [168 168 168]
  [151 151 151]
  [119 119 119]]

 [[159 159 159]
  [159 159 159]
  [158 158 158]
  ...
  [168 168 168]
  [151 151 151]
  [119 119 119]]

 [[159 159 159]
  [159 159 159]
  [158 158 158]
  ...
  [168 168 168]
  [151 151 151]
  [119 119 119]]

 ...

 [[ 20  20  20]
  [ 29  29  29]
  [ 25  25  25]
  ...
  [ 91  91  91]
  [ 87  87  87]
  [ 84  84  84]]

 [[ 22  22  22]
  [ 34  34  34]
  [ 30  30  30]
  ...
  [ 91  91  91]
  [ 93  93  93]
  [ 96  96  96]]

 [[ 22  22  22]
  [ 34  34  34]
  [ 30  30  30]
  ...
  [ 91  91  91]
  [ 93  93  93]
  [ 96  96  96]]]
'''

===Load the image===
&lt;pre&gt;
import numpy
from PIL import Image
im=Image.open('Lena-Original-Image-512x512-pixels.png')
pixelMap=im.load()
&lt;/pre&gt;

===Create blank image of same size and type===
&lt;pre&gt;
#mode is type of image
#blank image with same mode and size of original image
img=Image.new(im.mode,im.size)
pixelNew=img.load()
&lt;/pre&gt;

===Logic of Image  Compression===
We will convert image from 8-bit to 3-bit.
&lt;pre&gt;
'''
8bit to 3 bit
2^8&gt;2^3
2^5=32

for:
0-31 put 0
32-63 put 1
64-95 put 2
96-127 put 3
128-159 put 4
160-191 put 5
192-223 put 6
224-255 put 7
'''
&lt;/pre&gt;

===Coding===
&lt;pre&gt;
import numpy
from PIL import Image
im=Image.open('Lena-Original-Image.jpg')
pixelMap=im.load()

#mode is type of image
#blank image with same mode and size of original image
img=Image.new(im.mode,im.size)
pixelNew=img.load()

'''
8bit to 3 bit
2^8&gt;2^3
2^5=32

for:
0-31 put 0
32-63 put 1
64-95 put 2
96-127 put 3
128-159 put 4
160-191 put 5
192-223 put 6
224-255 put 7
'''

for i in range(img.size[0]):
    for j in range(img.size[1]):
        if(pixelMap[i,j]&gt;=0 and pixelMap[i,j]&lt;=31):
            pixelNew[i,j]=0
        elif(pixelMap[i,j]&gt;=32 and pixelMap[i,j]&lt;=63):
            pixelNew[i,j]=1
        elif(pixelMap[i,j]&gt;=64 and pixelMap[i,j]&lt;=95):
            pixelNew[i,j]=2
        elif(pixelMap[i,j]&gt;=96 and pixelMap[i,j]&lt;=127):
            pixelNew[i,j]=3
        elif(pixelMap[i,j]&gt;=128 and pixelMap[i,j]&lt;=159):
            pixelNew[i,j]=4
        elif(pixelMap[i,j]&gt;=160 and pixelMap[i,j]&lt;=191):
            pixelNew[i,j]=5    
        elif(pixelMap[i,j]&gt;=192 and pixelMap[i,j]&lt;=223):
            pixelNew[i,j]=6
        elif(pixelMap[i,j]&gt;=224 and pixelMap[i,j]&lt;=255):
            pixelNew[i,j]=7

img.save('lena2.jpg')
J=numpy.asanyarray(Image.open('lena2.jpg'))

&lt;/pre&gt;
[[File:lena2.jpg]]</text>
      <sha1>hmgebw7psfu7cxnidj2ttpy29slgti5</sha1>
    </revision>
    <revision>
      <id>4149</id>
      <parentid>4148</parentid>
      <timestamp>2018-10-09T10:24:18Z</timestamp>
      <contributor>
        <username>Saurav</username>
        <id>2056</id>
      </contributor>
      <comment>/* FLAMES - a Childhood play */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="12151">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_10 Contributors of this page]
==Week 10 Download URL==
https://onlinecourses.nptel.ac.in/noc18_cs35/unit?unit=30&amp;lesson=31

=FLAMES - a Childhood play=
In childhood, we might have played a game called FLAMES to find the relationship (illusion!!) between a boy and a girl.  

All you have to do is

&lt;b&gt; Steps : &lt;/b&gt;
 1. write their names and strike out the common characters that occur in both their names.
 2. Count the remaining letters (SAY X)
 3. Write the word FLAMES and start counting from F and strike out the X&lt;sup&gt;th&lt;/sup&gt; letter till only one character remains
 4. If it is F - then the two are Friends. L - Love, A - Affection,  M - Marriage  E- Enemy S- Sister

&lt;table width=&quot;449&quot; height=&quot;116&quot; border=&quot;1&quot;&gt;
 &lt;tr&gt;
    &lt;td&gt;[[File:Flamestep1.JPG|300px]]&lt;/td&gt;
    &lt;td&gt;[[File:Flamestep2.JPG|300px]]&lt;/td&gt;
    &lt;td&gt;[[File:flamestep3.JPG|300px]]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td width = 200&gt;Remaining No. of Characters = 7&lt;/td&gt;
    &lt;td width = 200&gt;Counting from F, wrap over and strike the 7&lt;SUP&gt;th&lt;/SUP&gt; letter&lt;/td&gt;
    &lt;td width = 200&gt;The remaining letter denotes the relationship&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;
== Refresh the operations on Strings and Lists ==
&lt;table width=&quot;200&quot; border=&quot;1&quot;&gt;
  &lt;tr&gt;
    &lt;th scope=&quot;col&quot; width=100&gt;Functions&lt;/th&gt;
    &lt;th scope=&quot;col&quot; width=100&gt;Example&lt;/th&gt;
    &lt;th scope=&quot;col&quot; width=100&gt;Result&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;import &lt;/td&gt;
    &lt;td&gt;import string&lt;/td&gt;
    &lt;td&gt;import string module&lt;/td&gt;
  &lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;input a string&lt;/td&gt;
    &lt;td&gt;s = input()&lt;/td&gt;
    &lt;td&gt;input a string to the variable s&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Convert to lower case&lt;/td&gt;
    &lt;td&gt;print(s.lower())&lt;/td&gt;
    &lt;td &gt; raj &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Convert to upper case&lt;/td&gt;
    &lt;td&gt;print(s.upper())&lt;/td&gt;
    &lt;td&gt; RAJ&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Convert the string to list&lt;/td&gt;
    &lt;td&gt;s1 = list(s)&lt;/td&gt;
    &lt;td&gt;s1 will be ['R','a','j']&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Replace a character&lt;/td&gt;
    &lt;td&gt;print(s.replace(&quot;j&quot;,&quot;#&quot;))&lt;/td&gt;
    &lt;td&gt;'Ra#' .Note: the content of s is not changed.&lt;/td&gt;
  &lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;Replace more than one character&lt;/td&gt;
    &lt;td&gt;print(s.replace(&quot;aj&quot;,&quot;#&quot;))&lt;/td&gt;
    &lt;td&gt;'R#'&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;slice. l = ['a','b','c','d','e']&lt;/td&gt;
    &lt;td&gt;l[1:4]&lt;/td&gt;
    &lt;td&gt;['b', 'c', 'd'] &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;slice. Start index is missing &lt;/td&gt;
    &lt;td&gt;l[:4]&lt;/td&gt;
    &lt;td&gt; ['a', 'b', 'c', 'd']  Default is 0 if start index is omitted &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;slice. End index is missing &lt;/td&gt;
    &lt;td&gt;l[1:]&lt;/td&gt;
    &lt;td&gt; ['b', 'c', 'd', 'e'] Default is length of the list if end index is omitted&lt;/td&gt;
  &lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;slice. Both index missing &lt;/td&gt;
    &lt;td&gt;l[:]&lt;/td&gt;
    &lt;td&gt; ['a','b','c','d','e'] &lt;/td&gt;
  &lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;Index of first occurrence of a char.  &lt;/td&gt;
    &lt;td&gt;print(l.index('d'))&lt;/td&gt;
    &lt;td&gt; 3 &lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;
== Changes done by Sonia ==
&lt;pre&gt;
import string

p1 = input(&quot;Enter first person name:&quot;)
p1 = p1.lower()
p1=  p1.replace(&quot; &quot;,&quot;&quot;)

p2 = input(&quot;Enter Second person name:&quot;)
p2 = p2.lower()
p2 =  p2.replace(&quot; &quot;,&quot;&quot;)

l1 = list(p1)
l2 = list(p2)

proceed = True
while proceed:
   for i in l1:
        if i in l2:
            c=i
            l1.remove(c)
            l2.remove(c)
            proceed=True
            break
        else:
            proceed=False
    
count = len(l1) + len(l2)
result = ['Friends','Love','Affection','Marriage','Enemy','Sibling']

while len(result) &gt; 1 :
    split_index = (count%len(result)) -1
    if split_index &gt;= 0 :
        right = result[split_index + 1 :]
        left = result[:split_index]
        result = right + left
    else :
        result = result[:len(result) -1]
print(result[0])
&lt;/pre&gt;

Output:

[[File:flameOutput.png]]
=FLAMES(a Fun game) :By SAURAV=
== code==

def Count_uncommon_char(l1,l2):
    for i in (l1):
        for j in (l2):
            if j==i:
                l1.remove(i)
                l2.remove(j)
                break
    l=l1+l2
    return (len(l))      
     
p1=input(&quot;Enter first person your name:&quot;)
p1=p1.upper()
p1=p1.replace(&quot; &quot;,&quot;&quot;)
p2=input(&quot;Enter second person your name:&quot;)
p2=p2.upper()
p2=p2.replace(&quot; &quot;,&quot;&quot;)
l1=list(p1)
l2=list(p2)
result=['Frieand','Love','Affaction','marry','Enemy','siblings']
while(len(result)&gt;1):
    c=Count_uncommon_char(l1,l2)
    c=c%len(result)-1
    if c==-1:
        result=result[:len(result)-1]
    else:
        result=result[c+1:]+result[:c]
print(result[0])

==OUTPUT:==
Enter first person your name:ram

Enter second person your name:sita
Frieand
Enter first person your name:radha

Enter second person your name:mohan
marry

= Image Compression =
Suppose you have a web page with lots of images.  It will take more time to download.  To make downloading faster, either you remove the images or reduce the size of the images.  Both methods will not give a good or required result.  Instead you can do &lt;b&gt; Image Compression&lt;/b&gt;
==NumPy Module==
NumPy is a module for Python. The name is an acronym for &quot;Numeric Python&quot;. It enriches Python with powerful data structures, implementing multi-dimensional arrays and matrices. To work with Artificial Intelligence, Machine Learning or Deep Learning NumPy is required.

&lt;b&gt; How is it superior to List &lt;/b&gt;
Operations on numpy arrays and matrices are easier than Lists.
Consider  the following

cvalues = [22.1, 22.8, 21.9, 22.5, 22.7, 22.3, 21.8, 21.2, 22.9, 22.1]

C = np.array(cvalues)

We would like to find the values into degrees Fahrenheit. This can be easily accomplished using a simple scalar multiplication:

print(C * 9 / 5 + 32)

Using Lists, it should have been

 fvalues = [ x*9/5 + 32 for x in cvalues] 

&lt;b&gt; Operations on numpy &lt;/b&gt;
&lt;table width=&quot;200&quot; border=&quot;1&quot;&gt;
  &lt;tr&gt;
    &lt;th scope=&quot;col&quot;&gt;Operations&lt;/th&gt;
    &lt;th scope=&quot;col&quot;&gt;Descriptions&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;import numpy as np &lt;/td&gt;
    &lt;td&gt;numpy is imported and can be accessed with a short name np&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;a=np.array([1,2,3])&lt;/td&gt;
    &lt;td&gt;One dimensional array 'a' is created&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;print(type(a))&lt;/td&gt;
    &lt;td&gt;&lt;class 'numpy.ndarray'&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;print(a.shape)&lt;/td&gt;
    &lt;td&gt;(3,)&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;print (a[0],a[1],a[2])&lt;/td&gt;
    &lt;td&gt;1 2 3&lt;/td&gt;
  &lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;b=np.array([[1,2,3],[4,5,6]])&lt;/td&gt;
    &lt;td&gt;Two dimensional array 'b' is created&lt;/td&gt;
  &lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;print(b.shape)&lt;/td&gt;
    &lt;td&gt;(2,3)&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;
[[#Top]]
=== NumPy Examples ===
importing numpy module is common to following examples.
&lt;pre&gt;import numpy as np&lt;/pre&gt;

'''Example: Print NumPy Array'''
&lt;pre&gt;
#pass list as argument to np.array
a=np.array([1,2,3])
print(a)
#Output: [1 2 3]
&lt;/pre&gt;

'''Example: Print type of numpy array'''
&lt;pre&gt;
#type of numpy array
print(type(a))
#Output: &lt;class 'numpy.ndarray'&gt;
&lt;/pre&gt;

'''Example: Print shape i.e.size of numpy array'''
&lt;pre&gt;
#shape of numpy array
print(a.shape)
#Output: (3,)
&lt;/pre&gt;

'''Example: Print elements of numpy using indexes'''
&lt;pre&gt;
#print elements of numpy using indexes
print(a[0], a[1], a[2])
#Output: 1 2 3
&lt;/pre&gt;

'''Example: Print shape of array: rows and columns'''
&lt;pre&gt;
b=np.array([[1,2,3],[4,5,6]])
print(b.shape)
#Output: (2, 3) - 2 rows and 3 columns
&lt;/pre&gt;

''' Example: 2x2 array of '0' '''
&lt;pre&gt;
#array of '0'
a=np.zeros((2,2))
print(a)
'''Output:
[[0. 0.]
 [0. 0.]]'''
&lt;/pre&gt;

''' Example: 2x2 array of '1' '''
&lt;pre&gt;
#array of '1'
b= np.ones((2,2))
print(b)
'''Output:
[[1. 1.]
 [1. 1.]]'''
&lt;/pre&gt;

''' Example: 2x2 array of '6' '''
&lt;pre&gt;
#2x2 array of 6
c= np.full((2,2),6)
print(c)
'''Output:
[[6 6]
 [6 6]]'''
&lt;/pre&gt;

''' Example: 2x2 array of random number '''
&lt;pre&gt;
#2x2 array of random number
d=np.random.random((2,2))
print(d)
'''Output:
 [[0.45937293 0.72546193]
 [0.28374715 0.63269858]]'''
&lt;/pre&gt;

''' Example: nxn array of random integer'''
&lt;pre&gt;
#2x2 array of random integer
d=np.random.randint(0,5,(2,5))
print(d)
'''Output:
  [[2 2 1 0 4]
   [3 1 0 3 4]]'''
Returns elements from 0 to 4
&lt;/pre&gt;

'''Example: int32 Data type of array'''
&lt;pre&gt;
x=np.array([1,2])

#data type of x
print(x.dtype)
#Output : int32
&lt;/pre&gt;

'''Example: float64 Data type of array'''
&lt;pre&gt;
y=np.array([1.2,3])
print(y.dtype)
#Output: float64
&lt;/pre&gt;

'''Example: Specifically setting Data type of array as int64'''
&lt;pre&gt;
x=np.array([1,2], dtype=np.int64)
print(x.dtype)
#Output: int64
&lt;/pre&gt;
[[#Top]]

===NumPy array operations===
&lt;pre&gt;
import numpy as np
x=np.array([[1,2],[3,4]],dtype=np.float64)
y=np.array([[5,6],[7,8]],dtype=np.float64)
print(x)
'''Output:
[[1. 2.]
 [3. 4.]]'''
print(y)
'''Output:
[[5. 6.]
 [7. 8.]]
'''

print(x+y)
print(np.add(x,y))

'''
Output:
[[ 6.  8.]
 [10. 12.]]

[[ 6.  8.]
 [10. 12.]]
 '''

print(x-y)
print(np.subtract(x,y))
'''Output:
[[-4. -4.]
 [-4. -4.]]
[[-4. -4.]
 [-4. -4.]]
'''
print(x*y)
print(np.multiply(x,y))
'''Output:
[[ 5. 12.]
 [21. 32.]]
[[ 5. 12.]
 [21. 32.]]
'''
print(x/y)
'''Output:
[[0.2        0.33333333]
 [0.42857143 0.5       ]]
'''
print(np.sqrt(x))
'''Output:
[[1.         1.41421356]
 [1.73205081 2.        ]]
'''
print(np.sqrt(y))
'''Output:
[[2.23606798 2.44948974]
 [2.64575131 2.82842712]]
'''
#Transposition of matrix
np.array([[1,2],[3,4]])
print(x.T)
'''Output:
[[1. 3.]
 [2. 4.]]
 '''
#sum of all elements
print(np.sum(x))#Output:10.0
print(np.sum(x,axis=0))#Output:[4. 6.]
print(np.sum(x,axis=1))#Output:[3. 7.]

&lt;/pre&gt;

==Lossy Compression==
Compression in which data is lost during compression.

==Lossless Compression==
Compression in which data is not lost during compression.

==Compression coding==
We will use the black and white ''lena'' image from net.
[[File:Lena-Original-Image.jpg]]

&lt;pre&gt;
import numpy
from PIL import Image
I=numpy.asanyarray(Image.open('Lena-Original-Image-512x512-pixels.png'))
print(I)
&lt;/pre&gt;
'''Output:
[[[159 159 159]
  [159 159 159]
  [158 158 158]
  ...
  [168 168 168]
  [151 151 151]
  [119 119 119]]

 [[159 159 159]
  [159 159 159]
  [158 158 158]
  ...
  [168 168 168]
  [151 151 151]
  [119 119 119]]

 [[159 159 159]
  [159 159 159]
  [158 158 158]
  ...
  [168 168 168]
  [151 151 151]
  [119 119 119]]

 ...

 [[ 20  20  20]
  [ 29  29  29]
  [ 25  25  25]
  ...
  [ 91  91  91]
  [ 87  87  87]
  [ 84  84  84]]

 [[ 22  22  22]
  [ 34  34  34]
  [ 30  30  30]
  ...
  [ 91  91  91]
  [ 93  93  93]
  [ 96  96  96]]

 [[ 22  22  22]
  [ 34  34  34]
  [ 30  30  30]
  ...
  [ 91  91  91]
  [ 93  93  93]
  [ 96  96  96]]]
'''

===Load the image===
&lt;pre&gt;
import numpy
from PIL import Image
im=Image.open('Lena-Original-Image-512x512-pixels.png')
pixelMap=im.load()
&lt;/pre&gt;

===Create blank image of same size and type===
&lt;pre&gt;
#mode is type of image
#blank image with same mode and size of original image
img=Image.new(im.mode,im.size)
pixelNew=img.load()
&lt;/pre&gt;

===Logic of Image  Compression===
We will convert image from 8-bit to 3-bit.
&lt;pre&gt;
'''
8bit to 3 bit
2^8&gt;2^3
2^5=32

for:
0-31 put 0
32-63 put 1
64-95 put 2
96-127 put 3
128-159 put 4
160-191 put 5
192-223 put 6
224-255 put 7
'''
&lt;/pre&gt;

===Coding===
&lt;pre&gt;
import numpy
from PIL import Image
im=Image.open('Lena-Original-Image.jpg')
pixelMap=im.load()

#mode is type of image
#blank image with same mode and size of original image
img=Image.new(im.mode,im.size)
pixelNew=img.load()

'''
8bit to 3 bit
2^8&gt;2^3
2^5=32

for:
0-31 put 0
32-63 put 1
64-95 put 2
96-127 put 3
128-159 put 4
160-191 put 5
192-223 put 6
224-255 put 7
'''

for i in range(img.size[0]):
    for j in range(img.size[1]):
        if(pixelMap[i,j]&gt;=0 and pixelMap[i,j]&lt;=31):
            pixelNew[i,j]=0
        elif(pixelMap[i,j]&gt;=32 and pixelMap[i,j]&lt;=63):
            pixelNew[i,j]=1
        elif(pixelMap[i,j]&gt;=64 and pixelMap[i,j]&lt;=95):
            pixelNew[i,j]=2
        elif(pixelMap[i,j]&gt;=96 and pixelMap[i,j]&lt;=127):
            pixelNew[i,j]=3
        elif(pixelMap[i,j]&gt;=128 and pixelMap[i,j]&lt;=159):
            pixelNew[i,j]=4
        elif(pixelMap[i,j]&gt;=160 and pixelMap[i,j]&lt;=191):
            pixelNew[i,j]=5    
        elif(pixelMap[i,j]&gt;=192 and pixelMap[i,j]&lt;=223):
            pixelNew[i,j]=6
        elif(pixelMap[i,j]&gt;=224 and pixelMap[i,j]&lt;=255):
            pixelNew[i,j]=7

img.save('lena2.jpg')
J=numpy.asanyarray(Image.open('lena2.jpg'))

&lt;/pre&gt;
[[File:lena2.jpg]]</text>
      <sha1>piav6tbk3t1b7kh6gjh4iem2e12pyok</sha1>
    </revision>
    <revision>
      <id>4158</id>
      <parentid>4149</parentid>
      <timestamp>2018-10-10T07:12:59Z</timestamp>
      <contributor>
        <username>Sachinkr</username>
        <id>1743</id>
      </contributor>
      <comment>/* FLAMES(a Fun game) :By SAURAV */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="14750">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_10 Contributors of this page]
==Week 10 Download URL==
https://onlinecourses.nptel.ac.in/noc18_cs35/unit?unit=30&amp;lesson=31

=FLAMES - a Childhood play=
In childhood, we might have played a game called FLAMES to find the relationship (illusion!!) between a boy and a girl.  

All you have to do is

&lt;b&gt; Steps : &lt;/b&gt;
 1. write their names and strike out the common characters that occur in both their names.
 2. Count the remaining letters (SAY X)
 3. Write the word FLAMES and start counting from F and strike out the X&lt;sup&gt;th&lt;/sup&gt; letter till only one character remains
 4. If it is F - then the two are Friends. L - Love, A - Affection,  M - Marriage  E- Enemy S- Sister

&lt;table width=&quot;449&quot; height=&quot;116&quot; border=&quot;1&quot;&gt;
 &lt;tr&gt;
    &lt;td&gt;[[File:Flamestep1.JPG|300px]]&lt;/td&gt;
    &lt;td&gt;[[File:Flamestep2.JPG|300px]]&lt;/td&gt;
    &lt;td&gt;[[File:flamestep3.JPG|300px]]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td width = 200&gt;Remaining No. of Characters = 7&lt;/td&gt;
    &lt;td width = 200&gt;Counting from F, wrap over and strike the 7&lt;SUP&gt;th&lt;/SUP&gt; letter&lt;/td&gt;
    &lt;td width = 200&gt;The remaining letter denotes the relationship&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;
== Refresh the operations on Strings and Lists ==
&lt;table width=&quot;200&quot; border=&quot;1&quot;&gt;
  &lt;tr&gt;
    &lt;th scope=&quot;col&quot; width=100&gt;Functions&lt;/th&gt;
    &lt;th scope=&quot;col&quot; width=100&gt;Example&lt;/th&gt;
    &lt;th scope=&quot;col&quot; width=100&gt;Result&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;import &lt;/td&gt;
    &lt;td&gt;import string&lt;/td&gt;
    &lt;td&gt;import string module&lt;/td&gt;
  &lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;input a string&lt;/td&gt;
    &lt;td&gt;s = input()&lt;/td&gt;
    &lt;td&gt;input a string to the variable s&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Convert to lower case&lt;/td&gt;
    &lt;td&gt;print(s.lower())&lt;/td&gt;
    &lt;td &gt; raj &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Convert to upper case&lt;/td&gt;
    &lt;td&gt;print(s.upper())&lt;/td&gt;
    &lt;td&gt; RAJ&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Convert the string to list&lt;/td&gt;
    &lt;td&gt;s1 = list(s)&lt;/td&gt;
    &lt;td&gt;s1 will be ['R','a','j']&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Replace a character&lt;/td&gt;
    &lt;td&gt;print(s.replace(&quot;j&quot;,&quot;#&quot;))&lt;/td&gt;
    &lt;td&gt;'Ra#' .Note: the content of s is not changed.&lt;/td&gt;
  &lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;Replace more than one character&lt;/td&gt;
    &lt;td&gt;print(s.replace(&quot;aj&quot;,&quot;#&quot;))&lt;/td&gt;
    &lt;td&gt;'R#'&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;slice. l = ['a','b','c','d','e']&lt;/td&gt;
    &lt;td&gt;l[1:4]&lt;/td&gt;
    &lt;td&gt;['b', 'c', 'd'] &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;slice. Start index is missing &lt;/td&gt;
    &lt;td&gt;l[:4]&lt;/td&gt;
    &lt;td&gt; ['a', 'b', 'c', 'd']  Default is 0 if start index is omitted &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;slice. End index is missing &lt;/td&gt;
    &lt;td&gt;l[1:]&lt;/td&gt;
    &lt;td&gt; ['b', 'c', 'd', 'e'] Default is length of the list if end index is omitted&lt;/td&gt;
  &lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;slice. Both index missing &lt;/td&gt;
    &lt;td&gt;l[:]&lt;/td&gt;
    &lt;td&gt; ['a','b','c','d','e'] &lt;/td&gt;
  &lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;Index of first occurrence of a char.  &lt;/td&gt;
    &lt;td&gt;print(l.index('d'))&lt;/td&gt;
    &lt;td&gt; 3 &lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;
== Changes done by Sonia ==
&lt;pre&gt;
import string

p1 = input(&quot;Enter first person name:&quot;)
p1 = p1.lower()
p1=  p1.replace(&quot; &quot;,&quot;&quot;)

p2 = input(&quot;Enter Second person name:&quot;)
p2 = p2.lower()
p2 =  p2.replace(&quot; &quot;,&quot;&quot;)

l1 = list(p1)
l2 = list(p2)

proceed = True
while proceed:
   for i in l1:
        if i in l2:
            c=i
            l1.remove(c)
            l2.remove(c)
            proceed=True
            break
        else:
            proceed=False
    
count = len(l1) + len(l2)
result = ['Friends','Love','Affection','Marriage','Enemy','Sibling']

while len(result) &gt; 1 :
    split_index = (count%len(result)) -1
    if split_index &gt;= 0 :
        right = result[split_index + 1 :]
        left = result[:split_index]
        result = right + left
    else :
        result = result[:len(result) -1]
print(result[0])
&lt;/pre&gt;

Output:

[[File:flameOutput.png]]
=FLAMES(a Fun game) :By SAURAV=
== code==

def Count_uncommon_char(l1,l2):
    for i in (l1):
        for j in (l2):
            if j==i:
                l1.remove(i)
                l2.remove(j)
                break
    l=l1+l2
    return (len(l))      
     
p1=input(&quot;Enter first person your name:&quot;)
p1=p1.upper()
p1=p1.replace(&quot; &quot;,&quot;&quot;)
p2=input(&quot;Enter second person your name:&quot;)
p2=p2.upper()
p2=p2.replace(&quot; &quot;,&quot;&quot;)
l1=list(p1)
l2=list(p2)
result=['Frieand','Love','Affaction','marry','Enemy','siblings']
while(len(result)&gt;1):
    c=Count_uncommon_char(l1,l2)
    c=c%len(result)-1
    if c==-1:
        result=result[:len(result)-1]
    else:
        result=result[c+1:]+result[:c]
print(result[0])

==OUTPUT:==
Enter first person your name:ram

Enter second person your name:sita
Frieand
Enter first person your name:radha

Enter second person your name:mohan
marry


==Flames Game by Sachin==






&lt;pre&gt;
print('''
      
  _____ _                              ____                      
 |  ___| | __ _ _ __ ___   ___  ___   / ___| __ _ _ __ ___   ___ 
 | |_  | |/ _` | '_ ` _ \ / _ \/ __| | |  _ / _` | '_ ` _ \ / _ \
 |  _| | | (_| | | | | | |  __/\__ \ | |_| | (_| | | | | | |  __/
 |_|   |_|\__,_|_| |_| |_|\___||___/  \____|\__,_|_| |_| |_|\___|
                                                                 

''')

def remove_extra(name):    
    while (&quot; &quot; in name) or (&quot;.&quot; in name):
        if &quot; &quot; in name:
            name.remove(&quot; &quot;)
        elif &quot;.&quot; in name:
            name.remove(&quot;.&quot;)
    return name
def remove_common(player, act):
    if len(player) &gt;= len(act):
        for item in act:
            if (item in player)==True:
                player.remove(item)
                act.remove(item)
    else:
        for item in player:
            if (item in act)==True:
                player.remove(item)
                act.remove(item)
    return player, act
def relation(temp):
    temp.upper()
    if temp == &quot;F&quot;:
        return &quot;Friendship&quot;
    elif temp == &quot;L&quot;:
        return &quot;Lovers&quot;
    elif temp == &quot;A&quot;:
        return &quot;Affection&quot;
    elif temp == &quot;M&quot;:
        return &quot;Marriage&quot;
    elif temp == &quot;E&quot;:
        return &quot;Enemy&quot;
    else:
        return &quot;Sibling&quot;
willing = True
while willing:               
    key = list(&quot;FLAMES&quot;)   
    player = list(input(&quot;Enter you name \n&quot;).lower())
    act = list(input(&quot;Enter your favourite actress/actor name \n&quot;).lower())
    act_copy = act.copy()
    player = remove_extra(player)
    act = remove_extra(act)
    player, act = remove_common(player, act)
    total_len = len(player)+len(act)
    if total_len == 0:
        print(&quot;\nThe secret relation between you and&quot;, &quot;&quot;.join(x for x in act_copy),&quot;is : Complicated \a&quot;)
    else:        
        while len(key) != 1:
            count = 0
            i = 0
            while count != total_len: 
                if i &gt; key.index(key[-1]):
                    i = 0
                    temp = key[i]
                else:
                    temp = key[i]
                i+=1
                count+=1
            key.remove(temp)
        print(&quot;\nThe secret relation between you and&quot;, &quot;&quot;.join(x for x in act_copy),&quot;is :&quot;,relation(key[0]), &quot;\a&quot;)
    while True:
        decision = input(&quot;\nDo you wanna play again? Yes/No\n&quot;)
        decision.lower()
        if decision == &quot;yes&quot;:
            break
        elif decision == &quot;no&quot;:
            willing= False
            break
        else:
            print(&quot;Please enter valid input&quot;)
&lt;/pre&gt;

= Image Compression =
Suppose you have a web page with lots of images.  It will take more time to download.  To make downloading faster, either you remove the images or reduce the size of the images.  Both methods will not give a good or required result.  Instead you can do &lt;b&gt; Image Compression&lt;/b&gt;
==NumPy Module==
NumPy is a module for Python. The name is an acronym for &quot;Numeric Python&quot;. It enriches Python with powerful data structures, implementing multi-dimensional arrays and matrices. To work with Artificial Intelligence, Machine Learning or Deep Learning NumPy is required.

&lt;b&gt; How is it superior to List &lt;/b&gt;
Operations on numpy arrays and matrices are easier than Lists.
Consider  the following

cvalues = [22.1, 22.8, 21.9, 22.5, 22.7, 22.3, 21.8, 21.2, 22.9, 22.1]

C = np.array(cvalues)

We would like to find the values into degrees Fahrenheit. This can be easily accomplished using a simple scalar multiplication:

print(C * 9 / 5 + 32)

Using Lists, it should have been

 fvalues = [ x*9/5 + 32 for x in cvalues] 

&lt;b&gt; Operations on numpy &lt;/b&gt;
&lt;table width=&quot;200&quot; border=&quot;1&quot;&gt;
  &lt;tr&gt;
    &lt;th scope=&quot;col&quot;&gt;Operations&lt;/th&gt;
    &lt;th scope=&quot;col&quot;&gt;Descriptions&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;import numpy as np &lt;/td&gt;
    &lt;td&gt;numpy is imported and can be accessed with a short name np&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;a=np.array([1,2,3])&lt;/td&gt;
    &lt;td&gt;One dimensional array 'a' is created&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;print(type(a))&lt;/td&gt;
    &lt;td&gt;&lt;class 'numpy.ndarray'&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;print(a.shape)&lt;/td&gt;
    &lt;td&gt;(3,)&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;print (a[0],a[1],a[2])&lt;/td&gt;
    &lt;td&gt;1 2 3&lt;/td&gt;
  &lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;b=np.array([[1,2,3],[4,5,6]])&lt;/td&gt;
    &lt;td&gt;Two dimensional array 'b' is created&lt;/td&gt;
  &lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;print(b.shape)&lt;/td&gt;
    &lt;td&gt;(2,3)&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;
[[#Top]]
=== NumPy Examples ===
importing numpy module is common to following examples.
&lt;pre&gt;import numpy as np&lt;/pre&gt;

'''Example: Print NumPy Array'''
&lt;pre&gt;
#pass list as argument to np.array
a=np.array([1,2,3])
print(a)
#Output: [1 2 3]
&lt;/pre&gt;

'''Example: Print type of numpy array'''
&lt;pre&gt;
#type of numpy array
print(type(a))
#Output: &lt;class 'numpy.ndarray'&gt;
&lt;/pre&gt;

'''Example: Print shape i.e.size of numpy array'''
&lt;pre&gt;
#shape of numpy array
print(a.shape)
#Output: (3,)
&lt;/pre&gt;

'''Example: Print elements of numpy using indexes'''
&lt;pre&gt;
#print elements of numpy using indexes
print(a[0], a[1], a[2])
#Output: 1 2 3
&lt;/pre&gt;

'''Example: Print shape of array: rows and columns'''
&lt;pre&gt;
b=np.array([[1,2,3],[4,5,6]])
print(b.shape)
#Output: (2, 3) - 2 rows and 3 columns
&lt;/pre&gt;

''' Example: 2x2 array of '0' '''
&lt;pre&gt;
#array of '0'
a=np.zeros((2,2))
print(a)
'''Output:
[[0. 0.]
 [0. 0.]]'''
&lt;/pre&gt;

''' Example: 2x2 array of '1' '''
&lt;pre&gt;
#array of '1'
b= np.ones((2,2))
print(b)
'''Output:
[[1. 1.]
 [1. 1.]]'''
&lt;/pre&gt;

''' Example: 2x2 array of '6' '''
&lt;pre&gt;
#2x2 array of 6
c= np.full((2,2),6)
print(c)
'''Output:
[[6 6]
 [6 6]]'''
&lt;/pre&gt;

''' Example: 2x2 array of random number '''
&lt;pre&gt;
#2x2 array of random number
d=np.random.random((2,2))
print(d)
'''Output:
 [[0.45937293 0.72546193]
 [0.28374715 0.63269858]]'''
&lt;/pre&gt;

''' Example: nxn array of random integer'''
&lt;pre&gt;
#2x2 array of random integer
d=np.random.randint(0,5,(2,5))
print(d)
'''Output:
  [[2 2 1 0 4]
   [3 1 0 3 4]]'''
Returns elements from 0 to 4
&lt;/pre&gt;

'''Example: int32 Data type of array'''
&lt;pre&gt;
x=np.array([1,2])

#data type of x
print(x.dtype)
#Output : int32
&lt;/pre&gt;

'''Example: float64 Data type of array'''
&lt;pre&gt;
y=np.array([1.2,3])
print(y.dtype)
#Output: float64
&lt;/pre&gt;

'''Example: Specifically setting Data type of array as int64'''
&lt;pre&gt;
x=np.array([1,2], dtype=np.int64)
print(x.dtype)
#Output: int64
&lt;/pre&gt;
[[#Top]]

===NumPy array operations===
&lt;pre&gt;
import numpy as np
x=np.array([[1,2],[3,4]],dtype=np.float64)
y=np.array([[5,6],[7,8]],dtype=np.float64)
print(x)
'''Output:
[[1. 2.]
 [3. 4.]]'''
print(y)
'''Output:
[[5. 6.]
 [7. 8.]]
'''

print(x+y)
print(np.add(x,y))

'''
Output:
[[ 6.  8.]
 [10. 12.]]

[[ 6.  8.]
 [10. 12.]]
 '''

print(x-y)
print(np.subtract(x,y))
'''Output:
[[-4. -4.]
 [-4. -4.]]
[[-4. -4.]
 [-4. -4.]]
'''
print(x*y)
print(np.multiply(x,y))
'''Output:
[[ 5. 12.]
 [21. 32.]]
[[ 5. 12.]
 [21. 32.]]
'''
print(x/y)
'''Output:
[[0.2        0.33333333]
 [0.42857143 0.5       ]]
'''
print(np.sqrt(x))
'''Output:
[[1.         1.41421356]
 [1.73205081 2.        ]]
'''
print(np.sqrt(y))
'''Output:
[[2.23606798 2.44948974]
 [2.64575131 2.82842712]]
'''
#Transposition of matrix
np.array([[1,2],[3,4]])
print(x.T)
'''Output:
[[1. 3.]
 [2. 4.]]
 '''
#sum of all elements
print(np.sum(x))#Output:10.0
print(np.sum(x,axis=0))#Output:[4. 6.]
print(np.sum(x,axis=1))#Output:[3. 7.]

&lt;/pre&gt;

==Lossy Compression==
Compression in which data is lost during compression.

==Lossless Compression==
Compression in which data is not lost during compression.

==Compression coding==
We will use the black and white ''lena'' image from net.
[[File:Lena-Original-Image.jpg]]

&lt;pre&gt;
import numpy
from PIL import Image
I=numpy.asanyarray(Image.open('Lena-Original-Image-512x512-pixels.png'))
print(I)
&lt;/pre&gt;
'''Output:
[[[159 159 159]
  [159 159 159]
  [158 158 158]
  ...
  [168 168 168]
  [151 151 151]
  [119 119 119]]

 [[159 159 159]
  [159 159 159]
  [158 158 158]
  ...
  [168 168 168]
  [151 151 151]
  [119 119 119]]

 [[159 159 159]
  [159 159 159]
  [158 158 158]
  ...
  [168 168 168]
  [151 151 151]
  [119 119 119]]

 ...

 [[ 20  20  20]
  [ 29  29  29]
  [ 25  25  25]
  ...
  [ 91  91  91]
  [ 87  87  87]
  [ 84  84  84]]

 [[ 22  22  22]
  [ 34  34  34]
  [ 30  30  30]
  ...
  [ 91  91  91]
  [ 93  93  93]
  [ 96  96  96]]

 [[ 22  22  22]
  [ 34  34  34]
  [ 30  30  30]
  ...
  [ 91  91  91]
  [ 93  93  93]
  [ 96  96  96]]]
'''

===Load the image===
&lt;pre&gt;
import numpy
from PIL import Image
im=Image.open('Lena-Original-Image-512x512-pixels.png')
pixelMap=im.load()
&lt;/pre&gt;

===Create blank image of same size and type===
&lt;pre&gt;
#mode is type of image
#blank image with same mode and size of original image
img=Image.new(im.mode,im.size)
pixelNew=img.load()
&lt;/pre&gt;

===Logic of Image  Compression===
We will convert image from 8-bit to 3-bit.
&lt;pre&gt;
'''
8bit to 3 bit
2^8&gt;2^3
2^5=32

for:
0-31 put 0
32-63 put 1
64-95 put 2
96-127 put 3
128-159 put 4
160-191 put 5
192-223 put 6
224-255 put 7
'''
&lt;/pre&gt;

===Coding===
&lt;pre&gt;
import numpy
from PIL import Image
im=Image.open('Lena-Original-Image.jpg')
pixelMap=im.load()

#mode is type of image
#blank image with same mode and size of original image
img=Image.new(im.mode,im.size)
pixelNew=img.load()

'''
8bit to 3 bit
2^8&gt;2^3
2^5=32

for:
0-31 put 0
32-63 put 1
64-95 put 2
96-127 put 3
128-159 put 4
160-191 put 5
192-223 put 6
224-255 put 7
'''

for i in range(img.size[0]):
    for j in range(img.size[1]):
        if(pixelMap[i,j]&gt;=0 and pixelMap[i,j]&lt;=31):
            pixelNew[i,j]=0
        elif(pixelMap[i,j]&gt;=32 and pixelMap[i,j]&lt;=63):
            pixelNew[i,j]=1
        elif(pixelMap[i,j]&gt;=64 and pixelMap[i,j]&lt;=95):
            pixelNew[i,j]=2
        elif(pixelMap[i,j]&gt;=96 and pixelMap[i,j]&lt;=127):
            pixelNew[i,j]=3
        elif(pixelMap[i,j]&gt;=128 and pixelMap[i,j]&lt;=159):
            pixelNew[i,j]=4
        elif(pixelMap[i,j]&gt;=160 and pixelMap[i,j]&lt;=191):
            pixelNew[i,j]=5    
        elif(pixelMap[i,j]&gt;=192 and pixelMap[i,j]&lt;=223):
            pixelNew[i,j]=6
        elif(pixelMap[i,j]&gt;=224 and pixelMap[i,j]&lt;=255):
            pixelNew[i,j]=7

img.save('lena2.jpg')
J=numpy.asanyarray(Image.open('lena2.jpg'))

&lt;/pre&gt;
[[File:lena2.jpg]]</text>
      <sha1>5n1z4jon8swb3bxp7eixtxgr3z68aeq</sha1>
    </revision>
    <revision>
      <id>4159</id>
      <parentid>4158</parentid>
      <timestamp>2018-10-10T07:14:43Z</timestamp>
      <contributor>
        <username>Sachinkr</username>
        <id>1743</id>
      </contributor>
      <comment>/* FLAMES(a Fun game) :By SAURAV */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="14753">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_10 Contributors of this page]
==Week 10 Download URL==
https://onlinecourses.nptel.ac.in/noc18_cs35/unit?unit=30&amp;lesson=31

=FLAMES - a Childhood play=
In childhood, we might have played a game called FLAMES to find the relationship (illusion!!) between a boy and a girl.  

All you have to do is

&lt;b&gt; Steps : &lt;/b&gt;
 1. write their names and strike out the common characters that occur in both their names.
 2. Count the remaining letters (SAY X)
 3. Write the word FLAMES and start counting from F and strike out the X&lt;sup&gt;th&lt;/sup&gt; letter till only one character remains
 4. If it is F - then the two are Friends. L - Love, A - Affection,  M - Marriage  E- Enemy S- Sister

&lt;table width=&quot;449&quot; height=&quot;116&quot; border=&quot;1&quot;&gt;
 &lt;tr&gt;
    &lt;td&gt;[[File:Flamestep1.JPG|300px]]&lt;/td&gt;
    &lt;td&gt;[[File:Flamestep2.JPG|300px]]&lt;/td&gt;
    &lt;td&gt;[[File:flamestep3.JPG|300px]]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td width = 200&gt;Remaining No. of Characters = 7&lt;/td&gt;
    &lt;td width = 200&gt;Counting from F, wrap over and strike the 7&lt;SUP&gt;th&lt;/SUP&gt; letter&lt;/td&gt;
    &lt;td width = 200&gt;The remaining letter denotes the relationship&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;
== Refresh the operations on Strings and Lists ==
&lt;table width=&quot;200&quot; border=&quot;1&quot;&gt;
  &lt;tr&gt;
    &lt;th scope=&quot;col&quot; width=100&gt;Functions&lt;/th&gt;
    &lt;th scope=&quot;col&quot; width=100&gt;Example&lt;/th&gt;
    &lt;th scope=&quot;col&quot; width=100&gt;Result&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;import &lt;/td&gt;
    &lt;td&gt;import string&lt;/td&gt;
    &lt;td&gt;import string module&lt;/td&gt;
  &lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;input a string&lt;/td&gt;
    &lt;td&gt;s = input()&lt;/td&gt;
    &lt;td&gt;input a string to the variable s&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Convert to lower case&lt;/td&gt;
    &lt;td&gt;print(s.lower())&lt;/td&gt;
    &lt;td &gt; raj &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Convert to upper case&lt;/td&gt;
    &lt;td&gt;print(s.upper())&lt;/td&gt;
    &lt;td&gt; RAJ&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Convert the string to list&lt;/td&gt;
    &lt;td&gt;s1 = list(s)&lt;/td&gt;
    &lt;td&gt;s1 will be ['R','a','j']&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Replace a character&lt;/td&gt;
    &lt;td&gt;print(s.replace(&quot;j&quot;,&quot;#&quot;))&lt;/td&gt;
    &lt;td&gt;'Ra#' .Note: the content of s is not changed.&lt;/td&gt;
  &lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;Replace more than one character&lt;/td&gt;
    &lt;td&gt;print(s.replace(&quot;aj&quot;,&quot;#&quot;))&lt;/td&gt;
    &lt;td&gt;'R#'&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;slice. l = ['a','b','c','d','e']&lt;/td&gt;
    &lt;td&gt;l[1:4]&lt;/td&gt;
    &lt;td&gt;['b', 'c', 'd'] &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;slice. Start index is missing &lt;/td&gt;
    &lt;td&gt;l[:4]&lt;/td&gt;
    &lt;td&gt; ['a', 'b', 'c', 'd']  Default is 0 if start index is omitted &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;slice. End index is missing &lt;/td&gt;
    &lt;td&gt;l[1:]&lt;/td&gt;
    &lt;td&gt; ['b', 'c', 'd', 'e'] Default is length of the list if end index is omitted&lt;/td&gt;
  &lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;slice. Both index missing &lt;/td&gt;
    &lt;td&gt;l[:]&lt;/td&gt;
    &lt;td&gt; ['a','b','c','d','e'] &lt;/td&gt;
  &lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;Index of first occurrence of a char.  &lt;/td&gt;
    &lt;td&gt;print(l.index('d'))&lt;/td&gt;
    &lt;td&gt; 3 &lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;
== Changes done by Sonia ==
&lt;pre&gt;
import string

p1 = input(&quot;Enter first person name:&quot;)
p1 = p1.lower()
p1=  p1.replace(&quot; &quot;,&quot;&quot;)

p2 = input(&quot;Enter Second person name:&quot;)
p2 = p2.lower()
p2 =  p2.replace(&quot; &quot;,&quot;&quot;)

l1 = list(p1)
l2 = list(p2)

proceed = True
while proceed:
   for i in l1:
        if i in l2:
            c=i
            l1.remove(c)
            l2.remove(c)
            proceed=True
            break
        else:
            proceed=False
    
count = len(l1) + len(l2)
result = ['Friends','Love','Affection','Marriage','Enemy','Sibling']

while len(result) &gt; 1 :
    split_index = (count%len(result)) -1
    if split_index &gt;= 0 :
        right = result[split_index + 1 :]
        left = result[:split_index]
        result = right + left
    else :
        result = result[:len(result) -1]
print(result[0])
&lt;/pre&gt;

Output:

[[File:flameOutput.png]]
==FLAMES(a Fun game) :By SAURAV==
'''code'''

def Count_uncommon_char(l1,l2):
    for i in (l1):
        for j in (l2):
            if j==i:
                l1.remove(i)
                l2.remove(j)
                break
    l=l1+l2
    return (len(l))      
     
p1=input(&quot;Enter first person your name:&quot;)
p1=p1.upper()
p1=p1.replace(&quot; &quot;,&quot;&quot;)
p2=input(&quot;Enter second person your name:&quot;)
p2=p2.upper()
p2=p2.replace(&quot; &quot;,&quot;&quot;)
l1=list(p1)
l2=list(p2)
result=['Frieand','Love','Affaction','marry','Enemy','siblings']
while(len(result)&gt;1):
    c=Count_uncommon_char(l1,l2)
    c=c%len(result)-1
    if c==-1:
        result=result[:len(result)-1]
    else:
        result=result[c+1:]+result[:c]
print(result[0])

==OUTPUT:==
Enter first person your name:ram

Enter second person your name:sita
Frieand
Enter first person your name:radha

Enter second person your name:mohan
marry


==Flames Game by Sachin==






&lt;pre&gt;
print('''
      
  _____ _                              ____                      
 |  ___| | __ _ _ __ ___   ___  ___   / ___| __ _ _ __ ___   ___ 
 | |_  | |/ _` | '_ ` _ \ / _ \/ __| | |  _ / _` | '_ ` _ \ / _ \
 |  _| | | (_| | | | | | |  __/\__ \ | |_| | (_| | | | | | |  __/
 |_|   |_|\__,_|_| |_| |_|\___||___/  \____|\__,_|_| |_| |_|\___|
                                                                 

''')

def remove_extra(name):    
    while (&quot; &quot; in name) or (&quot;.&quot; in name):
        if &quot; &quot; in name:
            name.remove(&quot; &quot;)
        elif &quot;.&quot; in name:
            name.remove(&quot;.&quot;)
    return name
def remove_common(player, act):
    if len(player) &gt;= len(act):
        for item in act:
            if (item in player)==True:
                player.remove(item)
                act.remove(item)
    else:
        for item in player:
            if (item in act)==True:
                player.remove(item)
                act.remove(item)
    return player, act
def relation(temp):
    temp.upper()
    if temp == &quot;F&quot;:
        return &quot;Friendship&quot;
    elif temp == &quot;L&quot;:
        return &quot;Lovers&quot;
    elif temp == &quot;A&quot;:
        return &quot;Affection&quot;
    elif temp == &quot;M&quot;:
        return &quot;Marriage&quot;
    elif temp == &quot;E&quot;:
        return &quot;Enemy&quot;
    else:
        return &quot;Sibling&quot;
willing = True
while willing:               
    key = list(&quot;FLAMES&quot;)   
    player = list(input(&quot;Enter you name \n&quot;).lower())
    act = list(input(&quot;Enter your favourite actress/actor name \n&quot;).lower())
    act_copy = act.copy()
    player = remove_extra(player)
    act = remove_extra(act)
    player, act = remove_common(player, act)
    total_len = len(player)+len(act)
    if total_len == 0:
        print(&quot;\nThe secret relation between you and&quot;, &quot;&quot;.join(x for x in act_copy),&quot;is : Complicated \a&quot;)
    else:        
        while len(key) != 1:
            count = 0
            i = 0
            while count != total_len: 
                if i &gt; key.index(key[-1]):
                    i = 0
                    temp = key[i]
                else:
                    temp = key[i]
                i+=1
                count+=1
            key.remove(temp)
        print(&quot;\nThe secret relation between you and&quot;, &quot;&quot;.join(x for x in act_copy),&quot;is :&quot;,relation(key[0]), &quot;\a&quot;)
    while True:
        decision = input(&quot;\nDo you wanna play again? Yes/No\n&quot;)
        decision.lower()
        if decision == &quot;yes&quot;:
            break
        elif decision == &quot;no&quot;:
            willing= False
            break
        else:
            print(&quot;Please enter valid input&quot;)
&lt;/pre&gt;

= Image Compression =
Suppose you have a web page with lots of images.  It will take more time to download.  To make downloading faster, either you remove the images or reduce the size of the images.  Both methods will not give a good or required result.  Instead you can do &lt;b&gt; Image Compression&lt;/b&gt;
==NumPy Module==
NumPy is a module for Python. The name is an acronym for &quot;Numeric Python&quot;. It enriches Python with powerful data structures, implementing multi-dimensional arrays and matrices. To work with Artificial Intelligence, Machine Learning or Deep Learning NumPy is required.

&lt;b&gt; How is it superior to List &lt;/b&gt;
Operations on numpy arrays and matrices are easier than Lists.
Consider  the following

cvalues = [22.1, 22.8, 21.9, 22.5, 22.7, 22.3, 21.8, 21.2, 22.9, 22.1]

C = np.array(cvalues)

We would like to find the values into degrees Fahrenheit. This can be easily accomplished using a simple scalar multiplication:

print(C * 9 / 5 + 32)

Using Lists, it should have been

 fvalues = [ x*9/5 + 32 for x in cvalues] 

&lt;b&gt; Operations on numpy &lt;/b&gt;
&lt;table width=&quot;200&quot; border=&quot;1&quot;&gt;
  &lt;tr&gt;
    &lt;th scope=&quot;col&quot;&gt;Operations&lt;/th&gt;
    &lt;th scope=&quot;col&quot;&gt;Descriptions&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;import numpy as np &lt;/td&gt;
    &lt;td&gt;numpy is imported and can be accessed with a short name np&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;a=np.array([1,2,3])&lt;/td&gt;
    &lt;td&gt;One dimensional array 'a' is created&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;print(type(a))&lt;/td&gt;
    &lt;td&gt;&lt;class 'numpy.ndarray'&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;print(a.shape)&lt;/td&gt;
    &lt;td&gt;(3,)&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;print (a[0],a[1],a[2])&lt;/td&gt;
    &lt;td&gt;1 2 3&lt;/td&gt;
  &lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;b=np.array([[1,2,3],[4,5,6]])&lt;/td&gt;
    &lt;td&gt;Two dimensional array 'b' is created&lt;/td&gt;
  &lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;print(b.shape)&lt;/td&gt;
    &lt;td&gt;(2,3)&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;
[[#Top]]
=== NumPy Examples ===
importing numpy module is common to following examples.
&lt;pre&gt;import numpy as np&lt;/pre&gt;

'''Example: Print NumPy Array'''
&lt;pre&gt;
#pass list as argument to np.array
a=np.array([1,2,3])
print(a)
#Output: [1 2 3]
&lt;/pre&gt;

'''Example: Print type of numpy array'''
&lt;pre&gt;
#type of numpy array
print(type(a))
#Output: &lt;class 'numpy.ndarray'&gt;
&lt;/pre&gt;

'''Example: Print shape i.e.size of numpy array'''
&lt;pre&gt;
#shape of numpy array
print(a.shape)
#Output: (3,)
&lt;/pre&gt;

'''Example: Print elements of numpy using indexes'''
&lt;pre&gt;
#print elements of numpy using indexes
print(a[0], a[1], a[2])
#Output: 1 2 3
&lt;/pre&gt;

'''Example: Print shape of array: rows and columns'''
&lt;pre&gt;
b=np.array([[1,2,3],[4,5,6]])
print(b.shape)
#Output: (2, 3) - 2 rows and 3 columns
&lt;/pre&gt;

''' Example: 2x2 array of '0' '''
&lt;pre&gt;
#array of '0'
a=np.zeros((2,2))
print(a)
'''Output:
[[0. 0.]
 [0. 0.]]'''
&lt;/pre&gt;

''' Example: 2x2 array of '1' '''
&lt;pre&gt;
#array of '1'
b= np.ones((2,2))
print(b)
'''Output:
[[1. 1.]
 [1. 1.]]'''
&lt;/pre&gt;

''' Example: 2x2 array of '6' '''
&lt;pre&gt;
#2x2 array of 6
c= np.full((2,2),6)
print(c)
'''Output:
[[6 6]
 [6 6]]'''
&lt;/pre&gt;

''' Example: 2x2 array of random number '''
&lt;pre&gt;
#2x2 array of random number
d=np.random.random((2,2))
print(d)
'''Output:
 [[0.45937293 0.72546193]
 [0.28374715 0.63269858]]'''
&lt;/pre&gt;

''' Example: nxn array of random integer'''
&lt;pre&gt;
#2x2 array of random integer
d=np.random.randint(0,5,(2,5))
print(d)
'''Output:
  [[2 2 1 0 4]
   [3 1 0 3 4]]'''
Returns elements from 0 to 4
&lt;/pre&gt;

'''Example: int32 Data type of array'''
&lt;pre&gt;
x=np.array([1,2])

#data type of x
print(x.dtype)
#Output : int32
&lt;/pre&gt;

'''Example: float64 Data type of array'''
&lt;pre&gt;
y=np.array([1.2,3])
print(y.dtype)
#Output: float64
&lt;/pre&gt;

'''Example: Specifically setting Data type of array as int64'''
&lt;pre&gt;
x=np.array([1,2], dtype=np.int64)
print(x.dtype)
#Output: int64
&lt;/pre&gt;
[[#Top]]

===NumPy array operations===
&lt;pre&gt;
import numpy as np
x=np.array([[1,2],[3,4]],dtype=np.float64)
y=np.array([[5,6],[7,8]],dtype=np.float64)
print(x)
'''Output:
[[1. 2.]
 [3. 4.]]'''
print(y)
'''Output:
[[5. 6.]
 [7. 8.]]
'''

print(x+y)
print(np.add(x,y))

'''
Output:
[[ 6.  8.]
 [10. 12.]]

[[ 6.  8.]
 [10. 12.]]
 '''

print(x-y)
print(np.subtract(x,y))
'''Output:
[[-4. -4.]
 [-4. -4.]]
[[-4. -4.]
 [-4. -4.]]
'''
print(x*y)
print(np.multiply(x,y))
'''Output:
[[ 5. 12.]
 [21. 32.]]
[[ 5. 12.]
 [21. 32.]]
'''
print(x/y)
'''Output:
[[0.2        0.33333333]
 [0.42857143 0.5       ]]
'''
print(np.sqrt(x))
'''Output:
[[1.         1.41421356]
 [1.73205081 2.        ]]
'''
print(np.sqrt(y))
'''Output:
[[2.23606798 2.44948974]
 [2.64575131 2.82842712]]
'''
#Transposition of matrix
np.array([[1,2],[3,4]])
print(x.T)
'''Output:
[[1. 3.]
 [2. 4.]]
 '''
#sum of all elements
print(np.sum(x))#Output:10.0
print(np.sum(x,axis=0))#Output:[4. 6.]
print(np.sum(x,axis=1))#Output:[3. 7.]

&lt;/pre&gt;

==Lossy Compression==
Compression in which data is lost during compression.

==Lossless Compression==
Compression in which data is not lost during compression.

==Compression coding==
We will use the black and white ''lena'' image from net.
[[File:Lena-Original-Image.jpg]]

&lt;pre&gt;
import numpy
from PIL import Image
I=numpy.asanyarray(Image.open('Lena-Original-Image-512x512-pixels.png'))
print(I)
&lt;/pre&gt;
'''Output:
[[[159 159 159]
  [159 159 159]
  [158 158 158]
  ...
  [168 168 168]
  [151 151 151]
  [119 119 119]]

 [[159 159 159]
  [159 159 159]
  [158 158 158]
  ...
  [168 168 168]
  [151 151 151]
  [119 119 119]]

 [[159 159 159]
  [159 159 159]
  [158 158 158]
  ...
  [168 168 168]
  [151 151 151]
  [119 119 119]]

 ...

 [[ 20  20  20]
  [ 29  29  29]
  [ 25  25  25]
  ...
  [ 91  91  91]
  [ 87  87  87]
  [ 84  84  84]]

 [[ 22  22  22]
  [ 34  34  34]
  [ 30  30  30]
  ...
  [ 91  91  91]
  [ 93  93  93]
  [ 96  96  96]]

 [[ 22  22  22]
  [ 34  34  34]
  [ 30  30  30]
  ...
  [ 91  91  91]
  [ 93  93  93]
  [ 96  96  96]]]
'''

===Load the image===
&lt;pre&gt;
import numpy
from PIL import Image
im=Image.open('Lena-Original-Image-512x512-pixels.png')
pixelMap=im.load()
&lt;/pre&gt;

===Create blank image of same size and type===
&lt;pre&gt;
#mode is type of image
#blank image with same mode and size of original image
img=Image.new(im.mode,im.size)
pixelNew=img.load()
&lt;/pre&gt;

===Logic of Image  Compression===
We will convert image from 8-bit to 3-bit.
&lt;pre&gt;
'''
8bit to 3 bit
2^8&gt;2^3
2^5=32

for:
0-31 put 0
32-63 put 1
64-95 put 2
96-127 put 3
128-159 put 4
160-191 put 5
192-223 put 6
224-255 put 7
'''
&lt;/pre&gt;

===Coding===
&lt;pre&gt;
import numpy
from PIL import Image
im=Image.open('Lena-Original-Image.jpg')
pixelMap=im.load()

#mode is type of image
#blank image with same mode and size of original image
img=Image.new(im.mode,im.size)
pixelNew=img.load()

'''
8bit to 3 bit
2^8&gt;2^3
2^5=32

for:
0-31 put 0
32-63 put 1
64-95 put 2
96-127 put 3
128-159 put 4
160-191 put 5
192-223 put 6
224-255 put 7
'''

for i in range(img.size[0]):
    for j in range(img.size[1]):
        if(pixelMap[i,j]&gt;=0 and pixelMap[i,j]&lt;=31):
            pixelNew[i,j]=0
        elif(pixelMap[i,j]&gt;=32 and pixelMap[i,j]&lt;=63):
            pixelNew[i,j]=1
        elif(pixelMap[i,j]&gt;=64 and pixelMap[i,j]&lt;=95):
            pixelNew[i,j]=2
        elif(pixelMap[i,j]&gt;=96 and pixelMap[i,j]&lt;=127):
            pixelNew[i,j]=3
        elif(pixelMap[i,j]&gt;=128 and pixelMap[i,j]&lt;=159):
            pixelNew[i,j]=4
        elif(pixelMap[i,j]&gt;=160 and pixelMap[i,j]&lt;=191):
            pixelNew[i,j]=5    
        elif(pixelMap[i,j]&gt;=192 and pixelMap[i,j]&lt;=223):
            pixelNew[i,j]=6
        elif(pixelMap[i,j]&gt;=224 and pixelMap[i,j]&lt;=255):
            pixelNew[i,j]=7

img.save('lena2.jpg')
J=numpy.asanyarray(Image.open('lena2.jpg'))

&lt;/pre&gt;
[[File:lena2.jpg]]</text>
      <sha1>4n908e2knzq6chsqcgzwfk9jjsht520</sha1>
    </revision>
    <revision>
      <id>4160</id>
      <parentid>4159</parentid>
      <timestamp>2018-10-10T07:15:11Z</timestamp>
      <contributor>
        <username>Sachinkr</username>
        <id>1743</id>
      </contributor>
      <comment>/* OUTPUT: */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="14754">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_10 Contributors of this page]
==Week 10 Download URL==
https://onlinecourses.nptel.ac.in/noc18_cs35/unit?unit=30&amp;lesson=31

=FLAMES - a Childhood play=
In childhood, we might have played a game called FLAMES to find the relationship (illusion!!) between a boy and a girl.  

All you have to do is

&lt;b&gt; Steps : &lt;/b&gt;
 1. write their names and strike out the common characters that occur in both their names.
 2. Count the remaining letters (SAY X)
 3. Write the word FLAMES and start counting from F and strike out the X&lt;sup&gt;th&lt;/sup&gt; letter till only one character remains
 4. If it is F - then the two are Friends. L - Love, A - Affection,  M - Marriage  E- Enemy S- Sister

&lt;table width=&quot;449&quot; height=&quot;116&quot; border=&quot;1&quot;&gt;
 &lt;tr&gt;
    &lt;td&gt;[[File:Flamestep1.JPG|300px]]&lt;/td&gt;
    &lt;td&gt;[[File:Flamestep2.JPG|300px]]&lt;/td&gt;
    &lt;td&gt;[[File:flamestep3.JPG|300px]]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td width = 200&gt;Remaining No. of Characters = 7&lt;/td&gt;
    &lt;td width = 200&gt;Counting from F, wrap over and strike the 7&lt;SUP&gt;th&lt;/SUP&gt; letter&lt;/td&gt;
    &lt;td width = 200&gt;The remaining letter denotes the relationship&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;
== Refresh the operations on Strings and Lists ==
&lt;table width=&quot;200&quot; border=&quot;1&quot;&gt;
  &lt;tr&gt;
    &lt;th scope=&quot;col&quot; width=100&gt;Functions&lt;/th&gt;
    &lt;th scope=&quot;col&quot; width=100&gt;Example&lt;/th&gt;
    &lt;th scope=&quot;col&quot; width=100&gt;Result&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;import &lt;/td&gt;
    &lt;td&gt;import string&lt;/td&gt;
    &lt;td&gt;import string module&lt;/td&gt;
  &lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;input a string&lt;/td&gt;
    &lt;td&gt;s = input()&lt;/td&gt;
    &lt;td&gt;input a string to the variable s&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Convert to lower case&lt;/td&gt;
    &lt;td&gt;print(s.lower())&lt;/td&gt;
    &lt;td &gt; raj &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Convert to upper case&lt;/td&gt;
    &lt;td&gt;print(s.upper())&lt;/td&gt;
    &lt;td&gt; RAJ&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Convert the string to list&lt;/td&gt;
    &lt;td&gt;s1 = list(s)&lt;/td&gt;
    &lt;td&gt;s1 will be ['R','a','j']&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Replace a character&lt;/td&gt;
    &lt;td&gt;print(s.replace(&quot;j&quot;,&quot;#&quot;))&lt;/td&gt;
    &lt;td&gt;'Ra#' .Note: the content of s is not changed.&lt;/td&gt;
  &lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;Replace more than one character&lt;/td&gt;
    &lt;td&gt;print(s.replace(&quot;aj&quot;,&quot;#&quot;))&lt;/td&gt;
    &lt;td&gt;'R#'&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;slice. l = ['a','b','c','d','e']&lt;/td&gt;
    &lt;td&gt;l[1:4]&lt;/td&gt;
    &lt;td&gt;['b', 'c', 'd'] &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;slice. Start index is missing &lt;/td&gt;
    &lt;td&gt;l[:4]&lt;/td&gt;
    &lt;td&gt; ['a', 'b', 'c', 'd']  Default is 0 if start index is omitted &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;slice. End index is missing &lt;/td&gt;
    &lt;td&gt;l[1:]&lt;/td&gt;
    &lt;td&gt; ['b', 'c', 'd', 'e'] Default is length of the list if end index is omitted&lt;/td&gt;
  &lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;slice. Both index missing &lt;/td&gt;
    &lt;td&gt;l[:]&lt;/td&gt;
    &lt;td&gt; ['a','b','c','d','e'] &lt;/td&gt;
  &lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;Index of first occurrence of a char.  &lt;/td&gt;
    &lt;td&gt;print(l.index('d'))&lt;/td&gt;
    &lt;td&gt; 3 &lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;
== Changes done by Sonia ==
&lt;pre&gt;
import string

p1 = input(&quot;Enter first person name:&quot;)
p1 = p1.lower()
p1=  p1.replace(&quot; &quot;,&quot;&quot;)

p2 = input(&quot;Enter Second person name:&quot;)
p2 = p2.lower()
p2 =  p2.replace(&quot; &quot;,&quot;&quot;)

l1 = list(p1)
l2 = list(p2)

proceed = True
while proceed:
   for i in l1:
        if i in l2:
            c=i
            l1.remove(c)
            l2.remove(c)
            proceed=True
            break
        else:
            proceed=False
    
count = len(l1) + len(l2)
result = ['Friends','Love','Affection','Marriage','Enemy','Sibling']

while len(result) &gt; 1 :
    split_index = (count%len(result)) -1
    if split_index &gt;= 0 :
        right = result[split_index + 1 :]
        left = result[:split_index]
        result = right + left
    else :
        result = result[:len(result) -1]
print(result[0])
&lt;/pre&gt;

Output:

[[File:flameOutput.png]]
==FLAMES(a Fun game) :By SAURAV==
'''code'''

def Count_uncommon_char(l1,l2):
    for i in (l1):
        for j in (l2):
            if j==i:
                l1.remove(i)
                l2.remove(j)
                break
    l=l1+l2
    return (len(l))      
     
p1=input(&quot;Enter first person your name:&quot;)
p1=p1.upper()
p1=p1.replace(&quot; &quot;,&quot;&quot;)
p2=input(&quot;Enter second person your name:&quot;)
p2=p2.upper()
p2=p2.replace(&quot; &quot;,&quot;&quot;)
l1=list(p1)
l2=list(p2)
result=['Frieand','Love','Affaction','marry','Enemy','siblings']
while(len(result)&gt;1):
    c=Count_uncommon_char(l1,l2)
    c=c%len(result)-1
    if c==-1:
        result=result[:len(result)-1]
    else:
        result=result[c+1:]+result[:c]
print(result[0])

'''OUTPUT:'''
Enter first person your name:ram

Enter second person your name:sita
Frieand
Enter first person your name:radha

Enter second person your name:mohan
marry

==Flames Game by Sachin==






&lt;pre&gt;
print('''
      
  _____ _                              ____                      
 |  ___| | __ _ _ __ ___   ___  ___   / ___| __ _ _ __ ___   ___ 
 | |_  | |/ _` | '_ ` _ \ / _ \/ __| | |  _ / _` | '_ ` _ \ / _ \
 |  _| | | (_| | | | | | |  __/\__ \ | |_| | (_| | | | | | |  __/
 |_|   |_|\__,_|_| |_| |_|\___||___/  \____|\__,_|_| |_| |_|\___|
                                                                 

''')

def remove_extra(name):    
    while (&quot; &quot; in name) or (&quot;.&quot; in name):
        if &quot; &quot; in name:
            name.remove(&quot; &quot;)
        elif &quot;.&quot; in name:
            name.remove(&quot;.&quot;)
    return name
def remove_common(player, act):
    if len(player) &gt;= len(act):
        for item in act:
            if (item in player)==True:
                player.remove(item)
                act.remove(item)
    else:
        for item in player:
            if (item in act)==True:
                player.remove(item)
                act.remove(item)
    return player, act
def relation(temp):
    temp.upper()
    if temp == &quot;F&quot;:
        return &quot;Friendship&quot;
    elif temp == &quot;L&quot;:
        return &quot;Lovers&quot;
    elif temp == &quot;A&quot;:
        return &quot;Affection&quot;
    elif temp == &quot;M&quot;:
        return &quot;Marriage&quot;
    elif temp == &quot;E&quot;:
        return &quot;Enemy&quot;
    else:
        return &quot;Sibling&quot;
willing = True
while willing:               
    key = list(&quot;FLAMES&quot;)   
    player = list(input(&quot;Enter you name \n&quot;).lower())
    act = list(input(&quot;Enter your favourite actress/actor name \n&quot;).lower())
    act_copy = act.copy()
    player = remove_extra(player)
    act = remove_extra(act)
    player, act = remove_common(player, act)
    total_len = len(player)+len(act)
    if total_len == 0:
        print(&quot;\nThe secret relation between you and&quot;, &quot;&quot;.join(x for x in act_copy),&quot;is : Complicated \a&quot;)
    else:        
        while len(key) != 1:
            count = 0
            i = 0
            while count != total_len: 
                if i &gt; key.index(key[-1]):
                    i = 0
                    temp = key[i]
                else:
                    temp = key[i]
                i+=1
                count+=1
            key.remove(temp)
        print(&quot;\nThe secret relation between you and&quot;, &quot;&quot;.join(x for x in act_copy),&quot;is :&quot;,relation(key[0]), &quot;\a&quot;)
    while True:
        decision = input(&quot;\nDo you wanna play again? Yes/No\n&quot;)
        decision.lower()
        if decision == &quot;yes&quot;:
            break
        elif decision == &quot;no&quot;:
            willing= False
            break
        else:
            print(&quot;Please enter valid input&quot;)
&lt;/pre&gt;

= Image Compression =
Suppose you have a web page with lots of images.  It will take more time to download.  To make downloading faster, either you remove the images or reduce the size of the images.  Both methods will not give a good or required result.  Instead you can do &lt;b&gt; Image Compression&lt;/b&gt;
==NumPy Module==
NumPy is a module for Python. The name is an acronym for &quot;Numeric Python&quot;. It enriches Python with powerful data structures, implementing multi-dimensional arrays and matrices. To work with Artificial Intelligence, Machine Learning or Deep Learning NumPy is required.

&lt;b&gt; How is it superior to List &lt;/b&gt;
Operations on numpy arrays and matrices are easier than Lists.
Consider  the following

cvalues = [22.1, 22.8, 21.9, 22.5, 22.7, 22.3, 21.8, 21.2, 22.9, 22.1]

C = np.array(cvalues)

We would like to find the values into degrees Fahrenheit. This can be easily accomplished using a simple scalar multiplication:

print(C * 9 / 5 + 32)

Using Lists, it should have been

 fvalues = [ x*9/5 + 32 for x in cvalues] 

&lt;b&gt; Operations on numpy &lt;/b&gt;
&lt;table width=&quot;200&quot; border=&quot;1&quot;&gt;
  &lt;tr&gt;
    &lt;th scope=&quot;col&quot;&gt;Operations&lt;/th&gt;
    &lt;th scope=&quot;col&quot;&gt;Descriptions&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;import numpy as np &lt;/td&gt;
    &lt;td&gt;numpy is imported and can be accessed with a short name np&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;a=np.array([1,2,3])&lt;/td&gt;
    &lt;td&gt;One dimensional array 'a' is created&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;print(type(a))&lt;/td&gt;
    &lt;td&gt;&lt;class 'numpy.ndarray'&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;print(a.shape)&lt;/td&gt;
    &lt;td&gt;(3,)&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;print (a[0],a[1],a[2])&lt;/td&gt;
    &lt;td&gt;1 2 3&lt;/td&gt;
  &lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;b=np.array([[1,2,3],[4,5,6]])&lt;/td&gt;
    &lt;td&gt;Two dimensional array 'b' is created&lt;/td&gt;
  &lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;print(b.shape)&lt;/td&gt;
    &lt;td&gt;(2,3)&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;
[[#Top]]
=== NumPy Examples ===
importing numpy module is common to following examples.
&lt;pre&gt;import numpy as np&lt;/pre&gt;

'''Example: Print NumPy Array'''
&lt;pre&gt;
#pass list as argument to np.array
a=np.array([1,2,3])
print(a)
#Output: [1 2 3]
&lt;/pre&gt;

'''Example: Print type of numpy array'''
&lt;pre&gt;
#type of numpy array
print(type(a))
#Output: &lt;class 'numpy.ndarray'&gt;
&lt;/pre&gt;

'''Example: Print shape i.e.size of numpy array'''
&lt;pre&gt;
#shape of numpy array
print(a.shape)
#Output: (3,)
&lt;/pre&gt;

'''Example: Print elements of numpy using indexes'''
&lt;pre&gt;
#print elements of numpy using indexes
print(a[0], a[1], a[2])
#Output: 1 2 3
&lt;/pre&gt;

'''Example: Print shape of array: rows and columns'''
&lt;pre&gt;
b=np.array([[1,2,3],[4,5,6]])
print(b.shape)
#Output: (2, 3) - 2 rows and 3 columns
&lt;/pre&gt;

''' Example: 2x2 array of '0' '''
&lt;pre&gt;
#array of '0'
a=np.zeros((2,2))
print(a)
'''Output:
[[0. 0.]
 [0. 0.]]'''
&lt;/pre&gt;

''' Example: 2x2 array of '1' '''
&lt;pre&gt;
#array of '1'
b= np.ones((2,2))
print(b)
'''Output:
[[1. 1.]
 [1. 1.]]'''
&lt;/pre&gt;

''' Example: 2x2 array of '6' '''
&lt;pre&gt;
#2x2 array of 6
c= np.full((2,2),6)
print(c)
'''Output:
[[6 6]
 [6 6]]'''
&lt;/pre&gt;

''' Example: 2x2 array of random number '''
&lt;pre&gt;
#2x2 array of random number
d=np.random.random((2,2))
print(d)
'''Output:
 [[0.45937293 0.72546193]
 [0.28374715 0.63269858]]'''
&lt;/pre&gt;

''' Example: nxn array of random integer'''
&lt;pre&gt;
#2x2 array of random integer
d=np.random.randint(0,5,(2,5))
print(d)
'''Output:
  [[2 2 1 0 4]
   [3 1 0 3 4]]'''
Returns elements from 0 to 4
&lt;/pre&gt;

'''Example: int32 Data type of array'''
&lt;pre&gt;
x=np.array([1,2])

#data type of x
print(x.dtype)
#Output : int32
&lt;/pre&gt;

'''Example: float64 Data type of array'''
&lt;pre&gt;
y=np.array([1.2,3])
print(y.dtype)
#Output: float64
&lt;/pre&gt;

'''Example: Specifically setting Data type of array as int64'''
&lt;pre&gt;
x=np.array([1,2], dtype=np.int64)
print(x.dtype)
#Output: int64
&lt;/pre&gt;
[[#Top]]

===NumPy array operations===
&lt;pre&gt;
import numpy as np
x=np.array([[1,2],[3,4]],dtype=np.float64)
y=np.array([[5,6],[7,8]],dtype=np.float64)
print(x)
'''Output:
[[1. 2.]
 [3. 4.]]'''
print(y)
'''Output:
[[5. 6.]
 [7. 8.]]
'''

print(x+y)
print(np.add(x,y))

'''
Output:
[[ 6.  8.]
 [10. 12.]]

[[ 6.  8.]
 [10. 12.]]
 '''

print(x-y)
print(np.subtract(x,y))
'''Output:
[[-4. -4.]
 [-4. -4.]]
[[-4. -4.]
 [-4. -4.]]
'''
print(x*y)
print(np.multiply(x,y))
'''Output:
[[ 5. 12.]
 [21. 32.]]
[[ 5. 12.]
 [21. 32.]]
'''
print(x/y)
'''Output:
[[0.2        0.33333333]
 [0.42857143 0.5       ]]
'''
print(np.sqrt(x))
'''Output:
[[1.         1.41421356]
 [1.73205081 2.        ]]
'''
print(np.sqrt(y))
'''Output:
[[2.23606798 2.44948974]
 [2.64575131 2.82842712]]
'''
#Transposition of matrix
np.array([[1,2],[3,4]])
print(x.T)
'''Output:
[[1. 3.]
 [2. 4.]]
 '''
#sum of all elements
print(np.sum(x))#Output:10.0
print(np.sum(x,axis=0))#Output:[4. 6.]
print(np.sum(x,axis=1))#Output:[3. 7.]

&lt;/pre&gt;

==Lossy Compression==
Compression in which data is lost during compression.

==Lossless Compression==
Compression in which data is not lost during compression.

==Compression coding==
We will use the black and white ''lena'' image from net.
[[File:Lena-Original-Image.jpg]]

&lt;pre&gt;
import numpy
from PIL import Image
I=numpy.asanyarray(Image.open('Lena-Original-Image-512x512-pixels.png'))
print(I)
&lt;/pre&gt;
'''Output:
[[[159 159 159]
  [159 159 159]
  [158 158 158]
  ...
  [168 168 168]
  [151 151 151]
  [119 119 119]]

 [[159 159 159]
  [159 159 159]
  [158 158 158]
  ...
  [168 168 168]
  [151 151 151]
  [119 119 119]]

 [[159 159 159]
  [159 159 159]
  [158 158 158]
  ...
  [168 168 168]
  [151 151 151]
  [119 119 119]]

 ...

 [[ 20  20  20]
  [ 29  29  29]
  [ 25  25  25]
  ...
  [ 91  91  91]
  [ 87  87  87]
  [ 84  84  84]]

 [[ 22  22  22]
  [ 34  34  34]
  [ 30  30  30]
  ...
  [ 91  91  91]
  [ 93  93  93]
  [ 96  96  96]]

 [[ 22  22  22]
  [ 34  34  34]
  [ 30  30  30]
  ...
  [ 91  91  91]
  [ 93  93  93]
  [ 96  96  96]]]
'''

===Load the image===
&lt;pre&gt;
import numpy
from PIL import Image
im=Image.open('Lena-Original-Image-512x512-pixels.png')
pixelMap=im.load()
&lt;/pre&gt;

===Create blank image of same size and type===
&lt;pre&gt;
#mode is type of image
#blank image with same mode and size of original image
img=Image.new(im.mode,im.size)
pixelNew=img.load()
&lt;/pre&gt;

===Logic of Image  Compression===
We will convert image from 8-bit to 3-bit.
&lt;pre&gt;
'''
8bit to 3 bit
2^8&gt;2^3
2^5=32

for:
0-31 put 0
32-63 put 1
64-95 put 2
96-127 put 3
128-159 put 4
160-191 put 5
192-223 put 6
224-255 put 7
'''
&lt;/pre&gt;

===Coding===
&lt;pre&gt;
import numpy
from PIL import Image
im=Image.open('Lena-Original-Image.jpg')
pixelMap=im.load()

#mode is type of image
#blank image with same mode and size of original image
img=Image.new(im.mode,im.size)
pixelNew=img.load()

'''
8bit to 3 bit
2^8&gt;2^3
2^5=32

for:
0-31 put 0
32-63 put 1
64-95 put 2
96-127 put 3
128-159 put 4
160-191 put 5
192-223 put 6
224-255 put 7
'''

for i in range(img.size[0]):
    for j in range(img.size[1]):
        if(pixelMap[i,j]&gt;=0 and pixelMap[i,j]&lt;=31):
            pixelNew[i,j]=0
        elif(pixelMap[i,j]&gt;=32 and pixelMap[i,j]&lt;=63):
            pixelNew[i,j]=1
        elif(pixelMap[i,j]&gt;=64 and pixelMap[i,j]&lt;=95):
            pixelNew[i,j]=2
        elif(pixelMap[i,j]&gt;=96 and pixelMap[i,j]&lt;=127):
            pixelNew[i,j]=3
        elif(pixelMap[i,j]&gt;=128 and pixelMap[i,j]&lt;=159):
            pixelNew[i,j]=4
        elif(pixelMap[i,j]&gt;=160 and pixelMap[i,j]&lt;=191):
            pixelNew[i,j]=5    
        elif(pixelMap[i,j]&gt;=192 and pixelMap[i,j]&lt;=223):
            pixelNew[i,j]=6
        elif(pixelMap[i,j]&gt;=224 and pixelMap[i,j]&lt;=255):
            pixelNew[i,j]=7

img.save('lena2.jpg')
J=numpy.asanyarray(Image.open('lena2.jpg'))

&lt;/pre&gt;
[[File:lena2.jpg]]</text>
      <sha1>bam0pjjhyncq8ntjtk1z2hg8rtkigzp</sha1>
    </revision>
    <revision>
      <id>4161</id>
      <parentid>4160</parentid>
      <timestamp>2018-10-10T07:26:05Z</timestamp>
      <contributor>
        <username>Sachinkr</username>
        <id>1743</id>
      </contributor>
      <comment>/* Flames Game by Sachin */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="15050">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_10 Contributors of this page]
==Week 10 Download URL==
https://onlinecourses.nptel.ac.in/noc18_cs35/unit?unit=30&amp;lesson=31

=FLAMES - a Childhood play=
In childhood, we might have played a game called FLAMES to find the relationship (illusion!!) between a boy and a girl.  

All you have to do is

&lt;b&gt; Steps : &lt;/b&gt;
 1. write their names and strike out the common characters that occur in both their names.
 2. Count the remaining letters (SAY X)
 3. Write the word FLAMES and start counting from F and strike out the X&lt;sup&gt;th&lt;/sup&gt; letter till only one character remains
 4. If it is F - then the two are Friends. L - Love, A - Affection,  M - Marriage  E- Enemy S- Sister

&lt;table width=&quot;449&quot; height=&quot;116&quot; border=&quot;1&quot;&gt;
 &lt;tr&gt;
    &lt;td&gt;[[File:Flamestep1.JPG|300px]]&lt;/td&gt;
    &lt;td&gt;[[File:Flamestep2.JPG|300px]]&lt;/td&gt;
    &lt;td&gt;[[File:flamestep3.JPG|300px]]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td width = 200&gt;Remaining No. of Characters = 7&lt;/td&gt;
    &lt;td width = 200&gt;Counting from F, wrap over and strike the 7&lt;SUP&gt;th&lt;/SUP&gt; letter&lt;/td&gt;
    &lt;td width = 200&gt;The remaining letter denotes the relationship&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;
== Refresh the operations on Strings and Lists ==
&lt;table width=&quot;200&quot; border=&quot;1&quot;&gt;
  &lt;tr&gt;
    &lt;th scope=&quot;col&quot; width=100&gt;Functions&lt;/th&gt;
    &lt;th scope=&quot;col&quot; width=100&gt;Example&lt;/th&gt;
    &lt;th scope=&quot;col&quot; width=100&gt;Result&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;import &lt;/td&gt;
    &lt;td&gt;import string&lt;/td&gt;
    &lt;td&gt;import string module&lt;/td&gt;
  &lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;input a string&lt;/td&gt;
    &lt;td&gt;s = input()&lt;/td&gt;
    &lt;td&gt;input a string to the variable s&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Convert to lower case&lt;/td&gt;
    &lt;td&gt;print(s.lower())&lt;/td&gt;
    &lt;td &gt; raj &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Convert to upper case&lt;/td&gt;
    &lt;td&gt;print(s.upper())&lt;/td&gt;
    &lt;td&gt; RAJ&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Convert the string to list&lt;/td&gt;
    &lt;td&gt;s1 = list(s)&lt;/td&gt;
    &lt;td&gt;s1 will be ['R','a','j']&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Replace a character&lt;/td&gt;
    &lt;td&gt;print(s.replace(&quot;j&quot;,&quot;#&quot;))&lt;/td&gt;
    &lt;td&gt;'Ra#' .Note: the content of s is not changed.&lt;/td&gt;
  &lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;Replace more than one character&lt;/td&gt;
    &lt;td&gt;print(s.replace(&quot;aj&quot;,&quot;#&quot;))&lt;/td&gt;
    &lt;td&gt;'R#'&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;slice. l = ['a','b','c','d','e']&lt;/td&gt;
    &lt;td&gt;l[1:4]&lt;/td&gt;
    &lt;td&gt;['b', 'c', 'd'] &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;slice. Start index is missing &lt;/td&gt;
    &lt;td&gt;l[:4]&lt;/td&gt;
    &lt;td&gt; ['a', 'b', 'c', 'd']  Default is 0 if start index is omitted &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;slice. End index is missing &lt;/td&gt;
    &lt;td&gt;l[1:]&lt;/td&gt;
    &lt;td&gt; ['b', 'c', 'd', 'e'] Default is length of the list if end index is omitted&lt;/td&gt;
  &lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;slice. Both index missing &lt;/td&gt;
    &lt;td&gt;l[:]&lt;/td&gt;
    &lt;td&gt; ['a','b','c','d','e'] &lt;/td&gt;
  &lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;Index of first occurrence of a char.  &lt;/td&gt;
    &lt;td&gt;print(l.index('d'))&lt;/td&gt;
    &lt;td&gt; 3 &lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;
== Changes done by Sonia ==
&lt;pre&gt;
import string

p1 = input(&quot;Enter first person name:&quot;)
p1 = p1.lower()
p1=  p1.replace(&quot; &quot;,&quot;&quot;)

p2 = input(&quot;Enter Second person name:&quot;)
p2 = p2.lower()
p2 =  p2.replace(&quot; &quot;,&quot;&quot;)

l1 = list(p1)
l2 = list(p2)

proceed = True
while proceed:
   for i in l1:
        if i in l2:
            c=i
            l1.remove(c)
            l2.remove(c)
            proceed=True
            break
        else:
            proceed=False
    
count = len(l1) + len(l2)
result = ['Friends','Love','Affection','Marriage','Enemy','Sibling']

while len(result) &gt; 1 :
    split_index = (count%len(result)) -1
    if split_index &gt;= 0 :
        right = result[split_index + 1 :]
        left = result[:split_index]
        result = right + left
    else :
        result = result[:len(result) -1]
print(result[0])
&lt;/pre&gt;

Output:

[[File:flameOutput.png]]
==FLAMES(a Fun game) :By SAURAV==
'''code'''

def Count_uncommon_char(l1,l2):
    for i in (l1):
        for j in (l2):
            if j==i:
                l1.remove(i)
                l2.remove(j)
                break
    l=l1+l2
    return (len(l))      
     
p1=input(&quot;Enter first person your name:&quot;)
p1=p1.upper()
p1=p1.replace(&quot; &quot;,&quot;&quot;)
p2=input(&quot;Enter second person your name:&quot;)
p2=p2.upper()
p2=p2.replace(&quot; &quot;,&quot;&quot;)
l1=list(p1)
l2=list(p2)
result=['Frieand','Love','Affaction','marry','Enemy','siblings']
while(len(result)&gt;1):
    c=Count_uncommon_char(l1,l2)
    c=c%len(result)-1
    if c==-1:
        result=result[:len(result)-1]
    else:
        result=result[c+1:]+result[:c]
print(result[0])

'''OUTPUT:'''
Enter first person your name:ram

Enter second person your name:sita
Frieand
Enter first person your name:radha

Enter second person your name:mohan
marry

==Flames Game by Sachin==
&lt;pre&gt;
Explanation: 
Following code used 3 custom function which are
1. remove_extra : Created this function to remove any space or dot in name.
2. remove_common : Created this function to remove common alphabets in both names.
3. relation : It will provide the meaning of alphabet of FLAMES.
&lt;/pre&gt;



&lt;pre&gt;
print('''
      
  _____ _                              ____                      
 |  ___| | __ _ _ __ ___   ___  ___   / ___| __ _ _ __ ___   ___ 
 | |_  | |/ _` | '_ ` _ \ / _ \/ __| | |  _ / _` | '_ ` _ \ / _ \
 |  _| | | (_| | | | | | |  __/\__ \ | |_| | (_| | | | | | |  __/
 |_|   |_|\__,_|_| |_| |_|\___||___/  \____|\__,_|_| |_| |_|\___|
                                                                 

''')

def remove_extra(name):    
    while (&quot; &quot; in name) or (&quot;.&quot; in name):
        if &quot; &quot; in name:
            name.remove(&quot; &quot;)
        elif &quot;.&quot; in name:
            name.remove(&quot;.&quot;)
    return name
def remove_common(player, act):
    if len(player) &gt;= len(act):
        for item in act:
            if (item in player)==True:
                player.remove(item)
                act.remove(item)
    else:
        for item in player:
            if (item in act)==True:
                player.remove(item)
                act.remove(item)
    return player, act
def relation(temp):
    temp.upper()
    if temp == &quot;F&quot;:
        return &quot;Friendship&quot;
    elif temp == &quot;L&quot;:
        return &quot;Lovers&quot;
    elif temp == &quot;A&quot;:
        return &quot;Affection&quot;
    elif temp == &quot;M&quot;:
        return &quot;Marriage&quot;
    elif temp == &quot;E&quot;:
        return &quot;Enemy&quot;
    else:
        return &quot;Sibling&quot;
willing = True
while willing:               
    key = list(&quot;FLAMES&quot;)   
    player = list(input(&quot;Enter you name \n&quot;).lower())
    act = list(input(&quot;Enter your favourite actress/actor name \n&quot;).lower())
    act_copy = act.copy()
    player = remove_extra(player)
    act = remove_extra(act)
    player, act = remove_common(player, act)
    total_len = len(player)+len(act)
    if total_len == 0:
        print(&quot;\nThe secret relation between you and&quot;, &quot;&quot;.join(x for x in act_copy),&quot;is : Complicated \a&quot;)
    else:        
        while len(key) != 1:
            count = 0
            i = 0
            while count != total_len: 
                if i &gt; key.index(key[-1]):
                    i = 0
                    temp = key[i]
                else:
                    temp = key[i]
                i+=1
                count+=1
            key.remove(temp)
        print(&quot;\nThe secret relation between you and&quot;, &quot;&quot;.join(x for x in act_copy),&quot;is :&quot;,relation(key[0]), &quot;\a&quot;)
    while True:
        decision = input(&quot;\nDo you wanna play again? Yes/No\n&quot;)
        decision.lower()
        if decision == &quot;yes&quot;:
            break
        elif decision == &quot;no&quot;:
            willing= False
            break
        else:
            print(&quot;Please enter valid input&quot;)
&lt;/pre&gt;

= Image Compression =
Suppose you have a web page with lots of images.  It will take more time to download.  To make downloading faster, either you remove the images or reduce the size of the images.  Both methods will not give a good or required result.  Instead you can do &lt;b&gt; Image Compression&lt;/b&gt;
==NumPy Module==
NumPy is a module for Python. The name is an acronym for &quot;Numeric Python&quot;. It enriches Python with powerful data structures, implementing multi-dimensional arrays and matrices. To work with Artificial Intelligence, Machine Learning or Deep Learning NumPy is required.

&lt;b&gt; How is it superior to List &lt;/b&gt;
Operations on numpy arrays and matrices are easier than Lists.
Consider  the following

cvalues = [22.1, 22.8, 21.9, 22.5, 22.7, 22.3, 21.8, 21.2, 22.9, 22.1]

C = np.array(cvalues)

We would like to find the values into degrees Fahrenheit. This can be easily accomplished using a simple scalar multiplication:

print(C * 9 / 5 + 32)

Using Lists, it should have been

 fvalues = [ x*9/5 + 32 for x in cvalues] 

&lt;b&gt; Operations on numpy &lt;/b&gt;
&lt;table width=&quot;200&quot; border=&quot;1&quot;&gt;
  &lt;tr&gt;
    &lt;th scope=&quot;col&quot;&gt;Operations&lt;/th&gt;
    &lt;th scope=&quot;col&quot;&gt;Descriptions&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;import numpy as np &lt;/td&gt;
    &lt;td&gt;numpy is imported and can be accessed with a short name np&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;a=np.array([1,2,3])&lt;/td&gt;
    &lt;td&gt;One dimensional array 'a' is created&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;print(type(a))&lt;/td&gt;
    &lt;td&gt;&lt;class 'numpy.ndarray'&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;print(a.shape)&lt;/td&gt;
    &lt;td&gt;(3,)&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;print (a[0],a[1],a[2])&lt;/td&gt;
    &lt;td&gt;1 2 3&lt;/td&gt;
  &lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;b=np.array([[1,2,3],[4,5,6]])&lt;/td&gt;
    &lt;td&gt;Two dimensional array 'b' is created&lt;/td&gt;
  &lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;print(b.shape)&lt;/td&gt;
    &lt;td&gt;(2,3)&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;
[[#Top]]
=== NumPy Examples ===
importing numpy module is common to following examples.
&lt;pre&gt;import numpy as np&lt;/pre&gt;

'''Example: Print NumPy Array'''
&lt;pre&gt;
#pass list as argument to np.array
a=np.array([1,2,3])
print(a)
#Output: [1 2 3]
&lt;/pre&gt;

'''Example: Print type of numpy array'''
&lt;pre&gt;
#type of numpy array
print(type(a))
#Output: &lt;class 'numpy.ndarray'&gt;
&lt;/pre&gt;

'''Example: Print shape i.e.size of numpy array'''
&lt;pre&gt;
#shape of numpy array
print(a.shape)
#Output: (3,)
&lt;/pre&gt;

'''Example: Print elements of numpy using indexes'''
&lt;pre&gt;
#print elements of numpy using indexes
print(a[0], a[1], a[2])
#Output: 1 2 3
&lt;/pre&gt;

'''Example: Print shape of array: rows and columns'''
&lt;pre&gt;
b=np.array([[1,2,3],[4,5,6]])
print(b.shape)
#Output: (2, 3) - 2 rows and 3 columns
&lt;/pre&gt;

''' Example: 2x2 array of '0' '''
&lt;pre&gt;
#array of '0'
a=np.zeros((2,2))
print(a)
'''Output:
[[0. 0.]
 [0. 0.]]'''
&lt;/pre&gt;

''' Example: 2x2 array of '1' '''
&lt;pre&gt;
#array of '1'
b= np.ones((2,2))
print(b)
'''Output:
[[1. 1.]
 [1. 1.]]'''
&lt;/pre&gt;

''' Example: 2x2 array of '6' '''
&lt;pre&gt;
#2x2 array of 6
c= np.full((2,2),6)
print(c)
'''Output:
[[6 6]
 [6 6]]'''
&lt;/pre&gt;

''' Example: 2x2 array of random number '''
&lt;pre&gt;
#2x2 array of random number
d=np.random.random((2,2))
print(d)
'''Output:
 [[0.45937293 0.72546193]
 [0.28374715 0.63269858]]'''
&lt;/pre&gt;

''' Example: nxn array of random integer'''
&lt;pre&gt;
#2x2 array of random integer
d=np.random.randint(0,5,(2,5))
print(d)
'''Output:
  [[2 2 1 0 4]
   [3 1 0 3 4]]'''
Returns elements from 0 to 4
&lt;/pre&gt;

'''Example: int32 Data type of array'''
&lt;pre&gt;
x=np.array([1,2])

#data type of x
print(x.dtype)
#Output : int32
&lt;/pre&gt;

'''Example: float64 Data type of array'''
&lt;pre&gt;
y=np.array([1.2,3])
print(y.dtype)
#Output: float64
&lt;/pre&gt;

'''Example: Specifically setting Data type of array as int64'''
&lt;pre&gt;
x=np.array([1,2], dtype=np.int64)
print(x.dtype)
#Output: int64
&lt;/pre&gt;
[[#Top]]

===NumPy array operations===
&lt;pre&gt;
import numpy as np
x=np.array([[1,2],[3,4]],dtype=np.float64)
y=np.array([[5,6],[7,8]],dtype=np.float64)
print(x)
'''Output:
[[1. 2.]
 [3. 4.]]'''
print(y)
'''Output:
[[5. 6.]
 [7. 8.]]
'''

print(x+y)
print(np.add(x,y))

'''
Output:
[[ 6.  8.]
 [10. 12.]]

[[ 6.  8.]
 [10. 12.]]
 '''

print(x-y)
print(np.subtract(x,y))
'''Output:
[[-4. -4.]
 [-4. -4.]]
[[-4. -4.]
 [-4. -4.]]
'''
print(x*y)
print(np.multiply(x,y))
'''Output:
[[ 5. 12.]
 [21. 32.]]
[[ 5. 12.]
 [21. 32.]]
'''
print(x/y)
'''Output:
[[0.2        0.33333333]
 [0.42857143 0.5       ]]
'''
print(np.sqrt(x))
'''Output:
[[1.         1.41421356]
 [1.73205081 2.        ]]
'''
print(np.sqrt(y))
'''Output:
[[2.23606798 2.44948974]
 [2.64575131 2.82842712]]
'''
#Transposition of matrix
np.array([[1,2],[3,4]])
print(x.T)
'''Output:
[[1. 3.]
 [2. 4.]]
 '''
#sum of all elements
print(np.sum(x))#Output:10.0
print(np.sum(x,axis=0))#Output:[4. 6.]
print(np.sum(x,axis=1))#Output:[3. 7.]

&lt;/pre&gt;

==Lossy Compression==
Compression in which data is lost during compression.

==Lossless Compression==
Compression in which data is not lost during compression.

==Compression coding==
We will use the black and white ''lena'' image from net.
[[File:Lena-Original-Image.jpg]]

&lt;pre&gt;
import numpy
from PIL import Image
I=numpy.asanyarray(Image.open('Lena-Original-Image-512x512-pixels.png'))
print(I)
&lt;/pre&gt;
'''Output:
[[[159 159 159]
  [159 159 159]
  [158 158 158]
  ...
  [168 168 168]
  [151 151 151]
  [119 119 119]]

 [[159 159 159]
  [159 159 159]
  [158 158 158]
  ...
  [168 168 168]
  [151 151 151]
  [119 119 119]]

 [[159 159 159]
  [159 159 159]
  [158 158 158]
  ...
  [168 168 168]
  [151 151 151]
  [119 119 119]]

 ...

 [[ 20  20  20]
  [ 29  29  29]
  [ 25  25  25]
  ...
  [ 91  91  91]
  [ 87  87  87]
  [ 84  84  84]]

 [[ 22  22  22]
  [ 34  34  34]
  [ 30  30  30]
  ...
  [ 91  91  91]
  [ 93  93  93]
  [ 96  96  96]]

 [[ 22  22  22]
  [ 34  34  34]
  [ 30  30  30]
  ...
  [ 91  91  91]
  [ 93  93  93]
  [ 96  96  96]]]
'''

===Load the image===
&lt;pre&gt;
import numpy
from PIL import Image
im=Image.open('Lena-Original-Image-512x512-pixels.png')
pixelMap=im.load()
&lt;/pre&gt;

===Create blank image of same size and type===
&lt;pre&gt;
#mode is type of image
#blank image with same mode and size of original image
img=Image.new(im.mode,im.size)
pixelNew=img.load()
&lt;/pre&gt;

===Logic of Image  Compression===
We will convert image from 8-bit to 3-bit.
&lt;pre&gt;
'''
8bit to 3 bit
2^8&gt;2^3
2^5=32

for:
0-31 put 0
32-63 put 1
64-95 put 2
96-127 put 3
128-159 put 4
160-191 put 5
192-223 put 6
224-255 put 7
'''
&lt;/pre&gt;

===Coding===
&lt;pre&gt;
import numpy
from PIL import Image
im=Image.open('Lena-Original-Image.jpg')
pixelMap=im.load()

#mode is type of image
#blank image with same mode and size of original image
img=Image.new(im.mode,im.size)
pixelNew=img.load()

'''
8bit to 3 bit
2^8&gt;2^3
2^5=32

for:
0-31 put 0
32-63 put 1
64-95 put 2
96-127 put 3
128-159 put 4
160-191 put 5
192-223 put 6
224-255 put 7
'''

for i in range(img.size[0]):
    for j in range(img.size[1]):
        if(pixelMap[i,j]&gt;=0 and pixelMap[i,j]&lt;=31):
            pixelNew[i,j]=0
        elif(pixelMap[i,j]&gt;=32 and pixelMap[i,j]&lt;=63):
            pixelNew[i,j]=1
        elif(pixelMap[i,j]&gt;=64 and pixelMap[i,j]&lt;=95):
            pixelNew[i,j]=2
        elif(pixelMap[i,j]&gt;=96 and pixelMap[i,j]&lt;=127):
            pixelNew[i,j]=3
        elif(pixelMap[i,j]&gt;=128 and pixelMap[i,j]&lt;=159):
            pixelNew[i,j]=4
        elif(pixelMap[i,j]&gt;=160 and pixelMap[i,j]&lt;=191):
            pixelNew[i,j]=5    
        elif(pixelMap[i,j]&gt;=192 and pixelMap[i,j]&lt;=223):
            pixelNew[i,j]=6
        elif(pixelMap[i,j]&gt;=224 and pixelMap[i,j]&lt;=255):
            pixelNew[i,j]=7

img.save('lena2.jpg')
J=numpy.asanyarray(Image.open('lena2.jpg'))

&lt;/pre&gt;
[[File:lena2.jpg]]</text>
      <sha1>6z63x5j854drad8rvp8dmogx31hl7ox</sha1>
    </revision>
    <revision>
      <id>4162</id>
      <parentid>4161</parentid>
      <timestamp>2018-10-10T07:31:47Z</timestamp>
      <contributor>
        <username>Sachinkr</username>
        <id>1743</id>
      </contributor>
      <comment>/* Flames Game by Sachin */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="15283">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_10 Contributors of this page]
==Week 10 Download URL==
https://onlinecourses.nptel.ac.in/noc18_cs35/unit?unit=30&amp;lesson=31

=FLAMES - a Childhood play=
In childhood, we might have played a game called FLAMES to find the relationship (illusion!!) between a boy and a girl.  

All you have to do is

&lt;b&gt; Steps : &lt;/b&gt;
 1. write their names and strike out the common characters that occur in both their names.
 2. Count the remaining letters (SAY X)
 3. Write the word FLAMES and start counting from F and strike out the X&lt;sup&gt;th&lt;/sup&gt; letter till only one character remains
 4. If it is F - then the two are Friends. L - Love, A - Affection,  M - Marriage  E- Enemy S- Sister

&lt;table width=&quot;449&quot; height=&quot;116&quot; border=&quot;1&quot;&gt;
 &lt;tr&gt;
    &lt;td&gt;[[File:Flamestep1.JPG|300px]]&lt;/td&gt;
    &lt;td&gt;[[File:Flamestep2.JPG|300px]]&lt;/td&gt;
    &lt;td&gt;[[File:flamestep3.JPG|300px]]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td width = 200&gt;Remaining No. of Characters = 7&lt;/td&gt;
    &lt;td width = 200&gt;Counting from F, wrap over and strike the 7&lt;SUP&gt;th&lt;/SUP&gt; letter&lt;/td&gt;
    &lt;td width = 200&gt;The remaining letter denotes the relationship&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;
== Refresh the operations on Strings and Lists ==
&lt;table width=&quot;200&quot; border=&quot;1&quot;&gt;
  &lt;tr&gt;
    &lt;th scope=&quot;col&quot; width=100&gt;Functions&lt;/th&gt;
    &lt;th scope=&quot;col&quot; width=100&gt;Example&lt;/th&gt;
    &lt;th scope=&quot;col&quot; width=100&gt;Result&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;import &lt;/td&gt;
    &lt;td&gt;import string&lt;/td&gt;
    &lt;td&gt;import string module&lt;/td&gt;
  &lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;input a string&lt;/td&gt;
    &lt;td&gt;s = input()&lt;/td&gt;
    &lt;td&gt;input a string to the variable s&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Convert to lower case&lt;/td&gt;
    &lt;td&gt;print(s.lower())&lt;/td&gt;
    &lt;td &gt; raj &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Convert to upper case&lt;/td&gt;
    &lt;td&gt;print(s.upper())&lt;/td&gt;
    &lt;td&gt; RAJ&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Convert the string to list&lt;/td&gt;
    &lt;td&gt;s1 = list(s)&lt;/td&gt;
    &lt;td&gt;s1 will be ['R','a','j']&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Replace a character&lt;/td&gt;
    &lt;td&gt;print(s.replace(&quot;j&quot;,&quot;#&quot;))&lt;/td&gt;
    &lt;td&gt;'Ra#' .Note: the content of s is not changed.&lt;/td&gt;
  &lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;Replace more than one character&lt;/td&gt;
    &lt;td&gt;print(s.replace(&quot;aj&quot;,&quot;#&quot;))&lt;/td&gt;
    &lt;td&gt;'R#'&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;slice. l = ['a','b','c','d','e']&lt;/td&gt;
    &lt;td&gt;l[1:4]&lt;/td&gt;
    &lt;td&gt;['b', 'c', 'd'] &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;slice. Start index is missing &lt;/td&gt;
    &lt;td&gt;l[:4]&lt;/td&gt;
    &lt;td&gt; ['a', 'b', 'c', 'd']  Default is 0 if start index is omitted &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;slice. End index is missing &lt;/td&gt;
    &lt;td&gt;l[1:]&lt;/td&gt;
    &lt;td&gt; ['b', 'c', 'd', 'e'] Default is length of the list if end index is omitted&lt;/td&gt;
  &lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;slice. Both index missing &lt;/td&gt;
    &lt;td&gt;l[:]&lt;/td&gt;
    &lt;td&gt; ['a','b','c','d','e'] &lt;/td&gt;
  &lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;Index of first occurrence of a char.  &lt;/td&gt;
    &lt;td&gt;print(l.index('d'))&lt;/td&gt;
    &lt;td&gt; 3 &lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;
== Changes done by Sonia ==
&lt;pre&gt;
import string

p1 = input(&quot;Enter first person name:&quot;)
p1 = p1.lower()
p1=  p1.replace(&quot; &quot;,&quot;&quot;)

p2 = input(&quot;Enter Second person name:&quot;)
p2 = p2.lower()
p2 =  p2.replace(&quot; &quot;,&quot;&quot;)

l1 = list(p1)
l2 = list(p2)

proceed = True
while proceed:
   for i in l1:
        if i in l2:
            c=i
            l1.remove(c)
            l2.remove(c)
            proceed=True
            break
        else:
            proceed=False
    
count = len(l1) + len(l2)
result = ['Friends','Love','Affection','Marriage','Enemy','Sibling']

while len(result) &gt; 1 :
    split_index = (count%len(result)) -1
    if split_index &gt;= 0 :
        right = result[split_index + 1 :]
        left = result[:split_index]
        result = right + left
    else :
        result = result[:len(result) -1]
print(result[0])
&lt;/pre&gt;

Output:

[[File:flameOutput.png]]
==FLAMES(a Fun game) :By SAURAV==
'''code'''

def Count_uncommon_char(l1,l2):
    for i in (l1):
        for j in (l2):
            if j==i:
                l1.remove(i)
                l2.remove(j)
                break
    l=l1+l2
    return (len(l))      
     
p1=input(&quot;Enter first person your name:&quot;)
p1=p1.upper()
p1=p1.replace(&quot; &quot;,&quot;&quot;)
p2=input(&quot;Enter second person your name:&quot;)
p2=p2.upper()
p2=p2.replace(&quot; &quot;,&quot;&quot;)
l1=list(p1)
l2=list(p2)
result=['Frieand','Love','Affaction','marry','Enemy','siblings']
while(len(result)&gt;1):
    c=Count_uncommon_char(l1,l2)
    c=c%len(result)-1
    if c==-1:
        result=result[:len(result)-1]
    else:
        result=result[c+1:]+result[:c]
print(result[0])

'''OUTPUT:'''
Enter first person your name:ram

Enter second person your name:sita
Frieand
Enter first person your name:radha

Enter second person your name:mohan
marry

==Flames Game by Sachin==
&lt;pre&gt;
Explanation: 
Following code used 3 custom function which are
1. remove_extra : Created this function to remove any space or dot in name.
2. remove_common : Created this function to remove common alphabets in both names.
3. relation : It will provide the meaning of alphabet in FLAMES. And return the value accordingly.
4. Two outer while loops are used to maintain continuity of game and they are self explanatory.
5. Two inner while loops are used to remove alphabets from wrong &quot;FLAMES&quot; as per game requirement.    
&lt;/pre&gt;



&lt;pre&gt;
print('''
      
  _____ _                              ____                      
 |  ___| | __ _ _ __ ___   ___  ___   / ___| __ _ _ __ ___   ___ 
 | |_  | |/ _` | '_ ` _ \ / _ \/ __| | |  _ / _` | '_ ` _ \ / _ \
 |  _| | | (_| | | | | | |  __/\__ \ | |_| | (_| | | | | | |  __/
 |_|   |_|\__,_|_| |_| |_|\___||___/  \____|\__,_|_| |_| |_|\___|
                                                                 

''')

def remove_extra(name):    
    while (&quot; &quot; in name) or (&quot;.&quot; in name):
        if &quot; &quot; in name:
            name.remove(&quot; &quot;)
        elif &quot;.&quot; in name:
            name.remove(&quot;.&quot;)
    return name
def remove_common(player, act):
    if len(player) &gt;= len(act):
        for item in act:
            if (item in player)==True:
                player.remove(item)
                act.remove(item)
    else:
        for item in player:
            if (item in act)==True:
                player.remove(item)
                act.remove(item)
    return player, act
def relation(temp):
    temp.upper()
    if temp == &quot;F&quot;:
        return &quot;Friendship&quot;
    elif temp == &quot;L&quot;:
        return &quot;Lovers&quot;
    elif temp == &quot;A&quot;:
        return &quot;Affection&quot;
    elif temp == &quot;M&quot;:
        return &quot;Marriage&quot;
    elif temp == &quot;E&quot;:
        return &quot;Enemy&quot;
    else:
        return &quot;Sibling&quot;
willing = True
while willing:               
    key = list(&quot;FLAMES&quot;)   
    player = list(input(&quot;Enter you name \n&quot;).lower())
    act = list(input(&quot;Enter your favourite actress/actor name \n&quot;).lower())
    act_copy = act.copy()
    player = remove_extra(player)
    act = remove_extra(act)
    player, act = remove_common(player, act)
    total_len = len(player)+len(act)
    if total_len == 0:
        print(&quot;\nThe secret relation between you and&quot;, &quot;&quot;.join(x for x in act_copy),&quot;is : Complicated \a&quot;)
    else:        
        while len(key) != 1:
            count = 0
            i = 0
            while count != total_len: 
                if i &gt; key.index(key[-1]):
                    i = 0
                    temp = key[i]
                else:
                    temp = key[i]
                i+=1
                count+=1
            key.remove(temp)
        print(&quot;\nThe secret relation between you and&quot;, &quot;&quot;.join(x for x in act_copy),&quot;is :&quot;,relation(key[0]), &quot;\a&quot;)
    while True:
        decision = input(&quot;\nDo you wanna play again? Yes/No\n&quot;)
        decision.lower()
        if decision == &quot;yes&quot;:
            break
        elif decision == &quot;no&quot;:
            willing= False
            break
        else:
            print(&quot;Please enter valid input&quot;)
&lt;/pre&gt;

= Image Compression =
Suppose you have a web page with lots of images.  It will take more time to download.  To make downloading faster, either you remove the images or reduce the size of the images.  Both methods will not give a good or required result.  Instead you can do &lt;b&gt; Image Compression&lt;/b&gt;
==NumPy Module==
NumPy is a module for Python. The name is an acronym for &quot;Numeric Python&quot;. It enriches Python with powerful data structures, implementing multi-dimensional arrays and matrices. To work with Artificial Intelligence, Machine Learning or Deep Learning NumPy is required.

&lt;b&gt; How is it superior to List &lt;/b&gt;
Operations on numpy arrays and matrices are easier than Lists.
Consider  the following

cvalues = [22.1, 22.8, 21.9, 22.5, 22.7, 22.3, 21.8, 21.2, 22.9, 22.1]

C = np.array(cvalues)

We would like to find the values into degrees Fahrenheit. This can be easily accomplished using a simple scalar multiplication:

print(C * 9 / 5 + 32)

Using Lists, it should have been

 fvalues = [ x*9/5 + 32 for x in cvalues] 

&lt;b&gt; Operations on numpy &lt;/b&gt;
&lt;table width=&quot;200&quot; border=&quot;1&quot;&gt;
  &lt;tr&gt;
    &lt;th scope=&quot;col&quot;&gt;Operations&lt;/th&gt;
    &lt;th scope=&quot;col&quot;&gt;Descriptions&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;import numpy as np &lt;/td&gt;
    &lt;td&gt;numpy is imported and can be accessed with a short name np&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;a=np.array([1,2,3])&lt;/td&gt;
    &lt;td&gt;One dimensional array 'a' is created&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;print(type(a))&lt;/td&gt;
    &lt;td&gt;&lt;class 'numpy.ndarray'&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;print(a.shape)&lt;/td&gt;
    &lt;td&gt;(3,)&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;print (a[0],a[1],a[2])&lt;/td&gt;
    &lt;td&gt;1 2 3&lt;/td&gt;
  &lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;b=np.array([[1,2,3],[4,5,6]])&lt;/td&gt;
    &lt;td&gt;Two dimensional array 'b' is created&lt;/td&gt;
  &lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;print(b.shape)&lt;/td&gt;
    &lt;td&gt;(2,3)&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;
[[#Top]]
=== NumPy Examples ===
importing numpy module is common to following examples.
&lt;pre&gt;import numpy as np&lt;/pre&gt;

'''Example: Print NumPy Array'''
&lt;pre&gt;
#pass list as argument to np.array
a=np.array([1,2,3])
print(a)
#Output: [1 2 3]
&lt;/pre&gt;

'''Example: Print type of numpy array'''
&lt;pre&gt;
#type of numpy array
print(type(a))
#Output: &lt;class 'numpy.ndarray'&gt;
&lt;/pre&gt;

'''Example: Print shape i.e.size of numpy array'''
&lt;pre&gt;
#shape of numpy array
print(a.shape)
#Output: (3,)
&lt;/pre&gt;

'''Example: Print elements of numpy using indexes'''
&lt;pre&gt;
#print elements of numpy using indexes
print(a[0], a[1], a[2])
#Output: 1 2 3
&lt;/pre&gt;

'''Example: Print shape of array: rows and columns'''
&lt;pre&gt;
b=np.array([[1,2,3],[4,5,6]])
print(b.shape)
#Output: (2, 3) - 2 rows and 3 columns
&lt;/pre&gt;

''' Example: 2x2 array of '0' '''
&lt;pre&gt;
#array of '0'
a=np.zeros((2,2))
print(a)
'''Output:
[[0. 0.]
 [0. 0.]]'''
&lt;/pre&gt;

''' Example: 2x2 array of '1' '''
&lt;pre&gt;
#array of '1'
b= np.ones((2,2))
print(b)
'''Output:
[[1. 1.]
 [1. 1.]]'''
&lt;/pre&gt;

''' Example: 2x2 array of '6' '''
&lt;pre&gt;
#2x2 array of 6
c= np.full((2,2),6)
print(c)
'''Output:
[[6 6]
 [6 6]]'''
&lt;/pre&gt;

''' Example: 2x2 array of random number '''
&lt;pre&gt;
#2x2 array of random number
d=np.random.random((2,2))
print(d)
'''Output:
 [[0.45937293 0.72546193]
 [0.28374715 0.63269858]]'''
&lt;/pre&gt;

''' Example: nxn array of random integer'''
&lt;pre&gt;
#2x2 array of random integer
d=np.random.randint(0,5,(2,5))
print(d)
'''Output:
  [[2 2 1 0 4]
   [3 1 0 3 4]]'''
Returns elements from 0 to 4
&lt;/pre&gt;

'''Example: int32 Data type of array'''
&lt;pre&gt;
x=np.array([1,2])

#data type of x
print(x.dtype)
#Output : int32
&lt;/pre&gt;

'''Example: float64 Data type of array'''
&lt;pre&gt;
y=np.array([1.2,3])
print(y.dtype)
#Output: float64
&lt;/pre&gt;

'''Example: Specifically setting Data type of array as int64'''
&lt;pre&gt;
x=np.array([1,2], dtype=np.int64)
print(x.dtype)
#Output: int64
&lt;/pre&gt;
[[#Top]]

===NumPy array operations===
&lt;pre&gt;
import numpy as np
x=np.array([[1,2],[3,4]],dtype=np.float64)
y=np.array([[5,6],[7,8]],dtype=np.float64)
print(x)
'''Output:
[[1. 2.]
 [3. 4.]]'''
print(y)
'''Output:
[[5. 6.]
 [7. 8.]]
'''

print(x+y)
print(np.add(x,y))

'''
Output:
[[ 6.  8.]
 [10. 12.]]

[[ 6.  8.]
 [10. 12.]]
 '''

print(x-y)
print(np.subtract(x,y))
'''Output:
[[-4. -4.]
 [-4. -4.]]
[[-4. -4.]
 [-4. -4.]]
'''
print(x*y)
print(np.multiply(x,y))
'''Output:
[[ 5. 12.]
 [21. 32.]]
[[ 5. 12.]
 [21. 32.]]
'''
print(x/y)
'''Output:
[[0.2        0.33333333]
 [0.42857143 0.5       ]]
'''
print(np.sqrt(x))
'''Output:
[[1.         1.41421356]
 [1.73205081 2.        ]]
'''
print(np.sqrt(y))
'''Output:
[[2.23606798 2.44948974]
 [2.64575131 2.82842712]]
'''
#Transposition of matrix
np.array([[1,2],[3,4]])
print(x.T)
'''Output:
[[1. 3.]
 [2. 4.]]
 '''
#sum of all elements
print(np.sum(x))#Output:10.0
print(np.sum(x,axis=0))#Output:[4. 6.]
print(np.sum(x,axis=1))#Output:[3. 7.]

&lt;/pre&gt;

==Lossy Compression==
Compression in which data is lost during compression.

==Lossless Compression==
Compression in which data is not lost during compression.

==Compression coding==
We will use the black and white ''lena'' image from net.
[[File:Lena-Original-Image.jpg]]

&lt;pre&gt;
import numpy
from PIL import Image
I=numpy.asanyarray(Image.open('Lena-Original-Image-512x512-pixels.png'))
print(I)
&lt;/pre&gt;
'''Output:
[[[159 159 159]
  [159 159 159]
  [158 158 158]
  ...
  [168 168 168]
  [151 151 151]
  [119 119 119]]

 [[159 159 159]
  [159 159 159]
  [158 158 158]
  ...
  [168 168 168]
  [151 151 151]
  [119 119 119]]

 [[159 159 159]
  [159 159 159]
  [158 158 158]
  ...
  [168 168 168]
  [151 151 151]
  [119 119 119]]

 ...

 [[ 20  20  20]
  [ 29  29  29]
  [ 25  25  25]
  ...
  [ 91  91  91]
  [ 87  87  87]
  [ 84  84  84]]

 [[ 22  22  22]
  [ 34  34  34]
  [ 30  30  30]
  ...
  [ 91  91  91]
  [ 93  93  93]
  [ 96  96  96]]

 [[ 22  22  22]
  [ 34  34  34]
  [ 30  30  30]
  ...
  [ 91  91  91]
  [ 93  93  93]
  [ 96  96  96]]]
'''

===Load the image===
&lt;pre&gt;
import numpy
from PIL import Image
im=Image.open('Lena-Original-Image-512x512-pixels.png')
pixelMap=im.load()
&lt;/pre&gt;

===Create blank image of same size and type===
&lt;pre&gt;
#mode is type of image
#blank image with same mode and size of original image
img=Image.new(im.mode,im.size)
pixelNew=img.load()
&lt;/pre&gt;

===Logic of Image  Compression===
We will convert image from 8-bit to 3-bit.
&lt;pre&gt;
'''
8bit to 3 bit
2^8&gt;2^3
2^5=32

for:
0-31 put 0
32-63 put 1
64-95 put 2
96-127 put 3
128-159 put 4
160-191 put 5
192-223 put 6
224-255 put 7
'''
&lt;/pre&gt;

===Coding===
&lt;pre&gt;
import numpy
from PIL import Image
im=Image.open('Lena-Original-Image.jpg')
pixelMap=im.load()

#mode is type of image
#blank image with same mode and size of original image
img=Image.new(im.mode,im.size)
pixelNew=img.load()

'''
8bit to 3 bit
2^8&gt;2^3
2^5=32

for:
0-31 put 0
32-63 put 1
64-95 put 2
96-127 put 3
128-159 put 4
160-191 put 5
192-223 put 6
224-255 put 7
'''

for i in range(img.size[0]):
    for j in range(img.size[1]):
        if(pixelMap[i,j]&gt;=0 and pixelMap[i,j]&lt;=31):
            pixelNew[i,j]=0
        elif(pixelMap[i,j]&gt;=32 and pixelMap[i,j]&lt;=63):
            pixelNew[i,j]=1
        elif(pixelMap[i,j]&gt;=64 and pixelMap[i,j]&lt;=95):
            pixelNew[i,j]=2
        elif(pixelMap[i,j]&gt;=96 and pixelMap[i,j]&lt;=127):
            pixelNew[i,j]=3
        elif(pixelMap[i,j]&gt;=128 and pixelMap[i,j]&lt;=159):
            pixelNew[i,j]=4
        elif(pixelMap[i,j]&gt;=160 and pixelMap[i,j]&lt;=191):
            pixelNew[i,j]=5    
        elif(pixelMap[i,j]&gt;=192 and pixelMap[i,j]&lt;=223):
            pixelNew[i,j]=6
        elif(pixelMap[i,j]&gt;=224 and pixelMap[i,j]&lt;=255):
            pixelNew[i,j]=7

img.save('lena2.jpg')
J=numpy.asanyarray(Image.open('lena2.jpg'))

&lt;/pre&gt;
[[File:lena2.jpg]]</text>
      <sha1>bfqhk9c83gxan5q6ov51zg3gqm4i60r</sha1>
    </revision>
  </page>
</mediawiki>
