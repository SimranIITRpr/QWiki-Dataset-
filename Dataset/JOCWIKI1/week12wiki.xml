<mediawiki xmlns="http://www.mediawiki.org/xml/export-0.10/" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.mediawiki.org/xml/export-0.10/ http://www.mediawiki.org/xml/export-0.10.xsd" version="0.10" xml:lang="en">
  <siteinfo>
    <sitename>JOCWiki</sitename>
    <dbname>joc_wiki</dbname>
    <base>http://sccilabs.org/jocwiki/index.php/Main_Page</base>
    <generator>MediaWiki 1.30.0</generator>
    <case>first-letter</case>
    <namespaces>
      <namespace key="-2" case="first-letter">Media</namespace>
      <namespace key="-1" case="first-letter">Special</namespace>
      <namespace key="0" case="first-letter" />
      <namespace key="1" case="first-letter">Talk</namespace>
      <namespace key="2" case="first-letter">User</namespace>
      <namespace key="3" case="first-letter">User talk</namespace>
      <namespace key="4" case="first-letter">JOCWiki</namespace>
      <namespace key="5" case="first-letter">JOCWiki talk</namespace>
      <namespace key="6" case="first-letter">File</namespace>
      <namespace key="7" case="first-letter">File talk</namespace>
      <namespace key="8" case="first-letter">MediaWiki</namespace>
      <namespace key="9" case="first-letter">MediaWiki talk</namespace>
      <namespace key="10" case="first-letter">Template</namespace>
      <namespace key="11" case="first-letter">Template talk</namespace>
      <namespace key="12" case="first-letter">Help</namespace>
      <namespace key="13" case="first-letter">Help talk</namespace>
      <namespace key="14" case="first-letter">Category</namespace>
      <namespace key="15" case="first-letter">Category talk</namespace>
      <namespace key="828" case="first-letter">Module</namespace>
      <namespace key="829" case="first-letter">Module talk</namespace>
      <namespace key="2300" case="first-letter">Gadget</namespace>
      <namespace key="2301" case="first-letter">Gadget talk</namespace>
      <namespace key="2302" case="case-sensitive">Gadget definition</namespace>
      <namespace key="2303" case="case-sensitive">Gadget definition talk</namespace>
      <namespace key="2600" case="first-letter">Topic</namespace>
    </namespaces>
  </siteinfo>
  <page>
    <title>Lecture Notes: Week 12</title>
    <ns>0</ns>
    <id>934</id>
    <revision>
      <id>4299</id>
      <timestamp>2018-10-15T01:04:40Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>Created page with &quot;=Page Rank - How does Google Work=  =Collatz Conjecture=&quot;</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="56">=Page Rank - How does Google Work=

=Collatz Conjecture=</text>
      <sha1>aiv6vwvah62oyi0jcj2mm5ggh85im6y</sha1>
    </revision>
    <revision>
      <id>4300</id>
      <parentid>4299</parentid>
      <timestamp>2018-10-15T01:42:24Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* Collatz Conjecture */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="546">=Page Rank - How does Google Work=

=Collatz Conjecture=
Taught by Sudarshan sir and Amit sir, and Edited by Ms. Ami Tusharkant Choksi

&lt;pre&gt;
#collatz conguncture
#if num is even, divide it by 2
#if num is odd, new number is equal to 3n+1


def checkNum(num):
    iterations=1
    while(num!=1):
        if(num%2==0):
            num=int(num/2)            
        else:
            num = 3*num+1
        iterations+=1
        

    print(num,iterations)


#checkNum(12)#Output: 1 10
#checkNum(26)#Output: 1 11
checkNum(2000)#Output: 1 113
&lt;/pre&gt;</text>
      <sha1>3dgip5es37bt4pqspsi4g5p08vr4y9l</sha1>
    </revision>
    <revision>
      <id>4301</id>
      <parentid>4300</parentid>
      <timestamp>2018-10-15T01:54:52Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* Collatz Conjecture */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="777">=Page Rank - How does Google Work=

=Collatz Conjecture=
Taught by Sudarshan sir and Amit sir, and Edited by Ms. Ami Tusharkant Choksi

If a number is even, divide it by ''2'', if it is odd, make multiply it by ''3'' and add ''1'', till you get ''1''. This simple problem is called, ''Collatz Conjecture''

The program to implement the same is as follows:
==Program==
&lt;pre&gt;
#collatz conjecture
#if num is even, divide it by 2
#if num is odd, new number is equal to 3n+1


def checkNum(num):
    iterations=1
    while(num!=1):
        if(num%2==0):
            num=int(num/2)            
        else:
            num = 3*num+1
        iterations+=1
        

    print(num,iterations)


#checkNum(12)#Output: 1 10
#checkNum(26)#Output: 1 11
checkNum(2000)#Output: 1 113
&lt;/pre&gt;</text>
      <sha1>ptk22x3wit56q0cm4nu6o8mgd07skb7</sha1>
    </revision>
    <revision>
      <id>4302</id>
      <parentid>4301</parentid>
      <timestamp>2018-10-15T02:02:51Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* Program */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1847">=Page Rank - How does Google Work=

=Collatz Conjecture=
Taught by Sudarshan sir and Amit sir, and Edited by Ms. Ami Tusharkant Choksi

If a number is even, divide it by ''2'', if it is odd, make multiply it by ''3'' and add ''1'', till you get ''1''. This simple problem is called, ''Collatz Conjecture''

The program to implement the same is as follows:
==Program==
&lt;pre&gt;
#collatz conjecture
#if num is even, divide it by 2
#if num is odd, new number is equal to 3n+1


def checkNum(num):
    iterations=1
    while(num!=1):
        if(num%2==0):
            num=int(num/2)            
        else:
            num = 3*num+1
        iterations+=1
        

    print(num,iterations)


#checkNum(12)#Output: 1 10
#checkNum(26)#Output: 1 11
checkNum(2000)#Output: 1 113
&lt;/pre&gt;

==Output==
===For checkNum(2000)===
&lt;pre&gt;
1 : 1000
2 : 500
3 : 250
4 : 125
5 : 376
6 : 188
7 : 94
8 : 47
9 : 142
10 : 71
11 : 214
12 : 107
13 : 322
14 : 161
15 : 484
16 : 242
17 : 121
18 : 364
19 : 182
20 : 91
21 : 274
22 : 137
23 : 412
24 : 206
25 : 103
26 : 310
27 : 155
28 : 466
29 : 233
30 : 700
31 : 350
32 : 175
33 : 526
34 : 263
35 : 790
36 : 395
37 : 1186
38 : 593
39 : 1780
40 : 890
41 : 445
42 : 1336
43 : 668
44 : 334
45 : 167
46 : 502
47 : 251
48 : 754
49 : 377
50 : 1132
51 : 566
52 : 283
53 : 850
54 : 425
55 : 1276
56 : 638
57 : 319
58 : 958
59 : 479
60 : 1438
61 : 719
62 : 2158
63 : 1079
64 : 3238
65 : 1619
66 : 4858
67 : 2429
68 : 7288
69 : 3644
70 : 1822
71 : 911
72 : 2734
73 : 1367
74 : 4102
75 : 2051
76 : 6154
77 : 3077
78 : 9232
79 : 4616
80 : 2308
81 : 1154
82 : 577
83 : 1732
84 : 866
85 : 433
86 : 1300
87 : 650
88 : 325
89 : 976
90 : 488
91 : 244
92 : 122
93 : 61
94 : 184
95 : 92
96 : 46
97 : 23
98 : 70
99 : 35
100 : 106
101 : 53
102 : 160
103 : 80
104 : 40
105 : 20
106 : 10
107 : 5
108 : 16
109 : 8
110 : 4
111 : 2
112 : 1
1 113
&lt;/pre&gt;</text>
      <sha1>opj6i7nkla7qdl1rwuslbzxev2t7k29</sha1>
    </revision>
    <revision>
      <id>4303</id>
      <parentid>4302</parentid>
      <timestamp>2018-10-15T02:03:30Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* For checkNum(2000) */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1886">=Page Rank - How does Google Work=

=Collatz Conjecture=
Taught by Sudarshan sir and Amit sir, and Edited by Ms. Ami Tusharkant Choksi

If a number is even, divide it by ''2'', if it is odd, make multiply it by ''3'' and add ''1'', till you get ''1''. This simple problem is called, ''Collatz Conjecture''

The program to implement the same is as follows:
==Program==
&lt;pre&gt;
#collatz conjecture
#if num is even, divide it by 2
#if num is odd, new number is equal to 3n+1


def checkNum(num):
    iterations=1
    while(num!=1):
        if(num%2==0):
            num=int(num/2)            
        else:
            num = 3*num+1
        iterations+=1
        

    print(num,iterations)


#checkNum(12)#Output: 1 10
#checkNum(26)#Output: 1 11
checkNum(2000)#Output: 1 113
&lt;/pre&gt;

==Output==
===For checkNum(2000)===
&lt;pre&gt;
1 : 1000
2 : 500
3 : 250
4 : 125
5 : 376
6 : 188
7 : 94
8 : 47
9 : 142
10 : 71
11 : 214
12 : 107
13 : 322
14 : 161
15 : 484
16 : 242
17 : 121
18 : 364
19 : 182
20 : 91
21 : 274
22 : 137
23 : 412
24 : 206
25 : 103
26 : 310
27 : 155
28 : 466
29 : 233
30 : 700
31 : 350
32 : 175
33 : 526
34 : 263
35 : 790
36 : 395
37 : 1186
38 : 593
39 : 1780
40 : 890
41 : 445
42 : 1336
43 : 668
44 : 334
45 : 167
46 : 502
47 : 251
48 : 754
49 : 377
50 : 1132
51 : 566
52 : 283
53 : 850
54 : 425
55 : 1276
56 : 638
57 : 319
58 : 958
59 : 479
60 : 1438
61 : 719
62 : 2158
63 : 1079
64 : 3238
65 : 1619
66 : 4858
67 : 2429
68 : 7288
69 : 3644
70 : 1822
71 : 911
72 : 2734
73 : 1367
74 : 4102
75 : 2051
76 : 6154
77 : 3077
78 : 9232
79 : 4616
80 : 2308
81 : 1154
82 : 577
83 : 1732
84 : 866
85 : 433
86 : 1300
87 : 650
88 : 325
89 : 976
90 : 488
91 : 244
92 : 122
93 : 61
94 : 184
95 : 92
96 : 46
97 : 23
98 : 70
99 : 35
100 : 106
101 : 53
102 : 160
103 : 80
104 : 40
105 : 20
106 : 10
107 : 5
108 : 16
109 : 8
110 : 4
111 : 2
112 : 1
1 113
&lt;/pre&gt;

===For checkNum(5000)===
&lt;pre&gt;
&lt;/pre&gt;</text>
      <sha1>3gkhmhldtfo2xd7j0a6thsndttys13b</sha1>
    </revision>
    <revision>
      <id>4304</id>
      <parentid>4303</parentid>
      <timestamp>2018-10-15T02:04:20Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* For checkNum(5000) */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="2154">=Page Rank - How does Google Work=

=Collatz Conjecture=
Taught by Sudarshan sir and Amit sir, and Edited by Ms. Ami Tusharkant Choksi

If a number is even, divide it by ''2'', if it is odd, make multiply it by ''3'' and add ''1'', till you get ''1''. This simple problem is called, ''Collatz Conjecture''

The program to implement the same is as follows:
==Program==
&lt;pre&gt;
#collatz conjecture
#if num is even, divide it by 2
#if num is odd, new number is equal to 3n+1


def checkNum(num):
    iterations=1
    while(num!=1):
        if(num%2==0):
            num=int(num/2)            
        else:
            num = 3*num+1
        iterations+=1
        

    print(num,iterations)


#checkNum(12)#Output: 1 10
#checkNum(26)#Output: 1 11
checkNum(2000)#Output: 1 113
&lt;/pre&gt;

==Output==
===For checkNum(2000)===
&lt;pre&gt;
1 : 1000
2 : 500
3 : 250
4 : 125
5 : 376
6 : 188
7 : 94
8 : 47
9 : 142
10 : 71
11 : 214
12 : 107
13 : 322
14 : 161
15 : 484
16 : 242
17 : 121
18 : 364
19 : 182
20 : 91
21 : 274
22 : 137
23 : 412
24 : 206
25 : 103
26 : 310
27 : 155
28 : 466
29 : 233
30 : 700
31 : 350
32 : 175
33 : 526
34 : 263
35 : 790
36 : 395
37 : 1186
38 : 593
39 : 1780
40 : 890
41 : 445
42 : 1336
43 : 668
44 : 334
45 : 167
46 : 502
47 : 251
48 : 754
49 : 377
50 : 1132
51 : 566
52 : 283
53 : 850
54 : 425
55 : 1276
56 : 638
57 : 319
58 : 958
59 : 479
60 : 1438
61 : 719
62 : 2158
63 : 1079
64 : 3238
65 : 1619
66 : 4858
67 : 2429
68 : 7288
69 : 3644
70 : 1822
71 : 911
72 : 2734
73 : 1367
74 : 4102
75 : 2051
76 : 6154
77 : 3077
78 : 9232
79 : 4616
80 : 2308
81 : 1154
82 : 577
83 : 1732
84 : 866
85 : 433
86 : 1300
87 : 650
88 : 325
89 : 976
90 : 488
91 : 244
92 : 122
93 : 61
94 : 184
95 : 92
96 : 46
97 : 23
98 : 70
99 : 35
100 : 106
101 : 53
102 : 160
103 : 80
104 : 40
105 : 20
106 : 10
107 : 5
108 : 16
109 : 8
110 : 4
111 : 2
112 : 1
1 113
&lt;/pre&gt;

===For checkNum(5000)===
&lt;pre&gt;
1 : 2500
2 : 1250
3 : 625
4 : 1876
5 : 938
6 : 469
7 : 1408
8 : 704
9 : 352
10 : 176
11 : 88
12 : 44
13 : 22
14 : 11
15 : 34
16 : 17
17 : 52
18 : 26
19 : 13
20 : 40
21 : 20
22 : 10
23 : 5
24 : 16
25 : 8
26 : 4
27 : 2
28 : 1
1 29
&lt;/pre&gt;
===For checkNum(25000)===
&lt;pre&gt;
&lt;/pre&gt;</text>
      <sha1>71mfepr3d8d1qxtaxgmly7ch2eoax0c</sha1>
    </revision>
    <revision>
      <id>4305</id>
      <parentid>4304</parentid>
      <timestamp>2018-10-15T02:06:19Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* For checkNum(25000) */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="3235">=Page Rank - How does Google Work=

=Collatz Conjecture=
Taught by Sudarshan sir and Amit sir, and Edited by Ms. Ami Tusharkant Choksi

If a number is even, divide it by ''2'', if it is odd, make multiply it by ''3'' and add ''1'', till you get ''1''. This simple problem is called, ''Collatz Conjecture''

The program to implement the same is as follows:
==Program==
&lt;pre&gt;
#collatz conjecture
#if num is even, divide it by 2
#if num is odd, new number is equal to 3n+1


def checkNum(num):
    iterations=1
    while(num!=1):
        if(num%2==0):
            num=int(num/2)            
        else:
            num = 3*num+1
        iterations+=1
        

    print(num,iterations)


#checkNum(12)#Output: 1 10
#checkNum(26)#Output: 1 11
checkNum(2000)#Output: 1 113
&lt;/pre&gt;

==Output==
===For checkNum(2000)===
&lt;pre&gt;
1 : 1000
2 : 500
3 : 250
4 : 125
5 : 376
6 : 188
7 : 94
8 : 47
9 : 142
10 : 71
11 : 214
12 : 107
13 : 322
14 : 161
15 : 484
16 : 242
17 : 121
18 : 364
19 : 182
20 : 91
21 : 274
22 : 137
23 : 412
24 : 206
25 : 103
26 : 310
27 : 155
28 : 466
29 : 233
30 : 700
31 : 350
32 : 175
33 : 526
34 : 263
35 : 790
36 : 395
37 : 1186
38 : 593
39 : 1780
40 : 890
41 : 445
42 : 1336
43 : 668
44 : 334
45 : 167
46 : 502
47 : 251
48 : 754
49 : 377
50 : 1132
51 : 566
52 : 283
53 : 850
54 : 425
55 : 1276
56 : 638
57 : 319
58 : 958
59 : 479
60 : 1438
61 : 719
62 : 2158
63 : 1079
64 : 3238
65 : 1619
66 : 4858
67 : 2429
68 : 7288
69 : 3644
70 : 1822
71 : 911
72 : 2734
73 : 1367
74 : 4102
75 : 2051
76 : 6154
77 : 3077
78 : 9232
79 : 4616
80 : 2308
81 : 1154
82 : 577
83 : 1732
84 : 866
85 : 433
86 : 1300
87 : 650
88 : 325
89 : 976
90 : 488
91 : 244
92 : 122
93 : 61
94 : 184
95 : 92
96 : 46
97 : 23
98 : 70
99 : 35
100 : 106
101 : 53
102 : 160
103 : 80
104 : 40
105 : 20
106 : 10
107 : 5
108 : 16
109 : 8
110 : 4
111 : 2
112 : 1
1 113
&lt;/pre&gt;

===For checkNum(5000)===
&lt;pre&gt;
1 : 2500
2 : 1250
3 : 625
4 : 1876
5 : 938
6 : 469
7 : 1408
8 : 704
9 : 352
10 : 176
11 : 88
12 : 44
13 : 22
14 : 11
15 : 34
16 : 17
17 : 52
18 : 26
19 : 13
20 : 40
21 : 20
22 : 10
23 : 5
24 : 16
25 : 8
26 : 4
27 : 2
28 : 1
1 29
&lt;/pre&gt;
===For checkNum(25000000)===
&lt;pre&gt;
1 : 12500000
2 : 6250000
3 : 3125000
4 : 1562500
5 : 781250
6 : 390625
7 : 1171876
8 : 585938
9 : 292969
10 : 878908
11 : 439454
12 : 219727
13 : 659182
14 : 329591
15 : 988774
16 : 494387
17 : 1483162
18 : 741581
19 : 2224744
20 : 1112372
21 : 556186
22 : 278093
23 : 834280
24 : 417140
25 : 208570
26 : 104285
27 : 312856
28 : 156428
29 : 78214
30 : 39107
31 : 117322
32 : 58661
33 : 175984
34 : 87992
35 : 43996
36 : 21998
37 : 10999
38 : 32998
39 : 16499
40 : 49498
41 : 24749
42 : 74248
43 : 37124
44 : 18562
45 : 9281
46 : 27844
47 : 13922
48 : 6961
49 : 20884
50 : 10442
51 : 5221
52 : 15664
53 : 7832
54 : 3916
55 : 1958
56 : 979
57 : 2938
58 : 1469
59 : 4408
60 : 2204
61 : 1102
62 : 551
63 : 1654
64 : 827
65 : 2482
66 : 1241
67 : 3724
68 : 1862
69 : 931
70 : 2794
71 : 1397
72 : 4192
73 : 2096
74 : 1048
75 : 524
76 : 262
77 : 131
78 : 394
79 : 197
80 : 592
81 : 296
82 : 148
83 : 74
84 : 37
85 : 112
86 : 56
87 : 28
88 : 14
89 : 7
90 : 22
91 : 11
92 : 34
93 : 17
94 : 52
95 : 26
96 : 13
97 : 40
98 : 20
99 : 10
100 : 5
101 : 16
102 : 8
103 : 4
104 : 2
105 : 1
1 106
&lt;/pre&gt;</text>
      <sha1>fr7yhkr3qu6a66hwykzm6fzhbibewlb</sha1>
    </revision>
    <revision>
      <id>4306</id>
      <parentid>4305</parentid>
      <timestamp>2018-10-15T02:08:07Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* Collatz Conjecture */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="3668">=Page Rank - How does Google Work=

=Collatz Conjecture=
Taught by Sudarshan sir and Amit sir, and Edited by Ms. Ami Tusharkant Choksi

If a number is even, divide it by ''2'', if it is odd, make multiply it by ''3'' and add ''1'', till you get ''1''. This simple problem is called, ''Collatz Conjecture''. Number is bigger doesn't mean more iterations are required. One can notice, from the output of the following program. 

The program to implement the same is as follows:
==Program==
&lt;pre&gt;
#collatz conjecture
#if num is even, divide it by 2
#if num is odd, new number is equal to 3n+1


def checkNum(num):
    iterations=1
    while(num!=1):
        if(num%2==0):
            num=int(num/2)            
        else:
            num = 3*num+1
        iterations+=1
        

    print(num,iterations)


#checkNum(12)#Output: 1 10
#checkNum(26)#Output: 1 11
checkNum(2000)#Output: 1 113
&lt;/pre&gt;
==Program adding statement to print all iterations==
&lt;pre&gt;
def checkNum(num):
    iterations=1
    while(num!=1):
        if(num%2==0):
            num=int(num/2)            
        else:
            num = 3*num+1
        print(iterations,&quot;:&quot;,num)
        iterations+=1
        

    print(num,iterations)
&lt;/pre&gt;
==Output==
===For checkNum(2000)===
&lt;pre&gt;
1 : 1000
2 : 500
3 : 250
4 : 125
5 : 376
6 : 188
7 : 94
8 : 47
9 : 142
10 : 71
11 : 214
12 : 107
13 : 322
14 : 161
15 : 484
16 : 242
17 : 121
18 : 364
19 : 182
20 : 91
21 : 274
22 : 137
23 : 412
24 : 206
25 : 103
26 : 310
27 : 155
28 : 466
29 : 233
30 : 700
31 : 350
32 : 175
33 : 526
34 : 263
35 : 790
36 : 395
37 : 1186
38 : 593
39 : 1780
40 : 890
41 : 445
42 : 1336
43 : 668
44 : 334
45 : 167
46 : 502
47 : 251
48 : 754
49 : 377
50 : 1132
51 : 566
52 : 283
53 : 850
54 : 425
55 : 1276
56 : 638
57 : 319
58 : 958
59 : 479
60 : 1438
61 : 719
62 : 2158
63 : 1079
64 : 3238
65 : 1619
66 : 4858
67 : 2429
68 : 7288
69 : 3644
70 : 1822
71 : 911
72 : 2734
73 : 1367
74 : 4102
75 : 2051
76 : 6154
77 : 3077
78 : 9232
79 : 4616
80 : 2308
81 : 1154
82 : 577
83 : 1732
84 : 866
85 : 433
86 : 1300
87 : 650
88 : 325
89 : 976
90 : 488
91 : 244
92 : 122
93 : 61
94 : 184
95 : 92
96 : 46
97 : 23
98 : 70
99 : 35
100 : 106
101 : 53
102 : 160
103 : 80
104 : 40
105 : 20
106 : 10
107 : 5
108 : 16
109 : 8
110 : 4
111 : 2
112 : 1
1 113
&lt;/pre&gt;

===For checkNum(5000)===
&lt;pre&gt;
1 : 2500
2 : 1250
3 : 625
4 : 1876
5 : 938
6 : 469
7 : 1408
8 : 704
9 : 352
10 : 176
11 : 88
12 : 44
13 : 22
14 : 11
15 : 34
16 : 17
17 : 52
18 : 26
19 : 13
20 : 40
21 : 20
22 : 10
23 : 5
24 : 16
25 : 8
26 : 4
27 : 2
28 : 1
1 29
&lt;/pre&gt;
===For checkNum(25000000)===
&lt;pre&gt;
1 : 12500000
2 : 6250000
3 : 3125000
4 : 1562500
5 : 781250
6 : 390625
7 : 1171876
8 : 585938
9 : 292969
10 : 878908
11 : 439454
12 : 219727
13 : 659182
14 : 329591
15 : 988774
16 : 494387
17 : 1483162
18 : 741581
19 : 2224744
20 : 1112372
21 : 556186
22 : 278093
23 : 834280
24 : 417140
25 : 208570
26 : 104285
27 : 312856
28 : 156428
29 : 78214
30 : 39107
31 : 117322
32 : 58661
33 : 175984
34 : 87992
35 : 43996
36 : 21998
37 : 10999
38 : 32998
39 : 16499
40 : 49498
41 : 24749
42 : 74248
43 : 37124
44 : 18562
45 : 9281
46 : 27844
47 : 13922
48 : 6961
49 : 20884
50 : 10442
51 : 5221
52 : 15664
53 : 7832
54 : 3916
55 : 1958
56 : 979
57 : 2938
58 : 1469
59 : 4408
60 : 2204
61 : 1102
62 : 551
63 : 1654
64 : 827
65 : 2482
66 : 1241
67 : 3724
68 : 1862
69 : 931
70 : 2794
71 : 1397
72 : 4192
73 : 2096
74 : 1048
75 : 524
76 : 262
77 : 131
78 : 394
79 : 197
80 : 592
81 : 296
82 : 148
83 : 74
84 : 37
85 : 112
86 : 56
87 : 28
88 : 14
89 : 7
90 : 22
91 : 11
92 : 34
93 : 17
94 : 52
95 : 26
96 : 13
97 : 40
98 : 20
99 : 10
100 : 5
101 : 16
102 : 8
103 : 4
104 : 2
105 : 1
1 106
&lt;/pre&gt;</text>
      <sha1>oudhdtthjs7xqmzydu2ltnesh30p0yb</sha1>
    </revision>
    <revision>
      <id>4307</id>
      <parentid>4306</parentid>
      <timestamp>2018-10-15T02:10:39Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* Collatz Conjecture */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="3787">=Page Rank - How does Google Work=

=Collatz Conjecture=
Taught by Sudarshan sir and Amit sir, and Edited by Ms. Ami Tusharkant Choksi

If a number is even, divide it by ''2'', if it is odd, make multiply it by ''3'' and add ''1'', till you get ''1''. This simple problem is called, ''Collatz Conjecture''. 

[[File:collatz1.png]]

[[File:collatz2.png]]

[[File:collatz3.png]]

[[File:collatz4.png]]

[[File:collatz5.png]]

Number is bigger doesn't mean more iterations are required. One can notice, from the output of the following program. 



The program to implement the same is as follows:
==Program==
&lt;pre&gt;
#collatz conjecture
#if num is even, divide it by 2
#if num is odd, new number is equal to 3n+1


def checkNum(num):
    iterations=1
    while(num!=1):
        if(num%2==0):
            num=int(num/2)            
        else:
            num = 3*num+1
        iterations+=1
        

    print(num,iterations)


#checkNum(12)#Output: 1 10
#checkNum(26)#Output: 1 11
checkNum(2000)#Output: 1 113
&lt;/pre&gt;
==Program adding statement to print all iterations==
&lt;pre&gt;
def checkNum(num):
    iterations=1
    while(num!=1):
        if(num%2==0):
            num=int(num/2)            
        else:
            num = 3*num+1
        print(iterations,&quot;:&quot;,num)
        iterations+=1
        

    print(num,iterations)
&lt;/pre&gt;
==Output==
===For checkNum(2000)===
&lt;pre&gt;
1 : 1000
2 : 500
3 : 250
4 : 125
5 : 376
6 : 188
7 : 94
8 : 47
9 : 142
10 : 71
11 : 214
12 : 107
13 : 322
14 : 161
15 : 484
16 : 242
17 : 121
18 : 364
19 : 182
20 : 91
21 : 274
22 : 137
23 : 412
24 : 206
25 : 103
26 : 310
27 : 155
28 : 466
29 : 233
30 : 700
31 : 350
32 : 175
33 : 526
34 : 263
35 : 790
36 : 395
37 : 1186
38 : 593
39 : 1780
40 : 890
41 : 445
42 : 1336
43 : 668
44 : 334
45 : 167
46 : 502
47 : 251
48 : 754
49 : 377
50 : 1132
51 : 566
52 : 283
53 : 850
54 : 425
55 : 1276
56 : 638
57 : 319
58 : 958
59 : 479
60 : 1438
61 : 719
62 : 2158
63 : 1079
64 : 3238
65 : 1619
66 : 4858
67 : 2429
68 : 7288
69 : 3644
70 : 1822
71 : 911
72 : 2734
73 : 1367
74 : 4102
75 : 2051
76 : 6154
77 : 3077
78 : 9232
79 : 4616
80 : 2308
81 : 1154
82 : 577
83 : 1732
84 : 866
85 : 433
86 : 1300
87 : 650
88 : 325
89 : 976
90 : 488
91 : 244
92 : 122
93 : 61
94 : 184
95 : 92
96 : 46
97 : 23
98 : 70
99 : 35
100 : 106
101 : 53
102 : 160
103 : 80
104 : 40
105 : 20
106 : 10
107 : 5
108 : 16
109 : 8
110 : 4
111 : 2
112 : 1
1 113
&lt;/pre&gt;

===For checkNum(5000)===
&lt;pre&gt;
1 : 2500
2 : 1250
3 : 625
4 : 1876
5 : 938
6 : 469
7 : 1408
8 : 704
9 : 352
10 : 176
11 : 88
12 : 44
13 : 22
14 : 11
15 : 34
16 : 17
17 : 52
18 : 26
19 : 13
20 : 40
21 : 20
22 : 10
23 : 5
24 : 16
25 : 8
26 : 4
27 : 2
28 : 1
1 29
&lt;/pre&gt;
===For checkNum(25000000)===
&lt;pre&gt;
1 : 12500000
2 : 6250000
3 : 3125000
4 : 1562500
5 : 781250
6 : 390625
7 : 1171876
8 : 585938
9 : 292969
10 : 878908
11 : 439454
12 : 219727
13 : 659182
14 : 329591
15 : 988774
16 : 494387
17 : 1483162
18 : 741581
19 : 2224744
20 : 1112372
21 : 556186
22 : 278093
23 : 834280
24 : 417140
25 : 208570
26 : 104285
27 : 312856
28 : 156428
29 : 78214
30 : 39107
31 : 117322
32 : 58661
33 : 175984
34 : 87992
35 : 43996
36 : 21998
37 : 10999
38 : 32998
39 : 16499
40 : 49498
41 : 24749
42 : 74248
43 : 37124
44 : 18562
45 : 9281
46 : 27844
47 : 13922
48 : 6961
49 : 20884
50 : 10442
51 : 5221
52 : 15664
53 : 7832
54 : 3916
55 : 1958
56 : 979
57 : 2938
58 : 1469
59 : 4408
60 : 2204
61 : 1102
62 : 551
63 : 1654
64 : 827
65 : 2482
66 : 1241
67 : 3724
68 : 1862
69 : 931
70 : 2794
71 : 1397
72 : 4192
73 : 2096
74 : 1048
75 : 524
76 : 262
77 : 131
78 : 394
79 : 197
80 : 592
81 : 296
82 : 148
83 : 74
84 : 37
85 : 112
86 : 56
87 : 28
88 : 14
89 : 7
90 : 22
91 : 11
92 : 34
93 : 17
94 : 52
95 : 26
96 : 13
97 : 40
98 : 20
99 : 10
100 : 5
101 : 16
102 : 8
103 : 4
104 : 2
105 : 1
1 106
&lt;/pre&gt;</text>
      <sha1>2hcpe945gynuoz8gvr78ak7xjq49qkb</sha1>
    </revision>
    <revision>
      <id>4313</id>
      <parentid>4307</parentid>
      <timestamp>2018-10-15T02:14:41Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="3898">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_12 Contributors of this page]

=Page Rank - How does Google Work=

=Collatz Conjecture=
Taught by Sudarshan sir and Amit sir, and Edited by Ms. Ami Tusharkant Choksi

If a number is even, divide it by ''2'', if it is odd, make multiply it by ''3'' and add ''1'', till you get ''1''. This simple problem is called, ''Collatz Conjecture''. 

[[File:collatz1.png]]

[[File:collatz2.png]]

[[File:collatz3.png]]

[[File:collatz4.png]]

[[File:collatz5.png]]

Number is bigger doesn't mean more iterations are required. One can notice, from the output of the following program. 



The program to implement the same is as follows:
==Program==
&lt;pre&gt;
#collatz conjecture
#if num is even, divide it by 2
#if num is odd, new number is equal to 3n+1


def checkNum(num):
    iterations=1
    while(num!=1):
        if(num%2==0):
            num=int(num/2)            
        else:
            num = 3*num+1
        iterations+=1
        

    print(num,iterations)


#checkNum(12)#Output: 1 10
#checkNum(26)#Output: 1 11
checkNum(2000)#Output: 1 113
&lt;/pre&gt;
==Program adding statement to print all iterations==
&lt;pre&gt;
def checkNum(num):
    iterations=1
    while(num!=1):
        if(num%2==0):
            num=int(num/2)            
        else:
            num = 3*num+1
        print(iterations,&quot;:&quot;,num)
        iterations+=1
        

    print(num,iterations)
&lt;/pre&gt;
==Output==
===For checkNum(2000)===
&lt;pre&gt;
1 : 1000
2 : 500
3 : 250
4 : 125
5 : 376
6 : 188
7 : 94
8 : 47
9 : 142
10 : 71
11 : 214
12 : 107
13 : 322
14 : 161
15 : 484
16 : 242
17 : 121
18 : 364
19 : 182
20 : 91
21 : 274
22 : 137
23 : 412
24 : 206
25 : 103
26 : 310
27 : 155
28 : 466
29 : 233
30 : 700
31 : 350
32 : 175
33 : 526
34 : 263
35 : 790
36 : 395
37 : 1186
38 : 593
39 : 1780
40 : 890
41 : 445
42 : 1336
43 : 668
44 : 334
45 : 167
46 : 502
47 : 251
48 : 754
49 : 377
50 : 1132
51 : 566
52 : 283
53 : 850
54 : 425
55 : 1276
56 : 638
57 : 319
58 : 958
59 : 479
60 : 1438
61 : 719
62 : 2158
63 : 1079
64 : 3238
65 : 1619
66 : 4858
67 : 2429
68 : 7288
69 : 3644
70 : 1822
71 : 911
72 : 2734
73 : 1367
74 : 4102
75 : 2051
76 : 6154
77 : 3077
78 : 9232
79 : 4616
80 : 2308
81 : 1154
82 : 577
83 : 1732
84 : 866
85 : 433
86 : 1300
87 : 650
88 : 325
89 : 976
90 : 488
91 : 244
92 : 122
93 : 61
94 : 184
95 : 92
96 : 46
97 : 23
98 : 70
99 : 35
100 : 106
101 : 53
102 : 160
103 : 80
104 : 40
105 : 20
106 : 10
107 : 5
108 : 16
109 : 8
110 : 4
111 : 2
112 : 1
1 113
&lt;/pre&gt;

===For checkNum(5000)===
&lt;pre&gt;
1 : 2500
2 : 1250
3 : 625
4 : 1876
5 : 938
6 : 469
7 : 1408
8 : 704
9 : 352
10 : 176
11 : 88
12 : 44
13 : 22
14 : 11
15 : 34
16 : 17
17 : 52
18 : 26
19 : 13
20 : 40
21 : 20
22 : 10
23 : 5
24 : 16
25 : 8
26 : 4
27 : 2
28 : 1
1 29
&lt;/pre&gt;
===For checkNum(25000000)===
&lt;pre&gt;
1 : 12500000
2 : 6250000
3 : 3125000
4 : 1562500
5 : 781250
6 : 390625
7 : 1171876
8 : 585938
9 : 292969
10 : 878908
11 : 439454
12 : 219727
13 : 659182
14 : 329591
15 : 988774
16 : 494387
17 : 1483162
18 : 741581
19 : 2224744
20 : 1112372
21 : 556186
22 : 278093
23 : 834280
24 : 417140
25 : 208570
26 : 104285
27 : 312856
28 : 156428
29 : 78214
30 : 39107
31 : 117322
32 : 58661
33 : 175984
34 : 87992
35 : 43996
36 : 21998
37 : 10999
38 : 32998
39 : 16499
40 : 49498
41 : 24749
42 : 74248
43 : 37124
44 : 18562
45 : 9281
46 : 27844
47 : 13922
48 : 6961
49 : 20884
50 : 10442
51 : 5221
52 : 15664
53 : 7832
54 : 3916
55 : 1958
56 : 979
57 : 2938
58 : 1469
59 : 4408
60 : 2204
61 : 1102
62 : 551
63 : 1654
64 : 827
65 : 2482
66 : 1241
67 : 3724
68 : 1862
69 : 931
70 : 2794
71 : 1397
72 : 4192
73 : 2096
74 : 1048
75 : 524
76 : 262
77 : 131
78 : 394
79 : 197
80 : 592
81 : 296
82 : 148
83 : 74
84 : 37
85 : 112
86 : 56
87 : 28
88 : 14
89 : 7
90 : 22
91 : 11
92 : 34
93 : 17
94 : 52
95 : 26
96 : 13
97 : 40
98 : 20
99 : 10
100 : 5
101 : 16
102 : 8
103 : 4
104 : 2
105 : 1
1 106
&lt;/pre&gt;</text>
      <sha1>akfj6ejaqo2vp4v85nb98lst9u3p36q</sha1>
    </revision>
    <revision>
      <id>4314</id>
      <parentid>4313</parentid>
      <timestamp>2018-10-15T02:16:58Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* Collatz Conjecture */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="3936">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_12 Contributors of this page]

=Page Rank - How does Google Work=

=Collatz Conjecture=
Taught by Sudarshan sir and Amit sir, and Edited by Ms. Ami Tusharkant Choksi

If a number is even, divide it by ''2'', if it is odd, make multiply it by ''3'' and add ''1'', till you get ''1''. This simple problem is called, ''Collatz Conjecture''. 

[[File:collatz1.png]]

[[File:collatz2.png]]

[[File:collatz3.png]]

[[File:collatz4.png]]

[[File:collatz5.png]]

Number is bigger doesn't mean more iterations are required. One can notice, from the output of the following program. 



The program to implement the same is as follows:
==Program==
&lt;pre&gt;
#collatz conjecture
#if num is even, divide it by 2
#if num is odd, new number is equal to 3n+1


def checkNum(num):
    iterations=1
    while(num!=1):
        if(num%2==0):
            num=int(num/2)            
        else:
            num = 3*num+1
        iterations+=1
        

    print(num,iterations)


#checkNum(12)#Output: 1 10
#checkNum(26)#Output: 1 11
checkNum(2000)#Output: 1 113
&lt;/pre&gt;
==Program adding statement to print all iterations==
&lt;pre&gt;
def checkNum(num):
    iterations=1
    while(num!=1):
        if(num%2==0):
            num=int(num/2)            
        else:
            num = 3*num+1
        print(iterations,&quot;:&quot;,num)
        iterations+=1
        

    print(num,iterations)
&lt;/pre&gt;
==Output==
===For checkNum(2000)===
&lt;pre&gt;
1 : 1000
2 : 500
3 : 250
4 : 125
5 : 376
6 : 188
7 : 94
8 : 47
9 : 142
10 : 71
11 : 214
12 : 107
13 : 322
14 : 161
15 : 484
16 : 242
17 : 121
18 : 364
19 : 182
20 : 91
21 : 274
22 : 137
23 : 412
24 : 206
25 : 103
26 : 310
27 : 155
28 : 466
29 : 233
30 : 700
31 : 350
32 : 175
33 : 526
34 : 263
35 : 790
36 : 395
37 : 1186
38 : 593
39 : 1780
40 : 890
41 : 445
42 : 1336
43 : 668
44 : 334
45 : 167
46 : 502
47 : 251
48 : 754
49 : 377
50 : 1132
51 : 566
52 : 283
53 : 850
54 : 425
55 : 1276
56 : 638
57 : 319
58 : 958
59 : 479
60 : 1438
61 : 719
62 : 2158
63 : 1079
64 : 3238
65 : 1619
66 : 4858
67 : 2429
68 : 7288
69 : 3644
70 : 1822
71 : 911
72 : 2734
73 : 1367
74 : 4102
75 : 2051
76 : 6154
77 : 3077
78 : 9232
79 : 4616
80 : 2308
81 : 1154
82 : 577
83 : 1732
84 : 866
85 : 433
86 : 1300
87 : 650
88 : 325
89 : 976
90 : 488
91 : 244
92 : 122
93 : 61
94 : 184
95 : 92
96 : 46
97 : 23
98 : 70
99 : 35
100 : 106
101 : 53
102 : 160
103 : 80
104 : 40
105 : 20
106 : 10
107 : 5
108 : 16
109 : 8
110 : 4
111 : 2
112 : 1
1 113
&lt;/pre&gt;

===For checkNum(5000)===
&lt;pre&gt;
1 : 2500
2 : 1250
3 : 625
4 : 1876
5 : 938
6 : 469
7 : 1408
8 : 704
9 : 352
10 : 176
11 : 88
12 : 44
13 : 22
14 : 11
15 : 34
16 : 17
17 : 52
18 : 26
19 : 13
20 : 40
21 : 20
22 : 10
23 : 5
24 : 16
25 : 8
26 : 4
27 : 2
28 : 1
1 29
&lt;/pre&gt;
===For checkNum(25000000)===
&lt;pre&gt;
1 : 12500000
2 : 6250000
3 : 3125000
4 : 1562500
5 : 781250
6 : 390625
7 : 1171876
8 : 585938
9 : 292969
10 : 878908
11 : 439454
12 : 219727
13 : 659182
14 : 329591
15 : 988774
16 : 494387
17 : 1483162
18 : 741581
19 : 2224744
20 : 1112372
21 : 556186
22 : 278093
23 : 834280
24 : 417140
25 : 208570
26 : 104285
27 : 312856
28 : 156428
29 : 78214
30 : 39107
31 : 117322
32 : 58661
33 : 175984
34 : 87992
35 : 43996
36 : 21998
37 : 10999
38 : 32998
39 : 16499
40 : 49498
41 : 24749
42 : 74248
43 : 37124
44 : 18562
45 : 9281
46 : 27844
47 : 13922
48 : 6961
49 : 20884
50 : 10442
51 : 5221
52 : 15664
53 : 7832
54 : 3916
55 : 1958
56 : 979
57 : 2938
58 : 1469
59 : 4408
60 : 2204
61 : 1102
62 : 551
63 : 1654
64 : 827
65 : 2482
66 : 1241
67 : 3724
68 : 1862
69 : 931
70 : 2794
71 : 1397
72 : 4192
73 : 2096
74 : 1048
75 : 524
76 : 262
77 : 131
78 : 394
79 : 197
80 : 592
81 : 296
82 : 148
83 : 74
84 : 37
85 : 112
86 : 56
87 : 28
88 : 14
89 : 7
90 : 22
91 : 11
92 : 34
93 : 17
94 : 52
95 : 26
96 : 13
97 : 40
98 : 20
99 : 10
100 : 5
101 : 16
102 : 8
103 : 4
104 : 2
105 : 1
1 106
&lt;/pre&gt;

Happy Life ahead!!!
[[File:end.png]]</text>
      <sha1>cat2rv65f5692pj1p1uwy17v4bs4h5g</sha1>
    </revision>
    <revision>
      <id>4315</id>
      <parentid>4314</parentid>
      <timestamp>2018-10-15T02:17:38Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="3937">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_12 Contributors of this page]

=Page Rank - How does Google Work=

=Collatz Conjecture=
Taught by Sudarshan sir and Amit sir, and Edited by Ms. Ami Tusharkant Choksi

If a number is even, divide it by ''2'', if it is odd, make multiply it by ''3'' and add ''1'', till you get ''1''. This simple problem is called, ''Collatz Conjecture''. 

[[File:collatz1.png]]

[[File:collatz2.png]]

[[File:collatz3.png]]

[[File:collatz4.png]]

[[File:collatz5.png]]

Number is bigger doesn't mean more iterations are required. One can notice, from the output of the following program. 



The program to implement the same is as follows:
==Program==
&lt;pre&gt;
#collatz conjecture
#if num is even, divide it by 2
#if num is odd, new number is equal to 3n+1


def checkNum(num):
    iterations=1
    while(num!=1):
        if(num%2==0):
            num=int(num/2)            
        else:
            num = 3*num+1
        iterations+=1
        

    print(num,iterations)


#checkNum(12)#Output: 1 10
#checkNum(26)#Output: 1 11
checkNum(2000)#Output: 1 113
&lt;/pre&gt;
==Program adding statement to print all iterations==
&lt;pre&gt;
def checkNum(num):
    iterations=1
    while(num!=1):
        if(num%2==0):
            num=int(num/2)            
        else:
            num = 3*num+1
        print(iterations,&quot;:&quot;,num)
        iterations+=1
        

    print(num,iterations)
&lt;/pre&gt;
==Output==
===For checkNum(2000)===
&lt;pre&gt;
1 : 1000
2 : 500
3 : 250
4 : 125
5 : 376
6 : 188
7 : 94
8 : 47
9 : 142
10 : 71
11 : 214
12 : 107
13 : 322
14 : 161
15 : 484
16 : 242
17 : 121
18 : 364
19 : 182
20 : 91
21 : 274
22 : 137
23 : 412
24 : 206
25 : 103
26 : 310
27 : 155
28 : 466
29 : 233
30 : 700
31 : 350
32 : 175
33 : 526
34 : 263
35 : 790
36 : 395
37 : 1186
38 : 593
39 : 1780
40 : 890
41 : 445
42 : 1336
43 : 668
44 : 334
45 : 167
46 : 502
47 : 251
48 : 754
49 : 377
50 : 1132
51 : 566
52 : 283
53 : 850
54 : 425
55 : 1276
56 : 638
57 : 319
58 : 958
59 : 479
60 : 1438
61 : 719
62 : 2158
63 : 1079
64 : 3238
65 : 1619
66 : 4858
67 : 2429
68 : 7288
69 : 3644
70 : 1822
71 : 911
72 : 2734
73 : 1367
74 : 4102
75 : 2051
76 : 6154
77 : 3077
78 : 9232
79 : 4616
80 : 2308
81 : 1154
82 : 577
83 : 1732
84 : 866
85 : 433
86 : 1300
87 : 650
88 : 325
89 : 976
90 : 488
91 : 244
92 : 122
93 : 61
94 : 184
95 : 92
96 : 46
97 : 23
98 : 70
99 : 35
100 : 106
101 : 53
102 : 160
103 : 80
104 : 40
105 : 20
106 : 10
107 : 5
108 : 16
109 : 8
110 : 4
111 : 2
112 : 1
1 113
&lt;/pre&gt;

===For checkNum(5000)===
&lt;pre&gt;
1 : 2500
2 : 1250
3 : 625
4 : 1876
5 : 938
6 : 469
7 : 1408
8 : 704
9 : 352
10 : 176
11 : 88
12 : 44
13 : 22
14 : 11
15 : 34
16 : 17
17 : 52
18 : 26
19 : 13
20 : 40
21 : 20
22 : 10
23 : 5
24 : 16
25 : 8
26 : 4
27 : 2
28 : 1
1 29
&lt;/pre&gt;
===For checkNum(25000000)===
&lt;pre&gt;
1 : 12500000
2 : 6250000
3 : 3125000
4 : 1562500
5 : 781250
6 : 390625
7 : 1171876
8 : 585938
9 : 292969
10 : 878908
11 : 439454
12 : 219727
13 : 659182
14 : 329591
15 : 988774
16 : 494387
17 : 1483162
18 : 741581
19 : 2224744
20 : 1112372
21 : 556186
22 : 278093
23 : 834280
24 : 417140
25 : 208570
26 : 104285
27 : 312856
28 : 156428
29 : 78214
30 : 39107
31 : 117322
32 : 58661
33 : 175984
34 : 87992
35 : 43996
36 : 21998
37 : 10999
38 : 32998
39 : 16499
40 : 49498
41 : 24749
42 : 74248
43 : 37124
44 : 18562
45 : 9281
46 : 27844
47 : 13922
48 : 6961
49 : 20884
50 : 10442
51 : 5221
52 : 15664
53 : 7832
54 : 3916
55 : 1958
56 : 979
57 : 2938
58 : 1469
59 : 4408
60 : 2204
61 : 1102
62 : 551
63 : 1654
64 : 827
65 : 2482
66 : 1241
67 : 3724
68 : 1862
69 : 931
70 : 2794
71 : 1397
72 : 4192
73 : 2096
74 : 1048
75 : 524
76 : 262
77 : 131
78 : 394
79 : 197
80 : 592
81 : 296
82 : 148
83 : 74
84 : 37
85 : 112
86 : 56
87 : 28
88 : 14
89 : 7
90 : 22
91 : 11
92 : 34
93 : 17
94 : 52
95 : 26
96 : 13
97 : 40
98 : 20
99 : 10
100 : 5
101 : 16
102 : 8
103 : 4
104 : 2
105 : 1
1 106
&lt;/pre&gt;

Happy Life ahead!!!
[[File:end1.png]]</text>
      <sha1>qf967orc3c4bp5k83vuyl2iqcnaj57s</sha1>
    </revision>
    <revision>
      <id>4317</id>
      <parentid>4315</parentid>
      <timestamp>2018-10-15T06:27:14Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* Page Rank - How does Google Work */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="4127">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_12 Contributors of this page]

=Page Rank - How does Google Work=
One web page is having link to other page, that is a page is referring to other page. Google uses ''Page Rank'' algorithm to choose which page should be displayed first.

[[File:rank1.png]]

=Collatz Conjecture=
Taught by Sudarshan sir and Amit sir, and Edited by Ms. Ami Tusharkant Choksi

If a number is even, divide it by ''2'', if it is odd, make multiply it by ''3'' and add ''1'', till you get ''1''. This simple problem is called, ''Collatz Conjecture''. 

[[File:collatz1.png]]

[[File:collatz2.png]]

[[File:collatz3.png]]

[[File:collatz4.png]]

[[File:collatz5.png]]

Number is bigger doesn't mean more iterations are required. One can notice, from the output of the following program. 



The program to implement the same is as follows:
==Program==
&lt;pre&gt;
#collatz conjecture
#if num is even, divide it by 2
#if num is odd, new number is equal to 3n+1


def checkNum(num):
    iterations=1
    while(num!=1):
        if(num%2==0):
            num=int(num/2)            
        else:
            num = 3*num+1
        iterations+=1
        

    print(num,iterations)


#checkNum(12)#Output: 1 10
#checkNum(26)#Output: 1 11
checkNum(2000)#Output: 1 113
&lt;/pre&gt;
==Program adding statement to print all iterations==
&lt;pre&gt;
def checkNum(num):
    iterations=1
    while(num!=1):
        if(num%2==0):
            num=int(num/2)            
        else:
            num = 3*num+1
        print(iterations,&quot;:&quot;,num)
        iterations+=1
        

    print(num,iterations)
&lt;/pre&gt;
==Output==
===For checkNum(2000)===
&lt;pre&gt;
1 : 1000
2 : 500
3 : 250
4 : 125
5 : 376
6 : 188
7 : 94
8 : 47
9 : 142
10 : 71
11 : 214
12 : 107
13 : 322
14 : 161
15 : 484
16 : 242
17 : 121
18 : 364
19 : 182
20 : 91
21 : 274
22 : 137
23 : 412
24 : 206
25 : 103
26 : 310
27 : 155
28 : 466
29 : 233
30 : 700
31 : 350
32 : 175
33 : 526
34 : 263
35 : 790
36 : 395
37 : 1186
38 : 593
39 : 1780
40 : 890
41 : 445
42 : 1336
43 : 668
44 : 334
45 : 167
46 : 502
47 : 251
48 : 754
49 : 377
50 : 1132
51 : 566
52 : 283
53 : 850
54 : 425
55 : 1276
56 : 638
57 : 319
58 : 958
59 : 479
60 : 1438
61 : 719
62 : 2158
63 : 1079
64 : 3238
65 : 1619
66 : 4858
67 : 2429
68 : 7288
69 : 3644
70 : 1822
71 : 911
72 : 2734
73 : 1367
74 : 4102
75 : 2051
76 : 6154
77 : 3077
78 : 9232
79 : 4616
80 : 2308
81 : 1154
82 : 577
83 : 1732
84 : 866
85 : 433
86 : 1300
87 : 650
88 : 325
89 : 976
90 : 488
91 : 244
92 : 122
93 : 61
94 : 184
95 : 92
96 : 46
97 : 23
98 : 70
99 : 35
100 : 106
101 : 53
102 : 160
103 : 80
104 : 40
105 : 20
106 : 10
107 : 5
108 : 16
109 : 8
110 : 4
111 : 2
112 : 1
1 113
&lt;/pre&gt;

===For checkNum(5000)===
&lt;pre&gt;
1 : 2500
2 : 1250
3 : 625
4 : 1876
5 : 938
6 : 469
7 : 1408
8 : 704
9 : 352
10 : 176
11 : 88
12 : 44
13 : 22
14 : 11
15 : 34
16 : 17
17 : 52
18 : 26
19 : 13
20 : 40
21 : 20
22 : 10
23 : 5
24 : 16
25 : 8
26 : 4
27 : 2
28 : 1
1 29
&lt;/pre&gt;
===For checkNum(25000000)===
&lt;pre&gt;
1 : 12500000
2 : 6250000
3 : 3125000
4 : 1562500
5 : 781250
6 : 390625
7 : 1171876
8 : 585938
9 : 292969
10 : 878908
11 : 439454
12 : 219727
13 : 659182
14 : 329591
15 : 988774
16 : 494387
17 : 1483162
18 : 741581
19 : 2224744
20 : 1112372
21 : 556186
22 : 278093
23 : 834280
24 : 417140
25 : 208570
26 : 104285
27 : 312856
28 : 156428
29 : 78214
30 : 39107
31 : 117322
32 : 58661
33 : 175984
34 : 87992
35 : 43996
36 : 21998
37 : 10999
38 : 32998
39 : 16499
40 : 49498
41 : 24749
42 : 74248
43 : 37124
44 : 18562
45 : 9281
46 : 27844
47 : 13922
48 : 6961
49 : 20884
50 : 10442
51 : 5221
52 : 15664
53 : 7832
54 : 3916
55 : 1958
56 : 979
57 : 2938
58 : 1469
59 : 4408
60 : 2204
61 : 1102
62 : 551
63 : 1654
64 : 827
65 : 2482
66 : 1241
67 : 3724
68 : 1862
69 : 931
70 : 2794
71 : 1397
72 : 4192
73 : 2096
74 : 1048
75 : 524
76 : 262
77 : 131
78 : 394
79 : 197
80 : 592
81 : 296
82 : 148
83 : 74
84 : 37
85 : 112
86 : 56
87 : 28
88 : 14
89 : 7
90 : 22
91 : 11
92 : 34
93 : 17
94 : 52
95 : 26
96 : 13
97 : 40
98 : 20
99 : 10
100 : 5
101 : 16
102 : 8
103 : 4
104 : 2
105 : 1
1 106
&lt;/pre&gt;

Happy Life ahead!!!
[[File:end1.png]]</text>
      <sha1>qevs0u29qang5oi12lpx7q580clxjru</sha1>
    </revision>
    <revision>
      <id>4319</id>
      <parentid>4317</parentid>
      <timestamp>2018-10-15T06:28:04Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* Page Rank - How does Google Work */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="4147">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_12 Contributors of this page]

=Page Rank - How does Google Work=
One web page is having link to other page, that is a page is referring to other page. Google uses ''Page Rank'' algorithm to choose which page should be displayed first.

[[File:rank0.png]]

[[File:rank1.png]]

=Collatz Conjecture=
Taught by Sudarshan sir and Amit sir, and Edited by Ms. Ami Tusharkant Choksi

If a number is even, divide it by ''2'', if it is odd, make multiply it by ''3'' and add ''1'', till you get ''1''. This simple problem is called, ''Collatz Conjecture''. 

[[File:collatz1.png]]

[[File:collatz2.png]]

[[File:collatz3.png]]

[[File:collatz4.png]]

[[File:collatz5.png]]

Number is bigger doesn't mean more iterations are required. One can notice, from the output of the following program. 



The program to implement the same is as follows:
==Program==
&lt;pre&gt;
#collatz conjecture
#if num is even, divide it by 2
#if num is odd, new number is equal to 3n+1


def checkNum(num):
    iterations=1
    while(num!=1):
        if(num%2==0):
            num=int(num/2)            
        else:
            num = 3*num+1
        iterations+=1
        

    print(num,iterations)


#checkNum(12)#Output: 1 10
#checkNum(26)#Output: 1 11
checkNum(2000)#Output: 1 113
&lt;/pre&gt;
==Program adding statement to print all iterations==
&lt;pre&gt;
def checkNum(num):
    iterations=1
    while(num!=1):
        if(num%2==0):
            num=int(num/2)            
        else:
            num = 3*num+1
        print(iterations,&quot;:&quot;,num)
        iterations+=1
        

    print(num,iterations)
&lt;/pre&gt;
==Output==
===For checkNum(2000)===
&lt;pre&gt;
1 : 1000
2 : 500
3 : 250
4 : 125
5 : 376
6 : 188
7 : 94
8 : 47
9 : 142
10 : 71
11 : 214
12 : 107
13 : 322
14 : 161
15 : 484
16 : 242
17 : 121
18 : 364
19 : 182
20 : 91
21 : 274
22 : 137
23 : 412
24 : 206
25 : 103
26 : 310
27 : 155
28 : 466
29 : 233
30 : 700
31 : 350
32 : 175
33 : 526
34 : 263
35 : 790
36 : 395
37 : 1186
38 : 593
39 : 1780
40 : 890
41 : 445
42 : 1336
43 : 668
44 : 334
45 : 167
46 : 502
47 : 251
48 : 754
49 : 377
50 : 1132
51 : 566
52 : 283
53 : 850
54 : 425
55 : 1276
56 : 638
57 : 319
58 : 958
59 : 479
60 : 1438
61 : 719
62 : 2158
63 : 1079
64 : 3238
65 : 1619
66 : 4858
67 : 2429
68 : 7288
69 : 3644
70 : 1822
71 : 911
72 : 2734
73 : 1367
74 : 4102
75 : 2051
76 : 6154
77 : 3077
78 : 9232
79 : 4616
80 : 2308
81 : 1154
82 : 577
83 : 1732
84 : 866
85 : 433
86 : 1300
87 : 650
88 : 325
89 : 976
90 : 488
91 : 244
92 : 122
93 : 61
94 : 184
95 : 92
96 : 46
97 : 23
98 : 70
99 : 35
100 : 106
101 : 53
102 : 160
103 : 80
104 : 40
105 : 20
106 : 10
107 : 5
108 : 16
109 : 8
110 : 4
111 : 2
112 : 1
1 113
&lt;/pre&gt;

===For checkNum(5000)===
&lt;pre&gt;
1 : 2500
2 : 1250
3 : 625
4 : 1876
5 : 938
6 : 469
7 : 1408
8 : 704
9 : 352
10 : 176
11 : 88
12 : 44
13 : 22
14 : 11
15 : 34
16 : 17
17 : 52
18 : 26
19 : 13
20 : 40
21 : 20
22 : 10
23 : 5
24 : 16
25 : 8
26 : 4
27 : 2
28 : 1
1 29
&lt;/pre&gt;
===For checkNum(25000000)===
&lt;pre&gt;
1 : 12500000
2 : 6250000
3 : 3125000
4 : 1562500
5 : 781250
6 : 390625
7 : 1171876
8 : 585938
9 : 292969
10 : 878908
11 : 439454
12 : 219727
13 : 659182
14 : 329591
15 : 988774
16 : 494387
17 : 1483162
18 : 741581
19 : 2224744
20 : 1112372
21 : 556186
22 : 278093
23 : 834280
24 : 417140
25 : 208570
26 : 104285
27 : 312856
28 : 156428
29 : 78214
30 : 39107
31 : 117322
32 : 58661
33 : 175984
34 : 87992
35 : 43996
36 : 21998
37 : 10999
38 : 32998
39 : 16499
40 : 49498
41 : 24749
42 : 74248
43 : 37124
44 : 18562
45 : 9281
46 : 27844
47 : 13922
48 : 6961
49 : 20884
50 : 10442
51 : 5221
52 : 15664
53 : 7832
54 : 3916
55 : 1958
56 : 979
57 : 2938
58 : 1469
59 : 4408
60 : 2204
61 : 1102
62 : 551
63 : 1654
64 : 827
65 : 2482
66 : 1241
67 : 3724
68 : 1862
69 : 931
70 : 2794
71 : 1397
72 : 4192
73 : 2096
74 : 1048
75 : 524
76 : 262
77 : 131
78 : 394
79 : 197
80 : 592
81 : 296
82 : 148
83 : 74
84 : 37
85 : 112
86 : 56
87 : 28
88 : 14
89 : 7
90 : 22
91 : 11
92 : 34
93 : 17
94 : 52
95 : 26
96 : 13
97 : 40
98 : 20
99 : 10
100 : 5
101 : 16
102 : 8
103 : 4
104 : 2
105 : 1
1 106
&lt;/pre&gt;

Happy Life ahead!!!
[[File:end1.png]]</text>
      <sha1>d3dvfch9skx7if62dquesvab6zw3zwl</sha1>
    </revision>
    <revision>
      <id>4320</id>
      <parentid>4319</parentid>
      <timestamp>2018-10-15T06:29:18Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* Page Rank - How does Google Work */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="4127">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_12 Contributors of this page]

=Page Rank - How does Google Work=
One web page is having link to other page, that is a page is referring to other page. Google uses ''Page Rank'' algorithm to choose which page should be displayed first.

[[File:rank0.png]]

=Collatz Conjecture=
Taught by Sudarshan sir and Amit sir, and Edited by Ms. Ami Tusharkant Choksi

If a number is even, divide it by ''2'', if it is odd, make multiply it by ''3'' and add ''1'', till you get ''1''. This simple problem is called, ''Collatz Conjecture''. 

[[File:collatz1.png]]

[[File:collatz2.png]]

[[File:collatz3.png]]

[[File:collatz4.png]]

[[File:collatz5.png]]

Number is bigger doesn't mean more iterations are required. One can notice, from the output of the following program. 



The program to implement the same is as follows:
==Program==
&lt;pre&gt;
#collatz conjecture
#if num is even, divide it by 2
#if num is odd, new number is equal to 3n+1


def checkNum(num):
    iterations=1
    while(num!=1):
        if(num%2==0):
            num=int(num/2)            
        else:
            num = 3*num+1
        iterations+=1
        

    print(num,iterations)


#checkNum(12)#Output: 1 10
#checkNum(26)#Output: 1 11
checkNum(2000)#Output: 1 113
&lt;/pre&gt;
==Program adding statement to print all iterations==
&lt;pre&gt;
def checkNum(num):
    iterations=1
    while(num!=1):
        if(num%2==0):
            num=int(num/2)            
        else:
            num = 3*num+1
        print(iterations,&quot;:&quot;,num)
        iterations+=1
        

    print(num,iterations)
&lt;/pre&gt;
==Output==
===For checkNum(2000)===
&lt;pre&gt;
1 : 1000
2 : 500
3 : 250
4 : 125
5 : 376
6 : 188
7 : 94
8 : 47
9 : 142
10 : 71
11 : 214
12 : 107
13 : 322
14 : 161
15 : 484
16 : 242
17 : 121
18 : 364
19 : 182
20 : 91
21 : 274
22 : 137
23 : 412
24 : 206
25 : 103
26 : 310
27 : 155
28 : 466
29 : 233
30 : 700
31 : 350
32 : 175
33 : 526
34 : 263
35 : 790
36 : 395
37 : 1186
38 : 593
39 : 1780
40 : 890
41 : 445
42 : 1336
43 : 668
44 : 334
45 : 167
46 : 502
47 : 251
48 : 754
49 : 377
50 : 1132
51 : 566
52 : 283
53 : 850
54 : 425
55 : 1276
56 : 638
57 : 319
58 : 958
59 : 479
60 : 1438
61 : 719
62 : 2158
63 : 1079
64 : 3238
65 : 1619
66 : 4858
67 : 2429
68 : 7288
69 : 3644
70 : 1822
71 : 911
72 : 2734
73 : 1367
74 : 4102
75 : 2051
76 : 6154
77 : 3077
78 : 9232
79 : 4616
80 : 2308
81 : 1154
82 : 577
83 : 1732
84 : 866
85 : 433
86 : 1300
87 : 650
88 : 325
89 : 976
90 : 488
91 : 244
92 : 122
93 : 61
94 : 184
95 : 92
96 : 46
97 : 23
98 : 70
99 : 35
100 : 106
101 : 53
102 : 160
103 : 80
104 : 40
105 : 20
106 : 10
107 : 5
108 : 16
109 : 8
110 : 4
111 : 2
112 : 1
1 113
&lt;/pre&gt;

===For checkNum(5000)===
&lt;pre&gt;
1 : 2500
2 : 1250
3 : 625
4 : 1876
5 : 938
6 : 469
7 : 1408
8 : 704
9 : 352
10 : 176
11 : 88
12 : 44
13 : 22
14 : 11
15 : 34
16 : 17
17 : 52
18 : 26
19 : 13
20 : 40
21 : 20
22 : 10
23 : 5
24 : 16
25 : 8
26 : 4
27 : 2
28 : 1
1 29
&lt;/pre&gt;
===For checkNum(25000000)===
&lt;pre&gt;
1 : 12500000
2 : 6250000
3 : 3125000
4 : 1562500
5 : 781250
6 : 390625
7 : 1171876
8 : 585938
9 : 292969
10 : 878908
11 : 439454
12 : 219727
13 : 659182
14 : 329591
15 : 988774
16 : 494387
17 : 1483162
18 : 741581
19 : 2224744
20 : 1112372
21 : 556186
22 : 278093
23 : 834280
24 : 417140
25 : 208570
26 : 104285
27 : 312856
28 : 156428
29 : 78214
30 : 39107
31 : 117322
32 : 58661
33 : 175984
34 : 87992
35 : 43996
36 : 21998
37 : 10999
38 : 32998
39 : 16499
40 : 49498
41 : 24749
42 : 74248
43 : 37124
44 : 18562
45 : 9281
46 : 27844
47 : 13922
48 : 6961
49 : 20884
50 : 10442
51 : 5221
52 : 15664
53 : 7832
54 : 3916
55 : 1958
56 : 979
57 : 2938
58 : 1469
59 : 4408
60 : 2204
61 : 1102
62 : 551
63 : 1654
64 : 827
65 : 2482
66 : 1241
67 : 3724
68 : 1862
69 : 931
70 : 2794
71 : 1397
72 : 4192
73 : 2096
74 : 1048
75 : 524
76 : 262
77 : 131
78 : 394
79 : 197
80 : 592
81 : 296
82 : 148
83 : 74
84 : 37
85 : 112
86 : 56
87 : 28
88 : 14
89 : 7
90 : 22
91 : 11
92 : 34
93 : 17
94 : 52
95 : 26
96 : 13
97 : 40
98 : 20
99 : 10
100 : 5
101 : 16
102 : 8
103 : 4
104 : 2
105 : 1
1 106
&lt;/pre&gt;

Happy Life ahead!!!
[[File:end1.png]]</text>
      <sha1>pcm1p2y5e8regfo5jwqmgjgga9pa40p</sha1>
    </revision>
    <revision>
      <id>4322</id>
      <parentid>4320</parentid>
      <timestamp>2018-10-15T06:30:03Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* Page Rank - How does Google Work */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="4147">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_12 Contributors of this page]

=Page Rank - How does Google Work=
One web page is having link to other page, that is a page is referring to other page. Google uses ''Page Rank'' algorithm to choose which page should be displayed first.

[[File:rank0.png]]

[[File:rank1.png]]

=Collatz Conjecture=
Taught by Sudarshan sir and Amit sir, and Edited by Ms. Ami Tusharkant Choksi

If a number is even, divide it by ''2'', if it is odd, make multiply it by ''3'' and add ''1'', till you get ''1''. This simple problem is called, ''Collatz Conjecture''. 

[[File:collatz1.png]]

[[File:collatz2.png]]

[[File:collatz3.png]]

[[File:collatz4.png]]

[[File:collatz5.png]]

Number is bigger doesn't mean more iterations are required. One can notice, from the output of the following program. 



The program to implement the same is as follows:
==Program==
&lt;pre&gt;
#collatz conjecture
#if num is even, divide it by 2
#if num is odd, new number is equal to 3n+1


def checkNum(num):
    iterations=1
    while(num!=1):
        if(num%2==0):
            num=int(num/2)            
        else:
            num = 3*num+1
        iterations+=1
        

    print(num,iterations)


#checkNum(12)#Output: 1 10
#checkNum(26)#Output: 1 11
checkNum(2000)#Output: 1 113
&lt;/pre&gt;
==Program adding statement to print all iterations==
&lt;pre&gt;
def checkNum(num):
    iterations=1
    while(num!=1):
        if(num%2==0):
            num=int(num/2)            
        else:
            num = 3*num+1
        print(iterations,&quot;:&quot;,num)
        iterations+=1
        

    print(num,iterations)
&lt;/pre&gt;
==Output==
===For checkNum(2000)===
&lt;pre&gt;
1 : 1000
2 : 500
3 : 250
4 : 125
5 : 376
6 : 188
7 : 94
8 : 47
9 : 142
10 : 71
11 : 214
12 : 107
13 : 322
14 : 161
15 : 484
16 : 242
17 : 121
18 : 364
19 : 182
20 : 91
21 : 274
22 : 137
23 : 412
24 : 206
25 : 103
26 : 310
27 : 155
28 : 466
29 : 233
30 : 700
31 : 350
32 : 175
33 : 526
34 : 263
35 : 790
36 : 395
37 : 1186
38 : 593
39 : 1780
40 : 890
41 : 445
42 : 1336
43 : 668
44 : 334
45 : 167
46 : 502
47 : 251
48 : 754
49 : 377
50 : 1132
51 : 566
52 : 283
53 : 850
54 : 425
55 : 1276
56 : 638
57 : 319
58 : 958
59 : 479
60 : 1438
61 : 719
62 : 2158
63 : 1079
64 : 3238
65 : 1619
66 : 4858
67 : 2429
68 : 7288
69 : 3644
70 : 1822
71 : 911
72 : 2734
73 : 1367
74 : 4102
75 : 2051
76 : 6154
77 : 3077
78 : 9232
79 : 4616
80 : 2308
81 : 1154
82 : 577
83 : 1732
84 : 866
85 : 433
86 : 1300
87 : 650
88 : 325
89 : 976
90 : 488
91 : 244
92 : 122
93 : 61
94 : 184
95 : 92
96 : 46
97 : 23
98 : 70
99 : 35
100 : 106
101 : 53
102 : 160
103 : 80
104 : 40
105 : 20
106 : 10
107 : 5
108 : 16
109 : 8
110 : 4
111 : 2
112 : 1
1 113
&lt;/pre&gt;

===For checkNum(5000)===
&lt;pre&gt;
1 : 2500
2 : 1250
3 : 625
4 : 1876
5 : 938
6 : 469
7 : 1408
8 : 704
9 : 352
10 : 176
11 : 88
12 : 44
13 : 22
14 : 11
15 : 34
16 : 17
17 : 52
18 : 26
19 : 13
20 : 40
21 : 20
22 : 10
23 : 5
24 : 16
25 : 8
26 : 4
27 : 2
28 : 1
1 29
&lt;/pre&gt;
===For checkNum(25000000)===
&lt;pre&gt;
1 : 12500000
2 : 6250000
3 : 3125000
4 : 1562500
5 : 781250
6 : 390625
7 : 1171876
8 : 585938
9 : 292969
10 : 878908
11 : 439454
12 : 219727
13 : 659182
14 : 329591
15 : 988774
16 : 494387
17 : 1483162
18 : 741581
19 : 2224744
20 : 1112372
21 : 556186
22 : 278093
23 : 834280
24 : 417140
25 : 208570
26 : 104285
27 : 312856
28 : 156428
29 : 78214
30 : 39107
31 : 117322
32 : 58661
33 : 175984
34 : 87992
35 : 43996
36 : 21998
37 : 10999
38 : 32998
39 : 16499
40 : 49498
41 : 24749
42 : 74248
43 : 37124
44 : 18562
45 : 9281
46 : 27844
47 : 13922
48 : 6961
49 : 20884
50 : 10442
51 : 5221
52 : 15664
53 : 7832
54 : 3916
55 : 1958
56 : 979
57 : 2938
58 : 1469
59 : 4408
60 : 2204
61 : 1102
62 : 551
63 : 1654
64 : 827
65 : 2482
66 : 1241
67 : 3724
68 : 1862
69 : 931
70 : 2794
71 : 1397
72 : 4192
73 : 2096
74 : 1048
75 : 524
76 : 262
77 : 131
78 : 394
79 : 197
80 : 592
81 : 296
82 : 148
83 : 74
84 : 37
85 : 112
86 : 56
87 : 28
88 : 14
89 : 7
90 : 22
91 : 11
92 : 34
93 : 17
94 : 52
95 : 26
96 : 13
97 : 40
98 : 20
99 : 10
100 : 5
101 : 16
102 : 8
103 : 4
104 : 2
105 : 1
1 106
&lt;/pre&gt;

Happy Life ahead!!!
[[File:end1.png]]</text>
      <sha1>d3dvfch9skx7if62dquesvab6zw3zwl</sha1>
    </revision>
    <revision>
      <id>4324</id>
      <parentid>4322</parentid>
      <timestamp>2018-10-15T07:00:22Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* Page Rank - How does Google Work */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="4187">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_12 Contributors of this page]

=Page Rank - How does Google Work=
One web page is having link to other page, that is a page is referring to other page. Google uses ''Page Rank'' algorithm to choose which page should be displayed first.

[[File:rank0.png]]

[[File:rank1.png]]

[[File:rank2.png]]

[[File:rank3.png]]

=Collatz Conjecture=
Taught by Sudarshan sir and Amit sir, and Edited by Ms. Ami Tusharkant Choksi

If a number is even, divide it by ''2'', if it is odd, make multiply it by ''3'' and add ''1'', till you get ''1''. This simple problem is called, ''Collatz Conjecture''. 

[[File:collatz1.png]]

[[File:collatz2.png]]

[[File:collatz3.png]]

[[File:collatz4.png]]

[[File:collatz5.png]]

Number is bigger doesn't mean more iterations are required. One can notice, from the output of the following program. 



The program to implement the same is as follows:
==Program==
&lt;pre&gt;
#collatz conjecture
#if num is even, divide it by 2
#if num is odd, new number is equal to 3n+1


def checkNum(num):
    iterations=1
    while(num!=1):
        if(num%2==0):
            num=int(num/2)            
        else:
            num = 3*num+1
        iterations+=1
        

    print(num,iterations)


#checkNum(12)#Output: 1 10
#checkNum(26)#Output: 1 11
checkNum(2000)#Output: 1 113
&lt;/pre&gt;
==Program adding statement to print all iterations==
&lt;pre&gt;
def checkNum(num):
    iterations=1
    while(num!=1):
        if(num%2==0):
            num=int(num/2)            
        else:
            num = 3*num+1
        print(iterations,&quot;:&quot;,num)
        iterations+=1
        

    print(num,iterations)
&lt;/pre&gt;
==Output==
===For checkNum(2000)===
&lt;pre&gt;
1 : 1000
2 : 500
3 : 250
4 : 125
5 : 376
6 : 188
7 : 94
8 : 47
9 : 142
10 : 71
11 : 214
12 : 107
13 : 322
14 : 161
15 : 484
16 : 242
17 : 121
18 : 364
19 : 182
20 : 91
21 : 274
22 : 137
23 : 412
24 : 206
25 : 103
26 : 310
27 : 155
28 : 466
29 : 233
30 : 700
31 : 350
32 : 175
33 : 526
34 : 263
35 : 790
36 : 395
37 : 1186
38 : 593
39 : 1780
40 : 890
41 : 445
42 : 1336
43 : 668
44 : 334
45 : 167
46 : 502
47 : 251
48 : 754
49 : 377
50 : 1132
51 : 566
52 : 283
53 : 850
54 : 425
55 : 1276
56 : 638
57 : 319
58 : 958
59 : 479
60 : 1438
61 : 719
62 : 2158
63 : 1079
64 : 3238
65 : 1619
66 : 4858
67 : 2429
68 : 7288
69 : 3644
70 : 1822
71 : 911
72 : 2734
73 : 1367
74 : 4102
75 : 2051
76 : 6154
77 : 3077
78 : 9232
79 : 4616
80 : 2308
81 : 1154
82 : 577
83 : 1732
84 : 866
85 : 433
86 : 1300
87 : 650
88 : 325
89 : 976
90 : 488
91 : 244
92 : 122
93 : 61
94 : 184
95 : 92
96 : 46
97 : 23
98 : 70
99 : 35
100 : 106
101 : 53
102 : 160
103 : 80
104 : 40
105 : 20
106 : 10
107 : 5
108 : 16
109 : 8
110 : 4
111 : 2
112 : 1
1 113
&lt;/pre&gt;

===For checkNum(5000)===
&lt;pre&gt;
1 : 2500
2 : 1250
3 : 625
4 : 1876
5 : 938
6 : 469
7 : 1408
8 : 704
9 : 352
10 : 176
11 : 88
12 : 44
13 : 22
14 : 11
15 : 34
16 : 17
17 : 52
18 : 26
19 : 13
20 : 40
21 : 20
22 : 10
23 : 5
24 : 16
25 : 8
26 : 4
27 : 2
28 : 1
1 29
&lt;/pre&gt;
===For checkNum(25000000)===
&lt;pre&gt;
1 : 12500000
2 : 6250000
3 : 3125000
4 : 1562500
5 : 781250
6 : 390625
7 : 1171876
8 : 585938
9 : 292969
10 : 878908
11 : 439454
12 : 219727
13 : 659182
14 : 329591
15 : 988774
16 : 494387
17 : 1483162
18 : 741581
19 : 2224744
20 : 1112372
21 : 556186
22 : 278093
23 : 834280
24 : 417140
25 : 208570
26 : 104285
27 : 312856
28 : 156428
29 : 78214
30 : 39107
31 : 117322
32 : 58661
33 : 175984
34 : 87992
35 : 43996
36 : 21998
37 : 10999
38 : 32998
39 : 16499
40 : 49498
41 : 24749
42 : 74248
43 : 37124
44 : 18562
45 : 9281
46 : 27844
47 : 13922
48 : 6961
49 : 20884
50 : 10442
51 : 5221
52 : 15664
53 : 7832
54 : 3916
55 : 1958
56 : 979
57 : 2938
58 : 1469
59 : 4408
60 : 2204
61 : 1102
62 : 551
63 : 1654
64 : 827
65 : 2482
66 : 1241
67 : 3724
68 : 1862
69 : 931
70 : 2794
71 : 1397
72 : 4192
73 : 2096
74 : 1048
75 : 524
76 : 262
77 : 131
78 : 394
79 : 197
80 : 592
81 : 296
82 : 148
83 : 74
84 : 37
85 : 112
86 : 56
87 : 28
88 : 14
89 : 7
90 : 22
91 : 11
92 : 34
93 : 17
94 : 52
95 : 26
96 : 13
97 : 40
98 : 20
99 : 10
100 : 5
101 : 16
102 : 8
103 : 4
104 : 2
105 : 1
1 106
&lt;/pre&gt;

Happy Life ahead!!!
[[File:end1.png]]</text>
      <sha1>i7hr73jg8wrsbg4t2g0ir7m8ghy4gnx</sha1>
    </revision>
    <revision>
      <id>4327</id>
      <parentid>4324</parentid>
      <timestamp>2018-10-15T07:02:58Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* Page Rank - How does Google Work */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="4207">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_12 Contributors of this page]

=Page Rank - How does Google Work=
One web page is having link to other page, that is a page is referring to other page. Google uses ''Page Rank'' algorithm to choose which page should be displayed first.

[[File:rank0.png]]

[[File:rank1.png]]

[[File:rank2.png]]

[[File:rank3.png]]

[[File:rank4.png]]

=Collatz Conjecture=
Taught by Sudarshan sir and Amit sir, and Edited by Ms. Ami Tusharkant Choksi

If a number is even, divide it by ''2'', if it is odd, make multiply it by ''3'' and add ''1'', till you get ''1''. This simple problem is called, ''Collatz Conjecture''. 

[[File:collatz1.png]]

[[File:collatz2.png]]

[[File:collatz3.png]]

[[File:collatz4.png]]

[[File:collatz5.png]]

Number is bigger doesn't mean more iterations are required. One can notice, from the output of the following program. 



The program to implement the same is as follows:
==Program==
&lt;pre&gt;
#collatz conjecture
#if num is even, divide it by 2
#if num is odd, new number is equal to 3n+1


def checkNum(num):
    iterations=1
    while(num!=1):
        if(num%2==0):
            num=int(num/2)            
        else:
            num = 3*num+1
        iterations+=1
        

    print(num,iterations)


#checkNum(12)#Output: 1 10
#checkNum(26)#Output: 1 11
checkNum(2000)#Output: 1 113
&lt;/pre&gt;
==Program adding statement to print all iterations==
&lt;pre&gt;
def checkNum(num):
    iterations=1
    while(num!=1):
        if(num%2==0):
            num=int(num/2)            
        else:
            num = 3*num+1
        print(iterations,&quot;:&quot;,num)
        iterations+=1
        

    print(num,iterations)
&lt;/pre&gt;
==Output==
===For checkNum(2000)===
&lt;pre&gt;
1 : 1000
2 : 500
3 : 250
4 : 125
5 : 376
6 : 188
7 : 94
8 : 47
9 : 142
10 : 71
11 : 214
12 : 107
13 : 322
14 : 161
15 : 484
16 : 242
17 : 121
18 : 364
19 : 182
20 : 91
21 : 274
22 : 137
23 : 412
24 : 206
25 : 103
26 : 310
27 : 155
28 : 466
29 : 233
30 : 700
31 : 350
32 : 175
33 : 526
34 : 263
35 : 790
36 : 395
37 : 1186
38 : 593
39 : 1780
40 : 890
41 : 445
42 : 1336
43 : 668
44 : 334
45 : 167
46 : 502
47 : 251
48 : 754
49 : 377
50 : 1132
51 : 566
52 : 283
53 : 850
54 : 425
55 : 1276
56 : 638
57 : 319
58 : 958
59 : 479
60 : 1438
61 : 719
62 : 2158
63 : 1079
64 : 3238
65 : 1619
66 : 4858
67 : 2429
68 : 7288
69 : 3644
70 : 1822
71 : 911
72 : 2734
73 : 1367
74 : 4102
75 : 2051
76 : 6154
77 : 3077
78 : 9232
79 : 4616
80 : 2308
81 : 1154
82 : 577
83 : 1732
84 : 866
85 : 433
86 : 1300
87 : 650
88 : 325
89 : 976
90 : 488
91 : 244
92 : 122
93 : 61
94 : 184
95 : 92
96 : 46
97 : 23
98 : 70
99 : 35
100 : 106
101 : 53
102 : 160
103 : 80
104 : 40
105 : 20
106 : 10
107 : 5
108 : 16
109 : 8
110 : 4
111 : 2
112 : 1
1 113
&lt;/pre&gt;

===For checkNum(5000)===
&lt;pre&gt;
1 : 2500
2 : 1250
3 : 625
4 : 1876
5 : 938
6 : 469
7 : 1408
8 : 704
9 : 352
10 : 176
11 : 88
12 : 44
13 : 22
14 : 11
15 : 34
16 : 17
17 : 52
18 : 26
19 : 13
20 : 40
21 : 20
22 : 10
23 : 5
24 : 16
25 : 8
26 : 4
27 : 2
28 : 1
1 29
&lt;/pre&gt;
===For checkNum(25000000)===
&lt;pre&gt;
1 : 12500000
2 : 6250000
3 : 3125000
4 : 1562500
5 : 781250
6 : 390625
7 : 1171876
8 : 585938
9 : 292969
10 : 878908
11 : 439454
12 : 219727
13 : 659182
14 : 329591
15 : 988774
16 : 494387
17 : 1483162
18 : 741581
19 : 2224744
20 : 1112372
21 : 556186
22 : 278093
23 : 834280
24 : 417140
25 : 208570
26 : 104285
27 : 312856
28 : 156428
29 : 78214
30 : 39107
31 : 117322
32 : 58661
33 : 175984
34 : 87992
35 : 43996
36 : 21998
37 : 10999
38 : 32998
39 : 16499
40 : 49498
41 : 24749
42 : 74248
43 : 37124
44 : 18562
45 : 9281
46 : 27844
47 : 13922
48 : 6961
49 : 20884
50 : 10442
51 : 5221
52 : 15664
53 : 7832
54 : 3916
55 : 1958
56 : 979
57 : 2938
58 : 1469
59 : 4408
60 : 2204
61 : 1102
62 : 551
63 : 1654
64 : 827
65 : 2482
66 : 1241
67 : 3724
68 : 1862
69 : 931
70 : 2794
71 : 1397
72 : 4192
73 : 2096
74 : 1048
75 : 524
76 : 262
77 : 131
78 : 394
79 : 197
80 : 592
81 : 296
82 : 148
83 : 74
84 : 37
85 : 112
86 : 56
87 : 28
88 : 14
89 : 7
90 : 22
91 : 11
92 : 34
93 : 17
94 : 52
95 : 26
96 : 13
97 : 40
98 : 20
99 : 10
100 : 5
101 : 16
102 : 8
103 : 4
104 : 2
105 : 1
1 106
&lt;/pre&gt;

Happy Life ahead!!!
[[File:end1.png]]</text>
      <sha1>7adz61ji26fx26yxz9hafuowemdrtvs</sha1>
    </revision>
    <revision>
      <id>4329</id>
      <parentid>4327</parentid>
      <timestamp>2018-10-15T07:11:39Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* Page Rank - How does Google Work */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="4349">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_12 Contributors of this page]

=Page Rank - How does Google Work=
One web page is having link to other page, that is a page is referring to other page. Google uses ''Page Rank'' algorithm to choose which page should be displayed first.

[[File:rank0.png]]

[[File:rank1.png]]

[[File:rank2.png]]

[[File:rank3.png]]

[[File:rank4.png]]

[[File:rank5.png]]

[[File:rank6.png]]

[[File:rank7.png]]

[[File:rank8.png]]

[[File:rank9.png]]

[[File:rank10.png]]

[[File:rank11.png]]

=Collatz Conjecture=
Taught by Sudarshan sir and Amit sir, and Edited by Ms. Ami Tusharkant Choksi

If a number is even, divide it by ''2'', if it is odd, make multiply it by ''3'' and add ''1'', till you get ''1''. This simple problem is called, ''Collatz Conjecture''. 

[[File:collatz1.png]]

[[File:collatz2.png]]

[[File:collatz3.png]]

[[File:collatz4.png]]

[[File:collatz5.png]]

Number is bigger doesn't mean more iterations are required. One can notice, from the output of the following program. 



The program to implement the same is as follows:
==Program==
&lt;pre&gt;
#collatz conjecture
#if num is even, divide it by 2
#if num is odd, new number is equal to 3n+1


def checkNum(num):
    iterations=1
    while(num!=1):
        if(num%2==0):
            num=int(num/2)            
        else:
            num = 3*num+1
        iterations+=1
        

    print(num,iterations)


#checkNum(12)#Output: 1 10
#checkNum(26)#Output: 1 11
checkNum(2000)#Output: 1 113
&lt;/pre&gt;
==Program adding statement to print all iterations==
&lt;pre&gt;
def checkNum(num):
    iterations=1
    while(num!=1):
        if(num%2==0):
            num=int(num/2)            
        else:
            num = 3*num+1
        print(iterations,&quot;:&quot;,num)
        iterations+=1
        

    print(num,iterations)
&lt;/pre&gt;
==Output==
===For checkNum(2000)===
&lt;pre&gt;
1 : 1000
2 : 500
3 : 250
4 : 125
5 : 376
6 : 188
7 : 94
8 : 47
9 : 142
10 : 71
11 : 214
12 : 107
13 : 322
14 : 161
15 : 484
16 : 242
17 : 121
18 : 364
19 : 182
20 : 91
21 : 274
22 : 137
23 : 412
24 : 206
25 : 103
26 : 310
27 : 155
28 : 466
29 : 233
30 : 700
31 : 350
32 : 175
33 : 526
34 : 263
35 : 790
36 : 395
37 : 1186
38 : 593
39 : 1780
40 : 890
41 : 445
42 : 1336
43 : 668
44 : 334
45 : 167
46 : 502
47 : 251
48 : 754
49 : 377
50 : 1132
51 : 566
52 : 283
53 : 850
54 : 425
55 : 1276
56 : 638
57 : 319
58 : 958
59 : 479
60 : 1438
61 : 719
62 : 2158
63 : 1079
64 : 3238
65 : 1619
66 : 4858
67 : 2429
68 : 7288
69 : 3644
70 : 1822
71 : 911
72 : 2734
73 : 1367
74 : 4102
75 : 2051
76 : 6154
77 : 3077
78 : 9232
79 : 4616
80 : 2308
81 : 1154
82 : 577
83 : 1732
84 : 866
85 : 433
86 : 1300
87 : 650
88 : 325
89 : 976
90 : 488
91 : 244
92 : 122
93 : 61
94 : 184
95 : 92
96 : 46
97 : 23
98 : 70
99 : 35
100 : 106
101 : 53
102 : 160
103 : 80
104 : 40
105 : 20
106 : 10
107 : 5
108 : 16
109 : 8
110 : 4
111 : 2
112 : 1
1 113
&lt;/pre&gt;

===For checkNum(5000)===
&lt;pre&gt;
1 : 2500
2 : 1250
3 : 625
4 : 1876
5 : 938
6 : 469
7 : 1408
8 : 704
9 : 352
10 : 176
11 : 88
12 : 44
13 : 22
14 : 11
15 : 34
16 : 17
17 : 52
18 : 26
19 : 13
20 : 40
21 : 20
22 : 10
23 : 5
24 : 16
25 : 8
26 : 4
27 : 2
28 : 1
1 29
&lt;/pre&gt;
===For checkNum(25000000)===
&lt;pre&gt;
1 : 12500000
2 : 6250000
3 : 3125000
4 : 1562500
5 : 781250
6 : 390625
7 : 1171876
8 : 585938
9 : 292969
10 : 878908
11 : 439454
12 : 219727
13 : 659182
14 : 329591
15 : 988774
16 : 494387
17 : 1483162
18 : 741581
19 : 2224744
20 : 1112372
21 : 556186
22 : 278093
23 : 834280
24 : 417140
25 : 208570
26 : 104285
27 : 312856
28 : 156428
29 : 78214
30 : 39107
31 : 117322
32 : 58661
33 : 175984
34 : 87992
35 : 43996
36 : 21998
37 : 10999
38 : 32998
39 : 16499
40 : 49498
41 : 24749
42 : 74248
43 : 37124
44 : 18562
45 : 9281
46 : 27844
47 : 13922
48 : 6961
49 : 20884
50 : 10442
51 : 5221
52 : 15664
53 : 7832
54 : 3916
55 : 1958
56 : 979
57 : 2938
58 : 1469
59 : 4408
60 : 2204
61 : 1102
62 : 551
63 : 1654
64 : 827
65 : 2482
66 : 1241
67 : 3724
68 : 1862
69 : 931
70 : 2794
71 : 1397
72 : 4192
73 : 2096
74 : 1048
75 : 524
76 : 262
77 : 131
78 : 394
79 : 197
80 : 592
81 : 296
82 : 148
83 : 74
84 : 37
85 : 112
86 : 56
87 : 28
88 : 14
89 : 7
90 : 22
91 : 11
92 : 34
93 : 17
94 : 52
95 : 26
96 : 13
97 : 40
98 : 20
99 : 10
100 : 5
101 : 16
102 : 8
103 : 4
104 : 2
105 : 1
1 106
&lt;/pre&gt;

Happy Life ahead!!!
[[File:end1.png]]</text>
      <sha1>erv2i2dlozrgchjh3bfngna3qnv36bb</sha1>
    </revision>
    <revision>
      <id>4337</id>
      <parentid>4329</parentid>
      <timestamp>2018-10-15T07:15:56Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* Page Rank - How does Google Work */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="4370">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_12 Contributors of this page]

=Page Rank - How does Google Work=
One web page is having link to other page, that is a page is referring to other page. Google uses ''Page Rank'' algorithm to choose which page should be displayed first.

[[File:rank0.png]]

[[File:rank1.png]]

[[File:rank2.png]]

[[File:rank3.png]]

[[File:rank4.png]]

[[File:rank5.png]]

[[File:rank6.png]]

[[File:rank7.png]]

[[File:rank8.png]]

[[File:rank9.png]]

[[File:rank10.png]]

[[File:rank11.png]]

[[File:mysore.png]]

=Collatz Conjecture=
Taught by Sudarshan sir and Amit sir, and Edited by Ms. Ami Tusharkant Choksi

If a number is even, divide it by ''2'', if it is odd, make multiply it by ''3'' and add ''1'', till you get ''1''. This simple problem is called, ''Collatz Conjecture''. 

[[File:collatz1.png]]

[[File:collatz2.png]]

[[File:collatz3.png]]

[[File:collatz4.png]]

[[File:collatz5.png]]

Number is bigger doesn't mean more iterations are required. One can notice, from the output of the following program. 



The program to implement the same is as follows:
==Program==
&lt;pre&gt;
#collatz conjecture
#if num is even, divide it by 2
#if num is odd, new number is equal to 3n+1


def checkNum(num):
    iterations=1
    while(num!=1):
        if(num%2==0):
            num=int(num/2)            
        else:
            num = 3*num+1
        iterations+=1
        

    print(num,iterations)


#checkNum(12)#Output: 1 10
#checkNum(26)#Output: 1 11
checkNum(2000)#Output: 1 113
&lt;/pre&gt;
==Program adding statement to print all iterations==
&lt;pre&gt;
def checkNum(num):
    iterations=1
    while(num!=1):
        if(num%2==0):
            num=int(num/2)            
        else:
            num = 3*num+1
        print(iterations,&quot;:&quot;,num)
        iterations+=1
        

    print(num,iterations)
&lt;/pre&gt;
==Output==
===For checkNum(2000)===
&lt;pre&gt;
1 : 1000
2 : 500
3 : 250
4 : 125
5 : 376
6 : 188
7 : 94
8 : 47
9 : 142
10 : 71
11 : 214
12 : 107
13 : 322
14 : 161
15 : 484
16 : 242
17 : 121
18 : 364
19 : 182
20 : 91
21 : 274
22 : 137
23 : 412
24 : 206
25 : 103
26 : 310
27 : 155
28 : 466
29 : 233
30 : 700
31 : 350
32 : 175
33 : 526
34 : 263
35 : 790
36 : 395
37 : 1186
38 : 593
39 : 1780
40 : 890
41 : 445
42 : 1336
43 : 668
44 : 334
45 : 167
46 : 502
47 : 251
48 : 754
49 : 377
50 : 1132
51 : 566
52 : 283
53 : 850
54 : 425
55 : 1276
56 : 638
57 : 319
58 : 958
59 : 479
60 : 1438
61 : 719
62 : 2158
63 : 1079
64 : 3238
65 : 1619
66 : 4858
67 : 2429
68 : 7288
69 : 3644
70 : 1822
71 : 911
72 : 2734
73 : 1367
74 : 4102
75 : 2051
76 : 6154
77 : 3077
78 : 9232
79 : 4616
80 : 2308
81 : 1154
82 : 577
83 : 1732
84 : 866
85 : 433
86 : 1300
87 : 650
88 : 325
89 : 976
90 : 488
91 : 244
92 : 122
93 : 61
94 : 184
95 : 92
96 : 46
97 : 23
98 : 70
99 : 35
100 : 106
101 : 53
102 : 160
103 : 80
104 : 40
105 : 20
106 : 10
107 : 5
108 : 16
109 : 8
110 : 4
111 : 2
112 : 1
1 113
&lt;/pre&gt;

===For checkNum(5000)===
&lt;pre&gt;
1 : 2500
2 : 1250
3 : 625
4 : 1876
5 : 938
6 : 469
7 : 1408
8 : 704
9 : 352
10 : 176
11 : 88
12 : 44
13 : 22
14 : 11
15 : 34
16 : 17
17 : 52
18 : 26
19 : 13
20 : 40
21 : 20
22 : 10
23 : 5
24 : 16
25 : 8
26 : 4
27 : 2
28 : 1
1 29
&lt;/pre&gt;
===For checkNum(25000000)===
&lt;pre&gt;
1 : 12500000
2 : 6250000
3 : 3125000
4 : 1562500
5 : 781250
6 : 390625
7 : 1171876
8 : 585938
9 : 292969
10 : 878908
11 : 439454
12 : 219727
13 : 659182
14 : 329591
15 : 988774
16 : 494387
17 : 1483162
18 : 741581
19 : 2224744
20 : 1112372
21 : 556186
22 : 278093
23 : 834280
24 : 417140
25 : 208570
26 : 104285
27 : 312856
28 : 156428
29 : 78214
30 : 39107
31 : 117322
32 : 58661
33 : 175984
34 : 87992
35 : 43996
36 : 21998
37 : 10999
38 : 32998
39 : 16499
40 : 49498
41 : 24749
42 : 74248
43 : 37124
44 : 18562
45 : 9281
46 : 27844
47 : 13922
48 : 6961
49 : 20884
50 : 10442
51 : 5221
52 : 15664
53 : 7832
54 : 3916
55 : 1958
56 : 979
57 : 2938
58 : 1469
59 : 4408
60 : 2204
61 : 1102
62 : 551
63 : 1654
64 : 827
65 : 2482
66 : 1241
67 : 3724
68 : 1862
69 : 931
70 : 2794
71 : 1397
72 : 4192
73 : 2096
74 : 1048
75 : 524
76 : 262
77 : 131
78 : 394
79 : 197
80 : 592
81 : 296
82 : 148
83 : 74
84 : 37
85 : 112
86 : 56
87 : 28
88 : 14
89 : 7
90 : 22
91 : 11
92 : 34
93 : 17
94 : 52
95 : 26
96 : 13
97 : 40
98 : 20
99 : 10
100 : 5
101 : 16
102 : 8
103 : 4
104 : 2
105 : 1
1 106
&lt;/pre&gt;

Happy Life ahead!!!
[[File:end1.png]]</text>
      <sha1>gc95gwo263l7x4f0tg4169uwwqq81x2</sha1>
    </revision>
    <revision>
      <id>4342</id>
      <parentid>4337</parentid>
      <timestamp>2018-10-15T12:52:15Z</timestamp>
      <contributor>
        <username>Sachdvipu</username>
        <id>3234</id>
      </contributor>
      <comment>/* Program */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="4617">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_12 Contributors of this page]

=Page Rank - How does Google Work=
One web page is having link to other page, that is a page is referring to other page. Google uses ''Page Rank'' algorithm to choose which page should be displayed first.

[[File:rank0.png]]

[[File:rank1.png]]

[[File:rank2.png]]

[[File:rank3.png]]

[[File:rank4.png]]

[[File:rank5.png]]

[[File:rank6.png]]

[[File:rank7.png]]

[[File:rank8.png]]

[[File:rank9.png]]

[[File:rank10.png]]

[[File:rank11.png]]

[[File:mysore.png]]

=Collatz Conjecture=
Taught by Sudarshan sir and Amit sir, and Edited by Ms. Ami Tusharkant Choksi

If a number is even, divide it by ''2'', if it is odd, make multiply it by ''3'' and add ''1'', till you get ''1''. This simple problem is called, ''Collatz Conjecture''. 

[[File:collatz1.png]]

[[File:collatz2.png]]

[[File:collatz3.png]]

[[File:collatz4.png]]

[[File:collatz5.png]]

Number is bigger doesn't mean more iterations are required. One can notice, from the output of the following program. 



The program to implement the same is as follows:
==Program==
&lt;pre&gt;
#collatz conjecture
#if num is even, divide it by 2
#if num is odd, new number is equal to 3n+1


def checkNum(num):
    iterations=1
    while(num!=1):
        if(num%2==0):
            num=int(num/2)            
        else:
            num = 3*num+1
        iterations+=1
        

    print(num,iterations)


#checkNum(12)#Output: 1 10
#checkNum(26)#Output: 1 11
checkNum(2000)#Output: 1 113
&lt;/pre&gt;

&lt;pre&gt;

#recursive approach

def checkNum(num):
    if num==1:
        return 1
    elif num%2==0:
        return checkNum(num/2)+1
    else:
        return checkNum(3*num +1)+1

&lt;/pre&gt;
output:
checkNum(26)
Out[27]: 11
checkNum(5000)
Out[28]: 29

==Program adding statement to print all iterations==
&lt;pre&gt;
def checkNum(num):
    iterations=1
    while(num!=1):
        if(num%2==0):
            num=int(num/2)            
        else:
            num = 3*num+1
        print(iterations,&quot;:&quot;,num)
        iterations+=1
        

    print(num,iterations)
&lt;/pre&gt;
==Output==
===For checkNum(2000)===
&lt;pre&gt;
1 : 1000
2 : 500
3 : 250
4 : 125
5 : 376
6 : 188
7 : 94
8 : 47
9 : 142
10 : 71
11 : 214
12 : 107
13 : 322
14 : 161
15 : 484
16 : 242
17 : 121
18 : 364
19 : 182
20 : 91
21 : 274
22 : 137
23 : 412
24 : 206
25 : 103
26 : 310
27 : 155
28 : 466
29 : 233
30 : 700
31 : 350
32 : 175
33 : 526
34 : 263
35 : 790
36 : 395
37 : 1186
38 : 593
39 : 1780
40 : 890
41 : 445
42 : 1336
43 : 668
44 : 334
45 : 167
46 : 502
47 : 251
48 : 754
49 : 377
50 : 1132
51 : 566
52 : 283
53 : 850
54 : 425
55 : 1276
56 : 638
57 : 319
58 : 958
59 : 479
60 : 1438
61 : 719
62 : 2158
63 : 1079
64 : 3238
65 : 1619
66 : 4858
67 : 2429
68 : 7288
69 : 3644
70 : 1822
71 : 911
72 : 2734
73 : 1367
74 : 4102
75 : 2051
76 : 6154
77 : 3077
78 : 9232
79 : 4616
80 : 2308
81 : 1154
82 : 577
83 : 1732
84 : 866
85 : 433
86 : 1300
87 : 650
88 : 325
89 : 976
90 : 488
91 : 244
92 : 122
93 : 61
94 : 184
95 : 92
96 : 46
97 : 23
98 : 70
99 : 35
100 : 106
101 : 53
102 : 160
103 : 80
104 : 40
105 : 20
106 : 10
107 : 5
108 : 16
109 : 8
110 : 4
111 : 2
112 : 1
1 113
&lt;/pre&gt;

===For checkNum(5000)===
&lt;pre&gt;
1 : 2500
2 : 1250
3 : 625
4 : 1876
5 : 938
6 : 469
7 : 1408
8 : 704
9 : 352
10 : 176
11 : 88
12 : 44
13 : 22
14 : 11
15 : 34
16 : 17
17 : 52
18 : 26
19 : 13
20 : 40
21 : 20
22 : 10
23 : 5
24 : 16
25 : 8
26 : 4
27 : 2
28 : 1
1 29
&lt;/pre&gt;
===For checkNum(25000000)===
&lt;pre&gt;
1 : 12500000
2 : 6250000
3 : 3125000
4 : 1562500
5 : 781250
6 : 390625
7 : 1171876
8 : 585938
9 : 292969
10 : 878908
11 : 439454
12 : 219727
13 : 659182
14 : 329591
15 : 988774
16 : 494387
17 : 1483162
18 : 741581
19 : 2224744
20 : 1112372
21 : 556186
22 : 278093
23 : 834280
24 : 417140
25 : 208570
26 : 104285
27 : 312856
28 : 156428
29 : 78214
30 : 39107
31 : 117322
32 : 58661
33 : 175984
34 : 87992
35 : 43996
36 : 21998
37 : 10999
38 : 32998
39 : 16499
40 : 49498
41 : 24749
42 : 74248
43 : 37124
44 : 18562
45 : 9281
46 : 27844
47 : 13922
48 : 6961
49 : 20884
50 : 10442
51 : 5221
52 : 15664
53 : 7832
54 : 3916
55 : 1958
56 : 979
57 : 2938
58 : 1469
59 : 4408
60 : 2204
61 : 1102
62 : 551
63 : 1654
64 : 827
65 : 2482
66 : 1241
67 : 3724
68 : 1862
69 : 931
70 : 2794
71 : 1397
72 : 4192
73 : 2096
74 : 1048
75 : 524
76 : 262
77 : 131
78 : 394
79 : 197
80 : 592
81 : 296
82 : 148
83 : 74
84 : 37
85 : 112
86 : 56
87 : 28
88 : 14
89 : 7
90 : 22
91 : 11
92 : 34
93 : 17
94 : 52
95 : 26
96 : 13
97 : 40
98 : 20
99 : 10
100 : 5
101 : 16
102 : 8
103 : 4
104 : 2
105 : 1
1 106
&lt;/pre&gt;

Happy Life ahead!!!
[[File:end1.png]]</text>
      <sha1>me24amt7j4ykqybypk0pg5jx80d71ex</sha1>
    </revision>
    <revision>
      <id>4343</id>
      <parentid>4342</parentid>
      <timestamp>2018-10-15T12:52:50Z</timestamp>
      <contributor>
        <username>Sachdvipu</username>
        <id>3234</id>
      </contributor>
      <comment>/* Program */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="4618">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_12 Contributors of this page]

=Page Rank - How does Google Work=
One web page is having link to other page, that is a page is referring to other page. Google uses ''Page Rank'' algorithm to choose which page should be displayed first.

[[File:rank0.png]]

[[File:rank1.png]]

[[File:rank2.png]]

[[File:rank3.png]]

[[File:rank4.png]]

[[File:rank5.png]]

[[File:rank6.png]]

[[File:rank7.png]]

[[File:rank8.png]]

[[File:rank9.png]]

[[File:rank10.png]]

[[File:rank11.png]]

[[File:mysore.png]]

=Collatz Conjecture=
Taught by Sudarshan sir and Amit sir, and Edited by Ms. Ami Tusharkant Choksi

If a number is even, divide it by ''2'', if it is odd, make multiply it by ''3'' and add ''1'', till you get ''1''. This simple problem is called, ''Collatz Conjecture''. 

[[File:collatz1.png]]

[[File:collatz2.png]]

[[File:collatz3.png]]

[[File:collatz4.png]]

[[File:collatz5.png]]

Number is bigger doesn't mean more iterations are required. One can notice, from the output of the following program. 



The program to implement the same is as follows:
==Program==
&lt;pre&gt;
#collatz conjecture
#if num is even, divide it by 2
#if num is odd, new number is equal to 3n+1


def checkNum(num):
    iterations=1
    while(num!=1):
        if(num%2==0):
            num=int(num/2)            
        else:
            num = 3*num+1
        iterations+=1
        

    print(num,iterations)


#checkNum(12)#Output: 1 10
#checkNum(26)#Output: 1 11
checkNum(2000)#Output: 1 113
&lt;/pre&gt;

&lt;pre&gt;

#recursive approach

def checkNum(num):
    if num==1:
        return 1
    elif num%2==0:
        return checkNum(num/2)+1
    else:
        return checkNum(3*num +1)+1


output:
checkNum(26)
Out[27]: 11
checkNum(5000)
Out[28]: 29
&lt;/pre&gt;

==Program adding statement to print all iterations==
&lt;pre&gt;
def checkNum(num):
    iterations=1
    while(num!=1):
        if(num%2==0):
            num=int(num/2)            
        else:
            num = 3*num+1
        print(iterations,&quot;:&quot;,num)
        iterations+=1
        

    print(num,iterations)
&lt;/pre&gt;
==Output==
===For checkNum(2000)===
&lt;pre&gt;
1 : 1000
2 : 500
3 : 250
4 : 125
5 : 376
6 : 188
7 : 94
8 : 47
9 : 142
10 : 71
11 : 214
12 : 107
13 : 322
14 : 161
15 : 484
16 : 242
17 : 121
18 : 364
19 : 182
20 : 91
21 : 274
22 : 137
23 : 412
24 : 206
25 : 103
26 : 310
27 : 155
28 : 466
29 : 233
30 : 700
31 : 350
32 : 175
33 : 526
34 : 263
35 : 790
36 : 395
37 : 1186
38 : 593
39 : 1780
40 : 890
41 : 445
42 : 1336
43 : 668
44 : 334
45 : 167
46 : 502
47 : 251
48 : 754
49 : 377
50 : 1132
51 : 566
52 : 283
53 : 850
54 : 425
55 : 1276
56 : 638
57 : 319
58 : 958
59 : 479
60 : 1438
61 : 719
62 : 2158
63 : 1079
64 : 3238
65 : 1619
66 : 4858
67 : 2429
68 : 7288
69 : 3644
70 : 1822
71 : 911
72 : 2734
73 : 1367
74 : 4102
75 : 2051
76 : 6154
77 : 3077
78 : 9232
79 : 4616
80 : 2308
81 : 1154
82 : 577
83 : 1732
84 : 866
85 : 433
86 : 1300
87 : 650
88 : 325
89 : 976
90 : 488
91 : 244
92 : 122
93 : 61
94 : 184
95 : 92
96 : 46
97 : 23
98 : 70
99 : 35
100 : 106
101 : 53
102 : 160
103 : 80
104 : 40
105 : 20
106 : 10
107 : 5
108 : 16
109 : 8
110 : 4
111 : 2
112 : 1
1 113
&lt;/pre&gt;

===For checkNum(5000)===
&lt;pre&gt;
1 : 2500
2 : 1250
3 : 625
4 : 1876
5 : 938
6 : 469
7 : 1408
8 : 704
9 : 352
10 : 176
11 : 88
12 : 44
13 : 22
14 : 11
15 : 34
16 : 17
17 : 52
18 : 26
19 : 13
20 : 40
21 : 20
22 : 10
23 : 5
24 : 16
25 : 8
26 : 4
27 : 2
28 : 1
1 29
&lt;/pre&gt;
===For checkNum(25000000)===
&lt;pre&gt;
1 : 12500000
2 : 6250000
3 : 3125000
4 : 1562500
5 : 781250
6 : 390625
7 : 1171876
8 : 585938
9 : 292969
10 : 878908
11 : 439454
12 : 219727
13 : 659182
14 : 329591
15 : 988774
16 : 494387
17 : 1483162
18 : 741581
19 : 2224744
20 : 1112372
21 : 556186
22 : 278093
23 : 834280
24 : 417140
25 : 208570
26 : 104285
27 : 312856
28 : 156428
29 : 78214
30 : 39107
31 : 117322
32 : 58661
33 : 175984
34 : 87992
35 : 43996
36 : 21998
37 : 10999
38 : 32998
39 : 16499
40 : 49498
41 : 24749
42 : 74248
43 : 37124
44 : 18562
45 : 9281
46 : 27844
47 : 13922
48 : 6961
49 : 20884
50 : 10442
51 : 5221
52 : 15664
53 : 7832
54 : 3916
55 : 1958
56 : 979
57 : 2938
58 : 1469
59 : 4408
60 : 2204
61 : 1102
62 : 551
63 : 1654
64 : 827
65 : 2482
66 : 1241
67 : 3724
68 : 1862
69 : 931
70 : 2794
71 : 1397
72 : 4192
73 : 2096
74 : 1048
75 : 524
76 : 262
77 : 131
78 : 394
79 : 197
80 : 592
81 : 296
82 : 148
83 : 74
84 : 37
85 : 112
86 : 56
87 : 28
88 : 14
89 : 7
90 : 22
91 : 11
92 : 34
93 : 17
94 : 52
95 : 26
96 : 13
97 : 40
98 : 20
99 : 10
100 : 5
101 : 16
102 : 8
103 : 4
104 : 2
105 : 1
1 106
&lt;/pre&gt;

Happy Life ahead!!!
[[File:end1.png]]</text>
      <sha1>gxyjotshj3fibcq1jv3ct7b8m4lpe3q</sha1>
    </revision>
    <revision>
      <id>4345</id>
      <parentid>4343</parentid>
      <timestamp>2018-10-16T01:31:14Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* Page Rank - How does Google Work */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="4660">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_12 Contributors of this page]

=Page Rank - How does Google Work=
One web page is having link to other page, that is a page is referring to other page. Google uses ''Page Rank'' algorithm to choose which page should be displayed first.

If we have network, connections as below:
[[File:rank0.png]]

[[File:rank1.png]]

[[File:rank2.png]]

[[File:rank3.png]]

[[File:rank4.png]]

[[File:rank5.png]]

[[File:rank6.png]]

[[File:rank7.png]]

[[File:rank8.png]]

[[File:rank9.png]]

[[File:rank10.png]]

[[File:rank11.png]]

[[File:mysore.png]]

=Collatz Conjecture=
Taught by Sudarshan sir and Amit sir, and Edited by Ms. Ami Tusharkant Choksi

If a number is even, divide it by ''2'', if it is odd, make multiply it by ''3'' and add ''1'', till you get ''1''. This simple problem is called, ''Collatz Conjecture''. 

[[File:collatz1.png]]

[[File:collatz2.png]]

[[File:collatz3.png]]

[[File:collatz4.png]]

[[File:collatz5.png]]

Number is bigger doesn't mean more iterations are required. One can notice, from the output of the following program. 



The program to implement the same is as follows:
==Program==
&lt;pre&gt;
#collatz conjecture
#if num is even, divide it by 2
#if num is odd, new number is equal to 3n+1


def checkNum(num):
    iterations=1
    while(num!=1):
        if(num%2==0):
            num=int(num/2)            
        else:
            num = 3*num+1
        iterations+=1
        

    print(num,iterations)


#checkNum(12)#Output: 1 10
#checkNum(26)#Output: 1 11
checkNum(2000)#Output: 1 113
&lt;/pre&gt;

&lt;pre&gt;

#recursive approach

def checkNum(num):
    if num==1:
        return 1
    elif num%2==0:
        return checkNum(num/2)+1
    else:
        return checkNum(3*num +1)+1


output:
checkNum(26)
Out[27]: 11
checkNum(5000)
Out[28]: 29
&lt;/pre&gt;

==Program adding statement to print all iterations==
&lt;pre&gt;
def checkNum(num):
    iterations=1
    while(num!=1):
        if(num%2==0):
            num=int(num/2)            
        else:
            num = 3*num+1
        print(iterations,&quot;:&quot;,num)
        iterations+=1
        

    print(num,iterations)
&lt;/pre&gt;
==Output==
===For checkNum(2000)===
&lt;pre&gt;
1 : 1000
2 : 500
3 : 250
4 : 125
5 : 376
6 : 188
7 : 94
8 : 47
9 : 142
10 : 71
11 : 214
12 : 107
13 : 322
14 : 161
15 : 484
16 : 242
17 : 121
18 : 364
19 : 182
20 : 91
21 : 274
22 : 137
23 : 412
24 : 206
25 : 103
26 : 310
27 : 155
28 : 466
29 : 233
30 : 700
31 : 350
32 : 175
33 : 526
34 : 263
35 : 790
36 : 395
37 : 1186
38 : 593
39 : 1780
40 : 890
41 : 445
42 : 1336
43 : 668
44 : 334
45 : 167
46 : 502
47 : 251
48 : 754
49 : 377
50 : 1132
51 : 566
52 : 283
53 : 850
54 : 425
55 : 1276
56 : 638
57 : 319
58 : 958
59 : 479
60 : 1438
61 : 719
62 : 2158
63 : 1079
64 : 3238
65 : 1619
66 : 4858
67 : 2429
68 : 7288
69 : 3644
70 : 1822
71 : 911
72 : 2734
73 : 1367
74 : 4102
75 : 2051
76 : 6154
77 : 3077
78 : 9232
79 : 4616
80 : 2308
81 : 1154
82 : 577
83 : 1732
84 : 866
85 : 433
86 : 1300
87 : 650
88 : 325
89 : 976
90 : 488
91 : 244
92 : 122
93 : 61
94 : 184
95 : 92
96 : 46
97 : 23
98 : 70
99 : 35
100 : 106
101 : 53
102 : 160
103 : 80
104 : 40
105 : 20
106 : 10
107 : 5
108 : 16
109 : 8
110 : 4
111 : 2
112 : 1
1 113
&lt;/pre&gt;

===For checkNum(5000)===
&lt;pre&gt;
1 : 2500
2 : 1250
3 : 625
4 : 1876
5 : 938
6 : 469
7 : 1408
8 : 704
9 : 352
10 : 176
11 : 88
12 : 44
13 : 22
14 : 11
15 : 34
16 : 17
17 : 52
18 : 26
19 : 13
20 : 40
21 : 20
22 : 10
23 : 5
24 : 16
25 : 8
26 : 4
27 : 2
28 : 1
1 29
&lt;/pre&gt;
===For checkNum(25000000)===
&lt;pre&gt;
1 : 12500000
2 : 6250000
3 : 3125000
4 : 1562500
5 : 781250
6 : 390625
7 : 1171876
8 : 585938
9 : 292969
10 : 878908
11 : 439454
12 : 219727
13 : 659182
14 : 329591
15 : 988774
16 : 494387
17 : 1483162
18 : 741581
19 : 2224744
20 : 1112372
21 : 556186
22 : 278093
23 : 834280
24 : 417140
25 : 208570
26 : 104285
27 : 312856
28 : 156428
29 : 78214
30 : 39107
31 : 117322
32 : 58661
33 : 175984
34 : 87992
35 : 43996
36 : 21998
37 : 10999
38 : 32998
39 : 16499
40 : 49498
41 : 24749
42 : 74248
43 : 37124
44 : 18562
45 : 9281
46 : 27844
47 : 13922
48 : 6961
49 : 20884
50 : 10442
51 : 5221
52 : 15664
53 : 7832
54 : 3916
55 : 1958
56 : 979
57 : 2938
58 : 1469
59 : 4408
60 : 2204
61 : 1102
62 : 551
63 : 1654
64 : 827
65 : 2482
66 : 1241
67 : 3724
68 : 1862
69 : 931
70 : 2794
71 : 1397
72 : 4192
73 : 2096
74 : 1048
75 : 524
76 : 262
77 : 131
78 : 394
79 : 197
80 : 592
81 : 296
82 : 148
83 : 74
84 : 37
85 : 112
86 : 56
87 : 28
88 : 14
89 : 7
90 : 22
91 : 11
92 : 34
93 : 17
94 : 52
95 : 26
96 : 13
97 : 40
98 : 20
99 : 10
100 : 5
101 : 16
102 : 8
103 : 4
104 : 2
105 : 1
1 106
&lt;/pre&gt;

Happy Life ahead!!!
[[File:end1.png]]</text>
      <sha1>i4446jkoxfrzyg803qzfalj9of9iyuh</sha1>
    </revision>
    <revision>
      <id>4346</id>
      <parentid>4345</parentid>
      <timestamp>2018-10-16T01:31:54Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* Page Rank - How does Google Work */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="4709">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_12 Contributors of this page]

=Page Rank - How does Google Work=
One web page is having link to other page, that is a page is referring to other page. Google uses ''Page Rank'' algorithm to choose which page should be displayed first.

If we have network, connections as below:
[[File:rank0.png]]

We want to pick a leader out of all these nodes.
[[File:rank1.png]]

[[File:rank2.png]]

[[File:rank3.png]]

[[File:rank4.png]]

[[File:rank5.png]]

[[File:rank6.png]]

[[File:rank7.png]]

[[File:rank8.png]]

[[File:rank9.png]]

[[File:rank10.png]]

[[File:rank11.png]]

[[File:mysore.png]]

=Collatz Conjecture=
Taught by Sudarshan sir and Amit sir, and Edited by Ms. Ami Tusharkant Choksi

If a number is even, divide it by ''2'', if it is odd, make multiply it by ''3'' and add ''1'', till you get ''1''. This simple problem is called, ''Collatz Conjecture''. 

[[File:collatz1.png]]

[[File:collatz2.png]]

[[File:collatz3.png]]

[[File:collatz4.png]]

[[File:collatz5.png]]

Number is bigger doesn't mean more iterations are required. One can notice, from the output of the following program. 



The program to implement the same is as follows:
==Program==
&lt;pre&gt;
#collatz conjecture
#if num is even, divide it by 2
#if num is odd, new number is equal to 3n+1


def checkNum(num):
    iterations=1
    while(num!=1):
        if(num%2==0):
            num=int(num/2)            
        else:
            num = 3*num+1
        iterations+=1
        

    print(num,iterations)


#checkNum(12)#Output: 1 10
#checkNum(26)#Output: 1 11
checkNum(2000)#Output: 1 113
&lt;/pre&gt;

&lt;pre&gt;

#recursive approach

def checkNum(num):
    if num==1:
        return 1
    elif num%2==0:
        return checkNum(num/2)+1
    else:
        return checkNum(3*num +1)+1


output:
checkNum(26)
Out[27]: 11
checkNum(5000)
Out[28]: 29
&lt;/pre&gt;

==Program adding statement to print all iterations==
&lt;pre&gt;
def checkNum(num):
    iterations=1
    while(num!=1):
        if(num%2==0):
            num=int(num/2)            
        else:
            num = 3*num+1
        print(iterations,&quot;:&quot;,num)
        iterations+=1
        

    print(num,iterations)
&lt;/pre&gt;
==Output==
===For checkNum(2000)===
&lt;pre&gt;
1 : 1000
2 : 500
3 : 250
4 : 125
5 : 376
6 : 188
7 : 94
8 : 47
9 : 142
10 : 71
11 : 214
12 : 107
13 : 322
14 : 161
15 : 484
16 : 242
17 : 121
18 : 364
19 : 182
20 : 91
21 : 274
22 : 137
23 : 412
24 : 206
25 : 103
26 : 310
27 : 155
28 : 466
29 : 233
30 : 700
31 : 350
32 : 175
33 : 526
34 : 263
35 : 790
36 : 395
37 : 1186
38 : 593
39 : 1780
40 : 890
41 : 445
42 : 1336
43 : 668
44 : 334
45 : 167
46 : 502
47 : 251
48 : 754
49 : 377
50 : 1132
51 : 566
52 : 283
53 : 850
54 : 425
55 : 1276
56 : 638
57 : 319
58 : 958
59 : 479
60 : 1438
61 : 719
62 : 2158
63 : 1079
64 : 3238
65 : 1619
66 : 4858
67 : 2429
68 : 7288
69 : 3644
70 : 1822
71 : 911
72 : 2734
73 : 1367
74 : 4102
75 : 2051
76 : 6154
77 : 3077
78 : 9232
79 : 4616
80 : 2308
81 : 1154
82 : 577
83 : 1732
84 : 866
85 : 433
86 : 1300
87 : 650
88 : 325
89 : 976
90 : 488
91 : 244
92 : 122
93 : 61
94 : 184
95 : 92
96 : 46
97 : 23
98 : 70
99 : 35
100 : 106
101 : 53
102 : 160
103 : 80
104 : 40
105 : 20
106 : 10
107 : 5
108 : 16
109 : 8
110 : 4
111 : 2
112 : 1
1 113
&lt;/pre&gt;

===For checkNum(5000)===
&lt;pre&gt;
1 : 2500
2 : 1250
3 : 625
4 : 1876
5 : 938
6 : 469
7 : 1408
8 : 704
9 : 352
10 : 176
11 : 88
12 : 44
13 : 22
14 : 11
15 : 34
16 : 17
17 : 52
18 : 26
19 : 13
20 : 40
21 : 20
22 : 10
23 : 5
24 : 16
25 : 8
26 : 4
27 : 2
28 : 1
1 29
&lt;/pre&gt;
===For checkNum(25000000)===
&lt;pre&gt;
1 : 12500000
2 : 6250000
3 : 3125000
4 : 1562500
5 : 781250
6 : 390625
7 : 1171876
8 : 585938
9 : 292969
10 : 878908
11 : 439454
12 : 219727
13 : 659182
14 : 329591
15 : 988774
16 : 494387
17 : 1483162
18 : 741581
19 : 2224744
20 : 1112372
21 : 556186
22 : 278093
23 : 834280
24 : 417140
25 : 208570
26 : 104285
27 : 312856
28 : 156428
29 : 78214
30 : 39107
31 : 117322
32 : 58661
33 : 175984
34 : 87992
35 : 43996
36 : 21998
37 : 10999
38 : 32998
39 : 16499
40 : 49498
41 : 24749
42 : 74248
43 : 37124
44 : 18562
45 : 9281
46 : 27844
47 : 13922
48 : 6961
49 : 20884
50 : 10442
51 : 5221
52 : 15664
53 : 7832
54 : 3916
55 : 1958
56 : 979
57 : 2938
58 : 1469
59 : 4408
60 : 2204
61 : 1102
62 : 551
63 : 1654
64 : 827
65 : 2482
66 : 1241
67 : 3724
68 : 1862
69 : 931
70 : 2794
71 : 1397
72 : 4192
73 : 2096
74 : 1048
75 : 524
76 : 262
77 : 131
78 : 394
79 : 197
80 : 592
81 : 296
82 : 148
83 : 74
84 : 37
85 : 112
86 : 56
87 : 28
88 : 14
89 : 7
90 : 22
91 : 11
92 : 34
93 : 17
94 : 52
95 : 26
96 : 13
97 : 40
98 : 20
99 : 10
100 : 5
101 : 16
102 : 8
103 : 4
104 : 2
105 : 1
1 106
&lt;/pre&gt;

Happy Life ahead!!!
[[File:end1.png]]</text>
      <sha1>ogwqg76mnsnstysdyikuljeeyf86vat</sha1>
    </revision>
    <revision>
      <id>4347</id>
      <parentid>4346</parentid>
      <timestamp>2018-10-16T01:34:18Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* Page Rank - How does Google Work */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="4842">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_12 Contributors of this page]

=Page Rank - How does Google Work=
One web page is having link to other page, that is a page is referring to other page. Google uses ''Page Rank'' algorithm to choose which page should be displayed first.

If we have network, connections as below:
[[File:rank0.png]]

We want to pick a leader out of all these nodes. How to pick a leader?  Why to elect a leader? It is because we want to find the super power of available nodes.                     
[[File:rank1.png]]

[[File:rank2.png]]

[[File:rank3.png]]

[[File:rank4.png]]

[[File:rank5.png]]

[[File:rank6.png]]

[[File:rank7.png]]

[[File:rank8.png]]

[[File:rank9.png]]

[[File:rank10.png]]

[[File:rank11.png]]

[[File:mysore.png]]

=Collatz Conjecture=
Taught by Sudarshan sir and Amit sir, and Edited by Ms. Ami Tusharkant Choksi

If a number is even, divide it by ''2'', if it is odd, make multiply it by ''3'' and add ''1'', till you get ''1''. This simple problem is called, ''Collatz Conjecture''. 

[[File:collatz1.png]]

[[File:collatz2.png]]

[[File:collatz3.png]]

[[File:collatz4.png]]

[[File:collatz5.png]]

Number is bigger doesn't mean more iterations are required. One can notice, from the output of the following program. 



The program to implement the same is as follows:
==Program==
&lt;pre&gt;
#collatz conjecture
#if num is even, divide it by 2
#if num is odd, new number is equal to 3n+1


def checkNum(num):
    iterations=1
    while(num!=1):
        if(num%2==0):
            num=int(num/2)            
        else:
            num = 3*num+1
        iterations+=1
        

    print(num,iterations)


#checkNum(12)#Output: 1 10
#checkNum(26)#Output: 1 11
checkNum(2000)#Output: 1 113
&lt;/pre&gt;

&lt;pre&gt;

#recursive approach

def checkNum(num):
    if num==1:
        return 1
    elif num%2==0:
        return checkNum(num/2)+1
    else:
        return checkNum(3*num +1)+1


output:
checkNum(26)
Out[27]: 11
checkNum(5000)
Out[28]: 29
&lt;/pre&gt;

==Program adding statement to print all iterations==
&lt;pre&gt;
def checkNum(num):
    iterations=1
    while(num!=1):
        if(num%2==0):
            num=int(num/2)            
        else:
            num = 3*num+1
        print(iterations,&quot;:&quot;,num)
        iterations+=1
        

    print(num,iterations)
&lt;/pre&gt;
==Output==
===For checkNum(2000)===
&lt;pre&gt;
1 : 1000
2 : 500
3 : 250
4 : 125
5 : 376
6 : 188
7 : 94
8 : 47
9 : 142
10 : 71
11 : 214
12 : 107
13 : 322
14 : 161
15 : 484
16 : 242
17 : 121
18 : 364
19 : 182
20 : 91
21 : 274
22 : 137
23 : 412
24 : 206
25 : 103
26 : 310
27 : 155
28 : 466
29 : 233
30 : 700
31 : 350
32 : 175
33 : 526
34 : 263
35 : 790
36 : 395
37 : 1186
38 : 593
39 : 1780
40 : 890
41 : 445
42 : 1336
43 : 668
44 : 334
45 : 167
46 : 502
47 : 251
48 : 754
49 : 377
50 : 1132
51 : 566
52 : 283
53 : 850
54 : 425
55 : 1276
56 : 638
57 : 319
58 : 958
59 : 479
60 : 1438
61 : 719
62 : 2158
63 : 1079
64 : 3238
65 : 1619
66 : 4858
67 : 2429
68 : 7288
69 : 3644
70 : 1822
71 : 911
72 : 2734
73 : 1367
74 : 4102
75 : 2051
76 : 6154
77 : 3077
78 : 9232
79 : 4616
80 : 2308
81 : 1154
82 : 577
83 : 1732
84 : 866
85 : 433
86 : 1300
87 : 650
88 : 325
89 : 976
90 : 488
91 : 244
92 : 122
93 : 61
94 : 184
95 : 92
96 : 46
97 : 23
98 : 70
99 : 35
100 : 106
101 : 53
102 : 160
103 : 80
104 : 40
105 : 20
106 : 10
107 : 5
108 : 16
109 : 8
110 : 4
111 : 2
112 : 1
1 113
&lt;/pre&gt;

===For checkNum(5000)===
&lt;pre&gt;
1 : 2500
2 : 1250
3 : 625
4 : 1876
5 : 938
6 : 469
7 : 1408
8 : 704
9 : 352
10 : 176
11 : 88
12 : 44
13 : 22
14 : 11
15 : 34
16 : 17
17 : 52
18 : 26
19 : 13
20 : 40
21 : 20
22 : 10
23 : 5
24 : 16
25 : 8
26 : 4
27 : 2
28 : 1
1 29
&lt;/pre&gt;
===For checkNum(25000000)===
&lt;pre&gt;
1 : 12500000
2 : 6250000
3 : 3125000
4 : 1562500
5 : 781250
6 : 390625
7 : 1171876
8 : 585938
9 : 292969
10 : 878908
11 : 439454
12 : 219727
13 : 659182
14 : 329591
15 : 988774
16 : 494387
17 : 1483162
18 : 741581
19 : 2224744
20 : 1112372
21 : 556186
22 : 278093
23 : 834280
24 : 417140
25 : 208570
26 : 104285
27 : 312856
28 : 156428
29 : 78214
30 : 39107
31 : 117322
32 : 58661
33 : 175984
34 : 87992
35 : 43996
36 : 21998
37 : 10999
38 : 32998
39 : 16499
40 : 49498
41 : 24749
42 : 74248
43 : 37124
44 : 18562
45 : 9281
46 : 27844
47 : 13922
48 : 6961
49 : 20884
50 : 10442
51 : 5221
52 : 15664
53 : 7832
54 : 3916
55 : 1958
56 : 979
57 : 2938
58 : 1469
59 : 4408
60 : 2204
61 : 1102
62 : 551
63 : 1654
64 : 827
65 : 2482
66 : 1241
67 : 3724
68 : 1862
69 : 931
70 : 2794
71 : 1397
72 : 4192
73 : 2096
74 : 1048
75 : 524
76 : 262
77 : 131
78 : 394
79 : 197
80 : 592
81 : 296
82 : 148
83 : 74
84 : 37
85 : 112
86 : 56
87 : 28
88 : 14
89 : 7
90 : 22
91 : 11
92 : 34
93 : 17
94 : 52
95 : 26
96 : 13
97 : 40
98 : 20
99 : 10
100 : 5
101 : 16
102 : 8
103 : 4
104 : 2
105 : 1
1 106
&lt;/pre&gt;

Happy Life ahead!!!
[[File:end1.png]]</text>
      <sha1>otpgyx11uapp3tozehuu7ey52ycnfjp</sha1>
    </revision>
    <revision>
      <id>4348</id>
      <parentid>4347</parentid>
      <timestamp>2018-10-16T01:35:31Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* Page Rank - How does Google Work */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="4960">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_12 Contributors of this page]

=Page Rank - How does Google Work=
One web page is having link to other page, that is a page is referring to other page. Google uses ''Page Rank'' algorithm to choose which page should be displayed first.

If we have network, connections as below:
[[File:rank0.png]]

We want to pick a leader out of all these nodes. How to pick a leader?  Why to elect a leader? It is because we want to find the super power of available nodes.                     
[[File:rank1.png]]

For example, the application wherein, we want to find the most impressive person of the  few ones. How to decide it? 
[[File:rank2.png]]

[[File:rank3.png]]

[[File:rank4.png]]

[[File:rank5.png]]

[[File:rank6.png]]

[[File:rank7.png]]

[[File:rank8.png]]

[[File:rank9.png]]

[[File:rank10.png]]

[[File:rank11.png]]

[[File:mysore.png]]

=Collatz Conjecture=
Taught by Sudarshan sir and Amit sir, and Edited by Ms. Ami Tusharkant Choksi

If a number is even, divide it by ''2'', if it is odd, make multiply it by ''3'' and add ''1'', till you get ''1''. This simple problem is called, ''Collatz Conjecture''. 

[[File:collatz1.png]]

[[File:collatz2.png]]

[[File:collatz3.png]]

[[File:collatz4.png]]

[[File:collatz5.png]]

Number is bigger doesn't mean more iterations are required. One can notice, from the output of the following program. 



The program to implement the same is as follows:
==Program==
&lt;pre&gt;
#collatz conjecture
#if num is even, divide it by 2
#if num is odd, new number is equal to 3n+1


def checkNum(num):
    iterations=1
    while(num!=1):
        if(num%2==0):
            num=int(num/2)            
        else:
            num = 3*num+1
        iterations+=1
        

    print(num,iterations)


#checkNum(12)#Output: 1 10
#checkNum(26)#Output: 1 11
checkNum(2000)#Output: 1 113
&lt;/pre&gt;

&lt;pre&gt;

#recursive approach

def checkNum(num):
    if num==1:
        return 1
    elif num%2==0:
        return checkNum(num/2)+1
    else:
        return checkNum(3*num +1)+1


output:
checkNum(26)
Out[27]: 11
checkNum(5000)
Out[28]: 29
&lt;/pre&gt;

==Program adding statement to print all iterations==
&lt;pre&gt;
def checkNum(num):
    iterations=1
    while(num!=1):
        if(num%2==0):
            num=int(num/2)            
        else:
            num = 3*num+1
        print(iterations,&quot;:&quot;,num)
        iterations+=1
        

    print(num,iterations)
&lt;/pre&gt;
==Output==
===For checkNum(2000)===
&lt;pre&gt;
1 : 1000
2 : 500
3 : 250
4 : 125
5 : 376
6 : 188
7 : 94
8 : 47
9 : 142
10 : 71
11 : 214
12 : 107
13 : 322
14 : 161
15 : 484
16 : 242
17 : 121
18 : 364
19 : 182
20 : 91
21 : 274
22 : 137
23 : 412
24 : 206
25 : 103
26 : 310
27 : 155
28 : 466
29 : 233
30 : 700
31 : 350
32 : 175
33 : 526
34 : 263
35 : 790
36 : 395
37 : 1186
38 : 593
39 : 1780
40 : 890
41 : 445
42 : 1336
43 : 668
44 : 334
45 : 167
46 : 502
47 : 251
48 : 754
49 : 377
50 : 1132
51 : 566
52 : 283
53 : 850
54 : 425
55 : 1276
56 : 638
57 : 319
58 : 958
59 : 479
60 : 1438
61 : 719
62 : 2158
63 : 1079
64 : 3238
65 : 1619
66 : 4858
67 : 2429
68 : 7288
69 : 3644
70 : 1822
71 : 911
72 : 2734
73 : 1367
74 : 4102
75 : 2051
76 : 6154
77 : 3077
78 : 9232
79 : 4616
80 : 2308
81 : 1154
82 : 577
83 : 1732
84 : 866
85 : 433
86 : 1300
87 : 650
88 : 325
89 : 976
90 : 488
91 : 244
92 : 122
93 : 61
94 : 184
95 : 92
96 : 46
97 : 23
98 : 70
99 : 35
100 : 106
101 : 53
102 : 160
103 : 80
104 : 40
105 : 20
106 : 10
107 : 5
108 : 16
109 : 8
110 : 4
111 : 2
112 : 1
1 113
&lt;/pre&gt;

===For checkNum(5000)===
&lt;pre&gt;
1 : 2500
2 : 1250
3 : 625
4 : 1876
5 : 938
6 : 469
7 : 1408
8 : 704
9 : 352
10 : 176
11 : 88
12 : 44
13 : 22
14 : 11
15 : 34
16 : 17
17 : 52
18 : 26
19 : 13
20 : 40
21 : 20
22 : 10
23 : 5
24 : 16
25 : 8
26 : 4
27 : 2
28 : 1
1 29
&lt;/pre&gt;
===For checkNum(25000000)===
&lt;pre&gt;
1 : 12500000
2 : 6250000
3 : 3125000
4 : 1562500
5 : 781250
6 : 390625
7 : 1171876
8 : 585938
9 : 292969
10 : 878908
11 : 439454
12 : 219727
13 : 659182
14 : 329591
15 : 988774
16 : 494387
17 : 1483162
18 : 741581
19 : 2224744
20 : 1112372
21 : 556186
22 : 278093
23 : 834280
24 : 417140
25 : 208570
26 : 104285
27 : 312856
28 : 156428
29 : 78214
30 : 39107
31 : 117322
32 : 58661
33 : 175984
34 : 87992
35 : 43996
36 : 21998
37 : 10999
38 : 32998
39 : 16499
40 : 49498
41 : 24749
42 : 74248
43 : 37124
44 : 18562
45 : 9281
46 : 27844
47 : 13922
48 : 6961
49 : 20884
50 : 10442
51 : 5221
52 : 15664
53 : 7832
54 : 3916
55 : 1958
56 : 979
57 : 2938
58 : 1469
59 : 4408
60 : 2204
61 : 1102
62 : 551
63 : 1654
64 : 827
65 : 2482
66 : 1241
67 : 3724
68 : 1862
69 : 931
70 : 2794
71 : 1397
72 : 4192
73 : 2096
74 : 1048
75 : 524
76 : 262
77 : 131
78 : 394
79 : 197
80 : 592
81 : 296
82 : 148
83 : 74
84 : 37
85 : 112
86 : 56
87 : 28
88 : 14
89 : 7
90 : 22
91 : 11
92 : 34
93 : 17
94 : 52
95 : 26
96 : 13
97 : 40
98 : 20
99 : 10
100 : 5
101 : 16
102 : 8
103 : 4
104 : 2
105 : 1
1 106
&lt;/pre&gt;

Happy Life ahead!!!
[[File:end1.png]]</text>
      <sha1>macc2c31ainwuttg4xyv20d3q91j9ev</sha1>
    </revision>
    <revision>
      <id>4349</id>
      <parentid>4348</parentid>
      <timestamp>2018-10-16T01:40:52Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* Page Rank - How does Google Work */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="5126">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_12 Contributors of this page]

=Page Rank - How does Google Work=
One web page is having link to other page, that is a page is referring to other page. Google uses ''Page Rank'' algorithm to choose which page should be displayed first.

If we have network, connections as below:
[[File:rank0.png]]

We want to pick a leader out of all these nodes. How to pick a leader?  Why to elect a leader? It is because we want to find the super power of available nodes.                     
[[File:rank1.png]]

For example, the application wherein, we want to find the most impressive person of the  few ones. How to decide it? As shown in below figure, each node will communicate with other, randomly, we implement the count for each node, how many times, the particular node is being visited.
[[File:rank2.png]]

[[File:rank3.png]]

[[File:rank4.png]]

[[File:rank5.png]]

[[File:rank6.png]]

[[File:rank7.png]]

[[File:rank8.png]]

[[File:rank9.png]]

[[File:rank10.png]]

[[File:rank11.png]]

[[File:mysore.png]]

=Collatz Conjecture=
Taught by Sudarshan sir and Amit sir, and Edited by Ms. Ami Tusharkant Choksi

If a number is even, divide it by ''2'', if it is odd, make multiply it by ''3'' and add ''1'', till you get ''1''. This simple problem is called, ''Collatz Conjecture''. 

[[File:collatz1.png]]

[[File:collatz2.png]]

[[File:collatz3.png]]

[[File:collatz4.png]]

[[File:collatz5.png]]

Number is bigger doesn't mean more iterations are required. One can notice, from the output of the following program. 



The program to implement the same is as follows:
==Program==
&lt;pre&gt;
#collatz conjecture
#if num is even, divide it by 2
#if num is odd, new number is equal to 3n+1


def checkNum(num):
    iterations=1
    while(num!=1):
        if(num%2==0):
            num=int(num/2)            
        else:
            num = 3*num+1
        iterations+=1
        

    print(num,iterations)


#checkNum(12)#Output: 1 10
#checkNum(26)#Output: 1 11
checkNum(2000)#Output: 1 113
&lt;/pre&gt;

&lt;pre&gt;

#recursive approach

def checkNum(num):
    if num==1:
        return 1
    elif num%2==0:
        return checkNum(num/2)+1
    else:
        return checkNum(3*num +1)+1


output:
checkNum(26)
Out[27]: 11
checkNum(5000)
Out[28]: 29
&lt;/pre&gt;

==Program adding statement to print all iterations==
&lt;pre&gt;
def checkNum(num):
    iterations=1
    while(num!=1):
        if(num%2==0):
            num=int(num/2)            
        else:
            num = 3*num+1
        print(iterations,&quot;:&quot;,num)
        iterations+=1
        

    print(num,iterations)
&lt;/pre&gt;
==Output==
===For checkNum(2000)===
&lt;pre&gt;
1 : 1000
2 : 500
3 : 250
4 : 125
5 : 376
6 : 188
7 : 94
8 : 47
9 : 142
10 : 71
11 : 214
12 : 107
13 : 322
14 : 161
15 : 484
16 : 242
17 : 121
18 : 364
19 : 182
20 : 91
21 : 274
22 : 137
23 : 412
24 : 206
25 : 103
26 : 310
27 : 155
28 : 466
29 : 233
30 : 700
31 : 350
32 : 175
33 : 526
34 : 263
35 : 790
36 : 395
37 : 1186
38 : 593
39 : 1780
40 : 890
41 : 445
42 : 1336
43 : 668
44 : 334
45 : 167
46 : 502
47 : 251
48 : 754
49 : 377
50 : 1132
51 : 566
52 : 283
53 : 850
54 : 425
55 : 1276
56 : 638
57 : 319
58 : 958
59 : 479
60 : 1438
61 : 719
62 : 2158
63 : 1079
64 : 3238
65 : 1619
66 : 4858
67 : 2429
68 : 7288
69 : 3644
70 : 1822
71 : 911
72 : 2734
73 : 1367
74 : 4102
75 : 2051
76 : 6154
77 : 3077
78 : 9232
79 : 4616
80 : 2308
81 : 1154
82 : 577
83 : 1732
84 : 866
85 : 433
86 : 1300
87 : 650
88 : 325
89 : 976
90 : 488
91 : 244
92 : 122
93 : 61
94 : 184
95 : 92
96 : 46
97 : 23
98 : 70
99 : 35
100 : 106
101 : 53
102 : 160
103 : 80
104 : 40
105 : 20
106 : 10
107 : 5
108 : 16
109 : 8
110 : 4
111 : 2
112 : 1
1 113
&lt;/pre&gt;

===For checkNum(5000)===
&lt;pre&gt;
1 : 2500
2 : 1250
3 : 625
4 : 1876
5 : 938
6 : 469
7 : 1408
8 : 704
9 : 352
10 : 176
11 : 88
12 : 44
13 : 22
14 : 11
15 : 34
16 : 17
17 : 52
18 : 26
19 : 13
20 : 40
21 : 20
22 : 10
23 : 5
24 : 16
25 : 8
26 : 4
27 : 2
28 : 1
1 29
&lt;/pre&gt;
===For checkNum(25000000)===
&lt;pre&gt;
1 : 12500000
2 : 6250000
3 : 3125000
4 : 1562500
5 : 781250
6 : 390625
7 : 1171876
8 : 585938
9 : 292969
10 : 878908
11 : 439454
12 : 219727
13 : 659182
14 : 329591
15 : 988774
16 : 494387
17 : 1483162
18 : 741581
19 : 2224744
20 : 1112372
21 : 556186
22 : 278093
23 : 834280
24 : 417140
25 : 208570
26 : 104285
27 : 312856
28 : 156428
29 : 78214
30 : 39107
31 : 117322
32 : 58661
33 : 175984
34 : 87992
35 : 43996
36 : 21998
37 : 10999
38 : 32998
39 : 16499
40 : 49498
41 : 24749
42 : 74248
43 : 37124
44 : 18562
45 : 9281
46 : 27844
47 : 13922
48 : 6961
49 : 20884
50 : 10442
51 : 5221
52 : 15664
53 : 7832
54 : 3916
55 : 1958
56 : 979
57 : 2938
58 : 1469
59 : 4408
60 : 2204
61 : 1102
62 : 551
63 : 1654
64 : 827
65 : 2482
66 : 1241
67 : 3724
68 : 1862
69 : 931
70 : 2794
71 : 1397
72 : 4192
73 : 2096
74 : 1048
75 : 524
76 : 262
77 : 131
78 : 394
79 : 197
80 : 592
81 : 296
82 : 148
83 : 74
84 : 37
85 : 112
86 : 56
87 : 28
88 : 14
89 : 7
90 : 22
91 : 11
92 : 34
93 : 17
94 : 52
95 : 26
96 : 13
97 : 40
98 : 20
99 : 10
100 : 5
101 : 16
102 : 8
103 : 4
104 : 2
105 : 1
1 106
&lt;/pre&gt;

Happy Life ahead!!!
[[File:end1.png]]</text>
      <sha1>iclhodq9865e4cuit4hyqv6xf6c0sby</sha1>
    </revision>
    <revision>
      <id>4350</id>
      <parentid>4349</parentid>
      <timestamp>2018-10-16T01:44:51Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* Page Rank - How does Google Work */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="5271">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_12 Contributors of this page]

=Page Rank - How does Google Work=
One web page is having link to other page, that is a page is referring to other page. Google uses ''Page Rank'' algorithm to choose which page should be displayed first.

If we have network, connections as below:
[[File:rank0.png]]

We want to pick a leader out of all these nodes. How to pick a leader?  Why to elect a leader? It is because we want to find the super power of available nodes.                     
[[File:rank1.png]]

For example, the application wherein, we want to find the most impressive person of the  few ones. How to decide it? As shown in below figure, each node will communicate with other, randomly, we implement the count for each node, how many times, the particular node is being visited.
[[File:rank2.png]]

[[#Top]]

As shown in following, figure, all nodes are visited and each node is marked with the 
number i.e.number of times the node is visited.
[[File:rank3.png]]

[[File:rank4.png]]

[[File:rank5.png]]

[[File:rank6.png]]

[[File:rank7.png]]

[[File:rank8.png]]

[[File:rank9.png]]

[[File:rank10.png]]

[[File:rank11.png]]

[[File:mysore.png]]

=Collatz Conjecture=
Taught by Sudarshan sir and Amit sir, and Edited by Ms. Ami Tusharkant Choksi

If a number is even, divide it by ''2'', if it is odd, make multiply it by ''3'' and add ''1'', till you get ''1''. This simple problem is called, ''Collatz Conjecture''. 

[[File:collatz1.png]]

[[File:collatz2.png]]

[[File:collatz3.png]]

[[File:collatz4.png]]

[[File:collatz5.png]]

Number is bigger doesn't mean more iterations are required. One can notice, from the output of the following program. 



The program to implement the same is as follows:
==Program==
&lt;pre&gt;
#collatz conjecture
#if num is even, divide it by 2
#if num is odd, new number is equal to 3n+1


def checkNum(num):
    iterations=1
    while(num!=1):
        if(num%2==0):
            num=int(num/2)            
        else:
            num = 3*num+1
        iterations+=1
        

    print(num,iterations)


#checkNum(12)#Output: 1 10
#checkNum(26)#Output: 1 11
checkNum(2000)#Output: 1 113
&lt;/pre&gt;

&lt;pre&gt;

#recursive approach

def checkNum(num):
    if num==1:
        return 1
    elif num%2==0:
        return checkNum(num/2)+1
    else:
        return checkNum(3*num +1)+1


output:
checkNum(26)
Out[27]: 11
checkNum(5000)
Out[28]: 29
&lt;/pre&gt;

==Program adding statement to print all iterations==
&lt;pre&gt;
def checkNum(num):
    iterations=1
    while(num!=1):
        if(num%2==0):
            num=int(num/2)            
        else:
            num = 3*num+1
        print(iterations,&quot;:&quot;,num)
        iterations+=1
        

    print(num,iterations)
&lt;/pre&gt;
==Output==
===For checkNum(2000)===
&lt;pre&gt;
1 : 1000
2 : 500
3 : 250
4 : 125
5 : 376
6 : 188
7 : 94
8 : 47
9 : 142
10 : 71
11 : 214
12 : 107
13 : 322
14 : 161
15 : 484
16 : 242
17 : 121
18 : 364
19 : 182
20 : 91
21 : 274
22 : 137
23 : 412
24 : 206
25 : 103
26 : 310
27 : 155
28 : 466
29 : 233
30 : 700
31 : 350
32 : 175
33 : 526
34 : 263
35 : 790
36 : 395
37 : 1186
38 : 593
39 : 1780
40 : 890
41 : 445
42 : 1336
43 : 668
44 : 334
45 : 167
46 : 502
47 : 251
48 : 754
49 : 377
50 : 1132
51 : 566
52 : 283
53 : 850
54 : 425
55 : 1276
56 : 638
57 : 319
58 : 958
59 : 479
60 : 1438
61 : 719
62 : 2158
63 : 1079
64 : 3238
65 : 1619
66 : 4858
67 : 2429
68 : 7288
69 : 3644
70 : 1822
71 : 911
72 : 2734
73 : 1367
74 : 4102
75 : 2051
76 : 6154
77 : 3077
78 : 9232
79 : 4616
80 : 2308
81 : 1154
82 : 577
83 : 1732
84 : 866
85 : 433
86 : 1300
87 : 650
88 : 325
89 : 976
90 : 488
91 : 244
92 : 122
93 : 61
94 : 184
95 : 92
96 : 46
97 : 23
98 : 70
99 : 35
100 : 106
101 : 53
102 : 160
103 : 80
104 : 40
105 : 20
106 : 10
107 : 5
108 : 16
109 : 8
110 : 4
111 : 2
112 : 1
1 113
&lt;/pre&gt;

===For checkNum(5000)===
&lt;pre&gt;
1 : 2500
2 : 1250
3 : 625
4 : 1876
5 : 938
6 : 469
7 : 1408
8 : 704
9 : 352
10 : 176
11 : 88
12 : 44
13 : 22
14 : 11
15 : 34
16 : 17
17 : 52
18 : 26
19 : 13
20 : 40
21 : 20
22 : 10
23 : 5
24 : 16
25 : 8
26 : 4
27 : 2
28 : 1
1 29
&lt;/pre&gt;
===For checkNum(25000000)===
&lt;pre&gt;
1 : 12500000
2 : 6250000
3 : 3125000
4 : 1562500
5 : 781250
6 : 390625
7 : 1171876
8 : 585938
9 : 292969
10 : 878908
11 : 439454
12 : 219727
13 : 659182
14 : 329591
15 : 988774
16 : 494387
17 : 1483162
18 : 741581
19 : 2224744
20 : 1112372
21 : 556186
22 : 278093
23 : 834280
24 : 417140
25 : 208570
26 : 104285
27 : 312856
28 : 156428
29 : 78214
30 : 39107
31 : 117322
32 : 58661
33 : 175984
34 : 87992
35 : 43996
36 : 21998
37 : 10999
38 : 32998
39 : 16499
40 : 49498
41 : 24749
42 : 74248
43 : 37124
44 : 18562
45 : 9281
46 : 27844
47 : 13922
48 : 6961
49 : 20884
50 : 10442
51 : 5221
52 : 15664
53 : 7832
54 : 3916
55 : 1958
56 : 979
57 : 2938
58 : 1469
59 : 4408
60 : 2204
61 : 1102
62 : 551
63 : 1654
64 : 827
65 : 2482
66 : 1241
67 : 3724
68 : 1862
69 : 931
70 : 2794
71 : 1397
72 : 4192
73 : 2096
74 : 1048
75 : 524
76 : 262
77 : 131
78 : 394
79 : 197
80 : 592
81 : 296
82 : 148
83 : 74
84 : 37
85 : 112
86 : 56
87 : 28
88 : 14
89 : 7
90 : 22
91 : 11
92 : 34
93 : 17
94 : 52
95 : 26
96 : 13
97 : 40
98 : 20
99 : 10
100 : 5
101 : 16
102 : 8
103 : 4
104 : 2
105 : 1
1 106
&lt;/pre&gt;

Happy Life ahead!!!
[[File:end1.png]]</text>
      <sha1>9ja0uwwkt6xbcvdl03fpmoeg25dzoqf</sha1>
    </revision>
    <revision>
      <id>4351</id>
      <parentid>4350</parentid>
      <timestamp>2018-10-16T01:47:01Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* Page Rank - How does Google Work */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="5383">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_12 Contributors of this page]

=Page Rank - How does Google Work=
One web page is having link to other page, that is a page is referring to other page. Google uses ''Page Rank'' algorithm to choose which page should be displayed first.

If we have network, connections as below:
[[File:rank0.png]]

We want to pick a leader out of all these nodes. How to pick a leader?  Why to elect a leader? It is because we want to find the super power of available nodes.                     
[[File:rank1.png]]

For example, the application wherein, we want to find the most impressive person of the  few ones. How to decide it? As shown in below figure, each node will communicate with other, randomly, we implement the count for each node, how many times, the particular node is being visited.
[[File:rank2.png]]

[[#Top]]

As shown in following, figure, all nodes are visited and each node is marked with the 
number i.e.number of times the node is visited.
[[File:rank3.png]]

The node with the maximum count, becomes the winner. Here, node with 120 count in figure below, is the winner. 
[[File:rank4.png]]

[[File:rank5.png]]

[[File:rank6.png]]

[[File:rank7.png]]

[[File:rank8.png]]

[[File:rank9.png]]

[[File:rank10.png]]

[[File:rank11.png]]

[[File:mysore.png]]

=Collatz Conjecture=
Taught by Sudarshan sir and Amit sir, and Edited by Ms. Ami Tusharkant Choksi

If a number is even, divide it by ''2'', if it is odd, make multiply it by ''3'' and add ''1'', till you get ''1''. This simple problem is called, ''Collatz Conjecture''. 

[[File:collatz1.png]]

[[File:collatz2.png]]

[[File:collatz3.png]]

[[File:collatz4.png]]

[[File:collatz5.png]]

Number is bigger doesn't mean more iterations are required. One can notice, from the output of the following program. 



The program to implement the same is as follows:
==Program==
&lt;pre&gt;
#collatz conjecture
#if num is even, divide it by 2
#if num is odd, new number is equal to 3n+1


def checkNum(num):
    iterations=1
    while(num!=1):
        if(num%2==0):
            num=int(num/2)            
        else:
            num = 3*num+1
        iterations+=1
        

    print(num,iterations)


#checkNum(12)#Output: 1 10
#checkNum(26)#Output: 1 11
checkNum(2000)#Output: 1 113
&lt;/pre&gt;

&lt;pre&gt;

#recursive approach

def checkNum(num):
    if num==1:
        return 1
    elif num%2==0:
        return checkNum(num/2)+1
    else:
        return checkNum(3*num +1)+1


output:
checkNum(26)
Out[27]: 11
checkNum(5000)
Out[28]: 29
&lt;/pre&gt;

==Program adding statement to print all iterations==
&lt;pre&gt;
def checkNum(num):
    iterations=1
    while(num!=1):
        if(num%2==0):
            num=int(num/2)            
        else:
            num = 3*num+1
        print(iterations,&quot;:&quot;,num)
        iterations+=1
        

    print(num,iterations)
&lt;/pre&gt;
==Output==
===For checkNum(2000)===
&lt;pre&gt;
1 : 1000
2 : 500
3 : 250
4 : 125
5 : 376
6 : 188
7 : 94
8 : 47
9 : 142
10 : 71
11 : 214
12 : 107
13 : 322
14 : 161
15 : 484
16 : 242
17 : 121
18 : 364
19 : 182
20 : 91
21 : 274
22 : 137
23 : 412
24 : 206
25 : 103
26 : 310
27 : 155
28 : 466
29 : 233
30 : 700
31 : 350
32 : 175
33 : 526
34 : 263
35 : 790
36 : 395
37 : 1186
38 : 593
39 : 1780
40 : 890
41 : 445
42 : 1336
43 : 668
44 : 334
45 : 167
46 : 502
47 : 251
48 : 754
49 : 377
50 : 1132
51 : 566
52 : 283
53 : 850
54 : 425
55 : 1276
56 : 638
57 : 319
58 : 958
59 : 479
60 : 1438
61 : 719
62 : 2158
63 : 1079
64 : 3238
65 : 1619
66 : 4858
67 : 2429
68 : 7288
69 : 3644
70 : 1822
71 : 911
72 : 2734
73 : 1367
74 : 4102
75 : 2051
76 : 6154
77 : 3077
78 : 9232
79 : 4616
80 : 2308
81 : 1154
82 : 577
83 : 1732
84 : 866
85 : 433
86 : 1300
87 : 650
88 : 325
89 : 976
90 : 488
91 : 244
92 : 122
93 : 61
94 : 184
95 : 92
96 : 46
97 : 23
98 : 70
99 : 35
100 : 106
101 : 53
102 : 160
103 : 80
104 : 40
105 : 20
106 : 10
107 : 5
108 : 16
109 : 8
110 : 4
111 : 2
112 : 1
1 113
&lt;/pre&gt;

===For checkNum(5000)===
&lt;pre&gt;
1 : 2500
2 : 1250
3 : 625
4 : 1876
5 : 938
6 : 469
7 : 1408
8 : 704
9 : 352
10 : 176
11 : 88
12 : 44
13 : 22
14 : 11
15 : 34
16 : 17
17 : 52
18 : 26
19 : 13
20 : 40
21 : 20
22 : 10
23 : 5
24 : 16
25 : 8
26 : 4
27 : 2
28 : 1
1 29
&lt;/pre&gt;
===For checkNum(25000000)===
&lt;pre&gt;
1 : 12500000
2 : 6250000
3 : 3125000
4 : 1562500
5 : 781250
6 : 390625
7 : 1171876
8 : 585938
9 : 292969
10 : 878908
11 : 439454
12 : 219727
13 : 659182
14 : 329591
15 : 988774
16 : 494387
17 : 1483162
18 : 741581
19 : 2224744
20 : 1112372
21 : 556186
22 : 278093
23 : 834280
24 : 417140
25 : 208570
26 : 104285
27 : 312856
28 : 156428
29 : 78214
30 : 39107
31 : 117322
32 : 58661
33 : 175984
34 : 87992
35 : 43996
36 : 21998
37 : 10999
38 : 32998
39 : 16499
40 : 49498
41 : 24749
42 : 74248
43 : 37124
44 : 18562
45 : 9281
46 : 27844
47 : 13922
48 : 6961
49 : 20884
50 : 10442
51 : 5221
52 : 15664
53 : 7832
54 : 3916
55 : 1958
56 : 979
57 : 2938
58 : 1469
59 : 4408
60 : 2204
61 : 1102
62 : 551
63 : 1654
64 : 827
65 : 2482
66 : 1241
67 : 3724
68 : 1862
69 : 931
70 : 2794
71 : 1397
72 : 4192
73 : 2096
74 : 1048
75 : 524
76 : 262
77 : 131
78 : 394
79 : 197
80 : 592
81 : 296
82 : 148
83 : 74
84 : 37
85 : 112
86 : 56
87 : 28
88 : 14
89 : 7
90 : 22
91 : 11
92 : 34
93 : 17
94 : 52
95 : 26
96 : 13
97 : 40
98 : 20
99 : 10
100 : 5
101 : 16
102 : 8
103 : 4
104 : 2
105 : 1
1 106
&lt;/pre&gt;

Happy Life ahead!!!
[[File:end1.png]]</text>
      <sha1>4uv4c9g1qho5xrraun416f2gmavli4x</sha1>
    </revision>
    <revision>
      <id>4352</id>
      <parentid>4351</parentid>
      <timestamp>2018-10-16T01:49:15Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* Page Rank - How does Google Work */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="5494">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_12 Contributors of this page]

=Page Rank - How does Google Work=
One web page is having link to other page, that is a page is referring to other page. Google uses ''Page Rank'' algorithm to choose which page should be displayed first.

If we have network, connections as below:
[[File:rank0.png]]

We want to pick a leader out of all these nodes. How to pick a leader?  Why to elect a leader? It is because we want to find the super power of available nodes.                     
[[File:rank1.png]]

For example, the application wherein, we want to find the most impressive person of the  few ones. How to decide it? As shown in below figure, each node will communicate with other, randomly, we implement the count for each node, how many times, the particular node is being visited.
[[File:rank2.png]]

[[#Top]]

As shown in following, figure, all nodes are visited and each node is marked with the 
number i.e.number of times the node is visited.
[[File:rank3.png]]

The node with the maximum count, becomes the winner. Here, node with 120 count in figure 
below, is the winner. i.e. The person with 120 count in the figure is the most impressive 
person in the community being considered.
[[File:rank4.png]]

[[File:rank5.png]]

[[File:rank6.png]]

[[File:rank7.png]]

[[File:rank8.png]]

[[File:rank9.png]]

[[File:rank10.png]]

[[File:rank11.png]]

[[File:mysore.png]]

=Collatz Conjecture=
Taught by Sudarshan sir and Amit sir, and Edited by Ms. Ami Tusharkant Choksi

If a number is even, divide it by ''2'', if it is odd, make multiply it by ''3'' and add ''1'', till you get ''1''. This simple problem is called, ''Collatz Conjecture''. 

[[File:collatz1.png]]

[[File:collatz2.png]]

[[File:collatz3.png]]

[[File:collatz4.png]]

[[File:collatz5.png]]

Number is bigger doesn't mean more iterations are required. One can notice, from the output of the following program. 



The program to implement the same is as follows:
==Program==
&lt;pre&gt;
#collatz conjecture
#if num is even, divide it by 2
#if num is odd, new number is equal to 3n+1


def checkNum(num):
    iterations=1
    while(num!=1):
        if(num%2==0):
            num=int(num/2)            
        else:
            num = 3*num+1
        iterations+=1
        

    print(num,iterations)


#checkNum(12)#Output: 1 10
#checkNum(26)#Output: 1 11
checkNum(2000)#Output: 1 113
&lt;/pre&gt;

&lt;pre&gt;

#recursive approach

def checkNum(num):
    if num==1:
        return 1
    elif num%2==0:
        return checkNum(num/2)+1
    else:
        return checkNum(3*num +1)+1


output:
checkNum(26)
Out[27]: 11
checkNum(5000)
Out[28]: 29
&lt;/pre&gt;

==Program adding statement to print all iterations==
&lt;pre&gt;
def checkNum(num):
    iterations=1
    while(num!=1):
        if(num%2==0):
            num=int(num/2)            
        else:
            num = 3*num+1
        print(iterations,&quot;:&quot;,num)
        iterations+=1
        

    print(num,iterations)
&lt;/pre&gt;
==Output==
===For checkNum(2000)===
&lt;pre&gt;
1 : 1000
2 : 500
3 : 250
4 : 125
5 : 376
6 : 188
7 : 94
8 : 47
9 : 142
10 : 71
11 : 214
12 : 107
13 : 322
14 : 161
15 : 484
16 : 242
17 : 121
18 : 364
19 : 182
20 : 91
21 : 274
22 : 137
23 : 412
24 : 206
25 : 103
26 : 310
27 : 155
28 : 466
29 : 233
30 : 700
31 : 350
32 : 175
33 : 526
34 : 263
35 : 790
36 : 395
37 : 1186
38 : 593
39 : 1780
40 : 890
41 : 445
42 : 1336
43 : 668
44 : 334
45 : 167
46 : 502
47 : 251
48 : 754
49 : 377
50 : 1132
51 : 566
52 : 283
53 : 850
54 : 425
55 : 1276
56 : 638
57 : 319
58 : 958
59 : 479
60 : 1438
61 : 719
62 : 2158
63 : 1079
64 : 3238
65 : 1619
66 : 4858
67 : 2429
68 : 7288
69 : 3644
70 : 1822
71 : 911
72 : 2734
73 : 1367
74 : 4102
75 : 2051
76 : 6154
77 : 3077
78 : 9232
79 : 4616
80 : 2308
81 : 1154
82 : 577
83 : 1732
84 : 866
85 : 433
86 : 1300
87 : 650
88 : 325
89 : 976
90 : 488
91 : 244
92 : 122
93 : 61
94 : 184
95 : 92
96 : 46
97 : 23
98 : 70
99 : 35
100 : 106
101 : 53
102 : 160
103 : 80
104 : 40
105 : 20
106 : 10
107 : 5
108 : 16
109 : 8
110 : 4
111 : 2
112 : 1
1 113
&lt;/pre&gt;

===For checkNum(5000)===
&lt;pre&gt;
1 : 2500
2 : 1250
3 : 625
4 : 1876
5 : 938
6 : 469
7 : 1408
8 : 704
9 : 352
10 : 176
11 : 88
12 : 44
13 : 22
14 : 11
15 : 34
16 : 17
17 : 52
18 : 26
19 : 13
20 : 40
21 : 20
22 : 10
23 : 5
24 : 16
25 : 8
26 : 4
27 : 2
28 : 1
1 29
&lt;/pre&gt;
===For checkNum(25000000)===
&lt;pre&gt;
1 : 12500000
2 : 6250000
3 : 3125000
4 : 1562500
5 : 781250
6 : 390625
7 : 1171876
8 : 585938
9 : 292969
10 : 878908
11 : 439454
12 : 219727
13 : 659182
14 : 329591
15 : 988774
16 : 494387
17 : 1483162
18 : 741581
19 : 2224744
20 : 1112372
21 : 556186
22 : 278093
23 : 834280
24 : 417140
25 : 208570
26 : 104285
27 : 312856
28 : 156428
29 : 78214
30 : 39107
31 : 117322
32 : 58661
33 : 175984
34 : 87992
35 : 43996
36 : 21998
37 : 10999
38 : 32998
39 : 16499
40 : 49498
41 : 24749
42 : 74248
43 : 37124
44 : 18562
45 : 9281
46 : 27844
47 : 13922
48 : 6961
49 : 20884
50 : 10442
51 : 5221
52 : 15664
53 : 7832
54 : 3916
55 : 1958
56 : 979
57 : 2938
58 : 1469
59 : 4408
60 : 2204
61 : 1102
62 : 551
63 : 1654
64 : 827
65 : 2482
66 : 1241
67 : 3724
68 : 1862
69 : 931
70 : 2794
71 : 1397
72 : 4192
73 : 2096
74 : 1048
75 : 524
76 : 262
77 : 131
78 : 394
79 : 197
80 : 592
81 : 296
82 : 148
83 : 74
84 : 37
85 : 112
86 : 56
87 : 28
88 : 14
89 : 7
90 : 22
91 : 11
92 : 34
93 : 17
94 : 52
95 : 26
96 : 13
97 : 40
98 : 20
99 : 10
100 : 5
101 : 16
102 : 8
103 : 4
104 : 2
105 : 1
1 106
&lt;/pre&gt;

Happy Life ahead!!!
[[File:end1.png]]</text>
      <sha1>jbswe7998nwgrw51t8tdpu5mtvdxc3q</sha1>
    </revision>
    <revision>
      <id>4353</id>
      <parentid>4352</parentid>
      <timestamp>2018-10-16T02:06:21Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* Page Rank - How does Google Work */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="5538">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_12 Contributors of this page]

=Page Rank - How does Google Work=
One web page is having link to other page, that is a page is referring to other page. Google uses ''Page Rank'' algorithm to choose which page should be displayed first.

If we have network, connections as below:
[[File:rank0.png]]

We want to pick a leader out of all these nodes. How to pick a leader?  Why to elect a leader? It is because we want to find the super power of available nodes.                     
[[File:rank1.png]]

For example, the application wherein, we want to find the most impressive person of the  few ones. How to decide it? As shown in below figure, each node will communicate with other, randomly, we implement the count for each node, how many times, the particular node is being visited.
[[File:rank2.png]]

[[#Top]]

As shown in following, figure, all nodes are visited and each node is marked with the 
number i.e.number of times the node is visited.
[[File:rank3.png]]

The node with the maximum count, becomes the winner. Here, node with 120 count in figure 
below, is the winner. i.e. The person with 120 count in the figure is the most impressive 
person in the community being considered.
[[File:rank4.png]]
Google selects the page rank in this matter.
[[File:rank5.png]]

[[File:rank6.png]]

[[File:rank7.png]]

[[File:rank8.png]]

[[File:rank9.png]]

[[File:rank10.png]]

[[File:rank11.png]]

[[File:mysore.png]]

=Collatz Conjecture=
Taught by Sudarshan sir and Amit sir, and Edited by Ms. Ami Tusharkant Choksi

If a number is even, divide it by ''2'', if it is odd, make multiply it by ''3'' and add ''1'', till you get ''1''. This simple problem is called, ''Collatz Conjecture''. 

[[File:collatz1.png]]

[[File:collatz2.png]]

[[File:collatz3.png]]

[[File:collatz4.png]]

[[File:collatz5.png]]

Number is bigger doesn't mean more iterations are required. One can notice, from the output of the following program. 



The program to implement the same is as follows:
==Program==
&lt;pre&gt;
#collatz conjecture
#if num is even, divide it by 2
#if num is odd, new number is equal to 3n+1


def checkNum(num):
    iterations=1
    while(num!=1):
        if(num%2==0):
            num=int(num/2)            
        else:
            num = 3*num+1
        iterations+=1
        

    print(num,iterations)


#checkNum(12)#Output: 1 10
#checkNum(26)#Output: 1 11
checkNum(2000)#Output: 1 113
&lt;/pre&gt;

&lt;pre&gt;

#recursive approach

def checkNum(num):
    if num==1:
        return 1
    elif num%2==0:
        return checkNum(num/2)+1
    else:
        return checkNum(3*num +1)+1


output:
checkNum(26)
Out[27]: 11
checkNum(5000)
Out[28]: 29
&lt;/pre&gt;

==Program adding statement to print all iterations==
&lt;pre&gt;
def checkNum(num):
    iterations=1
    while(num!=1):
        if(num%2==0):
            num=int(num/2)            
        else:
            num = 3*num+1
        print(iterations,&quot;:&quot;,num)
        iterations+=1
        

    print(num,iterations)
&lt;/pre&gt;
==Output==
===For checkNum(2000)===
&lt;pre&gt;
1 : 1000
2 : 500
3 : 250
4 : 125
5 : 376
6 : 188
7 : 94
8 : 47
9 : 142
10 : 71
11 : 214
12 : 107
13 : 322
14 : 161
15 : 484
16 : 242
17 : 121
18 : 364
19 : 182
20 : 91
21 : 274
22 : 137
23 : 412
24 : 206
25 : 103
26 : 310
27 : 155
28 : 466
29 : 233
30 : 700
31 : 350
32 : 175
33 : 526
34 : 263
35 : 790
36 : 395
37 : 1186
38 : 593
39 : 1780
40 : 890
41 : 445
42 : 1336
43 : 668
44 : 334
45 : 167
46 : 502
47 : 251
48 : 754
49 : 377
50 : 1132
51 : 566
52 : 283
53 : 850
54 : 425
55 : 1276
56 : 638
57 : 319
58 : 958
59 : 479
60 : 1438
61 : 719
62 : 2158
63 : 1079
64 : 3238
65 : 1619
66 : 4858
67 : 2429
68 : 7288
69 : 3644
70 : 1822
71 : 911
72 : 2734
73 : 1367
74 : 4102
75 : 2051
76 : 6154
77 : 3077
78 : 9232
79 : 4616
80 : 2308
81 : 1154
82 : 577
83 : 1732
84 : 866
85 : 433
86 : 1300
87 : 650
88 : 325
89 : 976
90 : 488
91 : 244
92 : 122
93 : 61
94 : 184
95 : 92
96 : 46
97 : 23
98 : 70
99 : 35
100 : 106
101 : 53
102 : 160
103 : 80
104 : 40
105 : 20
106 : 10
107 : 5
108 : 16
109 : 8
110 : 4
111 : 2
112 : 1
1 113
&lt;/pre&gt;

===For checkNum(5000)===
&lt;pre&gt;
1 : 2500
2 : 1250
3 : 625
4 : 1876
5 : 938
6 : 469
7 : 1408
8 : 704
9 : 352
10 : 176
11 : 88
12 : 44
13 : 22
14 : 11
15 : 34
16 : 17
17 : 52
18 : 26
19 : 13
20 : 40
21 : 20
22 : 10
23 : 5
24 : 16
25 : 8
26 : 4
27 : 2
28 : 1
1 29
&lt;/pre&gt;
===For checkNum(25000000)===
&lt;pre&gt;
1 : 12500000
2 : 6250000
3 : 3125000
4 : 1562500
5 : 781250
6 : 390625
7 : 1171876
8 : 585938
9 : 292969
10 : 878908
11 : 439454
12 : 219727
13 : 659182
14 : 329591
15 : 988774
16 : 494387
17 : 1483162
18 : 741581
19 : 2224744
20 : 1112372
21 : 556186
22 : 278093
23 : 834280
24 : 417140
25 : 208570
26 : 104285
27 : 312856
28 : 156428
29 : 78214
30 : 39107
31 : 117322
32 : 58661
33 : 175984
34 : 87992
35 : 43996
36 : 21998
37 : 10999
38 : 32998
39 : 16499
40 : 49498
41 : 24749
42 : 74248
43 : 37124
44 : 18562
45 : 9281
46 : 27844
47 : 13922
48 : 6961
49 : 20884
50 : 10442
51 : 5221
52 : 15664
53 : 7832
54 : 3916
55 : 1958
56 : 979
57 : 2938
58 : 1469
59 : 4408
60 : 2204
61 : 1102
62 : 551
63 : 1654
64 : 827
65 : 2482
66 : 1241
67 : 3724
68 : 1862
69 : 931
70 : 2794
71 : 1397
72 : 4192
73 : 2096
74 : 1048
75 : 524
76 : 262
77 : 131
78 : 394
79 : 197
80 : 592
81 : 296
82 : 148
83 : 74
84 : 37
85 : 112
86 : 56
87 : 28
88 : 14
89 : 7
90 : 22
91 : 11
92 : 34
93 : 17
94 : 52
95 : 26
96 : 13
97 : 40
98 : 20
99 : 10
100 : 5
101 : 16
102 : 8
103 : 4
104 : 2
105 : 1
1 106
&lt;/pre&gt;

Happy Life ahead!!!
[[File:end1.png]]</text>
      <sha1>cpqs3iwrrzcn5c1w4nbkz746dvjh975</sha1>
    </revision>
    <revision>
      <id>4354</id>
      <parentid>4353</parentid>
      <timestamp>2018-10-16T02:16:10Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* Page Rank - How does Google Work */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="5692">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_12 Contributors of this page]

=Page Rank - How does Google Work=
One web page is having link to other page, that is a page is referring to other page. Google uses ''Page Rank'' algorithm to choose which page should be displayed first.

If we have network, connections as below:
[[File:rank0.png]]

We want to pick a leader out of all these nodes. How to pick a leader?  Why to elect a leader? It is because we want to find the super power of available nodes.                     
[[File:rank1.png]]

For example, the application wherein, we want to find the most impressive person of the  few ones. How to decide it? As shown in below figure, each node will communicate with other, randomly, we implement the count for each node, how many times, the particular node is being visited.
[[File:rank2.png]]

[[#Top]]

As shown in following, figure, all nodes are visited and each node is marked with the 
number i.e.number of times the node is visited.
[[File:rank3.png]]

The node with the maximum count, becomes the winner. Here, node with 120 count in figure 
below, is the winner. i.e. The person with 120 count in the figure is the most impressive 
person in the community being considered.
[[File:rank4.png]]

[[File:rank5.png]]

[[File:rank6.png]]

[[File:rank7.png]]

Google selects the page rank in this matter. Each web page is connected to other web page with web links. To a page, maximum link is there, that will be put on top results in Google search results.
[[File:rank8.png]]

[[File:rank9.png]]

[[File:rank10.png]]

[[File:rank11.png]]

[[File:mysore.png]]

=Collatz Conjecture=
Taught by Sudarshan sir and Amit sir, and Edited by Ms. Ami Tusharkant Choksi

If a number is even, divide it by ''2'', if it is odd, make multiply it by ''3'' and add ''1'', till you get ''1''. This simple problem is called, ''Collatz Conjecture''. 

[[File:collatz1.png]]

[[File:collatz2.png]]

[[File:collatz3.png]]

[[File:collatz4.png]]

[[File:collatz5.png]]

Number is bigger doesn't mean more iterations are required. One can notice, from the output of the following program. 



The program to implement the same is as follows:
==Program==
&lt;pre&gt;
#collatz conjecture
#if num is even, divide it by 2
#if num is odd, new number is equal to 3n+1


def checkNum(num):
    iterations=1
    while(num!=1):
        if(num%2==0):
            num=int(num/2)            
        else:
            num = 3*num+1
        iterations+=1
        

    print(num,iterations)


#checkNum(12)#Output: 1 10
#checkNum(26)#Output: 1 11
checkNum(2000)#Output: 1 113
&lt;/pre&gt;

&lt;pre&gt;

#recursive approach

def checkNum(num):
    if num==1:
        return 1
    elif num%2==0:
        return checkNum(num/2)+1
    else:
        return checkNum(3*num +1)+1


output:
checkNum(26)
Out[27]: 11
checkNum(5000)
Out[28]: 29
&lt;/pre&gt;

==Program adding statement to print all iterations==
&lt;pre&gt;
def checkNum(num):
    iterations=1
    while(num!=1):
        if(num%2==0):
            num=int(num/2)            
        else:
            num = 3*num+1
        print(iterations,&quot;:&quot;,num)
        iterations+=1
        

    print(num,iterations)
&lt;/pre&gt;
==Output==
===For checkNum(2000)===
&lt;pre&gt;
1 : 1000
2 : 500
3 : 250
4 : 125
5 : 376
6 : 188
7 : 94
8 : 47
9 : 142
10 : 71
11 : 214
12 : 107
13 : 322
14 : 161
15 : 484
16 : 242
17 : 121
18 : 364
19 : 182
20 : 91
21 : 274
22 : 137
23 : 412
24 : 206
25 : 103
26 : 310
27 : 155
28 : 466
29 : 233
30 : 700
31 : 350
32 : 175
33 : 526
34 : 263
35 : 790
36 : 395
37 : 1186
38 : 593
39 : 1780
40 : 890
41 : 445
42 : 1336
43 : 668
44 : 334
45 : 167
46 : 502
47 : 251
48 : 754
49 : 377
50 : 1132
51 : 566
52 : 283
53 : 850
54 : 425
55 : 1276
56 : 638
57 : 319
58 : 958
59 : 479
60 : 1438
61 : 719
62 : 2158
63 : 1079
64 : 3238
65 : 1619
66 : 4858
67 : 2429
68 : 7288
69 : 3644
70 : 1822
71 : 911
72 : 2734
73 : 1367
74 : 4102
75 : 2051
76 : 6154
77 : 3077
78 : 9232
79 : 4616
80 : 2308
81 : 1154
82 : 577
83 : 1732
84 : 866
85 : 433
86 : 1300
87 : 650
88 : 325
89 : 976
90 : 488
91 : 244
92 : 122
93 : 61
94 : 184
95 : 92
96 : 46
97 : 23
98 : 70
99 : 35
100 : 106
101 : 53
102 : 160
103 : 80
104 : 40
105 : 20
106 : 10
107 : 5
108 : 16
109 : 8
110 : 4
111 : 2
112 : 1
1 113
&lt;/pre&gt;

===For checkNum(5000)===
&lt;pre&gt;
1 : 2500
2 : 1250
3 : 625
4 : 1876
5 : 938
6 : 469
7 : 1408
8 : 704
9 : 352
10 : 176
11 : 88
12 : 44
13 : 22
14 : 11
15 : 34
16 : 17
17 : 52
18 : 26
19 : 13
20 : 40
21 : 20
22 : 10
23 : 5
24 : 16
25 : 8
26 : 4
27 : 2
28 : 1
1 29
&lt;/pre&gt;
===For checkNum(25000000)===
&lt;pre&gt;
1 : 12500000
2 : 6250000
3 : 3125000
4 : 1562500
5 : 781250
6 : 390625
7 : 1171876
8 : 585938
9 : 292969
10 : 878908
11 : 439454
12 : 219727
13 : 659182
14 : 329591
15 : 988774
16 : 494387
17 : 1483162
18 : 741581
19 : 2224744
20 : 1112372
21 : 556186
22 : 278093
23 : 834280
24 : 417140
25 : 208570
26 : 104285
27 : 312856
28 : 156428
29 : 78214
30 : 39107
31 : 117322
32 : 58661
33 : 175984
34 : 87992
35 : 43996
36 : 21998
37 : 10999
38 : 32998
39 : 16499
40 : 49498
41 : 24749
42 : 74248
43 : 37124
44 : 18562
45 : 9281
46 : 27844
47 : 13922
48 : 6961
49 : 20884
50 : 10442
51 : 5221
52 : 15664
53 : 7832
54 : 3916
55 : 1958
56 : 979
57 : 2938
58 : 1469
59 : 4408
60 : 2204
61 : 1102
62 : 551
63 : 1654
64 : 827
65 : 2482
66 : 1241
67 : 3724
68 : 1862
69 : 931
70 : 2794
71 : 1397
72 : 4192
73 : 2096
74 : 1048
75 : 524
76 : 262
77 : 131
78 : 394
79 : 197
80 : 592
81 : 296
82 : 148
83 : 74
84 : 37
85 : 112
86 : 56
87 : 28
88 : 14
89 : 7
90 : 22
91 : 11
92 : 34
93 : 17
94 : 52
95 : 26
96 : 13
97 : 40
98 : 20
99 : 10
100 : 5
101 : 16
102 : 8
103 : 4
104 : 2
105 : 1
1 106
&lt;/pre&gt;

Happy Life ahead!!!
[[File:end1.png]]</text>
      <sha1>0f4qj87etlhyrep4axy9or3hp18g7rr</sha1>
    </revision>
    <revision>
      <id>4355</id>
      <parentid>4354</parentid>
      <timestamp>2018-10-16T02:16:41Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* Page Rank - How does Google Work */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="5693">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_12 Contributors of this page]

=Page Rank - How does Google Work=
One web page is having link to other page, that is a page is referring to other page. Google uses ''Page Rank'' algorithm to choose which page should be displayed first.

If we have network, connections as below:
[[File:rank0.png]]

We want to pick a leader out of all these nodes. How to pick a leader?  Why to elect a leader? It is because we want to find the super power of available nodes.                     
[[File:rank1.png]]

For example, the application wherein, we want to find the most impressive person of the  few ones. How to decide it? As shown in below figure, each node will communicate with other, randomly, we implement the count for each node, how many times, the particular node is being visited.
[[File:rank2.png]]

[[#Top]]

As shown in following, figure, all nodes are visited and each node is marked with the 
number i.e.number of times the node is visited.
[[File:rank3.png]]

The node with the maximum count, becomes the winner. Here, node with 120 count in figure 
below, is the winner. i.e. The person with 120 count in the figure is the most impressive 
person in the community being considered.
[[File:rank4.png]]

[[File:rank5.png]]

[[File:rank6.png]]

[[File:rank7.png]]


[[File:rank8.png]]

Google selects the page rank in this matter. Each web page is connected to other web page with web links. To a page, maximum link is there, that will be put on top results in Google search results.
[[File:rank9.png]]

[[File:rank10.png]]

[[File:rank11.png]]

[[File:mysore.png]]

=Collatz Conjecture=
Taught by Sudarshan sir and Amit sir, and Edited by Ms. Ami Tusharkant Choksi

If a number is even, divide it by ''2'', if it is odd, make multiply it by ''3'' and add ''1'', till you get ''1''. This simple problem is called, ''Collatz Conjecture''. 

[[File:collatz1.png]]

[[File:collatz2.png]]

[[File:collatz3.png]]

[[File:collatz4.png]]

[[File:collatz5.png]]

Number is bigger doesn't mean more iterations are required. One can notice, from the output of the following program. 



The program to implement the same is as follows:
==Program==
&lt;pre&gt;
#collatz conjecture
#if num is even, divide it by 2
#if num is odd, new number is equal to 3n+1


def checkNum(num):
    iterations=1
    while(num!=1):
        if(num%2==0):
            num=int(num/2)            
        else:
            num = 3*num+1
        iterations+=1
        

    print(num,iterations)


#checkNum(12)#Output: 1 10
#checkNum(26)#Output: 1 11
checkNum(2000)#Output: 1 113
&lt;/pre&gt;

&lt;pre&gt;

#recursive approach

def checkNum(num):
    if num==1:
        return 1
    elif num%2==0:
        return checkNum(num/2)+1
    else:
        return checkNum(3*num +1)+1


output:
checkNum(26)
Out[27]: 11
checkNum(5000)
Out[28]: 29
&lt;/pre&gt;

==Program adding statement to print all iterations==
&lt;pre&gt;
def checkNum(num):
    iterations=1
    while(num!=1):
        if(num%2==0):
            num=int(num/2)            
        else:
            num = 3*num+1
        print(iterations,&quot;:&quot;,num)
        iterations+=1
        

    print(num,iterations)
&lt;/pre&gt;
==Output==
===For checkNum(2000)===
&lt;pre&gt;
1 : 1000
2 : 500
3 : 250
4 : 125
5 : 376
6 : 188
7 : 94
8 : 47
9 : 142
10 : 71
11 : 214
12 : 107
13 : 322
14 : 161
15 : 484
16 : 242
17 : 121
18 : 364
19 : 182
20 : 91
21 : 274
22 : 137
23 : 412
24 : 206
25 : 103
26 : 310
27 : 155
28 : 466
29 : 233
30 : 700
31 : 350
32 : 175
33 : 526
34 : 263
35 : 790
36 : 395
37 : 1186
38 : 593
39 : 1780
40 : 890
41 : 445
42 : 1336
43 : 668
44 : 334
45 : 167
46 : 502
47 : 251
48 : 754
49 : 377
50 : 1132
51 : 566
52 : 283
53 : 850
54 : 425
55 : 1276
56 : 638
57 : 319
58 : 958
59 : 479
60 : 1438
61 : 719
62 : 2158
63 : 1079
64 : 3238
65 : 1619
66 : 4858
67 : 2429
68 : 7288
69 : 3644
70 : 1822
71 : 911
72 : 2734
73 : 1367
74 : 4102
75 : 2051
76 : 6154
77 : 3077
78 : 9232
79 : 4616
80 : 2308
81 : 1154
82 : 577
83 : 1732
84 : 866
85 : 433
86 : 1300
87 : 650
88 : 325
89 : 976
90 : 488
91 : 244
92 : 122
93 : 61
94 : 184
95 : 92
96 : 46
97 : 23
98 : 70
99 : 35
100 : 106
101 : 53
102 : 160
103 : 80
104 : 40
105 : 20
106 : 10
107 : 5
108 : 16
109 : 8
110 : 4
111 : 2
112 : 1
1 113
&lt;/pre&gt;

===For checkNum(5000)===
&lt;pre&gt;
1 : 2500
2 : 1250
3 : 625
4 : 1876
5 : 938
6 : 469
7 : 1408
8 : 704
9 : 352
10 : 176
11 : 88
12 : 44
13 : 22
14 : 11
15 : 34
16 : 17
17 : 52
18 : 26
19 : 13
20 : 40
21 : 20
22 : 10
23 : 5
24 : 16
25 : 8
26 : 4
27 : 2
28 : 1
1 29
&lt;/pre&gt;
===For checkNum(25000000)===
&lt;pre&gt;
1 : 12500000
2 : 6250000
3 : 3125000
4 : 1562500
5 : 781250
6 : 390625
7 : 1171876
8 : 585938
9 : 292969
10 : 878908
11 : 439454
12 : 219727
13 : 659182
14 : 329591
15 : 988774
16 : 494387
17 : 1483162
18 : 741581
19 : 2224744
20 : 1112372
21 : 556186
22 : 278093
23 : 834280
24 : 417140
25 : 208570
26 : 104285
27 : 312856
28 : 156428
29 : 78214
30 : 39107
31 : 117322
32 : 58661
33 : 175984
34 : 87992
35 : 43996
36 : 21998
37 : 10999
38 : 32998
39 : 16499
40 : 49498
41 : 24749
42 : 74248
43 : 37124
44 : 18562
45 : 9281
46 : 27844
47 : 13922
48 : 6961
49 : 20884
50 : 10442
51 : 5221
52 : 15664
53 : 7832
54 : 3916
55 : 1958
56 : 979
57 : 2938
58 : 1469
59 : 4408
60 : 2204
61 : 1102
62 : 551
63 : 1654
64 : 827
65 : 2482
66 : 1241
67 : 3724
68 : 1862
69 : 931
70 : 2794
71 : 1397
72 : 4192
73 : 2096
74 : 1048
75 : 524
76 : 262
77 : 131
78 : 394
79 : 197
80 : 592
81 : 296
82 : 148
83 : 74
84 : 37
85 : 112
86 : 56
87 : 28
88 : 14
89 : 7
90 : 22
91 : 11
92 : 34
93 : 17
94 : 52
95 : 26
96 : 13
97 : 40
98 : 20
99 : 10
100 : 5
101 : 16
102 : 8
103 : 4
104 : 2
105 : 1
1 106
&lt;/pre&gt;

Happy Life ahead!!!
[[File:end1.png]]</text>
      <sha1>rozr784nq9j0xsvywytmxy8kqew671k</sha1>
    </revision>
    <revision>
      <id>4356</id>
      <parentid>4355</parentid>
      <timestamp>2018-10-16T02:33:03Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* Page Rank - How does Google Work */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="5804">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_12 Contributors of this page]

=Page Rank - How does Google Work=
One web page is having link to other page, that is a page is referring to other page. Google uses ''Page Rank'' algorithm to choose which page should be displayed first.

If we have network, connections as below:
[[File:rank0.png]]

We want to pick a leader out of all these nodes. How to pick a leader?  Why to elect a leader? It is because we want to find the super power of available nodes.                     
[[File:rank1.png]]

For example, the application wherein, we want to find the most impressive person of the  few ones. How to decide it? As shown in below figure, each node will communicate with other, randomly, we implement the count for each node, how many times, the particular node is being visited.
[[File:rank2.png]]

[[#Top]]

As shown in following, figure, all nodes are visited and each node is marked with the 
number i.e.number of times the node is visited.
[[File:rank3.png]]

The node with the maximum count, becomes the winner. Here, node with 120 count in figure 
below, is the winner. i.e. The person with 120 count in the figure is the most impressive 
person in the community being considered.
[[File:rank4.png]]

[[File:rank5.png]]

[[File:rank6.png]]

[[File:rank7.png]]


[[File:rank8.png]]

[[#Top]]

Google selects the page rank in this matter. Each web page is connected to other web page with web links. To a page, maximum link is there, that will be put on top results in Google search results.
[[File:rank9.png]]
Google uses web crawler. The crawler takes the random walk on the www network and rank the web sites.
[[File:rank10.png]]

[[File:rank11.png]]

[[File:mysore.png]]

=Collatz Conjecture=
Taught by Sudarshan sir and Amit sir, and Edited by Ms. Ami Tusharkant Choksi

If a number is even, divide it by ''2'', if it is odd, make multiply it by ''3'' and add ''1'', till you get ''1''. This simple problem is called, ''Collatz Conjecture''. 

[[File:collatz1.png]]

[[File:collatz2.png]]

[[File:collatz3.png]]

[[File:collatz4.png]]

[[File:collatz5.png]]

Number is bigger doesn't mean more iterations are required. One can notice, from the output of the following program. 



The program to implement the same is as follows:
==Program==
&lt;pre&gt;
#collatz conjecture
#if num is even, divide it by 2
#if num is odd, new number is equal to 3n+1


def checkNum(num):
    iterations=1
    while(num!=1):
        if(num%2==0):
            num=int(num/2)            
        else:
            num = 3*num+1
        iterations+=1
        

    print(num,iterations)


#checkNum(12)#Output: 1 10
#checkNum(26)#Output: 1 11
checkNum(2000)#Output: 1 113
&lt;/pre&gt;

&lt;pre&gt;

#recursive approach

def checkNum(num):
    if num==1:
        return 1
    elif num%2==0:
        return checkNum(num/2)+1
    else:
        return checkNum(3*num +1)+1


output:
checkNum(26)
Out[27]: 11
checkNum(5000)
Out[28]: 29
&lt;/pre&gt;

==Program adding statement to print all iterations==
&lt;pre&gt;
def checkNum(num):
    iterations=1
    while(num!=1):
        if(num%2==0):
            num=int(num/2)            
        else:
            num = 3*num+1
        print(iterations,&quot;:&quot;,num)
        iterations+=1
        

    print(num,iterations)
&lt;/pre&gt;
==Output==
===For checkNum(2000)===
&lt;pre&gt;
1 : 1000
2 : 500
3 : 250
4 : 125
5 : 376
6 : 188
7 : 94
8 : 47
9 : 142
10 : 71
11 : 214
12 : 107
13 : 322
14 : 161
15 : 484
16 : 242
17 : 121
18 : 364
19 : 182
20 : 91
21 : 274
22 : 137
23 : 412
24 : 206
25 : 103
26 : 310
27 : 155
28 : 466
29 : 233
30 : 700
31 : 350
32 : 175
33 : 526
34 : 263
35 : 790
36 : 395
37 : 1186
38 : 593
39 : 1780
40 : 890
41 : 445
42 : 1336
43 : 668
44 : 334
45 : 167
46 : 502
47 : 251
48 : 754
49 : 377
50 : 1132
51 : 566
52 : 283
53 : 850
54 : 425
55 : 1276
56 : 638
57 : 319
58 : 958
59 : 479
60 : 1438
61 : 719
62 : 2158
63 : 1079
64 : 3238
65 : 1619
66 : 4858
67 : 2429
68 : 7288
69 : 3644
70 : 1822
71 : 911
72 : 2734
73 : 1367
74 : 4102
75 : 2051
76 : 6154
77 : 3077
78 : 9232
79 : 4616
80 : 2308
81 : 1154
82 : 577
83 : 1732
84 : 866
85 : 433
86 : 1300
87 : 650
88 : 325
89 : 976
90 : 488
91 : 244
92 : 122
93 : 61
94 : 184
95 : 92
96 : 46
97 : 23
98 : 70
99 : 35
100 : 106
101 : 53
102 : 160
103 : 80
104 : 40
105 : 20
106 : 10
107 : 5
108 : 16
109 : 8
110 : 4
111 : 2
112 : 1
1 113
&lt;/pre&gt;

===For checkNum(5000)===
&lt;pre&gt;
1 : 2500
2 : 1250
3 : 625
4 : 1876
5 : 938
6 : 469
7 : 1408
8 : 704
9 : 352
10 : 176
11 : 88
12 : 44
13 : 22
14 : 11
15 : 34
16 : 17
17 : 52
18 : 26
19 : 13
20 : 40
21 : 20
22 : 10
23 : 5
24 : 16
25 : 8
26 : 4
27 : 2
28 : 1
1 29
&lt;/pre&gt;
===For checkNum(25000000)===
&lt;pre&gt;
1 : 12500000
2 : 6250000
3 : 3125000
4 : 1562500
5 : 781250
6 : 390625
7 : 1171876
8 : 585938
9 : 292969
10 : 878908
11 : 439454
12 : 219727
13 : 659182
14 : 329591
15 : 988774
16 : 494387
17 : 1483162
18 : 741581
19 : 2224744
20 : 1112372
21 : 556186
22 : 278093
23 : 834280
24 : 417140
25 : 208570
26 : 104285
27 : 312856
28 : 156428
29 : 78214
30 : 39107
31 : 117322
32 : 58661
33 : 175984
34 : 87992
35 : 43996
36 : 21998
37 : 10999
38 : 32998
39 : 16499
40 : 49498
41 : 24749
42 : 74248
43 : 37124
44 : 18562
45 : 9281
46 : 27844
47 : 13922
48 : 6961
49 : 20884
50 : 10442
51 : 5221
52 : 15664
53 : 7832
54 : 3916
55 : 1958
56 : 979
57 : 2938
58 : 1469
59 : 4408
60 : 2204
61 : 1102
62 : 551
63 : 1654
64 : 827
65 : 2482
66 : 1241
67 : 3724
68 : 1862
69 : 931
70 : 2794
71 : 1397
72 : 4192
73 : 2096
74 : 1048
75 : 524
76 : 262
77 : 131
78 : 394
79 : 197
80 : 592
81 : 296
82 : 148
83 : 74
84 : 37
85 : 112
86 : 56
87 : 28
88 : 14
89 : 7
90 : 22
91 : 11
92 : 34
93 : 17
94 : 52
95 : 26
96 : 13
97 : 40
98 : 20
99 : 10
100 : 5
101 : 16
102 : 8
103 : 4
104 : 2
105 : 1
1 106
&lt;/pre&gt;

Happy Life ahead!!!
[[File:end1.png]]</text>
      <sha1>lvr3bqbfhvsn56qebsjytd0wsuoy7bx</sha1>
    </revision>
    <revision>
      <id>4357</id>
      <parentid>4356</parentid>
      <timestamp>2018-10-16T02:33:28Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* Page Rank - How does Google Work */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="5805">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_12 Contributors of this page]

=Page Rank - How does Google Work=
One web page is having link to other page, that is a page is referring to other page. Google uses ''Page Rank'' algorithm to choose which page should be displayed first.

If we have network, connections as below:
[[File:rank0.png]]

We want to pick a leader out of all these nodes. How to pick a leader?  Why to elect a leader? It is because we want to find the super power of available nodes.                     
[[File:rank1.png]]

For example, the application wherein, we want to find the most impressive person of the  few ones. How to decide it? As shown in below figure, each node will communicate with other, randomly, we implement the count for each node, how many times, the particular node is being visited.
[[File:rank2.png]]

[[#Top]]

As shown in following, figure, all nodes are visited and each node is marked with the 
number i.e.number of times the node is visited.
[[File:rank3.png]]

The node with the maximum count, becomes the winner. Here, node with 120 count in figure 
below, is the winner. i.e. The person with 120 count in the figure is the most impressive 
person in the community being considered.
[[File:rank4.png]]

[[File:rank5.png]]

[[File:rank6.png]]

[[File:rank7.png]]


[[File:rank8.png]]

[[#Top]]

Google selects the page rank in this matter. Each web page is connected to other web page with web links. To a page, maximum link is there, that will be put on top results in Google search results.
[[File:rank9.png]]

Google uses web crawler. The crawler takes the random walk on the www network and rank the web sites.
[[File:rank10.png]]

[[File:rank11.png]]

[[File:mysore.png]]

=Collatz Conjecture=
Taught by Sudarshan sir and Amit sir, and Edited by Ms. Ami Tusharkant Choksi

If a number is even, divide it by ''2'', if it is odd, make multiply it by ''3'' and add ''1'', till you get ''1''. This simple problem is called, ''Collatz Conjecture''. 

[[File:collatz1.png]]

[[File:collatz2.png]]

[[File:collatz3.png]]

[[File:collatz4.png]]

[[File:collatz5.png]]

Number is bigger doesn't mean more iterations are required. One can notice, from the output of the following program. 



The program to implement the same is as follows:
==Program==
&lt;pre&gt;
#collatz conjecture
#if num is even, divide it by 2
#if num is odd, new number is equal to 3n+1


def checkNum(num):
    iterations=1
    while(num!=1):
        if(num%2==0):
            num=int(num/2)            
        else:
            num = 3*num+1
        iterations+=1
        

    print(num,iterations)


#checkNum(12)#Output: 1 10
#checkNum(26)#Output: 1 11
checkNum(2000)#Output: 1 113
&lt;/pre&gt;

&lt;pre&gt;

#recursive approach

def checkNum(num):
    if num==1:
        return 1
    elif num%2==0:
        return checkNum(num/2)+1
    else:
        return checkNum(3*num +1)+1


output:
checkNum(26)
Out[27]: 11
checkNum(5000)
Out[28]: 29
&lt;/pre&gt;

==Program adding statement to print all iterations==
&lt;pre&gt;
def checkNum(num):
    iterations=1
    while(num!=1):
        if(num%2==0):
            num=int(num/2)            
        else:
            num = 3*num+1
        print(iterations,&quot;:&quot;,num)
        iterations+=1
        

    print(num,iterations)
&lt;/pre&gt;
==Output==
===For checkNum(2000)===
&lt;pre&gt;
1 : 1000
2 : 500
3 : 250
4 : 125
5 : 376
6 : 188
7 : 94
8 : 47
9 : 142
10 : 71
11 : 214
12 : 107
13 : 322
14 : 161
15 : 484
16 : 242
17 : 121
18 : 364
19 : 182
20 : 91
21 : 274
22 : 137
23 : 412
24 : 206
25 : 103
26 : 310
27 : 155
28 : 466
29 : 233
30 : 700
31 : 350
32 : 175
33 : 526
34 : 263
35 : 790
36 : 395
37 : 1186
38 : 593
39 : 1780
40 : 890
41 : 445
42 : 1336
43 : 668
44 : 334
45 : 167
46 : 502
47 : 251
48 : 754
49 : 377
50 : 1132
51 : 566
52 : 283
53 : 850
54 : 425
55 : 1276
56 : 638
57 : 319
58 : 958
59 : 479
60 : 1438
61 : 719
62 : 2158
63 : 1079
64 : 3238
65 : 1619
66 : 4858
67 : 2429
68 : 7288
69 : 3644
70 : 1822
71 : 911
72 : 2734
73 : 1367
74 : 4102
75 : 2051
76 : 6154
77 : 3077
78 : 9232
79 : 4616
80 : 2308
81 : 1154
82 : 577
83 : 1732
84 : 866
85 : 433
86 : 1300
87 : 650
88 : 325
89 : 976
90 : 488
91 : 244
92 : 122
93 : 61
94 : 184
95 : 92
96 : 46
97 : 23
98 : 70
99 : 35
100 : 106
101 : 53
102 : 160
103 : 80
104 : 40
105 : 20
106 : 10
107 : 5
108 : 16
109 : 8
110 : 4
111 : 2
112 : 1
1 113
&lt;/pre&gt;

===For checkNum(5000)===
&lt;pre&gt;
1 : 2500
2 : 1250
3 : 625
4 : 1876
5 : 938
6 : 469
7 : 1408
8 : 704
9 : 352
10 : 176
11 : 88
12 : 44
13 : 22
14 : 11
15 : 34
16 : 17
17 : 52
18 : 26
19 : 13
20 : 40
21 : 20
22 : 10
23 : 5
24 : 16
25 : 8
26 : 4
27 : 2
28 : 1
1 29
&lt;/pre&gt;
===For checkNum(25000000)===
&lt;pre&gt;
1 : 12500000
2 : 6250000
3 : 3125000
4 : 1562500
5 : 781250
6 : 390625
7 : 1171876
8 : 585938
9 : 292969
10 : 878908
11 : 439454
12 : 219727
13 : 659182
14 : 329591
15 : 988774
16 : 494387
17 : 1483162
18 : 741581
19 : 2224744
20 : 1112372
21 : 556186
22 : 278093
23 : 834280
24 : 417140
25 : 208570
26 : 104285
27 : 312856
28 : 156428
29 : 78214
30 : 39107
31 : 117322
32 : 58661
33 : 175984
34 : 87992
35 : 43996
36 : 21998
37 : 10999
38 : 32998
39 : 16499
40 : 49498
41 : 24749
42 : 74248
43 : 37124
44 : 18562
45 : 9281
46 : 27844
47 : 13922
48 : 6961
49 : 20884
50 : 10442
51 : 5221
52 : 15664
53 : 7832
54 : 3916
55 : 1958
56 : 979
57 : 2938
58 : 1469
59 : 4408
60 : 2204
61 : 1102
62 : 551
63 : 1654
64 : 827
65 : 2482
66 : 1241
67 : 3724
68 : 1862
69 : 931
70 : 2794
71 : 1397
72 : 4192
73 : 2096
74 : 1048
75 : 524
76 : 262
77 : 131
78 : 394
79 : 197
80 : 592
81 : 296
82 : 148
83 : 74
84 : 37
85 : 112
86 : 56
87 : 28
88 : 14
89 : 7
90 : 22
91 : 11
92 : 34
93 : 17
94 : 52
95 : 26
96 : 13
97 : 40
98 : 20
99 : 10
100 : 5
101 : 16
102 : 8
103 : 4
104 : 2
105 : 1
1 106
&lt;/pre&gt;

Happy Life ahead!!!
[[File:end1.png]]</text>
      <sha1>c73t7ryzm54x659s3vpvpag2we7z43f</sha1>
    </revision>
    <revision>
      <id>4358</id>
      <parentid>4357</parentid>
      <timestamp>2018-10-16T02:34:56Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* Page Rank - How does Google Work */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="5925">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_12 Contributors of this page]

=Page Rank - How does Google Work=
One web page is having link to other page, that is a page is referring to other page. Google uses ''Page Rank'' algorithm to choose which page should be displayed first.

If we have network, connections as below:
[[File:rank0.png]]

We want to pick a leader out of all these nodes. How to pick a leader?  Why to elect a leader? It is because we want to find the super power of available nodes.                     
[[File:rank1.png]]

For example, the application wherein, we want to find the most impressive person of the  few ones. How to decide it? As shown in below figure, each node will communicate with other, randomly, we implement the count for each node, how many times, the particular node is being visited.
[[File:rank2.png]]

[[#Top]]

As shown in following, figure, all nodes are visited and each node is marked with the 
number i.e.number of times the node is visited.
[[File:rank3.png]]

The node with the maximum count, becomes the winner. Here, node with 120 count in figure 
below, is the winner. i.e. The person with 120 count in the figure is the most impressive 
person in the community being considered.
[[File:rank4.png]]

[[File:rank5.png]]

[[File:rank6.png]]

[[File:rank7.png]]


[[File:rank8.png]]

[[#Top]]

Google selects the page rank in this matter. Each web page is connected to other web page with web links. To a page, maximum link is there, that will be put on top results in Google search results.
[[File:rank9.png]]

Google uses web crawler. The crawler takes the random walk on the www network and rank the web sites.
[[File:rank10.png]]

This way Google ranks the pages and displays search results, according to page rank.
[[File:rank11.png]]

e.g.we search for ''mysore city''.
[[File:mysore.png]]

=Collatz Conjecture=
Taught by Sudarshan sir and Amit sir, and Edited by Ms. Ami Tusharkant Choksi

If a number is even, divide it by ''2'', if it is odd, make multiply it by ''3'' and add ''1'', till you get ''1''. This simple problem is called, ''Collatz Conjecture''. 

[[File:collatz1.png]]

[[File:collatz2.png]]

[[File:collatz3.png]]

[[File:collatz4.png]]

[[File:collatz5.png]]

Number is bigger doesn't mean more iterations are required. One can notice, from the output of the following program. 



The program to implement the same is as follows:
==Program==
&lt;pre&gt;
#collatz conjecture
#if num is even, divide it by 2
#if num is odd, new number is equal to 3n+1


def checkNum(num):
    iterations=1
    while(num!=1):
        if(num%2==0):
            num=int(num/2)            
        else:
            num = 3*num+1
        iterations+=1
        

    print(num,iterations)


#checkNum(12)#Output: 1 10
#checkNum(26)#Output: 1 11
checkNum(2000)#Output: 1 113
&lt;/pre&gt;

&lt;pre&gt;

#recursive approach

def checkNum(num):
    if num==1:
        return 1
    elif num%2==0:
        return checkNum(num/2)+1
    else:
        return checkNum(3*num +1)+1


output:
checkNum(26)
Out[27]: 11
checkNum(5000)
Out[28]: 29
&lt;/pre&gt;

==Program adding statement to print all iterations==
&lt;pre&gt;
def checkNum(num):
    iterations=1
    while(num!=1):
        if(num%2==0):
            num=int(num/2)            
        else:
            num = 3*num+1
        print(iterations,&quot;:&quot;,num)
        iterations+=1
        

    print(num,iterations)
&lt;/pre&gt;
==Output==
===For checkNum(2000)===
&lt;pre&gt;
1 : 1000
2 : 500
3 : 250
4 : 125
5 : 376
6 : 188
7 : 94
8 : 47
9 : 142
10 : 71
11 : 214
12 : 107
13 : 322
14 : 161
15 : 484
16 : 242
17 : 121
18 : 364
19 : 182
20 : 91
21 : 274
22 : 137
23 : 412
24 : 206
25 : 103
26 : 310
27 : 155
28 : 466
29 : 233
30 : 700
31 : 350
32 : 175
33 : 526
34 : 263
35 : 790
36 : 395
37 : 1186
38 : 593
39 : 1780
40 : 890
41 : 445
42 : 1336
43 : 668
44 : 334
45 : 167
46 : 502
47 : 251
48 : 754
49 : 377
50 : 1132
51 : 566
52 : 283
53 : 850
54 : 425
55 : 1276
56 : 638
57 : 319
58 : 958
59 : 479
60 : 1438
61 : 719
62 : 2158
63 : 1079
64 : 3238
65 : 1619
66 : 4858
67 : 2429
68 : 7288
69 : 3644
70 : 1822
71 : 911
72 : 2734
73 : 1367
74 : 4102
75 : 2051
76 : 6154
77 : 3077
78 : 9232
79 : 4616
80 : 2308
81 : 1154
82 : 577
83 : 1732
84 : 866
85 : 433
86 : 1300
87 : 650
88 : 325
89 : 976
90 : 488
91 : 244
92 : 122
93 : 61
94 : 184
95 : 92
96 : 46
97 : 23
98 : 70
99 : 35
100 : 106
101 : 53
102 : 160
103 : 80
104 : 40
105 : 20
106 : 10
107 : 5
108 : 16
109 : 8
110 : 4
111 : 2
112 : 1
1 113
&lt;/pre&gt;

===For checkNum(5000)===
&lt;pre&gt;
1 : 2500
2 : 1250
3 : 625
4 : 1876
5 : 938
6 : 469
7 : 1408
8 : 704
9 : 352
10 : 176
11 : 88
12 : 44
13 : 22
14 : 11
15 : 34
16 : 17
17 : 52
18 : 26
19 : 13
20 : 40
21 : 20
22 : 10
23 : 5
24 : 16
25 : 8
26 : 4
27 : 2
28 : 1
1 29
&lt;/pre&gt;
===For checkNum(25000000)===
&lt;pre&gt;
1 : 12500000
2 : 6250000
3 : 3125000
4 : 1562500
5 : 781250
6 : 390625
7 : 1171876
8 : 585938
9 : 292969
10 : 878908
11 : 439454
12 : 219727
13 : 659182
14 : 329591
15 : 988774
16 : 494387
17 : 1483162
18 : 741581
19 : 2224744
20 : 1112372
21 : 556186
22 : 278093
23 : 834280
24 : 417140
25 : 208570
26 : 104285
27 : 312856
28 : 156428
29 : 78214
30 : 39107
31 : 117322
32 : 58661
33 : 175984
34 : 87992
35 : 43996
36 : 21998
37 : 10999
38 : 32998
39 : 16499
40 : 49498
41 : 24749
42 : 74248
43 : 37124
44 : 18562
45 : 9281
46 : 27844
47 : 13922
48 : 6961
49 : 20884
50 : 10442
51 : 5221
52 : 15664
53 : 7832
54 : 3916
55 : 1958
56 : 979
57 : 2938
58 : 1469
59 : 4408
60 : 2204
61 : 1102
62 : 551
63 : 1654
64 : 827
65 : 2482
66 : 1241
67 : 3724
68 : 1862
69 : 931
70 : 2794
71 : 1397
72 : 4192
73 : 2096
74 : 1048
75 : 524
76 : 262
77 : 131
78 : 394
79 : 197
80 : 592
81 : 296
82 : 148
83 : 74
84 : 37
85 : 112
86 : 56
87 : 28
88 : 14
89 : 7
90 : 22
91 : 11
92 : 34
93 : 17
94 : 52
95 : 26
96 : 13
97 : 40
98 : 20
99 : 10
100 : 5
101 : 16
102 : 8
103 : 4
104 : 2
105 : 1
1 106
&lt;/pre&gt;

Happy Life ahead!!!
[[File:end1.png]]</text>
      <sha1>98fjbozf5fy9xlpot27imk55k38dusi</sha1>
    </revision>
    <revision>
      <id>4359</id>
      <parentid>4358</parentid>
      <timestamp>2018-10-16T02:36:20Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* Page Rank - How does Google Work */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="6045">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_12 Contributors of this page]

=Page Rank - How does Google Work=
One web page is having link to other page, that is a page is referring to other page. Google uses ''Page Rank'' algorithm to choose which page should be displayed first.

If we have network, connections as below:
[[File:rank0.png]]

We want to pick a leader out of all these nodes. How to pick a leader?  Why to elect a leader? It is because we want to find the super power of available nodes.                     
[[File:rank1.png]]

For example, the application wherein, we want to find the most impressive person of the  few ones. How to decide it? As shown in below figure, each node will communicate with other, randomly, we implement the count for each node, how many times, the particular node is being visited.
[[File:rank2.png]]

[[#Top]]

As shown in following, figure, all nodes are visited and each node is marked with the 
number i.e.number of times the node is visited.
[[File:rank3.png]]

The node with the maximum count, becomes the winner. Here, node with 120 count in figure 
below, is the winner. i.e. The person with 120 count in the figure is the most impressive 
person in the community being considered.
[[File:rank4.png]]

[[File:rank5.png]]

[[File:rank6.png]]

[[File:rank7.png]]


[[File:rank8.png]]

[[#Top]]

Google selects the page rank in this matter. Each web page is connected to other web page with web links. To a page, maximum link is there, that will be put on top results in Google search results.
[[File:rank9.png]]

Google uses web crawler. The crawler takes the random walk on the www network and rank the web sites.
[[File:rank10.png]]

This way Google ranks the pages and displays search results, according to page rank.
[[File:rank11.png]]

e.g.we search for ''mysore city''. Google has 10,000 results. But it displays the results in the rank of page rank it is having. As shown in figure below.
[[File:mysore.png]]

=Collatz Conjecture=
Taught by Sudarshan sir and Amit sir, and Edited by Ms. Ami Tusharkant Choksi

If a number is even, divide it by ''2'', if it is odd, make multiply it by ''3'' and add ''1'', till you get ''1''. This simple problem is called, ''Collatz Conjecture''. 

[[File:collatz1.png]]

[[File:collatz2.png]]

[[File:collatz3.png]]

[[File:collatz4.png]]

[[File:collatz5.png]]

Number is bigger doesn't mean more iterations are required. One can notice, from the output of the following program. 



The program to implement the same is as follows:
==Program==
&lt;pre&gt;
#collatz conjecture
#if num is even, divide it by 2
#if num is odd, new number is equal to 3n+1


def checkNum(num):
    iterations=1
    while(num!=1):
        if(num%2==0):
            num=int(num/2)            
        else:
            num = 3*num+1
        iterations+=1
        

    print(num,iterations)


#checkNum(12)#Output: 1 10
#checkNum(26)#Output: 1 11
checkNum(2000)#Output: 1 113
&lt;/pre&gt;

&lt;pre&gt;

#recursive approach

def checkNum(num):
    if num==1:
        return 1
    elif num%2==0:
        return checkNum(num/2)+1
    else:
        return checkNum(3*num +1)+1


output:
checkNum(26)
Out[27]: 11
checkNum(5000)
Out[28]: 29
&lt;/pre&gt;

==Program adding statement to print all iterations==
&lt;pre&gt;
def checkNum(num):
    iterations=1
    while(num!=1):
        if(num%2==0):
            num=int(num/2)            
        else:
            num = 3*num+1
        print(iterations,&quot;:&quot;,num)
        iterations+=1
        

    print(num,iterations)
&lt;/pre&gt;
==Output==
===For checkNum(2000)===
&lt;pre&gt;
1 : 1000
2 : 500
3 : 250
4 : 125
5 : 376
6 : 188
7 : 94
8 : 47
9 : 142
10 : 71
11 : 214
12 : 107
13 : 322
14 : 161
15 : 484
16 : 242
17 : 121
18 : 364
19 : 182
20 : 91
21 : 274
22 : 137
23 : 412
24 : 206
25 : 103
26 : 310
27 : 155
28 : 466
29 : 233
30 : 700
31 : 350
32 : 175
33 : 526
34 : 263
35 : 790
36 : 395
37 : 1186
38 : 593
39 : 1780
40 : 890
41 : 445
42 : 1336
43 : 668
44 : 334
45 : 167
46 : 502
47 : 251
48 : 754
49 : 377
50 : 1132
51 : 566
52 : 283
53 : 850
54 : 425
55 : 1276
56 : 638
57 : 319
58 : 958
59 : 479
60 : 1438
61 : 719
62 : 2158
63 : 1079
64 : 3238
65 : 1619
66 : 4858
67 : 2429
68 : 7288
69 : 3644
70 : 1822
71 : 911
72 : 2734
73 : 1367
74 : 4102
75 : 2051
76 : 6154
77 : 3077
78 : 9232
79 : 4616
80 : 2308
81 : 1154
82 : 577
83 : 1732
84 : 866
85 : 433
86 : 1300
87 : 650
88 : 325
89 : 976
90 : 488
91 : 244
92 : 122
93 : 61
94 : 184
95 : 92
96 : 46
97 : 23
98 : 70
99 : 35
100 : 106
101 : 53
102 : 160
103 : 80
104 : 40
105 : 20
106 : 10
107 : 5
108 : 16
109 : 8
110 : 4
111 : 2
112 : 1
1 113
&lt;/pre&gt;

===For checkNum(5000)===
&lt;pre&gt;
1 : 2500
2 : 1250
3 : 625
4 : 1876
5 : 938
6 : 469
7 : 1408
8 : 704
9 : 352
10 : 176
11 : 88
12 : 44
13 : 22
14 : 11
15 : 34
16 : 17
17 : 52
18 : 26
19 : 13
20 : 40
21 : 20
22 : 10
23 : 5
24 : 16
25 : 8
26 : 4
27 : 2
28 : 1
1 29
&lt;/pre&gt;
===For checkNum(25000000)===
&lt;pre&gt;
1 : 12500000
2 : 6250000
3 : 3125000
4 : 1562500
5 : 781250
6 : 390625
7 : 1171876
8 : 585938
9 : 292969
10 : 878908
11 : 439454
12 : 219727
13 : 659182
14 : 329591
15 : 988774
16 : 494387
17 : 1483162
18 : 741581
19 : 2224744
20 : 1112372
21 : 556186
22 : 278093
23 : 834280
24 : 417140
25 : 208570
26 : 104285
27 : 312856
28 : 156428
29 : 78214
30 : 39107
31 : 117322
32 : 58661
33 : 175984
34 : 87992
35 : 43996
36 : 21998
37 : 10999
38 : 32998
39 : 16499
40 : 49498
41 : 24749
42 : 74248
43 : 37124
44 : 18562
45 : 9281
46 : 27844
47 : 13922
48 : 6961
49 : 20884
50 : 10442
51 : 5221
52 : 15664
53 : 7832
54 : 3916
55 : 1958
56 : 979
57 : 2938
58 : 1469
59 : 4408
60 : 2204
61 : 1102
62 : 551
63 : 1654
64 : 827
65 : 2482
66 : 1241
67 : 3724
68 : 1862
69 : 931
70 : 2794
71 : 1397
72 : 4192
73 : 2096
74 : 1048
75 : 524
76 : 262
77 : 131
78 : 394
79 : 197
80 : 592
81 : 296
82 : 148
83 : 74
84 : 37
85 : 112
86 : 56
87 : 28
88 : 14
89 : 7
90 : 22
91 : 11
92 : 34
93 : 17
94 : 52
95 : 26
96 : 13
97 : 40
98 : 20
99 : 10
100 : 5
101 : 16
102 : 8
103 : 4
104 : 2
105 : 1
1 106
&lt;/pre&gt;

Happy Life ahead!!!
[[File:end1.png]]</text>
      <sha1>ls8xybyd4zz6gg9v23l13ntjr0vcdq4</sha1>
    </revision>
    <revision>
      <id>4360</id>
      <parentid>4359</parentid>
      <timestamp>2018-10-16T02:37:28Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* Page Rank - How does Google Work */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="6054">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_12 Contributors of this page]

=Page Rank - How does Google Work=
One web page is having link to other page, that is a page is referring to other page. Google uses ''Page Rank'' algorithm to choose which page should be displayed first.

If we have network, connections as below:
[[File:rank0.png]]

We want to pick a leader out of all these nodes. How to pick a leader?  Why to elect a leader? It is because we want to find the super power of available nodes.                     
[[File:rank1.png]]

For example, the application wherein, we want to find the most impressive person of the  few ones. How to decide it? As shown in below figure, each node will communicate with other, randomly, we implement the count for each node, how many times, the particular node is being visited.
[[File:rank2.png]]

[[#Top]]

As shown in following, figure, all nodes are visited and each node is marked with the 
number i.e.number of times the node is visited.
[[File:rank3.png]]

The node with the maximum count, becomes the winner. Here, node with 120 count in figure 
below, is the winner. i.e. The person with 120 count in the figure is the most impressive 
person in the community being considered.
[[File:rank4.png]]

[[File:rank5.png]]

[[File:rank6.png]]

[[File:rank7.png]]


[[File:rank8.png]]

[[#Top]]

Google selects the page rank in this matter. Each web page is connected to other web page with web links. To a page, maximum link is there, that will be put on top results in Google search results.
[[File:rank9.png]]

Google uses web crawler. The crawler takes the random walk on the www network and rank the web sites.
[[File:rank10.png]]

This way Google ranks the pages and displays search results, according to page rank.
[[File:rank11.png]]

e.g.we search for ''mysore city''. Google has 10,000 results. But it displays the results in the sequence of page rank of search results, As shown in figure below.
[[File:mysore.png]]

=Collatz Conjecture=
Taught by Sudarshan sir and Amit sir, and Edited by Ms. Ami Tusharkant Choksi

If a number is even, divide it by ''2'', if it is odd, make multiply it by ''3'' and add ''1'', till you get ''1''. This simple problem is called, ''Collatz Conjecture''. 

[[File:collatz1.png]]

[[File:collatz2.png]]

[[File:collatz3.png]]

[[File:collatz4.png]]

[[File:collatz5.png]]

Number is bigger doesn't mean more iterations are required. One can notice, from the output of the following program. 



The program to implement the same is as follows:
==Program==
&lt;pre&gt;
#collatz conjecture
#if num is even, divide it by 2
#if num is odd, new number is equal to 3n+1


def checkNum(num):
    iterations=1
    while(num!=1):
        if(num%2==0):
            num=int(num/2)            
        else:
            num = 3*num+1
        iterations+=1
        

    print(num,iterations)


#checkNum(12)#Output: 1 10
#checkNum(26)#Output: 1 11
checkNum(2000)#Output: 1 113
&lt;/pre&gt;

&lt;pre&gt;

#recursive approach

def checkNum(num):
    if num==1:
        return 1
    elif num%2==0:
        return checkNum(num/2)+1
    else:
        return checkNum(3*num +1)+1


output:
checkNum(26)
Out[27]: 11
checkNum(5000)
Out[28]: 29
&lt;/pre&gt;

==Program adding statement to print all iterations==
&lt;pre&gt;
def checkNum(num):
    iterations=1
    while(num!=1):
        if(num%2==0):
            num=int(num/2)            
        else:
            num = 3*num+1
        print(iterations,&quot;:&quot;,num)
        iterations+=1
        

    print(num,iterations)
&lt;/pre&gt;
==Output==
===For checkNum(2000)===
&lt;pre&gt;
1 : 1000
2 : 500
3 : 250
4 : 125
5 : 376
6 : 188
7 : 94
8 : 47
9 : 142
10 : 71
11 : 214
12 : 107
13 : 322
14 : 161
15 : 484
16 : 242
17 : 121
18 : 364
19 : 182
20 : 91
21 : 274
22 : 137
23 : 412
24 : 206
25 : 103
26 : 310
27 : 155
28 : 466
29 : 233
30 : 700
31 : 350
32 : 175
33 : 526
34 : 263
35 : 790
36 : 395
37 : 1186
38 : 593
39 : 1780
40 : 890
41 : 445
42 : 1336
43 : 668
44 : 334
45 : 167
46 : 502
47 : 251
48 : 754
49 : 377
50 : 1132
51 : 566
52 : 283
53 : 850
54 : 425
55 : 1276
56 : 638
57 : 319
58 : 958
59 : 479
60 : 1438
61 : 719
62 : 2158
63 : 1079
64 : 3238
65 : 1619
66 : 4858
67 : 2429
68 : 7288
69 : 3644
70 : 1822
71 : 911
72 : 2734
73 : 1367
74 : 4102
75 : 2051
76 : 6154
77 : 3077
78 : 9232
79 : 4616
80 : 2308
81 : 1154
82 : 577
83 : 1732
84 : 866
85 : 433
86 : 1300
87 : 650
88 : 325
89 : 976
90 : 488
91 : 244
92 : 122
93 : 61
94 : 184
95 : 92
96 : 46
97 : 23
98 : 70
99 : 35
100 : 106
101 : 53
102 : 160
103 : 80
104 : 40
105 : 20
106 : 10
107 : 5
108 : 16
109 : 8
110 : 4
111 : 2
112 : 1
1 113
&lt;/pre&gt;

===For checkNum(5000)===
&lt;pre&gt;
1 : 2500
2 : 1250
3 : 625
4 : 1876
5 : 938
6 : 469
7 : 1408
8 : 704
9 : 352
10 : 176
11 : 88
12 : 44
13 : 22
14 : 11
15 : 34
16 : 17
17 : 52
18 : 26
19 : 13
20 : 40
21 : 20
22 : 10
23 : 5
24 : 16
25 : 8
26 : 4
27 : 2
28 : 1
1 29
&lt;/pre&gt;
===For checkNum(25000000)===
&lt;pre&gt;
1 : 12500000
2 : 6250000
3 : 3125000
4 : 1562500
5 : 781250
6 : 390625
7 : 1171876
8 : 585938
9 : 292969
10 : 878908
11 : 439454
12 : 219727
13 : 659182
14 : 329591
15 : 988774
16 : 494387
17 : 1483162
18 : 741581
19 : 2224744
20 : 1112372
21 : 556186
22 : 278093
23 : 834280
24 : 417140
25 : 208570
26 : 104285
27 : 312856
28 : 156428
29 : 78214
30 : 39107
31 : 117322
32 : 58661
33 : 175984
34 : 87992
35 : 43996
36 : 21998
37 : 10999
38 : 32998
39 : 16499
40 : 49498
41 : 24749
42 : 74248
43 : 37124
44 : 18562
45 : 9281
46 : 27844
47 : 13922
48 : 6961
49 : 20884
50 : 10442
51 : 5221
52 : 15664
53 : 7832
54 : 3916
55 : 1958
56 : 979
57 : 2938
58 : 1469
59 : 4408
60 : 2204
61 : 1102
62 : 551
63 : 1654
64 : 827
65 : 2482
66 : 1241
67 : 3724
68 : 1862
69 : 931
70 : 2794
71 : 1397
72 : 4192
73 : 2096
74 : 1048
75 : 524
76 : 262
77 : 131
78 : 394
79 : 197
80 : 592
81 : 296
82 : 148
83 : 74
84 : 37
85 : 112
86 : 56
87 : 28
88 : 14
89 : 7
90 : 22
91 : 11
92 : 34
93 : 17
94 : 52
95 : 26
96 : 13
97 : 40
98 : 20
99 : 10
100 : 5
101 : 16
102 : 8
103 : 4
104 : 2
105 : 1
1 106
&lt;/pre&gt;

Happy Life ahead!!!
[[File:end1.png]]</text>
      <sha1>40c8oyk6u8sw1u9c2smavpwmolxio1a</sha1>
    </revision>
    <revision>
      <id>4361</id>
      <parentid>4360</parentid>
      <timestamp>2018-10-16T02:37:57Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* Page Rank - How does Google Work */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="6064">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_12 Contributors of this page]

=Page Rank - How does Google Work=
One web page is having link to other page, that is a page is referring to other page. Google uses ''Page Rank'' algorithm to choose which page should be displayed first.

If we have network, connections as below:
[[File:rank0.png]]

We want to pick a leader out of all these nodes. How to pick a leader?  Why to elect a leader? It is because we want to find the super power of available nodes.                     
[[File:rank1.png]]

For example, the application wherein, we want to find the most impressive person of the  few ones. How to decide it? As shown in below figure, each node will communicate with other, randomly, we implement the count for each node, how many times, the particular node is being visited.
[[File:rank2.png]]

[[#Top]]

As shown in following, figure, all nodes are visited and each node is marked with the 
number i.e.number of times the node is visited.
[[File:rank3.png]]

The node with the maximum count, becomes the winner. Here, node with 120 count in figure 
below, is the winner. i.e. The person with 120 count in the figure is the most impressive 
person in the community being considered.
[[File:rank4.png]]

[[File:rank5.png]]

[[File:rank6.png]]

[[File:rank7.png]]


[[File:rank8.png]]

[[#Top]]

Google selects the page rank in this matter. Each web page is connected to other web page with web links. To a page, maximum link is there, that will be put on top results in Google search results.
[[File:rank9.png]]

Google uses web crawler. The crawler takes the random walk on the www network and rank the web sites.
[[File:rank10.png]]

This way Google ranks the pages and displays search results, according to page rank.
[[File:rank11.png]]

e.g.we search for ''mysore city''. Google has 10,000 results. But it displays the results in the sequence of page rank of search results, As shown in figure below.
[[File:mysore.png]]

[[#Top]]

=Collatz Conjecture=
Taught by Sudarshan sir and Amit sir, and Edited by Ms. Ami Tusharkant Choksi

If a number is even, divide it by ''2'', if it is odd, make multiply it by ''3'' and add ''1'', till you get ''1''. This simple problem is called, ''Collatz Conjecture''. 

[[File:collatz1.png]]

[[File:collatz2.png]]

[[File:collatz3.png]]

[[File:collatz4.png]]

[[File:collatz5.png]]

Number is bigger doesn't mean more iterations are required. One can notice, from the output of the following program. 



The program to implement the same is as follows:
==Program==
&lt;pre&gt;
#collatz conjecture
#if num is even, divide it by 2
#if num is odd, new number is equal to 3n+1


def checkNum(num):
    iterations=1
    while(num!=1):
        if(num%2==0):
            num=int(num/2)            
        else:
            num = 3*num+1
        iterations+=1
        

    print(num,iterations)


#checkNum(12)#Output: 1 10
#checkNum(26)#Output: 1 11
checkNum(2000)#Output: 1 113
&lt;/pre&gt;

&lt;pre&gt;

#recursive approach

def checkNum(num):
    if num==1:
        return 1
    elif num%2==0:
        return checkNum(num/2)+1
    else:
        return checkNum(3*num +1)+1


output:
checkNum(26)
Out[27]: 11
checkNum(5000)
Out[28]: 29
&lt;/pre&gt;

==Program adding statement to print all iterations==
&lt;pre&gt;
def checkNum(num):
    iterations=1
    while(num!=1):
        if(num%2==0):
            num=int(num/2)            
        else:
            num = 3*num+1
        print(iterations,&quot;:&quot;,num)
        iterations+=1
        

    print(num,iterations)
&lt;/pre&gt;
==Output==
===For checkNum(2000)===
&lt;pre&gt;
1 : 1000
2 : 500
3 : 250
4 : 125
5 : 376
6 : 188
7 : 94
8 : 47
9 : 142
10 : 71
11 : 214
12 : 107
13 : 322
14 : 161
15 : 484
16 : 242
17 : 121
18 : 364
19 : 182
20 : 91
21 : 274
22 : 137
23 : 412
24 : 206
25 : 103
26 : 310
27 : 155
28 : 466
29 : 233
30 : 700
31 : 350
32 : 175
33 : 526
34 : 263
35 : 790
36 : 395
37 : 1186
38 : 593
39 : 1780
40 : 890
41 : 445
42 : 1336
43 : 668
44 : 334
45 : 167
46 : 502
47 : 251
48 : 754
49 : 377
50 : 1132
51 : 566
52 : 283
53 : 850
54 : 425
55 : 1276
56 : 638
57 : 319
58 : 958
59 : 479
60 : 1438
61 : 719
62 : 2158
63 : 1079
64 : 3238
65 : 1619
66 : 4858
67 : 2429
68 : 7288
69 : 3644
70 : 1822
71 : 911
72 : 2734
73 : 1367
74 : 4102
75 : 2051
76 : 6154
77 : 3077
78 : 9232
79 : 4616
80 : 2308
81 : 1154
82 : 577
83 : 1732
84 : 866
85 : 433
86 : 1300
87 : 650
88 : 325
89 : 976
90 : 488
91 : 244
92 : 122
93 : 61
94 : 184
95 : 92
96 : 46
97 : 23
98 : 70
99 : 35
100 : 106
101 : 53
102 : 160
103 : 80
104 : 40
105 : 20
106 : 10
107 : 5
108 : 16
109 : 8
110 : 4
111 : 2
112 : 1
1 113
&lt;/pre&gt;

===For checkNum(5000)===
&lt;pre&gt;
1 : 2500
2 : 1250
3 : 625
4 : 1876
5 : 938
6 : 469
7 : 1408
8 : 704
9 : 352
10 : 176
11 : 88
12 : 44
13 : 22
14 : 11
15 : 34
16 : 17
17 : 52
18 : 26
19 : 13
20 : 40
21 : 20
22 : 10
23 : 5
24 : 16
25 : 8
26 : 4
27 : 2
28 : 1
1 29
&lt;/pre&gt;
===For checkNum(25000000)===
&lt;pre&gt;
1 : 12500000
2 : 6250000
3 : 3125000
4 : 1562500
5 : 781250
6 : 390625
7 : 1171876
8 : 585938
9 : 292969
10 : 878908
11 : 439454
12 : 219727
13 : 659182
14 : 329591
15 : 988774
16 : 494387
17 : 1483162
18 : 741581
19 : 2224744
20 : 1112372
21 : 556186
22 : 278093
23 : 834280
24 : 417140
25 : 208570
26 : 104285
27 : 312856
28 : 156428
29 : 78214
30 : 39107
31 : 117322
32 : 58661
33 : 175984
34 : 87992
35 : 43996
36 : 21998
37 : 10999
38 : 32998
39 : 16499
40 : 49498
41 : 24749
42 : 74248
43 : 37124
44 : 18562
45 : 9281
46 : 27844
47 : 13922
48 : 6961
49 : 20884
50 : 10442
51 : 5221
52 : 15664
53 : 7832
54 : 3916
55 : 1958
56 : 979
57 : 2938
58 : 1469
59 : 4408
60 : 2204
61 : 1102
62 : 551
63 : 1654
64 : 827
65 : 2482
66 : 1241
67 : 3724
68 : 1862
69 : 931
70 : 2794
71 : 1397
72 : 4192
73 : 2096
74 : 1048
75 : 524
76 : 262
77 : 131
78 : 394
79 : 197
80 : 592
81 : 296
82 : 148
83 : 74
84 : 37
85 : 112
86 : 56
87 : 28
88 : 14
89 : 7
90 : 22
91 : 11
92 : 34
93 : 17
94 : 52
95 : 26
96 : 13
97 : 40
98 : 20
99 : 10
100 : 5
101 : 16
102 : 8
103 : 4
104 : 2
105 : 1
1 106
&lt;/pre&gt;

Happy Life ahead!!!
[[File:end1.png]]</text>
      <sha1>qe1dsoitg89q6pm0i0aoloz8lwyihza</sha1>
    </revision>
    <revision>
      <id>4362</id>
      <parentid>4361</parentid>
      <timestamp>2018-10-16T02:58:50Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* Page Rank - How does Google Work */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="6110">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_12 Contributors of this page]

=Page Rank - How does Google Work=
One web page is having link to other page, that is a page is referring to other page. Google uses ''Page Rank'' algorithm to choose which page should be displayed first.

If we have network, connections as below:
[[File:rank0.png]]

We want to pick a leader out of all these nodes. How to pick a leader?  Why to elect a leader? It is because we want to find the super power of available nodes.                     
[[File:rank1.png]]

For example, the application wherein, we want to find the most impressive person of the  few ones. How to decide it? As shown in below figure, each node will communicate with other, randomly, we implement the count for each node, how many times, the particular node is being visited.
[[File:rank2.png]]

[[#Top]]

As shown in following, figure, all nodes are visited and each node is marked with the 
number i.e.number of times the node is visited.
[[File:rank3.png]]

The node with the maximum count, becomes the winner. Here, node with 120 count in figure 
below, is the winner. i.e. The person with 120 count in the figure is the most impressive 
person in the community being considered.
[[File:rank4.png]]

[[File:rank5.png]]

[[File:rank6.png]]

[[File:rank7.png]]


[[File:rank8.png]]

[[#Top]]

Google selects the page rank in this matter. Each web page is connected to other web page with web links. To a page, maximum link is there, that will be put on top results in Google search results.
[[File:rank9.png]]

Google uses web crawler. The crawler takes the random walk on the www network and rank the web sites.
[[File:rank10.png]]

This way Google ranks the pages and displays search results, according to page rank.
[[File:rank11.png]]

e.g.we search for ''mysore city''. Google has 10,000 results. But it displays the results in the sequence of page rank of search results, As shown in figure below.
[[File:mysore.png]]

[[#Top]]

==Page rank algorithm ==
[[File:rank12.png]]

=Collatz Conjecture=
Taught by Sudarshan sir and Amit sir, and Edited by Ms. Ami Tusharkant Choksi

If a number is even, divide it by ''2'', if it is odd, make multiply it by ''3'' and add ''1'', till you get ''1''. This simple problem is called, ''Collatz Conjecture''. 

[[File:collatz1.png]]

[[File:collatz2.png]]

[[File:collatz3.png]]

[[File:collatz4.png]]

[[File:collatz5.png]]

Number is bigger doesn't mean more iterations are required. One can notice, from the output of the following program. 



The program to implement the same is as follows:
==Program==
&lt;pre&gt;
#collatz conjecture
#if num is even, divide it by 2
#if num is odd, new number is equal to 3n+1


def checkNum(num):
    iterations=1
    while(num!=1):
        if(num%2==0):
            num=int(num/2)            
        else:
            num = 3*num+1
        iterations+=1
        

    print(num,iterations)


#checkNum(12)#Output: 1 10
#checkNum(26)#Output: 1 11
checkNum(2000)#Output: 1 113
&lt;/pre&gt;

&lt;pre&gt;

#recursive approach

def checkNum(num):
    if num==1:
        return 1
    elif num%2==0:
        return checkNum(num/2)+1
    else:
        return checkNum(3*num +1)+1


output:
checkNum(26)
Out[27]: 11
checkNum(5000)
Out[28]: 29
&lt;/pre&gt;

==Program adding statement to print all iterations==
&lt;pre&gt;
def checkNum(num):
    iterations=1
    while(num!=1):
        if(num%2==0):
            num=int(num/2)            
        else:
            num = 3*num+1
        print(iterations,&quot;:&quot;,num)
        iterations+=1
        

    print(num,iterations)
&lt;/pre&gt;
==Output==
===For checkNum(2000)===
&lt;pre&gt;
1 : 1000
2 : 500
3 : 250
4 : 125
5 : 376
6 : 188
7 : 94
8 : 47
9 : 142
10 : 71
11 : 214
12 : 107
13 : 322
14 : 161
15 : 484
16 : 242
17 : 121
18 : 364
19 : 182
20 : 91
21 : 274
22 : 137
23 : 412
24 : 206
25 : 103
26 : 310
27 : 155
28 : 466
29 : 233
30 : 700
31 : 350
32 : 175
33 : 526
34 : 263
35 : 790
36 : 395
37 : 1186
38 : 593
39 : 1780
40 : 890
41 : 445
42 : 1336
43 : 668
44 : 334
45 : 167
46 : 502
47 : 251
48 : 754
49 : 377
50 : 1132
51 : 566
52 : 283
53 : 850
54 : 425
55 : 1276
56 : 638
57 : 319
58 : 958
59 : 479
60 : 1438
61 : 719
62 : 2158
63 : 1079
64 : 3238
65 : 1619
66 : 4858
67 : 2429
68 : 7288
69 : 3644
70 : 1822
71 : 911
72 : 2734
73 : 1367
74 : 4102
75 : 2051
76 : 6154
77 : 3077
78 : 9232
79 : 4616
80 : 2308
81 : 1154
82 : 577
83 : 1732
84 : 866
85 : 433
86 : 1300
87 : 650
88 : 325
89 : 976
90 : 488
91 : 244
92 : 122
93 : 61
94 : 184
95 : 92
96 : 46
97 : 23
98 : 70
99 : 35
100 : 106
101 : 53
102 : 160
103 : 80
104 : 40
105 : 20
106 : 10
107 : 5
108 : 16
109 : 8
110 : 4
111 : 2
112 : 1
1 113
&lt;/pre&gt;

===For checkNum(5000)===
&lt;pre&gt;
1 : 2500
2 : 1250
3 : 625
4 : 1876
5 : 938
6 : 469
7 : 1408
8 : 704
9 : 352
10 : 176
11 : 88
12 : 44
13 : 22
14 : 11
15 : 34
16 : 17
17 : 52
18 : 26
19 : 13
20 : 40
21 : 20
22 : 10
23 : 5
24 : 16
25 : 8
26 : 4
27 : 2
28 : 1
1 29
&lt;/pre&gt;
===For checkNum(25000000)===
&lt;pre&gt;
1 : 12500000
2 : 6250000
3 : 3125000
4 : 1562500
5 : 781250
6 : 390625
7 : 1171876
8 : 585938
9 : 292969
10 : 878908
11 : 439454
12 : 219727
13 : 659182
14 : 329591
15 : 988774
16 : 494387
17 : 1483162
18 : 741581
19 : 2224744
20 : 1112372
21 : 556186
22 : 278093
23 : 834280
24 : 417140
25 : 208570
26 : 104285
27 : 312856
28 : 156428
29 : 78214
30 : 39107
31 : 117322
32 : 58661
33 : 175984
34 : 87992
35 : 43996
36 : 21998
37 : 10999
38 : 32998
39 : 16499
40 : 49498
41 : 24749
42 : 74248
43 : 37124
44 : 18562
45 : 9281
46 : 27844
47 : 13922
48 : 6961
49 : 20884
50 : 10442
51 : 5221
52 : 15664
53 : 7832
54 : 3916
55 : 1958
56 : 979
57 : 2938
58 : 1469
59 : 4408
60 : 2204
61 : 1102
62 : 551
63 : 1654
64 : 827
65 : 2482
66 : 1241
67 : 3724
68 : 1862
69 : 931
70 : 2794
71 : 1397
72 : 4192
73 : 2096
74 : 1048
75 : 524
76 : 262
77 : 131
78 : 394
79 : 197
80 : 592
81 : 296
82 : 148
83 : 74
84 : 37
85 : 112
86 : 56
87 : 28
88 : 14
89 : 7
90 : 22
91 : 11
92 : 34
93 : 17
94 : 52
95 : 26
96 : 13
97 : 40
98 : 20
99 : 10
100 : 5
101 : 16
102 : 8
103 : 4
104 : 2
105 : 1
1 106
&lt;/pre&gt;

Happy Life ahead!!!
[[File:end1.png]]</text>
      <sha1>otgwsijw1h60tarrpjie6o3rtpfsreh</sha1>
    </revision>
    <revision>
      <id>4364</id>
      <parentid>4362</parentid>
      <timestamp>2018-10-16T03:02:20Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* Page rank algorithm */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="6153">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_12 Contributors of this page]

=Page Rank - How does Google Work=
One web page is having link to other page, that is a page is referring to other page. Google uses ''Page Rank'' algorithm to choose which page should be displayed first.

If we have network, connections as below:
[[File:rank0.png]]

We want to pick a leader out of all these nodes. How to pick a leader?  Why to elect a leader? It is because we want to find the super power of available nodes.                     
[[File:rank1.png]]

For example, the application wherein, we want to find the most impressive person of the  few ones. How to decide it? As shown in below figure, each node will communicate with other, randomly, we implement the count for each node, how many times, the particular node is being visited.
[[File:rank2.png]]

[[#Top]]

As shown in following, figure, all nodes are visited and each node is marked with the 
number i.e.number of times the node is visited.
[[File:rank3.png]]

The node with the maximum count, becomes the winner. Here, node with 120 count in figure 
below, is the winner. i.e. The person with 120 count in the figure is the most impressive 
person in the community being considered.
[[File:rank4.png]]

[[File:rank5.png]]

[[File:rank6.png]]

[[File:rank7.png]]


[[File:rank8.png]]

[[#Top]]

Google selects the page rank in this matter. Each web page is connected to other web page with web links. To a page, maximum link is there, that will be put on top results in Google search results.
[[File:rank9.png]]

Google uses web crawler. The crawler takes the random walk on the www network and rank the web sites.
[[File:rank10.png]]

This way Google ranks the pages and displays search results, according to page rank.
[[File:rank11.png]]

e.g.we search for ''mysore city''. Google has 10,000 results. But it displays the results in the sequence of page rank of search results, As shown in figure below.
[[File:mysore.png]]

[[#Top]]

==Page rank algorithm ==
[[File:rank12.png]]


[[File:graph.png]]


[[File:graph1.png]]

=Collatz Conjecture=
Taught by Sudarshan sir and Amit sir, and Edited by Ms. Ami Tusharkant Choksi

If a number is even, divide it by ''2'', if it is odd, make multiply it by ''3'' and add ''1'', till you get ''1''. This simple problem is called, ''Collatz Conjecture''. 

[[File:collatz1.png]]

[[File:collatz2.png]]

[[File:collatz3.png]]

[[File:collatz4.png]]

[[File:collatz5.png]]

Number is bigger doesn't mean more iterations are required. One can notice, from the output of the following program. 



The program to implement the same is as follows:
==Program==
&lt;pre&gt;
#collatz conjecture
#if num is even, divide it by 2
#if num is odd, new number is equal to 3n+1


def checkNum(num):
    iterations=1
    while(num!=1):
        if(num%2==0):
            num=int(num/2)            
        else:
            num = 3*num+1
        iterations+=1
        

    print(num,iterations)


#checkNum(12)#Output: 1 10
#checkNum(26)#Output: 1 11
checkNum(2000)#Output: 1 113
&lt;/pre&gt;

&lt;pre&gt;

#recursive approach

def checkNum(num):
    if num==1:
        return 1
    elif num%2==0:
        return checkNum(num/2)+1
    else:
        return checkNum(3*num +1)+1


output:
checkNum(26)
Out[27]: 11
checkNum(5000)
Out[28]: 29
&lt;/pre&gt;

==Program adding statement to print all iterations==
&lt;pre&gt;
def checkNum(num):
    iterations=1
    while(num!=1):
        if(num%2==0):
            num=int(num/2)            
        else:
            num = 3*num+1
        print(iterations,&quot;:&quot;,num)
        iterations+=1
        

    print(num,iterations)
&lt;/pre&gt;
==Output==
===For checkNum(2000)===
&lt;pre&gt;
1 : 1000
2 : 500
3 : 250
4 : 125
5 : 376
6 : 188
7 : 94
8 : 47
9 : 142
10 : 71
11 : 214
12 : 107
13 : 322
14 : 161
15 : 484
16 : 242
17 : 121
18 : 364
19 : 182
20 : 91
21 : 274
22 : 137
23 : 412
24 : 206
25 : 103
26 : 310
27 : 155
28 : 466
29 : 233
30 : 700
31 : 350
32 : 175
33 : 526
34 : 263
35 : 790
36 : 395
37 : 1186
38 : 593
39 : 1780
40 : 890
41 : 445
42 : 1336
43 : 668
44 : 334
45 : 167
46 : 502
47 : 251
48 : 754
49 : 377
50 : 1132
51 : 566
52 : 283
53 : 850
54 : 425
55 : 1276
56 : 638
57 : 319
58 : 958
59 : 479
60 : 1438
61 : 719
62 : 2158
63 : 1079
64 : 3238
65 : 1619
66 : 4858
67 : 2429
68 : 7288
69 : 3644
70 : 1822
71 : 911
72 : 2734
73 : 1367
74 : 4102
75 : 2051
76 : 6154
77 : 3077
78 : 9232
79 : 4616
80 : 2308
81 : 1154
82 : 577
83 : 1732
84 : 866
85 : 433
86 : 1300
87 : 650
88 : 325
89 : 976
90 : 488
91 : 244
92 : 122
93 : 61
94 : 184
95 : 92
96 : 46
97 : 23
98 : 70
99 : 35
100 : 106
101 : 53
102 : 160
103 : 80
104 : 40
105 : 20
106 : 10
107 : 5
108 : 16
109 : 8
110 : 4
111 : 2
112 : 1
1 113
&lt;/pre&gt;

===For checkNum(5000)===
&lt;pre&gt;
1 : 2500
2 : 1250
3 : 625
4 : 1876
5 : 938
6 : 469
7 : 1408
8 : 704
9 : 352
10 : 176
11 : 88
12 : 44
13 : 22
14 : 11
15 : 34
16 : 17
17 : 52
18 : 26
19 : 13
20 : 40
21 : 20
22 : 10
23 : 5
24 : 16
25 : 8
26 : 4
27 : 2
28 : 1
1 29
&lt;/pre&gt;
===For checkNum(25000000)===
&lt;pre&gt;
1 : 12500000
2 : 6250000
3 : 3125000
4 : 1562500
5 : 781250
6 : 390625
7 : 1171876
8 : 585938
9 : 292969
10 : 878908
11 : 439454
12 : 219727
13 : 659182
14 : 329591
15 : 988774
16 : 494387
17 : 1483162
18 : 741581
19 : 2224744
20 : 1112372
21 : 556186
22 : 278093
23 : 834280
24 : 417140
25 : 208570
26 : 104285
27 : 312856
28 : 156428
29 : 78214
30 : 39107
31 : 117322
32 : 58661
33 : 175984
34 : 87992
35 : 43996
36 : 21998
37 : 10999
38 : 32998
39 : 16499
40 : 49498
41 : 24749
42 : 74248
43 : 37124
44 : 18562
45 : 9281
46 : 27844
47 : 13922
48 : 6961
49 : 20884
50 : 10442
51 : 5221
52 : 15664
53 : 7832
54 : 3916
55 : 1958
56 : 979
57 : 2938
58 : 1469
59 : 4408
60 : 2204
61 : 1102
62 : 551
63 : 1654
64 : 827
65 : 2482
66 : 1241
67 : 3724
68 : 1862
69 : 931
70 : 2794
71 : 1397
72 : 4192
73 : 2096
74 : 1048
75 : 524
76 : 262
77 : 131
78 : 394
79 : 197
80 : 592
81 : 296
82 : 148
83 : 74
84 : 37
85 : 112
86 : 56
87 : 28
88 : 14
89 : 7
90 : 22
91 : 11
92 : 34
93 : 17
94 : 52
95 : 26
96 : 13
97 : 40
98 : 20
99 : 10
100 : 5
101 : 16
102 : 8
103 : 4
104 : 2
105 : 1
1 106
&lt;/pre&gt;

Happy Life ahead!!!
[[File:end1.png]]</text>
      <sha1>9fxcmoavp82p85ju2h580dvp7xq8g8v</sha1>
    </revision>
    <revision>
      <id>4365</id>
      <parentid>4364</parentid>
      <timestamp>2018-10-16T03:02:42Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* Page rank algorithm */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="6110">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_12 Contributors of this page]

=Page Rank - How does Google Work=
One web page is having link to other page, that is a page is referring to other page. Google uses ''Page Rank'' algorithm to choose which page should be displayed first.

If we have network, connections as below:
[[File:rank0.png]]

We want to pick a leader out of all these nodes. How to pick a leader?  Why to elect a leader? It is because we want to find the super power of available nodes.                     
[[File:rank1.png]]

For example, the application wherein, we want to find the most impressive person of the  few ones. How to decide it? As shown in below figure, each node will communicate with other, randomly, we implement the count for each node, how many times, the particular node is being visited.
[[File:rank2.png]]

[[#Top]]

As shown in following, figure, all nodes are visited and each node is marked with the 
number i.e.number of times the node is visited.
[[File:rank3.png]]

The node with the maximum count, becomes the winner. Here, node with 120 count in figure 
below, is the winner. i.e. The person with 120 count in the figure is the most impressive 
person in the community being considered.
[[File:rank4.png]]

[[File:rank5.png]]

[[File:rank6.png]]

[[File:rank7.png]]


[[File:rank8.png]]

[[#Top]]

Google selects the page rank in this matter. Each web page is connected to other web page with web links. To a page, maximum link is there, that will be put on top results in Google search results.
[[File:rank9.png]]

Google uses web crawler. The crawler takes the random walk on the www network and rank the web sites.
[[File:rank10.png]]

This way Google ranks the pages and displays search results, according to page rank.
[[File:rank11.png]]

e.g.we search for ''mysore city''. Google has 10,000 results. But it displays the results in the sequence of page rank of search results, As shown in figure below.
[[File:mysore.png]]

[[#Top]]

==Page rank algorithm ==
[[File:rank12.png]]

=Collatz Conjecture=
Taught by Sudarshan sir and Amit sir, and Edited by Ms. Ami Tusharkant Choksi

If a number is even, divide it by ''2'', if it is odd, make multiply it by ''3'' and add ''1'', till you get ''1''. This simple problem is called, ''Collatz Conjecture''. 

[[File:collatz1.png]]

[[File:collatz2.png]]

[[File:collatz3.png]]

[[File:collatz4.png]]

[[File:collatz5.png]]

Number is bigger doesn't mean more iterations are required. One can notice, from the output of the following program. 



The program to implement the same is as follows:
==Program==
&lt;pre&gt;
#collatz conjecture
#if num is even, divide it by 2
#if num is odd, new number is equal to 3n+1


def checkNum(num):
    iterations=1
    while(num!=1):
        if(num%2==0):
            num=int(num/2)            
        else:
            num = 3*num+1
        iterations+=1
        

    print(num,iterations)


#checkNum(12)#Output: 1 10
#checkNum(26)#Output: 1 11
checkNum(2000)#Output: 1 113
&lt;/pre&gt;

&lt;pre&gt;

#recursive approach

def checkNum(num):
    if num==1:
        return 1
    elif num%2==0:
        return checkNum(num/2)+1
    else:
        return checkNum(3*num +1)+1


output:
checkNum(26)
Out[27]: 11
checkNum(5000)
Out[28]: 29
&lt;/pre&gt;

==Program adding statement to print all iterations==
&lt;pre&gt;
def checkNum(num):
    iterations=1
    while(num!=1):
        if(num%2==0):
            num=int(num/2)            
        else:
            num = 3*num+1
        print(iterations,&quot;:&quot;,num)
        iterations+=1
        

    print(num,iterations)
&lt;/pre&gt;
==Output==
===For checkNum(2000)===
&lt;pre&gt;
1 : 1000
2 : 500
3 : 250
4 : 125
5 : 376
6 : 188
7 : 94
8 : 47
9 : 142
10 : 71
11 : 214
12 : 107
13 : 322
14 : 161
15 : 484
16 : 242
17 : 121
18 : 364
19 : 182
20 : 91
21 : 274
22 : 137
23 : 412
24 : 206
25 : 103
26 : 310
27 : 155
28 : 466
29 : 233
30 : 700
31 : 350
32 : 175
33 : 526
34 : 263
35 : 790
36 : 395
37 : 1186
38 : 593
39 : 1780
40 : 890
41 : 445
42 : 1336
43 : 668
44 : 334
45 : 167
46 : 502
47 : 251
48 : 754
49 : 377
50 : 1132
51 : 566
52 : 283
53 : 850
54 : 425
55 : 1276
56 : 638
57 : 319
58 : 958
59 : 479
60 : 1438
61 : 719
62 : 2158
63 : 1079
64 : 3238
65 : 1619
66 : 4858
67 : 2429
68 : 7288
69 : 3644
70 : 1822
71 : 911
72 : 2734
73 : 1367
74 : 4102
75 : 2051
76 : 6154
77 : 3077
78 : 9232
79 : 4616
80 : 2308
81 : 1154
82 : 577
83 : 1732
84 : 866
85 : 433
86 : 1300
87 : 650
88 : 325
89 : 976
90 : 488
91 : 244
92 : 122
93 : 61
94 : 184
95 : 92
96 : 46
97 : 23
98 : 70
99 : 35
100 : 106
101 : 53
102 : 160
103 : 80
104 : 40
105 : 20
106 : 10
107 : 5
108 : 16
109 : 8
110 : 4
111 : 2
112 : 1
1 113
&lt;/pre&gt;

===For checkNum(5000)===
&lt;pre&gt;
1 : 2500
2 : 1250
3 : 625
4 : 1876
5 : 938
6 : 469
7 : 1408
8 : 704
9 : 352
10 : 176
11 : 88
12 : 44
13 : 22
14 : 11
15 : 34
16 : 17
17 : 52
18 : 26
19 : 13
20 : 40
21 : 20
22 : 10
23 : 5
24 : 16
25 : 8
26 : 4
27 : 2
28 : 1
1 29
&lt;/pre&gt;
===For checkNum(25000000)===
&lt;pre&gt;
1 : 12500000
2 : 6250000
3 : 3125000
4 : 1562500
5 : 781250
6 : 390625
7 : 1171876
8 : 585938
9 : 292969
10 : 878908
11 : 439454
12 : 219727
13 : 659182
14 : 329591
15 : 988774
16 : 494387
17 : 1483162
18 : 741581
19 : 2224744
20 : 1112372
21 : 556186
22 : 278093
23 : 834280
24 : 417140
25 : 208570
26 : 104285
27 : 312856
28 : 156428
29 : 78214
30 : 39107
31 : 117322
32 : 58661
33 : 175984
34 : 87992
35 : 43996
36 : 21998
37 : 10999
38 : 32998
39 : 16499
40 : 49498
41 : 24749
42 : 74248
43 : 37124
44 : 18562
45 : 9281
46 : 27844
47 : 13922
48 : 6961
49 : 20884
50 : 10442
51 : 5221
52 : 15664
53 : 7832
54 : 3916
55 : 1958
56 : 979
57 : 2938
58 : 1469
59 : 4408
60 : 2204
61 : 1102
62 : 551
63 : 1654
64 : 827
65 : 2482
66 : 1241
67 : 3724
68 : 1862
69 : 931
70 : 2794
71 : 1397
72 : 4192
73 : 2096
74 : 1048
75 : 524
76 : 262
77 : 131
78 : 394
79 : 197
80 : 592
81 : 296
82 : 148
83 : 74
84 : 37
85 : 112
86 : 56
87 : 28
88 : 14
89 : 7
90 : 22
91 : 11
92 : 34
93 : 17
94 : 52
95 : 26
96 : 13
97 : 40
98 : 20
99 : 10
100 : 5
101 : 16
102 : 8
103 : 4
104 : 2
105 : 1
1 106
&lt;/pre&gt;

Happy Life ahead!!!
[[File:end1.png]]</text>
      <sha1>otgwsijw1h60tarrpjie6o3rtpfsreh</sha1>
    </revision>
    <revision>
      <id>4366</id>
      <parentid>4365</parentid>
      <timestamp>2018-10-16T03:03:22Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* Page rank algorithm */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="6152">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_12 Contributors of this page]

=Page Rank - How does Google Work=
One web page is having link to other page, that is a page is referring to other page. Google uses ''Page Rank'' algorithm to choose which page should be displayed first.

If we have network, connections as below:
[[File:rank0.png]]

We want to pick a leader out of all these nodes. How to pick a leader?  Why to elect a leader? It is because we want to find the super power of available nodes.                     
[[File:rank1.png]]

For example, the application wherein, we want to find the most impressive person of the  few ones. How to decide it? As shown in below figure, each node will communicate with other, randomly, we implement the count for each node, how many times, the particular node is being visited.
[[File:rank2.png]]

[[#Top]]

As shown in following, figure, all nodes are visited and each node is marked with the 
number i.e.number of times the node is visited.
[[File:rank3.png]]

The node with the maximum count, becomes the winner. Here, node with 120 count in figure 
below, is the winner. i.e. The person with 120 count in the figure is the most impressive 
person in the community being considered.
[[File:rank4.png]]

[[File:rank5.png]]

[[File:rank6.png]]

[[File:rank7.png]]


[[File:rank8.png]]

[[#Top]]

Google selects the page rank in this matter. Each web page is connected to other web page with web links. To a page, maximum link is there, that will be put on top results in Google search results.
[[File:rank9.png]]

Google uses web crawler. The crawler takes the random walk on the www network and rank the web sites.
[[File:rank10.png]]

This way Google ranks the pages and displays search results, according to page rank.
[[File:rank11.png]]

e.g.we search for ''mysore city''. Google has 10,000 results. But it displays the results in the sequence of page rank of search results, As shown in figure below.
[[File:mysore.png]]

[[#Top]]

==Page rank algorithm ==
[[File:rank12.png]]


[[File:graph.png]]

[[File:graph1.png]]

=Collatz Conjecture=
Taught by Sudarshan sir and Amit sir, and Edited by Ms. Ami Tusharkant Choksi

If a number is even, divide it by ''2'', if it is odd, make multiply it by ''3'' and add ''1'', till you get ''1''. This simple problem is called, ''Collatz Conjecture''. 

[[File:collatz1.png]]

[[File:collatz2.png]]

[[File:collatz3.png]]

[[File:collatz4.png]]

[[File:collatz5.png]]

Number is bigger doesn't mean more iterations are required. One can notice, from the output of the following program. 



The program to implement the same is as follows:
==Program==
&lt;pre&gt;
#collatz conjecture
#if num is even, divide it by 2
#if num is odd, new number is equal to 3n+1


def checkNum(num):
    iterations=1
    while(num!=1):
        if(num%2==0):
            num=int(num/2)            
        else:
            num = 3*num+1
        iterations+=1
        

    print(num,iterations)


#checkNum(12)#Output: 1 10
#checkNum(26)#Output: 1 11
checkNum(2000)#Output: 1 113
&lt;/pre&gt;

&lt;pre&gt;

#recursive approach

def checkNum(num):
    if num==1:
        return 1
    elif num%2==0:
        return checkNum(num/2)+1
    else:
        return checkNum(3*num +1)+1


output:
checkNum(26)
Out[27]: 11
checkNum(5000)
Out[28]: 29
&lt;/pre&gt;

==Program adding statement to print all iterations==
&lt;pre&gt;
def checkNum(num):
    iterations=1
    while(num!=1):
        if(num%2==0):
            num=int(num/2)            
        else:
            num = 3*num+1
        print(iterations,&quot;:&quot;,num)
        iterations+=1
        

    print(num,iterations)
&lt;/pre&gt;
==Output==
===For checkNum(2000)===
&lt;pre&gt;
1 : 1000
2 : 500
3 : 250
4 : 125
5 : 376
6 : 188
7 : 94
8 : 47
9 : 142
10 : 71
11 : 214
12 : 107
13 : 322
14 : 161
15 : 484
16 : 242
17 : 121
18 : 364
19 : 182
20 : 91
21 : 274
22 : 137
23 : 412
24 : 206
25 : 103
26 : 310
27 : 155
28 : 466
29 : 233
30 : 700
31 : 350
32 : 175
33 : 526
34 : 263
35 : 790
36 : 395
37 : 1186
38 : 593
39 : 1780
40 : 890
41 : 445
42 : 1336
43 : 668
44 : 334
45 : 167
46 : 502
47 : 251
48 : 754
49 : 377
50 : 1132
51 : 566
52 : 283
53 : 850
54 : 425
55 : 1276
56 : 638
57 : 319
58 : 958
59 : 479
60 : 1438
61 : 719
62 : 2158
63 : 1079
64 : 3238
65 : 1619
66 : 4858
67 : 2429
68 : 7288
69 : 3644
70 : 1822
71 : 911
72 : 2734
73 : 1367
74 : 4102
75 : 2051
76 : 6154
77 : 3077
78 : 9232
79 : 4616
80 : 2308
81 : 1154
82 : 577
83 : 1732
84 : 866
85 : 433
86 : 1300
87 : 650
88 : 325
89 : 976
90 : 488
91 : 244
92 : 122
93 : 61
94 : 184
95 : 92
96 : 46
97 : 23
98 : 70
99 : 35
100 : 106
101 : 53
102 : 160
103 : 80
104 : 40
105 : 20
106 : 10
107 : 5
108 : 16
109 : 8
110 : 4
111 : 2
112 : 1
1 113
&lt;/pre&gt;

===For checkNum(5000)===
&lt;pre&gt;
1 : 2500
2 : 1250
3 : 625
4 : 1876
5 : 938
6 : 469
7 : 1408
8 : 704
9 : 352
10 : 176
11 : 88
12 : 44
13 : 22
14 : 11
15 : 34
16 : 17
17 : 52
18 : 26
19 : 13
20 : 40
21 : 20
22 : 10
23 : 5
24 : 16
25 : 8
26 : 4
27 : 2
28 : 1
1 29
&lt;/pre&gt;
===For checkNum(25000000)===
&lt;pre&gt;
1 : 12500000
2 : 6250000
3 : 3125000
4 : 1562500
5 : 781250
6 : 390625
7 : 1171876
8 : 585938
9 : 292969
10 : 878908
11 : 439454
12 : 219727
13 : 659182
14 : 329591
15 : 988774
16 : 494387
17 : 1483162
18 : 741581
19 : 2224744
20 : 1112372
21 : 556186
22 : 278093
23 : 834280
24 : 417140
25 : 208570
26 : 104285
27 : 312856
28 : 156428
29 : 78214
30 : 39107
31 : 117322
32 : 58661
33 : 175984
34 : 87992
35 : 43996
36 : 21998
37 : 10999
38 : 32998
39 : 16499
40 : 49498
41 : 24749
42 : 74248
43 : 37124
44 : 18562
45 : 9281
46 : 27844
47 : 13922
48 : 6961
49 : 20884
50 : 10442
51 : 5221
52 : 15664
53 : 7832
54 : 3916
55 : 1958
56 : 979
57 : 2938
58 : 1469
59 : 4408
60 : 2204
61 : 1102
62 : 551
63 : 1654
64 : 827
65 : 2482
66 : 1241
67 : 3724
68 : 1862
69 : 931
70 : 2794
71 : 1397
72 : 4192
73 : 2096
74 : 1048
75 : 524
76 : 262
77 : 131
78 : 394
79 : 197
80 : 592
81 : 296
82 : 148
83 : 74
84 : 37
85 : 112
86 : 56
87 : 28
88 : 14
89 : 7
90 : 22
91 : 11
92 : 34
93 : 17
94 : 52
95 : 26
96 : 13
97 : 40
98 : 20
99 : 10
100 : 5
101 : 16
102 : 8
103 : 4
104 : 2
105 : 1
1 106
&lt;/pre&gt;

Happy Life ahead!!!
[[File:end1.png]]</text>
      <sha1>jw1k9y42pco72huojg2noz6jpsrdwf0</sha1>
    </revision>
    <revision>
      <id>4367</id>
      <parentid>4366</parentid>
      <timestamp>2018-10-16T03:03:46Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* Page rank algorithm */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="6155">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_12 Contributors of this page]

=Page Rank - How does Google Work=
One web page is having link to other page, that is a page is referring to other page. Google uses ''Page Rank'' algorithm to choose which page should be displayed first.

If we have network, connections as below:
[[File:rank0.png]]

We want to pick a leader out of all these nodes. How to pick a leader?  Why to elect a leader? It is because we want to find the super power of available nodes.                     
[[File:rank1.png]]

For example, the application wherein, we want to find the most impressive person of the  few ones. How to decide it? As shown in below figure, each node will communicate with other, randomly, we implement the count for each node, how many times, the particular node is being visited.
[[File:rank2.png]]

[[#Top]]

As shown in following, figure, all nodes are visited and each node is marked with the 
number i.e.number of times the node is visited.
[[File:rank3.png]]

The node with the maximum count, becomes the winner. Here, node with 120 count in figure 
below, is the winner. i.e. The person with 120 count in the figure is the most impressive 
person in the community being considered.
[[File:rank4.png]]

[[File:rank5.png]]

[[File:rank6.png]]

[[File:rank7.png]]


[[File:rank8.png]]

[[#Top]]

Google selects the page rank in this matter. Each web page is connected to other web page with web links. To a page, maximum link is there, that will be put on top results in Google search results.
[[File:rank9.png]]

Google uses web crawler. The crawler takes the random walk on the www network and rank the web sites.
[[File:rank10.png]]

This way Google ranks the pages and displays search results, according to page rank.
[[File:rank11.png]]

e.g.we search for ''mysore city''. Google has 10,000 results. But it displays the results in the sequence of page rank of search results, As shown in figure below.
[[File:mysore.png]]

[[#Top]]

==Page rank algorithm ==
[[File:rank12.png]]


[[File:graph00.png]]

[[File:graph01.png]]

=Collatz Conjecture=
Taught by Sudarshan sir and Amit sir, and Edited by Ms. Ami Tusharkant Choksi

If a number is even, divide it by ''2'', if it is odd, make multiply it by ''3'' and add ''1'', till you get ''1''. This simple problem is called, ''Collatz Conjecture''. 

[[File:collatz1.png]]

[[File:collatz2.png]]

[[File:collatz3.png]]

[[File:collatz4.png]]

[[File:collatz5.png]]

Number is bigger doesn't mean more iterations are required. One can notice, from the output of the following program. 



The program to implement the same is as follows:
==Program==
&lt;pre&gt;
#collatz conjecture
#if num is even, divide it by 2
#if num is odd, new number is equal to 3n+1


def checkNum(num):
    iterations=1
    while(num!=1):
        if(num%2==0):
            num=int(num/2)            
        else:
            num = 3*num+1
        iterations+=1
        

    print(num,iterations)


#checkNum(12)#Output: 1 10
#checkNum(26)#Output: 1 11
checkNum(2000)#Output: 1 113
&lt;/pre&gt;

&lt;pre&gt;

#recursive approach

def checkNum(num):
    if num==1:
        return 1
    elif num%2==0:
        return checkNum(num/2)+1
    else:
        return checkNum(3*num +1)+1


output:
checkNum(26)
Out[27]: 11
checkNum(5000)
Out[28]: 29
&lt;/pre&gt;

==Program adding statement to print all iterations==
&lt;pre&gt;
def checkNum(num):
    iterations=1
    while(num!=1):
        if(num%2==0):
            num=int(num/2)            
        else:
            num = 3*num+1
        print(iterations,&quot;:&quot;,num)
        iterations+=1
        

    print(num,iterations)
&lt;/pre&gt;
==Output==
===For checkNum(2000)===
&lt;pre&gt;
1 : 1000
2 : 500
3 : 250
4 : 125
5 : 376
6 : 188
7 : 94
8 : 47
9 : 142
10 : 71
11 : 214
12 : 107
13 : 322
14 : 161
15 : 484
16 : 242
17 : 121
18 : 364
19 : 182
20 : 91
21 : 274
22 : 137
23 : 412
24 : 206
25 : 103
26 : 310
27 : 155
28 : 466
29 : 233
30 : 700
31 : 350
32 : 175
33 : 526
34 : 263
35 : 790
36 : 395
37 : 1186
38 : 593
39 : 1780
40 : 890
41 : 445
42 : 1336
43 : 668
44 : 334
45 : 167
46 : 502
47 : 251
48 : 754
49 : 377
50 : 1132
51 : 566
52 : 283
53 : 850
54 : 425
55 : 1276
56 : 638
57 : 319
58 : 958
59 : 479
60 : 1438
61 : 719
62 : 2158
63 : 1079
64 : 3238
65 : 1619
66 : 4858
67 : 2429
68 : 7288
69 : 3644
70 : 1822
71 : 911
72 : 2734
73 : 1367
74 : 4102
75 : 2051
76 : 6154
77 : 3077
78 : 9232
79 : 4616
80 : 2308
81 : 1154
82 : 577
83 : 1732
84 : 866
85 : 433
86 : 1300
87 : 650
88 : 325
89 : 976
90 : 488
91 : 244
92 : 122
93 : 61
94 : 184
95 : 92
96 : 46
97 : 23
98 : 70
99 : 35
100 : 106
101 : 53
102 : 160
103 : 80
104 : 40
105 : 20
106 : 10
107 : 5
108 : 16
109 : 8
110 : 4
111 : 2
112 : 1
1 113
&lt;/pre&gt;

===For checkNum(5000)===
&lt;pre&gt;
1 : 2500
2 : 1250
3 : 625
4 : 1876
5 : 938
6 : 469
7 : 1408
8 : 704
9 : 352
10 : 176
11 : 88
12 : 44
13 : 22
14 : 11
15 : 34
16 : 17
17 : 52
18 : 26
19 : 13
20 : 40
21 : 20
22 : 10
23 : 5
24 : 16
25 : 8
26 : 4
27 : 2
28 : 1
1 29
&lt;/pre&gt;
===For checkNum(25000000)===
&lt;pre&gt;
1 : 12500000
2 : 6250000
3 : 3125000
4 : 1562500
5 : 781250
6 : 390625
7 : 1171876
8 : 585938
9 : 292969
10 : 878908
11 : 439454
12 : 219727
13 : 659182
14 : 329591
15 : 988774
16 : 494387
17 : 1483162
18 : 741581
19 : 2224744
20 : 1112372
21 : 556186
22 : 278093
23 : 834280
24 : 417140
25 : 208570
26 : 104285
27 : 312856
28 : 156428
29 : 78214
30 : 39107
31 : 117322
32 : 58661
33 : 175984
34 : 87992
35 : 43996
36 : 21998
37 : 10999
38 : 32998
39 : 16499
40 : 49498
41 : 24749
42 : 74248
43 : 37124
44 : 18562
45 : 9281
46 : 27844
47 : 13922
48 : 6961
49 : 20884
50 : 10442
51 : 5221
52 : 15664
53 : 7832
54 : 3916
55 : 1958
56 : 979
57 : 2938
58 : 1469
59 : 4408
60 : 2204
61 : 1102
62 : 551
63 : 1654
64 : 827
65 : 2482
66 : 1241
67 : 3724
68 : 1862
69 : 931
70 : 2794
71 : 1397
72 : 4192
73 : 2096
74 : 1048
75 : 524
76 : 262
77 : 131
78 : 394
79 : 197
80 : 592
81 : 296
82 : 148
83 : 74
84 : 37
85 : 112
86 : 56
87 : 28
88 : 14
89 : 7
90 : 22
91 : 11
92 : 34
93 : 17
94 : 52
95 : 26
96 : 13
97 : 40
98 : 20
99 : 10
100 : 5
101 : 16
102 : 8
103 : 4
104 : 2
105 : 1
1 106
&lt;/pre&gt;

Happy Life ahead!!!
[[File:end1.png]]</text>
      <sha1>dnyvahmf3pd1cltdrv9v4ypj6hq4rbx</sha1>
    </revision>
    <revision>
      <id>4370</id>
      <parentid>4367</parentid>
      <timestamp>2018-10-16T03:08:00Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* Page rank algorithm */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="6361">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_12 Contributors of this page]

=Page Rank - How does Google Work=
One web page is having link to other page, that is a page is referring to other page. Google uses ''Page Rank'' algorithm to choose which page should be displayed first.

If we have network, connections as below:
[[File:rank0.png]]

We want to pick a leader out of all these nodes. How to pick a leader?  Why to elect a leader? It is because we want to find the super power of available nodes.                     
[[File:rank1.png]]

For example, the application wherein, we want to find the most impressive person of the  few ones. How to decide it? As shown in below figure, each node will communicate with other, randomly, we implement the count for each node, how many times, the particular node is being visited.
[[File:rank2.png]]

[[#Top]]

As shown in following, figure, all nodes are visited and each node is marked with the 
number i.e.number of times the node is visited.
[[File:rank3.png]]

The node with the maximum count, becomes the winner. Here, node with 120 count in figure 
below, is the winner. i.e. The person with 120 count in the figure is the most impressive 
person in the community being considered.
[[File:rank4.png]]

[[File:rank5.png]]

[[File:rank6.png]]

[[File:rank7.png]]


[[File:rank8.png]]

[[#Top]]

Google selects the page rank in this matter. Each web page is connected to other web page with web links. To a page, maximum link is there, that will be put on top results in Google search results.
[[File:rank9.png]]

Google uses web crawler. The crawler takes the random walk on the www network and rank the web sites.
[[File:rank10.png]]

This way Google ranks the pages and displays search results, according to page rank.
[[File:rank11.png]]

e.g.we search for ''mysore city''. Google has 10,000 results. But it displays the results in the sequence of page rank of search results, As shown in figure below.
[[File:mysore.png]]

[[#Top]]

==Page rank algorithm ==
As shown in beautiful figure below, few nodes combinely selected one as the leader, then that leader and other nodes, have selected         other as a leader. This way, finally the final leader is elected.
[[File:rank12.png]]


[[File:graph00.png]]

[[File:graph01.png]]

=Collatz Conjecture=
Taught by Sudarshan sir and Amit sir, and Edited by Ms. Ami Tusharkant Choksi

If a number is even, divide it by ''2'', if it is odd, make multiply it by ''3'' and add ''1'', till you get ''1''. This simple problem is called, ''Collatz Conjecture''. 

[[File:collatz1.png]]

[[File:collatz2.png]]

[[File:collatz3.png]]

[[File:collatz4.png]]

[[File:collatz5.png]]

Number is bigger doesn't mean more iterations are required. One can notice, from the output of the following program. 



The program to implement the same is as follows:
==Program==
&lt;pre&gt;
#collatz conjecture
#if num is even, divide it by 2
#if num is odd, new number is equal to 3n+1


def checkNum(num):
    iterations=1
    while(num!=1):
        if(num%2==0):
            num=int(num/2)            
        else:
            num = 3*num+1
        iterations+=1
        

    print(num,iterations)


#checkNum(12)#Output: 1 10
#checkNum(26)#Output: 1 11
checkNum(2000)#Output: 1 113
&lt;/pre&gt;

&lt;pre&gt;

#recursive approach

def checkNum(num):
    if num==1:
        return 1
    elif num%2==0:
        return checkNum(num/2)+1
    else:
        return checkNum(3*num +1)+1


output:
checkNum(26)
Out[27]: 11
checkNum(5000)
Out[28]: 29
&lt;/pre&gt;

==Program adding statement to print all iterations==
&lt;pre&gt;
def checkNum(num):
    iterations=1
    while(num!=1):
        if(num%2==0):
            num=int(num/2)            
        else:
            num = 3*num+1
        print(iterations,&quot;:&quot;,num)
        iterations+=1
        

    print(num,iterations)
&lt;/pre&gt;
==Output==
===For checkNum(2000)===
&lt;pre&gt;
1 : 1000
2 : 500
3 : 250
4 : 125
5 : 376
6 : 188
7 : 94
8 : 47
9 : 142
10 : 71
11 : 214
12 : 107
13 : 322
14 : 161
15 : 484
16 : 242
17 : 121
18 : 364
19 : 182
20 : 91
21 : 274
22 : 137
23 : 412
24 : 206
25 : 103
26 : 310
27 : 155
28 : 466
29 : 233
30 : 700
31 : 350
32 : 175
33 : 526
34 : 263
35 : 790
36 : 395
37 : 1186
38 : 593
39 : 1780
40 : 890
41 : 445
42 : 1336
43 : 668
44 : 334
45 : 167
46 : 502
47 : 251
48 : 754
49 : 377
50 : 1132
51 : 566
52 : 283
53 : 850
54 : 425
55 : 1276
56 : 638
57 : 319
58 : 958
59 : 479
60 : 1438
61 : 719
62 : 2158
63 : 1079
64 : 3238
65 : 1619
66 : 4858
67 : 2429
68 : 7288
69 : 3644
70 : 1822
71 : 911
72 : 2734
73 : 1367
74 : 4102
75 : 2051
76 : 6154
77 : 3077
78 : 9232
79 : 4616
80 : 2308
81 : 1154
82 : 577
83 : 1732
84 : 866
85 : 433
86 : 1300
87 : 650
88 : 325
89 : 976
90 : 488
91 : 244
92 : 122
93 : 61
94 : 184
95 : 92
96 : 46
97 : 23
98 : 70
99 : 35
100 : 106
101 : 53
102 : 160
103 : 80
104 : 40
105 : 20
106 : 10
107 : 5
108 : 16
109 : 8
110 : 4
111 : 2
112 : 1
1 113
&lt;/pre&gt;

===For checkNum(5000)===
&lt;pre&gt;
1 : 2500
2 : 1250
3 : 625
4 : 1876
5 : 938
6 : 469
7 : 1408
8 : 704
9 : 352
10 : 176
11 : 88
12 : 44
13 : 22
14 : 11
15 : 34
16 : 17
17 : 52
18 : 26
19 : 13
20 : 40
21 : 20
22 : 10
23 : 5
24 : 16
25 : 8
26 : 4
27 : 2
28 : 1
1 29
&lt;/pre&gt;
===For checkNum(25000000)===
&lt;pre&gt;
1 : 12500000
2 : 6250000
3 : 3125000
4 : 1562500
5 : 781250
6 : 390625
7 : 1171876
8 : 585938
9 : 292969
10 : 878908
11 : 439454
12 : 219727
13 : 659182
14 : 329591
15 : 988774
16 : 494387
17 : 1483162
18 : 741581
19 : 2224744
20 : 1112372
21 : 556186
22 : 278093
23 : 834280
24 : 417140
25 : 208570
26 : 104285
27 : 312856
28 : 156428
29 : 78214
30 : 39107
31 : 117322
32 : 58661
33 : 175984
34 : 87992
35 : 43996
36 : 21998
37 : 10999
38 : 32998
39 : 16499
40 : 49498
41 : 24749
42 : 74248
43 : 37124
44 : 18562
45 : 9281
46 : 27844
47 : 13922
48 : 6961
49 : 20884
50 : 10442
51 : 5221
52 : 15664
53 : 7832
54 : 3916
55 : 1958
56 : 979
57 : 2938
58 : 1469
59 : 4408
60 : 2204
61 : 1102
62 : 551
63 : 1654
64 : 827
65 : 2482
66 : 1241
67 : 3724
68 : 1862
69 : 931
70 : 2794
71 : 1397
72 : 4192
73 : 2096
74 : 1048
75 : 524
76 : 262
77 : 131
78 : 394
79 : 197
80 : 592
81 : 296
82 : 148
83 : 74
84 : 37
85 : 112
86 : 56
87 : 28
88 : 14
89 : 7
90 : 22
91 : 11
92 : 34
93 : 17
94 : 52
95 : 26
96 : 13
97 : 40
98 : 20
99 : 10
100 : 5
101 : 16
102 : 8
103 : 4
104 : 2
105 : 1
1 106
&lt;/pre&gt;

Happy Life ahead!!!
[[File:end1.png]]</text>
      <sha1>89a18qydzuapoclxocr2396u7u2twez</sha1>
    </revision>
    <revision>
      <id>4371</id>
      <parentid>4370</parentid>
      <timestamp>2018-10-16T03:41:37Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* Page rank algorithm */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="6524">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_12 Contributors of this page]

=Page Rank - How does Google Work=
One web page is having link to other page, that is a page is referring to other page. Google uses ''Page Rank'' algorithm to choose which page should be displayed first.

If we have network, connections as below:
[[File:rank0.png]]

We want to pick a leader out of all these nodes. How to pick a leader?  Why to elect a leader? It is because we want to find the super power of available nodes.                     
[[File:rank1.png]]

For example, the application wherein, we want to find the most impressive person of the  few ones. How to decide it? As shown in below figure, each node will communicate with other, randomly, we implement the count for each node, how many times, the particular node is being visited.
[[File:rank2.png]]

[[#Top]]

As shown in following, figure, all nodes are visited and each node is marked with the 
number i.e.number of times the node is visited.
[[File:rank3.png]]

The node with the maximum count, becomes the winner. Here, node with 120 count in figure 
below, is the winner. i.e. The person with 120 count in the figure is the most impressive 
person in the community being considered.
[[File:rank4.png]]

[[File:rank5.png]]

[[File:rank6.png]]

[[File:rank7.png]]


[[File:rank8.png]]

[[#Top]]

Google selects the page rank in this matter. Each web page is connected to other web page with web links. To a page, maximum link is there, that will be put on top results in Google search results.
[[File:rank9.png]]

Google uses web crawler. The crawler takes the random walk on the www network and rank the web sites.
[[File:rank10.png]]

This way Google ranks the pages and displays search results, according to page rank.
[[File:rank11.png]]

e.g.we search for ''mysore city''. Google has 10,000 results. But it displays the results in the sequence of page rank of search results, As shown in figure below.
[[File:mysore.png]]

[[#Top]]

==Page rank algorithm ==
As shown in beautiful figure below, few nodes combinely selected one as the leader, then that leader and other nodes, have selected         other as a leader. This way, finally the final leader is elected.
[[File:rank12.png]]


[[File:graph00.png]]

[[File:graph01.png]]


==Gragh Drawing Program==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
nx.barbell_graph(4,2)
G=nx.barbell_graph(4,2)
nx.draw(G)
plt.show()
&lt;/pre&gt;

=Collatz Conjecture=
Taught by Sudarshan sir and Amit sir, and Edited by Ms. Ami Tusharkant Choksi

If a number is even, divide it by ''2'', if it is odd, make multiply it by ''3'' and add ''1'', till you get ''1''. This simple problem is called, ''Collatz Conjecture''. 

[[File:collatz1.png]]

[[File:collatz2.png]]

[[File:collatz3.png]]

[[File:collatz4.png]]

[[File:collatz5.png]]

Number is bigger doesn't mean more iterations are required. One can notice, from the output of the following program. 



The program to implement the same is as follows:
==Program==
&lt;pre&gt;
#collatz conjecture
#if num is even, divide it by 2
#if num is odd, new number is equal to 3n+1


def checkNum(num):
    iterations=1
    while(num!=1):
        if(num%2==0):
            num=int(num/2)            
        else:
            num = 3*num+1
        iterations+=1
        

    print(num,iterations)


#checkNum(12)#Output: 1 10
#checkNum(26)#Output: 1 11
checkNum(2000)#Output: 1 113
&lt;/pre&gt;

&lt;pre&gt;

#recursive approach

def checkNum(num):
    if num==1:
        return 1
    elif num%2==0:
        return checkNum(num/2)+1
    else:
        return checkNum(3*num +1)+1


output:
checkNum(26)
Out[27]: 11
checkNum(5000)
Out[28]: 29
&lt;/pre&gt;

==Program adding statement to print all iterations==
&lt;pre&gt;
def checkNum(num):
    iterations=1
    while(num!=1):
        if(num%2==0):
            num=int(num/2)            
        else:
            num = 3*num+1
        print(iterations,&quot;:&quot;,num)
        iterations+=1
        

    print(num,iterations)
&lt;/pre&gt;
==Output==
===For checkNum(2000)===
&lt;pre&gt;
1 : 1000
2 : 500
3 : 250
4 : 125
5 : 376
6 : 188
7 : 94
8 : 47
9 : 142
10 : 71
11 : 214
12 : 107
13 : 322
14 : 161
15 : 484
16 : 242
17 : 121
18 : 364
19 : 182
20 : 91
21 : 274
22 : 137
23 : 412
24 : 206
25 : 103
26 : 310
27 : 155
28 : 466
29 : 233
30 : 700
31 : 350
32 : 175
33 : 526
34 : 263
35 : 790
36 : 395
37 : 1186
38 : 593
39 : 1780
40 : 890
41 : 445
42 : 1336
43 : 668
44 : 334
45 : 167
46 : 502
47 : 251
48 : 754
49 : 377
50 : 1132
51 : 566
52 : 283
53 : 850
54 : 425
55 : 1276
56 : 638
57 : 319
58 : 958
59 : 479
60 : 1438
61 : 719
62 : 2158
63 : 1079
64 : 3238
65 : 1619
66 : 4858
67 : 2429
68 : 7288
69 : 3644
70 : 1822
71 : 911
72 : 2734
73 : 1367
74 : 4102
75 : 2051
76 : 6154
77 : 3077
78 : 9232
79 : 4616
80 : 2308
81 : 1154
82 : 577
83 : 1732
84 : 866
85 : 433
86 : 1300
87 : 650
88 : 325
89 : 976
90 : 488
91 : 244
92 : 122
93 : 61
94 : 184
95 : 92
96 : 46
97 : 23
98 : 70
99 : 35
100 : 106
101 : 53
102 : 160
103 : 80
104 : 40
105 : 20
106 : 10
107 : 5
108 : 16
109 : 8
110 : 4
111 : 2
112 : 1
1 113
&lt;/pre&gt;

===For checkNum(5000)===
&lt;pre&gt;
1 : 2500
2 : 1250
3 : 625
4 : 1876
5 : 938
6 : 469
7 : 1408
8 : 704
9 : 352
10 : 176
11 : 88
12 : 44
13 : 22
14 : 11
15 : 34
16 : 17
17 : 52
18 : 26
19 : 13
20 : 40
21 : 20
22 : 10
23 : 5
24 : 16
25 : 8
26 : 4
27 : 2
28 : 1
1 29
&lt;/pre&gt;
===For checkNum(25000000)===
&lt;pre&gt;
1 : 12500000
2 : 6250000
3 : 3125000
4 : 1562500
5 : 781250
6 : 390625
7 : 1171876
8 : 585938
9 : 292969
10 : 878908
11 : 439454
12 : 219727
13 : 659182
14 : 329591
15 : 988774
16 : 494387
17 : 1483162
18 : 741581
19 : 2224744
20 : 1112372
21 : 556186
22 : 278093
23 : 834280
24 : 417140
25 : 208570
26 : 104285
27 : 312856
28 : 156428
29 : 78214
30 : 39107
31 : 117322
32 : 58661
33 : 175984
34 : 87992
35 : 43996
36 : 21998
37 : 10999
38 : 32998
39 : 16499
40 : 49498
41 : 24749
42 : 74248
43 : 37124
44 : 18562
45 : 9281
46 : 27844
47 : 13922
48 : 6961
49 : 20884
50 : 10442
51 : 5221
52 : 15664
53 : 7832
54 : 3916
55 : 1958
56 : 979
57 : 2938
58 : 1469
59 : 4408
60 : 2204
61 : 1102
62 : 551
63 : 1654
64 : 827
65 : 2482
66 : 1241
67 : 3724
68 : 1862
69 : 931
70 : 2794
71 : 1397
72 : 4192
73 : 2096
74 : 1048
75 : 524
76 : 262
77 : 131
78 : 394
79 : 197
80 : 592
81 : 296
82 : 148
83 : 74
84 : 37
85 : 112
86 : 56
87 : 28
88 : 14
89 : 7
90 : 22
91 : 11
92 : 34
93 : 17
94 : 52
95 : 26
96 : 13
97 : 40
98 : 20
99 : 10
100 : 5
101 : 16
102 : 8
103 : 4
104 : 2
105 : 1
1 106
&lt;/pre&gt;

Happy Life ahead!!!
[[File:end1.png]]</text>
      <sha1>jcu7ht8o5voduj017txr4owmwvdapny</sha1>
    </revision>
    <revision>
      <id>4372</id>
      <parentid>4371</parentid>
      <timestamp>2018-10-16T03:42:09Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* Gragh Drawing Program */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="6556">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_12 Contributors of this page]

=Page Rank - How does Google Work=
One web page is having link to other page, that is a page is referring to other page. Google uses ''Page Rank'' algorithm to choose which page should be displayed first.

If we have network, connections as below:
[[File:rank0.png]]

We want to pick a leader out of all these nodes. How to pick a leader?  Why to elect a leader? It is because we want to find the super power of available nodes.                     
[[File:rank1.png]]

For example, the application wherein, we want to find the most impressive person of the  few ones. How to decide it? As shown in below figure, each node will communicate with other, randomly, we implement the count for each node, how many times, the particular node is being visited.
[[File:rank2.png]]

[[#Top]]

As shown in following, figure, all nodes are visited and each node is marked with the 
number i.e.number of times the node is visited.
[[File:rank3.png]]

The node with the maximum count, becomes the winner. Here, node with 120 count in figure 
below, is the winner. i.e. The person with 120 count in the figure is the most impressive 
person in the community being considered.
[[File:rank4.png]]

[[File:rank5.png]]

[[File:rank6.png]]

[[File:rank7.png]]


[[File:rank8.png]]

[[#Top]]

Google selects the page rank in this matter. Each web page is connected to other web page with web links. To a page, maximum link is there, that will be put on top results in Google search results.
[[File:rank9.png]]

Google uses web crawler. The crawler takes the random walk on the www network and rank the web sites.
[[File:rank10.png]]

This way Google ranks the pages and displays search results, according to page rank.
[[File:rank11.png]]

e.g.we search for ''mysore city''. Google has 10,000 results. But it displays the results in the sequence of page rank of search results, As shown in figure below.
[[File:mysore.png]]

[[#Top]]

==Page rank algorithm ==
As shown in beautiful figure below, few nodes combinely selected one as the leader, then that leader and other nodes, have selected         other as a leader. This way, finally the final leader is elected.
[[File:rank12.png]]


[[File:graph00.png]]

[[File:graph01.png]]


==Gragh Drawing Program==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
nx.barbell_graph(4,2)
G=nx.barbell_graph(4,2)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:
[[File:Graph003.png]]

=Collatz Conjecture=
Taught by Sudarshan sir and Amit sir, and Edited by Ms. Ami Tusharkant Choksi

If a number is even, divide it by ''2'', if it is odd, make multiply it by ''3'' and add ''1'', till you get ''1''. This simple problem is called, ''Collatz Conjecture''. 

[[File:collatz1.png]]

[[File:collatz2.png]]

[[File:collatz3.png]]

[[File:collatz4.png]]

[[File:collatz5.png]]

Number is bigger doesn't mean more iterations are required. One can notice, from the output of the following program. 



The program to implement the same is as follows:
==Program==
&lt;pre&gt;
#collatz conjecture
#if num is even, divide it by 2
#if num is odd, new number is equal to 3n+1


def checkNum(num):
    iterations=1
    while(num!=1):
        if(num%2==0):
            num=int(num/2)            
        else:
            num = 3*num+1
        iterations+=1
        

    print(num,iterations)


#checkNum(12)#Output: 1 10
#checkNum(26)#Output: 1 11
checkNum(2000)#Output: 1 113
&lt;/pre&gt;

&lt;pre&gt;

#recursive approach

def checkNum(num):
    if num==1:
        return 1
    elif num%2==0:
        return checkNum(num/2)+1
    else:
        return checkNum(3*num +1)+1


output:
checkNum(26)
Out[27]: 11
checkNum(5000)
Out[28]: 29
&lt;/pre&gt;

==Program adding statement to print all iterations==
&lt;pre&gt;
def checkNum(num):
    iterations=1
    while(num!=1):
        if(num%2==0):
            num=int(num/2)            
        else:
            num = 3*num+1
        print(iterations,&quot;:&quot;,num)
        iterations+=1
        

    print(num,iterations)
&lt;/pre&gt;
==Output==
===For checkNum(2000)===
&lt;pre&gt;
1 : 1000
2 : 500
3 : 250
4 : 125
5 : 376
6 : 188
7 : 94
8 : 47
9 : 142
10 : 71
11 : 214
12 : 107
13 : 322
14 : 161
15 : 484
16 : 242
17 : 121
18 : 364
19 : 182
20 : 91
21 : 274
22 : 137
23 : 412
24 : 206
25 : 103
26 : 310
27 : 155
28 : 466
29 : 233
30 : 700
31 : 350
32 : 175
33 : 526
34 : 263
35 : 790
36 : 395
37 : 1186
38 : 593
39 : 1780
40 : 890
41 : 445
42 : 1336
43 : 668
44 : 334
45 : 167
46 : 502
47 : 251
48 : 754
49 : 377
50 : 1132
51 : 566
52 : 283
53 : 850
54 : 425
55 : 1276
56 : 638
57 : 319
58 : 958
59 : 479
60 : 1438
61 : 719
62 : 2158
63 : 1079
64 : 3238
65 : 1619
66 : 4858
67 : 2429
68 : 7288
69 : 3644
70 : 1822
71 : 911
72 : 2734
73 : 1367
74 : 4102
75 : 2051
76 : 6154
77 : 3077
78 : 9232
79 : 4616
80 : 2308
81 : 1154
82 : 577
83 : 1732
84 : 866
85 : 433
86 : 1300
87 : 650
88 : 325
89 : 976
90 : 488
91 : 244
92 : 122
93 : 61
94 : 184
95 : 92
96 : 46
97 : 23
98 : 70
99 : 35
100 : 106
101 : 53
102 : 160
103 : 80
104 : 40
105 : 20
106 : 10
107 : 5
108 : 16
109 : 8
110 : 4
111 : 2
112 : 1
1 113
&lt;/pre&gt;

===For checkNum(5000)===
&lt;pre&gt;
1 : 2500
2 : 1250
3 : 625
4 : 1876
5 : 938
6 : 469
7 : 1408
8 : 704
9 : 352
10 : 176
11 : 88
12 : 44
13 : 22
14 : 11
15 : 34
16 : 17
17 : 52
18 : 26
19 : 13
20 : 40
21 : 20
22 : 10
23 : 5
24 : 16
25 : 8
26 : 4
27 : 2
28 : 1
1 29
&lt;/pre&gt;
===For checkNum(25000000)===
&lt;pre&gt;
1 : 12500000
2 : 6250000
3 : 3125000
4 : 1562500
5 : 781250
6 : 390625
7 : 1171876
8 : 585938
9 : 292969
10 : 878908
11 : 439454
12 : 219727
13 : 659182
14 : 329591
15 : 988774
16 : 494387
17 : 1483162
18 : 741581
19 : 2224744
20 : 1112372
21 : 556186
22 : 278093
23 : 834280
24 : 417140
25 : 208570
26 : 104285
27 : 312856
28 : 156428
29 : 78214
30 : 39107
31 : 117322
32 : 58661
33 : 175984
34 : 87992
35 : 43996
36 : 21998
37 : 10999
38 : 32998
39 : 16499
40 : 49498
41 : 24749
42 : 74248
43 : 37124
44 : 18562
45 : 9281
46 : 27844
47 : 13922
48 : 6961
49 : 20884
50 : 10442
51 : 5221
52 : 15664
53 : 7832
54 : 3916
55 : 1958
56 : 979
57 : 2938
58 : 1469
59 : 4408
60 : 2204
61 : 1102
62 : 551
63 : 1654
64 : 827
65 : 2482
66 : 1241
67 : 3724
68 : 1862
69 : 931
70 : 2794
71 : 1397
72 : 4192
73 : 2096
74 : 1048
75 : 524
76 : 262
77 : 131
78 : 394
79 : 197
80 : 592
81 : 296
82 : 148
83 : 74
84 : 37
85 : 112
86 : 56
87 : 28
88 : 14
89 : 7
90 : 22
91 : 11
92 : 34
93 : 17
94 : 52
95 : 26
96 : 13
97 : 40
98 : 20
99 : 10
100 : 5
101 : 16
102 : 8
103 : 4
104 : 2
105 : 1
1 106
&lt;/pre&gt;

Happy Life ahead!!!
[[File:end1.png]]</text>
      <sha1>js51uuaqc3tms9zfpi8hte9bvhllzzm</sha1>
    </revision>
    <revision>
      <id>4374</id>
      <parentid>4372</parentid>
      <timestamp>2018-10-16T03:43:43Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* Gragh Drawing Program */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="6753">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_12 Contributors of this page]

=Page Rank - How does Google Work=
One web page is having link to other page, that is a page is referring to other page. Google uses ''Page Rank'' algorithm to choose which page should be displayed first.

If we have network, connections as below:
[[File:rank0.png]]

We want to pick a leader out of all these nodes. How to pick a leader?  Why to elect a leader? It is because we want to find the super power of available nodes.                     
[[File:rank1.png]]

For example, the application wherein, we want to find the most impressive person of the  few ones. How to decide it? As shown in below figure, each node will communicate with other, randomly, we implement the count for each node, how many times, the particular node is being visited.
[[File:rank2.png]]

[[#Top]]

As shown in following, figure, all nodes are visited and each node is marked with the 
number i.e.number of times the node is visited.
[[File:rank3.png]]

The node with the maximum count, becomes the winner. Here, node with 120 count in figure 
below, is the winner. i.e. The person with 120 count in the figure is the most impressive 
person in the community being considered.
[[File:rank4.png]]

[[File:rank5.png]]

[[File:rank6.png]]

[[File:rank7.png]]


[[File:rank8.png]]

[[#Top]]

Google selects the page rank in this matter. Each web page is connected to other web page with web links. To a page, maximum link is there, that will be put on top results in Google search results.
[[File:rank9.png]]

Google uses web crawler. The crawler takes the random walk on the www network and rank the web sites.
[[File:rank10.png]]

This way Google ranks the pages and displays search results, according to page rank.
[[File:rank11.png]]

e.g.we search for ''mysore city''. Google has 10,000 results. But it displays the results in the sequence of page rank of search results, As shown in figure below.
[[File:mysore.png]]

[[#Top]]

==Page rank algorithm ==
As shown in beautiful figure below, few nodes combinely selected one as the leader, then that leader and other nodes, have selected         other as a leader. This way, finally the final leader is elected.
[[File:rank12.png]]


[[File:graph00.png]]

[[File:graph01.png]]


==Gragh Drawing Program1==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
nx.barbell_graph(4,2)
G=nx.barbell_graph(4,2)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:
[[File:Graph003.png]]


==Gragh Drawing Program2==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
nx.barbell_graph(4,3)
G=nx.barbell_graph(4,3)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:
[[File:Graph004.png]]

=Collatz Conjecture=
Taught by Sudarshan sir and Amit sir, and Edited by Ms. Ami Tusharkant Choksi

If a number is even, divide it by ''2'', if it is odd, make multiply it by ''3'' and add ''1'', till you get ''1''. This simple problem is called, ''Collatz Conjecture''. 

[[File:collatz1.png]]

[[File:collatz2.png]]

[[File:collatz3.png]]

[[File:collatz4.png]]

[[File:collatz5.png]]

Number is bigger doesn't mean more iterations are required. One can notice, from the output of the following program. 



The program to implement the same is as follows:
==Program==
&lt;pre&gt;
#collatz conjecture
#if num is even, divide it by 2
#if num is odd, new number is equal to 3n+1


def checkNum(num):
    iterations=1
    while(num!=1):
        if(num%2==0):
            num=int(num/2)            
        else:
            num = 3*num+1
        iterations+=1
        

    print(num,iterations)


#checkNum(12)#Output: 1 10
#checkNum(26)#Output: 1 11
checkNum(2000)#Output: 1 113
&lt;/pre&gt;

&lt;pre&gt;

#recursive approach

def checkNum(num):
    if num==1:
        return 1
    elif num%2==0:
        return checkNum(num/2)+1
    else:
        return checkNum(3*num +1)+1


output:
checkNum(26)
Out[27]: 11
checkNum(5000)
Out[28]: 29
&lt;/pre&gt;

==Program adding statement to print all iterations==
&lt;pre&gt;
def checkNum(num):
    iterations=1
    while(num!=1):
        if(num%2==0):
            num=int(num/2)            
        else:
            num = 3*num+1
        print(iterations,&quot;:&quot;,num)
        iterations+=1
        

    print(num,iterations)
&lt;/pre&gt;
==Output==
===For checkNum(2000)===
&lt;pre&gt;
1 : 1000
2 : 500
3 : 250
4 : 125
5 : 376
6 : 188
7 : 94
8 : 47
9 : 142
10 : 71
11 : 214
12 : 107
13 : 322
14 : 161
15 : 484
16 : 242
17 : 121
18 : 364
19 : 182
20 : 91
21 : 274
22 : 137
23 : 412
24 : 206
25 : 103
26 : 310
27 : 155
28 : 466
29 : 233
30 : 700
31 : 350
32 : 175
33 : 526
34 : 263
35 : 790
36 : 395
37 : 1186
38 : 593
39 : 1780
40 : 890
41 : 445
42 : 1336
43 : 668
44 : 334
45 : 167
46 : 502
47 : 251
48 : 754
49 : 377
50 : 1132
51 : 566
52 : 283
53 : 850
54 : 425
55 : 1276
56 : 638
57 : 319
58 : 958
59 : 479
60 : 1438
61 : 719
62 : 2158
63 : 1079
64 : 3238
65 : 1619
66 : 4858
67 : 2429
68 : 7288
69 : 3644
70 : 1822
71 : 911
72 : 2734
73 : 1367
74 : 4102
75 : 2051
76 : 6154
77 : 3077
78 : 9232
79 : 4616
80 : 2308
81 : 1154
82 : 577
83 : 1732
84 : 866
85 : 433
86 : 1300
87 : 650
88 : 325
89 : 976
90 : 488
91 : 244
92 : 122
93 : 61
94 : 184
95 : 92
96 : 46
97 : 23
98 : 70
99 : 35
100 : 106
101 : 53
102 : 160
103 : 80
104 : 40
105 : 20
106 : 10
107 : 5
108 : 16
109 : 8
110 : 4
111 : 2
112 : 1
1 113
&lt;/pre&gt;

===For checkNum(5000)===
&lt;pre&gt;
1 : 2500
2 : 1250
3 : 625
4 : 1876
5 : 938
6 : 469
7 : 1408
8 : 704
9 : 352
10 : 176
11 : 88
12 : 44
13 : 22
14 : 11
15 : 34
16 : 17
17 : 52
18 : 26
19 : 13
20 : 40
21 : 20
22 : 10
23 : 5
24 : 16
25 : 8
26 : 4
27 : 2
28 : 1
1 29
&lt;/pre&gt;
===For checkNum(25000000)===
&lt;pre&gt;
1 : 12500000
2 : 6250000
3 : 3125000
4 : 1562500
5 : 781250
6 : 390625
7 : 1171876
8 : 585938
9 : 292969
10 : 878908
11 : 439454
12 : 219727
13 : 659182
14 : 329591
15 : 988774
16 : 494387
17 : 1483162
18 : 741581
19 : 2224744
20 : 1112372
21 : 556186
22 : 278093
23 : 834280
24 : 417140
25 : 208570
26 : 104285
27 : 312856
28 : 156428
29 : 78214
30 : 39107
31 : 117322
32 : 58661
33 : 175984
34 : 87992
35 : 43996
36 : 21998
37 : 10999
38 : 32998
39 : 16499
40 : 49498
41 : 24749
42 : 74248
43 : 37124
44 : 18562
45 : 9281
46 : 27844
47 : 13922
48 : 6961
49 : 20884
50 : 10442
51 : 5221
52 : 15664
53 : 7832
54 : 3916
55 : 1958
56 : 979
57 : 2938
58 : 1469
59 : 4408
60 : 2204
61 : 1102
62 : 551
63 : 1654
64 : 827
65 : 2482
66 : 1241
67 : 3724
68 : 1862
69 : 931
70 : 2794
71 : 1397
72 : 4192
73 : 2096
74 : 1048
75 : 524
76 : 262
77 : 131
78 : 394
79 : 197
80 : 592
81 : 296
82 : 148
83 : 74
84 : 37
85 : 112
86 : 56
87 : 28
88 : 14
89 : 7
90 : 22
91 : 11
92 : 34
93 : 17
94 : 52
95 : 26
96 : 13
97 : 40
98 : 20
99 : 10
100 : 5
101 : 16
102 : 8
103 : 4
104 : 2
105 : 1
1 106
&lt;/pre&gt;

Happy Life ahead!!!
[[File:end1.png]]</text>
      <sha1>7mwaeb1lhrtnm7xzcy8i4ls1qgk8usi</sha1>
    </revision>
    <revision>
      <id>4376</id>
      <parentid>4374</parentid>
      <timestamp>2018-10-16T03:52:38Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* Gragh Drawing Program2 */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="6948">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_12 Contributors of this page]

=Page Rank - How does Google Work=
One web page is having link to other page, that is a page is referring to other page. Google uses ''Page Rank'' algorithm to choose which page should be displayed first.

If we have network, connections as below:
[[File:rank0.png]]

We want to pick a leader out of all these nodes. How to pick a leader?  Why to elect a leader? It is because we want to find the super power of available nodes.                     
[[File:rank1.png]]

For example, the application wherein, we want to find the most impressive person of the  few ones. How to decide it? As shown in below figure, each node will communicate with other, randomly, we implement the count for each node, how many times, the particular node is being visited.
[[File:rank2.png]]

[[#Top]]

As shown in following, figure, all nodes are visited and each node is marked with the 
number i.e.number of times the node is visited.
[[File:rank3.png]]

The node with the maximum count, becomes the winner. Here, node with 120 count in figure 
below, is the winner. i.e. The person with 120 count in the figure is the most impressive 
person in the community being considered.
[[File:rank4.png]]

[[File:rank5.png]]

[[File:rank6.png]]

[[File:rank7.png]]


[[File:rank8.png]]

[[#Top]]

Google selects the page rank in this matter. Each web page is connected to other web page with web links. To a page, maximum link is there, that will be put on top results in Google search results.
[[File:rank9.png]]

Google uses web crawler. The crawler takes the random walk on the www network and rank the web sites.
[[File:rank10.png]]

This way Google ranks the pages and displays search results, according to page rank.
[[File:rank11.png]]

e.g.we search for ''mysore city''. Google has 10,000 results. But it displays the results in the sequence of page rank of search results, As shown in figure below.
[[File:mysore.png]]

[[#Top]]

==Page rank algorithm ==
As shown in beautiful figure below, few nodes combinely selected one as the leader, then that leader and other nodes, have selected         other as a leader. This way, finally the final leader is elected.
[[File:rank12.png]]


[[File:graph00.png]]

[[File:graph01.png]]


==Gragh Drawing Program1==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
nx.barbell_graph(4,2)
G=nx.barbell_graph(4,2)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:
[[File:Graph003.png]]


==Gragh Drawing Program2==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
nx.barbell_graph(4,3)
G=nx.barbell_graph(4,3)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:
[[File:Graph004.png]]

==Gragh Drawing Program3==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
nx.barbell_graph(5,3)
G=nx.barbell_graph(5,3)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:
[[File:Graph005.png]]

=Collatz Conjecture=
Taught by Sudarshan sir and Amit sir, and Edited by Ms. Ami Tusharkant Choksi

If a number is even, divide it by ''2'', if it is odd, make multiply it by ''3'' and add ''1'', till you get ''1''. This simple problem is called, ''Collatz Conjecture''. 

[[File:collatz1.png]]

[[File:collatz2.png]]

[[File:collatz3.png]]

[[File:collatz4.png]]

[[File:collatz5.png]]

Number is bigger doesn't mean more iterations are required. One can notice, from the output of the following program. 



The program to implement the same is as follows:
==Program==
&lt;pre&gt;
#collatz conjecture
#if num is even, divide it by 2
#if num is odd, new number is equal to 3n+1


def checkNum(num):
    iterations=1
    while(num!=1):
        if(num%2==0):
            num=int(num/2)            
        else:
            num = 3*num+1
        iterations+=1
        

    print(num,iterations)


#checkNum(12)#Output: 1 10
#checkNum(26)#Output: 1 11
checkNum(2000)#Output: 1 113
&lt;/pre&gt;

&lt;pre&gt;

#recursive approach

def checkNum(num):
    if num==1:
        return 1
    elif num%2==0:
        return checkNum(num/2)+1
    else:
        return checkNum(3*num +1)+1


output:
checkNum(26)
Out[27]: 11
checkNum(5000)
Out[28]: 29
&lt;/pre&gt;

==Program adding statement to print all iterations==
&lt;pre&gt;
def checkNum(num):
    iterations=1
    while(num!=1):
        if(num%2==0):
            num=int(num/2)            
        else:
            num = 3*num+1
        print(iterations,&quot;:&quot;,num)
        iterations+=1
        

    print(num,iterations)
&lt;/pre&gt;
==Output==
===For checkNum(2000)===
&lt;pre&gt;
1 : 1000
2 : 500
3 : 250
4 : 125
5 : 376
6 : 188
7 : 94
8 : 47
9 : 142
10 : 71
11 : 214
12 : 107
13 : 322
14 : 161
15 : 484
16 : 242
17 : 121
18 : 364
19 : 182
20 : 91
21 : 274
22 : 137
23 : 412
24 : 206
25 : 103
26 : 310
27 : 155
28 : 466
29 : 233
30 : 700
31 : 350
32 : 175
33 : 526
34 : 263
35 : 790
36 : 395
37 : 1186
38 : 593
39 : 1780
40 : 890
41 : 445
42 : 1336
43 : 668
44 : 334
45 : 167
46 : 502
47 : 251
48 : 754
49 : 377
50 : 1132
51 : 566
52 : 283
53 : 850
54 : 425
55 : 1276
56 : 638
57 : 319
58 : 958
59 : 479
60 : 1438
61 : 719
62 : 2158
63 : 1079
64 : 3238
65 : 1619
66 : 4858
67 : 2429
68 : 7288
69 : 3644
70 : 1822
71 : 911
72 : 2734
73 : 1367
74 : 4102
75 : 2051
76 : 6154
77 : 3077
78 : 9232
79 : 4616
80 : 2308
81 : 1154
82 : 577
83 : 1732
84 : 866
85 : 433
86 : 1300
87 : 650
88 : 325
89 : 976
90 : 488
91 : 244
92 : 122
93 : 61
94 : 184
95 : 92
96 : 46
97 : 23
98 : 70
99 : 35
100 : 106
101 : 53
102 : 160
103 : 80
104 : 40
105 : 20
106 : 10
107 : 5
108 : 16
109 : 8
110 : 4
111 : 2
112 : 1
1 113
&lt;/pre&gt;

===For checkNum(5000)===
&lt;pre&gt;
1 : 2500
2 : 1250
3 : 625
4 : 1876
5 : 938
6 : 469
7 : 1408
8 : 704
9 : 352
10 : 176
11 : 88
12 : 44
13 : 22
14 : 11
15 : 34
16 : 17
17 : 52
18 : 26
19 : 13
20 : 40
21 : 20
22 : 10
23 : 5
24 : 16
25 : 8
26 : 4
27 : 2
28 : 1
1 29
&lt;/pre&gt;
===For checkNum(25000000)===
&lt;pre&gt;
1 : 12500000
2 : 6250000
3 : 3125000
4 : 1562500
5 : 781250
6 : 390625
7 : 1171876
8 : 585938
9 : 292969
10 : 878908
11 : 439454
12 : 219727
13 : 659182
14 : 329591
15 : 988774
16 : 494387
17 : 1483162
18 : 741581
19 : 2224744
20 : 1112372
21 : 556186
22 : 278093
23 : 834280
24 : 417140
25 : 208570
26 : 104285
27 : 312856
28 : 156428
29 : 78214
30 : 39107
31 : 117322
32 : 58661
33 : 175984
34 : 87992
35 : 43996
36 : 21998
37 : 10999
38 : 32998
39 : 16499
40 : 49498
41 : 24749
42 : 74248
43 : 37124
44 : 18562
45 : 9281
46 : 27844
47 : 13922
48 : 6961
49 : 20884
50 : 10442
51 : 5221
52 : 15664
53 : 7832
54 : 3916
55 : 1958
56 : 979
57 : 2938
58 : 1469
59 : 4408
60 : 2204
61 : 1102
62 : 551
63 : 1654
64 : 827
65 : 2482
66 : 1241
67 : 3724
68 : 1862
69 : 931
70 : 2794
71 : 1397
72 : 4192
73 : 2096
74 : 1048
75 : 524
76 : 262
77 : 131
78 : 394
79 : 197
80 : 592
81 : 296
82 : 148
83 : 74
84 : 37
85 : 112
86 : 56
87 : 28
88 : 14
89 : 7
90 : 22
91 : 11
92 : 34
93 : 17
94 : 52
95 : 26
96 : 13
97 : 40
98 : 20
99 : 10
100 : 5
101 : 16
102 : 8
103 : 4
104 : 2
105 : 1
1 106
&lt;/pre&gt;

Happy Life ahead!!!
[[File:end1.png]]</text>
      <sha1>4f5mlpm7sr7y1rj5e4as9gzj0wuu5t1</sha1>
    </revision>
    <revision>
      <id>4378</id>
      <parentid>4376</parentid>
      <timestamp>2018-10-16T03:56:30Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* Gragh Drawing Program3 */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="7120">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_12 Contributors of this page]

=Page Rank - How does Google Work=
One web page is having link to other page, that is a page is referring to other page. Google uses ''Page Rank'' algorithm to choose which page should be displayed first.

If we have network, connections as below:
[[File:rank0.png]]

We want to pick a leader out of all these nodes. How to pick a leader?  Why to elect a leader? It is because we want to find the super power of available nodes.                     
[[File:rank1.png]]

For example, the application wherein, we want to find the most impressive person of the  few ones. How to decide it? As shown in below figure, each node will communicate with other, randomly, we implement the count for each node, how many times, the particular node is being visited.
[[File:rank2.png]]

[[#Top]]

As shown in following, figure, all nodes are visited and each node is marked with the 
number i.e.number of times the node is visited.
[[File:rank3.png]]

The node with the maximum count, becomes the winner. Here, node with 120 count in figure 
below, is the winner. i.e. The person with 120 count in the figure is the most impressive 
person in the community being considered.
[[File:rank4.png]]

[[File:rank5.png]]

[[File:rank6.png]]

[[File:rank7.png]]


[[File:rank8.png]]

[[#Top]]

Google selects the page rank in this matter. Each web page is connected to other web page with web links. To a page, maximum link is there, that will be put on top results in Google search results.
[[File:rank9.png]]

Google uses web crawler. The crawler takes the random walk on the www network and rank the web sites.
[[File:rank10.png]]

This way Google ranks the pages and displays search results, according to page rank.
[[File:rank11.png]]

e.g.we search for ''mysore city''. Google has 10,000 results. But it displays the results in the sequence of page rank of search results, As shown in figure below.
[[File:mysore.png]]

[[#Top]]

==Page rank algorithm ==
As shown in beautiful figure below, few nodes combinely selected one as the leader, then that leader and other nodes, have selected         other as a leader. This way, finally the final leader is elected.
[[File:rank12.png]]


[[File:graph00.png]]

[[File:graph01.png]]


==Gragh Drawing Program1==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
nx.barbell_graph(4,2)
G=nx.barbell_graph(4,2)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:
[[File:Graph003.png]]


==Gragh Drawing Program2==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
nx.barbell_graph(4,3)
G=nx.barbell_graph(4,3)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:
[[File:Graph004.png]]

==Gragh Drawing Program3==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
nx.barbell_graph(5,3)
G=nx.barbell_graph(5,3)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:
[[File:Graph005.png]]

==Complete Graph==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.complete_graph(4)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:
[[File:completegraph001.png]]

=Collatz Conjecture=
Taught by Sudarshan sir and Amit sir, and Edited by Ms. Ami Tusharkant Choksi

If a number is even, divide it by ''2'', if it is odd, make multiply it by ''3'' and add ''1'', till you get ''1''. This simple problem is called, ''Collatz Conjecture''. 

[[File:collatz1.png]]

[[File:collatz2.png]]

[[File:collatz3.png]]

[[File:collatz4.png]]

[[File:collatz5.png]]

Number is bigger doesn't mean more iterations are required. One can notice, from the output of the following program. 



The program to implement the same is as follows:
==Program==
&lt;pre&gt;
#collatz conjecture
#if num is even, divide it by 2
#if num is odd, new number is equal to 3n+1


def checkNum(num):
    iterations=1
    while(num!=1):
        if(num%2==0):
            num=int(num/2)            
        else:
            num = 3*num+1
        iterations+=1
        

    print(num,iterations)


#checkNum(12)#Output: 1 10
#checkNum(26)#Output: 1 11
checkNum(2000)#Output: 1 113
&lt;/pre&gt;

&lt;pre&gt;

#recursive approach

def checkNum(num):
    if num==1:
        return 1
    elif num%2==0:
        return checkNum(num/2)+1
    else:
        return checkNum(3*num +1)+1


output:
checkNum(26)
Out[27]: 11
checkNum(5000)
Out[28]: 29
&lt;/pre&gt;

==Program adding statement to print all iterations==
&lt;pre&gt;
def checkNum(num):
    iterations=1
    while(num!=1):
        if(num%2==0):
            num=int(num/2)            
        else:
            num = 3*num+1
        print(iterations,&quot;:&quot;,num)
        iterations+=1
        

    print(num,iterations)
&lt;/pre&gt;
==Output==
===For checkNum(2000)===
&lt;pre&gt;
1 : 1000
2 : 500
3 : 250
4 : 125
5 : 376
6 : 188
7 : 94
8 : 47
9 : 142
10 : 71
11 : 214
12 : 107
13 : 322
14 : 161
15 : 484
16 : 242
17 : 121
18 : 364
19 : 182
20 : 91
21 : 274
22 : 137
23 : 412
24 : 206
25 : 103
26 : 310
27 : 155
28 : 466
29 : 233
30 : 700
31 : 350
32 : 175
33 : 526
34 : 263
35 : 790
36 : 395
37 : 1186
38 : 593
39 : 1780
40 : 890
41 : 445
42 : 1336
43 : 668
44 : 334
45 : 167
46 : 502
47 : 251
48 : 754
49 : 377
50 : 1132
51 : 566
52 : 283
53 : 850
54 : 425
55 : 1276
56 : 638
57 : 319
58 : 958
59 : 479
60 : 1438
61 : 719
62 : 2158
63 : 1079
64 : 3238
65 : 1619
66 : 4858
67 : 2429
68 : 7288
69 : 3644
70 : 1822
71 : 911
72 : 2734
73 : 1367
74 : 4102
75 : 2051
76 : 6154
77 : 3077
78 : 9232
79 : 4616
80 : 2308
81 : 1154
82 : 577
83 : 1732
84 : 866
85 : 433
86 : 1300
87 : 650
88 : 325
89 : 976
90 : 488
91 : 244
92 : 122
93 : 61
94 : 184
95 : 92
96 : 46
97 : 23
98 : 70
99 : 35
100 : 106
101 : 53
102 : 160
103 : 80
104 : 40
105 : 20
106 : 10
107 : 5
108 : 16
109 : 8
110 : 4
111 : 2
112 : 1
1 113
&lt;/pre&gt;

===For checkNum(5000)===
&lt;pre&gt;
1 : 2500
2 : 1250
3 : 625
4 : 1876
5 : 938
6 : 469
7 : 1408
8 : 704
9 : 352
10 : 176
11 : 88
12 : 44
13 : 22
14 : 11
15 : 34
16 : 17
17 : 52
18 : 26
19 : 13
20 : 40
21 : 20
22 : 10
23 : 5
24 : 16
25 : 8
26 : 4
27 : 2
28 : 1
1 29
&lt;/pre&gt;
===For checkNum(25000000)===
&lt;pre&gt;
1 : 12500000
2 : 6250000
3 : 3125000
4 : 1562500
5 : 781250
6 : 390625
7 : 1171876
8 : 585938
9 : 292969
10 : 878908
11 : 439454
12 : 219727
13 : 659182
14 : 329591
15 : 988774
16 : 494387
17 : 1483162
18 : 741581
19 : 2224744
20 : 1112372
21 : 556186
22 : 278093
23 : 834280
24 : 417140
25 : 208570
26 : 104285
27 : 312856
28 : 156428
29 : 78214
30 : 39107
31 : 117322
32 : 58661
33 : 175984
34 : 87992
35 : 43996
36 : 21998
37 : 10999
38 : 32998
39 : 16499
40 : 49498
41 : 24749
42 : 74248
43 : 37124
44 : 18562
45 : 9281
46 : 27844
47 : 13922
48 : 6961
49 : 20884
50 : 10442
51 : 5221
52 : 15664
53 : 7832
54 : 3916
55 : 1958
56 : 979
57 : 2938
58 : 1469
59 : 4408
60 : 2204
61 : 1102
62 : 551
63 : 1654
64 : 827
65 : 2482
66 : 1241
67 : 3724
68 : 1862
69 : 931
70 : 2794
71 : 1397
72 : 4192
73 : 2096
74 : 1048
75 : 524
76 : 262
77 : 131
78 : 394
79 : 197
80 : 592
81 : 296
82 : 148
83 : 74
84 : 37
85 : 112
86 : 56
87 : 28
88 : 14
89 : 7
90 : 22
91 : 11
92 : 34
93 : 17
94 : 52
95 : 26
96 : 13
97 : 40
98 : 20
99 : 10
100 : 5
101 : 16
102 : 8
103 : 4
104 : 2
105 : 1
1 106
&lt;/pre&gt;

Happy Life ahead!!!
[[File:end1.png]]</text>
      <sha1>q5izfhywvosgi7snvy6xqg3t7unf4as</sha1>
    </revision>
    <revision>
      <id>4380</id>
      <parentid>4378</parentid>
      <timestamp>2018-10-16T03:57:42Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* Complete Graph */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="7212">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_12 Contributors of this page]

=Page Rank - How does Google Work=
One web page is having link to other page, that is a page is referring to other page. Google uses ''Page Rank'' algorithm to choose which page should be displayed first.

If we have network, connections as below:
[[File:rank0.png]]

We want to pick a leader out of all these nodes. How to pick a leader?  Why to elect a leader? It is because we want to find the super power of available nodes.                     
[[File:rank1.png]]

For example, the application wherein, we want to find the most impressive person of the  few ones. How to decide it? As shown in below figure, each node will communicate with other, randomly, we implement the count for each node, how many times, the particular node is being visited.
[[File:rank2.png]]

[[#Top]]

As shown in following, figure, all nodes are visited and each node is marked with the 
number i.e.number of times the node is visited.
[[File:rank3.png]]

The node with the maximum count, becomes the winner. Here, node with 120 count in figure 
below, is the winner. i.e. The person with 120 count in the figure is the most impressive 
person in the community being considered.
[[File:rank4.png]]

[[File:rank5.png]]

[[File:rank6.png]]

[[File:rank7.png]]


[[File:rank8.png]]

[[#Top]]

Google selects the page rank in this matter. Each web page is connected to other web page with web links. To a page, maximum link is there, that will be put on top results in Google search results.
[[File:rank9.png]]

Google uses web crawler. The crawler takes the random walk on the www network and rank the web sites.
[[File:rank10.png]]

This way Google ranks the pages and displays search results, according to page rank.
[[File:rank11.png]]

e.g.we search for ''mysore city''. Google has 10,000 results. But it displays the results in the sequence of page rank of search results, As shown in figure below.
[[File:mysore.png]]

[[#Top]]

==Page rank algorithm ==
As shown in beautiful figure below, few nodes combinely selected one as the leader, then that leader and other nodes, have selected         other as a leader. This way, finally the final leader is elected.
[[File:rank12.png]]


[[File:graph00.png]]

[[File:graph01.png]]


==Gragh Drawing Program1==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
nx.barbell_graph(4,2)
G=nx.barbell_graph(4,2)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:
[[File:Graph003.png]]


==Gragh Drawing Program2==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
nx.barbell_graph(4,3)
G=nx.barbell_graph(4,3)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:
[[File:Graph004.png]]

==Gragh Drawing Program3==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
nx.barbell_graph(5,3)
G=nx.barbell_graph(5,3)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:
[[File:Graph005.png]]

==Complete Graph==
Complete graph is a graph, wherein, each node is connected to each other nodes in a graph.

&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.complete_graph(4)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:
[[File:completegraph001.png]]

=Collatz Conjecture=
Taught by Sudarshan sir and Amit sir, and Edited by Ms. Ami Tusharkant Choksi

If a number is even, divide it by ''2'', if it is odd, make multiply it by ''3'' and add ''1'', till you get ''1''. This simple problem is called, ''Collatz Conjecture''. 

[[File:collatz1.png]]

[[File:collatz2.png]]

[[File:collatz3.png]]

[[File:collatz4.png]]

[[File:collatz5.png]]

Number is bigger doesn't mean more iterations are required. One can notice, from the output of the following program. 



The program to implement the same is as follows:
==Program==
&lt;pre&gt;
#collatz conjecture
#if num is even, divide it by 2
#if num is odd, new number is equal to 3n+1


def checkNum(num):
    iterations=1
    while(num!=1):
        if(num%2==0):
            num=int(num/2)            
        else:
            num = 3*num+1
        iterations+=1
        

    print(num,iterations)


#checkNum(12)#Output: 1 10
#checkNum(26)#Output: 1 11
checkNum(2000)#Output: 1 113
&lt;/pre&gt;

&lt;pre&gt;

#recursive approach

def checkNum(num):
    if num==1:
        return 1
    elif num%2==0:
        return checkNum(num/2)+1
    else:
        return checkNum(3*num +1)+1


output:
checkNum(26)
Out[27]: 11
checkNum(5000)
Out[28]: 29
&lt;/pre&gt;

==Program adding statement to print all iterations==
&lt;pre&gt;
def checkNum(num):
    iterations=1
    while(num!=1):
        if(num%2==0):
            num=int(num/2)            
        else:
            num = 3*num+1
        print(iterations,&quot;:&quot;,num)
        iterations+=1
        

    print(num,iterations)
&lt;/pre&gt;
==Output==
===For checkNum(2000)===
&lt;pre&gt;
1 : 1000
2 : 500
3 : 250
4 : 125
5 : 376
6 : 188
7 : 94
8 : 47
9 : 142
10 : 71
11 : 214
12 : 107
13 : 322
14 : 161
15 : 484
16 : 242
17 : 121
18 : 364
19 : 182
20 : 91
21 : 274
22 : 137
23 : 412
24 : 206
25 : 103
26 : 310
27 : 155
28 : 466
29 : 233
30 : 700
31 : 350
32 : 175
33 : 526
34 : 263
35 : 790
36 : 395
37 : 1186
38 : 593
39 : 1780
40 : 890
41 : 445
42 : 1336
43 : 668
44 : 334
45 : 167
46 : 502
47 : 251
48 : 754
49 : 377
50 : 1132
51 : 566
52 : 283
53 : 850
54 : 425
55 : 1276
56 : 638
57 : 319
58 : 958
59 : 479
60 : 1438
61 : 719
62 : 2158
63 : 1079
64 : 3238
65 : 1619
66 : 4858
67 : 2429
68 : 7288
69 : 3644
70 : 1822
71 : 911
72 : 2734
73 : 1367
74 : 4102
75 : 2051
76 : 6154
77 : 3077
78 : 9232
79 : 4616
80 : 2308
81 : 1154
82 : 577
83 : 1732
84 : 866
85 : 433
86 : 1300
87 : 650
88 : 325
89 : 976
90 : 488
91 : 244
92 : 122
93 : 61
94 : 184
95 : 92
96 : 46
97 : 23
98 : 70
99 : 35
100 : 106
101 : 53
102 : 160
103 : 80
104 : 40
105 : 20
106 : 10
107 : 5
108 : 16
109 : 8
110 : 4
111 : 2
112 : 1
1 113
&lt;/pre&gt;

===For checkNum(5000)===
&lt;pre&gt;
1 : 2500
2 : 1250
3 : 625
4 : 1876
5 : 938
6 : 469
7 : 1408
8 : 704
9 : 352
10 : 176
11 : 88
12 : 44
13 : 22
14 : 11
15 : 34
16 : 17
17 : 52
18 : 26
19 : 13
20 : 40
21 : 20
22 : 10
23 : 5
24 : 16
25 : 8
26 : 4
27 : 2
28 : 1
1 29
&lt;/pre&gt;
===For checkNum(25000000)===
&lt;pre&gt;
1 : 12500000
2 : 6250000
3 : 3125000
4 : 1562500
5 : 781250
6 : 390625
7 : 1171876
8 : 585938
9 : 292969
10 : 878908
11 : 439454
12 : 219727
13 : 659182
14 : 329591
15 : 988774
16 : 494387
17 : 1483162
18 : 741581
19 : 2224744
20 : 1112372
21 : 556186
22 : 278093
23 : 834280
24 : 417140
25 : 208570
26 : 104285
27 : 312856
28 : 156428
29 : 78214
30 : 39107
31 : 117322
32 : 58661
33 : 175984
34 : 87992
35 : 43996
36 : 21998
37 : 10999
38 : 32998
39 : 16499
40 : 49498
41 : 24749
42 : 74248
43 : 37124
44 : 18562
45 : 9281
46 : 27844
47 : 13922
48 : 6961
49 : 20884
50 : 10442
51 : 5221
52 : 15664
53 : 7832
54 : 3916
55 : 1958
56 : 979
57 : 2938
58 : 1469
59 : 4408
60 : 2204
61 : 1102
62 : 551
63 : 1654
64 : 827
65 : 2482
66 : 1241
67 : 3724
68 : 1862
69 : 931
70 : 2794
71 : 1397
72 : 4192
73 : 2096
74 : 1048
75 : 524
76 : 262
77 : 131
78 : 394
79 : 197
80 : 592
81 : 296
82 : 148
83 : 74
84 : 37
85 : 112
86 : 56
87 : 28
88 : 14
89 : 7
90 : 22
91 : 11
92 : 34
93 : 17
94 : 52
95 : 26
96 : 13
97 : 40
98 : 20
99 : 10
100 : 5
101 : 16
102 : 8
103 : 4
104 : 2
105 : 1
1 106
&lt;/pre&gt;

Happy Life ahead!!!
[[File:end1.png]]</text>
      <sha1>6ocud6wd4q5kuaue1v7a58c7u92rtpp</sha1>
    </revision>
    <revision>
      <id>4381</id>
      <parentid>4380</parentid>
      <timestamp>2018-10-16T03:59:31Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* Complete Graph */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="7374">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_12 Contributors of this page]

=Page Rank - How does Google Work=
One web page is having link to other page, that is a page is referring to other page. Google uses ''Page Rank'' algorithm to choose which page should be displayed first.

If we have network, connections as below:
[[File:rank0.png]]

We want to pick a leader out of all these nodes. How to pick a leader?  Why to elect a leader? It is because we want to find the super power of available nodes.                     
[[File:rank1.png]]

For example, the application wherein, we want to find the most impressive person of the  few ones. How to decide it? As shown in below figure, each node will communicate with other, randomly, we implement the count for each node, how many times, the particular node is being visited.
[[File:rank2.png]]

[[#Top]]

As shown in following, figure, all nodes are visited and each node is marked with the 
number i.e.number of times the node is visited.
[[File:rank3.png]]

The node with the maximum count, becomes the winner. Here, node with 120 count in figure 
below, is the winner. i.e. The person with 120 count in the figure is the most impressive 
person in the community being considered.
[[File:rank4.png]]

[[File:rank5.png]]

[[File:rank6.png]]

[[File:rank7.png]]


[[File:rank8.png]]

[[#Top]]

Google selects the page rank in this matter. Each web page is connected to other web page with web links. To a page, maximum link is there, that will be put on top results in Google search results.
[[File:rank9.png]]

Google uses web crawler. The crawler takes the random walk on the www network and rank the web sites.
[[File:rank10.png]]

This way Google ranks the pages and displays search results, according to page rank.
[[File:rank11.png]]

e.g.we search for ''mysore city''. Google has 10,000 results. But it displays the results in the sequence of page rank of search results, As shown in figure below.
[[File:mysore.png]]

[[#Top]]

==Page rank algorithm ==
As shown in beautiful figure below, few nodes combinely selected one as the leader, then that leader and other nodes, have selected         other as a leader. This way, finally the final leader is elected.
[[File:rank12.png]]


[[File:graph00.png]]

[[File:graph01.png]]


==Gragh Drawing Program1==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
nx.barbell_graph(4,2)
G=nx.barbell_graph(4,2)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:
[[File:Graph003.png]]


==Gragh Drawing Program2==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
nx.barbell_graph(4,3)
G=nx.barbell_graph(4,3)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:
[[File:Graph004.png]]

==Gragh Drawing Program3==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
nx.barbell_graph(5,3)
G=nx.barbell_graph(5,3)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:
[[File:Graph005.png]]

==Complete Graph==
Complete graph is a graph, wherein, each node is connected to each other nodes in a graph.

&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.complete_graph(4)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:
[[File:completegraph001.png]]

==Cycle graph==

&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.cycle_graph(5)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:
[[File:cyclegraph1.png]]

=Collatz Conjecture=
Taught by Sudarshan sir and Amit sir, and Edited by Ms. Ami Tusharkant Choksi

If a number is even, divide it by ''2'', if it is odd, make multiply it by ''3'' and add ''1'', till you get ''1''. This simple problem is called, ''Collatz Conjecture''. 

[[File:collatz1.png]]

[[File:collatz2.png]]

[[File:collatz3.png]]

[[File:collatz4.png]]

[[File:collatz5.png]]

Number is bigger doesn't mean more iterations are required. One can notice, from the output of the following program. 



The program to implement the same is as follows:
==Program==
&lt;pre&gt;
#collatz conjecture
#if num is even, divide it by 2
#if num is odd, new number is equal to 3n+1


def checkNum(num):
    iterations=1
    while(num!=1):
        if(num%2==0):
            num=int(num/2)            
        else:
            num = 3*num+1
        iterations+=1
        

    print(num,iterations)


#checkNum(12)#Output: 1 10
#checkNum(26)#Output: 1 11
checkNum(2000)#Output: 1 113
&lt;/pre&gt;

&lt;pre&gt;

#recursive approach

def checkNum(num):
    if num==1:
        return 1
    elif num%2==0:
        return checkNum(num/2)+1
    else:
        return checkNum(3*num +1)+1


output:
checkNum(26)
Out[27]: 11
checkNum(5000)
Out[28]: 29
&lt;/pre&gt;

==Program adding statement to print all iterations==
&lt;pre&gt;
def checkNum(num):
    iterations=1
    while(num!=1):
        if(num%2==0):
            num=int(num/2)            
        else:
            num = 3*num+1
        print(iterations,&quot;:&quot;,num)
        iterations+=1
        

    print(num,iterations)
&lt;/pre&gt;
==Output==
===For checkNum(2000)===
&lt;pre&gt;
1 : 1000
2 : 500
3 : 250
4 : 125
5 : 376
6 : 188
7 : 94
8 : 47
9 : 142
10 : 71
11 : 214
12 : 107
13 : 322
14 : 161
15 : 484
16 : 242
17 : 121
18 : 364
19 : 182
20 : 91
21 : 274
22 : 137
23 : 412
24 : 206
25 : 103
26 : 310
27 : 155
28 : 466
29 : 233
30 : 700
31 : 350
32 : 175
33 : 526
34 : 263
35 : 790
36 : 395
37 : 1186
38 : 593
39 : 1780
40 : 890
41 : 445
42 : 1336
43 : 668
44 : 334
45 : 167
46 : 502
47 : 251
48 : 754
49 : 377
50 : 1132
51 : 566
52 : 283
53 : 850
54 : 425
55 : 1276
56 : 638
57 : 319
58 : 958
59 : 479
60 : 1438
61 : 719
62 : 2158
63 : 1079
64 : 3238
65 : 1619
66 : 4858
67 : 2429
68 : 7288
69 : 3644
70 : 1822
71 : 911
72 : 2734
73 : 1367
74 : 4102
75 : 2051
76 : 6154
77 : 3077
78 : 9232
79 : 4616
80 : 2308
81 : 1154
82 : 577
83 : 1732
84 : 866
85 : 433
86 : 1300
87 : 650
88 : 325
89 : 976
90 : 488
91 : 244
92 : 122
93 : 61
94 : 184
95 : 92
96 : 46
97 : 23
98 : 70
99 : 35
100 : 106
101 : 53
102 : 160
103 : 80
104 : 40
105 : 20
106 : 10
107 : 5
108 : 16
109 : 8
110 : 4
111 : 2
112 : 1
1 113
&lt;/pre&gt;

===For checkNum(5000)===
&lt;pre&gt;
1 : 2500
2 : 1250
3 : 625
4 : 1876
5 : 938
6 : 469
7 : 1408
8 : 704
9 : 352
10 : 176
11 : 88
12 : 44
13 : 22
14 : 11
15 : 34
16 : 17
17 : 52
18 : 26
19 : 13
20 : 40
21 : 20
22 : 10
23 : 5
24 : 16
25 : 8
26 : 4
27 : 2
28 : 1
1 29
&lt;/pre&gt;
===For checkNum(25000000)===
&lt;pre&gt;
1 : 12500000
2 : 6250000
3 : 3125000
4 : 1562500
5 : 781250
6 : 390625
7 : 1171876
8 : 585938
9 : 292969
10 : 878908
11 : 439454
12 : 219727
13 : 659182
14 : 329591
15 : 988774
16 : 494387
17 : 1483162
18 : 741581
19 : 2224744
20 : 1112372
21 : 556186
22 : 278093
23 : 834280
24 : 417140
25 : 208570
26 : 104285
27 : 312856
28 : 156428
29 : 78214
30 : 39107
31 : 117322
32 : 58661
33 : 175984
34 : 87992
35 : 43996
36 : 21998
37 : 10999
38 : 32998
39 : 16499
40 : 49498
41 : 24749
42 : 74248
43 : 37124
44 : 18562
45 : 9281
46 : 27844
47 : 13922
48 : 6961
49 : 20884
50 : 10442
51 : 5221
52 : 15664
53 : 7832
54 : 3916
55 : 1958
56 : 979
57 : 2938
58 : 1469
59 : 4408
60 : 2204
61 : 1102
62 : 551
63 : 1654
64 : 827
65 : 2482
66 : 1241
67 : 3724
68 : 1862
69 : 931
70 : 2794
71 : 1397
72 : 4192
73 : 2096
74 : 1048
75 : 524
76 : 262
77 : 131
78 : 394
79 : 197
80 : 592
81 : 296
82 : 148
83 : 74
84 : 37
85 : 112
86 : 56
87 : 28
88 : 14
89 : 7
90 : 22
91 : 11
92 : 34
93 : 17
94 : 52
95 : 26
96 : 13
97 : 40
98 : 20
99 : 10
100 : 5
101 : 16
102 : 8
103 : 4
104 : 2
105 : 1
1 106
&lt;/pre&gt;

Happy Life ahead!!!
[[File:end1.png]]</text>
      <sha1>89uyrq2qjgcifc4fqk5i7skk5vkr1oj</sha1>
    </revision>
    <revision>
      <id>4383</id>
      <parentid>4381</parentid>
      <timestamp>2018-10-16T04:01:51Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* Cycle graph */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="7538">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_12 Contributors of this page]

=Page Rank - How does Google Work=
One web page is having link to other page, that is a page is referring to other page. Google uses ''Page Rank'' algorithm to choose which page should be displayed first.

If we have network, connections as below:
[[File:rank0.png]]

We want to pick a leader out of all these nodes. How to pick a leader?  Why to elect a leader? It is because we want to find the super power of available nodes.                     
[[File:rank1.png]]

For example, the application wherein, we want to find the most impressive person of the  few ones. How to decide it? As shown in below figure, each node will communicate with other, randomly, we implement the count for each node, how many times, the particular node is being visited.
[[File:rank2.png]]

[[#Top]]

As shown in following, figure, all nodes are visited and each node is marked with the 
number i.e.number of times the node is visited.
[[File:rank3.png]]

The node with the maximum count, becomes the winner. Here, node with 120 count in figure 
below, is the winner. i.e. The person with 120 count in the figure is the most impressive 
person in the community being considered.
[[File:rank4.png]]

[[File:rank5.png]]

[[File:rank6.png]]

[[File:rank7.png]]


[[File:rank8.png]]

[[#Top]]

Google selects the page rank in this matter. Each web page is connected to other web page with web links. To a page, maximum link is there, that will be put on top results in Google search results.
[[File:rank9.png]]

Google uses web crawler. The crawler takes the random walk on the www network and rank the web sites.
[[File:rank10.png]]

This way Google ranks the pages and displays search results, according to page rank.
[[File:rank11.png]]

e.g.we search for ''mysore city''. Google has 10,000 results. But it displays the results in the sequence of page rank of search results, As shown in figure below.
[[File:mysore.png]]

[[#Top]]

==Page rank algorithm ==
As shown in beautiful figure below, few nodes combinely selected one as the leader, then that leader and other nodes, have selected         other as a leader. This way, finally the final leader is elected.
[[File:rank12.png]]


[[File:graph00.png]]

[[File:graph01.png]]


==Gragh Drawing Program1==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
nx.barbell_graph(4,2)
G=nx.barbell_graph(4,2)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:
[[File:Graph003.png]]


==Gragh Drawing Program2==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
nx.barbell_graph(4,3)
G=nx.barbell_graph(4,3)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:
[[File:Graph004.png]]

==Gragh Drawing Program3==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
nx.barbell_graph(5,3)
G=nx.barbell_graph(5,3)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:
[[File:Graph005.png]]

==Complete Graph==
Complete graph is a graph, wherein, each node is connected to each other nodes in a graph.

&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.complete_graph(4)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:
[[File:completegraph001.png]]

==Cycle graph==

&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.cycle_graph(5)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:
[[File:cyclegraph1.png]]

==Ladder graph==

&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.ladder_graph(5)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:
[[File:laddergraph.png]]

=Collatz Conjecture=
Taught by Sudarshan sir and Amit sir, and Edited by Ms. Ami Tusharkant Choksi

If a number is even, divide it by ''2'', if it is odd, make multiply it by ''3'' and add ''1'', till you get ''1''. This simple problem is called, ''Collatz Conjecture''. 

[[File:collatz1.png]]

[[File:collatz2.png]]

[[File:collatz3.png]]

[[File:collatz4.png]]

[[File:collatz5.png]]

Number is bigger doesn't mean more iterations are required. One can notice, from the output of the following program. 



The program to implement the same is as follows:
==Program==
&lt;pre&gt;
#collatz conjecture
#if num is even, divide it by 2
#if num is odd, new number is equal to 3n+1


def checkNum(num):
    iterations=1
    while(num!=1):
        if(num%2==0):
            num=int(num/2)            
        else:
            num = 3*num+1
        iterations+=1
        

    print(num,iterations)


#checkNum(12)#Output: 1 10
#checkNum(26)#Output: 1 11
checkNum(2000)#Output: 1 113
&lt;/pre&gt;

&lt;pre&gt;

#recursive approach

def checkNum(num):
    if num==1:
        return 1
    elif num%2==0:
        return checkNum(num/2)+1
    else:
        return checkNum(3*num +1)+1


output:
checkNum(26)
Out[27]: 11
checkNum(5000)
Out[28]: 29
&lt;/pre&gt;

==Program adding statement to print all iterations==
&lt;pre&gt;
def checkNum(num):
    iterations=1
    while(num!=1):
        if(num%2==0):
            num=int(num/2)            
        else:
            num = 3*num+1
        print(iterations,&quot;:&quot;,num)
        iterations+=1
        

    print(num,iterations)
&lt;/pre&gt;
==Output==
===For checkNum(2000)===
&lt;pre&gt;
1 : 1000
2 : 500
3 : 250
4 : 125
5 : 376
6 : 188
7 : 94
8 : 47
9 : 142
10 : 71
11 : 214
12 : 107
13 : 322
14 : 161
15 : 484
16 : 242
17 : 121
18 : 364
19 : 182
20 : 91
21 : 274
22 : 137
23 : 412
24 : 206
25 : 103
26 : 310
27 : 155
28 : 466
29 : 233
30 : 700
31 : 350
32 : 175
33 : 526
34 : 263
35 : 790
36 : 395
37 : 1186
38 : 593
39 : 1780
40 : 890
41 : 445
42 : 1336
43 : 668
44 : 334
45 : 167
46 : 502
47 : 251
48 : 754
49 : 377
50 : 1132
51 : 566
52 : 283
53 : 850
54 : 425
55 : 1276
56 : 638
57 : 319
58 : 958
59 : 479
60 : 1438
61 : 719
62 : 2158
63 : 1079
64 : 3238
65 : 1619
66 : 4858
67 : 2429
68 : 7288
69 : 3644
70 : 1822
71 : 911
72 : 2734
73 : 1367
74 : 4102
75 : 2051
76 : 6154
77 : 3077
78 : 9232
79 : 4616
80 : 2308
81 : 1154
82 : 577
83 : 1732
84 : 866
85 : 433
86 : 1300
87 : 650
88 : 325
89 : 976
90 : 488
91 : 244
92 : 122
93 : 61
94 : 184
95 : 92
96 : 46
97 : 23
98 : 70
99 : 35
100 : 106
101 : 53
102 : 160
103 : 80
104 : 40
105 : 20
106 : 10
107 : 5
108 : 16
109 : 8
110 : 4
111 : 2
112 : 1
1 113
&lt;/pre&gt;

===For checkNum(5000)===
&lt;pre&gt;
1 : 2500
2 : 1250
3 : 625
4 : 1876
5 : 938
6 : 469
7 : 1408
8 : 704
9 : 352
10 : 176
11 : 88
12 : 44
13 : 22
14 : 11
15 : 34
16 : 17
17 : 52
18 : 26
19 : 13
20 : 40
21 : 20
22 : 10
23 : 5
24 : 16
25 : 8
26 : 4
27 : 2
28 : 1
1 29
&lt;/pre&gt;
===For checkNum(25000000)===
&lt;pre&gt;
1 : 12500000
2 : 6250000
3 : 3125000
4 : 1562500
5 : 781250
6 : 390625
7 : 1171876
8 : 585938
9 : 292969
10 : 878908
11 : 439454
12 : 219727
13 : 659182
14 : 329591
15 : 988774
16 : 494387
17 : 1483162
18 : 741581
19 : 2224744
20 : 1112372
21 : 556186
22 : 278093
23 : 834280
24 : 417140
25 : 208570
26 : 104285
27 : 312856
28 : 156428
29 : 78214
30 : 39107
31 : 117322
32 : 58661
33 : 175984
34 : 87992
35 : 43996
36 : 21998
37 : 10999
38 : 32998
39 : 16499
40 : 49498
41 : 24749
42 : 74248
43 : 37124
44 : 18562
45 : 9281
46 : 27844
47 : 13922
48 : 6961
49 : 20884
50 : 10442
51 : 5221
52 : 15664
53 : 7832
54 : 3916
55 : 1958
56 : 979
57 : 2938
58 : 1469
59 : 4408
60 : 2204
61 : 1102
62 : 551
63 : 1654
64 : 827
65 : 2482
66 : 1241
67 : 3724
68 : 1862
69 : 931
70 : 2794
71 : 1397
72 : 4192
73 : 2096
74 : 1048
75 : 524
76 : 262
77 : 131
78 : 394
79 : 197
80 : 592
81 : 296
82 : 148
83 : 74
84 : 37
85 : 112
86 : 56
87 : 28
88 : 14
89 : 7
90 : 22
91 : 11
92 : 34
93 : 17
94 : 52
95 : 26
96 : 13
97 : 40
98 : 20
99 : 10
100 : 5
101 : 16
102 : 8
103 : 4
104 : 2
105 : 1
1 106
&lt;/pre&gt;

Happy Life ahead!!!
[[File:end1.png]]</text>
      <sha1>8bgechaaflbfh4o4hdgv907fhq91pbs</sha1>
    </revision>
    <revision>
      <id>4385</id>
      <parentid>4383</parentid>
      <timestamp>2018-10-16T04:04:06Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* Ladder graph */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="7696">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_12 Contributors of this page]

=Page Rank - How does Google Work=
One web page is having link to other page, that is a page is referring to other page. Google uses ''Page Rank'' algorithm to choose which page should be displayed first.

If we have network, connections as below:
[[File:rank0.png]]

We want to pick a leader out of all these nodes. How to pick a leader?  Why to elect a leader? It is because we want to find the super power of available nodes.                     
[[File:rank1.png]]

For example, the application wherein, we want to find the most impressive person of the  few ones. How to decide it? As shown in below figure, each node will communicate with other, randomly, we implement the count for each node, how many times, the particular node is being visited.
[[File:rank2.png]]

[[#Top]]

As shown in following, figure, all nodes are visited and each node is marked with the 
number i.e.number of times the node is visited.
[[File:rank3.png]]

The node with the maximum count, becomes the winner. Here, node with 120 count in figure 
below, is the winner. i.e. The person with 120 count in the figure is the most impressive 
person in the community being considered.
[[File:rank4.png]]

[[File:rank5.png]]

[[File:rank6.png]]

[[File:rank7.png]]


[[File:rank8.png]]

[[#Top]]

Google selects the page rank in this matter. Each web page is connected to other web page with web links. To a page, maximum link is there, that will be put on top results in Google search results.
[[File:rank9.png]]

Google uses web crawler. The crawler takes the random walk on the www network and rank the web sites.
[[File:rank10.png]]

This way Google ranks the pages and displays search results, according to page rank.
[[File:rank11.png]]

e.g.we search for ''mysore city''. Google has 10,000 results. But it displays the results in the sequence of page rank of search results, As shown in figure below.
[[File:mysore.png]]

[[#Top]]

==Page rank algorithm ==
As shown in beautiful figure below, few nodes combinely selected one as the leader, then that leader and other nodes, have selected         other as a leader. This way, finally the final leader is elected.
[[File:rank12.png]]


[[File:graph00.png]]

[[File:graph01.png]]


==Gragh Drawing Program1==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
nx.barbell_graph(4,2)
G=nx.barbell_graph(4,2)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:
[[File:Graph003.png]]


==Gragh Drawing Program2==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
nx.barbell_graph(4,3)
G=nx.barbell_graph(4,3)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:
[[File:Graph004.png]]

==Gragh Drawing Program3==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
nx.barbell_graph(5,3)
G=nx.barbell_graph(5,3)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:
[[File:Graph005.png]]

==Complete Graph==
Complete graph is a graph, wherein, each node is connected to each other nodes in a graph.

&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.complete_graph(4)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:
[[File:completegraph001.png]]

==Cycle graph==

&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.cycle_graph(5)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:
[[File:cyclegraph1.png]]

==Ladder graph==

&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.ladder_graph(5)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:
[[File:laddergraph.png]]


==Path Graph==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.path_graph(6)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:
[[File:pathgraph.png]]

=Collatz Conjecture=
Taught by Sudarshan sir and Amit sir, and Edited by Ms. Ami Tusharkant Choksi

If a number is even, divide it by ''2'', if it is odd, make multiply it by ''3'' and add ''1'', till you get ''1''. This simple problem is called, ''Collatz Conjecture''. 

[[File:collatz1.png]]

[[File:collatz2.png]]

[[File:collatz3.png]]

[[File:collatz4.png]]

[[File:collatz5.png]]

Number is bigger doesn't mean more iterations are required. One can notice, from the output of the following program. 



The program to implement the same is as follows:
==Program==
&lt;pre&gt;
#collatz conjecture
#if num is even, divide it by 2
#if num is odd, new number is equal to 3n+1


def checkNum(num):
    iterations=1
    while(num!=1):
        if(num%2==0):
            num=int(num/2)            
        else:
            num = 3*num+1
        iterations+=1
        

    print(num,iterations)


#checkNum(12)#Output: 1 10
#checkNum(26)#Output: 1 11
checkNum(2000)#Output: 1 113
&lt;/pre&gt;

&lt;pre&gt;

#recursive approach

def checkNum(num):
    if num==1:
        return 1
    elif num%2==0:
        return checkNum(num/2)+1
    else:
        return checkNum(3*num +1)+1


output:
checkNum(26)
Out[27]: 11
checkNum(5000)
Out[28]: 29
&lt;/pre&gt;

==Program adding statement to print all iterations==
&lt;pre&gt;
def checkNum(num):
    iterations=1
    while(num!=1):
        if(num%2==0):
            num=int(num/2)            
        else:
            num = 3*num+1
        print(iterations,&quot;:&quot;,num)
        iterations+=1
        

    print(num,iterations)
&lt;/pre&gt;
==Output==
===For checkNum(2000)===
&lt;pre&gt;
1 : 1000
2 : 500
3 : 250
4 : 125
5 : 376
6 : 188
7 : 94
8 : 47
9 : 142
10 : 71
11 : 214
12 : 107
13 : 322
14 : 161
15 : 484
16 : 242
17 : 121
18 : 364
19 : 182
20 : 91
21 : 274
22 : 137
23 : 412
24 : 206
25 : 103
26 : 310
27 : 155
28 : 466
29 : 233
30 : 700
31 : 350
32 : 175
33 : 526
34 : 263
35 : 790
36 : 395
37 : 1186
38 : 593
39 : 1780
40 : 890
41 : 445
42 : 1336
43 : 668
44 : 334
45 : 167
46 : 502
47 : 251
48 : 754
49 : 377
50 : 1132
51 : 566
52 : 283
53 : 850
54 : 425
55 : 1276
56 : 638
57 : 319
58 : 958
59 : 479
60 : 1438
61 : 719
62 : 2158
63 : 1079
64 : 3238
65 : 1619
66 : 4858
67 : 2429
68 : 7288
69 : 3644
70 : 1822
71 : 911
72 : 2734
73 : 1367
74 : 4102
75 : 2051
76 : 6154
77 : 3077
78 : 9232
79 : 4616
80 : 2308
81 : 1154
82 : 577
83 : 1732
84 : 866
85 : 433
86 : 1300
87 : 650
88 : 325
89 : 976
90 : 488
91 : 244
92 : 122
93 : 61
94 : 184
95 : 92
96 : 46
97 : 23
98 : 70
99 : 35
100 : 106
101 : 53
102 : 160
103 : 80
104 : 40
105 : 20
106 : 10
107 : 5
108 : 16
109 : 8
110 : 4
111 : 2
112 : 1
1 113
&lt;/pre&gt;

===For checkNum(5000)===
&lt;pre&gt;
1 : 2500
2 : 1250
3 : 625
4 : 1876
5 : 938
6 : 469
7 : 1408
8 : 704
9 : 352
10 : 176
11 : 88
12 : 44
13 : 22
14 : 11
15 : 34
16 : 17
17 : 52
18 : 26
19 : 13
20 : 40
21 : 20
22 : 10
23 : 5
24 : 16
25 : 8
26 : 4
27 : 2
28 : 1
1 29
&lt;/pre&gt;
===For checkNum(25000000)===
&lt;pre&gt;
1 : 12500000
2 : 6250000
3 : 3125000
4 : 1562500
5 : 781250
6 : 390625
7 : 1171876
8 : 585938
9 : 292969
10 : 878908
11 : 439454
12 : 219727
13 : 659182
14 : 329591
15 : 988774
16 : 494387
17 : 1483162
18 : 741581
19 : 2224744
20 : 1112372
21 : 556186
22 : 278093
23 : 834280
24 : 417140
25 : 208570
26 : 104285
27 : 312856
28 : 156428
29 : 78214
30 : 39107
31 : 117322
32 : 58661
33 : 175984
34 : 87992
35 : 43996
36 : 21998
37 : 10999
38 : 32998
39 : 16499
40 : 49498
41 : 24749
42 : 74248
43 : 37124
44 : 18562
45 : 9281
46 : 27844
47 : 13922
48 : 6961
49 : 20884
50 : 10442
51 : 5221
52 : 15664
53 : 7832
54 : 3916
55 : 1958
56 : 979
57 : 2938
58 : 1469
59 : 4408
60 : 2204
61 : 1102
62 : 551
63 : 1654
64 : 827
65 : 2482
66 : 1241
67 : 3724
68 : 1862
69 : 931
70 : 2794
71 : 1397
72 : 4192
73 : 2096
74 : 1048
75 : 524
76 : 262
77 : 131
78 : 394
79 : 197
80 : 592
81 : 296
82 : 148
83 : 74
84 : 37
85 : 112
86 : 56
87 : 28
88 : 14
89 : 7
90 : 22
91 : 11
92 : 34
93 : 17
94 : 52
95 : 26
96 : 13
97 : 40
98 : 20
99 : 10
100 : 5
101 : 16
102 : 8
103 : 4
104 : 2
105 : 1
1 106
&lt;/pre&gt;

Happy Life ahead!!!
[[File:end1.png]]</text>
      <sha1>09v4wr1cbj4uxywhtllv039fw63l7dv</sha1>
    </revision>
    <revision>
      <id>4387</id>
      <parentid>4385</parentid>
      <timestamp>2018-10-16T04:06:00Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* Gragh Drawing Program2 */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="7702">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_12 Contributors of this page]

=Page Rank - How does Google Work=
One web page is having link to other page, that is a page is referring to other page. Google uses ''Page Rank'' algorithm to choose which page should be displayed first.

If we have network, connections as below:
[[File:rank0.png]]

We want to pick a leader out of all these nodes. How to pick a leader?  Why to elect a leader? It is because we want to find the super power of available nodes.                     
[[File:rank1.png]]

For example, the application wherein, we want to find the most impressive person of the  few ones. How to decide it? As shown in below figure, each node will communicate with other, randomly, we implement the count for each node, how many times, the particular node is being visited.
[[File:rank2.png]]

[[#Top]]

As shown in following, figure, all nodes are visited and each node is marked with the 
number i.e.number of times the node is visited.
[[File:rank3.png]]

The node with the maximum count, becomes the winner. Here, node with 120 count in figure 
below, is the winner. i.e. The person with 120 count in the figure is the most impressive 
person in the community being considered.
[[File:rank4.png]]

[[File:rank5.png]]

[[File:rank6.png]]

[[File:rank7.png]]


[[File:rank8.png]]

[[#Top]]

Google selects the page rank in this matter. Each web page is connected to other web page with web links. To a page, maximum link is there, that will be put on top results in Google search results.
[[File:rank9.png]]

Google uses web crawler. The crawler takes the random walk on the www network and rank the web sites.
[[File:rank10.png]]

This way Google ranks the pages and displays search results, according to page rank.
[[File:rank11.png]]

e.g.we search for ''mysore city''. Google has 10,000 results. But it displays the results in the sequence of page rank of search results, As shown in figure below.
[[File:mysore.png]]

[[#Top]]

==Page rank algorithm ==
As shown in beautiful figure below, few nodes combinely selected one as the leader, then that leader and other nodes, have selected         other as a leader. This way, finally the final leader is elected.
[[File:rank12.png]]


[[File:graph00.png]]

[[File:graph01.png]]


==Gragh Drawing Program1==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
nx.barbell_graph(4,2)
G=nx.barbell_graph(4,2)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:
[[File:Graph003.png]]


==Gragh Drawing Program2==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
nx.barbell_graph(4,3)
G=nx.barbell_graph(4,3)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:
[[File:Graph004.png|400px]]

==Gragh Drawing Program3==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
nx.barbell_graph(5,3)
G=nx.barbell_graph(5,3)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:
[[File:Graph005.png]]

==Complete Graph==
Complete graph is a graph, wherein, each node is connected to each other nodes in a graph.

&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.complete_graph(4)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:
[[File:completegraph001.png]]

==Cycle graph==

&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.cycle_graph(5)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:
[[File:cyclegraph1.png]]

==Ladder graph==

&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.ladder_graph(5)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:
[[File:laddergraph.png]]


==Path Graph==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.path_graph(6)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:
[[File:pathgraph.png]]

=Collatz Conjecture=
Taught by Sudarshan sir and Amit sir, and Edited by Ms. Ami Tusharkant Choksi

If a number is even, divide it by ''2'', if it is odd, make multiply it by ''3'' and add ''1'', till you get ''1''. This simple problem is called, ''Collatz Conjecture''. 

[[File:collatz1.png]]

[[File:collatz2.png]]

[[File:collatz3.png]]

[[File:collatz4.png]]

[[File:collatz5.png]]

Number is bigger doesn't mean more iterations are required. One can notice, from the output of the following program. 



The program to implement the same is as follows:
==Program==
&lt;pre&gt;
#collatz conjecture
#if num is even, divide it by 2
#if num is odd, new number is equal to 3n+1


def checkNum(num):
    iterations=1
    while(num!=1):
        if(num%2==0):
            num=int(num/2)            
        else:
            num = 3*num+1
        iterations+=1
        

    print(num,iterations)


#checkNum(12)#Output: 1 10
#checkNum(26)#Output: 1 11
checkNum(2000)#Output: 1 113
&lt;/pre&gt;

&lt;pre&gt;

#recursive approach

def checkNum(num):
    if num==1:
        return 1
    elif num%2==0:
        return checkNum(num/2)+1
    else:
        return checkNum(3*num +1)+1


output:
checkNum(26)
Out[27]: 11
checkNum(5000)
Out[28]: 29
&lt;/pre&gt;

==Program adding statement to print all iterations==
&lt;pre&gt;
def checkNum(num):
    iterations=1
    while(num!=1):
        if(num%2==0):
            num=int(num/2)            
        else:
            num = 3*num+1
        print(iterations,&quot;:&quot;,num)
        iterations+=1
        

    print(num,iterations)
&lt;/pre&gt;
==Output==
===For checkNum(2000)===
&lt;pre&gt;
1 : 1000
2 : 500
3 : 250
4 : 125
5 : 376
6 : 188
7 : 94
8 : 47
9 : 142
10 : 71
11 : 214
12 : 107
13 : 322
14 : 161
15 : 484
16 : 242
17 : 121
18 : 364
19 : 182
20 : 91
21 : 274
22 : 137
23 : 412
24 : 206
25 : 103
26 : 310
27 : 155
28 : 466
29 : 233
30 : 700
31 : 350
32 : 175
33 : 526
34 : 263
35 : 790
36 : 395
37 : 1186
38 : 593
39 : 1780
40 : 890
41 : 445
42 : 1336
43 : 668
44 : 334
45 : 167
46 : 502
47 : 251
48 : 754
49 : 377
50 : 1132
51 : 566
52 : 283
53 : 850
54 : 425
55 : 1276
56 : 638
57 : 319
58 : 958
59 : 479
60 : 1438
61 : 719
62 : 2158
63 : 1079
64 : 3238
65 : 1619
66 : 4858
67 : 2429
68 : 7288
69 : 3644
70 : 1822
71 : 911
72 : 2734
73 : 1367
74 : 4102
75 : 2051
76 : 6154
77 : 3077
78 : 9232
79 : 4616
80 : 2308
81 : 1154
82 : 577
83 : 1732
84 : 866
85 : 433
86 : 1300
87 : 650
88 : 325
89 : 976
90 : 488
91 : 244
92 : 122
93 : 61
94 : 184
95 : 92
96 : 46
97 : 23
98 : 70
99 : 35
100 : 106
101 : 53
102 : 160
103 : 80
104 : 40
105 : 20
106 : 10
107 : 5
108 : 16
109 : 8
110 : 4
111 : 2
112 : 1
1 113
&lt;/pre&gt;

===For checkNum(5000)===
&lt;pre&gt;
1 : 2500
2 : 1250
3 : 625
4 : 1876
5 : 938
6 : 469
7 : 1408
8 : 704
9 : 352
10 : 176
11 : 88
12 : 44
13 : 22
14 : 11
15 : 34
16 : 17
17 : 52
18 : 26
19 : 13
20 : 40
21 : 20
22 : 10
23 : 5
24 : 16
25 : 8
26 : 4
27 : 2
28 : 1
1 29
&lt;/pre&gt;
===For checkNum(25000000)===
&lt;pre&gt;
1 : 12500000
2 : 6250000
3 : 3125000
4 : 1562500
5 : 781250
6 : 390625
7 : 1171876
8 : 585938
9 : 292969
10 : 878908
11 : 439454
12 : 219727
13 : 659182
14 : 329591
15 : 988774
16 : 494387
17 : 1483162
18 : 741581
19 : 2224744
20 : 1112372
21 : 556186
22 : 278093
23 : 834280
24 : 417140
25 : 208570
26 : 104285
27 : 312856
28 : 156428
29 : 78214
30 : 39107
31 : 117322
32 : 58661
33 : 175984
34 : 87992
35 : 43996
36 : 21998
37 : 10999
38 : 32998
39 : 16499
40 : 49498
41 : 24749
42 : 74248
43 : 37124
44 : 18562
45 : 9281
46 : 27844
47 : 13922
48 : 6961
49 : 20884
50 : 10442
51 : 5221
52 : 15664
53 : 7832
54 : 3916
55 : 1958
56 : 979
57 : 2938
58 : 1469
59 : 4408
60 : 2204
61 : 1102
62 : 551
63 : 1654
64 : 827
65 : 2482
66 : 1241
67 : 3724
68 : 1862
69 : 931
70 : 2794
71 : 1397
72 : 4192
73 : 2096
74 : 1048
75 : 524
76 : 262
77 : 131
78 : 394
79 : 197
80 : 592
81 : 296
82 : 148
83 : 74
84 : 37
85 : 112
86 : 56
87 : 28
88 : 14
89 : 7
90 : 22
91 : 11
92 : 34
93 : 17
94 : 52
95 : 26
96 : 13
97 : 40
98 : 20
99 : 10
100 : 5
101 : 16
102 : 8
103 : 4
104 : 2
105 : 1
1 106
&lt;/pre&gt;

Happy Life ahead!!!
[[File:end1.png]]</text>
      <sha1>m3en794wbvvxht3azr1z9mg502ghrky</sha1>
    </revision>
    <revision>
      <id>4388</id>
      <parentid>4387</parentid>
      <timestamp>2018-10-16T04:06:19Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* Gragh Drawing Program2 */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="7702">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_12 Contributors of this page]

=Page Rank - How does Google Work=
One web page is having link to other page, that is a page is referring to other page. Google uses ''Page Rank'' algorithm to choose which page should be displayed first.

If we have network, connections as below:
[[File:rank0.png]]

We want to pick a leader out of all these nodes. How to pick a leader?  Why to elect a leader? It is because we want to find the super power of available nodes.                     
[[File:rank1.png]]

For example, the application wherein, we want to find the most impressive person of the  few ones. How to decide it? As shown in below figure, each node will communicate with other, randomly, we implement the count for each node, how many times, the particular node is being visited.
[[File:rank2.png]]

[[#Top]]

As shown in following, figure, all nodes are visited and each node is marked with the 
number i.e.number of times the node is visited.
[[File:rank3.png]]

The node with the maximum count, becomes the winner. Here, node with 120 count in figure 
below, is the winner. i.e. The person with 120 count in the figure is the most impressive 
person in the community being considered.
[[File:rank4.png]]

[[File:rank5.png]]

[[File:rank6.png]]

[[File:rank7.png]]


[[File:rank8.png]]

[[#Top]]

Google selects the page rank in this matter. Each web page is connected to other web page with web links. To a page, maximum link is there, that will be put on top results in Google search results.
[[File:rank9.png]]

Google uses web crawler. The crawler takes the random walk on the www network and rank the web sites.
[[File:rank10.png]]

This way Google ranks the pages and displays search results, according to page rank.
[[File:rank11.png]]

e.g.we search for ''mysore city''. Google has 10,000 results. But it displays the results in the sequence of page rank of search results, As shown in figure below.
[[File:mysore.png]]

[[#Top]]

==Page rank algorithm ==
As shown in beautiful figure below, few nodes combinely selected one as the leader, then that leader and other nodes, have selected         other as a leader. This way, finally the final leader is elected.
[[File:rank12.png]]


[[File:graph00.png]]

[[File:graph01.png]]


==Gragh Drawing Program1==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
nx.barbell_graph(4,2)
G=nx.barbell_graph(4,2)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:
[[File:Graph003.png]]


==Gragh Drawing Program2==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
nx.barbell_graph(4,3)
G=nx.barbell_graph(4,3)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:
[[File:Graph004.png|600px]]

==Gragh Drawing Program3==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
nx.barbell_graph(5,3)
G=nx.barbell_graph(5,3)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:
[[File:Graph005.png]]

==Complete Graph==
Complete graph is a graph, wherein, each node is connected to each other nodes in a graph.

&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.complete_graph(4)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:
[[File:completegraph001.png]]

==Cycle graph==

&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.cycle_graph(5)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:
[[File:cyclegraph1.png]]

==Ladder graph==

&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.ladder_graph(5)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:
[[File:laddergraph.png]]


==Path Graph==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.path_graph(6)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:
[[File:pathgraph.png]]

=Collatz Conjecture=
Taught by Sudarshan sir and Amit sir, and Edited by Ms. Ami Tusharkant Choksi

If a number is even, divide it by ''2'', if it is odd, make multiply it by ''3'' and add ''1'', till you get ''1''. This simple problem is called, ''Collatz Conjecture''. 

[[File:collatz1.png]]

[[File:collatz2.png]]

[[File:collatz3.png]]

[[File:collatz4.png]]

[[File:collatz5.png]]

Number is bigger doesn't mean more iterations are required. One can notice, from the output of the following program. 



The program to implement the same is as follows:
==Program==
&lt;pre&gt;
#collatz conjecture
#if num is even, divide it by 2
#if num is odd, new number is equal to 3n+1


def checkNum(num):
    iterations=1
    while(num!=1):
        if(num%2==0):
            num=int(num/2)            
        else:
            num = 3*num+1
        iterations+=1
        

    print(num,iterations)


#checkNum(12)#Output: 1 10
#checkNum(26)#Output: 1 11
checkNum(2000)#Output: 1 113
&lt;/pre&gt;

&lt;pre&gt;

#recursive approach

def checkNum(num):
    if num==1:
        return 1
    elif num%2==0:
        return checkNum(num/2)+1
    else:
        return checkNum(3*num +1)+1


output:
checkNum(26)
Out[27]: 11
checkNum(5000)
Out[28]: 29
&lt;/pre&gt;

==Program adding statement to print all iterations==
&lt;pre&gt;
def checkNum(num):
    iterations=1
    while(num!=1):
        if(num%2==0):
            num=int(num/2)            
        else:
            num = 3*num+1
        print(iterations,&quot;:&quot;,num)
        iterations+=1
        

    print(num,iterations)
&lt;/pre&gt;
==Output==
===For checkNum(2000)===
&lt;pre&gt;
1 : 1000
2 : 500
3 : 250
4 : 125
5 : 376
6 : 188
7 : 94
8 : 47
9 : 142
10 : 71
11 : 214
12 : 107
13 : 322
14 : 161
15 : 484
16 : 242
17 : 121
18 : 364
19 : 182
20 : 91
21 : 274
22 : 137
23 : 412
24 : 206
25 : 103
26 : 310
27 : 155
28 : 466
29 : 233
30 : 700
31 : 350
32 : 175
33 : 526
34 : 263
35 : 790
36 : 395
37 : 1186
38 : 593
39 : 1780
40 : 890
41 : 445
42 : 1336
43 : 668
44 : 334
45 : 167
46 : 502
47 : 251
48 : 754
49 : 377
50 : 1132
51 : 566
52 : 283
53 : 850
54 : 425
55 : 1276
56 : 638
57 : 319
58 : 958
59 : 479
60 : 1438
61 : 719
62 : 2158
63 : 1079
64 : 3238
65 : 1619
66 : 4858
67 : 2429
68 : 7288
69 : 3644
70 : 1822
71 : 911
72 : 2734
73 : 1367
74 : 4102
75 : 2051
76 : 6154
77 : 3077
78 : 9232
79 : 4616
80 : 2308
81 : 1154
82 : 577
83 : 1732
84 : 866
85 : 433
86 : 1300
87 : 650
88 : 325
89 : 976
90 : 488
91 : 244
92 : 122
93 : 61
94 : 184
95 : 92
96 : 46
97 : 23
98 : 70
99 : 35
100 : 106
101 : 53
102 : 160
103 : 80
104 : 40
105 : 20
106 : 10
107 : 5
108 : 16
109 : 8
110 : 4
111 : 2
112 : 1
1 113
&lt;/pre&gt;

===For checkNum(5000)===
&lt;pre&gt;
1 : 2500
2 : 1250
3 : 625
4 : 1876
5 : 938
6 : 469
7 : 1408
8 : 704
9 : 352
10 : 176
11 : 88
12 : 44
13 : 22
14 : 11
15 : 34
16 : 17
17 : 52
18 : 26
19 : 13
20 : 40
21 : 20
22 : 10
23 : 5
24 : 16
25 : 8
26 : 4
27 : 2
28 : 1
1 29
&lt;/pre&gt;
===For checkNum(25000000)===
&lt;pre&gt;
1 : 12500000
2 : 6250000
3 : 3125000
4 : 1562500
5 : 781250
6 : 390625
7 : 1171876
8 : 585938
9 : 292969
10 : 878908
11 : 439454
12 : 219727
13 : 659182
14 : 329591
15 : 988774
16 : 494387
17 : 1483162
18 : 741581
19 : 2224744
20 : 1112372
21 : 556186
22 : 278093
23 : 834280
24 : 417140
25 : 208570
26 : 104285
27 : 312856
28 : 156428
29 : 78214
30 : 39107
31 : 117322
32 : 58661
33 : 175984
34 : 87992
35 : 43996
36 : 21998
37 : 10999
38 : 32998
39 : 16499
40 : 49498
41 : 24749
42 : 74248
43 : 37124
44 : 18562
45 : 9281
46 : 27844
47 : 13922
48 : 6961
49 : 20884
50 : 10442
51 : 5221
52 : 15664
53 : 7832
54 : 3916
55 : 1958
56 : 979
57 : 2938
58 : 1469
59 : 4408
60 : 2204
61 : 1102
62 : 551
63 : 1654
64 : 827
65 : 2482
66 : 1241
67 : 3724
68 : 1862
69 : 931
70 : 2794
71 : 1397
72 : 4192
73 : 2096
74 : 1048
75 : 524
76 : 262
77 : 131
78 : 394
79 : 197
80 : 592
81 : 296
82 : 148
83 : 74
84 : 37
85 : 112
86 : 56
87 : 28
88 : 14
89 : 7
90 : 22
91 : 11
92 : 34
93 : 17
94 : 52
95 : 26
96 : 13
97 : 40
98 : 20
99 : 10
100 : 5
101 : 16
102 : 8
103 : 4
104 : 2
105 : 1
1 106
&lt;/pre&gt;

Happy Life ahead!!!
[[File:end1.png]]</text>
      <sha1>fp64v7g6awzqanm5gi1iz3my4syjnny</sha1>
    </revision>
    <revision>
      <id>4389</id>
      <parentid>4388</parentid>
      <timestamp>2018-10-16T04:06:44Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* Page rank algorithm */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="7719">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_12 Contributors of this page]

=Page Rank - How does Google Work=
One web page is having link to other page, that is a page is referring to other page. Google uses ''Page Rank'' algorithm to choose which page should be displayed first.

If we have network, connections as below:
[[File:rank0.png]]

We want to pick a leader out of all these nodes. How to pick a leader?  Why to elect a leader? It is because we want to find the super power of available nodes.                     
[[File:rank1.png]]

For example, the application wherein, we want to find the most impressive person of the  few ones. How to decide it? As shown in below figure, each node will communicate with other, randomly, we implement the count for each node, how many times, the particular node is being visited.
[[File:rank2.png]]

[[#Top]]

As shown in following, figure, all nodes are visited and each node is marked with the 
number i.e.number of times the node is visited.
[[File:rank3.png]]

The node with the maximum count, becomes the winner. Here, node with 120 count in figure 
below, is the winner. i.e. The person with 120 count in the figure is the most impressive 
person in the community being considered.
[[File:rank4.png]]

[[File:rank5.png]]

[[File:rank6.png]]

[[File:rank7.png]]


[[File:rank8.png]]

[[#Top]]

Google selects the page rank in this matter. Each web page is connected to other web page with web links. To a page, maximum link is there, that will be put on top results in Google search results.
[[File:rank9.png]]

Google uses web crawler. The crawler takes the random walk on the www network and rank the web sites.
[[File:rank10.png]]

This way Google ranks the pages and displays search results, according to page rank.
[[File:rank11.png]]

e.g.we search for ''mysore city''. Google has 10,000 results. But it displays the results in the sequence of page rank of search results, As shown in figure below.
[[File:mysore.png]]

[[#Top]]

==Page rank algorithm ==
As shown in beautiful figure below, few nodes combinely selected one as the leader, then that leader and other nodes, have selected         other as a leader. This way, finally the final leader is elected.
[[File:rank12.png|600px]]


[[File:graph00.png|600px]]

[[File:graph01.png|600px]]

==Gragh Drawing Program1==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
nx.barbell_graph(4,2)
G=nx.barbell_graph(4,2)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:
[[File:Graph003.png]]


==Gragh Drawing Program2==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
nx.barbell_graph(4,3)
G=nx.barbell_graph(4,3)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:
[[File:Graph004.png|600px]]

==Gragh Drawing Program3==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
nx.barbell_graph(5,3)
G=nx.barbell_graph(5,3)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:
[[File:Graph005.png]]

==Complete Graph==
Complete graph is a graph, wherein, each node is connected to each other nodes in a graph.

&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.complete_graph(4)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:
[[File:completegraph001.png]]

==Cycle graph==

&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.cycle_graph(5)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:
[[File:cyclegraph1.png]]

==Ladder graph==

&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.ladder_graph(5)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:
[[File:laddergraph.png]]


==Path Graph==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.path_graph(6)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:
[[File:pathgraph.png]]

=Collatz Conjecture=
Taught by Sudarshan sir and Amit sir, and Edited by Ms. Ami Tusharkant Choksi

If a number is even, divide it by ''2'', if it is odd, make multiply it by ''3'' and add ''1'', till you get ''1''. This simple problem is called, ''Collatz Conjecture''. 

[[File:collatz1.png]]

[[File:collatz2.png]]

[[File:collatz3.png]]

[[File:collatz4.png]]

[[File:collatz5.png]]

Number is bigger doesn't mean more iterations are required. One can notice, from the output of the following program. 



The program to implement the same is as follows:
==Program==
&lt;pre&gt;
#collatz conjecture
#if num is even, divide it by 2
#if num is odd, new number is equal to 3n+1


def checkNum(num):
    iterations=1
    while(num!=1):
        if(num%2==0):
            num=int(num/2)            
        else:
            num = 3*num+1
        iterations+=1
        

    print(num,iterations)


#checkNum(12)#Output: 1 10
#checkNum(26)#Output: 1 11
checkNum(2000)#Output: 1 113
&lt;/pre&gt;

&lt;pre&gt;

#recursive approach

def checkNum(num):
    if num==1:
        return 1
    elif num%2==0:
        return checkNum(num/2)+1
    else:
        return checkNum(3*num +1)+1


output:
checkNum(26)
Out[27]: 11
checkNum(5000)
Out[28]: 29
&lt;/pre&gt;

==Program adding statement to print all iterations==
&lt;pre&gt;
def checkNum(num):
    iterations=1
    while(num!=1):
        if(num%2==0):
            num=int(num/2)            
        else:
            num = 3*num+1
        print(iterations,&quot;:&quot;,num)
        iterations+=1
        

    print(num,iterations)
&lt;/pre&gt;
==Output==
===For checkNum(2000)===
&lt;pre&gt;
1 : 1000
2 : 500
3 : 250
4 : 125
5 : 376
6 : 188
7 : 94
8 : 47
9 : 142
10 : 71
11 : 214
12 : 107
13 : 322
14 : 161
15 : 484
16 : 242
17 : 121
18 : 364
19 : 182
20 : 91
21 : 274
22 : 137
23 : 412
24 : 206
25 : 103
26 : 310
27 : 155
28 : 466
29 : 233
30 : 700
31 : 350
32 : 175
33 : 526
34 : 263
35 : 790
36 : 395
37 : 1186
38 : 593
39 : 1780
40 : 890
41 : 445
42 : 1336
43 : 668
44 : 334
45 : 167
46 : 502
47 : 251
48 : 754
49 : 377
50 : 1132
51 : 566
52 : 283
53 : 850
54 : 425
55 : 1276
56 : 638
57 : 319
58 : 958
59 : 479
60 : 1438
61 : 719
62 : 2158
63 : 1079
64 : 3238
65 : 1619
66 : 4858
67 : 2429
68 : 7288
69 : 3644
70 : 1822
71 : 911
72 : 2734
73 : 1367
74 : 4102
75 : 2051
76 : 6154
77 : 3077
78 : 9232
79 : 4616
80 : 2308
81 : 1154
82 : 577
83 : 1732
84 : 866
85 : 433
86 : 1300
87 : 650
88 : 325
89 : 976
90 : 488
91 : 244
92 : 122
93 : 61
94 : 184
95 : 92
96 : 46
97 : 23
98 : 70
99 : 35
100 : 106
101 : 53
102 : 160
103 : 80
104 : 40
105 : 20
106 : 10
107 : 5
108 : 16
109 : 8
110 : 4
111 : 2
112 : 1
1 113
&lt;/pre&gt;

===For checkNum(5000)===
&lt;pre&gt;
1 : 2500
2 : 1250
3 : 625
4 : 1876
5 : 938
6 : 469
7 : 1408
8 : 704
9 : 352
10 : 176
11 : 88
12 : 44
13 : 22
14 : 11
15 : 34
16 : 17
17 : 52
18 : 26
19 : 13
20 : 40
21 : 20
22 : 10
23 : 5
24 : 16
25 : 8
26 : 4
27 : 2
28 : 1
1 29
&lt;/pre&gt;
===For checkNum(25000000)===
&lt;pre&gt;
1 : 12500000
2 : 6250000
3 : 3125000
4 : 1562500
5 : 781250
6 : 390625
7 : 1171876
8 : 585938
9 : 292969
10 : 878908
11 : 439454
12 : 219727
13 : 659182
14 : 329591
15 : 988774
16 : 494387
17 : 1483162
18 : 741581
19 : 2224744
20 : 1112372
21 : 556186
22 : 278093
23 : 834280
24 : 417140
25 : 208570
26 : 104285
27 : 312856
28 : 156428
29 : 78214
30 : 39107
31 : 117322
32 : 58661
33 : 175984
34 : 87992
35 : 43996
36 : 21998
37 : 10999
38 : 32998
39 : 16499
40 : 49498
41 : 24749
42 : 74248
43 : 37124
44 : 18562
45 : 9281
46 : 27844
47 : 13922
48 : 6961
49 : 20884
50 : 10442
51 : 5221
52 : 15664
53 : 7832
54 : 3916
55 : 1958
56 : 979
57 : 2938
58 : 1469
59 : 4408
60 : 2204
61 : 1102
62 : 551
63 : 1654
64 : 827
65 : 2482
66 : 1241
67 : 3724
68 : 1862
69 : 931
70 : 2794
71 : 1397
72 : 4192
73 : 2096
74 : 1048
75 : 524
76 : 262
77 : 131
78 : 394
79 : 197
80 : 592
81 : 296
82 : 148
83 : 74
84 : 37
85 : 112
86 : 56
87 : 28
88 : 14
89 : 7
90 : 22
91 : 11
92 : 34
93 : 17
94 : 52
95 : 26
96 : 13
97 : 40
98 : 20
99 : 10
100 : 5
101 : 16
102 : 8
103 : 4
104 : 2
105 : 1
1 106
&lt;/pre&gt;

Happy Life ahead!!!
[[File:end1.png]]</text>
      <sha1>8x7soxbdb98feoff9wox71xbguhl6ed</sha1>
    </revision>
    <revision>
      <id>4390</id>
      <parentid>4389</parentid>
      <timestamp>2018-10-16T04:07:00Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* Gragh Drawing Program1 */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="7724">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_12 Contributors of this page]

=Page Rank - How does Google Work=
One web page is having link to other page, that is a page is referring to other page. Google uses ''Page Rank'' algorithm to choose which page should be displayed first.

If we have network, connections as below:
[[File:rank0.png]]

We want to pick a leader out of all these nodes. How to pick a leader?  Why to elect a leader? It is because we want to find the super power of available nodes.                     
[[File:rank1.png]]

For example, the application wherein, we want to find the most impressive person of the  few ones. How to decide it? As shown in below figure, each node will communicate with other, randomly, we implement the count for each node, how many times, the particular node is being visited.
[[File:rank2.png]]

[[#Top]]

As shown in following, figure, all nodes are visited and each node is marked with the 
number i.e.number of times the node is visited.
[[File:rank3.png]]

The node with the maximum count, becomes the winner. Here, node with 120 count in figure 
below, is the winner. i.e. The person with 120 count in the figure is the most impressive 
person in the community being considered.
[[File:rank4.png]]

[[File:rank5.png]]

[[File:rank6.png]]

[[File:rank7.png]]


[[File:rank8.png]]

[[#Top]]

Google selects the page rank in this matter. Each web page is connected to other web page with web links. To a page, maximum link is there, that will be put on top results in Google search results.
[[File:rank9.png]]

Google uses web crawler. The crawler takes the random walk on the www network and rank the web sites.
[[File:rank10.png]]

This way Google ranks the pages and displays search results, according to page rank.
[[File:rank11.png]]

e.g.we search for ''mysore city''. Google has 10,000 results. But it displays the results in the sequence of page rank of search results, As shown in figure below.
[[File:mysore.png]]

[[#Top]]

==Page rank algorithm ==
As shown in beautiful figure below, few nodes combinely selected one as the leader, then that leader and other nodes, have selected         other as a leader. This way, finally the final leader is elected.
[[File:rank12.png|600px]]


[[File:graph00.png|600px]]

[[File:graph01.png|600px]]

==Gragh Drawing Program1==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
nx.barbell_graph(4,2)
G=nx.barbell_graph(4,2)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:
[[File:Graph003.png|600px]]

==Gragh Drawing Program2==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
nx.barbell_graph(4,3)
G=nx.barbell_graph(4,3)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:
[[File:Graph004.png|600px]]

==Gragh Drawing Program3==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
nx.barbell_graph(5,3)
G=nx.barbell_graph(5,3)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:
[[File:Graph005.png]]

==Complete Graph==
Complete graph is a graph, wherein, each node is connected to each other nodes in a graph.

&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.complete_graph(4)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:
[[File:completegraph001.png]]

==Cycle graph==

&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.cycle_graph(5)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:
[[File:cyclegraph1.png]]

==Ladder graph==

&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.ladder_graph(5)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:
[[File:laddergraph.png]]


==Path Graph==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.path_graph(6)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:
[[File:pathgraph.png]]

=Collatz Conjecture=
Taught by Sudarshan sir and Amit sir, and Edited by Ms. Ami Tusharkant Choksi

If a number is even, divide it by ''2'', if it is odd, make multiply it by ''3'' and add ''1'', till you get ''1''. This simple problem is called, ''Collatz Conjecture''. 

[[File:collatz1.png]]

[[File:collatz2.png]]

[[File:collatz3.png]]

[[File:collatz4.png]]

[[File:collatz5.png]]

Number is bigger doesn't mean more iterations are required. One can notice, from the output of the following program. 



The program to implement the same is as follows:
==Program==
&lt;pre&gt;
#collatz conjecture
#if num is even, divide it by 2
#if num is odd, new number is equal to 3n+1


def checkNum(num):
    iterations=1
    while(num!=1):
        if(num%2==0):
            num=int(num/2)            
        else:
            num = 3*num+1
        iterations+=1
        

    print(num,iterations)


#checkNum(12)#Output: 1 10
#checkNum(26)#Output: 1 11
checkNum(2000)#Output: 1 113
&lt;/pre&gt;

&lt;pre&gt;

#recursive approach

def checkNum(num):
    if num==1:
        return 1
    elif num%2==0:
        return checkNum(num/2)+1
    else:
        return checkNum(3*num +1)+1


output:
checkNum(26)
Out[27]: 11
checkNum(5000)
Out[28]: 29
&lt;/pre&gt;

==Program adding statement to print all iterations==
&lt;pre&gt;
def checkNum(num):
    iterations=1
    while(num!=1):
        if(num%2==0):
            num=int(num/2)            
        else:
            num = 3*num+1
        print(iterations,&quot;:&quot;,num)
        iterations+=1
        

    print(num,iterations)
&lt;/pre&gt;
==Output==
===For checkNum(2000)===
&lt;pre&gt;
1 : 1000
2 : 500
3 : 250
4 : 125
5 : 376
6 : 188
7 : 94
8 : 47
9 : 142
10 : 71
11 : 214
12 : 107
13 : 322
14 : 161
15 : 484
16 : 242
17 : 121
18 : 364
19 : 182
20 : 91
21 : 274
22 : 137
23 : 412
24 : 206
25 : 103
26 : 310
27 : 155
28 : 466
29 : 233
30 : 700
31 : 350
32 : 175
33 : 526
34 : 263
35 : 790
36 : 395
37 : 1186
38 : 593
39 : 1780
40 : 890
41 : 445
42 : 1336
43 : 668
44 : 334
45 : 167
46 : 502
47 : 251
48 : 754
49 : 377
50 : 1132
51 : 566
52 : 283
53 : 850
54 : 425
55 : 1276
56 : 638
57 : 319
58 : 958
59 : 479
60 : 1438
61 : 719
62 : 2158
63 : 1079
64 : 3238
65 : 1619
66 : 4858
67 : 2429
68 : 7288
69 : 3644
70 : 1822
71 : 911
72 : 2734
73 : 1367
74 : 4102
75 : 2051
76 : 6154
77 : 3077
78 : 9232
79 : 4616
80 : 2308
81 : 1154
82 : 577
83 : 1732
84 : 866
85 : 433
86 : 1300
87 : 650
88 : 325
89 : 976
90 : 488
91 : 244
92 : 122
93 : 61
94 : 184
95 : 92
96 : 46
97 : 23
98 : 70
99 : 35
100 : 106
101 : 53
102 : 160
103 : 80
104 : 40
105 : 20
106 : 10
107 : 5
108 : 16
109 : 8
110 : 4
111 : 2
112 : 1
1 113
&lt;/pre&gt;

===For checkNum(5000)===
&lt;pre&gt;
1 : 2500
2 : 1250
3 : 625
4 : 1876
5 : 938
6 : 469
7 : 1408
8 : 704
9 : 352
10 : 176
11 : 88
12 : 44
13 : 22
14 : 11
15 : 34
16 : 17
17 : 52
18 : 26
19 : 13
20 : 40
21 : 20
22 : 10
23 : 5
24 : 16
25 : 8
26 : 4
27 : 2
28 : 1
1 29
&lt;/pre&gt;
===For checkNum(25000000)===
&lt;pre&gt;
1 : 12500000
2 : 6250000
3 : 3125000
4 : 1562500
5 : 781250
6 : 390625
7 : 1171876
8 : 585938
9 : 292969
10 : 878908
11 : 439454
12 : 219727
13 : 659182
14 : 329591
15 : 988774
16 : 494387
17 : 1483162
18 : 741581
19 : 2224744
20 : 1112372
21 : 556186
22 : 278093
23 : 834280
24 : 417140
25 : 208570
26 : 104285
27 : 312856
28 : 156428
29 : 78214
30 : 39107
31 : 117322
32 : 58661
33 : 175984
34 : 87992
35 : 43996
36 : 21998
37 : 10999
38 : 32998
39 : 16499
40 : 49498
41 : 24749
42 : 74248
43 : 37124
44 : 18562
45 : 9281
46 : 27844
47 : 13922
48 : 6961
49 : 20884
50 : 10442
51 : 5221
52 : 15664
53 : 7832
54 : 3916
55 : 1958
56 : 979
57 : 2938
58 : 1469
59 : 4408
60 : 2204
61 : 1102
62 : 551
63 : 1654
64 : 827
65 : 2482
66 : 1241
67 : 3724
68 : 1862
69 : 931
70 : 2794
71 : 1397
72 : 4192
73 : 2096
74 : 1048
75 : 524
76 : 262
77 : 131
78 : 394
79 : 197
80 : 592
81 : 296
82 : 148
83 : 74
84 : 37
85 : 112
86 : 56
87 : 28
88 : 14
89 : 7
90 : 22
91 : 11
92 : 34
93 : 17
94 : 52
95 : 26
96 : 13
97 : 40
98 : 20
99 : 10
100 : 5
101 : 16
102 : 8
103 : 4
104 : 2
105 : 1
1 106
&lt;/pre&gt;

Happy Life ahead!!!
[[File:end1.png]]</text>
      <sha1>eg8ydg6qtdj3fl4o95pgq9uldw4n1gh</sha1>
    </revision>
    <revision>
      <id>4391</id>
      <parentid>4390</parentid>
      <timestamp>2018-10-16T04:07:14Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* Gragh Drawing Program1 */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="7725">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_12 Contributors of this page]

=Page Rank - How does Google Work=
One web page is having link to other page, that is a page is referring to other page. Google uses ''Page Rank'' algorithm to choose which page should be displayed first.

If we have network, connections as below:
[[File:rank0.png]]

We want to pick a leader out of all these nodes. How to pick a leader?  Why to elect a leader? It is because we want to find the super power of available nodes.                     
[[File:rank1.png]]

For example, the application wherein, we want to find the most impressive person of the  few ones. How to decide it? As shown in below figure, each node will communicate with other, randomly, we implement the count for each node, how many times, the particular node is being visited.
[[File:rank2.png]]

[[#Top]]

As shown in following, figure, all nodes are visited and each node is marked with the 
number i.e.number of times the node is visited.
[[File:rank3.png]]

The node with the maximum count, becomes the winner. Here, node with 120 count in figure 
below, is the winner. i.e. The person with 120 count in the figure is the most impressive 
person in the community being considered.
[[File:rank4.png]]

[[File:rank5.png]]

[[File:rank6.png]]

[[File:rank7.png]]


[[File:rank8.png]]

[[#Top]]

Google selects the page rank in this matter. Each web page is connected to other web page with web links. To a page, maximum link is there, that will be put on top results in Google search results.
[[File:rank9.png]]

Google uses web crawler. The crawler takes the random walk on the www network and rank the web sites.
[[File:rank10.png]]

This way Google ranks the pages and displays search results, according to page rank.
[[File:rank11.png]]

e.g.we search for ''mysore city''. Google has 10,000 results. But it displays the results in the sequence of page rank of search results, As shown in figure below.
[[File:mysore.png]]

[[#Top]]

==Page rank algorithm ==
As shown in beautiful figure below, few nodes combinely selected one as the leader, then that leader and other nodes, have selected         other as a leader. This way, finally the final leader is elected.
[[File:rank12.png|600px]]


[[File:graph00.png|600px]]

[[File:graph01.png|600px]]

==Gragh Drawing Program1==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
nx.barbell_graph(4,2)
G=nx.barbell_graph(4,2)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:Graph003.png|600px]]

==Gragh Drawing Program2==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
nx.barbell_graph(4,3)
G=nx.barbell_graph(4,3)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:
[[File:Graph004.png|600px]]

==Gragh Drawing Program3==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
nx.barbell_graph(5,3)
G=nx.barbell_graph(5,3)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:
[[File:Graph005.png]]

==Complete Graph==
Complete graph is a graph, wherein, each node is connected to each other nodes in a graph.

&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.complete_graph(4)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:
[[File:completegraph001.png]]

==Cycle graph==

&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.cycle_graph(5)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:
[[File:cyclegraph1.png]]

==Ladder graph==

&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.ladder_graph(5)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:
[[File:laddergraph.png]]


==Path Graph==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.path_graph(6)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:
[[File:pathgraph.png]]

=Collatz Conjecture=
Taught by Sudarshan sir and Amit sir, and Edited by Ms. Ami Tusharkant Choksi

If a number is even, divide it by ''2'', if it is odd, make multiply it by ''3'' and add ''1'', till you get ''1''. This simple problem is called, ''Collatz Conjecture''. 

[[File:collatz1.png]]

[[File:collatz2.png]]

[[File:collatz3.png]]

[[File:collatz4.png]]

[[File:collatz5.png]]

Number is bigger doesn't mean more iterations are required. One can notice, from the output of the following program. 



The program to implement the same is as follows:
==Program==
&lt;pre&gt;
#collatz conjecture
#if num is even, divide it by 2
#if num is odd, new number is equal to 3n+1


def checkNum(num):
    iterations=1
    while(num!=1):
        if(num%2==0):
            num=int(num/2)            
        else:
            num = 3*num+1
        iterations+=1
        

    print(num,iterations)


#checkNum(12)#Output: 1 10
#checkNum(26)#Output: 1 11
checkNum(2000)#Output: 1 113
&lt;/pre&gt;

&lt;pre&gt;

#recursive approach

def checkNum(num):
    if num==1:
        return 1
    elif num%2==0:
        return checkNum(num/2)+1
    else:
        return checkNum(3*num +1)+1


output:
checkNum(26)
Out[27]: 11
checkNum(5000)
Out[28]: 29
&lt;/pre&gt;

==Program adding statement to print all iterations==
&lt;pre&gt;
def checkNum(num):
    iterations=1
    while(num!=1):
        if(num%2==0):
            num=int(num/2)            
        else:
            num = 3*num+1
        print(iterations,&quot;:&quot;,num)
        iterations+=1
        

    print(num,iterations)
&lt;/pre&gt;
==Output==
===For checkNum(2000)===
&lt;pre&gt;
1 : 1000
2 : 500
3 : 250
4 : 125
5 : 376
6 : 188
7 : 94
8 : 47
9 : 142
10 : 71
11 : 214
12 : 107
13 : 322
14 : 161
15 : 484
16 : 242
17 : 121
18 : 364
19 : 182
20 : 91
21 : 274
22 : 137
23 : 412
24 : 206
25 : 103
26 : 310
27 : 155
28 : 466
29 : 233
30 : 700
31 : 350
32 : 175
33 : 526
34 : 263
35 : 790
36 : 395
37 : 1186
38 : 593
39 : 1780
40 : 890
41 : 445
42 : 1336
43 : 668
44 : 334
45 : 167
46 : 502
47 : 251
48 : 754
49 : 377
50 : 1132
51 : 566
52 : 283
53 : 850
54 : 425
55 : 1276
56 : 638
57 : 319
58 : 958
59 : 479
60 : 1438
61 : 719
62 : 2158
63 : 1079
64 : 3238
65 : 1619
66 : 4858
67 : 2429
68 : 7288
69 : 3644
70 : 1822
71 : 911
72 : 2734
73 : 1367
74 : 4102
75 : 2051
76 : 6154
77 : 3077
78 : 9232
79 : 4616
80 : 2308
81 : 1154
82 : 577
83 : 1732
84 : 866
85 : 433
86 : 1300
87 : 650
88 : 325
89 : 976
90 : 488
91 : 244
92 : 122
93 : 61
94 : 184
95 : 92
96 : 46
97 : 23
98 : 70
99 : 35
100 : 106
101 : 53
102 : 160
103 : 80
104 : 40
105 : 20
106 : 10
107 : 5
108 : 16
109 : 8
110 : 4
111 : 2
112 : 1
1 113
&lt;/pre&gt;

===For checkNum(5000)===
&lt;pre&gt;
1 : 2500
2 : 1250
3 : 625
4 : 1876
5 : 938
6 : 469
7 : 1408
8 : 704
9 : 352
10 : 176
11 : 88
12 : 44
13 : 22
14 : 11
15 : 34
16 : 17
17 : 52
18 : 26
19 : 13
20 : 40
21 : 20
22 : 10
23 : 5
24 : 16
25 : 8
26 : 4
27 : 2
28 : 1
1 29
&lt;/pre&gt;
===For checkNum(25000000)===
&lt;pre&gt;
1 : 12500000
2 : 6250000
3 : 3125000
4 : 1562500
5 : 781250
6 : 390625
7 : 1171876
8 : 585938
9 : 292969
10 : 878908
11 : 439454
12 : 219727
13 : 659182
14 : 329591
15 : 988774
16 : 494387
17 : 1483162
18 : 741581
19 : 2224744
20 : 1112372
21 : 556186
22 : 278093
23 : 834280
24 : 417140
25 : 208570
26 : 104285
27 : 312856
28 : 156428
29 : 78214
30 : 39107
31 : 117322
32 : 58661
33 : 175984
34 : 87992
35 : 43996
36 : 21998
37 : 10999
38 : 32998
39 : 16499
40 : 49498
41 : 24749
42 : 74248
43 : 37124
44 : 18562
45 : 9281
46 : 27844
47 : 13922
48 : 6961
49 : 20884
50 : 10442
51 : 5221
52 : 15664
53 : 7832
54 : 3916
55 : 1958
56 : 979
57 : 2938
58 : 1469
59 : 4408
60 : 2204
61 : 1102
62 : 551
63 : 1654
64 : 827
65 : 2482
66 : 1241
67 : 3724
68 : 1862
69 : 931
70 : 2794
71 : 1397
72 : 4192
73 : 2096
74 : 1048
75 : 524
76 : 262
77 : 131
78 : 394
79 : 197
80 : 592
81 : 296
82 : 148
83 : 74
84 : 37
85 : 112
86 : 56
87 : 28
88 : 14
89 : 7
90 : 22
91 : 11
92 : 34
93 : 17
94 : 52
95 : 26
96 : 13
97 : 40
98 : 20
99 : 10
100 : 5
101 : 16
102 : 8
103 : 4
104 : 2
105 : 1
1 106
&lt;/pre&gt;

Happy Life ahead!!!
[[File:end1.png]]</text>
      <sha1>0iq9f3imm9yhh93bdacyx6e34m0zw0z</sha1>
    </revision>
    <revision>
      <id>4392</id>
      <parentid>4391</parentid>
      <timestamp>2018-10-16T04:07:28Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* Gragh Drawing Program3 */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="7731">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_12 Contributors of this page]

=Page Rank - How does Google Work=
One web page is having link to other page, that is a page is referring to other page. Google uses ''Page Rank'' algorithm to choose which page should be displayed first.

If we have network, connections as below:
[[File:rank0.png]]

We want to pick a leader out of all these nodes. How to pick a leader?  Why to elect a leader? It is because we want to find the super power of available nodes.                     
[[File:rank1.png]]

For example, the application wherein, we want to find the most impressive person of the  few ones. How to decide it? As shown in below figure, each node will communicate with other, randomly, we implement the count for each node, how many times, the particular node is being visited.
[[File:rank2.png]]

[[#Top]]

As shown in following, figure, all nodes are visited and each node is marked with the 
number i.e.number of times the node is visited.
[[File:rank3.png]]

The node with the maximum count, becomes the winner. Here, node with 120 count in figure 
below, is the winner. i.e. The person with 120 count in the figure is the most impressive 
person in the community being considered.
[[File:rank4.png]]

[[File:rank5.png]]

[[File:rank6.png]]

[[File:rank7.png]]


[[File:rank8.png]]

[[#Top]]

Google selects the page rank in this matter. Each web page is connected to other web page with web links. To a page, maximum link is there, that will be put on top results in Google search results.
[[File:rank9.png]]

Google uses web crawler. The crawler takes the random walk on the www network and rank the web sites.
[[File:rank10.png]]

This way Google ranks the pages and displays search results, according to page rank.
[[File:rank11.png]]

e.g.we search for ''mysore city''. Google has 10,000 results. But it displays the results in the sequence of page rank of search results, As shown in figure below.
[[File:mysore.png]]

[[#Top]]

==Page rank algorithm ==
As shown in beautiful figure below, few nodes combinely selected one as the leader, then that leader and other nodes, have selected         other as a leader. This way, finally the final leader is elected.
[[File:rank12.png|600px]]


[[File:graph00.png|600px]]

[[File:graph01.png|600px]]

==Gragh Drawing Program1==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
nx.barbell_graph(4,2)
G=nx.barbell_graph(4,2)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:Graph003.png|600px]]

==Gragh Drawing Program2==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
nx.barbell_graph(4,3)
G=nx.barbell_graph(4,3)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:
[[File:Graph004.png|600px]]

==Gragh Drawing Program3==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
nx.barbell_graph(5,3)
G=nx.barbell_graph(5,3)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:
[[File:Graph005.png|600px]]

==Complete Graph==
Complete graph is a graph, wherein, each node is connected to each other nodes in a graph.

&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.complete_graph(4)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:
[[File:completegraph001.png]]

==Cycle graph==

&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.cycle_graph(5)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:
[[File:cyclegraph1.png]]

==Ladder graph==

&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.ladder_graph(5)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:
[[File:laddergraph.png]]


==Path Graph==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.path_graph(6)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:
[[File:pathgraph.png]]

=Collatz Conjecture=
Taught by Sudarshan sir and Amit sir, and Edited by Ms. Ami Tusharkant Choksi

If a number is even, divide it by ''2'', if it is odd, make multiply it by ''3'' and add ''1'', till you get ''1''. This simple problem is called, ''Collatz Conjecture''. 

[[File:collatz1.png]]

[[File:collatz2.png]]

[[File:collatz3.png]]

[[File:collatz4.png]]

[[File:collatz5.png]]

Number is bigger doesn't mean more iterations are required. One can notice, from the output of the following program. 



The program to implement the same is as follows:
==Program==
&lt;pre&gt;
#collatz conjecture
#if num is even, divide it by 2
#if num is odd, new number is equal to 3n+1


def checkNum(num):
    iterations=1
    while(num!=1):
        if(num%2==0):
            num=int(num/2)            
        else:
            num = 3*num+1
        iterations+=1
        

    print(num,iterations)


#checkNum(12)#Output: 1 10
#checkNum(26)#Output: 1 11
checkNum(2000)#Output: 1 113
&lt;/pre&gt;

&lt;pre&gt;

#recursive approach

def checkNum(num):
    if num==1:
        return 1
    elif num%2==0:
        return checkNum(num/2)+1
    else:
        return checkNum(3*num +1)+1


output:
checkNum(26)
Out[27]: 11
checkNum(5000)
Out[28]: 29
&lt;/pre&gt;

==Program adding statement to print all iterations==
&lt;pre&gt;
def checkNum(num):
    iterations=1
    while(num!=1):
        if(num%2==0):
            num=int(num/2)            
        else:
            num = 3*num+1
        print(iterations,&quot;:&quot;,num)
        iterations+=1
        

    print(num,iterations)
&lt;/pre&gt;
==Output==
===For checkNum(2000)===
&lt;pre&gt;
1 : 1000
2 : 500
3 : 250
4 : 125
5 : 376
6 : 188
7 : 94
8 : 47
9 : 142
10 : 71
11 : 214
12 : 107
13 : 322
14 : 161
15 : 484
16 : 242
17 : 121
18 : 364
19 : 182
20 : 91
21 : 274
22 : 137
23 : 412
24 : 206
25 : 103
26 : 310
27 : 155
28 : 466
29 : 233
30 : 700
31 : 350
32 : 175
33 : 526
34 : 263
35 : 790
36 : 395
37 : 1186
38 : 593
39 : 1780
40 : 890
41 : 445
42 : 1336
43 : 668
44 : 334
45 : 167
46 : 502
47 : 251
48 : 754
49 : 377
50 : 1132
51 : 566
52 : 283
53 : 850
54 : 425
55 : 1276
56 : 638
57 : 319
58 : 958
59 : 479
60 : 1438
61 : 719
62 : 2158
63 : 1079
64 : 3238
65 : 1619
66 : 4858
67 : 2429
68 : 7288
69 : 3644
70 : 1822
71 : 911
72 : 2734
73 : 1367
74 : 4102
75 : 2051
76 : 6154
77 : 3077
78 : 9232
79 : 4616
80 : 2308
81 : 1154
82 : 577
83 : 1732
84 : 866
85 : 433
86 : 1300
87 : 650
88 : 325
89 : 976
90 : 488
91 : 244
92 : 122
93 : 61
94 : 184
95 : 92
96 : 46
97 : 23
98 : 70
99 : 35
100 : 106
101 : 53
102 : 160
103 : 80
104 : 40
105 : 20
106 : 10
107 : 5
108 : 16
109 : 8
110 : 4
111 : 2
112 : 1
1 113
&lt;/pre&gt;

===For checkNum(5000)===
&lt;pre&gt;
1 : 2500
2 : 1250
3 : 625
4 : 1876
5 : 938
6 : 469
7 : 1408
8 : 704
9 : 352
10 : 176
11 : 88
12 : 44
13 : 22
14 : 11
15 : 34
16 : 17
17 : 52
18 : 26
19 : 13
20 : 40
21 : 20
22 : 10
23 : 5
24 : 16
25 : 8
26 : 4
27 : 2
28 : 1
1 29
&lt;/pre&gt;
===For checkNum(25000000)===
&lt;pre&gt;
1 : 12500000
2 : 6250000
3 : 3125000
4 : 1562500
5 : 781250
6 : 390625
7 : 1171876
8 : 585938
9 : 292969
10 : 878908
11 : 439454
12 : 219727
13 : 659182
14 : 329591
15 : 988774
16 : 494387
17 : 1483162
18 : 741581
19 : 2224744
20 : 1112372
21 : 556186
22 : 278093
23 : 834280
24 : 417140
25 : 208570
26 : 104285
27 : 312856
28 : 156428
29 : 78214
30 : 39107
31 : 117322
32 : 58661
33 : 175984
34 : 87992
35 : 43996
36 : 21998
37 : 10999
38 : 32998
39 : 16499
40 : 49498
41 : 24749
42 : 74248
43 : 37124
44 : 18562
45 : 9281
46 : 27844
47 : 13922
48 : 6961
49 : 20884
50 : 10442
51 : 5221
52 : 15664
53 : 7832
54 : 3916
55 : 1958
56 : 979
57 : 2938
58 : 1469
59 : 4408
60 : 2204
61 : 1102
62 : 551
63 : 1654
64 : 827
65 : 2482
66 : 1241
67 : 3724
68 : 1862
69 : 931
70 : 2794
71 : 1397
72 : 4192
73 : 2096
74 : 1048
75 : 524
76 : 262
77 : 131
78 : 394
79 : 197
80 : 592
81 : 296
82 : 148
83 : 74
84 : 37
85 : 112
86 : 56
87 : 28
88 : 14
89 : 7
90 : 22
91 : 11
92 : 34
93 : 17
94 : 52
95 : 26
96 : 13
97 : 40
98 : 20
99 : 10
100 : 5
101 : 16
102 : 8
103 : 4
104 : 2
105 : 1
1 106
&lt;/pre&gt;

Happy Life ahead!!!
[[File:end1.png]]</text>
      <sha1>hb4y0u8fne3ay67sffq4f2jcj0hqplk</sha1>
    </revision>
    <revision>
      <id>4393</id>
      <parentid>4392</parentid>
      <timestamp>2018-10-16T04:07:42Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* Gragh Drawing Program3 */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="7732">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_12 Contributors of this page]

=Page Rank - How does Google Work=
One web page is having link to other page, that is a page is referring to other page. Google uses ''Page Rank'' algorithm to choose which page should be displayed first.

If we have network, connections as below:
[[File:rank0.png]]

We want to pick a leader out of all these nodes. How to pick a leader?  Why to elect a leader? It is because we want to find the super power of available nodes.                     
[[File:rank1.png]]

For example, the application wherein, we want to find the most impressive person of the  few ones. How to decide it? As shown in below figure, each node will communicate with other, randomly, we implement the count for each node, how many times, the particular node is being visited.
[[File:rank2.png]]

[[#Top]]

As shown in following, figure, all nodes are visited and each node is marked with the 
number i.e.number of times the node is visited.
[[File:rank3.png]]

The node with the maximum count, becomes the winner. Here, node with 120 count in figure 
below, is the winner. i.e. The person with 120 count in the figure is the most impressive 
person in the community being considered.
[[File:rank4.png]]

[[File:rank5.png]]

[[File:rank6.png]]

[[File:rank7.png]]


[[File:rank8.png]]

[[#Top]]

Google selects the page rank in this matter. Each web page is connected to other web page with web links. To a page, maximum link is there, that will be put on top results in Google search results.
[[File:rank9.png]]

Google uses web crawler. The crawler takes the random walk on the www network and rank the web sites.
[[File:rank10.png]]

This way Google ranks the pages and displays search results, according to page rank.
[[File:rank11.png]]

e.g.we search for ''mysore city''. Google has 10,000 results. But it displays the results in the sequence of page rank of search results, As shown in figure below.
[[File:mysore.png]]

[[#Top]]

==Page rank algorithm ==
As shown in beautiful figure below, few nodes combinely selected one as the leader, then that leader and other nodes, have selected         other as a leader. This way, finally the final leader is elected.
[[File:rank12.png|600px]]


[[File:graph00.png|600px]]

[[File:graph01.png|600px]]

==Gragh Drawing Program1==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
nx.barbell_graph(4,2)
G=nx.barbell_graph(4,2)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:Graph003.png|600px]]

==Gragh Drawing Program2==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
nx.barbell_graph(4,3)
G=nx.barbell_graph(4,3)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:
[[File:Graph004.png|600px]]

==Gragh Drawing Program3==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
nx.barbell_graph(5,3)
G=nx.barbell_graph(5,3)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:Graph005.png|600px]]

==Complete Graph==
Complete graph is a graph, wherein, each node is connected to each other nodes in a graph.

&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.complete_graph(4)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:
[[File:completegraph001.png]]

==Cycle graph==

&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.cycle_graph(5)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:
[[File:cyclegraph1.png]]

==Ladder graph==

&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.ladder_graph(5)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:
[[File:laddergraph.png]]


==Path Graph==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.path_graph(6)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:
[[File:pathgraph.png]]

=Collatz Conjecture=
Taught by Sudarshan sir and Amit sir, and Edited by Ms. Ami Tusharkant Choksi

If a number is even, divide it by ''2'', if it is odd, make multiply it by ''3'' and add ''1'', till you get ''1''. This simple problem is called, ''Collatz Conjecture''. 

[[File:collatz1.png]]

[[File:collatz2.png]]

[[File:collatz3.png]]

[[File:collatz4.png]]

[[File:collatz5.png]]

Number is bigger doesn't mean more iterations are required. One can notice, from the output of the following program. 



The program to implement the same is as follows:
==Program==
&lt;pre&gt;
#collatz conjecture
#if num is even, divide it by 2
#if num is odd, new number is equal to 3n+1


def checkNum(num):
    iterations=1
    while(num!=1):
        if(num%2==0):
            num=int(num/2)            
        else:
            num = 3*num+1
        iterations+=1
        

    print(num,iterations)


#checkNum(12)#Output: 1 10
#checkNum(26)#Output: 1 11
checkNum(2000)#Output: 1 113
&lt;/pre&gt;

&lt;pre&gt;

#recursive approach

def checkNum(num):
    if num==1:
        return 1
    elif num%2==0:
        return checkNum(num/2)+1
    else:
        return checkNum(3*num +1)+1


output:
checkNum(26)
Out[27]: 11
checkNum(5000)
Out[28]: 29
&lt;/pre&gt;

==Program adding statement to print all iterations==
&lt;pre&gt;
def checkNum(num):
    iterations=1
    while(num!=1):
        if(num%2==0):
            num=int(num/2)            
        else:
            num = 3*num+1
        print(iterations,&quot;:&quot;,num)
        iterations+=1
        

    print(num,iterations)
&lt;/pre&gt;
==Output==
===For checkNum(2000)===
&lt;pre&gt;
1 : 1000
2 : 500
3 : 250
4 : 125
5 : 376
6 : 188
7 : 94
8 : 47
9 : 142
10 : 71
11 : 214
12 : 107
13 : 322
14 : 161
15 : 484
16 : 242
17 : 121
18 : 364
19 : 182
20 : 91
21 : 274
22 : 137
23 : 412
24 : 206
25 : 103
26 : 310
27 : 155
28 : 466
29 : 233
30 : 700
31 : 350
32 : 175
33 : 526
34 : 263
35 : 790
36 : 395
37 : 1186
38 : 593
39 : 1780
40 : 890
41 : 445
42 : 1336
43 : 668
44 : 334
45 : 167
46 : 502
47 : 251
48 : 754
49 : 377
50 : 1132
51 : 566
52 : 283
53 : 850
54 : 425
55 : 1276
56 : 638
57 : 319
58 : 958
59 : 479
60 : 1438
61 : 719
62 : 2158
63 : 1079
64 : 3238
65 : 1619
66 : 4858
67 : 2429
68 : 7288
69 : 3644
70 : 1822
71 : 911
72 : 2734
73 : 1367
74 : 4102
75 : 2051
76 : 6154
77 : 3077
78 : 9232
79 : 4616
80 : 2308
81 : 1154
82 : 577
83 : 1732
84 : 866
85 : 433
86 : 1300
87 : 650
88 : 325
89 : 976
90 : 488
91 : 244
92 : 122
93 : 61
94 : 184
95 : 92
96 : 46
97 : 23
98 : 70
99 : 35
100 : 106
101 : 53
102 : 160
103 : 80
104 : 40
105 : 20
106 : 10
107 : 5
108 : 16
109 : 8
110 : 4
111 : 2
112 : 1
1 113
&lt;/pre&gt;

===For checkNum(5000)===
&lt;pre&gt;
1 : 2500
2 : 1250
3 : 625
4 : 1876
5 : 938
6 : 469
7 : 1408
8 : 704
9 : 352
10 : 176
11 : 88
12 : 44
13 : 22
14 : 11
15 : 34
16 : 17
17 : 52
18 : 26
19 : 13
20 : 40
21 : 20
22 : 10
23 : 5
24 : 16
25 : 8
26 : 4
27 : 2
28 : 1
1 29
&lt;/pre&gt;
===For checkNum(25000000)===
&lt;pre&gt;
1 : 12500000
2 : 6250000
3 : 3125000
4 : 1562500
5 : 781250
6 : 390625
7 : 1171876
8 : 585938
9 : 292969
10 : 878908
11 : 439454
12 : 219727
13 : 659182
14 : 329591
15 : 988774
16 : 494387
17 : 1483162
18 : 741581
19 : 2224744
20 : 1112372
21 : 556186
22 : 278093
23 : 834280
24 : 417140
25 : 208570
26 : 104285
27 : 312856
28 : 156428
29 : 78214
30 : 39107
31 : 117322
32 : 58661
33 : 175984
34 : 87992
35 : 43996
36 : 21998
37 : 10999
38 : 32998
39 : 16499
40 : 49498
41 : 24749
42 : 74248
43 : 37124
44 : 18562
45 : 9281
46 : 27844
47 : 13922
48 : 6961
49 : 20884
50 : 10442
51 : 5221
52 : 15664
53 : 7832
54 : 3916
55 : 1958
56 : 979
57 : 2938
58 : 1469
59 : 4408
60 : 2204
61 : 1102
62 : 551
63 : 1654
64 : 827
65 : 2482
66 : 1241
67 : 3724
68 : 1862
69 : 931
70 : 2794
71 : 1397
72 : 4192
73 : 2096
74 : 1048
75 : 524
76 : 262
77 : 131
78 : 394
79 : 197
80 : 592
81 : 296
82 : 148
83 : 74
84 : 37
85 : 112
86 : 56
87 : 28
88 : 14
89 : 7
90 : 22
91 : 11
92 : 34
93 : 17
94 : 52
95 : 26
96 : 13
97 : 40
98 : 20
99 : 10
100 : 5
101 : 16
102 : 8
103 : 4
104 : 2
105 : 1
1 106
&lt;/pre&gt;

Happy Life ahead!!!
[[File:end1.png]]</text>
      <sha1>er8s1qfyior6twx2vfijyt6096celkd</sha1>
    </revision>
    <revision>
      <id>4394</id>
      <parentid>4393</parentid>
      <timestamp>2018-10-16T04:07:59Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* Complete Graph */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="7739">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_12 Contributors of this page]

=Page Rank - How does Google Work=
One web page is having link to other page, that is a page is referring to other page. Google uses ''Page Rank'' algorithm to choose which page should be displayed first.

If we have network, connections as below:
[[File:rank0.png]]

We want to pick a leader out of all these nodes. How to pick a leader?  Why to elect a leader? It is because we want to find the super power of available nodes.                     
[[File:rank1.png]]

For example, the application wherein, we want to find the most impressive person of the  few ones. How to decide it? As shown in below figure, each node will communicate with other, randomly, we implement the count for each node, how many times, the particular node is being visited.
[[File:rank2.png]]

[[#Top]]

As shown in following, figure, all nodes are visited and each node is marked with the 
number i.e.number of times the node is visited.
[[File:rank3.png]]

The node with the maximum count, becomes the winner. Here, node with 120 count in figure 
below, is the winner. i.e. The person with 120 count in the figure is the most impressive 
person in the community being considered.
[[File:rank4.png]]

[[File:rank5.png]]

[[File:rank6.png]]

[[File:rank7.png]]


[[File:rank8.png]]

[[#Top]]

Google selects the page rank in this matter. Each web page is connected to other web page with web links. To a page, maximum link is there, that will be put on top results in Google search results.
[[File:rank9.png]]

Google uses web crawler. The crawler takes the random walk on the www network and rank the web sites.
[[File:rank10.png]]

This way Google ranks the pages and displays search results, according to page rank.
[[File:rank11.png]]

e.g.we search for ''mysore city''. Google has 10,000 results. But it displays the results in the sequence of page rank of search results, As shown in figure below.
[[File:mysore.png]]

[[#Top]]

==Page rank algorithm ==
As shown in beautiful figure below, few nodes combinely selected one as the leader, then that leader and other nodes, have selected         other as a leader. This way, finally the final leader is elected.
[[File:rank12.png|600px]]


[[File:graph00.png|600px]]

[[File:graph01.png|600px]]

==Gragh Drawing Program1==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
nx.barbell_graph(4,2)
G=nx.barbell_graph(4,2)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:Graph003.png|600px]]

==Gragh Drawing Program2==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
nx.barbell_graph(4,3)
G=nx.barbell_graph(4,3)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:
[[File:Graph004.png|600px]]

==Gragh Drawing Program3==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
nx.barbell_graph(5,3)
G=nx.barbell_graph(5,3)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:Graph005.png|600px]]

==Complete Graph==
Complete graph is a graph, wherein, each node is connected to each other nodes in a graph.

&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.complete_graph(4)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:

[[File:completegraph001.png|600px]]

==Cycle graph==

&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.cycle_graph(5)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:
[[File:cyclegraph1.png]]

==Ladder graph==

&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.ladder_graph(5)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:
[[File:laddergraph.png]]


==Path Graph==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.path_graph(6)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:
[[File:pathgraph.png]]

=Collatz Conjecture=
Taught by Sudarshan sir and Amit sir, and Edited by Ms. Ami Tusharkant Choksi

If a number is even, divide it by ''2'', if it is odd, make multiply it by ''3'' and add ''1'', till you get ''1''. This simple problem is called, ''Collatz Conjecture''. 

[[File:collatz1.png]]

[[File:collatz2.png]]

[[File:collatz3.png]]

[[File:collatz4.png]]

[[File:collatz5.png]]

Number is bigger doesn't mean more iterations are required. One can notice, from the output of the following program. 



The program to implement the same is as follows:
==Program==
&lt;pre&gt;
#collatz conjecture
#if num is even, divide it by 2
#if num is odd, new number is equal to 3n+1


def checkNum(num):
    iterations=1
    while(num!=1):
        if(num%2==0):
            num=int(num/2)            
        else:
            num = 3*num+1
        iterations+=1
        

    print(num,iterations)


#checkNum(12)#Output: 1 10
#checkNum(26)#Output: 1 11
checkNum(2000)#Output: 1 113
&lt;/pre&gt;

&lt;pre&gt;

#recursive approach

def checkNum(num):
    if num==1:
        return 1
    elif num%2==0:
        return checkNum(num/2)+1
    else:
        return checkNum(3*num +1)+1


output:
checkNum(26)
Out[27]: 11
checkNum(5000)
Out[28]: 29
&lt;/pre&gt;

==Program adding statement to print all iterations==
&lt;pre&gt;
def checkNum(num):
    iterations=1
    while(num!=1):
        if(num%2==0):
            num=int(num/2)            
        else:
            num = 3*num+1
        print(iterations,&quot;:&quot;,num)
        iterations+=1
        

    print(num,iterations)
&lt;/pre&gt;
==Output==
===For checkNum(2000)===
&lt;pre&gt;
1 : 1000
2 : 500
3 : 250
4 : 125
5 : 376
6 : 188
7 : 94
8 : 47
9 : 142
10 : 71
11 : 214
12 : 107
13 : 322
14 : 161
15 : 484
16 : 242
17 : 121
18 : 364
19 : 182
20 : 91
21 : 274
22 : 137
23 : 412
24 : 206
25 : 103
26 : 310
27 : 155
28 : 466
29 : 233
30 : 700
31 : 350
32 : 175
33 : 526
34 : 263
35 : 790
36 : 395
37 : 1186
38 : 593
39 : 1780
40 : 890
41 : 445
42 : 1336
43 : 668
44 : 334
45 : 167
46 : 502
47 : 251
48 : 754
49 : 377
50 : 1132
51 : 566
52 : 283
53 : 850
54 : 425
55 : 1276
56 : 638
57 : 319
58 : 958
59 : 479
60 : 1438
61 : 719
62 : 2158
63 : 1079
64 : 3238
65 : 1619
66 : 4858
67 : 2429
68 : 7288
69 : 3644
70 : 1822
71 : 911
72 : 2734
73 : 1367
74 : 4102
75 : 2051
76 : 6154
77 : 3077
78 : 9232
79 : 4616
80 : 2308
81 : 1154
82 : 577
83 : 1732
84 : 866
85 : 433
86 : 1300
87 : 650
88 : 325
89 : 976
90 : 488
91 : 244
92 : 122
93 : 61
94 : 184
95 : 92
96 : 46
97 : 23
98 : 70
99 : 35
100 : 106
101 : 53
102 : 160
103 : 80
104 : 40
105 : 20
106 : 10
107 : 5
108 : 16
109 : 8
110 : 4
111 : 2
112 : 1
1 113
&lt;/pre&gt;

===For checkNum(5000)===
&lt;pre&gt;
1 : 2500
2 : 1250
3 : 625
4 : 1876
5 : 938
6 : 469
7 : 1408
8 : 704
9 : 352
10 : 176
11 : 88
12 : 44
13 : 22
14 : 11
15 : 34
16 : 17
17 : 52
18 : 26
19 : 13
20 : 40
21 : 20
22 : 10
23 : 5
24 : 16
25 : 8
26 : 4
27 : 2
28 : 1
1 29
&lt;/pre&gt;
===For checkNum(25000000)===
&lt;pre&gt;
1 : 12500000
2 : 6250000
3 : 3125000
4 : 1562500
5 : 781250
6 : 390625
7 : 1171876
8 : 585938
9 : 292969
10 : 878908
11 : 439454
12 : 219727
13 : 659182
14 : 329591
15 : 988774
16 : 494387
17 : 1483162
18 : 741581
19 : 2224744
20 : 1112372
21 : 556186
22 : 278093
23 : 834280
24 : 417140
25 : 208570
26 : 104285
27 : 312856
28 : 156428
29 : 78214
30 : 39107
31 : 117322
32 : 58661
33 : 175984
34 : 87992
35 : 43996
36 : 21998
37 : 10999
38 : 32998
39 : 16499
40 : 49498
41 : 24749
42 : 74248
43 : 37124
44 : 18562
45 : 9281
46 : 27844
47 : 13922
48 : 6961
49 : 20884
50 : 10442
51 : 5221
52 : 15664
53 : 7832
54 : 3916
55 : 1958
56 : 979
57 : 2938
58 : 1469
59 : 4408
60 : 2204
61 : 1102
62 : 551
63 : 1654
64 : 827
65 : 2482
66 : 1241
67 : 3724
68 : 1862
69 : 931
70 : 2794
71 : 1397
72 : 4192
73 : 2096
74 : 1048
75 : 524
76 : 262
77 : 131
78 : 394
79 : 197
80 : 592
81 : 296
82 : 148
83 : 74
84 : 37
85 : 112
86 : 56
87 : 28
88 : 14
89 : 7
90 : 22
91 : 11
92 : 34
93 : 17
94 : 52
95 : 26
96 : 13
97 : 40
98 : 20
99 : 10
100 : 5
101 : 16
102 : 8
103 : 4
104 : 2
105 : 1
1 106
&lt;/pre&gt;

Happy Life ahead!!!
[[File:end1.png]]</text>
      <sha1>4gq7a2ulhxp2zaplnharikms1jcxzt4</sha1>
    </revision>
    <revision>
      <id>4395</id>
      <parentid>4394</parentid>
      <timestamp>2018-10-16T04:08:15Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* Cycle graph */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="7745">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_12 Contributors of this page]

=Page Rank - How does Google Work=
One web page is having link to other page, that is a page is referring to other page. Google uses ''Page Rank'' algorithm to choose which page should be displayed first.

If we have network, connections as below:
[[File:rank0.png]]

We want to pick a leader out of all these nodes. How to pick a leader?  Why to elect a leader? It is because we want to find the super power of available nodes.                     
[[File:rank1.png]]

For example, the application wherein, we want to find the most impressive person of the  few ones. How to decide it? As shown in below figure, each node will communicate with other, randomly, we implement the count for each node, how many times, the particular node is being visited.
[[File:rank2.png]]

[[#Top]]

As shown in following, figure, all nodes are visited and each node is marked with the 
number i.e.number of times the node is visited.
[[File:rank3.png]]

The node with the maximum count, becomes the winner. Here, node with 120 count in figure 
below, is the winner. i.e. The person with 120 count in the figure is the most impressive 
person in the community being considered.
[[File:rank4.png]]

[[File:rank5.png]]

[[File:rank6.png]]

[[File:rank7.png]]


[[File:rank8.png]]

[[#Top]]

Google selects the page rank in this matter. Each web page is connected to other web page with web links. To a page, maximum link is there, that will be put on top results in Google search results.
[[File:rank9.png]]

Google uses web crawler. The crawler takes the random walk on the www network and rank the web sites.
[[File:rank10.png]]

This way Google ranks the pages and displays search results, according to page rank.
[[File:rank11.png]]

e.g.we search for ''mysore city''. Google has 10,000 results. But it displays the results in the sequence of page rank of search results, As shown in figure below.
[[File:mysore.png]]

[[#Top]]

==Page rank algorithm ==
As shown in beautiful figure below, few nodes combinely selected one as the leader, then that leader and other nodes, have selected         other as a leader. This way, finally the final leader is elected.
[[File:rank12.png|600px]]


[[File:graph00.png|600px]]

[[File:graph01.png|600px]]

==Gragh Drawing Program1==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
nx.barbell_graph(4,2)
G=nx.barbell_graph(4,2)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:Graph003.png|600px]]

==Gragh Drawing Program2==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
nx.barbell_graph(4,3)
G=nx.barbell_graph(4,3)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:
[[File:Graph004.png|600px]]

==Gragh Drawing Program3==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
nx.barbell_graph(5,3)
G=nx.barbell_graph(5,3)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:Graph005.png|600px]]

==Complete Graph==
Complete graph is a graph, wherein, each node is connected to each other nodes in a graph.

&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.complete_graph(4)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:

[[File:completegraph001.png|600px]]

==Cycle graph==

&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.cycle_graph(5)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:
[[File:cyclegraph1.png|600px]]

==Ladder graph==

&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.ladder_graph(5)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:
[[File:laddergraph.png]]


==Path Graph==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.path_graph(6)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:
[[File:pathgraph.png]]

=Collatz Conjecture=
Taught by Sudarshan sir and Amit sir, and Edited by Ms. Ami Tusharkant Choksi

If a number is even, divide it by ''2'', if it is odd, make multiply it by ''3'' and add ''1'', till you get ''1''. This simple problem is called, ''Collatz Conjecture''. 

[[File:collatz1.png]]

[[File:collatz2.png]]

[[File:collatz3.png]]

[[File:collatz4.png]]

[[File:collatz5.png]]

Number is bigger doesn't mean more iterations are required. One can notice, from the output of the following program. 



The program to implement the same is as follows:
==Program==
&lt;pre&gt;
#collatz conjecture
#if num is even, divide it by 2
#if num is odd, new number is equal to 3n+1


def checkNum(num):
    iterations=1
    while(num!=1):
        if(num%2==0):
            num=int(num/2)            
        else:
            num = 3*num+1
        iterations+=1
        

    print(num,iterations)


#checkNum(12)#Output: 1 10
#checkNum(26)#Output: 1 11
checkNum(2000)#Output: 1 113
&lt;/pre&gt;

&lt;pre&gt;

#recursive approach

def checkNum(num):
    if num==1:
        return 1
    elif num%2==0:
        return checkNum(num/2)+1
    else:
        return checkNum(3*num +1)+1


output:
checkNum(26)
Out[27]: 11
checkNum(5000)
Out[28]: 29
&lt;/pre&gt;

==Program adding statement to print all iterations==
&lt;pre&gt;
def checkNum(num):
    iterations=1
    while(num!=1):
        if(num%2==0):
            num=int(num/2)            
        else:
            num = 3*num+1
        print(iterations,&quot;:&quot;,num)
        iterations+=1
        

    print(num,iterations)
&lt;/pre&gt;
==Output==
===For checkNum(2000)===
&lt;pre&gt;
1 : 1000
2 : 500
3 : 250
4 : 125
5 : 376
6 : 188
7 : 94
8 : 47
9 : 142
10 : 71
11 : 214
12 : 107
13 : 322
14 : 161
15 : 484
16 : 242
17 : 121
18 : 364
19 : 182
20 : 91
21 : 274
22 : 137
23 : 412
24 : 206
25 : 103
26 : 310
27 : 155
28 : 466
29 : 233
30 : 700
31 : 350
32 : 175
33 : 526
34 : 263
35 : 790
36 : 395
37 : 1186
38 : 593
39 : 1780
40 : 890
41 : 445
42 : 1336
43 : 668
44 : 334
45 : 167
46 : 502
47 : 251
48 : 754
49 : 377
50 : 1132
51 : 566
52 : 283
53 : 850
54 : 425
55 : 1276
56 : 638
57 : 319
58 : 958
59 : 479
60 : 1438
61 : 719
62 : 2158
63 : 1079
64 : 3238
65 : 1619
66 : 4858
67 : 2429
68 : 7288
69 : 3644
70 : 1822
71 : 911
72 : 2734
73 : 1367
74 : 4102
75 : 2051
76 : 6154
77 : 3077
78 : 9232
79 : 4616
80 : 2308
81 : 1154
82 : 577
83 : 1732
84 : 866
85 : 433
86 : 1300
87 : 650
88 : 325
89 : 976
90 : 488
91 : 244
92 : 122
93 : 61
94 : 184
95 : 92
96 : 46
97 : 23
98 : 70
99 : 35
100 : 106
101 : 53
102 : 160
103 : 80
104 : 40
105 : 20
106 : 10
107 : 5
108 : 16
109 : 8
110 : 4
111 : 2
112 : 1
1 113
&lt;/pre&gt;

===For checkNum(5000)===
&lt;pre&gt;
1 : 2500
2 : 1250
3 : 625
4 : 1876
5 : 938
6 : 469
7 : 1408
8 : 704
9 : 352
10 : 176
11 : 88
12 : 44
13 : 22
14 : 11
15 : 34
16 : 17
17 : 52
18 : 26
19 : 13
20 : 40
21 : 20
22 : 10
23 : 5
24 : 16
25 : 8
26 : 4
27 : 2
28 : 1
1 29
&lt;/pre&gt;
===For checkNum(25000000)===
&lt;pre&gt;
1 : 12500000
2 : 6250000
3 : 3125000
4 : 1562500
5 : 781250
6 : 390625
7 : 1171876
8 : 585938
9 : 292969
10 : 878908
11 : 439454
12 : 219727
13 : 659182
14 : 329591
15 : 988774
16 : 494387
17 : 1483162
18 : 741581
19 : 2224744
20 : 1112372
21 : 556186
22 : 278093
23 : 834280
24 : 417140
25 : 208570
26 : 104285
27 : 312856
28 : 156428
29 : 78214
30 : 39107
31 : 117322
32 : 58661
33 : 175984
34 : 87992
35 : 43996
36 : 21998
37 : 10999
38 : 32998
39 : 16499
40 : 49498
41 : 24749
42 : 74248
43 : 37124
44 : 18562
45 : 9281
46 : 27844
47 : 13922
48 : 6961
49 : 20884
50 : 10442
51 : 5221
52 : 15664
53 : 7832
54 : 3916
55 : 1958
56 : 979
57 : 2938
58 : 1469
59 : 4408
60 : 2204
61 : 1102
62 : 551
63 : 1654
64 : 827
65 : 2482
66 : 1241
67 : 3724
68 : 1862
69 : 931
70 : 2794
71 : 1397
72 : 4192
73 : 2096
74 : 1048
75 : 524
76 : 262
77 : 131
78 : 394
79 : 197
80 : 592
81 : 296
82 : 148
83 : 74
84 : 37
85 : 112
86 : 56
87 : 28
88 : 14
89 : 7
90 : 22
91 : 11
92 : 34
93 : 17
94 : 52
95 : 26
96 : 13
97 : 40
98 : 20
99 : 10
100 : 5
101 : 16
102 : 8
103 : 4
104 : 2
105 : 1
1 106
&lt;/pre&gt;

Happy Life ahead!!!
[[File:end1.png]]</text>
      <sha1>roopux86inqqwci25dj1ivrhtivqm93</sha1>
    </revision>
    <revision>
      <id>4396</id>
      <parentid>4395</parentid>
      <timestamp>2018-10-16T04:08:28Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* Ladder graph */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="7751">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_12 Contributors of this page]

=Page Rank - How does Google Work=
One web page is having link to other page, that is a page is referring to other page. Google uses ''Page Rank'' algorithm to choose which page should be displayed first.

If we have network, connections as below:
[[File:rank0.png]]

We want to pick a leader out of all these nodes. How to pick a leader?  Why to elect a leader? It is because we want to find the super power of available nodes.                     
[[File:rank1.png]]

For example, the application wherein, we want to find the most impressive person of the  few ones. How to decide it? As shown in below figure, each node will communicate with other, randomly, we implement the count for each node, how many times, the particular node is being visited.
[[File:rank2.png]]

[[#Top]]

As shown in following, figure, all nodes are visited and each node is marked with the 
number i.e.number of times the node is visited.
[[File:rank3.png]]

The node with the maximum count, becomes the winner. Here, node with 120 count in figure 
below, is the winner. i.e. The person with 120 count in the figure is the most impressive 
person in the community being considered.
[[File:rank4.png]]

[[File:rank5.png]]

[[File:rank6.png]]

[[File:rank7.png]]


[[File:rank8.png]]

[[#Top]]

Google selects the page rank in this matter. Each web page is connected to other web page with web links. To a page, maximum link is there, that will be put on top results in Google search results.
[[File:rank9.png]]

Google uses web crawler. The crawler takes the random walk on the www network and rank the web sites.
[[File:rank10.png]]

This way Google ranks the pages and displays search results, according to page rank.
[[File:rank11.png]]

e.g.we search for ''mysore city''. Google has 10,000 results. But it displays the results in the sequence of page rank of search results, As shown in figure below.
[[File:mysore.png]]

[[#Top]]

==Page rank algorithm ==
As shown in beautiful figure below, few nodes combinely selected one as the leader, then that leader and other nodes, have selected         other as a leader. This way, finally the final leader is elected.
[[File:rank12.png|600px]]


[[File:graph00.png|600px]]

[[File:graph01.png|600px]]

==Gragh Drawing Program1==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
nx.barbell_graph(4,2)
G=nx.barbell_graph(4,2)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:Graph003.png|600px]]

==Gragh Drawing Program2==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
nx.barbell_graph(4,3)
G=nx.barbell_graph(4,3)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:
[[File:Graph004.png|600px]]

==Gragh Drawing Program3==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
nx.barbell_graph(5,3)
G=nx.barbell_graph(5,3)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:Graph005.png|600px]]

==Complete Graph==
Complete graph is a graph, wherein, each node is connected to each other nodes in a graph.

&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.complete_graph(4)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:

[[File:completegraph001.png|600px]]

==Cycle graph==

&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.cycle_graph(5)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:
[[File:cyclegraph1.png|600px]]

==Ladder graph==

&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.ladder_graph(5)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:

[[File:laddergraph.png|600px]]

==Path Graph==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.path_graph(6)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:
[[File:pathgraph.png]]

=Collatz Conjecture=
Taught by Sudarshan sir and Amit sir, and Edited by Ms. Ami Tusharkant Choksi

If a number is even, divide it by ''2'', if it is odd, make multiply it by ''3'' and add ''1'', till you get ''1''. This simple problem is called, ''Collatz Conjecture''. 

[[File:collatz1.png]]

[[File:collatz2.png]]

[[File:collatz3.png]]

[[File:collatz4.png]]

[[File:collatz5.png]]

Number is bigger doesn't mean more iterations are required. One can notice, from the output of the following program. 



The program to implement the same is as follows:
==Program==
&lt;pre&gt;
#collatz conjecture
#if num is even, divide it by 2
#if num is odd, new number is equal to 3n+1


def checkNum(num):
    iterations=1
    while(num!=1):
        if(num%2==0):
            num=int(num/2)            
        else:
            num = 3*num+1
        iterations+=1
        

    print(num,iterations)


#checkNum(12)#Output: 1 10
#checkNum(26)#Output: 1 11
checkNum(2000)#Output: 1 113
&lt;/pre&gt;

&lt;pre&gt;

#recursive approach

def checkNum(num):
    if num==1:
        return 1
    elif num%2==0:
        return checkNum(num/2)+1
    else:
        return checkNum(3*num +1)+1


output:
checkNum(26)
Out[27]: 11
checkNum(5000)
Out[28]: 29
&lt;/pre&gt;

==Program adding statement to print all iterations==
&lt;pre&gt;
def checkNum(num):
    iterations=1
    while(num!=1):
        if(num%2==0):
            num=int(num/2)            
        else:
            num = 3*num+1
        print(iterations,&quot;:&quot;,num)
        iterations+=1
        

    print(num,iterations)
&lt;/pre&gt;
==Output==
===For checkNum(2000)===
&lt;pre&gt;
1 : 1000
2 : 500
3 : 250
4 : 125
5 : 376
6 : 188
7 : 94
8 : 47
9 : 142
10 : 71
11 : 214
12 : 107
13 : 322
14 : 161
15 : 484
16 : 242
17 : 121
18 : 364
19 : 182
20 : 91
21 : 274
22 : 137
23 : 412
24 : 206
25 : 103
26 : 310
27 : 155
28 : 466
29 : 233
30 : 700
31 : 350
32 : 175
33 : 526
34 : 263
35 : 790
36 : 395
37 : 1186
38 : 593
39 : 1780
40 : 890
41 : 445
42 : 1336
43 : 668
44 : 334
45 : 167
46 : 502
47 : 251
48 : 754
49 : 377
50 : 1132
51 : 566
52 : 283
53 : 850
54 : 425
55 : 1276
56 : 638
57 : 319
58 : 958
59 : 479
60 : 1438
61 : 719
62 : 2158
63 : 1079
64 : 3238
65 : 1619
66 : 4858
67 : 2429
68 : 7288
69 : 3644
70 : 1822
71 : 911
72 : 2734
73 : 1367
74 : 4102
75 : 2051
76 : 6154
77 : 3077
78 : 9232
79 : 4616
80 : 2308
81 : 1154
82 : 577
83 : 1732
84 : 866
85 : 433
86 : 1300
87 : 650
88 : 325
89 : 976
90 : 488
91 : 244
92 : 122
93 : 61
94 : 184
95 : 92
96 : 46
97 : 23
98 : 70
99 : 35
100 : 106
101 : 53
102 : 160
103 : 80
104 : 40
105 : 20
106 : 10
107 : 5
108 : 16
109 : 8
110 : 4
111 : 2
112 : 1
1 113
&lt;/pre&gt;

===For checkNum(5000)===
&lt;pre&gt;
1 : 2500
2 : 1250
3 : 625
4 : 1876
5 : 938
6 : 469
7 : 1408
8 : 704
9 : 352
10 : 176
11 : 88
12 : 44
13 : 22
14 : 11
15 : 34
16 : 17
17 : 52
18 : 26
19 : 13
20 : 40
21 : 20
22 : 10
23 : 5
24 : 16
25 : 8
26 : 4
27 : 2
28 : 1
1 29
&lt;/pre&gt;
===For checkNum(25000000)===
&lt;pre&gt;
1 : 12500000
2 : 6250000
3 : 3125000
4 : 1562500
5 : 781250
6 : 390625
7 : 1171876
8 : 585938
9 : 292969
10 : 878908
11 : 439454
12 : 219727
13 : 659182
14 : 329591
15 : 988774
16 : 494387
17 : 1483162
18 : 741581
19 : 2224744
20 : 1112372
21 : 556186
22 : 278093
23 : 834280
24 : 417140
25 : 208570
26 : 104285
27 : 312856
28 : 156428
29 : 78214
30 : 39107
31 : 117322
32 : 58661
33 : 175984
34 : 87992
35 : 43996
36 : 21998
37 : 10999
38 : 32998
39 : 16499
40 : 49498
41 : 24749
42 : 74248
43 : 37124
44 : 18562
45 : 9281
46 : 27844
47 : 13922
48 : 6961
49 : 20884
50 : 10442
51 : 5221
52 : 15664
53 : 7832
54 : 3916
55 : 1958
56 : 979
57 : 2938
58 : 1469
59 : 4408
60 : 2204
61 : 1102
62 : 551
63 : 1654
64 : 827
65 : 2482
66 : 1241
67 : 3724
68 : 1862
69 : 931
70 : 2794
71 : 1397
72 : 4192
73 : 2096
74 : 1048
75 : 524
76 : 262
77 : 131
78 : 394
79 : 197
80 : 592
81 : 296
82 : 148
83 : 74
84 : 37
85 : 112
86 : 56
87 : 28
88 : 14
89 : 7
90 : 22
91 : 11
92 : 34
93 : 17
94 : 52
95 : 26
96 : 13
97 : 40
98 : 20
99 : 10
100 : 5
101 : 16
102 : 8
103 : 4
104 : 2
105 : 1
1 106
&lt;/pre&gt;

Happy Life ahead!!!
[[File:end1.png]]</text>
      <sha1>a2im485scd2t9mlfjy03on59rbknqwk</sha1>
    </revision>
    <revision>
      <id>4397</id>
      <parentid>4396</parentid>
      <timestamp>2018-10-16T04:08:40Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* Path Graph */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="7758">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_12 Contributors of this page]

=Page Rank - How does Google Work=
One web page is having link to other page, that is a page is referring to other page. Google uses ''Page Rank'' algorithm to choose which page should be displayed first.

If we have network, connections as below:
[[File:rank0.png]]

We want to pick a leader out of all these nodes. How to pick a leader?  Why to elect a leader? It is because we want to find the super power of available nodes.                     
[[File:rank1.png]]

For example, the application wherein, we want to find the most impressive person of the  few ones. How to decide it? As shown in below figure, each node will communicate with other, randomly, we implement the count for each node, how many times, the particular node is being visited.
[[File:rank2.png]]

[[#Top]]

As shown in following, figure, all nodes are visited and each node is marked with the 
number i.e.number of times the node is visited.
[[File:rank3.png]]

The node with the maximum count, becomes the winner. Here, node with 120 count in figure 
below, is the winner. i.e. The person with 120 count in the figure is the most impressive 
person in the community being considered.
[[File:rank4.png]]

[[File:rank5.png]]

[[File:rank6.png]]

[[File:rank7.png]]


[[File:rank8.png]]

[[#Top]]

Google selects the page rank in this matter. Each web page is connected to other web page with web links. To a page, maximum link is there, that will be put on top results in Google search results.
[[File:rank9.png]]

Google uses web crawler. The crawler takes the random walk on the www network and rank the web sites.
[[File:rank10.png]]

This way Google ranks the pages and displays search results, according to page rank.
[[File:rank11.png]]

e.g.we search for ''mysore city''. Google has 10,000 results. But it displays the results in the sequence of page rank of search results, As shown in figure below.
[[File:mysore.png]]

[[#Top]]

==Page rank algorithm ==
As shown in beautiful figure below, few nodes combinely selected one as the leader, then that leader and other nodes, have selected         other as a leader. This way, finally the final leader is elected.
[[File:rank12.png|600px]]


[[File:graph00.png|600px]]

[[File:graph01.png|600px]]

==Gragh Drawing Program1==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
nx.barbell_graph(4,2)
G=nx.barbell_graph(4,2)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:Graph003.png|600px]]

==Gragh Drawing Program2==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
nx.barbell_graph(4,3)
G=nx.barbell_graph(4,3)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:
[[File:Graph004.png|600px]]

==Gragh Drawing Program3==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
nx.barbell_graph(5,3)
G=nx.barbell_graph(5,3)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:Graph005.png|600px]]

==Complete Graph==
Complete graph is a graph, wherein, each node is connected to each other nodes in a graph.

&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.complete_graph(4)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:

[[File:completegraph001.png|600px]]

==Cycle graph==

&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.cycle_graph(5)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:
[[File:cyclegraph1.png|600px]]

==Ladder graph==

&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.ladder_graph(5)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:

[[File:laddergraph.png|600px]]

==Path Graph==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.path_graph(6)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:

[[File:pathgraph.png|600px]]

=Collatz Conjecture=
Taught by Sudarshan sir and Amit sir, and Edited by Ms. Ami Tusharkant Choksi

If a number is even, divide it by ''2'', if it is odd, make multiply it by ''3'' and add ''1'', till you get ''1''. This simple problem is called, ''Collatz Conjecture''. 

[[File:collatz1.png]]

[[File:collatz2.png]]

[[File:collatz3.png]]

[[File:collatz4.png]]

[[File:collatz5.png]]

Number is bigger doesn't mean more iterations are required. One can notice, from the output of the following program. 



The program to implement the same is as follows:
==Program==
&lt;pre&gt;
#collatz conjecture
#if num is even, divide it by 2
#if num is odd, new number is equal to 3n+1


def checkNum(num):
    iterations=1
    while(num!=1):
        if(num%2==0):
            num=int(num/2)            
        else:
            num = 3*num+1
        iterations+=1
        

    print(num,iterations)


#checkNum(12)#Output: 1 10
#checkNum(26)#Output: 1 11
checkNum(2000)#Output: 1 113
&lt;/pre&gt;

&lt;pre&gt;

#recursive approach

def checkNum(num):
    if num==1:
        return 1
    elif num%2==0:
        return checkNum(num/2)+1
    else:
        return checkNum(3*num +1)+1


output:
checkNum(26)
Out[27]: 11
checkNum(5000)
Out[28]: 29
&lt;/pre&gt;

==Program adding statement to print all iterations==
&lt;pre&gt;
def checkNum(num):
    iterations=1
    while(num!=1):
        if(num%2==0):
            num=int(num/2)            
        else:
            num = 3*num+1
        print(iterations,&quot;:&quot;,num)
        iterations+=1
        

    print(num,iterations)
&lt;/pre&gt;
==Output==
===For checkNum(2000)===
&lt;pre&gt;
1 : 1000
2 : 500
3 : 250
4 : 125
5 : 376
6 : 188
7 : 94
8 : 47
9 : 142
10 : 71
11 : 214
12 : 107
13 : 322
14 : 161
15 : 484
16 : 242
17 : 121
18 : 364
19 : 182
20 : 91
21 : 274
22 : 137
23 : 412
24 : 206
25 : 103
26 : 310
27 : 155
28 : 466
29 : 233
30 : 700
31 : 350
32 : 175
33 : 526
34 : 263
35 : 790
36 : 395
37 : 1186
38 : 593
39 : 1780
40 : 890
41 : 445
42 : 1336
43 : 668
44 : 334
45 : 167
46 : 502
47 : 251
48 : 754
49 : 377
50 : 1132
51 : 566
52 : 283
53 : 850
54 : 425
55 : 1276
56 : 638
57 : 319
58 : 958
59 : 479
60 : 1438
61 : 719
62 : 2158
63 : 1079
64 : 3238
65 : 1619
66 : 4858
67 : 2429
68 : 7288
69 : 3644
70 : 1822
71 : 911
72 : 2734
73 : 1367
74 : 4102
75 : 2051
76 : 6154
77 : 3077
78 : 9232
79 : 4616
80 : 2308
81 : 1154
82 : 577
83 : 1732
84 : 866
85 : 433
86 : 1300
87 : 650
88 : 325
89 : 976
90 : 488
91 : 244
92 : 122
93 : 61
94 : 184
95 : 92
96 : 46
97 : 23
98 : 70
99 : 35
100 : 106
101 : 53
102 : 160
103 : 80
104 : 40
105 : 20
106 : 10
107 : 5
108 : 16
109 : 8
110 : 4
111 : 2
112 : 1
1 113
&lt;/pre&gt;

===For checkNum(5000)===
&lt;pre&gt;
1 : 2500
2 : 1250
3 : 625
4 : 1876
5 : 938
6 : 469
7 : 1408
8 : 704
9 : 352
10 : 176
11 : 88
12 : 44
13 : 22
14 : 11
15 : 34
16 : 17
17 : 52
18 : 26
19 : 13
20 : 40
21 : 20
22 : 10
23 : 5
24 : 16
25 : 8
26 : 4
27 : 2
28 : 1
1 29
&lt;/pre&gt;
===For checkNum(25000000)===
&lt;pre&gt;
1 : 12500000
2 : 6250000
3 : 3125000
4 : 1562500
5 : 781250
6 : 390625
7 : 1171876
8 : 585938
9 : 292969
10 : 878908
11 : 439454
12 : 219727
13 : 659182
14 : 329591
15 : 988774
16 : 494387
17 : 1483162
18 : 741581
19 : 2224744
20 : 1112372
21 : 556186
22 : 278093
23 : 834280
24 : 417140
25 : 208570
26 : 104285
27 : 312856
28 : 156428
29 : 78214
30 : 39107
31 : 117322
32 : 58661
33 : 175984
34 : 87992
35 : 43996
36 : 21998
37 : 10999
38 : 32998
39 : 16499
40 : 49498
41 : 24749
42 : 74248
43 : 37124
44 : 18562
45 : 9281
46 : 27844
47 : 13922
48 : 6961
49 : 20884
50 : 10442
51 : 5221
52 : 15664
53 : 7832
54 : 3916
55 : 1958
56 : 979
57 : 2938
58 : 1469
59 : 4408
60 : 2204
61 : 1102
62 : 551
63 : 1654
64 : 827
65 : 2482
66 : 1241
67 : 3724
68 : 1862
69 : 931
70 : 2794
71 : 1397
72 : 4192
73 : 2096
74 : 1048
75 : 524
76 : 262
77 : 131
78 : 394
79 : 197
80 : 592
81 : 296
82 : 148
83 : 74
84 : 37
85 : 112
86 : 56
87 : 28
88 : 14
89 : 7
90 : 22
91 : 11
92 : 34
93 : 17
94 : 52
95 : 26
96 : 13
97 : 40
98 : 20
99 : 10
100 : 5
101 : 16
102 : 8
103 : 4
104 : 2
105 : 1
1 106
&lt;/pre&gt;

Happy Life ahead!!!
[[File:end1.png]]</text>
      <sha1>3h9z65m676w4pwdgyqg6umn204eydnq</sha1>
    </revision>
    <revision>
      <id>4398</id>
      <parentid>4397</parentid>
      <timestamp>2018-10-16T04:09:03Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* Collatz Conjecture */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="7788">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_12 Contributors of this page]

=Page Rank - How does Google Work=
One web page is having link to other page, that is a page is referring to other page. Google uses ''Page Rank'' algorithm to choose which page should be displayed first.

If we have network, connections as below:
[[File:rank0.png]]

We want to pick a leader out of all these nodes. How to pick a leader?  Why to elect a leader? It is because we want to find the super power of available nodes.                     
[[File:rank1.png]]

For example, the application wherein, we want to find the most impressive person of the  few ones. How to decide it? As shown in below figure, each node will communicate with other, randomly, we implement the count for each node, how many times, the particular node is being visited.
[[File:rank2.png]]

[[#Top]]

As shown in following, figure, all nodes are visited and each node is marked with the 
number i.e.number of times the node is visited.
[[File:rank3.png]]

The node with the maximum count, becomes the winner. Here, node with 120 count in figure 
below, is the winner. i.e. The person with 120 count in the figure is the most impressive 
person in the community being considered.
[[File:rank4.png]]

[[File:rank5.png]]

[[File:rank6.png]]

[[File:rank7.png]]


[[File:rank8.png]]

[[#Top]]

Google selects the page rank in this matter. Each web page is connected to other web page with web links. To a page, maximum link is there, that will be put on top results in Google search results.
[[File:rank9.png]]

Google uses web crawler. The crawler takes the random walk on the www network and rank the web sites.
[[File:rank10.png]]

This way Google ranks the pages and displays search results, according to page rank.
[[File:rank11.png]]

e.g.we search for ''mysore city''. Google has 10,000 results. But it displays the results in the sequence of page rank of search results, As shown in figure below.
[[File:mysore.png]]

[[#Top]]

==Page rank algorithm ==
As shown in beautiful figure below, few nodes combinely selected one as the leader, then that leader and other nodes, have selected         other as a leader. This way, finally the final leader is elected.
[[File:rank12.png|600px]]


[[File:graph00.png|600px]]

[[File:graph01.png|600px]]

==Gragh Drawing Program1==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
nx.barbell_graph(4,2)
G=nx.barbell_graph(4,2)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:Graph003.png|600px]]

==Gragh Drawing Program2==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
nx.barbell_graph(4,3)
G=nx.barbell_graph(4,3)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:
[[File:Graph004.png|600px]]

==Gragh Drawing Program3==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
nx.barbell_graph(5,3)
G=nx.barbell_graph(5,3)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:Graph005.png|600px]]

==Complete Graph==
Complete graph is a graph, wherein, each node is connected to each other nodes in a graph.

&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.complete_graph(4)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:

[[File:completegraph001.png|600px]]

==Cycle graph==

&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.cycle_graph(5)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:
[[File:cyclegraph1.png|600px]]

==Ladder graph==

&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.ladder_graph(5)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:

[[File:laddergraph.png|600px]]

==Path Graph==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.path_graph(6)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:

[[File:pathgraph.png|600px]]

=Collatz Conjecture=
Taught by Sudarshan sir and Amit sir, and Edited by Ms. Ami Tusharkant Choksi

If a number is even, divide it by ''2'', if it is odd, make multiply it by ''3'' and add ''1'', till you get ''1''. This simple problem is called, ''Collatz Conjecture''. 

[[File:collatz1.png|600px]]

[[File:collatz2.png|600px]]

[[File:collatz3.png|600px]]

[[File:collatz4.png|600px]]

[[File:collatz5.png|600px]]

Number is bigger doesn't mean more iterations are required. One can notice, from the output of the following program. 



The program to implement the same is as follows:
==Program==
&lt;pre&gt;
#collatz conjecture
#if num is even, divide it by 2
#if num is odd, new number is equal to 3n+1


def checkNum(num):
    iterations=1
    while(num!=1):
        if(num%2==0):
            num=int(num/2)            
        else:
            num = 3*num+1
        iterations+=1
        

    print(num,iterations)


#checkNum(12)#Output: 1 10
#checkNum(26)#Output: 1 11
checkNum(2000)#Output: 1 113
&lt;/pre&gt;

&lt;pre&gt;

#recursive approach

def checkNum(num):
    if num==1:
        return 1
    elif num%2==0:
        return checkNum(num/2)+1
    else:
        return checkNum(3*num +1)+1


output:
checkNum(26)
Out[27]: 11
checkNum(5000)
Out[28]: 29
&lt;/pre&gt;

==Program adding statement to print all iterations==
&lt;pre&gt;
def checkNum(num):
    iterations=1
    while(num!=1):
        if(num%2==0):
            num=int(num/2)            
        else:
            num = 3*num+1
        print(iterations,&quot;:&quot;,num)
        iterations+=1
        

    print(num,iterations)
&lt;/pre&gt;
==Output==
===For checkNum(2000)===
&lt;pre&gt;
1 : 1000
2 : 500
3 : 250
4 : 125
5 : 376
6 : 188
7 : 94
8 : 47
9 : 142
10 : 71
11 : 214
12 : 107
13 : 322
14 : 161
15 : 484
16 : 242
17 : 121
18 : 364
19 : 182
20 : 91
21 : 274
22 : 137
23 : 412
24 : 206
25 : 103
26 : 310
27 : 155
28 : 466
29 : 233
30 : 700
31 : 350
32 : 175
33 : 526
34 : 263
35 : 790
36 : 395
37 : 1186
38 : 593
39 : 1780
40 : 890
41 : 445
42 : 1336
43 : 668
44 : 334
45 : 167
46 : 502
47 : 251
48 : 754
49 : 377
50 : 1132
51 : 566
52 : 283
53 : 850
54 : 425
55 : 1276
56 : 638
57 : 319
58 : 958
59 : 479
60 : 1438
61 : 719
62 : 2158
63 : 1079
64 : 3238
65 : 1619
66 : 4858
67 : 2429
68 : 7288
69 : 3644
70 : 1822
71 : 911
72 : 2734
73 : 1367
74 : 4102
75 : 2051
76 : 6154
77 : 3077
78 : 9232
79 : 4616
80 : 2308
81 : 1154
82 : 577
83 : 1732
84 : 866
85 : 433
86 : 1300
87 : 650
88 : 325
89 : 976
90 : 488
91 : 244
92 : 122
93 : 61
94 : 184
95 : 92
96 : 46
97 : 23
98 : 70
99 : 35
100 : 106
101 : 53
102 : 160
103 : 80
104 : 40
105 : 20
106 : 10
107 : 5
108 : 16
109 : 8
110 : 4
111 : 2
112 : 1
1 113
&lt;/pre&gt;

===For checkNum(5000)===
&lt;pre&gt;
1 : 2500
2 : 1250
3 : 625
4 : 1876
5 : 938
6 : 469
7 : 1408
8 : 704
9 : 352
10 : 176
11 : 88
12 : 44
13 : 22
14 : 11
15 : 34
16 : 17
17 : 52
18 : 26
19 : 13
20 : 40
21 : 20
22 : 10
23 : 5
24 : 16
25 : 8
26 : 4
27 : 2
28 : 1
1 29
&lt;/pre&gt;
===For checkNum(25000000)===
&lt;pre&gt;
1 : 12500000
2 : 6250000
3 : 3125000
4 : 1562500
5 : 781250
6 : 390625
7 : 1171876
8 : 585938
9 : 292969
10 : 878908
11 : 439454
12 : 219727
13 : 659182
14 : 329591
15 : 988774
16 : 494387
17 : 1483162
18 : 741581
19 : 2224744
20 : 1112372
21 : 556186
22 : 278093
23 : 834280
24 : 417140
25 : 208570
26 : 104285
27 : 312856
28 : 156428
29 : 78214
30 : 39107
31 : 117322
32 : 58661
33 : 175984
34 : 87992
35 : 43996
36 : 21998
37 : 10999
38 : 32998
39 : 16499
40 : 49498
41 : 24749
42 : 74248
43 : 37124
44 : 18562
45 : 9281
46 : 27844
47 : 13922
48 : 6961
49 : 20884
50 : 10442
51 : 5221
52 : 15664
53 : 7832
54 : 3916
55 : 1958
56 : 979
57 : 2938
58 : 1469
59 : 4408
60 : 2204
61 : 1102
62 : 551
63 : 1654
64 : 827
65 : 2482
66 : 1241
67 : 3724
68 : 1862
69 : 931
70 : 2794
71 : 1397
72 : 4192
73 : 2096
74 : 1048
75 : 524
76 : 262
77 : 131
78 : 394
79 : 197
80 : 592
81 : 296
82 : 148
83 : 74
84 : 37
85 : 112
86 : 56
87 : 28
88 : 14
89 : 7
90 : 22
91 : 11
92 : 34
93 : 17
94 : 52
95 : 26
96 : 13
97 : 40
98 : 20
99 : 10
100 : 5
101 : 16
102 : 8
103 : 4
104 : 2
105 : 1
1 106
&lt;/pre&gt;

Happy Life ahead!!!
[[File:end1.png]]</text>
      <sha1>rklii06cghex0xpmbtwr33sobo9oezi</sha1>
    </revision>
    <revision>
      <id>4399</id>
      <parentid>4398</parentid>
      <timestamp>2018-10-16T04:11:23Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* Path Graph */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="7954">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_12 Contributors of this page]

=Page Rank - How does Google Work=
One web page is having link to other page, that is a page is referring to other page. Google uses ''Page Rank'' algorithm to choose which page should be displayed first.

If we have network, connections as below:
[[File:rank0.png]]

We want to pick a leader out of all these nodes. How to pick a leader?  Why to elect a leader? It is because we want to find the super power of available nodes.                     
[[File:rank1.png]]

For example, the application wherein, we want to find the most impressive person of the  few ones. How to decide it? As shown in below figure, each node will communicate with other, randomly, we implement the count for each node, how many times, the particular node is being visited.
[[File:rank2.png]]

[[#Top]]

As shown in following, figure, all nodes are visited and each node is marked with the 
number i.e.number of times the node is visited.
[[File:rank3.png]]

The node with the maximum count, becomes the winner. Here, node with 120 count in figure 
below, is the winner. i.e. The person with 120 count in the figure is the most impressive 
person in the community being considered.
[[File:rank4.png]]

[[File:rank5.png]]

[[File:rank6.png]]

[[File:rank7.png]]


[[File:rank8.png]]

[[#Top]]

Google selects the page rank in this matter. Each web page is connected to other web page with web links. To a page, maximum link is there, that will be put on top results in Google search results.
[[File:rank9.png]]

Google uses web crawler. The crawler takes the random walk on the www network and rank the web sites.
[[File:rank10.png]]

This way Google ranks the pages and displays search results, according to page rank.
[[File:rank11.png]]

e.g.we search for ''mysore city''. Google has 10,000 results. But it displays the results in the sequence of page rank of search results, As shown in figure below.
[[File:mysore.png]]

[[#Top]]

==Page rank algorithm ==
As shown in beautiful figure below, few nodes combinely selected one as the leader, then that leader and other nodes, have selected         other as a leader. This way, finally the final leader is elected.
[[File:rank12.png|600px]]


[[File:graph00.png|600px]]

[[File:graph01.png|600px]]

==Gragh Drawing Program1==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
nx.barbell_graph(4,2)
G=nx.barbell_graph(4,2)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:Graph003.png|600px]]

==Gragh Drawing Program2==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
nx.barbell_graph(4,3)
G=nx.barbell_graph(4,3)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:
[[File:Graph004.png|600px]]

==Gragh Drawing Program3==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
nx.barbell_graph(5,3)
G=nx.barbell_graph(5,3)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:Graph005.png|600px]]

==Complete Graph==
Complete graph is a graph, wherein, each node is connected to each other nodes in a graph.

&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.complete_graph(4)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:

[[File:completegraph001.png|600px]]

==Cycle graph==

&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.cycle_graph(5)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:
[[File:cyclegraph1.png|600px]]

==Ladder graph==

&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.ladder_graph(5)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:

[[File:laddergraph.png|600px]]

==Path Graph==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.path_graph(6)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:

[[File:pathgraph.png|600px]]


==Star Graph==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.star_graph(5)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:stargraph.png|600px]]

=Collatz Conjecture=
Taught by Sudarshan sir and Amit sir, and Edited by Ms. Ami Tusharkant Choksi

If a number is even, divide it by ''2'', if it is odd, make multiply it by ''3'' and add ''1'', till you get ''1''. This simple problem is called, ''Collatz Conjecture''. 

[[File:collatz1.png|600px]]

[[File:collatz2.png|600px]]

[[File:collatz3.png|600px]]

[[File:collatz4.png|600px]]

[[File:collatz5.png|600px]]

Number is bigger doesn't mean more iterations are required. One can notice, from the output of the following program. 



The program to implement the same is as follows:
==Program==
&lt;pre&gt;
#collatz conjecture
#if num is even, divide it by 2
#if num is odd, new number is equal to 3n+1


def checkNum(num):
    iterations=1
    while(num!=1):
        if(num%2==0):
            num=int(num/2)            
        else:
            num = 3*num+1
        iterations+=1
        

    print(num,iterations)


#checkNum(12)#Output: 1 10
#checkNum(26)#Output: 1 11
checkNum(2000)#Output: 1 113
&lt;/pre&gt;

&lt;pre&gt;

#recursive approach

def checkNum(num):
    if num==1:
        return 1
    elif num%2==0:
        return checkNum(num/2)+1
    else:
        return checkNum(3*num +1)+1


output:
checkNum(26)
Out[27]: 11
checkNum(5000)
Out[28]: 29
&lt;/pre&gt;

==Program adding statement to print all iterations==
&lt;pre&gt;
def checkNum(num):
    iterations=1
    while(num!=1):
        if(num%2==0):
            num=int(num/2)            
        else:
            num = 3*num+1
        print(iterations,&quot;:&quot;,num)
        iterations+=1
        

    print(num,iterations)
&lt;/pre&gt;
==Output==
===For checkNum(2000)===
&lt;pre&gt;
1 : 1000
2 : 500
3 : 250
4 : 125
5 : 376
6 : 188
7 : 94
8 : 47
9 : 142
10 : 71
11 : 214
12 : 107
13 : 322
14 : 161
15 : 484
16 : 242
17 : 121
18 : 364
19 : 182
20 : 91
21 : 274
22 : 137
23 : 412
24 : 206
25 : 103
26 : 310
27 : 155
28 : 466
29 : 233
30 : 700
31 : 350
32 : 175
33 : 526
34 : 263
35 : 790
36 : 395
37 : 1186
38 : 593
39 : 1780
40 : 890
41 : 445
42 : 1336
43 : 668
44 : 334
45 : 167
46 : 502
47 : 251
48 : 754
49 : 377
50 : 1132
51 : 566
52 : 283
53 : 850
54 : 425
55 : 1276
56 : 638
57 : 319
58 : 958
59 : 479
60 : 1438
61 : 719
62 : 2158
63 : 1079
64 : 3238
65 : 1619
66 : 4858
67 : 2429
68 : 7288
69 : 3644
70 : 1822
71 : 911
72 : 2734
73 : 1367
74 : 4102
75 : 2051
76 : 6154
77 : 3077
78 : 9232
79 : 4616
80 : 2308
81 : 1154
82 : 577
83 : 1732
84 : 866
85 : 433
86 : 1300
87 : 650
88 : 325
89 : 976
90 : 488
91 : 244
92 : 122
93 : 61
94 : 184
95 : 92
96 : 46
97 : 23
98 : 70
99 : 35
100 : 106
101 : 53
102 : 160
103 : 80
104 : 40
105 : 20
106 : 10
107 : 5
108 : 16
109 : 8
110 : 4
111 : 2
112 : 1
1 113
&lt;/pre&gt;

===For checkNum(5000)===
&lt;pre&gt;
1 : 2500
2 : 1250
3 : 625
4 : 1876
5 : 938
6 : 469
7 : 1408
8 : 704
9 : 352
10 : 176
11 : 88
12 : 44
13 : 22
14 : 11
15 : 34
16 : 17
17 : 52
18 : 26
19 : 13
20 : 40
21 : 20
22 : 10
23 : 5
24 : 16
25 : 8
26 : 4
27 : 2
28 : 1
1 29
&lt;/pre&gt;
===For checkNum(25000000)===
&lt;pre&gt;
1 : 12500000
2 : 6250000
3 : 3125000
4 : 1562500
5 : 781250
6 : 390625
7 : 1171876
8 : 585938
9 : 292969
10 : 878908
11 : 439454
12 : 219727
13 : 659182
14 : 329591
15 : 988774
16 : 494387
17 : 1483162
18 : 741581
19 : 2224744
20 : 1112372
21 : 556186
22 : 278093
23 : 834280
24 : 417140
25 : 208570
26 : 104285
27 : 312856
28 : 156428
29 : 78214
30 : 39107
31 : 117322
32 : 58661
33 : 175984
34 : 87992
35 : 43996
36 : 21998
37 : 10999
38 : 32998
39 : 16499
40 : 49498
41 : 24749
42 : 74248
43 : 37124
44 : 18562
45 : 9281
46 : 27844
47 : 13922
48 : 6961
49 : 20884
50 : 10442
51 : 5221
52 : 15664
53 : 7832
54 : 3916
55 : 1958
56 : 979
57 : 2938
58 : 1469
59 : 4408
60 : 2204
61 : 1102
62 : 551
63 : 1654
64 : 827
65 : 2482
66 : 1241
67 : 3724
68 : 1862
69 : 931
70 : 2794
71 : 1397
72 : 4192
73 : 2096
74 : 1048
75 : 524
76 : 262
77 : 131
78 : 394
79 : 197
80 : 592
81 : 296
82 : 148
83 : 74
84 : 37
85 : 112
86 : 56
87 : 28
88 : 14
89 : 7
90 : 22
91 : 11
92 : 34
93 : 17
94 : 52
95 : 26
96 : 13
97 : 40
98 : 20
99 : 10
100 : 5
101 : 16
102 : 8
103 : 4
104 : 2
105 : 1
1 106
&lt;/pre&gt;

Happy Life ahead!!!
[[File:end1.png]]</text>
      <sha1>pplhqb5itzza4b0prk70jjarrf4ajqp</sha1>
    </revision>
    <revision>
      <id>4400</id>
      <parentid>4399</parentid>
      <timestamp>2018-10-16T04:12:01Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* Path Graph */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="7953">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_12 Contributors of this page]

=Page Rank - How does Google Work=
One web page is having link to other page, that is a page is referring to other page. Google uses ''Page Rank'' algorithm to choose which page should be displayed first.

If we have network, connections as below:
[[File:rank0.png]]

We want to pick a leader out of all these nodes. How to pick a leader?  Why to elect a leader? It is because we want to find the super power of available nodes.                     
[[File:rank1.png]]

For example, the application wherein, we want to find the most impressive person of the  few ones. How to decide it? As shown in below figure, each node will communicate with other, randomly, we implement the count for each node, how many times, the particular node is being visited.
[[File:rank2.png]]

[[#Top]]

As shown in following, figure, all nodes are visited and each node is marked with the 
number i.e.number of times the node is visited.
[[File:rank3.png]]

The node with the maximum count, becomes the winner. Here, node with 120 count in figure 
below, is the winner. i.e. The person with 120 count in the figure is the most impressive 
person in the community being considered.
[[File:rank4.png]]

[[File:rank5.png]]

[[File:rank6.png]]

[[File:rank7.png]]


[[File:rank8.png]]

[[#Top]]

Google selects the page rank in this matter. Each web page is connected to other web page with web links. To a page, maximum link is there, that will be put on top results in Google search results.
[[File:rank9.png]]

Google uses web crawler. The crawler takes the random walk on the www network and rank the web sites.
[[File:rank10.png]]

This way Google ranks the pages and displays search results, according to page rank.
[[File:rank11.png]]

e.g.we search for ''mysore city''. Google has 10,000 results. But it displays the results in the sequence of page rank of search results, As shown in figure below.
[[File:mysore.png]]

[[#Top]]

==Page rank algorithm ==
As shown in beautiful figure below, few nodes combinely selected one as the leader, then that leader and other nodes, have selected         other as a leader. This way, finally the final leader is elected.
[[File:rank12.png|600px]]


[[File:graph00.png|600px]]

[[File:graph01.png|600px]]

==Gragh Drawing Program1==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
nx.barbell_graph(4,2)
G=nx.barbell_graph(4,2)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:Graph003.png|600px]]

==Gragh Drawing Program2==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
nx.barbell_graph(4,3)
G=nx.barbell_graph(4,3)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:
[[File:Graph004.png|600px]]

==Gragh Drawing Program3==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
nx.barbell_graph(5,3)
G=nx.barbell_graph(5,3)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:Graph005.png|600px]]

==Complete Graph==
Complete graph is a graph, wherein, each node is connected to each other nodes in a graph.

&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.complete_graph(4)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:

[[File:completegraph001.png|600px]]

==Cycle graph==

&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.cycle_graph(5)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:
[[File:cyclegraph1.png|600px]]

==Ladder graph==

&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.ladder_graph(5)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:

[[File:laddergraph.png|600px]]

==Path Graph==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.path_graph(6)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:

[[File:pathgraph.png|600px]]

==Star Graph==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.star_graph(5)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:stargraph.png|600px]]

=Collatz Conjecture=
Taught by Sudarshan sir and Amit sir, and Edited by Ms. Ami Tusharkant Choksi

If a number is even, divide it by ''2'', if it is odd, make multiply it by ''3'' and add ''1'', till you get ''1''. This simple problem is called, ''Collatz Conjecture''. 

[[File:collatz1.png|600px]]

[[File:collatz2.png|600px]]

[[File:collatz3.png|600px]]

[[File:collatz4.png|600px]]

[[File:collatz5.png|600px]]

Number is bigger doesn't mean more iterations are required. One can notice, from the output of the following program. 



The program to implement the same is as follows:
==Program==
&lt;pre&gt;
#collatz conjecture
#if num is even, divide it by 2
#if num is odd, new number is equal to 3n+1


def checkNum(num):
    iterations=1
    while(num!=1):
        if(num%2==0):
            num=int(num/2)            
        else:
            num = 3*num+1
        iterations+=1
        

    print(num,iterations)


#checkNum(12)#Output: 1 10
#checkNum(26)#Output: 1 11
checkNum(2000)#Output: 1 113
&lt;/pre&gt;

&lt;pre&gt;

#recursive approach

def checkNum(num):
    if num==1:
        return 1
    elif num%2==0:
        return checkNum(num/2)+1
    else:
        return checkNum(3*num +1)+1


output:
checkNum(26)
Out[27]: 11
checkNum(5000)
Out[28]: 29
&lt;/pre&gt;

==Program adding statement to print all iterations==
&lt;pre&gt;
def checkNum(num):
    iterations=1
    while(num!=1):
        if(num%2==0):
            num=int(num/2)            
        else:
            num = 3*num+1
        print(iterations,&quot;:&quot;,num)
        iterations+=1
        

    print(num,iterations)
&lt;/pre&gt;
==Output==
===For checkNum(2000)===
&lt;pre&gt;
1 : 1000
2 : 500
3 : 250
4 : 125
5 : 376
6 : 188
7 : 94
8 : 47
9 : 142
10 : 71
11 : 214
12 : 107
13 : 322
14 : 161
15 : 484
16 : 242
17 : 121
18 : 364
19 : 182
20 : 91
21 : 274
22 : 137
23 : 412
24 : 206
25 : 103
26 : 310
27 : 155
28 : 466
29 : 233
30 : 700
31 : 350
32 : 175
33 : 526
34 : 263
35 : 790
36 : 395
37 : 1186
38 : 593
39 : 1780
40 : 890
41 : 445
42 : 1336
43 : 668
44 : 334
45 : 167
46 : 502
47 : 251
48 : 754
49 : 377
50 : 1132
51 : 566
52 : 283
53 : 850
54 : 425
55 : 1276
56 : 638
57 : 319
58 : 958
59 : 479
60 : 1438
61 : 719
62 : 2158
63 : 1079
64 : 3238
65 : 1619
66 : 4858
67 : 2429
68 : 7288
69 : 3644
70 : 1822
71 : 911
72 : 2734
73 : 1367
74 : 4102
75 : 2051
76 : 6154
77 : 3077
78 : 9232
79 : 4616
80 : 2308
81 : 1154
82 : 577
83 : 1732
84 : 866
85 : 433
86 : 1300
87 : 650
88 : 325
89 : 976
90 : 488
91 : 244
92 : 122
93 : 61
94 : 184
95 : 92
96 : 46
97 : 23
98 : 70
99 : 35
100 : 106
101 : 53
102 : 160
103 : 80
104 : 40
105 : 20
106 : 10
107 : 5
108 : 16
109 : 8
110 : 4
111 : 2
112 : 1
1 113
&lt;/pre&gt;

===For checkNum(5000)===
&lt;pre&gt;
1 : 2500
2 : 1250
3 : 625
4 : 1876
5 : 938
6 : 469
7 : 1408
8 : 704
9 : 352
10 : 176
11 : 88
12 : 44
13 : 22
14 : 11
15 : 34
16 : 17
17 : 52
18 : 26
19 : 13
20 : 40
21 : 20
22 : 10
23 : 5
24 : 16
25 : 8
26 : 4
27 : 2
28 : 1
1 29
&lt;/pre&gt;
===For checkNum(25000000)===
&lt;pre&gt;
1 : 12500000
2 : 6250000
3 : 3125000
4 : 1562500
5 : 781250
6 : 390625
7 : 1171876
8 : 585938
9 : 292969
10 : 878908
11 : 439454
12 : 219727
13 : 659182
14 : 329591
15 : 988774
16 : 494387
17 : 1483162
18 : 741581
19 : 2224744
20 : 1112372
21 : 556186
22 : 278093
23 : 834280
24 : 417140
25 : 208570
26 : 104285
27 : 312856
28 : 156428
29 : 78214
30 : 39107
31 : 117322
32 : 58661
33 : 175984
34 : 87992
35 : 43996
36 : 21998
37 : 10999
38 : 32998
39 : 16499
40 : 49498
41 : 24749
42 : 74248
43 : 37124
44 : 18562
45 : 9281
46 : 27844
47 : 13922
48 : 6961
49 : 20884
50 : 10442
51 : 5221
52 : 15664
53 : 7832
54 : 3916
55 : 1958
56 : 979
57 : 2938
58 : 1469
59 : 4408
60 : 2204
61 : 1102
62 : 551
63 : 1654
64 : 827
65 : 2482
66 : 1241
67 : 3724
68 : 1862
69 : 931
70 : 2794
71 : 1397
72 : 4192
73 : 2096
74 : 1048
75 : 524
76 : 262
77 : 131
78 : 394
79 : 197
80 : 592
81 : 296
82 : 148
83 : 74
84 : 37
85 : 112
86 : 56
87 : 28
88 : 14
89 : 7
90 : 22
91 : 11
92 : 34
93 : 17
94 : 52
95 : 26
96 : 13
97 : 40
98 : 20
99 : 10
100 : 5
101 : 16
102 : 8
103 : 4
104 : 2
105 : 1
1 106
&lt;/pre&gt;

Happy Life ahead!!!
[[File:end1.png]]</text>
      <sha1>3pq5mk8h2yjz68ndgv9vwe8sfrm3l95</sha1>
    </revision>
    <revision>
      <id>4402</id>
      <parentid>4400</parentid>
      <timestamp>2018-10-16T04:14:29Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* Star Graph */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="8121">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_12 Contributors of this page]

=Page Rank - How does Google Work=
One web page is having link to other page, that is a page is referring to other page. Google uses ''Page Rank'' algorithm to choose which page should be displayed first.

If we have network, connections as below:
[[File:rank0.png]]

We want to pick a leader out of all these nodes. How to pick a leader?  Why to elect a leader? It is because we want to find the super power of available nodes.                     
[[File:rank1.png]]

For example, the application wherein, we want to find the most impressive person of the  few ones. How to decide it? As shown in below figure, each node will communicate with other, randomly, we implement the count for each node, how many times, the particular node is being visited.
[[File:rank2.png]]

[[#Top]]

As shown in following, figure, all nodes are visited and each node is marked with the 
number i.e.number of times the node is visited.
[[File:rank3.png]]

The node with the maximum count, becomes the winner. Here, node with 120 count in figure 
below, is the winner. i.e. The person with 120 count in the figure is the most impressive 
person in the community being considered.
[[File:rank4.png]]

[[File:rank5.png]]

[[File:rank6.png]]

[[File:rank7.png]]


[[File:rank8.png]]

[[#Top]]

Google selects the page rank in this matter. Each web page is connected to other web page with web links. To a page, maximum link is there, that will be put on top results in Google search results.
[[File:rank9.png]]

Google uses web crawler. The crawler takes the random walk on the www network and rank the web sites.
[[File:rank10.png]]

This way Google ranks the pages and displays search results, according to page rank.
[[File:rank11.png]]

e.g.we search for ''mysore city''. Google has 10,000 results. But it displays the results in the sequence of page rank of search results, As shown in figure below.
[[File:mysore.png]]

[[#Top]]

==Page rank algorithm ==
As shown in beautiful figure below, few nodes combinely selected one as the leader, then that leader and other nodes, have selected         other as a leader. This way, finally the final leader is elected.
[[File:rank12.png|600px]]


[[File:graph00.png|600px]]

[[File:graph01.png|600px]]

==Gragh Drawing Program1==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
nx.barbell_graph(4,2)
G=nx.barbell_graph(4,2)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:Graph003.png|600px]]

==Gragh Drawing Program2==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
nx.barbell_graph(4,3)
G=nx.barbell_graph(4,3)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:
[[File:Graph004.png|600px]]

==Gragh Drawing Program3==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
nx.barbell_graph(5,3)
G=nx.barbell_graph(5,3)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:Graph005.png|600px]]

==Complete Graph==
Complete graph is a graph, wherein, each node is connected to each other nodes in a graph.

&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.complete_graph(4)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:

[[File:completegraph001.png|600px]]

==Cycle graph==

&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.cycle_graph(5)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:
[[File:cyclegraph1.png|600px]]

==Ladder graph==

&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.ladder_graph(5)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:

[[File:laddergraph.png|600px]]

==Path Graph==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.path_graph(6)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:

[[File:pathgraph.png|600px]]

==Star Graph==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.star_graph(5)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:stargraph.png|600px]]


==Star Graph1==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.star_graph(4)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:stargraph4points.png]]

=Collatz Conjecture=
Taught by Sudarshan sir and Amit sir, and Edited by Ms. Ami Tusharkant Choksi

If a number is even, divide it by ''2'', if it is odd, make multiply it by ''3'' and add ''1'', till you get ''1''. This simple problem is called, ''Collatz Conjecture''. 

[[File:collatz1.png|600px]]

[[File:collatz2.png|600px]]

[[File:collatz3.png|600px]]

[[File:collatz4.png|600px]]

[[File:collatz5.png|600px]]

Number is bigger doesn't mean more iterations are required. One can notice, from the output of the following program. 



The program to implement the same is as follows:
==Program==
&lt;pre&gt;
#collatz conjecture
#if num is even, divide it by 2
#if num is odd, new number is equal to 3n+1


def checkNum(num):
    iterations=1
    while(num!=1):
        if(num%2==0):
            num=int(num/2)            
        else:
            num = 3*num+1
        iterations+=1
        

    print(num,iterations)


#checkNum(12)#Output: 1 10
#checkNum(26)#Output: 1 11
checkNum(2000)#Output: 1 113
&lt;/pre&gt;

&lt;pre&gt;

#recursive approach

def checkNum(num):
    if num==1:
        return 1
    elif num%2==0:
        return checkNum(num/2)+1
    else:
        return checkNum(3*num +1)+1


output:
checkNum(26)
Out[27]: 11
checkNum(5000)
Out[28]: 29
&lt;/pre&gt;

==Program adding statement to print all iterations==
&lt;pre&gt;
def checkNum(num):
    iterations=1
    while(num!=1):
        if(num%2==0):
            num=int(num/2)            
        else:
            num = 3*num+1
        print(iterations,&quot;:&quot;,num)
        iterations+=1
        

    print(num,iterations)
&lt;/pre&gt;
==Output==
===For checkNum(2000)===
&lt;pre&gt;
1 : 1000
2 : 500
3 : 250
4 : 125
5 : 376
6 : 188
7 : 94
8 : 47
9 : 142
10 : 71
11 : 214
12 : 107
13 : 322
14 : 161
15 : 484
16 : 242
17 : 121
18 : 364
19 : 182
20 : 91
21 : 274
22 : 137
23 : 412
24 : 206
25 : 103
26 : 310
27 : 155
28 : 466
29 : 233
30 : 700
31 : 350
32 : 175
33 : 526
34 : 263
35 : 790
36 : 395
37 : 1186
38 : 593
39 : 1780
40 : 890
41 : 445
42 : 1336
43 : 668
44 : 334
45 : 167
46 : 502
47 : 251
48 : 754
49 : 377
50 : 1132
51 : 566
52 : 283
53 : 850
54 : 425
55 : 1276
56 : 638
57 : 319
58 : 958
59 : 479
60 : 1438
61 : 719
62 : 2158
63 : 1079
64 : 3238
65 : 1619
66 : 4858
67 : 2429
68 : 7288
69 : 3644
70 : 1822
71 : 911
72 : 2734
73 : 1367
74 : 4102
75 : 2051
76 : 6154
77 : 3077
78 : 9232
79 : 4616
80 : 2308
81 : 1154
82 : 577
83 : 1732
84 : 866
85 : 433
86 : 1300
87 : 650
88 : 325
89 : 976
90 : 488
91 : 244
92 : 122
93 : 61
94 : 184
95 : 92
96 : 46
97 : 23
98 : 70
99 : 35
100 : 106
101 : 53
102 : 160
103 : 80
104 : 40
105 : 20
106 : 10
107 : 5
108 : 16
109 : 8
110 : 4
111 : 2
112 : 1
1 113
&lt;/pre&gt;

===For checkNum(5000)===
&lt;pre&gt;
1 : 2500
2 : 1250
3 : 625
4 : 1876
5 : 938
6 : 469
7 : 1408
8 : 704
9 : 352
10 : 176
11 : 88
12 : 44
13 : 22
14 : 11
15 : 34
16 : 17
17 : 52
18 : 26
19 : 13
20 : 40
21 : 20
22 : 10
23 : 5
24 : 16
25 : 8
26 : 4
27 : 2
28 : 1
1 29
&lt;/pre&gt;
===For checkNum(25000000)===
&lt;pre&gt;
1 : 12500000
2 : 6250000
3 : 3125000
4 : 1562500
5 : 781250
6 : 390625
7 : 1171876
8 : 585938
9 : 292969
10 : 878908
11 : 439454
12 : 219727
13 : 659182
14 : 329591
15 : 988774
16 : 494387
17 : 1483162
18 : 741581
19 : 2224744
20 : 1112372
21 : 556186
22 : 278093
23 : 834280
24 : 417140
25 : 208570
26 : 104285
27 : 312856
28 : 156428
29 : 78214
30 : 39107
31 : 117322
32 : 58661
33 : 175984
34 : 87992
35 : 43996
36 : 21998
37 : 10999
38 : 32998
39 : 16499
40 : 49498
41 : 24749
42 : 74248
43 : 37124
44 : 18562
45 : 9281
46 : 27844
47 : 13922
48 : 6961
49 : 20884
50 : 10442
51 : 5221
52 : 15664
53 : 7832
54 : 3916
55 : 1958
56 : 979
57 : 2938
58 : 1469
59 : 4408
60 : 2204
61 : 1102
62 : 551
63 : 1654
64 : 827
65 : 2482
66 : 1241
67 : 3724
68 : 1862
69 : 931
70 : 2794
71 : 1397
72 : 4192
73 : 2096
74 : 1048
75 : 524
76 : 262
77 : 131
78 : 394
79 : 197
80 : 592
81 : 296
82 : 148
83 : 74
84 : 37
85 : 112
86 : 56
87 : 28
88 : 14
89 : 7
90 : 22
91 : 11
92 : 34
93 : 17
94 : 52
95 : 26
96 : 13
97 : 40
98 : 20
99 : 10
100 : 5
101 : 16
102 : 8
103 : 4
104 : 2
105 : 1
1 106
&lt;/pre&gt;

Happy Life ahead!!!
[[File:end1.png]]</text>
      <sha1>6q9sud2o8nb7x8jjkjyfupx5932txs9</sha1>
    </revision>
    <revision>
      <id>4404</id>
      <parentid>4402</parentid>
      <timestamp>2018-10-16T04:15:04Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* Star Graph1 */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="8127">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_12 Contributors of this page]

=Page Rank - How does Google Work=
One web page is having link to other page, that is a page is referring to other page. Google uses ''Page Rank'' algorithm to choose which page should be displayed first.

If we have network, connections as below:
[[File:rank0.png]]

We want to pick a leader out of all these nodes. How to pick a leader?  Why to elect a leader? It is because we want to find the super power of available nodes.                     
[[File:rank1.png]]

For example, the application wherein, we want to find the most impressive person of the  few ones. How to decide it? As shown in below figure, each node will communicate with other, randomly, we implement the count for each node, how many times, the particular node is being visited.
[[File:rank2.png]]

[[#Top]]

As shown in following, figure, all nodes are visited and each node is marked with the 
number i.e.number of times the node is visited.
[[File:rank3.png]]

The node with the maximum count, becomes the winner. Here, node with 120 count in figure 
below, is the winner. i.e. The person with 120 count in the figure is the most impressive 
person in the community being considered.
[[File:rank4.png]]

[[File:rank5.png]]

[[File:rank6.png]]

[[File:rank7.png]]


[[File:rank8.png]]

[[#Top]]

Google selects the page rank in this matter. Each web page is connected to other web page with web links. To a page, maximum link is there, that will be put on top results in Google search results.
[[File:rank9.png]]

Google uses web crawler. The crawler takes the random walk on the www network and rank the web sites.
[[File:rank10.png]]

This way Google ranks the pages and displays search results, according to page rank.
[[File:rank11.png]]

e.g.we search for ''mysore city''. Google has 10,000 results. But it displays the results in the sequence of page rank of search results, As shown in figure below.
[[File:mysore.png]]

[[#Top]]

==Page rank algorithm ==
As shown in beautiful figure below, few nodes combinely selected one as the leader, then that leader and other nodes, have selected         other as a leader. This way, finally the final leader is elected.
[[File:rank12.png|600px]]


[[File:graph00.png|600px]]

[[File:graph01.png|600px]]

==Gragh Drawing Program1==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
nx.barbell_graph(4,2)
G=nx.barbell_graph(4,2)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:Graph003.png|600px]]

==Gragh Drawing Program2==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
nx.barbell_graph(4,3)
G=nx.barbell_graph(4,3)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:
[[File:Graph004.png|600px]]

==Gragh Drawing Program3==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
nx.barbell_graph(5,3)
G=nx.barbell_graph(5,3)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:Graph005.png|600px]]

==Complete Graph==
Complete graph is a graph, wherein, each node is connected to each other nodes in a graph.

&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.complete_graph(4)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:

[[File:completegraph001.png|600px]]

==Cycle graph==

&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.cycle_graph(5)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:
[[File:cyclegraph1.png|600px]]

==Ladder graph==

&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.ladder_graph(5)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:

[[File:laddergraph.png|600px]]

==Path Graph==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.path_graph(6)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:

[[File:pathgraph.png|600px]]

==Star Graph==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.star_graph(5)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:stargraph.png|600px]]


==Star Graph1==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.star_graph(4)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:stargraph4points.png|600px]]

=Collatz Conjecture=
Taught by Sudarshan sir and Amit sir, and Edited by Ms. Ami Tusharkant Choksi

If a number is even, divide it by ''2'', if it is odd, make multiply it by ''3'' and add ''1'', till you get ''1''. This simple problem is called, ''Collatz Conjecture''. 

[[File:collatz1.png|600px]]

[[File:collatz2.png|600px]]

[[File:collatz3.png|600px]]

[[File:collatz4.png|600px]]

[[File:collatz5.png|600px]]

Number is bigger doesn't mean more iterations are required. One can notice, from the output of the following program. 



The program to implement the same is as follows:
==Program==
&lt;pre&gt;
#collatz conjecture
#if num is even, divide it by 2
#if num is odd, new number is equal to 3n+1


def checkNum(num):
    iterations=1
    while(num!=1):
        if(num%2==0):
            num=int(num/2)            
        else:
            num = 3*num+1
        iterations+=1
        

    print(num,iterations)


#checkNum(12)#Output: 1 10
#checkNum(26)#Output: 1 11
checkNum(2000)#Output: 1 113
&lt;/pre&gt;

&lt;pre&gt;

#recursive approach

def checkNum(num):
    if num==1:
        return 1
    elif num%2==0:
        return checkNum(num/2)+1
    else:
        return checkNum(3*num +1)+1


output:
checkNum(26)
Out[27]: 11
checkNum(5000)
Out[28]: 29
&lt;/pre&gt;

==Program adding statement to print all iterations==
&lt;pre&gt;
def checkNum(num):
    iterations=1
    while(num!=1):
        if(num%2==0):
            num=int(num/2)            
        else:
            num = 3*num+1
        print(iterations,&quot;:&quot;,num)
        iterations+=1
        

    print(num,iterations)
&lt;/pre&gt;
==Output==
===For checkNum(2000)===
&lt;pre&gt;
1 : 1000
2 : 500
3 : 250
4 : 125
5 : 376
6 : 188
7 : 94
8 : 47
9 : 142
10 : 71
11 : 214
12 : 107
13 : 322
14 : 161
15 : 484
16 : 242
17 : 121
18 : 364
19 : 182
20 : 91
21 : 274
22 : 137
23 : 412
24 : 206
25 : 103
26 : 310
27 : 155
28 : 466
29 : 233
30 : 700
31 : 350
32 : 175
33 : 526
34 : 263
35 : 790
36 : 395
37 : 1186
38 : 593
39 : 1780
40 : 890
41 : 445
42 : 1336
43 : 668
44 : 334
45 : 167
46 : 502
47 : 251
48 : 754
49 : 377
50 : 1132
51 : 566
52 : 283
53 : 850
54 : 425
55 : 1276
56 : 638
57 : 319
58 : 958
59 : 479
60 : 1438
61 : 719
62 : 2158
63 : 1079
64 : 3238
65 : 1619
66 : 4858
67 : 2429
68 : 7288
69 : 3644
70 : 1822
71 : 911
72 : 2734
73 : 1367
74 : 4102
75 : 2051
76 : 6154
77 : 3077
78 : 9232
79 : 4616
80 : 2308
81 : 1154
82 : 577
83 : 1732
84 : 866
85 : 433
86 : 1300
87 : 650
88 : 325
89 : 976
90 : 488
91 : 244
92 : 122
93 : 61
94 : 184
95 : 92
96 : 46
97 : 23
98 : 70
99 : 35
100 : 106
101 : 53
102 : 160
103 : 80
104 : 40
105 : 20
106 : 10
107 : 5
108 : 16
109 : 8
110 : 4
111 : 2
112 : 1
1 113
&lt;/pre&gt;

===For checkNum(5000)===
&lt;pre&gt;
1 : 2500
2 : 1250
3 : 625
4 : 1876
5 : 938
6 : 469
7 : 1408
8 : 704
9 : 352
10 : 176
11 : 88
12 : 44
13 : 22
14 : 11
15 : 34
16 : 17
17 : 52
18 : 26
19 : 13
20 : 40
21 : 20
22 : 10
23 : 5
24 : 16
25 : 8
26 : 4
27 : 2
28 : 1
1 29
&lt;/pre&gt;
===For checkNum(25000000)===
&lt;pre&gt;
1 : 12500000
2 : 6250000
3 : 3125000
4 : 1562500
5 : 781250
6 : 390625
7 : 1171876
8 : 585938
9 : 292969
10 : 878908
11 : 439454
12 : 219727
13 : 659182
14 : 329591
15 : 988774
16 : 494387
17 : 1483162
18 : 741581
19 : 2224744
20 : 1112372
21 : 556186
22 : 278093
23 : 834280
24 : 417140
25 : 208570
26 : 104285
27 : 312856
28 : 156428
29 : 78214
30 : 39107
31 : 117322
32 : 58661
33 : 175984
34 : 87992
35 : 43996
36 : 21998
37 : 10999
38 : 32998
39 : 16499
40 : 49498
41 : 24749
42 : 74248
43 : 37124
44 : 18562
45 : 9281
46 : 27844
47 : 13922
48 : 6961
49 : 20884
50 : 10442
51 : 5221
52 : 15664
53 : 7832
54 : 3916
55 : 1958
56 : 979
57 : 2938
58 : 1469
59 : 4408
60 : 2204
61 : 1102
62 : 551
63 : 1654
64 : 827
65 : 2482
66 : 1241
67 : 3724
68 : 1862
69 : 931
70 : 2794
71 : 1397
72 : 4192
73 : 2096
74 : 1048
75 : 524
76 : 262
77 : 131
78 : 394
79 : 197
80 : 592
81 : 296
82 : 148
83 : 74
84 : 37
85 : 112
86 : 56
87 : 28
88 : 14
89 : 7
90 : 22
91 : 11
92 : 34
93 : 17
94 : 52
95 : 26
96 : 13
97 : 40
98 : 20
99 : 10
100 : 5
101 : 16
102 : 8
103 : 4
104 : 2
105 : 1
1 106
&lt;/pre&gt;

Happy Life ahead!!!
[[File:end1.png]]</text>
      <sha1>6erytaqf6m8mh8h0kg6bsp37m3tuv7s</sha1>
    </revision>
    <revision>
      <id>4405</id>
      <parentid>4404</parentid>
      <timestamp>2018-10-16T04:16:52Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* Star Graph1 */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="8288">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_12 Contributors of this page]

=Page Rank - How does Google Work=
One web page is having link to other page, that is a page is referring to other page. Google uses ''Page Rank'' algorithm to choose which page should be displayed first.

If we have network, connections as below:
[[File:rank0.png]]

We want to pick a leader out of all these nodes. How to pick a leader?  Why to elect a leader? It is because we want to find the super power of available nodes.                     
[[File:rank1.png]]

For example, the application wherein, we want to find the most impressive person of the  few ones. How to decide it? As shown in below figure, each node will communicate with other, randomly, we implement the count for each node, how many times, the particular node is being visited.
[[File:rank2.png]]

[[#Top]]

As shown in following, figure, all nodes are visited and each node is marked with the 
number i.e.number of times the node is visited.
[[File:rank3.png]]

The node with the maximum count, becomes the winner. Here, node with 120 count in figure 
below, is the winner. i.e. The person with 120 count in the figure is the most impressive 
person in the community being considered.
[[File:rank4.png]]

[[File:rank5.png]]

[[File:rank6.png]]

[[File:rank7.png]]


[[File:rank8.png]]

[[#Top]]

Google selects the page rank in this matter. Each web page is connected to other web page with web links. To a page, maximum link is there, that will be put on top results in Google search results.
[[File:rank9.png]]

Google uses web crawler. The crawler takes the random walk on the www network and rank the web sites.
[[File:rank10.png]]

This way Google ranks the pages and displays search results, according to page rank.
[[File:rank11.png]]

e.g.we search for ''mysore city''. Google has 10,000 results. But it displays the results in the sequence of page rank of search results, As shown in figure below.
[[File:mysore.png]]

[[#Top]]

==Page rank algorithm ==
As shown in beautiful figure below, few nodes combinely selected one as the leader, then that leader and other nodes, have selected         other as a leader. This way, finally the final leader is elected.
[[File:rank12.png|600px]]


[[File:graph00.png|600px]]

[[File:graph01.png|600px]]

==Gragh Drawing Program1==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
nx.barbell_graph(4,2)
G=nx.barbell_graph(4,2)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:Graph003.png|600px]]

==Gragh Drawing Program2==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
nx.barbell_graph(4,3)
G=nx.barbell_graph(4,3)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:
[[File:Graph004.png|600px]]

==Gragh Drawing Program3==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
nx.barbell_graph(5,3)
G=nx.barbell_graph(5,3)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:Graph005.png|600px]]

==Complete Graph==
Complete graph is a graph, wherein, each node is connected to each other nodes in a graph.

&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.complete_graph(4)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:

[[File:completegraph001.png|600px]]

==Cycle graph==

&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.cycle_graph(5)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:
[[File:cyclegraph1.png|600px]]

==Ladder graph==

&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.ladder_graph(5)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:

[[File:laddergraph.png|600px]]

==Path Graph==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.path_graph(6)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:

[[File:pathgraph.png|600px]]

==Star Graph==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.star_graph(5)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:stargraph.png|600px]]


==Star Graph1==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.star_graph(4)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:stargraph4points.png|600px]]

==Wheel Graph==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.wheel_graph(4)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:

[[File:wheelgraph.png]]

=Collatz Conjecture=
Taught by Sudarshan sir and Amit sir, and Edited by Ms. Ami Tusharkant Choksi

If a number is even, divide it by ''2'', if it is odd, make multiply it by ''3'' and add ''1'', till you get ''1''. This simple problem is called, ''Collatz Conjecture''. 

[[File:collatz1.png|600px]]

[[File:collatz2.png|600px]]

[[File:collatz3.png|600px]]

[[File:collatz4.png|600px]]

[[File:collatz5.png|600px]]

Number is bigger doesn't mean more iterations are required. One can notice, from the output of the following program. 



The program to implement the same is as follows:
==Program==
&lt;pre&gt;
#collatz conjecture
#if num is even, divide it by 2
#if num is odd, new number is equal to 3n+1


def checkNum(num):
    iterations=1
    while(num!=1):
        if(num%2==0):
            num=int(num/2)            
        else:
            num = 3*num+1
        iterations+=1
        

    print(num,iterations)


#checkNum(12)#Output: 1 10
#checkNum(26)#Output: 1 11
checkNum(2000)#Output: 1 113
&lt;/pre&gt;

&lt;pre&gt;

#recursive approach

def checkNum(num):
    if num==1:
        return 1
    elif num%2==0:
        return checkNum(num/2)+1
    else:
        return checkNum(3*num +1)+1


output:
checkNum(26)
Out[27]: 11
checkNum(5000)
Out[28]: 29
&lt;/pre&gt;

==Program adding statement to print all iterations==
&lt;pre&gt;
def checkNum(num):
    iterations=1
    while(num!=1):
        if(num%2==0):
            num=int(num/2)            
        else:
            num = 3*num+1
        print(iterations,&quot;:&quot;,num)
        iterations+=1
        

    print(num,iterations)
&lt;/pre&gt;
==Output==
===For checkNum(2000)===
&lt;pre&gt;
1 : 1000
2 : 500
3 : 250
4 : 125
5 : 376
6 : 188
7 : 94
8 : 47
9 : 142
10 : 71
11 : 214
12 : 107
13 : 322
14 : 161
15 : 484
16 : 242
17 : 121
18 : 364
19 : 182
20 : 91
21 : 274
22 : 137
23 : 412
24 : 206
25 : 103
26 : 310
27 : 155
28 : 466
29 : 233
30 : 700
31 : 350
32 : 175
33 : 526
34 : 263
35 : 790
36 : 395
37 : 1186
38 : 593
39 : 1780
40 : 890
41 : 445
42 : 1336
43 : 668
44 : 334
45 : 167
46 : 502
47 : 251
48 : 754
49 : 377
50 : 1132
51 : 566
52 : 283
53 : 850
54 : 425
55 : 1276
56 : 638
57 : 319
58 : 958
59 : 479
60 : 1438
61 : 719
62 : 2158
63 : 1079
64 : 3238
65 : 1619
66 : 4858
67 : 2429
68 : 7288
69 : 3644
70 : 1822
71 : 911
72 : 2734
73 : 1367
74 : 4102
75 : 2051
76 : 6154
77 : 3077
78 : 9232
79 : 4616
80 : 2308
81 : 1154
82 : 577
83 : 1732
84 : 866
85 : 433
86 : 1300
87 : 650
88 : 325
89 : 976
90 : 488
91 : 244
92 : 122
93 : 61
94 : 184
95 : 92
96 : 46
97 : 23
98 : 70
99 : 35
100 : 106
101 : 53
102 : 160
103 : 80
104 : 40
105 : 20
106 : 10
107 : 5
108 : 16
109 : 8
110 : 4
111 : 2
112 : 1
1 113
&lt;/pre&gt;

===For checkNum(5000)===
&lt;pre&gt;
1 : 2500
2 : 1250
3 : 625
4 : 1876
5 : 938
6 : 469
7 : 1408
8 : 704
9 : 352
10 : 176
11 : 88
12 : 44
13 : 22
14 : 11
15 : 34
16 : 17
17 : 52
18 : 26
19 : 13
20 : 40
21 : 20
22 : 10
23 : 5
24 : 16
25 : 8
26 : 4
27 : 2
28 : 1
1 29
&lt;/pre&gt;
===For checkNum(25000000)===
&lt;pre&gt;
1 : 12500000
2 : 6250000
3 : 3125000
4 : 1562500
5 : 781250
6 : 390625
7 : 1171876
8 : 585938
9 : 292969
10 : 878908
11 : 439454
12 : 219727
13 : 659182
14 : 329591
15 : 988774
16 : 494387
17 : 1483162
18 : 741581
19 : 2224744
20 : 1112372
21 : 556186
22 : 278093
23 : 834280
24 : 417140
25 : 208570
26 : 104285
27 : 312856
28 : 156428
29 : 78214
30 : 39107
31 : 117322
32 : 58661
33 : 175984
34 : 87992
35 : 43996
36 : 21998
37 : 10999
38 : 32998
39 : 16499
40 : 49498
41 : 24749
42 : 74248
43 : 37124
44 : 18562
45 : 9281
46 : 27844
47 : 13922
48 : 6961
49 : 20884
50 : 10442
51 : 5221
52 : 15664
53 : 7832
54 : 3916
55 : 1958
56 : 979
57 : 2938
58 : 1469
59 : 4408
60 : 2204
61 : 1102
62 : 551
63 : 1654
64 : 827
65 : 2482
66 : 1241
67 : 3724
68 : 1862
69 : 931
70 : 2794
71 : 1397
72 : 4192
73 : 2096
74 : 1048
75 : 524
76 : 262
77 : 131
78 : 394
79 : 197
80 : 592
81 : 296
82 : 148
83 : 74
84 : 37
85 : 112
86 : 56
87 : 28
88 : 14
89 : 7
90 : 22
91 : 11
92 : 34
93 : 17
94 : 52
95 : 26
96 : 13
97 : 40
98 : 20
99 : 10
100 : 5
101 : 16
102 : 8
103 : 4
104 : 2
105 : 1
1 106
&lt;/pre&gt;

Happy Life ahead!!!
[[File:end1.png]]</text>
      <sha1>7vdbo9jzgp9xo8wtqb2ovhny2r6tm8e</sha1>
    </revision>
    <revision>
      <id>4407</id>
      <parentid>4405</parentid>
      <timestamp>2018-10-16T04:17:36Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* Wheel Graph */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="8295">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_12 Contributors of this page]

=Page Rank - How does Google Work=
One web page is having link to other page, that is a page is referring to other page. Google uses ''Page Rank'' algorithm to choose which page should be displayed first.

If we have network, connections as below:
[[File:rank0.png]]

We want to pick a leader out of all these nodes. How to pick a leader?  Why to elect a leader? It is because we want to find the super power of available nodes.                     
[[File:rank1.png]]

For example, the application wherein, we want to find the most impressive person of the  few ones. How to decide it? As shown in below figure, each node will communicate with other, randomly, we implement the count for each node, how many times, the particular node is being visited.
[[File:rank2.png]]

[[#Top]]

As shown in following, figure, all nodes are visited and each node is marked with the 
number i.e.number of times the node is visited.
[[File:rank3.png]]

The node with the maximum count, becomes the winner. Here, node with 120 count in figure 
below, is the winner. i.e. The person with 120 count in the figure is the most impressive 
person in the community being considered.
[[File:rank4.png]]

[[File:rank5.png]]

[[File:rank6.png]]

[[File:rank7.png]]


[[File:rank8.png]]

[[#Top]]

Google selects the page rank in this matter. Each web page is connected to other web page with web links. To a page, maximum link is there, that will be put on top results in Google search results.
[[File:rank9.png]]

Google uses web crawler. The crawler takes the random walk on the www network and rank the web sites.
[[File:rank10.png]]

This way Google ranks the pages and displays search results, according to page rank.
[[File:rank11.png]]

e.g.we search for ''mysore city''. Google has 10,000 results. But it displays the results in the sequence of page rank of search results, As shown in figure below.
[[File:mysore.png]]

[[#Top]]

==Page rank algorithm ==
As shown in beautiful figure below, few nodes combinely selected one as the leader, then that leader and other nodes, have selected         other as a leader. This way, finally the final leader is elected.
[[File:rank12.png|600px]]


[[File:graph00.png|600px]]

[[File:graph01.png|600px]]

==Gragh Drawing Program1==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
nx.barbell_graph(4,2)
G=nx.barbell_graph(4,2)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:Graph003.png|600px]]

==Gragh Drawing Program2==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
nx.barbell_graph(4,3)
G=nx.barbell_graph(4,3)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:
[[File:Graph004.png|600px]]

==Gragh Drawing Program3==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
nx.barbell_graph(5,3)
G=nx.barbell_graph(5,3)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:Graph005.png|600px]]

==Complete Graph==
Complete graph is a graph, wherein, each node is connected to each other nodes in a graph.

&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.complete_graph(4)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:

[[File:completegraph001.png|600px]]

==Cycle graph==

&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.cycle_graph(5)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:
[[File:cyclegraph1.png|600px]]

==Ladder graph==

&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.ladder_graph(5)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:

[[File:laddergraph.png|600px]]

==Path Graph==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.path_graph(6)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:

[[File:pathgraph.png|600px]]

==Star Graph==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.star_graph(5)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:stargraph.png|600px]]


==Star Graph1==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.star_graph(4)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:stargraph4points.png|600px]]

==Wheel Graph==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.wheel_graph(4)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:wheelgraph.png|600px]]

=Collatz Conjecture=
Taught by Sudarshan sir and Amit sir, and Edited by Ms. Ami Tusharkant Choksi

If a number is even, divide it by ''2'', if it is odd, make multiply it by ''3'' and add ''1'', till you get ''1''. This simple problem is called, ''Collatz Conjecture''. 

[[File:collatz1.png|600px]]

[[File:collatz2.png|600px]]

[[File:collatz3.png|600px]]

[[File:collatz4.png|600px]]

[[File:collatz5.png|600px]]

Number is bigger doesn't mean more iterations are required. One can notice, from the output of the following program. 



The program to implement the same is as follows:
==Program==
&lt;pre&gt;
#collatz conjecture
#if num is even, divide it by 2
#if num is odd, new number is equal to 3n+1


def checkNum(num):
    iterations=1
    while(num!=1):
        if(num%2==0):
            num=int(num/2)            
        else:
            num = 3*num+1
        iterations+=1
        

    print(num,iterations)


#checkNum(12)#Output: 1 10
#checkNum(26)#Output: 1 11
checkNum(2000)#Output: 1 113
&lt;/pre&gt;

&lt;pre&gt;

#recursive approach

def checkNum(num):
    if num==1:
        return 1
    elif num%2==0:
        return checkNum(num/2)+1
    else:
        return checkNum(3*num +1)+1


output:
checkNum(26)
Out[27]: 11
checkNum(5000)
Out[28]: 29
&lt;/pre&gt;

==Program adding statement to print all iterations==
&lt;pre&gt;
def checkNum(num):
    iterations=1
    while(num!=1):
        if(num%2==0):
            num=int(num/2)            
        else:
            num = 3*num+1
        print(iterations,&quot;:&quot;,num)
        iterations+=1
        

    print(num,iterations)
&lt;/pre&gt;
==Output==
===For checkNum(2000)===
&lt;pre&gt;
1 : 1000
2 : 500
3 : 250
4 : 125
5 : 376
6 : 188
7 : 94
8 : 47
9 : 142
10 : 71
11 : 214
12 : 107
13 : 322
14 : 161
15 : 484
16 : 242
17 : 121
18 : 364
19 : 182
20 : 91
21 : 274
22 : 137
23 : 412
24 : 206
25 : 103
26 : 310
27 : 155
28 : 466
29 : 233
30 : 700
31 : 350
32 : 175
33 : 526
34 : 263
35 : 790
36 : 395
37 : 1186
38 : 593
39 : 1780
40 : 890
41 : 445
42 : 1336
43 : 668
44 : 334
45 : 167
46 : 502
47 : 251
48 : 754
49 : 377
50 : 1132
51 : 566
52 : 283
53 : 850
54 : 425
55 : 1276
56 : 638
57 : 319
58 : 958
59 : 479
60 : 1438
61 : 719
62 : 2158
63 : 1079
64 : 3238
65 : 1619
66 : 4858
67 : 2429
68 : 7288
69 : 3644
70 : 1822
71 : 911
72 : 2734
73 : 1367
74 : 4102
75 : 2051
76 : 6154
77 : 3077
78 : 9232
79 : 4616
80 : 2308
81 : 1154
82 : 577
83 : 1732
84 : 866
85 : 433
86 : 1300
87 : 650
88 : 325
89 : 976
90 : 488
91 : 244
92 : 122
93 : 61
94 : 184
95 : 92
96 : 46
97 : 23
98 : 70
99 : 35
100 : 106
101 : 53
102 : 160
103 : 80
104 : 40
105 : 20
106 : 10
107 : 5
108 : 16
109 : 8
110 : 4
111 : 2
112 : 1
1 113
&lt;/pre&gt;

===For checkNum(5000)===
&lt;pre&gt;
1 : 2500
2 : 1250
3 : 625
4 : 1876
5 : 938
6 : 469
7 : 1408
8 : 704
9 : 352
10 : 176
11 : 88
12 : 44
13 : 22
14 : 11
15 : 34
16 : 17
17 : 52
18 : 26
19 : 13
20 : 40
21 : 20
22 : 10
23 : 5
24 : 16
25 : 8
26 : 4
27 : 2
28 : 1
1 29
&lt;/pre&gt;
===For checkNum(25000000)===
&lt;pre&gt;
1 : 12500000
2 : 6250000
3 : 3125000
4 : 1562500
5 : 781250
6 : 390625
7 : 1171876
8 : 585938
9 : 292969
10 : 878908
11 : 439454
12 : 219727
13 : 659182
14 : 329591
15 : 988774
16 : 494387
17 : 1483162
18 : 741581
19 : 2224744
20 : 1112372
21 : 556186
22 : 278093
23 : 834280
24 : 417140
25 : 208570
26 : 104285
27 : 312856
28 : 156428
29 : 78214
30 : 39107
31 : 117322
32 : 58661
33 : 175984
34 : 87992
35 : 43996
36 : 21998
37 : 10999
38 : 32998
39 : 16499
40 : 49498
41 : 24749
42 : 74248
43 : 37124
44 : 18562
45 : 9281
46 : 27844
47 : 13922
48 : 6961
49 : 20884
50 : 10442
51 : 5221
52 : 15664
53 : 7832
54 : 3916
55 : 1958
56 : 979
57 : 2938
58 : 1469
59 : 4408
60 : 2204
61 : 1102
62 : 551
63 : 1654
64 : 827
65 : 2482
66 : 1241
67 : 3724
68 : 1862
69 : 931
70 : 2794
71 : 1397
72 : 4192
73 : 2096
74 : 1048
75 : 524
76 : 262
77 : 131
78 : 394
79 : 197
80 : 592
81 : 296
82 : 148
83 : 74
84 : 37
85 : 112
86 : 56
87 : 28
88 : 14
89 : 7
90 : 22
91 : 11
92 : 34
93 : 17
94 : 52
95 : 26
96 : 13
97 : 40
98 : 20
99 : 10
100 : 5
101 : 16
102 : 8
103 : 4
104 : 2
105 : 1
1 106
&lt;/pre&gt;

Happy Life ahead!!!
[[File:end1.png]]</text>
      <sha1>cjxm6m80j3ekat0sz0gzehdpk4z5zz0</sha1>
    </revision>
    <revision>
      <id>4408</id>
      <parentid>4407</parentid>
      <timestamp>2018-10-16T04:19:21Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* Wheel Graph */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="8373">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_12 Contributors of this page]

=Page Rank - How does Google Work=
One web page is having link to other page, that is a page is referring to other page. Google uses ''Page Rank'' algorithm to choose which page should be displayed first.

If we have network, connections as below:
[[File:rank0.png]]

We want to pick a leader out of all these nodes. How to pick a leader?  Why to elect a leader? It is because we want to find the super power of available nodes.                     
[[File:rank1.png]]

For example, the application wherein, we want to find the most impressive person of the  few ones. How to decide it? As shown in below figure, each node will communicate with other, randomly, we implement the count for each node, how many times, the particular node is being visited.
[[File:rank2.png]]

[[#Top]]

As shown in following, figure, all nodes are visited and each node is marked with the 
number i.e.number of times the node is visited.
[[File:rank3.png]]

The node with the maximum count, becomes the winner. Here, node with 120 count in figure 
below, is the winner. i.e. The person with 120 count in the figure is the most impressive 
person in the community being considered.
[[File:rank4.png]]

[[File:rank5.png]]

[[File:rank6.png]]

[[File:rank7.png]]


[[File:rank8.png]]

[[#Top]]

Google selects the page rank in this matter. Each web page is connected to other web page with web links. To a page, maximum link is there, that will be put on top results in Google search results.
[[File:rank9.png]]

Google uses web crawler. The crawler takes the random walk on the www network and rank the web sites.
[[File:rank10.png]]

This way Google ranks the pages and displays search results, according to page rank.
[[File:rank11.png]]

e.g.we search for ''mysore city''. Google has 10,000 results. But it displays the results in the sequence of page rank of search results, As shown in figure below.
[[File:mysore.png]]

[[#Top]]

==Page rank algorithm ==
As shown in beautiful figure below, few nodes combinely selected one as the leader, then that leader and other nodes, have selected         other as a leader. This way, finally the final leader is elected.
[[File:rank12.png|600px]]


[[File:graph00.png|600px]]

[[File:graph01.png|600px]]

==Gragh Drawing Program1==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
nx.barbell_graph(4,2)
G=nx.barbell_graph(4,2)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:Graph003.png|600px]]

==Gragh Drawing Program2==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
nx.barbell_graph(4,3)
G=nx.barbell_graph(4,3)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:
[[File:Graph004.png|600px]]

==Gragh Drawing Program3==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
nx.barbell_graph(5,3)
G=nx.barbell_graph(5,3)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:Graph005.png|600px]]

==Complete Graph==
Complete graph is a graph, wherein, each node is connected to each other nodes in a graph.

&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.complete_graph(4)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:

[[File:completegraph001.png|600px]]

==Cycle graph==

&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.cycle_graph(5)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:
[[File:cyclegraph1.png|600px]]

==Ladder graph==

&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.ladder_graph(5)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:

[[File:laddergraph.png|600px]]

==Path Graph==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.path_graph(6)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:

[[File:pathgraph.png|600px]]

==Star Graph==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.star_graph(5)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:stargraph.png|600px]]


==Star Graph1==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.star_graph(4)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:stargraph4points.png|600px]]

==Wheel Graph==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.wheel_graph(4)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:wheelgraph.png|600px]]


==Wheel Graph1==
&lt;pre&gt;
&lt;/pre&gt;

Output:

[[File:wheelgraph5nodes.png|600px]]

=Collatz Conjecture=
Taught by Sudarshan sir and Amit sir, and Edited by Ms. Ami Tusharkant Choksi

If a number is even, divide it by ''2'', if it is odd, make multiply it by ''3'' and add ''1'', till you get ''1''. This simple problem is called, ''Collatz Conjecture''. 

[[File:collatz1.png|600px]]

[[File:collatz2.png|600px]]

[[File:collatz3.png|600px]]

[[File:collatz4.png|600px]]

[[File:collatz5.png|600px]]

Number is bigger doesn't mean more iterations are required. One can notice, from the output of the following program. 



The program to implement the same is as follows:
==Program==
&lt;pre&gt;
#collatz conjecture
#if num is even, divide it by 2
#if num is odd, new number is equal to 3n+1


def checkNum(num):
    iterations=1
    while(num!=1):
        if(num%2==0):
            num=int(num/2)            
        else:
            num = 3*num+1
        iterations+=1
        

    print(num,iterations)


#checkNum(12)#Output: 1 10
#checkNum(26)#Output: 1 11
checkNum(2000)#Output: 1 113
&lt;/pre&gt;

&lt;pre&gt;

#recursive approach

def checkNum(num):
    if num==1:
        return 1
    elif num%2==0:
        return checkNum(num/2)+1
    else:
        return checkNum(3*num +1)+1


output:
checkNum(26)
Out[27]: 11
checkNum(5000)
Out[28]: 29
&lt;/pre&gt;

==Program adding statement to print all iterations==
&lt;pre&gt;
def checkNum(num):
    iterations=1
    while(num!=1):
        if(num%2==0):
            num=int(num/2)            
        else:
            num = 3*num+1
        print(iterations,&quot;:&quot;,num)
        iterations+=1
        

    print(num,iterations)
&lt;/pre&gt;
==Output==
===For checkNum(2000)===
&lt;pre&gt;
1 : 1000
2 : 500
3 : 250
4 : 125
5 : 376
6 : 188
7 : 94
8 : 47
9 : 142
10 : 71
11 : 214
12 : 107
13 : 322
14 : 161
15 : 484
16 : 242
17 : 121
18 : 364
19 : 182
20 : 91
21 : 274
22 : 137
23 : 412
24 : 206
25 : 103
26 : 310
27 : 155
28 : 466
29 : 233
30 : 700
31 : 350
32 : 175
33 : 526
34 : 263
35 : 790
36 : 395
37 : 1186
38 : 593
39 : 1780
40 : 890
41 : 445
42 : 1336
43 : 668
44 : 334
45 : 167
46 : 502
47 : 251
48 : 754
49 : 377
50 : 1132
51 : 566
52 : 283
53 : 850
54 : 425
55 : 1276
56 : 638
57 : 319
58 : 958
59 : 479
60 : 1438
61 : 719
62 : 2158
63 : 1079
64 : 3238
65 : 1619
66 : 4858
67 : 2429
68 : 7288
69 : 3644
70 : 1822
71 : 911
72 : 2734
73 : 1367
74 : 4102
75 : 2051
76 : 6154
77 : 3077
78 : 9232
79 : 4616
80 : 2308
81 : 1154
82 : 577
83 : 1732
84 : 866
85 : 433
86 : 1300
87 : 650
88 : 325
89 : 976
90 : 488
91 : 244
92 : 122
93 : 61
94 : 184
95 : 92
96 : 46
97 : 23
98 : 70
99 : 35
100 : 106
101 : 53
102 : 160
103 : 80
104 : 40
105 : 20
106 : 10
107 : 5
108 : 16
109 : 8
110 : 4
111 : 2
112 : 1
1 113
&lt;/pre&gt;

===For checkNum(5000)===
&lt;pre&gt;
1 : 2500
2 : 1250
3 : 625
4 : 1876
5 : 938
6 : 469
7 : 1408
8 : 704
9 : 352
10 : 176
11 : 88
12 : 44
13 : 22
14 : 11
15 : 34
16 : 17
17 : 52
18 : 26
19 : 13
20 : 40
21 : 20
22 : 10
23 : 5
24 : 16
25 : 8
26 : 4
27 : 2
28 : 1
1 29
&lt;/pre&gt;
===For checkNum(25000000)===
&lt;pre&gt;
1 : 12500000
2 : 6250000
3 : 3125000
4 : 1562500
5 : 781250
6 : 390625
7 : 1171876
8 : 585938
9 : 292969
10 : 878908
11 : 439454
12 : 219727
13 : 659182
14 : 329591
15 : 988774
16 : 494387
17 : 1483162
18 : 741581
19 : 2224744
20 : 1112372
21 : 556186
22 : 278093
23 : 834280
24 : 417140
25 : 208570
26 : 104285
27 : 312856
28 : 156428
29 : 78214
30 : 39107
31 : 117322
32 : 58661
33 : 175984
34 : 87992
35 : 43996
36 : 21998
37 : 10999
38 : 32998
39 : 16499
40 : 49498
41 : 24749
42 : 74248
43 : 37124
44 : 18562
45 : 9281
46 : 27844
47 : 13922
48 : 6961
49 : 20884
50 : 10442
51 : 5221
52 : 15664
53 : 7832
54 : 3916
55 : 1958
56 : 979
57 : 2938
58 : 1469
59 : 4408
60 : 2204
61 : 1102
62 : 551
63 : 1654
64 : 827
65 : 2482
66 : 1241
67 : 3724
68 : 1862
69 : 931
70 : 2794
71 : 1397
72 : 4192
73 : 2096
74 : 1048
75 : 524
76 : 262
77 : 131
78 : 394
79 : 197
80 : 592
81 : 296
82 : 148
83 : 74
84 : 37
85 : 112
86 : 56
87 : 28
88 : 14
89 : 7
90 : 22
91 : 11
92 : 34
93 : 17
94 : 52
95 : 26
96 : 13
97 : 40
98 : 20
99 : 10
100 : 5
101 : 16
102 : 8
103 : 4
104 : 2
105 : 1
1 106
&lt;/pre&gt;

Happy Life ahead!!!
[[File:end1.png]]</text>
      <sha1>06elzio9re6886nz7usy13okkxpj11e</sha1>
    </revision>
    <revision>
      <id>4409</id>
      <parentid>4408</parentid>
      <timestamp>2018-10-16T04:19:43Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* Wheel Graph1 */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="8471">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_12 Contributors of this page]

=Page Rank - How does Google Work=
One web page is having link to other page, that is a page is referring to other page. Google uses ''Page Rank'' algorithm to choose which page should be displayed first.

If we have network, connections as below:
[[File:rank0.png]]

We want to pick a leader out of all these nodes. How to pick a leader?  Why to elect a leader? It is because we want to find the super power of available nodes.                     
[[File:rank1.png]]

For example, the application wherein, we want to find the most impressive person of the  few ones. How to decide it? As shown in below figure, each node will communicate with other, randomly, we implement the count for each node, how many times, the particular node is being visited.
[[File:rank2.png]]

[[#Top]]

As shown in following, figure, all nodes are visited and each node is marked with the 
number i.e.number of times the node is visited.
[[File:rank3.png]]

The node with the maximum count, becomes the winner. Here, node with 120 count in figure 
below, is the winner. i.e. The person with 120 count in the figure is the most impressive 
person in the community being considered.
[[File:rank4.png]]

[[File:rank5.png]]

[[File:rank6.png]]

[[File:rank7.png]]


[[File:rank8.png]]

[[#Top]]

Google selects the page rank in this matter. Each web page is connected to other web page with web links. To a page, maximum link is there, that will be put on top results in Google search results.
[[File:rank9.png]]

Google uses web crawler. The crawler takes the random walk on the www network and rank the web sites.
[[File:rank10.png]]

This way Google ranks the pages and displays search results, according to page rank.
[[File:rank11.png]]

e.g.we search for ''mysore city''. Google has 10,000 results. But it displays the results in the sequence of page rank of search results, As shown in figure below.
[[File:mysore.png]]

[[#Top]]

==Page rank algorithm ==
As shown in beautiful figure below, few nodes combinely selected one as the leader, then that leader and other nodes, have selected         other as a leader. This way, finally the final leader is elected.
[[File:rank12.png|600px]]


[[File:graph00.png|600px]]

[[File:graph01.png|600px]]

==Gragh Drawing Program1==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
nx.barbell_graph(4,2)
G=nx.barbell_graph(4,2)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:Graph003.png|600px]]

==Gragh Drawing Program2==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
nx.barbell_graph(4,3)
G=nx.barbell_graph(4,3)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:
[[File:Graph004.png|600px]]

==Gragh Drawing Program3==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
nx.barbell_graph(5,3)
G=nx.barbell_graph(5,3)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:Graph005.png|600px]]

==Complete Graph==
Complete graph is a graph, wherein, each node is connected to each other nodes in a graph.

&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.complete_graph(4)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:

[[File:completegraph001.png|600px]]

==Cycle graph==

&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.cycle_graph(5)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:
[[File:cyclegraph1.png|600px]]

==Ladder graph==

&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.ladder_graph(5)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:

[[File:laddergraph.png|600px]]

==Path Graph==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.path_graph(6)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:

[[File:pathgraph.png|600px]]

==Star Graph==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.star_graph(5)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:stargraph.png|600px]]


==Star Graph1==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.star_graph(4)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:stargraph4points.png|600px]]

==Wheel Graph==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.wheel_graph(4)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:wheelgraph.png|600px]]


==Wheel Graph1==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.wheel_graph(5)
nx.draw(G)
plt.show()

&lt;/pre&gt;

Output:

[[File:wheelgraph5nodes.png|600px]]

=Collatz Conjecture=
Taught by Sudarshan sir and Amit sir, and Edited by Ms. Ami Tusharkant Choksi

If a number is even, divide it by ''2'', if it is odd, make multiply it by ''3'' and add ''1'', till you get ''1''. This simple problem is called, ''Collatz Conjecture''. 

[[File:collatz1.png|600px]]

[[File:collatz2.png|600px]]

[[File:collatz3.png|600px]]

[[File:collatz4.png|600px]]

[[File:collatz5.png|600px]]

Number is bigger doesn't mean more iterations are required. One can notice, from the output of the following program. 



The program to implement the same is as follows:
==Program==
&lt;pre&gt;
#collatz conjecture
#if num is even, divide it by 2
#if num is odd, new number is equal to 3n+1


def checkNum(num):
    iterations=1
    while(num!=1):
        if(num%2==0):
            num=int(num/2)            
        else:
            num = 3*num+1
        iterations+=1
        

    print(num,iterations)


#checkNum(12)#Output: 1 10
#checkNum(26)#Output: 1 11
checkNum(2000)#Output: 1 113
&lt;/pre&gt;

&lt;pre&gt;

#recursive approach

def checkNum(num):
    if num==1:
        return 1
    elif num%2==0:
        return checkNum(num/2)+1
    else:
        return checkNum(3*num +1)+1


output:
checkNum(26)
Out[27]: 11
checkNum(5000)
Out[28]: 29
&lt;/pre&gt;

==Program adding statement to print all iterations==
&lt;pre&gt;
def checkNum(num):
    iterations=1
    while(num!=1):
        if(num%2==0):
            num=int(num/2)            
        else:
            num = 3*num+1
        print(iterations,&quot;:&quot;,num)
        iterations+=1
        

    print(num,iterations)
&lt;/pre&gt;
==Output==
===For checkNum(2000)===
&lt;pre&gt;
1 : 1000
2 : 500
3 : 250
4 : 125
5 : 376
6 : 188
7 : 94
8 : 47
9 : 142
10 : 71
11 : 214
12 : 107
13 : 322
14 : 161
15 : 484
16 : 242
17 : 121
18 : 364
19 : 182
20 : 91
21 : 274
22 : 137
23 : 412
24 : 206
25 : 103
26 : 310
27 : 155
28 : 466
29 : 233
30 : 700
31 : 350
32 : 175
33 : 526
34 : 263
35 : 790
36 : 395
37 : 1186
38 : 593
39 : 1780
40 : 890
41 : 445
42 : 1336
43 : 668
44 : 334
45 : 167
46 : 502
47 : 251
48 : 754
49 : 377
50 : 1132
51 : 566
52 : 283
53 : 850
54 : 425
55 : 1276
56 : 638
57 : 319
58 : 958
59 : 479
60 : 1438
61 : 719
62 : 2158
63 : 1079
64 : 3238
65 : 1619
66 : 4858
67 : 2429
68 : 7288
69 : 3644
70 : 1822
71 : 911
72 : 2734
73 : 1367
74 : 4102
75 : 2051
76 : 6154
77 : 3077
78 : 9232
79 : 4616
80 : 2308
81 : 1154
82 : 577
83 : 1732
84 : 866
85 : 433
86 : 1300
87 : 650
88 : 325
89 : 976
90 : 488
91 : 244
92 : 122
93 : 61
94 : 184
95 : 92
96 : 46
97 : 23
98 : 70
99 : 35
100 : 106
101 : 53
102 : 160
103 : 80
104 : 40
105 : 20
106 : 10
107 : 5
108 : 16
109 : 8
110 : 4
111 : 2
112 : 1
1 113
&lt;/pre&gt;

===For checkNum(5000)===
&lt;pre&gt;
1 : 2500
2 : 1250
3 : 625
4 : 1876
5 : 938
6 : 469
7 : 1408
8 : 704
9 : 352
10 : 176
11 : 88
12 : 44
13 : 22
14 : 11
15 : 34
16 : 17
17 : 52
18 : 26
19 : 13
20 : 40
21 : 20
22 : 10
23 : 5
24 : 16
25 : 8
26 : 4
27 : 2
28 : 1
1 29
&lt;/pre&gt;
===For checkNum(25000000)===
&lt;pre&gt;
1 : 12500000
2 : 6250000
3 : 3125000
4 : 1562500
5 : 781250
6 : 390625
7 : 1171876
8 : 585938
9 : 292969
10 : 878908
11 : 439454
12 : 219727
13 : 659182
14 : 329591
15 : 988774
16 : 494387
17 : 1483162
18 : 741581
19 : 2224744
20 : 1112372
21 : 556186
22 : 278093
23 : 834280
24 : 417140
25 : 208570
26 : 104285
27 : 312856
28 : 156428
29 : 78214
30 : 39107
31 : 117322
32 : 58661
33 : 175984
34 : 87992
35 : 43996
36 : 21998
37 : 10999
38 : 32998
39 : 16499
40 : 49498
41 : 24749
42 : 74248
43 : 37124
44 : 18562
45 : 9281
46 : 27844
47 : 13922
48 : 6961
49 : 20884
50 : 10442
51 : 5221
52 : 15664
53 : 7832
54 : 3916
55 : 1958
56 : 979
57 : 2938
58 : 1469
59 : 4408
60 : 2204
61 : 1102
62 : 551
63 : 1654
64 : 827
65 : 2482
66 : 1241
67 : 3724
68 : 1862
69 : 931
70 : 2794
71 : 1397
72 : 4192
73 : 2096
74 : 1048
75 : 524
76 : 262
77 : 131
78 : 394
79 : 197
80 : 592
81 : 296
82 : 148
83 : 74
84 : 37
85 : 112
86 : 56
87 : 28
88 : 14
89 : 7
90 : 22
91 : 11
92 : 34
93 : 17
94 : 52
95 : 26
96 : 13
97 : 40
98 : 20
99 : 10
100 : 5
101 : 16
102 : 8
103 : 4
104 : 2
105 : 1
1 106
&lt;/pre&gt;

Happy Life ahead!!!
[[File:end1.png]]</text>
      <sha1>p6dkbo9j69zf9qcntb1ye8z61lp5f6j</sha1>
    </revision>
    <revision>
      <id>4411</id>
      <parentid>4409</parentid>
      <timestamp>2018-10-16T04:22:25Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* Wheel Graph1 */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="8665">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_12 Contributors of this page]

=Page Rank - How does Google Work=
One web page is having link to other page, that is a page is referring to other page. Google uses ''Page Rank'' algorithm to choose which page should be displayed first.

If we have network, connections as below:
[[File:rank0.png]]

We want to pick a leader out of all these nodes. How to pick a leader?  Why to elect a leader? It is because we want to find the super power of available nodes.                     
[[File:rank1.png]]

For example, the application wherein, we want to find the most impressive person of the  few ones. How to decide it? As shown in below figure, each node will communicate with other, randomly, we implement the count for each node, how many times, the particular node is being visited.
[[File:rank2.png]]

[[#Top]]

As shown in following, figure, all nodes are visited and each node is marked with the 
number i.e.number of times the node is visited.
[[File:rank3.png]]

The node with the maximum count, becomes the winner. Here, node with 120 count in figure 
below, is the winner. i.e. The person with 120 count in the figure is the most impressive 
person in the community being considered.
[[File:rank4.png]]

[[File:rank5.png]]

[[File:rank6.png]]

[[File:rank7.png]]


[[File:rank8.png]]

[[#Top]]

Google selects the page rank in this matter. Each web page is connected to other web page with web links. To a page, maximum link is there, that will be put on top results in Google search results.
[[File:rank9.png]]

Google uses web crawler. The crawler takes the random walk on the www network and rank the web sites.
[[File:rank10.png]]

This way Google ranks the pages and displays search results, according to page rank.
[[File:rank11.png]]

e.g.we search for ''mysore city''. Google has 10,000 results. But it displays the results in the sequence of page rank of search results, As shown in figure below.
[[File:mysore.png]]

[[#Top]]

==Page rank algorithm ==
As shown in beautiful figure below, few nodes combinely selected one as the leader, then that leader and other nodes, have selected         other as a leader. This way, finally the final leader is elected.
[[File:rank12.png|600px]]


[[File:graph00.png|600px]]

[[File:graph01.png|600px]]

==Gragh Drawing Program1==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
nx.barbell_graph(4,2)
G=nx.barbell_graph(4,2)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:Graph003.png|600px]]

==Gragh Drawing Program2==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
nx.barbell_graph(4,3)
G=nx.barbell_graph(4,3)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:
[[File:Graph004.png|600px]]

==Gragh Drawing Program3==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
nx.barbell_graph(5,3)
G=nx.barbell_graph(5,3)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:Graph005.png|600px]]

==Complete Graph==
Complete graph is a graph, wherein, each node is connected to each other nodes in a graph.

&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.complete_graph(4)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:

[[File:completegraph001.png|600px]]

==Cycle graph==

&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.cycle_graph(5)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:
[[File:cyclegraph1.png|600px]]

==Ladder graph==

&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.ladder_graph(5)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:

[[File:laddergraph.png|600px]]

==Path Graph==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.path_graph(6)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:

[[File:pathgraph.png|600px]]

==Star Graph==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.star_graph(5)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:stargraph.png|600px]]


==Star Graph1==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.star_graph(4)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:stargraph4points.png|600px]]

==Wheel Graph==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.wheel_graph(4)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:wheelgraph.png|600px]]


==Wheel Graph of 5 nodes==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.wheel_graph(5)
nx.draw(G)
plt.show()

&lt;/pre&gt;

Output:

[[File:wheelgraph5nodes.png|600px]]

=Wheel Graph of 6 nodes==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.wheel_graph(6)
nx.draw(G)
plt.show()

&lt;/pre&gt;

Output:

[[File:wheelgraph6nodes.png|600px]]

=Collatz Conjecture=
Taught by Sudarshan sir and Amit sir, and Edited by Ms. Ami Tusharkant Choksi

If a number is even, divide it by ''2'', if it is odd, make multiply it by ''3'' and add ''1'', till you get ''1''. This simple problem is called, ''Collatz Conjecture''. 

[[File:collatz1.png|600px]]

[[File:collatz2.png|600px]]

[[File:collatz3.png|600px]]

[[File:collatz4.png|600px]]

[[File:collatz5.png|600px]]

Number is bigger doesn't mean more iterations are required. One can notice, from the output of the following program. 



The program to implement the same is as follows:
==Program==
&lt;pre&gt;
#collatz conjecture
#if num is even, divide it by 2
#if num is odd, new number is equal to 3n+1


def checkNum(num):
    iterations=1
    while(num!=1):
        if(num%2==0):
            num=int(num/2)            
        else:
            num = 3*num+1
        iterations+=1
        

    print(num,iterations)


#checkNum(12)#Output: 1 10
#checkNum(26)#Output: 1 11
checkNum(2000)#Output: 1 113
&lt;/pre&gt;

&lt;pre&gt;

#recursive approach

def checkNum(num):
    if num==1:
        return 1
    elif num%2==0:
        return checkNum(num/2)+1
    else:
        return checkNum(3*num +1)+1


output:
checkNum(26)
Out[27]: 11
checkNum(5000)
Out[28]: 29
&lt;/pre&gt;

==Program adding statement to print all iterations==
&lt;pre&gt;
def checkNum(num):
    iterations=1
    while(num!=1):
        if(num%2==0):
            num=int(num/2)            
        else:
            num = 3*num+1
        print(iterations,&quot;:&quot;,num)
        iterations+=1
        

    print(num,iterations)
&lt;/pre&gt;
==Output==
===For checkNum(2000)===
&lt;pre&gt;
1 : 1000
2 : 500
3 : 250
4 : 125
5 : 376
6 : 188
7 : 94
8 : 47
9 : 142
10 : 71
11 : 214
12 : 107
13 : 322
14 : 161
15 : 484
16 : 242
17 : 121
18 : 364
19 : 182
20 : 91
21 : 274
22 : 137
23 : 412
24 : 206
25 : 103
26 : 310
27 : 155
28 : 466
29 : 233
30 : 700
31 : 350
32 : 175
33 : 526
34 : 263
35 : 790
36 : 395
37 : 1186
38 : 593
39 : 1780
40 : 890
41 : 445
42 : 1336
43 : 668
44 : 334
45 : 167
46 : 502
47 : 251
48 : 754
49 : 377
50 : 1132
51 : 566
52 : 283
53 : 850
54 : 425
55 : 1276
56 : 638
57 : 319
58 : 958
59 : 479
60 : 1438
61 : 719
62 : 2158
63 : 1079
64 : 3238
65 : 1619
66 : 4858
67 : 2429
68 : 7288
69 : 3644
70 : 1822
71 : 911
72 : 2734
73 : 1367
74 : 4102
75 : 2051
76 : 6154
77 : 3077
78 : 9232
79 : 4616
80 : 2308
81 : 1154
82 : 577
83 : 1732
84 : 866
85 : 433
86 : 1300
87 : 650
88 : 325
89 : 976
90 : 488
91 : 244
92 : 122
93 : 61
94 : 184
95 : 92
96 : 46
97 : 23
98 : 70
99 : 35
100 : 106
101 : 53
102 : 160
103 : 80
104 : 40
105 : 20
106 : 10
107 : 5
108 : 16
109 : 8
110 : 4
111 : 2
112 : 1
1 113
&lt;/pre&gt;

===For checkNum(5000)===
&lt;pre&gt;
1 : 2500
2 : 1250
3 : 625
4 : 1876
5 : 938
6 : 469
7 : 1408
8 : 704
9 : 352
10 : 176
11 : 88
12 : 44
13 : 22
14 : 11
15 : 34
16 : 17
17 : 52
18 : 26
19 : 13
20 : 40
21 : 20
22 : 10
23 : 5
24 : 16
25 : 8
26 : 4
27 : 2
28 : 1
1 29
&lt;/pre&gt;
===For checkNum(25000000)===
&lt;pre&gt;
1 : 12500000
2 : 6250000
3 : 3125000
4 : 1562500
5 : 781250
6 : 390625
7 : 1171876
8 : 585938
9 : 292969
10 : 878908
11 : 439454
12 : 219727
13 : 659182
14 : 329591
15 : 988774
16 : 494387
17 : 1483162
18 : 741581
19 : 2224744
20 : 1112372
21 : 556186
22 : 278093
23 : 834280
24 : 417140
25 : 208570
26 : 104285
27 : 312856
28 : 156428
29 : 78214
30 : 39107
31 : 117322
32 : 58661
33 : 175984
34 : 87992
35 : 43996
36 : 21998
37 : 10999
38 : 32998
39 : 16499
40 : 49498
41 : 24749
42 : 74248
43 : 37124
44 : 18562
45 : 9281
46 : 27844
47 : 13922
48 : 6961
49 : 20884
50 : 10442
51 : 5221
52 : 15664
53 : 7832
54 : 3916
55 : 1958
56 : 979
57 : 2938
58 : 1469
59 : 4408
60 : 2204
61 : 1102
62 : 551
63 : 1654
64 : 827
65 : 2482
66 : 1241
67 : 3724
68 : 1862
69 : 931
70 : 2794
71 : 1397
72 : 4192
73 : 2096
74 : 1048
75 : 524
76 : 262
77 : 131
78 : 394
79 : 197
80 : 592
81 : 296
82 : 148
83 : 74
84 : 37
85 : 112
86 : 56
87 : 28
88 : 14
89 : 7
90 : 22
91 : 11
92 : 34
93 : 17
94 : 52
95 : 26
96 : 13
97 : 40
98 : 20
99 : 10
100 : 5
101 : 16
102 : 8
103 : 4
104 : 2
105 : 1
1 106
&lt;/pre&gt;

Happy Life ahead!!!
[[File:end1.png]]</text>
      <sha1>s31h2dwegg816ncti4j4u33y7c2lrpm</sha1>
    </revision>
    <revision>
      <id>4413</id>
      <parentid>4411</parentid>
      <timestamp>2018-10-16T04:23:08Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* Wheel Graph of 6 nodes= */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="8666">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_12 Contributors of this page]

=Page Rank - How does Google Work=
One web page is having link to other page, that is a page is referring to other page. Google uses ''Page Rank'' algorithm to choose which page should be displayed first.

If we have network, connections as below:
[[File:rank0.png]]

We want to pick a leader out of all these nodes. How to pick a leader?  Why to elect a leader? It is because we want to find the super power of available nodes.                     
[[File:rank1.png]]

For example, the application wherein, we want to find the most impressive person of the  few ones. How to decide it? As shown in below figure, each node will communicate with other, randomly, we implement the count for each node, how many times, the particular node is being visited.
[[File:rank2.png]]

[[#Top]]

As shown in following, figure, all nodes are visited and each node is marked with the 
number i.e.number of times the node is visited.
[[File:rank3.png]]

The node with the maximum count, becomes the winner. Here, node with 120 count in figure 
below, is the winner. i.e. The person with 120 count in the figure is the most impressive 
person in the community being considered.
[[File:rank4.png]]

[[File:rank5.png]]

[[File:rank6.png]]

[[File:rank7.png]]


[[File:rank8.png]]

[[#Top]]

Google selects the page rank in this matter. Each web page is connected to other web page with web links. To a page, maximum link is there, that will be put on top results in Google search results.
[[File:rank9.png]]

Google uses web crawler. The crawler takes the random walk on the www network and rank the web sites.
[[File:rank10.png]]

This way Google ranks the pages and displays search results, according to page rank.
[[File:rank11.png]]

e.g.we search for ''mysore city''. Google has 10,000 results. But it displays the results in the sequence of page rank of search results, As shown in figure below.
[[File:mysore.png]]

[[#Top]]

==Page rank algorithm ==
As shown in beautiful figure below, few nodes combinely selected one as the leader, then that leader and other nodes, have selected         other as a leader. This way, finally the final leader is elected.
[[File:rank12.png|600px]]


[[File:graph00.png|600px]]

[[File:graph01.png|600px]]

==Gragh Drawing Program1==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
nx.barbell_graph(4,2)
G=nx.barbell_graph(4,2)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:Graph003.png|600px]]

==Gragh Drawing Program2==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
nx.barbell_graph(4,3)
G=nx.barbell_graph(4,3)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:
[[File:Graph004.png|600px]]

==Gragh Drawing Program3==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
nx.barbell_graph(5,3)
G=nx.barbell_graph(5,3)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:Graph005.png|600px]]

==Complete Graph==
Complete graph is a graph, wherein, each node is connected to each other nodes in a graph.

&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.complete_graph(4)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:

[[File:completegraph001.png|600px]]

==Cycle graph==

&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.cycle_graph(5)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:
[[File:cyclegraph1.png|600px]]

==Ladder graph==

&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.ladder_graph(5)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:

[[File:laddergraph.png|600px]]

==Path Graph==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.path_graph(6)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:

[[File:pathgraph.png|600px]]

==Star Graph==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.star_graph(5)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:stargraph.png|600px]]


==Star Graph1==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.star_graph(4)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:stargraph4points.png|600px]]

==Wheel Graph==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.wheel_graph(4)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:wheelgraph.png|600px]]


==Wheel Graph of 5 nodes==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.wheel_graph(5)
nx.draw(G)
plt.show()

&lt;/pre&gt;

Output:

[[File:wheelgraph5nodes.png|600px]]

==Wheel Graph of 6 nodes==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.wheel_graph(6)
nx.draw(G)
plt.show()

&lt;/pre&gt;

Output:

[[File:wheelgraph6nodes.png|600px]]

=Collatz Conjecture=
Taught by Sudarshan sir and Amit sir, and Edited by Ms. Ami Tusharkant Choksi

If a number is even, divide it by ''2'', if it is odd, make multiply it by ''3'' and add ''1'', till you get ''1''. This simple problem is called, ''Collatz Conjecture''. 

[[File:collatz1.png|600px]]

[[File:collatz2.png|600px]]

[[File:collatz3.png|600px]]

[[File:collatz4.png|600px]]

[[File:collatz5.png|600px]]

Number is bigger doesn't mean more iterations are required. One can notice, from the output of the following program. 



The program to implement the same is as follows:
==Program==
&lt;pre&gt;
#collatz conjecture
#if num is even, divide it by 2
#if num is odd, new number is equal to 3n+1


def checkNum(num):
    iterations=1
    while(num!=1):
        if(num%2==0):
            num=int(num/2)            
        else:
            num = 3*num+1
        iterations+=1
        

    print(num,iterations)


#checkNum(12)#Output: 1 10
#checkNum(26)#Output: 1 11
checkNum(2000)#Output: 1 113
&lt;/pre&gt;

&lt;pre&gt;

#recursive approach

def checkNum(num):
    if num==1:
        return 1
    elif num%2==0:
        return checkNum(num/2)+1
    else:
        return checkNum(3*num +1)+1


output:
checkNum(26)
Out[27]: 11
checkNum(5000)
Out[28]: 29
&lt;/pre&gt;

==Program adding statement to print all iterations==
&lt;pre&gt;
def checkNum(num):
    iterations=1
    while(num!=1):
        if(num%2==0):
            num=int(num/2)            
        else:
            num = 3*num+1
        print(iterations,&quot;:&quot;,num)
        iterations+=1
        

    print(num,iterations)
&lt;/pre&gt;
==Output==
===For checkNum(2000)===
&lt;pre&gt;
1 : 1000
2 : 500
3 : 250
4 : 125
5 : 376
6 : 188
7 : 94
8 : 47
9 : 142
10 : 71
11 : 214
12 : 107
13 : 322
14 : 161
15 : 484
16 : 242
17 : 121
18 : 364
19 : 182
20 : 91
21 : 274
22 : 137
23 : 412
24 : 206
25 : 103
26 : 310
27 : 155
28 : 466
29 : 233
30 : 700
31 : 350
32 : 175
33 : 526
34 : 263
35 : 790
36 : 395
37 : 1186
38 : 593
39 : 1780
40 : 890
41 : 445
42 : 1336
43 : 668
44 : 334
45 : 167
46 : 502
47 : 251
48 : 754
49 : 377
50 : 1132
51 : 566
52 : 283
53 : 850
54 : 425
55 : 1276
56 : 638
57 : 319
58 : 958
59 : 479
60 : 1438
61 : 719
62 : 2158
63 : 1079
64 : 3238
65 : 1619
66 : 4858
67 : 2429
68 : 7288
69 : 3644
70 : 1822
71 : 911
72 : 2734
73 : 1367
74 : 4102
75 : 2051
76 : 6154
77 : 3077
78 : 9232
79 : 4616
80 : 2308
81 : 1154
82 : 577
83 : 1732
84 : 866
85 : 433
86 : 1300
87 : 650
88 : 325
89 : 976
90 : 488
91 : 244
92 : 122
93 : 61
94 : 184
95 : 92
96 : 46
97 : 23
98 : 70
99 : 35
100 : 106
101 : 53
102 : 160
103 : 80
104 : 40
105 : 20
106 : 10
107 : 5
108 : 16
109 : 8
110 : 4
111 : 2
112 : 1
1 113
&lt;/pre&gt;

===For checkNum(5000)===
&lt;pre&gt;
1 : 2500
2 : 1250
3 : 625
4 : 1876
5 : 938
6 : 469
7 : 1408
8 : 704
9 : 352
10 : 176
11 : 88
12 : 44
13 : 22
14 : 11
15 : 34
16 : 17
17 : 52
18 : 26
19 : 13
20 : 40
21 : 20
22 : 10
23 : 5
24 : 16
25 : 8
26 : 4
27 : 2
28 : 1
1 29
&lt;/pre&gt;
===For checkNum(25000000)===
&lt;pre&gt;
1 : 12500000
2 : 6250000
3 : 3125000
4 : 1562500
5 : 781250
6 : 390625
7 : 1171876
8 : 585938
9 : 292969
10 : 878908
11 : 439454
12 : 219727
13 : 659182
14 : 329591
15 : 988774
16 : 494387
17 : 1483162
18 : 741581
19 : 2224744
20 : 1112372
21 : 556186
22 : 278093
23 : 834280
24 : 417140
25 : 208570
26 : 104285
27 : 312856
28 : 156428
29 : 78214
30 : 39107
31 : 117322
32 : 58661
33 : 175984
34 : 87992
35 : 43996
36 : 21998
37 : 10999
38 : 32998
39 : 16499
40 : 49498
41 : 24749
42 : 74248
43 : 37124
44 : 18562
45 : 9281
46 : 27844
47 : 13922
48 : 6961
49 : 20884
50 : 10442
51 : 5221
52 : 15664
53 : 7832
54 : 3916
55 : 1958
56 : 979
57 : 2938
58 : 1469
59 : 4408
60 : 2204
61 : 1102
62 : 551
63 : 1654
64 : 827
65 : 2482
66 : 1241
67 : 3724
68 : 1862
69 : 931
70 : 2794
71 : 1397
72 : 4192
73 : 2096
74 : 1048
75 : 524
76 : 262
77 : 131
78 : 394
79 : 197
80 : 592
81 : 296
82 : 148
83 : 74
84 : 37
85 : 112
86 : 56
87 : 28
88 : 14
89 : 7
90 : 22
91 : 11
92 : 34
93 : 17
94 : 52
95 : 26
96 : 13
97 : 40
98 : 20
99 : 10
100 : 5
101 : 16
102 : 8
103 : 4
104 : 2
105 : 1
1 106
&lt;/pre&gt;

Happy Life ahead!!!
[[File:end1.png]]</text>
      <sha1>pj3nyod4pvjtau326oak7oj9l78y3e2</sha1>
    </revision>
    <revision>
      <id>4414</id>
      <parentid>4413</parentid>
      <timestamp>2018-10-16T04:23:19Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* Wheel Graph */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="8665">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_12 Contributors of this page]

=Page Rank - How does Google Work=
One web page is having link to other page, that is a page is referring to other page. Google uses ''Page Rank'' algorithm to choose which page should be displayed first.

If we have network, connections as below:
[[File:rank0.png]]

We want to pick a leader out of all these nodes. How to pick a leader?  Why to elect a leader? It is because we want to find the super power of available nodes.                     
[[File:rank1.png]]

For example, the application wherein, we want to find the most impressive person of the  few ones. How to decide it? As shown in below figure, each node will communicate with other, randomly, we implement the count for each node, how many times, the particular node is being visited.
[[File:rank2.png]]

[[#Top]]

As shown in following, figure, all nodes are visited and each node is marked with the 
number i.e.number of times the node is visited.
[[File:rank3.png]]

The node with the maximum count, becomes the winner. Here, node with 120 count in figure 
below, is the winner. i.e. The person with 120 count in the figure is the most impressive 
person in the community being considered.
[[File:rank4.png]]

[[File:rank5.png]]

[[File:rank6.png]]

[[File:rank7.png]]


[[File:rank8.png]]

[[#Top]]

Google selects the page rank in this matter. Each web page is connected to other web page with web links. To a page, maximum link is there, that will be put on top results in Google search results.
[[File:rank9.png]]

Google uses web crawler. The crawler takes the random walk on the www network and rank the web sites.
[[File:rank10.png]]

This way Google ranks the pages and displays search results, according to page rank.
[[File:rank11.png]]

e.g.we search for ''mysore city''. Google has 10,000 results. But it displays the results in the sequence of page rank of search results, As shown in figure below.
[[File:mysore.png]]

[[#Top]]

==Page rank algorithm ==
As shown in beautiful figure below, few nodes combinely selected one as the leader, then that leader and other nodes, have selected         other as a leader. This way, finally the final leader is elected.
[[File:rank12.png|600px]]


[[File:graph00.png|600px]]

[[File:graph01.png|600px]]

==Gragh Drawing Program1==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
nx.barbell_graph(4,2)
G=nx.barbell_graph(4,2)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:Graph003.png|600px]]

==Gragh Drawing Program2==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
nx.barbell_graph(4,3)
G=nx.barbell_graph(4,3)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:
[[File:Graph004.png|600px]]

==Gragh Drawing Program3==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
nx.barbell_graph(5,3)
G=nx.barbell_graph(5,3)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:Graph005.png|600px]]

==Complete Graph==
Complete graph is a graph, wherein, each node is connected to each other nodes in a graph.

&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.complete_graph(4)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:

[[File:completegraph001.png|600px]]

==Cycle graph==

&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.cycle_graph(5)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:
[[File:cyclegraph1.png|600px]]

==Ladder graph==

&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.ladder_graph(5)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:

[[File:laddergraph.png|600px]]

==Path Graph==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.path_graph(6)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:

[[File:pathgraph.png|600px]]

==Star Graph==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.star_graph(5)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:stargraph.png|600px]]


==Star Graph1==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.star_graph(4)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:stargraph4points.png|600px]]

==Wheel Graph==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.wheel_graph(4)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:wheelgraph.png|600px]]

==Wheel Graph of 5 nodes==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.wheel_graph(5)
nx.draw(G)
plt.show()

&lt;/pre&gt;

Output:

[[File:wheelgraph5nodes.png|600px]]

==Wheel Graph of 6 nodes==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.wheel_graph(6)
nx.draw(G)
plt.show()

&lt;/pre&gt;

Output:

[[File:wheelgraph6nodes.png|600px]]

=Collatz Conjecture=
Taught by Sudarshan sir and Amit sir, and Edited by Ms. Ami Tusharkant Choksi

If a number is even, divide it by ''2'', if it is odd, make multiply it by ''3'' and add ''1'', till you get ''1''. This simple problem is called, ''Collatz Conjecture''. 

[[File:collatz1.png|600px]]

[[File:collatz2.png|600px]]

[[File:collatz3.png|600px]]

[[File:collatz4.png|600px]]

[[File:collatz5.png|600px]]

Number is bigger doesn't mean more iterations are required. One can notice, from the output of the following program. 



The program to implement the same is as follows:
==Program==
&lt;pre&gt;
#collatz conjecture
#if num is even, divide it by 2
#if num is odd, new number is equal to 3n+1


def checkNum(num):
    iterations=1
    while(num!=1):
        if(num%2==0):
            num=int(num/2)            
        else:
            num = 3*num+1
        iterations+=1
        

    print(num,iterations)


#checkNum(12)#Output: 1 10
#checkNum(26)#Output: 1 11
checkNum(2000)#Output: 1 113
&lt;/pre&gt;

&lt;pre&gt;

#recursive approach

def checkNum(num):
    if num==1:
        return 1
    elif num%2==0:
        return checkNum(num/2)+1
    else:
        return checkNum(3*num +1)+1


output:
checkNum(26)
Out[27]: 11
checkNum(5000)
Out[28]: 29
&lt;/pre&gt;

==Program adding statement to print all iterations==
&lt;pre&gt;
def checkNum(num):
    iterations=1
    while(num!=1):
        if(num%2==0):
            num=int(num/2)            
        else:
            num = 3*num+1
        print(iterations,&quot;:&quot;,num)
        iterations+=1
        

    print(num,iterations)
&lt;/pre&gt;
==Output==
===For checkNum(2000)===
&lt;pre&gt;
1 : 1000
2 : 500
3 : 250
4 : 125
5 : 376
6 : 188
7 : 94
8 : 47
9 : 142
10 : 71
11 : 214
12 : 107
13 : 322
14 : 161
15 : 484
16 : 242
17 : 121
18 : 364
19 : 182
20 : 91
21 : 274
22 : 137
23 : 412
24 : 206
25 : 103
26 : 310
27 : 155
28 : 466
29 : 233
30 : 700
31 : 350
32 : 175
33 : 526
34 : 263
35 : 790
36 : 395
37 : 1186
38 : 593
39 : 1780
40 : 890
41 : 445
42 : 1336
43 : 668
44 : 334
45 : 167
46 : 502
47 : 251
48 : 754
49 : 377
50 : 1132
51 : 566
52 : 283
53 : 850
54 : 425
55 : 1276
56 : 638
57 : 319
58 : 958
59 : 479
60 : 1438
61 : 719
62 : 2158
63 : 1079
64 : 3238
65 : 1619
66 : 4858
67 : 2429
68 : 7288
69 : 3644
70 : 1822
71 : 911
72 : 2734
73 : 1367
74 : 4102
75 : 2051
76 : 6154
77 : 3077
78 : 9232
79 : 4616
80 : 2308
81 : 1154
82 : 577
83 : 1732
84 : 866
85 : 433
86 : 1300
87 : 650
88 : 325
89 : 976
90 : 488
91 : 244
92 : 122
93 : 61
94 : 184
95 : 92
96 : 46
97 : 23
98 : 70
99 : 35
100 : 106
101 : 53
102 : 160
103 : 80
104 : 40
105 : 20
106 : 10
107 : 5
108 : 16
109 : 8
110 : 4
111 : 2
112 : 1
1 113
&lt;/pre&gt;

===For checkNum(5000)===
&lt;pre&gt;
1 : 2500
2 : 1250
3 : 625
4 : 1876
5 : 938
6 : 469
7 : 1408
8 : 704
9 : 352
10 : 176
11 : 88
12 : 44
13 : 22
14 : 11
15 : 34
16 : 17
17 : 52
18 : 26
19 : 13
20 : 40
21 : 20
22 : 10
23 : 5
24 : 16
25 : 8
26 : 4
27 : 2
28 : 1
1 29
&lt;/pre&gt;
===For checkNum(25000000)===
&lt;pre&gt;
1 : 12500000
2 : 6250000
3 : 3125000
4 : 1562500
5 : 781250
6 : 390625
7 : 1171876
8 : 585938
9 : 292969
10 : 878908
11 : 439454
12 : 219727
13 : 659182
14 : 329591
15 : 988774
16 : 494387
17 : 1483162
18 : 741581
19 : 2224744
20 : 1112372
21 : 556186
22 : 278093
23 : 834280
24 : 417140
25 : 208570
26 : 104285
27 : 312856
28 : 156428
29 : 78214
30 : 39107
31 : 117322
32 : 58661
33 : 175984
34 : 87992
35 : 43996
36 : 21998
37 : 10999
38 : 32998
39 : 16499
40 : 49498
41 : 24749
42 : 74248
43 : 37124
44 : 18562
45 : 9281
46 : 27844
47 : 13922
48 : 6961
49 : 20884
50 : 10442
51 : 5221
52 : 15664
53 : 7832
54 : 3916
55 : 1958
56 : 979
57 : 2938
58 : 1469
59 : 4408
60 : 2204
61 : 1102
62 : 551
63 : 1654
64 : 827
65 : 2482
66 : 1241
67 : 3724
68 : 1862
69 : 931
70 : 2794
71 : 1397
72 : 4192
73 : 2096
74 : 1048
75 : 524
76 : 262
77 : 131
78 : 394
79 : 197
80 : 592
81 : 296
82 : 148
83 : 74
84 : 37
85 : 112
86 : 56
87 : 28
88 : 14
89 : 7
90 : 22
91 : 11
92 : 34
93 : 17
94 : 52
95 : 26
96 : 13
97 : 40
98 : 20
99 : 10
100 : 5
101 : 16
102 : 8
103 : 4
104 : 2
105 : 1
1 106
&lt;/pre&gt;

Happy Life ahead!!!
[[File:end1.png]]</text>
      <sha1>o1u28598fe1j6kldb3tdd08b9x91e4t</sha1>
    </revision>
    <revision>
      <id>4415</id>
      <parentid>4414</parentid>
      <timestamp>2018-10-16T04:39:42Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* Wheel Graph of 6 nodes */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="8844">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_12 Contributors of this page]

=Page Rank - How does Google Work=
One web page is having link to other page, that is a page is referring to other page. Google uses ''Page Rank'' algorithm to choose which page should be displayed first.

If we have network, connections as below:
[[File:rank0.png]]

We want to pick a leader out of all these nodes. How to pick a leader?  Why to elect a leader? It is because we want to find the super power of available nodes.                     
[[File:rank1.png]]

For example, the application wherein, we want to find the most impressive person of the  few ones. How to decide it? As shown in below figure, each node will communicate with other, randomly, we implement the count for each node, how many times, the particular node is being visited.
[[File:rank2.png]]

[[#Top]]

As shown in following, figure, all nodes are visited and each node is marked with the 
number i.e.number of times the node is visited.
[[File:rank3.png]]

The node with the maximum count, becomes the winner. Here, node with 120 count in figure 
below, is the winner. i.e. The person with 120 count in the figure is the most impressive 
person in the community being considered.
[[File:rank4.png]]

[[File:rank5.png]]

[[File:rank6.png]]

[[File:rank7.png]]


[[File:rank8.png]]

[[#Top]]

Google selects the page rank in this matter. Each web page is connected to other web page with web links. To a page, maximum link is there, that will be put on top results in Google search results.
[[File:rank9.png]]

Google uses web crawler. The crawler takes the random walk on the www network and rank the web sites.
[[File:rank10.png]]

This way Google ranks the pages and displays search results, according to page rank.
[[File:rank11.png]]

e.g.we search for ''mysore city''. Google has 10,000 results. But it displays the results in the sequence of page rank of search results, As shown in figure below.
[[File:mysore.png]]

[[#Top]]

==Page rank algorithm ==
As shown in beautiful figure below, few nodes combinely selected one as the leader, then that leader and other nodes, have selected         other as a leader. This way, finally the final leader is elected.
[[File:rank12.png|600px]]


[[File:graph00.png|600px]]

[[File:graph01.png|600px]]

==Gragh Drawing Program1==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
nx.barbell_graph(4,2)
G=nx.barbell_graph(4,2)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:Graph003.png|600px]]

==Gragh Drawing Program2==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
nx.barbell_graph(4,3)
G=nx.barbell_graph(4,3)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:
[[File:Graph004.png|600px]]

==Gragh Drawing Program3==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
nx.barbell_graph(5,3)
G=nx.barbell_graph(5,3)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:Graph005.png|600px]]

==Complete Graph==
Complete graph is a graph, wherein, each node is connected to each other nodes in a graph.

&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.complete_graph(4)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:

[[File:completegraph001.png|600px]]

==Cycle graph==

&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.cycle_graph(5)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:
[[File:cyclegraph1.png|600px]]

==Ladder graph==

&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.ladder_graph(5)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:

[[File:laddergraph.png|600px]]

==Path Graph==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.path_graph(6)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:

[[File:pathgraph.png|600px]]

==Star Graph==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.star_graph(5)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:stargraph.png|600px]]


==Star Graph1==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.star_graph(4)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:stargraph4points.png|600px]]

==Wheel Graph==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.wheel_graph(4)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:wheelgraph.png|600px]]

==Wheel Graph of 5 nodes==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.wheel_graph(5)
nx.draw(G)
plt.show()

&lt;/pre&gt;

Output:

[[File:wheelgraph5nodes.png|600px]]

==Wheel Graph of 6 nodes==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.wheel_graph(6)
nx.draw(G)
plt.show()

&lt;/pre&gt;

Output:

[[File:wheelgraph6nodes.png|600px]]

==Random Graph==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.gnp_random_graph(5,0.5)
nx.draw(G)
plt.show()

&lt;/pre&gt;

Output:

[[File:randomgraph.png|600px]]

=Collatz Conjecture=
Taught by Sudarshan sir and Amit sir, and Edited by Ms. Ami Tusharkant Choksi

If a number is even, divide it by ''2'', if it is odd, make multiply it by ''3'' and add ''1'', till you get ''1''. This simple problem is called, ''Collatz Conjecture''. 

[[File:collatz1.png|600px]]

[[File:collatz2.png|600px]]

[[File:collatz3.png|600px]]

[[File:collatz4.png|600px]]

[[File:collatz5.png|600px]]

Number is bigger doesn't mean more iterations are required. One can notice, from the output of the following program. 



The program to implement the same is as follows:
==Program==
&lt;pre&gt;
#collatz conjecture
#if num is even, divide it by 2
#if num is odd, new number is equal to 3n+1


def checkNum(num):
    iterations=1
    while(num!=1):
        if(num%2==0):
            num=int(num/2)            
        else:
            num = 3*num+1
        iterations+=1
        

    print(num,iterations)


#checkNum(12)#Output: 1 10
#checkNum(26)#Output: 1 11
checkNum(2000)#Output: 1 113
&lt;/pre&gt;

&lt;pre&gt;

#recursive approach

def checkNum(num):
    if num==1:
        return 1
    elif num%2==0:
        return checkNum(num/2)+1
    else:
        return checkNum(3*num +1)+1


output:
checkNum(26)
Out[27]: 11
checkNum(5000)
Out[28]: 29
&lt;/pre&gt;

==Program adding statement to print all iterations==
&lt;pre&gt;
def checkNum(num):
    iterations=1
    while(num!=1):
        if(num%2==0):
            num=int(num/2)            
        else:
            num = 3*num+1
        print(iterations,&quot;:&quot;,num)
        iterations+=1
        

    print(num,iterations)
&lt;/pre&gt;
==Output==
===For checkNum(2000)===
&lt;pre&gt;
1 : 1000
2 : 500
3 : 250
4 : 125
5 : 376
6 : 188
7 : 94
8 : 47
9 : 142
10 : 71
11 : 214
12 : 107
13 : 322
14 : 161
15 : 484
16 : 242
17 : 121
18 : 364
19 : 182
20 : 91
21 : 274
22 : 137
23 : 412
24 : 206
25 : 103
26 : 310
27 : 155
28 : 466
29 : 233
30 : 700
31 : 350
32 : 175
33 : 526
34 : 263
35 : 790
36 : 395
37 : 1186
38 : 593
39 : 1780
40 : 890
41 : 445
42 : 1336
43 : 668
44 : 334
45 : 167
46 : 502
47 : 251
48 : 754
49 : 377
50 : 1132
51 : 566
52 : 283
53 : 850
54 : 425
55 : 1276
56 : 638
57 : 319
58 : 958
59 : 479
60 : 1438
61 : 719
62 : 2158
63 : 1079
64 : 3238
65 : 1619
66 : 4858
67 : 2429
68 : 7288
69 : 3644
70 : 1822
71 : 911
72 : 2734
73 : 1367
74 : 4102
75 : 2051
76 : 6154
77 : 3077
78 : 9232
79 : 4616
80 : 2308
81 : 1154
82 : 577
83 : 1732
84 : 866
85 : 433
86 : 1300
87 : 650
88 : 325
89 : 976
90 : 488
91 : 244
92 : 122
93 : 61
94 : 184
95 : 92
96 : 46
97 : 23
98 : 70
99 : 35
100 : 106
101 : 53
102 : 160
103 : 80
104 : 40
105 : 20
106 : 10
107 : 5
108 : 16
109 : 8
110 : 4
111 : 2
112 : 1
1 113
&lt;/pre&gt;

===For checkNum(5000)===
&lt;pre&gt;
1 : 2500
2 : 1250
3 : 625
4 : 1876
5 : 938
6 : 469
7 : 1408
8 : 704
9 : 352
10 : 176
11 : 88
12 : 44
13 : 22
14 : 11
15 : 34
16 : 17
17 : 52
18 : 26
19 : 13
20 : 40
21 : 20
22 : 10
23 : 5
24 : 16
25 : 8
26 : 4
27 : 2
28 : 1
1 29
&lt;/pre&gt;
===For checkNum(25000000)===
&lt;pre&gt;
1 : 12500000
2 : 6250000
3 : 3125000
4 : 1562500
5 : 781250
6 : 390625
7 : 1171876
8 : 585938
9 : 292969
10 : 878908
11 : 439454
12 : 219727
13 : 659182
14 : 329591
15 : 988774
16 : 494387
17 : 1483162
18 : 741581
19 : 2224744
20 : 1112372
21 : 556186
22 : 278093
23 : 834280
24 : 417140
25 : 208570
26 : 104285
27 : 312856
28 : 156428
29 : 78214
30 : 39107
31 : 117322
32 : 58661
33 : 175984
34 : 87992
35 : 43996
36 : 21998
37 : 10999
38 : 32998
39 : 16499
40 : 49498
41 : 24749
42 : 74248
43 : 37124
44 : 18562
45 : 9281
46 : 27844
47 : 13922
48 : 6961
49 : 20884
50 : 10442
51 : 5221
52 : 15664
53 : 7832
54 : 3916
55 : 1958
56 : 979
57 : 2938
58 : 1469
59 : 4408
60 : 2204
61 : 1102
62 : 551
63 : 1654
64 : 827
65 : 2482
66 : 1241
67 : 3724
68 : 1862
69 : 931
70 : 2794
71 : 1397
72 : 4192
73 : 2096
74 : 1048
75 : 524
76 : 262
77 : 131
78 : 394
79 : 197
80 : 592
81 : 296
82 : 148
83 : 74
84 : 37
85 : 112
86 : 56
87 : 28
88 : 14
89 : 7
90 : 22
91 : 11
92 : 34
93 : 17
94 : 52
95 : 26
96 : 13
97 : 40
98 : 20
99 : 10
100 : 5
101 : 16
102 : 8
103 : 4
104 : 2
105 : 1
1 106
&lt;/pre&gt;

Happy Life ahead!!!
[[File:end1.png]]</text>
      <sha1>gz8u1cenpqinufm4h1hmh4aemt6v0xc</sha1>
    </revision>
    <revision>
      <id>4417</id>
      <parentid>4415</parentid>
      <timestamp>2018-10-16T04:43:39Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* Random Graph */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="8981">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_12 Contributors of this page]

=Page Rank - How does Google Work=
One web page is having link to other page, that is a page is referring to other page. Google uses ''Page Rank'' algorithm to choose which page should be displayed first.

If we have network, connections as below:
[[File:rank0.png]]

We want to pick a leader out of all these nodes. How to pick a leader?  Why to elect a leader? It is because we want to find the super power of available nodes.                     
[[File:rank1.png]]

For example, the application wherein, we want to find the most impressive person of the  few ones. How to decide it? As shown in below figure, each node will communicate with other, randomly, we implement the count for each node, how many times, the particular node is being visited.
[[File:rank2.png]]

[[#Top]]

As shown in following, figure, all nodes are visited and each node is marked with the 
number i.e.number of times the node is visited.
[[File:rank3.png]]

The node with the maximum count, becomes the winner. Here, node with 120 count in figure 
below, is the winner. i.e. The person with 120 count in the figure is the most impressive 
person in the community being considered.
[[File:rank4.png]]

[[File:rank5.png]]

[[File:rank6.png]]

[[File:rank7.png]]


[[File:rank8.png]]

[[#Top]]

Google selects the page rank in this matter. Each web page is connected to other web page with web links. To a page, maximum link is there, that will be put on top results in Google search results.
[[File:rank9.png]]

Google uses web crawler. The crawler takes the random walk on the www network and rank the web sites.
[[File:rank10.png]]

This way Google ranks the pages and displays search results, according to page rank.
[[File:rank11.png]]

e.g.we search for ''mysore city''. Google has 10,000 results. But it displays the results in the sequence of page rank of search results, As shown in figure below.
[[File:mysore.png]]

[[#Top]]

==Page rank algorithm ==
As shown in beautiful figure below, few nodes combinely selected one as the leader, then that leader and other nodes, have selected         other as a leader. This way, finally the final leader is elected.
[[File:rank12.png|600px]]


[[File:graph00.png|600px]]

[[File:graph01.png|600px]]

==Gragh Drawing Program1==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
nx.barbell_graph(4,2)
G=nx.barbell_graph(4,2)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:Graph003.png|600px]]

==Gragh Drawing Program2==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
nx.barbell_graph(4,3)
G=nx.barbell_graph(4,3)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:
[[File:Graph004.png|600px]]

==Gragh Drawing Program3==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
nx.barbell_graph(5,3)
G=nx.barbell_graph(5,3)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:Graph005.png|600px]]

==Complete Graph==
Complete graph is a graph, wherein, each node is connected to each other nodes in a graph.

&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.complete_graph(4)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:

[[File:completegraph001.png|600px]]

==Cycle graph==

&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.cycle_graph(5)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:
[[File:cyclegraph1.png|600px]]

==Ladder graph==

&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.ladder_graph(5)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:

[[File:laddergraph.png|600px]]

==Path Graph==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.path_graph(6)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:

[[File:pathgraph.png|600px]]

==Star Graph==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.star_graph(5)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:stargraph.png|600px]]


==Star Graph1==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.star_graph(4)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:stargraph4points.png|600px]]

==Wheel Graph==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.wheel_graph(4)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:wheelgraph.png|600px]]

==Wheel Graph of 5 nodes==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.wheel_graph(5)
nx.draw(G)
plt.show()

&lt;/pre&gt;

Output:

[[File:wheelgraph5nodes.png|600px]]

==Wheel Graph of 6 nodes==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.wheel_graph(6)
nx.draw(G)
plt.show()

&lt;/pre&gt;

Output:

[[File:wheelgraph6nodes.png|600px]]

==Random Graph==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.gnp_random_graph(5,0.5)
nx.draw(G)
plt.show()

&lt;/pre&gt;

Output:

[[File:randomgraph1.png|600px]]


Running the same above program, we will get different output, as shown below, as it is random graph.

[[File:randomgraph2.png|600px]]

=Collatz Conjecture=
Taught by Sudarshan sir and Amit sir, and Edited by Ms. Ami Tusharkant Choksi

If a number is even, divide it by ''2'', if it is odd, make multiply it by ''3'' and add ''1'', till you get ''1''. This simple problem is called, ''Collatz Conjecture''. 

[[File:collatz1.png|600px]]

[[File:collatz2.png|600px]]

[[File:collatz3.png|600px]]

[[File:collatz4.png|600px]]

[[File:collatz5.png|600px]]

Number is bigger doesn't mean more iterations are required. One can notice, from the output of the following program. 



The program to implement the same is as follows:
==Program==
&lt;pre&gt;
#collatz conjecture
#if num is even, divide it by 2
#if num is odd, new number is equal to 3n+1


def checkNum(num):
    iterations=1
    while(num!=1):
        if(num%2==0):
            num=int(num/2)            
        else:
            num = 3*num+1
        iterations+=1
        

    print(num,iterations)


#checkNum(12)#Output: 1 10
#checkNum(26)#Output: 1 11
checkNum(2000)#Output: 1 113
&lt;/pre&gt;

&lt;pre&gt;

#recursive approach

def checkNum(num):
    if num==1:
        return 1
    elif num%2==0:
        return checkNum(num/2)+1
    else:
        return checkNum(3*num +1)+1


output:
checkNum(26)
Out[27]: 11
checkNum(5000)
Out[28]: 29
&lt;/pre&gt;

==Program adding statement to print all iterations==
&lt;pre&gt;
def checkNum(num):
    iterations=1
    while(num!=1):
        if(num%2==0):
            num=int(num/2)            
        else:
            num = 3*num+1
        print(iterations,&quot;:&quot;,num)
        iterations+=1
        

    print(num,iterations)
&lt;/pre&gt;
==Output==
===For checkNum(2000)===
&lt;pre&gt;
1 : 1000
2 : 500
3 : 250
4 : 125
5 : 376
6 : 188
7 : 94
8 : 47
9 : 142
10 : 71
11 : 214
12 : 107
13 : 322
14 : 161
15 : 484
16 : 242
17 : 121
18 : 364
19 : 182
20 : 91
21 : 274
22 : 137
23 : 412
24 : 206
25 : 103
26 : 310
27 : 155
28 : 466
29 : 233
30 : 700
31 : 350
32 : 175
33 : 526
34 : 263
35 : 790
36 : 395
37 : 1186
38 : 593
39 : 1780
40 : 890
41 : 445
42 : 1336
43 : 668
44 : 334
45 : 167
46 : 502
47 : 251
48 : 754
49 : 377
50 : 1132
51 : 566
52 : 283
53 : 850
54 : 425
55 : 1276
56 : 638
57 : 319
58 : 958
59 : 479
60 : 1438
61 : 719
62 : 2158
63 : 1079
64 : 3238
65 : 1619
66 : 4858
67 : 2429
68 : 7288
69 : 3644
70 : 1822
71 : 911
72 : 2734
73 : 1367
74 : 4102
75 : 2051
76 : 6154
77 : 3077
78 : 9232
79 : 4616
80 : 2308
81 : 1154
82 : 577
83 : 1732
84 : 866
85 : 433
86 : 1300
87 : 650
88 : 325
89 : 976
90 : 488
91 : 244
92 : 122
93 : 61
94 : 184
95 : 92
96 : 46
97 : 23
98 : 70
99 : 35
100 : 106
101 : 53
102 : 160
103 : 80
104 : 40
105 : 20
106 : 10
107 : 5
108 : 16
109 : 8
110 : 4
111 : 2
112 : 1
1 113
&lt;/pre&gt;

===For checkNum(5000)===
&lt;pre&gt;
1 : 2500
2 : 1250
3 : 625
4 : 1876
5 : 938
6 : 469
7 : 1408
8 : 704
9 : 352
10 : 176
11 : 88
12 : 44
13 : 22
14 : 11
15 : 34
16 : 17
17 : 52
18 : 26
19 : 13
20 : 40
21 : 20
22 : 10
23 : 5
24 : 16
25 : 8
26 : 4
27 : 2
28 : 1
1 29
&lt;/pre&gt;
===For checkNum(25000000)===
&lt;pre&gt;
1 : 12500000
2 : 6250000
3 : 3125000
4 : 1562500
5 : 781250
6 : 390625
7 : 1171876
8 : 585938
9 : 292969
10 : 878908
11 : 439454
12 : 219727
13 : 659182
14 : 329591
15 : 988774
16 : 494387
17 : 1483162
18 : 741581
19 : 2224744
20 : 1112372
21 : 556186
22 : 278093
23 : 834280
24 : 417140
25 : 208570
26 : 104285
27 : 312856
28 : 156428
29 : 78214
30 : 39107
31 : 117322
32 : 58661
33 : 175984
34 : 87992
35 : 43996
36 : 21998
37 : 10999
38 : 32998
39 : 16499
40 : 49498
41 : 24749
42 : 74248
43 : 37124
44 : 18562
45 : 9281
46 : 27844
47 : 13922
48 : 6961
49 : 20884
50 : 10442
51 : 5221
52 : 15664
53 : 7832
54 : 3916
55 : 1958
56 : 979
57 : 2938
58 : 1469
59 : 4408
60 : 2204
61 : 1102
62 : 551
63 : 1654
64 : 827
65 : 2482
66 : 1241
67 : 3724
68 : 1862
69 : 931
70 : 2794
71 : 1397
72 : 4192
73 : 2096
74 : 1048
75 : 524
76 : 262
77 : 131
78 : 394
79 : 197
80 : 592
81 : 296
82 : 148
83 : 74
84 : 37
85 : 112
86 : 56
87 : 28
88 : 14
89 : 7
90 : 22
91 : 11
92 : 34
93 : 17
94 : 52
95 : 26
96 : 13
97 : 40
98 : 20
99 : 10
100 : 5
101 : 16
102 : 8
103 : 4
104 : 2
105 : 1
1 106
&lt;/pre&gt;

Happy Life ahead!!!
[[File:end1.png]]</text>
      <sha1>lu5e090mvq5opem1qyyfobcz8xoxkv9</sha1>
    </revision>
    <revision>
      <id>4420</id>
      <parentid>4417</parentid>
      <timestamp>2018-10-16T04:45:09Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* Star Graph1 */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="8991">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_12 Contributors of this page]

=Page Rank - How does Google Work=
One web page is having link to other page, that is a page is referring to other page. Google uses ''Page Rank'' algorithm to choose which page should be displayed first.

If we have network, connections as below:
[[File:rank0.png]]

We want to pick a leader out of all these nodes. How to pick a leader?  Why to elect a leader? It is because we want to find the super power of available nodes.                     
[[File:rank1.png]]

For example, the application wherein, we want to find the most impressive person of the  few ones. How to decide it? As shown in below figure, each node will communicate with other, randomly, we implement the count for each node, how many times, the particular node is being visited.
[[File:rank2.png]]

[[#Top]]

As shown in following, figure, all nodes are visited and each node is marked with the 
number i.e.number of times the node is visited.
[[File:rank3.png]]

The node with the maximum count, becomes the winner. Here, node with 120 count in figure 
below, is the winner. i.e. The person with 120 count in the figure is the most impressive 
person in the community being considered.
[[File:rank4.png]]

[[File:rank5.png]]

[[File:rank6.png]]

[[File:rank7.png]]


[[File:rank8.png]]

[[#Top]]

Google selects the page rank in this matter. Each web page is connected to other web page with web links. To a page, maximum link is there, that will be put on top results in Google search results.
[[File:rank9.png]]

Google uses web crawler. The crawler takes the random walk on the www network and rank the web sites.
[[File:rank10.png]]

This way Google ranks the pages and displays search results, according to page rank.
[[File:rank11.png]]

e.g.we search for ''mysore city''. Google has 10,000 results. But it displays the results in the sequence of page rank of search results, As shown in figure below.
[[File:mysore.png]]

[[#Top]]

==Page rank algorithm ==
As shown in beautiful figure below, few nodes combinely selected one as the leader, then that leader and other nodes, have selected         other as a leader. This way, finally the final leader is elected.
[[File:rank12.png|600px]]


[[File:graph00.png|600px]]

[[File:graph01.png|600px]]

==Gragh Drawing Program1==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
nx.barbell_graph(4,2)
G=nx.barbell_graph(4,2)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:Graph003.png|600px]]

==Gragh Drawing Program2==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
nx.barbell_graph(4,3)
G=nx.barbell_graph(4,3)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:
[[File:Graph004.png|600px]]

==Gragh Drawing Program3==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
nx.barbell_graph(5,3)
G=nx.barbell_graph(5,3)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:Graph005.png|600px]]

==Complete Graph==
Complete graph is a graph, wherein, each node is connected to each other nodes in a graph.

&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.complete_graph(4)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:

[[File:completegraph001.png|600px]]

==Cycle graph==

&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.cycle_graph(5)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:
[[File:cyclegraph1.png|600px]]

==Ladder graph==

&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.ladder_graph(5)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:

[[File:laddergraph.png|600px]]

==Path Graph==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.path_graph(6)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:

[[File:pathgraph.png|600px]]

==Star Graph==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.star_graph(5)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:stargraph.png|600px]]


==Star Graph of 4 Nodes==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.star_graph(4)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:stargraph4points.png|600px]]

==Wheel Graph==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.wheel_graph(4)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:wheelgraph.png|600px]]

==Wheel Graph of 5 nodes==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.wheel_graph(5)
nx.draw(G)
plt.show()

&lt;/pre&gt;

Output:

[[File:wheelgraph5nodes.png|600px]]

==Wheel Graph of 6 nodes==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.wheel_graph(6)
nx.draw(G)
plt.show()

&lt;/pre&gt;

Output:

[[File:wheelgraph6nodes.png|600px]]

==Random Graph==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.gnp_random_graph(5,0.5)
nx.draw(G)
plt.show()

&lt;/pre&gt;

Output:

[[File:randomgraph1.png|600px]]


Running the same above program, we will get different output, as shown below, as it is random graph.

[[File:randomgraph2.png|600px]]

=Collatz Conjecture=
Taught by Sudarshan sir and Amit sir, and Edited by Ms. Ami Tusharkant Choksi

If a number is even, divide it by ''2'', if it is odd, make multiply it by ''3'' and add ''1'', till you get ''1''. This simple problem is called, ''Collatz Conjecture''. 

[[File:collatz1.png|600px]]

[[File:collatz2.png|600px]]

[[File:collatz3.png|600px]]

[[File:collatz4.png|600px]]

[[File:collatz5.png|600px]]

Number is bigger doesn't mean more iterations are required. One can notice, from the output of the following program. 



The program to implement the same is as follows:
==Program==
&lt;pre&gt;
#collatz conjecture
#if num is even, divide it by 2
#if num is odd, new number is equal to 3n+1


def checkNum(num):
    iterations=1
    while(num!=1):
        if(num%2==0):
            num=int(num/2)            
        else:
            num = 3*num+1
        iterations+=1
        

    print(num,iterations)


#checkNum(12)#Output: 1 10
#checkNum(26)#Output: 1 11
checkNum(2000)#Output: 1 113
&lt;/pre&gt;

&lt;pre&gt;

#recursive approach

def checkNum(num):
    if num==1:
        return 1
    elif num%2==0:
        return checkNum(num/2)+1
    else:
        return checkNum(3*num +1)+1


output:
checkNum(26)
Out[27]: 11
checkNum(5000)
Out[28]: 29
&lt;/pre&gt;

==Program adding statement to print all iterations==
&lt;pre&gt;
def checkNum(num):
    iterations=1
    while(num!=1):
        if(num%2==0):
            num=int(num/2)            
        else:
            num = 3*num+1
        print(iterations,&quot;:&quot;,num)
        iterations+=1
        

    print(num,iterations)
&lt;/pre&gt;
==Output==
===For checkNum(2000)===
&lt;pre&gt;
1 : 1000
2 : 500
3 : 250
4 : 125
5 : 376
6 : 188
7 : 94
8 : 47
9 : 142
10 : 71
11 : 214
12 : 107
13 : 322
14 : 161
15 : 484
16 : 242
17 : 121
18 : 364
19 : 182
20 : 91
21 : 274
22 : 137
23 : 412
24 : 206
25 : 103
26 : 310
27 : 155
28 : 466
29 : 233
30 : 700
31 : 350
32 : 175
33 : 526
34 : 263
35 : 790
36 : 395
37 : 1186
38 : 593
39 : 1780
40 : 890
41 : 445
42 : 1336
43 : 668
44 : 334
45 : 167
46 : 502
47 : 251
48 : 754
49 : 377
50 : 1132
51 : 566
52 : 283
53 : 850
54 : 425
55 : 1276
56 : 638
57 : 319
58 : 958
59 : 479
60 : 1438
61 : 719
62 : 2158
63 : 1079
64 : 3238
65 : 1619
66 : 4858
67 : 2429
68 : 7288
69 : 3644
70 : 1822
71 : 911
72 : 2734
73 : 1367
74 : 4102
75 : 2051
76 : 6154
77 : 3077
78 : 9232
79 : 4616
80 : 2308
81 : 1154
82 : 577
83 : 1732
84 : 866
85 : 433
86 : 1300
87 : 650
88 : 325
89 : 976
90 : 488
91 : 244
92 : 122
93 : 61
94 : 184
95 : 92
96 : 46
97 : 23
98 : 70
99 : 35
100 : 106
101 : 53
102 : 160
103 : 80
104 : 40
105 : 20
106 : 10
107 : 5
108 : 16
109 : 8
110 : 4
111 : 2
112 : 1
1 113
&lt;/pre&gt;

===For checkNum(5000)===
&lt;pre&gt;
1 : 2500
2 : 1250
3 : 625
4 : 1876
5 : 938
6 : 469
7 : 1408
8 : 704
9 : 352
10 : 176
11 : 88
12 : 44
13 : 22
14 : 11
15 : 34
16 : 17
17 : 52
18 : 26
19 : 13
20 : 40
21 : 20
22 : 10
23 : 5
24 : 16
25 : 8
26 : 4
27 : 2
28 : 1
1 29
&lt;/pre&gt;
===For checkNum(25000000)===
&lt;pre&gt;
1 : 12500000
2 : 6250000
3 : 3125000
4 : 1562500
5 : 781250
6 : 390625
7 : 1171876
8 : 585938
9 : 292969
10 : 878908
11 : 439454
12 : 219727
13 : 659182
14 : 329591
15 : 988774
16 : 494387
17 : 1483162
18 : 741581
19 : 2224744
20 : 1112372
21 : 556186
22 : 278093
23 : 834280
24 : 417140
25 : 208570
26 : 104285
27 : 312856
28 : 156428
29 : 78214
30 : 39107
31 : 117322
32 : 58661
33 : 175984
34 : 87992
35 : 43996
36 : 21998
37 : 10999
38 : 32998
39 : 16499
40 : 49498
41 : 24749
42 : 74248
43 : 37124
44 : 18562
45 : 9281
46 : 27844
47 : 13922
48 : 6961
49 : 20884
50 : 10442
51 : 5221
52 : 15664
53 : 7832
54 : 3916
55 : 1958
56 : 979
57 : 2938
58 : 1469
59 : 4408
60 : 2204
61 : 1102
62 : 551
63 : 1654
64 : 827
65 : 2482
66 : 1241
67 : 3724
68 : 1862
69 : 931
70 : 2794
71 : 1397
72 : 4192
73 : 2096
74 : 1048
75 : 524
76 : 262
77 : 131
78 : 394
79 : 197
80 : 592
81 : 296
82 : 148
83 : 74
84 : 37
85 : 112
86 : 56
87 : 28
88 : 14
89 : 7
90 : 22
91 : 11
92 : 34
93 : 17
94 : 52
95 : 26
96 : 13
97 : 40
98 : 20
99 : 10
100 : 5
101 : 16
102 : 8
103 : 4
104 : 2
105 : 1
1 106
&lt;/pre&gt;

Happy Life ahead!!!
[[File:end1.png]]</text>
      <sha1>e8h8sny0f6n4s3x172yqd6kcdi46kuw</sha1>
    </revision>
    <revision>
      <id>4421</id>
      <parentid>4420</parentid>
      <timestamp>2018-10-16T04:46:06Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* Gragh Drawing Program2 */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="8992">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_12 Contributors of this page]

=Page Rank - How does Google Work=
One web page is having link to other page, that is a page is referring to other page. Google uses ''Page Rank'' algorithm to choose which page should be displayed first.

If we have network, connections as below:
[[File:rank0.png]]

We want to pick a leader out of all these nodes. How to pick a leader?  Why to elect a leader? It is because we want to find the super power of available nodes.                     
[[File:rank1.png]]

For example, the application wherein, we want to find the most impressive person of the  few ones. How to decide it? As shown in below figure, each node will communicate with other, randomly, we implement the count for each node, how many times, the particular node is being visited.
[[File:rank2.png]]

[[#Top]]

As shown in following, figure, all nodes are visited and each node is marked with the 
number i.e.number of times the node is visited.
[[File:rank3.png]]

The node with the maximum count, becomes the winner. Here, node with 120 count in figure 
below, is the winner. i.e. The person with 120 count in the figure is the most impressive 
person in the community being considered.
[[File:rank4.png]]

[[File:rank5.png]]

[[File:rank6.png]]

[[File:rank7.png]]


[[File:rank8.png]]

[[#Top]]

Google selects the page rank in this matter. Each web page is connected to other web page with web links. To a page, maximum link is there, that will be put on top results in Google search results.
[[File:rank9.png]]

Google uses web crawler. The crawler takes the random walk on the www network and rank the web sites.
[[File:rank10.png]]

This way Google ranks the pages and displays search results, according to page rank.
[[File:rank11.png]]

e.g.we search for ''mysore city''. Google has 10,000 results. But it displays the results in the sequence of page rank of search results, As shown in figure below.
[[File:mysore.png]]

[[#Top]]

==Page rank algorithm ==
As shown in beautiful figure below, few nodes combinely selected one as the leader, then that leader and other nodes, have selected         other as a leader. This way, finally the final leader is elected.
[[File:rank12.png|600px]]


[[File:graph00.png|600px]]

[[File:graph01.png|600px]]

==Gragh Drawing Program1==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
nx.barbell_graph(4,2)
G=nx.barbell_graph(4,2)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:Graph003.png|600px]]

==Gragh Drawing Program2==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
nx.barbell_graph(4,3)
G=nx.barbell_graph(4,3)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:Graph004.png|600px]]

==Gragh Drawing Program3==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
nx.barbell_graph(5,3)
G=nx.barbell_graph(5,3)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:Graph005.png|600px]]

==Complete Graph==
Complete graph is a graph, wherein, each node is connected to each other nodes in a graph.

&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.complete_graph(4)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:

[[File:completegraph001.png|600px]]

==Cycle graph==

&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.cycle_graph(5)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:
[[File:cyclegraph1.png|600px]]

==Ladder graph==

&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.ladder_graph(5)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:

[[File:laddergraph.png|600px]]

==Path Graph==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.path_graph(6)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:

[[File:pathgraph.png|600px]]

==Star Graph==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.star_graph(5)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:stargraph.png|600px]]


==Star Graph of 4 Nodes==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.star_graph(4)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:stargraph4points.png|600px]]

==Wheel Graph==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.wheel_graph(4)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:wheelgraph.png|600px]]

==Wheel Graph of 5 nodes==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.wheel_graph(5)
nx.draw(G)
plt.show()

&lt;/pre&gt;

Output:

[[File:wheelgraph5nodes.png|600px]]

==Wheel Graph of 6 nodes==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.wheel_graph(6)
nx.draw(G)
plt.show()

&lt;/pre&gt;

Output:

[[File:wheelgraph6nodes.png|600px]]

==Random Graph==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.gnp_random_graph(5,0.5)
nx.draw(G)
plt.show()

&lt;/pre&gt;

Output:

[[File:randomgraph1.png|600px]]


Running the same above program, we will get different output, as shown below, as it is random graph.

[[File:randomgraph2.png|600px]]

=Collatz Conjecture=
Taught by Sudarshan sir and Amit sir, and Edited by Ms. Ami Tusharkant Choksi

If a number is even, divide it by ''2'', if it is odd, make multiply it by ''3'' and add ''1'', till you get ''1''. This simple problem is called, ''Collatz Conjecture''. 

[[File:collatz1.png|600px]]

[[File:collatz2.png|600px]]

[[File:collatz3.png|600px]]

[[File:collatz4.png|600px]]

[[File:collatz5.png|600px]]

Number is bigger doesn't mean more iterations are required. One can notice, from the output of the following program. 



The program to implement the same is as follows:
==Program==
&lt;pre&gt;
#collatz conjecture
#if num is even, divide it by 2
#if num is odd, new number is equal to 3n+1


def checkNum(num):
    iterations=1
    while(num!=1):
        if(num%2==0):
            num=int(num/2)            
        else:
            num = 3*num+1
        iterations+=1
        

    print(num,iterations)


#checkNum(12)#Output: 1 10
#checkNum(26)#Output: 1 11
checkNum(2000)#Output: 1 113
&lt;/pre&gt;

&lt;pre&gt;

#recursive approach

def checkNum(num):
    if num==1:
        return 1
    elif num%2==0:
        return checkNum(num/2)+1
    else:
        return checkNum(3*num +1)+1


output:
checkNum(26)
Out[27]: 11
checkNum(5000)
Out[28]: 29
&lt;/pre&gt;

==Program adding statement to print all iterations==
&lt;pre&gt;
def checkNum(num):
    iterations=1
    while(num!=1):
        if(num%2==0):
            num=int(num/2)            
        else:
            num = 3*num+1
        print(iterations,&quot;:&quot;,num)
        iterations+=1
        

    print(num,iterations)
&lt;/pre&gt;
==Output==
===For checkNum(2000)===
&lt;pre&gt;
1 : 1000
2 : 500
3 : 250
4 : 125
5 : 376
6 : 188
7 : 94
8 : 47
9 : 142
10 : 71
11 : 214
12 : 107
13 : 322
14 : 161
15 : 484
16 : 242
17 : 121
18 : 364
19 : 182
20 : 91
21 : 274
22 : 137
23 : 412
24 : 206
25 : 103
26 : 310
27 : 155
28 : 466
29 : 233
30 : 700
31 : 350
32 : 175
33 : 526
34 : 263
35 : 790
36 : 395
37 : 1186
38 : 593
39 : 1780
40 : 890
41 : 445
42 : 1336
43 : 668
44 : 334
45 : 167
46 : 502
47 : 251
48 : 754
49 : 377
50 : 1132
51 : 566
52 : 283
53 : 850
54 : 425
55 : 1276
56 : 638
57 : 319
58 : 958
59 : 479
60 : 1438
61 : 719
62 : 2158
63 : 1079
64 : 3238
65 : 1619
66 : 4858
67 : 2429
68 : 7288
69 : 3644
70 : 1822
71 : 911
72 : 2734
73 : 1367
74 : 4102
75 : 2051
76 : 6154
77 : 3077
78 : 9232
79 : 4616
80 : 2308
81 : 1154
82 : 577
83 : 1732
84 : 866
85 : 433
86 : 1300
87 : 650
88 : 325
89 : 976
90 : 488
91 : 244
92 : 122
93 : 61
94 : 184
95 : 92
96 : 46
97 : 23
98 : 70
99 : 35
100 : 106
101 : 53
102 : 160
103 : 80
104 : 40
105 : 20
106 : 10
107 : 5
108 : 16
109 : 8
110 : 4
111 : 2
112 : 1
1 113
&lt;/pre&gt;

===For checkNum(5000)===
&lt;pre&gt;
1 : 2500
2 : 1250
3 : 625
4 : 1876
5 : 938
6 : 469
7 : 1408
8 : 704
9 : 352
10 : 176
11 : 88
12 : 44
13 : 22
14 : 11
15 : 34
16 : 17
17 : 52
18 : 26
19 : 13
20 : 40
21 : 20
22 : 10
23 : 5
24 : 16
25 : 8
26 : 4
27 : 2
28 : 1
1 29
&lt;/pre&gt;
===For checkNum(25000000)===
&lt;pre&gt;
1 : 12500000
2 : 6250000
3 : 3125000
4 : 1562500
5 : 781250
6 : 390625
7 : 1171876
8 : 585938
9 : 292969
10 : 878908
11 : 439454
12 : 219727
13 : 659182
14 : 329591
15 : 988774
16 : 494387
17 : 1483162
18 : 741581
19 : 2224744
20 : 1112372
21 : 556186
22 : 278093
23 : 834280
24 : 417140
25 : 208570
26 : 104285
27 : 312856
28 : 156428
29 : 78214
30 : 39107
31 : 117322
32 : 58661
33 : 175984
34 : 87992
35 : 43996
36 : 21998
37 : 10999
38 : 32998
39 : 16499
40 : 49498
41 : 24749
42 : 74248
43 : 37124
44 : 18562
45 : 9281
46 : 27844
47 : 13922
48 : 6961
49 : 20884
50 : 10442
51 : 5221
52 : 15664
53 : 7832
54 : 3916
55 : 1958
56 : 979
57 : 2938
58 : 1469
59 : 4408
60 : 2204
61 : 1102
62 : 551
63 : 1654
64 : 827
65 : 2482
66 : 1241
67 : 3724
68 : 1862
69 : 931
70 : 2794
71 : 1397
72 : 4192
73 : 2096
74 : 1048
75 : 524
76 : 262
77 : 131
78 : 394
79 : 197
80 : 592
81 : 296
82 : 148
83 : 74
84 : 37
85 : 112
86 : 56
87 : 28
88 : 14
89 : 7
90 : 22
91 : 11
92 : 34
93 : 17
94 : 52
95 : 26
96 : 13
97 : 40
98 : 20
99 : 10
100 : 5
101 : 16
102 : 8
103 : 4
104 : 2
105 : 1
1 106
&lt;/pre&gt;

Happy Life ahead!!!
[[File:end1.png]]</text>
      <sha1>chqgcqxud00gyh10bk1mpmzar5wqafq</sha1>
    </revision>
    <revision>
      <id>4422</id>
      <parentid>4421</parentid>
      <timestamp>2018-10-16T04:46:21Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* Cycle graph */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="8993">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_12 Contributors of this page]

=Page Rank - How does Google Work=
One web page is having link to other page, that is a page is referring to other page. Google uses ''Page Rank'' algorithm to choose which page should be displayed first.

If we have network, connections as below:
[[File:rank0.png]]

We want to pick a leader out of all these nodes. How to pick a leader?  Why to elect a leader? It is because we want to find the super power of available nodes.                     
[[File:rank1.png]]

For example, the application wherein, we want to find the most impressive person of the  few ones. How to decide it? As shown in below figure, each node will communicate with other, randomly, we implement the count for each node, how many times, the particular node is being visited.
[[File:rank2.png]]

[[#Top]]

As shown in following, figure, all nodes are visited and each node is marked with the 
number i.e.number of times the node is visited.
[[File:rank3.png]]

The node with the maximum count, becomes the winner. Here, node with 120 count in figure 
below, is the winner. i.e. The person with 120 count in the figure is the most impressive 
person in the community being considered.
[[File:rank4.png]]

[[File:rank5.png]]

[[File:rank6.png]]

[[File:rank7.png]]


[[File:rank8.png]]

[[#Top]]

Google selects the page rank in this matter. Each web page is connected to other web page with web links. To a page, maximum link is there, that will be put on top results in Google search results.
[[File:rank9.png]]

Google uses web crawler. The crawler takes the random walk on the www network and rank the web sites.
[[File:rank10.png]]

This way Google ranks the pages and displays search results, according to page rank.
[[File:rank11.png]]

e.g.we search for ''mysore city''. Google has 10,000 results. But it displays the results in the sequence of page rank of search results, As shown in figure below.
[[File:mysore.png]]

[[#Top]]

==Page rank algorithm ==
As shown in beautiful figure below, few nodes combinely selected one as the leader, then that leader and other nodes, have selected         other as a leader. This way, finally the final leader is elected.
[[File:rank12.png|600px]]


[[File:graph00.png|600px]]

[[File:graph01.png|600px]]

==Gragh Drawing Program1==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
nx.barbell_graph(4,2)
G=nx.barbell_graph(4,2)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:Graph003.png|600px]]

==Gragh Drawing Program2==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
nx.barbell_graph(4,3)
G=nx.barbell_graph(4,3)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:Graph004.png|600px]]

==Gragh Drawing Program3==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
nx.barbell_graph(5,3)
G=nx.barbell_graph(5,3)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:Graph005.png|600px]]

==Complete Graph==
Complete graph is a graph, wherein, each node is connected to each other nodes in a graph.

&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.complete_graph(4)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:

[[File:completegraph001.png|600px]]

==Cycle graph==

&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.cycle_graph(5)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:

[[File:cyclegraph1.png|600px]]

==Ladder graph==

&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.ladder_graph(5)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:

[[File:laddergraph.png|600px]]

==Path Graph==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.path_graph(6)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:

[[File:pathgraph.png|600px]]

==Star Graph==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.star_graph(5)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:stargraph.png|600px]]


==Star Graph of 4 Nodes==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.star_graph(4)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:stargraph4points.png|600px]]

==Wheel Graph==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.wheel_graph(4)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:wheelgraph.png|600px]]

==Wheel Graph of 5 nodes==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.wheel_graph(5)
nx.draw(G)
plt.show()

&lt;/pre&gt;

Output:

[[File:wheelgraph5nodes.png|600px]]

==Wheel Graph of 6 nodes==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.wheel_graph(6)
nx.draw(G)
plt.show()

&lt;/pre&gt;

Output:

[[File:wheelgraph6nodes.png|600px]]

==Random Graph==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.gnp_random_graph(5,0.5)
nx.draw(G)
plt.show()

&lt;/pre&gt;

Output:

[[File:randomgraph1.png|600px]]


Running the same above program, we will get different output, as shown below, as it is random graph.

[[File:randomgraph2.png|600px]]

=Collatz Conjecture=
Taught by Sudarshan sir and Amit sir, and Edited by Ms. Ami Tusharkant Choksi

If a number is even, divide it by ''2'', if it is odd, make multiply it by ''3'' and add ''1'', till you get ''1''. This simple problem is called, ''Collatz Conjecture''. 

[[File:collatz1.png|600px]]

[[File:collatz2.png|600px]]

[[File:collatz3.png|600px]]

[[File:collatz4.png|600px]]

[[File:collatz5.png|600px]]

Number is bigger doesn't mean more iterations are required. One can notice, from the output of the following program. 



The program to implement the same is as follows:
==Program==
&lt;pre&gt;
#collatz conjecture
#if num is even, divide it by 2
#if num is odd, new number is equal to 3n+1


def checkNum(num):
    iterations=1
    while(num!=1):
        if(num%2==0):
            num=int(num/2)            
        else:
            num = 3*num+1
        iterations+=1
        

    print(num,iterations)


#checkNum(12)#Output: 1 10
#checkNum(26)#Output: 1 11
checkNum(2000)#Output: 1 113
&lt;/pre&gt;

&lt;pre&gt;

#recursive approach

def checkNum(num):
    if num==1:
        return 1
    elif num%2==0:
        return checkNum(num/2)+1
    else:
        return checkNum(3*num +1)+1


output:
checkNum(26)
Out[27]: 11
checkNum(5000)
Out[28]: 29
&lt;/pre&gt;

==Program adding statement to print all iterations==
&lt;pre&gt;
def checkNum(num):
    iterations=1
    while(num!=1):
        if(num%2==0):
            num=int(num/2)            
        else:
            num = 3*num+1
        print(iterations,&quot;:&quot;,num)
        iterations+=1
        

    print(num,iterations)
&lt;/pre&gt;
==Output==
===For checkNum(2000)===
&lt;pre&gt;
1 : 1000
2 : 500
3 : 250
4 : 125
5 : 376
6 : 188
7 : 94
8 : 47
9 : 142
10 : 71
11 : 214
12 : 107
13 : 322
14 : 161
15 : 484
16 : 242
17 : 121
18 : 364
19 : 182
20 : 91
21 : 274
22 : 137
23 : 412
24 : 206
25 : 103
26 : 310
27 : 155
28 : 466
29 : 233
30 : 700
31 : 350
32 : 175
33 : 526
34 : 263
35 : 790
36 : 395
37 : 1186
38 : 593
39 : 1780
40 : 890
41 : 445
42 : 1336
43 : 668
44 : 334
45 : 167
46 : 502
47 : 251
48 : 754
49 : 377
50 : 1132
51 : 566
52 : 283
53 : 850
54 : 425
55 : 1276
56 : 638
57 : 319
58 : 958
59 : 479
60 : 1438
61 : 719
62 : 2158
63 : 1079
64 : 3238
65 : 1619
66 : 4858
67 : 2429
68 : 7288
69 : 3644
70 : 1822
71 : 911
72 : 2734
73 : 1367
74 : 4102
75 : 2051
76 : 6154
77 : 3077
78 : 9232
79 : 4616
80 : 2308
81 : 1154
82 : 577
83 : 1732
84 : 866
85 : 433
86 : 1300
87 : 650
88 : 325
89 : 976
90 : 488
91 : 244
92 : 122
93 : 61
94 : 184
95 : 92
96 : 46
97 : 23
98 : 70
99 : 35
100 : 106
101 : 53
102 : 160
103 : 80
104 : 40
105 : 20
106 : 10
107 : 5
108 : 16
109 : 8
110 : 4
111 : 2
112 : 1
1 113
&lt;/pre&gt;

===For checkNum(5000)===
&lt;pre&gt;
1 : 2500
2 : 1250
3 : 625
4 : 1876
5 : 938
6 : 469
7 : 1408
8 : 704
9 : 352
10 : 176
11 : 88
12 : 44
13 : 22
14 : 11
15 : 34
16 : 17
17 : 52
18 : 26
19 : 13
20 : 40
21 : 20
22 : 10
23 : 5
24 : 16
25 : 8
26 : 4
27 : 2
28 : 1
1 29
&lt;/pre&gt;
===For checkNum(25000000)===
&lt;pre&gt;
1 : 12500000
2 : 6250000
3 : 3125000
4 : 1562500
5 : 781250
6 : 390625
7 : 1171876
8 : 585938
9 : 292969
10 : 878908
11 : 439454
12 : 219727
13 : 659182
14 : 329591
15 : 988774
16 : 494387
17 : 1483162
18 : 741581
19 : 2224744
20 : 1112372
21 : 556186
22 : 278093
23 : 834280
24 : 417140
25 : 208570
26 : 104285
27 : 312856
28 : 156428
29 : 78214
30 : 39107
31 : 117322
32 : 58661
33 : 175984
34 : 87992
35 : 43996
36 : 21998
37 : 10999
38 : 32998
39 : 16499
40 : 49498
41 : 24749
42 : 74248
43 : 37124
44 : 18562
45 : 9281
46 : 27844
47 : 13922
48 : 6961
49 : 20884
50 : 10442
51 : 5221
52 : 15664
53 : 7832
54 : 3916
55 : 1958
56 : 979
57 : 2938
58 : 1469
59 : 4408
60 : 2204
61 : 1102
62 : 551
63 : 1654
64 : 827
65 : 2482
66 : 1241
67 : 3724
68 : 1862
69 : 931
70 : 2794
71 : 1397
72 : 4192
73 : 2096
74 : 1048
75 : 524
76 : 262
77 : 131
78 : 394
79 : 197
80 : 592
81 : 296
82 : 148
83 : 74
84 : 37
85 : 112
86 : 56
87 : 28
88 : 14
89 : 7
90 : 22
91 : 11
92 : 34
93 : 17
94 : 52
95 : 26
96 : 13
97 : 40
98 : 20
99 : 10
100 : 5
101 : 16
102 : 8
103 : 4
104 : 2
105 : 1
1 106
&lt;/pre&gt;

Happy Life ahead!!!
[[File:end1.png]]</text>
      <sha1>1l603nd0vsagsyg0gre0qhpgvhrlrku</sha1>
    </revision>
    <revision>
      <id>4423</id>
      <parentid>4422</parentid>
      <timestamp>2018-10-16T04:47:14Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* Random Graph */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="9033">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_12 Contributors of this page]

=Page Rank - How does Google Work=
One web page is having link to other page, that is a page is referring to other page. Google uses ''Page Rank'' algorithm to choose which page should be displayed first.

If we have network, connections as below:
[[File:rank0.png]]

We want to pick a leader out of all these nodes. How to pick a leader?  Why to elect a leader? It is because we want to find the super power of available nodes.                     
[[File:rank1.png]]

For example, the application wherein, we want to find the most impressive person of the  few ones. How to decide it? As shown in below figure, each node will communicate with other, randomly, we implement the count for each node, how many times, the particular node is being visited.
[[File:rank2.png]]

[[#Top]]

As shown in following, figure, all nodes are visited and each node is marked with the 
number i.e.number of times the node is visited.
[[File:rank3.png]]

The node with the maximum count, becomes the winner. Here, node with 120 count in figure 
below, is the winner. i.e. The person with 120 count in the figure is the most impressive 
person in the community being considered.
[[File:rank4.png]]

[[File:rank5.png]]

[[File:rank6.png]]

[[File:rank7.png]]


[[File:rank8.png]]

[[#Top]]

Google selects the page rank in this matter. Each web page is connected to other web page with web links. To a page, maximum link is there, that will be put on top results in Google search results.
[[File:rank9.png]]

Google uses web crawler. The crawler takes the random walk on the www network and rank the web sites.
[[File:rank10.png]]

This way Google ranks the pages and displays search results, according to page rank.
[[File:rank11.png]]

e.g.we search for ''mysore city''. Google has 10,000 results. But it displays the results in the sequence of page rank of search results, As shown in figure below.
[[File:mysore.png]]

[[#Top]]

==Page rank algorithm ==
As shown in beautiful figure below, few nodes combinely selected one as the leader, then that leader and other nodes, have selected         other as a leader. This way, finally the final leader is elected.
[[File:rank12.png|600px]]


[[File:graph00.png|600px]]

[[File:graph01.png|600px]]

==Gragh Drawing Program1==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
nx.barbell_graph(4,2)
G=nx.barbell_graph(4,2)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:Graph003.png|600px]]

==Gragh Drawing Program2==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
nx.barbell_graph(4,3)
G=nx.barbell_graph(4,3)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:Graph004.png|600px]]

==Gragh Drawing Program3==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
nx.barbell_graph(5,3)
G=nx.barbell_graph(5,3)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:Graph005.png|600px]]

==Complete Graph==
Complete graph is a graph, wherein, each node is connected to each other nodes in a graph.

&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.complete_graph(4)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:

[[File:completegraph001.png|600px]]

==Cycle graph==

&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.cycle_graph(5)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:

[[File:cyclegraph1.png|600px]]

==Ladder graph==

&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.ladder_graph(5)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:

[[File:laddergraph.png|600px]]

==Path Graph==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.path_graph(6)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:

[[File:pathgraph.png|600px]]

==Star Graph==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.star_graph(5)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:stargraph.png|600px]]


==Star Graph of 4 Nodes==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.star_graph(4)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:stargraph4points.png|600px]]

==Wheel Graph==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.wheel_graph(4)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:wheelgraph.png|600px]]

==Wheel Graph of 5 nodes==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.wheel_graph(5)
nx.draw(G)
plt.show()

&lt;/pre&gt;

Output:

[[File:wheelgraph5nodes.png|600px]]

==Wheel Graph of 6 nodes==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.wheel_graph(6)
nx.draw(G)
plt.show()

&lt;/pre&gt;

Output:

[[File:wheelgraph6nodes.png|600px]]

==Random Graph==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.gnp_random_graph(5,0.5)
nx.draw(G)
plt.show()

&lt;/pre&gt;

Output:

[[File:randomgraph1.png|600px]]


Running the same above program, we will get different output, as shown below, as it is random graph.

[[File:randomgraph2.png|600px]]

==Page Rank Algorithm Implementation==

=Collatz Conjecture=
Taught by Sudarshan sir and Amit sir, and Edited by Ms. Ami Tusharkant Choksi

If a number is even, divide it by ''2'', if it is odd, make multiply it by ''3'' and add ''1'', till you get ''1''. This simple problem is called, ''Collatz Conjecture''. 

[[File:collatz1.png|600px]]

[[File:collatz2.png|600px]]

[[File:collatz3.png|600px]]

[[File:collatz4.png|600px]]

[[File:collatz5.png|600px]]

Number is bigger doesn't mean more iterations are required. One can notice, from the output of the following program. 



The program to implement the same is as follows:
==Program==
&lt;pre&gt;
#collatz conjecture
#if num is even, divide it by 2
#if num is odd, new number is equal to 3n+1


def checkNum(num):
    iterations=1
    while(num!=1):
        if(num%2==0):
            num=int(num/2)            
        else:
            num = 3*num+1
        iterations+=1
        

    print(num,iterations)


#checkNum(12)#Output: 1 10
#checkNum(26)#Output: 1 11
checkNum(2000)#Output: 1 113
&lt;/pre&gt;

&lt;pre&gt;

#recursive approach

def checkNum(num):
    if num==1:
        return 1
    elif num%2==0:
        return checkNum(num/2)+1
    else:
        return checkNum(3*num +1)+1


output:
checkNum(26)
Out[27]: 11
checkNum(5000)
Out[28]: 29
&lt;/pre&gt;

==Program adding statement to print all iterations==
&lt;pre&gt;
def checkNum(num):
    iterations=1
    while(num!=1):
        if(num%2==0):
            num=int(num/2)            
        else:
            num = 3*num+1
        print(iterations,&quot;:&quot;,num)
        iterations+=1
        

    print(num,iterations)
&lt;/pre&gt;
==Output==
===For checkNum(2000)===
&lt;pre&gt;
1 : 1000
2 : 500
3 : 250
4 : 125
5 : 376
6 : 188
7 : 94
8 : 47
9 : 142
10 : 71
11 : 214
12 : 107
13 : 322
14 : 161
15 : 484
16 : 242
17 : 121
18 : 364
19 : 182
20 : 91
21 : 274
22 : 137
23 : 412
24 : 206
25 : 103
26 : 310
27 : 155
28 : 466
29 : 233
30 : 700
31 : 350
32 : 175
33 : 526
34 : 263
35 : 790
36 : 395
37 : 1186
38 : 593
39 : 1780
40 : 890
41 : 445
42 : 1336
43 : 668
44 : 334
45 : 167
46 : 502
47 : 251
48 : 754
49 : 377
50 : 1132
51 : 566
52 : 283
53 : 850
54 : 425
55 : 1276
56 : 638
57 : 319
58 : 958
59 : 479
60 : 1438
61 : 719
62 : 2158
63 : 1079
64 : 3238
65 : 1619
66 : 4858
67 : 2429
68 : 7288
69 : 3644
70 : 1822
71 : 911
72 : 2734
73 : 1367
74 : 4102
75 : 2051
76 : 6154
77 : 3077
78 : 9232
79 : 4616
80 : 2308
81 : 1154
82 : 577
83 : 1732
84 : 866
85 : 433
86 : 1300
87 : 650
88 : 325
89 : 976
90 : 488
91 : 244
92 : 122
93 : 61
94 : 184
95 : 92
96 : 46
97 : 23
98 : 70
99 : 35
100 : 106
101 : 53
102 : 160
103 : 80
104 : 40
105 : 20
106 : 10
107 : 5
108 : 16
109 : 8
110 : 4
111 : 2
112 : 1
1 113
&lt;/pre&gt;

===For checkNum(5000)===
&lt;pre&gt;
1 : 2500
2 : 1250
3 : 625
4 : 1876
5 : 938
6 : 469
7 : 1408
8 : 704
9 : 352
10 : 176
11 : 88
12 : 44
13 : 22
14 : 11
15 : 34
16 : 17
17 : 52
18 : 26
19 : 13
20 : 40
21 : 20
22 : 10
23 : 5
24 : 16
25 : 8
26 : 4
27 : 2
28 : 1
1 29
&lt;/pre&gt;
===For checkNum(25000000)===
&lt;pre&gt;
1 : 12500000
2 : 6250000
3 : 3125000
4 : 1562500
5 : 781250
6 : 390625
7 : 1171876
8 : 585938
9 : 292969
10 : 878908
11 : 439454
12 : 219727
13 : 659182
14 : 329591
15 : 988774
16 : 494387
17 : 1483162
18 : 741581
19 : 2224744
20 : 1112372
21 : 556186
22 : 278093
23 : 834280
24 : 417140
25 : 208570
26 : 104285
27 : 312856
28 : 156428
29 : 78214
30 : 39107
31 : 117322
32 : 58661
33 : 175984
34 : 87992
35 : 43996
36 : 21998
37 : 10999
38 : 32998
39 : 16499
40 : 49498
41 : 24749
42 : 74248
43 : 37124
44 : 18562
45 : 9281
46 : 27844
47 : 13922
48 : 6961
49 : 20884
50 : 10442
51 : 5221
52 : 15664
53 : 7832
54 : 3916
55 : 1958
56 : 979
57 : 2938
58 : 1469
59 : 4408
60 : 2204
61 : 1102
62 : 551
63 : 1654
64 : 827
65 : 2482
66 : 1241
67 : 3724
68 : 1862
69 : 931
70 : 2794
71 : 1397
72 : 4192
73 : 2096
74 : 1048
75 : 524
76 : 262
77 : 131
78 : 394
79 : 197
80 : 592
81 : 296
82 : 148
83 : 74
84 : 37
85 : 112
86 : 56
87 : 28
88 : 14
89 : 7
90 : 22
91 : 11
92 : 34
93 : 17
94 : 52
95 : 26
96 : 13
97 : 40
98 : 20
99 : 10
100 : 5
101 : 16
102 : 8
103 : 4
104 : 2
105 : 1
1 106
&lt;/pre&gt;

Happy Life ahead!!!
[[File:end1.png]]</text>
      <sha1>bvxn08mq9z92o2gqdzyt0ne90kdc5hj</sha1>
    </revision>
    <revision>
      <id>4424</id>
      <parentid>4423</parentid>
      <timestamp>2018-10-16T04:51:24Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* Page Rank Algorithm Implementation */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="9288">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_12 Contributors of this page]

=Page Rank - How does Google Work=
One web page is having link to other page, that is a page is referring to other page. Google uses ''Page Rank'' algorithm to choose which page should be displayed first.

If we have network, connections as below:
[[File:rank0.png]]

We want to pick a leader out of all these nodes. How to pick a leader?  Why to elect a leader? It is because we want to find the super power of available nodes.                     
[[File:rank1.png]]

For example, the application wherein, we want to find the most impressive person of the  few ones. How to decide it? As shown in below figure, each node will communicate with other, randomly, we implement the count for each node, how many times, the particular node is being visited.
[[File:rank2.png]]

[[#Top]]

As shown in following, figure, all nodes are visited and each node is marked with the 
number i.e.number of times the node is visited.
[[File:rank3.png]]

The node with the maximum count, becomes the winner. Here, node with 120 count in figure 
below, is the winner. i.e. The person with 120 count in the figure is the most impressive 
person in the community being considered.
[[File:rank4.png]]

[[File:rank5.png]]

[[File:rank6.png]]

[[File:rank7.png]]


[[File:rank8.png]]

[[#Top]]

Google selects the page rank in this matter. Each web page is connected to other web page with web links. To a page, maximum link is there, that will be put on top results in Google search results.
[[File:rank9.png]]

Google uses web crawler. The crawler takes the random walk on the www network and rank the web sites.
[[File:rank10.png]]

This way Google ranks the pages and displays search results, according to page rank.
[[File:rank11.png]]

e.g.we search for ''mysore city''. Google has 10,000 results. But it displays the results in the sequence of page rank of search results, As shown in figure below.
[[File:mysore.png]]

[[#Top]]

==Page rank algorithm ==
As shown in beautiful figure below, few nodes combinely selected one as the leader, then that leader and other nodes, have selected         other as a leader. This way, finally the final leader is elected.
[[File:rank12.png|600px]]


[[File:graph00.png|600px]]

[[File:graph01.png|600px]]

==Gragh Drawing Program1==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
nx.barbell_graph(4,2)
G=nx.barbell_graph(4,2)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:Graph003.png|600px]]

==Gragh Drawing Program2==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
nx.barbell_graph(4,3)
G=nx.barbell_graph(4,3)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:Graph004.png|600px]]

==Gragh Drawing Program3==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
nx.barbell_graph(5,3)
G=nx.barbell_graph(5,3)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:Graph005.png|600px]]

==Complete Graph==
Complete graph is a graph, wherein, each node is connected to each other nodes in a graph.

&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.complete_graph(4)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:

[[File:completegraph001.png|600px]]

==Cycle graph==

&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.cycle_graph(5)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:

[[File:cyclegraph1.png|600px]]

==Ladder graph==

&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.ladder_graph(5)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:

[[File:laddergraph.png|600px]]

==Path Graph==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.path_graph(6)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:

[[File:pathgraph.png|600px]]

==Star Graph==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.star_graph(5)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:stargraph.png|600px]]


==Star Graph of 4 Nodes==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.star_graph(4)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:stargraph4points.png|600px]]

==Wheel Graph==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.wheel_graph(4)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:wheelgraph.png|600px]]

==Wheel Graph of 5 nodes==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.wheel_graph(5)
nx.draw(G)
plt.show()

&lt;/pre&gt;

Output:

[[File:wheelgraph5nodes.png|600px]]

==Wheel Graph of 6 nodes==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.wheel_graph(6)
nx.draw(G)
plt.show()

&lt;/pre&gt;

Output:

[[File:wheelgraph6nodes.png|600px]]

==Random Graph==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.gnp_random_graph(5,0.5)
nx.draw(G)
plt.show()

&lt;/pre&gt;

Output:

[[File:randomgraph1.png|600px]]


Running the same above program, we will get different output, as shown below, as it is random graph.

[[File:randomgraph2.png|600px]]

==Page Rank Algorithm Implementation==

===Random Directed Graph===
&lt;pre&gt;
import networkx as nx
import random
import matplotlib.pyplot as plt

#Draw random directed graph
G=nx.gnp_random_graph(10,0.5,directed=True)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output: 

[[File:randomDirectedGraph.png|600px]]

=Collatz Conjecture=
Taught by Sudarshan sir and Amit sir, and Edited by Ms. Ami Tusharkant Choksi

If a number is even, divide it by ''2'', if it is odd, make multiply it by ''3'' and add ''1'', till you get ''1''. This simple problem is called, ''Collatz Conjecture''. 

[[File:collatz1.png|600px]]

[[File:collatz2.png|600px]]

[[File:collatz3.png|600px]]

[[File:collatz4.png|600px]]

[[File:collatz5.png|600px]]

Number is bigger doesn't mean more iterations are required. One can notice, from the output of the following program. 



The program to implement the same is as follows:
==Program==
&lt;pre&gt;
#collatz conjecture
#if num is even, divide it by 2
#if num is odd, new number is equal to 3n+1


def checkNum(num):
    iterations=1
    while(num!=1):
        if(num%2==0):
            num=int(num/2)            
        else:
            num = 3*num+1
        iterations+=1
        

    print(num,iterations)


#checkNum(12)#Output: 1 10
#checkNum(26)#Output: 1 11
checkNum(2000)#Output: 1 113
&lt;/pre&gt;

&lt;pre&gt;

#recursive approach

def checkNum(num):
    if num==1:
        return 1
    elif num%2==0:
        return checkNum(num/2)+1
    else:
        return checkNum(3*num +1)+1


output:
checkNum(26)
Out[27]: 11
checkNum(5000)
Out[28]: 29
&lt;/pre&gt;

==Program adding statement to print all iterations==
&lt;pre&gt;
def checkNum(num):
    iterations=1
    while(num!=1):
        if(num%2==0):
            num=int(num/2)            
        else:
            num = 3*num+1
        print(iterations,&quot;:&quot;,num)
        iterations+=1
        

    print(num,iterations)
&lt;/pre&gt;
==Output==
===For checkNum(2000)===
&lt;pre&gt;
1 : 1000
2 : 500
3 : 250
4 : 125
5 : 376
6 : 188
7 : 94
8 : 47
9 : 142
10 : 71
11 : 214
12 : 107
13 : 322
14 : 161
15 : 484
16 : 242
17 : 121
18 : 364
19 : 182
20 : 91
21 : 274
22 : 137
23 : 412
24 : 206
25 : 103
26 : 310
27 : 155
28 : 466
29 : 233
30 : 700
31 : 350
32 : 175
33 : 526
34 : 263
35 : 790
36 : 395
37 : 1186
38 : 593
39 : 1780
40 : 890
41 : 445
42 : 1336
43 : 668
44 : 334
45 : 167
46 : 502
47 : 251
48 : 754
49 : 377
50 : 1132
51 : 566
52 : 283
53 : 850
54 : 425
55 : 1276
56 : 638
57 : 319
58 : 958
59 : 479
60 : 1438
61 : 719
62 : 2158
63 : 1079
64 : 3238
65 : 1619
66 : 4858
67 : 2429
68 : 7288
69 : 3644
70 : 1822
71 : 911
72 : 2734
73 : 1367
74 : 4102
75 : 2051
76 : 6154
77 : 3077
78 : 9232
79 : 4616
80 : 2308
81 : 1154
82 : 577
83 : 1732
84 : 866
85 : 433
86 : 1300
87 : 650
88 : 325
89 : 976
90 : 488
91 : 244
92 : 122
93 : 61
94 : 184
95 : 92
96 : 46
97 : 23
98 : 70
99 : 35
100 : 106
101 : 53
102 : 160
103 : 80
104 : 40
105 : 20
106 : 10
107 : 5
108 : 16
109 : 8
110 : 4
111 : 2
112 : 1
1 113
&lt;/pre&gt;

===For checkNum(5000)===
&lt;pre&gt;
1 : 2500
2 : 1250
3 : 625
4 : 1876
5 : 938
6 : 469
7 : 1408
8 : 704
9 : 352
10 : 176
11 : 88
12 : 44
13 : 22
14 : 11
15 : 34
16 : 17
17 : 52
18 : 26
19 : 13
20 : 40
21 : 20
22 : 10
23 : 5
24 : 16
25 : 8
26 : 4
27 : 2
28 : 1
1 29
&lt;/pre&gt;
===For checkNum(25000000)===
&lt;pre&gt;
1 : 12500000
2 : 6250000
3 : 3125000
4 : 1562500
5 : 781250
6 : 390625
7 : 1171876
8 : 585938
9 : 292969
10 : 878908
11 : 439454
12 : 219727
13 : 659182
14 : 329591
15 : 988774
16 : 494387
17 : 1483162
18 : 741581
19 : 2224744
20 : 1112372
21 : 556186
22 : 278093
23 : 834280
24 : 417140
25 : 208570
26 : 104285
27 : 312856
28 : 156428
29 : 78214
30 : 39107
31 : 117322
32 : 58661
33 : 175984
34 : 87992
35 : 43996
36 : 21998
37 : 10999
38 : 32998
39 : 16499
40 : 49498
41 : 24749
42 : 74248
43 : 37124
44 : 18562
45 : 9281
46 : 27844
47 : 13922
48 : 6961
49 : 20884
50 : 10442
51 : 5221
52 : 15664
53 : 7832
54 : 3916
55 : 1958
56 : 979
57 : 2938
58 : 1469
59 : 4408
60 : 2204
61 : 1102
62 : 551
63 : 1654
64 : 827
65 : 2482
66 : 1241
67 : 3724
68 : 1862
69 : 931
70 : 2794
71 : 1397
72 : 4192
73 : 2096
74 : 1048
75 : 524
76 : 262
77 : 131
78 : 394
79 : 197
80 : 592
81 : 296
82 : 148
83 : 74
84 : 37
85 : 112
86 : 56
87 : 28
88 : 14
89 : 7
90 : 22
91 : 11
92 : 34
93 : 17
94 : 52
95 : 26
96 : 13
97 : 40
98 : 20
99 : 10
100 : 5
101 : 16
102 : 8
103 : 4
104 : 2
105 : 1
1 106
&lt;/pre&gt;

Happy Life ahead!!!
[[File:end1.png]]</text>
      <sha1>58k62io2lwsat21l2f0xgygobly79yi</sha1>
    </revision>
    <revision>
      <id>4426</id>
      <parentid>4424</parentid>
      <timestamp>2018-10-16T04:56:15Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* Random Directed Graph */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="9613">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_12 Contributors of this page]

=Page Rank - How does Google Work=
One web page is having link to other page, that is a page is referring to other page. Google uses ''Page Rank'' algorithm to choose which page should be displayed first.

If we have network, connections as below:
[[File:rank0.png]]

We want to pick a leader out of all these nodes. How to pick a leader?  Why to elect a leader? It is because we want to find the super power of available nodes.                     
[[File:rank1.png]]

For example, the application wherein, we want to find the most impressive person of the  few ones. How to decide it? As shown in below figure, each node will communicate with other, randomly, we implement the count for each node, how many times, the particular node is being visited.
[[File:rank2.png]]

[[#Top]]

As shown in following, figure, all nodes are visited and each node is marked with the 
number i.e.number of times the node is visited.
[[File:rank3.png]]

The node with the maximum count, becomes the winner. Here, node with 120 count in figure 
below, is the winner. i.e. The person with 120 count in the figure is the most impressive 
person in the community being considered.
[[File:rank4.png]]

[[File:rank5.png]]

[[File:rank6.png]]

[[File:rank7.png]]


[[File:rank8.png]]

[[#Top]]

Google selects the page rank in this matter. Each web page is connected to other web page with web links. To a page, maximum link is there, that will be put on top results in Google search results.
[[File:rank9.png]]

Google uses web crawler. The crawler takes the random walk on the www network and rank the web sites.
[[File:rank10.png]]

This way Google ranks the pages and displays search results, according to page rank.
[[File:rank11.png]]

e.g.we search for ''mysore city''. Google has 10,000 results. But it displays the results in the sequence of page rank of search results, As shown in figure below.
[[File:mysore.png]]

[[#Top]]

==Page rank algorithm ==
As shown in beautiful figure below, few nodes combinely selected one as the leader, then that leader and other nodes, have selected         other as a leader. This way, finally the final leader is elected.
[[File:rank12.png|600px]]


[[File:graph00.png|600px]]

[[File:graph01.png|600px]]

==Gragh Drawing Program1==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
nx.barbell_graph(4,2)
G=nx.barbell_graph(4,2)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:Graph003.png|600px]]

==Gragh Drawing Program2==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
nx.barbell_graph(4,3)
G=nx.barbell_graph(4,3)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:Graph004.png|600px]]

==Gragh Drawing Program3==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
nx.barbell_graph(5,3)
G=nx.barbell_graph(5,3)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:Graph005.png|600px]]

==Complete Graph==
Complete graph is a graph, wherein, each node is connected to each other nodes in a graph.

&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.complete_graph(4)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:

[[File:completegraph001.png|600px]]

==Cycle graph==

&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.cycle_graph(5)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:

[[File:cyclegraph1.png|600px]]

==Ladder graph==

&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.ladder_graph(5)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:

[[File:laddergraph.png|600px]]

==Path Graph==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.path_graph(6)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:

[[File:pathgraph.png|600px]]

==Star Graph==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.star_graph(5)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:stargraph.png|600px]]


==Star Graph of 4 Nodes==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.star_graph(4)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:stargraph4points.png|600px]]

==Wheel Graph==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.wheel_graph(4)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:wheelgraph.png|600px]]

==Wheel Graph of 5 nodes==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.wheel_graph(5)
nx.draw(G)
plt.show()

&lt;/pre&gt;

Output:

[[File:wheelgraph5nodes.png|600px]]

==Wheel Graph of 6 nodes==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.wheel_graph(6)
nx.draw(G)
plt.show()

&lt;/pre&gt;

Output:

[[File:wheelgraph6nodes.png|600px]]

==Random Graph==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.gnp_random_graph(5,0.5)
nx.draw(G)
plt.show()

&lt;/pre&gt;

Output:

[[File:randomgraph1.png|600px]]


Running the same above program, we will get different output, as shown below, as it is random graph.

[[File:randomgraph2.png|600px]]

==Page Rank Algorithm Implementation==

===Random Directed Graph===
&lt;pre&gt;
import networkx as nx
import random
import matplotlib.pyplot as plt

#Draw random directed graph
G=nx.gnp_random_graph(10,0.5,directed=True)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output: 

[[File:randomDirectedGraph.png|600px]]


==Random Directed Graph with Labels==
&lt;pre&gt;
import networkx as nx
import random
import matplotlib.pyplot as plt

#Draw random directed graph 
G=nx.gnp_random_graph(10,0.5,directed=True)
#Give label numbering to nodes
nx.draw(G,with_labels=True)
plt.show()

&lt;/pre&gt;

Output:

[[File:randomDirectedGraphwithLabels.png|600px]]

=Collatz Conjecture=
Taught by Sudarshan sir and Amit sir, and Edited by Ms. Ami Tusharkant Choksi

If a number is even, divide it by ''2'', if it is odd, make multiply it by ''3'' and add ''1'', till you get ''1''. This simple problem is called, ''Collatz Conjecture''. 

[[File:collatz1.png|600px]]

[[File:collatz2.png|600px]]

[[File:collatz3.png|600px]]

[[File:collatz4.png|600px]]

[[File:collatz5.png|600px]]

Number is bigger doesn't mean more iterations are required. One can notice, from the output of the following program. 



The program to implement the same is as follows:
==Program==
&lt;pre&gt;
#collatz conjecture
#if num is even, divide it by 2
#if num is odd, new number is equal to 3n+1


def checkNum(num):
    iterations=1
    while(num!=1):
        if(num%2==0):
            num=int(num/2)            
        else:
            num = 3*num+1
        iterations+=1
        

    print(num,iterations)


#checkNum(12)#Output: 1 10
#checkNum(26)#Output: 1 11
checkNum(2000)#Output: 1 113
&lt;/pre&gt;

&lt;pre&gt;

#recursive approach

def checkNum(num):
    if num==1:
        return 1
    elif num%2==0:
        return checkNum(num/2)+1
    else:
        return checkNum(3*num +1)+1


output:
checkNum(26)
Out[27]: 11
checkNum(5000)
Out[28]: 29
&lt;/pre&gt;

==Program adding statement to print all iterations==
&lt;pre&gt;
def checkNum(num):
    iterations=1
    while(num!=1):
        if(num%2==0):
            num=int(num/2)            
        else:
            num = 3*num+1
        print(iterations,&quot;:&quot;,num)
        iterations+=1
        

    print(num,iterations)
&lt;/pre&gt;
==Output==
===For checkNum(2000)===
&lt;pre&gt;
1 : 1000
2 : 500
3 : 250
4 : 125
5 : 376
6 : 188
7 : 94
8 : 47
9 : 142
10 : 71
11 : 214
12 : 107
13 : 322
14 : 161
15 : 484
16 : 242
17 : 121
18 : 364
19 : 182
20 : 91
21 : 274
22 : 137
23 : 412
24 : 206
25 : 103
26 : 310
27 : 155
28 : 466
29 : 233
30 : 700
31 : 350
32 : 175
33 : 526
34 : 263
35 : 790
36 : 395
37 : 1186
38 : 593
39 : 1780
40 : 890
41 : 445
42 : 1336
43 : 668
44 : 334
45 : 167
46 : 502
47 : 251
48 : 754
49 : 377
50 : 1132
51 : 566
52 : 283
53 : 850
54 : 425
55 : 1276
56 : 638
57 : 319
58 : 958
59 : 479
60 : 1438
61 : 719
62 : 2158
63 : 1079
64 : 3238
65 : 1619
66 : 4858
67 : 2429
68 : 7288
69 : 3644
70 : 1822
71 : 911
72 : 2734
73 : 1367
74 : 4102
75 : 2051
76 : 6154
77 : 3077
78 : 9232
79 : 4616
80 : 2308
81 : 1154
82 : 577
83 : 1732
84 : 866
85 : 433
86 : 1300
87 : 650
88 : 325
89 : 976
90 : 488
91 : 244
92 : 122
93 : 61
94 : 184
95 : 92
96 : 46
97 : 23
98 : 70
99 : 35
100 : 106
101 : 53
102 : 160
103 : 80
104 : 40
105 : 20
106 : 10
107 : 5
108 : 16
109 : 8
110 : 4
111 : 2
112 : 1
1 113
&lt;/pre&gt;

===For checkNum(5000)===
&lt;pre&gt;
1 : 2500
2 : 1250
3 : 625
4 : 1876
5 : 938
6 : 469
7 : 1408
8 : 704
9 : 352
10 : 176
11 : 88
12 : 44
13 : 22
14 : 11
15 : 34
16 : 17
17 : 52
18 : 26
19 : 13
20 : 40
21 : 20
22 : 10
23 : 5
24 : 16
25 : 8
26 : 4
27 : 2
28 : 1
1 29
&lt;/pre&gt;
===For checkNum(25000000)===
&lt;pre&gt;
1 : 12500000
2 : 6250000
3 : 3125000
4 : 1562500
5 : 781250
6 : 390625
7 : 1171876
8 : 585938
9 : 292969
10 : 878908
11 : 439454
12 : 219727
13 : 659182
14 : 329591
15 : 988774
16 : 494387
17 : 1483162
18 : 741581
19 : 2224744
20 : 1112372
21 : 556186
22 : 278093
23 : 834280
24 : 417140
25 : 208570
26 : 104285
27 : 312856
28 : 156428
29 : 78214
30 : 39107
31 : 117322
32 : 58661
33 : 175984
34 : 87992
35 : 43996
36 : 21998
37 : 10999
38 : 32998
39 : 16499
40 : 49498
41 : 24749
42 : 74248
43 : 37124
44 : 18562
45 : 9281
46 : 27844
47 : 13922
48 : 6961
49 : 20884
50 : 10442
51 : 5221
52 : 15664
53 : 7832
54 : 3916
55 : 1958
56 : 979
57 : 2938
58 : 1469
59 : 4408
60 : 2204
61 : 1102
62 : 551
63 : 1654
64 : 827
65 : 2482
66 : 1241
67 : 3724
68 : 1862
69 : 931
70 : 2794
71 : 1397
72 : 4192
73 : 2096
74 : 1048
75 : 524
76 : 262
77 : 131
78 : 394
79 : 197
80 : 592
81 : 296
82 : 148
83 : 74
84 : 37
85 : 112
86 : 56
87 : 28
88 : 14
89 : 7
90 : 22
91 : 11
92 : 34
93 : 17
94 : 52
95 : 26
96 : 13
97 : 40
98 : 20
99 : 10
100 : 5
101 : 16
102 : 8
103 : 4
104 : 2
105 : 1
1 106
&lt;/pre&gt;

Happy Life ahead!!!
[[File:end1.png]]</text>
      <sha1>5b25zrcrnk3hctuyhvma8uhpi35fhl7</sha1>
    </revision>
    <revision>
      <id>4428</id>
      <parentid>4426</parentid>
      <timestamp>2018-10-16T06:50:16Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* Random Directed Graph with Labels */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="11162">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_12 Contributors of this page]

=Page Rank - How does Google Work=
One web page is having link to other page, that is a page is referring to other page. Google uses ''Page Rank'' algorithm to choose which page should be displayed first.

If we have network, connections as below:
[[File:rank0.png]]

We want to pick a leader out of all these nodes. How to pick a leader?  Why to elect a leader? It is because we want to find the super power of available nodes.                     
[[File:rank1.png]]

For example, the application wherein, we want to find the most impressive person of the  few ones. How to decide it? As shown in below figure, each node will communicate with other, randomly, we implement the count for each node, how many times, the particular node is being visited.
[[File:rank2.png]]

[[#Top]]

As shown in following, figure, all nodes are visited and each node is marked with the 
number i.e.number of times the node is visited.
[[File:rank3.png]]

The node with the maximum count, becomes the winner. Here, node with 120 count in figure 
below, is the winner. i.e. The person with 120 count in the figure is the most impressive 
person in the community being considered.
[[File:rank4.png]]

[[File:rank5.png]]

[[File:rank6.png]]

[[File:rank7.png]]


[[File:rank8.png]]

[[#Top]]

Google selects the page rank in this matter. Each web page is connected to other web page with web links. To a page, maximum link is there, that will be put on top results in Google search results.
[[File:rank9.png]]

Google uses web crawler. The crawler takes the random walk on the www network and rank the web sites.
[[File:rank10.png]]

This way Google ranks the pages and displays search results, according to page rank.
[[File:rank11.png]]

e.g.we search for ''mysore city''. Google has 10,000 results. But it displays the results in the sequence of page rank of search results, As shown in figure below.
[[File:mysore.png]]

[[#Top]]

==Page rank algorithm ==
As shown in beautiful figure below, few nodes combinely selected one as the leader, then that leader and other nodes, have selected         other as a leader. This way, finally the final leader is elected.
[[File:rank12.png|600px]]


[[File:graph00.png|600px]]

[[File:graph01.png|600px]]

==Gragh Drawing Program1==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
nx.barbell_graph(4,2)
G=nx.barbell_graph(4,2)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:Graph003.png|600px]]

==Gragh Drawing Program2==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
nx.barbell_graph(4,3)
G=nx.barbell_graph(4,3)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:Graph004.png|600px]]

==Gragh Drawing Program3==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
nx.barbell_graph(5,3)
G=nx.barbell_graph(5,3)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:Graph005.png|600px]]

==Complete Graph==
Complete graph is a graph, wherein, each node is connected to each other nodes in a graph.

&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.complete_graph(4)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:

[[File:completegraph001.png|600px]]

==Cycle graph==

&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.cycle_graph(5)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:

[[File:cyclegraph1.png|600px]]

==Ladder graph==

&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.ladder_graph(5)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:

[[File:laddergraph.png|600px]]

==Path Graph==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.path_graph(6)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:

[[File:pathgraph.png|600px]]

==Star Graph==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.star_graph(5)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:stargraph.png|600px]]


==Star Graph of 4 Nodes==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.star_graph(4)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:stargraph4points.png|600px]]

==Wheel Graph==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.wheel_graph(4)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:wheelgraph.png|600px]]

==Wheel Graph of 5 nodes==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.wheel_graph(5)
nx.draw(G)
plt.show()

&lt;/pre&gt;

Output:

[[File:wheelgraph5nodes.png|600px]]

==Wheel Graph of 6 nodes==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.wheel_graph(6)
nx.draw(G)
plt.show()

&lt;/pre&gt;

Output:

[[File:wheelgraph6nodes.png|600px]]

==Random Graph==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.gnp_random_graph(5,0.5)
nx.draw(G)
plt.show()

&lt;/pre&gt;

Output:

[[File:randomgraph1.png|600px]]


Running the same above program, we will get different output, as shown below, as it is random graph.

[[File:randomgraph2.png|600px]]

==Page Rank Algorithm Implementation==

===Random Directed Graph===
&lt;pre&gt;
import networkx as nx
import random
import matplotlib.pyplot as plt

#Draw random directed graph
G=nx.gnp_random_graph(10,0.5,directed=True)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output: 

[[File:randomDirectedGraph.png|600px]]


==Random Directed Graph with Labels==
&lt;pre&gt;
import networkx as nx
import random
import matplotlib.pyplot as plt

#Draw random directed graph 
G=nx.gnp_random_graph(10,0.5,directed=True)
#Give label numbering to nodes
nx.draw(G,with_labels=True)
plt.show()

&lt;/pre&gt;

Output:

[[File:randomDirectedGraphwithLabels.png|600px]]

==Page Rank Coding==
&lt;pre&gt;
import networkx as nx
import random
import matplotlib.pyplot as plt
import operator

#Draw random directed graph 
G=nx.gnp_random_graph(10,0.5,directed=True)
#Give label numbering to nodes
nx.draw(G,with_labels=True)
plt.show()

#x is the random source node
x=random.choice([i for i in range(G.number_of_nodes())])

#dictionary to maintain counter
dictCounter={}
#initialize the counter of each node as 0
for i in range(G.number_of_nodes()):
    dictCounter[i]=0
dictCounter[x]=dictCounter[x]+1

for i in range(10000):
    listn=list(G.neighbors(x))
    #if x is a sink node, we need to select random node for random walk
    #, else select random neighbor node

    if(len(listn)==0):
        x=random.choice([i for i in range(G.number_of_nodes())])
        dictCounter[x]=dictCounter[x]+1
    else:
        #choose a node randomly from neightbors
        x=random.choice(listn)
        dictCounter[x]=dictCounter[x]+1

p=nx.pagerank(G)
sorted_p=sorted(p.items(),key=operator.itemgetter(1))
sorted_rw=sorted(dictCounter.items(),key=operator.itemgetter(1))                        
#print(p)
#print(dictCounter)

print(sorted_p)
print(sorted_rw)

&lt;/pre&gt;

Output:

&lt;pre&gt;
[(2, 0.07139920240302768), (5, 0.07464882519777695), (3, 0.08527469366832419), (6, 0.08665188647066119), (4, 0.0987815549542114), (0, 0.10858415997562518), (9, 0.110369696943925), (8, 0.11456211367660116), (1, 0.11682018308814024), (7, 0.13290768362170685)]
[(2, 4), (5, 7), (8, 7), (6, 8), (3, 11), (7, 11), (1, 12), (4, 12), (0, 13), (9, 16)]
&lt;/pre&gt;

=Collatz Conjecture=
Taught by Sudarshan sir and Amit sir, and Edited by Ms. Ami Tusharkant Choksi

If a number is even, divide it by ''2'', if it is odd, make multiply it by ''3'' and add ''1'', till you get ''1''. This simple problem is called, ''Collatz Conjecture''. 

[[File:collatz1.png|600px]]

[[File:collatz2.png|600px]]

[[File:collatz3.png|600px]]

[[File:collatz4.png|600px]]

[[File:collatz5.png|600px]]

Number is bigger doesn't mean more iterations are required. One can notice, from the output of the following program. 



The program to implement the same is as follows:
==Program==
&lt;pre&gt;
#collatz conjecture
#if num is even, divide it by 2
#if num is odd, new number is equal to 3n+1


def checkNum(num):
    iterations=1
    while(num!=1):
        if(num%2==0):
            num=int(num/2)            
        else:
            num = 3*num+1
        iterations+=1
        

    print(num,iterations)


#checkNum(12)#Output: 1 10
#checkNum(26)#Output: 1 11
checkNum(2000)#Output: 1 113
&lt;/pre&gt;

&lt;pre&gt;

#recursive approach

def checkNum(num):
    if num==1:
        return 1
    elif num%2==0:
        return checkNum(num/2)+1
    else:
        return checkNum(3*num +1)+1


output:
checkNum(26)
Out[27]: 11
checkNum(5000)
Out[28]: 29
&lt;/pre&gt;

==Program adding statement to print all iterations==
&lt;pre&gt;
def checkNum(num):
    iterations=1
    while(num!=1):
        if(num%2==0):
            num=int(num/2)            
        else:
            num = 3*num+1
        print(iterations,&quot;:&quot;,num)
        iterations+=1
        

    print(num,iterations)
&lt;/pre&gt;
==Output==
===For checkNum(2000)===
&lt;pre&gt;
1 : 1000
2 : 500
3 : 250
4 : 125
5 : 376
6 : 188
7 : 94
8 : 47
9 : 142
10 : 71
11 : 214
12 : 107
13 : 322
14 : 161
15 : 484
16 : 242
17 : 121
18 : 364
19 : 182
20 : 91
21 : 274
22 : 137
23 : 412
24 : 206
25 : 103
26 : 310
27 : 155
28 : 466
29 : 233
30 : 700
31 : 350
32 : 175
33 : 526
34 : 263
35 : 790
36 : 395
37 : 1186
38 : 593
39 : 1780
40 : 890
41 : 445
42 : 1336
43 : 668
44 : 334
45 : 167
46 : 502
47 : 251
48 : 754
49 : 377
50 : 1132
51 : 566
52 : 283
53 : 850
54 : 425
55 : 1276
56 : 638
57 : 319
58 : 958
59 : 479
60 : 1438
61 : 719
62 : 2158
63 : 1079
64 : 3238
65 : 1619
66 : 4858
67 : 2429
68 : 7288
69 : 3644
70 : 1822
71 : 911
72 : 2734
73 : 1367
74 : 4102
75 : 2051
76 : 6154
77 : 3077
78 : 9232
79 : 4616
80 : 2308
81 : 1154
82 : 577
83 : 1732
84 : 866
85 : 433
86 : 1300
87 : 650
88 : 325
89 : 976
90 : 488
91 : 244
92 : 122
93 : 61
94 : 184
95 : 92
96 : 46
97 : 23
98 : 70
99 : 35
100 : 106
101 : 53
102 : 160
103 : 80
104 : 40
105 : 20
106 : 10
107 : 5
108 : 16
109 : 8
110 : 4
111 : 2
112 : 1
1 113
&lt;/pre&gt;

===For checkNum(5000)===
&lt;pre&gt;
1 : 2500
2 : 1250
3 : 625
4 : 1876
5 : 938
6 : 469
7 : 1408
8 : 704
9 : 352
10 : 176
11 : 88
12 : 44
13 : 22
14 : 11
15 : 34
16 : 17
17 : 52
18 : 26
19 : 13
20 : 40
21 : 20
22 : 10
23 : 5
24 : 16
25 : 8
26 : 4
27 : 2
28 : 1
1 29
&lt;/pre&gt;
===For checkNum(25000000)===
&lt;pre&gt;
1 : 12500000
2 : 6250000
3 : 3125000
4 : 1562500
5 : 781250
6 : 390625
7 : 1171876
8 : 585938
9 : 292969
10 : 878908
11 : 439454
12 : 219727
13 : 659182
14 : 329591
15 : 988774
16 : 494387
17 : 1483162
18 : 741581
19 : 2224744
20 : 1112372
21 : 556186
22 : 278093
23 : 834280
24 : 417140
25 : 208570
26 : 104285
27 : 312856
28 : 156428
29 : 78214
30 : 39107
31 : 117322
32 : 58661
33 : 175984
34 : 87992
35 : 43996
36 : 21998
37 : 10999
38 : 32998
39 : 16499
40 : 49498
41 : 24749
42 : 74248
43 : 37124
44 : 18562
45 : 9281
46 : 27844
47 : 13922
48 : 6961
49 : 20884
50 : 10442
51 : 5221
52 : 15664
53 : 7832
54 : 3916
55 : 1958
56 : 979
57 : 2938
58 : 1469
59 : 4408
60 : 2204
61 : 1102
62 : 551
63 : 1654
64 : 827
65 : 2482
66 : 1241
67 : 3724
68 : 1862
69 : 931
70 : 2794
71 : 1397
72 : 4192
73 : 2096
74 : 1048
75 : 524
76 : 262
77 : 131
78 : 394
79 : 197
80 : 592
81 : 296
82 : 148
83 : 74
84 : 37
85 : 112
86 : 56
87 : 28
88 : 14
89 : 7
90 : 22
91 : 11
92 : 34
93 : 17
94 : 52
95 : 26
96 : 13
97 : 40
98 : 20
99 : 10
100 : 5
101 : 16
102 : 8
103 : 4
104 : 2
105 : 1
1 106
&lt;/pre&gt;

Happy Life ahead!!!
[[File:end1.png]]</text>
      <sha1>lv2fr5bkbr8d0u576b3knxwqpzy7r25</sha1>
    </revision>
    <revision>
      <id>4429</id>
      <parentid>4428</parentid>
      <timestamp>2018-10-16T06:50:47Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* Page Rank Coding */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="11165">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_12 Contributors of this page]

=Page Rank - How does Google Work=
One web page is having link to other page, that is a page is referring to other page. Google uses ''Page Rank'' algorithm to choose which page should be displayed first.

If we have network, connections as below:
[[File:rank0.png]]

We want to pick a leader out of all these nodes. How to pick a leader?  Why to elect a leader? It is because we want to find the super power of available nodes.                     
[[File:rank1.png]]

For example, the application wherein, we want to find the most impressive person of the  few ones. How to decide it? As shown in below figure, each node will communicate with other, randomly, we implement the count for each node, how many times, the particular node is being visited.
[[File:rank2.png]]

[[#Top]]

As shown in following, figure, all nodes are visited and each node is marked with the 
number i.e.number of times the node is visited.
[[File:rank3.png]]

The node with the maximum count, becomes the winner. Here, node with 120 count in figure 
below, is the winner. i.e. The person with 120 count in the figure is the most impressive 
person in the community being considered.
[[File:rank4.png]]

[[File:rank5.png]]

[[File:rank6.png]]

[[File:rank7.png]]


[[File:rank8.png]]

[[#Top]]

Google selects the page rank in this matter. Each web page is connected to other web page with web links. To a page, maximum link is there, that will be put on top results in Google search results.
[[File:rank9.png]]

Google uses web crawler. The crawler takes the random walk on the www network and rank the web sites.
[[File:rank10.png]]

This way Google ranks the pages and displays search results, according to page rank.
[[File:rank11.png]]

e.g.we search for ''mysore city''. Google has 10,000 results. But it displays the results in the sequence of page rank of search results, As shown in figure below.
[[File:mysore.png]]

[[#Top]]

==Page rank algorithm ==
As shown in beautiful figure below, few nodes combinely selected one as the leader, then that leader and other nodes, have selected         other as a leader. This way, finally the final leader is elected.
[[File:rank12.png|600px]]


[[File:graph00.png|600px]]

[[File:graph01.png|600px]]

==Gragh Drawing Program1==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
nx.barbell_graph(4,2)
G=nx.barbell_graph(4,2)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:Graph003.png|600px]]

==Gragh Drawing Program2==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
nx.barbell_graph(4,3)
G=nx.barbell_graph(4,3)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:Graph004.png|600px]]

==Gragh Drawing Program3==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
nx.barbell_graph(5,3)
G=nx.barbell_graph(5,3)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:Graph005.png|600px]]

==Complete Graph==
Complete graph is a graph, wherein, each node is connected to each other nodes in a graph.

&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.complete_graph(4)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:

[[File:completegraph001.png|600px]]

==Cycle graph==

&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.cycle_graph(5)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:

[[File:cyclegraph1.png|600px]]

==Ladder graph==

&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.ladder_graph(5)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:

[[File:laddergraph.png|600px]]

==Path Graph==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.path_graph(6)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:

[[File:pathgraph.png|600px]]

==Star Graph==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.star_graph(5)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:stargraph.png|600px]]


==Star Graph of 4 Nodes==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.star_graph(4)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:stargraph4points.png|600px]]

==Wheel Graph==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.wheel_graph(4)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:wheelgraph.png|600px]]

==Wheel Graph of 5 nodes==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.wheel_graph(5)
nx.draw(G)
plt.show()

&lt;/pre&gt;

Output:

[[File:wheelgraph5nodes.png|600px]]

==Wheel Graph of 6 nodes==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.wheel_graph(6)
nx.draw(G)
plt.show()

&lt;/pre&gt;

Output:

[[File:wheelgraph6nodes.png|600px]]

==Random Graph==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.gnp_random_graph(5,0.5)
nx.draw(G)
plt.show()

&lt;/pre&gt;

Output:

[[File:randomgraph1.png|600px]]


Running the same above program, we will get different output, as shown below, as it is random graph.

[[File:randomgraph2.png|600px]]

==Page Rank Algorithm Implementation==

===Random Directed Graph===
&lt;pre&gt;
import networkx as nx
import random
import matplotlib.pyplot as plt

#Draw random directed graph
G=nx.gnp_random_graph(10,0.5,directed=True)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output: 

[[File:randomDirectedGraph.png|600px]]


==Random Directed Graph with Labels==
&lt;pre&gt;
import networkx as nx
import random
import matplotlib.pyplot as plt

#Draw random directed graph 
G=nx.gnp_random_graph(10,0.5,directed=True)
#Give label numbering to nodes
nx.draw(G,with_labels=True)
plt.show()

&lt;/pre&gt;

Output:

[[File:randomDirectedGraphwithLabels.png|600px]]

==Page Rank Coding==
&lt;pre&gt;
import networkx as nx
import random
import matplotlib.pyplot as plt
import operator

#Draw random directed graph 
G=nx.gnp_random_graph(10,0.5,directed=True)
#Give label numbering to nodes
nx.draw(G,with_labels=True)
plt.show()

#x is the random source node
x=random.choice([i for i in range(G.number_of_nodes())])

#dictionary to maintain counter
dictCounter={}
#initialize the counter of each node as 0
for i in range(G.number_of_nodes()):
    dictCounter[i]=0
dictCounter[x]=dictCounter[x]+1

for i in range(10000):
    listn=list(G.neighbors(x))
    #if x is a sink node, we need to select random node for random walk
    #, else select random neighbor node

    if(len(listn)==0):
        x=random.choice([i for i in range(G.number_of_nodes())])
        dictCounter[x]=dictCounter[x]+1
    else:
        #choose a node randomly from neightbors
        x=random.choice(listn)
        dictCounter[x]=dictCounter[x]+1

p=nx.pagerank(G)
sorted_p=sorted(p.items(),key=operator.itemgetter(1))
sorted_rw=sorted(dictCounter.items(),key=operator.itemgetter(1))                        
#print(p)
#print(dictCounter)

print(sorted_p)
print(sorted_rw)

&lt;/pre&gt;

Output:

&lt;pre&gt;
[(2, 0.07139920240302768), (5, 0.07464882519777695), (3, 0.08527469366832419), 
(6, 0.08665188647066119), (4, 0.0987815549542114), (0, 0.10858415997562518), 
(9, 0.110369696943925), (8, 0.11456211367660116), (1, 0.11682018308814024), 
(7, 0.13290768362170685)]
[(2, 4), (5, 7), (8, 7), (6, 8), (3, 11), (7, 11), (1, 12), (4, 12), (0, 13), (9, 16)]
&lt;/pre&gt;

=Collatz Conjecture=
Taught by Sudarshan sir and Amit sir, and Edited by Ms. Ami Tusharkant Choksi

If a number is even, divide it by ''2'', if it is odd, make multiply it by ''3'' and add ''1'', till you get ''1''. This simple problem is called, ''Collatz Conjecture''. 

[[File:collatz1.png|600px]]

[[File:collatz2.png|600px]]

[[File:collatz3.png|600px]]

[[File:collatz4.png|600px]]

[[File:collatz5.png|600px]]

Number is bigger doesn't mean more iterations are required. One can notice, from the output of the following program. 



The program to implement the same is as follows:
==Program==
&lt;pre&gt;
#collatz conjecture
#if num is even, divide it by 2
#if num is odd, new number is equal to 3n+1


def checkNum(num):
    iterations=1
    while(num!=1):
        if(num%2==0):
            num=int(num/2)            
        else:
            num = 3*num+1
        iterations+=1
        

    print(num,iterations)


#checkNum(12)#Output: 1 10
#checkNum(26)#Output: 1 11
checkNum(2000)#Output: 1 113
&lt;/pre&gt;

&lt;pre&gt;

#recursive approach

def checkNum(num):
    if num==1:
        return 1
    elif num%2==0:
        return checkNum(num/2)+1
    else:
        return checkNum(3*num +1)+1


output:
checkNum(26)
Out[27]: 11
checkNum(5000)
Out[28]: 29
&lt;/pre&gt;

==Program adding statement to print all iterations==
&lt;pre&gt;
def checkNum(num):
    iterations=1
    while(num!=1):
        if(num%2==0):
            num=int(num/2)            
        else:
            num = 3*num+1
        print(iterations,&quot;:&quot;,num)
        iterations+=1
        

    print(num,iterations)
&lt;/pre&gt;
==Output==
===For checkNum(2000)===
&lt;pre&gt;
1 : 1000
2 : 500
3 : 250
4 : 125
5 : 376
6 : 188
7 : 94
8 : 47
9 : 142
10 : 71
11 : 214
12 : 107
13 : 322
14 : 161
15 : 484
16 : 242
17 : 121
18 : 364
19 : 182
20 : 91
21 : 274
22 : 137
23 : 412
24 : 206
25 : 103
26 : 310
27 : 155
28 : 466
29 : 233
30 : 700
31 : 350
32 : 175
33 : 526
34 : 263
35 : 790
36 : 395
37 : 1186
38 : 593
39 : 1780
40 : 890
41 : 445
42 : 1336
43 : 668
44 : 334
45 : 167
46 : 502
47 : 251
48 : 754
49 : 377
50 : 1132
51 : 566
52 : 283
53 : 850
54 : 425
55 : 1276
56 : 638
57 : 319
58 : 958
59 : 479
60 : 1438
61 : 719
62 : 2158
63 : 1079
64 : 3238
65 : 1619
66 : 4858
67 : 2429
68 : 7288
69 : 3644
70 : 1822
71 : 911
72 : 2734
73 : 1367
74 : 4102
75 : 2051
76 : 6154
77 : 3077
78 : 9232
79 : 4616
80 : 2308
81 : 1154
82 : 577
83 : 1732
84 : 866
85 : 433
86 : 1300
87 : 650
88 : 325
89 : 976
90 : 488
91 : 244
92 : 122
93 : 61
94 : 184
95 : 92
96 : 46
97 : 23
98 : 70
99 : 35
100 : 106
101 : 53
102 : 160
103 : 80
104 : 40
105 : 20
106 : 10
107 : 5
108 : 16
109 : 8
110 : 4
111 : 2
112 : 1
1 113
&lt;/pre&gt;

===For checkNum(5000)===
&lt;pre&gt;
1 : 2500
2 : 1250
3 : 625
4 : 1876
5 : 938
6 : 469
7 : 1408
8 : 704
9 : 352
10 : 176
11 : 88
12 : 44
13 : 22
14 : 11
15 : 34
16 : 17
17 : 52
18 : 26
19 : 13
20 : 40
21 : 20
22 : 10
23 : 5
24 : 16
25 : 8
26 : 4
27 : 2
28 : 1
1 29
&lt;/pre&gt;
===For checkNum(25000000)===
&lt;pre&gt;
1 : 12500000
2 : 6250000
3 : 3125000
4 : 1562500
5 : 781250
6 : 390625
7 : 1171876
8 : 585938
9 : 292969
10 : 878908
11 : 439454
12 : 219727
13 : 659182
14 : 329591
15 : 988774
16 : 494387
17 : 1483162
18 : 741581
19 : 2224744
20 : 1112372
21 : 556186
22 : 278093
23 : 834280
24 : 417140
25 : 208570
26 : 104285
27 : 312856
28 : 156428
29 : 78214
30 : 39107
31 : 117322
32 : 58661
33 : 175984
34 : 87992
35 : 43996
36 : 21998
37 : 10999
38 : 32998
39 : 16499
40 : 49498
41 : 24749
42 : 74248
43 : 37124
44 : 18562
45 : 9281
46 : 27844
47 : 13922
48 : 6961
49 : 20884
50 : 10442
51 : 5221
52 : 15664
53 : 7832
54 : 3916
55 : 1958
56 : 979
57 : 2938
58 : 1469
59 : 4408
60 : 2204
61 : 1102
62 : 551
63 : 1654
64 : 827
65 : 2482
66 : 1241
67 : 3724
68 : 1862
69 : 931
70 : 2794
71 : 1397
72 : 4192
73 : 2096
74 : 1048
75 : 524
76 : 262
77 : 131
78 : 394
79 : 197
80 : 592
81 : 296
82 : 148
83 : 74
84 : 37
85 : 112
86 : 56
87 : 28
88 : 14
89 : 7
90 : 22
91 : 11
92 : 34
93 : 17
94 : 52
95 : 26
96 : 13
97 : 40
98 : 20
99 : 10
100 : 5
101 : 16
102 : 8
103 : 4
104 : 2
105 : 1
1 106
&lt;/pre&gt;

Happy Life ahead!!!
[[File:end1.png]]</text>
      <sha1>3jfywh3ycayfzo1tm5atselrz3r45l5</sha1>
    </revision>
    <revision>
      <id>4430</id>
      <parentid>4429</parentid>
      <timestamp>2018-10-16T06:54:12Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* Random Directed Graph with Labels */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="11167">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_12 Contributors of this page]

=Page Rank - How does Google Work=
One web page is having link to other page, that is a page is referring to other page. Google uses ''Page Rank'' algorithm to choose which page should be displayed first.

If we have network, connections as below:
[[File:rank0.png]]

We want to pick a leader out of all these nodes. How to pick a leader?  Why to elect a leader? It is because we want to find the super power of available nodes.                     
[[File:rank1.png]]

For example, the application wherein, we want to find the most impressive person of the  few ones. How to decide it? As shown in below figure, each node will communicate with other, randomly, we implement the count for each node, how many times, the particular node is being visited.
[[File:rank2.png]]

[[#Top]]

As shown in following, figure, all nodes are visited and each node is marked with the 
number i.e.number of times the node is visited.
[[File:rank3.png]]

The node with the maximum count, becomes the winner. Here, node with 120 count in figure 
below, is the winner. i.e. The person with 120 count in the figure is the most impressive 
person in the community being considered.
[[File:rank4.png]]

[[File:rank5.png]]

[[File:rank6.png]]

[[File:rank7.png]]


[[File:rank8.png]]

[[#Top]]

Google selects the page rank in this matter. Each web page is connected to other web page with web links. To a page, maximum link is there, that will be put on top results in Google search results.
[[File:rank9.png]]

Google uses web crawler. The crawler takes the random walk on the www network and rank the web sites.
[[File:rank10.png]]

This way Google ranks the pages and displays search results, according to page rank.
[[File:rank11.png]]

e.g.we search for ''mysore city''. Google has 10,000 results. But it displays the results in the sequence of page rank of search results, As shown in figure below.
[[File:mysore.png]]

[[#Top]]

==Page rank algorithm ==
As shown in beautiful figure below, few nodes combinely selected one as the leader, then that leader and other nodes, have selected         other as a leader. This way, finally the final leader is elected.
[[File:rank12.png|600px]]


[[File:graph00.png|600px]]

[[File:graph01.png|600px]]

==Gragh Drawing Program1==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
nx.barbell_graph(4,2)
G=nx.barbell_graph(4,2)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:Graph003.png|600px]]

==Gragh Drawing Program2==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
nx.barbell_graph(4,3)
G=nx.barbell_graph(4,3)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:Graph004.png|600px]]

==Gragh Drawing Program3==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
nx.barbell_graph(5,3)
G=nx.barbell_graph(5,3)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:Graph005.png|600px]]

==Complete Graph==
Complete graph is a graph, wherein, each node is connected to each other nodes in a graph.

&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.complete_graph(4)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:

[[File:completegraph001.png|600px]]

==Cycle graph==

&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.cycle_graph(5)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:

[[File:cyclegraph1.png|600px]]

==Ladder graph==

&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.ladder_graph(5)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:

[[File:laddergraph.png|600px]]

==Path Graph==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.path_graph(6)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:

[[File:pathgraph.png|600px]]

==Star Graph==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.star_graph(5)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:stargraph.png|600px]]


==Star Graph of 4 Nodes==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.star_graph(4)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:stargraph4points.png|600px]]

==Wheel Graph==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.wheel_graph(4)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:wheelgraph.png|600px]]

==Wheel Graph of 5 nodes==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.wheel_graph(5)
nx.draw(G)
plt.show()

&lt;/pre&gt;

Output:

[[File:wheelgraph5nodes.png|600px]]

==Wheel Graph of 6 nodes==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.wheel_graph(6)
nx.draw(G)
plt.show()

&lt;/pre&gt;

Output:

[[File:wheelgraph6nodes.png|600px]]

==Random Graph==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.gnp_random_graph(5,0.5)
nx.draw(G)
plt.show()

&lt;/pre&gt;

Output:

[[File:randomgraph1.png|600px]]


Running the same above program, we will get different output, as shown below, as it is random graph.

[[File:randomgraph2.png|600px]]

==Page Rank Algorithm Implementation==

===Random Directed Graph===
&lt;pre&gt;
import networkx as nx
import random
import matplotlib.pyplot as plt

#Draw random directed graph
G=nx.gnp_random_graph(10,0.5,directed=True)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output: 

[[File:randomDirectedGraph.png|600px]]


===Random Directed Graph with Labels===
&lt;pre&gt;
import networkx as nx
import random
import matplotlib.pyplot as plt

#Draw random directed graph 
G=nx.gnp_random_graph(10,0.5,directed=True)
#Give label numbering to nodes
nx.draw(G,with_labels=True)
plt.show()

&lt;/pre&gt;

Output:

[[File:randomDirectedGraphwithLabels.png|600px]]

==Page Rank Coding==
&lt;pre&gt;
import networkx as nx
import random
import matplotlib.pyplot as plt
import operator

#Draw random directed graph 
G=nx.gnp_random_graph(10,0.5,directed=True)
#Give label numbering to nodes
nx.draw(G,with_labels=True)
plt.show()

#x is the random source node
x=random.choice([i for i in range(G.number_of_nodes())])

#dictionary to maintain counter
dictCounter={}
#initialize the counter of each node as 0
for i in range(G.number_of_nodes()):
    dictCounter[i]=0
dictCounter[x]=dictCounter[x]+1

for i in range(10000):
    listn=list(G.neighbors(x))
    #if x is a sink node, we need to select random node for random walk
    #, else select random neighbor node

    if(len(listn)==0):
        x=random.choice([i for i in range(G.number_of_nodes())])
        dictCounter[x]=dictCounter[x]+1
    else:
        #choose a node randomly from neightbors
        x=random.choice(listn)
        dictCounter[x]=dictCounter[x]+1

p=nx.pagerank(G)
sorted_p=sorted(p.items(),key=operator.itemgetter(1))
sorted_rw=sorted(dictCounter.items(),key=operator.itemgetter(1))                        
#print(p)
#print(dictCounter)

print(sorted_p)
print(sorted_rw)

&lt;/pre&gt;

Output:

&lt;pre&gt;
[(2, 0.07139920240302768), (5, 0.07464882519777695), (3, 0.08527469366832419), 
(6, 0.08665188647066119), (4, 0.0987815549542114), (0, 0.10858415997562518), 
(9, 0.110369696943925), (8, 0.11456211367660116), (1, 0.11682018308814024), 
(7, 0.13290768362170685)]
[(2, 4), (5, 7), (8, 7), (6, 8), (3, 11), (7, 11), (1, 12), (4, 12), (0, 13), (9, 16)]
&lt;/pre&gt;

=Collatz Conjecture=
Taught by Sudarshan sir and Amit sir, and Edited by Ms. Ami Tusharkant Choksi

If a number is even, divide it by ''2'', if it is odd, make multiply it by ''3'' and add ''1'', till you get ''1''. This simple problem is called, ''Collatz Conjecture''. 

[[File:collatz1.png|600px]]

[[File:collatz2.png|600px]]

[[File:collatz3.png|600px]]

[[File:collatz4.png|600px]]

[[File:collatz5.png|600px]]

Number is bigger doesn't mean more iterations are required. One can notice, from the output of the following program. 



The program to implement the same is as follows:
==Program==
&lt;pre&gt;
#collatz conjecture
#if num is even, divide it by 2
#if num is odd, new number is equal to 3n+1


def checkNum(num):
    iterations=1
    while(num!=1):
        if(num%2==0):
            num=int(num/2)            
        else:
            num = 3*num+1
        iterations+=1
        

    print(num,iterations)


#checkNum(12)#Output: 1 10
#checkNum(26)#Output: 1 11
checkNum(2000)#Output: 1 113
&lt;/pre&gt;

&lt;pre&gt;

#recursive approach

def checkNum(num):
    if num==1:
        return 1
    elif num%2==0:
        return checkNum(num/2)+1
    else:
        return checkNum(3*num +1)+1


output:
checkNum(26)
Out[27]: 11
checkNum(5000)
Out[28]: 29
&lt;/pre&gt;

==Program adding statement to print all iterations==
&lt;pre&gt;
def checkNum(num):
    iterations=1
    while(num!=1):
        if(num%2==0):
            num=int(num/2)            
        else:
            num = 3*num+1
        print(iterations,&quot;:&quot;,num)
        iterations+=1
        

    print(num,iterations)
&lt;/pre&gt;
==Output==
===For checkNum(2000)===
&lt;pre&gt;
1 : 1000
2 : 500
3 : 250
4 : 125
5 : 376
6 : 188
7 : 94
8 : 47
9 : 142
10 : 71
11 : 214
12 : 107
13 : 322
14 : 161
15 : 484
16 : 242
17 : 121
18 : 364
19 : 182
20 : 91
21 : 274
22 : 137
23 : 412
24 : 206
25 : 103
26 : 310
27 : 155
28 : 466
29 : 233
30 : 700
31 : 350
32 : 175
33 : 526
34 : 263
35 : 790
36 : 395
37 : 1186
38 : 593
39 : 1780
40 : 890
41 : 445
42 : 1336
43 : 668
44 : 334
45 : 167
46 : 502
47 : 251
48 : 754
49 : 377
50 : 1132
51 : 566
52 : 283
53 : 850
54 : 425
55 : 1276
56 : 638
57 : 319
58 : 958
59 : 479
60 : 1438
61 : 719
62 : 2158
63 : 1079
64 : 3238
65 : 1619
66 : 4858
67 : 2429
68 : 7288
69 : 3644
70 : 1822
71 : 911
72 : 2734
73 : 1367
74 : 4102
75 : 2051
76 : 6154
77 : 3077
78 : 9232
79 : 4616
80 : 2308
81 : 1154
82 : 577
83 : 1732
84 : 866
85 : 433
86 : 1300
87 : 650
88 : 325
89 : 976
90 : 488
91 : 244
92 : 122
93 : 61
94 : 184
95 : 92
96 : 46
97 : 23
98 : 70
99 : 35
100 : 106
101 : 53
102 : 160
103 : 80
104 : 40
105 : 20
106 : 10
107 : 5
108 : 16
109 : 8
110 : 4
111 : 2
112 : 1
1 113
&lt;/pre&gt;

===For checkNum(5000)===
&lt;pre&gt;
1 : 2500
2 : 1250
3 : 625
4 : 1876
5 : 938
6 : 469
7 : 1408
8 : 704
9 : 352
10 : 176
11 : 88
12 : 44
13 : 22
14 : 11
15 : 34
16 : 17
17 : 52
18 : 26
19 : 13
20 : 40
21 : 20
22 : 10
23 : 5
24 : 16
25 : 8
26 : 4
27 : 2
28 : 1
1 29
&lt;/pre&gt;
===For checkNum(25000000)===
&lt;pre&gt;
1 : 12500000
2 : 6250000
3 : 3125000
4 : 1562500
5 : 781250
6 : 390625
7 : 1171876
8 : 585938
9 : 292969
10 : 878908
11 : 439454
12 : 219727
13 : 659182
14 : 329591
15 : 988774
16 : 494387
17 : 1483162
18 : 741581
19 : 2224744
20 : 1112372
21 : 556186
22 : 278093
23 : 834280
24 : 417140
25 : 208570
26 : 104285
27 : 312856
28 : 156428
29 : 78214
30 : 39107
31 : 117322
32 : 58661
33 : 175984
34 : 87992
35 : 43996
36 : 21998
37 : 10999
38 : 32998
39 : 16499
40 : 49498
41 : 24749
42 : 74248
43 : 37124
44 : 18562
45 : 9281
46 : 27844
47 : 13922
48 : 6961
49 : 20884
50 : 10442
51 : 5221
52 : 15664
53 : 7832
54 : 3916
55 : 1958
56 : 979
57 : 2938
58 : 1469
59 : 4408
60 : 2204
61 : 1102
62 : 551
63 : 1654
64 : 827
65 : 2482
66 : 1241
67 : 3724
68 : 1862
69 : 931
70 : 2794
71 : 1397
72 : 4192
73 : 2096
74 : 1048
75 : 524
76 : 262
77 : 131
78 : 394
79 : 197
80 : 592
81 : 296
82 : 148
83 : 74
84 : 37
85 : 112
86 : 56
87 : 28
88 : 14
89 : 7
90 : 22
91 : 11
92 : 34
93 : 17
94 : 52
95 : 26
96 : 13
97 : 40
98 : 20
99 : 10
100 : 5
101 : 16
102 : 8
103 : 4
104 : 2
105 : 1
1 106
&lt;/pre&gt;

Happy Life ahead!!!
[[File:end1.png]]</text>
      <sha1>d3p0jkljt35twep2p4lc18xnhcku13e</sha1>
    </revision>
    <revision>
      <id>4431</id>
      <parentid>4430</parentid>
      <timestamp>2018-10-16T06:54:36Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* Page Rank Coding */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="11169">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_12 Contributors of this page]

=Page Rank - How does Google Work=
One web page is having link to other page, that is a page is referring to other page. Google uses ''Page Rank'' algorithm to choose which page should be displayed first.

If we have network, connections as below:
[[File:rank0.png]]

We want to pick a leader out of all these nodes. How to pick a leader?  Why to elect a leader? It is because we want to find the super power of available nodes.                     
[[File:rank1.png]]

For example, the application wherein, we want to find the most impressive person of the  few ones. How to decide it? As shown in below figure, each node will communicate with other, randomly, we implement the count for each node, how many times, the particular node is being visited.
[[File:rank2.png]]

[[#Top]]

As shown in following, figure, all nodes are visited and each node is marked with the 
number i.e.number of times the node is visited.
[[File:rank3.png]]

The node with the maximum count, becomes the winner. Here, node with 120 count in figure 
below, is the winner. i.e. The person with 120 count in the figure is the most impressive 
person in the community being considered.
[[File:rank4.png]]

[[File:rank5.png]]

[[File:rank6.png]]

[[File:rank7.png]]


[[File:rank8.png]]

[[#Top]]

Google selects the page rank in this matter. Each web page is connected to other web page with web links. To a page, maximum link is there, that will be put on top results in Google search results.
[[File:rank9.png]]

Google uses web crawler. The crawler takes the random walk on the www network and rank the web sites.
[[File:rank10.png]]

This way Google ranks the pages and displays search results, according to page rank.
[[File:rank11.png]]

e.g.we search for ''mysore city''. Google has 10,000 results. But it displays the results in the sequence of page rank of search results, As shown in figure below.
[[File:mysore.png]]

[[#Top]]

==Page rank algorithm ==
As shown in beautiful figure below, few nodes combinely selected one as the leader, then that leader and other nodes, have selected         other as a leader. This way, finally the final leader is elected.
[[File:rank12.png|600px]]


[[File:graph00.png|600px]]

[[File:graph01.png|600px]]

==Gragh Drawing Program1==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
nx.barbell_graph(4,2)
G=nx.barbell_graph(4,2)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:Graph003.png|600px]]

==Gragh Drawing Program2==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
nx.barbell_graph(4,3)
G=nx.barbell_graph(4,3)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:Graph004.png|600px]]

==Gragh Drawing Program3==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
nx.barbell_graph(5,3)
G=nx.barbell_graph(5,3)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:Graph005.png|600px]]

==Complete Graph==
Complete graph is a graph, wherein, each node is connected to each other nodes in a graph.

&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.complete_graph(4)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:

[[File:completegraph001.png|600px]]

==Cycle graph==

&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.cycle_graph(5)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:

[[File:cyclegraph1.png|600px]]

==Ladder graph==

&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.ladder_graph(5)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:

[[File:laddergraph.png|600px]]

==Path Graph==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.path_graph(6)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:

[[File:pathgraph.png|600px]]

==Star Graph==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.star_graph(5)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:stargraph.png|600px]]


==Star Graph of 4 Nodes==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.star_graph(4)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:stargraph4points.png|600px]]

==Wheel Graph==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.wheel_graph(4)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:wheelgraph.png|600px]]

==Wheel Graph of 5 nodes==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.wheel_graph(5)
nx.draw(G)
plt.show()

&lt;/pre&gt;

Output:

[[File:wheelgraph5nodes.png|600px]]

==Wheel Graph of 6 nodes==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.wheel_graph(6)
nx.draw(G)
plt.show()

&lt;/pre&gt;

Output:

[[File:wheelgraph6nodes.png|600px]]

==Random Graph==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.gnp_random_graph(5,0.5)
nx.draw(G)
plt.show()

&lt;/pre&gt;

Output:

[[File:randomgraph1.png|600px]]


Running the same above program, we will get different output, as shown below, as it is random graph.

[[File:randomgraph2.png|600px]]

==Page Rank Algorithm Implementation==

===Random Directed Graph===
&lt;pre&gt;
import networkx as nx
import random
import matplotlib.pyplot as plt

#Draw random directed graph
G=nx.gnp_random_graph(10,0.5,directed=True)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output: 

[[File:randomDirectedGraph.png|600px]]


===Random Directed Graph with Labels===
&lt;pre&gt;
import networkx as nx
import random
import matplotlib.pyplot as plt

#Draw random directed graph 
G=nx.gnp_random_graph(10,0.5,directed=True)
#Give label numbering to nodes
nx.draw(G,with_labels=True)
plt.show()

&lt;/pre&gt;

Output:

[[File:randomDirectedGraphwithLabels.png|600px]]

===Page Rank Coding===
&lt;pre&gt;
import networkx as nx
import random
import matplotlib.pyplot as plt
import operator

#Draw random directed graph 
G=nx.gnp_random_graph(10,0.5,directed=True)
#Give label numbering to nodes
nx.draw(G,with_labels=True)
plt.show()

#x is the random source node
x=random.choice([i for i in range(G.number_of_nodes())])

#dictionary to maintain counter
dictCounter={}
#initialize the counter of each node as 0
for i in range(G.number_of_nodes()):
    dictCounter[i]=0
dictCounter[x]=dictCounter[x]+1

for i in range(10000):
    listn=list(G.neighbors(x))
    #if x is a sink node, we need to select random node for random walk
    #, else select random neighbor node

    if(len(listn)==0):
        x=random.choice([i for i in range(G.number_of_nodes())])
        dictCounter[x]=dictCounter[x]+1
    else:
        #choose a node randomly from neightbors
        x=random.choice(listn)
        dictCounter[x]=dictCounter[x]+1

p=nx.pagerank(G)
sorted_p=sorted(p.items(),key=operator.itemgetter(1))
sorted_rw=sorted(dictCounter.items(),key=operator.itemgetter(1))                        
#print(p)
#print(dictCounter)

print(sorted_p)
print(sorted_rw)

&lt;/pre&gt;

Output:

&lt;pre&gt;
[(2, 0.07139920240302768), (5, 0.07464882519777695), (3, 0.08527469366832419), 
(6, 0.08665188647066119), (4, 0.0987815549542114), (0, 0.10858415997562518), 
(9, 0.110369696943925), (8, 0.11456211367660116), (1, 0.11682018308814024), 
(7, 0.13290768362170685)]
[(2, 4), (5, 7), (8, 7), (6, 8), (3, 11), (7, 11), (1, 12), (4, 12), (0, 13), (9, 16)]
&lt;/pre&gt;

=Collatz Conjecture=
Taught by Sudarshan sir and Amit sir, and Edited by Ms. Ami Tusharkant Choksi

If a number is even, divide it by ''2'', if it is odd, make multiply it by ''3'' and add ''1'', till you get ''1''. This simple problem is called, ''Collatz Conjecture''. 

[[File:collatz1.png|600px]]

[[File:collatz2.png|600px]]

[[File:collatz3.png|600px]]

[[File:collatz4.png|600px]]

[[File:collatz5.png|600px]]

Number is bigger doesn't mean more iterations are required. One can notice, from the output of the following program. 



The program to implement the same is as follows:
==Program==
&lt;pre&gt;
#collatz conjecture
#if num is even, divide it by 2
#if num is odd, new number is equal to 3n+1


def checkNum(num):
    iterations=1
    while(num!=1):
        if(num%2==0):
            num=int(num/2)            
        else:
            num = 3*num+1
        iterations+=1
        

    print(num,iterations)


#checkNum(12)#Output: 1 10
#checkNum(26)#Output: 1 11
checkNum(2000)#Output: 1 113
&lt;/pre&gt;

&lt;pre&gt;

#recursive approach

def checkNum(num):
    if num==1:
        return 1
    elif num%2==0:
        return checkNum(num/2)+1
    else:
        return checkNum(3*num +1)+1


output:
checkNum(26)
Out[27]: 11
checkNum(5000)
Out[28]: 29
&lt;/pre&gt;

==Program adding statement to print all iterations==
&lt;pre&gt;
def checkNum(num):
    iterations=1
    while(num!=1):
        if(num%2==0):
            num=int(num/2)            
        else:
            num = 3*num+1
        print(iterations,&quot;:&quot;,num)
        iterations+=1
        

    print(num,iterations)
&lt;/pre&gt;
==Output==
===For checkNum(2000)===
&lt;pre&gt;
1 : 1000
2 : 500
3 : 250
4 : 125
5 : 376
6 : 188
7 : 94
8 : 47
9 : 142
10 : 71
11 : 214
12 : 107
13 : 322
14 : 161
15 : 484
16 : 242
17 : 121
18 : 364
19 : 182
20 : 91
21 : 274
22 : 137
23 : 412
24 : 206
25 : 103
26 : 310
27 : 155
28 : 466
29 : 233
30 : 700
31 : 350
32 : 175
33 : 526
34 : 263
35 : 790
36 : 395
37 : 1186
38 : 593
39 : 1780
40 : 890
41 : 445
42 : 1336
43 : 668
44 : 334
45 : 167
46 : 502
47 : 251
48 : 754
49 : 377
50 : 1132
51 : 566
52 : 283
53 : 850
54 : 425
55 : 1276
56 : 638
57 : 319
58 : 958
59 : 479
60 : 1438
61 : 719
62 : 2158
63 : 1079
64 : 3238
65 : 1619
66 : 4858
67 : 2429
68 : 7288
69 : 3644
70 : 1822
71 : 911
72 : 2734
73 : 1367
74 : 4102
75 : 2051
76 : 6154
77 : 3077
78 : 9232
79 : 4616
80 : 2308
81 : 1154
82 : 577
83 : 1732
84 : 866
85 : 433
86 : 1300
87 : 650
88 : 325
89 : 976
90 : 488
91 : 244
92 : 122
93 : 61
94 : 184
95 : 92
96 : 46
97 : 23
98 : 70
99 : 35
100 : 106
101 : 53
102 : 160
103 : 80
104 : 40
105 : 20
106 : 10
107 : 5
108 : 16
109 : 8
110 : 4
111 : 2
112 : 1
1 113
&lt;/pre&gt;

===For checkNum(5000)===
&lt;pre&gt;
1 : 2500
2 : 1250
3 : 625
4 : 1876
5 : 938
6 : 469
7 : 1408
8 : 704
9 : 352
10 : 176
11 : 88
12 : 44
13 : 22
14 : 11
15 : 34
16 : 17
17 : 52
18 : 26
19 : 13
20 : 40
21 : 20
22 : 10
23 : 5
24 : 16
25 : 8
26 : 4
27 : 2
28 : 1
1 29
&lt;/pre&gt;
===For checkNum(25000000)===
&lt;pre&gt;
1 : 12500000
2 : 6250000
3 : 3125000
4 : 1562500
5 : 781250
6 : 390625
7 : 1171876
8 : 585938
9 : 292969
10 : 878908
11 : 439454
12 : 219727
13 : 659182
14 : 329591
15 : 988774
16 : 494387
17 : 1483162
18 : 741581
19 : 2224744
20 : 1112372
21 : 556186
22 : 278093
23 : 834280
24 : 417140
25 : 208570
26 : 104285
27 : 312856
28 : 156428
29 : 78214
30 : 39107
31 : 117322
32 : 58661
33 : 175984
34 : 87992
35 : 43996
36 : 21998
37 : 10999
38 : 32998
39 : 16499
40 : 49498
41 : 24749
42 : 74248
43 : 37124
44 : 18562
45 : 9281
46 : 27844
47 : 13922
48 : 6961
49 : 20884
50 : 10442
51 : 5221
52 : 15664
53 : 7832
54 : 3916
55 : 1958
56 : 979
57 : 2938
58 : 1469
59 : 4408
60 : 2204
61 : 1102
62 : 551
63 : 1654
64 : 827
65 : 2482
66 : 1241
67 : 3724
68 : 1862
69 : 931
70 : 2794
71 : 1397
72 : 4192
73 : 2096
74 : 1048
75 : 524
76 : 262
77 : 131
78 : 394
79 : 197
80 : 592
81 : 296
82 : 148
83 : 74
84 : 37
85 : 112
86 : 56
87 : 28
88 : 14
89 : 7
90 : 22
91 : 11
92 : 34
93 : 17
94 : 52
95 : 26
96 : 13
97 : 40
98 : 20
99 : 10
100 : 5
101 : 16
102 : 8
103 : 4
104 : 2
105 : 1
1 106
&lt;/pre&gt;

Happy Life ahead!!!
[[File:end1.png]]</text>
      <sha1>8laxl03psyjdu10tu5didfhnf2mj209</sha1>
    </revision>
    <revision>
      <id>4434</id>
      <parentid>4431</parentid>
      <timestamp>2018-10-16T10:47:16Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* For checkNum(25000000) */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="11170">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_12 Contributors of this page]

=Page Rank - How does Google Work=
One web page is having link to other page, that is a page is referring to other page. Google uses ''Page Rank'' algorithm to choose which page should be displayed first.

If we have network, connections as below:
[[File:rank0.png]]

We want to pick a leader out of all these nodes. How to pick a leader?  Why to elect a leader? It is because we want to find the super power of available nodes.                     
[[File:rank1.png]]

For example, the application wherein, we want to find the most impressive person of the  few ones. How to decide it? As shown in below figure, each node will communicate with other, randomly, we implement the count for each node, how many times, the particular node is being visited.
[[File:rank2.png]]

[[#Top]]

As shown in following, figure, all nodes are visited and each node is marked with the 
number i.e.number of times the node is visited.
[[File:rank3.png]]

The node with the maximum count, becomes the winner. Here, node with 120 count in figure 
below, is the winner. i.e. The person with 120 count in the figure is the most impressive 
person in the community being considered.
[[File:rank4.png]]

[[File:rank5.png]]

[[File:rank6.png]]

[[File:rank7.png]]


[[File:rank8.png]]

[[#Top]]

Google selects the page rank in this matter. Each web page is connected to other web page with web links. To a page, maximum link is there, that will be put on top results in Google search results.
[[File:rank9.png]]

Google uses web crawler. The crawler takes the random walk on the www network and rank the web sites.
[[File:rank10.png]]

This way Google ranks the pages and displays search results, according to page rank.
[[File:rank11.png]]

e.g.we search for ''mysore city''. Google has 10,000 results. But it displays the results in the sequence of page rank of search results, As shown in figure below.
[[File:mysore.png]]

[[#Top]]

==Page rank algorithm ==
As shown in beautiful figure below, few nodes combinely selected one as the leader, then that leader and other nodes, have selected         other as a leader. This way, finally the final leader is elected.
[[File:rank12.png|600px]]


[[File:graph00.png|600px]]

[[File:graph01.png|600px]]

==Gragh Drawing Program1==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
nx.barbell_graph(4,2)
G=nx.barbell_graph(4,2)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:Graph003.png|600px]]

==Gragh Drawing Program2==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
nx.barbell_graph(4,3)
G=nx.barbell_graph(4,3)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:Graph004.png|600px]]

==Gragh Drawing Program3==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
nx.barbell_graph(5,3)
G=nx.barbell_graph(5,3)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:Graph005.png|600px]]

==Complete Graph==
Complete graph is a graph, wherein, each node is connected to each other nodes in a graph.

&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.complete_graph(4)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:

[[File:completegraph001.png|600px]]

==Cycle graph==

&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.cycle_graph(5)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:

[[File:cyclegraph1.png|600px]]

==Ladder graph==

&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.ladder_graph(5)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:

[[File:laddergraph.png|600px]]

==Path Graph==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.path_graph(6)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:

[[File:pathgraph.png|600px]]

==Star Graph==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.star_graph(5)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:stargraph.png|600px]]


==Star Graph of 4 Nodes==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.star_graph(4)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:stargraph4points.png|600px]]

==Wheel Graph==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.wheel_graph(4)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:wheelgraph.png|600px]]

==Wheel Graph of 5 nodes==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.wheel_graph(5)
nx.draw(G)
plt.show()

&lt;/pre&gt;

Output:

[[File:wheelgraph5nodes.png|600px]]

==Wheel Graph of 6 nodes==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.wheel_graph(6)
nx.draw(G)
plt.show()

&lt;/pre&gt;

Output:

[[File:wheelgraph6nodes.png|600px]]

==Random Graph==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.gnp_random_graph(5,0.5)
nx.draw(G)
plt.show()

&lt;/pre&gt;

Output:

[[File:randomgraph1.png|600px]]


Running the same above program, we will get different output, as shown below, as it is random graph.

[[File:randomgraph2.png|600px]]

==Page Rank Algorithm Implementation==

===Random Directed Graph===
&lt;pre&gt;
import networkx as nx
import random
import matplotlib.pyplot as plt

#Draw random directed graph
G=nx.gnp_random_graph(10,0.5,directed=True)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output: 

[[File:randomDirectedGraph.png|600px]]


===Random Directed Graph with Labels===
&lt;pre&gt;
import networkx as nx
import random
import matplotlib.pyplot as plt

#Draw random directed graph 
G=nx.gnp_random_graph(10,0.5,directed=True)
#Give label numbering to nodes
nx.draw(G,with_labels=True)
plt.show()

&lt;/pre&gt;

Output:

[[File:randomDirectedGraphwithLabels.png|600px]]

===Page Rank Coding===
&lt;pre&gt;
import networkx as nx
import random
import matplotlib.pyplot as plt
import operator

#Draw random directed graph 
G=nx.gnp_random_graph(10,0.5,directed=True)
#Give label numbering to nodes
nx.draw(G,with_labels=True)
plt.show()

#x is the random source node
x=random.choice([i for i in range(G.number_of_nodes())])

#dictionary to maintain counter
dictCounter={}
#initialize the counter of each node as 0
for i in range(G.number_of_nodes()):
    dictCounter[i]=0
dictCounter[x]=dictCounter[x]+1

for i in range(10000):
    listn=list(G.neighbors(x))
    #if x is a sink node, we need to select random node for random walk
    #, else select random neighbor node

    if(len(listn)==0):
        x=random.choice([i for i in range(G.number_of_nodes())])
        dictCounter[x]=dictCounter[x]+1
    else:
        #choose a node randomly from neightbors
        x=random.choice(listn)
        dictCounter[x]=dictCounter[x]+1

p=nx.pagerank(G)
sorted_p=sorted(p.items(),key=operator.itemgetter(1))
sorted_rw=sorted(dictCounter.items(),key=operator.itemgetter(1))                        
#print(p)
#print(dictCounter)

print(sorted_p)
print(sorted_rw)

&lt;/pre&gt;

Output:

&lt;pre&gt;
[(2, 0.07139920240302768), (5, 0.07464882519777695), (3, 0.08527469366832419), 
(6, 0.08665188647066119), (4, 0.0987815549542114), (0, 0.10858415997562518), 
(9, 0.110369696943925), (8, 0.11456211367660116), (1, 0.11682018308814024), 
(7, 0.13290768362170685)]
[(2, 4), (5, 7), (8, 7), (6, 8), (3, 11), (7, 11), (1, 12), (4, 12), (0, 13), (9, 16)]
&lt;/pre&gt;

=Collatz Conjecture=
Taught by Sudarshan sir and Amit sir, and Edited by Ms. Ami Tusharkant Choksi

If a number is even, divide it by ''2'', if it is odd, make multiply it by ''3'' and add ''1'', till you get ''1''. This simple problem is called, ''Collatz Conjecture''. 

[[File:collatz1.png|600px]]

[[File:collatz2.png|600px]]

[[File:collatz3.png|600px]]

[[File:collatz4.png|600px]]

[[File:collatz5.png|600px]]

Number is bigger doesn't mean more iterations are required. One can notice, from the output of the following program. 



The program to implement the same is as follows:
==Program==
&lt;pre&gt;
#collatz conjecture
#if num is even, divide it by 2
#if num is odd, new number is equal to 3n+1


def checkNum(num):
    iterations=1
    while(num!=1):
        if(num%2==0):
            num=int(num/2)            
        else:
            num = 3*num+1
        iterations+=1
        

    print(num,iterations)


#checkNum(12)#Output: 1 10
#checkNum(26)#Output: 1 11
checkNum(2000)#Output: 1 113
&lt;/pre&gt;

&lt;pre&gt;

#recursive approach

def checkNum(num):
    if num==1:
        return 1
    elif num%2==0:
        return checkNum(num/2)+1
    else:
        return checkNum(3*num +1)+1


output:
checkNum(26)
Out[27]: 11
checkNum(5000)
Out[28]: 29
&lt;/pre&gt;

==Program adding statement to print all iterations==
&lt;pre&gt;
def checkNum(num):
    iterations=1
    while(num!=1):
        if(num%2==0):
            num=int(num/2)            
        else:
            num = 3*num+1
        print(iterations,&quot;:&quot;,num)
        iterations+=1
        

    print(num,iterations)
&lt;/pre&gt;
==Output==
===For checkNum(2000)===
&lt;pre&gt;
1 : 1000
2 : 500
3 : 250
4 : 125
5 : 376
6 : 188
7 : 94
8 : 47
9 : 142
10 : 71
11 : 214
12 : 107
13 : 322
14 : 161
15 : 484
16 : 242
17 : 121
18 : 364
19 : 182
20 : 91
21 : 274
22 : 137
23 : 412
24 : 206
25 : 103
26 : 310
27 : 155
28 : 466
29 : 233
30 : 700
31 : 350
32 : 175
33 : 526
34 : 263
35 : 790
36 : 395
37 : 1186
38 : 593
39 : 1780
40 : 890
41 : 445
42 : 1336
43 : 668
44 : 334
45 : 167
46 : 502
47 : 251
48 : 754
49 : 377
50 : 1132
51 : 566
52 : 283
53 : 850
54 : 425
55 : 1276
56 : 638
57 : 319
58 : 958
59 : 479
60 : 1438
61 : 719
62 : 2158
63 : 1079
64 : 3238
65 : 1619
66 : 4858
67 : 2429
68 : 7288
69 : 3644
70 : 1822
71 : 911
72 : 2734
73 : 1367
74 : 4102
75 : 2051
76 : 6154
77 : 3077
78 : 9232
79 : 4616
80 : 2308
81 : 1154
82 : 577
83 : 1732
84 : 866
85 : 433
86 : 1300
87 : 650
88 : 325
89 : 976
90 : 488
91 : 244
92 : 122
93 : 61
94 : 184
95 : 92
96 : 46
97 : 23
98 : 70
99 : 35
100 : 106
101 : 53
102 : 160
103 : 80
104 : 40
105 : 20
106 : 10
107 : 5
108 : 16
109 : 8
110 : 4
111 : 2
112 : 1
1 113
&lt;/pre&gt;

===For checkNum(5000)===
&lt;pre&gt;
1 : 2500
2 : 1250
3 : 625
4 : 1876
5 : 938
6 : 469
7 : 1408
8 : 704
9 : 352
10 : 176
11 : 88
12 : 44
13 : 22
14 : 11
15 : 34
16 : 17
17 : 52
18 : 26
19 : 13
20 : 40
21 : 20
22 : 10
23 : 5
24 : 16
25 : 8
26 : 4
27 : 2
28 : 1
1 29
&lt;/pre&gt;
===For checkNum(25000000)===
&lt;pre&gt;
1 : 12500000
2 : 6250000
3 : 3125000
4 : 1562500
5 : 781250
6 : 390625
7 : 1171876
8 : 585938
9 : 292969
10 : 878908
11 : 439454
12 : 219727
13 : 659182
14 : 329591
15 : 988774
16 : 494387
17 : 1483162
18 : 741581
19 : 2224744
20 : 1112372
21 : 556186
22 : 278093
23 : 834280
24 : 417140
25 : 208570
26 : 104285
27 : 312856
28 : 156428
29 : 78214
30 : 39107
31 : 117322
32 : 58661
33 : 175984
34 : 87992
35 : 43996
36 : 21998
37 : 10999
38 : 32998
39 : 16499
40 : 49498
41 : 24749
42 : 74248
43 : 37124
44 : 18562
45 : 9281
46 : 27844
47 : 13922
48 : 6961
49 : 20884
50 : 10442
51 : 5221
52 : 15664
53 : 7832
54 : 3916
55 : 1958
56 : 979
57 : 2938
58 : 1469
59 : 4408
60 : 2204
61 : 1102
62 : 551
63 : 1654
64 : 827
65 : 2482
66 : 1241
67 : 3724
68 : 1862
69 : 931
70 : 2794
71 : 1397
72 : 4192
73 : 2096
74 : 1048
75 : 524
76 : 262
77 : 131
78 : 394
79 : 197
80 : 592
81 : 296
82 : 148
83 : 74
84 : 37
85 : 112
86 : 56
87 : 28
88 : 14
89 : 7
90 : 22
91 : 11
92 : 34
93 : 17
94 : 52
95 : 26
96 : 13
97 : 40
98 : 20
99 : 10
100 : 5
101 : 16
102 : 8
103 : 4
104 : 2
105 : 1
1 106
&lt;/pre&gt;

Happy Life ahead!!!

[[File:end1.png]]</text>
      <sha1>e6in3nre8vhq9igdpkb4pblo7lgreq2</sha1>
    </revision>
    <revision>
      <id>4435</id>
      <parentid>4434</parentid>
      <timestamp>2018-10-17T02:27:30Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* Page Rank Coding */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="11201">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_12 Contributors of this page]

=Page Rank - How does Google Work=
One web page is having link to other page, that is a page is referring to other page. Google uses ''Page Rank'' algorithm to choose which page should be displayed first.

If we have network, connections as below:
[[File:rank0.png]]

We want to pick a leader out of all these nodes. How to pick a leader?  Why to elect a leader? It is because we want to find the super power of available nodes.                     
[[File:rank1.png]]

For example, the application wherein, we want to find the most impressive person of the  few ones. How to decide it? As shown in below figure, each node will communicate with other, randomly, we implement the count for each node, how many times, the particular node is being visited.
[[File:rank2.png]]

[[#Top]]

As shown in following, figure, all nodes are visited and each node is marked with the 
number i.e.number of times the node is visited.
[[File:rank3.png]]

The node with the maximum count, becomes the winner. Here, node with 120 count in figure 
below, is the winner. i.e. The person with 120 count in the figure is the most impressive 
person in the community being considered.
[[File:rank4.png]]

[[File:rank5.png]]

[[File:rank6.png]]

[[File:rank7.png]]


[[File:rank8.png]]

[[#Top]]

Google selects the page rank in this matter. Each web page is connected to other web page with web links. To a page, maximum link is there, that will be put on top results in Google search results.
[[File:rank9.png]]

Google uses web crawler. The crawler takes the random walk on the www network and rank the web sites.
[[File:rank10.png]]

This way Google ranks the pages and displays search results, according to page rank.
[[File:rank11.png]]

e.g.we search for ''mysore city''. Google has 10,000 results. But it displays the results in the sequence of page rank of search results, As shown in figure below.
[[File:mysore.png]]

[[#Top]]

==Page rank algorithm ==
As shown in beautiful figure below, few nodes combinely selected one as the leader, then that leader and other nodes, have selected         other as a leader. This way, finally the final leader is elected.
[[File:rank12.png|600px]]


[[File:graph00.png|600px]]

[[File:graph01.png|600px]]

==Gragh Drawing Program1==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
nx.barbell_graph(4,2)
G=nx.barbell_graph(4,2)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:Graph003.png|600px]]

==Gragh Drawing Program2==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
nx.barbell_graph(4,3)
G=nx.barbell_graph(4,3)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:Graph004.png|600px]]

==Gragh Drawing Program3==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
nx.barbell_graph(5,3)
G=nx.barbell_graph(5,3)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:Graph005.png|600px]]

==Complete Graph==
Complete graph is a graph, wherein, each node is connected to each other nodes in a graph.

&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.complete_graph(4)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:

[[File:completegraph001.png|600px]]

==Cycle graph==

&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.cycle_graph(5)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:

[[File:cyclegraph1.png|600px]]

==Ladder graph==

&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.ladder_graph(5)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:

[[File:laddergraph.png|600px]]

==Path Graph==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.path_graph(6)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:

[[File:pathgraph.png|600px]]

==Star Graph==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.star_graph(5)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:stargraph.png|600px]]


==Star Graph of 4 Nodes==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.star_graph(4)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:stargraph4points.png|600px]]

==Wheel Graph==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.wheel_graph(4)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:wheelgraph.png|600px]]

==Wheel Graph of 5 nodes==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.wheel_graph(5)
nx.draw(G)
plt.show()

&lt;/pre&gt;

Output:

[[File:wheelgraph5nodes.png|600px]]

==Wheel Graph of 6 nodes==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.wheel_graph(6)
nx.draw(G)
plt.show()

&lt;/pre&gt;

Output:

[[File:wheelgraph6nodes.png|600px]]

==Random Graph==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.gnp_random_graph(5,0.5)
nx.draw(G)
plt.show()

&lt;/pre&gt;

Output:

[[File:randomgraph1.png|600px]]


Running the same above program, we will get different output, as shown below, as it is random graph.

[[File:randomgraph2.png|600px]]

==Page Rank Algorithm Implementation==

===Random Directed Graph===
&lt;pre&gt;
import networkx as nx
import random
import matplotlib.pyplot as plt

#Draw random directed graph
G=nx.gnp_random_graph(10,0.5,directed=True)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output: 

[[File:randomDirectedGraph.png|600px]]


===Random Directed Graph with Labels===
&lt;pre&gt;
import networkx as nx
import random
import matplotlib.pyplot as plt

#Draw random directed graph 
G=nx.gnp_random_graph(10,0.5,directed=True)
#Give label numbering to nodes
nx.draw(G,with_labels=True)
plt.show()

&lt;/pre&gt;

Output:

[[File:randomDirectedGraphwithLabels.png|600px]]

===Page Rank Coding===
&lt;pre&gt;
import networkx as nx
import random
import matplotlib.pyplot as plt
import operator

#Draw random directed graph 
G=nx.gnp_random_graph(10,0.5,directed=True)
#Give label numbering to nodes
nx.draw(G,with_labels=True)
plt.show()

#x is the random source node
x=random.choice([i for i in range(G.number_of_nodes())])

#dictionary to maintain counter
dictCounter={}
#initialize the counter of each node as 0
for i in range(G.number_of_nodes()):
    dictCounter[i]=0
dictCounter[x]=dictCounter[x]+1

for i in range(10000):
    listn=list(G.neighbors(x))
    #if x is a sink node, we need to select random node for random walk
    #, else select random neighbor node

    if(len(listn)==0):
        x=random.choice([i for i in range(G.number_of_nodes())])
        dictCounter[x]=dictCounter[x]+1
    else:
        #choose a node randomly from neightbors
        x=random.choice(listn)
        dictCounter[x]=dictCounter[x]+1

p=nx.pagerank(G)
sorted_p=sorted(p.items(),key=operator.itemgetter(1))
sorted_rw=sorted(dictCounter.items(),key=operator.itemgetter(1))                        
#print(p)
#print(dictCounter)

print(sorted_p)
print(sorted_rw)

&lt;/pre&gt;

Output:

&lt;pre&gt;
[(2, 0.07139920240302768), (5, 0.07464882519777695), (3, 0.08527469366832419), 
(6, 0.08665188647066119), (4, 0.0987815549542114), (0, 0.10858415997562518), 
(9, 0.110369696943925), (8, 0.11456211367660116), (1, 0.11682018308814024), 
(7, 0.13290768362170685)]
[(2, 4), (5, 7), (8, 7), (6, 8), (3, 11), (7, 11), (1, 12), (4, 12), (0, 13), (9, 16)]
&lt;/pre&gt;

=Email communication Network=

=Collatz Conjecture=
Taught by Sudarshan sir and Amit sir, and Edited by Ms. Ami Tusharkant Choksi

If a number is even, divide it by ''2'', if it is odd, make multiply it by ''3'' and add ''1'', till you get ''1''. This simple problem is called, ''Collatz Conjecture''. 

[[File:collatz1.png|600px]]

[[File:collatz2.png|600px]]

[[File:collatz3.png|600px]]

[[File:collatz4.png|600px]]

[[File:collatz5.png|600px]]

Number is bigger doesn't mean more iterations are required. One can notice, from the output of the following program. 



The program to implement the same is as follows:
==Program==
&lt;pre&gt;
#collatz conjecture
#if num is even, divide it by 2
#if num is odd, new number is equal to 3n+1


def checkNum(num):
    iterations=1
    while(num!=1):
        if(num%2==0):
            num=int(num/2)            
        else:
            num = 3*num+1
        iterations+=1
        

    print(num,iterations)


#checkNum(12)#Output: 1 10
#checkNum(26)#Output: 1 11
checkNum(2000)#Output: 1 113
&lt;/pre&gt;

&lt;pre&gt;

#recursive approach

def checkNum(num):
    if num==1:
        return 1
    elif num%2==0:
        return checkNum(num/2)+1
    else:
        return checkNum(3*num +1)+1


output:
checkNum(26)
Out[27]: 11
checkNum(5000)
Out[28]: 29
&lt;/pre&gt;

==Program adding statement to print all iterations==
&lt;pre&gt;
def checkNum(num):
    iterations=1
    while(num!=1):
        if(num%2==0):
            num=int(num/2)            
        else:
            num = 3*num+1
        print(iterations,&quot;:&quot;,num)
        iterations+=1
        

    print(num,iterations)
&lt;/pre&gt;
==Output==
===For checkNum(2000)===
&lt;pre&gt;
1 : 1000
2 : 500
3 : 250
4 : 125
5 : 376
6 : 188
7 : 94
8 : 47
9 : 142
10 : 71
11 : 214
12 : 107
13 : 322
14 : 161
15 : 484
16 : 242
17 : 121
18 : 364
19 : 182
20 : 91
21 : 274
22 : 137
23 : 412
24 : 206
25 : 103
26 : 310
27 : 155
28 : 466
29 : 233
30 : 700
31 : 350
32 : 175
33 : 526
34 : 263
35 : 790
36 : 395
37 : 1186
38 : 593
39 : 1780
40 : 890
41 : 445
42 : 1336
43 : 668
44 : 334
45 : 167
46 : 502
47 : 251
48 : 754
49 : 377
50 : 1132
51 : 566
52 : 283
53 : 850
54 : 425
55 : 1276
56 : 638
57 : 319
58 : 958
59 : 479
60 : 1438
61 : 719
62 : 2158
63 : 1079
64 : 3238
65 : 1619
66 : 4858
67 : 2429
68 : 7288
69 : 3644
70 : 1822
71 : 911
72 : 2734
73 : 1367
74 : 4102
75 : 2051
76 : 6154
77 : 3077
78 : 9232
79 : 4616
80 : 2308
81 : 1154
82 : 577
83 : 1732
84 : 866
85 : 433
86 : 1300
87 : 650
88 : 325
89 : 976
90 : 488
91 : 244
92 : 122
93 : 61
94 : 184
95 : 92
96 : 46
97 : 23
98 : 70
99 : 35
100 : 106
101 : 53
102 : 160
103 : 80
104 : 40
105 : 20
106 : 10
107 : 5
108 : 16
109 : 8
110 : 4
111 : 2
112 : 1
1 113
&lt;/pre&gt;

===For checkNum(5000)===
&lt;pre&gt;
1 : 2500
2 : 1250
3 : 625
4 : 1876
5 : 938
6 : 469
7 : 1408
8 : 704
9 : 352
10 : 176
11 : 88
12 : 44
13 : 22
14 : 11
15 : 34
16 : 17
17 : 52
18 : 26
19 : 13
20 : 40
21 : 20
22 : 10
23 : 5
24 : 16
25 : 8
26 : 4
27 : 2
28 : 1
1 29
&lt;/pre&gt;
===For checkNum(25000000)===
&lt;pre&gt;
1 : 12500000
2 : 6250000
3 : 3125000
4 : 1562500
5 : 781250
6 : 390625
7 : 1171876
8 : 585938
9 : 292969
10 : 878908
11 : 439454
12 : 219727
13 : 659182
14 : 329591
15 : 988774
16 : 494387
17 : 1483162
18 : 741581
19 : 2224744
20 : 1112372
21 : 556186
22 : 278093
23 : 834280
24 : 417140
25 : 208570
26 : 104285
27 : 312856
28 : 156428
29 : 78214
30 : 39107
31 : 117322
32 : 58661
33 : 175984
34 : 87992
35 : 43996
36 : 21998
37 : 10999
38 : 32998
39 : 16499
40 : 49498
41 : 24749
42 : 74248
43 : 37124
44 : 18562
45 : 9281
46 : 27844
47 : 13922
48 : 6961
49 : 20884
50 : 10442
51 : 5221
52 : 15664
53 : 7832
54 : 3916
55 : 1958
56 : 979
57 : 2938
58 : 1469
59 : 4408
60 : 2204
61 : 1102
62 : 551
63 : 1654
64 : 827
65 : 2482
66 : 1241
67 : 3724
68 : 1862
69 : 931
70 : 2794
71 : 1397
72 : 4192
73 : 2096
74 : 1048
75 : 524
76 : 262
77 : 131
78 : 394
79 : 197
80 : 592
81 : 296
82 : 148
83 : 74
84 : 37
85 : 112
86 : 56
87 : 28
88 : 14
89 : 7
90 : 22
91 : 11
92 : 34
93 : 17
94 : 52
95 : 26
96 : 13
97 : 40
98 : 20
99 : 10
100 : 5
101 : 16
102 : 8
103 : 4
104 : 2
105 : 1
1 106
&lt;/pre&gt;

Happy Life ahead!!!

[[File:end1.png]]</text>
      <sha1>h4qygv6td9sl8hxzokfrpvh6bpmr66m</sha1>
    </revision>
    <revision>
      <id>4437</id>
      <parentid>4435</parentid>
      <timestamp>2018-10-17T05:09:12Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* Page Rank Coding */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="11211">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_12 Contributors of this page]

=Page Rank - How does Google Work=
One web page is having link to other page, that is a page is referring to other page. Google uses ''Page Rank'' algorithm to choose which page should be displayed first.

If we have network, connections as below:
[[File:rank0.png]]

We want to pick a leader out of all these nodes. How to pick a leader?  Why to elect a leader? It is because we want to find the super power of available nodes.                     
[[File:rank1.png]]

For example, the application wherein, we want to find the most impressive person of the  few ones. How to decide it? As shown in below figure, each node will communicate with other, randomly, we implement the count for each node, how many times, the particular node is being visited.
[[File:rank2.png]]

[[#Top]]

As shown in following, figure, all nodes are visited and each node is marked with the 
number i.e.number of times the node is visited.
[[File:rank3.png]]

The node with the maximum count, becomes the winner. Here, node with 120 count in figure 
below, is the winner. i.e. The person with 120 count in the figure is the most impressive 
person in the community being considered.
[[File:rank4.png]]

[[File:rank5.png]]

[[File:rank6.png]]

[[File:rank7.png]]


[[File:rank8.png]]

[[#Top]]

Google selects the page rank in this matter. Each web page is connected to other web page with web links. To a page, maximum link is there, that will be put on top results in Google search results.
[[File:rank9.png]]

Google uses web crawler. The crawler takes the random walk on the www network and rank the web sites.
[[File:rank10.png]]

This way Google ranks the pages and displays search results, according to page rank.
[[File:rank11.png]]

e.g.we search for ''mysore city''. Google has 10,000 results. But it displays the results in the sequence of page rank of search results, As shown in figure below.
[[File:mysore.png]]

[[#Top]]

==Page rank algorithm ==
As shown in beautiful figure below, few nodes combinely selected one as the leader, then that leader and other nodes, have selected         other as a leader. This way, finally the final leader is elected.
[[File:rank12.png|600px]]


[[File:graph00.png|600px]]

[[File:graph01.png|600px]]

==Gragh Drawing Program1==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
nx.barbell_graph(4,2)
G=nx.barbell_graph(4,2)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:Graph003.png|600px]]

==Gragh Drawing Program2==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
nx.barbell_graph(4,3)
G=nx.barbell_graph(4,3)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:Graph004.png|600px]]

==Gragh Drawing Program3==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
nx.barbell_graph(5,3)
G=nx.barbell_graph(5,3)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:Graph005.png|600px]]

==Complete Graph==
Complete graph is a graph, wherein, each node is connected to each other nodes in a graph.

&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.complete_graph(4)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:

[[File:completegraph001.png|600px]]

==Cycle graph==

&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.cycle_graph(5)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:

[[File:cyclegraph1.png|600px]]

==Ladder graph==

&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.ladder_graph(5)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:

[[File:laddergraph.png|600px]]

==Path Graph==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.path_graph(6)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:

[[File:pathgraph.png|600px]]

==Star Graph==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.star_graph(5)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:stargraph.png|600px]]


==Star Graph of 4 Nodes==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.star_graph(4)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:stargraph4points.png|600px]]

==Wheel Graph==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.wheel_graph(4)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:wheelgraph.png|600px]]

==Wheel Graph of 5 nodes==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.wheel_graph(5)
nx.draw(G)
plt.show()

&lt;/pre&gt;

Output:

[[File:wheelgraph5nodes.png|600px]]

==Wheel Graph of 6 nodes==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.wheel_graph(6)
nx.draw(G)
plt.show()

&lt;/pre&gt;

Output:

[[File:wheelgraph6nodes.png|600px]]

==Random Graph==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.gnp_random_graph(5,0.5)
nx.draw(G)
plt.show()

&lt;/pre&gt;

Output:

[[File:randomgraph1.png|600px]]


Running the same above program, we will get different output, as shown below, as it is random graph.

[[File:randomgraph2.png|600px]]

==Page Rank Algorithm Implementation==

===Random Directed Graph===
&lt;pre&gt;
import networkx as nx
import random
import matplotlib.pyplot as plt

#Draw random directed graph
G=nx.gnp_random_graph(10,0.5,directed=True)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output: 

[[File:randomDirectedGraph.png|600px]]


===Random Directed Graph with Labels===
&lt;pre&gt;
import networkx as nx
import random
import matplotlib.pyplot as plt

#Draw random directed graph 
G=nx.gnp_random_graph(10,0.5,directed=True)
#Give label numbering to nodes
nx.draw(G,with_labels=True)
plt.show()

&lt;/pre&gt;

Output:

[[File:randomDirectedGraphwithLabels.png|600px]]

===Page Rank Coding===
&lt;pre&gt;
import networkx as nx
import random
import matplotlib.pyplot as plt
import operator

#Draw random directed graph 
G=nx.gnp_random_graph(10,0.5,directed=True)
#Give label numbering to nodes
nx.draw(G,with_labels=True)
plt.show()

#x is the random source node
x=random.choice([i for i in range(G.number_of_nodes())])

#dictionary to maintain counter
dictCounter={}
#initialize the counter of each node as 0
for i in range(G.number_of_nodes()):
    dictCounter[i]=0
dictCounter[x]=dictCounter[x]+1

for i in range(10000):
    listn=list(G.neighbors(x))
    #if x is a sink node, we need to select random node for random walk
    #, else select random neighbor node

    if(len(listn)==0):
        x=random.choice([i for i in range(G.number_of_nodes())])
        dictCounter[x]=dictCounter[x]+1
    else:
        #choose a node randomly from neightbors
        x=random.choice(listn)
        dictCounter[x]=dictCounter[x]+1

p=nx.pagerank(G)
sorted_p=sorted(p.items(),key=operator.itemgetter(1))
sorted_rw=sorted(dictCounter.items(),key=operator.itemgetter(1))                        
#print(p)
#print(dictCounter)

print(sorted_p)
print(sorted_rw)

&lt;/pre&gt;

Output:

&lt;pre&gt;
[(2, 0.07139920240302768), (5, 0.07464882519777695), (3, 0.08527469366832419), 
(6, 0.08665188647066119), (4, 0.0987815549542114), (0, 0.10858415997562518), 
(9, 0.110369696943925), (8, 0.11456211367660116), (1, 0.11682018308814024), 
(7, 0.13290768362170685)]
[(2, 4), (5, 7), (8, 7), (6, 8), (3, 11), (7, 11), (1, 12), (4, 12), (0, 13), (9, 16)]
&lt;/pre&gt;

[[#Top]]

=Email communication Network=

=Collatz Conjecture=
Taught by Sudarshan sir and Amit sir, and Edited by Ms. Ami Tusharkant Choksi

If a number is even, divide it by ''2'', if it is odd, make multiply it by ''3'' and add ''1'', till you get ''1''. This simple problem is called, ''Collatz Conjecture''. 

[[File:collatz1.png|600px]]

[[File:collatz2.png|600px]]

[[File:collatz3.png|600px]]

[[File:collatz4.png|600px]]

[[File:collatz5.png|600px]]

Number is bigger doesn't mean more iterations are required. One can notice, from the output of the following program. 



The program to implement the same is as follows:
==Program==
&lt;pre&gt;
#collatz conjecture
#if num is even, divide it by 2
#if num is odd, new number is equal to 3n+1


def checkNum(num):
    iterations=1
    while(num!=1):
        if(num%2==0):
            num=int(num/2)            
        else:
            num = 3*num+1
        iterations+=1
        

    print(num,iterations)


#checkNum(12)#Output: 1 10
#checkNum(26)#Output: 1 11
checkNum(2000)#Output: 1 113
&lt;/pre&gt;

&lt;pre&gt;

#recursive approach

def checkNum(num):
    if num==1:
        return 1
    elif num%2==0:
        return checkNum(num/2)+1
    else:
        return checkNum(3*num +1)+1


output:
checkNum(26)
Out[27]: 11
checkNum(5000)
Out[28]: 29
&lt;/pre&gt;

==Program adding statement to print all iterations==
&lt;pre&gt;
def checkNum(num):
    iterations=1
    while(num!=1):
        if(num%2==0):
            num=int(num/2)            
        else:
            num = 3*num+1
        print(iterations,&quot;:&quot;,num)
        iterations+=1
        

    print(num,iterations)
&lt;/pre&gt;
==Output==
===For checkNum(2000)===
&lt;pre&gt;
1 : 1000
2 : 500
3 : 250
4 : 125
5 : 376
6 : 188
7 : 94
8 : 47
9 : 142
10 : 71
11 : 214
12 : 107
13 : 322
14 : 161
15 : 484
16 : 242
17 : 121
18 : 364
19 : 182
20 : 91
21 : 274
22 : 137
23 : 412
24 : 206
25 : 103
26 : 310
27 : 155
28 : 466
29 : 233
30 : 700
31 : 350
32 : 175
33 : 526
34 : 263
35 : 790
36 : 395
37 : 1186
38 : 593
39 : 1780
40 : 890
41 : 445
42 : 1336
43 : 668
44 : 334
45 : 167
46 : 502
47 : 251
48 : 754
49 : 377
50 : 1132
51 : 566
52 : 283
53 : 850
54 : 425
55 : 1276
56 : 638
57 : 319
58 : 958
59 : 479
60 : 1438
61 : 719
62 : 2158
63 : 1079
64 : 3238
65 : 1619
66 : 4858
67 : 2429
68 : 7288
69 : 3644
70 : 1822
71 : 911
72 : 2734
73 : 1367
74 : 4102
75 : 2051
76 : 6154
77 : 3077
78 : 9232
79 : 4616
80 : 2308
81 : 1154
82 : 577
83 : 1732
84 : 866
85 : 433
86 : 1300
87 : 650
88 : 325
89 : 976
90 : 488
91 : 244
92 : 122
93 : 61
94 : 184
95 : 92
96 : 46
97 : 23
98 : 70
99 : 35
100 : 106
101 : 53
102 : 160
103 : 80
104 : 40
105 : 20
106 : 10
107 : 5
108 : 16
109 : 8
110 : 4
111 : 2
112 : 1
1 113
&lt;/pre&gt;

===For checkNum(5000)===
&lt;pre&gt;
1 : 2500
2 : 1250
3 : 625
4 : 1876
5 : 938
6 : 469
7 : 1408
8 : 704
9 : 352
10 : 176
11 : 88
12 : 44
13 : 22
14 : 11
15 : 34
16 : 17
17 : 52
18 : 26
19 : 13
20 : 40
21 : 20
22 : 10
23 : 5
24 : 16
25 : 8
26 : 4
27 : 2
28 : 1
1 29
&lt;/pre&gt;
===For checkNum(25000000)===
&lt;pre&gt;
1 : 12500000
2 : 6250000
3 : 3125000
4 : 1562500
5 : 781250
6 : 390625
7 : 1171876
8 : 585938
9 : 292969
10 : 878908
11 : 439454
12 : 219727
13 : 659182
14 : 329591
15 : 988774
16 : 494387
17 : 1483162
18 : 741581
19 : 2224744
20 : 1112372
21 : 556186
22 : 278093
23 : 834280
24 : 417140
25 : 208570
26 : 104285
27 : 312856
28 : 156428
29 : 78214
30 : 39107
31 : 117322
32 : 58661
33 : 175984
34 : 87992
35 : 43996
36 : 21998
37 : 10999
38 : 32998
39 : 16499
40 : 49498
41 : 24749
42 : 74248
43 : 37124
44 : 18562
45 : 9281
46 : 27844
47 : 13922
48 : 6961
49 : 20884
50 : 10442
51 : 5221
52 : 15664
53 : 7832
54 : 3916
55 : 1958
56 : 979
57 : 2938
58 : 1469
59 : 4408
60 : 2204
61 : 1102
62 : 551
63 : 1654
64 : 827
65 : 2482
66 : 1241
67 : 3724
68 : 1862
69 : 931
70 : 2794
71 : 1397
72 : 4192
73 : 2096
74 : 1048
75 : 524
76 : 262
77 : 131
78 : 394
79 : 197
80 : 592
81 : 296
82 : 148
83 : 74
84 : 37
85 : 112
86 : 56
87 : 28
88 : 14
89 : 7
90 : 22
91 : 11
92 : 34
93 : 17
94 : 52
95 : 26
96 : 13
97 : 40
98 : 20
99 : 10
100 : 5
101 : 16
102 : 8
103 : 4
104 : 2
105 : 1
1 106
&lt;/pre&gt;

Happy Life ahead!!!

[[File:end1.png]]</text>
      <sha1>tv29ydu8i1dycr15vwf4ditzruud0n1</sha1>
    </revision>
    <revision>
      <id>4438</id>
      <parentid>4437</parentid>
      <timestamp>2018-10-17T05:09:47Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* Random Directed Graph with Labels */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="11222">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_12 Contributors of this page]

=Page Rank - How does Google Work=
One web page is having link to other page, that is a page is referring to other page. Google uses ''Page Rank'' algorithm to choose which page should be displayed first.

If we have network, connections as below:
[[File:rank0.png]]

We want to pick a leader out of all these nodes. How to pick a leader?  Why to elect a leader? It is because we want to find the super power of available nodes.                     
[[File:rank1.png]]

For example, the application wherein, we want to find the most impressive person of the  few ones. How to decide it? As shown in below figure, each node will communicate with other, randomly, we implement the count for each node, how many times, the particular node is being visited.
[[File:rank2.png]]

[[#Top]]

As shown in following, figure, all nodes are visited and each node is marked with the 
number i.e.number of times the node is visited.
[[File:rank3.png]]

The node with the maximum count, becomes the winner. Here, node with 120 count in figure 
below, is the winner. i.e. The person with 120 count in the figure is the most impressive 
person in the community being considered.
[[File:rank4.png]]

[[File:rank5.png]]

[[File:rank6.png]]

[[File:rank7.png]]


[[File:rank8.png]]

[[#Top]]

Google selects the page rank in this matter. Each web page is connected to other web page with web links. To a page, maximum link is there, that will be put on top results in Google search results.
[[File:rank9.png]]

Google uses web crawler. The crawler takes the random walk on the www network and rank the web sites.
[[File:rank10.png]]

This way Google ranks the pages and displays search results, according to page rank.
[[File:rank11.png]]

e.g.we search for ''mysore city''. Google has 10,000 results. But it displays the results in the sequence of page rank of search results, As shown in figure below.
[[File:mysore.png]]

[[#Top]]

==Page rank algorithm ==
As shown in beautiful figure below, few nodes combinely selected one as the leader, then that leader and other nodes, have selected         other as a leader. This way, finally the final leader is elected.
[[File:rank12.png|600px]]


[[File:graph00.png|600px]]

[[File:graph01.png|600px]]

==Gragh Drawing Program1==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
nx.barbell_graph(4,2)
G=nx.barbell_graph(4,2)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:Graph003.png|600px]]

==Gragh Drawing Program2==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
nx.barbell_graph(4,3)
G=nx.barbell_graph(4,3)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:Graph004.png|600px]]

==Gragh Drawing Program3==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
nx.barbell_graph(5,3)
G=nx.barbell_graph(5,3)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:Graph005.png|600px]]

==Complete Graph==
Complete graph is a graph, wherein, each node is connected to each other nodes in a graph.

&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.complete_graph(4)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:

[[File:completegraph001.png|600px]]

==Cycle graph==

&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.cycle_graph(5)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:

[[File:cyclegraph1.png|600px]]

==Ladder graph==

&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.ladder_graph(5)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:

[[File:laddergraph.png|600px]]

==Path Graph==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.path_graph(6)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:

[[File:pathgraph.png|600px]]

==Star Graph==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.star_graph(5)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:stargraph.png|600px]]


==Star Graph of 4 Nodes==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.star_graph(4)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:stargraph4points.png|600px]]

==Wheel Graph==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.wheel_graph(4)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:wheelgraph.png|600px]]

==Wheel Graph of 5 nodes==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.wheel_graph(5)
nx.draw(G)
plt.show()

&lt;/pre&gt;

Output:

[[File:wheelgraph5nodes.png|600px]]

==Wheel Graph of 6 nodes==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.wheel_graph(6)
nx.draw(G)
plt.show()

&lt;/pre&gt;

Output:

[[File:wheelgraph6nodes.png|600px]]

==Random Graph==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.gnp_random_graph(5,0.5)
nx.draw(G)
plt.show()

&lt;/pre&gt;

Output:

[[File:randomgraph1.png|600px]]


Running the same above program, we will get different output, as shown below, as it is random graph.

[[File:randomgraph2.png|600px]]

==Page Rank Algorithm Implementation==

===Random Directed Graph===
&lt;pre&gt;
import networkx as nx
import random
import matplotlib.pyplot as plt

#Draw random directed graph
G=nx.gnp_random_graph(10,0.5,directed=True)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output: 

[[File:randomDirectedGraph.png|600px]]


===Random Directed Graph with Labels===
&lt;pre&gt;
import networkx as nx
import random
import matplotlib.pyplot as plt

#Draw random directed graph 
G=nx.gnp_random_graph(10,0.5,directed=True)
#Give label numbering to nodes
nx.draw(G,with_labels=True)
plt.show()

&lt;/pre&gt;

Output:

[[File:randomDirectedGraphwithLabels.png|600px]]


[[#Top]]

===Page Rank Coding===
&lt;pre&gt;
import networkx as nx
import random
import matplotlib.pyplot as plt
import operator

#Draw random directed graph 
G=nx.gnp_random_graph(10,0.5,directed=True)
#Give label numbering to nodes
nx.draw(G,with_labels=True)
plt.show()

#x is the random source node
x=random.choice([i for i in range(G.number_of_nodes())])

#dictionary to maintain counter
dictCounter={}
#initialize the counter of each node as 0
for i in range(G.number_of_nodes()):
    dictCounter[i]=0
dictCounter[x]=dictCounter[x]+1

for i in range(10000):
    listn=list(G.neighbors(x))
    #if x is a sink node, we need to select random node for random walk
    #, else select random neighbor node

    if(len(listn)==0):
        x=random.choice([i for i in range(G.number_of_nodes())])
        dictCounter[x]=dictCounter[x]+1
    else:
        #choose a node randomly from neightbors
        x=random.choice(listn)
        dictCounter[x]=dictCounter[x]+1

p=nx.pagerank(G)
sorted_p=sorted(p.items(),key=operator.itemgetter(1))
sorted_rw=sorted(dictCounter.items(),key=operator.itemgetter(1))                        
#print(p)
#print(dictCounter)

print(sorted_p)
print(sorted_rw)

&lt;/pre&gt;

Output:

&lt;pre&gt;
[(2, 0.07139920240302768), (5, 0.07464882519777695), (3, 0.08527469366832419), 
(6, 0.08665188647066119), (4, 0.0987815549542114), (0, 0.10858415997562518), 
(9, 0.110369696943925), (8, 0.11456211367660116), (1, 0.11682018308814024), 
(7, 0.13290768362170685)]
[(2, 4), (5, 7), (8, 7), (6, 8), (3, 11), (7, 11), (1, 12), (4, 12), (0, 13), (9, 16)]
&lt;/pre&gt;

[[#Top]]

=Email communication Network=

=Collatz Conjecture=
Taught by Sudarshan sir and Amit sir, and Edited by Ms. Ami Tusharkant Choksi

If a number is even, divide it by ''2'', if it is odd, make multiply it by ''3'' and add ''1'', till you get ''1''. This simple problem is called, ''Collatz Conjecture''. 

[[File:collatz1.png|600px]]

[[File:collatz2.png|600px]]

[[File:collatz3.png|600px]]

[[File:collatz4.png|600px]]

[[File:collatz5.png|600px]]

Number is bigger doesn't mean more iterations are required. One can notice, from the output of the following program. 



The program to implement the same is as follows:
==Program==
&lt;pre&gt;
#collatz conjecture
#if num is even, divide it by 2
#if num is odd, new number is equal to 3n+1


def checkNum(num):
    iterations=1
    while(num!=1):
        if(num%2==0):
            num=int(num/2)            
        else:
            num = 3*num+1
        iterations+=1
        

    print(num,iterations)


#checkNum(12)#Output: 1 10
#checkNum(26)#Output: 1 11
checkNum(2000)#Output: 1 113
&lt;/pre&gt;

&lt;pre&gt;

#recursive approach

def checkNum(num):
    if num==1:
        return 1
    elif num%2==0:
        return checkNum(num/2)+1
    else:
        return checkNum(3*num +1)+1


output:
checkNum(26)
Out[27]: 11
checkNum(5000)
Out[28]: 29
&lt;/pre&gt;

==Program adding statement to print all iterations==
&lt;pre&gt;
def checkNum(num):
    iterations=1
    while(num!=1):
        if(num%2==0):
            num=int(num/2)            
        else:
            num = 3*num+1
        print(iterations,&quot;:&quot;,num)
        iterations+=1
        

    print(num,iterations)
&lt;/pre&gt;
==Output==
===For checkNum(2000)===
&lt;pre&gt;
1 : 1000
2 : 500
3 : 250
4 : 125
5 : 376
6 : 188
7 : 94
8 : 47
9 : 142
10 : 71
11 : 214
12 : 107
13 : 322
14 : 161
15 : 484
16 : 242
17 : 121
18 : 364
19 : 182
20 : 91
21 : 274
22 : 137
23 : 412
24 : 206
25 : 103
26 : 310
27 : 155
28 : 466
29 : 233
30 : 700
31 : 350
32 : 175
33 : 526
34 : 263
35 : 790
36 : 395
37 : 1186
38 : 593
39 : 1780
40 : 890
41 : 445
42 : 1336
43 : 668
44 : 334
45 : 167
46 : 502
47 : 251
48 : 754
49 : 377
50 : 1132
51 : 566
52 : 283
53 : 850
54 : 425
55 : 1276
56 : 638
57 : 319
58 : 958
59 : 479
60 : 1438
61 : 719
62 : 2158
63 : 1079
64 : 3238
65 : 1619
66 : 4858
67 : 2429
68 : 7288
69 : 3644
70 : 1822
71 : 911
72 : 2734
73 : 1367
74 : 4102
75 : 2051
76 : 6154
77 : 3077
78 : 9232
79 : 4616
80 : 2308
81 : 1154
82 : 577
83 : 1732
84 : 866
85 : 433
86 : 1300
87 : 650
88 : 325
89 : 976
90 : 488
91 : 244
92 : 122
93 : 61
94 : 184
95 : 92
96 : 46
97 : 23
98 : 70
99 : 35
100 : 106
101 : 53
102 : 160
103 : 80
104 : 40
105 : 20
106 : 10
107 : 5
108 : 16
109 : 8
110 : 4
111 : 2
112 : 1
1 113
&lt;/pre&gt;

===For checkNum(5000)===
&lt;pre&gt;
1 : 2500
2 : 1250
3 : 625
4 : 1876
5 : 938
6 : 469
7 : 1408
8 : 704
9 : 352
10 : 176
11 : 88
12 : 44
13 : 22
14 : 11
15 : 34
16 : 17
17 : 52
18 : 26
19 : 13
20 : 40
21 : 20
22 : 10
23 : 5
24 : 16
25 : 8
26 : 4
27 : 2
28 : 1
1 29
&lt;/pre&gt;
===For checkNum(25000000)===
&lt;pre&gt;
1 : 12500000
2 : 6250000
3 : 3125000
4 : 1562500
5 : 781250
6 : 390625
7 : 1171876
8 : 585938
9 : 292969
10 : 878908
11 : 439454
12 : 219727
13 : 659182
14 : 329591
15 : 988774
16 : 494387
17 : 1483162
18 : 741581
19 : 2224744
20 : 1112372
21 : 556186
22 : 278093
23 : 834280
24 : 417140
25 : 208570
26 : 104285
27 : 312856
28 : 156428
29 : 78214
30 : 39107
31 : 117322
32 : 58661
33 : 175984
34 : 87992
35 : 43996
36 : 21998
37 : 10999
38 : 32998
39 : 16499
40 : 49498
41 : 24749
42 : 74248
43 : 37124
44 : 18562
45 : 9281
46 : 27844
47 : 13922
48 : 6961
49 : 20884
50 : 10442
51 : 5221
52 : 15664
53 : 7832
54 : 3916
55 : 1958
56 : 979
57 : 2938
58 : 1469
59 : 4408
60 : 2204
61 : 1102
62 : 551
63 : 1654
64 : 827
65 : 2482
66 : 1241
67 : 3724
68 : 1862
69 : 931
70 : 2794
71 : 1397
72 : 4192
73 : 2096
74 : 1048
75 : 524
76 : 262
77 : 131
78 : 394
79 : 197
80 : 592
81 : 296
82 : 148
83 : 74
84 : 37
85 : 112
86 : 56
87 : 28
88 : 14
89 : 7
90 : 22
91 : 11
92 : 34
93 : 17
94 : 52
95 : 26
96 : 13
97 : 40
98 : 20
99 : 10
100 : 5
101 : 16
102 : 8
103 : 4
104 : 2
105 : 1
1 106
&lt;/pre&gt;

Happy Life ahead!!!

[[File:end1.png]]</text>
      <sha1>b23ad9nj3zmbrwijzm176bfgvvu7nr1</sha1>
    </revision>
    <revision>
      <id>4439</id>
      <parentid>4438</parentid>
      <timestamp>2018-10-17T05:10:17Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* Random Graph */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="11232">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_12 Contributors of this page]

=Page Rank - How does Google Work=
One web page is having link to other page, that is a page is referring to other page. Google uses ''Page Rank'' algorithm to choose which page should be displayed first.

If we have network, connections as below:
[[File:rank0.png]]

We want to pick a leader out of all these nodes. How to pick a leader?  Why to elect a leader? It is because we want to find the super power of available nodes.                     
[[File:rank1.png]]

For example, the application wherein, we want to find the most impressive person of the  few ones. How to decide it? As shown in below figure, each node will communicate with other, randomly, we implement the count for each node, how many times, the particular node is being visited.
[[File:rank2.png]]

[[#Top]]

As shown in following, figure, all nodes are visited and each node is marked with the 
number i.e.number of times the node is visited.
[[File:rank3.png]]

The node with the maximum count, becomes the winner. Here, node with 120 count in figure 
below, is the winner. i.e. The person with 120 count in the figure is the most impressive 
person in the community being considered.
[[File:rank4.png]]

[[File:rank5.png]]

[[File:rank6.png]]

[[File:rank7.png]]


[[File:rank8.png]]

[[#Top]]

Google selects the page rank in this matter. Each web page is connected to other web page with web links. To a page, maximum link is there, that will be put on top results in Google search results.
[[File:rank9.png]]

Google uses web crawler. The crawler takes the random walk on the www network and rank the web sites.
[[File:rank10.png]]

This way Google ranks the pages and displays search results, according to page rank.
[[File:rank11.png]]

e.g.we search for ''mysore city''. Google has 10,000 results. But it displays the results in the sequence of page rank of search results, As shown in figure below.
[[File:mysore.png]]

[[#Top]]

==Page rank algorithm ==
As shown in beautiful figure below, few nodes combinely selected one as the leader, then that leader and other nodes, have selected         other as a leader. This way, finally the final leader is elected.
[[File:rank12.png|600px]]


[[File:graph00.png|600px]]

[[File:graph01.png|600px]]

==Gragh Drawing Program1==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
nx.barbell_graph(4,2)
G=nx.barbell_graph(4,2)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:Graph003.png|600px]]

==Gragh Drawing Program2==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
nx.barbell_graph(4,3)
G=nx.barbell_graph(4,3)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:Graph004.png|600px]]

==Gragh Drawing Program3==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
nx.barbell_graph(5,3)
G=nx.barbell_graph(5,3)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:Graph005.png|600px]]

==Complete Graph==
Complete graph is a graph, wherein, each node is connected to each other nodes in a graph.

&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.complete_graph(4)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:

[[File:completegraph001.png|600px]]

==Cycle graph==

&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.cycle_graph(5)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:

[[File:cyclegraph1.png|600px]]

==Ladder graph==

&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.ladder_graph(5)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:

[[File:laddergraph.png|600px]]

==Path Graph==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.path_graph(6)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:

[[File:pathgraph.png|600px]]

==Star Graph==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.star_graph(5)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:stargraph.png|600px]]


==Star Graph of 4 Nodes==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.star_graph(4)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:stargraph4points.png|600px]]

==Wheel Graph==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.wheel_graph(4)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:wheelgraph.png|600px]]

==Wheel Graph of 5 nodes==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.wheel_graph(5)
nx.draw(G)
plt.show()

&lt;/pre&gt;

Output:

[[File:wheelgraph5nodes.png|600px]]

==Wheel Graph of 6 nodes==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.wheel_graph(6)
nx.draw(G)
plt.show()

&lt;/pre&gt;

Output:

[[File:wheelgraph6nodes.png|600px]]

==Random Graph==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.gnp_random_graph(5,0.5)
nx.draw(G)
plt.show()

&lt;/pre&gt;

Output:

[[File:randomgraph1.png|600px]]


Running the same above program, we will get different output, as shown below, as it is random graph.

[[File:randomgraph2.png|600px]]

[[#Top]]

==Page Rank Algorithm Implementation==

===Random Directed Graph===
&lt;pre&gt;
import networkx as nx
import random
import matplotlib.pyplot as plt

#Draw random directed graph
G=nx.gnp_random_graph(10,0.5,directed=True)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output: 

[[File:randomDirectedGraph.png|600px]]


===Random Directed Graph with Labels===
&lt;pre&gt;
import networkx as nx
import random
import matplotlib.pyplot as plt

#Draw random directed graph 
G=nx.gnp_random_graph(10,0.5,directed=True)
#Give label numbering to nodes
nx.draw(G,with_labels=True)
plt.show()

&lt;/pre&gt;

Output:

[[File:randomDirectedGraphwithLabels.png|600px]]


[[#Top]]

===Page Rank Coding===
&lt;pre&gt;
import networkx as nx
import random
import matplotlib.pyplot as plt
import operator

#Draw random directed graph 
G=nx.gnp_random_graph(10,0.5,directed=True)
#Give label numbering to nodes
nx.draw(G,with_labels=True)
plt.show()

#x is the random source node
x=random.choice([i for i in range(G.number_of_nodes())])

#dictionary to maintain counter
dictCounter={}
#initialize the counter of each node as 0
for i in range(G.number_of_nodes()):
    dictCounter[i]=0
dictCounter[x]=dictCounter[x]+1

for i in range(10000):
    listn=list(G.neighbors(x))
    #if x is a sink node, we need to select random node for random walk
    #, else select random neighbor node

    if(len(listn)==0):
        x=random.choice([i for i in range(G.number_of_nodes())])
        dictCounter[x]=dictCounter[x]+1
    else:
        #choose a node randomly from neightbors
        x=random.choice(listn)
        dictCounter[x]=dictCounter[x]+1

p=nx.pagerank(G)
sorted_p=sorted(p.items(),key=operator.itemgetter(1))
sorted_rw=sorted(dictCounter.items(),key=operator.itemgetter(1))                        
#print(p)
#print(dictCounter)

print(sorted_p)
print(sorted_rw)

&lt;/pre&gt;

Output:

&lt;pre&gt;
[(2, 0.07139920240302768), (5, 0.07464882519777695), (3, 0.08527469366832419), 
(6, 0.08665188647066119), (4, 0.0987815549542114), (0, 0.10858415997562518), 
(9, 0.110369696943925), (8, 0.11456211367660116), (1, 0.11682018308814024), 
(7, 0.13290768362170685)]
[(2, 4), (5, 7), (8, 7), (6, 8), (3, 11), (7, 11), (1, 12), (4, 12), (0, 13), (9, 16)]
&lt;/pre&gt;

[[#Top]]

=Email communication Network=

=Collatz Conjecture=
Taught by Sudarshan sir and Amit sir, and Edited by Ms. Ami Tusharkant Choksi

If a number is even, divide it by ''2'', if it is odd, make multiply it by ''3'' and add ''1'', till you get ''1''. This simple problem is called, ''Collatz Conjecture''. 

[[File:collatz1.png|600px]]

[[File:collatz2.png|600px]]

[[File:collatz3.png|600px]]

[[File:collatz4.png|600px]]

[[File:collatz5.png|600px]]

Number is bigger doesn't mean more iterations are required. One can notice, from the output of the following program. 



The program to implement the same is as follows:
==Program==
&lt;pre&gt;
#collatz conjecture
#if num is even, divide it by 2
#if num is odd, new number is equal to 3n+1


def checkNum(num):
    iterations=1
    while(num!=1):
        if(num%2==0):
            num=int(num/2)            
        else:
            num = 3*num+1
        iterations+=1
        

    print(num,iterations)


#checkNum(12)#Output: 1 10
#checkNum(26)#Output: 1 11
checkNum(2000)#Output: 1 113
&lt;/pre&gt;

&lt;pre&gt;

#recursive approach

def checkNum(num):
    if num==1:
        return 1
    elif num%2==0:
        return checkNum(num/2)+1
    else:
        return checkNum(3*num +1)+1


output:
checkNum(26)
Out[27]: 11
checkNum(5000)
Out[28]: 29
&lt;/pre&gt;

==Program adding statement to print all iterations==
&lt;pre&gt;
def checkNum(num):
    iterations=1
    while(num!=1):
        if(num%2==0):
            num=int(num/2)            
        else:
            num = 3*num+1
        print(iterations,&quot;:&quot;,num)
        iterations+=1
        

    print(num,iterations)
&lt;/pre&gt;
==Output==
===For checkNum(2000)===
&lt;pre&gt;
1 : 1000
2 : 500
3 : 250
4 : 125
5 : 376
6 : 188
7 : 94
8 : 47
9 : 142
10 : 71
11 : 214
12 : 107
13 : 322
14 : 161
15 : 484
16 : 242
17 : 121
18 : 364
19 : 182
20 : 91
21 : 274
22 : 137
23 : 412
24 : 206
25 : 103
26 : 310
27 : 155
28 : 466
29 : 233
30 : 700
31 : 350
32 : 175
33 : 526
34 : 263
35 : 790
36 : 395
37 : 1186
38 : 593
39 : 1780
40 : 890
41 : 445
42 : 1336
43 : 668
44 : 334
45 : 167
46 : 502
47 : 251
48 : 754
49 : 377
50 : 1132
51 : 566
52 : 283
53 : 850
54 : 425
55 : 1276
56 : 638
57 : 319
58 : 958
59 : 479
60 : 1438
61 : 719
62 : 2158
63 : 1079
64 : 3238
65 : 1619
66 : 4858
67 : 2429
68 : 7288
69 : 3644
70 : 1822
71 : 911
72 : 2734
73 : 1367
74 : 4102
75 : 2051
76 : 6154
77 : 3077
78 : 9232
79 : 4616
80 : 2308
81 : 1154
82 : 577
83 : 1732
84 : 866
85 : 433
86 : 1300
87 : 650
88 : 325
89 : 976
90 : 488
91 : 244
92 : 122
93 : 61
94 : 184
95 : 92
96 : 46
97 : 23
98 : 70
99 : 35
100 : 106
101 : 53
102 : 160
103 : 80
104 : 40
105 : 20
106 : 10
107 : 5
108 : 16
109 : 8
110 : 4
111 : 2
112 : 1
1 113
&lt;/pre&gt;

===For checkNum(5000)===
&lt;pre&gt;
1 : 2500
2 : 1250
3 : 625
4 : 1876
5 : 938
6 : 469
7 : 1408
8 : 704
9 : 352
10 : 176
11 : 88
12 : 44
13 : 22
14 : 11
15 : 34
16 : 17
17 : 52
18 : 26
19 : 13
20 : 40
21 : 20
22 : 10
23 : 5
24 : 16
25 : 8
26 : 4
27 : 2
28 : 1
1 29
&lt;/pre&gt;
===For checkNum(25000000)===
&lt;pre&gt;
1 : 12500000
2 : 6250000
3 : 3125000
4 : 1562500
5 : 781250
6 : 390625
7 : 1171876
8 : 585938
9 : 292969
10 : 878908
11 : 439454
12 : 219727
13 : 659182
14 : 329591
15 : 988774
16 : 494387
17 : 1483162
18 : 741581
19 : 2224744
20 : 1112372
21 : 556186
22 : 278093
23 : 834280
24 : 417140
25 : 208570
26 : 104285
27 : 312856
28 : 156428
29 : 78214
30 : 39107
31 : 117322
32 : 58661
33 : 175984
34 : 87992
35 : 43996
36 : 21998
37 : 10999
38 : 32998
39 : 16499
40 : 49498
41 : 24749
42 : 74248
43 : 37124
44 : 18562
45 : 9281
46 : 27844
47 : 13922
48 : 6961
49 : 20884
50 : 10442
51 : 5221
52 : 15664
53 : 7832
54 : 3916
55 : 1958
56 : 979
57 : 2938
58 : 1469
59 : 4408
60 : 2204
61 : 1102
62 : 551
63 : 1654
64 : 827
65 : 2482
66 : 1241
67 : 3724
68 : 1862
69 : 931
70 : 2794
71 : 1397
72 : 4192
73 : 2096
74 : 1048
75 : 524
76 : 262
77 : 131
78 : 394
79 : 197
80 : 592
81 : 296
82 : 148
83 : 74
84 : 37
85 : 112
86 : 56
87 : 28
88 : 14
89 : 7
90 : 22
91 : 11
92 : 34
93 : 17
94 : 52
95 : 26
96 : 13
97 : 40
98 : 20
99 : 10
100 : 5
101 : 16
102 : 8
103 : 4
104 : 2
105 : 1
1 106
&lt;/pre&gt;

Happy Life ahead!!!

[[File:end1.png]]</text>
      <sha1>1dnwo2df8cl5m85s4i2rtqjkzvq9lkm</sha1>
    </revision>
    <revision>
      <id>4440</id>
      <parentid>4439</parentid>
      <timestamp>2018-10-17T05:10:41Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* Wheel Graph of 6 nodes */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="11242">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_12 Contributors of this page]

=Page Rank - How does Google Work=
One web page is having link to other page, that is a page is referring to other page. Google uses ''Page Rank'' algorithm to choose which page should be displayed first.

If we have network, connections as below:
[[File:rank0.png]]

We want to pick a leader out of all these nodes. How to pick a leader?  Why to elect a leader? It is because we want to find the super power of available nodes.                     
[[File:rank1.png]]

For example, the application wherein, we want to find the most impressive person of the  few ones. How to decide it? As shown in below figure, each node will communicate with other, randomly, we implement the count for each node, how many times, the particular node is being visited.
[[File:rank2.png]]

[[#Top]]

As shown in following, figure, all nodes are visited and each node is marked with the 
number i.e.number of times the node is visited.
[[File:rank3.png]]

The node with the maximum count, becomes the winner. Here, node with 120 count in figure 
below, is the winner. i.e. The person with 120 count in the figure is the most impressive 
person in the community being considered.
[[File:rank4.png]]

[[File:rank5.png]]

[[File:rank6.png]]

[[File:rank7.png]]


[[File:rank8.png]]

[[#Top]]

Google selects the page rank in this matter. Each web page is connected to other web page with web links. To a page, maximum link is there, that will be put on top results in Google search results.
[[File:rank9.png]]

Google uses web crawler. The crawler takes the random walk on the www network and rank the web sites.
[[File:rank10.png]]

This way Google ranks the pages and displays search results, according to page rank.
[[File:rank11.png]]

e.g.we search for ''mysore city''. Google has 10,000 results. But it displays the results in the sequence of page rank of search results, As shown in figure below.
[[File:mysore.png]]

[[#Top]]

==Page rank algorithm ==
As shown in beautiful figure below, few nodes combinely selected one as the leader, then that leader and other nodes, have selected         other as a leader. This way, finally the final leader is elected.
[[File:rank12.png|600px]]


[[File:graph00.png|600px]]

[[File:graph01.png|600px]]

==Gragh Drawing Program1==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
nx.barbell_graph(4,2)
G=nx.barbell_graph(4,2)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:Graph003.png|600px]]

==Gragh Drawing Program2==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
nx.barbell_graph(4,3)
G=nx.barbell_graph(4,3)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:Graph004.png|600px]]

==Gragh Drawing Program3==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
nx.barbell_graph(5,3)
G=nx.barbell_graph(5,3)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:Graph005.png|600px]]

==Complete Graph==
Complete graph is a graph, wherein, each node is connected to each other nodes in a graph.

&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.complete_graph(4)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:

[[File:completegraph001.png|600px]]

==Cycle graph==

&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.cycle_graph(5)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:

[[File:cyclegraph1.png|600px]]

==Ladder graph==

&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.ladder_graph(5)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:

[[File:laddergraph.png|600px]]

==Path Graph==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.path_graph(6)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:

[[File:pathgraph.png|600px]]

==Star Graph==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.star_graph(5)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:stargraph.png|600px]]


==Star Graph of 4 Nodes==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.star_graph(4)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:stargraph4points.png|600px]]

==Wheel Graph==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.wheel_graph(4)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:wheelgraph.png|600px]]

==Wheel Graph of 5 nodes==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.wheel_graph(5)
nx.draw(G)
plt.show()

&lt;/pre&gt;

Output:

[[File:wheelgraph5nodes.png|600px]]

==Wheel Graph of 6 nodes==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.wheel_graph(6)
nx.draw(G)
plt.show()

&lt;/pre&gt;

Output:

[[File:wheelgraph6nodes.png|600px]]

[[#Top]]

==Random Graph==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.gnp_random_graph(5,0.5)
nx.draw(G)
plt.show()

&lt;/pre&gt;

Output:

[[File:randomgraph1.png|600px]]


Running the same above program, we will get different output, as shown below, as it is random graph.

[[File:randomgraph2.png|600px]]

[[#Top]]

==Page Rank Algorithm Implementation==

===Random Directed Graph===
&lt;pre&gt;
import networkx as nx
import random
import matplotlib.pyplot as plt

#Draw random directed graph
G=nx.gnp_random_graph(10,0.5,directed=True)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output: 

[[File:randomDirectedGraph.png|600px]]


===Random Directed Graph with Labels===
&lt;pre&gt;
import networkx as nx
import random
import matplotlib.pyplot as plt

#Draw random directed graph 
G=nx.gnp_random_graph(10,0.5,directed=True)
#Give label numbering to nodes
nx.draw(G,with_labels=True)
plt.show()

&lt;/pre&gt;

Output:

[[File:randomDirectedGraphwithLabels.png|600px]]


[[#Top]]

===Page Rank Coding===
&lt;pre&gt;
import networkx as nx
import random
import matplotlib.pyplot as plt
import operator

#Draw random directed graph 
G=nx.gnp_random_graph(10,0.5,directed=True)
#Give label numbering to nodes
nx.draw(G,with_labels=True)
plt.show()

#x is the random source node
x=random.choice([i for i in range(G.number_of_nodes())])

#dictionary to maintain counter
dictCounter={}
#initialize the counter of each node as 0
for i in range(G.number_of_nodes()):
    dictCounter[i]=0
dictCounter[x]=dictCounter[x]+1

for i in range(10000):
    listn=list(G.neighbors(x))
    #if x is a sink node, we need to select random node for random walk
    #, else select random neighbor node

    if(len(listn)==0):
        x=random.choice([i for i in range(G.number_of_nodes())])
        dictCounter[x]=dictCounter[x]+1
    else:
        #choose a node randomly from neightbors
        x=random.choice(listn)
        dictCounter[x]=dictCounter[x]+1

p=nx.pagerank(G)
sorted_p=sorted(p.items(),key=operator.itemgetter(1))
sorted_rw=sorted(dictCounter.items(),key=operator.itemgetter(1))                        
#print(p)
#print(dictCounter)

print(sorted_p)
print(sorted_rw)

&lt;/pre&gt;

Output:

&lt;pre&gt;
[(2, 0.07139920240302768), (5, 0.07464882519777695), (3, 0.08527469366832419), 
(6, 0.08665188647066119), (4, 0.0987815549542114), (0, 0.10858415997562518), 
(9, 0.110369696943925), (8, 0.11456211367660116), (1, 0.11682018308814024), 
(7, 0.13290768362170685)]
[(2, 4), (5, 7), (8, 7), (6, 8), (3, 11), (7, 11), (1, 12), (4, 12), (0, 13), (9, 16)]
&lt;/pre&gt;

[[#Top]]

=Email communication Network=

=Collatz Conjecture=
Taught by Sudarshan sir and Amit sir, and Edited by Ms. Ami Tusharkant Choksi

If a number is even, divide it by ''2'', if it is odd, make multiply it by ''3'' and add ''1'', till you get ''1''. This simple problem is called, ''Collatz Conjecture''. 

[[File:collatz1.png|600px]]

[[File:collatz2.png|600px]]

[[File:collatz3.png|600px]]

[[File:collatz4.png|600px]]

[[File:collatz5.png|600px]]

Number is bigger doesn't mean more iterations are required. One can notice, from the output of the following program. 



The program to implement the same is as follows:
==Program==
&lt;pre&gt;
#collatz conjecture
#if num is even, divide it by 2
#if num is odd, new number is equal to 3n+1


def checkNum(num):
    iterations=1
    while(num!=1):
        if(num%2==0):
            num=int(num/2)            
        else:
            num = 3*num+1
        iterations+=1
        

    print(num,iterations)


#checkNum(12)#Output: 1 10
#checkNum(26)#Output: 1 11
checkNum(2000)#Output: 1 113
&lt;/pre&gt;

&lt;pre&gt;

#recursive approach

def checkNum(num):
    if num==1:
        return 1
    elif num%2==0:
        return checkNum(num/2)+1
    else:
        return checkNum(3*num +1)+1


output:
checkNum(26)
Out[27]: 11
checkNum(5000)
Out[28]: 29
&lt;/pre&gt;

==Program adding statement to print all iterations==
&lt;pre&gt;
def checkNum(num):
    iterations=1
    while(num!=1):
        if(num%2==0):
            num=int(num/2)            
        else:
            num = 3*num+1
        print(iterations,&quot;:&quot;,num)
        iterations+=1
        

    print(num,iterations)
&lt;/pre&gt;
==Output==
===For checkNum(2000)===
&lt;pre&gt;
1 : 1000
2 : 500
3 : 250
4 : 125
5 : 376
6 : 188
7 : 94
8 : 47
9 : 142
10 : 71
11 : 214
12 : 107
13 : 322
14 : 161
15 : 484
16 : 242
17 : 121
18 : 364
19 : 182
20 : 91
21 : 274
22 : 137
23 : 412
24 : 206
25 : 103
26 : 310
27 : 155
28 : 466
29 : 233
30 : 700
31 : 350
32 : 175
33 : 526
34 : 263
35 : 790
36 : 395
37 : 1186
38 : 593
39 : 1780
40 : 890
41 : 445
42 : 1336
43 : 668
44 : 334
45 : 167
46 : 502
47 : 251
48 : 754
49 : 377
50 : 1132
51 : 566
52 : 283
53 : 850
54 : 425
55 : 1276
56 : 638
57 : 319
58 : 958
59 : 479
60 : 1438
61 : 719
62 : 2158
63 : 1079
64 : 3238
65 : 1619
66 : 4858
67 : 2429
68 : 7288
69 : 3644
70 : 1822
71 : 911
72 : 2734
73 : 1367
74 : 4102
75 : 2051
76 : 6154
77 : 3077
78 : 9232
79 : 4616
80 : 2308
81 : 1154
82 : 577
83 : 1732
84 : 866
85 : 433
86 : 1300
87 : 650
88 : 325
89 : 976
90 : 488
91 : 244
92 : 122
93 : 61
94 : 184
95 : 92
96 : 46
97 : 23
98 : 70
99 : 35
100 : 106
101 : 53
102 : 160
103 : 80
104 : 40
105 : 20
106 : 10
107 : 5
108 : 16
109 : 8
110 : 4
111 : 2
112 : 1
1 113
&lt;/pre&gt;

===For checkNum(5000)===
&lt;pre&gt;
1 : 2500
2 : 1250
3 : 625
4 : 1876
5 : 938
6 : 469
7 : 1408
8 : 704
9 : 352
10 : 176
11 : 88
12 : 44
13 : 22
14 : 11
15 : 34
16 : 17
17 : 52
18 : 26
19 : 13
20 : 40
21 : 20
22 : 10
23 : 5
24 : 16
25 : 8
26 : 4
27 : 2
28 : 1
1 29
&lt;/pre&gt;
===For checkNum(25000000)===
&lt;pre&gt;
1 : 12500000
2 : 6250000
3 : 3125000
4 : 1562500
5 : 781250
6 : 390625
7 : 1171876
8 : 585938
9 : 292969
10 : 878908
11 : 439454
12 : 219727
13 : 659182
14 : 329591
15 : 988774
16 : 494387
17 : 1483162
18 : 741581
19 : 2224744
20 : 1112372
21 : 556186
22 : 278093
23 : 834280
24 : 417140
25 : 208570
26 : 104285
27 : 312856
28 : 156428
29 : 78214
30 : 39107
31 : 117322
32 : 58661
33 : 175984
34 : 87992
35 : 43996
36 : 21998
37 : 10999
38 : 32998
39 : 16499
40 : 49498
41 : 24749
42 : 74248
43 : 37124
44 : 18562
45 : 9281
46 : 27844
47 : 13922
48 : 6961
49 : 20884
50 : 10442
51 : 5221
52 : 15664
53 : 7832
54 : 3916
55 : 1958
56 : 979
57 : 2938
58 : 1469
59 : 4408
60 : 2204
61 : 1102
62 : 551
63 : 1654
64 : 827
65 : 2482
66 : 1241
67 : 3724
68 : 1862
69 : 931
70 : 2794
71 : 1397
72 : 4192
73 : 2096
74 : 1048
75 : 524
76 : 262
77 : 131
78 : 394
79 : 197
80 : 592
81 : 296
82 : 148
83 : 74
84 : 37
85 : 112
86 : 56
87 : 28
88 : 14
89 : 7
90 : 22
91 : 11
92 : 34
93 : 17
94 : 52
95 : 26
96 : 13
97 : 40
98 : 20
99 : 10
100 : 5
101 : 16
102 : 8
103 : 4
104 : 2
105 : 1
1 106
&lt;/pre&gt;

Happy Life ahead!!!

[[File:end1.png]]</text>
      <sha1>l1fc3d6jq5iyzlmtdxbxipijr59ei1r</sha1>
    </revision>
    <revision>
      <id>4441</id>
      <parentid>4440</parentid>
      <timestamp>2018-10-17T05:10:57Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* Wheel Graph of 5 nodes */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="11252">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_12 Contributors of this page]

=Page Rank - How does Google Work=
One web page is having link to other page, that is a page is referring to other page. Google uses ''Page Rank'' algorithm to choose which page should be displayed first.

If we have network, connections as below:
[[File:rank0.png]]

We want to pick a leader out of all these nodes. How to pick a leader?  Why to elect a leader? It is because we want to find the super power of available nodes.                     
[[File:rank1.png]]

For example, the application wherein, we want to find the most impressive person of the  few ones. How to decide it? As shown in below figure, each node will communicate with other, randomly, we implement the count for each node, how many times, the particular node is being visited.
[[File:rank2.png]]

[[#Top]]

As shown in following, figure, all nodes are visited and each node is marked with the 
number i.e.number of times the node is visited.
[[File:rank3.png]]

The node with the maximum count, becomes the winner. Here, node with 120 count in figure 
below, is the winner. i.e. The person with 120 count in the figure is the most impressive 
person in the community being considered.
[[File:rank4.png]]

[[File:rank5.png]]

[[File:rank6.png]]

[[File:rank7.png]]


[[File:rank8.png]]

[[#Top]]

Google selects the page rank in this matter. Each web page is connected to other web page with web links. To a page, maximum link is there, that will be put on top results in Google search results.
[[File:rank9.png]]

Google uses web crawler. The crawler takes the random walk on the www network and rank the web sites.
[[File:rank10.png]]

This way Google ranks the pages and displays search results, according to page rank.
[[File:rank11.png]]

e.g.we search for ''mysore city''. Google has 10,000 results. But it displays the results in the sequence of page rank of search results, As shown in figure below.
[[File:mysore.png]]

[[#Top]]

==Page rank algorithm ==
As shown in beautiful figure below, few nodes combinely selected one as the leader, then that leader and other nodes, have selected         other as a leader. This way, finally the final leader is elected.
[[File:rank12.png|600px]]


[[File:graph00.png|600px]]

[[File:graph01.png|600px]]

==Gragh Drawing Program1==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
nx.barbell_graph(4,2)
G=nx.barbell_graph(4,2)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:Graph003.png|600px]]

==Gragh Drawing Program2==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
nx.barbell_graph(4,3)
G=nx.barbell_graph(4,3)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:Graph004.png|600px]]

==Gragh Drawing Program3==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
nx.barbell_graph(5,3)
G=nx.barbell_graph(5,3)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:Graph005.png|600px]]

==Complete Graph==
Complete graph is a graph, wherein, each node is connected to each other nodes in a graph.

&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.complete_graph(4)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:

[[File:completegraph001.png|600px]]

==Cycle graph==

&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.cycle_graph(5)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:

[[File:cyclegraph1.png|600px]]

==Ladder graph==

&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.ladder_graph(5)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:

[[File:laddergraph.png|600px]]

==Path Graph==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.path_graph(6)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:

[[File:pathgraph.png|600px]]

==Star Graph==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.star_graph(5)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:stargraph.png|600px]]


==Star Graph of 4 Nodes==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.star_graph(4)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:stargraph4points.png|600px]]

==Wheel Graph==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.wheel_graph(4)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:wheelgraph.png|600px]]

==Wheel Graph of 5 nodes==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.wheel_graph(5)
nx.draw(G)
plt.show()

&lt;/pre&gt;

Output:

[[File:wheelgraph5nodes.png|600px]]

[[#Top]]

==Wheel Graph of 6 nodes==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.wheel_graph(6)
nx.draw(G)
plt.show()

&lt;/pre&gt;

Output:

[[File:wheelgraph6nodes.png|600px]]

[[#Top]]

==Random Graph==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.gnp_random_graph(5,0.5)
nx.draw(G)
plt.show()

&lt;/pre&gt;

Output:

[[File:randomgraph1.png|600px]]


Running the same above program, we will get different output, as shown below, as it is random graph.

[[File:randomgraph2.png|600px]]

[[#Top]]

==Page Rank Algorithm Implementation==

===Random Directed Graph===
&lt;pre&gt;
import networkx as nx
import random
import matplotlib.pyplot as plt

#Draw random directed graph
G=nx.gnp_random_graph(10,0.5,directed=True)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output: 

[[File:randomDirectedGraph.png|600px]]


===Random Directed Graph with Labels===
&lt;pre&gt;
import networkx as nx
import random
import matplotlib.pyplot as plt

#Draw random directed graph 
G=nx.gnp_random_graph(10,0.5,directed=True)
#Give label numbering to nodes
nx.draw(G,with_labels=True)
plt.show()

&lt;/pre&gt;

Output:

[[File:randomDirectedGraphwithLabels.png|600px]]


[[#Top]]

===Page Rank Coding===
&lt;pre&gt;
import networkx as nx
import random
import matplotlib.pyplot as plt
import operator

#Draw random directed graph 
G=nx.gnp_random_graph(10,0.5,directed=True)
#Give label numbering to nodes
nx.draw(G,with_labels=True)
plt.show()

#x is the random source node
x=random.choice([i for i in range(G.number_of_nodes())])

#dictionary to maintain counter
dictCounter={}
#initialize the counter of each node as 0
for i in range(G.number_of_nodes()):
    dictCounter[i]=0
dictCounter[x]=dictCounter[x]+1

for i in range(10000):
    listn=list(G.neighbors(x))
    #if x is a sink node, we need to select random node for random walk
    #, else select random neighbor node

    if(len(listn)==0):
        x=random.choice([i for i in range(G.number_of_nodes())])
        dictCounter[x]=dictCounter[x]+1
    else:
        #choose a node randomly from neightbors
        x=random.choice(listn)
        dictCounter[x]=dictCounter[x]+1

p=nx.pagerank(G)
sorted_p=sorted(p.items(),key=operator.itemgetter(1))
sorted_rw=sorted(dictCounter.items(),key=operator.itemgetter(1))                        
#print(p)
#print(dictCounter)

print(sorted_p)
print(sorted_rw)

&lt;/pre&gt;

Output:

&lt;pre&gt;
[(2, 0.07139920240302768), (5, 0.07464882519777695), (3, 0.08527469366832419), 
(6, 0.08665188647066119), (4, 0.0987815549542114), (0, 0.10858415997562518), 
(9, 0.110369696943925), (8, 0.11456211367660116), (1, 0.11682018308814024), 
(7, 0.13290768362170685)]
[(2, 4), (5, 7), (8, 7), (6, 8), (3, 11), (7, 11), (1, 12), (4, 12), (0, 13), (9, 16)]
&lt;/pre&gt;

[[#Top]]

=Email communication Network=

=Collatz Conjecture=
Taught by Sudarshan sir and Amit sir, and Edited by Ms. Ami Tusharkant Choksi

If a number is even, divide it by ''2'', if it is odd, make multiply it by ''3'' and add ''1'', till you get ''1''. This simple problem is called, ''Collatz Conjecture''. 

[[File:collatz1.png|600px]]

[[File:collatz2.png|600px]]

[[File:collatz3.png|600px]]

[[File:collatz4.png|600px]]

[[File:collatz5.png|600px]]

Number is bigger doesn't mean more iterations are required. One can notice, from the output of the following program. 



The program to implement the same is as follows:
==Program==
&lt;pre&gt;
#collatz conjecture
#if num is even, divide it by 2
#if num is odd, new number is equal to 3n+1


def checkNum(num):
    iterations=1
    while(num!=1):
        if(num%2==0):
            num=int(num/2)            
        else:
            num = 3*num+1
        iterations+=1
        

    print(num,iterations)


#checkNum(12)#Output: 1 10
#checkNum(26)#Output: 1 11
checkNum(2000)#Output: 1 113
&lt;/pre&gt;

&lt;pre&gt;

#recursive approach

def checkNum(num):
    if num==1:
        return 1
    elif num%2==0:
        return checkNum(num/2)+1
    else:
        return checkNum(3*num +1)+1


output:
checkNum(26)
Out[27]: 11
checkNum(5000)
Out[28]: 29
&lt;/pre&gt;

==Program adding statement to print all iterations==
&lt;pre&gt;
def checkNum(num):
    iterations=1
    while(num!=1):
        if(num%2==0):
            num=int(num/2)            
        else:
            num = 3*num+1
        print(iterations,&quot;:&quot;,num)
        iterations+=1
        

    print(num,iterations)
&lt;/pre&gt;
==Output==
===For checkNum(2000)===
&lt;pre&gt;
1 : 1000
2 : 500
3 : 250
4 : 125
5 : 376
6 : 188
7 : 94
8 : 47
9 : 142
10 : 71
11 : 214
12 : 107
13 : 322
14 : 161
15 : 484
16 : 242
17 : 121
18 : 364
19 : 182
20 : 91
21 : 274
22 : 137
23 : 412
24 : 206
25 : 103
26 : 310
27 : 155
28 : 466
29 : 233
30 : 700
31 : 350
32 : 175
33 : 526
34 : 263
35 : 790
36 : 395
37 : 1186
38 : 593
39 : 1780
40 : 890
41 : 445
42 : 1336
43 : 668
44 : 334
45 : 167
46 : 502
47 : 251
48 : 754
49 : 377
50 : 1132
51 : 566
52 : 283
53 : 850
54 : 425
55 : 1276
56 : 638
57 : 319
58 : 958
59 : 479
60 : 1438
61 : 719
62 : 2158
63 : 1079
64 : 3238
65 : 1619
66 : 4858
67 : 2429
68 : 7288
69 : 3644
70 : 1822
71 : 911
72 : 2734
73 : 1367
74 : 4102
75 : 2051
76 : 6154
77 : 3077
78 : 9232
79 : 4616
80 : 2308
81 : 1154
82 : 577
83 : 1732
84 : 866
85 : 433
86 : 1300
87 : 650
88 : 325
89 : 976
90 : 488
91 : 244
92 : 122
93 : 61
94 : 184
95 : 92
96 : 46
97 : 23
98 : 70
99 : 35
100 : 106
101 : 53
102 : 160
103 : 80
104 : 40
105 : 20
106 : 10
107 : 5
108 : 16
109 : 8
110 : 4
111 : 2
112 : 1
1 113
&lt;/pre&gt;

===For checkNum(5000)===
&lt;pre&gt;
1 : 2500
2 : 1250
3 : 625
4 : 1876
5 : 938
6 : 469
7 : 1408
8 : 704
9 : 352
10 : 176
11 : 88
12 : 44
13 : 22
14 : 11
15 : 34
16 : 17
17 : 52
18 : 26
19 : 13
20 : 40
21 : 20
22 : 10
23 : 5
24 : 16
25 : 8
26 : 4
27 : 2
28 : 1
1 29
&lt;/pre&gt;
===For checkNum(25000000)===
&lt;pre&gt;
1 : 12500000
2 : 6250000
3 : 3125000
4 : 1562500
5 : 781250
6 : 390625
7 : 1171876
8 : 585938
9 : 292969
10 : 878908
11 : 439454
12 : 219727
13 : 659182
14 : 329591
15 : 988774
16 : 494387
17 : 1483162
18 : 741581
19 : 2224744
20 : 1112372
21 : 556186
22 : 278093
23 : 834280
24 : 417140
25 : 208570
26 : 104285
27 : 312856
28 : 156428
29 : 78214
30 : 39107
31 : 117322
32 : 58661
33 : 175984
34 : 87992
35 : 43996
36 : 21998
37 : 10999
38 : 32998
39 : 16499
40 : 49498
41 : 24749
42 : 74248
43 : 37124
44 : 18562
45 : 9281
46 : 27844
47 : 13922
48 : 6961
49 : 20884
50 : 10442
51 : 5221
52 : 15664
53 : 7832
54 : 3916
55 : 1958
56 : 979
57 : 2938
58 : 1469
59 : 4408
60 : 2204
61 : 1102
62 : 551
63 : 1654
64 : 827
65 : 2482
66 : 1241
67 : 3724
68 : 1862
69 : 931
70 : 2794
71 : 1397
72 : 4192
73 : 2096
74 : 1048
75 : 524
76 : 262
77 : 131
78 : 394
79 : 197
80 : 592
81 : 296
82 : 148
83 : 74
84 : 37
85 : 112
86 : 56
87 : 28
88 : 14
89 : 7
90 : 22
91 : 11
92 : 34
93 : 17
94 : 52
95 : 26
96 : 13
97 : 40
98 : 20
99 : 10
100 : 5
101 : 16
102 : 8
103 : 4
104 : 2
105 : 1
1 106
&lt;/pre&gt;

Happy Life ahead!!!

[[File:end1.png]]</text>
      <sha1>fb8gh2gisgkigjoz9o3fzn8sn7p47u1</sha1>
    </revision>
    <revision>
      <id>4442</id>
      <parentid>4441</parentid>
      <timestamp>2018-10-17T05:11:13Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* Wheel Graph */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="11262">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_12 Contributors of this page]

=Page Rank - How does Google Work=
One web page is having link to other page, that is a page is referring to other page. Google uses ''Page Rank'' algorithm to choose which page should be displayed first.

If we have network, connections as below:
[[File:rank0.png]]

We want to pick a leader out of all these nodes. How to pick a leader?  Why to elect a leader? It is because we want to find the super power of available nodes.                     
[[File:rank1.png]]

For example, the application wherein, we want to find the most impressive person of the  few ones. How to decide it? As shown in below figure, each node will communicate with other, randomly, we implement the count for each node, how many times, the particular node is being visited.
[[File:rank2.png]]

[[#Top]]

As shown in following, figure, all nodes are visited and each node is marked with the 
number i.e.number of times the node is visited.
[[File:rank3.png]]

The node with the maximum count, becomes the winner. Here, node with 120 count in figure 
below, is the winner. i.e. The person with 120 count in the figure is the most impressive 
person in the community being considered.
[[File:rank4.png]]

[[File:rank5.png]]

[[File:rank6.png]]

[[File:rank7.png]]


[[File:rank8.png]]

[[#Top]]

Google selects the page rank in this matter. Each web page is connected to other web page with web links. To a page, maximum link is there, that will be put on top results in Google search results.
[[File:rank9.png]]

Google uses web crawler. The crawler takes the random walk on the www network and rank the web sites.
[[File:rank10.png]]

This way Google ranks the pages and displays search results, according to page rank.
[[File:rank11.png]]

e.g.we search for ''mysore city''. Google has 10,000 results. But it displays the results in the sequence of page rank of search results, As shown in figure below.
[[File:mysore.png]]

[[#Top]]

==Page rank algorithm ==
As shown in beautiful figure below, few nodes combinely selected one as the leader, then that leader and other nodes, have selected         other as a leader. This way, finally the final leader is elected.
[[File:rank12.png|600px]]


[[File:graph00.png|600px]]

[[File:graph01.png|600px]]

==Gragh Drawing Program1==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
nx.barbell_graph(4,2)
G=nx.barbell_graph(4,2)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:Graph003.png|600px]]

==Gragh Drawing Program2==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
nx.barbell_graph(4,3)
G=nx.barbell_graph(4,3)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:Graph004.png|600px]]

==Gragh Drawing Program3==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
nx.barbell_graph(5,3)
G=nx.barbell_graph(5,3)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:Graph005.png|600px]]

==Complete Graph==
Complete graph is a graph, wherein, each node is connected to each other nodes in a graph.

&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.complete_graph(4)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:

[[File:completegraph001.png|600px]]

==Cycle graph==

&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.cycle_graph(5)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:

[[File:cyclegraph1.png|600px]]

==Ladder graph==

&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.ladder_graph(5)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:

[[File:laddergraph.png|600px]]

==Path Graph==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.path_graph(6)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:

[[File:pathgraph.png|600px]]

==Star Graph==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.star_graph(5)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:stargraph.png|600px]]


==Star Graph of 4 Nodes==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.star_graph(4)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:stargraph4points.png|600px]]

==Wheel Graph==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.wheel_graph(4)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:wheelgraph.png|600px]]

[[#Top]]

==Wheel Graph of 5 nodes==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.wheel_graph(5)
nx.draw(G)
plt.show()

&lt;/pre&gt;

Output:

[[File:wheelgraph5nodes.png|600px]]

[[#Top]]

==Wheel Graph of 6 nodes==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.wheel_graph(6)
nx.draw(G)
plt.show()

&lt;/pre&gt;

Output:

[[File:wheelgraph6nodes.png|600px]]

[[#Top]]

==Random Graph==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.gnp_random_graph(5,0.5)
nx.draw(G)
plt.show()

&lt;/pre&gt;

Output:

[[File:randomgraph1.png|600px]]


Running the same above program, we will get different output, as shown below, as it is random graph.

[[File:randomgraph2.png|600px]]

[[#Top]]

==Page Rank Algorithm Implementation==

===Random Directed Graph===
&lt;pre&gt;
import networkx as nx
import random
import matplotlib.pyplot as plt

#Draw random directed graph
G=nx.gnp_random_graph(10,0.5,directed=True)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output: 

[[File:randomDirectedGraph.png|600px]]


===Random Directed Graph with Labels===
&lt;pre&gt;
import networkx as nx
import random
import matplotlib.pyplot as plt

#Draw random directed graph 
G=nx.gnp_random_graph(10,0.5,directed=True)
#Give label numbering to nodes
nx.draw(G,with_labels=True)
plt.show()

&lt;/pre&gt;

Output:

[[File:randomDirectedGraphwithLabels.png|600px]]


[[#Top]]

===Page Rank Coding===
&lt;pre&gt;
import networkx as nx
import random
import matplotlib.pyplot as plt
import operator

#Draw random directed graph 
G=nx.gnp_random_graph(10,0.5,directed=True)
#Give label numbering to nodes
nx.draw(G,with_labels=True)
plt.show()

#x is the random source node
x=random.choice([i for i in range(G.number_of_nodes())])

#dictionary to maintain counter
dictCounter={}
#initialize the counter of each node as 0
for i in range(G.number_of_nodes()):
    dictCounter[i]=0
dictCounter[x]=dictCounter[x]+1

for i in range(10000):
    listn=list(G.neighbors(x))
    #if x is a sink node, we need to select random node for random walk
    #, else select random neighbor node

    if(len(listn)==0):
        x=random.choice([i for i in range(G.number_of_nodes())])
        dictCounter[x]=dictCounter[x]+1
    else:
        #choose a node randomly from neightbors
        x=random.choice(listn)
        dictCounter[x]=dictCounter[x]+1

p=nx.pagerank(G)
sorted_p=sorted(p.items(),key=operator.itemgetter(1))
sorted_rw=sorted(dictCounter.items(),key=operator.itemgetter(1))                        
#print(p)
#print(dictCounter)

print(sorted_p)
print(sorted_rw)

&lt;/pre&gt;

Output:

&lt;pre&gt;
[(2, 0.07139920240302768), (5, 0.07464882519777695), (3, 0.08527469366832419), 
(6, 0.08665188647066119), (4, 0.0987815549542114), (0, 0.10858415997562518), 
(9, 0.110369696943925), (8, 0.11456211367660116), (1, 0.11682018308814024), 
(7, 0.13290768362170685)]
[(2, 4), (5, 7), (8, 7), (6, 8), (3, 11), (7, 11), (1, 12), (4, 12), (0, 13), (9, 16)]
&lt;/pre&gt;

[[#Top]]

=Email communication Network=

=Collatz Conjecture=
Taught by Sudarshan sir and Amit sir, and Edited by Ms. Ami Tusharkant Choksi

If a number is even, divide it by ''2'', if it is odd, make multiply it by ''3'' and add ''1'', till you get ''1''. This simple problem is called, ''Collatz Conjecture''. 

[[File:collatz1.png|600px]]

[[File:collatz2.png|600px]]

[[File:collatz3.png|600px]]

[[File:collatz4.png|600px]]

[[File:collatz5.png|600px]]

Number is bigger doesn't mean more iterations are required. One can notice, from the output of the following program. 



The program to implement the same is as follows:
==Program==
&lt;pre&gt;
#collatz conjecture
#if num is even, divide it by 2
#if num is odd, new number is equal to 3n+1


def checkNum(num):
    iterations=1
    while(num!=1):
        if(num%2==0):
            num=int(num/2)            
        else:
            num = 3*num+1
        iterations+=1
        

    print(num,iterations)


#checkNum(12)#Output: 1 10
#checkNum(26)#Output: 1 11
checkNum(2000)#Output: 1 113
&lt;/pre&gt;

&lt;pre&gt;

#recursive approach

def checkNum(num):
    if num==1:
        return 1
    elif num%2==0:
        return checkNum(num/2)+1
    else:
        return checkNum(3*num +1)+1


output:
checkNum(26)
Out[27]: 11
checkNum(5000)
Out[28]: 29
&lt;/pre&gt;

==Program adding statement to print all iterations==
&lt;pre&gt;
def checkNum(num):
    iterations=1
    while(num!=1):
        if(num%2==0):
            num=int(num/2)            
        else:
            num = 3*num+1
        print(iterations,&quot;:&quot;,num)
        iterations+=1
        

    print(num,iterations)
&lt;/pre&gt;
==Output==
===For checkNum(2000)===
&lt;pre&gt;
1 : 1000
2 : 500
3 : 250
4 : 125
5 : 376
6 : 188
7 : 94
8 : 47
9 : 142
10 : 71
11 : 214
12 : 107
13 : 322
14 : 161
15 : 484
16 : 242
17 : 121
18 : 364
19 : 182
20 : 91
21 : 274
22 : 137
23 : 412
24 : 206
25 : 103
26 : 310
27 : 155
28 : 466
29 : 233
30 : 700
31 : 350
32 : 175
33 : 526
34 : 263
35 : 790
36 : 395
37 : 1186
38 : 593
39 : 1780
40 : 890
41 : 445
42 : 1336
43 : 668
44 : 334
45 : 167
46 : 502
47 : 251
48 : 754
49 : 377
50 : 1132
51 : 566
52 : 283
53 : 850
54 : 425
55 : 1276
56 : 638
57 : 319
58 : 958
59 : 479
60 : 1438
61 : 719
62 : 2158
63 : 1079
64 : 3238
65 : 1619
66 : 4858
67 : 2429
68 : 7288
69 : 3644
70 : 1822
71 : 911
72 : 2734
73 : 1367
74 : 4102
75 : 2051
76 : 6154
77 : 3077
78 : 9232
79 : 4616
80 : 2308
81 : 1154
82 : 577
83 : 1732
84 : 866
85 : 433
86 : 1300
87 : 650
88 : 325
89 : 976
90 : 488
91 : 244
92 : 122
93 : 61
94 : 184
95 : 92
96 : 46
97 : 23
98 : 70
99 : 35
100 : 106
101 : 53
102 : 160
103 : 80
104 : 40
105 : 20
106 : 10
107 : 5
108 : 16
109 : 8
110 : 4
111 : 2
112 : 1
1 113
&lt;/pre&gt;

===For checkNum(5000)===
&lt;pre&gt;
1 : 2500
2 : 1250
3 : 625
4 : 1876
5 : 938
6 : 469
7 : 1408
8 : 704
9 : 352
10 : 176
11 : 88
12 : 44
13 : 22
14 : 11
15 : 34
16 : 17
17 : 52
18 : 26
19 : 13
20 : 40
21 : 20
22 : 10
23 : 5
24 : 16
25 : 8
26 : 4
27 : 2
28 : 1
1 29
&lt;/pre&gt;
===For checkNum(25000000)===
&lt;pre&gt;
1 : 12500000
2 : 6250000
3 : 3125000
4 : 1562500
5 : 781250
6 : 390625
7 : 1171876
8 : 585938
9 : 292969
10 : 878908
11 : 439454
12 : 219727
13 : 659182
14 : 329591
15 : 988774
16 : 494387
17 : 1483162
18 : 741581
19 : 2224744
20 : 1112372
21 : 556186
22 : 278093
23 : 834280
24 : 417140
25 : 208570
26 : 104285
27 : 312856
28 : 156428
29 : 78214
30 : 39107
31 : 117322
32 : 58661
33 : 175984
34 : 87992
35 : 43996
36 : 21998
37 : 10999
38 : 32998
39 : 16499
40 : 49498
41 : 24749
42 : 74248
43 : 37124
44 : 18562
45 : 9281
46 : 27844
47 : 13922
48 : 6961
49 : 20884
50 : 10442
51 : 5221
52 : 15664
53 : 7832
54 : 3916
55 : 1958
56 : 979
57 : 2938
58 : 1469
59 : 4408
60 : 2204
61 : 1102
62 : 551
63 : 1654
64 : 827
65 : 2482
66 : 1241
67 : 3724
68 : 1862
69 : 931
70 : 2794
71 : 1397
72 : 4192
73 : 2096
74 : 1048
75 : 524
76 : 262
77 : 131
78 : 394
79 : 197
80 : 592
81 : 296
82 : 148
83 : 74
84 : 37
85 : 112
86 : 56
87 : 28
88 : 14
89 : 7
90 : 22
91 : 11
92 : 34
93 : 17
94 : 52
95 : 26
96 : 13
97 : 40
98 : 20
99 : 10
100 : 5
101 : 16
102 : 8
103 : 4
104 : 2
105 : 1
1 106
&lt;/pre&gt;

Happy Life ahead!!!

[[File:end1.png]]</text>
      <sha1>swvu4ojywfnmc54ew9wah2zza68oyyb</sha1>
    </revision>
    <revision>
      <id>4443</id>
      <parentid>4442</parentid>
      <timestamp>2018-10-17T05:11:29Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* Star Graph */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="11271">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_12 Contributors of this page]

=Page Rank - How does Google Work=
One web page is having link to other page, that is a page is referring to other page. Google uses ''Page Rank'' algorithm to choose which page should be displayed first.

If we have network, connections as below:
[[File:rank0.png]]

We want to pick a leader out of all these nodes. How to pick a leader?  Why to elect a leader? It is because we want to find the super power of available nodes.                     
[[File:rank1.png]]

For example, the application wherein, we want to find the most impressive person of the  few ones. How to decide it? As shown in below figure, each node will communicate with other, randomly, we implement the count for each node, how many times, the particular node is being visited.
[[File:rank2.png]]

[[#Top]]

As shown in following, figure, all nodes are visited and each node is marked with the 
number i.e.number of times the node is visited.
[[File:rank3.png]]

The node with the maximum count, becomes the winner. Here, node with 120 count in figure 
below, is the winner. i.e. The person with 120 count in the figure is the most impressive 
person in the community being considered.
[[File:rank4.png]]

[[File:rank5.png]]

[[File:rank6.png]]

[[File:rank7.png]]


[[File:rank8.png]]

[[#Top]]

Google selects the page rank in this matter. Each web page is connected to other web page with web links. To a page, maximum link is there, that will be put on top results in Google search results.
[[File:rank9.png]]

Google uses web crawler. The crawler takes the random walk on the www network and rank the web sites.
[[File:rank10.png]]

This way Google ranks the pages and displays search results, according to page rank.
[[File:rank11.png]]

e.g.we search for ''mysore city''. Google has 10,000 results. But it displays the results in the sequence of page rank of search results, As shown in figure below.
[[File:mysore.png]]

[[#Top]]

==Page rank algorithm ==
As shown in beautiful figure below, few nodes combinely selected one as the leader, then that leader and other nodes, have selected         other as a leader. This way, finally the final leader is elected.
[[File:rank12.png|600px]]


[[File:graph00.png|600px]]

[[File:graph01.png|600px]]

==Gragh Drawing Program1==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
nx.barbell_graph(4,2)
G=nx.barbell_graph(4,2)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:Graph003.png|600px]]

==Gragh Drawing Program2==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
nx.barbell_graph(4,3)
G=nx.barbell_graph(4,3)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:Graph004.png|600px]]

==Gragh Drawing Program3==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
nx.barbell_graph(5,3)
G=nx.barbell_graph(5,3)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:Graph005.png|600px]]

==Complete Graph==
Complete graph is a graph, wherein, each node is connected to each other nodes in a graph.

&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.complete_graph(4)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:

[[File:completegraph001.png|600px]]

==Cycle graph==

&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.cycle_graph(5)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:

[[File:cyclegraph1.png|600px]]

==Ladder graph==

&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.ladder_graph(5)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:

[[File:laddergraph.png|600px]]

==Path Graph==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.path_graph(6)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:

[[File:pathgraph.png|600px]]

==Star Graph==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.star_graph(5)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:stargraph.png|600px]]

[[#Top]]

==Star Graph of 4 Nodes==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.star_graph(4)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:stargraph4points.png|600px]]

==Wheel Graph==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.wheel_graph(4)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:wheelgraph.png|600px]]

[[#Top]]

==Wheel Graph of 5 nodes==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.wheel_graph(5)
nx.draw(G)
plt.show()

&lt;/pre&gt;

Output:

[[File:wheelgraph5nodes.png|600px]]

[[#Top]]

==Wheel Graph of 6 nodes==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.wheel_graph(6)
nx.draw(G)
plt.show()

&lt;/pre&gt;

Output:

[[File:wheelgraph6nodes.png|600px]]

[[#Top]]

==Random Graph==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.gnp_random_graph(5,0.5)
nx.draw(G)
plt.show()

&lt;/pre&gt;

Output:

[[File:randomgraph1.png|600px]]


Running the same above program, we will get different output, as shown below, as it is random graph.

[[File:randomgraph2.png|600px]]

[[#Top]]

==Page Rank Algorithm Implementation==

===Random Directed Graph===
&lt;pre&gt;
import networkx as nx
import random
import matplotlib.pyplot as plt

#Draw random directed graph
G=nx.gnp_random_graph(10,0.5,directed=True)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output: 

[[File:randomDirectedGraph.png|600px]]


===Random Directed Graph with Labels===
&lt;pre&gt;
import networkx as nx
import random
import matplotlib.pyplot as plt

#Draw random directed graph 
G=nx.gnp_random_graph(10,0.5,directed=True)
#Give label numbering to nodes
nx.draw(G,with_labels=True)
plt.show()

&lt;/pre&gt;

Output:

[[File:randomDirectedGraphwithLabels.png|600px]]


[[#Top]]

===Page Rank Coding===
&lt;pre&gt;
import networkx as nx
import random
import matplotlib.pyplot as plt
import operator

#Draw random directed graph 
G=nx.gnp_random_graph(10,0.5,directed=True)
#Give label numbering to nodes
nx.draw(G,with_labels=True)
plt.show()

#x is the random source node
x=random.choice([i for i in range(G.number_of_nodes())])

#dictionary to maintain counter
dictCounter={}
#initialize the counter of each node as 0
for i in range(G.number_of_nodes()):
    dictCounter[i]=0
dictCounter[x]=dictCounter[x]+1

for i in range(10000):
    listn=list(G.neighbors(x))
    #if x is a sink node, we need to select random node for random walk
    #, else select random neighbor node

    if(len(listn)==0):
        x=random.choice([i for i in range(G.number_of_nodes())])
        dictCounter[x]=dictCounter[x]+1
    else:
        #choose a node randomly from neightbors
        x=random.choice(listn)
        dictCounter[x]=dictCounter[x]+1

p=nx.pagerank(G)
sorted_p=sorted(p.items(),key=operator.itemgetter(1))
sorted_rw=sorted(dictCounter.items(),key=operator.itemgetter(1))                        
#print(p)
#print(dictCounter)

print(sorted_p)
print(sorted_rw)

&lt;/pre&gt;

Output:

&lt;pre&gt;
[(2, 0.07139920240302768), (5, 0.07464882519777695), (3, 0.08527469366832419), 
(6, 0.08665188647066119), (4, 0.0987815549542114), (0, 0.10858415997562518), 
(9, 0.110369696943925), (8, 0.11456211367660116), (1, 0.11682018308814024), 
(7, 0.13290768362170685)]
[(2, 4), (5, 7), (8, 7), (6, 8), (3, 11), (7, 11), (1, 12), (4, 12), (0, 13), (9, 16)]
&lt;/pre&gt;

[[#Top]]

=Email communication Network=

=Collatz Conjecture=
Taught by Sudarshan sir and Amit sir, and Edited by Ms. Ami Tusharkant Choksi

If a number is even, divide it by ''2'', if it is odd, make multiply it by ''3'' and add ''1'', till you get ''1''. This simple problem is called, ''Collatz Conjecture''. 

[[File:collatz1.png|600px]]

[[File:collatz2.png|600px]]

[[File:collatz3.png|600px]]

[[File:collatz4.png|600px]]

[[File:collatz5.png|600px]]

Number is bigger doesn't mean more iterations are required. One can notice, from the output of the following program. 



The program to implement the same is as follows:
==Program==
&lt;pre&gt;
#collatz conjecture
#if num is even, divide it by 2
#if num is odd, new number is equal to 3n+1


def checkNum(num):
    iterations=1
    while(num!=1):
        if(num%2==0):
            num=int(num/2)            
        else:
            num = 3*num+1
        iterations+=1
        

    print(num,iterations)


#checkNum(12)#Output: 1 10
#checkNum(26)#Output: 1 11
checkNum(2000)#Output: 1 113
&lt;/pre&gt;

&lt;pre&gt;

#recursive approach

def checkNum(num):
    if num==1:
        return 1
    elif num%2==0:
        return checkNum(num/2)+1
    else:
        return checkNum(3*num +1)+1


output:
checkNum(26)
Out[27]: 11
checkNum(5000)
Out[28]: 29
&lt;/pre&gt;

==Program adding statement to print all iterations==
&lt;pre&gt;
def checkNum(num):
    iterations=1
    while(num!=1):
        if(num%2==0):
            num=int(num/2)            
        else:
            num = 3*num+1
        print(iterations,&quot;:&quot;,num)
        iterations+=1
        

    print(num,iterations)
&lt;/pre&gt;
==Output==
===For checkNum(2000)===
&lt;pre&gt;
1 : 1000
2 : 500
3 : 250
4 : 125
5 : 376
6 : 188
7 : 94
8 : 47
9 : 142
10 : 71
11 : 214
12 : 107
13 : 322
14 : 161
15 : 484
16 : 242
17 : 121
18 : 364
19 : 182
20 : 91
21 : 274
22 : 137
23 : 412
24 : 206
25 : 103
26 : 310
27 : 155
28 : 466
29 : 233
30 : 700
31 : 350
32 : 175
33 : 526
34 : 263
35 : 790
36 : 395
37 : 1186
38 : 593
39 : 1780
40 : 890
41 : 445
42 : 1336
43 : 668
44 : 334
45 : 167
46 : 502
47 : 251
48 : 754
49 : 377
50 : 1132
51 : 566
52 : 283
53 : 850
54 : 425
55 : 1276
56 : 638
57 : 319
58 : 958
59 : 479
60 : 1438
61 : 719
62 : 2158
63 : 1079
64 : 3238
65 : 1619
66 : 4858
67 : 2429
68 : 7288
69 : 3644
70 : 1822
71 : 911
72 : 2734
73 : 1367
74 : 4102
75 : 2051
76 : 6154
77 : 3077
78 : 9232
79 : 4616
80 : 2308
81 : 1154
82 : 577
83 : 1732
84 : 866
85 : 433
86 : 1300
87 : 650
88 : 325
89 : 976
90 : 488
91 : 244
92 : 122
93 : 61
94 : 184
95 : 92
96 : 46
97 : 23
98 : 70
99 : 35
100 : 106
101 : 53
102 : 160
103 : 80
104 : 40
105 : 20
106 : 10
107 : 5
108 : 16
109 : 8
110 : 4
111 : 2
112 : 1
1 113
&lt;/pre&gt;

===For checkNum(5000)===
&lt;pre&gt;
1 : 2500
2 : 1250
3 : 625
4 : 1876
5 : 938
6 : 469
7 : 1408
8 : 704
9 : 352
10 : 176
11 : 88
12 : 44
13 : 22
14 : 11
15 : 34
16 : 17
17 : 52
18 : 26
19 : 13
20 : 40
21 : 20
22 : 10
23 : 5
24 : 16
25 : 8
26 : 4
27 : 2
28 : 1
1 29
&lt;/pre&gt;
===For checkNum(25000000)===
&lt;pre&gt;
1 : 12500000
2 : 6250000
3 : 3125000
4 : 1562500
5 : 781250
6 : 390625
7 : 1171876
8 : 585938
9 : 292969
10 : 878908
11 : 439454
12 : 219727
13 : 659182
14 : 329591
15 : 988774
16 : 494387
17 : 1483162
18 : 741581
19 : 2224744
20 : 1112372
21 : 556186
22 : 278093
23 : 834280
24 : 417140
25 : 208570
26 : 104285
27 : 312856
28 : 156428
29 : 78214
30 : 39107
31 : 117322
32 : 58661
33 : 175984
34 : 87992
35 : 43996
36 : 21998
37 : 10999
38 : 32998
39 : 16499
40 : 49498
41 : 24749
42 : 74248
43 : 37124
44 : 18562
45 : 9281
46 : 27844
47 : 13922
48 : 6961
49 : 20884
50 : 10442
51 : 5221
52 : 15664
53 : 7832
54 : 3916
55 : 1958
56 : 979
57 : 2938
58 : 1469
59 : 4408
60 : 2204
61 : 1102
62 : 551
63 : 1654
64 : 827
65 : 2482
66 : 1241
67 : 3724
68 : 1862
69 : 931
70 : 2794
71 : 1397
72 : 4192
73 : 2096
74 : 1048
75 : 524
76 : 262
77 : 131
78 : 394
79 : 197
80 : 592
81 : 296
82 : 148
83 : 74
84 : 37
85 : 112
86 : 56
87 : 28
88 : 14
89 : 7
90 : 22
91 : 11
92 : 34
93 : 17
94 : 52
95 : 26
96 : 13
97 : 40
98 : 20
99 : 10
100 : 5
101 : 16
102 : 8
103 : 4
104 : 2
105 : 1
1 106
&lt;/pre&gt;

Happy Life ahead!!!

[[File:end1.png]]</text>
      <sha1>lbo4ps55i54vuui3nyqrytr2fykdy4z</sha1>
    </revision>
    <revision>
      <id>4444</id>
      <parentid>4443</parentid>
      <timestamp>2018-10-17T05:11:48Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* Path Graph */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="11281">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_12 Contributors of this page]

=Page Rank - How does Google Work=
One web page is having link to other page, that is a page is referring to other page. Google uses ''Page Rank'' algorithm to choose which page should be displayed first.

If we have network, connections as below:
[[File:rank0.png]]

We want to pick a leader out of all these nodes. How to pick a leader?  Why to elect a leader? It is because we want to find the super power of available nodes.                     
[[File:rank1.png]]

For example, the application wherein, we want to find the most impressive person of the  few ones. How to decide it? As shown in below figure, each node will communicate with other, randomly, we implement the count for each node, how many times, the particular node is being visited.
[[File:rank2.png]]

[[#Top]]

As shown in following, figure, all nodes are visited and each node is marked with the 
number i.e.number of times the node is visited.
[[File:rank3.png]]

The node with the maximum count, becomes the winner. Here, node with 120 count in figure 
below, is the winner. i.e. The person with 120 count in the figure is the most impressive 
person in the community being considered.
[[File:rank4.png]]

[[File:rank5.png]]

[[File:rank6.png]]

[[File:rank7.png]]


[[File:rank8.png]]

[[#Top]]

Google selects the page rank in this matter. Each web page is connected to other web page with web links. To a page, maximum link is there, that will be put on top results in Google search results.
[[File:rank9.png]]

Google uses web crawler. The crawler takes the random walk on the www network and rank the web sites.
[[File:rank10.png]]

This way Google ranks the pages and displays search results, according to page rank.
[[File:rank11.png]]

e.g.we search for ''mysore city''. Google has 10,000 results. But it displays the results in the sequence of page rank of search results, As shown in figure below.
[[File:mysore.png]]

[[#Top]]

==Page rank algorithm ==
As shown in beautiful figure below, few nodes combinely selected one as the leader, then that leader and other nodes, have selected         other as a leader. This way, finally the final leader is elected.
[[File:rank12.png|600px]]


[[File:graph00.png|600px]]

[[File:graph01.png|600px]]

==Gragh Drawing Program1==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
nx.barbell_graph(4,2)
G=nx.barbell_graph(4,2)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:Graph003.png|600px]]

==Gragh Drawing Program2==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
nx.barbell_graph(4,3)
G=nx.barbell_graph(4,3)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:Graph004.png|600px]]

==Gragh Drawing Program3==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
nx.barbell_graph(5,3)
G=nx.barbell_graph(5,3)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:Graph005.png|600px]]

==Complete Graph==
Complete graph is a graph, wherein, each node is connected to each other nodes in a graph.

&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.complete_graph(4)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:

[[File:completegraph001.png|600px]]

==Cycle graph==

&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.cycle_graph(5)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:

[[File:cyclegraph1.png|600px]]

==Ladder graph==

&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.ladder_graph(5)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:

[[File:laddergraph.png|600px]]

==Path Graph==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.path_graph(6)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:

[[File:pathgraph.png|600px]]

[[#Top]]

==Star Graph==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.star_graph(5)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:stargraph.png|600px]]

[[#Top]]

==Star Graph of 4 Nodes==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.star_graph(4)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:stargraph4points.png|600px]]

==Wheel Graph==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.wheel_graph(4)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:wheelgraph.png|600px]]

[[#Top]]

==Wheel Graph of 5 nodes==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.wheel_graph(5)
nx.draw(G)
plt.show()

&lt;/pre&gt;

Output:

[[File:wheelgraph5nodes.png|600px]]

[[#Top]]

==Wheel Graph of 6 nodes==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.wheel_graph(6)
nx.draw(G)
plt.show()

&lt;/pre&gt;

Output:

[[File:wheelgraph6nodes.png|600px]]

[[#Top]]

==Random Graph==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.gnp_random_graph(5,0.5)
nx.draw(G)
plt.show()

&lt;/pre&gt;

Output:

[[File:randomgraph1.png|600px]]


Running the same above program, we will get different output, as shown below, as it is random graph.

[[File:randomgraph2.png|600px]]

[[#Top]]

==Page Rank Algorithm Implementation==

===Random Directed Graph===
&lt;pre&gt;
import networkx as nx
import random
import matplotlib.pyplot as plt

#Draw random directed graph
G=nx.gnp_random_graph(10,0.5,directed=True)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output: 

[[File:randomDirectedGraph.png|600px]]


===Random Directed Graph with Labels===
&lt;pre&gt;
import networkx as nx
import random
import matplotlib.pyplot as plt

#Draw random directed graph 
G=nx.gnp_random_graph(10,0.5,directed=True)
#Give label numbering to nodes
nx.draw(G,with_labels=True)
plt.show()

&lt;/pre&gt;

Output:

[[File:randomDirectedGraphwithLabels.png|600px]]


[[#Top]]

===Page Rank Coding===
&lt;pre&gt;
import networkx as nx
import random
import matplotlib.pyplot as plt
import operator

#Draw random directed graph 
G=nx.gnp_random_graph(10,0.5,directed=True)
#Give label numbering to nodes
nx.draw(G,with_labels=True)
plt.show()

#x is the random source node
x=random.choice([i for i in range(G.number_of_nodes())])

#dictionary to maintain counter
dictCounter={}
#initialize the counter of each node as 0
for i in range(G.number_of_nodes()):
    dictCounter[i]=0
dictCounter[x]=dictCounter[x]+1

for i in range(10000):
    listn=list(G.neighbors(x))
    #if x is a sink node, we need to select random node for random walk
    #, else select random neighbor node

    if(len(listn)==0):
        x=random.choice([i for i in range(G.number_of_nodes())])
        dictCounter[x]=dictCounter[x]+1
    else:
        #choose a node randomly from neightbors
        x=random.choice(listn)
        dictCounter[x]=dictCounter[x]+1

p=nx.pagerank(G)
sorted_p=sorted(p.items(),key=operator.itemgetter(1))
sorted_rw=sorted(dictCounter.items(),key=operator.itemgetter(1))                        
#print(p)
#print(dictCounter)

print(sorted_p)
print(sorted_rw)

&lt;/pre&gt;

Output:

&lt;pre&gt;
[(2, 0.07139920240302768), (5, 0.07464882519777695), (3, 0.08527469366832419), 
(6, 0.08665188647066119), (4, 0.0987815549542114), (0, 0.10858415997562518), 
(9, 0.110369696943925), (8, 0.11456211367660116), (1, 0.11682018308814024), 
(7, 0.13290768362170685)]
[(2, 4), (5, 7), (8, 7), (6, 8), (3, 11), (7, 11), (1, 12), (4, 12), (0, 13), (9, 16)]
&lt;/pre&gt;

[[#Top]]

=Email communication Network=

=Collatz Conjecture=
Taught by Sudarshan sir and Amit sir, and Edited by Ms. Ami Tusharkant Choksi

If a number is even, divide it by ''2'', if it is odd, make multiply it by ''3'' and add ''1'', till you get ''1''. This simple problem is called, ''Collatz Conjecture''. 

[[File:collatz1.png|600px]]

[[File:collatz2.png|600px]]

[[File:collatz3.png|600px]]

[[File:collatz4.png|600px]]

[[File:collatz5.png|600px]]

Number is bigger doesn't mean more iterations are required. One can notice, from the output of the following program. 



The program to implement the same is as follows:
==Program==
&lt;pre&gt;
#collatz conjecture
#if num is even, divide it by 2
#if num is odd, new number is equal to 3n+1


def checkNum(num):
    iterations=1
    while(num!=1):
        if(num%2==0):
            num=int(num/2)            
        else:
            num = 3*num+1
        iterations+=1
        

    print(num,iterations)


#checkNum(12)#Output: 1 10
#checkNum(26)#Output: 1 11
checkNum(2000)#Output: 1 113
&lt;/pre&gt;

&lt;pre&gt;

#recursive approach

def checkNum(num):
    if num==1:
        return 1
    elif num%2==0:
        return checkNum(num/2)+1
    else:
        return checkNum(3*num +1)+1


output:
checkNum(26)
Out[27]: 11
checkNum(5000)
Out[28]: 29
&lt;/pre&gt;

==Program adding statement to print all iterations==
&lt;pre&gt;
def checkNum(num):
    iterations=1
    while(num!=1):
        if(num%2==0):
            num=int(num/2)            
        else:
            num = 3*num+1
        print(iterations,&quot;:&quot;,num)
        iterations+=1
        

    print(num,iterations)
&lt;/pre&gt;
==Output==
===For checkNum(2000)===
&lt;pre&gt;
1 : 1000
2 : 500
3 : 250
4 : 125
5 : 376
6 : 188
7 : 94
8 : 47
9 : 142
10 : 71
11 : 214
12 : 107
13 : 322
14 : 161
15 : 484
16 : 242
17 : 121
18 : 364
19 : 182
20 : 91
21 : 274
22 : 137
23 : 412
24 : 206
25 : 103
26 : 310
27 : 155
28 : 466
29 : 233
30 : 700
31 : 350
32 : 175
33 : 526
34 : 263
35 : 790
36 : 395
37 : 1186
38 : 593
39 : 1780
40 : 890
41 : 445
42 : 1336
43 : 668
44 : 334
45 : 167
46 : 502
47 : 251
48 : 754
49 : 377
50 : 1132
51 : 566
52 : 283
53 : 850
54 : 425
55 : 1276
56 : 638
57 : 319
58 : 958
59 : 479
60 : 1438
61 : 719
62 : 2158
63 : 1079
64 : 3238
65 : 1619
66 : 4858
67 : 2429
68 : 7288
69 : 3644
70 : 1822
71 : 911
72 : 2734
73 : 1367
74 : 4102
75 : 2051
76 : 6154
77 : 3077
78 : 9232
79 : 4616
80 : 2308
81 : 1154
82 : 577
83 : 1732
84 : 866
85 : 433
86 : 1300
87 : 650
88 : 325
89 : 976
90 : 488
91 : 244
92 : 122
93 : 61
94 : 184
95 : 92
96 : 46
97 : 23
98 : 70
99 : 35
100 : 106
101 : 53
102 : 160
103 : 80
104 : 40
105 : 20
106 : 10
107 : 5
108 : 16
109 : 8
110 : 4
111 : 2
112 : 1
1 113
&lt;/pre&gt;

===For checkNum(5000)===
&lt;pre&gt;
1 : 2500
2 : 1250
3 : 625
4 : 1876
5 : 938
6 : 469
7 : 1408
8 : 704
9 : 352
10 : 176
11 : 88
12 : 44
13 : 22
14 : 11
15 : 34
16 : 17
17 : 52
18 : 26
19 : 13
20 : 40
21 : 20
22 : 10
23 : 5
24 : 16
25 : 8
26 : 4
27 : 2
28 : 1
1 29
&lt;/pre&gt;
===For checkNum(25000000)===
&lt;pre&gt;
1 : 12500000
2 : 6250000
3 : 3125000
4 : 1562500
5 : 781250
6 : 390625
7 : 1171876
8 : 585938
9 : 292969
10 : 878908
11 : 439454
12 : 219727
13 : 659182
14 : 329591
15 : 988774
16 : 494387
17 : 1483162
18 : 741581
19 : 2224744
20 : 1112372
21 : 556186
22 : 278093
23 : 834280
24 : 417140
25 : 208570
26 : 104285
27 : 312856
28 : 156428
29 : 78214
30 : 39107
31 : 117322
32 : 58661
33 : 175984
34 : 87992
35 : 43996
36 : 21998
37 : 10999
38 : 32998
39 : 16499
40 : 49498
41 : 24749
42 : 74248
43 : 37124
44 : 18562
45 : 9281
46 : 27844
47 : 13922
48 : 6961
49 : 20884
50 : 10442
51 : 5221
52 : 15664
53 : 7832
54 : 3916
55 : 1958
56 : 979
57 : 2938
58 : 1469
59 : 4408
60 : 2204
61 : 1102
62 : 551
63 : 1654
64 : 827
65 : 2482
66 : 1241
67 : 3724
68 : 1862
69 : 931
70 : 2794
71 : 1397
72 : 4192
73 : 2096
74 : 1048
75 : 524
76 : 262
77 : 131
78 : 394
79 : 197
80 : 592
81 : 296
82 : 148
83 : 74
84 : 37
85 : 112
86 : 56
87 : 28
88 : 14
89 : 7
90 : 22
91 : 11
92 : 34
93 : 17
94 : 52
95 : 26
96 : 13
97 : 40
98 : 20
99 : 10
100 : 5
101 : 16
102 : 8
103 : 4
104 : 2
105 : 1
1 106
&lt;/pre&gt;

Happy Life ahead!!!

[[File:end1.png]]</text>
      <sha1>577nj2m4hz18zocm9ieug8kelw9axfu</sha1>
    </revision>
    <revision>
      <id>4445</id>
      <parentid>4444</parentid>
      <timestamp>2018-10-17T05:12:01Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* Ladder graph */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="11291">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_12 Contributors of this page]

=Page Rank - How does Google Work=
One web page is having link to other page, that is a page is referring to other page. Google uses ''Page Rank'' algorithm to choose which page should be displayed first.

If we have network, connections as below:
[[File:rank0.png]]

We want to pick a leader out of all these nodes. How to pick a leader?  Why to elect a leader? It is because we want to find the super power of available nodes.                     
[[File:rank1.png]]

For example, the application wherein, we want to find the most impressive person of the  few ones. How to decide it? As shown in below figure, each node will communicate with other, randomly, we implement the count for each node, how many times, the particular node is being visited.
[[File:rank2.png]]

[[#Top]]

As shown in following, figure, all nodes are visited and each node is marked with the 
number i.e.number of times the node is visited.
[[File:rank3.png]]

The node with the maximum count, becomes the winner. Here, node with 120 count in figure 
below, is the winner. i.e. The person with 120 count in the figure is the most impressive 
person in the community being considered.
[[File:rank4.png]]

[[File:rank5.png]]

[[File:rank6.png]]

[[File:rank7.png]]


[[File:rank8.png]]

[[#Top]]

Google selects the page rank in this matter. Each web page is connected to other web page with web links. To a page, maximum link is there, that will be put on top results in Google search results.
[[File:rank9.png]]

Google uses web crawler. The crawler takes the random walk on the www network and rank the web sites.
[[File:rank10.png]]

This way Google ranks the pages and displays search results, according to page rank.
[[File:rank11.png]]

e.g.we search for ''mysore city''. Google has 10,000 results. But it displays the results in the sequence of page rank of search results, As shown in figure below.
[[File:mysore.png]]

[[#Top]]

==Page rank algorithm ==
As shown in beautiful figure below, few nodes combinely selected one as the leader, then that leader and other nodes, have selected         other as a leader. This way, finally the final leader is elected.
[[File:rank12.png|600px]]


[[File:graph00.png|600px]]

[[File:graph01.png|600px]]

==Gragh Drawing Program1==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
nx.barbell_graph(4,2)
G=nx.barbell_graph(4,2)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:Graph003.png|600px]]

==Gragh Drawing Program2==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
nx.barbell_graph(4,3)
G=nx.barbell_graph(4,3)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:Graph004.png|600px]]

==Gragh Drawing Program3==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
nx.barbell_graph(5,3)
G=nx.barbell_graph(5,3)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:Graph005.png|600px]]

==Complete Graph==
Complete graph is a graph, wherein, each node is connected to each other nodes in a graph.

&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.complete_graph(4)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:

[[File:completegraph001.png|600px]]

==Cycle graph==

&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.cycle_graph(5)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:

[[File:cyclegraph1.png|600px]]

==Ladder graph==

&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.ladder_graph(5)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:

[[File:laddergraph.png|600px]]

[[#Top]]

==Path Graph==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.path_graph(6)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:

[[File:pathgraph.png|600px]]

[[#Top]]

==Star Graph==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.star_graph(5)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:stargraph.png|600px]]

[[#Top]]

==Star Graph of 4 Nodes==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.star_graph(4)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:stargraph4points.png|600px]]

==Wheel Graph==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.wheel_graph(4)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:wheelgraph.png|600px]]

[[#Top]]

==Wheel Graph of 5 nodes==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.wheel_graph(5)
nx.draw(G)
plt.show()

&lt;/pre&gt;

Output:

[[File:wheelgraph5nodes.png|600px]]

[[#Top]]

==Wheel Graph of 6 nodes==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.wheel_graph(6)
nx.draw(G)
plt.show()

&lt;/pre&gt;

Output:

[[File:wheelgraph6nodes.png|600px]]

[[#Top]]

==Random Graph==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.gnp_random_graph(5,0.5)
nx.draw(G)
plt.show()

&lt;/pre&gt;

Output:

[[File:randomgraph1.png|600px]]


Running the same above program, we will get different output, as shown below, as it is random graph.

[[File:randomgraph2.png|600px]]

[[#Top]]

==Page Rank Algorithm Implementation==

===Random Directed Graph===
&lt;pre&gt;
import networkx as nx
import random
import matplotlib.pyplot as plt

#Draw random directed graph
G=nx.gnp_random_graph(10,0.5,directed=True)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output: 

[[File:randomDirectedGraph.png|600px]]


===Random Directed Graph with Labels===
&lt;pre&gt;
import networkx as nx
import random
import matplotlib.pyplot as plt

#Draw random directed graph 
G=nx.gnp_random_graph(10,0.5,directed=True)
#Give label numbering to nodes
nx.draw(G,with_labels=True)
plt.show()

&lt;/pre&gt;

Output:

[[File:randomDirectedGraphwithLabels.png|600px]]


[[#Top]]

===Page Rank Coding===
&lt;pre&gt;
import networkx as nx
import random
import matplotlib.pyplot as plt
import operator

#Draw random directed graph 
G=nx.gnp_random_graph(10,0.5,directed=True)
#Give label numbering to nodes
nx.draw(G,with_labels=True)
plt.show()

#x is the random source node
x=random.choice([i for i in range(G.number_of_nodes())])

#dictionary to maintain counter
dictCounter={}
#initialize the counter of each node as 0
for i in range(G.number_of_nodes()):
    dictCounter[i]=0
dictCounter[x]=dictCounter[x]+1

for i in range(10000):
    listn=list(G.neighbors(x))
    #if x is a sink node, we need to select random node for random walk
    #, else select random neighbor node

    if(len(listn)==0):
        x=random.choice([i for i in range(G.number_of_nodes())])
        dictCounter[x]=dictCounter[x]+1
    else:
        #choose a node randomly from neightbors
        x=random.choice(listn)
        dictCounter[x]=dictCounter[x]+1

p=nx.pagerank(G)
sorted_p=sorted(p.items(),key=operator.itemgetter(1))
sorted_rw=sorted(dictCounter.items(),key=operator.itemgetter(1))                        
#print(p)
#print(dictCounter)

print(sorted_p)
print(sorted_rw)

&lt;/pre&gt;

Output:

&lt;pre&gt;
[(2, 0.07139920240302768), (5, 0.07464882519777695), (3, 0.08527469366832419), 
(6, 0.08665188647066119), (4, 0.0987815549542114), (0, 0.10858415997562518), 
(9, 0.110369696943925), (8, 0.11456211367660116), (1, 0.11682018308814024), 
(7, 0.13290768362170685)]
[(2, 4), (5, 7), (8, 7), (6, 8), (3, 11), (7, 11), (1, 12), (4, 12), (0, 13), (9, 16)]
&lt;/pre&gt;

[[#Top]]

=Email communication Network=

=Collatz Conjecture=
Taught by Sudarshan sir and Amit sir, and Edited by Ms. Ami Tusharkant Choksi

If a number is even, divide it by ''2'', if it is odd, make multiply it by ''3'' and add ''1'', till you get ''1''. This simple problem is called, ''Collatz Conjecture''. 

[[File:collatz1.png|600px]]

[[File:collatz2.png|600px]]

[[File:collatz3.png|600px]]

[[File:collatz4.png|600px]]

[[File:collatz5.png|600px]]

Number is bigger doesn't mean more iterations are required. One can notice, from the output of the following program. 



The program to implement the same is as follows:
==Program==
&lt;pre&gt;
#collatz conjecture
#if num is even, divide it by 2
#if num is odd, new number is equal to 3n+1


def checkNum(num):
    iterations=1
    while(num!=1):
        if(num%2==0):
            num=int(num/2)            
        else:
            num = 3*num+1
        iterations+=1
        

    print(num,iterations)


#checkNum(12)#Output: 1 10
#checkNum(26)#Output: 1 11
checkNum(2000)#Output: 1 113
&lt;/pre&gt;

&lt;pre&gt;

#recursive approach

def checkNum(num):
    if num==1:
        return 1
    elif num%2==0:
        return checkNum(num/2)+1
    else:
        return checkNum(3*num +1)+1


output:
checkNum(26)
Out[27]: 11
checkNum(5000)
Out[28]: 29
&lt;/pre&gt;

==Program adding statement to print all iterations==
&lt;pre&gt;
def checkNum(num):
    iterations=1
    while(num!=1):
        if(num%2==0):
            num=int(num/2)            
        else:
            num = 3*num+1
        print(iterations,&quot;:&quot;,num)
        iterations+=1
        

    print(num,iterations)
&lt;/pre&gt;
==Output==
===For checkNum(2000)===
&lt;pre&gt;
1 : 1000
2 : 500
3 : 250
4 : 125
5 : 376
6 : 188
7 : 94
8 : 47
9 : 142
10 : 71
11 : 214
12 : 107
13 : 322
14 : 161
15 : 484
16 : 242
17 : 121
18 : 364
19 : 182
20 : 91
21 : 274
22 : 137
23 : 412
24 : 206
25 : 103
26 : 310
27 : 155
28 : 466
29 : 233
30 : 700
31 : 350
32 : 175
33 : 526
34 : 263
35 : 790
36 : 395
37 : 1186
38 : 593
39 : 1780
40 : 890
41 : 445
42 : 1336
43 : 668
44 : 334
45 : 167
46 : 502
47 : 251
48 : 754
49 : 377
50 : 1132
51 : 566
52 : 283
53 : 850
54 : 425
55 : 1276
56 : 638
57 : 319
58 : 958
59 : 479
60 : 1438
61 : 719
62 : 2158
63 : 1079
64 : 3238
65 : 1619
66 : 4858
67 : 2429
68 : 7288
69 : 3644
70 : 1822
71 : 911
72 : 2734
73 : 1367
74 : 4102
75 : 2051
76 : 6154
77 : 3077
78 : 9232
79 : 4616
80 : 2308
81 : 1154
82 : 577
83 : 1732
84 : 866
85 : 433
86 : 1300
87 : 650
88 : 325
89 : 976
90 : 488
91 : 244
92 : 122
93 : 61
94 : 184
95 : 92
96 : 46
97 : 23
98 : 70
99 : 35
100 : 106
101 : 53
102 : 160
103 : 80
104 : 40
105 : 20
106 : 10
107 : 5
108 : 16
109 : 8
110 : 4
111 : 2
112 : 1
1 113
&lt;/pre&gt;

===For checkNum(5000)===
&lt;pre&gt;
1 : 2500
2 : 1250
3 : 625
4 : 1876
5 : 938
6 : 469
7 : 1408
8 : 704
9 : 352
10 : 176
11 : 88
12 : 44
13 : 22
14 : 11
15 : 34
16 : 17
17 : 52
18 : 26
19 : 13
20 : 40
21 : 20
22 : 10
23 : 5
24 : 16
25 : 8
26 : 4
27 : 2
28 : 1
1 29
&lt;/pre&gt;
===For checkNum(25000000)===
&lt;pre&gt;
1 : 12500000
2 : 6250000
3 : 3125000
4 : 1562500
5 : 781250
6 : 390625
7 : 1171876
8 : 585938
9 : 292969
10 : 878908
11 : 439454
12 : 219727
13 : 659182
14 : 329591
15 : 988774
16 : 494387
17 : 1483162
18 : 741581
19 : 2224744
20 : 1112372
21 : 556186
22 : 278093
23 : 834280
24 : 417140
25 : 208570
26 : 104285
27 : 312856
28 : 156428
29 : 78214
30 : 39107
31 : 117322
32 : 58661
33 : 175984
34 : 87992
35 : 43996
36 : 21998
37 : 10999
38 : 32998
39 : 16499
40 : 49498
41 : 24749
42 : 74248
43 : 37124
44 : 18562
45 : 9281
46 : 27844
47 : 13922
48 : 6961
49 : 20884
50 : 10442
51 : 5221
52 : 15664
53 : 7832
54 : 3916
55 : 1958
56 : 979
57 : 2938
58 : 1469
59 : 4408
60 : 2204
61 : 1102
62 : 551
63 : 1654
64 : 827
65 : 2482
66 : 1241
67 : 3724
68 : 1862
69 : 931
70 : 2794
71 : 1397
72 : 4192
73 : 2096
74 : 1048
75 : 524
76 : 262
77 : 131
78 : 394
79 : 197
80 : 592
81 : 296
82 : 148
83 : 74
84 : 37
85 : 112
86 : 56
87 : 28
88 : 14
89 : 7
90 : 22
91 : 11
92 : 34
93 : 17
94 : 52
95 : 26
96 : 13
97 : 40
98 : 20
99 : 10
100 : 5
101 : 16
102 : 8
103 : 4
104 : 2
105 : 1
1 106
&lt;/pre&gt;

Happy Life ahead!!!

[[File:end1.png]]</text>
      <sha1>7qz7w5suaptzx1uvtorvl4rlc494s6t</sha1>
    </revision>
    <revision>
      <id>4446</id>
      <parentid>4445</parentid>
      <timestamp>2018-10-17T05:12:13Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* Cycle graph */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="11301">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_12 Contributors of this page]

=Page Rank - How does Google Work=
One web page is having link to other page, that is a page is referring to other page. Google uses ''Page Rank'' algorithm to choose which page should be displayed first.

If we have network, connections as below:
[[File:rank0.png]]

We want to pick a leader out of all these nodes. How to pick a leader?  Why to elect a leader? It is because we want to find the super power of available nodes.                     
[[File:rank1.png]]

For example, the application wherein, we want to find the most impressive person of the  few ones. How to decide it? As shown in below figure, each node will communicate with other, randomly, we implement the count for each node, how many times, the particular node is being visited.
[[File:rank2.png]]

[[#Top]]

As shown in following, figure, all nodes are visited and each node is marked with the 
number i.e.number of times the node is visited.
[[File:rank3.png]]

The node with the maximum count, becomes the winner. Here, node with 120 count in figure 
below, is the winner. i.e. The person with 120 count in the figure is the most impressive 
person in the community being considered.
[[File:rank4.png]]

[[File:rank5.png]]

[[File:rank6.png]]

[[File:rank7.png]]


[[File:rank8.png]]

[[#Top]]

Google selects the page rank in this matter. Each web page is connected to other web page with web links. To a page, maximum link is there, that will be put on top results in Google search results.
[[File:rank9.png]]

Google uses web crawler. The crawler takes the random walk on the www network and rank the web sites.
[[File:rank10.png]]

This way Google ranks the pages and displays search results, according to page rank.
[[File:rank11.png]]

e.g.we search for ''mysore city''. Google has 10,000 results. But it displays the results in the sequence of page rank of search results, As shown in figure below.
[[File:mysore.png]]

[[#Top]]

==Page rank algorithm ==
As shown in beautiful figure below, few nodes combinely selected one as the leader, then that leader and other nodes, have selected         other as a leader. This way, finally the final leader is elected.
[[File:rank12.png|600px]]


[[File:graph00.png|600px]]

[[File:graph01.png|600px]]

==Gragh Drawing Program1==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
nx.barbell_graph(4,2)
G=nx.barbell_graph(4,2)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:Graph003.png|600px]]

==Gragh Drawing Program2==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
nx.barbell_graph(4,3)
G=nx.barbell_graph(4,3)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:Graph004.png|600px]]

==Gragh Drawing Program3==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
nx.barbell_graph(5,3)
G=nx.barbell_graph(5,3)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:Graph005.png|600px]]

==Complete Graph==
Complete graph is a graph, wherein, each node is connected to each other nodes in a graph.

&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.complete_graph(4)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:

[[File:completegraph001.png|600px]]

==Cycle graph==

&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.cycle_graph(5)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:

[[File:cyclegraph1.png|600px]]

[[#Top]]

==Ladder graph==

&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.ladder_graph(5)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:

[[File:laddergraph.png|600px]]

[[#Top]]

==Path Graph==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.path_graph(6)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:

[[File:pathgraph.png|600px]]

[[#Top]]

==Star Graph==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.star_graph(5)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:stargraph.png|600px]]

[[#Top]]

==Star Graph of 4 Nodes==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.star_graph(4)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:stargraph4points.png|600px]]

==Wheel Graph==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.wheel_graph(4)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:wheelgraph.png|600px]]

[[#Top]]

==Wheel Graph of 5 nodes==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.wheel_graph(5)
nx.draw(G)
plt.show()

&lt;/pre&gt;

Output:

[[File:wheelgraph5nodes.png|600px]]

[[#Top]]

==Wheel Graph of 6 nodes==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.wheel_graph(6)
nx.draw(G)
plt.show()

&lt;/pre&gt;

Output:

[[File:wheelgraph6nodes.png|600px]]

[[#Top]]

==Random Graph==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.gnp_random_graph(5,0.5)
nx.draw(G)
plt.show()

&lt;/pre&gt;

Output:

[[File:randomgraph1.png|600px]]


Running the same above program, we will get different output, as shown below, as it is random graph.

[[File:randomgraph2.png|600px]]

[[#Top]]

==Page Rank Algorithm Implementation==

===Random Directed Graph===
&lt;pre&gt;
import networkx as nx
import random
import matplotlib.pyplot as plt

#Draw random directed graph
G=nx.gnp_random_graph(10,0.5,directed=True)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output: 

[[File:randomDirectedGraph.png|600px]]


===Random Directed Graph with Labels===
&lt;pre&gt;
import networkx as nx
import random
import matplotlib.pyplot as plt

#Draw random directed graph 
G=nx.gnp_random_graph(10,0.5,directed=True)
#Give label numbering to nodes
nx.draw(G,with_labels=True)
plt.show()

&lt;/pre&gt;

Output:

[[File:randomDirectedGraphwithLabels.png|600px]]


[[#Top]]

===Page Rank Coding===
&lt;pre&gt;
import networkx as nx
import random
import matplotlib.pyplot as plt
import operator

#Draw random directed graph 
G=nx.gnp_random_graph(10,0.5,directed=True)
#Give label numbering to nodes
nx.draw(G,with_labels=True)
plt.show()

#x is the random source node
x=random.choice([i for i in range(G.number_of_nodes())])

#dictionary to maintain counter
dictCounter={}
#initialize the counter of each node as 0
for i in range(G.number_of_nodes()):
    dictCounter[i]=0
dictCounter[x]=dictCounter[x]+1

for i in range(10000):
    listn=list(G.neighbors(x))
    #if x is a sink node, we need to select random node for random walk
    #, else select random neighbor node

    if(len(listn)==0):
        x=random.choice([i for i in range(G.number_of_nodes())])
        dictCounter[x]=dictCounter[x]+1
    else:
        #choose a node randomly from neightbors
        x=random.choice(listn)
        dictCounter[x]=dictCounter[x]+1

p=nx.pagerank(G)
sorted_p=sorted(p.items(),key=operator.itemgetter(1))
sorted_rw=sorted(dictCounter.items(),key=operator.itemgetter(1))                        
#print(p)
#print(dictCounter)

print(sorted_p)
print(sorted_rw)

&lt;/pre&gt;

Output:

&lt;pre&gt;
[(2, 0.07139920240302768), (5, 0.07464882519777695), (3, 0.08527469366832419), 
(6, 0.08665188647066119), (4, 0.0987815549542114), (0, 0.10858415997562518), 
(9, 0.110369696943925), (8, 0.11456211367660116), (1, 0.11682018308814024), 
(7, 0.13290768362170685)]
[(2, 4), (5, 7), (8, 7), (6, 8), (3, 11), (7, 11), (1, 12), (4, 12), (0, 13), (9, 16)]
&lt;/pre&gt;

[[#Top]]

=Email communication Network=

=Collatz Conjecture=
Taught by Sudarshan sir and Amit sir, and Edited by Ms. Ami Tusharkant Choksi

If a number is even, divide it by ''2'', if it is odd, make multiply it by ''3'' and add ''1'', till you get ''1''. This simple problem is called, ''Collatz Conjecture''. 

[[File:collatz1.png|600px]]

[[File:collatz2.png|600px]]

[[File:collatz3.png|600px]]

[[File:collatz4.png|600px]]

[[File:collatz5.png|600px]]

Number is bigger doesn't mean more iterations are required. One can notice, from the output of the following program. 



The program to implement the same is as follows:
==Program==
&lt;pre&gt;
#collatz conjecture
#if num is even, divide it by 2
#if num is odd, new number is equal to 3n+1


def checkNum(num):
    iterations=1
    while(num!=1):
        if(num%2==0):
            num=int(num/2)            
        else:
            num = 3*num+1
        iterations+=1
        

    print(num,iterations)


#checkNum(12)#Output: 1 10
#checkNum(26)#Output: 1 11
checkNum(2000)#Output: 1 113
&lt;/pre&gt;

&lt;pre&gt;

#recursive approach

def checkNum(num):
    if num==1:
        return 1
    elif num%2==0:
        return checkNum(num/2)+1
    else:
        return checkNum(3*num +1)+1


output:
checkNum(26)
Out[27]: 11
checkNum(5000)
Out[28]: 29
&lt;/pre&gt;

==Program adding statement to print all iterations==
&lt;pre&gt;
def checkNum(num):
    iterations=1
    while(num!=1):
        if(num%2==0):
            num=int(num/2)            
        else:
            num = 3*num+1
        print(iterations,&quot;:&quot;,num)
        iterations+=1
        

    print(num,iterations)
&lt;/pre&gt;
==Output==
===For checkNum(2000)===
&lt;pre&gt;
1 : 1000
2 : 500
3 : 250
4 : 125
5 : 376
6 : 188
7 : 94
8 : 47
9 : 142
10 : 71
11 : 214
12 : 107
13 : 322
14 : 161
15 : 484
16 : 242
17 : 121
18 : 364
19 : 182
20 : 91
21 : 274
22 : 137
23 : 412
24 : 206
25 : 103
26 : 310
27 : 155
28 : 466
29 : 233
30 : 700
31 : 350
32 : 175
33 : 526
34 : 263
35 : 790
36 : 395
37 : 1186
38 : 593
39 : 1780
40 : 890
41 : 445
42 : 1336
43 : 668
44 : 334
45 : 167
46 : 502
47 : 251
48 : 754
49 : 377
50 : 1132
51 : 566
52 : 283
53 : 850
54 : 425
55 : 1276
56 : 638
57 : 319
58 : 958
59 : 479
60 : 1438
61 : 719
62 : 2158
63 : 1079
64 : 3238
65 : 1619
66 : 4858
67 : 2429
68 : 7288
69 : 3644
70 : 1822
71 : 911
72 : 2734
73 : 1367
74 : 4102
75 : 2051
76 : 6154
77 : 3077
78 : 9232
79 : 4616
80 : 2308
81 : 1154
82 : 577
83 : 1732
84 : 866
85 : 433
86 : 1300
87 : 650
88 : 325
89 : 976
90 : 488
91 : 244
92 : 122
93 : 61
94 : 184
95 : 92
96 : 46
97 : 23
98 : 70
99 : 35
100 : 106
101 : 53
102 : 160
103 : 80
104 : 40
105 : 20
106 : 10
107 : 5
108 : 16
109 : 8
110 : 4
111 : 2
112 : 1
1 113
&lt;/pre&gt;

===For checkNum(5000)===
&lt;pre&gt;
1 : 2500
2 : 1250
3 : 625
4 : 1876
5 : 938
6 : 469
7 : 1408
8 : 704
9 : 352
10 : 176
11 : 88
12 : 44
13 : 22
14 : 11
15 : 34
16 : 17
17 : 52
18 : 26
19 : 13
20 : 40
21 : 20
22 : 10
23 : 5
24 : 16
25 : 8
26 : 4
27 : 2
28 : 1
1 29
&lt;/pre&gt;
===For checkNum(25000000)===
&lt;pre&gt;
1 : 12500000
2 : 6250000
3 : 3125000
4 : 1562500
5 : 781250
6 : 390625
7 : 1171876
8 : 585938
9 : 292969
10 : 878908
11 : 439454
12 : 219727
13 : 659182
14 : 329591
15 : 988774
16 : 494387
17 : 1483162
18 : 741581
19 : 2224744
20 : 1112372
21 : 556186
22 : 278093
23 : 834280
24 : 417140
25 : 208570
26 : 104285
27 : 312856
28 : 156428
29 : 78214
30 : 39107
31 : 117322
32 : 58661
33 : 175984
34 : 87992
35 : 43996
36 : 21998
37 : 10999
38 : 32998
39 : 16499
40 : 49498
41 : 24749
42 : 74248
43 : 37124
44 : 18562
45 : 9281
46 : 27844
47 : 13922
48 : 6961
49 : 20884
50 : 10442
51 : 5221
52 : 15664
53 : 7832
54 : 3916
55 : 1958
56 : 979
57 : 2938
58 : 1469
59 : 4408
60 : 2204
61 : 1102
62 : 551
63 : 1654
64 : 827
65 : 2482
66 : 1241
67 : 3724
68 : 1862
69 : 931
70 : 2794
71 : 1397
72 : 4192
73 : 2096
74 : 1048
75 : 524
76 : 262
77 : 131
78 : 394
79 : 197
80 : 592
81 : 296
82 : 148
83 : 74
84 : 37
85 : 112
86 : 56
87 : 28
88 : 14
89 : 7
90 : 22
91 : 11
92 : 34
93 : 17
94 : 52
95 : 26
96 : 13
97 : 40
98 : 20
99 : 10
100 : 5
101 : 16
102 : 8
103 : 4
104 : 2
105 : 1
1 106
&lt;/pre&gt;

Happy Life ahead!!!

[[File:end1.png]]</text>
      <sha1>8bq9u52k1xu1bttoygqlucp0b3wnk4k</sha1>
    </revision>
    <revision>
      <id>4447</id>
      <parentid>4446</parentid>
      <timestamp>2018-10-17T05:12:24Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* Complete Graph */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="11311">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_12 Contributors of this page]

=Page Rank - How does Google Work=
One web page is having link to other page, that is a page is referring to other page. Google uses ''Page Rank'' algorithm to choose which page should be displayed first.

If we have network, connections as below:
[[File:rank0.png]]

We want to pick a leader out of all these nodes. How to pick a leader?  Why to elect a leader? It is because we want to find the super power of available nodes.                     
[[File:rank1.png]]

For example, the application wherein, we want to find the most impressive person of the  few ones. How to decide it? As shown in below figure, each node will communicate with other, randomly, we implement the count for each node, how many times, the particular node is being visited.
[[File:rank2.png]]

[[#Top]]

As shown in following, figure, all nodes are visited and each node is marked with the 
number i.e.number of times the node is visited.
[[File:rank3.png]]

The node with the maximum count, becomes the winner. Here, node with 120 count in figure 
below, is the winner. i.e. The person with 120 count in the figure is the most impressive 
person in the community being considered.
[[File:rank4.png]]

[[File:rank5.png]]

[[File:rank6.png]]

[[File:rank7.png]]


[[File:rank8.png]]

[[#Top]]

Google selects the page rank in this matter. Each web page is connected to other web page with web links. To a page, maximum link is there, that will be put on top results in Google search results.
[[File:rank9.png]]

Google uses web crawler. The crawler takes the random walk on the www network and rank the web sites.
[[File:rank10.png]]

This way Google ranks the pages and displays search results, according to page rank.
[[File:rank11.png]]

e.g.we search for ''mysore city''. Google has 10,000 results. But it displays the results in the sequence of page rank of search results, As shown in figure below.
[[File:mysore.png]]

[[#Top]]

==Page rank algorithm ==
As shown in beautiful figure below, few nodes combinely selected one as the leader, then that leader and other nodes, have selected         other as a leader. This way, finally the final leader is elected.
[[File:rank12.png|600px]]


[[File:graph00.png|600px]]

[[File:graph01.png|600px]]

==Gragh Drawing Program1==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
nx.barbell_graph(4,2)
G=nx.barbell_graph(4,2)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:Graph003.png|600px]]

==Gragh Drawing Program2==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
nx.barbell_graph(4,3)
G=nx.barbell_graph(4,3)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:Graph004.png|600px]]

==Gragh Drawing Program3==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
nx.barbell_graph(5,3)
G=nx.barbell_graph(5,3)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:Graph005.png|600px]]

==Complete Graph==
Complete graph is a graph, wherein, each node is connected to each other nodes in a graph.

&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.complete_graph(4)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:

[[File:completegraph001.png|600px]]

[[#Top]]

==Cycle graph==

&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.cycle_graph(5)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:

[[File:cyclegraph1.png|600px]]

[[#Top]]

==Ladder graph==

&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.ladder_graph(5)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:

[[File:laddergraph.png|600px]]

[[#Top]]

==Path Graph==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.path_graph(6)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:

[[File:pathgraph.png|600px]]

[[#Top]]

==Star Graph==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.star_graph(5)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:stargraph.png|600px]]

[[#Top]]

==Star Graph of 4 Nodes==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.star_graph(4)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:stargraph4points.png|600px]]

==Wheel Graph==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.wheel_graph(4)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:wheelgraph.png|600px]]

[[#Top]]

==Wheel Graph of 5 nodes==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.wheel_graph(5)
nx.draw(G)
plt.show()

&lt;/pre&gt;

Output:

[[File:wheelgraph5nodes.png|600px]]

[[#Top]]

==Wheel Graph of 6 nodes==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.wheel_graph(6)
nx.draw(G)
plt.show()

&lt;/pre&gt;

Output:

[[File:wheelgraph6nodes.png|600px]]

[[#Top]]

==Random Graph==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.gnp_random_graph(5,0.5)
nx.draw(G)
plt.show()

&lt;/pre&gt;

Output:

[[File:randomgraph1.png|600px]]


Running the same above program, we will get different output, as shown below, as it is random graph.

[[File:randomgraph2.png|600px]]

[[#Top]]

==Page Rank Algorithm Implementation==

===Random Directed Graph===
&lt;pre&gt;
import networkx as nx
import random
import matplotlib.pyplot as plt

#Draw random directed graph
G=nx.gnp_random_graph(10,0.5,directed=True)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output: 

[[File:randomDirectedGraph.png|600px]]


===Random Directed Graph with Labels===
&lt;pre&gt;
import networkx as nx
import random
import matplotlib.pyplot as plt

#Draw random directed graph 
G=nx.gnp_random_graph(10,0.5,directed=True)
#Give label numbering to nodes
nx.draw(G,with_labels=True)
plt.show()

&lt;/pre&gt;

Output:

[[File:randomDirectedGraphwithLabels.png|600px]]


[[#Top]]

===Page Rank Coding===
&lt;pre&gt;
import networkx as nx
import random
import matplotlib.pyplot as plt
import operator

#Draw random directed graph 
G=nx.gnp_random_graph(10,0.5,directed=True)
#Give label numbering to nodes
nx.draw(G,with_labels=True)
plt.show()

#x is the random source node
x=random.choice([i for i in range(G.number_of_nodes())])

#dictionary to maintain counter
dictCounter={}
#initialize the counter of each node as 0
for i in range(G.number_of_nodes()):
    dictCounter[i]=0
dictCounter[x]=dictCounter[x]+1

for i in range(10000):
    listn=list(G.neighbors(x))
    #if x is a sink node, we need to select random node for random walk
    #, else select random neighbor node

    if(len(listn)==0):
        x=random.choice([i for i in range(G.number_of_nodes())])
        dictCounter[x]=dictCounter[x]+1
    else:
        #choose a node randomly from neightbors
        x=random.choice(listn)
        dictCounter[x]=dictCounter[x]+1

p=nx.pagerank(G)
sorted_p=sorted(p.items(),key=operator.itemgetter(1))
sorted_rw=sorted(dictCounter.items(),key=operator.itemgetter(1))                        
#print(p)
#print(dictCounter)

print(sorted_p)
print(sorted_rw)

&lt;/pre&gt;

Output:

&lt;pre&gt;
[(2, 0.07139920240302768), (5, 0.07464882519777695), (3, 0.08527469366832419), 
(6, 0.08665188647066119), (4, 0.0987815549542114), (0, 0.10858415997562518), 
(9, 0.110369696943925), (8, 0.11456211367660116), (1, 0.11682018308814024), 
(7, 0.13290768362170685)]
[(2, 4), (5, 7), (8, 7), (6, 8), (3, 11), (7, 11), (1, 12), (4, 12), (0, 13), (9, 16)]
&lt;/pre&gt;

[[#Top]]

=Email communication Network=

=Collatz Conjecture=
Taught by Sudarshan sir and Amit sir, and Edited by Ms. Ami Tusharkant Choksi

If a number is even, divide it by ''2'', if it is odd, make multiply it by ''3'' and add ''1'', till you get ''1''. This simple problem is called, ''Collatz Conjecture''. 

[[File:collatz1.png|600px]]

[[File:collatz2.png|600px]]

[[File:collatz3.png|600px]]

[[File:collatz4.png|600px]]

[[File:collatz5.png|600px]]

Number is bigger doesn't mean more iterations are required. One can notice, from the output of the following program. 



The program to implement the same is as follows:
==Program==
&lt;pre&gt;
#collatz conjecture
#if num is even, divide it by 2
#if num is odd, new number is equal to 3n+1


def checkNum(num):
    iterations=1
    while(num!=1):
        if(num%2==0):
            num=int(num/2)            
        else:
            num = 3*num+1
        iterations+=1
        

    print(num,iterations)


#checkNum(12)#Output: 1 10
#checkNum(26)#Output: 1 11
checkNum(2000)#Output: 1 113
&lt;/pre&gt;

&lt;pre&gt;

#recursive approach

def checkNum(num):
    if num==1:
        return 1
    elif num%2==0:
        return checkNum(num/2)+1
    else:
        return checkNum(3*num +1)+1


output:
checkNum(26)
Out[27]: 11
checkNum(5000)
Out[28]: 29
&lt;/pre&gt;

==Program adding statement to print all iterations==
&lt;pre&gt;
def checkNum(num):
    iterations=1
    while(num!=1):
        if(num%2==0):
            num=int(num/2)            
        else:
            num = 3*num+1
        print(iterations,&quot;:&quot;,num)
        iterations+=1
        

    print(num,iterations)
&lt;/pre&gt;
==Output==
===For checkNum(2000)===
&lt;pre&gt;
1 : 1000
2 : 500
3 : 250
4 : 125
5 : 376
6 : 188
7 : 94
8 : 47
9 : 142
10 : 71
11 : 214
12 : 107
13 : 322
14 : 161
15 : 484
16 : 242
17 : 121
18 : 364
19 : 182
20 : 91
21 : 274
22 : 137
23 : 412
24 : 206
25 : 103
26 : 310
27 : 155
28 : 466
29 : 233
30 : 700
31 : 350
32 : 175
33 : 526
34 : 263
35 : 790
36 : 395
37 : 1186
38 : 593
39 : 1780
40 : 890
41 : 445
42 : 1336
43 : 668
44 : 334
45 : 167
46 : 502
47 : 251
48 : 754
49 : 377
50 : 1132
51 : 566
52 : 283
53 : 850
54 : 425
55 : 1276
56 : 638
57 : 319
58 : 958
59 : 479
60 : 1438
61 : 719
62 : 2158
63 : 1079
64 : 3238
65 : 1619
66 : 4858
67 : 2429
68 : 7288
69 : 3644
70 : 1822
71 : 911
72 : 2734
73 : 1367
74 : 4102
75 : 2051
76 : 6154
77 : 3077
78 : 9232
79 : 4616
80 : 2308
81 : 1154
82 : 577
83 : 1732
84 : 866
85 : 433
86 : 1300
87 : 650
88 : 325
89 : 976
90 : 488
91 : 244
92 : 122
93 : 61
94 : 184
95 : 92
96 : 46
97 : 23
98 : 70
99 : 35
100 : 106
101 : 53
102 : 160
103 : 80
104 : 40
105 : 20
106 : 10
107 : 5
108 : 16
109 : 8
110 : 4
111 : 2
112 : 1
1 113
&lt;/pre&gt;

===For checkNum(5000)===
&lt;pre&gt;
1 : 2500
2 : 1250
3 : 625
4 : 1876
5 : 938
6 : 469
7 : 1408
8 : 704
9 : 352
10 : 176
11 : 88
12 : 44
13 : 22
14 : 11
15 : 34
16 : 17
17 : 52
18 : 26
19 : 13
20 : 40
21 : 20
22 : 10
23 : 5
24 : 16
25 : 8
26 : 4
27 : 2
28 : 1
1 29
&lt;/pre&gt;
===For checkNum(25000000)===
&lt;pre&gt;
1 : 12500000
2 : 6250000
3 : 3125000
4 : 1562500
5 : 781250
6 : 390625
7 : 1171876
8 : 585938
9 : 292969
10 : 878908
11 : 439454
12 : 219727
13 : 659182
14 : 329591
15 : 988774
16 : 494387
17 : 1483162
18 : 741581
19 : 2224744
20 : 1112372
21 : 556186
22 : 278093
23 : 834280
24 : 417140
25 : 208570
26 : 104285
27 : 312856
28 : 156428
29 : 78214
30 : 39107
31 : 117322
32 : 58661
33 : 175984
34 : 87992
35 : 43996
36 : 21998
37 : 10999
38 : 32998
39 : 16499
40 : 49498
41 : 24749
42 : 74248
43 : 37124
44 : 18562
45 : 9281
46 : 27844
47 : 13922
48 : 6961
49 : 20884
50 : 10442
51 : 5221
52 : 15664
53 : 7832
54 : 3916
55 : 1958
56 : 979
57 : 2938
58 : 1469
59 : 4408
60 : 2204
61 : 1102
62 : 551
63 : 1654
64 : 827
65 : 2482
66 : 1241
67 : 3724
68 : 1862
69 : 931
70 : 2794
71 : 1397
72 : 4192
73 : 2096
74 : 1048
75 : 524
76 : 262
77 : 131
78 : 394
79 : 197
80 : 592
81 : 296
82 : 148
83 : 74
84 : 37
85 : 112
86 : 56
87 : 28
88 : 14
89 : 7
90 : 22
91 : 11
92 : 34
93 : 17
94 : 52
95 : 26
96 : 13
97 : 40
98 : 20
99 : 10
100 : 5
101 : 16
102 : 8
103 : 4
104 : 2
105 : 1
1 106
&lt;/pre&gt;

Happy Life ahead!!!

[[File:end1.png]]</text>
      <sha1>k9ycj2rnzqt9pmmh38bcipinmve7g1z</sha1>
    </revision>
    <revision>
      <id>4448</id>
      <parentid>4447</parentid>
      <timestamp>2018-10-17T05:12:38Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* Gragh Drawing Program3 */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="11321">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_12 Contributors of this page]

=Page Rank - How does Google Work=
One web page is having link to other page, that is a page is referring to other page. Google uses ''Page Rank'' algorithm to choose which page should be displayed first.

If we have network, connections as below:
[[File:rank0.png]]

We want to pick a leader out of all these nodes. How to pick a leader?  Why to elect a leader? It is because we want to find the super power of available nodes.                     
[[File:rank1.png]]

For example, the application wherein, we want to find the most impressive person of the  few ones. How to decide it? As shown in below figure, each node will communicate with other, randomly, we implement the count for each node, how many times, the particular node is being visited.
[[File:rank2.png]]

[[#Top]]

As shown in following, figure, all nodes are visited and each node is marked with the 
number i.e.number of times the node is visited.
[[File:rank3.png]]

The node with the maximum count, becomes the winner. Here, node with 120 count in figure 
below, is the winner. i.e. The person with 120 count in the figure is the most impressive 
person in the community being considered.
[[File:rank4.png]]

[[File:rank5.png]]

[[File:rank6.png]]

[[File:rank7.png]]


[[File:rank8.png]]

[[#Top]]

Google selects the page rank in this matter. Each web page is connected to other web page with web links. To a page, maximum link is there, that will be put on top results in Google search results.
[[File:rank9.png]]

Google uses web crawler. The crawler takes the random walk on the www network and rank the web sites.
[[File:rank10.png]]

This way Google ranks the pages and displays search results, according to page rank.
[[File:rank11.png]]

e.g.we search for ''mysore city''. Google has 10,000 results. But it displays the results in the sequence of page rank of search results, As shown in figure below.
[[File:mysore.png]]

[[#Top]]

==Page rank algorithm ==
As shown in beautiful figure below, few nodes combinely selected one as the leader, then that leader and other nodes, have selected         other as a leader. This way, finally the final leader is elected.
[[File:rank12.png|600px]]


[[File:graph00.png|600px]]

[[File:graph01.png|600px]]

==Gragh Drawing Program1==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
nx.barbell_graph(4,2)
G=nx.barbell_graph(4,2)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:Graph003.png|600px]]

==Gragh Drawing Program2==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
nx.barbell_graph(4,3)
G=nx.barbell_graph(4,3)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:Graph004.png|600px]]

==Gragh Drawing Program3==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
nx.barbell_graph(5,3)
G=nx.barbell_graph(5,3)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:Graph005.png|600px]]

[[#Top]]

==Complete Graph==
Complete graph is a graph, wherein, each node is connected to each other nodes in a graph.

&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.complete_graph(4)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:

[[File:completegraph001.png|600px]]

[[#Top]]

==Cycle graph==

&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.cycle_graph(5)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:

[[File:cyclegraph1.png|600px]]

[[#Top]]

==Ladder graph==

&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.ladder_graph(5)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:

[[File:laddergraph.png|600px]]

[[#Top]]

==Path Graph==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.path_graph(6)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:

[[File:pathgraph.png|600px]]

[[#Top]]

==Star Graph==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.star_graph(5)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:stargraph.png|600px]]

[[#Top]]

==Star Graph of 4 Nodes==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.star_graph(4)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:stargraph4points.png|600px]]

==Wheel Graph==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.wheel_graph(4)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:wheelgraph.png|600px]]

[[#Top]]

==Wheel Graph of 5 nodes==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.wheel_graph(5)
nx.draw(G)
plt.show()

&lt;/pre&gt;

Output:

[[File:wheelgraph5nodes.png|600px]]

[[#Top]]

==Wheel Graph of 6 nodes==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.wheel_graph(6)
nx.draw(G)
plt.show()

&lt;/pre&gt;

Output:

[[File:wheelgraph6nodes.png|600px]]

[[#Top]]

==Random Graph==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.gnp_random_graph(5,0.5)
nx.draw(G)
plt.show()

&lt;/pre&gt;

Output:

[[File:randomgraph1.png|600px]]


Running the same above program, we will get different output, as shown below, as it is random graph.

[[File:randomgraph2.png|600px]]

[[#Top]]

==Page Rank Algorithm Implementation==

===Random Directed Graph===
&lt;pre&gt;
import networkx as nx
import random
import matplotlib.pyplot as plt

#Draw random directed graph
G=nx.gnp_random_graph(10,0.5,directed=True)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output: 

[[File:randomDirectedGraph.png|600px]]


===Random Directed Graph with Labels===
&lt;pre&gt;
import networkx as nx
import random
import matplotlib.pyplot as plt

#Draw random directed graph 
G=nx.gnp_random_graph(10,0.5,directed=True)
#Give label numbering to nodes
nx.draw(G,with_labels=True)
plt.show()

&lt;/pre&gt;

Output:

[[File:randomDirectedGraphwithLabels.png|600px]]


[[#Top]]

===Page Rank Coding===
&lt;pre&gt;
import networkx as nx
import random
import matplotlib.pyplot as plt
import operator

#Draw random directed graph 
G=nx.gnp_random_graph(10,0.5,directed=True)
#Give label numbering to nodes
nx.draw(G,with_labels=True)
plt.show()

#x is the random source node
x=random.choice([i for i in range(G.number_of_nodes())])

#dictionary to maintain counter
dictCounter={}
#initialize the counter of each node as 0
for i in range(G.number_of_nodes()):
    dictCounter[i]=0
dictCounter[x]=dictCounter[x]+1

for i in range(10000):
    listn=list(G.neighbors(x))
    #if x is a sink node, we need to select random node for random walk
    #, else select random neighbor node

    if(len(listn)==0):
        x=random.choice([i for i in range(G.number_of_nodes())])
        dictCounter[x]=dictCounter[x]+1
    else:
        #choose a node randomly from neightbors
        x=random.choice(listn)
        dictCounter[x]=dictCounter[x]+1

p=nx.pagerank(G)
sorted_p=sorted(p.items(),key=operator.itemgetter(1))
sorted_rw=sorted(dictCounter.items(),key=operator.itemgetter(1))                        
#print(p)
#print(dictCounter)

print(sorted_p)
print(sorted_rw)

&lt;/pre&gt;

Output:

&lt;pre&gt;
[(2, 0.07139920240302768), (5, 0.07464882519777695), (3, 0.08527469366832419), 
(6, 0.08665188647066119), (4, 0.0987815549542114), (0, 0.10858415997562518), 
(9, 0.110369696943925), (8, 0.11456211367660116), (1, 0.11682018308814024), 
(7, 0.13290768362170685)]
[(2, 4), (5, 7), (8, 7), (6, 8), (3, 11), (7, 11), (1, 12), (4, 12), (0, 13), (9, 16)]
&lt;/pre&gt;

[[#Top]]

=Email communication Network=

=Collatz Conjecture=
Taught by Sudarshan sir and Amit sir, and Edited by Ms. Ami Tusharkant Choksi

If a number is even, divide it by ''2'', if it is odd, make multiply it by ''3'' and add ''1'', till you get ''1''. This simple problem is called, ''Collatz Conjecture''. 

[[File:collatz1.png|600px]]

[[File:collatz2.png|600px]]

[[File:collatz3.png|600px]]

[[File:collatz4.png|600px]]

[[File:collatz5.png|600px]]

Number is bigger doesn't mean more iterations are required. One can notice, from the output of the following program. 



The program to implement the same is as follows:
==Program==
&lt;pre&gt;
#collatz conjecture
#if num is even, divide it by 2
#if num is odd, new number is equal to 3n+1


def checkNum(num):
    iterations=1
    while(num!=1):
        if(num%2==0):
            num=int(num/2)            
        else:
            num = 3*num+1
        iterations+=1
        

    print(num,iterations)


#checkNum(12)#Output: 1 10
#checkNum(26)#Output: 1 11
checkNum(2000)#Output: 1 113
&lt;/pre&gt;

&lt;pre&gt;

#recursive approach

def checkNum(num):
    if num==1:
        return 1
    elif num%2==0:
        return checkNum(num/2)+1
    else:
        return checkNum(3*num +1)+1


output:
checkNum(26)
Out[27]: 11
checkNum(5000)
Out[28]: 29
&lt;/pre&gt;

==Program adding statement to print all iterations==
&lt;pre&gt;
def checkNum(num):
    iterations=1
    while(num!=1):
        if(num%2==0):
            num=int(num/2)            
        else:
            num = 3*num+1
        print(iterations,&quot;:&quot;,num)
        iterations+=1
        

    print(num,iterations)
&lt;/pre&gt;
==Output==
===For checkNum(2000)===
&lt;pre&gt;
1 : 1000
2 : 500
3 : 250
4 : 125
5 : 376
6 : 188
7 : 94
8 : 47
9 : 142
10 : 71
11 : 214
12 : 107
13 : 322
14 : 161
15 : 484
16 : 242
17 : 121
18 : 364
19 : 182
20 : 91
21 : 274
22 : 137
23 : 412
24 : 206
25 : 103
26 : 310
27 : 155
28 : 466
29 : 233
30 : 700
31 : 350
32 : 175
33 : 526
34 : 263
35 : 790
36 : 395
37 : 1186
38 : 593
39 : 1780
40 : 890
41 : 445
42 : 1336
43 : 668
44 : 334
45 : 167
46 : 502
47 : 251
48 : 754
49 : 377
50 : 1132
51 : 566
52 : 283
53 : 850
54 : 425
55 : 1276
56 : 638
57 : 319
58 : 958
59 : 479
60 : 1438
61 : 719
62 : 2158
63 : 1079
64 : 3238
65 : 1619
66 : 4858
67 : 2429
68 : 7288
69 : 3644
70 : 1822
71 : 911
72 : 2734
73 : 1367
74 : 4102
75 : 2051
76 : 6154
77 : 3077
78 : 9232
79 : 4616
80 : 2308
81 : 1154
82 : 577
83 : 1732
84 : 866
85 : 433
86 : 1300
87 : 650
88 : 325
89 : 976
90 : 488
91 : 244
92 : 122
93 : 61
94 : 184
95 : 92
96 : 46
97 : 23
98 : 70
99 : 35
100 : 106
101 : 53
102 : 160
103 : 80
104 : 40
105 : 20
106 : 10
107 : 5
108 : 16
109 : 8
110 : 4
111 : 2
112 : 1
1 113
&lt;/pre&gt;

===For checkNum(5000)===
&lt;pre&gt;
1 : 2500
2 : 1250
3 : 625
4 : 1876
5 : 938
6 : 469
7 : 1408
8 : 704
9 : 352
10 : 176
11 : 88
12 : 44
13 : 22
14 : 11
15 : 34
16 : 17
17 : 52
18 : 26
19 : 13
20 : 40
21 : 20
22 : 10
23 : 5
24 : 16
25 : 8
26 : 4
27 : 2
28 : 1
1 29
&lt;/pre&gt;
===For checkNum(25000000)===
&lt;pre&gt;
1 : 12500000
2 : 6250000
3 : 3125000
4 : 1562500
5 : 781250
6 : 390625
7 : 1171876
8 : 585938
9 : 292969
10 : 878908
11 : 439454
12 : 219727
13 : 659182
14 : 329591
15 : 988774
16 : 494387
17 : 1483162
18 : 741581
19 : 2224744
20 : 1112372
21 : 556186
22 : 278093
23 : 834280
24 : 417140
25 : 208570
26 : 104285
27 : 312856
28 : 156428
29 : 78214
30 : 39107
31 : 117322
32 : 58661
33 : 175984
34 : 87992
35 : 43996
36 : 21998
37 : 10999
38 : 32998
39 : 16499
40 : 49498
41 : 24749
42 : 74248
43 : 37124
44 : 18562
45 : 9281
46 : 27844
47 : 13922
48 : 6961
49 : 20884
50 : 10442
51 : 5221
52 : 15664
53 : 7832
54 : 3916
55 : 1958
56 : 979
57 : 2938
58 : 1469
59 : 4408
60 : 2204
61 : 1102
62 : 551
63 : 1654
64 : 827
65 : 2482
66 : 1241
67 : 3724
68 : 1862
69 : 931
70 : 2794
71 : 1397
72 : 4192
73 : 2096
74 : 1048
75 : 524
76 : 262
77 : 131
78 : 394
79 : 197
80 : 592
81 : 296
82 : 148
83 : 74
84 : 37
85 : 112
86 : 56
87 : 28
88 : 14
89 : 7
90 : 22
91 : 11
92 : 34
93 : 17
94 : 52
95 : 26
96 : 13
97 : 40
98 : 20
99 : 10
100 : 5
101 : 16
102 : 8
103 : 4
104 : 2
105 : 1
1 106
&lt;/pre&gt;

Happy Life ahead!!!

[[File:end1.png]]</text>
      <sha1>llg0g29ln5xyl0j10ubf1x9j0l0dajo</sha1>
    </revision>
    <revision>
      <id>4449</id>
      <parentid>4448</parentid>
      <timestamp>2018-10-17T05:12:54Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* Gragh Drawing Program2 */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="11331">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_12 Contributors of this page]

=Page Rank - How does Google Work=
One web page is having link to other page, that is a page is referring to other page. Google uses ''Page Rank'' algorithm to choose which page should be displayed first.

If we have network, connections as below:
[[File:rank0.png]]

We want to pick a leader out of all these nodes. How to pick a leader?  Why to elect a leader? It is because we want to find the super power of available nodes.                     
[[File:rank1.png]]

For example, the application wherein, we want to find the most impressive person of the  few ones. How to decide it? As shown in below figure, each node will communicate with other, randomly, we implement the count for each node, how many times, the particular node is being visited.
[[File:rank2.png]]

[[#Top]]

As shown in following, figure, all nodes are visited and each node is marked with the 
number i.e.number of times the node is visited.
[[File:rank3.png]]

The node with the maximum count, becomes the winner. Here, node with 120 count in figure 
below, is the winner. i.e. The person with 120 count in the figure is the most impressive 
person in the community being considered.
[[File:rank4.png]]

[[File:rank5.png]]

[[File:rank6.png]]

[[File:rank7.png]]


[[File:rank8.png]]

[[#Top]]

Google selects the page rank in this matter. Each web page is connected to other web page with web links. To a page, maximum link is there, that will be put on top results in Google search results.
[[File:rank9.png]]

Google uses web crawler. The crawler takes the random walk on the www network and rank the web sites.
[[File:rank10.png]]

This way Google ranks the pages and displays search results, according to page rank.
[[File:rank11.png]]

e.g.we search for ''mysore city''. Google has 10,000 results. But it displays the results in the sequence of page rank of search results, As shown in figure below.
[[File:mysore.png]]

[[#Top]]

==Page rank algorithm ==
As shown in beautiful figure below, few nodes combinely selected one as the leader, then that leader and other nodes, have selected         other as a leader. This way, finally the final leader is elected.
[[File:rank12.png|600px]]


[[File:graph00.png|600px]]

[[File:graph01.png|600px]]

==Gragh Drawing Program1==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
nx.barbell_graph(4,2)
G=nx.barbell_graph(4,2)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:Graph003.png|600px]]

==Gragh Drawing Program2==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
nx.barbell_graph(4,3)
G=nx.barbell_graph(4,3)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:Graph004.png|600px]]

[[#Top]]

==Gragh Drawing Program3==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
nx.barbell_graph(5,3)
G=nx.barbell_graph(5,3)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:Graph005.png|600px]]

[[#Top]]

==Complete Graph==
Complete graph is a graph, wherein, each node is connected to each other nodes in a graph.

&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.complete_graph(4)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:

[[File:completegraph001.png|600px]]

[[#Top]]

==Cycle graph==

&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.cycle_graph(5)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:

[[File:cyclegraph1.png|600px]]

[[#Top]]

==Ladder graph==

&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.ladder_graph(5)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:

[[File:laddergraph.png|600px]]

[[#Top]]

==Path Graph==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.path_graph(6)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:

[[File:pathgraph.png|600px]]

[[#Top]]

==Star Graph==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.star_graph(5)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:stargraph.png|600px]]

[[#Top]]

==Star Graph of 4 Nodes==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.star_graph(4)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:stargraph4points.png|600px]]

==Wheel Graph==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.wheel_graph(4)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:wheelgraph.png|600px]]

[[#Top]]

==Wheel Graph of 5 nodes==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.wheel_graph(5)
nx.draw(G)
plt.show()

&lt;/pre&gt;

Output:

[[File:wheelgraph5nodes.png|600px]]

[[#Top]]

==Wheel Graph of 6 nodes==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.wheel_graph(6)
nx.draw(G)
plt.show()

&lt;/pre&gt;

Output:

[[File:wheelgraph6nodes.png|600px]]

[[#Top]]

==Random Graph==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.gnp_random_graph(5,0.5)
nx.draw(G)
plt.show()

&lt;/pre&gt;

Output:

[[File:randomgraph1.png|600px]]


Running the same above program, we will get different output, as shown below, as it is random graph.

[[File:randomgraph2.png|600px]]

[[#Top]]

==Page Rank Algorithm Implementation==

===Random Directed Graph===
&lt;pre&gt;
import networkx as nx
import random
import matplotlib.pyplot as plt

#Draw random directed graph
G=nx.gnp_random_graph(10,0.5,directed=True)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output: 

[[File:randomDirectedGraph.png|600px]]


===Random Directed Graph with Labels===
&lt;pre&gt;
import networkx as nx
import random
import matplotlib.pyplot as plt

#Draw random directed graph 
G=nx.gnp_random_graph(10,0.5,directed=True)
#Give label numbering to nodes
nx.draw(G,with_labels=True)
plt.show()

&lt;/pre&gt;

Output:

[[File:randomDirectedGraphwithLabels.png|600px]]


[[#Top]]

===Page Rank Coding===
&lt;pre&gt;
import networkx as nx
import random
import matplotlib.pyplot as plt
import operator

#Draw random directed graph 
G=nx.gnp_random_graph(10,0.5,directed=True)
#Give label numbering to nodes
nx.draw(G,with_labels=True)
plt.show()

#x is the random source node
x=random.choice([i for i in range(G.number_of_nodes())])

#dictionary to maintain counter
dictCounter={}
#initialize the counter of each node as 0
for i in range(G.number_of_nodes()):
    dictCounter[i]=0
dictCounter[x]=dictCounter[x]+1

for i in range(10000):
    listn=list(G.neighbors(x))
    #if x is a sink node, we need to select random node for random walk
    #, else select random neighbor node

    if(len(listn)==0):
        x=random.choice([i for i in range(G.number_of_nodes())])
        dictCounter[x]=dictCounter[x]+1
    else:
        #choose a node randomly from neightbors
        x=random.choice(listn)
        dictCounter[x]=dictCounter[x]+1

p=nx.pagerank(G)
sorted_p=sorted(p.items(),key=operator.itemgetter(1))
sorted_rw=sorted(dictCounter.items(),key=operator.itemgetter(1))                        
#print(p)
#print(dictCounter)

print(sorted_p)
print(sorted_rw)

&lt;/pre&gt;

Output:

&lt;pre&gt;
[(2, 0.07139920240302768), (5, 0.07464882519777695), (3, 0.08527469366832419), 
(6, 0.08665188647066119), (4, 0.0987815549542114), (0, 0.10858415997562518), 
(9, 0.110369696943925), (8, 0.11456211367660116), (1, 0.11682018308814024), 
(7, 0.13290768362170685)]
[(2, 4), (5, 7), (8, 7), (6, 8), (3, 11), (7, 11), (1, 12), (4, 12), (0, 13), (9, 16)]
&lt;/pre&gt;

[[#Top]]

=Email communication Network=

=Collatz Conjecture=
Taught by Sudarshan sir and Amit sir, and Edited by Ms. Ami Tusharkant Choksi

If a number is even, divide it by ''2'', if it is odd, make multiply it by ''3'' and add ''1'', till you get ''1''. This simple problem is called, ''Collatz Conjecture''. 

[[File:collatz1.png|600px]]

[[File:collatz2.png|600px]]

[[File:collatz3.png|600px]]

[[File:collatz4.png|600px]]

[[File:collatz5.png|600px]]

Number is bigger doesn't mean more iterations are required. One can notice, from the output of the following program. 



The program to implement the same is as follows:
==Program==
&lt;pre&gt;
#collatz conjecture
#if num is even, divide it by 2
#if num is odd, new number is equal to 3n+1


def checkNum(num):
    iterations=1
    while(num!=1):
        if(num%2==0):
            num=int(num/2)            
        else:
            num = 3*num+1
        iterations+=1
        

    print(num,iterations)


#checkNum(12)#Output: 1 10
#checkNum(26)#Output: 1 11
checkNum(2000)#Output: 1 113
&lt;/pre&gt;

&lt;pre&gt;

#recursive approach

def checkNum(num):
    if num==1:
        return 1
    elif num%2==0:
        return checkNum(num/2)+1
    else:
        return checkNum(3*num +1)+1


output:
checkNum(26)
Out[27]: 11
checkNum(5000)
Out[28]: 29
&lt;/pre&gt;

==Program adding statement to print all iterations==
&lt;pre&gt;
def checkNum(num):
    iterations=1
    while(num!=1):
        if(num%2==0):
            num=int(num/2)            
        else:
            num = 3*num+1
        print(iterations,&quot;:&quot;,num)
        iterations+=1
        

    print(num,iterations)
&lt;/pre&gt;
==Output==
===For checkNum(2000)===
&lt;pre&gt;
1 : 1000
2 : 500
3 : 250
4 : 125
5 : 376
6 : 188
7 : 94
8 : 47
9 : 142
10 : 71
11 : 214
12 : 107
13 : 322
14 : 161
15 : 484
16 : 242
17 : 121
18 : 364
19 : 182
20 : 91
21 : 274
22 : 137
23 : 412
24 : 206
25 : 103
26 : 310
27 : 155
28 : 466
29 : 233
30 : 700
31 : 350
32 : 175
33 : 526
34 : 263
35 : 790
36 : 395
37 : 1186
38 : 593
39 : 1780
40 : 890
41 : 445
42 : 1336
43 : 668
44 : 334
45 : 167
46 : 502
47 : 251
48 : 754
49 : 377
50 : 1132
51 : 566
52 : 283
53 : 850
54 : 425
55 : 1276
56 : 638
57 : 319
58 : 958
59 : 479
60 : 1438
61 : 719
62 : 2158
63 : 1079
64 : 3238
65 : 1619
66 : 4858
67 : 2429
68 : 7288
69 : 3644
70 : 1822
71 : 911
72 : 2734
73 : 1367
74 : 4102
75 : 2051
76 : 6154
77 : 3077
78 : 9232
79 : 4616
80 : 2308
81 : 1154
82 : 577
83 : 1732
84 : 866
85 : 433
86 : 1300
87 : 650
88 : 325
89 : 976
90 : 488
91 : 244
92 : 122
93 : 61
94 : 184
95 : 92
96 : 46
97 : 23
98 : 70
99 : 35
100 : 106
101 : 53
102 : 160
103 : 80
104 : 40
105 : 20
106 : 10
107 : 5
108 : 16
109 : 8
110 : 4
111 : 2
112 : 1
1 113
&lt;/pre&gt;

===For checkNum(5000)===
&lt;pre&gt;
1 : 2500
2 : 1250
3 : 625
4 : 1876
5 : 938
6 : 469
7 : 1408
8 : 704
9 : 352
10 : 176
11 : 88
12 : 44
13 : 22
14 : 11
15 : 34
16 : 17
17 : 52
18 : 26
19 : 13
20 : 40
21 : 20
22 : 10
23 : 5
24 : 16
25 : 8
26 : 4
27 : 2
28 : 1
1 29
&lt;/pre&gt;
===For checkNum(25000000)===
&lt;pre&gt;
1 : 12500000
2 : 6250000
3 : 3125000
4 : 1562500
5 : 781250
6 : 390625
7 : 1171876
8 : 585938
9 : 292969
10 : 878908
11 : 439454
12 : 219727
13 : 659182
14 : 329591
15 : 988774
16 : 494387
17 : 1483162
18 : 741581
19 : 2224744
20 : 1112372
21 : 556186
22 : 278093
23 : 834280
24 : 417140
25 : 208570
26 : 104285
27 : 312856
28 : 156428
29 : 78214
30 : 39107
31 : 117322
32 : 58661
33 : 175984
34 : 87992
35 : 43996
36 : 21998
37 : 10999
38 : 32998
39 : 16499
40 : 49498
41 : 24749
42 : 74248
43 : 37124
44 : 18562
45 : 9281
46 : 27844
47 : 13922
48 : 6961
49 : 20884
50 : 10442
51 : 5221
52 : 15664
53 : 7832
54 : 3916
55 : 1958
56 : 979
57 : 2938
58 : 1469
59 : 4408
60 : 2204
61 : 1102
62 : 551
63 : 1654
64 : 827
65 : 2482
66 : 1241
67 : 3724
68 : 1862
69 : 931
70 : 2794
71 : 1397
72 : 4192
73 : 2096
74 : 1048
75 : 524
76 : 262
77 : 131
78 : 394
79 : 197
80 : 592
81 : 296
82 : 148
83 : 74
84 : 37
85 : 112
86 : 56
87 : 28
88 : 14
89 : 7
90 : 22
91 : 11
92 : 34
93 : 17
94 : 52
95 : 26
96 : 13
97 : 40
98 : 20
99 : 10
100 : 5
101 : 16
102 : 8
103 : 4
104 : 2
105 : 1
1 106
&lt;/pre&gt;

Happy Life ahead!!!

[[File:end1.png]]</text>
      <sha1>2qnuzdfjyupfptj0efwasow0igh1tzs</sha1>
    </revision>
    <revision>
      <id>4450</id>
      <parentid>4449</parentid>
      <timestamp>2018-10-17T05:13:05Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* Gragh Drawing Program1 */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="11341">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_12 Contributors of this page]

=Page Rank - How does Google Work=
One web page is having link to other page, that is a page is referring to other page. Google uses ''Page Rank'' algorithm to choose which page should be displayed first.

If we have network, connections as below:
[[File:rank0.png]]

We want to pick a leader out of all these nodes. How to pick a leader?  Why to elect a leader? It is because we want to find the super power of available nodes.                     
[[File:rank1.png]]

For example, the application wherein, we want to find the most impressive person of the  few ones. How to decide it? As shown in below figure, each node will communicate with other, randomly, we implement the count for each node, how many times, the particular node is being visited.
[[File:rank2.png]]

[[#Top]]

As shown in following, figure, all nodes are visited and each node is marked with the 
number i.e.number of times the node is visited.
[[File:rank3.png]]

The node with the maximum count, becomes the winner. Here, node with 120 count in figure 
below, is the winner. i.e. The person with 120 count in the figure is the most impressive 
person in the community being considered.
[[File:rank4.png]]

[[File:rank5.png]]

[[File:rank6.png]]

[[File:rank7.png]]


[[File:rank8.png]]

[[#Top]]

Google selects the page rank in this matter. Each web page is connected to other web page with web links. To a page, maximum link is there, that will be put on top results in Google search results.
[[File:rank9.png]]

Google uses web crawler. The crawler takes the random walk on the www network and rank the web sites.
[[File:rank10.png]]

This way Google ranks the pages and displays search results, according to page rank.
[[File:rank11.png]]

e.g.we search for ''mysore city''. Google has 10,000 results. But it displays the results in the sequence of page rank of search results, As shown in figure below.
[[File:mysore.png]]

[[#Top]]

==Page rank algorithm ==
As shown in beautiful figure below, few nodes combinely selected one as the leader, then that leader and other nodes, have selected         other as a leader. This way, finally the final leader is elected.
[[File:rank12.png|600px]]


[[File:graph00.png|600px]]

[[File:graph01.png|600px]]

==Gragh Drawing Program1==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
nx.barbell_graph(4,2)
G=nx.barbell_graph(4,2)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:Graph003.png|600px]]

[[#Top]]

==Gragh Drawing Program2==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
nx.barbell_graph(4,3)
G=nx.barbell_graph(4,3)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:Graph004.png|600px]]

[[#Top]]

==Gragh Drawing Program3==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
nx.barbell_graph(5,3)
G=nx.barbell_graph(5,3)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:Graph005.png|600px]]

[[#Top]]

==Complete Graph==
Complete graph is a graph, wherein, each node is connected to each other nodes in a graph.

&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.complete_graph(4)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:

[[File:completegraph001.png|600px]]

[[#Top]]

==Cycle graph==

&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.cycle_graph(5)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:

[[File:cyclegraph1.png|600px]]

[[#Top]]

==Ladder graph==

&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.ladder_graph(5)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:

[[File:laddergraph.png|600px]]

[[#Top]]

==Path Graph==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.path_graph(6)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:

[[File:pathgraph.png|600px]]

[[#Top]]

==Star Graph==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.star_graph(5)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:stargraph.png|600px]]

[[#Top]]

==Star Graph of 4 Nodes==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.star_graph(4)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:stargraph4points.png|600px]]

==Wheel Graph==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.wheel_graph(4)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:wheelgraph.png|600px]]

[[#Top]]

==Wheel Graph of 5 nodes==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.wheel_graph(5)
nx.draw(G)
plt.show()

&lt;/pre&gt;

Output:

[[File:wheelgraph5nodes.png|600px]]

[[#Top]]

==Wheel Graph of 6 nodes==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.wheel_graph(6)
nx.draw(G)
plt.show()

&lt;/pre&gt;

Output:

[[File:wheelgraph6nodes.png|600px]]

[[#Top]]

==Random Graph==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.gnp_random_graph(5,0.5)
nx.draw(G)
plt.show()

&lt;/pre&gt;

Output:

[[File:randomgraph1.png|600px]]


Running the same above program, we will get different output, as shown below, as it is random graph.

[[File:randomgraph2.png|600px]]

[[#Top]]

==Page Rank Algorithm Implementation==

===Random Directed Graph===
&lt;pre&gt;
import networkx as nx
import random
import matplotlib.pyplot as plt

#Draw random directed graph
G=nx.gnp_random_graph(10,0.5,directed=True)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output: 

[[File:randomDirectedGraph.png|600px]]


===Random Directed Graph with Labels===
&lt;pre&gt;
import networkx as nx
import random
import matplotlib.pyplot as plt

#Draw random directed graph 
G=nx.gnp_random_graph(10,0.5,directed=True)
#Give label numbering to nodes
nx.draw(G,with_labels=True)
plt.show()

&lt;/pre&gt;

Output:

[[File:randomDirectedGraphwithLabels.png|600px]]


[[#Top]]

===Page Rank Coding===
&lt;pre&gt;
import networkx as nx
import random
import matplotlib.pyplot as plt
import operator

#Draw random directed graph 
G=nx.gnp_random_graph(10,0.5,directed=True)
#Give label numbering to nodes
nx.draw(G,with_labels=True)
plt.show()

#x is the random source node
x=random.choice([i for i in range(G.number_of_nodes())])

#dictionary to maintain counter
dictCounter={}
#initialize the counter of each node as 0
for i in range(G.number_of_nodes()):
    dictCounter[i]=0
dictCounter[x]=dictCounter[x]+1

for i in range(10000):
    listn=list(G.neighbors(x))
    #if x is a sink node, we need to select random node for random walk
    #, else select random neighbor node

    if(len(listn)==0):
        x=random.choice([i for i in range(G.number_of_nodes())])
        dictCounter[x]=dictCounter[x]+1
    else:
        #choose a node randomly from neightbors
        x=random.choice(listn)
        dictCounter[x]=dictCounter[x]+1

p=nx.pagerank(G)
sorted_p=sorted(p.items(),key=operator.itemgetter(1))
sorted_rw=sorted(dictCounter.items(),key=operator.itemgetter(1))                        
#print(p)
#print(dictCounter)

print(sorted_p)
print(sorted_rw)

&lt;/pre&gt;

Output:

&lt;pre&gt;
[(2, 0.07139920240302768), (5, 0.07464882519777695), (3, 0.08527469366832419), 
(6, 0.08665188647066119), (4, 0.0987815549542114), (0, 0.10858415997562518), 
(9, 0.110369696943925), (8, 0.11456211367660116), (1, 0.11682018308814024), 
(7, 0.13290768362170685)]
[(2, 4), (5, 7), (8, 7), (6, 8), (3, 11), (7, 11), (1, 12), (4, 12), (0, 13), (9, 16)]
&lt;/pre&gt;

[[#Top]]

=Email communication Network=

=Collatz Conjecture=
Taught by Sudarshan sir and Amit sir, and Edited by Ms. Ami Tusharkant Choksi

If a number is even, divide it by ''2'', if it is odd, make multiply it by ''3'' and add ''1'', till you get ''1''. This simple problem is called, ''Collatz Conjecture''. 

[[File:collatz1.png|600px]]

[[File:collatz2.png|600px]]

[[File:collatz3.png|600px]]

[[File:collatz4.png|600px]]

[[File:collatz5.png|600px]]

Number is bigger doesn't mean more iterations are required. One can notice, from the output of the following program. 



The program to implement the same is as follows:
==Program==
&lt;pre&gt;
#collatz conjecture
#if num is even, divide it by 2
#if num is odd, new number is equal to 3n+1


def checkNum(num):
    iterations=1
    while(num!=1):
        if(num%2==0):
            num=int(num/2)            
        else:
            num = 3*num+1
        iterations+=1
        

    print(num,iterations)


#checkNum(12)#Output: 1 10
#checkNum(26)#Output: 1 11
checkNum(2000)#Output: 1 113
&lt;/pre&gt;

&lt;pre&gt;

#recursive approach

def checkNum(num):
    if num==1:
        return 1
    elif num%2==0:
        return checkNum(num/2)+1
    else:
        return checkNum(3*num +1)+1


output:
checkNum(26)
Out[27]: 11
checkNum(5000)
Out[28]: 29
&lt;/pre&gt;

==Program adding statement to print all iterations==
&lt;pre&gt;
def checkNum(num):
    iterations=1
    while(num!=1):
        if(num%2==0):
            num=int(num/2)            
        else:
            num = 3*num+1
        print(iterations,&quot;:&quot;,num)
        iterations+=1
        

    print(num,iterations)
&lt;/pre&gt;
==Output==
===For checkNum(2000)===
&lt;pre&gt;
1 : 1000
2 : 500
3 : 250
4 : 125
5 : 376
6 : 188
7 : 94
8 : 47
9 : 142
10 : 71
11 : 214
12 : 107
13 : 322
14 : 161
15 : 484
16 : 242
17 : 121
18 : 364
19 : 182
20 : 91
21 : 274
22 : 137
23 : 412
24 : 206
25 : 103
26 : 310
27 : 155
28 : 466
29 : 233
30 : 700
31 : 350
32 : 175
33 : 526
34 : 263
35 : 790
36 : 395
37 : 1186
38 : 593
39 : 1780
40 : 890
41 : 445
42 : 1336
43 : 668
44 : 334
45 : 167
46 : 502
47 : 251
48 : 754
49 : 377
50 : 1132
51 : 566
52 : 283
53 : 850
54 : 425
55 : 1276
56 : 638
57 : 319
58 : 958
59 : 479
60 : 1438
61 : 719
62 : 2158
63 : 1079
64 : 3238
65 : 1619
66 : 4858
67 : 2429
68 : 7288
69 : 3644
70 : 1822
71 : 911
72 : 2734
73 : 1367
74 : 4102
75 : 2051
76 : 6154
77 : 3077
78 : 9232
79 : 4616
80 : 2308
81 : 1154
82 : 577
83 : 1732
84 : 866
85 : 433
86 : 1300
87 : 650
88 : 325
89 : 976
90 : 488
91 : 244
92 : 122
93 : 61
94 : 184
95 : 92
96 : 46
97 : 23
98 : 70
99 : 35
100 : 106
101 : 53
102 : 160
103 : 80
104 : 40
105 : 20
106 : 10
107 : 5
108 : 16
109 : 8
110 : 4
111 : 2
112 : 1
1 113
&lt;/pre&gt;

===For checkNum(5000)===
&lt;pre&gt;
1 : 2500
2 : 1250
3 : 625
4 : 1876
5 : 938
6 : 469
7 : 1408
8 : 704
9 : 352
10 : 176
11 : 88
12 : 44
13 : 22
14 : 11
15 : 34
16 : 17
17 : 52
18 : 26
19 : 13
20 : 40
21 : 20
22 : 10
23 : 5
24 : 16
25 : 8
26 : 4
27 : 2
28 : 1
1 29
&lt;/pre&gt;
===For checkNum(25000000)===
&lt;pre&gt;
1 : 12500000
2 : 6250000
3 : 3125000
4 : 1562500
5 : 781250
6 : 390625
7 : 1171876
8 : 585938
9 : 292969
10 : 878908
11 : 439454
12 : 219727
13 : 659182
14 : 329591
15 : 988774
16 : 494387
17 : 1483162
18 : 741581
19 : 2224744
20 : 1112372
21 : 556186
22 : 278093
23 : 834280
24 : 417140
25 : 208570
26 : 104285
27 : 312856
28 : 156428
29 : 78214
30 : 39107
31 : 117322
32 : 58661
33 : 175984
34 : 87992
35 : 43996
36 : 21998
37 : 10999
38 : 32998
39 : 16499
40 : 49498
41 : 24749
42 : 74248
43 : 37124
44 : 18562
45 : 9281
46 : 27844
47 : 13922
48 : 6961
49 : 20884
50 : 10442
51 : 5221
52 : 15664
53 : 7832
54 : 3916
55 : 1958
56 : 979
57 : 2938
58 : 1469
59 : 4408
60 : 2204
61 : 1102
62 : 551
63 : 1654
64 : 827
65 : 2482
66 : 1241
67 : 3724
68 : 1862
69 : 931
70 : 2794
71 : 1397
72 : 4192
73 : 2096
74 : 1048
75 : 524
76 : 262
77 : 131
78 : 394
79 : 197
80 : 592
81 : 296
82 : 148
83 : 74
84 : 37
85 : 112
86 : 56
87 : 28
88 : 14
89 : 7
90 : 22
91 : 11
92 : 34
93 : 17
94 : 52
95 : 26
96 : 13
97 : 40
98 : 20
99 : 10
100 : 5
101 : 16
102 : 8
103 : 4
104 : 2
105 : 1
1 106
&lt;/pre&gt;

Happy Life ahead!!!

[[File:end1.png]]</text>
      <sha1>6wizvk1rwp4ogj4r7co6dbrny4h84js</sha1>
    </revision>
    <revision>
      <id>4451</id>
      <parentid>4450</parentid>
      <timestamp>2018-10-17T05:13:23Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* Page rank algorithm */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="11352">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_12 Contributors of this page]

=Page Rank - How does Google Work=
One web page is having link to other page, that is a page is referring to other page. Google uses ''Page Rank'' algorithm to choose which page should be displayed first.

If we have network, connections as below:
[[File:rank0.png]]

We want to pick a leader out of all these nodes. How to pick a leader?  Why to elect a leader? It is because we want to find the super power of available nodes.                     
[[File:rank1.png]]

For example, the application wherein, we want to find the most impressive person of the  few ones. How to decide it? As shown in below figure, each node will communicate with other, randomly, we implement the count for each node, how many times, the particular node is being visited.
[[File:rank2.png]]

[[#Top]]

As shown in following, figure, all nodes are visited and each node is marked with the 
number i.e.number of times the node is visited.
[[File:rank3.png]]

The node with the maximum count, becomes the winner. Here, node with 120 count in figure 
below, is the winner. i.e. The person with 120 count in the figure is the most impressive 
person in the community being considered.
[[File:rank4.png]]

[[File:rank5.png]]

[[File:rank6.png]]

[[File:rank7.png]]


[[File:rank8.png]]

[[#Top]]

Google selects the page rank in this matter. Each web page is connected to other web page with web links. To a page, maximum link is there, that will be put on top results in Google search results.
[[File:rank9.png]]

Google uses web crawler. The crawler takes the random walk on the www network and rank the web sites.
[[File:rank10.png]]

This way Google ranks the pages and displays search results, according to page rank.
[[File:rank11.png]]

e.g.we search for ''mysore city''. Google has 10,000 results. But it displays the results in the sequence of page rank of search results, As shown in figure below.
[[File:mysore.png]]

[[#Top]]

==Page rank algorithm ==
As shown in beautiful figure below, few nodes combinely selected one as the leader, then that leader and other nodes, have selected         other as a leader. This way, finally the final leader is elected.
[[File:rank12.png|600px]]


[[File:graph00.png|600px]]


[[File:graph01.png|600px]]

[[#Top]]

==Gragh Drawing Program1==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
nx.barbell_graph(4,2)
G=nx.barbell_graph(4,2)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:Graph003.png|600px]]

[[#Top]]

==Gragh Drawing Program2==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
nx.barbell_graph(4,3)
G=nx.barbell_graph(4,3)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:Graph004.png|600px]]

[[#Top]]

==Gragh Drawing Program3==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
nx.barbell_graph(5,3)
G=nx.barbell_graph(5,3)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:Graph005.png|600px]]

[[#Top]]

==Complete Graph==
Complete graph is a graph, wherein, each node is connected to each other nodes in a graph.

&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.complete_graph(4)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:

[[File:completegraph001.png|600px]]

[[#Top]]

==Cycle graph==

&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.cycle_graph(5)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:

[[File:cyclegraph1.png|600px]]

[[#Top]]

==Ladder graph==

&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.ladder_graph(5)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:

[[File:laddergraph.png|600px]]

[[#Top]]

==Path Graph==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.path_graph(6)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:

[[File:pathgraph.png|600px]]

[[#Top]]

==Star Graph==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.star_graph(5)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:stargraph.png|600px]]

[[#Top]]

==Star Graph of 4 Nodes==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.star_graph(4)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:stargraph4points.png|600px]]

==Wheel Graph==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.wheel_graph(4)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:wheelgraph.png|600px]]

[[#Top]]

==Wheel Graph of 5 nodes==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.wheel_graph(5)
nx.draw(G)
plt.show()

&lt;/pre&gt;

Output:

[[File:wheelgraph5nodes.png|600px]]

[[#Top]]

==Wheel Graph of 6 nodes==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.wheel_graph(6)
nx.draw(G)
plt.show()

&lt;/pre&gt;

Output:

[[File:wheelgraph6nodes.png|600px]]

[[#Top]]

==Random Graph==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.gnp_random_graph(5,0.5)
nx.draw(G)
plt.show()

&lt;/pre&gt;

Output:

[[File:randomgraph1.png|600px]]


Running the same above program, we will get different output, as shown below, as it is random graph.

[[File:randomgraph2.png|600px]]

[[#Top]]

==Page Rank Algorithm Implementation==

===Random Directed Graph===
&lt;pre&gt;
import networkx as nx
import random
import matplotlib.pyplot as plt

#Draw random directed graph
G=nx.gnp_random_graph(10,0.5,directed=True)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output: 

[[File:randomDirectedGraph.png|600px]]


===Random Directed Graph with Labels===
&lt;pre&gt;
import networkx as nx
import random
import matplotlib.pyplot as plt

#Draw random directed graph 
G=nx.gnp_random_graph(10,0.5,directed=True)
#Give label numbering to nodes
nx.draw(G,with_labels=True)
plt.show()

&lt;/pre&gt;

Output:

[[File:randomDirectedGraphwithLabels.png|600px]]


[[#Top]]

===Page Rank Coding===
&lt;pre&gt;
import networkx as nx
import random
import matplotlib.pyplot as plt
import operator

#Draw random directed graph 
G=nx.gnp_random_graph(10,0.5,directed=True)
#Give label numbering to nodes
nx.draw(G,with_labels=True)
plt.show()

#x is the random source node
x=random.choice([i for i in range(G.number_of_nodes())])

#dictionary to maintain counter
dictCounter={}
#initialize the counter of each node as 0
for i in range(G.number_of_nodes()):
    dictCounter[i]=0
dictCounter[x]=dictCounter[x]+1

for i in range(10000):
    listn=list(G.neighbors(x))
    #if x is a sink node, we need to select random node for random walk
    #, else select random neighbor node

    if(len(listn)==0):
        x=random.choice([i for i in range(G.number_of_nodes())])
        dictCounter[x]=dictCounter[x]+1
    else:
        #choose a node randomly from neightbors
        x=random.choice(listn)
        dictCounter[x]=dictCounter[x]+1

p=nx.pagerank(G)
sorted_p=sorted(p.items(),key=operator.itemgetter(1))
sorted_rw=sorted(dictCounter.items(),key=operator.itemgetter(1))                        
#print(p)
#print(dictCounter)

print(sorted_p)
print(sorted_rw)

&lt;/pre&gt;

Output:

&lt;pre&gt;
[(2, 0.07139920240302768), (5, 0.07464882519777695), (3, 0.08527469366832419), 
(6, 0.08665188647066119), (4, 0.0987815549542114), (0, 0.10858415997562518), 
(9, 0.110369696943925), (8, 0.11456211367660116), (1, 0.11682018308814024), 
(7, 0.13290768362170685)]
[(2, 4), (5, 7), (8, 7), (6, 8), (3, 11), (7, 11), (1, 12), (4, 12), (0, 13), (9, 16)]
&lt;/pre&gt;

[[#Top]]

=Email communication Network=

=Collatz Conjecture=
Taught by Sudarshan sir and Amit sir, and Edited by Ms. Ami Tusharkant Choksi

If a number is even, divide it by ''2'', if it is odd, make multiply it by ''3'' and add ''1'', till you get ''1''. This simple problem is called, ''Collatz Conjecture''. 

[[File:collatz1.png|600px]]

[[File:collatz2.png|600px]]

[[File:collatz3.png|600px]]

[[File:collatz4.png|600px]]

[[File:collatz5.png|600px]]

Number is bigger doesn't mean more iterations are required. One can notice, from the output of the following program. 



The program to implement the same is as follows:
==Program==
&lt;pre&gt;
#collatz conjecture
#if num is even, divide it by 2
#if num is odd, new number is equal to 3n+1


def checkNum(num):
    iterations=1
    while(num!=1):
        if(num%2==0):
            num=int(num/2)            
        else:
            num = 3*num+1
        iterations+=1
        

    print(num,iterations)


#checkNum(12)#Output: 1 10
#checkNum(26)#Output: 1 11
checkNum(2000)#Output: 1 113
&lt;/pre&gt;

&lt;pre&gt;

#recursive approach

def checkNum(num):
    if num==1:
        return 1
    elif num%2==0:
        return checkNum(num/2)+1
    else:
        return checkNum(3*num +1)+1


output:
checkNum(26)
Out[27]: 11
checkNum(5000)
Out[28]: 29
&lt;/pre&gt;

==Program adding statement to print all iterations==
&lt;pre&gt;
def checkNum(num):
    iterations=1
    while(num!=1):
        if(num%2==0):
            num=int(num/2)            
        else:
            num = 3*num+1
        print(iterations,&quot;:&quot;,num)
        iterations+=1
        

    print(num,iterations)
&lt;/pre&gt;
==Output==
===For checkNum(2000)===
&lt;pre&gt;
1 : 1000
2 : 500
3 : 250
4 : 125
5 : 376
6 : 188
7 : 94
8 : 47
9 : 142
10 : 71
11 : 214
12 : 107
13 : 322
14 : 161
15 : 484
16 : 242
17 : 121
18 : 364
19 : 182
20 : 91
21 : 274
22 : 137
23 : 412
24 : 206
25 : 103
26 : 310
27 : 155
28 : 466
29 : 233
30 : 700
31 : 350
32 : 175
33 : 526
34 : 263
35 : 790
36 : 395
37 : 1186
38 : 593
39 : 1780
40 : 890
41 : 445
42 : 1336
43 : 668
44 : 334
45 : 167
46 : 502
47 : 251
48 : 754
49 : 377
50 : 1132
51 : 566
52 : 283
53 : 850
54 : 425
55 : 1276
56 : 638
57 : 319
58 : 958
59 : 479
60 : 1438
61 : 719
62 : 2158
63 : 1079
64 : 3238
65 : 1619
66 : 4858
67 : 2429
68 : 7288
69 : 3644
70 : 1822
71 : 911
72 : 2734
73 : 1367
74 : 4102
75 : 2051
76 : 6154
77 : 3077
78 : 9232
79 : 4616
80 : 2308
81 : 1154
82 : 577
83 : 1732
84 : 866
85 : 433
86 : 1300
87 : 650
88 : 325
89 : 976
90 : 488
91 : 244
92 : 122
93 : 61
94 : 184
95 : 92
96 : 46
97 : 23
98 : 70
99 : 35
100 : 106
101 : 53
102 : 160
103 : 80
104 : 40
105 : 20
106 : 10
107 : 5
108 : 16
109 : 8
110 : 4
111 : 2
112 : 1
1 113
&lt;/pre&gt;

===For checkNum(5000)===
&lt;pre&gt;
1 : 2500
2 : 1250
3 : 625
4 : 1876
5 : 938
6 : 469
7 : 1408
8 : 704
9 : 352
10 : 176
11 : 88
12 : 44
13 : 22
14 : 11
15 : 34
16 : 17
17 : 52
18 : 26
19 : 13
20 : 40
21 : 20
22 : 10
23 : 5
24 : 16
25 : 8
26 : 4
27 : 2
28 : 1
1 29
&lt;/pre&gt;
===For checkNum(25000000)===
&lt;pre&gt;
1 : 12500000
2 : 6250000
3 : 3125000
4 : 1562500
5 : 781250
6 : 390625
7 : 1171876
8 : 585938
9 : 292969
10 : 878908
11 : 439454
12 : 219727
13 : 659182
14 : 329591
15 : 988774
16 : 494387
17 : 1483162
18 : 741581
19 : 2224744
20 : 1112372
21 : 556186
22 : 278093
23 : 834280
24 : 417140
25 : 208570
26 : 104285
27 : 312856
28 : 156428
29 : 78214
30 : 39107
31 : 117322
32 : 58661
33 : 175984
34 : 87992
35 : 43996
36 : 21998
37 : 10999
38 : 32998
39 : 16499
40 : 49498
41 : 24749
42 : 74248
43 : 37124
44 : 18562
45 : 9281
46 : 27844
47 : 13922
48 : 6961
49 : 20884
50 : 10442
51 : 5221
52 : 15664
53 : 7832
54 : 3916
55 : 1958
56 : 979
57 : 2938
58 : 1469
59 : 4408
60 : 2204
61 : 1102
62 : 551
63 : 1654
64 : 827
65 : 2482
66 : 1241
67 : 3724
68 : 1862
69 : 931
70 : 2794
71 : 1397
72 : 4192
73 : 2096
74 : 1048
75 : 524
76 : 262
77 : 131
78 : 394
79 : 197
80 : 592
81 : 296
82 : 148
83 : 74
84 : 37
85 : 112
86 : 56
87 : 28
88 : 14
89 : 7
90 : 22
91 : 11
92 : 34
93 : 17
94 : 52
95 : 26
96 : 13
97 : 40
98 : 20
99 : 10
100 : 5
101 : 16
102 : 8
103 : 4
104 : 2
105 : 1
1 106
&lt;/pre&gt;

Happy Life ahead!!!

[[File:end1.png]]</text>
      <sha1>js1l4c5zpbq9ze5i88et6blg21uhuq0</sha1>
    </revision>
    <revision>
      <id>4452</id>
      <parentid>4451</parentid>
      <timestamp>2018-10-17T05:22:33Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* Email communication Network */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="11392">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_12 Contributors of this page]

=Page Rank - How does Google Work=
One web page is having link to other page, that is a page is referring to other page. Google uses ''Page Rank'' algorithm to choose which page should be displayed first.

If we have network, connections as below:
[[File:rank0.png]]

We want to pick a leader out of all these nodes. How to pick a leader?  Why to elect a leader? It is because we want to find the super power of available nodes.                     
[[File:rank1.png]]

For example, the application wherein, we want to find the most impressive person of the  few ones. How to decide it? As shown in below figure, each node will communicate with other, randomly, we implement the count for each node, how many times, the particular node is being visited.
[[File:rank2.png]]

[[#Top]]

As shown in following, figure, all nodes are visited and each node is marked with the 
number i.e.number of times the node is visited.
[[File:rank3.png]]

The node with the maximum count, becomes the winner. Here, node with 120 count in figure 
below, is the winner. i.e. The person with 120 count in the figure is the most impressive 
person in the community being considered.
[[File:rank4.png]]

[[File:rank5.png]]

[[File:rank6.png]]

[[File:rank7.png]]


[[File:rank8.png]]

[[#Top]]

Google selects the page rank in this matter. Each web page is connected to other web page with web links. To a page, maximum link is there, that will be put on top results in Google search results.
[[File:rank9.png]]

Google uses web crawler. The crawler takes the random walk on the www network and rank the web sites.
[[File:rank10.png]]

This way Google ranks the pages and displays search results, according to page rank.
[[File:rank11.png]]

e.g.we search for ''mysore city''. Google has 10,000 results. But it displays the results in the sequence of page rank of search results, As shown in figure below.
[[File:mysore.png]]

[[#Top]]

==Page rank algorithm ==
As shown in beautiful figure below, few nodes combinely selected one as the leader, then that leader and other nodes, have selected         other as a leader. This way, finally the final leader is elected.
[[File:rank12.png|600px]]


[[File:graph00.png|600px]]


[[File:graph01.png|600px]]

[[#Top]]

==Gragh Drawing Program1==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
nx.barbell_graph(4,2)
G=nx.barbell_graph(4,2)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:Graph003.png|600px]]

[[#Top]]

==Gragh Drawing Program2==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
nx.barbell_graph(4,3)
G=nx.barbell_graph(4,3)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:Graph004.png|600px]]

[[#Top]]

==Gragh Drawing Program3==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
nx.barbell_graph(5,3)
G=nx.barbell_graph(5,3)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:Graph005.png|600px]]

[[#Top]]

==Complete Graph==
Complete graph is a graph, wherein, each node is connected to each other nodes in a graph.

&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.complete_graph(4)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:

[[File:completegraph001.png|600px]]

[[#Top]]

==Cycle graph==

&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.cycle_graph(5)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:

[[File:cyclegraph1.png|600px]]

[[#Top]]

==Ladder graph==

&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.ladder_graph(5)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:

[[File:laddergraph.png|600px]]

[[#Top]]

==Path Graph==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.path_graph(6)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:

[[File:pathgraph.png|600px]]

[[#Top]]

==Star Graph==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.star_graph(5)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:stargraph.png|600px]]

[[#Top]]

==Star Graph of 4 Nodes==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.star_graph(4)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:stargraph4points.png|600px]]

==Wheel Graph==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.wheel_graph(4)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:wheelgraph.png|600px]]

[[#Top]]

==Wheel Graph of 5 nodes==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.wheel_graph(5)
nx.draw(G)
plt.show()

&lt;/pre&gt;

Output:

[[File:wheelgraph5nodes.png|600px]]

[[#Top]]

==Wheel Graph of 6 nodes==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.wheel_graph(6)
nx.draw(G)
plt.show()

&lt;/pre&gt;

Output:

[[File:wheelgraph6nodes.png|600px]]

[[#Top]]

==Random Graph==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.gnp_random_graph(5,0.5)
nx.draw(G)
plt.show()

&lt;/pre&gt;

Output:

[[File:randomgraph1.png|600px]]


Running the same above program, we will get different output, as shown below, as it is random graph.

[[File:randomgraph2.png|600px]]

[[#Top]]

==Page Rank Algorithm Implementation==

===Random Directed Graph===
&lt;pre&gt;
import networkx as nx
import random
import matplotlib.pyplot as plt

#Draw random directed graph
G=nx.gnp_random_graph(10,0.5,directed=True)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output: 

[[File:randomDirectedGraph.png|600px]]


===Random Directed Graph with Labels===
&lt;pre&gt;
import networkx as nx
import random
import matplotlib.pyplot as plt

#Draw random directed graph 
G=nx.gnp_random_graph(10,0.5,directed=True)
#Give label numbering to nodes
nx.draw(G,with_labels=True)
plt.show()

&lt;/pre&gt;

Output:

[[File:randomDirectedGraphwithLabels.png|600px]]


[[#Top]]

===Page Rank Coding===
&lt;pre&gt;
import networkx as nx
import random
import matplotlib.pyplot as plt
import operator

#Draw random directed graph 
G=nx.gnp_random_graph(10,0.5,directed=True)
#Give label numbering to nodes
nx.draw(G,with_labels=True)
plt.show()

#x is the random source node
x=random.choice([i for i in range(G.number_of_nodes())])

#dictionary to maintain counter
dictCounter={}
#initialize the counter of each node as 0
for i in range(G.number_of_nodes()):
    dictCounter[i]=0
dictCounter[x]=dictCounter[x]+1

for i in range(10000):
    listn=list(G.neighbors(x))
    #if x is a sink node, we need to select random node for random walk
    #, else select random neighbor node

    if(len(listn)==0):
        x=random.choice([i for i in range(G.number_of_nodes())])
        dictCounter[x]=dictCounter[x]+1
    else:
        #choose a node randomly from neightbors
        x=random.choice(listn)
        dictCounter[x]=dictCounter[x]+1

p=nx.pagerank(G)
sorted_p=sorted(p.items(),key=operator.itemgetter(1))
sorted_rw=sorted(dictCounter.items(),key=operator.itemgetter(1))                        
#print(p)
#print(dictCounter)

print(sorted_p)
print(sorted_rw)

&lt;/pre&gt;

Output:

&lt;pre&gt;
[(2, 0.07139920240302768), (5, 0.07464882519777695), (3, 0.08527469366832419), 
(6, 0.08665188647066119), (4, 0.0987815549542114), (0, 0.10858415997562518), 
(9, 0.110369696943925), (8, 0.11456211367660116), (1, 0.11682018308814024), 
(7, 0.13290768362170685)]
[(2, 4), (5, 7), (8, 7), (6, 8), (3, 11), (7, 11), (1, 12), (4, 12), (0, 13), (9, 16)]
&lt;/pre&gt;

[[#Top]]

=Email communication Network=
==Page rank :page distribution method==

=Collatz Conjecture=
Taught by Sudarshan sir and Amit sir, and Edited by Ms. Ami Tusharkant Choksi

If a number is even, divide it by ''2'', if it is odd, make multiply it by ''3'' and add ''1'', till you get ''1''. This simple problem is called, ''Collatz Conjecture''. 

[[File:collatz1.png|600px]]

[[File:collatz2.png|600px]]

[[File:collatz3.png|600px]]

[[File:collatz4.png|600px]]

[[File:collatz5.png|600px]]

Number is bigger doesn't mean more iterations are required. One can notice, from the output of the following program. 



The program to implement the same is as follows:
==Program==
&lt;pre&gt;
#collatz conjecture
#if num is even, divide it by 2
#if num is odd, new number is equal to 3n+1


def checkNum(num):
    iterations=1
    while(num!=1):
        if(num%2==0):
            num=int(num/2)            
        else:
            num = 3*num+1
        iterations+=1
        

    print(num,iterations)


#checkNum(12)#Output: 1 10
#checkNum(26)#Output: 1 11
checkNum(2000)#Output: 1 113
&lt;/pre&gt;

&lt;pre&gt;

#recursive approach

def checkNum(num):
    if num==1:
        return 1
    elif num%2==0:
        return checkNum(num/2)+1
    else:
        return checkNum(3*num +1)+1


output:
checkNum(26)
Out[27]: 11
checkNum(5000)
Out[28]: 29
&lt;/pre&gt;

==Program adding statement to print all iterations==
&lt;pre&gt;
def checkNum(num):
    iterations=1
    while(num!=1):
        if(num%2==0):
            num=int(num/2)            
        else:
            num = 3*num+1
        print(iterations,&quot;:&quot;,num)
        iterations+=1
        

    print(num,iterations)
&lt;/pre&gt;
==Output==
===For checkNum(2000)===
&lt;pre&gt;
1 : 1000
2 : 500
3 : 250
4 : 125
5 : 376
6 : 188
7 : 94
8 : 47
9 : 142
10 : 71
11 : 214
12 : 107
13 : 322
14 : 161
15 : 484
16 : 242
17 : 121
18 : 364
19 : 182
20 : 91
21 : 274
22 : 137
23 : 412
24 : 206
25 : 103
26 : 310
27 : 155
28 : 466
29 : 233
30 : 700
31 : 350
32 : 175
33 : 526
34 : 263
35 : 790
36 : 395
37 : 1186
38 : 593
39 : 1780
40 : 890
41 : 445
42 : 1336
43 : 668
44 : 334
45 : 167
46 : 502
47 : 251
48 : 754
49 : 377
50 : 1132
51 : 566
52 : 283
53 : 850
54 : 425
55 : 1276
56 : 638
57 : 319
58 : 958
59 : 479
60 : 1438
61 : 719
62 : 2158
63 : 1079
64 : 3238
65 : 1619
66 : 4858
67 : 2429
68 : 7288
69 : 3644
70 : 1822
71 : 911
72 : 2734
73 : 1367
74 : 4102
75 : 2051
76 : 6154
77 : 3077
78 : 9232
79 : 4616
80 : 2308
81 : 1154
82 : 577
83 : 1732
84 : 866
85 : 433
86 : 1300
87 : 650
88 : 325
89 : 976
90 : 488
91 : 244
92 : 122
93 : 61
94 : 184
95 : 92
96 : 46
97 : 23
98 : 70
99 : 35
100 : 106
101 : 53
102 : 160
103 : 80
104 : 40
105 : 20
106 : 10
107 : 5
108 : 16
109 : 8
110 : 4
111 : 2
112 : 1
1 113
&lt;/pre&gt;

===For checkNum(5000)===
&lt;pre&gt;
1 : 2500
2 : 1250
3 : 625
4 : 1876
5 : 938
6 : 469
7 : 1408
8 : 704
9 : 352
10 : 176
11 : 88
12 : 44
13 : 22
14 : 11
15 : 34
16 : 17
17 : 52
18 : 26
19 : 13
20 : 40
21 : 20
22 : 10
23 : 5
24 : 16
25 : 8
26 : 4
27 : 2
28 : 1
1 29
&lt;/pre&gt;
===For checkNum(25000000)===
&lt;pre&gt;
1 : 12500000
2 : 6250000
3 : 3125000
4 : 1562500
5 : 781250
6 : 390625
7 : 1171876
8 : 585938
9 : 292969
10 : 878908
11 : 439454
12 : 219727
13 : 659182
14 : 329591
15 : 988774
16 : 494387
17 : 1483162
18 : 741581
19 : 2224744
20 : 1112372
21 : 556186
22 : 278093
23 : 834280
24 : 417140
25 : 208570
26 : 104285
27 : 312856
28 : 156428
29 : 78214
30 : 39107
31 : 117322
32 : 58661
33 : 175984
34 : 87992
35 : 43996
36 : 21998
37 : 10999
38 : 32998
39 : 16499
40 : 49498
41 : 24749
42 : 74248
43 : 37124
44 : 18562
45 : 9281
46 : 27844
47 : 13922
48 : 6961
49 : 20884
50 : 10442
51 : 5221
52 : 15664
53 : 7832
54 : 3916
55 : 1958
56 : 979
57 : 2938
58 : 1469
59 : 4408
60 : 2204
61 : 1102
62 : 551
63 : 1654
64 : 827
65 : 2482
66 : 1241
67 : 3724
68 : 1862
69 : 931
70 : 2794
71 : 1397
72 : 4192
73 : 2096
74 : 1048
75 : 524
76 : 262
77 : 131
78 : 394
79 : 197
80 : 592
81 : 296
82 : 148
83 : 74
84 : 37
85 : 112
86 : 56
87 : 28
88 : 14
89 : 7
90 : 22
91 : 11
92 : 34
93 : 17
94 : 52
95 : 26
96 : 13
97 : 40
98 : 20
99 : 10
100 : 5
101 : 16
102 : 8
103 : 4
104 : 2
105 : 1
1 106
&lt;/pre&gt;

Happy Life ahead!!!

[[File:end1.png]]</text>
      <sha1>mqaoadszdgkecxci9akqofhx0jigui7</sha1>
    </revision>
    <revision>
      <id>4453</id>
      <parentid>4452</parentid>
      <timestamp>2018-10-17T05:32:11Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* Page rank :page distribution method */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="11644">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_12 Contributors of this page]

=Page Rank - How does Google Work=
One web page is having link to other page, that is a page is referring to other page. Google uses ''Page Rank'' algorithm to choose which page should be displayed first.

If we have network, connections as below:
[[File:rank0.png]]

We want to pick a leader out of all these nodes. How to pick a leader?  Why to elect a leader? It is because we want to find the super power of available nodes.                     
[[File:rank1.png]]

For example, the application wherein, we want to find the most impressive person of the  few ones. How to decide it? As shown in below figure, each node will communicate with other, randomly, we implement the count for each node, how many times, the particular node is being visited.
[[File:rank2.png]]

[[#Top]]

As shown in following, figure, all nodes are visited and each node is marked with the 
number i.e.number of times the node is visited.
[[File:rank3.png]]

The node with the maximum count, becomes the winner. Here, node with 120 count in figure 
below, is the winner. i.e. The person with 120 count in the figure is the most impressive 
person in the community being considered.
[[File:rank4.png]]

[[File:rank5.png]]

[[File:rank6.png]]

[[File:rank7.png]]


[[File:rank8.png]]

[[#Top]]

Google selects the page rank in this matter. Each web page is connected to other web page with web links. To a page, maximum link is there, that will be put on top results in Google search results.
[[File:rank9.png]]

Google uses web crawler. The crawler takes the random walk on the www network and rank the web sites.
[[File:rank10.png]]

This way Google ranks the pages and displays search results, according to page rank.
[[File:rank11.png]]

e.g.we search for ''mysore city''. Google has 10,000 results. But it displays the results in the sequence of page rank of search results, As shown in figure below.
[[File:mysore.png]]

[[#Top]]

==Page rank algorithm ==
As shown in beautiful figure below, few nodes combinely selected one as the leader, then that leader and other nodes, have selected         other as a leader. This way, finally the final leader is elected.
[[File:rank12.png|600px]]


[[File:graph00.png|600px]]


[[File:graph01.png|600px]]

[[#Top]]

==Gragh Drawing Program1==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
nx.barbell_graph(4,2)
G=nx.barbell_graph(4,2)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:Graph003.png|600px]]

[[#Top]]

==Gragh Drawing Program2==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
nx.barbell_graph(4,3)
G=nx.barbell_graph(4,3)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:Graph004.png|600px]]

[[#Top]]

==Gragh Drawing Program3==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
nx.barbell_graph(5,3)
G=nx.barbell_graph(5,3)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:Graph005.png|600px]]

[[#Top]]

==Complete Graph==
Complete graph is a graph, wherein, each node is connected to each other nodes in a graph.

&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.complete_graph(4)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:

[[File:completegraph001.png|600px]]

[[#Top]]

==Cycle graph==

&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.cycle_graph(5)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:

[[File:cyclegraph1.png|600px]]

[[#Top]]

==Ladder graph==

&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.ladder_graph(5)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:

[[File:laddergraph.png|600px]]

[[#Top]]

==Path Graph==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.path_graph(6)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:

[[File:pathgraph.png|600px]]

[[#Top]]

==Star Graph==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.star_graph(5)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:stargraph.png|600px]]

[[#Top]]

==Star Graph of 4 Nodes==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.star_graph(4)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:stargraph4points.png|600px]]

==Wheel Graph==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.wheel_graph(4)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:wheelgraph.png|600px]]

[[#Top]]

==Wheel Graph of 5 nodes==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.wheel_graph(5)
nx.draw(G)
plt.show()

&lt;/pre&gt;

Output:

[[File:wheelgraph5nodes.png|600px]]

[[#Top]]

==Wheel Graph of 6 nodes==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.wheel_graph(6)
nx.draw(G)
plt.show()

&lt;/pre&gt;

Output:

[[File:wheelgraph6nodes.png|600px]]

[[#Top]]

==Random Graph==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.gnp_random_graph(5,0.5)
nx.draw(G)
plt.show()

&lt;/pre&gt;

Output:

[[File:randomgraph1.png|600px]]


Running the same above program, we will get different output, as shown below, as it is random graph.

[[File:randomgraph2.png|600px]]

[[#Top]]

==Page Rank Algorithm Implementation==

===Random Directed Graph===
&lt;pre&gt;
import networkx as nx
import random
import matplotlib.pyplot as plt

#Draw random directed graph
G=nx.gnp_random_graph(10,0.5,directed=True)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output: 

[[File:randomDirectedGraph.png|600px]]


===Random Directed Graph with Labels===
&lt;pre&gt;
import networkx as nx
import random
import matplotlib.pyplot as plt

#Draw random directed graph 
G=nx.gnp_random_graph(10,0.5,directed=True)
#Give label numbering to nodes
nx.draw(G,with_labels=True)
plt.show()

&lt;/pre&gt;

Output:

[[File:randomDirectedGraphwithLabels.png|600px]]


[[#Top]]

===Page Rank Coding===
&lt;pre&gt;
import networkx as nx
import random
import matplotlib.pyplot as plt
import operator

#Draw random directed graph 
G=nx.gnp_random_graph(10,0.5,directed=True)
#Give label numbering to nodes
nx.draw(G,with_labels=True)
plt.show()

#x is the random source node
x=random.choice([i for i in range(G.number_of_nodes())])

#dictionary to maintain counter
dictCounter={}
#initialize the counter of each node as 0
for i in range(G.number_of_nodes()):
    dictCounter[i]=0
dictCounter[x]=dictCounter[x]+1

for i in range(10000):
    listn=list(G.neighbors(x))
    #if x is a sink node, we need to select random node for random walk
    #, else select random neighbor node

    if(len(listn)==0):
        x=random.choice([i for i in range(G.number_of_nodes())])
        dictCounter[x]=dictCounter[x]+1
    else:
        #choose a node randomly from neightbors
        x=random.choice(listn)
        dictCounter[x]=dictCounter[x]+1

p=nx.pagerank(G)
sorted_p=sorted(p.items(),key=operator.itemgetter(1))
sorted_rw=sorted(dictCounter.items(),key=operator.itemgetter(1))                        
#print(p)
#print(dictCounter)

print(sorted_p)
print(sorted_rw)

&lt;/pre&gt;

Output:

&lt;pre&gt;
[(2, 0.07139920240302768), (5, 0.07464882519777695), (3, 0.08527469366832419), 
(6, 0.08665188647066119), (4, 0.0987815549542114), (0, 0.10858415997562518), 
(9, 0.110369696943925), (8, 0.11456211367660116), (1, 0.11682018308814024), 
(7, 0.13290768362170685)]
[(2, 4), (5, 7), (8, 7), (6, 8), (3, 11), (7, 11), (1, 12), (4, 12), (0, 13), (9, 16)]
&lt;/pre&gt;

[[#Top]]

=Email communication Network=
==Page rank :page distribution method==
===Revision: Graph===
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
G=nx.cycle_graph(4)
labels={0:&quot;Bangluru&quot;,1:&quot;Gawhati&quot;,2:&quot;Kolkata&quot;,3:&quot;Chennai&quot;}
nx.draw(G,with_labels=True,labels=labels)
plt.show()
&lt;/pre&gt;

Output:

[[File:revGRAPH.png]]

=Collatz Conjecture=
Taught by Sudarshan sir and Amit sir, and Edited by Ms. Ami Tusharkant Choksi

If a number is even, divide it by ''2'', if it is odd, make multiply it by ''3'' and add ''1'', till you get ''1''. This simple problem is called, ''Collatz Conjecture''. 

[[File:collatz1.png|600px]]

[[File:collatz2.png|600px]]

[[File:collatz3.png|600px]]

[[File:collatz4.png|600px]]

[[File:collatz5.png|600px]]

Number is bigger doesn't mean more iterations are required. One can notice, from the output of the following program. 



The program to implement the same is as follows:
==Program==
&lt;pre&gt;
#collatz conjecture
#if num is even, divide it by 2
#if num is odd, new number is equal to 3n+1


def checkNum(num):
    iterations=1
    while(num!=1):
        if(num%2==0):
            num=int(num/2)            
        else:
            num = 3*num+1
        iterations+=1
        

    print(num,iterations)


#checkNum(12)#Output: 1 10
#checkNum(26)#Output: 1 11
checkNum(2000)#Output: 1 113
&lt;/pre&gt;

&lt;pre&gt;

#recursive approach

def checkNum(num):
    if num==1:
        return 1
    elif num%2==0:
        return checkNum(num/2)+1
    else:
        return checkNum(3*num +1)+1


output:
checkNum(26)
Out[27]: 11
checkNum(5000)
Out[28]: 29
&lt;/pre&gt;

==Program adding statement to print all iterations==
&lt;pre&gt;
def checkNum(num):
    iterations=1
    while(num!=1):
        if(num%2==0):
            num=int(num/2)            
        else:
            num = 3*num+1
        print(iterations,&quot;:&quot;,num)
        iterations+=1
        

    print(num,iterations)
&lt;/pre&gt;
==Output==
===For checkNum(2000)===
&lt;pre&gt;
1 : 1000
2 : 500
3 : 250
4 : 125
5 : 376
6 : 188
7 : 94
8 : 47
9 : 142
10 : 71
11 : 214
12 : 107
13 : 322
14 : 161
15 : 484
16 : 242
17 : 121
18 : 364
19 : 182
20 : 91
21 : 274
22 : 137
23 : 412
24 : 206
25 : 103
26 : 310
27 : 155
28 : 466
29 : 233
30 : 700
31 : 350
32 : 175
33 : 526
34 : 263
35 : 790
36 : 395
37 : 1186
38 : 593
39 : 1780
40 : 890
41 : 445
42 : 1336
43 : 668
44 : 334
45 : 167
46 : 502
47 : 251
48 : 754
49 : 377
50 : 1132
51 : 566
52 : 283
53 : 850
54 : 425
55 : 1276
56 : 638
57 : 319
58 : 958
59 : 479
60 : 1438
61 : 719
62 : 2158
63 : 1079
64 : 3238
65 : 1619
66 : 4858
67 : 2429
68 : 7288
69 : 3644
70 : 1822
71 : 911
72 : 2734
73 : 1367
74 : 4102
75 : 2051
76 : 6154
77 : 3077
78 : 9232
79 : 4616
80 : 2308
81 : 1154
82 : 577
83 : 1732
84 : 866
85 : 433
86 : 1300
87 : 650
88 : 325
89 : 976
90 : 488
91 : 244
92 : 122
93 : 61
94 : 184
95 : 92
96 : 46
97 : 23
98 : 70
99 : 35
100 : 106
101 : 53
102 : 160
103 : 80
104 : 40
105 : 20
106 : 10
107 : 5
108 : 16
109 : 8
110 : 4
111 : 2
112 : 1
1 113
&lt;/pre&gt;

===For checkNum(5000)===
&lt;pre&gt;
1 : 2500
2 : 1250
3 : 625
4 : 1876
5 : 938
6 : 469
7 : 1408
8 : 704
9 : 352
10 : 176
11 : 88
12 : 44
13 : 22
14 : 11
15 : 34
16 : 17
17 : 52
18 : 26
19 : 13
20 : 40
21 : 20
22 : 10
23 : 5
24 : 16
25 : 8
26 : 4
27 : 2
28 : 1
1 29
&lt;/pre&gt;
===For checkNum(25000000)===
&lt;pre&gt;
1 : 12500000
2 : 6250000
3 : 3125000
4 : 1562500
5 : 781250
6 : 390625
7 : 1171876
8 : 585938
9 : 292969
10 : 878908
11 : 439454
12 : 219727
13 : 659182
14 : 329591
15 : 988774
16 : 494387
17 : 1483162
18 : 741581
19 : 2224744
20 : 1112372
21 : 556186
22 : 278093
23 : 834280
24 : 417140
25 : 208570
26 : 104285
27 : 312856
28 : 156428
29 : 78214
30 : 39107
31 : 117322
32 : 58661
33 : 175984
34 : 87992
35 : 43996
36 : 21998
37 : 10999
38 : 32998
39 : 16499
40 : 49498
41 : 24749
42 : 74248
43 : 37124
44 : 18562
45 : 9281
46 : 27844
47 : 13922
48 : 6961
49 : 20884
50 : 10442
51 : 5221
52 : 15664
53 : 7832
54 : 3916
55 : 1958
56 : 979
57 : 2938
58 : 1469
59 : 4408
60 : 2204
61 : 1102
62 : 551
63 : 1654
64 : 827
65 : 2482
66 : 1241
67 : 3724
68 : 1862
69 : 931
70 : 2794
71 : 1397
72 : 4192
73 : 2096
74 : 1048
75 : 524
76 : 262
77 : 131
78 : 394
79 : 197
80 : 592
81 : 296
82 : 148
83 : 74
84 : 37
85 : 112
86 : 56
87 : 28
88 : 14
89 : 7
90 : 22
91 : 11
92 : 34
93 : 17
94 : 52
95 : 26
96 : 13
97 : 40
98 : 20
99 : 10
100 : 5
101 : 16
102 : 8
103 : 4
104 : 2
105 : 1
1 106
&lt;/pre&gt;

Happy Life ahead!!!

[[File:end1.png]]</text>
      <sha1>s9cw6ixb57d6c2jfr4jd7f9nk04gc0f</sha1>
    </revision>
    <revision>
      <id>4455</id>
      <parentid>4453</parentid>
      <timestamp>2018-10-17T05:39:34Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* Revision: Graph */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="11707">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_12 Contributors of this page]

=Page Rank - How does Google Work=
One web page is having link to other page, that is a page is referring to other page. Google uses ''Page Rank'' algorithm to choose which page should be displayed first.

If we have network, connections as below:
[[File:rank0.png]]

We want to pick a leader out of all these nodes. How to pick a leader?  Why to elect a leader? It is because we want to find the super power of available nodes.                     
[[File:rank1.png]]

For example, the application wherein, we want to find the most impressive person of the  few ones. How to decide it? As shown in below figure, each node will communicate with other, randomly, we implement the count for each node, how many times, the particular node is being visited.
[[File:rank2.png]]

[[#Top]]

As shown in following, figure, all nodes are visited and each node is marked with the 
number i.e.number of times the node is visited.
[[File:rank3.png]]

The node with the maximum count, becomes the winner. Here, node with 120 count in figure 
below, is the winner. i.e. The person with 120 count in the figure is the most impressive 
person in the community being considered.
[[File:rank4.png]]

[[File:rank5.png]]

[[File:rank6.png]]

[[File:rank7.png]]


[[File:rank8.png]]

[[#Top]]

Google selects the page rank in this matter. Each web page is connected to other web page with web links. To a page, maximum link is there, that will be put on top results in Google search results.
[[File:rank9.png]]

Google uses web crawler. The crawler takes the random walk on the www network and rank the web sites.
[[File:rank10.png]]

This way Google ranks the pages and displays search results, according to page rank.
[[File:rank11.png]]

e.g.we search for ''mysore city''. Google has 10,000 results. But it displays the results in the sequence of page rank of search results, As shown in figure below.
[[File:mysore.png]]

[[#Top]]

==Page rank algorithm ==
As shown in beautiful figure below, few nodes combinely selected one as the leader, then that leader and other nodes, have selected         other as a leader. This way, finally the final leader is elected.
[[File:rank12.png|600px]]


[[File:graph00.png|600px]]


[[File:graph01.png|600px]]

[[#Top]]

==Gragh Drawing Program1==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
nx.barbell_graph(4,2)
G=nx.barbell_graph(4,2)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:Graph003.png|600px]]

[[#Top]]

==Gragh Drawing Program2==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
nx.barbell_graph(4,3)
G=nx.barbell_graph(4,3)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:Graph004.png|600px]]

[[#Top]]

==Gragh Drawing Program3==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
nx.barbell_graph(5,3)
G=nx.barbell_graph(5,3)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:Graph005.png|600px]]

[[#Top]]

==Complete Graph==
Complete graph is a graph, wherein, each node is connected to each other nodes in a graph.

&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.complete_graph(4)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:

[[File:completegraph001.png|600px]]

[[#Top]]

==Cycle graph==

&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.cycle_graph(5)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:

[[File:cyclegraph1.png|600px]]

[[#Top]]

==Ladder graph==

&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.ladder_graph(5)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:

[[File:laddergraph.png|600px]]

[[#Top]]

==Path Graph==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.path_graph(6)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:

[[File:pathgraph.png|600px]]

[[#Top]]

==Star Graph==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.star_graph(5)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:stargraph.png|600px]]

[[#Top]]

==Star Graph of 4 Nodes==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.star_graph(4)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:stargraph4points.png|600px]]

==Wheel Graph==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.wheel_graph(4)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:wheelgraph.png|600px]]

[[#Top]]

==Wheel Graph of 5 nodes==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.wheel_graph(5)
nx.draw(G)
plt.show()

&lt;/pre&gt;

Output:

[[File:wheelgraph5nodes.png|600px]]

[[#Top]]

==Wheel Graph of 6 nodes==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.wheel_graph(6)
nx.draw(G)
plt.show()

&lt;/pre&gt;

Output:

[[File:wheelgraph6nodes.png|600px]]

[[#Top]]

==Random Graph==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.gnp_random_graph(5,0.5)
nx.draw(G)
plt.show()

&lt;/pre&gt;

Output:

[[File:randomgraph1.png|600px]]


Running the same above program, we will get different output, as shown below, as it is random graph.

[[File:randomgraph2.png|600px]]

[[#Top]]

==Page Rank Algorithm Implementation==

===Random Directed Graph===
&lt;pre&gt;
import networkx as nx
import random
import matplotlib.pyplot as plt

#Draw random directed graph
G=nx.gnp_random_graph(10,0.5,directed=True)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output: 

[[File:randomDirectedGraph.png|600px]]


===Random Directed Graph with Labels===
&lt;pre&gt;
import networkx as nx
import random
import matplotlib.pyplot as plt

#Draw random directed graph 
G=nx.gnp_random_graph(10,0.5,directed=True)
#Give label numbering to nodes
nx.draw(G,with_labels=True)
plt.show()

&lt;/pre&gt;

Output:

[[File:randomDirectedGraphwithLabels.png|600px]]


[[#Top]]

===Page Rank Coding===
&lt;pre&gt;
import networkx as nx
import random
import matplotlib.pyplot as plt
import operator

#Draw random directed graph 
G=nx.gnp_random_graph(10,0.5,directed=True)
#Give label numbering to nodes
nx.draw(G,with_labels=True)
plt.show()

#x is the random source node
x=random.choice([i for i in range(G.number_of_nodes())])

#dictionary to maintain counter
dictCounter={}
#initialize the counter of each node as 0
for i in range(G.number_of_nodes()):
    dictCounter[i]=0
dictCounter[x]=dictCounter[x]+1

for i in range(10000):
    listn=list(G.neighbors(x))
    #if x is a sink node, we need to select random node for random walk
    #, else select random neighbor node

    if(len(listn)==0):
        x=random.choice([i for i in range(G.number_of_nodes())])
        dictCounter[x]=dictCounter[x]+1
    else:
        #choose a node randomly from neightbors
        x=random.choice(listn)
        dictCounter[x]=dictCounter[x]+1

p=nx.pagerank(G)
sorted_p=sorted(p.items(),key=operator.itemgetter(1))
sorted_rw=sorted(dictCounter.items(),key=operator.itemgetter(1))                        
#print(p)
#print(dictCounter)

print(sorted_p)
print(sorted_rw)

&lt;/pre&gt;

Output:

&lt;pre&gt;
[(2, 0.07139920240302768), (5, 0.07464882519777695), (3, 0.08527469366832419), 
(6, 0.08665188647066119), (4, 0.0987815549542114), (0, 0.10858415997562518), 
(9, 0.110369696943925), (8, 0.11456211367660116), (1, 0.11682018308814024), 
(7, 0.13290768362170685)]
[(2, 4), (5, 7), (8, 7), (6, 8), (3, 11), (7, 11), (1, 12), (4, 12), (0, 13), (9, 16)]
&lt;/pre&gt;

[[#Top]]

=Email communication Network=
==Page rank :page distribution method==
===Revision: Graph===
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
G=nx.cycle_graph(4)
labels={0:&quot;Bangluru&quot;,1:&quot;Gawhati&quot;,2:&quot;Kolkata&quot;,3:&quot;Chennai&quot;}
nx.draw(G,with_labels=True,labels=labels)
plt.show()
&lt;/pre&gt;

Output:

[[File:revGRAPH.png]]


===Directed Graph  Example===

[[File:directedGraphExample]]

=Collatz Conjecture=
Taught by Sudarshan sir and Amit sir, and Edited by Ms. Ami Tusharkant Choksi

If a number is even, divide it by ''2'', if it is odd, make multiply it by ''3'' and add ''1'', till you get ''1''. This simple problem is called, ''Collatz Conjecture''. 

[[File:collatz1.png|600px]]

[[File:collatz2.png|600px]]

[[File:collatz3.png|600px]]

[[File:collatz4.png|600px]]

[[File:collatz5.png|600px]]

Number is bigger doesn't mean more iterations are required. One can notice, from the output of the following program. 



The program to implement the same is as follows:
==Program==
&lt;pre&gt;
#collatz conjecture
#if num is even, divide it by 2
#if num is odd, new number is equal to 3n+1


def checkNum(num):
    iterations=1
    while(num!=1):
        if(num%2==0):
            num=int(num/2)            
        else:
            num = 3*num+1
        iterations+=1
        

    print(num,iterations)


#checkNum(12)#Output: 1 10
#checkNum(26)#Output: 1 11
checkNum(2000)#Output: 1 113
&lt;/pre&gt;

&lt;pre&gt;

#recursive approach

def checkNum(num):
    if num==1:
        return 1
    elif num%2==0:
        return checkNum(num/2)+1
    else:
        return checkNum(3*num +1)+1


output:
checkNum(26)
Out[27]: 11
checkNum(5000)
Out[28]: 29
&lt;/pre&gt;

==Program adding statement to print all iterations==
&lt;pre&gt;
def checkNum(num):
    iterations=1
    while(num!=1):
        if(num%2==0):
            num=int(num/2)            
        else:
            num = 3*num+1
        print(iterations,&quot;:&quot;,num)
        iterations+=1
        

    print(num,iterations)
&lt;/pre&gt;
==Output==
===For checkNum(2000)===
&lt;pre&gt;
1 : 1000
2 : 500
3 : 250
4 : 125
5 : 376
6 : 188
7 : 94
8 : 47
9 : 142
10 : 71
11 : 214
12 : 107
13 : 322
14 : 161
15 : 484
16 : 242
17 : 121
18 : 364
19 : 182
20 : 91
21 : 274
22 : 137
23 : 412
24 : 206
25 : 103
26 : 310
27 : 155
28 : 466
29 : 233
30 : 700
31 : 350
32 : 175
33 : 526
34 : 263
35 : 790
36 : 395
37 : 1186
38 : 593
39 : 1780
40 : 890
41 : 445
42 : 1336
43 : 668
44 : 334
45 : 167
46 : 502
47 : 251
48 : 754
49 : 377
50 : 1132
51 : 566
52 : 283
53 : 850
54 : 425
55 : 1276
56 : 638
57 : 319
58 : 958
59 : 479
60 : 1438
61 : 719
62 : 2158
63 : 1079
64 : 3238
65 : 1619
66 : 4858
67 : 2429
68 : 7288
69 : 3644
70 : 1822
71 : 911
72 : 2734
73 : 1367
74 : 4102
75 : 2051
76 : 6154
77 : 3077
78 : 9232
79 : 4616
80 : 2308
81 : 1154
82 : 577
83 : 1732
84 : 866
85 : 433
86 : 1300
87 : 650
88 : 325
89 : 976
90 : 488
91 : 244
92 : 122
93 : 61
94 : 184
95 : 92
96 : 46
97 : 23
98 : 70
99 : 35
100 : 106
101 : 53
102 : 160
103 : 80
104 : 40
105 : 20
106 : 10
107 : 5
108 : 16
109 : 8
110 : 4
111 : 2
112 : 1
1 113
&lt;/pre&gt;

===For checkNum(5000)===
&lt;pre&gt;
1 : 2500
2 : 1250
3 : 625
4 : 1876
5 : 938
6 : 469
7 : 1408
8 : 704
9 : 352
10 : 176
11 : 88
12 : 44
13 : 22
14 : 11
15 : 34
16 : 17
17 : 52
18 : 26
19 : 13
20 : 40
21 : 20
22 : 10
23 : 5
24 : 16
25 : 8
26 : 4
27 : 2
28 : 1
1 29
&lt;/pre&gt;
===For checkNum(25000000)===
&lt;pre&gt;
1 : 12500000
2 : 6250000
3 : 3125000
4 : 1562500
5 : 781250
6 : 390625
7 : 1171876
8 : 585938
9 : 292969
10 : 878908
11 : 439454
12 : 219727
13 : 659182
14 : 329591
15 : 988774
16 : 494387
17 : 1483162
18 : 741581
19 : 2224744
20 : 1112372
21 : 556186
22 : 278093
23 : 834280
24 : 417140
25 : 208570
26 : 104285
27 : 312856
28 : 156428
29 : 78214
30 : 39107
31 : 117322
32 : 58661
33 : 175984
34 : 87992
35 : 43996
36 : 21998
37 : 10999
38 : 32998
39 : 16499
40 : 49498
41 : 24749
42 : 74248
43 : 37124
44 : 18562
45 : 9281
46 : 27844
47 : 13922
48 : 6961
49 : 20884
50 : 10442
51 : 5221
52 : 15664
53 : 7832
54 : 3916
55 : 1958
56 : 979
57 : 2938
58 : 1469
59 : 4408
60 : 2204
61 : 1102
62 : 551
63 : 1654
64 : 827
65 : 2482
66 : 1241
67 : 3724
68 : 1862
69 : 931
70 : 2794
71 : 1397
72 : 4192
73 : 2096
74 : 1048
75 : 524
76 : 262
77 : 131
78 : 394
79 : 197
80 : 592
81 : 296
82 : 148
83 : 74
84 : 37
85 : 112
86 : 56
87 : 28
88 : 14
89 : 7
90 : 22
91 : 11
92 : 34
93 : 17
94 : 52
95 : 26
96 : 13
97 : 40
98 : 20
99 : 10
100 : 5
101 : 16
102 : 8
103 : 4
104 : 2
105 : 1
1 106
&lt;/pre&gt;

Happy Life ahead!!!

[[File:end1.png]]</text>
      <sha1>176nbm47hot7f9qra0xxvhxa29n0rpj</sha1>
    </revision>
    <revision>
      <id>4456</id>
      <parentid>4455</parentid>
      <timestamp>2018-10-17T05:39:58Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* Directed Graph  Example */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="11717">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_12 Contributors of this page]

=Page Rank - How does Google Work=
One web page is having link to other page, that is a page is referring to other page. Google uses ''Page Rank'' algorithm to choose which page should be displayed first.

If we have network, connections as below:
[[File:rank0.png]]

We want to pick a leader out of all these nodes. How to pick a leader?  Why to elect a leader? It is because we want to find the super power of available nodes.                     
[[File:rank1.png]]

For example, the application wherein, we want to find the most impressive person of the  few ones. How to decide it? As shown in below figure, each node will communicate with other, randomly, we implement the count for each node, how many times, the particular node is being visited.
[[File:rank2.png]]

[[#Top]]

As shown in following, figure, all nodes are visited and each node is marked with the 
number i.e.number of times the node is visited.
[[File:rank3.png]]

The node with the maximum count, becomes the winner. Here, node with 120 count in figure 
below, is the winner. i.e. The person with 120 count in the figure is the most impressive 
person in the community being considered.
[[File:rank4.png]]

[[File:rank5.png]]

[[File:rank6.png]]

[[File:rank7.png]]


[[File:rank8.png]]

[[#Top]]

Google selects the page rank in this matter. Each web page is connected to other web page with web links. To a page, maximum link is there, that will be put on top results in Google search results.
[[File:rank9.png]]

Google uses web crawler. The crawler takes the random walk on the www network and rank the web sites.
[[File:rank10.png]]

This way Google ranks the pages and displays search results, according to page rank.
[[File:rank11.png]]

e.g.we search for ''mysore city''. Google has 10,000 results. But it displays the results in the sequence of page rank of search results, As shown in figure below.
[[File:mysore.png]]

[[#Top]]

==Page rank algorithm ==
As shown in beautiful figure below, few nodes combinely selected one as the leader, then that leader and other nodes, have selected         other as a leader. This way, finally the final leader is elected.
[[File:rank12.png|600px]]


[[File:graph00.png|600px]]


[[File:graph01.png|600px]]

[[#Top]]

==Gragh Drawing Program1==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
nx.barbell_graph(4,2)
G=nx.barbell_graph(4,2)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:Graph003.png|600px]]

[[#Top]]

==Gragh Drawing Program2==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
nx.barbell_graph(4,3)
G=nx.barbell_graph(4,3)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:Graph004.png|600px]]

[[#Top]]

==Gragh Drawing Program3==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
nx.barbell_graph(5,3)
G=nx.barbell_graph(5,3)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:Graph005.png|600px]]

[[#Top]]

==Complete Graph==
Complete graph is a graph, wherein, each node is connected to each other nodes in a graph.

&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.complete_graph(4)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:

[[File:completegraph001.png|600px]]

[[#Top]]

==Cycle graph==

&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.cycle_graph(5)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:

[[File:cyclegraph1.png|600px]]

[[#Top]]

==Ladder graph==

&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.ladder_graph(5)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:

[[File:laddergraph.png|600px]]

[[#Top]]

==Path Graph==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.path_graph(6)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:

[[File:pathgraph.png|600px]]

[[#Top]]

==Star Graph==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.star_graph(5)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:stargraph.png|600px]]

[[#Top]]

==Star Graph of 4 Nodes==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.star_graph(4)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:stargraph4points.png|600px]]

==Wheel Graph==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.wheel_graph(4)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:wheelgraph.png|600px]]

[[#Top]]

==Wheel Graph of 5 nodes==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.wheel_graph(5)
nx.draw(G)
plt.show()

&lt;/pre&gt;

Output:

[[File:wheelgraph5nodes.png|600px]]

[[#Top]]

==Wheel Graph of 6 nodes==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.wheel_graph(6)
nx.draw(G)
plt.show()

&lt;/pre&gt;

Output:

[[File:wheelgraph6nodes.png|600px]]

[[#Top]]

==Random Graph==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.gnp_random_graph(5,0.5)
nx.draw(G)
plt.show()

&lt;/pre&gt;

Output:

[[File:randomgraph1.png|600px]]


Running the same above program, we will get different output, as shown below, as it is random graph.

[[File:randomgraph2.png|600px]]

[[#Top]]

==Page Rank Algorithm Implementation==

===Random Directed Graph===
&lt;pre&gt;
import networkx as nx
import random
import matplotlib.pyplot as plt

#Draw random directed graph
G=nx.gnp_random_graph(10,0.5,directed=True)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output: 

[[File:randomDirectedGraph.png|600px]]


===Random Directed Graph with Labels===
&lt;pre&gt;
import networkx as nx
import random
import matplotlib.pyplot as plt

#Draw random directed graph 
G=nx.gnp_random_graph(10,0.5,directed=True)
#Give label numbering to nodes
nx.draw(G,with_labels=True)
plt.show()

&lt;/pre&gt;

Output:

[[File:randomDirectedGraphwithLabels.png|600px]]


[[#Top]]

===Page Rank Coding===
&lt;pre&gt;
import networkx as nx
import random
import matplotlib.pyplot as plt
import operator

#Draw random directed graph 
G=nx.gnp_random_graph(10,0.5,directed=True)
#Give label numbering to nodes
nx.draw(G,with_labels=True)
plt.show()

#x is the random source node
x=random.choice([i for i in range(G.number_of_nodes())])

#dictionary to maintain counter
dictCounter={}
#initialize the counter of each node as 0
for i in range(G.number_of_nodes()):
    dictCounter[i]=0
dictCounter[x]=dictCounter[x]+1

for i in range(10000):
    listn=list(G.neighbors(x))
    #if x is a sink node, we need to select random node for random walk
    #, else select random neighbor node

    if(len(listn)==0):
        x=random.choice([i for i in range(G.number_of_nodes())])
        dictCounter[x]=dictCounter[x]+1
    else:
        #choose a node randomly from neightbors
        x=random.choice(listn)
        dictCounter[x]=dictCounter[x]+1

p=nx.pagerank(G)
sorted_p=sorted(p.items(),key=operator.itemgetter(1))
sorted_rw=sorted(dictCounter.items(),key=operator.itemgetter(1))                        
#print(p)
#print(dictCounter)

print(sorted_p)
print(sorted_rw)

&lt;/pre&gt;

Output:

&lt;pre&gt;
[(2, 0.07139920240302768), (5, 0.07464882519777695), (3, 0.08527469366832419), 
(6, 0.08665188647066119), (4, 0.0987815549542114), (0, 0.10858415997562518), 
(9, 0.110369696943925), (8, 0.11456211367660116), (1, 0.11682018308814024), 
(7, 0.13290768362170685)]
[(2, 4), (5, 7), (8, 7), (6, 8), (3, 11), (7, 11), (1, 12), (4, 12), (0, 13), (9, 16)]
&lt;/pre&gt;

[[#Top]]

=Email communication Network=
==Page rank :page distribution method==
===Revision: Graph===
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
G=nx.cycle_graph(4)
labels={0:&quot;Bangluru&quot;,1:&quot;Gawhati&quot;,2:&quot;Kolkata&quot;,3:&quot;Chennai&quot;}
nx.draw(G,with_labels=True,labels=labels)
plt.show()
&lt;/pre&gt;

Output:

[[File:revGRAPH.png]]


===Directed Graph  Example===

[[File:directedGraphExample.png|600px]]

=Collatz Conjecture=
Taught by Sudarshan sir and Amit sir, and Edited by Ms. Ami Tusharkant Choksi

If a number is even, divide it by ''2'', if it is odd, make multiply it by ''3'' and add ''1'', till you get ''1''. This simple problem is called, ''Collatz Conjecture''. 

[[File:collatz1.png|600px]]

[[File:collatz2.png|600px]]

[[File:collatz3.png|600px]]

[[File:collatz4.png|600px]]

[[File:collatz5.png|600px]]

Number is bigger doesn't mean more iterations are required. One can notice, from the output of the following program. 



The program to implement the same is as follows:
==Program==
&lt;pre&gt;
#collatz conjecture
#if num is even, divide it by 2
#if num is odd, new number is equal to 3n+1


def checkNum(num):
    iterations=1
    while(num!=1):
        if(num%2==0):
            num=int(num/2)            
        else:
            num = 3*num+1
        iterations+=1
        

    print(num,iterations)


#checkNum(12)#Output: 1 10
#checkNum(26)#Output: 1 11
checkNum(2000)#Output: 1 113
&lt;/pre&gt;

&lt;pre&gt;

#recursive approach

def checkNum(num):
    if num==1:
        return 1
    elif num%2==0:
        return checkNum(num/2)+1
    else:
        return checkNum(3*num +1)+1


output:
checkNum(26)
Out[27]: 11
checkNum(5000)
Out[28]: 29
&lt;/pre&gt;

==Program adding statement to print all iterations==
&lt;pre&gt;
def checkNum(num):
    iterations=1
    while(num!=1):
        if(num%2==0):
            num=int(num/2)            
        else:
            num = 3*num+1
        print(iterations,&quot;:&quot;,num)
        iterations+=1
        

    print(num,iterations)
&lt;/pre&gt;
==Output==
===For checkNum(2000)===
&lt;pre&gt;
1 : 1000
2 : 500
3 : 250
4 : 125
5 : 376
6 : 188
7 : 94
8 : 47
9 : 142
10 : 71
11 : 214
12 : 107
13 : 322
14 : 161
15 : 484
16 : 242
17 : 121
18 : 364
19 : 182
20 : 91
21 : 274
22 : 137
23 : 412
24 : 206
25 : 103
26 : 310
27 : 155
28 : 466
29 : 233
30 : 700
31 : 350
32 : 175
33 : 526
34 : 263
35 : 790
36 : 395
37 : 1186
38 : 593
39 : 1780
40 : 890
41 : 445
42 : 1336
43 : 668
44 : 334
45 : 167
46 : 502
47 : 251
48 : 754
49 : 377
50 : 1132
51 : 566
52 : 283
53 : 850
54 : 425
55 : 1276
56 : 638
57 : 319
58 : 958
59 : 479
60 : 1438
61 : 719
62 : 2158
63 : 1079
64 : 3238
65 : 1619
66 : 4858
67 : 2429
68 : 7288
69 : 3644
70 : 1822
71 : 911
72 : 2734
73 : 1367
74 : 4102
75 : 2051
76 : 6154
77 : 3077
78 : 9232
79 : 4616
80 : 2308
81 : 1154
82 : 577
83 : 1732
84 : 866
85 : 433
86 : 1300
87 : 650
88 : 325
89 : 976
90 : 488
91 : 244
92 : 122
93 : 61
94 : 184
95 : 92
96 : 46
97 : 23
98 : 70
99 : 35
100 : 106
101 : 53
102 : 160
103 : 80
104 : 40
105 : 20
106 : 10
107 : 5
108 : 16
109 : 8
110 : 4
111 : 2
112 : 1
1 113
&lt;/pre&gt;

===For checkNum(5000)===
&lt;pre&gt;
1 : 2500
2 : 1250
3 : 625
4 : 1876
5 : 938
6 : 469
7 : 1408
8 : 704
9 : 352
10 : 176
11 : 88
12 : 44
13 : 22
14 : 11
15 : 34
16 : 17
17 : 52
18 : 26
19 : 13
20 : 40
21 : 20
22 : 10
23 : 5
24 : 16
25 : 8
26 : 4
27 : 2
28 : 1
1 29
&lt;/pre&gt;
===For checkNum(25000000)===
&lt;pre&gt;
1 : 12500000
2 : 6250000
3 : 3125000
4 : 1562500
5 : 781250
6 : 390625
7 : 1171876
8 : 585938
9 : 292969
10 : 878908
11 : 439454
12 : 219727
13 : 659182
14 : 329591
15 : 988774
16 : 494387
17 : 1483162
18 : 741581
19 : 2224744
20 : 1112372
21 : 556186
22 : 278093
23 : 834280
24 : 417140
25 : 208570
26 : 104285
27 : 312856
28 : 156428
29 : 78214
30 : 39107
31 : 117322
32 : 58661
33 : 175984
34 : 87992
35 : 43996
36 : 21998
37 : 10999
38 : 32998
39 : 16499
40 : 49498
41 : 24749
42 : 74248
43 : 37124
44 : 18562
45 : 9281
46 : 27844
47 : 13922
48 : 6961
49 : 20884
50 : 10442
51 : 5221
52 : 15664
53 : 7832
54 : 3916
55 : 1958
56 : 979
57 : 2938
58 : 1469
59 : 4408
60 : 2204
61 : 1102
62 : 551
63 : 1654
64 : 827
65 : 2482
66 : 1241
67 : 3724
68 : 1862
69 : 931
70 : 2794
71 : 1397
72 : 4192
73 : 2096
74 : 1048
75 : 524
76 : 262
77 : 131
78 : 394
79 : 197
80 : 592
81 : 296
82 : 148
83 : 74
84 : 37
85 : 112
86 : 56
87 : 28
88 : 14
89 : 7
90 : 22
91 : 11
92 : 34
93 : 17
94 : 52
95 : 26
96 : 13
97 : 40
98 : 20
99 : 10
100 : 5
101 : 16
102 : 8
103 : 4
104 : 2
105 : 1
1 106
&lt;/pre&gt;

Happy Life ahead!!!

[[File:end1.png]]</text>
      <sha1>alsyjbdsxp1tpq6w89r9dmo2wiwlqku</sha1>
    </revision>
    <revision>
      <id>4458</id>
      <parentid>4456</parentid>
      <timestamp>2018-10-17T05:48:46Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* Directed Graph  Example */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="11977">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_12 Contributors of this page]

=Page Rank - How does Google Work=
One web page is having link to other page, that is a page is referring to other page. Google uses ''Page Rank'' algorithm to choose which page should be displayed first.

If we have network, connections as below:
[[File:rank0.png]]

We want to pick a leader out of all these nodes. How to pick a leader?  Why to elect a leader? It is because we want to find the super power of available nodes.                     
[[File:rank1.png]]

For example, the application wherein, we want to find the most impressive person of the  few ones. How to decide it? As shown in below figure, each node will communicate with other, randomly, we implement the count for each node, how many times, the particular node is being visited.
[[File:rank2.png]]

[[#Top]]

As shown in following, figure, all nodes are visited and each node is marked with the 
number i.e.number of times the node is visited.
[[File:rank3.png]]

The node with the maximum count, becomes the winner. Here, node with 120 count in figure 
below, is the winner. i.e. The person with 120 count in the figure is the most impressive 
person in the community being considered.
[[File:rank4.png]]

[[File:rank5.png]]

[[File:rank6.png]]

[[File:rank7.png]]


[[File:rank8.png]]

[[#Top]]

Google selects the page rank in this matter. Each web page is connected to other web page with web links. To a page, maximum link is there, that will be put on top results in Google search results.
[[File:rank9.png]]

Google uses web crawler. The crawler takes the random walk on the www network and rank the web sites.
[[File:rank10.png]]

This way Google ranks the pages and displays search results, according to page rank.
[[File:rank11.png]]

e.g.we search for ''mysore city''. Google has 10,000 results. But it displays the results in the sequence of page rank of search results, As shown in figure below.
[[File:mysore.png]]

[[#Top]]

==Page rank algorithm ==
As shown in beautiful figure below, few nodes combinely selected one as the leader, then that leader and other nodes, have selected         other as a leader. This way, finally the final leader is elected.
[[File:rank12.png|600px]]


[[File:graph00.png|600px]]


[[File:graph01.png|600px]]

[[#Top]]

==Gragh Drawing Program1==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
nx.barbell_graph(4,2)
G=nx.barbell_graph(4,2)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:Graph003.png|600px]]

[[#Top]]

==Gragh Drawing Program2==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
nx.barbell_graph(4,3)
G=nx.barbell_graph(4,3)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:Graph004.png|600px]]

[[#Top]]

==Gragh Drawing Program3==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
nx.barbell_graph(5,3)
G=nx.barbell_graph(5,3)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:Graph005.png|600px]]

[[#Top]]

==Complete Graph==
Complete graph is a graph, wherein, each node is connected to each other nodes in a graph.

&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.complete_graph(4)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:

[[File:completegraph001.png|600px]]

[[#Top]]

==Cycle graph==

&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.cycle_graph(5)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:

[[File:cyclegraph1.png|600px]]

[[#Top]]

==Ladder graph==

&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.ladder_graph(5)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:

[[File:laddergraph.png|600px]]

[[#Top]]

==Path Graph==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.path_graph(6)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:

[[File:pathgraph.png|600px]]

[[#Top]]

==Star Graph==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.star_graph(5)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:stargraph.png|600px]]

[[#Top]]

==Star Graph of 4 Nodes==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.star_graph(4)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:stargraph4points.png|600px]]

==Wheel Graph==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.wheel_graph(4)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:wheelgraph.png|600px]]

[[#Top]]

==Wheel Graph of 5 nodes==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.wheel_graph(5)
nx.draw(G)
plt.show()

&lt;/pre&gt;

Output:

[[File:wheelgraph5nodes.png|600px]]

[[#Top]]

==Wheel Graph of 6 nodes==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.wheel_graph(6)
nx.draw(G)
plt.show()

&lt;/pre&gt;

Output:

[[File:wheelgraph6nodes.png|600px]]

[[#Top]]

==Random Graph==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.gnp_random_graph(5,0.5)
nx.draw(G)
plt.show()

&lt;/pre&gt;

Output:

[[File:randomgraph1.png|600px]]


Running the same above program, we will get different output, as shown below, as it is random graph.

[[File:randomgraph2.png|600px]]

[[#Top]]

==Page Rank Algorithm Implementation==

===Random Directed Graph===
&lt;pre&gt;
import networkx as nx
import random
import matplotlib.pyplot as plt

#Draw random directed graph
G=nx.gnp_random_graph(10,0.5,directed=True)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output: 

[[File:randomDirectedGraph.png|600px]]


===Random Directed Graph with Labels===
&lt;pre&gt;
import networkx as nx
import random
import matplotlib.pyplot as plt

#Draw random directed graph 
G=nx.gnp_random_graph(10,0.5,directed=True)
#Give label numbering to nodes
nx.draw(G,with_labels=True)
plt.show()

&lt;/pre&gt;

Output:

[[File:randomDirectedGraphwithLabels.png|600px]]


[[#Top]]

===Page Rank Coding===
&lt;pre&gt;
import networkx as nx
import random
import matplotlib.pyplot as plt
import operator

#Draw random directed graph 
G=nx.gnp_random_graph(10,0.5,directed=True)
#Give label numbering to nodes
nx.draw(G,with_labels=True)
plt.show()

#x is the random source node
x=random.choice([i for i in range(G.number_of_nodes())])

#dictionary to maintain counter
dictCounter={}
#initialize the counter of each node as 0
for i in range(G.number_of_nodes()):
    dictCounter[i]=0
dictCounter[x]=dictCounter[x]+1

for i in range(10000):
    listn=list(G.neighbors(x))
    #if x is a sink node, we need to select random node for random walk
    #, else select random neighbor node

    if(len(listn)==0):
        x=random.choice([i for i in range(G.number_of_nodes())])
        dictCounter[x]=dictCounter[x]+1
    else:
        #choose a node randomly from neightbors
        x=random.choice(listn)
        dictCounter[x]=dictCounter[x]+1

p=nx.pagerank(G)
sorted_p=sorted(p.items(),key=operator.itemgetter(1))
sorted_rw=sorted(dictCounter.items(),key=operator.itemgetter(1))                        
#print(p)
#print(dictCounter)

print(sorted_p)
print(sorted_rw)

&lt;/pre&gt;

Output:

&lt;pre&gt;
[(2, 0.07139920240302768), (5, 0.07464882519777695), (3, 0.08527469366832419), 
(6, 0.08665188647066119), (4, 0.0987815549542114), (0, 0.10858415997562518), 
(9, 0.110369696943925), (8, 0.11456211367660116), (1, 0.11682018308814024), 
(7, 0.13290768362170685)]
[(2, 4), (5, 7), (8, 7), (6, 8), (3, 11), (7, 11), (1, 12), (4, 12), (0, 13), (9, 16)]
&lt;/pre&gt;

[[#Top]]

=Email communication Network=
==Page rank :page distribution method==
===Revision: Graph===
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
G=nx.cycle_graph(4)
labels={0:&quot;Bangluru&quot;,1:&quot;Gawhati&quot;,2:&quot;Kolkata&quot;,3:&quot;Chennai&quot;}
nx.draw(G,with_labels=True,labels=labels)
plt.show()
&lt;/pre&gt;

Output:

[[File:revGRAPH.png]]


===Directed Graph  Example===

[[File:directedGraphExample.png|600px]]

&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
G=nx.gnp_random_graph(4,.5,directed=True)
labels={0:&quot;Bangluru&quot;,1:&quot;Gawhati&quot;,2:&quot;Kolkata&quot;,3:&quot;Chennai&quot;}
nx.draw(G,with_labels=True,labels=labels)
plt.show()

&lt;/pre&gt;

Output:
[[File:directedg.png|600px]]

=Collatz Conjecture=
Taught by Sudarshan sir and Amit sir, and Edited by Ms. Ami Tusharkant Choksi

If a number is even, divide it by ''2'', if it is odd, make multiply it by ''3'' and add ''1'', till you get ''1''. This simple problem is called, ''Collatz Conjecture''. 

[[File:collatz1.png|600px]]

[[File:collatz2.png|600px]]

[[File:collatz3.png|600px]]

[[File:collatz4.png|600px]]

[[File:collatz5.png|600px]]

Number is bigger doesn't mean more iterations are required. One can notice, from the output of the following program. 



The program to implement the same is as follows:
==Program==
&lt;pre&gt;
#collatz conjecture
#if num is even, divide it by 2
#if num is odd, new number is equal to 3n+1


def checkNum(num):
    iterations=1
    while(num!=1):
        if(num%2==0):
            num=int(num/2)            
        else:
            num = 3*num+1
        iterations+=1
        

    print(num,iterations)


#checkNum(12)#Output: 1 10
#checkNum(26)#Output: 1 11
checkNum(2000)#Output: 1 113
&lt;/pre&gt;

&lt;pre&gt;

#recursive approach

def checkNum(num):
    if num==1:
        return 1
    elif num%2==0:
        return checkNum(num/2)+1
    else:
        return checkNum(3*num +1)+1


output:
checkNum(26)
Out[27]: 11
checkNum(5000)
Out[28]: 29
&lt;/pre&gt;

==Program adding statement to print all iterations==
&lt;pre&gt;
def checkNum(num):
    iterations=1
    while(num!=1):
        if(num%2==0):
            num=int(num/2)            
        else:
            num = 3*num+1
        print(iterations,&quot;:&quot;,num)
        iterations+=1
        

    print(num,iterations)
&lt;/pre&gt;
==Output==
===For checkNum(2000)===
&lt;pre&gt;
1 : 1000
2 : 500
3 : 250
4 : 125
5 : 376
6 : 188
7 : 94
8 : 47
9 : 142
10 : 71
11 : 214
12 : 107
13 : 322
14 : 161
15 : 484
16 : 242
17 : 121
18 : 364
19 : 182
20 : 91
21 : 274
22 : 137
23 : 412
24 : 206
25 : 103
26 : 310
27 : 155
28 : 466
29 : 233
30 : 700
31 : 350
32 : 175
33 : 526
34 : 263
35 : 790
36 : 395
37 : 1186
38 : 593
39 : 1780
40 : 890
41 : 445
42 : 1336
43 : 668
44 : 334
45 : 167
46 : 502
47 : 251
48 : 754
49 : 377
50 : 1132
51 : 566
52 : 283
53 : 850
54 : 425
55 : 1276
56 : 638
57 : 319
58 : 958
59 : 479
60 : 1438
61 : 719
62 : 2158
63 : 1079
64 : 3238
65 : 1619
66 : 4858
67 : 2429
68 : 7288
69 : 3644
70 : 1822
71 : 911
72 : 2734
73 : 1367
74 : 4102
75 : 2051
76 : 6154
77 : 3077
78 : 9232
79 : 4616
80 : 2308
81 : 1154
82 : 577
83 : 1732
84 : 866
85 : 433
86 : 1300
87 : 650
88 : 325
89 : 976
90 : 488
91 : 244
92 : 122
93 : 61
94 : 184
95 : 92
96 : 46
97 : 23
98 : 70
99 : 35
100 : 106
101 : 53
102 : 160
103 : 80
104 : 40
105 : 20
106 : 10
107 : 5
108 : 16
109 : 8
110 : 4
111 : 2
112 : 1
1 113
&lt;/pre&gt;

===For checkNum(5000)===
&lt;pre&gt;
1 : 2500
2 : 1250
3 : 625
4 : 1876
5 : 938
6 : 469
7 : 1408
8 : 704
9 : 352
10 : 176
11 : 88
12 : 44
13 : 22
14 : 11
15 : 34
16 : 17
17 : 52
18 : 26
19 : 13
20 : 40
21 : 20
22 : 10
23 : 5
24 : 16
25 : 8
26 : 4
27 : 2
28 : 1
1 29
&lt;/pre&gt;
===For checkNum(25000000)===
&lt;pre&gt;
1 : 12500000
2 : 6250000
3 : 3125000
4 : 1562500
5 : 781250
6 : 390625
7 : 1171876
8 : 585938
9 : 292969
10 : 878908
11 : 439454
12 : 219727
13 : 659182
14 : 329591
15 : 988774
16 : 494387
17 : 1483162
18 : 741581
19 : 2224744
20 : 1112372
21 : 556186
22 : 278093
23 : 834280
24 : 417140
25 : 208570
26 : 104285
27 : 312856
28 : 156428
29 : 78214
30 : 39107
31 : 117322
32 : 58661
33 : 175984
34 : 87992
35 : 43996
36 : 21998
37 : 10999
38 : 32998
39 : 16499
40 : 49498
41 : 24749
42 : 74248
43 : 37124
44 : 18562
45 : 9281
46 : 27844
47 : 13922
48 : 6961
49 : 20884
50 : 10442
51 : 5221
52 : 15664
53 : 7832
54 : 3916
55 : 1958
56 : 979
57 : 2938
58 : 1469
59 : 4408
60 : 2204
61 : 1102
62 : 551
63 : 1654
64 : 827
65 : 2482
66 : 1241
67 : 3724
68 : 1862
69 : 931
70 : 2794
71 : 1397
72 : 4192
73 : 2096
74 : 1048
75 : 524
76 : 262
77 : 131
78 : 394
79 : 197
80 : 592
81 : 296
82 : 148
83 : 74
84 : 37
85 : 112
86 : 56
87 : 28
88 : 14
89 : 7
90 : 22
91 : 11
92 : 34
93 : 17
94 : 52
95 : 26
96 : 13
97 : 40
98 : 20
99 : 10
100 : 5
101 : 16
102 : 8
103 : 4
104 : 2
105 : 1
1 106
&lt;/pre&gt;

Happy Life ahead!!!

[[File:end1.png]]</text>
      <sha1>gnblf9y2cmkpbz0a1g752skh4o8hdkq</sha1>
    </revision>
    <revision>
      <id>4461</id>
      <parentid>4458</parentid>
      <timestamp>2018-10-17T06:14:37Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* Directed Graph  Example */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="11988">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_12 Contributors of this page]

=Page Rank - How does Google Work=
One web page is having link to other page, that is a page is referring to other page. Google uses ''Page Rank'' algorithm to choose which page should be displayed first.

If we have network, connections as below:
[[File:rank0.png]]

We want to pick a leader out of all these nodes. How to pick a leader?  Why to elect a leader? It is because we want to find the super power of available nodes.                     
[[File:rank1.png]]

For example, the application wherein, we want to find the most impressive person of the  few ones. How to decide it? As shown in below figure, each node will communicate with other, randomly, we implement the count for each node, how many times, the particular node is being visited.
[[File:rank2.png]]

[[#Top]]

As shown in following, figure, all nodes are visited and each node is marked with the 
number i.e.number of times the node is visited.
[[File:rank3.png]]

The node with the maximum count, becomes the winner. Here, node with 120 count in figure 
below, is the winner. i.e. The person with 120 count in the figure is the most impressive 
person in the community being considered.
[[File:rank4.png]]

[[File:rank5.png]]

[[File:rank6.png]]

[[File:rank7.png]]


[[File:rank8.png]]

[[#Top]]

Google selects the page rank in this matter. Each web page is connected to other web page with web links. To a page, maximum link is there, that will be put on top results in Google search results.
[[File:rank9.png]]

Google uses web crawler. The crawler takes the random walk on the www network and rank the web sites.
[[File:rank10.png]]

This way Google ranks the pages and displays search results, according to page rank.
[[File:rank11.png]]

e.g.we search for ''mysore city''. Google has 10,000 results. But it displays the results in the sequence of page rank of search results, As shown in figure below.
[[File:mysore.png]]

[[#Top]]

==Page rank algorithm ==
As shown in beautiful figure below, few nodes combinely selected one as the leader, then that leader and other nodes, have selected         other as a leader. This way, finally the final leader is elected.
[[File:rank12.png|600px]]


[[File:graph00.png|600px]]


[[File:graph01.png|600px]]

[[#Top]]

==Gragh Drawing Program1==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
nx.barbell_graph(4,2)
G=nx.barbell_graph(4,2)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:Graph003.png|600px]]

[[#Top]]

==Gragh Drawing Program2==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
nx.barbell_graph(4,3)
G=nx.barbell_graph(4,3)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:Graph004.png|600px]]

[[#Top]]

==Gragh Drawing Program3==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
nx.barbell_graph(5,3)
G=nx.barbell_graph(5,3)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:Graph005.png|600px]]

[[#Top]]

==Complete Graph==
Complete graph is a graph, wherein, each node is connected to each other nodes in a graph.

&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.complete_graph(4)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:

[[File:completegraph001.png|600px]]

[[#Top]]

==Cycle graph==

&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.cycle_graph(5)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:

[[File:cyclegraph1.png|600px]]

[[#Top]]

==Ladder graph==

&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.ladder_graph(5)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:

[[File:laddergraph.png|600px]]

[[#Top]]

==Path Graph==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.path_graph(6)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:

[[File:pathgraph.png|600px]]

[[#Top]]

==Star Graph==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.star_graph(5)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:stargraph.png|600px]]

[[#Top]]

==Star Graph of 4 Nodes==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.star_graph(4)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:stargraph4points.png|600px]]

==Wheel Graph==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.wheel_graph(4)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:wheelgraph.png|600px]]

[[#Top]]

==Wheel Graph of 5 nodes==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.wheel_graph(5)
nx.draw(G)
plt.show()

&lt;/pre&gt;

Output:

[[File:wheelgraph5nodes.png|600px]]

[[#Top]]

==Wheel Graph of 6 nodes==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.wheel_graph(6)
nx.draw(G)
plt.show()

&lt;/pre&gt;

Output:

[[File:wheelgraph6nodes.png|600px]]

[[#Top]]

==Random Graph==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.gnp_random_graph(5,0.5)
nx.draw(G)
plt.show()

&lt;/pre&gt;

Output:

[[File:randomgraph1.png|600px]]


Running the same above program, we will get different output, as shown below, as it is random graph.

[[File:randomgraph2.png|600px]]

[[#Top]]

==Page Rank Algorithm Implementation==

===Random Directed Graph===
&lt;pre&gt;
import networkx as nx
import random
import matplotlib.pyplot as plt

#Draw random directed graph
G=nx.gnp_random_graph(10,0.5,directed=True)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output: 

[[File:randomDirectedGraph.png|600px]]


===Random Directed Graph with Labels===
&lt;pre&gt;
import networkx as nx
import random
import matplotlib.pyplot as plt

#Draw random directed graph 
G=nx.gnp_random_graph(10,0.5,directed=True)
#Give label numbering to nodes
nx.draw(G,with_labels=True)
plt.show()

&lt;/pre&gt;

Output:

[[File:randomDirectedGraphwithLabels.png|600px]]


[[#Top]]

===Page Rank Coding===
&lt;pre&gt;
import networkx as nx
import random
import matplotlib.pyplot as plt
import operator

#Draw random directed graph 
G=nx.gnp_random_graph(10,0.5,directed=True)
#Give label numbering to nodes
nx.draw(G,with_labels=True)
plt.show()

#x is the random source node
x=random.choice([i for i in range(G.number_of_nodes())])

#dictionary to maintain counter
dictCounter={}
#initialize the counter of each node as 0
for i in range(G.number_of_nodes()):
    dictCounter[i]=0
dictCounter[x]=dictCounter[x]+1

for i in range(10000):
    listn=list(G.neighbors(x))
    #if x is a sink node, we need to select random node for random walk
    #, else select random neighbor node

    if(len(listn)==0):
        x=random.choice([i for i in range(G.number_of_nodes())])
        dictCounter[x]=dictCounter[x]+1
    else:
        #choose a node randomly from neightbors
        x=random.choice(listn)
        dictCounter[x]=dictCounter[x]+1

p=nx.pagerank(G)
sorted_p=sorted(p.items(),key=operator.itemgetter(1))
sorted_rw=sorted(dictCounter.items(),key=operator.itemgetter(1))                        
#print(p)
#print(dictCounter)

print(sorted_p)
print(sorted_rw)

&lt;/pre&gt;

Output:

&lt;pre&gt;
[(2, 0.07139920240302768), (5, 0.07464882519777695), (3, 0.08527469366832419), 
(6, 0.08665188647066119), (4, 0.0987815549542114), (0, 0.10858415997562518), 
(9, 0.110369696943925), (8, 0.11456211367660116), (1, 0.11682018308814024), 
(7, 0.13290768362170685)]
[(2, 4), (5, 7), (8, 7), (6, 8), (3, 11), (7, 11), (1, 12), (4, 12), (0, 13), (9, 16)]
&lt;/pre&gt;

[[#Top]]

=Email communication Network=
==Page rank :page distribution method==
===Revision: Graph===
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
G=nx.cycle_graph(4)
labels={0:&quot;Bangluru&quot;,1:&quot;Gawhati&quot;,2:&quot;Kolkata&quot;,3:&quot;Chennai&quot;}
nx.draw(G,with_labels=True,labels=labels)
plt.show()
&lt;/pre&gt;

Output:

[[File:revGRAPH.png]]


===Directed Graph  Example===

[[File:directedGraphExample.png|600px]]

&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
G=nx.gnp_random_graph(4,.5,directed=True)
labels={0:&quot;Bangluru&quot;,1:&quot;Gawhati&quot;,2:&quot;Kolkata&quot;,3:&quot;Chennai&quot;}
nx.draw(G,with_labels=True,labels=labels)
plt.show()

&lt;/pre&gt;

Output:
[[File:directedg.png|600px]]


[[#Top]]

=Collatz Conjecture=
Taught by Sudarshan sir and Amit sir, and Edited by Ms. Ami Tusharkant Choksi

If a number is even, divide it by ''2'', if it is odd, make multiply it by ''3'' and add ''1'', till you get ''1''. This simple problem is called, ''Collatz Conjecture''. 

[[File:collatz1.png|600px]]

[[File:collatz2.png|600px]]

[[File:collatz3.png|600px]]

[[File:collatz4.png|600px]]

[[File:collatz5.png|600px]]

Number is bigger doesn't mean more iterations are required. One can notice, from the output of the following program. 



The program to implement the same is as follows:
==Program==
&lt;pre&gt;
#collatz conjecture
#if num is even, divide it by 2
#if num is odd, new number is equal to 3n+1


def checkNum(num):
    iterations=1
    while(num!=1):
        if(num%2==0):
            num=int(num/2)            
        else:
            num = 3*num+1
        iterations+=1
        

    print(num,iterations)


#checkNum(12)#Output: 1 10
#checkNum(26)#Output: 1 11
checkNum(2000)#Output: 1 113
&lt;/pre&gt;

&lt;pre&gt;

#recursive approach

def checkNum(num):
    if num==1:
        return 1
    elif num%2==0:
        return checkNum(num/2)+1
    else:
        return checkNum(3*num +1)+1


output:
checkNum(26)
Out[27]: 11
checkNum(5000)
Out[28]: 29
&lt;/pre&gt;

==Program adding statement to print all iterations==
&lt;pre&gt;
def checkNum(num):
    iterations=1
    while(num!=1):
        if(num%2==0):
            num=int(num/2)            
        else:
            num = 3*num+1
        print(iterations,&quot;:&quot;,num)
        iterations+=1
        

    print(num,iterations)
&lt;/pre&gt;
==Output==
===For checkNum(2000)===
&lt;pre&gt;
1 : 1000
2 : 500
3 : 250
4 : 125
5 : 376
6 : 188
7 : 94
8 : 47
9 : 142
10 : 71
11 : 214
12 : 107
13 : 322
14 : 161
15 : 484
16 : 242
17 : 121
18 : 364
19 : 182
20 : 91
21 : 274
22 : 137
23 : 412
24 : 206
25 : 103
26 : 310
27 : 155
28 : 466
29 : 233
30 : 700
31 : 350
32 : 175
33 : 526
34 : 263
35 : 790
36 : 395
37 : 1186
38 : 593
39 : 1780
40 : 890
41 : 445
42 : 1336
43 : 668
44 : 334
45 : 167
46 : 502
47 : 251
48 : 754
49 : 377
50 : 1132
51 : 566
52 : 283
53 : 850
54 : 425
55 : 1276
56 : 638
57 : 319
58 : 958
59 : 479
60 : 1438
61 : 719
62 : 2158
63 : 1079
64 : 3238
65 : 1619
66 : 4858
67 : 2429
68 : 7288
69 : 3644
70 : 1822
71 : 911
72 : 2734
73 : 1367
74 : 4102
75 : 2051
76 : 6154
77 : 3077
78 : 9232
79 : 4616
80 : 2308
81 : 1154
82 : 577
83 : 1732
84 : 866
85 : 433
86 : 1300
87 : 650
88 : 325
89 : 976
90 : 488
91 : 244
92 : 122
93 : 61
94 : 184
95 : 92
96 : 46
97 : 23
98 : 70
99 : 35
100 : 106
101 : 53
102 : 160
103 : 80
104 : 40
105 : 20
106 : 10
107 : 5
108 : 16
109 : 8
110 : 4
111 : 2
112 : 1
1 113
&lt;/pre&gt;

===For checkNum(5000)===
&lt;pre&gt;
1 : 2500
2 : 1250
3 : 625
4 : 1876
5 : 938
6 : 469
7 : 1408
8 : 704
9 : 352
10 : 176
11 : 88
12 : 44
13 : 22
14 : 11
15 : 34
16 : 17
17 : 52
18 : 26
19 : 13
20 : 40
21 : 20
22 : 10
23 : 5
24 : 16
25 : 8
26 : 4
27 : 2
28 : 1
1 29
&lt;/pre&gt;
===For checkNum(25000000)===
&lt;pre&gt;
1 : 12500000
2 : 6250000
3 : 3125000
4 : 1562500
5 : 781250
6 : 390625
7 : 1171876
8 : 585938
9 : 292969
10 : 878908
11 : 439454
12 : 219727
13 : 659182
14 : 329591
15 : 988774
16 : 494387
17 : 1483162
18 : 741581
19 : 2224744
20 : 1112372
21 : 556186
22 : 278093
23 : 834280
24 : 417140
25 : 208570
26 : 104285
27 : 312856
28 : 156428
29 : 78214
30 : 39107
31 : 117322
32 : 58661
33 : 175984
34 : 87992
35 : 43996
36 : 21998
37 : 10999
38 : 32998
39 : 16499
40 : 49498
41 : 24749
42 : 74248
43 : 37124
44 : 18562
45 : 9281
46 : 27844
47 : 13922
48 : 6961
49 : 20884
50 : 10442
51 : 5221
52 : 15664
53 : 7832
54 : 3916
55 : 1958
56 : 979
57 : 2938
58 : 1469
59 : 4408
60 : 2204
61 : 1102
62 : 551
63 : 1654
64 : 827
65 : 2482
66 : 1241
67 : 3724
68 : 1862
69 : 931
70 : 2794
71 : 1397
72 : 4192
73 : 2096
74 : 1048
75 : 524
76 : 262
77 : 131
78 : 394
79 : 197
80 : 592
81 : 296
82 : 148
83 : 74
84 : 37
85 : 112
86 : 56
87 : 28
88 : 14
89 : 7
90 : 22
91 : 11
92 : 34
93 : 17
94 : 52
95 : 26
96 : 13
97 : 40
98 : 20
99 : 10
100 : 5
101 : 16
102 : 8
103 : 4
104 : 2
105 : 1
1 106
&lt;/pre&gt;

Happy Life ahead!!!

[[File:end1.png]]</text>
      <sha1>bi36w4knfbd5g0pbi4paqn99xxib3ak</sha1>
    </revision>
    <revision>
      <id>4462</id>
      <parentid>4461</parentid>
      <timestamp>2018-10-17T06:17:59Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* Directed Graph  Example */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="12300">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_12 Contributors of this page]

=Page Rank - How does Google Work=
One web page is having link to other page, that is a page is referring to other page. Google uses ''Page Rank'' algorithm to choose which page should be displayed first.

If we have network, connections as below:
[[File:rank0.png]]

We want to pick a leader out of all these nodes. How to pick a leader?  Why to elect a leader? It is because we want to find the super power of available nodes.                     
[[File:rank1.png]]

For example, the application wherein, we want to find the most impressive person of the  few ones. How to decide it? As shown in below figure, each node will communicate with other, randomly, we implement the count for each node, how many times, the particular node is being visited.
[[File:rank2.png]]

[[#Top]]

As shown in following, figure, all nodes are visited and each node is marked with the 
number i.e.number of times the node is visited.
[[File:rank3.png]]

The node with the maximum count, becomes the winner. Here, node with 120 count in figure 
below, is the winner. i.e. The person with 120 count in the figure is the most impressive 
person in the community being considered.
[[File:rank4.png]]

[[File:rank5.png]]

[[File:rank6.png]]

[[File:rank7.png]]


[[File:rank8.png]]

[[#Top]]

Google selects the page rank in this matter. Each web page is connected to other web page with web links. To a page, maximum link is there, that will be put on top results in Google search results.
[[File:rank9.png]]

Google uses web crawler. The crawler takes the random walk on the www network and rank the web sites.
[[File:rank10.png]]

This way Google ranks the pages and displays search results, according to page rank.
[[File:rank11.png]]

e.g.we search for ''mysore city''. Google has 10,000 results. But it displays the results in the sequence of page rank of search results, As shown in figure below.
[[File:mysore.png]]

[[#Top]]

==Page rank algorithm ==
As shown in beautiful figure below, few nodes combinely selected one as the leader, then that leader and other nodes, have selected         other as a leader. This way, finally the final leader is elected.
[[File:rank12.png|600px]]


[[File:graph00.png|600px]]


[[File:graph01.png|600px]]

[[#Top]]

==Gragh Drawing Program1==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
nx.barbell_graph(4,2)
G=nx.barbell_graph(4,2)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:Graph003.png|600px]]

[[#Top]]

==Gragh Drawing Program2==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
nx.barbell_graph(4,3)
G=nx.barbell_graph(4,3)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:Graph004.png|600px]]

[[#Top]]

==Gragh Drawing Program3==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
nx.barbell_graph(5,3)
G=nx.barbell_graph(5,3)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:Graph005.png|600px]]

[[#Top]]

==Complete Graph==
Complete graph is a graph, wherein, each node is connected to each other nodes in a graph.

&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.complete_graph(4)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:

[[File:completegraph001.png|600px]]

[[#Top]]

==Cycle graph==

&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.cycle_graph(5)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:

[[File:cyclegraph1.png|600px]]

[[#Top]]

==Ladder graph==

&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.ladder_graph(5)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:

[[File:laddergraph.png|600px]]

[[#Top]]

==Path Graph==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.path_graph(6)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:

[[File:pathgraph.png|600px]]

[[#Top]]

==Star Graph==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.star_graph(5)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:stargraph.png|600px]]

[[#Top]]

==Star Graph of 4 Nodes==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.star_graph(4)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:stargraph4points.png|600px]]

==Wheel Graph==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.wheel_graph(4)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:wheelgraph.png|600px]]

[[#Top]]

==Wheel Graph of 5 nodes==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.wheel_graph(5)
nx.draw(G)
plt.show()

&lt;/pre&gt;

Output:

[[File:wheelgraph5nodes.png|600px]]

[[#Top]]

==Wheel Graph of 6 nodes==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.wheel_graph(6)
nx.draw(G)
plt.show()

&lt;/pre&gt;

Output:

[[File:wheelgraph6nodes.png|600px]]

[[#Top]]

==Random Graph==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.gnp_random_graph(5,0.5)
nx.draw(G)
plt.show()

&lt;/pre&gt;

Output:

[[File:randomgraph1.png|600px]]


Running the same above program, we will get different output, as shown below, as it is random graph.

[[File:randomgraph2.png|600px]]

[[#Top]]

==Page Rank Algorithm Implementation==

===Random Directed Graph===
&lt;pre&gt;
import networkx as nx
import random
import matplotlib.pyplot as plt

#Draw random directed graph
G=nx.gnp_random_graph(10,0.5,directed=True)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output: 

[[File:randomDirectedGraph.png|600px]]


===Random Directed Graph with Labels===
&lt;pre&gt;
import networkx as nx
import random
import matplotlib.pyplot as plt

#Draw random directed graph 
G=nx.gnp_random_graph(10,0.5,directed=True)
#Give label numbering to nodes
nx.draw(G,with_labels=True)
plt.show()

&lt;/pre&gt;

Output:

[[File:randomDirectedGraphwithLabels.png|600px]]


[[#Top]]

===Page Rank Coding===
&lt;pre&gt;
import networkx as nx
import random
import matplotlib.pyplot as plt
import operator

#Draw random directed graph 
G=nx.gnp_random_graph(10,0.5,directed=True)
#Give label numbering to nodes
nx.draw(G,with_labels=True)
plt.show()

#x is the random source node
x=random.choice([i for i in range(G.number_of_nodes())])

#dictionary to maintain counter
dictCounter={}
#initialize the counter of each node as 0
for i in range(G.number_of_nodes()):
    dictCounter[i]=0
dictCounter[x]=dictCounter[x]+1

for i in range(10000):
    listn=list(G.neighbors(x))
    #if x is a sink node, we need to select random node for random walk
    #, else select random neighbor node

    if(len(listn)==0):
        x=random.choice([i for i in range(G.number_of_nodes())])
        dictCounter[x]=dictCounter[x]+1
    else:
        #choose a node randomly from neightbors
        x=random.choice(listn)
        dictCounter[x]=dictCounter[x]+1

p=nx.pagerank(G)
sorted_p=sorted(p.items(),key=operator.itemgetter(1))
sorted_rw=sorted(dictCounter.items(),key=operator.itemgetter(1))                        
#print(p)
#print(dictCounter)

print(sorted_p)
print(sorted_rw)

&lt;/pre&gt;

Output:

&lt;pre&gt;
[(2, 0.07139920240302768), (5, 0.07464882519777695), (3, 0.08527469366832419), 
(6, 0.08665188647066119), (4, 0.0987815549542114), (0, 0.10858415997562518), 
(9, 0.110369696943925), (8, 0.11456211367660116), (1, 0.11682018308814024), 
(7, 0.13290768362170685)]
[(2, 4), (5, 7), (8, 7), (6, 8), (3, 11), (7, 11), (1, 12), (4, 12), (0, 13), (9, 16)]
&lt;/pre&gt;

[[#Top]]

=Email communication Network=
==Page rank :page distribution method==
===Revision: Graph===
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
G=nx.cycle_graph(4)
labels={0:&quot;Bangluru&quot;,1:&quot;Gawhati&quot;,2:&quot;Kolkata&quot;,3:&quot;Chennai&quot;}
nx.draw(G,with_labels=True,labels=labels)
plt.show()
&lt;/pre&gt;

Output:

[[File:revGRAPH.png]]


===Directed Graph  Example===

[[File:directedGraphExample.png|600px]]

&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
G=nx.gnp_random_graph(4,.5,directed=True)
labels={0:&quot;Bangluru&quot;,1:&quot;Gawhati&quot;,2:&quot;Kolkata&quot;,3:&quot;Chennai&quot;}
nx.draw(G,with_labels=True,labels=labels)
plt.show()

&lt;/pre&gt;

Output:
[[File:directedg.png|600px]]


[[#Top]]


==Bidirectional with Parellel and self loops==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
G=nx.MultiDiGraph()

G.add_node(1)
G.add_node(2)
G.add_node(3)
G.add_node(4)

G.add_path([1,2,3,4,1])
G.add_edge(1,4)
nx.draw(G,with_labels=True)
plt.show()
&lt;/pre&gt;

Output: 

[[File:bidirectionalg.png]]

=Collatz Conjecture=
Taught by Sudarshan sir and Amit sir, and Edited by Ms. Ami Tusharkant Choksi

If a number is even, divide it by ''2'', if it is odd, make multiply it by ''3'' and add ''1'', till you get ''1''. This simple problem is called, ''Collatz Conjecture''. 

[[File:collatz1.png|600px]]

[[File:collatz2.png|600px]]

[[File:collatz3.png|600px]]

[[File:collatz4.png|600px]]

[[File:collatz5.png|600px]]

Number is bigger doesn't mean more iterations are required. One can notice, from the output of the following program. 



The program to implement the same is as follows:
==Program==
&lt;pre&gt;
#collatz conjecture
#if num is even, divide it by 2
#if num is odd, new number is equal to 3n+1


def checkNum(num):
    iterations=1
    while(num!=1):
        if(num%2==0):
            num=int(num/2)            
        else:
            num = 3*num+1
        iterations+=1
        

    print(num,iterations)


#checkNum(12)#Output: 1 10
#checkNum(26)#Output: 1 11
checkNum(2000)#Output: 1 113
&lt;/pre&gt;

&lt;pre&gt;

#recursive approach

def checkNum(num):
    if num==1:
        return 1
    elif num%2==0:
        return checkNum(num/2)+1
    else:
        return checkNum(3*num +1)+1


output:
checkNum(26)
Out[27]: 11
checkNum(5000)
Out[28]: 29
&lt;/pre&gt;

==Program adding statement to print all iterations==
&lt;pre&gt;
def checkNum(num):
    iterations=1
    while(num!=1):
        if(num%2==0):
            num=int(num/2)            
        else:
            num = 3*num+1
        print(iterations,&quot;:&quot;,num)
        iterations+=1
        

    print(num,iterations)
&lt;/pre&gt;
==Output==
===For checkNum(2000)===
&lt;pre&gt;
1 : 1000
2 : 500
3 : 250
4 : 125
5 : 376
6 : 188
7 : 94
8 : 47
9 : 142
10 : 71
11 : 214
12 : 107
13 : 322
14 : 161
15 : 484
16 : 242
17 : 121
18 : 364
19 : 182
20 : 91
21 : 274
22 : 137
23 : 412
24 : 206
25 : 103
26 : 310
27 : 155
28 : 466
29 : 233
30 : 700
31 : 350
32 : 175
33 : 526
34 : 263
35 : 790
36 : 395
37 : 1186
38 : 593
39 : 1780
40 : 890
41 : 445
42 : 1336
43 : 668
44 : 334
45 : 167
46 : 502
47 : 251
48 : 754
49 : 377
50 : 1132
51 : 566
52 : 283
53 : 850
54 : 425
55 : 1276
56 : 638
57 : 319
58 : 958
59 : 479
60 : 1438
61 : 719
62 : 2158
63 : 1079
64 : 3238
65 : 1619
66 : 4858
67 : 2429
68 : 7288
69 : 3644
70 : 1822
71 : 911
72 : 2734
73 : 1367
74 : 4102
75 : 2051
76 : 6154
77 : 3077
78 : 9232
79 : 4616
80 : 2308
81 : 1154
82 : 577
83 : 1732
84 : 866
85 : 433
86 : 1300
87 : 650
88 : 325
89 : 976
90 : 488
91 : 244
92 : 122
93 : 61
94 : 184
95 : 92
96 : 46
97 : 23
98 : 70
99 : 35
100 : 106
101 : 53
102 : 160
103 : 80
104 : 40
105 : 20
106 : 10
107 : 5
108 : 16
109 : 8
110 : 4
111 : 2
112 : 1
1 113
&lt;/pre&gt;

===For checkNum(5000)===
&lt;pre&gt;
1 : 2500
2 : 1250
3 : 625
4 : 1876
5 : 938
6 : 469
7 : 1408
8 : 704
9 : 352
10 : 176
11 : 88
12 : 44
13 : 22
14 : 11
15 : 34
16 : 17
17 : 52
18 : 26
19 : 13
20 : 40
21 : 20
22 : 10
23 : 5
24 : 16
25 : 8
26 : 4
27 : 2
28 : 1
1 29
&lt;/pre&gt;
===For checkNum(25000000)===
&lt;pre&gt;
1 : 12500000
2 : 6250000
3 : 3125000
4 : 1562500
5 : 781250
6 : 390625
7 : 1171876
8 : 585938
9 : 292969
10 : 878908
11 : 439454
12 : 219727
13 : 659182
14 : 329591
15 : 988774
16 : 494387
17 : 1483162
18 : 741581
19 : 2224744
20 : 1112372
21 : 556186
22 : 278093
23 : 834280
24 : 417140
25 : 208570
26 : 104285
27 : 312856
28 : 156428
29 : 78214
30 : 39107
31 : 117322
32 : 58661
33 : 175984
34 : 87992
35 : 43996
36 : 21998
37 : 10999
38 : 32998
39 : 16499
40 : 49498
41 : 24749
42 : 74248
43 : 37124
44 : 18562
45 : 9281
46 : 27844
47 : 13922
48 : 6961
49 : 20884
50 : 10442
51 : 5221
52 : 15664
53 : 7832
54 : 3916
55 : 1958
56 : 979
57 : 2938
58 : 1469
59 : 4408
60 : 2204
61 : 1102
62 : 551
63 : 1654
64 : 827
65 : 2482
66 : 1241
67 : 3724
68 : 1862
69 : 931
70 : 2794
71 : 1397
72 : 4192
73 : 2096
74 : 1048
75 : 524
76 : 262
77 : 131
78 : 394
79 : 197
80 : 592
81 : 296
82 : 148
83 : 74
84 : 37
85 : 112
86 : 56
87 : 28
88 : 14
89 : 7
90 : 22
91 : 11
92 : 34
93 : 17
94 : 52
95 : 26
96 : 13
97 : 40
98 : 20
99 : 10
100 : 5
101 : 16
102 : 8
103 : 4
104 : 2
105 : 1
1 106
&lt;/pre&gt;

Happy Life ahead!!!

[[File:end1.png]]</text>
      <sha1>t20scgxp1vfo6me2fccxbo6uwqxd886</sha1>
    </revision>
    <revision>
      <id>4464</id>
      <parentid>4462</parentid>
      <timestamp>2018-10-17T06:34:00Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* Bidirectional with Parellel and self loops */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="12789">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_12 Contributors of this page]

=Page Rank - How does Google Work=
One web page is having link to other page, that is a page is referring to other page. Google uses ''Page Rank'' algorithm to choose which page should be displayed first.

If we have network, connections as below:
[[File:rank0.png]]

We want to pick a leader out of all these nodes. How to pick a leader?  Why to elect a leader? It is because we want to find the super power of available nodes.                     
[[File:rank1.png]]

For example, the application wherein, we want to find the most impressive person of the  few ones. How to decide it? As shown in below figure, each node will communicate with other, randomly, we implement the count for each node, how many times, the particular node is being visited.
[[File:rank2.png]]

[[#Top]]

As shown in following, figure, all nodes are visited and each node is marked with the 
number i.e.number of times the node is visited.
[[File:rank3.png]]

The node with the maximum count, becomes the winner. Here, node with 120 count in figure 
below, is the winner. i.e. The person with 120 count in the figure is the most impressive 
person in the community being considered.
[[File:rank4.png]]

[[File:rank5.png]]

[[File:rank6.png]]

[[File:rank7.png]]


[[File:rank8.png]]

[[#Top]]

Google selects the page rank in this matter. Each web page is connected to other web page with web links. To a page, maximum link is there, that will be put on top results in Google search results.
[[File:rank9.png]]

Google uses web crawler. The crawler takes the random walk on the www network and rank the web sites.
[[File:rank10.png]]

This way Google ranks the pages and displays search results, according to page rank.
[[File:rank11.png]]

e.g.we search for ''mysore city''. Google has 10,000 results. But it displays the results in the sequence of page rank of search results, As shown in figure below.
[[File:mysore.png]]

[[#Top]]

==Page rank algorithm ==
As shown in beautiful figure below, few nodes combinely selected one as the leader, then that leader and other nodes, have selected         other as a leader. This way, finally the final leader is elected.
[[File:rank12.png|600px]]


[[File:graph00.png|600px]]


[[File:graph01.png|600px]]

[[#Top]]

==Gragh Drawing Program1==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
nx.barbell_graph(4,2)
G=nx.barbell_graph(4,2)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:Graph003.png|600px]]

[[#Top]]

==Gragh Drawing Program2==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
nx.barbell_graph(4,3)
G=nx.barbell_graph(4,3)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:Graph004.png|600px]]

[[#Top]]

==Gragh Drawing Program3==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
nx.barbell_graph(5,3)
G=nx.barbell_graph(5,3)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:Graph005.png|600px]]

[[#Top]]

==Complete Graph==
Complete graph is a graph, wherein, each node is connected to each other nodes in a graph.

&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.complete_graph(4)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:

[[File:completegraph001.png|600px]]

[[#Top]]

==Cycle graph==

&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.cycle_graph(5)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:

[[File:cyclegraph1.png|600px]]

[[#Top]]

==Ladder graph==

&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.ladder_graph(5)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:

[[File:laddergraph.png|600px]]

[[#Top]]

==Path Graph==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.path_graph(6)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:

[[File:pathgraph.png|600px]]

[[#Top]]

==Star Graph==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.star_graph(5)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:stargraph.png|600px]]

[[#Top]]

==Star Graph of 4 Nodes==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.star_graph(4)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:stargraph4points.png|600px]]

==Wheel Graph==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.wheel_graph(4)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:wheelgraph.png|600px]]

[[#Top]]

==Wheel Graph of 5 nodes==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.wheel_graph(5)
nx.draw(G)
plt.show()

&lt;/pre&gt;

Output:

[[File:wheelgraph5nodes.png|600px]]

[[#Top]]

==Wheel Graph of 6 nodes==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.wheel_graph(6)
nx.draw(G)
plt.show()

&lt;/pre&gt;

Output:

[[File:wheelgraph6nodes.png|600px]]

[[#Top]]

==Random Graph==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.gnp_random_graph(5,0.5)
nx.draw(G)
plt.show()

&lt;/pre&gt;

Output:

[[File:randomgraph1.png|600px]]


Running the same above program, we will get different output, as shown below, as it is random graph.

[[File:randomgraph2.png|600px]]

[[#Top]]

==Page Rank Algorithm Implementation==

===Random Directed Graph===
&lt;pre&gt;
import networkx as nx
import random
import matplotlib.pyplot as plt

#Draw random directed graph
G=nx.gnp_random_graph(10,0.5,directed=True)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output: 

[[File:randomDirectedGraph.png|600px]]


===Random Directed Graph with Labels===
&lt;pre&gt;
import networkx as nx
import random
import matplotlib.pyplot as plt

#Draw random directed graph 
G=nx.gnp_random_graph(10,0.5,directed=True)
#Give label numbering to nodes
nx.draw(G,with_labels=True)
plt.show()

&lt;/pre&gt;

Output:

[[File:randomDirectedGraphwithLabels.png|600px]]


[[#Top]]

===Page Rank Coding===
&lt;pre&gt;
import networkx as nx
import random
import matplotlib.pyplot as plt
import operator

#Draw random directed graph 
G=nx.gnp_random_graph(10,0.5,directed=True)
#Give label numbering to nodes
nx.draw(G,with_labels=True)
plt.show()

#x is the random source node
x=random.choice([i for i in range(G.number_of_nodes())])

#dictionary to maintain counter
dictCounter={}
#initialize the counter of each node as 0
for i in range(G.number_of_nodes()):
    dictCounter[i]=0
dictCounter[x]=dictCounter[x]+1

for i in range(10000):
    listn=list(G.neighbors(x))
    #if x is a sink node, we need to select random node for random walk
    #, else select random neighbor node

    if(len(listn)==0):
        x=random.choice([i for i in range(G.number_of_nodes())])
        dictCounter[x]=dictCounter[x]+1
    else:
        #choose a node randomly from neightbors
        x=random.choice(listn)
        dictCounter[x]=dictCounter[x]+1

p=nx.pagerank(G)
sorted_p=sorted(p.items(),key=operator.itemgetter(1))
sorted_rw=sorted(dictCounter.items(),key=operator.itemgetter(1))                        
#print(p)
#print(dictCounter)

print(sorted_p)
print(sorted_rw)

&lt;/pre&gt;

Output:

&lt;pre&gt;
[(2, 0.07139920240302768), (5, 0.07464882519777695), (3, 0.08527469366832419), 
(6, 0.08665188647066119), (4, 0.0987815549542114), (0, 0.10858415997562518), 
(9, 0.110369696943925), (8, 0.11456211367660116), (1, 0.11682018308814024), 
(7, 0.13290768362170685)]
[(2, 4), (5, 7), (8, 7), (6, 8), (3, 11), (7, 11), (1, 12), (4, 12), (0, 13), (9, 16)]
&lt;/pre&gt;

[[#Top]]

=Email communication Network=
==Page rank :page distribution method==
===Revision: Graph===
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
G=nx.cycle_graph(4)
labels={0:&quot;Bangluru&quot;,1:&quot;Gawhati&quot;,2:&quot;Kolkata&quot;,3:&quot;Chennai&quot;}
nx.draw(G,with_labels=True,labels=labels)
plt.show()
&lt;/pre&gt;

Output:

[[File:revGRAPH.png]]


===Directed Graph  Example===

[[File:directedGraphExample.png|600px]]

&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
G=nx.gnp_random_graph(4,.5,directed=True)
labels={0:&quot;Bangluru&quot;,1:&quot;Gawhati&quot;,2:&quot;Kolkata&quot;,3:&quot;Chennai&quot;}
nx.draw(G,with_labels=True,labels=labels)
plt.show()

&lt;/pre&gt;

Output:
[[File:directedg.png|600px]]


[[#Top]]


==Bidirectional with Parallel and self loops==
===Bidirectional with Parallel edges==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
G=nx.MultiDiGraph()

G.add_node(1)
G.add_node(2)
G.add_node(3)
G.add_node(4)

G.add_path([1,2,3,4,1])
G.add_edge(1,4)
nx.draw(G,with_labels=True)
plt.show()
&lt;/pre&gt;

Output: 

[[File:bidirectionalg.png]]

==Bidirectional with Self loops==
It doesn't show as graph
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
G=nx.MultiDiGraph()

G.add_node(1)
G.add_node(2)
G.add_node(3)
G.add_node(4)

G.add_path([1,2,3,4,1])
G.add_edge(1,4)
G.add_edge(1,1)
nx.draw(G,with_labels=True)
d=G.selfloop_edges()
print(d)
plt.show()

&lt;/pre&gt;

#Output: &lt;generator object selfloop_edges.&lt;locals&gt;.&lt;genexpr&gt; at 0x0B790150&gt;
#It shows self loop is there in the graph

=Collatz Conjecture=
Taught by Sudarshan sir and Amit sir, and Edited by Ms. Ami Tusharkant Choksi

If a number is even, divide it by ''2'', if it is odd, make multiply it by ''3'' and add ''1'', till you get ''1''. This simple problem is called, ''Collatz Conjecture''. 

[[File:collatz1.png|600px]]

[[File:collatz2.png|600px]]

[[File:collatz3.png|600px]]

[[File:collatz4.png|600px]]

[[File:collatz5.png|600px]]

Number is bigger doesn't mean more iterations are required. One can notice, from the output of the following program. 



The program to implement the same is as follows:
==Program==
&lt;pre&gt;
#collatz conjecture
#if num is even, divide it by 2
#if num is odd, new number is equal to 3n+1


def checkNum(num):
    iterations=1
    while(num!=1):
        if(num%2==0):
            num=int(num/2)            
        else:
            num = 3*num+1
        iterations+=1
        

    print(num,iterations)


#checkNum(12)#Output: 1 10
#checkNum(26)#Output: 1 11
checkNum(2000)#Output: 1 113
&lt;/pre&gt;

&lt;pre&gt;

#recursive approach

def checkNum(num):
    if num==1:
        return 1
    elif num%2==0:
        return checkNum(num/2)+1
    else:
        return checkNum(3*num +1)+1


output:
checkNum(26)
Out[27]: 11
checkNum(5000)
Out[28]: 29
&lt;/pre&gt;

==Program adding statement to print all iterations==
&lt;pre&gt;
def checkNum(num):
    iterations=1
    while(num!=1):
        if(num%2==0):
            num=int(num/2)            
        else:
            num = 3*num+1
        print(iterations,&quot;:&quot;,num)
        iterations+=1
        

    print(num,iterations)
&lt;/pre&gt;
==Output==
===For checkNum(2000)===
&lt;pre&gt;
1 : 1000
2 : 500
3 : 250
4 : 125
5 : 376
6 : 188
7 : 94
8 : 47
9 : 142
10 : 71
11 : 214
12 : 107
13 : 322
14 : 161
15 : 484
16 : 242
17 : 121
18 : 364
19 : 182
20 : 91
21 : 274
22 : 137
23 : 412
24 : 206
25 : 103
26 : 310
27 : 155
28 : 466
29 : 233
30 : 700
31 : 350
32 : 175
33 : 526
34 : 263
35 : 790
36 : 395
37 : 1186
38 : 593
39 : 1780
40 : 890
41 : 445
42 : 1336
43 : 668
44 : 334
45 : 167
46 : 502
47 : 251
48 : 754
49 : 377
50 : 1132
51 : 566
52 : 283
53 : 850
54 : 425
55 : 1276
56 : 638
57 : 319
58 : 958
59 : 479
60 : 1438
61 : 719
62 : 2158
63 : 1079
64 : 3238
65 : 1619
66 : 4858
67 : 2429
68 : 7288
69 : 3644
70 : 1822
71 : 911
72 : 2734
73 : 1367
74 : 4102
75 : 2051
76 : 6154
77 : 3077
78 : 9232
79 : 4616
80 : 2308
81 : 1154
82 : 577
83 : 1732
84 : 866
85 : 433
86 : 1300
87 : 650
88 : 325
89 : 976
90 : 488
91 : 244
92 : 122
93 : 61
94 : 184
95 : 92
96 : 46
97 : 23
98 : 70
99 : 35
100 : 106
101 : 53
102 : 160
103 : 80
104 : 40
105 : 20
106 : 10
107 : 5
108 : 16
109 : 8
110 : 4
111 : 2
112 : 1
1 113
&lt;/pre&gt;

===For checkNum(5000)===
&lt;pre&gt;
1 : 2500
2 : 1250
3 : 625
4 : 1876
5 : 938
6 : 469
7 : 1408
8 : 704
9 : 352
10 : 176
11 : 88
12 : 44
13 : 22
14 : 11
15 : 34
16 : 17
17 : 52
18 : 26
19 : 13
20 : 40
21 : 20
22 : 10
23 : 5
24 : 16
25 : 8
26 : 4
27 : 2
28 : 1
1 29
&lt;/pre&gt;
===For checkNum(25000000)===
&lt;pre&gt;
1 : 12500000
2 : 6250000
3 : 3125000
4 : 1562500
5 : 781250
6 : 390625
7 : 1171876
8 : 585938
9 : 292969
10 : 878908
11 : 439454
12 : 219727
13 : 659182
14 : 329591
15 : 988774
16 : 494387
17 : 1483162
18 : 741581
19 : 2224744
20 : 1112372
21 : 556186
22 : 278093
23 : 834280
24 : 417140
25 : 208570
26 : 104285
27 : 312856
28 : 156428
29 : 78214
30 : 39107
31 : 117322
32 : 58661
33 : 175984
34 : 87992
35 : 43996
36 : 21998
37 : 10999
38 : 32998
39 : 16499
40 : 49498
41 : 24749
42 : 74248
43 : 37124
44 : 18562
45 : 9281
46 : 27844
47 : 13922
48 : 6961
49 : 20884
50 : 10442
51 : 5221
52 : 15664
53 : 7832
54 : 3916
55 : 1958
56 : 979
57 : 2938
58 : 1469
59 : 4408
60 : 2204
61 : 1102
62 : 551
63 : 1654
64 : 827
65 : 2482
66 : 1241
67 : 3724
68 : 1862
69 : 931
70 : 2794
71 : 1397
72 : 4192
73 : 2096
74 : 1048
75 : 524
76 : 262
77 : 131
78 : 394
79 : 197
80 : 592
81 : 296
82 : 148
83 : 74
84 : 37
85 : 112
86 : 56
87 : 28
88 : 14
89 : 7
90 : 22
91 : 11
92 : 34
93 : 17
94 : 52
95 : 26
96 : 13
97 : 40
98 : 20
99 : 10
100 : 5
101 : 16
102 : 8
103 : 4
104 : 2
105 : 1
1 106
&lt;/pre&gt;

Happy Life ahead!!!

[[File:end1.png]]</text>
      <sha1>00vghc3ocf9bcq69xq98w25sat9rat2</sha1>
    </revision>
    <revision>
      <id>4465</id>
      <parentid>4464</parentid>
      <timestamp>2018-10-17T06:34:14Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* =Bidirectional with Parallel edges */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="12788">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_12 Contributors of this page]

=Page Rank - How does Google Work=
One web page is having link to other page, that is a page is referring to other page. Google uses ''Page Rank'' algorithm to choose which page should be displayed first.

If we have network, connections as below:
[[File:rank0.png]]

We want to pick a leader out of all these nodes. How to pick a leader?  Why to elect a leader? It is because we want to find the super power of available nodes.                     
[[File:rank1.png]]

For example, the application wherein, we want to find the most impressive person of the  few ones. How to decide it? As shown in below figure, each node will communicate with other, randomly, we implement the count for each node, how many times, the particular node is being visited.
[[File:rank2.png]]

[[#Top]]

As shown in following, figure, all nodes are visited and each node is marked with the 
number i.e.number of times the node is visited.
[[File:rank3.png]]

The node with the maximum count, becomes the winner. Here, node with 120 count in figure 
below, is the winner. i.e. The person with 120 count in the figure is the most impressive 
person in the community being considered.
[[File:rank4.png]]

[[File:rank5.png]]

[[File:rank6.png]]

[[File:rank7.png]]


[[File:rank8.png]]

[[#Top]]

Google selects the page rank in this matter. Each web page is connected to other web page with web links. To a page, maximum link is there, that will be put on top results in Google search results.
[[File:rank9.png]]

Google uses web crawler. The crawler takes the random walk on the www network and rank the web sites.
[[File:rank10.png]]

This way Google ranks the pages and displays search results, according to page rank.
[[File:rank11.png]]

e.g.we search for ''mysore city''. Google has 10,000 results. But it displays the results in the sequence of page rank of search results, As shown in figure below.
[[File:mysore.png]]

[[#Top]]

==Page rank algorithm ==
As shown in beautiful figure below, few nodes combinely selected one as the leader, then that leader and other nodes, have selected         other as a leader. This way, finally the final leader is elected.
[[File:rank12.png|600px]]


[[File:graph00.png|600px]]


[[File:graph01.png|600px]]

[[#Top]]

==Gragh Drawing Program1==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
nx.barbell_graph(4,2)
G=nx.barbell_graph(4,2)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:Graph003.png|600px]]

[[#Top]]

==Gragh Drawing Program2==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
nx.barbell_graph(4,3)
G=nx.barbell_graph(4,3)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:Graph004.png|600px]]

[[#Top]]

==Gragh Drawing Program3==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
nx.barbell_graph(5,3)
G=nx.barbell_graph(5,3)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:Graph005.png|600px]]

[[#Top]]

==Complete Graph==
Complete graph is a graph, wherein, each node is connected to each other nodes in a graph.

&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.complete_graph(4)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:

[[File:completegraph001.png|600px]]

[[#Top]]

==Cycle graph==

&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.cycle_graph(5)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:

[[File:cyclegraph1.png|600px]]

[[#Top]]

==Ladder graph==

&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.ladder_graph(5)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:

[[File:laddergraph.png|600px]]

[[#Top]]

==Path Graph==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.path_graph(6)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:

[[File:pathgraph.png|600px]]

[[#Top]]

==Star Graph==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.star_graph(5)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:stargraph.png|600px]]

[[#Top]]

==Star Graph of 4 Nodes==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.star_graph(4)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:stargraph4points.png|600px]]

==Wheel Graph==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.wheel_graph(4)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:wheelgraph.png|600px]]

[[#Top]]

==Wheel Graph of 5 nodes==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.wheel_graph(5)
nx.draw(G)
plt.show()

&lt;/pre&gt;

Output:

[[File:wheelgraph5nodes.png|600px]]

[[#Top]]

==Wheel Graph of 6 nodes==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.wheel_graph(6)
nx.draw(G)
plt.show()

&lt;/pre&gt;

Output:

[[File:wheelgraph6nodes.png|600px]]

[[#Top]]

==Random Graph==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.gnp_random_graph(5,0.5)
nx.draw(G)
plt.show()

&lt;/pre&gt;

Output:

[[File:randomgraph1.png|600px]]


Running the same above program, we will get different output, as shown below, as it is random graph.

[[File:randomgraph2.png|600px]]

[[#Top]]

==Page Rank Algorithm Implementation==

===Random Directed Graph===
&lt;pre&gt;
import networkx as nx
import random
import matplotlib.pyplot as plt

#Draw random directed graph
G=nx.gnp_random_graph(10,0.5,directed=True)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output: 

[[File:randomDirectedGraph.png|600px]]


===Random Directed Graph with Labels===
&lt;pre&gt;
import networkx as nx
import random
import matplotlib.pyplot as plt

#Draw random directed graph 
G=nx.gnp_random_graph(10,0.5,directed=True)
#Give label numbering to nodes
nx.draw(G,with_labels=True)
plt.show()

&lt;/pre&gt;

Output:

[[File:randomDirectedGraphwithLabels.png|600px]]


[[#Top]]

===Page Rank Coding===
&lt;pre&gt;
import networkx as nx
import random
import matplotlib.pyplot as plt
import operator

#Draw random directed graph 
G=nx.gnp_random_graph(10,0.5,directed=True)
#Give label numbering to nodes
nx.draw(G,with_labels=True)
plt.show()

#x is the random source node
x=random.choice([i for i in range(G.number_of_nodes())])

#dictionary to maintain counter
dictCounter={}
#initialize the counter of each node as 0
for i in range(G.number_of_nodes()):
    dictCounter[i]=0
dictCounter[x]=dictCounter[x]+1

for i in range(10000):
    listn=list(G.neighbors(x))
    #if x is a sink node, we need to select random node for random walk
    #, else select random neighbor node

    if(len(listn)==0):
        x=random.choice([i for i in range(G.number_of_nodes())])
        dictCounter[x]=dictCounter[x]+1
    else:
        #choose a node randomly from neightbors
        x=random.choice(listn)
        dictCounter[x]=dictCounter[x]+1

p=nx.pagerank(G)
sorted_p=sorted(p.items(),key=operator.itemgetter(1))
sorted_rw=sorted(dictCounter.items(),key=operator.itemgetter(1))                        
#print(p)
#print(dictCounter)

print(sorted_p)
print(sorted_rw)

&lt;/pre&gt;

Output:

&lt;pre&gt;
[(2, 0.07139920240302768), (5, 0.07464882519777695), (3, 0.08527469366832419), 
(6, 0.08665188647066119), (4, 0.0987815549542114), (0, 0.10858415997562518), 
(9, 0.110369696943925), (8, 0.11456211367660116), (1, 0.11682018308814024), 
(7, 0.13290768362170685)]
[(2, 4), (5, 7), (8, 7), (6, 8), (3, 11), (7, 11), (1, 12), (4, 12), (0, 13), (9, 16)]
&lt;/pre&gt;

[[#Top]]

=Email communication Network=
==Page rank :page distribution method==
===Revision: Graph===
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
G=nx.cycle_graph(4)
labels={0:&quot;Bangluru&quot;,1:&quot;Gawhati&quot;,2:&quot;Kolkata&quot;,3:&quot;Chennai&quot;}
nx.draw(G,with_labels=True,labels=labels)
plt.show()
&lt;/pre&gt;

Output:

[[File:revGRAPH.png]]


===Directed Graph  Example===

[[File:directedGraphExample.png|600px]]

&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
G=nx.gnp_random_graph(4,.5,directed=True)
labels={0:&quot;Bangluru&quot;,1:&quot;Gawhati&quot;,2:&quot;Kolkata&quot;,3:&quot;Chennai&quot;}
nx.draw(G,with_labels=True,labels=labels)
plt.show()

&lt;/pre&gt;

Output:
[[File:directedg.png|600px]]


[[#Top]]


==Bidirectional with Parallel and self loops==
==Bidirectional with Parallel edges==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
G=nx.MultiDiGraph()

G.add_node(1)
G.add_node(2)
G.add_node(3)
G.add_node(4)

G.add_path([1,2,3,4,1])
G.add_edge(1,4)
nx.draw(G,with_labels=True)
plt.show()
&lt;/pre&gt;

Output: 

[[File:bidirectionalg.png]]

==Bidirectional with Self loops==
It doesn't show as graph
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
G=nx.MultiDiGraph()

G.add_node(1)
G.add_node(2)
G.add_node(3)
G.add_node(4)

G.add_path([1,2,3,4,1])
G.add_edge(1,4)
G.add_edge(1,1)
nx.draw(G,with_labels=True)
d=G.selfloop_edges()
print(d)
plt.show()

&lt;/pre&gt;

#Output: &lt;generator object selfloop_edges.&lt;locals&gt;.&lt;genexpr&gt; at 0x0B790150&gt;
#It shows self loop is there in the graph

=Collatz Conjecture=
Taught by Sudarshan sir and Amit sir, and Edited by Ms. Ami Tusharkant Choksi

If a number is even, divide it by ''2'', if it is odd, make multiply it by ''3'' and add ''1'', till you get ''1''. This simple problem is called, ''Collatz Conjecture''. 

[[File:collatz1.png|600px]]

[[File:collatz2.png|600px]]

[[File:collatz3.png|600px]]

[[File:collatz4.png|600px]]

[[File:collatz5.png|600px]]

Number is bigger doesn't mean more iterations are required. One can notice, from the output of the following program. 



The program to implement the same is as follows:
==Program==
&lt;pre&gt;
#collatz conjecture
#if num is even, divide it by 2
#if num is odd, new number is equal to 3n+1


def checkNum(num):
    iterations=1
    while(num!=1):
        if(num%2==0):
            num=int(num/2)            
        else:
            num = 3*num+1
        iterations+=1
        

    print(num,iterations)


#checkNum(12)#Output: 1 10
#checkNum(26)#Output: 1 11
checkNum(2000)#Output: 1 113
&lt;/pre&gt;

&lt;pre&gt;

#recursive approach

def checkNum(num):
    if num==1:
        return 1
    elif num%2==0:
        return checkNum(num/2)+1
    else:
        return checkNum(3*num +1)+1


output:
checkNum(26)
Out[27]: 11
checkNum(5000)
Out[28]: 29
&lt;/pre&gt;

==Program adding statement to print all iterations==
&lt;pre&gt;
def checkNum(num):
    iterations=1
    while(num!=1):
        if(num%2==0):
            num=int(num/2)            
        else:
            num = 3*num+1
        print(iterations,&quot;:&quot;,num)
        iterations+=1
        

    print(num,iterations)
&lt;/pre&gt;
==Output==
===For checkNum(2000)===
&lt;pre&gt;
1 : 1000
2 : 500
3 : 250
4 : 125
5 : 376
6 : 188
7 : 94
8 : 47
9 : 142
10 : 71
11 : 214
12 : 107
13 : 322
14 : 161
15 : 484
16 : 242
17 : 121
18 : 364
19 : 182
20 : 91
21 : 274
22 : 137
23 : 412
24 : 206
25 : 103
26 : 310
27 : 155
28 : 466
29 : 233
30 : 700
31 : 350
32 : 175
33 : 526
34 : 263
35 : 790
36 : 395
37 : 1186
38 : 593
39 : 1780
40 : 890
41 : 445
42 : 1336
43 : 668
44 : 334
45 : 167
46 : 502
47 : 251
48 : 754
49 : 377
50 : 1132
51 : 566
52 : 283
53 : 850
54 : 425
55 : 1276
56 : 638
57 : 319
58 : 958
59 : 479
60 : 1438
61 : 719
62 : 2158
63 : 1079
64 : 3238
65 : 1619
66 : 4858
67 : 2429
68 : 7288
69 : 3644
70 : 1822
71 : 911
72 : 2734
73 : 1367
74 : 4102
75 : 2051
76 : 6154
77 : 3077
78 : 9232
79 : 4616
80 : 2308
81 : 1154
82 : 577
83 : 1732
84 : 866
85 : 433
86 : 1300
87 : 650
88 : 325
89 : 976
90 : 488
91 : 244
92 : 122
93 : 61
94 : 184
95 : 92
96 : 46
97 : 23
98 : 70
99 : 35
100 : 106
101 : 53
102 : 160
103 : 80
104 : 40
105 : 20
106 : 10
107 : 5
108 : 16
109 : 8
110 : 4
111 : 2
112 : 1
1 113
&lt;/pre&gt;

===For checkNum(5000)===
&lt;pre&gt;
1 : 2500
2 : 1250
3 : 625
4 : 1876
5 : 938
6 : 469
7 : 1408
8 : 704
9 : 352
10 : 176
11 : 88
12 : 44
13 : 22
14 : 11
15 : 34
16 : 17
17 : 52
18 : 26
19 : 13
20 : 40
21 : 20
22 : 10
23 : 5
24 : 16
25 : 8
26 : 4
27 : 2
28 : 1
1 29
&lt;/pre&gt;
===For checkNum(25000000)===
&lt;pre&gt;
1 : 12500000
2 : 6250000
3 : 3125000
4 : 1562500
5 : 781250
6 : 390625
7 : 1171876
8 : 585938
9 : 292969
10 : 878908
11 : 439454
12 : 219727
13 : 659182
14 : 329591
15 : 988774
16 : 494387
17 : 1483162
18 : 741581
19 : 2224744
20 : 1112372
21 : 556186
22 : 278093
23 : 834280
24 : 417140
25 : 208570
26 : 104285
27 : 312856
28 : 156428
29 : 78214
30 : 39107
31 : 117322
32 : 58661
33 : 175984
34 : 87992
35 : 43996
36 : 21998
37 : 10999
38 : 32998
39 : 16499
40 : 49498
41 : 24749
42 : 74248
43 : 37124
44 : 18562
45 : 9281
46 : 27844
47 : 13922
48 : 6961
49 : 20884
50 : 10442
51 : 5221
52 : 15664
53 : 7832
54 : 3916
55 : 1958
56 : 979
57 : 2938
58 : 1469
59 : 4408
60 : 2204
61 : 1102
62 : 551
63 : 1654
64 : 827
65 : 2482
66 : 1241
67 : 3724
68 : 1862
69 : 931
70 : 2794
71 : 1397
72 : 4192
73 : 2096
74 : 1048
75 : 524
76 : 262
77 : 131
78 : 394
79 : 197
80 : 592
81 : 296
82 : 148
83 : 74
84 : 37
85 : 112
86 : 56
87 : 28
88 : 14
89 : 7
90 : 22
91 : 11
92 : 34
93 : 17
94 : 52
95 : 26
96 : 13
97 : 40
98 : 20
99 : 10
100 : 5
101 : 16
102 : 8
103 : 4
104 : 2
105 : 1
1 106
&lt;/pre&gt;

Happy Life ahead!!!

[[File:end1.png]]</text>
      <sha1>0h5bmffzo5cqgqg8uzi3cxrhsp9z2zm</sha1>
    </revision>
    <revision>
      <id>4466</id>
      <parentid>4465</parentid>
      <timestamp>2018-10-17T07:13:03Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* Bidirectional with Self loops */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="13548">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_12 Contributors of this page]

=Page Rank - How does Google Work=
One web page is having link to other page, that is a page is referring to other page. Google uses ''Page Rank'' algorithm to choose which page should be displayed first.

If we have network, connections as below:
[[File:rank0.png]]

We want to pick a leader out of all these nodes. How to pick a leader?  Why to elect a leader? It is because we want to find the super power of available nodes.                     
[[File:rank1.png]]

For example, the application wherein, we want to find the most impressive person of the  few ones. How to decide it? As shown in below figure, each node will communicate with other, randomly, we implement the count for each node, how many times, the particular node is being visited.
[[File:rank2.png]]

[[#Top]]

As shown in following, figure, all nodes are visited and each node is marked with the 
number i.e.number of times the node is visited.
[[File:rank3.png]]

The node with the maximum count, becomes the winner. Here, node with 120 count in figure 
below, is the winner. i.e. The person with 120 count in the figure is the most impressive 
person in the community being considered.
[[File:rank4.png]]

[[File:rank5.png]]

[[File:rank6.png]]

[[File:rank7.png]]


[[File:rank8.png]]

[[#Top]]

Google selects the page rank in this matter. Each web page is connected to other web page with web links. To a page, maximum link is there, that will be put on top results in Google search results.
[[File:rank9.png]]

Google uses web crawler. The crawler takes the random walk on the www network and rank the web sites.
[[File:rank10.png]]

This way Google ranks the pages and displays search results, according to page rank.
[[File:rank11.png]]

e.g.we search for ''mysore city''. Google has 10,000 results. But it displays the results in the sequence of page rank of search results, As shown in figure below.
[[File:mysore.png]]

[[#Top]]

==Page rank algorithm ==
As shown in beautiful figure below, few nodes combinely selected one as the leader, then that leader and other nodes, have selected         other as a leader. This way, finally the final leader is elected.
[[File:rank12.png|600px]]


[[File:graph00.png|600px]]


[[File:graph01.png|600px]]

[[#Top]]

==Gragh Drawing Program1==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
nx.barbell_graph(4,2)
G=nx.barbell_graph(4,2)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:Graph003.png|600px]]

[[#Top]]

==Gragh Drawing Program2==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
nx.barbell_graph(4,3)
G=nx.barbell_graph(4,3)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:Graph004.png|600px]]

[[#Top]]

==Gragh Drawing Program3==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
nx.barbell_graph(5,3)
G=nx.barbell_graph(5,3)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:Graph005.png|600px]]

[[#Top]]

==Complete Graph==
Complete graph is a graph, wherein, each node is connected to each other nodes in a graph.

&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.complete_graph(4)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:

[[File:completegraph001.png|600px]]

[[#Top]]

==Cycle graph==

&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.cycle_graph(5)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:

[[File:cyclegraph1.png|600px]]

[[#Top]]

==Ladder graph==

&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.ladder_graph(5)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:

[[File:laddergraph.png|600px]]

[[#Top]]

==Path Graph==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.path_graph(6)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:

[[File:pathgraph.png|600px]]

[[#Top]]

==Star Graph==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.star_graph(5)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:stargraph.png|600px]]

[[#Top]]

==Star Graph of 4 Nodes==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.star_graph(4)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:stargraph4points.png|600px]]

==Wheel Graph==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.wheel_graph(4)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:wheelgraph.png|600px]]

[[#Top]]

==Wheel Graph of 5 nodes==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.wheel_graph(5)
nx.draw(G)
plt.show()

&lt;/pre&gt;

Output:

[[File:wheelgraph5nodes.png|600px]]

[[#Top]]

==Wheel Graph of 6 nodes==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.wheel_graph(6)
nx.draw(G)
plt.show()

&lt;/pre&gt;

Output:

[[File:wheelgraph6nodes.png|600px]]

[[#Top]]

==Random Graph==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.gnp_random_graph(5,0.5)
nx.draw(G)
plt.show()

&lt;/pre&gt;

Output:

[[File:randomgraph1.png|600px]]


Running the same above program, we will get different output, as shown below, as it is random graph.

[[File:randomgraph2.png|600px]]

[[#Top]]

==Page Rank Algorithm Implementation==

===Random Directed Graph===
&lt;pre&gt;
import networkx as nx
import random
import matplotlib.pyplot as plt

#Draw random directed graph
G=nx.gnp_random_graph(10,0.5,directed=True)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output: 

[[File:randomDirectedGraph.png|600px]]


===Random Directed Graph with Labels===
&lt;pre&gt;
import networkx as nx
import random
import matplotlib.pyplot as plt

#Draw random directed graph 
G=nx.gnp_random_graph(10,0.5,directed=True)
#Give label numbering to nodes
nx.draw(G,with_labels=True)
plt.show()

&lt;/pre&gt;

Output:

[[File:randomDirectedGraphwithLabels.png|600px]]


[[#Top]]

===Page Rank Coding===
&lt;pre&gt;
import networkx as nx
import random
import matplotlib.pyplot as plt
import operator

#Draw random directed graph 
G=nx.gnp_random_graph(10,0.5,directed=True)
#Give label numbering to nodes
nx.draw(G,with_labels=True)
plt.show()

#x is the random source node
x=random.choice([i for i in range(G.number_of_nodes())])

#dictionary to maintain counter
dictCounter={}
#initialize the counter of each node as 0
for i in range(G.number_of_nodes()):
    dictCounter[i]=0
dictCounter[x]=dictCounter[x]+1

for i in range(10000):
    listn=list(G.neighbors(x))
    #if x is a sink node, we need to select random node for random walk
    #, else select random neighbor node

    if(len(listn)==0):
        x=random.choice([i for i in range(G.number_of_nodes())])
        dictCounter[x]=dictCounter[x]+1
    else:
        #choose a node randomly from neightbors
        x=random.choice(listn)
        dictCounter[x]=dictCounter[x]+1

p=nx.pagerank(G)
sorted_p=sorted(p.items(),key=operator.itemgetter(1))
sorted_rw=sorted(dictCounter.items(),key=operator.itemgetter(1))                        
#print(p)
#print(dictCounter)

print(sorted_p)
print(sorted_rw)

&lt;/pre&gt;

Output:

&lt;pre&gt;
[(2, 0.07139920240302768), (5, 0.07464882519777695), (3, 0.08527469366832419), 
(6, 0.08665188647066119), (4, 0.0987815549542114), (0, 0.10858415997562518), 
(9, 0.110369696943925), (8, 0.11456211367660116), (1, 0.11682018308814024), 
(7, 0.13290768362170685)]
[(2, 4), (5, 7), (8, 7), (6, 8), (3, 11), (7, 11), (1, 12), (4, 12), (0, 13), (9, 16)]
&lt;/pre&gt;

[[#Top]]

=Email communication Network=
==Page rank :page distribution method==
===Revision: Graph===
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
G=nx.cycle_graph(4)
labels={0:&quot;Bangluru&quot;,1:&quot;Gawhati&quot;,2:&quot;Kolkata&quot;,3:&quot;Chennai&quot;}
nx.draw(G,with_labels=True,labels=labels)
plt.show()
&lt;/pre&gt;

Output:

[[File:revGRAPH.png]]


===Directed Graph  Example===

[[File:directedGraphExample.png|600px]]

&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
G=nx.gnp_random_graph(4,.5,directed=True)
labels={0:&quot;Bangluru&quot;,1:&quot;Gawhati&quot;,2:&quot;Kolkata&quot;,3:&quot;Chennai&quot;}
nx.draw(G,with_labels=True,labels=labels)
plt.show()

&lt;/pre&gt;

Output:
[[File:directedg.png|600px]]


[[#Top]]


==Bidirectional with Parallel and self loops==
==Bidirectional with Parallel edges==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
G=nx.MultiDiGraph()

G.add_node(1)
G.add_node(2)
G.add_node(3)
G.add_node(4)

G.add_path([1,2,3,4,1])
G.add_edge(1,4)
nx.draw(G,with_labels=True)
plt.show()
&lt;/pre&gt;

Output: 

[[File:bidirectionalg.png]]

==Bidirectional with Self loops==
It doesn't show as graph. It is not taught, I did it myself.(Ms. Ami TUSHARKANT CHOKSI)
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
G=nx.MultiDiGraph()

G.add_node(1)
G.add_node(2)
G.add_node(3)
G.add_node(4)

G.add_path([1,2,3,4,1])
G.add_edge(1,4)
G.add_edge(1,1)
nx.draw(G,with_labels=True)
d=G.selfloop_edges()
print(d)
plt.show()

&lt;/pre&gt;

#Output: &lt;generator object selfloop_edges.&lt;locals&gt;.&lt;genexpr&gt; at 0x0B790150&gt;
#It shows self loop is there in the graph


==Directed Undirected Graph==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

#undirected graph
U=nx.Graph()

#directed graph
G=nx.DiGraph()

#nodes in graph
print(G.nodes())#Output: []
G.add_nodes_from([i for i in range(5)])
print(G.nodes())#Output: [0, 1, 2, 3, 4]

#edges
print(G.out_edges())#Output:[]

print(G.in_edges())#Output:[]

G.add_edge(1,2)
print(G.edges())#Output: [(1, 2)]
print(G.in_edges())#Output: [(1, 2)]
print(G.out_edges())#Output: [(1, 2)]

G.add_edge(0,3)
G.add_edge(2,3)
G.add_edge(3,2)
G.add_edge(3,4)
G.add_edge(4,1)
print(G.out_edges(2))#Output: [(2, 3)]
print(G.out_edges(3))#Output:[(3, 2), (3, 4)]
print(G.in_edges(3))#Output:[(0, 3), (2, 3)]

&lt;/pre&gt;

=Collatz Conjecture=
Taught by Sudarshan sir and Amit sir, and Edited by Ms. Ami Tusharkant Choksi

If a number is even, divide it by ''2'', if it is odd, make multiply it by ''3'' and add ''1'', till you get ''1''. This simple problem is called, ''Collatz Conjecture''. 

[[File:collatz1.png|600px]]

[[File:collatz2.png|600px]]

[[File:collatz3.png|600px]]

[[File:collatz4.png|600px]]

[[File:collatz5.png|600px]]

Number is bigger doesn't mean more iterations are required. One can notice, from the output of the following program. 



The program to implement the same is as follows:
==Program==
&lt;pre&gt;
#collatz conjecture
#if num is even, divide it by 2
#if num is odd, new number is equal to 3n+1


def checkNum(num):
    iterations=1
    while(num!=1):
        if(num%2==0):
            num=int(num/2)            
        else:
            num = 3*num+1
        iterations+=1
        

    print(num,iterations)


#checkNum(12)#Output: 1 10
#checkNum(26)#Output: 1 11
checkNum(2000)#Output: 1 113
&lt;/pre&gt;

&lt;pre&gt;

#recursive approach

def checkNum(num):
    if num==1:
        return 1
    elif num%2==0:
        return checkNum(num/2)+1
    else:
        return checkNum(3*num +1)+1


output:
checkNum(26)
Out[27]: 11
checkNum(5000)
Out[28]: 29
&lt;/pre&gt;

==Program adding statement to print all iterations==
&lt;pre&gt;
def checkNum(num):
    iterations=1
    while(num!=1):
        if(num%2==0):
            num=int(num/2)            
        else:
            num = 3*num+1
        print(iterations,&quot;:&quot;,num)
        iterations+=1
        

    print(num,iterations)
&lt;/pre&gt;
==Output==
===For checkNum(2000)===
&lt;pre&gt;
1 : 1000
2 : 500
3 : 250
4 : 125
5 : 376
6 : 188
7 : 94
8 : 47
9 : 142
10 : 71
11 : 214
12 : 107
13 : 322
14 : 161
15 : 484
16 : 242
17 : 121
18 : 364
19 : 182
20 : 91
21 : 274
22 : 137
23 : 412
24 : 206
25 : 103
26 : 310
27 : 155
28 : 466
29 : 233
30 : 700
31 : 350
32 : 175
33 : 526
34 : 263
35 : 790
36 : 395
37 : 1186
38 : 593
39 : 1780
40 : 890
41 : 445
42 : 1336
43 : 668
44 : 334
45 : 167
46 : 502
47 : 251
48 : 754
49 : 377
50 : 1132
51 : 566
52 : 283
53 : 850
54 : 425
55 : 1276
56 : 638
57 : 319
58 : 958
59 : 479
60 : 1438
61 : 719
62 : 2158
63 : 1079
64 : 3238
65 : 1619
66 : 4858
67 : 2429
68 : 7288
69 : 3644
70 : 1822
71 : 911
72 : 2734
73 : 1367
74 : 4102
75 : 2051
76 : 6154
77 : 3077
78 : 9232
79 : 4616
80 : 2308
81 : 1154
82 : 577
83 : 1732
84 : 866
85 : 433
86 : 1300
87 : 650
88 : 325
89 : 976
90 : 488
91 : 244
92 : 122
93 : 61
94 : 184
95 : 92
96 : 46
97 : 23
98 : 70
99 : 35
100 : 106
101 : 53
102 : 160
103 : 80
104 : 40
105 : 20
106 : 10
107 : 5
108 : 16
109 : 8
110 : 4
111 : 2
112 : 1
1 113
&lt;/pre&gt;

===For checkNum(5000)===
&lt;pre&gt;
1 : 2500
2 : 1250
3 : 625
4 : 1876
5 : 938
6 : 469
7 : 1408
8 : 704
9 : 352
10 : 176
11 : 88
12 : 44
13 : 22
14 : 11
15 : 34
16 : 17
17 : 52
18 : 26
19 : 13
20 : 40
21 : 20
22 : 10
23 : 5
24 : 16
25 : 8
26 : 4
27 : 2
28 : 1
1 29
&lt;/pre&gt;
===For checkNum(25000000)===
&lt;pre&gt;
1 : 12500000
2 : 6250000
3 : 3125000
4 : 1562500
5 : 781250
6 : 390625
7 : 1171876
8 : 585938
9 : 292969
10 : 878908
11 : 439454
12 : 219727
13 : 659182
14 : 329591
15 : 988774
16 : 494387
17 : 1483162
18 : 741581
19 : 2224744
20 : 1112372
21 : 556186
22 : 278093
23 : 834280
24 : 417140
25 : 208570
26 : 104285
27 : 312856
28 : 156428
29 : 78214
30 : 39107
31 : 117322
32 : 58661
33 : 175984
34 : 87992
35 : 43996
36 : 21998
37 : 10999
38 : 32998
39 : 16499
40 : 49498
41 : 24749
42 : 74248
43 : 37124
44 : 18562
45 : 9281
46 : 27844
47 : 13922
48 : 6961
49 : 20884
50 : 10442
51 : 5221
52 : 15664
53 : 7832
54 : 3916
55 : 1958
56 : 979
57 : 2938
58 : 1469
59 : 4408
60 : 2204
61 : 1102
62 : 551
63 : 1654
64 : 827
65 : 2482
66 : 1241
67 : 3724
68 : 1862
69 : 931
70 : 2794
71 : 1397
72 : 4192
73 : 2096
74 : 1048
75 : 524
76 : 262
77 : 131
78 : 394
79 : 197
80 : 592
81 : 296
82 : 148
83 : 74
84 : 37
85 : 112
86 : 56
87 : 28
88 : 14
89 : 7
90 : 22
91 : 11
92 : 34
93 : 17
94 : 52
95 : 26
96 : 13
97 : 40
98 : 20
99 : 10
100 : 5
101 : 16
102 : 8
103 : 4
104 : 2
105 : 1
1 106
&lt;/pre&gt;

Happy Life ahead!!!

[[File:end1.png]]</text>
      <sha1>09gsq0edcrwplf79lz3fdjuzlpsnkey</sha1>
    </revision>
    <revision>
      <id>4467</id>
      <parentid>4466</parentid>
      <timestamp>2018-10-17T07:18:06Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* Directed Undirected Graph */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="13729">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_12 Contributors of this page]

=Page Rank - How does Google Work=
One web page is having link to other page, that is a page is referring to other page. Google uses ''Page Rank'' algorithm to choose which page should be displayed first.

If we have network, connections as below:
[[File:rank0.png]]

We want to pick a leader out of all these nodes. How to pick a leader?  Why to elect a leader? It is because we want to find the super power of available nodes.                     
[[File:rank1.png]]

For example, the application wherein, we want to find the most impressive person of the  few ones. How to decide it? As shown in below figure, each node will communicate with other, randomly, we implement the count for each node, how many times, the particular node is being visited.
[[File:rank2.png]]

[[#Top]]

As shown in following, figure, all nodes are visited and each node is marked with the 
number i.e.number of times the node is visited.
[[File:rank3.png]]

The node with the maximum count, becomes the winner. Here, node with 120 count in figure 
below, is the winner. i.e. The person with 120 count in the figure is the most impressive 
person in the community being considered.
[[File:rank4.png]]

[[File:rank5.png]]

[[File:rank6.png]]

[[File:rank7.png]]


[[File:rank8.png]]

[[#Top]]

Google selects the page rank in this matter. Each web page is connected to other web page with web links. To a page, maximum link is there, that will be put on top results in Google search results.
[[File:rank9.png]]

Google uses web crawler. The crawler takes the random walk on the www network and rank the web sites.
[[File:rank10.png]]

This way Google ranks the pages and displays search results, according to page rank.
[[File:rank11.png]]

e.g.we search for ''mysore city''. Google has 10,000 results. But it displays the results in the sequence of page rank of search results, As shown in figure below.
[[File:mysore.png]]

[[#Top]]

==Page rank algorithm ==
As shown in beautiful figure below, few nodes combinely selected one as the leader, then that leader and other nodes, have selected         other as a leader. This way, finally the final leader is elected.
[[File:rank12.png|600px]]


[[File:graph00.png|600px]]


[[File:graph01.png|600px]]

[[#Top]]

==Gragh Drawing Program1==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
nx.barbell_graph(4,2)
G=nx.barbell_graph(4,2)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:Graph003.png|600px]]

[[#Top]]

==Gragh Drawing Program2==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
nx.barbell_graph(4,3)
G=nx.barbell_graph(4,3)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:Graph004.png|600px]]

[[#Top]]

==Gragh Drawing Program3==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
nx.barbell_graph(5,3)
G=nx.barbell_graph(5,3)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:Graph005.png|600px]]

[[#Top]]

==Complete Graph==
Complete graph is a graph, wherein, each node is connected to each other nodes in a graph.

&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.complete_graph(4)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:

[[File:completegraph001.png|600px]]

[[#Top]]

==Cycle graph==

&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.cycle_graph(5)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:

[[File:cyclegraph1.png|600px]]

[[#Top]]

==Ladder graph==

&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.ladder_graph(5)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:

[[File:laddergraph.png|600px]]

[[#Top]]

==Path Graph==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.path_graph(6)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:

[[File:pathgraph.png|600px]]

[[#Top]]

==Star Graph==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.star_graph(5)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:stargraph.png|600px]]

[[#Top]]

==Star Graph of 4 Nodes==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.star_graph(4)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:stargraph4points.png|600px]]

==Wheel Graph==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.wheel_graph(4)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:wheelgraph.png|600px]]

[[#Top]]

==Wheel Graph of 5 nodes==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.wheel_graph(5)
nx.draw(G)
plt.show()

&lt;/pre&gt;

Output:

[[File:wheelgraph5nodes.png|600px]]

[[#Top]]

==Wheel Graph of 6 nodes==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.wheel_graph(6)
nx.draw(G)
plt.show()

&lt;/pre&gt;

Output:

[[File:wheelgraph6nodes.png|600px]]

[[#Top]]

==Random Graph==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.gnp_random_graph(5,0.5)
nx.draw(G)
plt.show()

&lt;/pre&gt;

Output:

[[File:randomgraph1.png|600px]]


Running the same above program, we will get different output, as shown below, as it is random graph.

[[File:randomgraph2.png|600px]]

[[#Top]]

==Page Rank Algorithm Implementation==

===Random Directed Graph===
&lt;pre&gt;
import networkx as nx
import random
import matplotlib.pyplot as plt

#Draw random directed graph
G=nx.gnp_random_graph(10,0.5,directed=True)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output: 

[[File:randomDirectedGraph.png|600px]]


===Random Directed Graph with Labels===
&lt;pre&gt;
import networkx as nx
import random
import matplotlib.pyplot as plt

#Draw random directed graph 
G=nx.gnp_random_graph(10,0.5,directed=True)
#Give label numbering to nodes
nx.draw(G,with_labels=True)
plt.show()

&lt;/pre&gt;

Output:

[[File:randomDirectedGraphwithLabels.png|600px]]


[[#Top]]

===Page Rank Coding===
&lt;pre&gt;
import networkx as nx
import random
import matplotlib.pyplot as plt
import operator

#Draw random directed graph 
G=nx.gnp_random_graph(10,0.5,directed=True)
#Give label numbering to nodes
nx.draw(G,with_labels=True)
plt.show()

#x is the random source node
x=random.choice([i for i in range(G.number_of_nodes())])

#dictionary to maintain counter
dictCounter={}
#initialize the counter of each node as 0
for i in range(G.number_of_nodes()):
    dictCounter[i]=0
dictCounter[x]=dictCounter[x]+1

for i in range(10000):
    listn=list(G.neighbors(x))
    #if x is a sink node, we need to select random node for random walk
    #, else select random neighbor node

    if(len(listn)==0):
        x=random.choice([i for i in range(G.number_of_nodes())])
        dictCounter[x]=dictCounter[x]+1
    else:
        #choose a node randomly from neightbors
        x=random.choice(listn)
        dictCounter[x]=dictCounter[x]+1

p=nx.pagerank(G)
sorted_p=sorted(p.items(),key=operator.itemgetter(1))
sorted_rw=sorted(dictCounter.items(),key=operator.itemgetter(1))                        
#print(p)
#print(dictCounter)

print(sorted_p)
print(sorted_rw)

&lt;/pre&gt;

Output:

&lt;pre&gt;
[(2, 0.07139920240302768), (5, 0.07464882519777695), (3, 0.08527469366832419), 
(6, 0.08665188647066119), (4, 0.0987815549542114), (0, 0.10858415997562518), 
(9, 0.110369696943925), (8, 0.11456211367660116), (1, 0.11682018308814024), 
(7, 0.13290768362170685)]
[(2, 4), (5, 7), (8, 7), (6, 8), (3, 11), (7, 11), (1, 12), (4, 12), (0, 13), (9, 16)]
&lt;/pre&gt;

[[#Top]]

=Email communication Network=
==Page rank :page distribution method==
===Revision: Graph===
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
G=nx.cycle_graph(4)
labels={0:&quot;Bangluru&quot;,1:&quot;Gawhati&quot;,2:&quot;Kolkata&quot;,3:&quot;Chennai&quot;}
nx.draw(G,with_labels=True,labels=labels)
plt.show()
&lt;/pre&gt;

Output:

[[File:revGRAPH.png]]


===Directed Graph  Example===

[[File:directedGraphExample.png|600px]]

&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
G=nx.gnp_random_graph(4,.5,directed=True)
labels={0:&quot;Bangluru&quot;,1:&quot;Gawhati&quot;,2:&quot;Kolkata&quot;,3:&quot;Chennai&quot;}
nx.draw(G,with_labels=True,labels=labels)
plt.show()

&lt;/pre&gt;

Output:
[[File:directedg.png|600px]]


[[#Top]]


==Bidirectional with Parallel and self loops==
==Bidirectional with Parallel edges==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
G=nx.MultiDiGraph()

G.add_node(1)
G.add_node(2)
G.add_node(3)
G.add_node(4)

G.add_path([1,2,3,4,1])
G.add_edge(1,4)
nx.draw(G,with_labels=True)
plt.show()
&lt;/pre&gt;

Output: 

[[File:bidirectionalg.png]]

==Bidirectional with Self loops==
It doesn't show as graph. It is not taught, I did it myself.(Ms. Ami TUSHARKANT CHOKSI)
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
G=nx.MultiDiGraph()

G.add_node(1)
G.add_node(2)
G.add_node(3)
G.add_node(4)

G.add_path([1,2,3,4,1])
G.add_edge(1,4)
G.add_edge(1,1)
nx.draw(G,with_labels=True)
d=G.selfloop_edges()
print(d)
plt.show()

&lt;/pre&gt;

#Output: &lt;generator object selfloop_edges.&lt;locals&gt;.&lt;genexpr&gt; at 0x0B790150&gt;
#It shows self loop is there in the graph


==Directed Undirected Graph==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

#undirected graph
U=nx.Graph()

#directed graph
G=nx.DiGraph()

#nodes in graph
print(G.nodes())#Output: []
G.add_nodes_from([i for i in range(5)])
print(G.nodes())#Output: [0, 1, 2, 3, 4]

#edges
print(G.out_edges())#Output:[]

print(G.in_edges())#Output:[]

G.add_edge(1,2)
print(G.edges())#Output: [(1, 2)]
print(G.in_edges())#Output: [(1, 2)]
print(G.out_edges())#Output: [(1, 2)]

G.add_edge(0,3)
G.add_edge(2,3)
G.add_edge(3,2)
G.add_edge(3,4)
G.add_edge(4,1)
print(G.out_edges(2))#Output: [(2, 3)]
print(G.out_edges(3))#Output:[(3, 2), (3, 4)]
print(G.in_edges(3))#Output:[(0, 3), (2, 3)]

&lt;/pre&gt;

==Points Distribution Method==
&lt;ul&gt;
&lt;li&gt;Initially, all nodes are given equal points&lt;/li&gt;
&lt;li&gt;Rule&lt;/li&gt;
&lt;ul&gt;
&lt;li&gt;Share whatever you have equally with your neighbors&lt;/li&gt;
&lt;/ul
&lt;/ul&gt;

=Collatz Conjecture=
Taught by Sudarshan sir and Amit sir, and Edited by Ms. Ami Tusharkant Choksi

If a number is even, divide it by ''2'', if it is odd, make multiply it by ''3'' and add ''1'', till you get ''1''. This simple problem is called, ''Collatz Conjecture''. 

[[File:collatz1.png|600px]]

[[File:collatz2.png|600px]]

[[File:collatz3.png|600px]]

[[File:collatz4.png|600px]]

[[File:collatz5.png|600px]]

Number is bigger doesn't mean more iterations are required. One can notice, from the output of the following program. 



The program to implement the same is as follows:
==Program==
&lt;pre&gt;
#collatz conjecture
#if num is even, divide it by 2
#if num is odd, new number is equal to 3n+1


def checkNum(num):
    iterations=1
    while(num!=1):
        if(num%2==0):
            num=int(num/2)            
        else:
            num = 3*num+1
        iterations+=1
        

    print(num,iterations)


#checkNum(12)#Output: 1 10
#checkNum(26)#Output: 1 11
checkNum(2000)#Output: 1 113
&lt;/pre&gt;

&lt;pre&gt;

#recursive approach

def checkNum(num):
    if num==1:
        return 1
    elif num%2==0:
        return checkNum(num/2)+1
    else:
        return checkNum(3*num +1)+1


output:
checkNum(26)
Out[27]: 11
checkNum(5000)
Out[28]: 29
&lt;/pre&gt;

==Program adding statement to print all iterations==
&lt;pre&gt;
def checkNum(num):
    iterations=1
    while(num!=1):
        if(num%2==0):
            num=int(num/2)            
        else:
            num = 3*num+1
        print(iterations,&quot;:&quot;,num)
        iterations+=1
        

    print(num,iterations)
&lt;/pre&gt;
==Output==
===For checkNum(2000)===
&lt;pre&gt;
1 : 1000
2 : 500
3 : 250
4 : 125
5 : 376
6 : 188
7 : 94
8 : 47
9 : 142
10 : 71
11 : 214
12 : 107
13 : 322
14 : 161
15 : 484
16 : 242
17 : 121
18 : 364
19 : 182
20 : 91
21 : 274
22 : 137
23 : 412
24 : 206
25 : 103
26 : 310
27 : 155
28 : 466
29 : 233
30 : 700
31 : 350
32 : 175
33 : 526
34 : 263
35 : 790
36 : 395
37 : 1186
38 : 593
39 : 1780
40 : 890
41 : 445
42 : 1336
43 : 668
44 : 334
45 : 167
46 : 502
47 : 251
48 : 754
49 : 377
50 : 1132
51 : 566
52 : 283
53 : 850
54 : 425
55 : 1276
56 : 638
57 : 319
58 : 958
59 : 479
60 : 1438
61 : 719
62 : 2158
63 : 1079
64 : 3238
65 : 1619
66 : 4858
67 : 2429
68 : 7288
69 : 3644
70 : 1822
71 : 911
72 : 2734
73 : 1367
74 : 4102
75 : 2051
76 : 6154
77 : 3077
78 : 9232
79 : 4616
80 : 2308
81 : 1154
82 : 577
83 : 1732
84 : 866
85 : 433
86 : 1300
87 : 650
88 : 325
89 : 976
90 : 488
91 : 244
92 : 122
93 : 61
94 : 184
95 : 92
96 : 46
97 : 23
98 : 70
99 : 35
100 : 106
101 : 53
102 : 160
103 : 80
104 : 40
105 : 20
106 : 10
107 : 5
108 : 16
109 : 8
110 : 4
111 : 2
112 : 1
1 113
&lt;/pre&gt;

===For checkNum(5000)===
&lt;pre&gt;
1 : 2500
2 : 1250
3 : 625
4 : 1876
5 : 938
6 : 469
7 : 1408
8 : 704
9 : 352
10 : 176
11 : 88
12 : 44
13 : 22
14 : 11
15 : 34
16 : 17
17 : 52
18 : 26
19 : 13
20 : 40
21 : 20
22 : 10
23 : 5
24 : 16
25 : 8
26 : 4
27 : 2
28 : 1
1 29
&lt;/pre&gt;
===For checkNum(25000000)===
&lt;pre&gt;
1 : 12500000
2 : 6250000
3 : 3125000
4 : 1562500
5 : 781250
6 : 390625
7 : 1171876
8 : 585938
9 : 292969
10 : 878908
11 : 439454
12 : 219727
13 : 659182
14 : 329591
15 : 988774
16 : 494387
17 : 1483162
18 : 741581
19 : 2224744
20 : 1112372
21 : 556186
22 : 278093
23 : 834280
24 : 417140
25 : 208570
26 : 104285
27 : 312856
28 : 156428
29 : 78214
30 : 39107
31 : 117322
32 : 58661
33 : 175984
34 : 87992
35 : 43996
36 : 21998
37 : 10999
38 : 32998
39 : 16499
40 : 49498
41 : 24749
42 : 74248
43 : 37124
44 : 18562
45 : 9281
46 : 27844
47 : 13922
48 : 6961
49 : 20884
50 : 10442
51 : 5221
52 : 15664
53 : 7832
54 : 3916
55 : 1958
56 : 979
57 : 2938
58 : 1469
59 : 4408
60 : 2204
61 : 1102
62 : 551
63 : 1654
64 : 827
65 : 2482
66 : 1241
67 : 3724
68 : 1862
69 : 931
70 : 2794
71 : 1397
72 : 4192
73 : 2096
74 : 1048
75 : 524
76 : 262
77 : 131
78 : 394
79 : 197
80 : 592
81 : 296
82 : 148
83 : 74
84 : 37
85 : 112
86 : 56
87 : 28
88 : 14
89 : 7
90 : 22
91 : 11
92 : 34
93 : 17
94 : 52
95 : 26
96 : 13
97 : 40
98 : 20
99 : 10
100 : 5
101 : 16
102 : 8
103 : 4
104 : 2
105 : 1
1 106
&lt;/pre&gt;

Happy Life ahead!!!

[[File:end1.png]]</text>
      <sha1>dz5u1im572h59v865hsc7j5rudjpyo5</sha1>
    </revision>
    <revision>
      <id>4468</id>
      <parentid>4467</parentid>
      <timestamp>2018-10-17T07:20:46Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* Points Distribution Method */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="13730">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_12 Contributors of this page]

=Page Rank - How does Google Work=
One web page is having link to other page, that is a page is referring to other page. Google uses ''Page Rank'' algorithm to choose which page should be displayed first.

If we have network, connections as below:
[[File:rank0.png]]

We want to pick a leader out of all these nodes. How to pick a leader?  Why to elect a leader? It is because we want to find the super power of available nodes.                     
[[File:rank1.png]]

For example, the application wherein, we want to find the most impressive person of the  few ones. How to decide it? As shown in below figure, each node will communicate with other, randomly, we implement the count for each node, how many times, the particular node is being visited.
[[File:rank2.png]]

[[#Top]]

As shown in following, figure, all nodes are visited and each node is marked with the 
number i.e.number of times the node is visited.
[[File:rank3.png]]

The node with the maximum count, becomes the winner. Here, node with 120 count in figure 
below, is the winner. i.e. The person with 120 count in the figure is the most impressive 
person in the community being considered.
[[File:rank4.png]]

[[File:rank5.png]]

[[File:rank6.png]]

[[File:rank7.png]]


[[File:rank8.png]]

[[#Top]]

Google selects the page rank in this matter. Each web page is connected to other web page with web links. To a page, maximum link is there, that will be put on top results in Google search results.
[[File:rank9.png]]

Google uses web crawler. The crawler takes the random walk on the www network and rank the web sites.
[[File:rank10.png]]

This way Google ranks the pages and displays search results, according to page rank.
[[File:rank11.png]]

e.g.we search for ''mysore city''. Google has 10,000 results. But it displays the results in the sequence of page rank of search results, As shown in figure below.
[[File:mysore.png]]

[[#Top]]

==Page rank algorithm ==
As shown in beautiful figure below, few nodes combinely selected one as the leader, then that leader and other nodes, have selected         other as a leader. This way, finally the final leader is elected.
[[File:rank12.png|600px]]


[[File:graph00.png|600px]]


[[File:graph01.png|600px]]

[[#Top]]

==Gragh Drawing Program1==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
nx.barbell_graph(4,2)
G=nx.barbell_graph(4,2)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:Graph003.png|600px]]

[[#Top]]

==Gragh Drawing Program2==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
nx.barbell_graph(4,3)
G=nx.barbell_graph(4,3)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:Graph004.png|600px]]

[[#Top]]

==Gragh Drawing Program3==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
nx.barbell_graph(5,3)
G=nx.barbell_graph(5,3)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:Graph005.png|600px]]

[[#Top]]

==Complete Graph==
Complete graph is a graph, wherein, each node is connected to each other nodes in a graph.

&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.complete_graph(4)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:

[[File:completegraph001.png|600px]]

[[#Top]]

==Cycle graph==

&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.cycle_graph(5)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:

[[File:cyclegraph1.png|600px]]

[[#Top]]

==Ladder graph==

&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.ladder_graph(5)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:

[[File:laddergraph.png|600px]]

[[#Top]]

==Path Graph==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.path_graph(6)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:

[[File:pathgraph.png|600px]]

[[#Top]]

==Star Graph==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.star_graph(5)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:stargraph.png|600px]]

[[#Top]]

==Star Graph of 4 Nodes==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.star_graph(4)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:stargraph4points.png|600px]]

==Wheel Graph==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.wheel_graph(4)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:wheelgraph.png|600px]]

[[#Top]]

==Wheel Graph of 5 nodes==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.wheel_graph(5)
nx.draw(G)
plt.show()

&lt;/pre&gt;

Output:

[[File:wheelgraph5nodes.png|600px]]

[[#Top]]

==Wheel Graph of 6 nodes==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.wheel_graph(6)
nx.draw(G)
plt.show()

&lt;/pre&gt;

Output:

[[File:wheelgraph6nodes.png|600px]]

[[#Top]]

==Random Graph==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.gnp_random_graph(5,0.5)
nx.draw(G)
plt.show()

&lt;/pre&gt;

Output:

[[File:randomgraph1.png|600px]]


Running the same above program, we will get different output, as shown below, as it is random graph.

[[File:randomgraph2.png|600px]]

[[#Top]]

==Page Rank Algorithm Implementation==

===Random Directed Graph===
&lt;pre&gt;
import networkx as nx
import random
import matplotlib.pyplot as plt

#Draw random directed graph
G=nx.gnp_random_graph(10,0.5,directed=True)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output: 

[[File:randomDirectedGraph.png|600px]]


===Random Directed Graph with Labels===
&lt;pre&gt;
import networkx as nx
import random
import matplotlib.pyplot as plt

#Draw random directed graph 
G=nx.gnp_random_graph(10,0.5,directed=True)
#Give label numbering to nodes
nx.draw(G,with_labels=True)
plt.show()

&lt;/pre&gt;

Output:

[[File:randomDirectedGraphwithLabels.png|600px]]


[[#Top]]

===Page Rank Coding===
&lt;pre&gt;
import networkx as nx
import random
import matplotlib.pyplot as plt
import operator

#Draw random directed graph 
G=nx.gnp_random_graph(10,0.5,directed=True)
#Give label numbering to nodes
nx.draw(G,with_labels=True)
plt.show()

#x is the random source node
x=random.choice([i for i in range(G.number_of_nodes())])

#dictionary to maintain counter
dictCounter={}
#initialize the counter of each node as 0
for i in range(G.number_of_nodes()):
    dictCounter[i]=0
dictCounter[x]=dictCounter[x]+1

for i in range(10000):
    listn=list(G.neighbors(x))
    #if x is a sink node, we need to select random node for random walk
    #, else select random neighbor node

    if(len(listn)==0):
        x=random.choice([i for i in range(G.number_of_nodes())])
        dictCounter[x]=dictCounter[x]+1
    else:
        #choose a node randomly from neightbors
        x=random.choice(listn)
        dictCounter[x]=dictCounter[x]+1

p=nx.pagerank(G)
sorted_p=sorted(p.items(),key=operator.itemgetter(1))
sorted_rw=sorted(dictCounter.items(),key=operator.itemgetter(1))                        
#print(p)
#print(dictCounter)

print(sorted_p)
print(sorted_rw)

&lt;/pre&gt;

Output:

&lt;pre&gt;
[(2, 0.07139920240302768), (5, 0.07464882519777695), (3, 0.08527469366832419), 
(6, 0.08665188647066119), (4, 0.0987815549542114), (0, 0.10858415997562518), 
(9, 0.110369696943925), (8, 0.11456211367660116), (1, 0.11682018308814024), 
(7, 0.13290768362170685)]
[(2, 4), (5, 7), (8, 7), (6, 8), (3, 11), (7, 11), (1, 12), (4, 12), (0, 13), (9, 16)]
&lt;/pre&gt;

[[#Top]]

=Email communication Network=
==Page rank :page distribution method==
===Revision: Graph===
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
G=nx.cycle_graph(4)
labels={0:&quot;Bangluru&quot;,1:&quot;Gawhati&quot;,2:&quot;Kolkata&quot;,3:&quot;Chennai&quot;}
nx.draw(G,with_labels=True,labels=labels)
plt.show()
&lt;/pre&gt;

Output:

[[File:revGRAPH.png]]


===Directed Graph  Example===

[[File:directedGraphExample.png|600px]]

&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
G=nx.gnp_random_graph(4,.5,directed=True)
labels={0:&quot;Bangluru&quot;,1:&quot;Gawhati&quot;,2:&quot;Kolkata&quot;,3:&quot;Chennai&quot;}
nx.draw(G,with_labels=True,labels=labels)
plt.show()

&lt;/pre&gt;

Output:
[[File:directedg.png|600px]]


[[#Top]]


==Bidirectional with Parallel and self loops==
==Bidirectional with Parallel edges==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
G=nx.MultiDiGraph()

G.add_node(1)
G.add_node(2)
G.add_node(3)
G.add_node(4)

G.add_path([1,2,3,4,1])
G.add_edge(1,4)
nx.draw(G,with_labels=True)
plt.show()
&lt;/pre&gt;

Output: 

[[File:bidirectionalg.png]]

==Bidirectional with Self loops==
It doesn't show as graph. It is not taught, I did it myself.(Ms. Ami TUSHARKANT CHOKSI)
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
G=nx.MultiDiGraph()

G.add_node(1)
G.add_node(2)
G.add_node(3)
G.add_node(4)

G.add_path([1,2,3,4,1])
G.add_edge(1,4)
G.add_edge(1,1)
nx.draw(G,with_labels=True)
d=G.selfloop_edges()
print(d)
plt.show()

&lt;/pre&gt;

#Output: &lt;generator object selfloop_edges.&lt;locals&gt;.&lt;genexpr&gt; at 0x0B790150&gt;
#It shows self loop is there in the graph


==Directed Undirected Graph==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

#undirected graph
U=nx.Graph()

#directed graph
G=nx.DiGraph()

#nodes in graph
print(G.nodes())#Output: []
G.add_nodes_from([i for i in range(5)])
print(G.nodes())#Output: [0, 1, 2, 3, 4]

#edges
print(G.out_edges())#Output:[]

print(G.in_edges())#Output:[]

G.add_edge(1,2)
print(G.edges())#Output: [(1, 2)]
print(G.in_edges())#Output: [(1, 2)]
print(G.out_edges())#Output: [(1, 2)]

G.add_edge(0,3)
G.add_edge(2,3)
G.add_edge(3,2)
G.add_edge(3,4)
G.add_edge(4,1)
print(G.out_edges(2))#Output: [(2, 3)]
print(G.out_edges(3))#Output:[(3, 2), (3, 4)]
print(G.in_edges(3))#Output:[(0, 3), (2, 3)]

&lt;/pre&gt;

==Points Distribution Method==
&lt;ul&gt;
&lt;li&gt;Initially, all nodes are given equal points&lt;/li&gt;
&lt;li&gt;Rule&lt;/li&gt;
&lt;ul&gt;
&lt;li&gt;Share whatever you have equally with your neighbors&lt;/li&gt;
&lt;/ul&gt;
&lt;/ul&gt;

=Collatz Conjecture=
Taught by Sudarshan sir and Amit sir, and Edited by Ms. Ami Tusharkant Choksi

If a number is even, divide it by ''2'', if it is odd, make multiply it by ''3'' and add ''1'', till you get ''1''. This simple problem is called, ''Collatz Conjecture''. 

[[File:collatz1.png|600px]]

[[File:collatz2.png|600px]]

[[File:collatz3.png|600px]]

[[File:collatz4.png|600px]]

[[File:collatz5.png|600px]]

Number is bigger doesn't mean more iterations are required. One can notice, from the output of the following program. 



The program to implement the same is as follows:
==Program==
&lt;pre&gt;
#collatz conjecture
#if num is even, divide it by 2
#if num is odd, new number is equal to 3n+1


def checkNum(num):
    iterations=1
    while(num!=1):
        if(num%2==0):
            num=int(num/2)            
        else:
            num = 3*num+1
        iterations+=1
        

    print(num,iterations)


#checkNum(12)#Output: 1 10
#checkNum(26)#Output: 1 11
checkNum(2000)#Output: 1 113
&lt;/pre&gt;

&lt;pre&gt;

#recursive approach

def checkNum(num):
    if num==1:
        return 1
    elif num%2==0:
        return checkNum(num/2)+1
    else:
        return checkNum(3*num +1)+1


output:
checkNum(26)
Out[27]: 11
checkNum(5000)
Out[28]: 29
&lt;/pre&gt;

==Program adding statement to print all iterations==
&lt;pre&gt;
def checkNum(num):
    iterations=1
    while(num!=1):
        if(num%2==0):
            num=int(num/2)            
        else:
            num = 3*num+1
        print(iterations,&quot;:&quot;,num)
        iterations+=1
        

    print(num,iterations)
&lt;/pre&gt;
==Output==
===For checkNum(2000)===
&lt;pre&gt;
1 : 1000
2 : 500
3 : 250
4 : 125
5 : 376
6 : 188
7 : 94
8 : 47
9 : 142
10 : 71
11 : 214
12 : 107
13 : 322
14 : 161
15 : 484
16 : 242
17 : 121
18 : 364
19 : 182
20 : 91
21 : 274
22 : 137
23 : 412
24 : 206
25 : 103
26 : 310
27 : 155
28 : 466
29 : 233
30 : 700
31 : 350
32 : 175
33 : 526
34 : 263
35 : 790
36 : 395
37 : 1186
38 : 593
39 : 1780
40 : 890
41 : 445
42 : 1336
43 : 668
44 : 334
45 : 167
46 : 502
47 : 251
48 : 754
49 : 377
50 : 1132
51 : 566
52 : 283
53 : 850
54 : 425
55 : 1276
56 : 638
57 : 319
58 : 958
59 : 479
60 : 1438
61 : 719
62 : 2158
63 : 1079
64 : 3238
65 : 1619
66 : 4858
67 : 2429
68 : 7288
69 : 3644
70 : 1822
71 : 911
72 : 2734
73 : 1367
74 : 4102
75 : 2051
76 : 6154
77 : 3077
78 : 9232
79 : 4616
80 : 2308
81 : 1154
82 : 577
83 : 1732
84 : 866
85 : 433
86 : 1300
87 : 650
88 : 325
89 : 976
90 : 488
91 : 244
92 : 122
93 : 61
94 : 184
95 : 92
96 : 46
97 : 23
98 : 70
99 : 35
100 : 106
101 : 53
102 : 160
103 : 80
104 : 40
105 : 20
106 : 10
107 : 5
108 : 16
109 : 8
110 : 4
111 : 2
112 : 1
1 113
&lt;/pre&gt;

===For checkNum(5000)===
&lt;pre&gt;
1 : 2500
2 : 1250
3 : 625
4 : 1876
5 : 938
6 : 469
7 : 1408
8 : 704
9 : 352
10 : 176
11 : 88
12 : 44
13 : 22
14 : 11
15 : 34
16 : 17
17 : 52
18 : 26
19 : 13
20 : 40
21 : 20
22 : 10
23 : 5
24 : 16
25 : 8
26 : 4
27 : 2
28 : 1
1 29
&lt;/pre&gt;
===For checkNum(25000000)===
&lt;pre&gt;
1 : 12500000
2 : 6250000
3 : 3125000
4 : 1562500
5 : 781250
6 : 390625
7 : 1171876
8 : 585938
9 : 292969
10 : 878908
11 : 439454
12 : 219727
13 : 659182
14 : 329591
15 : 988774
16 : 494387
17 : 1483162
18 : 741581
19 : 2224744
20 : 1112372
21 : 556186
22 : 278093
23 : 834280
24 : 417140
25 : 208570
26 : 104285
27 : 312856
28 : 156428
29 : 78214
30 : 39107
31 : 117322
32 : 58661
33 : 175984
34 : 87992
35 : 43996
36 : 21998
37 : 10999
38 : 32998
39 : 16499
40 : 49498
41 : 24749
42 : 74248
43 : 37124
44 : 18562
45 : 9281
46 : 27844
47 : 13922
48 : 6961
49 : 20884
50 : 10442
51 : 5221
52 : 15664
53 : 7832
54 : 3916
55 : 1958
56 : 979
57 : 2938
58 : 1469
59 : 4408
60 : 2204
61 : 1102
62 : 551
63 : 1654
64 : 827
65 : 2482
66 : 1241
67 : 3724
68 : 1862
69 : 931
70 : 2794
71 : 1397
72 : 4192
73 : 2096
74 : 1048
75 : 524
76 : 262
77 : 131
78 : 394
79 : 197
80 : 592
81 : 296
82 : 148
83 : 74
84 : 37
85 : 112
86 : 56
87 : 28
88 : 14
89 : 7
90 : 22
91 : 11
92 : 34
93 : 17
94 : 52
95 : 26
96 : 13
97 : 40
98 : 20
99 : 10
100 : 5
101 : 16
102 : 8
103 : 4
104 : 2
105 : 1
1 106
&lt;/pre&gt;

Happy Life ahead!!!

[[File:end1.png]]</text>
      <sha1>pr4pkbrlphv7zblh9ursnxsalalnzqb</sha1>
    </revision>
    <revision>
      <id>4469</id>
      <parentid>4468</parentid>
      <timestamp>2018-10-17T07:23:02Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* Points Distribution Method */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="13870">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_12 Contributors of this page]

=Page Rank - How does Google Work=
One web page is having link to other page, that is a page is referring to other page. Google uses ''Page Rank'' algorithm to choose which page should be displayed first.

If we have network, connections as below:
[[File:rank0.png]]

We want to pick a leader out of all these nodes. How to pick a leader?  Why to elect a leader? It is because we want to find the super power of available nodes.                     
[[File:rank1.png]]

For example, the application wherein, we want to find the most impressive person of the  few ones. How to decide it? As shown in below figure, each node will communicate with other, randomly, we implement the count for each node, how many times, the particular node is being visited.
[[File:rank2.png]]

[[#Top]]

As shown in following, figure, all nodes are visited and each node is marked with the 
number i.e.number of times the node is visited.
[[File:rank3.png]]

The node with the maximum count, becomes the winner. Here, node with 120 count in figure 
below, is the winner. i.e. The person with 120 count in the figure is the most impressive 
person in the community being considered.
[[File:rank4.png]]

[[File:rank5.png]]

[[File:rank6.png]]

[[File:rank7.png]]


[[File:rank8.png]]

[[#Top]]

Google selects the page rank in this matter. Each web page is connected to other web page with web links. To a page, maximum link is there, that will be put on top results in Google search results.
[[File:rank9.png]]

Google uses web crawler. The crawler takes the random walk on the www network and rank the web sites.
[[File:rank10.png]]

This way Google ranks the pages and displays search results, according to page rank.
[[File:rank11.png]]

e.g.we search for ''mysore city''. Google has 10,000 results. But it displays the results in the sequence of page rank of search results, As shown in figure below.
[[File:mysore.png]]

[[#Top]]

==Page rank algorithm ==
As shown in beautiful figure below, few nodes combinely selected one as the leader, then that leader and other nodes, have selected         other as a leader. This way, finally the final leader is elected.
[[File:rank12.png|600px]]


[[File:graph00.png|600px]]


[[File:graph01.png|600px]]

[[#Top]]

==Gragh Drawing Program1==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
nx.barbell_graph(4,2)
G=nx.barbell_graph(4,2)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:Graph003.png|600px]]

[[#Top]]

==Gragh Drawing Program2==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
nx.barbell_graph(4,3)
G=nx.barbell_graph(4,3)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:Graph004.png|600px]]

[[#Top]]

==Gragh Drawing Program3==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
nx.barbell_graph(5,3)
G=nx.barbell_graph(5,3)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:Graph005.png|600px]]

[[#Top]]

==Complete Graph==
Complete graph is a graph, wherein, each node is connected to each other nodes in a graph.

&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.complete_graph(4)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:

[[File:completegraph001.png|600px]]

[[#Top]]

==Cycle graph==

&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.cycle_graph(5)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:

[[File:cyclegraph1.png|600px]]

[[#Top]]

==Ladder graph==

&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.ladder_graph(5)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:

[[File:laddergraph.png|600px]]

[[#Top]]

==Path Graph==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.path_graph(6)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:

[[File:pathgraph.png|600px]]

[[#Top]]

==Star Graph==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.star_graph(5)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:stargraph.png|600px]]

[[#Top]]

==Star Graph of 4 Nodes==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.star_graph(4)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:stargraph4points.png|600px]]

==Wheel Graph==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.wheel_graph(4)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:wheelgraph.png|600px]]

[[#Top]]

==Wheel Graph of 5 nodes==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.wheel_graph(5)
nx.draw(G)
plt.show()

&lt;/pre&gt;

Output:

[[File:wheelgraph5nodes.png|600px]]

[[#Top]]

==Wheel Graph of 6 nodes==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.wheel_graph(6)
nx.draw(G)
plt.show()

&lt;/pre&gt;

Output:

[[File:wheelgraph6nodes.png|600px]]

[[#Top]]

==Random Graph==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.gnp_random_graph(5,0.5)
nx.draw(G)
plt.show()

&lt;/pre&gt;

Output:

[[File:randomgraph1.png|600px]]


Running the same above program, we will get different output, as shown below, as it is random graph.

[[File:randomgraph2.png|600px]]

[[#Top]]

==Page Rank Algorithm Implementation==

===Random Directed Graph===
&lt;pre&gt;
import networkx as nx
import random
import matplotlib.pyplot as plt

#Draw random directed graph
G=nx.gnp_random_graph(10,0.5,directed=True)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output: 

[[File:randomDirectedGraph.png|600px]]


===Random Directed Graph with Labels===
&lt;pre&gt;
import networkx as nx
import random
import matplotlib.pyplot as plt

#Draw random directed graph 
G=nx.gnp_random_graph(10,0.5,directed=True)
#Give label numbering to nodes
nx.draw(G,with_labels=True)
plt.show()

&lt;/pre&gt;

Output:

[[File:randomDirectedGraphwithLabels.png|600px]]


[[#Top]]

===Page Rank Coding===
&lt;pre&gt;
import networkx as nx
import random
import matplotlib.pyplot as plt
import operator

#Draw random directed graph 
G=nx.gnp_random_graph(10,0.5,directed=True)
#Give label numbering to nodes
nx.draw(G,with_labels=True)
plt.show()

#x is the random source node
x=random.choice([i for i in range(G.number_of_nodes())])

#dictionary to maintain counter
dictCounter={}
#initialize the counter of each node as 0
for i in range(G.number_of_nodes()):
    dictCounter[i]=0
dictCounter[x]=dictCounter[x]+1

for i in range(10000):
    listn=list(G.neighbors(x))
    #if x is a sink node, we need to select random node for random walk
    #, else select random neighbor node

    if(len(listn)==0):
        x=random.choice([i for i in range(G.number_of_nodes())])
        dictCounter[x]=dictCounter[x]+1
    else:
        #choose a node randomly from neightbors
        x=random.choice(listn)
        dictCounter[x]=dictCounter[x]+1

p=nx.pagerank(G)
sorted_p=sorted(p.items(),key=operator.itemgetter(1))
sorted_rw=sorted(dictCounter.items(),key=operator.itemgetter(1))                        
#print(p)
#print(dictCounter)

print(sorted_p)
print(sorted_rw)

&lt;/pre&gt;

Output:

&lt;pre&gt;
[(2, 0.07139920240302768), (5, 0.07464882519777695), (3, 0.08527469366832419), 
(6, 0.08665188647066119), (4, 0.0987815549542114), (0, 0.10858415997562518), 
(9, 0.110369696943925), (8, 0.11456211367660116), (1, 0.11682018308814024), 
(7, 0.13290768362170685)]
[(2, 4), (5, 7), (8, 7), (6, 8), (3, 11), (7, 11), (1, 12), (4, 12), (0, 13), (9, 16)]
&lt;/pre&gt;

[[#Top]]

=Email communication Network=
==Page rank :page distribution method==
===Revision: Graph===
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
G=nx.cycle_graph(4)
labels={0:&quot;Bangluru&quot;,1:&quot;Gawhati&quot;,2:&quot;Kolkata&quot;,3:&quot;Chennai&quot;}
nx.draw(G,with_labels=True,labels=labels)
plt.show()
&lt;/pre&gt;

Output:

[[File:revGRAPH.png]]


===Directed Graph  Example===

[[File:directedGraphExample.png|600px]]

&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
G=nx.gnp_random_graph(4,.5,directed=True)
labels={0:&quot;Bangluru&quot;,1:&quot;Gawhati&quot;,2:&quot;Kolkata&quot;,3:&quot;Chennai&quot;}
nx.draw(G,with_labels=True,labels=labels)
plt.show()

&lt;/pre&gt;

Output:
[[File:directedg.png|600px]]


[[#Top]]


==Bidirectional with Parallel and self loops==
==Bidirectional with Parallel edges==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
G=nx.MultiDiGraph()

G.add_node(1)
G.add_node(2)
G.add_node(3)
G.add_node(4)

G.add_path([1,2,3,4,1])
G.add_edge(1,4)
nx.draw(G,with_labels=True)
plt.show()
&lt;/pre&gt;

Output: 

[[File:bidirectionalg.png]]

==Bidirectional with Self loops==
It doesn't show as graph. It is not taught, I did it myself.(Ms. Ami TUSHARKANT CHOKSI)
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
G=nx.MultiDiGraph()

G.add_node(1)
G.add_node(2)
G.add_node(3)
G.add_node(4)

G.add_path([1,2,3,4,1])
G.add_edge(1,4)
G.add_edge(1,1)
nx.draw(G,with_labels=True)
d=G.selfloop_edges()
print(d)
plt.show()

&lt;/pre&gt;

#Output: &lt;generator object selfloop_edges.&lt;locals&gt;.&lt;genexpr&gt; at 0x0B790150&gt;
#It shows self loop is there in the graph


==Directed Undirected Graph==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

#undirected graph
U=nx.Graph()

#directed graph
G=nx.DiGraph()

#nodes in graph
print(G.nodes())#Output: []
G.add_nodes_from([i for i in range(5)])
print(G.nodes())#Output: [0, 1, 2, 3, 4]

#edges
print(G.out_edges())#Output:[]

print(G.in_edges())#Output:[]

G.add_edge(1,2)
print(G.edges())#Output: [(1, 2)]
print(G.in_edges())#Output: [(1, 2)]
print(G.out_edges())#Output: [(1, 2)]

G.add_edge(0,3)
G.add_edge(2,3)
G.add_edge(3,2)
G.add_edge(3,4)
G.add_edge(4,1)
print(G.out_edges(2))#Output: [(2, 3)]
print(G.out_edges(3))#Output:[(3, 2), (3, 4)]
print(G.in_edges(3))#Output:[(0, 3), (2, 3)]

&lt;/pre&gt;

==Points Distribution Method==
&lt;ul&gt;
&lt;li&gt;Initially, all nodes are given equal points&lt;/li&gt;
&lt;li&gt;Rule&lt;/li&gt;
&lt;ul&gt;
&lt;li&gt;Share whatever you have equally with your neighbors&lt;/li&gt;
&lt;/ul&gt;
&lt;li&gt;FOR NODE B:Neighbors: C&lt;/li&gt;
&lt;li&gt;Give all of its points to C&lt;/li&gt;
&lt;li&gt;FOR NODE C:Neighbors: A&lt;/li&gt;
&lt;li&gt;Give all of its points to A&lt;/li&gt;
&lt;/ul&gt;

=Collatz Conjecture=
Taught by Sudarshan sir and Amit sir, and Edited by Ms. Ami Tusharkant Choksi

If a number is even, divide it by ''2'', if it is odd, make multiply it by ''3'' and add ''1'', till you get ''1''. This simple problem is called, ''Collatz Conjecture''. 

[[File:collatz1.png|600px]]

[[File:collatz2.png|600px]]

[[File:collatz3.png|600px]]

[[File:collatz4.png|600px]]

[[File:collatz5.png|600px]]

Number is bigger doesn't mean more iterations are required. One can notice, from the output of the following program. 



The program to implement the same is as follows:
==Program==
&lt;pre&gt;
#collatz conjecture
#if num is even, divide it by 2
#if num is odd, new number is equal to 3n+1


def checkNum(num):
    iterations=1
    while(num!=1):
        if(num%2==0):
            num=int(num/2)            
        else:
            num = 3*num+1
        iterations+=1
        

    print(num,iterations)


#checkNum(12)#Output: 1 10
#checkNum(26)#Output: 1 11
checkNum(2000)#Output: 1 113
&lt;/pre&gt;

&lt;pre&gt;

#recursive approach

def checkNum(num):
    if num==1:
        return 1
    elif num%2==0:
        return checkNum(num/2)+1
    else:
        return checkNum(3*num +1)+1


output:
checkNum(26)
Out[27]: 11
checkNum(5000)
Out[28]: 29
&lt;/pre&gt;

==Program adding statement to print all iterations==
&lt;pre&gt;
def checkNum(num):
    iterations=1
    while(num!=1):
        if(num%2==0):
            num=int(num/2)            
        else:
            num = 3*num+1
        print(iterations,&quot;:&quot;,num)
        iterations+=1
        

    print(num,iterations)
&lt;/pre&gt;
==Output==
===For checkNum(2000)===
&lt;pre&gt;
1 : 1000
2 : 500
3 : 250
4 : 125
5 : 376
6 : 188
7 : 94
8 : 47
9 : 142
10 : 71
11 : 214
12 : 107
13 : 322
14 : 161
15 : 484
16 : 242
17 : 121
18 : 364
19 : 182
20 : 91
21 : 274
22 : 137
23 : 412
24 : 206
25 : 103
26 : 310
27 : 155
28 : 466
29 : 233
30 : 700
31 : 350
32 : 175
33 : 526
34 : 263
35 : 790
36 : 395
37 : 1186
38 : 593
39 : 1780
40 : 890
41 : 445
42 : 1336
43 : 668
44 : 334
45 : 167
46 : 502
47 : 251
48 : 754
49 : 377
50 : 1132
51 : 566
52 : 283
53 : 850
54 : 425
55 : 1276
56 : 638
57 : 319
58 : 958
59 : 479
60 : 1438
61 : 719
62 : 2158
63 : 1079
64 : 3238
65 : 1619
66 : 4858
67 : 2429
68 : 7288
69 : 3644
70 : 1822
71 : 911
72 : 2734
73 : 1367
74 : 4102
75 : 2051
76 : 6154
77 : 3077
78 : 9232
79 : 4616
80 : 2308
81 : 1154
82 : 577
83 : 1732
84 : 866
85 : 433
86 : 1300
87 : 650
88 : 325
89 : 976
90 : 488
91 : 244
92 : 122
93 : 61
94 : 184
95 : 92
96 : 46
97 : 23
98 : 70
99 : 35
100 : 106
101 : 53
102 : 160
103 : 80
104 : 40
105 : 20
106 : 10
107 : 5
108 : 16
109 : 8
110 : 4
111 : 2
112 : 1
1 113
&lt;/pre&gt;

===For checkNum(5000)===
&lt;pre&gt;
1 : 2500
2 : 1250
3 : 625
4 : 1876
5 : 938
6 : 469
7 : 1408
8 : 704
9 : 352
10 : 176
11 : 88
12 : 44
13 : 22
14 : 11
15 : 34
16 : 17
17 : 52
18 : 26
19 : 13
20 : 40
21 : 20
22 : 10
23 : 5
24 : 16
25 : 8
26 : 4
27 : 2
28 : 1
1 29
&lt;/pre&gt;
===For checkNum(25000000)===
&lt;pre&gt;
1 : 12500000
2 : 6250000
3 : 3125000
4 : 1562500
5 : 781250
6 : 390625
7 : 1171876
8 : 585938
9 : 292969
10 : 878908
11 : 439454
12 : 219727
13 : 659182
14 : 329591
15 : 988774
16 : 494387
17 : 1483162
18 : 741581
19 : 2224744
20 : 1112372
21 : 556186
22 : 278093
23 : 834280
24 : 417140
25 : 208570
26 : 104285
27 : 312856
28 : 156428
29 : 78214
30 : 39107
31 : 117322
32 : 58661
33 : 175984
34 : 87992
35 : 43996
36 : 21998
37 : 10999
38 : 32998
39 : 16499
40 : 49498
41 : 24749
42 : 74248
43 : 37124
44 : 18562
45 : 9281
46 : 27844
47 : 13922
48 : 6961
49 : 20884
50 : 10442
51 : 5221
52 : 15664
53 : 7832
54 : 3916
55 : 1958
56 : 979
57 : 2938
58 : 1469
59 : 4408
60 : 2204
61 : 1102
62 : 551
63 : 1654
64 : 827
65 : 2482
66 : 1241
67 : 3724
68 : 1862
69 : 931
70 : 2794
71 : 1397
72 : 4192
73 : 2096
74 : 1048
75 : 524
76 : 262
77 : 131
78 : 394
79 : 197
80 : 592
81 : 296
82 : 148
83 : 74
84 : 37
85 : 112
86 : 56
87 : 28
88 : 14
89 : 7
90 : 22
91 : 11
92 : 34
93 : 17
94 : 52
95 : 26
96 : 13
97 : 40
98 : 20
99 : 10
100 : 5
101 : 16
102 : 8
103 : 4
104 : 2
105 : 1
1 106
&lt;/pre&gt;

Happy Life ahead!!!

[[File:end1.png]]</text>
      <sha1>5s1qyomanvx2ztxqchpes8angiw8bp0</sha1>
    </revision>
    <revision>
      <id>4470</id>
      <parentid>4469</parentid>
      <timestamp>2018-10-17T07:25:01Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* Points Distribution Method */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="13956">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_12 Contributors of this page]

=Page Rank - How does Google Work=
One web page is having link to other page, that is a page is referring to other page. Google uses ''Page Rank'' algorithm to choose which page should be displayed first.

If we have network, connections as below:
[[File:rank0.png]]

We want to pick a leader out of all these nodes. How to pick a leader?  Why to elect a leader? It is because we want to find the super power of available nodes.                     
[[File:rank1.png]]

For example, the application wherein, we want to find the most impressive person of the  few ones. How to decide it? As shown in below figure, each node will communicate with other, randomly, we implement the count for each node, how many times, the particular node is being visited.
[[File:rank2.png]]

[[#Top]]

As shown in following, figure, all nodes are visited and each node is marked with the 
number i.e.number of times the node is visited.
[[File:rank3.png]]

The node with the maximum count, becomes the winner. Here, node with 120 count in figure 
below, is the winner. i.e. The person with 120 count in the figure is the most impressive 
person in the community being considered.
[[File:rank4.png]]

[[File:rank5.png]]

[[File:rank6.png]]

[[File:rank7.png]]


[[File:rank8.png]]

[[#Top]]

Google selects the page rank in this matter. Each web page is connected to other web page with web links. To a page, maximum link is there, that will be put on top results in Google search results.
[[File:rank9.png]]

Google uses web crawler. The crawler takes the random walk on the www network and rank the web sites.
[[File:rank10.png]]

This way Google ranks the pages and displays search results, according to page rank.
[[File:rank11.png]]

e.g.we search for ''mysore city''. Google has 10,000 results. But it displays the results in the sequence of page rank of search results, As shown in figure below.
[[File:mysore.png]]

[[#Top]]

==Page rank algorithm ==
As shown in beautiful figure below, few nodes combinely selected one as the leader, then that leader and other nodes, have selected         other as a leader. This way, finally the final leader is elected.
[[File:rank12.png|600px]]


[[File:graph00.png|600px]]


[[File:graph01.png|600px]]

[[#Top]]

==Gragh Drawing Program1==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
nx.barbell_graph(4,2)
G=nx.barbell_graph(4,2)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:Graph003.png|600px]]

[[#Top]]

==Gragh Drawing Program2==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
nx.barbell_graph(4,3)
G=nx.barbell_graph(4,3)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:Graph004.png|600px]]

[[#Top]]

==Gragh Drawing Program3==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
nx.barbell_graph(5,3)
G=nx.barbell_graph(5,3)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:Graph005.png|600px]]

[[#Top]]

==Complete Graph==
Complete graph is a graph, wherein, each node is connected to each other nodes in a graph.

&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.complete_graph(4)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:

[[File:completegraph001.png|600px]]

[[#Top]]

==Cycle graph==

&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.cycle_graph(5)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:

[[File:cyclegraph1.png|600px]]

[[#Top]]

==Ladder graph==

&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.ladder_graph(5)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:

[[File:laddergraph.png|600px]]

[[#Top]]

==Path Graph==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.path_graph(6)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:

[[File:pathgraph.png|600px]]

[[#Top]]

==Star Graph==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.star_graph(5)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:stargraph.png|600px]]

[[#Top]]

==Star Graph of 4 Nodes==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.star_graph(4)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:stargraph4points.png|600px]]

==Wheel Graph==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.wheel_graph(4)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:wheelgraph.png|600px]]

[[#Top]]

==Wheel Graph of 5 nodes==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.wheel_graph(5)
nx.draw(G)
plt.show()

&lt;/pre&gt;

Output:

[[File:wheelgraph5nodes.png|600px]]

[[#Top]]

==Wheel Graph of 6 nodes==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.wheel_graph(6)
nx.draw(G)
plt.show()

&lt;/pre&gt;

Output:

[[File:wheelgraph6nodes.png|600px]]

[[#Top]]

==Random Graph==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.gnp_random_graph(5,0.5)
nx.draw(G)
plt.show()

&lt;/pre&gt;

Output:

[[File:randomgraph1.png|600px]]


Running the same above program, we will get different output, as shown below, as it is random graph.

[[File:randomgraph2.png|600px]]

[[#Top]]

==Page Rank Algorithm Implementation==

===Random Directed Graph===
&lt;pre&gt;
import networkx as nx
import random
import matplotlib.pyplot as plt

#Draw random directed graph
G=nx.gnp_random_graph(10,0.5,directed=True)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output: 

[[File:randomDirectedGraph.png|600px]]


===Random Directed Graph with Labels===
&lt;pre&gt;
import networkx as nx
import random
import matplotlib.pyplot as plt

#Draw random directed graph 
G=nx.gnp_random_graph(10,0.5,directed=True)
#Give label numbering to nodes
nx.draw(G,with_labels=True)
plt.show()

&lt;/pre&gt;

Output:

[[File:randomDirectedGraphwithLabels.png|600px]]


[[#Top]]

===Page Rank Coding===
&lt;pre&gt;
import networkx as nx
import random
import matplotlib.pyplot as plt
import operator

#Draw random directed graph 
G=nx.gnp_random_graph(10,0.5,directed=True)
#Give label numbering to nodes
nx.draw(G,with_labels=True)
plt.show()

#x is the random source node
x=random.choice([i for i in range(G.number_of_nodes())])

#dictionary to maintain counter
dictCounter={}
#initialize the counter of each node as 0
for i in range(G.number_of_nodes()):
    dictCounter[i]=0
dictCounter[x]=dictCounter[x]+1

for i in range(10000):
    listn=list(G.neighbors(x))
    #if x is a sink node, we need to select random node for random walk
    #, else select random neighbor node

    if(len(listn)==0):
        x=random.choice([i for i in range(G.number_of_nodes())])
        dictCounter[x]=dictCounter[x]+1
    else:
        #choose a node randomly from neightbors
        x=random.choice(listn)
        dictCounter[x]=dictCounter[x]+1

p=nx.pagerank(G)
sorted_p=sorted(p.items(),key=operator.itemgetter(1))
sorted_rw=sorted(dictCounter.items(),key=operator.itemgetter(1))                        
#print(p)
#print(dictCounter)

print(sorted_p)
print(sorted_rw)

&lt;/pre&gt;

Output:

&lt;pre&gt;
[(2, 0.07139920240302768), (5, 0.07464882519777695), (3, 0.08527469366832419), 
(6, 0.08665188647066119), (4, 0.0987815549542114), (0, 0.10858415997562518), 
(9, 0.110369696943925), (8, 0.11456211367660116), (1, 0.11682018308814024), 
(7, 0.13290768362170685)]
[(2, 4), (5, 7), (8, 7), (6, 8), (3, 11), (7, 11), (1, 12), (4, 12), (0, 13), (9, 16)]
&lt;/pre&gt;

[[#Top]]

=Email communication Network=
==Page rank :page distribution method==
===Revision: Graph===
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
G=nx.cycle_graph(4)
labels={0:&quot;Bangluru&quot;,1:&quot;Gawhati&quot;,2:&quot;Kolkata&quot;,3:&quot;Chennai&quot;}
nx.draw(G,with_labels=True,labels=labels)
plt.show()
&lt;/pre&gt;

Output:

[[File:revGRAPH.png]]


===Directed Graph  Example===

[[File:directedGraphExample.png|600px]]

&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
G=nx.gnp_random_graph(4,.5,directed=True)
labels={0:&quot;Bangluru&quot;,1:&quot;Gawhati&quot;,2:&quot;Kolkata&quot;,3:&quot;Chennai&quot;}
nx.draw(G,with_labels=True,labels=labels)
plt.show()

&lt;/pre&gt;

Output:
[[File:directedg.png|600px]]


[[#Top]]


==Bidirectional with Parallel and self loops==
==Bidirectional with Parallel edges==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
G=nx.MultiDiGraph()

G.add_node(1)
G.add_node(2)
G.add_node(3)
G.add_node(4)

G.add_path([1,2,3,4,1])
G.add_edge(1,4)
nx.draw(G,with_labels=True)
plt.show()
&lt;/pre&gt;

Output: 

[[File:bidirectionalg.png]]

==Bidirectional with Self loops==
It doesn't show as graph. It is not taught, I did it myself.(Ms. Ami TUSHARKANT CHOKSI)
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
G=nx.MultiDiGraph()

G.add_node(1)
G.add_node(2)
G.add_node(3)
G.add_node(4)

G.add_path([1,2,3,4,1])
G.add_edge(1,4)
G.add_edge(1,1)
nx.draw(G,with_labels=True)
d=G.selfloop_edges()
print(d)
plt.show()

&lt;/pre&gt;

#Output: &lt;generator object selfloop_edges.&lt;locals&gt;.&lt;genexpr&gt; at 0x0B790150&gt;
#It shows self loop is there in the graph


==Directed Undirected Graph==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

#undirected graph
U=nx.Graph()

#directed graph
G=nx.DiGraph()

#nodes in graph
print(G.nodes())#Output: []
G.add_nodes_from([i for i in range(5)])
print(G.nodes())#Output: [0, 1, 2, 3, 4]

#edges
print(G.out_edges())#Output:[]

print(G.in_edges())#Output:[]

G.add_edge(1,2)
print(G.edges())#Output: [(1, 2)]
print(G.in_edges())#Output: [(1, 2)]
print(G.out_edges())#Output: [(1, 2)]

G.add_edge(0,3)
G.add_edge(2,3)
G.add_edge(3,2)
G.add_edge(3,4)
G.add_edge(4,1)
print(G.out_edges(2))#Output: [(2, 3)]
print(G.out_edges(3))#Output:[(3, 2), (3, 4)]
print(G.in_edges(3))#Output:[(0, 3), (2, 3)]

&lt;/pre&gt;

==Points Distribution Method==
&lt;ul&gt;
&lt;li&gt;Initially, all nodes are given equal points&lt;/li&gt;
&lt;li&gt;Rule&lt;/li&gt;
&lt;ul&gt;
&lt;li&gt;Share whatever you have equally with your neighbors&lt;/li&gt;
&lt;/ul&gt;
&lt;li&gt;FOR NODE B:Neighbors: C&lt;/li&gt;
&lt;li&gt;Give all of its points to C&lt;/li&gt;
&lt;li&gt;FOR NODE C:Neighbors: A&lt;/li&gt;
&lt;li&gt;Give all of its points to A&lt;/li&gt;
&lt;li&gt;new point of A=old points of C&lt;/li&gt;
&lt;li&gt;new point of B=(1/2)*old points of A&lt;/li&gt;
&lt;/ul&gt;

=Collatz Conjecture=
Taught by Sudarshan sir and Amit sir, and Edited by Ms. Ami Tusharkant Choksi

If a number is even, divide it by ''2'', if it is odd, make multiply it by ''3'' and add ''1'', till you get ''1''. This simple problem is called, ''Collatz Conjecture''. 

[[File:collatz1.png|600px]]

[[File:collatz2.png|600px]]

[[File:collatz3.png|600px]]

[[File:collatz4.png|600px]]

[[File:collatz5.png|600px]]

Number is bigger doesn't mean more iterations are required. One can notice, from the output of the following program. 



The program to implement the same is as follows:
==Program==
&lt;pre&gt;
#collatz conjecture
#if num is even, divide it by 2
#if num is odd, new number is equal to 3n+1


def checkNum(num):
    iterations=1
    while(num!=1):
        if(num%2==0):
            num=int(num/2)            
        else:
            num = 3*num+1
        iterations+=1
        

    print(num,iterations)


#checkNum(12)#Output: 1 10
#checkNum(26)#Output: 1 11
checkNum(2000)#Output: 1 113
&lt;/pre&gt;

&lt;pre&gt;

#recursive approach

def checkNum(num):
    if num==1:
        return 1
    elif num%2==0:
        return checkNum(num/2)+1
    else:
        return checkNum(3*num +1)+1


output:
checkNum(26)
Out[27]: 11
checkNum(5000)
Out[28]: 29
&lt;/pre&gt;

==Program adding statement to print all iterations==
&lt;pre&gt;
def checkNum(num):
    iterations=1
    while(num!=1):
        if(num%2==0):
            num=int(num/2)            
        else:
            num = 3*num+1
        print(iterations,&quot;:&quot;,num)
        iterations+=1
        

    print(num,iterations)
&lt;/pre&gt;
==Output==
===For checkNum(2000)===
&lt;pre&gt;
1 : 1000
2 : 500
3 : 250
4 : 125
5 : 376
6 : 188
7 : 94
8 : 47
9 : 142
10 : 71
11 : 214
12 : 107
13 : 322
14 : 161
15 : 484
16 : 242
17 : 121
18 : 364
19 : 182
20 : 91
21 : 274
22 : 137
23 : 412
24 : 206
25 : 103
26 : 310
27 : 155
28 : 466
29 : 233
30 : 700
31 : 350
32 : 175
33 : 526
34 : 263
35 : 790
36 : 395
37 : 1186
38 : 593
39 : 1780
40 : 890
41 : 445
42 : 1336
43 : 668
44 : 334
45 : 167
46 : 502
47 : 251
48 : 754
49 : 377
50 : 1132
51 : 566
52 : 283
53 : 850
54 : 425
55 : 1276
56 : 638
57 : 319
58 : 958
59 : 479
60 : 1438
61 : 719
62 : 2158
63 : 1079
64 : 3238
65 : 1619
66 : 4858
67 : 2429
68 : 7288
69 : 3644
70 : 1822
71 : 911
72 : 2734
73 : 1367
74 : 4102
75 : 2051
76 : 6154
77 : 3077
78 : 9232
79 : 4616
80 : 2308
81 : 1154
82 : 577
83 : 1732
84 : 866
85 : 433
86 : 1300
87 : 650
88 : 325
89 : 976
90 : 488
91 : 244
92 : 122
93 : 61
94 : 184
95 : 92
96 : 46
97 : 23
98 : 70
99 : 35
100 : 106
101 : 53
102 : 160
103 : 80
104 : 40
105 : 20
106 : 10
107 : 5
108 : 16
109 : 8
110 : 4
111 : 2
112 : 1
1 113
&lt;/pre&gt;

===For checkNum(5000)===
&lt;pre&gt;
1 : 2500
2 : 1250
3 : 625
4 : 1876
5 : 938
6 : 469
7 : 1408
8 : 704
9 : 352
10 : 176
11 : 88
12 : 44
13 : 22
14 : 11
15 : 34
16 : 17
17 : 52
18 : 26
19 : 13
20 : 40
21 : 20
22 : 10
23 : 5
24 : 16
25 : 8
26 : 4
27 : 2
28 : 1
1 29
&lt;/pre&gt;
===For checkNum(25000000)===
&lt;pre&gt;
1 : 12500000
2 : 6250000
3 : 3125000
4 : 1562500
5 : 781250
6 : 390625
7 : 1171876
8 : 585938
9 : 292969
10 : 878908
11 : 439454
12 : 219727
13 : 659182
14 : 329591
15 : 988774
16 : 494387
17 : 1483162
18 : 741581
19 : 2224744
20 : 1112372
21 : 556186
22 : 278093
23 : 834280
24 : 417140
25 : 208570
26 : 104285
27 : 312856
28 : 156428
29 : 78214
30 : 39107
31 : 117322
32 : 58661
33 : 175984
34 : 87992
35 : 43996
36 : 21998
37 : 10999
38 : 32998
39 : 16499
40 : 49498
41 : 24749
42 : 74248
43 : 37124
44 : 18562
45 : 9281
46 : 27844
47 : 13922
48 : 6961
49 : 20884
50 : 10442
51 : 5221
52 : 15664
53 : 7832
54 : 3916
55 : 1958
56 : 979
57 : 2938
58 : 1469
59 : 4408
60 : 2204
61 : 1102
62 : 551
63 : 1654
64 : 827
65 : 2482
66 : 1241
67 : 3724
68 : 1862
69 : 931
70 : 2794
71 : 1397
72 : 4192
73 : 2096
74 : 1048
75 : 524
76 : 262
77 : 131
78 : 394
79 : 197
80 : 592
81 : 296
82 : 148
83 : 74
84 : 37
85 : 112
86 : 56
87 : 28
88 : 14
89 : 7
90 : 22
91 : 11
92 : 34
93 : 17
94 : 52
95 : 26
96 : 13
97 : 40
98 : 20
99 : 10
100 : 5
101 : 16
102 : 8
103 : 4
104 : 2
105 : 1
1 106
&lt;/pre&gt;

Happy Life ahead!!!

[[File:end1.png]]</text>
      <sha1>tdkrp5en5yw0xdpwu09qbrupadckbie</sha1>
    </revision>
    <revision>
      <id>4471</id>
      <parentid>4470</parentid>
      <timestamp>2018-10-17T07:27:41Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* Points Distribution Method */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="14018">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_12 Contributors of this page]

=Page Rank - How does Google Work=
One web page is having link to other page, that is a page is referring to other page. Google uses ''Page Rank'' algorithm to choose which page should be displayed first.

If we have network, connections as below:
[[File:rank0.png]]

We want to pick a leader out of all these nodes. How to pick a leader?  Why to elect a leader? It is because we want to find the super power of available nodes.                     
[[File:rank1.png]]

For example, the application wherein, we want to find the most impressive person of the  few ones. How to decide it? As shown in below figure, each node will communicate with other, randomly, we implement the count for each node, how many times, the particular node is being visited.
[[File:rank2.png]]

[[#Top]]

As shown in following, figure, all nodes are visited and each node is marked with the 
number i.e.number of times the node is visited.
[[File:rank3.png]]

The node with the maximum count, becomes the winner. Here, node with 120 count in figure 
below, is the winner. i.e. The person with 120 count in the figure is the most impressive 
person in the community being considered.
[[File:rank4.png]]

[[File:rank5.png]]

[[File:rank6.png]]

[[File:rank7.png]]


[[File:rank8.png]]

[[#Top]]

Google selects the page rank in this matter. Each web page is connected to other web page with web links. To a page, maximum link is there, that will be put on top results in Google search results.
[[File:rank9.png]]

Google uses web crawler. The crawler takes the random walk on the www network and rank the web sites.
[[File:rank10.png]]

This way Google ranks the pages and displays search results, according to page rank.
[[File:rank11.png]]

e.g.we search for ''mysore city''. Google has 10,000 results. But it displays the results in the sequence of page rank of search results, As shown in figure below.
[[File:mysore.png]]

[[#Top]]

==Page rank algorithm ==
As shown in beautiful figure below, few nodes combinely selected one as the leader, then that leader and other nodes, have selected         other as a leader. This way, finally the final leader is elected.
[[File:rank12.png|600px]]


[[File:graph00.png|600px]]


[[File:graph01.png|600px]]

[[#Top]]

==Gragh Drawing Program1==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
nx.barbell_graph(4,2)
G=nx.barbell_graph(4,2)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:Graph003.png|600px]]

[[#Top]]

==Gragh Drawing Program2==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
nx.barbell_graph(4,3)
G=nx.barbell_graph(4,3)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:Graph004.png|600px]]

[[#Top]]

==Gragh Drawing Program3==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
nx.barbell_graph(5,3)
G=nx.barbell_graph(5,3)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:Graph005.png|600px]]

[[#Top]]

==Complete Graph==
Complete graph is a graph, wherein, each node is connected to each other nodes in a graph.

&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.complete_graph(4)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:

[[File:completegraph001.png|600px]]

[[#Top]]

==Cycle graph==

&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.cycle_graph(5)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:

[[File:cyclegraph1.png|600px]]

[[#Top]]

==Ladder graph==

&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.ladder_graph(5)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:

[[File:laddergraph.png|600px]]

[[#Top]]

==Path Graph==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.path_graph(6)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:

[[File:pathgraph.png|600px]]

[[#Top]]

==Star Graph==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.star_graph(5)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:stargraph.png|600px]]

[[#Top]]

==Star Graph of 4 Nodes==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.star_graph(4)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:stargraph4points.png|600px]]

==Wheel Graph==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.wheel_graph(4)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:wheelgraph.png|600px]]

[[#Top]]

==Wheel Graph of 5 nodes==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.wheel_graph(5)
nx.draw(G)
plt.show()

&lt;/pre&gt;

Output:

[[File:wheelgraph5nodes.png|600px]]

[[#Top]]

==Wheel Graph of 6 nodes==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.wheel_graph(6)
nx.draw(G)
plt.show()

&lt;/pre&gt;

Output:

[[File:wheelgraph6nodes.png|600px]]

[[#Top]]

==Random Graph==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.gnp_random_graph(5,0.5)
nx.draw(G)
plt.show()

&lt;/pre&gt;

Output:

[[File:randomgraph1.png|600px]]


Running the same above program, we will get different output, as shown below, as it is random graph.

[[File:randomgraph2.png|600px]]

[[#Top]]

==Page Rank Algorithm Implementation==

===Random Directed Graph===
&lt;pre&gt;
import networkx as nx
import random
import matplotlib.pyplot as plt

#Draw random directed graph
G=nx.gnp_random_graph(10,0.5,directed=True)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output: 

[[File:randomDirectedGraph.png|600px]]


===Random Directed Graph with Labels===
&lt;pre&gt;
import networkx as nx
import random
import matplotlib.pyplot as plt

#Draw random directed graph 
G=nx.gnp_random_graph(10,0.5,directed=True)
#Give label numbering to nodes
nx.draw(G,with_labels=True)
plt.show()

&lt;/pre&gt;

Output:

[[File:randomDirectedGraphwithLabels.png|600px]]


[[#Top]]

===Page Rank Coding===
&lt;pre&gt;
import networkx as nx
import random
import matplotlib.pyplot as plt
import operator

#Draw random directed graph 
G=nx.gnp_random_graph(10,0.5,directed=True)
#Give label numbering to nodes
nx.draw(G,with_labels=True)
plt.show()

#x is the random source node
x=random.choice([i for i in range(G.number_of_nodes())])

#dictionary to maintain counter
dictCounter={}
#initialize the counter of each node as 0
for i in range(G.number_of_nodes()):
    dictCounter[i]=0
dictCounter[x]=dictCounter[x]+1

for i in range(10000):
    listn=list(G.neighbors(x))
    #if x is a sink node, we need to select random node for random walk
    #, else select random neighbor node

    if(len(listn)==0):
        x=random.choice([i for i in range(G.number_of_nodes())])
        dictCounter[x]=dictCounter[x]+1
    else:
        #choose a node randomly from neightbors
        x=random.choice(listn)
        dictCounter[x]=dictCounter[x]+1

p=nx.pagerank(G)
sorted_p=sorted(p.items(),key=operator.itemgetter(1))
sorted_rw=sorted(dictCounter.items(),key=operator.itemgetter(1))                        
#print(p)
#print(dictCounter)

print(sorted_p)
print(sorted_rw)

&lt;/pre&gt;

Output:

&lt;pre&gt;
[(2, 0.07139920240302768), (5, 0.07464882519777695), (3, 0.08527469366832419), 
(6, 0.08665188647066119), (4, 0.0987815549542114), (0, 0.10858415997562518), 
(9, 0.110369696943925), (8, 0.11456211367660116), (1, 0.11682018308814024), 
(7, 0.13290768362170685)]
[(2, 4), (5, 7), (8, 7), (6, 8), (3, 11), (7, 11), (1, 12), (4, 12), (0, 13), (9, 16)]
&lt;/pre&gt;

[[#Top]]

=Email communication Network=
==Page rank :page distribution method==
===Revision: Graph===
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
G=nx.cycle_graph(4)
labels={0:&quot;Bangluru&quot;,1:&quot;Gawhati&quot;,2:&quot;Kolkata&quot;,3:&quot;Chennai&quot;}
nx.draw(G,with_labels=True,labels=labels)
plt.show()
&lt;/pre&gt;

Output:

[[File:revGRAPH.png]]


===Directed Graph  Example===

[[File:directedGraphExample.png|600px]]

&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
G=nx.gnp_random_graph(4,.5,directed=True)
labels={0:&quot;Bangluru&quot;,1:&quot;Gawhati&quot;,2:&quot;Kolkata&quot;,3:&quot;Chennai&quot;}
nx.draw(G,with_labels=True,labels=labels)
plt.show()

&lt;/pre&gt;

Output:
[[File:directedg.png|600px]]


[[#Top]]


==Bidirectional with Parallel and self loops==
==Bidirectional with Parallel edges==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
G=nx.MultiDiGraph()

G.add_node(1)
G.add_node(2)
G.add_node(3)
G.add_node(4)

G.add_path([1,2,3,4,1])
G.add_edge(1,4)
nx.draw(G,with_labels=True)
plt.show()
&lt;/pre&gt;

Output: 

[[File:bidirectionalg.png]]

==Bidirectional with Self loops==
It doesn't show as graph. It is not taught, I did it myself.(Ms. Ami TUSHARKANT CHOKSI)
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
G=nx.MultiDiGraph()

G.add_node(1)
G.add_node(2)
G.add_node(3)
G.add_node(4)

G.add_path([1,2,3,4,1])
G.add_edge(1,4)
G.add_edge(1,1)
nx.draw(G,with_labels=True)
d=G.selfloop_edges()
print(d)
plt.show()

&lt;/pre&gt;

#Output: &lt;generator object selfloop_edges.&lt;locals&gt;.&lt;genexpr&gt; at 0x0B790150&gt;
#It shows self loop is there in the graph


==Directed Undirected Graph==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

#undirected graph
U=nx.Graph()

#directed graph
G=nx.DiGraph()

#nodes in graph
print(G.nodes())#Output: []
G.add_nodes_from([i for i in range(5)])
print(G.nodes())#Output: [0, 1, 2, 3, 4]

#edges
print(G.out_edges())#Output:[]

print(G.in_edges())#Output:[]

G.add_edge(1,2)
print(G.edges())#Output: [(1, 2)]
print(G.in_edges())#Output: [(1, 2)]
print(G.out_edges())#Output: [(1, 2)]

G.add_edge(0,3)
G.add_edge(2,3)
G.add_edge(3,2)
G.add_edge(3,4)
G.add_edge(4,1)
print(G.out_edges(2))#Output: [(2, 3)]
print(G.out_edges(3))#Output:[(3, 2), (3, 4)]
print(G.in_edges(3))#Output:[(0, 3), (2, 3)]

&lt;/pre&gt;

==Points Distribution Method==
&lt;ul&gt;
&lt;li&gt;Initially, all nodes are given equal points&lt;/li&gt;
&lt;li&gt;Rule&lt;/li&gt;
&lt;ul&gt;
&lt;li&gt;Share whatever you have equally with your neighbors&lt;/li&gt;
&lt;/ul&gt;
&lt;li&gt;FOR NODE B:Neighbors: C&lt;/li&gt;
&lt;li&gt;Give all of its points to C&lt;/li&gt;
&lt;li&gt;FOR NODE C:Neighbors: A&lt;/li&gt;
&lt;li&gt;Give all of its points to A&lt;/li&gt;
&lt;li&gt;new point of A=old points of C&lt;/li&gt;
&lt;li&gt;new point of B=(1/2)*old points of A&lt;/li&gt;
&lt;li&gt;new point of C=(1/2)*old points of A+old points of B&lt;/li&gt;
&lt;/ul&gt;

=Collatz Conjecture=
Taught by Sudarshan sir and Amit sir, and Edited by Ms. Ami Tusharkant Choksi

If a number is even, divide it by ''2'', if it is odd, make multiply it by ''3'' and add ''1'', till you get ''1''. This simple problem is called, ''Collatz Conjecture''. 

[[File:collatz1.png|600px]]

[[File:collatz2.png|600px]]

[[File:collatz3.png|600px]]

[[File:collatz4.png|600px]]

[[File:collatz5.png|600px]]

Number is bigger doesn't mean more iterations are required. One can notice, from the output of the following program. 



The program to implement the same is as follows:
==Program==
&lt;pre&gt;
#collatz conjecture
#if num is even, divide it by 2
#if num is odd, new number is equal to 3n+1


def checkNum(num):
    iterations=1
    while(num!=1):
        if(num%2==0):
            num=int(num/2)            
        else:
            num = 3*num+1
        iterations+=1
        

    print(num,iterations)


#checkNum(12)#Output: 1 10
#checkNum(26)#Output: 1 11
checkNum(2000)#Output: 1 113
&lt;/pre&gt;

&lt;pre&gt;

#recursive approach

def checkNum(num):
    if num==1:
        return 1
    elif num%2==0:
        return checkNum(num/2)+1
    else:
        return checkNum(3*num +1)+1


output:
checkNum(26)
Out[27]: 11
checkNum(5000)
Out[28]: 29
&lt;/pre&gt;

==Program adding statement to print all iterations==
&lt;pre&gt;
def checkNum(num):
    iterations=1
    while(num!=1):
        if(num%2==0):
            num=int(num/2)            
        else:
            num = 3*num+1
        print(iterations,&quot;:&quot;,num)
        iterations+=1
        

    print(num,iterations)
&lt;/pre&gt;
==Output==
===For checkNum(2000)===
&lt;pre&gt;
1 : 1000
2 : 500
3 : 250
4 : 125
5 : 376
6 : 188
7 : 94
8 : 47
9 : 142
10 : 71
11 : 214
12 : 107
13 : 322
14 : 161
15 : 484
16 : 242
17 : 121
18 : 364
19 : 182
20 : 91
21 : 274
22 : 137
23 : 412
24 : 206
25 : 103
26 : 310
27 : 155
28 : 466
29 : 233
30 : 700
31 : 350
32 : 175
33 : 526
34 : 263
35 : 790
36 : 395
37 : 1186
38 : 593
39 : 1780
40 : 890
41 : 445
42 : 1336
43 : 668
44 : 334
45 : 167
46 : 502
47 : 251
48 : 754
49 : 377
50 : 1132
51 : 566
52 : 283
53 : 850
54 : 425
55 : 1276
56 : 638
57 : 319
58 : 958
59 : 479
60 : 1438
61 : 719
62 : 2158
63 : 1079
64 : 3238
65 : 1619
66 : 4858
67 : 2429
68 : 7288
69 : 3644
70 : 1822
71 : 911
72 : 2734
73 : 1367
74 : 4102
75 : 2051
76 : 6154
77 : 3077
78 : 9232
79 : 4616
80 : 2308
81 : 1154
82 : 577
83 : 1732
84 : 866
85 : 433
86 : 1300
87 : 650
88 : 325
89 : 976
90 : 488
91 : 244
92 : 122
93 : 61
94 : 184
95 : 92
96 : 46
97 : 23
98 : 70
99 : 35
100 : 106
101 : 53
102 : 160
103 : 80
104 : 40
105 : 20
106 : 10
107 : 5
108 : 16
109 : 8
110 : 4
111 : 2
112 : 1
1 113
&lt;/pre&gt;

===For checkNum(5000)===
&lt;pre&gt;
1 : 2500
2 : 1250
3 : 625
4 : 1876
5 : 938
6 : 469
7 : 1408
8 : 704
9 : 352
10 : 176
11 : 88
12 : 44
13 : 22
14 : 11
15 : 34
16 : 17
17 : 52
18 : 26
19 : 13
20 : 40
21 : 20
22 : 10
23 : 5
24 : 16
25 : 8
26 : 4
27 : 2
28 : 1
1 29
&lt;/pre&gt;
===For checkNum(25000000)===
&lt;pre&gt;
1 : 12500000
2 : 6250000
3 : 3125000
4 : 1562500
5 : 781250
6 : 390625
7 : 1171876
8 : 585938
9 : 292969
10 : 878908
11 : 439454
12 : 219727
13 : 659182
14 : 329591
15 : 988774
16 : 494387
17 : 1483162
18 : 741581
19 : 2224744
20 : 1112372
21 : 556186
22 : 278093
23 : 834280
24 : 417140
25 : 208570
26 : 104285
27 : 312856
28 : 156428
29 : 78214
30 : 39107
31 : 117322
32 : 58661
33 : 175984
34 : 87992
35 : 43996
36 : 21998
37 : 10999
38 : 32998
39 : 16499
40 : 49498
41 : 24749
42 : 74248
43 : 37124
44 : 18562
45 : 9281
46 : 27844
47 : 13922
48 : 6961
49 : 20884
50 : 10442
51 : 5221
52 : 15664
53 : 7832
54 : 3916
55 : 1958
56 : 979
57 : 2938
58 : 1469
59 : 4408
60 : 2204
61 : 1102
62 : 551
63 : 1654
64 : 827
65 : 2482
66 : 1241
67 : 3724
68 : 1862
69 : 931
70 : 2794
71 : 1397
72 : 4192
73 : 2096
74 : 1048
75 : 524
76 : 262
77 : 131
78 : 394
79 : 197
80 : 592
81 : 296
82 : 148
83 : 74
84 : 37
85 : 112
86 : 56
87 : 28
88 : 14
89 : 7
90 : 22
91 : 11
92 : 34
93 : 17
94 : 52
95 : 26
96 : 13
97 : 40
98 : 20
99 : 10
100 : 5
101 : 16
102 : 8
103 : 4
104 : 2
105 : 1
1 106
&lt;/pre&gt;

Happy Life ahead!!!

[[File:end1.png]]</text>
      <sha1>b2mjzk2lr7nveixjqe426qyaytarn9e</sha1>
    </revision>
    <revision>
      <id>4472</id>
      <parentid>4471</parentid>
      <timestamp>2018-10-17T07:28:46Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* Directed Undirected Graph */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="14028">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_12 Contributors of this page]

=Page Rank - How does Google Work=
One web page is having link to other page, that is a page is referring to other page. Google uses ''Page Rank'' algorithm to choose which page should be displayed first.

If we have network, connections as below:
[[File:rank0.png]]

We want to pick a leader out of all these nodes. How to pick a leader?  Why to elect a leader? It is because we want to find the super power of available nodes.                     
[[File:rank1.png]]

For example, the application wherein, we want to find the most impressive person of the  few ones. How to decide it? As shown in below figure, each node will communicate with other, randomly, we implement the count for each node, how many times, the particular node is being visited.
[[File:rank2.png]]

[[#Top]]

As shown in following, figure, all nodes are visited and each node is marked with the 
number i.e.number of times the node is visited.
[[File:rank3.png]]

The node with the maximum count, becomes the winner. Here, node with 120 count in figure 
below, is the winner. i.e. The person with 120 count in the figure is the most impressive 
person in the community being considered.
[[File:rank4.png]]

[[File:rank5.png]]

[[File:rank6.png]]

[[File:rank7.png]]


[[File:rank8.png]]

[[#Top]]

Google selects the page rank in this matter. Each web page is connected to other web page with web links. To a page, maximum link is there, that will be put on top results in Google search results.
[[File:rank9.png]]

Google uses web crawler. The crawler takes the random walk on the www network and rank the web sites.
[[File:rank10.png]]

This way Google ranks the pages and displays search results, according to page rank.
[[File:rank11.png]]

e.g.we search for ''mysore city''. Google has 10,000 results. But it displays the results in the sequence of page rank of search results, As shown in figure below.
[[File:mysore.png]]

[[#Top]]

==Page rank algorithm ==
As shown in beautiful figure below, few nodes combinely selected one as the leader, then that leader and other nodes, have selected         other as a leader. This way, finally the final leader is elected.
[[File:rank12.png|600px]]


[[File:graph00.png|600px]]


[[File:graph01.png|600px]]

[[#Top]]

==Gragh Drawing Program1==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
nx.barbell_graph(4,2)
G=nx.barbell_graph(4,2)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:Graph003.png|600px]]

[[#Top]]

==Gragh Drawing Program2==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
nx.barbell_graph(4,3)
G=nx.barbell_graph(4,3)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:Graph004.png|600px]]

[[#Top]]

==Gragh Drawing Program3==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
nx.barbell_graph(5,3)
G=nx.barbell_graph(5,3)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:Graph005.png|600px]]

[[#Top]]

==Complete Graph==
Complete graph is a graph, wherein, each node is connected to each other nodes in a graph.

&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.complete_graph(4)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:

[[File:completegraph001.png|600px]]

[[#Top]]

==Cycle graph==

&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.cycle_graph(5)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:

[[File:cyclegraph1.png|600px]]

[[#Top]]

==Ladder graph==

&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.ladder_graph(5)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:

[[File:laddergraph.png|600px]]

[[#Top]]

==Path Graph==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.path_graph(6)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:

[[File:pathgraph.png|600px]]

[[#Top]]

==Star Graph==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.star_graph(5)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:stargraph.png|600px]]

[[#Top]]

==Star Graph of 4 Nodes==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.star_graph(4)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:stargraph4points.png|600px]]

==Wheel Graph==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.wheel_graph(4)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:wheelgraph.png|600px]]

[[#Top]]

==Wheel Graph of 5 nodes==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.wheel_graph(5)
nx.draw(G)
plt.show()

&lt;/pre&gt;

Output:

[[File:wheelgraph5nodes.png|600px]]

[[#Top]]

==Wheel Graph of 6 nodes==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.wheel_graph(6)
nx.draw(G)
plt.show()

&lt;/pre&gt;

Output:

[[File:wheelgraph6nodes.png|600px]]

[[#Top]]

==Random Graph==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.gnp_random_graph(5,0.5)
nx.draw(G)
plt.show()

&lt;/pre&gt;

Output:

[[File:randomgraph1.png|600px]]


Running the same above program, we will get different output, as shown below, as it is random graph.

[[File:randomgraph2.png|600px]]

[[#Top]]

==Page Rank Algorithm Implementation==

===Random Directed Graph===
&lt;pre&gt;
import networkx as nx
import random
import matplotlib.pyplot as plt

#Draw random directed graph
G=nx.gnp_random_graph(10,0.5,directed=True)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output: 

[[File:randomDirectedGraph.png|600px]]


===Random Directed Graph with Labels===
&lt;pre&gt;
import networkx as nx
import random
import matplotlib.pyplot as plt

#Draw random directed graph 
G=nx.gnp_random_graph(10,0.5,directed=True)
#Give label numbering to nodes
nx.draw(G,with_labels=True)
plt.show()

&lt;/pre&gt;

Output:

[[File:randomDirectedGraphwithLabels.png|600px]]


[[#Top]]

===Page Rank Coding===
&lt;pre&gt;
import networkx as nx
import random
import matplotlib.pyplot as plt
import operator

#Draw random directed graph 
G=nx.gnp_random_graph(10,0.5,directed=True)
#Give label numbering to nodes
nx.draw(G,with_labels=True)
plt.show()

#x is the random source node
x=random.choice([i for i in range(G.number_of_nodes())])

#dictionary to maintain counter
dictCounter={}
#initialize the counter of each node as 0
for i in range(G.number_of_nodes()):
    dictCounter[i]=0
dictCounter[x]=dictCounter[x]+1

for i in range(10000):
    listn=list(G.neighbors(x))
    #if x is a sink node, we need to select random node for random walk
    #, else select random neighbor node

    if(len(listn)==0):
        x=random.choice([i for i in range(G.number_of_nodes())])
        dictCounter[x]=dictCounter[x]+1
    else:
        #choose a node randomly from neightbors
        x=random.choice(listn)
        dictCounter[x]=dictCounter[x]+1

p=nx.pagerank(G)
sorted_p=sorted(p.items(),key=operator.itemgetter(1))
sorted_rw=sorted(dictCounter.items(),key=operator.itemgetter(1))                        
#print(p)
#print(dictCounter)

print(sorted_p)
print(sorted_rw)

&lt;/pre&gt;

Output:

&lt;pre&gt;
[(2, 0.07139920240302768), (5, 0.07464882519777695), (3, 0.08527469366832419), 
(6, 0.08665188647066119), (4, 0.0987815549542114), (0, 0.10858415997562518), 
(9, 0.110369696943925), (8, 0.11456211367660116), (1, 0.11682018308814024), 
(7, 0.13290768362170685)]
[(2, 4), (5, 7), (8, 7), (6, 8), (3, 11), (7, 11), (1, 12), (4, 12), (0, 13), (9, 16)]
&lt;/pre&gt;

[[#Top]]

=Email communication Network=
==Page rank :page distribution method==
===Revision: Graph===
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
G=nx.cycle_graph(4)
labels={0:&quot;Bangluru&quot;,1:&quot;Gawhati&quot;,2:&quot;Kolkata&quot;,3:&quot;Chennai&quot;}
nx.draw(G,with_labels=True,labels=labels)
plt.show()
&lt;/pre&gt;

Output:

[[File:revGRAPH.png]]


===Directed Graph  Example===

[[File:directedGraphExample.png|600px]]

&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
G=nx.gnp_random_graph(4,.5,directed=True)
labels={0:&quot;Bangluru&quot;,1:&quot;Gawhati&quot;,2:&quot;Kolkata&quot;,3:&quot;Chennai&quot;}
nx.draw(G,with_labels=True,labels=labels)
plt.show()

&lt;/pre&gt;

Output:
[[File:directedg.png|600px]]


[[#Top]]


==Bidirectional with Parallel and self loops==
==Bidirectional with Parallel edges==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
G=nx.MultiDiGraph()

G.add_node(1)
G.add_node(2)
G.add_node(3)
G.add_node(4)

G.add_path([1,2,3,4,1])
G.add_edge(1,4)
nx.draw(G,with_labels=True)
plt.show()
&lt;/pre&gt;

Output: 

[[File:bidirectionalg.png]]

==Bidirectional with Self loops==
It doesn't show as graph. It is not taught, I did it myself.(Ms. Ami TUSHARKANT CHOKSI)
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
G=nx.MultiDiGraph()

G.add_node(1)
G.add_node(2)
G.add_node(3)
G.add_node(4)

G.add_path([1,2,3,4,1])
G.add_edge(1,4)
G.add_edge(1,1)
nx.draw(G,with_labels=True)
d=G.selfloop_edges()
print(d)
plt.show()

&lt;/pre&gt;

#Output: &lt;generator object selfloop_edges.&lt;locals&gt;.&lt;genexpr&gt; at 0x0B790150&gt;
#It shows self loop is there in the graph


==Directed Undirected Graph==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

#undirected graph
U=nx.Graph()

#directed graph
G=nx.DiGraph()

#nodes in graph
print(G.nodes())#Output: []
G.add_nodes_from([i for i in range(5)])
print(G.nodes())#Output: [0, 1, 2, 3, 4]

#edges
print(G.out_edges())#Output:[]

print(G.in_edges())#Output:[]

G.add_edge(1,2)
print(G.edges())#Output: [(1, 2)]
print(G.in_edges())#Output: [(1, 2)]
print(G.out_edges())#Output: [(1, 2)]

G.add_edge(0,3)
G.add_edge(2,3)
G.add_edge(3,2)
G.add_edge(3,4)
G.add_edge(4,1)
print(G.out_edges(2))#Output: [(2, 3)]
print(G.out_edges(3))#Output:[(3, 2), (3, 4)]
print(G.in_edges(3))#Output:[(0, 3), (2, 3)]

&lt;/pre&gt;

[[#Top]]

==Points Distribution Method==
&lt;ul&gt;
&lt;li&gt;Initially, all nodes are given equal points&lt;/li&gt;
&lt;li&gt;Rule&lt;/li&gt;
&lt;ul&gt;
&lt;li&gt;Share whatever you have equally with your neighbors&lt;/li&gt;
&lt;/ul&gt;
&lt;li&gt;FOR NODE B:Neighbors: C&lt;/li&gt;
&lt;li&gt;Give all of its points to C&lt;/li&gt;
&lt;li&gt;FOR NODE C:Neighbors: A&lt;/li&gt;
&lt;li&gt;Give all of its points to A&lt;/li&gt;
&lt;li&gt;new point of A=old points of C&lt;/li&gt;
&lt;li&gt;new point of B=(1/2)*old points of A&lt;/li&gt;
&lt;li&gt;new point of C=(1/2)*old points of A+old points of B&lt;/li&gt;
&lt;/ul&gt;

=Collatz Conjecture=
Taught by Sudarshan sir and Amit sir, and Edited by Ms. Ami Tusharkant Choksi

If a number is even, divide it by ''2'', if it is odd, make multiply it by ''3'' and add ''1'', till you get ''1''. This simple problem is called, ''Collatz Conjecture''. 

[[File:collatz1.png|600px]]

[[File:collatz2.png|600px]]

[[File:collatz3.png|600px]]

[[File:collatz4.png|600px]]

[[File:collatz5.png|600px]]

Number is bigger doesn't mean more iterations are required. One can notice, from the output of the following program. 



The program to implement the same is as follows:
==Program==
&lt;pre&gt;
#collatz conjecture
#if num is even, divide it by 2
#if num is odd, new number is equal to 3n+1


def checkNum(num):
    iterations=1
    while(num!=1):
        if(num%2==0):
            num=int(num/2)            
        else:
            num = 3*num+1
        iterations+=1
        

    print(num,iterations)


#checkNum(12)#Output: 1 10
#checkNum(26)#Output: 1 11
checkNum(2000)#Output: 1 113
&lt;/pre&gt;

&lt;pre&gt;

#recursive approach

def checkNum(num):
    if num==1:
        return 1
    elif num%2==0:
        return checkNum(num/2)+1
    else:
        return checkNum(3*num +1)+1


output:
checkNum(26)
Out[27]: 11
checkNum(5000)
Out[28]: 29
&lt;/pre&gt;

==Program adding statement to print all iterations==
&lt;pre&gt;
def checkNum(num):
    iterations=1
    while(num!=1):
        if(num%2==0):
            num=int(num/2)            
        else:
            num = 3*num+1
        print(iterations,&quot;:&quot;,num)
        iterations+=1
        

    print(num,iterations)
&lt;/pre&gt;
==Output==
===For checkNum(2000)===
&lt;pre&gt;
1 : 1000
2 : 500
3 : 250
4 : 125
5 : 376
6 : 188
7 : 94
8 : 47
9 : 142
10 : 71
11 : 214
12 : 107
13 : 322
14 : 161
15 : 484
16 : 242
17 : 121
18 : 364
19 : 182
20 : 91
21 : 274
22 : 137
23 : 412
24 : 206
25 : 103
26 : 310
27 : 155
28 : 466
29 : 233
30 : 700
31 : 350
32 : 175
33 : 526
34 : 263
35 : 790
36 : 395
37 : 1186
38 : 593
39 : 1780
40 : 890
41 : 445
42 : 1336
43 : 668
44 : 334
45 : 167
46 : 502
47 : 251
48 : 754
49 : 377
50 : 1132
51 : 566
52 : 283
53 : 850
54 : 425
55 : 1276
56 : 638
57 : 319
58 : 958
59 : 479
60 : 1438
61 : 719
62 : 2158
63 : 1079
64 : 3238
65 : 1619
66 : 4858
67 : 2429
68 : 7288
69 : 3644
70 : 1822
71 : 911
72 : 2734
73 : 1367
74 : 4102
75 : 2051
76 : 6154
77 : 3077
78 : 9232
79 : 4616
80 : 2308
81 : 1154
82 : 577
83 : 1732
84 : 866
85 : 433
86 : 1300
87 : 650
88 : 325
89 : 976
90 : 488
91 : 244
92 : 122
93 : 61
94 : 184
95 : 92
96 : 46
97 : 23
98 : 70
99 : 35
100 : 106
101 : 53
102 : 160
103 : 80
104 : 40
105 : 20
106 : 10
107 : 5
108 : 16
109 : 8
110 : 4
111 : 2
112 : 1
1 113
&lt;/pre&gt;

===For checkNum(5000)===
&lt;pre&gt;
1 : 2500
2 : 1250
3 : 625
4 : 1876
5 : 938
6 : 469
7 : 1408
8 : 704
9 : 352
10 : 176
11 : 88
12 : 44
13 : 22
14 : 11
15 : 34
16 : 17
17 : 52
18 : 26
19 : 13
20 : 40
21 : 20
22 : 10
23 : 5
24 : 16
25 : 8
26 : 4
27 : 2
28 : 1
1 29
&lt;/pre&gt;
===For checkNum(25000000)===
&lt;pre&gt;
1 : 12500000
2 : 6250000
3 : 3125000
4 : 1562500
5 : 781250
6 : 390625
7 : 1171876
8 : 585938
9 : 292969
10 : 878908
11 : 439454
12 : 219727
13 : 659182
14 : 329591
15 : 988774
16 : 494387
17 : 1483162
18 : 741581
19 : 2224744
20 : 1112372
21 : 556186
22 : 278093
23 : 834280
24 : 417140
25 : 208570
26 : 104285
27 : 312856
28 : 156428
29 : 78214
30 : 39107
31 : 117322
32 : 58661
33 : 175984
34 : 87992
35 : 43996
36 : 21998
37 : 10999
38 : 32998
39 : 16499
40 : 49498
41 : 24749
42 : 74248
43 : 37124
44 : 18562
45 : 9281
46 : 27844
47 : 13922
48 : 6961
49 : 20884
50 : 10442
51 : 5221
52 : 15664
53 : 7832
54 : 3916
55 : 1958
56 : 979
57 : 2938
58 : 1469
59 : 4408
60 : 2204
61 : 1102
62 : 551
63 : 1654
64 : 827
65 : 2482
66 : 1241
67 : 3724
68 : 1862
69 : 931
70 : 2794
71 : 1397
72 : 4192
73 : 2096
74 : 1048
75 : 524
76 : 262
77 : 131
78 : 394
79 : 197
80 : 592
81 : 296
82 : 148
83 : 74
84 : 37
85 : 112
86 : 56
87 : 28
88 : 14
89 : 7
90 : 22
91 : 11
92 : 34
93 : 17
94 : 52
95 : 26
96 : 13
97 : 40
98 : 20
99 : 10
100 : 5
101 : 16
102 : 8
103 : 4
104 : 2
105 : 1
1 106
&lt;/pre&gt;

Happy Life ahead!!!

[[File:end1.png]]</text>
      <sha1>s59yllk73o1zocveaojmrd30gvpgmww</sha1>
    </revision>
    <revision>
      <id>4476</id>
      <parentid>4472</parentid>
      <timestamp>2018-10-17T07:43:14Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* Points Distribution Method */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="14137">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_12 Contributors of this page]

=Page Rank - How does Google Work=
One web page is having link to other page, that is a page is referring to other page. Google uses ''Page Rank'' algorithm to choose which page should be displayed first.

If we have network, connections as below:
[[File:rank0.png]]

We want to pick a leader out of all these nodes. How to pick a leader?  Why to elect a leader? It is because we want to find the super power of available nodes.                     
[[File:rank1.png]]

For example, the application wherein, we want to find the most impressive person of the  few ones. How to decide it? As shown in below figure, each node will communicate with other, randomly, we implement the count for each node, how many times, the particular node is being visited.
[[File:rank2.png]]

[[#Top]]

As shown in following, figure, all nodes are visited and each node is marked with the 
number i.e.number of times the node is visited.
[[File:rank3.png]]

The node with the maximum count, becomes the winner. Here, node with 120 count in figure 
below, is the winner. i.e. The person with 120 count in the figure is the most impressive 
person in the community being considered.
[[File:rank4.png]]

[[File:rank5.png]]

[[File:rank6.png]]

[[File:rank7.png]]


[[File:rank8.png]]

[[#Top]]

Google selects the page rank in this matter. Each web page is connected to other web page with web links. To a page, maximum link is there, that will be put on top results in Google search results.
[[File:rank9.png]]

Google uses web crawler. The crawler takes the random walk on the www network and rank the web sites.
[[File:rank10.png]]

This way Google ranks the pages and displays search results, according to page rank.
[[File:rank11.png]]

e.g.we search for ''mysore city''. Google has 10,000 results. But it displays the results in the sequence of page rank of search results, As shown in figure below.
[[File:mysore.png]]

[[#Top]]

==Page rank algorithm ==
As shown in beautiful figure below, few nodes combinely selected one as the leader, then that leader and other nodes, have selected         other as a leader. This way, finally the final leader is elected.
[[File:rank12.png|600px]]


[[File:graph00.png|600px]]


[[File:graph01.png|600px]]

[[#Top]]

==Gragh Drawing Program1==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
nx.barbell_graph(4,2)
G=nx.barbell_graph(4,2)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:Graph003.png|600px]]

[[#Top]]

==Gragh Drawing Program2==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
nx.barbell_graph(4,3)
G=nx.barbell_graph(4,3)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:Graph004.png|600px]]

[[#Top]]

==Gragh Drawing Program3==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
nx.barbell_graph(5,3)
G=nx.barbell_graph(5,3)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:Graph005.png|600px]]

[[#Top]]

==Complete Graph==
Complete graph is a graph, wherein, each node is connected to each other nodes in a graph.

&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.complete_graph(4)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:

[[File:completegraph001.png|600px]]

[[#Top]]

==Cycle graph==

&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.cycle_graph(5)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:

[[File:cyclegraph1.png|600px]]

[[#Top]]

==Ladder graph==

&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.ladder_graph(5)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:

[[File:laddergraph.png|600px]]

[[#Top]]

==Path Graph==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.path_graph(6)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:

[[File:pathgraph.png|600px]]

[[#Top]]

==Star Graph==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.star_graph(5)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:stargraph.png|600px]]

[[#Top]]

==Star Graph of 4 Nodes==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.star_graph(4)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:stargraph4points.png|600px]]

==Wheel Graph==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.wheel_graph(4)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:wheelgraph.png|600px]]

[[#Top]]

==Wheel Graph of 5 nodes==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.wheel_graph(5)
nx.draw(G)
plt.show()

&lt;/pre&gt;

Output:

[[File:wheelgraph5nodes.png|600px]]

[[#Top]]

==Wheel Graph of 6 nodes==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.wheel_graph(6)
nx.draw(G)
plt.show()

&lt;/pre&gt;

Output:

[[File:wheelgraph6nodes.png|600px]]

[[#Top]]

==Random Graph==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.gnp_random_graph(5,0.5)
nx.draw(G)
plt.show()

&lt;/pre&gt;

Output:

[[File:randomgraph1.png|600px]]


Running the same above program, we will get different output, as shown below, as it is random graph.

[[File:randomgraph2.png|600px]]

[[#Top]]

==Page Rank Algorithm Implementation==

===Random Directed Graph===
&lt;pre&gt;
import networkx as nx
import random
import matplotlib.pyplot as plt

#Draw random directed graph
G=nx.gnp_random_graph(10,0.5,directed=True)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output: 

[[File:randomDirectedGraph.png|600px]]


===Random Directed Graph with Labels===
&lt;pre&gt;
import networkx as nx
import random
import matplotlib.pyplot as plt

#Draw random directed graph 
G=nx.gnp_random_graph(10,0.5,directed=True)
#Give label numbering to nodes
nx.draw(G,with_labels=True)
plt.show()

&lt;/pre&gt;

Output:

[[File:randomDirectedGraphwithLabels.png|600px]]


[[#Top]]

===Page Rank Coding===
&lt;pre&gt;
import networkx as nx
import random
import matplotlib.pyplot as plt
import operator

#Draw random directed graph 
G=nx.gnp_random_graph(10,0.5,directed=True)
#Give label numbering to nodes
nx.draw(G,with_labels=True)
plt.show()

#x is the random source node
x=random.choice([i for i in range(G.number_of_nodes())])

#dictionary to maintain counter
dictCounter={}
#initialize the counter of each node as 0
for i in range(G.number_of_nodes()):
    dictCounter[i]=0
dictCounter[x]=dictCounter[x]+1

for i in range(10000):
    listn=list(G.neighbors(x))
    #if x is a sink node, we need to select random node for random walk
    #, else select random neighbor node

    if(len(listn)==0):
        x=random.choice([i for i in range(G.number_of_nodes())])
        dictCounter[x]=dictCounter[x]+1
    else:
        #choose a node randomly from neightbors
        x=random.choice(listn)
        dictCounter[x]=dictCounter[x]+1

p=nx.pagerank(G)
sorted_p=sorted(p.items(),key=operator.itemgetter(1))
sorted_rw=sorted(dictCounter.items(),key=operator.itemgetter(1))                        
#print(p)
#print(dictCounter)

print(sorted_p)
print(sorted_rw)

&lt;/pre&gt;

Output:

&lt;pre&gt;
[(2, 0.07139920240302768), (5, 0.07464882519777695), (3, 0.08527469366832419), 
(6, 0.08665188647066119), (4, 0.0987815549542114), (0, 0.10858415997562518), 
(9, 0.110369696943925), (8, 0.11456211367660116), (1, 0.11682018308814024), 
(7, 0.13290768362170685)]
[(2, 4), (5, 7), (8, 7), (6, 8), (3, 11), (7, 11), (1, 12), (4, 12), (0, 13), (9, 16)]
&lt;/pre&gt;

[[#Top]]

=Email communication Network=
==Page rank :page distribution method==
===Revision: Graph===
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
G=nx.cycle_graph(4)
labels={0:&quot;Bangluru&quot;,1:&quot;Gawhati&quot;,2:&quot;Kolkata&quot;,3:&quot;Chennai&quot;}
nx.draw(G,with_labels=True,labels=labels)
plt.show()
&lt;/pre&gt;

Output:

[[File:revGRAPH.png]]


===Directed Graph  Example===

[[File:directedGraphExample.png|600px]]

&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
G=nx.gnp_random_graph(4,.5,directed=True)
labels={0:&quot;Bangluru&quot;,1:&quot;Gawhati&quot;,2:&quot;Kolkata&quot;,3:&quot;Chennai&quot;}
nx.draw(G,with_labels=True,labels=labels)
plt.show()

&lt;/pre&gt;

Output:
[[File:directedg.png|600px]]


[[#Top]]


==Bidirectional with Parallel and self loops==
==Bidirectional with Parallel edges==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
G=nx.MultiDiGraph()

G.add_node(1)
G.add_node(2)
G.add_node(3)
G.add_node(4)

G.add_path([1,2,3,4,1])
G.add_edge(1,4)
nx.draw(G,with_labels=True)
plt.show()
&lt;/pre&gt;

Output: 

[[File:bidirectionalg.png]]

==Bidirectional with Self loops==
It doesn't show as graph. It is not taught, I did it myself.(Ms. Ami TUSHARKANT CHOKSI)
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
G=nx.MultiDiGraph()

G.add_node(1)
G.add_node(2)
G.add_node(3)
G.add_node(4)

G.add_path([1,2,3,4,1])
G.add_edge(1,4)
G.add_edge(1,1)
nx.draw(G,with_labels=True)
d=G.selfloop_edges()
print(d)
plt.show()

&lt;/pre&gt;

#Output: &lt;generator object selfloop_edges.&lt;locals&gt;.&lt;genexpr&gt; at 0x0B790150&gt;
#It shows self loop is there in the graph


==Directed Undirected Graph==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

#undirected graph
U=nx.Graph()

#directed graph
G=nx.DiGraph()

#nodes in graph
print(G.nodes())#Output: []
G.add_nodes_from([i for i in range(5)])
print(G.nodes())#Output: [0, 1, 2, 3, 4]

#edges
print(G.out_edges())#Output:[]

print(G.in_edges())#Output:[]

G.add_edge(1,2)
print(G.edges())#Output: [(1, 2)]
print(G.in_edges())#Output: [(1, 2)]
print(G.out_edges())#Output: [(1, 2)]

G.add_edge(0,3)
G.add_edge(2,3)
G.add_edge(3,2)
G.add_edge(3,4)
G.add_edge(4,1)
print(G.out_edges(2))#Output: [(2, 3)]
print(G.out_edges(3))#Output:[(3, 2), (3, 4)]
print(G.in_edges(3))#Output:[(0, 3), (2, 3)]

&lt;/pre&gt;

[[#Top]]

==Points Distribution Method==
&lt;ul&gt;
&lt;li&gt;Initially, all nodes are given equal points&lt;/li&gt;
&lt;li&gt;Rule&lt;/li&gt;
&lt;ul&gt;
&lt;li&gt;Share whatever you have equally with your neighbors&lt;/li&gt;
&lt;/ul&gt;
&lt;li&gt;FOR NODE B:Neighbors: C&lt;/li&gt;
&lt;li&gt;Give all of its points to C&lt;/li&gt;
&lt;li&gt;FOR NODE C:Neighbors: A&lt;/li&gt;
&lt;li&gt;Give all of its points to A&lt;/li&gt;
&lt;li&gt;new point of A=old points of C&lt;/li&gt;
&lt;li&gt;new point of B=(1/2)*old points of A&lt;/li&gt;
&lt;li&gt;new point of C=(1/2)*old points of A+old points of B&lt;/li&gt;
&lt;/ul&gt;

===In Excel, Implementation===
[[File:grEx1.png|600px]]

[[File:grEx2.png|600px]]

[[File:grEx3.png|600px]]

=Collatz Conjecture=
Taught by Sudarshan sir and Amit sir, and Edited by Ms. Ami Tusharkant Choksi

If a number is even, divide it by ''2'', if it is odd, make multiply it by ''3'' and add ''1'', till you get ''1''. This simple problem is called, ''Collatz Conjecture''. 

[[File:collatz1.png|600px]]

[[File:collatz2.png|600px]]

[[File:collatz3.png|600px]]

[[File:collatz4.png|600px]]

[[File:collatz5.png|600px]]

Number is bigger doesn't mean more iterations are required. One can notice, from the output of the following program. 



The program to implement the same is as follows:
==Program==
&lt;pre&gt;
#collatz conjecture
#if num is even, divide it by 2
#if num is odd, new number is equal to 3n+1


def checkNum(num):
    iterations=1
    while(num!=1):
        if(num%2==0):
            num=int(num/2)            
        else:
            num = 3*num+1
        iterations+=1
        

    print(num,iterations)


#checkNum(12)#Output: 1 10
#checkNum(26)#Output: 1 11
checkNum(2000)#Output: 1 113
&lt;/pre&gt;

&lt;pre&gt;

#recursive approach

def checkNum(num):
    if num==1:
        return 1
    elif num%2==0:
        return checkNum(num/2)+1
    else:
        return checkNum(3*num +1)+1


output:
checkNum(26)
Out[27]: 11
checkNum(5000)
Out[28]: 29
&lt;/pre&gt;

==Program adding statement to print all iterations==
&lt;pre&gt;
def checkNum(num):
    iterations=1
    while(num!=1):
        if(num%2==0):
            num=int(num/2)            
        else:
            num = 3*num+1
        print(iterations,&quot;:&quot;,num)
        iterations+=1
        

    print(num,iterations)
&lt;/pre&gt;
==Output==
===For checkNum(2000)===
&lt;pre&gt;
1 : 1000
2 : 500
3 : 250
4 : 125
5 : 376
6 : 188
7 : 94
8 : 47
9 : 142
10 : 71
11 : 214
12 : 107
13 : 322
14 : 161
15 : 484
16 : 242
17 : 121
18 : 364
19 : 182
20 : 91
21 : 274
22 : 137
23 : 412
24 : 206
25 : 103
26 : 310
27 : 155
28 : 466
29 : 233
30 : 700
31 : 350
32 : 175
33 : 526
34 : 263
35 : 790
36 : 395
37 : 1186
38 : 593
39 : 1780
40 : 890
41 : 445
42 : 1336
43 : 668
44 : 334
45 : 167
46 : 502
47 : 251
48 : 754
49 : 377
50 : 1132
51 : 566
52 : 283
53 : 850
54 : 425
55 : 1276
56 : 638
57 : 319
58 : 958
59 : 479
60 : 1438
61 : 719
62 : 2158
63 : 1079
64 : 3238
65 : 1619
66 : 4858
67 : 2429
68 : 7288
69 : 3644
70 : 1822
71 : 911
72 : 2734
73 : 1367
74 : 4102
75 : 2051
76 : 6154
77 : 3077
78 : 9232
79 : 4616
80 : 2308
81 : 1154
82 : 577
83 : 1732
84 : 866
85 : 433
86 : 1300
87 : 650
88 : 325
89 : 976
90 : 488
91 : 244
92 : 122
93 : 61
94 : 184
95 : 92
96 : 46
97 : 23
98 : 70
99 : 35
100 : 106
101 : 53
102 : 160
103 : 80
104 : 40
105 : 20
106 : 10
107 : 5
108 : 16
109 : 8
110 : 4
111 : 2
112 : 1
1 113
&lt;/pre&gt;

===For checkNum(5000)===
&lt;pre&gt;
1 : 2500
2 : 1250
3 : 625
4 : 1876
5 : 938
6 : 469
7 : 1408
8 : 704
9 : 352
10 : 176
11 : 88
12 : 44
13 : 22
14 : 11
15 : 34
16 : 17
17 : 52
18 : 26
19 : 13
20 : 40
21 : 20
22 : 10
23 : 5
24 : 16
25 : 8
26 : 4
27 : 2
28 : 1
1 29
&lt;/pre&gt;
===For checkNum(25000000)===
&lt;pre&gt;
1 : 12500000
2 : 6250000
3 : 3125000
4 : 1562500
5 : 781250
6 : 390625
7 : 1171876
8 : 585938
9 : 292969
10 : 878908
11 : 439454
12 : 219727
13 : 659182
14 : 329591
15 : 988774
16 : 494387
17 : 1483162
18 : 741581
19 : 2224744
20 : 1112372
21 : 556186
22 : 278093
23 : 834280
24 : 417140
25 : 208570
26 : 104285
27 : 312856
28 : 156428
29 : 78214
30 : 39107
31 : 117322
32 : 58661
33 : 175984
34 : 87992
35 : 43996
36 : 21998
37 : 10999
38 : 32998
39 : 16499
40 : 49498
41 : 24749
42 : 74248
43 : 37124
44 : 18562
45 : 9281
46 : 27844
47 : 13922
48 : 6961
49 : 20884
50 : 10442
51 : 5221
52 : 15664
53 : 7832
54 : 3916
55 : 1958
56 : 979
57 : 2938
58 : 1469
59 : 4408
60 : 2204
61 : 1102
62 : 551
63 : 1654
64 : 827
65 : 2482
66 : 1241
67 : 3724
68 : 1862
69 : 931
70 : 2794
71 : 1397
72 : 4192
73 : 2096
74 : 1048
75 : 524
76 : 262
77 : 131
78 : 394
79 : 197
80 : 592
81 : 296
82 : 148
83 : 74
84 : 37
85 : 112
86 : 56
87 : 28
88 : 14
89 : 7
90 : 22
91 : 11
92 : 34
93 : 17
94 : 52
95 : 26
96 : 13
97 : 40
98 : 20
99 : 10
100 : 5
101 : 16
102 : 8
103 : 4
104 : 2
105 : 1
1 106
&lt;/pre&gt;

Happy Life ahead!!!

[[File:end1.png]]</text>
      <sha1>mwklk0bpj721kgac7fs2mprgbuk605v</sha1>
    </revision>
    <revision>
      <id>4480</id>
      <parentid>4476</parentid>
      <timestamp>2018-10-17T07:46:12Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* In Excel, Implementation */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="14198">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_12 Contributors of this page]

=Page Rank - How does Google Work=
One web page is having link to other page, that is a page is referring to other page. Google uses ''Page Rank'' algorithm to choose which page should be displayed first.

If we have network, connections as below:
[[File:rank0.png]]

We want to pick a leader out of all these nodes. How to pick a leader?  Why to elect a leader? It is because we want to find the super power of available nodes.                     
[[File:rank1.png]]

For example, the application wherein, we want to find the most impressive person of the  few ones. How to decide it? As shown in below figure, each node will communicate with other, randomly, we implement the count for each node, how many times, the particular node is being visited.
[[File:rank2.png]]

[[#Top]]

As shown in following, figure, all nodes are visited and each node is marked with the 
number i.e.number of times the node is visited.
[[File:rank3.png]]

The node with the maximum count, becomes the winner. Here, node with 120 count in figure 
below, is the winner. i.e. The person with 120 count in the figure is the most impressive 
person in the community being considered.
[[File:rank4.png]]

[[File:rank5.png]]

[[File:rank6.png]]

[[File:rank7.png]]


[[File:rank8.png]]

[[#Top]]

Google selects the page rank in this matter. Each web page is connected to other web page with web links. To a page, maximum link is there, that will be put on top results in Google search results.
[[File:rank9.png]]

Google uses web crawler. The crawler takes the random walk on the www network and rank the web sites.
[[File:rank10.png]]

This way Google ranks the pages and displays search results, according to page rank.
[[File:rank11.png]]

e.g.we search for ''mysore city''. Google has 10,000 results. But it displays the results in the sequence of page rank of search results, As shown in figure below.
[[File:mysore.png]]

[[#Top]]

==Page rank algorithm ==
As shown in beautiful figure below, few nodes combinely selected one as the leader, then that leader and other nodes, have selected         other as a leader. This way, finally the final leader is elected.
[[File:rank12.png|600px]]


[[File:graph00.png|600px]]


[[File:graph01.png|600px]]

[[#Top]]

==Gragh Drawing Program1==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
nx.barbell_graph(4,2)
G=nx.barbell_graph(4,2)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:Graph003.png|600px]]

[[#Top]]

==Gragh Drawing Program2==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
nx.barbell_graph(4,3)
G=nx.barbell_graph(4,3)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:Graph004.png|600px]]

[[#Top]]

==Gragh Drawing Program3==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
nx.barbell_graph(5,3)
G=nx.barbell_graph(5,3)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:Graph005.png|600px]]

[[#Top]]

==Complete Graph==
Complete graph is a graph, wherein, each node is connected to each other nodes in a graph.

&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.complete_graph(4)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:

[[File:completegraph001.png|600px]]

[[#Top]]

==Cycle graph==

&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.cycle_graph(5)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:

[[File:cyclegraph1.png|600px]]

[[#Top]]

==Ladder graph==

&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.ladder_graph(5)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:

[[File:laddergraph.png|600px]]

[[#Top]]

==Path Graph==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.path_graph(6)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:

[[File:pathgraph.png|600px]]

[[#Top]]

==Star Graph==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.star_graph(5)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:stargraph.png|600px]]

[[#Top]]

==Star Graph of 4 Nodes==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.star_graph(4)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:stargraph4points.png|600px]]

==Wheel Graph==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.wheel_graph(4)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:wheelgraph.png|600px]]

[[#Top]]

==Wheel Graph of 5 nodes==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.wheel_graph(5)
nx.draw(G)
plt.show()

&lt;/pre&gt;

Output:

[[File:wheelgraph5nodes.png|600px]]

[[#Top]]

==Wheel Graph of 6 nodes==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.wheel_graph(6)
nx.draw(G)
plt.show()

&lt;/pre&gt;

Output:

[[File:wheelgraph6nodes.png|600px]]

[[#Top]]

==Random Graph==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.gnp_random_graph(5,0.5)
nx.draw(G)
plt.show()

&lt;/pre&gt;

Output:

[[File:randomgraph1.png|600px]]


Running the same above program, we will get different output, as shown below, as it is random graph.

[[File:randomgraph2.png|600px]]

[[#Top]]

==Page Rank Algorithm Implementation==

===Random Directed Graph===
&lt;pre&gt;
import networkx as nx
import random
import matplotlib.pyplot as plt

#Draw random directed graph
G=nx.gnp_random_graph(10,0.5,directed=True)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output: 

[[File:randomDirectedGraph.png|600px]]


===Random Directed Graph with Labels===
&lt;pre&gt;
import networkx as nx
import random
import matplotlib.pyplot as plt

#Draw random directed graph 
G=nx.gnp_random_graph(10,0.5,directed=True)
#Give label numbering to nodes
nx.draw(G,with_labels=True)
plt.show()

&lt;/pre&gt;

Output:

[[File:randomDirectedGraphwithLabels.png|600px]]


[[#Top]]

===Page Rank Coding===
&lt;pre&gt;
import networkx as nx
import random
import matplotlib.pyplot as plt
import operator

#Draw random directed graph 
G=nx.gnp_random_graph(10,0.5,directed=True)
#Give label numbering to nodes
nx.draw(G,with_labels=True)
plt.show()

#x is the random source node
x=random.choice([i for i in range(G.number_of_nodes())])

#dictionary to maintain counter
dictCounter={}
#initialize the counter of each node as 0
for i in range(G.number_of_nodes()):
    dictCounter[i]=0
dictCounter[x]=dictCounter[x]+1

for i in range(10000):
    listn=list(G.neighbors(x))
    #if x is a sink node, we need to select random node for random walk
    #, else select random neighbor node

    if(len(listn)==0):
        x=random.choice([i for i in range(G.number_of_nodes())])
        dictCounter[x]=dictCounter[x]+1
    else:
        #choose a node randomly from neightbors
        x=random.choice(listn)
        dictCounter[x]=dictCounter[x]+1

p=nx.pagerank(G)
sorted_p=sorted(p.items(),key=operator.itemgetter(1))
sorted_rw=sorted(dictCounter.items(),key=operator.itemgetter(1))                        
#print(p)
#print(dictCounter)

print(sorted_p)
print(sorted_rw)

&lt;/pre&gt;

Output:

&lt;pre&gt;
[(2, 0.07139920240302768), (5, 0.07464882519777695), (3, 0.08527469366832419), 
(6, 0.08665188647066119), (4, 0.0987815549542114), (0, 0.10858415997562518), 
(9, 0.110369696943925), (8, 0.11456211367660116), (1, 0.11682018308814024), 
(7, 0.13290768362170685)]
[(2, 4), (5, 7), (8, 7), (6, 8), (3, 11), (7, 11), (1, 12), (4, 12), (0, 13), (9, 16)]
&lt;/pre&gt;

[[#Top]]

=Email communication Network=
==Page rank :page distribution method==
===Revision: Graph===
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
G=nx.cycle_graph(4)
labels={0:&quot;Bangluru&quot;,1:&quot;Gawhati&quot;,2:&quot;Kolkata&quot;,3:&quot;Chennai&quot;}
nx.draw(G,with_labels=True,labels=labels)
plt.show()
&lt;/pre&gt;

Output:

[[File:revGRAPH.png]]


===Directed Graph  Example===

[[File:directedGraphExample.png|600px]]

&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
G=nx.gnp_random_graph(4,.5,directed=True)
labels={0:&quot;Bangluru&quot;,1:&quot;Gawhati&quot;,2:&quot;Kolkata&quot;,3:&quot;Chennai&quot;}
nx.draw(G,with_labels=True,labels=labels)
plt.show()

&lt;/pre&gt;

Output:
[[File:directedg.png|600px]]


[[#Top]]


==Bidirectional with Parallel and self loops==
==Bidirectional with Parallel edges==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
G=nx.MultiDiGraph()

G.add_node(1)
G.add_node(2)
G.add_node(3)
G.add_node(4)

G.add_path([1,2,3,4,1])
G.add_edge(1,4)
nx.draw(G,with_labels=True)
plt.show()
&lt;/pre&gt;

Output: 

[[File:bidirectionalg.png]]

==Bidirectional with Self loops==
It doesn't show as graph. It is not taught, I did it myself.(Ms. Ami TUSHARKANT CHOKSI)
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
G=nx.MultiDiGraph()

G.add_node(1)
G.add_node(2)
G.add_node(3)
G.add_node(4)

G.add_path([1,2,3,4,1])
G.add_edge(1,4)
G.add_edge(1,1)
nx.draw(G,with_labels=True)
d=G.selfloop_edges()
print(d)
plt.show()

&lt;/pre&gt;

#Output: &lt;generator object selfloop_edges.&lt;locals&gt;.&lt;genexpr&gt; at 0x0B790150&gt;
#It shows self loop is there in the graph


==Directed Undirected Graph==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

#undirected graph
U=nx.Graph()

#directed graph
G=nx.DiGraph()

#nodes in graph
print(G.nodes())#Output: []
G.add_nodes_from([i for i in range(5)])
print(G.nodes())#Output: [0, 1, 2, 3, 4]

#edges
print(G.out_edges())#Output:[]

print(G.in_edges())#Output:[]

G.add_edge(1,2)
print(G.edges())#Output: [(1, 2)]
print(G.in_edges())#Output: [(1, 2)]
print(G.out_edges())#Output: [(1, 2)]

G.add_edge(0,3)
G.add_edge(2,3)
G.add_edge(3,2)
G.add_edge(3,4)
G.add_edge(4,1)
print(G.out_edges(2))#Output: [(2, 3)]
print(G.out_edges(3))#Output:[(3, 2), (3, 4)]
print(G.in_edges(3))#Output:[(0, 3), (2, 3)]

&lt;/pre&gt;

[[#Top]]

==Points Distribution Method==
&lt;ul&gt;
&lt;li&gt;Initially, all nodes are given equal points&lt;/li&gt;
&lt;li&gt;Rule&lt;/li&gt;
&lt;ul&gt;
&lt;li&gt;Share whatever you have equally with your neighbors&lt;/li&gt;
&lt;/ul&gt;
&lt;li&gt;FOR NODE B:Neighbors: C&lt;/li&gt;
&lt;li&gt;Give all of its points to C&lt;/li&gt;
&lt;li&gt;FOR NODE C:Neighbors: A&lt;/li&gt;
&lt;li&gt;Give all of its points to A&lt;/li&gt;
&lt;li&gt;new point of A=old points of C&lt;/li&gt;
&lt;li&gt;new point of B=(1/2)*old points of A&lt;/li&gt;
&lt;li&gt;new point of C=(1/2)*old points of A+old points of B&lt;/li&gt;
&lt;/ul&gt;

===In Excel, Implementation===
[[File:grEx1.png|600px]]

[[File:grEx2.png|600px]]

[[File:grEx3.png|600px]]


After some nodes, points becomes constant, as shown below.

=Collatz Conjecture=
Taught by Sudarshan sir and Amit sir, and Edited by Ms. Ami Tusharkant Choksi

If a number is even, divide it by ''2'', if it is odd, make multiply it by ''3'' and add ''1'', till you get ''1''. This simple problem is called, ''Collatz Conjecture''. 

[[File:collatz1.png|600px]]

[[File:collatz2.png|600px]]

[[File:collatz3.png|600px]]

[[File:collatz4.png|600px]]

[[File:collatz5.png|600px]]

Number is bigger doesn't mean more iterations are required. One can notice, from the output of the following program. 



The program to implement the same is as follows:
==Program==
&lt;pre&gt;
#collatz conjecture
#if num is even, divide it by 2
#if num is odd, new number is equal to 3n+1


def checkNum(num):
    iterations=1
    while(num!=1):
        if(num%2==0):
            num=int(num/2)            
        else:
            num = 3*num+1
        iterations+=1
        

    print(num,iterations)


#checkNum(12)#Output: 1 10
#checkNum(26)#Output: 1 11
checkNum(2000)#Output: 1 113
&lt;/pre&gt;

&lt;pre&gt;

#recursive approach

def checkNum(num):
    if num==1:
        return 1
    elif num%2==0:
        return checkNum(num/2)+1
    else:
        return checkNum(3*num +1)+1


output:
checkNum(26)
Out[27]: 11
checkNum(5000)
Out[28]: 29
&lt;/pre&gt;

==Program adding statement to print all iterations==
&lt;pre&gt;
def checkNum(num):
    iterations=1
    while(num!=1):
        if(num%2==0):
            num=int(num/2)            
        else:
            num = 3*num+1
        print(iterations,&quot;:&quot;,num)
        iterations+=1
        

    print(num,iterations)
&lt;/pre&gt;
==Output==
===For checkNum(2000)===
&lt;pre&gt;
1 : 1000
2 : 500
3 : 250
4 : 125
5 : 376
6 : 188
7 : 94
8 : 47
9 : 142
10 : 71
11 : 214
12 : 107
13 : 322
14 : 161
15 : 484
16 : 242
17 : 121
18 : 364
19 : 182
20 : 91
21 : 274
22 : 137
23 : 412
24 : 206
25 : 103
26 : 310
27 : 155
28 : 466
29 : 233
30 : 700
31 : 350
32 : 175
33 : 526
34 : 263
35 : 790
36 : 395
37 : 1186
38 : 593
39 : 1780
40 : 890
41 : 445
42 : 1336
43 : 668
44 : 334
45 : 167
46 : 502
47 : 251
48 : 754
49 : 377
50 : 1132
51 : 566
52 : 283
53 : 850
54 : 425
55 : 1276
56 : 638
57 : 319
58 : 958
59 : 479
60 : 1438
61 : 719
62 : 2158
63 : 1079
64 : 3238
65 : 1619
66 : 4858
67 : 2429
68 : 7288
69 : 3644
70 : 1822
71 : 911
72 : 2734
73 : 1367
74 : 4102
75 : 2051
76 : 6154
77 : 3077
78 : 9232
79 : 4616
80 : 2308
81 : 1154
82 : 577
83 : 1732
84 : 866
85 : 433
86 : 1300
87 : 650
88 : 325
89 : 976
90 : 488
91 : 244
92 : 122
93 : 61
94 : 184
95 : 92
96 : 46
97 : 23
98 : 70
99 : 35
100 : 106
101 : 53
102 : 160
103 : 80
104 : 40
105 : 20
106 : 10
107 : 5
108 : 16
109 : 8
110 : 4
111 : 2
112 : 1
1 113
&lt;/pre&gt;

===For checkNum(5000)===
&lt;pre&gt;
1 : 2500
2 : 1250
3 : 625
4 : 1876
5 : 938
6 : 469
7 : 1408
8 : 704
9 : 352
10 : 176
11 : 88
12 : 44
13 : 22
14 : 11
15 : 34
16 : 17
17 : 52
18 : 26
19 : 13
20 : 40
21 : 20
22 : 10
23 : 5
24 : 16
25 : 8
26 : 4
27 : 2
28 : 1
1 29
&lt;/pre&gt;
===For checkNum(25000000)===
&lt;pre&gt;
1 : 12500000
2 : 6250000
3 : 3125000
4 : 1562500
5 : 781250
6 : 390625
7 : 1171876
8 : 585938
9 : 292969
10 : 878908
11 : 439454
12 : 219727
13 : 659182
14 : 329591
15 : 988774
16 : 494387
17 : 1483162
18 : 741581
19 : 2224744
20 : 1112372
21 : 556186
22 : 278093
23 : 834280
24 : 417140
25 : 208570
26 : 104285
27 : 312856
28 : 156428
29 : 78214
30 : 39107
31 : 117322
32 : 58661
33 : 175984
34 : 87992
35 : 43996
36 : 21998
37 : 10999
38 : 32998
39 : 16499
40 : 49498
41 : 24749
42 : 74248
43 : 37124
44 : 18562
45 : 9281
46 : 27844
47 : 13922
48 : 6961
49 : 20884
50 : 10442
51 : 5221
52 : 15664
53 : 7832
54 : 3916
55 : 1958
56 : 979
57 : 2938
58 : 1469
59 : 4408
60 : 2204
61 : 1102
62 : 551
63 : 1654
64 : 827
65 : 2482
66 : 1241
67 : 3724
68 : 1862
69 : 931
70 : 2794
71 : 1397
72 : 4192
73 : 2096
74 : 1048
75 : 524
76 : 262
77 : 131
78 : 394
79 : 197
80 : 592
81 : 296
82 : 148
83 : 74
84 : 37
85 : 112
86 : 56
87 : 28
88 : 14
89 : 7
90 : 22
91 : 11
92 : 34
93 : 17
94 : 52
95 : 26
96 : 13
97 : 40
98 : 20
99 : 10
100 : 5
101 : 16
102 : 8
103 : 4
104 : 2
105 : 1
1 106
&lt;/pre&gt;

Happy Life ahead!!!

[[File:end1.png]]</text>
      <sha1>ltxbxfg8zjbdptbnhhrxx3o6jm5lw4n</sha1>
    </revision>
    <revision>
      <id>4481</id>
      <parentid>4480</parentid>
      <timestamp>2018-10-17T07:50:19Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* Points Distribution Method */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="52154">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_12 Contributors of this page]

=Page Rank - How does Google Work=
One web page is having link to other page, that is a page is referring to other page. Google uses ''Page Rank'' algorithm to choose which page should be displayed first.

If we have network, connections as below:
[[File:rank0.png]]

We want to pick a leader out of all these nodes. How to pick a leader?  Why to elect a leader? It is because we want to find the super power of available nodes.                     
[[File:rank1.png]]

For example, the application wherein, we want to find the most impressive person of the  few ones. How to decide it? As shown in below figure, each node will communicate with other, randomly, we implement the count for each node, how many times, the particular node is being visited.
[[File:rank2.png]]

[[#Top]]

As shown in following, figure, all nodes are visited and each node is marked with the 
number i.e.number of times the node is visited.
[[File:rank3.png]]

The node with the maximum count, becomes the winner. Here, node with 120 count in figure 
below, is the winner. i.e. The person with 120 count in the figure is the most impressive 
person in the community being considered.
[[File:rank4.png]]

[[File:rank5.png]]

[[File:rank6.png]]

[[File:rank7.png]]


[[File:rank8.png]]

[[#Top]]

Google selects the page rank in this matter. Each web page is connected to other web page with web links. To a page, maximum link is there, that will be put on top results in Google search results.
[[File:rank9.png]]

Google uses web crawler. The crawler takes the random walk on the www network and rank the web sites.
[[File:rank10.png]]

This way Google ranks the pages and displays search results, according to page rank.
[[File:rank11.png]]

e.g.we search for ''mysore city''. Google has 10,000 results. But it displays the results in the sequence of page rank of search results, As shown in figure below.
[[File:mysore.png]]

[[#Top]]

==Page rank algorithm ==
As shown in beautiful figure below, few nodes combinely selected one as the leader, then that leader and other nodes, have selected         other as a leader. This way, finally the final leader is elected.
[[File:rank12.png|600px]]


[[File:graph00.png|600px]]


[[File:graph01.png|600px]]

[[#Top]]

==Gragh Drawing Program1==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
nx.barbell_graph(4,2)
G=nx.barbell_graph(4,2)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:Graph003.png|600px]]

[[#Top]]

==Gragh Drawing Program2==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
nx.barbell_graph(4,3)
G=nx.barbell_graph(4,3)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:Graph004.png|600px]]

[[#Top]]

==Gragh Drawing Program3==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
nx.barbell_graph(5,3)
G=nx.barbell_graph(5,3)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:Graph005.png|600px]]

[[#Top]]

==Complete Graph==
Complete graph is a graph, wherein, each node is connected to each other nodes in a graph.

&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.complete_graph(4)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:

[[File:completegraph001.png|600px]]

[[#Top]]

==Cycle graph==

&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.cycle_graph(5)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:

[[File:cyclegraph1.png|600px]]

[[#Top]]

==Ladder graph==

&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.ladder_graph(5)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:

[[File:laddergraph.png|600px]]

[[#Top]]

==Path Graph==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.path_graph(6)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:

[[File:pathgraph.png|600px]]

[[#Top]]

==Star Graph==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.star_graph(5)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:stargraph.png|600px]]

[[#Top]]

==Star Graph of 4 Nodes==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.star_graph(4)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:stargraph4points.png|600px]]

==Wheel Graph==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.wheel_graph(4)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:wheelgraph.png|600px]]

[[#Top]]

==Wheel Graph of 5 nodes==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.wheel_graph(5)
nx.draw(G)
plt.show()

&lt;/pre&gt;

Output:

[[File:wheelgraph5nodes.png|600px]]

[[#Top]]

==Wheel Graph of 6 nodes==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.wheel_graph(6)
nx.draw(G)
plt.show()

&lt;/pre&gt;

Output:

[[File:wheelgraph6nodes.png|600px]]

[[#Top]]

==Random Graph==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.gnp_random_graph(5,0.5)
nx.draw(G)
plt.show()

&lt;/pre&gt;

Output:

[[File:randomgraph1.png|600px]]


Running the same above program, we will get different output, as shown below, as it is random graph.

[[File:randomgraph2.png|600px]]

[[#Top]]

==Page Rank Algorithm Implementation==

===Random Directed Graph===
&lt;pre&gt;
import networkx as nx
import random
import matplotlib.pyplot as plt

#Draw random directed graph
G=nx.gnp_random_graph(10,0.5,directed=True)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output: 

[[File:randomDirectedGraph.png|600px]]


===Random Directed Graph with Labels===
&lt;pre&gt;
import networkx as nx
import random
import matplotlib.pyplot as plt

#Draw random directed graph 
G=nx.gnp_random_graph(10,0.5,directed=True)
#Give label numbering to nodes
nx.draw(G,with_labels=True)
plt.show()

&lt;/pre&gt;

Output:

[[File:randomDirectedGraphwithLabels.png|600px]]


[[#Top]]

===Page Rank Coding===
&lt;pre&gt;
import networkx as nx
import random
import matplotlib.pyplot as plt
import operator

#Draw random directed graph 
G=nx.gnp_random_graph(10,0.5,directed=True)
#Give label numbering to nodes
nx.draw(G,with_labels=True)
plt.show()

#x is the random source node
x=random.choice([i for i in range(G.number_of_nodes())])

#dictionary to maintain counter
dictCounter={}
#initialize the counter of each node as 0
for i in range(G.number_of_nodes()):
    dictCounter[i]=0
dictCounter[x]=dictCounter[x]+1

for i in range(10000):
    listn=list(G.neighbors(x))
    #if x is a sink node, we need to select random node for random walk
    #, else select random neighbor node

    if(len(listn)==0):
        x=random.choice([i for i in range(G.number_of_nodes())])
        dictCounter[x]=dictCounter[x]+1
    else:
        #choose a node randomly from neightbors
        x=random.choice(listn)
        dictCounter[x]=dictCounter[x]+1

p=nx.pagerank(G)
sorted_p=sorted(p.items(),key=operator.itemgetter(1))
sorted_rw=sorted(dictCounter.items(),key=operator.itemgetter(1))                        
#print(p)
#print(dictCounter)

print(sorted_p)
print(sorted_rw)

&lt;/pre&gt;

Output:

&lt;pre&gt;
[(2, 0.07139920240302768), (5, 0.07464882519777695), (3, 0.08527469366832419), 
(6, 0.08665188647066119), (4, 0.0987815549542114), (0, 0.10858415997562518), 
(9, 0.110369696943925), (8, 0.11456211367660116), (1, 0.11682018308814024), 
(7, 0.13290768362170685)]
[(2, 4), (5, 7), (8, 7), (6, 8), (3, 11), (7, 11), (1, 12), (4, 12), (0, 13), (9, 16)]
&lt;/pre&gt;

[[#Top]]

=Email communication Network=
==Page rank :page distribution method==
===Revision: Graph===
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
G=nx.cycle_graph(4)
labels={0:&quot;Bangluru&quot;,1:&quot;Gawhati&quot;,2:&quot;Kolkata&quot;,3:&quot;Chennai&quot;}
nx.draw(G,with_labels=True,labels=labels)
plt.show()
&lt;/pre&gt;

Output:

[[File:revGRAPH.png]]


===Directed Graph  Example===

[[File:directedGraphExample.png|600px]]

&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
G=nx.gnp_random_graph(4,.5,directed=True)
labels={0:&quot;Bangluru&quot;,1:&quot;Gawhati&quot;,2:&quot;Kolkata&quot;,3:&quot;Chennai&quot;}
nx.draw(G,with_labels=True,labels=labels)
plt.show()

&lt;/pre&gt;

Output:
[[File:directedg.png|600px]]


[[#Top]]


==Bidirectional with Parallel and self loops==
==Bidirectional with Parallel edges==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
G=nx.MultiDiGraph()

G.add_node(1)
G.add_node(2)
G.add_node(3)
G.add_node(4)

G.add_path([1,2,3,4,1])
G.add_edge(1,4)
nx.draw(G,with_labels=True)
plt.show()
&lt;/pre&gt;

Output: 

[[File:bidirectionalg.png]]

==Bidirectional with Self loops==
It doesn't show as graph. It is not taught, I did it myself.(Ms. Ami TUSHARKANT CHOKSI)
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
G=nx.MultiDiGraph()

G.add_node(1)
G.add_node(2)
G.add_node(3)
G.add_node(4)

G.add_path([1,2,3,4,1])
G.add_edge(1,4)
G.add_edge(1,1)
nx.draw(G,with_labels=True)
d=G.selfloop_edges()
print(d)
plt.show()

&lt;/pre&gt;

#Output: &lt;generator object selfloop_edges.&lt;locals&gt;.&lt;genexpr&gt; at 0x0B790150&gt;
#It shows self loop is there in the graph


==Directed Undirected Graph==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

#undirected graph
U=nx.Graph()

#directed graph
G=nx.DiGraph()

#nodes in graph
print(G.nodes())#Output: []
G.add_nodes_from([i for i in range(5)])
print(G.nodes())#Output: [0, 1, 2, 3, 4]

#edges
print(G.out_edges())#Output:[]

print(G.in_edges())#Output:[]

G.add_edge(1,2)
print(G.edges())#Output: [(1, 2)]
print(G.in_edges())#Output: [(1, 2)]
print(G.out_edges())#Output: [(1, 2)]

G.add_edge(0,3)
G.add_edge(2,3)
G.add_edge(3,2)
G.add_edge(3,4)
G.add_edge(4,1)
print(G.out_edges(2))#Output: [(2, 3)]
print(G.out_edges(3))#Output:[(3, 2), (3, 4)]
print(G.in_edges(3))#Output:[(0, 3), (2, 3)]

&lt;/pre&gt;

[[#Top]]

==Points Distribution Method==
&lt;ul&gt;
&lt;li&gt;Initially, all nodes are given equal points&lt;/li&gt;
&lt;li&gt;Rule&lt;/li&gt;
&lt;ul&gt;
&lt;li&gt;Share whatever you have equally with your neighbors&lt;/li&gt;
&lt;/ul&gt;
&lt;li&gt;FOR NODE B:Neighbors: C&lt;/li&gt;
&lt;li&gt;Give all of its points to C&lt;/li&gt;
&lt;li&gt;FOR NODE C:Neighbors: A&lt;/li&gt;
&lt;li&gt;Give all of its points to A&lt;/li&gt;
&lt;li&gt;new point of A=old points of C&lt;/li&gt;
&lt;li&gt;new point of B=(1/2)*old points of A&lt;/li&gt;
&lt;li&gt;new point of C=(1/2)*old points of A+old points of B&lt;/li&gt;
&lt;/ul&gt;

===In Excel, Implementation===
[[File:grEx1.png|600px]]

[[File:grEx2.png|600px]]

[[File:grEx3.png|600px]]

[[#Top]]

After some nodes, points becomes constant, as shown below.

&lt;style type=&quot;text/css&quot;&gt;
.tg  {border-collapse:collapse;border-spacing:0;}
.tg td{font-family:Arial, sans-serif;font-size:14px;padding:10px 5px;border-style:solid;border-width:1px;overflow:hidden;word-break:normal;border-color:black;}
.tg th{font-family:Arial, sans-serif;font-size:14px;font-weight:normal;padding:10px 5px;border-style:solid;border-width:1px;overflow:hidden;word-break:normal;border-color:black;}
.tg .tg-xldj{border-color:inherit;text-align:left}
.tg .tg-0pky{border-color:inherit;text-align:left;vertical-align:top}
&lt;/style&gt;
&lt;table class=&quot;tg&quot;&gt;
  &lt;tr&gt;
    &lt;th class=&quot;tg-xldj&quot;&gt;100&lt;/th&gt;
    &lt;th class=&quot;tg-xldj&quot;&gt;100&lt;/th&gt;
    &lt;th class=&quot;tg-xldj&quot;&gt;100&lt;/th&gt;
    &lt;th class=&quot;tg-xldj&quot;&gt; &lt;/th&gt;
    &lt;th class=&quot;tg-xldj&quot;&gt;300&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;100&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;50&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;150&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;150&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;50&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;100&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;100&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;75&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;125&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;125&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;50&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;125&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;125&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;62.5&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;112.5&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;112.5&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;62.5&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;125&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;125&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;56.25&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;118.75&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;118.75&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;62.5&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;118.75&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;118.75&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;59.375&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;121.875&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;121.875&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;59.375&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;118.75&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;118.75&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;60.9375&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;120.3125&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;120.3125&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;59.375&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;120.3125&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;120.3125&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;60.15625&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;119.5313&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;119.5313&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;60.15625&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;120.3125&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.3125&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;59.76563&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9219&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9219&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60.15625&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9219&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9219&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;59.96094&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.1172&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.1172&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;59.96094&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9219&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9219&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60.05859&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0195&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0195&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;59.96094&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0195&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0195&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60.00977&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9707&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9707&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60.00977&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0195&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0195&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;59.98535&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9951&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9951&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60.00977&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9951&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9951&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;59.99756&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0073&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0073&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;59.99756&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9951&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9951&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60.00366&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0012&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0012&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;59.99756&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0012&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0012&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60.00061&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9982&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9982&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60.00061&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0012&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0012&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;59.99908&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9997&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9997&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60.00061&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9997&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9997&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;59.99985&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0005&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0005&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;59.99985&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9997&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9997&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60.00023&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0001&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0001&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;59.99985&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0001&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0001&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60.00004&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9999&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9999&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60.00004&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0001&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0001&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;59.99994&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60.00004&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;59.99999&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;59.99999&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60.00001&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;59.99999&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;

=Collatz Conjecture=
Taught by Sudarshan sir and Amit sir, and Edited by Ms. Ami Tusharkant Choksi

If a number is even, divide it by ''2'', if it is odd, make multiply it by ''3'' and add ''1'', till you get ''1''. This simple problem is called, ''Collatz Conjecture''. 

[[File:collatz1.png|600px]]

[[File:collatz2.png|600px]]

[[File:collatz3.png|600px]]

[[File:collatz4.png|600px]]

[[File:collatz5.png|600px]]

Number is bigger doesn't mean more iterations are required. One can notice, from the output of the following program. 



The program to implement the same is as follows:
==Program==
&lt;pre&gt;
#collatz conjecture
#if num is even, divide it by 2
#if num is odd, new number is equal to 3n+1


def checkNum(num):
    iterations=1
    while(num!=1):
        if(num%2==0):
            num=int(num/2)            
        else:
            num = 3*num+1
        iterations+=1
        

    print(num,iterations)


#checkNum(12)#Output: 1 10
#checkNum(26)#Output: 1 11
checkNum(2000)#Output: 1 113
&lt;/pre&gt;

&lt;pre&gt;

#recursive approach

def checkNum(num):
    if num==1:
        return 1
    elif num%2==0:
        return checkNum(num/2)+1
    else:
        return checkNum(3*num +1)+1


output:
checkNum(26)
Out[27]: 11
checkNum(5000)
Out[28]: 29
&lt;/pre&gt;

==Program adding statement to print all iterations==
&lt;pre&gt;
def checkNum(num):
    iterations=1
    while(num!=1):
        if(num%2==0):
            num=int(num/2)            
        else:
            num = 3*num+1
        print(iterations,&quot;:&quot;,num)
        iterations+=1
        

    print(num,iterations)
&lt;/pre&gt;
==Output==
===For checkNum(2000)===
&lt;pre&gt;
1 : 1000
2 : 500
3 : 250
4 : 125
5 : 376
6 : 188
7 : 94
8 : 47
9 : 142
10 : 71
11 : 214
12 : 107
13 : 322
14 : 161
15 : 484
16 : 242
17 : 121
18 : 364
19 : 182
20 : 91
21 : 274
22 : 137
23 : 412
24 : 206
25 : 103
26 : 310
27 : 155
28 : 466
29 : 233
30 : 700
31 : 350
32 : 175
33 : 526
34 : 263
35 : 790
36 : 395
37 : 1186
38 : 593
39 : 1780
40 : 890
41 : 445
42 : 1336
43 : 668
44 : 334
45 : 167
46 : 502
47 : 251
48 : 754
49 : 377
50 : 1132
51 : 566
52 : 283
53 : 850
54 : 425
55 : 1276
56 : 638
57 : 319
58 : 958
59 : 479
60 : 1438
61 : 719
62 : 2158
63 : 1079
64 : 3238
65 : 1619
66 : 4858
67 : 2429
68 : 7288
69 : 3644
70 : 1822
71 : 911
72 : 2734
73 : 1367
74 : 4102
75 : 2051
76 : 6154
77 : 3077
78 : 9232
79 : 4616
80 : 2308
81 : 1154
82 : 577
83 : 1732
84 : 866
85 : 433
86 : 1300
87 : 650
88 : 325
89 : 976
90 : 488
91 : 244
92 : 122
93 : 61
94 : 184
95 : 92
96 : 46
97 : 23
98 : 70
99 : 35
100 : 106
101 : 53
102 : 160
103 : 80
104 : 40
105 : 20
106 : 10
107 : 5
108 : 16
109 : 8
110 : 4
111 : 2
112 : 1
1 113
&lt;/pre&gt;

===For checkNum(5000)===
&lt;pre&gt;
1 : 2500
2 : 1250
3 : 625
4 : 1876
5 : 938
6 : 469
7 : 1408
8 : 704
9 : 352
10 : 176
11 : 88
12 : 44
13 : 22
14 : 11
15 : 34
16 : 17
17 : 52
18 : 26
19 : 13
20 : 40
21 : 20
22 : 10
23 : 5
24 : 16
25 : 8
26 : 4
27 : 2
28 : 1
1 29
&lt;/pre&gt;
===For checkNum(25000000)===
&lt;pre&gt;
1 : 12500000
2 : 6250000
3 : 3125000
4 : 1562500
5 : 781250
6 : 390625
7 : 1171876
8 : 585938
9 : 292969
10 : 878908
11 : 439454
12 : 219727
13 : 659182
14 : 329591
15 : 988774
16 : 494387
17 : 1483162
18 : 741581
19 : 2224744
20 : 1112372
21 : 556186
22 : 278093
23 : 834280
24 : 417140
25 : 208570
26 : 104285
27 : 312856
28 : 156428
29 : 78214
30 : 39107
31 : 117322
32 : 58661
33 : 175984
34 : 87992
35 : 43996
36 : 21998
37 : 10999
38 : 32998
39 : 16499
40 : 49498
41 : 24749
42 : 74248
43 : 37124
44 : 18562
45 : 9281
46 : 27844
47 : 13922
48 : 6961
49 : 20884
50 : 10442
51 : 5221
52 : 15664
53 : 7832
54 : 3916
55 : 1958
56 : 979
57 : 2938
58 : 1469
59 : 4408
60 : 2204
61 : 1102
62 : 551
63 : 1654
64 : 827
65 : 2482
66 : 1241
67 : 3724
68 : 1862
69 : 931
70 : 2794
71 : 1397
72 : 4192
73 : 2096
74 : 1048
75 : 524
76 : 262
77 : 131
78 : 394
79 : 197
80 : 592
81 : 296
82 : 148
83 : 74
84 : 37
85 : 112
86 : 56
87 : 28
88 : 14
89 : 7
90 : 22
91 : 11
92 : 34
93 : 17
94 : 52
95 : 26
96 : 13
97 : 40
98 : 20
99 : 10
100 : 5
101 : 16
102 : 8
103 : 4
104 : 2
105 : 1
1 106
&lt;/pre&gt;

Happy Life ahead!!!

[[File:end1.png]]</text>
      <sha1>mvo572962o854k1rgawkqmgz1rpzs6f</sha1>
    </revision>
    <revision>
      <id>4482</id>
      <parentid>4481</parentid>
      <timestamp>2018-10-17T07:51:00Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* In Excel, Implementation */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="51611">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_12 Contributors of this page]

=Page Rank - How does Google Work=
One web page is having link to other page, that is a page is referring to other page. Google uses ''Page Rank'' algorithm to choose which page should be displayed first.

If we have network, connections as below:
[[File:rank0.png]]

We want to pick a leader out of all these nodes. How to pick a leader?  Why to elect a leader? It is because we want to find the super power of available nodes.                     
[[File:rank1.png]]

For example, the application wherein, we want to find the most impressive person of the  few ones. How to decide it? As shown in below figure, each node will communicate with other, randomly, we implement the count for each node, how many times, the particular node is being visited.
[[File:rank2.png]]

[[#Top]]

As shown in following, figure, all nodes are visited and each node is marked with the 
number i.e.number of times the node is visited.
[[File:rank3.png]]

The node with the maximum count, becomes the winner. Here, node with 120 count in figure 
below, is the winner. i.e. The person with 120 count in the figure is the most impressive 
person in the community being considered.
[[File:rank4.png]]

[[File:rank5.png]]

[[File:rank6.png]]

[[File:rank7.png]]


[[File:rank8.png]]

[[#Top]]

Google selects the page rank in this matter. Each web page is connected to other web page with web links. To a page, maximum link is there, that will be put on top results in Google search results.
[[File:rank9.png]]

Google uses web crawler. The crawler takes the random walk on the www network and rank the web sites.
[[File:rank10.png]]

This way Google ranks the pages and displays search results, according to page rank.
[[File:rank11.png]]

e.g.we search for ''mysore city''. Google has 10,000 results. But it displays the results in the sequence of page rank of search results, As shown in figure below.
[[File:mysore.png]]

[[#Top]]

==Page rank algorithm ==
As shown in beautiful figure below, few nodes combinely selected one as the leader, then that leader and other nodes, have selected         other as a leader. This way, finally the final leader is elected.
[[File:rank12.png|600px]]


[[File:graph00.png|600px]]


[[File:graph01.png|600px]]

[[#Top]]

==Gragh Drawing Program1==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
nx.barbell_graph(4,2)
G=nx.barbell_graph(4,2)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:Graph003.png|600px]]

[[#Top]]

==Gragh Drawing Program2==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
nx.barbell_graph(4,3)
G=nx.barbell_graph(4,3)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:Graph004.png|600px]]

[[#Top]]

==Gragh Drawing Program3==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
nx.barbell_graph(5,3)
G=nx.barbell_graph(5,3)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:Graph005.png|600px]]

[[#Top]]

==Complete Graph==
Complete graph is a graph, wherein, each node is connected to each other nodes in a graph.

&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.complete_graph(4)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:

[[File:completegraph001.png|600px]]

[[#Top]]

==Cycle graph==

&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.cycle_graph(5)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:

[[File:cyclegraph1.png|600px]]

[[#Top]]

==Ladder graph==

&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.ladder_graph(5)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:

[[File:laddergraph.png|600px]]

[[#Top]]

==Path Graph==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.path_graph(6)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:

[[File:pathgraph.png|600px]]

[[#Top]]

==Star Graph==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.star_graph(5)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:stargraph.png|600px]]

[[#Top]]

==Star Graph of 4 Nodes==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.star_graph(4)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:stargraph4points.png|600px]]

==Wheel Graph==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.wheel_graph(4)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:wheelgraph.png|600px]]

[[#Top]]

==Wheel Graph of 5 nodes==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.wheel_graph(5)
nx.draw(G)
plt.show()

&lt;/pre&gt;

Output:

[[File:wheelgraph5nodes.png|600px]]

[[#Top]]

==Wheel Graph of 6 nodes==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.wheel_graph(6)
nx.draw(G)
plt.show()

&lt;/pre&gt;

Output:

[[File:wheelgraph6nodes.png|600px]]

[[#Top]]

==Random Graph==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.gnp_random_graph(5,0.5)
nx.draw(G)
plt.show()

&lt;/pre&gt;

Output:

[[File:randomgraph1.png|600px]]


Running the same above program, we will get different output, as shown below, as it is random graph.

[[File:randomgraph2.png|600px]]

[[#Top]]

==Page Rank Algorithm Implementation==

===Random Directed Graph===
&lt;pre&gt;
import networkx as nx
import random
import matplotlib.pyplot as plt

#Draw random directed graph
G=nx.gnp_random_graph(10,0.5,directed=True)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output: 

[[File:randomDirectedGraph.png|600px]]


===Random Directed Graph with Labels===
&lt;pre&gt;
import networkx as nx
import random
import matplotlib.pyplot as plt

#Draw random directed graph 
G=nx.gnp_random_graph(10,0.5,directed=True)
#Give label numbering to nodes
nx.draw(G,with_labels=True)
plt.show()

&lt;/pre&gt;

Output:

[[File:randomDirectedGraphwithLabels.png|600px]]


[[#Top]]

===Page Rank Coding===
&lt;pre&gt;
import networkx as nx
import random
import matplotlib.pyplot as plt
import operator

#Draw random directed graph 
G=nx.gnp_random_graph(10,0.5,directed=True)
#Give label numbering to nodes
nx.draw(G,with_labels=True)
plt.show()

#x is the random source node
x=random.choice([i for i in range(G.number_of_nodes())])

#dictionary to maintain counter
dictCounter={}
#initialize the counter of each node as 0
for i in range(G.number_of_nodes()):
    dictCounter[i]=0
dictCounter[x]=dictCounter[x]+1

for i in range(10000):
    listn=list(G.neighbors(x))
    #if x is a sink node, we need to select random node for random walk
    #, else select random neighbor node

    if(len(listn)==0):
        x=random.choice([i for i in range(G.number_of_nodes())])
        dictCounter[x]=dictCounter[x]+1
    else:
        #choose a node randomly from neightbors
        x=random.choice(listn)
        dictCounter[x]=dictCounter[x]+1

p=nx.pagerank(G)
sorted_p=sorted(p.items(),key=operator.itemgetter(1))
sorted_rw=sorted(dictCounter.items(),key=operator.itemgetter(1))                        
#print(p)
#print(dictCounter)

print(sorted_p)
print(sorted_rw)

&lt;/pre&gt;

Output:

&lt;pre&gt;
[(2, 0.07139920240302768), (5, 0.07464882519777695), (3, 0.08527469366832419), 
(6, 0.08665188647066119), (4, 0.0987815549542114), (0, 0.10858415997562518), 
(9, 0.110369696943925), (8, 0.11456211367660116), (1, 0.11682018308814024), 
(7, 0.13290768362170685)]
[(2, 4), (5, 7), (8, 7), (6, 8), (3, 11), (7, 11), (1, 12), (4, 12), (0, 13), (9, 16)]
&lt;/pre&gt;

[[#Top]]

=Email communication Network=
==Page rank :page distribution method==
===Revision: Graph===
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
G=nx.cycle_graph(4)
labels={0:&quot;Bangluru&quot;,1:&quot;Gawhati&quot;,2:&quot;Kolkata&quot;,3:&quot;Chennai&quot;}
nx.draw(G,with_labels=True,labels=labels)
plt.show()
&lt;/pre&gt;

Output:

[[File:revGRAPH.png]]


===Directed Graph  Example===

[[File:directedGraphExample.png|600px]]

&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
G=nx.gnp_random_graph(4,.5,directed=True)
labels={0:&quot;Bangluru&quot;,1:&quot;Gawhati&quot;,2:&quot;Kolkata&quot;,3:&quot;Chennai&quot;}
nx.draw(G,with_labels=True,labels=labels)
plt.show()

&lt;/pre&gt;

Output:
[[File:directedg.png|600px]]


[[#Top]]


==Bidirectional with Parallel and self loops==
==Bidirectional with Parallel edges==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
G=nx.MultiDiGraph()

G.add_node(1)
G.add_node(2)
G.add_node(3)
G.add_node(4)

G.add_path([1,2,3,4,1])
G.add_edge(1,4)
nx.draw(G,with_labels=True)
plt.show()
&lt;/pre&gt;

Output: 

[[File:bidirectionalg.png]]

==Bidirectional with Self loops==
It doesn't show as graph. It is not taught, I did it myself.(Ms. Ami TUSHARKANT CHOKSI)
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
G=nx.MultiDiGraph()

G.add_node(1)
G.add_node(2)
G.add_node(3)
G.add_node(4)

G.add_path([1,2,3,4,1])
G.add_edge(1,4)
G.add_edge(1,1)
nx.draw(G,with_labels=True)
d=G.selfloop_edges()
print(d)
plt.show()

&lt;/pre&gt;

#Output: &lt;generator object selfloop_edges.&lt;locals&gt;.&lt;genexpr&gt; at 0x0B790150&gt;
#It shows self loop is there in the graph


==Directed Undirected Graph==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

#undirected graph
U=nx.Graph()

#directed graph
G=nx.DiGraph()

#nodes in graph
print(G.nodes())#Output: []
G.add_nodes_from([i for i in range(5)])
print(G.nodes())#Output: [0, 1, 2, 3, 4]

#edges
print(G.out_edges())#Output:[]

print(G.in_edges())#Output:[]

G.add_edge(1,2)
print(G.edges())#Output: [(1, 2)]
print(G.in_edges())#Output: [(1, 2)]
print(G.out_edges())#Output: [(1, 2)]

G.add_edge(0,3)
G.add_edge(2,3)
G.add_edge(3,2)
G.add_edge(3,4)
G.add_edge(4,1)
print(G.out_edges(2))#Output: [(2, 3)]
print(G.out_edges(3))#Output:[(3, 2), (3, 4)]
print(G.in_edges(3))#Output:[(0, 3), (2, 3)]

&lt;/pre&gt;

[[#Top]]

==Points Distribution Method==
&lt;ul&gt;
&lt;li&gt;Initially, all nodes are given equal points&lt;/li&gt;
&lt;li&gt;Rule&lt;/li&gt;
&lt;ul&gt;
&lt;li&gt;Share whatever you have equally with your neighbors&lt;/li&gt;
&lt;/ul&gt;
&lt;li&gt;FOR NODE B:Neighbors: C&lt;/li&gt;
&lt;li&gt;Give all of its points to C&lt;/li&gt;
&lt;li&gt;FOR NODE C:Neighbors: A&lt;/li&gt;
&lt;li&gt;Give all of its points to A&lt;/li&gt;
&lt;li&gt;new point of A=old points of C&lt;/li&gt;
&lt;li&gt;new point of B=(1/2)*old points of A&lt;/li&gt;
&lt;li&gt;new point of C=(1/2)*old points of A+old points of B&lt;/li&gt;
&lt;/ul&gt;

===In Excel, Implementation===
[[File:grEx1.png|600px]]

[[File:grEx2.png|600px]]

[[File:grEx3.png|600px]]

[[#Top]]

After some nodes, points becomes constant, as shown below.

&lt;table class=&quot;tg&quot;&gt;
  &lt;tr&gt;
    &lt;th class=&quot;tg-xldj&quot;&gt;100&lt;/th&gt;
    &lt;th class=&quot;tg-xldj&quot;&gt;100&lt;/th&gt;
    &lt;th class=&quot;tg-xldj&quot;&gt;100&lt;/th&gt;
    &lt;th class=&quot;tg-xldj&quot;&gt; &lt;/th&gt;
    &lt;th class=&quot;tg-xldj&quot;&gt;300&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;100&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;50&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;150&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;150&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;50&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;100&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;100&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;75&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;125&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;125&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;50&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;125&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;125&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;62.5&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;112.5&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;112.5&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;62.5&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;125&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;125&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;56.25&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;118.75&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;118.75&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;62.5&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;118.75&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;118.75&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;59.375&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;121.875&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;121.875&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;59.375&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;118.75&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;118.75&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;60.9375&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;120.3125&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;120.3125&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;59.375&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;120.3125&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;120.3125&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;60.15625&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;119.5313&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;119.5313&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;60.15625&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;120.3125&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.3125&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;59.76563&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9219&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9219&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60.15625&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9219&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9219&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;59.96094&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.1172&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.1172&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;59.96094&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9219&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9219&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60.05859&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0195&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0195&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;59.96094&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0195&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0195&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60.00977&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9707&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9707&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60.00977&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0195&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0195&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;59.98535&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9951&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9951&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60.00977&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9951&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9951&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;59.99756&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0073&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0073&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;59.99756&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9951&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9951&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60.00366&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0012&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0012&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;59.99756&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0012&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0012&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60.00061&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9982&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9982&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60.00061&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0012&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0012&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;59.99908&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9997&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9997&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60.00061&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9997&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9997&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;59.99985&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0005&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0005&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;59.99985&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9997&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9997&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60.00023&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0001&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0001&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;59.99985&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0001&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0001&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60.00004&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9999&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9999&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60.00004&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0001&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0001&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;59.99994&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60.00004&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;59.99999&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;59.99999&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60.00001&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;59.99999&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;

=Collatz Conjecture=
Taught by Sudarshan sir and Amit sir, and Edited by Ms. Ami Tusharkant Choksi

If a number is even, divide it by ''2'', if it is odd, make multiply it by ''3'' and add ''1'', till you get ''1''. This simple problem is called, ''Collatz Conjecture''. 

[[File:collatz1.png|600px]]

[[File:collatz2.png|600px]]

[[File:collatz3.png|600px]]

[[File:collatz4.png|600px]]

[[File:collatz5.png|600px]]

Number is bigger doesn't mean more iterations are required. One can notice, from the output of the following program. 



The program to implement the same is as follows:
==Program==
&lt;pre&gt;
#collatz conjecture
#if num is even, divide it by 2
#if num is odd, new number is equal to 3n+1


def checkNum(num):
    iterations=1
    while(num!=1):
        if(num%2==0):
            num=int(num/2)            
        else:
            num = 3*num+1
        iterations+=1
        

    print(num,iterations)


#checkNum(12)#Output: 1 10
#checkNum(26)#Output: 1 11
checkNum(2000)#Output: 1 113
&lt;/pre&gt;

&lt;pre&gt;

#recursive approach

def checkNum(num):
    if num==1:
        return 1
    elif num%2==0:
        return checkNum(num/2)+1
    else:
        return checkNum(3*num +1)+1


output:
checkNum(26)
Out[27]: 11
checkNum(5000)
Out[28]: 29
&lt;/pre&gt;

==Program adding statement to print all iterations==
&lt;pre&gt;
def checkNum(num):
    iterations=1
    while(num!=1):
        if(num%2==0):
            num=int(num/2)            
        else:
            num = 3*num+1
        print(iterations,&quot;:&quot;,num)
        iterations+=1
        

    print(num,iterations)
&lt;/pre&gt;
==Output==
===For checkNum(2000)===
&lt;pre&gt;
1 : 1000
2 : 500
3 : 250
4 : 125
5 : 376
6 : 188
7 : 94
8 : 47
9 : 142
10 : 71
11 : 214
12 : 107
13 : 322
14 : 161
15 : 484
16 : 242
17 : 121
18 : 364
19 : 182
20 : 91
21 : 274
22 : 137
23 : 412
24 : 206
25 : 103
26 : 310
27 : 155
28 : 466
29 : 233
30 : 700
31 : 350
32 : 175
33 : 526
34 : 263
35 : 790
36 : 395
37 : 1186
38 : 593
39 : 1780
40 : 890
41 : 445
42 : 1336
43 : 668
44 : 334
45 : 167
46 : 502
47 : 251
48 : 754
49 : 377
50 : 1132
51 : 566
52 : 283
53 : 850
54 : 425
55 : 1276
56 : 638
57 : 319
58 : 958
59 : 479
60 : 1438
61 : 719
62 : 2158
63 : 1079
64 : 3238
65 : 1619
66 : 4858
67 : 2429
68 : 7288
69 : 3644
70 : 1822
71 : 911
72 : 2734
73 : 1367
74 : 4102
75 : 2051
76 : 6154
77 : 3077
78 : 9232
79 : 4616
80 : 2308
81 : 1154
82 : 577
83 : 1732
84 : 866
85 : 433
86 : 1300
87 : 650
88 : 325
89 : 976
90 : 488
91 : 244
92 : 122
93 : 61
94 : 184
95 : 92
96 : 46
97 : 23
98 : 70
99 : 35
100 : 106
101 : 53
102 : 160
103 : 80
104 : 40
105 : 20
106 : 10
107 : 5
108 : 16
109 : 8
110 : 4
111 : 2
112 : 1
1 113
&lt;/pre&gt;

===For checkNum(5000)===
&lt;pre&gt;
1 : 2500
2 : 1250
3 : 625
4 : 1876
5 : 938
6 : 469
7 : 1408
8 : 704
9 : 352
10 : 176
11 : 88
12 : 44
13 : 22
14 : 11
15 : 34
16 : 17
17 : 52
18 : 26
19 : 13
20 : 40
21 : 20
22 : 10
23 : 5
24 : 16
25 : 8
26 : 4
27 : 2
28 : 1
1 29
&lt;/pre&gt;
===For checkNum(25000000)===
&lt;pre&gt;
1 : 12500000
2 : 6250000
3 : 3125000
4 : 1562500
5 : 781250
6 : 390625
7 : 1171876
8 : 585938
9 : 292969
10 : 878908
11 : 439454
12 : 219727
13 : 659182
14 : 329591
15 : 988774
16 : 494387
17 : 1483162
18 : 741581
19 : 2224744
20 : 1112372
21 : 556186
22 : 278093
23 : 834280
24 : 417140
25 : 208570
26 : 104285
27 : 312856
28 : 156428
29 : 78214
30 : 39107
31 : 117322
32 : 58661
33 : 175984
34 : 87992
35 : 43996
36 : 21998
37 : 10999
38 : 32998
39 : 16499
40 : 49498
41 : 24749
42 : 74248
43 : 37124
44 : 18562
45 : 9281
46 : 27844
47 : 13922
48 : 6961
49 : 20884
50 : 10442
51 : 5221
52 : 15664
53 : 7832
54 : 3916
55 : 1958
56 : 979
57 : 2938
58 : 1469
59 : 4408
60 : 2204
61 : 1102
62 : 551
63 : 1654
64 : 827
65 : 2482
66 : 1241
67 : 3724
68 : 1862
69 : 931
70 : 2794
71 : 1397
72 : 4192
73 : 2096
74 : 1048
75 : 524
76 : 262
77 : 131
78 : 394
79 : 197
80 : 592
81 : 296
82 : 148
83 : 74
84 : 37
85 : 112
86 : 56
87 : 28
88 : 14
89 : 7
90 : 22
91 : 11
92 : 34
93 : 17
94 : 52
95 : 26
96 : 13
97 : 40
98 : 20
99 : 10
100 : 5
101 : 16
102 : 8
103 : 4
104 : 2
105 : 1
1 106
&lt;/pre&gt;

Happy Life ahead!!!

[[File:end1.png]]</text>
      <sha1>599s664e121ty3hqnligwltj4h5yeww</sha1>
    </revision>
    <revision>
      <id>4483</id>
      <parentid>4482</parentid>
      <timestamp>2018-10-17T08:09:03Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* In Excel, Implementation */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="52165">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_12 Contributors of this page]

=Page Rank - How does Google Work=
One web page is having link to other page, that is a page is referring to other page. Google uses ''Page Rank'' algorithm to choose which page should be displayed first.

If we have network, connections as below:
[[File:rank0.png]]

We want to pick a leader out of all these nodes. How to pick a leader?  Why to elect a leader? It is because we want to find the super power of available nodes.                     
[[File:rank1.png]]

For example, the application wherein, we want to find the most impressive person of the  few ones. How to decide it? As shown in below figure, each node will communicate with other, randomly, we implement the count for each node, how many times, the particular node is being visited.
[[File:rank2.png]]

[[#Top]]

As shown in following, figure, all nodes are visited and each node is marked with the 
number i.e.number of times the node is visited.
[[File:rank3.png]]

The node with the maximum count, becomes the winner. Here, node with 120 count in figure 
below, is the winner. i.e. The person with 120 count in the figure is the most impressive 
person in the community being considered.
[[File:rank4.png]]

[[File:rank5.png]]

[[File:rank6.png]]

[[File:rank7.png]]


[[File:rank8.png]]

[[#Top]]

Google selects the page rank in this matter. Each web page is connected to other web page with web links. To a page, maximum link is there, that will be put on top results in Google search results.
[[File:rank9.png]]

Google uses web crawler. The crawler takes the random walk on the www network and rank the web sites.
[[File:rank10.png]]

This way Google ranks the pages and displays search results, according to page rank.
[[File:rank11.png]]

e.g.we search for ''mysore city''. Google has 10,000 results. But it displays the results in the sequence of page rank of search results, As shown in figure below.
[[File:mysore.png]]

[[#Top]]

==Page rank algorithm ==
As shown in beautiful figure below, few nodes combinely selected one as the leader, then that leader and other nodes, have selected         other as a leader. This way, finally the final leader is elected.
[[File:rank12.png|600px]]


[[File:graph00.png|600px]]


[[File:graph01.png|600px]]

[[#Top]]

==Gragh Drawing Program1==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
nx.barbell_graph(4,2)
G=nx.barbell_graph(4,2)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:Graph003.png|600px]]

[[#Top]]

==Gragh Drawing Program2==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
nx.barbell_graph(4,3)
G=nx.barbell_graph(4,3)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:Graph004.png|600px]]

[[#Top]]

==Gragh Drawing Program3==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
nx.barbell_graph(5,3)
G=nx.barbell_graph(5,3)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:Graph005.png|600px]]

[[#Top]]

==Complete Graph==
Complete graph is a graph, wherein, each node is connected to each other nodes in a graph.

&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.complete_graph(4)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:

[[File:completegraph001.png|600px]]

[[#Top]]

==Cycle graph==

&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.cycle_graph(5)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:

[[File:cyclegraph1.png|600px]]

[[#Top]]

==Ladder graph==

&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.ladder_graph(5)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:

[[File:laddergraph.png|600px]]

[[#Top]]

==Path Graph==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.path_graph(6)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:

[[File:pathgraph.png|600px]]

[[#Top]]

==Star Graph==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.star_graph(5)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:stargraph.png|600px]]

[[#Top]]

==Star Graph of 4 Nodes==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.star_graph(4)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:stargraph4points.png|600px]]

==Wheel Graph==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.wheel_graph(4)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:wheelgraph.png|600px]]

[[#Top]]

==Wheel Graph of 5 nodes==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.wheel_graph(5)
nx.draw(G)
plt.show()

&lt;/pre&gt;

Output:

[[File:wheelgraph5nodes.png|600px]]

[[#Top]]

==Wheel Graph of 6 nodes==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.wheel_graph(6)
nx.draw(G)
plt.show()

&lt;/pre&gt;

Output:

[[File:wheelgraph6nodes.png|600px]]

[[#Top]]

==Random Graph==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.gnp_random_graph(5,0.5)
nx.draw(G)
plt.show()

&lt;/pre&gt;

Output:

[[File:randomgraph1.png|600px]]


Running the same above program, we will get different output, as shown below, as it is random graph.

[[File:randomgraph2.png|600px]]

[[#Top]]

==Page Rank Algorithm Implementation==

===Random Directed Graph===
&lt;pre&gt;
import networkx as nx
import random
import matplotlib.pyplot as plt

#Draw random directed graph
G=nx.gnp_random_graph(10,0.5,directed=True)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output: 

[[File:randomDirectedGraph.png|600px]]


===Random Directed Graph with Labels===
&lt;pre&gt;
import networkx as nx
import random
import matplotlib.pyplot as plt

#Draw random directed graph 
G=nx.gnp_random_graph(10,0.5,directed=True)
#Give label numbering to nodes
nx.draw(G,with_labels=True)
plt.show()

&lt;/pre&gt;

Output:

[[File:randomDirectedGraphwithLabels.png|600px]]


[[#Top]]

===Page Rank Coding===
&lt;pre&gt;
import networkx as nx
import random
import matplotlib.pyplot as plt
import operator

#Draw random directed graph 
G=nx.gnp_random_graph(10,0.5,directed=True)
#Give label numbering to nodes
nx.draw(G,with_labels=True)
plt.show()

#x is the random source node
x=random.choice([i for i in range(G.number_of_nodes())])

#dictionary to maintain counter
dictCounter={}
#initialize the counter of each node as 0
for i in range(G.number_of_nodes()):
    dictCounter[i]=0
dictCounter[x]=dictCounter[x]+1

for i in range(10000):
    listn=list(G.neighbors(x))
    #if x is a sink node, we need to select random node for random walk
    #, else select random neighbor node

    if(len(listn)==0):
        x=random.choice([i for i in range(G.number_of_nodes())])
        dictCounter[x]=dictCounter[x]+1
    else:
        #choose a node randomly from neightbors
        x=random.choice(listn)
        dictCounter[x]=dictCounter[x]+1

p=nx.pagerank(G)
sorted_p=sorted(p.items(),key=operator.itemgetter(1))
sorted_rw=sorted(dictCounter.items(),key=operator.itemgetter(1))                        
#print(p)
#print(dictCounter)

print(sorted_p)
print(sorted_rw)

&lt;/pre&gt;

Output:

&lt;pre&gt;
[(2, 0.07139920240302768), (5, 0.07464882519777695), (3, 0.08527469366832419), 
(6, 0.08665188647066119), (4, 0.0987815549542114), (0, 0.10858415997562518), 
(9, 0.110369696943925), (8, 0.11456211367660116), (1, 0.11682018308814024), 
(7, 0.13290768362170685)]
[(2, 4), (5, 7), (8, 7), (6, 8), (3, 11), (7, 11), (1, 12), (4, 12), (0, 13), (9, 16)]
&lt;/pre&gt;

[[#Top]]

=Email communication Network=
==Page rank :page distribution method==
===Revision: Graph===
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
G=nx.cycle_graph(4)
labels={0:&quot;Bangluru&quot;,1:&quot;Gawhati&quot;,2:&quot;Kolkata&quot;,3:&quot;Chennai&quot;}
nx.draw(G,with_labels=True,labels=labels)
plt.show()
&lt;/pre&gt;

Output:

[[File:revGRAPH.png]]


===Directed Graph  Example===

[[File:directedGraphExample.png|600px]]

&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
G=nx.gnp_random_graph(4,.5,directed=True)
labels={0:&quot;Bangluru&quot;,1:&quot;Gawhati&quot;,2:&quot;Kolkata&quot;,3:&quot;Chennai&quot;}
nx.draw(G,with_labels=True,labels=labels)
plt.show()

&lt;/pre&gt;

Output:
[[File:directedg.png|600px]]


[[#Top]]


==Bidirectional with Parallel and self loops==
==Bidirectional with Parallel edges==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
G=nx.MultiDiGraph()

G.add_node(1)
G.add_node(2)
G.add_node(3)
G.add_node(4)

G.add_path([1,2,3,4,1])
G.add_edge(1,4)
nx.draw(G,with_labels=True)
plt.show()
&lt;/pre&gt;

Output: 

[[File:bidirectionalg.png]]

==Bidirectional with Self loops==
It doesn't show as graph. It is not taught, I did it myself.(Ms. Ami TUSHARKANT CHOKSI)
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
G=nx.MultiDiGraph()

G.add_node(1)
G.add_node(2)
G.add_node(3)
G.add_node(4)

G.add_path([1,2,3,4,1])
G.add_edge(1,4)
G.add_edge(1,1)
nx.draw(G,with_labels=True)
d=G.selfloop_edges()
print(d)
plt.show()

&lt;/pre&gt;

#Output: &lt;generator object selfloop_edges.&lt;locals&gt;.&lt;genexpr&gt; at 0x0B790150&gt;
#It shows self loop is there in the graph


==Directed Undirected Graph==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

#undirected graph
U=nx.Graph()

#directed graph
G=nx.DiGraph()

#nodes in graph
print(G.nodes())#Output: []
G.add_nodes_from([i for i in range(5)])
print(G.nodes())#Output: [0, 1, 2, 3, 4]

#edges
print(G.out_edges())#Output:[]

print(G.in_edges())#Output:[]

G.add_edge(1,2)
print(G.edges())#Output: [(1, 2)]
print(G.in_edges())#Output: [(1, 2)]
print(G.out_edges())#Output: [(1, 2)]

G.add_edge(0,3)
G.add_edge(2,3)
G.add_edge(3,2)
G.add_edge(3,4)
G.add_edge(4,1)
print(G.out_edges(2))#Output: [(2, 3)]
print(G.out_edges(3))#Output:[(3, 2), (3, 4)]
print(G.in_edges(3))#Output:[(0, 3), (2, 3)]

&lt;/pre&gt;

[[#Top]]

==Points Distribution Method==
&lt;ul&gt;
&lt;li&gt;Initially, all nodes are given equal points&lt;/li&gt;
&lt;li&gt;Rule&lt;/li&gt;
&lt;ul&gt;
&lt;li&gt;Share whatever you have equally with your neighbors&lt;/li&gt;
&lt;/ul&gt;
&lt;li&gt;FOR NODE B:Neighbors: C&lt;/li&gt;
&lt;li&gt;Give all of its points to C&lt;/li&gt;
&lt;li&gt;FOR NODE C:Neighbors: A&lt;/li&gt;
&lt;li&gt;Give all of its points to A&lt;/li&gt;
&lt;li&gt;new point of A=old points of C&lt;/li&gt;
&lt;li&gt;new point of B=(1/2)*old points of A&lt;/li&gt;
&lt;li&gt;new point of C=(1/2)*old points of A+old points of B&lt;/li&gt;
&lt;/ul&gt;

===In Excel, Implementation===
[[File:grEx1.png|600px]]

[[File:grEx2.png|600px]]

[[File:grEx3.png|600px]]

[[#Top]]

After some nodes, points becomes constant, as shown below.

&lt;table class=&quot;tg&quot;&gt;
  &lt;tr&gt;
    &lt;th class=&quot;tg-xldj&quot;&gt;100&lt;/th&gt;
    &lt;th class=&quot;tg-xldj&quot;&gt;100&lt;/th&gt;
    &lt;th class=&quot;tg-xldj&quot;&gt;100&lt;/th&gt;
    &lt;th class=&quot;tg-xldj&quot;&gt; &lt;/th&gt;
    &lt;th class=&quot;tg-xldj&quot;&gt;300&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;100&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;50&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;150&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;150&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;50&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;100&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;100&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;75&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;125&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;125&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;50&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;125&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;125&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;62.5&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;112.5&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;112.5&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;62.5&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;125&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;125&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;56.25&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;118.75&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;118.75&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;62.5&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;118.75&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;118.75&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;59.375&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;121.875&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;121.875&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;59.375&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;118.75&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;118.75&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;60.9375&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;120.3125&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;120.3125&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;59.375&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;120.3125&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;120.3125&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;60.15625&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;119.5313&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;119.5313&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;60.15625&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;120.3125&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.3125&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;59.76563&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9219&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9219&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60.15625&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9219&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9219&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;59.96094&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.1172&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.1172&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;59.96094&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9219&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9219&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60.05859&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0195&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0195&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;59.96094&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0195&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0195&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60.00977&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9707&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9707&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60.00977&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0195&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0195&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;59.98535&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9951&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9951&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60.00977&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9951&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9951&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;59.99756&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0073&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0073&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;59.99756&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9951&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9951&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60.00366&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0012&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0012&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;59.99756&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0012&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0012&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60.00061&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9982&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9982&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60.00061&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0012&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0012&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;59.99908&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9997&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9997&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60.00061&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9997&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9997&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;59.99985&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0005&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0005&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;59.99985&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9997&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9997&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60.00023&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0001&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0001&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;59.99985&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0001&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0001&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60.00004&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9999&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9999&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60.00004&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0001&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0001&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;59.99994&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60.00004&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;59.99999&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;59.99999&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60.00001&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;59.99999&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;

[[#Top]]

====Directed Graph====
&lt;pre&gt;
import networkx as nx
import random
import matplotlib.pyplot as plt

def add_edges():
    nodes=list(G.nodes())
    for s in nodes:
        for t in nodes:
            if s!=t:
                r=random.random()
                if r&lt;=0.5:
                    G.add_edge(s,t)
    return G

#create a directed graph
G=nx.DiGraph()
G.add_nodes_from([i for i in range(10)])
add_edges()
nx.draw(G,with_labels=True)
plt.show()
&lt;/pre&gt;

OUTPUT:

[[File:v12p1.png|600px]]

[[File:v12p2.png|600px]]

[[File:v12p3.png|600px]]

=Collatz Conjecture=
Taught by Sudarshan sir and Amit sir, and Edited by Ms. Ami Tusharkant Choksi

If a number is even, divide it by ''2'', if it is odd, make multiply it by ''3'' and add ''1'', till you get ''1''. This simple problem is called, ''Collatz Conjecture''. 

[[File:collatz1.png|600px]]

[[File:collatz2.png|600px]]

[[File:collatz3.png|600px]]

[[File:collatz4.png|600px]]

[[File:collatz5.png|600px]]

Number is bigger doesn't mean more iterations are required. One can notice, from the output of the following program. 



The program to implement the same is as follows:
==Program==
&lt;pre&gt;
#collatz conjecture
#if num is even, divide it by 2
#if num is odd, new number is equal to 3n+1


def checkNum(num):
    iterations=1
    while(num!=1):
        if(num%2==0):
            num=int(num/2)            
        else:
            num = 3*num+1
        iterations+=1
        

    print(num,iterations)


#checkNum(12)#Output: 1 10
#checkNum(26)#Output: 1 11
checkNum(2000)#Output: 1 113
&lt;/pre&gt;

&lt;pre&gt;

#recursive approach

def checkNum(num):
    if num==1:
        return 1
    elif num%2==0:
        return checkNum(num/2)+1
    else:
        return checkNum(3*num +1)+1


output:
checkNum(26)
Out[27]: 11
checkNum(5000)
Out[28]: 29
&lt;/pre&gt;

==Program adding statement to print all iterations==
&lt;pre&gt;
def checkNum(num):
    iterations=1
    while(num!=1):
        if(num%2==0):
            num=int(num/2)            
        else:
            num = 3*num+1
        print(iterations,&quot;:&quot;,num)
        iterations+=1
        

    print(num,iterations)
&lt;/pre&gt;
==Output==
===For checkNum(2000)===
&lt;pre&gt;
1 : 1000
2 : 500
3 : 250
4 : 125
5 : 376
6 : 188
7 : 94
8 : 47
9 : 142
10 : 71
11 : 214
12 : 107
13 : 322
14 : 161
15 : 484
16 : 242
17 : 121
18 : 364
19 : 182
20 : 91
21 : 274
22 : 137
23 : 412
24 : 206
25 : 103
26 : 310
27 : 155
28 : 466
29 : 233
30 : 700
31 : 350
32 : 175
33 : 526
34 : 263
35 : 790
36 : 395
37 : 1186
38 : 593
39 : 1780
40 : 890
41 : 445
42 : 1336
43 : 668
44 : 334
45 : 167
46 : 502
47 : 251
48 : 754
49 : 377
50 : 1132
51 : 566
52 : 283
53 : 850
54 : 425
55 : 1276
56 : 638
57 : 319
58 : 958
59 : 479
60 : 1438
61 : 719
62 : 2158
63 : 1079
64 : 3238
65 : 1619
66 : 4858
67 : 2429
68 : 7288
69 : 3644
70 : 1822
71 : 911
72 : 2734
73 : 1367
74 : 4102
75 : 2051
76 : 6154
77 : 3077
78 : 9232
79 : 4616
80 : 2308
81 : 1154
82 : 577
83 : 1732
84 : 866
85 : 433
86 : 1300
87 : 650
88 : 325
89 : 976
90 : 488
91 : 244
92 : 122
93 : 61
94 : 184
95 : 92
96 : 46
97 : 23
98 : 70
99 : 35
100 : 106
101 : 53
102 : 160
103 : 80
104 : 40
105 : 20
106 : 10
107 : 5
108 : 16
109 : 8
110 : 4
111 : 2
112 : 1
1 113
&lt;/pre&gt;

===For checkNum(5000)===
&lt;pre&gt;
1 : 2500
2 : 1250
3 : 625
4 : 1876
5 : 938
6 : 469
7 : 1408
8 : 704
9 : 352
10 : 176
11 : 88
12 : 44
13 : 22
14 : 11
15 : 34
16 : 17
17 : 52
18 : 26
19 : 13
20 : 40
21 : 20
22 : 10
23 : 5
24 : 16
25 : 8
26 : 4
27 : 2
28 : 1
1 29
&lt;/pre&gt;
===For checkNum(25000000)===
&lt;pre&gt;
1 : 12500000
2 : 6250000
3 : 3125000
4 : 1562500
5 : 781250
6 : 390625
7 : 1171876
8 : 585938
9 : 292969
10 : 878908
11 : 439454
12 : 219727
13 : 659182
14 : 329591
15 : 988774
16 : 494387
17 : 1483162
18 : 741581
19 : 2224744
20 : 1112372
21 : 556186
22 : 278093
23 : 834280
24 : 417140
25 : 208570
26 : 104285
27 : 312856
28 : 156428
29 : 78214
30 : 39107
31 : 117322
32 : 58661
33 : 175984
34 : 87992
35 : 43996
36 : 21998
37 : 10999
38 : 32998
39 : 16499
40 : 49498
41 : 24749
42 : 74248
43 : 37124
44 : 18562
45 : 9281
46 : 27844
47 : 13922
48 : 6961
49 : 20884
50 : 10442
51 : 5221
52 : 15664
53 : 7832
54 : 3916
55 : 1958
56 : 979
57 : 2938
58 : 1469
59 : 4408
60 : 2204
61 : 1102
62 : 551
63 : 1654
64 : 827
65 : 2482
66 : 1241
67 : 3724
68 : 1862
69 : 931
70 : 2794
71 : 1397
72 : 4192
73 : 2096
74 : 1048
75 : 524
76 : 262
77 : 131
78 : 394
79 : 197
80 : 592
81 : 296
82 : 148
83 : 74
84 : 37
85 : 112
86 : 56
87 : 28
88 : 14
89 : 7
90 : 22
91 : 11
92 : 34
93 : 17
94 : 52
95 : 26
96 : 13
97 : 40
98 : 20
99 : 10
100 : 5
101 : 16
102 : 8
103 : 4
104 : 2
105 : 1
1 106
&lt;/pre&gt;

Happy Life ahead!!!

[[File:end1.png]]</text>
      <sha1>snkgh1tw0rz9awl9gfifcjdrkzgvjrt</sha1>
    </revision>
    <revision>
      <id>4487</id>
      <parentid>4483</parentid>
      <timestamp>2018-10-17T08:30:48Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* Directed Graph */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="53625">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_12 Contributors of this page]

=Page Rank - How does Google Work=
One web page is having link to other page, that is a page is referring to other page. Google uses ''Page Rank'' algorithm to choose which page should be displayed first.

If we have network, connections as below:
[[File:rank0.png]]

We want to pick a leader out of all these nodes. How to pick a leader?  Why to elect a leader? It is because we want to find the super power of available nodes.                     
[[File:rank1.png]]

For example, the application wherein, we want to find the most impressive person of the  few ones. How to decide it? As shown in below figure, each node will communicate with other, randomly, we implement the count for each node, how many times, the particular node is being visited.
[[File:rank2.png]]

[[#Top]]

As shown in following, figure, all nodes are visited and each node is marked with the 
number i.e.number of times the node is visited.
[[File:rank3.png]]

The node with the maximum count, becomes the winner. Here, node with 120 count in figure 
below, is the winner. i.e. The person with 120 count in the figure is the most impressive 
person in the community being considered.
[[File:rank4.png]]

[[File:rank5.png]]

[[File:rank6.png]]

[[File:rank7.png]]


[[File:rank8.png]]

[[#Top]]

Google selects the page rank in this matter. Each web page is connected to other web page with web links. To a page, maximum link is there, that will be put on top results in Google search results.
[[File:rank9.png]]

Google uses web crawler. The crawler takes the random walk on the www network and rank the web sites.
[[File:rank10.png]]

This way Google ranks the pages and displays search results, according to page rank.
[[File:rank11.png]]

e.g.we search for ''mysore city''. Google has 10,000 results. But it displays the results in the sequence of page rank of search results, As shown in figure below.
[[File:mysore.png]]

[[#Top]]

==Page rank algorithm ==
As shown in beautiful figure below, few nodes combinely selected one as the leader, then that leader and other nodes, have selected         other as a leader. This way, finally the final leader is elected.
[[File:rank12.png|600px]]


[[File:graph00.png|600px]]


[[File:graph01.png|600px]]

[[#Top]]

==Gragh Drawing Program1==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
nx.barbell_graph(4,2)
G=nx.barbell_graph(4,2)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:Graph003.png|600px]]

[[#Top]]

==Gragh Drawing Program2==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
nx.barbell_graph(4,3)
G=nx.barbell_graph(4,3)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:Graph004.png|600px]]

[[#Top]]

==Gragh Drawing Program3==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
nx.barbell_graph(5,3)
G=nx.barbell_graph(5,3)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:Graph005.png|600px]]

[[#Top]]

==Complete Graph==
Complete graph is a graph, wherein, each node is connected to each other nodes in a graph.

&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.complete_graph(4)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:

[[File:completegraph001.png|600px]]

[[#Top]]

==Cycle graph==

&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.cycle_graph(5)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:

[[File:cyclegraph1.png|600px]]

[[#Top]]

==Ladder graph==

&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.ladder_graph(5)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:

[[File:laddergraph.png|600px]]

[[#Top]]

==Path Graph==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.path_graph(6)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:

[[File:pathgraph.png|600px]]

[[#Top]]

==Star Graph==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.star_graph(5)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:stargraph.png|600px]]

[[#Top]]

==Star Graph of 4 Nodes==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.star_graph(4)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:stargraph4points.png|600px]]

==Wheel Graph==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.wheel_graph(4)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:wheelgraph.png|600px]]

[[#Top]]

==Wheel Graph of 5 nodes==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.wheel_graph(5)
nx.draw(G)
plt.show()

&lt;/pre&gt;

Output:

[[File:wheelgraph5nodes.png|600px]]

[[#Top]]

==Wheel Graph of 6 nodes==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.wheel_graph(6)
nx.draw(G)
plt.show()

&lt;/pre&gt;

Output:

[[File:wheelgraph6nodes.png|600px]]

[[#Top]]

==Random Graph==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.gnp_random_graph(5,0.5)
nx.draw(G)
plt.show()

&lt;/pre&gt;

Output:

[[File:randomgraph1.png|600px]]


Running the same above program, we will get different output, as shown below, as it is random graph.

[[File:randomgraph2.png|600px]]

[[#Top]]

==Page Rank Algorithm Implementation==

===Random Directed Graph===
&lt;pre&gt;
import networkx as nx
import random
import matplotlib.pyplot as plt

#Draw random directed graph
G=nx.gnp_random_graph(10,0.5,directed=True)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output: 

[[File:randomDirectedGraph.png|600px]]


===Random Directed Graph with Labels===
&lt;pre&gt;
import networkx as nx
import random
import matplotlib.pyplot as plt

#Draw random directed graph 
G=nx.gnp_random_graph(10,0.5,directed=True)
#Give label numbering to nodes
nx.draw(G,with_labels=True)
plt.show()

&lt;/pre&gt;

Output:

[[File:randomDirectedGraphwithLabels.png|600px]]


[[#Top]]

===Page Rank Coding===
&lt;pre&gt;
import networkx as nx
import random
import matplotlib.pyplot as plt
import operator

#Draw random directed graph 
G=nx.gnp_random_graph(10,0.5,directed=True)
#Give label numbering to nodes
nx.draw(G,with_labels=True)
plt.show()

#x is the random source node
x=random.choice([i for i in range(G.number_of_nodes())])

#dictionary to maintain counter
dictCounter={}
#initialize the counter of each node as 0
for i in range(G.number_of_nodes()):
    dictCounter[i]=0
dictCounter[x]=dictCounter[x]+1

for i in range(10000):
    listn=list(G.neighbors(x))
    #if x is a sink node, we need to select random node for random walk
    #, else select random neighbor node

    if(len(listn)==0):
        x=random.choice([i for i in range(G.number_of_nodes())])
        dictCounter[x]=dictCounter[x]+1
    else:
        #choose a node randomly from neightbors
        x=random.choice(listn)
        dictCounter[x]=dictCounter[x]+1

p=nx.pagerank(G)
sorted_p=sorted(p.items(),key=operator.itemgetter(1))
sorted_rw=sorted(dictCounter.items(),key=operator.itemgetter(1))                        
#print(p)
#print(dictCounter)

print(sorted_p)
print(sorted_rw)

&lt;/pre&gt;

Output:

&lt;pre&gt;
[(2, 0.07139920240302768), (5, 0.07464882519777695), (3, 0.08527469366832419), 
(6, 0.08665188647066119), (4, 0.0987815549542114), (0, 0.10858415997562518), 
(9, 0.110369696943925), (8, 0.11456211367660116), (1, 0.11682018308814024), 
(7, 0.13290768362170685)]
[(2, 4), (5, 7), (8, 7), (6, 8), (3, 11), (7, 11), (1, 12), (4, 12), (0, 13), (9, 16)]
&lt;/pre&gt;

[[#Top]]

=Email communication Network=
==Page rank :page distribution method==
===Revision: Graph===
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
G=nx.cycle_graph(4)
labels={0:&quot;Bangluru&quot;,1:&quot;Gawhati&quot;,2:&quot;Kolkata&quot;,3:&quot;Chennai&quot;}
nx.draw(G,with_labels=True,labels=labels)
plt.show()
&lt;/pre&gt;

Output:

[[File:revGRAPH.png]]


===Directed Graph  Example===

[[File:directedGraphExample.png|600px]]

&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
G=nx.gnp_random_graph(4,.5,directed=True)
labels={0:&quot;Bangluru&quot;,1:&quot;Gawhati&quot;,2:&quot;Kolkata&quot;,3:&quot;Chennai&quot;}
nx.draw(G,with_labels=True,labels=labels)
plt.show()

&lt;/pre&gt;

Output:
[[File:directedg.png|600px]]


[[#Top]]


==Bidirectional with Parallel and self loops==
==Bidirectional with Parallel edges==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
G=nx.MultiDiGraph()

G.add_node(1)
G.add_node(2)
G.add_node(3)
G.add_node(4)

G.add_path([1,2,3,4,1])
G.add_edge(1,4)
nx.draw(G,with_labels=True)
plt.show()
&lt;/pre&gt;

Output: 

[[File:bidirectionalg.png]]

==Bidirectional with Self loops==
It doesn't show as graph. It is not taught, I did it myself.(Ms. Ami TUSHARKANT CHOKSI)
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
G=nx.MultiDiGraph()

G.add_node(1)
G.add_node(2)
G.add_node(3)
G.add_node(4)

G.add_path([1,2,3,4,1])
G.add_edge(1,4)
G.add_edge(1,1)
nx.draw(G,with_labels=True)
d=G.selfloop_edges()
print(d)
plt.show()

&lt;/pre&gt;

#Output: &lt;generator object selfloop_edges.&lt;locals&gt;.&lt;genexpr&gt; at 0x0B790150&gt;
#It shows self loop is there in the graph


==Directed Undirected Graph==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

#undirected graph
U=nx.Graph()

#directed graph
G=nx.DiGraph()

#nodes in graph
print(G.nodes())#Output: []
G.add_nodes_from([i for i in range(5)])
print(G.nodes())#Output: [0, 1, 2, 3, 4]

#edges
print(G.out_edges())#Output:[]

print(G.in_edges())#Output:[]

G.add_edge(1,2)
print(G.edges())#Output: [(1, 2)]
print(G.in_edges())#Output: [(1, 2)]
print(G.out_edges())#Output: [(1, 2)]

G.add_edge(0,3)
G.add_edge(2,3)
G.add_edge(3,2)
G.add_edge(3,4)
G.add_edge(4,1)
print(G.out_edges(2))#Output: [(2, 3)]
print(G.out_edges(3))#Output:[(3, 2), (3, 4)]
print(G.in_edges(3))#Output:[(0, 3), (2, 3)]

&lt;/pre&gt;

[[#Top]]

==Points Distribution Method==
&lt;ul&gt;
&lt;li&gt;Initially, all nodes are given equal points&lt;/li&gt;
&lt;li&gt;Rule&lt;/li&gt;
&lt;ul&gt;
&lt;li&gt;Share whatever you have equally with your neighbors&lt;/li&gt;
&lt;/ul&gt;
&lt;li&gt;FOR NODE B:Neighbors: C&lt;/li&gt;
&lt;li&gt;Give all of its points to C&lt;/li&gt;
&lt;li&gt;FOR NODE C:Neighbors: A&lt;/li&gt;
&lt;li&gt;Give all of its points to A&lt;/li&gt;
&lt;li&gt;new point of A=old points of C&lt;/li&gt;
&lt;li&gt;new point of B=(1/2)*old points of A&lt;/li&gt;
&lt;li&gt;new point of C=(1/2)*old points of A+old points of B&lt;/li&gt;
&lt;/ul&gt;

===In Excel, Implementation===
[[File:grEx1.png|600px]]

[[File:grEx2.png|600px]]

[[File:grEx3.png|600px]]

[[#Top]]

After some nodes, points becomes constant, as shown below.

&lt;table class=&quot;tg&quot;&gt;
  &lt;tr&gt;
    &lt;th class=&quot;tg-xldj&quot;&gt;100&lt;/th&gt;
    &lt;th class=&quot;tg-xldj&quot;&gt;100&lt;/th&gt;
    &lt;th class=&quot;tg-xldj&quot;&gt;100&lt;/th&gt;
    &lt;th class=&quot;tg-xldj&quot;&gt; &lt;/th&gt;
    &lt;th class=&quot;tg-xldj&quot;&gt;300&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;100&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;50&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;150&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;150&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;50&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;100&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;100&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;75&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;125&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;125&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;50&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;125&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;125&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;62.5&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;112.5&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;112.5&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;62.5&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;125&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;125&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;56.25&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;118.75&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;118.75&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;62.5&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;118.75&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;118.75&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;59.375&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;121.875&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;121.875&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;59.375&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;118.75&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;118.75&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;60.9375&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;120.3125&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;120.3125&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;59.375&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;120.3125&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;120.3125&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;60.15625&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;119.5313&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;119.5313&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;60.15625&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;120.3125&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.3125&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;59.76563&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9219&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9219&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60.15625&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9219&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9219&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;59.96094&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.1172&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.1172&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;59.96094&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9219&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9219&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60.05859&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0195&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0195&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;59.96094&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0195&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0195&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60.00977&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9707&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9707&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60.00977&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0195&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0195&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;59.98535&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9951&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9951&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60.00977&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9951&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9951&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;59.99756&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0073&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0073&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;59.99756&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9951&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9951&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60.00366&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0012&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0012&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;59.99756&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0012&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0012&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60.00061&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9982&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9982&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60.00061&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0012&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0012&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;59.99908&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9997&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9997&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60.00061&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9997&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9997&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;59.99985&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0005&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0005&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;59.99985&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9997&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9997&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60.00023&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0001&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0001&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;59.99985&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0001&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0001&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60.00004&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9999&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9999&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60.00004&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0001&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0001&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;59.99994&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60.00004&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;59.99999&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;59.99999&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60.00001&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;59.99999&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;

[[#Top]]

===Directed Graph===
&lt;pre&gt;
import networkx as nx
import random
import matplotlib.pyplot as plt

def add_edges():
    nodes=list(G.nodes())
    for s in nodes:
        for t in nodes:
            if s!=t:
                r=random.random()
                if r&lt;=0.5:
                    G.add_edge(s,t)
    return G

#create a directed graph
G=nx.DiGraph()
G.add_nodes_from([i for i in range(10)])
add_edges()
nx.draw(G,with_labels=True)
plt.show()
&lt;/pre&gt;

OUTPUT:

[[File:v12p1.png|600px]]

[[File:v12p2.png|600px]]

[[File:v12p3.png|600px]]

===Point Calculating Program===
&lt;pre&gt;
import networkx as nx
import random
import matplotlib.pyplot as plt

def add_edges():
    nodes=list(G.nodes())
    for s in nodes:
        for t in nodes:
            if s!=t:
                r=random.random()
                if r&lt;=0.5:
                    G.add_edge(s,t)
    return G


def assign_points(G):
    nodes=list(G.nodes())
    p=[]
    for each in nodes:
        p.append(100)
    return p

def distribute_points(G,points):
    nodes=list(G.nodes())
    new_points=[]
    for i in range(len(nodes)):
        new_points.append(0)

    for n in nodes:
        out=list(G.out_edges(n))
        if len(out)==0:
            new_points[n]=new_points[n]+points[n]
        else:
            share=points[n]/len(out)
            for (src,tgt) in out:
                new_points[tgt]=new_points[tgt]+share
    return  new_points                

def keep_distributing(points,G):
    while(1):
        new_points=distribute_points(G,points)
        print(new_points)
        points=new_points
        stop=input(&quot;Press # to stop or any other key to continue&quot;)
        if stop=='#':
            break
    return new_points

#create a directed graph
G=nx.DiGraph()
G.add_nodes_from([i for i in range(10)])
add_edges()
nx.draw(G,with_labels=True)
plt.show()

#assign initial points
points=assign_points(G)

#keep distributing
final_points=keep_distributing(points,G)

&lt;/pre&gt;

Output:
[[File:v12p4.png]]

[[File:v12p5.png]]

=Collatz Conjecture=
Taught by Sudarshan sir and Amit sir, and Edited by Ms. Ami Tusharkant Choksi

If a number is even, divide it by ''2'', if it is odd, make multiply it by ''3'' and add ''1'', till you get ''1''. This simple problem is called, ''Collatz Conjecture''. 

[[File:collatz1.png|600px]]

[[File:collatz2.png|600px]]

[[File:collatz3.png|600px]]

[[File:collatz4.png|600px]]

[[File:collatz5.png|600px]]

Number is bigger doesn't mean more iterations are required. One can notice, from the output of the following program. 



The program to implement the same is as follows:
==Program==
&lt;pre&gt;
#collatz conjecture
#if num is even, divide it by 2
#if num is odd, new number is equal to 3n+1


def checkNum(num):
    iterations=1
    while(num!=1):
        if(num%2==0):
            num=int(num/2)            
        else:
            num = 3*num+1
        iterations+=1
        

    print(num,iterations)


#checkNum(12)#Output: 1 10
#checkNum(26)#Output: 1 11
checkNum(2000)#Output: 1 113
&lt;/pre&gt;

&lt;pre&gt;

#recursive approach

def checkNum(num):
    if num==1:
        return 1
    elif num%2==0:
        return checkNum(num/2)+1
    else:
        return checkNum(3*num +1)+1


output:
checkNum(26)
Out[27]: 11
checkNum(5000)
Out[28]: 29
&lt;/pre&gt;

==Program adding statement to print all iterations==
&lt;pre&gt;
def checkNum(num):
    iterations=1
    while(num!=1):
        if(num%2==0):
            num=int(num/2)            
        else:
            num = 3*num+1
        print(iterations,&quot;:&quot;,num)
        iterations+=1
        

    print(num,iterations)
&lt;/pre&gt;
==Output==
===For checkNum(2000)===
&lt;pre&gt;
1 : 1000
2 : 500
3 : 250
4 : 125
5 : 376
6 : 188
7 : 94
8 : 47
9 : 142
10 : 71
11 : 214
12 : 107
13 : 322
14 : 161
15 : 484
16 : 242
17 : 121
18 : 364
19 : 182
20 : 91
21 : 274
22 : 137
23 : 412
24 : 206
25 : 103
26 : 310
27 : 155
28 : 466
29 : 233
30 : 700
31 : 350
32 : 175
33 : 526
34 : 263
35 : 790
36 : 395
37 : 1186
38 : 593
39 : 1780
40 : 890
41 : 445
42 : 1336
43 : 668
44 : 334
45 : 167
46 : 502
47 : 251
48 : 754
49 : 377
50 : 1132
51 : 566
52 : 283
53 : 850
54 : 425
55 : 1276
56 : 638
57 : 319
58 : 958
59 : 479
60 : 1438
61 : 719
62 : 2158
63 : 1079
64 : 3238
65 : 1619
66 : 4858
67 : 2429
68 : 7288
69 : 3644
70 : 1822
71 : 911
72 : 2734
73 : 1367
74 : 4102
75 : 2051
76 : 6154
77 : 3077
78 : 9232
79 : 4616
80 : 2308
81 : 1154
82 : 577
83 : 1732
84 : 866
85 : 433
86 : 1300
87 : 650
88 : 325
89 : 976
90 : 488
91 : 244
92 : 122
93 : 61
94 : 184
95 : 92
96 : 46
97 : 23
98 : 70
99 : 35
100 : 106
101 : 53
102 : 160
103 : 80
104 : 40
105 : 20
106 : 10
107 : 5
108 : 16
109 : 8
110 : 4
111 : 2
112 : 1
1 113
&lt;/pre&gt;

===For checkNum(5000)===
&lt;pre&gt;
1 : 2500
2 : 1250
3 : 625
4 : 1876
5 : 938
6 : 469
7 : 1408
8 : 704
9 : 352
10 : 176
11 : 88
12 : 44
13 : 22
14 : 11
15 : 34
16 : 17
17 : 52
18 : 26
19 : 13
20 : 40
21 : 20
22 : 10
23 : 5
24 : 16
25 : 8
26 : 4
27 : 2
28 : 1
1 29
&lt;/pre&gt;
===For checkNum(25000000)===
&lt;pre&gt;
1 : 12500000
2 : 6250000
3 : 3125000
4 : 1562500
5 : 781250
6 : 390625
7 : 1171876
8 : 585938
9 : 292969
10 : 878908
11 : 439454
12 : 219727
13 : 659182
14 : 329591
15 : 988774
16 : 494387
17 : 1483162
18 : 741581
19 : 2224744
20 : 1112372
21 : 556186
22 : 278093
23 : 834280
24 : 417140
25 : 208570
26 : 104285
27 : 312856
28 : 156428
29 : 78214
30 : 39107
31 : 117322
32 : 58661
33 : 175984
34 : 87992
35 : 43996
36 : 21998
37 : 10999
38 : 32998
39 : 16499
40 : 49498
41 : 24749
42 : 74248
43 : 37124
44 : 18562
45 : 9281
46 : 27844
47 : 13922
48 : 6961
49 : 20884
50 : 10442
51 : 5221
52 : 15664
53 : 7832
54 : 3916
55 : 1958
56 : 979
57 : 2938
58 : 1469
59 : 4408
60 : 2204
61 : 1102
62 : 551
63 : 1654
64 : 827
65 : 2482
66 : 1241
67 : 3724
68 : 1862
69 : 931
70 : 2794
71 : 1397
72 : 4192
73 : 2096
74 : 1048
75 : 524
76 : 262
77 : 131
78 : 394
79 : 197
80 : 592
81 : 296
82 : 148
83 : 74
84 : 37
85 : 112
86 : 56
87 : 28
88 : 14
89 : 7
90 : 22
91 : 11
92 : 34
93 : 17
94 : 52
95 : 26
96 : 13
97 : 40
98 : 20
99 : 10
100 : 5
101 : 16
102 : 8
103 : 4
104 : 2
105 : 1
1 106
&lt;/pre&gt;

Happy Life ahead!!!

[[File:end1.png]]</text>
      <sha1>hp5y2lr5co1verfkcgue7qbse6k7i57</sha1>
    </revision>
    <revision>
      <id>4490</id>
      <parentid>4487</parentid>
      <timestamp>2018-10-17T08:34:32Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* Point Calculating Program */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="53626">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_12 Contributors of this page]

=Page Rank - How does Google Work=
One web page is having link to other page, that is a page is referring to other page. Google uses ''Page Rank'' algorithm to choose which page should be displayed first.

If we have network, connections as below:
[[File:rank0.png]]

We want to pick a leader out of all these nodes. How to pick a leader?  Why to elect a leader? It is because we want to find the super power of available nodes.                     
[[File:rank1.png]]

For example, the application wherein, we want to find the most impressive person of the  few ones. How to decide it? As shown in below figure, each node will communicate with other, randomly, we implement the count for each node, how many times, the particular node is being visited.
[[File:rank2.png]]

[[#Top]]

As shown in following, figure, all nodes are visited and each node is marked with the 
number i.e.number of times the node is visited.
[[File:rank3.png]]

The node with the maximum count, becomes the winner. Here, node with 120 count in figure 
below, is the winner. i.e. The person with 120 count in the figure is the most impressive 
person in the community being considered.
[[File:rank4.png]]

[[File:rank5.png]]

[[File:rank6.png]]

[[File:rank7.png]]


[[File:rank8.png]]

[[#Top]]

Google selects the page rank in this matter. Each web page is connected to other web page with web links. To a page, maximum link is there, that will be put on top results in Google search results.
[[File:rank9.png]]

Google uses web crawler. The crawler takes the random walk on the www network and rank the web sites.
[[File:rank10.png]]

This way Google ranks the pages and displays search results, according to page rank.
[[File:rank11.png]]

e.g.we search for ''mysore city''. Google has 10,000 results. But it displays the results in the sequence of page rank of search results, As shown in figure below.
[[File:mysore.png]]

[[#Top]]

==Page rank algorithm ==
As shown in beautiful figure below, few nodes combinely selected one as the leader, then that leader and other nodes, have selected         other as a leader. This way, finally the final leader is elected.
[[File:rank12.png|600px]]


[[File:graph00.png|600px]]


[[File:graph01.png|600px]]

[[#Top]]

==Gragh Drawing Program1==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
nx.barbell_graph(4,2)
G=nx.barbell_graph(4,2)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:Graph003.png|600px]]

[[#Top]]

==Gragh Drawing Program2==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
nx.barbell_graph(4,3)
G=nx.barbell_graph(4,3)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:Graph004.png|600px]]

[[#Top]]

==Gragh Drawing Program3==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
nx.barbell_graph(5,3)
G=nx.barbell_graph(5,3)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:Graph005.png|600px]]

[[#Top]]

==Complete Graph==
Complete graph is a graph, wherein, each node is connected to each other nodes in a graph.

&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.complete_graph(4)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:

[[File:completegraph001.png|600px]]

[[#Top]]

==Cycle graph==

&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.cycle_graph(5)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:

[[File:cyclegraph1.png|600px]]

[[#Top]]

==Ladder graph==

&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.ladder_graph(5)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:

[[File:laddergraph.png|600px]]

[[#Top]]

==Path Graph==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.path_graph(6)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:

[[File:pathgraph.png|600px]]

[[#Top]]

==Star Graph==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.star_graph(5)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:stargraph.png|600px]]

[[#Top]]

==Star Graph of 4 Nodes==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.star_graph(4)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:stargraph4points.png|600px]]

==Wheel Graph==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.wheel_graph(4)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:wheelgraph.png|600px]]

[[#Top]]

==Wheel Graph of 5 nodes==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.wheel_graph(5)
nx.draw(G)
plt.show()

&lt;/pre&gt;

Output:

[[File:wheelgraph5nodes.png|600px]]

[[#Top]]

==Wheel Graph of 6 nodes==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.wheel_graph(6)
nx.draw(G)
plt.show()

&lt;/pre&gt;

Output:

[[File:wheelgraph6nodes.png|600px]]

[[#Top]]

==Random Graph==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.gnp_random_graph(5,0.5)
nx.draw(G)
plt.show()

&lt;/pre&gt;

Output:

[[File:randomgraph1.png|600px]]


Running the same above program, we will get different output, as shown below, as it is random graph.

[[File:randomgraph2.png|600px]]

[[#Top]]

==Page Rank Algorithm Implementation==

===Random Directed Graph===
&lt;pre&gt;
import networkx as nx
import random
import matplotlib.pyplot as plt

#Draw random directed graph
G=nx.gnp_random_graph(10,0.5,directed=True)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output: 

[[File:randomDirectedGraph.png|600px]]


===Random Directed Graph with Labels===
&lt;pre&gt;
import networkx as nx
import random
import matplotlib.pyplot as plt

#Draw random directed graph 
G=nx.gnp_random_graph(10,0.5,directed=True)
#Give label numbering to nodes
nx.draw(G,with_labels=True)
plt.show()

&lt;/pre&gt;

Output:

[[File:randomDirectedGraphwithLabels.png|600px]]


[[#Top]]

===Page Rank Coding===
&lt;pre&gt;
import networkx as nx
import random
import matplotlib.pyplot as plt
import operator

#Draw random directed graph 
G=nx.gnp_random_graph(10,0.5,directed=True)
#Give label numbering to nodes
nx.draw(G,with_labels=True)
plt.show()

#x is the random source node
x=random.choice([i for i in range(G.number_of_nodes())])

#dictionary to maintain counter
dictCounter={}
#initialize the counter of each node as 0
for i in range(G.number_of_nodes()):
    dictCounter[i]=0
dictCounter[x]=dictCounter[x]+1

for i in range(10000):
    listn=list(G.neighbors(x))
    #if x is a sink node, we need to select random node for random walk
    #, else select random neighbor node

    if(len(listn)==0):
        x=random.choice([i for i in range(G.number_of_nodes())])
        dictCounter[x]=dictCounter[x]+1
    else:
        #choose a node randomly from neightbors
        x=random.choice(listn)
        dictCounter[x]=dictCounter[x]+1

p=nx.pagerank(G)
sorted_p=sorted(p.items(),key=operator.itemgetter(1))
sorted_rw=sorted(dictCounter.items(),key=operator.itemgetter(1))                        
#print(p)
#print(dictCounter)

print(sorted_p)
print(sorted_rw)

&lt;/pre&gt;

Output:

&lt;pre&gt;
[(2, 0.07139920240302768), (5, 0.07464882519777695), (3, 0.08527469366832419), 
(6, 0.08665188647066119), (4, 0.0987815549542114), (0, 0.10858415997562518), 
(9, 0.110369696943925), (8, 0.11456211367660116), (1, 0.11682018308814024), 
(7, 0.13290768362170685)]
[(2, 4), (5, 7), (8, 7), (6, 8), (3, 11), (7, 11), (1, 12), (4, 12), (0, 13), (9, 16)]
&lt;/pre&gt;

[[#Top]]

=Email communication Network=
==Page rank :page distribution method==
===Revision: Graph===
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
G=nx.cycle_graph(4)
labels={0:&quot;Bangluru&quot;,1:&quot;Gawhati&quot;,2:&quot;Kolkata&quot;,3:&quot;Chennai&quot;}
nx.draw(G,with_labels=True,labels=labels)
plt.show()
&lt;/pre&gt;

Output:

[[File:revGRAPH.png]]


===Directed Graph  Example===

[[File:directedGraphExample.png|600px]]

&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
G=nx.gnp_random_graph(4,.5,directed=True)
labels={0:&quot;Bangluru&quot;,1:&quot;Gawhati&quot;,2:&quot;Kolkata&quot;,3:&quot;Chennai&quot;}
nx.draw(G,with_labels=True,labels=labels)
plt.show()

&lt;/pre&gt;

Output:
[[File:directedg.png|600px]]


[[#Top]]


==Bidirectional with Parallel and self loops==
==Bidirectional with Parallel edges==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
G=nx.MultiDiGraph()

G.add_node(1)
G.add_node(2)
G.add_node(3)
G.add_node(4)

G.add_path([1,2,3,4,1])
G.add_edge(1,4)
nx.draw(G,with_labels=True)
plt.show()
&lt;/pre&gt;

Output: 

[[File:bidirectionalg.png]]

==Bidirectional with Self loops==
It doesn't show as graph. It is not taught, I did it myself.(Ms. Ami TUSHARKANT CHOKSI)
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
G=nx.MultiDiGraph()

G.add_node(1)
G.add_node(2)
G.add_node(3)
G.add_node(4)

G.add_path([1,2,3,4,1])
G.add_edge(1,4)
G.add_edge(1,1)
nx.draw(G,with_labels=True)
d=G.selfloop_edges()
print(d)
plt.show()

&lt;/pre&gt;

#Output: &lt;generator object selfloop_edges.&lt;locals&gt;.&lt;genexpr&gt; at 0x0B790150&gt;
#It shows self loop is there in the graph


==Directed Undirected Graph==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

#undirected graph
U=nx.Graph()

#directed graph
G=nx.DiGraph()

#nodes in graph
print(G.nodes())#Output: []
G.add_nodes_from([i for i in range(5)])
print(G.nodes())#Output: [0, 1, 2, 3, 4]

#edges
print(G.out_edges())#Output:[]

print(G.in_edges())#Output:[]

G.add_edge(1,2)
print(G.edges())#Output: [(1, 2)]
print(G.in_edges())#Output: [(1, 2)]
print(G.out_edges())#Output: [(1, 2)]

G.add_edge(0,3)
G.add_edge(2,3)
G.add_edge(3,2)
G.add_edge(3,4)
G.add_edge(4,1)
print(G.out_edges(2))#Output: [(2, 3)]
print(G.out_edges(3))#Output:[(3, 2), (3, 4)]
print(G.in_edges(3))#Output:[(0, 3), (2, 3)]

&lt;/pre&gt;

[[#Top]]

==Points Distribution Method==
&lt;ul&gt;
&lt;li&gt;Initially, all nodes are given equal points&lt;/li&gt;
&lt;li&gt;Rule&lt;/li&gt;
&lt;ul&gt;
&lt;li&gt;Share whatever you have equally with your neighbors&lt;/li&gt;
&lt;/ul&gt;
&lt;li&gt;FOR NODE B:Neighbors: C&lt;/li&gt;
&lt;li&gt;Give all of its points to C&lt;/li&gt;
&lt;li&gt;FOR NODE C:Neighbors: A&lt;/li&gt;
&lt;li&gt;Give all of its points to A&lt;/li&gt;
&lt;li&gt;new point of A=old points of C&lt;/li&gt;
&lt;li&gt;new point of B=(1/2)*old points of A&lt;/li&gt;
&lt;li&gt;new point of C=(1/2)*old points of A+old points of B&lt;/li&gt;
&lt;/ul&gt;

===In Excel, Implementation===
[[File:grEx1.png|600px]]

[[File:grEx2.png|600px]]

[[File:grEx3.png|600px]]

[[#Top]]

After some nodes, points becomes constant, as shown below.

&lt;table class=&quot;tg&quot;&gt;
  &lt;tr&gt;
    &lt;th class=&quot;tg-xldj&quot;&gt;100&lt;/th&gt;
    &lt;th class=&quot;tg-xldj&quot;&gt;100&lt;/th&gt;
    &lt;th class=&quot;tg-xldj&quot;&gt;100&lt;/th&gt;
    &lt;th class=&quot;tg-xldj&quot;&gt; &lt;/th&gt;
    &lt;th class=&quot;tg-xldj&quot;&gt;300&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;100&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;50&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;150&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;150&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;50&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;100&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;100&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;75&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;125&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;125&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;50&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;125&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;125&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;62.5&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;112.5&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;112.5&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;62.5&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;125&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;125&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;56.25&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;118.75&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;118.75&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;62.5&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;118.75&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;118.75&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;59.375&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;121.875&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;121.875&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;59.375&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;118.75&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;118.75&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;60.9375&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;120.3125&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;120.3125&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;59.375&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;120.3125&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;120.3125&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;60.15625&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;119.5313&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;119.5313&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;60.15625&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;120.3125&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.3125&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;59.76563&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9219&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9219&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60.15625&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9219&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9219&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;59.96094&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.1172&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.1172&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;59.96094&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9219&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9219&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60.05859&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0195&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0195&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;59.96094&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0195&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0195&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60.00977&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9707&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9707&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60.00977&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0195&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0195&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;59.98535&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9951&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9951&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60.00977&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9951&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9951&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;59.99756&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0073&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0073&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;59.99756&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9951&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9951&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60.00366&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0012&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0012&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;59.99756&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0012&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0012&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60.00061&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9982&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9982&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60.00061&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0012&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0012&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;59.99908&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9997&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9997&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60.00061&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9997&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9997&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;59.99985&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0005&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0005&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;59.99985&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9997&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9997&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60.00023&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0001&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0001&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;59.99985&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0001&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0001&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60.00004&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9999&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9999&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60.00004&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0001&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0001&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;59.99994&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60.00004&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;59.99999&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;59.99999&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60.00001&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;59.99999&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;

[[#Top]]

===Directed Graph===
&lt;pre&gt;
import networkx as nx
import random
import matplotlib.pyplot as plt

def add_edges():
    nodes=list(G.nodes())
    for s in nodes:
        for t in nodes:
            if s!=t:
                r=random.random()
                if r&lt;=0.5:
                    G.add_edge(s,t)
    return G

#create a directed graph
G=nx.DiGraph()
G.add_nodes_from([i for i in range(10)])
add_edges()
nx.draw(G,with_labels=True)
plt.show()
&lt;/pre&gt;

OUTPUT:

[[File:v12p1.png|600px]]

[[File:v12p2.png|600px]]

[[File:v12p3.png|600px]]

===Point Calculating Program===
&lt;pre&gt;
import networkx as nx
import random
import matplotlib.pyplot as plt

def add_edges():
    nodes=list(G.nodes())
    for s in nodes:
        for t in nodes:
            if s!=t:
                r=random.random()
                if r&lt;=0.5:
                    G.add_edge(s,t)
    return G


def assign_points(G):
    nodes=list(G.nodes())
    p=[]
    for each in nodes:
        p.append(100)
    return p

def distribute_points(G,points):
    nodes=list(G.nodes())
    new_points=[]
    for i in range(len(nodes)):
        new_points.append(0)

    for n in nodes:
        out=list(G.out_edges(n))
        if len(out)==0:
            new_points[n]=new_points[n]+points[n]
        else:
            share=points[n]/len(out)
            for (src,tgt) in out:
                new_points[tgt]=new_points[tgt]+share
    return  new_points                

def keep_distributing(points,G):
    while(1):
        new_points=distribute_points(G,points)
        print(new_points)
        points=new_points
        stop=input(&quot;Press # to stop or any other key to continue&quot;)
        if stop=='#':
            break
    return new_points

#create a directed graph
G=nx.DiGraph()
G.add_nodes_from([i for i in range(10)])
add_edges()
nx.draw(G,with_labels=True)
plt.show()

#assign initial points
points=assign_points(G)

#keep distributing
final_points=keep_distributing(points,G)

&lt;/pre&gt;

Output:

[[File:v12p4.png]]

[[File:v12p5.png]]

=Collatz Conjecture=
Taught by Sudarshan sir and Amit sir, and Edited by Ms. Ami Tusharkant Choksi

If a number is even, divide it by ''2'', if it is odd, make multiply it by ''3'' and add ''1'', till you get ''1''. This simple problem is called, ''Collatz Conjecture''. 

[[File:collatz1.png|600px]]

[[File:collatz2.png|600px]]

[[File:collatz3.png|600px]]

[[File:collatz4.png|600px]]

[[File:collatz5.png|600px]]

Number is bigger doesn't mean more iterations are required. One can notice, from the output of the following program. 



The program to implement the same is as follows:
==Program==
&lt;pre&gt;
#collatz conjecture
#if num is even, divide it by 2
#if num is odd, new number is equal to 3n+1


def checkNum(num):
    iterations=1
    while(num!=1):
        if(num%2==0):
            num=int(num/2)            
        else:
            num = 3*num+1
        iterations+=1
        

    print(num,iterations)


#checkNum(12)#Output: 1 10
#checkNum(26)#Output: 1 11
checkNum(2000)#Output: 1 113
&lt;/pre&gt;

&lt;pre&gt;

#recursive approach

def checkNum(num):
    if num==1:
        return 1
    elif num%2==0:
        return checkNum(num/2)+1
    else:
        return checkNum(3*num +1)+1


output:
checkNum(26)
Out[27]: 11
checkNum(5000)
Out[28]: 29
&lt;/pre&gt;

==Program adding statement to print all iterations==
&lt;pre&gt;
def checkNum(num):
    iterations=1
    while(num!=1):
        if(num%2==0):
            num=int(num/2)            
        else:
            num = 3*num+1
        print(iterations,&quot;:&quot;,num)
        iterations+=1
        

    print(num,iterations)
&lt;/pre&gt;
==Output==
===For checkNum(2000)===
&lt;pre&gt;
1 : 1000
2 : 500
3 : 250
4 : 125
5 : 376
6 : 188
7 : 94
8 : 47
9 : 142
10 : 71
11 : 214
12 : 107
13 : 322
14 : 161
15 : 484
16 : 242
17 : 121
18 : 364
19 : 182
20 : 91
21 : 274
22 : 137
23 : 412
24 : 206
25 : 103
26 : 310
27 : 155
28 : 466
29 : 233
30 : 700
31 : 350
32 : 175
33 : 526
34 : 263
35 : 790
36 : 395
37 : 1186
38 : 593
39 : 1780
40 : 890
41 : 445
42 : 1336
43 : 668
44 : 334
45 : 167
46 : 502
47 : 251
48 : 754
49 : 377
50 : 1132
51 : 566
52 : 283
53 : 850
54 : 425
55 : 1276
56 : 638
57 : 319
58 : 958
59 : 479
60 : 1438
61 : 719
62 : 2158
63 : 1079
64 : 3238
65 : 1619
66 : 4858
67 : 2429
68 : 7288
69 : 3644
70 : 1822
71 : 911
72 : 2734
73 : 1367
74 : 4102
75 : 2051
76 : 6154
77 : 3077
78 : 9232
79 : 4616
80 : 2308
81 : 1154
82 : 577
83 : 1732
84 : 866
85 : 433
86 : 1300
87 : 650
88 : 325
89 : 976
90 : 488
91 : 244
92 : 122
93 : 61
94 : 184
95 : 92
96 : 46
97 : 23
98 : 70
99 : 35
100 : 106
101 : 53
102 : 160
103 : 80
104 : 40
105 : 20
106 : 10
107 : 5
108 : 16
109 : 8
110 : 4
111 : 2
112 : 1
1 113
&lt;/pre&gt;

===For checkNum(5000)===
&lt;pre&gt;
1 : 2500
2 : 1250
3 : 625
4 : 1876
5 : 938
6 : 469
7 : 1408
8 : 704
9 : 352
10 : 176
11 : 88
12 : 44
13 : 22
14 : 11
15 : 34
16 : 17
17 : 52
18 : 26
19 : 13
20 : 40
21 : 20
22 : 10
23 : 5
24 : 16
25 : 8
26 : 4
27 : 2
28 : 1
1 29
&lt;/pre&gt;
===For checkNum(25000000)===
&lt;pre&gt;
1 : 12500000
2 : 6250000
3 : 3125000
4 : 1562500
5 : 781250
6 : 390625
7 : 1171876
8 : 585938
9 : 292969
10 : 878908
11 : 439454
12 : 219727
13 : 659182
14 : 329591
15 : 988774
16 : 494387
17 : 1483162
18 : 741581
19 : 2224744
20 : 1112372
21 : 556186
22 : 278093
23 : 834280
24 : 417140
25 : 208570
26 : 104285
27 : 312856
28 : 156428
29 : 78214
30 : 39107
31 : 117322
32 : 58661
33 : 175984
34 : 87992
35 : 43996
36 : 21998
37 : 10999
38 : 32998
39 : 16499
40 : 49498
41 : 24749
42 : 74248
43 : 37124
44 : 18562
45 : 9281
46 : 27844
47 : 13922
48 : 6961
49 : 20884
50 : 10442
51 : 5221
52 : 15664
53 : 7832
54 : 3916
55 : 1958
56 : 979
57 : 2938
58 : 1469
59 : 4408
60 : 2204
61 : 1102
62 : 551
63 : 1654
64 : 827
65 : 2482
66 : 1241
67 : 3724
68 : 1862
69 : 931
70 : 2794
71 : 1397
72 : 4192
73 : 2096
74 : 1048
75 : 524
76 : 262
77 : 131
78 : 394
79 : 197
80 : 592
81 : 296
82 : 148
83 : 74
84 : 37
85 : 112
86 : 56
87 : 28
88 : 14
89 : 7
90 : 22
91 : 11
92 : 34
93 : 17
94 : 52
95 : 26
96 : 13
97 : 40
98 : 20
99 : 10
100 : 5
101 : 16
102 : 8
103 : 4
104 : 2
105 : 1
1 106
&lt;/pre&gt;

Happy Life ahead!!!

[[File:end1.png]]</text>
      <sha1>1bj6eyk8ri30266yoh9cf7vdfa15ojz</sha1>
    </revision>
    <revision>
      <id>4496</id>
      <parentid>4490</parentid>
      <timestamp>2018-10-18T03:05:53Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* Point Calculating Program */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="55364">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_12 Contributors of this page]

=Page Rank - How does Google Work=
One web page is having link to other page, that is a page is referring to other page. Google uses ''Page Rank'' algorithm to choose which page should be displayed first.

If we have network, connections as below:
[[File:rank0.png]]

We want to pick a leader out of all these nodes. How to pick a leader?  Why to elect a leader? It is because we want to find the super power of available nodes.                     
[[File:rank1.png]]

For example, the application wherein, we want to find the most impressive person of the  few ones. How to decide it? As shown in below figure, each node will communicate with other, randomly, we implement the count for each node, how many times, the particular node is being visited.
[[File:rank2.png]]

[[#Top]]

As shown in following, figure, all nodes are visited and each node is marked with the 
number i.e.number of times the node is visited.
[[File:rank3.png]]

The node with the maximum count, becomes the winner. Here, node with 120 count in figure 
below, is the winner. i.e. The person with 120 count in the figure is the most impressive 
person in the community being considered.
[[File:rank4.png]]

[[File:rank5.png]]

[[File:rank6.png]]

[[File:rank7.png]]


[[File:rank8.png]]

[[#Top]]

Google selects the page rank in this matter. Each web page is connected to other web page with web links. To a page, maximum link is there, that will be put on top results in Google search results.
[[File:rank9.png]]

Google uses web crawler. The crawler takes the random walk on the www network and rank the web sites.
[[File:rank10.png]]

This way Google ranks the pages and displays search results, according to page rank.
[[File:rank11.png]]

e.g.we search for ''mysore city''. Google has 10,000 results. But it displays the results in the sequence of page rank of search results, As shown in figure below.
[[File:mysore.png]]

[[#Top]]

==Page rank algorithm ==
As shown in beautiful figure below, few nodes combinely selected one as the leader, then that leader and other nodes, have selected         other as a leader. This way, finally the final leader is elected.
[[File:rank12.png|600px]]


[[File:graph00.png|600px]]


[[File:graph01.png|600px]]

[[#Top]]

==Gragh Drawing Program1==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
nx.barbell_graph(4,2)
G=nx.barbell_graph(4,2)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:Graph003.png|600px]]

[[#Top]]

==Gragh Drawing Program2==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
nx.barbell_graph(4,3)
G=nx.barbell_graph(4,3)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:Graph004.png|600px]]

[[#Top]]

==Gragh Drawing Program3==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
nx.barbell_graph(5,3)
G=nx.barbell_graph(5,3)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:Graph005.png|600px]]

[[#Top]]

==Complete Graph==
Complete graph is a graph, wherein, each node is connected to each other nodes in a graph.

&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.complete_graph(4)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:

[[File:completegraph001.png|600px]]

[[#Top]]

==Cycle graph==

&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.cycle_graph(5)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:

[[File:cyclegraph1.png|600px]]

[[#Top]]

==Ladder graph==

&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.ladder_graph(5)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:

[[File:laddergraph.png|600px]]

[[#Top]]

==Path Graph==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.path_graph(6)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:

[[File:pathgraph.png|600px]]

[[#Top]]

==Star Graph==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.star_graph(5)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:stargraph.png|600px]]

[[#Top]]

==Star Graph of 4 Nodes==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.star_graph(4)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:stargraph4points.png|600px]]

==Wheel Graph==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.wheel_graph(4)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:wheelgraph.png|600px]]

[[#Top]]

==Wheel Graph of 5 nodes==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.wheel_graph(5)
nx.draw(G)
plt.show()

&lt;/pre&gt;

Output:

[[File:wheelgraph5nodes.png|600px]]

[[#Top]]

==Wheel Graph of 6 nodes==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.wheel_graph(6)
nx.draw(G)
plt.show()

&lt;/pre&gt;

Output:

[[File:wheelgraph6nodes.png|600px]]

[[#Top]]

==Random Graph==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.gnp_random_graph(5,0.5)
nx.draw(G)
plt.show()

&lt;/pre&gt;

Output:

[[File:randomgraph1.png|600px]]


Running the same above program, we will get different output, as shown below, as it is random graph.

[[File:randomgraph2.png|600px]]

[[#Top]]

==Page Rank Algorithm Implementation==

===Random Directed Graph===
&lt;pre&gt;
import networkx as nx
import random
import matplotlib.pyplot as plt

#Draw random directed graph
G=nx.gnp_random_graph(10,0.5,directed=True)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output: 

[[File:randomDirectedGraph.png|600px]]


===Random Directed Graph with Labels===
&lt;pre&gt;
import networkx as nx
import random
import matplotlib.pyplot as plt

#Draw random directed graph 
G=nx.gnp_random_graph(10,0.5,directed=True)
#Give label numbering to nodes
nx.draw(G,with_labels=True)
plt.show()

&lt;/pre&gt;

Output:

[[File:randomDirectedGraphwithLabels.png|600px]]


[[#Top]]

===Page Rank Coding===
&lt;pre&gt;
import networkx as nx
import random
import matplotlib.pyplot as plt
import operator

#Draw random directed graph 
G=nx.gnp_random_graph(10,0.5,directed=True)
#Give label numbering to nodes
nx.draw(G,with_labels=True)
plt.show()

#x is the random source node
x=random.choice([i for i in range(G.number_of_nodes())])

#dictionary to maintain counter
dictCounter={}
#initialize the counter of each node as 0
for i in range(G.number_of_nodes()):
    dictCounter[i]=0
dictCounter[x]=dictCounter[x]+1

for i in range(10000):
    listn=list(G.neighbors(x))
    #if x is a sink node, we need to select random node for random walk
    #, else select random neighbor node

    if(len(listn)==0):
        x=random.choice([i for i in range(G.number_of_nodes())])
        dictCounter[x]=dictCounter[x]+1
    else:
        #choose a node randomly from neightbors
        x=random.choice(listn)
        dictCounter[x]=dictCounter[x]+1

p=nx.pagerank(G)
sorted_p=sorted(p.items(),key=operator.itemgetter(1))
sorted_rw=sorted(dictCounter.items(),key=operator.itemgetter(1))                        
#print(p)
#print(dictCounter)

print(sorted_p)
print(sorted_rw)

&lt;/pre&gt;

Output:

&lt;pre&gt;
[(2, 0.07139920240302768), (5, 0.07464882519777695), (3, 0.08527469366832419), 
(6, 0.08665188647066119), (4, 0.0987815549542114), (0, 0.10858415997562518), 
(9, 0.110369696943925), (8, 0.11456211367660116), (1, 0.11682018308814024), 
(7, 0.13290768362170685)]
[(2, 4), (5, 7), (8, 7), (6, 8), (3, 11), (7, 11), (1, 12), (4, 12), (0, 13), (9, 16)]
&lt;/pre&gt;

[[#Top]]

=Email communication Network=
==Page rank :page distribution method==
===Revision: Graph===
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
G=nx.cycle_graph(4)
labels={0:&quot;Bangluru&quot;,1:&quot;Gawhati&quot;,2:&quot;Kolkata&quot;,3:&quot;Chennai&quot;}
nx.draw(G,with_labels=True,labels=labels)
plt.show()
&lt;/pre&gt;

Output:

[[File:revGRAPH.png]]


===Directed Graph  Example===

[[File:directedGraphExample.png|600px]]

&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
G=nx.gnp_random_graph(4,.5,directed=True)
labels={0:&quot;Bangluru&quot;,1:&quot;Gawhati&quot;,2:&quot;Kolkata&quot;,3:&quot;Chennai&quot;}
nx.draw(G,with_labels=True,labels=labels)
plt.show()

&lt;/pre&gt;

Output:
[[File:directedg.png|600px]]


[[#Top]]


==Bidirectional with Parallel and self loops==
==Bidirectional with Parallel edges==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
G=nx.MultiDiGraph()

G.add_node(1)
G.add_node(2)
G.add_node(3)
G.add_node(4)

G.add_path([1,2,3,4,1])
G.add_edge(1,4)
nx.draw(G,with_labels=True)
plt.show()
&lt;/pre&gt;

Output: 

[[File:bidirectionalg.png]]

==Bidirectional with Self loops==
It doesn't show as graph. It is not taught, I did it myself.(Ms. Ami TUSHARKANT CHOKSI)
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
G=nx.MultiDiGraph()

G.add_node(1)
G.add_node(2)
G.add_node(3)
G.add_node(4)

G.add_path([1,2,3,4,1])
G.add_edge(1,4)
G.add_edge(1,1)
nx.draw(G,with_labels=True)
d=G.selfloop_edges()
print(d)
plt.show()

&lt;/pre&gt;

#Output: &lt;generator object selfloop_edges.&lt;locals&gt;.&lt;genexpr&gt; at 0x0B790150&gt;
#It shows self loop is there in the graph


==Directed Undirected Graph==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

#undirected graph
U=nx.Graph()

#directed graph
G=nx.DiGraph()

#nodes in graph
print(G.nodes())#Output: []
G.add_nodes_from([i for i in range(5)])
print(G.nodes())#Output: [0, 1, 2, 3, 4]

#edges
print(G.out_edges())#Output:[]

print(G.in_edges())#Output:[]

G.add_edge(1,2)
print(G.edges())#Output: [(1, 2)]
print(G.in_edges())#Output: [(1, 2)]
print(G.out_edges())#Output: [(1, 2)]

G.add_edge(0,3)
G.add_edge(2,3)
G.add_edge(3,2)
G.add_edge(3,4)
G.add_edge(4,1)
print(G.out_edges(2))#Output: [(2, 3)]
print(G.out_edges(3))#Output:[(3, 2), (3, 4)]
print(G.in_edges(3))#Output:[(0, 3), (2, 3)]

&lt;/pre&gt;

[[#Top]]

==Points Distribution Method==
&lt;ul&gt;
&lt;li&gt;Initially, all nodes are given equal points&lt;/li&gt;
&lt;li&gt;Rule&lt;/li&gt;
&lt;ul&gt;
&lt;li&gt;Share whatever you have equally with your neighbors&lt;/li&gt;
&lt;/ul&gt;
&lt;li&gt;FOR NODE B:Neighbors: C&lt;/li&gt;
&lt;li&gt;Give all of its points to C&lt;/li&gt;
&lt;li&gt;FOR NODE C:Neighbors: A&lt;/li&gt;
&lt;li&gt;Give all of its points to A&lt;/li&gt;
&lt;li&gt;new point of A=old points of C&lt;/li&gt;
&lt;li&gt;new point of B=(1/2)*old points of A&lt;/li&gt;
&lt;li&gt;new point of C=(1/2)*old points of A+old points of B&lt;/li&gt;
&lt;/ul&gt;

===In Excel, Implementation===
[[File:grEx1.png|600px]]

[[File:grEx2.png|600px]]

[[File:grEx3.png|600px]]

[[#Top]]

After some nodes, points becomes constant, as shown below.

&lt;table class=&quot;tg&quot;&gt;
  &lt;tr&gt;
    &lt;th class=&quot;tg-xldj&quot;&gt;100&lt;/th&gt;
    &lt;th class=&quot;tg-xldj&quot;&gt;100&lt;/th&gt;
    &lt;th class=&quot;tg-xldj&quot;&gt;100&lt;/th&gt;
    &lt;th class=&quot;tg-xldj&quot;&gt; &lt;/th&gt;
    &lt;th class=&quot;tg-xldj&quot;&gt;300&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;100&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;50&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;150&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;150&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;50&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;100&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;100&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;75&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;125&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;125&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;50&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;125&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;125&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;62.5&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;112.5&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;112.5&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;62.5&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;125&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;125&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;56.25&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;118.75&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;118.75&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;62.5&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;118.75&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;118.75&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;59.375&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;121.875&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;121.875&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;59.375&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;118.75&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;118.75&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;60.9375&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;120.3125&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;120.3125&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;59.375&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;120.3125&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;120.3125&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;60.15625&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;119.5313&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;119.5313&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;60.15625&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;120.3125&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.3125&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;59.76563&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9219&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9219&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60.15625&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9219&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9219&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;59.96094&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.1172&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.1172&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;59.96094&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9219&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9219&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60.05859&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0195&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0195&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;59.96094&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0195&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0195&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60.00977&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9707&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9707&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60.00977&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0195&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0195&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;59.98535&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9951&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9951&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60.00977&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9951&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9951&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;59.99756&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0073&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0073&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;59.99756&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9951&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9951&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60.00366&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0012&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0012&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;59.99756&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0012&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0012&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60.00061&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9982&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9982&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60.00061&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0012&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0012&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;59.99908&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9997&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9997&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60.00061&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9997&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9997&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;59.99985&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0005&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0005&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;59.99985&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9997&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9997&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60.00023&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0001&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0001&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;59.99985&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0001&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0001&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60.00004&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9999&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9999&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60.00004&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0001&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0001&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;59.99994&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60.00004&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;59.99999&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;59.99999&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60.00001&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;59.99999&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;

[[#Top]]

===Directed Graph===
&lt;pre&gt;
import networkx as nx
import random
import matplotlib.pyplot as plt

def add_edges():
    nodes=list(G.nodes())
    for s in nodes:
        for t in nodes:
            if s!=t:
                r=random.random()
                if r&lt;=0.5:
                    G.add_edge(s,t)
    return G

#create a directed graph
G=nx.DiGraph()
G.add_nodes_from([i for i in range(10)])
add_edges()
nx.draw(G,with_labels=True)
plt.show()
&lt;/pre&gt;

OUTPUT:

[[File:v12p1.png|600px]]

[[File:v12p2.png|600px]]

[[File:v12p3.png|600px]]

===Point Calculating Program===
&lt;pre&gt;
import networkx as nx
import random
import matplotlib.pyplot as plt

def add_edges():
    nodes=list(G.nodes())
    for s in nodes:
        for t in nodes:
            if s!=t:
                r=random.random()
                if r&lt;=0.5:
                    G.add_edge(s,t)
    return G


def assign_points(G):
    nodes=list(G.nodes())
    p=[]
    for each in nodes:
        p.append(100)
    return p

def distribute_points(G,points):
    nodes=list(G.nodes())
    new_points=[]
    for i in range(len(nodes)):
        new_points.append(0)

    for n in nodes:
        out=list(G.out_edges(n))
        if len(out)==0:
            new_points[n]=new_points[n]+points[n]
        else:
            share=points[n]/len(out)
            for (src,tgt) in out:
                new_points[tgt]=new_points[tgt]+share
    return  new_points                

def keep_distributing(points,G):
    while(1):
        new_points=distribute_points(G,points)
        print(new_points)
        points=new_points
        stop=input(&quot;Press # to stop or any other key to continue&quot;)
        if stop=='#':
            break
    return new_points

#create a directed graph
G=nx.DiGraph()
G.add_nodes_from([i for i in range(10)])
add_edges()
nx.draw(G,with_labels=True)
plt.show()

#assign initial points
points=assign_points(G)

#keep distributing
final_points=keep_distributing(points,G)

&lt;/pre&gt;

Output:

[[File:v12p4.png]]

[[File:v12p5.png]]

==Complete page rank using point calculation ==
&lt;pre&gt;
import networkx as nx
import random
import matplotlib.pyplot as plt

def add_edges():
    nodes=list(G.nodes())
    for s in nodes:
        for t in nodes:
            if s!=t:
                r=random.random()
                if r&lt;=0.5:
                    G.add_edge(s,t)
    return G


def assign_points(G):
    nodes=list(G.nodes())
    p=[]
    for each in nodes:
        p.append(100)
    return p

def distribute_points(G,points):
    nodes=list(G.nodes())
    new_points=[]
    for i in range(len(nodes)):
        new_points.append(0)

    for n in nodes:
        out=list(G.out_edges(n))
        if len(out)==0:
            new_points[n]=new_points[n]+points[n]
        else:
            share=points[n]/len(out)
            for (src,tgt) in out:
                new_points[tgt]=new_points[tgt]+share
    return  new_points                

def keep_distributing(points,G):
    while(1):
        new_points=distribute_points(G,points)
        print(new_points)
        points=new_points
        stop=input(&quot;Press # to stop or any other key to continue&quot;)
        if stop=='#':
            break
    return new_points


def rank_by_points(points):
    d={}
    for i in range(len(points)):
        d[i]=points[i]
    print(sorted(d.items(),key=lambda f:f[1]))
    

#create a directed graph
G=nx.DiGraph()
G.add_nodes_from([i for i in range(10)])
add_edges()
nx.draw(G,with_labels=True)
plt.show()

#assign initial points
points=assign_points(G)

#keep distributing
final_points=keep_distributing(points,G)
rank_by_points(final_points)

#default networkx function
result = nx.pagerank(G)
print(sorted(result.items(),key=lambda f:f[1]))

&lt;/pre&gt;

Output:
[[File:finalrank.png]]

=Collatz Conjecture=
Taught by Sudarshan sir and Amit sir, and Edited by Ms. Ami Tusharkant Choksi

If a number is even, divide it by ''2'', if it is odd, make multiply it by ''3'' and add ''1'', till you get ''1''. This simple problem is called, ''Collatz Conjecture''. 

[[File:collatz1.png|600px]]

[[File:collatz2.png|600px]]

[[File:collatz3.png|600px]]

[[File:collatz4.png|600px]]

[[File:collatz5.png|600px]]

Number is bigger doesn't mean more iterations are required. One can notice, from the output of the following program. 



The program to implement the same is as follows:
==Program==
&lt;pre&gt;
#collatz conjecture
#if num is even, divide it by 2
#if num is odd, new number is equal to 3n+1


def checkNum(num):
    iterations=1
    while(num!=1):
        if(num%2==0):
            num=int(num/2)            
        else:
            num = 3*num+1
        iterations+=1
        

    print(num,iterations)


#checkNum(12)#Output: 1 10
#checkNum(26)#Output: 1 11
checkNum(2000)#Output: 1 113
&lt;/pre&gt;

&lt;pre&gt;

#recursive approach

def checkNum(num):
    if num==1:
        return 1
    elif num%2==0:
        return checkNum(num/2)+1
    else:
        return checkNum(3*num +1)+1


output:
checkNum(26)
Out[27]: 11
checkNum(5000)
Out[28]: 29
&lt;/pre&gt;

==Program adding statement to print all iterations==
&lt;pre&gt;
def checkNum(num):
    iterations=1
    while(num!=1):
        if(num%2==0):
            num=int(num/2)            
        else:
            num = 3*num+1
        print(iterations,&quot;:&quot;,num)
        iterations+=1
        

    print(num,iterations)
&lt;/pre&gt;
==Output==
===For checkNum(2000)===
&lt;pre&gt;
1 : 1000
2 : 500
3 : 250
4 : 125
5 : 376
6 : 188
7 : 94
8 : 47
9 : 142
10 : 71
11 : 214
12 : 107
13 : 322
14 : 161
15 : 484
16 : 242
17 : 121
18 : 364
19 : 182
20 : 91
21 : 274
22 : 137
23 : 412
24 : 206
25 : 103
26 : 310
27 : 155
28 : 466
29 : 233
30 : 700
31 : 350
32 : 175
33 : 526
34 : 263
35 : 790
36 : 395
37 : 1186
38 : 593
39 : 1780
40 : 890
41 : 445
42 : 1336
43 : 668
44 : 334
45 : 167
46 : 502
47 : 251
48 : 754
49 : 377
50 : 1132
51 : 566
52 : 283
53 : 850
54 : 425
55 : 1276
56 : 638
57 : 319
58 : 958
59 : 479
60 : 1438
61 : 719
62 : 2158
63 : 1079
64 : 3238
65 : 1619
66 : 4858
67 : 2429
68 : 7288
69 : 3644
70 : 1822
71 : 911
72 : 2734
73 : 1367
74 : 4102
75 : 2051
76 : 6154
77 : 3077
78 : 9232
79 : 4616
80 : 2308
81 : 1154
82 : 577
83 : 1732
84 : 866
85 : 433
86 : 1300
87 : 650
88 : 325
89 : 976
90 : 488
91 : 244
92 : 122
93 : 61
94 : 184
95 : 92
96 : 46
97 : 23
98 : 70
99 : 35
100 : 106
101 : 53
102 : 160
103 : 80
104 : 40
105 : 20
106 : 10
107 : 5
108 : 16
109 : 8
110 : 4
111 : 2
112 : 1
1 113
&lt;/pre&gt;

===For checkNum(5000)===
&lt;pre&gt;
1 : 2500
2 : 1250
3 : 625
4 : 1876
5 : 938
6 : 469
7 : 1408
8 : 704
9 : 352
10 : 176
11 : 88
12 : 44
13 : 22
14 : 11
15 : 34
16 : 17
17 : 52
18 : 26
19 : 13
20 : 40
21 : 20
22 : 10
23 : 5
24 : 16
25 : 8
26 : 4
27 : 2
28 : 1
1 29
&lt;/pre&gt;
===For checkNum(25000000)===
&lt;pre&gt;
1 : 12500000
2 : 6250000
3 : 3125000
4 : 1562500
5 : 781250
6 : 390625
7 : 1171876
8 : 585938
9 : 292969
10 : 878908
11 : 439454
12 : 219727
13 : 659182
14 : 329591
15 : 988774
16 : 494387
17 : 1483162
18 : 741581
19 : 2224744
20 : 1112372
21 : 556186
22 : 278093
23 : 834280
24 : 417140
25 : 208570
26 : 104285
27 : 312856
28 : 156428
29 : 78214
30 : 39107
31 : 117322
32 : 58661
33 : 175984
34 : 87992
35 : 43996
36 : 21998
37 : 10999
38 : 32998
39 : 16499
40 : 49498
41 : 24749
42 : 74248
43 : 37124
44 : 18562
45 : 9281
46 : 27844
47 : 13922
48 : 6961
49 : 20884
50 : 10442
51 : 5221
52 : 15664
53 : 7832
54 : 3916
55 : 1958
56 : 979
57 : 2938
58 : 1469
59 : 4408
60 : 2204
61 : 1102
62 : 551
63 : 1654
64 : 827
65 : 2482
66 : 1241
67 : 3724
68 : 1862
69 : 931
70 : 2794
71 : 1397
72 : 4192
73 : 2096
74 : 1048
75 : 524
76 : 262
77 : 131
78 : 394
79 : 197
80 : 592
81 : 296
82 : 148
83 : 74
84 : 37
85 : 112
86 : 56
87 : 28
88 : 14
89 : 7
90 : 22
91 : 11
92 : 34
93 : 17
94 : 52
95 : 26
96 : 13
97 : 40
98 : 20
99 : 10
100 : 5
101 : 16
102 : 8
103 : 4
104 : 2
105 : 1
1 106
&lt;/pre&gt;

Happy Life ahead!!!

[[File:end1.png]]</text>
      <sha1>qbogvz74b3jg398kdlpvbizc7tny4t2</sha1>
    </revision>
    <revision>
      <id>4498</id>
      <parentid>4496</parentid>
      <timestamp>2018-10-18T03:08:08Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* Complete page rank using point calculation */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="55388">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_12 Contributors of this page]

=Page Rank - How does Google Work=
One web page is having link to other page, that is a page is referring to other page. Google uses ''Page Rank'' algorithm to choose which page should be displayed first.

If we have network, connections as below:
[[File:rank0.png]]

We want to pick a leader out of all these nodes. How to pick a leader?  Why to elect a leader? It is because we want to find the super power of available nodes.                     
[[File:rank1.png]]

For example, the application wherein, we want to find the most impressive person of the  few ones. How to decide it? As shown in below figure, each node will communicate with other, randomly, we implement the count for each node, how many times, the particular node is being visited.
[[File:rank2.png]]

[[#Top]]

As shown in following, figure, all nodes are visited and each node is marked with the 
number i.e.number of times the node is visited.
[[File:rank3.png]]

The node with the maximum count, becomes the winner. Here, node with 120 count in figure 
below, is the winner. i.e. The person with 120 count in the figure is the most impressive 
person in the community being considered.
[[File:rank4.png]]

[[File:rank5.png]]

[[File:rank6.png]]

[[File:rank7.png]]


[[File:rank8.png]]

[[#Top]]

Google selects the page rank in this matter. Each web page is connected to other web page with web links. To a page, maximum link is there, that will be put on top results in Google search results.
[[File:rank9.png]]

Google uses web crawler. The crawler takes the random walk on the www network and rank the web sites.
[[File:rank10.png]]

This way Google ranks the pages and displays search results, according to page rank.
[[File:rank11.png]]

e.g.we search for ''mysore city''. Google has 10,000 results. But it displays the results in the sequence of page rank of search results, As shown in figure below.
[[File:mysore.png]]

[[#Top]]

==Page rank algorithm ==
As shown in beautiful figure below, few nodes combinely selected one as the leader, then that leader and other nodes, have selected         other as a leader. This way, finally the final leader is elected.
[[File:rank12.png|600px]]


[[File:graph00.png|600px]]


[[File:graph01.png|600px]]

[[#Top]]

==Gragh Drawing Program1==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
nx.barbell_graph(4,2)
G=nx.barbell_graph(4,2)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:Graph003.png|600px]]

[[#Top]]

==Gragh Drawing Program2==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
nx.barbell_graph(4,3)
G=nx.barbell_graph(4,3)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:Graph004.png|600px]]

[[#Top]]

==Gragh Drawing Program3==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
nx.barbell_graph(5,3)
G=nx.barbell_graph(5,3)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:Graph005.png|600px]]

[[#Top]]

==Complete Graph==
Complete graph is a graph, wherein, each node is connected to each other nodes in a graph.

&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.complete_graph(4)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:

[[File:completegraph001.png|600px]]

[[#Top]]

==Cycle graph==

&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.cycle_graph(5)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:

[[File:cyclegraph1.png|600px]]

[[#Top]]

==Ladder graph==

&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.ladder_graph(5)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:

[[File:laddergraph.png|600px]]

[[#Top]]

==Path Graph==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.path_graph(6)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:

[[File:pathgraph.png|600px]]

[[#Top]]

==Star Graph==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.star_graph(5)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:stargraph.png|600px]]

[[#Top]]

==Star Graph of 4 Nodes==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.star_graph(4)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:stargraph4points.png|600px]]

==Wheel Graph==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.wheel_graph(4)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:wheelgraph.png|600px]]

[[#Top]]

==Wheel Graph of 5 nodes==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.wheel_graph(5)
nx.draw(G)
plt.show()

&lt;/pre&gt;

Output:

[[File:wheelgraph5nodes.png|600px]]

[[#Top]]

==Wheel Graph of 6 nodes==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.wheel_graph(6)
nx.draw(G)
plt.show()

&lt;/pre&gt;

Output:

[[File:wheelgraph6nodes.png|600px]]

[[#Top]]

==Random Graph==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.gnp_random_graph(5,0.5)
nx.draw(G)
plt.show()

&lt;/pre&gt;

Output:

[[File:randomgraph1.png|600px]]


Running the same above program, we will get different output, as shown below, as it is random graph.

[[File:randomgraph2.png|600px]]

[[#Top]]

==Page Rank Algorithm Implementation==

===Random Directed Graph===
&lt;pre&gt;
import networkx as nx
import random
import matplotlib.pyplot as plt

#Draw random directed graph
G=nx.gnp_random_graph(10,0.5,directed=True)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output: 

[[File:randomDirectedGraph.png|600px]]


===Random Directed Graph with Labels===
&lt;pre&gt;
import networkx as nx
import random
import matplotlib.pyplot as plt

#Draw random directed graph 
G=nx.gnp_random_graph(10,0.5,directed=True)
#Give label numbering to nodes
nx.draw(G,with_labels=True)
plt.show()

&lt;/pre&gt;

Output:

[[File:randomDirectedGraphwithLabels.png|600px]]


[[#Top]]

===Page Rank Coding===
&lt;pre&gt;
import networkx as nx
import random
import matplotlib.pyplot as plt
import operator

#Draw random directed graph 
G=nx.gnp_random_graph(10,0.5,directed=True)
#Give label numbering to nodes
nx.draw(G,with_labels=True)
plt.show()

#x is the random source node
x=random.choice([i for i in range(G.number_of_nodes())])

#dictionary to maintain counter
dictCounter={}
#initialize the counter of each node as 0
for i in range(G.number_of_nodes()):
    dictCounter[i]=0
dictCounter[x]=dictCounter[x]+1

for i in range(10000):
    listn=list(G.neighbors(x))
    #if x is a sink node, we need to select random node for random walk
    #, else select random neighbor node

    if(len(listn)==0):
        x=random.choice([i for i in range(G.number_of_nodes())])
        dictCounter[x]=dictCounter[x]+1
    else:
        #choose a node randomly from neightbors
        x=random.choice(listn)
        dictCounter[x]=dictCounter[x]+1

p=nx.pagerank(G)
sorted_p=sorted(p.items(),key=operator.itemgetter(1))
sorted_rw=sorted(dictCounter.items(),key=operator.itemgetter(1))                        
#print(p)
#print(dictCounter)

print(sorted_p)
print(sorted_rw)

&lt;/pre&gt;

Output:

&lt;pre&gt;
[(2, 0.07139920240302768), (5, 0.07464882519777695), (3, 0.08527469366832419), 
(6, 0.08665188647066119), (4, 0.0987815549542114), (0, 0.10858415997562518), 
(9, 0.110369696943925), (8, 0.11456211367660116), (1, 0.11682018308814024), 
(7, 0.13290768362170685)]
[(2, 4), (5, 7), (8, 7), (6, 8), (3, 11), (7, 11), (1, 12), (4, 12), (0, 13), (9, 16)]
&lt;/pre&gt;

[[#Top]]

=Email communication Network=
==Page rank :page distribution method==
===Revision: Graph===
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
G=nx.cycle_graph(4)
labels={0:&quot;Bangluru&quot;,1:&quot;Gawhati&quot;,2:&quot;Kolkata&quot;,3:&quot;Chennai&quot;}
nx.draw(G,with_labels=True,labels=labels)
plt.show()
&lt;/pre&gt;

Output:

[[File:revGRAPH.png]]


===Directed Graph  Example===

[[File:directedGraphExample.png|600px]]

&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
G=nx.gnp_random_graph(4,.5,directed=True)
labels={0:&quot;Bangluru&quot;,1:&quot;Gawhati&quot;,2:&quot;Kolkata&quot;,3:&quot;Chennai&quot;}
nx.draw(G,with_labels=True,labels=labels)
plt.show()

&lt;/pre&gt;

Output:
[[File:directedg.png|600px]]


[[#Top]]


==Bidirectional with Parallel and self loops==
==Bidirectional with Parallel edges==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
G=nx.MultiDiGraph()

G.add_node(1)
G.add_node(2)
G.add_node(3)
G.add_node(4)

G.add_path([1,2,3,4,1])
G.add_edge(1,4)
nx.draw(G,with_labels=True)
plt.show()
&lt;/pre&gt;

Output: 

[[File:bidirectionalg.png]]

==Bidirectional with Self loops==
It doesn't show as graph. It is not taught, I did it myself.(Ms. Ami TUSHARKANT CHOKSI)
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
G=nx.MultiDiGraph()

G.add_node(1)
G.add_node(2)
G.add_node(3)
G.add_node(4)

G.add_path([1,2,3,4,1])
G.add_edge(1,4)
G.add_edge(1,1)
nx.draw(G,with_labels=True)
d=G.selfloop_edges()
print(d)
plt.show()

&lt;/pre&gt;

#Output: &lt;generator object selfloop_edges.&lt;locals&gt;.&lt;genexpr&gt; at 0x0B790150&gt;
#It shows self loop is there in the graph


==Directed Undirected Graph==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

#undirected graph
U=nx.Graph()

#directed graph
G=nx.DiGraph()

#nodes in graph
print(G.nodes())#Output: []
G.add_nodes_from([i for i in range(5)])
print(G.nodes())#Output: [0, 1, 2, 3, 4]

#edges
print(G.out_edges())#Output:[]

print(G.in_edges())#Output:[]

G.add_edge(1,2)
print(G.edges())#Output: [(1, 2)]
print(G.in_edges())#Output: [(1, 2)]
print(G.out_edges())#Output: [(1, 2)]

G.add_edge(0,3)
G.add_edge(2,3)
G.add_edge(3,2)
G.add_edge(3,4)
G.add_edge(4,1)
print(G.out_edges(2))#Output: [(2, 3)]
print(G.out_edges(3))#Output:[(3, 2), (3, 4)]
print(G.in_edges(3))#Output:[(0, 3), (2, 3)]

&lt;/pre&gt;

[[#Top]]

==Points Distribution Method==
&lt;ul&gt;
&lt;li&gt;Initially, all nodes are given equal points&lt;/li&gt;
&lt;li&gt;Rule&lt;/li&gt;
&lt;ul&gt;
&lt;li&gt;Share whatever you have equally with your neighbors&lt;/li&gt;
&lt;/ul&gt;
&lt;li&gt;FOR NODE B:Neighbors: C&lt;/li&gt;
&lt;li&gt;Give all of its points to C&lt;/li&gt;
&lt;li&gt;FOR NODE C:Neighbors: A&lt;/li&gt;
&lt;li&gt;Give all of its points to A&lt;/li&gt;
&lt;li&gt;new point of A=old points of C&lt;/li&gt;
&lt;li&gt;new point of B=(1/2)*old points of A&lt;/li&gt;
&lt;li&gt;new point of C=(1/2)*old points of A+old points of B&lt;/li&gt;
&lt;/ul&gt;

===In Excel, Implementation===
[[File:grEx1.png|600px]]

[[File:grEx2.png|600px]]

[[File:grEx3.png|600px]]

[[#Top]]

After some nodes, points becomes constant, as shown below.

&lt;table class=&quot;tg&quot;&gt;
  &lt;tr&gt;
    &lt;th class=&quot;tg-xldj&quot;&gt;100&lt;/th&gt;
    &lt;th class=&quot;tg-xldj&quot;&gt;100&lt;/th&gt;
    &lt;th class=&quot;tg-xldj&quot;&gt;100&lt;/th&gt;
    &lt;th class=&quot;tg-xldj&quot;&gt; &lt;/th&gt;
    &lt;th class=&quot;tg-xldj&quot;&gt;300&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;100&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;50&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;150&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;150&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;50&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;100&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;100&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;75&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;125&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;125&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;50&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;125&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;125&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;62.5&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;112.5&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;112.5&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;62.5&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;125&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;125&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;56.25&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;118.75&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;118.75&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;62.5&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;118.75&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;118.75&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;59.375&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;121.875&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;121.875&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;59.375&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;118.75&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;118.75&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;60.9375&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;120.3125&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;120.3125&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;59.375&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;120.3125&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;120.3125&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;60.15625&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;119.5313&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;119.5313&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;60.15625&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;120.3125&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.3125&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;59.76563&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9219&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9219&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60.15625&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9219&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9219&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;59.96094&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.1172&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.1172&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;59.96094&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9219&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9219&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60.05859&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0195&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0195&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;59.96094&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0195&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0195&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60.00977&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9707&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9707&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60.00977&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0195&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0195&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;59.98535&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9951&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9951&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60.00977&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9951&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9951&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;59.99756&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0073&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0073&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;59.99756&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9951&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9951&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60.00366&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0012&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0012&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;59.99756&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0012&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0012&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60.00061&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9982&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9982&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60.00061&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0012&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0012&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;59.99908&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9997&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9997&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60.00061&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9997&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9997&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;59.99985&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0005&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0005&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;59.99985&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9997&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9997&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60.00023&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0001&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0001&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;59.99985&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0001&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0001&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60.00004&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9999&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9999&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60.00004&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0001&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0001&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;59.99994&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60.00004&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;59.99999&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;59.99999&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60.00001&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;59.99999&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;

[[#Top]]

===Directed Graph===
&lt;pre&gt;
import networkx as nx
import random
import matplotlib.pyplot as plt

def add_edges():
    nodes=list(G.nodes())
    for s in nodes:
        for t in nodes:
            if s!=t:
                r=random.random()
                if r&lt;=0.5:
                    G.add_edge(s,t)
    return G

#create a directed graph
G=nx.DiGraph()
G.add_nodes_from([i for i in range(10)])
add_edges()
nx.draw(G,with_labels=True)
plt.show()
&lt;/pre&gt;

OUTPUT:

[[File:v12p1.png|600px]]

[[File:v12p2.png|600px]]

[[File:v12p3.png|600px]]

===Point Calculating Program===
&lt;pre&gt;
import networkx as nx
import random
import matplotlib.pyplot as plt

def add_edges():
    nodes=list(G.nodes())
    for s in nodes:
        for t in nodes:
            if s!=t:
                r=random.random()
                if r&lt;=0.5:
                    G.add_edge(s,t)
    return G


def assign_points(G):
    nodes=list(G.nodes())
    p=[]
    for each in nodes:
        p.append(100)
    return p

def distribute_points(G,points):
    nodes=list(G.nodes())
    new_points=[]
    for i in range(len(nodes)):
        new_points.append(0)

    for n in nodes:
        out=list(G.out_edges(n))
        if len(out)==0:
            new_points[n]=new_points[n]+points[n]
        else:
            share=points[n]/len(out)
            for (src,tgt) in out:
                new_points[tgt]=new_points[tgt]+share
    return  new_points                

def keep_distributing(points,G):
    while(1):
        new_points=distribute_points(G,points)
        print(new_points)
        points=new_points
        stop=input(&quot;Press # to stop or any other key to continue&quot;)
        if stop=='#':
            break
    return new_points

#create a directed graph
G=nx.DiGraph()
G.add_nodes_from([i for i in range(10)])
add_edges()
nx.draw(G,with_labels=True)
plt.show()

#assign initial points
points=assign_points(G)

#keep distributing
final_points=keep_distributing(points,G)

&lt;/pre&gt;

Output:

[[File:v12p4.png]]

[[File:v12p5.png]]

==Complete page rank using point calculation ==
&lt;pre&gt;
import networkx as nx
import random
import matplotlib.pyplot as plt

def add_edges():
    nodes=list(G.nodes())
    for s in nodes:
        for t in nodes:
            if s!=t:
                r=random.random()
                if r&lt;=0.5:
                    G.add_edge(s,t)
    return G


def assign_points(G):
    nodes=list(G.nodes())
    p=[]
    for each in nodes:
        p.append(100)
    return p

def distribute_points(G,points):
    nodes=list(G.nodes())
    new_points=[]
    for i in range(len(nodes)):
        new_points.append(0)

    for n in nodes:
        out=list(G.out_edges(n))
        if len(out)==0:
            new_points[n]=new_points[n]+points[n]
        else:
            share=points[n]/len(out)
            for (src,tgt) in out:
                new_points[tgt]=new_points[tgt]+share
    return  new_points                

def keep_distributing(points,G):
    while(1):
        new_points=distribute_points(G,points)
        print(new_points)
        points=new_points
        stop=input(&quot;Press # to stop or any other key to continue&quot;)
        if stop=='#':
            break
    return new_points


def rank_by_points(points):
    d={}
    for i in range(len(points)):
        d[i]=points[i]
    print(sorted(d.items(),key=lambda f:f[1]))
    

#create a directed graph
G=nx.DiGraph()
G.add_nodes_from([i for i in range(10)])
add_edges()
nx.draw(G,with_labels=True)
plt.show()

#assign initial points
points=assign_points(G)

#keep distributing
final_points=keep_distributing(points,G)
rank_by_points(final_points)

#default networkx function
result = nx.pagerank(G)
print(sorted(result.items(),key=lambda f:f[1]))

&lt;/pre&gt;

Output:

[[File:finalrank.png]]

[[File:finalout.png]]

=Collatz Conjecture=
Taught by Sudarshan sir and Amit sir, and Edited by Ms. Ami Tusharkant Choksi

If a number is even, divide it by ''2'', if it is odd, make multiply it by ''3'' and add ''1'', till you get ''1''. This simple problem is called, ''Collatz Conjecture''. 

[[File:collatz1.png|600px]]

[[File:collatz2.png|600px]]

[[File:collatz3.png|600px]]

[[File:collatz4.png|600px]]

[[File:collatz5.png|600px]]

Number is bigger doesn't mean more iterations are required. One can notice, from the output of the following program. 



The program to implement the same is as follows:
==Program==
&lt;pre&gt;
#collatz conjecture
#if num is even, divide it by 2
#if num is odd, new number is equal to 3n+1


def checkNum(num):
    iterations=1
    while(num!=1):
        if(num%2==0):
            num=int(num/2)            
        else:
            num = 3*num+1
        iterations+=1
        

    print(num,iterations)


#checkNum(12)#Output: 1 10
#checkNum(26)#Output: 1 11
checkNum(2000)#Output: 1 113
&lt;/pre&gt;

&lt;pre&gt;

#recursive approach

def checkNum(num):
    if num==1:
        return 1
    elif num%2==0:
        return checkNum(num/2)+1
    else:
        return checkNum(3*num +1)+1


output:
checkNum(26)
Out[27]: 11
checkNum(5000)
Out[28]: 29
&lt;/pre&gt;

==Program adding statement to print all iterations==
&lt;pre&gt;
def checkNum(num):
    iterations=1
    while(num!=1):
        if(num%2==0):
            num=int(num/2)            
        else:
            num = 3*num+1
        print(iterations,&quot;:&quot;,num)
        iterations+=1
        

    print(num,iterations)
&lt;/pre&gt;
==Output==
===For checkNum(2000)===
&lt;pre&gt;
1 : 1000
2 : 500
3 : 250
4 : 125
5 : 376
6 : 188
7 : 94
8 : 47
9 : 142
10 : 71
11 : 214
12 : 107
13 : 322
14 : 161
15 : 484
16 : 242
17 : 121
18 : 364
19 : 182
20 : 91
21 : 274
22 : 137
23 : 412
24 : 206
25 : 103
26 : 310
27 : 155
28 : 466
29 : 233
30 : 700
31 : 350
32 : 175
33 : 526
34 : 263
35 : 790
36 : 395
37 : 1186
38 : 593
39 : 1780
40 : 890
41 : 445
42 : 1336
43 : 668
44 : 334
45 : 167
46 : 502
47 : 251
48 : 754
49 : 377
50 : 1132
51 : 566
52 : 283
53 : 850
54 : 425
55 : 1276
56 : 638
57 : 319
58 : 958
59 : 479
60 : 1438
61 : 719
62 : 2158
63 : 1079
64 : 3238
65 : 1619
66 : 4858
67 : 2429
68 : 7288
69 : 3644
70 : 1822
71 : 911
72 : 2734
73 : 1367
74 : 4102
75 : 2051
76 : 6154
77 : 3077
78 : 9232
79 : 4616
80 : 2308
81 : 1154
82 : 577
83 : 1732
84 : 866
85 : 433
86 : 1300
87 : 650
88 : 325
89 : 976
90 : 488
91 : 244
92 : 122
93 : 61
94 : 184
95 : 92
96 : 46
97 : 23
98 : 70
99 : 35
100 : 106
101 : 53
102 : 160
103 : 80
104 : 40
105 : 20
106 : 10
107 : 5
108 : 16
109 : 8
110 : 4
111 : 2
112 : 1
1 113
&lt;/pre&gt;

===For checkNum(5000)===
&lt;pre&gt;
1 : 2500
2 : 1250
3 : 625
4 : 1876
5 : 938
6 : 469
7 : 1408
8 : 704
9 : 352
10 : 176
11 : 88
12 : 44
13 : 22
14 : 11
15 : 34
16 : 17
17 : 52
18 : 26
19 : 13
20 : 40
21 : 20
22 : 10
23 : 5
24 : 16
25 : 8
26 : 4
27 : 2
28 : 1
1 29
&lt;/pre&gt;
===For checkNum(25000000)===
&lt;pre&gt;
1 : 12500000
2 : 6250000
3 : 3125000
4 : 1562500
5 : 781250
6 : 390625
7 : 1171876
8 : 585938
9 : 292969
10 : 878908
11 : 439454
12 : 219727
13 : 659182
14 : 329591
15 : 988774
16 : 494387
17 : 1483162
18 : 741581
19 : 2224744
20 : 1112372
21 : 556186
22 : 278093
23 : 834280
24 : 417140
25 : 208570
26 : 104285
27 : 312856
28 : 156428
29 : 78214
30 : 39107
31 : 117322
32 : 58661
33 : 175984
34 : 87992
35 : 43996
36 : 21998
37 : 10999
38 : 32998
39 : 16499
40 : 49498
41 : 24749
42 : 74248
43 : 37124
44 : 18562
45 : 9281
46 : 27844
47 : 13922
48 : 6961
49 : 20884
50 : 10442
51 : 5221
52 : 15664
53 : 7832
54 : 3916
55 : 1958
56 : 979
57 : 2938
58 : 1469
59 : 4408
60 : 2204
61 : 1102
62 : 551
63 : 1654
64 : 827
65 : 2482
66 : 1241
67 : 3724
68 : 1862
69 : 931
70 : 2794
71 : 1397
72 : 4192
73 : 2096
74 : 1048
75 : 524
76 : 262
77 : 131
78 : 394
79 : 197
80 : 592
81 : 296
82 : 148
83 : 74
84 : 37
85 : 112
86 : 56
87 : 28
88 : 14
89 : 7
90 : 22
91 : 11
92 : 34
93 : 17
94 : 52
95 : 26
96 : 13
97 : 40
98 : 20
99 : 10
100 : 5
101 : 16
102 : 8
103 : 4
104 : 2
105 : 1
1 106
&lt;/pre&gt;

Happy Life ahead!!!

[[File:end1.png]]</text>
      <sha1>n1ls4r9koqt2lncu5mi565sg66hikmm</sha1>
    </revision>
    <revision>
      <id>4503</id>
      <parentid>4498</parentid>
      <timestamp>2018-10-18T05:12:30Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* Complete page rank using point calculation */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="55615">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_12 Contributors of this page]

=Page Rank - How does Google Work=
One web page is having link to other page, that is a page is referring to other page. Google uses ''Page Rank'' algorithm to choose which page should be displayed first.

If we have network, connections as below:
[[File:rank0.png]]

We want to pick a leader out of all these nodes. How to pick a leader?  Why to elect a leader? It is because we want to find the super power of available nodes.                     
[[File:rank1.png]]

For example, the application wherein, we want to find the most impressive person of the  few ones. How to decide it? As shown in below figure, each node will communicate with other, randomly, we implement the count for each node, how many times, the particular node is being visited.
[[File:rank2.png]]

[[#Top]]

As shown in following, figure, all nodes are visited and each node is marked with the 
number i.e.number of times the node is visited.
[[File:rank3.png]]

The node with the maximum count, becomes the winner. Here, node with 120 count in figure 
below, is the winner. i.e. The person with 120 count in the figure is the most impressive 
person in the community being considered.
[[File:rank4.png]]

[[File:rank5.png]]

[[File:rank6.png]]

[[File:rank7.png]]


[[File:rank8.png]]

[[#Top]]

Google selects the page rank in this matter. Each web page is connected to other web page with web links. To a page, maximum link is there, that will be put on top results in Google search results.
[[File:rank9.png]]

Google uses web crawler. The crawler takes the random walk on the www network and rank the web sites.
[[File:rank10.png]]

This way Google ranks the pages and displays search results, according to page rank.
[[File:rank11.png]]

e.g.we search for ''mysore city''. Google has 10,000 results. But it displays the results in the sequence of page rank of search results, As shown in figure below.
[[File:mysore.png]]

[[#Top]]

==Page rank algorithm ==
As shown in beautiful figure below, few nodes combinely selected one as the leader, then that leader and other nodes, have selected         other as a leader. This way, finally the final leader is elected.
[[File:rank12.png|600px]]


[[File:graph00.png|600px]]


[[File:graph01.png|600px]]

[[#Top]]

==Gragh Drawing Program1==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
nx.barbell_graph(4,2)
G=nx.barbell_graph(4,2)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:Graph003.png|600px]]

[[#Top]]

==Gragh Drawing Program2==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
nx.barbell_graph(4,3)
G=nx.barbell_graph(4,3)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:Graph004.png|600px]]

[[#Top]]

==Gragh Drawing Program3==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
nx.barbell_graph(5,3)
G=nx.barbell_graph(5,3)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:Graph005.png|600px]]

[[#Top]]

==Complete Graph==
Complete graph is a graph, wherein, each node is connected to each other nodes in a graph.

&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.complete_graph(4)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:

[[File:completegraph001.png|600px]]

[[#Top]]

==Cycle graph==

&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.cycle_graph(5)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:

[[File:cyclegraph1.png|600px]]

[[#Top]]

==Ladder graph==

&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.ladder_graph(5)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:

[[File:laddergraph.png|600px]]

[[#Top]]

==Path Graph==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.path_graph(6)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:

[[File:pathgraph.png|600px]]

[[#Top]]

==Star Graph==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.star_graph(5)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:stargraph.png|600px]]

[[#Top]]

==Star Graph of 4 Nodes==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.star_graph(4)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:stargraph4points.png|600px]]

==Wheel Graph==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.wheel_graph(4)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:wheelgraph.png|600px]]

[[#Top]]

==Wheel Graph of 5 nodes==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.wheel_graph(5)
nx.draw(G)
plt.show()

&lt;/pre&gt;

Output:

[[File:wheelgraph5nodes.png|600px]]

[[#Top]]

==Wheel Graph of 6 nodes==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.wheel_graph(6)
nx.draw(G)
plt.show()

&lt;/pre&gt;

Output:

[[File:wheelgraph6nodes.png|600px]]

[[#Top]]

==Random Graph==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.gnp_random_graph(5,0.5)
nx.draw(G)
plt.show()

&lt;/pre&gt;

Output:

[[File:randomgraph1.png|600px]]


Running the same above program, we will get different output, as shown below, as it is random graph.

[[File:randomgraph2.png|600px]]

[[#Top]]

==Page Rank Algorithm Implementation==

===Random Directed Graph===
&lt;pre&gt;
import networkx as nx
import random
import matplotlib.pyplot as plt

#Draw random directed graph
G=nx.gnp_random_graph(10,0.5,directed=True)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output: 

[[File:randomDirectedGraph.png|600px]]


===Random Directed Graph with Labels===
&lt;pre&gt;
import networkx as nx
import random
import matplotlib.pyplot as plt

#Draw random directed graph 
G=nx.gnp_random_graph(10,0.5,directed=True)
#Give label numbering to nodes
nx.draw(G,with_labels=True)
plt.show()

&lt;/pre&gt;

Output:

[[File:randomDirectedGraphwithLabels.png|600px]]


[[#Top]]

===Page Rank Coding===
&lt;pre&gt;
import networkx as nx
import random
import matplotlib.pyplot as plt
import operator

#Draw random directed graph 
G=nx.gnp_random_graph(10,0.5,directed=True)
#Give label numbering to nodes
nx.draw(G,with_labels=True)
plt.show()

#x is the random source node
x=random.choice([i for i in range(G.number_of_nodes())])

#dictionary to maintain counter
dictCounter={}
#initialize the counter of each node as 0
for i in range(G.number_of_nodes()):
    dictCounter[i]=0
dictCounter[x]=dictCounter[x]+1

for i in range(10000):
    listn=list(G.neighbors(x))
    #if x is a sink node, we need to select random node for random walk
    #, else select random neighbor node

    if(len(listn)==0):
        x=random.choice([i for i in range(G.number_of_nodes())])
        dictCounter[x]=dictCounter[x]+1
    else:
        #choose a node randomly from neightbors
        x=random.choice(listn)
        dictCounter[x]=dictCounter[x]+1

p=nx.pagerank(G)
sorted_p=sorted(p.items(),key=operator.itemgetter(1))
sorted_rw=sorted(dictCounter.items(),key=operator.itemgetter(1))                        
#print(p)
#print(dictCounter)

print(sorted_p)
print(sorted_rw)

&lt;/pre&gt;

Output:

&lt;pre&gt;
[(2, 0.07139920240302768), (5, 0.07464882519777695), (3, 0.08527469366832419), 
(6, 0.08665188647066119), (4, 0.0987815549542114), (0, 0.10858415997562518), 
(9, 0.110369696943925), (8, 0.11456211367660116), (1, 0.11682018308814024), 
(7, 0.13290768362170685)]
[(2, 4), (5, 7), (8, 7), (6, 8), (3, 11), (7, 11), (1, 12), (4, 12), (0, 13), (9, 16)]
&lt;/pre&gt;

[[#Top]]

=Email communication Network=
==Page rank :page distribution method==
===Revision: Graph===
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
G=nx.cycle_graph(4)
labels={0:&quot;Bangluru&quot;,1:&quot;Gawhati&quot;,2:&quot;Kolkata&quot;,3:&quot;Chennai&quot;}
nx.draw(G,with_labels=True,labels=labels)
plt.show()
&lt;/pre&gt;

Output:

[[File:revGRAPH.png]]


===Directed Graph  Example===

[[File:directedGraphExample.png|600px]]

&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
G=nx.gnp_random_graph(4,.5,directed=True)
labels={0:&quot;Bangluru&quot;,1:&quot;Gawhati&quot;,2:&quot;Kolkata&quot;,3:&quot;Chennai&quot;}
nx.draw(G,with_labels=True,labels=labels)
plt.show()

&lt;/pre&gt;

Output:
[[File:directedg.png|600px]]


[[#Top]]


==Bidirectional with Parallel and self loops==
==Bidirectional with Parallel edges==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
G=nx.MultiDiGraph()

G.add_node(1)
G.add_node(2)
G.add_node(3)
G.add_node(4)

G.add_path([1,2,3,4,1])
G.add_edge(1,4)
nx.draw(G,with_labels=True)
plt.show()
&lt;/pre&gt;

Output: 

[[File:bidirectionalg.png]]

==Bidirectional with Self loops==
It doesn't show as graph. It is not taught, I did it myself.(Ms. Ami TUSHARKANT CHOKSI)
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
G=nx.MultiDiGraph()

G.add_node(1)
G.add_node(2)
G.add_node(3)
G.add_node(4)

G.add_path([1,2,3,4,1])
G.add_edge(1,4)
G.add_edge(1,1)
nx.draw(G,with_labels=True)
d=G.selfloop_edges()
print(d)
plt.show()

&lt;/pre&gt;

#Output: &lt;generator object selfloop_edges.&lt;locals&gt;.&lt;genexpr&gt; at 0x0B790150&gt;
#It shows self loop is there in the graph


==Directed Undirected Graph==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

#undirected graph
U=nx.Graph()

#directed graph
G=nx.DiGraph()

#nodes in graph
print(G.nodes())#Output: []
G.add_nodes_from([i for i in range(5)])
print(G.nodes())#Output: [0, 1, 2, 3, 4]

#edges
print(G.out_edges())#Output:[]

print(G.in_edges())#Output:[]

G.add_edge(1,2)
print(G.edges())#Output: [(1, 2)]
print(G.in_edges())#Output: [(1, 2)]
print(G.out_edges())#Output: [(1, 2)]

G.add_edge(0,3)
G.add_edge(2,3)
G.add_edge(3,2)
G.add_edge(3,4)
G.add_edge(4,1)
print(G.out_edges(2))#Output: [(2, 3)]
print(G.out_edges(3))#Output:[(3, 2), (3, 4)]
print(G.in_edges(3))#Output:[(0, 3), (2, 3)]

&lt;/pre&gt;

[[#Top]]

==Points Distribution Method==
&lt;ul&gt;
&lt;li&gt;Initially, all nodes are given equal points&lt;/li&gt;
&lt;li&gt;Rule&lt;/li&gt;
&lt;ul&gt;
&lt;li&gt;Share whatever you have equally with your neighbors&lt;/li&gt;
&lt;/ul&gt;
&lt;li&gt;FOR NODE B:Neighbors: C&lt;/li&gt;
&lt;li&gt;Give all of its points to C&lt;/li&gt;
&lt;li&gt;FOR NODE C:Neighbors: A&lt;/li&gt;
&lt;li&gt;Give all of its points to A&lt;/li&gt;
&lt;li&gt;new point of A=old points of C&lt;/li&gt;
&lt;li&gt;new point of B=(1/2)*old points of A&lt;/li&gt;
&lt;li&gt;new point of C=(1/2)*old points of A+old points of B&lt;/li&gt;
&lt;/ul&gt;

===In Excel, Implementation===
[[File:grEx1.png|600px]]

[[File:grEx2.png|600px]]

[[File:grEx3.png|600px]]

[[#Top]]

After some nodes, points becomes constant, as shown below.

&lt;table class=&quot;tg&quot;&gt;
  &lt;tr&gt;
    &lt;th class=&quot;tg-xldj&quot;&gt;100&lt;/th&gt;
    &lt;th class=&quot;tg-xldj&quot;&gt;100&lt;/th&gt;
    &lt;th class=&quot;tg-xldj&quot;&gt;100&lt;/th&gt;
    &lt;th class=&quot;tg-xldj&quot;&gt; &lt;/th&gt;
    &lt;th class=&quot;tg-xldj&quot;&gt;300&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;100&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;50&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;150&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;150&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;50&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;100&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;100&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;75&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;125&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;125&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;50&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;125&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;125&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;62.5&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;112.5&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;112.5&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;62.5&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;125&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;125&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;56.25&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;118.75&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;118.75&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;62.5&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;118.75&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;118.75&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;59.375&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;121.875&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;121.875&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;59.375&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;118.75&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;118.75&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;60.9375&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;120.3125&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;120.3125&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;59.375&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;120.3125&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;120.3125&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;60.15625&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;119.5313&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;119.5313&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;60.15625&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;120.3125&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.3125&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;59.76563&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9219&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9219&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60.15625&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9219&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9219&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;59.96094&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.1172&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.1172&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;59.96094&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9219&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9219&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60.05859&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0195&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0195&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;59.96094&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0195&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0195&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60.00977&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9707&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9707&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60.00977&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0195&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0195&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;59.98535&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9951&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9951&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60.00977&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9951&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9951&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;59.99756&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0073&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0073&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;59.99756&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9951&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9951&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60.00366&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0012&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0012&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;59.99756&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0012&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0012&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60.00061&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9982&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9982&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60.00061&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0012&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0012&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;59.99908&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9997&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9997&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60.00061&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9997&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9997&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;59.99985&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0005&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0005&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;59.99985&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9997&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9997&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60.00023&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0001&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0001&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;59.99985&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0001&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0001&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60.00004&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9999&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9999&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60.00004&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0001&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0001&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;59.99994&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60.00004&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;59.99999&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;59.99999&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60.00001&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;59.99999&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;

[[#Top]]

===Directed Graph===
&lt;pre&gt;
import networkx as nx
import random
import matplotlib.pyplot as plt

def add_edges():
    nodes=list(G.nodes())
    for s in nodes:
        for t in nodes:
            if s!=t:
                r=random.random()
                if r&lt;=0.5:
                    G.add_edge(s,t)
    return G

#create a directed graph
G=nx.DiGraph()
G.add_nodes_from([i for i in range(10)])
add_edges()
nx.draw(G,with_labels=True)
plt.show()
&lt;/pre&gt;

OUTPUT:

[[File:v12p1.png|600px]]

[[File:v12p2.png|600px]]

[[File:v12p3.png|600px]]

===Point Calculating Program===
&lt;pre&gt;
import networkx as nx
import random
import matplotlib.pyplot as plt

def add_edges():
    nodes=list(G.nodes())
    for s in nodes:
        for t in nodes:
            if s!=t:
                r=random.random()
                if r&lt;=0.5:
                    G.add_edge(s,t)
    return G


def assign_points(G):
    nodes=list(G.nodes())
    p=[]
    for each in nodes:
        p.append(100)
    return p

def distribute_points(G,points):
    nodes=list(G.nodes())
    new_points=[]
    for i in range(len(nodes)):
        new_points.append(0)

    for n in nodes:
        out=list(G.out_edges(n))
        if len(out)==0:
            new_points[n]=new_points[n]+points[n]
        else:
            share=points[n]/len(out)
            for (src,tgt) in out:
                new_points[tgt]=new_points[tgt]+share
    return  new_points                

def keep_distributing(points,G):
    while(1):
        new_points=distribute_points(G,points)
        print(new_points)
        points=new_points
        stop=input(&quot;Press # to stop or any other key to continue&quot;)
        if stop=='#':
            break
    return new_points

#create a directed graph
G=nx.DiGraph()
G.add_nodes_from([i for i in range(10)])
add_edges()
nx.draw(G,with_labels=True)
plt.show()

#assign initial points
points=assign_points(G)

#keep distributing
final_points=keep_distributing(points,G)

&lt;/pre&gt;

Output:

[[File:v12p4.png]]

[[File:v12p5.png]]

==Complete page rank using point calculation ==
&lt;pre&gt;
import networkx as nx
import random
import matplotlib.pyplot as plt

def add_edges():
    nodes=list(G.nodes())
    for s in nodes:
        for t in nodes:
            if s!=t:
                r=random.random()
                if r&lt;=0.5:
                    G.add_edge(s,t)
    return G


def assign_points(G):
    nodes=list(G.nodes())
    p=[]
    for each in nodes:
        p.append(100)
    return p

def distribute_points(G,points):
    nodes=list(G.nodes())
    new_points=[]
    for i in range(len(nodes)):
        new_points.append(0)

    for n in nodes:
        out=list(G.out_edges(n))
        if len(out)==0:
            new_points[n]=new_points[n]+points[n]
        else:
            share=points[n]/len(out)
            for (src,tgt) in out:
                new_points[tgt]=new_points[tgt]+share
    return  new_points                

def keep_distributing(points,G):
    while(1):
        new_points=distribute_points(G,points)
        print(new_points)
        points=new_points
        stop=input(&quot;Press # to stop or any other key to continue&quot;)
        if stop=='#':
            break
    return new_points


def rank_by_points(points):
    d={}
    for i in range(len(points)):
        d[i]=points[i]
    print(sorted(d.items(),key=lambda f:f[1]))
    

#create a directed graph
G=nx.DiGraph()
G.add_nodes_from([i for i in range(10)])
add_edges()
nx.draw(G,with_labels=True)
plt.show()

#assign initial points
points=assign_points(G)

#keep distributing
final_points=keep_distributing(points,G)
rank_by_points(final_points)

#default networkx function
result = nx.pagerank(G)
print(sorted(result.items(),key=lambda f:f[1]))

&lt;/pre&gt;

Output:

[[File:finalrank.png]]

[[File:finalout.png]]


==Last Program==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
G=nx.read_edgelist(r&quot;page_rank.txt&quot;,create_using=nx.DiGraph(),nodetype=int)
nx.draw(G,with_labels=True)
plt.show()

&lt;/pre&gt;

[[File:lastOutput.png]]

=Collatz Conjecture=
Taught by Sudarshan sir and Amit sir, and Edited by Ms. Ami Tusharkant Choksi

If a number is even, divide it by ''2'', if it is odd, make multiply it by ''3'' and add ''1'', till you get ''1''. This simple problem is called, ''Collatz Conjecture''. 

[[File:collatz1.png|600px]]

[[File:collatz2.png|600px]]

[[File:collatz3.png|600px]]

[[File:collatz4.png|600px]]

[[File:collatz5.png|600px]]

Number is bigger doesn't mean more iterations are required. One can notice, from the output of the following program. 



The program to implement the same is as follows:
==Program==
&lt;pre&gt;
#collatz conjecture
#if num is even, divide it by 2
#if num is odd, new number is equal to 3n+1


def checkNum(num):
    iterations=1
    while(num!=1):
        if(num%2==0):
            num=int(num/2)            
        else:
            num = 3*num+1
        iterations+=1
        

    print(num,iterations)


#checkNum(12)#Output: 1 10
#checkNum(26)#Output: 1 11
checkNum(2000)#Output: 1 113
&lt;/pre&gt;

&lt;pre&gt;

#recursive approach

def checkNum(num):
    if num==1:
        return 1
    elif num%2==0:
        return checkNum(num/2)+1
    else:
        return checkNum(3*num +1)+1


output:
checkNum(26)
Out[27]: 11
checkNum(5000)
Out[28]: 29
&lt;/pre&gt;

==Program adding statement to print all iterations==
&lt;pre&gt;
def checkNum(num):
    iterations=1
    while(num!=1):
        if(num%2==0):
            num=int(num/2)            
        else:
            num = 3*num+1
        print(iterations,&quot;:&quot;,num)
        iterations+=1
        

    print(num,iterations)
&lt;/pre&gt;
==Output==
===For checkNum(2000)===
&lt;pre&gt;
1 : 1000
2 : 500
3 : 250
4 : 125
5 : 376
6 : 188
7 : 94
8 : 47
9 : 142
10 : 71
11 : 214
12 : 107
13 : 322
14 : 161
15 : 484
16 : 242
17 : 121
18 : 364
19 : 182
20 : 91
21 : 274
22 : 137
23 : 412
24 : 206
25 : 103
26 : 310
27 : 155
28 : 466
29 : 233
30 : 700
31 : 350
32 : 175
33 : 526
34 : 263
35 : 790
36 : 395
37 : 1186
38 : 593
39 : 1780
40 : 890
41 : 445
42 : 1336
43 : 668
44 : 334
45 : 167
46 : 502
47 : 251
48 : 754
49 : 377
50 : 1132
51 : 566
52 : 283
53 : 850
54 : 425
55 : 1276
56 : 638
57 : 319
58 : 958
59 : 479
60 : 1438
61 : 719
62 : 2158
63 : 1079
64 : 3238
65 : 1619
66 : 4858
67 : 2429
68 : 7288
69 : 3644
70 : 1822
71 : 911
72 : 2734
73 : 1367
74 : 4102
75 : 2051
76 : 6154
77 : 3077
78 : 9232
79 : 4616
80 : 2308
81 : 1154
82 : 577
83 : 1732
84 : 866
85 : 433
86 : 1300
87 : 650
88 : 325
89 : 976
90 : 488
91 : 244
92 : 122
93 : 61
94 : 184
95 : 92
96 : 46
97 : 23
98 : 70
99 : 35
100 : 106
101 : 53
102 : 160
103 : 80
104 : 40
105 : 20
106 : 10
107 : 5
108 : 16
109 : 8
110 : 4
111 : 2
112 : 1
1 113
&lt;/pre&gt;

===For checkNum(5000)===
&lt;pre&gt;
1 : 2500
2 : 1250
3 : 625
4 : 1876
5 : 938
6 : 469
7 : 1408
8 : 704
9 : 352
10 : 176
11 : 88
12 : 44
13 : 22
14 : 11
15 : 34
16 : 17
17 : 52
18 : 26
19 : 13
20 : 40
21 : 20
22 : 10
23 : 5
24 : 16
25 : 8
26 : 4
27 : 2
28 : 1
1 29
&lt;/pre&gt;
===For checkNum(25000000)===
&lt;pre&gt;
1 : 12500000
2 : 6250000
3 : 3125000
4 : 1562500
5 : 781250
6 : 390625
7 : 1171876
8 : 585938
9 : 292969
10 : 878908
11 : 439454
12 : 219727
13 : 659182
14 : 329591
15 : 988774
16 : 494387
17 : 1483162
18 : 741581
19 : 2224744
20 : 1112372
21 : 556186
22 : 278093
23 : 834280
24 : 417140
25 : 208570
26 : 104285
27 : 312856
28 : 156428
29 : 78214
30 : 39107
31 : 117322
32 : 58661
33 : 175984
34 : 87992
35 : 43996
36 : 21998
37 : 10999
38 : 32998
39 : 16499
40 : 49498
41 : 24749
42 : 74248
43 : 37124
44 : 18562
45 : 9281
46 : 27844
47 : 13922
48 : 6961
49 : 20884
50 : 10442
51 : 5221
52 : 15664
53 : 7832
54 : 3916
55 : 1958
56 : 979
57 : 2938
58 : 1469
59 : 4408
60 : 2204
61 : 1102
62 : 551
63 : 1654
64 : 827
65 : 2482
66 : 1241
67 : 3724
68 : 1862
69 : 931
70 : 2794
71 : 1397
72 : 4192
73 : 2096
74 : 1048
75 : 524
76 : 262
77 : 131
78 : 394
79 : 197
80 : 592
81 : 296
82 : 148
83 : 74
84 : 37
85 : 112
86 : 56
87 : 28
88 : 14
89 : 7
90 : 22
91 : 11
92 : 34
93 : 17
94 : 52
95 : 26
96 : 13
97 : 40
98 : 20
99 : 10
100 : 5
101 : 16
102 : 8
103 : 4
104 : 2
105 : 1
1 106
&lt;/pre&gt;

Happy Life ahead!!!

[[File:end1.png]]</text>
      <sha1>0wush92rgdi0v6205pj41gbl3jyp5q6</sha1>
    </revision>
    <revision>
      <id>4505</id>
      <parentid>4503</parentid>
      <timestamp>2018-10-18T06:02:51Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* Last Program */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="55980">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_12 Contributors of this page]

=Page Rank - How does Google Work=
One web page is having link to other page, that is a page is referring to other page. Google uses ''Page Rank'' algorithm to choose which page should be displayed first.

If we have network, connections as below:
[[File:rank0.png]]

We want to pick a leader out of all these nodes. How to pick a leader?  Why to elect a leader? It is because we want to find the super power of available nodes.                     
[[File:rank1.png]]

For example, the application wherein, we want to find the most impressive person of the  few ones. How to decide it? As shown in below figure, each node will communicate with other, randomly, we implement the count for each node, how many times, the particular node is being visited.
[[File:rank2.png]]

[[#Top]]

As shown in following, figure, all nodes are visited and each node is marked with the 
number i.e.number of times the node is visited.
[[File:rank3.png]]

The node with the maximum count, becomes the winner. Here, node with 120 count in figure 
below, is the winner. i.e. The person with 120 count in the figure is the most impressive 
person in the community being considered.
[[File:rank4.png]]

[[File:rank5.png]]

[[File:rank6.png]]

[[File:rank7.png]]


[[File:rank8.png]]

[[#Top]]

Google selects the page rank in this matter. Each web page is connected to other web page with web links. To a page, maximum link is there, that will be put on top results in Google search results.
[[File:rank9.png]]

Google uses web crawler. The crawler takes the random walk on the www network and rank the web sites.
[[File:rank10.png]]

This way Google ranks the pages and displays search results, according to page rank.
[[File:rank11.png]]

e.g.we search for ''mysore city''. Google has 10,000 results. But it displays the results in the sequence of page rank of search results, As shown in figure below.
[[File:mysore.png]]

[[#Top]]

==Page rank algorithm ==
As shown in beautiful figure below, few nodes combinely selected one as the leader, then that leader and other nodes, have selected         other as a leader. This way, finally the final leader is elected.
[[File:rank12.png|600px]]


[[File:graph00.png|600px]]


[[File:graph01.png|600px]]

[[#Top]]

==Gragh Drawing Program1==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
nx.barbell_graph(4,2)
G=nx.barbell_graph(4,2)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:Graph003.png|600px]]

[[#Top]]

==Gragh Drawing Program2==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
nx.barbell_graph(4,3)
G=nx.barbell_graph(4,3)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:Graph004.png|600px]]

[[#Top]]

==Gragh Drawing Program3==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
nx.barbell_graph(5,3)
G=nx.barbell_graph(5,3)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:Graph005.png|600px]]

[[#Top]]

==Complete Graph==
Complete graph is a graph, wherein, each node is connected to each other nodes in a graph.

&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.complete_graph(4)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:

[[File:completegraph001.png|600px]]

[[#Top]]

==Cycle graph==

&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.cycle_graph(5)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:

[[File:cyclegraph1.png|600px]]

[[#Top]]

==Ladder graph==

&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.ladder_graph(5)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:

[[File:laddergraph.png|600px]]

[[#Top]]

==Path Graph==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.path_graph(6)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:

[[File:pathgraph.png|600px]]

[[#Top]]

==Star Graph==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.star_graph(5)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:stargraph.png|600px]]

[[#Top]]

==Star Graph of 4 Nodes==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.star_graph(4)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:stargraph4points.png|600px]]

==Wheel Graph==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.wheel_graph(4)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:wheelgraph.png|600px]]

[[#Top]]

==Wheel Graph of 5 nodes==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.wheel_graph(5)
nx.draw(G)
plt.show()

&lt;/pre&gt;

Output:

[[File:wheelgraph5nodes.png|600px]]

[[#Top]]

==Wheel Graph of 6 nodes==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.wheel_graph(6)
nx.draw(G)
plt.show()

&lt;/pre&gt;

Output:

[[File:wheelgraph6nodes.png|600px]]

[[#Top]]

==Random Graph==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.gnp_random_graph(5,0.5)
nx.draw(G)
plt.show()

&lt;/pre&gt;

Output:

[[File:randomgraph1.png|600px]]


Running the same above program, we will get different output, as shown below, as it is random graph.

[[File:randomgraph2.png|600px]]

[[#Top]]

==Page Rank Algorithm Implementation==

===Random Directed Graph===
&lt;pre&gt;
import networkx as nx
import random
import matplotlib.pyplot as plt

#Draw random directed graph
G=nx.gnp_random_graph(10,0.5,directed=True)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output: 

[[File:randomDirectedGraph.png|600px]]


===Random Directed Graph with Labels===
&lt;pre&gt;
import networkx as nx
import random
import matplotlib.pyplot as plt

#Draw random directed graph 
G=nx.gnp_random_graph(10,0.5,directed=True)
#Give label numbering to nodes
nx.draw(G,with_labels=True)
plt.show()

&lt;/pre&gt;

Output:

[[File:randomDirectedGraphwithLabels.png|600px]]


[[#Top]]

===Page Rank Coding===
&lt;pre&gt;
import networkx as nx
import random
import matplotlib.pyplot as plt
import operator

#Draw random directed graph 
G=nx.gnp_random_graph(10,0.5,directed=True)
#Give label numbering to nodes
nx.draw(G,with_labels=True)
plt.show()

#x is the random source node
x=random.choice([i for i in range(G.number_of_nodes())])

#dictionary to maintain counter
dictCounter={}
#initialize the counter of each node as 0
for i in range(G.number_of_nodes()):
    dictCounter[i]=0
dictCounter[x]=dictCounter[x]+1

for i in range(10000):
    listn=list(G.neighbors(x))
    #if x is a sink node, we need to select random node for random walk
    #, else select random neighbor node

    if(len(listn)==0):
        x=random.choice([i for i in range(G.number_of_nodes())])
        dictCounter[x]=dictCounter[x]+1
    else:
        #choose a node randomly from neightbors
        x=random.choice(listn)
        dictCounter[x]=dictCounter[x]+1

p=nx.pagerank(G)
sorted_p=sorted(p.items(),key=operator.itemgetter(1))
sorted_rw=sorted(dictCounter.items(),key=operator.itemgetter(1))                        
#print(p)
#print(dictCounter)

print(sorted_p)
print(sorted_rw)

&lt;/pre&gt;

Output:

&lt;pre&gt;
[(2, 0.07139920240302768), (5, 0.07464882519777695), (3, 0.08527469366832419), 
(6, 0.08665188647066119), (4, 0.0987815549542114), (0, 0.10858415997562518), 
(9, 0.110369696943925), (8, 0.11456211367660116), (1, 0.11682018308814024), 
(7, 0.13290768362170685)]
[(2, 4), (5, 7), (8, 7), (6, 8), (3, 11), (7, 11), (1, 12), (4, 12), (0, 13), (9, 16)]
&lt;/pre&gt;

[[#Top]]

=Email communication Network=
==Page rank :page distribution method==
===Revision: Graph===
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
G=nx.cycle_graph(4)
labels={0:&quot;Bangluru&quot;,1:&quot;Gawhati&quot;,2:&quot;Kolkata&quot;,3:&quot;Chennai&quot;}
nx.draw(G,with_labels=True,labels=labels)
plt.show()
&lt;/pre&gt;

Output:

[[File:revGRAPH.png]]


===Directed Graph  Example===

[[File:directedGraphExample.png|600px]]

&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
G=nx.gnp_random_graph(4,.5,directed=True)
labels={0:&quot;Bangluru&quot;,1:&quot;Gawhati&quot;,2:&quot;Kolkata&quot;,3:&quot;Chennai&quot;}
nx.draw(G,with_labels=True,labels=labels)
plt.show()

&lt;/pre&gt;

Output:
[[File:directedg.png|600px]]


[[#Top]]


==Bidirectional with Parallel and self loops==
==Bidirectional with Parallel edges==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
G=nx.MultiDiGraph()

G.add_node(1)
G.add_node(2)
G.add_node(3)
G.add_node(4)

G.add_path([1,2,3,4,1])
G.add_edge(1,4)
nx.draw(G,with_labels=True)
plt.show()
&lt;/pre&gt;

Output: 

[[File:bidirectionalg.png]]

==Bidirectional with Self loops==
It doesn't show as graph. It is not taught, I did it myself.(Ms. Ami TUSHARKANT CHOKSI)
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
G=nx.MultiDiGraph()

G.add_node(1)
G.add_node(2)
G.add_node(3)
G.add_node(4)

G.add_path([1,2,3,4,1])
G.add_edge(1,4)
G.add_edge(1,1)
nx.draw(G,with_labels=True)
d=G.selfloop_edges()
print(d)
plt.show()

&lt;/pre&gt;

#Output: &lt;generator object selfloop_edges.&lt;locals&gt;.&lt;genexpr&gt; at 0x0B790150&gt;
#It shows self loop is there in the graph


==Directed Undirected Graph==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

#undirected graph
U=nx.Graph()

#directed graph
G=nx.DiGraph()

#nodes in graph
print(G.nodes())#Output: []
G.add_nodes_from([i for i in range(5)])
print(G.nodes())#Output: [0, 1, 2, 3, 4]

#edges
print(G.out_edges())#Output:[]

print(G.in_edges())#Output:[]

G.add_edge(1,2)
print(G.edges())#Output: [(1, 2)]
print(G.in_edges())#Output: [(1, 2)]
print(G.out_edges())#Output: [(1, 2)]

G.add_edge(0,3)
G.add_edge(2,3)
G.add_edge(3,2)
G.add_edge(3,4)
G.add_edge(4,1)
print(G.out_edges(2))#Output: [(2, 3)]
print(G.out_edges(3))#Output:[(3, 2), (3, 4)]
print(G.in_edges(3))#Output:[(0, 3), (2, 3)]

&lt;/pre&gt;

[[#Top]]

==Points Distribution Method==
&lt;ul&gt;
&lt;li&gt;Initially, all nodes are given equal points&lt;/li&gt;
&lt;li&gt;Rule&lt;/li&gt;
&lt;ul&gt;
&lt;li&gt;Share whatever you have equally with your neighbors&lt;/li&gt;
&lt;/ul&gt;
&lt;li&gt;FOR NODE B:Neighbors: C&lt;/li&gt;
&lt;li&gt;Give all of its points to C&lt;/li&gt;
&lt;li&gt;FOR NODE C:Neighbors: A&lt;/li&gt;
&lt;li&gt;Give all of its points to A&lt;/li&gt;
&lt;li&gt;new point of A=old points of C&lt;/li&gt;
&lt;li&gt;new point of B=(1/2)*old points of A&lt;/li&gt;
&lt;li&gt;new point of C=(1/2)*old points of A+old points of B&lt;/li&gt;
&lt;/ul&gt;

===In Excel, Implementation===
[[File:grEx1.png|600px]]

[[File:grEx2.png|600px]]

[[File:grEx3.png|600px]]

[[#Top]]

After some nodes, points becomes constant, as shown below.

&lt;table class=&quot;tg&quot;&gt;
  &lt;tr&gt;
    &lt;th class=&quot;tg-xldj&quot;&gt;100&lt;/th&gt;
    &lt;th class=&quot;tg-xldj&quot;&gt;100&lt;/th&gt;
    &lt;th class=&quot;tg-xldj&quot;&gt;100&lt;/th&gt;
    &lt;th class=&quot;tg-xldj&quot;&gt; &lt;/th&gt;
    &lt;th class=&quot;tg-xldj&quot;&gt;300&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;100&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;50&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;150&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;150&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;50&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;100&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;100&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;75&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;125&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;125&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;50&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;125&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;125&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;62.5&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;112.5&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;112.5&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;62.5&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;125&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;125&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;56.25&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;118.75&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;118.75&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;62.5&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;118.75&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;118.75&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;59.375&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;121.875&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;121.875&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;59.375&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;118.75&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;118.75&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;60.9375&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;120.3125&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;120.3125&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;59.375&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;120.3125&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;120.3125&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;60.15625&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;119.5313&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;119.5313&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;60.15625&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;120.3125&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.3125&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;59.76563&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9219&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9219&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60.15625&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9219&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9219&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;59.96094&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.1172&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.1172&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;59.96094&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9219&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9219&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60.05859&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0195&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0195&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;59.96094&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0195&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0195&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60.00977&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9707&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9707&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60.00977&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0195&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0195&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;59.98535&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9951&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9951&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60.00977&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9951&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9951&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;59.99756&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0073&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0073&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;59.99756&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9951&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9951&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60.00366&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0012&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0012&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;59.99756&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0012&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0012&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60.00061&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9982&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9982&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60.00061&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0012&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0012&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;59.99908&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9997&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9997&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60.00061&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9997&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9997&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;59.99985&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0005&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0005&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;59.99985&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9997&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9997&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60.00023&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0001&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0001&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;59.99985&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0001&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0001&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60.00004&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9999&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9999&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60.00004&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0001&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0001&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;59.99994&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60.00004&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;59.99999&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;59.99999&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60.00001&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;59.99999&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;

[[#Top]]

===Directed Graph===
&lt;pre&gt;
import networkx as nx
import random
import matplotlib.pyplot as plt

def add_edges():
    nodes=list(G.nodes())
    for s in nodes:
        for t in nodes:
            if s!=t:
                r=random.random()
                if r&lt;=0.5:
                    G.add_edge(s,t)
    return G

#create a directed graph
G=nx.DiGraph()
G.add_nodes_from([i for i in range(10)])
add_edges()
nx.draw(G,with_labels=True)
plt.show()
&lt;/pre&gt;

OUTPUT:

[[File:v12p1.png|600px]]

[[File:v12p2.png|600px]]

[[File:v12p3.png|600px]]

===Point Calculating Program===
&lt;pre&gt;
import networkx as nx
import random
import matplotlib.pyplot as plt

def add_edges():
    nodes=list(G.nodes())
    for s in nodes:
        for t in nodes:
            if s!=t:
                r=random.random()
                if r&lt;=0.5:
                    G.add_edge(s,t)
    return G


def assign_points(G):
    nodes=list(G.nodes())
    p=[]
    for each in nodes:
        p.append(100)
    return p

def distribute_points(G,points):
    nodes=list(G.nodes())
    new_points=[]
    for i in range(len(nodes)):
        new_points.append(0)

    for n in nodes:
        out=list(G.out_edges(n))
        if len(out)==0:
            new_points[n]=new_points[n]+points[n]
        else:
            share=points[n]/len(out)
            for (src,tgt) in out:
                new_points[tgt]=new_points[tgt]+share
    return  new_points                

def keep_distributing(points,G):
    while(1):
        new_points=distribute_points(G,points)
        print(new_points)
        points=new_points
        stop=input(&quot;Press # to stop or any other key to continue&quot;)
        if stop=='#':
            break
    return new_points

#create a directed graph
G=nx.DiGraph()
G.add_nodes_from([i for i in range(10)])
add_edges()
nx.draw(G,with_labels=True)
plt.show()

#assign initial points
points=assign_points(G)

#keep distributing
final_points=keep_distributing(points,G)

&lt;/pre&gt;

Output:

[[File:v12p4.png]]

[[File:v12p5.png]]

==Complete page rank using point calculation ==
&lt;pre&gt;
import networkx as nx
import random
import matplotlib.pyplot as plt

def add_edges():
    nodes=list(G.nodes())
    for s in nodes:
        for t in nodes:
            if s!=t:
                r=random.random()
                if r&lt;=0.5:
                    G.add_edge(s,t)
    return G


def assign_points(G):
    nodes=list(G.nodes())
    p=[]
    for each in nodes:
        p.append(100)
    return p

def distribute_points(G,points):
    nodes=list(G.nodes())
    new_points=[]
    for i in range(len(nodes)):
        new_points.append(0)

    for n in nodes:
        out=list(G.out_edges(n))
        if len(out)==0:
            new_points[n]=new_points[n]+points[n]
        else:
            share=points[n]/len(out)
            for (src,tgt) in out:
                new_points[tgt]=new_points[tgt]+share
    return  new_points                

def keep_distributing(points,G):
    while(1):
        new_points=distribute_points(G,points)
        print(new_points)
        points=new_points
        stop=input(&quot;Press # to stop or any other key to continue&quot;)
        if stop=='#':
            break
    return new_points


def rank_by_points(points):
    d={}
    for i in range(len(points)):
        d[i]=points[i]
    print(sorted(d.items(),key=lambda f:f[1]))
    

#create a directed graph
G=nx.DiGraph()
G.add_nodes_from([i for i in range(10)])
add_edges()
nx.draw(G,with_labels=True)
plt.show()

#assign initial points
points=assign_points(G)

#keep distributing
final_points=keep_distributing(points,G)
rank_by_points(final_points)

#default networkx function
result = nx.pagerank(G)
print(sorted(result.items(),key=lambda f:f[1]))

&lt;/pre&gt;

Output:

[[File:finalrank.png]]

[[File:finalout.png]]


==Last Program==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
G=nx.read_edgelist(r&quot;page_rank.txt&quot;,create_using=nx.DiGraph(),nodetype=int)
nx.draw(G,with_labels=True)
plt.show()

#calling point calculation algorithm
#Out program where, functions are defined
import v12p

#assign initial points
points=assign_points(G)

#keep distributing
final_points=keep_distributing(points,G)
rank_by_points(final_points)

#default networkx function
result = nx.pagerank(G)
print(sorted(result.items(),key=lambda f:f[1]))
&lt;/pre&gt;

[[File:lastOutput.png]]

Output: 

[[File:lastoutput1.png]]

=Collatz Conjecture=
Taught by Sudarshan sir and Amit sir, and Edited by Ms. Ami Tusharkant Choksi

If a number is even, divide it by ''2'', if it is odd, make multiply it by ''3'' and add ''1'', till you get ''1''. This simple problem is called, ''Collatz Conjecture''. 

[[File:collatz1.png|600px]]

[[File:collatz2.png|600px]]

[[File:collatz3.png|600px]]

[[File:collatz4.png|600px]]

[[File:collatz5.png|600px]]

Number is bigger doesn't mean more iterations are required. One can notice, from the output of the following program. 



The program to implement the same is as follows:
==Program==
&lt;pre&gt;
#collatz conjecture
#if num is even, divide it by 2
#if num is odd, new number is equal to 3n+1


def checkNum(num):
    iterations=1
    while(num!=1):
        if(num%2==0):
            num=int(num/2)            
        else:
            num = 3*num+1
        iterations+=1
        

    print(num,iterations)


#checkNum(12)#Output: 1 10
#checkNum(26)#Output: 1 11
checkNum(2000)#Output: 1 113
&lt;/pre&gt;

&lt;pre&gt;

#recursive approach

def checkNum(num):
    if num==1:
        return 1
    elif num%2==0:
        return checkNum(num/2)+1
    else:
        return checkNum(3*num +1)+1


output:
checkNum(26)
Out[27]: 11
checkNum(5000)
Out[28]: 29
&lt;/pre&gt;

==Program adding statement to print all iterations==
&lt;pre&gt;
def checkNum(num):
    iterations=1
    while(num!=1):
        if(num%2==0):
            num=int(num/2)            
        else:
            num = 3*num+1
        print(iterations,&quot;:&quot;,num)
        iterations+=1
        

    print(num,iterations)
&lt;/pre&gt;
==Output==
===For checkNum(2000)===
&lt;pre&gt;
1 : 1000
2 : 500
3 : 250
4 : 125
5 : 376
6 : 188
7 : 94
8 : 47
9 : 142
10 : 71
11 : 214
12 : 107
13 : 322
14 : 161
15 : 484
16 : 242
17 : 121
18 : 364
19 : 182
20 : 91
21 : 274
22 : 137
23 : 412
24 : 206
25 : 103
26 : 310
27 : 155
28 : 466
29 : 233
30 : 700
31 : 350
32 : 175
33 : 526
34 : 263
35 : 790
36 : 395
37 : 1186
38 : 593
39 : 1780
40 : 890
41 : 445
42 : 1336
43 : 668
44 : 334
45 : 167
46 : 502
47 : 251
48 : 754
49 : 377
50 : 1132
51 : 566
52 : 283
53 : 850
54 : 425
55 : 1276
56 : 638
57 : 319
58 : 958
59 : 479
60 : 1438
61 : 719
62 : 2158
63 : 1079
64 : 3238
65 : 1619
66 : 4858
67 : 2429
68 : 7288
69 : 3644
70 : 1822
71 : 911
72 : 2734
73 : 1367
74 : 4102
75 : 2051
76 : 6154
77 : 3077
78 : 9232
79 : 4616
80 : 2308
81 : 1154
82 : 577
83 : 1732
84 : 866
85 : 433
86 : 1300
87 : 650
88 : 325
89 : 976
90 : 488
91 : 244
92 : 122
93 : 61
94 : 184
95 : 92
96 : 46
97 : 23
98 : 70
99 : 35
100 : 106
101 : 53
102 : 160
103 : 80
104 : 40
105 : 20
106 : 10
107 : 5
108 : 16
109 : 8
110 : 4
111 : 2
112 : 1
1 113
&lt;/pre&gt;

===For checkNum(5000)===
&lt;pre&gt;
1 : 2500
2 : 1250
3 : 625
4 : 1876
5 : 938
6 : 469
7 : 1408
8 : 704
9 : 352
10 : 176
11 : 88
12 : 44
13 : 22
14 : 11
15 : 34
16 : 17
17 : 52
18 : 26
19 : 13
20 : 40
21 : 20
22 : 10
23 : 5
24 : 16
25 : 8
26 : 4
27 : 2
28 : 1
1 29
&lt;/pre&gt;
===For checkNum(25000000)===
&lt;pre&gt;
1 : 12500000
2 : 6250000
3 : 3125000
4 : 1562500
5 : 781250
6 : 390625
7 : 1171876
8 : 585938
9 : 292969
10 : 878908
11 : 439454
12 : 219727
13 : 659182
14 : 329591
15 : 988774
16 : 494387
17 : 1483162
18 : 741581
19 : 2224744
20 : 1112372
21 : 556186
22 : 278093
23 : 834280
24 : 417140
25 : 208570
26 : 104285
27 : 312856
28 : 156428
29 : 78214
30 : 39107
31 : 117322
32 : 58661
33 : 175984
34 : 87992
35 : 43996
36 : 21998
37 : 10999
38 : 32998
39 : 16499
40 : 49498
41 : 24749
42 : 74248
43 : 37124
44 : 18562
45 : 9281
46 : 27844
47 : 13922
48 : 6961
49 : 20884
50 : 10442
51 : 5221
52 : 15664
53 : 7832
54 : 3916
55 : 1958
56 : 979
57 : 2938
58 : 1469
59 : 4408
60 : 2204
61 : 1102
62 : 551
63 : 1654
64 : 827
65 : 2482
66 : 1241
67 : 3724
68 : 1862
69 : 931
70 : 2794
71 : 1397
72 : 4192
73 : 2096
74 : 1048
75 : 524
76 : 262
77 : 131
78 : 394
79 : 197
80 : 592
81 : 296
82 : 148
83 : 74
84 : 37
85 : 112
86 : 56
87 : 28
88 : 14
89 : 7
90 : 22
91 : 11
92 : 34
93 : 17
94 : 52
95 : 26
96 : 13
97 : 40
98 : 20
99 : 10
100 : 5
101 : 16
102 : 8
103 : 4
104 : 2
105 : 1
1 106
&lt;/pre&gt;

Happy Life ahead!!!

[[File:end1.png]]</text>
      <sha1>bt9653alu1t9i2uoc33e98d6gfvljcl</sha1>
    </revision>
    <revision>
      <id>4508</id>
      <parentid>4505</parentid>
      <timestamp>2018-10-18T06:06:02Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* Last Program */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="56053">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_12 Contributors of this page]

=Page Rank - How does Google Work=
One web page is having link to other page, that is a page is referring to other page. Google uses ''Page Rank'' algorithm to choose which page should be displayed first.

If we have network, connections as below:
[[File:rank0.png]]

We want to pick a leader out of all these nodes. How to pick a leader?  Why to elect a leader? It is because we want to find the super power of available nodes.                     
[[File:rank1.png]]

For example, the application wherein, we want to find the most impressive person of the  few ones. How to decide it? As shown in below figure, each node will communicate with other, randomly, we implement the count for each node, how many times, the particular node is being visited.
[[File:rank2.png]]

[[#Top]]

As shown in following, figure, all nodes are visited and each node is marked with the 
number i.e.number of times the node is visited.
[[File:rank3.png]]

The node with the maximum count, becomes the winner. Here, node with 120 count in figure 
below, is the winner. i.e. The person with 120 count in the figure is the most impressive 
person in the community being considered.
[[File:rank4.png]]

[[File:rank5.png]]

[[File:rank6.png]]

[[File:rank7.png]]


[[File:rank8.png]]

[[#Top]]

Google selects the page rank in this matter. Each web page is connected to other web page with web links. To a page, maximum link is there, that will be put on top results in Google search results.
[[File:rank9.png]]

Google uses web crawler. The crawler takes the random walk on the www network and rank the web sites.
[[File:rank10.png]]

This way Google ranks the pages and displays search results, according to page rank.
[[File:rank11.png]]

e.g.we search for ''mysore city''. Google has 10,000 results. But it displays the results in the sequence of page rank of search results, As shown in figure below.
[[File:mysore.png]]

[[#Top]]

==Page rank algorithm ==
As shown in beautiful figure below, few nodes combinely selected one as the leader, then that leader and other nodes, have selected         other as a leader. This way, finally the final leader is elected.
[[File:rank12.png|600px]]


[[File:graph00.png|600px]]


[[File:graph01.png|600px]]

[[#Top]]

==Gragh Drawing Program1==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
nx.barbell_graph(4,2)
G=nx.barbell_graph(4,2)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:Graph003.png|600px]]

[[#Top]]

==Gragh Drawing Program2==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
nx.barbell_graph(4,3)
G=nx.barbell_graph(4,3)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:Graph004.png|600px]]

[[#Top]]

==Gragh Drawing Program3==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
nx.barbell_graph(5,3)
G=nx.barbell_graph(5,3)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:Graph005.png|600px]]

[[#Top]]

==Complete Graph==
Complete graph is a graph, wherein, each node is connected to each other nodes in a graph.

&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.complete_graph(4)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:

[[File:completegraph001.png|600px]]

[[#Top]]

==Cycle graph==

&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.cycle_graph(5)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:

[[File:cyclegraph1.png|600px]]

[[#Top]]

==Ladder graph==

&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.ladder_graph(5)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:

[[File:laddergraph.png|600px]]

[[#Top]]

==Path Graph==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.path_graph(6)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:

[[File:pathgraph.png|600px]]

[[#Top]]

==Star Graph==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.star_graph(5)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:stargraph.png|600px]]

[[#Top]]

==Star Graph of 4 Nodes==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.star_graph(4)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:stargraph4points.png|600px]]

==Wheel Graph==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.wheel_graph(4)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:wheelgraph.png|600px]]

[[#Top]]

==Wheel Graph of 5 nodes==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.wheel_graph(5)
nx.draw(G)
plt.show()

&lt;/pre&gt;

Output:

[[File:wheelgraph5nodes.png|600px]]

[[#Top]]

==Wheel Graph of 6 nodes==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.wheel_graph(6)
nx.draw(G)
plt.show()

&lt;/pre&gt;

Output:

[[File:wheelgraph6nodes.png|600px]]

[[#Top]]

==Random Graph==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.gnp_random_graph(5,0.5)
nx.draw(G)
plt.show()

&lt;/pre&gt;

Output:

[[File:randomgraph1.png|600px]]


Running the same above program, we will get different output, as shown below, as it is random graph.

[[File:randomgraph2.png|600px]]

[[#Top]]

==Page Rank Algorithm Implementation==

===Random Directed Graph===
&lt;pre&gt;
import networkx as nx
import random
import matplotlib.pyplot as plt

#Draw random directed graph
G=nx.gnp_random_graph(10,0.5,directed=True)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output: 

[[File:randomDirectedGraph.png|600px]]


===Random Directed Graph with Labels===
&lt;pre&gt;
import networkx as nx
import random
import matplotlib.pyplot as plt

#Draw random directed graph 
G=nx.gnp_random_graph(10,0.5,directed=True)
#Give label numbering to nodes
nx.draw(G,with_labels=True)
plt.show()

&lt;/pre&gt;

Output:

[[File:randomDirectedGraphwithLabels.png|600px]]


[[#Top]]

===Page Rank Coding===
&lt;pre&gt;
import networkx as nx
import random
import matplotlib.pyplot as plt
import operator

#Draw random directed graph 
G=nx.gnp_random_graph(10,0.5,directed=True)
#Give label numbering to nodes
nx.draw(G,with_labels=True)
plt.show()

#x is the random source node
x=random.choice([i for i in range(G.number_of_nodes())])

#dictionary to maintain counter
dictCounter={}
#initialize the counter of each node as 0
for i in range(G.number_of_nodes()):
    dictCounter[i]=0
dictCounter[x]=dictCounter[x]+1

for i in range(10000):
    listn=list(G.neighbors(x))
    #if x is a sink node, we need to select random node for random walk
    #, else select random neighbor node

    if(len(listn)==0):
        x=random.choice([i for i in range(G.number_of_nodes())])
        dictCounter[x]=dictCounter[x]+1
    else:
        #choose a node randomly from neightbors
        x=random.choice(listn)
        dictCounter[x]=dictCounter[x]+1

p=nx.pagerank(G)
sorted_p=sorted(p.items(),key=operator.itemgetter(1))
sorted_rw=sorted(dictCounter.items(),key=operator.itemgetter(1))                        
#print(p)
#print(dictCounter)

print(sorted_p)
print(sorted_rw)

&lt;/pre&gt;

Output:

&lt;pre&gt;
[(2, 0.07139920240302768), (5, 0.07464882519777695), (3, 0.08527469366832419), 
(6, 0.08665188647066119), (4, 0.0987815549542114), (0, 0.10858415997562518), 
(9, 0.110369696943925), (8, 0.11456211367660116), (1, 0.11682018308814024), 
(7, 0.13290768362170685)]
[(2, 4), (5, 7), (8, 7), (6, 8), (3, 11), (7, 11), (1, 12), (4, 12), (0, 13), (9, 16)]
&lt;/pre&gt;

[[#Top]]

=Email communication Network=
==Page rank :page distribution method==
===Revision: Graph===
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
G=nx.cycle_graph(4)
labels={0:&quot;Bangluru&quot;,1:&quot;Gawhati&quot;,2:&quot;Kolkata&quot;,3:&quot;Chennai&quot;}
nx.draw(G,with_labels=True,labels=labels)
plt.show()
&lt;/pre&gt;

Output:

[[File:revGRAPH.png]]


===Directed Graph  Example===

[[File:directedGraphExample.png|600px]]

&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
G=nx.gnp_random_graph(4,.5,directed=True)
labels={0:&quot;Bangluru&quot;,1:&quot;Gawhati&quot;,2:&quot;Kolkata&quot;,3:&quot;Chennai&quot;}
nx.draw(G,with_labels=True,labels=labels)
plt.show()

&lt;/pre&gt;

Output:
[[File:directedg.png|600px]]


[[#Top]]


==Bidirectional with Parallel and self loops==
==Bidirectional with Parallel edges==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
G=nx.MultiDiGraph()

G.add_node(1)
G.add_node(2)
G.add_node(3)
G.add_node(4)

G.add_path([1,2,3,4,1])
G.add_edge(1,4)
nx.draw(G,with_labels=True)
plt.show()
&lt;/pre&gt;

Output: 

[[File:bidirectionalg.png]]

==Bidirectional with Self loops==
It doesn't show as graph. It is not taught, I did it myself.(Ms. Ami TUSHARKANT CHOKSI)
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
G=nx.MultiDiGraph()

G.add_node(1)
G.add_node(2)
G.add_node(3)
G.add_node(4)

G.add_path([1,2,3,4,1])
G.add_edge(1,4)
G.add_edge(1,1)
nx.draw(G,with_labels=True)
d=G.selfloop_edges()
print(d)
plt.show()

&lt;/pre&gt;

#Output: &lt;generator object selfloop_edges.&lt;locals&gt;.&lt;genexpr&gt; at 0x0B790150&gt;
#It shows self loop is there in the graph


==Directed Undirected Graph==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

#undirected graph
U=nx.Graph()

#directed graph
G=nx.DiGraph()

#nodes in graph
print(G.nodes())#Output: []
G.add_nodes_from([i for i in range(5)])
print(G.nodes())#Output: [0, 1, 2, 3, 4]

#edges
print(G.out_edges())#Output:[]

print(G.in_edges())#Output:[]

G.add_edge(1,2)
print(G.edges())#Output: [(1, 2)]
print(G.in_edges())#Output: [(1, 2)]
print(G.out_edges())#Output: [(1, 2)]

G.add_edge(0,3)
G.add_edge(2,3)
G.add_edge(3,2)
G.add_edge(3,4)
G.add_edge(4,1)
print(G.out_edges(2))#Output: [(2, 3)]
print(G.out_edges(3))#Output:[(3, 2), (3, 4)]
print(G.in_edges(3))#Output:[(0, 3), (2, 3)]

&lt;/pre&gt;

[[#Top]]

==Points Distribution Method==
&lt;ul&gt;
&lt;li&gt;Initially, all nodes are given equal points&lt;/li&gt;
&lt;li&gt;Rule&lt;/li&gt;
&lt;ul&gt;
&lt;li&gt;Share whatever you have equally with your neighbors&lt;/li&gt;
&lt;/ul&gt;
&lt;li&gt;FOR NODE B:Neighbors: C&lt;/li&gt;
&lt;li&gt;Give all of its points to C&lt;/li&gt;
&lt;li&gt;FOR NODE C:Neighbors: A&lt;/li&gt;
&lt;li&gt;Give all of its points to A&lt;/li&gt;
&lt;li&gt;new point of A=old points of C&lt;/li&gt;
&lt;li&gt;new point of B=(1/2)*old points of A&lt;/li&gt;
&lt;li&gt;new point of C=(1/2)*old points of A+old points of B&lt;/li&gt;
&lt;/ul&gt;

===In Excel, Implementation===
[[File:grEx1.png|600px]]

[[File:grEx2.png|600px]]

[[File:grEx3.png|600px]]

[[#Top]]

After some nodes, points becomes constant, as shown below.

&lt;table class=&quot;tg&quot;&gt;
  &lt;tr&gt;
    &lt;th class=&quot;tg-xldj&quot;&gt;100&lt;/th&gt;
    &lt;th class=&quot;tg-xldj&quot;&gt;100&lt;/th&gt;
    &lt;th class=&quot;tg-xldj&quot;&gt;100&lt;/th&gt;
    &lt;th class=&quot;tg-xldj&quot;&gt; &lt;/th&gt;
    &lt;th class=&quot;tg-xldj&quot;&gt;300&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;100&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;50&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;150&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;150&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;50&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;100&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;100&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;75&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;125&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;125&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;50&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;125&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;125&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;62.5&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;112.5&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;112.5&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;62.5&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;125&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;125&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;56.25&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;118.75&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;118.75&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;62.5&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;118.75&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;118.75&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;59.375&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;121.875&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;121.875&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;59.375&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;118.75&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;118.75&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;60.9375&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;120.3125&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;120.3125&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;59.375&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;120.3125&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;120.3125&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;60.15625&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;119.5313&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;119.5313&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;60.15625&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;120.3125&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.3125&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;59.76563&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9219&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9219&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60.15625&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9219&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9219&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;59.96094&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.1172&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.1172&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;59.96094&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9219&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9219&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60.05859&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0195&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0195&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;59.96094&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0195&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0195&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60.00977&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9707&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9707&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60.00977&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0195&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0195&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;59.98535&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9951&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9951&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60.00977&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9951&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9951&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;59.99756&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0073&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0073&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;59.99756&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9951&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9951&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60.00366&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0012&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0012&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;59.99756&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0012&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0012&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60.00061&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9982&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9982&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60.00061&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0012&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0012&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;59.99908&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9997&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9997&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60.00061&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9997&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9997&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;59.99985&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0005&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0005&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;59.99985&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9997&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9997&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60.00023&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0001&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0001&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;59.99985&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0001&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0001&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60.00004&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9999&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9999&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60.00004&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0001&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0001&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;59.99994&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60.00004&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;59.99999&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;59.99999&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60.00001&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;59.99999&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;

[[#Top]]

===Directed Graph===
&lt;pre&gt;
import networkx as nx
import random
import matplotlib.pyplot as plt

def add_edges():
    nodes=list(G.nodes())
    for s in nodes:
        for t in nodes:
            if s!=t:
                r=random.random()
                if r&lt;=0.5:
                    G.add_edge(s,t)
    return G

#create a directed graph
G=nx.DiGraph()
G.add_nodes_from([i for i in range(10)])
add_edges()
nx.draw(G,with_labels=True)
plt.show()
&lt;/pre&gt;

OUTPUT:

[[File:v12p1.png|600px]]

[[File:v12p2.png|600px]]

[[File:v12p3.png|600px]]

===Point Calculating Program===
&lt;pre&gt;
import networkx as nx
import random
import matplotlib.pyplot as plt

def add_edges():
    nodes=list(G.nodes())
    for s in nodes:
        for t in nodes:
            if s!=t:
                r=random.random()
                if r&lt;=0.5:
                    G.add_edge(s,t)
    return G


def assign_points(G):
    nodes=list(G.nodes())
    p=[]
    for each in nodes:
        p.append(100)
    return p

def distribute_points(G,points):
    nodes=list(G.nodes())
    new_points=[]
    for i in range(len(nodes)):
        new_points.append(0)

    for n in nodes:
        out=list(G.out_edges(n))
        if len(out)==0:
            new_points[n]=new_points[n]+points[n]
        else:
            share=points[n]/len(out)
            for (src,tgt) in out:
                new_points[tgt]=new_points[tgt]+share
    return  new_points                

def keep_distributing(points,G):
    while(1):
        new_points=distribute_points(G,points)
        print(new_points)
        points=new_points
        stop=input(&quot;Press # to stop or any other key to continue&quot;)
        if stop=='#':
            break
    return new_points

#create a directed graph
G=nx.DiGraph()
G.add_nodes_from([i for i in range(10)])
add_edges()
nx.draw(G,with_labels=True)
plt.show()

#assign initial points
points=assign_points(G)

#keep distributing
final_points=keep_distributing(points,G)

&lt;/pre&gt;

Output:

[[File:v12p4.png]]

[[File:v12p5.png]]

==Complete page rank using point calculation ==
&lt;pre&gt;
import networkx as nx
import random
import matplotlib.pyplot as plt

def add_edges():
    nodes=list(G.nodes())
    for s in nodes:
        for t in nodes:
            if s!=t:
                r=random.random()
                if r&lt;=0.5:
                    G.add_edge(s,t)
    return G


def assign_points(G):
    nodes=list(G.nodes())
    p=[]
    for each in nodes:
        p.append(100)
    return p

def distribute_points(G,points):
    nodes=list(G.nodes())
    new_points=[]
    for i in range(len(nodes)):
        new_points.append(0)

    for n in nodes:
        out=list(G.out_edges(n))
        if len(out)==0:
            new_points[n]=new_points[n]+points[n]
        else:
            share=points[n]/len(out)
            for (src,tgt) in out:
                new_points[tgt]=new_points[tgt]+share
    return  new_points                

def keep_distributing(points,G):
    while(1):
        new_points=distribute_points(G,points)
        print(new_points)
        points=new_points
        stop=input(&quot;Press # to stop or any other key to continue&quot;)
        if stop=='#':
            break
    return new_points


def rank_by_points(points):
    d={}
    for i in range(len(points)):
        d[i]=points[i]
    print(sorted(d.items(),key=lambda f:f[1]))
    

#create a directed graph
G=nx.DiGraph()
G.add_nodes_from([i for i in range(10)])
add_edges()
nx.draw(G,with_labels=True)
plt.show()

#assign initial points
points=assign_points(G)

#keep distributing
final_points=keep_distributing(points,G)
rank_by_points(final_points)

#default networkx function
result = nx.pagerank(G)
print(sorted(result.items(),key=lambda f:f[1]))

&lt;/pre&gt;

Output:

[[File:finalrank.png]]

[[File:finalout.png]]


==Last Program==
Data File: page_rank.txt provided by Simran mam
[[Media:page_rank.txt]]

&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
G=nx.read_edgelist(r&quot;page_rank.txt&quot;,create_using=nx.DiGraph(),nodetype=int)
nx.draw(G,with_labels=True)
plt.show()

#calling point calculation algorithm
#Out program where, functions are defined
import v12p

#assign initial points
points=assign_points(G)

#keep distributing
final_points=keep_distributing(points,G)
rank_by_points(final_points)

#default networkx function
result = nx.pagerank(G)
print(sorted(result.items(),key=lambda f:f[1]))
&lt;/pre&gt;

[[File:lastOutput.png]]

Output: 

[[File:lastoutput1.png]]

=Collatz Conjecture=
Taught by Sudarshan sir and Amit sir, and Edited by Ms. Ami Tusharkant Choksi

If a number is even, divide it by ''2'', if it is odd, make multiply it by ''3'' and add ''1'', till you get ''1''. This simple problem is called, ''Collatz Conjecture''. 

[[File:collatz1.png|600px]]

[[File:collatz2.png|600px]]

[[File:collatz3.png|600px]]

[[File:collatz4.png|600px]]

[[File:collatz5.png|600px]]

Number is bigger doesn't mean more iterations are required. One can notice, from the output of the following program. 



The program to implement the same is as follows:
==Program==
&lt;pre&gt;
#collatz conjecture
#if num is even, divide it by 2
#if num is odd, new number is equal to 3n+1


def checkNum(num):
    iterations=1
    while(num!=1):
        if(num%2==0):
            num=int(num/2)            
        else:
            num = 3*num+1
        iterations+=1
        

    print(num,iterations)


#checkNum(12)#Output: 1 10
#checkNum(26)#Output: 1 11
checkNum(2000)#Output: 1 113
&lt;/pre&gt;

&lt;pre&gt;

#recursive approach

def checkNum(num):
    if num==1:
        return 1
    elif num%2==0:
        return checkNum(num/2)+1
    else:
        return checkNum(3*num +1)+1


output:
checkNum(26)
Out[27]: 11
checkNum(5000)
Out[28]: 29
&lt;/pre&gt;

==Program adding statement to print all iterations==
&lt;pre&gt;
def checkNum(num):
    iterations=1
    while(num!=1):
        if(num%2==0):
            num=int(num/2)            
        else:
            num = 3*num+1
        print(iterations,&quot;:&quot;,num)
        iterations+=1
        

    print(num,iterations)
&lt;/pre&gt;
==Output==
===For checkNum(2000)===
&lt;pre&gt;
1 : 1000
2 : 500
3 : 250
4 : 125
5 : 376
6 : 188
7 : 94
8 : 47
9 : 142
10 : 71
11 : 214
12 : 107
13 : 322
14 : 161
15 : 484
16 : 242
17 : 121
18 : 364
19 : 182
20 : 91
21 : 274
22 : 137
23 : 412
24 : 206
25 : 103
26 : 310
27 : 155
28 : 466
29 : 233
30 : 700
31 : 350
32 : 175
33 : 526
34 : 263
35 : 790
36 : 395
37 : 1186
38 : 593
39 : 1780
40 : 890
41 : 445
42 : 1336
43 : 668
44 : 334
45 : 167
46 : 502
47 : 251
48 : 754
49 : 377
50 : 1132
51 : 566
52 : 283
53 : 850
54 : 425
55 : 1276
56 : 638
57 : 319
58 : 958
59 : 479
60 : 1438
61 : 719
62 : 2158
63 : 1079
64 : 3238
65 : 1619
66 : 4858
67 : 2429
68 : 7288
69 : 3644
70 : 1822
71 : 911
72 : 2734
73 : 1367
74 : 4102
75 : 2051
76 : 6154
77 : 3077
78 : 9232
79 : 4616
80 : 2308
81 : 1154
82 : 577
83 : 1732
84 : 866
85 : 433
86 : 1300
87 : 650
88 : 325
89 : 976
90 : 488
91 : 244
92 : 122
93 : 61
94 : 184
95 : 92
96 : 46
97 : 23
98 : 70
99 : 35
100 : 106
101 : 53
102 : 160
103 : 80
104 : 40
105 : 20
106 : 10
107 : 5
108 : 16
109 : 8
110 : 4
111 : 2
112 : 1
1 113
&lt;/pre&gt;

===For checkNum(5000)===
&lt;pre&gt;
1 : 2500
2 : 1250
3 : 625
4 : 1876
5 : 938
6 : 469
7 : 1408
8 : 704
9 : 352
10 : 176
11 : 88
12 : 44
13 : 22
14 : 11
15 : 34
16 : 17
17 : 52
18 : 26
19 : 13
20 : 40
21 : 20
22 : 10
23 : 5
24 : 16
25 : 8
26 : 4
27 : 2
28 : 1
1 29
&lt;/pre&gt;
===For checkNum(25000000)===
&lt;pre&gt;
1 : 12500000
2 : 6250000
3 : 3125000
4 : 1562500
5 : 781250
6 : 390625
7 : 1171876
8 : 585938
9 : 292969
10 : 878908
11 : 439454
12 : 219727
13 : 659182
14 : 329591
15 : 988774
16 : 494387
17 : 1483162
18 : 741581
19 : 2224744
20 : 1112372
21 : 556186
22 : 278093
23 : 834280
24 : 417140
25 : 208570
26 : 104285
27 : 312856
28 : 156428
29 : 78214
30 : 39107
31 : 117322
32 : 58661
33 : 175984
34 : 87992
35 : 43996
36 : 21998
37 : 10999
38 : 32998
39 : 16499
40 : 49498
41 : 24749
42 : 74248
43 : 37124
44 : 18562
45 : 9281
46 : 27844
47 : 13922
48 : 6961
49 : 20884
50 : 10442
51 : 5221
52 : 15664
53 : 7832
54 : 3916
55 : 1958
56 : 979
57 : 2938
58 : 1469
59 : 4408
60 : 2204
61 : 1102
62 : 551
63 : 1654
64 : 827
65 : 2482
66 : 1241
67 : 3724
68 : 1862
69 : 931
70 : 2794
71 : 1397
72 : 4192
73 : 2096
74 : 1048
75 : 524
76 : 262
77 : 131
78 : 394
79 : 197
80 : 592
81 : 296
82 : 148
83 : 74
84 : 37
85 : 112
86 : 56
87 : 28
88 : 14
89 : 7
90 : 22
91 : 11
92 : 34
93 : 17
94 : 52
95 : 26
96 : 13
97 : 40
98 : 20
99 : 10
100 : 5
101 : 16
102 : 8
103 : 4
104 : 2
105 : 1
1 106
&lt;/pre&gt;

Happy Life ahead!!!

[[File:end1.png]]</text>
      <sha1>97upa7xpbnjpyhuv0iajn9h1newb1i0</sha1>
    </revision>
    <revision>
      <id>4509</id>
      <parentid>4508</parentid>
      <timestamp>2018-10-18T06:22:09Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* Last Program */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="56805">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_12 Contributors of this page]

=Page Rank - How does Google Work=
One web page is having link to other page, that is a page is referring to other page. Google uses ''Page Rank'' algorithm to choose which page should be displayed first.

If we have network, connections as below:
[[File:rank0.png]]

We want to pick a leader out of all these nodes. How to pick a leader?  Why to elect a leader? It is because we want to find the super power of available nodes.                     
[[File:rank1.png]]

For example, the application wherein, we want to find the most impressive person of the  few ones. How to decide it? As shown in below figure, each node will communicate with other, randomly, we implement the count for each node, how many times, the particular node is being visited.
[[File:rank2.png]]

[[#Top]]

As shown in following, figure, all nodes are visited and each node is marked with the 
number i.e.number of times the node is visited.
[[File:rank3.png]]

The node with the maximum count, becomes the winner. Here, node with 120 count in figure 
below, is the winner. i.e. The person with 120 count in the figure is the most impressive 
person in the community being considered.
[[File:rank4.png]]

[[File:rank5.png]]

[[File:rank6.png]]

[[File:rank7.png]]


[[File:rank8.png]]

[[#Top]]

Google selects the page rank in this matter. Each web page is connected to other web page with web links. To a page, maximum link is there, that will be put on top results in Google search results.
[[File:rank9.png]]

Google uses web crawler. The crawler takes the random walk on the www network and rank the web sites.
[[File:rank10.png]]

This way Google ranks the pages and displays search results, according to page rank.
[[File:rank11.png]]

e.g.we search for ''mysore city''. Google has 10,000 results. But it displays the results in the sequence of page rank of search results, As shown in figure below.
[[File:mysore.png]]

[[#Top]]

==Page rank algorithm ==
As shown in beautiful figure below, few nodes combinely selected one as the leader, then that leader and other nodes, have selected         other as a leader. This way, finally the final leader is elected.
[[File:rank12.png|600px]]


[[File:graph00.png|600px]]


[[File:graph01.png|600px]]

[[#Top]]

==Gragh Drawing Program1==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
nx.barbell_graph(4,2)
G=nx.barbell_graph(4,2)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:Graph003.png|600px]]

[[#Top]]

==Gragh Drawing Program2==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
nx.barbell_graph(4,3)
G=nx.barbell_graph(4,3)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:Graph004.png|600px]]

[[#Top]]

==Gragh Drawing Program3==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
nx.barbell_graph(5,3)
G=nx.barbell_graph(5,3)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:Graph005.png|600px]]

[[#Top]]

==Complete Graph==
Complete graph is a graph, wherein, each node is connected to each other nodes in a graph.

&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.complete_graph(4)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:

[[File:completegraph001.png|600px]]

[[#Top]]

==Cycle graph==

&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.cycle_graph(5)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:

[[File:cyclegraph1.png|600px]]

[[#Top]]

==Ladder graph==

&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.ladder_graph(5)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:

[[File:laddergraph.png|600px]]

[[#Top]]

==Path Graph==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.path_graph(6)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:

[[File:pathgraph.png|600px]]

[[#Top]]

==Star Graph==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.star_graph(5)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:stargraph.png|600px]]

[[#Top]]

==Star Graph of 4 Nodes==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.star_graph(4)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:stargraph4points.png|600px]]

==Wheel Graph==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.wheel_graph(4)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:wheelgraph.png|600px]]

[[#Top]]

==Wheel Graph of 5 nodes==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.wheel_graph(5)
nx.draw(G)
plt.show()

&lt;/pre&gt;

Output:

[[File:wheelgraph5nodes.png|600px]]

[[#Top]]

==Wheel Graph of 6 nodes==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.wheel_graph(6)
nx.draw(G)
plt.show()

&lt;/pre&gt;

Output:

[[File:wheelgraph6nodes.png|600px]]

[[#Top]]

==Random Graph==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.gnp_random_graph(5,0.5)
nx.draw(G)
plt.show()

&lt;/pre&gt;

Output:

[[File:randomgraph1.png|600px]]


Running the same above program, we will get different output, as shown below, as it is random graph.

[[File:randomgraph2.png|600px]]

[[#Top]]

==Page Rank Algorithm Implementation==

===Random Directed Graph===
&lt;pre&gt;
import networkx as nx
import random
import matplotlib.pyplot as plt

#Draw random directed graph
G=nx.gnp_random_graph(10,0.5,directed=True)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output: 

[[File:randomDirectedGraph.png|600px]]


===Random Directed Graph with Labels===
&lt;pre&gt;
import networkx as nx
import random
import matplotlib.pyplot as plt

#Draw random directed graph 
G=nx.gnp_random_graph(10,0.5,directed=True)
#Give label numbering to nodes
nx.draw(G,with_labels=True)
plt.show()

&lt;/pre&gt;

Output:

[[File:randomDirectedGraphwithLabels.png|600px]]


[[#Top]]

===Page Rank Coding===
&lt;pre&gt;
import networkx as nx
import random
import matplotlib.pyplot as plt
import operator

#Draw random directed graph 
G=nx.gnp_random_graph(10,0.5,directed=True)
#Give label numbering to nodes
nx.draw(G,with_labels=True)
plt.show()

#x is the random source node
x=random.choice([i for i in range(G.number_of_nodes())])

#dictionary to maintain counter
dictCounter={}
#initialize the counter of each node as 0
for i in range(G.number_of_nodes()):
    dictCounter[i]=0
dictCounter[x]=dictCounter[x]+1

for i in range(10000):
    listn=list(G.neighbors(x))
    #if x is a sink node, we need to select random node for random walk
    #, else select random neighbor node

    if(len(listn)==0):
        x=random.choice([i for i in range(G.number_of_nodes())])
        dictCounter[x]=dictCounter[x]+1
    else:
        #choose a node randomly from neightbors
        x=random.choice(listn)
        dictCounter[x]=dictCounter[x]+1

p=nx.pagerank(G)
sorted_p=sorted(p.items(),key=operator.itemgetter(1))
sorted_rw=sorted(dictCounter.items(),key=operator.itemgetter(1))                        
#print(p)
#print(dictCounter)

print(sorted_p)
print(sorted_rw)

&lt;/pre&gt;

Output:

&lt;pre&gt;
[(2, 0.07139920240302768), (5, 0.07464882519777695), (3, 0.08527469366832419), 
(6, 0.08665188647066119), (4, 0.0987815549542114), (0, 0.10858415997562518), 
(9, 0.110369696943925), (8, 0.11456211367660116), (1, 0.11682018308814024), 
(7, 0.13290768362170685)]
[(2, 4), (5, 7), (8, 7), (6, 8), (3, 11), (7, 11), (1, 12), (4, 12), (0, 13), (9, 16)]
&lt;/pre&gt;

[[#Top]]

=Email communication Network=
==Page rank :page distribution method==
===Revision: Graph===
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
G=nx.cycle_graph(4)
labels={0:&quot;Bangluru&quot;,1:&quot;Gawhati&quot;,2:&quot;Kolkata&quot;,3:&quot;Chennai&quot;}
nx.draw(G,with_labels=True,labels=labels)
plt.show()
&lt;/pre&gt;

Output:

[[File:revGRAPH.png]]


===Directed Graph  Example===

[[File:directedGraphExample.png|600px]]

&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
G=nx.gnp_random_graph(4,.5,directed=True)
labels={0:&quot;Bangluru&quot;,1:&quot;Gawhati&quot;,2:&quot;Kolkata&quot;,3:&quot;Chennai&quot;}
nx.draw(G,with_labels=True,labels=labels)
plt.show()

&lt;/pre&gt;

Output:
[[File:directedg.png|600px]]


[[#Top]]


==Bidirectional with Parallel and self loops==
==Bidirectional with Parallel edges==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
G=nx.MultiDiGraph()

G.add_node(1)
G.add_node(2)
G.add_node(3)
G.add_node(4)

G.add_path([1,2,3,4,1])
G.add_edge(1,4)
nx.draw(G,with_labels=True)
plt.show()
&lt;/pre&gt;

Output: 

[[File:bidirectionalg.png]]

==Bidirectional with Self loops==
It doesn't show as graph. It is not taught, I did it myself.(Ms. Ami TUSHARKANT CHOKSI)
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
G=nx.MultiDiGraph()

G.add_node(1)
G.add_node(2)
G.add_node(3)
G.add_node(4)

G.add_path([1,2,3,4,1])
G.add_edge(1,4)
G.add_edge(1,1)
nx.draw(G,with_labels=True)
d=G.selfloop_edges()
print(d)
plt.show()

&lt;/pre&gt;

#Output: &lt;generator object selfloop_edges.&lt;locals&gt;.&lt;genexpr&gt; at 0x0B790150&gt;
#It shows self loop is there in the graph


==Directed Undirected Graph==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

#undirected graph
U=nx.Graph()

#directed graph
G=nx.DiGraph()

#nodes in graph
print(G.nodes())#Output: []
G.add_nodes_from([i for i in range(5)])
print(G.nodes())#Output: [0, 1, 2, 3, 4]

#edges
print(G.out_edges())#Output:[]

print(G.in_edges())#Output:[]

G.add_edge(1,2)
print(G.edges())#Output: [(1, 2)]
print(G.in_edges())#Output: [(1, 2)]
print(G.out_edges())#Output: [(1, 2)]

G.add_edge(0,3)
G.add_edge(2,3)
G.add_edge(3,2)
G.add_edge(3,4)
G.add_edge(4,1)
print(G.out_edges(2))#Output: [(2, 3)]
print(G.out_edges(3))#Output:[(3, 2), (3, 4)]
print(G.in_edges(3))#Output:[(0, 3), (2, 3)]

&lt;/pre&gt;

[[#Top]]

==Points Distribution Method==
&lt;ul&gt;
&lt;li&gt;Initially, all nodes are given equal points&lt;/li&gt;
&lt;li&gt;Rule&lt;/li&gt;
&lt;ul&gt;
&lt;li&gt;Share whatever you have equally with your neighbors&lt;/li&gt;
&lt;/ul&gt;
&lt;li&gt;FOR NODE B:Neighbors: C&lt;/li&gt;
&lt;li&gt;Give all of its points to C&lt;/li&gt;
&lt;li&gt;FOR NODE C:Neighbors: A&lt;/li&gt;
&lt;li&gt;Give all of its points to A&lt;/li&gt;
&lt;li&gt;new point of A=old points of C&lt;/li&gt;
&lt;li&gt;new point of B=(1/2)*old points of A&lt;/li&gt;
&lt;li&gt;new point of C=(1/2)*old points of A+old points of B&lt;/li&gt;
&lt;/ul&gt;

===In Excel, Implementation===
[[File:grEx1.png|600px]]

[[File:grEx2.png|600px]]

[[File:grEx3.png|600px]]

[[#Top]]

After some nodes, points becomes constant, as shown below.

&lt;table class=&quot;tg&quot;&gt;
  &lt;tr&gt;
    &lt;th class=&quot;tg-xldj&quot;&gt;100&lt;/th&gt;
    &lt;th class=&quot;tg-xldj&quot;&gt;100&lt;/th&gt;
    &lt;th class=&quot;tg-xldj&quot;&gt;100&lt;/th&gt;
    &lt;th class=&quot;tg-xldj&quot;&gt; &lt;/th&gt;
    &lt;th class=&quot;tg-xldj&quot;&gt;300&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;100&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;50&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;150&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;150&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;50&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;100&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;100&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;75&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;125&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;125&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;50&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;125&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;125&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;62.5&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;112.5&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;112.5&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;62.5&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;125&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;125&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;56.25&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;118.75&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;118.75&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;62.5&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;118.75&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;118.75&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;59.375&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;121.875&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;121.875&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;59.375&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;118.75&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;118.75&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;60.9375&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;120.3125&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;120.3125&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;59.375&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;120.3125&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;120.3125&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;60.15625&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;119.5313&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;119.5313&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;60.15625&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;120.3125&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.3125&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;59.76563&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9219&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9219&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60.15625&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9219&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9219&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;59.96094&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.1172&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.1172&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;59.96094&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9219&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9219&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60.05859&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0195&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0195&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;59.96094&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0195&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0195&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60.00977&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9707&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9707&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60.00977&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0195&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0195&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;59.98535&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9951&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9951&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60.00977&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9951&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9951&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;59.99756&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0073&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0073&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;59.99756&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9951&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9951&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60.00366&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0012&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0012&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;59.99756&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0012&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0012&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60.00061&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9982&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9982&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60.00061&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0012&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0012&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;59.99908&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9997&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9997&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60.00061&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9997&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9997&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;59.99985&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0005&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0005&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;59.99985&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9997&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9997&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60.00023&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0001&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0001&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;59.99985&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0001&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0001&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60.00004&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9999&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9999&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60.00004&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0001&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0001&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;59.99994&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60.00004&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;59.99999&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;59.99999&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60.00001&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;59.99999&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;

[[#Top]]

===Directed Graph===
&lt;pre&gt;
import networkx as nx
import random
import matplotlib.pyplot as plt

def add_edges():
    nodes=list(G.nodes())
    for s in nodes:
        for t in nodes:
            if s!=t:
                r=random.random()
                if r&lt;=0.5:
                    G.add_edge(s,t)
    return G

#create a directed graph
G=nx.DiGraph()
G.add_nodes_from([i for i in range(10)])
add_edges()
nx.draw(G,with_labels=True)
plt.show()
&lt;/pre&gt;

OUTPUT:

[[File:v12p1.png|600px]]

[[File:v12p2.png|600px]]

[[File:v12p3.png|600px]]

===Point Calculating Program===
&lt;pre&gt;
import networkx as nx
import random
import matplotlib.pyplot as plt

def add_edges():
    nodes=list(G.nodes())
    for s in nodes:
        for t in nodes:
            if s!=t:
                r=random.random()
                if r&lt;=0.5:
                    G.add_edge(s,t)
    return G


def assign_points(G):
    nodes=list(G.nodes())
    p=[]
    for each in nodes:
        p.append(100)
    return p

def distribute_points(G,points):
    nodes=list(G.nodes())
    new_points=[]
    for i in range(len(nodes)):
        new_points.append(0)

    for n in nodes:
        out=list(G.out_edges(n))
        if len(out)==0:
            new_points[n]=new_points[n]+points[n]
        else:
            share=points[n]/len(out)
            for (src,tgt) in out:
                new_points[tgt]=new_points[tgt]+share
    return  new_points                

def keep_distributing(points,G):
    while(1):
        new_points=distribute_points(G,points)
        print(new_points)
        points=new_points
        stop=input(&quot;Press # to stop or any other key to continue&quot;)
        if stop=='#':
            break
    return new_points

#create a directed graph
G=nx.DiGraph()
G.add_nodes_from([i for i in range(10)])
add_edges()
nx.draw(G,with_labels=True)
plt.show()

#assign initial points
points=assign_points(G)

#keep distributing
final_points=keep_distributing(points,G)

&lt;/pre&gt;

Output:

[[File:v12p4.png]]

[[File:v12p5.png]]

==Complete page rank using point calculation ==
&lt;pre&gt;
import networkx as nx
import random
import matplotlib.pyplot as plt

def add_edges():
    nodes=list(G.nodes())
    for s in nodes:
        for t in nodes:
            if s!=t:
                r=random.random()
                if r&lt;=0.5:
                    G.add_edge(s,t)
    return G


def assign_points(G):
    nodes=list(G.nodes())
    p=[]
    for each in nodes:
        p.append(100)
    return p

def distribute_points(G,points):
    nodes=list(G.nodes())
    new_points=[]
    for i in range(len(nodes)):
        new_points.append(0)

    for n in nodes:
        out=list(G.out_edges(n))
        if len(out)==0:
            new_points[n]=new_points[n]+points[n]
        else:
            share=points[n]/len(out)
            for (src,tgt) in out:
                new_points[tgt]=new_points[tgt]+share
    return  new_points                

def keep_distributing(points,G):
    while(1):
        new_points=distribute_points(G,points)
        print(new_points)
        points=new_points
        stop=input(&quot;Press # to stop or any other key to continue&quot;)
        if stop=='#':
            break
    return new_points


def rank_by_points(points):
    d={}
    for i in range(len(points)):
        d[i]=points[i]
    print(sorted(d.items(),key=lambda f:f[1]))
    

#create a directed graph
G=nx.DiGraph()
G.add_nodes_from([i for i in range(10)])
add_edges()
nx.draw(G,with_labels=True)
plt.show()

#assign initial points
points=assign_points(G)

#keep distributing
final_points=keep_distributing(points,G)
rank_by_points(final_points)

#default networkx function
result = nx.pagerank(G)
print(sorted(result.items(),key=lambda f:f[1]))

&lt;/pre&gt;

Output:

[[File:finalrank.png]]

[[File:finalout.png]]


==Last Program==
Data File: page_rank.txt provided by Simran mam
===page_rank.txt file===
&lt;pre&gt;
1 2

1 3

1 4

1 5

1 6

7 8

7 9

7 6

7 5

7 4

7 1

7 10

11 12

11 13

11 6

11 14

15 10

15 16

15 18

15 6

15 17

15 13

13 6

13 4

13 14

13 18

20 21

20 22

20 23

20 24

21 17

21 10

21 18

21 25

6 13

6 7

6 12

6 18

2 3

2 12

2 1

2 20

2 13

5 12

5 9

5 6

5 7

5 11

4 13

4 19

4 22

4 7

9 12

9 5

9 6

9 13

9 16

16 24

16 15

16 9

16 4

16 22

12 6

12 2

12 23

18 17

18 15

18 3

18 19

18 6

24 13

24 18

24 16

24 25

24 20

23 20

23 14

23 12

23 10

23 5

10 15

10 24

10 12

10 7

10 21

25 24

25 3

25 11

25 13

25 22

22 3

22 21

22 16

22 8

22 15

14 7

14 18

14 16

4 21

14 4

3 1

3 10

3 8

3 18

3 22

17 18

17 10

17 21

17 15

17 3
&lt;/pre&gt;
===program code===
[[Media:page_rank.txt]]

&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
G=nx.read_edgelist(r&quot;page_rank.txt&quot;,create_using=nx.DiGraph(),nodetype=int)
nx.draw(G,with_labels=True)
plt.show()

#calling point calculation algorithm
#Out program where, functions are defined
from v12p import *

#assign initial points
points=assign_points(G)

#keep distributing
final_points=keep_distributing(points,G)
rank_by_points(final_points)

#default networkx function
result = nx.pagerank(G)
print(sorted(result.items(),key=lambda f:f[1]))
&lt;/pre&gt;

[[File:lastOutput.png]]

Output: 

[[File:lastoutput1.png]]

=Collatz Conjecture=
Taught by Sudarshan sir and Amit sir, and Edited by Ms. Ami Tusharkant Choksi

If a number is even, divide it by ''2'', if it is odd, make multiply it by ''3'' and add ''1'', till you get ''1''. This simple problem is called, ''Collatz Conjecture''. 

[[File:collatz1.png|600px]]

[[File:collatz2.png|600px]]

[[File:collatz3.png|600px]]

[[File:collatz4.png|600px]]

[[File:collatz5.png|600px]]

Number is bigger doesn't mean more iterations are required. One can notice, from the output of the following program. 



The program to implement the same is as follows:
==Program==
&lt;pre&gt;
#collatz conjecture
#if num is even, divide it by 2
#if num is odd, new number is equal to 3n+1


def checkNum(num):
    iterations=1
    while(num!=1):
        if(num%2==0):
            num=int(num/2)            
        else:
            num = 3*num+1
        iterations+=1
        

    print(num,iterations)


#checkNum(12)#Output: 1 10
#checkNum(26)#Output: 1 11
checkNum(2000)#Output: 1 113
&lt;/pre&gt;

&lt;pre&gt;

#recursive approach

def checkNum(num):
    if num==1:
        return 1
    elif num%2==0:
        return checkNum(num/2)+1
    else:
        return checkNum(3*num +1)+1


output:
checkNum(26)
Out[27]: 11
checkNum(5000)
Out[28]: 29
&lt;/pre&gt;

==Program adding statement to print all iterations==
&lt;pre&gt;
def checkNum(num):
    iterations=1
    while(num!=1):
        if(num%2==0):
            num=int(num/2)            
        else:
            num = 3*num+1
        print(iterations,&quot;:&quot;,num)
        iterations+=1
        

    print(num,iterations)
&lt;/pre&gt;
==Output==
===For checkNum(2000)===
&lt;pre&gt;
1 : 1000
2 : 500
3 : 250
4 : 125
5 : 376
6 : 188
7 : 94
8 : 47
9 : 142
10 : 71
11 : 214
12 : 107
13 : 322
14 : 161
15 : 484
16 : 242
17 : 121
18 : 364
19 : 182
20 : 91
21 : 274
22 : 137
23 : 412
24 : 206
25 : 103
26 : 310
27 : 155
28 : 466
29 : 233
30 : 700
31 : 350
32 : 175
33 : 526
34 : 263
35 : 790
36 : 395
37 : 1186
38 : 593
39 : 1780
40 : 890
41 : 445
42 : 1336
43 : 668
44 : 334
45 : 167
46 : 502
47 : 251
48 : 754
49 : 377
50 : 1132
51 : 566
52 : 283
53 : 850
54 : 425
55 : 1276
56 : 638
57 : 319
58 : 958
59 : 479
60 : 1438
61 : 719
62 : 2158
63 : 1079
64 : 3238
65 : 1619
66 : 4858
67 : 2429
68 : 7288
69 : 3644
70 : 1822
71 : 911
72 : 2734
73 : 1367
74 : 4102
75 : 2051
76 : 6154
77 : 3077
78 : 9232
79 : 4616
80 : 2308
81 : 1154
82 : 577
83 : 1732
84 : 866
85 : 433
86 : 1300
87 : 650
88 : 325
89 : 976
90 : 488
91 : 244
92 : 122
93 : 61
94 : 184
95 : 92
96 : 46
97 : 23
98 : 70
99 : 35
100 : 106
101 : 53
102 : 160
103 : 80
104 : 40
105 : 20
106 : 10
107 : 5
108 : 16
109 : 8
110 : 4
111 : 2
112 : 1
1 113
&lt;/pre&gt;

===For checkNum(5000)===
&lt;pre&gt;
1 : 2500
2 : 1250
3 : 625
4 : 1876
5 : 938
6 : 469
7 : 1408
8 : 704
9 : 352
10 : 176
11 : 88
12 : 44
13 : 22
14 : 11
15 : 34
16 : 17
17 : 52
18 : 26
19 : 13
20 : 40
21 : 20
22 : 10
23 : 5
24 : 16
25 : 8
26 : 4
27 : 2
28 : 1
1 29
&lt;/pre&gt;
===For checkNum(25000000)===
&lt;pre&gt;
1 : 12500000
2 : 6250000
3 : 3125000
4 : 1562500
5 : 781250
6 : 390625
7 : 1171876
8 : 585938
9 : 292969
10 : 878908
11 : 439454
12 : 219727
13 : 659182
14 : 329591
15 : 988774
16 : 494387
17 : 1483162
18 : 741581
19 : 2224744
20 : 1112372
21 : 556186
22 : 278093
23 : 834280
24 : 417140
25 : 208570
26 : 104285
27 : 312856
28 : 156428
29 : 78214
30 : 39107
31 : 117322
32 : 58661
33 : 175984
34 : 87992
35 : 43996
36 : 21998
37 : 10999
38 : 32998
39 : 16499
40 : 49498
41 : 24749
42 : 74248
43 : 37124
44 : 18562
45 : 9281
46 : 27844
47 : 13922
48 : 6961
49 : 20884
50 : 10442
51 : 5221
52 : 15664
53 : 7832
54 : 3916
55 : 1958
56 : 979
57 : 2938
58 : 1469
59 : 4408
60 : 2204
61 : 1102
62 : 551
63 : 1654
64 : 827
65 : 2482
66 : 1241
67 : 3724
68 : 1862
69 : 931
70 : 2794
71 : 1397
72 : 4192
73 : 2096
74 : 1048
75 : 524
76 : 262
77 : 131
78 : 394
79 : 197
80 : 592
81 : 296
82 : 148
83 : 74
84 : 37
85 : 112
86 : 56
87 : 28
88 : 14
89 : 7
90 : 22
91 : 11
92 : 34
93 : 17
94 : 52
95 : 26
96 : 13
97 : 40
98 : 20
99 : 10
100 : 5
101 : 16
102 : 8
103 : 4
104 : 2
105 : 1
1 106
&lt;/pre&gt;

Happy Life ahead!!!

[[File:end1.png]]</text>
      <sha1>m882v3t7g4dxvlkvzr5bik4x16urng3</sha1>
    </revision>
    <revision>
      <id>4510</id>
      <parentid>4509</parentid>
      <timestamp>2018-10-18T06:22:41Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* program code */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="56780">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_12 Contributors of this page]

=Page Rank - How does Google Work=
One web page is having link to other page, that is a page is referring to other page. Google uses ''Page Rank'' algorithm to choose which page should be displayed first.

If we have network, connections as below:
[[File:rank0.png]]

We want to pick a leader out of all these nodes. How to pick a leader?  Why to elect a leader? It is because we want to find the super power of available nodes.                     
[[File:rank1.png]]

For example, the application wherein, we want to find the most impressive person of the  few ones. How to decide it? As shown in below figure, each node will communicate with other, randomly, we implement the count for each node, how many times, the particular node is being visited.
[[File:rank2.png]]

[[#Top]]

As shown in following, figure, all nodes are visited and each node is marked with the 
number i.e.number of times the node is visited.
[[File:rank3.png]]

The node with the maximum count, becomes the winner. Here, node with 120 count in figure 
below, is the winner. i.e. The person with 120 count in the figure is the most impressive 
person in the community being considered.
[[File:rank4.png]]

[[File:rank5.png]]

[[File:rank6.png]]

[[File:rank7.png]]


[[File:rank8.png]]

[[#Top]]

Google selects the page rank in this matter. Each web page is connected to other web page with web links. To a page, maximum link is there, that will be put on top results in Google search results.
[[File:rank9.png]]

Google uses web crawler. The crawler takes the random walk on the www network and rank the web sites.
[[File:rank10.png]]

This way Google ranks the pages and displays search results, according to page rank.
[[File:rank11.png]]

e.g.we search for ''mysore city''. Google has 10,000 results. But it displays the results in the sequence of page rank of search results, As shown in figure below.
[[File:mysore.png]]

[[#Top]]

==Page rank algorithm ==
As shown in beautiful figure below, few nodes combinely selected one as the leader, then that leader and other nodes, have selected         other as a leader. This way, finally the final leader is elected.
[[File:rank12.png|600px]]


[[File:graph00.png|600px]]


[[File:graph01.png|600px]]

[[#Top]]

==Gragh Drawing Program1==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
nx.barbell_graph(4,2)
G=nx.barbell_graph(4,2)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:Graph003.png|600px]]

[[#Top]]

==Gragh Drawing Program2==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
nx.barbell_graph(4,3)
G=nx.barbell_graph(4,3)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:Graph004.png|600px]]

[[#Top]]

==Gragh Drawing Program3==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
nx.barbell_graph(5,3)
G=nx.barbell_graph(5,3)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:Graph005.png|600px]]

[[#Top]]

==Complete Graph==
Complete graph is a graph, wherein, each node is connected to each other nodes in a graph.

&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.complete_graph(4)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:

[[File:completegraph001.png|600px]]

[[#Top]]

==Cycle graph==

&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.cycle_graph(5)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:

[[File:cyclegraph1.png|600px]]

[[#Top]]

==Ladder graph==

&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.ladder_graph(5)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:

[[File:laddergraph.png|600px]]

[[#Top]]

==Path Graph==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.path_graph(6)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:

[[File:pathgraph.png|600px]]

[[#Top]]

==Star Graph==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.star_graph(5)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:stargraph.png|600px]]

[[#Top]]

==Star Graph of 4 Nodes==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.star_graph(4)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:stargraph4points.png|600px]]

==Wheel Graph==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.wheel_graph(4)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:wheelgraph.png|600px]]

[[#Top]]

==Wheel Graph of 5 nodes==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.wheel_graph(5)
nx.draw(G)
plt.show()

&lt;/pre&gt;

Output:

[[File:wheelgraph5nodes.png|600px]]

[[#Top]]

==Wheel Graph of 6 nodes==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.wheel_graph(6)
nx.draw(G)
plt.show()

&lt;/pre&gt;

Output:

[[File:wheelgraph6nodes.png|600px]]

[[#Top]]

==Random Graph==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.gnp_random_graph(5,0.5)
nx.draw(G)
plt.show()

&lt;/pre&gt;

Output:

[[File:randomgraph1.png|600px]]


Running the same above program, we will get different output, as shown below, as it is random graph.

[[File:randomgraph2.png|600px]]

[[#Top]]

==Page Rank Algorithm Implementation==

===Random Directed Graph===
&lt;pre&gt;
import networkx as nx
import random
import matplotlib.pyplot as plt

#Draw random directed graph
G=nx.gnp_random_graph(10,0.5,directed=True)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output: 

[[File:randomDirectedGraph.png|600px]]


===Random Directed Graph with Labels===
&lt;pre&gt;
import networkx as nx
import random
import matplotlib.pyplot as plt

#Draw random directed graph 
G=nx.gnp_random_graph(10,0.5,directed=True)
#Give label numbering to nodes
nx.draw(G,with_labels=True)
plt.show()

&lt;/pre&gt;

Output:

[[File:randomDirectedGraphwithLabels.png|600px]]


[[#Top]]

===Page Rank Coding===
&lt;pre&gt;
import networkx as nx
import random
import matplotlib.pyplot as plt
import operator

#Draw random directed graph 
G=nx.gnp_random_graph(10,0.5,directed=True)
#Give label numbering to nodes
nx.draw(G,with_labels=True)
plt.show()

#x is the random source node
x=random.choice([i for i in range(G.number_of_nodes())])

#dictionary to maintain counter
dictCounter={}
#initialize the counter of each node as 0
for i in range(G.number_of_nodes()):
    dictCounter[i]=0
dictCounter[x]=dictCounter[x]+1

for i in range(10000):
    listn=list(G.neighbors(x))
    #if x is a sink node, we need to select random node for random walk
    #, else select random neighbor node

    if(len(listn)==0):
        x=random.choice([i for i in range(G.number_of_nodes())])
        dictCounter[x]=dictCounter[x]+1
    else:
        #choose a node randomly from neightbors
        x=random.choice(listn)
        dictCounter[x]=dictCounter[x]+1

p=nx.pagerank(G)
sorted_p=sorted(p.items(),key=operator.itemgetter(1))
sorted_rw=sorted(dictCounter.items(),key=operator.itemgetter(1))                        
#print(p)
#print(dictCounter)

print(sorted_p)
print(sorted_rw)

&lt;/pre&gt;

Output:

&lt;pre&gt;
[(2, 0.07139920240302768), (5, 0.07464882519777695), (3, 0.08527469366832419), 
(6, 0.08665188647066119), (4, 0.0987815549542114), (0, 0.10858415997562518), 
(9, 0.110369696943925), (8, 0.11456211367660116), (1, 0.11682018308814024), 
(7, 0.13290768362170685)]
[(2, 4), (5, 7), (8, 7), (6, 8), (3, 11), (7, 11), (1, 12), (4, 12), (0, 13), (9, 16)]
&lt;/pre&gt;

[[#Top]]

=Email communication Network=
==Page rank :page distribution method==
===Revision: Graph===
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
G=nx.cycle_graph(4)
labels={0:&quot;Bangluru&quot;,1:&quot;Gawhati&quot;,2:&quot;Kolkata&quot;,3:&quot;Chennai&quot;}
nx.draw(G,with_labels=True,labels=labels)
plt.show()
&lt;/pre&gt;

Output:

[[File:revGRAPH.png]]


===Directed Graph  Example===

[[File:directedGraphExample.png|600px]]

&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
G=nx.gnp_random_graph(4,.5,directed=True)
labels={0:&quot;Bangluru&quot;,1:&quot;Gawhati&quot;,2:&quot;Kolkata&quot;,3:&quot;Chennai&quot;}
nx.draw(G,with_labels=True,labels=labels)
plt.show()

&lt;/pre&gt;

Output:
[[File:directedg.png|600px]]


[[#Top]]


==Bidirectional with Parallel and self loops==
==Bidirectional with Parallel edges==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
G=nx.MultiDiGraph()

G.add_node(1)
G.add_node(2)
G.add_node(3)
G.add_node(4)

G.add_path([1,2,3,4,1])
G.add_edge(1,4)
nx.draw(G,with_labels=True)
plt.show()
&lt;/pre&gt;

Output: 

[[File:bidirectionalg.png]]

==Bidirectional with Self loops==
It doesn't show as graph. It is not taught, I did it myself.(Ms. Ami TUSHARKANT CHOKSI)
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
G=nx.MultiDiGraph()

G.add_node(1)
G.add_node(2)
G.add_node(3)
G.add_node(4)

G.add_path([1,2,3,4,1])
G.add_edge(1,4)
G.add_edge(1,1)
nx.draw(G,with_labels=True)
d=G.selfloop_edges()
print(d)
plt.show()

&lt;/pre&gt;

#Output: &lt;generator object selfloop_edges.&lt;locals&gt;.&lt;genexpr&gt; at 0x0B790150&gt;
#It shows self loop is there in the graph


==Directed Undirected Graph==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

#undirected graph
U=nx.Graph()

#directed graph
G=nx.DiGraph()

#nodes in graph
print(G.nodes())#Output: []
G.add_nodes_from([i for i in range(5)])
print(G.nodes())#Output: [0, 1, 2, 3, 4]

#edges
print(G.out_edges())#Output:[]

print(G.in_edges())#Output:[]

G.add_edge(1,2)
print(G.edges())#Output: [(1, 2)]
print(G.in_edges())#Output: [(1, 2)]
print(G.out_edges())#Output: [(1, 2)]

G.add_edge(0,3)
G.add_edge(2,3)
G.add_edge(3,2)
G.add_edge(3,4)
G.add_edge(4,1)
print(G.out_edges(2))#Output: [(2, 3)]
print(G.out_edges(3))#Output:[(3, 2), (3, 4)]
print(G.in_edges(3))#Output:[(0, 3), (2, 3)]

&lt;/pre&gt;

[[#Top]]

==Points Distribution Method==
&lt;ul&gt;
&lt;li&gt;Initially, all nodes are given equal points&lt;/li&gt;
&lt;li&gt;Rule&lt;/li&gt;
&lt;ul&gt;
&lt;li&gt;Share whatever you have equally with your neighbors&lt;/li&gt;
&lt;/ul&gt;
&lt;li&gt;FOR NODE B:Neighbors: C&lt;/li&gt;
&lt;li&gt;Give all of its points to C&lt;/li&gt;
&lt;li&gt;FOR NODE C:Neighbors: A&lt;/li&gt;
&lt;li&gt;Give all of its points to A&lt;/li&gt;
&lt;li&gt;new point of A=old points of C&lt;/li&gt;
&lt;li&gt;new point of B=(1/2)*old points of A&lt;/li&gt;
&lt;li&gt;new point of C=(1/2)*old points of A+old points of B&lt;/li&gt;
&lt;/ul&gt;

===In Excel, Implementation===
[[File:grEx1.png|600px]]

[[File:grEx2.png|600px]]

[[File:grEx3.png|600px]]

[[#Top]]

After some nodes, points becomes constant, as shown below.

&lt;table class=&quot;tg&quot;&gt;
  &lt;tr&gt;
    &lt;th class=&quot;tg-xldj&quot;&gt;100&lt;/th&gt;
    &lt;th class=&quot;tg-xldj&quot;&gt;100&lt;/th&gt;
    &lt;th class=&quot;tg-xldj&quot;&gt;100&lt;/th&gt;
    &lt;th class=&quot;tg-xldj&quot;&gt; &lt;/th&gt;
    &lt;th class=&quot;tg-xldj&quot;&gt;300&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;100&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;50&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;150&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;150&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;50&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;100&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;100&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;75&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;125&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;125&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;50&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;125&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;125&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;62.5&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;112.5&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;112.5&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;62.5&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;125&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;125&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;56.25&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;118.75&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;118.75&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;62.5&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;118.75&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;118.75&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;59.375&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;121.875&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;121.875&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;59.375&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;118.75&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;118.75&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;60.9375&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;120.3125&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;120.3125&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;59.375&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;120.3125&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;120.3125&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;60.15625&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;119.5313&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;119.5313&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;60.15625&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;120.3125&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.3125&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;59.76563&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9219&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9219&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60.15625&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9219&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9219&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;59.96094&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.1172&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.1172&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;59.96094&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9219&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9219&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60.05859&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0195&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0195&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;59.96094&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0195&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0195&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60.00977&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9707&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9707&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60.00977&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0195&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0195&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;59.98535&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9951&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9951&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60.00977&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9951&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9951&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;59.99756&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0073&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0073&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;59.99756&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9951&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9951&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60.00366&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0012&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0012&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;59.99756&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0012&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0012&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60.00061&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9982&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9982&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60.00061&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0012&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0012&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;59.99908&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9997&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9997&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60.00061&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9997&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9997&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;59.99985&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0005&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0005&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;59.99985&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9997&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9997&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60.00023&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0001&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0001&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;59.99985&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0001&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0001&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60.00004&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9999&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9999&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60.00004&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0001&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0001&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;59.99994&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60.00004&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;59.99999&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;59.99999&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60.00001&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;59.99999&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;

[[#Top]]

===Directed Graph===
&lt;pre&gt;
import networkx as nx
import random
import matplotlib.pyplot as plt

def add_edges():
    nodes=list(G.nodes())
    for s in nodes:
        for t in nodes:
            if s!=t:
                r=random.random()
                if r&lt;=0.5:
                    G.add_edge(s,t)
    return G

#create a directed graph
G=nx.DiGraph()
G.add_nodes_from([i for i in range(10)])
add_edges()
nx.draw(G,with_labels=True)
plt.show()
&lt;/pre&gt;

OUTPUT:

[[File:v12p1.png|600px]]

[[File:v12p2.png|600px]]

[[File:v12p3.png|600px]]

===Point Calculating Program===
&lt;pre&gt;
import networkx as nx
import random
import matplotlib.pyplot as plt

def add_edges():
    nodes=list(G.nodes())
    for s in nodes:
        for t in nodes:
            if s!=t:
                r=random.random()
                if r&lt;=0.5:
                    G.add_edge(s,t)
    return G


def assign_points(G):
    nodes=list(G.nodes())
    p=[]
    for each in nodes:
        p.append(100)
    return p

def distribute_points(G,points):
    nodes=list(G.nodes())
    new_points=[]
    for i in range(len(nodes)):
        new_points.append(0)

    for n in nodes:
        out=list(G.out_edges(n))
        if len(out)==0:
            new_points[n]=new_points[n]+points[n]
        else:
            share=points[n]/len(out)
            for (src,tgt) in out:
                new_points[tgt]=new_points[tgt]+share
    return  new_points                

def keep_distributing(points,G):
    while(1):
        new_points=distribute_points(G,points)
        print(new_points)
        points=new_points
        stop=input(&quot;Press # to stop or any other key to continue&quot;)
        if stop=='#':
            break
    return new_points

#create a directed graph
G=nx.DiGraph()
G.add_nodes_from([i for i in range(10)])
add_edges()
nx.draw(G,with_labels=True)
plt.show()

#assign initial points
points=assign_points(G)

#keep distributing
final_points=keep_distributing(points,G)

&lt;/pre&gt;

Output:

[[File:v12p4.png]]

[[File:v12p5.png]]

==Complete page rank using point calculation ==
&lt;pre&gt;
import networkx as nx
import random
import matplotlib.pyplot as plt

def add_edges():
    nodes=list(G.nodes())
    for s in nodes:
        for t in nodes:
            if s!=t:
                r=random.random()
                if r&lt;=0.5:
                    G.add_edge(s,t)
    return G


def assign_points(G):
    nodes=list(G.nodes())
    p=[]
    for each in nodes:
        p.append(100)
    return p

def distribute_points(G,points):
    nodes=list(G.nodes())
    new_points=[]
    for i in range(len(nodes)):
        new_points.append(0)

    for n in nodes:
        out=list(G.out_edges(n))
        if len(out)==0:
            new_points[n]=new_points[n]+points[n]
        else:
            share=points[n]/len(out)
            for (src,tgt) in out:
                new_points[tgt]=new_points[tgt]+share
    return  new_points                

def keep_distributing(points,G):
    while(1):
        new_points=distribute_points(G,points)
        print(new_points)
        points=new_points
        stop=input(&quot;Press # to stop or any other key to continue&quot;)
        if stop=='#':
            break
    return new_points


def rank_by_points(points):
    d={}
    for i in range(len(points)):
        d[i]=points[i]
    print(sorted(d.items(),key=lambda f:f[1]))
    

#create a directed graph
G=nx.DiGraph()
G.add_nodes_from([i for i in range(10)])
add_edges()
nx.draw(G,with_labels=True)
plt.show()

#assign initial points
points=assign_points(G)

#keep distributing
final_points=keep_distributing(points,G)
rank_by_points(final_points)

#default networkx function
result = nx.pagerank(G)
print(sorted(result.items(),key=lambda f:f[1]))

&lt;/pre&gt;

Output:

[[File:finalrank.png]]

[[File:finalout.png]]


==Last Program==
Data File: page_rank.txt provided by Simran mam
===page_rank.txt file===
&lt;pre&gt;
1 2

1 3

1 4

1 5

1 6

7 8

7 9

7 6

7 5

7 4

7 1

7 10

11 12

11 13

11 6

11 14

15 10

15 16

15 18

15 6

15 17

15 13

13 6

13 4

13 14

13 18

20 21

20 22

20 23

20 24

21 17

21 10

21 18

21 25

6 13

6 7

6 12

6 18

2 3

2 12

2 1

2 20

2 13

5 12

5 9

5 6

5 7

5 11

4 13

4 19

4 22

4 7

9 12

9 5

9 6

9 13

9 16

16 24

16 15

16 9

16 4

16 22

12 6

12 2

12 23

18 17

18 15

18 3

18 19

18 6

24 13

24 18

24 16

24 25

24 20

23 20

23 14

23 12

23 10

23 5

10 15

10 24

10 12

10 7

10 21

25 24

25 3

25 11

25 13

25 22

22 3

22 21

22 16

22 8

22 15

14 7

14 18

14 16

4 21

14 4

3 1

3 10

3 8

3 18

3 22

17 18

17 10

17 21

17 15

17 3
&lt;/pre&gt;
===program code===
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
G=nx.read_edgelist(r&quot;page_rank.txt&quot;,create_using=nx.DiGraph(),nodetype=int)
nx.draw(G,with_labels=True)
plt.show()

#calling point calculation algorithm
#Out program where, functions are defined
from v12p import *

#assign initial points
points=assign_points(G)

#keep distributing
final_points=keep_distributing(points,G)
rank_by_points(final_points)

#default networkx function
result = nx.pagerank(G)
print(sorted(result.items(),key=lambda f:f[1]))
&lt;/pre&gt;

[[File:lastOutput.png]]

Output: 

[[File:lastoutput1.png]]

=Collatz Conjecture=
Taught by Sudarshan sir and Amit sir, and Edited by Ms. Ami Tusharkant Choksi

If a number is even, divide it by ''2'', if it is odd, make multiply it by ''3'' and add ''1'', till you get ''1''. This simple problem is called, ''Collatz Conjecture''. 

[[File:collatz1.png|600px]]

[[File:collatz2.png|600px]]

[[File:collatz3.png|600px]]

[[File:collatz4.png|600px]]

[[File:collatz5.png|600px]]

Number is bigger doesn't mean more iterations are required. One can notice, from the output of the following program. 



The program to implement the same is as follows:
==Program==
&lt;pre&gt;
#collatz conjecture
#if num is even, divide it by 2
#if num is odd, new number is equal to 3n+1


def checkNum(num):
    iterations=1
    while(num!=1):
        if(num%2==0):
            num=int(num/2)            
        else:
            num = 3*num+1
        iterations+=1
        

    print(num,iterations)


#checkNum(12)#Output: 1 10
#checkNum(26)#Output: 1 11
checkNum(2000)#Output: 1 113
&lt;/pre&gt;

&lt;pre&gt;

#recursive approach

def checkNum(num):
    if num==1:
        return 1
    elif num%2==0:
        return checkNum(num/2)+1
    else:
        return checkNum(3*num +1)+1


output:
checkNum(26)
Out[27]: 11
checkNum(5000)
Out[28]: 29
&lt;/pre&gt;

==Program adding statement to print all iterations==
&lt;pre&gt;
def checkNum(num):
    iterations=1
    while(num!=1):
        if(num%2==0):
            num=int(num/2)            
        else:
            num = 3*num+1
        print(iterations,&quot;:&quot;,num)
        iterations+=1
        

    print(num,iterations)
&lt;/pre&gt;
==Output==
===For checkNum(2000)===
&lt;pre&gt;
1 : 1000
2 : 500
3 : 250
4 : 125
5 : 376
6 : 188
7 : 94
8 : 47
9 : 142
10 : 71
11 : 214
12 : 107
13 : 322
14 : 161
15 : 484
16 : 242
17 : 121
18 : 364
19 : 182
20 : 91
21 : 274
22 : 137
23 : 412
24 : 206
25 : 103
26 : 310
27 : 155
28 : 466
29 : 233
30 : 700
31 : 350
32 : 175
33 : 526
34 : 263
35 : 790
36 : 395
37 : 1186
38 : 593
39 : 1780
40 : 890
41 : 445
42 : 1336
43 : 668
44 : 334
45 : 167
46 : 502
47 : 251
48 : 754
49 : 377
50 : 1132
51 : 566
52 : 283
53 : 850
54 : 425
55 : 1276
56 : 638
57 : 319
58 : 958
59 : 479
60 : 1438
61 : 719
62 : 2158
63 : 1079
64 : 3238
65 : 1619
66 : 4858
67 : 2429
68 : 7288
69 : 3644
70 : 1822
71 : 911
72 : 2734
73 : 1367
74 : 4102
75 : 2051
76 : 6154
77 : 3077
78 : 9232
79 : 4616
80 : 2308
81 : 1154
82 : 577
83 : 1732
84 : 866
85 : 433
86 : 1300
87 : 650
88 : 325
89 : 976
90 : 488
91 : 244
92 : 122
93 : 61
94 : 184
95 : 92
96 : 46
97 : 23
98 : 70
99 : 35
100 : 106
101 : 53
102 : 160
103 : 80
104 : 40
105 : 20
106 : 10
107 : 5
108 : 16
109 : 8
110 : 4
111 : 2
112 : 1
1 113
&lt;/pre&gt;

===For checkNum(5000)===
&lt;pre&gt;
1 : 2500
2 : 1250
3 : 625
4 : 1876
5 : 938
6 : 469
7 : 1408
8 : 704
9 : 352
10 : 176
11 : 88
12 : 44
13 : 22
14 : 11
15 : 34
16 : 17
17 : 52
18 : 26
19 : 13
20 : 40
21 : 20
22 : 10
23 : 5
24 : 16
25 : 8
26 : 4
27 : 2
28 : 1
1 29
&lt;/pre&gt;
===For checkNum(25000000)===
&lt;pre&gt;
1 : 12500000
2 : 6250000
3 : 3125000
4 : 1562500
5 : 781250
6 : 390625
7 : 1171876
8 : 585938
9 : 292969
10 : 878908
11 : 439454
12 : 219727
13 : 659182
14 : 329591
15 : 988774
16 : 494387
17 : 1483162
18 : 741581
19 : 2224744
20 : 1112372
21 : 556186
22 : 278093
23 : 834280
24 : 417140
25 : 208570
26 : 104285
27 : 312856
28 : 156428
29 : 78214
30 : 39107
31 : 117322
32 : 58661
33 : 175984
34 : 87992
35 : 43996
36 : 21998
37 : 10999
38 : 32998
39 : 16499
40 : 49498
41 : 24749
42 : 74248
43 : 37124
44 : 18562
45 : 9281
46 : 27844
47 : 13922
48 : 6961
49 : 20884
50 : 10442
51 : 5221
52 : 15664
53 : 7832
54 : 3916
55 : 1958
56 : 979
57 : 2938
58 : 1469
59 : 4408
60 : 2204
61 : 1102
62 : 551
63 : 1654
64 : 827
65 : 2482
66 : 1241
67 : 3724
68 : 1862
69 : 931
70 : 2794
71 : 1397
72 : 4192
73 : 2096
74 : 1048
75 : 524
76 : 262
77 : 131
78 : 394
79 : 197
80 : 592
81 : 296
82 : 148
83 : 74
84 : 37
85 : 112
86 : 56
87 : 28
88 : 14
89 : 7
90 : 22
91 : 11
92 : 34
93 : 17
94 : 52
95 : 26
96 : 13
97 : 40
98 : 20
99 : 10
100 : 5
101 : 16
102 : 8
103 : 4
104 : 2
105 : 1
1 106
&lt;/pre&gt;

Happy Life ahead!!!

[[File:end1.png]]</text>
      <sha1>da4c50o7ho3u070q2mme14n14m0joxm</sha1>
    </revision>
    <revision>
      <id>4511</id>
      <parentid>4510</parentid>
      <timestamp>2018-10-18T06:30:14Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* program code */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="56767">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_12 Contributors of this page]

=Page Rank - How does Google Work=
One web page is having link to other page, that is a page is referring to other page. Google uses ''Page Rank'' algorithm to choose which page should be displayed first.

If we have network, connections as below:
[[File:rank0.png]]

We want to pick a leader out of all these nodes. How to pick a leader?  Why to elect a leader? It is because we want to find the super power of available nodes.                     
[[File:rank1.png]]

For example, the application wherein, we want to find the most impressive person of the  few ones. How to decide it? As shown in below figure, each node will communicate with other, randomly, we implement the count for each node, how many times, the particular node is being visited.
[[File:rank2.png]]

[[#Top]]

As shown in following, figure, all nodes are visited and each node is marked with the 
number i.e.number of times the node is visited.
[[File:rank3.png]]

The node with the maximum count, becomes the winner. Here, node with 120 count in figure 
below, is the winner. i.e. The person with 120 count in the figure is the most impressive 
person in the community being considered.
[[File:rank4.png]]

[[File:rank5.png]]

[[File:rank6.png]]

[[File:rank7.png]]


[[File:rank8.png]]

[[#Top]]

Google selects the page rank in this matter. Each web page is connected to other web page with web links. To a page, maximum link is there, that will be put on top results in Google search results.
[[File:rank9.png]]

Google uses web crawler. The crawler takes the random walk on the www network and rank the web sites.
[[File:rank10.png]]

This way Google ranks the pages and displays search results, according to page rank.
[[File:rank11.png]]

e.g.we search for ''mysore city''. Google has 10,000 results. But it displays the results in the sequence of page rank of search results, As shown in figure below.
[[File:mysore.png]]

[[#Top]]

==Page rank algorithm ==
As shown in beautiful figure below, few nodes combinely selected one as the leader, then that leader and other nodes, have selected         other as a leader. This way, finally the final leader is elected.
[[File:rank12.png|600px]]


[[File:graph00.png|600px]]


[[File:graph01.png|600px]]

[[#Top]]

==Gragh Drawing Program1==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
nx.barbell_graph(4,2)
G=nx.barbell_graph(4,2)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:Graph003.png|600px]]

[[#Top]]

==Gragh Drawing Program2==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
nx.barbell_graph(4,3)
G=nx.barbell_graph(4,3)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:Graph004.png|600px]]

[[#Top]]

==Gragh Drawing Program3==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
nx.barbell_graph(5,3)
G=nx.barbell_graph(5,3)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:Graph005.png|600px]]

[[#Top]]

==Complete Graph==
Complete graph is a graph, wherein, each node is connected to each other nodes in a graph.

&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.complete_graph(4)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:

[[File:completegraph001.png|600px]]

[[#Top]]

==Cycle graph==

&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.cycle_graph(5)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:

[[File:cyclegraph1.png|600px]]

[[#Top]]

==Ladder graph==

&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.ladder_graph(5)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:

[[File:laddergraph.png|600px]]

[[#Top]]

==Path Graph==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.path_graph(6)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:

[[File:pathgraph.png|600px]]

[[#Top]]

==Star Graph==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.star_graph(5)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:stargraph.png|600px]]

[[#Top]]

==Star Graph of 4 Nodes==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.star_graph(4)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:stargraph4points.png|600px]]

==Wheel Graph==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.wheel_graph(4)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:wheelgraph.png|600px]]

[[#Top]]

==Wheel Graph of 5 nodes==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.wheel_graph(5)
nx.draw(G)
plt.show()

&lt;/pre&gt;

Output:

[[File:wheelgraph5nodes.png|600px]]

[[#Top]]

==Wheel Graph of 6 nodes==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.wheel_graph(6)
nx.draw(G)
plt.show()

&lt;/pre&gt;

Output:

[[File:wheelgraph6nodes.png|600px]]

[[#Top]]

==Random Graph==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.gnp_random_graph(5,0.5)
nx.draw(G)
plt.show()

&lt;/pre&gt;

Output:

[[File:randomgraph1.png|600px]]


Running the same above program, we will get different output, as shown below, as it is random graph.

[[File:randomgraph2.png|600px]]

[[#Top]]

==Page Rank Algorithm Implementation==

===Random Directed Graph===
&lt;pre&gt;
import networkx as nx
import random
import matplotlib.pyplot as plt

#Draw random directed graph
G=nx.gnp_random_graph(10,0.5,directed=True)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output: 

[[File:randomDirectedGraph.png|600px]]


===Random Directed Graph with Labels===
&lt;pre&gt;
import networkx as nx
import random
import matplotlib.pyplot as plt

#Draw random directed graph 
G=nx.gnp_random_graph(10,0.5,directed=True)
#Give label numbering to nodes
nx.draw(G,with_labels=True)
plt.show()

&lt;/pre&gt;

Output:

[[File:randomDirectedGraphwithLabels.png|600px]]


[[#Top]]

===Page Rank Coding===
&lt;pre&gt;
import networkx as nx
import random
import matplotlib.pyplot as plt
import operator

#Draw random directed graph 
G=nx.gnp_random_graph(10,0.5,directed=True)
#Give label numbering to nodes
nx.draw(G,with_labels=True)
plt.show()

#x is the random source node
x=random.choice([i for i in range(G.number_of_nodes())])

#dictionary to maintain counter
dictCounter={}
#initialize the counter of each node as 0
for i in range(G.number_of_nodes()):
    dictCounter[i]=0
dictCounter[x]=dictCounter[x]+1

for i in range(10000):
    listn=list(G.neighbors(x))
    #if x is a sink node, we need to select random node for random walk
    #, else select random neighbor node

    if(len(listn)==0):
        x=random.choice([i for i in range(G.number_of_nodes())])
        dictCounter[x]=dictCounter[x]+1
    else:
        #choose a node randomly from neightbors
        x=random.choice(listn)
        dictCounter[x]=dictCounter[x]+1

p=nx.pagerank(G)
sorted_p=sorted(p.items(),key=operator.itemgetter(1))
sorted_rw=sorted(dictCounter.items(),key=operator.itemgetter(1))                        
#print(p)
#print(dictCounter)

print(sorted_p)
print(sorted_rw)

&lt;/pre&gt;

Output:

&lt;pre&gt;
[(2, 0.07139920240302768), (5, 0.07464882519777695), (3, 0.08527469366832419), 
(6, 0.08665188647066119), (4, 0.0987815549542114), (0, 0.10858415997562518), 
(9, 0.110369696943925), (8, 0.11456211367660116), (1, 0.11682018308814024), 
(7, 0.13290768362170685)]
[(2, 4), (5, 7), (8, 7), (6, 8), (3, 11), (7, 11), (1, 12), (4, 12), (0, 13), (9, 16)]
&lt;/pre&gt;

[[#Top]]

=Email communication Network=
==Page rank :page distribution method==
===Revision: Graph===
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
G=nx.cycle_graph(4)
labels={0:&quot;Bangluru&quot;,1:&quot;Gawhati&quot;,2:&quot;Kolkata&quot;,3:&quot;Chennai&quot;}
nx.draw(G,with_labels=True,labels=labels)
plt.show()
&lt;/pre&gt;

Output:

[[File:revGRAPH.png]]


===Directed Graph  Example===

[[File:directedGraphExample.png|600px]]

&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
G=nx.gnp_random_graph(4,.5,directed=True)
labels={0:&quot;Bangluru&quot;,1:&quot;Gawhati&quot;,2:&quot;Kolkata&quot;,3:&quot;Chennai&quot;}
nx.draw(G,with_labels=True,labels=labels)
plt.show()

&lt;/pre&gt;

Output:
[[File:directedg.png|600px]]


[[#Top]]


==Bidirectional with Parallel and self loops==
==Bidirectional with Parallel edges==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
G=nx.MultiDiGraph()

G.add_node(1)
G.add_node(2)
G.add_node(3)
G.add_node(4)

G.add_path([1,2,3,4,1])
G.add_edge(1,4)
nx.draw(G,with_labels=True)
plt.show()
&lt;/pre&gt;

Output: 

[[File:bidirectionalg.png]]

==Bidirectional with Self loops==
It doesn't show as graph. It is not taught, I did it myself.(Ms. Ami TUSHARKANT CHOKSI)
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
G=nx.MultiDiGraph()

G.add_node(1)
G.add_node(2)
G.add_node(3)
G.add_node(4)

G.add_path([1,2,3,4,1])
G.add_edge(1,4)
G.add_edge(1,1)
nx.draw(G,with_labels=True)
d=G.selfloop_edges()
print(d)
plt.show()

&lt;/pre&gt;

#Output: &lt;generator object selfloop_edges.&lt;locals&gt;.&lt;genexpr&gt; at 0x0B790150&gt;
#It shows self loop is there in the graph


==Directed Undirected Graph==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

#undirected graph
U=nx.Graph()

#directed graph
G=nx.DiGraph()

#nodes in graph
print(G.nodes())#Output: []
G.add_nodes_from([i for i in range(5)])
print(G.nodes())#Output: [0, 1, 2, 3, 4]

#edges
print(G.out_edges())#Output:[]

print(G.in_edges())#Output:[]

G.add_edge(1,2)
print(G.edges())#Output: [(1, 2)]
print(G.in_edges())#Output: [(1, 2)]
print(G.out_edges())#Output: [(1, 2)]

G.add_edge(0,3)
G.add_edge(2,3)
G.add_edge(3,2)
G.add_edge(3,4)
G.add_edge(4,1)
print(G.out_edges(2))#Output: [(2, 3)]
print(G.out_edges(3))#Output:[(3, 2), (3, 4)]
print(G.in_edges(3))#Output:[(0, 3), (2, 3)]

&lt;/pre&gt;

[[#Top]]

==Points Distribution Method==
&lt;ul&gt;
&lt;li&gt;Initially, all nodes are given equal points&lt;/li&gt;
&lt;li&gt;Rule&lt;/li&gt;
&lt;ul&gt;
&lt;li&gt;Share whatever you have equally with your neighbors&lt;/li&gt;
&lt;/ul&gt;
&lt;li&gt;FOR NODE B:Neighbors: C&lt;/li&gt;
&lt;li&gt;Give all of its points to C&lt;/li&gt;
&lt;li&gt;FOR NODE C:Neighbors: A&lt;/li&gt;
&lt;li&gt;Give all of its points to A&lt;/li&gt;
&lt;li&gt;new point of A=old points of C&lt;/li&gt;
&lt;li&gt;new point of B=(1/2)*old points of A&lt;/li&gt;
&lt;li&gt;new point of C=(1/2)*old points of A+old points of B&lt;/li&gt;
&lt;/ul&gt;

===In Excel, Implementation===
[[File:grEx1.png|600px]]

[[File:grEx2.png|600px]]

[[File:grEx3.png|600px]]

[[#Top]]

After some nodes, points becomes constant, as shown below.

&lt;table class=&quot;tg&quot;&gt;
  &lt;tr&gt;
    &lt;th class=&quot;tg-xldj&quot;&gt;100&lt;/th&gt;
    &lt;th class=&quot;tg-xldj&quot;&gt;100&lt;/th&gt;
    &lt;th class=&quot;tg-xldj&quot;&gt;100&lt;/th&gt;
    &lt;th class=&quot;tg-xldj&quot;&gt; &lt;/th&gt;
    &lt;th class=&quot;tg-xldj&quot;&gt;300&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;100&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;50&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;150&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;150&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;50&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;100&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;100&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;75&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;125&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;125&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;50&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;125&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;125&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;62.5&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;112.5&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;112.5&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;62.5&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;125&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;125&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;56.25&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;118.75&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;118.75&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;62.5&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;118.75&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;118.75&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;59.375&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;121.875&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;121.875&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;59.375&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;118.75&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;118.75&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;60.9375&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;120.3125&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;120.3125&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;59.375&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;120.3125&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;120.3125&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;60.15625&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;119.5313&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;119.5313&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;60.15625&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;120.3125&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.3125&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;59.76563&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9219&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9219&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60.15625&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9219&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9219&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;59.96094&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.1172&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.1172&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;59.96094&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9219&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9219&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60.05859&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0195&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0195&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;59.96094&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0195&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0195&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60.00977&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9707&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9707&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60.00977&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0195&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0195&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;59.98535&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9951&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9951&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60.00977&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9951&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9951&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;59.99756&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0073&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0073&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;59.99756&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9951&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9951&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60.00366&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0012&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0012&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;59.99756&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0012&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0012&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60.00061&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9982&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9982&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60.00061&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0012&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0012&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;59.99908&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9997&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9997&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60.00061&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9997&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9997&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;59.99985&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0005&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0005&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;59.99985&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9997&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9997&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60.00023&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0001&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0001&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;59.99985&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0001&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0001&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60.00004&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9999&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9999&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60.00004&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0001&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0001&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;59.99994&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60.00004&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;59.99999&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;59.99999&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60.00001&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;59.99999&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;

[[#Top]]

===Directed Graph===
&lt;pre&gt;
import networkx as nx
import random
import matplotlib.pyplot as plt

def add_edges():
    nodes=list(G.nodes())
    for s in nodes:
        for t in nodes:
            if s!=t:
                r=random.random()
                if r&lt;=0.5:
                    G.add_edge(s,t)
    return G

#create a directed graph
G=nx.DiGraph()
G.add_nodes_from([i for i in range(10)])
add_edges()
nx.draw(G,with_labels=True)
plt.show()
&lt;/pre&gt;

OUTPUT:

[[File:v12p1.png|600px]]

[[File:v12p2.png|600px]]

[[File:v12p3.png|600px]]

===Point Calculating Program===
&lt;pre&gt;
import networkx as nx
import random
import matplotlib.pyplot as plt

def add_edges():
    nodes=list(G.nodes())
    for s in nodes:
        for t in nodes:
            if s!=t:
                r=random.random()
                if r&lt;=0.5:
                    G.add_edge(s,t)
    return G


def assign_points(G):
    nodes=list(G.nodes())
    p=[]
    for each in nodes:
        p.append(100)
    return p

def distribute_points(G,points):
    nodes=list(G.nodes())
    new_points=[]
    for i in range(len(nodes)):
        new_points.append(0)

    for n in nodes:
        out=list(G.out_edges(n))
        if len(out)==0:
            new_points[n]=new_points[n]+points[n]
        else:
            share=points[n]/len(out)
            for (src,tgt) in out:
                new_points[tgt]=new_points[tgt]+share
    return  new_points                

def keep_distributing(points,G):
    while(1):
        new_points=distribute_points(G,points)
        print(new_points)
        points=new_points
        stop=input(&quot;Press # to stop or any other key to continue&quot;)
        if stop=='#':
            break
    return new_points

#create a directed graph
G=nx.DiGraph()
G.add_nodes_from([i for i in range(10)])
add_edges()
nx.draw(G,with_labels=True)
plt.show()

#assign initial points
points=assign_points(G)

#keep distributing
final_points=keep_distributing(points,G)

&lt;/pre&gt;

Output:

[[File:v12p4.png]]

[[File:v12p5.png]]

==Complete page rank using point calculation ==
&lt;pre&gt;
import networkx as nx
import random
import matplotlib.pyplot as plt

def add_edges():
    nodes=list(G.nodes())
    for s in nodes:
        for t in nodes:
            if s!=t:
                r=random.random()
                if r&lt;=0.5:
                    G.add_edge(s,t)
    return G


def assign_points(G):
    nodes=list(G.nodes())
    p=[]
    for each in nodes:
        p.append(100)
    return p

def distribute_points(G,points):
    nodes=list(G.nodes())
    new_points=[]
    for i in range(len(nodes)):
        new_points.append(0)

    for n in nodes:
        out=list(G.out_edges(n))
        if len(out)==0:
            new_points[n]=new_points[n]+points[n]
        else:
            share=points[n]/len(out)
            for (src,tgt) in out:
                new_points[tgt]=new_points[tgt]+share
    return  new_points                

def keep_distributing(points,G):
    while(1):
        new_points=distribute_points(G,points)
        print(new_points)
        points=new_points
        stop=input(&quot;Press # to stop or any other key to continue&quot;)
        if stop=='#':
            break
    return new_points


def rank_by_points(points):
    d={}
    for i in range(len(points)):
        d[i]=points[i]
    print(sorted(d.items(),key=lambda f:f[1]))
    

#create a directed graph
G=nx.DiGraph()
G.add_nodes_from([i for i in range(10)])
add_edges()
nx.draw(G,with_labels=True)
plt.show()

#assign initial points
points=assign_points(G)

#keep distributing
final_points=keep_distributing(points,G)
rank_by_points(final_points)

#default networkx function
result = nx.pagerank(G)
print(sorted(result.items(),key=lambda f:f[1]))

&lt;/pre&gt;

Output:

[[File:finalrank.png]]

[[File:finalout.png]]


==Last Program==
Data File: page_rank.txt provided by Simran mam
===page_rank.txt file===
&lt;pre&gt;
1 2

1 3

1 4

1 5

1 6

7 8

7 9

7 6

7 5

7 4

7 1

7 10

11 12

11 13

11 6

11 14

15 10

15 16

15 18

15 6

15 17

15 13

13 6

13 4

13 14

13 18

20 21

20 22

20 23

20 24

21 17

21 10

21 18

21 25

6 13

6 7

6 12

6 18

2 3

2 12

2 1

2 20

2 13

5 12

5 9

5 6

5 7

5 11

4 13

4 19

4 22

4 7

9 12

9 5

9 6

9 13

9 16

16 24

16 15

16 9

16 4

16 22

12 6

12 2

12 23

18 17

18 15

18 3

18 19

18 6

24 13

24 18

24 16

24 25

24 20

23 20

23 14

23 12

23 10

23 5

10 15

10 24

10 12

10 7

10 21

25 24

25 3

25 11

25 13

25 22

22 3

22 21

22 16

22 8

22 15

14 7

14 18

14 16

4 21

14 4

3 1

3 10

3 8

3 18

3 22

17 18

17 10

17 21

17 15

17 3
&lt;/pre&gt;
===program code===
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
G=nx.read_edgelist(r&quot;page_rank.txt&quot;,create_using=nx.DiGraph(),nodetype=int)
nx.draw(G,with_labels=True)
plt.show()

#calling point calculation algorithm
#Out program where, functions are defined
from v12p import *

add_edges(G)

#assign initial points
points=assign_points(G)

#keep distributing
final_points=keep_distributing(points,G)
rank_by_points(final_points)

#default networkx function
result = nx.pagerank(G)
print(sorted(result.items(),key=lambda f:f[1]))
&lt;/pre&gt;

[[File:lastOutput.png]]

Output:

=Collatz Conjecture=
Taught by Sudarshan sir and Amit sir, and Edited by Ms. Ami Tusharkant Choksi

If a number is even, divide it by ''2'', if it is odd, make multiply it by ''3'' and add ''1'', till you get ''1''. This simple problem is called, ''Collatz Conjecture''. 

[[File:collatz1.png|600px]]

[[File:collatz2.png|600px]]

[[File:collatz3.png|600px]]

[[File:collatz4.png|600px]]

[[File:collatz5.png|600px]]

Number is bigger doesn't mean more iterations are required. One can notice, from the output of the following program. 



The program to implement the same is as follows:
==Program==
&lt;pre&gt;
#collatz conjecture
#if num is even, divide it by 2
#if num is odd, new number is equal to 3n+1


def checkNum(num):
    iterations=1
    while(num!=1):
        if(num%2==0):
            num=int(num/2)            
        else:
            num = 3*num+1
        iterations+=1
        

    print(num,iterations)


#checkNum(12)#Output: 1 10
#checkNum(26)#Output: 1 11
checkNum(2000)#Output: 1 113
&lt;/pre&gt;

&lt;pre&gt;

#recursive approach

def checkNum(num):
    if num==1:
        return 1
    elif num%2==0:
        return checkNum(num/2)+1
    else:
        return checkNum(3*num +1)+1


output:
checkNum(26)
Out[27]: 11
checkNum(5000)
Out[28]: 29
&lt;/pre&gt;

==Program adding statement to print all iterations==
&lt;pre&gt;
def checkNum(num):
    iterations=1
    while(num!=1):
        if(num%2==0):
            num=int(num/2)            
        else:
            num = 3*num+1
        print(iterations,&quot;:&quot;,num)
        iterations+=1
        

    print(num,iterations)
&lt;/pre&gt;
==Output==
===For checkNum(2000)===
&lt;pre&gt;
1 : 1000
2 : 500
3 : 250
4 : 125
5 : 376
6 : 188
7 : 94
8 : 47
9 : 142
10 : 71
11 : 214
12 : 107
13 : 322
14 : 161
15 : 484
16 : 242
17 : 121
18 : 364
19 : 182
20 : 91
21 : 274
22 : 137
23 : 412
24 : 206
25 : 103
26 : 310
27 : 155
28 : 466
29 : 233
30 : 700
31 : 350
32 : 175
33 : 526
34 : 263
35 : 790
36 : 395
37 : 1186
38 : 593
39 : 1780
40 : 890
41 : 445
42 : 1336
43 : 668
44 : 334
45 : 167
46 : 502
47 : 251
48 : 754
49 : 377
50 : 1132
51 : 566
52 : 283
53 : 850
54 : 425
55 : 1276
56 : 638
57 : 319
58 : 958
59 : 479
60 : 1438
61 : 719
62 : 2158
63 : 1079
64 : 3238
65 : 1619
66 : 4858
67 : 2429
68 : 7288
69 : 3644
70 : 1822
71 : 911
72 : 2734
73 : 1367
74 : 4102
75 : 2051
76 : 6154
77 : 3077
78 : 9232
79 : 4616
80 : 2308
81 : 1154
82 : 577
83 : 1732
84 : 866
85 : 433
86 : 1300
87 : 650
88 : 325
89 : 976
90 : 488
91 : 244
92 : 122
93 : 61
94 : 184
95 : 92
96 : 46
97 : 23
98 : 70
99 : 35
100 : 106
101 : 53
102 : 160
103 : 80
104 : 40
105 : 20
106 : 10
107 : 5
108 : 16
109 : 8
110 : 4
111 : 2
112 : 1
1 113
&lt;/pre&gt;

===For checkNum(5000)===
&lt;pre&gt;
1 : 2500
2 : 1250
3 : 625
4 : 1876
5 : 938
6 : 469
7 : 1408
8 : 704
9 : 352
10 : 176
11 : 88
12 : 44
13 : 22
14 : 11
15 : 34
16 : 17
17 : 52
18 : 26
19 : 13
20 : 40
21 : 20
22 : 10
23 : 5
24 : 16
25 : 8
26 : 4
27 : 2
28 : 1
1 29
&lt;/pre&gt;
===For checkNum(25000000)===
&lt;pre&gt;
1 : 12500000
2 : 6250000
3 : 3125000
4 : 1562500
5 : 781250
6 : 390625
7 : 1171876
8 : 585938
9 : 292969
10 : 878908
11 : 439454
12 : 219727
13 : 659182
14 : 329591
15 : 988774
16 : 494387
17 : 1483162
18 : 741581
19 : 2224744
20 : 1112372
21 : 556186
22 : 278093
23 : 834280
24 : 417140
25 : 208570
26 : 104285
27 : 312856
28 : 156428
29 : 78214
30 : 39107
31 : 117322
32 : 58661
33 : 175984
34 : 87992
35 : 43996
36 : 21998
37 : 10999
38 : 32998
39 : 16499
40 : 49498
41 : 24749
42 : 74248
43 : 37124
44 : 18562
45 : 9281
46 : 27844
47 : 13922
48 : 6961
49 : 20884
50 : 10442
51 : 5221
52 : 15664
53 : 7832
54 : 3916
55 : 1958
56 : 979
57 : 2938
58 : 1469
59 : 4408
60 : 2204
61 : 1102
62 : 551
63 : 1654
64 : 827
65 : 2482
66 : 1241
67 : 3724
68 : 1862
69 : 931
70 : 2794
71 : 1397
72 : 4192
73 : 2096
74 : 1048
75 : 524
76 : 262
77 : 131
78 : 394
79 : 197
80 : 592
81 : 296
82 : 148
83 : 74
84 : 37
85 : 112
86 : 56
87 : 28
88 : 14
89 : 7
90 : 22
91 : 11
92 : 34
93 : 17
94 : 52
95 : 26
96 : 13
97 : 40
98 : 20
99 : 10
100 : 5
101 : 16
102 : 8
103 : 4
104 : 2
105 : 1
1 106
&lt;/pre&gt;

Happy Life ahead!!!

[[File:end1.png]]</text>
      <sha1>0dba3wbv4jbet6fj3vqqvs7tm08h14x</sha1>
    </revision>
    <revision>
      <id>4532</id>
      <parentid>4511</parentid>
      <timestamp>2018-10-23T04:11:36Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* Program */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="56766">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_12 Contributors of this page]

=Page Rank - How does Google Work=
One web page is having link to other page, that is a page is referring to other page. Google uses ''Page Rank'' algorithm to choose which page should be displayed first.

If we have network, connections as below:
[[File:rank0.png]]

We want to pick a leader out of all these nodes. How to pick a leader?  Why to elect a leader? It is because we want to find the super power of available nodes.                     
[[File:rank1.png]]

For example, the application wherein, we want to find the most impressive person of the  few ones. How to decide it? As shown in below figure, each node will communicate with other, randomly, we implement the count for each node, how many times, the particular node is being visited.
[[File:rank2.png]]

[[#Top]]

As shown in following, figure, all nodes are visited and each node is marked with the 
number i.e.number of times the node is visited.
[[File:rank3.png]]

The node with the maximum count, becomes the winner. Here, node with 120 count in figure 
below, is the winner. i.e. The person with 120 count in the figure is the most impressive 
person in the community being considered.
[[File:rank4.png]]

[[File:rank5.png]]

[[File:rank6.png]]

[[File:rank7.png]]


[[File:rank8.png]]

[[#Top]]

Google selects the page rank in this matter. Each web page is connected to other web page with web links. To a page, maximum link is there, that will be put on top results in Google search results.
[[File:rank9.png]]

Google uses web crawler. The crawler takes the random walk on the www network and rank the web sites.
[[File:rank10.png]]

This way Google ranks the pages and displays search results, according to page rank.
[[File:rank11.png]]

e.g.we search for ''mysore city''. Google has 10,000 results. But it displays the results in the sequence of page rank of search results, As shown in figure below.
[[File:mysore.png]]

[[#Top]]

==Page rank algorithm ==
As shown in beautiful figure below, few nodes combinely selected one as the leader, then that leader and other nodes, have selected         other as a leader. This way, finally the final leader is elected.
[[File:rank12.png|600px]]


[[File:graph00.png|600px]]


[[File:graph01.png|600px]]

[[#Top]]

==Gragh Drawing Program1==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
nx.barbell_graph(4,2)
G=nx.barbell_graph(4,2)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:Graph003.png|600px]]

[[#Top]]

==Gragh Drawing Program2==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
nx.barbell_graph(4,3)
G=nx.barbell_graph(4,3)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:Graph004.png|600px]]

[[#Top]]

==Gragh Drawing Program3==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
nx.barbell_graph(5,3)
G=nx.barbell_graph(5,3)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:Graph005.png|600px]]

[[#Top]]

==Complete Graph==
Complete graph is a graph, wherein, each node is connected to each other nodes in a graph.

&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.complete_graph(4)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:

[[File:completegraph001.png|600px]]

[[#Top]]

==Cycle graph==

&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.cycle_graph(5)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:

[[File:cyclegraph1.png|600px]]

[[#Top]]

==Ladder graph==

&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.ladder_graph(5)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:

[[File:laddergraph.png|600px]]

[[#Top]]

==Path Graph==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.path_graph(6)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:

[[File:pathgraph.png|600px]]

[[#Top]]

==Star Graph==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.star_graph(5)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:stargraph.png|600px]]

[[#Top]]

==Star Graph of 4 Nodes==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.star_graph(4)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:stargraph4points.png|600px]]

==Wheel Graph==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.wheel_graph(4)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:wheelgraph.png|600px]]

[[#Top]]

==Wheel Graph of 5 nodes==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.wheel_graph(5)
nx.draw(G)
plt.show()

&lt;/pre&gt;

Output:

[[File:wheelgraph5nodes.png|600px]]

[[#Top]]

==Wheel Graph of 6 nodes==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.wheel_graph(6)
nx.draw(G)
plt.show()

&lt;/pre&gt;

Output:

[[File:wheelgraph6nodes.png|600px]]

[[#Top]]

==Random Graph==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.gnp_random_graph(5,0.5)
nx.draw(G)
plt.show()

&lt;/pre&gt;

Output:

[[File:randomgraph1.png|600px]]


Running the same above program, we will get different output, as shown below, as it is random graph.

[[File:randomgraph2.png|600px]]

[[#Top]]

==Page Rank Algorithm Implementation==

===Random Directed Graph===
&lt;pre&gt;
import networkx as nx
import random
import matplotlib.pyplot as plt

#Draw random directed graph
G=nx.gnp_random_graph(10,0.5,directed=True)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output: 

[[File:randomDirectedGraph.png|600px]]


===Random Directed Graph with Labels===
&lt;pre&gt;
import networkx as nx
import random
import matplotlib.pyplot as plt

#Draw random directed graph 
G=nx.gnp_random_graph(10,0.5,directed=True)
#Give label numbering to nodes
nx.draw(G,with_labels=True)
plt.show()

&lt;/pre&gt;

Output:

[[File:randomDirectedGraphwithLabels.png|600px]]


[[#Top]]

===Page Rank Coding===
&lt;pre&gt;
import networkx as nx
import random
import matplotlib.pyplot as plt
import operator

#Draw random directed graph 
G=nx.gnp_random_graph(10,0.5,directed=True)
#Give label numbering to nodes
nx.draw(G,with_labels=True)
plt.show()

#x is the random source node
x=random.choice([i for i in range(G.number_of_nodes())])

#dictionary to maintain counter
dictCounter={}
#initialize the counter of each node as 0
for i in range(G.number_of_nodes()):
    dictCounter[i]=0
dictCounter[x]=dictCounter[x]+1

for i in range(10000):
    listn=list(G.neighbors(x))
    #if x is a sink node, we need to select random node for random walk
    #, else select random neighbor node

    if(len(listn)==0):
        x=random.choice([i for i in range(G.number_of_nodes())])
        dictCounter[x]=dictCounter[x]+1
    else:
        #choose a node randomly from neightbors
        x=random.choice(listn)
        dictCounter[x]=dictCounter[x]+1

p=nx.pagerank(G)
sorted_p=sorted(p.items(),key=operator.itemgetter(1))
sorted_rw=sorted(dictCounter.items(),key=operator.itemgetter(1))                        
#print(p)
#print(dictCounter)

print(sorted_p)
print(sorted_rw)

&lt;/pre&gt;

Output:

&lt;pre&gt;
[(2, 0.07139920240302768), (5, 0.07464882519777695), (3, 0.08527469366832419), 
(6, 0.08665188647066119), (4, 0.0987815549542114), (0, 0.10858415997562518), 
(9, 0.110369696943925), (8, 0.11456211367660116), (1, 0.11682018308814024), 
(7, 0.13290768362170685)]
[(2, 4), (5, 7), (8, 7), (6, 8), (3, 11), (7, 11), (1, 12), (4, 12), (0, 13), (9, 16)]
&lt;/pre&gt;

[[#Top]]

=Email communication Network=
==Page rank :page distribution method==
===Revision: Graph===
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
G=nx.cycle_graph(4)
labels={0:&quot;Bangluru&quot;,1:&quot;Gawhati&quot;,2:&quot;Kolkata&quot;,3:&quot;Chennai&quot;}
nx.draw(G,with_labels=True,labels=labels)
plt.show()
&lt;/pre&gt;

Output:

[[File:revGRAPH.png]]


===Directed Graph  Example===

[[File:directedGraphExample.png|600px]]

&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
G=nx.gnp_random_graph(4,.5,directed=True)
labels={0:&quot;Bangluru&quot;,1:&quot;Gawhati&quot;,2:&quot;Kolkata&quot;,3:&quot;Chennai&quot;}
nx.draw(G,with_labels=True,labels=labels)
plt.show()

&lt;/pre&gt;

Output:
[[File:directedg.png|600px]]


[[#Top]]


==Bidirectional with Parallel and self loops==
==Bidirectional with Parallel edges==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
G=nx.MultiDiGraph()

G.add_node(1)
G.add_node(2)
G.add_node(3)
G.add_node(4)

G.add_path([1,2,3,4,1])
G.add_edge(1,4)
nx.draw(G,with_labels=True)
plt.show()
&lt;/pre&gt;

Output: 

[[File:bidirectionalg.png]]

==Bidirectional with Self loops==
It doesn't show as graph. It is not taught, I did it myself.(Ms. Ami TUSHARKANT CHOKSI)
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
G=nx.MultiDiGraph()

G.add_node(1)
G.add_node(2)
G.add_node(3)
G.add_node(4)

G.add_path([1,2,3,4,1])
G.add_edge(1,4)
G.add_edge(1,1)
nx.draw(G,with_labels=True)
d=G.selfloop_edges()
print(d)
plt.show()

&lt;/pre&gt;

#Output: &lt;generator object selfloop_edges.&lt;locals&gt;.&lt;genexpr&gt; at 0x0B790150&gt;
#It shows self loop is there in the graph


==Directed Undirected Graph==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

#undirected graph
U=nx.Graph()

#directed graph
G=nx.DiGraph()

#nodes in graph
print(G.nodes())#Output: []
G.add_nodes_from([i for i in range(5)])
print(G.nodes())#Output: [0, 1, 2, 3, 4]

#edges
print(G.out_edges())#Output:[]

print(G.in_edges())#Output:[]

G.add_edge(1,2)
print(G.edges())#Output: [(1, 2)]
print(G.in_edges())#Output: [(1, 2)]
print(G.out_edges())#Output: [(1, 2)]

G.add_edge(0,3)
G.add_edge(2,3)
G.add_edge(3,2)
G.add_edge(3,4)
G.add_edge(4,1)
print(G.out_edges(2))#Output: [(2, 3)]
print(G.out_edges(3))#Output:[(3, 2), (3, 4)]
print(G.in_edges(3))#Output:[(0, 3), (2, 3)]

&lt;/pre&gt;

[[#Top]]

==Points Distribution Method==
&lt;ul&gt;
&lt;li&gt;Initially, all nodes are given equal points&lt;/li&gt;
&lt;li&gt;Rule&lt;/li&gt;
&lt;ul&gt;
&lt;li&gt;Share whatever you have equally with your neighbors&lt;/li&gt;
&lt;/ul&gt;
&lt;li&gt;FOR NODE B:Neighbors: C&lt;/li&gt;
&lt;li&gt;Give all of its points to C&lt;/li&gt;
&lt;li&gt;FOR NODE C:Neighbors: A&lt;/li&gt;
&lt;li&gt;Give all of its points to A&lt;/li&gt;
&lt;li&gt;new point of A=old points of C&lt;/li&gt;
&lt;li&gt;new point of B=(1/2)*old points of A&lt;/li&gt;
&lt;li&gt;new point of C=(1/2)*old points of A+old points of B&lt;/li&gt;
&lt;/ul&gt;

===In Excel, Implementation===
[[File:grEx1.png|600px]]

[[File:grEx2.png|600px]]

[[File:grEx3.png|600px]]

[[#Top]]

After some nodes, points becomes constant, as shown below.

&lt;table class=&quot;tg&quot;&gt;
  &lt;tr&gt;
    &lt;th class=&quot;tg-xldj&quot;&gt;100&lt;/th&gt;
    &lt;th class=&quot;tg-xldj&quot;&gt;100&lt;/th&gt;
    &lt;th class=&quot;tg-xldj&quot;&gt;100&lt;/th&gt;
    &lt;th class=&quot;tg-xldj&quot;&gt; &lt;/th&gt;
    &lt;th class=&quot;tg-xldj&quot;&gt;300&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;100&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;50&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;150&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;150&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;50&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;100&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;100&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;75&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;125&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;125&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;50&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;125&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;125&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;62.5&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;112.5&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;112.5&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;62.5&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;125&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;125&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;56.25&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;118.75&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;118.75&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;62.5&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;118.75&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;118.75&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;59.375&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;121.875&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;121.875&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;59.375&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;118.75&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;118.75&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;60.9375&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;120.3125&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;120.3125&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;59.375&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;120.3125&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;120.3125&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;60.15625&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;119.5313&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;119.5313&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;60.15625&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;120.3125&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.3125&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;59.76563&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9219&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9219&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60.15625&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9219&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9219&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;59.96094&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.1172&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.1172&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;59.96094&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9219&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9219&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60.05859&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0195&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0195&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;59.96094&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0195&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0195&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60.00977&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9707&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9707&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60.00977&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0195&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0195&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;59.98535&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9951&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9951&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60.00977&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9951&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9951&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;59.99756&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0073&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0073&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;59.99756&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9951&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9951&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60.00366&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0012&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0012&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;59.99756&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0012&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0012&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60.00061&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9982&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9982&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60.00061&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0012&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0012&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;59.99908&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9997&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9997&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60.00061&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9997&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9997&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;59.99985&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0005&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0005&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;59.99985&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9997&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9997&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60.00023&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0001&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0001&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;59.99985&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0001&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0001&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60.00004&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9999&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9999&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60.00004&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0001&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0001&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;59.99994&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60.00004&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;59.99999&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;59.99999&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60.00001&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;59.99999&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;

[[#Top]]

===Directed Graph===
&lt;pre&gt;
import networkx as nx
import random
import matplotlib.pyplot as plt

def add_edges():
    nodes=list(G.nodes())
    for s in nodes:
        for t in nodes:
            if s!=t:
                r=random.random()
                if r&lt;=0.5:
                    G.add_edge(s,t)
    return G

#create a directed graph
G=nx.DiGraph()
G.add_nodes_from([i for i in range(10)])
add_edges()
nx.draw(G,with_labels=True)
plt.show()
&lt;/pre&gt;

OUTPUT:

[[File:v12p1.png|600px]]

[[File:v12p2.png|600px]]

[[File:v12p3.png|600px]]

===Point Calculating Program===
&lt;pre&gt;
import networkx as nx
import random
import matplotlib.pyplot as plt

def add_edges():
    nodes=list(G.nodes())
    for s in nodes:
        for t in nodes:
            if s!=t:
                r=random.random()
                if r&lt;=0.5:
                    G.add_edge(s,t)
    return G


def assign_points(G):
    nodes=list(G.nodes())
    p=[]
    for each in nodes:
        p.append(100)
    return p

def distribute_points(G,points):
    nodes=list(G.nodes())
    new_points=[]
    for i in range(len(nodes)):
        new_points.append(0)

    for n in nodes:
        out=list(G.out_edges(n))
        if len(out)==0:
            new_points[n]=new_points[n]+points[n]
        else:
            share=points[n]/len(out)
            for (src,tgt) in out:
                new_points[tgt]=new_points[tgt]+share
    return  new_points                

def keep_distributing(points,G):
    while(1):
        new_points=distribute_points(G,points)
        print(new_points)
        points=new_points
        stop=input(&quot;Press # to stop or any other key to continue&quot;)
        if stop=='#':
            break
    return new_points

#create a directed graph
G=nx.DiGraph()
G.add_nodes_from([i for i in range(10)])
add_edges()
nx.draw(G,with_labels=True)
plt.show()

#assign initial points
points=assign_points(G)

#keep distributing
final_points=keep_distributing(points,G)

&lt;/pre&gt;

Output:

[[File:v12p4.png]]

[[File:v12p5.png]]

==Complete page rank using point calculation ==
&lt;pre&gt;
import networkx as nx
import random
import matplotlib.pyplot as plt

def add_edges():
    nodes=list(G.nodes())
    for s in nodes:
        for t in nodes:
            if s!=t:
                r=random.random()
                if r&lt;=0.5:
                    G.add_edge(s,t)
    return G


def assign_points(G):
    nodes=list(G.nodes())
    p=[]
    for each in nodes:
        p.append(100)
    return p

def distribute_points(G,points):
    nodes=list(G.nodes())
    new_points=[]
    for i in range(len(nodes)):
        new_points.append(0)

    for n in nodes:
        out=list(G.out_edges(n))
        if len(out)==0:
            new_points[n]=new_points[n]+points[n]
        else:
            share=points[n]/len(out)
            for (src,tgt) in out:
                new_points[tgt]=new_points[tgt]+share
    return  new_points                

def keep_distributing(points,G):
    while(1):
        new_points=distribute_points(G,points)
        print(new_points)
        points=new_points
        stop=input(&quot;Press # to stop or any other key to continue&quot;)
        if stop=='#':
            break
    return new_points


def rank_by_points(points):
    d={}
    for i in range(len(points)):
        d[i]=points[i]
    print(sorted(d.items(),key=lambda f:f[1]))
    

#create a directed graph
G=nx.DiGraph()
G.add_nodes_from([i for i in range(10)])
add_edges()
nx.draw(G,with_labels=True)
plt.show()

#assign initial points
points=assign_points(G)

#keep distributing
final_points=keep_distributing(points,G)
rank_by_points(final_points)

#default networkx function
result = nx.pagerank(G)
print(sorted(result.items(),key=lambda f:f[1]))

&lt;/pre&gt;

Output:

[[File:finalrank.png]]

[[File:finalout.png]]


==Last Program==
Data File: page_rank.txt provided by Simran mam
===page_rank.txt file===
&lt;pre&gt;
1 2

1 3

1 4

1 5

1 6

7 8

7 9

7 6

7 5

7 4

7 1

7 10

11 12

11 13

11 6

11 14

15 10

15 16

15 18

15 6

15 17

15 13

13 6

13 4

13 14

13 18

20 21

20 22

20 23

20 24

21 17

21 10

21 18

21 25

6 13

6 7

6 12

6 18

2 3

2 12

2 1

2 20

2 13

5 12

5 9

5 6

5 7

5 11

4 13

4 19

4 22

4 7

9 12

9 5

9 6

9 13

9 16

16 24

16 15

16 9

16 4

16 22

12 6

12 2

12 23

18 17

18 15

18 3

18 19

18 6

24 13

24 18

24 16

24 25

24 20

23 20

23 14

23 12

23 10

23 5

10 15

10 24

10 12

10 7

10 21

25 24

25 3

25 11

25 13

25 22

22 3

22 21

22 16

22 8

22 15

14 7

14 18

14 16

4 21

14 4

3 1

3 10

3 8

3 18

3 22

17 18

17 10

17 21

17 15

17 3
&lt;/pre&gt;
===program code===
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
G=nx.read_edgelist(r&quot;page_rank.txt&quot;,create_using=nx.DiGraph(),nodetype=int)
nx.draw(G,with_labels=True)
plt.show()

#calling point calculation algorithm
#Out program where, functions are defined
from v12p import *

add_edges(G)

#assign initial points
points=assign_points(G)

#keep distributing
final_points=keep_distributing(points,G)
rank_by_points(final_points)

#default networkx function
result = nx.pagerank(G)
print(sorted(result.items(),key=lambda f:f[1]))
&lt;/pre&gt;

[[File:lastOutput.png]]

Output:

=Collatz Conjecture=
Taught by Sudarshan sir and Amit sir, and Edited by Ms. Ami Tusharkant Choksi

If a number is even, divide it by ''2'', if it is odd, make multiply it by ''3'' and add ''1'', till you get ''1''. This simple problem is called, ''Collatz Conjecture''. 

[[File:collatz1.png|600px]]

[[File:collatz2.png|600px]]

[[File:collatz3.png|600px]]

[[File:collatz4.png|600px]]

[[File:collatz5.png|600px]]

Number is bigger doesn't mean more iterations are required. One can notice, from the output of the following program. 



The program to implement the same is as follows:
==Program==
&lt;pre&gt;
#collatz conjecture
#if num is even, divide it by 2
#if num is odd, new number is equal to 3n+1


def checkNum(num):
    iterations=0
    while(num!=1):
        if(num%2==0):
            num=int(num/2)            
        else:
            num = 3*num+1
        iterations+=1
        

    print(num,iterations)


#checkNum(12)#Output: 1 9
#checkNum(26)#Output: 1 10
checkNum(2000)#Output: 1 112
&lt;/pre&gt;

&lt;pre&gt;

#recursive approach

def checkNum(num):
    if num==1:
        return 1
    elif num%2==0:
        return checkNum(num/2)+1
    else:
        return checkNum(3*num +1)+1


output:
checkNum(26)
Out[27]: 10
checkNum(5000)
Out[28]: 28
&lt;/pre&gt;

==Program adding statement to print all iterations==
&lt;pre&gt;
def checkNum(num):
    iterations=1
    while(num!=1):
        if(num%2==0):
            num=int(num/2)            
        else:
            num = 3*num+1
        print(iterations,&quot;:&quot;,num)
        iterations+=1
        

    print(num,iterations)
&lt;/pre&gt;
==Output==
===For checkNum(2000)===
&lt;pre&gt;
1 : 1000
2 : 500
3 : 250
4 : 125
5 : 376
6 : 188
7 : 94
8 : 47
9 : 142
10 : 71
11 : 214
12 : 107
13 : 322
14 : 161
15 : 484
16 : 242
17 : 121
18 : 364
19 : 182
20 : 91
21 : 274
22 : 137
23 : 412
24 : 206
25 : 103
26 : 310
27 : 155
28 : 466
29 : 233
30 : 700
31 : 350
32 : 175
33 : 526
34 : 263
35 : 790
36 : 395
37 : 1186
38 : 593
39 : 1780
40 : 890
41 : 445
42 : 1336
43 : 668
44 : 334
45 : 167
46 : 502
47 : 251
48 : 754
49 : 377
50 : 1132
51 : 566
52 : 283
53 : 850
54 : 425
55 : 1276
56 : 638
57 : 319
58 : 958
59 : 479
60 : 1438
61 : 719
62 : 2158
63 : 1079
64 : 3238
65 : 1619
66 : 4858
67 : 2429
68 : 7288
69 : 3644
70 : 1822
71 : 911
72 : 2734
73 : 1367
74 : 4102
75 : 2051
76 : 6154
77 : 3077
78 : 9232
79 : 4616
80 : 2308
81 : 1154
82 : 577
83 : 1732
84 : 866
85 : 433
86 : 1300
87 : 650
88 : 325
89 : 976
90 : 488
91 : 244
92 : 122
93 : 61
94 : 184
95 : 92
96 : 46
97 : 23
98 : 70
99 : 35
100 : 106
101 : 53
102 : 160
103 : 80
104 : 40
105 : 20
106 : 10
107 : 5
108 : 16
109 : 8
110 : 4
111 : 2
112 : 1
1 113
&lt;/pre&gt;

===For checkNum(5000)===
&lt;pre&gt;
1 : 2500
2 : 1250
3 : 625
4 : 1876
5 : 938
6 : 469
7 : 1408
8 : 704
9 : 352
10 : 176
11 : 88
12 : 44
13 : 22
14 : 11
15 : 34
16 : 17
17 : 52
18 : 26
19 : 13
20 : 40
21 : 20
22 : 10
23 : 5
24 : 16
25 : 8
26 : 4
27 : 2
28 : 1
1 29
&lt;/pre&gt;
===For checkNum(25000000)===
&lt;pre&gt;
1 : 12500000
2 : 6250000
3 : 3125000
4 : 1562500
5 : 781250
6 : 390625
7 : 1171876
8 : 585938
9 : 292969
10 : 878908
11 : 439454
12 : 219727
13 : 659182
14 : 329591
15 : 988774
16 : 494387
17 : 1483162
18 : 741581
19 : 2224744
20 : 1112372
21 : 556186
22 : 278093
23 : 834280
24 : 417140
25 : 208570
26 : 104285
27 : 312856
28 : 156428
29 : 78214
30 : 39107
31 : 117322
32 : 58661
33 : 175984
34 : 87992
35 : 43996
36 : 21998
37 : 10999
38 : 32998
39 : 16499
40 : 49498
41 : 24749
42 : 74248
43 : 37124
44 : 18562
45 : 9281
46 : 27844
47 : 13922
48 : 6961
49 : 20884
50 : 10442
51 : 5221
52 : 15664
53 : 7832
54 : 3916
55 : 1958
56 : 979
57 : 2938
58 : 1469
59 : 4408
60 : 2204
61 : 1102
62 : 551
63 : 1654
64 : 827
65 : 2482
66 : 1241
67 : 3724
68 : 1862
69 : 931
70 : 2794
71 : 1397
72 : 4192
73 : 2096
74 : 1048
75 : 524
76 : 262
77 : 131
78 : 394
79 : 197
80 : 592
81 : 296
82 : 148
83 : 74
84 : 37
85 : 112
86 : 56
87 : 28
88 : 14
89 : 7
90 : 22
91 : 11
92 : 34
93 : 17
94 : 52
95 : 26
96 : 13
97 : 40
98 : 20
99 : 10
100 : 5
101 : 16
102 : 8
103 : 4
104 : 2
105 : 1
1 106
&lt;/pre&gt;

Happy Life ahead!!!

[[File:end1.png]]</text>
      <sha1>k1yo54115dxmtp1x7wfdce3rteb3nm0</sha1>
    </revision>
    <revision>
      <id>4548</id>
      <parentid>4532</parentid>
      <timestamp>2018-10-25T08:04:31Z</timestamp>
      <contributor>
        <username>Prarena Shroff</username>
        <id>1170</id>
      </contributor>
      <comment>/* Page Rank - How does Google Work */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="57221">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_12 Contributors of this page]

=Page Rank - How does Google Work=
One web page is having link to other page, that is a page is referring to other page. Google uses ''Page Rank'' algorithm to choose which page should be displayed first.
As said in the videos-It also means that it doesnt matter how many people are referring to you actually what matters is what is the type of the person who is referring to you.
Easily reachable nodes if point to a node,then the probability of that node being the most visited becomes higher.
For eg- 100 of your friends and family referring to you is not as same as that of the Prime Minister of India referring to you. In short,its QUALITY over QUANTITY.

If we have network, connections as below:
[[File:rank0.png]]

We want to pick a leader out of all these nodes. How to pick a leader?  Why to elect a leader? It is because we want to find the super power of available nodes.                     
[[File:rank1.png]]

For example, the application wherein, we want to find the most impressive person of the  few ones. How to decide it? As shown in below figure, each node will communicate with other, randomly, we implement the count for each node, how many times, the particular node is being visited.
[[File:rank2.png]]

[[#Top]]

As shown in following, figure, all nodes are visited and each node is marked with the 
number i.e.number of times the node is visited.
[[File:rank3.png]]

The node with the maximum count, becomes the winner. Here, node with 120 count in figure 
below, is the winner. i.e. The person with 120 count in the figure is the most impressive 
person in the community being considered.
[[File:rank4.png]]

[[File:rank5.png]]

[[File:rank6.png]]

[[File:rank7.png]]


[[File:rank8.png]]

[[#Top]]

Google selects the page rank in this matter. Each web page is connected to other web page with web links. To a page, maximum link is there, that will be put on top results in Google search results.
[[File:rank9.png]]

Google uses web crawler. The crawler takes the random walk on the www network and rank the web sites.
[[File:rank10.png]]

This way Google ranks the pages and displays search results, according to page rank.
[[File:rank11.png]]

e.g.we search for ''mysore city''. Google has 10,000 results. But it displays the results in the sequence of page rank of search results, As shown in figure below.
[[File:mysore.png]]

[[#Top]]

==Page rank algorithm ==
As shown in beautiful figure below, few nodes combinely selected one as the leader, then that leader and other nodes, have selected         other as a leader. This way, finally the final leader is elected.
[[File:rank12.png|600px]]


[[File:graph00.png|600px]]


[[File:graph01.png|600px]]

[[#Top]]

==Gragh Drawing Program1==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
nx.barbell_graph(4,2)
G=nx.barbell_graph(4,2)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:Graph003.png|600px]]

[[#Top]]

==Gragh Drawing Program2==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
nx.barbell_graph(4,3)
G=nx.barbell_graph(4,3)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:Graph004.png|600px]]

[[#Top]]

==Gragh Drawing Program3==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
nx.barbell_graph(5,3)
G=nx.barbell_graph(5,3)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:Graph005.png|600px]]

[[#Top]]

==Complete Graph==
Complete graph is a graph, wherein, each node is connected to each other nodes in a graph.

&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.complete_graph(4)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:

[[File:completegraph001.png|600px]]

[[#Top]]

==Cycle graph==

&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.cycle_graph(5)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:

[[File:cyclegraph1.png|600px]]

[[#Top]]

==Ladder graph==

&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.ladder_graph(5)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:

[[File:laddergraph.png|600px]]

[[#Top]]

==Path Graph==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.path_graph(6)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:

[[File:pathgraph.png|600px]]

[[#Top]]

==Star Graph==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.star_graph(5)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:stargraph.png|600px]]

[[#Top]]

==Star Graph of 4 Nodes==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.star_graph(4)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:stargraph4points.png|600px]]

==Wheel Graph==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.wheel_graph(4)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:wheelgraph.png|600px]]

[[#Top]]

==Wheel Graph of 5 nodes==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.wheel_graph(5)
nx.draw(G)
plt.show()

&lt;/pre&gt;

Output:

[[File:wheelgraph5nodes.png|600px]]

[[#Top]]

==Wheel Graph of 6 nodes==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.wheel_graph(6)
nx.draw(G)
plt.show()

&lt;/pre&gt;

Output:

[[File:wheelgraph6nodes.png|600px]]

[[#Top]]

==Random Graph==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.gnp_random_graph(5,0.5)
nx.draw(G)
plt.show()

&lt;/pre&gt;

Output:

[[File:randomgraph1.png|600px]]


Running the same above program, we will get different output, as shown below, as it is random graph.

[[File:randomgraph2.png|600px]]

[[#Top]]

==Page Rank Algorithm Implementation==

===Random Directed Graph===
&lt;pre&gt;
import networkx as nx
import random
import matplotlib.pyplot as plt

#Draw random directed graph
G=nx.gnp_random_graph(10,0.5,directed=True)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output: 

[[File:randomDirectedGraph.png|600px]]


===Random Directed Graph with Labels===
&lt;pre&gt;
import networkx as nx
import random
import matplotlib.pyplot as plt

#Draw random directed graph 
G=nx.gnp_random_graph(10,0.5,directed=True)
#Give label numbering to nodes
nx.draw(G,with_labels=True)
plt.show()

&lt;/pre&gt;

Output:

[[File:randomDirectedGraphwithLabels.png|600px]]


[[#Top]]

===Page Rank Coding===
&lt;pre&gt;
import networkx as nx
import random
import matplotlib.pyplot as plt
import operator

#Draw random directed graph 
G=nx.gnp_random_graph(10,0.5,directed=True)
#Give label numbering to nodes
nx.draw(G,with_labels=True)
plt.show()

#x is the random source node
x=random.choice([i for i in range(G.number_of_nodes())])

#dictionary to maintain counter
dictCounter={}
#initialize the counter of each node as 0
for i in range(G.number_of_nodes()):
    dictCounter[i]=0
dictCounter[x]=dictCounter[x]+1

for i in range(10000):
    listn=list(G.neighbors(x))
    #if x is a sink node, we need to select random node for random walk
    #, else select random neighbor node

    if(len(listn)==0):
        x=random.choice([i for i in range(G.number_of_nodes())])
        dictCounter[x]=dictCounter[x]+1
    else:
        #choose a node randomly from neightbors
        x=random.choice(listn)
        dictCounter[x]=dictCounter[x]+1

p=nx.pagerank(G)
sorted_p=sorted(p.items(),key=operator.itemgetter(1))
sorted_rw=sorted(dictCounter.items(),key=operator.itemgetter(1))                        
#print(p)
#print(dictCounter)

print(sorted_p)
print(sorted_rw)

&lt;/pre&gt;

Output:

&lt;pre&gt;
[(2, 0.07139920240302768), (5, 0.07464882519777695), (3, 0.08527469366832419), 
(6, 0.08665188647066119), (4, 0.0987815549542114), (0, 0.10858415997562518), 
(9, 0.110369696943925), (8, 0.11456211367660116), (1, 0.11682018308814024), 
(7, 0.13290768362170685)]
[(2, 4), (5, 7), (8, 7), (6, 8), (3, 11), (7, 11), (1, 12), (4, 12), (0, 13), (9, 16)]
&lt;/pre&gt;

[[#Top]]

=Email communication Network=
==Page rank :page distribution method==
===Revision: Graph===
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
G=nx.cycle_graph(4)
labels={0:&quot;Bangluru&quot;,1:&quot;Gawhati&quot;,2:&quot;Kolkata&quot;,3:&quot;Chennai&quot;}
nx.draw(G,with_labels=True,labels=labels)
plt.show()
&lt;/pre&gt;

Output:

[[File:revGRAPH.png]]


===Directed Graph  Example===

[[File:directedGraphExample.png|600px]]

&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
G=nx.gnp_random_graph(4,.5,directed=True)
labels={0:&quot;Bangluru&quot;,1:&quot;Gawhati&quot;,2:&quot;Kolkata&quot;,3:&quot;Chennai&quot;}
nx.draw(G,with_labels=True,labels=labels)
plt.show()

&lt;/pre&gt;

Output:
[[File:directedg.png|600px]]


[[#Top]]


==Bidirectional with Parallel and self loops==
==Bidirectional with Parallel edges==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
G=nx.MultiDiGraph()

G.add_node(1)
G.add_node(2)
G.add_node(3)
G.add_node(4)

G.add_path([1,2,3,4,1])
G.add_edge(1,4)
nx.draw(G,with_labels=True)
plt.show()
&lt;/pre&gt;

Output: 

[[File:bidirectionalg.png]]

==Bidirectional with Self loops==
It doesn't show as graph. It is not taught, I did it myself.(Ms. Ami TUSHARKANT CHOKSI)
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
G=nx.MultiDiGraph()

G.add_node(1)
G.add_node(2)
G.add_node(3)
G.add_node(4)

G.add_path([1,2,3,4,1])
G.add_edge(1,4)
G.add_edge(1,1)
nx.draw(G,with_labels=True)
d=G.selfloop_edges()
print(d)
plt.show()

&lt;/pre&gt;

#Output: &lt;generator object selfloop_edges.&lt;locals&gt;.&lt;genexpr&gt; at 0x0B790150&gt;
#It shows self loop is there in the graph


==Directed Undirected Graph==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

#undirected graph
U=nx.Graph()

#directed graph
G=nx.DiGraph()

#nodes in graph
print(G.nodes())#Output: []
G.add_nodes_from([i for i in range(5)])
print(G.nodes())#Output: [0, 1, 2, 3, 4]

#edges
print(G.out_edges())#Output:[]

print(G.in_edges())#Output:[]

G.add_edge(1,2)
print(G.edges())#Output: [(1, 2)]
print(G.in_edges())#Output: [(1, 2)]
print(G.out_edges())#Output: [(1, 2)]

G.add_edge(0,3)
G.add_edge(2,3)
G.add_edge(3,2)
G.add_edge(3,4)
G.add_edge(4,1)
print(G.out_edges(2))#Output: [(2, 3)]
print(G.out_edges(3))#Output:[(3, 2), (3, 4)]
print(G.in_edges(3))#Output:[(0, 3), (2, 3)]

&lt;/pre&gt;

[[#Top]]

==Points Distribution Method==
&lt;ul&gt;
&lt;li&gt;Initially, all nodes are given equal points&lt;/li&gt;
&lt;li&gt;Rule&lt;/li&gt;
&lt;ul&gt;
&lt;li&gt;Share whatever you have equally with your neighbors&lt;/li&gt;
&lt;/ul&gt;
&lt;li&gt;FOR NODE B:Neighbors: C&lt;/li&gt;
&lt;li&gt;Give all of its points to C&lt;/li&gt;
&lt;li&gt;FOR NODE C:Neighbors: A&lt;/li&gt;
&lt;li&gt;Give all of its points to A&lt;/li&gt;
&lt;li&gt;new point of A=old points of C&lt;/li&gt;
&lt;li&gt;new point of B=(1/2)*old points of A&lt;/li&gt;
&lt;li&gt;new point of C=(1/2)*old points of A+old points of B&lt;/li&gt;
&lt;/ul&gt;

===In Excel, Implementation===
[[File:grEx1.png|600px]]

[[File:grEx2.png|600px]]

[[File:grEx3.png|600px]]

[[#Top]]

After some nodes, points becomes constant, as shown below.

&lt;table class=&quot;tg&quot;&gt;
  &lt;tr&gt;
    &lt;th class=&quot;tg-xldj&quot;&gt;100&lt;/th&gt;
    &lt;th class=&quot;tg-xldj&quot;&gt;100&lt;/th&gt;
    &lt;th class=&quot;tg-xldj&quot;&gt;100&lt;/th&gt;
    &lt;th class=&quot;tg-xldj&quot;&gt; &lt;/th&gt;
    &lt;th class=&quot;tg-xldj&quot;&gt;300&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;100&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;50&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;150&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;150&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;50&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;100&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;100&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;75&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;125&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;125&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;50&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;125&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;125&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;62.5&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;112.5&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;112.5&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;62.5&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;125&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;125&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;56.25&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;118.75&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;118.75&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;62.5&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;118.75&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;118.75&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;59.375&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;121.875&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;121.875&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;59.375&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;118.75&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;118.75&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;60.9375&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;120.3125&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;120.3125&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;59.375&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;120.3125&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;120.3125&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;60.15625&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;119.5313&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;119.5313&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;60.15625&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;120.3125&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.3125&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;59.76563&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9219&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9219&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60.15625&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9219&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9219&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;59.96094&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.1172&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.1172&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;59.96094&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9219&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9219&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60.05859&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0195&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0195&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;59.96094&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0195&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0195&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60.00977&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9707&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9707&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60.00977&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0195&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0195&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;59.98535&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9951&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9951&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60.00977&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9951&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9951&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;59.99756&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0073&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0073&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;59.99756&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9951&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9951&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60.00366&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0012&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0012&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;59.99756&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0012&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0012&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60.00061&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9982&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9982&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60.00061&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0012&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0012&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;59.99908&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9997&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9997&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60.00061&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9997&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9997&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;59.99985&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0005&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0005&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;59.99985&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9997&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9997&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60.00023&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0001&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0001&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;59.99985&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0001&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0001&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60.00004&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9999&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9999&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60.00004&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0001&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0001&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;59.99994&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60.00004&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;59.99999&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;59.99999&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60.00001&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;59.99999&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;

[[#Top]]

===Directed Graph===
&lt;pre&gt;
import networkx as nx
import random
import matplotlib.pyplot as plt

def add_edges():
    nodes=list(G.nodes())
    for s in nodes:
        for t in nodes:
            if s!=t:
                r=random.random()
                if r&lt;=0.5:
                    G.add_edge(s,t)
    return G

#create a directed graph
G=nx.DiGraph()
G.add_nodes_from([i for i in range(10)])
add_edges()
nx.draw(G,with_labels=True)
plt.show()
&lt;/pre&gt;

OUTPUT:

[[File:v12p1.png|600px]]

[[File:v12p2.png|600px]]

[[File:v12p3.png|600px]]

===Point Calculating Program===
&lt;pre&gt;
import networkx as nx
import random
import matplotlib.pyplot as plt

def add_edges():
    nodes=list(G.nodes())
    for s in nodes:
        for t in nodes:
            if s!=t:
                r=random.random()
                if r&lt;=0.5:
                    G.add_edge(s,t)
    return G


def assign_points(G):
    nodes=list(G.nodes())
    p=[]
    for each in nodes:
        p.append(100)
    return p

def distribute_points(G,points):
    nodes=list(G.nodes())
    new_points=[]
    for i in range(len(nodes)):
        new_points.append(0)

    for n in nodes:
        out=list(G.out_edges(n))
        if len(out)==0:
            new_points[n]=new_points[n]+points[n]
        else:
            share=points[n]/len(out)
            for (src,tgt) in out:
                new_points[tgt]=new_points[tgt]+share
    return  new_points                

def keep_distributing(points,G):
    while(1):
        new_points=distribute_points(G,points)
        print(new_points)
        points=new_points
        stop=input(&quot;Press # to stop or any other key to continue&quot;)
        if stop=='#':
            break
    return new_points

#create a directed graph
G=nx.DiGraph()
G.add_nodes_from([i for i in range(10)])
add_edges()
nx.draw(G,with_labels=True)
plt.show()

#assign initial points
points=assign_points(G)

#keep distributing
final_points=keep_distributing(points,G)

&lt;/pre&gt;

Output:

[[File:v12p4.png]]

[[File:v12p5.png]]

==Complete page rank using point calculation ==
&lt;pre&gt;
import networkx as nx
import random
import matplotlib.pyplot as plt

def add_edges():
    nodes=list(G.nodes())
    for s in nodes:
        for t in nodes:
            if s!=t:
                r=random.random()
                if r&lt;=0.5:
                    G.add_edge(s,t)
    return G


def assign_points(G):
    nodes=list(G.nodes())
    p=[]
    for each in nodes:
        p.append(100)
    return p

def distribute_points(G,points):
    nodes=list(G.nodes())
    new_points=[]
    for i in range(len(nodes)):
        new_points.append(0)

    for n in nodes:
        out=list(G.out_edges(n))
        if len(out)==0:
            new_points[n]=new_points[n]+points[n]
        else:
            share=points[n]/len(out)
            for (src,tgt) in out:
                new_points[tgt]=new_points[tgt]+share
    return  new_points                

def keep_distributing(points,G):
    while(1):
        new_points=distribute_points(G,points)
        print(new_points)
        points=new_points
        stop=input(&quot;Press # to stop or any other key to continue&quot;)
        if stop=='#':
            break
    return new_points


def rank_by_points(points):
    d={}
    for i in range(len(points)):
        d[i]=points[i]
    print(sorted(d.items(),key=lambda f:f[1]))
    

#create a directed graph
G=nx.DiGraph()
G.add_nodes_from([i for i in range(10)])
add_edges()
nx.draw(G,with_labels=True)
plt.show()

#assign initial points
points=assign_points(G)

#keep distributing
final_points=keep_distributing(points,G)
rank_by_points(final_points)

#default networkx function
result = nx.pagerank(G)
print(sorted(result.items(),key=lambda f:f[1]))

&lt;/pre&gt;

Output:

[[File:finalrank.png]]

[[File:finalout.png]]


==Last Program==
Data File: page_rank.txt provided by Simran mam
===page_rank.txt file===
&lt;pre&gt;
1 2

1 3

1 4

1 5

1 6

7 8

7 9

7 6

7 5

7 4

7 1

7 10

11 12

11 13

11 6

11 14

15 10

15 16

15 18

15 6

15 17

15 13

13 6

13 4

13 14

13 18

20 21

20 22

20 23

20 24

21 17

21 10

21 18

21 25

6 13

6 7

6 12

6 18

2 3

2 12

2 1

2 20

2 13

5 12

5 9

5 6

5 7

5 11

4 13

4 19

4 22

4 7

9 12

9 5

9 6

9 13

9 16

16 24

16 15

16 9

16 4

16 22

12 6

12 2

12 23

18 17

18 15

18 3

18 19

18 6

24 13

24 18

24 16

24 25

24 20

23 20

23 14

23 12

23 10

23 5

10 15

10 24

10 12

10 7

10 21

25 24

25 3

25 11

25 13

25 22

22 3

22 21

22 16

22 8

22 15

14 7

14 18

14 16

4 21

14 4

3 1

3 10

3 8

3 18

3 22

17 18

17 10

17 21

17 15

17 3
&lt;/pre&gt;
===program code===
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
G=nx.read_edgelist(r&quot;page_rank.txt&quot;,create_using=nx.DiGraph(),nodetype=int)
nx.draw(G,with_labels=True)
plt.show()

#calling point calculation algorithm
#Out program where, functions are defined
from v12p import *

add_edges(G)

#assign initial points
points=assign_points(G)

#keep distributing
final_points=keep_distributing(points,G)
rank_by_points(final_points)

#default networkx function
result = nx.pagerank(G)
print(sorted(result.items(),key=lambda f:f[1]))
&lt;/pre&gt;

[[File:lastOutput.png]]

Output:

=Collatz Conjecture=
Taught by Sudarshan sir and Amit sir, and Edited by Ms. Ami Tusharkant Choksi

If a number is even, divide it by ''2'', if it is odd, make multiply it by ''3'' and add ''1'', till you get ''1''. This simple problem is called, ''Collatz Conjecture''. 

[[File:collatz1.png|600px]]

[[File:collatz2.png|600px]]

[[File:collatz3.png|600px]]

[[File:collatz4.png|600px]]

[[File:collatz5.png|600px]]

Number is bigger doesn't mean more iterations are required. One can notice, from the output of the following program. 



The program to implement the same is as follows:
==Program==
&lt;pre&gt;
#collatz conjecture
#if num is even, divide it by 2
#if num is odd, new number is equal to 3n+1


def checkNum(num):
    iterations=0
    while(num!=1):
        if(num%2==0):
            num=int(num/2)            
        else:
            num = 3*num+1
        iterations+=1
        

    print(num,iterations)


#checkNum(12)#Output: 1 9
#checkNum(26)#Output: 1 10
checkNum(2000)#Output: 1 112
&lt;/pre&gt;

&lt;pre&gt;

#recursive approach

def checkNum(num):
    if num==1:
        return 1
    elif num%2==0:
        return checkNum(num/2)+1
    else:
        return checkNum(3*num +1)+1


output:
checkNum(26)
Out[27]: 10
checkNum(5000)
Out[28]: 28
&lt;/pre&gt;

==Program adding statement to print all iterations==
&lt;pre&gt;
def checkNum(num):
    iterations=1
    while(num!=1):
        if(num%2==0):
            num=int(num/2)            
        else:
            num = 3*num+1
        print(iterations,&quot;:&quot;,num)
        iterations+=1
        

    print(num,iterations)
&lt;/pre&gt;
==Output==
===For checkNum(2000)===
&lt;pre&gt;
1 : 1000
2 : 500
3 : 250
4 : 125
5 : 376
6 : 188
7 : 94
8 : 47
9 : 142
10 : 71
11 : 214
12 : 107
13 : 322
14 : 161
15 : 484
16 : 242
17 : 121
18 : 364
19 : 182
20 : 91
21 : 274
22 : 137
23 : 412
24 : 206
25 : 103
26 : 310
27 : 155
28 : 466
29 : 233
30 : 700
31 : 350
32 : 175
33 : 526
34 : 263
35 : 790
36 : 395
37 : 1186
38 : 593
39 : 1780
40 : 890
41 : 445
42 : 1336
43 : 668
44 : 334
45 : 167
46 : 502
47 : 251
48 : 754
49 : 377
50 : 1132
51 : 566
52 : 283
53 : 850
54 : 425
55 : 1276
56 : 638
57 : 319
58 : 958
59 : 479
60 : 1438
61 : 719
62 : 2158
63 : 1079
64 : 3238
65 : 1619
66 : 4858
67 : 2429
68 : 7288
69 : 3644
70 : 1822
71 : 911
72 : 2734
73 : 1367
74 : 4102
75 : 2051
76 : 6154
77 : 3077
78 : 9232
79 : 4616
80 : 2308
81 : 1154
82 : 577
83 : 1732
84 : 866
85 : 433
86 : 1300
87 : 650
88 : 325
89 : 976
90 : 488
91 : 244
92 : 122
93 : 61
94 : 184
95 : 92
96 : 46
97 : 23
98 : 70
99 : 35
100 : 106
101 : 53
102 : 160
103 : 80
104 : 40
105 : 20
106 : 10
107 : 5
108 : 16
109 : 8
110 : 4
111 : 2
112 : 1
1 113
&lt;/pre&gt;

===For checkNum(5000)===
&lt;pre&gt;
1 : 2500
2 : 1250
3 : 625
4 : 1876
5 : 938
6 : 469
7 : 1408
8 : 704
9 : 352
10 : 176
11 : 88
12 : 44
13 : 22
14 : 11
15 : 34
16 : 17
17 : 52
18 : 26
19 : 13
20 : 40
21 : 20
22 : 10
23 : 5
24 : 16
25 : 8
26 : 4
27 : 2
28 : 1
1 29
&lt;/pre&gt;
===For checkNum(25000000)===
&lt;pre&gt;
1 : 12500000
2 : 6250000
3 : 3125000
4 : 1562500
5 : 781250
6 : 390625
7 : 1171876
8 : 585938
9 : 292969
10 : 878908
11 : 439454
12 : 219727
13 : 659182
14 : 329591
15 : 988774
16 : 494387
17 : 1483162
18 : 741581
19 : 2224744
20 : 1112372
21 : 556186
22 : 278093
23 : 834280
24 : 417140
25 : 208570
26 : 104285
27 : 312856
28 : 156428
29 : 78214
30 : 39107
31 : 117322
32 : 58661
33 : 175984
34 : 87992
35 : 43996
36 : 21998
37 : 10999
38 : 32998
39 : 16499
40 : 49498
41 : 24749
42 : 74248
43 : 37124
44 : 18562
45 : 9281
46 : 27844
47 : 13922
48 : 6961
49 : 20884
50 : 10442
51 : 5221
52 : 15664
53 : 7832
54 : 3916
55 : 1958
56 : 979
57 : 2938
58 : 1469
59 : 4408
60 : 2204
61 : 1102
62 : 551
63 : 1654
64 : 827
65 : 2482
66 : 1241
67 : 3724
68 : 1862
69 : 931
70 : 2794
71 : 1397
72 : 4192
73 : 2096
74 : 1048
75 : 524
76 : 262
77 : 131
78 : 394
79 : 197
80 : 592
81 : 296
82 : 148
83 : 74
84 : 37
85 : 112
86 : 56
87 : 28
88 : 14
89 : 7
90 : 22
91 : 11
92 : 34
93 : 17
94 : 52
95 : 26
96 : 13
97 : 40
98 : 20
99 : 10
100 : 5
101 : 16
102 : 8
103 : 4
104 : 2
105 : 1
1 106
&lt;/pre&gt;

Happy Life ahead!!!

[[File:end1.png]]</text>
      <sha1>l5x506afsx98vg8ruojvz1bq90ida4i</sha1>
    </revision>
    <revision>
      <id>4549</id>
      <parentid>4548</parentid>
      <timestamp>2018-10-25T08:05:21Z</timestamp>
      <contributor>
        <username>Prarena Shroff</username>
        <id>1170</id>
      </contributor>
      <comment>/* Page Rank - How does Google Work */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="56766">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_12 Contributors of this page]

=Page Rank - How does Google Work=
One web page is having link to other page, that is a page is referring to other page. Google uses ''Page Rank'' algorithm to choose which page should be displayed first.

If we have network, connections as below:
[[File:rank0.png]]

We want to pick a leader out of all these nodes. How to pick a leader?  Why to elect a leader? It is because we want to find the super power of available nodes.                     
[[File:rank1.png]]

For example, the application wherein, we want to find the most impressive person of the  few ones. How to decide it? As shown in below figure, each node will communicate with other, randomly, we implement the count for each node, how many times, the particular node is being visited.
[[File:rank2.png]]

[[#Top]]

As shown in following, figure, all nodes are visited and each node is marked with the 
number i.e.number of times the node is visited.
[[File:rank3.png]]

The node with the maximum count, becomes the winner. Here, node with 120 count in figure 
below, is the winner. i.e. The person with 120 count in the figure is the most impressive 
person in the community being considered.
[[File:rank4.png]]

[[File:rank5.png]]

[[File:rank6.png]]

[[File:rank7.png]]


[[File:rank8.png]]

[[#Top]]

Google selects the page rank in this matter. Each web page is connected to other web page with web links. To a page, maximum link is there, that will be put on top results in Google search results.
[[File:rank9.png]]

Google uses web crawler. The crawler takes the random walk on the www network and rank the web sites.
[[File:rank10.png]]

This way Google ranks the pages and displays search results, according to page rank.
[[File:rank11.png]]

e.g.we search for ''mysore city''. Google has 10,000 results. But it displays the results in the sequence of page rank of search results, As shown in figure below.
[[File:mysore.png]]

[[#Top]]

==Page rank algorithm ==
As shown in beautiful figure below, few nodes combinely selected one as the leader, then that leader and other nodes, have selected         other as a leader. This way, finally the final leader is elected.
[[File:rank12.png|600px]]


[[File:graph00.png|600px]]


[[File:graph01.png|600px]]

[[#Top]]

==Gragh Drawing Program1==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
nx.barbell_graph(4,2)
G=nx.barbell_graph(4,2)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:Graph003.png|600px]]

[[#Top]]

==Gragh Drawing Program2==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
nx.barbell_graph(4,3)
G=nx.barbell_graph(4,3)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:Graph004.png|600px]]

[[#Top]]

==Gragh Drawing Program3==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
nx.barbell_graph(5,3)
G=nx.barbell_graph(5,3)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:Graph005.png|600px]]

[[#Top]]

==Complete Graph==
Complete graph is a graph, wherein, each node is connected to each other nodes in a graph.

&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.complete_graph(4)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:

[[File:completegraph001.png|600px]]

[[#Top]]

==Cycle graph==

&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.cycle_graph(5)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:

[[File:cyclegraph1.png|600px]]

[[#Top]]

==Ladder graph==

&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.ladder_graph(5)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:

[[File:laddergraph.png|600px]]

[[#Top]]

==Path Graph==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.path_graph(6)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output:

[[File:pathgraph.png|600px]]

[[#Top]]

==Star Graph==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.star_graph(5)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:stargraph.png|600px]]

[[#Top]]

==Star Graph of 4 Nodes==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.star_graph(4)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:stargraph4points.png|600px]]

==Wheel Graph==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.wheel_graph(4)
nx.draw(G)
plt.show()
&lt;/pre&gt;


Output:

[[File:wheelgraph.png|600px]]

[[#Top]]

==Wheel Graph of 5 nodes==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.wheel_graph(5)
nx.draw(G)
plt.show()

&lt;/pre&gt;

Output:

[[File:wheelgraph5nodes.png|600px]]

[[#Top]]

==Wheel Graph of 6 nodes==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.wheel_graph(6)
nx.draw(G)
plt.show()

&lt;/pre&gt;

Output:

[[File:wheelgraph6nodes.png|600px]]

[[#Top]]

==Random Graph==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

G=nx.gnp_random_graph(5,0.5)
nx.draw(G)
plt.show()

&lt;/pre&gt;

Output:

[[File:randomgraph1.png|600px]]


Running the same above program, we will get different output, as shown below, as it is random graph.

[[File:randomgraph2.png|600px]]

[[#Top]]

==Page Rank Algorithm Implementation==

===Random Directed Graph===
&lt;pre&gt;
import networkx as nx
import random
import matplotlib.pyplot as plt

#Draw random directed graph
G=nx.gnp_random_graph(10,0.5,directed=True)
nx.draw(G)
plt.show()
&lt;/pre&gt;

Output: 

[[File:randomDirectedGraph.png|600px]]


===Random Directed Graph with Labels===
&lt;pre&gt;
import networkx as nx
import random
import matplotlib.pyplot as plt

#Draw random directed graph 
G=nx.gnp_random_graph(10,0.5,directed=True)
#Give label numbering to nodes
nx.draw(G,with_labels=True)
plt.show()

&lt;/pre&gt;

Output:

[[File:randomDirectedGraphwithLabels.png|600px]]


[[#Top]]

===Page Rank Coding===
&lt;pre&gt;
import networkx as nx
import random
import matplotlib.pyplot as plt
import operator

#Draw random directed graph 
G=nx.gnp_random_graph(10,0.5,directed=True)
#Give label numbering to nodes
nx.draw(G,with_labels=True)
plt.show()

#x is the random source node
x=random.choice([i for i in range(G.number_of_nodes())])

#dictionary to maintain counter
dictCounter={}
#initialize the counter of each node as 0
for i in range(G.number_of_nodes()):
    dictCounter[i]=0
dictCounter[x]=dictCounter[x]+1

for i in range(10000):
    listn=list(G.neighbors(x))
    #if x is a sink node, we need to select random node for random walk
    #, else select random neighbor node

    if(len(listn)==0):
        x=random.choice([i for i in range(G.number_of_nodes())])
        dictCounter[x]=dictCounter[x]+1
    else:
        #choose a node randomly from neightbors
        x=random.choice(listn)
        dictCounter[x]=dictCounter[x]+1

p=nx.pagerank(G)
sorted_p=sorted(p.items(),key=operator.itemgetter(1))
sorted_rw=sorted(dictCounter.items(),key=operator.itemgetter(1))                        
#print(p)
#print(dictCounter)

print(sorted_p)
print(sorted_rw)

&lt;/pre&gt;

Output:

&lt;pre&gt;
[(2, 0.07139920240302768), (5, 0.07464882519777695), (3, 0.08527469366832419), 
(6, 0.08665188647066119), (4, 0.0987815549542114), (0, 0.10858415997562518), 
(9, 0.110369696943925), (8, 0.11456211367660116), (1, 0.11682018308814024), 
(7, 0.13290768362170685)]
[(2, 4), (5, 7), (8, 7), (6, 8), (3, 11), (7, 11), (1, 12), (4, 12), (0, 13), (9, 16)]
&lt;/pre&gt;

[[#Top]]

=Email communication Network=
==Page rank :page distribution method==
===Revision: Graph===
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
G=nx.cycle_graph(4)
labels={0:&quot;Bangluru&quot;,1:&quot;Gawhati&quot;,2:&quot;Kolkata&quot;,3:&quot;Chennai&quot;}
nx.draw(G,with_labels=True,labels=labels)
plt.show()
&lt;/pre&gt;

Output:

[[File:revGRAPH.png]]


===Directed Graph  Example===

[[File:directedGraphExample.png|600px]]

&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
G=nx.gnp_random_graph(4,.5,directed=True)
labels={0:&quot;Bangluru&quot;,1:&quot;Gawhati&quot;,2:&quot;Kolkata&quot;,3:&quot;Chennai&quot;}
nx.draw(G,with_labels=True,labels=labels)
plt.show()

&lt;/pre&gt;

Output:
[[File:directedg.png|600px]]


[[#Top]]


==Bidirectional with Parallel and self loops==
==Bidirectional with Parallel edges==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
G=nx.MultiDiGraph()

G.add_node(1)
G.add_node(2)
G.add_node(3)
G.add_node(4)

G.add_path([1,2,3,4,1])
G.add_edge(1,4)
nx.draw(G,with_labels=True)
plt.show()
&lt;/pre&gt;

Output: 

[[File:bidirectionalg.png]]

==Bidirectional with Self loops==
It doesn't show as graph. It is not taught, I did it myself.(Ms. Ami TUSHARKANT CHOKSI)
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
G=nx.MultiDiGraph()

G.add_node(1)
G.add_node(2)
G.add_node(3)
G.add_node(4)

G.add_path([1,2,3,4,1])
G.add_edge(1,4)
G.add_edge(1,1)
nx.draw(G,with_labels=True)
d=G.selfloop_edges()
print(d)
plt.show()

&lt;/pre&gt;

#Output: &lt;generator object selfloop_edges.&lt;locals&gt;.&lt;genexpr&gt; at 0x0B790150&gt;
#It shows self loop is there in the graph


==Directed Undirected Graph==
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt

#undirected graph
U=nx.Graph()

#directed graph
G=nx.DiGraph()

#nodes in graph
print(G.nodes())#Output: []
G.add_nodes_from([i for i in range(5)])
print(G.nodes())#Output: [0, 1, 2, 3, 4]

#edges
print(G.out_edges())#Output:[]

print(G.in_edges())#Output:[]

G.add_edge(1,2)
print(G.edges())#Output: [(1, 2)]
print(G.in_edges())#Output: [(1, 2)]
print(G.out_edges())#Output: [(1, 2)]

G.add_edge(0,3)
G.add_edge(2,3)
G.add_edge(3,2)
G.add_edge(3,4)
G.add_edge(4,1)
print(G.out_edges(2))#Output: [(2, 3)]
print(G.out_edges(3))#Output:[(3, 2), (3, 4)]
print(G.in_edges(3))#Output:[(0, 3), (2, 3)]

&lt;/pre&gt;

[[#Top]]

==Points Distribution Method==
&lt;ul&gt;
&lt;li&gt;Initially, all nodes are given equal points&lt;/li&gt;
&lt;li&gt;Rule&lt;/li&gt;
&lt;ul&gt;
&lt;li&gt;Share whatever you have equally with your neighbors&lt;/li&gt;
&lt;/ul&gt;
&lt;li&gt;FOR NODE B:Neighbors: C&lt;/li&gt;
&lt;li&gt;Give all of its points to C&lt;/li&gt;
&lt;li&gt;FOR NODE C:Neighbors: A&lt;/li&gt;
&lt;li&gt;Give all of its points to A&lt;/li&gt;
&lt;li&gt;new point of A=old points of C&lt;/li&gt;
&lt;li&gt;new point of B=(1/2)*old points of A&lt;/li&gt;
&lt;li&gt;new point of C=(1/2)*old points of A+old points of B&lt;/li&gt;
&lt;/ul&gt;

===In Excel, Implementation===
[[File:grEx1.png|600px]]

[[File:grEx2.png|600px]]

[[File:grEx3.png|600px]]

[[#Top]]

After some nodes, points becomes constant, as shown below.

&lt;table class=&quot;tg&quot;&gt;
  &lt;tr&gt;
    &lt;th class=&quot;tg-xldj&quot;&gt;100&lt;/th&gt;
    &lt;th class=&quot;tg-xldj&quot;&gt;100&lt;/th&gt;
    &lt;th class=&quot;tg-xldj&quot;&gt;100&lt;/th&gt;
    &lt;th class=&quot;tg-xldj&quot;&gt; &lt;/th&gt;
    &lt;th class=&quot;tg-xldj&quot;&gt;300&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;100&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;50&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;150&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;150&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;50&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;100&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;100&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;75&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;125&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;125&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;50&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;125&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;125&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;62.5&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;112.5&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;112.5&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;62.5&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;125&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;125&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;56.25&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;118.75&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;118.75&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;62.5&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;118.75&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;118.75&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;59.375&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;121.875&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;121.875&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;59.375&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;118.75&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;118.75&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;60.9375&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;120.3125&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;120.3125&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;59.375&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;120.3125&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;120.3125&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;60.15625&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;119.5313&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;119.5313&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;60.15625&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;120.3125&lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-xldj&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.3125&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;59.76563&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9219&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9219&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60.15625&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9219&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9219&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;59.96094&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.1172&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.1172&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;59.96094&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9219&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9219&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60.05859&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0195&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0195&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;59.96094&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0195&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0195&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60.00977&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9707&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9707&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60.00977&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0195&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0195&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;59.98535&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9951&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9951&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60.00977&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9951&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9951&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;59.99756&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0073&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0073&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;59.99756&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9951&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9951&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60.00366&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0012&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0012&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;59.99756&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0012&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0012&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60.00061&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9982&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9982&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60.00061&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0012&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0012&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;59.99908&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9997&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9997&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60.00061&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9997&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9997&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;59.99985&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0005&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0005&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;59.99985&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9997&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9997&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60.00023&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0001&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0001&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;59.99985&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0001&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0001&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60.00004&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9999&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;119.9999&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60.00004&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0001&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120.0001&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;59.99994&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60.00004&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;59.99999&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;59.99999&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60.00001&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;59.99999&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;60&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;120&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt; &lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;300&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;

[[#Top]]

===Directed Graph===
&lt;pre&gt;
import networkx as nx
import random
import matplotlib.pyplot as plt

def add_edges():
    nodes=list(G.nodes())
    for s in nodes:
        for t in nodes:
            if s!=t:
                r=random.random()
                if r&lt;=0.5:
                    G.add_edge(s,t)
    return G

#create a directed graph
G=nx.DiGraph()
G.add_nodes_from([i for i in range(10)])
add_edges()
nx.draw(G,with_labels=True)
plt.show()
&lt;/pre&gt;

OUTPUT:

[[File:v12p1.png|600px]]

[[File:v12p2.png|600px]]

[[File:v12p3.png|600px]]

===Point Calculating Program===
&lt;pre&gt;
import networkx as nx
import random
import matplotlib.pyplot as plt

def add_edges():
    nodes=list(G.nodes())
    for s in nodes:
        for t in nodes:
            if s!=t:
                r=random.random()
                if r&lt;=0.5:
                    G.add_edge(s,t)
    return G


def assign_points(G):
    nodes=list(G.nodes())
    p=[]
    for each in nodes:
        p.append(100)
    return p

def distribute_points(G,points):
    nodes=list(G.nodes())
    new_points=[]
    for i in range(len(nodes)):
        new_points.append(0)

    for n in nodes:
        out=list(G.out_edges(n))
        if len(out)==0:
            new_points[n]=new_points[n]+points[n]
        else:
            share=points[n]/len(out)
            for (src,tgt) in out:
                new_points[tgt]=new_points[tgt]+share
    return  new_points                

def keep_distributing(points,G):
    while(1):
        new_points=distribute_points(G,points)
        print(new_points)
        points=new_points
        stop=input(&quot;Press # to stop or any other key to continue&quot;)
        if stop=='#':
            break
    return new_points

#create a directed graph
G=nx.DiGraph()
G.add_nodes_from([i for i in range(10)])
add_edges()
nx.draw(G,with_labels=True)
plt.show()

#assign initial points
points=assign_points(G)

#keep distributing
final_points=keep_distributing(points,G)

&lt;/pre&gt;

Output:

[[File:v12p4.png]]

[[File:v12p5.png]]

==Complete page rank using point calculation ==
&lt;pre&gt;
import networkx as nx
import random
import matplotlib.pyplot as plt

def add_edges():
    nodes=list(G.nodes())
    for s in nodes:
        for t in nodes:
            if s!=t:
                r=random.random()
                if r&lt;=0.5:
                    G.add_edge(s,t)
    return G


def assign_points(G):
    nodes=list(G.nodes())
    p=[]
    for each in nodes:
        p.append(100)
    return p

def distribute_points(G,points):
    nodes=list(G.nodes())
    new_points=[]
    for i in range(len(nodes)):
        new_points.append(0)

    for n in nodes:
        out=list(G.out_edges(n))
        if len(out)==0:
            new_points[n]=new_points[n]+points[n]
        else:
            share=points[n]/len(out)
            for (src,tgt) in out:
                new_points[tgt]=new_points[tgt]+share
    return  new_points                

def keep_distributing(points,G):
    while(1):
        new_points=distribute_points(G,points)
        print(new_points)
        points=new_points
        stop=input(&quot;Press # to stop or any other key to continue&quot;)
        if stop=='#':
            break
    return new_points


def rank_by_points(points):
    d={}
    for i in range(len(points)):
        d[i]=points[i]
    print(sorted(d.items(),key=lambda f:f[1]))
    

#create a directed graph
G=nx.DiGraph()
G.add_nodes_from([i for i in range(10)])
add_edges()
nx.draw(G,with_labels=True)
plt.show()

#assign initial points
points=assign_points(G)

#keep distributing
final_points=keep_distributing(points,G)
rank_by_points(final_points)

#default networkx function
result = nx.pagerank(G)
print(sorted(result.items(),key=lambda f:f[1]))

&lt;/pre&gt;

Output:

[[File:finalrank.png]]

[[File:finalout.png]]


==Last Program==
Data File: page_rank.txt provided by Simran mam
===page_rank.txt file===
&lt;pre&gt;
1 2

1 3

1 4

1 5

1 6

7 8

7 9

7 6

7 5

7 4

7 1

7 10

11 12

11 13

11 6

11 14

15 10

15 16

15 18

15 6

15 17

15 13

13 6

13 4

13 14

13 18

20 21

20 22

20 23

20 24

21 17

21 10

21 18

21 25

6 13

6 7

6 12

6 18

2 3

2 12

2 1

2 20

2 13

5 12

5 9

5 6

5 7

5 11

4 13

4 19

4 22

4 7

9 12

9 5

9 6

9 13

9 16

16 24

16 15

16 9

16 4

16 22

12 6

12 2

12 23

18 17

18 15

18 3

18 19

18 6

24 13

24 18

24 16

24 25

24 20

23 20

23 14

23 12

23 10

23 5

10 15

10 24

10 12

10 7

10 21

25 24

25 3

25 11

25 13

25 22

22 3

22 21

22 16

22 8

22 15

14 7

14 18

14 16

4 21

14 4

3 1

3 10

3 8

3 18

3 22

17 18

17 10

17 21

17 15

17 3
&lt;/pre&gt;
===program code===
&lt;pre&gt;
import networkx as nx
import matplotlib.pyplot as plt
G=nx.read_edgelist(r&quot;page_rank.txt&quot;,create_using=nx.DiGraph(),nodetype=int)
nx.draw(G,with_labels=True)
plt.show()

#calling point calculation algorithm
#Out program where, functions are defined
from v12p import *

add_edges(G)

#assign initial points
points=assign_points(G)

#keep distributing
final_points=keep_distributing(points,G)
rank_by_points(final_points)

#default networkx function
result = nx.pagerank(G)
print(sorted(result.items(),key=lambda f:f[1]))
&lt;/pre&gt;

[[File:lastOutput.png]]

Output:

=Collatz Conjecture=
Taught by Sudarshan sir and Amit sir, and Edited by Ms. Ami Tusharkant Choksi

If a number is even, divide it by ''2'', if it is odd, make multiply it by ''3'' and add ''1'', till you get ''1''. This simple problem is called, ''Collatz Conjecture''. 

[[File:collatz1.png|600px]]

[[File:collatz2.png|600px]]

[[File:collatz3.png|600px]]

[[File:collatz4.png|600px]]

[[File:collatz5.png|600px]]

Number is bigger doesn't mean more iterations are required. One can notice, from the output of the following program. 



The program to implement the same is as follows:
==Program==
&lt;pre&gt;
#collatz conjecture
#if num is even, divide it by 2
#if num is odd, new number is equal to 3n+1


def checkNum(num):
    iterations=0
    while(num!=1):
        if(num%2==0):
            num=int(num/2)            
        else:
            num = 3*num+1
        iterations+=1
        

    print(num,iterations)


#checkNum(12)#Output: 1 9
#checkNum(26)#Output: 1 10
checkNum(2000)#Output: 1 112
&lt;/pre&gt;

&lt;pre&gt;

#recursive approach

def checkNum(num):
    if num==1:
        return 1
    elif num%2==0:
        return checkNum(num/2)+1
    else:
        return checkNum(3*num +1)+1


output:
checkNum(26)
Out[27]: 10
checkNum(5000)
Out[28]: 28
&lt;/pre&gt;

==Program adding statement to print all iterations==
&lt;pre&gt;
def checkNum(num):
    iterations=1
    while(num!=1):
        if(num%2==0):
            num=int(num/2)            
        else:
            num = 3*num+1
        print(iterations,&quot;:&quot;,num)
        iterations+=1
        

    print(num,iterations)
&lt;/pre&gt;
==Output==
===For checkNum(2000)===
&lt;pre&gt;
1 : 1000
2 : 500
3 : 250
4 : 125
5 : 376
6 : 188
7 : 94
8 : 47
9 : 142
10 : 71
11 : 214
12 : 107
13 : 322
14 : 161
15 : 484
16 : 242
17 : 121
18 : 364
19 : 182
20 : 91
21 : 274
22 : 137
23 : 412
24 : 206
25 : 103
26 : 310
27 : 155
28 : 466
29 : 233
30 : 700
31 : 350
32 : 175
33 : 526
34 : 263
35 : 790
36 : 395
37 : 1186
38 : 593
39 : 1780
40 : 890
41 : 445
42 : 1336
43 : 668
44 : 334
45 : 167
46 : 502
47 : 251
48 : 754
49 : 377
50 : 1132
51 : 566
52 : 283
53 : 850
54 : 425
55 : 1276
56 : 638
57 : 319
58 : 958
59 : 479
60 : 1438
61 : 719
62 : 2158
63 : 1079
64 : 3238
65 : 1619
66 : 4858
67 : 2429
68 : 7288
69 : 3644
70 : 1822
71 : 911
72 : 2734
73 : 1367
74 : 4102
75 : 2051
76 : 6154
77 : 3077
78 : 9232
79 : 4616
80 : 2308
81 : 1154
82 : 577
83 : 1732
84 : 866
85 : 433
86 : 1300
87 : 650
88 : 325
89 : 976
90 : 488
91 : 244
92 : 122
93 : 61
94 : 184
95 : 92
96 : 46
97 : 23
98 : 70
99 : 35
100 : 106
101 : 53
102 : 160
103 : 80
104 : 40
105 : 20
106 : 10
107 : 5
108 : 16
109 : 8
110 : 4
111 : 2
112 : 1
1 113
&lt;/pre&gt;

===For checkNum(5000)===
&lt;pre&gt;
1 : 2500
2 : 1250
3 : 625
4 : 1876
5 : 938
6 : 469
7 : 1408
8 : 704
9 : 352
10 : 176
11 : 88
12 : 44
13 : 22
14 : 11
15 : 34
16 : 17
17 : 52
18 : 26
19 : 13
20 : 40
21 : 20
22 : 10
23 : 5
24 : 16
25 : 8
26 : 4
27 : 2
28 : 1
1 29
&lt;/pre&gt;
===For checkNum(25000000)===
&lt;pre&gt;
1 : 12500000
2 : 6250000
3 : 3125000
4 : 1562500
5 : 781250
6 : 390625
7 : 1171876
8 : 585938
9 : 292969
10 : 878908
11 : 439454
12 : 219727
13 : 659182
14 : 329591
15 : 988774
16 : 494387
17 : 1483162
18 : 741581
19 : 2224744
20 : 1112372
21 : 556186
22 : 278093
23 : 834280
24 : 417140
25 : 208570
26 : 104285
27 : 312856
28 : 156428
29 : 78214
30 : 39107
31 : 117322
32 : 58661
33 : 175984
34 : 87992
35 : 43996
36 : 21998
37 : 10999
38 : 32998
39 : 16499
40 : 49498
41 : 24749
42 : 74248
43 : 37124
44 : 18562
45 : 9281
46 : 27844
47 : 13922
48 : 6961
49 : 20884
50 : 10442
51 : 5221
52 : 15664
53 : 7832
54 : 3916
55 : 1958
56 : 979
57 : 2938
58 : 1469
59 : 4408
60 : 2204
61 : 1102
62 : 551
63 : 1654
64 : 827
65 : 2482
66 : 1241
67 : 3724
68 : 1862
69 : 931
70 : 2794
71 : 1397
72 : 4192
73 : 2096
74 : 1048
75 : 524
76 : 262
77 : 131
78 : 394
79 : 197
80 : 592
81 : 296
82 : 148
83 : 74
84 : 37
85 : 112
86 : 56
87 : 28
88 : 14
89 : 7
90 : 22
91 : 11
92 : 34
93 : 17
94 : 52
95 : 26
96 : 13
97 : 40
98 : 20
99 : 10
100 : 5
101 : 16
102 : 8
103 : 4
104 : 2
105 : 1
1 106
&lt;/pre&gt;

Happy Life ahead!!!

[[File:end1.png]]</text>
      <sha1>k1yo54115dxmtp1x7wfdce3rteb3nm0</sha1>
    </revision>
  </page>
</mediawiki>
