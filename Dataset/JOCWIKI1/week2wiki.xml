<mediawiki xmlns="http://www.mediawiki.org/xml/export-0.10/" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.mediawiki.org/xml/export-0.10/ http://www.mediawiki.org/xml/export-0.10.xsd" version="0.10" xml:lang="en">
  <siteinfo>
    <sitename>JOCWiki</sitename>
    <dbname>joc_wiki</dbname>
    <base>http://sccilabs.org/jocwiki/index.php/Main_Page</base>
    <generator>MediaWiki 1.30.0</generator>
    <case>first-letter</case>
    <namespaces>
      <namespace key="-2" case="first-letter">Media</namespace>
      <namespace key="-1" case="first-letter">Special</namespace>
      <namespace key="0" case="first-letter" />
      <namespace key="1" case="first-letter">Talk</namespace>
      <namespace key="2" case="first-letter">User</namespace>
      <namespace key="3" case="first-letter">User talk</namespace>
      <namespace key="4" case="first-letter">JOCWiki</namespace>
      <namespace key="5" case="first-letter">JOCWiki talk</namespace>
      <namespace key="6" case="first-letter">File</namespace>
      <namespace key="7" case="first-letter">File talk</namespace>
      <namespace key="8" case="first-letter">MediaWiki</namespace>
      <namespace key="9" case="first-letter">MediaWiki talk</namespace>
      <namespace key="10" case="first-letter">Template</namespace>
      <namespace key="11" case="first-letter">Template talk</namespace>
      <namespace key="12" case="first-letter">Help</namespace>
      <namespace key="13" case="first-letter">Help talk</namespace>
      <namespace key="14" case="first-letter">Category</namespace>
      <namespace key="15" case="first-letter">Category talk</namespace>
      <namespace key="828" case="first-letter">Module</namespace>
      <namespace key="829" case="first-letter">Module talk</namespace>
      <namespace key="2300" case="first-letter">Gadget</namespace>
      <namespace key="2301" case="first-letter">Gadget talk</namespace>
      <namespace key="2302" case="case-sensitive">Gadget definition</namespace>
      <namespace key="2303" case="case-sensitive">Gadget definition talk</namespace>
      <namespace key="2600" case="first-letter">Topic</namespace>
    </namespaces>
  </siteinfo>
  <page>
    <title>Lecture Notes: Week 2</title>
    <ns>0</ns>
    <id>138</id>
    <revision>
      <id>435</id>
      <timestamp>2018-08-06T12:09:34Z</timestamp>
      <contributor>
        <username>Simmi</username>
        <id>18</id>
      </contributor>
      <comment>Created page with &quot;==Introduction to Python== Python is a widely used programming language which allows programmers to write the program in fewer lines of code. It was designed by Guido van Ross...&quot;</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="938">==Introduction to Python==
Python is a widely used programming language which allows programmers to write the program in fewer lines of code. It was designed by Guido van Rossum in 1991. Python uses an interpreter instead of compiler. Here, in our course we will be using Spyder IDE. Spyder is an integrated development environment with editing options to assist the programmers in writing programs. Spyder IDE is divided into two panes, one is console and other one is where program is written.

==How to run in Spyder IDE?==
Go to Run on the menu bar. Click Run-&gt;Run.

==Print statements==
Print statements help to display output on console. 

===Syntax===
print()

===How to print a message?===
In order to print a message in Python, write print(&quot;message&quot;).

===How to print a variable?===
In order to print the value of a variable in python, first initialise the variable and then write print(variable_name)
For example :
x=2
print(x)</text>
      <sha1>n7f5un51f1j44o098qi9l0jf394cvww</sha1>
    </revision>
    <revision>
      <id>436</id>
      <parentid>435</parentid>
      <timestamp>2018-08-06T12:23:30Z</timestamp>
      <contributor>
        <username>Simmi</username>
        <id>18</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1627">==Introduction to Python==
Python is a widely used programming language which allows programmers to write the program in fewer lines of code. It was designed by Guido van Rossum in 1991. Python uses an interpreter instead of compiler. Here, in our course we will be using Spyder IDE. Spyder is an integrated development environment with editing options to assist the programmers in writing programs. Spyder IDE is divided into two panes, one is console and other one is where program is written.

==How to run in Spyder IDE?==
Go to Run on the menu bar. Click Run-&gt;Run.

==Print statements==
Print statements help to display output on console. 

===Syntax===
print()

===How to print a message?===
In order to print a message in Python, write print(&quot;message&quot;).

==Variables==
Variables are used to store some values. Values can be strings, integers or decimal values. 

===How to print a variable?===
In order to print the value of a variable in python, first initialise the variable and then write print(variable_name)
For example :
 x=2
 print(x)

===Some facts about Variables===
* If you want to print variable name with a message, you can use , operator. For example : I want to print Hello Simran and Simran has been stored in a variable called ''name''.
 name=&quot;Simran&quot;
 print(&quot;Hello&quot;,name)
* If you change the value of a variable, it will store the latest value. For example :
 name=&quot;Simran&quot;
 name=&quot;Amit&quot;
If you will execute the command ''print(name)'', Amit will be displayed.
* You can perform operations like addition, subtraction etc only on integral variables.

==How to execute couple of instructions on console?==</text>
      <sha1>r2w94ogflqfj9uztztq8llml5xheazl</sha1>
    </revision>
    <revision>
      <id>437</id>
      <parentid>436</parentid>
      <timestamp>2018-08-06T12:24:10Z</timestamp>
      <contributor>
        <username>Simmi</username>
        <id>18</id>
      </contributor>
      <comment>/* How to print a variable? */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1629">==Introduction to Python==
Python is a widely used programming language which allows programmers to write the program in fewer lines of code. It was designed by Guido van Rossum in 1991. Python uses an interpreter instead of compiler. Here, in our course we will be using Spyder IDE. Spyder is an integrated development environment with editing options to assist the programmers in writing programs. Spyder IDE is divided into two panes, one is console and other one is where program is written.

==How to run in Spyder IDE?==
Go to Run on the menu bar. Click Run-&gt;Run.

==Print statements==
Print statements help to display output on console. 

===Syntax===
print()

===How to print a message?===
In order to print a message in Python, write print(&quot;message&quot;).

==Variables==
Variables are used to store some values. Values can be strings, integers or decimal values. 

===How to print a variable?===
In order to print the value of a variable in python, first initialise the variable and then write print(variable_name)
For example :
  x=2
  print(x)

===Some facts about Variables===
* If you want to print variable name with a message, you can use , operator. For example : I want to print Hello Simran and Simran has been stored in a variable called ''name''.
 name=&quot;Simran&quot;
 print(&quot;Hello&quot;,name)
* If you change the value of a variable, it will store the latest value. For example :
 name=&quot;Simran&quot;
 name=&quot;Amit&quot;
If you will execute the command ''print(name)'', Amit will be displayed.
* You can perform operations like addition, subtraction etc only on integral variables.

==How to execute couple of instructions on console?==</text>
      <sha1>ptf6qg2iq1dycax7b3805xmarqpyww9</sha1>
    </revision>
    <revision>
      <id>438</id>
      <parentid>437</parentid>
      <timestamp>2018-08-06T12:24:38Z</timestamp>
      <contributor>
        <username>Simmi</username>
        <id>18</id>
      </contributor>
      <comment>/* Some facts about Variables */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1631">==Introduction to Python==
Python is a widely used programming language which allows programmers to write the program in fewer lines of code. It was designed by Guido van Rossum in 1991. Python uses an interpreter instead of compiler. Here, in our course we will be using Spyder IDE. Spyder is an integrated development environment with editing options to assist the programmers in writing programs. Spyder IDE is divided into two panes, one is console and other one is where program is written.

==How to run in Spyder IDE?==
Go to Run on the menu bar. Click Run-&gt;Run.

==Print statements==
Print statements help to display output on console. 

===Syntax===
print()

===How to print a message?===
In order to print a message in Python, write print(&quot;message&quot;).

==Variables==
Variables are used to store some values. Values can be strings, integers or decimal values. 

===How to print a variable?===
In order to print the value of a variable in python, first initialise the variable and then write print(variable_name)
For example :
  x=2
  print(x)

===Some facts about Variables===
* If you want to print variable name with a message, you can use , operator. For example : I want to print Hello Simran and Simran has been stored in a variable called ''name''.
  name=&quot;Simran&quot;
  print(&quot;Hello&quot;,name)
* If you change the value of a variable, it will store the latest value. For example :
 name=&quot;Simran&quot;
 name=&quot;Amit&quot;
If you will execute the command ''print(name)'', Amit will be displayed.
* You can perform operations like addition, subtraction etc only on integral variables.

==How to execute couple of instructions on console?==</text>
      <sha1>nf7y6tngo57urf5k1v9aeyxl8tnxu9e</sha1>
    </revision>
    <revision>
      <id>439</id>
      <parentid>438</parentid>
      <timestamp>2018-08-06T12:25:04Z</timestamp>
      <contributor>
        <username>Simmi</username>
        <id>18</id>
      </contributor>
      <comment>/* Some facts about Variables */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1634">==Introduction to Python==
Python is a widely used programming language which allows programmers to write the program in fewer lines of code. It was designed by Guido van Rossum in 1991. Python uses an interpreter instead of compiler. Here, in our course we will be using Spyder IDE. Spyder is an integrated development environment with editing options to assist the programmers in writing programs. Spyder IDE is divided into two panes, one is console and other one is where program is written.

==How to run in Spyder IDE?==
Go to Run on the menu bar. Click Run-&gt;Run.

==Print statements==
Print statements help to display output on console. 

===Syntax===
print()

===How to print a message?===
In order to print a message in Python, write print(&quot;message&quot;).

==Variables==
Variables are used to store some values. Values can be strings, integers or decimal values. 

===How to print a variable?===
In order to print the value of a variable in python, first initialise the variable and then write print(variable_name)
For example :
  x=2
  print(x)

===Some facts about Variables===
* If you want to print variable name with a message, you can use , operator. For example : I want to print Hello Simran and Simran has been stored in a variable called ''name''.
  name=&quot;Simran&quot;
  print(&quot;Hello&quot;,name)
* If you change the value of a variable, it will store the latest value. For example :
  name=&quot;Simran&quot;
  name=&quot;Amit&quot;
 If you will execute the command ''print(name)'', Amit will be displayed.
* You can perform operations like addition, subtraction etc only on integral variables.

==How to execute couple of instructions on console?==</text>
      <sha1>eqvlmcxk8aajo9pqgchkycp1pbbhzax</sha1>
    </revision>
    <revision>
      <id>440</id>
      <parentid>439</parentid>
      <timestamp>2018-08-06T12:25:26Z</timestamp>
      <contributor>
        <username>Simmi</username>
        <id>18</id>
      </contributor>
      <comment>/* Some facts about Variables */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1635">==Introduction to Python==
Python is a widely used programming language which allows programmers to write the program in fewer lines of code. It was designed by Guido van Rossum in 1991. Python uses an interpreter instead of compiler. Here, in our course we will be using Spyder IDE. Spyder is an integrated development environment with editing options to assist the programmers in writing programs. Spyder IDE is divided into two panes, one is console and other one is where program is written.

==How to run in Spyder IDE?==
Go to Run on the menu bar. Click Run-&gt;Run.

==Print statements==
Print statements help to display output on console. 

===Syntax===
print()

===How to print a message?===
In order to print a message in Python, write print(&quot;message&quot;).

==Variables==
Variables are used to store some values. Values can be strings, integers or decimal values. 

===How to print a variable?===
In order to print the value of a variable in python, first initialise the variable and then write print(variable_name)
For example :
  x=2
  print(x)

===Some facts about Variables===
* If you want to print variable name with a message, you can use , operator. For example : I want to print Hello Simran and Simran has been stored in a variable called ''name''.
  name=&quot;Simran&quot;
  print(&quot;Hello&quot;,name)
* If you change the value of a variable, it will store the latest value. For example :
  name=&quot;Simran&quot;
  name=&quot;Amit&quot;
  If you will execute the command ''print(name)'', Amit will be displayed.
* You can perform operations like addition, subtraction etc only on integral variables.

==How to execute couple of instructions on console?==</text>
      <sha1>053ndjsrvxk6u301ew2dmr7hg3otchq</sha1>
    </revision>
    <revision>
      <id>441</id>
      <parentid>440</parentid>
      <timestamp>2018-08-06T13:08:25Z</timestamp>
      <contributor>
        <username>Simmi</username>
        <id>18</id>
      </contributor>
      <comment>/* How to execute couple of instructions on console? */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="2708">==Introduction to Python==
Python is a widely used programming language which allows programmers to write the program in fewer lines of code. It was designed by Guido van Rossum in 1991. Python uses an interpreter instead of compiler. Here, in our course we will be using Spyder IDE. Spyder is an integrated development environment with editing options to assist the programmers in writing programs. Spyder IDE is divided into two panes, one is console and other one is where program is written.

==How to run in Spyder IDE?==
Go to Run on the menu bar. Click Run-&gt;Run.

==Print statements==
Print statements help to display output on console. 

===Syntax===
print()

===How to print a message?===
In order to print a message in Python, write print(&quot;message&quot;).

==Variables==
Variables are used to store some values. Values can be strings, integers or decimal values. 

===How to print a variable?===
In order to print the value of a variable in python, first initialise the variable and then write print(variable_name)
For example :
  x=2
  print(x)

===Some facts about Variables===
* If you want to print variable name with a message, you can use , operator. For example : I want to print Hello Simran and Simran has been stored in a variable called ''name''.
  name=&quot;Simran&quot;
  print(&quot;Hello&quot;,name)
* If you change the value of a variable, it will store the latest value. For example :
  name=&quot;Simran&quot;
  name=&quot;Amit&quot;
  If you will execute the command ''print(name)'', Amit will be displayed.
* You can perform operations like addition, subtraction etc only on integral variables.

==How to execute couple of instructions on console?==
You can execute couple of instructions on console using ;. Write Statement 1;Statement 2;......and then press ''Enter''.

==How to take input from the user?==
We can take input from the user using ''input'' function. For Example : You want the user to input variable ''x'', then write x=input(&quot;Enter the value of x&quot;) and execute.

==If statement==
If statement is used to execute set of two contrary statements based on a condition. 

===Syntax===
If (Condition):
 Statement 1
else:
 Statement 2

If ''Condition'' is true then ''Statement 1'' will be executed otherwise ''Statement 2'' will be executed.

==Loops==
Loops in a programming languages are used to execute set of repetitive statements. For loop and while loop are used extensively to execute a set of looping instructions.

===Syntax===
for(initialisation;condition;increment)
   Statement

intialisation
while(condition)
 Statement
 increment

==Importance of Indentation in Python==
Indentation is used to indicate to what block of statements belong. Indentation of blocks convey program structure in Python.</text>
      <sha1>k862w3mig30wlr18ujgjz710jlq7mu5</sha1>
    </revision>
    <revision>
      <id>446</id>
      <parentid>441</parentid>
      <timestamp>2018-08-06T16:10:11Z</timestamp>
      <contributor>
        <username>Simmi</username>
        <id>18</id>
      </contributor>
      <comment>/* How to run in Spyder IDE? */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="2718">==Introduction to Python==
Python is a widely used programming language which allows programmers to write the program in fewer lines of code. It was designed by Guido van Rossum in 1991. Python uses an interpreter instead of compiler. Here, in our course we will be using Spyder IDE. Spyder is an integrated development environment with editing options to assist the programmers in writing programs. Spyder IDE is divided into two panes, one is console and other one is where program is written.

==How to run a program in Spyder IDE?==
Go to Run on the menu bar. Click Run-&gt;Run.

==Print statements==
Print statements help to display output on console. 

===Syntax===
print()

===How to print a message?===
In order to print a message in Python, write print(&quot;message&quot;).

==Variables==
Variables are used to store some values. Values can be strings, integers or decimal values. 

===How to print a variable?===
In order to print the value of a variable in python, first initialise the variable and then write print(variable_name)
For example :
  x=2
  print(x)

===Some facts about Variables===
* If you want to print variable name with a message, you can use , operator. For example : I want to print Hello Simran and Simran has been stored in a variable called ''name''.
  name=&quot;Simran&quot;
  print(&quot;Hello&quot;,name)
* If you change the value of a variable, it will store the latest value. For example :
  name=&quot;Simran&quot;
  name=&quot;Amit&quot;
  If you will execute the command ''print(name)'', Amit will be displayed.
* You can perform operations like addition, subtraction etc only on integral variables.

==How to execute couple of instructions on console?==
You can execute couple of instructions on console using ;. Write Statement 1;Statement 2;......and then press ''Enter''.

==How to take input from the user?==
We can take input from the user using ''input'' function. For Example : You want the user to input variable ''x'', then write x=input(&quot;Enter the value of x&quot;) and execute.

==If statement==
If statement is used to execute set of two contrary statements based on a condition. 

===Syntax===
If (Condition):
 Statement 1
else:
 Statement 2

If ''Condition'' is true then ''Statement 1'' will be executed otherwise ''Statement 2'' will be executed.

==Loops==
Loops in a programming languages are used to execute set of repetitive statements. For loop and while loop are used extensively to execute a set of looping instructions.

===Syntax===
for(initialisation;condition;increment)
   Statement

intialisation
while(condition)
 Statement
 increment

==Importance of Indentation in Python==
Indentation is used to indicate to what block of statements belong. Indentation of blocks convey program structure in Python.</text>
      <sha1>8juix79ew9ekqr4u39vjnl94hljxke9</sha1>
    </revision>
    <revision>
      <id>447</id>
      <parentid>446</parentid>
      <timestamp>2018-08-06T16:54:19Z</timestamp>
      <contributor>
        <username>Simmi</username>
        <id>18</id>
      </contributor>
      <comment>/* How to take input from the user? */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="2806">==Introduction to Python==
Python is a widely used programming language which allows programmers to write the program in fewer lines of code. It was designed by Guido van Rossum in 1991. Python uses an interpreter instead of compiler. Here, in our course we will be using Spyder IDE. Spyder is an integrated development environment with editing options to assist the programmers in writing programs. Spyder IDE is divided into two panes, one is console and other one is where program is written.

==How to run a program in Spyder IDE?==
Go to Run on the menu bar. Click Run-&gt;Run.

==Print statements==
Print statements help to display output on console. 

===Syntax===
print()

===How to print a message?===
In order to print a message in Python, write print(&quot;message&quot;).

==Variables==
Variables are used to store some values. Values can be strings, integers or decimal values. 

===How to print a variable?===
In order to print the value of a variable in python, first initialise the variable and then write print(variable_name)
For example :
  x=2
  print(x)

===Some facts about Variables===
* If you want to print variable name with a message, you can use , operator. For example : I want to print Hello Simran and Simran has been stored in a variable called ''name''.
  name=&quot;Simran&quot;
  print(&quot;Hello&quot;,name)
* If you change the value of a variable, it will store the latest value. For example :
  name=&quot;Simran&quot;
  name=&quot;Amit&quot;
  If you will execute the command ''print(name)'', Amit will be displayed.
* You can perform operations like addition, subtraction etc only on integral variables.

==How to execute couple of instructions on console?==
You can execute couple of instructions on console using ;. Write Statement 1;Statement 2;......and then press ''Enter''.

==How to take input from the user?==
We can take input from the user using ''input'' function. For Example : You want the user to input variable ''x'', then write x=input(&quot;Enter the value of x&quot;) and execute. Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNkVLCxZw_jcgyS-bmrIVSP

==If statement==
If statement is used to execute set of two contrary statements based on a condition. 

===Syntax===
If (Condition):
 Statement 1
else:
 Statement 2

If ''Condition'' is true then ''Statement 1'' will be executed otherwise ''Statement 2'' will be executed.

==Loops==
Loops in a programming languages are used to execute set of repetitive statements. For loop and while loop are used extensively to execute a set of looping instructions.

===Syntax===
for(initialisation;condition;increment)
   Statement

intialisation
while(condition)
 Statement
 increment

==Importance of Indentation in Python==
Indentation is used to indicate to what block of statements belong. Indentation of blocks convey program structure in Python.</text>
      <sha1>r6erj27701qs1o7ovd2hpyefyzsx7b9</sha1>
    </revision>
    <revision>
      <id>448</id>
      <parentid>447</parentid>
      <timestamp>2018-08-06T16:59:42Z</timestamp>
      <contributor>
        <username>Simmi</username>
        <id>18</id>
      </contributor>
      <comment>/* If statement */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="2895">==Introduction to Python==
Python is a widely used programming language which allows programmers to write the program in fewer lines of code. It was designed by Guido van Rossum in 1991. Python uses an interpreter instead of compiler. Here, in our course we will be using Spyder IDE. Spyder is an integrated development environment with editing options to assist the programmers in writing programs. Spyder IDE is divided into two panes, one is console and other one is where program is written.

==How to run a program in Spyder IDE?==
Go to Run on the menu bar. Click Run-&gt;Run.

==Print statements==
Print statements help to display output on console. 

===Syntax===
print()

===How to print a message?===
In order to print a message in Python, write print(&quot;message&quot;).

==Variables==
Variables are used to store some values. Values can be strings, integers or decimal values. 

===How to print a variable?===
In order to print the value of a variable in python, first initialise the variable and then write print(variable_name)
For example :
  x=2
  print(x)

===Some facts about Variables===
* If you want to print variable name with a message, you can use , operator. For example : I want to print Hello Simran and Simran has been stored in a variable called ''name''.
  name=&quot;Simran&quot;
  print(&quot;Hello&quot;,name)
* If you change the value of a variable, it will store the latest value. For example :
  name=&quot;Simran&quot;
  name=&quot;Amit&quot;
  If you will execute the command ''print(name)'', Amit will be displayed.
* You can perform operations like addition, subtraction etc only on integral variables.

==How to execute couple of instructions on console?==
You can execute couple of instructions on console using ;. Write Statement 1;Statement 2;......and then press ''Enter''.

==How to take input from the user?==
We can take input from the user using ''input'' function. For Example : You want the user to input variable ''x'', then write x=input(&quot;Enter the value of x&quot;) and execute. Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNkVLCxZw_jcgyS-bmrIVSP

==If statement==
If statement is used to execute set of two contrary statements based on a condition. 

===Syntax===
If (Condition):
 Statement 1
else:
 Statement 2

If ''Condition'' is true then ''Statement 1'' will be executed otherwise ''Statement 2'' will be executed.

Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNhHmg3SkK1uiutigcAbH9K

==Loops==
Loops in a programming languages are used to execute set of repetitive statements. For loop and while loop are used extensively to execute a set of looping instructions.

===Syntax===
for(initialisation;condition;increment)
   Statement

intialisation
while(condition)
 Statement
 increment

==Importance of Indentation in Python==
Indentation is used to indicate to what block of statements belong. Indentation of blocks convey program structure in Python.</text>
      <sha1>ol4sneiefw1sosihmc3gnjq8m52fajp</sha1>
    </revision>
    <revision>
      <id>449</id>
      <parentid>448</parentid>
      <timestamp>2018-08-06T17:02:44Z</timestamp>
      <contributor>
        <username>Simmi</username>
        <id>18</id>
      </contributor>
      <comment>/* Loops */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="2984">==Introduction to Python==
Python is a widely used programming language which allows programmers to write the program in fewer lines of code. It was designed by Guido van Rossum in 1991. Python uses an interpreter instead of compiler. Here, in our course we will be using Spyder IDE. Spyder is an integrated development environment with editing options to assist the programmers in writing programs. Spyder IDE is divided into two panes, one is console and other one is where program is written.

==How to run a program in Spyder IDE?==
Go to Run on the menu bar. Click Run-&gt;Run.

==Print statements==
Print statements help to display output on console. 

===Syntax===
print()

===How to print a message?===
In order to print a message in Python, write print(&quot;message&quot;).

==Variables==
Variables are used to store some values. Values can be strings, integers or decimal values. 

===How to print a variable?===
In order to print the value of a variable in python, first initialise the variable and then write print(variable_name)
For example :
  x=2
  print(x)

===Some facts about Variables===
* If you want to print variable name with a message, you can use , operator. For example : I want to print Hello Simran and Simran has been stored in a variable called ''name''.
  name=&quot;Simran&quot;
  print(&quot;Hello&quot;,name)
* If you change the value of a variable, it will store the latest value. For example :
  name=&quot;Simran&quot;
  name=&quot;Amit&quot;
  If you will execute the command ''print(name)'', Amit will be displayed.
* You can perform operations like addition, subtraction etc only on integral variables.

==How to execute couple of instructions on console?==
You can execute couple of instructions on console using ;. Write Statement 1;Statement 2;......and then press ''Enter''.

==How to take input from the user?==
We can take input from the user using ''input'' function. For Example : You want the user to input variable ''x'', then write x=input(&quot;Enter the value of x&quot;) and execute. Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNkVLCxZw_jcgyS-bmrIVSP

==If statement==
If statement is used to execute set of two contrary statements based on a condition. 

===Syntax===
If (Condition):
 Statement 1
else:
 Statement 2

If ''Condition'' is true then ''Statement 1'' will be executed otherwise ''Statement 2'' will be executed.

Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNhHmg3SkK1uiutigcAbH9K

==Loops==
Loops in a programming languages are used to execute set of repetitive statements. For loop and while loop are used extensively to execute a set of looping instructions.

===Syntax===
for(initialisation;condition;increment)
   Statement

intialisation
while(condition)
 Statement
 increment

Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNbl5jkVrrw1E5XSvm3GiCI

==Importance of Indentation in Python==
Indentation is used to indicate to what block of statements belong. Indentation of blocks convey program structure in Python.</text>
      <sha1>hakkwzbwhxvzsq6dws5p2tx44gp8bw1</sha1>
    </revision>
    <revision>
      <id>450</id>
      <parentid>449</parentid>
      <timestamp>2018-08-06T17:06:59Z</timestamp>
      <contributor>
        <username>Simmi</username>
        <id>18</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="3039">==Introduction to Python==
Python is a widely used programming language which allows programmers to write the program in fewer lines of code. It was designed by Guido van Rossum in 1991. Python uses an interpreter instead of compiler. Here, in our course we will be using Spyder IDE. Spyder is an integrated development environment with editing options to assist the programmers in writing programs. Spyder IDE is divided into two panes, one is console and other one is where program is written.

==How to run a program in Spyder IDE?==
Go to Run on the menu bar. Click Run-&gt;Run.

==Print statements==
Print statements help to display output on console. 

===Syntax===
print()

===How to print a message?===
In order to print a message in Python, write print(&quot;message&quot;).

==Variables==
Variables are used to store some values. Values can be strings, integers or decimal values. 

===How to print a variable?===
In order to print the value of a variable in python, first initialise the variable and then write print(variable_name)
For example :
  x=2
  print(x)

===Some facts about Variables===
* If you want to print variable name with a message, you can use , operator. For example : I want to print Hello Simran and Simran has been stored in a variable called ''name''.
  name=&quot;Simran&quot;
  print(&quot;Hello&quot;,name)
* If you change the value of a variable, it will store the latest value. For example :
  name=&quot;Simran&quot;
  name=&quot;Amit&quot;
  If you will execute the command ''print(name)'', Amit will be displayed.
* You can perform operations like addition, subtraction etc only on integral variables.

==How to execute couple of instructions on console?==
You can execute couple of instructions on console using ;. Write Statement 1;Statement 2;......and then press ''Enter''.

==How to take input from the user?==
We can take input from the user using ''input'' function. For Example : You want the user to input variable ''x'', then write x=input(&quot;Enter the value of x&quot;) and execute. Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNkVLCxZw_jcgyS-bmrIVSP

==If statement==
If statement is used to execute set of two contrary statements based on a condition. 

===Syntax===
If (Condition):
 Statement 1
else:
 Statement 2

If ''Condition'' is true then ''Statement 1'' will be executed otherwise ''Statement 2'' will be executed.

Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNhHmg3SkK1uiutigcAbH9K

==Loops==
Loops in a programming languages are used to execute set of repetitive statements. For loop and while loop are used extensively to execute a set of looping instructions.

===Syntax===
for(initialisation;condition;increment)
   Statement

intialisation
while(condition)
 Statement
 increment

Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNbl5jkVrrw1E5XSvm3GiCI

==Importance of Indentation in Python==
Indentation is used to indicate to what block of statements belong. Indentation of blocks convey program structure in Python.
{{#ev:youtube|https://youtu.be/gECkqaOwyt0|250|right}}</text>
      <sha1>g0s2dmyne5hnh9dqb3dyaoq6q5bger0</sha1>
    </revision>
    <revision>
      <id>451</id>
      <parentid>450</parentid>
      <timestamp>2018-08-06T17:08:11Z</timestamp>
      <contributor>
        <username>Simmi</username>
        <id>18</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="3094">==Introduction to Python==
Python is a widely used programming language which allows programmers to write the program in fewer lines of code. It was designed by Guido van Rossum in 1991. Python uses an interpreter instead of compiler. Here, in our course we will be using Spyder IDE. Spyder is an integrated development environment with editing options to assist the programmers in writing programs. Spyder IDE is divided into two panes, one is console and other one is where program is written.

==How to run a program in Spyder IDE?==
Go to Run on the menu bar. Click Run-&gt;Run.

==Print statements==
Print statements help to display output on console. 

===Syntax===
print()

===How to print a message?===
In order to print a message in Python, write print(&quot;message&quot;).
{{#ev:youtube|https://youtu.be/gECkqaOwyt0|250|right}}

==Variables==
Variables are used to store some values. Values can be strings, integers or decimal values. 

===How to print a variable?===
In order to print the value of a variable in python, first initialise the variable and then write print(variable_name)
For example :
  x=2
  print(x)

===Some facts about Variables===
* If you want to print variable name with a message, you can use , operator. For example : I want to print Hello Simran and Simran has been stored in a variable called ''name''.
  name=&quot;Simran&quot;
  print(&quot;Hello&quot;,name)
* If you change the value of a variable, it will store the latest value. For example :
  name=&quot;Simran&quot;
  name=&quot;Amit&quot;
  If you will execute the command ''print(name)'', Amit will be displayed.
* You can perform operations like addition, subtraction etc only on integral variables.

==How to execute couple of instructions on console?==
You can execute couple of instructions on console using ;. Write Statement 1;Statement 2;......and then press ''Enter''.

==How to take input from the user?==
We can take input from the user using ''input'' function. For Example : You want the user to input variable ''x'', then write x=input(&quot;Enter the value of x&quot;) and execute. Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNkVLCxZw_jcgyS-bmrIVSP

==If statement==
If statement is used to execute set of two contrary statements based on a condition. 

===Syntax===
If (Condition):
 Statement 1
else:
 Statement 2

If ''Condition'' is true then ''Statement 1'' will be executed otherwise ''Statement 2'' will be executed.

Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNhHmg3SkK1uiutigcAbH9K

==Loops==
Loops in a programming languages are used to execute set of repetitive statements. For loop and while loop are used extensively to execute a set of looping instructions.

===Syntax===
for(initialisation;condition;increment)
   Statement

intialisation
while(condition)
 Statement
 increment

Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNbl5jkVrrw1E5XSvm3GiCI

==Importance of Indentation in Python==
Indentation is used to indicate to what block of statements belong. Indentation of blocks convey program structure in Python.
{{#ev:youtube|https://youtu.be/pmavoW419Yc|250|right}}</text>
      <sha1>dudb3kbjk3bji7llg9ie5nb2o92sr76</sha1>
    </revision>
    <revision>
      <id>452</id>
      <parentid>451</parentid>
      <timestamp>2018-08-06T17:08:47Z</timestamp>
      <contributor>
        <username>Simmi</username>
        <id>18</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="3094">==Introduction to Python==
Python is a widely used programming language which allows programmers to write the program in fewer lines of code. It was designed by Guido van Rossum in 1991. Python uses an interpreter instead of compiler. Here, in our course we will be using Spyder IDE. Spyder is an integrated development environment with editing options to assist the programmers in writing programs. Spyder IDE is divided into two panes, one is console and other one is where program is written.

==How to run a program in Spyder IDE?==
Go to Run on the menu bar. Click Run-&gt;Run.

==Print statements==
Print statements help to display output on console. 
{{#ev:youtube|https://youtu.be/gECkqaOwyt0|250|right}}
===Syntax===
print()

===How to print a message?===
In order to print a message in Python, write print(&quot;message&quot;).


==Variables==
Variables are used to store some values. Values can be strings, integers or decimal values. 

===How to print a variable?===
In order to print the value of a variable in python, first initialise the variable and then write print(variable_name)
For example :
  x=2
  print(x)

===Some facts about Variables===
* If you want to print variable name with a message, you can use , operator. For example : I want to print Hello Simran and Simran has been stored in a variable called ''name''.
  name=&quot;Simran&quot;
  print(&quot;Hello&quot;,name)
* If you change the value of a variable, it will store the latest value. For example :
  name=&quot;Simran&quot;
  name=&quot;Amit&quot;
  If you will execute the command ''print(name)'', Amit will be displayed.
* You can perform operations like addition, subtraction etc only on integral variables.

==How to execute couple of instructions on console?==
You can execute couple of instructions on console using ;. Write Statement 1;Statement 2;......and then press ''Enter''.

==How to take input from the user?==
We can take input from the user using ''input'' function. For Example : You want the user to input variable ''x'', then write x=input(&quot;Enter the value of x&quot;) and execute. Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNkVLCxZw_jcgyS-bmrIVSP

==If statement==
If statement is used to execute set of two contrary statements based on a condition. 

===Syntax===
If (Condition):
 Statement 1
else:
 Statement 2

If ''Condition'' is true then ''Statement 1'' will be executed otherwise ''Statement 2'' will be executed.

Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNhHmg3SkK1uiutigcAbH9K

==Loops==
Loops in a programming languages are used to execute set of repetitive statements. For loop and while loop are used extensively to execute a set of looping instructions.

===Syntax===
for(initialisation;condition;increment)
   Statement

intialisation
while(condition)
 Statement
 increment

Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNbl5jkVrrw1E5XSvm3GiCI

==Importance of Indentation in Python==
Indentation is used to indicate to what block of statements belong. Indentation of blocks convey program structure in Python.
{{#ev:youtube|https://youtu.be/pmavoW419Yc|250|right}}</text>
      <sha1>71z3w3wmfe4296tkykm34xvypds3py7</sha1>
    </revision>
    <revision>
      <id>453</id>
      <parentid>452</parentid>
      <timestamp>2018-08-06T17:11:20Z</timestamp>
      <contributor>
        <username>Simmi</username>
        <id>18</id>
      </contributor>
      <comment>/* Print statements */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="3094">==Introduction to Python==
Python is a widely used programming language which allows programmers to write the program in fewer lines of code. It was designed by Guido van Rossum in 1991. Python uses an interpreter instead of compiler. Here, in our course we will be using Spyder IDE. Spyder is an integrated development environment with editing options to assist the programmers in writing programs. Spyder IDE is divided into two panes, one is console and other one is where program is written.

==How to run a program in Spyder IDE?==
Go to Run on the menu bar. Click Run-&gt;Run.

==Print statements==
Print statements help to display output on console. 
{{#ev:youtube|https://youtu.be/gECkqaOwyt0|250|right}}

===Syntax===
print()

===How to print a message?===
In order to print a message in Python, write print(&quot;message&quot;).

==Variables==
Variables are used to store some values. Values can be strings, integers or decimal values. 

===How to print a variable?===
In order to print the value of a variable in python, first initialise the variable and then write print(variable_name)
For example :
  x=2
  print(x)

===Some facts about Variables===
* If you want to print variable name with a message, you can use , operator. For example : I want to print Hello Simran and Simran has been stored in a variable called ''name''.
  name=&quot;Simran&quot;
  print(&quot;Hello&quot;,name)
* If you change the value of a variable, it will store the latest value. For example :
  name=&quot;Simran&quot;
  name=&quot;Amit&quot;
  If you will execute the command ''print(name)'', Amit will be displayed.
* You can perform operations like addition, subtraction etc only on integral variables.

==How to execute couple of instructions on console?==
You can execute couple of instructions on console using ;. Write Statement 1;Statement 2;......and then press ''Enter''.

==How to take input from the user?==
We can take input from the user using ''input'' function. For Example : You want the user to input variable ''x'', then write x=input(&quot;Enter the value of x&quot;) and execute. Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNkVLCxZw_jcgyS-bmrIVSP

==If statement==
If statement is used to execute set of two contrary statements based on a condition. 

===Syntax===
If (Condition):
 Statement 1
else:
 Statement 2

If ''Condition'' is true then ''Statement 1'' will be executed otherwise ''Statement 2'' will be executed.

Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNhHmg3SkK1uiutigcAbH9K

==Loops==
Loops in a programming languages are used to execute set of repetitive statements. For loop and while loop are used extensively to execute a set of looping instructions.

===Syntax===
for(initialisation;condition;increment)
   Statement

intialisation
while(condition)
 Statement
 increment

Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNbl5jkVrrw1E5XSvm3GiCI

==Importance of Indentation in Python==
Indentation is used to indicate to what block of statements belong. Indentation of blocks convey program structure in Python.
{{#ev:youtube|https://youtu.be/pmavoW419Yc|250|right}}</text>
      <sha1>plyezeegagu6vm8l78dagxozlixhr8u</sha1>
    </revision>
    <revision>
      <id>454</id>
      <parentid>453</parentid>
      <timestamp>2018-08-06T17:11:30Z</timestamp>
      <contributor>
        <username>Simmi</username>
        <id>18</id>
      </contributor>
      <comment>/* Variables */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="3148">==Introduction to Python==
Python is a widely used programming language which allows programmers to write the program in fewer lines of code. It was designed by Guido van Rossum in 1991. Python uses an interpreter instead of compiler. Here, in our course we will be using Spyder IDE. Spyder is an integrated development environment with editing options to assist the programmers in writing programs. Spyder IDE is divided into two panes, one is console and other one is where program is written.

==How to run a program in Spyder IDE?==
Go to Run on the menu bar. Click Run-&gt;Run.

==Print statements==
Print statements help to display output on console. 
{{#ev:youtube|https://youtu.be/gECkqaOwyt0|250|right}}

===Syntax===
print()

===How to print a message?===
In order to print a message in Python, write print(&quot;message&quot;).

==Variables==
Variables are used to store some values. Values can be strings, integers or decimal values. 
{{#ev:youtube|https://youtu.be/60iAXH1sm-Y|250|right}}
===How to print a variable?===
In order to print the value of a variable in python, first initialise the variable and then write print(variable_name)
For example :
  x=2
  print(x)

===Some facts about Variables===
* If you want to print variable name with a message, you can use , operator. For example : I want to print Hello Simran and Simran has been stored in a variable called ''name''.
  name=&quot;Simran&quot;
  print(&quot;Hello&quot;,name)
* If you change the value of a variable, it will store the latest value. For example :
  name=&quot;Simran&quot;
  name=&quot;Amit&quot;
  If you will execute the command ''print(name)'', Amit will be displayed.
* You can perform operations like addition, subtraction etc only on integral variables.

==How to execute couple of instructions on console?==
You can execute couple of instructions on console using ;. Write Statement 1;Statement 2;......and then press ''Enter''.

==How to take input from the user?==
We can take input from the user using ''input'' function. For Example : You want the user to input variable ''x'', then write x=input(&quot;Enter the value of x&quot;) and execute. Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNkVLCxZw_jcgyS-bmrIVSP

==If statement==
If statement is used to execute set of two contrary statements based on a condition. 

===Syntax===
If (Condition):
 Statement 1
else:
 Statement 2

If ''Condition'' is true then ''Statement 1'' will be executed otherwise ''Statement 2'' will be executed.

Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNhHmg3SkK1uiutigcAbH9K

==Loops==
Loops in a programming languages are used to execute set of repetitive statements. For loop and while loop are used extensively to execute a set of looping instructions.

===Syntax===
for(initialisation;condition;increment)
   Statement

intialisation
while(condition)
 Statement
 increment

Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNbl5jkVrrw1E5XSvm3GiCI

==Importance of Indentation in Python==
Indentation is used to indicate to what block of statements belong. Indentation of blocks convey program structure in Python.
{{#ev:youtube|https://youtu.be/pmavoW419Yc|250|right}}</text>
      <sha1>j1bo1961bh4fnt5dtp7g4e4qaa4c2tg</sha1>
    </revision>
    <revision>
      <id>455</id>
      <parentid>454</parentid>
      <timestamp>2018-08-06T17:12:50Z</timestamp>
      <contributor>
        <username>Simmi</username>
        <id>18</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="3202">==Introduction to Python==
Python is a widely used programming language which allows programmers to write the program in fewer lines of code. It was designed by Guido van Rossum in 1991. Python uses an interpreter instead of compiler. Here, in our course we will be using Spyder IDE. Spyder is an integrated development environment with editing options to assist the programmers in writing programs. Spyder IDE is divided into two panes, one is console and other one is where program is written.

==How to run a program in Spyder IDE?==
Go to Run on the menu bar. Click Run-&gt;Run.

==Print statements==
Print statements help to display output on console. 
{{#ev:youtube|https://youtu.be/gECkqaOwyt0|250|right}}

===Syntax===
print()

===How to print a message?===
In order to print a message in Python, write print(&quot;message&quot;).

==Variables==
Variables are used to store some values. Values can be strings, integers or decimal values. 
{{#ev:youtube|https://youtu.be/60iAXH1sm-Y|250|right}}
===How to print a variable?===
In order to print the value of a variable in python, first initialise the variable and then write print(variable_name)
For example :
  x=2
  print(x)

===Some facts about Variables===
* If you want to print variable name with a message, you can use , operator. For example : I want to print Hello Simran and Simran has been stored in a variable called ''name''.
  name=&quot;Simran&quot;
  print(&quot;Hello&quot;,name)
* If you change the value of a variable, it will store the latest value. For example :
  name=&quot;Simran&quot;
  name=&quot;Amit&quot;
  If you will execute the command ''print(name)'', Amit will be displayed.
* You can perform operations like addition, subtraction etc only on integral variables.

==How to execute couple of instructions on console?==
You can execute couple of instructions on console using ;. Write Statement 1;Statement 2;......and then press ''Enter''.
{{#ev:youtube|https://youtu.be/CYQCYvLE22Y|250|right}}
==How to take input from the user?==
We can take input from the user using ''input'' function. For Example : You want the user to input variable ''x'', then write x=input(&quot;Enter the value of x&quot;) and execute. Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNkVLCxZw_jcgyS-bmrIVSP

==If statement==
If statement is used to execute set of two contrary statements based on a condition. 

===Syntax===
If (Condition):
 Statement 1
else:
 Statement 2

If ''Condition'' is true then ''Statement 1'' will be executed otherwise ''Statement 2'' will be executed.

Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNhHmg3SkK1uiutigcAbH9K

==Loops==
Loops in a programming languages are used to execute set of repetitive statements. For loop and while loop are used extensively to execute a set of looping instructions.

===Syntax===
for(initialisation;condition;increment)
   Statement

intialisation
while(condition)
 Statement
 increment

Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNbl5jkVrrw1E5XSvm3GiCI

==Importance of Indentation in Python==
Indentation is used to indicate to what block of statements belong. Indentation of blocks convey program structure in Python.
{{#ev:youtube|https://youtu.be/pmavoW419Yc|250|right}}</text>
      <sha1>f1vu71wtoy5nvoauhsgbwdzdcyo8yts</sha1>
    </revision>
    <revision>
      <id>456</id>
      <parentid>455</parentid>
      <timestamp>2018-08-06T17:13:17Z</timestamp>
      <contributor>
        <username>Simmi</username>
        <id>18</id>
      </contributor>
      <comment>/* How to execute couple of instructions on console? */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="3203">==Introduction to Python==
Python is a widely used programming language which allows programmers to write the program in fewer lines of code. It was designed by Guido van Rossum in 1991. Python uses an interpreter instead of compiler. Here, in our course we will be using Spyder IDE. Spyder is an integrated development environment with editing options to assist the programmers in writing programs. Spyder IDE is divided into two panes, one is console and other one is where program is written.

==How to run a program in Spyder IDE?==
Go to Run on the menu bar. Click Run-&gt;Run.

==Print statements==
Print statements help to display output on console. 
{{#ev:youtube|https://youtu.be/gECkqaOwyt0|250|right}}

===Syntax===
print()

===How to print a message?===
In order to print a message in Python, write print(&quot;message&quot;).

==Variables==
Variables are used to store some values. Values can be strings, integers or decimal values. 
{{#ev:youtube|https://youtu.be/60iAXH1sm-Y|250|right}}
===How to print a variable?===
In order to print the value of a variable in python, first initialise the variable and then write print(variable_name)
For example :
  x=2
  print(x)

===Some facts about Variables===
* If you want to print variable name with a message, you can use , operator. For example : I want to print Hello Simran and Simran has been stored in a variable called ''name''.
  name=&quot;Simran&quot;
  print(&quot;Hello&quot;,name)
* If you change the value of a variable, it will store the latest value. For example :
  name=&quot;Simran&quot;
  name=&quot;Amit&quot;
  If you will execute the command ''print(name)'', Amit will be displayed.
* You can perform operations like addition, subtraction etc only on integral variables.

==How to execute couple of instructions on console?==
You can execute couple of instructions on console using ;. Write Statement 1;Statement 2;......and then press ''Enter''.
{{#ev:youtube|https://youtu.be/CYQCYvLE22Y|250|right}}

==How to take input from the user?==
We can take input from the user using ''input'' function. For Example : You want the user to input variable ''x'', then write x=input(&quot;Enter the value of x&quot;) and execute. Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNkVLCxZw_jcgyS-bmrIVSP

==If statement==
If statement is used to execute set of two contrary statements based on a condition. 

===Syntax===
If (Condition):
 Statement 1
else:
 Statement 2

If ''Condition'' is true then ''Statement 1'' will be executed otherwise ''Statement 2'' will be executed.

Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNhHmg3SkK1uiutigcAbH9K

==Loops==
Loops in a programming languages are used to execute set of repetitive statements. For loop and while loop are used extensively to execute a set of looping instructions.

===Syntax===
for(initialisation;condition;increment)
   Statement

intialisation
while(condition)
 Statement
 increment

Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNbl5jkVrrw1E5XSvm3GiCI

==Importance of Indentation in Python==
Indentation is used to indicate to what block of statements belong. Indentation of blocks convey program structure in Python.
{{#ev:youtube|https://youtu.be/pmavoW419Yc|250|right}}</text>
      <sha1>gmrtj9f0xjekqehwaql75b56lms4vtx</sha1>
    </revision>
    <revision>
      <id>457</id>
      <parentid>456</parentid>
      <timestamp>2018-08-06T17:13:41Z</timestamp>
      <contributor>
        <username>Simmi</username>
        <id>18</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="3206">==Introduction to Python==
Python is a widely used programming language which allows programmers to write the program in fewer lines of code. It was designed by Guido van Rossum in 1991. Python uses an interpreter instead of compiler. Here, in our course we will be using Spyder IDE. Spyder is an integrated development environment with editing options to assist the programmers in writing programs. Spyder IDE is divided into two panes, one is console and other one is where program is written.

==How to run a program in Spyder IDE?==
Go to Run on the menu bar. Click Run-&gt;Run.

==Print statements==
Print statements help to display output on console. 
{{#ev:youtube|https://youtu.be/gECkqaOwyt0|250|right}}

===Syntax===
print()

===How to print a message?===
In order to print a message in Python, write print(&quot;message&quot;).

==Variables==
Variables are used to store some values. Values can be strings, integers or decimal values. 
{{#ev:youtube|https://youtu.be/60iAXH1sm-Y|250|right}}
===How to print a variable?===
In order to print the value of a variable in python, first initialise the variable and then write print(variable_name)
For example :
  x=2
  print(x)

===Some facts about Variables===
* If you want to print variable name with a message, you can use , operator. For example : I want to print Hello Simran and Simran has been stored in a variable called ''name''.
  name=&quot;Simran&quot;
  print(&quot;Hello&quot;,name)
* If you change the value of a variable, it will store the latest value. For example :
  name=&quot;Simran&quot;
  name=&quot;Amit&quot;
  If you will execute the command ''print(name)'', Amit will be displayed.
* You can perform operations like addition, subtraction etc only on integral variables.

==How to execute couple of instructions on console?==
You can execute couple of instructions on console using ;. Write Statement 1;Statement 2;......and then press ''Enter''.
{{#ev:youtube|https://youtu.be/CYQCYvLE22Y|250|right}}




==How to take input from the user?==
We can take input from the user using ''input'' function. For Example : You want the user to input variable ''x'', then write x=input(&quot;Enter the value of x&quot;) and execute. Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNkVLCxZw_jcgyS-bmrIVSP

==If statement==
If statement is used to execute set of two contrary statements based on a condition. 

===Syntax===
If (Condition):
 Statement 1
else:
 Statement 2

If ''Condition'' is true then ''Statement 1'' will be executed otherwise ''Statement 2'' will be executed.

Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNhHmg3SkK1uiutigcAbH9K

==Loops==
Loops in a programming languages are used to execute set of repetitive statements. For loop and while loop are used extensively to execute a set of looping instructions.

===Syntax===
for(initialisation;condition;increment)
   Statement

intialisation
while(condition)
 Statement
 increment

Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNbl5jkVrrw1E5XSvm3GiCI

==Importance of Indentation in Python==
Indentation is used to indicate to what block of statements belong. Indentation of blocks convey program structure in Python.
{{#ev:youtube|https://youtu.be/pmavoW419Yc|250|right}}</text>
      <sha1>e9m9zb0ew444hao40yzqsq6k2oelp6z</sha1>
    </revision>
    <revision>
      <id>458</id>
      <parentid>457</parentid>
      <timestamp>2018-08-06T17:14:04Z</timestamp>
      <contributor>
        <username>Simmi</username>
        <id>18</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="3211">==Introduction to Python==
Python is a widely used programming language which allows programmers to write the program in fewer lines of code. It was designed by Guido van Rossum in 1991. Python uses an interpreter instead of compiler. Here, in our course we will be using Spyder IDE. Spyder is an integrated development environment with editing options to assist the programmers in writing programs. Spyder IDE is divided into two panes, one is console and other one is where program is written.

==How to run a program in Spyder IDE?==
Go to Run on the menu bar. Click Run-&gt;Run.

==Print statements==
Print statements help to display output on console. 
{{#ev:youtube|https://youtu.be/gECkqaOwyt0|250|right}}

===Syntax===
print()

===How to print a message?===
In order to print a message in Python, write print(&quot;message&quot;).

==Variables==
Variables are used to store some values. Values can be strings, integers or decimal values. 
{{#ev:youtube|https://youtu.be/60iAXH1sm-Y|250|right}}
===How to print a variable?===
In order to print the value of a variable in python, first initialise the variable and then write print(variable_name)
For example :
  x=2
  print(x)

===Some facts about Variables===
* If you want to print variable name with a message, you can use , operator. For example : I want to print Hello Simran and Simran has been stored in a variable called ''name''.
  name=&quot;Simran&quot;
  print(&quot;Hello&quot;,name)
* If you change the value of a variable, it will store the latest value. For example :
  name=&quot;Simran&quot;
  name=&quot;Amit&quot;
  If you will execute the command ''print(name)'', Amit will be displayed.
* You can perform operations like addition, subtraction etc only on integral variables.

==How to execute couple of instructions on console?==
You can execute couple of instructions on console using ;. Write Statement 1;Statement 2;......and then press ''Enter''.
{{#ev:youtube|https://youtu.be/CYQCYvLE22Y|250|right}}









==How to take input from the user?==
We can take input from the user using ''input'' function. For Example : You want the user to input variable ''x'', then write x=input(&quot;Enter the value of x&quot;) and execute. Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNkVLCxZw_jcgyS-bmrIVSP

==If statement==
If statement is used to execute set of two contrary statements based on a condition. 

===Syntax===
If (Condition):
 Statement 1
else:
 Statement 2

If ''Condition'' is true then ''Statement 1'' will be executed otherwise ''Statement 2'' will be executed.

Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNhHmg3SkK1uiutigcAbH9K

==Loops==
Loops in a programming languages are used to execute set of repetitive statements. For loop and while loop are used extensively to execute a set of looping instructions.

===Syntax===
for(initialisation;condition;increment)
   Statement

intialisation
while(condition)
 Statement
 increment

Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNbl5jkVrrw1E5XSvm3GiCI

==Importance of Indentation in Python==
Indentation is used to indicate to what block of statements belong. Indentation of blocks convey program structure in Python.
{{#ev:youtube|https://youtu.be/pmavoW419Yc|250|right}}</text>
      <sha1>t21wlcv7se8w05o3j6066zr36l2c1ea</sha1>
    </revision>
    <revision>
      <id>536</id>
      <parentid>458</parentid>
      <timestamp>2018-08-10T07:26:10Z</timestamp>
      <contributor>
        <username>Ishita</username>
        <id>1395</id>
      </contributor>
      <minor/>
      <comment>/* Syntax */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="3211">==Introduction to Python==
Python is a widely used programming language which allows programmers to write the program in fewer lines of code. It was designed by Guido van Rossum in 1991. Python uses an interpreter instead of compiler. Here, in our course we will be using Spyder IDE. Spyder is an integrated development environment with editing options to assist the programmers in writing programs. Spyder IDE is divided into two panes, one is console and other one is where program is written.

==How to run a program in Spyder IDE?==
Go to Run on the menu bar. Click Run-&gt;Run.

==Print statements==
Print statements help to display output on console. 
{{#ev:youtube|https://youtu.be/gECkqaOwyt0|250|right}}

===Syntax===
print()

===How to print a message?===
In order to print a message in Python, write print(&quot;message&quot;).

==Variables==
Variables are used to store some values. Values can be strings, integers or decimal values. 
{{#ev:youtube|https://youtu.be/60iAXH1sm-Y|250|right}}
===How to print a variable?===
In order to print the value of a variable in python, first initialise the variable and then write print(variable_name)
For example :
  x=2
  print(x)

===Some facts about Variables===
* If you want to print variable name with a message, you can use , operator. For example : I want to print Hello Simran and Simran has been stored in a variable called ''name''.
  name=&quot;Simran&quot;
  print(&quot;Hello&quot;,name)
* If you change the value of a variable, it will store the latest value. For example :
  name=&quot;Simran&quot;
  name=&quot;Amit&quot;
  If you will execute the command ''print(name)'', Amit will be displayed.
* You can perform operations like addition, subtraction etc only on integral variables.

==How to execute couple of instructions on console?==
You can execute couple of instructions on console using ;. Write Statement 1;Statement 2;......and then press ''Enter''.
{{#ev:youtube|https://youtu.be/CYQCYvLE22Y|250|right}}









==How to take input from the user?==
We can take input from the user using ''input'' function. For Example : You want the user to input variable ''x'', then write x=input(&quot;Enter the value of x&quot;) and execute. Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNkVLCxZw_jcgyS-bmrIVSP

==If statement==
If statement is used to execute set of two contrary statements based on a condition. 

===Syntax===
If (Condition):
    Statement 1
else:
    Statement 2

If 'Condition' is true then 'Statement 1' will be executed otherwise 'Statement 2' will be executed.

Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNhHmg3SkK1uiutigcAbH9K

==Loops==
Loops in a programming languages are used to execute set of repetitive statements. For loop and while loop are used extensively to execute a set of looping instructions.

===Syntax===
for(initialisation;condition;increment)
   Statement

intialisation
while(condition)
 Statement
 increment

Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNbl5jkVrrw1E5XSvm3GiCI

==Importance of Indentation in Python==
Indentation is used to indicate to what block of statements belong. Indentation of blocks convey program structure in Python.
{{#ev:youtube|https://youtu.be/pmavoW419Yc|250|right}}</text>
      <sha1>bgue8mzjfsyvnjvpvqtp3pezu9x7j1g</sha1>
    </revision>
    <revision>
      <id>537</id>
      <parentid>536</parentid>
      <timestamp>2018-08-10T07:26:49Z</timestamp>
      <contributor>
        <username>Ishita</username>
        <id>1395</id>
      </contributor>
      <minor/>
      <comment>/* Syntax */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="3209">==Introduction to Python==
Python is a widely used programming language which allows programmers to write the program in fewer lines of code. It was designed by Guido van Rossum in 1991. Python uses an interpreter instead of compiler. Here, in our course we will be using Spyder IDE. Spyder is an integrated development environment with editing options to assist the programmers in writing programs. Spyder IDE is divided into two panes, one is console and other one is where program is written.

==How to run a program in Spyder IDE?==
Go to Run on the menu bar. Click Run-&gt;Run.

==Print statements==
Print statements help to display output on console. 
{{#ev:youtube|https://youtu.be/gECkqaOwyt0|250|right}}

===Syntax===
print()

===How to print a message?===
In order to print a message in Python, write print(&quot;message&quot;).

==Variables==
Variables are used to store some values. Values can be strings, integers or decimal values. 
{{#ev:youtube|https://youtu.be/60iAXH1sm-Y|250|right}}
===How to print a variable?===
In order to print the value of a variable in python, first initialise the variable and then write print(variable_name)
For example :
  x=2
  print(x)

===Some facts about Variables===
* If you want to print variable name with a message, you can use , operator. For example : I want to print Hello Simran and Simran has been stored in a variable called ''name''.
  name=&quot;Simran&quot;
  print(&quot;Hello&quot;,name)
* If you change the value of a variable, it will store the latest value. For example :
  name=&quot;Simran&quot;
  name=&quot;Amit&quot;
  If you will execute the command ''print(name)'', Amit will be displayed.
* You can perform operations like addition, subtraction etc only on integral variables.

==How to execute couple of instructions on console?==
You can execute couple of instructions on console using ;. Write Statement 1;Statement 2;......and then press ''Enter''.
{{#ev:youtube|https://youtu.be/CYQCYvLE22Y|250|right}}









==How to take input from the user?==
We can take input from the user using ''input'' function. For Example : You want the user to input variable ''x'', then write x=input(&quot;Enter the value of x&quot;) and execute. Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNkVLCxZw_jcgyS-bmrIVSP

==If statement==
If statement is used to execute set of two contrary statements based on a condition. 

===Syntax===
If (Condition):
   Statement 1
else:
   Statement 2

If 'Condition' is true then 'Statement 1' will be executed otherwise 'Statement 2' will be executed.

Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNhHmg3SkK1uiutigcAbH9K

==Loops==
Loops in a programming languages are used to execute set of repetitive statements. For loop and while loop are used extensively to execute a set of looping instructions.

===Syntax===
for(initialisation;condition;increment)
   Statement

intialisation
while(condition)
 Statement
 increment

Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNbl5jkVrrw1E5XSvm3GiCI

==Importance of Indentation in Python==
Indentation is used to indicate to what block of statements belong. Indentation of blocks convey program structure in Python.
{{#ev:youtube|https://youtu.be/pmavoW419Yc|250|right}}</text>
      <sha1>izjr4o77qi9yqn6h3ao8daxqibqiswj</sha1>
    </revision>
    <revision>
      <id>538</id>
      <parentid>537</parentid>
      <timestamp>2018-08-10T07:27:48Z</timestamp>
      <contributor>
        <username>Ishita</username>
        <id>1395</id>
      </contributor>
      <minor/>
      <comment>/* Syntax */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="3211">==Introduction to Python==
Python is a widely used programming language which allows programmers to write the program in fewer lines of code. It was designed by Guido van Rossum in 1991. Python uses an interpreter instead of compiler. Here, in our course we will be using Spyder IDE. Spyder is an integrated development environment with editing options to assist the programmers in writing programs. Spyder IDE is divided into two panes, one is console and other one is where program is written.

==How to run a program in Spyder IDE?==
Go to Run on the menu bar. Click Run-&gt;Run.

==Print statements==
Print statements help to display output on console. 
{{#ev:youtube|https://youtu.be/gECkqaOwyt0|250|right}}

===Syntax===
print()

===How to print a message?===
In order to print a message in Python, write print(&quot;message&quot;).

==Variables==
Variables are used to store some values. Values can be strings, integers or decimal values. 
{{#ev:youtube|https://youtu.be/60iAXH1sm-Y|250|right}}
===How to print a variable?===
In order to print the value of a variable in python, first initialise the variable and then write print(variable_name)
For example :
  x=2
  print(x)

===Some facts about Variables===
* If you want to print variable name with a message, you can use , operator. For example : I want to print Hello Simran and Simran has been stored in a variable called ''name''.
  name=&quot;Simran&quot;
  print(&quot;Hello&quot;,name)
* If you change the value of a variable, it will store the latest value. For example :
  name=&quot;Simran&quot;
  name=&quot;Amit&quot;
  If you will execute the command ''print(name)'', Amit will be displayed.
* You can perform operations like addition, subtraction etc only on integral variables.

==How to execute couple of instructions on console?==
You can execute couple of instructions on console using ;. Write Statement 1;Statement 2;......and then press ''Enter''.
{{#ev:youtube|https://youtu.be/CYQCYvLE22Y|250|right}}









==How to take input from the user?==
We can take input from the user using ''input'' function. For Example : You want the user to input variable ''x'', then write x=input(&quot;Enter the value of x&quot;) and execute. Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNkVLCxZw_jcgyS-bmrIVSP

==If statement==
If statement is used to execute set of two contrary statements based on a condition. 

===Syntax===
If (Condition):
    Statement 1
else:
    Statement 2

If 'Condition' is true then 'Statement 1' will be executed otherwise 'Statement 2' will be executed.

Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNhHmg3SkK1uiutigcAbH9K

==Loops==
Loops in a programming languages are used to execute set of repetitive statements. For loop and while loop are used extensively to execute a set of looping instructions.

===Syntax===
for(initialisation;condition;increment)
   Statement

intialisation
while(condition)
 Statement
 increment

Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNbl5jkVrrw1E5XSvm3GiCI

==Importance of Indentation in Python==
Indentation is used to indicate to what block of statements belong. Indentation of blocks convey program structure in Python.
{{#ev:youtube|https://youtu.be/pmavoW419Yc|250|right}}</text>
      <sha1>bgue8mzjfsyvnjvpvqtp3pezu9x7j1g</sha1>
    </revision>
    <revision>
      <id>539</id>
      <parentid>538</parentid>
      <timestamp>2018-08-10T07:34:36Z</timestamp>
      <contributor>
        <username>Ishita</username>
        <id>1395</id>
      </contributor>
      <comment>/* Syntax */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="3364">==Introduction to Python==
Python is a widely used programming language which allows programmers to write the program in fewer lines of code. It was designed by Guido van Rossum in 1991. Python uses an interpreter instead of compiler. Here, in our course we will be using Spyder IDE. Spyder is an integrated development environment with editing options to assist the programmers in writing programs. Spyder IDE is divided into two panes, one is console and other one is where program is written.

==How to run a program in Spyder IDE?==
Go to Run on the menu bar. Click Run-&gt;Run.

==Print statements==
Print statements help to display output on console. 
{{#ev:youtube|https://youtu.be/gECkqaOwyt0|250|right}}

===Syntax===
print()

===How to print a message?===
In order to print a message in Python, write print(&quot;message&quot;).

==Variables==
Variables are used to store some values. Values can be strings, integers or decimal values. 
{{#ev:youtube|https://youtu.be/60iAXH1sm-Y|250|right}}
===How to print a variable?===
In order to print the value of a variable in python, first initialise the variable and then write print(variable_name)
For example :
  x=2
  print(x)

===Some facts about Variables===
* If you want to print variable name with a message, you can use , operator. For example : I want to print Hello Simran and Simran has been stored in a variable called ''name''.
  name=&quot;Simran&quot;
  print(&quot;Hello&quot;,name)
* If you change the value of a variable, it will store the latest value. For example :
  name=&quot;Simran&quot;
  name=&quot;Amit&quot;
  If you will execute the command ''print(name)'', Amit will be displayed.
* You can perform operations like addition, subtraction etc only on integral variables.

==How to execute couple of instructions on console?==
You can execute couple of instructions on console using ;. Write Statement 1;Statement 2;......and then press ''Enter''.
{{#ev:youtube|https://youtu.be/CYQCYvLE22Y|250|right}}









==How to take input from the user?==
We can take input from the user using ''input'' function. For Example : You want the user to input variable ''x'', then write x=input(&quot;Enter the value of x&quot;) and execute. Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNkVLCxZw_jcgyS-bmrIVSP

==If statement==
If statement is used to execute set of two contrary statements based on a condition. 

===Syntax===
If (Condition):
    Statement 1
else:
    Statement 2

If 'Condition' is true then 'Statement 1' will be executed otherwise 'Statement 2' will be executed.

Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNhHmg3SkK1uiutigcAbH9K

==Loops==
Loops in a programming languages are used to execute set of repetitive statements. For loop and while loop are used extensively to execute a set of looping instructions.

=== For loop Syntax ===
for i in range(10): 
    Statement

range(10) indicate that values 0 to 9 will be assigned to the variable i and for each value of i the Statement will be executed

=== While loop Syntax ===
intialisation
while(condition):
   Statement
   increment

Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNbl5jkVrrw1E5XSvm3GiCI

==Importance of Indentation in Python==
Indentation is used to indicate to what block of statements belong. Indentation of blocks convey program structure in Python.
{{#ev:youtube|https://youtu.be/pmavoW419Yc|250|right}}</text>
      <sha1>okjrzksdm2lle1ysts6mwefe2s06nr4</sha1>
    </revision>
    <revision>
      <id>540</id>
      <parentid>539</parentid>
      <timestamp>2018-08-10T07:35:30Z</timestamp>
      <contributor>
        <username>Ishita</username>
        <id>1395</id>
      </contributor>
      <comment>/* While loop Syntax */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="3365">==Introduction to Python==
Python is a widely used programming language which allows programmers to write the program in fewer lines of code. It was designed by Guido van Rossum in 1991. Python uses an interpreter instead of compiler. Here, in our course we will be using Spyder IDE. Spyder is an integrated development environment with editing options to assist the programmers in writing programs. Spyder IDE is divided into two panes, one is console and other one is where program is written.

==How to run a program in Spyder IDE?==
Go to Run on the menu bar. Click Run-&gt;Run.

==Print statements==
Print statements help to display output on console. 
{{#ev:youtube|https://youtu.be/gECkqaOwyt0|250|right}}

===Syntax===
print()

===How to print a message?===
In order to print a message in Python, write print(&quot;message&quot;).

==Variables==
Variables are used to store some values. Values can be strings, integers or decimal values. 
{{#ev:youtube|https://youtu.be/60iAXH1sm-Y|250|right}}
===How to print a variable?===
In order to print the value of a variable in python, first initialise the variable and then write print(variable_name)
For example :
  x=2
  print(x)

===Some facts about Variables===
* If you want to print variable name with a message, you can use , operator. For example : I want to print Hello Simran and Simran has been stored in a variable called ''name''.
  name=&quot;Simran&quot;
  print(&quot;Hello&quot;,name)
* If you change the value of a variable, it will store the latest value. For example :
  name=&quot;Simran&quot;
  name=&quot;Amit&quot;
  If you will execute the command ''print(name)'', Amit will be displayed.
* You can perform operations like addition, subtraction etc only on integral variables.

==How to execute couple of instructions on console?==
You can execute couple of instructions on console using ;. Write Statement 1;Statement 2;......and then press ''Enter''.
{{#ev:youtube|https://youtu.be/CYQCYvLE22Y|250|right}}









==How to take input from the user?==
We can take input from the user using ''input'' function. For Example : You want the user to input variable ''x'', then write x=input(&quot;Enter the value of x&quot;) and execute. Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNkVLCxZw_jcgyS-bmrIVSP

==If statement==
If statement is used to execute set of two contrary statements based on a condition. 

===Syntax===
If (Condition):
    Statement 1
else:
    Statement 2

If 'Condition' is true then 'Statement 1' will be executed otherwise 'Statement 2' will be executed.

Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNhHmg3SkK1uiutigcAbH9K

==Loops==
Loops in a programming languages are used to execute set of repetitive statements. For loop and while loop are used extensively to execute a set of looping instructions.

=== For loop Syntax ===
for i in range(10): 
    Statement

range(10) indicate that values 0 to 9 will be assigned to the variable i and for each value of i the Statement will be executed

=== While loop Syntax ===
intialisation

while(condition):
   Statement
   increment

Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNbl5jkVrrw1E5XSvm3GiCI

==Importance of Indentation in Python==
Indentation is used to indicate to what block of statements belong. Indentation of blocks convey program structure in Python.
{{#ev:youtube|https://youtu.be/pmavoW419Yc|250|right}}</text>
      <sha1>i6xaye30t60e43wottzaasf9ils9z2u</sha1>
    </revision>
    <revision>
      <id>612</id>
      <parentid>540</parentid>
      <timestamp>2018-08-14T18:26:05Z</timestamp>
      <contributor>
        <username>Rahul</username>
        <id>1086</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="4411">==Introduction to Python==
Python is a widely used programming language which allows programmers to write the program in fewer lines of code. It was designed by Guido van Rossum in 1991. Python uses an interpreter instead of compiler. Here, in our course we will be using Spyder IDE. Spyder is an integrated development environment with editing options to assist the programmers in writing programs. Spyder IDE is divided into two panes, one is console and other one is where program is written.

==How to run a program in Spyder IDE?==
Go to Run on the menu bar. Click Run-&gt;Run.

==Print statements==
Print statements help to display output on console. 
{{#ev:youtube|https://youtu.be/gECkqaOwyt0|250|right}}

===Syntax===
print()

===How to print a message?===
In order to print a message in Python, write print(&quot;message&quot;).

==Variables==
Variables are used to store some values. Values can be strings, integers or decimal values. 
{{#ev:youtube|https://youtu.be/60iAXH1sm-Y|250|right}}
===How to print a variable?===
In order to print the value of a variable in python, first initialise the variable and then write print(variable_name)
For example :
  x=2
  print(x)

===Some facts about Variables===
* If you want to print variable name with a message, you can use , operator. For example : I want to print Hello Simran and Simran has been stored in a variable called ''name''.
  name=&quot;Simran&quot;
  print(&quot;Hello&quot;,name)
* If you change the value of a variable, it will store the latest value. For example :
  name=&quot;Simran&quot;
  name=&quot;Amit&quot;
  If you will execute the command ''print(name)'', Amit will be displayed.
* You can perform operations like addition, subtraction etc only on integral variables.

==How to execute couple of instructions on console?==
You can execute couple of instructions on console using ;. Write Statement 1;Statement 2;......and then press ''Enter''.
{{#ev:youtube|https://youtu.be/CYQCYvLE22Y|250|right}}









==How to take input from the user?==
We can take input from the user using ''input'' function. For Example : You want the user to input variable ''x'', then write x=input(&quot;Enter the value of x&quot;) and execute. Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNkVLCxZw_jcgyS-bmrIVSP

==If statement==
If statement is used to execute set of two contrary statements based on a condition. 

===Syntax===
If (Condition):
    Statement 1
else:
    Statement 2

If 'Condition' is true then 'Statement 1' will be executed otherwise 'Statement 2' will be executed.

Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNhHmg3SkK1uiutigcAbH9K

==Loops==
Loops in a programming languages are used to execute set of repetitive statements. For loop and while loop are used extensively to execute a set of looping instructions.

=== For loop Syntax ===
for i in range(10): 
    Statement

range(10) indicate that values 0 to 9 will be assigned to the variable i and for each value of i the Statement will be executed

=== While loop Syntax ===
intialisation

while(condition):
   Statement
   increment

Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNbl5jkVrrw1E5XSvm3GiCI

==Importance of Indentation in Python==
Indentation is used to indicate to what block of statements belong. Indentation of blocks convey program structure in Python.
{{#ev:youtube|https://youtu.be/pmavoW419Yc|250|right}}









----

==Spyder IDE Black Screen Solution==

----

 This issue is because of ''Help'' screen which is by default open. 
 We need to close it. So here's how you do it-


===Method 1:===

Step 1-    Try by closing current pane for that,  &quot;''press ctrl+shift+F4''&quot;  wait for few seconds things will appear on screen.

Step 2-    If it so than on menu bar go to ''view &gt; panes &gt; help'' unchecked &quot;''Help''&quot; option.

Step 3-    Make sure that &quot;''Help''&quot; under ''view &gt; panes'' is permanently unchecked. And ''Editor, Ipython console, Variable explorer''  are checked. 


===Method 2:===

Step 1-    Open spyder.

Step 2-   On that black screen randomly ''Left click'' on spyder &quot;''Menu bar''&quot; area you will get menu drop downs, You have to find Drop down with &quot;''Panes''&quot; option.

Step 3-   On &quot;''Panes''&quot; drop down unchecked the &quot;''Help''&quot;.

Step 4-   Wait for few seconds Spyder view will appear.

Step 5 -  Make sure that ''&quot;Help&quot;'' under view&gt;panes is permanently unchecked. And ''Editor, Ipython console, variable explorer'' are checked.</text>
      <sha1>3snlvlg07930xzfbe8qhhcoi6x4ou1y</sha1>
    </revision>
    <revision>
      <id>646</id>
      <parentid>612</parentid>
      <timestamp>2018-08-16T06:10:41Z</timestamp>
      <contributor>
        <username>Nisarg</username>
        <id>1373</id>
      </contributor>
      <comment>/* Introduction to Python */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="4747">==Introduction to Python==
Python is a widely used programming language which allows programmers to write the program in fewer lines of code. It was designed by Guido van Rossum in 1991. Python uses an interpreter instead of compiler.Basically, the main difference between compiler and interpreter is that the compiler takes the code as'whole' and compiles it..for example in C language and in interpreter..example: languages like python...it interprets the written code 'line by line', and if somewhere error is found...it stops interpreting the code from there itself. Here, in our course we will be using Spyder IDE. Spyder is an integrated development environment with editing options to assist the programmers in writing programs. Spyder IDE is divided into two panes, one is console and other one is where program is written.

==How to run a program in Spyder IDE?==
Go to Run on the menu bar. Click Run-&gt;Run.

==Print statements==
Print statements help to display output on console. 
{{#ev:youtube|https://youtu.be/gECkqaOwyt0|250|right}}

===Syntax===
print()

===How to print a message?===
In order to print a message in Python, write print(&quot;message&quot;).

==Variables==
Variables are used to store some values. Values can be strings, integers or decimal values. 
{{#ev:youtube|https://youtu.be/60iAXH1sm-Y|250|right}}
===How to print a variable?===
In order to print the value of a variable in python, first initialise the variable and then write print(variable_name)
For example :
  x=2
  print(x)

===Some facts about Variables===
* If you want to print variable name with a message, you can use , operator. For example : I want to print Hello Simran and Simran has been stored in a variable called ''name''.
  name=&quot;Simran&quot;
  print(&quot;Hello&quot;,name)
* If you change the value of a variable, it will store the latest value. For example :
  name=&quot;Simran&quot;
  name=&quot;Amit&quot;
  If you will execute the command ''print(name)'', Amit will be displayed.
* You can perform operations like addition, subtraction etc only on integral variables.

==How to execute couple of instructions on console?==
You can execute couple of instructions on console using ;. Write Statement 1;Statement 2;......and then press ''Enter''.
{{#ev:youtube|https://youtu.be/CYQCYvLE22Y|250|right}}









==How to take input from the user?==
We can take input from the user using ''input'' function. For Example : You want the user to input variable ''x'', then write x=input(&quot;Enter the value of x&quot;) and execute. Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNkVLCxZw_jcgyS-bmrIVSP

==If statement==
If statement is used to execute set of two contrary statements based on a condition. 

===Syntax===
If (Condition):
    Statement 1
else:
    Statement 2

If 'Condition' is true then 'Statement 1' will be executed otherwise 'Statement 2' will be executed.

Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNhHmg3SkK1uiutigcAbH9K

==Loops==
Loops in a programming languages are used to execute set of repetitive statements. For loop and while loop are used extensively to execute a set of looping instructions.

=== For loop Syntax ===
for i in range(10): 
    Statement

range(10) indicate that values 0 to 9 will be assigned to the variable i and for each value of i the Statement will be executed

=== While loop Syntax ===
intialisation

while(condition):
   Statement
   increment

Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNbl5jkVrrw1E5XSvm3GiCI

==Importance of Indentation in Python==
Indentation is used to indicate to what block of statements belong. Indentation of blocks convey program structure in Python.
{{#ev:youtube|https://youtu.be/pmavoW419Yc|250|right}}









----

==Spyder IDE Black Screen Solution==

----

 This issue is because of ''Help'' screen which is by default open. 
 We need to close it. So here's how you do it-


===Method 1:===

Step 1-    Try by closing current pane for that,  &quot;''press ctrl+shift+F4''&quot;  wait for few seconds things will appear on screen.

Step 2-    If it so than on menu bar go to ''view &gt; panes &gt; help'' unchecked &quot;''Help''&quot; option.

Step 3-    Make sure that &quot;''Help''&quot; under ''view &gt; panes'' is permanently unchecked. And ''Editor, Ipython console, Variable explorer''  are checked. 


===Method 2:===

Step 1-    Open spyder.

Step 2-   On that black screen randomly ''Left click'' on spyder &quot;''Menu bar''&quot; area you will get menu drop downs, You have to find Drop down with &quot;''Panes''&quot; option.

Step 3-   On &quot;''Panes''&quot; drop down unchecked the &quot;''Help''&quot;.

Step 4-   Wait for few seconds Spyder view will appear.

Step 5 -  Make sure that ''&quot;Help&quot;'' under view&gt;panes is permanently unchecked. And ''Editor, Ipython console, variable explorer'' are checked.</text>
      <sha1>jv2nnudy4w1ee1th3eaifimqqm9c6n9</sha1>
    </revision>
    <revision>
      <id>647</id>
      <parentid>646</parentid>
      <timestamp>2018-08-16T06:11:11Z</timestamp>
      <contributor>
        <username>Nisarg</username>
        <id>1373</id>
      </contributor>
      <comment>/* Introduction to Python */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="4748">==Introduction to Python==
Python is a widely used programming language which allows programmers to write the program in fewer lines of code. It was designed by Guido van Rossum in 1991. Python uses an interpreter instead of compiler.Basically, the main difference between compiler and interpreter is that the compiler takes the code as 'whole' and compiles it..for example in C language and in interpreter..example: languages like python...it interprets the written code 'line by line', and if somewhere error is found...it stops interpreting the code from there itself. Here, in our course we will be using Spyder IDE. Spyder is an integrated development environment with editing options to assist the programmers in writing programs. Spyder IDE is divided into two panes, one is console and other one is where program is written.

==How to run a program in Spyder IDE?==
Go to Run on the menu bar. Click Run-&gt;Run.

==Print statements==
Print statements help to display output on console. 
{{#ev:youtube|https://youtu.be/gECkqaOwyt0|250|right}}

===Syntax===
print()

===How to print a message?===
In order to print a message in Python, write print(&quot;message&quot;).

==Variables==
Variables are used to store some values. Values can be strings, integers or decimal values. 
{{#ev:youtube|https://youtu.be/60iAXH1sm-Y|250|right}}
===How to print a variable?===
In order to print the value of a variable in python, first initialise the variable and then write print(variable_name)
For example :
  x=2
  print(x)

===Some facts about Variables===
* If you want to print variable name with a message, you can use , operator. For example : I want to print Hello Simran and Simran has been stored in a variable called ''name''.
  name=&quot;Simran&quot;
  print(&quot;Hello&quot;,name)
* If you change the value of a variable, it will store the latest value. For example :
  name=&quot;Simran&quot;
  name=&quot;Amit&quot;
  If you will execute the command ''print(name)'', Amit will be displayed.
* You can perform operations like addition, subtraction etc only on integral variables.

==How to execute couple of instructions on console?==
You can execute couple of instructions on console using ;. Write Statement 1;Statement 2;......and then press ''Enter''.
{{#ev:youtube|https://youtu.be/CYQCYvLE22Y|250|right}}









==How to take input from the user?==
We can take input from the user using ''input'' function. For Example : You want the user to input variable ''x'', then write x=input(&quot;Enter the value of x&quot;) and execute. Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNkVLCxZw_jcgyS-bmrIVSP

==If statement==
If statement is used to execute set of two contrary statements based on a condition. 

===Syntax===
If (Condition):
    Statement 1
else:
    Statement 2

If 'Condition' is true then 'Statement 1' will be executed otherwise 'Statement 2' will be executed.

Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNhHmg3SkK1uiutigcAbH9K

==Loops==
Loops in a programming languages are used to execute set of repetitive statements. For loop and while loop are used extensively to execute a set of looping instructions.

=== For loop Syntax ===
for i in range(10): 
    Statement

range(10) indicate that values 0 to 9 will be assigned to the variable i and for each value of i the Statement will be executed

=== While loop Syntax ===
intialisation

while(condition):
   Statement
   increment

Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNbl5jkVrrw1E5XSvm3GiCI

==Importance of Indentation in Python==
Indentation is used to indicate to what block of statements belong. Indentation of blocks convey program structure in Python.
{{#ev:youtube|https://youtu.be/pmavoW419Yc|250|right}}









----

==Spyder IDE Black Screen Solution==

----

 This issue is because of ''Help'' screen which is by default open. 
 We need to close it. So here's how you do it-


===Method 1:===

Step 1-    Try by closing current pane for that,  &quot;''press ctrl+shift+F4''&quot;  wait for few seconds things will appear on screen.

Step 2-    If it so than on menu bar go to ''view &gt; panes &gt; help'' unchecked &quot;''Help''&quot; option.

Step 3-    Make sure that &quot;''Help''&quot; under ''view &gt; panes'' is permanently unchecked. And ''Editor, Ipython console, Variable explorer''  are checked. 


===Method 2:===

Step 1-    Open spyder.

Step 2-   On that black screen randomly ''Left click'' on spyder &quot;''Menu bar''&quot; area you will get menu drop downs, You have to find Drop down with &quot;''Panes''&quot; option.

Step 3-   On &quot;''Panes''&quot; drop down unchecked the &quot;''Help''&quot;.

Step 4-   Wait for few seconds Spyder view will appear.

Step 5 -  Make sure that ''&quot;Help&quot;'' under view&gt;panes is permanently unchecked. And ''Editor, Ipython console, variable explorer'' are checked.</text>
      <sha1>em3leoiiix6w751gqokgsw90rk7gomy</sha1>
    </revision>
    <revision>
      <id>648</id>
      <parentid>647</parentid>
      <timestamp>2018-08-16T06:12:06Z</timestamp>
      <contributor>
        <username>Nisarg</username>
        <id>1373</id>
      </contributor>
      <comment>/* Introduction to Python */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="4766">==Introduction to Python==
Python is a widely used programming language which allows programmers to write the program in fewer lines of code. It was designed by Guido van Rossum in 1991. Python uses an interpreter instead of compiler.Basically, the main difference between compiler and interpreter is that the compiler takes the code as 'whole' and compiles it..for example in C language and on the other side in interpreter..example: languages like Python...it interprets the written code 'line by line', and if somewhere error is found...it stops interpreting the code from there itself. Here, in our course we will be using Spyder IDE. Spyder is an integrated development environment with editing options to assist the programmers in writing programs. Spyder IDE is divided into two panes, one is console and other one is where program is written.

==How to run a program in Spyder IDE?==
Go to Run on the menu bar. Click Run-&gt;Run.

==Print statements==
Print statements help to display output on console. 
{{#ev:youtube|https://youtu.be/gECkqaOwyt0|250|right}}

===Syntax===
print()

===How to print a message?===
In order to print a message in Python, write print(&quot;message&quot;).

==Variables==
Variables are used to store some values. Values can be strings, integers or decimal values. 
{{#ev:youtube|https://youtu.be/60iAXH1sm-Y|250|right}}
===How to print a variable?===
In order to print the value of a variable in python, first initialise the variable and then write print(variable_name)
For example :
  x=2
  print(x)

===Some facts about Variables===
* If you want to print variable name with a message, you can use , operator. For example : I want to print Hello Simran and Simran has been stored in a variable called ''name''.
  name=&quot;Simran&quot;
  print(&quot;Hello&quot;,name)
* If you change the value of a variable, it will store the latest value. For example :
  name=&quot;Simran&quot;
  name=&quot;Amit&quot;
  If you will execute the command ''print(name)'', Amit will be displayed.
* You can perform operations like addition, subtraction etc only on integral variables.

==How to execute couple of instructions on console?==
You can execute couple of instructions on console using ;. Write Statement 1;Statement 2;......and then press ''Enter''.
{{#ev:youtube|https://youtu.be/CYQCYvLE22Y|250|right}}









==How to take input from the user?==
We can take input from the user using ''input'' function. For Example : You want the user to input variable ''x'', then write x=input(&quot;Enter the value of x&quot;) and execute. Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNkVLCxZw_jcgyS-bmrIVSP

==If statement==
If statement is used to execute set of two contrary statements based on a condition. 

===Syntax===
If (Condition):
    Statement 1
else:
    Statement 2

If 'Condition' is true then 'Statement 1' will be executed otherwise 'Statement 2' will be executed.

Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNhHmg3SkK1uiutigcAbH9K

==Loops==
Loops in a programming languages are used to execute set of repetitive statements. For loop and while loop are used extensively to execute a set of looping instructions.

=== For loop Syntax ===
for i in range(10): 
    Statement

range(10) indicate that values 0 to 9 will be assigned to the variable i and for each value of i the Statement will be executed

=== While loop Syntax ===
intialisation

while(condition):
   Statement
   increment

Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNbl5jkVrrw1E5XSvm3GiCI

==Importance of Indentation in Python==
Indentation is used to indicate to what block of statements belong. Indentation of blocks convey program structure in Python.
{{#ev:youtube|https://youtu.be/pmavoW419Yc|250|right}}









----

==Spyder IDE Black Screen Solution==

----

 This issue is because of ''Help'' screen which is by default open. 
 We need to close it. So here's how you do it-


===Method 1:===

Step 1-    Try by closing current pane for that,  &quot;''press ctrl+shift+F4''&quot;  wait for few seconds things will appear on screen.

Step 2-    If it so than on menu bar go to ''view &gt; panes &gt; help'' unchecked &quot;''Help''&quot; option.

Step 3-    Make sure that &quot;''Help''&quot; under ''view &gt; panes'' is permanently unchecked. And ''Editor, Ipython console, Variable explorer''  are checked. 


===Method 2:===

Step 1-    Open spyder.

Step 2-   On that black screen randomly ''Left click'' on spyder &quot;''Menu bar''&quot; area you will get menu drop downs, You have to find Drop down with &quot;''Panes''&quot; option.

Step 3-   On &quot;''Panes''&quot; drop down unchecked the &quot;''Help''&quot;.

Step 4-   Wait for few seconds Spyder view will appear.

Step 5 -  Make sure that ''&quot;Help&quot;'' under view&gt;panes is permanently unchecked. And ''Editor, Ipython console, variable explorer'' are checked.</text>
      <sha1>12c24hsudz6sc3l5vihnz75mbadq2uv</sha1>
    </revision>
    <revision>
      <id>683</id>
      <parentid>648</parentid>
      <timestamp>2018-08-18T04:47:13Z</timestamp>
      <contributor>
        <username>Sachinkr</username>
        <id>1743</id>
      </contributor>
      <comment>/* How to print a message? */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="4993">==Introduction to Python==
Python is a widely used programming language which allows programmers to write the program in fewer lines of code. It was designed by Guido van Rossum in 1991. Python uses an interpreter instead of compiler.Basically, the main difference between compiler and interpreter is that the compiler takes the code as 'whole' and compiles it..for example in C language and on the other side in interpreter..example: languages like Python...it interprets the written code 'line by line', and if somewhere error is found...it stops interpreting the code from there itself. Here, in our course we will be using Spyder IDE. Spyder is an integrated development environment with editing options to assist the programmers in writing programs. Spyder IDE is divided into two panes, one is console and other one is where program is written.

==How to run a program in Spyder IDE?==
Go to Run on the menu bar. Click Run-&gt;Run.

==Print statements==
Print statements help to display output on console. 
{{#ev:youtube|https://youtu.be/gECkqaOwyt0|250|right}}

===Syntax===
print()

===How to print a message?===
In order to print a message in Python, write print(&quot;message&quot;).
Single, double, triple quote can be used print()
Example:
# Double Quote
Print(&quot;Hello&quot;)
Output: Hello
# Single Quote
Print('Hello')
Output: Hello
# Quote within quote
Print('Is &quot;Ram&quot; a good boy?') 
Output: Is &quot;Ram&quot; a good boy?

==Variables==
Variables are used to store some values. Values can be strings, integers or decimal values. 
{{#ev:youtube|https://youtu.be/60iAXH1sm-Y|250|right}}
===How to print a variable?===
In order to print the value of a variable in python, first initialise the variable and then write print(variable_name)
For example :
  x=2
  print(x)

===Some facts about Variables===
* If you want to print variable name with a message, you can use , operator. For example : I want to print Hello Simran and Simran has been stored in a variable called ''name''.
  name=&quot;Simran&quot;
  print(&quot;Hello&quot;,name)
* If you change the value of a variable, it will store the latest value. For example :
  name=&quot;Simran&quot;
  name=&quot;Amit&quot;
  If you will execute the command ''print(name)'', Amit will be displayed.
* You can perform operations like addition, subtraction etc only on integral variables.

==How to execute couple of instructions on console?==
You can execute couple of instructions on console using ;. Write Statement 1;Statement 2;......and then press ''Enter''.
{{#ev:youtube|https://youtu.be/CYQCYvLE22Y|250|right}}









==How to take input from the user?==
We can take input from the user using ''input'' function. For Example : You want the user to input variable ''x'', then write x=input(&quot;Enter the value of x&quot;) and execute. Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNkVLCxZw_jcgyS-bmrIVSP

==If statement==
If statement is used to execute set of two contrary statements based on a condition. 

===Syntax===
If (Condition):
    Statement 1
else:
    Statement 2

If 'Condition' is true then 'Statement 1' will be executed otherwise 'Statement 2' will be executed.

Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNhHmg3SkK1uiutigcAbH9K

==Loops==
Loops in a programming languages are used to execute set of repetitive statements. For loop and while loop are used extensively to execute a set of looping instructions.

=== For loop Syntax ===
for i in range(10): 
    Statement

range(10) indicate that values 0 to 9 will be assigned to the variable i and for each value of i the Statement will be executed

=== While loop Syntax ===
intialisation

while(condition):
   Statement
   increment

Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNbl5jkVrrw1E5XSvm3GiCI

==Importance of Indentation in Python==
Indentation is used to indicate to what block of statements belong. Indentation of blocks convey program structure in Python.
{{#ev:youtube|https://youtu.be/pmavoW419Yc|250|right}}









----

==Spyder IDE Black Screen Solution==

----

 This issue is because of ''Help'' screen which is by default open. 
 We need to close it. So here's how you do it-


===Method 1:===

Step 1-    Try by closing current pane for that,  &quot;''press ctrl+shift+F4''&quot;  wait for few seconds things will appear on screen.

Step 2-    If it so than on menu bar go to ''view &gt; panes &gt; help'' unchecked &quot;''Help''&quot; option.

Step 3-    Make sure that &quot;''Help''&quot; under ''view &gt; panes'' is permanently unchecked. And ''Editor, Ipython console, Variable explorer''  are checked. 


===Method 2:===

Step 1-    Open spyder.

Step 2-   On that black screen randomly ''Left click'' on spyder &quot;''Menu bar''&quot; area you will get menu drop downs, You have to find Drop down with &quot;''Panes''&quot; option.

Step 3-   On &quot;''Panes''&quot; drop down unchecked the &quot;''Help''&quot;.

Step 4-   Wait for few seconds Spyder view will appear.

Step 5 -  Make sure that ''&quot;Help&quot;'' under view&gt;panes is permanently unchecked. And ''Editor, Ipython console, variable explorer'' are checked.</text>
      <sha1>drduu0t6j6cyk42vopo2k5fm7vy3d2q</sha1>
    </revision>
    <revision>
      <id>684</id>
      <parentid>683</parentid>
      <timestamp>2018-08-18T04:47:32Z</timestamp>
      <contributor>
        <username>Sachinkr</username>
        <id>1743</id>
      </contributor>
      <comment>/* How to print a message? */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="4990">==Introduction to Python==
Python is a widely used programming language which allows programmers to write the program in fewer lines of code. It was designed by Guido van Rossum in 1991. Python uses an interpreter instead of compiler.Basically, the main difference between compiler and interpreter is that the compiler takes the code as 'whole' and compiles it..for example in C language and on the other side in interpreter..example: languages like Python...it interprets the written code 'line by line', and if somewhere error is found...it stops interpreting the code from there itself. Here, in our course we will be using Spyder IDE. Spyder is an integrated development environment with editing options to assist the programmers in writing programs. Spyder IDE is divided into two panes, one is console and other one is where program is written.

==How to run a program in Spyder IDE?==
Go to Run on the menu bar. Click Run-&gt;Run.

==Print statements==
Print statements help to display output on console. 
{{#ev:youtube|https://youtu.be/gECkqaOwyt0|250|right}}

===Syntax===
print()

===How to print a message?===
In order to print a message in Python, write print(&quot;message&quot;).
Single, double, triple quote can be used print()
Example:
#Double Quote
Print(&quot;Hello&quot;)
Output: Hello
#Single Quote
Print('Hello')
Output: Hello
#Quote within quote
Print('Is &quot;Ram&quot; a good boy?') 
Output: Is &quot;Ram&quot; a good boy?

==Variables==
Variables are used to store some values. Values can be strings, integers or decimal values. 
{{#ev:youtube|https://youtu.be/60iAXH1sm-Y|250|right}}
===How to print a variable?===
In order to print the value of a variable in python, first initialise the variable and then write print(variable_name)
For example :
  x=2
  print(x)

===Some facts about Variables===
* If you want to print variable name with a message, you can use , operator. For example : I want to print Hello Simran and Simran has been stored in a variable called ''name''.
  name=&quot;Simran&quot;
  print(&quot;Hello&quot;,name)
* If you change the value of a variable, it will store the latest value. For example :
  name=&quot;Simran&quot;
  name=&quot;Amit&quot;
  If you will execute the command ''print(name)'', Amit will be displayed.
* You can perform operations like addition, subtraction etc only on integral variables.

==How to execute couple of instructions on console?==
You can execute couple of instructions on console using ;. Write Statement 1;Statement 2;......and then press ''Enter''.
{{#ev:youtube|https://youtu.be/CYQCYvLE22Y|250|right}}









==How to take input from the user?==
We can take input from the user using ''input'' function. For Example : You want the user to input variable ''x'', then write x=input(&quot;Enter the value of x&quot;) and execute. Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNkVLCxZw_jcgyS-bmrIVSP

==If statement==
If statement is used to execute set of two contrary statements based on a condition. 

===Syntax===
If (Condition):
    Statement 1
else:
    Statement 2

If 'Condition' is true then 'Statement 1' will be executed otherwise 'Statement 2' will be executed.

Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNhHmg3SkK1uiutigcAbH9K

==Loops==
Loops in a programming languages are used to execute set of repetitive statements. For loop and while loop are used extensively to execute a set of looping instructions.

=== For loop Syntax ===
for i in range(10): 
    Statement

range(10) indicate that values 0 to 9 will be assigned to the variable i and for each value of i the Statement will be executed

=== While loop Syntax ===
intialisation

while(condition):
   Statement
   increment

Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNbl5jkVrrw1E5XSvm3GiCI

==Importance of Indentation in Python==
Indentation is used to indicate to what block of statements belong. Indentation of blocks convey program structure in Python.
{{#ev:youtube|https://youtu.be/pmavoW419Yc|250|right}}









----

==Spyder IDE Black Screen Solution==

----

 This issue is because of ''Help'' screen which is by default open. 
 We need to close it. So here's how you do it-


===Method 1:===

Step 1-    Try by closing current pane for that,  &quot;''press ctrl+shift+F4''&quot;  wait for few seconds things will appear on screen.

Step 2-    If it so than on menu bar go to ''view &gt; panes &gt; help'' unchecked &quot;''Help''&quot; option.

Step 3-    Make sure that &quot;''Help''&quot; under ''view &gt; panes'' is permanently unchecked. And ''Editor, Ipython console, Variable explorer''  are checked. 


===Method 2:===

Step 1-    Open spyder.

Step 2-   On that black screen randomly ''Left click'' on spyder &quot;''Menu bar''&quot; area you will get menu drop downs, You have to find Drop down with &quot;''Panes''&quot; option.

Step 3-   On &quot;''Panes''&quot; drop down unchecked the &quot;''Help''&quot;.

Step 4-   Wait for few seconds Spyder view will appear.

Step 5 -  Make sure that ''&quot;Help&quot;'' under view&gt;panes is permanently unchecked. And ''Editor, Ipython console, variable explorer'' are checked.</text>
      <sha1>c41rbhjj3nlur1sznx5najzsysc9k23</sha1>
    </revision>
    <revision>
      <id>685</id>
      <parentid>684</parentid>
      <timestamp>2018-08-18T04:48:13Z</timestamp>
      <contributor>
        <username>Sachinkr</username>
        <id>1743</id>
      </contributor>
      <comment>/* How to print a message? */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="5005">==Introduction to Python==
Python is a widely used programming language which allows programmers to write the program in fewer lines of code. It was designed by Guido van Rossum in 1991. Python uses an interpreter instead of compiler.Basically, the main difference between compiler and interpreter is that the compiler takes the code as 'whole' and compiles it..for example in C language and on the other side in interpreter..example: languages like Python...it interprets the written code 'line by line', and if somewhere error is found...it stops interpreting the code from there itself. Here, in our course we will be using Spyder IDE. Spyder is an integrated development environment with editing options to assist the programmers in writing programs. Spyder IDE is divided into two panes, one is console and other one is where program is written.

==How to run a program in Spyder IDE?==
Go to Run on the menu bar. Click Run-&gt;Run.

==Print statements==
Print statements help to display output on console. 
{{#ev:youtube|https://youtu.be/gECkqaOwyt0|250|right}}

===Syntax===
print()

===How to print a message?===
In order to print a message in Python, write print(&quot;message&quot;).
Single, double, triple quote can be used print()
Example:
'''Double Quote'''
Print(&quot;Hello&quot;)
Output: Hello
'''Single Quote'''
Print('Hello')
Output: Hello
'''Quote within quote'''
Print('Is &quot;Ram&quot; a good boy?') 
Output: Is &quot;Ram&quot; a good boy?

==Variables==
Variables are used to store some values. Values can be strings, integers or decimal values. 
{{#ev:youtube|https://youtu.be/60iAXH1sm-Y|250|right}}
===How to print a variable?===
In order to print the value of a variable in python, first initialise the variable and then write print(variable_name)
For example :
  x=2
  print(x)

===Some facts about Variables===
* If you want to print variable name with a message, you can use , operator. For example : I want to print Hello Simran and Simran has been stored in a variable called ''name''.
  name=&quot;Simran&quot;
  print(&quot;Hello&quot;,name)
* If you change the value of a variable, it will store the latest value. For example :
  name=&quot;Simran&quot;
  name=&quot;Amit&quot;
  If you will execute the command ''print(name)'', Amit will be displayed.
* You can perform operations like addition, subtraction etc only on integral variables.

==How to execute couple of instructions on console?==
You can execute couple of instructions on console using ;. Write Statement 1;Statement 2;......and then press ''Enter''.
{{#ev:youtube|https://youtu.be/CYQCYvLE22Y|250|right}}









==How to take input from the user?==
We can take input from the user using ''input'' function. For Example : You want the user to input variable ''x'', then write x=input(&quot;Enter the value of x&quot;) and execute. Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNkVLCxZw_jcgyS-bmrIVSP

==If statement==
If statement is used to execute set of two contrary statements based on a condition. 

===Syntax===
If (Condition):
    Statement 1
else:
    Statement 2

If 'Condition' is true then 'Statement 1' will be executed otherwise 'Statement 2' will be executed.

Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNhHmg3SkK1uiutigcAbH9K

==Loops==
Loops in a programming languages are used to execute set of repetitive statements. For loop and while loop are used extensively to execute a set of looping instructions.

=== For loop Syntax ===
for i in range(10): 
    Statement

range(10) indicate that values 0 to 9 will be assigned to the variable i and for each value of i the Statement will be executed

=== While loop Syntax ===
intialisation

while(condition):
   Statement
   increment

Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNbl5jkVrrw1E5XSvm3GiCI

==Importance of Indentation in Python==
Indentation is used to indicate to what block of statements belong. Indentation of blocks convey program structure in Python.
{{#ev:youtube|https://youtu.be/pmavoW419Yc|250|right}}









----

==Spyder IDE Black Screen Solution==

----

 This issue is because of ''Help'' screen which is by default open. 
 We need to close it. So here's how you do it-


===Method 1:===

Step 1-    Try by closing current pane for that,  &quot;''press ctrl+shift+F4''&quot;  wait for few seconds things will appear on screen.

Step 2-    If it so than on menu bar go to ''view &gt; panes &gt; help'' unchecked &quot;''Help''&quot; option.

Step 3-    Make sure that &quot;''Help''&quot; under ''view &gt; panes'' is permanently unchecked. And ''Editor, Ipython console, Variable explorer''  are checked. 


===Method 2:===

Step 1-    Open spyder.

Step 2-   On that black screen randomly ''Left click'' on spyder &quot;''Menu bar''&quot; area you will get menu drop downs, You have to find Drop down with &quot;''Panes''&quot; option.

Step 3-   On &quot;''Panes''&quot; drop down unchecked the &quot;''Help''&quot;.

Step 4-   Wait for few seconds Spyder view will appear.

Step 5 -  Make sure that ''&quot;Help&quot;'' under view&gt;panes is permanently unchecked. And ''Editor, Ipython console, variable explorer'' are checked.</text>
      <sha1>p3r2s8ib323sy2oxmf86nrrkmvc9fbi</sha1>
    </revision>
    <revision>
      <id>687</id>
      <parentid>685</parentid>
      <timestamp>2018-08-18T06:57:27Z</timestamp>
      <contributor>
        <username>Sachinkr</username>
        <id>1743</id>
      </contributor>
      <comment>/* How to print a message? */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="5014">==Introduction to Python==
Python is a widely used programming language which allows programmers to write the program in fewer lines of code. It was designed by Guido van Rossum in 1991. Python uses an interpreter instead of compiler.Basically, the main difference between compiler and interpreter is that the compiler takes the code as 'whole' and compiles it..for example in C language and on the other side in interpreter..example: languages like Python...it interprets the written code 'line by line', and if somewhere error is found...it stops interpreting the code from there itself. Here, in our course we will be using Spyder IDE. Spyder is an integrated development environment with editing options to assist the programmers in writing programs. Spyder IDE is divided into two panes, one is console and other one is where program is written.

==How to run a program in Spyder IDE?==
Go to Run on the menu bar. Click Run-&gt;Run.

==Print statements==
Print statements help to display output on console. 
{{#ev:youtube|https://youtu.be/gECkqaOwyt0|250|right}}

===Syntax===
print()

===How to print a message?===
In order to print a message in Python, write print(&quot;message&quot;).
Single, double, triple quote can be used print()

Example:

'''Single Quote'''
Print('Hello')  
Output: Hello

'''Double Quote'''
Print(&quot;Hello&quot;)  
Output: Hello

'''Quote within quote'''
Print('Is &quot;Ram&quot; a good boy?')  
Output: Is &quot;Ram&quot; a good boy?

==Variables==
Variables are used to store some values. Values can be strings, integers or decimal values. 
{{#ev:youtube|https://youtu.be/60iAXH1sm-Y|250|right}}
===How to print a variable?===
In order to print the value of a variable in python, first initialise the variable and then write print(variable_name)
For example :
  x=2
  print(x)

===Some facts about Variables===
* If you want to print variable name with a message, you can use , operator. For example : I want to print Hello Simran and Simran has been stored in a variable called ''name''.
  name=&quot;Simran&quot;
  print(&quot;Hello&quot;,name)
* If you change the value of a variable, it will store the latest value. For example :
  name=&quot;Simran&quot;
  name=&quot;Amit&quot;
  If you will execute the command ''print(name)'', Amit will be displayed.
* You can perform operations like addition, subtraction etc only on integral variables.

==How to execute couple of instructions on console?==
You can execute couple of instructions on console using ;. Write Statement 1;Statement 2;......and then press ''Enter''.
{{#ev:youtube|https://youtu.be/CYQCYvLE22Y|250|right}}









==How to take input from the user?==
We can take input from the user using ''input'' function. For Example : You want the user to input variable ''x'', then write x=input(&quot;Enter the value of x&quot;) and execute. Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNkVLCxZw_jcgyS-bmrIVSP

==If statement==
If statement is used to execute set of two contrary statements based on a condition. 

===Syntax===
If (Condition):
    Statement 1
else:
    Statement 2

If 'Condition' is true then 'Statement 1' will be executed otherwise 'Statement 2' will be executed.

Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNhHmg3SkK1uiutigcAbH9K

==Loops==
Loops in a programming languages are used to execute set of repetitive statements. For loop and while loop are used extensively to execute a set of looping instructions.

=== For loop Syntax ===
for i in range(10): 
    Statement

range(10) indicate that values 0 to 9 will be assigned to the variable i and for each value of i the Statement will be executed

=== While loop Syntax ===
intialisation

while(condition):
   Statement
   increment

Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNbl5jkVrrw1E5XSvm3GiCI

==Importance of Indentation in Python==
Indentation is used to indicate to what block of statements belong. Indentation of blocks convey program structure in Python.
{{#ev:youtube|https://youtu.be/pmavoW419Yc|250|right}}









----

==Spyder IDE Black Screen Solution==

----

 This issue is because of ''Help'' screen which is by default open. 
 We need to close it. So here's how you do it-


===Method 1:===

Step 1-    Try by closing current pane for that,  &quot;''press ctrl+shift+F4''&quot;  wait for few seconds things will appear on screen.

Step 2-    If it so than on menu bar go to ''view &gt; panes &gt; help'' unchecked &quot;''Help''&quot; option.

Step 3-    Make sure that &quot;''Help''&quot; under ''view &gt; panes'' is permanently unchecked. And ''Editor, Ipython console, Variable explorer''  are checked. 


===Method 2:===

Step 1-    Open spyder.

Step 2-   On that black screen randomly ''Left click'' on spyder &quot;''Menu bar''&quot; area you will get menu drop downs, You have to find Drop down with &quot;''Panes''&quot; option.

Step 3-   On &quot;''Panes''&quot; drop down unchecked the &quot;''Help''&quot;.

Step 4-   Wait for few seconds Spyder view will appear.

Step 5 -  Make sure that ''&quot;Help&quot;'' under view&gt;panes is permanently unchecked. And ''Editor, Ipython console, variable explorer'' are checked.</text>
      <sha1>nw6mw6s84vhumrltc21rzbx9pdm9whz</sha1>
    </revision>
    <revision>
      <id>688</id>
      <parentid>687</parentid>
      <timestamp>2018-08-18T07:11:22Z</timestamp>
      <contributor>
        <username>Sachinkr</username>
        <id>1743</id>
      </contributor>
      <comment>/* How to print a message? */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="5370">==Introduction to Python==
Python is a widely used programming language which allows programmers to write the program in fewer lines of code. It was designed by Guido van Rossum in 1991. Python uses an interpreter instead of compiler.Basically, the main difference between compiler and interpreter is that the compiler takes the code as 'whole' and compiles it..for example in C language and on the other side in interpreter..example: languages like Python...it interprets the written code 'line by line', and if somewhere error is found...it stops interpreting the code from there itself. Here, in our course we will be using Spyder IDE. Spyder is an integrated development environment with editing options to assist the programmers in writing programs. Spyder IDE is divided into two panes, one is console and other one is where program is written.

==How to run a program in Spyder IDE?==
Go to Run on the menu bar. Click Run-&gt;Run.

==Print statements==
Print statements help to display output on console. 
{{#ev:youtube|https://youtu.be/gECkqaOwyt0|250|right}}

===Syntax===
print()

===How to print a message?===
In order to print a message in Python, write print(&quot;message&quot;).
Single, double, triple quote can be used print()

'''Example:'''

'''Single Quote'''
Print('Hello')  
Output: Hello

'''Double Quote'''
Print(&quot;Hello&quot;)  
Output: Hello

'''Quote within quote'''
Print('Is &quot;Ram&quot; a good boy?')  
Output: Is &quot;Ram&quot; a good boy?


==Escape sequences with strings==

We can use escape sequence within strings to make output more presentable.

'''/n'''  : It will add line space.

'''/t'''  : It will add tab space(5space)

'''Example:'''

Print(&quot;Hi, /n How are you?&quot;)

Output: 

Hi,

&lt;line space&gt;

How are you?

Print(&quot;Hi, /t How are you?&quot;)

Output: 

Hi, &lt;5 spaces&gt; How are you?

==Variables==
Variables are used to store some values. Values can be strings, integers or decimal values. 
{{#ev:youtube|https://youtu.be/60iAXH1sm-Y|250|right}}
===How to print a variable?===
In order to print the value of a variable in python, first initialise the variable and then write print(variable_name)
For example :
  x=2
  print(x)

===Some facts about Variables===
* If you want to print variable name with a message, you can use , operator. For example : I want to print Hello Simran and Simran has been stored in a variable called ''name''.
  name=&quot;Simran&quot;
  print(&quot;Hello&quot;,name)
* If you change the value of a variable, it will store the latest value. For example :
  name=&quot;Simran&quot;
  name=&quot;Amit&quot;
  If you will execute the command ''print(name)'', Amit will be displayed.
* You can perform operations like addition, subtraction etc only on integral variables.

==How to execute couple of instructions on console?==
You can execute couple of instructions on console using ;. Write Statement 1;Statement 2;......and then press ''Enter''.
{{#ev:youtube|https://youtu.be/CYQCYvLE22Y|250|right}}









==How to take input from the user?==
We can take input from the user using ''input'' function. For Example : You want the user to input variable ''x'', then write x=input(&quot;Enter the value of x&quot;) and execute. Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNkVLCxZw_jcgyS-bmrIVSP

==If statement==
If statement is used to execute set of two contrary statements based on a condition. 

===Syntax===
If (Condition):
    Statement 1
else:
    Statement 2

If 'Condition' is true then 'Statement 1' will be executed otherwise 'Statement 2' will be executed.

Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNhHmg3SkK1uiutigcAbH9K

==Loops==
Loops in a programming languages are used to execute set of repetitive statements. For loop and while loop are used extensively to execute a set of looping instructions.

=== For loop Syntax ===
for i in range(10): 
    Statement

range(10) indicate that values 0 to 9 will be assigned to the variable i and for each value of i the Statement will be executed

=== While loop Syntax ===
intialisation

while(condition):
   Statement
   increment

Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNbl5jkVrrw1E5XSvm3GiCI

==Importance of Indentation in Python==
Indentation is used to indicate to what block of statements belong. Indentation of blocks convey program structure in Python.
{{#ev:youtube|https://youtu.be/pmavoW419Yc|250|right}}









----

==Spyder IDE Black Screen Solution==

----

 This issue is because of ''Help'' screen which is by default open. 
 We need to close it. So here's how you do it-


===Method 1:===

Step 1-    Try by closing current pane for that,  &quot;''press ctrl+shift+F4''&quot;  wait for few seconds things will appear on screen.

Step 2-    If it so than on menu bar go to ''view &gt; panes &gt; help'' unchecked &quot;''Help''&quot; option.

Step 3-    Make sure that &quot;''Help''&quot; under ''view &gt; panes'' is permanently unchecked. And ''Editor, Ipython console, Variable explorer''  are checked. 


===Method 2:===

Step 1-    Open spyder.

Step 2-   On that black screen randomly ''Left click'' on spyder &quot;''Menu bar''&quot; area you will get menu drop downs, You have to find Drop down with &quot;''Panes''&quot; option.

Step 3-   On &quot;''Panes''&quot; drop down unchecked the &quot;''Help''&quot;.

Step 4-   Wait for few seconds Spyder view will appear.

Step 5 -  Make sure that ''&quot;Help&quot;'' under view&gt;panes is permanently unchecked. And ''Editor, Ipython console, variable explorer'' are checked.</text>
      <sha1>nicsx8ach2xnqkzw3oddhw6khogin3o</sha1>
    </revision>
    <revision>
      <id>693</id>
      <parentid>688</parentid>
      <timestamp>2018-08-18T10:54:23Z</timestamp>
      <contributor>
        <username>Sachinkr</username>
        <id>1743</id>
      </contributor>
      <comment>/* Escape sequences with strings */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="5370">==Introduction to Python==
Python is a widely used programming language which allows programmers to write the program in fewer lines of code. It was designed by Guido van Rossum in 1991. Python uses an interpreter instead of compiler.Basically, the main difference between compiler and interpreter is that the compiler takes the code as 'whole' and compiles it..for example in C language and on the other side in interpreter..example: languages like Python...it interprets the written code 'line by line', and if somewhere error is found...it stops interpreting the code from there itself. Here, in our course we will be using Spyder IDE. Spyder is an integrated development environment with editing options to assist the programmers in writing programs. Spyder IDE is divided into two panes, one is console and other one is where program is written.

==How to run a program in Spyder IDE?==
Go to Run on the menu bar. Click Run-&gt;Run.

==Print statements==
Print statements help to display output on console. 
{{#ev:youtube|https://youtu.be/gECkqaOwyt0|250|right}}

===Syntax===
print()

===How to print a message?===
In order to print a message in Python, write print(&quot;message&quot;).
Single, double, triple quote can be used print()

'''Example:'''

'''Single Quote'''
Print('Hello')  
Output: Hello

'''Double Quote'''
Print(&quot;Hello&quot;)  
Output: Hello

'''Quote within quote'''
Print('Is &quot;Ram&quot; a good boy?')  
Output: Is &quot;Ram&quot; a good boy?


==Escape sequences with strings==

We can use escape sequence within strings to make output more presentable.

'''\n'''  : It will add line space.

'''\t'''  : It will add tab space(5space)

'''Example:'''

Print(&quot;Hi, \n How are you?&quot;)

Output: 

Hi,

&lt;line space&gt;

How are you?

Print(&quot;Hi, \t How are you?&quot;)

Output: 

Hi, &lt;5 spaces&gt; How are you?

==Variables==
Variables are used to store some values. Values can be strings, integers or decimal values. 
{{#ev:youtube|https://youtu.be/60iAXH1sm-Y|250|right}}
===How to print a variable?===
In order to print the value of a variable in python, first initialise the variable and then write print(variable_name)
For example :
  x=2
  print(x)

===Some facts about Variables===
* If you want to print variable name with a message, you can use , operator. For example : I want to print Hello Simran and Simran has been stored in a variable called ''name''.
  name=&quot;Simran&quot;
  print(&quot;Hello&quot;,name)
* If you change the value of a variable, it will store the latest value. For example :
  name=&quot;Simran&quot;
  name=&quot;Amit&quot;
  If you will execute the command ''print(name)'', Amit will be displayed.
* You can perform operations like addition, subtraction etc only on integral variables.

==How to execute couple of instructions on console?==
You can execute couple of instructions on console using ;. Write Statement 1;Statement 2;......and then press ''Enter''.
{{#ev:youtube|https://youtu.be/CYQCYvLE22Y|250|right}}









==How to take input from the user?==
We can take input from the user using ''input'' function. For Example : You want the user to input variable ''x'', then write x=input(&quot;Enter the value of x&quot;) and execute. Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNkVLCxZw_jcgyS-bmrIVSP

==If statement==
If statement is used to execute set of two contrary statements based on a condition. 

===Syntax===
If (Condition):
    Statement 1
else:
    Statement 2

If 'Condition' is true then 'Statement 1' will be executed otherwise 'Statement 2' will be executed.

Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNhHmg3SkK1uiutigcAbH9K

==Loops==
Loops in a programming languages are used to execute set of repetitive statements. For loop and while loop are used extensively to execute a set of looping instructions.

=== For loop Syntax ===
for i in range(10): 
    Statement

range(10) indicate that values 0 to 9 will be assigned to the variable i and for each value of i the Statement will be executed

=== While loop Syntax ===
intialisation

while(condition):
   Statement
   increment

Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNbl5jkVrrw1E5XSvm3GiCI

==Importance of Indentation in Python==
Indentation is used to indicate to what block of statements belong. Indentation of blocks convey program structure in Python.
{{#ev:youtube|https://youtu.be/pmavoW419Yc|250|right}}









----

==Spyder IDE Black Screen Solution==

----

 This issue is because of ''Help'' screen which is by default open. 
 We need to close it. So here's how you do it-


===Method 1:===

Step 1-    Try by closing current pane for that,  &quot;''press ctrl+shift+F4''&quot;  wait for few seconds things will appear on screen.

Step 2-    If it so than on menu bar go to ''view &gt; panes &gt; help'' unchecked &quot;''Help''&quot; option.

Step 3-    Make sure that &quot;''Help''&quot; under ''view &gt; panes'' is permanently unchecked. And ''Editor, Ipython console, Variable explorer''  are checked. 


===Method 2:===

Step 1-    Open spyder.

Step 2-   On that black screen randomly ''Left click'' on spyder &quot;''Menu bar''&quot; area you will get menu drop downs, You have to find Drop down with &quot;''Panes''&quot; option.

Step 3-   On &quot;''Panes''&quot; drop down unchecked the &quot;''Help''&quot;.

Step 4-   Wait for few seconds Spyder view will appear.

Step 5 -  Make sure that ''&quot;Help&quot;'' under view&gt;panes is permanently unchecked. And ''Editor, Ipython console, variable explorer'' are checked.</text>
      <sha1>cpdjyy779guxmqlibyr39zihryvth77</sha1>
    </revision>
    <revision>
      <id>694</id>
      <parentid>693</parentid>
      <timestamp>2018-08-18T11:03:34Z</timestamp>
      <contributor>
        <username>Sachinkr</username>
        <id>1743</id>
      </contributor>
      <comment>/* Escape sequences with strings */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="5399">==Introduction to Python==
Python is a widely used programming language which allows programmers to write the program in fewer lines of code. It was designed by Guido van Rossum in 1991. Python uses an interpreter instead of compiler.Basically, the main difference between compiler and interpreter is that the compiler takes the code as 'whole' and compiles it..for example in C language and on the other side in interpreter..example: languages like Python...it interprets the written code 'line by line', and if somewhere error is found...it stops interpreting the code from there itself. Here, in our course we will be using Spyder IDE. Spyder is an integrated development environment with editing options to assist the programmers in writing programs. Spyder IDE is divided into two panes, one is console and other one is where program is written.

==How to run a program in Spyder IDE?==
Go to Run on the menu bar. Click Run-&gt;Run.

==Print statements==
Print statements help to display output on console. 
{{#ev:youtube|https://youtu.be/gECkqaOwyt0|250|right}}

===Syntax===
print()

===How to print a message?===
In order to print a message in Python, write print(&quot;message&quot;).
Single, double, triple quote can be used print()

'''Example:'''

'''Single Quote'''
Print('Hello')  
Output: Hello

'''Double Quote'''
Print(&quot;Hello&quot;)  
Output: Hello

'''Quote within quote'''
Print('Is &quot;Ram&quot; a good boy?')  
Output: Is &quot;Ram&quot; a good boy?


==Escape sequences with strings==

We can use escape sequence within strings to make output more presentable.

'''\n'''  : It will move to next line.

'''\t'''  : It will add tab space(5space)

'''Example:'''

Print(&quot;Hi, \n How are you?&quot;)

Output: 

Hi,

How are you?

Print(&quot;Hi, \t How are you?&quot;)

Output: 

Hi, &lt;5 spaces&gt; How are you?

[[File:https://imgur.com/L93F8q6.jpg]]

==Variables==
Variables are used to store some values. Values can be strings, integers or decimal values. 
{{#ev:youtube|https://youtu.be/60iAXH1sm-Y|250|right}}
===How to print a variable?===
In order to print the value of a variable in python, first initialise the variable and then write print(variable_name)
For example :
  x=2
  print(x)

===Some facts about Variables===
* If you want to print variable name with a message, you can use , operator. For example : I want to print Hello Simran and Simran has been stored in a variable called ''name''.
  name=&quot;Simran&quot;
  print(&quot;Hello&quot;,name)
* If you change the value of a variable, it will store the latest value. For example :
  name=&quot;Simran&quot;
  name=&quot;Amit&quot;
  If you will execute the command ''print(name)'', Amit will be displayed.
* You can perform operations like addition, subtraction etc only on integral variables.

==How to execute couple of instructions on console?==
You can execute couple of instructions on console using ;. Write Statement 1;Statement 2;......and then press ''Enter''.
{{#ev:youtube|https://youtu.be/CYQCYvLE22Y|250|right}}









==How to take input from the user?==
We can take input from the user using ''input'' function. For Example : You want the user to input variable ''x'', then write x=input(&quot;Enter the value of x&quot;) and execute. Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNkVLCxZw_jcgyS-bmrIVSP

==If statement==
If statement is used to execute set of two contrary statements based on a condition. 

===Syntax===
If (Condition):
    Statement 1
else:
    Statement 2

If 'Condition' is true then 'Statement 1' will be executed otherwise 'Statement 2' will be executed.

Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNhHmg3SkK1uiutigcAbH9K

==Loops==
Loops in a programming languages are used to execute set of repetitive statements. For loop and while loop are used extensively to execute a set of looping instructions.

=== For loop Syntax ===
for i in range(10): 
    Statement

range(10) indicate that values 0 to 9 will be assigned to the variable i and for each value of i the Statement will be executed

=== While loop Syntax ===
intialisation

while(condition):
   Statement
   increment

Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNbl5jkVrrw1E5XSvm3GiCI

==Importance of Indentation in Python==
Indentation is used to indicate to what block of statements belong. Indentation of blocks convey program structure in Python.
{{#ev:youtube|https://youtu.be/pmavoW419Yc|250|right}}









----

==Spyder IDE Black Screen Solution==

----

 This issue is because of ''Help'' screen which is by default open. 
 We need to close it. So here's how you do it-


===Method 1:===

Step 1-    Try by closing current pane for that,  &quot;''press ctrl+shift+F4''&quot;  wait for few seconds things will appear on screen.

Step 2-    If it so than on menu bar go to ''view &gt; panes &gt; help'' unchecked &quot;''Help''&quot; option.

Step 3-    Make sure that &quot;''Help''&quot; under ''view &gt; panes'' is permanently unchecked. And ''Editor, Ipython console, Variable explorer''  are checked. 


===Method 2:===

Step 1-    Open spyder.

Step 2-   On that black screen randomly ''Left click'' on spyder &quot;''Menu bar''&quot; area you will get menu drop downs, You have to find Drop down with &quot;''Panes''&quot; option.

Step 3-   On &quot;''Panes''&quot; drop down unchecked the &quot;''Help''&quot;.

Step 4-   Wait for few seconds Spyder view will appear.

Step 5 -  Make sure that ''&quot;Help&quot;'' under view&gt;panes is permanently unchecked. And ''Editor, Ipython console, variable explorer'' are checked.</text>
      <sha1>1p49u3leansd2n4fqokjz40jxinywx9</sha1>
    </revision>
    <revision>
      <id>698</id>
      <parentid>694</parentid>
      <timestamp>2018-08-18T11:11:41Z</timestamp>
      <contributor>
        <username>Sachinkr</username>
        <id>1743</id>
      </contributor>
      <comment>/* Escape sequences with strings */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="5434">==Introduction to Python==
Python is a widely used programming language which allows programmers to write the program in fewer lines of code. It was designed by Guido van Rossum in 1991. Python uses an interpreter instead of compiler.Basically, the main difference between compiler and interpreter is that the compiler takes the code as 'whole' and compiles it..for example in C language and on the other side in interpreter..example: languages like Python...it interprets the written code 'line by line', and if somewhere error is found...it stops interpreting the code from there itself. Here, in our course we will be using Spyder IDE. Spyder is an integrated development environment with editing options to assist the programmers in writing programs. Spyder IDE is divided into two panes, one is console and other one is where program is written.

==How to run a program in Spyder IDE?==
Go to Run on the menu bar. Click Run-&gt;Run.

==Print statements==
Print statements help to display output on console. 
{{#ev:youtube|https://youtu.be/gECkqaOwyt0|250|right}}

===Syntax===
print()

===How to print a message?===
In order to print a message in Python, write print(&quot;message&quot;).
Single, double, triple quote can be used print()

'''Example:'''

'''Single Quote'''
Print('Hello')  
Output: Hello

'''Double Quote'''
Print(&quot;Hello&quot;)  
Output: Hello

'''Quote within quote'''
Print('Is &quot;Ram&quot; a good boy?')  
Output: Is &quot;Ram&quot; a good boy?


==Escape sequences with strings==

We can use escape sequence within strings to make output more presentable.

'''\n'''  : It will move to next line.

'''\t'''  : It will add tab space(5space)

'''\a'''  : It will play system sound once.

'''Example:'''

Print(&quot;Hi, \n How are you?&quot;)

Output: 

Hi,

How are you?

Print(&quot;Hi, \t How are you?&quot;)

Output: 

Hi, &lt;5 spaces&gt; How are you?

[[File:Escape_Sequence.jpg]]

==Variables==
Variables are used to store some values. Values can be strings, integers or decimal values. 
{{#ev:youtube|https://youtu.be/60iAXH1sm-Y|250|right}}
===How to print a variable?===
In order to print the value of a variable in python, first initialise the variable and then write print(variable_name)
For example :
  x=2
  print(x)

===Some facts about Variables===
* If you want to print variable name with a message, you can use , operator. For example : I want to print Hello Simran and Simran has been stored in a variable called ''name''.
  name=&quot;Simran&quot;
  print(&quot;Hello&quot;,name)
* If you change the value of a variable, it will store the latest value. For example :
  name=&quot;Simran&quot;
  name=&quot;Amit&quot;
  If you will execute the command ''print(name)'', Amit will be displayed.
* You can perform operations like addition, subtraction etc only on integral variables.

==How to execute couple of instructions on console?==
You can execute couple of instructions on console using ;. Write Statement 1;Statement 2;......and then press ''Enter''.
{{#ev:youtube|https://youtu.be/CYQCYvLE22Y|250|right}}









==How to take input from the user?==
We can take input from the user using ''input'' function. For Example : You want the user to input variable ''x'', then write x=input(&quot;Enter the value of x&quot;) and execute. Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNkVLCxZw_jcgyS-bmrIVSP

==If statement==
If statement is used to execute set of two contrary statements based on a condition. 

===Syntax===
If (Condition):
    Statement 1
else:
    Statement 2

If 'Condition' is true then 'Statement 1' will be executed otherwise 'Statement 2' will be executed.

Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNhHmg3SkK1uiutigcAbH9K

==Loops==
Loops in a programming languages are used to execute set of repetitive statements. For loop and while loop are used extensively to execute a set of looping instructions.

=== For loop Syntax ===
for i in range(10): 
    Statement

range(10) indicate that values 0 to 9 will be assigned to the variable i and for each value of i the Statement will be executed

=== While loop Syntax ===
intialisation

while(condition):
   Statement
   increment

Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNbl5jkVrrw1E5XSvm3GiCI

==Importance of Indentation in Python==
Indentation is used to indicate to what block of statements belong. Indentation of blocks convey program structure in Python.
{{#ev:youtube|https://youtu.be/pmavoW419Yc|250|right}}









----

==Spyder IDE Black Screen Solution==

----

 This issue is because of ''Help'' screen which is by default open. 
 We need to close it. So here's how you do it-


===Method 1:===

Step 1-    Try by closing current pane for that,  &quot;''press ctrl+shift+F4''&quot;  wait for few seconds things will appear on screen.

Step 2-    If it so than on menu bar go to ''view &gt; panes &gt; help'' unchecked &quot;''Help''&quot; option.

Step 3-    Make sure that &quot;''Help''&quot; under ''view &gt; panes'' is permanently unchecked. And ''Editor, Ipython console, Variable explorer''  are checked. 


===Method 2:===

Step 1-    Open spyder.

Step 2-   On that black screen randomly ''Left click'' on spyder &quot;''Menu bar''&quot; area you will get menu drop downs, You have to find Drop down with &quot;''Panes''&quot; option.

Step 3-   On &quot;''Panes''&quot; drop down unchecked the &quot;''Help''&quot;.

Step 4-   Wait for few seconds Spyder view will appear.

Step 5 -  Make sure that ''&quot;Help&quot;'' under view&gt;panes is permanently unchecked. And ''Editor, Ipython console, variable explorer'' are checked.</text>
      <sha1>7ejjz358dqgop52beosh6p9001orl2h</sha1>
    </revision>
    <revision>
      <id>738</id>
      <parentid>698</parentid>
      <timestamp>2018-08-19T12:08:49Z</timestamp>
      <contributor>
        <username>Mt4descentis</username>
        <id>19</id>
      </contributor>
      <comment>/* Introduction to Python */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="6305">==Introduction to Python==
Python is a widely used programming language which allows programmers to write the program in fewer lines of code. It was designed by Guido van Rossum in 1991. Python uses an interpreter instead of compiler.Basically, the main difference between compiler and interpreter is that the compiler takes the code as 'whole' and compiles it..for example in C language and on the other side in interpreter..example: languages like Python...it interprets the written code 'line by line', and if somewhere error is found...it stops interpreting the code from there itself. Here, in our course we will be using Spyder IDE. Spyder is an integrated development environment with editing options to assist the programmers in writing programs. Spyder IDE is divided into two panes, one is console and other one is where program is written.

==Installing Anaconda==
This article is all about installing and troubleshooting Anaconda and Spyder on different platforms.

===Windows===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#windows Download Link]. Make sure that you download the version compatible to your operating system architecture. If you have a 64 bit OS then you can download either 64 bit of 32 bit, but if you have 32 bit OS then you should download the 32 bit version only.

Step 2 -&gt; Double click on the .exe file that you downloaded just now and follow the instructions. If you are not sure of the installation options then just choose default.

Step 3 -&gt; To test your installation, open cmd (go to Start -&gt; then type cmd in the search bar and hit enter). There type **conda list**. You will see a list of packages installed if not, then there was some problem.

==How to run a program in Spyder IDE?==
Go to Run on the menu bar. Click Run-&gt;Run.

==Print statements==
Print statements help to display output on console. 
{{#ev:youtube|https://youtu.be/gECkqaOwyt0|250|right}}

===Syntax===
print()

===How to print a message?===
In order to print a message in Python, write print(&quot;message&quot;).
Single, double, triple quote can be used print()

'''Example:'''

'''Single Quote'''
Print('Hello')  
Output: Hello

'''Double Quote'''
Print(&quot;Hello&quot;)  
Output: Hello

'''Quote within quote'''
Print('Is &quot;Ram&quot; a good boy?')  
Output: Is &quot;Ram&quot; a good boy?


==Escape sequences with strings==

We can use escape sequence within strings to make output more presentable.

'''\n'''  : It will move to next line.

'''\t'''  : It will add tab space(5space)

'''\a'''  : It will play system sound once.

'''Example:'''

Print(&quot;Hi, \n How are you?&quot;)

Output: 

Hi,

How are you?

Print(&quot;Hi, \t How are you?&quot;)

Output: 

Hi, &lt;5 spaces&gt; How are you?

[[File:Escape_Sequence.jpg]]

==Variables==
Variables are used to store some values. Values can be strings, integers or decimal values. 
{{#ev:youtube|https://youtu.be/60iAXH1sm-Y|250|right}}
===How to print a variable?===
In order to print the value of a variable in python, first initialise the variable and then write print(variable_name)
For example :
  x=2
  print(x)

===Some facts about Variables===
* If you want to print variable name with a message, you can use , operator. For example : I want to print Hello Simran and Simran has been stored in a variable called ''name''.
  name=&quot;Simran&quot;
  print(&quot;Hello&quot;,name)
* If you change the value of a variable, it will store the latest value. For example :
  name=&quot;Simran&quot;
  name=&quot;Amit&quot;
  If you will execute the command ''print(name)'', Amit will be displayed.
* You can perform operations like addition, subtraction etc only on integral variables.

==How to execute couple of instructions on console?==
You can execute couple of instructions on console using ;. Write Statement 1;Statement 2;......and then press ''Enter''.
{{#ev:youtube|https://youtu.be/CYQCYvLE22Y|250|right}}









==How to take input from the user?==
We can take input from the user using ''input'' function. For Example : You want the user to input variable ''x'', then write x=input(&quot;Enter the value of x&quot;) and execute. Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNkVLCxZw_jcgyS-bmrIVSP

==If statement==
If statement is used to execute set of two contrary statements based on a condition. 

===Syntax===
If (Condition):
    Statement 1
else:
    Statement 2

If 'Condition' is true then 'Statement 1' will be executed otherwise 'Statement 2' will be executed.

Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNhHmg3SkK1uiutigcAbH9K

==Loops==
Loops in a programming languages are used to execute set of repetitive statements. For loop and while loop are used extensively to execute a set of looping instructions.

=== For loop Syntax ===
for i in range(10): 
    Statement

range(10) indicate that values 0 to 9 will be assigned to the variable i and for each value of i the Statement will be executed

=== While loop Syntax ===
intialisation

while(condition):
   Statement
   increment

Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNbl5jkVrrw1E5XSvm3GiCI

==Importance of Indentation in Python==
Indentation is used to indicate to what block of statements belong. Indentation of blocks convey program structure in Python.
{{#ev:youtube|https://youtu.be/pmavoW419Yc|250|right}}









----

==Spyder IDE Black Screen Solution==

----

 This issue is because of ''Help'' screen which is by default open. 
 We need to close it. So here's how you do it-


===Method 1:===

Step 1-    Try by closing current pane for that,  &quot;''press ctrl+shift+F4''&quot;  wait for few seconds things will appear on screen.

Step 2-    If it so than on menu bar go to ''view &gt; panes &gt; help'' unchecked &quot;''Help''&quot; option.

Step 3-    Make sure that &quot;''Help''&quot; under ''view &gt; panes'' is permanently unchecked. And ''Editor, Ipython console, Variable explorer''  are checked. 


===Method 2:===

Step 1-    Open spyder.

Step 2-   On that black screen randomly ''Left click'' on spyder &quot;''Menu bar''&quot; area you will get menu drop downs, You have to find Drop down with &quot;''Panes''&quot; option.

Step 3-   On &quot;''Panes''&quot; drop down unchecked the &quot;''Help''&quot;.

Step 4-   Wait for few seconds Spyder view will appear.

Step 5 -  Make sure that ''&quot;Help&quot;'' under view&gt;panes is permanently unchecked. And ''Editor, Ipython console, variable explorer'' are checked.</text>
      <sha1>fev8qbkktr5423be2lzigru5mivnkqy</sha1>
    </revision>
    <revision>
      <id>739</id>
      <parentid>738</parentid>
      <timestamp>2018-08-19T12:11:26Z</timestamp>
      <contributor>
        <username>Mt4descentis</username>
        <id>19</id>
      </contributor>
      <comment>/* Installing Anaconda */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="6307">==Introduction to Python==
Python is a widely used programming language which allows programmers to write the program in fewer lines of code. It was designed by Guido van Rossum in 1991. Python uses an interpreter instead of compiler.Basically, the main difference between compiler and interpreter is that the compiler takes the code as 'whole' and compiles it..for example in C language and on the other side in interpreter..example: languages like Python...it interprets the written code 'line by line', and if somewhere error is found...it stops interpreting the code from there itself. Here, in our course we will be using Spyder IDE. Spyder is an integrated development environment with editing options to assist the programmers in writing programs. Spyder IDE is divided into two panes, one is console and other one is where program is written.

==Installing Anaconda==
This article is all about installing and troubleshooting Anaconda and Spyder on different platforms.

===Windows===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#windows Download Link]. Make sure that you download the version compatible to your operating system architecture. If you have a 64 bit OS then you can download either 64 bit of 32 bit, but if you have 32 bit OS then you should download the 32 bit version only.

Step 2 -&gt; Double click on the .exe file that you downloaded just now and follow the instructions. If you are not sure of the installation options then just choose default.

Step 3 -&gt; To test your installation, open cmd (go to Start -&gt; then type cmd in the search bar and hit enter). There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

==How to run a program in Spyder IDE?==
Go to Run on the menu bar. Click Run-&gt;Run.

==Print statements==
Print statements help to display output on console. 
{{#ev:youtube|https://youtu.be/gECkqaOwyt0|250|right}}

===Syntax===
print()

===How to print a message?===
In order to print a message in Python, write print(&quot;message&quot;).
Single, double, triple quote can be used print()

'''Example:'''

'''Single Quote'''
Print('Hello')  
Output: Hello

'''Double Quote'''
Print(&quot;Hello&quot;)  
Output: Hello

'''Quote within quote'''
Print('Is &quot;Ram&quot; a good boy?')  
Output: Is &quot;Ram&quot; a good boy?


==Escape sequences with strings==

We can use escape sequence within strings to make output more presentable.

'''\n'''  : It will move to next line.

'''\t'''  : It will add tab space(5space)

'''\a'''  : It will play system sound once.

'''Example:'''

Print(&quot;Hi, \n How are you?&quot;)

Output: 

Hi,

How are you?

Print(&quot;Hi, \t How are you?&quot;)

Output: 

Hi, &lt;5 spaces&gt; How are you?

[[File:Escape_Sequence.jpg]]

==Variables==
Variables are used to store some values. Values can be strings, integers or decimal values. 
{{#ev:youtube|https://youtu.be/60iAXH1sm-Y|250|right}}
===How to print a variable?===
In order to print the value of a variable in python, first initialise the variable and then write print(variable_name)
For example :
  x=2
  print(x)

===Some facts about Variables===
* If you want to print variable name with a message, you can use , operator. For example : I want to print Hello Simran and Simran has been stored in a variable called ''name''.
  name=&quot;Simran&quot;
  print(&quot;Hello&quot;,name)
* If you change the value of a variable, it will store the latest value. For example :
  name=&quot;Simran&quot;
  name=&quot;Amit&quot;
  If you will execute the command ''print(name)'', Amit will be displayed.
* You can perform operations like addition, subtraction etc only on integral variables.

==How to execute couple of instructions on console?==
You can execute couple of instructions on console using ;. Write Statement 1;Statement 2;......and then press ''Enter''.
{{#ev:youtube|https://youtu.be/CYQCYvLE22Y|250|right}}









==How to take input from the user?==
We can take input from the user using ''input'' function. For Example : You want the user to input variable ''x'', then write x=input(&quot;Enter the value of x&quot;) and execute. Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNkVLCxZw_jcgyS-bmrIVSP

==If statement==
If statement is used to execute set of two contrary statements based on a condition. 

===Syntax===
If (Condition):
    Statement 1
else:
    Statement 2

If 'Condition' is true then 'Statement 1' will be executed otherwise 'Statement 2' will be executed.

Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNhHmg3SkK1uiutigcAbH9K

==Loops==
Loops in a programming languages are used to execute set of repetitive statements. For loop and while loop are used extensively to execute a set of looping instructions.

=== For loop Syntax ===
for i in range(10): 
    Statement

range(10) indicate that values 0 to 9 will be assigned to the variable i and for each value of i the Statement will be executed

=== While loop Syntax ===
intialisation

while(condition):
   Statement
   increment

Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNbl5jkVrrw1E5XSvm3GiCI

==Importance of Indentation in Python==
Indentation is used to indicate to what block of statements belong. Indentation of blocks convey program structure in Python.
{{#ev:youtube|https://youtu.be/pmavoW419Yc|250|right}}









----

==Spyder IDE Black Screen Solution==

----

 This issue is because of ''Help'' screen which is by default open. 
 We need to close it. So here's how you do it-


===Method 1:===

Step 1-    Try by closing current pane for that,  &quot;''press ctrl+shift+F4''&quot;  wait for few seconds things will appear on screen.

Step 2-    If it so than on menu bar go to ''view &gt; panes &gt; help'' unchecked &quot;''Help''&quot; option.

Step 3-    Make sure that &quot;''Help''&quot; under ''view &gt; panes'' is permanently unchecked. And ''Editor, Ipython console, Variable explorer''  are checked. 


===Method 2:===

Step 1-    Open spyder.

Step 2-   On that black screen randomly ''Left click'' on spyder &quot;''Menu bar''&quot; area you will get menu drop downs, You have to find Drop down with &quot;''Panes''&quot; option.

Step 3-   On &quot;''Panes''&quot; drop down unchecked the &quot;''Help''&quot;.

Step 4-   Wait for few seconds Spyder view will appear.

Step 5 -  Make sure that ''&quot;Help&quot;'' under view&gt;panes is permanently unchecked. And ''Editor, Ipython console, variable explorer'' are checked.</text>
      <sha1>ag4dngcqgy82doilx0y3auf6f4clhhr</sha1>
    </revision>
    <revision>
      <id>740</id>
      <parentid>739</parentid>
      <timestamp>2018-08-19T12:16:43Z</timestamp>
      <contributor>
        <username>Mt4descentis</username>
        <id>19</id>
      </contributor>
      <comment>/* Installing Anaconda */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="7209">==Introduction to Python==
Python is a widely used programming language which allows programmers to write the program in fewer lines of code. It was designed by Guido van Rossum in 1991. Python uses an interpreter instead of compiler.Basically, the main difference between compiler and interpreter is that the compiler takes the code as 'whole' and compiles it..for example in C language and on the other side in interpreter..example: languages like Python...it interprets the written code 'line by line', and if somewhere error is found...it stops interpreting the code from there itself. Here, in our course we will be using Spyder IDE. Spyder is an integrated development environment with editing options to assist the programmers in writing programs. Spyder IDE is divided into two panes, one is console and other one is where program is written.

==Installing Anaconda==
This article is all about installing and troubleshooting Anaconda and Spyder on different platforms.

===Windows===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#windows Download Link]. Make sure that you download the version compatible to your operating system architecture. If you have a 64 bit OS then you can download either 64 bit of 32 bit, but if you have 32 bit OS then you should download the 32 bit version only.

Step 2 -&gt; Double click on the .exe file that you downloaded just now and follow the instructions. If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open cmd (go to Start -&gt; then type cmd in the search bar and hit enter). There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

===Mac===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#macos Download Link].

Step 2 -&gt; Double click on the .pkg file that you just downloaded. If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

===Linux===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#linux Download Link].

Step 2 -&gt; Go to the folder where you downloaded the .sh file and type following command
 bash Anaconda-latest-Linux-x86_64.sh
If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

==How to run a program in Spyder IDE?==
Go to Run on the menu bar. Click Run-&gt;Run.

==Print statements==
Print statements help to display output on console. 
{{#ev:youtube|https://youtu.be/gECkqaOwyt0|250|right}}

===Syntax===
print()

===How to print a message?===
In order to print a message in Python, write print(&quot;message&quot;).
Single, double, triple quote can be used print()

'''Example:'''

'''Single Quote'''
Print('Hello')  
Output: Hello

'''Double Quote'''
Print(&quot;Hello&quot;)  
Output: Hello

'''Quote within quote'''
Print('Is &quot;Ram&quot; a good boy?')  
Output: Is &quot;Ram&quot; a good boy?


==Escape sequences with strings==

We can use escape sequence within strings to make output more presentable.

'''\n'''  : It will move to next line.

'''\t'''  : It will add tab space(5space)

'''\a'''  : It will play system sound once.

'''Example:'''

Print(&quot;Hi, \n How are you?&quot;)

Output: 

Hi,

How are you?

Print(&quot;Hi, \t How are you?&quot;)

Output: 

Hi, &lt;5 spaces&gt; How are you?

[[File:Escape_Sequence.jpg]]

==Variables==
Variables are used to store some values. Values can be strings, integers or decimal values. 
{{#ev:youtube|https://youtu.be/60iAXH1sm-Y|250|right}}
===How to print a variable?===
In order to print the value of a variable in python, first initialise the variable and then write print(variable_name)
For example :
  x=2
  print(x)

===Some facts about Variables===
* If you want to print variable name with a message, you can use , operator. For example : I want to print Hello Simran and Simran has been stored in a variable called ''name''.
  name=&quot;Simran&quot;
  print(&quot;Hello&quot;,name)
* If you change the value of a variable, it will store the latest value. For example :
  name=&quot;Simran&quot;
  name=&quot;Amit&quot;
  If you will execute the command ''print(name)'', Amit will be displayed.
* You can perform operations like addition, subtraction etc only on integral variables.

==How to execute couple of instructions on console?==
You can execute couple of instructions on console using ;. Write Statement 1;Statement 2;......and then press ''Enter''.
{{#ev:youtube|https://youtu.be/CYQCYvLE22Y|250|right}}









==How to take input from the user?==
We can take input from the user using ''input'' function. For Example : You want the user to input variable ''x'', then write x=input(&quot;Enter the value of x&quot;) and execute. Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNkVLCxZw_jcgyS-bmrIVSP

==If statement==
If statement is used to execute set of two contrary statements based on a condition. 

===Syntax===
If (Condition):
    Statement 1
else:
    Statement 2

If 'Condition' is true then 'Statement 1' will be executed otherwise 'Statement 2' will be executed.

Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNhHmg3SkK1uiutigcAbH9K

==Loops==
Loops in a programming languages are used to execute set of repetitive statements. For loop and while loop are used extensively to execute a set of looping instructions.

=== For loop Syntax ===
for i in range(10): 
    Statement

range(10) indicate that values 0 to 9 will be assigned to the variable i and for each value of i the Statement will be executed

=== While loop Syntax ===
intialisation

while(condition):
   Statement
   increment

Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNbl5jkVrrw1E5XSvm3GiCI

==Importance of Indentation in Python==
Indentation is used to indicate to what block of statements belong. Indentation of blocks convey program structure in Python.
{{#ev:youtube|https://youtu.be/pmavoW419Yc|250|right}}









----

==Spyder IDE Black Screen Solution==

----

 This issue is because of ''Help'' screen which is by default open. 
 We need to close it. So here's how you do it-


===Method 1:===

Step 1-    Try by closing current pane for that,  &quot;''press ctrl+shift+F4''&quot;  wait for few seconds things will appear on screen.

Step 2-    If it so than on menu bar go to ''view &gt; panes &gt; help'' unchecked &quot;''Help''&quot; option.

Step 3-    Make sure that &quot;''Help''&quot; under ''view &gt; panes'' is permanently unchecked. And ''Editor, Ipython console, Variable explorer''  are checked. 


===Method 2:===

Step 1-    Open spyder.

Step 2-   On that black screen randomly ''Left click'' on spyder &quot;''Menu bar''&quot; area you will get menu drop downs, You have to find Drop down with &quot;''Panes''&quot; option.

Step 3-   On &quot;''Panes''&quot; drop down unchecked the &quot;''Help''&quot;.

Step 4-   Wait for few seconds Spyder view will appear.

Step 5 -  Make sure that ''&quot;Help&quot;'' under view&gt;panes is permanently unchecked. And ''Editor, Ipython console, variable explorer'' are checked.</text>
      <sha1>0e3js2b7u93bd4ws1s1yeh6i7kkw0sc</sha1>
    </revision>
    <revision>
      <id>741</id>
      <parentid>740</parentid>
      <timestamp>2018-08-19T12:17:13Z</timestamp>
      <contributor>
        <username>Mt4descentis</username>
        <id>19</id>
      </contributor>
      <comment>/* Installing Anaconda */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="7211">==Introduction to Python==
Python is a widely used programming language which allows programmers to write the program in fewer lines of code. It was designed by Guido van Rossum in 1991. Python uses an interpreter instead of compiler.Basically, the main difference between compiler and interpreter is that the compiler takes the code as 'whole' and compiles it..for example in C language and on the other side in interpreter..example: languages like Python...it interprets the written code 'line by line', and if somewhere error is found...it stops interpreting the code from there itself. Here, in our course we will be using Spyder IDE. Spyder is an integrated development environment with editing options to assist the programmers in writing programs. Spyder IDE is divided into two panes, one is console and other one is where program is written.

==Installing Anaconda==
This article is all about installing and troubleshooting Anaconda and Spyder on different platforms.

===Windows===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#windows Download Link]. Make sure that you download the version compatible to your operating system architecture. If you have a 64 bit OS then you can download either 64 bit of 32 bit, but if you have 32 bit OS then you should download the 32 bit version only.

Step 2 -&gt; Double click on the .exe file that you downloaded just now and follow the instructions. If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open cmd (go to Start -&gt; then type cmd in the search bar and hit enter). There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

===Mac===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#macos Download Link].

Step 2 -&gt; Double click on the .pkg file that you just downloaded. If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

===Linux===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#linux Download Link].

Step 2 -&gt; Go to the folder where you downloaded the .sh file and type following command 
  bash Anaconda-latest-Linux-x86_64.sh
If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

==How to run a program in Spyder IDE?==
Go to Run on the menu bar. Click Run-&gt;Run.

==Print statements==
Print statements help to display output on console. 
{{#ev:youtube|https://youtu.be/gECkqaOwyt0|250|right}}

===Syntax===
print()

===How to print a message?===
In order to print a message in Python, write print(&quot;message&quot;).
Single, double, triple quote can be used print()

'''Example:'''

'''Single Quote'''
Print('Hello')  
Output: Hello

'''Double Quote'''
Print(&quot;Hello&quot;)  
Output: Hello

'''Quote within quote'''
Print('Is &quot;Ram&quot; a good boy?')  
Output: Is &quot;Ram&quot; a good boy?


==Escape sequences with strings==

We can use escape sequence within strings to make output more presentable.

'''\n'''  : It will move to next line.

'''\t'''  : It will add tab space(5space)

'''\a'''  : It will play system sound once.

'''Example:'''

Print(&quot;Hi, \n How are you?&quot;)

Output: 

Hi,

How are you?

Print(&quot;Hi, \t How are you?&quot;)

Output: 

Hi, &lt;5 spaces&gt; How are you?

[[File:Escape_Sequence.jpg]]

==Variables==
Variables are used to store some values. Values can be strings, integers or decimal values. 
{{#ev:youtube|https://youtu.be/60iAXH1sm-Y|250|right}}
===How to print a variable?===
In order to print the value of a variable in python, first initialise the variable and then write print(variable_name)
For example :
  x=2
  print(x)

===Some facts about Variables===
* If you want to print variable name with a message, you can use , operator. For example : I want to print Hello Simran and Simran has been stored in a variable called ''name''.
  name=&quot;Simran&quot;
  print(&quot;Hello&quot;,name)
* If you change the value of a variable, it will store the latest value. For example :
  name=&quot;Simran&quot;
  name=&quot;Amit&quot;
  If you will execute the command ''print(name)'', Amit will be displayed.
* You can perform operations like addition, subtraction etc only on integral variables.

==How to execute couple of instructions on console?==
You can execute couple of instructions on console using ;. Write Statement 1;Statement 2;......and then press ''Enter''.
{{#ev:youtube|https://youtu.be/CYQCYvLE22Y|250|right}}









==How to take input from the user?==
We can take input from the user using ''input'' function. For Example : You want the user to input variable ''x'', then write x=input(&quot;Enter the value of x&quot;) and execute. Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNkVLCxZw_jcgyS-bmrIVSP

==If statement==
If statement is used to execute set of two contrary statements based on a condition. 

===Syntax===
If (Condition):
    Statement 1
else:
    Statement 2

If 'Condition' is true then 'Statement 1' will be executed otherwise 'Statement 2' will be executed.

Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNhHmg3SkK1uiutigcAbH9K

==Loops==
Loops in a programming languages are used to execute set of repetitive statements. For loop and while loop are used extensively to execute a set of looping instructions.

=== For loop Syntax ===
for i in range(10): 
    Statement

range(10) indicate that values 0 to 9 will be assigned to the variable i and for each value of i the Statement will be executed

=== While loop Syntax ===
intialisation

while(condition):
   Statement
   increment

Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNbl5jkVrrw1E5XSvm3GiCI

==Importance of Indentation in Python==
Indentation is used to indicate to what block of statements belong. Indentation of blocks convey program structure in Python.
{{#ev:youtube|https://youtu.be/pmavoW419Yc|250|right}}









----

==Spyder IDE Black Screen Solution==

----

 This issue is because of ''Help'' screen which is by default open. 
 We need to close it. So here's how you do it-


===Method 1:===

Step 1-    Try by closing current pane for that,  &quot;''press ctrl+shift+F4''&quot;  wait for few seconds things will appear on screen.

Step 2-    If it so than on menu bar go to ''view &gt; panes &gt; help'' unchecked &quot;''Help''&quot; option.

Step 3-    Make sure that &quot;''Help''&quot; under ''view &gt; panes'' is permanently unchecked. And ''Editor, Ipython console, Variable explorer''  are checked. 


===Method 2:===

Step 1-    Open spyder.

Step 2-   On that black screen randomly ''Left click'' on spyder &quot;''Menu bar''&quot; area you will get menu drop downs, You have to find Drop down with &quot;''Panes''&quot; option.

Step 3-   On &quot;''Panes''&quot; drop down unchecked the &quot;''Help''&quot;.

Step 4-   Wait for few seconds Spyder view will appear.

Step 5 -  Make sure that ''&quot;Help&quot;'' under view&gt;panes is permanently unchecked. And ''Editor, Ipython console, variable explorer'' are checked.</text>
      <sha1>eudckyqupv1gpef5vln4zmeijqhb5ni</sha1>
    </revision>
    <revision>
      <id>742</id>
      <parentid>741</parentid>
      <timestamp>2018-08-19T12:17:39Z</timestamp>
      <contributor>
        <username>Mt4descentis</username>
        <id>19</id>
      </contributor>
      <comment>/* Installing Anaconda */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="7213">==Introduction to Python==
Python is a widely used programming language which allows programmers to write the program in fewer lines of code. It was designed by Guido van Rossum in 1991. Python uses an interpreter instead of compiler.Basically, the main difference between compiler and interpreter is that the compiler takes the code as 'whole' and compiles it..for example in C language and on the other side in interpreter..example: languages like Python...it interprets the written code 'line by line', and if somewhere error is found...it stops interpreting the code from there itself. Here, in our course we will be using Spyder IDE. Spyder is an integrated development environment with editing options to assist the programmers in writing programs. Spyder IDE is divided into two panes, one is console and other one is where program is written.

==Installing Anaconda==
This article is all about installing and troubleshooting Anaconda and Spyder on different platforms.

===Windows===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#windows Download Link]. Make sure that you download the version compatible to your operating system architecture. If you have a 64 bit OS then you can download either 64 bit of 32 bit, but if you have 32 bit OS then you should download the 32 bit version only.

Step 2 -&gt; Double click on the .exe file that you downloaded just now and follow the instructions. If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open cmd (go to Start -&gt; then type cmd in the search bar and hit enter). There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

===Mac===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#macos Download Link].

Step 2 -&gt; Double click on the .pkg file that you just downloaded. If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

===Linux===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#linux Download Link].

Step 2 -&gt; Go to the folder where you downloaded the .sh file and type following command 

  bash Anaconda-latest-Linux-x86_64.sh

If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

==How to run a program in Spyder IDE?==
Go to Run on the menu bar. Click Run-&gt;Run.

==Print statements==
Print statements help to display output on console. 
{{#ev:youtube|https://youtu.be/gECkqaOwyt0|250|right}}

===Syntax===
print()

===How to print a message?===
In order to print a message in Python, write print(&quot;message&quot;).
Single, double, triple quote can be used print()

'''Example:'''

'''Single Quote'''
Print('Hello')  
Output: Hello

'''Double Quote'''
Print(&quot;Hello&quot;)  
Output: Hello

'''Quote within quote'''
Print('Is &quot;Ram&quot; a good boy?')  
Output: Is &quot;Ram&quot; a good boy?


==Escape sequences with strings==

We can use escape sequence within strings to make output more presentable.

'''\n'''  : It will move to next line.

'''\t'''  : It will add tab space(5space)

'''\a'''  : It will play system sound once.

'''Example:'''

Print(&quot;Hi, \n How are you?&quot;)

Output: 

Hi,

How are you?

Print(&quot;Hi, \t How are you?&quot;)

Output: 

Hi, &lt;5 spaces&gt; How are you?

[[File:Escape_Sequence.jpg]]

==Variables==
Variables are used to store some values. Values can be strings, integers or decimal values. 
{{#ev:youtube|https://youtu.be/60iAXH1sm-Y|250|right}}
===How to print a variable?===
In order to print the value of a variable in python, first initialise the variable and then write print(variable_name)
For example :
  x=2
  print(x)

===Some facts about Variables===
* If you want to print variable name with a message, you can use , operator. For example : I want to print Hello Simran and Simran has been stored in a variable called ''name''.
  name=&quot;Simran&quot;
  print(&quot;Hello&quot;,name)
* If you change the value of a variable, it will store the latest value. For example :
  name=&quot;Simran&quot;
  name=&quot;Amit&quot;
  If you will execute the command ''print(name)'', Amit will be displayed.
* You can perform operations like addition, subtraction etc only on integral variables.

==How to execute couple of instructions on console?==
You can execute couple of instructions on console using ;. Write Statement 1;Statement 2;......and then press ''Enter''.
{{#ev:youtube|https://youtu.be/CYQCYvLE22Y|250|right}}









==How to take input from the user?==
We can take input from the user using ''input'' function. For Example : You want the user to input variable ''x'', then write x=input(&quot;Enter the value of x&quot;) and execute. Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNkVLCxZw_jcgyS-bmrIVSP

==If statement==
If statement is used to execute set of two contrary statements based on a condition. 

===Syntax===
If (Condition):
    Statement 1
else:
    Statement 2

If 'Condition' is true then 'Statement 1' will be executed otherwise 'Statement 2' will be executed.

Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNhHmg3SkK1uiutigcAbH9K

==Loops==
Loops in a programming languages are used to execute set of repetitive statements. For loop and while loop are used extensively to execute a set of looping instructions.

=== For loop Syntax ===
for i in range(10): 
    Statement

range(10) indicate that values 0 to 9 will be assigned to the variable i and for each value of i the Statement will be executed

=== While loop Syntax ===
intialisation

while(condition):
   Statement
   increment

Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNbl5jkVrrw1E5XSvm3GiCI

==Importance of Indentation in Python==
Indentation is used to indicate to what block of statements belong. Indentation of blocks convey program structure in Python.
{{#ev:youtube|https://youtu.be/pmavoW419Yc|250|right}}









----

==Spyder IDE Black Screen Solution==

----

 This issue is because of ''Help'' screen which is by default open. 
 We need to close it. So here's how you do it-


===Method 1:===

Step 1-    Try by closing current pane for that,  &quot;''press ctrl+shift+F4''&quot;  wait for few seconds things will appear on screen.

Step 2-    If it so than on menu bar go to ''view &gt; panes &gt; help'' unchecked &quot;''Help''&quot; option.

Step 3-    Make sure that &quot;''Help''&quot; under ''view &gt; panes'' is permanently unchecked. And ''Editor, Ipython console, Variable explorer''  are checked. 


===Method 2:===

Step 1-    Open spyder.

Step 2-   On that black screen randomly ''Left click'' on spyder &quot;''Menu bar''&quot; area you will get menu drop downs, You have to find Drop down with &quot;''Panes''&quot; option.

Step 3-   On &quot;''Panes''&quot; drop down unchecked the &quot;''Help''&quot;.

Step 4-   Wait for few seconds Spyder view will appear.

Step 5 -  Make sure that ''&quot;Help&quot;'' under view&gt;panes is permanently unchecked. And ''Editor, Ipython console, variable explorer'' are checked.</text>
      <sha1>iftnne02xysay5bw3mp9vcp37woy3hi</sha1>
    </revision>
    <revision>
      <id>743</id>
      <parentid>742</parentid>
      <timestamp>2018-08-19T12:18:00Z</timestamp>
      <contributor>
        <username>Mt4descentis</username>
        <id>19</id>
      </contributor>
      <comment>/* Installing Anaconda */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="7219">==Introduction to Python==
Python is a widely used programming language which allows programmers to write the program in fewer lines of code. It was designed by Guido van Rossum in 1991. Python uses an interpreter instead of compiler.Basically, the main difference between compiler and interpreter is that the compiler takes the code as 'whole' and compiles it..for example in C language and on the other side in interpreter..example: languages like Python...it interprets the written code 'line by line', and if somewhere error is found...it stops interpreting the code from there itself. Here, in our course we will be using Spyder IDE. Spyder is an integrated development environment with editing options to assist the programmers in writing programs. Spyder IDE is divided into two panes, one is console and other one is where program is written.

==Installing Anaconda==
This article is all about installing and troubleshooting Anaconda and Spyder on different platforms.

===Windows===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#windows Download Link]. Make sure that you download the version compatible to your operating system architecture. If you have a 64 bit OS then you can download either 64 bit of 32 bit, but if you have 32 bit OS then you should download the 32 bit version only.

Step 2 -&gt; Double click on the .exe file that you downloaded just now and follow the instructions. If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open cmd (go to Start -&gt; then type cmd in the search bar and hit enter). There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

===Mac===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#macos Download Link].

Step 2 -&gt; Double click on the .pkg file that you just downloaded. If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

===Linux===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#linux Download Link].

Step 2 -&gt; Go to the folder where you downloaded the .sh file and type following command 

  '''bash Anaconda-latest-Linux-x86_64.sh'''

If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

==How to run a program in Spyder IDE?==
Go to Run on the menu bar. Click Run-&gt;Run.

==Print statements==
Print statements help to display output on console. 
{{#ev:youtube|https://youtu.be/gECkqaOwyt0|250|right}}

===Syntax===
print()

===How to print a message?===
In order to print a message in Python, write print(&quot;message&quot;).
Single, double, triple quote can be used print()

'''Example:'''

'''Single Quote'''
Print('Hello')  
Output: Hello

'''Double Quote'''
Print(&quot;Hello&quot;)  
Output: Hello

'''Quote within quote'''
Print('Is &quot;Ram&quot; a good boy?')  
Output: Is &quot;Ram&quot; a good boy?


==Escape sequences with strings==

We can use escape sequence within strings to make output more presentable.

'''\n'''  : It will move to next line.

'''\t'''  : It will add tab space(5space)

'''\a'''  : It will play system sound once.

'''Example:'''

Print(&quot;Hi, \n How are you?&quot;)

Output: 

Hi,

How are you?

Print(&quot;Hi, \t How are you?&quot;)

Output: 

Hi, &lt;5 spaces&gt; How are you?

[[File:Escape_Sequence.jpg]]

==Variables==
Variables are used to store some values. Values can be strings, integers or decimal values. 
{{#ev:youtube|https://youtu.be/60iAXH1sm-Y|250|right}}
===How to print a variable?===
In order to print the value of a variable in python, first initialise the variable and then write print(variable_name)
For example :
  x=2
  print(x)

===Some facts about Variables===
* If you want to print variable name with a message, you can use , operator. For example : I want to print Hello Simran and Simran has been stored in a variable called ''name''.
  name=&quot;Simran&quot;
  print(&quot;Hello&quot;,name)
* If you change the value of a variable, it will store the latest value. For example :
  name=&quot;Simran&quot;
  name=&quot;Amit&quot;
  If you will execute the command ''print(name)'', Amit will be displayed.
* You can perform operations like addition, subtraction etc only on integral variables.

==How to execute couple of instructions on console?==
You can execute couple of instructions on console using ;. Write Statement 1;Statement 2;......and then press ''Enter''.
{{#ev:youtube|https://youtu.be/CYQCYvLE22Y|250|right}}









==How to take input from the user?==
We can take input from the user using ''input'' function. For Example : You want the user to input variable ''x'', then write x=input(&quot;Enter the value of x&quot;) and execute. Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNkVLCxZw_jcgyS-bmrIVSP

==If statement==
If statement is used to execute set of two contrary statements based on a condition. 

===Syntax===
If (Condition):
    Statement 1
else:
    Statement 2

If 'Condition' is true then 'Statement 1' will be executed otherwise 'Statement 2' will be executed.

Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNhHmg3SkK1uiutigcAbH9K

==Loops==
Loops in a programming languages are used to execute set of repetitive statements. For loop and while loop are used extensively to execute a set of looping instructions.

=== For loop Syntax ===
for i in range(10): 
    Statement

range(10) indicate that values 0 to 9 will be assigned to the variable i and for each value of i the Statement will be executed

=== While loop Syntax ===
intialisation

while(condition):
   Statement
   increment

Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNbl5jkVrrw1E5XSvm3GiCI

==Importance of Indentation in Python==
Indentation is used to indicate to what block of statements belong. Indentation of blocks convey program structure in Python.
{{#ev:youtube|https://youtu.be/pmavoW419Yc|250|right}}









----

==Spyder IDE Black Screen Solution==

----

 This issue is because of ''Help'' screen which is by default open. 
 We need to close it. So here's how you do it-


===Method 1:===

Step 1-    Try by closing current pane for that,  &quot;''press ctrl+shift+F4''&quot;  wait for few seconds things will appear on screen.

Step 2-    If it so than on menu bar go to ''view &gt; panes &gt; help'' unchecked &quot;''Help''&quot; option.

Step 3-    Make sure that &quot;''Help''&quot; under ''view &gt; panes'' is permanently unchecked. And ''Editor, Ipython console, Variable explorer''  are checked. 


===Method 2:===

Step 1-    Open spyder.

Step 2-   On that black screen randomly ''Left click'' on spyder &quot;''Menu bar''&quot; area you will get menu drop downs, You have to find Drop down with &quot;''Panes''&quot; option.

Step 3-   On &quot;''Panes''&quot; drop down unchecked the &quot;''Help''&quot;.

Step 4-   Wait for few seconds Spyder view will appear.

Step 5 -  Make sure that ''&quot;Help&quot;'' under view&gt;panes is permanently unchecked. And ''Editor, Ipython console, variable explorer'' are checked.</text>
      <sha1>swf05gbwwf3ik2olv3tkwj0an2ky16l</sha1>
    </revision>
    <revision>
      <id>744</id>
      <parentid>743</parentid>
      <timestamp>2018-08-19T12:25:35Z</timestamp>
      <contributor>
        <username>Mt4descentis</username>
        <id>19</id>
      </contributor>
      <comment>/* Installing Anaconda */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="8039">==Introduction to Python==
Python is a widely used programming language which allows programmers to write the program in fewer lines of code. It was designed by Guido van Rossum in 1991. Python uses an interpreter instead of compiler.Basically, the main difference between compiler and interpreter is that the compiler takes the code as 'whole' and compiles it..for example in C language and on the other side in interpreter..example: languages like Python...it interprets the written code 'line by line', and if somewhere error is found...it stops interpreting the code from there itself. Here, in our course we will be using Spyder IDE. Spyder is an integrated development environment with editing options to assist the programmers in writing programs. Spyder IDE is divided into two panes, one is console and other one is where program is written.

==Installing Anaconda==
This article is all about installing and troubleshooting Anaconda and Spyder on different platforms.

===Windows===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#windows Download Link]. Make sure that you download the version compatible to your operating system architecture. If you have a 64 bit OS then you can download either 64 bit of 32 bit, but if you have 32 bit OS then you should download the 32 bit version only.

Step 2 -&gt; Double click on the .exe file that you downloaded just now and follow the instructions. If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open cmd (go to Start -&gt; then type cmd in the search bar and hit enter). There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

===Mac===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#macos Download Link].

Step 2 -&gt; Double click on the .pkg file that you just downloaded. If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

===Linux===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#linux Download Link].

Step 2 -&gt; Go to the folder where you downloaded the .sh file and type following command 

  '''bash Anaconda-latest-Linux-x86_64.sh'''

If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.


==Troubleshooting Spyder==
In most of the cases, it happens that Spyder is already running and you have initiated one more instance of it. Please make sure that spyder is not running already.
If you are on Linux OS, please launch spyder through terminal. Just open the terminal and type '''spyder''' and it will launch. When Spyder opens, make sure you see Anaconda with the version written on the Ipython console. If not, try changing the path of your anaconda. Follow these steps according to your OS version.

====Windows====
[https://stackoverflow.com/questions/44597662/conda-command-is-not-recognized-on-windows-10 Click Here]

====Linux====
[https://stackoverflow.com/questions/18675907/how-to-run-conda Click Here]

====Mac====
[https://stackoverflow.com/questions/35246386/conda-command-not-found Click Here]

==How to run a program in Spyder IDE?==
Go to Run on the menu bar. Click Run-&gt;Run.

==Print statements==
Print statements help to display output on console. 
{{#ev:youtube|https://youtu.be/gECkqaOwyt0|250|right}}

===Syntax===
print()

===How to print a message?===
In order to print a message in Python, write print(&quot;message&quot;).
Single, double, triple quote can be used print()

'''Example:'''

'''Single Quote'''
Print('Hello')  
Output: Hello

'''Double Quote'''
Print(&quot;Hello&quot;)  
Output: Hello

'''Quote within quote'''
Print('Is &quot;Ram&quot; a good boy?')  
Output: Is &quot;Ram&quot; a good boy?


==Escape sequences with strings==

We can use escape sequence within strings to make output more presentable.

'''\n'''  : It will move to next line.

'''\t'''  : It will add tab space(5space)

'''\a'''  : It will play system sound once.

'''Example:'''

Print(&quot;Hi, \n How are you?&quot;)

Output: 

Hi,

How are you?

Print(&quot;Hi, \t How are you?&quot;)

Output: 

Hi, &lt;5 spaces&gt; How are you?

[[File:Escape_Sequence.jpg]]

==Variables==
Variables are used to store some values. Values can be strings, integers or decimal values. 
{{#ev:youtube|https://youtu.be/60iAXH1sm-Y|250|right}}
===How to print a variable?===
In order to print the value of a variable in python, first initialise the variable and then write print(variable_name)
For example :
  x=2
  print(x)

===Some facts about Variables===
* If you want to print variable name with a message, you can use , operator. For example : I want to print Hello Simran and Simran has been stored in a variable called ''name''.
  name=&quot;Simran&quot;
  print(&quot;Hello&quot;,name)
* If you change the value of a variable, it will store the latest value. For example :
  name=&quot;Simran&quot;
  name=&quot;Amit&quot;
  If you will execute the command ''print(name)'', Amit will be displayed.
* You can perform operations like addition, subtraction etc only on integral variables.

==How to execute couple of instructions on console?==
You can execute couple of instructions on console using ;. Write Statement 1;Statement 2;......and then press ''Enter''.
{{#ev:youtube|https://youtu.be/CYQCYvLE22Y|250|right}}









==How to take input from the user?==
We can take input from the user using ''input'' function. For Example : You want the user to input variable ''x'', then write x=input(&quot;Enter the value of x&quot;) and execute. Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNkVLCxZw_jcgyS-bmrIVSP

==If statement==
If statement is used to execute set of two contrary statements based on a condition. 

===Syntax===
If (Condition):
    Statement 1
else:
    Statement 2

If 'Condition' is true then 'Statement 1' will be executed otherwise 'Statement 2' will be executed.

Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNhHmg3SkK1uiutigcAbH9K

==Loops==
Loops in a programming languages are used to execute set of repetitive statements. For loop and while loop are used extensively to execute a set of looping instructions.

=== For loop Syntax ===
for i in range(10): 
    Statement

range(10) indicate that values 0 to 9 will be assigned to the variable i and for each value of i the Statement will be executed

=== While loop Syntax ===
intialisation

while(condition):
   Statement
   increment

Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNbl5jkVrrw1E5XSvm3GiCI

==Importance of Indentation in Python==
Indentation is used to indicate to what block of statements belong. Indentation of blocks convey program structure in Python.
{{#ev:youtube|https://youtu.be/pmavoW419Yc|250|right}}









----

==Spyder IDE Black Screen Solution==

----

 This issue is because of ''Help'' screen which is by default open. 
 We need to close it. So here's how you do it-


===Method 1:===

Step 1-    Try by closing current pane for that,  &quot;''press ctrl+shift+F4''&quot;  wait for few seconds things will appear on screen.

Step 2-    If it so than on menu bar go to ''view &gt; panes &gt; help'' unchecked &quot;''Help''&quot; option.

Step 3-    Make sure that &quot;''Help''&quot; under ''view &gt; panes'' is permanently unchecked. And ''Editor, Ipython console, Variable explorer''  are checked. 


===Method 2:===

Step 1-    Open spyder.

Step 2-   On that black screen randomly ''Left click'' on spyder &quot;''Menu bar''&quot; area you will get menu drop downs, You have to find Drop down with &quot;''Panes''&quot; option.

Step 3-   On &quot;''Panes''&quot; drop down unchecked the &quot;''Help''&quot;.

Step 4-   Wait for few seconds Spyder view will appear.

Step 5 -  Make sure that ''&quot;Help&quot;'' under view&gt;panes is permanently unchecked. And ''Editor, Ipython console, variable explorer'' are checked.</text>
      <sha1>l7w5ietr3xveriyvdhbzumvgr6vijay</sha1>
    </revision>
    <revision>
      <id>745</id>
      <parentid>744</parentid>
      <timestamp>2018-08-19T12:28:42Z</timestamp>
      <contributor>
        <username>Mt4descentis</username>
        <id>19</id>
      </contributor>
      <comment>/* Troubleshooting Spyder */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="8205">==Introduction to Python==
Python is a widely used programming language which allows programmers to write the program in fewer lines of code. It was designed by Guido van Rossum in 1991. Python uses an interpreter instead of compiler.Basically, the main difference between compiler and interpreter is that the compiler takes the code as 'whole' and compiles it..for example in C language and on the other side in interpreter..example: languages like Python...it interprets the written code 'line by line', and if somewhere error is found...it stops interpreting the code from there itself. Here, in our course we will be using Spyder IDE. Spyder is an integrated development environment with editing options to assist the programmers in writing programs. Spyder IDE is divided into two panes, one is console and other one is where program is written.

==Installing Anaconda==
This article is all about installing and troubleshooting Anaconda and Spyder on different platforms.

===Windows===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#windows Download Link]. Make sure that you download the version compatible to your operating system architecture. If you have a 64 bit OS then you can download either 64 bit of 32 bit, but if you have 32 bit OS then you should download the 32 bit version only.

Step 2 -&gt; Double click on the .exe file that you downloaded just now and follow the instructions. If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open cmd (go to Start -&gt; then type cmd in the search bar and hit enter). There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

===Mac===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#macos Download Link].

Step 2 -&gt; Double click on the .pkg file that you just downloaded. If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

===Linux===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#linux Download Link].

Step 2 -&gt; Go to the folder where you downloaded the .sh file and type following command 

  '''bash Anaconda-latest-Linux-x86_64.sh'''

If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.


==Troubleshooting Spyder==
In most of the cases, it happens that Spyder is already running and you have initiated one more instance of it. Please make sure that spyder is not running already.
If you are on Linux OS, please launch spyder through terminal. Just open the terminal and type '''spyder''' and it will launch. When Spyder opens, make sure you see Anaconda with the version written on the Ipython console. If not, try changing the path of your anaconda. Follow these steps according to your OS version.

====Windows====
[https://stackoverflow.com/questions/44597662/conda-command-is-not-recognized-on-windows-10 Click Here]

====Linux====
[https://stackoverflow.com/questions/18675907/how-to-run-conda Click Here]

====Mac====
[https://stackoverflow.com/questions/35246386/conda-command-not-found Click Here]

In most of the cases relaunching Spyder works.
A more general Troubleshoot is present [https://github.com/spyder-ide/spyder/wiki/Troubleshooting-Guide-and-FAQ Here]

==How to run a program in Spyder IDE?==
Go to Run on the menu bar. Click Run-&gt;Run.

==Print statements==
Print statements help to display output on console. 
{{#ev:youtube|https://youtu.be/gECkqaOwyt0|250|right}}

===Syntax===
print()

===How to print a message?===
In order to print a message in Python, write print(&quot;message&quot;).
Single, double, triple quote can be used print()

'''Example:'''

'''Single Quote'''
Print('Hello')  
Output: Hello

'''Double Quote'''
Print(&quot;Hello&quot;)  
Output: Hello

'''Quote within quote'''
Print('Is &quot;Ram&quot; a good boy?')  
Output: Is &quot;Ram&quot; a good boy?


==Escape sequences with strings==

We can use escape sequence within strings to make output more presentable.

'''\n'''  : It will move to next line.

'''\t'''  : It will add tab space(5space)

'''\a'''  : It will play system sound once.

'''Example:'''

Print(&quot;Hi, \n How are you?&quot;)

Output: 

Hi,

How are you?

Print(&quot;Hi, \t How are you?&quot;)

Output: 

Hi, &lt;5 spaces&gt; How are you?

[[File:Escape_Sequence.jpg]]

==Variables==
Variables are used to store some values. Values can be strings, integers or decimal values. 
{{#ev:youtube|https://youtu.be/60iAXH1sm-Y|250|right}}
===How to print a variable?===
In order to print the value of a variable in python, first initialise the variable and then write print(variable_name)
For example :
  x=2
  print(x)

===Some facts about Variables===
* If you want to print variable name with a message, you can use , operator. For example : I want to print Hello Simran and Simran has been stored in a variable called ''name''.
  name=&quot;Simran&quot;
  print(&quot;Hello&quot;,name)
* If you change the value of a variable, it will store the latest value. For example :
  name=&quot;Simran&quot;
  name=&quot;Amit&quot;
  If you will execute the command ''print(name)'', Amit will be displayed.
* You can perform operations like addition, subtraction etc only on integral variables.

==How to execute couple of instructions on console?==
You can execute couple of instructions on console using ;. Write Statement 1;Statement 2;......and then press ''Enter''.
{{#ev:youtube|https://youtu.be/CYQCYvLE22Y|250|right}}









==How to take input from the user?==
We can take input from the user using ''input'' function. For Example : You want the user to input variable ''x'', then write x=input(&quot;Enter the value of x&quot;) and execute. Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNkVLCxZw_jcgyS-bmrIVSP

==If statement==
If statement is used to execute set of two contrary statements based on a condition. 

===Syntax===
If (Condition):
    Statement 1
else:
    Statement 2

If 'Condition' is true then 'Statement 1' will be executed otherwise 'Statement 2' will be executed.

Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNhHmg3SkK1uiutigcAbH9K

==Loops==
Loops in a programming languages are used to execute set of repetitive statements. For loop and while loop are used extensively to execute a set of looping instructions.

=== For loop Syntax ===
for i in range(10): 
    Statement

range(10) indicate that values 0 to 9 will be assigned to the variable i and for each value of i the Statement will be executed

=== While loop Syntax ===
intialisation

while(condition):
   Statement
   increment

Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNbl5jkVrrw1E5XSvm3GiCI

==Importance of Indentation in Python==
Indentation is used to indicate to what block of statements belong. Indentation of blocks convey program structure in Python.
{{#ev:youtube|https://youtu.be/pmavoW419Yc|250|right}}









----

==Spyder IDE Black Screen Solution==

----

 This issue is because of ''Help'' screen which is by default open. 
 We need to close it. So here's how you do it-


===Method 1:===

Step 1-    Try by closing current pane for that,  &quot;''press ctrl+shift+F4''&quot;  wait for few seconds things will appear on screen.

Step 2-    If it so than on menu bar go to ''view &gt; panes &gt; help'' unchecked &quot;''Help''&quot; option.

Step 3-    Make sure that &quot;''Help''&quot; under ''view &gt; panes'' is permanently unchecked. And ''Editor, Ipython console, Variable explorer''  are checked. 


===Method 2:===

Step 1-    Open spyder.

Step 2-   On that black screen randomly ''Left click'' on spyder &quot;''Menu bar''&quot; area you will get menu drop downs, You have to find Drop down with &quot;''Panes''&quot; option.

Step 3-   On &quot;''Panes''&quot; drop down unchecked the &quot;''Help''&quot;.

Step 4-   Wait for few seconds Spyder view will appear.

Step 5 -  Make sure that ''&quot;Help&quot;'' under view&gt;panes is permanently unchecked. And ''Editor, Ipython console, variable explorer'' are checked.</text>
      <sha1>ntwie4v6xyf3q3g5rvdn0nenntfbdfs</sha1>
    </revision>
    <revision>
      <id>819</id>
      <parentid>745</parentid>
      <timestamp>2018-08-20T13:13:10Z</timestamp>
      <contributor>
        <username>Moonlight Dreamer</username>
        <id>2083</id>
      </contributor>
      <minor/>
      <comment>/* How to take input from the user? */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="8538">==Introduction to Python==
Python is a widely used programming language which allows programmers to write the program in fewer lines of code. It was designed by Guido van Rossum in 1991. Python uses an interpreter instead of compiler.Basically, the main difference between compiler and interpreter is that the compiler takes the code as 'whole' and compiles it..for example in C language and on the other side in interpreter..example: languages like Python...it interprets the written code 'line by line', and if somewhere error is found...it stops interpreting the code from there itself. Here, in our course we will be using Spyder IDE. Spyder is an integrated development environment with editing options to assist the programmers in writing programs. Spyder IDE is divided into two panes, one is console and other one is where program is written.

==Installing Anaconda==
This article is all about installing and troubleshooting Anaconda and Spyder on different platforms.

===Windows===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#windows Download Link]. Make sure that you download the version compatible to your operating system architecture. If you have a 64 bit OS then you can download either 64 bit of 32 bit, but if you have 32 bit OS then you should download the 32 bit version only.

Step 2 -&gt; Double click on the .exe file that you downloaded just now and follow the instructions. If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open cmd (go to Start -&gt; then type cmd in the search bar and hit enter). There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

===Mac===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#macos Download Link].

Step 2 -&gt; Double click on the .pkg file that you just downloaded. If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

===Linux===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#linux Download Link].

Step 2 -&gt; Go to the folder where you downloaded the .sh file and type following command 

  '''bash Anaconda-latest-Linux-x86_64.sh'''

If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.


==Troubleshooting Spyder==
In most of the cases, it happens that Spyder is already running and you have initiated one more instance of it. Please make sure that spyder is not running already.
If you are on Linux OS, please launch spyder through terminal. Just open the terminal and type '''spyder''' and it will launch. When Spyder opens, make sure you see Anaconda with the version written on the Ipython console. If not, try changing the path of your anaconda. Follow these steps according to your OS version.

====Windows====
[https://stackoverflow.com/questions/44597662/conda-command-is-not-recognized-on-windows-10 Click Here]

====Linux====
[https://stackoverflow.com/questions/18675907/how-to-run-conda Click Here]

====Mac====
[https://stackoverflow.com/questions/35246386/conda-command-not-found Click Here]

In most of the cases relaunching Spyder works.
A more general Troubleshoot is present [https://github.com/spyder-ide/spyder/wiki/Troubleshooting-Guide-and-FAQ Here]

==How to run a program in Spyder IDE?==
Go to Run on the menu bar. Click Run-&gt;Run.

==Print statements==
Print statements help to display output on console. 
{{#ev:youtube|https://youtu.be/gECkqaOwyt0|250|right}}

===Syntax===
print()

===How to print a message?===
In order to print a message in Python, write print(&quot;message&quot;).
Single, double, triple quote can be used print()

'''Example:'''

'''Single Quote'''
Print('Hello')  
Output: Hello

'''Double Quote'''
Print(&quot;Hello&quot;)  
Output: Hello

'''Quote within quote'''
Print('Is &quot;Ram&quot; a good boy?')  
Output: Is &quot;Ram&quot; a good boy?


==Escape sequences with strings==

We can use escape sequence within strings to make output more presentable.

'''\n'''  : It will move to next line.

'''\t'''  : It will add tab space(5space)

'''\a'''  : It will play system sound once.

'''Example:'''

Print(&quot;Hi, \n How are you?&quot;)

Output: 

Hi,

How are you?

Print(&quot;Hi, \t How are you?&quot;)

Output: 

Hi, &lt;5 spaces&gt; How are you?

[[File:Escape_Sequence.jpg]]

==Variables==
Variables are used to store some values. Values can be strings, integers or decimal values. 
{{#ev:youtube|https://youtu.be/60iAXH1sm-Y|250|right}}
===How to print a variable?===
In order to print the value of a variable in python, first initialise the variable and then write print(variable_name)
For example :
  x=2
  print(x)

===Some facts about Variables===
* If you want to print variable name with a message, you can use , operator. For example : I want to print Hello Simran and Simran has been stored in a variable called ''name''.
  name=&quot;Simran&quot;
  print(&quot;Hello&quot;,name)
* If you change the value of a variable, it will store the latest value. For example :
  name=&quot;Simran&quot;
  name=&quot;Amit&quot;
  If you will execute the command ''print(name)'', Amit will be displayed.
* You can perform operations like addition, subtraction etc only on integral variables.

==How to execute couple of instructions on console?==
You can execute couple of instructions on console using ;. Write Statement 1;Statement 2;......and then press ''Enter''.
{{#ev:youtube|https://youtu.be/CYQCYvLE22Y|250|right}}









==How to take input from the user?==
We can take input from the user using ''input'' function. For Example : You want the user to input variable ''x'', then write x=input(&quot;Enter the value of x&quot;) and execute. Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNkVLCxZw_jcgyS-bmrIVSP

And when the input you need is of data type other than string. You can do both the input function and data conversion in a single line.
For example:
Consider the program for letting in the patients
c=input(&quot;Enter (1/0)&quot;)
d=int(c)

Instead of using it in two separate lines, combine it into a single line
c=int(input(&quot;Enter (1/0)&quot;))

==If statement==
If statement is used to execute set of two contrary statements based on a condition. 

===Syntax===
If (Condition):
    Statement 1
else:
    Statement 2

If 'Condition' is true then 'Statement 1' will be executed otherwise 'Statement 2' will be executed.

Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNhHmg3SkK1uiutigcAbH9K

==Loops==
Loops in a programming languages are used to execute set of repetitive statements. For loop and while loop are used extensively to execute a set of looping instructions.

=== For loop Syntax ===
for i in range(10): 
    Statement

range(10) indicate that values 0 to 9 will be assigned to the variable i and for each value of i the Statement will be executed

=== While loop Syntax ===
intialisation

while(condition):
   Statement
   increment

Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNbl5jkVrrw1E5XSvm3GiCI

==Importance of Indentation in Python==
Indentation is used to indicate to what block of statements belong. Indentation of blocks convey program structure in Python.
{{#ev:youtube|https://youtu.be/pmavoW419Yc|250|right}}









----

==Spyder IDE Black Screen Solution==

----

 This issue is because of ''Help'' screen which is by default open. 
 We need to close it. So here's how you do it-


===Method 1:===

Step 1-    Try by closing current pane for that,  &quot;''press ctrl+shift+F4''&quot;  wait for few seconds things will appear on screen.

Step 2-    If it so than on menu bar go to ''view &gt; panes &gt; help'' unchecked &quot;''Help''&quot; option.

Step 3-    Make sure that &quot;''Help''&quot; under ''view &gt; panes'' is permanently unchecked. And ''Editor, Ipython console, Variable explorer''  are checked. 


===Method 2:===

Step 1-    Open spyder.

Step 2-   On that black screen randomly ''Left click'' on spyder &quot;''Menu bar''&quot; area you will get menu drop downs, You have to find Drop down with &quot;''Panes''&quot; option.

Step 3-   On &quot;''Panes''&quot; drop down unchecked the &quot;''Help''&quot;.

Step 4-   Wait for few seconds Spyder view will appear.

Step 5 -  Make sure that ''&quot;Help&quot;'' under view&gt;panes is permanently unchecked. And ''Editor, Ipython console, variable explorer'' are checked.</text>
      <sha1>mq8olzcj5ctv5j7o7o38687yiaatn5s</sha1>
    </revision>
    <revision>
      <id>820</id>
      <parentid>819</parentid>
      <timestamp>2018-08-20T13:14:13Z</timestamp>
      <contributor>
        <username>Moonlight Dreamer</username>
        <id>2083</id>
      </contributor>
      <minor/>
      <comment>/* How to take input from the user? */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="8555">==Introduction to Python==
Python is a widely used programming language which allows programmers to write the program in fewer lines of code. It was designed by Guido van Rossum in 1991. Python uses an interpreter instead of compiler.Basically, the main difference between compiler and interpreter is that the compiler takes the code as 'whole' and compiles it..for example in C language and on the other side in interpreter..example: languages like Python...it interprets the written code 'line by line', and if somewhere error is found...it stops interpreting the code from there itself. Here, in our course we will be using Spyder IDE. Spyder is an integrated development environment with editing options to assist the programmers in writing programs. Spyder IDE is divided into two panes, one is console and other one is where program is written.

==Installing Anaconda==
This article is all about installing and troubleshooting Anaconda and Spyder on different platforms.

===Windows===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#windows Download Link]. Make sure that you download the version compatible to your operating system architecture. If you have a 64 bit OS then you can download either 64 bit of 32 bit, but if you have 32 bit OS then you should download the 32 bit version only.

Step 2 -&gt; Double click on the .exe file that you downloaded just now and follow the instructions. If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open cmd (go to Start -&gt; then type cmd in the search bar and hit enter). There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

===Mac===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#macos Download Link].

Step 2 -&gt; Double click on the .pkg file that you just downloaded. If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

===Linux===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#linux Download Link].

Step 2 -&gt; Go to the folder where you downloaded the .sh file and type following command 

  '''bash Anaconda-latest-Linux-x86_64.sh'''

If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.


==Troubleshooting Spyder==
In most of the cases, it happens that Spyder is already running and you have initiated one more instance of it. Please make sure that spyder is not running already.
If you are on Linux OS, please launch spyder through terminal. Just open the terminal and type '''spyder''' and it will launch. When Spyder opens, make sure you see Anaconda with the version written on the Ipython console. If not, try changing the path of your anaconda. Follow these steps according to your OS version.

====Windows====
[https://stackoverflow.com/questions/44597662/conda-command-is-not-recognized-on-windows-10 Click Here]

====Linux====
[https://stackoverflow.com/questions/18675907/how-to-run-conda Click Here]

====Mac====
[https://stackoverflow.com/questions/35246386/conda-command-not-found Click Here]

In most of the cases relaunching Spyder works.
A more general Troubleshoot is present [https://github.com/spyder-ide/spyder/wiki/Troubleshooting-Guide-and-FAQ Here]

==How to run a program in Spyder IDE?==
Go to Run on the menu bar. Click Run-&gt;Run.

==Print statements==
Print statements help to display output on console. 
{{#ev:youtube|https://youtu.be/gECkqaOwyt0|250|right}}

===Syntax===
print()

===How to print a message?===
In order to print a message in Python, write print(&quot;message&quot;).
Single, double, triple quote can be used print()

'''Example:'''

'''Single Quote'''
Print('Hello')  
Output: Hello

'''Double Quote'''
Print(&quot;Hello&quot;)  
Output: Hello

'''Quote within quote'''
Print('Is &quot;Ram&quot; a good boy?')  
Output: Is &quot;Ram&quot; a good boy?


==Escape sequences with strings==

We can use escape sequence within strings to make output more presentable.

'''\n'''  : It will move to next line.

'''\t'''  : It will add tab space(5space)

'''\a'''  : It will play system sound once.

'''Example:'''

Print(&quot;Hi, \n How are you?&quot;)

Output: 

Hi,

How are you?

Print(&quot;Hi, \t How are you?&quot;)

Output: 

Hi, &lt;5 spaces&gt; How are you?

[[File:Escape_Sequence.jpg]]

==Variables==
Variables are used to store some values. Values can be strings, integers or decimal values. 
{{#ev:youtube|https://youtu.be/60iAXH1sm-Y|250|right}}
===How to print a variable?===
In order to print the value of a variable in python, first initialise the variable and then write print(variable_name)
For example :
  x=2
  print(x)

===Some facts about Variables===
* If you want to print variable name with a message, you can use , operator. For example : I want to print Hello Simran and Simran has been stored in a variable called ''name''.
  name=&quot;Simran&quot;
  print(&quot;Hello&quot;,name)
* If you change the value of a variable, it will store the latest value. For example :
  name=&quot;Simran&quot;
  name=&quot;Amit&quot;
  If you will execute the command ''print(name)'', Amit will be displayed.
* You can perform operations like addition, subtraction etc only on integral variables.

==How to execute couple of instructions on console?==
You can execute couple of instructions on console using ;. Write Statement 1;Statement 2;......and then press ''Enter''.
{{#ev:youtube|https://youtu.be/CYQCYvLE22Y|250|right}}









==How to take input from the user?==
We can take input from the user using ''input'' function. For Example : You want the user to input variable ''x'', then write x=input(&quot;Enter the value of x&quot;) and execute. Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNkVLCxZw_jcgyS-bmrIVSP

And when the input you need is of data type other than string. You can do both the input function and data conversion in a single line.
For example:
Consider the program for letting in the patients
'''c=input(&quot;Enter (1/0)&quot;)
d=int(c)'''

Instead of using it in two separate lines, combine it into a single line
'''c=int(input(&quot;Enter (1/0)&quot;))'''
----

==If statement==
If statement is used to execute set of two contrary statements based on a condition. 

===Syntax===
If (Condition):
    Statement 1
else:
    Statement 2

If 'Condition' is true then 'Statement 1' will be executed otherwise 'Statement 2' will be executed.

Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNhHmg3SkK1uiutigcAbH9K

==Loops==
Loops in a programming languages are used to execute set of repetitive statements. For loop and while loop are used extensively to execute a set of looping instructions.

=== For loop Syntax ===
for i in range(10): 
    Statement

range(10) indicate that values 0 to 9 will be assigned to the variable i and for each value of i the Statement will be executed

=== While loop Syntax ===
intialisation

while(condition):
   Statement
   increment

Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNbl5jkVrrw1E5XSvm3GiCI

==Importance of Indentation in Python==
Indentation is used to indicate to what block of statements belong. Indentation of blocks convey program structure in Python.
{{#ev:youtube|https://youtu.be/pmavoW419Yc|250|right}}









----

==Spyder IDE Black Screen Solution==

----

 This issue is because of ''Help'' screen which is by default open. 
 We need to close it. So here's how you do it-


===Method 1:===

Step 1-    Try by closing current pane for that,  &quot;''press ctrl+shift+F4''&quot;  wait for few seconds things will appear on screen.

Step 2-    If it so than on menu bar go to ''view &gt; panes &gt; help'' unchecked &quot;''Help''&quot; option.

Step 3-    Make sure that &quot;''Help''&quot; under ''view &gt; panes'' is permanently unchecked. And ''Editor, Ipython console, Variable explorer''  are checked. 


===Method 2:===

Step 1-    Open spyder.

Step 2-   On that black screen randomly ''Left click'' on spyder &quot;''Menu bar''&quot; area you will get menu drop downs, You have to find Drop down with &quot;''Panes''&quot; option.

Step 3-   On &quot;''Panes''&quot; drop down unchecked the &quot;''Help''&quot;.

Step 4-   Wait for few seconds Spyder view will appear.

Step 5 -  Make sure that ''&quot;Help&quot;'' under view&gt;panes is permanently unchecked. And ''Editor, Ipython console, variable explorer'' are checked.</text>
      <sha1>092pr6r4x9szlrm6fs07bhfv4djolum</sha1>
    </revision>
    <revision>
      <id>822</id>
      <parentid>820</parentid>
      <timestamp>2018-08-20T13:15:12Z</timestamp>
      <contributor>
        <username>Moonlight Dreamer</username>
        <id>2083</id>
      </contributor>
      <minor/>
      <comment>/* How to take input from the user? */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="8561">==Introduction to Python==
Python is a widely used programming language which allows programmers to write the program in fewer lines of code. It was designed by Guido van Rossum in 1991. Python uses an interpreter instead of compiler.Basically, the main difference between compiler and interpreter is that the compiler takes the code as 'whole' and compiles it..for example in C language and on the other side in interpreter..example: languages like Python...it interprets the written code 'line by line', and if somewhere error is found...it stops interpreting the code from there itself. Here, in our course we will be using Spyder IDE. Spyder is an integrated development environment with editing options to assist the programmers in writing programs. Spyder IDE is divided into two panes, one is console and other one is where program is written.

==Installing Anaconda==
This article is all about installing and troubleshooting Anaconda and Spyder on different platforms.

===Windows===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#windows Download Link]. Make sure that you download the version compatible to your operating system architecture. If you have a 64 bit OS then you can download either 64 bit of 32 bit, but if you have 32 bit OS then you should download the 32 bit version only.

Step 2 -&gt; Double click on the .exe file that you downloaded just now and follow the instructions. If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open cmd (go to Start -&gt; then type cmd in the search bar and hit enter). There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

===Mac===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#macos Download Link].

Step 2 -&gt; Double click on the .pkg file that you just downloaded. If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

===Linux===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#linux Download Link].

Step 2 -&gt; Go to the folder where you downloaded the .sh file and type following command 

  '''bash Anaconda-latest-Linux-x86_64.sh'''

If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.


==Troubleshooting Spyder==
In most of the cases, it happens that Spyder is already running and you have initiated one more instance of it. Please make sure that spyder is not running already.
If you are on Linux OS, please launch spyder through terminal. Just open the terminal and type '''spyder''' and it will launch. When Spyder opens, make sure you see Anaconda with the version written on the Ipython console. If not, try changing the path of your anaconda. Follow these steps according to your OS version.

====Windows====
[https://stackoverflow.com/questions/44597662/conda-command-is-not-recognized-on-windows-10 Click Here]

====Linux====
[https://stackoverflow.com/questions/18675907/how-to-run-conda Click Here]

====Mac====
[https://stackoverflow.com/questions/35246386/conda-command-not-found Click Here]

In most of the cases relaunching Spyder works.
A more general Troubleshoot is present [https://github.com/spyder-ide/spyder/wiki/Troubleshooting-Guide-and-FAQ Here]

==How to run a program in Spyder IDE?==
Go to Run on the menu bar. Click Run-&gt;Run.

==Print statements==
Print statements help to display output on console. 
{{#ev:youtube|https://youtu.be/gECkqaOwyt0|250|right}}

===Syntax===
print()

===How to print a message?===
In order to print a message in Python, write print(&quot;message&quot;).
Single, double, triple quote can be used print()

'''Example:'''

'''Single Quote'''
Print('Hello')  
Output: Hello

'''Double Quote'''
Print(&quot;Hello&quot;)  
Output: Hello

'''Quote within quote'''
Print('Is &quot;Ram&quot; a good boy?')  
Output: Is &quot;Ram&quot; a good boy?


==Escape sequences with strings==

We can use escape sequence within strings to make output more presentable.

'''\n'''  : It will move to next line.

'''\t'''  : It will add tab space(5space)

'''\a'''  : It will play system sound once.

'''Example:'''

Print(&quot;Hi, \n How are you?&quot;)

Output: 

Hi,

How are you?

Print(&quot;Hi, \t How are you?&quot;)

Output: 

Hi, &lt;5 spaces&gt; How are you?

[[File:Escape_Sequence.jpg]]

==Variables==
Variables are used to store some values. Values can be strings, integers or decimal values. 
{{#ev:youtube|https://youtu.be/60iAXH1sm-Y|250|right}}
===How to print a variable?===
In order to print the value of a variable in python, first initialise the variable and then write print(variable_name)
For example :
  x=2
  print(x)

===Some facts about Variables===
* If you want to print variable name with a message, you can use , operator. For example : I want to print Hello Simran and Simran has been stored in a variable called ''name''.
  name=&quot;Simran&quot;
  print(&quot;Hello&quot;,name)
* If you change the value of a variable, it will store the latest value. For example :
  name=&quot;Simran&quot;
  name=&quot;Amit&quot;
  If you will execute the command ''print(name)'', Amit will be displayed.
* You can perform operations like addition, subtraction etc only on integral variables.

==How to execute couple of instructions on console?==
You can execute couple of instructions on console using ;. Write Statement 1;Statement 2;......and then press ''Enter''.
{{#ev:youtube|https://youtu.be/CYQCYvLE22Y|250|right}}









==How to take input from the user?==
We can take input from the user using ''input'' function. For Example : You want the user to input variable ''x'', then write x=input(&quot;Enter the value of x&quot;) and execute. Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNkVLCxZw_jcgyS-bmrIVSP

And when the input you need is of data type other than string. You can do both the input function and data conversion in a single line.
For example:
Consider the program for letting in the patients
'''c=input(&quot;Enter (1/0)&quot;)'''
'''d=int(c)'''

Instead of using it in two separate lines, combine it into a single line
'''c=int(input(&quot;Enter (1/0)&quot;))'''
----

==If statement==
If statement is used to execute set of two contrary statements based on a condition. 

===Syntax===
If (Condition):
    Statement 1
else:
    Statement 2

If 'Condition' is true then 'Statement 1' will be executed otherwise 'Statement 2' will be executed.

Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNhHmg3SkK1uiutigcAbH9K

==Loops==
Loops in a programming languages are used to execute set of repetitive statements. For loop and while loop are used extensively to execute a set of looping instructions.

=== For loop Syntax ===
for i in range(10): 
    Statement

range(10) indicate that values 0 to 9 will be assigned to the variable i and for each value of i the Statement will be executed

=== While loop Syntax ===
intialisation

while(condition):
   Statement
   increment

Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNbl5jkVrrw1E5XSvm3GiCI

==Importance of Indentation in Python==
Indentation is used to indicate to what block of statements belong. Indentation of blocks convey program structure in Python.
{{#ev:youtube|https://youtu.be/pmavoW419Yc|250|right}}









----

==Spyder IDE Black Screen Solution==

----

 This issue is because of ''Help'' screen which is by default open. 
 We need to close it. So here's how you do it-


===Method 1:===

Step 1-    Try by closing current pane for that,  &quot;''press ctrl+shift+F4''&quot;  wait for few seconds things will appear on screen.

Step 2-    If it so than on menu bar go to ''view &gt; panes &gt; help'' unchecked &quot;''Help''&quot; option.

Step 3-    Make sure that &quot;''Help''&quot; under ''view &gt; panes'' is permanently unchecked. And ''Editor, Ipython console, Variable explorer''  are checked. 


===Method 2:===

Step 1-    Open spyder.

Step 2-   On that black screen randomly ''Left click'' on spyder &quot;''Menu bar''&quot; area you will get menu drop downs, You have to find Drop down with &quot;''Panes''&quot; option.

Step 3-   On &quot;''Panes''&quot; drop down unchecked the &quot;''Help''&quot;.

Step 4-   Wait for few seconds Spyder view will appear.

Step 5 -  Make sure that ''&quot;Help&quot;'' under view&gt;panes is permanently unchecked. And ''Editor, Ipython console, variable explorer'' are checked.</text>
      <sha1>r2ewqa0vavqe6amjce3d0otbhgfk8mu</sha1>
    </revision>
    <revision>
      <id>823</id>
      <parentid>822</parentid>
      <timestamp>2018-08-20T13:16:04Z</timestamp>
      <contributor>
        <username>Moonlight Dreamer</username>
        <id>2083</id>
      </contributor>
      <minor/>
      <comment>/* How to take input from the user? */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="8555">==Introduction to Python==
Python is a widely used programming language which allows programmers to write the program in fewer lines of code. It was designed by Guido van Rossum in 1991. Python uses an interpreter instead of compiler.Basically, the main difference between compiler and interpreter is that the compiler takes the code as 'whole' and compiles it..for example in C language and on the other side in interpreter..example: languages like Python...it interprets the written code 'line by line', and if somewhere error is found...it stops interpreting the code from there itself. Here, in our course we will be using Spyder IDE. Spyder is an integrated development environment with editing options to assist the programmers in writing programs. Spyder IDE is divided into two panes, one is console and other one is where program is written.

==Installing Anaconda==
This article is all about installing and troubleshooting Anaconda and Spyder on different platforms.

===Windows===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#windows Download Link]. Make sure that you download the version compatible to your operating system architecture. If you have a 64 bit OS then you can download either 64 bit of 32 bit, but if you have 32 bit OS then you should download the 32 bit version only.

Step 2 -&gt; Double click on the .exe file that you downloaded just now and follow the instructions. If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open cmd (go to Start -&gt; then type cmd in the search bar and hit enter). There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

===Mac===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#macos Download Link].

Step 2 -&gt; Double click on the .pkg file that you just downloaded. If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

===Linux===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#linux Download Link].

Step 2 -&gt; Go to the folder where you downloaded the .sh file and type following command 

  '''bash Anaconda-latest-Linux-x86_64.sh'''

If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.


==Troubleshooting Spyder==
In most of the cases, it happens that Spyder is already running and you have initiated one more instance of it. Please make sure that spyder is not running already.
If you are on Linux OS, please launch spyder through terminal. Just open the terminal and type '''spyder''' and it will launch. When Spyder opens, make sure you see Anaconda with the version written on the Ipython console. If not, try changing the path of your anaconda. Follow these steps according to your OS version.

====Windows====
[https://stackoverflow.com/questions/44597662/conda-command-is-not-recognized-on-windows-10 Click Here]

====Linux====
[https://stackoverflow.com/questions/18675907/how-to-run-conda Click Here]

====Mac====
[https://stackoverflow.com/questions/35246386/conda-command-not-found Click Here]

In most of the cases relaunching Spyder works.
A more general Troubleshoot is present [https://github.com/spyder-ide/spyder/wiki/Troubleshooting-Guide-and-FAQ Here]

==How to run a program in Spyder IDE?==
Go to Run on the menu bar. Click Run-&gt;Run.

==Print statements==
Print statements help to display output on console. 
{{#ev:youtube|https://youtu.be/gECkqaOwyt0|250|right}}

===Syntax===
print()

===How to print a message?===
In order to print a message in Python, write print(&quot;message&quot;).
Single, double, triple quote can be used print()

'''Example:'''

'''Single Quote'''
Print('Hello')  
Output: Hello

'''Double Quote'''
Print(&quot;Hello&quot;)  
Output: Hello

'''Quote within quote'''
Print('Is &quot;Ram&quot; a good boy?')  
Output: Is &quot;Ram&quot; a good boy?


==Escape sequences with strings==

We can use escape sequence within strings to make output more presentable.

'''\n'''  : It will move to next line.

'''\t'''  : It will add tab space(5space)

'''\a'''  : It will play system sound once.

'''Example:'''

Print(&quot;Hi, \n How are you?&quot;)

Output: 

Hi,

How are you?

Print(&quot;Hi, \t How are you?&quot;)

Output: 

Hi, &lt;5 spaces&gt; How are you?

[[File:Escape_Sequence.jpg]]

==Variables==
Variables are used to store some values. Values can be strings, integers or decimal values. 
{{#ev:youtube|https://youtu.be/60iAXH1sm-Y|250|right}}
===How to print a variable?===
In order to print the value of a variable in python, first initialise the variable and then write print(variable_name)
For example :
  x=2
  print(x)

===Some facts about Variables===
* If you want to print variable name with a message, you can use , operator. For example : I want to print Hello Simran and Simran has been stored in a variable called ''name''.
  name=&quot;Simran&quot;
  print(&quot;Hello&quot;,name)
* If you change the value of a variable, it will store the latest value. For example :
  name=&quot;Simran&quot;
  name=&quot;Amit&quot;
  If you will execute the command ''print(name)'', Amit will be displayed.
* You can perform operations like addition, subtraction etc only on integral variables.

==How to execute couple of instructions on console?==
You can execute couple of instructions on console using ;. Write Statement 1;Statement 2;......and then press ''Enter''.
{{#ev:youtube|https://youtu.be/CYQCYvLE22Y|250|right}}









==How to take input from the user?==
We can take input from the user using ''input'' function. For Example : You want the user to input variable ''x'', then write x=input(&quot;Enter the value of x&quot;) and execute. Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNkVLCxZw_jcgyS-bmrIVSP

And when the input you need is of data type other than string. You can do both the input function and data conversion in a single line.
For example:
Consider the program for letting in the patients
'''c=input(&quot;Enter (1/0)&quot;);d=int(c)'''

Instead of using it in two separate lines, combine it into a single line
'''c=int(input(&quot;Enter (1/0)&quot;))'''
----

==If statement==
If statement is used to execute set of two contrary statements based on a condition. 

===Syntax===
If (Condition):
    Statement 1
else:
    Statement 2

If 'Condition' is true then 'Statement 1' will be executed otherwise 'Statement 2' will be executed.

Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNhHmg3SkK1uiutigcAbH9K

==Loops==
Loops in a programming languages are used to execute set of repetitive statements. For loop and while loop are used extensively to execute a set of looping instructions.

=== For loop Syntax ===
for i in range(10): 
    Statement

range(10) indicate that values 0 to 9 will be assigned to the variable i and for each value of i the Statement will be executed

=== While loop Syntax ===
intialisation

while(condition):
   Statement
   increment

Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNbl5jkVrrw1E5XSvm3GiCI

==Importance of Indentation in Python==
Indentation is used to indicate to what block of statements belong. Indentation of blocks convey program structure in Python.
{{#ev:youtube|https://youtu.be/pmavoW419Yc|250|right}}









----

==Spyder IDE Black Screen Solution==

----

 This issue is because of ''Help'' screen which is by default open. 
 We need to close it. So here's how you do it-


===Method 1:===

Step 1-    Try by closing current pane for that,  &quot;''press ctrl+shift+F4''&quot;  wait for few seconds things will appear on screen.

Step 2-    If it so than on menu bar go to ''view &gt; panes &gt; help'' unchecked &quot;''Help''&quot; option.

Step 3-    Make sure that &quot;''Help''&quot; under ''view &gt; panes'' is permanently unchecked. And ''Editor, Ipython console, Variable explorer''  are checked. 


===Method 2:===

Step 1-    Open spyder.

Step 2-   On that black screen randomly ''Left click'' on spyder &quot;''Menu bar''&quot; area you will get menu drop downs, You have to find Drop down with &quot;''Panes''&quot; option.

Step 3-   On &quot;''Panes''&quot; drop down unchecked the &quot;''Help''&quot;.

Step 4-   Wait for few seconds Spyder view will appear.

Step 5 -  Make sure that ''&quot;Help&quot;'' under view&gt;panes is permanently unchecked. And ''Editor, Ipython console, variable explorer'' are checked.</text>
      <sha1>fqrbxv304crvbos2mxlm1jgif5lfxyh</sha1>
    </revision>
    <revision>
      <id>893</id>
      <parentid>823</parentid>
      <timestamp>2018-08-21T03:41:28Z</timestamp>
      <contributor>
        <username>Atulkumaruttam</username>
        <id>2194</id>
      </contributor>
      <minor/>
      <comment>/* How to print a message? */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="8554">==Introduction to Python==
Python is a widely used programming language which allows programmers to write the program in fewer lines of code. It was designed by Guido van Rossum in 1991. Python uses an interpreter instead of compiler.Basically, the main difference between compiler and interpreter is that the compiler takes the code as 'whole' and compiles it..for example in C language and on the other side in interpreter..example: languages like Python...it interprets the written code 'line by line', and if somewhere error is found...it stops interpreting the code from there itself. Here, in our course we will be using Spyder IDE. Spyder is an integrated development environment with editing options to assist the programmers in writing programs. Spyder IDE is divided into two panes, one is console and other one is where program is written.

==Installing Anaconda==
This article is all about installing and troubleshooting Anaconda and Spyder on different platforms.

===Windows===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#windows Download Link]. Make sure that you download the version compatible to your operating system architecture. If you have a 64 bit OS then you can download either 64 bit of 32 bit, but if you have 32 bit OS then you should download the 32 bit version only.

Step 2 -&gt; Double click on the .exe file that you downloaded just now and follow the instructions. If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open cmd (go to Start -&gt; then type cmd in the search bar and hit enter). There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

===Mac===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#macos Download Link].

Step 2 -&gt; Double click on the .pkg file that you just downloaded. If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

===Linux===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#linux Download Link].

Step 2 -&gt; Go to the folder where you downloaded the .sh file and type following command 

  '''bash Anaconda-latest-Linux-x86_64.sh'''

If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.


==Troubleshooting Spyder==
In most of the cases, it happens that Spyder is already running and you have initiated one more instance of it. Please make sure that spyder is not running already.
If you are on Linux OS, please launch spyder through terminal. Just open the terminal and type '''spyder''' and it will launch. When Spyder opens, make sure you see Anaconda with the version written on the Ipython console. If not, try changing the path of your anaconda. Follow these steps according to your OS version.

====Windows====
[https://stackoverflow.com/questions/44597662/conda-command-is-not-recognized-on-windows-10 Click Here]

====Linux====
[https://stackoverflow.com/questions/18675907/how-to-run-conda Click Here]

====Mac====
[https://stackoverflow.com/questions/35246386/conda-command-not-found Click Here]

In most of the cases relaunching Spyder works.
A more general Troubleshoot is present [https://github.com/spyder-ide/spyder/wiki/Troubleshooting-Guide-and-FAQ Here]

==How to run a program in Spyder IDE?==
Go to Run on the menu bar. Click Run-&gt;Run.

==Print statements==
Print statements help to display output on console. 
{{#ev:youtube|https://youtu.be/gECkqaOwyt0|250|right}}

===Syntax===
print()

===How to print a message?===
In order to print a message in Python, write print(&quot;message&quot;).
Single, double, triple quote can be used print()

'''Example:'''

'''Single Quote'''
print('Hello')  
Output: Hello

'''Double Quote'''
print(&quot;Hello&quot;)  
Output: Hello

'''Quote within quote'''
print('Is &quot;Ram&quot; a good boy?')  
Output: Is &quot;Ram&quot; a good boy?

==Escape sequences with strings==

We can use escape sequence within strings to make output more presentable.

'''\n'''  : It will move to next line.

'''\t'''  : It will add tab space(5space)

'''\a'''  : It will play system sound once.

'''Example:'''

Print(&quot;Hi, \n How are you?&quot;)

Output: 

Hi,

How are you?

Print(&quot;Hi, \t How are you?&quot;)

Output: 

Hi, &lt;5 spaces&gt; How are you?

[[File:Escape_Sequence.jpg]]

==Variables==
Variables are used to store some values. Values can be strings, integers or decimal values. 
{{#ev:youtube|https://youtu.be/60iAXH1sm-Y|250|right}}
===How to print a variable?===
In order to print the value of a variable in python, first initialise the variable and then write print(variable_name)
For example :
  x=2
  print(x)

===Some facts about Variables===
* If you want to print variable name with a message, you can use , operator. For example : I want to print Hello Simran and Simran has been stored in a variable called ''name''.
  name=&quot;Simran&quot;
  print(&quot;Hello&quot;,name)
* If you change the value of a variable, it will store the latest value. For example :
  name=&quot;Simran&quot;
  name=&quot;Amit&quot;
  If you will execute the command ''print(name)'', Amit will be displayed.
* You can perform operations like addition, subtraction etc only on integral variables.

==How to execute couple of instructions on console?==
You can execute couple of instructions on console using ;. Write Statement 1;Statement 2;......and then press ''Enter''.
{{#ev:youtube|https://youtu.be/CYQCYvLE22Y|250|right}}









==How to take input from the user?==
We can take input from the user using ''input'' function. For Example : You want the user to input variable ''x'', then write x=input(&quot;Enter the value of x&quot;) and execute. Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNkVLCxZw_jcgyS-bmrIVSP

And when the input you need is of data type other than string. You can do both the input function and data conversion in a single line.
For example:
Consider the program for letting in the patients
'''c=input(&quot;Enter (1/0)&quot;);d=int(c)'''

Instead of using it in two separate lines, combine it into a single line
'''c=int(input(&quot;Enter (1/0)&quot;))'''
----

==If statement==
If statement is used to execute set of two contrary statements based on a condition. 

===Syntax===
If (Condition):
    Statement 1
else:
    Statement 2

If 'Condition' is true then 'Statement 1' will be executed otherwise 'Statement 2' will be executed.

Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNhHmg3SkK1uiutigcAbH9K

==Loops==
Loops in a programming languages are used to execute set of repetitive statements. For loop and while loop are used extensively to execute a set of looping instructions.

=== For loop Syntax ===
for i in range(10): 
    Statement

range(10) indicate that values 0 to 9 will be assigned to the variable i and for each value of i the Statement will be executed

=== While loop Syntax ===
intialisation

while(condition):
   Statement
   increment

Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNbl5jkVrrw1E5XSvm3GiCI

==Importance of Indentation in Python==
Indentation is used to indicate to what block of statements belong. Indentation of blocks convey program structure in Python.
{{#ev:youtube|https://youtu.be/pmavoW419Yc|250|right}}









----

==Spyder IDE Black Screen Solution==

----

 This issue is because of ''Help'' screen which is by default open. 
 We need to close it. So here's how you do it-


===Method 1:===

Step 1-    Try by closing current pane for that,  &quot;''press ctrl+shift+F4''&quot;  wait for few seconds things will appear on screen.

Step 2-    If it so than on menu bar go to ''view &gt; panes &gt; help'' unchecked &quot;''Help''&quot; option.

Step 3-    Make sure that &quot;''Help''&quot; under ''view &gt; panes'' is permanently unchecked. And ''Editor, Ipython console, Variable explorer''  are checked. 


===Method 2:===

Step 1-    Open spyder.

Step 2-   On that black screen randomly ''Left click'' on spyder &quot;''Menu bar''&quot; area you will get menu drop downs, You have to find Drop down with &quot;''Panes''&quot; option.

Step 3-   On &quot;''Panes''&quot; drop down unchecked the &quot;''Help''&quot;.

Step 4-   Wait for few seconds Spyder view will appear.

Step 5 -  Make sure that ''&quot;Help&quot;'' under view&gt;panes is permanently unchecked. And ''Editor, Ipython console, variable explorer'' are checked.</text>
      <sha1>q7c54k4l3d0a3qo0lae2109zet0yooy</sha1>
    </revision>
    <revision>
      <id>1280</id>
      <parentid>893</parentid>
      <timestamp>2018-08-28T14:24:13Z</timestamp>
      <contributor>
        <username>User-programmer</username>
        <id>2275</id>
      </contributor>
      <comment>/* Introduction to Python */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="9045">==Introduction to Python==
Python is a widely used programming language which allows programmers to write the program in fewer lines of code. It was designed by Guido van Rossum in 1991. Python uses an interpreter instead of compiler.Basically, the main difference between compiler and interpreter is that the compiler takes the code as 'whole' and compiles it..for example in C language and on the other side in interpreter..example: languages like Python...it interprets the written code 'line by line', and if somewhere error is found...it stops interpreting the code from there itself. Here, in our course we will be using Spyder IDE. Spyder is an integrated development environment with editing options to assist the programmers in writing programs. Spyder IDE is divided into two panes, one is console and other one is where program is written.




Python works on different platforms (Windows, Mac, Linux, Raspberry Pi, etc).
Python has a simple syntax similar to the English language.
Python has syntax that allows developers to write programs with fewer lines than some other programming languages.
Python runs on an interpreter system, meaning that code can be executed as soon as it is written. This means that prototyping can be very quick.
Python can be treated in a procedural way, an object-orientated way or a functional way.

==Installing Anaconda==
This article is all about installing and troubleshooting Anaconda and Spyder on different platforms.

===Windows===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#windows Download Link]. Make sure that you download the version compatible to your operating system architecture. If you have a 64 bit OS then you can download either 64 bit of 32 bit, but if you have 32 bit OS then you should download the 32 bit version only.

Step 2 -&gt; Double click on the .exe file that you downloaded just now and follow the instructions. If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open cmd (go to Start -&gt; then type cmd in the search bar and hit enter). There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

===Mac===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#macos Download Link].

Step 2 -&gt; Double click on the .pkg file that you just downloaded. If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

===Linux===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#linux Download Link].

Step 2 -&gt; Go to the folder where you downloaded the .sh file and type following command 

  '''bash Anaconda-latest-Linux-x86_64.sh'''

If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.


==Troubleshooting Spyder==
In most of the cases, it happens that Spyder is already running and you have initiated one more instance of it. Please make sure that spyder is not running already.
If you are on Linux OS, please launch spyder through terminal. Just open the terminal and type '''spyder''' and it will launch. When Spyder opens, make sure you see Anaconda with the version written on the Ipython console. If not, try changing the path of your anaconda. Follow these steps according to your OS version.

====Windows====
[https://stackoverflow.com/questions/44597662/conda-command-is-not-recognized-on-windows-10 Click Here]

====Linux====
[https://stackoverflow.com/questions/18675907/how-to-run-conda Click Here]

====Mac====
[https://stackoverflow.com/questions/35246386/conda-command-not-found Click Here]

In most of the cases relaunching Spyder works.
A more general Troubleshoot is present [https://github.com/spyder-ide/spyder/wiki/Troubleshooting-Guide-and-FAQ Here]

==How to run a program in Spyder IDE?==
Go to Run on the menu bar. Click Run-&gt;Run.

==Print statements==
Print statements help to display output on console. 
{{#ev:youtube|https://youtu.be/gECkqaOwyt0|250|right}}

===Syntax===
print()

===How to print a message?===
In order to print a message in Python, write print(&quot;message&quot;).
Single, double, triple quote can be used print()

'''Example:'''

'''Single Quote'''
print('Hello')  
Output: Hello

'''Double Quote'''
print(&quot;Hello&quot;)  
Output: Hello

'''Quote within quote'''
print('Is &quot;Ram&quot; a good boy?')  
Output: Is &quot;Ram&quot; a good boy?

==Escape sequences with strings==

We can use escape sequence within strings to make output more presentable.

'''\n'''  : It will move to next line.

'''\t'''  : It will add tab space(5space)

'''\a'''  : It will play system sound once.

'''Example:'''

Print(&quot;Hi, \n How are you?&quot;)

Output: 

Hi,

How are you?

Print(&quot;Hi, \t How are you?&quot;)

Output: 

Hi, &lt;5 spaces&gt; How are you?

[[File:Escape_Sequence.jpg]]

==Variables==
Variables are used to store some values. Values can be strings, integers or decimal values. 
{{#ev:youtube|https://youtu.be/60iAXH1sm-Y|250|right}}
===How to print a variable?===
In order to print the value of a variable in python, first initialise the variable and then write print(variable_name)
For example :
  x=2
  print(x)

===Some facts about Variables===
* If you want to print variable name with a message, you can use , operator. For example : I want to print Hello Simran and Simran has been stored in a variable called ''name''.
  name=&quot;Simran&quot;
  print(&quot;Hello&quot;,name)
* If you change the value of a variable, it will store the latest value. For example :
  name=&quot;Simran&quot;
  name=&quot;Amit&quot;
  If you will execute the command ''print(name)'', Amit will be displayed.
* You can perform operations like addition, subtraction etc only on integral variables.

==How to execute couple of instructions on console?==
You can execute couple of instructions on console using ;. Write Statement 1;Statement 2;......and then press ''Enter''.
{{#ev:youtube|https://youtu.be/CYQCYvLE22Y|250|right}}









==How to take input from the user?==
We can take input from the user using ''input'' function. For Example : You want the user to input variable ''x'', then write x=input(&quot;Enter the value of x&quot;) and execute. Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNkVLCxZw_jcgyS-bmrIVSP

And when the input you need is of data type other than string. You can do both the input function and data conversion in a single line.
For example:
Consider the program for letting in the patients
'''c=input(&quot;Enter (1/0)&quot;);d=int(c)'''

Instead of using it in two separate lines, combine it into a single line
'''c=int(input(&quot;Enter (1/0)&quot;))'''
----

==If statement==
If statement is used to execute set of two contrary statements based on a condition. 

===Syntax===
If (Condition):
    Statement 1
else:
    Statement 2

If 'Condition' is true then 'Statement 1' will be executed otherwise 'Statement 2' will be executed.

Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNhHmg3SkK1uiutigcAbH9K

==Loops==
Loops in a programming languages are used to execute set of repetitive statements. For loop and while loop are used extensively to execute a set of looping instructions.

=== For loop Syntax ===
for i in range(10): 
    Statement

range(10) indicate that values 0 to 9 will be assigned to the variable i and for each value of i the Statement will be executed

=== While loop Syntax ===
intialisation

while(condition):
   Statement
   increment

Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNbl5jkVrrw1E5XSvm3GiCI

==Importance of Indentation in Python==
Indentation is used to indicate to what block of statements belong. Indentation of blocks convey program structure in Python.
{{#ev:youtube|https://youtu.be/pmavoW419Yc|250|right}}









----

==Spyder IDE Black Screen Solution==

----

 This issue is because of ''Help'' screen which is by default open. 
 We need to close it. So here's how you do it-


===Method 1:===

Step 1-    Try by closing current pane for that,  &quot;''press ctrl+shift+F4''&quot;  wait for few seconds things will appear on screen.

Step 2-    If it so than on menu bar go to ''view &gt; panes &gt; help'' unchecked &quot;''Help''&quot; option.

Step 3-    Make sure that &quot;''Help''&quot; under ''view &gt; panes'' is permanently unchecked. And ''Editor, Ipython console, Variable explorer''  are checked. 


===Method 2:===

Step 1-    Open spyder.

Step 2-   On that black screen randomly ''Left click'' on spyder &quot;''Menu bar''&quot; area you will get menu drop downs, You have to find Drop down with &quot;''Panes''&quot; option.

Step 3-   On &quot;''Panes''&quot; drop down unchecked the &quot;''Help''&quot;.

Step 4-   Wait for few seconds Spyder view will appear.

Step 5 -  Make sure that ''&quot;Help&quot;'' under view&gt;panes is permanently unchecked. And ''Editor, Ipython console, variable explorer'' are checked.</text>
      <sha1>rfccreiqqit9pwxwjcqk2ox53oqd6iy</sha1>
    </revision>
    <revision>
      <id>1285</id>
      <parentid>1280</parentid>
      <timestamp>2018-08-28T17:09:06Z</timestamp>
      <contributor>
        <username>GK</username>
        <id>2143</id>
      </contributor>
      <minor/>
      <comment>/* Importance of Indentation in Python */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="9327">==Introduction to Python==
Python is a widely used programming language which allows programmers to write the program in fewer lines of code. It was designed by Guido van Rossum in 1991. Python uses an interpreter instead of compiler.Basically, the main difference between compiler and interpreter is that the compiler takes the code as 'whole' and compiles it..for example in C language and on the other side in interpreter..example: languages like Python...it interprets the written code 'line by line', and if somewhere error is found...it stops interpreting the code from there itself. Here, in our course we will be using Spyder IDE. Spyder is an integrated development environment with editing options to assist the programmers in writing programs. Spyder IDE is divided into two panes, one is console and other one is where program is written.




Python works on different platforms (Windows, Mac, Linux, Raspberry Pi, etc).
Python has a simple syntax similar to the English language.
Python has syntax that allows developers to write programs with fewer lines than some other programming languages.
Python runs on an interpreter system, meaning that code can be executed as soon as it is written. This means that prototyping can be very quick.
Python can be treated in a procedural way, an object-orientated way or a functional way.

==Installing Anaconda==
This article is all about installing and troubleshooting Anaconda and Spyder on different platforms.

===Windows===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#windows Download Link]. Make sure that you download the version compatible to your operating system architecture. If you have a 64 bit OS then you can download either 64 bit of 32 bit, but if you have 32 bit OS then you should download the 32 bit version only.

Step 2 -&gt; Double click on the .exe file that you downloaded just now and follow the instructions. If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open cmd (go to Start -&gt; then type cmd in the search bar and hit enter). There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

===Mac===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#macos Download Link].

Step 2 -&gt; Double click on the .pkg file that you just downloaded. If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

===Linux===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#linux Download Link].

Step 2 -&gt; Go to the folder where you downloaded the .sh file and type following command 

  '''bash Anaconda-latest-Linux-x86_64.sh'''

If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.


==Troubleshooting Spyder==
In most of the cases, it happens that Spyder is already running and you have initiated one more instance of it. Please make sure that spyder is not running already.
If you are on Linux OS, please launch spyder through terminal. Just open the terminal and type '''spyder''' and it will launch. When Spyder opens, make sure you see Anaconda with the version written on the Ipython console. If not, try changing the path of your anaconda. Follow these steps according to your OS version.

====Windows====
[https://stackoverflow.com/questions/44597662/conda-command-is-not-recognized-on-windows-10 Click Here]

====Linux====
[https://stackoverflow.com/questions/18675907/how-to-run-conda Click Here]

====Mac====
[https://stackoverflow.com/questions/35246386/conda-command-not-found Click Here]

In most of the cases relaunching Spyder works.
A more general Troubleshoot is present [https://github.com/spyder-ide/spyder/wiki/Troubleshooting-Guide-and-FAQ Here]

==How to run a program in Spyder IDE?==
Go to Run on the menu bar. Click Run-&gt;Run.

==Print statements==
Print statements help to display output on console. 
{{#ev:youtube|https://youtu.be/gECkqaOwyt0|250|right}}

===Syntax===
print()

===How to print a message?===
In order to print a message in Python, write print(&quot;message&quot;).
Single, double, triple quote can be used print()

'''Example:'''

'''Single Quote'''
print('Hello')  
Output: Hello

'''Double Quote'''
print(&quot;Hello&quot;)  
Output: Hello

'''Quote within quote'''
print('Is &quot;Ram&quot; a good boy?')  
Output: Is &quot;Ram&quot; a good boy?

==Escape sequences with strings==

We can use escape sequence within strings to make output more presentable.

'''\n'''  : It will move to next line.

'''\t'''  : It will add tab space(5space)

'''\a'''  : It will play system sound once.

'''Example:'''

Print(&quot;Hi, \n How are you?&quot;)

Output: 

Hi,

How are you?

Print(&quot;Hi, \t How are you?&quot;)

Output: 

Hi, &lt;5 spaces&gt; How are you?

[[File:Escape_Sequence.jpg]]

==Variables==
Variables are used to store some values. Values can be strings, integers or decimal values. 
{{#ev:youtube|https://youtu.be/60iAXH1sm-Y|250|right}}
===How to print a variable?===
In order to print the value of a variable in python, first initialise the variable and then write print(variable_name)
For example :
  x=2
  print(x)

===Some facts about Variables===
* If you want to print variable name with a message, you can use , operator. For example : I want to print Hello Simran and Simran has been stored in a variable called ''name''.
  name=&quot;Simran&quot;
  print(&quot;Hello&quot;,name)
* If you change the value of a variable, it will store the latest value. For example :
  name=&quot;Simran&quot;
  name=&quot;Amit&quot;
  If you will execute the command ''print(name)'', Amit will be displayed.
* You can perform operations like addition, subtraction etc only on integral variables.

==How to execute couple of instructions on console?==
You can execute couple of instructions on console using ;. Write Statement 1;Statement 2;......and then press ''Enter''.
{{#ev:youtube|https://youtu.be/CYQCYvLE22Y|250|right}}









==How to take input from the user?==
We can take input from the user using ''input'' function. For Example : You want the user to input variable ''x'', then write x=input(&quot;Enter the value of x&quot;) and execute. Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNkVLCxZw_jcgyS-bmrIVSP

And when the input you need is of data type other than string. You can do both the input function and data conversion in a single line.
For example:
Consider the program for letting in the patients
'''c=input(&quot;Enter (1/0)&quot;);d=int(c)'''

Instead of using it in two separate lines, combine it into a single line
'''c=int(input(&quot;Enter (1/0)&quot;))'''
----

==If statement==
If statement is used to execute set of two contrary statements based on a condition. 

===Syntax===
If (Condition):
    Statement 1
else:
    Statement 2

If 'Condition' is true then 'Statement 1' will be executed otherwise 'Statement 2' will be executed.

Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNhHmg3SkK1uiutigcAbH9K

==Loops==
Loops in a programming languages are used to execute set of repetitive statements. For loop and while loop are used extensively to execute a set of looping instructions.

=== For loop Syntax ===
for i in range(10): 
    Statement

range(10) indicate that values 0 to 9 will be assigned to the variable i and for each value of i the Statement will be executed

=== While loop Syntax ===
intialisation

while(condition):
   Statement
   increment

Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNbl5jkVrrw1E5XSvm3GiCI

==Importance of Indentation in Python==
Indentation is used to indicate to what block of statements belong. Indentation of blocks convey program structure in Python. Indentation in Python is used to refer a group/block of code/statements. In C++ we use { and } (curly brackets) to group a set of statements. But in Python, there are no such brackets used. Instead of such brackets used in other programming languages, we use indentation in Python.
{{#ev:youtube|https://youtu.be/pmavoW419Yc|250|right}}









----

==Spyder IDE Black Screen Solution==

----

 This issue is because of ''Help'' screen which is by default open. 
 We need to close it. So here's how you do it-


===Method 1:===

Step 1-    Try by closing current pane for that,  &quot;''press ctrl+shift+F4''&quot;  wait for few seconds things will appear on screen.

Step 2-    If it so than on menu bar go to ''view &gt; panes &gt; help'' unchecked &quot;''Help''&quot; option.

Step 3-    Make sure that &quot;''Help''&quot; under ''view &gt; panes'' is permanently unchecked. And ''Editor, Ipython console, Variable explorer''  are checked. 


===Method 2:===

Step 1-    Open spyder.

Step 2-   On that black screen randomly ''Left click'' on spyder &quot;''Menu bar''&quot; area you will get menu drop downs, You have to find Drop down with &quot;''Panes''&quot; option.

Step 3-   On &quot;''Panes''&quot; drop down unchecked the &quot;''Help''&quot;.

Step 4-   Wait for few seconds Spyder view will appear.

Step 5 -  Make sure that ''&quot;Help&quot;'' under view&gt;panes is permanently unchecked. And ''Editor, Ipython console, variable explorer'' are checked.</text>
      <sha1>jibqgz08y4op4f1jjtllhu2eaoj8fil</sha1>
    </revision>
    <revision>
      <id>1313</id>
      <parentid>1285</parentid>
      <timestamp>2018-08-29T13:54:53Z</timestamp>
      <contributor>
        <username>V.Lalitha</username>
        <id>618</id>
      </contributor>
      <comment>/* How to take input from the user? */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="9439">==Introduction to Python==
Python is a widely used programming language which allows programmers to write the program in fewer lines of code. It was designed by Guido van Rossum in 1991. Python uses an interpreter instead of compiler.Basically, the main difference between compiler and interpreter is that the compiler takes the code as 'whole' and compiles it..for example in C language and on the other side in interpreter..example: languages like Python...it interprets the written code 'line by line', and if somewhere error is found...it stops interpreting the code from there itself. Here, in our course we will be using Spyder IDE. Spyder is an integrated development environment with editing options to assist the programmers in writing programs. Spyder IDE is divided into two panes, one is console and other one is where program is written.




Python works on different platforms (Windows, Mac, Linux, Raspberry Pi, etc).
Python has a simple syntax similar to the English language.
Python has syntax that allows developers to write programs with fewer lines than some other programming languages.
Python runs on an interpreter system, meaning that code can be executed as soon as it is written. This means that prototyping can be very quick.
Python can be treated in a procedural way, an object-orientated way or a functional way.

==Installing Anaconda==
This article is all about installing and troubleshooting Anaconda and Spyder on different platforms.

===Windows===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#windows Download Link]. Make sure that you download the version compatible to your operating system architecture. If you have a 64 bit OS then you can download either 64 bit of 32 bit, but if you have 32 bit OS then you should download the 32 bit version only.

Step 2 -&gt; Double click on the .exe file that you downloaded just now and follow the instructions. If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open cmd (go to Start -&gt; then type cmd in the search bar and hit enter). There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

===Mac===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#macos Download Link].

Step 2 -&gt; Double click on the .pkg file that you just downloaded. If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

===Linux===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#linux Download Link].

Step 2 -&gt; Go to the folder where you downloaded the .sh file and type following command 

  '''bash Anaconda-latest-Linux-x86_64.sh'''

If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.


==Troubleshooting Spyder==
In most of the cases, it happens that Spyder is already running and you have initiated one more instance of it. Please make sure that spyder is not running already.
If you are on Linux OS, please launch spyder through terminal. Just open the terminal and type '''spyder''' and it will launch. When Spyder opens, make sure you see Anaconda with the version written on the Ipython console. If not, try changing the path of your anaconda. Follow these steps according to your OS version.

====Windows====
[https://stackoverflow.com/questions/44597662/conda-command-is-not-recognized-on-windows-10 Click Here]

====Linux====
[https://stackoverflow.com/questions/18675907/how-to-run-conda Click Here]

====Mac====
[https://stackoverflow.com/questions/35246386/conda-command-not-found Click Here]

In most of the cases relaunching Spyder works.
A more general Troubleshoot is present [https://github.com/spyder-ide/spyder/wiki/Troubleshooting-Guide-and-FAQ Here]

==How to run a program in Spyder IDE?==
Go to Run on the menu bar. Click Run-&gt;Run.

==Print statements==
Print statements help to display output on console. 
{{#ev:youtube|https://youtu.be/gECkqaOwyt0|250|right}}

===Syntax===
print()

===How to print a message?===
In order to print a message in Python, write print(&quot;message&quot;).
Single, double, triple quote can be used print()

'''Example:'''

'''Single Quote'''
print('Hello')  
Output: Hello

'''Double Quote'''
print(&quot;Hello&quot;)  
Output: Hello

'''Quote within quote'''
print('Is &quot;Ram&quot; a good boy?')  
Output: Is &quot;Ram&quot; a good boy?

==Escape sequences with strings==

We can use escape sequence within strings to make output more presentable.

'''\n'''  : It will move to next line.

'''\t'''  : It will add tab space(5space)

'''\a'''  : It will play system sound once.

'''Example:'''

Print(&quot;Hi, \n How are you?&quot;)

Output: 

Hi,

How are you?

Print(&quot;Hi, \t How are you?&quot;)

Output: 

Hi, &lt;5 spaces&gt; How are you?

[[File:Escape_Sequence.jpg]]

==Variables==
Variables are used to store some values. Values can be strings, integers or decimal values. 
{{#ev:youtube|https://youtu.be/60iAXH1sm-Y|250|right}}
===How to print a variable?===
In order to print the value of a variable in python, first initialise the variable and then write print(variable_name)
For example :
  x=2
  print(x)

===Some facts about Variables===
* If you want to print variable name with a message, you can use , operator. For example : I want to print Hello Simran and Simran has been stored in a variable called ''name''.
  name=&quot;Simran&quot;
  print(&quot;Hello&quot;,name)
* If you change the value of a variable, it will store the latest value. For example :
  name=&quot;Simran&quot;
  name=&quot;Amit&quot;
  If you will execute the command ''print(name)'', Amit will be displayed.
* You can perform operations like addition, subtraction etc only on integral variables.

==How to execute couple of instructions on console?==
You can execute couple of instructions on console using ;. Write Statement 1;Statement 2;......and then press ''Enter''.
{{#ev:youtube|https://youtu.be/CYQCYvLE22Y|250|right}}









==How to take input from the user?==
We can take input from the user using ''input'' function. For Example : You want the user to input variable ''x'', then write x=input(&quot;Enter the value of x&quot;) and execute. Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNkVLCxZw_jcgyS-bmrIVSP

And when the input you need is of data type other than string. You can do both the input function and data conversion in a single line.
For example:
Consider the program for letting in the patients
'''c=input(&quot;Enter (1/0)&quot;);d=int(c)'''

Instead of using it in two separate lines, combine it into a single line
'''c=int(input(&quot;Enter (1/0)&quot;))'''
To get two inputs in same line with a space between them split() is used.
a,b=input(&quot;enter a&quot;).split(&quot;enter b&quot;)
----

==If statement==
If statement is used to execute set of two contrary statements based on a condition. 

===Syntax===
If (Condition):
    Statement 1
else:
    Statement 2

If 'Condition' is true then 'Statement 1' will be executed otherwise 'Statement 2' will be executed.

Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNhHmg3SkK1uiutigcAbH9K

==Loops==
Loops in a programming languages are used to execute set of repetitive statements. For loop and while loop are used extensively to execute a set of looping instructions.

=== For loop Syntax ===
for i in range(10): 
    Statement

range(10) indicate that values 0 to 9 will be assigned to the variable i and for each value of i the Statement will be executed

=== While loop Syntax ===
intialisation

while(condition):
   Statement
   increment

Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNbl5jkVrrw1E5XSvm3GiCI

==Importance of Indentation in Python==
Indentation is used to indicate to what block of statements belong. Indentation of blocks convey program structure in Python. Indentation in Python is used to refer a group/block of code/statements. In C++ we use { and } (curly brackets) to group a set of statements. But in Python, there are no such brackets used. Instead of such brackets used in other programming languages, we use indentation in Python.
{{#ev:youtube|https://youtu.be/pmavoW419Yc|250|right}}









----

==Spyder IDE Black Screen Solution==

----

 This issue is because of ''Help'' screen which is by default open. 
 We need to close it. So here's how you do it-


===Method 1:===

Step 1-    Try by closing current pane for that,  &quot;''press ctrl+shift+F4''&quot;  wait for few seconds things will appear on screen.

Step 2-    If it so than on menu bar go to ''view &gt; panes &gt; help'' unchecked &quot;''Help''&quot; option.

Step 3-    Make sure that &quot;''Help''&quot; under ''view &gt; panes'' is permanently unchecked. And ''Editor, Ipython console, Variable explorer''  are checked. 


===Method 2:===

Step 1-    Open spyder.

Step 2-   On that black screen randomly ''Left click'' on spyder &quot;''Menu bar''&quot; area you will get menu drop downs, You have to find Drop down with &quot;''Panes''&quot; option.

Step 3-   On &quot;''Panes''&quot; drop down unchecked the &quot;''Help''&quot;.

Step 4-   Wait for few seconds Spyder view will appear.

Step 5 -  Make sure that ''&quot;Help&quot;'' under view&gt;panes is permanently unchecked. And ''Editor, Ipython console, variable explorer'' are checked.</text>
      <sha1>k3gii08885o459r793l5c2z0b0lmxov</sha1>
    </revision>
    <revision>
      <id>1314</id>
      <parentid>1313</parentid>
      <timestamp>2018-08-29T13:55:48Z</timestamp>
      <contributor>
        <username>V.Lalitha</username>
        <id>618</id>
      </contributor>
      <minor/>
      <comment>/* How to take input from the user? */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="9441">==Introduction to Python==
Python is a widely used programming language which allows programmers to write the program in fewer lines of code. It was designed by Guido van Rossum in 1991. Python uses an interpreter instead of compiler.Basically, the main difference between compiler and interpreter is that the compiler takes the code as 'whole' and compiles it..for example in C language and on the other side in interpreter..example: languages like Python...it interprets the written code 'line by line', and if somewhere error is found...it stops interpreting the code from there itself. Here, in our course we will be using Spyder IDE. Spyder is an integrated development environment with editing options to assist the programmers in writing programs. Spyder IDE is divided into two panes, one is console and other one is where program is written.




Python works on different platforms (Windows, Mac, Linux, Raspberry Pi, etc).
Python has a simple syntax similar to the English language.
Python has syntax that allows developers to write programs with fewer lines than some other programming languages.
Python runs on an interpreter system, meaning that code can be executed as soon as it is written. This means that prototyping can be very quick.
Python can be treated in a procedural way, an object-orientated way or a functional way.

==Installing Anaconda==
This article is all about installing and troubleshooting Anaconda and Spyder on different platforms.

===Windows===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#windows Download Link]. Make sure that you download the version compatible to your operating system architecture. If you have a 64 bit OS then you can download either 64 bit of 32 bit, but if you have 32 bit OS then you should download the 32 bit version only.

Step 2 -&gt; Double click on the .exe file that you downloaded just now and follow the instructions. If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open cmd (go to Start -&gt; then type cmd in the search bar and hit enter). There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

===Mac===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#macos Download Link].

Step 2 -&gt; Double click on the .pkg file that you just downloaded. If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

===Linux===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#linux Download Link].

Step 2 -&gt; Go to the folder where you downloaded the .sh file and type following command 

  '''bash Anaconda-latest-Linux-x86_64.sh'''

If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.


==Troubleshooting Spyder==
In most of the cases, it happens that Spyder is already running and you have initiated one more instance of it. Please make sure that spyder is not running already.
If you are on Linux OS, please launch spyder through terminal. Just open the terminal and type '''spyder''' and it will launch. When Spyder opens, make sure you see Anaconda with the version written on the Ipython console. If not, try changing the path of your anaconda. Follow these steps according to your OS version.

====Windows====
[https://stackoverflow.com/questions/44597662/conda-command-is-not-recognized-on-windows-10 Click Here]

====Linux====
[https://stackoverflow.com/questions/18675907/how-to-run-conda Click Here]

====Mac====
[https://stackoverflow.com/questions/35246386/conda-command-not-found Click Here]

In most of the cases relaunching Spyder works.
A more general Troubleshoot is present [https://github.com/spyder-ide/spyder/wiki/Troubleshooting-Guide-and-FAQ Here]

==How to run a program in Spyder IDE?==
Go to Run on the menu bar. Click Run-&gt;Run.

==Print statements==
Print statements help to display output on console. 
{{#ev:youtube|https://youtu.be/gECkqaOwyt0|250|right}}

===Syntax===
print()

===How to print a message?===
In order to print a message in Python, write print(&quot;message&quot;).
Single, double, triple quote can be used print()

'''Example:'''

'''Single Quote'''
print('Hello')  
Output: Hello

'''Double Quote'''
print(&quot;Hello&quot;)  
Output: Hello

'''Quote within quote'''
print('Is &quot;Ram&quot; a good boy?')  
Output: Is &quot;Ram&quot; a good boy?

==Escape sequences with strings==

We can use escape sequence within strings to make output more presentable.

'''\n'''  : It will move to next line.

'''\t'''  : It will add tab space(5space)

'''\a'''  : It will play system sound once.

'''Example:'''

Print(&quot;Hi, \n How are you?&quot;)

Output: 

Hi,

How are you?

Print(&quot;Hi, \t How are you?&quot;)

Output: 

Hi, &lt;5 spaces&gt; How are you?

[[File:Escape_Sequence.jpg]]

==Variables==
Variables are used to store some values. Values can be strings, integers or decimal values. 
{{#ev:youtube|https://youtu.be/60iAXH1sm-Y|250|right}}
===How to print a variable?===
In order to print the value of a variable in python, first initialise the variable and then write print(variable_name)
For example :
  x=2
  print(x)

===Some facts about Variables===
* If you want to print variable name with a message, you can use , operator. For example : I want to print Hello Simran and Simran has been stored in a variable called ''name''.
  name=&quot;Simran&quot;
  print(&quot;Hello&quot;,name)
* If you change the value of a variable, it will store the latest value. For example :
  name=&quot;Simran&quot;
  name=&quot;Amit&quot;
  If you will execute the command ''print(name)'', Amit will be displayed.
* You can perform operations like addition, subtraction etc only on integral variables.

==How to execute couple of instructions on console?==
You can execute couple of instructions on console using ;. Write Statement 1;Statement 2;......and then press ''Enter''.
{{#ev:youtube|https://youtu.be/CYQCYvLE22Y|250|right}}









==How to take input from the user?==
We can take input from the user using ''input'' function. For Example : You want the user to input variable ''x'', then write x=input(&quot;Enter the value of x&quot;) and execute. Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNkVLCxZw_jcgyS-bmrIVSP

And when the input you need is of data type other than string. You can do both the input function and data conversion in a single line.
For example:
Consider the program for letting in the patients
'''c=input(&quot;Enter (1/0)&quot;);d=int(c)'''

Instead of using it in two separate lines, combine it into a single line
'''c=int(input(&quot;Enter (1/0)&quot;))'''.

To get two inputs in same line with a space between them split() is used.
a,b=input(&quot;enter a&quot;).split(&quot;enter b&quot;)
----

==If statement==
If statement is used to execute set of two contrary statements based on a condition. 

===Syntax===
If (Condition):
    Statement 1
else:
    Statement 2

If 'Condition' is true then 'Statement 1' will be executed otherwise 'Statement 2' will be executed.

Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNhHmg3SkK1uiutigcAbH9K

==Loops==
Loops in a programming languages are used to execute set of repetitive statements. For loop and while loop are used extensively to execute a set of looping instructions.

=== For loop Syntax ===
for i in range(10): 
    Statement

range(10) indicate that values 0 to 9 will be assigned to the variable i and for each value of i the Statement will be executed

=== While loop Syntax ===
intialisation

while(condition):
   Statement
   increment

Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNbl5jkVrrw1E5XSvm3GiCI

==Importance of Indentation in Python==
Indentation is used to indicate to what block of statements belong. Indentation of blocks convey program structure in Python. Indentation in Python is used to refer a group/block of code/statements. In C++ we use { and } (curly brackets) to group a set of statements. But in Python, there are no such brackets used. Instead of such brackets used in other programming languages, we use indentation in Python.
{{#ev:youtube|https://youtu.be/pmavoW419Yc|250|right}}









----

==Spyder IDE Black Screen Solution==

----

 This issue is because of ''Help'' screen which is by default open. 
 We need to close it. So here's how you do it-


===Method 1:===

Step 1-    Try by closing current pane for that,  &quot;''press ctrl+shift+F4''&quot;  wait for few seconds things will appear on screen.

Step 2-    If it so than on menu bar go to ''view &gt; panes &gt; help'' unchecked &quot;''Help''&quot; option.

Step 3-    Make sure that &quot;''Help''&quot; under ''view &gt; panes'' is permanently unchecked. And ''Editor, Ipython console, Variable explorer''  are checked. 


===Method 2:===

Step 1-    Open spyder.

Step 2-   On that black screen randomly ''Left click'' on spyder &quot;''Menu bar''&quot; area you will get menu drop downs, You have to find Drop down with &quot;''Panes''&quot; option.

Step 3-   On &quot;''Panes''&quot; drop down unchecked the &quot;''Help''&quot;.

Step 4-   Wait for few seconds Spyder view will appear.

Step 5 -  Make sure that ''&quot;Help&quot;'' under view&gt;panes is permanently unchecked. And ''Editor, Ipython console, variable explorer'' are checked.</text>
      <sha1>4z64zmfqibhs8c5hi4vy6sr6lxhfkqy</sha1>
    </revision>
    <revision>
      <id>1315</id>
      <parentid>1314</parentid>
      <timestamp>2018-08-29T13:58:23Z</timestamp>
      <contributor>
        <username>V.Lalitha</username>
        <id>618</id>
      </contributor>
      <minor/>
      <comment>/* How to take input from the user? */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="9442">==Introduction to Python==
Python is a widely used programming language which allows programmers to write the program in fewer lines of code. It was designed by Guido van Rossum in 1991. Python uses an interpreter instead of compiler.Basically, the main difference between compiler and interpreter is that the compiler takes the code as 'whole' and compiles it..for example in C language and on the other side in interpreter..example: languages like Python...it interprets the written code 'line by line', and if somewhere error is found...it stops interpreting the code from there itself. Here, in our course we will be using Spyder IDE. Spyder is an integrated development environment with editing options to assist the programmers in writing programs. Spyder IDE is divided into two panes, one is console and other one is where program is written.




Python works on different platforms (Windows, Mac, Linux, Raspberry Pi, etc).
Python has a simple syntax similar to the English language.
Python has syntax that allows developers to write programs with fewer lines than some other programming languages.
Python runs on an interpreter system, meaning that code can be executed as soon as it is written. This means that prototyping can be very quick.
Python can be treated in a procedural way, an object-orientated way or a functional way.

==Installing Anaconda==
This article is all about installing and troubleshooting Anaconda and Spyder on different platforms.

===Windows===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#windows Download Link]. Make sure that you download the version compatible to your operating system architecture. If you have a 64 bit OS then you can download either 64 bit of 32 bit, but if you have 32 bit OS then you should download the 32 bit version only.

Step 2 -&gt; Double click on the .exe file that you downloaded just now and follow the instructions. If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open cmd (go to Start -&gt; then type cmd in the search bar and hit enter). There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

===Mac===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#macos Download Link].

Step 2 -&gt; Double click on the .pkg file that you just downloaded. If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

===Linux===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#linux Download Link].

Step 2 -&gt; Go to the folder where you downloaded the .sh file and type following command 

  '''bash Anaconda-latest-Linux-x86_64.sh'''

If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.


==Troubleshooting Spyder==
In most of the cases, it happens that Spyder is already running and you have initiated one more instance of it. Please make sure that spyder is not running already.
If you are on Linux OS, please launch spyder through terminal. Just open the terminal and type '''spyder''' and it will launch. When Spyder opens, make sure you see Anaconda with the version written on the Ipython console. If not, try changing the path of your anaconda. Follow these steps according to your OS version.

====Windows====
[https://stackoverflow.com/questions/44597662/conda-command-is-not-recognized-on-windows-10 Click Here]

====Linux====
[https://stackoverflow.com/questions/18675907/how-to-run-conda Click Here]

====Mac====
[https://stackoverflow.com/questions/35246386/conda-command-not-found Click Here]

In most of the cases relaunching Spyder works.
A more general Troubleshoot is present [https://github.com/spyder-ide/spyder/wiki/Troubleshooting-Guide-and-FAQ Here]

==How to run a program in Spyder IDE?==
Go to Run on the menu bar. Click Run-&gt;Run.

==Print statements==
Print statements help to display output on console. 
{{#ev:youtube|https://youtu.be/gECkqaOwyt0|250|right}}

===Syntax===
print()

===How to print a message?===
In order to print a message in Python, write print(&quot;message&quot;).
Single, double, triple quote can be used print()

'''Example:'''

'''Single Quote'''
print('Hello')  
Output: Hello

'''Double Quote'''
print(&quot;Hello&quot;)  
Output: Hello

'''Quote within quote'''
print('Is &quot;Ram&quot; a good boy?')  
Output: Is &quot;Ram&quot; a good boy?

==Escape sequences with strings==

We can use escape sequence within strings to make output more presentable.

'''\n'''  : It will move to next line.

'''\t'''  : It will add tab space(5space)

'''\a'''  : It will play system sound once.

'''Example:'''

Print(&quot;Hi, \n How are you?&quot;)

Output: 

Hi,

How are you?

Print(&quot;Hi, \t How are you?&quot;)

Output: 

Hi, &lt;5 spaces&gt; How are you?

[[File:Escape_Sequence.jpg]]

==Variables==
Variables are used to store some values. Values can be strings, integers or decimal values. 
{{#ev:youtube|https://youtu.be/60iAXH1sm-Y|250|right}}
===How to print a variable?===
In order to print the value of a variable in python, first initialise the variable and then write print(variable_name)
For example :
  x=2
  print(x)

===Some facts about Variables===
* If you want to print variable name with a message, you can use , operator. For example : I want to print Hello Simran and Simran has been stored in a variable called ''name''.
  name=&quot;Simran&quot;
  print(&quot;Hello&quot;,name)
* If you change the value of a variable, it will store the latest value. For example :
  name=&quot;Simran&quot;
  name=&quot;Amit&quot;
  If you will execute the command ''print(name)'', Amit will be displayed.
* You can perform operations like addition, subtraction etc only on integral variables.

==How to execute couple of instructions on console?==
You can execute couple of instructions on console using ;. Write Statement 1;Statement 2;......and then press ''Enter''.
{{#ev:youtube|https://youtu.be/CYQCYvLE22Y|250|right}}









==How to take input from the user?==
We can take input from the user using ''input'' function. For Example : You want the user to input variable ''x'', then write x=input(&quot;Enter the value of x&quot;) and execute. Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNkVLCxZw_jcgyS-bmrIVSP

And when the input you need is of data type other than string. You can do both the input function and data conversion in a single line.
For example:
Consider the program for letting in the patients
'''c=input(&quot;Enter (1/0)&quot;);d=int(c)'''

Instead of using it in two separate lines, combine it into a single line
'''c=int(input(&quot;Enter (1/0)&quot;))'''.

To get two inputs in same line with a space between them split() is used.

a,b=input(&quot;enter a&quot;).split(&quot;enter b&quot;)
----

==If statement==
If statement is used to execute set of two contrary statements based on a condition. 

===Syntax===
If (Condition):
    Statement 1
else:
    Statement 2

If 'Condition' is true then 'Statement 1' will be executed otherwise 'Statement 2' will be executed.

Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNhHmg3SkK1uiutigcAbH9K

==Loops==
Loops in a programming languages are used to execute set of repetitive statements. For loop and while loop are used extensively to execute a set of looping instructions.

=== For loop Syntax ===
for i in range(10): 
    Statement

range(10) indicate that values 0 to 9 will be assigned to the variable i and for each value of i the Statement will be executed

=== While loop Syntax ===
intialisation

while(condition):
   Statement
   increment

Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNbl5jkVrrw1E5XSvm3GiCI

==Importance of Indentation in Python==
Indentation is used to indicate to what block of statements belong. Indentation of blocks convey program structure in Python. Indentation in Python is used to refer a group/block of code/statements. In C++ we use { and } (curly brackets) to group a set of statements. But in Python, there are no such brackets used. Instead of such brackets used in other programming languages, we use indentation in Python.
{{#ev:youtube|https://youtu.be/pmavoW419Yc|250|right}}









----

==Spyder IDE Black Screen Solution==

----

 This issue is because of ''Help'' screen which is by default open. 
 We need to close it. So here's how you do it-


===Method 1:===

Step 1-    Try by closing current pane for that,  &quot;''press ctrl+shift+F4''&quot;  wait for few seconds things will appear on screen.

Step 2-    If it so than on menu bar go to ''view &gt; panes &gt; help'' unchecked &quot;''Help''&quot; option.

Step 3-    Make sure that &quot;''Help''&quot; under ''view &gt; panes'' is permanently unchecked. And ''Editor, Ipython console, Variable explorer''  are checked. 


===Method 2:===

Step 1-    Open spyder.

Step 2-   On that black screen randomly ''Left click'' on spyder &quot;''Menu bar''&quot; area you will get menu drop downs, You have to find Drop down with &quot;''Panes''&quot; option.

Step 3-   On &quot;''Panes''&quot; drop down unchecked the &quot;''Help''&quot;.

Step 4-   Wait for few seconds Spyder view will appear.

Step 5 -  Make sure that ''&quot;Help&quot;'' under view&gt;panes is permanently unchecked. And ''Editor, Ipython console, variable explorer'' are checked.</text>
      <sha1>r4we5rmbwp3f41xti6uv2pisu3an1y6</sha1>
    </revision>
    <revision>
      <id>1768</id>
      <parentid>1315</parentid>
      <timestamp>2018-09-08T10:15:44Z</timestamp>
      <contributor>
        <username>Bhavesh</username>
        <id>47</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="9451">==Introduction to Python==
Python is a widely used programming language which allows programmers to write the program in fewer lines of code. It was designed by Guido van Rossum in 1991. Python uses an interpreter instead of compiler.Basically, the main difference between compiler and interpreter is that the compiler takes the code as 'whole' and compiles it..for example in C language and on the other side in interpreter..example: languages like Python...it interprets the written code 'line by line', and if somewhere error is found...it stops interpreting the code from there itself. Here, in our course we will be using Spyder IDE. Spyder is an integrated development environment with editing options to assist the programmers in writing programs. Spyder IDE is divided into two panes, one is console and other one is where program is written.




Python works on different platforms (Windows, Mac, Linux, Raspberry Pi, etc).
Python has a simple syntax similar to the English language.
Python has syntax that allows developers to write programs with fewer lines than some other programming languages.
Python runs on an interpreter system, meaning that code can be executed as soon as it is written. This means that prototyping can be very quick.
Python can be treated in a procedural way, an object-orientated way or a functional way.

==Installing Anaconda==
This article is all about installing and troubleshooting Anaconda and Spyder on different platforms.

===Windows===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#windows Download Link]. Make sure that you download the version compatible to your operating system architecture. If you have a 64 bit OS then you can download either 64 bit of 32 bit, but if you have 32 bit OS then you should download the 32 bit version only.

Step 2 -&gt; Double click on the .exe file that you downloaded just now and follow the instructions. If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open cmd (go to Start -&gt; then type cmd in the search bar and hit enter). There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

===Mac===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#macos Download Link].

Step 2 -&gt; Double click on the .pkg file that you just downloaded. If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

===Linux===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#linux Download Link].

Step 2 -&gt; Go to the folder where you downloaded the .sh file and type following command 

  '''bash Anaconda-latest-Linux-x86_64.sh'''

If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.


==Troubleshooting Spyder==
In most of the cases, it happens that Spyder is already running and you have initiated one more instance of it. Please make sure that spyder is not running already.
If you are on Linux OS, please launch spyder through terminal. Just open the terminal and type '''spyder''' and it will launch. When Spyder opens, make sure you see Anaconda with the version written on the Ipython console. If not, try changing the path of your anaconda. Follow these steps according to your OS version.

====Windows====
[https://stackoverflow.com/questions/44597662/conda-command-is-not-recognized-on-windows-10 Click Here]

====Linux====
[https://stackoverflow.com/questions/18675907/how-to-run-conda Click Here]

====Mac====
[https://stackoverflow.com/questions/35246386/conda-command-not-found Click Here]

In most of the cases relaunching Spyder works.
A more general Troubleshoot is present [https://github.com/spyder-ide/spyder/wiki/Troubleshooting-Guide-and-FAQ Here]

==How to run a program in Spyder IDE?==
Go to Run on the menu bar. Click Run-&gt;Run.

==Print statements==
Print statements help to display output on console. 
{{#ev:youtube|https://youtu.be/gECkqaOwyt0|250|right}}

===Syntax===
print()

===How to print a message?===
In order to print a message in Python, write print(&quot;message&quot;).
Single, double, triple quote can be used print()

'''Example:'''

'''Single Quote'''
print('Hello')  
Output: Hello

'''Double Quote'''
print(&quot;Hello&quot;)  
Output: Hello

'''Quote within quote'''
print('Is &quot;Ram&quot; a good boy?')  
Output: Is &quot;Ram&quot; a good boy?

==Escape sequences with strings==

We can use escape sequence within strings to make output more presentable.

'''\n'''  : It will move to next line.

'''\t'''  : It will add tab space(5space)

'''\a'''  : It will play system sound once.

'''Example:'''

Print(&quot;Hi, \n How are you?&quot;)

Output: 

Hi,

How are you?

Print(&quot;Hi, \t How are you?&quot;)

Output: 

Hi, &lt;5 spaces&gt; How are you?

[[File:Escape_Sequence.jpg]]

==Variables==
Variables are used to store some values. Values can be strings, integers or decimal values. 
{{#ev:youtube|https://youtu.be/60iAXH1sm-Y|250|right}}
===How to print a variable?===
In order to print the value of a variable in python, first initialise the variable and then write print(variable_name)
For example :
  x=2
  print(x)

===Some facts about Variables===
* If you want to print variable name with a message, you can use , operator. For example : I want to print Hello Simran and Simran has been stored in a variable called ''name''.
  name=&quot;Simran&quot;
  print(&quot;Hello&quot;,name)
* If you change the value of a variable, it will store the latest value. For example :
  name=&quot;Simran&quot;
  name=&quot;Amit&quot;
  If you will execute the command ''print(name)'', Amit will be displayed.
* You can perform operations like addition, subtraction etc only on integral variables.

==How to execute couple of instructions on console?==
You can execute couple of instructions on console using ;. Write Statement 1;Statement 2;......and then press ''Enter''.
{{#ev:youtube|https://youtu.be/CYQCYvLE22Y|250|right}}









==How to take input from the user?==
We can take input from the user using ''input'' function. For Example : You want the user to input variable ''x'', then write x=input(&quot;Enter the value of x&quot;) and execute. Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNkVLCxZw_jcgyS-bmrIVSP

And when the input you need is of data type other than string. You can do both the input function and data conversion in a single line.
For example:
Consider the program for letting in the patients
'''c=input(&quot;Enter (1/0)&quot;);d=int(c)'''

Instead of using it in two separate lines, combine it into a single line
'''c=int(input(&quot;Enter (1/0)&quot;))'''.

To get two inputs in same line with a space between them split() is used.

a,b=input(&quot;enter a&quot;).split(&quot;enter b&quot;)
----

==If statement==
If statement is used to execute set of two contrary statements based on a condition. 

===Syntax===
If (Condition):
    Statement 1
else:
    Statement 2

If 'Condition' is true then 'Statement 1' will be executed otherwise 'Statement 2' will be executed.

Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNhHmg3SkK1uiutigcAbH9K

==Loops==
Loops in a programming languages are used to execute set of repetitive statements. For loop and while loop are used extensively to execute a set of looping instructions.

=== For loop Syntax ===
for i in range(10): 
    Statement

range(10) indicate that values 0 to 9 will be assigned to the variable i and for each value of i the Statement will be executed

=== While loop Syntax ===
intialisation

while(condition):
   Statement
   increment

Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNbl5jkVrrw1E5XSvm3GiCI

==Importance of Indentation in Python==
Indentation is used to indicate to what block of statements belong. Indentation of blocks convey program structure in Python. Indentation in Python is used to refer a group/block of code/statements. In C++ we use { and } (curly brackets) to group a set of statements. But in Python, there are no such brackets used. Instead of such brackets used in other programming languages, we use indentation in Python.
{{#ev:youtube|https://youtu.be/pmavoW419Yc|250|right}}









----

==Spyder IDE Black Screen Solution==

----

 This issue is because of ''Help'' screen which is by default open. 
 We need to close it. So here's how you do it-


===Method 1:===

Step 1-    Try by closing current pane for that,  &quot;''press ctrl+shift+F4''&quot;  wait for few seconds things will appear on screen.

Step 2-    If it so than on menu bar go to ''view &gt; panes &gt; help'' unchecked &quot;''Help''&quot; option.

Step 3-    Make sure that &quot;''Help''&quot; under ''view &gt; panes'' is permanently unchecked. And ''Editor, Ipython console, Variable explorer''  are checked. 


===Method 2:===

Step 1-    Open spyder.

Step 2-   On that black screen randomly ''Left click'' on spyder &quot;''Menu bar''&quot; area you will get menu drop downs, You have to find Drop down with &quot;''Panes''&quot; option.

Step 3-   On &quot;''Panes''&quot; drop down unchecked the &quot;''Help''&quot;.

Step 4-   Wait for few seconds Spyder view will appear.

Step 5 -  Make sure that ''&quot;Help&quot;'' under view&gt;panes is permanently unchecked. And ''Editor, Ipython console, variable explorer'' are checked.
[[#Top]]</text>
      <sha1>n3qpis5tbsmgi9lvzbbnb56di7cr5x5</sha1>
    </revision>
    <revision>
      <id>1769</id>
      <parentid>1768</parentid>
      <timestamp>2018-09-08T10:18:09Z</timestamp>
      <contributor>
        <username>Bhavesh</username>
        <id>47</id>
      </contributor>
      <comment>/* Importance of Indentation in Python */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="9504">==Introduction to Python==
Python is a widely used programming language which allows programmers to write the program in fewer lines of code. It was designed by Guido van Rossum in 1991. Python uses an interpreter instead of compiler.Basically, the main difference between compiler and interpreter is that the compiler takes the code as 'whole' and compiles it..for example in C language and on the other side in interpreter..example: languages like Python...it interprets the written code 'line by line', and if somewhere error is found...it stops interpreting the code from there itself. Here, in our course we will be using Spyder IDE. Spyder is an integrated development environment with editing options to assist the programmers in writing programs. Spyder IDE is divided into two panes, one is console and other one is where program is written.




Python works on different platforms (Windows, Mac, Linux, Raspberry Pi, etc).
Python has a simple syntax similar to the English language.
Python has syntax that allows developers to write programs with fewer lines than some other programming languages.
Python runs on an interpreter system, meaning that code can be executed as soon as it is written. This means that prototyping can be very quick.
Python can be treated in a procedural way, an object-orientated way or a functional way.

==Installing Anaconda==
This article is all about installing and troubleshooting Anaconda and Spyder on different platforms.

===Windows===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#windows Download Link]. Make sure that you download the version compatible to your operating system architecture. If you have a 64 bit OS then you can download either 64 bit of 32 bit, but if you have 32 bit OS then you should download the 32 bit version only.

Step 2 -&gt; Double click on the .exe file that you downloaded just now and follow the instructions. If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open cmd (go to Start -&gt; then type cmd in the search bar and hit enter). There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

===Mac===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#macos Download Link].

Step 2 -&gt; Double click on the .pkg file that you just downloaded. If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

===Linux===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#linux Download Link].

Step 2 -&gt; Go to the folder where you downloaded the .sh file and type following command 

  '''bash Anaconda-latest-Linux-x86_64.sh'''

If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.


==Troubleshooting Spyder==
In most of the cases, it happens that Spyder is already running and you have initiated one more instance of it. Please make sure that spyder is not running already.
If you are on Linux OS, please launch spyder through terminal. Just open the terminal and type '''spyder''' and it will launch. When Spyder opens, make sure you see Anaconda with the version written on the Ipython console. If not, try changing the path of your anaconda. Follow these steps according to your OS version.

====Windows====
[https://stackoverflow.com/questions/44597662/conda-command-is-not-recognized-on-windows-10 Click Here]

====Linux====
[https://stackoverflow.com/questions/18675907/how-to-run-conda Click Here]

====Mac====
[https://stackoverflow.com/questions/35246386/conda-command-not-found Click Here]

In most of the cases relaunching Spyder works.
A more general Troubleshoot is present [https://github.com/spyder-ide/spyder/wiki/Troubleshooting-Guide-and-FAQ Here]

==How to run a program in Spyder IDE?==
Go to Run on the menu bar. Click Run-&gt;Run.

==Print statements==
Print statements help to display output on console. 
{{#ev:youtube|https://youtu.be/gECkqaOwyt0|250|right}}

===Syntax===
print()

===How to print a message?===
In order to print a message in Python, write print(&quot;message&quot;).
Single, double, triple quote can be used print()

'''Example:'''

'''Single Quote'''
print('Hello')  
Output: Hello

'''Double Quote'''
print(&quot;Hello&quot;)  
Output: Hello

'''Quote within quote'''
print('Is &quot;Ram&quot; a good boy?')  
Output: Is &quot;Ram&quot; a good boy?

==Escape sequences with strings==

We can use escape sequence within strings to make output more presentable.

'''\n'''  : It will move to next line.

'''\t'''  : It will add tab space(5space)

'''\a'''  : It will play system sound once.

'''Example:'''

Print(&quot;Hi, \n How are you?&quot;)

Output: 

Hi,

How are you?

Print(&quot;Hi, \t How are you?&quot;)

Output: 

Hi, &lt;5 spaces&gt; How are you?

[[File:Escape_Sequence.jpg]]

==Variables==
Variables are used to store some values. Values can be strings, integers or decimal values. 
{{#ev:youtube|https://youtu.be/60iAXH1sm-Y|250|right}}
===How to print a variable?===
In order to print the value of a variable in python, first initialise the variable and then write print(variable_name)
For example :
  x=2
  print(x)

===Some facts about Variables===
* If you want to print variable name with a message, you can use , operator. For example : I want to print Hello Simran and Simran has been stored in a variable called ''name''.
  name=&quot;Simran&quot;
  print(&quot;Hello&quot;,name)
* If you change the value of a variable, it will store the latest value. For example :
  name=&quot;Simran&quot;
  name=&quot;Amit&quot;
  If you will execute the command ''print(name)'', Amit will be displayed.
* You can perform operations like addition, subtraction etc only on integral variables.

==How to execute couple of instructions on console?==
You can execute couple of instructions on console using ;. Write Statement 1;Statement 2;......and then press ''Enter''.
{{#ev:youtube|https://youtu.be/CYQCYvLE22Y|250|right}}









==How to take input from the user?==
We can take input from the user using ''input'' function. For Example : You want the user to input variable ''x'', then write x=input(&quot;Enter the value of x&quot;) and execute. Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNkVLCxZw_jcgyS-bmrIVSP

And when the input you need is of data type other than string. You can do both the input function and data conversion in a single line.
For example:
Consider the program for letting in the patients
'''c=input(&quot;Enter (1/0)&quot;);d=int(c)'''

Instead of using it in two separate lines, combine it into a single line
'''c=int(input(&quot;Enter (1/0)&quot;))'''.

To get two inputs in same line with a space between them split() is used.

a,b=input(&quot;enter a&quot;).split(&quot;enter b&quot;)
----

==If statement==
If statement is used to execute set of two contrary statements based on a condition. 

===Syntax===
If (Condition):
    Statement 1
else:
    Statement 2

If 'Condition' is true then 'Statement 1' will be executed otherwise 'Statement 2' will be executed.

Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNhHmg3SkK1uiutigcAbH9K

==Loops==
Loops in a programming languages are used to execute set of repetitive statements. For loop and while loop are used extensively to execute a set of looping instructions.

=== For loop Syntax ===
for i in range(10): 
    Statement

range(10) indicate that values 0 to 9 will be assigned to the variable i and for each value of i the Statement will be executed

=== While loop Syntax ===
intialisation

while(condition):
   Statement
   increment

Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNbl5jkVrrw1E5XSvm3GiCI

==Importance of Indentation in Python==
Indentation is used to indicate to what block of statements belong. Indentation of blocks convey program structure in Python. Indentation in Python is used to refer a group/block of code/statements. In C++ we use { and } (curly brackets) to group a set of statements. But in Python, there are no such brackets used. Instead of such brackets used in other programming languages, we use indentation in Python.
Use tabs,instead of spaces for ease of writing code.
{{#ev:youtube|https://youtu.be/pmavoW419Yc|250|right}}









----

==Spyder IDE Black Screen Solution==

----

 This issue is because of ''Help'' screen which is by default open. 
 We need to close it. So here's how you do it-


===Method 1:===

Step 1-    Try by closing current pane for that,  &quot;''press ctrl+shift+F4''&quot;  wait for few seconds things will appear on screen.

Step 2-    If it so than on menu bar go to ''view &gt; panes &gt; help'' unchecked &quot;''Help''&quot; option.

Step 3-    Make sure that &quot;''Help''&quot; under ''view &gt; panes'' is permanently unchecked. And ''Editor, Ipython console, Variable explorer''  are checked. 


===Method 2:===

Step 1-    Open spyder.

Step 2-   On that black screen randomly ''Left click'' on spyder &quot;''Menu bar''&quot; area you will get menu drop downs, You have to find Drop down with &quot;''Panes''&quot; option.

Step 3-   On &quot;''Panes''&quot; drop down unchecked the &quot;''Help''&quot;.

Step 4-   Wait for few seconds Spyder view will appear.

Step 5 -  Make sure that ''&quot;Help&quot;'' under view&gt;panes is permanently unchecked. And ''Editor, Ipython console, variable explorer'' are checked.
[[#Top]]</text>
      <sha1>4uauzhjvxn6ij8ua3p5hf0v0pch9zj1</sha1>
    </revision>
    <revision>
      <id>1770</id>
      <parentid>1769</parentid>
      <timestamp>2018-09-08T10:20:45Z</timestamp>
      <contributor>
        <username>Bhavesh</username>
        <id>47</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="9540">==Introduction to Python==
Python is a widely used programming language which allows programmers to write the program in fewer lines of code. It was designed by Guido van Rossum in 1991. Python uses an interpreter instead of compiler.Basically, the main difference between compiler and interpreter is that the compiler takes the code as 'whole' and compiles it..for example in C language and on the other side in interpreter..example: languages like Python...it interprets the written code 'line by line', and if somewhere error is found...it stops interpreting the code from there itself. Here, in our course we will be using Spyder IDE. Spyder is an integrated development environment with editing options to assist the programmers in writing programs. Spyder IDE is divided into two panes, one is console and other one is where program is written.




Python works on different platforms (Windows, Mac, Linux, Raspberry Pi, etc).
Python has a simple syntax similar to the English language.
Python has syntax that allows developers to write programs with fewer lines than some other programming languages.
Python runs on an interpreter system, meaning that code can be executed as soon as it is written. This means that prototyping can be very quick.
Python can be treated in a procedural way, an object-orientated way or a functional way.

==Installing Anaconda==
[[#Top]]
This article is all about installing and troubleshooting Anaconda and Spyder on different platforms.

===Windows===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#windows Download Link]. Make sure that you download the version compatible to your operating system architecture. If you have a 64 bit OS then you can download either 64 bit of 32 bit, but if you have 32 bit OS then you should download the 32 bit version only.

Step 2 -&gt; Double click on the .exe file that you downloaded just now and follow the instructions. If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open cmd (go to Start -&gt; then type cmd in the search bar and hit enter). There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

===Mac===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#macos Download Link].

Step 2 -&gt; Double click on the .pkg file that you just downloaded. If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

===Linux===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#linux Download Link].

Step 2 -&gt; Go to the folder where you downloaded the .sh file and type following command 

  '''bash Anaconda-latest-Linux-x86_64.sh'''

If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.


==Troubleshooting Spyder==
[[#Top]]
In most of the cases, it happens that Spyder is already running and you have initiated one more instance of it. Please make sure that spyder is not running already.
If you are on Linux OS, please launch spyder through terminal. Just open the terminal and type '''spyder''' and it will launch. When Spyder opens, make sure you see Anaconda with the version written on the Ipython console. If not, try changing the path of your anaconda. Follow these steps according to your OS version.

====Windows====
[https://stackoverflow.com/questions/44597662/conda-command-is-not-recognized-on-windows-10 Click Here]

====Linux====
[https://stackoverflow.com/questions/18675907/how-to-run-conda Click Here]

====Mac====
[https://stackoverflow.com/questions/35246386/conda-command-not-found Click Here]

In most of the cases relaunching Spyder works.
A more general Troubleshoot is present [https://github.com/spyder-ide/spyder/wiki/Troubleshooting-Guide-and-FAQ Here]

==How to run a program in Spyder IDE?==
Go to Run on the menu bar. Click Run-&gt;Run.

==Print statements==
Print statements help to display output on console. 
{{#ev:youtube|https://youtu.be/gECkqaOwyt0|250|right}}

===Syntax===
print()

===How to print a message?===
In order to print a message in Python, write print(&quot;message&quot;).
Single, double, triple quote can be used print()

'''Example:'''

'''Single Quote'''
print('Hello')  
Output: Hello

'''Double Quote'''
print(&quot;Hello&quot;)  
Output: Hello

'''Quote within quote'''
print('Is &quot;Ram&quot; a good boy?')  
Output: Is &quot;Ram&quot; a good boy?

==Escape sequences with strings==

We can use escape sequence within strings to make output more presentable.

'''\n'''  : It will move to next line.

'''\t'''  : It will add tab space(5space)

'''\a'''  : It will play system sound once.

'''Example:'''

Print(&quot;Hi, \n How are you?&quot;)

Output: 

Hi,

How are you?

Print(&quot;Hi, \t How are you?&quot;)

Output: 

Hi, &lt;5 spaces&gt; How are you?

[[File:Escape_Sequence.jpg]]

==Variables==
[[#Top]]
Variables are used to store some values. Values can be strings, integers or decimal values. 
{{#ev:youtube|https://youtu.be/60iAXH1sm-Y|250|right}}
===How to print a variable?===
In order to print the value of a variable in python, first initialise the variable and then write print(variable_name)
For example :
  x=2
  print(x)

===Some facts about Variables===
* If you want to print variable name with a message, you can use , operator. For example : I want to print Hello Simran and Simran has been stored in a variable called ''name''.
  name=&quot;Simran&quot;
  print(&quot;Hello&quot;,name)
* If you change the value of a variable, it will store the latest value. For example :
  name=&quot;Simran&quot;
  name=&quot;Amit&quot;
  If you will execute the command ''print(name)'', Amit will be displayed.
* You can perform operations like addition, subtraction etc only on integral variables.

==How to execute couple of instructions on console?==
You can execute couple of instructions on console using ;. Write Statement 1;Statement 2;......and then press ''Enter''.
{{#ev:youtube|https://youtu.be/CYQCYvLE22Y|250|right}}









==How to take input from the user?==
We can take input from the user using ''input'' function. For Example : You want the user to input variable ''x'', then write x=input(&quot;Enter the value of x&quot;) and execute. Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNkVLCxZw_jcgyS-bmrIVSP

And when the input you need is of data type other than string. You can do both the input function and data conversion in a single line.
For example:
Consider the program for letting in the patients
'''c=input(&quot;Enter (1/0)&quot;);d=int(c)'''

Instead of using it in two separate lines, combine it into a single line
'''c=int(input(&quot;Enter (1/0)&quot;))'''.

To get two inputs in same line with a space between them split() is used.

a,b=input(&quot;enter a&quot;).split(&quot;enter b&quot;)
----

==If statement==
If statement is used to execute set of two contrary statements based on a condition. 

===Syntax===
If (Condition):
    Statement 1
else:
    Statement 2

If 'Condition' is true then 'Statement 1' will be executed otherwise 'Statement 2' will be executed.

Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNhHmg3SkK1uiutigcAbH9K

==Loops==
[[#Top]]
Loops in a programming languages are used to execute set of repetitive statements. For loop and while loop are used extensively to execute a set of looping instructions.

=== For loop Syntax ===
for i in range(10): 
    Statement

range(10) indicate that values 0 to 9 will be assigned to the variable i and for each value of i the Statement will be executed

=== While loop Syntax ===
intialisation

while(condition):
   Statement
   increment

Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNbl5jkVrrw1E5XSvm3GiCI

==Importance of Indentation in Python==
Indentation is used to indicate to what block of statements belong. Indentation of blocks convey program structure in Python. Indentation in Python is used to refer a group/block of code/statements. In C++ we use { and } (curly brackets) to group a set of statements. But in Python, there are no such brackets used. Instead of such brackets used in other programming languages, we use indentation in Python.
Use tabs,instead of spaces for ease of writing code.
{{#ev:youtube|https://youtu.be/pmavoW419Yc|250|right}}









----

==Spyder IDE Black Screen Solution==

----

 This issue is because of ''Help'' screen which is by default open. 
 We need to close it. So here's how you do it-


===Method 1:===

Step 1-    Try by closing current pane for that,  &quot;''press ctrl+shift+F4''&quot;  wait for few seconds things will appear on screen.

Step 2-    If it so than on menu bar go to ''view &gt; panes &gt; help'' unchecked &quot;''Help''&quot; option.

Step 3-    Make sure that &quot;''Help''&quot; under ''view &gt; panes'' is permanently unchecked. And ''Editor, Ipython console, Variable explorer''  are checked. 


===Method 2:===

Step 1-    Open spyder.

Step 2-   On that black screen randomly ''Left click'' on spyder &quot;''Menu bar''&quot; area you will get menu drop downs, You have to find Drop down with &quot;''Panes''&quot; option.

Step 3-   On &quot;''Panes''&quot; drop down unchecked the &quot;''Help''&quot;.

Step 4-   Wait for few seconds Spyder view will appear.

Step 5 -  Make sure that ''&quot;Help&quot;'' under view&gt;panes is permanently unchecked. And ''Editor, Ipython console, variable explorer'' are checked.
[[#Top]]</text>
      <sha1>m83zxje0ju3be46621xdf3639myb8ui</sha1>
    </revision>
    <revision>
      <id>1771</id>
      <parentid>1770</parentid>
      <timestamp>2018-09-08T10:21:39Z</timestamp>
      <contributor>
        <username>Bhavesh</username>
        <id>47</id>
      </contributor>
      <comment>/* Loops */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="9544">==Introduction to Python==
Python is a widely used programming language which allows programmers to write the program in fewer lines of code. It was designed by Guido van Rossum in 1991. Python uses an interpreter instead of compiler.Basically, the main difference between compiler and interpreter is that the compiler takes the code as 'whole' and compiles it..for example in C language and on the other side in interpreter..example: languages like Python...it interprets the written code 'line by line', and if somewhere error is found...it stops interpreting the code from there itself. Here, in our course we will be using Spyder IDE. Spyder is an integrated development environment with editing options to assist the programmers in writing programs. Spyder IDE is divided into two panes, one is console and other one is where program is written.




Python works on different platforms (Windows, Mac, Linux, Raspberry Pi, etc).
Python has a simple syntax similar to the English language.
Python has syntax that allows developers to write programs with fewer lines than some other programming languages.
Python runs on an interpreter system, meaning that code can be executed as soon as it is written. This means that prototyping can be very quick.
Python can be treated in a procedural way, an object-orientated way or a functional way.

==Installing Anaconda==
[[#Top]]
This article is all about installing and troubleshooting Anaconda and Spyder on different platforms.

===Windows===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#windows Download Link]. Make sure that you download the version compatible to your operating system architecture. If you have a 64 bit OS then you can download either 64 bit of 32 bit, but if you have 32 bit OS then you should download the 32 bit version only.

Step 2 -&gt; Double click on the .exe file that you downloaded just now and follow the instructions. If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open cmd (go to Start -&gt; then type cmd in the search bar and hit enter). There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

===Mac===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#macos Download Link].

Step 2 -&gt; Double click on the .pkg file that you just downloaded. If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

===Linux===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#linux Download Link].

Step 2 -&gt; Go to the folder where you downloaded the .sh file and type following command 

  '''bash Anaconda-latest-Linux-x86_64.sh'''

If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.


==Troubleshooting Spyder==
[[#Top]]
In most of the cases, it happens that Spyder is already running and you have initiated one more instance of it. Please make sure that spyder is not running already.
If you are on Linux OS, please launch spyder through terminal. Just open the terminal and type '''spyder''' and it will launch. When Spyder opens, make sure you see Anaconda with the version written on the Ipython console. If not, try changing the path of your anaconda. Follow these steps according to your OS version.

====Windows====
[https://stackoverflow.com/questions/44597662/conda-command-is-not-recognized-on-windows-10 Click Here]

====Linux====
[https://stackoverflow.com/questions/18675907/how-to-run-conda Click Here]

====Mac====
[https://stackoverflow.com/questions/35246386/conda-command-not-found Click Here]

In most of the cases relaunching Spyder works.
A more general Troubleshoot is present [https://github.com/spyder-ide/spyder/wiki/Troubleshooting-Guide-and-FAQ Here]

==How to run a program in Spyder IDE?==
Go to Run on the menu bar. Click Run-&gt;Run.

==Print statements==
Print statements help to display output on console. 
{{#ev:youtube|https://youtu.be/gECkqaOwyt0|250|right}}

===Syntax===
print()

===How to print a message?===
In order to print a message in Python, write print(&quot;message&quot;).
Single, double, triple quote can be used print()

'''Example:'''

'''Single Quote'''
print('Hello')  
Output: Hello

'''Double Quote'''
print(&quot;Hello&quot;)  
Output: Hello

'''Quote within quote'''
print('Is &quot;Ram&quot; a good boy?')  
Output: Is &quot;Ram&quot; a good boy?

==Escape sequences with strings==

We can use escape sequence within strings to make output more presentable.

'''\n'''  : It will move to next line.

'''\t'''  : It will add tab space(5space)

'''\a'''  : It will play system sound once.

'''Example:'''

Print(&quot;Hi, \n How are you?&quot;)

Output: 

Hi,

How are you?

Print(&quot;Hi, \t How are you?&quot;)

Output: 

Hi, &lt;5 spaces&gt; How are you?

[[File:Escape_Sequence.jpg]]

==Variables==
[[#Top]]
Variables are used to store some values. Values can be strings, integers or decimal values. 
{{#ev:youtube|https://youtu.be/60iAXH1sm-Y|250|right}}
===How to print a variable?===
In order to print the value of a variable in python, first initialise the variable and then write print(variable_name)
For example :
  x=2
  print(x)

===Some facts about Variables===
* If you want to print variable name with a message, you can use , operator. For example : I want to print Hello Simran and Simran has been stored in a variable called ''name''.
  name=&quot;Simran&quot;
  print(&quot;Hello&quot;,name)
* If you change the value of a variable, it will store the latest value. For example :
  name=&quot;Simran&quot;
  name=&quot;Amit&quot;
  If you will execute the command ''print(name)'', Amit will be displayed.
* You can perform operations like addition, subtraction etc only on integral variables.

==How to execute couple of instructions on console?==
You can execute couple of instructions on console using ;. Write Statement 1;Statement 2;......and then press ''Enter''.
{{#ev:youtube|https://youtu.be/CYQCYvLE22Y|250|right}}









==How to take input from the user?==
We can take input from the user using ''input'' function. For Example : You want the user to input variable ''x'', then write x=input(&quot;Enter the value of x&quot;) and execute. Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNkVLCxZw_jcgyS-bmrIVSP

And when the input you need is of data type other than string. You can do both the input function and data conversion in a single line.
For example:
Consider the program for letting in the patients
'''c=input(&quot;Enter (1/0)&quot;);d=int(c)'''

Instead of using it in two separate lines, combine it into a single line
'''c=int(input(&quot;Enter (1/0)&quot;))'''.

To get two inputs in same line with a space between them split() is used.

a,b=input(&quot;enter a&quot;).split(&quot;enter b&quot;)
----

==If statement==
If statement is used to execute set of two contrary statements based on a condition. 

===Syntax===
If (Condition):
    Statement 1
else:
    Statement 2

If 'Condition' is true then 'Statement 1' will be executed otherwise 'Statement 2' will be executed.

Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNhHmg3SkK1uiutigcAbH9K

==Loops==
[[#Top]]&lt;br&gt;
Loops in a programming languages are used to execute set of repetitive statements. For loop and while loop are used extensively to execute a set of looping instructions.

=== For loop Syntax ===
for i in range(10): 
    Statement

range(10) indicate that values 0 to 9 will be assigned to the variable i and for each value of i the Statement will be executed

=== While loop Syntax ===
intialisation

while(condition):
   Statement
   increment

Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNbl5jkVrrw1E5XSvm3GiCI

==Importance of Indentation in Python==
Indentation is used to indicate to what block of statements belong. Indentation of blocks convey program structure in Python. Indentation in Python is used to refer a group/block of code/statements. In C++ we use { and } (curly brackets) to group a set of statements. But in Python, there are no such brackets used. Instead of such brackets used in other programming languages, we use indentation in Python.
Use tabs,instead of spaces for ease of writing code.
{{#ev:youtube|https://youtu.be/pmavoW419Yc|250|right}}









----

==Spyder IDE Black Screen Solution==

----

 This issue is because of ''Help'' screen which is by default open. 
 We need to close it. So here's how you do it-


===Method 1:===

Step 1-    Try by closing current pane for that,  &quot;''press ctrl+shift+F4''&quot;  wait for few seconds things will appear on screen.

Step 2-    If it so than on menu bar go to ''view &gt; panes &gt; help'' unchecked &quot;''Help''&quot; option.

Step 3-    Make sure that &quot;''Help''&quot; under ''view &gt; panes'' is permanently unchecked. And ''Editor, Ipython console, Variable explorer''  are checked. 


===Method 2:===

Step 1-    Open spyder.

Step 2-   On that black screen randomly ''Left click'' on spyder &quot;''Menu bar''&quot; area you will get menu drop downs, You have to find Drop down with &quot;''Panes''&quot; option.

Step 3-   On &quot;''Panes''&quot; drop down unchecked the &quot;''Help''&quot;.

Step 4-   Wait for few seconds Spyder view will appear.

Step 5 -  Make sure that ''&quot;Help&quot;'' under view&gt;panes is permanently unchecked. And ''Editor, Ipython console, variable explorer'' are checked.
[[#Top]]</text>
      <sha1>gaqgq8uuylqhanf1oicuth7a5x385tm</sha1>
    </revision>
    <revision>
      <id>2136</id>
      <parentid>1771</parentid>
      <timestamp>2018-09-14T00:52:17Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* For loop Syntax */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="9657">==Introduction to Python==
Python is a widely used programming language which allows programmers to write the program in fewer lines of code. It was designed by Guido van Rossum in 1991. Python uses an interpreter instead of compiler.Basically, the main difference between compiler and interpreter is that the compiler takes the code as 'whole' and compiles it..for example in C language and on the other side in interpreter..example: languages like Python...it interprets the written code 'line by line', and if somewhere error is found...it stops interpreting the code from there itself. Here, in our course we will be using Spyder IDE. Spyder is an integrated development environment with editing options to assist the programmers in writing programs. Spyder IDE is divided into two panes, one is console and other one is where program is written.




Python works on different platforms (Windows, Mac, Linux, Raspberry Pi, etc).
Python has a simple syntax similar to the English language.
Python has syntax that allows developers to write programs with fewer lines than some other programming languages.
Python runs on an interpreter system, meaning that code can be executed as soon as it is written. This means that prototyping can be very quick.
Python can be treated in a procedural way, an object-orientated way or a functional way.

==Installing Anaconda==
[[#Top]]
This article is all about installing and troubleshooting Anaconda and Spyder on different platforms.

===Windows===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#windows Download Link]. Make sure that you download the version compatible to your operating system architecture. If you have a 64 bit OS then you can download either 64 bit of 32 bit, but if you have 32 bit OS then you should download the 32 bit version only.

Step 2 -&gt; Double click on the .exe file that you downloaded just now and follow the instructions. If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open cmd (go to Start -&gt; then type cmd in the search bar and hit enter). There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

===Mac===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#macos Download Link].

Step 2 -&gt; Double click on the .pkg file that you just downloaded. If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

===Linux===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#linux Download Link].

Step 2 -&gt; Go to the folder where you downloaded the .sh file and type following command 

  '''bash Anaconda-latest-Linux-x86_64.sh'''

If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.


==Troubleshooting Spyder==
[[#Top]]
In most of the cases, it happens that Spyder is already running and you have initiated one more instance of it. Please make sure that spyder is not running already.
If you are on Linux OS, please launch spyder through terminal. Just open the terminal and type '''spyder''' and it will launch. When Spyder opens, make sure you see Anaconda with the version written on the Ipython console. If not, try changing the path of your anaconda. Follow these steps according to your OS version.

====Windows====
[https://stackoverflow.com/questions/44597662/conda-command-is-not-recognized-on-windows-10 Click Here]

====Linux====
[https://stackoverflow.com/questions/18675907/how-to-run-conda Click Here]

====Mac====
[https://stackoverflow.com/questions/35246386/conda-command-not-found Click Here]

In most of the cases relaunching Spyder works.
A more general Troubleshoot is present [https://github.com/spyder-ide/spyder/wiki/Troubleshooting-Guide-and-FAQ Here]

==How to run a program in Spyder IDE?==
Go to Run on the menu bar. Click Run-&gt;Run.

==Print statements==
Print statements help to display output on console. 
{{#ev:youtube|https://youtu.be/gECkqaOwyt0|250|right}}

===Syntax===
print()

===How to print a message?===
In order to print a message in Python, write print(&quot;message&quot;).
Single, double, triple quote can be used print()

'''Example:'''

'''Single Quote'''
print('Hello')  
Output: Hello

'''Double Quote'''
print(&quot;Hello&quot;)  
Output: Hello

'''Quote within quote'''
print('Is &quot;Ram&quot; a good boy?')  
Output: Is &quot;Ram&quot; a good boy?

==Escape sequences with strings==

We can use escape sequence within strings to make output more presentable.

'''\n'''  : It will move to next line.

'''\t'''  : It will add tab space(5space)

'''\a'''  : It will play system sound once.

'''Example:'''

Print(&quot;Hi, \n How are you?&quot;)

Output: 

Hi,

How are you?

Print(&quot;Hi, \t How are you?&quot;)

Output: 

Hi, &lt;5 spaces&gt; How are you?

[[File:Escape_Sequence.jpg]]

==Variables==
[[#Top]]
Variables are used to store some values. Values can be strings, integers or decimal values. 
{{#ev:youtube|https://youtu.be/60iAXH1sm-Y|250|right}}
===How to print a variable?===
In order to print the value of a variable in python, first initialise the variable and then write print(variable_name)
For example :
  x=2
  print(x)

===Some facts about Variables===
* If you want to print variable name with a message, you can use , operator. For example : I want to print Hello Simran and Simran has been stored in a variable called ''name''.
  name=&quot;Simran&quot;
  print(&quot;Hello&quot;,name)
* If you change the value of a variable, it will store the latest value. For example :
  name=&quot;Simran&quot;
  name=&quot;Amit&quot;
  If you will execute the command ''print(name)'', Amit will be displayed.
* You can perform operations like addition, subtraction etc only on integral variables.

==How to execute couple of instructions on console?==
You can execute couple of instructions on console using ;. Write Statement 1;Statement 2;......and then press ''Enter''.
{{#ev:youtube|https://youtu.be/CYQCYvLE22Y|250|right}}









==How to take input from the user?==
We can take input from the user using ''input'' function. For Example : You want the user to input variable ''x'', then write x=input(&quot;Enter the value of x&quot;) and execute. Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNkVLCxZw_jcgyS-bmrIVSP

And when the input you need is of data type other than string. You can do both the input function and data conversion in a single line.
For example:
Consider the program for letting in the patients
'''c=input(&quot;Enter (1/0)&quot;);d=int(c)'''

Instead of using it in two separate lines, combine it into a single line
'''c=int(input(&quot;Enter (1/0)&quot;))'''.

To get two inputs in same line with a space between them split() is used.

a,b=input(&quot;enter a&quot;).split(&quot;enter b&quot;)
----

==If statement==
If statement is used to execute set of two contrary statements based on a condition. 

===Syntax===
If (Condition):
    Statement 1
else:
    Statement 2

If 'Condition' is true then 'Statement 1' will be executed otherwise 'Statement 2' will be executed.

Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNhHmg3SkK1uiutigcAbH9K

==Loops==
[[#Top]]&lt;br&gt;
Loops in a programming languages are used to execute set of repetitive statements. For loop and while loop are used extensively to execute a set of looping instructions.

=== For loop Syntax ===
&lt;pre&gt;
for i in range(10): 
    Statement
&lt;/pre&gt;
range(10) indicate that values 0 to 9 will be assigned to the variable i and for each value of i the Statement will be executed, e.g.
&lt;pre&gt;
for i in range(10): 
    print(i)
&lt;/pre&gt;
Output will be
&lt;pre&gt;
0
1
2
3
4
5
6
7
8
9
&lt;/pre&gt;

=== While loop Syntax ===
intialisation

while(condition):
   Statement
   increment

Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNbl5jkVrrw1E5XSvm3GiCI

==Importance of Indentation in Python==
Indentation is used to indicate to what block of statements belong. Indentation of blocks convey program structure in Python. Indentation in Python is used to refer a group/block of code/statements. In C++ we use { and } (curly brackets) to group a set of statements. But in Python, there are no such brackets used. Instead of such brackets used in other programming languages, we use indentation in Python.
Use tabs,instead of spaces for ease of writing code.
{{#ev:youtube|https://youtu.be/pmavoW419Yc|250|right}}









----

==Spyder IDE Black Screen Solution==

----

 This issue is because of ''Help'' screen which is by default open. 
 We need to close it. So here's how you do it-


===Method 1:===

Step 1-    Try by closing current pane for that,  &quot;''press ctrl+shift+F4''&quot;  wait for few seconds things will appear on screen.

Step 2-    If it so than on menu bar go to ''view &gt; panes &gt; help'' unchecked &quot;''Help''&quot; option.

Step 3-    Make sure that &quot;''Help''&quot; under ''view &gt; panes'' is permanently unchecked. And ''Editor, Ipython console, Variable explorer''  are checked. 


===Method 2:===

Step 1-    Open spyder.

Step 2-   On that black screen randomly ''Left click'' on spyder &quot;''Menu bar''&quot; area you will get menu drop downs, You have to find Drop down with &quot;''Panes''&quot; option.

Step 3-   On &quot;''Panes''&quot; drop down unchecked the &quot;''Help''&quot;.

Step 4-   Wait for few seconds Spyder view will appear.

Step 5 -  Make sure that ''&quot;Help&quot;'' under view&gt;panes is permanently unchecked. And ''Editor, Ipython console, variable explorer'' are checked.
[[#Top]]</text>
      <sha1>3tquy0e18esv13p0g9t642n8gfj54cn</sha1>
    </revision>
    <revision>
      <id>2137</id>
      <parentid>2136</parentid>
      <timestamp>2018-09-14T00:55:01Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* While loop Syntax */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="9803">==Introduction to Python==
Python is a widely used programming language which allows programmers to write the program in fewer lines of code. It was designed by Guido van Rossum in 1991. Python uses an interpreter instead of compiler.Basically, the main difference between compiler and interpreter is that the compiler takes the code as 'whole' and compiles it..for example in C language and on the other side in interpreter..example: languages like Python...it interprets the written code 'line by line', and if somewhere error is found...it stops interpreting the code from there itself. Here, in our course we will be using Spyder IDE. Spyder is an integrated development environment with editing options to assist the programmers in writing programs. Spyder IDE is divided into two panes, one is console and other one is where program is written.




Python works on different platforms (Windows, Mac, Linux, Raspberry Pi, etc).
Python has a simple syntax similar to the English language.
Python has syntax that allows developers to write programs with fewer lines than some other programming languages.
Python runs on an interpreter system, meaning that code can be executed as soon as it is written. This means that prototyping can be very quick.
Python can be treated in a procedural way, an object-orientated way or a functional way.

==Installing Anaconda==
[[#Top]]
This article is all about installing and troubleshooting Anaconda and Spyder on different platforms.

===Windows===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#windows Download Link]. Make sure that you download the version compatible to your operating system architecture. If you have a 64 bit OS then you can download either 64 bit of 32 bit, but if you have 32 bit OS then you should download the 32 bit version only.

Step 2 -&gt; Double click on the .exe file that you downloaded just now and follow the instructions. If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open cmd (go to Start -&gt; then type cmd in the search bar and hit enter). There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

===Mac===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#macos Download Link].

Step 2 -&gt; Double click on the .pkg file that you just downloaded. If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

===Linux===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#linux Download Link].

Step 2 -&gt; Go to the folder where you downloaded the .sh file and type following command 

  '''bash Anaconda-latest-Linux-x86_64.sh'''

If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.


==Troubleshooting Spyder==
[[#Top]]
In most of the cases, it happens that Spyder is already running and you have initiated one more instance of it. Please make sure that spyder is not running already.
If you are on Linux OS, please launch spyder through terminal. Just open the terminal and type '''spyder''' and it will launch. When Spyder opens, make sure you see Anaconda with the version written on the Ipython console. If not, try changing the path of your anaconda. Follow these steps according to your OS version.

====Windows====
[https://stackoverflow.com/questions/44597662/conda-command-is-not-recognized-on-windows-10 Click Here]

====Linux====
[https://stackoverflow.com/questions/18675907/how-to-run-conda Click Here]

====Mac====
[https://stackoverflow.com/questions/35246386/conda-command-not-found Click Here]

In most of the cases relaunching Spyder works.
A more general Troubleshoot is present [https://github.com/spyder-ide/spyder/wiki/Troubleshooting-Guide-and-FAQ Here]

==How to run a program in Spyder IDE?==
Go to Run on the menu bar. Click Run-&gt;Run.

==Print statements==
Print statements help to display output on console. 
{{#ev:youtube|https://youtu.be/gECkqaOwyt0|250|right}}

===Syntax===
print()

===How to print a message?===
In order to print a message in Python, write print(&quot;message&quot;).
Single, double, triple quote can be used print()

'''Example:'''

'''Single Quote'''
print('Hello')  
Output: Hello

'''Double Quote'''
print(&quot;Hello&quot;)  
Output: Hello

'''Quote within quote'''
print('Is &quot;Ram&quot; a good boy?')  
Output: Is &quot;Ram&quot; a good boy?

==Escape sequences with strings==

We can use escape sequence within strings to make output more presentable.

'''\n'''  : It will move to next line.

'''\t'''  : It will add tab space(5space)

'''\a'''  : It will play system sound once.

'''Example:'''

Print(&quot;Hi, \n How are you?&quot;)

Output: 

Hi,

How are you?

Print(&quot;Hi, \t How are you?&quot;)

Output: 

Hi, &lt;5 spaces&gt; How are you?

[[File:Escape_Sequence.jpg]]

==Variables==
[[#Top]]
Variables are used to store some values. Values can be strings, integers or decimal values. 
{{#ev:youtube|https://youtu.be/60iAXH1sm-Y|250|right}}
===How to print a variable?===
In order to print the value of a variable in python, first initialise the variable and then write print(variable_name)
For example :
  x=2
  print(x)

===Some facts about Variables===
* If you want to print variable name with a message, you can use , operator. For example : I want to print Hello Simran and Simran has been stored in a variable called ''name''.
  name=&quot;Simran&quot;
  print(&quot;Hello&quot;,name)
* If you change the value of a variable, it will store the latest value. For example :
  name=&quot;Simran&quot;
  name=&quot;Amit&quot;
  If you will execute the command ''print(name)'', Amit will be displayed.
* You can perform operations like addition, subtraction etc only on integral variables.

==How to execute couple of instructions on console?==
You can execute couple of instructions on console using ;. Write Statement 1;Statement 2;......and then press ''Enter''.
{{#ev:youtube|https://youtu.be/CYQCYvLE22Y|250|right}}









==How to take input from the user?==
We can take input from the user using ''input'' function. For Example : You want the user to input variable ''x'', then write x=input(&quot;Enter the value of x&quot;) and execute. Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNkVLCxZw_jcgyS-bmrIVSP

And when the input you need is of data type other than string. You can do both the input function and data conversion in a single line.
For example:
Consider the program for letting in the patients
'''c=input(&quot;Enter (1/0)&quot;);d=int(c)'''

Instead of using it in two separate lines, combine it into a single line
'''c=int(input(&quot;Enter (1/0)&quot;))'''.

To get two inputs in same line with a space between them split() is used.

a,b=input(&quot;enter a&quot;).split(&quot;enter b&quot;)
----

==If statement==
If statement is used to execute set of two contrary statements based on a condition. 

===Syntax===
If (Condition):
    Statement 1
else:
    Statement 2

If 'Condition' is true then 'Statement 1' will be executed otherwise 'Statement 2' will be executed.

Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNhHmg3SkK1uiutigcAbH9K

==Loops==
[[#Top]]&lt;br&gt;
Loops in a programming languages are used to execute set of repetitive statements. For loop and while loop are used extensively to execute a set of looping instructions.

=== For loop Syntax ===
&lt;pre&gt;
for i in range(10): 
    Statement
&lt;/pre&gt;
range(10) indicate that values 0 to 9 will be assigned to the variable i and for each value of i the Statement will be executed, e.g.
&lt;pre&gt;
for i in range(10): 
    print(i)
&lt;/pre&gt;
Output will be
&lt;pre&gt;
0
1
2
3
4
5
6
7
8
9
&lt;/pre&gt;

=== While loop Syntax ===
&lt;pre&gt;
intialisation

while(condition):
   Statement
   increment/decrement
&lt;/pre&gt;
e.g.
&lt;pre&gt;
#initialization
i=0
while(i&lt;10): 
    print(i)
    i=i+1
&lt;/pre&gt;
Output will be:
&lt;pre&gt;
0
1
2
3
4
5
6
7
8
9
&lt;/pre&gt;
Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNbl5jkVrrw1E5XSvm3GiCI

==Importance of Indentation in Python==
Indentation is used to indicate to what block of statements belong. Indentation of blocks convey program structure in Python. Indentation in Python is used to refer a group/block of code/statements. In C++ we use { and } (curly brackets) to group a set of statements. But in Python, there are no such brackets used. Instead of such brackets used in other programming languages, we use indentation in Python.
Use tabs,instead of spaces for ease of writing code.
{{#ev:youtube|https://youtu.be/pmavoW419Yc|250|right}}









----

==Spyder IDE Black Screen Solution==

----

 This issue is because of ''Help'' screen which is by default open. 
 We need to close it. So here's how you do it-


===Method 1:===

Step 1-    Try by closing current pane for that,  &quot;''press ctrl+shift+F4''&quot;  wait for few seconds things will appear on screen.

Step 2-    If it so than on menu bar go to ''view &gt; panes &gt; help'' unchecked &quot;''Help''&quot; option.

Step 3-    Make sure that &quot;''Help''&quot; under ''view &gt; panes'' is permanently unchecked. And ''Editor, Ipython console, Variable explorer''  are checked. 


===Method 2:===

Step 1-    Open spyder.

Step 2-   On that black screen randomly ''Left click'' on spyder &quot;''Menu bar''&quot; area you will get menu drop downs, You have to find Drop down with &quot;''Panes''&quot; option.

Step 3-   On &quot;''Panes''&quot; drop down unchecked the &quot;''Help''&quot;.

Step 4-   Wait for few seconds Spyder view will appear.

Step 5 -  Make sure that ''&quot;Help&quot;'' under view&gt;panes is permanently unchecked. And ''Editor, Ipython console, variable explorer'' are checked.
[[#Top]]</text>
      <sha1>eijzxmqz5tx02l7cqqyk9xh2zcrbexk</sha1>
    </revision>
    <revision>
      <id>2142</id>
      <parentid>2137</parentid>
      <timestamp>2018-09-14T01:04:51Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* Importance of Indentation in Python */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="10159">==Introduction to Python==
Python is a widely used programming language which allows programmers to write the program in fewer lines of code. It was designed by Guido van Rossum in 1991. Python uses an interpreter instead of compiler.Basically, the main difference between compiler and interpreter is that the compiler takes the code as 'whole' and compiles it..for example in C language and on the other side in interpreter..example: languages like Python...it interprets the written code 'line by line', and if somewhere error is found...it stops interpreting the code from there itself. Here, in our course we will be using Spyder IDE. Spyder is an integrated development environment with editing options to assist the programmers in writing programs. Spyder IDE is divided into two panes, one is console and other one is where program is written.




Python works on different platforms (Windows, Mac, Linux, Raspberry Pi, etc).
Python has a simple syntax similar to the English language.
Python has syntax that allows developers to write programs with fewer lines than some other programming languages.
Python runs on an interpreter system, meaning that code can be executed as soon as it is written. This means that prototyping can be very quick.
Python can be treated in a procedural way, an object-orientated way or a functional way.

==Installing Anaconda==
[[#Top]]
This article is all about installing and troubleshooting Anaconda and Spyder on different platforms.

===Windows===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#windows Download Link]. Make sure that you download the version compatible to your operating system architecture. If you have a 64 bit OS then you can download either 64 bit of 32 bit, but if you have 32 bit OS then you should download the 32 bit version only.

Step 2 -&gt; Double click on the .exe file that you downloaded just now and follow the instructions. If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open cmd (go to Start -&gt; then type cmd in the search bar and hit enter). There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

===Mac===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#macos Download Link].

Step 2 -&gt; Double click on the .pkg file that you just downloaded. If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

===Linux===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#linux Download Link].

Step 2 -&gt; Go to the folder where you downloaded the .sh file and type following command 

  '''bash Anaconda-latest-Linux-x86_64.sh'''

If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.


==Troubleshooting Spyder==
[[#Top]]
In most of the cases, it happens that Spyder is already running and you have initiated one more instance of it. Please make sure that spyder is not running already.
If you are on Linux OS, please launch spyder through terminal. Just open the terminal and type '''spyder''' and it will launch. When Spyder opens, make sure you see Anaconda with the version written on the Ipython console. If not, try changing the path of your anaconda. Follow these steps according to your OS version.

====Windows====
[https://stackoverflow.com/questions/44597662/conda-command-is-not-recognized-on-windows-10 Click Here]

====Linux====
[https://stackoverflow.com/questions/18675907/how-to-run-conda Click Here]

====Mac====
[https://stackoverflow.com/questions/35246386/conda-command-not-found Click Here]

In most of the cases relaunching Spyder works.
A more general Troubleshoot is present [https://github.com/spyder-ide/spyder/wiki/Troubleshooting-Guide-and-FAQ Here]

==How to run a program in Spyder IDE?==
Go to Run on the menu bar. Click Run-&gt;Run.

==Print statements==
Print statements help to display output on console. 
{{#ev:youtube|https://youtu.be/gECkqaOwyt0|250|right}}

===Syntax===
print()

===How to print a message?===
In order to print a message in Python, write print(&quot;message&quot;).
Single, double, triple quote can be used print()

'''Example:'''

'''Single Quote'''
print('Hello')  
Output: Hello

'''Double Quote'''
print(&quot;Hello&quot;)  
Output: Hello

'''Quote within quote'''
print('Is &quot;Ram&quot; a good boy?')  
Output: Is &quot;Ram&quot; a good boy?

==Escape sequences with strings==

We can use escape sequence within strings to make output more presentable.

'''\n'''  : It will move to next line.

'''\t'''  : It will add tab space(5space)

'''\a'''  : It will play system sound once.

'''Example:'''

Print(&quot;Hi, \n How are you?&quot;)

Output: 

Hi,

How are you?

Print(&quot;Hi, \t How are you?&quot;)

Output: 

Hi, &lt;5 spaces&gt; How are you?

[[File:Escape_Sequence.jpg]]

==Variables==
[[#Top]]
Variables are used to store some values. Values can be strings, integers or decimal values. 
{{#ev:youtube|https://youtu.be/60iAXH1sm-Y|250|right}}
===How to print a variable?===
In order to print the value of a variable in python, first initialise the variable and then write print(variable_name)
For example :
  x=2
  print(x)

===Some facts about Variables===
* If you want to print variable name with a message, you can use , operator. For example : I want to print Hello Simran and Simran has been stored in a variable called ''name''.
  name=&quot;Simran&quot;
  print(&quot;Hello&quot;,name)
* If you change the value of a variable, it will store the latest value. For example :
  name=&quot;Simran&quot;
  name=&quot;Amit&quot;
  If you will execute the command ''print(name)'', Amit will be displayed.
* You can perform operations like addition, subtraction etc only on integral variables.

==How to execute couple of instructions on console?==
You can execute couple of instructions on console using ;. Write Statement 1;Statement 2;......and then press ''Enter''.
{{#ev:youtube|https://youtu.be/CYQCYvLE22Y|250|right}}









==How to take input from the user?==
We can take input from the user using ''input'' function. For Example : You want the user to input variable ''x'', then write x=input(&quot;Enter the value of x&quot;) and execute. Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNkVLCxZw_jcgyS-bmrIVSP

And when the input you need is of data type other than string. You can do both the input function and data conversion in a single line.
For example:
Consider the program for letting in the patients
'''c=input(&quot;Enter (1/0)&quot;);d=int(c)'''

Instead of using it in two separate lines, combine it into a single line
'''c=int(input(&quot;Enter (1/0)&quot;))'''.

To get two inputs in same line with a space between them split() is used.

a,b=input(&quot;enter a&quot;).split(&quot;enter b&quot;)
----

==If statement==
If statement is used to execute set of two contrary statements based on a condition. 

===Syntax===
If (Condition):
    Statement 1
else:
    Statement 2

If 'Condition' is true then 'Statement 1' will be executed otherwise 'Statement 2' will be executed.

Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNhHmg3SkK1uiutigcAbH9K

==Loops==
[[#Top]]&lt;br&gt;
Loops in a programming languages are used to execute set of repetitive statements. For loop and while loop are used extensively to execute a set of looping instructions.

=== For loop Syntax ===
&lt;pre&gt;
for i in range(10): 
    Statement
&lt;/pre&gt;
range(10) indicate that values 0 to 9 will be assigned to the variable i and for each value of i the Statement will be executed, e.g.
&lt;pre&gt;
for i in range(10): 
    print(i)
&lt;/pre&gt;
Output will be
&lt;pre&gt;
0
1
2
3
4
5
6
7
8
9
&lt;/pre&gt;

=== While loop Syntax ===
&lt;pre&gt;
intialisation

while(condition):
   Statement
   increment/decrement
&lt;/pre&gt;
e.g.
&lt;pre&gt;
#initialization
i=0
while(i&lt;10): 
    print(i)
    i=i+1
&lt;/pre&gt;
Output will be:
&lt;pre&gt;
0
1
2
3
4
5
6
7
8
9
&lt;/pre&gt;
Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNbl5jkVrrw1E5XSvm3GiCI

==Importance of Indentation in Python==
Indentation is used to indicate to what block of statements belong. Indentation of blocks convey program structure in Python. Indentation in Python is used to refer a group/block of code/statements. In C++ we use { and } (curly brackets) to group a set of statements. But in Python, there are no such brackets used. Instead of such brackets used in other programming languages, we use indentation in Python.
Use tabs,instead of spaces for ease of writing code.
           Wrong indentation can lead to syntax error, or makes your output wrong according to your logic , or other errors.  e.g.
---
&lt;pre&gt;
#IndentationError: expected an indented block
i=-1
if i&lt;0:
print(&quot;Test successful&quot;)#Wrong indentation 
else:    
    print(&quot;Test failed&quot;)
&lt;/pre&gt;
&lt;pre&gt;
Output: IndentationError: expected an indented block
&lt;/pre&gt;
---
{{#ev:youtube|https://youtu.be/pmavoW419Yc|250|right}}









----

==Spyder IDE Black Screen Solution==

----

 This issue is because of ''Help'' screen which is by default open. 
 We need to close it. So here's how you do it-


===Method 1:===

Step 1-    Try by closing current pane for that,  &quot;''press ctrl+shift+F4''&quot;  wait for few seconds things will appear on screen.

Step 2-    If it so than on menu bar go to ''view &gt; panes &gt; help'' unchecked &quot;''Help''&quot; option.

Step 3-    Make sure that &quot;''Help''&quot; under ''view &gt; panes'' is permanently unchecked. And ''Editor, Ipython console, Variable explorer''  are checked. 


===Method 2:===

Step 1-    Open spyder.

Step 2-   On that black screen randomly ''Left click'' on spyder &quot;''Menu bar''&quot; area you will get menu drop downs, You have to find Drop down with &quot;''Panes''&quot; option.

Step 3-   On &quot;''Panes''&quot; drop down unchecked the &quot;''Help''&quot;.

Step 4-   Wait for few seconds Spyder view will appear.

Step 5 -  Make sure that ''&quot;Help&quot;'' under view&gt;panes is permanently unchecked. And ''Editor, Ipython console, variable explorer'' are checked.
[[#Top]]</text>
      <sha1>ab0qve1zhj6dtoke8aj503vvupdmwgt</sha1>
    </revision>
    <revision>
      <id>2143</id>
      <parentid>2142</parentid>
      <timestamp>2018-09-14T01:05:12Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* Importance of Indentation in Python */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="10159">==Introduction to Python==
Python is a widely used programming language which allows programmers to write the program in fewer lines of code. It was designed by Guido van Rossum in 1991. Python uses an interpreter instead of compiler.Basically, the main difference between compiler and interpreter is that the compiler takes the code as 'whole' and compiles it..for example in C language and on the other side in interpreter..example: languages like Python...it interprets the written code 'line by line', and if somewhere error is found...it stops interpreting the code from there itself. Here, in our course we will be using Spyder IDE. Spyder is an integrated development environment with editing options to assist the programmers in writing programs. Spyder IDE is divided into two panes, one is console and other one is where program is written.




Python works on different platforms (Windows, Mac, Linux, Raspberry Pi, etc).
Python has a simple syntax similar to the English language.
Python has syntax that allows developers to write programs with fewer lines than some other programming languages.
Python runs on an interpreter system, meaning that code can be executed as soon as it is written. This means that prototyping can be very quick.
Python can be treated in a procedural way, an object-orientated way or a functional way.

==Installing Anaconda==
[[#Top]]
This article is all about installing and troubleshooting Anaconda and Spyder on different platforms.

===Windows===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#windows Download Link]. Make sure that you download the version compatible to your operating system architecture. If you have a 64 bit OS then you can download either 64 bit of 32 bit, but if you have 32 bit OS then you should download the 32 bit version only.

Step 2 -&gt; Double click on the .exe file that you downloaded just now and follow the instructions. If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open cmd (go to Start -&gt; then type cmd in the search bar and hit enter). There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

===Mac===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#macos Download Link].

Step 2 -&gt; Double click on the .pkg file that you just downloaded. If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

===Linux===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#linux Download Link].

Step 2 -&gt; Go to the folder where you downloaded the .sh file and type following command 

  '''bash Anaconda-latest-Linux-x86_64.sh'''

If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.


==Troubleshooting Spyder==
[[#Top]]
In most of the cases, it happens that Spyder is already running and you have initiated one more instance of it. Please make sure that spyder is not running already.
If you are on Linux OS, please launch spyder through terminal. Just open the terminal and type '''spyder''' and it will launch. When Spyder opens, make sure you see Anaconda with the version written on the Ipython console. If not, try changing the path of your anaconda. Follow these steps according to your OS version.

====Windows====
[https://stackoverflow.com/questions/44597662/conda-command-is-not-recognized-on-windows-10 Click Here]

====Linux====
[https://stackoverflow.com/questions/18675907/how-to-run-conda Click Here]

====Mac====
[https://stackoverflow.com/questions/35246386/conda-command-not-found Click Here]

In most of the cases relaunching Spyder works.
A more general Troubleshoot is present [https://github.com/spyder-ide/spyder/wiki/Troubleshooting-Guide-and-FAQ Here]

==How to run a program in Spyder IDE?==
Go to Run on the menu bar. Click Run-&gt;Run.

==Print statements==
Print statements help to display output on console. 
{{#ev:youtube|https://youtu.be/gECkqaOwyt0|250|right}}

===Syntax===
print()

===How to print a message?===
In order to print a message in Python, write print(&quot;message&quot;).
Single, double, triple quote can be used print()

'''Example:'''

'''Single Quote'''
print('Hello')  
Output: Hello

'''Double Quote'''
print(&quot;Hello&quot;)  
Output: Hello

'''Quote within quote'''
print('Is &quot;Ram&quot; a good boy?')  
Output: Is &quot;Ram&quot; a good boy?

==Escape sequences with strings==

We can use escape sequence within strings to make output more presentable.

'''\n'''  : It will move to next line.

'''\t'''  : It will add tab space(5space)

'''\a'''  : It will play system sound once.

'''Example:'''

Print(&quot;Hi, \n How are you?&quot;)

Output: 

Hi,

How are you?

Print(&quot;Hi, \t How are you?&quot;)

Output: 

Hi, &lt;5 spaces&gt; How are you?

[[File:Escape_Sequence.jpg]]

==Variables==
[[#Top]]
Variables are used to store some values. Values can be strings, integers or decimal values. 
{{#ev:youtube|https://youtu.be/60iAXH1sm-Y|250|right}}
===How to print a variable?===
In order to print the value of a variable in python, first initialise the variable and then write print(variable_name)
For example :
  x=2
  print(x)

===Some facts about Variables===
* If you want to print variable name with a message, you can use , operator. For example : I want to print Hello Simran and Simran has been stored in a variable called ''name''.
  name=&quot;Simran&quot;
  print(&quot;Hello&quot;,name)
* If you change the value of a variable, it will store the latest value. For example :
  name=&quot;Simran&quot;
  name=&quot;Amit&quot;
  If you will execute the command ''print(name)'', Amit will be displayed.
* You can perform operations like addition, subtraction etc only on integral variables.

==How to execute couple of instructions on console?==
You can execute couple of instructions on console using ;. Write Statement 1;Statement 2;......and then press ''Enter''.
{{#ev:youtube|https://youtu.be/CYQCYvLE22Y|250|right}}









==How to take input from the user?==
We can take input from the user using ''input'' function. For Example : You want the user to input variable ''x'', then write x=input(&quot;Enter the value of x&quot;) and execute. Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNkVLCxZw_jcgyS-bmrIVSP

And when the input you need is of data type other than string. You can do both the input function and data conversion in a single line.
For example:
Consider the program for letting in the patients
'''c=input(&quot;Enter (1/0)&quot;);d=int(c)'''

Instead of using it in two separate lines, combine it into a single line
'''c=int(input(&quot;Enter (1/0)&quot;))'''.

To get two inputs in same line with a space between them split() is used.

a,b=input(&quot;enter a&quot;).split(&quot;enter b&quot;)
----

==If statement==
If statement is used to execute set of two contrary statements based on a condition. 

===Syntax===
If (Condition):
    Statement 1
else:
    Statement 2

If 'Condition' is true then 'Statement 1' will be executed otherwise 'Statement 2' will be executed.

Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNhHmg3SkK1uiutigcAbH9K

==Loops==
[[#Top]]&lt;br&gt;
Loops in a programming languages are used to execute set of repetitive statements. For loop and while loop are used extensively to execute a set of looping instructions.

=== For loop Syntax ===
&lt;pre&gt;
for i in range(10): 
    Statement
&lt;/pre&gt;
range(10) indicate that values 0 to 9 will be assigned to the variable i and for each value of i the Statement will be executed, e.g.
&lt;pre&gt;
for i in range(10): 
    print(i)
&lt;/pre&gt;
Output will be
&lt;pre&gt;
0
1
2
3
4
5
6
7
8
9
&lt;/pre&gt;

=== While loop Syntax ===
&lt;pre&gt;
intialisation

while(condition):
   Statement
   increment/decrement
&lt;/pre&gt;
e.g.
&lt;pre&gt;
#initialization
i=0
while(i&lt;10): 
    print(i)
    i=i+1
&lt;/pre&gt;
Output will be:
&lt;pre&gt;
0
1
2
3
4
5
6
7
8
9
&lt;/pre&gt;
Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNbl5jkVrrw1E5XSvm3GiCI

==Importance of Indentation in Python==
Indentation is used to indicate to what block of statements belong. Indentation of blocks convey program structure in Python. Indentation in Python is used to refer a group/block of code/statements. In C++ we use { and } (curly brackets) to group a set of statements. But in Python, there are no such brackets used. Instead of such brackets used in other programming languages, we use indentation in Python.
Use tabs,instead of spaces for ease of writing code.
           Wrong indentation can lead to syntax error, or makes your output wrong according to your logic,
 or other errors.  e.g.
---
&lt;pre&gt;
#IndentationError: expected an indented block
i=-1
if i&lt;0:
print(&quot;Test successful&quot;)#Wrong indentation 
else:    
    print(&quot;Test failed&quot;)
&lt;/pre&gt;
&lt;pre&gt;
Output: IndentationError: expected an indented block
&lt;/pre&gt;
---
{{#ev:youtube|https://youtu.be/pmavoW419Yc|250|right}}









----

==Spyder IDE Black Screen Solution==

----

 This issue is because of ''Help'' screen which is by default open. 
 We need to close it. So here's how you do it-


===Method 1:===

Step 1-    Try by closing current pane for that,  &quot;''press ctrl+shift+F4''&quot;  wait for few seconds things will appear on screen.

Step 2-    If it so than on menu bar go to ''view &gt; panes &gt; help'' unchecked &quot;''Help''&quot; option.

Step 3-    Make sure that &quot;''Help''&quot; under ''view &gt; panes'' is permanently unchecked. And ''Editor, Ipython console, Variable explorer''  are checked. 


===Method 2:===

Step 1-    Open spyder.

Step 2-   On that black screen randomly ''Left click'' on spyder &quot;''Menu bar''&quot; area you will get menu drop downs, You have to find Drop down with &quot;''Panes''&quot; option.

Step 3-   On &quot;''Panes''&quot; drop down unchecked the &quot;''Help''&quot;.

Step 4-   Wait for few seconds Spyder view will appear.

Step 5 -  Make sure that ''&quot;Help&quot;'' under view&gt;panes is permanently unchecked. And ''Editor, Ipython console, variable explorer'' are checked.
[[#Top]]</text>
      <sha1>qsqnwcw247ishqyzmhcniek9gt6408r</sha1>
    </revision>
    <revision>
      <id>2144</id>
      <parentid>2143</parentid>
      <timestamp>2018-09-14T01:05:36Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* Importance of Indentation in Python */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="10149">==Introduction to Python==
Python is a widely used programming language which allows programmers to write the program in fewer lines of code. It was designed by Guido van Rossum in 1991. Python uses an interpreter instead of compiler.Basically, the main difference between compiler and interpreter is that the compiler takes the code as 'whole' and compiles it..for example in C language and on the other side in interpreter..example: languages like Python...it interprets the written code 'line by line', and if somewhere error is found...it stops interpreting the code from there itself. Here, in our course we will be using Spyder IDE. Spyder is an integrated development environment with editing options to assist the programmers in writing programs. Spyder IDE is divided into two panes, one is console and other one is where program is written.




Python works on different platforms (Windows, Mac, Linux, Raspberry Pi, etc).
Python has a simple syntax similar to the English language.
Python has syntax that allows developers to write programs with fewer lines than some other programming languages.
Python runs on an interpreter system, meaning that code can be executed as soon as it is written. This means that prototyping can be very quick.
Python can be treated in a procedural way, an object-orientated way or a functional way.

==Installing Anaconda==
[[#Top]]
This article is all about installing and troubleshooting Anaconda and Spyder on different platforms.

===Windows===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#windows Download Link]. Make sure that you download the version compatible to your operating system architecture. If you have a 64 bit OS then you can download either 64 bit of 32 bit, but if you have 32 bit OS then you should download the 32 bit version only.

Step 2 -&gt; Double click on the .exe file that you downloaded just now and follow the instructions. If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open cmd (go to Start -&gt; then type cmd in the search bar and hit enter). There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

===Mac===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#macos Download Link].

Step 2 -&gt; Double click on the .pkg file that you just downloaded. If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

===Linux===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#linux Download Link].

Step 2 -&gt; Go to the folder where you downloaded the .sh file and type following command 

  '''bash Anaconda-latest-Linux-x86_64.sh'''

If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.


==Troubleshooting Spyder==
[[#Top]]
In most of the cases, it happens that Spyder is already running and you have initiated one more instance of it. Please make sure that spyder is not running already.
If you are on Linux OS, please launch spyder through terminal. Just open the terminal and type '''spyder''' and it will launch. When Spyder opens, make sure you see Anaconda with the version written on the Ipython console. If not, try changing the path of your anaconda. Follow these steps according to your OS version.

====Windows====
[https://stackoverflow.com/questions/44597662/conda-command-is-not-recognized-on-windows-10 Click Here]

====Linux====
[https://stackoverflow.com/questions/18675907/how-to-run-conda Click Here]

====Mac====
[https://stackoverflow.com/questions/35246386/conda-command-not-found Click Here]

In most of the cases relaunching Spyder works.
A more general Troubleshoot is present [https://github.com/spyder-ide/spyder/wiki/Troubleshooting-Guide-and-FAQ Here]

==How to run a program in Spyder IDE?==
Go to Run on the menu bar. Click Run-&gt;Run.

==Print statements==
Print statements help to display output on console. 
{{#ev:youtube|https://youtu.be/gECkqaOwyt0|250|right}}

===Syntax===
print()

===How to print a message?===
In order to print a message in Python, write print(&quot;message&quot;).
Single, double, triple quote can be used print()

'''Example:'''

'''Single Quote'''
print('Hello')  
Output: Hello

'''Double Quote'''
print(&quot;Hello&quot;)  
Output: Hello

'''Quote within quote'''
print('Is &quot;Ram&quot; a good boy?')  
Output: Is &quot;Ram&quot; a good boy?

==Escape sequences with strings==

We can use escape sequence within strings to make output more presentable.

'''\n'''  : It will move to next line.

'''\t'''  : It will add tab space(5space)

'''\a'''  : It will play system sound once.

'''Example:'''

Print(&quot;Hi, \n How are you?&quot;)

Output: 

Hi,

How are you?

Print(&quot;Hi, \t How are you?&quot;)

Output: 

Hi, &lt;5 spaces&gt; How are you?

[[File:Escape_Sequence.jpg]]

==Variables==
[[#Top]]
Variables are used to store some values. Values can be strings, integers or decimal values. 
{{#ev:youtube|https://youtu.be/60iAXH1sm-Y|250|right}}
===How to print a variable?===
In order to print the value of a variable in python, first initialise the variable and then write print(variable_name)
For example :
  x=2
  print(x)

===Some facts about Variables===
* If you want to print variable name with a message, you can use , operator. For example : I want to print Hello Simran and Simran has been stored in a variable called ''name''.
  name=&quot;Simran&quot;
  print(&quot;Hello&quot;,name)
* If you change the value of a variable, it will store the latest value. For example :
  name=&quot;Simran&quot;
  name=&quot;Amit&quot;
  If you will execute the command ''print(name)'', Amit will be displayed.
* You can perform operations like addition, subtraction etc only on integral variables.

==How to execute couple of instructions on console?==
You can execute couple of instructions on console using ;. Write Statement 1;Statement 2;......and then press ''Enter''.
{{#ev:youtube|https://youtu.be/CYQCYvLE22Y|250|right}}









==How to take input from the user?==
We can take input from the user using ''input'' function. For Example : You want the user to input variable ''x'', then write x=input(&quot;Enter the value of x&quot;) and execute. Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNkVLCxZw_jcgyS-bmrIVSP

And when the input you need is of data type other than string. You can do both the input function and data conversion in a single line.
For example:
Consider the program for letting in the patients
'''c=input(&quot;Enter (1/0)&quot;);d=int(c)'''

Instead of using it in two separate lines, combine it into a single line
'''c=int(input(&quot;Enter (1/0)&quot;))'''.

To get two inputs in same line with a space between them split() is used.

a,b=input(&quot;enter a&quot;).split(&quot;enter b&quot;)
----

==If statement==
If statement is used to execute set of two contrary statements based on a condition. 

===Syntax===
If (Condition):
    Statement 1
else:
    Statement 2

If 'Condition' is true then 'Statement 1' will be executed otherwise 'Statement 2' will be executed.

Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNhHmg3SkK1uiutigcAbH9K

==Loops==
[[#Top]]&lt;br&gt;
Loops in a programming languages are used to execute set of repetitive statements. For loop and while loop are used extensively to execute a set of looping instructions.

=== For loop Syntax ===
&lt;pre&gt;
for i in range(10): 
    Statement
&lt;/pre&gt;
range(10) indicate that values 0 to 9 will be assigned to the variable i and for each value of i the Statement will be executed, e.g.
&lt;pre&gt;
for i in range(10): 
    print(i)
&lt;/pre&gt;
Output will be
&lt;pre&gt;
0
1
2
3
4
5
6
7
8
9
&lt;/pre&gt;

=== While loop Syntax ===
&lt;pre&gt;
intialisation

while(condition):
   Statement
   increment/decrement
&lt;/pre&gt;
e.g.
&lt;pre&gt;
#initialization
i=0
while(i&lt;10): 
    print(i)
    i=i+1
&lt;/pre&gt;
Output will be:
&lt;pre&gt;
0
1
2
3
4
5
6
7
8
9
&lt;/pre&gt;
Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNbl5jkVrrw1E5XSvm3GiCI

==Importance of Indentation in Python==
Indentation is used to indicate to what block of statements belong. Indentation of blocks convey program structure in Python. Indentation in Python is used to refer a group/block of code/statements. In C++ we use { and } (curly brackets) to group a set of statements. But in Python, there are no such brackets used. Instead of such brackets used in other programming languages, we use indentation in Python.
Use tabs,instead of spaces for ease of writing code.

Wrong indentation can lead to syntax error, or makes your output wrong according to your logic,
 or other errors.  e.g.
---
&lt;pre&gt;
#IndentationError: expected an indented block
i=-1
if i&lt;0:
print(&quot;Test successful&quot;)#Wrong indentation 
else:    
    print(&quot;Test failed&quot;)
&lt;/pre&gt;
&lt;pre&gt;
Output: IndentationError: expected an indented block
&lt;/pre&gt;
---
{{#ev:youtube|https://youtu.be/pmavoW419Yc|250|right}}









----

==Spyder IDE Black Screen Solution==

----

 This issue is because of ''Help'' screen which is by default open. 
 We need to close it. So here's how you do it-


===Method 1:===

Step 1-    Try by closing current pane for that,  &quot;''press ctrl+shift+F4''&quot;  wait for few seconds things will appear on screen.

Step 2-    If it so than on menu bar go to ''view &gt; panes &gt; help'' unchecked &quot;''Help''&quot; option.

Step 3-    Make sure that &quot;''Help''&quot; under ''view &gt; panes'' is permanently unchecked. And ''Editor, Ipython console, Variable explorer''  are checked. 


===Method 2:===

Step 1-    Open spyder.

Step 2-   On that black screen randomly ''Left click'' on spyder &quot;''Menu bar''&quot; area you will get menu drop downs, You have to find Drop down with &quot;''Panes''&quot; option.

Step 3-   On &quot;''Panes''&quot; drop down unchecked the &quot;''Help''&quot;.

Step 4-   Wait for few seconds Spyder view will appear.

Step 5 -  Make sure that ''&quot;Help&quot;'' under view&gt;panes is permanently unchecked. And ''Editor, Ipython console, variable explorer'' are checked.
[[#Top]]</text>
      <sha1>osum0vckmk1dd8tw275lmp8icbs9iap</sha1>
    </revision>
    <revision>
      <id>2145</id>
      <parentid>2144</parentid>
      <timestamp>2018-09-14T01:06:00Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* Importance of Indentation in Python */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="10148">==Introduction to Python==
Python is a widely used programming language which allows programmers to write the program in fewer lines of code. It was designed by Guido van Rossum in 1991. Python uses an interpreter instead of compiler.Basically, the main difference between compiler and interpreter is that the compiler takes the code as 'whole' and compiles it..for example in C language and on the other side in interpreter..example: languages like Python...it interprets the written code 'line by line', and if somewhere error is found...it stops interpreting the code from there itself. Here, in our course we will be using Spyder IDE. Spyder is an integrated development environment with editing options to assist the programmers in writing programs. Spyder IDE is divided into two panes, one is console and other one is where program is written.




Python works on different platforms (Windows, Mac, Linux, Raspberry Pi, etc).
Python has a simple syntax similar to the English language.
Python has syntax that allows developers to write programs with fewer lines than some other programming languages.
Python runs on an interpreter system, meaning that code can be executed as soon as it is written. This means that prototyping can be very quick.
Python can be treated in a procedural way, an object-orientated way or a functional way.

==Installing Anaconda==
[[#Top]]
This article is all about installing and troubleshooting Anaconda and Spyder on different platforms.

===Windows===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#windows Download Link]. Make sure that you download the version compatible to your operating system architecture. If you have a 64 bit OS then you can download either 64 bit of 32 bit, but if you have 32 bit OS then you should download the 32 bit version only.

Step 2 -&gt; Double click on the .exe file that you downloaded just now and follow the instructions. If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open cmd (go to Start -&gt; then type cmd in the search bar and hit enter). There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

===Mac===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#macos Download Link].

Step 2 -&gt; Double click on the .pkg file that you just downloaded. If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

===Linux===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#linux Download Link].

Step 2 -&gt; Go to the folder where you downloaded the .sh file and type following command 

  '''bash Anaconda-latest-Linux-x86_64.sh'''

If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.


==Troubleshooting Spyder==
[[#Top]]
In most of the cases, it happens that Spyder is already running and you have initiated one more instance of it. Please make sure that spyder is not running already.
If you are on Linux OS, please launch spyder through terminal. Just open the terminal and type '''spyder''' and it will launch. When Spyder opens, make sure you see Anaconda with the version written on the Ipython console. If not, try changing the path of your anaconda. Follow these steps according to your OS version.

====Windows====
[https://stackoverflow.com/questions/44597662/conda-command-is-not-recognized-on-windows-10 Click Here]

====Linux====
[https://stackoverflow.com/questions/18675907/how-to-run-conda Click Here]

====Mac====
[https://stackoverflow.com/questions/35246386/conda-command-not-found Click Here]

In most of the cases relaunching Spyder works.
A more general Troubleshoot is present [https://github.com/spyder-ide/spyder/wiki/Troubleshooting-Guide-and-FAQ Here]

==How to run a program in Spyder IDE?==
Go to Run on the menu bar. Click Run-&gt;Run.

==Print statements==
Print statements help to display output on console. 
{{#ev:youtube|https://youtu.be/gECkqaOwyt0|250|right}}

===Syntax===
print()

===How to print a message?===
In order to print a message in Python, write print(&quot;message&quot;).
Single, double, triple quote can be used print()

'''Example:'''

'''Single Quote'''
print('Hello')  
Output: Hello

'''Double Quote'''
print(&quot;Hello&quot;)  
Output: Hello

'''Quote within quote'''
print('Is &quot;Ram&quot; a good boy?')  
Output: Is &quot;Ram&quot; a good boy?

==Escape sequences with strings==

We can use escape sequence within strings to make output more presentable.

'''\n'''  : It will move to next line.

'''\t'''  : It will add tab space(5space)

'''\a'''  : It will play system sound once.

'''Example:'''

Print(&quot;Hi, \n How are you?&quot;)

Output: 

Hi,

How are you?

Print(&quot;Hi, \t How are you?&quot;)

Output: 

Hi, &lt;5 spaces&gt; How are you?

[[File:Escape_Sequence.jpg]]

==Variables==
[[#Top]]
Variables are used to store some values. Values can be strings, integers or decimal values. 
{{#ev:youtube|https://youtu.be/60iAXH1sm-Y|250|right}}
===How to print a variable?===
In order to print the value of a variable in python, first initialise the variable and then write print(variable_name)
For example :
  x=2
  print(x)

===Some facts about Variables===
* If you want to print variable name with a message, you can use , operator. For example : I want to print Hello Simran and Simran has been stored in a variable called ''name''.
  name=&quot;Simran&quot;
  print(&quot;Hello&quot;,name)
* If you change the value of a variable, it will store the latest value. For example :
  name=&quot;Simran&quot;
  name=&quot;Amit&quot;
  If you will execute the command ''print(name)'', Amit will be displayed.
* You can perform operations like addition, subtraction etc only on integral variables.

==How to execute couple of instructions on console?==
You can execute couple of instructions on console using ;. Write Statement 1;Statement 2;......and then press ''Enter''.
{{#ev:youtube|https://youtu.be/CYQCYvLE22Y|250|right}}









==How to take input from the user?==
We can take input from the user using ''input'' function. For Example : You want the user to input variable ''x'', then write x=input(&quot;Enter the value of x&quot;) and execute. Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNkVLCxZw_jcgyS-bmrIVSP

And when the input you need is of data type other than string. You can do both the input function and data conversion in a single line.
For example:
Consider the program for letting in the patients
'''c=input(&quot;Enter (1/0)&quot;);d=int(c)'''

Instead of using it in two separate lines, combine it into a single line
'''c=int(input(&quot;Enter (1/0)&quot;))'''.

To get two inputs in same line with a space between them split() is used.

a,b=input(&quot;enter a&quot;).split(&quot;enter b&quot;)
----

==If statement==
If statement is used to execute set of two contrary statements based on a condition. 

===Syntax===
If (Condition):
    Statement 1
else:
    Statement 2

If 'Condition' is true then 'Statement 1' will be executed otherwise 'Statement 2' will be executed.

Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNhHmg3SkK1uiutigcAbH9K

==Loops==
[[#Top]]&lt;br&gt;
Loops in a programming languages are used to execute set of repetitive statements. For loop and while loop are used extensively to execute a set of looping instructions.

=== For loop Syntax ===
&lt;pre&gt;
for i in range(10): 
    Statement
&lt;/pre&gt;
range(10) indicate that values 0 to 9 will be assigned to the variable i and for each value of i the Statement will be executed, e.g.
&lt;pre&gt;
for i in range(10): 
    print(i)
&lt;/pre&gt;
Output will be
&lt;pre&gt;
0
1
2
3
4
5
6
7
8
9
&lt;/pre&gt;

=== While loop Syntax ===
&lt;pre&gt;
intialisation

while(condition):
   Statement
   increment/decrement
&lt;/pre&gt;
e.g.
&lt;pre&gt;
#initialization
i=0
while(i&lt;10): 
    print(i)
    i=i+1
&lt;/pre&gt;
Output will be:
&lt;pre&gt;
0
1
2
3
4
5
6
7
8
9
&lt;/pre&gt;
Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNbl5jkVrrw1E5XSvm3GiCI

==Importance of Indentation in Python==
Indentation is used to indicate to what block of statements belong. Indentation of blocks convey program structure in Python. Indentation in Python is used to refer a group/block of code/statements. In C++ we use { and } (curly brackets) to group a set of statements. But in Python, there are no such brackets used. Instead of such brackets used in other programming languages, we use indentation in Python.
Use tabs,instead of spaces for ease of writing code.

Wrong indentation can lead to syntax error, or makes your output wrong according to your logic, or other errors.  e.g.
---
&lt;pre&gt;
#IndentationError: expected an indented block
i=-1
if i&lt;0:
print(&quot;Test successful&quot;)#Wrong indentation 
else:    
    print(&quot;Test failed&quot;)
&lt;/pre&gt;
&lt;pre&gt;
Output: IndentationError: expected an indented block
&lt;/pre&gt;
---
{{#ev:youtube|https://youtu.be/pmavoW419Yc|250|right}}









----

==Spyder IDE Black Screen Solution==

----

 This issue is because of ''Help'' screen which is by default open. 
 We need to close it. So here's how you do it-


===Method 1:===

Step 1-    Try by closing current pane for that,  &quot;''press ctrl+shift+F4''&quot;  wait for few seconds things will appear on screen.

Step 2-    If it so than on menu bar go to ''view &gt; panes &gt; help'' unchecked &quot;''Help''&quot; option.

Step 3-    Make sure that &quot;''Help''&quot; under ''view &gt; panes'' is permanently unchecked. And ''Editor, Ipython console, Variable explorer''  are checked. 


===Method 2:===

Step 1-    Open spyder.

Step 2-   On that black screen randomly ''Left click'' on spyder &quot;''Menu bar''&quot; area you will get menu drop downs, You have to find Drop down with &quot;''Panes''&quot; option.

Step 3-   On &quot;''Panes''&quot; drop down unchecked the &quot;''Help''&quot;.

Step 4-   Wait for few seconds Spyder view will appear.

Step 5 -  Make sure that ''&quot;Help&quot;'' under view&gt;panes is permanently unchecked. And ''Editor, Ipython console, variable explorer'' are checked.
[[#Top]]</text>
      <sha1>cklycpi20uqv4g6dcllb08j4w5xxd4n</sha1>
    </revision>
    <revision>
      <id>2146</id>
      <parentid>2145</parentid>
      <timestamp>2018-09-14T01:06:23Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* Importance of Indentation in Python */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="10142">==Introduction to Python==
Python is a widely used programming language which allows programmers to write the program in fewer lines of code. It was designed by Guido van Rossum in 1991. Python uses an interpreter instead of compiler.Basically, the main difference between compiler and interpreter is that the compiler takes the code as 'whole' and compiles it..for example in C language and on the other side in interpreter..example: languages like Python...it interprets the written code 'line by line', and if somewhere error is found...it stops interpreting the code from there itself. Here, in our course we will be using Spyder IDE. Spyder is an integrated development environment with editing options to assist the programmers in writing programs. Spyder IDE is divided into two panes, one is console and other one is where program is written.




Python works on different platforms (Windows, Mac, Linux, Raspberry Pi, etc).
Python has a simple syntax similar to the English language.
Python has syntax that allows developers to write programs with fewer lines than some other programming languages.
Python runs on an interpreter system, meaning that code can be executed as soon as it is written. This means that prototyping can be very quick.
Python can be treated in a procedural way, an object-orientated way or a functional way.

==Installing Anaconda==
[[#Top]]
This article is all about installing and troubleshooting Anaconda and Spyder on different platforms.

===Windows===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#windows Download Link]. Make sure that you download the version compatible to your operating system architecture. If you have a 64 bit OS then you can download either 64 bit of 32 bit, but if you have 32 bit OS then you should download the 32 bit version only.

Step 2 -&gt; Double click on the .exe file that you downloaded just now and follow the instructions. If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open cmd (go to Start -&gt; then type cmd in the search bar and hit enter). There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

===Mac===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#macos Download Link].

Step 2 -&gt; Double click on the .pkg file that you just downloaded. If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

===Linux===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#linux Download Link].

Step 2 -&gt; Go to the folder where you downloaded the .sh file and type following command 

  '''bash Anaconda-latest-Linux-x86_64.sh'''

If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.


==Troubleshooting Spyder==
[[#Top]]
In most of the cases, it happens that Spyder is already running and you have initiated one more instance of it. Please make sure that spyder is not running already.
If you are on Linux OS, please launch spyder through terminal. Just open the terminal and type '''spyder''' and it will launch. When Spyder opens, make sure you see Anaconda with the version written on the Ipython console. If not, try changing the path of your anaconda. Follow these steps according to your OS version.

====Windows====
[https://stackoverflow.com/questions/44597662/conda-command-is-not-recognized-on-windows-10 Click Here]

====Linux====
[https://stackoverflow.com/questions/18675907/how-to-run-conda Click Here]

====Mac====
[https://stackoverflow.com/questions/35246386/conda-command-not-found Click Here]

In most of the cases relaunching Spyder works.
A more general Troubleshoot is present [https://github.com/spyder-ide/spyder/wiki/Troubleshooting-Guide-and-FAQ Here]

==How to run a program in Spyder IDE?==
Go to Run on the menu bar. Click Run-&gt;Run.

==Print statements==
Print statements help to display output on console. 
{{#ev:youtube|https://youtu.be/gECkqaOwyt0|250|right}}

===Syntax===
print()

===How to print a message?===
In order to print a message in Python, write print(&quot;message&quot;).
Single, double, triple quote can be used print()

'''Example:'''

'''Single Quote'''
print('Hello')  
Output: Hello

'''Double Quote'''
print(&quot;Hello&quot;)  
Output: Hello

'''Quote within quote'''
print('Is &quot;Ram&quot; a good boy?')  
Output: Is &quot;Ram&quot; a good boy?

==Escape sequences with strings==

We can use escape sequence within strings to make output more presentable.

'''\n'''  : It will move to next line.

'''\t'''  : It will add tab space(5space)

'''\a'''  : It will play system sound once.

'''Example:'''

Print(&quot;Hi, \n How are you?&quot;)

Output: 

Hi,

How are you?

Print(&quot;Hi, \t How are you?&quot;)

Output: 

Hi, &lt;5 spaces&gt; How are you?

[[File:Escape_Sequence.jpg]]

==Variables==
[[#Top]]
Variables are used to store some values. Values can be strings, integers or decimal values. 
{{#ev:youtube|https://youtu.be/60iAXH1sm-Y|250|right}}
===How to print a variable?===
In order to print the value of a variable in python, first initialise the variable and then write print(variable_name)
For example :
  x=2
  print(x)

===Some facts about Variables===
* If you want to print variable name with a message, you can use , operator. For example : I want to print Hello Simran and Simran has been stored in a variable called ''name''.
  name=&quot;Simran&quot;
  print(&quot;Hello&quot;,name)
* If you change the value of a variable, it will store the latest value. For example :
  name=&quot;Simran&quot;
  name=&quot;Amit&quot;
  If you will execute the command ''print(name)'', Amit will be displayed.
* You can perform operations like addition, subtraction etc only on integral variables.

==How to execute couple of instructions on console?==
You can execute couple of instructions on console using ;. Write Statement 1;Statement 2;......and then press ''Enter''.
{{#ev:youtube|https://youtu.be/CYQCYvLE22Y|250|right}}









==How to take input from the user?==
We can take input from the user using ''input'' function. For Example : You want the user to input variable ''x'', then write x=input(&quot;Enter the value of x&quot;) and execute. Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNkVLCxZw_jcgyS-bmrIVSP

And when the input you need is of data type other than string. You can do both the input function and data conversion in a single line.
For example:
Consider the program for letting in the patients
'''c=input(&quot;Enter (1/0)&quot;);d=int(c)'''

Instead of using it in two separate lines, combine it into a single line
'''c=int(input(&quot;Enter (1/0)&quot;))'''.

To get two inputs in same line with a space between them split() is used.

a,b=input(&quot;enter a&quot;).split(&quot;enter b&quot;)
----

==If statement==
If statement is used to execute set of two contrary statements based on a condition. 

===Syntax===
If (Condition):
    Statement 1
else:
    Statement 2

If 'Condition' is true then 'Statement 1' will be executed otherwise 'Statement 2' will be executed.

Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNhHmg3SkK1uiutigcAbH9K

==Loops==
[[#Top]]&lt;br&gt;
Loops in a programming languages are used to execute set of repetitive statements. For loop and while loop are used extensively to execute a set of looping instructions.

=== For loop Syntax ===
&lt;pre&gt;
for i in range(10): 
    Statement
&lt;/pre&gt;
range(10) indicate that values 0 to 9 will be assigned to the variable i and for each value of i the Statement will be executed, e.g.
&lt;pre&gt;
for i in range(10): 
    print(i)
&lt;/pre&gt;
Output will be
&lt;pre&gt;
0
1
2
3
4
5
6
7
8
9
&lt;/pre&gt;

=== While loop Syntax ===
&lt;pre&gt;
intialisation

while(condition):
   Statement
   increment/decrement
&lt;/pre&gt;
e.g.
&lt;pre&gt;
#initialization
i=0
while(i&lt;10): 
    print(i)
    i=i+1
&lt;/pre&gt;
Output will be:
&lt;pre&gt;
0
1
2
3
4
5
6
7
8
9
&lt;/pre&gt;
Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNbl5jkVrrw1E5XSvm3GiCI

==Importance of Indentation in Python==
Indentation is used to indicate to what block of statements belong. Indentation of blocks convey program structure in Python. Indentation in Python is used to refer a group/block of code/statements. In C++ we use { and } (curly brackets) to group a set of statements. But in Python, there are no such brackets used. Instead of such brackets used in other programming languages, we use indentation in Python.
Use tabs,instead of spaces for ease of writing code.

Wrong indentation can lead to syntax error, or makes your output wrong according to your logic, or other errors.  e.g.

&lt;pre&gt;
#IndentationError: expected an indented block
i=-1
if i&lt;0:
print(&quot;Test successful&quot;)#Wrong indentation 
else:    
    print(&quot;Test failed&quot;)
&lt;/pre&gt;
&lt;pre&gt;
Output: IndentationError: expected an indented block
&lt;/pre&gt;

{{#ev:youtube|https://youtu.be/pmavoW419Yc|250|right}}









----

==Spyder IDE Black Screen Solution==

----

 This issue is because of ''Help'' screen which is by default open. 
 We need to close it. So here's how you do it-


===Method 1:===

Step 1-    Try by closing current pane for that,  &quot;''press ctrl+shift+F4''&quot;  wait for few seconds things will appear on screen.

Step 2-    If it so than on menu bar go to ''view &gt; panes &gt; help'' unchecked &quot;''Help''&quot; option.

Step 3-    Make sure that &quot;''Help''&quot; under ''view &gt; panes'' is permanently unchecked. And ''Editor, Ipython console, Variable explorer''  are checked. 


===Method 2:===

Step 1-    Open spyder.

Step 2-   On that black screen randomly ''Left click'' on spyder &quot;''Menu bar''&quot; area you will get menu drop downs, You have to find Drop down with &quot;''Panes''&quot; option.

Step 3-   On &quot;''Panes''&quot; drop down unchecked the &quot;''Help''&quot;.

Step 4-   Wait for few seconds Spyder view will appear.

Step 5 -  Make sure that ''&quot;Help&quot;'' under view&gt;panes is permanently unchecked. And ''Editor, Ipython console, variable explorer'' are checked.
[[#Top]]</text>
      <sha1>17sn90ovlbqzqnzceo3gconymertxab</sha1>
    </revision>
    <revision>
      <id>2147</id>
      <parentid>2146</parentid>
      <timestamp>2018-09-14T01:07:51Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* Importance of Indentation in Python */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="10298">==Introduction to Python==
Python is a widely used programming language which allows programmers to write the program in fewer lines of code. It was designed by Guido van Rossum in 1991. Python uses an interpreter instead of compiler.Basically, the main difference between compiler and interpreter is that the compiler takes the code as 'whole' and compiles it..for example in C language and on the other side in interpreter..example: languages like Python...it interprets the written code 'line by line', and if somewhere error is found...it stops interpreting the code from there itself. Here, in our course we will be using Spyder IDE. Spyder is an integrated development environment with editing options to assist the programmers in writing programs. Spyder IDE is divided into two panes, one is console and other one is where program is written.




Python works on different platforms (Windows, Mac, Linux, Raspberry Pi, etc).
Python has a simple syntax similar to the English language.
Python has syntax that allows developers to write programs with fewer lines than some other programming languages.
Python runs on an interpreter system, meaning that code can be executed as soon as it is written. This means that prototyping can be very quick.
Python can be treated in a procedural way, an object-orientated way or a functional way.

==Installing Anaconda==
[[#Top]]
This article is all about installing and troubleshooting Anaconda and Spyder on different platforms.

===Windows===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#windows Download Link]. Make sure that you download the version compatible to your operating system architecture. If you have a 64 bit OS then you can download either 64 bit of 32 bit, but if you have 32 bit OS then you should download the 32 bit version only.

Step 2 -&gt; Double click on the .exe file that you downloaded just now and follow the instructions. If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open cmd (go to Start -&gt; then type cmd in the search bar and hit enter). There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

===Mac===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#macos Download Link].

Step 2 -&gt; Double click on the .pkg file that you just downloaded. If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

===Linux===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#linux Download Link].

Step 2 -&gt; Go to the folder where you downloaded the .sh file and type following command 

  '''bash Anaconda-latest-Linux-x86_64.sh'''

If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.


==Troubleshooting Spyder==
[[#Top]]
In most of the cases, it happens that Spyder is already running and you have initiated one more instance of it. Please make sure that spyder is not running already.
If you are on Linux OS, please launch spyder through terminal. Just open the terminal and type '''spyder''' and it will launch. When Spyder opens, make sure you see Anaconda with the version written on the Ipython console. If not, try changing the path of your anaconda. Follow these steps according to your OS version.

====Windows====
[https://stackoverflow.com/questions/44597662/conda-command-is-not-recognized-on-windows-10 Click Here]

====Linux====
[https://stackoverflow.com/questions/18675907/how-to-run-conda Click Here]

====Mac====
[https://stackoverflow.com/questions/35246386/conda-command-not-found Click Here]

In most of the cases relaunching Spyder works.
A more general Troubleshoot is present [https://github.com/spyder-ide/spyder/wiki/Troubleshooting-Guide-and-FAQ Here]

==How to run a program in Spyder IDE?==
Go to Run on the menu bar. Click Run-&gt;Run.

==Print statements==
Print statements help to display output on console. 
{{#ev:youtube|https://youtu.be/gECkqaOwyt0|250|right}}

===Syntax===
print()

===How to print a message?===
In order to print a message in Python, write print(&quot;message&quot;).
Single, double, triple quote can be used print()

'''Example:'''

'''Single Quote'''
print('Hello')  
Output: Hello

'''Double Quote'''
print(&quot;Hello&quot;)  
Output: Hello

'''Quote within quote'''
print('Is &quot;Ram&quot; a good boy?')  
Output: Is &quot;Ram&quot; a good boy?

==Escape sequences with strings==

We can use escape sequence within strings to make output more presentable.

'''\n'''  : It will move to next line.

'''\t'''  : It will add tab space(5space)

'''\a'''  : It will play system sound once.

'''Example:'''

Print(&quot;Hi, \n How are you?&quot;)

Output: 

Hi,

How are you?

Print(&quot;Hi, \t How are you?&quot;)

Output: 

Hi, &lt;5 spaces&gt; How are you?

[[File:Escape_Sequence.jpg]]

==Variables==
[[#Top]]
Variables are used to store some values. Values can be strings, integers or decimal values. 
{{#ev:youtube|https://youtu.be/60iAXH1sm-Y|250|right}}
===How to print a variable?===
In order to print the value of a variable in python, first initialise the variable and then write print(variable_name)
For example :
  x=2
  print(x)

===Some facts about Variables===
* If you want to print variable name with a message, you can use , operator. For example : I want to print Hello Simran and Simran has been stored in a variable called ''name''.
  name=&quot;Simran&quot;
  print(&quot;Hello&quot;,name)
* If you change the value of a variable, it will store the latest value. For example :
  name=&quot;Simran&quot;
  name=&quot;Amit&quot;
  If you will execute the command ''print(name)'', Amit will be displayed.
* You can perform operations like addition, subtraction etc only on integral variables.

==How to execute couple of instructions on console?==
You can execute couple of instructions on console using ;. Write Statement 1;Statement 2;......and then press ''Enter''.
{{#ev:youtube|https://youtu.be/CYQCYvLE22Y|250|right}}









==How to take input from the user?==
We can take input from the user using ''input'' function. For Example : You want the user to input variable ''x'', then write x=input(&quot;Enter the value of x&quot;) and execute. Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNkVLCxZw_jcgyS-bmrIVSP

And when the input you need is of data type other than string. You can do both the input function and data conversion in a single line.
For example:
Consider the program for letting in the patients
'''c=input(&quot;Enter (1/0)&quot;);d=int(c)'''

Instead of using it in two separate lines, combine it into a single line
'''c=int(input(&quot;Enter (1/0)&quot;))'''.

To get two inputs in same line with a space between them split() is used.

a,b=input(&quot;enter a&quot;).split(&quot;enter b&quot;)
----

==If statement==
If statement is used to execute set of two contrary statements based on a condition. 

===Syntax===
If (Condition):
    Statement 1
else:
    Statement 2

If 'Condition' is true then 'Statement 1' will be executed otherwise 'Statement 2' will be executed.

Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNhHmg3SkK1uiutigcAbH9K

==Loops==
[[#Top]]&lt;br&gt;
Loops in a programming languages are used to execute set of repetitive statements. For loop and while loop are used extensively to execute a set of looping instructions.

=== For loop Syntax ===
&lt;pre&gt;
for i in range(10): 
    Statement
&lt;/pre&gt;
range(10) indicate that values 0 to 9 will be assigned to the variable i and for each value of i the Statement will be executed, e.g.
&lt;pre&gt;
for i in range(10): 
    print(i)
&lt;/pre&gt;
Output will be
&lt;pre&gt;
0
1
2
3
4
5
6
7
8
9
&lt;/pre&gt;

=== While loop Syntax ===
&lt;pre&gt;
intialisation

while(condition):
   Statement
   increment/decrement
&lt;/pre&gt;
e.g.
&lt;pre&gt;
#initialization
i=0
while(i&lt;10): 
    print(i)
    i=i+1
&lt;/pre&gt;
Output will be:
&lt;pre&gt;
0
1
2
3
4
5
6
7
8
9
&lt;/pre&gt;
Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNbl5jkVrrw1E5XSvm3GiCI

==Importance of Indentation in Python==
Indentation is used to indicate to what block of statements belong. Indentation of blocks convey program structure in Python. Indentation in Python is used to refer a group/block of code/statements. In C++ we use { and } (curly brackets) to group a set of statements. But in Python, there are no such brackets used. Instead of such brackets used in other programming languages, we use indentation in Python.
Use tabs,instead of spaces for ease of writing code.

Wrong indentation can lead to syntax error, or makes your output wrong according to your logic, or other errors.  e.g.

&lt;pre&gt;
#IndentationError: expected an indented block
i=-1
if i&lt;0:
print(&quot;Test successful&quot;)#Wrong indentation 
else:    
    print(&quot;Test failed&quot;)
&lt;/pre&gt;
&lt;pre&gt;
Output: IndentationError: expected an indented block
&lt;/pre&gt;
&lt;pre&gt;
#Properly Indented code:
i=-1
if i&lt;0:
    print(&quot;Test successful&quot;)#Wrong indentation
else:    
    print(&quot;Test failed&quot;)
#Output:Test successful
&lt;/pre&gt;
{{#ev:youtube|https://youtu.be/pmavoW419Yc|250|right}}









----

==Spyder IDE Black Screen Solution==

----

 This issue is because of ''Help'' screen which is by default open. 
 We need to close it. So here's how you do it-


===Method 1:===

Step 1-    Try by closing current pane for that,  &quot;''press ctrl+shift+F4''&quot;  wait for few seconds things will appear on screen.

Step 2-    If it so than on menu bar go to ''view &gt; panes &gt; help'' unchecked &quot;''Help''&quot; option.

Step 3-    Make sure that &quot;''Help''&quot; under ''view &gt; panes'' is permanently unchecked. And ''Editor, Ipython console, Variable explorer''  are checked. 


===Method 2:===

Step 1-    Open spyder.

Step 2-   On that black screen randomly ''Left click'' on spyder &quot;''Menu bar''&quot; area you will get menu drop downs, You have to find Drop down with &quot;''Panes''&quot; option.

Step 3-   On &quot;''Panes''&quot; drop down unchecked the &quot;''Help''&quot;.

Step 4-   Wait for few seconds Spyder view will appear.

Step 5 -  Make sure that ''&quot;Help&quot;'' under view&gt;panes is permanently unchecked. And ''Editor, Ipython console, variable explorer'' are checked.
[[#Top]]</text>
      <sha1>9njb1filt0b57wvhoowg1renq42qacg</sha1>
    </revision>
    <revision>
      <id>2148</id>
      <parentid>2147</parentid>
      <timestamp>2018-09-14T01:08:42Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* Importance of Indentation in Python */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="10270">==Introduction to Python==
Python is a widely used programming language which allows programmers to write the program in fewer lines of code. It was designed by Guido van Rossum in 1991. Python uses an interpreter instead of compiler.Basically, the main difference between compiler and interpreter is that the compiler takes the code as 'whole' and compiles it..for example in C language and on the other side in interpreter..example: languages like Python...it interprets the written code 'line by line', and if somewhere error is found...it stops interpreting the code from there itself. Here, in our course we will be using Spyder IDE. Spyder is an integrated development environment with editing options to assist the programmers in writing programs. Spyder IDE is divided into two panes, one is console and other one is where program is written.




Python works on different platforms (Windows, Mac, Linux, Raspberry Pi, etc).
Python has a simple syntax similar to the English language.
Python has syntax that allows developers to write programs with fewer lines than some other programming languages.
Python runs on an interpreter system, meaning that code can be executed as soon as it is written. This means that prototyping can be very quick.
Python can be treated in a procedural way, an object-orientated way or a functional way.

==Installing Anaconda==
[[#Top]]
This article is all about installing and troubleshooting Anaconda and Spyder on different platforms.

===Windows===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#windows Download Link]. Make sure that you download the version compatible to your operating system architecture. If you have a 64 bit OS then you can download either 64 bit of 32 bit, but if you have 32 bit OS then you should download the 32 bit version only.

Step 2 -&gt; Double click on the .exe file that you downloaded just now and follow the instructions. If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open cmd (go to Start -&gt; then type cmd in the search bar and hit enter). There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

===Mac===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#macos Download Link].

Step 2 -&gt; Double click on the .pkg file that you just downloaded. If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

===Linux===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#linux Download Link].

Step 2 -&gt; Go to the folder where you downloaded the .sh file and type following command 

  '''bash Anaconda-latest-Linux-x86_64.sh'''

If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.


==Troubleshooting Spyder==
[[#Top]]
In most of the cases, it happens that Spyder is already running and you have initiated one more instance of it. Please make sure that spyder is not running already.
If you are on Linux OS, please launch spyder through terminal. Just open the terminal and type '''spyder''' and it will launch. When Spyder opens, make sure you see Anaconda with the version written on the Ipython console. If not, try changing the path of your anaconda. Follow these steps according to your OS version.

====Windows====
[https://stackoverflow.com/questions/44597662/conda-command-is-not-recognized-on-windows-10 Click Here]

====Linux====
[https://stackoverflow.com/questions/18675907/how-to-run-conda Click Here]

====Mac====
[https://stackoverflow.com/questions/35246386/conda-command-not-found Click Here]

In most of the cases relaunching Spyder works.
A more general Troubleshoot is present [https://github.com/spyder-ide/spyder/wiki/Troubleshooting-Guide-and-FAQ Here]

==How to run a program in Spyder IDE?==
Go to Run on the menu bar. Click Run-&gt;Run.

==Print statements==
Print statements help to display output on console. 
{{#ev:youtube|https://youtu.be/gECkqaOwyt0|250|right}}

===Syntax===
print()

===How to print a message?===
In order to print a message in Python, write print(&quot;message&quot;).
Single, double, triple quote can be used print()

'''Example:'''

'''Single Quote'''
print('Hello')  
Output: Hello

'''Double Quote'''
print(&quot;Hello&quot;)  
Output: Hello

'''Quote within quote'''
print('Is &quot;Ram&quot; a good boy?')  
Output: Is &quot;Ram&quot; a good boy?

==Escape sequences with strings==

We can use escape sequence within strings to make output more presentable.

'''\n'''  : It will move to next line.

'''\t'''  : It will add tab space(5space)

'''\a'''  : It will play system sound once.

'''Example:'''

Print(&quot;Hi, \n How are you?&quot;)

Output: 

Hi,

How are you?

Print(&quot;Hi, \t How are you?&quot;)

Output: 

Hi, &lt;5 spaces&gt; How are you?

[[File:Escape_Sequence.jpg]]

==Variables==
[[#Top]]
Variables are used to store some values. Values can be strings, integers or decimal values. 
{{#ev:youtube|https://youtu.be/60iAXH1sm-Y|250|right}}
===How to print a variable?===
In order to print the value of a variable in python, first initialise the variable and then write print(variable_name)
For example :
  x=2
  print(x)

===Some facts about Variables===
* If you want to print variable name with a message, you can use , operator. For example : I want to print Hello Simran and Simran has been stored in a variable called ''name''.
  name=&quot;Simran&quot;
  print(&quot;Hello&quot;,name)
* If you change the value of a variable, it will store the latest value. For example :
  name=&quot;Simran&quot;
  name=&quot;Amit&quot;
  If you will execute the command ''print(name)'', Amit will be displayed.
* You can perform operations like addition, subtraction etc only on integral variables.

==How to execute couple of instructions on console?==
You can execute couple of instructions on console using ;. Write Statement 1;Statement 2;......and then press ''Enter''.
{{#ev:youtube|https://youtu.be/CYQCYvLE22Y|250|right}}









==How to take input from the user?==
We can take input from the user using ''input'' function. For Example : You want the user to input variable ''x'', then write x=input(&quot;Enter the value of x&quot;) and execute. Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNkVLCxZw_jcgyS-bmrIVSP

And when the input you need is of data type other than string. You can do both the input function and data conversion in a single line.
For example:
Consider the program for letting in the patients
'''c=input(&quot;Enter (1/0)&quot;);d=int(c)'''

Instead of using it in two separate lines, combine it into a single line
'''c=int(input(&quot;Enter (1/0)&quot;))'''.

To get two inputs in same line with a space between them split() is used.

a,b=input(&quot;enter a&quot;).split(&quot;enter b&quot;)
----

==If statement==
If statement is used to execute set of two contrary statements based on a condition. 

===Syntax===
If (Condition):
    Statement 1
else:
    Statement 2

If 'Condition' is true then 'Statement 1' will be executed otherwise 'Statement 2' will be executed.

Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNhHmg3SkK1uiutigcAbH9K

==Loops==
[[#Top]]&lt;br&gt;
Loops in a programming languages are used to execute set of repetitive statements. For loop and while loop are used extensively to execute a set of looping instructions.

=== For loop Syntax ===
&lt;pre&gt;
for i in range(10): 
    Statement
&lt;/pre&gt;
range(10) indicate that values 0 to 9 will be assigned to the variable i and for each value of i the Statement will be executed, e.g.
&lt;pre&gt;
for i in range(10): 
    print(i)
&lt;/pre&gt;
Output will be
&lt;pre&gt;
0
1
2
3
4
5
6
7
8
9
&lt;/pre&gt;

=== While loop Syntax ===
&lt;pre&gt;
intialisation

while(condition):
   Statement
   increment/decrement
&lt;/pre&gt;
e.g.
&lt;pre&gt;
#initialization
i=0
while(i&lt;10): 
    print(i)
    i=i+1
&lt;/pre&gt;
Output will be:
&lt;pre&gt;
0
1
2
3
4
5
6
7
8
9
&lt;/pre&gt;
Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNbl5jkVrrw1E5XSvm3GiCI

==Importance of Indentation in Python==
Indentation is used to indicate to what block of statements belong. Indentation of blocks convey program structure in Python. Indentation in Python is used to refer a group/block of code/statements. In C++ we use { and } (curly brackets) to group a set of statements. But in Python, there are no such brackets used. Instead of such brackets used in other programming languages, we use indentation in Python.
Use tabs,instead of spaces for ease of writing code.

Wrong indentation can lead to syntax error, or makes your output wrong for your logic e.g.

&lt;pre&gt;
#IndentationError: expected an indented block
i=-1
if i&lt;0:
print(&quot;Test successful&quot;)#Wrong indentation 
else:    
    print(&quot;Test failed&quot;)
&lt;/pre&gt;
&lt;pre&gt;
Output: IndentationError: expected an indented block
&lt;/pre&gt;
&lt;pre&gt;
#Properly Indented code:
i=-1
if i&lt;0:
    print(&quot;Test successful&quot;)#Wrong indentation
else:    
    print(&quot;Test failed&quot;)
#Output:Test successful
&lt;/pre&gt;
{{#ev:youtube|https://youtu.be/pmavoW419Yc|250|right}}









----

==Spyder IDE Black Screen Solution==

----

 This issue is because of ''Help'' screen which is by default open. 
 We need to close it. So here's how you do it-


===Method 1:===

Step 1-    Try by closing current pane for that,  &quot;''press ctrl+shift+F4''&quot;  wait for few seconds things will appear on screen.

Step 2-    If it so than on menu bar go to ''view &gt; panes &gt; help'' unchecked &quot;''Help''&quot; option.

Step 3-    Make sure that &quot;''Help''&quot; under ''view &gt; panes'' is permanently unchecked. And ''Editor, Ipython console, Variable explorer''  are checked. 


===Method 2:===

Step 1-    Open spyder.

Step 2-   On that black screen randomly ''Left click'' on spyder &quot;''Menu bar''&quot; area you will get menu drop downs, You have to find Drop down with &quot;''Panes''&quot; option.

Step 3-   On &quot;''Panes''&quot; drop down unchecked the &quot;''Help''&quot;.

Step 4-   Wait for few seconds Spyder view will appear.

Step 5 -  Make sure that ''&quot;Help&quot;'' under view&gt;panes is permanently unchecked. And ''Editor, Ipython console, variable explorer'' are checked.
[[#Top]]</text>
      <sha1>gupmcv6mcgshrozxup8y534jkbb2fb1</sha1>
    </revision>
    <revision>
      <id>2149</id>
      <parentid>2148</parentid>
      <timestamp>2018-09-14T01:09:29Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* Importance of Indentation in Python */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="10269">==Introduction to Python==
Python is a widely used programming language which allows programmers to write the program in fewer lines of code. It was designed by Guido van Rossum in 1991. Python uses an interpreter instead of compiler.Basically, the main difference between compiler and interpreter is that the compiler takes the code as 'whole' and compiles it..for example in C language and on the other side in interpreter..example: languages like Python...it interprets the written code 'line by line', and if somewhere error is found...it stops interpreting the code from there itself. Here, in our course we will be using Spyder IDE. Spyder is an integrated development environment with editing options to assist the programmers in writing programs. Spyder IDE is divided into two panes, one is console and other one is where program is written.




Python works on different platforms (Windows, Mac, Linux, Raspberry Pi, etc).
Python has a simple syntax similar to the English language.
Python has syntax that allows developers to write programs with fewer lines than some other programming languages.
Python runs on an interpreter system, meaning that code can be executed as soon as it is written. This means that prototyping can be very quick.
Python can be treated in a procedural way, an object-orientated way or a functional way.

==Installing Anaconda==
[[#Top]]
This article is all about installing and troubleshooting Anaconda and Spyder on different platforms.

===Windows===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#windows Download Link]. Make sure that you download the version compatible to your operating system architecture. If you have a 64 bit OS then you can download either 64 bit of 32 bit, but if you have 32 bit OS then you should download the 32 bit version only.

Step 2 -&gt; Double click on the .exe file that you downloaded just now and follow the instructions. If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open cmd (go to Start -&gt; then type cmd in the search bar and hit enter). There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

===Mac===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#macos Download Link].

Step 2 -&gt; Double click on the .pkg file that you just downloaded. If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

===Linux===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#linux Download Link].

Step 2 -&gt; Go to the folder where you downloaded the .sh file and type following command 

  '''bash Anaconda-latest-Linux-x86_64.sh'''

If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.


==Troubleshooting Spyder==
[[#Top]]
In most of the cases, it happens that Spyder is already running and you have initiated one more instance of it. Please make sure that spyder is not running already.
If you are on Linux OS, please launch spyder through terminal. Just open the terminal and type '''spyder''' and it will launch. When Spyder opens, make sure you see Anaconda with the version written on the Ipython console. If not, try changing the path of your anaconda. Follow these steps according to your OS version.

====Windows====
[https://stackoverflow.com/questions/44597662/conda-command-is-not-recognized-on-windows-10 Click Here]

====Linux====
[https://stackoverflow.com/questions/18675907/how-to-run-conda Click Here]

====Mac====
[https://stackoverflow.com/questions/35246386/conda-command-not-found Click Here]

In most of the cases relaunching Spyder works.
A more general Troubleshoot is present [https://github.com/spyder-ide/spyder/wiki/Troubleshooting-Guide-and-FAQ Here]

==How to run a program in Spyder IDE?==
Go to Run on the menu bar. Click Run-&gt;Run.

==Print statements==
Print statements help to display output on console. 
{{#ev:youtube|https://youtu.be/gECkqaOwyt0|250|right}}

===Syntax===
print()

===How to print a message?===
In order to print a message in Python, write print(&quot;message&quot;).
Single, double, triple quote can be used print()

'''Example:'''

'''Single Quote'''
print('Hello')  
Output: Hello

'''Double Quote'''
print(&quot;Hello&quot;)  
Output: Hello

'''Quote within quote'''
print('Is &quot;Ram&quot; a good boy?')  
Output: Is &quot;Ram&quot; a good boy?

==Escape sequences with strings==

We can use escape sequence within strings to make output more presentable.

'''\n'''  : It will move to next line.

'''\t'''  : It will add tab space(5space)

'''\a'''  : It will play system sound once.

'''Example:'''

Print(&quot;Hi, \n How are you?&quot;)

Output: 

Hi,

How are you?

Print(&quot;Hi, \t How are you?&quot;)

Output: 

Hi, &lt;5 spaces&gt; How are you?

[[File:Escape_Sequence.jpg]]

==Variables==
[[#Top]]
Variables are used to store some values. Values can be strings, integers or decimal values. 
{{#ev:youtube|https://youtu.be/60iAXH1sm-Y|250|right}}
===How to print a variable?===
In order to print the value of a variable in python, first initialise the variable and then write print(variable_name)
For example :
  x=2
  print(x)

===Some facts about Variables===
* If you want to print variable name with a message, you can use , operator. For example : I want to print Hello Simran and Simran has been stored in a variable called ''name''.
  name=&quot;Simran&quot;
  print(&quot;Hello&quot;,name)
* If you change the value of a variable, it will store the latest value. For example :
  name=&quot;Simran&quot;
  name=&quot;Amit&quot;
  If you will execute the command ''print(name)'', Amit will be displayed.
* You can perform operations like addition, subtraction etc only on integral variables.

==How to execute couple of instructions on console?==
You can execute couple of instructions on console using ;. Write Statement 1;Statement 2;......and then press ''Enter''.
{{#ev:youtube|https://youtu.be/CYQCYvLE22Y|250|right}}









==How to take input from the user?==
We can take input from the user using ''input'' function. For Example : You want the user to input variable ''x'', then write x=input(&quot;Enter the value of x&quot;) and execute. Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNkVLCxZw_jcgyS-bmrIVSP

And when the input you need is of data type other than string. You can do both the input function and data conversion in a single line.
For example:
Consider the program for letting in the patients
'''c=input(&quot;Enter (1/0)&quot;);d=int(c)'''

Instead of using it in two separate lines, combine it into a single line
'''c=int(input(&quot;Enter (1/0)&quot;))'''.

To get two inputs in same line with a space between them split() is used.

a,b=input(&quot;enter a&quot;).split(&quot;enter b&quot;)
----

==If statement==
If statement is used to execute set of two contrary statements based on a condition. 

===Syntax===
If (Condition):
    Statement 1
else:
    Statement 2

If 'Condition' is true then 'Statement 1' will be executed otherwise 'Statement 2' will be executed.

Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNhHmg3SkK1uiutigcAbH9K

==Loops==
[[#Top]]&lt;br&gt;
Loops in a programming languages are used to execute set of repetitive statements. For loop and while loop are used extensively to execute a set of looping instructions.

=== For loop Syntax ===
&lt;pre&gt;
for i in range(10): 
    Statement
&lt;/pre&gt;
range(10) indicate that values 0 to 9 will be assigned to the variable i and for each value of i the Statement will be executed, e.g.
&lt;pre&gt;
for i in range(10): 
    print(i)
&lt;/pre&gt;
Output will be
&lt;pre&gt;
0
1
2
3
4
5
6
7
8
9
&lt;/pre&gt;

=== While loop Syntax ===
&lt;pre&gt;
intialisation

while(condition):
   Statement
   increment/decrement
&lt;/pre&gt;
e.g.
&lt;pre&gt;
#initialization
i=0
while(i&lt;10): 
    print(i)
    i=i+1
&lt;/pre&gt;
Output will be:
&lt;pre&gt;
0
1
2
3
4
5
6
7
8
9
&lt;/pre&gt;
Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNbl5jkVrrw1E5XSvm3GiCI

==Importance of Indentation in Python==
Indentation is used to indicate to what block of statements belong. Indentation of blocks convey program structure in Python. Indentation in Python is used to refer a group/block of code/statements. In C++ we use { and } (curly brackets) to group a set of statements. But in Python, there are no such brackets used. Instead of such brackets used in other programming languages, we use indentation in Python.
Use tabs,instead of spaces for ease of writing code.

Wrong indentation can lead to syntax error, or makes your output wrong for your logic e.g.
---
&lt;pre&gt;
#IndentationError: expected an indented block
i=-1
if i&lt;0:
print(&quot;Test successful&quot;)#Wrong indentation 
else:    
    print(&quot;Test failed&quot;)
#Output: IndentationError: expected an indented block
&lt;/pre&gt;
---
&lt;pre&gt;
#Properly Indented code:
i=-1
if i&lt;0:
    print(&quot;Test successful&quot;)#Wrong indentation
else:    
    print(&quot;Test failed&quot;)
#Output:Test successful
&lt;/pre&gt;
---
{{#ev:youtube|https://youtu.be/pmavoW419Yc|250|right}}









----

==Spyder IDE Black Screen Solution==

----

 This issue is because of ''Help'' screen which is by default open. 
 We need to close it. So here's how you do it-


===Method 1:===

Step 1-    Try by closing current pane for that,  &quot;''press ctrl+shift+F4''&quot;  wait for few seconds things will appear on screen.

Step 2-    If it so than on menu bar go to ''view &gt; panes &gt; help'' unchecked &quot;''Help''&quot; option.

Step 3-    Make sure that &quot;''Help''&quot; under ''view &gt; panes'' is permanently unchecked. And ''Editor, Ipython console, Variable explorer''  are checked. 


===Method 2:===

Step 1-    Open spyder.

Step 2-   On that black screen randomly ''Left click'' on spyder &quot;''Menu bar''&quot; area you will get menu drop downs, You have to find Drop down with &quot;''Panes''&quot; option.

Step 3-   On &quot;''Panes''&quot; drop down unchecked the &quot;''Help''&quot;.

Step 4-   Wait for few seconds Spyder view will appear.

Step 5 -  Make sure that ''&quot;Help&quot;'' under view&gt;panes is permanently unchecked. And ''Editor, Ipython console, variable explorer'' are checked.
[[#Top]]</text>
      <sha1>ddzmovqbr54cgdc3scog1576sena4tv</sha1>
    </revision>
    <revision>
      <id>2150</id>
      <parentid>2149</parentid>
      <timestamp>2018-09-14T01:16:22Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* Importance of Indentation in Python */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="10622">==Introduction to Python==
Python is a widely used programming language which allows programmers to write the program in fewer lines of code. It was designed by Guido van Rossum in 1991. Python uses an interpreter instead of compiler.Basically, the main difference between compiler and interpreter is that the compiler takes the code as 'whole' and compiles it..for example in C language and on the other side in interpreter..example: languages like Python...it interprets the written code 'line by line', and if somewhere error is found...it stops interpreting the code from there itself. Here, in our course we will be using Spyder IDE. Spyder is an integrated development environment with editing options to assist the programmers in writing programs. Spyder IDE is divided into two panes, one is console and other one is where program is written.




Python works on different platforms (Windows, Mac, Linux, Raspberry Pi, etc).
Python has a simple syntax similar to the English language.
Python has syntax that allows developers to write programs with fewer lines than some other programming languages.
Python runs on an interpreter system, meaning that code can be executed as soon as it is written. This means that prototyping can be very quick.
Python can be treated in a procedural way, an object-orientated way or a functional way.

==Installing Anaconda==
[[#Top]]
This article is all about installing and troubleshooting Anaconda and Spyder on different platforms.

===Windows===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#windows Download Link]. Make sure that you download the version compatible to your operating system architecture. If you have a 64 bit OS then you can download either 64 bit of 32 bit, but if you have 32 bit OS then you should download the 32 bit version only.

Step 2 -&gt; Double click on the .exe file that you downloaded just now and follow the instructions. If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open cmd (go to Start -&gt; then type cmd in the search bar and hit enter). There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

===Mac===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#macos Download Link].

Step 2 -&gt; Double click on the .pkg file that you just downloaded. If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

===Linux===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#linux Download Link].

Step 2 -&gt; Go to the folder where you downloaded the .sh file and type following command 

  '''bash Anaconda-latest-Linux-x86_64.sh'''

If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.


==Troubleshooting Spyder==
[[#Top]]
In most of the cases, it happens that Spyder is already running and you have initiated one more instance of it. Please make sure that spyder is not running already.
If you are on Linux OS, please launch spyder through terminal. Just open the terminal and type '''spyder''' and it will launch. When Spyder opens, make sure you see Anaconda with the version written on the Ipython console. If not, try changing the path of your anaconda. Follow these steps according to your OS version.

====Windows====
[https://stackoverflow.com/questions/44597662/conda-command-is-not-recognized-on-windows-10 Click Here]

====Linux====
[https://stackoverflow.com/questions/18675907/how-to-run-conda Click Here]

====Mac====
[https://stackoverflow.com/questions/35246386/conda-command-not-found Click Here]

In most of the cases relaunching Spyder works.
A more general Troubleshoot is present [https://github.com/spyder-ide/spyder/wiki/Troubleshooting-Guide-and-FAQ Here]

==How to run a program in Spyder IDE?==
Go to Run on the menu bar. Click Run-&gt;Run.

==Print statements==
Print statements help to display output on console. 
{{#ev:youtube|https://youtu.be/gECkqaOwyt0|250|right}}

===Syntax===
print()

===How to print a message?===
In order to print a message in Python, write print(&quot;message&quot;).
Single, double, triple quote can be used print()

'''Example:'''

'''Single Quote'''
print('Hello')  
Output: Hello

'''Double Quote'''
print(&quot;Hello&quot;)  
Output: Hello

'''Quote within quote'''
print('Is &quot;Ram&quot; a good boy?')  
Output: Is &quot;Ram&quot; a good boy?

==Escape sequences with strings==

We can use escape sequence within strings to make output more presentable.

'''\n'''  : It will move to next line.

'''\t'''  : It will add tab space(5space)

'''\a'''  : It will play system sound once.

'''Example:'''

Print(&quot;Hi, \n How are you?&quot;)

Output: 

Hi,

How are you?

Print(&quot;Hi, \t How are you?&quot;)

Output: 

Hi, &lt;5 spaces&gt; How are you?

[[File:Escape_Sequence.jpg]]

==Variables==
[[#Top]]
Variables are used to store some values. Values can be strings, integers or decimal values. 
{{#ev:youtube|https://youtu.be/60iAXH1sm-Y|250|right}}
===How to print a variable?===
In order to print the value of a variable in python, first initialise the variable and then write print(variable_name)
For example :
  x=2
  print(x)

===Some facts about Variables===
* If you want to print variable name with a message, you can use , operator. For example : I want to print Hello Simran and Simran has been stored in a variable called ''name''.
  name=&quot;Simran&quot;
  print(&quot;Hello&quot;,name)
* If you change the value of a variable, it will store the latest value. For example :
  name=&quot;Simran&quot;
  name=&quot;Amit&quot;
  If you will execute the command ''print(name)'', Amit will be displayed.
* You can perform operations like addition, subtraction etc only on integral variables.

==How to execute couple of instructions on console?==
You can execute couple of instructions on console using ;. Write Statement 1;Statement 2;......and then press ''Enter''.
{{#ev:youtube|https://youtu.be/CYQCYvLE22Y|250|right}}









==How to take input from the user?==
We can take input from the user using ''input'' function. For Example : You want the user to input variable ''x'', then write x=input(&quot;Enter the value of x&quot;) and execute. Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNkVLCxZw_jcgyS-bmrIVSP

And when the input you need is of data type other than string. You can do both the input function and data conversion in a single line.
For example:
Consider the program for letting in the patients
'''c=input(&quot;Enter (1/0)&quot;);d=int(c)'''

Instead of using it in two separate lines, combine it into a single line
'''c=int(input(&quot;Enter (1/0)&quot;))'''.

To get two inputs in same line with a space between them split() is used.

a,b=input(&quot;enter a&quot;).split(&quot;enter b&quot;)
----

==If statement==
If statement is used to execute set of two contrary statements based on a condition. 

===Syntax===
If (Condition):
    Statement 1
else:
    Statement 2

If 'Condition' is true then 'Statement 1' will be executed otherwise 'Statement 2' will be executed.

Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNhHmg3SkK1uiutigcAbH9K

==Loops==
[[#Top]]&lt;br&gt;
Loops in a programming languages are used to execute set of repetitive statements. For loop and while loop are used extensively to execute a set of looping instructions.

=== For loop Syntax ===
&lt;pre&gt;
for i in range(10): 
    Statement
&lt;/pre&gt;
range(10) indicate that values 0 to 9 will be assigned to the variable i and for each value of i the Statement will be executed, e.g.
&lt;pre&gt;
for i in range(10): 
    print(i)
&lt;/pre&gt;
Output will be
&lt;pre&gt;
0
1
2
3
4
5
6
7
8
9
&lt;/pre&gt;

=== While loop Syntax ===
&lt;pre&gt;
intialisation

while(condition):
   Statement
   increment/decrement
&lt;/pre&gt;
e.g.
&lt;pre&gt;
#initialization
i=0
while(i&lt;10): 
    print(i)
    i=i+1
&lt;/pre&gt;
Output will be:
&lt;pre&gt;
0
1
2
3
4
5
6
7
8
9
&lt;/pre&gt;
Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNbl5jkVrrw1E5XSvm3GiCI

==Importance of Indentation in Python==
Indentation is used to indicate to what block of statements belong. Indentation of blocks convey program structure in Python. Indentation in Python is used to refer a group/block of code/statements. In C++ we use { and } (curly brackets) to group a set of statements. But in Python, there are no such brackets used. Instead of such brackets used in other programming languages, we use indentation in Python.
Use tabs,instead of spaces for ease of writing code.

Wrong indentation can lead to syntax error, or makes your output wrong for your logic e.g.
---
&lt;pre&gt;
#IndentationError: expected an indented block
i=-1
if i&lt;0:
print(&quot;Test successful&quot;)#Wrong indentation 
else:    
    print(&quot;Test failed&quot;)
#Output: IndentationError: expected an indented block
&lt;/pre&gt;
---
&lt;pre&gt;
#Properly Indented code:
i=-1
if i&lt;0:
    print(&quot;Test successful&quot;)#Wrong indentation
else:    
    print(&quot;Test failed&quot;)
#Output:Test successful
&lt;/pre&gt;
---
#Logic changed, so output changed, with improper indentation, e.g.
''''Code1''''
&lt;pre&gt;
sum=0
for i in range(5):
    for j in range(5):
        sum+=i
print(sum, end=&quot; &quot;)
#Output: 50
&lt;/pre&gt;
        
''''Code2''''       
for i in range(5):
    for j in range(5):
        print(end=&quot; &quot;)
    sum+=i
print(sum, end=&quot; &quot;)
#Output:                          10

{{#ev:youtube|https://youtu.be/pmavoW419Yc|250|right}}









----

==Spyder IDE Black Screen Solution==

----

 This issue is because of ''Help'' screen which is by default open. 
 We need to close it. So here's how you do it-


===Method 1:===

Step 1-    Try by closing current pane for that,  &quot;''press ctrl+shift+F4''&quot;  wait for few seconds things will appear on screen.

Step 2-    If it so than on menu bar go to ''view &gt; panes &gt; help'' unchecked &quot;''Help''&quot; option.

Step 3-    Make sure that &quot;''Help''&quot; under ''view &gt; panes'' is permanently unchecked. And ''Editor, Ipython console, Variable explorer''  are checked. 


===Method 2:===

Step 1-    Open spyder.

Step 2-   On that black screen randomly ''Left click'' on spyder &quot;''Menu bar''&quot; area you will get menu drop downs, You have to find Drop down with &quot;''Panes''&quot; option.

Step 3-   On &quot;''Panes''&quot; drop down unchecked the &quot;''Help''&quot;.

Step 4-   Wait for few seconds Spyder view will appear.

Step 5 -  Make sure that ''&quot;Help&quot;'' under view&gt;panes is permanently unchecked. And ''Editor, Ipython console, variable explorer'' are checked.
[[#Top]]</text>
      <sha1>8a5ts8qcwdcdlj6m00z1ahg2p3cn4gj</sha1>
    </revision>
    <revision>
      <id>2151</id>
      <parentid>2150</parentid>
      <timestamp>2018-09-14T01:16:59Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* Importance of Indentation in Python */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="10609">==Introduction to Python==
Python is a widely used programming language which allows programmers to write the program in fewer lines of code. It was designed by Guido van Rossum in 1991. Python uses an interpreter instead of compiler.Basically, the main difference between compiler and interpreter is that the compiler takes the code as 'whole' and compiles it..for example in C language and on the other side in interpreter..example: languages like Python...it interprets the written code 'line by line', and if somewhere error is found...it stops interpreting the code from there itself. Here, in our course we will be using Spyder IDE. Spyder is an integrated development environment with editing options to assist the programmers in writing programs. Spyder IDE is divided into two panes, one is console and other one is where program is written.




Python works on different platforms (Windows, Mac, Linux, Raspberry Pi, etc).
Python has a simple syntax similar to the English language.
Python has syntax that allows developers to write programs with fewer lines than some other programming languages.
Python runs on an interpreter system, meaning that code can be executed as soon as it is written. This means that prototyping can be very quick.
Python can be treated in a procedural way, an object-orientated way or a functional way.

==Installing Anaconda==
[[#Top]]
This article is all about installing and troubleshooting Anaconda and Spyder on different platforms.

===Windows===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#windows Download Link]. Make sure that you download the version compatible to your operating system architecture. If you have a 64 bit OS then you can download either 64 bit of 32 bit, but if you have 32 bit OS then you should download the 32 bit version only.

Step 2 -&gt; Double click on the .exe file that you downloaded just now and follow the instructions. If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open cmd (go to Start -&gt; then type cmd in the search bar and hit enter). There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

===Mac===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#macos Download Link].

Step 2 -&gt; Double click on the .pkg file that you just downloaded. If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

===Linux===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#linux Download Link].

Step 2 -&gt; Go to the folder where you downloaded the .sh file and type following command 

  '''bash Anaconda-latest-Linux-x86_64.sh'''

If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.


==Troubleshooting Spyder==
[[#Top]]
In most of the cases, it happens that Spyder is already running and you have initiated one more instance of it. Please make sure that spyder is not running already.
If you are on Linux OS, please launch spyder through terminal. Just open the terminal and type '''spyder''' and it will launch. When Spyder opens, make sure you see Anaconda with the version written on the Ipython console. If not, try changing the path of your anaconda. Follow these steps according to your OS version.

====Windows====
[https://stackoverflow.com/questions/44597662/conda-command-is-not-recognized-on-windows-10 Click Here]

====Linux====
[https://stackoverflow.com/questions/18675907/how-to-run-conda Click Here]

====Mac====
[https://stackoverflow.com/questions/35246386/conda-command-not-found Click Here]

In most of the cases relaunching Spyder works.
A more general Troubleshoot is present [https://github.com/spyder-ide/spyder/wiki/Troubleshooting-Guide-and-FAQ Here]

==How to run a program in Spyder IDE?==
Go to Run on the menu bar. Click Run-&gt;Run.

==Print statements==
Print statements help to display output on console. 
{{#ev:youtube|https://youtu.be/gECkqaOwyt0|250|right}}

===Syntax===
print()

===How to print a message?===
In order to print a message in Python, write print(&quot;message&quot;).
Single, double, triple quote can be used print()

'''Example:'''

'''Single Quote'''
print('Hello')  
Output: Hello

'''Double Quote'''
print(&quot;Hello&quot;)  
Output: Hello

'''Quote within quote'''
print('Is &quot;Ram&quot; a good boy?')  
Output: Is &quot;Ram&quot; a good boy?

==Escape sequences with strings==

We can use escape sequence within strings to make output more presentable.

'''\n'''  : It will move to next line.

'''\t'''  : It will add tab space(5space)

'''\a'''  : It will play system sound once.

'''Example:'''

Print(&quot;Hi, \n How are you?&quot;)

Output: 

Hi,

How are you?

Print(&quot;Hi, \t How are you?&quot;)

Output: 

Hi, &lt;5 spaces&gt; How are you?

[[File:Escape_Sequence.jpg]]

==Variables==
[[#Top]]
Variables are used to store some values. Values can be strings, integers or decimal values. 
{{#ev:youtube|https://youtu.be/60iAXH1sm-Y|250|right}}
===How to print a variable?===
In order to print the value of a variable in python, first initialise the variable and then write print(variable_name)
For example :
  x=2
  print(x)

===Some facts about Variables===
* If you want to print variable name with a message, you can use , operator. For example : I want to print Hello Simran and Simran has been stored in a variable called ''name''.
  name=&quot;Simran&quot;
  print(&quot;Hello&quot;,name)
* If you change the value of a variable, it will store the latest value. For example :
  name=&quot;Simran&quot;
  name=&quot;Amit&quot;
  If you will execute the command ''print(name)'', Amit will be displayed.
* You can perform operations like addition, subtraction etc only on integral variables.

==How to execute couple of instructions on console?==
You can execute couple of instructions on console using ;. Write Statement 1;Statement 2;......and then press ''Enter''.
{{#ev:youtube|https://youtu.be/CYQCYvLE22Y|250|right}}









==How to take input from the user?==
We can take input from the user using ''input'' function. For Example : You want the user to input variable ''x'', then write x=input(&quot;Enter the value of x&quot;) and execute. Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNkVLCxZw_jcgyS-bmrIVSP

And when the input you need is of data type other than string. You can do both the input function and data conversion in a single line.
For example:
Consider the program for letting in the patients
'''c=input(&quot;Enter (1/0)&quot;);d=int(c)'''

Instead of using it in two separate lines, combine it into a single line
'''c=int(input(&quot;Enter (1/0)&quot;))'''.

To get two inputs in same line with a space between them split() is used.

a,b=input(&quot;enter a&quot;).split(&quot;enter b&quot;)
----

==If statement==
If statement is used to execute set of two contrary statements based on a condition. 

===Syntax===
If (Condition):
    Statement 1
else:
    Statement 2

If 'Condition' is true then 'Statement 1' will be executed otherwise 'Statement 2' will be executed.

Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNhHmg3SkK1uiutigcAbH9K

==Loops==
[[#Top]]&lt;br&gt;
Loops in a programming languages are used to execute set of repetitive statements. For loop and while loop are used extensively to execute a set of looping instructions.

=== For loop Syntax ===
&lt;pre&gt;
for i in range(10): 
    Statement
&lt;/pre&gt;
range(10) indicate that values 0 to 9 will be assigned to the variable i and for each value of i the Statement will be executed, e.g.
&lt;pre&gt;
for i in range(10): 
    print(i)
&lt;/pre&gt;
Output will be
&lt;pre&gt;
0
1
2
3
4
5
6
7
8
9
&lt;/pre&gt;

=== While loop Syntax ===
&lt;pre&gt;
intialisation

while(condition):
   Statement
   increment/decrement
&lt;/pre&gt;
e.g.
&lt;pre&gt;
#initialization
i=0
while(i&lt;10): 
    print(i)
    i=i+1
&lt;/pre&gt;
Output will be:
&lt;pre&gt;
0
1
2
3
4
5
6
7
8
9
&lt;/pre&gt;
Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNbl5jkVrrw1E5XSvm3GiCI

==Importance of Indentation in Python==
Indentation is used to indicate to what block of statements belong. Indentation of blocks convey program structure in Python. Indentation in Python is used to refer a group/block of code/statements. In C++ we use { and } (curly brackets) to group a set of statements. But in Python, there are no such brackets used. Instead of such brackets used in other programming languages, we use indentation in Python.
Use tabs,instead of spaces for ease of writing code.

Wrong indentation can lead to syntax error, or makes your output wrong for your logic e.g.
&lt;pre&gt;
#IndentationError: expected an indented block
i=-1
if i&lt;0:
print(&quot;Test successful&quot;)#Wrong indentation 
else:    
    print(&quot;Test failed&quot;)
#Output: IndentationError: expected an indented block
&lt;/pre&gt;
---
&lt;pre&gt;
#Properly Indented code:
i=-1
if i&lt;0:
    print(&quot;Test successful&quot;)#Wrong indentation
else:    
    print(&quot;Test failed&quot;)
#Output:Test successful
&lt;/pre&gt;
---
#Logic changed, so output changed, with improper indentation, e.g.
''''Code1''''
&lt;pre&gt;
sum=0
for i in range(5):
    for j in range(5):
        sum+=i
print(sum, end=&quot; &quot;)
#Output: 50
&lt;/pre&gt;
        
''''Code2''''       
for i in range(5):
    for j in range(5):
        print(end=&quot; &quot;)
    sum+=i
print(sum, end=&quot; &quot;)
#Output:                          10

{{#ev:youtube|https://youtu.be/pmavoW419Yc|250|right}}
----

==Spyder IDE Black Screen Solution==

----

 This issue is because of ''Help'' screen which is by default open. 
 We need to close it. So here's how you do it-


===Method 1:===

Step 1-    Try by closing current pane for that,  &quot;''press ctrl+shift+F4''&quot;  wait for few seconds things will appear on screen.

Step 2-    If it so than on menu bar go to ''view &gt; panes &gt; help'' unchecked &quot;''Help''&quot; option.

Step 3-    Make sure that &quot;''Help''&quot; under ''view &gt; panes'' is permanently unchecked. And ''Editor, Ipython console, Variable explorer''  are checked. 


===Method 2:===

Step 1-    Open spyder.

Step 2-   On that black screen randomly ''Left click'' on spyder &quot;''Menu bar''&quot; area you will get menu drop downs, You have to find Drop down with &quot;''Panes''&quot; option.

Step 3-   On &quot;''Panes''&quot; drop down unchecked the &quot;''Help''&quot;.

Step 4-   Wait for few seconds Spyder view will appear.

Step 5 -  Make sure that ''&quot;Help&quot;'' under view&gt;panes is permanently unchecked. And ''Editor, Ipython console, variable explorer'' are checked.
[[#Top]]</text>
      <sha1>mu6if7gznv93zm8ycj37f0g19n921e6</sha1>
    </revision>
    <revision>
      <id>2152</id>
      <parentid>2151</parentid>
      <timestamp>2018-09-14T01:17:45Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* Importance of Indentation in Python */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="10614">==Introduction to Python==
Python is a widely used programming language which allows programmers to write the program in fewer lines of code. It was designed by Guido van Rossum in 1991. Python uses an interpreter instead of compiler.Basically, the main difference between compiler and interpreter is that the compiler takes the code as 'whole' and compiles it..for example in C language and on the other side in interpreter..example: languages like Python...it interprets the written code 'line by line', and if somewhere error is found...it stops interpreting the code from there itself. Here, in our course we will be using Spyder IDE. Spyder is an integrated development environment with editing options to assist the programmers in writing programs. Spyder IDE is divided into two panes, one is console and other one is where program is written.




Python works on different platforms (Windows, Mac, Linux, Raspberry Pi, etc).
Python has a simple syntax similar to the English language.
Python has syntax that allows developers to write programs with fewer lines than some other programming languages.
Python runs on an interpreter system, meaning that code can be executed as soon as it is written. This means that prototyping can be very quick.
Python can be treated in a procedural way, an object-orientated way or a functional way.

==Installing Anaconda==
[[#Top]]
This article is all about installing and troubleshooting Anaconda and Spyder on different platforms.

===Windows===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#windows Download Link]. Make sure that you download the version compatible to your operating system architecture. If you have a 64 bit OS then you can download either 64 bit of 32 bit, but if you have 32 bit OS then you should download the 32 bit version only.

Step 2 -&gt; Double click on the .exe file that you downloaded just now and follow the instructions. If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open cmd (go to Start -&gt; then type cmd in the search bar and hit enter). There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

===Mac===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#macos Download Link].

Step 2 -&gt; Double click on the .pkg file that you just downloaded. If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

===Linux===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#linux Download Link].

Step 2 -&gt; Go to the folder where you downloaded the .sh file and type following command 

  '''bash Anaconda-latest-Linux-x86_64.sh'''

If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.


==Troubleshooting Spyder==
[[#Top]]
In most of the cases, it happens that Spyder is already running and you have initiated one more instance of it. Please make sure that spyder is not running already.
If you are on Linux OS, please launch spyder through terminal. Just open the terminal and type '''spyder''' and it will launch. When Spyder opens, make sure you see Anaconda with the version written on the Ipython console. If not, try changing the path of your anaconda. Follow these steps according to your OS version.

====Windows====
[https://stackoverflow.com/questions/44597662/conda-command-is-not-recognized-on-windows-10 Click Here]

====Linux====
[https://stackoverflow.com/questions/18675907/how-to-run-conda Click Here]

====Mac====
[https://stackoverflow.com/questions/35246386/conda-command-not-found Click Here]

In most of the cases relaunching Spyder works.
A more general Troubleshoot is present [https://github.com/spyder-ide/spyder/wiki/Troubleshooting-Guide-and-FAQ Here]

==How to run a program in Spyder IDE?==
Go to Run on the menu bar. Click Run-&gt;Run.

==Print statements==
Print statements help to display output on console. 
{{#ev:youtube|https://youtu.be/gECkqaOwyt0|250|right}}

===Syntax===
print()

===How to print a message?===
In order to print a message in Python, write print(&quot;message&quot;).
Single, double, triple quote can be used print()

'''Example:'''

'''Single Quote'''
print('Hello')  
Output: Hello

'''Double Quote'''
print(&quot;Hello&quot;)  
Output: Hello

'''Quote within quote'''
print('Is &quot;Ram&quot; a good boy?')  
Output: Is &quot;Ram&quot; a good boy?

==Escape sequences with strings==

We can use escape sequence within strings to make output more presentable.

'''\n'''  : It will move to next line.

'''\t'''  : It will add tab space(5space)

'''\a'''  : It will play system sound once.

'''Example:'''

Print(&quot;Hi, \n How are you?&quot;)

Output: 

Hi,

How are you?

Print(&quot;Hi, \t How are you?&quot;)

Output: 

Hi, &lt;5 spaces&gt; How are you?

[[File:Escape_Sequence.jpg]]

==Variables==
[[#Top]]
Variables are used to store some values. Values can be strings, integers or decimal values. 
{{#ev:youtube|https://youtu.be/60iAXH1sm-Y|250|right}}
===How to print a variable?===
In order to print the value of a variable in python, first initialise the variable and then write print(variable_name)
For example :
  x=2
  print(x)

===Some facts about Variables===
* If you want to print variable name with a message, you can use , operator. For example : I want to print Hello Simran and Simran has been stored in a variable called ''name''.
  name=&quot;Simran&quot;
  print(&quot;Hello&quot;,name)
* If you change the value of a variable, it will store the latest value. For example :
  name=&quot;Simran&quot;
  name=&quot;Amit&quot;
  If you will execute the command ''print(name)'', Amit will be displayed.
* You can perform operations like addition, subtraction etc only on integral variables.

==How to execute couple of instructions on console?==
You can execute couple of instructions on console using ;. Write Statement 1;Statement 2;......and then press ''Enter''.
{{#ev:youtube|https://youtu.be/CYQCYvLE22Y|250|right}}









==How to take input from the user?==
We can take input from the user using ''input'' function. For Example : You want the user to input variable ''x'', then write x=input(&quot;Enter the value of x&quot;) and execute. Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNkVLCxZw_jcgyS-bmrIVSP

And when the input you need is of data type other than string. You can do both the input function and data conversion in a single line.
For example:
Consider the program for letting in the patients
'''c=input(&quot;Enter (1/0)&quot;);d=int(c)'''

Instead of using it in two separate lines, combine it into a single line
'''c=int(input(&quot;Enter (1/0)&quot;))'''.

To get two inputs in same line with a space between them split() is used.

a,b=input(&quot;enter a&quot;).split(&quot;enter b&quot;)
----

==If statement==
If statement is used to execute set of two contrary statements based on a condition. 

===Syntax===
If (Condition):
    Statement 1
else:
    Statement 2

If 'Condition' is true then 'Statement 1' will be executed otherwise 'Statement 2' will be executed.

Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNhHmg3SkK1uiutigcAbH9K

==Loops==
[[#Top]]&lt;br&gt;
Loops in a programming languages are used to execute set of repetitive statements. For loop and while loop are used extensively to execute a set of looping instructions.

=== For loop Syntax ===
&lt;pre&gt;
for i in range(10): 
    Statement
&lt;/pre&gt;
range(10) indicate that values 0 to 9 will be assigned to the variable i and for each value of i the Statement will be executed, e.g.
&lt;pre&gt;
for i in range(10): 
    print(i)
&lt;/pre&gt;
Output will be
&lt;pre&gt;
0
1
2
3
4
5
6
7
8
9
&lt;/pre&gt;

=== While loop Syntax ===
&lt;pre&gt;
intialisation

while(condition):
   Statement
   increment/decrement
&lt;/pre&gt;
e.g.
&lt;pre&gt;
#initialization
i=0
while(i&lt;10): 
    print(i)
    i=i+1
&lt;/pre&gt;
Output will be:
&lt;pre&gt;
0
1
2
3
4
5
6
7
8
9
&lt;/pre&gt;
Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNbl5jkVrrw1E5XSvm3GiCI

==Importance of Indentation in Python==
Indentation is used to indicate to what block of statements belong. Indentation of blocks convey program structure in Python. Indentation in Python is used to refer a group/block of code/statements. In C++ we use { and } (curly brackets) to group a set of statements. But in Python, there are no such brackets used. Instead of such brackets used in other programming languages, we use indentation in Python.
Use tabs,instead of spaces for ease of writing code.

Wrong indentation can lead to syntax error, or makes your output wrong for your logic e.g.
&lt;pre&gt;
#IndentationError: expected an indented block
i=-1
if i&lt;0:
print(&quot;Test successful&quot;)#Wrong indentation 
else:    
    print(&quot;Test failed&quot;)
#Output: IndentationError: expected an indented block
&lt;/pre&gt;
---
&lt;pre&gt;
#Properly Indented code:
i=-1
if i&lt;0:
    print(&quot;Test successful&quot;)#Wrong indentation
else:    
    print(&quot;Test failed&quot;)
#Output:Test successful
&lt;/pre&gt;
---
Logic changed, so output changed, with improper indentation, e.g.
---
'''Code : 1'''
&lt;pre&gt;
sum=0
for i in range(5):
    for j in range(5):
        sum+=i
print(sum, end=&quot; &quot;)
#Output: 50
&lt;/pre&gt;
        
'''Code : 2'''       
for i in range(5):
    for j in range(5):
        print(end=&quot; &quot;)
    sum+=i
print(sum, end=&quot; &quot;)
#Output:                          10

{{#ev:youtube|https://youtu.be/pmavoW419Yc|250|right}}
----

==Spyder IDE Black Screen Solution==

----

 This issue is because of ''Help'' screen which is by default open. 
 We need to close it. So here's how you do it-


===Method 1:===

Step 1-    Try by closing current pane for that,  &quot;''press ctrl+shift+F4''&quot;  wait for few seconds things will appear on screen.

Step 2-    If it so than on menu bar go to ''view &gt; panes &gt; help'' unchecked &quot;''Help''&quot; option.

Step 3-    Make sure that &quot;''Help''&quot; under ''view &gt; panes'' is permanently unchecked. And ''Editor, Ipython console, Variable explorer''  are checked. 


===Method 2:===

Step 1-    Open spyder.

Step 2-   On that black screen randomly ''Left click'' on spyder &quot;''Menu bar''&quot; area you will get menu drop downs, You have to find Drop down with &quot;''Panes''&quot; option.

Step 3-   On &quot;''Panes''&quot; drop down unchecked the &quot;''Help''&quot;.

Step 4-   Wait for few seconds Spyder view will appear.

Step 5 -  Make sure that ''&quot;Help&quot;'' under view&gt;panes is permanently unchecked. And ''Editor, Ipython console, variable explorer'' are checked.
[[#Top]]</text>
      <sha1>33jqxxtk23kwydt40e3avoq9iyp4tn9</sha1>
    </revision>
    <revision>
      <id>2153</id>
      <parentid>2152</parentid>
      <timestamp>2018-09-14T01:18:38Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* Importance of Indentation in Python */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="10608">==Introduction to Python==
Python is a widely used programming language which allows programmers to write the program in fewer lines of code. It was designed by Guido van Rossum in 1991. Python uses an interpreter instead of compiler.Basically, the main difference between compiler and interpreter is that the compiler takes the code as 'whole' and compiles it..for example in C language and on the other side in interpreter..example: languages like Python...it interprets the written code 'line by line', and if somewhere error is found...it stops interpreting the code from there itself. Here, in our course we will be using Spyder IDE. Spyder is an integrated development environment with editing options to assist the programmers in writing programs. Spyder IDE is divided into two panes, one is console and other one is where program is written.




Python works on different platforms (Windows, Mac, Linux, Raspberry Pi, etc).
Python has a simple syntax similar to the English language.
Python has syntax that allows developers to write programs with fewer lines than some other programming languages.
Python runs on an interpreter system, meaning that code can be executed as soon as it is written. This means that prototyping can be very quick.
Python can be treated in a procedural way, an object-orientated way or a functional way.

==Installing Anaconda==
[[#Top]]
This article is all about installing and troubleshooting Anaconda and Spyder on different platforms.

===Windows===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#windows Download Link]. Make sure that you download the version compatible to your operating system architecture. If you have a 64 bit OS then you can download either 64 bit of 32 bit, but if you have 32 bit OS then you should download the 32 bit version only.

Step 2 -&gt; Double click on the .exe file that you downloaded just now and follow the instructions. If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open cmd (go to Start -&gt; then type cmd in the search bar and hit enter). There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

===Mac===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#macos Download Link].

Step 2 -&gt; Double click on the .pkg file that you just downloaded. If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

===Linux===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#linux Download Link].

Step 2 -&gt; Go to the folder where you downloaded the .sh file and type following command 

  '''bash Anaconda-latest-Linux-x86_64.sh'''

If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.


==Troubleshooting Spyder==
[[#Top]]
In most of the cases, it happens that Spyder is already running and you have initiated one more instance of it. Please make sure that spyder is not running already.
If you are on Linux OS, please launch spyder through terminal. Just open the terminal and type '''spyder''' and it will launch. When Spyder opens, make sure you see Anaconda with the version written on the Ipython console. If not, try changing the path of your anaconda. Follow these steps according to your OS version.

====Windows====
[https://stackoverflow.com/questions/44597662/conda-command-is-not-recognized-on-windows-10 Click Here]

====Linux====
[https://stackoverflow.com/questions/18675907/how-to-run-conda Click Here]

====Mac====
[https://stackoverflow.com/questions/35246386/conda-command-not-found Click Here]

In most of the cases relaunching Spyder works.
A more general Troubleshoot is present [https://github.com/spyder-ide/spyder/wiki/Troubleshooting-Guide-and-FAQ Here]

==How to run a program in Spyder IDE?==
Go to Run on the menu bar. Click Run-&gt;Run.

==Print statements==
Print statements help to display output on console. 
{{#ev:youtube|https://youtu.be/gECkqaOwyt0|250|right}}

===Syntax===
print()

===How to print a message?===
In order to print a message in Python, write print(&quot;message&quot;).
Single, double, triple quote can be used print()

'''Example:'''

'''Single Quote'''
print('Hello')  
Output: Hello

'''Double Quote'''
print(&quot;Hello&quot;)  
Output: Hello

'''Quote within quote'''
print('Is &quot;Ram&quot; a good boy?')  
Output: Is &quot;Ram&quot; a good boy?

==Escape sequences with strings==

We can use escape sequence within strings to make output more presentable.

'''\n'''  : It will move to next line.

'''\t'''  : It will add tab space(5space)

'''\a'''  : It will play system sound once.

'''Example:'''

Print(&quot;Hi, \n How are you?&quot;)

Output: 

Hi,

How are you?

Print(&quot;Hi, \t How are you?&quot;)

Output: 

Hi, &lt;5 spaces&gt; How are you?

[[File:Escape_Sequence.jpg]]

==Variables==
[[#Top]]
Variables are used to store some values. Values can be strings, integers or decimal values. 
{{#ev:youtube|https://youtu.be/60iAXH1sm-Y|250|right}}
===How to print a variable?===
In order to print the value of a variable in python, first initialise the variable and then write print(variable_name)
For example :
  x=2
  print(x)

===Some facts about Variables===
* If you want to print variable name with a message, you can use , operator. For example : I want to print Hello Simran and Simran has been stored in a variable called ''name''.
  name=&quot;Simran&quot;
  print(&quot;Hello&quot;,name)
* If you change the value of a variable, it will store the latest value. For example :
  name=&quot;Simran&quot;
  name=&quot;Amit&quot;
  If you will execute the command ''print(name)'', Amit will be displayed.
* You can perform operations like addition, subtraction etc only on integral variables.

==How to execute couple of instructions on console?==
You can execute couple of instructions on console using ;. Write Statement 1;Statement 2;......and then press ''Enter''.
{{#ev:youtube|https://youtu.be/CYQCYvLE22Y|250|right}}









==How to take input from the user?==
We can take input from the user using ''input'' function. For Example : You want the user to input variable ''x'', then write x=input(&quot;Enter the value of x&quot;) and execute. Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNkVLCxZw_jcgyS-bmrIVSP

And when the input you need is of data type other than string. You can do both the input function and data conversion in a single line.
For example:
Consider the program for letting in the patients
'''c=input(&quot;Enter (1/0)&quot;);d=int(c)'''

Instead of using it in two separate lines, combine it into a single line
'''c=int(input(&quot;Enter (1/0)&quot;))'''.

To get two inputs in same line with a space between them split() is used.

a,b=input(&quot;enter a&quot;).split(&quot;enter b&quot;)
----

==If statement==
If statement is used to execute set of two contrary statements based on a condition. 

===Syntax===
If (Condition):
    Statement 1
else:
    Statement 2

If 'Condition' is true then 'Statement 1' will be executed otherwise 'Statement 2' will be executed.

Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNhHmg3SkK1uiutigcAbH9K

==Loops==
[[#Top]]&lt;br&gt;
Loops in a programming languages are used to execute set of repetitive statements. For loop and while loop are used extensively to execute a set of looping instructions.

=== For loop Syntax ===
&lt;pre&gt;
for i in range(10): 
    Statement
&lt;/pre&gt;
range(10) indicate that values 0 to 9 will be assigned to the variable i and for each value of i the Statement will be executed, e.g.
&lt;pre&gt;
for i in range(10): 
    print(i)
&lt;/pre&gt;
Output will be
&lt;pre&gt;
0
1
2
3
4
5
6
7
8
9
&lt;/pre&gt;

=== While loop Syntax ===
&lt;pre&gt;
intialisation

while(condition):
   Statement
   increment/decrement
&lt;/pre&gt;
e.g.
&lt;pre&gt;
#initialization
i=0
while(i&lt;10): 
    print(i)
    i=i+1
&lt;/pre&gt;
Output will be:
&lt;pre&gt;
0
1
2
3
4
5
6
7
8
9
&lt;/pre&gt;
Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNbl5jkVrrw1E5XSvm3GiCI

==Importance of Indentation in Python==
Indentation is used to indicate to what block of statements belong. Indentation of blocks convey program structure in Python. Indentation in Python is used to refer a group/block of code/statements. In C++ we use { and } (curly brackets) to group a set of statements. But in Python, there are no such brackets used. Instead of such brackets used in other programming languages, we use indentation in Python.
Use tabs,instead of spaces for ease of writing code.

Wrong indentation can lead to syntax error, or makes your output wrong for your logic e.g.
&lt;pre&gt;
#IndentationError: expected an indented block
i=-1
if i&lt;0:
print(&quot;Test successful&quot;)#Wrong indentation 
else:    
    print(&quot;Test failed&quot;)
#Output: IndentationError: expected an indented block
&lt;/pre&gt;
---
&lt;pre&gt;
#Properly Indented code:
i=-1
if i&lt;0:
    print(&quot;Test successful&quot;)#Wrong indentation
else:    
    print(&quot;Test failed&quot;)
#Output:Test successful
&lt;/pre&gt;
---
Logic changed, so output changed, with improper indentation, e.g.
---
&lt;h3&gt;Code : 1&lt;/h3&gt;
&lt;pre&gt;
sum=0
for i in range(5):
    for j in range(5):
        sum+=i
print(sum, end=&quot; &quot;)
#Output: 50
&lt;/pre&gt;
        
&lt;h3&gt;Code : 2&lt;/h3&gt;
for i in range(5):
    for j in range(5):
        print(end=&quot; &quot;)
    sum+=i
print(sum, end=&quot; &quot;)
#Output:                          10

{{#ev:youtube|https://youtu.be/pmavoW419Yc|250|right}}

==Spyder IDE Black Screen Solution==

----

 This issue is because of ''Help'' screen which is by default open. 
 We need to close it. So here's how you do it-


===Method 1:===

Step 1-    Try by closing current pane for that,  &quot;''press ctrl+shift+F4''&quot;  wait for few seconds things will appear on screen.

Step 2-    If it so than on menu bar go to ''view &gt; panes &gt; help'' unchecked &quot;''Help''&quot; option.

Step 3-    Make sure that &quot;''Help''&quot; under ''view &gt; panes'' is permanently unchecked. And ''Editor, Ipython console, Variable explorer''  are checked. 


===Method 2:===

Step 1-    Open spyder.

Step 2-   On that black screen randomly ''Left click'' on spyder &quot;''Menu bar''&quot; area you will get menu drop downs, You have to find Drop down with &quot;''Panes''&quot; option.

Step 3-   On &quot;''Panes''&quot; drop down unchecked the &quot;''Help''&quot;.

Step 4-   Wait for few seconds Spyder view will appear.

Step 5 -  Make sure that ''&quot;Help&quot;'' under view&gt;panes is permanently unchecked. And ''Editor, Ipython console, variable explorer'' are checked.
[[#Top]]</text>
      <sha1>8rb4sgf1m3s847ohi5sp5kwzklwjp8b</sha1>
    </revision>
    <revision>
      <id>2154</id>
      <parentid>2153</parentid>
      <timestamp>2018-09-14T01:19:47Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* Importance of Indentation in Python */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="10620">==Introduction to Python==
Python is a widely used programming language which allows programmers to write the program in fewer lines of code. It was designed by Guido van Rossum in 1991. Python uses an interpreter instead of compiler.Basically, the main difference between compiler and interpreter is that the compiler takes the code as 'whole' and compiles it..for example in C language and on the other side in interpreter..example: languages like Python...it interprets the written code 'line by line', and if somewhere error is found...it stops interpreting the code from there itself. Here, in our course we will be using Spyder IDE. Spyder is an integrated development environment with editing options to assist the programmers in writing programs. Spyder IDE is divided into two panes, one is console and other one is where program is written.




Python works on different platforms (Windows, Mac, Linux, Raspberry Pi, etc).
Python has a simple syntax similar to the English language.
Python has syntax that allows developers to write programs with fewer lines than some other programming languages.
Python runs on an interpreter system, meaning that code can be executed as soon as it is written. This means that prototyping can be very quick.
Python can be treated in a procedural way, an object-orientated way or a functional way.

==Installing Anaconda==
[[#Top]]
This article is all about installing and troubleshooting Anaconda and Spyder on different platforms.

===Windows===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#windows Download Link]. Make sure that you download the version compatible to your operating system architecture. If you have a 64 bit OS then you can download either 64 bit of 32 bit, but if you have 32 bit OS then you should download the 32 bit version only.

Step 2 -&gt; Double click on the .exe file that you downloaded just now and follow the instructions. If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open cmd (go to Start -&gt; then type cmd in the search bar and hit enter). There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

===Mac===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#macos Download Link].

Step 2 -&gt; Double click on the .pkg file that you just downloaded. If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

===Linux===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#linux Download Link].

Step 2 -&gt; Go to the folder where you downloaded the .sh file and type following command 

  '''bash Anaconda-latest-Linux-x86_64.sh'''

If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.


==Troubleshooting Spyder==
[[#Top]]
In most of the cases, it happens that Spyder is already running and you have initiated one more instance of it. Please make sure that spyder is not running already.
If you are on Linux OS, please launch spyder through terminal. Just open the terminal and type '''spyder''' and it will launch. When Spyder opens, make sure you see Anaconda with the version written on the Ipython console. If not, try changing the path of your anaconda. Follow these steps according to your OS version.

====Windows====
[https://stackoverflow.com/questions/44597662/conda-command-is-not-recognized-on-windows-10 Click Here]

====Linux====
[https://stackoverflow.com/questions/18675907/how-to-run-conda Click Here]

====Mac====
[https://stackoverflow.com/questions/35246386/conda-command-not-found Click Here]

In most of the cases relaunching Spyder works.
A more general Troubleshoot is present [https://github.com/spyder-ide/spyder/wiki/Troubleshooting-Guide-and-FAQ Here]

==How to run a program in Spyder IDE?==
Go to Run on the menu bar. Click Run-&gt;Run.

==Print statements==
Print statements help to display output on console. 
{{#ev:youtube|https://youtu.be/gECkqaOwyt0|250|right}}

===Syntax===
print()

===How to print a message?===
In order to print a message in Python, write print(&quot;message&quot;).
Single, double, triple quote can be used print()

'''Example:'''

'''Single Quote'''
print('Hello')  
Output: Hello

'''Double Quote'''
print(&quot;Hello&quot;)  
Output: Hello

'''Quote within quote'''
print('Is &quot;Ram&quot; a good boy?')  
Output: Is &quot;Ram&quot; a good boy?

==Escape sequences with strings==

We can use escape sequence within strings to make output more presentable.

'''\n'''  : It will move to next line.

'''\t'''  : It will add tab space(5space)

'''\a'''  : It will play system sound once.

'''Example:'''

Print(&quot;Hi, \n How are you?&quot;)

Output: 

Hi,

How are you?

Print(&quot;Hi, \t How are you?&quot;)

Output: 

Hi, &lt;5 spaces&gt; How are you?

[[File:Escape_Sequence.jpg]]

==Variables==
[[#Top]]
Variables are used to store some values. Values can be strings, integers or decimal values. 
{{#ev:youtube|https://youtu.be/60iAXH1sm-Y|250|right}}
===How to print a variable?===
In order to print the value of a variable in python, first initialise the variable and then write print(variable_name)
For example :
  x=2
  print(x)

===Some facts about Variables===
* If you want to print variable name with a message, you can use , operator. For example : I want to print Hello Simran and Simran has been stored in a variable called ''name''.
  name=&quot;Simran&quot;
  print(&quot;Hello&quot;,name)
* If you change the value of a variable, it will store the latest value. For example :
  name=&quot;Simran&quot;
  name=&quot;Amit&quot;
  If you will execute the command ''print(name)'', Amit will be displayed.
* You can perform operations like addition, subtraction etc only on integral variables.

==How to execute couple of instructions on console?==
You can execute couple of instructions on console using ;. Write Statement 1;Statement 2;......and then press ''Enter''.
{{#ev:youtube|https://youtu.be/CYQCYvLE22Y|250|right}}









==How to take input from the user?==
We can take input from the user using ''input'' function. For Example : You want the user to input variable ''x'', then write x=input(&quot;Enter the value of x&quot;) and execute. Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNkVLCxZw_jcgyS-bmrIVSP

And when the input you need is of data type other than string. You can do both the input function and data conversion in a single line.
For example:
Consider the program for letting in the patients
'''c=input(&quot;Enter (1/0)&quot;);d=int(c)'''

Instead of using it in two separate lines, combine it into a single line
'''c=int(input(&quot;Enter (1/0)&quot;))'''.

To get two inputs in same line with a space between them split() is used.

a,b=input(&quot;enter a&quot;).split(&quot;enter b&quot;)
----

==If statement==
If statement is used to execute set of two contrary statements based on a condition. 

===Syntax===
If (Condition):
    Statement 1
else:
    Statement 2

If 'Condition' is true then 'Statement 1' will be executed otherwise 'Statement 2' will be executed.

Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNhHmg3SkK1uiutigcAbH9K

==Loops==
[[#Top]]&lt;br&gt;
Loops in a programming languages are used to execute set of repetitive statements. For loop and while loop are used extensively to execute a set of looping instructions.

=== For loop Syntax ===
&lt;pre&gt;
for i in range(10): 
    Statement
&lt;/pre&gt;
range(10) indicate that values 0 to 9 will be assigned to the variable i and for each value of i the Statement will be executed, e.g.
&lt;pre&gt;
for i in range(10): 
    print(i)
&lt;/pre&gt;
Output will be
&lt;pre&gt;
0
1
2
3
4
5
6
7
8
9
&lt;/pre&gt;

=== While loop Syntax ===
&lt;pre&gt;
intialisation

while(condition):
   Statement
   increment/decrement
&lt;/pre&gt;
e.g.
&lt;pre&gt;
#initialization
i=0
while(i&lt;10): 
    print(i)
    i=i+1
&lt;/pre&gt;
Output will be:
&lt;pre&gt;
0
1
2
3
4
5
6
7
8
9
&lt;/pre&gt;
Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNbl5jkVrrw1E5XSvm3GiCI

==Importance of Indentation in Python==
Indentation is used to indicate to what block of statements belong. Indentation of blocks convey program structure in Python. Indentation in Python is used to refer a group/block of code/statements. In C++ we use { and } (curly brackets) to group a set of statements. But in Python, there are no such brackets used. Instead of such brackets used in other programming languages, we use indentation in Python.
Use tabs,instead of spaces for ease of writing code.

Wrong indentation can lead to syntax error, or makes your output wrong for your logic e.g.
&lt;pre&gt;
#IndentationError: expected an indented block
i=-1
if i&lt;0:
print(&quot;Test successful&quot;)#Wrong indentation 
else:    
    print(&quot;Test failed&quot;)
#Output: IndentationError: expected an indented block
&lt;/pre&gt;
---
&lt;pre&gt;
#Properly Indented code:
i=-1
if i&lt;0:
    print(&quot;Test successful&quot;)#Wrong indentation
else:    
    print(&quot;Test failed&quot;)
#Output:Test successful
&lt;/pre&gt;
---
Logic changed, so output changed, with improper indentation, e.g.
---
&lt;h3&gt;Code : 1&lt;/h3&gt;
&lt;pre&gt;
sum=0
for i in range(5):
    for j in range(5):
        sum+=i
print(sum, end=&quot; &quot;)
#Output: 50
&lt;/pre&gt;
        
&lt;h3&gt;Code : 2&lt;/h3&gt;
&lt;pre&gt;
for i in range(5):
    for j in range(5):
        print(end=&quot; &quot;)
    sum+=i
print(sum, end=&quot; &quot;)
#Output:                          10
&lt;/pre&gt;
{{#ev:youtube|https://youtu.be/pmavoW419Yc|250|right}}

==Spyder IDE Black Screen Solution==

----

 This issue is because of ''Help'' screen which is by default open. 
 We need to close it. So here's how you do it-


===Method 1:===

Step 1-    Try by closing current pane for that,  &quot;''press ctrl+shift+F4''&quot;  wait for few seconds things will appear on screen.

Step 2-    If it so than on menu bar go to ''view &gt; panes &gt; help'' unchecked &quot;''Help''&quot; option.

Step 3-    Make sure that &quot;''Help''&quot; under ''view &gt; panes'' is permanently unchecked. And ''Editor, Ipython console, Variable explorer''  are checked. 


===Method 2:===

Step 1-    Open spyder.

Step 2-   On that black screen randomly ''Left click'' on spyder &quot;''Menu bar''&quot; area you will get menu drop downs, You have to find Drop down with &quot;''Panes''&quot; option.

Step 3-   On &quot;''Panes''&quot; drop down unchecked the &quot;''Help''&quot;.

Step 4-   Wait for few seconds Spyder view will appear.

Step 5 -  Make sure that ''&quot;Help&quot;'' under view&gt;panes is permanently unchecked. And ''Editor, Ipython console, variable explorer'' are checked.
[[#Top]]</text>
      <sha1>83jk2izoxvz04ac4mo5yrplz5j9dzjn</sha1>
    </revision>
    <revision>
      <id>2155</id>
      <parentid>2154</parentid>
      <timestamp>2018-09-14T01:20:09Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* Importance of Indentation in Python */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="10624">==Introduction to Python==
Python is a widely used programming language which allows programmers to write the program in fewer lines of code. It was designed by Guido van Rossum in 1991. Python uses an interpreter instead of compiler.Basically, the main difference between compiler and interpreter is that the compiler takes the code as 'whole' and compiles it..for example in C language and on the other side in interpreter..example: languages like Python...it interprets the written code 'line by line', and if somewhere error is found...it stops interpreting the code from there itself. Here, in our course we will be using Spyder IDE. Spyder is an integrated development environment with editing options to assist the programmers in writing programs. Spyder IDE is divided into two panes, one is console and other one is where program is written.




Python works on different platforms (Windows, Mac, Linux, Raspberry Pi, etc).
Python has a simple syntax similar to the English language.
Python has syntax that allows developers to write programs with fewer lines than some other programming languages.
Python runs on an interpreter system, meaning that code can be executed as soon as it is written. This means that prototyping can be very quick.
Python can be treated in a procedural way, an object-orientated way or a functional way.

==Installing Anaconda==
[[#Top]]
This article is all about installing and troubleshooting Anaconda and Spyder on different platforms.

===Windows===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#windows Download Link]. Make sure that you download the version compatible to your operating system architecture. If you have a 64 bit OS then you can download either 64 bit of 32 bit, but if you have 32 bit OS then you should download the 32 bit version only.

Step 2 -&gt; Double click on the .exe file that you downloaded just now and follow the instructions. If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open cmd (go to Start -&gt; then type cmd in the search bar and hit enter). There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

===Mac===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#macos Download Link].

Step 2 -&gt; Double click on the .pkg file that you just downloaded. If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

===Linux===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#linux Download Link].

Step 2 -&gt; Go to the folder where you downloaded the .sh file and type following command 

  '''bash Anaconda-latest-Linux-x86_64.sh'''

If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.


==Troubleshooting Spyder==
[[#Top]]
In most of the cases, it happens that Spyder is already running and you have initiated one more instance of it. Please make sure that spyder is not running already.
If you are on Linux OS, please launch spyder through terminal. Just open the terminal and type '''spyder''' and it will launch. When Spyder opens, make sure you see Anaconda with the version written on the Ipython console. If not, try changing the path of your anaconda. Follow these steps according to your OS version.

====Windows====
[https://stackoverflow.com/questions/44597662/conda-command-is-not-recognized-on-windows-10 Click Here]

====Linux====
[https://stackoverflow.com/questions/18675907/how-to-run-conda Click Here]

====Mac====
[https://stackoverflow.com/questions/35246386/conda-command-not-found Click Here]

In most of the cases relaunching Spyder works.
A more general Troubleshoot is present [https://github.com/spyder-ide/spyder/wiki/Troubleshooting-Guide-and-FAQ Here]

==How to run a program in Spyder IDE?==
Go to Run on the menu bar. Click Run-&gt;Run.

==Print statements==
Print statements help to display output on console. 
{{#ev:youtube|https://youtu.be/gECkqaOwyt0|250|right}}

===Syntax===
print()

===How to print a message?===
In order to print a message in Python, write print(&quot;message&quot;).
Single, double, triple quote can be used print()

'''Example:'''

'''Single Quote'''
print('Hello')  
Output: Hello

'''Double Quote'''
print(&quot;Hello&quot;)  
Output: Hello

'''Quote within quote'''
print('Is &quot;Ram&quot; a good boy?')  
Output: Is &quot;Ram&quot; a good boy?

==Escape sequences with strings==

We can use escape sequence within strings to make output more presentable.

'''\n'''  : It will move to next line.

'''\t'''  : It will add tab space(5space)

'''\a'''  : It will play system sound once.

'''Example:'''

Print(&quot;Hi, \n How are you?&quot;)

Output: 

Hi,

How are you?

Print(&quot;Hi, \t How are you?&quot;)

Output: 

Hi, &lt;5 spaces&gt; How are you?

[[File:Escape_Sequence.jpg]]

==Variables==
[[#Top]]
Variables are used to store some values. Values can be strings, integers or decimal values. 
{{#ev:youtube|https://youtu.be/60iAXH1sm-Y|250|right}}
===How to print a variable?===
In order to print the value of a variable in python, first initialise the variable and then write print(variable_name)
For example :
  x=2
  print(x)

===Some facts about Variables===
* If you want to print variable name with a message, you can use , operator. For example : I want to print Hello Simran and Simran has been stored in a variable called ''name''.
  name=&quot;Simran&quot;
  print(&quot;Hello&quot;,name)
* If you change the value of a variable, it will store the latest value. For example :
  name=&quot;Simran&quot;
  name=&quot;Amit&quot;
  If you will execute the command ''print(name)'', Amit will be displayed.
* You can perform operations like addition, subtraction etc only on integral variables.

==How to execute couple of instructions on console?==
You can execute couple of instructions on console using ;. Write Statement 1;Statement 2;......and then press ''Enter''.
{{#ev:youtube|https://youtu.be/CYQCYvLE22Y|250|right}}









==How to take input from the user?==
We can take input from the user using ''input'' function. For Example : You want the user to input variable ''x'', then write x=input(&quot;Enter the value of x&quot;) and execute. Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNkVLCxZw_jcgyS-bmrIVSP

And when the input you need is of data type other than string. You can do both the input function and data conversion in a single line.
For example:
Consider the program for letting in the patients
'''c=input(&quot;Enter (1/0)&quot;);d=int(c)'''

Instead of using it in two separate lines, combine it into a single line
'''c=int(input(&quot;Enter (1/0)&quot;))'''.

To get two inputs in same line with a space between them split() is used.

a,b=input(&quot;enter a&quot;).split(&quot;enter b&quot;)
----

==If statement==
If statement is used to execute set of two contrary statements based on a condition. 

===Syntax===
If (Condition):
    Statement 1
else:
    Statement 2

If 'Condition' is true then 'Statement 1' will be executed otherwise 'Statement 2' will be executed.

Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNhHmg3SkK1uiutigcAbH9K

==Loops==
[[#Top]]&lt;br&gt;
Loops in a programming languages are used to execute set of repetitive statements. For loop and while loop are used extensively to execute a set of looping instructions.

=== For loop Syntax ===
&lt;pre&gt;
for i in range(10): 
    Statement
&lt;/pre&gt;
range(10) indicate that values 0 to 9 will be assigned to the variable i and for each value of i the Statement will be executed, e.g.
&lt;pre&gt;
for i in range(10): 
    print(i)
&lt;/pre&gt;
Output will be
&lt;pre&gt;
0
1
2
3
4
5
6
7
8
9
&lt;/pre&gt;

=== While loop Syntax ===
&lt;pre&gt;
intialisation

while(condition):
   Statement
   increment/decrement
&lt;/pre&gt;
e.g.
&lt;pre&gt;
#initialization
i=0
while(i&lt;10): 
    print(i)
    i=i+1
&lt;/pre&gt;
Output will be:
&lt;pre&gt;
0
1
2
3
4
5
6
7
8
9
&lt;/pre&gt;
Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNbl5jkVrrw1E5XSvm3GiCI

==Importance of Indentation in Python==
Indentation is used to indicate to what block of statements belong. Indentation of blocks convey program structure in Python. Indentation in Python is used to refer a group/block of code/statements. In C++ we use { and } (curly brackets) to group a set of statements. But in Python, there are no such brackets used. Instead of such brackets used in other programming languages, we use indentation in Python.
Use tabs,instead of spaces for ease of writing code.

Wrong indentation can lead to syntax error, or makes your output wrong for your logic e.g.
&lt;pre&gt;
#IndentationError: expected an indented block
i=-1
if i&lt;0:
print(&quot;Test successful&quot;)#Wrong indentation 
else:    
    print(&quot;Test failed&quot;)
#Output: IndentationError: expected an indented block
&lt;/pre&gt;
---
&lt;pre&gt;
#Properly Indented code:
i=-1
if i&lt;0:
    print(&quot;Test successful&quot;)#Wrong indentation
else:    
    print(&quot;Test failed&quot;)
#Output:Test successful
&lt;/pre&gt;
---
Logic changed, so output changed, with improper indentation, e.g.
---
&lt;h3&gt;Code : 1&lt;/h3&gt;
&lt;pre&gt;
sum=0
for i in range(5):
    for j in range(5):
        sum+=i
print(sum, end=&quot; &quot;)
#Output: 50
&lt;/pre&gt;
        
&lt;h3&gt;Code : 2&lt;/h3&gt;
&lt;pre&gt;
for i in range(5):
    for j in range(5):
        print(end=&quot; &quot;)
    sum+=i
print(sum, end=&quot; &quot;)
#Output:                          10
&lt;/pre&gt;
{{#ev:youtube|https://youtu.be/pmavoW419Yc|250|right}}&lt;br&gt;

==Spyder IDE Black Screen Solution==

----

 This issue is because of ''Help'' screen which is by default open. 
 We need to close it. So here's how you do it-


===Method 1:===

Step 1-    Try by closing current pane for that,  &quot;''press ctrl+shift+F4''&quot;  wait for few seconds things will appear on screen.

Step 2-    If it so than on menu bar go to ''view &gt; panes &gt; help'' unchecked &quot;''Help''&quot; option.

Step 3-    Make sure that &quot;''Help''&quot; under ''view &gt; panes'' is permanently unchecked. And ''Editor, Ipython console, Variable explorer''  are checked. 


===Method 2:===

Step 1-    Open spyder.

Step 2-   On that black screen randomly ''Left click'' on spyder &quot;''Menu bar''&quot; area you will get menu drop downs, You have to find Drop down with &quot;''Panes''&quot; option.

Step 3-   On &quot;''Panes''&quot; drop down unchecked the &quot;''Help''&quot;.

Step 4-   Wait for few seconds Spyder view will appear.

Step 5 -  Make sure that ''&quot;Help&quot;'' under view&gt;panes is permanently unchecked. And ''Editor, Ipython console, variable explorer'' are checked.
[[#Top]]</text>
      <sha1>95wlydo5kn3p6yha4zpr0vmt8yl7x8l</sha1>
    </revision>
    <revision>
      <id>3332</id>
      <parentid>2155</parentid>
      <timestamp>2018-09-26T04:58:56Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* Installing Anaconda */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="10623">==Introduction to Python==
Python is a widely used programming language which allows programmers to write the program in fewer lines of code. It was designed by Guido van Rossum in 1991. Python uses an interpreter instead of compiler.Basically, the main difference between compiler and interpreter is that the compiler takes the code as 'whole' and compiles it..for example in C language and on the other side in interpreter..example: languages like Python...it interprets the written code 'line by line', and if somewhere error is found...it stops interpreting the code from there itself. Here, in our course we will be using Spyder IDE. Spyder is an integrated development environment with editing options to assist the programmers in writing programs. Spyder IDE is divided into two panes, one is console and other one is where program is written.




Python works on different platforms (Windows, Mac, Linux, Raspberry Pi, etc).
Python has a simple syntax similar to the English language.
Python has syntax that allows developers to write programs with fewer lines than some other programming languages.
Python runs on an interpreter system, meaning that code can be executed as soon as it is written. This means that prototyping can be very quick.
Python can be treated in a procedural way, an object-orientated way or a functional way.

==Installing Anaconda==
[[#Top]]
This article is all about installing and troubleshooting Anaconda and Spyder on different platforms.

===Windows===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#windows Download Link]. Make sure that you download the version compatible to your operating system architecture. If you have a 64 bit OS then you can download either 64 bit of 32 bit, but if you have 32 bit OS then you should download the 32 bit version only.

Step 2 -&gt; Double click on the .exe file that you downloaded just now and follow the instructions. If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open cmd (go to Start -&gt; then type cmd in the search bar and hit enter). There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

===Mac===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#macos Download Link].

Step 2 -&gt; Double click on the .pkg file that you just downloaded. If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

===Linux===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#linux Download Link].

Step 2 -&gt; Go to the folder where you downloaded the .sh file and type following command 

  '''bash Anaconda-latest-Linux-x86_64.sh'''

If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

==Troubleshooting Spyder==
[[#Top]]
In most of the cases, it happens that Spyder is already running and you have initiated one more instance of it. Please make sure that spyder is not running already.
If you are on Linux OS, please launch spyder through terminal. Just open the terminal and type '''spyder''' and it will launch. When Spyder opens, make sure you see Anaconda with the version written on the Ipython console. If not, try changing the path of your anaconda. Follow these steps according to your OS version.

====Windows====
[https://stackoverflow.com/questions/44597662/conda-command-is-not-recognized-on-windows-10 Click Here]

====Linux====
[https://stackoverflow.com/questions/18675907/how-to-run-conda Click Here]

====Mac====
[https://stackoverflow.com/questions/35246386/conda-command-not-found Click Here]

In most of the cases relaunching Spyder works.
A more general Troubleshoot is present [https://github.com/spyder-ide/spyder/wiki/Troubleshooting-Guide-and-FAQ Here]

==How to run a program in Spyder IDE?==
Go to Run on the menu bar. Click Run-&gt;Run.

==Print statements==
Print statements help to display output on console. 
{{#ev:youtube|https://youtu.be/gECkqaOwyt0|250|right}}

===Syntax===
print()

===How to print a message?===
In order to print a message in Python, write print(&quot;message&quot;).
Single, double, triple quote can be used print()

'''Example:'''

'''Single Quote'''
print('Hello')  
Output: Hello

'''Double Quote'''
print(&quot;Hello&quot;)  
Output: Hello

'''Quote within quote'''
print('Is &quot;Ram&quot; a good boy?')  
Output: Is &quot;Ram&quot; a good boy?

==Escape sequences with strings==

We can use escape sequence within strings to make output more presentable.

'''\n'''  : It will move to next line.

'''\t'''  : It will add tab space(5space)

'''\a'''  : It will play system sound once.

'''Example:'''

Print(&quot;Hi, \n How are you?&quot;)

Output: 

Hi,

How are you?

Print(&quot;Hi, \t How are you?&quot;)

Output: 

Hi, &lt;5 spaces&gt; How are you?

[[File:Escape_Sequence.jpg]]

==Variables==
[[#Top]]
Variables are used to store some values. Values can be strings, integers or decimal values. 
{{#ev:youtube|https://youtu.be/60iAXH1sm-Y|250|right}}
===How to print a variable?===
In order to print the value of a variable in python, first initialise the variable and then write print(variable_name)
For example :
  x=2
  print(x)

===Some facts about Variables===
* If you want to print variable name with a message, you can use , operator. For example : I want to print Hello Simran and Simran has been stored in a variable called ''name''.
  name=&quot;Simran&quot;
  print(&quot;Hello&quot;,name)
* If you change the value of a variable, it will store the latest value. For example :
  name=&quot;Simran&quot;
  name=&quot;Amit&quot;
  If you will execute the command ''print(name)'', Amit will be displayed.
* You can perform operations like addition, subtraction etc only on integral variables.

==How to execute couple of instructions on console?==
You can execute couple of instructions on console using ;. Write Statement 1;Statement 2;......and then press ''Enter''.
{{#ev:youtube|https://youtu.be/CYQCYvLE22Y|250|right}}









==How to take input from the user?==
We can take input from the user using ''input'' function. For Example : You want the user to input variable ''x'', then write x=input(&quot;Enter the value of x&quot;) and execute. Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNkVLCxZw_jcgyS-bmrIVSP

And when the input you need is of data type other than string. You can do both the input function and data conversion in a single line.
For example:
Consider the program for letting in the patients
'''c=input(&quot;Enter (1/0)&quot;);d=int(c)'''

Instead of using it in two separate lines, combine it into a single line
'''c=int(input(&quot;Enter (1/0)&quot;))'''.

To get two inputs in same line with a space between them split() is used.

a,b=input(&quot;enter a&quot;).split(&quot;enter b&quot;)
----

==If statement==
If statement is used to execute set of two contrary statements based on a condition. 

===Syntax===
If (Condition):
    Statement 1
else:
    Statement 2

If 'Condition' is true then 'Statement 1' will be executed otherwise 'Statement 2' will be executed.

Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNhHmg3SkK1uiutigcAbH9K

==Loops==
[[#Top]]&lt;br&gt;
Loops in a programming languages are used to execute set of repetitive statements. For loop and while loop are used extensively to execute a set of looping instructions.

=== For loop Syntax ===
&lt;pre&gt;
for i in range(10): 
    Statement
&lt;/pre&gt;
range(10) indicate that values 0 to 9 will be assigned to the variable i and for each value of i the Statement will be executed, e.g.
&lt;pre&gt;
for i in range(10): 
    print(i)
&lt;/pre&gt;
Output will be
&lt;pre&gt;
0
1
2
3
4
5
6
7
8
9
&lt;/pre&gt;

=== While loop Syntax ===
&lt;pre&gt;
intialisation

while(condition):
   Statement
   increment/decrement
&lt;/pre&gt;
e.g.
&lt;pre&gt;
#initialization
i=0
while(i&lt;10): 
    print(i)
    i=i+1
&lt;/pre&gt;
Output will be:
&lt;pre&gt;
0
1
2
3
4
5
6
7
8
9
&lt;/pre&gt;
Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNbl5jkVrrw1E5XSvm3GiCI

==Importance of Indentation in Python==
Indentation is used to indicate to what block of statements belong. Indentation of blocks convey program structure in Python. Indentation in Python is used to refer a group/block of code/statements. In C++ we use { and } (curly brackets) to group a set of statements. But in Python, there are no such brackets used. Instead of such brackets used in other programming languages, we use indentation in Python.
Use tabs,instead of spaces for ease of writing code.

Wrong indentation can lead to syntax error, or makes your output wrong for your logic e.g.
&lt;pre&gt;
#IndentationError: expected an indented block
i=-1
if i&lt;0:
print(&quot;Test successful&quot;)#Wrong indentation 
else:    
    print(&quot;Test failed&quot;)
#Output: IndentationError: expected an indented block
&lt;/pre&gt;
---
&lt;pre&gt;
#Properly Indented code:
i=-1
if i&lt;0:
    print(&quot;Test successful&quot;)#Wrong indentation
else:    
    print(&quot;Test failed&quot;)
#Output:Test successful
&lt;/pre&gt;
---
Logic changed, so output changed, with improper indentation, e.g.
---
&lt;h3&gt;Code : 1&lt;/h3&gt;
&lt;pre&gt;
sum=0
for i in range(5):
    for j in range(5):
        sum+=i
print(sum, end=&quot; &quot;)
#Output: 50
&lt;/pre&gt;
        
&lt;h3&gt;Code : 2&lt;/h3&gt;
&lt;pre&gt;
for i in range(5):
    for j in range(5):
        print(end=&quot; &quot;)
    sum+=i
print(sum, end=&quot; &quot;)
#Output:                          10
&lt;/pre&gt;
{{#ev:youtube|https://youtu.be/pmavoW419Yc|250|right}}&lt;br&gt;

==Spyder IDE Black Screen Solution==

----

 This issue is because of ''Help'' screen which is by default open. 
 We need to close it. So here's how you do it-


===Method 1:===

Step 1-    Try by closing current pane for that,  &quot;''press ctrl+shift+F4''&quot;  wait for few seconds things will appear on screen.

Step 2-    If it so than on menu bar go to ''view &gt; panes &gt; help'' unchecked &quot;''Help''&quot; option.

Step 3-    Make sure that &quot;''Help''&quot; under ''view &gt; panes'' is permanently unchecked. And ''Editor, Ipython console, Variable explorer''  are checked. 


===Method 2:===

Step 1-    Open spyder.

Step 2-   On that black screen randomly ''Left click'' on spyder &quot;''Menu bar''&quot; area you will get menu drop downs, You have to find Drop down with &quot;''Panes''&quot; option.

Step 3-   On &quot;''Panes''&quot; drop down unchecked the &quot;''Help''&quot;.

Step 4-   Wait for few seconds Spyder view will appear.

Step 5 -  Make sure that ''&quot;Help&quot;'' under view&gt;panes is permanently unchecked. And ''Editor, Ipython console, variable explorer'' are checked.
[[#Top]]</text>
      <sha1>a8yvkdnp7v3frkrtmbjrgt1kgsjllf9</sha1>
    </revision>
    <revision>
      <id>3343</id>
      <parentid>3332</parentid>
      <timestamp>2018-09-26T05:06:55Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* Troubleshooting Spyder */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="10625">==Introduction to Python==
Python is a widely used programming language which allows programmers to write the program in fewer lines of code. It was designed by Guido van Rossum in 1991. Python uses an interpreter instead of compiler.Basically, the main difference between compiler and interpreter is that the compiler takes the code as 'whole' and compiles it..for example in C language and on the other side in interpreter..example: languages like Python...it interprets the written code 'line by line', and if somewhere error is found...it stops interpreting the code from there itself. Here, in our course we will be using Spyder IDE. Spyder is an integrated development environment with editing options to assist the programmers in writing programs. Spyder IDE is divided into two panes, one is console and other one is where program is written.




Python works on different platforms (Windows, Mac, Linux, Raspberry Pi, etc).
Python has a simple syntax similar to the English language.
Python has syntax that allows developers to write programs with fewer lines than some other programming languages.
Python runs on an interpreter system, meaning that code can be executed as soon as it is written. This means that prototyping can be very quick.
Python can be treated in a procedural way, an object-orientated way or a functional way.

==Installing Anaconda==
[[#Top]]
This article is all about installing and troubleshooting Anaconda and Spyder on different platforms.

===Windows===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#windows Download Link]. Make sure that you download the version compatible to your operating system architecture. If you have a 64 bit OS then you can download either 64 bit of 32 bit, but if you have 32 bit OS then you should download the 32 bit version only.

Step 2 -&gt; Double click on the .exe file that you downloaded just now and follow the instructions. If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open cmd (go to Start -&gt; then type cmd in the search bar and hit enter). There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

===Mac===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#macos Download Link].

Step 2 -&gt; Double click on the .pkg file that you just downloaded. If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

===Linux===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#linux Download Link].

Step 2 -&gt; Go to the folder where you downloaded the .sh file and type following command 

  '''bash Anaconda-latest-Linux-x86_64.sh'''

If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

==Troubleshooting Spyder==

[[#Top]]

In most of the cases, it happens that Spyder is already running and you have initiated one more instance of it. Please make sure that spyder is not running already.
If you are on Linux OS, please launch spyder through terminal. Just open the terminal and type '''spyder''' and it will launch. When Spyder opens, make sure you see Anaconda with the version written on the Ipython console. If not, try changing the path of your anaconda. Follow these steps according to your OS version.

====Windows====
[https://stackoverflow.com/questions/44597662/conda-command-is-not-recognized-on-windows-10 Click Here]

====Linux====
[https://stackoverflow.com/questions/18675907/how-to-run-conda Click Here]

====Mac====
[https://stackoverflow.com/questions/35246386/conda-command-not-found Click Here]

In most of the cases relaunching Spyder works.
A more general Troubleshoot is present [https://github.com/spyder-ide/spyder/wiki/Troubleshooting-Guide-and-FAQ Here]

==How to run a program in Spyder IDE?==
Go to Run on the menu bar. Click Run-&gt;Run.

==Print statements==
Print statements help to display output on console. 
{{#ev:youtube|https://youtu.be/gECkqaOwyt0|250|right}}

===Syntax===
print()

===How to print a message?===
In order to print a message in Python, write print(&quot;message&quot;).
Single, double, triple quote can be used print()

'''Example:'''

'''Single Quote'''
print('Hello')  
Output: Hello

'''Double Quote'''
print(&quot;Hello&quot;)  
Output: Hello

'''Quote within quote'''
print('Is &quot;Ram&quot; a good boy?')  
Output: Is &quot;Ram&quot; a good boy?

==Escape sequences with strings==

We can use escape sequence within strings to make output more presentable.

'''\n'''  : It will move to next line.

'''\t'''  : It will add tab space(5space)

'''\a'''  : It will play system sound once.

'''Example:'''

Print(&quot;Hi, \n How are you?&quot;)

Output: 

Hi,

How are you?

Print(&quot;Hi, \t How are you?&quot;)

Output: 

Hi, &lt;5 spaces&gt; How are you?

[[File:Escape_Sequence.jpg]]

==Variables==
[[#Top]]
Variables are used to store some values. Values can be strings, integers or decimal values. 
{{#ev:youtube|https://youtu.be/60iAXH1sm-Y|250|right}}
===How to print a variable?===
In order to print the value of a variable in python, first initialise the variable and then write print(variable_name)
For example :
  x=2
  print(x)

===Some facts about Variables===
* If you want to print variable name with a message, you can use , operator. For example : I want to print Hello Simran and Simran has been stored in a variable called ''name''.
  name=&quot;Simran&quot;
  print(&quot;Hello&quot;,name)
* If you change the value of a variable, it will store the latest value. For example :
  name=&quot;Simran&quot;
  name=&quot;Amit&quot;
  If you will execute the command ''print(name)'', Amit will be displayed.
* You can perform operations like addition, subtraction etc only on integral variables.

==How to execute couple of instructions on console?==
You can execute couple of instructions on console using ;. Write Statement 1;Statement 2;......and then press ''Enter''.
{{#ev:youtube|https://youtu.be/CYQCYvLE22Y|250|right}}









==How to take input from the user?==
We can take input from the user using ''input'' function. For Example : You want the user to input variable ''x'', then write x=input(&quot;Enter the value of x&quot;) and execute. Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNkVLCxZw_jcgyS-bmrIVSP

And when the input you need is of data type other than string. You can do both the input function and data conversion in a single line.
For example:
Consider the program for letting in the patients
'''c=input(&quot;Enter (1/0)&quot;);d=int(c)'''

Instead of using it in two separate lines, combine it into a single line
'''c=int(input(&quot;Enter (1/0)&quot;))'''.

To get two inputs in same line with a space between them split() is used.

a,b=input(&quot;enter a&quot;).split(&quot;enter b&quot;)
----

==If statement==
If statement is used to execute set of two contrary statements based on a condition. 

===Syntax===
If (Condition):
    Statement 1
else:
    Statement 2

If 'Condition' is true then 'Statement 1' will be executed otherwise 'Statement 2' will be executed.

Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNhHmg3SkK1uiutigcAbH9K

==Loops==
[[#Top]]&lt;br&gt;
Loops in a programming languages are used to execute set of repetitive statements. For loop and while loop are used extensively to execute a set of looping instructions.

=== For loop Syntax ===
&lt;pre&gt;
for i in range(10): 
    Statement
&lt;/pre&gt;
range(10) indicate that values 0 to 9 will be assigned to the variable i and for each value of i the Statement will be executed, e.g.
&lt;pre&gt;
for i in range(10): 
    print(i)
&lt;/pre&gt;
Output will be
&lt;pre&gt;
0
1
2
3
4
5
6
7
8
9
&lt;/pre&gt;

=== While loop Syntax ===
&lt;pre&gt;
intialisation

while(condition):
   Statement
   increment/decrement
&lt;/pre&gt;
e.g.
&lt;pre&gt;
#initialization
i=0
while(i&lt;10): 
    print(i)
    i=i+1
&lt;/pre&gt;
Output will be:
&lt;pre&gt;
0
1
2
3
4
5
6
7
8
9
&lt;/pre&gt;
Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNbl5jkVrrw1E5XSvm3GiCI

==Importance of Indentation in Python==
Indentation is used to indicate to what block of statements belong. Indentation of blocks convey program structure in Python. Indentation in Python is used to refer a group/block of code/statements. In C++ we use { and } (curly brackets) to group a set of statements. But in Python, there are no such brackets used. Instead of such brackets used in other programming languages, we use indentation in Python.
Use tabs,instead of spaces for ease of writing code.

Wrong indentation can lead to syntax error, or makes your output wrong for your logic e.g.
&lt;pre&gt;
#IndentationError: expected an indented block
i=-1
if i&lt;0:
print(&quot;Test successful&quot;)#Wrong indentation 
else:    
    print(&quot;Test failed&quot;)
#Output: IndentationError: expected an indented block
&lt;/pre&gt;
---
&lt;pre&gt;
#Properly Indented code:
i=-1
if i&lt;0:
    print(&quot;Test successful&quot;)#Wrong indentation
else:    
    print(&quot;Test failed&quot;)
#Output:Test successful
&lt;/pre&gt;
---
Logic changed, so output changed, with improper indentation, e.g.
---
&lt;h3&gt;Code : 1&lt;/h3&gt;
&lt;pre&gt;
sum=0
for i in range(5):
    for j in range(5):
        sum+=i
print(sum, end=&quot; &quot;)
#Output: 50
&lt;/pre&gt;
        
&lt;h3&gt;Code : 2&lt;/h3&gt;
&lt;pre&gt;
for i in range(5):
    for j in range(5):
        print(end=&quot; &quot;)
    sum+=i
print(sum, end=&quot; &quot;)
#Output:                          10
&lt;/pre&gt;
{{#ev:youtube|https://youtu.be/pmavoW419Yc|250|right}}&lt;br&gt;

==Spyder IDE Black Screen Solution==

----

 This issue is because of ''Help'' screen which is by default open. 
 We need to close it. So here's how you do it-


===Method 1:===

Step 1-    Try by closing current pane for that,  &quot;''press ctrl+shift+F4''&quot;  wait for few seconds things will appear on screen.

Step 2-    If it so than on menu bar go to ''view &gt; panes &gt; help'' unchecked &quot;''Help''&quot; option.

Step 3-    Make sure that &quot;''Help''&quot; under ''view &gt; panes'' is permanently unchecked. And ''Editor, Ipython console, Variable explorer''  are checked. 


===Method 2:===

Step 1-    Open spyder.

Step 2-   On that black screen randomly ''Left click'' on spyder &quot;''Menu bar''&quot; area you will get menu drop downs, You have to find Drop down with &quot;''Panes''&quot; option.

Step 3-   On &quot;''Panes''&quot; drop down unchecked the &quot;''Help''&quot;.

Step 4-   Wait for few seconds Spyder view will appear.

Step 5 -  Make sure that ''&quot;Help&quot;'' under view&gt;panes is permanently unchecked. And ''Editor, Ipython console, variable explorer'' are checked.
[[#Top]]</text>
      <sha1>m6ro03tdar12ky7geck1y5791dsle4t</sha1>
    </revision>
    <revision>
      <id>3344</id>
      <parentid>3343</parentid>
      <timestamp>2018-09-26T05:07:19Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* Variables */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="10626">==Introduction to Python==
Python is a widely used programming language which allows programmers to write the program in fewer lines of code. It was designed by Guido van Rossum in 1991. Python uses an interpreter instead of compiler.Basically, the main difference between compiler and interpreter is that the compiler takes the code as 'whole' and compiles it..for example in C language and on the other side in interpreter..example: languages like Python...it interprets the written code 'line by line', and if somewhere error is found...it stops interpreting the code from there itself. Here, in our course we will be using Spyder IDE. Spyder is an integrated development environment with editing options to assist the programmers in writing programs. Spyder IDE is divided into two panes, one is console and other one is where program is written.




Python works on different platforms (Windows, Mac, Linux, Raspberry Pi, etc).
Python has a simple syntax similar to the English language.
Python has syntax that allows developers to write programs with fewer lines than some other programming languages.
Python runs on an interpreter system, meaning that code can be executed as soon as it is written. This means that prototyping can be very quick.
Python can be treated in a procedural way, an object-orientated way or a functional way.

==Installing Anaconda==
[[#Top]]
This article is all about installing and troubleshooting Anaconda and Spyder on different platforms.

===Windows===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#windows Download Link]. Make sure that you download the version compatible to your operating system architecture. If you have a 64 bit OS then you can download either 64 bit of 32 bit, but if you have 32 bit OS then you should download the 32 bit version only.

Step 2 -&gt; Double click on the .exe file that you downloaded just now and follow the instructions. If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open cmd (go to Start -&gt; then type cmd in the search bar and hit enter). There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

===Mac===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#macos Download Link].

Step 2 -&gt; Double click on the .pkg file that you just downloaded. If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

===Linux===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#linux Download Link].

Step 2 -&gt; Go to the folder where you downloaded the .sh file and type following command 

  '''bash Anaconda-latest-Linux-x86_64.sh'''

If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

==Troubleshooting Spyder==

[[#Top]]

In most of the cases, it happens that Spyder is already running and you have initiated one more instance of it. Please make sure that spyder is not running already.
If you are on Linux OS, please launch spyder through terminal. Just open the terminal and type '''spyder''' and it will launch. When Spyder opens, make sure you see Anaconda with the version written on the Ipython console. If not, try changing the path of your anaconda. Follow these steps according to your OS version.

====Windows====
[https://stackoverflow.com/questions/44597662/conda-command-is-not-recognized-on-windows-10 Click Here]

====Linux====
[https://stackoverflow.com/questions/18675907/how-to-run-conda Click Here]

====Mac====
[https://stackoverflow.com/questions/35246386/conda-command-not-found Click Here]

In most of the cases relaunching Spyder works.
A more general Troubleshoot is present [https://github.com/spyder-ide/spyder/wiki/Troubleshooting-Guide-and-FAQ Here]

==How to run a program in Spyder IDE?==
Go to Run on the menu bar. Click Run-&gt;Run.

==Print statements==
Print statements help to display output on console. 
{{#ev:youtube|https://youtu.be/gECkqaOwyt0|250|right}}

===Syntax===
print()

===How to print a message?===
In order to print a message in Python, write print(&quot;message&quot;).
Single, double, triple quote can be used print()

'''Example:'''

'''Single Quote'''
print('Hello')  
Output: Hello

'''Double Quote'''
print(&quot;Hello&quot;)  
Output: Hello

'''Quote within quote'''
print('Is &quot;Ram&quot; a good boy?')  
Output: Is &quot;Ram&quot; a good boy?

==Escape sequences with strings==

We can use escape sequence within strings to make output more presentable.

'''\n'''  : It will move to next line.

'''\t'''  : It will add tab space(5space)

'''\a'''  : It will play system sound once.

'''Example:'''

Print(&quot;Hi, \n How are you?&quot;)

Output: 

Hi,

How are you?

Print(&quot;Hi, \t How are you?&quot;)

Output: 

Hi, &lt;5 spaces&gt; How are you?

[[File:Escape_Sequence.jpg]]

==Variables==
[[#Top]]

Variables are used to store some values. Values can be strings, integers or decimal values. 
{{#ev:youtube|https://youtu.be/60iAXH1sm-Y|250|right}}
===How to print a variable?===
In order to print the value of a variable in python, first initialise the variable and then write print(variable_name)
For example :
  x=2
  print(x)

===Some facts about Variables===
* If you want to print variable name with a message, you can use , operator. For example : I want to print Hello Simran and Simran has been stored in a variable called ''name''.
  name=&quot;Simran&quot;
  print(&quot;Hello&quot;,name)
* If you change the value of a variable, it will store the latest value. For example :
  name=&quot;Simran&quot;
  name=&quot;Amit&quot;
  If you will execute the command ''print(name)'', Amit will be displayed.
* You can perform operations like addition, subtraction etc only on integral variables.

==How to execute couple of instructions on console?==
You can execute couple of instructions on console using ;. Write Statement 1;Statement 2;......and then press ''Enter''.
{{#ev:youtube|https://youtu.be/CYQCYvLE22Y|250|right}}









==How to take input from the user?==
We can take input from the user using ''input'' function. For Example : You want the user to input variable ''x'', then write x=input(&quot;Enter the value of x&quot;) and execute. Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNkVLCxZw_jcgyS-bmrIVSP

And when the input you need is of data type other than string. You can do both the input function and data conversion in a single line.
For example:
Consider the program for letting in the patients
'''c=input(&quot;Enter (1/0)&quot;);d=int(c)'''

Instead of using it in two separate lines, combine it into a single line
'''c=int(input(&quot;Enter (1/0)&quot;))'''.

To get two inputs in same line with a space between them split() is used.

a,b=input(&quot;enter a&quot;).split(&quot;enter b&quot;)
----

==If statement==
If statement is used to execute set of two contrary statements based on a condition. 

===Syntax===
If (Condition):
    Statement 1
else:
    Statement 2

If 'Condition' is true then 'Statement 1' will be executed otherwise 'Statement 2' will be executed.

Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNhHmg3SkK1uiutigcAbH9K

==Loops==
[[#Top]]&lt;br&gt;
Loops in a programming languages are used to execute set of repetitive statements. For loop and while loop are used extensively to execute a set of looping instructions.

=== For loop Syntax ===
&lt;pre&gt;
for i in range(10): 
    Statement
&lt;/pre&gt;
range(10) indicate that values 0 to 9 will be assigned to the variable i and for each value of i the Statement will be executed, e.g.
&lt;pre&gt;
for i in range(10): 
    print(i)
&lt;/pre&gt;
Output will be
&lt;pre&gt;
0
1
2
3
4
5
6
7
8
9
&lt;/pre&gt;

=== While loop Syntax ===
&lt;pre&gt;
intialisation

while(condition):
   Statement
   increment/decrement
&lt;/pre&gt;
e.g.
&lt;pre&gt;
#initialization
i=0
while(i&lt;10): 
    print(i)
    i=i+1
&lt;/pre&gt;
Output will be:
&lt;pre&gt;
0
1
2
3
4
5
6
7
8
9
&lt;/pre&gt;
Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNbl5jkVrrw1E5XSvm3GiCI

==Importance of Indentation in Python==
Indentation is used to indicate to what block of statements belong. Indentation of blocks convey program structure in Python. Indentation in Python is used to refer a group/block of code/statements. In C++ we use { and } (curly brackets) to group a set of statements. But in Python, there are no such brackets used. Instead of such brackets used in other programming languages, we use indentation in Python.
Use tabs,instead of spaces for ease of writing code.

Wrong indentation can lead to syntax error, or makes your output wrong for your logic e.g.
&lt;pre&gt;
#IndentationError: expected an indented block
i=-1
if i&lt;0:
print(&quot;Test successful&quot;)#Wrong indentation 
else:    
    print(&quot;Test failed&quot;)
#Output: IndentationError: expected an indented block
&lt;/pre&gt;
---
&lt;pre&gt;
#Properly Indented code:
i=-1
if i&lt;0:
    print(&quot;Test successful&quot;)#Wrong indentation
else:    
    print(&quot;Test failed&quot;)
#Output:Test successful
&lt;/pre&gt;
---
Logic changed, so output changed, with improper indentation, e.g.
---
&lt;h3&gt;Code : 1&lt;/h3&gt;
&lt;pre&gt;
sum=0
for i in range(5):
    for j in range(5):
        sum+=i
print(sum, end=&quot; &quot;)
#Output: 50
&lt;/pre&gt;
        
&lt;h3&gt;Code : 2&lt;/h3&gt;
&lt;pre&gt;
for i in range(5):
    for j in range(5):
        print(end=&quot; &quot;)
    sum+=i
print(sum, end=&quot; &quot;)
#Output:                          10
&lt;/pre&gt;
{{#ev:youtube|https://youtu.be/pmavoW419Yc|250|right}}&lt;br&gt;

==Spyder IDE Black Screen Solution==

----

 This issue is because of ''Help'' screen which is by default open. 
 We need to close it. So here's how you do it-


===Method 1:===

Step 1-    Try by closing current pane for that,  &quot;''press ctrl+shift+F4''&quot;  wait for few seconds things will appear on screen.

Step 2-    If it so than on menu bar go to ''view &gt; panes &gt; help'' unchecked &quot;''Help''&quot; option.

Step 3-    Make sure that &quot;''Help''&quot; under ''view &gt; panes'' is permanently unchecked. And ''Editor, Ipython console, Variable explorer''  are checked. 


===Method 2:===

Step 1-    Open spyder.

Step 2-   On that black screen randomly ''Left click'' on spyder &quot;''Menu bar''&quot; area you will get menu drop downs, You have to find Drop down with &quot;''Panes''&quot; option.

Step 3-   On &quot;''Panes''&quot; drop down unchecked the &quot;''Help''&quot;.

Step 4-   Wait for few seconds Spyder view will appear.

Step 5 -  Make sure that ''&quot;Help&quot;'' under view&gt;panes is permanently unchecked. And ''Editor, Ipython console, variable explorer'' are checked.
[[#Top]]</text>
      <sha1>k5m3hr9ge3sy21shdd04ycd9a1344r2</sha1>
    </revision>
    <revision>
      <id>3345</id>
      <parentid>3344</parentid>
      <timestamp>2018-09-26T05:08:06Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* How to print a variable? */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="10651">==Introduction to Python==
Python is a widely used programming language which allows programmers to write the program in fewer lines of code. It was designed by Guido van Rossum in 1991. Python uses an interpreter instead of compiler.Basically, the main difference between compiler and interpreter is that the compiler takes the code as 'whole' and compiles it..for example in C language and on the other side in interpreter..example: languages like Python...it interprets the written code 'line by line', and if somewhere error is found...it stops interpreting the code from there itself. Here, in our course we will be using Spyder IDE. Spyder is an integrated development environment with editing options to assist the programmers in writing programs. Spyder IDE is divided into two panes, one is console and other one is where program is written.




Python works on different platforms (Windows, Mac, Linux, Raspberry Pi, etc).
Python has a simple syntax similar to the English language.
Python has syntax that allows developers to write programs with fewer lines than some other programming languages.
Python runs on an interpreter system, meaning that code can be executed as soon as it is written. This means that prototyping can be very quick.
Python can be treated in a procedural way, an object-orientated way or a functional way.

==Installing Anaconda==
[[#Top]]
This article is all about installing and troubleshooting Anaconda and Spyder on different platforms.

===Windows===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#windows Download Link]. Make sure that you download the version compatible to your operating system architecture. If you have a 64 bit OS then you can download either 64 bit of 32 bit, but if you have 32 bit OS then you should download the 32 bit version only.

Step 2 -&gt; Double click on the .exe file that you downloaded just now and follow the instructions. If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open cmd (go to Start -&gt; then type cmd in the search bar and hit enter). There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

===Mac===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#macos Download Link].

Step 2 -&gt; Double click on the .pkg file that you just downloaded. If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

===Linux===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#linux Download Link].

Step 2 -&gt; Go to the folder where you downloaded the .sh file and type following command 

  '''bash Anaconda-latest-Linux-x86_64.sh'''

If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

==Troubleshooting Spyder==

[[#Top]]

In most of the cases, it happens that Spyder is already running and you have initiated one more instance of it. Please make sure that spyder is not running already.
If you are on Linux OS, please launch spyder through terminal. Just open the terminal and type '''spyder''' and it will launch. When Spyder opens, make sure you see Anaconda with the version written on the Ipython console. If not, try changing the path of your anaconda. Follow these steps according to your OS version.

====Windows====
[https://stackoverflow.com/questions/44597662/conda-command-is-not-recognized-on-windows-10 Click Here]

====Linux====
[https://stackoverflow.com/questions/18675907/how-to-run-conda Click Here]

====Mac====
[https://stackoverflow.com/questions/35246386/conda-command-not-found Click Here]

In most of the cases relaunching Spyder works.
A more general Troubleshoot is present [https://github.com/spyder-ide/spyder/wiki/Troubleshooting-Guide-and-FAQ Here]

==How to run a program in Spyder IDE?==
Go to Run on the menu bar. Click Run-&gt;Run.

==Print statements==
Print statements help to display output on console. 
{{#ev:youtube|https://youtu.be/gECkqaOwyt0|250|right}}

===Syntax===
print()

===How to print a message?===
In order to print a message in Python, write print(&quot;message&quot;).
Single, double, triple quote can be used print()

'''Example:'''

'''Single Quote'''
print('Hello')  
Output: Hello

'''Double Quote'''
print(&quot;Hello&quot;)  
Output: Hello

'''Quote within quote'''
print('Is &quot;Ram&quot; a good boy?')  
Output: Is &quot;Ram&quot; a good boy?

==Escape sequences with strings==

We can use escape sequence within strings to make output more presentable.

'''\n'''  : It will move to next line.

'''\t'''  : It will add tab space(5space)

'''\a'''  : It will play system sound once.

'''Example:'''

Print(&quot;Hi, \n How are you?&quot;)

Output: 

Hi,

How are you?

Print(&quot;Hi, \t How are you?&quot;)

Output: 

Hi, &lt;5 spaces&gt; How are you?

[[File:Escape_Sequence.jpg]]

==Variables==
[[#Top]]

Variables are used to store some values. Values can be strings, integers or decimal values. 
{{#ev:youtube|https://youtu.be/60iAXH1sm-Y|250|right}}
===How to print a variable?===
In order to print the value of a variable in python, first initialise the variable and then write 
&lt;pre&gt;print(variable_name)&lt;/pre&gt;
For example :
&lt;pre&gt;
  x=2
  print(x)
&lt;/pre&gt;

===Some facts about Variables===
* If you want to print variable name with a message, you can use , operator. For example : I want to print Hello Simran and Simran has been stored in a variable called ''name''.
  name=&quot;Simran&quot;
  print(&quot;Hello&quot;,name)
* If you change the value of a variable, it will store the latest value. For example :
  name=&quot;Simran&quot;
  name=&quot;Amit&quot;
  If you will execute the command ''print(name)'', Amit will be displayed.
* You can perform operations like addition, subtraction etc only on integral variables.

==How to execute couple of instructions on console?==
You can execute couple of instructions on console using ;. Write Statement 1;Statement 2;......and then press ''Enter''.
{{#ev:youtube|https://youtu.be/CYQCYvLE22Y|250|right}}









==How to take input from the user?==
We can take input from the user using ''input'' function. For Example : You want the user to input variable ''x'', then write x=input(&quot;Enter the value of x&quot;) and execute. Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNkVLCxZw_jcgyS-bmrIVSP

And when the input you need is of data type other than string. You can do both the input function and data conversion in a single line.
For example:
Consider the program for letting in the patients
'''c=input(&quot;Enter (1/0)&quot;);d=int(c)'''

Instead of using it in two separate lines, combine it into a single line
'''c=int(input(&quot;Enter (1/0)&quot;))'''.

To get two inputs in same line with a space between them split() is used.

a,b=input(&quot;enter a&quot;).split(&quot;enter b&quot;)
----

==If statement==
If statement is used to execute set of two contrary statements based on a condition. 

===Syntax===
If (Condition):
    Statement 1
else:
    Statement 2

If 'Condition' is true then 'Statement 1' will be executed otherwise 'Statement 2' will be executed.

Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNhHmg3SkK1uiutigcAbH9K

==Loops==
[[#Top]]&lt;br&gt;
Loops in a programming languages are used to execute set of repetitive statements. For loop and while loop are used extensively to execute a set of looping instructions.

=== For loop Syntax ===
&lt;pre&gt;
for i in range(10): 
    Statement
&lt;/pre&gt;
range(10) indicate that values 0 to 9 will be assigned to the variable i and for each value of i the Statement will be executed, e.g.
&lt;pre&gt;
for i in range(10): 
    print(i)
&lt;/pre&gt;
Output will be
&lt;pre&gt;
0
1
2
3
4
5
6
7
8
9
&lt;/pre&gt;

=== While loop Syntax ===
&lt;pre&gt;
intialisation

while(condition):
   Statement
   increment/decrement
&lt;/pre&gt;
e.g.
&lt;pre&gt;
#initialization
i=0
while(i&lt;10): 
    print(i)
    i=i+1
&lt;/pre&gt;
Output will be:
&lt;pre&gt;
0
1
2
3
4
5
6
7
8
9
&lt;/pre&gt;
Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNbl5jkVrrw1E5XSvm3GiCI

==Importance of Indentation in Python==
Indentation is used to indicate to what block of statements belong. Indentation of blocks convey program structure in Python. Indentation in Python is used to refer a group/block of code/statements. In C++ we use { and } (curly brackets) to group a set of statements. But in Python, there are no such brackets used. Instead of such brackets used in other programming languages, we use indentation in Python.
Use tabs,instead of spaces for ease of writing code.

Wrong indentation can lead to syntax error, or makes your output wrong for your logic e.g.
&lt;pre&gt;
#IndentationError: expected an indented block
i=-1
if i&lt;0:
print(&quot;Test successful&quot;)#Wrong indentation 
else:    
    print(&quot;Test failed&quot;)
#Output: IndentationError: expected an indented block
&lt;/pre&gt;
---
&lt;pre&gt;
#Properly Indented code:
i=-1
if i&lt;0:
    print(&quot;Test successful&quot;)#Wrong indentation
else:    
    print(&quot;Test failed&quot;)
#Output:Test successful
&lt;/pre&gt;
---
Logic changed, so output changed, with improper indentation, e.g.
---
&lt;h3&gt;Code : 1&lt;/h3&gt;
&lt;pre&gt;
sum=0
for i in range(5):
    for j in range(5):
        sum+=i
print(sum, end=&quot; &quot;)
#Output: 50
&lt;/pre&gt;
        
&lt;h3&gt;Code : 2&lt;/h3&gt;
&lt;pre&gt;
for i in range(5):
    for j in range(5):
        print(end=&quot; &quot;)
    sum+=i
print(sum, end=&quot; &quot;)
#Output:                          10
&lt;/pre&gt;
{{#ev:youtube|https://youtu.be/pmavoW419Yc|250|right}}&lt;br&gt;

==Spyder IDE Black Screen Solution==

----

 This issue is because of ''Help'' screen which is by default open. 
 We need to close it. So here's how you do it-


===Method 1:===

Step 1-    Try by closing current pane for that,  &quot;''press ctrl+shift+F4''&quot;  wait for few seconds things will appear on screen.

Step 2-    If it so than on menu bar go to ''view &gt; panes &gt; help'' unchecked &quot;''Help''&quot; option.

Step 3-    Make sure that &quot;''Help''&quot; under ''view &gt; panes'' is permanently unchecked. And ''Editor, Ipython console, Variable explorer''  are checked. 


===Method 2:===

Step 1-    Open spyder.

Step 2-   On that black screen randomly ''Left click'' on spyder &quot;''Menu bar''&quot; area you will get menu drop downs, You have to find Drop down with &quot;''Panes''&quot; option.

Step 3-   On &quot;''Panes''&quot; drop down unchecked the &quot;''Help''&quot;.

Step 4-   Wait for few seconds Spyder view will appear.

Step 5 -  Make sure that ''&quot;Help&quot;'' under view&gt;panes is permanently unchecked. And ''Editor, Ipython console, variable explorer'' are checked.
[[#Top]]</text>
      <sha1>n4na9z4i1f2cx9w4p8vugqt1vz6er8a</sha1>
    </revision>
    <revision>
      <id>3346</id>
      <parentid>3345</parentid>
      <timestamp>2018-09-26T05:08:23Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* How to take input from the user? */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="10660">==Introduction to Python==
Python is a widely used programming language which allows programmers to write the program in fewer lines of code. It was designed by Guido van Rossum in 1991. Python uses an interpreter instead of compiler.Basically, the main difference between compiler and interpreter is that the compiler takes the code as 'whole' and compiles it..for example in C language and on the other side in interpreter..example: languages like Python...it interprets the written code 'line by line', and if somewhere error is found...it stops interpreting the code from there itself. Here, in our course we will be using Spyder IDE. Spyder is an integrated development environment with editing options to assist the programmers in writing programs. Spyder IDE is divided into two panes, one is console and other one is where program is written.




Python works on different platforms (Windows, Mac, Linux, Raspberry Pi, etc).
Python has a simple syntax similar to the English language.
Python has syntax that allows developers to write programs with fewer lines than some other programming languages.
Python runs on an interpreter system, meaning that code can be executed as soon as it is written. This means that prototyping can be very quick.
Python can be treated in a procedural way, an object-orientated way or a functional way.

==Installing Anaconda==
[[#Top]]
This article is all about installing and troubleshooting Anaconda and Spyder on different platforms.

===Windows===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#windows Download Link]. Make sure that you download the version compatible to your operating system architecture. If you have a 64 bit OS then you can download either 64 bit of 32 bit, but if you have 32 bit OS then you should download the 32 bit version only.

Step 2 -&gt; Double click on the .exe file that you downloaded just now and follow the instructions. If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open cmd (go to Start -&gt; then type cmd in the search bar and hit enter). There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

===Mac===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#macos Download Link].

Step 2 -&gt; Double click on the .pkg file that you just downloaded. If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

===Linux===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#linux Download Link].

Step 2 -&gt; Go to the folder where you downloaded the .sh file and type following command 

  '''bash Anaconda-latest-Linux-x86_64.sh'''

If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

==Troubleshooting Spyder==

[[#Top]]

In most of the cases, it happens that Spyder is already running and you have initiated one more instance of it. Please make sure that spyder is not running already.
If you are on Linux OS, please launch spyder through terminal. Just open the terminal and type '''spyder''' and it will launch. When Spyder opens, make sure you see Anaconda with the version written on the Ipython console. If not, try changing the path of your anaconda. Follow these steps according to your OS version.

====Windows====
[https://stackoverflow.com/questions/44597662/conda-command-is-not-recognized-on-windows-10 Click Here]

====Linux====
[https://stackoverflow.com/questions/18675907/how-to-run-conda Click Here]

====Mac====
[https://stackoverflow.com/questions/35246386/conda-command-not-found Click Here]

In most of the cases relaunching Spyder works.
A more general Troubleshoot is present [https://github.com/spyder-ide/spyder/wiki/Troubleshooting-Guide-and-FAQ Here]

==How to run a program in Spyder IDE?==
Go to Run on the menu bar. Click Run-&gt;Run.

==Print statements==
Print statements help to display output on console. 
{{#ev:youtube|https://youtu.be/gECkqaOwyt0|250|right}}

===Syntax===
print()

===How to print a message?===
In order to print a message in Python, write print(&quot;message&quot;).
Single, double, triple quote can be used print()

'''Example:'''

'''Single Quote'''
print('Hello')  
Output: Hello

'''Double Quote'''
print(&quot;Hello&quot;)  
Output: Hello

'''Quote within quote'''
print('Is &quot;Ram&quot; a good boy?')  
Output: Is &quot;Ram&quot; a good boy?

==Escape sequences with strings==

We can use escape sequence within strings to make output more presentable.

'''\n'''  : It will move to next line.

'''\t'''  : It will add tab space(5space)

'''\a'''  : It will play system sound once.

'''Example:'''

Print(&quot;Hi, \n How are you?&quot;)

Output: 

Hi,

How are you?

Print(&quot;Hi, \t How are you?&quot;)

Output: 

Hi, &lt;5 spaces&gt; How are you?

[[File:Escape_Sequence.jpg]]

==Variables==
[[#Top]]

Variables are used to store some values. Values can be strings, integers or decimal values. 
{{#ev:youtube|https://youtu.be/60iAXH1sm-Y|250|right}}
===How to print a variable?===
In order to print the value of a variable in python, first initialise the variable and then write 
&lt;pre&gt;print(variable_name)&lt;/pre&gt;
For example :
&lt;pre&gt;
  x=2
  print(x)
&lt;/pre&gt;

===Some facts about Variables===
* If you want to print variable name with a message, you can use , operator. For example : I want to print Hello Simran and Simran has been stored in a variable called ''name''.
  name=&quot;Simran&quot;
  print(&quot;Hello&quot;,name)
* If you change the value of a variable, it will store the latest value. For example :
  name=&quot;Simran&quot;
  name=&quot;Amit&quot;
  If you will execute the command ''print(name)'', Amit will be displayed.
* You can perform operations like addition, subtraction etc only on integral variables.

==How to execute couple of instructions on console?==
You can execute couple of instructions on console using ;. Write Statement 1;Statement 2;......and then press ''Enter''.
{{#ev:youtube|https://youtu.be/CYQCYvLE22Y|250|right}}









==How to take input from the user?==
We can take input from the user using ''input'' function. For Example : You want the user to input variable ''x'', then write x=input(&quot;Enter the value of x&quot;) and execute. Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNkVLCxZw_jcgyS-bmrIVSP

And when the input you need is of data type other than string. You can do both the input function and data conversion in a single line.
For example:
Consider the program for letting in the patients
'''c=input(&quot;Enter (1/0)&quot;);d=int(c)'''

Instead of using it in two separate lines, combine it into a single line
'''c=int(input(&quot;Enter (1/0)&quot;))'''.

To get two inputs in same line with a space between them split() is used.

a,b=input(&quot;enter a&quot;).split(&quot;enter b&quot;)
----
[[#Top]]

==If statement==
If statement is used to execute set of two contrary statements based on a condition. 

===Syntax===
If (Condition):
    Statement 1
else:
    Statement 2

If 'Condition' is true then 'Statement 1' will be executed otherwise 'Statement 2' will be executed.

Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNhHmg3SkK1uiutigcAbH9K

==Loops==
[[#Top]]&lt;br&gt;
Loops in a programming languages are used to execute set of repetitive statements. For loop and while loop are used extensively to execute a set of looping instructions.

=== For loop Syntax ===
&lt;pre&gt;
for i in range(10): 
    Statement
&lt;/pre&gt;
range(10) indicate that values 0 to 9 will be assigned to the variable i and for each value of i the Statement will be executed, e.g.
&lt;pre&gt;
for i in range(10): 
    print(i)
&lt;/pre&gt;
Output will be
&lt;pre&gt;
0
1
2
3
4
5
6
7
8
9
&lt;/pre&gt;

=== While loop Syntax ===
&lt;pre&gt;
intialisation

while(condition):
   Statement
   increment/decrement
&lt;/pre&gt;
e.g.
&lt;pre&gt;
#initialization
i=0
while(i&lt;10): 
    print(i)
    i=i+1
&lt;/pre&gt;
Output will be:
&lt;pre&gt;
0
1
2
3
4
5
6
7
8
9
&lt;/pre&gt;
Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNbl5jkVrrw1E5XSvm3GiCI

==Importance of Indentation in Python==
Indentation is used to indicate to what block of statements belong. Indentation of blocks convey program structure in Python. Indentation in Python is used to refer a group/block of code/statements. In C++ we use { and } (curly brackets) to group a set of statements. But in Python, there are no such brackets used. Instead of such brackets used in other programming languages, we use indentation in Python.
Use tabs,instead of spaces for ease of writing code.

Wrong indentation can lead to syntax error, or makes your output wrong for your logic e.g.
&lt;pre&gt;
#IndentationError: expected an indented block
i=-1
if i&lt;0:
print(&quot;Test successful&quot;)#Wrong indentation 
else:    
    print(&quot;Test failed&quot;)
#Output: IndentationError: expected an indented block
&lt;/pre&gt;
---
&lt;pre&gt;
#Properly Indented code:
i=-1
if i&lt;0:
    print(&quot;Test successful&quot;)#Wrong indentation
else:    
    print(&quot;Test failed&quot;)
#Output:Test successful
&lt;/pre&gt;
---
Logic changed, so output changed, with improper indentation, e.g.
---
&lt;h3&gt;Code : 1&lt;/h3&gt;
&lt;pre&gt;
sum=0
for i in range(5):
    for j in range(5):
        sum+=i
print(sum, end=&quot; &quot;)
#Output: 50
&lt;/pre&gt;
        
&lt;h3&gt;Code : 2&lt;/h3&gt;
&lt;pre&gt;
for i in range(5):
    for j in range(5):
        print(end=&quot; &quot;)
    sum+=i
print(sum, end=&quot; &quot;)
#Output:                          10
&lt;/pre&gt;
{{#ev:youtube|https://youtu.be/pmavoW419Yc|250|right}}&lt;br&gt;

==Spyder IDE Black Screen Solution==

----

 This issue is because of ''Help'' screen which is by default open. 
 We need to close it. So here's how you do it-


===Method 1:===

Step 1-    Try by closing current pane for that,  &quot;''press ctrl+shift+F4''&quot;  wait for few seconds things will appear on screen.

Step 2-    If it so than on menu bar go to ''view &gt; panes &gt; help'' unchecked &quot;''Help''&quot; option.

Step 3-    Make sure that &quot;''Help''&quot; under ''view &gt; panes'' is permanently unchecked. And ''Editor, Ipython console, Variable explorer''  are checked. 


===Method 2:===

Step 1-    Open spyder.

Step 2-   On that black screen randomly ''Left click'' on spyder &quot;''Menu bar''&quot; area you will get menu drop downs, You have to find Drop down with &quot;''Panes''&quot; option.

Step 3-   On &quot;''Panes''&quot; drop down unchecked the &quot;''Help''&quot;.

Step 4-   Wait for few seconds Spyder view will appear.

Step 5 -  Make sure that ''&quot;Help&quot;'' under view&gt;panes is permanently unchecked. And ''Editor, Ipython console, variable explorer'' are checked.
[[#Top]]</text>
      <sha1>0rukhn1ftax7x7ejgp3n1ocwsn2k0md</sha1>
    </revision>
    <revision>
      <id>3347</id>
      <parentid>3346</parentid>
      <timestamp>2018-09-26T05:08:45Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* Loops */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="10670">==Introduction to Python==
Python is a widely used programming language which allows programmers to write the program in fewer lines of code. It was designed by Guido van Rossum in 1991. Python uses an interpreter instead of compiler.Basically, the main difference between compiler and interpreter is that the compiler takes the code as 'whole' and compiles it..for example in C language and on the other side in interpreter..example: languages like Python...it interprets the written code 'line by line', and if somewhere error is found...it stops interpreting the code from there itself. Here, in our course we will be using Spyder IDE. Spyder is an integrated development environment with editing options to assist the programmers in writing programs. Spyder IDE is divided into two panes, one is console and other one is where program is written.




Python works on different platforms (Windows, Mac, Linux, Raspberry Pi, etc).
Python has a simple syntax similar to the English language.
Python has syntax that allows developers to write programs with fewer lines than some other programming languages.
Python runs on an interpreter system, meaning that code can be executed as soon as it is written. This means that prototyping can be very quick.
Python can be treated in a procedural way, an object-orientated way or a functional way.

==Installing Anaconda==
[[#Top]]
This article is all about installing and troubleshooting Anaconda and Spyder on different platforms.

===Windows===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#windows Download Link]. Make sure that you download the version compatible to your operating system architecture. If you have a 64 bit OS then you can download either 64 bit of 32 bit, but if you have 32 bit OS then you should download the 32 bit version only.

Step 2 -&gt; Double click on the .exe file that you downloaded just now and follow the instructions. If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open cmd (go to Start -&gt; then type cmd in the search bar and hit enter). There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

===Mac===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#macos Download Link].

Step 2 -&gt; Double click on the .pkg file that you just downloaded. If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

===Linux===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#linux Download Link].

Step 2 -&gt; Go to the folder where you downloaded the .sh file and type following command 

  '''bash Anaconda-latest-Linux-x86_64.sh'''

If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

==Troubleshooting Spyder==

[[#Top]]

In most of the cases, it happens that Spyder is already running and you have initiated one more instance of it. Please make sure that spyder is not running already.
If you are on Linux OS, please launch spyder through terminal. Just open the terminal and type '''spyder''' and it will launch. When Spyder opens, make sure you see Anaconda with the version written on the Ipython console. If not, try changing the path of your anaconda. Follow these steps according to your OS version.

====Windows====
[https://stackoverflow.com/questions/44597662/conda-command-is-not-recognized-on-windows-10 Click Here]

====Linux====
[https://stackoverflow.com/questions/18675907/how-to-run-conda Click Here]

====Mac====
[https://stackoverflow.com/questions/35246386/conda-command-not-found Click Here]

In most of the cases relaunching Spyder works.
A more general Troubleshoot is present [https://github.com/spyder-ide/spyder/wiki/Troubleshooting-Guide-and-FAQ Here]

==How to run a program in Spyder IDE?==
Go to Run on the menu bar. Click Run-&gt;Run.

==Print statements==
Print statements help to display output on console. 
{{#ev:youtube|https://youtu.be/gECkqaOwyt0|250|right}}

===Syntax===
print()

===How to print a message?===
In order to print a message in Python, write print(&quot;message&quot;).
Single, double, triple quote can be used print()

'''Example:'''

'''Single Quote'''
print('Hello')  
Output: Hello

'''Double Quote'''
print(&quot;Hello&quot;)  
Output: Hello

'''Quote within quote'''
print('Is &quot;Ram&quot; a good boy?')  
Output: Is &quot;Ram&quot; a good boy?

==Escape sequences with strings==

We can use escape sequence within strings to make output more presentable.

'''\n'''  : It will move to next line.

'''\t'''  : It will add tab space(5space)

'''\a'''  : It will play system sound once.

'''Example:'''

Print(&quot;Hi, \n How are you?&quot;)

Output: 

Hi,

How are you?

Print(&quot;Hi, \t How are you?&quot;)

Output: 

Hi, &lt;5 spaces&gt; How are you?

[[File:Escape_Sequence.jpg]]

==Variables==
[[#Top]]

Variables are used to store some values. Values can be strings, integers or decimal values. 
{{#ev:youtube|https://youtu.be/60iAXH1sm-Y|250|right}}
===How to print a variable?===
In order to print the value of a variable in python, first initialise the variable and then write 
&lt;pre&gt;print(variable_name)&lt;/pre&gt;
For example :
&lt;pre&gt;
  x=2
  print(x)
&lt;/pre&gt;

===Some facts about Variables===
* If you want to print variable name with a message, you can use , operator. For example : I want to print Hello Simran and Simran has been stored in a variable called ''name''.
  name=&quot;Simran&quot;
  print(&quot;Hello&quot;,name)
* If you change the value of a variable, it will store the latest value. For example :
  name=&quot;Simran&quot;
  name=&quot;Amit&quot;
  If you will execute the command ''print(name)'', Amit will be displayed.
* You can perform operations like addition, subtraction etc only on integral variables.

==How to execute couple of instructions on console?==
You can execute couple of instructions on console using ;. Write Statement 1;Statement 2;......and then press ''Enter''.
{{#ev:youtube|https://youtu.be/CYQCYvLE22Y|250|right}}









==How to take input from the user?==
We can take input from the user using ''input'' function. For Example : You want the user to input variable ''x'', then write x=input(&quot;Enter the value of x&quot;) and execute. Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNkVLCxZw_jcgyS-bmrIVSP

And when the input you need is of data type other than string. You can do both the input function and data conversion in a single line.
For example:
Consider the program for letting in the patients
'''c=input(&quot;Enter (1/0)&quot;);d=int(c)'''

Instead of using it in two separate lines, combine it into a single line
'''c=int(input(&quot;Enter (1/0)&quot;))'''.

To get two inputs in same line with a space between them split() is used.

a,b=input(&quot;enter a&quot;).split(&quot;enter b&quot;)
----
[[#Top]]

==If statement==
If statement is used to execute set of two contrary statements based on a condition. 

===Syntax===
If (Condition):
    Statement 1
else:
    Statement 2

If 'Condition' is true then 'Statement 1' will be executed otherwise 'Statement 2' will be executed.

Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNhHmg3SkK1uiutigcAbH9K

==Loops==
[[#Top]]&lt;br&gt;
Loops in a programming languages are used to execute set of repetitive statements. For loop and while loop are used extensively to execute a set of looping instructions.

=== For loop Syntax ===
&lt;pre&gt;
for i in range(10): 
    Statement
&lt;/pre&gt;
range(10) indicate that values 0 to 9 will be assigned to the variable i and for each value of i the Statement will be executed, e.g.
&lt;pre&gt;
for i in range(10): 
    print(i)
&lt;/pre&gt;
Output will be
&lt;pre&gt;
0
1
2
3
4
5
6
7
8
9
&lt;/pre&gt;

[[#Top]]

=== While loop Syntax ===
&lt;pre&gt;
intialisation

while(condition):
   Statement
   increment/decrement
&lt;/pre&gt;
e.g.
&lt;pre&gt;
#initialization
i=0
while(i&lt;10): 
    print(i)
    i=i+1
&lt;/pre&gt;
Output will be:
&lt;pre&gt;
0
1
2
3
4
5
6
7
8
9
&lt;/pre&gt;
Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNbl5jkVrrw1E5XSvm3GiCI

==Importance of Indentation in Python==
Indentation is used to indicate to what block of statements belong. Indentation of blocks convey program structure in Python. Indentation in Python is used to refer a group/block of code/statements. In C++ we use { and } (curly brackets) to group a set of statements. But in Python, there are no such brackets used. Instead of such brackets used in other programming languages, we use indentation in Python.
Use tabs,instead of spaces for ease of writing code.

Wrong indentation can lead to syntax error, or makes your output wrong for your logic e.g.
&lt;pre&gt;
#IndentationError: expected an indented block
i=-1
if i&lt;0:
print(&quot;Test successful&quot;)#Wrong indentation 
else:    
    print(&quot;Test failed&quot;)
#Output: IndentationError: expected an indented block
&lt;/pre&gt;
---
&lt;pre&gt;
#Properly Indented code:
i=-1
if i&lt;0:
    print(&quot;Test successful&quot;)#Wrong indentation
else:    
    print(&quot;Test failed&quot;)
#Output:Test successful
&lt;/pre&gt;
---
Logic changed, so output changed, with improper indentation, e.g.
---
&lt;h3&gt;Code : 1&lt;/h3&gt;
&lt;pre&gt;
sum=0
for i in range(5):
    for j in range(5):
        sum+=i
print(sum, end=&quot; &quot;)
#Output: 50
&lt;/pre&gt;
        
&lt;h3&gt;Code : 2&lt;/h3&gt;
&lt;pre&gt;
for i in range(5):
    for j in range(5):
        print(end=&quot; &quot;)
    sum+=i
print(sum, end=&quot; &quot;)
#Output:                          10
&lt;/pre&gt;
{{#ev:youtube|https://youtu.be/pmavoW419Yc|250|right}}&lt;br&gt;

==Spyder IDE Black Screen Solution==

----

 This issue is because of ''Help'' screen which is by default open. 
 We need to close it. So here's how you do it-


===Method 1:===

Step 1-    Try by closing current pane for that,  &quot;''press ctrl+shift+F4''&quot;  wait for few seconds things will appear on screen.

Step 2-    If it so than on menu bar go to ''view &gt; panes &gt; help'' unchecked &quot;''Help''&quot; option.

Step 3-    Make sure that &quot;''Help''&quot; under ''view &gt; panes'' is permanently unchecked. And ''Editor, Ipython console, Variable explorer''  are checked. 


===Method 2:===

Step 1-    Open spyder.

Step 2-   On that black screen randomly ''Left click'' on spyder &quot;''Menu bar''&quot; area you will get menu drop downs, You have to find Drop down with &quot;''Panes''&quot; option.

Step 3-   On &quot;''Panes''&quot; drop down unchecked the &quot;''Help''&quot;.

Step 4-   Wait for few seconds Spyder view will appear.

Step 5 -  Make sure that ''&quot;Help&quot;'' under view&gt;panes is permanently unchecked. And ''Editor, Ipython console, variable explorer'' are checked.
[[#Top]]</text>
      <sha1>05erh7zw56g9mkwfe85dwcvo551w06g</sha1>
    </revision>
    <revision>
      <id>3348</id>
      <parentid>3347</parentid>
      <timestamp>2018-09-26T05:09:21Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* Importance of Indentation in Python */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="10680">==Introduction to Python==
Python is a widely used programming language which allows programmers to write the program in fewer lines of code. It was designed by Guido van Rossum in 1991. Python uses an interpreter instead of compiler.Basically, the main difference between compiler and interpreter is that the compiler takes the code as 'whole' and compiles it..for example in C language and on the other side in interpreter..example: languages like Python...it interprets the written code 'line by line', and if somewhere error is found...it stops interpreting the code from there itself. Here, in our course we will be using Spyder IDE. Spyder is an integrated development environment with editing options to assist the programmers in writing programs. Spyder IDE is divided into two panes, one is console and other one is where program is written.




Python works on different platforms (Windows, Mac, Linux, Raspberry Pi, etc).
Python has a simple syntax similar to the English language.
Python has syntax that allows developers to write programs with fewer lines than some other programming languages.
Python runs on an interpreter system, meaning that code can be executed as soon as it is written. This means that prototyping can be very quick.
Python can be treated in a procedural way, an object-orientated way or a functional way.

==Installing Anaconda==
[[#Top]]
This article is all about installing and troubleshooting Anaconda and Spyder on different platforms.

===Windows===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#windows Download Link]. Make sure that you download the version compatible to your operating system architecture. If you have a 64 bit OS then you can download either 64 bit of 32 bit, but if you have 32 bit OS then you should download the 32 bit version only.

Step 2 -&gt; Double click on the .exe file that you downloaded just now and follow the instructions. If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open cmd (go to Start -&gt; then type cmd in the search bar and hit enter). There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

===Mac===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#macos Download Link].

Step 2 -&gt; Double click on the .pkg file that you just downloaded. If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

===Linux===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#linux Download Link].

Step 2 -&gt; Go to the folder where you downloaded the .sh file and type following command 

  '''bash Anaconda-latest-Linux-x86_64.sh'''

If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

==Troubleshooting Spyder==

[[#Top]]

In most of the cases, it happens that Spyder is already running and you have initiated one more instance of it. Please make sure that spyder is not running already.
If you are on Linux OS, please launch spyder through terminal. Just open the terminal and type '''spyder''' and it will launch. When Spyder opens, make sure you see Anaconda with the version written on the Ipython console. If not, try changing the path of your anaconda. Follow these steps according to your OS version.

====Windows====
[https://stackoverflow.com/questions/44597662/conda-command-is-not-recognized-on-windows-10 Click Here]

====Linux====
[https://stackoverflow.com/questions/18675907/how-to-run-conda Click Here]

====Mac====
[https://stackoverflow.com/questions/35246386/conda-command-not-found Click Here]

In most of the cases relaunching Spyder works.
A more general Troubleshoot is present [https://github.com/spyder-ide/spyder/wiki/Troubleshooting-Guide-and-FAQ Here]

==How to run a program in Spyder IDE?==
Go to Run on the menu bar. Click Run-&gt;Run.

==Print statements==
Print statements help to display output on console. 
{{#ev:youtube|https://youtu.be/gECkqaOwyt0|250|right}}

===Syntax===
print()

===How to print a message?===
In order to print a message in Python, write print(&quot;message&quot;).
Single, double, triple quote can be used print()

'''Example:'''

'''Single Quote'''
print('Hello')  
Output: Hello

'''Double Quote'''
print(&quot;Hello&quot;)  
Output: Hello

'''Quote within quote'''
print('Is &quot;Ram&quot; a good boy?')  
Output: Is &quot;Ram&quot; a good boy?

==Escape sequences with strings==

We can use escape sequence within strings to make output more presentable.

'''\n'''  : It will move to next line.

'''\t'''  : It will add tab space(5space)

'''\a'''  : It will play system sound once.

'''Example:'''

Print(&quot;Hi, \n How are you?&quot;)

Output: 

Hi,

How are you?

Print(&quot;Hi, \t How are you?&quot;)

Output: 

Hi, &lt;5 spaces&gt; How are you?

[[File:Escape_Sequence.jpg]]

==Variables==
[[#Top]]

Variables are used to store some values. Values can be strings, integers or decimal values. 
{{#ev:youtube|https://youtu.be/60iAXH1sm-Y|250|right}}
===How to print a variable?===
In order to print the value of a variable in python, first initialise the variable and then write 
&lt;pre&gt;print(variable_name)&lt;/pre&gt;
For example :
&lt;pre&gt;
  x=2
  print(x)
&lt;/pre&gt;

===Some facts about Variables===
* If you want to print variable name with a message, you can use , operator. For example : I want to print Hello Simran and Simran has been stored in a variable called ''name''.
  name=&quot;Simran&quot;
  print(&quot;Hello&quot;,name)
* If you change the value of a variable, it will store the latest value. For example :
  name=&quot;Simran&quot;
  name=&quot;Amit&quot;
  If you will execute the command ''print(name)'', Amit will be displayed.
* You can perform operations like addition, subtraction etc only on integral variables.

==How to execute couple of instructions on console?==
You can execute couple of instructions on console using ;. Write Statement 1;Statement 2;......and then press ''Enter''.
{{#ev:youtube|https://youtu.be/CYQCYvLE22Y|250|right}}









==How to take input from the user?==
We can take input from the user using ''input'' function. For Example : You want the user to input variable ''x'', then write x=input(&quot;Enter the value of x&quot;) and execute. Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNkVLCxZw_jcgyS-bmrIVSP

And when the input you need is of data type other than string. You can do both the input function and data conversion in a single line.
For example:
Consider the program for letting in the patients
'''c=input(&quot;Enter (1/0)&quot;);d=int(c)'''

Instead of using it in two separate lines, combine it into a single line
'''c=int(input(&quot;Enter (1/0)&quot;))'''.

To get two inputs in same line with a space between them split() is used.

a,b=input(&quot;enter a&quot;).split(&quot;enter b&quot;)
----
[[#Top]]

==If statement==
If statement is used to execute set of two contrary statements based on a condition. 

===Syntax===
If (Condition):
    Statement 1
else:
    Statement 2

If 'Condition' is true then 'Statement 1' will be executed otherwise 'Statement 2' will be executed.

Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNhHmg3SkK1uiutigcAbH9K

==Loops==
[[#Top]]&lt;br&gt;
Loops in a programming languages are used to execute set of repetitive statements. For loop and while loop are used extensively to execute a set of looping instructions.

=== For loop Syntax ===
&lt;pre&gt;
for i in range(10): 
    Statement
&lt;/pre&gt;
range(10) indicate that values 0 to 9 will be assigned to the variable i and for each value of i the Statement will be executed, e.g.
&lt;pre&gt;
for i in range(10): 
    print(i)
&lt;/pre&gt;
Output will be
&lt;pre&gt;
0
1
2
3
4
5
6
7
8
9
&lt;/pre&gt;

[[#Top]]

=== While loop Syntax ===
&lt;pre&gt;
intialisation

while(condition):
   Statement
   increment/decrement
&lt;/pre&gt;
e.g.
&lt;pre&gt;
#initialization
i=0
while(i&lt;10): 
    print(i)
    i=i+1
&lt;/pre&gt;
Output will be:
&lt;pre&gt;
0
1
2
3
4
5
6
7
8
9
&lt;/pre&gt;
Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNbl5jkVrrw1E5XSvm3GiCI

==Importance of Indentation in Python==
Indentation is used to indicate to what block of statements belong. Indentation of blocks convey program structure in Python. Indentation in Python is used to refer a group/block of code/statements. In C++ we use { and } (curly brackets) to group a set of statements. But in Python, there are no such brackets used. Instead of such brackets used in other programming languages, we use indentation in Python.
Use tabs,instead of spaces for ease of writing code.

Wrong indentation can lead to syntax error, or makes your output wrong for your logic e.g.
&lt;pre&gt;
#IndentationError: expected an indented block
i=-1
if i&lt;0:
print(&quot;Test successful&quot;)#Wrong indentation 
else:    
    print(&quot;Test failed&quot;)
#Output: IndentationError: expected an indented block
&lt;/pre&gt;
---
&lt;pre&gt;
#Properly Indented code:
i=-1
if i&lt;0:
    print(&quot;Test successful&quot;)#Wrong indentation
else:    
    print(&quot;Test failed&quot;)
#Output:Test successful
&lt;/pre&gt;
---
Logic changed, so output changed, with improper indentation, e.g.
---
&lt;h3&gt;Code : 1&lt;/h3&gt;
&lt;pre&gt;
sum=0
for i in range(5):
    for j in range(5):
        sum+=i
print(sum, end=&quot; &quot;)
#Output: 50
&lt;/pre&gt;
        
&lt;h3&gt;Code : 2&lt;/h3&gt;
&lt;pre&gt;
for i in range(5):
    for j in range(5):
        print(end=&quot; &quot;)
    sum+=i
print(sum, end=&quot; &quot;)
#Output:                          10
&lt;/pre&gt;
{{#ev:youtube|https://youtu.be/pmavoW419Yc|250|right}}&lt;br&gt;

[[#Top]]

==Spyder IDE Black Screen Solution==

----

 This issue is because of ''Help'' screen which is by default open. 
 We need to close it. So here's how you do it-


===Method 1:===

Step 1-    Try by closing current pane for that,  &quot;''press ctrl+shift+F4''&quot;  wait for few seconds things will appear on screen.

Step 2-    If it so than on menu bar go to ''view &gt; panes &gt; help'' unchecked &quot;''Help''&quot; option.

Step 3-    Make sure that &quot;''Help''&quot; under ''view &gt; panes'' is permanently unchecked. And ''Editor, Ipython console, Variable explorer''  are checked. 


===Method 2:===

Step 1-    Open spyder.

Step 2-   On that black screen randomly ''Left click'' on spyder &quot;''Menu bar''&quot; area you will get menu drop downs, You have to find Drop down with &quot;''Panes''&quot; option.

Step 3-   On &quot;''Panes''&quot; drop down unchecked the &quot;''Help''&quot;.

Step 4-   Wait for few seconds Spyder view will appear.

Step 5 -  Make sure that ''&quot;Help&quot;'' under view&gt;panes is permanently unchecked. And ''Editor, Ipython console, variable explorer'' are checked.
[[#Top]]</text>
      <sha1>9trzbcek9gjfeqcvx7qfk4eifce4vue</sha1>
    </revision>
    <revision>
      <id>3349</id>
      <parentid>3348</parentid>
      <timestamp>2018-09-26T05:09:39Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* Method 2: */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="10682">==Introduction to Python==
Python is a widely used programming language which allows programmers to write the program in fewer lines of code. It was designed by Guido van Rossum in 1991. Python uses an interpreter instead of compiler.Basically, the main difference between compiler and interpreter is that the compiler takes the code as 'whole' and compiles it..for example in C language and on the other side in interpreter..example: languages like Python...it interprets the written code 'line by line', and if somewhere error is found...it stops interpreting the code from there itself. Here, in our course we will be using Spyder IDE. Spyder is an integrated development environment with editing options to assist the programmers in writing programs. Spyder IDE is divided into two panes, one is console and other one is where program is written.




Python works on different platforms (Windows, Mac, Linux, Raspberry Pi, etc).
Python has a simple syntax similar to the English language.
Python has syntax that allows developers to write programs with fewer lines than some other programming languages.
Python runs on an interpreter system, meaning that code can be executed as soon as it is written. This means that prototyping can be very quick.
Python can be treated in a procedural way, an object-orientated way or a functional way.

==Installing Anaconda==
[[#Top]]
This article is all about installing and troubleshooting Anaconda and Spyder on different platforms.

===Windows===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#windows Download Link]. Make sure that you download the version compatible to your operating system architecture. If you have a 64 bit OS then you can download either 64 bit of 32 bit, but if you have 32 bit OS then you should download the 32 bit version only.

Step 2 -&gt; Double click on the .exe file that you downloaded just now and follow the instructions. If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open cmd (go to Start -&gt; then type cmd in the search bar and hit enter). There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

===Mac===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#macos Download Link].

Step 2 -&gt; Double click on the .pkg file that you just downloaded. If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

===Linux===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#linux Download Link].

Step 2 -&gt; Go to the folder where you downloaded the .sh file and type following command 

  '''bash Anaconda-latest-Linux-x86_64.sh'''

If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

==Troubleshooting Spyder==

[[#Top]]

In most of the cases, it happens that Spyder is already running and you have initiated one more instance of it. Please make sure that spyder is not running already.
If you are on Linux OS, please launch spyder through terminal. Just open the terminal and type '''spyder''' and it will launch. When Spyder opens, make sure you see Anaconda with the version written on the Ipython console. If not, try changing the path of your anaconda. Follow these steps according to your OS version.

====Windows====
[https://stackoverflow.com/questions/44597662/conda-command-is-not-recognized-on-windows-10 Click Here]

====Linux====
[https://stackoverflow.com/questions/18675907/how-to-run-conda Click Here]

====Mac====
[https://stackoverflow.com/questions/35246386/conda-command-not-found Click Here]

In most of the cases relaunching Spyder works.
A more general Troubleshoot is present [https://github.com/spyder-ide/spyder/wiki/Troubleshooting-Guide-and-FAQ Here]

==How to run a program in Spyder IDE?==
Go to Run on the menu bar. Click Run-&gt;Run.

==Print statements==
Print statements help to display output on console. 
{{#ev:youtube|https://youtu.be/gECkqaOwyt0|250|right}}

===Syntax===
print()

===How to print a message?===
In order to print a message in Python, write print(&quot;message&quot;).
Single, double, triple quote can be used print()

'''Example:'''

'''Single Quote'''
print('Hello')  
Output: Hello

'''Double Quote'''
print(&quot;Hello&quot;)  
Output: Hello

'''Quote within quote'''
print('Is &quot;Ram&quot; a good boy?')  
Output: Is &quot;Ram&quot; a good boy?

==Escape sequences with strings==

We can use escape sequence within strings to make output more presentable.

'''\n'''  : It will move to next line.

'''\t'''  : It will add tab space(5space)

'''\a'''  : It will play system sound once.

'''Example:'''

Print(&quot;Hi, \n How are you?&quot;)

Output: 

Hi,

How are you?

Print(&quot;Hi, \t How are you?&quot;)

Output: 

Hi, &lt;5 spaces&gt; How are you?

[[File:Escape_Sequence.jpg]]

==Variables==
[[#Top]]

Variables are used to store some values. Values can be strings, integers or decimal values. 
{{#ev:youtube|https://youtu.be/60iAXH1sm-Y|250|right}}
===How to print a variable?===
In order to print the value of a variable in python, first initialise the variable and then write 
&lt;pre&gt;print(variable_name)&lt;/pre&gt;
For example :
&lt;pre&gt;
  x=2
  print(x)
&lt;/pre&gt;

===Some facts about Variables===
* If you want to print variable name with a message, you can use , operator. For example : I want to print Hello Simran and Simran has been stored in a variable called ''name''.
  name=&quot;Simran&quot;
  print(&quot;Hello&quot;,name)
* If you change the value of a variable, it will store the latest value. For example :
  name=&quot;Simran&quot;
  name=&quot;Amit&quot;
  If you will execute the command ''print(name)'', Amit will be displayed.
* You can perform operations like addition, subtraction etc only on integral variables.

==How to execute couple of instructions on console?==
You can execute couple of instructions on console using ;. Write Statement 1;Statement 2;......and then press ''Enter''.
{{#ev:youtube|https://youtu.be/CYQCYvLE22Y|250|right}}









==How to take input from the user?==
We can take input from the user using ''input'' function. For Example : You want the user to input variable ''x'', then write x=input(&quot;Enter the value of x&quot;) and execute. Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNkVLCxZw_jcgyS-bmrIVSP

And when the input you need is of data type other than string. You can do both the input function and data conversion in a single line.
For example:
Consider the program for letting in the patients
'''c=input(&quot;Enter (1/0)&quot;);d=int(c)'''

Instead of using it in two separate lines, combine it into a single line
'''c=int(input(&quot;Enter (1/0)&quot;))'''.

To get two inputs in same line with a space between them split() is used.

a,b=input(&quot;enter a&quot;).split(&quot;enter b&quot;)
----
[[#Top]]

==If statement==
If statement is used to execute set of two contrary statements based on a condition. 

===Syntax===
If (Condition):
    Statement 1
else:
    Statement 2

If 'Condition' is true then 'Statement 1' will be executed otherwise 'Statement 2' will be executed.

Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNhHmg3SkK1uiutigcAbH9K

==Loops==
[[#Top]]&lt;br&gt;
Loops in a programming languages are used to execute set of repetitive statements. For loop and while loop are used extensively to execute a set of looping instructions.

=== For loop Syntax ===
&lt;pre&gt;
for i in range(10): 
    Statement
&lt;/pre&gt;
range(10) indicate that values 0 to 9 will be assigned to the variable i and for each value of i the Statement will be executed, e.g.
&lt;pre&gt;
for i in range(10): 
    print(i)
&lt;/pre&gt;
Output will be
&lt;pre&gt;
0
1
2
3
4
5
6
7
8
9
&lt;/pre&gt;

[[#Top]]

=== While loop Syntax ===
&lt;pre&gt;
intialisation

while(condition):
   Statement
   increment/decrement
&lt;/pre&gt;
e.g.
&lt;pre&gt;
#initialization
i=0
while(i&lt;10): 
    print(i)
    i=i+1
&lt;/pre&gt;
Output will be:
&lt;pre&gt;
0
1
2
3
4
5
6
7
8
9
&lt;/pre&gt;
Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNbl5jkVrrw1E5XSvm3GiCI

==Importance of Indentation in Python==
Indentation is used to indicate to what block of statements belong. Indentation of blocks convey program structure in Python. Indentation in Python is used to refer a group/block of code/statements. In C++ we use { and } (curly brackets) to group a set of statements. But in Python, there are no such brackets used. Instead of such brackets used in other programming languages, we use indentation in Python.
Use tabs,instead of spaces for ease of writing code.

Wrong indentation can lead to syntax error, or makes your output wrong for your logic e.g.
&lt;pre&gt;
#IndentationError: expected an indented block
i=-1
if i&lt;0:
print(&quot;Test successful&quot;)#Wrong indentation 
else:    
    print(&quot;Test failed&quot;)
#Output: IndentationError: expected an indented block
&lt;/pre&gt;
---
&lt;pre&gt;
#Properly Indented code:
i=-1
if i&lt;0:
    print(&quot;Test successful&quot;)#Wrong indentation
else:    
    print(&quot;Test failed&quot;)
#Output:Test successful
&lt;/pre&gt;
---
Logic changed, so output changed, with improper indentation, e.g.
---
&lt;h3&gt;Code : 1&lt;/h3&gt;
&lt;pre&gt;
sum=0
for i in range(5):
    for j in range(5):
        sum+=i
print(sum, end=&quot; &quot;)
#Output: 50
&lt;/pre&gt;
        
&lt;h3&gt;Code : 2&lt;/h3&gt;
&lt;pre&gt;
for i in range(5):
    for j in range(5):
        print(end=&quot; &quot;)
    sum+=i
print(sum, end=&quot; &quot;)
#Output:                          10
&lt;/pre&gt;
{{#ev:youtube|https://youtu.be/pmavoW419Yc|250|right}}&lt;br&gt;

[[#Top]]

==Spyder IDE Black Screen Solution==

----

 This issue is because of ''Help'' screen which is by default open. 
 We need to close it. So here's how you do it-


===Method 1:===

Step 1-    Try by closing current pane for that,  &quot;''press ctrl+shift+F4''&quot;  wait for few seconds things will appear on screen.

Step 2-    If it so than on menu bar go to ''view &gt; panes &gt; help'' unchecked &quot;''Help''&quot; option.

Step 3-    Make sure that &quot;''Help''&quot; under ''view &gt; panes'' is permanently unchecked. And ''Editor, Ipython console, Variable explorer''  are checked. 


===Method 2:===

Step 1-    Open spyder.

Step 2-   On that black screen randomly ''Left click'' on spyder &quot;''Menu bar''&quot; area you will get menu drop downs, You have to find Drop down with &quot;''Panes''&quot; option.

Step 3-   On &quot;''Panes''&quot; drop down unchecked the &quot;''Help''&quot;.

Step 4-   Wait for few seconds Spyder view will appear.

Step 5 -  Make sure that ''&quot;Help&quot;'' under view&gt;panes is permanently unchecked. And ''Editor, Ipython console, variable explorer'' are checked.


[[#Top]]</text>
      <sha1>5wbfweskcvs7qtesb6jxvliy9ygfm2q</sha1>
    </revision>
    <revision>
      <id>3352</id>
      <parentid>3349</parentid>
      <timestamp>2018-09-26T06:01:40Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="10791">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_2 Contributors of this page]
==Introduction to Python==
Python is a widely used programming language which allows programmers to write the program in fewer lines of code. It was designed by Guido van Rossum in 1991. Python uses an interpreter instead of compiler.Basically, the main difference between compiler and interpreter is that the compiler takes the code as 'whole' and compiles it..for example in C language and on the other side in interpreter..example: languages like Python...it interprets the written code 'line by line', and if somewhere error is found...it stops interpreting the code from there itself. Here, in our course we will be using Spyder IDE. Spyder is an integrated development environment with editing options to assist the programmers in writing programs. Spyder IDE is divided into two panes, one is console and other one is where program is written.




Python works on different platforms (Windows, Mac, Linux, Raspberry Pi, etc).
Python has a simple syntax similar to the English language.
Python has syntax that allows developers to write programs with fewer lines than some other programming languages.
Python runs on an interpreter system, meaning that code can be executed as soon as it is written. This means that prototyping can be very quick.
Python can be treated in a procedural way, an object-orientated way or a functional way.

==Installing Anaconda==
[[#Top]]
This article is all about installing and troubleshooting Anaconda and Spyder on different platforms.

===Windows===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#windows Download Link]. Make sure that you download the version compatible to your operating system architecture. If you have a 64 bit OS then you can download either 64 bit of 32 bit, but if you have 32 bit OS then you should download the 32 bit version only.

Step 2 -&gt; Double click on the .exe file that you downloaded just now and follow the instructions. If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open cmd (go to Start -&gt; then type cmd in the search bar and hit enter). There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

===Mac===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#macos Download Link].

Step 2 -&gt; Double click on the .pkg file that you just downloaded. If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

===Linux===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#linux Download Link].

Step 2 -&gt; Go to the folder where you downloaded the .sh file and type following command 

  '''bash Anaconda-latest-Linux-x86_64.sh'''

If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

==Troubleshooting Spyder==

[[#Top]]

In most of the cases, it happens that Spyder is already running and you have initiated one more instance of it. Please make sure that spyder is not running already.
If you are on Linux OS, please launch spyder through terminal. Just open the terminal and type '''spyder''' and it will launch. When Spyder opens, make sure you see Anaconda with the version written on the Ipython console. If not, try changing the path of your anaconda. Follow these steps according to your OS version.

====Windows====
[https://stackoverflow.com/questions/44597662/conda-command-is-not-recognized-on-windows-10 Click Here]

====Linux====
[https://stackoverflow.com/questions/18675907/how-to-run-conda Click Here]

====Mac====
[https://stackoverflow.com/questions/35246386/conda-command-not-found Click Here]

In most of the cases relaunching Spyder works.
A more general Troubleshoot is present [https://github.com/spyder-ide/spyder/wiki/Troubleshooting-Guide-and-FAQ Here]

==How to run a program in Spyder IDE?==
Go to Run on the menu bar. Click Run-&gt;Run.

==Print statements==
Print statements help to display output on console. 
{{#ev:youtube|https://youtu.be/gECkqaOwyt0|250|right}}

===Syntax===
print()

===How to print a message?===
In order to print a message in Python, write print(&quot;message&quot;).
Single, double, triple quote can be used print()

'''Example:'''

'''Single Quote'''
print('Hello')  
Output: Hello

'''Double Quote'''
print(&quot;Hello&quot;)  
Output: Hello

'''Quote within quote'''
print('Is &quot;Ram&quot; a good boy?')  
Output: Is &quot;Ram&quot; a good boy?

==Escape sequences with strings==

We can use escape sequence within strings to make output more presentable.

'''\n'''  : It will move to next line.

'''\t'''  : It will add tab space(5space)

'''\a'''  : It will play system sound once.

'''Example:'''

Print(&quot;Hi, \n How are you?&quot;)

Output: 

Hi,

How are you?

Print(&quot;Hi, \t How are you?&quot;)

Output: 

Hi, &lt;5 spaces&gt; How are you?

[[File:Escape_Sequence.jpg]]

==Variables==
[[#Top]]

Variables are used to store some values. Values can be strings, integers or decimal values. 
{{#ev:youtube|https://youtu.be/60iAXH1sm-Y|250|right}}
===How to print a variable?===
In order to print the value of a variable in python, first initialise the variable and then write 
&lt;pre&gt;print(variable_name)&lt;/pre&gt;
For example :
&lt;pre&gt;
  x=2
  print(x)
&lt;/pre&gt;

===Some facts about Variables===
* If you want to print variable name with a message, you can use , operator. For example : I want to print Hello Simran and Simran has been stored in a variable called ''name''.
  name=&quot;Simran&quot;
  print(&quot;Hello&quot;,name)
* If you change the value of a variable, it will store the latest value. For example :
  name=&quot;Simran&quot;
  name=&quot;Amit&quot;
  If you will execute the command ''print(name)'', Amit will be displayed.
* You can perform operations like addition, subtraction etc only on integral variables.

==How to execute couple of instructions on console?==
You can execute couple of instructions on console using ;. Write Statement 1;Statement 2;......and then press ''Enter''.
{{#ev:youtube|https://youtu.be/CYQCYvLE22Y|250|right}}









==How to take input from the user?==
We can take input from the user using ''input'' function. For Example : You want the user to input variable ''x'', then write x=input(&quot;Enter the value of x&quot;) and execute. Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNkVLCxZw_jcgyS-bmrIVSP

And when the input you need is of data type other than string. You can do both the input function and data conversion in a single line.
For example:
Consider the program for letting in the patients
'''c=input(&quot;Enter (1/0)&quot;);d=int(c)'''

Instead of using it in two separate lines, combine it into a single line
'''c=int(input(&quot;Enter (1/0)&quot;))'''.

To get two inputs in same line with a space between them split() is used.

a,b=input(&quot;enter a&quot;).split(&quot;enter b&quot;)
----
[[#Top]]

==If statement==
If statement is used to execute set of two contrary statements based on a condition. 

===Syntax===
If (Condition):
    Statement 1
else:
    Statement 2

If 'Condition' is true then 'Statement 1' will be executed otherwise 'Statement 2' will be executed.

Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNhHmg3SkK1uiutigcAbH9K

==Loops==
[[#Top]]&lt;br&gt;
Loops in a programming languages are used to execute set of repetitive statements. For loop and while loop are used extensively to execute a set of looping instructions.

=== For loop Syntax ===
&lt;pre&gt;
for i in range(10): 
    Statement
&lt;/pre&gt;
range(10) indicate that values 0 to 9 will be assigned to the variable i and for each value of i the Statement will be executed, e.g.
&lt;pre&gt;
for i in range(10): 
    print(i)
&lt;/pre&gt;
Output will be
&lt;pre&gt;
0
1
2
3
4
5
6
7
8
9
&lt;/pre&gt;

[[#Top]]

=== While loop Syntax ===
&lt;pre&gt;
intialisation

while(condition):
   Statement
   increment/decrement
&lt;/pre&gt;
e.g.
&lt;pre&gt;
#initialization
i=0
while(i&lt;10): 
    print(i)
    i=i+1
&lt;/pre&gt;
Output will be:
&lt;pre&gt;
0
1
2
3
4
5
6
7
8
9
&lt;/pre&gt;
Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNbl5jkVrrw1E5XSvm3GiCI

==Importance of Indentation in Python==
Indentation is used to indicate to what block of statements belong. Indentation of blocks convey program structure in Python. Indentation in Python is used to refer a group/block of code/statements. In C++ we use { and } (curly brackets) to group a set of statements. But in Python, there are no such brackets used. Instead of such brackets used in other programming languages, we use indentation in Python.
Use tabs,instead of spaces for ease of writing code.

Wrong indentation can lead to syntax error, or makes your output wrong for your logic e.g.
&lt;pre&gt;
#IndentationError: expected an indented block
i=-1
if i&lt;0:
print(&quot;Test successful&quot;)#Wrong indentation 
else:    
    print(&quot;Test failed&quot;)
#Output: IndentationError: expected an indented block
&lt;/pre&gt;
---
&lt;pre&gt;
#Properly Indented code:
i=-1
if i&lt;0:
    print(&quot;Test successful&quot;)#Wrong indentation
else:    
    print(&quot;Test failed&quot;)
#Output:Test successful
&lt;/pre&gt;
---
Logic changed, so output changed, with improper indentation, e.g.
---
&lt;h3&gt;Code : 1&lt;/h3&gt;
&lt;pre&gt;
sum=0
for i in range(5):
    for j in range(5):
        sum+=i
print(sum, end=&quot; &quot;)
#Output: 50
&lt;/pre&gt;
        
&lt;h3&gt;Code : 2&lt;/h3&gt;
&lt;pre&gt;
for i in range(5):
    for j in range(5):
        print(end=&quot; &quot;)
    sum+=i
print(sum, end=&quot; &quot;)
#Output:                          10
&lt;/pre&gt;
{{#ev:youtube|https://youtu.be/pmavoW419Yc|250|right}}&lt;br&gt;

[[#Top]]

==Spyder IDE Black Screen Solution==

----

 This issue is because of ''Help'' screen which is by default open. 
 We need to close it. So here's how you do it-


===Method 1:===

Step 1-    Try by closing current pane for that,  &quot;''press ctrl+shift+F4''&quot;  wait for few seconds things will appear on screen.

Step 2-    If it so than on menu bar go to ''view &gt; panes &gt; help'' unchecked &quot;''Help''&quot; option.

Step 3-    Make sure that &quot;''Help''&quot; under ''view &gt; panes'' is permanently unchecked. And ''Editor, Ipython console, Variable explorer''  are checked. 


===Method 2:===

Step 1-    Open spyder.

Step 2-   On that black screen randomly ''Left click'' on spyder &quot;''Menu bar''&quot; area you will get menu drop downs, You have to find Drop down with &quot;''Panes''&quot; option.

Step 3-   On &quot;''Panes''&quot; drop down unchecked the &quot;''Help''&quot;.

Step 4-   Wait for few seconds Spyder view will appear.

Step 5 -  Make sure that ''&quot;Help&quot;'' under view&gt;panes is permanently unchecked. And ''Editor, Ipython console, variable explorer'' are checked.


[[#Top]]</text>
      <sha1>c4vzlw49f5h28hoqyzjrqrqhoxr3xlb</sha1>
    </revision>
    <revision>
      <id>3476</id>
      <parentid>3352</parentid>
      <timestamp>2018-09-27T13:05:12Z</timestamp>
      <contributor>
        <username>Sachinkr</username>
        <id>1743</id>
      </contributor>
      <comment>/* Print statements */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="10800">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_2 Contributors of this page]
==Introduction to Python==
Python is a widely used programming language which allows programmers to write the program in fewer lines of code. It was designed by Guido van Rossum in 1991. Python uses an interpreter instead of compiler.Basically, the main difference between compiler and interpreter is that the compiler takes the code as 'whole' and compiles it..for example in C language and on the other side in interpreter..example: languages like Python...it interprets the written code 'line by line', and if somewhere error is found...it stops interpreting the code from there itself. Here, in our course we will be using Spyder IDE. Spyder is an integrated development environment with editing options to assist the programmers in writing programs. Spyder IDE is divided into two panes, one is console and other one is where program is written.




Python works on different platforms (Windows, Mac, Linux, Raspberry Pi, etc).
Python has a simple syntax similar to the English language.
Python has syntax that allows developers to write programs with fewer lines than some other programming languages.
Python runs on an interpreter system, meaning that code can be executed as soon as it is written. This means that prototyping can be very quick.
Python can be treated in a procedural way, an object-orientated way or a functional way.

==Installing Anaconda==
[[#Top]]
This article is all about installing and troubleshooting Anaconda and Spyder on different platforms.

===Windows===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#windows Download Link]. Make sure that you download the version compatible to your operating system architecture. If you have a 64 bit OS then you can download either 64 bit of 32 bit, but if you have 32 bit OS then you should download the 32 bit version only.

Step 2 -&gt; Double click on the .exe file that you downloaded just now and follow the instructions. If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open cmd (go to Start -&gt; then type cmd in the search bar and hit enter). There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

===Mac===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#macos Download Link].

Step 2 -&gt; Double click on the .pkg file that you just downloaded. If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

===Linux===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#linux Download Link].

Step 2 -&gt; Go to the folder where you downloaded the .sh file and type following command 

  '''bash Anaconda-latest-Linux-x86_64.sh'''

If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

==Troubleshooting Spyder==

[[#Top]]

In most of the cases, it happens that Spyder is already running and you have initiated one more instance of it. Please make sure that spyder is not running already.
If you are on Linux OS, please launch spyder through terminal. Just open the terminal and type '''spyder''' and it will launch. When Spyder opens, make sure you see Anaconda with the version written on the Ipython console. If not, try changing the path of your anaconda. Follow these steps according to your OS version.

====Windows====
[https://stackoverflow.com/questions/44597662/conda-command-is-not-recognized-on-windows-10 Click Here]

====Linux====
[https://stackoverflow.com/questions/18675907/how-to-run-conda Click Here]

====Mac====
[https://stackoverflow.com/questions/35246386/conda-command-not-found Click Here]

In most of the cases relaunching Spyder works.
A more general Troubleshoot is present [https://github.com/spyder-ide/spyder/wiki/Troubleshooting-Guide-and-FAQ Here]

==How to run a program in Spyder IDE?==
Go to Run on the menu bar. Click Run-&gt;Run.

[[#TOP]]
==Print statements==
Print statements help to display output on console. 
{{#ev:youtube|https://youtu.be/gECkqaOwyt0|250|right}}

===Syntax===
print()

===How to print a message?===
In order to print a message in Python, write print(&quot;message&quot;).
Single, double, triple quote can be used print()

'''Example:'''

'''Single Quote'''
print('Hello')  
Output: Hello

'''Double Quote'''
print(&quot;Hello&quot;)  
Output: Hello

'''Quote within quote'''
print('Is &quot;Ram&quot; a good boy?')  
Output: Is &quot;Ram&quot; a good boy?

==Escape sequences with strings==

We can use escape sequence within strings to make output more presentable.

'''\n'''  : It will move to next line.

'''\t'''  : It will add tab space(5space)

'''\a'''  : It will play system sound once.

'''Example:'''

Print(&quot;Hi, \n How are you?&quot;)

Output: 

Hi,

How are you?

Print(&quot;Hi, \t How are you?&quot;)

Output: 

Hi, &lt;5 spaces&gt; How are you?

[[File:Escape_Sequence.jpg]]

==Variables==
[[#Top]]

Variables are used to store some values. Values can be strings, integers or decimal values. 
{{#ev:youtube|https://youtu.be/60iAXH1sm-Y|250|right}}
===How to print a variable?===
In order to print the value of a variable in python, first initialise the variable and then write 
&lt;pre&gt;print(variable_name)&lt;/pre&gt;
For example :
&lt;pre&gt;
  x=2
  print(x)
&lt;/pre&gt;

===Some facts about Variables===
* If you want to print variable name with a message, you can use , operator. For example : I want to print Hello Simran and Simran has been stored in a variable called ''name''.
  name=&quot;Simran&quot;
  print(&quot;Hello&quot;,name)
* If you change the value of a variable, it will store the latest value. For example :
  name=&quot;Simran&quot;
  name=&quot;Amit&quot;
  If you will execute the command ''print(name)'', Amit will be displayed.
* You can perform operations like addition, subtraction etc only on integral variables.

==How to execute couple of instructions on console?==
You can execute couple of instructions on console using ;. Write Statement 1;Statement 2;......and then press ''Enter''.
{{#ev:youtube|https://youtu.be/CYQCYvLE22Y|250|right}}









==How to take input from the user?==
We can take input from the user using ''input'' function. For Example : You want the user to input variable ''x'', then write x=input(&quot;Enter the value of x&quot;) and execute. Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNkVLCxZw_jcgyS-bmrIVSP

And when the input you need is of data type other than string. You can do both the input function and data conversion in a single line.
For example:
Consider the program for letting in the patients
'''c=input(&quot;Enter (1/0)&quot;);d=int(c)'''

Instead of using it in two separate lines, combine it into a single line
'''c=int(input(&quot;Enter (1/0)&quot;))'''.

To get two inputs in same line with a space between them split() is used.

a,b=input(&quot;enter a&quot;).split(&quot;enter b&quot;)
----
[[#Top]]

==If statement==
If statement is used to execute set of two contrary statements based on a condition. 

===Syntax===
If (Condition):
    Statement 1
else:
    Statement 2

If 'Condition' is true then 'Statement 1' will be executed otherwise 'Statement 2' will be executed.

Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNhHmg3SkK1uiutigcAbH9K

==Loops==
[[#Top]]&lt;br&gt;
Loops in a programming languages are used to execute set of repetitive statements. For loop and while loop are used extensively to execute a set of looping instructions.

=== For loop Syntax ===
&lt;pre&gt;
for i in range(10): 
    Statement
&lt;/pre&gt;
range(10) indicate that values 0 to 9 will be assigned to the variable i and for each value of i the Statement will be executed, e.g.
&lt;pre&gt;
for i in range(10): 
    print(i)
&lt;/pre&gt;
Output will be
&lt;pre&gt;
0
1
2
3
4
5
6
7
8
9
&lt;/pre&gt;

[[#Top]]

=== While loop Syntax ===
&lt;pre&gt;
intialisation

while(condition):
   Statement
   increment/decrement
&lt;/pre&gt;
e.g.
&lt;pre&gt;
#initialization
i=0
while(i&lt;10): 
    print(i)
    i=i+1
&lt;/pre&gt;
Output will be:
&lt;pre&gt;
0
1
2
3
4
5
6
7
8
9
&lt;/pre&gt;
Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNbl5jkVrrw1E5XSvm3GiCI

==Importance of Indentation in Python==
Indentation is used to indicate to what block of statements belong. Indentation of blocks convey program structure in Python. Indentation in Python is used to refer a group/block of code/statements. In C++ we use { and } (curly brackets) to group a set of statements. But in Python, there are no such brackets used. Instead of such brackets used in other programming languages, we use indentation in Python.
Use tabs,instead of spaces for ease of writing code.

Wrong indentation can lead to syntax error, or makes your output wrong for your logic e.g.
&lt;pre&gt;
#IndentationError: expected an indented block
i=-1
if i&lt;0:
print(&quot;Test successful&quot;)#Wrong indentation 
else:    
    print(&quot;Test failed&quot;)
#Output: IndentationError: expected an indented block
&lt;/pre&gt;
---
&lt;pre&gt;
#Properly Indented code:
i=-1
if i&lt;0:
    print(&quot;Test successful&quot;)#Wrong indentation
else:    
    print(&quot;Test failed&quot;)
#Output:Test successful
&lt;/pre&gt;
---
Logic changed, so output changed, with improper indentation, e.g.
---
&lt;h3&gt;Code : 1&lt;/h3&gt;
&lt;pre&gt;
sum=0
for i in range(5):
    for j in range(5):
        sum+=i
print(sum, end=&quot; &quot;)
#Output: 50
&lt;/pre&gt;
        
&lt;h3&gt;Code : 2&lt;/h3&gt;
&lt;pre&gt;
for i in range(5):
    for j in range(5):
        print(end=&quot; &quot;)
    sum+=i
print(sum, end=&quot; &quot;)
#Output:                          10
&lt;/pre&gt;
{{#ev:youtube|https://youtu.be/pmavoW419Yc|250|right}}&lt;br&gt;

[[#Top]]

==Spyder IDE Black Screen Solution==

----

 This issue is because of ''Help'' screen which is by default open. 
 We need to close it. So here's how you do it-


===Method 1:===

Step 1-    Try by closing current pane for that,  &quot;''press ctrl+shift+F4''&quot;  wait for few seconds things will appear on screen.

Step 2-    If it so than on menu bar go to ''view &gt; panes &gt; help'' unchecked &quot;''Help''&quot; option.

Step 3-    Make sure that &quot;''Help''&quot; under ''view &gt; panes'' is permanently unchecked. And ''Editor, Ipython console, Variable explorer''  are checked. 


===Method 2:===

Step 1-    Open spyder.

Step 2-   On that black screen randomly ''Left click'' on spyder &quot;''Menu bar''&quot; area you will get menu drop downs, You have to find Drop down with &quot;''Panes''&quot; option.

Step 3-   On &quot;''Panes''&quot; drop down unchecked the &quot;''Help''&quot;.

Step 4-   Wait for few seconds Spyder view will appear.

Step 5 -  Make sure that ''&quot;Help&quot;'' under view&gt;panes is permanently unchecked. And ''Editor, Ipython console, variable explorer'' are checked.


[[#Top]]</text>
      <sha1>sclb59mdj66ryavcvlpm8h17vrnr2ad</sha1>
    </revision>
    <revision>
      <id>3477</id>
      <parentid>3476</parentid>
      <timestamp>2018-09-27T13:05:58Z</timestamp>
      <contributor>
        <username>Sachinkr</username>
        <id>1743</id>
      </contributor>
      <comment>/* Escape sequences with strings */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="10809">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_2 Contributors of this page]
==Introduction to Python==
Python is a widely used programming language which allows programmers to write the program in fewer lines of code. It was designed by Guido van Rossum in 1991. Python uses an interpreter instead of compiler.Basically, the main difference between compiler and interpreter is that the compiler takes the code as 'whole' and compiles it..for example in C language and on the other side in interpreter..example: languages like Python...it interprets the written code 'line by line', and if somewhere error is found...it stops interpreting the code from there itself. Here, in our course we will be using Spyder IDE. Spyder is an integrated development environment with editing options to assist the programmers in writing programs. Spyder IDE is divided into two panes, one is console and other one is where program is written.




Python works on different platforms (Windows, Mac, Linux, Raspberry Pi, etc).
Python has a simple syntax similar to the English language.
Python has syntax that allows developers to write programs with fewer lines than some other programming languages.
Python runs on an interpreter system, meaning that code can be executed as soon as it is written. This means that prototyping can be very quick.
Python can be treated in a procedural way, an object-orientated way or a functional way.

==Installing Anaconda==
[[#Top]]
This article is all about installing and troubleshooting Anaconda and Spyder on different platforms.

===Windows===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#windows Download Link]. Make sure that you download the version compatible to your operating system architecture. If you have a 64 bit OS then you can download either 64 bit of 32 bit, but if you have 32 bit OS then you should download the 32 bit version only.

Step 2 -&gt; Double click on the .exe file that you downloaded just now and follow the instructions. If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open cmd (go to Start -&gt; then type cmd in the search bar and hit enter). There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

===Mac===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#macos Download Link].

Step 2 -&gt; Double click on the .pkg file that you just downloaded. If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

===Linux===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#linux Download Link].

Step 2 -&gt; Go to the folder where you downloaded the .sh file and type following command 

  '''bash Anaconda-latest-Linux-x86_64.sh'''

If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

==Troubleshooting Spyder==

[[#Top]]

In most of the cases, it happens that Spyder is already running and you have initiated one more instance of it. Please make sure that spyder is not running already.
If you are on Linux OS, please launch spyder through terminal. Just open the terminal and type '''spyder''' and it will launch. When Spyder opens, make sure you see Anaconda with the version written on the Ipython console. If not, try changing the path of your anaconda. Follow these steps according to your OS version.

====Windows====
[https://stackoverflow.com/questions/44597662/conda-command-is-not-recognized-on-windows-10 Click Here]

====Linux====
[https://stackoverflow.com/questions/18675907/how-to-run-conda Click Here]

====Mac====
[https://stackoverflow.com/questions/35246386/conda-command-not-found Click Here]

In most of the cases relaunching Spyder works.
A more general Troubleshoot is present [https://github.com/spyder-ide/spyder/wiki/Troubleshooting-Guide-and-FAQ Here]

==How to run a program in Spyder IDE?==
Go to Run on the menu bar. Click Run-&gt;Run.

[[#TOP]]
==Print statements==
Print statements help to display output on console. 
{{#ev:youtube|https://youtu.be/gECkqaOwyt0|250|right}}

===Syntax===
print()

===How to print a message?===
In order to print a message in Python, write print(&quot;message&quot;).
Single, double, triple quote can be used print()

'''Example:'''

'''Single Quote'''
print('Hello')  
Output: Hello

'''Double Quote'''
print(&quot;Hello&quot;)  
Output: Hello

'''Quote within quote'''
print('Is &quot;Ram&quot; a good boy?')  
Output: Is &quot;Ram&quot; a good boy?

==Escape sequences with strings==

We can use escape sequence within strings to make output more presentable.

'''\n'''  : It will move to next line.

'''\t'''  : It will add tab space(5space)

'''\a'''  : It will play system sound once.

'''Example:'''

Print(&quot;Hi, \n How are you?&quot;)

Output: 

Hi,

How are you?

Print(&quot;Hi, \t How are you?&quot;)

Output: 

Hi, &lt;5 spaces&gt; How are you?

[[File:Escape_Sequence.jpg]]
[[#TOP]]

==Variables==
[[#Top]]

Variables are used to store some values. Values can be strings, integers or decimal values. 
{{#ev:youtube|https://youtu.be/60iAXH1sm-Y|250|right}}
===How to print a variable?===
In order to print the value of a variable in python, first initialise the variable and then write 
&lt;pre&gt;print(variable_name)&lt;/pre&gt;
For example :
&lt;pre&gt;
  x=2
  print(x)
&lt;/pre&gt;

===Some facts about Variables===
* If you want to print variable name with a message, you can use , operator. For example : I want to print Hello Simran and Simran has been stored in a variable called ''name''.
  name=&quot;Simran&quot;
  print(&quot;Hello&quot;,name)
* If you change the value of a variable, it will store the latest value. For example :
  name=&quot;Simran&quot;
  name=&quot;Amit&quot;
  If you will execute the command ''print(name)'', Amit will be displayed.
* You can perform operations like addition, subtraction etc only on integral variables.

==How to execute couple of instructions on console?==
You can execute couple of instructions on console using ;. Write Statement 1;Statement 2;......and then press ''Enter''.
{{#ev:youtube|https://youtu.be/CYQCYvLE22Y|250|right}}









==How to take input from the user?==
We can take input from the user using ''input'' function. For Example : You want the user to input variable ''x'', then write x=input(&quot;Enter the value of x&quot;) and execute. Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNkVLCxZw_jcgyS-bmrIVSP

And when the input you need is of data type other than string. You can do both the input function and data conversion in a single line.
For example:
Consider the program for letting in the patients
'''c=input(&quot;Enter (1/0)&quot;);d=int(c)'''

Instead of using it in two separate lines, combine it into a single line
'''c=int(input(&quot;Enter (1/0)&quot;))'''.

To get two inputs in same line with a space between them split() is used.

a,b=input(&quot;enter a&quot;).split(&quot;enter b&quot;)
----
[[#Top]]

==If statement==
If statement is used to execute set of two contrary statements based on a condition. 

===Syntax===
If (Condition):
    Statement 1
else:
    Statement 2

If 'Condition' is true then 'Statement 1' will be executed otherwise 'Statement 2' will be executed.

Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNhHmg3SkK1uiutigcAbH9K

==Loops==
[[#Top]]&lt;br&gt;
Loops in a programming languages are used to execute set of repetitive statements. For loop and while loop are used extensively to execute a set of looping instructions.

=== For loop Syntax ===
&lt;pre&gt;
for i in range(10): 
    Statement
&lt;/pre&gt;
range(10) indicate that values 0 to 9 will be assigned to the variable i and for each value of i the Statement will be executed, e.g.
&lt;pre&gt;
for i in range(10): 
    print(i)
&lt;/pre&gt;
Output will be
&lt;pre&gt;
0
1
2
3
4
5
6
7
8
9
&lt;/pre&gt;

[[#Top]]

=== While loop Syntax ===
&lt;pre&gt;
intialisation

while(condition):
   Statement
   increment/decrement
&lt;/pre&gt;
e.g.
&lt;pre&gt;
#initialization
i=0
while(i&lt;10): 
    print(i)
    i=i+1
&lt;/pre&gt;
Output will be:
&lt;pre&gt;
0
1
2
3
4
5
6
7
8
9
&lt;/pre&gt;
Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNbl5jkVrrw1E5XSvm3GiCI

==Importance of Indentation in Python==
Indentation is used to indicate to what block of statements belong. Indentation of blocks convey program structure in Python. Indentation in Python is used to refer a group/block of code/statements. In C++ we use { and } (curly brackets) to group a set of statements. But in Python, there are no such brackets used. Instead of such brackets used in other programming languages, we use indentation in Python.
Use tabs,instead of spaces for ease of writing code.

Wrong indentation can lead to syntax error, or makes your output wrong for your logic e.g.
&lt;pre&gt;
#IndentationError: expected an indented block
i=-1
if i&lt;0:
print(&quot;Test successful&quot;)#Wrong indentation 
else:    
    print(&quot;Test failed&quot;)
#Output: IndentationError: expected an indented block
&lt;/pre&gt;
---
&lt;pre&gt;
#Properly Indented code:
i=-1
if i&lt;0:
    print(&quot;Test successful&quot;)#Wrong indentation
else:    
    print(&quot;Test failed&quot;)
#Output:Test successful
&lt;/pre&gt;
---
Logic changed, so output changed, with improper indentation, e.g.
---
&lt;h3&gt;Code : 1&lt;/h3&gt;
&lt;pre&gt;
sum=0
for i in range(5):
    for j in range(5):
        sum+=i
print(sum, end=&quot; &quot;)
#Output: 50
&lt;/pre&gt;
        
&lt;h3&gt;Code : 2&lt;/h3&gt;
&lt;pre&gt;
for i in range(5):
    for j in range(5):
        print(end=&quot; &quot;)
    sum+=i
print(sum, end=&quot; &quot;)
#Output:                          10
&lt;/pre&gt;
{{#ev:youtube|https://youtu.be/pmavoW419Yc|250|right}}&lt;br&gt;

[[#Top]]

==Spyder IDE Black Screen Solution==

----

 This issue is because of ''Help'' screen which is by default open. 
 We need to close it. So here's how you do it-


===Method 1:===

Step 1-    Try by closing current pane for that,  &quot;''press ctrl+shift+F4''&quot;  wait for few seconds things will appear on screen.

Step 2-    If it so than on menu bar go to ''view &gt; panes &gt; help'' unchecked &quot;''Help''&quot; option.

Step 3-    Make sure that &quot;''Help''&quot; under ''view &gt; panes'' is permanently unchecked. And ''Editor, Ipython console, Variable explorer''  are checked. 


===Method 2:===

Step 1-    Open spyder.

Step 2-   On that black screen randomly ''Left click'' on spyder &quot;''Menu bar''&quot; area you will get menu drop downs, You have to find Drop down with &quot;''Panes''&quot; option.

Step 3-   On &quot;''Panes''&quot; drop down unchecked the &quot;''Help''&quot;.

Step 4-   Wait for few seconds Spyder view will appear.

Step 5 -  Make sure that ''&quot;Help&quot;'' under view&gt;panes is permanently unchecked. And ''Editor, Ipython console, variable explorer'' are checked.


[[#Top]]</text>
      <sha1>84bwzkcb5oipu0ztpno99zrcf5ez1xt</sha1>
    </revision>
    <revision>
      <id>3478</id>
      <parentid>3477</parentid>
      <timestamp>2018-09-27T13:06:16Z</timestamp>
      <contributor>
        <username>Sachinkr</username>
        <id>1743</id>
      </contributor>
      <comment>/* Escape sequences with strings */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="10809">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_2 Contributors of this page]
==Introduction to Python==
Python is a widely used programming language which allows programmers to write the program in fewer lines of code. It was designed by Guido van Rossum in 1991. Python uses an interpreter instead of compiler.Basically, the main difference between compiler and interpreter is that the compiler takes the code as 'whole' and compiles it..for example in C language and on the other side in interpreter..example: languages like Python...it interprets the written code 'line by line', and if somewhere error is found...it stops interpreting the code from there itself. Here, in our course we will be using Spyder IDE. Spyder is an integrated development environment with editing options to assist the programmers in writing programs. Spyder IDE is divided into two panes, one is console and other one is where program is written.




Python works on different platforms (Windows, Mac, Linux, Raspberry Pi, etc).
Python has a simple syntax similar to the English language.
Python has syntax that allows developers to write programs with fewer lines than some other programming languages.
Python runs on an interpreter system, meaning that code can be executed as soon as it is written. This means that prototyping can be very quick.
Python can be treated in a procedural way, an object-orientated way or a functional way.

==Installing Anaconda==
[[#Top]]
This article is all about installing and troubleshooting Anaconda and Spyder on different platforms.

===Windows===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#windows Download Link]. Make sure that you download the version compatible to your operating system architecture. If you have a 64 bit OS then you can download either 64 bit of 32 bit, but if you have 32 bit OS then you should download the 32 bit version only.

Step 2 -&gt; Double click on the .exe file that you downloaded just now and follow the instructions. If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open cmd (go to Start -&gt; then type cmd in the search bar and hit enter). There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

===Mac===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#macos Download Link].

Step 2 -&gt; Double click on the .pkg file that you just downloaded. If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

===Linux===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#linux Download Link].

Step 2 -&gt; Go to the folder where you downloaded the .sh file and type following command 

  '''bash Anaconda-latest-Linux-x86_64.sh'''

If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

==Troubleshooting Spyder==

[[#Top]]

In most of the cases, it happens that Spyder is already running and you have initiated one more instance of it. Please make sure that spyder is not running already.
If you are on Linux OS, please launch spyder through terminal. Just open the terminal and type '''spyder''' and it will launch. When Spyder opens, make sure you see Anaconda with the version written on the Ipython console. If not, try changing the path of your anaconda. Follow these steps according to your OS version.

====Windows====
[https://stackoverflow.com/questions/44597662/conda-command-is-not-recognized-on-windows-10 Click Here]

====Linux====
[https://stackoverflow.com/questions/18675907/how-to-run-conda Click Here]

====Mac====
[https://stackoverflow.com/questions/35246386/conda-command-not-found Click Here]

In most of the cases relaunching Spyder works.
A more general Troubleshoot is present [https://github.com/spyder-ide/spyder/wiki/Troubleshooting-Guide-and-FAQ Here]

==How to run a program in Spyder IDE?==
Go to Run on the menu bar. Click Run-&gt;Run.

[[#TOP]]
==Print statements==
Print statements help to display output on console. 
{{#ev:youtube|https://youtu.be/gECkqaOwyt0|250|right}}

===Syntax===
print()

===How to print a message?===
In order to print a message in Python, write print(&quot;message&quot;).
Single, double, triple quote can be used print()

'''Example:'''

'''Single Quote'''
print('Hello')  
Output: Hello

'''Double Quote'''
print(&quot;Hello&quot;)  
Output: Hello

'''Quote within quote'''
print('Is &quot;Ram&quot; a good boy?')  
Output: Is &quot;Ram&quot; a good boy?

[[#TOP]]
==Escape sequences with strings==

We can use escape sequence within strings to make output more presentable.

'''\n'''  : It will move to next line.

'''\t'''  : It will add tab space(5space)

'''\a'''  : It will play system sound once.

'''Example:'''

Print(&quot;Hi, \n How are you?&quot;)

Output: 

Hi,

How are you?

Print(&quot;Hi, \t How are you?&quot;)

Output: 

Hi, &lt;5 spaces&gt; How are you?

[[File:Escape_Sequence.jpg]]

==Variables==
[[#Top]]

Variables are used to store some values. Values can be strings, integers or decimal values. 
{{#ev:youtube|https://youtu.be/60iAXH1sm-Y|250|right}}
===How to print a variable?===
In order to print the value of a variable in python, first initialise the variable and then write 
&lt;pre&gt;print(variable_name)&lt;/pre&gt;
For example :
&lt;pre&gt;
  x=2
  print(x)
&lt;/pre&gt;

===Some facts about Variables===
* If you want to print variable name with a message, you can use , operator. For example : I want to print Hello Simran and Simran has been stored in a variable called ''name''.
  name=&quot;Simran&quot;
  print(&quot;Hello&quot;,name)
* If you change the value of a variable, it will store the latest value. For example :
  name=&quot;Simran&quot;
  name=&quot;Amit&quot;
  If you will execute the command ''print(name)'', Amit will be displayed.
* You can perform operations like addition, subtraction etc only on integral variables.

==How to execute couple of instructions on console?==
You can execute couple of instructions on console using ;. Write Statement 1;Statement 2;......and then press ''Enter''.
{{#ev:youtube|https://youtu.be/CYQCYvLE22Y|250|right}}









==How to take input from the user?==
We can take input from the user using ''input'' function. For Example : You want the user to input variable ''x'', then write x=input(&quot;Enter the value of x&quot;) and execute. Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNkVLCxZw_jcgyS-bmrIVSP

And when the input you need is of data type other than string. You can do both the input function and data conversion in a single line.
For example:
Consider the program for letting in the patients
'''c=input(&quot;Enter (1/0)&quot;);d=int(c)'''

Instead of using it in two separate lines, combine it into a single line
'''c=int(input(&quot;Enter (1/0)&quot;))'''.

To get two inputs in same line with a space between them split() is used.

a,b=input(&quot;enter a&quot;).split(&quot;enter b&quot;)
----
[[#Top]]

==If statement==
If statement is used to execute set of two contrary statements based on a condition. 

===Syntax===
If (Condition):
    Statement 1
else:
    Statement 2

If 'Condition' is true then 'Statement 1' will be executed otherwise 'Statement 2' will be executed.

Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNhHmg3SkK1uiutigcAbH9K

==Loops==
[[#Top]]&lt;br&gt;
Loops in a programming languages are used to execute set of repetitive statements. For loop and while loop are used extensively to execute a set of looping instructions.

=== For loop Syntax ===
&lt;pre&gt;
for i in range(10): 
    Statement
&lt;/pre&gt;
range(10) indicate that values 0 to 9 will be assigned to the variable i and for each value of i the Statement will be executed, e.g.
&lt;pre&gt;
for i in range(10): 
    print(i)
&lt;/pre&gt;
Output will be
&lt;pre&gt;
0
1
2
3
4
5
6
7
8
9
&lt;/pre&gt;

[[#Top]]

=== While loop Syntax ===
&lt;pre&gt;
intialisation

while(condition):
   Statement
   increment/decrement
&lt;/pre&gt;
e.g.
&lt;pre&gt;
#initialization
i=0
while(i&lt;10): 
    print(i)
    i=i+1
&lt;/pre&gt;
Output will be:
&lt;pre&gt;
0
1
2
3
4
5
6
7
8
9
&lt;/pre&gt;
Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNbl5jkVrrw1E5XSvm3GiCI

==Importance of Indentation in Python==
Indentation is used to indicate to what block of statements belong. Indentation of blocks convey program structure in Python. Indentation in Python is used to refer a group/block of code/statements. In C++ we use { and } (curly brackets) to group a set of statements. But in Python, there are no such brackets used. Instead of such brackets used in other programming languages, we use indentation in Python.
Use tabs,instead of spaces for ease of writing code.

Wrong indentation can lead to syntax error, or makes your output wrong for your logic e.g.
&lt;pre&gt;
#IndentationError: expected an indented block
i=-1
if i&lt;0:
print(&quot;Test successful&quot;)#Wrong indentation 
else:    
    print(&quot;Test failed&quot;)
#Output: IndentationError: expected an indented block
&lt;/pre&gt;
---
&lt;pre&gt;
#Properly Indented code:
i=-1
if i&lt;0:
    print(&quot;Test successful&quot;)#Wrong indentation
else:    
    print(&quot;Test failed&quot;)
#Output:Test successful
&lt;/pre&gt;
---
Logic changed, so output changed, with improper indentation, e.g.
---
&lt;h3&gt;Code : 1&lt;/h3&gt;
&lt;pre&gt;
sum=0
for i in range(5):
    for j in range(5):
        sum+=i
print(sum, end=&quot; &quot;)
#Output: 50
&lt;/pre&gt;
        
&lt;h3&gt;Code : 2&lt;/h3&gt;
&lt;pre&gt;
for i in range(5):
    for j in range(5):
        print(end=&quot; &quot;)
    sum+=i
print(sum, end=&quot; &quot;)
#Output:                          10
&lt;/pre&gt;
{{#ev:youtube|https://youtu.be/pmavoW419Yc|250|right}}&lt;br&gt;

[[#Top]]

==Spyder IDE Black Screen Solution==

----

 This issue is because of ''Help'' screen which is by default open. 
 We need to close it. So here's how you do it-


===Method 1:===

Step 1-    Try by closing current pane for that,  &quot;''press ctrl+shift+F4''&quot;  wait for few seconds things will appear on screen.

Step 2-    If it so than on menu bar go to ''view &gt; panes &gt; help'' unchecked &quot;''Help''&quot; option.

Step 3-    Make sure that &quot;''Help''&quot; under ''view &gt; panes'' is permanently unchecked. And ''Editor, Ipython console, Variable explorer''  are checked. 


===Method 2:===

Step 1-    Open spyder.

Step 2-   On that black screen randomly ''Left click'' on spyder &quot;''Menu bar''&quot; area you will get menu drop downs, You have to find Drop down with &quot;''Panes''&quot; option.

Step 3-   On &quot;''Panes''&quot; drop down unchecked the &quot;''Help''&quot;.

Step 4-   Wait for few seconds Spyder view will appear.

Step 5 -  Make sure that ''&quot;Help&quot;'' under view&gt;panes is permanently unchecked. And ''Editor, Ipython console, variable explorer'' are checked.


[[#Top]]</text>
      <sha1>3hxbrkm2jk2psf60vxw60maev0fb3ym</sha1>
    </revision>
    <revision>
      <id>3479</id>
      <parentid>3478</parentid>
      <timestamp>2018-09-27T13:07:00Z</timestamp>
      <contributor>
        <username>Sachinkr</username>
        <id>1743</id>
      </contributor>
      <comment>/* Importance of Indentation in Python */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="10818">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_2 Contributors of this page]
==Introduction to Python==
Python is a widely used programming language which allows programmers to write the program in fewer lines of code. It was designed by Guido van Rossum in 1991. Python uses an interpreter instead of compiler.Basically, the main difference between compiler and interpreter is that the compiler takes the code as 'whole' and compiles it..for example in C language and on the other side in interpreter..example: languages like Python...it interprets the written code 'line by line', and if somewhere error is found...it stops interpreting the code from there itself. Here, in our course we will be using Spyder IDE. Spyder is an integrated development environment with editing options to assist the programmers in writing programs. Spyder IDE is divided into two panes, one is console and other one is where program is written.




Python works on different platforms (Windows, Mac, Linux, Raspberry Pi, etc).
Python has a simple syntax similar to the English language.
Python has syntax that allows developers to write programs with fewer lines than some other programming languages.
Python runs on an interpreter system, meaning that code can be executed as soon as it is written. This means that prototyping can be very quick.
Python can be treated in a procedural way, an object-orientated way or a functional way.

==Installing Anaconda==
[[#Top]]
This article is all about installing and troubleshooting Anaconda and Spyder on different platforms.

===Windows===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#windows Download Link]. Make sure that you download the version compatible to your operating system architecture. If you have a 64 bit OS then you can download either 64 bit of 32 bit, but if you have 32 bit OS then you should download the 32 bit version only.

Step 2 -&gt; Double click on the .exe file that you downloaded just now and follow the instructions. If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open cmd (go to Start -&gt; then type cmd in the search bar and hit enter). There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

===Mac===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#macos Download Link].

Step 2 -&gt; Double click on the .pkg file that you just downloaded. If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

===Linux===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#linux Download Link].

Step 2 -&gt; Go to the folder where you downloaded the .sh file and type following command 

  '''bash Anaconda-latest-Linux-x86_64.sh'''

If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

==Troubleshooting Spyder==

[[#Top]]

In most of the cases, it happens that Spyder is already running and you have initiated one more instance of it. Please make sure that spyder is not running already.
If you are on Linux OS, please launch spyder through terminal. Just open the terminal and type '''spyder''' and it will launch. When Spyder opens, make sure you see Anaconda with the version written on the Ipython console. If not, try changing the path of your anaconda. Follow these steps according to your OS version.

====Windows====
[https://stackoverflow.com/questions/44597662/conda-command-is-not-recognized-on-windows-10 Click Here]

====Linux====
[https://stackoverflow.com/questions/18675907/how-to-run-conda Click Here]

====Mac====
[https://stackoverflow.com/questions/35246386/conda-command-not-found Click Here]

In most of the cases relaunching Spyder works.
A more general Troubleshoot is present [https://github.com/spyder-ide/spyder/wiki/Troubleshooting-Guide-and-FAQ Here]

==How to run a program in Spyder IDE?==
Go to Run on the menu bar. Click Run-&gt;Run.

[[#TOP]]
==Print statements==
Print statements help to display output on console. 
{{#ev:youtube|https://youtu.be/gECkqaOwyt0|250|right}}

===Syntax===
print()

===How to print a message?===
In order to print a message in Python, write print(&quot;message&quot;).
Single, double, triple quote can be used print()

'''Example:'''

'''Single Quote'''
print('Hello')  
Output: Hello

'''Double Quote'''
print(&quot;Hello&quot;)  
Output: Hello

'''Quote within quote'''
print('Is &quot;Ram&quot; a good boy?')  
Output: Is &quot;Ram&quot; a good boy?

[[#TOP]]
==Escape sequences with strings==

We can use escape sequence within strings to make output more presentable.

'''\n'''  : It will move to next line.

'''\t'''  : It will add tab space(5space)

'''\a'''  : It will play system sound once.

'''Example:'''

Print(&quot;Hi, \n How are you?&quot;)

Output: 

Hi,

How are you?

Print(&quot;Hi, \t How are you?&quot;)

Output: 

Hi, &lt;5 spaces&gt; How are you?

[[File:Escape_Sequence.jpg]]

==Variables==
[[#Top]]

Variables are used to store some values. Values can be strings, integers or decimal values. 
{{#ev:youtube|https://youtu.be/60iAXH1sm-Y|250|right}}
===How to print a variable?===
In order to print the value of a variable in python, first initialise the variable and then write 
&lt;pre&gt;print(variable_name)&lt;/pre&gt;
For example :
&lt;pre&gt;
  x=2
  print(x)
&lt;/pre&gt;

===Some facts about Variables===
* If you want to print variable name with a message, you can use , operator. For example : I want to print Hello Simran and Simran has been stored in a variable called ''name''.
  name=&quot;Simran&quot;
  print(&quot;Hello&quot;,name)
* If you change the value of a variable, it will store the latest value. For example :
  name=&quot;Simran&quot;
  name=&quot;Amit&quot;
  If you will execute the command ''print(name)'', Amit will be displayed.
* You can perform operations like addition, subtraction etc only on integral variables.

==How to execute couple of instructions on console?==
You can execute couple of instructions on console using ;. Write Statement 1;Statement 2;......and then press ''Enter''.
{{#ev:youtube|https://youtu.be/CYQCYvLE22Y|250|right}}









==How to take input from the user?==
We can take input from the user using ''input'' function. For Example : You want the user to input variable ''x'', then write x=input(&quot;Enter the value of x&quot;) and execute. Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNkVLCxZw_jcgyS-bmrIVSP

And when the input you need is of data type other than string. You can do both the input function and data conversion in a single line.
For example:
Consider the program for letting in the patients
'''c=input(&quot;Enter (1/0)&quot;);d=int(c)'''

Instead of using it in two separate lines, combine it into a single line
'''c=int(input(&quot;Enter (1/0)&quot;))'''.

To get two inputs in same line with a space between them split() is used.

a,b=input(&quot;enter a&quot;).split(&quot;enter b&quot;)
----
[[#Top]]

==If statement==
If statement is used to execute set of two contrary statements based on a condition. 

===Syntax===
If (Condition):
    Statement 1
else:
    Statement 2

If 'Condition' is true then 'Statement 1' will be executed otherwise 'Statement 2' will be executed.

Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNhHmg3SkK1uiutigcAbH9K

==Loops==
[[#Top]]&lt;br&gt;
Loops in a programming languages are used to execute set of repetitive statements. For loop and while loop are used extensively to execute a set of looping instructions.

=== For loop Syntax ===
&lt;pre&gt;
for i in range(10): 
    Statement
&lt;/pre&gt;
range(10) indicate that values 0 to 9 will be assigned to the variable i and for each value of i the Statement will be executed, e.g.
&lt;pre&gt;
for i in range(10): 
    print(i)
&lt;/pre&gt;
Output will be
&lt;pre&gt;
0
1
2
3
4
5
6
7
8
9
&lt;/pre&gt;

[[#Top]]

=== While loop Syntax ===
&lt;pre&gt;
intialisation

while(condition):
   Statement
   increment/decrement
&lt;/pre&gt;
e.g.
&lt;pre&gt;
#initialization
i=0
while(i&lt;10): 
    print(i)
    i=i+1
&lt;/pre&gt;
Output will be:
&lt;pre&gt;
0
1
2
3
4
5
6
7
8
9
&lt;/pre&gt;
Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNbl5jkVrrw1E5XSvm3GiCI

[[#TOP]]
==Importance of Indentation in Python==
Indentation is used to indicate to what block of statements belong. Indentation of blocks convey program structure in Python. Indentation in Python is used to refer a group/block of code/statements. In C++ we use { and } (curly brackets) to group a set of statements. But in Python, there are no such brackets used. Instead of such brackets used in other programming languages, we use indentation in Python.
Use tabs,instead of spaces for ease of writing code.

Wrong indentation can lead to syntax error, or makes your output wrong for your logic e.g.
&lt;pre&gt;
#IndentationError: expected an indented block
i=-1
if i&lt;0:
print(&quot;Test successful&quot;)#Wrong indentation 
else:    
    print(&quot;Test failed&quot;)
#Output: IndentationError: expected an indented block
&lt;/pre&gt;
---
&lt;pre&gt;
#Properly Indented code:
i=-1
if i&lt;0:
    print(&quot;Test successful&quot;)#Wrong indentation
else:    
    print(&quot;Test failed&quot;)
#Output:Test successful
&lt;/pre&gt;
---
Logic changed, so output changed, with improper indentation, e.g.
---
&lt;h3&gt;Code : 1&lt;/h3&gt;
&lt;pre&gt;
sum=0
for i in range(5):
    for j in range(5):
        sum+=i
print(sum, end=&quot; &quot;)
#Output: 50
&lt;/pre&gt;
        
&lt;h3&gt;Code : 2&lt;/h3&gt;
&lt;pre&gt;
for i in range(5):
    for j in range(5):
        print(end=&quot; &quot;)
    sum+=i
print(sum, end=&quot; &quot;)
#Output:                          10
&lt;/pre&gt;
{{#ev:youtube|https://youtu.be/pmavoW419Yc|250|right}}&lt;br&gt;

[[#Top]]

==Spyder IDE Black Screen Solution==

----

 This issue is because of ''Help'' screen which is by default open. 
 We need to close it. So here's how you do it-


===Method 1:===

Step 1-    Try by closing current pane for that,  &quot;''press ctrl+shift+F4''&quot;  wait for few seconds things will appear on screen.

Step 2-    If it so than on menu bar go to ''view &gt; panes &gt; help'' unchecked &quot;''Help''&quot; option.

Step 3-    Make sure that &quot;''Help''&quot; under ''view &gt; panes'' is permanently unchecked. And ''Editor, Ipython console, Variable explorer''  are checked. 


===Method 2:===

Step 1-    Open spyder.

Step 2-   On that black screen randomly ''Left click'' on spyder &quot;''Menu bar''&quot; area you will get menu drop downs, You have to find Drop down with &quot;''Panes''&quot; option.

Step 3-   On &quot;''Panes''&quot; drop down unchecked the &quot;''Help''&quot;.

Step 4-   Wait for few seconds Spyder view will appear.

Step 5 -  Make sure that ''&quot;Help&quot;'' under view&gt;panes is permanently unchecked. And ''Editor, Ipython console, variable explorer'' are checked.


[[#Top]]</text>
      <sha1>k0jvdp804qofkngfchlmcnx4alqlqa1</sha1>
    </revision>
    <revision>
      <id>3518</id>
      <parentid>3479</parentid>
      <timestamp>2018-09-28T01:52:51Z</timestamp>
      <contributor>
        <username>Sachinkr</username>
        <id>1743</id>
      </contributor>
      <comment>/* Variables */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="10841">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_2 Contributors of this page]
==Introduction to Python==
Python is a widely used programming language which allows programmers to write the program in fewer lines of code. It was designed by Guido van Rossum in 1991. Python uses an interpreter instead of compiler.Basically, the main difference between compiler and interpreter is that the compiler takes the code as 'whole' and compiles it..for example in C language and on the other side in interpreter..example: languages like Python...it interprets the written code 'line by line', and if somewhere error is found...it stops interpreting the code from there itself. Here, in our course we will be using Spyder IDE. Spyder is an integrated development environment with editing options to assist the programmers in writing programs. Spyder IDE is divided into two panes, one is console and other one is where program is written.




Python works on different platforms (Windows, Mac, Linux, Raspberry Pi, etc).
Python has a simple syntax similar to the English language.
Python has syntax that allows developers to write programs with fewer lines than some other programming languages.
Python runs on an interpreter system, meaning that code can be executed as soon as it is written. This means that prototyping can be very quick.
Python can be treated in a procedural way, an object-orientated way or a functional way.

==Installing Anaconda==
[[#Top]]
This article is all about installing and troubleshooting Anaconda and Spyder on different platforms.

===Windows===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#windows Download Link]. Make sure that you download the version compatible to your operating system architecture. If you have a 64 bit OS then you can download either 64 bit of 32 bit, but if you have 32 bit OS then you should download the 32 bit version only.

Step 2 -&gt; Double click on the .exe file that you downloaded just now and follow the instructions. If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open cmd (go to Start -&gt; then type cmd in the search bar and hit enter). There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

===Mac===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#macos Download Link].

Step 2 -&gt; Double click on the .pkg file that you just downloaded. If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

===Linux===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#linux Download Link].

Step 2 -&gt; Go to the folder where you downloaded the .sh file and type following command 

  '''bash Anaconda-latest-Linux-x86_64.sh'''

If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

==Troubleshooting Spyder==

[[#Top]]

In most of the cases, it happens that Spyder is already running and you have initiated one more instance of it. Please make sure that spyder is not running already.
If you are on Linux OS, please launch spyder through terminal. Just open the terminal and type '''spyder''' and it will launch. When Spyder opens, make sure you see Anaconda with the version written on the Ipython console. If not, try changing the path of your anaconda. Follow these steps according to your OS version.

====Windows====
[https://stackoverflow.com/questions/44597662/conda-command-is-not-recognized-on-windows-10 Click Here]

====Linux====
[https://stackoverflow.com/questions/18675907/how-to-run-conda Click Here]

====Mac====
[https://stackoverflow.com/questions/35246386/conda-command-not-found Click Here]

In most of the cases relaunching Spyder works.
A more general Troubleshoot is present [https://github.com/spyder-ide/spyder/wiki/Troubleshooting-Guide-and-FAQ Here]

==How to run a program in Spyder IDE?==
Go to Run on the menu bar. Click Run-&gt;Run.

[[#TOP]]
==Print statements==
Print statements help to display output on console. 
{{#ev:youtube|https://youtu.be/gECkqaOwyt0|250|right}}

===Syntax===
print()

===How to print a message?===
In order to print a message in Python, write print(&quot;message&quot;).
Single, double, triple quote can be used print()

'''Example:'''

'''Single Quote'''
print('Hello')  
Output: Hello

'''Double Quote'''
print(&quot;Hello&quot;)  
Output: Hello

'''Quote within quote'''
print('Is &quot;Ram&quot; a good boy?')  
Output: Is &quot;Ram&quot; a good boy?

[[#TOP]]
==Escape sequences with strings==

We can use escape sequence within strings to make output more presentable.

'''\n'''  : It will move to next line.

'''\t'''  : It will add tab space(5space)

'''\a'''  : It will play system sound once.

'''Example:'''

Print(&quot;Hi, \n How are you?&quot;)

Output: 

Hi,

How are you?

Print(&quot;Hi, \t How are you?&quot;)

Output: 

Hi, &lt;5 spaces&gt; How are you?

[[File:Escape_Sequence.jpg]]

==Variables==
[[#Top]]

Variables are used to store some values. Values can be strings, integers or decimal values.  
Variable Name Rules:

{{#ev:youtube|https://youtu.be/60iAXH1sm-Y|250|right}}
===How to print a variable?===
In order to print the value of a variable in python, first initialise the variable and then write 
&lt;pre&gt;print(variable_name)&lt;/pre&gt;
For example :
&lt;pre&gt;
  x=2
  print(x)
&lt;/pre&gt;

===Some facts about Variables===
* If you want to print variable name with a message, you can use , operator. For example : I want to print Hello Simran and Simran has been stored in a variable called ''name''.
  name=&quot;Simran&quot;
  print(&quot;Hello&quot;,name)
* If you change the value of a variable, it will store the latest value. For example :
  name=&quot;Simran&quot;
  name=&quot;Amit&quot;
  If you will execute the command ''print(name)'', Amit will be displayed.
* You can perform operations like addition, subtraction etc only on integral variables.

==How to execute couple of instructions on console?==
You can execute couple of instructions on console using ;. Write Statement 1;Statement 2;......and then press ''Enter''.
{{#ev:youtube|https://youtu.be/CYQCYvLE22Y|250|right}}









==How to take input from the user?==
We can take input from the user using ''input'' function. For Example : You want the user to input variable ''x'', then write x=input(&quot;Enter the value of x&quot;) and execute. Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNkVLCxZw_jcgyS-bmrIVSP

And when the input you need is of data type other than string. You can do both the input function and data conversion in a single line.
For example:
Consider the program for letting in the patients
'''c=input(&quot;Enter (1/0)&quot;);d=int(c)'''

Instead of using it in two separate lines, combine it into a single line
'''c=int(input(&quot;Enter (1/0)&quot;))'''.

To get two inputs in same line with a space between them split() is used.

a,b=input(&quot;enter a&quot;).split(&quot;enter b&quot;)
----
[[#Top]]

==If statement==
If statement is used to execute set of two contrary statements based on a condition. 

===Syntax===
If (Condition):
    Statement 1
else:
    Statement 2

If 'Condition' is true then 'Statement 1' will be executed otherwise 'Statement 2' will be executed.

Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNhHmg3SkK1uiutigcAbH9K

==Loops==
[[#Top]]&lt;br&gt;
Loops in a programming languages are used to execute set of repetitive statements. For loop and while loop are used extensively to execute a set of looping instructions.

=== For loop Syntax ===
&lt;pre&gt;
for i in range(10): 
    Statement
&lt;/pre&gt;
range(10) indicate that values 0 to 9 will be assigned to the variable i and for each value of i the Statement will be executed, e.g.
&lt;pre&gt;
for i in range(10): 
    print(i)
&lt;/pre&gt;
Output will be
&lt;pre&gt;
0
1
2
3
4
5
6
7
8
9
&lt;/pre&gt;

[[#Top]]

=== While loop Syntax ===
&lt;pre&gt;
intialisation

while(condition):
   Statement
   increment/decrement
&lt;/pre&gt;
e.g.
&lt;pre&gt;
#initialization
i=0
while(i&lt;10): 
    print(i)
    i=i+1
&lt;/pre&gt;
Output will be:
&lt;pre&gt;
0
1
2
3
4
5
6
7
8
9
&lt;/pre&gt;
Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNbl5jkVrrw1E5XSvm3GiCI

[[#TOP]]
==Importance of Indentation in Python==
Indentation is used to indicate to what block of statements belong. Indentation of blocks convey program structure in Python. Indentation in Python is used to refer a group/block of code/statements. In C++ we use { and } (curly brackets) to group a set of statements. But in Python, there are no such brackets used. Instead of such brackets used in other programming languages, we use indentation in Python.
Use tabs,instead of spaces for ease of writing code.

Wrong indentation can lead to syntax error, or makes your output wrong for your logic e.g.
&lt;pre&gt;
#IndentationError: expected an indented block
i=-1
if i&lt;0:
print(&quot;Test successful&quot;)#Wrong indentation 
else:    
    print(&quot;Test failed&quot;)
#Output: IndentationError: expected an indented block
&lt;/pre&gt;
---
&lt;pre&gt;
#Properly Indented code:
i=-1
if i&lt;0:
    print(&quot;Test successful&quot;)#Wrong indentation
else:    
    print(&quot;Test failed&quot;)
#Output:Test successful
&lt;/pre&gt;
---
Logic changed, so output changed, with improper indentation, e.g.
---
&lt;h3&gt;Code : 1&lt;/h3&gt;
&lt;pre&gt;
sum=0
for i in range(5):
    for j in range(5):
        sum+=i
print(sum, end=&quot; &quot;)
#Output: 50
&lt;/pre&gt;
        
&lt;h3&gt;Code : 2&lt;/h3&gt;
&lt;pre&gt;
for i in range(5):
    for j in range(5):
        print(end=&quot; &quot;)
    sum+=i
print(sum, end=&quot; &quot;)
#Output:                          10
&lt;/pre&gt;
{{#ev:youtube|https://youtu.be/pmavoW419Yc|250|right}}&lt;br&gt;

[[#Top]]

==Spyder IDE Black Screen Solution==

----

 This issue is because of ''Help'' screen which is by default open. 
 We need to close it. So here's how you do it-


===Method 1:===

Step 1-    Try by closing current pane for that,  &quot;''press ctrl+shift+F4''&quot;  wait for few seconds things will appear on screen.

Step 2-    If it so than on menu bar go to ''view &gt; panes &gt; help'' unchecked &quot;''Help''&quot; option.

Step 3-    Make sure that &quot;''Help''&quot; under ''view &gt; panes'' is permanently unchecked. And ''Editor, Ipython console, Variable explorer''  are checked. 


===Method 2:===

Step 1-    Open spyder.

Step 2-   On that black screen randomly ''Left click'' on spyder &quot;''Menu bar''&quot; area you will get menu drop downs, You have to find Drop down with &quot;''Panes''&quot; option.

Step 3-   On &quot;''Panes''&quot; drop down unchecked the &quot;''Help''&quot;.

Step 4-   Wait for few seconds Spyder view will appear.

Step 5 -  Make sure that ''&quot;Help&quot;'' under view&gt;panes is permanently unchecked. And ''Editor, Ipython console, variable explorer'' are checked.


[[#Top]]</text>
      <sha1>jjmdbusklg9usgrs3zvud5gun41tu2m</sha1>
    </revision>
    <revision>
      <id>3519</id>
      <parentid>3518</parentid>
      <timestamp>2018-09-28T01:53:18Z</timestamp>
      <contributor>
        <username>Sachinkr</username>
        <id>1743</id>
      </contributor>
      <comment>/* Variables */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="10853">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_2 Contributors of this page]
==Introduction to Python==
Python is a widely used programming language which allows programmers to write the program in fewer lines of code. It was designed by Guido van Rossum in 1991. Python uses an interpreter instead of compiler.Basically, the main difference between compiler and interpreter is that the compiler takes the code as 'whole' and compiles it..for example in C language and on the other side in interpreter..example: languages like Python...it interprets the written code 'line by line', and if somewhere error is found...it stops interpreting the code from there itself. Here, in our course we will be using Spyder IDE. Spyder is an integrated development environment with editing options to assist the programmers in writing programs. Spyder IDE is divided into two panes, one is console and other one is where program is written.




Python works on different platforms (Windows, Mac, Linux, Raspberry Pi, etc).
Python has a simple syntax similar to the English language.
Python has syntax that allows developers to write programs with fewer lines than some other programming languages.
Python runs on an interpreter system, meaning that code can be executed as soon as it is written. This means that prototyping can be very quick.
Python can be treated in a procedural way, an object-orientated way or a functional way.

==Installing Anaconda==
[[#Top]]
This article is all about installing and troubleshooting Anaconda and Spyder on different platforms.

===Windows===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#windows Download Link]. Make sure that you download the version compatible to your operating system architecture. If you have a 64 bit OS then you can download either 64 bit of 32 bit, but if you have 32 bit OS then you should download the 32 bit version only.

Step 2 -&gt; Double click on the .exe file that you downloaded just now and follow the instructions. If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open cmd (go to Start -&gt; then type cmd in the search bar and hit enter). There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

===Mac===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#macos Download Link].

Step 2 -&gt; Double click on the .pkg file that you just downloaded. If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

===Linux===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#linux Download Link].

Step 2 -&gt; Go to the folder where you downloaded the .sh file and type following command 

  '''bash Anaconda-latest-Linux-x86_64.sh'''

If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

==Troubleshooting Spyder==

[[#Top]]

In most of the cases, it happens that Spyder is already running and you have initiated one more instance of it. Please make sure that spyder is not running already.
If you are on Linux OS, please launch spyder through terminal. Just open the terminal and type '''spyder''' and it will launch. When Spyder opens, make sure you see Anaconda with the version written on the Ipython console. If not, try changing the path of your anaconda. Follow these steps according to your OS version.

====Windows====
[https://stackoverflow.com/questions/44597662/conda-command-is-not-recognized-on-windows-10 Click Here]

====Linux====
[https://stackoverflow.com/questions/18675907/how-to-run-conda Click Here]

====Mac====
[https://stackoverflow.com/questions/35246386/conda-command-not-found Click Here]

In most of the cases relaunching Spyder works.
A more general Troubleshoot is present [https://github.com/spyder-ide/spyder/wiki/Troubleshooting-Guide-and-FAQ Here]

==How to run a program in Spyder IDE?==
Go to Run on the menu bar. Click Run-&gt;Run.

[[#TOP]]
==Print statements==
Print statements help to display output on console. 
{{#ev:youtube|https://youtu.be/gECkqaOwyt0|250|right}}

===Syntax===
print()

===How to print a message?===
In order to print a message in Python, write print(&quot;message&quot;).
Single, double, triple quote can be used print()

'''Example:'''

'''Single Quote'''
print('Hello')  
Output: Hello

'''Double Quote'''
print(&quot;Hello&quot;)  
Output: Hello

'''Quote within quote'''
print('Is &quot;Ram&quot; a good boy?')  
Output: Is &quot;Ram&quot; a good boy?

[[#TOP]]
==Escape sequences with strings==

We can use escape sequence within strings to make output more presentable.

'''\n'''  : It will move to next line.

'''\t'''  : It will add tab space(5space)

'''\a'''  : It will play system sound once.

'''Example:'''

Print(&quot;Hi, \n How are you?&quot;)

Output: 

Hi,

How are you?

Print(&quot;Hi, \t How are you?&quot;)

Output: 

Hi, &lt;5 spaces&gt; How are you?

[[File:Escape_Sequence.jpg]]

==Variables==
[[#Top]]
&lt;pre&gt;
Variables are used to store some values. Values can be strings, integers or decimal values.  
Variable Name Rules:

{{#ev:youtube|https://youtu.be/60iAXH1sm-Y|250|right}}
===How to print a variable?===
In order to print the value of a variable in python, first initialise the variable and then write 
&lt;pre&gt;print(variable_name)&lt;/pre&gt;
For example :
&lt;pre&gt;
  x=2
  print(x)
&lt;/pre&gt;

===Some facts about Variables===
* If you want to print variable name with a message, you can use , operator. For example : I want to print Hello Simran and Simran has been stored in a variable called ''name''.
  name=&quot;Simran&quot;
  print(&quot;Hello&quot;,name)
* If you change the value of a variable, it will store the latest value. For example :
  name=&quot;Simran&quot;
  name=&quot;Amit&quot;
  If you will execute the command ''print(name)'', Amit will be displayed.
* You can perform operations like addition, subtraction etc only on integral variables.
&lt;/pre&gt;

==How to execute couple of instructions on console?==
You can execute couple of instructions on console using ;. Write Statement 1;Statement 2;......and then press ''Enter''.
{{#ev:youtube|https://youtu.be/CYQCYvLE22Y|250|right}}









==How to take input from the user?==
We can take input from the user using ''input'' function. For Example : You want the user to input variable ''x'', then write x=input(&quot;Enter the value of x&quot;) and execute. Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNkVLCxZw_jcgyS-bmrIVSP

And when the input you need is of data type other than string. You can do both the input function and data conversion in a single line.
For example:
Consider the program for letting in the patients
'''c=input(&quot;Enter (1/0)&quot;);d=int(c)'''

Instead of using it in two separate lines, combine it into a single line
'''c=int(input(&quot;Enter (1/0)&quot;))'''.

To get two inputs in same line with a space between them split() is used.

a,b=input(&quot;enter a&quot;).split(&quot;enter b&quot;)
----
[[#Top]]

==If statement==
If statement is used to execute set of two contrary statements based on a condition. 

===Syntax===
If (Condition):
    Statement 1
else:
    Statement 2

If 'Condition' is true then 'Statement 1' will be executed otherwise 'Statement 2' will be executed.

Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNhHmg3SkK1uiutigcAbH9K

==Loops==
[[#Top]]&lt;br&gt;
Loops in a programming languages are used to execute set of repetitive statements. For loop and while loop are used extensively to execute a set of looping instructions.

=== For loop Syntax ===
&lt;pre&gt;
for i in range(10): 
    Statement
&lt;/pre&gt;
range(10) indicate that values 0 to 9 will be assigned to the variable i and for each value of i the Statement will be executed, e.g.
&lt;pre&gt;
for i in range(10): 
    print(i)
&lt;/pre&gt;
Output will be
&lt;pre&gt;
0
1
2
3
4
5
6
7
8
9
&lt;/pre&gt;

[[#Top]]

=== While loop Syntax ===
&lt;pre&gt;
intialisation

while(condition):
   Statement
   increment/decrement
&lt;/pre&gt;
e.g.
&lt;pre&gt;
#initialization
i=0
while(i&lt;10): 
    print(i)
    i=i+1
&lt;/pre&gt;
Output will be:
&lt;pre&gt;
0
1
2
3
4
5
6
7
8
9
&lt;/pre&gt;
Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNbl5jkVrrw1E5XSvm3GiCI

[[#TOP]]
==Importance of Indentation in Python==
Indentation is used to indicate to what block of statements belong. Indentation of blocks convey program structure in Python. Indentation in Python is used to refer a group/block of code/statements. In C++ we use { and } (curly brackets) to group a set of statements. But in Python, there are no such brackets used. Instead of such brackets used in other programming languages, we use indentation in Python.
Use tabs,instead of spaces for ease of writing code.

Wrong indentation can lead to syntax error, or makes your output wrong for your logic e.g.
&lt;pre&gt;
#IndentationError: expected an indented block
i=-1
if i&lt;0:
print(&quot;Test successful&quot;)#Wrong indentation 
else:    
    print(&quot;Test failed&quot;)
#Output: IndentationError: expected an indented block
&lt;/pre&gt;
---
&lt;pre&gt;
#Properly Indented code:
i=-1
if i&lt;0:
    print(&quot;Test successful&quot;)#Wrong indentation
else:    
    print(&quot;Test failed&quot;)
#Output:Test successful
&lt;/pre&gt;
---
Logic changed, so output changed, with improper indentation, e.g.
---
&lt;h3&gt;Code : 1&lt;/h3&gt;
&lt;pre&gt;
sum=0
for i in range(5):
    for j in range(5):
        sum+=i
print(sum, end=&quot; &quot;)
#Output: 50
&lt;/pre&gt;
        
&lt;h3&gt;Code : 2&lt;/h3&gt;
&lt;pre&gt;
for i in range(5):
    for j in range(5):
        print(end=&quot; &quot;)
    sum+=i
print(sum, end=&quot; &quot;)
#Output:                          10
&lt;/pre&gt;
{{#ev:youtube|https://youtu.be/pmavoW419Yc|250|right}}&lt;br&gt;

[[#Top]]

==Spyder IDE Black Screen Solution==

----

 This issue is because of ''Help'' screen which is by default open. 
 We need to close it. So here's how you do it-


===Method 1:===

Step 1-    Try by closing current pane for that,  &quot;''press ctrl+shift+F4''&quot;  wait for few seconds things will appear on screen.

Step 2-    If it so than on menu bar go to ''view &gt; panes &gt; help'' unchecked &quot;''Help''&quot; option.

Step 3-    Make sure that &quot;''Help''&quot; under ''view &gt; panes'' is permanently unchecked. And ''Editor, Ipython console, Variable explorer''  are checked. 


===Method 2:===

Step 1-    Open spyder.

Step 2-   On that black screen randomly ''Left click'' on spyder &quot;''Menu bar''&quot; area you will get menu drop downs, You have to find Drop down with &quot;''Panes''&quot; option.

Step 3-   On &quot;''Panes''&quot; drop down unchecked the &quot;''Help''&quot;.

Step 4-   Wait for few seconds Spyder view will appear.

Step 5 -  Make sure that ''&quot;Help&quot;'' under view&gt;panes is permanently unchecked. And ''Editor, Ipython console, variable explorer'' are checked.


[[#Top]]</text>
      <sha1>0zzkt5j7531rsh9r27fig1pv52vpa61</sha1>
    </revision>
    <revision>
      <id>3520</id>
      <parentid>3519</parentid>
      <timestamp>2018-09-28T01:53:59Z</timestamp>
      <contributor>
        <username>Sachinkr</username>
        <id>1743</id>
      </contributor>
      <comment>/* Variables */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="10897">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_2 Contributors of this page]
==Introduction to Python==
Python is a widely used programming language which allows programmers to write the program in fewer lines of code. It was designed by Guido van Rossum in 1991. Python uses an interpreter instead of compiler.Basically, the main difference between compiler and interpreter is that the compiler takes the code as 'whole' and compiles it..for example in C language and on the other side in interpreter..example: languages like Python...it interprets the written code 'line by line', and if somewhere error is found...it stops interpreting the code from there itself. Here, in our course we will be using Spyder IDE. Spyder is an integrated development environment with editing options to assist the programmers in writing programs. Spyder IDE is divided into two panes, one is console and other one is where program is written.




Python works on different platforms (Windows, Mac, Linux, Raspberry Pi, etc).
Python has a simple syntax similar to the English language.
Python has syntax that allows developers to write programs with fewer lines than some other programming languages.
Python runs on an interpreter system, meaning that code can be executed as soon as it is written. This means that prototyping can be very quick.
Python can be treated in a procedural way, an object-orientated way or a functional way.

==Installing Anaconda==
[[#Top]]
This article is all about installing and troubleshooting Anaconda and Spyder on different platforms.

===Windows===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#windows Download Link]. Make sure that you download the version compatible to your operating system architecture. If you have a 64 bit OS then you can download either 64 bit of 32 bit, but if you have 32 bit OS then you should download the 32 bit version only.

Step 2 -&gt; Double click on the .exe file that you downloaded just now and follow the instructions. If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open cmd (go to Start -&gt; then type cmd in the search bar and hit enter). There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

===Mac===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#macos Download Link].

Step 2 -&gt; Double click on the .pkg file that you just downloaded. If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

===Linux===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#linux Download Link].

Step 2 -&gt; Go to the folder where you downloaded the .sh file and type following command 

  '''bash Anaconda-latest-Linux-x86_64.sh'''

If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

==Troubleshooting Spyder==

[[#Top]]

In most of the cases, it happens that Spyder is already running and you have initiated one more instance of it. Please make sure that spyder is not running already.
If you are on Linux OS, please launch spyder through terminal. Just open the terminal and type '''spyder''' and it will launch. When Spyder opens, make sure you see Anaconda with the version written on the Ipython console. If not, try changing the path of your anaconda. Follow these steps according to your OS version.

====Windows====
[https://stackoverflow.com/questions/44597662/conda-command-is-not-recognized-on-windows-10 Click Here]

====Linux====
[https://stackoverflow.com/questions/18675907/how-to-run-conda Click Here]

====Mac====
[https://stackoverflow.com/questions/35246386/conda-command-not-found Click Here]

In most of the cases relaunching Spyder works.
A more general Troubleshoot is present [https://github.com/spyder-ide/spyder/wiki/Troubleshooting-Guide-and-FAQ Here]

==How to run a program in Spyder IDE?==
Go to Run on the menu bar. Click Run-&gt;Run.

[[#TOP]]
==Print statements==
Print statements help to display output on console. 
{{#ev:youtube|https://youtu.be/gECkqaOwyt0|250|right}}

===Syntax===
print()

===How to print a message?===
In order to print a message in Python, write print(&quot;message&quot;).
Single, double, triple quote can be used print()

'''Example:'''

'''Single Quote'''
print('Hello')  
Output: Hello

'''Double Quote'''
print(&quot;Hello&quot;)  
Output: Hello

'''Quote within quote'''
print('Is &quot;Ram&quot; a good boy?')  
Output: Is &quot;Ram&quot; a good boy?

[[#TOP]]
==Escape sequences with strings==

We can use escape sequence within strings to make output more presentable.

'''\n'''  : It will move to next line.

'''\t'''  : It will add tab space(5space)

'''\a'''  : It will play system sound once.

'''Example:'''

Print(&quot;Hi, \n How are you?&quot;)

Output: 

Hi,

How are you?

Print(&quot;Hi, \t How are you?&quot;)

Output: 

Hi, &lt;5 spaces&gt; How are you?

[[File:Escape_Sequence.jpg]]

==Variables==
[[#Top]]
&lt;pre&gt;
Variables are used to store some values. Values can be strings, integers or decimal values.  
Variable Name Rules:
1. Variable name should start with alphabet

{{#ev:youtube|https://youtu.be/60iAXH1sm-Y|250|right}}
===How to print a variable?===
In order to print the value of a variable in python, first initialise the variable and then write 
&lt;pre&gt;print(variable_name)&lt;/pre&gt;
For example :
&lt;pre&gt;
  x=2
  print(x)
&lt;/pre&gt;

===Some facts about Variables===
* If you want to print variable name with a message, you can use , operator. For example : I want to print Hello Simran and Simran has been stored in a variable called ''name''.
  name=&quot;Simran&quot;
  print(&quot;Hello&quot;,name)
* If you change the value of a variable, it will store the latest value. For example :
  name=&quot;Simran&quot;
  name=&quot;Amit&quot;
  If you will execute the command ''print(name)'', Amit will be displayed.
* You can perform operations like addition, subtraction etc only on integral variables.
&lt;/pre&gt;

==How to execute couple of instructions on console?==
You can execute couple of instructions on console using ;. Write Statement 1;Statement 2;......and then press ''Enter''.
{{#ev:youtube|https://youtu.be/CYQCYvLE22Y|250|right}}









==How to take input from the user?==
We can take input from the user using ''input'' function. For Example : You want the user to input variable ''x'', then write x=input(&quot;Enter the value of x&quot;) and execute. Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNkVLCxZw_jcgyS-bmrIVSP

And when the input you need is of data type other than string. You can do both the input function and data conversion in a single line.
For example:
Consider the program for letting in the patients
'''c=input(&quot;Enter (1/0)&quot;);d=int(c)'''

Instead of using it in two separate lines, combine it into a single line
'''c=int(input(&quot;Enter (1/0)&quot;))'''.

To get two inputs in same line with a space between them split() is used.

a,b=input(&quot;enter a&quot;).split(&quot;enter b&quot;)
----
[[#Top]]

==If statement==
If statement is used to execute set of two contrary statements based on a condition. 

===Syntax===
If (Condition):
    Statement 1
else:
    Statement 2

If 'Condition' is true then 'Statement 1' will be executed otherwise 'Statement 2' will be executed.

Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNhHmg3SkK1uiutigcAbH9K

==Loops==
[[#Top]]&lt;br&gt;
Loops in a programming languages are used to execute set of repetitive statements. For loop and while loop are used extensively to execute a set of looping instructions.

=== For loop Syntax ===
&lt;pre&gt;
for i in range(10): 
    Statement
&lt;/pre&gt;
range(10) indicate that values 0 to 9 will be assigned to the variable i and for each value of i the Statement will be executed, e.g.
&lt;pre&gt;
for i in range(10): 
    print(i)
&lt;/pre&gt;
Output will be
&lt;pre&gt;
0
1
2
3
4
5
6
7
8
9
&lt;/pre&gt;

[[#Top]]

=== While loop Syntax ===
&lt;pre&gt;
intialisation

while(condition):
   Statement
   increment/decrement
&lt;/pre&gt;
e.g.
&lt;pre&gt;
#initialization
i=0
while(i&lt;10): 
    print(i)
    i=i+1
&lt;/pre&gt;
Output will be:
&lt;pre&gt;
0
1
2
3
4
5
6
7
8
9
&lt;/pre&gt;
Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNbl5jkVrrw1E5XSvm3GiCI

[[#TOP]]
==Importance of Indentation in Python==
Indentation is used to indicate to what block of statements belong. Indentation of blocks convey program structure in Python. Indentation in Python is used to refer a group/block of code/statements. In C++ we use { and } (curly brackets) to group a set of statements. But in Python, there are no such brackets used. Instead of such brackets used in other programming languages, we use indentation in Python.
Use tabs,instead of spaces for ease of writing code.

Wrong indentation can lead to syntax error, or makes your output wrong for your logic e.g.
&lt;pre&gt;
#IndentationError: expected an indented block
i=-1
if i&lt;0:
print(&quot;Test successful&quot;)#Wrong indentation 
else:    
    print(&quot;Test failed&quot;)
#Output: IndentationError: expected an indented block
&lt;/pre&gt;
---
&lt;pre&gt;
#Properly Indented code:
i=-1
if i&lt;0:
    print(&quot;Test successful&quot;)#Wrong indentation
else:    
    print(&quot;Test failed&quot;)
#Output:Test successful
&lt;/pre&gt;
---
Logic changed, so output changed, with improper indentation, e.g.
---
&lt;h3&gt;Code : 1&lt;/h3&gt;
&lt;pre&gt;
sum=0
for i in range(5):
    for j in range(5):
        sum+=i
print(sum, end=&quot; &quot;)
#Output: 50
&lt;/pre&gt;
        
&lt;h3&gt;Code : 2&lt;/h3&gt;
&lt;pre&gt;
for i in range(5):
    for j in range(5):
        print(end=&quot; &quot;)
    sum+=i
print(sum, end=&quot; &quot;)
#Output:                          10
&lt;/pre&gt;
{{#ev:youtube|https://youtu.be/pmavoW419Yc|250|right}}&lt;br&gt;

[[#Top]]

==Spyder IDE Black Screen Solution==

----

 This issue is because of ''Help'' screen which is by default open. 
 We need to close it. So here's how you do it-


===Method 1:===

Step 1-    Try by closing current pane for that,  &quot;''press ctrl+shift+F4''&quot;  wait for few seconds things will appear on screen.

Step 2-    If it so than on menu bar go to ''view &gt; panes &gt; help'' unchecked &quot;''Help''&quot; option.

Step 3-    Make sure that &quot;''Help''&quot; under ''view &gt; panes'' is permanently unchecked. And ''Editor, Ipython console, Variable explorer''  are checked. 


===Method 2:===

Step 1-    Open spyder.

Step 2-   On that black screen randomly ''Left click'' on spyder &quot;''Menu bar''&quot; area you will get menu drop downs, You have to find Drop down with &quot;''Panes''&quot; option.

Step 3-   On &quot;''Panes''&quot; drop down unchecked the &quot;''Help''&quot;.

Step 4-   Wait for few seconds Spyder view will appear.

Step 5 -  Make sure that ''&quot;Help&quot;'' under view&gt;panes is permanently unchecked. And ''Editor, Ipython console, variable explorer'' are checked.


[[#Top]]</text>
      <sha1>qjosq70t7w40yyf2d1byj8hqndazjms</sha1>
    </revision>
    <revision>
      <id>3521</id>
      <parentid>3520</parentid>
      <timestamp>2018-09-28T01:54:21Z</timestamp>
      <contributor>
        <username>Sachinkr</username>
        <id>1743</id>
      </contributor>
      <comment>/* Variables */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="10911">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_2 Contributors of this page]
==Introduction to Python==
Python is a widely used programming language which allows programmers to write the program in fewer lines of code. It was designed by Guido van Rossum in 1991. Python uses an interpreter instead of compiler.Basically, the main difference between compiler and interpreter is that the compiler takes the code as 'whole' and compiles it..for example in C language and on the other side in interpreter..example: languages like Python...it interprets the written code 'line by line', and if somewhere error is found...it stops interpreting the code from there itself. Here, in our course we will be using Spyder IDE. Spyder is an integrated development environment with editing options to assist the programmers in writing programs. Spyder IDE is divided into two panes, one is console and other one is where program is written.




Python works on different platforms (Windows, Mac, Linux, Raspberry Pi, etc).
Python has a simple syntax similar to the English language.
Python has syntax that allows developers to write programs with fewer lines than some other programming languages.
Python runs on an interpreter system, meaning that code can be executed as soon as it is written. This means that prototyping can be very quick.
Python can be treated in a procedural way, an object-orientated way or a functional way.

==Installing Anaconda==
[[#Top]]
This article is all about installing and troubleshooting Anaconda and Spyder on different platforms.

===Windows===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#windows Download Link]. Make sure that you download the version compatible to your operating system architecture. If you have a 64 bit OS then you can download either 64 bit of 32 bit, but if you have 32 bit OS then you should download the 32 bit version only.

Step 2 -&gt; Double click on the .exe file that you downloaded just now and follow the instructions. If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open cmd (go to Start -&gt; then type cmd in the search bar and hit enter). There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

===Mac===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#macos Download Link].

Step 2 -&gt; Double click on the .pkg file that you just downloaded. If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

===Linux===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#linux Download Link].

Step 2 -&gt; Go to the folder where you downloaded the .sh file and type following command 

  '''bash Anaconda-latest-Linux-x86_64.sh'''

If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

==Troubleshooting Spyder==

[[#Top]]

In most of the cases, it happens that Spyder is already running and you have initiated one more instance of it. Please make sure that spyder is not running already.
If you are on Linux OS, please launch spyder through terminal. Just open the terminal and type '''spyder''' and it will launch. When Spyder opens, make sure you see Anaconda with the version written on the Ipython console. If not, try changing the path of your anaconda. Follow these steps according to your OS version.

====Windows====
[https://stackoverflow.com/questions/44597662/conda-command-is-not-recognized-on-windows-10 Click Here]

====Linux====
[https://stackoverflow.com/questions/18675907/how-to-run-conda Click Here]

====Mac====
[https://stackoverflow.com/questions/35246386/conda-command-not-found Click Here]

In most of the cases relaunching Spyder works.
A more general Troubleshoot is present [https://github.com/spyder-ide/spyder/wiki/Troubleshooting-Guide-and-FAQ Here]

==How to run a program in Spyder IDE?==
Go to Run on the menu bar. Click Run-&gt;Run.

[[#TOP]]
==Print statements==
Print statements help to display output on console. 
{{#ev:youtube|https://youtu.be/gECkqaOwyt0|250|right}}

===Syntax===
print()

===How to print a message?===
In order to print a message in Python, write print(&quot;message&quot;).
Single, double, triple quote can be used print()

'''Example:'''

'''Single Quote'''
print('Hello')  
Output: Hello

'''Double Quote'''
print(&quot;Hello&quot;)  
Output: Hello

'''Quote within quote'''
print('Is &quot;Ram&quot; a good boy?')  
Output: Is &quot;Ram&quot; a good boy?

[[#TOP]]
==Escape sequences with strings==

We can use escape sequence within strings to make output more presentable.

'''\n'''  : It will move to next line.

'''\t'''  : It will add tab space(5space)

'''\a'''  : It will play system sound once.

'''Example:'''

Print(&quot;Hi, \n How are you?&quot;)

Output: 

Hi,

How are you?

Print(&quot;Hi, \t How are you?&quot;)

Output: 

Hi, &lt;5 spaces&gt; How are you?

[[File:Escape_Sequence.jpg]]

==Variables==
[[#Top]]
&lt;pre&gt;
Variables are used to store some values. Values can be strings, integers or decimal values.  
Variable Name Rules:
1. Variable name should start with alphabet or underscore

{{#ev:youtube|https://youtu.be/60iAXH1sm-Y|250|right}}
===How to print a variable?===
In order to print the value of a variable in python, first initialise the variable and then write 
&lt;pre&gt;print(variable_name)&lt;/pre&gt;
For example :
&lt;pre&gt;
  x=2
  print(x)
&lt;/pre&gt;

===Some facts about Variables===
* If you want to print variable name with a message, you can use , operator. For example : I want to print Hello Simran and Simran has been stored in a variable called ''name''.
  name=&quot;Simran&quot;
  print(&quot;Hello&quot;,name)
* If you change the value of a variable, it will store the latest value. For example :
  name=&quot;Simran&quot;
  name=&quot;Amit&quot;
  If you will execute the command ''print(name)'', Amit will be displayed.
* You can perform operations like addition, subtraction etc only on integral variables.
&lt;/pre&gt;

==How to execute couple of instructions on console?==
You can execute couple of instructions on console using ;. Write Statement 1;Statement 2;......and then press ''Enter''.
{{#ev:youtube|https://youtu.be/CYQCYvLE22Y|250|right}}









==How to take input from the user?==
We can take input from the user using ''input'' function. For Example : You want the user to input variable ''x'', then write x=input(&quot;Enter the value of x&quot;) and execute. Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNkVLCxZw_jcgyS-bmrIVSP

And when the input you need is of data type other than string. You can do both the input function and data conversion in a single line.
For example:
Consider the program for letting in the patients
'''c=input(&quot;Enter (1/0)&quot;);d=int(c)'''

Instead of using it in two separate lines, combine it into a single line
'''c=int(input(&quot;Enter (1/0)&quot;))'''.

To get two inputs in same line with a space between them split() is used.

a,b=input(&quot;enter a&quot;).split(&quot;enter b&quot;)
----
[[#Top]]

==If statement==
If statement is used to execute set of two contrary statements based on a condition. 

===Syntax===
If (Condition):
    Statement 1
else:
    Statement 2

If 'Condition' is true then 'Statement 1' will be executed otherwise 'Statement 2' will be executed.

Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNhHmg3SkK1uiutigcAbH9K

==Loops==
[[#Top]]&lt;br&gt;
Loops in a programming languages are used to execute set of repetitive statements. For loop and while loop are used extensively to execute a set of looping instructions.

=== For loop Syntax ===
&lt;pre&gt;
for i in range(10): 
    Statement
&lt;/pre&gt;
range(10) indicate that values 0 to 9 will be assigned to the variable i and for each value of i the Statement will be executed, e.g.
&lt;pre&gt;
for i in range(10): 
    print(i)
&lt;/pre&gt;
Output will be
&lt;pre&gt;
0
1
2
3
4
5
6
7
8
9
&lt;/pre&gt;

[[#Top]]

=== While loop Syntax ===
&lt;pre&gt;
intialisation

while(condition):
   Statement
   increment/decrement
&lt;/pre&gt;
e.g.
&lt;pre&gt;
#initialization
i=0
while(i&lt;10): 
    print(i)
    i=i+1
&lt;/pre&gt;
Output will be:
&lt;pre&gt;
0
1
2
3
4
5
6
7
8
9
&lt;/pre&gt;
Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNbl5jkVrrw1E5XSvm3GiCI

[[#TOP]]
==Importance of Indentation in Python==
Indentation is used to indicate to what block of statements belong. Indentation of blocks convey program structure in Python. Indentation in Python is used to refer a group/block of code/statements. In C++ we use { and } (curly brackets) to group a set of statements. But in Python, there are no such brackets used. Instead of such brackets used in other programming languages, we use indentation in Python.
Use tabs,instead of spaces for ease of writing code.

Wrong indentation can lead to syntax error, or makes your output wrong for your logic e.g.
&lt;pre&gt;
#IndentationError: expected an indented block
i=-1
if i&lt;0:
print(&quot;Test successful&quot;)#Wrong indentation 
else:    
    print(&quot;Test failed&quot;)
#Output: IndentationError: expected an indented block
&lt;/pre&gt;
---
&lt;pre&gt;
#Properly Indented code:
i=-1
if i&lt;0:
    print(&quot;Test successful&quot;)#Wrong indentation
else:    
    print(&quot;Test failed&quot;)
#Output:Test successful
&lt;/pre&gt;
---
Logic changed, so output changed, with improper indentation, e.g.
---
&lt;h3&gt;Code : 1&lt;/h3&gt;
&lt;pre&gt;
sum=0
for i in range(5):
    for j in range(5):
        sum+=i
print(sum, end=&quot; &quot;)
#Output: 50
&lt;/pre&gt;
        
&lt;h3&gt;Code : 2&lt;/h3&gt;
&lt;pre&gt;
for i in range(5):
    for j in range(5):
        print(end=&quot; &quot;)
    sum+=i
print(sum, end=&quot; &quot;)
#Output:                          10
&lt;/pre&gt;
{{#ev:youtube|https://youtu.be/pmavoW419Yc|250|right}}&lt;br&gt;

[[#Top]]

==Spyder IDE Black Screen Solution==

----

 This issue is because of ''Help'' screen which is by default open. 
 We need to close it. So here's how you do it-


===Method 1:===

Step 1-    Try by closing current pane for that,  &quot;''press ctrl+shift+F4''&quot;  wait for few seconds things will appear on screen.

Step 2-    If it so than on menu bar go to ''view &gt; panes &gt; help'' unchecked &quot;''Help''&quot; option.

Step 3-    Make sure that &quot;''Help''&quot; under ''view &gt; panes'' is permanently unchecked. And ''Editor, Ipython console, Variable explorer''  are checked. 


===Method 2:===

Step 1-    Open spyder.

Step 2-   On that black screen randomly ''Left click'' on spyder &quot;''Menu bar''&quot; area you will get menu drop downs, You have to find Drop down with &quot;''Panes''&quot; option.

Step 3-   On &quot;''Panes''&quot; drop down unchecked the &quot;''Help''&quot;.

Step 4-   Wait for few seconds Spyder view will appear.

Step 5 -  Make sure that ''&quot;Help&quot;'' under view&gt;panes is permanently unchecked. And ''Editor, Ipython console, variable explorer'' are checked.


[[#Top]]</text>
      <sha1>dd9w065wkvo19lriu0sc59mv2vjxt6f</sha1>
    </revision>
    <revision>
      <id>3522</id>
      <parentid>3521</parentid>
      <timestamp>2018-09-28T01:55:03Z</timestamp>
      <contributor>
        <username>Sachinkr</username>
        <id>1743</id>
      </contributor>
      <comment>/* Variables */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="10949">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_2 Contributors of this page]
==Introduction to Python==
Python is a widely used programming language which allows programmers to write the program in fewer lines of code. It was designed by Guido van Rossum in 1991. Python uses an interpreter instead of compiler.Basically, the main difference between compiler and interpreter is that the compiler takes the code as 'whole' and compiles it..for example in C language and on the other side in interpreter..example: languages like Python...it interprets the written code 'line by line', and if somewhere error is found...it stops interpreting the code from there itself. Here, in our course we will be using Spyder IDE. Spyder is an integrated development environment with editing options to assist the programmers in writing programs. Spyder IDE is divided into two panes, one is console and other one is where program is written.




Python works on different platforms (Windows, Mac, Linux, Raspberry Pi, etc).
Python has a simple syntax similar to the English language.
Python has syntax that allows developers to write programs with fewer lines than some other programming languages.
Python runs on an interpreter system, meaning that code can be executed as soon as it is written. This means that prototyping can be very quick.
Python can be treated in a procedural way, an object-orientated way or a functional way.

==Installing Anaconda==
[[#Top]]
This article is all about installing and troubleshooting Anaconda and Spyder on different platforms.

===Windows===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#windows Download Link]. Make sure that you download the version compatible to your operating system architecture. If you have a 64 bit OS then you can download either 64 bit of 32 bit, but if you have 32 bit OS then you should download the 32 bit version only.

Step 2 -&gt; Double click on the .exe file that you downloaded just now and follow the instructions. If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open cmd (go to Start -&gt; then type cmd in the search bar and hit enter). There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

===Mac===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#macos Download Link].

Step 2 -&gt; Double click on the .pkg file that you just downloaded. If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

===Linux===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#linux Download Link].

Step 2 -&gt; Go to the folder where you downloaded the .sh file and type following command 

  '''bash Anaconda-latest-Linux-x86_64.sh'''

If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

==Troubleshooting Spyder==

[[#Top]]

In most of the cases, it happens that Spyder is already running and you have initiated one more instance of it. Please make sure that spyder is not running already.
If you are on Linux OS, please launch spyder through terminal. Just open the terminal and type '''spyder''' and it will launch. When Spyder opens, make sure you see Anaconda with the version written on the Ipython console. If not, try changing the path of your anaconda. Follow these steps according to your OS version.

====Windows====
[https://stackoverflow.com/questions/44597662/conda-command-is-not-recognized-on-windows-10 Click Here]

====Linux====
[https://stackoverflow.com/questions/18675907/how-to-run-conda Click Here]

====Mac====
[https://stackoverflow.com/questions/35246386/conda-command-not-found Click Here]

In most of the cases relaunching Spyder works.
A more general Troubleshoot is present [https://github.com/spyder-ide/spyder/wiki/Troubleshooting-Guide-and-FAQ Here]

==How to run a program in Spyder IDE?==
Go to Run on the menu bar. Click Run-&gt;Run.

[[#TOP]]
==Print statements==
Print statements help to display output on console. 
{{#ev:youtube|https://youtu.be/gECkqaOwyt0|250|right}}

===Syntax===
print()

===How to print a message?===
In order to print a message in Python, write print(&quot;message&quot;).
Single, double, triple quote can be used print()

'''Example:'''

'''Single Quote'''
print('Hello')  
Output: Hello

'''Double Quote'''
print(&quot;Hello&quot;)  
Output: Hello

'''Quote within quote'''
print('Is &quot;Ram&quot; a good boy?')  
Output: Is &quot;Ram&quot; a good boy?

[[#TOP]]
==Escape sequences with strings==

We can use escape sequence within strings to make output more presentable.

'''\n'''  : It will move to next line.

'''\t'''  : It will add tab space(5space)

'''\a'''  : It will play system sound once.

'''Example:'''

Print(&quot;Hi, \n How are you?&quot;)

Output: 

Hi,

How are you?

Print(&quot;Hi, \t How are you?&quot;)

Output: 

Hi, &lt;5 spaces&gt; How are you?

[[File:Escape_Sequence.jpg]]

==Variables==
[[#Top]]
&lt;pre&gt;
Variables are used to store some values. Values can be strings, integers or decimal values.  
Variable Name Rules:
1. Variable name should start with alphabet or underscore. Variable name cant start with number.
&lt;/pre&gt;
{{#ev:youtube|https://youtu.be/60iAXH1sm-Y|250|right}}
===How to print a variable?===
In order to print the value of a variable in python, first initialise the variable and then write 
&lt;pre&gt;print(variable_name)&lt;/pre&gt;
For example :
&lt;pre&gt;
  x=2
  print(x)
&lt;/pre&gt;

===Some facts about Variables===
* If you want to print variable name with a message, you can use , operator. For example : I want to print Hello Simran and Simran has been stored in a variable called ''name''.
  name=&quot;Simran&quot;
  print(&quot;Hello&quot;,name)
* If you change the value of a variable, it will store the latest value. For example :
  name=&quot;Simran&quot;
  name=&quot;Amit&quot;
  If you will execute the command ''print(name)'', Amit will be displayed.
* You can perform operations like addition, subtraction etc only on integral variables.

==How to execute couple of instructions on console?==
You can execute couple of instructions on console using ;. Write Statement 1;Statement 2;......and then press ''Enter''.
{{#ev:youtube|https://youtu.be/CYQCYvLE22Y|250|right}}









==How to take input from the user?==
We can take input from the user using ''input'' function. For Example : You want the user to input variable ''x'', then write x=input(&quot;Enter the value of x&quot;) and execute. Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNkVLCxZw_jcgyS-bmrIVSP

And when the input you need is of data type other than string. You can do both the input function and data conversion in a single line.
For example:
Consider the program for letting in the patients
'''c=input(&quot;Enter (1/0)&quot;);d=int(c)'''

Instead of using it in two separate lines, combine it into a single line
'''c=int(input(&quot;Enter (1/0)&quot;))'''.

To get two inputs in same line with a space between them split() is used.

a,b=input(&quot;enter a&quot;).split(&quot;enter b&quot;)
----
[[#Top]]

==If statement==
If statement is used to execute set of two contrary statements based on a condition. 

===Syntax===
If (Condition):
    Statement 1
else:
    Statement 2

If 'Condition' is true then 'Statement 1' will be executed otherwise 'Statement 2' will be executed.

Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNhHmg3SkK1uiutigcAbH9K

==Loops==
[[#Top]]&lt;br&gt;
Loops in a programming languages are used to execute set of repetitive statements. For loop and while loop are used extensively to execute a set of looping instructions.

=== For loop Syntax ===
&lt;pre&gt;
for i in range(10): 
    Statement
&lt;/pre&gt;
range(10) indicate that values 0 to 9 will be assigned to the variable i and for each value of i the Statement will be executed, e.g.
&lt;pre&gt;
for i in range(10): 
    print(i)
&lt;/pre&gt;
Output will be
&lt;pre&gt;
0
1
2
3
4
5
6
7
8
9
&lt;/pre&gt;

[[#Top]]

=== While loop Syntax ===
&lt;pre&gt;
intialisation

while(condition):
   Statement
   increment/decrement
&lt;/pre&gt;
e.g.
&lt;pre&gt;
#initialization
i=0
while(i&lt;10): 
    print(i)
    i=i+1
&lt;/pre&gt;
Output will be:
&lt;pre&gt;
0
1
2
3
4
5
6
7
8
9
&lt;/pre&gt;
Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNbl5jkVrrw1E5XSvm3GiCI

[[#TOP]]
==Importance of Indentation in Python==
Indentation is used to indicate to what block of statements belong. Indentation of blocks convey program structure in Python. Indentation in Python is used to refer a group/block of code/statements. In C++ we use { and } (curly brackets) to group a set of statements. But in Python, there are no such brackets used. Instead of such brackets used in other programming languages, we use indentation in Python.
Use tabs,instead of spaces for ease of writing code.

Wrong indentation can lead to syntax error, or makes your output wrong for your logic e.g.
&lt;pre&gt;
#IndentationError: expected an indented block
i=-1
if i&lt;0:
print(&quot;Test successful&quot;)#Wrong indentation 
else:    
    print(&quot;Test failed&quot;)
#Output: IndentationError: expected an indented block
&lt;/pre&gt;
---
&lt;pre&gt;
#Properly Indented code:
i=-1
if i&lt;0:
    print(&quot;Test successful&quot;)#Wrong indentation
else:    
    print(&quot;Test failed&quot;)
#Output:Test successful
&lt;/pre&gt;
---
Logic changed, so output changed, with improper indentation, e.g.
---
&lt;h3&gt;Code : 1&lt;/h3&gt;
&lt;pre&gt;
sum=0
for i in range(5):
    for j in range(5):
        sum+=i
print(sum, end=&quot; &quot;)
#Output: 50
&lt;/pre&gt;
        
&lt;h3&gt;Code : 2&lt;/h3&gt;
&lt;pre&gt;
for i in range(5):
    for j in range(5):
        print(end=&quot; &quot;)
    sum+=i
print(sum, end=&quot; &quot;)
#Output:                          10
&lt;/pre&gt;
{{#ev:youtube|https://youtu.be/pmavoW419Yc|250|right}}&lt;br&gt;

[[#Top]]

==Spyder IDE Black Screen Solution==

----

 This issue is because of ''Help'' screen which is by default open. 
 We need to close it. So here's how you do it-


===Method 1:===

Step 1-    Try by closing current pane for that,  &quot;''press ctrl+shift+F4''&quot;  wait for few seconds things will appear on screen.

Step 2-    If it so than on menu bar go to ''view &gt; panes &gt; help'' unchecked &quot;''Help''&quot; option.

Step 3-    Make sure that &quot;''Help''&quot; under ''view &gt; panes'' is permanently unchecked. And ''Editor, Ipython console, Variable explorer''  are checked. 


===Method 2:===

Step 1-    Open spyder.

Step 2-   On that black screen randomly ''Left click'' on spyder &quot;''Menu bar''&quot; area you will get menu drop downs, You have to find Drop down with &quot;''Panes''&quot; option.

Step 3-   On &quot;''Panes''&quot; drop down unchecked the &quot;''Help''&quot;.

Step 4-   Wait for few seconds Spyder view will appear.

Step 5 -  Make sure that ''&quot;Help&quot;'' under view&gt;panes is permanently unchecked. And ''Editor, Ipython console, variable explorer'' are checked.


[[#Top]]</text>
      <sha1>0ou5u6xecjlnkiag684z3cu08oei77e</sha1>
    </revision>
    <revision>
      <id>3523</id>
      <parentid>3522</parentid>
      <timestamp>2018-09-28T01:56:21Z</timestamp>
      <contributor>
        <username>Sachinkr</username>
        <id>1743</id>
      </contributor>
      <comment>/* Variables */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="10992">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_2 Contributors of this page]
==Introduction to Python==
Python is a widely used programming language which allows programmers to write the program in fewer lines of code. It was designed by Guido van Rossum in 1991. Python uses an interpreter instead of compiler.Basically, the main difference between compiler and interpreter is that the compiler takes the code as 'whole' and compiles it..for example in C language and on the other side in interpreter..example: languages like Python...it interprets the written code 'line by line', and if somewhere error is found...it stops interpreting the code from there itself. Here, in our course we will be using Spyder IDE. Spyder is an integrated development environment with editing options to assist the programmers in writing programs. Spyder IDE is divided into two panes, one is console and other one is where program is written.




Python works on different platforms (Windows, Mac, Linux, Raspberry Pi, etc).
Python has a simple syntax similar to the English language.
Python has syntax that allows developers to write programs with fewer lines than some other programming languages.
Python runs on an interpreter system, meaning that code can be executed as soon as it is written. This means that prototyping can be very quick.
Python can be treated in a procedural way, an object-orientated way or a functional way.

==Installing Anaconda==
[[#Top]]
This article is all about installing and troubleshooting Anaconda and Spyder on different platforms.

===Windows===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#windows Download Link]. Make sure that you download the version compatible to your operating system architecture. If you have a 64 bit OS then you can download either 64 bit of 32 bit, but if you have 32 bit OS then you should download the 32 bit version only.

Step 2 -&gt; Double click on the .exe file that you downloaded just now and follow the instructions. If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open cmd (go to Start -&gt; then type cmd in the search bar and hit enter). There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

===Mac===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#macos Download Link].

Step 2 -&gt; Double click on the .pkg file that you just downloaded. If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

===Linux===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#linux Download Link].

Step 2 -&gt; Go to the folder where you downloaded the .sh file and type following command 

  '''bash Anaconda-latest-Linux-x86_64.sh'''

If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

==Troubleshooting Spyder==

[[#Top]]

In most of the cases, it happens that Spyder is already running and you have initiated one more instance of it. Please make sure that spyder is not running already.
If you are on Linux OS, please launch spyder through terminal. Just open the terminal and type '''spyder''' and it will launch. When Spyder opens, make sure you see Anaconda with the version written on the Ipython console. If not, try changing the path of your anaconda. Follow these steps according to your OS version.

====Windows====
[https://stackoverflow.com/questions/44597662/conda-command-is-not-recognized-on-windows-10 Click Here]

====Linux====
[https://stackoverflow.com/questions/18675907/how-to-run-conda Click Here]

====Mac====
[https://stackoverflow.com/questions/35246386/conda-command-not-found Click Here]

In most of the cases relaunching Spyder works.
A more general Troubleshoot is present [https://github.com/spyder-ide/spyder/wiki/Troubleshooting-Guide-and-FAQ Here]

==How to run a program in Spyder IDE?==
Go to Run on the menu bar. Click Run-&gt;Run.

[[#TOP]]
==Print statements==
Print statements help to display output on console. 
{{#ev:youtube|https://youtu.be/gECkqaOwyt0|250|right}}

===Syntax===
print()

===How to print a message?===
In order to print a message in Python, write print(&quot;message&quot;).
Single, double, triple quote can be used print()

'''Example:'''

'''Single Quote'''
print('Hello')  
Output: Hello

'''Double Quote'''
print(&quot;Hello&quot;)  
Output: Hello

'''Quote within quote'''
print('Is &quot;Ram&quot; a good boy?')  
Output: Is &quot;Ram&quot; a good boy?

[[#TOP]]
==Escape sequences with strings==

We can use escape sequence within strings to make output more presentable.

'''\n'''  : It will move to next line.

'''\t'''  : It will add tab space(5space)

'''\a'''  : It will play system sound once.

'''Example:'''

Print(&quot;Hi, \n How are you?&quot;)

Output: 

Hi,

How are you?

Print(&quot;Hi, \t How are you?&quot;)

Output: 

Hi, &lt;5 spaces&gt; How are you?

[[File:Escape_Sequence.jpg]]

==Variables==
[[#Top]]
&lt;pre&gt;
Variables are used to store some values. Values can be strings, integers or decimal values.  
Variable Name Rules:
1. Variable name should start with alphabet or underscore. Variable name cant start with number.
Example:
Valid: JOC, WIKI, JOC_WIKI, _JOC

&lt;/pre&gt;
{{#ev:youtube|https://youtu.be/60iAXH1sm-Y|250|right}}
===How to print a variable?===
In order to print the value of a variable in python, first initialise the variable and then write 
&lt;pre&gt;print(variable_name)&lt;/pre&gt;
For example :
&lt;pre&gt;
  x=2
  print(x)
&lt;/pre&gt;

===Some facts about Variables===
* If you want to print variable name with a message, you can use , operator. For example : I want to print Hello Simran and Simran has been stored in a variable called ''name''.
  name=&quot;Simran&quot;
  print(&quot;Hello&quot;,name)
* If you change the value of a variable, it will store the latest value. For example :
  name=&quot;Simran&quot;
  name=&quot;Amit&quot;
  If you will execute the command ''print(name)'', Amit will be displayed.
* You can perform operations like addition, subtraction etc only on integral variables.

==How to execute couple of instructions on console?==
You can execute couple of instructions on console using ;. Write Statement 1;Statement 2;......and then press ''Enter''.
{{#ev:youtube|https://youtu.be/CYQCYvLE22Y|250|right}}









==How to take input from the user?==
We can take input from the user using ''input'' function. For Example : You want the user to input variable ''x'', then write x=input(&quot;Enter the value of x&quot;) and execute. Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNkVLCxZw_jcgyS-bmrIVSP

And when the input you need is of data type other than string. You can do both the input function and data conversion in a single line.
For example:
Consider the program for letting in the patients
'''c=input(&quot;Enter (1/0)&quot;);d=int(c)'''

Instead of using it in two separate lines, combine it into a single line
'''c=int(input(&quot;Enter (1/0)&quot;))'''.

To get two inputs in same line with a space between them split() is used.

a,b=input(&quot;enter a&quot;).split(&quot;enter b&quot;)
----
[[#Top]]

==If statement==
If statement is used to execute set of two contrary statements based on a condition. 

===Syntax===
If (Condition):
    Statement 1
else:
    Statement 2

If 'Condition' is true then 'Statement 1' will be executed otherwise 'Statement 2' will be executed.

Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNhHmg3SkK1uiutigcAbH9K

==Loops==
[[#Top]]&lt;br&gt;
Loops in a programming languages are used to execute set of repetitive statements. For loop and while loop are used extensively to execute a set of looping instructions.

=== For loop Syntax ===
&lt;pre&gt;
for i in range(10): 
    Statement
&lt;/pre&gt;
range(10) indicate that values 0 to 9 will be assigned to the variable i and for each value of i the Statement will be executed, e.g.
&lt;pre&gt;
for i in range(10): 
    print(i)
&lt;/pre&gt;
Output will be
&lt;pre&gt;
0
1
2
3
4
5
6
7
8
9
&lt;/pre&gt;

[[#Top]]

=== While loop Syntax ===
&lt;pre&gt;
intialisation

while(condition):
   Statement
   increment/decrement
&lt;/pre&gt;
e.g.
&lt;pre&gt;
#initialization
i=0
while(i&lt;10): 
    print(i)
    i=i+1
&lt;/pre&gt;
Output will be:
&lt;pre&gt;
0
1
2
3
4
5
6
7
8
9
&lt;/pre&gt;
Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNbl5jkVrrw1E5XSvm3GiCI

[[#TOP]]
==Importance of Indentation in Python==
Indentation is used to indicate to what block of statements belong. Indentation of blocks convey program structure in Python. Indentation in Python is used to refer a group/block of code/statements. In C++ we use { and } (curly brackets) to group a set of statements. But in Python, there are no such brackets used. Instead of such brackets used in other programming languages, we use indentation in Python.
Use tabs,instead of spaces for ease of writing code.

Wrong indentation can lead to syntax error, or makes your output wrong for your logic e.g.
&lt;pre&gt;
#IndentationError: expected an indented block
i=-1
if i&lt;0:
print(&quot;Test successful&quot;)#Wrong indentation 
else:    
    print(&quot;Test failed&quot;)
#Output: IndentationError: expected an indented block
&lt;/pre&gt;
---
&lt;pre&gt;
#Properly Indented code:
i=-1
if i&lt;0:
    print(&quot;Test successful&quot;)#Wrong indentation
else:    
    print(&quot;Test failed&quot;)
#Output:Test successful
&lt;/pre&gt;
---
Logic changed, so output changed, with improper indentation, e.g.
---
&lt;h3&gt;Code : 1&lt;/h3&gt;
&lt;pre&gt;
sum=0
for i in range(5):
    for j in range(5):
        sum+=i
print(sum, end=&quot; &quot;)
#Output: 50
&lt;/pre&gt;
        
&lt;h3&gt;Code : 2&lt;/h3&gt;
&lt;pre&gt;
for i in range(5):
    for j in range(5):
        print(end=&quot; &quot;)
    sum+=i
print(sum, end=&quot; &quot;)
#Output:                          10
&lt;/pre&gt;
{{#ev:youtube|https://youtu.be/pmavoW419Yc|250|right}}&lt;br&gt;

[[#Top]]

==Spyder IDE Black Screen Solution==

----

 This issue is because of ''Help'' screen which is by default open. 
 We need to close it. So here's how you do it-


===Method 1:===

Step 1-    Try by closing current pane for that,  &quot;''press ctrl+shift+F4''&quot;  wait for few seconds things will appear on screen.

Step 2-    If it so than on menu bar go to ''view &gt; panes &gt; help'' unchecked &quot;''Help''&quot; option.

Step 3-    Make sure that &quot;''Help''&quot; under ''view &gt; panes'' is permanently unchecked. And ''Editor, Ipython console, Variable explorer''  are checked. 


===Method 2:===

Step 1-    Open spyder.

Step 2-   On that black screen randomly ''Left click'' on spyder &quot;''Menu bar''&quot; area you will get menu drop downs, You have to find Drop down with &quot;''Panes''&quot; option.

Step 3-   On &quot;''Panes''&quot; drop down unchecked the &quot;''Help''&quot;.

Step 4-   Wait for few seconds Spyder view will appear.

Step 5 -  Make sure that ''&quot;Help&quot;'' under view&gt;panes is permanently unchecked. And ''Editor, Ipython console, variable explorer'' are checked.


[[#Top]]</text>
      <sha1>0fid8nmhvyn3gd1kgjc1vvwofit7own</sha1>
    </revision>
    <revision>
      <id>3524</id>
      <parentid>3523</parentid>
      <timestamp>2018-09-28T01:56:36Z</timestamp>
      <contributor>
        <username>Sachinkr</username>
        <id>1743</id>
      </contributor>
      <comment>/* Variables */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="11002">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_2 Contributors of this page]
==Introduction to Python==
Python is a widely used programming language which allows programmers to write the program in fewer lines of code. It was designed by Guido van Rossum in 1991. Python uses an interpreter instead of compiler.Basically, the main difference between compiler and interpreter is that the compiler takes the code as 'whole' and compiles it..for example in C language and on the other side in interpreter..example: languages like Python...it interprets the written code 'line by line', and if somewhere error is found...it stops interpreting the code from there itself. Here, in our course we will be using Spyder IDE. Spyder is an integrated development environment with editing options to assist the programmers in writing programs. Spyder IDE is divided into two panes, one is console and other one is where program is written.




Python works on different platforms (Windows, Mac, Linux, Raspberry Pi, etc).
Python has a simple syntax similar to the English language.
Python has syntax that allows developers to write programs with fewer lines than some other programming languages.
Python runs on an interpreter system, meaning that code can be executed as soon as it is written. This means that prototyping can be very quick.
Python can be treated in a procedural way, an object-orientated way or a functional way.

==Installing Anaconda==
[[#Top]]
This article is all about installing and troubleshooting Anaconda and Spyder on different platforms.

===Windows===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#windows Download Link]. Make sure that you download the version compatible to your operating system architecture. If you have a 64 bit OS then you can download either 64 bit of 32 bit, but if you have 32 bit OS then you should download the 32 bit version only.

Step 2 -&gt; Double click on the .exe file that you downloaded just now and follow the instructions. If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open cmd (go to Start -&gt; then type cmd in the search bar and hit enter). There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

===Mac===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#macos Download Link].

Step 2 -&gt; Double click on the .pkg file that you just downloaded. If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

===Linux===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#linux Download Link].

Step 2 -&gt; Go to the folder where you downloaded the .sh file and type following command 

  '''bash Anaconda-latest-Linux-x86_64.sh'''

If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

==Troubleshooting Spyder==

[[#Top]]

In most of the cases, it happens that Spyder is already running and you have initiated one more instance of it. Please make sure that spyder is not running already.
If you are on Linux OS, please launch spyder through terminal. Just open the terminal and type '''spyder''' and it will launch. When Spyder opens, make sure you see Anaconda with the version written on the Ipython console. If not, try changing the path of your anaconda. Follow these steps according to your OS version.

====Windows====
[https://stackoverflow.com/questions/44597662/conda-command-is-not-recognized-on-windows-10 Click Here]

====Linux====
[https://stackoverflow.com/questions/18675907/how-to-run-conda Click Here]

====Mac====
[https://stackoverflow.com/questions/35246386/conda-command-not-found Click Here]

In most of the cases relaunching Spyder works.
A more general Troubleshoot is present [https://github.com/spyder-ide/spyder/wiki/Troubleshooting-Guide-and-FAQ Here]

==How to run a program in Spyder IDE?==
Go to Run on the menu bar. Click Run-&gt;Run.

[[#TOP]]
==Print statements==
Print statements help to display output on console. 
{{#ev:youtube|https://youtu.be/gECkqaOwyt0|250|right}}

===Syntax===
print()

===How to print a message?===
In order to print a message in Python, write print(&quot;message&quot;).
Single, double, triple quote can be used print()

'''Example:'''

'''Single Quote'''
print('Hello')  
Output: Hello

'''Double Quote'''
print(&quot;Hello&quot;)  
Output: Hello

'''Quote within quote'''
print('Is &quot;Ram&quot; a good boy?')  
Output: Is &quot;Ram&quot; a good boy?

[[#TOP]]
==Escape sequences with strings==

We can use escape sequence within strings to make output more presentable.

'''\n'''  : It will move to next line.

'''\t'''  : It will add tab space(5space)

'''\a'''  : It will play system sound once.

'''Example:'''

Print(&quot;Hi, \n How are you?&quot;)

Output: 

Hi,

How are you?

Print(&quot;Hi, \t How are you?&quot;)

Output: 

Hi, &lt;5 spaces&gt; How are you?

[[File:Escape_Sequence.jpg]]

==Variables==
[[#Top]]
&lt;pre&gt;
Variables are used to store some values. Values can be strings, integers or decimal values.  
Variable Name Rules:
1. Variable name should start with alphabet or underscore. Variable name cant start with number.
Example:
Valid: JOC, WIKI, JOC_WIKI, _JOC
Invalid: 

&lt;/pre&gt;
{{#ev:youtube|https://youtu.be/60iAXH1sm-Y|250|right}}
===How to print a variable?===
In order to print the value of a variable in python, first initialise the variable and then write 
&lt;pre&gt;print(variable_name)&lt;/pre&gt;
For example :
&lt;pre&gt;
  x=2
  print(x)
&lt;/pre&gt;

===Some facts about Variables===
* If you want to print variable name with a message, you can use , operator. For example : I want to print Hello Simran and Simran has been stored in a variable called ''name''.
  name=&quot;Simran&quot;
  print(&quot;Hello&quot;,name)
* If you change the value of a variable, it will store the latest value. For example :
  name=&quot;Simran&quot;
  name=&quot;Amit&quot;
  If you will execute the command ''print(name)'', Amit will be displayed.
* You can perform operations like addition, subtraction etc only on integral variables.

==How to execute couple of instructions on console?==
You can execute couple of instructions on console using ;. Write Statement 1;Statement 2;......and then press ''Enter''.
{{#ev:youtube|https://youtu.be/CYQCYvLE22Y|250|right}}









==How to take input from the user?==
We can take input from the user using ''input'' function. For Example : You want the user to input variable ''x'', then write x=input(&quot;Enter the value of x&quot;) and execute. Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNkVLCxZw_jcgyS-bmrIVSP

And when the input you need is of data type other than string. You can do both the input function and data conversion in a single line.
For example:
Consider the program for letting in the patients
'''c=input(&quot;Enter (1/0)&quot;);d=int(c)'''

Instead of using it in two separate lines, combine it into a single line
'''c=int(input(&quot;Enter (1/0)&quot;))'''.

To get two inputs in same line with a space between them split() is used.

a,b=input(&quot;enter a&quot;).split(&quot;enter b&quot;)
----
[[#Top]]

==If statement==
If statement is used to execute set of two contrary statements based on a condition. 

===Syntax===
If (Condition):
    Statement 1
else:
    Statement 2

If 'Condition' is true then 'Statement 1' will be executed otherwise 'Statement 2' will be executed.

Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNhHmg3SkK1uiutigcAbH9K

==Loops==
[[#Top]]&lt;br&gt;
Loops in a programming languages are used to execute set of repetitive statements. For loop and while loop are used extensively to execute a set of looping instructions.

=== For loop Syntax ===
&lt;pre&gt;
for i in range(10): 
    Statement
&lt;/pre&gt;
range(10) indicate that values 0 to 9 will be assigned to the variable i and for each value of i the Statement will be executed, e.g.
&lt;pre&gt;
for i in range(10): 
    print(i)
&lt;/pre&gt;
Output will be
&lt;pre&gt;
0
1
2
3
4
5
6
7
8
9
&lt;/pre&gt;

[[#Top]]

=== While loop Syntax ===
&lt;pre&gt;
intialisation

while(condition):
   Statement
   increment/decrement
&lt;/pre&gt;
e.g.
&lt;pre&gt;
#initialization
i=0
while(i&lt;10): 
    print(i)
    i=i+1
&lt;/pre&gt;
Output will be:
&lt;pre&gt;
0
1
2
3
4
5
6
7
8
9
&lt;/pre&gt;
Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNbl5jkVrrw1E5XSvm3GiCI

[[#TOP]]
==Importance of Indentation in Python==
Indentation is used to indicate to what block of statements belong. Indentation of blocks convey program structure in Python. Indentation in Python is used to refer a group/block of code/statements. In C++ we use { and } (curly brackets) to group a set of statements. But in Python, there are no such brackets used. Instead of such brackets used in other programming languages, we use indentation in Python.
Use tabs,instead of spaces for ease of writing code.

Wrong indentation can lead to syntax error, or makes your output wrong for your logic e.g.
&lt;pre&gt;
#IndentationError: expected an indented block
i=-1
if i&lt;0:
print(&quot;Test successful&quot;)#Wrong indentation 
else:    
    print(&quot;Test failed&quot;)
#Output: IndentationError: expected an indented block
&lt;/pre&gt;
---
&lt;pre&gt;
#Properly Indented code:
i=-1
if i&lt;0:
    print(&quot;Test successful&quot;)#Wrong indentation
else:    
    print(&quot;Test failed&quot;)
#Output:Test successful
&lt;/pre&gt;
---
Logic changed, so output changed, with improper indentation, e.g.
---
&lt;h3&gt;Code : 1&lt;/h3&gt;
&lt;pre&gt;
sum=0
for i in range(5):
    for j in range(5):
        sum+=i
print(sum, end=&quot; &quot;)
#Output: 50
&lt;/pre&gt;
        
&lt;h3&gt;Code : 2&lt;/h3&gt;
&lt;pre&gt;
for i in range(5):
    for j in range(5):
        print(end=&quot; &quot;)
    sum+=i
print(sum, end=&quot; &quot;)
#Output:                          10
&lt;/pre&gt;
{{#ev:youtube|https://youtu.be/pmavoW419Yc|250|right}}&lt;br&gt;

[[#Top]]

==Spyder IDE Black Screen Solution==

----

 This issue is because of ''Help'' screen which is by default open. 
 We need to close it. So here's how you do it-


===Method 1:===

Step 1-    Try by closing current pane for that,  &quot;''press ctrl+shift+F4''&quot;  wait for few seconds things will appear on screen.

Step 2-    If it so than on menu bar go to ''view &gt; panes &gt; help'' unchecked &quot;''Help''&quot; option.

Step 3-    Make sure that &quot;''Help''&quot; under ''view &gt; panes'' is permanently unchecked. And ''Editor, Ipython console, Variable explorer''  are checked. 


===Method 2:===

Step 1-    Open spyder.

Step 2-   On that black screen randomly ''Left click'' on spyder &quot;''Menu bar''&quot; area you will get menu drop downs, You have to find Drop down with &quot;''Panes''&quot; option.

Step 3-   On &quot;''Panes''&quot; drop down unchecked the &quot;''Help''&quot;.

Step 4-   Wait for few seconds Spyder view will appear.

Step 5 -  Make sure that ''&quot;Help&quot;'' under view&gt;panes is permanently unchecked. And ''Editor, Ipython console, variable explorer'' are checked.


[[#Top]]</text>
      <sha1>1c6brnv2sbitmooob0863y6qxflecyz</sha1>
    </revision>
    <revision>
      <id>3525</id>
      <parentid>3524</parentid>
      <timestamp>2018-09-28T01:57:06Z</timestamp>
      <contributor>
        <username>Sachinkr</username>
        <id>1743</id>
      </contributor>
      <comment>/* Variables */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="11023">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_2 Contributors of this page]
==Introduction to Python==
Python is a widely used programming language which allows programmers to write the program in fewer lines of code. It was designed by Guido van Rossum in 1991. Python uses an interpreter instead of compiler.Basically, the main difference between compiler and interpreter is that the compiler takes the code as 'whole' and compiles it..for example in C language and on the other side in interpreter..example: languages like Python...it interprets the written code 'line by line', and if somewhere error is found...it stops interpreting the code from there itself. Here, in our course we will be using Spyder IDE. Spyder is an integrated development environment with editing options to assist the programmers in writing programs. Spyder IDE is divided into two panes, one is console and other one is where program is written.




Python works on different platforms (Windows, Mac, Linux, Raspberry Pi, etc).
Python has a simple syntax similar to the English language.
Python has syntax that allows developers to write programs with fewer lines than some other programming languages.
Python runs on an interpreter system, meaning that code can be executed as soon as it is written. This means that prototyping can be very quick.
Python can be treated in a procedural way, an object-orientated way or a functional way.

==Installing Anaconda==
[[#Top]]
This article is all about installing and troubleshooting Anaconda and Spyder on different platforms.

===Windows===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#windows Download Link]. Make sure that you download the version compatible to your operating system architecture. If you have a 64 bit OS then you can download either 64 bit of 32 bit, but if you have 32 bit OS then you should download the 32 bit version only.

Step 2 -&gt; Double click on the .exe file that you downloaded just now and follow the instructions. If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open cmd (go to Start -&gt; then type cmd in the search bar and hit enter). There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

===Mac===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#macos Download Link].

Step 2 -&gt; Double click on the .pkg file that you just downloaded. If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

===Linux===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#linux Download Link].

Step 2 -&gt; Go to the folder where you downloaded the .sh file and type following command 

  '''bash Anaconda-latest-Linux-x86_64.sh'''

If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

==Troubleshooting Spyder==

[[#Top]]

In most of the cases, it happens that Spyder is already running and you have initiated one more instance of it. Please make sure that spyder is not running already.
If you are on Linux OS, please launch spyder through terminal. Just open the terminal and type '''spyder''' and it will launch. When Spyder opens, make sure you see Anaconda with the version written on the Ipython console. If not, try changing the path of your anaconda. Follow these steps according to your OS version.

====Windows====
[https://stackoverflow.com/questions/44597662/conda-command-is-not-recognized-on-windows-10 Click Here]

====Linux====
[https://stackoverflow.com/questions/18675907/how-to-run-conda Click Here]

====Mac====
[https://stackoverflow.com/questions/35246386/conda-command-not-found Click Here]

In most of the cases relaunching Spyder works.
A more general Troubleshoot is present [https://github.com/spyder-ide/spyder/wiki/Troubleshooting-Guide-and-FAQ Here]

==How to run a program in Spyder IDE?==
Go to Run on the menu bar. Click Run-&gt;Run.

[[#TOP]]
==Print statements==
Print statements help to display output on console. 
{{#ev:youtube|https://youtu.be/gECkqaOwyt0|250|right}}

===Syntax===
print()

===How to print a message?===
In order to print a message in Python, write print(&quot;message&quot;).
Single, double, triple quote can be used print()

'''Example:'''

'''Single Quote'''
print('Hello')  
Output: Hello

'''Double Quote'''
print(&quot;Hello&quot;)  
Output: Hello

'''Quote within quote'''
print('Is &quot;Ram&quot; a good boy?')  
Output: Is &quot;Ram&quot; a good boy?

[[#TOP]]
==Escape sequences with strings==

We can use escape sequence within strings to make output more presentable.

'''\n'''  : It will move to next line.

'''\t'''  : It will add tab space(5space)

'''\a'''  : It will play system sound once.

'''Example:'''

Print(&quot;Hi, \n How are you?&quot;)

Output: 

Hi,

How are you?

Print(&quot;Hi, \t How are you?&quot;)

Output: 

Hi, &lt;5 spaces&gt; How are you?

[[File:Escape_Sequence.jpg]]

==Variables==
[[#Top]]
&lt;pre&gt;
Variables are used to store some values. Values can be strings, integers or decimal values.  
Variable Name Rules:
1. Variable name should start with alphabet or underscore. Variable name cant start with number.
Example:
Valid: JOC, WIKI, JOC_WIKI, _JOC
Invalid: 1JOC, 123WIKI, 0_WIKI

&lt;/pre&gt;
{{#ev:youtube|https://youtu.be/60iAXH1sm-Y|250|right}}
===How to print a variable?===
In order to print the value of a variable in python, first initialise the variable and then write 
&lt;pre&gt;print(variable_name)&lt;/pre&gt;
For example :
&lt;pre&gt;
  x=2
  print(x)
&lt;/pre&gt;

===Some facts about Variables===
* If you want to print variable name with a message, you can use , operator. For example : I want to print Hello Simran and Simran has been stored in a variable called ''name''.
  name=&quot;Simran&quot;
  print(&quot;Hello&quot;,name)
* If you change the value of a variable, it will store the latest value. For example :
  name=&quot;Simran&quot;
  name=&quot;Amit&quot;
  If you will execute the command ''print(name)'', Amit will be displayed.
* You can perform operations like addition, subtraction etc only on integral variables.

==How to execute couple of instructions on console?==
You can execute couple of instructions on console using ;. Write Statement 1;Statement 2;......and then press ''Enter''.
{{#ev:youtube|https://youtu.be/CYQCYvLE22Y|250|right}}









==How to take input from the user?==
We can take input from the user using ''input'' function. For Example : You want the user to input variable ''x'', then write x=input(&quot;Enter the value of x&quot;) and execute. Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNkVLCxZw_jcgyS-bmrIVSP

And when the input you need is of data type other than string. You can do both the input function and data conversion in a single line.
For example:
Consider the program for letting in the patients
'''c=input(&quot;Enter (1/0)&quot;);d=int(c)'''

Instead of using it in two separate lines, combine it into a single line
'''c=int(input(&quot;Enter (1/0)&quot;))'''.

To get two inputs in same line with a space between them split() is used.

a,b=input(&quot;enter a&quot;).split(&quot;enter b&quot;)
----
[[#Top]]

==If statement==
If statement is used to execute set of two contrary statements based on a condition. 

===Syntax===
If (Condition):
    Statement 1
else:
    Statement 2

If 'Condition' is true then 'Statement 1' will be executed otherwise 'Statement 2' will be executed.

Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNhHmg3SkK1uiutigcAbH9K

==Loops==
[[#Top]]&lt;br&gt;
Loops in a programming languages are used to execute set of repetitive statements. For loop and while loop are used extensively to execute a set of looping instructions.

=== For loop Syntax ===
&lt;pre&gt;
for i in range(10): 
    Statement
&lt;/pre&gt;
range(10) indicate that values 0 to 9 will be assigned to the variable i and for each value of i the Statement will be executed, e.g.
&lt;pre&gt;
for i in range(10): 
    print(i)
&lt;/pre&gt;
Output will be
&lt;pre&gt;
0
1
2
3
4
5
6
7
8
9
&lt;/pre&gt;

[[#Top]]

=== While loop Syntax ===
&lt;pre&gt;
intialisation

while(condition):
   Statement
   increment/decrement
&lt;/pre&gt;
e.g.
&lt;pre&gt;
#initialization
i=0
while(i&lt;10): 
    print(i)
    i=i+1
&lt;/pre&gt;
Output will be:
&lt;pre&gt;
0
1
2
3
4
5
6
7
8
9
&lt;/pre&gt;
Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNbl5jkVrrw1E5XSvm3GiCI

[[#TOP]]
==Importance of Indentation in Python==
Indentation is used to indicate to what block of statements belong. Indentation of blocks convey program structure in Python. Indentation in Python is used to refer a group/block of code/statements. In C++ we use { and } (curly brackets) to group a set of statements. But in Python, there are no such brackets used. Instead of such brackets used in other programming languages, we use indentation in Python.
Use tabs,instead of spaces for ease of writing code.

Wrong indentation can lead to syntax error, or makes your output wrong for your logic e.g.
&lt;pre&gt;
#IndentationError: expected an indented block
i=-1
if i&lt;0:
print(&quot;Test successful&quot;)#Wrong indentation 
else:    
    print(&quot;Test failed&quot;)
#Output: IndentationError: expected an indented block
&lt;/pre&gt;
---
&lt;pre&gt;
#Properly Indented code:
i=-1
if i&lt;0:
    print(&quot;Test successful&quot;)#Wrong indentation
else:    
    print(&quot;Test failed&quot;)
#Output:Test successful
&lt;/pre&gt;
---
Logic changed, so output changed, with improper indentation, e.g.
---
&lt;h3&gt;Code : 1&lt;/h3&gt;
&lt;pre&gt;
sum=0
for i in range(5):
    for j in range(5):
        sum+=i
print(sum, end=&quot; &quot;)
#Output: 50
&lt;/pre&gt;
        
&lt;h3&gt;Code : 2&lt;/h3&gt;
&lt;pre&gt;
for i in range(5):
    for j in range(5):
        print(end=&quot; &quot;)
    sum+=i
print(sum, end=&quot; &quot;)
#Output:                          10
&lt;/pre&gt;
{{#ev:youtube|https://youtu.be/pmavoW419Yc|250|right}}&lt;br&gt;

[[#Top]]

==Spyder IDE Black Screen Solution==

----

 This issue is because of ''Help'' screen which is by default open. 
 We need to close it. So here's how you do it-


===Method 1:===

Step 1-    Try by closing current pane for that,  &quot;''press ctrl+shift+F4''&quot;  wait for few seconds things will appear on screen.

Step 2-    If it so than on menu bar go to ''view &gt; panes &gt; help'' unchecked &quot;''Help''&quot; option.

Step 3-    Make sure that &quot;''Help''&quot; under ''view &gt; panes'' is permanently unchecked. And ''Editor, Ipython console, Variable explorer''  are checked. 


===Method 2:===

Step 1-    Open spyder.

Step 2-   On that black screen randomly ''Left click'' on spyder &quot;''Menu bar''&quot; area you will get menu drop downs, You have to find Drop down with &quot;''Panes''&quot; option.

Step 3-   On &quot;''Panes''&quot; drop down unchecked the &quot;''Help''&quot;.

Step 4-   Wait for few seconds Spyder view will appear.

Step 5 -  Make sure that ''&quot;Help&quot;'' under view&gt;panes is permanently unchecked. And ''Editor, Ipython console, variable explorer'' are checked.


[[#Top]]</text>
      <sha1>jvxgg783i0tcqtapgglblwz3r84gija</sha1>
    </revision>
    <revision>
      <id>3526</id>
      <parentid>3525</parentid>
      <timestamp>2018-09-28T01:58:24Z</timestamp>
      <contributor>
        <username>Sachinkr</username>
        <id>1743</id>
      </contributor>
      <comment>/* Variables */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="11053">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_2 Contributors of this page]
==Introduction to Python==
Python is a widely used programming language which allows programmers to write the program in fewer lines of code. It was designed by Guido van Rossum in 1991. Python uses an interpreter instead of compiler.Basically, the main difference between compiler and interpreter is that the compiler takes the code as 'whole' and compiles it..for example in C language and on the other side in interpreter..example: languages like Python...it interprets the written code 'line by line', and if somewhere error is found...it stops interpreting the code from there itself. Here, in our course we will be using Spyder IDE. Spyder is an integrated development environment with editing options to assist the programmers in writing programs. Spyder IDE is divided into two panes, one is console and other one is where program is written.




Python works on different platforms (Windows, Mac, Linux, Raspberry Pi, etc).
Python has a simple syntax similar to the English language.
Python has syntax that allows developers to write programs with fewer lines than some other programming languages.
Python runs on an interpreter system, meaning that code can be executed as soon as it is written. This means that prototyping can be very quick.
Python can be treated in a procedural way, an object-orientated way or a functional way.

==Installing Anaconda==
[[#Top]]
This article is all about installing and troubleshooting Anaconda and Spyder on different platforms.

===Windows===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#windows Download Link]. Make sure that you download the version compatible to your operating system architecture. If you have a 64 bit OS then you can download either 64 bit of 32 bit, but if you have 32 bit OS then you should download the 32 bit version only.

Step 2 -&gt; Double click on the .exe file that you downloaded just now and follow the instructions. If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open cmd (go to Start -&gt; then type cmd in the search bar and hit enter). There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

===Mac===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#macos Download Link].

Step 2 -&gt; Double click on the .pkg file that you just downloaded. If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

===Linux===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#linux Download Link].

Step 2 -&gt; Go to the folder where you downloaded the .sh file and type following command 

  '''bash Anaconda-latest-Linux-x86_64.sh'''

If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

==Troubleshooting Spyder==

[[#Top]]

In most of the cases, it happens that Spyder is already running and you have initiated one more instance of it. Please make sure that spyder is not running already.
If you are on Linux OS, please launch spyder through terminal. Just open the terminal and type '''spyder''' and it will launch. When Spyder opens, make sure you see Anaconda with the version written on the Ipython console. If not, try changing the path of your anaconda. Follow these steps according to your OS version.

====Windows====
[https://stackoverflow.com/questions/44597662/conda-command-is-not-recognized-on-windows-10 Click Here]

====Linux====
[https://stackoverflow.com/questions/18675907/how-to-run-conda Click Here]

====Mac====
[https://stackoverflow.com/questions/35246386/conda-command-not-found Click Here]

In most of the cases relaunching Spyder works.
A more general Troubleshoot is present [https://github.com/spyder-ide/spyder/wiki/Troubleshooting-Guide-and-FAQ Here]

==How to run a program in Spyder IDE?==
Go to Run on the menu bar. Click Run-&gt;Run.

[[#TOP]]
==Print statements==
Print statements help to display output on console. 
{{#ev:youtube|https://youtu.be/gECkqaOwyt0|250|right}}

===Syntax===
print()

===How to print a message?===
In order to print a message in Python, write print(&quot;message&quot;).
Single, double, triple quote can be used print()

'''Example:'''

'''Single Quote'''
print('Hello')  
Output: Hello

'''Double Quote'''
print(&quot;Hello&quot;)  
Output: Hello

'''Quote within quote'''
print('Is &quot;Ram&quot; a good boy?')  
Output: Is &quot;Ram&quot; a good boy?

[[#TOP]]
==Escape sequences with strings==

We can use escape sequence within strings to make output more presentable.

'''\n'''  : It will move to next line.

'''\t'''  : It will add tab space(5space)

'''\a'''  : It will play system sound once.

'''Example:'''

Print(&quot;Hi, \n How are you?&quot;)

Output: 

Hi,

How are you?

Print(&quot;Hi, \t How are you?&quot;)

Output: 

Hi, &lt;5 spaces&gt; How are you?

[[File:Escape_Sequence.jpg]]

==Variables==
[[#Top]]
&lt;pre&gt;
Variables are used to store some values. Values can be strings, integers or decimal values.  

Variable Name Rules:
1. Variable name should start with letter or underscore. Variable name cant start with number.
Example:
Valid: JOC, WIKI, JOC_WIKI, _JOC
Invalid: 1JOC, 123WIKI, 0_WIKI

2. Remaining letter other then
&lt;/pre&gt;
{{#ev:youtube|https://youtu.be/60iAXH1sm-Y|250|right}}
===How to print a variable?===
In order to print the value of a variable in python, first initialise the variable and then write 
&lt;pre&gt;print(variable_name)&lt;/pre&gt;
For example :
&lt;pre&gt;
  x=2
  print(x)
&lt;/pre&gt;

===Some facts about Variables===
* If you want to print variable name with a message, you can use , operator. For example : I want to print Hello Simran and Simran has been stored in a variable called ''name''.
  name=&quot;Simran&quot;
  print(&quot;Hello&quot;,name)
* If you change the value of a variable, it will store the latest value. For example :
  name=&quot;Simran&quot;
  name=&quot;Amit&quot;
  If you will execute the command ''print(name)'', Amit will be displayed.
* You can perform operations like addition, subtraction etc only on integral variables.

==How to execute couple of instructions on console?==
You can execute couple of instructions on console using ;. Write Statement 1;Statement 2;......and then press ''Enter''.
{{#ev:youtube|https://youtu.be/CYQCYvLE22Y|250|right}}









==How to take input from the user?==
We can take input from the user using ''input'' function. For Example : You want the user to input variable ''x'', then write x=input(&quot;Enter the value of x&quot;) and execute. Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNkVLCxZw_jcgyS-bmrIVSP

And when the input you need is of data type other than string. You can do both the input function and data conversion in a single line.
For example:
Consider the program for letting in the patients
'''c=input(&quot;Enter (1/0)&quot;);d=int(c)'''

Instead of using it in two separate lines, combine it into a single line
'''c=int(input(&quot;Enter (1/0)&quot;))'''.

To get two inputs in same line with a space between them split() is used.

a,b=input(&quot;enter a&quot;).split(&quot;enter b&quot;)
----
[[#Top]]

==If statement==
If statement is used to execute set of two contrary statements based on a condition. 

===Syntax===
If (Condition):
    Statement 1
else:
    Statement 2

If 'Condition' is true then 'Statement 1' will be executed otherwise 'Statement 2' will be executed.

Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNhHmg3SkK1uiutigcAbH9K

==Loops==
[[#Top]]&lt;br&gt;
Loops in a programming languages are used to execute set of repetitive statements. For loop and while loop are used extensively to execute a set of looping instructions.

=== For loop Syntax ===
&lt;pre&gt;
for i in range(10): 
    Statement
&lt;/pre&gt;
range(10) indicate that values 0 to 9 will be assigned to the variable i and for each value of i the Statement will be executed, e.g.
&lt;pre&gt;
for i in range(10): 
    print(i)
&lt;/pre&gt;
Output will be
&lt;pre&gt;
0
1
2
3
4
5
6
7
8
9
&lt;/pre&gt;

[[#Top]]

=== While loop Syntax ===
&lt;pre&gt;
intialisation

while(condition):
   Statement
   increment/decrement
&lt;/pre&gt;
e.g.
&lt;pre&gt;
#initialization
i=0
while(i&lt;10): 
    print(i)
    i=i+1
&lt;/pre&gt;
Output will be:
&lt;pre&gt;
0
1
2
3
4
5
6
7
8
9
&lt;/pre&gt;
Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNbl5jkVrrw1E5XSvm3GiCI

[[#TOP]]
==Importance of Indentation in Python==
Indentation is used to indicate to what block of statements belong. Indentation of blocks convey program structure in Python. Indentation in Python is used to refer a group/block of code/statements. In C++ we use { and } (curly brackets) to group a set of statements. But in Python, there are no such brackets used. Instead of such brackets used in other programming languages, we use indentation in Python.
Use tabs,instead of spaces for ease of writing code.

Wrong indentation can lead to syntax error, or makes your output wrong for your logic e.g.
&lt;pre&gt;
#IndentationError: expected an indented block
i=-1
if i&lt;0:
print(&quot;Test successful&quot;)#Wrong indentation 
else:    
    print(&quot;Test failed&quot;)
#Output: IndentationError: expected an indented block
&lt;/pre&gt;
---
&lt;pre&gt;
#Properly Indented code:
i=-1
if i&lt;0:
    print(&quot;Test successful&quot;)#Wrong indentation
else:    
    print(&quot;Test failed&quot;)
#Output:Test successful
&lt;/pre&gt;
---
Logic changed, so output changed, with improper indentation, e.g.
---
&lt;h3&gt;Code : 1&lt;/h3&gt;
&lt;pre&gt;
sum=0
for i in range(5):
    for j in range(5):
        sum+=i
print(sum, end=&quot; &quot;)
#Output: 50
&lt;/pre&gt;
        
&lt;h3&gt;Code : 2&lt;/h3&gt;
&lt;pre&gt;
for i in range(5):
    for j in range(5):
        print(end=&quot; &quot;)
    sum+=i
print(sum, end=&quot; &quot;)
#Output:                          10
&lt;/pre&gt;
{{#ev:youtube|https://youtu.be/pmavoW419Yc|250|right}}&lt;br&gt;

[[#Top]]

==Spyder IDE Black Screen Solution==

----

 This issue is because of ''Help'' screen which is by default open. 
 We need to close it. So here's how you do it-


===Method 1:===

Step 1-    Try by closing current pane for that,  &quot;''press ctrl+shift+F4''&quot;  wait for few seconds things will appear on screen.

Step 2-    If it so than on menu bar go to ''view &gt; panes &gt; help'' unchecked &quot;''Help''&quot; option.

Step 3-    Make sure that &quot;''Help''&quot; under ''view &gt; panes'' is permanently unchecked. And ''Editor, Ipython console, Variable explorer''  are checked. 


===Method 2:===

Step 1-    Open spyder.

Step 2-   On that black screen randomly ''Left click'' on spyder &quot;''Menu bar''&quot; area you will get menu drop downs, You have to find Drop down with &quot;''Panes''&quot; option.

Step 3-   On &quot;''Panes''&quot; drop down unchecked the &quot;''Help''&quot;.

Step 4-   Wait for few seconds Spyder view will appear.

Step 5 -  Make sure that ''&quot;Help&quot;'' under view&gt;panes is permanently unchecked. And ''Editor, Ipython console, variable explorer'' are checked.


[[#Top]]</text>
      <sha1>9wfisntsy2d64z5jgsto5nkce2jffi4</sha1>
    </revision>
    <revision>
      <id>3527</id>
      <parentid>3526</parentid>
      <timestamp>2018-09-28T01:58:58Z</timestamp>
      <contributor>
        <username>Sachinkr</username>
        <id>1743</id>
      </contributor>
      <comment>/* Variables */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="11095">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_2 Contributors of this page]
==Introduction to Python==
Python is a widely used programming language which allows programmers to write the program in fewer lines of code. It was designed by Guido van Rossum in 1991. Python uses an interpreter instead of compiler.Basically, the main difference between compiler and interpreter is that the compiler takes the code as 'whole' and compiles it..for example in C language and on the other side in interpreter..example: languages like Python...it interprets the written code 'line by line', and if somewhere error is found...it stops interpreting the code from there itself. Here, in our course we will be using Spyder IDE. Spyder is an integrated development environment with editing options to assist the programmers in writing programs. Spyder IDE is divided into two panes, one is console and other one is where program is written.




Python works on different platforms (Windows, Mac, Linux, Raspberry Pi, etc).
Python has a simple syntax similar to the English language.
Python has syntax that allows developers to write programs with fewer lines than some other programming languages.
Python runs on an interpreter system, meaning that code can be executed as soon as it is written. This means that prototyping can be very quick.
Python can be treated in a procedural way, an object-orientated way or a functional way.

==Installing Anaconda==
[[#Top]]
This article is all about installing and troubleshooting Anaconda and Spyder on different platforms.

===Windows===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#windows Download Link]. Make sure that you download the version compatible to your operating system architecture. If you have a 64 bit OS then you can download either 64 bit of 32 bit, but if you have 32 bit OS then you should download the 32 bit version only.

Step 2 -&gt; Double click on the .exe file that you downloaded just now and follow the instructions. If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open cmd (go to Start -&gt; then type cmd in the search bar and hit enter). There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

===Mac===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#macos Download Link].

Step 2 -&gt; Double click on the .pkg file that you just downloaded. If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

===Linux===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#linux Download Link].

Step 2 -&gt; Go to the folder where you downloaded the .sh file and type following command 

  '''bash Anaconda-latest-Linux-x86_64.sh'''

If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

==Troubleshooting Spyder==

[[#Top]]

In most of the cases, it happens that Spyder is already running and you have initiated one more instance of it. Please make sure that spyder is not running already.
If you are on Linux OS, please launch spyder through terminal. Just open the terminal and type '''spyder''' and it will launch. When Spyder opens, make sure you see Anaconda with the version written on the Ipython console. If not, try changing the path of your anaconda. Follow these steps according to your OS version.

====Windows====
[https://stackoverflow.com/questions/44597662/conda-command-is-not-recognized-on-windows-10 Click Here]

====Linux====
[https://stackoverflow.com/questions/18675907/how-to-run-conda Click Here]

====Mac====
[https://stackoverflow.com/questions/35246386/conda-command-not-found Click Here]

In most of the cases relaunching Spyder works.
A more general Troubleshoot is present [https://github.com/spyder-ide/spyder/wiki/Troubleshooting-Guide-and-FAQ Here]

==How to run a program in Spyder IDE?==
Go to Run on the menu bar. Click Run-&gt;Run.

[[#TOP]]
==Print statements==
Print statements help to display output on console. 
{{#ev:youtube|https://youtu.be/gECkqaOwyt0|250|right}}

===Syntax===
print()

===How to print a message?===
In order to print a message in Python, write print(&quot;message&quot;).
Single, double, triple quote can be used print()

'''Example:'''

'''Single Quote'''
print('Hello')  
Output: Hello

'''Double Quote'''
print(&quot;Hello&quot;)  
Output: Hello

'''Quote within quote'''
print('Is &quot;Ram&quot; a good boy?')  
Output: Is &quot;Ram&quot; a good boy?

[[#TOP]]
==Escape sequences with strings==

We can use escape sequence within strings to make output more presentable.

'''\n'''  : It will move to next line.

'''\t'''  : It will add tab space(5space)

'''\a'''  : It will play system sound once.

'''Example:'''

Print(&quot;Hi, \n How are you?&quot;)

Output: 

Hi,

How are you?

Print(&quot;Hi, \t How are you?&quot;)

Output: 

Hi, &lt;5 spaces&gt; How are you?

[[File:Escape_Sequence.jpg]]

==Variables==
[[#Top]]
&lt;pre&gt;
Variables are used to store some values. Values can be strings, integers or decimal values.  

Variable Name Rules:
1. Variable name should start with letter or underscore. Variable name cant start with number.
Example:
Valid: JOC, WIKI, JOC_WIKI, _JOC
Invalid: 1JOC, 123WIKI, 0_WIKI

2. Remaining letter other then first one can contain number, underscore.
&lt;/pre&gt;
{{#ev:youtube|https://youtu.be/60iAXH1sm-Y|250|right}}
===How to print a variable?===
In order to print the value of a variable in python, first initialise the variable and then write 
&lt;pre&gt;print(variable_name)&lt;/pre&gt;
For example :
&lt;pre&gt;
  x=2
  print(x)
&lt;/pre&gt;

===Some facts about Variables===
* If you want to print variable name with a message, you can use , operator. For example : I want to print Hello Simran and Simran has been stored in a variable called ''name''.
  name=&quot;Simran&quot;
  print(&quot;Hello&quot;,name)
* If you change the value of a variable, it will store the latest value. For example :
  name=&quot;Simran&quot;
  name=&quot;Amit&quot;
  If you will execute the command ''print(name)'', Amit will be displayed.
* You can perform operations like addition, subtraction etc only on integral variables.

==How to execute couple of instructions on console?==
You can execute couple of instructions on console using ;. Write Statement 1;Statement 2;......and then press ''Enter''.
{{#ev:youtube|https://youtu.be/CYQCYvLE22Y|250|right}}









==How to take input from the user?==
We can take input from the user using ''input'' function. For Example : You want the user to input variable ''x'', then write x=input(&quot;Enter the value of x&quot;) and execute. Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNkVLCxZw_jcgyS-bmrIVSP

And when the input you need is of data type other than string. You can do both the input function and data conversion in a single line.
For example:
Consider the program for letting in the patients
'''c=input(&quot;Enter (1/0)&quot;);d=int(c)'''

Instead of using it in two separate lines, combine it into a single line
'''c=int(input(&quot;Enter (1/0)&quot;))'''.

To get two inputs in same line with a space between them split() is used.

a,b=input(&quot;enter a&quot;).split(&quot;enter b&quot;)
----
[[#Top]]

==If statement==
If statement is used to execute set of two contrary statements based on a condition. 

===Syntax===
If (Condition):
    Statement 1
else:
    Statement 2

If 'Condition' is true then 'Statement 1' will be executed otherwise 'Statement 2' will be executed.

Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNhHmg3SkK1uiutigcAbH9K

==Loops==
[[#Top]]&lt;br&gt;
Loops in a programming languages are used to execute set of repetitive statements. For loop and while loop are used extensively to execute a set of looping instructions.

=== For loop Syntax ===
&lt;pre&gt;
for i in range(10): 
    Statement
&lt;/pre&gt;
range(10) indicate that values 0 to 9 will be assigned to the variable i and for each value of i the Statement will be executed, e.g.
&lt;pre&gt;
for i in range(10): 
    print(i)
&lt;/pre&gt;
Output will be
&lt;pre&gt;
0
1
2
3
4
5
6
7
8
9
&lt;/pre&gt;

[[#Top]]

=== While loop Syntax ===
&lt;pre&gt;
intialisation

while(condition):
   Statement
   increment/decrement
&lt;/pre&gt;
e.g.
&lt;pre&gt;
#initialization
i=0
while(i&lt;10): 
    print(i)
    i=i+1
&lt;/pre&gt;
Output will be:
&lt;pre&gt;
0
1
2
3
4
5
6
7
8
9
&lt;/pre&gt;
Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNbl5jkVrrw1E5XSvm3GiCI

[[#TOP]]
==Importance of Indentation in Python==
Indentation is used to indicate to what block of statements belong. Indentation of blocks convey program structure in Python. Indentation in Python is used to refer a group/block of code/statements. In C++ we use { and } (curly brackets) to group a set of statements. But in Python, there are no such brackets used. Instead of such brackets used in other programming languages, we use indentation in Python.
Use tabs,instead of spaces for ease of writing code.

Wrong indentation can lead to syntax error, or makes your output wrong for your logic e.g.
&lt;pre&gt;
#IndentationError: expected an indented block
i=-1
if i&lt;0:
print(&quot;Test successful&quot;)#Wrong indentation 
else:    
    print(&quot;Test failed&quot;)
#Output: IndentationError: expected an indented block
&lt;/pre&gt;
---
&lt;pre&gt;
#Properly Indented code:
i=-1
if i&lt;0:
    print(&quot;Test successful&quot;)#Wrong indentation
else:    
    print(&quot;Test failed&quot;)
#Output:Test successful
&lt;/pre&gt;
---
Logic changed, so output changed, with improper indentation, e.g.
---
&lt;h3&gt;Code : 1&lt;/h3&gt;
&lt;pre&gt;
sum=0
for i in range(5):
    for j in range(5):
        sum+=i
print(sum, end=&quot; &quot;)
#Output: 50
&lt;/pre&gt;
        
&lt;h3&gt;Code : 2&lt;/h3&gt;
&lt;pre&gt;
for i in range(5):
    for j in range(5):
        print(end=&quot; &quot;)
    sum+=i
print(sum, end=&quot; &quot;)
#Output:                          10
&lt;/pre&gt;
{{#ev:youtube|https://youtu.be/pmavoW419Yc|250|right}}&lt;br&gt;

[[#Top]]

==Spyder IDE Black Screen Solution==

----

 This issue is because of ''Help'' screen which is by default open. 
 We need to close it. So here's how you do it-


===Method 1:===

Step 1-    Try by closing current pane for that,  &quot;''press ctrl+shift+F4''&quot;  wait for few seconds things will appear on screen.

Step 2-    If it so than on menu bar go to ''view &gt; panes &gt; help'' unchecked &quot;''Help''&quot; option.

Step 3-    Make sure that &quot;''Help''&quot; under ''view &gt; panes'' is permanently unchecked. And ''Editor, Ipython console, Variable explorer''  are checked. 


===Method 2:===

Step 1-    Open spyder.

Step 2-   On that black screen randomly ''Left click'' on spyder &quot;''Menu bar''&quot; area you will get menu drop downs, You have to find Drop down with &quot;''Panes''&quot; option.

Step 3-   On &quot;''Panes''&quot; drop down unchecked the &quot;''Help''&quot;.

Step 4-   Wait for few seconds Spyder view will appear.

Step 5 -  Make sure that ''&quot;Help&quot;'' under view&gt;panes is permanently unchecked. And ''Editor, Ipython console, variable explorer'' are checked.


[[#Top]]</text>
      <sha1>8ngxdtiaiiqrkvgcv3lwkg6cysgsejo</sha1>
    </revision>
    <revision>
      <id>3528</id>
      <parentid>3527</parentid>
      <timestamp>2018-09-28T01:59:57Z</timestamp>
      <contributor>
        <username>Sachinkr</username>
        <id>1743</id>
      </contributor>
      <comment>/* Variables */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="11138">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_2 Contributors of this page]
==Introduction to Python==
Python is a widely used programming language which allows programmers to write the program in fewer lines of code. It was designed by Guido van Rossum in 1991. Python uses an interpreter instead of compiler.Basically, the main difference between compiler and interpreter is that the compiler takes the code as 'whole' and compiles it..for example in C language and on the other side in interpreter..example: languages like Python...it interprets the written code 'line by line', and if somewhere error is found...it stops interpreting the code from there itself. Here, in our course we will be using Spyder IDE. Spyder is an integrated development environment with editing options to assist the programmers in writing programs. Spyder IDE is divided into two panes, one is console and other one is where program is written.




Python works on different platforms (Windows, Mac, Linux, Raspberry Pi, etc).
Python has a simple syntax similar to the English language.
Python has syntax that allows developers to write programs with fewer lines than some other programming languages.
Python runs on an interpreter system, meaning that code can be executed as soon as it is written. This means that prototyping can be very quick.
Python can be treated in a procedural way, an object-orientated way or a functional way.

==Installing Anaconda==
[[#Top]]
This article is all about installing and troubleshooting Anaconda and Spyder on different platforms.

===Windows===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#windows Download Link]. Make sure that you download the version compatible to your operating system architecture. If you have a 64 bit OS then you can download either 64 bit of 32 bit, but if you have 32 bit OS then you should download the 32 bit version only.

Step 2 -&gt; Double click on the .exe file that you downloaded just now and follow the instructions. If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open cmd (go to Start -&gt; then type cmd in the search bar and hit enter). There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

===Mac===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#macos Download Link].

Step 2 -&gt; Double click on the .pkg file that you just downloaded. If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

===Linux===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#linux Download Link].

Step 2 -&gt; Go to the folder where you downloaded the .sh file and type following command 

  '''bash Anaconda-latest-Linux-x86_64.sh'''

If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

==Troubleshooting Spyder==

[[#Top]]

In most of the cases, it happens that Spyder is already running and you have initiated one more instance of it. Please make sure that spyder is not running already.
If you are on Linux OS, please launch spyder through terminal. Just open the terminal and type '''spyder''' and it will launch. When Spyder opens, make sure you see Anaconda with the version written on the Ipython console. If not, try changing the path of your anaconda. Follow these steps according to your OS version.

====Windows====
[https://stackoverflow.com/questions/44597662/conda-command-is-not-recognized-on-windows-10 Click Here]

====Linux====
[https://stackoverflow.com/questions/18675907/how-to-run-conda Click Here]

====Mac====
[https://stackoverflow.com/questions/35246386/conda-command-not-found Click Here]

In most of the cases relaunching Spyder works.
A more general Troubleshoot is present [https://github.com/spyder-ide/spyder/wiki/Troubleshooting-Guide-and-FAQ Here]

==How to run a program in Spyder IDE?==
Go to Run on the menu bar. Click Run-&gt;Run.

[[#TOP]]
==Print statements==
Print statements help to display output on console. 
{{#ev:youtube|https://youtu.be/gECkqaOwyt0|250|right}}

===Syntax===
print()

===How to print a message?===
In order to print a message in Python, write print(&quot;message&quot;).
Single, double, triple quote can be used print()

'''Example:'''

'''Single Quote'''
print('Hello')  
Output: Hello

'''Double Quote'''
print(&quot;Hello&quot;)  
Output: Hello

'''Quote within quote'''
print('Is &quot;Ram&quot; a good boy?')  
Output: Is &quot;Ram&quot; a good boy?

[[#TOP]]
==Escape sequences with strings==

We can use escape sequence within strings to make output more presentable.

'''\n'''  : It will move to next line.

'''\t'''  : It will add tab space(5space)

'''\a'''  : It will play system sound once.

'''Example:'''

Print(&quot;Hi, \n How are you?&quot;)

Output: 

Hi,

How are you?

Print(&quot;Hi, \t How are you?&quot;)

Output: 

Hi, &lt;5 spaces&gt; How are you?

[[File:Escape_Sequence.jpg]]

==Variables==
[[#Top]]
&lt;pre&gt;
Variables are used to store some values. Values can be strings, integers or decimal values.  

Variable Name Rules:
1. Variable name should start with letter or underscore. Variable name cant start with number.
Example:
Valid: JOC, WIKI, JOC_WIKI, _JOC
Invalid: 1JOC, 123WIKI, 0_WIKI

2. Remaining letter other then first one can contain number, underscore.
Example:
JOC1234, WIKI012_1332

3. Names


&lt;/pre&gt;
{{#ev:youtube|https://youtu.be/60iAXH1sm-Y|250|right}}
===How to print a variable?===
In order to print the value of a variable in python, first initialise the variable and then write 
&lt;pre&gt;print(variable_name)&lt;/pre&gt;
For example :
&lt;pre&gt;
  x=2
  print(x)
&lt;/pre&gt;

===Some facts about Variables===
* If you want to print variable name with a message, you can use , operator. For example : I want to print Hello Simran and Simran has been stored in a variable called ''name''.
  name=&quot;Simran&quot;
  print(&quot;Hello&quot;,name)
* If you change the value of a variable, it will store the latest value. For example :
  name=&quot;Simran&quot;
  name=&quot;Amit&quot;
  If you will execute the command ''print(name)'', Amit will be displayed.
* You can perform operations like addition, subtraction etc only on integral variables.

==How to execute couple of instructions on console?==
You can execute couple of instructions on console using ;. Write Statement 1;Statement 2;......and then press ''Enter''.
{{#ev:youtube|https://youtu.be/CYQCYvLE22Y|250|right}}









==How to take input from the user?==
We can take input from the user using ''input'' function. For Example : You want the user to input variable ''x'', then write x=input(&quot;Enter the value of x&quot;) and execute. Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNkVLCxZw_jcgyS-bmrIVSP

And when the input you need is of data type other than string. You can do both the input function and data conversion in a single line.
For example:
Consider the program for letting in the patients
'''c=input(&quot;Enter (1/0)&quot;);d=int(c)'''

Instead of using it in two separate lines, combine it into a single line
'''c=int(input(&quot;Enter (1/0)&quot;))'''.

To get two inputs in same line with a space between them split() is used.

a,b=input(&quot;enter a&quot;).split(&quot;enter b&quot;)
----
[[#Top]]

==If statement==
If statement is used to execute set of two contrary statements based on a condition. 

===Syntax===
If (Condition):
    Statement 1
else:
    Statement 2

If 'Condition' is true then 'Statement 1' will be executed otherwise 'Statement 2' will be executed.

Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNhHmg3SkK1uiutigcAbH9K

==Loops==
[[#Top]]&lt;br&gt;
Loops in a programming languages are used to execute set of repetitive statements. For loop and while loop are used extensively to execute a set of looping instructions.

=== For loop Syntax ===
&lt;pre&gt;
for i in range(10): 
    Statement
&lt;/pre&gt;
range(10) indicate that values 0 to 9 will be assigned to the variable i and for each value of i the Statement will be executed, e.g.
&lt;pre&gt;
for i in range(10): 
    print(i)
&lt;/pre&gt;
Output will be
&lt;pre&gt;
0
1
2
3
4
5
6
7
8
9
&lt;/pre&gt;

[[#Top]]

=== While loop Syntax ===
&lt;pre&gt;
intialisation

while(condition):
   Statement
   increment/decrement
&lt;/pre&gt;
e.g.
&lt;pre&gt;
#initialization
i=0
while(i&lt;10): 
    print(i)
    i=i+1
&lt;/pre&gt;
Output will be:
&lt;pre&gt;
0
1
2
3
4
5
6
7
8
9
&lt;/pre&gt;
Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNbl5jkVrrw1E5XSvm3GiCI

[[#TOP]]
==Importance of Indentation in Python==
Indentation is used to indicate to what block of statements belong. Indentation of blocks convey program structure in Python. Indentation in Python is used to refer a group/block of code/statements. In C++ we use { and } (curly brackets) to group a set of statements. But in Python, there are no such brackets used. Instead of such brackets used in other programming languages, we use indentation in Python.
Use tabs,instead of spaces for ease of writing code.

Wrong indentation can lead to syntax error, or makes your output wrong for your logic e.g.
&lt;pre&gt;
#IndentationError: expected an indented block
i=-1
if i&lt;0:
print(&quot;Test successful&quot;)#Wrong indentation 
else:    
    print(&quot;Test failed&quot;)
#Output: IndentationError: expected an indented block
&lt;/pre&gt;
---
&lt;pre&gt;
#Properly Indented code:
i=-1
if i&lt;0:
    print(&quot;Test successful&quot;)#Wrong indentation
else:    
    print(&quot;Test failed&quot;)
#Output:Test successful
&lt;/pre&gt;
---
Logic changed, so output changed, with improper indentation, e.g.
---
&lt;h3&gt;Code : 1&lt;/h3&gt;
&lt;pre&gt;
sum=0
for i in range(5):
    for j in range(5):
        sum+=i
print(sum, end=&quot; &quot;)
#Output: 50
&lt;/pre&gt;
        
&lt;h3&gt;Code : 2&lt;/h3&gt;
&lt;pre&gt;
for i in range(5):
    for j in range(5):
        print(end=&quot; &quot;)
    sum+=i
print(sum, end=&quot; &quot;)
#Output:                          10
&lt;/pre&gt;
{{#ev:youtube|https://youtu.be/pmavoW419Yc|250|right}}&lt;br&gt;

[[#Top]]

==Spyder IDE Black Screen Solution==

----

 This issue is because of ''Help'' screen which is by default open. 
 We need to close it. So here's how you do it-


===Method 1:===

Step 1-    Try by closing current pane for that,  &quot;''press ctrl+shift+F4''&quot;  wait for few seconds things will appear on screen.

Step 2-    If it so than on menu bar go to ''view &gt; panes &gt; help'' unchecked &quot;''Help''&quot; option.

Step 3-    Make sure that &quot;''Help''&quot; under ''view &gt; panes'' is permanently unchecked. And ''Editor, Ipython console, Variable explorer''  are checked. 


===Method 2:===

Step 1-    Open spyder.

Step 2-   On that black screen randomly ''Left click'' on spyder &quot;''Menu bar''&quot; area you will get menu drop downs, You have to find Drop down with &quot;''Panes''&quot; option.

Step 3-   On &quot;''Panes''&quot; drop down unchecked the &quot;''Help''&quot;.

Step 4-   Wait for few seconds Spyder view will appear.

Step 5 -  Make sure that ''&quot;Help&quot;'' under view&gt;panes is permanently unchecked. And ''Editor, Ipython console, variable explorer'' are checked.


[[#Top]]</text>
      <sha1>cin7xkg3266mzy5huihm316g2g10y52</sha1>
    </revision>
    <revision>
      <id>3529</id>
      <parentid>3528</parentid>
      <timestamp>2018-09-28T02:00:30Z</timestamp>
      <contributor>
        <username>Sachinkr</username>
        <id>1743</id>
      </contributor>
      <comment>/* Variables */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="11171">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_2 Contributors of this page]
==Introduction to Python==
Python is a widely used programming language which allows programmers to write the program in fewer lines of code. It was designed by Guido van Rossum in 1991. Python uses an interpreter instead of compiler.Basically, the main difference between compiler and interpreter is that the compiler takes the code as 'whole' and compiles it..for example in C language and on the other side in interpreter..example: languages like Python...it interprets the written code 'line by line', and if somewhere error is found...it stops interpreting the code from there itself. Here, in our course we will be using Spyder IDE. Spyder is an integrated development environment with editing options to assist the programmers in writing programs. Spyder IDE is divided into two panes, one is console and other one is where program is written.




Python works on different platforms (Windows, Mac, Linux, Raspberry Pi, etc).
Python has a simple syntax similar to the English language.
Python has syntax that allows developers to write programs with fewer lines than some other programming languages.
Python runs on an interpreter system, meaning that code can be executed as soon as it is written. This means that prototyping can be very quick.
Python can be treated in a procedural way, an object-orientated way or a functional way.

==Installing Anaconda==
[[#Top]]
This article is all about installing and troubleshooting Anaconda and Spyder on different platforms.

===Windows===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#windows Download Link]. Make sure that you download the version compatible to your operating system architecture. If you have a 64 bit OS then you can download either 64 bit of 32 bit, but if you have 32 bit OS then you should download the 32 bit version only.

Step 2 -&gt; Double click on the .exe file that you downloaded just now and follow the instructions. If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open cmd (go to Start -&gt; then type cmd in the search bar and hit enter). There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

===Mac===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#macos Download Link].

Step 2 -&gt; Double click on the .pkg file that you just downloaded. If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

===Linux===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#linux Download Link].

Step 2 -&gt; Go to the folder where you downloaded the .sh file and type following command 

  '''bash Anaconda-latest-Linux-x86_64.sh'''

If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

==Troubleshooting Spyder==

[[#Top]]

In most of the cases, it happens that Spyder is already running and you have initiated one more instance of it. Please make sure that spyder is not running already.
If you are on Linux OS, please launch spyder through terminal. Just open the terminal and type '''spyder''' and it will launch. When Spyder opens, make sure you see Anaconda with the version written on the Ipython console. If not, try changing the path of your anaconda. Follow these steps according to your OS version.

====Windows====
[https://stackoverflow.com/questions/44597662/conda-command-is-not-recognized-on-windows-10 Click Here]

====Linux====
[https://stackoverflow.com/questions/18675907/how-to-run-conda Click Here]

====Mac====
[https://stackoverflow.com/questions/35246386/conda-command-not-found Click Here]

In most of the cases relaunching Spyder works.
A more general Troubleshoot is present [https://github.com/spyder-ide/spyder/wiki/Troubleshooting-Guide-and-FAQ Here]

==How to run a program in Spyder IDE?==
Go to Run on the menu bar. Click Run-&gt;Run.

[[#TOP]]
==Print statements==
Print statements help to display output on console. 
{{#ev:youtube|https://youtu.be/gECkqaOwyt0|250|right}}

===Syntax===
print()

===How to print a message?===
In order to print a message in Python, write print(&quot;message&quot;).
Single, double, triple quote can be used print()

'''Example:'''

'''Single Quote'''
print('Hello')  
Output: Hello

'''Double Quote'''
print(&quot;Hello&quot;)  
Output: Hello

'''Quote within quote'''
print('Is &quot;Ram&quot; a good boy?')  
Output: Is &quot;Ram&quot; a good boy?

[[#TOP]]
==Escape sequences with strings==

We can use escape sequence within strings to make output more presentable.

'''\n'''  : It will move to next line.

'''\t'''  : It will add tab space(5space)

'''\a'''  : It will play system sound once.

'''Example:'''

Print(&quot;Hi, \n How are you?&quot;)

Output: 

Hi,

How are you?

Print(&quot;Hi, \t How are you?&quot;)

Output: 

Hi, &lt;5 spaces&gt; How are you?

[[File:Escape_Sequence.jpg]]

==Variables==
[[#Top]]
&lt;pre&gt;
Variables are used to store some values. Values can be strings, integers or decimal values.  

Variable Name Rules:
1. Variable name should start with letter or underscore. Variable name cant start with number.
Example:
Valid: JOC, WIKI, JOC_WIKI, _JOC
Invalid: 1JOC, 123WIKI, 0_WIKI

2. Remaining letter other then first one can contain number, underscore.
Example:
JOC1234, WIKI012_1332

3. Variable names are case sensitivities.


&lt;/pre&gt;
{{#ev:youtube|https://youtu.be/60iAXH1sm-Y|250|right}}
===How to print a variable?===
In order to print the value of a variable in python, first initialise the variable and then write 
&lt;pre&gt;print(variable_name)&lt;/pre&gt;
For example :
&lt;pre&gt;
  x=2
  print(x)
&lt;/pre&gt;

===Some facts about Variables===
* If you want to print variable name with a message, you can use , operator. For example : I want to print Hello Simran and Simran has been stored in a variable called ''name''.
  name=&quot;Simran&quot;
  print(&quot;Hello&quot;,name)
* If you change the value of a variable, it will store the latest value. For example :
  name=&quot;Simran&quot;
  name=&quot;Amit&quot;
  If you will execute the command ''print(name)'', Amit will be displayed.
* You can perform operations like addition, subtraction etc only on integral variables.

==How to execute couple of instructions on console?==
You can execute couple of instructions on console using ;. Write Statement 1;Statement 2;......and then press ''Enter''.
{{#ev:youtube|https://youtu.be/CYQCYvLE22Y|250|right}}









==How to take input from the user?==
We can take input from the user using ''input'' function. For Example : You want the user to input variable ''x'', then write x=input(&quot;Enter the value of x&quot;) and execute. Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNkVLCxZw_jcgyS-bmrIVSP

And when the input you need is of data type other than string. You can do both the input function and data conversion in a single line.
For example:
Consider the program for letting in the patients
'''c=input(&quot;Enter (1/0)&quot;);d=int(c)'''

Instead of using it in two separate lines, combine it into a single line
'''c=int(input(&quot;Enter (1/0)&quot;))'''.

To get two inputs in same line with a space between them split() is used.

a,b=input(&quot;enter a&quot;).split(&quot;enter b&quot;)
----
[[#Top]]

==If statement==
If statement is used to execute set of two contrary statements based on a condition. 

===Syntax===
If (Condition):
    Statement 1
else:
    Statement 2

If 'Condition' is true then 'Statement 1' will be executed otherwise 'Statement 2' will be executed.

Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNhHmg3SkK1uiutigcAbH9K

==Loops==
[[#Top]]&lt;br&gt;
Loops in a programming languages are used to execute set of repetitive statements. For loop and while loop are used extensively to execute a set of looping instructions.

=== For loop Syntax ===
&lt;pre&gt;
for i in range(10): 
    Statement
&lt;/pre&gt;
range(10) indicate that values 0 to 9 will be assigned to the variable i and for each value of i the Statement will be executed, e.g.
&lt;pre&gt;
for i in range(10): 
    print(i)
&lt;/pre&gt;
Output will be
&lt;pre&gt;
0
1
2
3
4
5
6
7
8
9
&lt;/pre&gt;

[[#Top]]

=== While loop Syntax ===
&lt;pre&gt;
intialisation

while(condition):
   Statement
   increment/decrement
&lt;/pre&gt;
e.g.
&lt;pre&gt;
#initialization
i=0
while(i&lt;10): 
    print(i)
    i=i+1
&lt;/pre&gt;
Output will be:
&lt;pre&gt;
0
1
2
3
4
5
6
7
8
9
&lt;/pre&gt;
Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNbl5jkVrrw1E5XSvm3GiCI

[[#TOP]]
==Importance of Indentation in Python==
Indentation is used to indicate to what block of statements belong. Indentation of blocks convey program structure in Python. Indentation in Python is used to refer a group/block of code/statements. In C++ we use { and } (curly brackets) to group a set of statements. But in Python, there are no such brackets used. Instead of such brackets used in other programming languages, we use indentation in Python.
Use tabs,instead of spaces for ease of writing code.

Wrong indentation can lead to syntax error, or makes your output wrong for your logic e.g.
&lt;pre&gt;
#IndentationError: expected an indented block
i=-1
if i&lt;0:
print(&quot;Test successful&quot;)#Wrong indentation 
else:    
    print(&quot;Test failed&quot;)
#Output: IndentationError: expected an indented block
&lt;/pre&gt;
---
&lt;pre&gt;
#Properly Indented code:
i=-1
if i&lt;0:
    print(&quot;Test successful&quot;)#Wrong indentation
else:    
    print(&quot;Test failed&quot;)
#Output:Test successful
&lt;/pre&gt;
---
Logic changed, so output changed, with improper indentation, e.g.
---
&lt;h3&gt;Code : 1&lt;/h3&gt;
&lt;pre&gt;
sum=0
for i in range(5):
    for j in range(5):
        sum+=i
print(sum, end=&quot; &quot;)
#Output: 50
&lt;/pre&gt;
        
&lt;h3&gt;Code : 2&lt;/h3&gt;
&lt;pre&gt;
for i in range(5):
    for j in range(5):
        print(end=&quot; &quot;)
    sum+=i
print(sum, end=&quot; &quot;)
#Output:                          10
&lt;/pre&gt;
{{#ev:youtube|https://youtu.be/pmavoW419Yc|250|right}}&lt;br&gt;

[[#Top]]

==Spyder IDE Black Screen Solution==

----

 This issue is because of ''Help'' screen which is by default open. 
 We need to close it. So here's how you do it-


===Method 1:===

Step 1-    Try by closing current pane for that,  &quot;''press ctrl+shift+F4''&quot;  wait for few seconds things will appear on screen.

Step 2-    If it so than on menu bar go to ''view &gt; panes &gt; help'' unchecked &quot;''Help''&quot; option.

Step 3-    Make sure that &quot;''Help''&quot; under ''view &gt; panes'' is permanently unchecked. And ''Editor, Ipython console, Variable explorer''  are checked. 


===Method 2:===

Step 1-    Open spyder.

Step 2-   On that black screen randomly ''Left click'' on spyder &quot;''Menu bar''&quot; area you will get menu drop downs, You have to find Drop down with &quot;''Panes''&quot; option.

Step 3-   On &quot;''Panes''&quot; drop down unchecked the &quot;''Help''&quot;.

Step 4-   Wait for few seconds Spyder view will appear.

Step 5 -  Make sure that ''&quot;Help&quot;'' under view&gt;panes is permanently unchecked. And ''Editor, Ipython console, variable explorer'' are checked.


[[#Top]]</text>
      <sha1>k89ung1glj2w3k3oib2b4tk2plmhwyw</sha1>
    </revision>
    <revision>
      <id>3530</id>
      <parentid>3529</parentid>
      <timestamp>2018-09-28T02:01:22Z</timestamp>
      <contributor>
        <username>Sachinkr</username>
        <id>1743</id>
      </contributor>
      <comment>/* Variables */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="11221">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_2 Contributors of this page]
==Introduction to Python==
Python is a widely used programming language which allows programmers to write the program in fewer lines of code. It was designed by Guido van Rossum in 1991. Python uses an interpreter instead of compiler.Basically, the main difference between compiler and interpreter is that the compiler takes the code as 'whole' and compiles it..for example in C language and on the other side in interpreter..example: languages like Python...it interprets the written code 'line by line', and if somewhere error is found...it stops interpreting the code from there itself. Here, in our course we will be using Spyder IDE. Spyder is an integrated development environment with editing options to assist the programmers in writing programs. Spyder IDE is divided into two panes, one is console and other one is where program is written.




Python works on different platforms (Windows, Mac, Linux, Raspberry Pi, etc).
Python has a simple syntax similar to the English language.
Python has syntax that allows developers to write programs with fewer lines than some other programming languages.
Python runs on an interpreter system, meaning that code can be executed as soon as it is written. This means that prototyping can be very quick.
Python can be treated in a procedural way, an object-orientated way or a functional way.

==Installing Anaconda==
[[#Top]]
This article is all about installing and troubleshooting Anaconda and Spyder on different platforms.

===Windows===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#windows Download Link]. Make sure that you download the version compatible to your operating system architecture. If you have a 64 bit OS then you can download either 64 bit of 32 bit, but if you have 32 bit OS then you should download the 32 bit version only.

Step 2 -&gt; Double click on the .exe file that you downloaded just now and follow the instructions. If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open cmd (go to Start -&gt; then type cmd in the search bar and hit enter). There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

===Mac===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#macos Download Link].

Step 2 -&gt; Double click on the .pkg file that you just downloaded. If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

===Linux===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#linux Download Link].

Step 2 -&gt; Go to the folder where you downloaded the .sh file and type following command 

  '''bash Anaconda-latest-Linux-x86_64.sh'''

If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

==Troubleshooting Spyder==

[[#Top]]

In most of the cases, it happens that Spyder is already running and you have initiated one more instance of it. Please make sure that spyder is not running already.
If you are on Linux OS, please launch spyder through terminal. Just open the terminal and type '''spyder''' and it will launch. When Spyder opens, make sure you see Anaconda with the version written on the Ipython console. If not, try changing the path of your anaconda. Follow these steps according to your OS version.

====Windows====
[https://stackoverflow.com/questions/44597662/conda-command-is-not-recognized-on-windows-10 Click Here]

====Linux====
[https://stackoverflow.com/questions/18675907/how-to-run-conda Click Here]

====Mac====
[https://stackoverflow.com/questions/35246386/conda-command-not-found Click Here]

In most of the cases relaunching Spyder works.
A more general Troubleshoot is present [https://github.com/spyder-ide/spyder/wiki/Troubleshooting-Guide-and-FAQ Here]

==How to run a program in Spyder IDE?==
Go to Run on the menu bar. Click Run-&gt;Run.

[[#TOP]]
==Print statements==
Print statements help to display output on console. 
{{#ev:youtube|https://youtu.be/gECkqaOwyt0|250|right}}

===Syntax===
print()

===How to print a message?===
In order to print a message in Python, write print(&quot;message&quot;).
Single, double, triple quote can be used print()

'''Example:'''

'''Single Quote'''
print('Hello')  
Output: Hello

'''Double Quote'''
print(&quot;Hello&quot;)  
Output: Hello

'''Quote within quote'''
print('Is &quot;Ram&quot; a good boy?')  
Output: Is &quot;Ram&quot; a good boy?

[[#TOP]]
==Escape sequences with strings==

We can use escape sequence within strings to make output more presentable.

'''\n'''  : It will move to next line.

'''\t'''  : It will add tab space(5space)

'''\a'''  : It will play system sound once.

'''Example:'''

Print(&quot;Hi, \n How are you?&quot;)

Output: 

Hi,

How are you?

Print(&quot;Hi, \t How are you?&quot;)

Output: 

Hi, &lt;5 spaces&gt; How are you?

[[File:Escape_Sequence.jpg]]

==Variables==
[[#Top]]
&lt;pre&gt;
Variables are used to store some values. Values can be strings, integers or decimal values.  

Variable Name Rules:
1. Variable name should start with letter or underscore. Variable name cant start with number.
Example:
Valid: JOC, WIKI, JOC_WIKI, _JOC
Invalid: 1JOC, 123WIKI, 0_WIKI

2. Remaining letter other then first one can contain number, underscore.
Example:
JOC1234, WIKI012_1332

3. Variable names are case sensitivities.
Example:
JOC, jOC, joC all are different vaibles. 

&lt;/pre&gt;
{{#ev:youtube|https://youtu.be/60iAXH1sm-Y|250|right}}
===How to print a variable?===
In order to print the value of a variable in python, first initialise the variable and then write 
&lt;pre&gt;print(variable_name)&lt;/pre&gt;
For example :
&lt;pre&gt;
  x=2
  print(x)
&lt;/pre&gt;

===Some facts about Variables===
* If you want to print variable name with a message, you can use , operator. For example : I want to print Hello Simran and Simran has been stored in a variable called ''name''.
  name=&quot;Simran&quot;
  print(&quot;Hello&quot;,name)
* If you change the value of a variable, it will store the latest value. For example :
  name=&quot;Simran&quot;
  name=&quot;Amit&quot;
  If you will execute the command ''print(name)'', Amit will be displayed.
* You can perform operations like addition, subtraction etc only on integral variables.

==How to execute couple of instructions on console?==
You can execute couple of instructions on console using ;. Write Statement 1;Statement 2;......and then press ''Enter''.
{{#ev:youtube|https://youtu.be/CYQCYvLE22Y|250|right}}









==How to take input from the user?==
We can take input from the user using ''input'' function. For Example : You want the user to input variable ''x'', then write x=input(&quot;Enter the value of x&quot;) and execute. Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNkVLCxZw_jcgyS-bmrIVSP

And when the input you need is of data type other than string. You can do both the input function and data conversion in a single line.
For example:
Consider the program for letting in the patients
'''c=input(&quot;Enter (1/0)&quot;);d=int(c)'''

Instead of using it in two separate lines, combine it into a single line
'''c=int(input(&quot;Enter (1/0)&quot;))'''.

To get two inputs in same line with a space between them split() is used.

a,b=input(&quot;enter a&quot;).split(&quot;enter b&quot;)
----
[[#Top]]

==If statement==
If statement is used to execute set of two contrary statements based on a condition. 

===Syntax===
If (Condition):
    Statement 1
else:
    Statement 2

If 'Condition' is true then 'Statement 1' will be executed otherwise 'Statement 2' will be executed.

Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNhHmg3SkK1uiutigcAbH9K

==Loops==
[[#Top]]&lt;br&gt;
Loops in a programming languages are used to execute set of repetitive statements. For loop and while loop are used extensively to execute a set of looping instructions.

=== For loop Syntax ===
&lt;pre&gt;
for i in range(10): 
    Statement
&lt;/pre&gt;
range(10) indicate that values 0 to 9 will be assigned to the variable i and for each value of i the Statement will be executed, e.g.
&lt;pre&gt;
for i in range(10): 
    print(i)
&lt;/pre&gt;
Output will be
&lt;pre&gt;
0
1
2
3
4
5
6
7
8
9
&lt;/pre&gt;

[[#Top]]

=== While loop Syntax ===
&lt;pre&gt;
intialisation

while(condition):
   Statement
   increment/decrement
&lt;/pre&gt;
e.g.
&lt;pre&gt;
#initialization
i=0
while(i&lt;10): 
    print(i)
    i=i+1
&lt;/pre&gt;
Output will be:
&lt;pre&gt;
0
1
2
3
4
5
6
7
8
9
&lt;/pre&gt;
Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNbl5jkVrrw1E5XSvm3GiCI

[[#TOP]]
==Importance of Indentation in Python==
Indentation is used to indicate to what block of statements belong. Indentation of blocks convey program structure in Python. Indentation in Python is used to refer a group/block of code/statements. In C++ we use { and } (curly brackets) to group a set of statements. But in Python, there are no such brackets used. Instead of such brackets used in other programming languages, we use indentation in Python.
Use tabs,instead of spaces for ease of writing code.

Wrong indentation can lead to syntax error, or makes your output wrong for your logic e.g.
&lt;pre&gt;
#IndentationError: expected an indented block
i=-1
if i&lt;0:
print(&quot;Test successful&quot;)#Wrong indentation 
else:    
    print(&quot;Test failed&quot;)
#Output: IndentationError: expected an indented block
&lt;/pre&gt;
---
&lt;pre&gt;
#Properly Indented code:
i=-1
if i&lt;0:
    print(&quot;Test successful&quot;)#Wrong indentation
else:    
    print(&quot;Test failed&quot;)
#Output:Test successful
&lt;/pre&gt;
---
Logic changed, so output changed, with improper indentation, e.g.
---
&lt;h3&gt;Code : 1&lt;/h3&gt;
&lt;pre&gt;
sum=0
for i in range(5):
    for j in range(5):
        sum+=i
print(sum, end=&quot; &quot;)
#Output: 50
&lt;/pre&gt;
        
&lt;h3&gt;Code : 2&lt;/h3&gt;
&lt;pre&gt;
for i in range(5):
    for j in range(5):
        print(end=&quot; &quot;)
    sum+=i
print(sum, end=&quot; &quot;)
#Output:                          10
&lt;/pre&gt;
{{#ev:youtube|https://youtu.be/pmavoW419Yc|250|right}}&lt;br&gt;

[[#Top]]

==Spyder IDE Black Screen Solution==

----

 This issue is because of ''Help'' screen which is by default open. 
 We need to close it. So here's how you do it-


===Method 1:===

Step 1-    Try by closing current pane for that,  &quot;''press ctrl+shift+F4''&quot;  wait for few seconds things will appear on screen.

Step 2-    If it so than on menu bar go to ''view &gt; panes &gt; help'' unchecked &quot;''Help''&quot; option.

Step 3-    Make sure that &quot;''Help''&quot; under ''view &gt; panes'' is permanently unchecked. And ''Editor, Ipython console, Variable explorer''  are checked. 


===Method 2:===

Step 1-    Open spyder.

Step 2-   On that black screen randomly ''Left click'' on spyder &quot;''Menu bar''&quot; area you will get menu drop downs, You have to find Drop down with &quot;''Panes''&quot; option.

Step 3-   On &quot;''Panes''&quot; drop down unchecked the &quot;''Help''&quot;.

Step 4-   Wait for few seconds Spyder view will appear.

Step 5 -  Make sure that ''&quot;Help&quot;'' under view&gt;panes is permanently unchecked. And ''Editor, Ipython console, variable explorer'' are checked.


[[#Top]]</text>
      <sha1>gysov0m96gd8ce41ipqaezlsm60jlbf</sha1>
    </revision>
    <revision>
      <id>3531</id>
      <parentid>3530</parentid>
      <timestamp>2018-09-28T02:01:45Z</timestamp>
      <contributor>
        <username>Sachinkr</username>
        <id>1743</id>
      </contributor>
      <comment>/* Variables */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="11222">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_2 Contributors of this page]
==Introduction to Python==
Python is a widely used programming language which allows programmers to write the program in fewer lines of code. It was designed by Guido van Rossum in 1991. Python uses an interpreter instead of compiler.Basically, the main difference between compiler and interpreter is that the compiler takes the code as 'whole' and compiles it..for example in C language and on the other side in interpreter..example: languages like Python...it interprets the written code 'line by line', and if somewhere error is found...it stops interpreting the code from there itself. Here, in our course we will be using Spyder IDE. Spyder is an integrated development environment with editing options to assist the programmers in writing programs. Spyder IDE is divided into two panes, one is console and other one is where program is written.




Python works on different platforms (Windows, Mac, Linux, Raspberry Pi, etc).
Python has a simple syntax similar to the English language.
Python has syntax that allows developers to write programs with fewer lines than some other programming languages.
Python runs on an interpreter system, meaning that code can be executed as soon as it is written. This means that prototyping can be very quick.
Python can be treated in a procedural way, an object-orientated way or a functional way.

==Installing Anaconda==
[[#Top]]
This article is all about installing and troubleshooting Anaconda and Spyder on different platforms.

===Windows===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#windows Download Link]. Make sure that you download the version compatible to your operating system architecture. If you have a 64 bit OS then you can download either 64 bit of 32 bit, but if you have 32 bit OS then you should download the 32 bit version only.

Step 2 -&gt; Double click on the .exe file that you downloaded just now and follow the instructions. If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open cmd (go to Start -&gt; then type cmd in the search bar and hit enter). There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

===Mac===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#macos Download Link].

Step 2 -&gt; Double click on the .pkg file that you just downloaded. If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

===Linux===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#linux Download Link].

Step 2 -&gt; Go to the folder where you downloaded the .sh file and type following command 

  '''bash Anaconda-latest-Linux-x86_64.sh'''

If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

==Troubleshooting Spyder==

[[#Top]]

In most of the cases, it happens that Spyder is already running and you have initiated one more instance of it. Please make sure that spyder is not running already.
If you are on Linux OS, please launch spyder through terminal. Just open the terminal and type '''spyder''' and it will launch. When Spyder opens, make sure you see Anaconda with the version written on the Ipython console. If not, try changing the path of your anaconda. Follow these steps according to your OS version.

====Windows====
[https://stackoverflow.com/questions/44597662/conda-command-is-not-recognized-on-windows-10 Click Here]

====Linux====
[https://stackoverflow.com/questions/18675907/how-to-run-conda Click Here]

====Mac====
[https://stackoverflow.com/questions/35246386/conda-command-not-found Click Here]

In most of the cases relaunching Spyder works.
A more general Troubleshoot is present [https://github.com/spyder-ide/spyder/wiki/Troubleshooting-Guide-and-FAQ Here]

==How to run a program in Spyder IDE?==
Go to Run on the menu bar. Click Run-&gt;Run.

[[#TOP]]
==Print statements==
Print statements help to display output on console. 
{{#ev:youtube|https://youtu.be/gECkqaOwyt0|250|right}}

===Syntax===
print()

===How to print a message?===
In order to print a message in Python, write print(&quot;message&quot;).
Single, double, triple quote can be used print()

'''Example:'''

'''Single Quote'''
print('Hello')  
Output: Hello

'''Double Quote'''
print(&quot;Hello&quot;)  
Output: Hello

'''Quote within quote'''
print('Is &quot;Ram&quot; a good boy?')  
Output: Is &quot;Ram&quot; a good boy?

[[#TOP]]
==Escape sequences with strings==

We can use escape sequence within strings to make output more presentable.

'''\n'''  : It will move to next line.

'''\t'''  : It will add tab space(5space)

'''\a'''  : It will play system sound once.

'''Example:'''

Print(&quot;Hi, \n How are you?&quot;)

Output: 

Hi,

How are you?

Print(&quot;Hi, \t How are you?&quot;)

Output: 

Hi, &lt;5 spaces&gt; How are you?

[[File:Escape_Sequence.jpg]]

==Variables==
[[#Top]]
&lt;pre&gt;
Variables are used to store some values. Values can be strings, integers or decimal values.  

Variable Name Rules:
1. Variable name should start with letter or underscore. Variable name cant start with number.
Example:
Valid: JOC, WIKI, JOC_WIKI, _JOC
Invalid: 1JOC, 123WIKI, 0_WIKI

2. Remaining letter other then first one can contain number, underscore.
Example:
JOC1234, WIKI012_1332

3. Variable names are case sensitivities.
Example:
JOC, jOC, joC all are different varibles. 

&lt;/pre&gt;
{{#ev:youtube|https://youtu.be/60iAXH1sm-Y|250|right}}
===How to print a variable?===
In order to print the value of a variable in python, first initialise the variable and then write 
&lt;pre&gt;print(variable_name)&lt;/pre&gt;
For example :
&lt;pre&gt;
  x=2
  print(x)
&lt;/pre&gt;

===Some facts about Variables===
* If you want to print variable name with a message, you can use , operator. For example : I want to print Hello Simran and Simran has been stored in a variable called ''name''.
  name=&quot;Simran&quot;
  print(&quot;Hello&quot;,name)
* If you change the value of a variable, it will store the latest value. For example :
  name=&quot;Simran&quot;
  name=&quot;Amit&quot;
  If you will execute the command ''print(name)'', Amit will be displayed.
* You can perform operations like addition, subtraction etc only on integral variables.

==How to execute couple of instructions on console?==
You can execute couple of instructions on console using ;. Write Statement 1;Statement 2;......and then press ''Enter''.
{{#ev:youtube|https://youtu.be/CYQCYvLE22Y|250|right}}









==How to take input from the user?==
We can take input from the user using ''input'' function. For Example : You want the user to input variable ''x'', then write x=input(&quot;Enter the value of x&quot;) and execute. Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNkVLCxZw_jcgyS-bmrIVSP

And when the input you need is of data type other than string. You can do both the input function and data conversion in a single line.
For example:
Consider the program for letting in the patients
'''c=input(&quot;Enter (1/0)&quot;);d=int(c)'''

Instead of using it in two separate lines, combine it into a single line
'''c=int(input(&quot;Enter (1/0)&quot;))'''.

To get two inputs in same line with a space between them split() is used.

a,b=input(&quot;enter a&quot;).split(&quot;enter b&quot;)
----
[[#Top]]

==If statement==
If statement is used to execute set of two contrary statements based on a condition. 

===Syntax===
If (Condition):
    Statement 1
else:
    Statement 2

If 'Condition' is true then 'Statement 1' will be executed otherwise 'Statement 2' will be executed.

Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNhHmg3SkK1uiutigcAbH9K

==Loops==
[[#Top]]&lt;br&gt;
Loops in a programming languages are used to execute set of repetitive statements. For loop and while loop are used extensively to execute a set of looping instructions.

=== For loop Syntax ===
&lt;pre&gt;
for i in range(10): 
    Statement
&lt;/pre&gt;
range(10) indicate that values 0 to 9 will be assigned to the variable i and for each value of i the Statement will be executed, e.g.
&lt;pre&gt;
for i in range(10): 
    print(i)
&lt;/pre&gt;
Output will be
&lt;pre&gt;
0
1
2
3
4
5
6
7
8
9
&lt;/pre&gt;

[[#Top]]

=== While loop Syntax ===
&lt;pre&gt;
intialisation

while(condition):
   Statement
   increment/decrement
&lt;/pre&gt;
e.g.
&lt;pre&gt;
#initialization
i=0
while(i&lt;10): 
    print(i)
    i=i+1
&lt;/pre&gt;
Output will be:
&lt;pre&gt;
0
1
2
3
4
5
6
7
8
9
&lt;/pre&gt;
Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNbl5jkVrrw1E5XSvm3GiCI

[[#TOP]]
==Importance of Indentation in Python==
Indentation is used to indicate to what block of statements belong. Indentation of blocks convey program structure in Python. Indentation in Python is used to refer a group/block of code/statements. In C++ we use { and } (curly brackets) to group a set of statements. But in Python, there are no such brackets used. Instead of such brackets used in other programming languages, we use indentation in Python.
Use tabs,instead of spaces for ease of writing code.

Wrong indentation can lead to syntax error, or makes your output wrong for your logic e.g.
&lt;pre&gt;
#IndentationError: expected an indented block
i=-1
if i&lt;0:
print(&quot;Test successful&quot;)#Wrong indentation 
else:    
    print(&quot;Test failed&quot;)
#Output: IndentationError: expected an indented block
&lt;/pre&gt;
---
&lt;pre&gt;
#Properly Indented code:
i=-1
if i&lt;0:
    print(&quot;Test successful&quot;)#Wrong indentation
else:    
    print(&quot;Test failed&quot;)
#Output:Test successful
&lt;/pre&gt;
---
Logic changed, so output changed, with improper indentation, e.g.
---
&lt;h3&gt;Code : 1&lt;/h3&gt;
&lt;pre&gt;
sum=0
for i in range(5):
    for j in range(5):
        sum+=i
print(sum, end=&quot; &quot;)
#Output: 50
&lt;/pre&gt;
        
&lt;h3&gt;Code : 2&lt;/h3&gt;
&lt;pre&gt;
for i in range(5):
    for j in range(5):
        print(end=&quot; &quot;)
    sum+=i
print(sum, end=&quot; &quot;)
#Output:                          10
&lt;/pre&gt;
{{#ev:youtube|https://youtu.be/pmavoW419Yc|250|right}}&lt;br&gt;

[[#Top]]

==Spyder IDE Black Screen Solution==

----

 This issue is because of ''Help'' screen which is by default open. 
 We need to close it. So here's how you do it-


===Method 1:===

Step 1-    Try by closing current pane for that,  &quot;''press ctrl+shift+F4''&quot;  wait for few seconds things will appear on screen.

Step 2-    If it so than on menu bar go to ''view &gt; panes &gt; help'' unchecked &quot;''Help''&quot; option.

Step 3-    Make sure that &quot;''Help''&quot; under ''view &gt; panes'' is permanently unchecked. And ''Editor, Ipython console, Variable explorer''  are checked. 


===Method 2:===

Step 1-    Open spyder.

Step 2-   On that black screen randomly ''Left click'' on spyder &quot;''Menu bar''&quot; area you will get menu drop downs, You have to find Drop down with &quot;''Panes''&quot; option.

Step 3-   On &quot;''Panes''&quot; drop down unchecked the &quot;''Help''&quot;.

Step 4-   Wait for few seconds Spyder view will appear.

Step 5 -  Make sure that ''&quot;Help&quot;'' under view&gt;panes is permanently unchecked. And ''Editor, Ipython console, variable explorer'' are checked.


[[#Top]]</text>
      <sha1>hu3qhm0fr4zpkt0744hzlny55strm0k</sha1>
    </revision>
    <revision>
      <id>3532</id>
      <parentid>3531</parentid>
      <timestamp>2018-09-28T02:04:04Z</timestamp>
      <contributor>
        <username>Sachinkr</username>
        <id>1743</id>
      </contributor>
      <comment>/* How to print a variable? */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="11253">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_2 Contributors of this page]
==Introduction to Python==
Python is a widely used programming language which allows programmers to write the program in fewer lines of code. It was designed by Guido van Rossum in 1991. Python uses an interpreter instead of compiler.Basically, the main difference between compiler and interpreter is that the compiler takes the code as 'whole' and compiles it..for example in C language and on the other side in interpreter..example: languages like Python...it interprets the written code 'line by line', and if somewhere error is found...it stops interpreting the code from there itself. Here, in our course we will be using Spyder IDE. Spyder is an integrated development environment with editing options to assist the programmers in writing programs. Spyder IDE is divided into two panes, one is console and other one is where program is written.




Python works on different platforms (Windows, Mac, Linux, Raspberry Pi, etc).
Python has a simple syntax similar to the English language.
Python has syntax that allows developers to write programs with fewer lines than some other programming languages.
Python runs on an interpreter system, meaning that code can be executed as soon as it is written. This means that prototyping can be very quick.
Python can be treated in a procedural way, an object-orientated way or a functional way.

==Installing Anaconda==
[[#Top]]
This article is all about installing and troubleshooting Anaconda and Spyder on different platforms.

===Windows===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#windows Download Link]. Make sure that you download the version compatible to your operating system architecture. If you have a 64 bit OS then you can download either 64 bit of 32 bit, but if you have 32 bit OS then you should download the 32 bit version only.

Step 2 -&gt; Double click on the .exe file that you downloaded just now and follow the instructions. If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open cmd (go to Start -&gt; then type cmd in the search bar and hit enter). There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

===Mac===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#macos Download Link].

Step 2 -&gt; Double click on the .pkg file that you just downloaded. If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

===Linux===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#linux Download Link].

Step 2 -&gt; Go to the folder where you downloaded the .sh file and type following command 

  '''bash Anaconda-latest-Linux-x86_64.sh'''

If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

==Troubleshooting Spyder==

[[#Top]]

In most of the cases, it happens that Spyder is already running and you have initiated one more instance of it. Please make sure that spyder is not running already.
If you are on Linux OS, please launch spyder through terminal. Just open the terminal and type '''spyder''' and it will launch. When Spyder opens, make sure you see Anaconda with the version written on the Ipython console. If not, try changing the path of your anaconda. Follow these steps according to your OS version.

====Windows====
[https://stackoverflow.com/questions/44597662/conda-command-is-not-recognized-on-windows-10 Click Here]

====Linux====
[https://stackoverflow.com/questions/18675907/how-to-run-conda Click Here]

====Mac====
[https://stackoverflow.com/questions/35246386/conda-command-not-found Click Here]

In most of the cases relaunching Spyder works.
A more general Troubleshoot is present [https://github.com/spyder-ide/spyder/wiki/Troubleshooting-Guide-and-FAQ Here]

==How to run a program in Spyder IDE?==
Go to Run on the menu bar. Click Run-&gt;Run.

[[#TOP]]
==Print statements==
Print statements help to display output on console. 
{{#ev:youtube|https://youtu.be/gECkqaOwyt0|250|right}}

===Syntax===
print()

===How to print a message?===
In order to print a message in Python, write print(&quot;message&quot;).
Single, double, triple quote can be used print()

'''Example:'''

'''Single Quote'''
print('Hello')  
Output: Hello

'''Double Quote'''
print(&quot;Hello&quot;)  
Output: Hello

'''Quote within quote'''
print('Is &quot;Ram&quot; a good boy?')  
Output: Is &quot;Ram&quot; a good boy?

[[#TOP]]
==Escape sequences with strings==

We can use escape sequence within strings to make output more presentable.

'''\n'''  : It will move to next line.

'''\t'''  : It will add tab space(5space)

'''\a'''  : It will play system sound once.

'''Example:'''

Print(&quot;Hi, \n How are you?&quot;)

Output: 

Hi,

How are you?

Print(&quot;Hi, \t How are you?&quot;)

Output: 

Hi, &lt;5 spaces&gt; How are you?

[[File:Escape_Sequence.jpg]]

==Variables==
[[#Top]]
&lt;pre&gt;
Variables are used to store some values. Values can be strings, integers or decimal values.  

Variable Name Rules:
1. Variable name should start with letter or underscore. Variable name cant start with number.
Example:
Valid: JOC, WIKI, JOC_WIKI, _JOC
Invalid: 1JOC, 123WIKI, 0_WIKI

2. Remaining letter other then first one can contain number, underscore.
Example:
JOC1234, WIKI012_1332

3. Variable names are case sensitivities.
Example:
JOC, jOC, joC all are different varibles. 

&lt;/pre&gt;
{{#ev:youtube|https://youtu.be/60iAXH1sm-Y|250|right}}
===How to print a variable?===
In order to print the value of a variable in python, first initialize the variable and then call it where ever you wanna use it. 
&lt;pre&gt;print(variable_name)&lt;/pre&gt;
For example :
&lt;pre&gt;
  x=2
  print(x)
&lt;/pre&gt;

===Some facts about Variables===
* If you want to print variable name with a message, you can use , operator. For example : I want to print Hello Simran and Simran has been stored in a variable called ''name''.
  name=&quot;Simran&quot;
  print(&quot;Hello&quot;,name)
* If you change the value of a variable, it will store the latest value. For example :
  name=&quot;Simran&quot;
  name=&quot;Amit&quot;
  If you will execute the command ''print(name)'', Amit will be displayed.
* You can perform operations like addition, subtraction etc only on integral variables.

==How to execute couple of instructions on console?==
You can execute couple of instructions on console using ;. Write Statement 1;Statement 2;......and then press ''Enter''.
{{#ev:youtube|https://youtu.be/CYQCYvLE22Y|250|right}}









==How to take input from the user?==
We can take input from the user using ''input'' function. For Example : You want the user to input variable ''x'', then write x=input(&quot;Enter the value of x&quot;) and execute. Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNkVLCxZw_jcgyS-bmrIVSP

And when the input you need is of data type other than string. You can do both the input function and data conversion in a single line.
For example:
Consider the program for letting in the patients
'''c=input(&quot;Enter (1/0)&quot;);d=int(c)'''

Instead of using it in two separate lines, combine it into a single line
'''c=int(input(&quot;Enter (1/0)&quot;))'''.

To get two inputs in same line with a space between them split() is used.

a,b=input(&quot;enter a&quot;).split(&quot;enter b&quot;)
----
[[#Top]]

==If statement==
If statement is used to execute set of two contrary statements based on a condition. 

===Syntax===
If (Condition):
    Statement 1
else:
    Statement 2

If 'Condition' is true then 'Statement 1' will be executed otherwise 'Statement 2' will be executed.

Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNhHmg3SkK1uiutigcAbH9K

==Loops==
[[#Top]]&lt;br&gt;
Loops in a programming languages are used to execute set of repetitive statements. For loop and while loop are used extensively to execute a set of looping instructions.

=== For loop Syntax ===
&lt;pre&gt;
for i in range(10): 
    Statement
&lt;/pre&gt;
range(10) indicate that values 0 to 9 will be assigned to the variable i and for each value of i the Statement will be executed, e.g.
&lt;pre&gt;
for i in range(10): 
    print(i)
&lt;/pre&gt;
Output will be
&lt;pre&gt;
0
1
2
3
4
5
6
7
8
9
&lt;/pre&gt;

[[#Top]]

=== While loop Syntax ===
&lt;pre&gt;
intialisation

while(condition):
   Statement
   increment/decrement
&lt;/pre&gt;
e.g.
&lt;pre&gt;
#initialization
i=0
while(i&lt;10): 
    print(i)
    i=i+1
&lt;/pre&gt;
Output will be:
&lt;pre&gt;
0
1
2
3
4
5
6
7
8
9
&lt;/pre&gt;
Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNbl5jkVrrw1E5XSvm3GiCI

[[#TOP]]
==Importance of Indentation in Python==
Indentation is used to indicate to what block of statements belong. Indentation of blocks convey program structure in Python. Indentation in Python is used to refer a group/block of code/statements. In C++ we use { and } (curly brackets) to group a set of statements. But in Python, there are no such brackets used. Instead of such brackets used in other programming languages, we use indentation in Python.
Use tabs,instead of spaces for ease of writing code.

Wrong indentation can lead to syntax error, or makes your output wrong for your logic e.g.
&lt;pre&gt;
#IndentationError: expected an indented block
i=-1
if i&lt;0:
print(&quot;Test successful&quot;)#Wrong indentation 
else:    
    print(&quot;Test failed&quot;)
#Output: IndentationError: expected an indented block
&lt;/pre&gt;
---
&lt;pre&gt;
#Properly Indented code:
i=-1
if i&lt;0:
    print(&quot;Test successful&quot;)#Wrong indentation
else:    
    print(&quot;Test failed&quot;)
#Output:Test successful
&lt;/pre&gt;
---
Logic changed, so output changed, with improper indentation, e.g.
---
&lt;h3&gt;Code : 1&lt;/h3&gt;
&lt;pre&gt;
sum=0
for i in range(5):
    for j in range(5):
        sum+=i
print(sum, end=&quot; &quot;)
#Output: 50
&lt;/pre&gt;
        
&lt;h3&gt;Code : 2&lt;/h3&gt;
&lt;pre&gt;
for i in range(5):
    for j in range(5):
        print(end=&quot; &quot;)
    sum+=i
print(sum, end=&quot; &quot;)
#Output:                          10
&lt;/pre&gt;
{{#ev:youtube|https://youtu.be/pmavoW419Yc|250|right}}&lt;br&gt;

[[#Top]]

==Spyder IDE Black Screen Solution==

----

 This issue is because of ''Help'' screen which is by default open. 
 We need to close it. So here's how you do it-


===Method 1:===

Step 1-    Try by closing current pane for that,  &quot;''press ctrl+shift+F4''&quot;  wait for few seconds things will appear on screen.

Step 2-    If it so than on menu bar go to ''view &gt; panes &gt; help'' unchecked &quot;''Help''&quot; option.

Step 3-    Make sure that &quot;''Help''&quot; under ''view &gt; panes'' is permanently unchecked. And ''Editor, Ipython console, Variable explorer''  are checked. 


===Method 2:===

Step 1-    Open spyder.

Step 2-   On that black screen randomly ''Left click'' on spyder &quot;''Menu bar''&quot; area you will get menu drop downs, You have to find Drop down with &quot;''Panes''&quot; option.

Step 3-   On &quot;''Panes''&quot; drop down unchecked the &quot;''Help''&quot;.

Step 4-   Wait for few seconds Spyder view will appear.

Step 5 -  Make sure that ''&quot;Help&quot;'' under view&gt;panes is permanently unchecked. And ''Editor, Ipython console, variable explorer'' are checked.


[[#Top]]</text>
      <sha1>2nbfv2mez73s0evjdxw944onit2vdhy</sha1>
    </revision>
    <revision>
      <id>3533</id>
      <parentid>3532</parentid>
      <timestamp>2018-09-28T02:05:24Z</timestamp>
      <contributor>
        <username>Sachinkr</username>
        <id>1743</id>
      </contributor>
      <comment>/* How to print a variable? */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="11261">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_2 Contributors of this page]
==Introduction to Python==
Python is a widely used programming language which allows programmers to write the program in fewer lines of code. It was designed by Guido van Rossum in 1991. Python uses an interpreter instead of compiler.Basically, the main difference between compiler and interpreter is that the compiler takes the code as 'whole' and compiles it..for example in C language and on the other side in interpreter..example: languages like Python...it interprets the written code 'line by line', and if somewhere error is found...it stops interpreting the code from there itself. Here, in our course we will be using Spyder IDE. Spyder is an integrated development environment with editing options to assist the programmers in writing programs. Spyder IDE is divided into two panes, one is console and other one is where program is written.




Python works on different platforms (Windows, Mac, Linux, Raspberry Pi, etc).
Python has a simple syntax similar to the English language.
Python has syntax that allows developers to write programs with fewer lines than some other programming languages.
Python runs on an interpreter system, meaning that code can be executed as soon as it is written. This means that prototyping can be very quick.
Python can be treated in a procedural way, an object-orientated way or a functional way.

==Installing Anaconda==
[[#Top]]
This article is all about installing and troubleshooting Anaconda and Spyder on different platforms.

===Windows===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#windows Download Link]. Make sure that you download the version compatible to your operating system architecture. If you have a 64 bit OS then you can download either 64 bit of 32 bit, but if you have 32 bit OS then you should download the 32 bit version only.

Step 2 -&gt; Double click on the .exe file that you downloaded just now and follow the instructions. If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open cmd (go to Start -&gt; then type cmd in the search bar and hit enter). There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

===Mac===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#macos Download Link].

Step 2 -&gt; Double click on the .pkg file that you just downloaded. If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

===Linux===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#linux Download Link].

Step 2 -&gt; Go to the folder where you downloaded the .sh file and type following command 

  '''bash Anaconda-latest-Linux-x86_64.sh'''

If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

==Troubleshooting Spyder==

[[#Top]]

In most of the cases, it happens that Spyder is already running and you have initiated one more instance of it. Please make sure that spyder is not running already.
If you are on Linux OS, please launch spyder through terminal. Just open the terminal and type '''spyder''' and it will launch. When Spyder opens, make sure you see Anaconda with the version written on the Ipython console. If not, try changing the path of your anaconda. Follow these steps according to your OS version.

====Windows====
[https://stackoverflow.com/questions/44597662/conda-command-is-not-recognized-on-windows-10 Click Here]

====Linux====
[https://stackoverflow.com/questions/18675907/how-to-run-conda Click Here]

====Mac====
[https://stackoverflow.com/questions/35246386/conda-command-not-found Click Here]

In most of the cases relaunching Spyder works.
A more general Troubleshoot is present [https://github.com/spyder-ide/spyder/wiki/Troubleshooting-Guide-and-FAQ Here]

==How to run a program in Spyder IDE?==
Go to Run on the menu bar. Click Run-&gt;Run.

[[#TOP]]
==Print statements==
Print statements help to display output on console. 
{{#ev:youtube|https://youtu.be/gECkqaOwyt0|250|right}}

===Syntax===
print()

===How to print a message?===
In order to print a message in Python, write print(&quot;message&quot;).
Single, double, triple quote can be used print()

'''Example:'''

'''Single Quote'''
print('Hello')  
Output: Hello

'''Double Quote'''
print(&quot;Hello&quot;)  
Output: Hello

'''Quote within quote'''
print('Is &quot;Ram&quot; a good boy?')  
Output: Is &quot;Ram&quot; a good boy?

[[#TOP]]
==Escape sequences with strings==

We can use escape sequence within strings to make output more presentable.

'''\n'''  : It will move to next line.

'''\t'''  : It will add tab space(5space)

'''\a'''  : It will play system sound once.

'''Example:'''

Print(&quot;Hi, \n How are you?&quot;)

Output: 

Hi,

How are you?

Print(&quot;Hi, \t How are you?&quot;)

Output: 

Hi, &lt;5 spaces&gt; How are you?

[[File:Escape_Sequence.jpg]]

==Variables==
[[#Top]]
&lt;pre&gt;
Variables are used to store some values. Values can be strings, integers or decimal values.  

Variable Name Rules:
1. Variable name should start with letter or underscore. Variable name cant start with number.
Example:
Valid: JOC, WIKI, JOC_WIKI, _JOC
Invalid: 1JOC, 123WIKI, 0_WIKI

2. Remaining letter other then first one can contain number, underscore.
Example:
JOC1234, WIKI012_1332

3. Variable names are case sensitivities.
Example:
JOC, jOC, joC all are different varibles. 

&lt;/pre&gt;
{{#ev:youtube|https://youtu.be/60iAXH1sm-Y|250|right}}
===How to print a variable?===
In order to print the value of a variable in python, first initialize the variable and then call it where ever you wanna use it. 
&lt;pre&gt;print(variable_name)&lt;/pre&gt;

&lt;pre&gt;For example :
x=2
print(x)

a = &quot;JOC&quot;

&lt;/pre&gt;

===Some facts about Variables===
* If you want to print variable name with a message, you can use , operator. For example : I want to print Hello Simran and Simran has been stored in a variable called ''name''.
  name=&quot;Simran&quot;
  print(&quot;Hello&quot;,name)
* If you change the value of a variable, it will store the latest value. For example :
  name=&quot;Simran&quot;
  name=&quot;Amit&quot;
  If you will execute the command ''print(name)'', Amit will be displayed.
* You can perform operations like addition, subtraction etc only on integral variables.

==How to execute couple of instructions on console?==
You can execute couple of instructions on console using ;. Write Statement 1;Statement 2;......and then press ''Enter''.
{{#ev:youtube|https://youtu.be/CYQCYvLE22Y|250|right}}









==How to take input from the user?==
We can take input from the user using ''input'' function. For Example : You want the user to input variable ''x'', then write x=input(&quot;Enter the value of x&quot;) and execute. Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNkVLCxZw_jcgyS-bmrIVSP

And when the input you need is of data type other than string. You can do both the input function and data conversion in a single line.
For example:
Consider the program for letting in the patients
'''c=input(&quot;Enter (1/0)&quot;);d=int(c)'''

Instead of using it in two separate lines, combine it into a single line
'''c=int(input(&quot;Enter (1/0)&quot;))'''.

To get two inputs in same line with a space between them split() is used.

a,b=input(&quot;enter a&quot;).split(&quot;enter b&quot;)
----
[[#Top]]

==If statement==
If statement is used to execute set of two contrary statements based on a condition. 

===Syntax===
If (Condition):
    Statement 1
else:
    Statement 2

If 'Condition' is true then 'Statement 1' will be executed otherwise 'Statement 2' will be executed.

Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNhHmg3SkK1uiutigcAbH9K

==Loops==
[[#Top]]&lt;br&gt;
Loops in a programming languages are used to execute set of repetitive statements. For loop and while loop are used extensively to execute a set of looping instructions.

=== For loop Syntax ===
&lt;pre&gt;
for i in range(10): 
    Statement
&lt;/pre&gt;
range(10) indicate that values 0 to 9 will be assigned to the variable i and for each value of i the Statement will be executed, e.g.
&lt;pre&gt;
for i in range(10): 
    print(i)
&lt;/pre&gt;
Output will be
&lt;pre&gt;
0
1
2
3
4
5
6
7
8
9
&lt;/pre&gt;

[[#Top]]

=== While loop Syntax ===
&lt;pre&gt;
intialisation

while(condition):
   Statement
   increment/decrement
&lt;/pre&gt;
e.g.
&lt;pre&gt;
#initialization
i=0
while(i&lt;10): 
    print(i)
    i=i+1
&lt;/pre&gt;
Output will be:
&lt;pre&gt;
0
1
2
3
4
5
6
7
8
9
&lt;/pre&gt;
Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNbl5jkVrrw1E5XSvm3GiCI

[[#TOP]]
==Importance of Indentation in Python==
Indentation is used to indicate to what block of statements belong. Indentation of blocks convey program structure in Python. Indentation in Python is used to refer a group/block of code/statements. In C++ we use { and } (curly brackets) to group a set of statements. But in Python, there are no such brackets used. Instead of such brackets used in other programming languages, we use indentation in Python.
Use tabs,instead of spaces for ease of writing code.

Wrong indentation can lead to syntax error, or makes your output wrong for your logic e.g.
&lt;pre&gt;
#IndentationError: expected an indented block
i=-1
if i&lt;0:
print(&quot;Test successful&quot;)#Wrong indentation 
else:    
    print(&quot;Test failed&quot;)
#Output: IndentationError: expected an indented block
&lt;/pre&gt;
---
&lt;pre&gt;
#Properly Indented code:
i=-1
if i&lt;0:
    print(&quot;Test successful&quot;)#Wrong indentation
else:    
    print(&quot;Test failed&quot;)
#Output:Test successful
&lt;/pre&gt;
---
Logic changed, so output changed, with improper indentation, e.g.
---
&lt;h3&gt;Code : 1&lt;/h3&gt;
&lt;pre&gt;
sum=0
for i in range(5):
    for j in range(5):
        sum+=i
print(sum, end=&quot; &quot;)
#Output: 50
&lt;/pre&gt;
        
&lt;h3&gt;Code : 2&lt;/h3&gt;
&lt;pre&gt;
for i in range(5):
    for j in range(5):
        print(end=&quot; &quot;)
    sum+=i
print(sum, end=&quot; &quot;)
#Output:                          10
&lt;/pre&gt;
{{#ev:youtube|https://youtu.be/pmavoW419Yc|250|right}}&lt;br&gt;

[[#Top]]

==Spyder IDE Black Screen Solution==

----

 This issue is because of ''Help'' screen which is by default open. 
 We need to close it. So here's how you do it-


===Method 1:===

Step 1-    Try by closing current pane for that,  &quot;''press ctrl+shift+F4''&quot;  wait for few seconds things will appear on screen.

Step 2-    If it so than on menu bar go to ''view &gt; panes &gt; help'' unchecked &quot;''Help''&quot; option.

Step 3-    Make sure that &quot;''Help''&quot; under ''view &gt; panes'' is permanently unchecked. And ''Editor, Ipython console, Variable explorer''  are checked. 


===Method 2:===

Step 1-    Open spyder.

Step 2-   On that black screen randomly ''Left click'' on spyder &quot;''Menu bar''&quot; area you will get menu drop downs, You have to find Drop down with &quot;''Panes''&quot; option.

Step 3-   On &quot;''Panes''&quot; drop down unchecked the &quot;''Help''&quot;.

Step 4-   Wait for few seconds Spyder view will appear.

Step 5 -  Make sure that ''&quot;Help&quot;'' under view&gt;panes is permanently unchecked. And ''Editor, Ipython console, variable explorer'' are checked.


[[#Top]]</text>
      <sha1>5r8cf7oa8v3l02y580mft9a4jbxfg8h</sha1>
    </revision>
    <revision>
      <id>3534</id>
      <parentid>3533</parentid>
      <timestamp>2018-09-28T02:05:35Z</timestamp>
      <contributor>
        <username>Sachinkr</username>
        <id>1743</id>
      </contributor>
      <comment>/* How to print a variable? */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="11273">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_2 Contributors of this page]
==Introduction to Python==
Python is a widely used programming language which allows programmers to write the program in fewer lines of code. It was designed by Guido van Rossum in 1991. Python uses an interpreter instead of compiler.Basically, the main difference between compiler and interpreter is that the compiler takes the code as 'whole' and compiles it..for example in C language and on the other side in interpreter..example: languages like Python...it interprets the written code 'line by line', and if somewhere error is found...it stops interpreting the code from there itself. Here, in our course we will be using Spyder IDE. Spyder is an integrated development environment with editing options to assist the programmers in writing programs. Spyder IDE is divided into two panes, one is console and other one is where program is written.




Python works on different platforms (Windows, Mac, Linux, Raspberry Pi, etc).
Python has a simple syntax similar to the English language.
Python has syntax that allows developers to write programs with fewer lines than some other programming languages.
Python runs on an interpreter system, meaning that code can be executed as soon as it is written. This means that prototyping can be very quick.
Python can be treated in a procedural way, an object-orientated way or a functional way.

==Installing Anaconda==
[[#Top]]
This article is all about installing and troubleshooting Anaconda and Spyder on different platforms.

===Windows===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#windows Download Link]. Make sure that you download the version compatible to your operating system architecture. If you have a 64 bit OS then you can download either 64 bit of 32 bit, but if you have 32 bit OS then you should download the 32 bit version only.

Step 2 -&gt; Double click on the .exe file that you downloaded just now and follow the instructions. If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open cmd (go to Start -&gt; then type cmd in the search bar and hit enter). There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

===Mac===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#macos Download Link].

Step 2 -&gt; Double click on the .pkg file that you just downloaded. If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

===Linux===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#linux Download Link].

Step 2 -&gt; Go to the folder where you downloaded the .sh file and type following command 

  '''bash Anaconda-latest-Linux-x86_64.sh'''

If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

==Troubleshooting Spyder==

[[#Top]]

In most of the cases, it happens that Spyder is already running and you have initiated one more instance of it. Please make sure that spyder is not running already.
If you are on Linux OS, please launch spyder through terminal. Just open the terminal and type '''spyder''' and it will launch. When Spyder opens, make sure you see Anaconda with the version written on the Ipython console. If not, try changing the path of your anaconda. Follow these steps according to your OS version.

====Windows====
[https://stackoverflow.com/questions/44597662/conda-command-is-not-recognized-on-windows-10 Click Here]

====Linux====
[https://stackoverflow.com/questions/18675907/how-to-run-conda Click Here]

====Mac====
[https://stackoverflow.com/questions/35246386/conda-command-not-found Click Here]

In most of the cases relaunching Spyder works.
A more general Troubleshoot is present [https://github.com/spyder-ide/spyder/wiki/Troubleshooting-Guide-and-FAQ Here]

==How to run a program in Spyder IDE?==
Go to Run on the menu bar. Click Run-&gt;Run.

[[#TOP]]
==Print statements==
Print statements help to display output on console. 
{{#ev:youtube|https://youtu.be/gECkqaOwyt0|250|right}}

===Syntax===
print()

===How to print a message?===
In order to print a message in Python, write print(&quot;message&quot;).
Single, double, triple quote can be used print()

'''Example:'''

'''Single Quote'''
print('Hello')  
Output: Hello

'''Double Quote'''
print(&quot;Hello&quot;)  
Output: Hello

'''Quote within quote'''
print('Is &quot;Ram&quot; a good boy?')  
Output: Is &quot;Ram&quot; a good boy?

[[#TOP]]
==Escape sequences with strings==

We can use escape sequence within strings to make output more presentable.

'''\n'''  : It will move to next line.

'''\t'''  : It will add tab space(5space)

'''\a'''  : It will play system sound once.

'''Example:'''

Print(&quot;Hi, \n How are you?&quot;)

Output: 

Hi,

How are you?

Print(&quot;Hi, \t How are you?&quot;)

Output: 

Hi, &lt;5 spaces&gt; How are you?

[[File:Escape_Sequence.jpg]]

==Variables==
[[#Top]]
&lt;pre&gt;
Variables are used to store some values. Values can be strings, integers or decimal values.  

Variable Name Rules:
1. Variable name should start with letter or underscore. Variable name cant start with number.
Example:
Valid: JOC, WIKI, JOC_WIKI, _JOC
Invalid: 1JOC, 123WIKI, 0_WIKI

2. Remaining letter other then first one can contain number, underscore.
Example:
JOC1234, WIKI012_1332

3. Variable names are case sensitivities.
Example:
JOC, jOC, joC all are different varibles. 

&lt;/pre&gt;
{{#ev:youtube|https://youtu.be/60iAXH1sm-Y|250|right}}
===How to print a variable?===
In order to print the value of a variable in python, first initialize the variable and then call it where ever you wanna use it. 
&lt;pre&gt;print(variable_name)&lt;/pre&gt;

&lt;pre&gt;For example :
x=2
print(x)

a = &quot;JOC&quot;
b = &quot;_WIKI&quot;

&lt;/pre&gt;

===Some facts about Variables===
* If you want to print variable name with a message, you can use , operator. For example : I want to print Hello Simran and Simran has been stored in a variable called ''name''.
  name=&quot;Simran&quot;
  print(&quot;Hello&quot;,name)
* If you change the value of a variable, it will store the latest value. For example :
  name=&quot;Simran&quot;
  name=&quot;Amit&quot;
  If you will execute the command ''print(name)'', Amit will be displayed.
* You can perform operations like addition, subtraction etc only on integral variables.

==How to execute couple of instructions on console?==
You can execute couple of instructions on console using ;. Write Statement 1;Statement 2;......and then press ''Enter''.
{{#ev:youtube|https://youtu.be/CYQCYvLE22Y|250|right}}









==How to take input from the user?==
We can take input from the user using ''input'' function. For Example : You want the user to input variable ''x'', then write x=input(&quot;Enter the value of x&quot;) and execute. Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNkVLCxZw_jcgyS-bmrIVSP

And when the input you need is of data type other than string. You can do both the input function and data conversion in a single line.
For example:
Consider the program for letting in the patients
'''c=input(&quot;Enter (1/0)&quot;);d=int(c)'''

Instead of using it in two separate lines, combine it into a single line
'''c=int(input(&quot;Enter (1/0)&quot;))'''.

To get two inputs in same line with a space between them split() is used.

a,b=input(&quot;enter a&quot;).split(&quot;enter b&quot;)
----
[[#Top]]

==If statement==
If statement is used to execute set of two contrary statements based on a condition. 

===Syntax===
If (Condition):
    Statement 1
else:
    Statement 2

If 'Condition' is true then 'Statement 1' will be executed otherwise 'Statement 2' will be executed.

Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNhHmg3SkK1uiutigcAbH9K

==Loops==
[[#Top]]&lt;br&gt;
Loops in a programming languages are used to execute set of repetitive statements. For loop and while loop are used extensively to execute a set of looping instructions.

=== For loop Syntax ===
&lt;pre&gt;
for i in range(10): 
    Statement
&lt;/pre&gt;
range(10) indicate that values 0 to 9 will be assigned to the variable i and for each value of i the Statement will be executed, e.g.
&lt;pre&gt;
for i in range(10): 
    print(i)
&lt;/pre&gt;
Output will be
&lt;pre&gt;
0
1
2
3
4
5
6
7
8
9
&lt;/pre&gt;

[[#Top]]

=== While loop Syntax ===
&lt;pre&gt;
intialisation

while(condition):
   Statement
   increment/decrement
&lt;/pre&gt;
e.g.
&lt;pre&gt;
#initialization
i=0
while(i&lt;10): 
    print(i)
    i=i+1
&lt;/pre&gt;
Output will be:
&lt;pre&gt;
0
1
2
3
4
5
6
7
8
9
&lt;/pre&gt;
Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNbl5jkVrrw1E5XSvm3GiCI

[[#TOP]]
==Importance of Indentation in Python==
Indentation is used to indicate to what block of statements belong. Indentation of blocks convey program structure in Python. Indentation in Python is used to refer a group/block of code/statements. In C++ we use { and } (curly brackets) to group a set of statements. But in Python, there are no such brackets used. Instead of such brackets used in other programming languages, we use indentation in Python.
Use tabs,instead of spaces for ease of writing code.

Wrong indentation can lead to syntax error, or makes your output wrong for your logic e.g.
&lt;pre&gt;
#IndentationError: expected an indented block
i=-1
if i&lt;0:
print(&quot;Test successful&quot;)#Wrong indentation 
else:    
    print(&quot;Test failed&quot;)
#Output: IndentationError: expected an indented block
&lt;/pre&gt;
---
&lt;pre&gt;
#Properly Indented code:
i=-1
if i&lt;0:
    print(&quot;Test successful&quot;)#Wrong indentation
else:    
    print(&quot;Test failed&quot;)
#Output:Test successful
&lt;/pre&gt;
---
Logic changed, so output changed, with improper indentation, e.g.
---
&lt;h3&gt;Code : 1&lt;/h3&gt;
&lt;pre&gt;
sum=0
for i in range(5):
    for j in range(5):
        sum+=i
print(sum, end=&quot; &quot;)
#Output: 50
&lt;/pre&gt;
        
&lt;h3&gt;Code : 2&lt;/h3&gt;
&lt;pre&gt;
for i in range(5):
    for j in range(5):
        print(end=&quot; &quot;)
    sum+=i
print(sum, end=&quot; &quot;)
#Output:                          10
&lt;/pre&gt;
{{#ev:youtube|https://youtu.be/pmavoW419Yc|250|right}}&lt;br&gt;

[[#Top]]

==Spyder IDE Black Screen Solution==

----

 This issue is because of ''Help'' screen which is by default open. 
 We need to close it. So here's how you do it-


===Method 1:===

Step 1-    Try by closing current pane for that,  &quot;''press ctrl+shift+F4''&quot;  wait for few seconds things will appear on screen.

Step 2-    If it so than on menu bar go to ''view &gt; panes &gt; help'' unchecked &quot;''Help''&quot; option.

Step 3-    Make sure that &quot;''Help''&quot; under ''view &gt; panes'' is permanently unchecked. And ''Editor, Ipython console, Variable explorer''  are checked. 


===Method 2:===

Step 1-    Open spyder.

Step 2-   On that black screen randomly ''Left click'' on spyder &quot;''Menu bar''&quot; area you will get menu drop downs, You have to find Drop down with &quot;''Panes''&quot; option.

Step 3-   On &quot;''Panes''&quot; drop down unchecked the &quot;''Help''&quot;.

Step 4-   Wait for few seconds Spyder view will appear.

Step 5 -  Make sure that ''&quot;Help&quot;'' under view&gt;panes is permanently unchecked. And ''Editor, Ipython console, variable explorer'' are checked.


[[#Top]]</text>
      <sha1>rfkqmg79hb87s11gcl7rw453sca5lg6</sha1>
    </revision>
    <revision>
      <id>3535</id>
      <parentid>3534</parentid>
      <timestamp>2018-09-28T02:06:21Z</timestamp>
      <contributor>
        <username>Sachinkr</username>
        <id>1743</id>
      </contributor>
      <comment>/* How to print a variable? */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="11366">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_2 Contributors of this page]
==Introduction to Python==
Python is a widely used programming language which allows programmers to write the program in fewer lines of code. It was designed by Guido van Rossum in 1991. Python uses an interpreter instead of compiler.Basically, the main difference between compiler and interpreter is that the compiler takes the code as 'whole' and compiles it..for example in C language and on the other side in interpreter..example: languages like Python...it interprets the written code 'line by line', and if somewhere error is found...it stops interpreting the code from there itself. Here, in our course we will be using Spyder IDE. Spyder is an integrated development environment with editing options to assist the programmers in writing programs. Spyder IDE is divided into two panes, one is console and other one is where program is written.




Python works on different platforms (Windows, Mac, Linux, Raspberry Pi, etc).
Python has a simple syntax similar to the English language.
Python has syntax that allows developers to write programs with fewer lines than some other programming languages.
Python runs on an interpreter system, meaning that code can be executed as soon as it is written. This means that prototyping can be very quick.
Python can be treated in a procedural way, an object-orientated way or a functional way.

==Installing Anaconda==
[[#Top]]
This article is all about installing and troubleshooting Anaconda and Spyder on different platforms.

===Windows===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#windows Download Link]. Make sure that you download the version compatible to your operating system architecture. If you have a 64 bit OS then you can download either 64 bit of 32 bit, but if you have 32 bit OS then you should download the 32 bit version only.

Step 2 -&gt; Double click on the .exe file that you downloaded just now and follow the instructions. If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open cmd (go to Start -&gt; then type cmd in the search bar and hit enter). There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

===Mac===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#macos Download Link].

Step 2 -&gt; Double click on the .pkg file that you just downloaded. If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

===Linux===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#linux Download Link].

Step 2 -&gt; Go to the folder where you downloaded the .sh file and type following command 

  '''bash Anaconda-latest-Linux-x86_64.sh'''

If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

==Troubleshooting Spyder==

[[#Top]]

In most of the cases, it happens that Spyder is already running and you have initiated one more instance of it. Please make sure that spyder is not running already.
If you are on Linux OS, please launch spyder through terminal. Just open the terminal and type '''spyder''' and it will launch. When Spyder opens, make sure you see Anaconda with the version written on the Ipython console. If not, try changing the path of your anaconda. Follow these steps according to your OS version.

====Windows====
[https://stackoverflow.com/questions/44597662/conda-command-is-not-recognized-on-windows-10 Click Here]

====Linux====
[https://stackoverflow.com/questions/18675907/how-to-run-conda Click Here]

====Mac====
[https://stackoverflow.com/questions/35246386/conda-command-not-found Click Here]

In most of the cases relaunching Spyder works.
A more general Troubleshoot is present [https://github.com/spyder-ide/spyder/wiki/Troubleshooting-Guide-and-FAQ Here]

==How to run a program in Spyder IDE?==
Go to Run on the menu bar. Click Run-&gt;Run.

[[#TOP]]
==Print statements==
Print statements help to display output on console. 
{{#ev:youtube|https://youtu.be/gECkqaOwyt0|250|right}}

===Syntax===
print()

===How to print a message?===
In order to print a message in Python, write print(&quot;message&quot;).
Single, double, triple quote can be used print()

'''Example:'''

'''Single Quote'''
print('Hello')  
Output: Hello

'''Double Quote'''
print(&quot;Hello&quot;)  
Output: Hello

'''Quote within quote'''
print('Is &quot;Ram&quot; a good boy?')  
Output: Is &quot;Ram&quot; a good boy?

[[#TOP]]
==Escape sequences with strings==

We can use escape sequence within strings to make output more presentable.

'''\n'''  : It will move to next line.

'''\t'''  : It will add tab space(5space)

'''\a'''  : It will play system sound once.

'''Example:'''

Print(&quot;Hi, \n How are you?&quot;)

Output: 

Hi,

How are you?

Print(&quot;Hi, \t How are you?&quot;)

Output: 

Hi, &lt;5 spaces&gt; How are you?

[[File:Escape_Sequence.jpg]]

==Variables==
[[#Top]]
&lt;pre&gt;
Variables are used to store some values. Values can be strings, integers or decimal values.  

Variable Name Rules:
1. Variable name should start with letter or underscore. Variable name cant start with number.
Example:
Valid: JOC, WIKI, JOC_WIKI, _JOC
Invalid: 1JOC, 123WIKI, 0_WIKI

2. Remaining letter other then first one can contain number, underscore.
Example:
JOC1234, WIKI012_1332

3. Variable names are case sensitivities.
Example:
JOC, jOC, joC all are different varibles. 

&lt;/pre&gt;
{{#ev:youtube|https://youtu.be/60iAXH1sm-Y|250|right}}
===How to print a variable?===
In order to print the value of a variable in python, first initialize the variable and then call it where ever you wanna use it. 
&lt;pre&gt;print(variable_name)&lt;/pre&gt;

&lt;pre&gt;For example :
x=2                # x is viable here
print(x)           # calling variable x with print funtion

a = &quot;JOC&quot;
b = &quot;_WIKI&quot;
c = a + b
&lt;/pre&gt;

===Some facts about Variables===
* If you want to print variable name with a message, you can use , operator. For example : I want to print Hello Simran and Simran has been stored in a variable called ''name''.
  name=&quot;Simran&quot;
  print(&quot;Hello&quot;,name)
* If you change the value of a variable, it will store the latest value. For example :
  name=&quot;Simran&quot;
  name=&quot;Amit&quot;
  If you will execute the command ''print(name)'', Amit will be displayed.
* You can perform operations like addition, subtraction etc only on integral variables.

==How to execute couple of instructions on console?==
You can execute couple of instructions on console using ;. Write Statement 1;Statement 2;......and then press ''Enter''.
{{#ev:youtube|https://youtu.be/CYQCYvLE22Y|250|right}}









==How to take input from the user?==
We can take input from the user using ''input'' function. For Example : You want the user to input variable ''x'', then write x=input(&quot;Enter the value of x&quot;) and execute. Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNkVLCxZw_jcgyS-bmrIVSP

And when the input you need is of data type other than string. You can do both the input function and data conversion in a single line.
For example:
Consider the program for letting in the patients
'''c=input(&quot;Enter (1/0)&quot;);d=int(c)'''

Instead of using it in two separate lines, combine it into a single line
'''c=int(input(&quot;Enter (1/0)&quot;))'''.

To get two inputs in same line with a space between them split() is used.

a,b=input(&quot;enter a&quot;).split(&quot;enter b&quot;)
----
[[#Top]]

==If statement==
If statement is used to execute set of two contrary statements based on a condition. 

===Syntax===
If (Condition):
    Statement 1
else:
    Statement 2

If 'Condition' is true then 'Statement 1' will be executed otherwise 'Statement 2' will be executed.

Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNhHmg3SkK1uiutigcAbH9K

==Loops==
[[#Top]]&lt;br&gt;
Loops in a programming languages are used to execute set of repetitive statements. For loop and while loop are used extensively to execute a set of looping instructions.

=== For loop Syntax ===
&lt;pre&gt;
for i in range(10): 
    Statement
&lt;/pre&gt;
range(10) indicate that values 0 to 9 will be assigned to the variable i and for each value of i the Statement will be executed, e.g.
&lt;pre&gt;
for i in range(10): 
    print(i)
&lt;/pre&gt;
Output will be
&lt;pre&gt;
0
1
2
3
4
5
6
7
8
9
&lt;/pre&gt;

[[#Top]]

=== While loop Syntax ===
&lt;pre&gt;
intialisation

while(condition):
   Statement
   increment/decrement
&lt;/pre&gt;
e.g.
&lt;pre&gt;
#initialization
i=0
while(i&lt;10): 
    print(i)
    i=i+1
&lt;/pre&gt;
Output will be:
&lt;pre&gt;
0
1
2
3
4
5
6
7
8
9
&lt;/pre&gt;
Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNbl5jkVrrw1E5XSvm3GiCI

[[#TOP]]
==Importance of Indentation in Python==
Indentation is used to indicate to what block of statements belong. Indentation of blocks convey program structure in Python. Indentation in Python is used to refer a group/block of code/statements. In C++ we use { and } (curly brackets) to group a set of statements. But in Python, there are no such brackets used. Instead of such brackets used in other programming languages, we use indentation in Python.
Use tabs,instead of spaces for ease of writing code.

Wrong indentation can lead to syntax error, or makes your output wrong for your logic e.g.
&lt;pre&gt;
#IndentationError: expected an indented block
i=-1
if i&lt;0:
print(&quot;Test successful&quot;)#Wrong indentation 
else:    
    print(&quot;Test failed&quot;)
#Output: IndentationError: expected an indented block
&lt;/pre&gt;
---
&lt;pre&gt;
#Properly Indented code:
i=-1
if i&lt;0:
    print(&quot;Test successful&quot;)#Wrong indentation
else:    
    print(&quot;Test failed&quot;)
#Output:Test successful
&lt;/pre&gt;
---
Logic changed, so output changed, with improper indentation, e.g.
---
&lt;h3&gt;Code : 1&lt;/h3&gt;
&lt;pre&gt;
sum=0
for i in range(5):
    for j in range(5):
        sum+=i
print(sum, end=&quot; &quot;)
#Output: 50
&lt;/pre&gt;
        
&lt;h3&gt;Code : 2&lt;/h3&gt;
&lt;pre&gt;
for i in range(5):
    for j in range(5):
        print(end=&quot; &quot;)
    sum+=i
print(sum, end=&quot; &quot;)
#Output:                          10
&lt;/pre&gt;
{{#ev:youtube|https://youtu.be/pmavoW419Yc|250|right}}&lt;br&gt;

[[#Top]]

==Spyder IDE Black Screen Solution==

----

 This issue is because of ''Help'' screen which is by default open. 
 We need to close it. So here's how you do it-


===Method 1:===

Step 1-    Try by closing current pane for that,  &quot;''press ctrl+shift+F4''&quot;  wait for few seconds things will appear on screen.

Step 2-    If it so than on menu bar go to ''view &gt; panes &gt; help'' unchecked &quot;''Help''&quot; option.

Step 3-    Make sure that &quot;''Help''&quot; under ''view &gt; panes'' is permanently unchecked. And ''Editor, Ipython console, Variable explorer''  are checked. 


===Method 2:===

Step 1-    Open spyder.

Step 2-   On that black screen randomly ''Left click'' on spyder &quot;''Menu bar''&quot; area you will get menu drop downs, You have to find Drop down with &quot;''Panes''&quot; option.

Step 3-   On &quot;''Panes''&quot; drop down unchecked the &quot;''Help''&quot;.

Step 4-   Wait for few seconds Spyder view will appear.

Step 5 -  Make sure that ''&quot;Help&quot;'' under view&gt;panes is permanently unchecked. And ''Editor, Ipython console, variable explorer'' are checked.


[[#Top]]</text>
      <sha1>ewehwkv6mz9gbujvikzttmm1324y32d</sha1>
    </revision>
    <revision>
      <id>3536</id>
      <parentid>3535</parentid>
      <timestamp>2018-09-28T02:07:12Z</timestamp>
      <contributor>
        <username>Sachinkr</username>
        <id>1743</id>
      </contributor>
      <comment>/* How to print a variable? */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="11455">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_2 Contributors of this page]
==Introduction to Python==
Python is a widely used programming language which allows programmers to write the program in fewer lines of code. It was designed by Guido van Rossum in 1991. Python uses an interpreter instead of compiler.Basically, the main difference between compiler and interpreter is that the compiler takes the code as 'whole' and compiles it..for example in C language and on the other side in interpreter..example: languages like Python...it interprets the written code 'line by line', and if somewhere error is found...it stops interpreting the code from there itself. Here, in our course we will be using Spyder IDE. Spyder is an integrated development environment with editing options to assist the programmers in writing programs. Spyder IDE is divided into two panes, one is console and other one is where program is written.




Python works on different platforms (Windows, Mac, Linux, Raspberry Pi, etc).
Python has a simple syntax similar to the English language.
Python has syntax that allows developers to write programs with fewer lines than some other programming languages.
Python runs on an interpreter system, meaning that code can be executed as soon as it is written. This means that prototyping can be very quick.
Python can be treated in a procedural way, an object-orientated way or a functional way.

==Installing Anaconda==
[[#Top]]
This article is all about installing and troubleshooting Anaconda and Spyder on different platforms.

===Windows===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#windows Download Link]. Make sure that you download the version compatible to your operating system architecture. If you have a 64 bit OS then you can download either 64 bit of 32 bit, but if you have 32 bit OS then you should download the 32 bit version only.

Step 2 -&gt; Double click on the .exe file that you downloaded just now and follow the instructions. If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open cmd (go to Start -&gt; then type cmd in the search bar and hit enter). There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

===Mac===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#macos Download Link].

Step 2 -&gt; Double click on the .pkg file that you just downloaded. If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

===Linux===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#linux Download Link].

Step 2 -&gt; Go to the folder where you downloaded the .sh file and type following command 

  '''bash Anaconda-latest-Linux-x86_64.sh'''

If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

==Troubleshooting Spyder==

[[#Top]]

In most of the cases, it happens that Spyder is already running and you have initiated one more instance of it. Please make sure that spyder is not running already.
If you are on Linux OS, please launch spyder through terminal. Just open the terminal and type '''spyder''' and it will launch. When Spyder opens, make sure you see Anaconda with the version written on the Ipython console. If not, try changing the path of your anaconda. Follow these steps according to your OS version.

====Windows====
[https://stackoverflow.com/questions/44597662/conda-command-is-not-recognized-on-windows-10 Click Here]

====Linux====
[https://stackoverflow.com/questions/18675907/how-to-run-conda Click Here]

====Mac====
[https://stackoverflow.com/questions/35246386/conda-command-not-found Click Here]

In most of the cases relaunching Spyder works.
A more general Troubleshoot is present [https://github.com/spyder-ide/spyder/wiki/Troubleshooting-Guide-and-FAQ Here]

==How to run a program in Spyder IDE?==
Go to Run on the menu bar. Click Run-&gt;Run.

[[#TOP]]
==Print statements==
Print statements help to display output on console. 
{{#ev:youtube|https://youtu.be/gECkqaOwyt0|250|right}}

===Syntax===
print()

===How to print a message?===
In order to print a message in Python, write print(&quot;message&quot;).
Single, double, triple quote can be used print()

'''Example:'''

'''Single Quote'''
print('Hello')  
Output: Hello

'''Double Quote'''
print(&quot;Hello&quot;)  
Output: Hello

'''Quote within quote'''
print('Is &quot;Ram&quot; a good boy?')  
Output: Is &quot;Ram&quot; a good boy?

[[#TOP]]
==Escape sequences with strings==

We can use escape sequence within strings to make output more presentable.

'''\n'''  : It will move to next line.

'''\t'''  : It will add tab space(5space)

'''\a'''  : It will play system sound once.

'''Example:'''

Print(&quot;Hi, \n How are you?&quot;)

Output: 

Hi,

How are you?

Print(&quot;Hi, \t How are you?&quot;)

Output: 

Hi, &lt;5 spaces&gt; How are you?

[[File:Escape_Sequence.jpg]]

==Variables==
[[#Top]]
&lt;pre&gt;
Variables are used to store some values. Values can be strings, integers or decimal values.  

Variable Name Rules:
1. Variable name should start with letter or underscore. Variable name cant start with number.
Example:
Valid: JOC, WIKI, JOC_WIKI, _JOC
Invalid: 1JOC, 123WIKI, 0_WIKI

2. Remaining letter other then first one can contain number, underscore.
Example:
JOC1234, WIKI012_1332

3. Variable names are case sensitivities.
Example:
JOC, jOC, joC all are different varibles. 

&lt;/pre&gt;
{{#ev:youtube|https://youtu.be/60iAXH1sm-Y|250|right}}
===How to print a variable?===
In order to print the value of a variable in python, first initialize the variable and then call it where ever you wanna use it. 
&lt;pre&gt;print(variable_name)&lt;/pre&gt;

&lt;pre&gt;For example :
x=2                # x is viable here
print(x)           # calling variable x with print function

a = &quot;JOC&quot;          # a is variable here
b = &quot;_WIKI&quot;        # b is variable here
c = a + b          # c is variable here
&lt;/pre&gt;

===Some facts about Variables===
* If you want to print variable name with a message, you can use , operator. For example : I want to print Hello Simran and Simran has been stored in a variable called ''name''.
  name=&quot;Simran&quot;
  print(&quot;Hello&quot;,name)
* If you change the value of a variable, it will store the latest value. For example :
  name=&quot;Simran&quot;
  name=&quot;Amit&quot;
  If you will execute the command ''print(name)'', Amit will be displayed.
* You can perform operations like addition, subtraction etc only on integral variables.

==How to execute couple of instructions on console?==
You can execute couple of instructions on console using ;. Write Statement 1;Statement 2;......and then press ''Enter''.
{{#ev:youtube|https://youtu.be/CYQCYvLE22Y|250|right}}









==How to take input from the user?==
We can take input from the user using ''input'' function. For Example : You want the user to input variable ''x'', then write x=input(&quot;Enter the value of x&quot;) and execute. Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNkVLCxZw_jcgyS-bmrIVSP

And when the input you need is of data type other than string. You can do both the input function and data conversion in a single line.
For example:
Consider the program for letting in the patients
'''c=input(&quot;Enter (1/0)&quot;);d=int(c)'''

Instead of using it in two separate lines, combine it into a single line
'''c=int(input(&quot;Enter (1/0)&quot;))'''.

To get two inputs in same line with a space between them split() is used.

a,b=input(&quot;enter a&quot;).split(&quot;enter b&quot;)
----
[[#Top]]

==If statement==
If statement is used to execute set of two contrary statements based on a condition. 

===Syntax===
If (Condition):
    Statement 1
else:
    Statement 2

If 'Condition' is true then 'Statement 1' will be executed otherwise 'Statement 2' will be executed.

Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNhHmg3SkK1uiutigcAbH9K

==Loops==
[[#Top]]&lt;br&gt;
Loops in a programming languages are used to execute set of repetitive statements. For loop and while loop are used extensively to execute a set of looping instructions.

=== For loop Syntax ===
&lt;pre&gt;
for i in range(10): 
    Statement
&lt;/pre&gt;
range(10) indicate that values 0 to 9 will be assigned to the variable i and for each value of i the Statement will be executed, e.g.
&lt;pre&gt;
for i in range(10): 
    print(i)
&lt;/pre&gt;
Output will be
&lt;pre&gt;
0
1
2
3
4
5
6
7
8
9
&lt;/pre&gt;

[[#Top]]

=== While loop Syntax ===
&lt;pre&gt;
intialisation

while(condition):
   Statement
   increment/decrement
&lt;/pre&gt;
e.g.
&lt;pre&gt;
#initialization
i=0
while(i&lt;10): 
    print(i)
    i=i+1
&lt;/pre&gt;
Output will be:
&lt;pre&gt;
0
1
2
3
4
5
6
7
8
9
&lt;/pre&gt;
Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNbl5jkVrrw1E5XSvm3GiCI

[[#TOP]]
==Importance of Indentation in Python==
Indentation is used to indicate to what block of statements belong. Indentation of blocks convey program structure in Python. Indentation in Python is used to refer a group/block of code/statements. In C++ we use { and } (curly brackets) to group a set of statements. But in Python, there are no such brackets used. Instead of such brackets used in other programming languages, we use indentation in Python.
Use tabs,instead of spaces for ease of writing code.

Wrong indentation can lead to syntax error, or makes your output wrong for your logic e.g.
&lt;pre&gt;
#IndentationError: expected an indented block
i=-1
if i&lt;0:
print(&quot;Test successful&quot;)#Wrong indentation 
else:    
    print(&quot;Test failed&quot;)
#Output: IndentationError: expected an indented block
&lt;/pre&gt;
---
&lt;pre&gt;
#Properly Indented code:
i=-1
if i&lt;0:
    print(&quot;Test successful&quot;)#Wrong indentation
else:    
    print(&quot;Test failed&quot;)
#Output:Test successful
&lt;/pre&gt;
---
Logic changed, so output changed, with improper indentation, e.g.
---
&lt;h3&gt;Code : 1&lt;/h3&gt;
&lt;pre&gt;
sum=0
for i in range(5):
    for j in range(5):
        sum+=i
print(sum, end=&quot; &quot;)
#Output: 50
&lt;/pre&gt;
        
&lt;h3&gt;Code : 2&lt;/h3&gt;
&lt;pre&gt;
for i in range(5):
    for j in range(5):
        print(end=&quot; &quot;)
    sum+=i
print(sum, end=&quot; &quot;)
#Output:                          10
&lt;/pre&gt;
{{#ev:youtube|https://youtu.be/pmavoW419Yc|250|right}}&lt;br&gt;

[[#Top]]

==Spyder IDE Black Screen Solution==

----

 This issue is because of ''Help'' screen which is by default open. 
 We need to close it. So here's how you do it-


===Method 1:===

Step 1-    Try by closing current pane for that,  &quot;''press ctrl+shift+F4''&quot;  wait for few seconds things will appear on screen.

Step 2-    If it so than on menu bar go to ''view &gt; panes &gt; help'' unchecked &quot;''Help''&quot; option.

Step 3-    Make sure that &quot;''Help''&quot; under ''view &gt; panes'' is permanently unchecked. And ''Editor, Ipython console, Variable explorer''  are checked. 


===Method 2:===

Step 1-    Open spyder.

Step 2-   On that black screen randomly ''Left click'' on spyder &quot;''Menu bar''&quot; area you will get menu drop downs, You have to find Drop down with &quot;''Panes''&quot; option.

Step 3-   On &quot;''Panes''&quot; drop down unchecked the &quot;''Help''&quot;.

Step 4-   Wait for few seconds Spyder view will appear.

Step 5 -  Make sure that ''&quot;Help&quot;'' under view&gt;panes is permanently unchecked. And ''Editor, Ipython console, variable explorer'' are checked.


[[#Top]]</text>
      <sha1>cq4dxm14hfl35rrwpq9p6a07qvu8ftb</sha1>
    </revision>
    <revision>
      <id>3537</id>
      <parentid>3536</parentid>
      <timestamp>2018-09-28T02:11:43Z</timestamp>
      <contributor>
        <username>Sachinkr</username>
        <id>1743</id>
      </contributor>
      <comment>/* How to print a variable? */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="11503">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_2 Contributors of this page]
==Introduction to Python==
Python is a widely used programming language which allows programmers to write the program in fewer lines of code. It was designed by Guido van Rossum in 1991. Python uses an interpreter instead of compiler.Basically, the main difference between compiler and interpreter is that the compiler takes the code as 'whole' and compiles it..for example in C language and on the other side in interpreter..example: languages like Python...it interprets the written code 'line by line', and if somewhere error is found...it stops interpreting the code from there itself. Here, in our course we will be using Spyder IDE. Spyder is an integrated development environment with editing options to assist the programmers in writing programs. Spyder IDE is divided into two panes, one is console and other one is where program is written.




Python works on different platforms (Windows, Mac, Linux, Raspberry Pi, etc).
Python has a simple syntax similar to the English language.
Python has syntax that allows developers to write programs with fewer lines than some other programming languages.
Python runs on an interpreter system, meaning that code can be executed as soon as it is written. This means that prototyping can be very quick.
Python can be treated in a procedural way, an object-orientated way or a functional way.

==Installing Anaconda==
[[#Top]]
This article is all about installing and troubleshooting Anaconda and Spyder on different platforms.

===Windows===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#windows Download Link]. Make sure that you download the version compatible to your operating system architecture. If you have a 64 bit OS then you can download either 64 bit of 32 bit, but if you have 32 bit OS then you should download the 32 bit version only.

Step 2 -&gt; Double click on the .exe file that you downloaded just now and follow the instructions. If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open cmd (go to Start -&gt; then type cmd in the search bar and hit enter). There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

===Mac===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#macos Download Link].

Step 2 -&gt; Double click on the .pkg file that you just downloaded. If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

===Linux===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#linux Download Link].

Step 2 -&gt; Go to the folder where you downloaded the .sh file and type following command 

  '''bash Anaconda-latest-Linux-x86_64.sh'''

If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

==Troubleshooting Spyder==

[[#Top]]

In most of the cases, it happens that Spyder is already running and you have initiated one more instance of it. Please make sure that spyder is not running already.
If you are on Linux OS, please launch spyder through terminal. Just open the terminal and type '''spyder''' and it will launch. When Spyder opens, make sure you see Anaconda with the version written on the Ipython console. If not, try changing the path of your anaconda. Follow these steps according to your OS version.

====Windows====
[https://stackoverflow.com/questions/44597662/conda-command-is-not-recognized-on-windows-10 Click Here]

====Linux====
[https://stackoverflow.com/questions/18675907/how-to-run-conda Click Here]

====Mac====
[https://stackoverflow.com/questions/35246386/conda-command-not-found Click Here]

In most of the cases relaunching Spyder works.
A more general Troubleshoot is present [https://github.com/spyder-ide/spyder/wiki/Troubleshooting-Guide-and-FAQ Here]

==How to run a program in Spyder IDE?==
Go to Run on the menu bar. Click Run-&gt;Run.

[[#TOP]]
==Print statements==
Print statements help to display output on console. 
{{#ev:youtube|https://youtu.be/gECkqaOwyt0|250|right}}

===Syntax===
print()

===How to print a message?===
In order to print a message in Python, write print(&quot;message&quot;).
Single, double, triple quote can be used print()

'''Example:'''

'''Single Quote'''
print('Hello')  
Output: Hello

'''Double Quote'''
print(&quot;Hello&quot;)  
Output: Hello

'''Quote within quote'''
print('Is &quot;Ram&quot; a good boy?')  
Output: Is &quot;Ram&quot; a good boy?

[[#TOP]]
==Escape sequences with strings==

We can use escape sequence within strings to make output more presentable.

'''\n'''  : It will move to next line.

'''\t'''  : It will add tab space(5space)

'''\a'''  : It will play system sound once.

'''Example:'''

Print(&quot;Hi, \n How are you?&quot;)

Output: 

Hi,

How are you?

Print(&quot;Hi, \t How are you?&quot;)

Output: 

Hi, &lt;5 spaces&gt; How are you?

[[File:Escape_Sequence.jpg]]

==Variables==
[[#Top]]
&lt;pre&gt;
Variables are used to store some values. Values can be strings, integers or decimal values.  

Variable Name Rules:
1. Variable name should start with letter or underscore. Variable name cant start with number.
Example:
Valid: JOC, WIKI, JOC_WIKI, _JOC
Invalid: 1JOC, 123WIKI, 0_WIKI

2. Remaining letter other then first one can contain number, underscore.
Example:
JOC1234, WIKI012_1332

3. Variable names are case sensitivities.
Example:
JOC, jOC, joC all are different varibles. 

&lt;/pre&gt;
{{#ev:youtube|https://youtu.be/60iAXH1sm-Y|250|right}}
===How to print a variable?===
In order to print the value of a variable in python, first initialize the variable and then call it where ever you wanna use it. 
&lt;pre&gt;print(variable_name)&lt;/pre&gt;

&lt;pre&gt;For example :
x=2                # x is viable here
print(x)           # calling variable x with print function

a = &quot;JOC&quot;          # a is variable here
b = &quot;_WIKI&quot;        # b is variable here
c = a + b          # c is variable here which will provide addition of variable a and b
&lt;/pre&gt;

===Some facts about Variables===
* If you want to print variable name with a message, you can use , operator. For example : I want to print Hello Simran and Simran has been stored in a variable called ''name''.
  name=&quot;Simran&quot;
  print(&quot;Hello&quot;,name)
* If you change the value of a variable, it will store the latest value. For example :
  name=&quot;Simran&quot;
  name=&quot;Amit&quot;
  If you will execute the command ''print(name)'', Amit will be displayed.
* You can perform operations like addition, subtraction etc only on integral variables.

==How to execute couple of instructions on console?==
You can execute couple of instructions on console using ;. Write Statement 1;Statement 2;......and then press ''Enter''.
{{#ev:youtube|https://youtu.be/CYQCYvLE22Y|250|right}}









==How to take input from the user?==
We can take input from the user using ''input'' function. For Example : You want the user to input variable ''x'', then write x=input(&quot;Enter the value of x&quot;) and execute. Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNkVLCxZw_jcgyS-bmrIVSP

And when the input you need is of data type other than string. You can do both the input function and data conversion in a single line.
For example:
Consider the program for letting in the patients
'''c=input(&quot;Enter (1/0)&quot;);d=int(c)'''

Instead of using it in two separate lines, combine it into a single line
'''c=int(input(&quot;Enter (1/0)&quot;))'''.

To get two inputs in same line with a space between them split() is used.

a,b=input(&quot;enter a&quot;).split(&quot;enter b&quot;)
----
[[#Top]]

==If statement==
If statement is used to execute set of two contrary statements based on a condition. 

===Syntax===
If (Condition):
    Statement 1
else:
    Statement 2

If 'Condition' is true then 'Statement 1' will be executed otherwise 'Statement 2' will be executed.

Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNhHmg3SkK1uiutigcAbH9K

==Loops==
[[#Top]]&lt;br&gt;
Loops in a programming languages are used to execute set of repetitive statements. For loop and while loop are used extensively to execute a set of looping instructions.

=== For loop Syntax ===
&lt;pre&gt;
for i in range(10): 
    Statement
&lt;/pre&gt;
range(10) indicate that values 0 to 9 will be assigned to the variable i and for each value of i the Statement will be executed, e.g.
&lt;pre&gt;
for i in range(10): 
    print(i)
&lt;/pre&gt;
Output will be
&lt;pre&gt;
0
1
2
3
4
5
6
7
8
9
&lt;/pre&gt;

[[#Top]]

=== While loop Syntax ===
&lt;pre&gt;
intialisation

while(condition):
   Statement
   increment/decrement
&lt;/pre&gt;
e.g.
&lt;pre&gt;
#initialization
i=0
while(i&lt;10): 
    print(i)
    i=i+1
&lt;/pre&gt;
Output will be:
&lt;pre&gt;
0
1
2
3
4
5
6
7
8
9
&lt;/pre&gt;
Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNbl5jkVrrw1E5XSvm3GiCI

[[#TOP]]
==Importance of Indentation in Python==
Indentation is used to indicate to what block of statements belong. Indentation of blocks convey program structure in Python. Indentation in Python is used to refer a group/block of code/statements. In C++ we use { and } (curly brackets) to group a set of statements. But in Python, there are no such brackets used. Instead of such brackets used in other programming languages, we use indentation in Python.
Use tabs,instead of spaces for ease of writing code.

Wrong indentation can lead to syntax error, or makes your output wrong for your logic e.g.
&lt;pre&gt;
#IndentationError: expected an indented block
i=-1
if i&lt;0:
print(&quot;Test successful&quot;)#Wrong indentation 
else:    
    print(&quot;Test failed&quot;)
#Output: IndentationError: expected an indented block
&lt;/pre&gt;
---
&lt;pre&gt;
#Properly Indented code:
i=-1
if i&lt;0:
    print(&quot;Test successful&quot;)#Wrong indentation
else:    
    print(&quot;Test failed&quot;)
#Output:Test successful
&lt;/pre&gt;
---
Logic changed, so output changed, with improper indentation, e.g.
---
&lt;h3&gt;Code : 1&lt;/h3&gt;
&lt;pre&gt;
sum=0
for i in range(5):
    for j in range(5):
        sum+=i
print(sum, end=&quot; &quot;)
#Output: 50
&lt;/pre&gt;
        
&lt;h3&gt;Code : 2&lt;/h3&gt;
&lt;pre&gt;
for i in range(5):
    for j in range(5):
        print(end=&quot; &quot;)
    sum+=i
print(sum, end=&quot; &quot;)
#Output:                          10
&lt;/pre&gt;
{{#ev:youtube|https://youtu.be/pmavoW419Yc|250|right}}&lt;br&gt;

[[#Top]]

==Spyder IDE Black Screen Solution==

----

 This issue is because of ''Help'' screen which is by default open. 
 We need to close it. So here's how you do it-


===Method 1:===

Step 1-    Try by closing current pane for that,  &quot;''press ctrl+shift+F4''&quot;  wait for few seconds things will appear on screen.

Step 2-    If it so than on menu bar go to ''view &gt; panes &gt; help'' unchecked &quot;''Help''&quot; option.

Step 3-    Make sure that &quot;''Help''&quot; under ''view &gt; panes'' is permanently unchecked. And ''Editor, Ipython console, Variable explorer''  are checked. 


===Method 2:===

Step 1-    Open spyder.

Step 2-   On that black screen randomly ''Left click'' on spyder &quot;''Menu bar''&quot; area you will get menu drop downs, You have to find Drop down with &quot;''Panes''&quot; option.

Step 3-   On &quot;''Panes''&quot; drop down unchecked the &quot;''Help''&quot;.

Step 4-   Wait for few seconds Spyder view will appear.

Step 5 -  Make sure that ''&quot;Help&quot;'' under view&gt;panes is permanently unchecked. And ''Editor, Ipython console, variable explorer'' are checked.


[[#Top]]</text>
      <sha1>4z5oq5c3qsjo38do5osril73dpaskg6</sha1>
    </revision>
    <revision>
      <id>3538</id>
      <parentid>3537</parentid>
      <timestamp>2018-09-28T02:13:37Z</timestamp>
      <contributor>
        <username>Sachinkr</username>
        <id>1743</id>
      </contributor>
      <comment>/* Variables */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="11583">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_2 Contributors of this page]
==Introduction to Python==
Python is a widely used programming language which allows programmers to write the program in fewer lines of code. It was designed by Guido van Rossum in 1991. Python uses an interpreter instead of compiler.Basically, the main difference between compiler and interpreter is that the compiler takes the code as 'whole' and compiles it..for example in C language and on the other side in interpreter..example: languages like Python...it interprets the written code 'line by line', and if somewhere error is found...it stops interpreting the code from there itself. Here, in our course we will be using Spyder IDE. Spyder is an integrated development environment with editing options to assist the programmers in writing programs. Spyder IDE is divided into two panes, one is console and other one is where program is written.




Python works on different platforms (Windows, Mac, Linux, Raspberry Pi, etc).
Python has a simple syntax similar to the English language.
Python has syntax that allows developers to write programs with fewer lines than some other programming languages.
Python runs on an interpreter system, meaning that code can be executed as soon as it is written. This means that prototyping can be very quick.
Python can be treated in a procedural way, an object-orientated way or a functional way.

==Installing Anaconda==
[[#Top]]
This article is all about installing and troubleshooting Anaconda and Spyder on different platforms.

===Windows===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#windows Download Link]. Make sure that you download the version compatible to your operating system architecture. If you have a 64 bit OS then you can download either 64 bit of 32 bit, but if you have 32 bit OS then you should download the 32 bit version only.

Step 2 -&gt; Double click on the .exe file that you downloaded just now and follow the instructions. If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open cmd (go to Start -&gt; then type cmd in the search bar and hit enter). There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

===Mac===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#macos Download Link].

Step 2 -&gt; Double click on the .pkg file that you just downloaded. If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

===Linux===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#linux Download Link].

Step 2 -&gt; Go to the folder where you downloaded the .sh file and type following command 

  '''bash Anaconda-latest-Linux-x86_64.sh'''

If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

==Troubleshooting Spyder==

[[#Top]]

In most of the cases, it happens that Spyder is already running and you have initiated one more instance of it. Please make sure that spyder is not running already.
If you are on Linux OS, please launch spyder through terminal. Just open the terminal and type '''spyder''' and it will launch. When Spyder opens, make sure you see Anaconda with the version written on the Ipython console. If not, try changing the path of your anaconda. Follow these steps according to your OS version.

====Windows====
[https://stackoverflow.com/questions/44597662/conda-command-is-not-recognized-on-windows-10 Click Here]

====Linux====
[https://stackoverflow.com/questions/18675907/how-to-run-conda Click Here]

====Mac====
[https://stackoverflow.com/questions/35246386/conda-command-not-found Click Here]

In most of the cases relaunching Spyder works.
A more general Troubleshoot is present [https://github.com/spyder-ide/spyder/wiki/Troubleshooting-Guide-and-FAQ Here]

==How to run a program in Spyder IDE?==
Go to Run on the menu bar. Click Run-&gt;Run.

[[#TOP]]
==Print statements==
Print statements help to display output on console. 
{{#ev:youtube|https://youtu.be/gECkqaOwyt0|250|right}}

===Syntax===
print()

===How to print a message?===
In order to print a message in Python, write print(&quot;message&quot;).
Single, double, triple quote can be used print()

'''Example:'''

'''Single Quote'''
print('Hello')  
Output: Hello

'''Double Quote'''
print(&quot;Hello&quot;)  
Output: Hello

'''Quote within quote'''
print('Is &quot;Ram&quot; a good boy?')  
Output: Is &quot;Ram&quot; a good boy?

[[#TOP]]
==Escape sequences with strings==

We can use escape sequence within strings to make output more presentable.

'''\n'''  : It will move to next line.

'''\t'''  : It will add tab space(5space)

'''\a'''  : It will play system sound once.

'''Example:'''

Print(&quot;Hi, \n How are you?&quot;)

Output: 

Hi,

How are you?

Print(&quot;Hi, \t How are you?&quot;)

Output: 

Hi, &lt;5 spaces&gt; How are you?

[[File:Escape_Sequence.jpg]]

==Variables==
[[#Top]]
&lt;pre&gt;
Variables are used to store some values. Values can be strings, integers or decimal values.  

Variable Name Rules:
1. Variable name should start with letter or underscore. Variable name cant start with number.
Example:
Valid: JOC, WIKI, JOC_WIKI, _JOC
Invalid: 1JOC, 123WIKI, 0_WIKI

2. Remaining letter other then first one can contain number, underscore.
Example:
JOC1234, WIKI012_1332

3. Variable names are case sensitivities.
Example:
JOC, jOC, joC all are different varibles. 

&lt;/pre&gt;
{{#ev:youtube|https://youtu.be/60iAXH1sm-Y|250|right}}
===How to print a variable?===
In order to print the value of a variable in python, first initialize the variable and then call it where ever you wanna use it. 
&lt;pre&gt;print(variable_name)&lt;/pre&gt;

&lt;pre&gt;For example :
x=2                # x is viable here
print(x)           # calling variable x with print function

a = &quot;JOC&quot;          # a is variable here
b = &quot;_WIKI&quot;        # b is variable here
c = a + b          # c is variable here which will provide addition of variable a and b
&lt;/pre&gt;

===Some facts about Variables===
* If you want to print variable name with a message, you can use , operator. For example : I want to print Hello Simran and Simran has been stored in a variable called ''name''.
  name=&quot;Simran&quot;
  print(&quot;Hello&quot;,name)
* If you change the value of a variable, it will store the latest value. For example :
  name=&quot;Simran&quot;
  name=&quot;Amit&quot;
  If you will execute the command ''print(name)'', Amit will be displayed.
* You can perform operations like addition, subtraction etc only on integral variables.

===Variables Types and Conversion===
Variable can be decimal, integer or flot.

==How to execute couple of instructions on console?==
You can execute couple of instructions on console using ;. Write Statement 1;Statement 2;......and then press ''Enter''.
{{#ev:youtube|https://youtu.be/CYQCYvLE22Y|250|right}}









==How to take input from the user?==
We can take input from the user using ''input'' function. For Example : You want the user to input variable ''x'', then write x=input(&quot;Enter the value of x&quot;) and execute. Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNkVLCxZw_jcgyS-bmrIVSP

And when the input you need is of data type other than string. You can do both the input function and data conversion in a single line.
For example:
Consider the program for letting in the patients
'''c=input(&quot;Enter (1/0)&quot;);d=int(c)'''

Instead of using it in two separate lines, combine it into a single line
'''c=int(input(&quot;Enter (1/0)&quot;))'''.

To get two inputs in same line with a space between them split() is used.

a,b=input(&quot;enter a&quot;).split(&quot;enter b&quot;)
----
[[#Top]]

==If statement==
If statement is used to execute set of two contrary statements based on a condition. 

===Syntax===
If (Condition):
    Statement 1
else:
    Statement 2

If 'Condition' is true then 'Statement 1' will be executed otherwise 'Statement 2' will be executed.

Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNhHmg3SkK1uiutigcAbH9K

==Loops==
[[#Top]]&lt;br&gt;
Loops in a programming languages are used to execute set of repetitive statements. For loop and while loop are used extensively to execute a set of looping instructions.

=== For loop Syntax ===
&lt;pre&gt;
for i in range(10): 
    Statement
&lt;/pre&gt;
range(10) indicate that values 0 to 9 will be assigned to the variable i and for each value of i the Statement will be executed, e.g.
&lt;pre&gt;
for i in range(10): 
    print(i)
&lt;/pre&gt;
Output will be
&lt;pre&gt;
0
1
2
3
4
5
6
7
8
9
&lt;/pre&gt;

[[#Top]]

=== While loop Syntax ===
&lt;pre&gt;
intialisation

while(condition):
   Statement
   increment/decrement
&lt;/pre&gt;
e.g.
&lt;pre&gt;
#initialization
i=0
while(i&lt;10): 
    print(i)
    i=i+1
&lt;/pre&gt;
Output will be:
&lt;pre&gt;
0
1
2
3
4
5
6
7
8
9
&lt;/pre&gt;
Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNbl5jkVrrw1E5XSvm3GiCI

[[#TOP]]
==Importance of Indentation in Python==
Indentation is used to indicate to what block of statements belong. Indentation of blocks convey program structure in Python. Indentation in Python is used to refer a group/block of code/statements. In C++ we use { and } (curly brackets) to group a set of statements. But in Python, there are no such brackets used. Instead of such brackets used in other programming languages, we use indentation in Python.
Use tabs,instead of spaces for ease of writing code.

Wrong indentation can lead to syntax error, or makes your output wrong for your logic e.g.
&lt;pre&gt;
#IndentationError: expected an indented block
i=-1
if i&lt;0:
print(&quot;Test successful&quot;)#Wrong indentation 
else:    
    print(&quot;Test failed&quot;)
#Output: IndentationError: expected an indented block
&lt;/pre&gt;
---
&lt;pre&gt;
#Properly Indented code:
i=-1
if i&lt;0:
    print(&quot;Test successful&quot;)#Wrong indentation
else:    
    print(&quot;Test failed&quot;)
#Output:Test successful
&lt;/pre&gt;
---
Logic changed, so output changed, with improper indentation, e.g.
---
&lt;h3&gt;Code : 1&lt;/h3&gt;
&lt;pre&gt;
sum=0
for i in range(5):
    for j in range(5):
        sum+=i
print(sum, end=&quot; &quot;)
#Output: 50
&lt;/pre&gt;
        
&lt;h3&gt;Code : 2&lt;/h3&gt;
&lt;pre&gt;
for i in range(5):
    for j in range(5):
        print(end=&quot; &quot;)
    sum+=i
print(sum, end=&quot; &quot;)
#Output:                          10
&lt;/pre&gt;
{{#ev:youtube|https://youtu.be/pmavoW419Yc|250|right}}&lt;br&gt;

[[#Top]]

==Spyder IDE Black Screen Solution==

----

 This issue is because of ''Help'' screen which is by default open. 
 We need to close it. So here's how you do it-


===Method 1:===

Step 1-    Try by closing current pane for that,  &quot;''press ctrl+shift+F4''&quot;  wait for few seconds things will appear on screen.

Step 2-    If it so than on menu bar go to ''view &gt; panes &gt; help'' unchecked &quot;''Help''&quot; option.

Step 3-    Make sure that &quot;''Help''&quot; under ''view &gt; panes'' is permanently unchecked. And ''Editor, Ipython console, Variable explorer''  are checked. 


===Method 2:===

Step 1-    Open spyder.

Step 2-   On that black screen randomly ''Left click'' on spyder &quot;''Menu bar''&quot; area you will get menu drop downs, You have to find Drop down with &quot;''Panes''&quot; option.

Step 3-   On &quot;''Panes''&quot; drop down unchecked the &quot;''Help''&quot;.

Step 4-   Wait for few seconds Spyder view will appear.

Step 5 -  Make sure that ''&quot;Help&quot;'' under view&gt;panes is permanently unchecked. And ''Editor, Ipython console, variable explorer'' are checked.


[[#Top]]</text>
      <sha1>lip564yf93l6nzac3ehaufvt9liav1e</sha1>
    </revision>
    <revision>
      <id>3539</id>
      <parentid>3538</parentid>
      <timestamp>2018-09-28T02:15:13Z</timestamp>
      <contributor>
        <username>Sachinkr</username>
        <id>1743</id>
      </contributor>
      <comment>/* Variables Types and Conversion */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="11666">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_2 Contributors of this page]
==Introduction to Python==
Python is a widely used programming language which allows programmers to write the program in fewer lines of code. It was designed by Guido van Rossum in 1991. Python uses an interpreter instead of compiler.Basically, the main difference between compiler and interpreter is that the compiler takes the code as 'whole' and compiles it..for example in C language and on the other side in interpreter..example: languages like Python...it interprets the written code 'line by line', and if somewhere error is found...it stops interpreting the code from there itself. Here, in our course we will be using Spyder IDE. Spyder is an integrated development environment with editing options to assist the programmers in writing programs. Spyder IDE is divided into two panes, one is console and other one is where program is written.




Python works on different platforms (Windows, Mac, Linux, Raspberry Pi, etc).
Python has a simple syntax similar to the English language.
Python has syntax that allows developers to write programs with fewer lines than some other programming languages.
Python runs on an interpreter system, meaning that code can be executed as soon as it is written. This means that prototyping can be very quick.
Python can be treated in a procedural way, an object-orientated way or a functional way.

==Installing Anaconda==
[[#Top]]
This article is all about installing and troubleshooting Anaconda and Spyder on different platforms.

===Windows===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#windows Download Link]. Make sure that you download the version compatible to your operating system architecture. If you have a 64 bit OS then you can download either 64 bit of 32 bit, but if you have 32 bit OS then you should download the 32 bit version only.

Step 2 -&gt; Double click on the .exe file that you downloaded just now and follow the instructions. If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open cmd (go to Start -&gt; then type cmd in the search bar and hit enter). There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

===Mac===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#macos Download Link].

Step 2 -&gt; Double click on the .pkg file that you just downloaded. If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

===Linux===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#linux Download Link].

Step 2 -&gt; Go to the folder where you downloaded the .sh file and type following command 

  '''bash Anaconda-latest-Linux-x86_64.sh'''

If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

==Troubleshooting Spyder==

[[#Top]]

In most of the cases, it happens that Spyder is already running and you have initiated one more instance of it. Please make sure that spyder is not running already.
If you are on Linux OS, please launch spyder through terminal. Just open the terminal and type '''spyder''' and it will launch. When Spyder opens, make sure you see Anaconda with the version written on the Ipython console. If not, try changing the path of your anaconda. Follow these steps according to your OS version.

====Windows====
[https://stackoverflow.com/questions/44597662/conda-command-is-not-recognized-on-windows-10 Click Here]

====Linux====
[https://stackoverflow.com/questions/18675907/how-to-run-conda Click Here]

====Mac====
[https://stackoverflow.com/questions/35246386/conda-command-not-found Click Here]

In most of the cases relaunching Spyder works.
A more general Troubleshoot is present [https://github.com/spyder-ide/spyder/wiki/Troubleshooting-Guide-and-FAQ Here]

==How to run a program in Spyder IDE?==
Go to Run on the menu bar. Click Run-&gt;Run.

[[#TOP]]
==Print statements==
Print statements help to display output on console. 
{{#ev:youtube|https://youtu.be/gECkqaOwyt0|250|right}}

===Syntax===
print()

===How to print a message?===
In order to print a message in Python, write print(&quot;message&quot;).
Single, double, triple quote can be used print()

'''Example:'''

'''Single Quote'''
print('Hello')  
Output: Hello

'''Double Quote'''
print(&quot;Hello&quot;)  
Output: Hello

'''Quote within quote'''
print('Is &quot;Ram&quot; a good boy?')  
Output: Is &quot;Ram&quot; a good boy?

[[#TOP]]
==Escape sequences with strings==

We can use escape sequence within strings to make output more presentable.

'''\n'''  : It will move to next line.

'''\t'''  : It will add tab space(5space)

'''\a'''  : It will play system sound once.

'''Example:'''

Print(&quot;Hi, \n How are you?&quot;)

Output: 

Hi,

How are you?

Print(&quot;Hi, \t How are you?&quot;)

Output: 

Hi, &lt;5 spaces&gt; How are you?

[[File:Escape_Sequence.jpg]]

==Variables==
[[#Top]]
&lt;pre&gt;
Variables are used to store some values. Values can be strings, integers or decimal values.  

Variable Name Rules:
1. Variable name should start with letter or underscore. Variable name cant start with number.
Example:
Valid: JOC, WIKI, JOC_WIKI, _JOC
Invalid: 1JOC, 123WIKI, 0_WIKI

2. Remaining letter other then first one can contain number, underscore.
Example:
JOC1234, WIKI012_1332

3. Variable names are case sensitivities.
Example:
JOC, jOC, joC all are different varibles. 

&lt;/pre&gt;
{{#ev:youtube|https://youtu.be/60iAXH1sm-Y|250|right}}
===How to print a variable?===
In order to print the value of a variable in python, first initialize the variable and then call it where ever you wanna use it. 
&lt;pre&gt;print(variable_name)&lt;/pre&gt;

&lt;pre&gt;For example :
x=2                # x is viable here
print(x)           # calling variable x with print function

a = &quot;JOC&quot;          # a is variable here
b = &quot;_WIKI&quot;        # b is variable here
c = a + b          # c is variable here which will provide addition of variable a and b
&lt;/pre&gt;

===Some facts about Variables===
* If you want to print variable name with a message, you can use , operator. For example : I want to print Hello Simran and Simran has been stored in a variable called ''name''.
  name=&quot;Simran&quot;
  print(&quot;Hello&quot;,name)
* If you change the value of a variable, it will store the latest value. For example :
  name=&quot;Simran&quot;
  name=&quot;Amit&quot;
  If you will execute the command ''print(name)'', Amit will be displayed.
* You can perform operations like addition, subtraction etc only on integral variables.

===Variables Types and Conversion===
Variable can be decimal, integer and decimal. And they can be inter covered with the help of conversion functions.

Example:

==How to execute couple of instructions on console?==
You can execute couple of instructions on console using ;. Write Statement 1;Statement 2;......and then press ''Enter''.
{{#ev:youtube|https://youtu.be/CYQCYvLE22Y|250|right}}









==How to take input from the user?==
We can take input from the user using ''input'' function. For Example : You want the user to input variable ''x'', then write x=input(&quot;Enter the value of x&quot;) and execute. Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNkVLCxZw_jcgyS-bmrIVSP

And when the input you need is of data type other than string. You can do both the input function and data conversion in a single line.
For example:
Consider the program for letting in the patients
'''c=input(&quot;Enter (1/0)&quot;);d=int(c)'''

Instead of using it in two separate lines, combine it into a single line
'''c=int(input(&quot;Enter (1/0)&quot;))'''.

To get two inputs in same line with a space between them split() is used.

a,b=input(&quot;enter a&quot;).split(&quot;enter b&quot;)
----
[[#Top]]

==If statement==
If statement is used to execute set of two contrary statements based on a condition. 

===Syntax===
If (Condition):
    Statement 1
else:
    Statement 2

If 'Condition' is true then 'Statement 1' will be executed otherwise 'Statement 2' will be executed.

Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNhHmg3SkK1uiutigcAbH9K

==Loops==
[[#Top]]&lt;br&gt;
Loops in a programming languages are used to execute set of repetitive statements. For loop and while loop are used extensively to execute a set of looping instructions.

=== For loop Syntax ===
&lt;pre&gt;
for i in range(10): 
    Statement
&lt;/pre&gt;
range(10) indicate that values 0 to 9 will be assigned to the variable i and for each value of i the Statement will be executed, e.g.
&lt;pre&gt;
for i in range(10): 
    print(i)
&lt;/pre&gt;
Output will be
&lt;pre&gt;
0
1
2
3
4
5
6
7
8
9
&lt;/pre&gt;

[[#Top]]

=== While loop Syntax ===
&lt;pre&gt;
intialisation

while(condition):
   Statement
   increment/decrement
&lt;/pre&gt;
e.g.
&lt;pre&gt;
#initialization
i=0
while(i&lt;10): 
    print(i)
    i=i+1
&lt;/pre&gt;
Output will be:
&lt;pre&gt;
0
1
2
3
4
5
6
7
8
9
&lt;/pre&gt;
Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNbl5jkVrrw1E5XSvm3GiCI

[[#TOP]]
==Importance of Indentation in Python==
Indentation is used to indicate to what block of statements belong. Indentation of blocks convey program structure in Python. Indentation in Python is used to refer a group/block of code/statements. In C++ we use { and } (curly brackets) to group a set of statements. But in Python, there are no such brackets used. Instead of such brackets used in other programming languages, we use indentation in Python.
Use tabs,instead of spaces for ease of writing code.

Wrong indentation can lead to syntax error, or makes your output wrong for your logic e.g.
&lt;pre&gt;
#IndentationError: expected an indented block
i=-1
if i&lt;0:
print(&quot;Test successful&quot;)#Wrong indentation 
else:    
    print(&quot;Test failed&quot;)
#Output: IndentationError: expected an indented block
&lt;/pre&gt;
---
&lt;pre&gt;
#Properly Indented code:
i=-1
if i&lt;0:
    print(&quot;Test successful&quot;)#Wrong indentation
else:    
    print(&quot;Test failed&quot;)
#Output:Test successful
&lt;/pre&gt;
---
Logic changed, so output changed, with improper indentation, e.g.
---
&lt;h3&gt;Code : 1&lt;/h3&gt;
&lt;pre&gt;
sum=0
for i in range(5):
    for j in range(5):
        sum+=i
print(sum, end=&quot; &quot;)
#Output: 50
&lt;/pre&gt;
        
&lt;h3&gt;Code : 2&lt;/h3&gt;
&lt;pre&gt;
for i in range(5):
    for j in range(5):
        print(end=&quot; &quot;)
    sum+=i
print(sum, end=&quot; &quot;)
#Output:                          10
&lt;/pre&gt;
{{#ev:youtube|https://youtu.be/pmavoW419Yc|250|right}}&lt;br&gt;

[[#Top]]

==Spyder IDE Black Screen Solution==

----

 This issue is because of ''Help'' screen which is by default open. 
 We need to close it. So here's how you do it-


===Method 1:===

Step 1-    Try by closing current pane for that,  &quot;''press ctrl+shift+F4''&quot;  wait for few seconds things will appear on screen.

Step 2-    If it so than on menu bar go to ''view &gt; panes &gt; help'' unchecked &quot;''Help''&quot; option.

Step 3-    Make sure that &quot;''Help''&quot; under ''view &gt; panes'' is permanently unchecked. And ''Editor, Ipython console, Variable explorer''  are checked. 


===Method 2:===

Step 1-    Open spyder.

Step 2-   On that black screen randomly ''Left click'' on spyder &quot;''Menu bar''&quot; area you will get menu drop downs, You have to find Drop down with &quot;''Panes''&quot; option.

Step 3-   On &quot;''Panes''&quot; drop down unchecked the &quot;''Help''&quot;.

Step 4-   Wait for few seconds Spyder view will appear.

Step 5 -  Make sure that ''&quot;Help&quot;'' under view&gt;panes is permanently unchecked. And ''Editor, Ipython console, variable explorer'' are checked.


[[#Top]]</text>
      <sha1>mptlanyw1jy6wstugvn8adwyi0shovg</sha1>
    </revision>
    <revision>
      <id>3540</id>
      <parentid>3539</parentid>
      <timestamp>2018-09-28T02:16:43Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* Introduction to Python */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="11663">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_2 Contributors of this page]
==Introduction to Python==
Python is a widely used programming language which allows programmers to write the program in fewer lines of code. It was designed by Guido van Rossum in 1991. Python uses an interpreter instead of compiler.Basically, the main difference between compiler and interpreter is that the compiler takes the code as 'whole' and compiles it..for example in C language and on the other side in interpreter..example: languages like Python...it interprets the written code 'line by line', and if somewhere error is found...it stops interpreting the code from there itself. Here, in our course we will be using Spyder IDE. Spyder is an integrated development environment with editing options to assist the programmers in writing programs. Spyder IDE is divided into two panes, one is console and other one is where program is written.

Python works on different platforms (Windows, Mac, Linux, Raspberry Pi, etc).
Python has a simple syntax similar to the English language.
Python has syntax that allows developers to write programs with fewer lines than some other programming languages.
Python runs on an interpreter system, meaning that code can be executed as soon as it is written. This means that prototyping can be very quick.
Python can be treated in a procedural way, an object-orientated way or a functional way.

==Installing Anaconda==
[[#Top]]
This article is all about installing and troubleshooting Anaconda and Spyder on different platforms.

===Windows===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#windows Download Link]. Make sure that you download the version compatible to your operating system architecture. If you have a 64 bit OS then you can download either 64 bit of 32 bit, but if you have 32 bit OS then you should download the 32 bit version only.

Step 2 -&gt; Double click on the .exe file that you downloaded just now and follow the instructions. If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open cmd (go to Start -&gt; then type cmd in the search bar and hit enter). There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

===Mac===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#macos Download Link].

Step 2 -&gt; Double click on the .pkg file that you just downloaded. If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

===Linux===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#linux Download Link].

Step 2 -&gt; Go to the folder where you downloaded the .sh file and type following command 

  '''bash Anaconda-latest-Linux-x86_64.sh'''

If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

==Troubleshooting Spyder==

[[#Top]]

In most of the cases, it happens that Spyder is already running and you have initiated one more instance of it. Please make sure that spyder is not running already.
If you are on Linux OS, please launch spyder through terminal. Just open the terminal and type '''spyder''' and it will launch. When Spyder opens, make sure you see Anaconda with the version written on the Ipython console. If not, try changing the path of your anaconda. Follow these steps according to your OS version.

====Windows====
[https://stackoverflow.com/questions/44597662/conda-command-is-not-recognized-on-windows-10 Click Here]

====Linux====
[https://stackoverflow.com/questions/18675907/how-to-run-conda Click Here]

====Mac====
[https://stackoverflow.com/questions/35246386/conda-command-not-found Click Here]

In most of the cases relaunching Spyder works.
A more general Troubleshoot is present [https://github.com/spyder-ide/spyder/wiki/Troubleshooting-Guide-and-FAQ Here]

==How to run a program in Spyder IDE?==
Go to Run on the menu bar. Click Run-&gt;Run.

[[#TOP]]
==Print statements==
Print statements help to display output on console. 
{{#ev:youtube|https://youtu.be/gECkqaOwyt0|250|right}}

===Syntax===
print()

===How to print a message?===
In order to print a message in Python, write print(&quot;message&quot;).
Single, double, triple quote can be used print()

'''Example:'''

'''Single Quote'''
print('Hello')  
Output: Hello

'''Double Quote'''
print(&quot;Hello&quot;)  
Output: Hello

'''Quote within quote'''
print('Is &quot;Ram&quot; a good boy?')  
Output: Is &quot;Ram&quot; a good boy?

[[#TOP]]
==Escape sequences with strings==

We can use escape sequence within strings to make output more presentable.

'''\n'''  : It will move to next line.

'''\t'''  : It will add tab space(5space)

'''\a'''  : It will play system sound once.

'''Example:'''

Print(&quot;Hi, \n How are you?&quot;)

Output: 

Hi,

How are you?

Print(&quot;Hi, \t How are you?&quot;)

Output: 

Hi, &lt;5 spaces&gt; How are you?

[[File:Escape_Sequence.jpg]]

==Variables==
[[#Top]]
&lt;pre&gt;
Variables are used to store some values. Values can be strings, integers or decimal values.  

Variable Name Rules:
1. Variable name should start with letter or underscore. Variable name cant start with number.
Example:
Valid: JOC, WIKI, JOC_WIKI, _JOC
Invalid: 1JOC, 123WIKI, 0_WIKI

2. Remaining letter other then first one can contain number, underscore.
Example:
JOC1234, WIKI012_1332

3. Variable names are case sensitivities.
Example:
JOC, jOC, joC all are different varibles. 

&lt;/pre&gt;
{{#ev:youtube|https://youtu.be/60iAXH1sm-Y|250|right}}
===How to print a variable?===
In order to print the value of a variable in python, first initialize the variable and then call it where ever you wanna use it. 
&lt;pre&gt;print(variable_name)&lt;/pre&gt;

&lt;pre&gt;For example :
x=2                # x is viable here
print(x)           # calling variable x with print function

a = &quot;JOC&quot;          # a is variable here
b = &quot;_WIKI&quot;        # b is variable here
c = a + b          # c is variable here which will provide addition of variable a and b
&lt;/pre&gt;

===Some facts about Variables===
* If you want to print variable name with a message, you can use , operator. For example : I want to print Hello Simran and Simran has been stored in a variable called ''name''.
  name=&quot;Simran&quot;
  print(&quot;Hello&quot;,name)
* If you change the value of a variable, it will store the latest value. For example :
  name=&quot;Simran&quot;
  name=&quot;Amit&quot;
  If you will execute the command ''print(name)'', Amit will be displayed.
* You can perform operations like addition, subtraction etc only on integral variables.

===Variables Types and Conversion===
Variable can be decimal, integer and decimal. And they can be inter covered with the help of conversion functions.

Example:

==How to execute couple of instructions on console?==
You can execute couple of instructions on console using ;. Write Statement 1;Statement 2;......and then press ''Enter''.
{{#ev:youtube|https://youtu.be/CYQCYvLE22Y|250|right}}









==How to take input from the user?==
We can take input from the user using ''input'' function. For Example : You want the user to input variable ''x'', then write x=input(&quot;Enter the value of x&quot;) and execute. Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNkVLCxZw_jcgyS-bmrIVSP

And when the input you need is of data type other than string. You can do both the input function and data conversion in a single line.
For example:
Consider the program for letting in the patients
'''c=input(&quot;Enter (1/0)&quot;);d=int(c)'''

Instead of using it in two separate lines, combine it into a single line
'''c=int(input(&quot;Enter (1/0)&quot;))'''.

To get two inputs in same line with a space between them split() is used.

a,b=input(&quot;enter a&quot;).split(&quot;enter b&quot;)
----
[[#Top]]

==If statement==
If statement is used to execute set of two contrary statements based on a condition. 

===Syntax===
If (Condition):
    Statement 1
else:
    Statement 2

If 'Condition' is true then 'Statement 1' will be executed otherwise 'Statement 2' will be executed.

Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNhHmg3SkK1uiutigcAbH9K

==Loops==
[[#Top]]&lt;br&gt;
Loops in a programming languages are used to execute set of repetitive statements. For loop and while loop are used extensively to execute a set of looping instructions.

=== For loop Syntax ===
&lt;pre&gt;
for i in range(10): 
    Statement
&lt;/pre&gt;
range(10) indicate that values 0 to 9 will be assigned to the variable i and for each value of i the Statement will be executed, e.g.
&lt;pre&gt;
for i in range(10): 
    print(i)
&lt;/pre&gt;
Output will be
&lt;pre&gt;
0
1
2
3
4
5
6
7
8
9
&lt;/pre&gt;

[[#Top]]

=== While loop Syntax ===
&lt;pre&gt;
intialisation

while(condition):
   Statement
   increment/decrement
&lt;/pre&gt;
e.g.
&lt;pre&gt;
#initialization
i=0
while(i&lt;10): 
    print(i)
    i=i+1
&lt;/pre&gt;
Output will be:
&lt;pre&gt;
0
1
2
3
4
5
6
7
8
9
&lt;/pre&gt;
Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNbl5jkVrrw1E5XSvm3GiCI

[[#TOP]]
==Importance of Indentation in Python==
Indentation is used to indicate to what block of statements belong. Indentation of blocks convey program structure in Python. Indentation in Python is used to refer a group/block of code/statements. In C++ we use { and } (curly brackets) to group a set of statements. But in Python, there are no such brackets used. Instead of such brackets used in other programming languages, we use indentation in Python.
Use tabs,instead of spaces for ease of writing code.

Wrong indentation can lead to syntax error, or makes your output wrong for your logic e.g.
&lt;pre&gt;
#IndentationError: expected an indented block
i=-1
if i&lt;0:
print(&quot;Test successful&quot;)#Wrong indentation 
else:    
    print(&quot;Test failed&quot;)
#Output: IndentationError: expected an indented block
&lt;/pre&gt;
---
&lt;pre&gt;
#Properly Indented code:
i=-1
if i&lt;0:
    print(&quot;Test successful&quot;)#Wrong indentation
else:    
    print(&quot;Test failed&quot;)
#Output:Test successful
&lt;/pre&gt;
---
Logic changed, so output changed, with improper indentation, e.g.
---
&lt;h3&gt;Code : 1&lt;/h3&gt;
&lt;pre&gt;
sum=0
for i in range(5):
    for j in range(5):
        sum+=i
print(sum, end=&quot; &quot;)
#Output: 50
&lt;/pre&gt;
        
&lt;h3&gt;Code : 2&lt;/h3&gt;
&lt;pre&gt;
for i in range(5):
    for j in range(5):
        print(end=&quot; &quot;)
    sum+=i
print(sum, end=&quot; &quot;)
#Output:                          10
&lt;/pre&gt;
{{#ev:youtube|https://youtu.be/pmavoW419Yc|250|right}}&lt;br&gt;

[[#Top]]

==Spyder IDE Black Screen Solution==

----

 This issue is because of ''Help'' screen which is by default open. 
 We need to close it. So here's how you do it-


===Method 1:===

Step 1-    Try by closing current pane for that,  &quot;''press ctrl+shift+F4''&quot;  wait for few seconds things will appear on screen.

Step 2-    If it so than on menu bar go to ''view &gt; panes &gt; help'' unchecked &quot;''Help''&quot; option.

Step 3-    Make sure that &quot;''Help''&quot; under ''view &gt; panes'' is permanently unchecked. And ''Editor, Ipython console, Variable explorer''  are checked. 


===Method 2:===

Step 1-    Open spyder.

Step 2-   On that black screen randomly ''Left click'' on spyder &quot;''Menu bar''&quot; area you will get menu drop downs, You have to find Drop down with &quot;''Panes''&quot; option.

Step 3-   On &quot;''Panes''&quot; drop down unchecked the &quot;''Help''&quot;.

Step 4-   Wait for few seconds Spyder view will appear.

Step 5 -  Make sure that ''&quot;Help&quot;'' under view&gt;panes is permanently unchecked. And ''Editor, Ipython console, variable explorer'' are checked.


[[#Top]]</text>
      <sha1>3c62faeujv3ji3k1j5grhgbvofz1dqy</sha1>
    </revision>
    <revision>
      <id>3541</id>
      <parentid>3540</parentid>
      <timestamp>2018-09-28T02:18:40Z</timestamp>
      <contributor>
        <username>Sachinkr</username>
        <id>1743</id>
      </contributor>
      <comment>/* Variables Types and Conversion */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="11806">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_2 Contributors of this page]
==Introduction to Python==
Python is a widely used programming language which allows programmers to write the program in fewer lines of code. It was designed by Guido van Rossum in 1991. Python uses an interpreter instead of compiler.Basically, the main difference between compiler and interpreter is that the compiler takes the code as 'whole' and compiles it..for example in C language and on the other side in interpreter..example: languages like Python...it interprets the written code 'line by line', and if somewhere error is found...it stops interpreting the code from there itself. Here, in our course we will be using Spyder IDE. Spyder is an integrated development environment with editing options to assist the programmers in writing programs. Spyder IDE is divided into two panes, one is console and other one is where program is written.

Python works on different platforms (Windows, Mac, Linux, Raspberry Pi, etc).
Python has a simple syntax similar to the English language.
Python has syntax that allows developers to write programs with fewer lines than some other programming languages.
Python runs on an interpreter system, meaning that code can be executed as soon as it is written. This means that prototyping can be very quick.
Python can be treated in a procedural way, an object-orientated way or a functional way.

==Installing Anaconda==
[[#Top]]
This article is all about installing and troubleshooting Anaconda and Spyder on different platforms.

===Windows===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#windows Download Link]. Make sure that you download the version compatible to your operating system architecture. If you have a 64 bit OS then you can download either 64 bit of 32 bit, but if you have 32 bit OS then you should download the 32 bit version only.

Step 2 -&gt; Double click on the .exe file that you downloaded just now and follow the instructions. If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open cmd (go to Start -&gt; then type cmd in the search bar and hit enter). There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

===Mac===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#macos Download Link].

Step 2 -&gt; Double click on the .pkg file that you just downloaded. If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

===Linux===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#linux Download Link].

Step 2 -&gt; Go to the folder where you downloaded the .sh file and type following command 

  '''bash Anaconda-latest-Linux-x86_64.sh'''

If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

==Troubleshooting Spyder==

[[#Top]]

In most of the cases, it happens that Spyder is already running and you have initiated one more instance of it. Please make sure that spyder is not running already.
If you are on Linux OS, please launch spyder through terminal. Just open the terminal and type '''spyder''' and it will launch. When Spyder opens, make sure you see Anaconda with the version written on the Ipython console. If not, try changing the path of your anaconda. Follow these steps according to your OS version.

====Windows====
[https://stackoverflow.com/questions/44597662/conda-command-is-not-recognized-on-windows-10 Click Here]

====Linux====
[https://stackoverflow.com/questions/18675907/how-to-run-conda Click Here]

====Mac====
[https://stackoverflow.com/questions/35246386/conda-command-not-found Click Here]

In most of the cases relaunching Spyder works.
A more general Troubleshoot is present [https://github.com/spyder-ide/spyder/wiki/Troubleshooting-Guide-and-FAQ Here]

==How to run a program in Spyder IDE?==
Go to Run on the menu bar. Click Run-&gt;Run.

[[#TOP]]
==Print statements==
Print statements help to display output on console. 
{{#ev:youtube|https://youtu.be/gECkqaOwyt0|250|right}}

===Syntax===
print()

===How to print a message?===
In order to print a message in Python, write print(&quot;message&quot;).
Single, double, triple quote can be used print()

'''Example:'''

'''Single Quote'''
print('Hello')  
Output: Hello

'''Double Quote'''
print(&quot;Hello&quot;)  
Output: Hello

'''Quote within quote'''
print('Is &quot;Ram&quot; a good boy?')  
Output: Is &quot;Ram&quot; a good boy?

[[#TOP]]
==Escape sequences with strings==

We can use escape sequence within strings to make output more presentable.

'''\n'''  : It will move to next line.

'''\t'''  : It will add tab space(5space)

'''\a'''  : It will play system sound once.

'''Example:'''

Print(&quot;Hi, \n How are you?&quot;)

Output: 

Hi,

How are you?

Print(&quot;Hi, \t How are you?&quot;)

Output: 

Hi, &lt;5 spaces&gt; How are you?

[[File:Escape_Sequence.jpg]]

==Variables==
[[#Top]]
&lt;pre&gt;
Variables are used to store some values. Values can be strings, integers or decimal values.  

Variable Name Rules:
1. Variable name should start with letter or underscore. Variable name cant start with number.
Example:
Valid: JOC, WIKI, JOC_WIKI, _JOC
Invalid: 1JOC, 123WIKI, 0_WIKI

2. Remaining letter other then first one can contain number, underscore.
Example:
JOC1234, WIKI012_1332

3. Variable names are case sensitivities.
Example:
JOC, jOC, joC all are different varibles. 

&lt;/pre&gt;
{{#ev:youtube|https://youtu.be/60iAXH1sm-Y|250|right}}
===How to print a variable?===
In order to print the value of a variable in python, first initialize the variable and then call it where ever you wanna use it. 
&lt;pre&gt;print(variable_name)&lt;/pre&gt;

&lt;pre&gt;For example :
x=2                # x is viable here
print(x)           # calling variable x with print function

a = &quot;JOC&quot;          # a is variable here
b = &quot;_WIKI&quot;        # b is variable here
c = a + b          # c is variable here which will provide addition of variable a and b
&lt;/pre&gt;

===Some facts about Variables===
* If you want to print variable name with a message, you can use , operator. For example : I want to print Hello Simran and Simran has been stored in a variable called ''name''.
  name=&quot;Simran&quot;
  print(&quot;Hello&quot;,name)
* If you change the value of a variable, it will store the latest value. For example :
  name=&quot;Simran&quot;
  name=&quot;Amit&quot;
  If you will execute the command ''print(name)'', Amit will be displayed.
* You can perform operations like addition, subtraction etc only on integral variables.

===Variables Types and Conversion===
Variable can be decimal, integer and decimal. And they can be inter covered with the help of conversion functions.

Example:
JOC = 5              # We have variable with name JOC having value 5 here.
JOC = int(5)         # Here Variable JOC holding integer value of 5

==How to execute couple of instructions on console?==
You can execute couple of instructions on console using ;. Write Statement 1;Statement 2;......and then press ''Enter''.
{{#ev:youtube|https://youtu.be/CYQCYvLE22Y|250|right}}









==How to take input from the user?==
We can take input from the user using ''input'' function. For Example : You want the user to input variable ''x'', then write x=input(&quot;Enter the value of x&quot;) and execute. Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNkVLCxZw_jcgyS-bmrIVSP

And when the input you need is of data type other than string. You can do both the input function and data conversion in a single line.
For example:
Consider the program for letting in the patients
'''c=input(&quot;Enter (1/0)&quot;);d=int(c)'''

Instead of using it in two separate lines, combine it into a single line
'''c=int(input(&quot;Enter (1/0)&quot;))'''.

To get two inputs in same line with a space between them split() is used.

a,b=input(&quot;enter a&quot;).split(&quot;enter b&quot;)
----
[[#Top]]

==If statement==
If statement is used to execute set of two contrary statements based on a condition. 

===Syntax===
If (Condition):
    Statement 1
else:
    Statement 2

If 'Condition' is true then 'Statement 1' will be executed otherwise 'Statement 2' will be executed.

Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNhHmg3SkK1uiutigcAbH9K

==Loops==
[[#Top]]&lt;br&gt;
Loops in a programming languages are used to execute set of repetitive statements. For loop and while loop are used extensively to execute a set of looping instructions.

=== For loop Syntax ===
&lt;pre&gt;
for i in range(10): 
    Statement
&lt;/pre&gt;
range(10) indicate that values 0 to 9 will be assigned to the variable i and for each value of i the Statement will be executed, e.g.
&lt;pre&gt;
for i in range(10): 
    print(i)
&lt;/pre&gt;
Output will be
&lt;pre&gt;
0
1
2
3
4
5
6
7
8
9
&lt;/pre&gt;

[[#Top]]

=== While loop Syntax ===
&lt;pre&gt;
intialisation

while(condition):
   Statement
   increment/decrement
&lt;/pre&gt;
e.g.
&lt;pre&gt;
#initialization
i=0
while(i&lt;10): 
    print(i)
    i=i+1
&lt;/pre&gt;
Output will be:
&lt;pre&gt;
0
1
2
3
4
5
6
7
8
9
&lt;/pre&gt;
Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNbl5jkVrrw1E5XSvm3GiCI

[[#TOP]]
==Importance of Indentation in Python==
Indentation is used to indicate to what block of statements belong. Indentation of blocks convey program structure in Python. Indentation in Python is used to refer a group/block of code/statements. In C++ we use { and } (curly brackets) to group a set of statements. But in Python, there are no such brackets used. Instead of such brackets used in other programming languages, we use indentation in Python.
Use tabs,instead of spaces for ease of writing code.

Wrong indentation can lead to syntax error, or makes your output wrong for your logic e.g.
&lt;pre&gt;
#IndentationError: expected an indented block
i=-1
if i&lt;0:
print(&quot;Test successful&quot;)#Wrong indentation 
else:    
    print(&quot;Test failed&quot;)
#Output: IndentationError: expected an indented block
&lt;/pre&gt;
---
&lt;pre&gt;
#Properly Indented code:
i=-1
if i&lt;0:
    print(&quot;Test successful&quot;)#Wrong indentation
else:    
    print(&quot;Test failed&quot;)
#Output:Test successful
&lt;/pre&gt;
---
Logic changed, so output changed, with improper indentation, e.g.
---
&lt;h3&gt;Code : 1&lt;/h3&gt;
&lt;pre&gt;
sum=0
for i in range(5):
    for j in range(5):
        sum+=i
print(sum, end=&quot; &quot;)
#Output: 50
&lt;/pre&gt;
        
&lt;h3&gt;Code : 2&lt;/h3&gt;
&lt;pre&gt;
for i in range(5):
    for j in range(5):
        print(end=&quot; &quot;)
    sum+=i
print(sum, end=&quot; &quot;)
#Output:                          10
&lt;/pre&gt;
{{#ev:youtube|https://youtu.be/pmavoW419Yc|250|right}}&lt;br&gt;

[[#Top]]

==Spyder IDE Black Screen Solution==

----

 This issue is because of ''Help'' screen which is by default open. 
 We need to close it. So here's how you do it-


===Method 1:===

Step 1-    Try by closing current pane for that,  &quot;''press ctrl+shift+F4''&quot;  wait for few seconds things will appear on screen.

Step 2-    If it so than on menu bar go to ''view &gt; panes &gt; help'' unchecked &quot;''Help''&quot; option.

Step 3-    Make sure that &quot;''Help''&quot; under ''view &gt; panes'' is permanently unchecked. And ''Editor, Ipython console, Variable explorer''  are checked. 


===Method 2:===

Step 1-    Open spyder.

Step 2-   On that black screen randomly ''Left click'' on spyder &quot;''Menu bar''&quot; area you will get menu drop downs, You have to find Drop down with &quot;''Panes''&quot; option.

Step 3-   On &quot;''Panes''&quot; drop down unchecked the &quot;''Help''&quot;.

Step 4-   Wait for few seconds Spyder view will appear.

Step 5 -  Make sure that ''&quot;Help&quot;'' under view&gt;panes is permanently unchecked. And ''Editor, Ipython console, variable explorer'' are checked.


[[#Top]]</text>
      <sha1>7po40719mc8e5ugr6qyyuqql0shaotf</sha1>
    </revision>
    <revision>
      <id>3542</id>
      <parentid>3541</parentid>
      <timestamp>2018-09-28T02:19:14Z</timestamp>
      <contributor>
        <username>Sachinkr</username>
        <id>1743</id>
      </contributor>
      <comment>/* Variables Types and Conversion */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="11820">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_2 Contributors of this page]
==Introduction to Python==
Python is a widely used programming language which allows programmers to write the program in fewer lines of code. It was designed by Guido van Rossum in 1991. Python uses an interpreter instead of compiler.Basically, the main difference between compiler and interpreter is that the compiler takes the code as 'whole' and compiles it..for example in C language and on the other side in interpreter..example: languages like Python...it interprets the written code 'line by line', and if somewhere error is found...it stops interpreting the code from there itself. Here, in our course we will be using Spyder IDE. Spyder is an integrated development environment with editing options to assist the programmers in writing programs. Spyder IDE is divided into two panes, one is console and other one is where program is written.

Python works on different platforms (Windows, Mac, Linux, Raspberry Pi, etc).
Python has a simple syntax similar to the English language.
Python has syntax that allows developers to write programs with fewer lines than some other programming languages.
Python runs on an interpreter system, meaning that code can be executed as soon as it is written. This means that prototyping can be very quick.
Python can be treated in a procedural way, an object-orientated way or a functional way.

==Installing Anaconda==
[[#Top]]
This article is all about installing and troubleshooting Anaconda and Spyder on different platforms.

===Windows===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#windows Download Link]. Make sure that you download the version compatible to your operating system architecture. If you have a 64 bit OS then you can download either 64 bit of 32 bit, but if you have 32 bit OS then you should download the 32 bit version only.

Step 2 -&gt; Double click on the .exe file that you downloaded just now and follow the instructions. If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open cmd (go to Start -&gt; then type cmd in the search bar and hit enter). There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

===Mac===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#macos Download Link].

Step 2 -&gt; Double click on the .pkg file that you just downloaded. If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

===Linux===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#linux Download Link].

Step 2 -&gt; Go to the folder where you downloaded the .sh file and type following command 

  '''bash Anaconda-latest-Linux-x86_64.sh'''

If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

==Troubleshooting Spyder==

[[#Top]]

In most of the cases, it happens that Spyder is already running and you have initiated one more instance of it. Please make sure that spyder is not running already.
If you are on Linux OS, please launch spyder through terminal. Just open the terminal and type '''spyder''' and it will launch. When Spyder opens, make sure you see Anaconda with the version written on the Ipython console. If not, try changing the path of your anaconda. Follow these steps according to your OS version.

====Windows====
[https://stackoverflow.com/questions/44597662/conda-command-is-not-recognized-on-windows-10 Click Here]

====Linux====
[https://stackoverflow.com/questions/18675907/how-to-run-conda Click Here]

====Mac====
[https://stackoverflow.com/questions/35246386/conda-command-not-found Click Here]

In most of the cases relaunching Spyder works.
A more general Troubleshoot is present [https://github.com/spyder-ide/spyder/wiki/Troubleshooting-Guide-and-FAQ Here]

==How to run a program in Spyder IDE?==
Go to Run on the menu bar. Click Run-&gt;Run.

[[#TOP]]
==Print statements==
Print statements help to display output on console. 
{{#ev:youtube|https://youtu.be/gECkqaOwyt0|250|right}}

===Syntax===
print()

===How to print a message?===
In order to print a message in Python, write print(&quot;message&quot;).
Single, double, triple quote can be used print()

'''Example:'''

'''Single Quote'''
print('Hello')  
Output: Hello

'''Double Quote'''
print(&quot;Hello&quot;)  
Output: Hello

'''Quote within quote'''
print('Is &quot;Ram&quot; a good boy?')  
Output: Is &quot;Ram&quot; a good boy?

[[#TOP]]
==Escape sequences with strings==

We can use escape sequence within strings to make output more presentable.

'''\n'''  : It will move to next line.

'''\t'''  : It will add tab space(5space)

'''\a'''  : It will play system sound once.

'''Example:'''

Print(&quot;Hi, \n How are you?&quot;)

Output: 

Hi,

How are you?

Print(&quot;Hi, \t How are you?&quot;)

Output: 

Hi, &lt;5 spaces&gt; How are you?

[[File:Escape_Sequence.jpg]]

==Variables==
[[#Top]]
&lt;pre&gt;
Variables are used to store some values. Values can be strings, integers or decimal values.  

Variable Name Rules:
1. Variable name should start with letter or underscore. Variable name cant start with number.
Example:
Valid: JOC, WIKI, JOC_WIKI, _JOC
Invalid: 1JOC, 123WIKI, 0_WIKI

2. Remaining letter other then first one can contain number, underscore.
Example:
JOC1234, WIKI012_1332

3. Variable names are case sensitivities.
Example:
JOC, jOC, joC all are different varibles. 

&lt;/pre&gt;
{{#ev:youtube|https://youtu.be/60iAXH1sm-Y|250|right}}
===How to print a variable?===
In order to print the value of a variable in python, first initialize the variable and then call it where ever you wanna use it. 
&lt;pre&gt;print(variable_name)&lt;/pre&gt;

&lt;pre&gt;For example :
x=2                # x is viable here
print(x)           # calling variable x with print function

a = &quot;JOC&quot;          # a is variable here
b = &quot;_WIKI&quot;        # b is variable here
c = a + b          # c is variable here which will provide addition of variable a and b
&lt;/pre&gt;

===Some facts about Variables===
* If you want to print variable name with a message, you can use , operator. For example : I want to print Hello Simran and Simran has been stored in a variable called ''name''.
  name=&quot;Simran&quot;
  print(&quot;Hello&quot;,name)
* If you change the value of a variable, it will store the latest value. For example :
  name=&quot;Simran&quot;
  name=&quot;Amit&quot;
  If you will execute the command ''print(name)'', Amit will be displayed.
* You can perform operations like addition, subtraction etc only on integral variables.

===Variables Types and Conversion===
&lt;pre&gt;Variable can be decimal, integer and decimal. And they can be inter covered with the help of conversion functions.

Example:
JOC = 5              # We have variable with name JOC having value 5 here.
JOC = int(5)         # Here Variable JOC holding integer value of 5


&lt;/pre&gt;

==How to execute couple of instructions on console?==
You can execute couple of instructions on console using ;. Write Statement 1;Statement 2;......and then press ''Enter''.
{{#ev:youtube|https://youtu.be/CYQCYvLE22Y|250|right}}









==How to take input from the user?==
We can take input from the user using ''input'' function. For Example : You want the user to input variable ''x'', then write x=input(&quot;Enter the value of x&quot;) and execute. Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNkVLCxZw_jcgyS-bmrIVSP

And when the input you need is of data type other than string. You can do both the input function and data conversion in a single line.
For example:
Consider the program for letting in the patients
'''c=input(&quot;Enter (1/0)&quot;);d=int(c)'''

Instead of using it in two separate lines, combine it into a single line
'''c=int(input(&quot;Enter (1/0)&quot;))'''.

To get two inputs in same line with a space between them split() is used.

a,b=input(&quot;enter a&quot;).split(&quot;enter b&quot;)
----
[[#Top]]

==If statement==
If statement is used to execute set of two contrary statements based on a condition. 

===Syntax===
If (Condition):
    Statement 1
else:
    Statement 2

If 'Condition' is true then 'Statement 1' will be executed otherwise 'Statement 2' will be executed.

Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNhHmg3SkK1uiutigcAbH9K

==Loops==
[[#Top]]&lt;br&gt;
Loops in a programming languages are used to execute set of repetitive statements. For loop and while loop are used extensively to execute a set of looping instructions.

=== For loop Syntax ===
&lt;pre&gt;
for i in range(10): 
    Statement
&lt;/pre&gt;
range(10) indicate that values 0 to 9 will be assigned to the variable i and for each value of i the Statement will be executed, e.g.
&lt;pre&gt;
for i in range(10): 
    print(i)
&lt;/pre&gt;
Output will be
&lt;pre&gt;
0
1
2
3
4
5
6
7
8
9
&lt;/pre&gt;

[[#Top]]

=== While loop Syntax ===
&lt;pre&gt;
intialisation

while(condition):
   Statement
   increment/decrement
&lt;/pre&gt;
e.g.
&lt;pre&gt;
#initialization
i=0
while(i&lt;10): 
    print(i)
    i=i+1
&lt;/pre&gt;
Output will be:
&lt;pre&gt;
0
1
2
3
4
5
6
7
8
9
&lt;/pre&gt;
Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNbl5jkVrrw1E5XSvm3GiCI

[[#TOP]]
==Importance of Indentation in Python==
Indentation is used to indicate to what block of statements belong. Indentation of blocks convey program structure in Python. Indentation in Python is used to refer a group/block of code/statements. In C++ we use { and } (curly brackets) to group a set of statements. But in Python, there are no such brackets used. Instead of such brackets used in other programming languages, we use indentation in Python.
Use tabs,instead of spaces for ease of writing code.

Wrong indentation can lead to syntax error, or makes your output wrong for your logic e.g.
&lt;pre&gt;
#IndentationError: expected an indented block
i=-1
if i&lt;0:
print(&quot;Test successful&quot;)#Wrong indentation 
else:    
    print(&quot;Test failed&quot;)
#Output: IndentationError: expected an indented block
&lt;/pre&gt;
---
&lt;pre&gt;
#Properly Indented code:
i=-1
if i&lt;0:
    print(&quot;Test successful&quot;)#Wrong indentation
else:    
    print(&quot;Test failed&quot;)
#Output:Test successful
&lt;/pre&gt;
---
Logic changed, so output changed, with improper indentation, e.g.
---
&lt;h3&gt;Code : 1&lt;/h3&gt;
&lt;pre&gt;
sum=0
for i in range(5):
    for j in range(5):
        sum+=i
print(sum, end=&quot; &quot;)
#Output: 50
&lt;/pre&gt;
        
&lt;h3&gt;Code : 2&lt;/h3&gt;
&lt;pre&gt;
for i in range(5):
    for j in range(5):
        print(end=&quot; &quot;)
    sum+=i
print(sum, end=&quot; &quot;)
#Output:                          10
&lt;/pre&gt;
{{#ev:youtube|https://youtu.be/pmavoW419Yc|250|right}}&lt;br&gt;

[[#Top]]

==Spyder IDE Black Screen Solution==

----

 This issue is because of ''Help'' screen which is by default open. 
 We need to close it. So here's how you do it-


===Method 1:===

Step 1-    Try by closing current pane for that,  &quot;''press ctrl+shift+F4''&quot;  wait for few seconds things will appear on screen.

Step 2-    If it so than on menu bar go to ''view &gt; panes &gt; help'' unchecked &quot;''Help''&quot; option.

Step 3-    Make sure that &quot;''Help''&quot; under ''view &gt; panes'' is permanently unchecked. And ''Editor, Ipython console, Variable explorer''  are checked. 


===Method 2:===

Step 1-    Open spyder.

Step 2-   On that black screen randomly ''Left click'' on spyder &quot;''Menu bar''&quot; area you will get menu drop downs, You have to find Drop down with &quot;''Panes''&quot; option.

Step 3-   On &quot;''Panes''&quot; drop down unchecked the &quot;''Help''&quot;.

Step 4-   Wait for few seconds Spyder view will appear.

Step 5 -  Make sure that ''&quot;Help&quot;'' under view&gt;panes is permanently unchecked. And ''Editor, Ipython console, variable explorer'' are checked.


[[#Top]]</text>
      <sha1>qz2gzool40i2a37hlwlfayyfeb256ri</sha1>
    </revision>
    <revision>
      <id>3543</id>
      <parentid>3542</parentid>
      <timestamp>2018-09-28T02:19:28Z</timestamp>
      <contributor>
        <username>Sachinkr</username>
        <id>1743</id>
      </contributor>
      <comment>/* Variables Types and Conversion */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="11829">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_2 Contributors of this page]
==Introduction to Python==
Python is a widely used programming language which allows programmers to write the program in fewer lines of code. It was designed by Guido van Rossum in 1991. Python uses an interpreter instead of compiler.Basically, the main difference between compiler and interpreter is that the compiler takes the code as 'whole' and compiles it..for example in C language and on the other side in interpreter..example: languages like Python...it interprets the written code 'line by line', and if somewhere error is found...it stops interpreting the code from there itself. Here, in our course we will be using Spyder IDE. Spyder is an integrated development environment with editing options to assist the programmers in writing programs. Spyder IDE is divided into two panes, one is console and other one is where program is written.

Python works on different platforms (Windows, Mac, Linux, Raspberry Pi, etc).
Python has a simple syntax similar to the English language.
Python has syntax that allows developers to write programs with fewer lines than some other programming languages.
Python runs on an interpreter system, meaning that code can be executed as soon as it is written. This means that prototyping can be very quick.
Python can be treated in a procedural way, an object-orientated way or a functional way.

==Installing Anaconda==
[[#Top]]
This article is all about installing and troubleshooting Anaconda and Spyder on different platforms.

===Windows===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#windows Download Link]. Make sure that you download the version compatible to your operating system architecture. If you have a 64 bit OS then you can download either 64 bit of 32 bit, but if you have 32 bit OS then you should download the 32 bit version only.

Step 2 -&gt; Double click on the .exe file that you downloaded just now and follow the instructions. If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open cmd (go to Start -&gt; then type cmd in the search bar and hit enter). There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

===Mac===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#macos Download Link].

Step 2 -&gt; Double click on the .pkg file that you just downloaded. If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

===Linux===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#linux Download Link].

Step 2 -&gt; Go to the folder where you downloaded the .sh file and type following command 

  '''bash Anaconda-latest-Linux-x86_64.sh'''

If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

==Troubleshooting Spyder==

[[#Top]]

In most of the cases, it happens that Spyder is already running and you have initiated one more instance of it. Please make sure that spyder is not running already.
If you are on Linux OS, please launch spyder through terminal. Just open the terminal and type '''spyder''' and it will launch. When Spyder opens, make sure you see Anaconda with the version written on the Ipython console. If not, try changing the path of your anaconda. Follow these steps according to your OS version.

====Windows====
[https://stackoverflow.com/questions/44597662/conda-command-is-not-recognized-on-windows-10 Click Here]

====Linux====
[https://stackoverflow.com/questions/18675907/how-to-run-conda Click Here]

====Mac====
[https://stackoverflow.com/questions/35246386/conda-command-not-found Click Here]

In most of the cases relaunching Spyder works.
A more general Troubleshoot is present [https://github.com/spyder-ide/spyder/wiki/Troubleshooting-Guide-and-FAQ Here]

==How to run a program in Spyder IDE?==
Go to Run on the menu bar. Click Run-&gt;Run.

[[#TOP]]
==Print statements==
Print statements help to display output on console. 
{{#ev:youtube|https://youtu.be/gECkqaOwyt0|250|right}}

===Syntax===
print()

===How to print a message?===
In order to print a message in Python, write print(&quot;message&quot;).
Single, double, triple quote can be used print()

'''Example:'''

'''Single Quote'''
print('Hello')  
Output: Hello

'''Double Quote'''
print(&quot;Hello&quot;)  
Output: Hello

'''Quote within quote'''
print('Is &quot;Ram&quot; a good boy?')  
Output: Is &quot;Ram&quot; a good boy?

[[#TOP]]
==Escape sequences with strings==

We can use escape sequence within strings to make output more presentable.

'''\n'''  : It will move to next line.

'''\t'''  : It will add tab space(5space)

'''\a'''  : It will play system sound once.

'''Example:'''

Print(&quot;Hi, \n How are you?&quot;)

Output: 

Hi,

How are you?

Print(&quot;Hi, \t How are you?&quot;)

Output: 

Hi, &lt;5 spaces&gt; How are you?

[[File:Escape_Sequence.jpg]]

==Variables==
[[#Top]]
&lt;pre&gt;
Variables are used to store some values. Values can be strings, integers or decimal values.  

Variable Name Rules:
1. Variable name should start with letter or underscore. Variable name cant start with number.
Example:
Valid: JOC, WIKI, JOC_WIKI, _JOC
Invalid: 1JOC, 123WIKI, 0_WIKI

2. Remaining letter other then first one can contain number, underscore.
Example:
JOC1234, WIKI012_1332

3. Variable names are case sensitivities.
Example:
JOC, jOC, joC all are different varibles. 

&lt;/pre&gt;
{{#ev:youtube|https://youtu.be/60iAXH1sm-Y|250|right}}
===How to print a variable?===
In order to print the value of a variable in python, first initialize the variable and then call it where ever you wanna use it. 
&lt;pre&gt;print(variable_name)&lt;/pre&gt;

&lt;pre&gt;For example :
x=2                # x is viable here
print(x)           # calling variable x with print function

a = &quot;JOC&quot;          # a is variable here
b = &quot;_WIKI&quot;        # b is variable here
c = a + b          # c is variable here which will provide addition of variable a and b
&lt;/pre&gt;

===Some facts about Variables===
* If you want to print variable name with a message, you can use , operator. For example : I want to print Hello Simran and Simran has been stored in a variable called ''name''.
  name=&quot;Simran&quot;
  print(&quot;Hello&quot;,name)
* If you change the value of a variable, it will store the latest value. For example :
  name=&quot;Simran&quot;
  name=&quot;Amit&quot;
  If you will execute the command ''print(name)'', Amit will be displayed.
* You can perform operations like addition, subtraction etc only on integral variables.

===Variables Types and Conversion===
&lt;pre&gt;Variable can be decimal, integer and decimal. And they can be inter covered with the help of conversion functions.

Example:
JOC = 5              # We have variable with name JOC having value 5 here.
JOC = int(5)         # Here Variable JOC holding integer value of 5


&lt;/pre&gt;
[[#TOP]]

==How to execute couple of instructions on console?==
You can execute couple of instructions on console using ;. Write Statement 1;Statement 2;......and then press ''Enter''.
{{#ev:youtube|https://youtu.be/CYQCYvLE22Y|250|right}}









==How to take input from the user?==
We can take input from the user using ''input'' function. For Example : You want the user to input variable ''x'', then write x=input(&quot;Enter the value of x&quot;) and execute. Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNkVLCxZw_jcgyS-bmrIVSP

And when the input you need is of data type other than string. You can do both the input function and data conversion in a single line.
For example:
Consider the program for letting in the patients
'''c=input(&quot;Enter (1/0)&quot;);d=int(c)'''

Instead of using it in two separate lines, combine it into a single line
'''c=int(input(&quot;Enter (1/0)&quot;))'''.

To get two inputs in same line with a space between them split() is used.

a,b=input(&quot;enter a&quot;).split(&quot;enter b&quot;)
----
[[#Top]]

==If statement==
If statement is used to execute set of two contrary statements based on a condition. 

===Syntax===
If (Condition):
    Statement 1
else:
    Statement 2

If 'Condition' is true then 'Statement 1' will be executed otherwise 'Statement 2' will be executed.

Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNhHmg3SkK1uiutigcAbH9K

==Loops==
[[#Top]]&lt;br&gt;
Loops in a programming languages are used to execute set of repetitive statements. For loop and while loop are used extensively to execute a set of looping instructions.

=== For loop Syntax ===
&lt;pre&gt;
for i in range(10): 
    Statement
&lt;/pre&gt;
range(10) indicate that values 0 to 9 will be assigned to the variable i and for each value of i the Statement will be executed, e.g.
&lt;pre&gt;
for i in range(10): 
    print(i)
&lt;/pre&gt;
Output will be
&lt;pre&gt;
0
1
2
3
4
5
6
7
8
9
&lt;/pre&gt;

[[#Top]]

=== While loop Syntax ===
&lt;pre&gt;
intialisation

while(condition):
   Statement
   increment/decrement
&lt;/pre&gt;
e.g.
&lt;pre&gt;
#initialization
i=0
while(i&lt;10): 
    print(i)
    i=i+1
&lt;/pre&gt;
Output will be:
&lt;pre&gt;
0
1
2
3
4
5
6
7
8
9
&lt;/pre&gt;
Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNbl5jkVrrw1E5XSvm3GiCI

[[#TOP]]
==Importance of Indentation in Python==
Indentation is used to indicate to what block of statements belong. Indentation of blocks convey program structure in Python. Indentation in Python is used to refer a group/block of code/statements. In C++ we use { and } (curly brackets) to group a set of statements. But in Python, there are no such brackets used. Instead of such brackets used in other programming languages, we use indentation in Python.
Use tabs,instead of spaces for ease of writing code.

Wrong indentation can lead to syntax error, or makes your output wrong for your logic e.g.
&lt;pre&gt;
#IndentationError: expected an indented block
i=-1
if i&lt;0:
print(&quot;Test successful&quot;)#Wrong indentation 
else:    
    print(&quot;Test failed&quot;)
#Output: IndentationError: expected an indented block
&lt;/pre&gt;
---
&lt;pre&gt;
#Properly Indented code:
i=-1
if i&lt;0:
    print(&quot;Test successful&quot;)#Wrong indentation
else:    
    print(&quot;Test failed&quot;)
#Output:Test successful
&lt;/pre&gt;
---
Logic changed, so output changed, with improper indentation, e.g.
---
&lt;h3&gt;Code : 1&lt;/h3&gt;
&lt;pre&gt;
sum=0
for i in range(5):
    for j in range(5):
        sum+=i
print(sum, end=&quot; &quot;)
#Output: 50
&lt;/pre&gt;
        
&lt;h3&gt;Code : 2&lt;/h3&gt;
&lt;pre&gt;
for i in range(5):
    for j in range(5):
        print(end=&quot; &quot;)
    sum+=i
print(sum, end=&quot; &quot;)
#Output:                          10
&lt;/pre&gt;
{{#ev:youtube|https://youtu.be/pmavoW419Yc|250|right}}&lt;br&gt;

[[#Top]]

==Spyder IDE Black Screen Solution==

----

 This issue is because of ''Help'' screen which is by default open. 
 We need to close it. So here's how you do it-


===Method 1:===

Step 1-    Try by closing current pane for that,  &quot;''press ctrl+shift+F4''&quot;  wait for few seconds things will appear on screen.

Step 2-    If it so than on menu bar go to ''view &gt; panes &gt; help'' unchecked &quot;''Help''&quot; option.

Step 3-    Make sure that &quot;''Help''&quot; under ''view &gt; panes'' is permanently unchecked. And ''Editor, Ipython console, Variable explorer''  are checked. 


===Method 2:===

Step 1-    Open spyder.

Step 2-   On that black screen randomly ''Left click'' on spyder &quot;''Menu bar''&quot; area you will get menu drop downs, You have to find Drop down with &quot;''Panes''&quot; option.

Step 3-   On &quot;''Panes''&quot; drop down unchecked the &quot;''Help''&quot;.

Step 4-   Wait for few seconds Spyder view will appear.

Step 5 -  Make sure that ''&quot;Help&quot;'' under view&gt;panes is permanently unchecked. And ''Editor, Ipython console, variable explorer'' are checked.


[[#Top]]</text>
      <sha1>9sftazy938ep4vq5yh50r0l2vseijnm</sha1>
    </revision>
    <revision>
      <id>3545</id>
      <parentid>3543</parentid>
      <timestamp>2018-09-28T02:21:01Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* Introduction to Python */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="11833">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_2 Contributors of this page]
==Introduction to Python==
Python is a widely used programming language which allows programmers to write the program in fewer lines of code. It was designed by ''Guido van Rossum'' in 1991. Python uses an interpreter instead of compiler.Basically, the main difference between compiler and interpreter is that the compiler takes the code as 'whole' and compiles it..for example in C language and on the other side in interpreter..example: languages like Python...it interprets the written code 'line by line', and if somewhere error is found...it stops interpreting the code from there itself. Here, in our course we will be using Spyder IDE. Spyder is an integrated development environment with editing options to assist the programmers in writing programs. Spyder IDE is divided into two panes, one is console and other one is where program is written.

Python works on different platforms (Windows, Mac, Linux, Raspberry Pi, etc).
Python has a simple syntax similar to the English language.
Python has syntax that allows developers to write programs with fewer lines than some other programming languages.
Python runs on an interpreter system, meaning that code can be executed as soon as it is written. This means that prototyping can be very quick.
Python can be treated in a procedural way, an object-orientated way or a functional way.

==Installing Anaconda==
[[#Top]]
This article is all about installing and troubleshooting Anaconda and Spyder on different platforms.

===Windows===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#windows Download Link]. Make sure that you download the version compatible to your operating system architecture. If you have a 64 bit OS then you can download either 64 bit of 32 bit, but if you have 32 bit OS then you should download the 32 bit version only.

Step 2 -&gt; Double click on the .exe file that you downloaded just now and follow the instructions. If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open cmd (go to Start -&gt; then type cmd in the search bar and hit enter). There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

===Mac===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#macos Download Link].

Step 2 -&gt; Double click on the .pkg file that you just downloaded. If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

===Linux===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#linux Download Link].

Step 2 -&gt; Go to the folder where you downloaded the .sh file and type following command 

  '''bash Anaconda-latest-Linux-x86_64.sh'''

If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

==Troubleshooting Spyder==

[[#Top]]

In most of the cases, it happens that Spyder is already running and you have initiated one more instance of it. Please make sure that spyder is not running already.
If you are on Linux OS, please launch spyder through terminal. Just open the terminal and type '''spyder''' and it will launch. When Spyder opens, make sure you see Anaconda with the version written on the Ipython console. If not, try changing the path of your anaconda. Follow these steps according to your OS version.

====Windows====
[https://stackoverflow.com/questions/44597662/conda-command-is-not-recognized-on-windows-10 Click Here]

====Linux====
[https://stackoverflow.com/questions/18675907/how-to-run-conda Click Here]

====Mac====
[https://stackoverflow.com/questions/35246386/conda-command-not-found Click Here]

In most of the cases relaunching Spyder works.
A more general Troubleshoot is present [https://github.com/spyder-ide/spyder/wiki/Troubleshooting-Guide-and-FAQ Here]

==How to run a program in Spyder IDE?==
Go to Run on the menu bar. Click Run-&gt;Run.

[[#TOP]]
==Print statements==
Print statements help to display output on console. 
{{#ev:youtube|https://youtu.be/gECkqaOwyt0|250|right}}

===Syntax===
print()

===How to print a message?===
In order to print a message in Python, write print(&quot;message&quot;).
Single, double, triple quote can be used print()

'''Example:'''

'''Single Quote'''
print('Hello')  
Output: Hello

'''Double Quote'''
print(&quot;Hello&quot;)  
Output: Hello

'''Quote within quote'''
print('Is &quot;Ram&quot; a good boy?')  
Output: Is &quot;Ram&quot; a good boy?

[[#TOP]]
==Escape sequences with strings==

We can use escape sequence within strings to make output more presentable.

'''\n'''  : It will move to next line.

'''\t'''  : It will add tab space(5space)

'''\a'''  : It will play system sound once.

'''Example:'''

Print(&quot;Hi, \n How are you?&quot;)

Output: 

Hi,

How are you?

Print(&quot;Hi, \t How are you?&quot;)

Output: 

Hi, &lt;5 spaces&gt; How are you?

[[File:Escape_Sequence.jpg]]

==Variables==
[[#Top]]
&lt;pre&gt;
Variables are used to store some values. Values can be strings, integers or decimal values.  

Variable Name Rules:
1. Variable name should start with letter or underscore. Variable name cant start with number.
Example:
Valid: JOC, WIKI, JOC_WIKI, _JOC
Invalid: 1JOC, 123WIKI, 0_WIKI

2. Remaining letter other then first one can contain number, underscore.
Example:
JOC1234, WIKI012_1332

3. Variable names are case sensitivities.
Example:
JOC, jOC, joC all are different varibles. 

&lt;/pre&gt;
{{#ev:youtube|https://youtu.be/60iAXH1sm-Y|250|right}}
===How to print a variable?===
In order to print the value of a variable in python, first initialize the variable and then call it where ever you wanna use it. 
&lt;pre&gt;print(variable_name)&lt;/pre&gt;

&lt;pre&gt;For example :
x=2                # x is viable here
print(x)           # calling variable x with print function

a = &quot;JOC&quot;          # a is variable here
b = &quot;_WIKI&quot;        # b is variable here
c = a + b          # c is variable here which will provide addition of variable a and b
&lt;/pre&gt;

===Some facts about Variables===
* If you want to print variable name with a message, you can use , operator. For example : I want to print Hello Simran and Simran has been stored in a variable called ''name''.
  name=&quot;Simran&quot;
  print(&quot;Hello&quot;,name)
* If you change the value of a variable, it will store the latest value. For example :
  name=&quot;Simran&quot;
  name=&quot;Amit&quot;
  If you will execute the command ''print(name)'', Amit will be displayed.
* You can perform operations like addition, subtraction etc only on integral variables.

===Variables Types and Conversion===
&lt;pre&gt;Variable can be decimal, integer and decimal. And they can be inter covered with the help of conversion functions.

Example:
JOC = 5              # We have variable with name JOC having value 5 here.
JOC = int(5)         # Here Variable JOC holding integer value of 5


&lt;/pre&gt;
[[#TOP]]

==How to execute couple of instructions on console?==
You can execute couple of instructions on console using ;. Write Statement 1;Statement 2;......and then press ''Enter''.
{{#ev:youtube|https://youtu.be/CYQCYvLE22Y|250|right}}









==How to take input from the user?==
We can take input from the user using ''input'' function. For Example : You want the user to input variable ''x'', then write x=input(&quot;Enter the value of x&quot;) and execute. Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNkVLCxZw_jcgyS-bmrIVSP

And when the input you need is of data type other than string. You can do both the input function and data conversion in a single line.
For example:
Consider the program for letting in the patients
'''c=input(&quot;Enter (1/0)&quot;);d=int(c)'''

Instead of using it in two separate lines, combine it into a single line
'''c=int(input(&quot;Enter (1/0)&quot;))'''.

To get two inputs in same line with a space between them split() is used.

a,b=input(&quot;enter a&quot;).split(&quot;enter b&quot;)
----
[[#Top]]

==If statement==
If statement is used to execute set of two contrary statements based on a condition. 

===Syntax===
If (Condition):
    Statement 1
else:
    Statement 2

If 'Condition' is true then 'Statement 1' will be executed otherwise 'Statement 2' will be executed.

Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNhHmg3SkK1uiutigcAbH9K

==Loops==
[[#Top]]&lt;br&gt;
Loops in a programming languages are used to execute set of repetitive statements. For loop and while loop are used extensively to execute a set of looping instructions.

=== For loop Syntax ===
&lt;pre&gt;
for i in range(10): 
    Statement
&lt;/pre&gt;
range(10) indicate that values 0 to 9 will be assigned to the variable i and for each value of i the Statement will be executed, e.g.
&lt;pre&gt;
for i in range(10): 
    print(i)
&lt;/pre&gt;
Output will be
&lt;pre&gt;
0
1
2
3
4
5
6
7
8
9
&lt;/pre&gt;

[[#Top]]

=== While loop Syntax ===
&lt;pre&gt;
intialisation

while(condition):
   Statement
   increment/decrement
&lt;/pre&gt;
e.g.
&lt;pre&gt;
#initialization
i=0
while(i&lt;10): 
    print(i)
    i=i+1
&lt;/pre&gt;
Output will be:
&lt;pre&gt;
0
1
2
3
4
5
6
7
8
9
&lt;/pre&gt;
Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNbl5jkVrrw1E5XSvm3GiCI

[[#TOP]]
==Importance of Indentation in Python==
Indentation is used to indicate to what block of statements belong. Indentation of blocks convey program structure in Python. Indentation in Python is used to refer a group/block of code/statements. In C++ we use { and } (curly brackets) to group a set of statements. But in Python, there are no such brackets used. Instead of such brackets used in other programming languages, we use indentation in Python.
Use tabs,instead of spaces for ease of writing code.

Wrong indentation can lead to syntax error, or makes your output wrong for your logic e.g.
&lt;pre&gt;
#IndentationError: expected an indented block
i=-1
if i&lt;0:
print(&quot;Test successful&quot;)#Wrong indentation 
else:    
    print(&quot;Test failed&quot;)
#Output: IndentationError: expected an indented block
&lt;/pre&gt;
---
&lt;pre&gt;
#Properly Indented code:
i=-1
if i&lt;0:
    print(&quot;Test successful&quot;)#Wrong indentation
else:    
    print(&quot;Test failed&quot;)
#Output:Test successful
&lt;/pre&gt;
---
Logic changed, so output changed, with improper indentation, e.g.
---
&lt;h3&gt;Code : 1&lt;/h3&gt;
&lt;pre&gt;
sum=0
for i in range(5):
    for j in range(5):
        sum+=i
print(sum, end=&quot; &quot;)
#Output: 50
&lt;/pre&gt;
        
&lt;h3&gt;Code : 2&lt;/h3&gt;
&lt;pre&gt;
for i in range(5):
    for j in range(5):
        print(end=&quot; &quot;)
    sum+=i
print(sum, end=&quot; &quot;)
#Output:                          10
&lt;/pre&gt;
{{#ev:youtube|https://youtu.be/pmavoW419Yc|250|right}}&lt;br&gt;

[[#Top]]

==Spyder IDE Black Screen Solution==

----

 This issue is because of ''Help'' screen which is by default open. 
 We need to close it. So here's how you do it-


===Method 1:===

Step 1-    Try by closing current pane for that,  &quot;''press ctrl+shift+F4''&quot;  wait for few seconds things will appear on screen.

Step 2-    If it so than on menu bar go to ''view &gt; panes &gt; help'' unchecked &quot;''Help''&quot; option.

Step 3-    Make sure that &quot;''Help''&quot; under ''view &gt; panes'' is permanently unchecked. And ''Editor, Ipython console, Variable explorer''  are checked. 


===Method 2:===

Step 1-    Open spyder.

Step 2-   On that black screen randomly ''Left click'' on spyder &quot;''Menu bar''&quot; area you will get menu drop downs, You have to find Drop down with &quot;''Panes''&quot; option.

Step 3-   On &quot;''Panes''&quot; drop down unchecked the &quot;''Help''&quot;.

Step 4-   Wait for few seconds Spyder view will appear.

Step 5 -  Make sure that ''&quot;Help&quot;'' under view&gt;panes is permanently unchecked. And ''Editor, Ipython console, variable explorer'' are checked.


[[#Top]]</text>
      <sha1>f02tj1iklgl151o95dgd863ergpozm6</sha1>
    </revision>
    <revision>
      <id>3546</id>
      <parentid>3545</parentid>
      <timestamp>2018-09-28T02:21:07Z</timestamp>
      <contributor>
        <username>Sachinkr</username>
        <id>1743</id>
      </contributor>
      <comment>/* Variables Types and Conversion */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="12012">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_2 Contributors of this page]
==Introduction to Python==
Python is a widely used programming language which allows programmers to write the program in fewer lines of code. It was designed by ''Guido van Rossum'' in 1991. Python uses an interpreter instead of compiler.Basically, the main difference between compiler and interpreter is that the compiler takes the code as 'whole' and compiles it..for example in C language and on the other side in interpreter..example: languages like Python...it interprets the written code 'line by line', and if somewhere error is found...it stops interpreting the code from there itself. Here, in our course we will be using Spyder IDE. Spyder is an integrated development environment with editing options to assist the programmers in writing programs. Spyder IDE is divided into two panes, one is console and other one is where program is written.

Python works on different platforms (Windows, Mac, Linux, Raspberry Pi, etc).
Python has a simple syntax similar to the English language.
Python has syntax that allows developers to write programs with fewer lines than some other programming languages.
Python runs on an interpreter system, meaning that code can be executed as soon as it is written. This means that prototyping can be very quick.
Python can be treated in a procedural way, an object-orientated way or a functional way.

==Installing Anaconda==
[[#Top]]
This article is all about installing and troubleshooting Anaconda and Spyder on different platforms.

===Windows===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#windows Download Link]. Make sure that you download the version compatible to your operating system architecture. If you have a 64 bit OS then you can download either 64 bit of 32 bit, but if you have 32 bit OS then you should download the 32 bit version only.

Step 2 -&gt; Double click on the .exe file that you downloaded just now and follow the instructions. If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open cmd (go to Start -&gt; then type cmd in the search bar and hit enter). There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

===Mac===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#macos Download Link].

Step 2 -&gt; Double click on the .pkg file that you just downloaded. If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

===Linux===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#linux Download Link].

Step 2 -&gt; Go to the folder where you downloaded the .sh file and type following command 

  '''bash Anaconda-latest-Linux-x86_64.sh'''

If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

==Troubleshooting Spyder==

[[#Top]]

In most of the cases, it happens that Spyder is already running and you have initiated one more instance of it. Please make sure that spyder is not running already.
If you are on Linux OS, please launch spyder through terminal. Just open the terminal and type '''spyder''' and it will launch. When Spyder opens, make sure you see Anaconda with the version written on the Ipython console. If not, try changing the path of your anaconda. Follow these steps according to your OS version.

====Windows====
[https://stackoverflow.com/questions/44597662/conda-command-is-not-recognized-on-windows-10 Click Here]

====Linux====
[https://stackoverflow.com/questions/18675907/how-to-run-conda Click Here]

====Mac====
[https://stackoverflow.com/questions/35246386/conda-command-not-found Click Here]

In most of the cases relaunching Spyder works.
A more general Troubleshoot is present [https://github.com/spyder-ide/spyder/wiki/Troubleshooting-Guide-and-FAQ Here]

==How to run a program in Spyder IDE?==
Go to Run on the menu bar. Click Run-&gt;Run.

[[#TOP]]
==Print statements==
Print statements help to display output on console. 
{{#ev:youtube|https://youtu.be/gECkqaOwyt0|250|right}}

===Syntax===
print()

===How to print a message?===
In order to print a message in Python, write print(&quot;message&quot;).
Single, double, triple quote can be used print()

'''Example:'''

'''Single Quote'''
print('Hello')  
Output: Hello

'''Double Quote'''
print(&quot;Hello&quot;)  
Output: Hello

'''Quote within quote'''
print('Is &quot;Ram&quot; a good boy?')  
Output: Is &quot;Ram&quot; a good boy?

[[#TOP]]
==Escape sequences with strings==

We can use escape sequence within strings to make output more presentable.

'''\n'''  : It will move to next line.

'''\t'''  : It will add tab space(5space)

'''\a'''  : It will play system sound once.

'''Example:'''

Print(&quot;Hi, \n How are you?&quot;)

Output: 

Hi,

How are you?

Print(&quot;Hi, \t How are you?&quot;)

Output: 

Hi, &lt;5 spaces&gt; How are you?

[[File:Escape_Sequence.jpg]]

==Variables==
[[#Top]]
&lt;pre&gt;
Variables are used to store some values. Values can be strings, integers or decimal values.  

Variable Name Rules:
1. Variable name should start with letter or underscore. Variable name cant start with number.
Example:
Valid: JOC, WIKI, JOC_WIKI, _JOC
Invalid: 1JOC, 123WIKI, 0_WIKI

2. Remaining letter other then first one can contain number, underscore.
Example:
JOC1234, WIKI012_1332

3. Variable names are case sensitivities.
Example:
JOC, jOC, joC all are different varibles. 

&lt;/pre&gt;
{{#ev:youtube|https://youtu.be/60iAXH1sm-Y|250|right}}
===How to print a variable?===
In order to print the value of a variable in python, first initialize the variable and then call it where ever you wanna use it. 
&lt;pre&gt;print(variable_name)&lt;/pre&gt;

&lt;pre&gt;For example :
x=2                # x is viable here
print(x)           # calling variable x with print function

a = &quot;JOC&quot;          # a is variable here
b = &quot;_WIKI&quot;        # b is variable here
c = a + b          # c is variable here which will provide addition of variable a and b
&lt;/pre&gt;

===Some facts about Variables===
* If you want to print variable name with a message, you can use , operator. For example : I want to print Hello Simran and Simran has been stored in a variable called ''name''.
  name=&quot;Simran&quot;
  print(&quot;Hello&quot;,name)
* If you change the value of a variable, it will store the latest value. For example :
  name=&quot;Simran&quot;
  name=&quot;Amit&quot;
  If you will execute the command ''print(name)'', Amit will be displayed.
* You can perform operations like addition, subtraction etc only on integral variables.

===Variables Types and Conversion===
&lt;pre&gt;Variable can be decimal, integer and decimal. And they can be inter covered with the help of conversion functions.

Example:
JOC = 5              # We have variable with name JOC having value 5 here.
JOC = int(5)         # Here Variable JOC holding integer value of 5
JOC = flot(5)        # Here variable JOC holding flot value of 5
JOC = str(5)         # Here variable JOC holding string value of 5 or We can say 5 will be treated as string here.

&lt;/pre&gt;
[[#TOP]]

==How to execute couple of instructions on console?==
You can execute couple of instructions on console using ;. Write Statement 1;Statement 2;......and then press ''Enter''.
{{#ev:youtube|https://youtu.be/CYQCYvLE22Y|250|right}}









==How to take input from the user?==
We can take input from the user using ''input'' function. For Example : You want the user to input variable ''x'', then write x=input(&quot;Enter the value of x&quot;) and execute. Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNkVLCxZw_jcgyS-bmrIVSP

And when the input you need is of data type other than string. You can do both the input function and data conversion in a single line.
For example:
Consider the program for letting in the patients
'''c=input(&quot;Enter (1/0)&quot;);d=int(c)'''

Instead of using it in two separate lines, combine it into a single line
'''c=int(input(&quot;Enter (1/0)&quot;))'''.

To get two inputs in same line with a space between them split() is used.

a,b=input(&quot;enter a&quot;).split(&quot;enter b&quot;)
----
[[#Top]]

==If statement==
If statement is used to execute set of two contrary statements based on a condition. 

===Syntax===
If (Condition):
    Statement 1
else:
    Statement 2

If 'Condition' is true then 'Statement 1' will be executed otherwise 'Statement 2' will be executed.

Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNhHmg3SkK1uiutigcAbH9K

==Loops==
[[#Top]]&lt;br&gt;
Loops in a programming languages are used to execute set of repetitive statements. For loop and while loop are used extensively to execute a set of looping instructions.

=== For loop Syntax ===
&lt;pre&gt;
for i in range(10): 
    Statement
&lt;/pre&gt;
range(10) indicate that values 0 to 9 will be assigned to the variable i and for each value of i the Statement will be executed, e.g.
&lt;pre&gt;
for i in range(10): 
    print(i)
&lt;/pre&gt;
Output will be
&lt;pre&gt;
0
1
2
3
4
5
6
7
8
9
&lt;/pre&gt;

[[#Top]]

=== While loop Syntax ===
&lt;pre&gt;
intialisation

while(condition):
   Statement
   increment/decrement
&lt;/pre&gt;
e.g.
&lt;pre&gt;
#initialization
i=0
while(i&lt;10): 
    print(i)
    i=i+1
&lt;/pre&gt;
Output will be:
&lt;pre&gt;
0
1
2
3
4
5
6
7
8
9
&lt;/pre&gt;
Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNbl5jkVrrw1E5XSvm3GiCI

[[#TOP]]
==Importance of Indentation in Python==
Indentation is used to indicate to what block of statements belong. Indentation of blocks convey program structure in Python. Indentation in Python is used to refer a group/block of code/statements. In C++ we use { and } (curly brackets) to group a set of statements. But in Python, there are no such brackets used. Instead of such brackets used in other programming languages, we use indentation in Python.
Use tabs,instead of spaces for ease of writing code.

Wrong indentation can lead to syntax error, or makes your output wrong for your logic e.g.
&lt;pre&gt;
#IndentationError: expected an indented block
i=-1
if i&lt;0:
print(&quot;Test successful&quot;)#Wrong indentation 
else:    
    print(&quot;Test failed&quot;)
#Output: IndentationError: expected an indented block
&lt;/pre&gt;
---
&lt;pre&gt;
#Properly Indented code:
i=-1
if i&lt;0:
    print(&quot;Test successful&quot;)#Wrong indentation
else:    
    print(&quot;Test failed&quot;)
#Output:Test successful
&lt;/pre&gt;
---
Logic changed, so output changed, with improper indentation, e.g.
---
&lt;h3&gt;Code : 1&lt;/h3&gt;
&lt;pre&gt;
sum=0
for i in range(5):
    for j in range(5):
        sum+=i
print(sum, end=&quot; &quot;)
#Output: 50
&lt;/pre&gt;
        
&lt;h3&gt;Code : 2&lt;/h3&gt;
&lt;pre&gt;
for i in range(5):
    for j in range(5):
        print(end=&quot; &quot;)
    sum+=i
print(sum, end=&quot; &quot;)
#Output:                          10
&lt;/pre&gt;
{{#ev:youtube|https://youtu.be/pmavoW419Yc|250|right}}&lt;br&gt;

[[#Top]]

==Spyder IDE Black Screen Solution==

----

 This issue is because of ''Help'' screen which is by default open. 
 We need to close it. So here's how you do it-


===Method 1:===

Step 1-    Try by closing current pane for that,  &quot;''press ctrl+shift+F4''&quot;  wait for few seconds things will appear on screen.

Step 2-    If it so than on menu bar go to ''view &gt; panes &gt; help'' unchecked &quot;''Help''&quot; option.

Step 3-    Make sure that &quot;''Help''&quot; under ''view &gt; panes'' is permanently unchecked. And ''Editor, Ipython console, Variable explorer''  are checked. 


===Method 2:===

Step 1-    Open spyder.

Step 2-   On that black screen randomly ''Left click'' on spyder &quot;''Menu bar''&quot; area you will get menu drop downs, You have to find Drop down with &quot;''Panes''&quot; option.

Step 3-   On &quot;''Panes''&quot; drop down unchecked the &quot;''Help''&quot;.

Step 4-   Wait for few seconds Spyder view will appear.

Step 5 -  Make sure that ''&quot;Help&quot;'' under view&gt;panes is permanently unchecked. And ''Editor, Ipython console, variable explorer'' are checked.


[[#Top]]</text>
      <sha1>nvv0lkfr2xhx7tcy220qi84l1zp1odd</sha1>
    </revision>
    <revision>
      <id>3548</id>
      <parentid>3546</parentid>
      <timestamp>2018-09-28T02:22:30Z</timestamp>
      <contributor>
        <username>Sachinkr</username>
        <id>1743</id>
      </contributor>
      <comment>/* Variables Types and Conversion */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="12080">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_2 Contributors of this page]
==Introduction to Python==
Python is a widely used programming language which allows programmers to write the program in fewer lines of code. It was designed by ''Guido van Rossum'' in 1991. Python uses an interpreter instead of compiler.Basically, the main difference between compiler and interpreter is that the compiler takes the code as 'whole' and compiles it..for example in C language and on the other side in interpreter..example: languages like Python...it interprets the written code 'line by line', and if somewhere error is found...it stops interpreting the code from there itself. Here, in our course we will be using Spyder IDE. Spyder is an integrated development environment with editing options to assist the programmers in writing programs. Spyder IDE is divided into two panes, one is console and other one is where program is written.

Python works on different platforms (Windows, Mac, Linux, Raspberry Pi, etc).
Python has a simple syntax similar to the English language.
Python has syntax that allows developers to write programs with fewer lines than some other programming languages.
Python runs on an interpreter system, meaning that code can be executed as soon as it is written. This means that prototyping can be very quick.
Python can be treated in a procedural way, an object-orientated way or a functional way.

==Installing Anaconda==
[[#Top]]
This article is all about installing and troubleshooting Anaconda and Spyder on different platforms.

===Windows===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#windows Download Link]. Make sure that you download the version compatible to your operating system architecture. If you have a 64 bit OS then you can download either 64 bit of 32 bit, but if you have 32 bit OS then you should download the 32 bit version only.

Step 2 -&gt; Double click on the .exe file that you downloaded just now and follow the instructions. If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open cmd (go to Start -&gt; then type cmd in the search bar and hit enter). There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

===Mac===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#macos Download Link].

Step 2 -&gt; Double click on the .pkg file that you just downloaded. If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

===Linux===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#linux Download Link].

Step 2 -&gt; Go to the folder where you downloaded the .sh file and type following command 

  '''bash Anaconda-latest-Linux-x86_64.sh'''

If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

==Troubleshooting Spyder==

[[#Top]]

In most of the cases, it happens that Spyder is already running and you have initiated one more instance of it. Please make sure that spyder is not running already.
If you are on Linux OS, please launch spyder through terminal. Just open the terminal and type '''spyder''' and it will launch. When Spyder opens, make sure you see Anaconda with the version written on the Ipython console. If not, try changing the path of your anaconda. Follow these steps according to your OS version.

====Windows====
[https://stackoverflow.com/questions/44597662/conda-command-is-not-recognized-on-windows-10 Click Here]

====Linux====
[https://stackoverflow.com/questions/18675907/how-to-run-conda Click Here]

====Mac====
[https://stackoverflow.com/questions/35246386/conda-command-not-found Click Here]

In most of the cases relaunching Spyder works.
A more general Troubleshoot is present [https://github.com/spyder-ide/spyder/wiki/Troubleshooting-Guide-and-FAQ Here]

==How to run a program in Spyder IDE?==
Go to Run on the menu bar. Click Run-&gt;Run.

[[#TOP]]
==Print statements==
Print statements help to display output on console. 
{{#ev:youtube|https://youtu.be/gECkqaOwyt0|250|right}}

===Syntax===
print()

===How to print a message?===
In order to print a message in Python, write print(&quot;message&quot;).
Single, double, triple quote can be used print()

'''Example:'''

'''Single Quote'''
print('Hello')  
Output: Hello

'''Double Quote'''
print(&quot;Hello&quot;)  
Output: Hello

'''Quote within quote'''
print('Is &quot;Ram&quot; a good boy?')  
Output: Is &quot;Ram&quot; a good boy?

[[#TOP]]
==Escape sequences with strings==

We can use escape sequence within strings to make output more presentable.

'''\n'''  : It will move to next line.

'''\t'''  : It will add tab space(5space)

'''\a'''  : It will play system sound once.

'''Example:'''

Print(&quot;Hi, \n How are you?&quot;)

Output: 

Hi,

How are you?

Print(&quot;Hi, \t How are you?&quot;)

Output: 

Hi, &lt;5 spaces&gt; How are you?

[[File:Escape_Sequence.jpg]]

==Variables==
[[#Top]]
&lt;pre&gt;
Variables are used to store some values. Values can be strings, integers or decimal values.  

Variable Name Rules:
1. Variable name should start with letter or underscore. Variable name cant start with number.
Example:
Valid: JOC, WIKI, JOC_WIKI, _JOC
Invalid: 1JOC, 123WIKI, 0_WIKI

2. Remaining letter other then first one can contain number, underscore.
Example:
JOC1234, WIKI012_1332

3. Variable names are case sensitivities.
Example:
JOC, jOC, joC all are different varibles. 

&lt;/pre&gt;
{{#ev:youtube|https://youtu.be/60iAXH1sm-Y|250|right}}
===How to print a variable?===
In order to print the value of a variable in python, first initialize the variable and then call it where ever you wanna use it. 
&lt;pre&gt;print(variable_name)&lt;/pre&gt;

&lt;pre&gt;For example :
x=2                # x is viable here
print(x)           # calling variable x with print function

a = &quot;JOC&quot;          # a is variable here
b = &quot;_WIKI&quot;        # b is variable here
c = a + b          # c is variable here which will provide addition of variable a and b
&lt;/pre&gt;

===Some facts about Variables===
* If you want to print variable name with a message, you can use , operator. For example : I want to print Hello Simran and Simran has been stored in a variable called ''name''.
  name=&quot;Simran&quot;
  print(&quot;Hello&quot;,name)
* If you change the value of a variable, it will store the latest value. For example :
  name=&quot;Simran&quot;
  name=&quot;Amit&quot;
  If you will execute the command ''print(name)'', Amit will be displayed.
* You can perform operations like addition, subtraction etc only on integral variables.

===Variables Types and Conversion===
&lt;pre&gt;Variable can be decimal, integer and decimal. And they can be inter covered with the help of conversion functions.

Example:
JOC = 5              # We have variable with name JOC having value 5 here.
JOC = int(5)         # Here Variable JOC holding integer value of 5
JOC = flot(5)        # Here variable JOC holding flot value of 5
JOC = str(5)         # Here variable JOC holding string value of 5 or We can say 5 will be treated as string here.
JOC = complex(5)     # Here variable JOC holding complex value of 5.
&lt;/pre&gt;
[[#TOP]]

==How to execute couple of instructions on console?==
You can execute couple of instructions on console using ;. Write Statement 1;Statement 2;......and then press ''Enter''.
{{#ev:youtube|https://youtu.be/CYQCYvLE22Y|250|right}}









==How to take input from the user?==
We can take input from the user using ''input'' function. For Example : You want the user to input variable ''x'', then write x=input(&quot;Enter the value of x&quot;) and execute. Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNkVLCxZw_jcgyS-bmrIVSP

And when the input you need is of data type other than string. You can do both the input function and data conversion in a single line.
For example:
Consider the program for letting in the patients
'''c=input(&quot;Enter (1/0)&quot;);d=int(c)'''

Instead of using it in two separate lines, combine it into a single line
'''c=int(input(&quot;Enter (1/0)&quot;))'''.

To get two inputs in same line with a space between them split() is used.

a,b=input(&quot;enter a&quot;).split(&quot;enter b&quot;)
----
[[#Top]]

==If statement==
If statement is used to execute set of two contrary statements based on a condition. 

===Syntax===
If (Condition):
    Statement 1
else:
    Statement 2

If 'Condition' is true then 'Statement 1' will be executed otherwise 'Statement 2' will be executed.

Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNhHmg3SkK1uiutigcAbH9K

==Loops==
[[#Top]]&lt;br&gt;
Loops in a programming languages are used to execute set of repetitive statements. For loop and while loop are used extensively to execute a set of looping instructions.

=== For loop Syntax ===
&lt;pre&gt;
for i in range(10): 
    Statement
&lt;/pre&gt;
range(10) indicate that values 0 to 9 will be assigned to the variable i and for each value of i the Statement will be executed, e.g.
&lt;pre&gt;
for i in range(10): 
    print(i)
&lt;/pre&gt;
Output will be
&lt;pre&gt;
0
1
2
3
4
5
6
7
8
9
&lt;/pre&gt;

[[#Top]]

=== While loop Syntax ===
&lt;pre&gt;
intialisation

while(condition):
   Statement
   increment/decrement
&lt;/pre&gt;
e.g.
&lt;pre&gt;
#initialization
i=0
while(i&lt;10): 
    print(i)
    i=i+1
&lt;/pre&gt;
Output will be:
&lt;pre&gt;
0
1
2
3
4
5
6
7
8
9
&lt;/pre&gt;
Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNbl5jkVrrw1E5XSvm3GiCI

[[#TOP]]
==Importance of Indentation in Python==
Indentation is used to indicate to what block of statements belong. Indentation of blocks convey program structure in Python. Indentation in Python is used to refer a group/block of code/statements. In C++ we use { and } (curly brackets) to group a set of statements. But in Python, there are no such brackets used. Instead of such brackets used in other programming languages, we use indentation in Python.
Use tabs,instead of spaces for ease of writing code.

Wrong indentation can lead to syntax error, or makes your output wrong for your logic e.g.
&lt;pre&gt;
#IndentationError: expected an indented block
i=-1
if i&lt;0:
print(&quot;Test successful&quot;)#Wrong indentation 
else:    
    print(&quot;Test failed&quot;)
#Output: IndentationError: expected an indented block
&lt;/pre&gt;
---
&lt;pre&gt;
#Properly Indented code:
i=-1
if i&lt;0:
    print(&quot;Test successful&quot;)#Wrong indentation
else:    
    print(&quot;Test failed&quot;)
#Output:Test successful
&lt;/pre&gt;
---
Logic changed, so output changed, with improper indentation, e.g.
---
&lt;h3&gt;Code : 1&lt;/h3&gt;
&lt;pre&gt;
sum=0
for i in range(5):
    for j in range(5):
        sum+=i
print(sum, end=&quot; &quot;)
#Output: 50
&lt;/pre&gt;
        
&lt;h3&gt;Code : 2&lt;/h3&gt;
&lt;pre&gt;
for i in range(5):
    for j in range(5):
        print(end=&quot; &quot;)
    sum+=i
print(sum, end=&quot; &quot;)
#Output:                          10
&lt;/pre&gt;
{{#ev:youtube|https://youtu.be/pmavoW419Yc|250|right}}&lt;br&gt;

[[#Top]]

==Spyder IDE Black Screen Solution==

----

 This issue is because of ''Help'' screen which is by default open. 
 We need to close it. So here's how you do it-


===Method 1:===

Step 1-    Try by closing current pane for that,  &quot;''press ctrl+shift+F4''&quot;  wait for few seconds things will appear on screen.

Step 2-    If it so than on menu bar go to ''view &gt; panes &gt; help'' unchecked &quot;''Help''&quot; option.

Step 3-    Make sure that &quot;''Help''&quot; under ''view &gt; panes'' is permanently unchecked. And ''Editor, Ipython console, Variable explorer''  are checked. 


===Method 2:===

Step 1-    Open spyder.

Step 2-   On that black screen randomly ''Left click'' on spyder &quot;''Menu bar''&quot; area you will get menu drop downs, You have to find Drop down with &quot;''Panes''&quot; option.

Step 3-   On &quot;''Panes''&quot; drop down unchecked the &quot;''Help''&quot;.

Step 4-   Wait for few seconds Spyder view will appear.

Step 5 -  Make sure that ''&quot;Help&quot;'' under view&gt;panes is permanently unchecked. And ''Editor, Ipython console, variable explorer'' are checked.


[[#Top]]</text>
      <sha1>2nzszwd8ho3g2gp8ot9m7fvl3laaua1</sha1>
    </revision>
    <revision>
      <id>3551</id>
      <parentid>3548</parentid>
      <timestamp>2018-09-28T02:24:40Z</timestamp>
      <contributor>
        <username>Sachinkr</username>
        <id>1743</id>
      </contributor>
      <comment>/* Variables Types and Conversion */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="12197">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_2 Contributors of this page]
==Introduction to Python==
Python is a widely used programming language which allows programmers to write the program in fewer lines of code. It was designed by ''Guido van Rossum'' in 1991. Python uses an interpreter instead of compiler.Basically, the main difference between compiler and interpreter is that the compiler takes the code as 'whole' and compiles it..for example in C language and on the other side in interpreter..example: languages like Python...it interprets the written code 'line by line', and if somewhere error is found...it stops interpreting the code from there itself. Here, in our course we will be using Spyder IDE. Spyder is an integrated development environment with editing options to assist the programmers in writing programs. Spyder IDE is divided into two panes, one is console and other one is where program is written.

Python works on different platforms (Windows, Mac, Linux, Raspberry Pi, etc).
Python has a simple syntax similar to the English language.
Python has syntax that allows developers to write programs with fewer lines than some other programming languages.
Python runs on an interpreter system, meaning that code can be executed as soon as it is written. This means that prototyping can be very quick.
Python can be treated in a procedural way, an object-orientated way or a functional way.

==Installing Anaconda==
[[#Top]]
This article is all about installing and troubleshooting Anaconda and Spyder on different platforms.

===Windows===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#windows Download Link]. Make sure that you download the version compatible to your operating system architecture. If you have a 64 bit OS then you can download either 64 bit of 32 bit, but if you have 32 bit OS then you should download the 32 bit version only.

Step 2 -&gt; Double click on the .exe file that you downloaded just now and follow the instructions. If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open cmd (go to Start -&gt; then type cmd in the search bar and hit enter). There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

===Mac===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#macos Download Link].

Step 2 -&gt; Double click on the .pkg file that you just downloaded. If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

===Linux===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#linux Download Link].

Step 2 -&gt; Go to the folder where you downloaded the .sh file and type following command 

  '''bash Anaconda-latest-Linux-x86_64.sh'''

If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

==Troubleshooting Spyder==

[[#Top]]

In most of the cases, it happens that Spyder is already running and you have initiated one more instance of it. Please make sure that spyder is not running already.
If you are on Linux OS, please launch spyder through terminal. Just open the terminal and type '''spyder''' and it will launch. When Spyder opens, make sure you see Anaconda with the version written on the Ipython console. If not, try changing the path of your anaconda. Follow these steps according to your OS version.

====Windows====
[https://stackoverflow.com/questions/44597662/conda-command-is-not-recognized-on-windows-10 Click Here]

====Linux====
[https://stackoverflow.com/questions/18675907/how-to-run-conda Click Here]

====Mac====
[https://stackoverflow.com/questions/35246386/conda-command-not-found Click Here]

In most of the cases relaunching Spyder works.
A more general Troubleshoot is present [https://github.com/spyder-ide/spyder/wiki/Troubleshooting-Guide-and-FAQ Here]

==How to run a program in Spyder IDE?==
Go to Run on the menu bar. Click Run-&gt;Run.

[[#TOP]]
==Print statements==
Print statements help to display output on console. 
{{#ev:youtube|https://youtu.be/gECkqaOwyt0|250|right}}

===Syntax===
print()

===How to print a message?===
In order to print a message in Python, write print(&quot;message&quot;).
Single, double, triple quote can be used print()

'''Example:'''

'''Single Quote'''
print('Hello')  
Output: Hello

'''Double Quote'''
print(&quot;Hello&quot;)  
Output: Hello

'''Quote within quote'''
print('Is &quot;Ram&quot; a good boy?')  
Output: Is &quot;Ram&quot; a good boy?

[[#TOP]]
==Escape sequences with strings==

We can use escape sequence within strings to make output more presentable.

'''\n'''  : It will move to next line.

'''\t'''  : It will add tab space(5space)

'''\a'''  : It will play system sound once.

'''Example:'''

Print(&quot;Hi, \n How are you?&quot;)

Output: 

Hi,

How are you?

Print(&quot;Hi, \t How are you?&quot;)

Output: 

Hi, &lt;5 spaces&gt; How are you?

[[File:Escape_Sequence.jpg]]

==Variables==
[[#Top]]
&lt;pre&gt;
Variables are used to store some values. Values can be strings, integers or decimal values.  

Variable Name Rules:
1. Variable name should start with letter or underscore. Variable name cant start with number.
Example:
Valid: JOC, WIKI, JOC_WIKI, _JOC
Invalid: 1JOC, 123WIKI, 0_WIKI

2. Remaining letter other then first one can contain number, underscore.
Example:
JOC1234, WIKI012_1332

3. Variable names are case sensitivities.
Example:
JOC, jOC, joC all are different varibles. 

&lt;/pre&gt;
{{#ev:youtube|https://youtu.be/60iAXH1sm-Y|250|right}}
===How to print a variable?===
In order to print the value of a variable in python, first initialize the variable and then call it where ever you wanna use it. 
&lt;pre&gt;print(variable_name)&lt;/pre&gt;

&lt;pre&gt;For example :
x=2                # x is viable here
print(x)           # calling variable x with print function

a = &quot;JOC&quot;          # a is variable here
b = &quot;_WIKI&quot;        # b is variable here
c = a + b          # c is variable here which will provide addition of variable a and b
&lt;/pre&gt;

===Some facts about Variables===
* If you want to print variable name with a message, you can use , operator. For example : I want to print Hello Simran and Simran has been stored in a variable called ''name''.
  name=&quot;Simran&quot;
  print(&quot;Hello&quot;,name)
* If you change the value of a variable, it will store the latest value. For example :
  name=&quot;Simran&quot;
  name=&quot;Amit&quot;
  If you will execute the command ''print(name)'', Amit will be displayed.
* You can perform operations like addition, subtraction etc only on integral variables.

===Variables Types and Conversion===
&lt;pre&gt;Variable can be decimal, integer and decimal. And they can be inter covered with the help of conversion functions.

Example:
JOC = 5           Save in Memory as 5       # We have variable with name JOC having value 5 here.
JOC = int(5)      Save in Memory as 5       # Here Variable JOC holding integer value of 5. 
JOC = flot(5)     Save in Memory as 5.0     # Here variable JOC holding flot value of 5
JOC = str(5)      Save in Memory as &quot;5&quot;     # Here variable JOC holding string value of 5 or We can say 5 will be treated as string here.
JOC = complex(5)  Save in Memory as (5+0j)  # Here variable JOC holding complex value of 5.
&lt;/pre&gt;
[[#TOP]]

==How to execute couple of instructions on console?==
You can execute couple of instructions on console using ;. Write Statement 1;Statement 2;......and then press ''Enter''.
{{#ev:youtube|https://youtu.be/CYQCYvLE22Y|250|right}}









==How to take input from the user?==
We can take input from the user using ''input'' function. For Example : You want the user to input variable ''x'', then write x=input(&quot;Enter the value of x&quot;) and execute. Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNkVLCxZw_jcgyS-bmrIVSP

And when the input you need is of data type other than string. You can do both the input function and data conversion in a single line.
For example:
Consider the program for letting in the patients
'''c=input(&quot;Enter (1/0)&quot;);d=int(c)'''

Instead of using it in two separate lines, combine it into a single line
'''c=int(input(&quot;Enter (1/0)&quot;))'''.

To get two inputs in same line with a space between them split() is used.

a,b=input(&quot;enter a&quot;).split(&quot;enter b&quot;)
----
[[#Top]]

==If statement==
If statement is used to execute set of two contrary statements based on a condition. 

===Syntax===
If (Condition):
    Statement 1
else:
    Statement 2

If 'Condition' is true then 'Statement 1' will be executed otherwise 'Statement 2' will be executed.

Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNhHmg3SkK1uiutigcAbH9K

==Loops==
[[#Top]]&lt;br&gt;
Loops in a programming languages are used to execute set of repetitive statements. For loop and while loop are used extensively to execute a set of looping instructions.

=== For loop Syntax ===
&lt;pre&gt;
for i in range(10): 
    Statement
&lt;/pre&gt;
range(10) indicate that values 0 to 9 will be assigned to the variable i and for each value of i the Statement will be executed, e.g.
&lt;pre&gt;
for i in range(10): 
    print(i)
&lt;/pre&gt;
Output will be
&lt;pre&gt;
0
1
2
3
4
5
6
7
8
9
&lt;/pre&gt;

[[#Top]]

=== While loop Syntax ===
&lt;pre&gt;
intialisation

while(condition):
   Statement
   increment/decrement
&lt;/pre&gt;
e.g.
&lt;pre&gt;
#initialization
i=0
while(i&lt;10): 
    print(i)
    i=i+1
&lt;/pre&gt;
Output will be:
&lt;pre&gt;
0
1
2
3
4
5
6
7
8
9
&lt;/pre&gt;
Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNbl5jkVrrw1E5XSvm3GiCI

[[#TOP]]
==Importance of Indentation in Python==
Indentation is used to indicate to what block of statements belong. Indentation of blocks convey program structure in Python. Indentation in Python is used to refer a group/block of code/statements. In C++ we use { and } (curly brackets) to group a set of statements. But in Python, there are no such brackets used. Instead of such brackets used in other programming languages, we use indentation in Python.
Use tabs,instead of spaces for ease of writing code.

Wrong indentation can lead to syntax error, or makes your output wrong for your logic e.g.
&lt;pre&gt;
#IndentationError: expected an indented block
i=-1
if i&lt;0:
print(&quot;Test successful&quot;)#Wrong indentation 
else:    
    print(&quot;Test failed&quot;)
#Output: IndentationError: expected an indented block
&lt;/pre&gt;
---
&lt;pre&gt;
#Properly Indented code:
i=-1
if i&lt;0:
    print(&quot;Test successful&quot;)#Wrong indentation
else:    
    print(&quot;Test failed&quot;)
#Output:Test successful
&lt;/pre&gt;
---
Logic changed, so output changed, with improper indentation, e.g.
---
&lt;h3&gt;Code : 1&lt;/h3&gt;
&lt;pre&gt;
sum=0
for i in range(5):
    for j in range(5):
        sum+=i
print(sum, end=&quot; &quot;)
#Output: 50
&lt;/pre&gt;
        
&lt;h3&gt;Code : 2&lt;/h3&gt;
&lt;pre&gt;
for i in range(5):
    for j in range(5):
        print(end=&quot; &quot;)
    sum+=i
print(sum, end=&quot; &quot;)
#Output:                          10
&lt;/pre&gt;
{{#ev:youtube|https://youtu.be/pmavoW419Yc|250|right}}&lt;br&gt;

[[#Top]]

==Spyder IDE Black Screen Solution==

----

 This issue is because of ''Help'' screen which is by default open. 
 We need to close it. So here's how you do it-


===Method 1:===

Step 1-    Try by closing current pane for that,  &quot;''press ctrl+shift+F4''&quot;  wait for few seconds things will appear on screen.

Step 2-    If it so than on menu bar go to ''view &gt; panes &gt; help'' unchecked &quot;''Help''&quot; option.

Step 3-    Make sure that &quot;''Help''&quot; under ''view &gt; panes'' is permanently unchecked. And ''Editor, Ipython console, Variable explorer''  are checked. 


===Method 2:===

Step 1-    Open spyder.

Step 2-   On that black screen randomly ''Left click'' on spyder &quot;''Menu bar''&quot; area you will get menu drop downs, You have to find Drop down with &quot;''Panes''&quot; option.

Step 3-   On &quot;''Panes''&quot; drop down unchecked the &quot;''Help''&quot;.

Step 4-   Wait for few seconds Spyder view will appear.

Step 5 -  Make sure that ''&quot;Help&quot;'' under view&gt;panes is permanently unchecked. And ''Editor, Ipython console, variable explorer'' are checked.


[[#Top]]</text>
      <sha1>4ptyt640h4ohymrmb19ziqvuvilwaev</sha1>
    </revision>
    <revision>
      <id>3556</id>
      <parentid>3551</parentid>
      <timestamp>2018-09-28T02:27:33Z</timestamp>
      <contributor>
        <username>Sachinkr</username>
        <id>1743</id>
      </contributor>
      <comment>/* Variables Types and Conversion */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="12298">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_2 Contributors of this page]
==Introduction to Python==
Python is a widely used programming language which allows programmers to write the program in fewer lines of code. It was designed by ''Guido van Rossum'' in 1991. Python uses an interpreter instead of compiler.Basically, the main difference between compiler and interpreter is that the compiler takes the code as 'whole' and compiles it..for example in C language and on the other side in interpreter..example: languages like Python...it interprets the written code 'line by line', and if somewhere error is found...it stops interpreting the code from there itself. Here, in our course we will be using Spyder IDE. Spyder is an integrated development environment with editing options to assist the programmers in writing programs. Spyder IDE is divided into two panes, one is console and other one is where program is written.

Python works on different platforms (Windows, Mac, Linux, Raspberry Pi, etc).
Python has a simple syntax similar to the English language.
Python has syntax that allows developers to write programs with fewer lines than some other programming languages.
Python runs on an interpreter system, meaning that code can be executed as soon as it is written. This means that prototyping can be very quick.
Python can be treated in a procedural way, an object-orientated way or a functional way.

==Installing Anaconda==
[[#Top]]
This article is all about installing and troubleshooting Anaconda and Spyder on different platforms.

===Windows===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#windows Download Link]. Make sure that you download the version compatible to your operating system architecture. If you have a 64 bit OS then you can download either 64 bit of 32 bit, but if you have 32 bit OS then you should download the 32 bit version only.

Step 2 -&gt; Double click on the .exe file that you downloaded just now and follow the instructions. If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open cmd (go to Start -&gt; then type cmd in the search bar and hit enter). There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

===Mac===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#macos Download Link].

Step 2 -&gt; Double click on the .pkg file that you just downloaded. If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

===Linux===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#linux Download Link].

Step 2 -&gt; Go to the folder where you downloaded the .sh file and type following command 

  '''bash Anaconda-latest-Linux-x86_64.sh'''

If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

==Troubleshooting Spyder==

[[#Top]]

In most of the cases, it happens that Spyder is already running and you have initiated one more instance of it. Please make sure that spyder is not running already.
If you are on Linux OS, please launch spyder through terminal. Just open the terminal and type '''spyder''' and it will launch. When Spyder opens, make sure you see Anaconda with the version written on the Ipython console. If not, try changing the path of your anaconda. Follow these steps according to your OS version.

====Windows====
[https://stackoverflow.com/questions/44597662/conda-command-is-not-recognized-on-windows-10 Click Here]

====Linux====
[https://stackoverflow.com/questions/18675907/how-to-run-conda Click Here]

====Mac====
[https://stackoverflow.com/questions/35246386/conda-command-not-found Click Here]

In most of the cases relaunching Spyder works.
A more general Troubleshoot is present [https://github.com/spyder-ide/spyder/wiki/Troubleshooting-Guide-and-FAQ Here]

==How to run a program in Spyder IDE?==
Go to Run on the menu bar. Click Run-&gt;Run.

[[#TOP]]
==Print statements==
Print statements help to display output on console. 
{{#ev:youtube|https://youtu.be/gECkqaOwyt0|250|right}}

===Syntax===
print()

===How to print a message?===
In order to print a message in Python, write print(&quot;message&quot;).
Single, double, triple quote can be used print()

'''Example:'''

'''Single Quote'''
print('Hello')  
Output: Hello

'''Double Quote'''
print(&quot;Hello&quot;)  
Output: Hello

'''Quote within quote'''
print('Is &quot;Ram&quot; a good boy?')  
Output: Is &quot;Ram&quot; a good boy?

[[#TOP]]
==Escape sequences with strings==

We can use escape sequence within strings to make output more presentable.

'''\n'''  : It will move to next line.

'''\t'''  : It will add tab space(5space)

'''\a'''  : It will play system sound once.

'''Example:'''

Print(&quot;Hi, \n How are you?&quot;)

Output: 

Hi,

How are you?

Print(&quot;Hi, \t How are you?&quot;)

Output: 

Hi, &lt;5 spaces&gt; How are you?

[[File:Escape_Sequence.jpg]]

==Variables==
[[#Top]]
&lt;pre&gt;
Variables are used to store some values. Values can be strings, integers or decimal values.  

Variable Name Rules:
1. Variable name should start with letter or underscore. Variable name cant start with number.
Example:
Valid: JOC, WIKI, JOC_WIKI, _JOC
Invalid: 1JOC, 123WIKI, 0_WIKI

2. Remaining letter other then first one can contain number, underscore.
Example:
JOC1234, WIKI012_1332

3. Variable names are case sensitivities.
Example:
JOC, jOC, joC all are different varibles. 

&lt;/pre&gt;
{{#ev:youtube|https://youtu.be/60iAXH1sm-Y|250|right}}
===How to print a variable?===
In order to print the value of a variable in python, first initialize the variable and then call it where ever you wanna use it. 
&lt;pre&gt;print(variable_name)&lt;/pre&gt;

&lt;pre&gt;For example :
x=2                # x is viable here
print(x)           # calling variable x with print function

a = &quot;JOC&quot;          # a is variable here
b = &quot;_WIKI&quot;        # b is variable here
c = a + b          # c is variable here which will provide addition of variable a and b
&lt;/pre&gt;

===Some facts about Variables===
* If you want to print variable name with a message, you can use , operator. For example : I want to print Hello Simran and Simran has been stored in a variable called ''name''.
  name=&quot;Simran&quot;
  print(&quot;Hello&quot;,name)
* If you change the value of a variable, it will store the latest value. For example :
  name=&quot;Simran&quot;
  name=&quot;Amit&quot;
  If you will execute the command ''print(name)'', Amit will be displayed.
* You can perform operations like addition, subtraction etc only on integral variables.

===Variables Types and Conversion===
&lt;pre&gt;Variable can be decimal, integer and decimal. And they can be inter covered with the help of conversion functions.

Example:
JOC = 5           Save in Memory as 5       # We have variable with name JOC having value 5 here.
JOC = int(5)      Save in Memory as 5       # Here Variable JOC holding integer value of 5. 
JOC = flot(5)     Save in Memory as 5.0     # Here variable JOC holding flot value of 5
JOC = str(5)      Save in Memory as &quot;5&quot;     # Here variable JOC holding string value of 5 or We can say 5 will be treated as string here.
JOC = complex(5)  Save in Memory as (5+0j)  # Here variable JOC holding complex value of 5.

There are many more function available in python. You can convert variable as per your requirement.
&lt;/pre&gt;
[[#TOP]]

==How to execute couple of instructions on console?==
You can execute couple of instructions on console using ;. Write Statement 1;Statement 2;......and then press ''Enter''.
{{#ev:youtube|https://youtu.be/CYQCYvLE22Y|250|right}}









==How to take input from the user?==
We can take input from the user using ''input'' function. For Example : You want the user to input variable ''x'', then write x=input(&quot;Enter the value of x&quot;) and execute. Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNkVLCxZw_jcgyS-bmrIVSP

And when the input you need is of data type other than string. You can do both the input function and data conversion in a single line.
For example:
Consider the program for letting in the patients
'''c=input(&quot;Enter (1/0)&quot;);d=int(c)'''

Instead of using it in two separate lines, combine it into a single line
'''c=int(input(&quot;Enter (1/0)&quot;))'''.

To get two inputs in same line with a space between them split() is used.

a,b=input(&quot;enter a&quot;).split(&quot;enter b&quot;)
----
[[#Top]]

==If statement==
If statement is used to execute set of two contrary statements based on a condition. 

===Syntax===
If (Condition):
    Statement 1
else:
    Statement 2

If 'Condition' is true then 'Statement 1' will be executed otherwise 'Statement 2' will be executed.

Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNhHmg3SkK1uiutigcAbH9K

==Loops==
[[#Top]]&lt;br&gt;
Loops in a programming languages are used to execute set of repetitive statements. For loop and while loop are used extensively to execute a set of looping instructions.

=== For loop Syntax ===
&lt;pre&gt;
for i in range(10): 
    Statement
&lt;/pre&gt;
range(10) indicate that values 0 to 9 will be assigned to the variable i and for each value of i the Statement will be executed, e.g.
&lt;pre&gt;
for i in range(10): 
    print(i)
&lt;/pre&gt;
Output will be
&lt;pre&gt;
0
1
2
3
4
5
6
7
8
9
&lt;/pre&gt;

[[#Top]]

=== While loop Syntax ===
&lt;pre&gt;
intialisation

while(condition):
   Statement
   increment/decrement
&lt;/pre&gt;
e.g.
&lt;pre&gt;
#initialization
i=0
while(i&lt;10): 
    print(i)
    i=i+1
&lt;/pre&gt;
Output will be:
&lt;pre&gt;
0
1
2
3
4
5
6
7
8
9
&lt;/pre&gt;
Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNbl5jkVrrw1E5XSvm3GiCI

[[#TOP]]
==Importance of Indentation in Python==
Indentation is used to indicate to what block of statements belong. Indentation of blocks convey program structure in Python. Indentation in Python is used to refer a group/block of code/statements. In C++ we use { and } (curly brackets) to group a set of statements. But in Python, there are no such brackets used. Instead of such brackets used in other programming languages, we use indentation in Python.
Use tabs,instead of spaces for ease of writing code.

Wrong indentation can lead to syntax error, or makes your output wrong for your logic e.g.
&lt;pre&gt;
#IndentationError: expected an indented block
i=-1
if i&lt;0:
print(&quot;Test successful&quot;)#Wrong indentation 
else:    
    print(&quot;Test failed&quot;)
#Output: IndentationError: expected an indented block
&lt;/pre&gt;
---
&lt;pre&gt;
#Properly Indented code:
i=-1
if i&lt;0:
    print(&quot;Test successful&quot;)#Wrong indentation
else:    
    print(&quot;Test failed&quot;)
#Output:Test successful
&lt;/pre&gt;
---
Logic changed, so output changed, with improper indentation, e.g.
---
&lt;h3&gt;Code : 1&lt;/h3&gt;
&lt;pre&gt;
sum=0
for i in range(5):
    for j in range(5):
        sum+=i
print(sum, end=&quot; &quot;)
#Output: 50
&lt;/pre&gt;
        
&lt;h3&gt;Code : 2&lt;/h3&gt;
&lt;pre&gt;
for i in range(5):
    for j in range(5):
        print(end=&quot; &quot;)
    sum+=i
print(sum, end=&quot; &quot;)
#Output:                          10
&lt;/pre&gt;
{{#ev:youtube|https://youtu.be/pmavoW419Yc|250|right}}&lt;br&gt;

[[#Top]]

==Spyder IDE Black Screen Solution==

----

 This issue is because of ''Help'' screen which is by default open. 
 We need to close it. So here's how you do it-


===Method 1:===

Step 1-    Try by closing current pane for that,  &quot;''press ctrl+shift+F4''&quot;  wait for few seconds things will appear on screen.

Step 2-    If it so than on menu bar go to ''view &gt; panes &gt; help'' unchecked &quot;''Help''&quot; option.

Step 3-    Make sure that &quot;''Help''&quot; under ''view &gt; panes'' is permanently unchecked. And ''Editor, Ipython console, Variable explorer''  are checked. 


===Method 2:===

Step 1-    Open spyder.

Step 2-   On that black screen randomly ''Left click'' on spyder &quot;''Menu bar''&quot; area you will get menu drop downs, You have to find Drop down with &quot;''Panes''&quot; option.

Step 3-   On &quot;''Panes''&quot; drop down unchecked the &quot;''Help''&quot;.

Step 4-   Wait for few seconds Spyder view will appear.

Step 5 -  Make sure that ''&quot;Help&quot;'' under view&gt;panes is permanently unchecked. And ''Editor, Ipython console, variable explorer'' are checked.


[[#Top]]</text>
      <sha1>sckisfe6j5j4d5ugbhs58v47czktkgq</sha1>
    </revision>
    <revision>
      <id>3562</id>
      <parentid>3556</parentid>
      <timestamp>2018-09-28T02:31:02Z</timestamp>
      <contributor>
        <username>Sachinkr</username>
        <id>1743</id>
      </contributor>
      <comment>/* Variables Types and Conversion */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="12500">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_2 Contributors of this page]
==Introduction to Python==
Python is a widely used programming language which allows programmers to write the program in fewer lines of code. It was designed by ''Guido van Rossum'' in 1991. Python uses an interpreter instead of compiler.Basically, the main difference between compiler and interpreter is that the compiler takes the code as 'whole' and compiles it..for example in C language and on the other side in interpreter..example: languages like Python...it interprets the written code 'line by line', and if somewhere error is found...it stops interpreting the code from there itself. Here, in our course we will be using Spyder IDE. Spyder is an integrated development environment with editing options to assist the programmers in writing programs. Spyder IDE is divided into two panes, one is console and other one is where program is written.

Python works on different platforms (Windows, Mac, Linux, Raspberry Pi, etc).
Python has a simple syntax similar to the English language.
Python has syntax that allows developers to write programs with fewer lines than some other programming languages.
Python runs on an interpreter system, meaning that code can be executed as soon as it is written. This means that prototyping can be very quick.
Python can be treated in a procedural way, an object-orientated way or a functional way.

==Installing Anaconda==
[[#Top]]
This article is all about installing and troubleshooting Anaconda and Spyder on different platforms.

===Windows===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#windows Download Link]. Make sure that you download the version compatible to your operating system architecture. If you have a 64 bit OS then you can download either 64 bit of 32 bit, but if you have 32 bit OS then you should download the 32 bit version only.

Step 2 -&gt; Double click on the .exe file that you downloaded just now and follow the instructions. If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open cmd (go to Start -&gt; then type cmd in the search bar and hit enter). There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

===Mac===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#macos Download Link].

Step 2 -&gt; Double click on the .pkg file that you just downloaded. If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

===Linux===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#linux Download Link].

Step 2 -&gt; Go to the folder where you downloaded the .sh file and type following command 

  '''bash Anaconda-latest-Linux-x86_64.sh'''

If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

==Troubleshooting Spyder==

[[#Top]]

In most of the cases, it happens that Spyder is already running and you have initiated one more instance of it. Please make sure that spyder is not running already.
If you are on Linux OS, please launch spyder through terminal. Just open the terminal and type '''spyder''' and it will launch. When Spyder opens, make sure you see Anaconda with the version written on the Ipython console. If not, try changing the path of your anaconda. Follow these steps according to your OS version.

====Windows====
[https://stackoverflow.com/questions/44597662/conda-command-is-not-recognized-on-windows-10 Click Here]

====Linux====
[https://stackoverflow.com/questions/18675907/how-to-run-conda Click Here]

====Mac====
[https://stackoverflow.com/questions/35246386/conda-command-not-found Click Here]

In most of the cases relaunching Spyder works.
A more general Troubleshoot is present [https://github.com/spyder-ide/spyder/wiki/Troubleshooting-Guide-and-FAQ Here]

==How to run a program in Spyder IDE?==
Go to Run on the menu bar. Click Run-&gt;Run.

[[#TOP]]
==Print statements==
Print statements help to display output on console. 
{{#ev:youtube|https://youtu.be/gECkqaOwyt0|250|right}}

===Syntax===
print()

===How to print a message?===
In order to print a message in Python, write print(&quot;message&quot;).
Single, double, triple quote can be used print()

'''Example:'''

'''Single Quote'''
print('Hello')  
Output: Hello

'''Double Quote'''
print(&quot;Hello&quot;)  
Output: Hello

'''Quote within quote'''
print('Is &quot;Ram&quot; a good boy?')  
Output: Is &quot;Ram&quot; a good boy?

[[#TOP]]
==Escape sequences with strings==

We can use escape sequence within strings to make output more presentable.

'''\n'''  : It will move to next line.

'''\t'''  : It will add tab space(5space)

'''\a'''  : It will play system sound once.

'''Example:'''

Print(&quot;Hi, \n How are you?&quot;)

Output: 

Hi,

How are you?

Print(&quot;Hi, \t How are you?&quot;)

Output: 

Hi, &lt;5 spaces&gt; How are you?

[[File:Escape_Sequence.jpg]]

==Variables==
[[#Top]]
&lt;pre&gt;
Variables are used to store some values. Values can be strings, integers or decimal values.  

Variable Name Rules:
1. Variable name should start with letter or underscore. Variable name cant start with number.
Example:
Valid: JOC, WIKI, JOC_WIKI, _JOC
Invalid: 1JOC, 123WIKI, 0_WIKI

2. Remaining letter other then first one can contain number, underscore.
Example:
JOC1234, WIKI012_1332

3. Variable names are case sensitivities.
Example:
JOC, jOC, joC all are different varibles. 

&lt;/pre&gt;
{{#ev:youtube|https://youtu.be/60iAXH1sm-Y|250|right}}
===How to print a variable?===
In order to print the value of a variable in python, first initialize the variable and then call it where ever you wanna use it. 
&lt;pre&gt;print(variable_name)&lt;/pre&gt;

&lt;pre&gt;For example :
x=2                # x is viable here
print(x)           # calling variable x with print function

a = &quot;JOC&quot;          # a is variable here
b = &quot;_WIKI&quot;        # b is variable here
c = a + b          # c is variable here which will provide addition of variable a and b
&lt;/pre&gt;

===Some facts about Variables===
* If you want to print variable name with a message, you can use , operator. For example : I want to print Hello Simran and Simran has been stored in a variable called ''name''.
  name=&quot;Simran&quot;
  print(&quot;Hello&quot;,name)
* If you change the value of a variable, it will store the latest value. For example :
  name=&quot;Simran&quot;
  name=&quot;Amit&quot;
  If you will execute the command ''print(name)'', Amit will be displayed.
* You can perform operations like addition, subtraction etc only on integral variables.

===Variables Types and Conversion===
&lt;pre&gt;Variable can be decimal, integer and decimal. And they can be inter covered with the help of conversion functions.

Example:
JOC = 5           Save in Memory as 5       # We have variable with name JOC having value 5 here.
JOC = int(5)      Save in Memory as 5       # Here Variable JOC holding integer value of 5. 
JOC = flot(5)     Save in Memory as 5.0     # Here variable JOC holding flot value of 5
JOC = str(5)      Save in Memory as &quot;5&quot;     # Here variable JOC holding string value of 5 or We can say 5 will be treated as string here.
JOC = complex(5)  Save in Memory as (5+0j)  # Here variable JOC holding complex value of 5.
JOC = oct(5)      Save in Memory as 012     # Here variable JOC holding octal representation of 5.
JOC = hex(5)      Save in Memory as 0xa     # Here variable JOC holding hexadecimal representation of 5
There are many more function available in python. You can convert variable as per your requirement.
&lt;/pre&gt;
[[#TOP]]

==How to execute couple of instructions on console?==
You can execute couple of instructions on console using ;. Write Statement 1;Statement 2;......and then press ''Enter''.
{{#ev:youtube|https://youtu.be/CYQCYvLE22Y|250|right}}









==How to take input from the user?==
We can take input from the user using ''input'' function. For Example : You want the user to input variable ''x'', then write x=input(&quot;Enter the value of x&quot;) and execute. Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNkVLCxZw_jcgyS-bmrIVSP

And when the input you need is of data type other than string. You can do both the input function and data conversion in a single line.
For example:
Consider the program for letting in the patients
'''c=input(&quot;Enter (1/0)&quot;);d=int(c)'''

Instead of using it in two separate lines, combine it into a single line
'''c=int(input(&quot;Enter (1/0)&quot;))'''.

To get two inputs in same line with a space between them split() is used.

a,b=input(&quot;enter a&quot;).split(&quot;enter b&quot;)
----
[[#Top]]

==If statement==
If statement is used to execute set of two contrary statements based on a condition. 

===Syntax===
If (Condition):
    Statement 1
else:
    Statement 2

If 'Condition' is true then 'Statement 1' will be executed otherwise 'Statement 2' will be executed.

Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNhHmg3SkK1uiutigcAbH9K

==Loops==
[[#Top]]&lt;br&gt;
Loops in a programming languages are used to execute set of repetitive statements. For loop and while loop are used extensively to execute a set of looping instructions.

=== For loop Syntax ===
&lt;pre&gt;
for i in range(10): 
    Statement
&lt;/pre&gt;
range(10) indicate that values 0 to 9 will be assigned to the variable i and for each value of i the Statement will be executed, e.g.
&lt;pre&gt;
for i in range(10): 
    print(i)
&lt;/pre&gt;
Output will be
&lt;pre&gt;
0
1
2
3
4
5
6
7
8
9
&lt;/pre&gt;

[[#Top]]

=== While loop Syntax ===
&lt;pre&gt;
intialisation

while(condition):
   Statement
   increment/decrement
&lt;/pre&gt;
e.g.
&lt;pre&gt;
#initialization
i=0
while(i&lt;10): 
    print(i)
    i=i+1
&lt;/pre&gt;
Output will be:
&lt;pre&gt;
0
1
2
3
4
5
6
7
8
9
&lt;/pre&gt;
Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNbl5jkVrrw1E5XSvm3GiCI

[[#TOP]]
==Importance of Indentation in Python==
Indentation is used to indicate to what block of statements belong. Indentation of blocks convey program structure in Python. Indentation in Python is used to refer a group/block of code/statements. In C++ we use { and } (curly brackets) to group a set of statements. But in Python, there are no such brackets used. Instead of such brackets used in other programming languages, we use indentation in Python.
Use tabs,instead of spaces for ease of writing code.

Wrong indentation can lead to syntax error, or makes your output wrong for your logic e.g.
&lt;pre&gt;
#IndentationError: expected an indented block
i=-1
if i&lt;0:
print(&quot;Test successful&quot;)#Wrong indentation 
else:    
    print(&quot;Test failed&quot;)
#Output: IndentationError: expected an indented block
&lt;/pre&gt;
---
&lt;pre&gt;
#Properly Indented code:
i=-1
if i&lt;0:
    print(&quot;Test successful&quot;)#Wrong indentation
else:    
    print(&quot;Test failed&quot;)
#Output:Test successful
&lt;/pre&gt;
---
Logic changed, so output changed, with improper indentation, e.g.
---
&lt;h3&gt;Code : 1&lt;/h3&gt;
&lt;pre&gt;
sum=0
for i in range(5):
    for j in range(5):
        sum+=i
print(sum, end=&quot; &quot;)
#Output: 50
&lt;/pre&gt;
        
&lt;h3&gt;Code : 2&lt;/h3&gt;
&lt;pre&gt;
for i in range(5):
    for j in range(5):
        print(end=&quot; &quot;)
    sum+=i
print(sum, end=&quot; &quot;)
#Output:                          10
&lt;/pre&gt;
{{#ev:youtube|https://youtu.be/pmavoW419Yc|250|right}}&lt;br&gt;

[[#Top]]

==Spyder IDE Black Screen Solution==

----

 This issue is because of ''Help'' screen which is by default open. 
 We need to close it. So here's how you do it-


===Method 1:===

Step 1-    Try by closing current pane for that,  &quot;''press ctrl+shift+F4''&quot;  wait for few seconds things will appear on screen.

Step 2-    If it so than on menu bar go to ''view &gt; panes &gt; help'' unchecked &quot;''Help''&quot; option.

Step 3-    Make sure that &quot;''Help''&quot; under ''view &gt; panes'' is permanently unchecked. And ''Editor, Ipython console, Variable explorer''  are checked. 


===Method 2:===

Step 1-    Open spyder.

Step 2-   On that black screen randomly ''Left click'' on spyder &quot;''Menu bar''&quot; area you will get menu drop downs, You have to find Drop down with &quot;''Panes''&quot; option.

Step 3-   On &quot;''Panes''&quot; drop down unchecked the &quot;''Help''&quot;.

Step 4-   Wait for few seconds Spyder view will appear.

Step 5 -  Make sure that ''&quot;Help&quot;'' under view&gt;panes is permanently unchecked. And ''Editor, Ipython console, variable explorer'' are checked.


[[#Top]]</text>
      <sha1>r1d5x1vr3b2amaq4b4fgw3s9gn6rsvj</sha1>
    </revision>
    <revision>
      <id>3574</id>
      <parentid>3562</parentid>
      <timestamp>2018-09-28T02:58:21Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* Introduction to Python */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="12501">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_2 Contributors of this page]
==Introduction to Python==
Python is a widely used programming language which allows programmers to write the program in fewer lines of code. It was designed by ''Guido van Rossum'' in 1991. Python uses an interpreter instead of compiler.Basically, the main difference between compiler and interpreter is that the compiler takes the code as 'whole' and compiles it. for example, in C language and on the other side in interpreter..example: languages like Python...it interprets the written code 'line by line', and if somewhere error is found...it stops interpreting the code from there itself. Here, in our course we will be using Spyder IDE. Spyder is an integrated development environment with editing options to assist the programmers in writing programs. Spyder IDE is divided into two panes, one is console and other one is where program is written.

Python works on different platforms (Windows, Mac, Linux, Raspberry Pi, etc).
Python has a simple syntax similar to the English language.
Python has syntax that allows developers to write programs with fewer lines than some other programming languages.
Python runs on an interpreter system, meaning that code can be executed as soon as it is written. This means that prototyping can be very quick.
Python can be treated in a procedural way, an object-orientated way or a functional way.

==Installing Anaconda==
[[#Top]]
This article is all about installing and troubleshooting Anaconda and Spyder on different platforms.

===Windows===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#windows Download Link]. Make sure that you download the version compatible to your operating system architecture. If you have a 64 bit OS then you can download either 64 bit of 32 bit, but if you have 32 bit OS then you should download the 32 bit version only.

Step 2 -&gt; Double click on the .exe file that you downloaded just now and follow the instructions. If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open cmd (go to Start -&gt; then type cmd in the search bar and hit enter). There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

===Mac===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#macos Download Link].

Step 2 -&gt; Double click on the .pkg file that you just downloaded. If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

===Linux===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#linux Download Link].

Step 2 -&gt; Go to the folder where you downloaded the .sh file and type following command 

  '''bash Anaconda-latest-Linux-x86_64.sh'''

If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

==Troubleshooting Spyder==

[[#Top]]

In most of the cases, it happens that Spyder is already running and you have initiated one more instance of it. Please make sure that spyder is not running already.
If you are on Linux OS, please launch spyder through terminal. Just open the terminal and type '''spyder''' and it will launch. When Spyder opens, make sure you see Anaconda with the version written on the Ipython console. If not, try changing the path of your anaconda. Follow these steps according to your OS version.

====Windows====
[https://stackoverflow.com/questions/44597662/conda-command-is-not-recognized-on-windows-10 Click Here]

====Linux====
[https://stackoverflow.com/questions/18675907/how-to-run-conda Click Here]

====Mac====
[https://stackoverflow.com/questions/35246386/conda-command-not-found Click Here]

In most of the cases relaunching Spyder works.
A more general Troubleshoot is present [https://github.com/spyder-ide/spyder/wiki/Troubleshooting-Guide-and-FAQ Here]

==How to run a program in Spyder IDE?==
Go to Run on the menu bar. Click Run-&gt;Run.

[[#TOP]]
==Print statements==
Print statements help to display output on console. 
{{#ev:youtube|https://youtu.be/gECkqaOwyt0|250|right}}

===Syntax===
print()

===How to print a message?===
In order to print a message in Python, write print(&quot;message&quot;).
Single, double, triple quote can be used print()

'''Example:'''

'''Single Quote'''
print('Hello')  
Output: Hello

'''Double Quote'''
print(&quot;Hello&quot;)  
Output: Hello

'''Quote within quote'''
print('Is &quot;Ram&quot; a good boy?')  
Output: Is &quot;Ram&quot; a good boy?

[[#TOP]]
==Escape sequences with strings==

We can use escape sequence within strings to make output more presentable.

'''\n'''  : It will move to next line.

'''\t'''  : It will add tab space(5space)

'''\a'''  : It will play system sound once.

'''Example:'''

Print(&quot;Hi, \n How are you?&quot;)

Output: 

Hi,

How are you?

Print(&quot;Hi, \t How are you?&quot;)

Output: 

Hi, &lt;5 spaces&gt; How are you?

[[File:Escape_Sequence.jpg]]

==Variables==
[[#Top]]
&lt;pre&gt;
Variables are used to store some values. Values can be strings, integers or decimal values.  

Variable Name Rules:
1. Variable name should start with letter or underscore. Variable name cant start with number.
Example:
Valid: JOC, WIKI, JOC_WIKI, _JOC
Invalid: 1JOC, 123WIKI, 0_WIKI

2. Remaining letter other then first one can contain number, underscore.
Example:
JOC1234, WIKI012_1332

3. Variable names are case sensitivities.
Example:
JOC, jOC, joC all are different varibles. 

&lt;/pre&gt;
{{#ev:youtube|https://youtu.be/60iAXH1sm-Y|250|right}}
===How to print a variable?===
In order to print the value of a variable in python, first initialize the variable and then call it where ever you wanna use it. 
&lt;pre&gt;print(variable_name)&lt;/pre&gt;

&lt;pre&gt;For example :
x=2                # x is viable here
print(x)           # calling variable x with print function

a = &quot;JOC&quot;          # a is variable here
b = &quot;_WIKI&quot;        # b is variable here
c = a + b          # c is variable here which will provide addition of variable a and b
&lt;/pre&gt;

===Some facts about Variables===
* If you want to print variable name with a message, you can use , operator. For example : I want to print Hello Simran and Simran has been stored in a variable called ''name''.
  name=&quot;Simran&quot;
  print(&quot;Hello&quot;,name)
* If you change the value of a variable, it will store the latest value. For example :
  name=&quot;Simran&quot;
  name=&quot;Amit&quot;
  If you will execute the command ''print(name)'', Amit will be displayed.
* You can perform operations like addition, subtraction etc only on integral variables.

===Variables Types and Conversion===
&lt;pre&gt;Variable can be decimal, integer and decimal. And they can be inter covered with the help of conversion functions.

Example:
JOC = 5           Save in Memory as 5       # We have variable with name JOC having value 5 here.
JOC = int(5)      Save in Memory as 5       # Here Variable JOC holding integer value of 5. 
JOC = flot(5)     Save in Memory as 5.0     # Here variable JOC holding flot value of 5
JOC = str(5)      Save in Memory as &quot;5&quot;     # Here variable JOC holding string value of 5 or We can say 5 will be treated as string here.
JOC = complex(5)  Save in Memory as (5+0j)  # Here variable JOC holding complex value of 5.
JOC = oct(5)      Save in Memory as 012     # Here variable JOC holding octal representation of 5.
JOC = hex(5)      Save in Memory as 0xa     # Here variable JOC holding hexadecimal representation of 5
There are many more function available in python. You can convert variable as per your requirement.
&lt;/pre&gt;
[[#TOP]]

==How to execute couple of instructions on console?==
You can execute couple of instructions on console using ;. Write Statement 1;Statement 2;......and then press ''Enter''.
{{#ev:youtube|https://youtu.be/CYQCYvLE22Y|250|right}}









==How to take input from the user?==
We can take input from the user using ''input'' function. For Example : You want the user to input variable ''x'', then write x=input(&quot;Enter the value of x&quot;) and execute. Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNkVLCxZw_jcgyS-bmrIVSP

And when the input you need is of data type other than string. You can do both the input function and data conversion in a single line.
For example:
Consider the program for letting in the patients
'''c=input(&quot;Enter (1/0)&quot;);d=int(c)'''

Instead of using it in two separate lines, combine it into a single line
'''c=int(input(&quot;Enter (1/0)&quot;))'''.

To get two inputs in same line with a space between them split() is used.

a,b=input(&quot;enter a&quot;).split(&quot;enter b&quot;)
----
[[#Top]]

==If statement==
If statement is used to execute set of two contrary statements based on a condition. 

===Syntax===
If (Condition):
    Statement 1
else:
    Statement 2

If 'Condition' is true then 'Statement 1' will be executed otherwise 'Statement 2' will be executed.

Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNhHmg3SkK1uiutigcAbH9K

==Loops==
[[#Top]]&lt;br&gt;
Loops in a programming languages are used to execute set of repetitive statements. For loop and while loop are used extensively to execute a set of looping instructions.

=== For loop Syntax ===
&lt;pre&gt;
for i in range(10): 
    Statement
&lt;/pre&gt;
range(10) indicate that values 0 to 9 will be assigned to the variable i and for each value of i the Statement will be executed, e.g.
&lt;pre&gt;
for i in range(10): 
    print(i)
&lt;/pre&gt;
Output will be
&lt;pre&gt;
0
1
2
3
4
5
6
7
8
9
&lt;/pre&gt;

[[#Top]]

=== While loop Syntax ===
&lt;pre&gt;
intialisation

while(condition):
   Statement
   increment/decrement
&lt;/pre&gt;
e.g.
&lt;pre&gt;
#initialization
i=0
while(i&lt;10): 
    print(i)
    i=i+1
&lt;/pre&gt;
Output will be:
&lt;pre&gt;
0
1
2
3
4
5
6
7
8
9
&lt;/pre&gt;
Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNbl5jkVrrw1E5XSvm3GiCI

[[#TOP]]
==Importance of Indentation in Python==
Indentation is used to indicate to what block of statements belong. Indentation of blocks convey program structure in Python. Indentation in Python is used to refer a group/block of code/statements. In C++ we use { and } (curly brackets) to group a set of statements. But in Python, there are no such brackets used. Instead of such brackets used in other programming languages, we use indentation in Python.
Use tabs,instead of spaces for ease of writing code.

Wrong indentation can lead to syntax error, or makes your output wrong for your logic e.g.
&lt;pre&gt;
#IndentationError: expected an indented block
i=-1
if i&lt;0:
print(&quot;Test successful&quot;)#Wrong indentation 
else:    
    print(&quot;Test failed&quot;)
#Output: IndentationError: expected an indented block
&lt;/pre&gt;
---
&lt;pre&gt;
#Properly Indented code:
i=-1
if i&lt;0:
    print(&quot;Test successful&quot;)#Wrong indentation
else:    
    print(&quot;Test failed&quot;)
#Output:Test successful
&lt;/pre&gt;
---
Logic changed, so output changed, with improper indentation, e.g.
---
&lt;h3&gt;Code : 1&lt;/h3&gt;
&lt;pre&gt;
sum=0
for i in range(5):
    for j in range(5):
        sum+=i
print(sum, end=&quot; &quot;)
#Output: 50
&lt;/pre&gt;
        
&lt;h3&gt;Code : 2&lt;/h3&gt;
&lt;pre&gt;
for i in range(5):
    for j in range(5):
        print(end=&quot; &quot;)
    sum+=i
print(sum, end=&quot; &quot;)
#Output:                          10
&lt;/pre&gt;
{{#ev:youtube|https://youtu.be/pmavoW419Yc|250|right}}&lt;br&gt;

[[#Top]]

==Spyder IDE Black Screen Solution==

----

 This issue is because of ''Help'' screen which is by default open. 
 We need to close it. So here's how you do it-


===Method 1:===

Step 1-    Try by closing current pane for that,  &quot;''press ctrl+shift+F4''&quot;  wait for few seconds things will appear on screen.

Step 2-    If it so than on menu bar go to ''view &gt; panes &gt; help'' unchecked &quot;''Help''&quot; option.

Step 3-    Make sure that &quot;''Help''&quot; under ''view &gt; panes'' is permanently unchecked. And ''Editor, Ipython console, Variable explorer''  are checked. 


===Method 2:===

Step 1-    Open spyder.

Step 2-   On that black screen randomly ''Left click'' on spyder &quot;''Menu bar''&quot; area you will get menu drop downs, You have to find Drop down with &quot;''Panes''&quot; option.

Step 3-   On &quot;''Panes''&quot; drop down unchecked the &quot;''Help''&quot;.

Step 4-   Wait for few seconds Spyder view will appear.

Step 5 -  Make sure that ''&quot;Help&quot;'' under view&gt;panes is permanently unchecked. And ''Editor, Ipython console, variable explorer'' are checked.


[[#Top]]</text>
      <sha1>kcfcj9e8e6xhmvodth8a0zltnjregl0</sha1>
    </revision>
    <revision>
      <id>3575</id>
      <parentid>3574</parentid>
      <timestamp>2018-09-28T02:58:59Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* Introduction to Python */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="12504">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_2 Contributors of this page]
==Introduction to Python==
Python is a widely used programming language which allows programmers to write the program in fewer lines of code. It was designed by ''Guido van Rossum'' in 1991. Python uses an interpreter instead of compiler.Basically, the main difference between compiler and interpreter is that the compiler takes the code as 'whole' and compiles it. for example, in C language and on the other side in interpreter. For example: languages like Python. It interprets the written code 'line by line', and if somewhere error is found...it stops interpreting the code from there itself. Here, in our course we will be using Spyder IDE. Spyder is an integrated development environment with editing options to assist the programmers in writing programs. Spyder IDE is divided into two panes, one is console and other one is where program is written.

Python works on different platforms (Windows, Mac, Linux, Raspberry Pi, etc).
Python has a simple syntax similar to the English language.
Python has syntax that allows developers to write programs with fewer lines than some other programming languages.
Python runs on an interpreter system, meaning that code can be executed as soon as it is written. This means that prototyping can be very quick.
Python can be treated in a procedural way, an object-orientated way or a functional way.

==Installing Anaconda==
[[#Top]]
This article is all about installing and troubleshooting Anaconda and Spyder on different platforms.

===Windows===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#windows Download Link]. Make sure that you download the version compatible to your operating system architecture. If you have a 64 bit OS then you can download either 64 bit of 32 bit, but if you have 32 bit OS then you should download the 32 bit version only.

Step 2 -&gt; Double click on the .exe file that you downloaded just now and follow the instructions. If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open cmd (go to Start -&gt; then type cmd in the search bar and hit enter). There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

===Mac===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#macos Download Link].

Step 2 -&gt; Double click on the .pkg file that you just downloaded. If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

===Linux===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#linux Download Link].

Step 2 -&gt; Go to the folder where you downloaded the .sh file and type following command 

  '''bash Anaconda-latest-Linux-x86_64.sh'''

If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

==Troubleshooting Spyder==

[[#Top]]

In most of the cases, it happens that Spyder is already running and you have initiated one more instance of it. Please make sure that spyder is not running already.
If you are on Linux OS, please launch spyder through terminal. Just open the terminal and type '''spyder''' and it will launch. When Spyder opens, make sure you see Anaconda with the version written on the Ipython console. If not, try changing the path of your anaconda. Follow these steps according to your OS version.

====Windows====
[https://stackoverflow.com/questions/44597662/conda-command-is-not-recognized-on-windows-10 Click Here]

====Linux====
[https://stackoverflow.com/questions/18675907/how-to-run-conda Click Here]

====Mac====
[https://stackoverflow.com/questions/35246386/conda-command-not-found Click Here]

In most of the cases relaunching Spyder works.
A more general Troubleshoot is present [https://github.com/spyder-ide/spyder/wiki/Troubleshooting-Guide-and-FAQ Here]

==How to run a program in Spyder IDE?==
Go to Run on the menu bar. Click Run-&gt;Run.

[[#TOP]]
==Print statements==
Print statements help to display output on console. 
{{#ev:youtube|https://youtu.be/gECkqaOwyt0|250|right}}

===Syntax===
print()

===How to print a message?===
In order to print a message in Python, write print(&quot;message&quot;).
Single, double, triple quote can be used print()

'''Example:'''

'''Single Quote'''
print('Hello')  
Output: Hello

'''Double Quote'''
print(&quot;Hello&quot;)  
Output: Hello

'''Quote within quote'''
print('Is &quot;Ram&quot; a good boy?')  
Output: Is &quot;Ram&quot; a good boy?

[[#TOP]]
==Escape sequences with strings==

We can use escape sequence within strings to make output more presentable.

'''\n'''  : It will move to next line.

'''\t'''  : It will add tab space(5space)

'''\a'''  : It will play system sound once.

'''Example:'''

Print(&quot;Hi, \n How are you?&quot;)

Output: 

Hi,

How are you?

Print(&quot;Hi, \t How are you?&quot;)

Output: 

Hi, &lt;5 spaces&gt; How are you?

[[File:Escape_Sequence.jpg]]

==Variables==
[[#Top]]
&lt;pre&gt;
Variables are used to store some values. Values can be strings, integers or decimal values.  

Variable Name Rules:
1. Variable name should start with letter or underscore. Variable name cant start with number.
Example:
Valid: JOC, WIKI, JOC_WIKI, _JOC
Invalid: 1JOC, 123WIKI, 0_WIKI

2. Remaining letter other then first one can contain number, underscore.
Example:
JOC1234, WIKI012_1332

3. Variable names are case sensitivities.
Example:
JOC, jOC, joC all are different varibles. 

&lt;/pre&gt;
{{#ev:youtube|https://youtu.be/60iAXH1sm-Y|250|right}}
===How to print a variable?===
In order to print the value of a variable in python, first initialize the variable and then call it where ever you wanna use it. 
&lt;pre&gt;print(variable_name)&lt;/pre&gt;

&lt;pre&gt;For example :
x=2                # x is viable here
print(x)           # calling variable x with print function

a = &quot;JOC&quot;          # a is variable here
b = &quot;_WIKI&quot;        # b is variable here
c = a + b          # c is variable here which will provide addition of variable a and b
&lt;/pre&gt;

===Some facts about Variables===
* If you want to print variable name with a message, you can use , operator. For example : I want to print Hello Simran and Simran has been stored in a variable called ''name''.
  name=&quot;Simran&quot;
  print(&quot;Hello&quot;,name)
* If you change the value of a variable, it will store the latest value. For example :
  name=&quot;Simran&quot;
  name=&quot;Amit&quot;
  If you will execute the command ''print(name)'', Amit will be displayed.
* You can perform operations like addition, subtraction etc only on integral variables.

===Variables Types and Conversion===
&lt;pre&gt;Variable can be decimal, integer and decimal. And they can be inter covered with the help of conversion functions.

Example:
JOC = 5           Save in Memory as 5       # We have variable with name JOC having value 5 here.
JOC = int(5)      Save in Memory as 5       # Here Variable JOC holding integer value of 5. 
JOC = flot(5)     Save in Memory as 5.0     # Here variable JOC holding flot value of 5
JOC = str(5)      Save in Memory as &quot;5&quot;     # Here variable JOC holding string value of 5 or We can say 5 will be treated as string here.
JOC = complex(5)  Save in Memory as (5+0j)  # Here variable JOC holding complex value of 5.
JOC = oct(5)      Save in Memory as 012     # Here variable JOC holding octal representation of 5.
JOC = hex(5)      Save in Memory as 0xa     # Here variable JOC holding hexadecimal representation of 5
There are many more function available in python. You can convert variable as per your requirement.
&lt;/pre&gt;
[[#TOP]]

==How to execute couple of instructions on console?==
You can execute couple of instructions on console using ;. Write Statement 1;Statement 2;......and then press ''Enter''.
{{#ev:youtube|https://youtu.be/CYQCYvLE22Y|250|right}}









==How to take input from the user?==
We can take input from the user using ''input'' function. For Example : You want the user to input variable ''x'', then write x=input(&quot;Enter the value of x&quot;) and execute. Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNkVLCxZw_jcgyS-bmrIVSP

And when the input you need is of data type other than string. You can do both the input function and data conversion in a single line.
For example:
Consider the program for letting in the patients
'''c=input(&quot;Enter (1/0)&quot;);d=int(c)'''

Instead of using it in two separate lines, combine it into a single line
'''c=int(input(&quot;Enter (1/0)&quot;))'''.

To get two inputs in same line with a space between them split() is used.

a,b=input(&quot;enter a&quot;).split(&quot;enter b&quot;)
----
[[#Top]]

==If statement==
If statement is used to execute set of two contrary statements based on a condition. 

===Syntax===
If (Condition):
    Statement 1
else:
    Statement 2

If 'Condition' is true then 'Statement 1' will be executed otherwise 'Statement 2' will be executed.

Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNhHmg3SkK1uiutigcAbH9K

==Loops==
[[#Top]]&lt;br&gt;
Loops in a programming languages are used to execute set of repetitive statements. For loop and while loop are used extensively to execute a set of looping instructions.

=== For loop Syntax ===
&lt;pre&gt;
for i in range(10): 
    Statement
&lt;/pre&gt;
range(10) indicate that values 0 to 9 will be assigned to the variable i and for each value of i the Statement will be executed, e.g.
&lt;pre&gt;
for i in range(10): 
    print(i)
&lt;/pre&gt;
Output will be
&lt;pre&gt;
0
1
2
3
4
5
6
7
8
9
&lt;/pre&gt;

[[#Top]]

=== While loop Syntax ===
&lt;pre&gt;
intialisation

while(condition):
   Statement
   increment/decrement
&lt;/pre&gt;
e.g.
&lt;pre&gt;
#initialization
i=0
while(i&lt;10): 
    print(i)
    i=i+1
&lt;/pre&gt;
Output will be:
&lt;pre&gt;
0
1
2
3
4
5
6
7
8
9
&lt;/pre&gt;
Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNbl5jkVrrw1E5XSvm3GiCI

[[#TOP]]
==Importance of Indentation in Python==
Indentation is used to indicate to what block of statements belong. Indentation of blocks convey program structure in Python. Indentation in Python is used to refer a group/block of code/statements. In C++ we use { and } (curly brackets) to group a set of statements. But in Python, there are no such brackets used. Instead of such brackets used in other programming languages, we use indentation in Python.
Use tabs,instead of spaces for ease of writing code.

Wrong indentation can lead to syntax error, or makes your output wrong for your logic e.g.
&lt;pre&gt;
#IndentationError: expected an indented block
i=-1
if i&lt;0:
print(&quot;Test successful&quot;)#Wrong indentation 
else:    
    print(&quot;Test failed&quot;)
#Output: IndentationError: expected an indented block
&lt;/pre&gt;
---
&lt;pre&gt;
#Properly Indented code:
i=-1
if i&lt;0:
    print(&quot;Test successful&quot;)#Wrong indentation
else:    
    print(&quot;Test failed&quot;)
#Output:Test successful
&lt;/pre&gt;
---
Logic changed, so output changed, with improper indentation, e.g.
---
&lt;h3&gt;Code : 1&lt;/h3&gt;
&lt;pre&gt;
sum=0
for i in range(5):
    for j in range(5):
        sum+=i
print(sum, end=&quot; &quot;)
#Output: 50
&lt;/pre&gt;
        
&lt;h3&gt;Code : 2&lt;/h3&gt;
&lt;pre&gt;
for i in range(5):
    for j in range(5):
        print(end=&quot; &quot;)
    sum+=i
print(sum, end=&quot; &quot;)
#Output:                          10
&lt;/pre&gt;
{{#ev:youtube|https://youtu.be/pmavoW419Yc|250|right}}&lt;br&gt;

[[#Top]]

==Spyder IDE Black Screen Solution==

----

 This issue is because of ''Help'' screen which is by default open. 
 We need to close it. So here's how you do it-


===Method 1:===

Step 1-    Try by closing current pane for that,  &quot;''press ctrl+shift+F4''&quot;  wait for few seconds things will appear on screen.

Step 2-    If it so than on menu bar go to ''view &gt; panes &gt; help'' unchecked &quot;''Help''&quot; option.

Step 3-    Make sure that &quot;''Help''&quot; under ''view &gt; panes'' is permanently unchecked. And ''Editor, Ipython console, Variable explorer''  are checked. 


===Method 2:===

Step 1-    Open spyder.

Step 2-   On that black screen randomly ''Left click'' on spyder &quot;''Menu bar''&quot; area you will get menu drop downs, You have to find Drop down with &quot;''Panes''&quot; option.

Step 3-   On &quot;''Panes''&quot; drop down unchecked the &quot;''Help''&quot;.

Step 4-   Wait for few seconds Spyder view will appear.

Step 5 -  Make sure that ''&quot;Help&quot;'' under view&gt;panes is permanently unchecked. And ''Editor, Ipython console, variable explorer'' are checked.


[[#Top]]</text>
      <sha1>cecbak4qttmzbbcoc58374j1o309qzf</sha1>
    </revision>
    <revision>
      <id>3576</id>
      <parentid>3575</parentid>
      <timestamp>2018-09-28T02:59:15Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* Introduction to Python */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="12503">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_2 Contributors of this page]
==Introduction to Python==
Python is a widely used programming language which allows programmers to write the program in fewer lines of code. It was designed by ''Guido van Rossum'' in 1991. Python uses an interpreter instead of compiler.Basically, the main difference between compiler and interpreter is that the compiler takes the code as 'whole' and compiles it. for example, in C language and on the other side in interpreter. For example: languages like Python. It interprets the written code 'line by line', and if somewhere error is found. It stops interpreting the code from there itself. Here, in our course we will be using Spyder IDE. Spyder is an integrated development environment with editing options to assist the programmers in writing programs. Spyder IDE is divided into two panes, one is console and other one is where program is written.

Python works on different platforms (Windows, Mac, Linux, Raspberry Pi, etc).
Python has a simple syntax similar to the English language.
Python has syntax that allows developers to write programs with fewer lines than some other programming languages.
Python runs on an interpreter system, meaning that code can be executed as soon as it is written. This means that prototyping can be very quick.
Python can be treated in a procedural way, an object-orientated way or a functional way.

==Installing Anaconda==
[[#Top]]
This article is all about installing and troubleshooting Anaconda and Spyder on different platforms.

===Windows===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#windows Download Link]. Make sure that you download the version compatible to your operating system architecture. If you have a 64 bit OS then you can download either 64 bit of 32 bit, but if you have 32 bit OS then you should download the 32 bit version only.

Step 2 -&gt; Double click on the .exe file that you downloaded just now and follow the instructions. If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open cmd (go to Start -&gt; then type cmd in the search bar and hit enter). There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

===Mac===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#macos Download Link].

Step 2 -&gt; Double click on the .pkg file that you just downloaded. If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

===Linux===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#linux Download Link].

Step 2 -&gt; Go to the folder where you downloaded the .sh file and type following command 

  '''bash Anaconda-latest-Linux-x86_64.sh'''

If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

==Troubleshooting Spyder==

[[#Top]]

In most of the cases, it happens that Spyder is already running and you have initiated one more instance of it. Please make sure that spyder is not running already.
If you are on Linux OS, please launch spyder through terminal. Just open the terminal and type '''spyder''' and it will launch. When Spyder opens, make sure you see Anaconda with the version written on the Ipython console. If not, try changing the path of your anaconda. Follow these steps according to your OS version.

====Windows====
[https://stackoverflow.com/questions/44597662/conda-command-is-not-recognized-on-windows-10 Click Here]

====Linux====
[https://stackoverflow.com/questions/18675907/how-to-run-conda Click Here]

====Mac====
[https://stackoverflow.com/questions/35246386/conda-command-not-found Click Here]

In most of the cases relaunching Spyder works.
A more general Troubleshoot is present [https://github.com/spyder-ide/spyder/wiki/Troubleshooting-Guide-and-FAQ Here]

==How to run a program in Spyder IDE?==
Go to Run on the menu bar. Click Run-&gt;Run.

[[#TOP]]
==Print statements==
Print statements help to display output on console. 
{{#ev:youtube|https://youtu.be/gECkqaOwyt0|250|right}}

===Syntax===
print()

===How to print a message?===
In order to print a message in Python, write print(&quot;message&quot;).
Single, double, triple quote can be used print()

'''Example:'''

'''Single Quote'''
print('Hello')  
Output: Hello

'''Double Quote'''
print(&quot;Hello&quot;)  
Output: Hello

'''Quote within quote'''
print('Is &quot;Ram&quot; a good boy?')  
Output: Is &quot;Ram&quot; a good boy?

[[#TOP]]
==Escape sequences with strings==

We can use escape sequence within strings to make output more presentable.

'''\n'''  : It will move to next line.

'''\t'''  : It will add tab space(5space)

'''\a'''  : It will play system sound once.

'''Example:'''

Print(&quot;Hi, \n How are you?&quot;)

Output: 

Hi,

How are you?

Print(&quot;Hi, \t How are you?&quot;)

Output: 

Hi, &lt;5 spaces&gt; How are you?

[[File:Escape_Sequence.jpg]]

==Variables==
[[#Top]]
&lt;pre&gt;
Variables are used to store some values. Values can be strings, integers or decimal values.  

Variable Name Rules:
1. Variable name should start with letter or underscore. Variable name cant start with number.
Example:
Valid: JOC, WIKI, JOC_WIKI, _JOC
Invalid: 1JOC, 123WIKI, 0_WIKI

2. Remaining letter other then first one can contain number, underscore.
Example:
JOC1234, WIKI012_1332

3. Variable names are case sensitivities.
Example:
JOC, jOC, joC all are different varibles. 

&lt;/pre&gt;
{{#ev:youtube|https://youtu.be/60iAXH1sm-Y|250|right}}
===How to print a variable?===
In order to print the value of a variable in python, first initialize the variable and then call it where ever you wanna use it. 
&lt;pre&gt;print(variable_name)&lt;/pre&gt;

&lt;pre&gt;For example :
x=2                # x is viable here
print(x)           # calling variable x with print function

a = &quot;JOC&quot;          # a is variable here
b = &quot;_WIKI&quot;        # b is variable here
c = a + b          # c is variable here which will provide addition of variable a and b
&lt;/pre&gt;

===Some facts about Variables===
* If you want to print variable name with a message, you can use , operator. For example : I want to print Hello Simran and Simran has been stored in a variable called ''name''.
  name=&quot;Simran&quot;
  print(&quot;Hello&quot;,name)
* If you change the value of a variable, it will store the latest value. For example :
  name=&quot;Simran&quot;
  name=&quot;Amit&quot;
  If you will execute the command ''print(name)'', Amit will be displayed.
* You can perform operations like addition, subtraction etc only on integral variables.

===Variables Types and Conversion===
&lt;pre&gt;Variable can be decimal, integer and decimal. And they can be inter covered with the help of conversion functions.

Example:
JOC = 5           Save in Memory as 5       # We have variable with name JOC having value 5 here.
JOC = int(5)      Save in Memory as 5       # Here Variable JOC holding integer value of 5. 
JOC = flot(5)     Save in Memory as 5.0     # Here variable JOC holding flot value of 5
JOC = str(5)      Save in Memory as &quot;5&quot;     # Here variable JOC holding string value of 5 or We can say 5 will be treated as string here.
JOC = complex(5)  Save in Memory as (5+0j)  # Here variable JOC holding complex value of 5.
JOC = oct(5)      Save in Memory as 012     # Here variable JOC holding octal representation of 5.
JOC = hex(5)      Save in Memory as 0xa     # Here variable JOC holding hexadecimal representation of 5
There are many more function available in python. You can convert variable as per your requirement.
&lt;/pre&gt;
[[#TOP]]

==How to execute couple of instructions on console?==
You can execute couple of instructions on console using ;. Write Statement 1;Statement 2;......and then press ''Enter''.
{{#ev:youtube|https://youtu.be/CYQCYvLE22Y|250|right}}









==How to take input from the user?==
We can take input from the user using ''input'' function. For Example : You want the user to input variable ''x'', then write x=input(&quot;Enter the value of x&quot;) and execute. Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNkVLCxZw_jcgyS-bmrIVSP

And when the input you need is of data type other than string. You can do both the input function and data conversion in a single line.
For example:
Consider the program for letting in the patients
'''c=input(&quot;Enter (1/0)&quot;);d=int(c)'''

Instead of using it in two separate lines, combine it into a single line
'''c=int(input(&quot;Enter (1/0)&quot;))'''.

To get two inputs in same line with a space between them split() is used.

a,b=input(&quot;enter a&quot;).split(&quot;enter b&quot;)
----
[[#Top]]

==If statement==
If statement is used to execute set of two contrary statements based on a condition. 

===Syntax===
If (Condition):
    Statement 1
else:
    Statement 2

If 'Condition' is true then 'Statement 1' will be executed otherwise 'Statement 2' will be executed.

Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNhHmg3SkK1uiutigcAbH9K

==Loops==
[[#Top]]&lt;br&gt;
Loops in a programming languages are used to execute set of repetitive statements. For loop and while loop are used extensively to execute a set of looping instructions.

=== For loop Syntax ===
&lt;pre&gt;
for i in range(10): 
    Statement
&lt;/pre&gt;
range(10) indicate that values 0 to 9 will be assigned to the variable i and for each value of i the Statement will be executed, e.g.
&lt;pre&gt;
for i in range(10): 
    print(i)
&lt;/pre&gt;
Output will be
&lt;pre&gt;
0
1
2
3
4
5
6
7
8
9
&lt;/pre&gt;

[[#Top]]

=== While loop Syntax ===
&lt;pre&gt;
intialisation

while(condition):
   Statement
   increment/decrement
&lt;/pre&gt;
e.g.
&lt;pre&gt;
#initialization
i=0
while(i&lt;10): 
    print(i)
    i=i+1
&lt;/pre&gt;
Output will be:
&lt;pre&gt;
0
1
2
3
4
5
6
7
8
9
&lt;/pre&gt;
Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNbl5jkVrrw1E5XSvm3GiCI

[[#TOP]]
==Importance of Indentation in Python==
Indentation is used to indicate to what block of statements belong. Indentation of blocks convey program structure in Python. Indentation in Python is used to refer a group/block of code/statements. In C++ we use { and } (curly brackets) to group a set of statements. But in Python, there are no such brackets used. Instead of such brackets used in other programming languages, we use indentation in Python.
Use tabs,instead of spaces for ease of writing code.

Wrong indentation can lead to syntax error, or makes your output wrong for your logic e.g.
&lt;pre&gt;
#IndentationError: expected an indented block
i=-1
if i&lt;0:
print(&quot;Test successful&quot;)#Wrong indentation 
else:    
    print(&quot;Test failed&quot;)
#Output: IndentationError: expected an indented block
&lt;/pre&gt;
---
&lt;pre&gt;
#Properly Indented code:
i=-1
if i&lt;0:
    print(&quot;Test successful&quot;)#Wrong indentation
else:    
    print(&quot;Test failed&quot;)
#Output:Test successful
&lt;/pre&gt;
---
Logic changed, so output changed, with improper indentation, e.g.
---
&lt;h3&gt;Code : 1&lt;/h3&gt;
&lt;pre&gt;
sum=0
for i in range(5):
    for j in range(5):
        sum+=i
print(sum, end=&quot; &quot;)
#Output: 50
&lt;/pre&gt;
        
&lt;h3&gt;Code : 2&lt;/h3&gt;
&lt;pre&gt;
for i in range(5):
    for j in range(5):
        print(end=&quot; &quot;)
    sum+=i
print(sum, end=&quot; &quot;)
#Output:                          10
&lt;/pre&gt;
{{#ev:youtube|https://youtu.be/pmavoW419Yc|250|right}}&lt;br&gt;

[[#Top]]

==Spyder IDE Black Screen Solution==

----

 This issue is because of ''Help'' screen which is by default open. 
 We need to close it. So here's how you do it-


===Method 1:===

Step 1-    Try by closing current pane for that,  &quot;''press ctrl+shift+F4''&quot;  wait for few seconds things will appear on screen.

Step 2-    If it so than on menu bar go to ''view &gt; panes &gt; help'' unchecked &quot;''Help''&quot; option.

Step 3-    Make sure that &quot;''Help''&quot; under ''view &gt; panes'' is permanently unchecked. And ''Editor, Ipython console, Variable explorer''  are checked. 


===Method 2:===

Step 1-    Open spyder.

Step 2-   On that black screen randomly ''Left click'' on spyder &quot;''Menu bar''&quot; area you will get menu drop downs, You have to find Drop down with &quot;''Panes''&quot; option.

Step 3-   On &quot;''Panes''&quot; drop down unchecked the &quot;''Help''&quot;.

Step 4-   Wait for few seconds Spyder view will appear.

Step 5 -  Make sure that ''&quot;Help&quot;'' under view&gt;panes is permanently unchecked. And ''Editor, Ipython console, variable explorer'' are checked.


[[#Top]]</text>
      <sha1>6do5arbysm5chjcyzdqbah7f3hd90ey</sha1>
    </revision>
    <revision>
      <id>3578</id>
      <parentid>3576</parentid>
      <timestamp>2018-09-28T03:09:32Z</timestamp>
      <contributor>
        <username>Sachinkr</username>
        <id>1743</id>
      </contributor>
      <comment>/* Variables Types and Conversion */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="12504">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_2 Contributors of this page]
==Introduction to Python==
Python is a widely used programming language which allows programmers to write the program in fewer lines of code. It was designed by ''Guido van Rossum'' in 1991. Python uses an interpreter instead of compiler.Basically, the main difference between compiler and interpreter is that the compiler takes the code as 'whole' and compiles it. for example, in C language and on the other side in interpreter. For example: languages like Python. It interprets the written code 'line by line', and if somewhere error is found. It stops interpreting the code from there itself. Here, in our course we will be using Spyder IDE. Spyder is an integrated development environment with editing options to assist the programmers in writing programs. Spyder IDE is divided into two panes, one is console and other one is where program is written.

Python works on different platforms (Windows, Mac, Linux, Raspberry Pi, etc).
Python has a simple syntax similar to the English language.
Python has syntax that allows developers to write programs with fewer lines than some other programming languages.
Python runs on an interpreter system, meaning that code can be executed as soon as it is written. This means that prototyping can be very quick.
Python can be treated in a procedural way, an object-orientated way or a functional way.

==Installing Anaconda==
[[#Top]]
This article is all about installing and troubleshooting Anaconda and Spyder on different platforms.

===Windows===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#windows Download Link]. Make sure that you download the version compatible to your operating system architecture. If you have a 64 bit OS then you can download either 64 bit of 32 bit, but if you have 32 bit OS then you should download the 32 bit version only.

Step 2 -&gt; Double click on the .exe file that you downloaded just now and follow the instructions. If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open cmd (go to Start -&gt; then type cmd in the search bar and hit enter). There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

===Mac===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#macos Download Link].

Step 2 -&gt; Double click on the .pkg file that you just downloaded. If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

===Linux===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#linux Download Link].

Step 2 -&gt; Go to the folder where you downloaded the .sh file and type following command 

  '''bash Anaconda-latest-Linux-x86_64.sh'''

If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

==Troubleshooting Spyder==

[[#Top]]

In most of the cases, it happens that Spyder is already running and you have initiated one more instance of it. Please make sure that spyder is not running already.
If you are on Linux OS, please launch spyder through terminal. Just open the terminal and type '''spyder''' and it will launch. When Spyder opens, make sure you see Anaconda with the version written on the Ipython console. If not, try changing the path of your anaconda. Follow these steps according to your OS version.

====Windows====
[https://stackoverflow.com/questions/44597662/conda-command-is-not-recognized-on-windows-10 Click Here]

====Linux====
[https://stackoverflow.com/questions/18675907/how-to-run-conda Click Here]

====Mac====
[https://stackoverflow.com/questions/35246386/conda-command-not-found Click Here]

In most of the cases relaunching Spyder works.
A more general Troubleshoot is present [https://github.com/spyder-ide/spyder/wiki/Troubleshooting-Guide-and-FAQ Here]

==How to run a program in Spyder IDE?==
Go to Run on the menu bar. Click Run-&gt;Run.

[[#TOP]]
==Print statements==
Print statements help to display output on console. 
{{#ev:youtube|https://youtu.be/gECkqaOwyt0|250|right}}

===Syntax===
print()

===How to print a message?===
In order to print a message in Python, write print(&quot;message&quot;).
Single, double, triple quote can be used print()

'''Example:'''

'''Single Quote'''
print('Hello')  
Output: Hello

'''Double Quote'''
print(&quot;Hello&quot;)  
Output: Hello

'''Quote within quote'''
print('Is &quot;Ram&quot; a good boy?')  
Output: Is &quot;Ram&quot; a good boy?

[[#TOP]]
==Escape sequences with strings==

We can use escape sequence within strings to make output more presentable.

'''\n'''  : It will move to next line.

'''\t'''  : It will add tab space(5space)

'''\a'''  : It will play system sound once.

'''Example:'''

Print(&quot;Hi, \n How are you?&quot;)

Output: 

Hi,

How are you?

Print(&quot;Hi, \t How are you?&quot;)

Output: 

Hi, &lt;5 spaces&gt; How are you?

[[File:Escape_Sequence.jpg]]

==Variables==
[[#Top]]
&lt;pre&gt;
Variables are used to store some values. Values can be strings, integers or decimal values.  

Variable Name Rules:
1. Variable name should start with letter or underscore. Variable name cant start with number.
Example:
Valid: JOC, WIKI, JOC_WIKI, _JOC
Invalid: 1JOC, 123WIKI, 0_WIKI

2. Remaining letter other then first one can contain number, underscore.
Example:
JOC1234, WIKI012_1332

3. Variable names are case sensitivities.
Example:
JOC, jOC, joC all are different varibles. 

&lt;/pre&gt;
{{#ev:youtube|https://youtu.be/60iAXH1sm-Y|250|right}}
===How to print a variable?===
In order to print the value of a variable in python, first initialize the variable and then call it where ever you wanna use it. 
&lt;pre&gt;print(variable_name)&lt;/pre&gt;

&lt;pre&gt;For example :
x=2                # x is viable here
print(x)           # calling variable x with print function

a = &quot;JOC&quot;          # a is variable here
b = &quot;_WIKI&quot;        # b is variable here
c = a + b          # c is variable here which will provide addition of variable a and b
&lt;/pre&gt;

===Some facts about Variables===
* If you want to print variable name with a message, you can use , operator. For example : I want to print Hello Simran and Simran has been stored in a variable called ''name''.
  name=&quot;Simran&quot;
  print(&quot;Hello&quot;,name)
* If you change the value of a variable, it will store the latest value. For example :
  name=&quot;Simran&quot;
  name=&quot;Amit&quot;
  If you will execute the command ''print(name)'', Amit will be displayed.
* You can perform operations like addition, subtraction etc only on integral variables.

===Variables Types and Conversion===
&lt;pre&gt;Variable can be decimal, integer and decimal. And they can be inter covered with the help of conversion functions.

Example:
JOC = 5           Save in Memory as 5       # We have variable with name JOC having value 5 here.
JOC = int(5)      Save in Memory as 5       # Here Variable JOC holding integer value of 5. 
JOC = flot(5)     Save in Memory as 5.0     # Here variable JOC holding flot value of 5
JOC = str(5)      Save in Memory as &quot;5&quot;     # Here variable JOC holding string value of 5 or We can say 5 will be treated as string here.
JOC = complex(5)  Save in Memory as (5+0j)  # Here variable JOC holding complex value of 5.
JOC = oct(5)      Save in Memory as 012     # Here variable JOC holding octal representation of 5.
JOC = hex(5)      Save in Memory as 0xa     # Here variable JOC holding hexadecimal representation of 5

There are many more function available in python. You can convert variable as per your requirement.
&lt;/pre&gt;
[[#TOP]]

==How to execute couple of instructions on console?==
You can execute couple of instructions on console using ;. Write Statement 1;Statement 2;......and then press ''Enter''.
{{#ev:youtube|https://youtu.be/CYQCYvLE22Y|250|right}}









==How to take input from the user?==
We can take input from the user using ''input'' function. For Example : You want the user to input variable ''x'', then write x=input(&quot;Enter the value of x&quot;) and execute. Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNkVLCxZw_jcgyS-bmrIVSP

And when the input you need is of data type other than string. You can do both the input function and data conversion in a single line.
For example:
Consider the program for letting in the patients
'''c=input(&quot;Enter (1/0)&quot;);d=int(c)'''

Instead of using it in two separate lines, combine it into a single line
'''c=int(input(&quot;Enter (1/0)&quot;))'''.

To get two inputs in same line with a space between them split() is used.

a,b=input(&quot;enter a&quot;).split(&quot;enter b&quot;)
----
[[#Top]]

==If statement==
If statement is used to execute set of two contrary statements based on a condition. 

===Syntax===
If (Condition):
    Statement 1
else:
    Statement 2

If 'Condition' is true then 'Statement 1' will be executed otherwise 'Statement 2' will be executed.

Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNhHmg3SkK1uiutigcAbH9K

==Loops==
[[#Top]]&lt;br&gt;
Loops in a programming languages are used to execute set of repetitive statements. For loop and while loop are used extensively to execute a set of looping instructions.

=== For loop Syntax ===
&lt;pre&gt;
for i in range(10): 
    Statement
&lt;/pre&gt;
range(10) indicate that values 0 to 9 will be assigned to the variable i and for each value of i the Statement will be executed, e.g.
&lt;pre&gt;
for i in range(10): 
    print(i)
&lt;/pre&gt;
Output will be
&lt;pre&gt;
0
1
2
3
4
5
6
7
8
9
&lt;/pre&gt;

[[#Top]]

=== While loop Syntax ===
&lt;pre&gt;
intialisation

while(condition):
   Statement
   increment/decrement
&lt;/pre&gt;
e.g.
&lt;pre&gt;
#initialization
i=0
while(i&lt;10): 
    print(i)
    i=i+1
&lt;/pre&gt;
Output will be:
&lt;pre&gt;
0
1
2
3
4
5
6
7
8
9
&lt;/pre&gt;
Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNbl5jkVrrw1E5XSvm3GiCI

[[#TOP]]
==Importance of Indentation in Python==
Indentation is used to indicate to what block of statements belong. Indentation of blocks convey program structure in Python. Indentation in Python is used to refer a group/block of code/statements. In C++ we use { and } (curly brackets) to group a set of statements. But in Python, there are no such brackets used. Instead of such brackets used in other programming languages, we use indentation in Python.
Use tabs,instead of spaces for ease of writing code.

Wrong indentation can lead to syntax error, or makes your output wrong for your logic e.g.
&lt;pre&gt;
#IndentationError: expected an indented block
i=-1
if i&lt;0:
print(&quot;Test successful&quot;)#Wrong indentation 
else:    
    print(&quot;Test failed&quot;)
#Output: IndentationError: expected an indented block
&lt;/pre&gt;
---
&lt;pre&gt;
#Properly Indented code:
i=-1
if i&lt;0:
    print(&quot;Test successful&quot;)#Wrong indentation
else:    
    print(&quot;Test failed&quot;)
#Output:Test successful
&lt;/pre&gt;
---
Logic changed, so output changed, with improper indentation, e.g.
---
&lt;h3&gt;Code : 1&lt;/h3&gt;
&lt;pre&gt;
sum=0
for i in range(5):
    for j in range(5):
        sum+=i
print(sum, end=&quot; &quot;)
#Output: 50
&lt;/pre&gt;
        
&lt;h3&gt;Code : 2&lt;/h3&gt;
&lt;pre&gt;
for i in range(5):
    for j in range(5):
        print(end=&quot; &quot;)
    sum+=i
print(sum, end=&quot; &quot;)
#Output:                          10
&lt;/pre&gt;
{{#ev:youtube|https://youtu.be/pmavoW419Yc|250|right}}&lt;br&gt;

[[#Top]]

==Spyder IDE Black Screen Solution==

----

 This issue is because of ''Help'' screen which is by default open. 
 We need to close it. So here's how you do it-


===Method 1:===

Step 1-    Try by closing current pane for that,  &quot;''press ctrl+shift+F4''&quot;  wait for few seconds things will appear on screen.

Step 2-    If it so than on menu bar go to ''view &gt; panes &gt; help'' unchecked &quot;''Help''&quot; option.

Step 3-    Make sure that &quot;''Help''&quot; under ''view &gt; panes'' is permanently unchecked. And ''Editor, Ipython console, Variable explorer''  are checked. 


===Method 2:===

Step 1-    Open spyder.

Step 2-   On that black screen randomly ''Left click'' on spyder &quot;''Menu bar''&quot; area you will get menu drop downs, You have to find Drop down with &quot;''Panes''&quot; option.

Step 3-   On &quot;''Panes''&quot; drop down unchecked the &quot;''Help''&quot;.

Step 4-   Wait for few seconds Spyder view will appear.

Step 5 -  Make sure that ''&quot;Help&quot;'' under view&gt;panes is permanently unchecked. And ''Editor, Ipython console, variable explorer'' are checked.


[[#Top]]</text>
      <sha1>13w6jr4gr9we80bzibmpl707e2q9ry3</sha1>
    </revision>
    <revision>
      <id>3583</id>
      <parentid>3578</parentid>
      <timestamp>2018-09-28T03:19:40Z</timestamp>
      <contributor>
        <username>Sachinkr</username>
        <id>1743</id>
      </contributor>
      <comment>/* Variables Types and Conversion */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="12758">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_2 Contributors of this page]
==Introduction to Python==
Python is a widely used programming language which allows programmers to write the program in fewer lines of code. It was designed by ''Guido van Rossum'' in 1991. Python uses an interpreter instead of compiler.Basically, the main difference between compiler and interpreter is that the compiler takes the code as 'whole' and compiles it. for example, in C language and on the other side in interpreter. For example: languages like Python. It interprets the written code 'line by line', and if somewhere error is found. It stops interpreting the code from there itself. Here, in our course we will be using Spyder IDE. Spyder is an integrated development environment with editing options to assist the programmers in writing programs. Spyder IDE is divided into two panes, one is console and other one is where program is written.

Python works on different platforms (Windows, Mac, Linux, Raspberry Pi, etc).
Python has a simple syntax similar to the English language.
Python has syntax that allows developers to write programs with fewer lines than some other programming languages.
Python runs on an interpreter system, meaning that code can be executed as soon as it is written. This means that prototyping can be very quick.
Python can be treated in a procedural way, an object-orientated way or a functional way.

==Installing Anaconda==
[[#Top]]
This article is all about installing and troubleshooting Anaconda and Spyder on different platforms.

===Windows===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#windows Download Link]. Make sure that you download the version compatible to your operating system architecture. If you have a 64 bit OS then you can download either 64 bit of 32 bit, but if you have 32 bit OS then you should download the 32 bit version only.

Step 2 -&gt; Double click on the .exe file that you downloaded just now and follow the instructions. If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open cmd (go to Start -&gt; then type cmd in the search bar and hit enter). There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

===Mac===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#macos Download Link].

Step 2 -&gt; Double click on the .pkg file that you just downloaded. If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

===Linux===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#linux Download Link].

Step 2 -&gt; Go to the folder where you downloaded the .sh file and type following command 

  '''bash Anaconda-latest-Linux-x86_64.sh'''

If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

==Troubleshooting Spyder==

[[#Top]]

In most of the cases, it happens that Spyder is already running and you have initiated one more instance of it. Please make sure that spyder is not running already.
If you are on Linux OS, please launch spyder through terminal. Just open the terminal and type '''spyder''' and it will launch. When Spyder opens, make sure you see Anaconda with the version written on the Ipython console. If not, try changing the path of your anaconda. Follow these steps according to your OS version.

====Windows====
[https://stackoverflow.com/questions/44597662/conda-command-is-not-recognized-on-windows-10 Click Here]

====Linux====
[https://stackoverflow.com/questions/18675907/how-to-run-conda Click Here]

====Mac====
[https://stackoverflow.com/questions/35246386/conda-command-not-found Click Here]

In most of the cases relaunching Spyder works.
A more general Troubleshoot is present [https://github.com/spyder-ide/spyder/wiki/Troubleshooting-Guide-and-FAQ Here]

==How to run a program in Spyder IDE?==
Go to Run on the menu bar. Click Run-&gt;Run.

[[#TOP]]
==Print statements==
Print statements help to display output on console. 
{{#ev:youtube|https://youtu.be/gECkqaOwyt0|250|right}}

===Syntax===
print()

===How to print a message?===
In order to print a message in Python, write print(&quot;message&quot;).
Single, double, triple quote can be used print()

'''Example:'''

'''Single Quote'''
print('Hello')  
Output: Hello

'''Double Quote'''
print(&quot;Hello&quot;)  
Output: Hello

'''Quote within quote'''
print('Is &quot;Ram&quot; a good boy?')  
Output: Is &quot;Ram&quot; a good boy?

[[#TOP]]
==Escape sequences with strings==

We can use escape sequence within strings to make output more presentable.

'''\n'''  : It will move to next line.

'''\t'''  : It will add tab space(5space)

'''\a'''  : It will play system sound once.

'''Example:'''

Print(&quot;Hi, \n How are you?&quot;)

Output: 

Hi,

How are you?

Print(&quot;Hi, \t How are you?&quot;)

Output: 

Hi, &lt;5 spaces&gt; How are you?

[[File:Escape_Sequence.jpg]]

==Variables==
[[#Top]]
&lt;pre&gt;
Variables are used to store some values. Values can be strings, integers or decimal values.  

Variable Name Rules:
1. Variable name should start with letter or underscore. Variable name cant start with number.
Example:
Valid: JOC, WIKI, JOC_WIKI, _JOC
Invalid: 1JOC, 123WIKI, 0_WIKI

2. Remaining letter other then first one can contain number, underscore.
Example:
JOC1234, WIKI012_1332

3. Variable names are case sensitivities.
Example:
JOC, jOC, joC all are different varibles. 

&lt;/pre&gt;
{{#ev:youtube|https://youtu.be/60iAXH1sm-Y|250|right}}
===How to print a variable?===
In order to print the value of a variable in python, first initialize the variable and then call it where ever you wanna use it. 
&lt;pre&gt;print(variable_name)&lt;/pre&gt;

&lt;pre&gt;For example :
x=2                # x is viable here
print(x)           # calling variable x with print function

a = &quot;JOC&quot;          # a is variable here
b = &quot;_WIKI&quot;        # b is variable here
c = a + b          # c is variable here which will provide addition of variable a and b
&lt;/pre&gt;

===Some facts about Variables===
* If you want to print variable name with a message, you can use , operator. For example : I want to print Hello Simran and Simran has been stored in a variable called ''name''.
  name=&quot;Simran&quot;
  print(&quot;Hello&quot;,name)
* If you change the value of a variable, it will store the latest value. For example :
  name=&quot;Simran&quot;
  name=&quot;Amit&quot;
  If you will execute the command ''print(name)'', Amit will be displayed.
* You can perform operations like addition, subtraction etc only on integral variables.

===Variables Types and Conversion===
&lt;pre&gt;Variable can be decimal, integer and decimal. And they can be inter covered with the help of conversion functions.

Example:
JOC = 5           Save in Memory as 5       # We have variable with name JOC having value 5 here.
JOC = int(5)      Save in Memory as 5       # Here Variable JOC holding integer value of 5. 
JOC = flot(5)     Save in Memory as 5.0     # Here variable JOC holding flot value of 5
JOC = str(5)      Save in Memory as &quot;5&quot;     # Here variable JOC holding string value of 5 or We can say 5 will be treated as string here.
JOC = complex(5)  Save in Memory as (5+0j)  # Here variable JOC holding complex value of 5.
JOC = oct(5)      Save in Memory as 012     # Here variable JOC holding octal representation of 5.
JOC = hex(5)      Save in Memory as 0xa     # Here variable JOC holding hexadecimal representation of 5

There are many more function available in python. You can convert variable as per your requirement.
&lt;/pre&gt;

&lt;h1 style='color:black;font-family:Calibri;font-size:14.0pt;font-weight:800;
font-style:normal'&gt;Conversion Table with Eample&lt;/h1&gt;

&lt;table border=0 cellpadding=0 cellspacing=0 width=656 style='border-collapse:
 collapse;table-layout:fixed;width:492pt'&gt;

[[#TOP]]

==How to execute couple of instructions on console?==
You can execute couple of instructions on console using ;. Write Statement 1;Statement 2;......and then press ''Enter''.
{{#ev:youtube|https://youtu.be/CYQCYvLE22Y|250|right}}









==How to take input from the user?==
We can take input from the user using ''input'' function. For Example : You want the user to input variable ''x'', then write x=input(&quot;Enter the value of x&quot;) and execute. Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNkVLCxZw_jcgyS-bmrIVSP

And when the input you need is of data type other than string. You can do both the input function and data conversion in a single line.
For example:
Consider the program for letting in the patients
'''c=input(&quot;Enter (1/0)&quot;);d=int(c)'''

Instead of using it in two separate lines, combine it into a single line
'''c=int(input(&quot;Enter (1/0)&quot;))'''.

To get two inputs in same line with a space between them split() is used.

a,b=input(&quot;enter a&quot;).split(&quot;enter b&quot;)
----
[[#Top]]

==If statement==
If statement is used to execute set of two contrary statements based on a condition. 

===Syntax===
If (Condition):
    Statement 1
else:
    Statement 2

If 'Condition' is true then 'Statement 1' will be executed otherwise 'Statement 2' will be executed.

Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNhHmg3SkK1uiutigcAbH9K

==Loops==
[[#Top]]&lt;br&gt;
Loops in a programming languages are used to execute set of repetitive statements. For loop and while loop are used extensively to execute a set of looping instructions.

=== For loop Syntax ===
&lt;pre&gt;
for i in range(10): 
    Statement
&lt;/pre&gt;
range(10) indicate that values 0 to 9 will be assigned to the variable i and for each value of i the Statement will be executed, e.g.
&lt;pre&gt;
for i in range(10): 
    print(i)
&lt;/pre&gt;
Output will be
&lt;pre&gt;
0
1
2
3
4
5
6
7
8
9
&lt;/pre&gt;

[[#Top]]

=== While loop Syntax ===
&lt;pre&gt;
intialisation

while(condition):
   Statement
   increment/decrement
&lt;/pre&gt;
e.g.
&lt;pre&gt;
#initialization
i=0
while(i&lt;10): 
    print(i)
    i=i+1
&lt;/pre&gt;
Output will be:
&lt;pre&gt;
0
1
2
3
4
5
6
7
8
9
&lt;/pre&gt;
Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNbl5jkVrrw1E5XSvm3GiCI

[[#TOP]]
==Importance of Indentation in Python==
Indentation is used to indicate to what block of statements belong. Indentation of blocks convey program structure in Python. Indentation in Python is used to refer a group/block of code/statements. In C++ we use { and } (curly brackets) to group a set of statements. But in Python, there are no such brackets used. Instead of such brackets used in other programming languages, we use indentation in Python.
Use tabs,instead of spaces for ease of writing code.

Wrong indentation can lead to syntax error, or makes your output wrong for your logic e.g.
&lt;pre&gt;
#IndentationError: expected an indented block
i=-1
if i&lt;0:
print(&quot;Test successful&quot;)#Wrong indentation 
else:    
    print(&quot;Test failed&quot;)
#Output: IndentationError: expected an indented block
&lt;/pre&gt;
---
&lt;pre&gt;
#Properly Indented code:
i=-1
if i&lt;0:
    print(&quot;Test successful&quot;)#Wrong indentation
else:    
    print(&quot;Test failed&quot;)
#Output:Test successful
&lt;/pre&gt;
---
Logic changed, so output changed, with improper indentation, e.g.
---
&lt;h3&gt;Code : 1&lt;/h3&gt;
&lt;pre&gt;
sum=0
for i in range(5):
    for j in range(5):
        sum+=i
print(sum, end=&quot; &quot;)
#Output: 50
&lt;/pre&gt;
        
&lt;h3&gt;Code : 2&lt;/h3&gt;
&lt;pre&gt;
for i in range(5):
    for j in range(5):
        print(end=&quot; &quot;)
    sum+=i
print(sum, end=&quot; &quot;)
#Output:                          10
&lt;/pre&gt;
{{#ev:youtube|https://youtu.be/pmavoW419Yc|250|right}}&lt;br&gt;

[[#Top]]

==Spyder IDE Black Screen Solution==

----

 This issue is because of ''Help'' screen which is by default open. 
 We need to close it. So here's how you do it-


===Method 1:===

Step 1-    Try by closing current pane for that,  &quot;''press ctrl+shift+F4''&quot;  wait for few seconds things will appear on screen.

Step 2-    If it so than on menu bar go to ''view &gt; panes &gt; help'' unchecked &quot;''Help''&quot; option.

Step 3-    Make sure that &quot;''Help''&quot; under ''view &gt; panes'' is permanently unchecked. And ''Editor, Ipython console, Variable explorer''  are checked. 


===Method 2:===

Step 1-    Open spyder.

Step 2-   On that black screen randomly ''Left click'' on spyder &quot;''Menu bar''&quot; area you will get menu drop downs, You have to find Drop down with &quot;''Panes''&quot; option.

Step 3-   On &quot;''Panes''&quot; drop down unchecked the &quot;''Help''&quot;.

Step 4-   Wait for few seconds Spyder view will appear.

Step 5 -  Make sure that ''&quot;Help&quot;'' under view&gt;panes is permanently unchecked. And ''Editor, Ipython console, variable explorer'' are checked.


[[#Top]]</text>
      <sha1>djvpgc1upzh9hx7s58clbw2w36eg1s7</sha1>
    </revision>
    <revision>
      <id>3584</id>
      <parentid>3583</parentid>
      <timestamp>2018-09-28T03:20:50Z</timestamp>
      <contributor>
        <username>Sachinkr</username>
        <id>1743</id>
      </contributor>
      <comment>/* Variables Types and Conversion */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="13213">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_2 Contributors of this page]
==Introduction to Python==
Python is a widely used programming language which allows programmers to write the program in fewer lines of code. It was designed by ''Guido van Rossum'' in 1991. Python uses an interpreter instead of compiler.Basically, the main difference between compiler and interpreter is that the compiler takes the code as 'whole' and compiles it. for example, in C language and on the other side in interpreter. For example: languages like Python. It interprets the written code 'line by line', and if somewhere error is found. It stops interpreting the code from there itself. Here, in our course we will be using Spyder IDE. Spyder is an integrated development environment with editing options to assist the programmers in writing programs. Spyder IDE is divided into two panes, one is console and other one is where program is written.

Python works on different platforms (Windows, Mac, Linux, Raspberry Pi, etc).
Python has a simple syntax similar to the English language.
Python has syntax that allows developers to write programs with fewer lines than some other programming languages.
Python runs on an interpreter system, meaning that code can be executed as soon as it is written. This means that prototyping can be very quick.
Python can be treated in a procedural way, an object-orientated way or a functional way.

==Installing Anaconda==
[[#Top]]
This article is all about installing and troubleshooting Anaconda and Spyder on different platforms.

===Windows===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#windows Download Link]. Make sure that you download the version compatible to your operating system architecture. If you have a 64 bit OS then you can download either 64 bit of 32 bit, but if you have 32 bit OS then you should download the 32 bit version only.

Step 2 -&gt; Double click on the .exe file that you downloaded just now and follow the instructions. If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open cmd (go to Start -&gt; then type cmd in the search bar and hit enter). There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

===Mac===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#macos Download Link].

Step 2 -&gt; Double click on the .pkg file that you just downloaded. If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

===Linux===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#linux Download Link].

Step 2 -&gt; Go to the folder where you downloaded the .sh file and type following command 

  '''bash Anaconda-latest-Linux-x86_64.sh'''

If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

==Troubleshooting Spyder==

[[#Top]]

In most of the cases, it happens that Spyder is already running and you have initiated one more instance of it. Please make sure that spyder is not running already.
If you are on Linux OS, please launch spyder through terminal. Just open the terminal and type '''spyder''' and it will launch. When Spyder opens, make sure you see Anaconda with the version written on the Ipython console. If not, try changing the path of your anaconda. Follow these steps according to your OS version.

====Windows====
[https://stackoverflow.com/questions/44597662/conda-command-is-not-recognized-on-windows-10 Click Here]

====Linux====
[https://stackoverflow.com/questions/18675907/how-to-run-conda Click Here]

====Mac====
[https://stackoverflow.com/questions/35246386/conda-command-not-found Click Here]

In most of the cases relaunching Spyder works.
A more general Troubleshoot is present [https://github.com/spyder-ide/spyder/wiki/Troubleshooting-Guide-and-FAQ Here]

==How to run a program in Spyder IDE?==
Go to Run on the menu bar. Click Run-&gt;Run.

[[#TOP]]
==Print statements==
Print statements help to display output on console. 
{{#ev:youtube|https://youtu.be/gECkqaOwyt0|250|right}}

===Syntax===
print()

===How to print a message?===
In order to print a message in Python, write print(&quot;message&quot;).
Single, double, triple quote can be used print()

'''Example:'''

'''Single Quote'''
print('Hello')  
Output: Hello

'''Double Quote'''
print(&quot;Hello&quot;)  
Output: Hello

'''Quote within quote'''
print('Is &quot;Ram&quot; a good boy?')  
Output: Is &quot;Ram&quot; a good boy?

[[#TOP]]
==Escape sequences with strings==

We can use escape sequence within strings to make output more presentable.

'''\n'''  : It will move to next line.

'''\t'''  : It will add tab space(5space)

'''\a'''  : It will play system sound once.

'''Example:'''

Print(&quot;Hi, \n How are you?&quot;)

Output: 

Hi,

How are you?

Print(&quot;Hi, \t How are you?&quot;)

Output: 

Hi, &lt;5 spaces&gt; How are you?

[[File:Escape_Sequence.jpg]]

==Variables==
[[#Top]]
&lt;pre&gt;
Variables are used to store some values. Values can be strings, integers or decimal values.  

Variable Name Rules:
1. Variable name should start with letter or underscore. Variable name cant start with number.
Example:
Valid: JOC, WIKI, JOC_WIKI, _JOC
Invalid: 1JOC, 123WIKI, 0_WIKI

2. Remaining letter other then first one can contain number, underscore.
Example:
JOC1234, WIKI012_1332

3. Variable names are case sensitivities.
Example:
JOC, jOC, joC all are different varibles. 

&lt;/pre&gt;
{{#ev:youtube|https://youtu.be/60iAXH1sm-Y|250|right}}
===How to print a variable?===
In order to print the value of a variable in python, first initialize the variable and then call it where ever you wanna use it. 
&lt;pre&gt;print(variable_name)&lt;/pre&gt;

&lt;pre&gt;For example :
x=2                # x is viable here
print(x)           # calling variable x with print function

a = &quot;JOC&quot;          # a is variable here
b = &quot;_WIKI&quot;        # b is variable here
c = a + b          # c is variable here which will provide addition of variable a and b
&lt;/pre&gt;

===Some facts about Variables===
* If you want to print variable name with a message, you can use , operator. For example : I want to print Hello Simran and Simran has been stored in a variable called ''name''.
  name=&quot;Simran&quot;
  print(&quot;Hello&quot;,name)
* If you change the value of a variable, it will store the latest value. For example :
  name=&quot;Simran&quot;
  name=&quot;Amit&quot;
  If you will execute the command ''print(name)'', Amit will be displayed.
* You can perform operations like addition, subtraction etc only on integral variables.

===Variables Types and Conversion===
&lt;pre&gt;Variable can be decimal, integer and decimal. And they can be inter covered with the help of conversion functions.

Example:
JOC = 5           Save in Memory as 5       # We have variable with name JOC having value 5 here.
JOC = int(5)      Save in Memory as 5       # Here Variable JOC holding integer value of 5. 
JOC = flot(5)     Save in Memory as 5.0     # Here variable JOC holding flot value of 5
JOC = str(5)      Save in Memory as &quot;5&quot;     # Here variable JOC holding string value of 5 or We can say 5 will be treated as string here.
JOC = complex(5)  Save in Memory as (5+0j)  # Here variable JOC holding complex value of 5.
JOC = oct(5)      Save in Memory as 012     # Here variable JOC holding octal representation of 5.
JOC = hex(5)      Save in Memory as 0xa     # Here variable JOC holding hexadecimal representation of 5

There are many more function available in python. You can convert variable as per your requirement.
&lt;/pre&gt;


&lt;h1 style='color:black;font-family:Calibri;font-size:14.0pt;font-weight:800;
font-style:normal'&gt;Conversion Table with Eample&lt;/h1&gt;

&lt;table border=0 cellpadding=0 cellspacing=0 width=656 style='border-collapse:
 collapse;table-layout:fixed;width:492pt'&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6624497 width=63 style='height:15.0pt;width:47pt'&gt;Serial
  No&lt;/td&gt;
  &lt;td class=xl6724497 width=77 style='border-left:none;width:58pt'&gt;Function&lt;/td&gt;
  &lt;td class=xl6724497 width=303 style='border-left:none;width:227pt'&gt;Description&lt;/td&gt;
  &lt;td class=xl6724497 width=162 style='border-left:none;width:122pt'&gt;Example&lt;/td&gt;
  &lt;td class=xl6824497 width=51 style='border-left:none;width:38pt'&gt;Output&lt;/td&gt;
 &lt;/tr&gt;

==How to execute couple of instructions on console?==
You can execute couple of instructions on console using ;. Write Statement 1;Statement 2;......and then press ''Enter''.
{{#ev:youtube|https://youtu.be/CYQCYvLE22Y|250|right}}









==How to take input from the user?==
We can take input from the user using ''input'' function. For Example : You want the user to input variable ''x'', then write x=input(&quot;Enter the value of x&quot;) and execute. Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNkVLCxZw_jcgyS-bmrIVSP

And when the input you need is of data type other than string. You can do both the input function and data conversion in a single line.
For example:
Consider the program for letting in the patients
'''c=input(&quot;Enter (1/0)&quot;);d=int(c)'''

Instead of using it in two separate lines, combine it into a single line
'''c=int(input(&quot;Enter (1/0)&quot;))'''.

To get two inputs in same line with a space between them split() is used.

a,b=input(&quot;enter a&quot;).split(&quot;enter b&quot;)
----
[[#Top]]

==If statement==
If statement is used to execute set of two contrary statements based on a condition. 

===Syntax===
If (Condition):
    Statement 1
else:
    Statement 2

If 'Condition' is true then 'Statement 1' will be executed otherwise 'Statement 2' will be executed.

Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNhHmg3SkK1uiutigcAbH9K

==Loops==
[[#Top]]&lt;br&gt;
Loops in a programming languages are used to execute set of repetitive statements. For loop and while loop are used extensively to execute a set of looping instructions.

=== For loop Syntax ===
&lt;pre&gt;
for i in range(10): 
    Statement
&lt;/pre&gt;
range(10) indicate that values 0 to 9 will be assigned to the variable i and for each value of i the Statement will be executed, e.g.
&lt;pre&gt;
for i in range(10): 
    print(i)
&lt;/pre&gt;
Output will be
&lt;pre&gt;
0
1
2
3
4
5
6
7
8
9
&lt;/pre&gt;

[[#Top]]

=== While loop Syntax ===
&lt;pre&gt;
intialisation

while(condition):
   Statement
   increment/decrement
&lt;/pre&gt;
e.g.
&lt;pre&gt;
#initialization
i=0
while(i&lt;10): 
    print(i)
    i=i+1
&lt;/pre&gt;
Output will be:
&lt;pre&gt;
0
1
2
3
4
5
6
7
8
9
&lt;/pre&gt;
Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNbl5jkVrrw1E5XSvm3GiCI

[[#TOP]]
==Importance of Indentation in Python==
Indentation is used to indicate to what block of statements belong. Indentation of blocks convey program structure in Python. Indentation in Python is used to refer a group/block of code/statements. In C++ we use { and } (curly brackets) to group a set of statements. But in Python, there are no such brackets used. Instead of such brackets used in other programming languages, we use indentation in Python.
Use tabs,instead of spaces for ease of writing code.

Wrong indentation can lead to syntax error, or makes your output wrong for your logic e.g.
&lt;pre&gt;
#IndentationError: expected an indented block
i=-1
if i&lt;0:
print(&quot;Test successful&quot;)#Wrong indentation 
else:    
    print(&quot;Test failed&quot;)
#Output: IndentationError: expected an indented block
&lt;/pre&gt;
---
&lt;pre&gt;
#Properly Indented code:
i=-1
if i&lt;0:
    print(&quot;Test successful&quot;)#Wrong indentation
else:    
    print(&quot;Test failed&quot;)
#Output:Test successful
&lt;/pre&gt;
---
Logic changed, so output changed, with improper indentation, e.g.
---
&lt;h3&gt;Code : 1&lt;/h3&gt;
&lt;pre&gt;
sum=0
for i in range(5):
    for j in range(5):
        sum+=i
print(sum, end=&quot; &quot;)
#Output: 50
&lt;/pre&gt;
        
&lt;h3&gt;Code : 2&lt;/h3&gt;
&lt;pre&gt;
for i in range(5):
    for j in range(5):
        print(end=&quot; &quot;)
    sum+=i
print(sum, end=&quot; &quot;)
#Output:                          10
&lt;/pre&gt;
{{#ev:youtube|https://youtu.be/pmavoW419Yc|250|right}}&lt;br&gt;

[[#Top]]

==Spyder IDE Black Screen Solution==

----

 This issue is because of ''Help'' screen which is by default open. 
 We need to close it. So here's how you do it-


===Method 1:===

Step 1-    Try by closing current pane for that,  &quot;''press ctrl+shift+F4''&quot;  wait for few seconds things will appear on screen.

Step 2-    If it so than on menu bar go to ''view &gt; panes &gt; help'' unchecked &quot;''Help''&quot; option.

Step 3-    Make sure that &quot;''Help''&quot; under ''view &gt; panes'' is permanently unchecked. And ''Editor, Ipython console, Variable explorer''  are checked. 


===Method 2:===

Step 1-    Open spyder.

Step 2-   On that black screen randomly ''Left click'' on spyder &quot;''Menu bar''&quot; area you will get menu drop downs, You have to find Drop down with &quot;''Panes''&quot; option.

Step 3-   On &quot;''Panes''&quot; drop down unchecked the &quot;''Help''&quot;.

Step 4-   Wait for few seconds Spyder view will appear.

Step 5 -  Make sure that ''&quot;Help&quot;'' under view&gt;panes is permanently unchecked. And ''Editor, Ipython console, variable explorer'' are checked.


[[#Top]]</text>
      <sha1>ku21a2lvhaw6ldq2ybh0sda62dzkp2t</sha1>
    </revision>
    <revision>
      <id>3585</id>
      <parentid>3584</parentid>
      <timestamp>2018-09-28T03:21:54Z</timestamp>
      <contributor>
        <username>Sachinkr</username>
        <id>1743</id>
      </contributor>
      <comment>/* Variables Types and Conversion */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="13672">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_2 Contributors of this page]
==Introduction to Python==
Python is a widely used programming language which allows programmers to write the program in fewer lines of code. It was designed by ''Guido van Rossum'' in 1991. Python uses an interpreter instead of compiler.Basically, the main difference between compiler and interpreter is that the compiler takes the code as 'whole' and compiles it. for example, in C language and on the other side in interpreter. For example: languages like Python. It interprets the written code 'line by line', and if somewhere error is found. It stops interpreting the code from there itself. Here, in our course we will be using Spyder IDE. Spyder is an integrated development environment with editing options to assist the programmers in writing programs. Spyder IDE is divided into two panes, one is console and other one is where program is written.

Python works on different platforms (Windows, Mac, Linux, Raspberry Pi, etc).
Python has a simple syntax similar to the English language.
Python has syntax that allows developers to write programs with fewer lines than some other programming languages.
Python runs on an interpreter system, meaning that code can be executed as soon as it is written. This means that prototyping can be very quick.
Python can be treated in a procedural way, an object-orientated way or a functional way.

==Installing Anaconda==
[[#Top]]
This article is all about installing and troubleshooting Anaconda and Spyder on different platforms.

===Windows===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#windows Download Link]. Make sure that you download the version compatible to your operating system architecture. If you have a 64 bit OS then you can download either 64 bit of 32 bit, but if you have 32 bit OS then you should download the 32 bit version only.

Step 2 -&gt; Double click on the .exe file that you downloaded just now and follow the instructions. If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open cmd (go to Start -&gt; then type cmd in the search bar and hit enter). There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

===Mac===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#macos Download Link].

Step 2 -&gt; Double click on the .pkg file that you just downloaded. If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

===Linux===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#linux Download Link].

Step 2 -&gt; Go to the folder where you downloaded the .sh file and type following command 

  '''bash Anaconda-latest-Linux-x86_64.sh'''

If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

==Troubleshooting Spyder==

[[#Top]]

In most of the cases, it happens that Spyder is already running and you have initiated one more instance of it. Please make sure that spyder is not running already.
If you are on Linux OS, please launch spyder through terminal. Just open the terminal and type '''spyder''' and it will launch. When Spyder opens, make sure you see Anaconda with the version written on the Ipython console. If not, try changing the path of your anaconda. Follow these steps according to your OS version.

====Windows====
[https://stackoverflow.com/questions/44597662/conda-command-is-not-recognized-on-windows-10 Click Here]

====Linux====
[https://stackoverflow.com/questions/18675907/how-to-run-conda Click Here]

====Mac====
[https://stackoverflow.com/questions/35246386/conda-command-not-found Click Here]

In most of the cases relaunching Spyder works.
A more general Troubleshoot is present [https://github.com/spyder-ide/spyder/wiki/Troubleshooting-Guide-and-FAQ Here]

==How to run a program in Spyder IDE?==
Go to Run on the menu bar. Click Run-&gt;Run.

[[#TOP]]
==Print statements==
Print statements help to display output on console. 
{{#ev:youtube|https://youtu.be/gECkqaOwyt0|250|right}}

===Syntax===
print()

===How to print a message?===
In order to print a message in Python, write print(&quot;message&quot;).
Single, double, triple quote can be used print()

'''Example:'''

'''Single Quote'''
print('Hello')  
Output: Hello

'''Double Quote'''
print(&quot;Hello&quot;)  
Output: Hello

'''Quote within quote'''
print('Is &quot;Ram&quot; a good boy?')  
Output: Is &quot;Ram&quot; a good boy?

[[#TOP]]
==Escape sequences with strings==

We can use escape sequence within strings to make output more presentable.

'''\n'''  : It will move to next line.

'''\t'''  : It will add tab space(5space)

'''\a'''  : It will play system sound once.

'''Example:'''

Print(&quot;Hi, \n How are you?&quot;)

Output: 

Hi,

How are you?

Print(&quot;Hi, \t How are you?&quot;)

Output: 

Hi, &lt;5 spaces&gt; How are you?

[[File:Escape_Sequence.jpg]]

==Variables==
[[#Top]]
&lt;pre&gt;
Variables are used to store some values. Values can be strings, integers or decimal values.  

Variable Name Rules:
1. Variable name should start with letter or underscore. Variable name cant start with number.
Example:
Valid: JOC, WIKI, JOC_WIKI, _JOC
Invalid: 1JOC, 123WIKI, 0_WIKI

2. Remaining letter other then first one can contain number, underscore.
Example:
JOC1234, WIKI012_1332

3. Variable names are case sensitivities.
Example:
JOC, jOC, joC all are different varibles. 

&lt;/pre&gt;
{{#ev:youtube|https://youtu.be/60iAXH1sm-Y|250|right}}
===How to print a variable?===
In order to print the value of a variable in python, first initialize the variable and then call it where ever you wanna use it. 
&lt;pre&gt;print(variable_name)&lt;/pre&gt;

&lt;pre&gt;For example :
x=2                # x is viable here
print(x)           # calling variable x with print function

a = &quot;JOC&quot;          # a is variable here
b = &quot;_WIKI&quot;        # b is variable here
c = a + b          # c is variable here which will provide addition of variable a and b
&lt;/pre&gt;

===Some facts about Variables===
* If you want to print variable name with a message, you can use , operator. For example : I want to print Hello Simran and Simran has been stored in a variable called ''name''.
  name=&quot;Simran&quot;
  print(&quot;Hello&quot;,name)
* If you change the value of a variable, it will store the latest value. For example :
  name=&quot;Simran&quot;
  name=&quot;Amit&quot;
  If you will execute the command ''print(name)'', Amit will be displayed.
* You can perform operations like addition, subtraction etc only on integral variables.

===Variables Types and Conversion===
&lt;pre&gt;Variable can be decimal, integer and decimal. And they can be inter covered with the help of conversion functions.

Example:
JOC = 5           Save in Memory as 5       # We have variable with name JOC having value 5 here.
JOC = int(5)      Save in Memory as 5       # Here Variable JOC holding integer value of 5. 
JOC = flot(5)     Save in Memory as 5.0     # Here variable JOC holding flot value of 5
JOC = str(5)      Save in Memory as &quot;5&quot;     # Here variable JOC holding string value of 5 or We can say 5 will be treated as string here.
JOC = complex(5)  Save in Memory as (5+0j)  # Here variable JOC holding complex value of 5.
JOC = oct(5)      Save in Memory as 012     # Here variable JOC holding octal representation of 5.
JOC = hex(5)      Save in Memory as 0xa     # Here variable JOC holding hexadecimal representation of 5

There are many more function available in python. You can convert variable as per your requirement.
&lt;/pre&gt;


&lt;h1 style='color:black;font-family:Calibri;font-size:14.0pt;font-weight:800;
font-style:normal'&gt;Conversion Table with Eample&lt;/h1&gt;

&lt;table border=0 cellpadding=0 cellspacing=0 width=656 style='border-collapse:
 collapse;table-layout:fixed;width:492pt'&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6624497 width=63 style='height:15.0pt;width:47pt'&gt;Serial
  No&lt;/td&gt;
  &lt;td class=xl6724497 width=77 style='border-left:none;width:58pt'&gt;Function&lt;/td&gt;
  &lt;td class=xl6724497 width=303 style='border-left:none;width:227pt'&gt;Description&lt;/td&gt;
  &lt;td class=xl6724497 width=162 style='border-left:none;width:122pt'&gt;Example&lt;/td&gt;
  &lt;td class=xl6824497 width=51 style='border-left:none;width:38pt'&gt;Output&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;1&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;int(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to an
  integer.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10.12;
  print(int(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10&lt;/td&gt;
 &lt;/tr&gt;

==How to execute couple of instructions on console?==
You can execute couple of instructions on console using ;. Write Statement 1;Statement 2;......and then press ''Enter''.
{{#ev:youtube|https://youtu.be/CYQCYvLE22Y|250|right}}









==How to take input from the user?==
We can take input from the user using ''input'' function. For Example : You want the user to input variable ''x'', then write x=input(&quot;Enter the value of x&quot;) and execute. Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNkVLCxZw_jcgyS-bmrIVSP

And when the input you need is of data type other than string. You can do both the input function and data conversion in a single line.
For example:
Consider the program for letting in the patients
'''c=input(&quot;Enter (1/0)&quot;);d=int(c)'''

Instead of using it in two separate lines, combine it into a single line
'''c=int(input(&quot;Enter (1/0)&quot;))'''.

To get two inputs in same line with a space between them split() is used.

a,b=input(&quot;enter a&quot;).split(&quot;enter b&quot;)
----
[[#Top]]

==If statement==
If statement is used to execute set of two contrary statements based on a condition. 

===Syntax===
If (Condition):
    Statement 1
else:
    Statement 2

If 'Condition' is true then 'Statement 1' will be executed otherwise 'Statement 2' will be executed.

Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNhHmg3SkK1uiutigcAbH9K

==Loops==
[[#Top]]&lt;br&gt;
Loops in a programming languages are used to execute set of repetitive statements. For loop and while loop are used extensively to execute a set of looping instructions.

=== For loop Syntax ===
&lt;pre&gt;
for i in range(10): 
    Statement
&lt;/pre&gt;
range(10) indicate that values 0 to 9 will be assigned to the variable i and for each value of i the Statement will be executed, e.g.
&lt;pre&gt;
for i in range(10): 
    print(i)
&lt;/pre&gt;
Output will be
&lt;pre&gt;
0
1
2
3
4
5
6
7
8
9
&lt;/pre&gt;

[[#Top]]

=== While loop Syntax ===
&lt;pre&gt;
intialisation

while(condition):
   Statement
   increment/decrement
&lt;/pre&gt;
e.g.
&lt;pre&gt;
#initialization
i=0
while(i&lt;10): 
    print(i)
    i=i+1
&lt;/pre&gt;
Output will be:
&lt;pre&gt;
0
1
2
3
4
5
6
7
8
9
&lt;/pre&gt;
Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNbl5jkVrrw1E5XSvm3GiCI

[[#TOP]]
==Importance of Indentation in Python==
Indentation is used to indicate to what block of statements belong. Indentation of blocks convey program structure in Python. Indentation in Python is used to refer a group/block of code/statements. In C++ we use { and } (curly brackets) to group a set of statements. But in Python, there are no such brackets used. Instead of such brackets used in other programming languages, we use indentation in Python.
Use tabs,instead of spaces for ease of writing code.

Wrong indentation can lead to syntax error, or makes your output wrong for your logic e.g.
&lt;pre&gt;
#IndentationError: expected an indented block
i=-1
if i&lt;0:
print(&quot;Test successful&quot;)#Wrong indentation 
else:    
    print(&quot;Test failed&quot;)
#Output: IndentationError: expected an indented block
&lt;/pre&gt;
---
&lt;pre&gt;
#Properly Indented code:
i=-1
if i&lt;0:
    print(&quot;Test successful&quot;)#Wrong indentation
else:    
    print(&quot;Test failed&quot;)
#Output:Test successful
&lt;/pre&gt;
---
Logic changed, so output changed, with improper indentation, e.g.
---
&lt;h3&gt;Code : 1&lt;/h3&gt;
&lt;pre&gt;
sum=0
for i in range(5):
    for j in range(5):
        sum+=i
print(sum, end=&quot; &quot;)
#Output: 50
&lt;/pre&gt;
        
&lt;h3&gt;Code : 2&lt;/h3&gt;
&lt;pre&gt;
for i in range(5):
    for j in range(5):
        print(end=&quot; &quot;)
    sum+=i
print(sum, end=&quot; &quot;)
#Output:                          10
&lt;/pre&gt;
{{#ev:youtube|https://youtu.be/pmavoW419Yc|250|right}}&lt;br&gt;

[[#Top]]

==Spyder IDE Black Screen Solution==

----

 This issue is because of ''Help'' screen which is by default open. 
 We need to close it. So here's how you do it-


===Method 1:===

Step 1-    Try by closing current pane for that,  &quot;''press ctrl+shift+F4''&quot;  wait for few seconds things will appear on screen.

Step 2-    If it so than on menu bar go to ''view &gt; panes &gt; help'' unchecked &quot;''Help''&quot; option.

Step 3-    Make sure that &quot;''Help''&quot; under ''view &gt; panes'' is permanently unchecked. And ''Editor, Ipython console, Variable explorer''  are checked. 


===Method 2:===

Step 1-    Open spyder.

Step 2-   On that black screen randomly ''Left click'' on spyder &quot;''Menu bar''&quot; area you will get menu drop downs, You have to find Drop down with &quot;''Panes''&quot; option.

Step 3-   On &quot;''Panes''&quot; drop down unchecked the &quot;''Help''&quot;.

Step 4-   Wait for few seconds Spyder view will appear.

Step 5 -  Make sure that ''&quot;Help&quot;'' under view&gt;panes is permanently unchecked. And ''Editor, Ipython console, variable explorer'' are checked.


[[#Top]]</text>
      <sha1>ijscb8a41n3iyue51qvb99xzf95ri35</sha1>
    </revision>
    <revision>
      <id>3586</id>
      <parentid>3585</parentid>
      <timestamp>2018-09-28T03:22:23Z</timestamp>
      <contributor>
        <username>Sachinkr</username>
        <id>1743</id>
      </contributor>
      <comment>/* Variables Types and Conversion */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="14175">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_2 Contributors of this page]
==Introduction to Python==
Python is a widely used programming language which allows programmers to write the program in fewer lines of code. It was designed by ''Guido van Rossum'' in 1991. Python uses an interpreter instead of compiler.Basically, the main difference between compiler and interpreter is that the compiler takes the code as 'whole' and compiles it. for example, in C language and on the other side in interpreter. For example: languages like Python. It interprets the written code 'line by line', and if somewhere error is found. It stops interpreting the code from there itself. Here, in our course we will be using Spyder IDE. Spyder is an integrated development environment with editing options to assist the programmers in writing programs. Spyder IDE is divided into two panes, one is console and other one is where program is written.

Python works on different platforms (Windows, Mac, Linux, Raspberry Pi, etc).
Python has a simple syntax similar to the English language.
Python has syntax that allows developers to write programs with fewer lines than some other programming languages.
Python runs on an interpreter system, meaning that code can be executed as soon as it is written. This means that prototyping can be very quick.
Python can be treated in a procedural way, an object-orientated way or a functional way.

==Installing Anaconda==
[[#Top]]
This article is all about installing and troubleshooting Anaconda and Spyder on different platforms.

===Windows===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#windows Download Link]. Make sure that you download the version compatible to your operating system architecture. If you have a 64 bit OS then you can download either 64 bit of 32 bit, but if you have 32 bit OS then you should download the 32 bit version only.

Step 2 -&gt; Double click on the .exe file that you downloaded just now and follow the instructions. If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open cmd (go to Start -&gt; then type cmd in the search bar and hit enter). There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

===Mac===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#macos Download Link].

Step 2 -&gt; Double click on the .pkg file that you just downloaded. If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

===Linux===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#linux Download Link].

Step 2 -&gt; Go to the folder where you downloaded the .sh file and type following command 

  '''bash Anaconda-latest-Linux-x86_64.sh'''

If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

==Troubleshooting Spyder==

[[#Top]]

In most of the cases, it happens that Spyder is already running and you have initiated one more instance of it. Please make sure that spyder is not running already.
If you are on Linux OS, please launch spyder through terminal. Just open the terminal and type '''spyder''' and it will launch. When Spyder opens, make sure you see Anaconda with the version written on the Ipython console. If not, try changing the path of your anaconda. Follow these steps according to your OS version.

====Windows====
[https://stackoverflow.com/questions/44597662/conda-command-is-not-recognized-on-windows-10 Click Here]

====Linux====
[https://stackoverflow.com/questions/18675907/how-to-run-conda Click Here]

====Mac====
[https://stackoverflow.com/questions/35246386/conda-command-not-found Click Here]

In most of the cases relaunching Spyder works.
A more general Troubleshoot is present [https://github.com/spyder-ide/spyder/wiki/Troubleshooting-Guide-and-FAQ Here]

==How to run a program in Spyder IDE?==
Go to Run on the menu bar. Click Run-&gt;Run.

[[#TOP]]
==Print statements==
Print statements help to display output on console. 
{{#ev:youtube|https://youtu.be/gECkqaOwyt0|250|right}}

===Syntax===
print()

===How to print a message?===
In order to print a message in Python, write print(&quot;message&quot;).
Single, double, triple quote can be used print()

'''Example:'''

'''Single Quote'''
print('Hello')  
Output: Hello

'''Double Quote'''
print(&quot;Hello&quot;)  
Output: Hello

'''Quote within quote'''
print('Is &quot;Ram&quot; a good boy?')  
Output: Is &quot;Ram&quot; a good boy?

[[#TOP]]
==Escape sequences with strings==

We can use escape sequence within strings to make output more presentable.

'''\n'''  : It will move to next line.

'''\t'''  : It will add tab space(5space)

'''\a'''  : It will play system sound once.

'''Example:'''

Print(&quot;Hi, \n How are you?&quot;)

Output: 

Hi,

How are you?

Print(&quot;Hi, \t How are you?&quot;)

Output: 

Hi, &lt;5 spaces&gt; How are you?

[[File:Escape_Sequence.jpg]]

==Variables==
[[#Top]]
&lt;pre&gt;
Variables are used to store some values. Values can be strings, integers or decimal values.  

Variable Name Rules:
1. Variable name should start with letter or underscore. Variable name cant start with number.
Example:
Valid: JOC, WIKI, JOC_WIKI, _JOC
Invalid: 1JOC, 123WIKI, 0_WIKI

2. Remaining letter other then first one can contain number, underscore.
Example:
JOC1234, WIKI012_1332

3. Variable names are case sensitivities.
Example:
JOC, jOC, joC all are different varibles. 

&lt;/pre&gt;
{{#ev:youtube|https://youtu.be/60iAXH1sm-Y|250|right}}
===How to print a variable?===
In order to print the value of a variable in python, first initialize the variable and then call it where ever you wanna use it. 
&lt;pre&gt;print(variable_name)&lt;/pre&gt;

&lt;pre&gt;For example :
x=2                # x is viable here
print(x)           # calling variable x with print function

a = &quot;JOC&quot;          # a is variable here
b = &quot;_WIKI&quot;        # b is variable here
c = a + b          # c is variable here which will provide addition of variable a and b
&lt;/pre&gt;

===Some facts about Variables===
* If you want to print variable name with a message, you can use , operator. For example : I want to print Hello Simran and Simran has been stored in a variable called ''name''.
  name=&quot;Simran&quot;
  print(&quot;Hello&quot;,name)
* If you change the value of a variable, it will store the latest value. For example :
  name=&quot;Simran&quot;
  name=&quot;Amit&quot;
  If you will execute the command ''print(name)'', Amit will be displayed.
* You can perform operations like addition, subtraction etc only on integral variables.

===Variables Types and Conversion===
&lt;pre&gt;Variable can be decimal, integer and decimal. And they can be inter covered with the help of conversion functions.

Example:
JOC = 5           Save in Memory as 5       # We have variable with name JOC having value 5 here.
JOC = int(5)      Save in Memory as 5       # Here Variable JOC holding integer value of 5. 
JOC = flot(5)     Save in Memory as 5.0     # Here variable JOC holding flot value of 5
JOC = str(5)      Save in Memory as &quot;5&quot;     # Here variable JOC holding string value of 5 or We can say 5 will be treated as string here.
JOC = complex(5)  Save in Memory as (5+0j)  # Here variable JOC holding complex value of 5.
JOC = oct(5)      Save in Memory as 012     # Here variable JOC holding octal representation of 5.
JOC = hex(5)      Save in Memory as 0xa     # Here variable JOC holding hexadecimal representation of 5

There are many more function available in python. You can convert variable as per your requirement.
&lt;/pre&gt;


&lt;h1 style='color:black;font-family:Calibri;font-size:14.0pt;font-weight:800;
font-style:normal'&gt;Conversion Table with Eample&lt;/h1&gt;

&lt;table border=0 cellpadding=0 cellspacing=0 width=656 style='border-collapse:
 collapse;table-layout:fixed;width:492pt'&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6624497 width=63 style='height:15.0pt;width:47pt'&gt;Serial
  No&lt;/td&gt;
  &lt;td class=xl6724497 width=77 style='border-left:none;width:58pt'&gt;Function&lt;/td&gt;
  &lt;td class=xl6724497 width=303 style='border-left:none;width:227pt'&gt;Description&lt;/td&gt;
  &lt;td class=xl6724497 width=162 style='border-left:none;width:122pt'&gt;Example&lt;/td&gt;
  &lt;td class=xl6824497 width=51 style='border-left:none;width:38pt'&gt;Output&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;1&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;int(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to an
  integer.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10.12;
  print(int(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;2&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;long(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a&lt;span
  style='mso-spacerun:yes'&gt;  &lt;/span&gt;to a long integer&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10.12;
  print(long(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10&lt;/td&gt;
 &lt;/tr&gt;

==How to execute couple of instructions on console?==
You can execute couple of instructions on console using ;. Write Statement 1;Statement 2;......and then press ''Enter''.
{{#ev:youtube|https://youtu.be/CYQCYvLE22Y|250|right}}









==How to take input from the user?==
We can take input from the user using ''input'' function. For Example : You want the user to input variable ''x'', then write x=input(&quot;Enter the value of x&quot;) and execute. Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNkVLCxZw_jcgyS-bmrIVSP

And when the input you need is of data type other than string. You can do both the input function and data conversion in a single line.
For example:
Consider the program for letting in the patients
'''c=input(&quot;Enter (1/0)&quot;);d=int(c)'''

Instead of using it in two separate lines, combine it into a single line
'''c=int(input(&quot;Enter (1/0)&quot;))'''.

To get two inputs in same line with a space between them split() is used.

a,b=input(&quot;enter a&quot;).split(&quot;enter b&quot;)
----
[[#Top]]

==If statement==
If statement is used to execute set of two contrary statements based on a condition. 

===Syntax===
If (Condition):
    Statement 1
else:
    Statement 2

If 'Condition' is true then 'Statement 1' will be executed otherwise 'Statement 2' will be executed.

Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNhHmg3SkK1uiutigcAbH9K

==Loops==
[[#Top]]&lt;br&gt;
Loops in a programming languages are used to execute set of repetitive statements. For loop and while loop are used extensively to execute a set of looping instructions.

=== For loop Syntax ===
&lt;pre&gt;
for i in range(10): 
    Statement
&lt;/pre&gt;
range(10) indicate that values 0 to 9 will be assigned to the variable i and for each value of i the Statement will be executed, e.g.
&lt;pre&gt;
for i in range(10): 
    print(i)
&lt;/pre&gt;
Output will be
&lt;pre&gt;
0
1
2
3
4
5
6
7
8
9
&lt;/pre&gt;

[[#Top]]

=== While loop Syntax ===
&lt;pre&gt;
intialisation

while(condition):
   Statement
   increment/decrement
&lt;/pre&gt;
e.g.
&lt;pre&gt;
#initialization
i=0
while(i&lt;10): 
    print(i)
    i=i+1
&lt;/pre&gt;
Output will be:
&lt;pre&gt;
0
1
2
3
4
5
6
7
8
9
&lt;/pre&gt;
Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNbl5jkVrrw1E5XSvm3GiCI

[[#TOP]]
==Importance of Indentation in Python==
Indentation is used to indicate to what block of statements belong. Indentation of blocks convey program structure in Python. Indentation in Python is used to refer a group/block of code/statements. In C++ we use { and } (curly brackets) to group a set of statements. But in Python, there are no such brackets used. Instead of such brackets used in other programming languages, we use indentation in Python.
Use tabs,instead of spaces for ease of writing code.

Wrong indentation can lead to syntax error, or makes your output wrong for your logic e.g.
&lt;pre&gt;
#IndentationError: expected an indented block
i=-1
if i&lt;0:
print(&quot;Test successful&quot;)#Wrong indentation 
else:    
    print(&quot;Test failed&quot;)
#Output: IndentationError: expected an indented block
&lt;/pre&gt;
---
&lt;pre&gt;
#Properly Indented code:
i=-1
if i&lt;0:
    print(&quot;Test successful&quot;)#Wrong indentation
else:    
    print(&quot;Test failed&quot;)
#Output:Test successful
&lt;/pre&gt;
---
Logic changed, so output changed, with improper indentation, e.g.
---
&lt;h3&gt;Code : 1&lt;/h3&gt;
&lt;pre&gt;
sum=0
for i in range(5):
    for j in range(5):
        sum+=i
print(sum, end=&quot; &quot;)
#Output: 50
&lt;/pre&gt;
        
&lt;h3&gt;Code : 2&lt;/h3&gt;
&lt;pre&gt;
for i in range(5):
    for j in range(5):
        print(end=&quot; &quot;)
    sum+=i
print(sum, end=&quot; &quot;)
#Output:                          10
&lt;/pre&gt;
{{#ev:youtube|https://youtu.be/pmavoW419Yc|250|right}}&lt;br&gt;

[[#Top]]

==Spyder IDE Black Screen Solution==

----

 This issue is because of ''Help'' screen which is by default open. 
 We need to close it. So here's how you do it-


===Method 1:===

Step 1-    Try by closing current pane for that,  &quot;''press ctrl+shift+F4''&quot;  wait for few seconds things will appear on screen.

Step 2-    If it so than on menu bar go to ''view &gt; panes &gt; help'' unchecked &quot;''Help''&quot; option.

Step 3-    Make sure that &quot;''Help''&quot; under ''view &gt; panes'' is permanently unchecked. And ''Editor, Ipython console, Variable explorer''  are checked. 


===Method 2:===

Step 1-    Open spyder.

Step 2-   On that black screen randomly ''Left click'' on spyder &quot;''Menu bar''&quot; area you will get menu drop downs, You have to find Drop down with &quot;''Panes''&quot; option.

Step 3-   On &quot;''Panes''&quot; drop down unchecked the &quot;''Help''&quot;.

Step 4-   Wait for few seconds Spyder view will appear.

Step 5 -  Make sure that ''&quot;Help&quot;'' under view&gt;panes is permanently unchecked. And ''Editor, Ipython console, variable explorer'' are checked.


[[#Top]]</text>
      <sha1>045i8dpomt9mtbcfj9mowncfar4sph9</sha1>
    </revision>
    <revision>
      <id>3587</id>
      <parentid>3586</parentid>
      <timestamp>2018-09-28T03:23:08Z</timestamp>
      <contributor>
        <username>Sachinkr</username>
        <id>1743</id>
      </contributor>
      <comment>/* Variables Types and Conversion */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="14679">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_2 Contributors of this page]
==Introduction to Python==
Python is a widely used programming language which allows programmers to write the program in fewer lines of code. It was designed by ''Guido van Rossum'' in 1991. Python uses an interpreter instead of compiler.Basically, the main difference between compiler and interpreter is that the compiler takes the code as 'whole' and compiles it. for example, in C language and on the other side in interpreter. For example: languages like Python. It interprets the written code 'line by line', and if somewhere error is found. It stops interpreting the code from there itself. Here, in our course we will be using Spyder IDE. Spyder is an integrated development environment with editing options to assist the programmers in writing programs. Spyder IDE is divided into two panes, one is console and other one is where program is written.

Python works on different platforms (Windows, Mac, Linux, Raspberry Pi, etc).
Python has a simple syntax similar to the English language.
Python has syntax that allows developers to write programs with fewer lines than some other programming languages.
Python runs on an interpreter system, meaning that code can be executed as soon as it is written. This means that prototyping can be very quick.
Python can be treated in a procedural way, an object-orientated way or a functional way.

==Installing Anaconda==
[[#Top]]
This article is all about installing and troubleshooting Anaconda and Spyder on different platforms.

===Windows===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#windows Download Link]. Make sure that you download the version compatible to your operating system architecture. If you have a 64 bit OS then you can download either 64 bit of 32 bit, but if you have 32 bit OS then you should download the 32 bit version only.

Step 2 -&gt; Double click on the .exe file that you downloaded just now and follow the instructions. If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open cmd (go to Start -&gt; then type cmd in the search bar and hit enter). There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

===Mac===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#macos Download Link].

Step 2 -&gt; Double click on the .pkg file that you just downloaded. If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

===Linux===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#linux Download Link].

Step 2 -&gt; Go to the folder where you downloaded the .sh file and type following command 

  '''bash Anaconda-latest-Linux-x86_64.sh'''

If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

==Troubleshooting Spyder==

[[#Top]]

In most of the cases, it happens that Spyder is already running and you have initiated one more instance of it. Please make sure that spyder is not running already.
If you are on Linux OS, please launch spyder through terminal. Just open the terminal and type '''spyder''' and it will launch. When Spyder opens, make sure you see Anaconda with the version written on the Ipython console. If not, try changing the path of your anaconda. Follow these steps according to your OS version.

====Windows====
[https://stackoverflow.com/questions/44597662/conda-command-is-not-recognized-on-windows-10 Click Here]

====Linux====
[https://stackoverflow.com/questions/18675907/how-to-run-conda Click Here]

====Mac====
[https://stackoverflow.com/questions/35246386/conda-command-not-found Click Here]

In most of the cases relaunching Spyder works.
A more general Troubleshoot is present [https://github.com/spyder-ide/spyder/wiki/Troubleshooting-Guide-and-FAQ Here]

==How to run a program in Spyder IDE?==
Go to Run on the menu bar. Click Run-&gt;Run.

[[#TOP]]
==Print statements==
Print statements help to display output on console. 
{{#ev:youtube|https://youtu.be/gECkqaOwyt0|250|right}}

===Syntax===
print()

===How to print a message?===
In order to print a message in Python, write print(&quot;message&quot;).
Single, double, triple quote can be used print()

'''Example:'''

'''Single Quote'''
print('Hello')  
Output: Hello

'''Double Quote'''
print(&quot;Hello&quot;)  
Output: Hello

'''Quote within quote'''
print('Is &quot;Ram&quot; a good boy?')  
Output: Is &quot;Ram&quot; a good boy?

[[#TOP]]
==Escape sequences with strings==

We can use escape sequence within strings to make output more presentable.

'''\n'''  : It will move to next line.

'''\t'''  : It will add tab space(5space)

'''\a'''  : It will play system sound once.

'''Example:'''

Print(&quot;Hi, \n How are you?&quot;)

Output: 

Hi,

How are you?

Print(&quot;Hi, \t How are you?&quot;)

Output: 

Hi, &lt;5 spaces&gt; How are you?

[[File:Escape_Sequence.jpg]]

==Variables==
[[#Top]]
&lt;pre&gt;
Variables are used to store some values. Values can be strings, integers or decimal values.  

Variable Name Rules:
1. Variable name should start with letter or underscore. Variable name cant start with number.
Example:
Valid: JOC, WIKI, JOC_WIKI, _JOC
Invalid: 1JOC, 123WIKI, 0_WIKI

2. Remaining letter other then first one can contain number, underscore.
Example:
JOC1234, WIKI012_1332

3. Variable names are case sensitivities.
Example:
JOC, jOC, joC all are different varibles. 

&lt;/pre&gt;
{{#ev:youtube|https://youtu.be/60iAXH1sm-Y|250|right}}
===How to print a variable?===
In order to print the value of a variable in python, first initialize the variable and then call it where ever you wanna use it. 
&lt;pre&gt;print(variable_name)&lt;/pre&gt;

&lt;pre&gt;For example :
x=2                # x is viable here
print(x)           # calling variable x with print function

a = &quot;JOC&quot;          # a is variable here
b = &quot;_WIKI&quot;        # b is variable here
c = a + b          # c is variable here which will provide addition of variable a and b
&lt;/pre&gt;

===Some facts about Variables===
* If you want to print variable name with a message, you can use , operator. For example : I want to print Hello Simran and Simran has been stored in a variable called ''name''.
  name=&quot;Simran&quot;
  print(&quot;Hello&quot;,name)
* If you change the value of a variable, it will store the latest value. For example :
  name=&quot;Simran&quot;
  name=&quot;Amit&quot;
  If you will execute the command ''print(name)'', Amit will be displayed.
* You can perform operations like addition, subtraction etc only on integral variables.

===Variables Types and Conversion===
&lt;pre&gt;Variable can be decimal, integer and decimal. And they can be inter covered with the help of conversion functions.

Example:
JOC = 5           Save in Memory as 5       # We have variable with name JOC having value 5 here.
JOC = int(5)      Save in Memory as 5       # Here Variable JOC holding integer value of 5. 
JOC = flot(5)     Save in Memory as 5.0     # Here variable JOC holding flot value of 5
JOC = str(5)      Save in Memory as &quot;5&quot;     # Here variable JOC holding string value of 5 or We can say 5 will be treated as string here.
JOC = complex(5)  Save in Memory as (5+0j)  # Here variable JOC holding complex value of 5.
JOC = oct(5)      Save in Memory as 012     # Here variable JOC holding octal representation of 5.
JOC = hex(5)      Save in Memory as 0xa     # Here variable JOC holding hexadecimal representation of 5

There are many more function available in python. You can convert variable as per your requirement.
&lt;/pre&gt;


&lt;h1 style='color:black;font-family:Calibri;font-size:14.0pt;font-weight:800;
font-style:normal'&gt;Conversion Table with Eample&lt;/h1&gt;

&lt;table border=0 cellpadding=0 cellspacing=0 width=656 style='border-collapse:
 collapse;table-layout:fixed;width:492pt'&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6624497 width=63 style='height:15.0pt;width:47pt'&gt;Serial
  No&lt;/td&gt;
  &lt;td class=xl6724497 width=77 style='border-left:none;width:58pt'&gt;Function&lt;/td&gt;
  &lt;td class=xl6724497 width=303 style='border-left:none;width:227pt'&gt;Description&lt;/td&gt;
  &lt;td class=xl6724497 width=162 style='border-left:none;width:122pt'&gt;Example&lt;/td&gt;
  &lt;td class=xl6824497 width=51 style='border-left:none;width:38pt'&gt;Output&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;1&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;int(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to an
  integer.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10.12;
  print(int(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;2&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;long(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a&lt;span
  style='mso-spacerun:yes'&gt;  &lt;/span&gt;to a long integer&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10.12;
  print(long(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;3&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;float(a)&lt;/td&gt;
  &lt;td class=xl6524497 width=303 style='border-top:none;border-left:none;
  width:227pt'&gt;Converts a to a floating-point number.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 101.23;
  print(float(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;101.23&lt;/td&gt;
 &lt;/tr&gt;

==How to execute couple of instructions on console?==
You can execute couple of instructions on console using ;. Write Statement 1;Statement 2;......and then press ''Enter''.
{{#ev:youtube|https://youtu.be/CYQCYvLE22Y|250|right}}









==How to take input from the user?==
We can take input from the user using ''input'' function. For Example : You want the user to input variable ''x'', then write x=input(&quot;Enter the value of x&quot;) and execute. Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNkVLCxZw_jcgyS-bmrIVSP

And when the input you need is of data type other than string. You can do both the input function and data conversion in a single line.
For example:
Consider the program for letting in the patients
'''c=input(&quot;Enter (1/0)&quot;);d=int(c)'''

Instead of using it in two separate lines, combine it into a single line
'''c=int(input(&quot;Enter (1/0)&quot;))'''.

To get two inputs in same line with a space between them split() is used.

a,b=input(&quot;enter a&quot;).split(&quot;enter b&quot;)
----
[[#Top]]

==If statement==
If statement is used to execute set of two contrary statements based on a condition. 

===Syntax===
If (Condition):
    Statement 1
else:
    Statement 2

If 'Condition' is true then 'Statement 1' will be executed otherwise 'Statement 2' will be executed.

Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNhHmg3SkK1uiutigcAbH9K

==Loops==
[[#Top]]&lt;br&gt;
Loops in a programming languages are used to execute set of repetitive statements. For loop and while loop are used extensively to execute a set of looping instructions.

=== For loop Syntax ===
&lt;pre&gt;
for i in range(10): 
    Statement
&lt;/pre&gt;
range(10) indicate that values 0 to 9 will be assigned to the variable i and for each value of i the Statement will be executed, e.g.
&lt;pre&gt;
for i in range(10): 
    print(i)
&lt;/pre&gt;
Output will be
&lt;pre&gt;
0
1
2
3
4
5
6
7
8
9
&lt;/pre&gt;

[[#Top]]

=== While loop Syntax ===
&lt;pre&gt;
intialisation

while(condition):
   Statement
   increment/decrement
&lt;/pre&gt;
e.g.
&lt;pre&gt;
#initialization
i=0
while(i&lt;10): 
    print(i)
    i=i+1
&lt;/pre&gt;
Output will be:
&lt;pre&gt;
0
1
2
3
4
5
6
7
8
9
&lt;/pre&gt;
Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNbl5jkVrrw1E5XSvm3GiCI

[[#TOP]]
==Importance of Indentation in Python==
Indentation is used to indicate to what block of statements belong. Indentation of blocks convey program structure in Python. Indentation in Python is used to refer a group/block of code/statements. In C++ we use { and } (curly brackets) to group a set of statements. But in Python, there are no such brackets used. Instead of such brackets used in other programming languages, we use indentation in Python.
Use tabs,instead of spaces for ease of writing code.

Wrong indentation can lead to syntax error, or makes your output wrong for your logic e.g.
&lt;pre&gt;
#IndentationError: expected an indented block
i=-1
if i&lt;0:
print(&quot;Test successful&quot;)#Wrong indentation 
else:    
    print(&quot;Test failed&quot;)
#Output: IndentationError: expected an indented block
&lt;/pre&gt;
---
&lt;pre&gt;
#Properly Indented code:
i=-1
if i&lt;0:
    print(&quot;Test successful&quot;)#Wrong indentation
else:    
    print(&quot;Test failed&quot;)
#Output:Test successful
&lt;/pre&gt;
---
Logic changed, so output changed, with improper indentation, e.g.
---
&lt;h3&gt;Code : 1&lt;/h3&gt;
&lt;pre&gt;
sum=0
for i in range(5):
    for j in range(5):
        sum+=i
print(sum, end=&quot; &quot;)
#Output: 50
&lt;/pre&gt;
        
&lt;h3&gt;Code : 2&lt;/h3&gt;
&lt;pre&gt;
for i in range(5):
    for j in range(5):
        print(end=&quot; &quot;)
    sum+=i
print(sum, end=&quot; &quot;)
#Output:                          10
&lt;/pre&gt;
{{#ev:youtube|https://youtu.be/pmavoW419Yc|250|right}}&lt;br&gt;

[[#Top]]

==Spyder IDE Black Screen Solution==

----

 This issue is because of ''Help'' screen which is by default open. 
 We need to close it. So here's how you do it-


===Method 1:===

Step 1-    Try by closing current pane for that,  &quot;''press ctrl+shift+F4''&quot;  wait for few seconds things will appear on screen.

Step 2-    If it so than on menu bar go to ''view &gt; panes &gt; help'' unchecked &quot;''Help''&quot; option.

Step 3-    Make sure that &quot;''Help''&quot; under ''view &gt; panes'' is permanently unchecked. And ''Editor, Ipython console, Variable explorer''  are checked. 


===Method 2:===

Step 1-    Open spyder.

Step 2-   On that black screen randomly ''Left click'' on spyder &quot;''Menu bar''&quot; area you will get menu drop downs, You have to find Drop down with &quot;''Panes''&quot; option.

Step 3-   On &quot;''Panes''&quot; drop down unchecked the &quot;''Help''&quot;.

Step 4-   Wait for few seconds Spyder view will appear.

Step 5 -  Make sure that ''&quot;Help&quot;'' under view&gt;panes is permanently unchecked. And ''Editor, Ipython console, variable explorer'' are checked.


[[#Top]]</text>
      <sha1>484vy4p3pjo2oothpceh1w5gln6r9dx</sha1>
    </revision>
    <revision>
      <id>3588</id>
      <parentid>3587</parentid>
      <timestamp>2018-09-28T03:23:26Z</timestamp>
      <contributor>
        <username>Sachinkr</username>
        <id>1743</id>
      </contributor>
      <comment>/* Variables Types and Conversion */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="15152">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_2 Contributors of this page]
==Introduction to Python==
Python is a widely used programming language which allows programmers to write the program in fewer lines of code. It was designed by ''Guido van Rossum'' in 1991. Python uses an interpreter instead of compiler.Basically, the main difference between compiler and interpreter is that the compiler takes the code as 'whole' and compiles it. for example, in C language and on the other side in interpreter. For example: languages like Python. It interprets the written code 'line by line', and if somewhere error is found. It stops interpreting the code from there itself. Here, in our course we will be using Spyder IDE. Spyder is an integrated development environment with editing options to assist the programmers in writing programs. Spyder IDE is divided into two panes, one is console and other one is where program is written.

Python works on different platforms (Windows, Mac, Linux, Raspberry Pi, etc).
Python has a simple syntax similar to the English language.
Python has syntax that allows developers to write programs with fewer lines than some other programming languages.
Python runs on an interpreter system, meaning that code can be executed as soon as it is written. This means that prototyping can be very quick.
Python can be treated in a procedural way, an object-orientated way or a functional way.

==Installing Anaconda==
[[#Top]]
This article is all about installing and troubleshooting Anaconda and Spyder on different platforms.

===Windows===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#windows Download Link]. Make sure that you download the version compatible to your operating system architecture. If you have a 64 bit OS then you can download either 64 bit of 32 bit, but if you have 32 bit OS then you should download the 32 bit version only.

Step 2 -&gt; Double click on the .exe file that you downloaded just now and follow the instructions. If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open cmd (go to Start -&gt; then type cmd in the search bar and hit enter). There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

===Mac===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#macos Download Link].

Step 2 -&gt; Double click on the .pkg file that you just downloaded. If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

===Linux===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#linux Download Link].

Step 2 -&gt; Go to the folder where you downloaded the .sh file and type following command 

  '''bash Anaconda-latest-Linux-x86_64.sh'''

If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

==Troubleshooting Spyder==

[[#Top]]

In most of the cases, it happens that Spyder is already running and you have initiated one more instance of it. Please make sure that spyder is not running already.
If you are on Linux OS, please launch spyder through terminal. Just open the terminal and type '''spyder''' and it will launch. When Spyder opens, make sure you see Anaconda with the version written on the Ipython console. If not, try changing the path of your anaconda. Follow these steps according to your OS version.

====Windows====
[https://stackoverflow.com/questions/44597662/conda-command-is-not-recognized-on-windows-10 Click Here]

====Linux====
[https://stackoverflow.com/questions/18675907/how-to-run-conda Click Here]

====Mac====
[https://stackoverflow.com/questions/35246386/conda-command-not-found Click Here]

In most of the cases relaunching Spyder works.
A more general Troubleshoot is present [https://github.com/spyder-ide/spyder/wiki/Troubleshooting-Guide-and-FAQ Here]

==How to run a program in Spyder IDE?==
Go to Run on the menu bar. Click Run-&gt;Run.

[[#TOP]]
==Print statements==
Print statements help to display output on console. 
{{#ev:youtube|https://youtu.be/gECkqaOwyt0|250|right}}

===Syntax===
print()

===How to print a message?===
In order to print a message in Python, write print(&quot;message&quot;).
Single, double, triple quote can be used print()

'''Example:'''

'''Single Quote'''
print('Hello')  
Output: Hello

'''Double Quote'''
print(&quot;Hello&quot;)  
Output: Hello

'''Quote within quote'''
print('Is &quot;Ram&quot; a good boy?')  
Output: Is &quot;Ram&quot; a good boy?

[[#TOP]]
==Escape sequences with strings==

We can use escape sequence within strings to make output more presentable.

'''\n'''  : It will move to next line.

'''\t'''  : It will add tab space(5space)

'''\a'''  : It will play system sound once.

'''Example:'''

Print(&quot;Hi, \n How are you?&quot;)

Output: 

Hi,

How are you?

Print(&quot;Hi, \t How are you?&quot;)

Output: 

Hi, &lt;5 spaces&gt; How are you?

[[File:Escape_Sequence.jpg]]

==Variables==
[[#Top]]
&lt;pre&gt;
Variables are used to store some values. Values can be strings, integers or decimal values.  

Variable Name Rules:
1. Variable name should start with letter or underscore. Variable name cant start with number.
Example:
Valid: JOC, WIKI, JOC_WIKI, _JOC
Invalid: 1JOC, 123WIKI, 0_WIKI

2. Remaining letter other then first one can contain number, underscore.
Example:
JOC1234, WIKI012_1332

3. Variable names are case sensitivities.
Example:
JOC, jOC, joC all are different varibles. 

&lt;/pre&gt;
{{#ev:youtube|https://youtu.be/60iAXH1sm-Y|250|right}}
===How to print a variable?===
In order to print the value of a variable in python, first initialize the variable and then call it where ever you wanna use it. 
&lt;pre&gt;print(variable_name)&lt;/pre&gt;

&lt;pre&gt;For example :
x=2                # x is viable here
print(x)           # calling variable x with print function

a = &quot;JOC&quot;          # a is variable here
b = &quot;_WIKI&quot;        # b is variable here
c = a + b          # c is variable here which will provide addition of variable a and b
&lt;/pre&gt;

===Some facts about Variables===
* If you want to print variable name with a message, you can use , operator. For example : I want to print Hello Simran and Simran has been stored in a variable called ''name''.
  name=&quot;Simran&quot;
  print(&quot;Hello&quot;,name)
* If you change the value of a variable, it will store the latest value. For example :
  name=&quot;Simran&quot;
  name=&quot;Amit&quot;
  If you will execute the command ''print(name)'', Amit will be displayed.
* You can perform operations like addition, subtraction etc only on integral variables.

===Variables Types and Conversion===
&lt;pre&gt;Variable can be decimal, integer and decimal. And they can be inter covered with the help of conversion functions.

Example:
JOC = 5           Save in Memory as 5       # We have variable with name JOC having value 5 here.
JOC = int(5)      Save in Memory as 5       # Here Variable JOC holding integer value of 5. 
JOC = flot(5)     Save in Memory as 5.0     # Here variable JOC holding flot value of 5
JOC = str(5)      Save in Memory as &quot;5&quot;     # Here variable JOC holding string value of 5 or We can say 5 will be treated as string here.
JOC = complex(5)  Save in Memory as (5+0j)  # Here variable JOC holding complex value of 5.
JOC = oct(5)      Save in Memory as 012     # Here variable JOC holding octal representation of 5.
JOC = hex(5)      Save in Memory as 0xa     # Here variable JOC holding hexadecimal representation of 5

There are many more function available in python. You can convert variable as per your requirement.
&lt;/pre&gt;


&lt;h1 style='color:black;font-family:Calibri;font-size:14.0pt;font-weight:800;
font-style:normal'&gt;Conversion Table with Eample&lt;/h1&gt;

&lt;table border=0 cellpadding=0 cellspacing=0 width=656 style='border-collapse:
 collapse;table-layout:fixed;width:492pt'&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6624497 width=63 style='height:15.0pt;width:47pt'&gt;Serial
  No&lt;/td&gt;
  &lt;td class=xl6724497 width=77 style='border-left:none;width:58pt'&gt;Function&lt;/td&gt;
  &lt;td class=xl6724497 width=303 style='border-left:none;width:227pt'&gt;Description&lt;/td&gt;
  &lt;td class=xl6724497 width=162 style='border-left:none;width:122pt'&gt;Example&lt;/td&gt;
  &lt;td class=xl6824497 width=51 style='border-left:none;width:38pt'&gt;Output&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;1&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;int(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to an
  integer.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10.12;
  print(int(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;2&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;long(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a&lt;span
  style='mso-spacerun:yes'&gt;  &lt;/span&gt;to a long integer&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10.12;
  print(long(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;3&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;float(a)&lt;/td&gt;
  &lt;td class=xl6524497 width=303 style='border-top:none;border-left:none;
  width:227pt'&gt;Converts a to a floating-point number.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 101.23;
  print(float(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;101.23&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;4&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;complex(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to a
  complex number.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print(complex(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10+0j&lt;/td&gt;
 &lt;/tr&gt;

==How to execute couple of instructions on console?==
You can execute couple of instructions on console using ;. Write Statement 1;Statement 2;......and then press ''Enter''.
{{#ev:youtube|https://youtu.be/CYQCYvLE22Y|250|right}}









==How to take input from the user?==
We can take input from the user using ''input'' function. For Example : You want the user to input variable ''x'', then write x=input(&quot;Enter the value of x&quot;) and execute. Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNkVLCxZw_jcgyS-bmrIVSP

And when the input you need is of data type other than string. You can do both the input function and data conversion in a single line.
For example:
Consider the program for letting in the patients
'''c=input(&quot;Enter (1/0)&quot;);d=int(c)'''

Instead of using it in two separate lines, combine it into a single line
'''c=int(input(&quot;Enter (1/0)&quot;))'''.

To get two inputs in same line with a space between them split() is used.

a,b=input(&quot;enter a&quot;).split(&quot;enter b&quot;)
----
[[#Top]]

==If statement==
If statement is used to execute set of two contrary statements based on a condition. 

===Syntax===
If (Condition):
    Statement 1
else:
    Statement 2

If 'Condition' is true then 'Statement 1' will be executed otherwise 'Statement 2' will be executed.

Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNhHmg3SkK1uiutigcAbH9K

==Loops==
[[#Top]]&lt;br&gt;
Loops in a programming languages are used to execute set of repetitive statements. For loop and while loop are used extensively to execute a set of looping instructions.

=== For loop Syntax ===
&lt;pre&gt;
for i in range(10): 
    Statement
&lt;/pre&gt;
range(10) indicate that values 0 to 9 will be assigned to the variable i and for each value of i the Statement will be executed, e.g.
&lt;pre&gt;
for i in range(10): 
    print(i)
&lt;/pre&gt;
Output will be
&lt;pre&gt;
0
1
2
3
4
5
6
7
8
9
&lt;/pre&gt;

[[#Top]]

=== While loop Syntax ===
&lt;pre&gt;
intialisation

while(condition):
   Statement
   increment/decrement
&lt;/pre&gt;
e.g.
&lt;pre&gt;
#initialization
i=0
while(i&lt;10): 
    print(i)
    i=i+1
&lt;/pre&gt;
Output will be:
&lt;pre&gt;
0
1
2
3
4
5
6
7
8
9
&lt;/pre&gt;
Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNbl5jkVrrw1E5XSvm3GiCI

[[#TOP]]
==Importance of Indentation in Python==
Indentation is used to indicate to what block of statements belong. Indentation of blocks convey program structure in Python. Indentation in Python is used to refer a group/block of code/statements. In C++ we use { and } (curly brackets) to group a set of statements. But in Python, there are no such brackets used. Instead of such brackets used in other programming languages, we use indentation in Python.
Use tabs,instead of spaces for ease of writing code.

Wrong indentation can lead to syntax error, or makes your output wrong for your logic e.g.
&lt;pre&gt;
#IndentationError: expected an indented block
i=-1
if i&lt;0:
print(&quot;Test successful&quot;)#Wrong indentation 
else:    
    print(&quot;Test failed&quot;)
#Output: IndentationError: expected an indented block
&lt;/pre&gt;
---
&lt;pre&gt;
#Properly Indented code:
i=-1
if i&lt;0:
    print(&quot;Test successful&quot;)#Wrong indentation
else:    
    print(&quot;Test failed&quot;)
#Output:Test successful
&lt;/pre&gt;
---
Logic changed, so output changed, with improper indentation, e.g.
---
&lt;h3&gt;Code : 1&lt;/h3&gt;
&lt;pre&gt;
sum=0
for i in range(5):
    for j in range(5):
        sum+=i
print(sum, end=&quot; &quot;)
#Output: 50
&lt;/pre&gt;
        
&lt;h3&gt;Code : 2&lt;/h3&gt;
&lt;pre&gt;
for i in range(5):
    for j in range(5):
        print(end=&quot; &quot;)
    sum+=i
print(sum, end=&quot; &quot;)
#Output:                          10
&lt;/pre&gt;
{{#ev:youtube|https://youtu.be/pmavoW419Yc|250|right}}&lt;br&gt;

[[#Top]]

==Spyder IDE Black Screen Solution==

----

 This issue is because of ''Help'' screen which is by default open. 
 We need to close it. So here's how you do it-


===Method 1:===

Step 1-    Try by closing current pane for that,  &quot;''press ctrl+shift+F4''&quot;  wait for few seconds things will appear on screen.

Step 2-    If it so than on menu bar go to ''view &gt; panes &gt; help'' unchecked &quot;''Help''&quot; option.

Step 3-    Make sure that &quot;''Help''&quot; under ''view &gt; panes'' is permanently unchecked. And ''Editor, Ipython console, Variable explorer''  are checked. 


===Method 2:===

Step 1-    Open spyder.

Step 2-   On that black screen randomly ''Left click'' on spyder &quot;''Menu bar''&quot; area you will get menu drop downs, You have to find Drop down with &quot;''Panes''&quot; option.

Step 3-   On &quot;''Panes''&quot; drop down unchecked the &quot;''Help''&quot;.

Step 4-   Wait for few seconds Spyder view will appear.

Step 5 -  Make sure that ''&quot;Help&quot;'' under view&gt;panes is permanently unchecked. And ''Editor, Ipython console, variable explorer'' are checked.


[[#Top]]</text>
      <sha1>plbbt3cdm0vmiib3m4ug0i4mo3kt9xs</sha1>
    </revision>
    <revision>
      <id>3589</id>
      <parentid>3588</parentid>
      <timestamp>2018-09-28T03:23:52Z</timestamp>
      <contributor>
        <username>Sachinkr</username>
        <id>1743</id>
      </contributor>
      <comment>/* Variables Types and Conversion */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="15604">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_2 Contributors of this page]
==Introduction to Python==
Python is a widely used programming language which allows programmers to write the program in fewer lines of code. It was designed by ''Guido van Rossum'' in 1991. Python uses an interpreter instead of compiler.Basically, the main difference between compiler and interpreter is that the compiler takes the code as 'whole' and compiles it. for example, in C language and on the other side in interpreter. For example: languages like Python. It interprets the written code 'line by line', and if somewhere error is found. It stops interpreting the code from there itself. Here, in our course we will be using Spyder IDE. Spyder is an integrated development environment with editing options to assist the programmers in writing programs. Spyder IDE is divided into two panes, one is console and other one is where program is written.

Python works on different platforms (Windows, Mac, Linux, Raspberry Pi, etc).
Python has a simple syntax similar to the English language.
Python has syntax that allows developers to write programs with fewer lines than some other programming languages.
Python runs on an interpreter system, meaning that code can be executed as soon as it is written. This means that prototyping can be very quick.
Python can be treated in a procedural way, an object-orientated way or a functional way.

==Installing Anaconda==
[[#Top]]
This article is all about installing and troubleshooting Anaconda and Spyder on different platforms.

===Windows===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#windows Download Link]. Make sure that you download the version compatible to your operating system architecture. If you have a 64 bit OS then you can download either 64 bit of 32 bit, but if you have 32 bit OS then you should download the 32 bit version only.

Step 2 -&gt; Double click on the .exe file that you downloaded just now and follow the instructions. If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open cmd (go to Start -&gt; then type cmd in the search bar and hit enter). There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

===Mac===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#macos Download Link].

Step 2 -&gt; Double click on the .pkg file that you just downloaded. If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

===Linux===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#linux Download Link].

Step 2 -&gt; Go to the folder where you downloaded the .sh file and type following command 

  '''bash Anaconda-latest-Linux-x86_64.sh'''

If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

==Troubleshooting Spyder==

[[#Top]]

In most of the cases, it happens that Spyder is already running and you have initiated one more instance of it. Please make sure that spyder is not running already.
If you are on Linux OS, please launch spyder through terminal. Just open the terminal and type '''spyder''' and it will launch. When Spyder opens, make sure you see Anaconda with the version written on the Ipython console. If not, try changing the path of your anaconda. Follow these steps according to your OS version.

====Windows====
[https://stackoverflow.com/questions/44597662/conda-command-is-not-recognized-on-windows-10 Click Here]

====Linux====
[https://stackoverflow.com/questions/18675907/how-to-run-conda Click Here]

====Mac====
[https://stackoverflow.com/questions/35246386/conda-command-not-found Click Here]

In most of the cases relaunching Spyder works.
A more general Troubleshoot is present [https://github.com/spyder-ide/spyder/wiki/Troubleshooting-Guide-and-FAQ Here]

==How to run a program in Spyder IDE?==
Go to Run on the menu bar. Click Run-&gt;Run.

[[#TOP]]
==Print statements==
Print statements help to display output on console. 
{{#ev:youtube|https://youtu.be/gECkqaOwyt0|250|right}}

===Syntax===
print()

===How to print a message?===
In order to print a message in Python, write print(&quot;message&quot;).
Single, double, triple quote can be used print()

'''Example:'''

'''Single Quote'''
print('Hello')  
Output: Hello

'''Double Quote'''
print(&quot;Hello&quot;)  
Output: Hello

'''Quote within quote'''
print('Is &quot;Ram&quot; a good boy?')  
Output: Is &quot;Ram&quot; a good boy?

[[#TOP]]
==Escape sequences with strings==

We can use escape sequence within strings to make output more presentable.

'''\n'''  : It will move to next line.

'''\t'''  : It will add tab space(5space)

'''\a'''  : It will play system sound once.

'''Example:'''

Print(&quot;Hi, \n How are you?&quot;)

Output: 

Hi,

How are you?

Print(&quot;Hi, \t How are you?&quot;)

Output: 

Hi, &lt;5 spaces&gt; How are you?

[[File:Escape_Sequence.jpg]]

==Variables==
[[#Top]]
&lt;pre&gt;
Variables are used to store some values. Values can be strings, integers or decimal values.  

Variable Name Rules:
1. Variable name should start with letter or underscore. Variable name cant start with number.
Example:
Valid: JOC, WIKI, JOC_WIKI, _JOC
Invalid: 1JOC, 123WIKI, 0_WIKI

2. Remaining letter other then first one can contain number, underscore.
Example:
JOC1234, WIKI012_1332

3. Variable names are case sensitivities.
Example:
JOC, jOC, joC all are different varibles. 

&lt;/pre&gt;
{{#ev:youtube|https://youtu.be/60iAXH1sm-Y|250|right}}
===How to print a variable?===
In order to print the value of a variable in python, first initialize the variable and then call it where ever you wanna use it. 
&lt;pre&gt;print(variable_name)&lt;/pre&gt;

&lt;pre&gt;For example :
x=2                # x is viable here
print(x)           # calling variable x with print function

a = &quot;JOC&quot;          # a is variable here
b = &quot;_WIKI&quot;        # b is variable here
c = a + b          # c is variable here which will provide addition of variable a and b
&lt;/pre&gt;

===Some facts about Variables===
* If you want to print variable name with a message, you can use , operator. For example : I want to print Hello Simran and Simran has been stored in a variable called ''name''.
  name=&quot;Simran&quot;
  print(&quot;Hello&quot;,name)
* If you change the value of a variable, it will store the latest value. For example :
  name=&quot;Simran&quot;
  name=&quot;Amit&quot;
  If you will execute the command ''print(name)'', Amit will be displayed.
* You can perform operations like addition, subtraction etc only on integral variables.

===Variables Types and Conversion===
&lt;pre&gt;Variable can be decimal, integer and decimal. And they can be inter covered with the help of conversion functions.

Example:
JOC = 5           Save in Memory as 5       # We have variable with name JOC having value 5 here.
JOC = int(5)      Save in Memory as 5       # Here Variable JOC holding integer value of 5. 
JOC = flot(5)     Save in Memory as 5.0     # Here variable JOC holding flot value of 5
JOC = str(5)      Save in Memory as &quot;5&quot;     # Here variable JOC holding string value of 5 or We can say 5 will be treated as string here.
JOC = complex(5)  Save in Memory as (5+0j)  # Here variable JOC holding complex value of 5.
JOC = oct(5)      Save in Memory as 012     # Here variable JOC holding octal representation of 5.
JOC = hex(5)      Save in Memory as 0xa     # Here variable JOC holding hexadecimal representation of 5

There are many more function available in python. You can convert variable as per your requirement.
&lt;/pre&gt;


&lt;h1 style='color:black;font-family:Calibri;font-size:14.0pt;font-weight:800;
font-style:normal'&gt;Conversion Table with Eample&lt;/h1&gt;

&lt;table border=0 cellpadding=0 cellspacing=0 width=656 style='border-collapse:
 collapse;table-layout:fixed;width:492pt'&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6624497 width=63 style='height:15.0pt;width:47pt'&gt;Serial
  No&lt;/td&gt;
  &lt;td class=xl6724497 width=77 style='border-left:none;width:58pt'&gt;Function&lt;/td&gt;
  &lt;td class=xl6724497 width=303 style='border-left:none;width:227pt'&gt;Description&lt;/td&gt;
  &lt;td class=xl6724497 width=162 style='border-left:none;width:122pt'&gt;Example&lt;/td&gt;
  &lt;td class=xl6824497 width=51 style='border-left:none;width:38pt'&gt;Output&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;1&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;int(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to an
  integer.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10.12;
  print(int(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;2&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;long(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a&lt;span
  style='mso-spacerun:yes'&gt;  &lt;/span&gt;to a long integer&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10.12;
  print(long(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;3&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;float(a)&lt;/td&gt;
  &lt;td class=xl6524497 width=303 style='border-top:none;border-left:none;
  width:227pt'&gt;Converts a to a floating-point number.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 101.23;
  print(float(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;101.23&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;4&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;complex(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to a
  complex number.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print(complex(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10+0j&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;5&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;str(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to
  string.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print(str(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10&lt;/td&gt;
 &lt;/tr&gt;

==How to execute couple of instructions on console?==
You can execute couple of instructions on console using ;. Write Statement 1;Statement 2;......and then press ''Enter''.
{{#ev:youtube|https://youtu.be/CYQCYvLE22Y|250|right}}









==How to take input from the user?==
We can take input from the user using ''input'' function. For Example : You want the user to input variable ''x'', then write x=input(&quot;Enter the value of x&quot;) and execute. Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNkVLCxZw_jcgyS-bmrIVSP

And when the input you need is of data type other than string. You can do both the input function and data conversion in a single line.
For example:
Consider the program for letting in the patients
'''c=input(&quot;Enter (1/0)&quot;);d=int(c)'''

Instead of using it in two separate lines, combine it into a single line
'''c=int(input(&quot;Enter (1/0)&quot;))'''.

To get two inputs in same line with a space between them split() is used.

a,b=input(&quot;enter a&quot;).split(&quot;enter b&quot;)
----
[[#Top]]

==If statement==
If statement is used to execute set of two contrary statements based on a condition. 

===Syntax===
If (Condition):
    Statement 1
else:
    Statement 2

If 'Condition' is true then 'Statement 1' will be executed otherwise 'Statement 2' will be executed.

Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNhHmg3SkK1uiutigcAbH9K

==Loops==
[[#Top]]&lt;br&gt;
Loops in a programming languages are used to execute set of repetitive statements. For loop and while loop are used extensively to execute a set of looping instructions.

=== For loop Syntax ===
&lt;pre&gt;
for i in range(10): 
    Statement
&lt;/pre&gt;
range(10) indicate that values 0 to 9 will be assigned to the variable i and for each value of i the Statement will be executed, e.g.
&lt;pre&gt;
for i in range(10): 
    print(i)
&lt;/pre&gt;
Output will be
&lt;pre&gt;
0
1
2
3
4
5
6
7
8
9
&lt;/pre&gt;

[[#Top]]

=== While loop Syntax ===
&lt;pre&gt;
intialisation

while(condition):
   Statement
   increment/decrement
&lt;/pre&gt;
e.g.
&lt;pre&gt;
#initialization
i=0
while(i&lt;10): 
    print(i)
    i=i+1
&lt;/pre&gt;
Output will be:
&lt;pre&gt;
0
1
2
3
4
5
6
7
8
9
&lt;/pre&gt;
Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNbl5jkVrrw1E5XSvm3GiCI

[[#TOP]]
==Importance of Indentation in Python==
Indentation is used to indicate to what block of statements belong. Indentation of blocks convey program structure in Python. Indentation in Python is used to refer a group/block of code/statements. In C++ we use { and } (curly brackets) to group a set of statements. But in Python, there are no such brackets used. Instead of such brackets used in other programming languages, we use indentation in Python.
Use tabs,instead of spaces for ease of writing code.

Wrong indentation can lead to syntax error, or makes your output wrong for your logic e.g.
&lt;pre&gt;
#IndentationError: expected an indented block
i=-1
if i&lt;0:
print(&quot;Test successful&quot;)#Wrong indentation 
else:    
    print(&quot;Test failed&quot;)
#Output: IndentationError: expected an indented block
&lt;/pre&gt;
---
&lt;pre&gt;
#Properly Indented code:
i=-1
if i&lt;0:
    print(&quot;Test successful&quot;)#Wrong indentation
else:    
    print(&quot;Test failed&quot;)
#Output:Test successful
&lt;/pre&gt;
---
Logic changed, so output changed, with improper indentation, e.g.
---
&lt;h3&gt;Code : 1&lt;/h3&gt;
&lt;pre&gt;
sum=0
for i in range(5):
    for j in range(5):
        sum+=i
print(sum, end=&quot; &quot;)
#Output: 50
&lt;/pre&gt;
        
&lt;h3&gt;Code : 2&lt;/h3&gt;
&lt;pre&gt;
for i in range(5):
    for j in range(5):
        print(end=&quot; &quot;)
    sum+=i
print(sum, end=&quot; &quot;)
#Output:                          10
&lt;/pre&gt;
{{#ev:youtube|https://youtu.be/pmavoW419Yc|250|right}}&lt;br&gt;

[[#Top]]

==Spyder IDE Black Screen Solution==

----

 This issue is because of ''Help'' screen which is by default open. 
 We need to close it. So here's how you do it-


===Method 1:===

Step 1-    Try by closing current pane for that,  &quot;''press ctrl+shift+F4''&quot;  wait for few seconds things will appear on screen.

Step 2-    If it so than on menu bar go to ''view &gt; panes &gt; help'' unchecked &quot;''Help''&quot; option.

Step 3-    Make sure that &quot;''Help''&quot; under ''view &gt; panes'' is permanently unchecked. And ''Editor, Ipython console, Variable explorer''  are checked. 


===Method 2:===

Step 1-    Open spyder.

Step 2-   On that black screen randomly ''Left click'' on spyder &quot;''Menu bar''&quot; area you will get menu drop downs, You have to find Drop down with &quot;''Panes''&quot; option.

Step 3-   On &quot;''Panes''&quot; drop down unchecked the &quot;''Help''&quot;.

Step 4-   Wait for few seconds Spyder view will appear.

Step 5 -  Make sure that ''&quot;Help&quot;'' under view&gt;panes is permanently unchecked. And ''Editor, Ipython console, variable explorer'' are checked.


[[#Top]]</text>
      <sha1>8yvmdmkzgfytpbkn2ykd7ogsmzjm0if</sha1>
    </revision>
    <revision>
      <id>3590</id>
      <parentid>3589</parentid>
      <timestamp>2018-09-28T03:24:10Z</timestamp>
      <contributor>
        <username>Sachinkr</username>
        <id>1743</id>
      </contributor>
      <comment>/* Variables Types and Conversion */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="16079">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_2 Contributors of this page]
==Introduction to Python==
Python is a widely used programming language which allows programmers to write the program in fewer lines of code. It was designed by ''Guido van Rossum'' in 1991. Python uses an interpreter instead of compiler.Basically, the main difference between compiler and interpreter is that the compiler takes the code as 'whole' and compiles it. for example, in C language and on the other side in interpreter. For example: languages like Python. It interprets the written code 'line by line', and if somewhere error is found. It stops interpreting the code from there itself. Here, in our course we will be using Spyder IDE. Spyder is an integrated development environment with editing options to assist the programmers in writing programs. Spyder IDE is divided into two panes, one is console and other one is where program is written.

Python works on different platforms (Windows, Mac, Linux, Raspberry Pi, etc).
Python has a simple syntax similar to the English language.
Python has syntax that allows developers to write programs with fewer lines than some other programming languages.
Python runs on an interpreter system, meaning that code can be executed as soon as it is written. This means that prototyping can be very quick.
Python can be treated in a procedural way, an object-orientated way or a functional way.

==Installing Anaconda==
[[#Top]]
This article is all about installing and troubleshooting Anaconda and Spyder on different platforms.

===Windows===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#windows Download Link]. Make sure that you download the version compatible to your operating system architecture. If you have a 64 bit OS then you can download either 64 bit of 32 bit, but if you have 32 bit OS then you should download the 32 bit version only.

Step 2 -&gt; Double click on the .exe file that you downloaded just now and follow the instructions. If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open cmd (go to Start -&gt; then type cmd in the search bar and hit enter). There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

===Mac===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#macos Download Link].

Step 2 -&gt; Double click on the .pkg file that you just downloaded. If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

===Linux===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#linux Download Link].

Step 2 -&gt; Go to the folder where you downloaded the .sh file and type following command 

  '''bash Anaconda-latest-Linux-x86_64.sh'''

If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

==Troubleshooting Spyder==

[[#Top]]

In most of the cases, it happens that Spyder is already running and you have initiated one more instance of it. Please make sure that spyder is not running already.
If you are on Linux OS, please launch spyder through terminal. Just open the terminal and type '''spyder''' and it will launch. When Spyder opens, make sure you see Anaconda with the version written on the Ipython console. If not, try changing the path of your anaconda. Follow these steps according to your OS version.

====Windows====
[https://stackoverflow.com/questions/44597662/conda-command-is-not-recognized-on-windows-10 Click Here]

====Linux====
[https://stackoverflow.com/questions/18675907/how-to-run-conda Click Here]

====Mac====
[https://stackoverflow.com/questions/35246386/conda-command-not-found Click Here]

In most of the cases relaunching Spyder works.
A more general Troubleshoot is present [https://github.com/spyder-ide/spyder/wiki/Troubleshooting-Guide-and-FAQ Here]

==How to run a program in Spyder IDE?==
Go to Run on the menu bar. Click Run-&gt;Run.

[[#TOP]]
==Print statements==
Print statements help to display output on console. 
{{#ev:youtube|https://youtu.be/gECkqaOwyt0|250|right}}

===Syntax===
print()

===How to print a message?===
In order to print a message in Python, write print(&quot;message&quot;).
Single, double, triple quote can be used print()

'''Example:'''

'''Single Quote'''
print('Hello')  
Output: Hello

'''Double Quote'''
print(&quot;Hello&quot;)  
Output: Hello

'''Quote within quote'''
print('Is &quot;Ram&quot; a good boy?')  
Output: Is &quot;Ram&quot; a good boy?

[[#TOP]]
==Escape sequences with strings==

We can use escape sequence within strings to make output more presentable.

'''\n'''  : It will move to next line.

'''\t'''  : It will add tab space(5space)

'''\a'''  : It will play system sound once.

'''Example:'''

Print(&quot;Hi, \n How are you?&quot;)

Output: 

Hi,

How are you?

Print(&quot;Hi, \t How are you?&quot;)

Output: 

Hi, &lt;5 spaces&gt; How are you?

[[File:Escape_Sequence.jpg]]

==Variables==
[[#Top]]
&lt;pre&gt;
Variables are used to store some values. Values can be strings, integers or decimal values.  

Variable Name Rules:
1. Variable name should start with letter or underscore. Variable name cant start with number.
Example:
Valid: JOC, WIKI, JOC_WIKI, _JOC
Invalid: 1JOC, 123WIKI, 0_WIKI

2. Remaining letter other then first one can contain number, underscore.
Example:
JOC1234, WIKI012_1332

3. Variable names are case sensitivities.
Example:
JOC, jOC, joC all are different varibles. 

&lt;/pre&gt;
{{#ev:youtube|https://youtu.be/60iAXH1sm-Y|250|right}}
===How to print a variable?===
In order to print the value of a variable in python, first initialize the variable and then call it where ever you wanna use it. 
&lt;pre&gt;print(variable_name)&lt;/pre&gt;

&lt;pre&gt;For example :
x=2                # x is viable here
print(x)           # calling variable x with print function

a = &quot;JOC&quot;          # a is variable here
b = &quot;_WIKI&quot;        # b is variable here
c = a + b          # c is variable here which will provide addition of variable a and b
&lt;/pre&gt;

===Some facts about Variables===
* If you want to print variable name with a message, you can use , operator. For example : I want to print Hello Simran and Simran has been stored in a variable called ''name''.
  name=&quot;Simran&quot;
  print(&quot;Hello&quot;,name)
* If you change the value of a variable, it will store the latest value. For example :
  name=&quot;Simran&quot;
  name=&quot;Amit&quot;
  If you will execute the command ''print(name)'', Amit will be displayed.
* You can perform operations like addition, subtraction etc only on integral variables.

===Variables Types and Conversion===
&lt;pre&gt;Variable can be decimal, integer and decimal. And they can be inter covered with the help of conversion functions.

Example:
JOC = 5           Save in Memory as 5       # We have variable with name JOC having value 5 here.
JOC = int(5)      Save in Memory as 5       # Here Variable JOC holding integer value of 5. 
JOC = flot(5)     Save in Memory as 5.0     # Here variable JOC holding flot value of 5
JOC = str(5)      Save in Memory as &quot;5&quot;     # Here variable JOC holding string value of 5 or We can say 5 will be treated as string here.
JOC = complex(5)  Save in Memory as (5+0j)  # Here variable JOC holding complex value of 5.
JOC = oct(5)      Save in Memory as 012     # Here variable JOC holding octal representation of 5.
JOC = hex(5)      Save in Memory as 0xa     # Here variable JOC holding hexadecimal representation of 5

There are many more function available in python. You can convert variable as per your requirement.
&lt;/pre&gt;


&lt;h1 style='color:black;font-family:Calibri;font-size:14.0pt;font-weight:800;
font-style:normal'&gt;Conversion Table with Eample&lt;/h1&gt;

&lt;table border=0 cellpadding=0 cellspacing=0 width=656 style='border-collapse:
 collapse;table-layout:fixed;width:492pt'&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6624497 width=63 style='height:15.0pt;width:47pt'&gt;Serial
  No&lt;/td&gt;
  &lt;td class=xl6724497 width=77 style='border-left:none;width:58pt'&gt;Function&lt;/td&gt;
  &lt;td class=xl6724497 width=303 style='border-left:none;width:227pt'&gt;Description&lt;/td&gt;
  &lt;td class=xl6724497 width=162 style='border-left:none;width:122pt'&gt;Example&lt;/td&gt;
  &lt;td class=xl6824497 width=51 style='border-left:none;width:38pt'&gt;Output&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;1&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;int(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to an
  integer.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10.12;
  print(int(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;2&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;long(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a&lt;span
  style='mso-spacerun:yes'&gt;  &lt;/span&gt;to a long integer&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10.12;
  print(long(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;3&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;float(a)&lt;/td&gt;
  &lt;td class=xl6524497 width=303 style='border-top:none;border-left:none;
  width:227pt'&gt;Converts a to a floating-point number.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 101.23;
  print(float(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;101.23&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;4&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;complex(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to a
  complex number.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print(complex(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10+0j&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;5&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;str(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to
  string.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print(str(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;6&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;repr(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts object
  a to an expression string.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print(repr(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10&lt;/td&gt;
 &lt;/tr&gt;

==How to execute couple of instructions on console?==
You can execute couple of instructions on console using ;. Write Statement 1;Statement 2;......and then press ''Enter''.
{{#ev:youtube|https://youtu.be/CYQCYvLE22Y|250|right}}









==How to take input from the user?==
We can take input from the user using ''input'' function. For Example : You want the user to input variable ''x'', then write x=input(&quot;Enter the value of x&quot;) and execute. Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNkVLCxZw_jcgyS-bmrIVSP

And when the input you need is of data type other than string. You can do both the input function and data conversion in a single line.
For example:
Consider the program for letting in the patients
'''c=input(&quot;Enter (1/0)&quot;);d=int(c)'''

Instead of using it in two separate lines, combine it into a single line
'''c=int(input(&quot;Enter (1/0)&quot;))'''.

To get two inputs in same line with a space between them split() is used.

a,b=input(&quot;enter a&quot;).split(&quot;enter b&quot;)
----
[[#Top]]

==If statement==
If statement is used to execute set of two contrary statements based on a condition. 

===Syntax===
If (Condition):
    Statement 1
else:
    Statement 2

If 'Condition' is true then 'Statement 1' will be executed otherwise 'Statement 2' will be executed.

Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNhHmg3SkK1uiutigcAbH9K

==Loops==
[[#Top]]&lt;br&gt;
Loops in a programming languages are used to execute set of repetitive statements. For loop and while loop are used extensively to execute a set of looping instructions.

=== For loop Syntax ===
&lt;pre&gt;
for i in range(10): 
    Statement
&lt;/pre&gt;
range(10) indicate that values 0 to 9 will be assigned to the variable i and for each value of i the Statement will be executed, e.g.
&lt;pre&gt;
for i in range(10): 
    print(i)
&lt;/pre&gt;
Output will be
&lt;pre&gt;
0
1
2
3
4
5
6
7
8
9
&lt;/pre&gt;

[[#Top]]

=== While loop Syntax ===
&lt;pre&gt;
intialisation

while(condition):
   Statement
   increment/decrement
&lt;/pre&gt;
e.g.
&lt;pre&gt;
#initialization
i=0
while(i&lt;10): 
    print(i)
    i=i+1
&lt;/pre&gt;
Output will be:
&lt;pre&gt;
0
1
2
3
4
5
6
7
8
9
&lt;/pre&gt;
Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNbl5jkVrrw1E5XSvm3GiCI

[[#TOP]]
==Importance of Indentation in Python==
Indentation is used to indicate to what block of statements belong. Indentation of blocks convey program structure in Python. Indentation in Python is used to refer a group/block of code/statements. In C++ we use { and } (curly brackets) to group a set of statements. But in Python, there are no such brackets used. Instead of such brackets used in other programming languages, we use indentation in Python.
Use tabs,instead of spaces for ease of writing code.

Wrong indentation can lead to syntax error, or makes your output wrong for your logic e.g.
&lt;pre&gt;
#IndentationError: expected an indented block
i=-1
if i&lt;0:
print(&quot;Test successful&quot;)#Wrong indentation 
else:    
    print(&quot;Test failed&quot;)
#Output: IndentationError: expected an indented block
&lt;/pre&gt;
---
&lt;pre&gt;
#Properly Indented code:
i=-1
if i&lt;0:
    print(&quot;Test successful&quot;)#Wrong indentation
else:    
    print(&quot;Test failed&quot;)
#Output:Test successful
&lt;/pre&gt;
---
Logic changed, so output changed, with improper indentation, e.g.
---
&lt;h3&gt;Code : 1&lt;/h3&gt;
&lt;pre&gt;
sum=0
for i in range(5):
    for j in range(5):
        sum+=i
print(sum, end=&quot; &quot;)
#Output: 50
&lt;/pre&gt;
        
&lt;h3&gt;Code : 2&lt;/h3&gt;
&lt;pre&gt;
for i in range(5):
    for j in range(5):
        print(end=&quot; &quot;)
    sum+=i
print(sum, end=&quot; &quot;)
#Output:                          10
&lt;/pre&gt;
{{#ev:youtube|https://youtu.be/pmavoW419Yc|250|right}}&lt;br&gt;

[[#Top]]

==Spyder IDE Black Screen Solution==

----

 This issue is because of ''Help'' screen which is by default open. 
 We need to close it. So here's how you do it-


===Method 1:===

Step 1-    Try by closing current pane for that,  &quot;''press ctrl+shift+F4''&quot;  wait for few seconds things will appear on screen.

Step 2-    If it so than on menu bar go to ''view &gt; panes &gt; help'' unchecked &quot;''Help''&quot; option.

Step 3-    Make sure that &quot;''Help''&quot; under ''view &gt; panes'' is permanently unchecked. And ''Editor, Ipython console, Variable explorer''  are checked. 


===Method 2:===

Step 1-    Open spyder.

Step 2-   On that black screen randomly ''Left click'' on spyder &quot;''Menu bar''&quot; area you will get menu drop downs, You have to find Drop down with &quot;''Panes''&quot; option.

Step 3-   On &quot;''Panes''&quot; drop down unchecked the &quot;''Help''&quot;.

Step 4-   Wait for few seconds Spyder view will appear.

Step 5 -  Make sure that ''&quot;Help&quot;'' under view&gt;panes is permanently unchecked. And ''Editor, Ipython console, variable explorer'' are checked.


[[#Top]]</text>
      <sha1>qtwwsioz6tfttth8efxjh37ci92u02u</sha1>
    </revision>
    <revision>
      <id>3591</id>
      <parentid>3590</parentid>
      <timestamp>2018-09-28T03:25:39Z</timestamp>
      <contributor>
        <username>Sachinkr</username>
        <id>1743</id>
      </contributor>
      <comment>/* Variables Types and Conversion */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="16529">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_2 Contributors of this page]
==Introduction to Python==
Python is a widely used programming language which allows programmers to write the program in fewer lines of code. It was designed by ''Guido van Rossum'' in 1991. Python uses an interpreter instead of compiler.Basically, the main difference between compiler and interpreter is that the compiler takes the code as 'whole' and compiles it. for example, in C language and on the other side in interpreter. For example: languages like Python. It interprets the written code 'line by line', and if somewhere error is found. It stops interpreting the code from there itself. Here, in our course we will be using Spyder IDE. Spyder is an integrated development environment with editing options to assist the programmers in writing programs. Spyder IDE is divided into two panes, one is console and other one is where program is written.

Python works on different platforms (Windows, Mac, Linux, Raspberry Pi, etc).
Python has a simple syntax similar to the English language.
Python has syntax that allows developers to write programs with fewer lines than some other programming languages.
Python runs on an interpreter system, meaning that code can be executed as soon as it is written. This means that prototyping can be very quick.
Python can be treated in a procedural way, an object-orientated way or a functional way.

==Installing Anaconda==
[[#Top]]
This article is all about installing and troubleshooting Anaconda and Spyder on different platforms.

===Windows===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#windows Download Link]. Make sure that you download the version compatible to your operating system architecture. If you have a 64 bit OS then you can download either 64 bit of 32 bit, but if you have 32 bit OS then you should download the 32 bit version only.

Step 2 -&gt; Double click on the .exe file that you downloaded just now and follow the instructions. If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open cmd (go to Start -&gt; then type cmd in the search bar and hit enter). There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

===Mac===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#macos Download Link].

Step 2 -&gt; Double click on the .pkg file that you just downloaded. If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

===Linux===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#linux Download Link].

Step 2 -&gt; Go to the folder where you downloaded the .sh file and type following command 

  '''bash Anaconda-latest-Linux-x86_64.sh'''

If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

==Troubleshooting Spyder==

[[#Top]]

In most of the cases, it happens that Spyder is already running and you have initiated one more instance of it. Please make sure that spyder is not running already.
If you are on Linux OS, please launch spyder through terminal. Just open the terminal and type '''spyder''' and it will launch. When Spyder opens, make sure you see Anaconda with the version written on the Ipython console. If not, try changing the path of your anaconda. Follow these steps according to your OS version.

====Windows====
[https://stackoverflow.com/questions/44597662/conda-command-is-not-recognized-on-windows-10 Click Here]

====Linux====
[https://stackoverflow.com/questions/18675907/how-to-run-conda Click Here]

====Mac====
[https://stackoverflow.com/questions/35246386/conda-command-not-found Click Here]

In most of the cases relaunching Spyder works.
A more general Troubleshoot is present [https://github.com/spyder-ide/spyder/wiki/Troubleshooting-Guide-and-FAQ Here]

==How to run a program in Spyder IDE?==
Go to Run on the menu bar. Click Run-&gt;Run.

[[#TOP]]
==Print statements==
Print statements help to display output on console. 
{{#ev:youtube|https://youtu.be/gECkqaOwyt0|250|right}}

===Syntax===
print()

===How to print a message?===
In order to print a message in Python, write print(&quot;message&quot;).
Single, double, triple quote can be used print()

'''Example:'''

'''Single Quote'''
print('Hello')  
Output: Hello

'''Double Quote'''
print(&quot;Hello&quot;)  
Output: Hello

'''Quote within quote'''
print('Is &quot;Ram&quot; a good boy?')  
Output: Is &quot;Ram&quot; a good boy?

[[#TOP]]
==Escape sequences with strings==

We can use escape sequence within strings to make output more presentable.

'''\n'''  : It will move to next line.

'''\t'''  : It will add tab space(5space)

'''\a'''  : It will play system sound once.

'''Example:'''

Print(&quot;Hi, \n How are you?&quot;)

Output: 

Hi,

How are you?

Print(&quot;Hi, \t How are you?&quot;)

Output: 

Hi, &lt;5 spaces&gt; How are you?

[[File:Escape_Sequence.jpg]]

==Variables==
[[#Top]]
&lt;pre&gt;
Variables are used to store some values. Values can be strings, integers or decimal values.  

Variable Name Rules:
1. Variable name should start with letter or underscore. Variable name cant start with number.
Example:
Valid: JOC, WIKI, JOC_WIKI, _JOC
Invalid: 1JOC, 123WIKI, 0_WIKI

2. Remaining letter other then first one can contain number, underscore.
Example:
JOC1234, WIKI012_1332

3. Variable names are case sensitivities.
Example:
JOC, jOC, joC all are different varibles. 

&lt;/pre&gt;
{{#ev:youtube|https://youtu.be/60iAXH1sm-Y|250|right}}
===How to print a variable?===
In order to print the value of a variable in python, first initialize the variable and then call it where ever you wanna use it. 
&lt;pre&gt;print(variable_name)&lt;/pre&gt;

&lt;pre&gt;For example :
x=2                # x is viable here
print(x)           # calling variable x with print function

a = &quot;JOC&quot;          # a is variable here
b = &quot;_WIKI&quot;        # b is variable here
c = a + b          # c is variable here which will provide addition of variable a and b
&lt;/pre&gt;

===Some facts about Variables===
* If you want to print variable name with a message, you can use , operator. For example : I want to print Hello Simran and Simran has been stored in a variable called ''name''.
  name=&quot;Simran&quot;
  print(&quot;Hello&quot;,name)
* If you change the value of a variable, it will store the latest value. For example :
  name=&quot;Simran&quot;
  name=&quot;Amit&quot;
  If you will execute the command ''print(name)'', Amit will be displayed.
* You can perform operations like addition, subtraction etc only on integral variables.

===Variables Types and Conversion===
&lt;pre&gt;Variable can be decimal, integer and decimal. And they can be inter covered with the help of conversion functions.

Example:
JOC = 5           Save in Memory as 5       # We have variable with name JOC having value 5 here.
JOC = int(5)      Save in Memory as 5       # Here Variable JOC holding integer value of 5. 
JOC = flot(5)     Save in Memory as 5.0     # Here variable JOC holding flot value of 5
JOC = str(5)      Save in Memory as &quot;5&quot;     # Here variable JOC holding string value of 5 or We can say 5 will be treated as string here.
JOC = complex(5)  Save in Memory as (5+0j)  # Here variable JOC holding complex value of 5.
JOC = oct(5)      Save in Memory as 012     # Here variable JOC holding octal representation of 5.
JOC = hex(5)      Save in Memory as 0xa     # Here variable JOC holding hexadecimal representation of 5

There are many more function available in python. You can convert variable as per your requirement.
&lt;/pre&gt;


&lt;h1 style='color:black;font-family:Calibri;font-size:14.0pt;font-weight:800;
font-style:normal'&gt;Conversion Table with Eample&lt;/h1&gt;

&lt;table border=0 cellpadding=0 cellspacing=0 width=656 style='border-collapse:
 collapse;table-layout:fixed;width:492pt'&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6624497 width=63 style='height:15.0pt;width:47pt'&gt;Serial
  No&lt;/td&gt;
  &lt;td class=xl6724497 width=77 style='border-left:none;width:58pt'&gt;Function&lt;/td&gt;
  &lt;td class=xl6724497 width=303 style='border-left:none;width:227pt'&gt;Description&lt;/td&gt;
  &lt;td class=xl6724497 width=162 style='border-left:none;width:122pt'&gt;Example&lt;/td&gt;
  &lt;td class=xl6824497 width=51 style='border-left:none;width:38pt'&gt;Output&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;1&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;int(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to an
  integer.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10.12;
  print(int(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;2&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;long(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a&lt;span
  style='mso-spacerun:yes'&gt;  &lt;/span&gt;to a long integer&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10.12;
  print(long(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;3&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;float(a)&lt;/td&gt;
  &lt;td class=xl6524497 width=303 style='border-top:none;border-left:none;
  width:227pt'&gt;Converts a to a floating-point number.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 101.23;
  print(float(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;101.23&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;4&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;complex(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to a
  complex number.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print(complex(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10+0j&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;5&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;str(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to
  string.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print(str(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;6&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;repr(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts object
  a to an expression string.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print(repr(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;7&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;tuple(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to
  tuple.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print((a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10&lt;/td&gt;
 &lt;/tr&gt;

==How to execute couple of instructions on console?==
You can execute couple of instructions on console using ;. Write Statement 1;Statement 2;......and then press ''Enter''.
{{#ev:youtube|https://youtu.be/CYQCYvLE22Y|250|right}}









==How to take input from the user?==
We can take input from the user using ''input'' function. For Example : You want the user to input variable ''x'', then write x=input(&quot;Enter the value of x&quot;) and execute. Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNkVLCxZw_jcgyS-bmrIVSP

And when the input you need is of data type other than string. You can do both the input function and data conversion in a single line.
For example:
Consider the program for letting in the patients
'''c=input(&quot;Enter (1/0)&quot;);d=int(c)'''

Instead of using it in two separate lines, combine it into a single line
'''c=int(input(&quot;Enter (1/0)&quot;))'''.

To get two inputs in same line with a space between them split() is used.

a,b=input(&quot;enter a&quot;).split(&quot;enter b&quot;)
----
[[#Top]]

==If statement==
If statement is used to execute set of two contrary statements based on a condition. 

===Syntax===
If (Condition):
    Statement 1
else:
    Statement 2

If 'Condition' is true then 'Statement 1' will be executed otherwise 'Statement 2' will be executed.

Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNhHmg3SkK1uiutigcAbH9K

==Loops==
[[#Top]]&lt;br&gt;
Loops in a programming languages are used to execute set of repetitive statements. For loop and while loop are used extensively to execute a set of looping instructions.

=== For loop Syntax ===
&lt;pre&gt;
for i in range(10): 
    Statement
&lt;/pre&gt;
range(10) indicate that values 0 to 9 will be assigned to the variable i and for each value of i the Statement will be executed, e.g.
&lt;pre&gt;
for i in range(10): 
    print(i)
&lt;/pre&gt;
Output will be
&lt;pre&gt;
0
1
2
3
4
5
6
7
8
9
&lt;/pre&gt;

[[#Top]]

=== While loop Syntax ===
&lt;pre&gt;
intialisation

while(condition):
   Statement
   increment/decrement
&lt;/pre&gt;
e.g.
&lt;pre&gt;
#initialization
i=0
while(i&lt;10): 
    print(i)
    i=i+1
&lt;/pre&gt;
Output will be:
&lt;pre&gt;
0
1
2
3
4
5
6
7
8
9
&lt;/pre&gt;
Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNbl5jkVrrw1E5XSvm3GiCI

[[#TOP]]
==Importance of Indentation in Python==
Indentation is used to indicate to what block of statements belong. Indentation of blocks convey program structure in Python. Indentation in Python is used to refer a group/block of code/statements. In C++ we use { and } (curly brackets) to group a set of statements. But in Python, there are no such brackets used. Instead of such brackets used in other programming languages, we use indentation in Python.
Use tabs,instead of spaces for ease of writing code.

Wrong indentation can lead to syntax error, or makes your output wrong for your logic e.g.
&lt;pre&gt;
#IndentationError: expected an indented block
i=-1
if i&lt;0:
print(&quot;Test successful&quot;)#Wrong indentation 
else:    
    print(&quot;Test failed&quot;)
#Output: IndentationError: expected an indented block
&lt;/pre&gt;
---
&lt;pre&gt;
#Properly Indented code:
i=-1
if i&lt;0:
    print(&quot;Test successful&quot;)#Wrong indentation
else:    
    print(&quot;Test failed&quot;)
#Output:Test successful
&lt;/pre&gt;
---
Logic changed, so output changed, with improper indentation, e.g.
---
&lt;h3&gt;Code : 1&lt;/h3&gt;
&lt;pre&gt;
sum=0
for i in range(5):
    for j in range(5):
        sum+=i
print(sum, end=&quot; &quot;)
#Output: 50
&lt;/pre&gt;
        
&lt;h3&gt;Code : 2&lt;/h3&gt;
&lt;pre&gt;
for i in range(5):
    for j in range(5):
        print(end=&quot; &quot;)
    sum+=i
print(sum, end=&quot; &quot;)
#Output:                          10
&lt;/pre&gt;
{{#ev:youtube|https://youtu.be/pmavoW419Yc|250|right}}&lt;br&gt;

[[#Top]]

==Spyder IDE Black Screen Solution==

----

 This issue is because of ''Help'' screen which is by default open. 
 We need to close it. So here's how you do it-


===Method 1:===

Step 1-    Try by closing current pane for that,  &quot;''press ctrl+shift+F4''&quot;  wait for few seconds things will appear on screen.

Step 2-    If it so than on menu bar go to ''view &gt; panes &gt; help'' unchecked &quot;''Help''&quot; option.

Step 3-    Make sure that &quot;''Help''&quot; under ''view &gt; panes'' is permanently unchecked. And ''Editor, Ipython console, Variable explorer''  are checked. 


===Method 2:===

Step 1-    Open spyder.

Step 2-   On that black screen randomly ''Left click'' on spyder &quot;''Menu bar''&quot; area you will get menu drop downs, You have to find Drop down with &quot;''Panes''&quot; option.

Step 3-   On &quot;''Panes''&quot; drop down unchecked the &quot;''Help''&quot;.

Step 4-   Wait for few seconds Spyder view will appear.

Step 5 -  Make sure that ''&quot;Help&quot;'' under view&gt;panes is permanently unchecked. And ''Editor, Ipython console, variable explorer'' are checked.


[[#Top]]</text>
      <sha1>0cpfikyhxlwfkksx33mjigclwb4r35n</sha1>
    </revision>
    <revision>
      <id>3592</id>
      <parentid>3591</parentid>
      <timestamp>2018-09-28T03:25:59Z</timestamp>
      <contributor>
        <username>Sachinkr</username>
        <id>1743</id>
      </contributor>
      <comment>/* Variables Types and Conversion */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="16979">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_2 Contributors of this page]
==Introduction to Python==
Python is a widely used programming language which allows programmers to write the program in fewer lines of code. It was designed by ''Guido van Rossum'' in 1991. Python uses an interpreter instead of compiler.Basically, the main difference between compiler and interpreter is that the compiler takes the code as 'whole' and compiles it. for example, in C language and on the other side in interpreter. For example: languages like Python. It interprets the written code 'line by line', and if somewhere error is found. It stops interpreting the code from there itself. Here, in our course we will be using Spyder IDE. Spyder is an integrated development environment with editing options to assist the programmers in writing programs. Spyder IDE is divided into two panes, one is console and other one is where program is written.

Python works on different platforms (Windows, Mac, Linux, Raspberry Pi, etc).
Python has a simple syntax similar to the English language.
Python has syntax that allows developers to write programs with fewer lines than some other programming languages.
Python runs on an interpreter system, meaning that code can be executed as soon as it is written. This means that prototyping can be very quick.
Python can be treated in a procedural way, an object-orientated way or a functional way.

==Installing Anaconda==
[[#Top]]
This article is all about installing and troubleshooting Anaconda and Spyder on different platforms.

===Windows===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#windows Download Link]. Make sure that you download the version compatible to your operating system architecture. If you have a 64 bit OS then you can download either 64 bit of 32 bit, but if you have 32 bit OS then you should download the 32 bit version only.

Step 2 -&gt; Double click on the .exe file that you downloaded just now and follow the instructions. If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open cmd (go to Start -&gt; then type cmd in the search bar and hit enter). There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

===Mac===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#macos Download Link].

Step 2 -&gt; Double click on the .pkg file that you just downloaded. If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

===Linux===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#linux Download Link].

Step 2 -&gt; Go to the folder where you downloaded the .sh file and type following command 

  '''bash Anaconda-latest-Linux-x86_64.sh'''

If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

==Troubleshooting Spyder==

[[#Top]]

In most of the cases, it happens that Spyder is already running and you have initiated one more instance of it. Please make sure that spyder is not running already.
If you are on Linux OS, please launch spyder through terminal. Just open the terminal and type '''spyder''' and it will launch. When Spyder opens, make sure you see Anaconda with the version written on the Ipython console. If not, try changing the path of your anaconda. Follow these steps according to your OS version.

====Windows====
[https://stackoverflow.com/questions/44597662/conda-command-is-not-recognized-on-windows-10 Click Here]

====Linux====
[https://stackoverflow.com/questions/18675907/how-to-run-conda Click Here]

====Mac====
[https://stackoverflow.com/questions/35246386/conda-command-not-found Click Here]

In most of the cases relaunching Spyder works.
A more general Troubleshoot is present [https://github.com/spyder-ide/spyder/wiki/Troubleshooting-Guide-and-FAQ Here]

==How to run a program in Spyder IDE?==
Go to Run on the menu bar. Click Run-&gt;Run.

[[#TOP]]
==Print statements==
Print statements help to display output on console. 
{{#ev:youtube|https://youtu.be/gECkqaOwyt0|250|right}}

===Syntax===
print()

===How to print a message?===
In order to print a message in Python, write print(&quot;message&quot;).
Single, double, triple quote can be used print()

'''Example:'''

'''Single Quote'''
print('Hello')  
Output: Hello

'''Double Quote'''
print(&quot;Hello&quot;)  
Output: Hello

'''Quote within quote'''
print('Is &quot;Ram&quot; a good boy?')  
Output: Is &quot;Ram&quot; a good boy?

[[#TOP]]
==Escape sequences with strings==

We can use escape sequence within strings to make output more presentable.

'''\n'''  : It will move to next line.

'''\t'''  : It will add tab space(5space)

'''\a'''  : It will play system sound once.

'''Example:'''

Print(&quot;Hi, \n How are you?&quot;)

Output: 

Hi,

How are you?

Print(&quot;Hi, \t How are you?&quot;)

Output: 

Hi, &lt;5 spaces&gt; How are you?

[[File:Escape_Sequence.jpg]]

==Variables==
[[#Top]]
&lt;pre&gt;
Variables are used to store some values. Values can be strings, integers or decimal values.  

Variable Name Rules:
1. Variable name should start with letter or underscore. Variable name cant start with number.
Example:
Valid: JOC, WIKI, JOC_WIKI, _JOC
Invalid: 1JOC, 123WIKI, 0_WIKI

2. Remaining letter other then first one can contain number, underscore.
Example:
JOC1234, WIKI012_1332

3. Variable names are case sensitivities.
Example:
JOC, jOC, joC all are different varibles. 

&lt;/pre&gt;
{{#ev:youtube|https://youtu.be/60iAXH1sm-Y|250|right}}
===How to print a variable?===
In order to print the value of a variable in python, first initialize the variable and then call it where ever you wanna use it. 
&lt;pre&gt;print(variable_name)&lt;/pre&gt;

&lt;pre&gt;For example :
x=2                # x is viable here
print(x)           # calling variable x with print function

a = &quot;JOC&quot;          # a is variable here
b = &quot;_WIKI&quot;        # b is variable here
c = a + b          # c is variable here which will provide addition of variable a and b
&lt;/pre&gt;

===Some facts about Variables===
* If you want to print variable name with a message, you can use , operator. For example : I want to print Hello Simran and Simran has been stored in a variable called ''name''.
  name=&quot;Simran&quot;
  print(&quot;Hello&quot;,name)
* If you change the value of a variable, it will store the latest value. For example :
  name=&quot;Simran&quot;
  name=&quot;Amit&quot;
  If you will execute the command ''print(name)'', Amit will be displayed.
* You can perform operations like addition, subtraction etc only on integral variables.

===Variables Types and Conversion===
&lt;pre&gt;Variable can be decimal, integer and decimal. And they can be inter covered with the help of conversion functions.

Example:
JOC = 5           Save in Memory as 5       # We have variable with name JOC having value 5 here.
JOC = int(5)      Save in Memory as 5       # Here Variable JOC holding integer value of 5. 
JOC = flot(5)     Save in Memory as 5.0     # Here variable JOC holding flot value of 5
JOC = str(5)      Save in Memory as &quot;5&quot;     # Here variable JOC holding string value of 5 or We can say 5 will be treated as string here.
JOC = complex(5)  Save in Memory as (5+0j)  # Here variable JOC holding complex value of 5.
JOC = oct(5)      Save in Memory as 012     # Here variable JOC holding octal representation of 5.
JOC = hex(5)      Save in Memory as 0xa     # Here variable JOC holding hexadecimal representation of 5

There are many more function available in python. You can convert variable as per your requirement.
&lt;/pre&gt;


&lt;h1 style='color:black;font-family:Calibri;font-size:14.0pt;font-weight:800;
font-style:normal'&gt;Conversion Table with Eample&lt;/h1&gt;

&lt;table border=0 cellpadding=0 cellspacing=0 width=656 style='border-collapse:
 collapse;table-layout:fixed;width:492pt'&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6624497 width=63 style='height:15.0pt;width:47pt'&gt;Serial
  No&lt;/td&gt;
  &lt;td class=xl6724497 width=77 style='border-left:none;width:58pt'&gt;Function&lt;/td&gt;
  &lt;td class=xl6724497 width=303 style='border-left:none;width:227pt'&gt;Description&lt;/td&gt;
  &lt;td class=xl6724497 width=162 style='border-left:none;width:122pt'&gt;Example&lt;/td&gt;
  &lt;td class=xl6824497 width=51 style='border-left:none;width:38pt'&gt;Output&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;1&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;int(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to an
  integer.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10.12;
  print(int(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;2&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;long(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a&lt;span
  style='mso-spacerun:yes'&gt;  &lt;/span&gt;to a long integer&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10.12;
  print(long(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;3&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;float(a)&lt;/td&gt;
  &lt;td class=xl6524497 width=303 style='border-top:none;border-left:none;
  width:227pt'&gt;Converts a to a floating-point number.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 101.23;
  print(float(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;101.23&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;4&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;complex(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to a
  complex number.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print(complex(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10+0j&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;5&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;str(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to
  string.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print(str(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;6&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;repr(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts object
  a to an expression string.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print(repr(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;7&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;tuple(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to
  tuple.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print((a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;8&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;list(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to
  list.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print([a])&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;[10]&lt;/td&gt;
 &lt;/tr&gt;

==How to execute couple of instructions on console?==
You can execute couple of instructions on console using ;. Write Statement 1;Statement 2;......and then press ''Enter''.
{{#ev:youtube|https://youtu.be/CYQCYvLE22Y|250|right}}









==How to take input from the user?==
We can take input from the user using ''input'' function. For Example : You want the user to input variable ''x'', then write x=input(&quot;Enter the value of x&quot;) and execute. Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNkVLCxZw_jcgyS-bmrIVSP

And when the input you need is of data type other than string. You can do both the input function and data conversion in a single line.
For example:
Consider the program for letting in the patients
'''c=input(&quot;Enter (1/0)&quot;);d=int(c)'''

Instead of using it in two separate lines, combine it into a single line
'''c=int(input(&quot;Enter (1/0)&quot;))'''.

To get two inputs in same line with a space between them split() is used.

a,b=input(&quot;enter a&quot;).split(&quot;enter b&quot;)
----
[[#Top]]

==If statement==
If statement is used to execute set of two contrary statements based on a condition. 

===Syntax===
If (Condition):
    Statement 1
else:
    Statement 2

If 'Condition' is true then 'Statement 1' will be executed otherwise 'Statement 2' will be executed.

Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNhHmg3SkK1uiutigcAbH9K

==Loops==
[[#Top]]&lt;br&gt;
Loops in a programming languages are used to execute set of repetitive statements. For loop and while loop are used extensively to execute a set of looping instructions.

=== For loop Syntax ===
&lt;pre&gt;
for i in range(10): 
    Statement
&lt;/pre&gt;
range(10) indicate that values 0 to 9 will be assigned to the variable i and for each value of i the Statement will be executed, e.g.
&lt;pre&gt;
for i in range(10): 
    print(i)
&lt;/pre&gt;
Output will be
&lt;pre&gt;
0
1
2
3
4
5
6
7
8
9
&lt;/pre&gt;

[[#Top]]

=== While loop Syntax ===
&lt;pre&gt;
intialisation

while(condition):
   Statement
   increment/decrement
&lt;/pre&gt;
e.g.
&lt;pre&gt;
#initialization
i=0
while(i&lt;10): 
    print(i)
    i=i+1
&lt;/pre&gt;
Output will be:
&lt;pre&gt;
0
1
2
3
4
5
6
7
8
9
&lt;/pre&gt;
Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNbl5jkVrrw1E5XSvm3GiCI

[[#TOP]]
==Importance of Indentation in Python==
Indentation is used to indicate to what block of statements belong. Indentation of blocks convey program structure in Python. Indentation in Python is used to refer a group/block of code/statements. In C++ we use { and } (curly brackets) to group a set of statements. But in Python, there are no such brackets used. Instead of such brackets used in other programming languages, we use indentation in Python.
Use tabs,instead of spaces for ease of writing code.

Wrong indentation can lead to syntax error, or makes your output wrong for your logic e.g.
&lt;pre&gt;
#IndentationError: expected an indented block
i=-1
if i&lt;0:
print(&quot;Test successful&quot;)#Wrong indentation 
else:    
    print(&quot;Test failed&quot;)
#Output: IndentationError: expected an indented block
&lt;/pre&gt;
---
&lt;pre&gt;
#Properly Indented code:
i=-1
if i&lt;0:
    print(&quot;Test successful&quot;)#Wrong indentation
else:    
    print(&quot;Test failed&quot;)
#Output:Test successful
&lt;/pre&gt;
---
Logic changed, so output changed, with improper indentation, e.g.
---
&lt;h3&gt;Code : 1&lt;/h3&gt;
&lt;pre&gt;
sum=0
for i in range(5):
    for j in range(5):
        sum+=i
print(sum, end=&quot; &quot;)
#Output: 50
&lt;/pre&gt;
        
&lt;h3&gt;Code : 2&lt;/h3&gt;
&lt;pre&gt;
for i in range(5):
    for j in range(5):
        print(end=&quot; &quot;)
    sum+=i
print(sum, end=&quot; &quot;)
#Output:                          10
&lt;/pre&gt;
{{#ev:youtube|https://youtu.be/pmavoW419Yc|250|right}}&lt;br&gt;

[[#Top]]

==Spyder IDE Black Screen Solution==

----

 This issue is because of ''Help'' screen which is by default open. 
 We need to close it. So here's how you do it-


===Method 1:===

Step 1-    Try by closing current pane for that,  &quot;''press ctrl+shift+F4''&quot;  wait for few seconds things will appear on screen.

Step 2-    If it so than on menu bar go to ''view &gt; panes &gt; help'' unchecked &quot;''Help''&quot; option.

Step 3-    Make sure that &quot;''Help''&quot; under ''view &gt; panes'' is permanently unchecked. And ''Editor, Ipython console, Variable explorer''  are checked. 


===Method 2:===

Step 1-    Open spyder.

Step 2-   On that black screen randomly ''Left click'' on spyder &quot;''Menu bar''&quot; area you will get menu drop downs, You have to find Drop down with &quot;''Panes''&quot; option.

Step 3-   On &quot;''Panes''&quot; drop down unchecked the &quot;''Help''&quot;.

Step 4-   Wait for few seconds Spyder view will appear.

Step 5 -  Make sure that ''&quot;Help&quot;'' under view&gt;panes is permanently unchecked. And ''Editor, Ipython console, variable explorer'' are checked.


[[#Top]]</text>
      <sha1>7dzpmc1xvjt3pm1tzrvksvyiy8bxuvp</sha1>
    </revision>
    <revision>
      <id>3593</id>
      <parentid>3592</parentid>
      <timestamp>2018-09-28T03:26:19Z</timestamp>
      <contributor>
        <username>Sachinkr</username>
        <id>1743</id>
      </contributor>
      <comment>/* Variables Types and Conversion */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="17471">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_2 Contributors of this page]
==Introduction to Python==
Python is a widely used programming language which allows programmers to write the program in fewer lines of code. It was designed by ''Guido van Rossum'' in 1991. Python uses an interpreter instead of compiler.Basically, the main difference between compiler and interpreter is that the compiler takes the code as 'whole' and compiles it. for example, in C language and on the other side in interpreter. For example: languages like Python. It interprets the written code 'line by line', and if somewhere error is found. It stops interpreting the code from there itself. Here, in our course we will be using Spyder IDE. Spyder is an integrated development environment with editing options to assist the programmers in writing programs. Spyder IDE is divided into two panes, one is console and other one is where program is written.

Python works on different platforms (Windows, Mac, Linux, Raspberry Pi, etc).
Python has a simple syntax similar to the English language.
Python has syntax that allows developers to write programs with fewer lines than some other programming languages.
Python runs on an interpreter system, meaning that code can be executed as soon as it is written. This means that prototyping can be very quick.
Python can be treated in a procedural way, an object-orientated way or a functional way.

==Installing Anaconda==
[[#Top]]
This article is all about installing and troubleshooting Anaconda and Spyder on different platforms.

===Windows===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#windows Download Link]. Make sure that you download the version compatible to your operating system architecture. If you have a 64 bit OS then you can download either 64 bit of 32 bit, but if you have 32 bit OS then you should download the 32 bit version only.

Step 2 -&gt; Double click on the .exe file that you downloaded just now and follow the instructions. If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open cmd (go to Start -&gt; then type cmd in the search bar and hit enter). There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

===Mac===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#macos Download Link].

Step 2 -&gt; Double click on the .pkg file that you just downloaded. If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

===Linux===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#linux Download Link].

Step 2 -&gt; Go to the folder where you downloaded the .sh file and type following command 

  '''bash Anaconda-latest-Linux-x86_64.sh'''

If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

==Troubleshooting Spyder==

[[#Top]]

In most of the cases, it happens that Spyder is already running and you have initiated one more instance of it. Please make sure that spyder is not running already.
If you are on Linux OS, please launch spyder through terminal. Just open the terminal and type '''spyder''' and it will launch. When Spyder opens, make sure you see Anaconda with the version written on the Ipython console. If not, try changing the path of your anaconda. Follow these steps according to your OS version.

====Windows====
[https://stackoverflow.com/questions/44597662/conda-command-is-not-recognized-on-windows-10 Click Here]

====Linux====
[https://stackoverflow.com/questions/18675907/how-to-run-conda Click Here]

====Mac====
[https://stackoverflow.com/questions/35246386/conda-command-not-found Click Here]

In most of the cases relaunching Spyder works.
A more general Troubleshoot is present [https://github.com/spyder-ide/spyder/wiki/Troubleshooting-Guide-and-FAQ Here]

==How to run a program in Spyder IDE?==
Go to Run on the menu bar. Click Run-&gt;Run.

[[#TOP]]
==Print statements==
Print statements help to display output on console. 
{{#ev:youtube|https://youtu.be/gECkqaOwyt0|250|right}}

===Syntax===
print()

===How to print a message?===
In order to print a message in Python, write print(&quot;message&quot;).
Single, double, triple quote can be used print()

'''Example:'''

'''Single Quote'''
print('Hello')  
Output: Hello

'''Double Quote'''
print(&quot;Hello&quot;)  
Output: Hello

'''Quote within quote'''
print('Is &quot;Ram&quot; a good boy?')  
Output: Is &quot;Ram&quot; a good boy?

[[#TOP]]
==Escape sequences with strings==

We can use escape sequence within strings to make output more presentable.

'''\n'''  : It will move to next line.

'''\t'''  : It will add tab space(5space)

'''\a'''  : It will play system sound once.

'''Example:'''

Print(&quot;Hi, \n How are you?&quot;)

Output: 

Hi,

How are you?

Print(&quot;Hi, \t How are you?&quot;)

Output: 

Hi, &lt;5 spaces&gt; How are you?

[[File:Escape_Sequence.jpg]]

==Variables==
[[#Top]]
&lt;pre&gt;
Variables are used to store some values. Values can be strings, integers or decimal values.  

Variable Name Rules:
1. Variable name should start with letter or underscore. Variable name cant start with number.
Example:
Valid: JOC, WIKI, JOC_WIKI, _JOC
Invalid: 1JOC, 123WIKI, 0_WIKI

2. Remaining letter other then first one can contain number, underscore.
Example:
JOC1234, WIKI012_1332

3. Variable names are case sensitivities.
Example:
JOC, jOC, joC all are different varibles. 

&lt;/pre&gt;
{{#ev:youtube|https://youtu.be/60iAXH1sm-Y|250|right}}
===How to print a variable?===
In order to print the value of a variable in python, first initialize the variable and then call it where ever you wanna use it. 
&lt;pre&gt;print(variable_name)&lt;/pre&gt;

&lt;pre&gt;For example :
x=2                # x is viable here
print(x)           # calling variable x with print function

a = &quot;JOC&quot;          # a is variable here
b = &quot;_WIKI&quot;        # b is variable here
c = a + b          # c is variable here which will provide addition of variable a and b
&lt;/pre&gt;

===Some facts about Variables===
* If you want to print variable name with a message, you can use , operator. For example : I want to print Hello Simran and Simran has been stored in a variable called ''name''.
  name=&quot;Simran&quot;
  print(&quot;Hello&quot;,name)
* If you change the value of a variable, it will store the latest value. For example :
  name=&quot;Simran&quot;
  name=&quot;Amit&quot;
  If you will execute the command ''print(name)'', Amit will be displayed.
* You can perform operations like addition, subtraction etc only on integral variables.

===Variables Types and Conversion===
&lt;pre&gt;Variable can be decimal, integer and decimal. And they can be inter covered with the help of conversion functions.

Example:
JOC = 5           Save in Memory as 5       # We have variable with name JOC having value 5 here.
JOC = int(5)      Save in Memory as 5       # Here Variable JOC holding integer value of 5. 
JOC = flot(5)     Save in Memory as 5.0     # Here variable JOC holding flot value of 5
JOC = str(5)      Save in Memory as &quot;5&quot;     # Here variable JOC holding string value of 5 or We can say 5 will be treated as string here.
JOC = complex(5)  Save in Memory as (5+0j)  # Here variable JOC holding complex value of 5.
JOC = oct(5)      Save in Memory as 012     # Here variable JOC holding octal representation of 5.
JOC = hex(5)      Save in Memory as 0xa     # Here variable JOC holding hexadecimal representation of 5

There are many more function available in python. You can convert variable as per your requirement.
&lt;/pre&gt;


&lt;h1 style='color:black;font-family:Calibri;font-size:14.0pt;font-weight:800;
font-style:normal'&gt;Conversion Table with Eample&lt;/h1&gt;

&lt;table border=0 cellpadding=0 cellspacing=0 width=656 style='border-collapse:
 collapse;table-layout:fixed;width:492pt'&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6624497 width=63 style='height:15.0pt;width:47pt'&gt;Serial
  No&lt;/td&gt;
  &lt;td class=xl6724497 width=77 style='border-left:none;width:58pt'&gt;Function&lt;/td&gt;
  &lt;td class=xl6724497 width=303 style='border-left:none;width:227pt'&gt;Description&lt;/td&gt;
  &lt;td class=xl6724497 width=162 style='border-left:none;width:122pt'&gt;Example&lt;/td&gt;
  &lt;td class=xl6824497 width=51 style='border-left:none;width:38pt'&gt;Output&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;1&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;int(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to an
  integer.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10.12;
  print(int(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;2&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;long(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a&lt;span
  style='mso-spacerun:yes'&gt;  &lt;/span&gt;to a long integer&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10.12;
  print(long(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;3&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;float(a)&lt;/td&gt;
  &lt;td class=xl6524497 width=303 style='border-top:none;border-left:none;
  width:227pt'&gt;Converts a to a floating-point number.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 101.23;
  print(float(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;101.23&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;4&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;complex(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to a
  complex number.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print(complex(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10+0j&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;5&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;str(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to
  string.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print(str(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;6&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;repr(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts object
  a to an expression string.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print(repr(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;7&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;tuple(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to
  tuple.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print((a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;8&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;list(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to
  list.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print([a])&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;[10]&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;9&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;set(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to
  set.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a =
  set(&amp;quot;10&amp;quot;); print(a)&lt;/td&gt;
  &lt;td class=xl7124497 width=51 style='border-top:none;border-left:none;
  width:38pt'&gt;{'1', '0'}&lt;/td&gt;
 &lt;/tr&gt;

==How to execute couple of instructions on console?==
You can execute couple of instructions on console using ;. Write Statement 1;Statement 2;......and then press ''Enter''.
{{#ev:youtube|https://youtu.be/CYQCYvLE22Y|250|right}}









==How to take input from the user?==
We can take input from the user using ''input'' function. For Example : You want the user to input variable ''x'', then write x=input(&quot;Enter the value of x&quot;) and execute. Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNkVLCxZw_jcgyS-bmrIVSP

And when the input you need is of data type other than string. You can do both the input function and data conversion in a single line.
For example:
Consider the program for letting in the patients
'''c=input(&quot;Enter (1/0)&quot;);d=int(c)'''

Instead of using it in two separate lines, combine it into a single line
'''c=int(input(&quot;Enter (1/0)&quot;))'''.

To get two inputs in same line with a space between them split() is used.

a,b=input(&quot;enter a&quot;).split(&quot;enter b&quot;)
----
[[#Top]]

==If statement==
If statement is used to execute set of two contrary statements based on a condition. 

===Syntax===
If (Condition):
    Statement 1
else:
    Statement 2

If 'Condition' is true then 'Statement 1' will be executed otherwise 'Statement 2' will be executed.

Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNhHmg3SkK1uiutigcAbH9K

==Loops==
[[#Top]]&lt;br&gt;
Loops in a programming languages are used to execute set of repetitive statements. For loop and while loop are used extensively to execute a set of looping instructions.

=== For loop Syntax ===
&lt;pre&gt;
for i in range(10): 
    Statement
&lt;/pre&gt;
range(10) indicate that values 0 to 9 will be assigned to the variable i and for each value of i the Statement will be executed, e.g.
&lt;pre&gt;
for i in range(10): 
    print(i)
&lt;/pre&gt;
Output will be
&lt;pre&gt;
0
1
2
3
4
5
6
7
8
9
&lt;/pre&gt;

[[#Top]]

=== While loop Syntax ===
&lt;pre&gt;
intialisation

while(condition):
   Statement
   increment/decrement
&lt;/pre&gt;
e.g.
&lt;pre&gt;
#initialization
i=0
while(i&lt;10): 
    print(i)
    i=i+1
&lt;/pre&gt;
Output will be:
&lt;pre&gt;
0
1
2
3
4
5
6
7
8
9
&lt;/pre&gt;
Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNbl5jkVrrw1E5XSvm3GiCI

[[#TOP]]
==Importance of Indentation in Python==
Indentation is used to indicate to what block of statements belong. Indentation of blocks convey program structure in Python. Indentation in Python is used to refer a group/block of code/statements. In C++ we use { and } (curly brackets) to group a set of statements. But in Python, there are no such brackets used. Instead of such brackets used in other programming languages, we use indentation in Python.
Use tabs,instead of spaces for ease of writing code.

Wrong indentation can lead to syntax error, or makes your output wrong for your logic e.g.
&lt;pre&gt;
#IndentationError: expected an indented block
i=-1
if i&lt;0:
print(&quot;Test successful&quot;)#Wrong indentation 
else:    
    print(&quot;Test failed&quot;)
#Output: IndentationError: expected an indented block
&lt;/pre&gt;
---
&lt;pre&gt;
#Properly Indented code:
i=-1
if i&lt;0:
    print(&quot;Test successful&quot;)#Wrong indentation
else:    
    print(&quot;Test failed&quot;)
#Output:Test successful
&lt;/pre&gt;
---
Logic changed, so output changed, with improper indentation, e.g.
---
&lt;h3&gt;Code : 1&lt;/h3&gt;
&lt;pre&gt;
sum=0
for i in range(5):
    for j in range(5):
        sum+=i
print(sum, end=&quot; &quot;)
#Output: 50
&lt;/pre&gt;
        
&lt;h3&gt;Code : 2&lt;/h3&gt;
&lt;pre&gt;
for i in range(5):
    for j in range(5):
        print(end=&quot; &quot;)
    sum+=i
print(sum, end=&quot; &quot;)
#Output:                          10
&lt;/pre&gt;
{{#ev:youtube|https://youtu.be/pmavoW419Yc|250|right}}&lt;br&gt;

[[#Top]]

==Spyder IDE Black Screen Solution==

----

 This issue is because of ''Help'' screen which is by default open. 
 We need to close it. So here's how you do it-


===Method 1:===

Step 1-    Try by closing current pane for that,  &quot;''press ctrl+shift+F4''&quot;  wait for few seconds things will appear on screen.

Step 2-    If it so than on menu bar go to ''view &gt; panes &gt; help'' unchecked &quot;''Help''&quot; option.

Step 3-    Make sure that &quot;''Help''&quot; under ''view &gt; panes'' is permanently unchecked. And ''Editor, Ipython console, Variable explorer''  are checked. 


===Method 2:===

Step 1-    Open spyder.

Step 2-   On that black screen randomly ''Left click'' on spyder &quot;''Menu bar''&quot; area you will get menu drop downs, You have to find Drop down with &quot;''Panes''&quot; option.

Step 3-   On &quot;''Panes''&quot; drop down unchecked the &quot;''Help''&quot;.

Step 4-   Wait for few seconds Spyder view will appear.

Step 5 -  Make sure that ''&quot;Help&quot;'' under view&gt;panes is permanently unchecked. And ''Editor, Ipython console, variable explorer'' are checked.


[[#Top]]</text>
      <sha1>lj1qg2bt1he00144j8ox2v6bx1bhbkg</sha1>
    </revision>
    <revision>
      <id>3594</id>
      <parentid>3593</parentid>
      <timestamp>2018-09-28T03:26:36Z</timestamp>
      <contributor>
        <username>Sachinkr</username>
        <id>1743</id>
      </contributor>
      <comment>/* Variables Types and Conversion */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="17937">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_2 Contributors of this page]
==Introduction to Python==
Python is a widely used programming language which allows programmers to write the program in fewer lines of code. It was designed by ''Guido van Rossum'' in 1991. Python uses an interpreter instead of compiler.Basically, the main difference between compiler and interpreter is that the compiler takes the code as 'whole' and compiles it. for example, in C language and on the other side in interpreter. For example: languages like Python. It interprets the written code 'line by line', and if somewhere error is found. It stops interpreting the code from there itself. Here, in our course we will be using Spyder IDE. Spyder is an integrated development environment with editing options to assist the programmers in writing programs. Spyder IDE is divided into two panes, one is console and other one is where program is written.

Python works on different platforms (Windows, Mac, Linux, Raspberry Pi, etc).
Python has a simple syntax similar to the English language.
Python has syntax that allows developers to write programs with fewer lines than some other programming languages.
Python runs on an interpreter system, meaning that code can be executed as soon as it is written. This means that prototyping can be very quick.
Python can be treated in a procedural way, an object-orientated way or a functional way.

==Installing Anaconda==
[[#Top]]
This article is all about installing and troubleshooting Anaconda and Spyder on different platforms.

===Windows===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#windows Download Link]. Make sure that you download the version compatible to your operating system architecture. If you have a 64 bit OS then you can download either 64 bit of 32 bit, but if you have 32 bit OS then you should download the 32 bit version only.

Step 2 -&gt; Double click on the .exe file that you downloaded just now and follow the instructions. If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open cmd (go to Start -&gt; then type cmd in the search bar and hit enter). There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

===Mac===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#macos Download Link].

Step 2 -&gt; Double click on the .pkg file that you just downloaded. If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

===Linux===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#linux Download Link].

Step 2 -&gt; Go to the folder where you downloaded the .sh file and type following command 

  '''bash Anaconda-latest-Linux-x86_64.sh'''

If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

==Troubleshooting Spyder==

[[#Top]]

In most of the cases, it happens that Spyder is already running and you have initiated one more instance of it. Please make sure that spyder is not running already.
If you are on Linux OS, please launch spyder through terminal. Just open the terminal and type '''spyder''' and it will launch. When Spyder opens, make sure you see Anaconda with the version written on the Ipython console. If not, try changing the path of your anaconda. Follow these steps according to your OS version.

====Windows====
[https://stackoverflow.com/questions/44597662/conda-command-is-not-recognized-on-windows-10 Click Here]

====Linux====
[https://stackoverflow.com/questions/18675907/how-to-run-conda Click Here]

====Mac====
[https://stackoverflow.com/questions/35246386/conda-command-not-found Click Here]

In most of the cases relaunching Spyder works.
A more general Troubleshoot is present [https://github.com/spyder-ide/spyder/wiki/Troubleshooting-Guide-and-FAQ Here]

==How to run a program in Spyder IDE?==
Go to Run on the menu bar. Click Run-&gt;Run.

[[#TOP]]
==Print statements==
Print statements help to display output on console. 
{{#ev:youtube|https://youtu.be/gECkqaOwyt0|250|right}}

===Syntax===
print()

===How to print a message?===
In order to print a message in Python, write print(&quot;message&quot;).
Single, double, triple quote can be used print()

'''Example:'''

'''Single Quote'''
print('Hello')  
Output: Hello

'''Double Quote'''
print(&quot;Hello&quot;)  
Output: Hello

'''Quote within quote'''
print('Is &quot;Ram&quot; a good boy?')  
Output: Is &quot;Ram&quot; a good boy?

[[#TOP]]
==Escape sequences with strings==

We can use escape sequence within strings to make output more presentable.

'''\n'''  : It will move to next line.

'''\t'''  : It will add tab space(5space)

'''\a'''  : It will play system sound once.

'''Example:'''

Print(&quot;Hi, \n How are you?&quot;)

Output: 

Hi,

How are you?

Print(&quot;Hi, \t How are you?&quot;)

Output: 

Hi, &lt;5 spaces&gt; How are you?

[[File:Escape_Sequence.jpg]]

==Variables==
[[#Top]]
&lt;pre&gt;
Variables are used to store some values. Values can be strings, integers or decimal values.  

Variable Name Rules:
1. Variable name should start with letter or underscore. Variable name cant start with number.
Example:
Valid: JOC, WIKI, JOC_WIKI, _JOC
Invalid: 1JOC, 123WIKI, 0_WIKI

2. Remaining letter other then first one can contain number, underscore.
Example:
JOC1234, WIKI012_1332

3. Variable names are case sensitivities.
Example:
JOC, jOC, joC all are different varibles. 

&lt;/pre&gt;
{{#ev:youtube|https://youtu.be/60iAXH1sm-Y|250|right}}
===How to print a variable?===
In order to print the value of a variable in python, first initialize the variable and then call it where ever you wanna use it. 
&lt;pre&gt;print(variable_name)&lt;/pre&gt;

&lt;pre&gt;For example :
x=2                # x is viable here
print(x)           # calling variable x with print function

a = &quot;JOC&quot;          # a is variable here
b = &quot;_WIKI&quot;        # b is variable here
c = a + b          # c is variable here which will provide addition of variable a and b
&lt;/pre&gt;

===Some facts about Variables===
* If you want to print variable name with a message, you can use , operator. For example : I want to print Hello Simran and Simran has been stored in a variable called ''name''.
  name=&quot;Simran&quot;
  print(&quot;Hello&quot;,name)
* If you change the value of a variable, it will store the latest value. For example :
  name=&quot;Simran&quot;
  name=&quot;Amit&quot;
  If you will execute the command ''print(name)'', Amit will be displayed.
* You can perform operations like addition, subtraction etc only on integral variables.

===Variables Types and Conversion===
&lt;pre&gt;Variable can be decimal, integer and decimal. And they can be inter covered with the help of conversion functions.

Example:
JOC = 5           Save in Memory as 5       # We have variable with name JOC having value 5 here.
JOC = int(5)      Save in Memory as 5       # Here Variable JOC holding integer value of 5. 
JOC = flot(5)     Save in Memory as 5.0     # Here variable JOC holding flot value of 5
JOC = str(5)      Save in Memory as &quot;5&quot;     # Here variable JOC holding string value of 5 or We can say 5 will be treated as string here.
JOC = complex(5)  Save in Memory as (5+0j)  # Here variable JOC holding complex value of 5.
JOC = oct(5)      Save in Memory as 012     # Here variable JOC holding octal representation of 5.
JOC = hex(5)      Save in Memory as 0xa     # Here variable JOC holding hexadecimal representation of 5

There are many more function available in python. You can convert variable as per your requirement.
&lt;/pre&gt;


&lt;h1 style='color:black;font-family:Calibri;font-size:14.0pt;font-weight:800;
font-style:normal'&gt;Conversion Table with Eample&lt;/h1&gt;

&lt;table border=0 cellpadding=0 cellspacing=0 width=656 style='border-collapse:
 collapse;table-layout:fixed;width:492pt'&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6624497 width=63 style='height:15.0pt;width:47pt'&gt;Serial
  No&lt;/td&gt;
  &lt;td class=xl6724497 width=77 style='border-left:none;width:58pt'&gt;Function&lt;/td&gt;
  &lt;td class=xl6724497 width=303 style='border-left:none;width:227pt'&gt;Description&lt;/td&gt;
  &lt;td class=xl6724497 width=162 style='border-left:none;width:122pt'&gt;Example&lt;/td&gt;
  &lt;td class=xl6824497 width=51 style='border-left:none;width:38pt'&gt;Output&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;1&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;int(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to an
  integer.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10.12;
  print(int(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;2&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;long(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a&lt;span
  style='mso-spacerun:yes'&gt;  &lt;/span&gt;to a long integer&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10.12;
  print(long(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;3&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;float(a)&lt;/td&gt;
  &lt;td class=xl6524497 width=303 style='border-top:none;border-left:none;
  width:227pt'&gt;Converts a to a floating-point number.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 101.23;
  print(float(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;101.23&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;4&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;complex(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to a
  complex number.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print(complex(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10+0j&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;5&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;str(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to
  string.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print(str(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;6&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;repr(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts object
  a to an expression string.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print(repr(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;7&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;tuple(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to
  tuple.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print((a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;8&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;list(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to
  list.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print([a])&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;[10]&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;9&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;set(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to
  set.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a =
  set(&amp;quot;10&amp;quot;); print(a)&lt;/td&gt;
  &lt;td class=xl7124497 width=51 style='border-top:none;border-left:none;
  width:38pt'&gt;{'1', '0'}&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;10&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;dict(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to
  dictonary&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = dict(a=10);
  print(a)&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;{'a': 10}&lt;/td&gt;
 &lt;/tr&gt;

==How to execute couple of instructions on console?==
You can execute couple of instructions on console using ;. Write Statement 1;Statement 2;......and then press ''Enter''.
{{#ev:youtube|https://youtu.be/CYQCYvLE22Y|250|right}}









==How to take input from the user?==
We can take input from the user using ''input'' function. For Example : You want the user to input variable ''x'', then write x=input(&quot;Enter the value of x&quot;) and execute. Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNkVLCxZw_jcgyS-bmrIVSP

And when the input you need is of data type other than string. You can do both the input function and data conversion in a single line.
For example:
Consider the program for letting in the patients
'''c=input(&quot;Enter (1/0)&quot;);d=int(c)'''

Instead of using it in two separate lines, combine it into a single line
'''c=int(input(&quot;Enter (1/0)&quot;))'''.

To get two inputs in same line with a space between them split() is used.

a,b=input(&quot;enter a&quot;).split(&quot;enter b&quot;)
----
[[#Top]]

==If statement==
If statement is used to execute set of two contrary statements based on a condition. 

===Syntax===
If (Condition):
    Statement 1
else:
    Statement 2

If 'Condition' is true then 'Statement 1' will be executed otherwise 'Statement 2' will be executed.

Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNhHmg3SkK1uiutigcAbH9K

==Loops==
[[#Top]]&lt;br&gt;
Loops in a programming languages are used to execute set of repetitive statements. For loop and while loop are used extensively to execute a set of looping instructions.

=== For loop Syntax ===
&lt;pre&gt;
for i in range(10): 
    Statement
&lt;/pre&gt;
range(10) indicate that values 0 to 9 will be assigned to the variable i and for each value of i the Statement will be executed, e.g.
&lt;pre&gt;
for i in range(10): 
    print(i)
&lt;/pre&gt;
Output will be
&lt;pre&gt;
0
1
2
3
4
5
6
7
8
9
&lt;/pre&gt;

[[#Top]]

=== While loop Syntax ===
&lt;pre&gt;
intialisation

while(condition):
   Statement
   increment/decrement
&lt;/pre&gt;
e.g.
&lt;pre&gt;
#initialization
i=0
while(i&lt;10): 
    print(i)
    i=i+1
&lt;/pre&gt;
Output will be:
&lt;pre&gt;
0
1
2
3
4
5
6
7
8
9
&lt;/pre&gt;
Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNbl5jkVrrw1E5XSvm3GiCI

[[#TOP]]
==Importance of Indentation in Python==
Indentation is used to indicate to what block of statements belong. Indentation of blocks convey program structure in Python. Indentation in Python is used to refer a group/block of code/statements. In C++ we use { and } (curly brackets) to group a set of statements. But in Python, there are no such brackets used. Instead of such brackets used in other programming languages, we use indentation in Python.
Use tabs,instead of spaces for ease of writing code.

Wrong indentation can lead to syntax error, or makes your output wrong for your logic e.g.
&lt;pre&gt;
#IndentationError: expected an indented block
i=-1
if i&lt;0:
print(&quot;Test successful&quot;)#Wrong indentation 
else:    
    print(&quot;Test failed&quot;)
#Output: IndentationError: expected an indented block
&lt;/pre&gt;
---
&lt;pre&gt;
#Properly Indented code:
i=-1
if i&lt;0:
    print(&quot;Test successful&quot;)#Wrong indentation
else:    
    print(&quot;Test failed&quot;)
#Output:Test successful
&lt;/pre&gt;
---
Logic changed, so output changed, with improper indentation, e.g.
---
&lt;h3&gt;Code : 1&lt;/h3&gt;
&lt;pre&gt;
sum=0
for i in range(5):
    for j in range(5):
        sum+=i
print(sum, end=&quot; &quot;)
#Output: 50
&lt;/pre&gt;
        
&lt;h3&gt;Code : 2&lt;/h3&gt;
&lt;pre&gt;
for i in range(5):
    for j in range(5):
        print(end=&quot; &quot;)
    sum+=i
print(sum, end=&quot; &quot;)
#Output:                          10
&lt;/pre&gt;
{{#ev:youtube|https://youtu.be/pmavoW419Yc|250|right}}&lt;br&gt;

[[#Top]]

==Spyder IDE Black Screen Solution==

----

 This issue is because of ''Help'' screen which is by default open. 
 We need to close it. So here's how you do it-


===Method 1:===

Step 1-    Try by closing current pane for that,  &quot;''press ctrl+shift+F4''&quot;  wait for few seconds things will appear on screen.

Step 2-    If it so than on menu bar go to ''view &gt; panes &gt; help'' unchecked &quot;''Help''&quot; option.

Step 3-    Make sure that &quot;''Help''&quot; under ''view &gt; panes'' is permanently unchecked. And ''Editor, Ipython console, Variable explorer''  are checked. 


===Method 2:===

Step 1-    Open spyder.

Step 2-   On that black screen randomly ''Left click'' on spyder &quot;''Menu bar''&quot; area you will get menu drop downs, You have to find Drop down with &quot;''Panes''&quot; option.

Step 3-   On &quot;''Panes''&quot; drop down unchecked the &quot;''Help''&quot;.

Step 4-   Wait for few seconds Spyder view will appear.

Step 5 -  Make sure that ''&quot;Help&quot;'' under view&gt;panes is permanently unchecked. And ''Editor, Ipython console, variable explorer'' are checked.


[[#Top]]</text>
      <sha1>3cvsrws25fh0fdahrz3d7em53ze0dfl</sha1>
    </revision>
    <revision>
      <id>3595</id>
      <parentid>3594</parentid>
      <timestamp>2018-09-28T03:26:53Z</timestamp>
      <contributor>
        <username>Sachinkr</username>
        <id>1743</id>
      </contributor>
      <comment>/* Variables Types and Conversion */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="18403">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_2 Contributors of this page]
==Introduction to Python==
Python is a widely used programming language which allows programmers to write the program in fewer lines of code. It was designed by ''Guido van Rossum'' in 1991. Python uses an interpreter instead of compiler.Basically, the main difference between compiler and interpreter is that the compiler takes the code as 'whole' and compiles it. for example, in C language and on the other side in interpreter. For example: languages like Python. It interprets the written code 'line by line', and if somewhere error is found. It stops interpreting the code from there itself. Here, in our course we will be using Spyder IDE. Spyder is an integrated development environment with editing options to assist the programmers in writing programs. Spyder IDE is divided into two panes, one is console and other one is where program is written.

Python works on different platforms (Windows, Mac, Linux, Raspberry Pi, etc).
Python has a simple syntax similar to the English language.
Python has syntax that allows developers to write programs with fewer lines than some other programming languages.
Python runs on an interpreter system, meaning that code can be executed as soon as it is written. This means that prototyping can be very quick.
Python can be treated in a procedural way, an object-orientated way or a functional way.

==Installing Anaconda==
[[#Top]]
This article is all about installing and troubleshooting Anaconda and Spyder on different platforms.

===Windows===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#windows Download Link]. Make sure that you download the version compatible to your operating system architecture. If you have a 64 bit OS then you can download either 64 bit of 32 bit, but if you have 32 bit OS then you should download the 32 bit version only.

Step 2 -&gt; Double click on the .exe file that you downloaded just now and follow the instructions. If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open cmd (go to Start -&gt; then type cmd in the search bar and hit enter). There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

===Mac===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#macos Download Link].

Step 2 -&gt; Double click on the .pkg file that you just downloaded. If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

===Linux===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#linux Download Link].

Step 2 -&gt; Go to the folder where you downloaded the .sh file and type following command 

  '''bash Anaconda-latest-Linux-x86_64.sh'''

If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

==Troubleshooting Spyder==

[[#Top]]

In most of the cases, it happens that Spyder is already running and you have initiated one more instance of it. Please make sure that spyder is not running already.
If you are on Linux OS, please launch spyder through terminal. Just open the terminal and type '''spyder''' and it will launch. When Spyder opens, make sure you see Anaconda with the version written on the Ipython console. If not, try changing the path of your anaconda. Follow these steps according to your OS version.

====Windows====
[https://stackoverflow.com/questions/44597662/conda-command-is-not-recognized-on-windows-10 Click Here]

====Linux====
[https://stackoverflow.com/questions/18675907/how-to-run-conda Click Here]

====Mac====
[https://stackoverflow.com/questions/35246386/conda-command-not-found Click Here]

In most of the cases relaunching Spyder works.
A more general Troubleshoot is present [https://github.com/spyder-ide/spyder/wiki/Troubleshooting-Guide-and-FAQ Here]

==How to run a program in Spyder IDE?==
Go to Run on the menu bar. Click Run-&gt;Run.

[[#TOP]]
==Print statements==
Print statements help to display output on console. 
{{#ev:youtube|https://youtu.be/gECkqaOwyt0|250|right}}

===Syntax===
print()

===How to print a message?===
In order to print a message in Python, write print(&quot;message&quot;).
Single, double, triple quote can be used print()

'''Example:'''

'''Single Quote'''
print('Hello')  
Output: Hello

'''Double Quote'''
print(&quot;Hello&quot;)  
Output: Hello

'''Quote within quote'''
print('Is &quot;Ram&quot; a good boy?')  
Output: Is &quot;Ram&quot; a good boy?

[[#TOP]]
==Escape sequences with strings==

We can use escape sequence within strings to make output more presentable.

'''\n'''  : It will move to next line.

'''\t'''  : It will add tab space(5space)

'''\a'''  : It will play system sound once.

'''Example:'''

Print(&quot;Hi, \n How are you?&quot;)

Output: 

Hi,

How are you?

Print(&quot;Hi, \t How are you?&quot;)

Output: 

Hi, &lt;5 spaces&gt; How are you?

[[File:Escape_Sequence.jpg]]

==Variables==
[[#Top]]
&lt;pre&gt;
Variables are used to store some values. Values can be strings, integers or decimal values.  

Variable Name Rules:
1. Variable name should start with letter or underscore. Variable name cant start with number.
Example:
Valid: JOC, WIKI, JOC_WIKI, _JOC
Invalid: 1JOC, 123WIKI, 0_WIKI

2. Remaining letter other then first one can contain number, underscore.
Example:
JOC1234, WIKI012_1332

3. Variable names are case sensitivities.
Example:
JOC, jOC, joC all are different varibles. 

&lt;/pre&gt;
{{#ev:youtube|https://youtu.be/60iAXH1sm-Y|250|right}}
===How to print a variable?===
In order to print the value of a variable in python, first initialize the variable and then call it where ever you wanna use it. 
&lt;pre&gt;print(variable_name)&lt;/pre&gt;

&lt;pre&gt;For example :
x=2                # x is viable here
print(x)           # calling variable x with print function

a = &quot;JOC&quot;          # a is variable here
b = &quot;_WIKI&quot;        # b is variable here
c = a + b          # c is variable here which will provide addition of variable a and b
&lt;/pre&gt;

===Some facts about Variables===
* If you want to print variable name with a message, you can use , operator. For example : I want to print Hello Simran and Simran has been stored in a variable called ''name''.
  name=&quot;Simran&quot;
  print(&quot;Hello&quot;,name)
* If you change the value of a variable, it will store the latest value. For example :
  name=&quot;Simran&quot;
  name=&quot;Amit&quot;
  If you will execute the command ''print(name)'', Amit will be displayed.
* You can perform operations like addition, subtraction etc only on integral variables.

===Variables Types and Conversion===
&lt;pre&gt;Variable can be decimal, integer and decimal. And they can be inter covered with the help of conversion functions.

Example:
JOC = 5           Save in Memory as 5       # We have variable with name JOC having value 5 here.
JOC = int(5)      Save in Memory as 5       # Here Variable JOC holding integer value of 5. 
JOC = flot(5)     Save in Memory as 5.0     # Here variable JOC holding flot value of 5
JOC = str(5)      Save in Memory as &quot;5&quot;     # Here variable JOC holding string value of 5 or We can say 5 will be treated as string here.
JOC = complex(5)  Save in Memory as (5+0j)  # Here variable JOC holding complex value of 5.
JOC = oct(5)      Save in Memory as 012     # Here variable JOC holding octal representation of 5.
JOC = hex(5)      Save in Memory as 0xa     # Here variable JOC holding hexadecimal representation of 5

There are many more function available in python. You can convert variable as per your requirement.
&lt;/pre&gt;


&lt;h1 style='color:black;font-family:Calibri;font-size:14.0pt;font-weight:800;
font-style:normal'&gt;Conversion Table with Eample&lt;/h1&gt;

&lt;table border=0 cellpadding=0 cellspacing=0 width=656 style='border-collapse:
 collapse;table-layout:fixed;width:492pt'&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6624497 width=63 style='height:15.0pt;width:47pt'&gt;Serial
  No&lt;/td&gt;
  &lt;td class=xl6724497 width=77 style='border-left:none;width:58pt'&gt;Function&lt;/td&gt;
  &lt;td class=xl6724497 width=303 style='border-left:none;width:227pt'&gt;Description&lt;/td&gt;
  &lt;td class=xl6724497 width=162 style='border-left:none;width:122pt'&gt;Example&lt;/td&gt;
  &lt;td class=xl6824497 width=51 style='border-left:none;width:38pt'&gt;Output&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;1&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;int(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to an
  integer.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10.12;
  print(int(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;2&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;long(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a&lt;span
  style='mso-spacerun:yes'&gt;  &lt;/span&gt;to a long integer&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10.12;
  print(long(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;3&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;float(a)&lt;/td&gt;
  &lt;td class=xl6524497 width=303 style='border-top:none;border-left:none;
  width:227pt'&gt;Converts a to a floating-point number.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 101.23;
  print(float(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;101.23&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;4&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;complex(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to a
  complex number.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print(complex(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10+0j&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;5&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;str(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to
  string.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print(str(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;6&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;repr(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts object
  a to an expression string.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print(repr(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;7&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;tuple(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to
  tuple.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print((a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;8&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;list(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to
  list.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print([a])&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;[10]&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;9&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;set(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to
  set.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a =
  set(&amp;quot;10&amp;quot;); print(a)&lt;/td&gt;
  &lt;td class=xl7124497 width=51 style='border-top:none;border-left:none;
  width:38pt'&gt;{'1', '0'}&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;10&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;dict(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to
  dictonary&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = dict(a=10);
  print(a)&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;{'a': 10}&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;11&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;chr(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts an
  integer to a character.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 97;
  print(chr(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;a&lt;/td&gt;
 &lt;/tr&gt;

==How to execute couple of instructions on console?==
You can execute couple of instructions on console using ;. Write Statement 1;Statement 2;......and then press ''Enter''.
{{#ev:youtube|https://youtu.be/CYQCYvLE22Y|250|right}}









==How to take input from the user?==
We can take input from the user using ''input'' function. For Example : You want the user to input variable ''x'', then write x=input(&quot;Enter the value of x&quot;) and execute. Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNkVLCxZw_jcgyS-bmrIVSP

And when the input you need is of data type other than string. You can do both the input function and data conversion in a single line.
For example:
Consider the program for letting in the patients
'''c=input(&quot;Enter (1/0)&quot;);d=int(c)'''

Instead of using it in two separate lines, combine it into a single line
'''c=int(input(&quot;Enter (1/0)&quot;))'''.

To get two inputs in same line with a space between them split() is used.

a,b=input(&quot;enter a&quot;).split(&quot;enter b&quot;)
----
[[#Top]]

==If statement==
If statement is used to execute set of two contrary statements based on a condition. 

===Syntax===
If (Condition):
    Statement 1
else:
    Statement 2

If 'Condition' is true then 'Statement 1' will be executed otherwise 'Statement 2' will be executed.

Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNhHmg3SkK1uiutigcAbH9K

==Loops==
[[#Top]]&lt;br&gt;
Loops in a programming languages are used to execute set of repetitive statements. For loop and while loop are used extensively to execute a set of looping instructions.

=== For loop Syntax ===
&lt;pre&gt;
for i in range(10): 
    Statement
&lt;/pre&gt;
range(10) indicate that values 0 to 9 will be assigned to the variable i and for each value of i the Statement will be executed, e.g.
&lt;pre&gt;
for i in range(10): 
    print(i)
&lt;/pre&gt;
Output will be
&lt;pre&gt;
0
1
2
3
4
5
6
7
8
9
&lt;/pre&gt;

[[#Top]]

=== While loop Syntax ===
&lt;pre&gt;
intialisation

while(condition):
   Statement
   increment/decrement
&lt;/pre&gt;
e.g.
&lt;pre&gt;
#initialization
i=0
while(i&lt;10): 
    print(i)
    i=i+1
&lt;/pre&gt;
Output will be:
&lt;pre&gt;
0
1
2
3
4
5
6
7
8
9
&lt;/pre&gt;
Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNbl5jkVrrw1E5XSvm3GiCI

[[#TOP]]
==Importance of Indentation in Python==
Indentation is used to indicate to what block of statements belong. Indentation of blocks convey program structure in Python. Indentation in Python is used to refer a group/block of code/statements. In C++ we use { and } (curly brackets) to group a set of statements. But in Python, there are no such brackets used. Instead of such brackets used in other programming languages, we use indentation in Python.
Use tabs,instead of spaces for ease of writing code.

Wrong indentation can lead to syntax error, or makes your output wrong for your logic e.g.
&lt;pre&gt;
#IndentationError: expected an indented block
i=-1
if i&lt;0:
print(&quot;Test successful&quot;)#Wrong indentation 
else:    
    print(&quot;Test failed&quot;)
#Output: IndentationError: expected an indented block
&lt;/pre&gt;
---
&lt;pre&gt;
#Properly Indented code:
i=-1
if i&lt;0:
    print(&quot;Test successful&quot;)#Wrong indentation
else:    
    print(&quot;Test failed&quot;)
#Output:Test successful
&lt;/pre&gt;
---
Logic changed, so output changed, with improper indentation, e.g.
---
&lt;h3&gt;Code : 1&lt;/h3&gt;
&lt;pre&gt;
sum=0
for i in range(5):
    for j in range(5):
        sum+=i
print(sum, end=&quot; &quot;)
#Output: 50
&lt;/pre&gt;
        
&lt;h3&gt;Code : 2&lt;/h3&gt;
&lt;pre&gt;
for i in range(5):
    for j in range(5):
        print(end=&quot; &quot;)
    sum+=i
print(sum, end=&quot; &quot;)
#Output:                          10
&lt;/pre&gt;
{{#ev:youtube|https://youtu.be/pmavoW419Yc|250|right}}&lt;br&gt;

[[#Top]]

==Spyder IDE Black Screen Solution==

----

 This issue is because of ''Help'' screen which is by default open. 
 We need to close it. So here's how you do it-


===Method 1:===

Step 1-    Try by closing current pane for that,  &quot;''press ctrl+shift+F4''&quot;  wait for few seconds things will appear on screen.

Step 2-    If it so than on menu bar go to ''view &gt; panes &gt; help'' unchecked &quot;''Help''&quot; option.

Step 3-    Make sure that &quot;''Help''&quot; under ''view &gt; panes'' is permanently unchecked. And ''Editor, Ipython console, Variable explorer''  are checked. 


===Method 2:===

Step 1-    Open spyder.

Step 2-   On that black screen randomly ''Left click'' on spyder &quot;''Menu bar''&quot; area you will get menu drop downs, You have to find Drop down with &quot;''Panes''&quot; option.

Step 3-   On &quot;''Panes''&quot; drop down unchecked the &quot;''Help''&quot;.

Step 4-   Wait for few seconds Spyder view will appear.

Step 5 -  Make sure that ''&quot;Help&quot;'' under view&gt;panes is permanently unchecked. And ''Editor, Ipython console, variable explorer'' are checked.


[[#Top]]</text>
      <sha1>115aqjb98jarvehgyyzmbbwsjkh36c4</sha1>
    </revision>
    <revision>
      <id>3596</id>
      <parentid>3595</parentid>
      <timestamp>2018-09-28T03:27:11Z</timestamp>
      <contributor>
        <username>Sachinkr</username>
        <id>1743</id>
      </contributor>
      <comment>/* Variables Types and Conversion */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="18895">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_2 Contributors of this page]
==Introduction to Python==
Python is a widely used programming language which allows programmers to write the program in fewer lines of code. It was designed by ''Guido van Rossum'' in 1991. Python uses an interpreter instead of compiler.Basically, the main difference between compiler and interpreter is that the compiler takes the code as 'whole' and compiles it. for example, in C language and on the other side in interpreter. For example: languages like Python. It interprets the written code 'line by line', and if somewhere error is found. It stops interpreting the code from there itself. Here, in our course we will be using Spyder IDE. Spyder is an integrated development environment with editing options to assist the programmers in writing programs. Spyder IDE is divided into two panes, one is console and other one is where program is written.

Python works on different platforms (Windows, Mac, Linux, Raspberry Pi, etc).
Python has a simple syntax similar to the English language.
Python has syntax that allows developers to write programs with fewer lines than some other programming languages.
Python runs on an interpreter system, meaning that code can be executed as soon as it is written. This means that prototyping can be very quick.
Python can be treated in a procedural way, an object-orientated way or a functional way.

==Installing Anaconda==
[[#Top]]
This article is all about installing and troubleshooting Anaconda and Spyder on different platforms.

===Windows===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#windows Download Link]. Make sure that you download the version compatible to your operating system architecture. If you have a 64 bit OS then you can download either 64 bit of 32 bit, but if you have 32 bit OS then you should download the 32 bit version only.

Step 2 -&gt; Double click on the .exe file that you downloaded just now and follow the instructions. If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open cmd (go to Start -&gt; then type cmd in the search bar and hit enter). There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

===Mac===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#macos Download Link].

Step 2 -&gt; Double click on the .pkg file that you just downloaded. If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

===Linux===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#linux Download Link].

Step 2 -&gt; Go to the folder where you downloaded the .sh file and type following command 

  '''bash Anaconda-latest-Linux-x86_64.sh'''

If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

==Troubleshooting Spyder==

[[#Top]]

In most of the cases, it happens that Spyder is already running and you have initiated one more instance of it. Please make sure that spyder is not running already.
If you are on Linux OS, please launch spyder through terminal. Just open the terminal and type '''spyder''' and it will launch. When Spyder opens, make sure you see Anaconda with the version written on the Ipython console. If not, try changing the path of your anaconda. Follow these steps according to your OS version.

====Windows====
[https://stackoverflow.com/questions/44597662/conda-command-is-not-recognized-on-windows-10 Click Here]

====Linux====
[https://stackoverflow.com/questions/18675907/how-to-run-conda Click Here]

====Mac====
[https://stackoverflow.com/questions/35246386/conda-command-not-found Click Here]

In most of the cases relaunching Spyder works.
A more general Troubleshoot is present [https://github.com/spyder-ide/spyder/wiki/Troubleshooting-Guide-and-FAQ Here]

==How to run a program in Spyder IDE?==
Go to Run on the menu bar. Click Run-&gt;Run.

[[#TOP]]
==Print statements==
Print statements help to display output on console. 
{{#ev:youtube|https://youtu.be/gECkqaOwyt0|250|right}}

===Syntax===
print()

===How to print a message?===
In order to print a message in Python, write print(&quot;message&quot;).
Single, double, triple quote can be used print()

'''Example:'''

'''Single Quote'''
print('Hello')  
Output: Hello

'''Double Quote'''
print(&quot;Hello&quot;)  
Output: Hello

'''Quote within quote'''
print('Is &quot;Ram&quot; a good boy?')  
Output: Is &quot;Ram&quot; a good boy?

[[#TOP]]
==Escape sequences with strings==

We can use escape sequence within strings to make output more presentable.

'''\n'''  : It will move to next line.

'''\t'''  : It will add tab space(5space)

'''\a'''  : It will play system sound once.

'''Example:'''

Print(&quot;Hi, \n How are you?&quot;)

Output: 

Hi,

How are you?

Print(&quot;Hi, \t How are you?&quot;)

Output: 

Hi, &lt;5 spaces&gt; How are you?

[[File:Escape_Sequence.jpg]]

==Variables==
[[#Top]]
&lt;pre&gt;
Variables are used to store some values. Values can be strings, integers or decimal values.  

Variable Name Rules:
1. Variable name should start with letter or underscore. Variable name cant start with number.
Example:
Valid: JOC, WIKI, JOC_WIKI, _JOC
Invalid: 1JOC, 123WIKI, 0_WIKI

2. Remaining letter other then first one can contain number, underscore.
Example:
JOC1234, WIKI012_1332

3. Variable names are case sensitivities.
Example:
JOC, jOC, joC all are different varibles. 

&lt;/pre&gt;
{{#ev:youtube|https://youtu.be/60iAXH1sm-Y|250|right}}
===How to print a variable?===
In order to print the value of a variable in python, first initialize the variable and then call it where ever you wanna use it. 
&lt;pre&gt;print(variable_name)&lt;/pre&gt;

&lt;pre&gt;For example :
x=2                # x is viable here
print(x)           # calling variable x with print function

a = &quot;JOC&quot;          # a is variable here
b = &quot;_WIKI&quot;        # b is variable here
c = a + b          # c is variable here which will provide addition of variable a and b
&lt;/pre&gt;

===Some facts about Variables===
* If you want to print variable name with a message, you can use , operator. For example : I want to print Hello Simran and Simran has been stored in a variable called ''name''.
  name=&quot;Simran&quot;
  print(&quot;Hello&quot;,name)
* If you change the value of a variable, it will store the latest value. For example :
  name=&quot;Simran&quot;
  name=&quot;Amit&quot;
  If you will execute the command ''print(name)'', Amit will be displayed.
* You can perform operations like addition, subtraction etc only on integral variables.

===Variables Types and Conversion===
&lt;pre&gt;Variable can be decimal, integer and decimal. And they can be inter covered with the help of conversion functions.

Example:
JOC = 5           Save in Memory as 5       # We have variable with name JOC having value 5 here.
JOC = int(5)      Save in Memory as 5       # Here Variable JOC holding integer value of 5. 
JOC = flot(5)     Save in Memory as 5.0     # Here variable JOC holding flot value of 5
JOC = str(5)      Save in Memory as &quot;5&quot;     # Here variable JOC holding string value of 5 or We can say 5 will be treated as string here.
JOC = complex(5)  Save in Memory as (5+0j)  # Here variable JOC holding complex value of 5.
JOC = oct(5)      Save in Memory as 012     # Here variable JOC holding octal representation of 5.
JOC = hex(5)      Save in Memory as 0xa     # Here variable JOC holding hexadecimal representation of 5

There are many more function available in python. You can convert variable as per your requirement.
&lt;/pre&gt;


&lt;h1 style='color:black;font-family:Calibri;font-size:14.0pt;font-weight:800;
font-style:normal'&gt;Conversion Table with Eample&lt;/h1&gt;

&lt;table border=0 cellpadding=0 cellspacing=0 width=656 style='border-collapse:
 collapse;table-layout:fixed;width:492pt'&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6624497 width=63 style='height:15.0pt;width:47pt'&gt;Serial
  No&lt;/td&gt;
  &lt;td class=xl6724497 width=77 style='border-left:none;width:58pt'&gt;Function&lt;/td&gt;
  &lt;td class=xl6724497 width=303 style='border-left:none;width:227pt'&gt;Description&lt;/td&gt;
  &lt;td class=xl6724497 width=162 style='border-left:none;width:122pt'&gt;Example&lt;/td&gt;
  &lt;td class=xl6824497 width=51 style='border-left:none;width:38pt'&gt;Output&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;1&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;int(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to an
  integer.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10.12;
  print(int(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;2&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;long(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a&lt;span
  style='mso-spacerun:yes'&gt;  &lt;/span&gt;to a long integer&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10.12;
  print(long(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;3&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;float(a)&lt;/td&gt;
  &lt;td class=xl6524497 width=303 style='border-top:none;border-left:none;
  width:227pt'&gt;Converts a to a floating-point number.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 101.23;
  print(float(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;101.23&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;4&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;complex(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to a
  complex number.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print(complex(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10+0j&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;5&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;str(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to
  string.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print(str(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;6&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;repr(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts object
  a to an expression string.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print(repr(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;7&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;tuple(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to
  tuple.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print((a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;8&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;list(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to
  list.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print([a])&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;[10]&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;9&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;set(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to
  set.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a =
  set(&amp;quot;10&amp;quot;); print(a)&lt;/td&gt;
  &lt;td class=xl7124497 width=51 style='border-top:none;border-left:none;
  width:38pt'&gt;{'1', '0'}&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;10&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;dict(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to
  dictonary&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = dict(a=10);
  print(a)&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;{'a': 10}&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;11&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;chr(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts an
  integer to a character.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 97;
  print(chr(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;a&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;12&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;ord(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a
  single character to its integer value.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a =
  &amp;quot;J&amp;quot;; print(ord(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;74&lt;/td&gt;
 &lt;/tr&gt;

==How to execute couple of instructions on console?==
You can execute couple of instructions on console using ;. Write Statement 1;Statement 2;......and then press ''Enter''.
{{#ev:youtube|https://youtu.be/CYQCYvLE22Y|250|right}}









==How to take input from the user?==
We can take input from the user using ''input'' function. For Example : You want the user to input variable ''x'', then write x=input(&quot;Enter the value of x&quot;) and execute. Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNkVLCxZw_jcgyS-bmrIVSP

And when the input you need is of data type other than string. You can do both the input function and data conversion in a single line.
For example:
Consider the program for letting in the patients
'''c=input(&quot;Enter (1/0)&quot;);d=int(c)'''

Instead of using it in two separate lines, combine it into a single line
'''c=int(input(&quot;Enter (1/0)&quot;))'''.

To get two inputs in same line with a space between them split() is used.

a,b=input(&quot;enter a&quot;).split(&quot;enter b&quot;)
----
[[#Top]]

==If statement==
If statement is used to execute set of two contrary statements based on a condition. 

===Syntax===
If (Condition):
    Statement 1
else:
    Statement 2

If 'Condition' is true then 'Statement 1' will be executed otherwise 'Statement 2' will be executed.

Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNhHmg3SkK1uiutigcAbH9K

==Loops==
[[#Top]]&lt;br&gt;
Loops in a programming languages are used to execute set of repetitive statements. For loop and while loop are used extensively to execute a set of looping instructions.

=== For loop Syntax ===
&lt;pre&gt;
for i in range(10): 
    Statement
&lt;/pre&gt;
range(10) indicate that values 0 to 9 will be assigned to the variable i and for each value of i the Statement will be executed, e.g.
&lt;pre&gt;
for i in range(10): 
    print(i)
&lt;/pre&gt;
Output will be
&lt;pre&gt;
0
1
2
3
4
5
6
7
8
9
&lt;/pre&gt;

[[#Top]]

=== While loop Syntax ===
&lt;pre&gt;
intialisation

while(condition):
   Statement
   increment/decrement
&lt;/pre&gt;
e.g.
&lt;pre&gt;
#initialization
i=0
while(i&lt;10): 
    print(i)
    i=i+1
&lt;/pre&gt;
Output will be:
&lt;pre&gt;
0
1
2
3
4
5
6
7
8
9
&lt;/pre&gt;
Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNbl5jkVrrw1E5XSvm3GiCI

[[#TOP]]
==Importance of Indentation in Python==
Indentation is used to indicate to what block of statements belong. Indentation of blocks convey program structure in Python. Indentation in Python is used to refer a group/block of code/statements. In C++ we use { and } (curly brackets) to group a set of statements. But in Python, there are no such brackets used. Instead of such brackets used in other programming languages, we use indentation in Python.
Use tabs,instead of spaces for ease of writing code.

Wrong indentation can lead to syntax error, or makes your output wrong for your logic e.g.
&lt;pre&gt;
#IndentationError: expected an indented block
i=-1
if i&lt;0:
print(&quot;Test successful&quot;)#Wrong indentation 
else:    
    print(&quot;Test failed&quot;)
#Output: IndentationError: expected an indented block
&lt;/pre&gt;
---
&lt;pre&gt;
#Properly Indented code:
i=-1
if i&lt;0:
    print(&quot;Test successful&quot;)#Wrong indentation
else:    
    print(&quot;Test failed&quot;)
#Output:Test successful
&lt;/pre&gt;
---
Logic changed, so output changed, with improper indentation, e.g.
---
&lt;h3&gt;Code : 1&lt;/h3&gt;
&lt;pre&gt;
sum=0
for i in range(5):
    for j in range(5):
        sum+=i
print(sum, end=&quot; &quot;)
#Output: 50
&lt;/pre&gt;
        
&lt;h3&gt;Code : 2&lt;/h3&gt;
&lt;pre&gt;
for i in range(5):
    for j in range(5):
        print(end=&quot; &quot;)
    sum+=i
print(sum, end=&quot; &quot;)
#Output:                          10
&lt;/pre&gt;
{{#ev:youtube|https://youtu.be/pmavoW419Yc|250|right}}&lt;br&gt;

[[#Top]]

==Spyder IDE Black Screen Solution==

----

 This issue is because of ''Help'' screen which is by default open. 
 We need to close it. So here's how you do it-


===Method 1:===

Step 1-    Try by closing current pane for that,  &quot;''press ctrl+shift+F4''&quot;  wait for few seconds things will appear on screen.

Step 2-    If it so than on menu bar go to ''view &gt; panes &gt; help'' unchecked &quot;''Help''&quot; option.

Step 3-    Make sure that &quot;''Help''&quot; under ''view &gt; panes'' is permanently unchecked. And ''Editor, Ipython console, Variable explorer''  are checked. 


===Method 2:===

Step 1-    Open spyder.

Step 2-   On that black screen randomly ''Left click'' on spyder &quot;''Menu bar''&quot; area you will get menu drop downs, You have to find Drop down with &quot;''Panes''&quot; option.

Step 3-   On &quot;''Panes''&quot; drop down unchecked the &quot;''Help''&quot;.

Step 4-   Wait for few seconds Spyder view will appear.

Step 5 -  Make sure that ''&quot;Help&quot;'' under view&gt;panes is permanently unchecked. And ''Editor, Ipython console, variable explorer'' are checked.


[[#Top]]</text>
      <sha1>0jqwixbapmtufbafa232vmcfrsa26n6</sha1>
    </revision>
    <revision>
      <id>3597</id>
      <parentid>3596</parentid>
      <timestamp>2018-09-28T03:27:29Z</timestamp>
      <contributor>
        <username>Sachinkr</username>
        <id>1743</id>
      </contributor>
      <comment>/* Variables Types and Conversion */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="19372">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_2 Contributors of this page]
==Introduction to Python==
Python is a widely used programming language which allows programmers to write the program in fewer lines of code. It was designed by ''Guido van Rossum'' in 1991. Python uses an interpreter instead of compiler.Basically, the main difference between compiler and interpreter is that the compiler takes the code as 'whole' and compiles it. for example, in C language and on the other side in interpreter. For example: languages like Python. It interprets the written code 'line by line', and if somewhere error is found. It stops interpreting the code from there itself. Here, in our course we will be using Spyder IDE. Spyder is an integrated development environment with editing options to assist the programmers in writing programs. Spyder IDE is divided into two panes, one is console and other one is where program is written.

Python works on different platforms (Windows, Mac, Linux, Raspberry Pi, etc).
Python has a simple syntax similar to the English language.
Python has syntax that allows developers to write programs with fewer lines than some other programming languages.
Python runs on an interpreter system, meaning that code can be executed as soon as it is written. This means that prototyping can be very quick.
Python can be treated in a procedural way, an object-orientated way or a functional way.

==Installing Anaconda==
[[#Top]]
This article is all about installing and troubleshooting Anaconda and Spyder on different platforms.

===Windows===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#windows Download Link]. Make sure that you download the version compatible to your operating system architecture. If you have a 64 bit OS then you can download either 64 bit of 32 bit, but if you have 32 bit OS then you should download the 32 bit version only.

Step 2 -&gt; Double click on the .exe file that you downloaded just now and follow the instructions. If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open cmd (go to Start -&gt; then type cmd in the search bar and hit enter). There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

===Mac===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#macos Download Link].

Step 2 -&gt; Double click on the .pkg file that you just downloaded. If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

===Linux===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#linux Download Link].

Step 2 -&gt; Go to the folder where you downloaded the .sh file and type following command 

  '''bash Anaconda-latest-Linux-x86_64.sh'''

If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

==Troubleshooting Spyder==

[[#Top]]

In most of the cases, it happens that Spyder is already running and you have initiated one more instance of it. Please make sure that spyder is not running already.
If you are on Linux OS, please launch spyder through terminal. Just open the terminal and type '''spyder''' and it will launch. When Spyder opens, make sure you see Anaconda with the version written on the Ipython console. If not, try changing the path of your anaconda. Follow these steps according to your OS version.

====Windows====
[https://stackoverflow.com/questions/44597662/conda-command-is-not-recognized-on-windows-10 Click Here]

====Linux====
[https://stackoverflow.com/questions/18675907/how-to-run-conda Click Here]

====Mac====
[https://stackoverflow.com/questions/35246386/conda-command-not-found Click Here]

In most of the cases relaunching Spyder works.
A more general Troubleshoot is present [https://github.com/spyder-ide/spyder/wiki/Troubleshooting-Guide-and-FAQ Here]

==How to run a program in Spyder IDE?==
Go to Run on the menu bar. Click Run-&gt;Run.

[[#TOP]]
==Print statements==
Print statements help to display output on console. 
{{#ev:youtube|https://youtu.be/gECkqaOwyt0|250|right}}

===Syntax===
print()

===How to print a message?===
In order to print a message in Python, write print(&quot;message&quot;).
Single, double, triple quote can be used print()

'''Example:'''

'''Single Quote'''
print('Hello')  
Output: Hello

'''Double Quote'''
print(&quot;Hello&quot;)  
Output: Hello

'''Quote within quote'''
print('Is &quot;Ram&quot; a good boy?')  
Output: Is &quot;Ram&quot; a good boy?

[[#TOP]]
==Escape sequences with strings==

We can use escape sequence within strings to make output more presentable.

'''\n'''  : It will move to next line.

'''\t'''  : It will add tab space(5space)

'''\a'''  : It will play system sound once.

'''Example:'''

Print(&quot;Hi, \n How are you?&quot;)

Output: 

Hi,

How are you?

Print(&quot;Hi, \t How are you?&quot;)

Output: 

Hi, &lt;5 spaces&gt; How are you?

[[File:Escape_Sequence.jpg]]

==Variables==
[[#Top]]
&lt;pre&gt;
Variables are used to store some values. Values can be strings, integers or decimal values.  

Variable Name Rules:
1. Variable name should start with letter or underscore. Variable name cant start with number.
Example:
Valid: JOC, WIKI, JOC_WIKI, _JOC
Invalid: 1JOC, 123WIKI, 0_WIKI

2. Remaining letter other then first one can contain number, underscore.
Example:
JOC1234, WIKI012_1332

3. Variable names are case sensitivities.
Example:
JOC, jOC, joC all are different varibles. 

&lt;/pre&gt;
{{#ev:youtube|https://youtu.be/60iAXH1sm-Y|250|right}}
===How to print a variable?===
In order to print the value of a variable in python, first initialize the variable and then call it where ever you wanna use it. 
&lt;pre&gt;print(variable_name)&lt;/pre&gt;

&lt;pre&gt;For example :
x=2                # x is viable here
print(x)           # calling variable x with print function

a = &quot;JOC&quot;          # a is variable here
b = &quot;_WIKI&quot;        # b is variable here
c = a + b          # c is variable here which will provide addition of variable a and b
&lt;/pre&gt;

===Some facts about Variables===
* If you want to print variable name with a message, you can use , operator. For example : I want to print Hello Simran and Simran has been stored in a variable called ''name''.
  name=&quot;Simran&quot;
  print(&quot;Hello&quot;,name)
* If you change the value of a variable, it will store the latest value. For example :
  name=&quot;Simran&quot;
  name=&quot;Amit&quot;
  If you will execute the command ''print(name)'', Amit will be displayed.
* You can perform operations like addition, subtraction etc only on integral variables.

===Variables Types and Conversion===
&lt;pre&gt;Variable can be decimal, integer and decimal. And they can be inter covered with the help of conversion functions.

Example:
JOC = 5           Save in Memory as 5       # We have variable with name JOC having value 5 here.
JOC = int(5)      Save in Memory as 5       # Here Variable JOC holding integer value of 5. 
JOC = flot(5)     Save in Memory as 5.0     # Here variable JOC holding flot value of 5
JOC = str(5)      Save in Memory as &quot;5&quot;     # Here variable JOC holding string value of 5 or We can say 5 will be treated as string here.
JOC = complex(5)  Save in Memory as (5+0j)  # Here variable JOC holding complex value of 5.
JOC = oct(5)      Save in Memory as 012     # Here variable JOC holding octal representation of 5.
JOC = hex(5)      Save in Memory as 0xa     # Here variable JOC holding hexadecimal representation of 5

There are many more function available in python. You can convert variable as per your requirement.
&lt;/pre&gt;


&lt;h1 style='color:black;font-family:Calibri;font-size:14.0pt;font-weight:800;
font-style:normal'&gt;Conversion Table with Eample&lt;/h1&gt;

&lt;table border=0 cellpadding=0 cellspacing=0 width=656 style='border-collapse:
 collapse;table-layout:fixed;width:492pt'&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6624497 width=63 style='height:15.0pt;width:47pt'&gt;Serial
  No&lt;/td&gt;
  &lt;td class=xl6724497 width=77 style='border-left:none;width:58pt'&gt;Function&lt;/td&gt;
  &lt;td class=xl6724497 width=303 style='border-left:none;width:227pt'&gt;Description&lt;/td&gt;
  &lt;td class=xl6724497 width=162 style='border-left:none;width:122pt'&gt;Example&lt;/td&gt;
  &lt;td class=xl6824497 width=51 style='border-left:none;width:38pt'&gt;Output&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;1&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;int(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to an
  integer.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10.12;
  print(int(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;2&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;long(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a&lt;span
  style='mso-spacerun:yes'&gt;  &lt;/span&gt;to a long integer&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10.12;
  print(long(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;3&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;float(a)&lt;/td&gt;
  &lt;td class=xl6524497 width=303 style='border-top:none;border-left:none;
  width:227pt'&gt;Converts a to a floating-point number.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 101.23;
  print(float(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;101.23&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;4&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;complex(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to a
  complex number.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print(complex(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10+0j&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;5&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;str(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to
  string.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print(str(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;6&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;repr(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts object
  a to an expression string.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print(repr(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;7&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;tuple(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to
  tuple.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print((a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;8&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;list(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to
  list.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print([a])&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;[10]&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;9&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;set(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to
  set.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a =
  set(&amp;quot;10&amp;quot;); print(a)&lt;/td&gt;
  &lt;td class=xl7124497 width=51 style='border-top:none;border-left:none;
  width:38pt'&gt;{'1', '0'}&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;10&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;dict(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to
  dictonary&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = dict(a=10);
  print(a)&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;{'a': 10}&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;11&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;chr(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts an
  integer to a character.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 97;
  print(chr(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;a&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;12&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;ord(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a
  single character to its integer value.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a =
  &amp;quot;J&amp;quot;; print(ord(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;74&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;13&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;hex(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts an
  integer to a hexadecimal string.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print(hex(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;0xa&lt;/td&gt;
 &lt;/tr&gt;

==How to execute couple of instructions on console?==
You can execute couple of instructions on console using ;. Write Statement 1;Statement 2;......and then press ''Enter''.
{{#ev:youtube|https://youtu.be/CYQCYvLE22Y|250|right}}









==How to take input from the user?==
We can take input from the user using ''input'' function. For Example : You want the user to input variable ''x'', then write x=input(&quot;Enter the value of x&quot;) and execute. Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNkVLCxZw_jcgyS-bmrIVSP

And when the input you need is of data type other than string. You can do both the input function and data conversion in a single line.
For example:
Consider the program for letting in the patients
'''c=input(&quot;Enter (1/0)&quot;);d=int(c)'''

Instead of using it in two separate lines, combine it into a single line
'''c=int(input(&quot;Enter (1/0)&quot;))'''.

To get two inputs in same line with a space between them split() is used.

a,b=input(&quot;enter a&quot;).split(&quot;enter b&quot;)
----
[[#Top]]

==If statement==
If statement is used to execute set of two contrary statements based on a condition. 

===Syntax===
If (Condition):
    Statement 1
else:
    Statement 2

If 'Condition' is true then 'Statement 1' will be executed otherwise 'Statement 2' will be executed.

Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNhHmg3SkK1uiutigcAbH9K

==Loops==
[[#Top]]&lt;br&gt;
Loops in a programming languages are used to execute set of repetitive statements. For loop and while loop are used extensively to execute a set of looping instructions.

=== For loop Syntax ===
&lt;pre&gt;
for i in range(10): 
    Statement
&lt;/pre&gt;
range(10) indicate that values 0 to 9 will be assigned to the variable i and for each value of i the Statement will be executed, e.g.
&lt;pre&gt;
for i in range(10): 
    print(i)
&lt;/pre&gt;
Output will be
&lt;pre&gt;
0
1
2
3
4
5
6
7
8
9
&lt;/pre&gt;

[[#Top]]

=== While loop Syntax ===
&lt;pre&gt;
intialisation

while(condition):
   Statement
   increment/decrement
&lt;/pre&gt;
e.g.
&lt;pre&gt;
#initialization
i=0
while(i&lt;10): 
    print(i)
    i=i+1
&lt;/pre&gt;
Output will be:
&lt;pre&gt;
0
1
2
3
4
5
6
7
8
9
&lt;/pre&gt;
Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNbl5jkVrrw1E5XSvm3GiCI

[[#TOP]]
==Importance of Indentation in Python==
Indentation is used to indicate to what block of statements belong. Indentation of blocks convey program structure in Python. Indentation in Python is used to refer a group/block of code/statements. In C++ we use { and } (curly brackets) to group a set of statements. But in Python, there are no such brackets used. Instead of such brackets used in other programming languages, we use indentation in Python.
Use tabs,instead of spaces for ease of writing code.

Wrong indentation can lead to syntax error, or makes your output wrong for your logic e.g.
&lt;pre&gt;
#IndentationError: expected an indented block
i=-1
if i&lt;0:
print(&quot;Test successful&quot;)#Wrong indentation 
else:    
    print(&quot;Test failed&quot;)
#Output: IndentationError: expected an indented block
&lt;/pre&gt;
---
&lt;pre&gt;
#Properly Indented code:
i=-1
if i&lt;0:
    print(&quot;Test successful&quot;)#Wrong indentation
else:    
    print(&quot;Test failed&quot;)
#Output:Test successful
&lt;/pre&gt;
---
Logic changed, so output changed, with improper indentation, e.g.
---
&lt;h3&gt;Code : 1&lt;/h3&gt;
&lt;pre&gt;
sum=0
for i in range(5):
    for j in range(5):
        sum+=i
print(sum, end=&quot; &quot;)
#Output: 50
&lt;/pre&gt;
        
&lt;h3&gt;Code : 2&lt;/h3&gt;
&lt;pre&gt;
for i in range(5):
    for j in range(5):
        print(end=&quot; &quot;)
    sum+=i
print(sum, end=&quot; &quot;)
#Output:                          10
&lt;/pre&gt;
{{#ev:youtube|https://youtu.be/pmavoW419Yc|250|right}}&lt;br&gt;

[[#Top]]

==Spyder IDE Black Screen Solution==

----

 This issue is because of ''Help'' screen which is by default open. 
 We need to close it. So here's how you do it-


===Method 1:===

Step 1-    Try by closing current pane for that,  &quot;''press ctrl+shift+F4''&quot;  wait for few seconds things will appear on screen.

Step 2-    If it so than on menu bar go to ''view &gt; panes &gt; help'' unchecked &quot;''Help''&quot; option.

Step 3-    Make sure that &quot;''Help''&quot; under ''view &gt; panes'' is permanently unchecked. And ''Editor, Ipython console, Variable explorer''  are checked. 


===Method 2:===

Step 1-    Open spyder.

Step 2-   On that black screen randomly ''Left click'' on spyder &quot;''Menu bar''&quot; area you will get menu drop downs, You have to find Drop down with &quot;''Panes''&quot; option.

Step 3-   On &quot;''Panes''&quot; drop down unchecked the &quot;''Help''&quot;.

Step 4-   Wait for few seconds Spyder view will appear.

Step 5 -  Make sure that ''&quot;Help&quot;'' under view&gt;panes is permanently unchecked. And ''Editor, Ipython console, variable explorer'' are checked.


[[#Top]]</text>
      <sha1>h9nj78yhtxsi48nigxjtngjj2q0itb7</sha1>
    </revision>
    <revision>
      <id>3598</id>
      <parentid>3597</parentid>
      <timestamp>2018-09-28T03:27:45Z</timestamp>
      <contributor>
        <username>Sachinkr</username>
        <id>1743</id>
      </contributor>
      <comment>/* Variables Types and Conversion */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="19847">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_2 Contributors of this page]
==Introduction to Python==
Python is a widely used programming language which allows programmers to write the program in fewer lines of code. It was designed by ''Guido van Rossum'' in 1991. Python uses an interpreter instead of compiler.Basically, the main difference between compiler and interpreter is that the compiler takes the code as 'whole' and compiles it. for example, in C language and on the other side in interpreter. For example: languages like Python. It interprets the written code 'line by line', and if somewhere error is found. It stops interpreting the code from there itself. Here, in our course we will be using Spyder IDE. Spyder is an integrated development environment with editing options to assist the programmers in writing programs. Spyder IDE is divided into two panes, one is console and other one is where program is written.

Python works on different platforms (Windows, Mac, Linux, Raspberry Pi, etc).
Python has a simple syntax similar to the English language.
Python has syntax that allows developers to write programs with fewer lines than some other programming languages.
Python runs on an interpreter system, meaning that code can be executed as soon as it is written. This means that prototyping can be very quick.
Python can be treated in a procedural way, an object-orientated way or a functional way.

==Installing Anaconda==
[[#Top]]
This article is all about installing and troubleshooting Anaconda and Spyder on different platforms.

===Windows===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#windows Download Link]. Make sure that you download the version compatible to your operating system architecture. If you have a 64 bit OS then you can download either 64 bit of 32 bit, but if you have 32 bit OS then you should download the 32 bit version only.

Step 2 -&gt; Double click on the .exe file that you downloaded just now and follow the instructions. If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open cmd (go to Start -&gt; then type cmd in the search bar and hit enter). There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

===Mac===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#macos Download Link].

Step 2 -&gt; Double click on the .pkg file that you just downloaded. If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

===Linux===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#linux Download Link].

Step 2 -&gt; Go to the folder where you downloaded the .sh file and type following command 

  '''bash Anaconda-latest-Linux-x86_64.sh'''

If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

==Troubleshooting Spyder==

[[#Top]]

In most of the cases, it happens that Spyder is already running and you have initiated one more instance of it. Please make sure that spyder is not running already.
If you are on Linux OS, please launch spyder through terminal. Just open the terminal and type '''spyder''' and it will launch. When Spyder opens, make sure you see Anaconda with the version written on the Ipython console. If not, try changing the path of your anaconda. Follow these steps according to your OS version.

====Windows====
[https://stackoverflow.com/questions/44597662/conda-command-is-not-recognized-on-windows-10 Click Here]

====Linux====
[https://stackoverflow.com/questions/18675907/how-to-run-conda Click Here]

====Mac====
[https://stackoverflow.com/questions/35246386/conda-command-not-found Click Here]

In most of the cases relaunching Spyder works.
A more general Troubleshoot is present [https://github.com/spyder-ide/spyder/wiki/Troubleshooting-Guide-and-FAQ Here]

==How to run a program in Spyder IDE?==
Go to Run on the menu bar. Click Run-&gt;Run.

[[#TOP]]
==Print statements==
Print statements help to display output on console. 
{{#ev:youtube|https://youtu.be/gECkqaOwyt0|250|right}}

===Syntax===
print()

===How to print a message?===
In order to print a message in Python, write print(&quot;message&quot;).
Single, double, triple quote can be used print()

'''Example:'''

'''Single Quote'''
print('Hello')  
Output: Hello

'''Double Quote'''
print(&quot;Hello&quot;)  
Output: Hello

'''Quote within quote'''
print('Is &quot;Ram&quot; a good boy?')  
Output: Is &quot;Ram&quot; a good boy?

[[#TOP]]
==Escape sequences with strings==

We can use escape sequence within strings to make output more presentable.

'''\n'''  : It will move to next line.

'''\t'''  : It will add tab space(5space)

'''\a'''  : It will play system sound once.

'''Example:'''

Print(&quot;Hi, \n How are you?&quot;)

Output: 

Hi,

How are you?

Print(&quot;Hi, \t How are you?&quot;)

Output: 

Hi, &lt;5 spaces&gt; How are you?

[[File:Escape_Sequence.jpg]]

==Variables==
[[#Top]]
&lt;pre&gt;
Variables are used to store some values. Values can be strings, integers or decimal values.  

Variable Name Rules:
1. Variable name should start with letter or underscore. Variable name cant start with number.
Example:
Valid: JOC, WIKI, JOC_WIKI, _JOC
Invalid: 1JOC, 123WIKI, 0_WIKI

2. Remaining letter other then first one can contain number, underscore.
Example:
JOC1234, WIKI012_1332

3. Variable names are case sensitivities.
Example:
JOC, jOC, joC all are different varibles. 

&lt;/pre&gt;
{{#ev:youtube|https://youtu.be/60iAXH1sm-Y|250|right}}
===How to print a variable?===
In order to print the value of a variable in python, first initialize the variable and then call it where ever you wanna use it. 
&lt;pre&gt;print(variable_name)&lt;/pre&gt;

&lt;pre&gt;For example :
x=2                # x is viable here
print(x)           # calling variable x with print function

a = &quot;JOC&quot;          # a is variable here
b = &quot;_WIKI&quot;        # b is variable here
c = a + b          # c is variable here which will provide addition of variable a and b
&lt;/pre&gt;

===Some facts about Variables===
* If you want to print variable name with a message, you can use , operator. For example : I want to print Hello Simran and Simran has been stored in a variable called ''name''.
  name=&quot;Simran&quot;
  print(&quot;Hello&quot;,name)
* If you change the value of a variable, it will store the latest value. For example :
  name=&quot;Simran&quot;
  name=&quot;Amit&quot;
  If you will execute the command ''print(name)'', Amit will be displayed.
* You can perform operations like addition, subtraction etc only on integral variables.

===Variables Types and Conversion===
&lt;pre&gt;Variable can be decimal, integer and decimal. And they can be inter covered with the help of conversion functions.

Example:
JOC = 5           Save in Memory as 5       # We have variable with name JOC having value 5 here.
JOC = int(5)      Save in Memory as 5       # Here Variable JOC holding integer value of 5. 
JOC = flot(5)     Save in Memory as 5.0     # Here variable JOC holding flot value of 5
JOC = str(5)      Save in Memory as &quot;5&quot;     # Here variable JOC holding string value of 5 or We can say 5 will be treated as string here.
JOC = complex(5)  Save in Memory as (5+0j)  # Here variable JOC holding complex value of 5.
JOC = oct(5)      Save in Memory as 012     # Here variable JOC holding octal representation of 5.
JOC = hex(5)      Save in Memory as 0xa     # Here variable JOC holding hexadecimal representation of 5

There are many more function available in python. You can convert variable as per your requirement.
&lt;/pre&gt;


&lt;h1 style='color:black;font-family:Calibri;font-size:14.0pt;font-weight:800;
font-style:normal'&gt;Conversion Table with Eample&lt;/h1&gt;

&lt;table border=0 cellpadding=0 cellspacing=0 width=656 style='border-collapse:
 collapse;table-layout:fixed;width:492pt'&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6624497 width=63 style='height:15.0pt;width:47pt'&gt;Serial
  No&lt;/td&gt;
  &lt;td class=xl6724497 width=77 style='border-left:none;width:58pt'&gt;Function&lt;/td&gt;
  &lt;td class=xl6724497 width=303 style='border-left:none;width:227pt'&gt;Description&lt;/td&gt;
  &lt;td class=xl6724497 width=162 style='border-left:none;width:122pt'&gt;Example&lt;/td&gt;
  &lt;td class=xl6824497 width=51 style='border-left:none;width:38pt'&gt;Output&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;1&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;int(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to an
  integer.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10.12;
  print(int(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;2&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;long(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a&lt;span
  style='mso-spacerun:yes'&gt;  &lt;/span&gt;to a long integer&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10.12;
  print(long(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;3&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;float(a)&lt;/td&gt;
  &lt;td class=xl6524497 width=303 style='border-top:none;border-left:none;
  width:227pt'&gt;Converts a to a floating-point number.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 101.23;
  print(float(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;101.23&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;4&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;complex(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to a
  complex number.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print(complex(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10+0j&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;5&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;str(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to
  string.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print(str(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;6&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;repr(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts object
  a to an expression string.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print(repr(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;7&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;tuple(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to
  tuple.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print((a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;8&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;list(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to
  list.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print([a])&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;[10]&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;9&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;set(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to
  set.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a =
  set(&amp;quot;10&amp;quot;); print(a)&lt;/td&gt;
  &lt;td class=xl7124497 width=51 style='border-top:none;border-left:none;
  width:38pt'&gt;{'1', '0'}&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;10&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;dict(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to
  dictonary&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = dict(a=10);
  print(a)&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;{'a': 10}&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;11&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;chr(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts an
  integer to a character.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 97;
  print(chr(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;a&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;12&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;ord(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a
  single character to its integer value.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a =
  &amp;quot;J&amp;quot;; print(ord(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;74&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;13&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;hex(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts an
  integer to a hexadecimal string.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print(hex(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;0xa&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=21 style='height:15.75pt'&gt;
  &lt;td height=21 class=xl7224497 style='height:15.75pt;border-top:none'&gt;14&lt;/td&gt;
  &lt;td class=xl7324497 style='border-top:none;border-left:none'&gt;oct(a)&lt;/td&gt;
  &lt;td class=xl7324497 style='border-top:none;border-left:none'&gt;Converts an
  integer to an octal string.&lt;/td&gt;
  &lt;td class=xl7324497 style='border-top:none;border-left:none'&gt;a = 10;
  print(oct(a))&lt;/td&gt;
  &lt;td class=xl7424497 style='border-top:none;border-left:none'&gt;0o12&lt;/td&gt;
 &lt;/tr&gt;

==How to execute couple of instructions on console?==
You can execute couple of instructions on console using ;. Write Statement 1;Statement 2;......and then press ''Enter''.
{{#ev:youtube|https://youtu.be/CYQCYvLE22Y|250|right}}









==How to take input from the user?==
We can take input from the user using ''input'' function. For Example : You want the user to input variable ''x'', then write x=input(&quot;Enter the value of x&quot;) and execute. Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNkVLCxZw_jcgyS-bmrIVSP

And when the input you need is of data type other than string. You can do both the input function and data conversion in a single line.
For example:
Consider the program for letting in the patients
'''c=input(&quot;Enter (1/0)&quot;);d=int(c)'''

Instead of using it in two separate lines, combine it into a single line
'''c=int(input(&quot;Enter (1/0)&quot;))'''.

To get two inputs in same line with a space between them split() is used.

a,b=input(&quot;enter a&quot;).split(&quot;enter b&quot;)
----
[[#Top]]

==If statement==
If statement is used to execute set of two contrary statements based on a condition. 

===Syntax===
If (Condition):
    Statement 1
else:
    Statement 2

If 'Condition' is true then 'Statement 1' will be executed otherwise 'Statement 2' will be executed.

Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNhHmg3SkK1uiutigcAbH9K

==Loops==
[[#Top]]&lt;br&gt;
Loops in a programming languages are used to execute set of repetitive statements. For loop and while loop are used extensively to execute a set of looping instructions.

=== For loop Syntax ===
&lt;pre&gt;
for i in range(10): 
    Statement
&lt;/pre&gt;
range(10) indicate that values 0 to 9 will be assigned to the variable i and for each value of i the Statement will be executed, e.g.
&lt;pre&gt;
for i in range(10): 
    print(i)
&lt;/pre&gt;
Output will be
&lt;pre&gt;
0
1
2
3
4
5
6
7
8
9
&lt;/pre&gt;

[[#Top]]

=== While loop Syntax ===
&lt;pre&gt;
intialisation

while(condition):
   Statement
   increment/decrement
&lt;/pre&gt;
e.g.
&lt;pre&gt;
#initialization
i=0
while(i&lt;10): 
    print(i)
    i=i+1
&lt;/pre&gt;
Output will be:
&lt;pre&gt;
0
1
2
3
4
5
6
7
8
9
&lt;/pre&gt;
Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNbl5jkVrrw1E5XSvm3GiCI

[[#TOP]]
==Importance of Indentation in Python==
Indentation is used to indicate to what block of statements belong. Indentation of blocks convey program structure in Python. Indentation in Python is used to refer a group/block of code/statements. In C++ we use { and } (curly brackets) to group a set of statements. But in Python, there are no such brackets used. Instead of such brackets used in other programming languages, we use indentation in Python.
Use tabs,instead of spaces for ease of writing code.

Wrong indentation can lead to syntax error, or makes your output wrong for your logic e.g.
&lt;pre&gt;
#IndentationError: expected an indented block
i=-1
if i&lt;0:
print(&quot;Test successful&quot;)#Wrong indentation 
else:    
    print(&quot;Test failed&quot;)
#Output: IndentationError: expected an indented block
&lt;/pre&gt;
---
&lt;pre&gt;
#Properly Indented code:
i=-1
if i&lt;0:
    print(&quot;Test successful&quot;)#Wrong indentation
else:    
    print(&quot;Test failed&quot;)
#Output:Test successful
&lt;/pre&gt;
---
Logic changed, so output changed, with improper indentation, e.g.
---
&lt;h3&gt;Code : 1&lt;/h3&gt;
&lt;pre&gt;
sum=0
for i in range(5):
    for j in range(5):
        sum+=i
print(sum, end=&quot; &quot;)
#Output: 50
&lt;/pre&gt;
        
&lt;h3&gt;Code : 2&lt;/h3&gt;
&lt;pre&gt;
for i in range(5):
    for j in range(5):
        print(end=&quot; &quot;)
    sum+=i
print(sum, end=&quot; &quot;)
#Output:                          10
&lt;/pre&gt;
{{#ev:youtube|https://youtu.be/pmavoW419Yc|250|right}}&lt;br&gt;

[[#Top]]

==Spyder IDE Black Screen Solution==

----

 This issue is because of ''Help'' screen which is by default open. 
 We need to close it. So here's how you do it-


===Method 1:===

Step 1-    Try by closing current pane for that,  &quot;''press ctrl+shift+F4''&quot;  wait for few seconds things will appear on screen.

Step 2-    If it so than on menu bar go to ''view &gt; panes &gt; help'' unchecked &quot;''Help''&quot; option.

Step 3-    Make sure that &quot;''Help''&quot; under ''view &gt; panes'' is permanently unchecked. And ''Editor, Ipython console, Variable explorer''  are checked. 


===Method 2:===

Step 1-    Open spyder.

Step 2-   On that black screen randomly ''Left click'' on spyder &quot;''Menu bar''&quot; area you will get menu drop downs, You have to find Drop down with &quot;''Panes''&quot; option.

Step 3-   On &quot;''Panes''&quot; drop down unchecked the &quot;''Help''&quot;.

Step 4-   Wait for few seconds Spyder view will appear.

Step 5 -  Make sure that ''&quot;Help&quot;'' under view&gt;panes is permanently unchecked. And ''Editor, Ipython console, variable explorer'' are checked.


[[#Top]]</text>
      <sha1>eanxmwgwndbra0qhsocx79ppxo5f9j1</sha1>
    </revision>
    <revision>
      <id>3599</id>
      <parentid>3598</parentid>
      <timestamp>2018-09-28T03:28:03Z</timestamp>
      <contributor>
        <username>Sachinkr</username>
        <id>1743</id>
      </contributor>
      <comment>/* Variables Types and Conversion */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="20111">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_2 Contributors of this page]
==Introduction to Python==
Python is a widely used programming language which allows programmers to write the program in fewer lines of code. It was designed by ''Guido van Rossum'' in 1991. Python uses an interpreter instead of compiler.Basically, the main difference between compiler and interpreter is that the compiler takes the code as 'whole' and compiles it. for example, in C language and on the other side in interpreter. For example: languages like Python. It interprets the written code 'line by line', and if somewhere error is found. It stops interpreting the code from there itself. Here, in our course we will be using Spyder IDE. Spyder is an integrated development environment with editing options to assist the programmers in writing programs. Spyder IDE is divided into two panes, one is console and other one is where program is written.

Python works on different platforms (Windows, Mac, Linux, Raspberry Pi, etc).
Python has a simple syntax similar to the English language.
Python has syntax that allows developers to write programs with fewer lines than some other programming languages.
Python runs on an interpreter system, meaning that code can be executed as soon as it is written. This means that prototyping can be very quick.
Python can be treated in a procedural way, an object-orientated way or a functional way.

==Installing Anaconda==
[[#Top]]
This article is all about installing and troubleshooting Anaconda and Spyder on different platforms.

===Windows===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#windows Download Link]. Make sure that you download the version compatible to your operating system architecture. If you have a 64 bit OS then you can download either 64 bit of 32 bit, but if you have 32 bit OS then you should download the 32 bit version only.

Step 2 -&gt; Double click on the .exe file that you downloaded just now and follow the instructions. If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open cmd (go to Start -&gt; then type cmd in the search bar and hit enter). There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

===Mac===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#macos Download Link].

Step 2 -&gt; Double click on the .pkg file that you just downloaded. If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

===Linux===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#linux Download Link].

Step 2 -&gt; Go to the folder where you downloaded the .sh file and type following command 

  '''bash Anaconda-latest-Linux-x86_64.sh'''

If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

==Troubleshooting Spyder==

[[#Top]]

In most of the cases, it happens that Spyder is already running and you have initiated one more instance of it. Please make sure that spyder is not running already.
If you are on Linux OS, please launch spyder through terminal. Just open the terminal and type '''spyder''' and it will launch. When Spyder opens, make sure you see Anaconda with the version written on the Ipython console. If not, try changing the path of your anaconda. Follow these steps according to your OS version.

====Windows====
[https://stackoverflow.com/questions/44597662/conda-command-is-not-recognized-on-windows-10 Click Here]

====Linux====
[https://stackoverflow.com/questions/18675907/how-to-run-conda Click Here]

====Mac====
[https://stackoverflow.com/questions/35246386/conda-command-not-found Click Here]

In most of the cases relaunching Spyder works.
A more general Troubleshoot is present [https://github.com/spyder-ide/spyder/wiki/Troubleshooting-Guide-and-FAQ Here]

==How to run a program in Spyder IDE?==
Go to Run on the menu bar. Click Run-&gt;Run.

[[#TOP]]
==Print statements==
Print statements help to display output on console. 
{{#ev:youtube|https://youtu.be/gECkqaOwyt0|250|right}}

===Syntax===
print()

===How to print a message?===
In order to print a message in Python, write print(&quot;message&quot;).
Single, double, triple quote can be used print()

'''Example:'''

'''Single Quote'''
print('Hello')  
Output: Hello

'''Double Quote'''
print(&quot;Hello&quot;)  
Output: Hello

'''Quote within quote'''
print('Is &quot;Ram&quot; a good boy?')  
Output: Is &quot;Ram&quot; a good boy?

[[#TOP]]
==Escape sequences with strings==

We can use escape sequence within strings to make output more presentable.

'''\n'''  : It will move to next line.

'''\t'''  : It will add tab space(5space)

'''\a'''  : It will play system sound once.

'''Example:'''

Print(&quot;Hi, \n How are you?&quot;)

Output: 

Hi,

How are you?

Print(&quot;Hi, \t How are you?&quot;)

Output: 

Hi, &lt;5 spaces&gt; How are you?

[[File:Escape_Sequence.jpg]]

==Variables==
[[#Top]]
&lt;pre&gt;
Variables are used to store some values. Values can be strings, integers or decimal values.  

Variable Name Rules:
1. Variable name should start with letter or underscore. Variable name cant start with number.
Example:
Valid: JOC, WIKI, JOC_WIKI, _JOC
Invalid: 1JOC, 123WIKI, 0_WIKI

2. Remaining letter other then first one can contain number, underscore.
Example:
JOC1234, WIKI012_1332

3. Variable names are case sensitivities.
Example:
JOC, jOC, joC all are different varibles. 

&lt;/pre&gt;
{{#ev:youtube|https://youtu.be/60iAXH1sm-Y|250|right}}
===How to print a variable?===
In order to print the value of a variable in python, first initialize the variable and then call it where ever you wanna use it. 
&lt;pre&gt;print(variable_name)&lt;/pre&gt;

&lt;pre&gt;For example :
x=2                # x is viable here
print(x)           # calling variable x with print function

a = &quot;JOC&quot;          # a is variable here
b = &quot;_WIKI&quot;        # b is variable here
c = a + b          # c is variable here which will provide addition of variable a and b
&lt;/pre&gt;

===Some facts about Variables===
* If you want to print variable name with a message, you can use , operator. For example : I want to print Hello Simran and Simran has been stored in a variable called ''name''.
  name=&quot;Simran&quot;
  print(&quot;Hello&quot;,name)
* If you change the value of a variable, it will store the latest value. For example :
  name=&quot;Simran&quot;
  name=&quot;Amit&quot;
  If you will execute the command ''print(name)'', Amit will be displayed.
* You can perform operations like addition, subtraction etc only on integral variables.

===Variables Types and Conversion===
&lt;pre&gt;Variable can be decimal, integer and decimal. And they can be inter covered with the help of conversion functions.

Example:
JOC = 5           Save in Memory as 5       # We have variable with name JOC having value 5 here.
JOC = int(5)      Save in Memory as 5       # Here Variable JOC holding integer value of 5. 
JOC = flot(5)     Save in Memory as 5.0     # Here variable JOC holding flot value of 5
JOC = str(5)      Save in Memory as &quot;5&quot;     # Here variable JOC holding string value of 5 or We can say 5 will be treated as string here.
JOC = complex(5)  Save in Memory as (5+0j)  # Here variable JOC holding complex value of 5.
JOC = oct(5)      Save in Memory as 012     # Here variable JOC holding octal representation of 5.
JOC = hex(5)      Save in Memory as 0xa     # Here variable JOC holding hexadecimal representation of 5

There are many more function available in python. You can convert variable as per your requirement.
&lt;/pre&gt;


&lt;h1 style='color:black;font-family:Calibri;font-size:14.0pt;font-weight:800;
font-style:normal'&gt;Conversion Table with Eample&lt;/h1&gt;

&lt;table border=0 cellpadding=0 cellspacing=0 width=656 style='border-collapse:
 collapse;table-layout:fixed;width:492pt'&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6624497 width=63 style='height:15.0pt;width:47pt'&gt;Serial
  No&lt;/td&gt;
  &lt;td class=xl6724497 width=77 style='border-left:none;width:58pt'&gt;Function&lt;/td&gt;
  &lt;td class=xl6724497 width=303 style='border-left:none;width:227pt'&gt;Description&lt;/td&gt;
  &lt;td class=xl6724497 width=162 style='border-left:none;width:122pt'&gt;Example&lt;/td&gt;
  &lt;td class=xl6824497 width=51 style='border-left:none;width:38pt'&gt;Output&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;1&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;int(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to an
  integer.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10.12;
  print(int(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;2&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;long(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a&lt;span
  style='mso-spacerun:yes'&gt;  &lt;/span&gt;to a long integer&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10.12;
  print(long(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;3&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;float(a)&lt;/td&gt;
  &lt;td class=xl6524497 width=303 style='border-top:none;border-left:none;
  width:227pt'&gt;Converts a to a floating-point number.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 101.23;
  print(float(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;101.23&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;4&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;complex(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to a
  complex number.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print(complex(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10+0j&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;5&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;str(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to
  string.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print(str(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;6&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;repr(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts object
  a to an expression string.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print(repr(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;7&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;tuple(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to
  tuple.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print((a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;8&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;list(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to
  list.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print([a])&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;[10]&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;9&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;set(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to
  set.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a =
  set(&amp;quot;10&amp;quot;); print(a)&lt;/td&gt;
  &lt;td class=xl7124497 width=51 style='border-top:none;border-left:none;
  width:38pt'&gt;{'1', '0'}&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;10&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;dict(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to
  dictonary&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = dict(a=10);
  print(a)&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;{'a': 10}&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;11&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;chr(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts an
  integer to a character.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 97;
  print(chr(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;a&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;12&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;ord(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a
  single character to its integer value.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a =
  &amp;quot;J&amp;quot;; print(ord(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;74&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;13&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;hex(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts an
  integer to a hexadecimal string.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print(hex(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;0xa&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=21 style='height:15.75pt'&gt;
  &lt;td height=21 class=xl7224497 style='height:15.75pt;border-top:none'&gt;14&lt;/td&gt;
  &lt;td class=xl7324497 style='border-top:none;border-left:none'&gt;oct(a)&lt;/td&gt;
  &lt;td class=xl7324497 style='border-top:none;border-left:none'&gt;Converts an
  integer to an octal string.&lt;/td&gt;
  &lt;td class=xl7324497 style='border-top:none;border-left:none'&gt;a = 10;
  print(oct(a))&lt;/td&gt;
  &lt;td class=xl7424497 style='border-top:none;border-left:none'&gt;0o12&lt;/td&gt;
 &lt;/tr&gt;
 &lt;/tr&gt;
  &lt;tr height=0 style='display:none'&gt;
  &lt;td width=63 style='width:47pt'&gt;&lt;/td&gt;
  &lt;td width=77 style='width:58pt'&gt;&lt;/td&gt;
  &lt;td width=303 style='width:227pt'&gt;&lt;/td&gt;
  &lt;td width=162 style='width:122pt'&gt;&lt;/td&gt;
  &lt;td width=51 style='width:38pt'&gt;&lt;/td&gt;
 &lt;/tr&gt;
&lt;/table&gt;

==How to execute couple of instructions on console?==
You can execute couple of instructions on console using ;. Write Statement 1;Statement 2;......and then press ''Enter''.
{{#ev:youtube|https://youtu.be/CYQCYvLE22Y|250|right}}









==How to take input from the user?==
We can take input from the user using ''input'' function. For Example : You want the user to input variable ''x'', then write x=input(&quot;Enter the value of x&quot;) and execute. Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNkVLCxZw_jcgyS-bmrIVSP

And when the input you need is of data type other than string. You can do both the input function and data conversion in a single line.
For example:
Consider the program for letting in the patients
'''c=input(&quot;Enter (1/0)&quot;);d=int(c)'''

Instead of using it in two separate lines, combine it into a single line
'''c=int(input(&quot;Enter (1/0)&quot;))'''.

To get two inputs in same line with a space between them split() is used.

a,b=input(&quot;enter a&quot;).split(&quot;enter b&quot;)
----
[[#Top]]

==If statement==
If statement is used to execute set of two contrary statements based on a condition. 

===Syntax===
If (Condition):
    Statement 1
else:
    Statement 2

If 'Condition' is true then 'Statement 1' will be executed otherwise 'Statement 2' will be executed.

Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNhHmg3SkK1uiutigcAbH9K

==Loops==
[[#Top]]&lt;br&gt;
Loops in a programming languages are used to execute set of repetitive statements. For loop and while loop are used extensively to execute a set of looping instructions.

=== For loop Syntax ===
&lt;pre&gt;
for i in range(10): 
    Statement
&lt;/pre&gt;
range(10) indicate that values 0 to 9 will be assigned to the variable i and for each value of i the Statement will be executed, e.g.
&lt;pre&gt;
for i in range(10): 
    print(i)
&lt;/pre&gt;
Output will be
&lt;pre&gt;
0
1
2
3
4
5
6
7
8
9
&lt;/pre&gt;

[[#Top]]

=== While loop Syntax ===
&lt;pre&gt;
intialisation

while(condition):
   Statement
   increment/decrement
&lt;/pre&gt;
e.g.
&lt;pre&gt;
#initialization
i=0
while(i&lt;10): 
    print(i)
    i=i+1
&lt;/pre&gt;
Output will be:
&lt;pre&gt;
0
1
2
3
4
5
6
7
8
9
&lt;/pre&gt;
Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNbl5jkVrrw1E5XSvm3GiCI

[[#TOP]]
==Importance of Indentation in Python==
Indentation is used to indicate to what block of statements belong. Indentation of blocks convey program structure in Python. Indentation in Python is used to refer a group/block of code/statements. In C++ we use { and } (curly brackets) to group a set of statements. But in Python, there are no such brackets used. Instead of such brackets used in other programming languages, we use indentation in Python.
Use tabs,instead of spaces for ease of writing code.

Wrong indentation can lead to syntax error, or makes your output wrong for your logic e.g.
&lt;pre&gt;
#IndentationError: expected an indented block
i=-1
if i&lt;0:
print(&quot;Test successful&quot;)#Wrong indentation 
else:    
    print(&quot;Test failed&quot;)
#Output: IndentationError: expected an indented block
&lt;/pre&gt;
---
&lt;pre&gt;
#Properly Indented code:
i=-1
if i&lt;0:
    print(&quot;Test successful&quot;)#Wrong indentation
else:    
    print(&quot;Test failed&quot;)
#Output:Test successful
&lt;/pre&gt;
---
Logic changed, so output changed, with improper indentation, e.g.
---
&lt;h3&gt;Code : 1&lt;/h3&gt;
&lt;pre&gt;
sum=0
for i in range(5):
    for j in range(5):
        sum+=i
print(sum, end=&quot; &quot;)
#Output: 50
&lt;/pre&gt;
        
&lt;h3&gt;Code : 2&lt;/h3&gt;
&lt;pre&gt;
for i in range(5):
    for j in range(5):
        print(end=&quot; &quot;)
    sum+=i
print(sum, end=&quot; &quot;)
#Output:                          10
&lt;/pre&gt;
{{#ev:youtube|https://youtu.be/pmavoW419Yc|250|right}}&lt;br&gt;

[[#Top]]

==Spyder IDE Black Screen Solution==

----

 This issue is because of ''Help'' screen which is by default open. 
 We need to close it. So here's how you do it-


===Method 1:===

Step 1-    Try by closing current pane for that,  &quot;''press ctrl+shift+F4''&quot;  wait for few seconds things will appear on screen.

Step 2-    If it so than on menu bar go to ''view &gt; panes &gt; help'' unchecked &quot;''Help''&quot; option.

Step 3-    Make sure that &quot;''Help''&quot; under ''view &gt; panes'' is permanently unchecked. And ''Editor, Ipython console, Variable explorer''  are checked. 


===Method 2:===

Step 1-    Open spyder.

Step 2-   On that black screen randomly ''Left click'' on spyder &quot;''Menu bar''&quot; area you will get menu drop downs, You have to find Drop down with &quot;''Panes''&quot; option.

Step 3-   On &quot;''Panes''&quot; drop down unchecked the &quot;''Help''&quot;.

Step 4-   Wait for few seconds Spyder view will appear.

Step 5 -  Make sure that ''&quot;Help&quot;'' under view&gt;panes is permanently unchecked. And ''Editor, Ipython console, variable explorer'' are checked.


[[#Top]]</text>
      <sha1>8m979ypkuwky51934csrepmafffhzpc</sha1>
    </revision>
    <revision>
      <id>3600</id>
      <parentid>3599</parentid>
      <timestamp>2018-09-28T03:29:45Z</timestamp>
      <contributor>
        <username>Sachinkr</username>
        <id>1743</id>
      </contributor>
      <comment>/* Variables Types and Conversion */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="20110">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_2 Contributors of this page]
==Introduction to Python==
Python is a widely used programming language which allows programmers to write the program in fewer lines of code. It was designed by ''Guido van Rossum'' in 1991. Python uses an interpreter instead of compiler.Basically, the main difference between compiler and interpreter is that the compiler takes the code as 'whole' and compiles it. for example, in C language and on the other side in interpreter. For example: languages like Python. It interprets the written code 'line by line', and if somewhere error is found. It stops interpreting the code from there itself. Here, in our course we will be using Spyder IDE. Spyder is an integrated development environment with editing options to assist the programmers in writing programs. Spyder IDE is divided into two panes, one is console and other one is where program is written.

Python works on different platforms (Windows, Mac, Linux, Raspberry Pi, etc).
Python has a simple syntax similar to the English language.
Python has syntax that allows developers to write programs with fewer lines than some other programming languages.
Python runs on an interpreter system, meaning that code can be executed as soon as it is written. This means that prototyping can be very quick.
Python can be treated in a procedural way, an object-orientated way or a functional way.

==Installing Anaconda==
[[#Top]]
This article is all about installing and troubleshooting Anaconda and Spyder on different platforms.

===Windows===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#windows Download Link]. Make sure that you download the version compatible to your operating system architecture. If you have a 64 bit OS then you can download either 64 bit of 32 bit, but if you have 32 bit OS then you should download the 32 bit version only.

Step 2 -&gt; Double click on the .exe file that you downloaded just now and follow the instructions. If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open cmd (go to Start -&gt; then type cmd in the search bar and hit enter). There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

===Mac===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#macos Download Link].

Step 2 -&gt; Double click on the .pkg file that you just downloaded. If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

===Linux===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#linux Download Link].

Step 2 -&gt; Go to the folder where you downloaded the .sh file and type following command 

  '''bash Anaconda-latest-Linux-x86_64.sh'''

If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

==Troubleshooting Spyder==

[[#Top]]

In most of the cases, it happens that Spyder is already running and you have initiated one more instance of it. Please make sure that spyder is not running already.
If you are on Linux OS, please launch spyder through terminal. Just open the terminal and type '''spyder''' and it will launch. When Spyder opens, make sure you see Anaconda with the version written on the Ipython console. If not, try changing the path of your anaconda. Follow these steps according to your OS version.

====Windows====
[https://stackoverflow.com/questions/44597662/conda-command-is-not-recognized-on-windows-10 Click Here]

====Linux====
[https://stackoverflow.com/questions/18675907/how-to-run-conda Click Here]

====Mac====
[https://stackoverflow.com/questions/35246386/conda-command-not-found Click Here]

In most of the cases relaunching Spyder works.
A more general Troubleshoot is present [https://github.com/spyder-ide/spyder/wiki/Troubleshooting-Guide-and-FAQ Here]

==How to run a program in Spyder IDE?==
Go to Run on the menu bar. Click Run-&gt;Run.

[[#TOP]]
==Print statements==
Print statements help to display output on console. 
{{#ev:youtube|https://youtu.be/gECkqaOwyt0|250|right}}

===Syntax===
print()

===How to print a message?===
In order to print a message in Python, write print(&quot;message&quot;).
Single, double, triple quote can be used print()

'''Example:'''

'''Single Quote'''
print('Hello')  
Output: Hello

'''Double Quote'''
print(&quot;Hello&quot;)  
Output: Hello

'''Quote within quote'''
print('Is &quot;Ram&quot; a good boy?')  
Output: Is &quot;Ram&quot; a good boy?

[[#TOP]]
==Escape sequences with strings==

We can use escape sequence within strings to make output more presentable.

'''\n'''  : It will move to next line.

'''\t'''  : It will add tab space(5space)

'''\a'''  : It will play system sound once.

'''Example:'''

Print(&quot;Hi, \n How are you?&quot;)

Output: 

Hi,

How are you?

Print(&quot;Hi, \t How are you?&quot;)

Output: 

Hi, &lt;5 spaces&gt; How are you?

[[File:Escape_Sequence.jpg]]

==Variables==
[[#Top]]
&lt;pre&gt;
Variables are used to store some values. Values can be strings, integers or decimal values.  

Variable Name Rules:
1. Variable name should start with letter or underscore. Variable name cant start with number.
Example:
Valid: JOC, WIKI, JOC_WIKI, _JOC
Invalid: 1JOC, 123WIKI, 0_WIKI

2. Remaining letter other then first one can contain number, underscore.
Example:
JOC1234, WIKI012_1332

3. Variable names are case sensitivities.
Example:
JOC, jOC, joC all are different varibles. 

&lt;/pre&gt;
{{#ev:youtube|https://youtu.be/60iAXH1sm-Y|250|right}}
===How to print a variable?===
In order to print the value of a variable in python, first initialize the variable and then call it where ever you wanna use it. 
&lt;pre&gt;print(variable_name)&lt;/pre&gt;

&lt;pre&gt;For example :
x=2                # x is viable here
print(x)           # calling variable x with print function

a = &quot;JOC&quot;          # a is variable here
b = &quot;_WIKI&quot;        # b is variable here
c = a + b          # c is variable here which will provide addition of variable a and b
&lt;/pre&gt;

===Some facts about Variables===
* If you want to print variable name with a message, you can use , operator. For example : I want to print Hello Simran and Simran has been stored in a variable called ''name''.
  name=&quot;Simran&quot;
  print(&quot;Hello&quot;,name)
* If you change the value of a variable, it will store the latest value. For example :
  name=&quot;Simran&quot;
  name=&quot;Amit&quot;
  If you will execute the command ''print(name)'', Amit will be displayed.
* You can perform operations like addition, subtraction etc only on integral variables.

===Variables Types and Conversion===
&lt;pre&gt;Variable can be decimal, integer and decimal. And they can be inter covered with the help of conversion functions.

Example:
JOC = 5           Save in Memory as 5       # We have variable with name JOC having value 5 here.
JOC = int(5)      Save in Memory as 5       # Here Variable JOC holding integer value of 5. 
JOC = flot(5)     Save in Memory as 5.0     # Here variable JOC holding flot value of 5
JOC = str(5)      Save in Memory as &quot;5&quot;     # Here variable JOC holding string value of 5 or We can say 5 will be treated as string here.
JOC = complex(5)  Save in Memory as (5+0j)  # Here variable JOC holding complex value of 5.
JOC = oct(5)      Save in Memory as 012     # Here variable JOC holding octal representation of 5.
JOC = hex(5)      Save in Memory as 0xa     # Here variable JOC holding hexadecimal representation of 5

There are many more function available in python. You can convert variable as per your requirement.
&lt;/pre&gt;


&lt;h1 style='color:black;font-family:Calibri;font-size:14.0pt;font-weight:800;
font-style:normal'&gt;Conversion Table with Eample&lt;/h1&gt;

&lt;table border=0 cellpadding=0 cellspacing=0 width=656 style='border-collapse:
 collapse;table-layout:fixed;width:492pt'&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6624497 width=63 style='height:15.0pt;width:47pt'&gt;Serial
  No&lt;/td&gt;
  &lt;td class=xl6724497 width=77 style='border-left:none;width:58pt'&gt;Function&lt;/td&gt;
  &lt;td class=xl6724497 width=303 style='border-left:none;width:227pt'&gt;Description&lt;/td&gt;
  &lt;td class=xl6724497 width=162 style='border-left:none;width:122pt'&gt;Example&lt;/td&gt;
  &lt;td class=xl6824497 width=51 style='border-left:none;width:38pt'&gt;Output&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;1&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;int(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to an
  integer.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10.12;
  print(int(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;2&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;long(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a&lt;span
  style='mso-spacerun:yes'&gt;  &lt;/span&gt;to a long integer&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10.12;
  print(long(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;3&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;float(a)&lt;/td&gt;
  &lt;td class=xl6524497 width=303 style='border-top:none;border-left:none;
  width:227pt'&gt;Converts a to a floating-point number.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 101.23;
  print(float(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;101.23&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;4&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;complex(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to a
  complex number.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print(complex(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10+0j&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;5&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;str(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to
  string.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print(str(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;6&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;repr(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts object
  a to an expression string.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print(repr(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;7&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;tuple(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to
  tuple.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print((a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;8&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;list(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to
  list.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print([a])&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;[10]&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;9&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;set(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to
  set.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a =
  set(&amp;quot;10&amp;quot;); print(a)&lt;/td&gt;
  &lt;td class=xl7124497 width=51 style='border-top:none;border-left:none;
  width:38pt'&gt;{'1', '0'}&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;10&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;dict(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to
  dictonary&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = dict(a=10);
  print(a)&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;{'a': 10}&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;11&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;chr(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts an
  integer to a character.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 97;
  print(chr(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;a&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;12&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;ord(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a
  single character to its integer value.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a =
  &amp;quot;J&amp;quot;; print(ord(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;74&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;13&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;hex(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts an
  integer to a hexadecimal string.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print(hex(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;0xa&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=21 style='height:15.75pt'&gt;
  &lt;td height=21 class=xl7224497 style='height:15.75pt;border-top:none'&gt;14&lt;/td&gt;
  &lt;td class=xl7324497 style='border-top:none;border-left:none'&gt;oct(a)&lt;/td&gt;
  &lt;td class=xl7324497 style='border-top:none;border-left:none'&gt;Converts an
  integer to an octal string.&lt;/td&gt;
  &lt;td class=xl7324497 style='border-top:none;border-left:none'&gt;a = 10;
  print(oct(a))&lt;/td&gt;
  &lt;td class=xl7424497 style='border-top:none;border-left:none'&gt;0o12&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
  &lt;tr height=0 style='display:none'&gt;
  &lt;td width=63 style='width:47pt'&gt;&lt;/td&gt;
  &lt;td width=77 style='width:58pt'&gt;&lt;/td&gt;
  &lt;td width=303 style='width:227pt'&gt;&lt;/td&gt;
  &lt;td width=162 style='width:122pt'&gt;&lt;/td&gt;
  &lt;td width=51 style='width:38pt'&gt;&lt;/td&gt;
 &lt;/tr&gt;
&lt;/table&gt;

==How to execute couple of instructions on console?==
You can execute couple of instructions on console using ;. Write Statement 1;Statement 2;......and then press ''Enter''.
{{#ev:youtube|https://youtu.be/CYQCYvLE22Y|250|right}}









==How to take input from the user?==
We can take input from the user using ''input'' function. For Example : You want the user to input variable ''x'', then write x=input(&quot;Enter the value of x&quot;) and execute. Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNkVLCxZw_jcgyS-bmrIVSP

And when the input you need is of data type other than string. You can do both the input function and data conversion in a single line.
For example:
Consider the program for letting in the patients
'''c=input(&quot;Enter (1/0)&quot;);d=int(c)'''

Instead of using it in two separate lines, combine it into a single line
'''c=int(input(&quot;Enter (1/0)&quot;))'''.

To get two inputs in same line with a space between them split() is used.

a,b=input(&quot;enter a&quot;).split(&quot;enter b&quot;)
----
[[#Top]]

==If statement==
If statement is used to execute set of two contrary statements based on a condition. 

===Syntax===
If (Condition):
    Statement 1
else:
    Statement 2

If 'Condition' is true then 'Statement 1' will be executed otherwise 'Statement 2' will be executed.

Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNhHmg3SkK1uiutigcAbH9K

==Loops==
[[#Top]]&lt;br&gt;
Loops in a programming languages are used to execute set of repetitive statements. For loop and while loop are used extensively to execute a set of looping instructions.

=== For loop Syntax ===
&lt;pre&gt;
for i in range(10): 
    Statement
&lt;/pre&gt;
range(10) indicate that values 0 to 9 will be assigned to the variable i and for each value of i the Statement will be executed, e.g.
&lt;pre&gt;
for i in range(10): 
    print(i)
&lt;/pre&gt;
Output will be
&lt;pre&gt;
0
1
2
3
4
5
6
7
8
9
&lt;/pre&gt;

[[#Top]]

=== While loop Syntax ===
&lt;pre&gt;
intialisation

while(condition):
   Statement
   increment/decrement
&lt;/pre&gt;
e.g.
&lt;pre&gt;
#initialization
i=0
while(i&lt;10): 
    print(i)
    i=i+1
&lt;/pre&gt;
Output will be:
&lt;pre&gt;
0
1
2
3
4
5
6
7
8
9
&lt;/pre&gt;
Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNbl5jkVrrw1E5XSvm3GiCI

[[#TOP]]
==Importance of Indentation in Python==
Indentation is used to indicate to what block of statements belong. Indentation of blocks convey program structure in Python. Indentation in Python is used to refer a group/block of code/statements. In C++ we use { and } (curly brackets) to group a set of statements. But in Python, there are no such brackets used. Instead of such brackets used in other programming languages, we use indentation in Python.
Use tabs,instead of spaces for ease of writing code.

Wrong indentation can lead to syntax error, or makes your output wrong for your logic e.g.
&lt;pre&gt;
#IndentationError: expected an indented block
i=-1
if i&lt;0:
print(&quot;Test successful&quot;)#Wrong indentation 
else:    
    print(&quot;Test failed&quot;)
#Output: IndentationError: expected an indented block
&lt;/pre&gt;
---
&lt;pre&gt;
#Properly Indented code:
i=-1
if i&lt;0:
    print(&quot;Test successful&quot;)#Wrong indentation
else:    
    print(&quot;Test failed&quot;)
#Output:Test successful
&lt;/pre&gt;
---
Logic changed, so output changed, with improper indentation, e.g.
---
&lt;h3&gt;Code : 1&lt;/h3&gt;
&lt;pre&gt;
sum=0
for i in range(5):
    for j in range(5):
        sum+=i
print(sum, end=&quot; &quot;)
#Output: 50
&lt;/pre&gt;
        
&lt;h3&gt;Code : 2&lt;/h3&gt;
&lt;pre&gt;
for i in range(5):
    for j in range(5):
        print(end=&quot; &quot;)
    sum+=i
print(sum, end=&quot; &quot;)
#Output:                          10
&lt;/pre&gt;
{{#ev:youtube|https://youtu.be/pmavoW419Yc|250|right}}&lt;br&gt;

[[#Top]]

==Spyder IDE Black Screen Solution==

----

 This issue is because of ''Help'' screen which is by default open. 
 We need to close it. So here's how you do it-


===Method 1:===

Step 1-    Try by closing current pane for that,  &quot;''press ctrl+shift+F4''&quot;  wait for few seconds things will appear on screen.

Step 2-    If it so than on menu bar go to ''view &gt; panes &gt; help'' unchecked &quot;''Help''&quot; option.

Step 3-    Make sure that &quot;''Help''&quot; under ''view &gt; panes'' is permanently unchecked. And ''Editor, Ipython console, Variable explorer''  are checked. 


===Method 2:===

Step 1-    Open spyder.

Step 2-   On that black screen randomly ''Left click'' on spyder &quot;''Menu bar''&quot; area you will get menu drop downs, You have to find Drop down with &quot;''Panes''&quot; option.

Step 3-   On &quot;''Panes''&quot; drop down unchecked the &quot;''Help''&quot;.

Step 4-   Wait for few seconds Spyder view will appear.

Step 5 -  Make sure that ''&quot;Help&quot;'' under view&gt;panes is permanently unchecked. And ''Editor, Ipython console, variable explorer'' are checked.


[[#Top]]</text>
      <sha1>bkfpb7hjie194iylihpljyhsyukx7nr</sha1>
    </revision>
    <revision>
      <id>3601</id>
      <parentid>3600</parentid>
      <timestamp>2018-09-28T04:18:25Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* Introduction to Python */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="20145">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_2 Contributors of this page]
==Introduction to Python==
 &lt;p style=&quot;text-align:justify&quot;&gt;Python is a widely used programming language which allows programmers to write the program in fewer lines of code. It was designed by ''Guido van Rossum'' in 1991. Python uses an interpreter instead of compiler.Basically, the main difference between compiler and interpreter is that the compiler takes the code as 'whole' and compiles it. for example, in C language and on the other side in interpreter. For example: languages like Python. It interprets the written code 'line by line', and if somewhere error is found. It stops interpreting the code from there itself. Here, in our course we will be using Spyder IDE. Spyder is an integrated development environment with editing options to assist the programmers in writing programs. Spyder IDE is divided into two panes, one is console and other one is where program is written.&lt;/p&gt;

Python works on different platforms (Windows, Mac, Linux, Raspberry Pi, etc).
Python has a simple syntax similar to the English language.
Python has syntax that allows developers to write programs with fewer lines than some other programming languages.
Python runs on an interpreter system, meaning that code can be executed as soon as it is written. This means that prototyping can be very quick.
Python can be treated in a procedural way, an object-orientated way or a functional way.

==Installing Anaconda==
[[#Top]]
This article is all about installing and troubleshooting Anaconda and Spyder on different platforms.

===Windows===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#windows Download Link]. Make sure that you download the version compatible to your operating system architecture. If you have a 64 bit OS then you can download either 64 bit of 32 bit, but if you have 32 bit OS then you should download the 32 bit version only.

Step 2 -&gt; Double click on the .exe file that you downloaded just now and follow the instructions. If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open cmd (go to Start -&gt; then type cmd in the search bar and hit enter). There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

===Mac===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#macos Download Link].

Step 2 -&gt; Double click on the .pkg file that you just downloaded. If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

===Linux===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#linux Download Link].

Step 2 -&gt; Go to the folder where you downloaded the .sh file and type following command 

  '''bash Anaconda-latest-Linux-x86_64.sh'''

If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

==Troubleshooting Spyder==

[[#Top]]

In most of the cases, it happens that Spyder is already running and you have initiated one more instance of it. Please make sure that spyder is not running already.
If you are on Linux OS, please launch spyder through terminal. Just open the terminal and type '''spyder''' and it will launch. When Spyder opens, make sure you see Anaconda with the version written on the Ipython console. If not, try changing the path of your anaconda. Follow these steps according to your OS version.

====Windows====
[https://stackoverflow.com/questions/44597662/conda-command-is-not-recognized-on-windows-10 Click Here]

====Linux====
[https://stackoverflow.com/questions/18675907/how-to-run-conda Click Here]

====Mac====
[https://stackoverflow.com/questions/35246386/conda-command-not-found Click Here]

In most of the cases relaunching Spyder works.
A more general Troubleshoot is present [https://github.com/spyder-ide/spyder/wiki/Troubleshooting-Guide-and-FAQ Here]

==How to run a program in Spyder IDE?==
Go to Run on the menu bar. Click Run-&gt;Run.

[[#TOP]]
==Print statements==
Print statements help to display output on console. 
{{#ev:youtube|https://youtu.be/gECkqaOwyt0|250|right}}

===Syntax===
print()

===How to print a message?===
In order to print a message in Python, write print(&quot;message&quot;).
Single, double, triple quote can be used print()

'''Example:'''

'''Single Quote'''
print('Hello')  
Output: Hello

'''Double Quote'''
print(&quot;Hello&quot;)  
Output: Hello

'''Quote within quote'''
print('Is &quot;Ram&quot; a good boy?')  
Output: Is &quot;Ram&quot; a good boy?

[[#TOP]]
==Escape sequences with strings==

We can use escape sequence within strings to make output more presentable.

'''\n'''  : It will move to next line.

'''\t'''  : It will add tab space(5space)

'''\a'''  : It will play system sound once.

'''Example:'''

Print(&quot;Hi, \n How are you?&quot;)

Output: 

Hi,

How are you?

Print(&quot;Hi, \t How are you?&quot;)

Output: 

Hi, &lt;5 spaces&gt; How are you?

[[File:Escape_Sequence.jpg]]

==Variables==
[[#Top]]
&lt;pre&gt;
Variables are used to store some values. Values can be strings, integers or decimal values.  

Variable Name Rules:
1. Variable name should start with letter or underscore. Variable name cant start with number.
Example:
Valid: JOC, WIKI, JOC_WIKI, _JOC
Invalid: 1JOC, 123WIKI, 0_WIKI

2. Remaining letter other then first one can contain number, underscore.
Example:
JOC1234, WIKI012_1332

3. Variable names are case sensitivities.
Example:
JOC, jOC, joC all are different varibles. 

&lt;/pre&gt;
{{#ev:youtube|https://youtu.be/60iAXH1sm-Y|250|right}}
===How to print a variable?===
In order to print the value of a variable in python, first initialize the variable and then call it where ever you wanna use it. 
&lt;pre&gt;print(variable_name)&lt;/pre&gt;

&lt;pre&gt;For example :
x=2                # x is viable here
print(x)           # calling variable x with print function

a = &quot;JOC&quot;          # a is variable here
b = &quot;_WIKI&quot;        # b is variable here
c = a + b          # c is variable here which will provide addition of variable a and b
&lt;/pre&gt;

===Some facts about Variables===
* If you want to print variable name with a message, you can use , operator. For example : I want to print Hello Simran and Simran has been stored in a variable called ''name''.
  name=&quot;Simran&quot;
  print(&quot;Hello&quot;,name)
* If you change the value of a variable, it will store the latest value. For example :
  name=&quot;Simran&quot;
  name=&quot;Amit&quot;
  If you will execute the command ''print(name)'', Amit will be displayed.
* You can perform operations like addition, subtraction etc only on integral variables.

===Variables Types and Conversion===
&lt;pre&gt;Variable can be decimal, integer and decimal. And they can be inter covered with the help of conversion functions.

Example:
JOC = 5           Save in Memory as 5       # We have variable with name JOC having value 5 here.
JOC = int(5)      Save in Memory as 5       # Here Variable JOC holding integer value of 5. 
JOC = flot(5)     Save in Memory as 5.0     # Here variable JOC holding flot value of 5
JOC = str(5)      Save in Memory as &quot;5&quot;     # Here variable JOC holding string value of 5 or We can say 5 will be treated as string here.
JOC = complex(5)  Save in Memory as (5+0j)  # Here variable JOC holding complex value of 5.
JOC = oct(5)      Save in Memory as 012     # Here variable JOC holding octal representation of 5.
JOC = hex(5)      Save in Memory as 0xa     # Here variable JOC holding hexadecimal representation of 5

There are many more function available in python. You can convert variable as per your requirement.
&lt;/pre&gt;


&lt;h1 style='color:black;font-family:Calibri;font-size:14.0pt;font-weight:800;
font-style:normal'&gt;Conversion Table with Eample&lt;/h1&gt;

&lt;table border=0 cellpadding=0 cellspacing=0 width=656 style='border-collapse:
 collapse;table-layout:fixed;width:492pt'&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6624497 width=63 style='height:15.0pt;width:47pt'&gt;Serial
  No&lt;/td&gt;
  &lt;td class=xl6724497 width=77 style='border-left:none;width:58pt'&gt;Function&lt;/td&gt;
  &lt;td class=xl6724497 width=303 style='border-left:none;width:227pt'&gt;Description&lt;/td&gt;
  &lt;td class=xl6724497 width=162 style='border-left:none;width:122pt'&gt;Example&lt;/td&gt;
  &lt;td class=xl6824497 width=51 style='border-left:none;width:38pt'&gt;Output&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;1&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;int(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to an
  integer.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10.12;
  print(int(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;2&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;long(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a&lt;span
  style='mso-spacerun:yes'&gt;  &lt;/span&gt;to a long integer&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10.12;
  print(long(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;3&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;float(a)&lt;/td&gt;
  &lt;td class=xl6524497 width=303 style='border-top:none;border-left:none;
  width:227pt'&gt;Converts a to a floating-point number.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 101.23;
  print(float(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;101.23&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;4&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;complex(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to a
  complex number.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print(complex(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10+0j&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;5&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;str(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to
  string.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print(str(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;6&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;repr(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts object
  a to an expression string.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print(repr(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;7&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;tuple(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to
  tuple.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print((a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;8&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;list(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to
  list.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print([a])&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;[10]&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;9&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;set(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to
  set.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a =
  set(&amp;quot;10&amp;quot;); print(a)&lt;/td&gt;
  &lt;td class=xl7124497 width=51 style='border-top:none;border-left:none;
  width:38pt'&gt;{'1', '0'}&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;10&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;dict(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to
  dictonary&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = dict(a=10);
  print(a)&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;{'a': 10}&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;11&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;chr(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts an
  integer to a character.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 97;
  print(chr(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;a&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;12&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;ord(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a
  single character to its integer value.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a =
  &amp;quot;J&amp;quot;; print(ord(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;74&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;13&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;hex(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts an
  integer to a hexadecimal string.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print(hex(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;0xa&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=21 style='height:15.75pt'&gt;
  &lt;td height=21 class=xl7224497 style='height:15.75pt;border-top:none'&gt;14&lt;/td&gt;
  &lt;td class=xl7324497 style='border-top:none;border-left:none'&gt;oct(a)&lt;/td&gt;
  &lt;td class=xl7324497 style='border-top:none;border-left:none'&gt;Converts an
  integer to an octal string.&lt;/td&gt;
  &lt;td class=xl7324497 style='border-top:none;border-left:none'&gt;a = 10;
  print(oct(a))&lt;/td&gt;
  &lt;td class=xl7424497 style='border-top:none;border-left:none'&gt;0o12&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
  &lt;tr height=0 style='display:none'&gt;
  &lt;td width=63 style='width:47pt'&gt;&lt;/td&gt;
  &lt;td width=77 style='width:58pt'&gt;&lt;/td&gt;
  &lt;td width=303 style='width:227pt'&gt;&lt;/td&gt;
  &lt;td width=162 style='width:122pt'&gt;&lt;/td&gt;
  &lt;td width=51 style='width:38pt'&gt;&lt;/td&gt;
 &lt;/tr&gt;
&lt;/table&gt;

==How to execute couple of instructions on console?==
You can execute couple of instructions on console using ;. Write Statement 1;Statement 2;......and then press ''Enter''.
{{#ev:youtube|https://youtu.be/CYQCYvLE22Y|250|right}}









==How to take input from the user?==
We can take input from the user using ''input'' function. For Example : You want the user to input variable ''x'', then write x=input(&quot;Enter the value of x&quot;) and execute. Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNkVLCxZw_jcgyS-bmrIVSP

And when the input you need is of data type other than string. You can do both the input function and data conversion in a single line.
For example:
Consider the program for letting in the patients
'''c=input(&quot;Enter (1/0)&quot;);d=int(c)'''

Instead of using it in two separate lines, combine it into a single line
'''c=int(input(&quot;Enter (1/0)&quot;))'''.

To get two inputs in same line with a space between them split() is used.

a,b=input(&quot;enter a&quot;).split(&quot;enter b&quot;)
----
[[#Top]]

==If statement==
If statement is used to execute set of two contrary statements based on a condition. 

===Syntax===
If (Condition):
    Statement 1
else:
    Statement 2

If 'Condition' is true then 'Statement 1' will be executed otherwise 'Statement 2' will be executed.

Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNhHmg3SkK1uiutigcAbH9K

==Loops==
[[#Top]]&lt;br&gt;
Loops in a programming languages are used to execute set of repetitive statements. For loop and while loop are used extensively to execute a set of looping instructions.

=== For loop Syntax ===
&lt;pre&gt;
for i in range(10): 
    Statement
&lt;/pre&gt;
range(10) indicate that values 0 to 9 will be assigned to the variable i and for each value of i the Statement will be executed, e.g.
&lt;pre&gt;
for i in range(10): 
    print(i)
&lt;/pre&gt;
Output will be
&lt;pre&gt;
0
1
2
3
4
5
6
7
8
9
&lt;/pre&gt;

[[#Top]]

=== While loop Syntax ===
&lt;pre&gt;
intialisation

while(condition):
   Statement
   increment/decrement
&lt;/pre&gt;
e.g.
&lt;pre&gt;
#initialization
i=0
while(i&lt;10): 
    print(i)
    i=i+1
&lt;/pre&gt;
Output will be:
&lt;pre&gt;
0
1
2
3
4
5
6
7
8
9
&lt;/pre&gt;
Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNbl5jkVrrw1E5XSvm3GiCI

[[#TOP]]
==Importance of Indentation in Python==
Indentation is used to indicate to what block of statements belong. Indentation of blocks convey program structure in Python. Indentation in Python is used to refer a group/block of code/statements. In C++ we use { and } (curly brackets) to group a set of statements. But in Python, there are no such brackets used. Instead of such brackets used in other programming languages, we use indentation in Python.
Use tabs,instead of spaces for ease of writing code.

Wrong indentation can lead to syntax error, or makes your output wrong for your logic e.g.
&lt;pre&gt;
#IndentationError: expected an indented block
i=-1
if i&lt;0:
print(&quot;Test successful&quot;)#Wrong indentation 
else:    
    print(&quot;Test failed&quot;)
#Output: IndentationError: expected an indented block
&lt;/pre&gt;
---
&lt;pre&gt;
#Properly Indented code:
i=-1
if i&lt;0:
    print(&quot;Test successful&quot;)#Wrong indentation
else:    
    print(&quot;Test failed&quot;)
#Output:Test successful
&lt;/pre&gt;
---
Logic changed, so output changed, with improper indentation, e.g.
---
&lt;h3&gt;Code : 1&lt;/h3&gt;
&lt;pre&gt;
sum=0
for i in range(5):
    for j in range(5):
        sum+=i
print(sum, end=&quot; &quot;)
#Output: 50
&lt;/pre&gt;
        
&lt;h3&gt;Code : 2&lt;/h3&gt;
&lt;pre&gt;
for i in range(5):
    for j in range(5):
        print(end=&quot; &quot;)
    sum+=i
print(sum, end=&quot; &quot;)
#Output:                          10
&lt;/pre&gt;
{{#ev:youtube|https://youtu.be/pmavoW419Yc|250|right}}&lt;br&gt;

[[#Top]]

==Spyder IDE Black Screen Solution==

----

 This issue is because of ''Help'' screen which is by default open. 
 We need to close it. So here's how you do it-


===Method 1:===

Step 1-    Try by closing current pane for that,  &quot;''press ctrl+shift+F4''&quot;  wait for few seconds things will appear on screen.

Step 2-    If it so than on menu bar go to ''view &gt; panes &gt; help'' unchecked &quot;''Help''&quot; option.

Step 3-    Make sure that &quot;''Help''&quot; under ''view &gt; panes'' is permanently unchecked. And ''Editor, Ipython console, Variable explorer''  are checked. 


===Method 2:===

Step 1-    Open spyder.

Step 2-   On that black screen randomly ''Left click'' on spyder &quot;''Menu bar''&quot; area you will get menu drop downs, You have to find Drop down with &quot;''Panes''&quot; option.

Step 3-   On &quot;''Panes''&quot; drop down unchecked the &quot;''Help''&quot;.

Step 4-   Wait for few seconds Spyder view will appear.

Step 5 -  Make sure that ''&quot;Help&quot;'' under view&gt;panes is permanently unchecked. And ''Editor, Ipython console, variable explorer'' are checked.


[[#Top]]</text>
      <sha1>688qi5s70rsrj1nhwdosc3qw4qbincg</sha1>
    </revision>
    <revision>
      <id>3602</id>
      <parentid>3601</parentid>
      <timestamp>2018-09-28T04:19:15Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* Introduction to Python */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="20180">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_2 Contributors of this page]
==Introduction to Python==
 &lt;p style=&quot;text-align:justify&quot;&gt;Python is a widely used programming language which allows programmers to write the program in fewer lines of code. It was designed by ''Guido van Rossum'' in 1991. Python uses an interpreter instead of compiler.Basically, the main difference between compiler and interpreter is that the compiler takes the code as 'whole' and compiles it. for example, in C language and on the other side in interpreter. For example: languages like Python. It interprets the written code 'line by line', and if somewhere error is found. It stops interpreting the code from there itself. Here, in our course we will be using Spyder IDE. Spyder is an integrated development environment with editing options to assist the programmers in writing programs. Spyder IDE is divided into two panes, one is console and other one is where program is written.&lt;/p&gt;

&lt;p style=&quot;text-align:justify&quot;&gt;
Python works on different platforms (Windows, Mac, Linux, Raspberry Pi, etc).
Python has a simple syntax similar to the English language.
Python has syntax that allows developers to write programs with fewer lines than some other programming languages.
Python runs on an interpreter system, meaning that code can be executed as soon as it is written. This means that prototyping can be very quick.&lt;/p&gt;
Python can be treated in a procedural way, an object-orientated way or a functional way.

==Installing Anaconda==
[[#Top]]
This article is all about installing and troubleshooting Anaconda and Spyder on different platforms.

===Windows===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#windows Download Link]. Make sure that you download the version compatible to your operating system architecture. If you have a 64 bit OS then you can download either 64 bit of 32 bit, but if you have 32 bit OS then you should download the 32 bit version only.

Step 2 -&gt; Double click on the .exe file that you downloaded just now and follow the instructions. If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open cmd (go to Start -&gt; then type cmd in the search bar and hit enter). There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

===Mac===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#macos Download Link].

Step 2 -&gt; Double click on the .pkg file that you just downloaded. If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

===Linux===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#linux Download Link].

Step 2 -&gt; Go to the folder where you downloaded the .sh file and type following command 

  '''bash Anaconda-latest-Linux-x86_64.sh'''

If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

==Troubleshooting Spyder==

[[#Top]]

In most of the cases, it happens that Spyder is already running and you have initiated one more instance of it. Please make sure that spyder is not running already.
If you are on Linux OS, please launch spyder through terminal. Just open the terminal and type '''spyder''' and it will launch. When Spyder opens, make sure you see Anaconda with the version written on the Ipython console. If not, try changing the path of your anaconda. Follow these steps according to your OS version.

====Windows====
[https://stackoverflow.com/questions/44597662/conda-command-is-not-recognized-on-windows-10 Click Here]

====Linux====
[https://stackoverflow.com/questions/18675907/how-to-run-conda Click Here]

====Mac====
[https://stackoverflow.com/questions/35246386/conda-command-not-found Click Here]

In most of the cases relaunching Spyder works.
A more general Troubleshoot is present [https://github.com/spyder-ide/spyder/wiki/Troubleshooting-Guide-and-FAQ Here]

==How to run a program in Spyder IDE?==
Go to Run on the menu bar. Click Run-&gt;Run.

[[#TOP]]
==Print statements==
Print statements help to display output on console. 
{{#ev:youtube|https://youtu.be/gECkqaOwyt0|250|right}}

===Syntax===
print()

===How to print a message?===
In order to print a message in Python, write print(&quot;message&quot;).
Single, double, triple quote can be used print()

'''Example:'''

'''Single Quote'''
print('Hello')  
Output: Hello

'''Double Quote'''
print(&quot;Hello&quot;)  
Output: Hello

'''Quote within quote'''
print('Is &quot;Ram&quot; a good boy?')  
Output: Is &quot;Ram&quot; a good boy?

[[#TOP]]
==Escape sequences with strings==

We can use escape sequence within strings to make output more presentable.

'''\n'''  : It will move to next line.

'''\t'''  : It will add tab space(5space)

'''\a'''  : It will play system sound once.

'''Example:'''

Print(&quot;Hi, \n How are you?&quot;)

Output: 

Hi,

How are you?

Print(&quot;Hi, \t How are you?&quot;)

Output: 

Hi, &lt;5 spaces&gt; How are you?

[[File:Escape_Sequence.jpg]]

==Variables==
[[#Top]]
&lt;pre&gt;
Variables are used to store some values. Values can be strings, integers or decimal values.  

Variable Name Rules:
1. Variable name should start with letter or underscore. Variable name cant start with number.
Example:
Valid: JOC, WIKI, JOC_WIKI, _JOC
Invalid: 1JOC, 123WIKI, 0_WIKI

2. Remaining letter other then first one can contain number, underscore.
Example:
JOC1234, WIKI012_1332

3. Variable names are case sensitivities.
Example:
JOC, jOC, joC all are different varibles. 

&lt;/pre&gt;
{{#ev:youtube|https://youtu.be/60iAXH1sm-Y|250|right}}
===How to print a variable?===
In order to print the value of a variable in python, first initialize the variable and then call it where ever you wanna use it. 
&lt;pre&gt;print(variable_name)&lt;/pre&gt;

&lt;pre&gt;For example :
x=2                # x is viable here
print(x)           # calling variable x with print function

a = &quot;JOC&quot;          # a is variable here
b = &quot;_WIKI&quot;        # b is variable here
c = a + b          # c is variable here which will provide addition of variable a and b
&lt;/pre&gt;

===Some facts about Variables===
* If you want to print variable name with a message, you can use , operator. For example : I want to print Hello Simran and Simran has been stored in a variable called ''name''.
  name=&quot;Simran&quot;
  print(&quot;Hello&quot;,name)
* If you change the value of a variable, it will store the latest value. For example :
  name=&quot;Simran&quot;
  name=&quot;Amit&quot;
  If you will execute the command ''print(name)'', Amit will be displayed.
* You can perform operations like addition, subtraction etc only on integral variables.

===Variables Types and Conversion===
&lt;pre&gt;Variable can be decimal, integer and decimal. And they can be inter covered with the help of conversion functions.

Example:
JOC = 5           Save in Memory as 5       # We have variable with name JOC having value 5 here.
JOC = int(5)      Save in Memory as 5       # Here Variable JOC holding integer value of 5. 
JOC = flot(5)     Save in Memory as 5.0     # Here variable JOC holding flot value of 5
JOC = str(5)      Save in Memory as &quot;5&quot;     # Here variable JOC holding string value of 5 or We can say 5 will be treated as string here.
JOC = complex(5)  Save in Memory as (5+0j)  # Here variable JOC holding complex value of 5.
JOC = oct(5)      Save in Memory as 012     # Here variable JOC holding octal representation of 5.
JOC = hex(5)      Save in Memory as 0xa     # Here variable JOC holding hexadecimal representation of 5

There are many more function available in python. You can convert variable as per your requirement.
&lt;/pre&gt;


&lt;h1 style='color:black;font-family:Calibri;font-size:14.0pt;font-weight:800;
font-style:normal'&gt;Conversion Table with Eample&lt;/h1&gt;

&lt;table border=0 cellpadding=0 cellspacing=0 width=656 style='border-collapse:
 collapse;table-layout:fixed;width:492pt'&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6624497 width=63 style='height:15.0pt;width:47pt'&gt;Serial
  No&lt;/td&gt;
  &lt;td class=xl6724497 width=77 style='border-left:none;width:58pt'&gt;Function&lt;/td&gt;
  &lt;td class=xl6724497 width=303 style='border-left:none;width:227pt'&gt;Description&lt;/td&gt;
  &lt;td class=xl6724497 width=162 style='border-left:none;width:122pt'&gt;Example&lt;/td&gt;
  &lt;td class=xl6824497 width=51 style='border-left:none;width:38pt'&gt;Output&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;1&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;int(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to an
  integer.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10.12;
  print(int(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;2&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;long(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a&lt;span
  style='mso-spacerun:yes'&gt;  &lt;/span&gt;to a long integer&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10.12;
  print(long(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;3&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;float(a)&lt;/td&gt;
  &lt;td class=xl6524497 width=303 style='border-top:none;border-left:none;
  width:227pt'&gt;Converts a to a floating-point number.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 101.23;
  print(float(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;101.23&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;4&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;complex(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to a
  complex number.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print(complex(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10+0j&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;5&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;str(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to
  string.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print(str(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;6&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;repr(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts object
  a to an expression string.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print(repr(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;7&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;tuple(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to
  tuple.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print((a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;8&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;list(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to
  list.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print([a])&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;[10]&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;9&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;set(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to
  set.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a =
  set(&amp;quot;10&amp;quot;); print(a)&lt;/td&gt;
  &lt;td class=xl7124497 width=51 style='border-top:none;border-left:none;
  width:38pt'&gt;{'1', '0'}&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;10&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;dict(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to
  dictonary&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = dict(a=10);
  print(a)&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;{'a': 10}&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;11&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;chr(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts an
  integer to a character.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 97;
  print(chr(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;a&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;12&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;ord(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a
  single character to its integer value.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a =
  &amp;quot;J&amp;quot;; print(ord(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;74&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;13&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;hex(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts an
  integer to a hexadecimal string.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print(hex(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;0xa&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=21 style='height:15.75pt'&gt;
  &lt;td height=21 class=xl7224497 style='height:15.75pt;border-top:none'&gt;14&lt;/td&gt;
  &lt;td class=xl7324497 style='border-top:none;border-left:none'&gt;oct(a)&lt;/td&gt;
  &lt;td class=xl7324497 style='border-top:none;border-left:none'&gt;Converts an
  integer to an octal string.&lt;/td&gt;
  &lt;td class=xl7324497 style='border-top:none;border-left:none'&gt;a = 10;
  print(oct(a))&lt;/td&gt;
  &lt;td class=xl7424497 style='border-top:none;border-left:none'&gt;0o12&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
  &lt;tr height=0 style='display:none'&gt;
  &lt;td width=63 style='width:47pt'&gt;&lt;/td&gt;
  &lt;td width=77 style='width:58pt'&gt;&lt;/td&gt;
  &lt;td width=303 style='width:227pt'&gt;&lt;/td&gt;
  &lt;td width=162 style='width:122pt'&gt;&lt;/td&gt;
  &lt;td width=51 style='width:38pt'&gt;&lt;/td&gt;
 &lt;/tr&gt;
&lt;/table&gt;

==How to execute couple of instructions on console?==
You can execute couple of instructions on console using ;. Write Statement 1;Statement 2;......and then press ''Enter''.
{{#ev:youtube|https://youtu.be/CYQCYvLE22Y|250|right}}









==How to take input from the user?==
We can take input from the user using ''input'' function. For Example : You want the user to input variable ''x'', then write x=input(&quot;Enter the value of x&quot;) and execute. Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNkVLCxZw_jcgyS-bmrIVSP

And when the input you need is of data type other than string. You can do both the input function and data conversion in a single line.
For example:
Consider the program for letting in the patients
'''c=input(&quot;Enter (1/0)&quot;);d=int(c)'''

Instead of using it in two separate lines, combine it into a single line
'''c=int(input(&quot;Enter (1/0)&quot;))'''.

To get two inputs in same line with a space between them split() is used.

a,b=input(&quot;enter a&quot;).split(&quot;enter b&quot;)
----
[[#Top]]

==If statement==
If statement is used to execute set of two contrary statements based on a condition. 

===Syntax===
If (Condition):
    Statement 1
else:
    Statement 2

If 'Condition' is true then 'Statement 1' will be executed otherwise 'Statement 2' will be executed.

Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNhHmg3SkK1uiutigcAbH9K

==Loops==
[[#Top]]&lt;br&gt;
Loops in a programming languages are used to execute set of repetitive statements. For loop and while loop are used extensively to execute a set of looping instructions.

=== For loop Syntax ===
&lt;pre&gt;
for i in range(10): 
    Statement
&lt;/pre&gt;
range(10) indicate that values 0 to 9 will be assigned to the variable i and for each value of i the Statement will be executed, e.g.
&lt;pre&gt;
for i in range(10): 
    print(i)
&lt;/pre&gt;
Output will be
&lt;pre&gt;
0
1
2
3
4
5
6
7
8
9
&lt;/pre&gt;

[[#Top]]

=== While loop Syntax ===
&lt;pre&gt;
intialisation

while(condition):
   Statement
   increment/decrement
&lt;/pre&gt;
e.g.
&lt;pre&gt;
#initialization
i=0
while(i&lt;10): 
    print(i)
    i=i+1
&lt;/pre&gt;
Output will be:
&lt;pre&gt;
0
1
2
3
4
5
6
7
8
9
&lt;/pre&gt;
Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNbl5jkVrrw1E5XSvm3GiCI

[[#TOP]]
==Importance of Indentation in Python==
Indentation is used to indicate to what block of statements belong. Indentation of blocks convey program structure in Python. Indentation in Python is used to refer a group/block of code/statements. In C++ we use { and } (curly brackets) to group a set of statements. But in Python, there are no such brackets used. Instead of such brackets used in other programming languages, we use indentation in Python.
Use tabs,instead of spaces for ease of writing code.

Wrong indentation can lead to syntax error, or makes your output wrong for your logic e.g.
&lt;pre&gt;
#IndentationError: expected an indented block
i=-1
if i&lt;0:
print(&quot;Test successful&quot;)#Wrong indentation 
else:    
    print(&quot;Test failed&quot;)
#Output: IndentationError: expected an indented block
&lt;/pre&gt;
---
&lt;pre&gt;
#Properly Indented code:
i=-1
if i&lt;0:
    print(&quot;Test successful&quot;)#Wrong indentation
else:    
    print(&quot;Test failed&quot;)
#Output:Test successful
&lt;/pre&gt;
---
Logic changed, so output changed, with improper indentation, e.g.
---
&lt;h3&gt;Code : 1&lt;/h3&gt;
&lt;pre&gt;
sum=0
for i in range(5):
    for j in range(5):
        sum+=i
print(sum, end=&quot; &quot;)
#Output: 50
&lt;/pre&gt;
        
&lt;h3&gt;Code : 2&lt;/h3&gt;
&lt;pre&gt;
for i in range(5):
    for j in range(5):
        print(end=&quot; &quot;)
    sum+=i
print(sum, end=&quot; &quot;)
#Output:                          10
&lt;/pre&gt;
{{#ev:youtube|https://youtu.be/pmavoW419Yc|250|right}}&lt;br&gt;

[[#Top]]

==Spyder IDE Black Screen Solution==

----

 This issue is because of ''Help'' screen which is by default open. 
 We need to close it. So here's how you do it-


===Method 1:===

Step 1-    Try by closing current pane for that,  &quot;''press ctrl+shift+F4''&quot;  wait for few seconds things will appear on screen.

Step 2-    If it so than on menu bar go to ''view &gt; panes &gt; help'' unchecked &quot;''Help''&quot; option.

Step 3-    Make sure that &quot;''Help''&quot; under ''view &gt; panes'' is permanently unchecked. And ''Editor, Ipython console, Variable explorer''  are checked. 


===Method 2:===

Step 1-    Open spyder.

Step 2-   On that black screen randomly ''Left click'' on spyder &quot;''Menu bar''&quot; area you will get menu drop downs, You have to find Drop down with &quot;''Panes''&quot; option.

Step 3-   On &quot;''Panes''&quot; drop down unchecked the &quot;''Help''&quot;.

Step 4-   Wait for few seconds Spyder view will appear.

Step 5 -  Make sure that ''&quot;Help&quot;'' under view&gt;panes is permanently unchecked. And ''Editor, Ipython console, variable explorer'' are checked.


[[#Top]]</text>
      <sha1>ov70dugwccwih0iescxv6xu9013b24l</sha1>
    </revision>
    <revision>
      <id>3603</id>
      <parentid>3602</parentid>
      <timestamp>2018-09-28T04:19:40Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* Windows */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="20218">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_2 Contributors of this page]
==Introduction to Python==
 &lt;p style=&quot;text-align:justify&quot;&gt;Python is a widely used programming language which allows programmers to write the program in fewer lines of code. It was designed by ''Guido van Rossum'' in 1991. Python uses an interpreter instead of compiler.Basically, the main difference between compiler and interpreter is that the compiler takes the code as 'whole' and compiles it. for example, in C language and on the other side in interpreter. For example: languages like Python. It interprets the written code 'line by line', and if somewhere error is found. It stops interpreting the code from there itself. Here, in our course we will be using Spyder IDE. Spyder is an integrated development environment with editing options to assist the programmers in writing programs. Spyder IDE is divided into two panes, one is console and other one is where program is written.&lt;/p&gt;

&lt;p style=&quot;text-align:justify&quot;&gt;
Python works on different platforms (Windows, Mac, Linux, Raspberry Pi, etc).
Python has a simple syntax similar to the English language.
Python has syntax that allows developers to write programs with fewer lines than some other programming languages.
Python runs on an interpreter system, meaning that code can be executed as soon as it is written. This means that prototyping can be very quick.&lt;/p&gt;
Python can be treated in a procedural way, an object-orientated way or a functional way.

==Installing Anaconda==
[[#Top]]
This article is all about installing and troubleshooting Anaconda and Spyder on different platforms.

===Windows===
Step 1 -&gt; Download the installer from here 
 &lt;p style=&quot;text-align:justify&quot;&gt;
[https://www.anaconda.com/download/#windows Download Link]. Make sure that you download the version compatible to your operating system architecture. If you have a 64 bit OS then you can download either 64 bit of 32 bit, but if you have 32 bit OS then you should download the 32 bit version only.
&lt;/p&gt;

Step 2 -&gt; Double click on the .exe file that you downloaded just now and follow the instructions. If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open cmd (go to Start -&gt; then type cmd in the search bar and hit enter). There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

===Mac===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#macos Download Link].

Step 2 -&gt; Double click on the .pkg file that you just downloaded. If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

===Linux===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#linux Download Link].

Step 2 -&gt; Go to the folder where you downloaded the .sh file and type following command 

  '''bash Anaconda-latest-Linux-x86_64.sh'''

If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

==Troubleshooting Spyder==

[[#Top]]

In most of the cases, it happens that Spyder is already running and you have initiated one more instance of it. Please make sure that spyder is not running already.
If you are on Linux OS, please launch spyder through terminal. Just open the terminal and type '''spyder''' and it will launch. When Spyder opens, make sure you see Anaconda with the version written on the Ipython console. If not, try changing the path of your anaconda. Follow these steps according to your OS version.

====Windows====
[https://stackoverflow.com/questions/44597662/conda-command-is-not-recognized-on-windows-10 Click Here]

====Linux====
[https://stackoverflow.com/questions/18675907/how-to-run-conda Click Here]

====Mac====
[https://stackoverflow.com/questions/35246386/conda-command-not-found Click Here]

In most of the cases relaunching Spyder works.
A more general Troubleshoot is present [https://github.com/spyder-ide/spyder/wiki/Troubleshooting-Guide-and-FAQ Here]

==How to run a program in Spyder IDE?==
Go to Run on the menu bar. Click Run-&gt;Run.

[[#TOP]]
==Print statements==
Print statements help to display output on console. 
{{#ev:youtube|https://youtu.be/gECkqaOwyt0|250|right}}

===Syntax===
print()

===How to print a message?===
In order to print a message in Python, write print(&quot;message&quot;).
Single, double, triple quote can be used print()

'''Example:'''

'''Single Quote'''
print('Hello')  
Output: Hello

'''Double Quote'''
print(&quot;Hello&quot;)  
Output: Hello

'''Quote within quote'''
print('Is &quot;Ram&quot; a good boy?')  
Output: Is &quot;Ram&quot; a good boy?

[[#TOP]]
==Escape sequences with strings==

We can use escape sequence within strings to make output more presentable.

'''\n'''  : It will move to next line.

'''\t'''  : It will add tab space(5space)

'''\a'''  : It will play system sound once.

'''Example:'''

Print(&quot;Hi, \n How are you?&quot;)

Output: 

Hi,

How are you?

Print(&quot;Hi, \t How are you?&quot;)

Output: 

Hi, &lt;5 spaces&gt; How are you?

[[File:Escape_Sequence.jpg]]

==Variables==
[[#Top]]
&lt;pre&gt;
Variables are used to store some values. Values can be strings, integers or decimal values.  

Variable Name Rules:
1. Variable name should start with letter or underscore. Variable name cant start with number.
Example:
Valid: JOC, WIKI, JOC_WIKI, _JOC
Invalid: 1JOC, 123WIKI, 0_WIKI

2. Remaining letter other then first one can contain number, underscore.
Example:
JOC1234, WIKI012_1332

3. Variable names are case sensitivities.
Example:
JOC, jOC, joC all are different varibles. 

&lt;/pre&gt;
{{#ev:youtube|https://youtu.be/60iAXH1sm-Y|250|right}}
===How to print a variable?===
In order to print the value of a variable in python, first initialize the variable and then call it where ever you wanna use it. 
&lt;pre&gt;print(variable_name)&lt;/pre&gt;

&lt;pre&gt;For example :
x=2                # x is viable here
print(x)           # calling variable x with print function

a = &quot;JOC&quot;          # a is variable here
b = &quot;_WIKI&quot;        # b is variable here
c = a + b          # c is variable here which will provide addition of variable a and b
&lt;/pre&gt;

===Some facts about Variables===
* If you want to print variable name with a message, you can use , operator. For example : I want to print Hello Simran and Simran has been stored in a variable called ''name''.
  name=&quot;Simran&quot;
  print(&quot;Hello&quot;,name)
* If you change the value of a variable, it will store the latest value. For example :
  name=&quot;Simran&quot;
  name=&quot;Amit&quot;
  If you will execute the command ''print(name)'', Amit will be displayed.
* You can perform operations like addition, subtraction etc only on integral variables.

===Variables Types and Conversion===
&lt;pre&gt;Variable can be decimal, integer and decimal. And they can be inter covered with the help of conversion functions.

Example:
JOC = 5           Save in Memory as 5       # We have variable with name JOC having value 5 here.
JOC = int(5)      Save in Memory as 5       # Here Variable JOC holding integer value of 5. 
JOC = flot(5)     Save in Memory as 5.0     # Here variable JOC holding flot value of 5
JOC = str(5)      Save in Memory as &quot;5&quot;     # Here variable JOC holding string value of 5 or We can say 5 will be treated as string here.
JOC = complex(5)  Save in Memory as (5+0j)  # Here variable JOC holding complex value of 5.
JOC = oct(5)      Save in Memory as 012     # Here variable JOC holding octal representation of 5.
JOC = hex(5)      Save in Memory as 0xa     # Here variable JOC holding hexadecimal representation of 5

There are many more function available in python. You can convert variable as per your requirement.
&lt;/pre&gt;


&lt;h1 style='color:black;font-family:Calibri;font-size:14.0pt;font-weight:800;
font-style:normal'&gt;Conversion Table with Eample&lt;/h1&gt;

&lt;table border=0 cellpadding=0 cellspacing=0 width=656 style='border-collapse:
 collapse;table-layout:fixed;width:492pt'&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6624497 width=63 style='height:15.0pt;width:47pt'&gt;Serial
  No&lt;/td&gt;
  &lt;td class=xl6724497 width=77 style='border-left:none;width:58pt'&gt;Function&lt;/td&gt;
  &lt;td class=xl6724497 width=303 style='border-left:none;width:227pt'&gt;Description&lt;/td&gt;
  &lt;td class=xl6724497 width=162 style='border-left:none;width:122pt'&gt;Example&lt;/td&gt;
  &lt;td class=xl6824497 width=51 style='border-left:none;width:38pt'&gt;Output&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;1&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;int(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to an
  integer.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10.12;
  print(int(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;2&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;long(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a&lt;span
  style='mso-spacerun:yes'&gt;  &lt;/span&gt;to a long integer&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10.12;
  print(long(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;3&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;float(a)&lt;/td&gt;
  &lt;td class=xl6524497 width=303 style='border-top:none;border-left:none;
  width:227pt'&gt;Converts a to a floating-point number.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 101.23;
  print(float(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;101.23&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;4&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;complex(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to a
  complex number.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print(complex(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10+0j&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;5&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;str(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to
  string.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print(str(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;6&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;repr(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts object
  a to an expression string.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print(repr(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;7&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;tuple(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to
  tuple.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print((a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;8&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;list(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to
  list.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print([a])&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;[10]&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;9&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;set(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to
  set.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a =
  set(&amp;quot;10&amp;quot;); print(a)&lt;/td&gt;
  &lt;td class=xl7124497 width=51 style='border-top:none;border-left:none;
  width:38pt'&gt;{'1', '0'}&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;10&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;dict(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to
  dictonary&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = dict(a=10);
  print(a)&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;{'a': 10}&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;11&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;chr(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts an
  integer to a character.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 97;
  print(chr(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;a&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;12&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;ord(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a
  single character to its integer value.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a =
  &amp;quot;J&amp;quot;; print(ord(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;74&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;13&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;hex(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts an
  integer to a hexadecimal string.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print(hex(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;0xa&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=21 style='height:15.75pt'&gt;
  &lt;td height=21 class=xl7224497 style='height:15.75pt;border-top:none'&gt;14&lt;/td&gt;
  &lt;td class=xl7324497 style='border-top:none;border-left:none'&gt;oct(a)&lt;/td&gt;
  &lt;td class=xl7324497 style='border-top:none;border-left:none'&gt;Converts an
  integer to an octal string.&lt;/td&gt;
  &lt;td class=xl7324497 style='border-top:none;border-left:none'&gt;a = 10;
  print(oct(a))&lt;/td&gt;
  &lt;td class=xl7424497 style='border-top:none;border-left:none'&gt;0o12&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
  &lt;tr height=0 style='display:none'&gt;
  &lt;td width=63 style='width:47pt'&gt;&lt;/td&gt;
  &lt;td width=77 style='width:58pt'&gt;&lt;/td&gt;
  &lt;td width=303 style='width:227pt'&gt;&lt;/td&gt;
  &lt;td width=162 style='width:122pt'&gt;&lt;/td&gt;
  &lt;td width=51 style='width:38pt'&gt;&lt;/td&gt;
 &lt;/tr&gt;
&lt;/table&gt;

==How to execute couple of instructions on console?==
You can execute couple of instructions on console using ;. Write Statement 1;Statement 2;......and then press ''Enter''.
{{#ev:youtube|https://youtu.be/CYQCYvLE22Y|250|right}}









==How to take input from the user?==
We can take input from the user using ''input'' function. For Example : You want the user to input variable ''x'', then write x=input(&quot;Enter the value of x&quot;) and execute. Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNkVLCxZw_jcgyS-bmrIVSP

And when the input you need is of data type other than string. You can do both the input function and data conversion in a single line.
For example:
Consider the program for letting in the patients
'''c=input(&quot;Enter (1/0)&quot;);d=int(c)'''

Instead of using it in two separate lines, combine it into a single line
'''c=int(input(&quot;Enter (1/0)&quot;))'''.

To get two inputs in same line with a space between them split() is used.

a,b=input(&quot;enter a&quot;).split(&quot;enter b&quot;)
----
[[#Top]]

==If statement==
If statement is used to execute set of two contrary statements based on a condition. 

===Syntax===
If (Condition):
    Statement 1
else:
    Statement 2

If 'Condition' is true then 'Statement 1' will be executed otherwise 'Statement 2' will be executed.

Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNhHmg3SkK1uiutigcAbH9K

==Loops==
[[#Top]]&lt;br&gt;
Loops in a programming languages are used to execute set of repetitive statements. For loop and while loop are used extensively to execute a set of looping instructions.

=== For loop Syntax ===
&lt;pre&gt;
for i in range(10): 
    Statement
&lt;/pre&gt;
range(10) indicate that values 0 to 9 will be assigned to the variable i and for each value of i the Statement will be executed, e.g.
&lt;pre&gt;
for i in range(10): 
    print(i)
&lt;/pre&gt;
Output will be
&lt;pre&gt;
0
1
2
3
4
5
6
7
8
9
&lt;/pre&gt;

[[#Top]]

=== While loop Syntax ===
&lt;pre&gt;
intialisation

while(condition):
   Statement
   increment/decrement
&lt;/pre&gt;
e.g.
&lt;pre&gt;
#initialization
i=0
while(i&lt;10): 
    print(i)
    i=i+1
&lt;/pre&gt;
Output will be:
&lt;pre&gt;
0
1
2
3
4
5
6
7
8
9
&lt;/pre&gt;
Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNbl5jkVrrw1E5XSvm3GiCI

[[#TOP]]
==Importance of Indentation in Python==
Indentation is used to indicate to what block of statements belong. Indentation of blocks convey program structure in Python. Indentation in Python is used to refer a group/block of code/statements. In C++ we use { and } (curly brackets) to group a set of statements. But in Python, there are no such brackets used. Instead of such brackets used in other programming languages, we use indentation in Python.
Use tabs,instead of spaces for ease of writing code.

Wrong indentation can lead to syntax error, or makes your output wrong for your logic e.g.
&lt;pre&gt;
#IndentationError: expected an indented block
i=-1
if i&lt;0:
print(&quot;Test successful&quot;)#Wrong indentation 
else:    
    print(&quot;Test failed&quot;)
#Output: IndentationError: expected an indented block
&lt;/pre&gt;
---
&lt;pre&gt;
#Properly Indented code:
i=-1
if i&lt;0:
    print(&quot;Test successful&quot;)#Wrong indentation
else:    
    print(&quot;Test failed&quot;)
#Output:Test successful
&lt;/pre&gt;
---
Logic changed, so output changed, with improper indentation, e.g.
---
&lt;h3&gt;Code : 1&lt;/h3&gt;
&lt;pre&gt;
sum=0
for i in range(5):
    for j in range(5):
        sum+=i
print(sum, end=&quot; &quot;)
#Output: 50
&lt;/pre&gt;
        
&lt;h3&gt;Code : 2&lt;/h3&gt;
&lt;pre&gt;
for i in range(5):
    for j in range(5):
        print(end=&quot; &quot;)
    sum+=i
print(sum, end=&quot; &quot;)
#Output:                          10
&lt;/pre&gt;
{{#ev:youtube|https://youtu.be/pmavoW419Yc|250|right}}&lt;br&gt;

[[#Top]]

==Spyder IDE Black Screen Solution==

----

 This issue is because of ''Help'' screen which is by default open. 
 We need to close it. So here's how you do it-


===Method 1:===

Step 1-    Try by closing current pane for that,  &quot;''press ctrl+shift+F4''&quot;  wait for few seconds things will appear on screen.

Step 2-    If it so than on menu bar go to ''view &gt; panes &gt; help'' unchecked &quot;''Help''&quot; option.

Step 3-    Make sure that &quot;''Help''&quot; under ''view &gt; panes'' is permanently unchecked. And ''Editor, Ipython console, Variable explorer''  are checked. 


===Method 2:===

Step 1-    Open spyder.

Step 2-   On that black screen randomly ''Left click'' on spyder &quot;''Menu bar''&quot; area you will get menu drop downs, You have to find Drop down with &quot;''Panes''&quot; option.

Step 3-   On &quot;''Panes''&quot; drop down unchecked the &quot;''Help''&quot;.

Step 4-   Wait for few seconds Spyder view will appear.

Step 5 -  Make sure that ''&quot;Help&quot;'' under view&gt;panes is permanently unchecked. And ''Editor, Ipython console, variable explorer'' are checked.


[[#Top]]</text>
      <sha1>c46qzsn05qbufvmjzb9z5sy8qtqllji</sha1>
    </revision>
    <revision>
      <id>3604</id>
      <parentid>3603</parentid>
      <timestamp>2018-09-28T04:19:58Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* Windows */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="20253">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_2 Contributors of this page]
==Introduction to Python==
 &lt;p style=&quot;text-align:justify&quot;&gt;Python is a widely used programming language which allows programmers to write the program in fewer lines of code. It was designed by ''Guido van Rossum'' in 1991. Python uses an interpreter instead of compiler.Basically, the main difference between compiler and interpreter is that the compiler takes the code as 'whole' and compiles it. for example, in C language and on the other side in interpreter. For example: languages like Python. It interprets the written code 'line by line', and if somewhere error is found. It stops interpreting the code from there itself. Here, in our course we will be using Spyder IDE. Spyder is an integrated development environment with editing options to assist the programmers in writing programs. Spyder IDE is divided into two panes, one is console and other one is where program is written.&lt;/p&gt;

&lt;p style=&quot;text-align:justify&quot;&gt;
Python works on different platforms (Windows, Mac, Linux, Raspberry Pi, etc).
Python has a simple syntax similar to the English language.
Python has syntax that allows developers to write programs with fewer lines than some other programming languages.
Python runs on an interpreter system, meaning that code can be executed as soon as it is written. This means that prototyping can be very quick.&lt;/p&gt;
Python can be treated in a procedural way, an object-orientated way or a functional way.

==Installing Anaconda==
[[#Top]]
This article is all about installing and troubleshooting Anaconda and Spyder on different platforms.

===Windows===
Step 1 -&gt; Download the installer from here 
 &lt;p style=&quot;text-align:justify&quot;&gt;
[https://www.anaconda.com/download/#windows Download Link]. Make sure that you download the version compatible to your operating system architecture. If you have a 64 bit OS then you can download either 64 bit of 32 bit, but if you have 32 bit OS then you should download the 32 bit version only.
&lt;/p&gt;
 &lt;p style=&quot;text-align:justify&quot;&gt;
Step 2 -&gt; Double click on the .exe file that you downloaded just now and follow the instructions. If you are not sure of the installation options then just choose the default.&lt;/p&gt;

Step 3 -&gt; To test your installation, open cmd (go to Start -&gt; then type cmd in the search bar and hit enter). There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

===Mac===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#macos Download Link].

Step 2 -&gt; Double click on the .pkg file that you just downloaded. If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

===Linux===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#linux Download Link].

Step 2 -&gt; Go to the folder where you downloaded the .sh file and type following command 

  '''bash Anaconda-latest-Linux-x86_64.sh'''

If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

==Troubleshooting Spyder==

[[#Top]]

In most of the cases, it happens that Spyder is already running and you have initiated one more instance of it. Please make sure that spyder is not running already.
If you are on Linux OS, please launch spyder through terminal. Just open the terminal and type '''spyder''' and it will launch. When Spyder opens, make sure you see Anaconda with the version written on the Ipython console. If not, try changing the path of your anaconda. Follow these steps according to your OS version.

====Windows====
[https://stackoverflow.com/questions/44597662/conda-command-is-not-recognized-on-windows-10 Click Here]

====Linux====
[https://stackoverflow.com/questions/18675907/how-to-run-conda Click Here]

====Mac====
[https://stackoverflow.com/questions/35246386/conda-command-not-found Click Here]

In most of the cases relaunching Spyder works.
A more general Troubleshoot is present [https://github.com/spyder-ide/spyder/wiki/Troubleshooting-Guide-and-FAQ Here]

==How to run a program in Spyder IDE?==
Go to Run on the menu bar. Click Run-&gt;Run.

[[#TOP]]
==Print statements==
Print statements help to display output on console. 
{{#ev:youtube|https://youtu.be/gECkqaOwyt0|250|right}}

===Syntax===
print()

===How to print a message?===
In order to print a message in Python, write print(&quot;message&quot;).
Single, double, triple quote can be used print()

'''Example:'''

'''Single Quote'''
print('Hello')  
Output: Hello

'''Double Quote'''
print(&quot;Hello&quot;)  
Output: Hello

'''Quote within quote'''
print('Is &quot;Ram&quot; a good boy?')  
Output: Is &quot;Ram&quot; a good boy?

[[#TOP]]
==Escape sequences with strings==

We can use escape sequence within strings to make output more presentable.

'''\n'''  : It will move to next line.

'''\t'''  : It will add tab space(5space)

'''\a'''  : It will play system sound once.

'''Example:'''

Print(&quot;Hi, \n How are you?&quot;)

Output: 

Hi,

How are you?

Print(&quot;Hi, \t How are you?&quot;)

Output: 

Hi, &lt;5 spaces&gt; How are you?

[[File:Escape_Sequence.jpg]]

==Variables==
[[#Top]]
&lt;pre&gt;
Variables are used to store some values. Values can be strings, integers or decimal values.  

Variable Name Rules:
1. Variable name should start with letter or underscore. Variable name cant start with number.
Example:
Valid: JOC, WIKI, JOC_WIKI, _JOC
Invalid: 1JOC, 123WIKI, 0_WIKI

2. Remaining letter other then first one can contain number, underscore.
Example:
JOC1234, WIKI012_1332

3. Variable names are case sensitivities.
Example:
JOC, jOC, joC all are different varibles. 

&lt;/pre&gt;
{{#ev:youtube|https://youtu.be/60iAXH1sm-Y|250|right}}
===How to print a variable?===
In order to print the value of a variable in python, first initialize the variable and then call it where ever you wanna use it. 
&lt;pre&gt;print(variable_name)&lt;/pre&gt;

&lt;pre&gt;For example :
x=2                # x is viable here
print(x)           # calling variable x with print function

a = &quot;JOC&quot;          # a is variable here
b = &quot;_WIKI&quot;        # b is variable here
c = a + b          # c is variable here which will provide addition of variable a and b
&lt;/pre&gt;

===Some facts about Variables===
* If you want to print variable name with a message, you can use , operator. For example : I want to print Hello Simran and Simran has been stored in a variable called ''name''.
  name=&quot;Simran&quot;
  print(&quot;Hello&quot;,name)
* If you change the value of a variable, it will store the latest value. For example :
  name=&quot;Simran&quot;
  name=&quot;Amit&quot;
  If you will execute the command ''print(name)'', Amit will be displayed.
* You can perform operations like addition, subtraction etc only on integral variables.

===Variables Types and Conversion===
&lt;pre&gt;Variable can be decimal, integer and decimal. And they can be inter covered with the help of conversion functions.

Example:
JOC = 5           Save in Memory as 5       # We have variable with name JOC having value 5 here.
JOC = int(5)      Save in Memory as 5       # Here Variable JOC holding integer value of 5. 
JOC = flot(5)     Save in Memory as 5.0     # Here variable JOC holding flot value of 5
JOC = str(5)      Save in Memory as &quot;5&quot;     # Here variable JOC holding string value of 5 or We can say 5 will be treated as string here.
JOC = complex(5)  Save in Memory as (5+0j)  # Here variable JOC holding complex value of 5.
JOC = oct(5)      Save in Memory as 012     # Here variable JOC holding octal representation of 5.
JOC = hex(5)      Save in Memory as 0xa     # Here variable JOC holding hexadecimal representation of 5

There are many more function available in python. You can convert variable as per your requirement.
&lt;/pre&gt;


&lt;h1 style='color:black;font-family:Calibri;font-size:14.0pt;font-weight:800;
font-style:normal'&gt;Conversion Table with Eample&lt;/h1&gt;

&lt;table border=0 cellpadding=0 cellspacing=0 width=656 style='border-collapse:
 collapse;table-layout:fixed;width:492pt'&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6624497 width=63 style='height:15.0pt;width:47pt'&gt;Serial
  No&lt;/td&gt;
  &lt;td class=xl6724497 width=77 style='border-left:none;width:58pt'&gt;Function&lt;/td&gt;
  &lt;td class=xl6724497 width=303 style='border-left:none;width:227pt'&gt;Description&lt;/td&gt;
  &lt;td class=xl6724497 width=162 style='border-left:none;width:122pt'&gt;Example&lt;/td&gt;
  &lt;td class=xl6824497 width=51 style='border-left:none;width:38pt'&gt;Output&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;1&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;int(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to an
  integer.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10.12;
  print(int(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;2&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;long(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a&lt;span
  style='mso-spacerun:yes'&gt;  &lt;/span&gt;to a long integer&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10.12;
  print(long(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;3&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;float(a)&lt;/td&gt;
  &lt;td class=xl6524497 width=303 style='border-top:none;border-left:none;
  width:227pt'&gt;Converts a to a floating-point number.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 101.23;
  print(float(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;101.23&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;4&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;complex(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to a
  complex number.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print(complex(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10+0j&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;5&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;str(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to
  string.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print(str(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;6&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;repr(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts object
  a to an expression string.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print(repr(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;7&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;tuple(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to
  tuple.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print((a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;8&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;list(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to
  list.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print([a])&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;[10]&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;9&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;set(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to
  set.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a =
  set(&amp;quot;10&amp;quot;); print(a)&lt;/td&gt;
  &lt;td class=xl7124497 width=51 style='border-top:none;border-left:none;
  width:38pt'&gt;{'1', '0'}&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;10&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;dict(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to
  dictonary&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = dict(a=10);
  print(a)&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;{'a': 10}&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;11&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;chr(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts an
  integer to a character.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 97;
  print(chr(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;a&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;12&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;ord(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a
  single character to its integer value.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a =
  &amp;quot;J&amp;quot;; print(ord(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;74&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;13&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;hex(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts an
  integer to a hexadecimal string.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print(hex(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;0xa&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=21 style='height:15.75pt'&gt;
  &lt;td height=21 class=xl7224497 style='height:15.75pt;border-top:none'&gt;14&lt;/td&gt;
  &lt;td class=xl7324497 style='border-top:none;border-left:none'&gt;oct(a)&lt;/td&gt;
  &lt;td class=xl7324497 style='border-top:none;border-left:none'&gt;Converts an
  integer to an octal string.&lt;/td&gt;
  &lt;td class=xl7324497 style='border-top:none;border-left:none'&gt;a = 10;
  print(oct(a))&lt;/td&gt;
  &lt;td class=xl7424497 style='border-top:none;border-left:none'&gt;0o12&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
  &lt;tr height=0 style='display:none'&gt;
  &lt;td width=63 style='width:47pt'&gt;&lt;/td&gt;
  &lt;td width=77 style='width:58pt'&gt;&lt;/td&gt;
  &lt;td width=303 style='width:227pt'&gt;&lt;/td&gt;
  &lt;td width=162 style='width:122pt'&gt;&lt;/td&gt;
  &lt;td width=51 style='width:38pt'&gt;&lt;/td&gt;
 &lt;/tr&gt;
&lt;/table&gt;

==How to execute couple of instructions on console?==
You can execute couple of instructions on console using ;. Write Statement 1;Statement 2;......and then press ''Enter''.
{{#ev:youtube|https://youtu.be/CYQCYvLE22Y|250|right}}









==How to take input from the user?==
We can take input from the user using ''input'' function. For Example : You want the user to input variable ''x'', then write x=input(&quot;Enter the value of x&quot;) and execute. Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNkVLCxZw_jcgyS-bmrIVSP

And when the input you need is of data type other than string. You can do both the input function and data conversion in a single line.
For example:
Consider the program for letting in the patients
'''c=input(&quot;Enter (1/0)&quot;);d=int(c)'''

Instead of using it in two separate lines, combine it into a single line
'''c=int(input(&quot;Enter (1/0)&quot;))'''.

To get two inputs in same line with a space between them split() is used.

a,b=input(&quot;enter a&quot;).split(&quot;enter b&quot;)
----
[[#Top]]

==If statement==
If statement is used to execute set of two contrary statements based on a condition. 

===Syntax===
If (Condition):
    Statement 1
else:
    Statement 2

If 'Condition' is true then 'Statement 1' will be executed otherwise 'Statement 2' will be executed.

Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNhHmg3SkK1uiutigcAbH9K

==Loops==
[[#Top]]&lt;br&gt;
Loops in a programming languages are used to execute set of repetitive statements. For loop and while loop are used extensively to execute a set of looping instructions.

=== For loop Syntax ===
&lt;pre&gt;
for i in range(10): 
    Statement
&lt;/pre&gt;
range(10) indicate that values 0 to 9 will be assigned to the variable i and for each value of i the Statement will be executed, e.g.
&lt;pre&gt;
for i in range(10): 
    print(i)
&lt;/pre&gt;
Output will be
&lt;pre&gt;
0
1
2
3
4
5
6
7
8
9
&lt;/pre&gt;

[[#Top]]

=== While loop Syntax ===
&lt;pre&gt;
intialisation

while(condition):
   Statement
   increment/decrement
&lt;/pre&gt;
e.g.
&lt;pre&gt;
#initialization
i=0
while(i&lt;10): 
    print(i)
    i=i+1
&lt;/pre&gt;
Output will be:
&lt;pre&gt;
0
1
2
3
4
5
6
7
8
9
&lt;/pre&gt;
Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNbl5jkVrrw1E5XSvm3GiCI

[[#TOP]]
==Importance of Indentation in Python==
Indentation is used to indicate to what block of statements belong. Indentation of blocks convey program structure in Python. Indentation in Python is used to refer a group/block of code/statements. In C++ we use { and } (curly brackets) to group a set of statements. But in Python, there are no such brackets used. Instead of such brackets used in other programming languages, we use indentation in Python.
Use tabs,instead of spaces for ease of writing code.

Wrong indentation can lead to syntax error, or makes your output wrong for your logic e.g.
&lt;pre&gt;
#IndentationError: expected an indented block
i=-1
if i&lt;0:
print(&quot;Test successful&quot;)#Wrong indentation 
else:    
    print(&quot;Test failed&quot;)
#Output: IndentationError: expected an indented block
&lt;/pre&gt;
---
&lt;pre&gt;
#Properly Indented code:
i=-1
if i&lt;0:
    print(&quot;Test successful&quot;)#Wrong indentation
else:    
    print(&quot;Test failed&quot;)
#Output:Test successful
&lt;/pre&gt;
---
Logic changed, so output changed, with improper indentation, e.g.
---
&lt;h3&gt;Code : 1&lt;/h3&gt;
&lt;pre&gt;
sum=0
for i in range(5):
    for j in range(5):
        sum+=i
print(sum, end=&quot; &quot;)
#Output: 50
&lt;/pre&gt;
        
&lt;h3&gt;Code : 2&lt;/h3&gt;
&lt;pre&gt;
for i in range(5):
    for j in range(5):
        print(end=&quot; &quot;)
    sum+=i
print(sum, end=&quot; &quot;)
#Output:                          10
&lt;/pre&gt;
{{#ev:youtube|https://youtu.be/pmavoW419Yc|250|right}}&lt;br&gt;

[[#Top]]

==Spyder IDE Black Screen Solution==

----

 This issue is because of ''Help'' screen which is by default open. 
 We need to close it. So here's how you do it-


===Method 1:===

Step 1-    Try by closing current pane for that,  &quot;''press ctrl+shift+F4''&quot;  wait for few seconds things will appear on screen.

Step 2-    If it so than on menu bar go to ''view &gt; panes &gt; help'' unchecked &quot;''Help''&quot; option.

Step 3-    Make sure that &quot;''Help''&quot; under ''view &gt; panes'' is permanently unchecked. And ''Editor, Ipython console, Variable explorer''  are checked. 


===Method 2:===

Step 1-    Open spyder.

Step 2-   On that black screen randomly ''Left click'' on spyder &quot;''Menu bar''&quot; area you will get menu drop downs, You have to find Drop down with &quot;''Panes''&quot; option.

Step 3-   On &quot;''Panes''&quot; drop down unchecked the &quot;''Help''&quot;.

Step 4-   Wait for few seconds Spyder view will appear.

Step 5 -  Make sure that ''&quot;Help&quot;'' under view&gt;panes is permanently unchecked. And ''Editor, Ipython console, variable explorer'' are checked.


[[#Top]]</text>
      <sha1>j2gtelvra737hd0ezlhl3y3tcbvuqdn</sha1>
    </revision>
    <revision>
      <id>3605</id>
      <parentid>3604</parentid>
      <timestamp>2018-09-28T04:20:15Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* Windows */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="20288">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_2 Contributors of this page]
==Introduction to Python==
 &lt;p style=&quot;text-align:justify&quot;&gt;Python is a widely used programming language which allows programmers to write the program in fewer lines of code. It was designed by ''Guido van Rossum'' in 1991. Python uses an interpreter instead of compiler.Basically, the main difference between compiler and interpreter is that the compiler takes the code as 'whole' and compiles it. for example, in C language and on the other side in interpreter. For example: languages like Python. It interprets the written code 'line by line', and if somewhere error is found. It stops interpreting the code from there itself. Here, in our course we will be using Spyder IDE. Spyder is an integrated development environment with editing options to assist the programmers in writing programs. Spyder IDE is divided into two panes, one is console and other one is where program is written.&lt;/p&gt;

&lt;p style=&quot;text-align:justify&quot;&gt;
Python works on different platforms (Windows, Mac, Linux, Raspberry Pi, etc).
Python has a simple syntax similar to the English language.
Python has syntax that allows developers to write programs with fewer lines than some other programming languages.
Python runs on an interpreter system, meaning that code can be executed as soon as it is written. This means that prototyping can be very quick.&lt;/p&gt;
Python can be treated in a procedural way, an object-orientated way or a functional way.

==Installing Anaconda==
[[#Top]]
This article is all about installing and troubleshooting Anaconda and Spyder on different platforms.

===Windows===
Step 1 -&gt; Download the installer from here 
 &lt;p style=&quot;text-align:justify&quot;&gt;
[https://www.anaconda.com/download/#windows Download Link]. Make sure that you download the version compatible to your operating system architecture. If you have a 64 bit OS then you can download either 64 bit of 32 bit, but if you have 32 bit OS then you should download the 32 bit version only.
&lt;/p&gt;
 &lt;p style=&quot;text-align:justify&quot;&gt;
Step 2 -&gt; Double click on the .exe file that you downloaded just now and follow the instructions. If you are not sure of the installation options then just choose the default.&lt;/p&gt;
 &lt;p style=&quot;text-align:justify&quot;&gt;
Step 3 -&gt; To test your installation, open cmd (go to Start -&gt; then type cmd in the search bar and hit enter). There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.&lt;/p&gt;

===Mac===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#macos Download Link].

Step 2 -&gt; Double click on the .pkg file that you just downloaded. If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

===Linux===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#linux Download Link].

Step 2 -&gt; Go to the folder where you downloaded the .sh file and type following command 

  '''bash Anaconda-latest-Linux-x86_64.sh'''

If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

==Troubleshooting Spyder==

[[#Top]]

In most of the cases, it happens that Spyder is already running and you have initiated one more instance of it. Please make sure that spyder is not running already.
If you are on Linux OS, please launch spyder through terminal. Just open the terminal and type '''spyder''' and it will launch. When Spyder opens, make sure you see Anaconda with the version written on the Ipython console. If not, try changing the path of your anaconda. Follow these steps according to your OS version.

====Windows====
[https://stackoverflow.com/questions/44597662/conda-command-is-not-recognized-on-windows-10 Click Here]

====Linux====
[https://stackoverflow.com/questions/18675907/how-to-run-conda Click Here]

====Mac====
[https://stackoverflow.com/questions/35246386/conda-command-not-found Click Here]

In most of the cases relaunching Spyder works.
A more general Troubleshoot is present [https://github.com/spyder-ide/spyder/wiki/Troubleshooting-Guide-and-FAQ Here]

==How to run a program in Spyder IDE?==
Go to Run on the menu bar. Click Run-&gt;Run.

[[#TOP]]
==Print statements==
Print statements help to display output on console. 
{{#ev:youtube|https://youtu.be/gECkqaOwyt0|250|right}}

===Syntax===
print()

===How to print a message?===
In order to print a message in Python, write print(&quot;message&quot;).
Single, double, triple quote can be used print()

'''Example:'''

'''Single Quote'''
print('Hello')  
Output: Hello

'''Double Quote'''
print(&quot;Hello&quot;)  
Output: Hello

'''Quote within quote'''
print('Is &quot;Ram&quot; a good boy?')  
Output: Is &quot;Ram&quot; a good boy?

[[#TOP]]
==Escape sequences with strings==

We can use escape sequence within strings to make output more presentable.

'''\n'''  : It will move to next line.

'''\t'''  : It will add tab space(5space)

'''\a'''  : It will play system sound once.

'''Example:'''

Print(&quot;Hi, \n How are you?&quot;)

Output: 

Hi,

How are you?

Print(&quot;Hi, \t How are you?&quot;)

Output: 

Hi, &lt;5 spaces&gt; How are you?

[[File:Escape_Sequence.jpg]]

==Variables==
[[#Top]]
&lt;pre&gt;
Variables are used to store some values. Values can be strings, integers or decimal values.  

Variable Name Rules:
1. Variable name should start with letter or underscore. Variable name cant start with number.
Example:
Valid: JOC, WIKI, JOC_WIKI, _JOC
Invalid: 1JOC, 123WIKI, 0_WIKI

2. Remaining letter other then first one can contain number, underscore.
Example:
JOC1234, WIKI012_1332

3. Variable names are case sensitivities.
Example:
JOC, jOC, joC all are different varibles. 

&lt;/pre&gt;
{{#ev:youtube|https://youtu.be/60iAXH1sm-Y|250|right}}
===How to print a variable?===
In order to print the value of a variable in python, first initialize the variable and then call it where ever you wanna use it. 
&lt;pre&gt;print(variable_name)&lt;/pre&gt;

&lt;pre&gt;For example :
x=2                # x is viable here
print(x)           # calling variable x with print function

a = &quot;JOC&quot;          # a is variable here
b = &quot;_WIKI&quot;        # b is variable here
c = a + b          # c is variable here which will provide addition of variable a and b
&lt;/pre&gt;

===Some facts about Variables===
* If you want to print variable name with a message, you can use , operator. For example : I want to print Hello Simran and Simran has been stored in a variable called ''name''.
  name=&quot;Simran&quot;
  print(&quot;Hello&quot;,name)
* If you change the value of a variable, it will store the latest value. For example :
  name=&quot;Simran&quot;
  name=&quot;Amit&quot;
  If you will execute the command ''print(name)'', Amit will be displayed.
* You can perform operations like addition, subtraction etc only on integral variables.

===Variables Types and Conversion===
&lt;pre&gt;Variable can be decimal, integer and decimal. And they can be inter covered with the help of conversion functions.

Example:
JOC = 5           Save in Memory as 5       # We have variable with name JOC having value 5 here.
JOC = int(5)      Save in Memory as 5       # Here Variable JOC holding integer value of 5. 
JOC = flot(5)     Save in Memory as 5.0     # Here variable JOC holding flot value of 5
JOC = str(5)      Save in Memory as &quot;5&quot;     # Here variable JOC holding string value of 5 or We can say 5 will be treated as string here.
JOC = complex(5)  Save in Memory as (5+0j)  # Here variable JOC holding complex value of 5.
JOC = oct(5)      Save in Memory as 012     # Here variable JOC holding octal representation of 5.
JOC = hex(5)      Save in Memory as 0xa     # Here variable JOC holding hexadecimal representation of 5

There are many more function available in python. You can convert variable as per your requirement.
&lt;/pre&gt;


&lt;h1 style='color:black;font-family:Calibri;font-size:14.0pt;font-weight:800;
font-style:normal'&gt;Conversion Table with Eample&lt;/h1&gt;

&lt;table border=0 cellpadding=0 cellspacing=0 width=656 style='border-collapse:
 collapse;table-layout:fixed;width:492pt'&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6624497 width=63 style='height:15.0pt;width:47pt'&gt;Serial
  No&lt;/td&gt;
  &lt;td class=xl6724497 width=77 style='border-left:none;width:58pt'&gt;Function&lt;/td&gt;
  &lt;td class=xl6724497 width=303 style='border-left:none;width:227pt'&gt;Description&lt;/td&gt;
  &lt;td class=xl6724497 width=162 style='border-left:none;width:122pt'&gt;Example&lt;/td&gt;
  &lt;td class=xl6824497 width=51 style='border-left:none;width:38pt'&gt;Output&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;1&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;int(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to an
  integer.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10.12;
  print(int(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;2&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;long(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a&lt;span
  style='mso-spacerun:yes'&gt;  &lt;/span&gt;to a long integer&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10.12;
  print(long(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;3&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;float(a)&lt;/td&gt;
  &lt;td class=xl6524497 width=303 style='border-top:none;border-left:none;
  width:227pt'&gt;Converts a to a floating-point number.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 101.23;
  print(float(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;101.23&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;4&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;complex(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to a
  complex number.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print(complex(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10+0j&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;5&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;str(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to
  string.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print(str(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;6&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;repr(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts object
  a to an expression string.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print(repr(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;7&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;tuple(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to
  tuple.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print((a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;8&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;list(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to
  list.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print([a])&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;[10]&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;9&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;set(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to
  set.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a =
  set(&amp;quot;10&amp;quot;); print(a)&lt;/td&gt;
  &lt;td class=xl7124497 width=51 style='border-top:none;border-left:none;
  width:38pt'&gt;{'1', '0'}&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;10&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;dict(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to
  dictonary&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = dict(a=10);
  print(a)&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;{'a': 10}&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;11&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;chr(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts an
  integer to a character.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 97;
  print(chr(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;a&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;12&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;ord(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a
  single character to its integer value.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a =
  &amp;quot;J&amp;quot;; print(ord(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;74&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;13&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;hex(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts an
  integer to a hexadecimal string.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print(hex(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;0xa&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=21 style='height:15.75pt'&gt;
  &lt;td height=21 class=xl7224497 style='height:15.75pt;border-top:none'&gt;14&lt;/td&gt;
  &lt;td class=xl7324497 style='border-top:none;border-left:none'&gt;oct(a)&lt;/td&gt;
  &lt;td class=xl7324497 style='border-top:none;border-left:none'&gt;Converts an
  integer to an octal string.&lt;/td&gt;
  &lt;td class=xl7324497 style='border-top:none;border-left:none'&gt;a = 10;
  print(oct(a))&lt;/td&gt;
  &lt;td class=xl7424497 style='border-top:none;border-left:none'&gt;0o12&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
  &lt;tr height=0 style='display:none'&gt;
  &lt;td width=63 style='width:47pt'&gt;&lt;/td&gt;
  &lt;td width=77 style='width:58pt'&gt;&lt;/td&gt;
  &lt;td width=303 style='width:227pt'&gt;&lt;/td&gt;
  &lt;td width=162 style='width:122pt'&gt;&lt;/td&gt;
  &lt;td width=51 style='width:38pt'&gt;&lt;/td&gt;
 &lt;/tr&gt;
&lt;/table&gt;

==How to execute couple of instructions on console?==
You can execute couple of instructions on console using ;. Write Statement 1;Statement 2;......and then press ''Enter''.
{{#ev:youtube|https://youtu.be/CYQCYvLE22Y|250|right}}









==How to take input from the user?==
We can take input from the user using ''input'' function. For Example : You want the user to input variable ''x'', then write x=input(&quot;Enter the value of x&quot;) and execute. Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNkVLCxZw_jcgyS-bmrIVSP

And when the input you need is of data type other than string. You can do both the input function and data conversion in a single line.
For example:
Consider the program for letting in the patients
'''c=input(&quot;Enter (1/0)&quot;);d=int(c)'''

Instead of using it in two separate lines, combine it into a single line
'''c=int(input(&quot;Enter (1/0)&quot;))'''.

To get two inputs in same line with a space between them split() is used.

a,b=input(&quot;enter a&quot;).split(&quot;enter b&quot;)
----
[[#Top]]

==If statement==
If statement is used to execute set of two contrary statements based on a condition. 

===Syntax===
If (Condition):
    Statement 1
else:
    Statement 2

If 'Condition' is true then 'Statement 1' will be executed otherwise 'Statement 2' will be executed.

Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNhHmg3SkK1uiutigcAbH9K

==Loops==
[[#Top]]&lt;br&gt;
Loops in a programming languages are used to execute set of repetitive statements. For loop and while loop are used extensively to execute a set of looping instructions.

=== For loop Syntax ===
&lt;pre&gt;
for i in range(10): 
    Statement
&lt;/pre&gt;
range(10) indicate that values 0 to 9 will be assigned to the variable i and for each value of i the Statement will be executed, e.g.
&lt;pre&gt;
for i in range(10): 
    print(i)
&lt;/pre&gt;
Output will be
&lt;pre&gt;
0
1
2
3
4
5
6
7
8
9
&lt;/pre&gt;

[[#Top]]

=== While loop Syntax ===
&lt;pre&gt;
intialisation

while(condition):
   Statement
   increment/decrement
&lt;/pre&gt;
e.g.
&lt;pre&gt;
#initialization
i=0
while(i&lt;10): 
    print(i)
    i=i+1
&lt;/pre&gt;
Output will be:
&lt;pre&gt;
0
1
2
3
4
5
6
7
8
9
&lt;/pre&gt;
Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNbl5jkVrrw1E5XSvm3GiCI

[[#TOP]]
==Importance of Indentation in Python==
Indentation is used to indicate to what block of statements belong. Indentation of blocks convey program structure in Python. Indentation in Python is used to refer a group/block of code/statements. In C++ we use { and } (curly brackets) to group a set of statements. But in Python, there are no such brackets used. Instead of such brackets used in other programming languages, we use indentation in Python.
Use tabs,instead of spaces for ease of writing code.

Wrong indentation can lead to syntax error, or makes your output wrong for your logic e.g.
&lt;pre&gt;
#IndentationError: expected an indented block
i=-1
if i&lt;0:
print(&quot;Test successful&quot;)#Wrong indentation 
else:    
    print(&quot;Test failed&quot;)
#Output: IndentationError: expected an indented block
&lt;/pre&gt;
---
&lt;pre&gt;
#Properly Indented code:
i=-1
if i&lt;0:
    print(&quot;Test successful&quot;)#Wrong indentation
else:    
    print(&quot;Test failed&quot;)
#Output:Test successful
&lt;/pre&gt;
---
Logic changed, so output changed, with improper indentation, e.g.
---
&lt;h3&gt;Code : 1&lt;/h3&gt;
&lt;pre&gt;
sum=0
for i in range(5):
    for j in range(5):
        sum+=i
print(sum, end=&quot; &quot;)
#Output: 50
&lt;/pre&gt;
        
&lt;h3&gt;Code : 2&lt;/h3&gt;
&lt;pre&gt;
for i in range(5):
    for j in range(5):
        print(end=&quot; &quot;)
    sum+=i
print(sum, end=&quot; &quot;)
#Output:                          10
&lt;/pre&gt;
{{#ev:youtube|https://youtu.be/pmavoW419Yc|250|right}}&lt;br&gt;

[[#Top]]

==Spyder IDE Black Screen Solution==

----

 This issue is because of ''Help'' screen which is by default open. 
 We need to close it. So here's how you do it-


===Method 1:===

Step 1-    Try by closing current pane for that,  &quot;''press ctrl+shift+F4''&quot;  wait for few seconds things will appear on screen.

Step 2-    If it so than on menu bar go to ''view &gt; panes &gt; help'' unchecked &quot;''Help''&quot; option.

Step 3-    Make sure that &quot;''Help''&quot; under ''view &gt; panes'' is permanently unchecked. And ''Editor, Ipython console, Variable explorer''  are checked. 


===Method 2:===

Step 1-    Open spyder.

Step 2-   On that black screen randomly ''Left click'' on spyder &quot;''Menu bar''&quot; area you will get menu drop downs, You have to find Drop down with &quot;''Panes''&quot; option.

Step 3-   On &quot;''Panes''&quot; drop down unchecked the &quot;''Help''&quot;.

Step 4-   Wait for few seconds Spyder view will appear.

Step 5 -  Make sure that ''&quot;Help&quot;'' under view&gt;panes is permanently unchecked. And ''Editor, Ipython console, variable explorer'' are checked.


[[#Top]]</text>
      <sha1>i9u8wt9m5xb604oy32dokk3g9v9dmaq</sha1>
    </revision>
    <revision>
      <id>3606</id>
      <parentid>3605</parentid>
      <timestamp>2018-09-28T04:20:44Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* Troubleshooting Spyder */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="20323">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_2 Contributors of this page]
==Introduction to Python==
 &lt;p style=&quot;text-align:justify&quot;&gt;Python is a widely used programming language which allows programmers to write the program in fewer lines of code. It was designed by ''Guido van Rossum'' in 1991. Python uses an interpreter instead of compiler.Basically, the main difference between compiler and interpreter is that the compiler takes the code as 'whole' and compiles it. for example, in C language and on the other side in interpreter. For example: languages like Python. It interprets the written code 'line by line', and if somewhere error is found. It stops interpreting the code from there itself. Here, in our course we will be using Spyder IDE. Spyder is an integrated development environment with editing options to assist the programmers in writing programs. Spyder IDE is divided into two panes, one is console and other one is where program is written.&lt;/p&gt;

&lt;p style=&quot;text-align:justify&quot;&gt;
Python works on different platforms (Windows, Mac, Linux, Raspberry Pi, etc).
Python has a simple syntax similar to the English language.
Python has syntax that allows developers to write programs with fewer lines than some other programming languages.
Python runs on an interpreter system, meaning that code can be executed as soon as it is written. This means that prototyping can be very quick.&lt;/p&gt;
Python can be treated in a procedural way, an object-orientated way or a functional way.

==Installing Anaconda==
[[#Top]]
This article is all about installing and troubleshooting Anaconda and Spyder on different platforms.

===Windows===
Step 1 -&gt; Download the installer from here 
 &lt;p style=&quot;text-align:justify&quot;&gt;
[https://www.anaconda.com/download/#windows Download Link]. Make sure that you download the version compatible to your operating system architecture. If you have a 64 bit OS then you can download either 64 bit of 32 bit, but if you have 32 bit OS then you should download the 32 bit version only.
&lt;/p&gt;
 &lt;p style=&quot;text-align:justify&quot;&gt;
Step 2 -&gt; Double click on the .exe file that you downloaded just now and follow the instructions. If you are not sure of the installation options then just choose the default.&lt;/p&gt;
 &lt;p style=&quot;text-align:justify&quot;&gt;
Step 3 -&gt; To test your installation, open cmd (go to Start -&gt; then type cmd in the search bar and hit enter). There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.&lt;/p&gt;

===Mac===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#macos Download Link].

Step 2 -&gt; Double click on the .pkg file that you just downloaded. If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

===Linux===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#linux Download Link].

Step 2 -&gt; Go to the folder where you downloaded the .sh file and type following command 

  '''bash Anaconda-latest-Linux-x86_64.sh'''

If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

==Troubleshooting Spyder==

[[#Top]]
 &lt;p style=&quot;text-align:justify&quot;&gt;
In most of the cases, it happens that Spyder is already running and you have initiated one more instance of it. Please make sure that spyder is not running already.
If you are on Linux OS, please launch spyder through terminal. Just open the terminal and type '''spyder''' and it will launch. When Spyder opens, make sure you see Anaconda with the version written on the Ipython console. If not, try changing the path of your anaconda. Follow these steps according to your OS version.&lt;/p&gt;

====Windows====
[https://stackoverflow.com/questions/44597662/conda-command-is-not-recognized-on-windows-10 Click Here]

====Linux====
[https://stackoverflow.com/questions/18675907/how-to-run-conda Click Here]

====Mac====
[https://stackoverflow.com/questions/35246386/conda-command-not-found Click Here]

In most of the cases relaunching Spyder works.
A more general Troubleshoot is present [https://github.com/spyder-ide/spyder/wiki/Troubleshooting-Guide-and-FAQ Here]

==How to run a program in Spyder IDE?==
Go to Run on the menu bar. Click Run-&gt;Run.

[[#TOP]]
==Print statements==
Print statements help to display output on console. 
{{#ev:youtube|https://youtu.be/gECkqaOwyt0|250|right}}

===Syntax===
print()

===How to print a message?===
In order to print a message in Python, write print(&quot;message&quot;).
Single, double, triple quote can be used print()

'''Example:'''

'''Single Quote'''
print('Hello')  
Output: Hello

'''Double Quote'''
print(&quot;Hello&quot;)  
Output: Hello

'''Quote within quote'''
print('Is &quot;Ram&quot; a good boy?')  
Output: Is &quot;Ram&quot; a good boy?

[[#TOP]]
==Escape sequences with strings==

We can use escape sequence within strings to make output more presentable.

'''\n'''  : It will move to next line.

'''\t'''  : It will add tab space(5space)

'''\a'''  : It will play system sound once.

'''Example:'''

Print(&quot;Hi, \n How are you?&quot;)

Output: 

Hi,

How are you?

Print(&quot;Hi, \t How are you?&quot;)

Output: 

Hi, &lt;5 spaces&gt; How are you?

[[File:Escape_Sequence.jpg]]

==Variables==
[[#Top]]
&lt;pre&gt;
Variables are used to store some values. Values can be strings, integers or decimal values.  

Variable Name Rules:
1. Variable name should start with letter or underscore. Variable name cant start with number.
Example:
Valid: JOC, WIKI, JOC_WIKI, _JOC
Invalid: 1JOC, 123WIKI, 0_WIKI

2. Remaining letter other then first one can contain number, underscore.
Example:
JOC1234, WIKI012_1332

3. Variable names are case sensitivities.
Example:
JOC, jOC, joC all are different varibles. 

&lt;/pre&gt;
{{#ev:youtube|https://youtu.be/60iAXH1sm-Y|250|right}}
===How to print a variable?===
In order to print the value of a variable in python, first initialize the variable and then call it where ever you wanna use it. 
&lt;pre&gt;print(variable_name)&lt;/pre&gt;

&lt;pre&gt;For example :
x=2                # x is viable here
print(x)           # calling variable x with print function

a = &quot;JOC&quot;          # a is variable here
b = &quot;_WIKI&quot;        # b is variable here
c = a + b          # c is variable here which will provide addition of variable a and b
&lt;/pre&gt;

===Some facts about Variables===
* If you want to print variable name with a message, you can use , operator. For example : I want to print Hello Simran and Simran has been stored in a variable called ''name''.
  name=&quot;Simran&quot;
  print(&quot;Hello&quot;,name)
* If you change the value of a variable, it will store the latest value. For example :
  name=&quot;Simran&quot;
  name=&quot;Amit&quot;
  If you will execute the command ''print(name)'', Amit will be displayed.
* You can perform operations like addition, subtraction etc only on integral variables.

===Variables Types and Conversion===
&lt;pre&gt;Variable can be decimal, integer and decimal. And they can be inter covered with the help of conversion functions.

Example:
JOC = 5           Save in Memory as 5       # We have variable with name JOC having value 5 here.
JOC = int(5)      Save in Memory as 5       # Here Variable JOC holding integer value of 5. 
JOC = flot(5)     Save in Memory as 5.0     # Here variable JOC holding flot value of 5
JOC = str(5)      Save in Memory as &quot;5&quot;     # Here variable JOC holding string value of 5 or We can say 5 will be treated as string here.
JOC = complex(5)  Save in Memory as (5+0j)  # Here variable JOC holding complex value of 5.
JOC = oct(5)      Save in Memory as 012     # Here variable JOC holding octal representation of 5.
JOC = hex(5)      Save in Memory as 0xa     # Here variable JOC holding hexadecimal representation of 5

There are many more function available in python. You can convert variable as per your requirement.
&lt;/pre&gt;


&lt;h1 style='color:black;font-family:Calibri;font-size:14.0pt;font-weight:800;
font-style:normal'&gt;Conversion Table with Eample&lt;/h1&gt;

&lt;table border=0 cellpadding=0 cellspacing=0 width=656 style='border-collapse:
 collapse;table-layout:fixed;width:492pt'&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6624497 width=63 style='height:15.0pt;width:47pt'&gt;Serial
  No&lt;/td&gt;
  &lt;td class=xl6724497 width=77 style='border-left:none;width:58pt'&gt;Function&lt;/td&gt;
  &lt;td class=xl6724497 width=303 style='border-left:none;width:227pt'&gt;Description&lt;/td&gt;
  &lt;td class=xl6724497 width=162 style='border-left:none;width:122pt'&gt;Example&lt;/td&gt;
  &lt;td class=xl6824497 width=51 style='border-left:none;width:38pt'&gt;Output&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;1&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;int(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to an
  integer.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10.12;
  print(int(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;2&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;long(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a&lt;span
  style='mso-spacerun:yes'&gt;  &lt;/span&gt;to a long integer&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10.12;
  print(long(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;3&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;float(a)&lt;/td&gt;
  &lt;td class=xl6524497 width=303 style='border-top:none;border-left:none;
  width:227pt'&gt;Converts a to a floating-point number.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 101.23;
  print(float(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;101.23&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;4&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;complex(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to a
  complex number.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print(complex(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10+0j&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;5&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;str(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to
  string.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print(str(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;6&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;repr(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts object
  a to an expression string.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print(repr(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;7&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;tuple(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to
  tuple.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print((a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;8&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;list(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to
  list.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print([a])&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;[10]&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;9&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;set(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to
  set.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a =
  set(&amp;quot;10&amp;quot;); print(a)&lt;/td&gt;
  &lt;td class=xl7124497 width=51 style='border-top:none;border-left:none;
  width:38pt'&gt;{'1', '0'}&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;10&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;dict(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to
  dictonary&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = dict(a=10);
  print(a)&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;{'a': 10}&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;11&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;chr(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts an
  integer to a character.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 97;
  print(chr(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;a&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;12&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;ord(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a
  single character to its integer value.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a =
  &amp;quot;J&amp;quot;; print(ord(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;74&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;13&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;hex(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts an
  integer to a hexadecimal string.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print(hex(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;0xa&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=21 style='height:15.75pt'&gt;
  &lt;td height=21 class=xl7224497 style='height:15.75pt;border-top:none'&gt;14&lt;/td&gt;
  &lt;td class=xl7324497 style='border-top:none;border-left:none'&gt;oct(a)&lt;/td&gt;
  &lt;td class=xl7324497 style='border-top:none;border-left:none'&gt;Converts an
  integer to an octal string.&lt;/td&gt;
  &lt;td class=xl7324497 style='border-top:none;border-left:none'&gt;a = 10;
  print(oct(a))&lt;/td&gt;
  &lt;td class=xl7424497 style='border-top:none;border-left:none'&gt;0o12&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
  &lt;tr height=0 style='display:none'&gt;
  &lt;td width=63 style='width:47pt'&gt;&lt;/td&gt;
  &lt;td width=77 style='width:58pt'&gt;&lt;/td&gt;
  &lt;td width=303 style='width:227pt'&gt;&lt;/td&gt;
  &lt;td width=162 style='width:122pt'&gt;&lt;/td&gt;
  &lt;td width=51 style='width:38pt'&gt;&lt;/td&gt;
 &lt;/tr&gt;
&lt;/table&gt;

==How to execute couple of instructions on console?==
You can execute couple of instructions on console using ;. Write Statement 1;Statement 2;......and then press ''Enter''.
{{#ev:youtube|https://youtu.be/CYQCYvLE22Y|250|right}}









==How to take input from the user?==
We can take input from the user using ''input'' function. For Example : You want the user to input variable ''x'', then write x=input(&quot;Enter the value of x&quot;) and execute. Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNkVLCxZw_jcgyS-bmrIVSP

And when the input you need is of data type other than string. You can do both the input function and data conversion in a single line.
For example:
Consider the program for letting in the patients
'''c=input(&quot;Enter (1/0)&quot;);d=int(c)'''

Instead of using it in two separate lines, combine it into a single line
'''c=int(input(&quot;Enter (1/0)&quot;))'''.

To get two inputs in same line with a space between them split() is used.

a,b=input(&quot;enter a&quot;).split(&quot;enter b&quot;)
----
[[#Top]]

==If statement==
If statement is used to execute set of two contrary statements based on a condition. 

===Syntax===
If (Condition):
    Statement 1
else:
    Statement 2

If 'Condition' is true then 'Statement 1' will be executed otherwise 'Statement 2' will be executed.

Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNhHmg3SkK1uiutigcAbH9K

==Loops==
[[#Top]]&lt;br&gt;
Loops in a programming languages are used to execute set of repetitive statements. For loop and while loop are used extensively to execute a set of looping instructions.

=== For loop Syntax ===
&lt;pre&gt;
for i in range(10): 
    Statement
&lt;/pre&gt;
range(10) indicate that values 0 to 9 will be assigned to the variable i and for each value of i the Statement will be executed, e.g.
&lt;pre&gt;
for i in range(10): 
    print(i)
&lt;/pre&gt;
Output will be
&lt;pre&gt;
0
1
2
3
4
5
6
7
8
9
&lt;/pre&gt;

[[#Top]]

=== While loop Syntax ===
&lt;pre&gt;
intialisation

while(condition):
   Statement
   increment/decrement
&lt;/pre&gt;
e.g.
&lt;pre&gt;
#initialization
i=0
while(i&lt;10): 
    print(i)
    i=i+1
&lt;/pre&gt;
Output will be:
&lt;pre&gt;
0
1
2
3
4
5
6
7
8
9
&lt;/pre&gt;
Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNbl5jkVrrw1E5XSvm3GiCI

[[#TOP]]
==Importance of Indentation in Python==
Indentation is used to indicate to what block of statements belong. Indentation of blocks convey program structure in Python. Indentation in Python is used to refer a group/block of code/statements. In C++ we use { and } (curly brackets) to group a set of statements. But in Python, there are no such brackets used. Instead of such brackets used in other programming languages, we use indentation in Python.
Use tabs,instead of spaces for ease of writing code.

Wrong indentation can lead to syntax error, or makes your output wrong for your logic e.g.
&lt;pre&gt;
#IndentationError: expected an indented block
i=-1
if i&lt;0:
print(&quot;Test successful&quot;)#Wrong indentation 
else:    
    print(&quot;Test failed&quot;)
#Output: IndentationError: expected an indented block
&lt;/pre&gt;
---
&lt;pre&gt;
#Properly Indented code:
i=-1
if i&lt;0:
    print(&quot;Test successful&quot;)#Wrong indentation
else:    
    print(&quot;Test failed&quot;)
#Output:Test successful
&lt;/pre&gt;
---
Logic changed, so output changed, with improper indentation, e.g.
---
&lt;h3&gt;Code : 1&lt;/h3&gt;
&lt;pre&gt;
sum=0
for i in range(5):
    for j in range(5):
        sum+=i
print(sum, end=&quot; &quot;)
#Output: 50
&lt;/pre&gt;
        
&lt;h3&gt;Code : 2&lt;/h3&gt;
&lt;pre&gt;
for i in range(5):
    for j in range(5):
        print(end=&quot; &quot;)
    sum+=i
print(sum, end=&quot; &quot;)
#Output:                          10
&lt;/pre&gt;
{{#ev:youtube|https://youtu.be/pmavoW419Yc|250|right}}&lt;br&gt;

[[#Top]]

==Spyder IDE Black Screen Solution==

----

 This issue is because of ''Help'' screen which is by default open. 
 We need to close it. So here's how you do it-


===Method 1:===

Step 1-    Try by closing current pane for that,  &quot;''press ctrl+shift+F4''&quot;  wait for few seconds things will appear on screen.

Step 2-    If it so than on menu bar go to ''view &gt; panes &gt; help'' unchecked &quot;''Help''&quot; option.

Step 3-    Make sure that &quot;''Help''&quot; under ''view &gt; panes'' is permanently unchecked. And ''Editor, Ipython console, Variable explorer''  are checked. 


===Method 2:===

Step 1-    Open spyder.

Step 2-   On that black screen randomly ''Left click'' on spyder &quot;''Menu bar''&quot; area you will get menu drop downs, You have to find Drop down with &quot;''Panes''&quot; option.

Step 3-   On &quot;''Panes''&quot; drop down unchecked the &quot;''Help''&quot;.

Step 4-   Wait for few seconds Spyder view will appear.

Step 5 -  Make sure that ''&quot;Help&quot;'' under view&gt;panes is permanently unchecked. And ''Editor, Ipython console, variable explorer'' are checked.


[[#Top]]</text>
      <sha1>ohmlxg3uxwcuae4fys0vbgvx6li11ho</sha1>
    </revision>
    <revision>
      <id>3607</id>
      <parentid>3606</parentid>
      <timestamp>2018-09-28T04:21:40Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* How to print a message? */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="20336">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_2 Contributors of this page]
==Introduction to Python==
 &lt;p style=&quot;text-align:justify&quot;&gt;Python is a widely used programming language which allows programmers to write the program in fewer lines of code. It was designed by ''Guido van Rossum'' in 1991. Python uses an interpreter instead of compiler.Basically, the main difference between compiler and interpreter is that the compiler takes the code as 'whole' and compiles it. for example, in C language and on the other side in interpreter. For example: languages like Python. It interprets the written code 'line by line', and if somewhere error is found. It stops interpreting the code from there itself. Here, in our course we will be using Spyder IDE. Spyder is an integrated development environment with editing options to assist the programmers in writing programs. Spyder IDE is divided into two panes, one is console and other one is where program is written.&lt;/p&gt;

&lt;p style=&quot;text-align:justify&quot;&gt;
Python works on different platforms (Windows, Mac, Linux, Raspberry Pi, etc).
Python has a simple syntax similar to the English language.
Python has syntax that allows developers to write programs with fewer lines than some other programming languages.
Python runs on an interpreter system, meaning that code can be executed as soon as it is written. This means that prototyping can be very quick.&lt;/p&gt;
Python can be treated in a procedural way, an object-orientated way or a functional way.

==Installing Anaconda==
[[#Top]]
This article is all about installing and troubleshooting Anaconda and Spyder on different platforms.

===Windows===
Step 1 -&gt; Download the installer from here 
 &lt;p style=&quot;text-align:justify&quot;&gt;
[https://www.anaconda.com/download/#windows Download Link]. Make sure that you download the version compatible to your operating system architecture. If you have a 64 bit OS then you can download either 64 bit of 32 bit, but if you have 32 bit OS then you should download the 32 bit version only.
&lt;/p&gt;
 &lt;p style=&quot;text-align:justify&quot;&gt;
Step 2 -&gt; Double click on the .exe file that you downloaded just now and follow the instructions. If you are not sure of the installation options then just choose the default.&lt;/p&gt;
 &lt;p style=&quot;text-align:justify&quot;&gt;
Step 3 -&gt; To test your installation, open cmd (go to Start -&gt; then type cmd in the search bar and hit enter). There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.&lt;/p&gt;

===Mac===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#macos Download Link].

Step 2 -&gt; Double click on the .pkg file that you just downloaded. If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

===Linux===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#linux Download Link].

Step 2 -&gt; Go to the folder where you downloaded the .sh file and type following command 

  '''bash Anaconda-latest-Linux-x86_64.sh'''

If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

==Troubleshooting Spyder==

[[#Top]]
 &lt;p style=&quot;text-align:justify&quot;&gt;
In most of the cases, it happens that Spyder is already running and you have initiated one more instance of it. Please make sure that spyder is not running already.
If you are on Linux OS, please launch spyder through terminal. Just open the terminal and type '''spyder''' and it will launch. When Spyder opens, make sure you see Anaconda with the version written on the Ipython console. If not, try changing the path of your anaconda. Follow these steps according to your OS version.&lt;/p&gt;

====Windows====
[https://stackoverflow.com/questions/44597662/conda-command-is-not-recognized-on-windows-10 Click Here]

====Linux====
[https://stackoverflow.com/questions/18675907/how-to-run-conda Click Here]

====Mac====
[https://stackoverflow.com/questions/35246386/conda-command-not-found Click Here]

In most of the cases relaunching Spyder works.
A more general Troubleshoot is present [https://github.com/spyder-ide/spyder/wiki/Troubleshooting-Guide-and-FAQ Here]

==How to run a program in Spyder IDE?==
Go to Run on the menu bar. Click Run-&gt;Run.

[[#TOP]]
==Print statements==
Print statements help to display output on console. 
{{#ev:youtube|https://youtu.be/gECkqaOwyt0|250|right}}

===Syntax===
print()

===How to print a message?===
In order to print a message in Python, write print(&quot;message&quot;).
Single, double, triple quote can be used print()

'''Example:'''

'''Single Quote'''
&lt;pre&gt;
print('Hello')  
Output: Hello
&lt;/pre&gt;
'''Double Quote'''
print(&quot;Hello&quot;)  
Output: Hello

'''Quote within quote'''
print('Is &quot;Ram&quot; a good boy?')  
Output: Is &quot;Ram&quot; a good boy?

[[#TOP]]

==Escape sequences with strings==

We can use escape sequence within strings to make output more presentable.

'''\n'''  : It will move to next line.

'''\t'''  : It will add tab space(5space)

'''\a'''  : It will play system sound once.

'''Example:'''

Print(&quot;Hi, \n How are you?&quot;)

Output: 

Hi,

How are you?

Print(&quot;Hi, \t How are you?&quot;)

Output: 

Hi, &lt;5 spaces&gt; How are you?

[[File:Escape_Sequence.jpg]]

==Variables==
[[#Top]]
&lt;pre&gt;
Variables are used to store some values. Values can be strings, integers or decimal values.  

Variable Name Rules:
1. Variable name should start with letter or underscore. Variable name cant start with number.
Example:
Valid: JOC, WIKI, JOC_WIKI, _JOC
Invalid: 1JOC, 123WIKI, 0_WIKI

2. Remaining letter other then first one can contain number, underscore.
Example:
JOC1234, WIKI012_1332

3. Variable names are case sensitivities.
Example:
JOC, jOC, joC all are different varibles. 

&lt;/pre&gt;
{{#ev:youtube|https://youtu.be/60iAXH1sm-Y|250|right}}
===How to print a variable?===
In order to print the value of a variable in python, first initialize the variable and then call it where ever you wanna use it. 
&lt;pre&gt;print(variable_name)&lt;/pre&gt;

&lt;pre&gt;For example :
x=2                # x is viable here
print(x)           # calling variable x with print function

a = &quot;JOC&quot;          # a is variable here
b = &quot;_WIKI&quot;        # b is variable here
c = a + b          # c is variable here which will provide addition of variable a and b
&lt;/pre&gt;

===Some facts about Variables===
* If you want to print variable name with a message, you can use , operator. For example : I want to print Hello Simran and Simran has been stored in a variable called ''name''.
  name=&quot;Simran&quot;
  print(&quot;Hello&quot;,name)
* If you change the value of a variable, it will store the latest value. For example :
  name=&quot;Simran&quot;
  name=&quot;Amit&quot;
  If you will execute the command ''print(name)'', Amit will be displayed.
* You can perform operations like addition, subtraction etc only on integral variables.

===Variables Types and Conversion===
&lt;pre&gt;Variable can be decimal, integer and decimal. And they can be inter covered with the help of conversion functions.

Example:
JOC = 5           Save in Memory as 5       # We have variable with name JOC having value 5 here.
JOC = int(5)      Save in Memory as 5       # Here Variable JOC holding integer value of 5. 
JOC = flot(5)     Save in Memory as 5.0     # Here variable JOC holding flot value of 5
JOC = str(5)      Save in Memory as &quot;5&quot;     # Here variable JOC holding string value of 5 or We can say 5 will be treated as string here.
JOC = complex(5)  Save in Memory as (5+0j)  # Here variable JOC holding complex value of 5.
JOC = oct(5)      Save in Memory as 012     # Here variable JOC holding octal representation of 5.
JOC = hex(5)      Save in Memory as 0xa     # Here variable JOC holding hexadecimal representation of 5

There are many more function available in python. You can convert variable as per your requirement.
&lt;/pre&gt;


&lt;h1 style='color:black;font-family:Calibri;font-size:14.0pt;font-weight:800;
font-style:normal'&gt;Conversion Table with Eample&lt;/h1&gt;

&lt;table border=0 cellpadding=0 cellspacing=0 width=656 style='border-collapse:
 collapse;table-layout:fixed;width:492pt'&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6624497 width=63 style='height:15.0pt;width:47pt'&gt;Serial
  No&lt;/td&gt;
  &lt;td class=xl6724497 width=77 style='border-left:none;width:58pt'&gt;Function&lt;/td&gt;
  &lt;td class=xl6724497 width=303 style='border-left:none;width:227pt'&gt;Description&lt;/td&gt;
  &lt;td class=xl6724497 width=162 style='border-left:none;width:122pt'&gt;Example&lt;/td&gt;
  &lt;td class=xl6824497 width=51 style='border-left:none;width:38pt'&gt;Output&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;1&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;int(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to an
  integer.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10.12;
  print(int(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;2&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;long(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a&lt;span
  style='mso-spacerun:yes'&gt;  &lt;/span&gt;to a long integer&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10.12;
  print(long(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;3&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;float(a)&lt;/td&gt;
  &lt;td class=xl6524497 width=303 style='border-top:none;border-left:none;
  width:227pt'&gt;Converts a to a floating-point number.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 101.23;
  print(float(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;101.23&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;4&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;complex(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to a
  complex number.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print(complex(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10+0j&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;5&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;str(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to
  string.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print(str(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;6&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;repr(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts object
  a to an expression string.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print(repr(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;7&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;tuple(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to
  tuple.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print((a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;8&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;list(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to
  list.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print([a])&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;[10]&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;9&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;set(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to
  set.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a =
  set(&amp;quot;10&amp;quot;); print(a)&lt;/td&gt;
  &lt;td class=xl7124497 width=51 style='border-top:none;border-left:none;
  width:38pt'&gt;{'1', '0'}&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;10&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;dict(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to
  dictonary&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = dict(a=10);
  print(a)&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;{'a': 10}&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;11&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;chr(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts an
  integer to a character.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 97;
  print(chr(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;a&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;12&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;ord(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a
  single character to its integer value.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a =
  &amp;quot;J&amp;quot;; print(ord(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;74&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;13&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;hex(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts an
  integer to a hexadecimal string.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print(hex(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;0xa&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=21 style='height:15.75pt'&gt;
  &lt;td height=21 class=xl7224497 style='height:15.75pt;border-top:none'&gt;14&lt;/td&gt;
  &lt;td class=xl7324497 style='border-top:none;border-left:none'&gt;oct(a)&lt;/td&gt;
  &lt;td class=xl7324497 style='border-top:none;border-left:none'&gt;Converts an
  integer to an octal string.&lt;/td&gt;
  &lt;td class=xl7324497 style='border-top:none;border-left:none'&gt;a = 10;
  print(oct(a))&lt;/td&gt;
  &lt;td class=xl7424497 style='border-top:none;border-left:none'&gt;0o12&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
  &lt;tr height=0 style='display:none'&gt;
  &lt;td width=63 style='width:47pt'&gt;&lt;/td&gt;
  &lt;td width=77 style='width:58pt'&gt;&lt;/td&gt;
  &lt;td width=303 style='width:227pt'&gt;&lt;/td&gt;
  &lt;td width=162 style='width:122pt'&gt;&lt;/td&gt;
  &lt;td width=51 style='width:38pt'&gt;&lt;/td&gt;
 &lt;/tr&gt;
&lt;/table&gt;

==How to execute couple of instructions on console?==
You can execute couple of instructions on console using ;. Write Statement 1;Statement 2;......and then press ''Enter''.
{{#ev:youtube|https://youtu.be/CYQCYvLE22Y|250|right}}









==How to take input from the user?==
We can take input from the user using ''input'' function. For Example : You want the user to input variable ''x'', then write x=input(&quot;Enter the value of x&quot;) and execute. Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNkVLCxZw_jcgyS-bmrIVSP

And when the input you need is of data type other than string. You can do both the input function and data conversion in a single line.
For example:
Consider the program for letting in the patients
'''c=input(&quot;Enter (1/0)&quot;);d=int(c)'''

Instead of using it in two separate lines, combine it into a single line
'''c=int(input(&quot;Enter (1/0)&quot;))'''.

To get two inputs in same line with a space between them split() is used.

a,b=input(&quot;enter a&quot;).split(&quot;enter b&quot;)
----
[[#Top]]

==If statement==
If statement is used to execute set of two contrary statements based on a condition. 

===Syntax===
If (Condition):
    Statement 1
else:
    Statement 2

If 'Condition' is true then 'Statement 1' will be executed otherwise 'Statement 2' will be executed.

Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNhHmg3SkK1uiutigcAbH9K

==Loops==
[[#Top]]&lt;br&gt;
Loops in a programming languages are used to execute set of repetitive statements. For loop and while loop are used extensively to execute a set of looping instructions.

=== For loop Syntax ===
&lt;pre&gt;
for i in range(10): 
    Statement
&lt;/pre&gt;
range(10) indicate that values 0 to 9 will be assigned to the variable i and for each value of i the Statement will be executed, e.g.
&lt;pre&gt;
for i in range(10): 
    print(i)
&lt;/pre&gt;
Output will be
&lt;pre&gt;
0
1
2
3
4
5
6
7
8
9
&lt;/pre&gt;

[[#Top]]

=== While loop Syntax ===
&lt;pre&gt;
intialisation

while(condition):
   Statement
   increment/decrement
&lt;/pre&gt;
e.g.
&lt;pre&gt;
#initialization
i=0
while(i&lt;10): 
    print(i)
    i=i+1
&lt;/pre&gt;
Output will be:
&lt;pre&gt;
0
1
2
3
4
5
6
7
8
9
&lt;/pre&gt;
Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNbl5jkVrrw1E5XSvm3GiCI

[[#TOP]]
==Importance of Indentation in Python==
Indentation is used to indicate to what block of statements belong. Indentation of blocks convey program structure in Python. Indentation in Python is used to refer a group/block of code/statements. In C++ we use { and } (curly brackets) to group a set of statements. But in Python, there are no such brackets used. Instead of such brackets used in other programming languages, we use indentation in Python.
Use tabs,instead of spaces for ease of writing code.

Wrong indentation can lead to syntax error, or makes your output wrong for your logic e.g.
&lt;pre&gt;
#IndentationError: expected an indented block
i=-1
if i&lt;0:
print(&quot;Test successful&quot;)#Wrong indentation 
else:    
    print(&quot;Test failed&quot;)
#Output: IndentationError: expected an indented block
&lt;/pre&gt;
---
&lt;pre&gt;
#Properly Indented code:
i=-1
if i&lt;0:
    print(&quot;Test successful&quot;)#Wrong indentation
else:    
    print(&quot;Test failed&quot;)
#Output:Test successful
&lt;/pre&gt;
---
Logic changed, so output changed, with improper indentation, e.g.
---
&lt;h3&gt;Code : 1&lt;/h3&gt;
&lt;pre&gt;
sum=0
for i in range(5):
    for j in range(5):
        sum+=i
print(sum, end=&quot; &quot;)
#Output: 50
&lt;/pre&gt;
        
&lt;h3&gt;Code : 2&lt;/h3&gt;
&lt;pre&gt;
for i in range(5):
    for j in range(5):
        print(end=&quot; &quot;)
    sum+=i
print(sum, end=&quot; &quot;)
#Output:                          10
&lt;/pre&gt;
{{#ev:youtube|https://youtu.be/pmavoW419Yc|250|right}}&lt;br&gt;

[[#Top]]

==Spyder IDE Black Screen Solution==

----

 This issue is because of ''Help'' screen which is by default open. 
 We need to close it. So here's how you do it-


===Method 1:===

Step 1-    Try by closing current pane for that,  &quot;''press ctrl+shift+F4''&quot;  wait for few seconds things will appear on screen.

Step 2-    If it so than on menu bar go to ''view &gt; panes &gt; help'' unchecked &quot;''Help''&quot; option.

Step 3-    Make sure that &quot;''Help''&quot; under ''view &gt; panes'' is permanently unchecked. And ''Editor, Ipython console, Variable explorer''  are checked. 


===Method 2:===

Step 1-    Open spyder.

Step 2-   On that black screen randomly ''Left click'' on spyder &quot;''Menu bar''&quot; area you will get menu drop downs, You have to find Drop down with &quot;''Panes''&quot; option.

Step 3-   On &quot;''Panes''&quot; drop down unchecked the &quot;''Help''&quot;.

Step 4-   Wait for few seconds Spyder view will appear.

Step 5 -  Make sure that ''&quot;Help&quot;'' under view&gt;panes is permanently unchecked. And ''Editor, Ipython console, variable explorer'' are checked.


[[#Top]]</text>
      <sha1>e0gmd6015z0822p6w0xraiqbbkn5p87</sha1>
    </revision>
    <revision>
      <id>3608</id>
      <parentid>3607</parentid>
      <timestamp>2018-09-28T04:22:22Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* How to print a message? */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="20347">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_2 Contributors of this page]
==Introduction to Python==
 &lt;p style=&quot;text-align:justify&quot;&gt;Python is a widely used programming language which allows programmers to write the program in fewer lines of code. It was designed by ''Guido van Rossum'' in 1991. Python uses an interpreter instead of compiler.Basically, the main difference between compiler and interpreter is that the compiler takes the code as 'whole' and compiles it. for example, in C language and on the other side in interpreter. For example: languages like Python. It interprets the written code 'line by line', and if somewhere error is found. It stops interpreting the code from there itself. Here, in our course we will be using Spyder IDE. Spyder is an integrated development environment with editing options to assist the programmers in writing programs. Spyder IDE is divided into two panes, one is console and other one is where program is written.&lt;/p&gt;

&lt;p style=&quot;text-align:justify&quot;&gt;
Python works on different platforms (Windows, Mac, Linux, Raspberry Pi, etc).
Python has a simple syntax similar to the English language.
Python has syntax that allows developers to write programs with fewer lines than some other programming languages.
Python runs on an interpreter system, meaning that code can be executed as soon as it is written. This means that prototyping can be very quick.&lt;/p&gt;
Python can be treated in a procedural way, an object-orientated way or a functional way.

==Installing Anaconda==
[[#Top]]
This article is all about installing and troubleshooting Anaconda and Spyder on different platforms.

===Windows===
Step 1 -&gt; Download the installer from here 
 &lt;p style=&quot;text-align:justify&quot;&gt;
[https://www.anaconda.com/download/#windows Download Link]. Make sure that you download the version compatible to your operating system architecture. If you have a 64 bit OS then you can download either 64 bit of 32 bit, but if you have 32 bit OS then you should download the 32 bit version only.
&lt;/p&gt;
 &lt;p style=&quot;text-align:justify&quot;&gt;
Step 2 -&gt; Double click on the .exe file that you downloaded just now and follow the instructions. If you are not sure of the installation options then just choose the default.&lt;/p&gt;
 &lt;p style=&quot;text-align:justify&quot;&gt;
Step 3 -&gt; To test your installation, open cmd (go to Start -&gt; then type cmd in the search bar and hit enter). There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.&lt;/p&gt;

===Mac===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#macos Download Link].

Step 2 -&gt; Double click on the .pkg file that you just downloaded. If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

===Linux===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#linux Download Link].

Step 2 -&gt; Go to the folder where you downloaded the .sh file and type following command 

  '''bash Anaconda-latest-Linux-x86_64.sh'''

If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

==Troubleshooting Spyder==

[[#Top]]
 &lt;p style=&quot;text-align:justify&quot;&gt;
In most of the cases, it happens that Spyder is already running and you have initiated one more instance of it. Please make sure that spyder is not running already.
If you are on Linux OS, please launch spyder through terminal. Just open the terminal and type '''spyder''' and it will launch. When Spyder opens, make sure you see Anaconda with the version written on the Ipython console. If not, try changing the path of your anaconda. Follow these steps according to your OS version.&lt;/p&gt;

====Windows====
[https://stackoverflow.com/questions/44597662/conda-command-is-not-recognized-on-windows-10 Click Here]

====Linux====
[https://stackoverflow.com/questions/18675907/how-to-run-conda Click Here]

====Mac====
[https://stackoverflow.com/questions/35246386/conda-command-not-found Click Here]

In most of the cases relaunching Spyder works.
A more general Troubleshoot is present [https://github.com/spyder-ide/spyder/wiki/Troubleshooting-Guide-and-FAQ Here]

==How to run a program in Spyder IDE?==
Go to Run on the menu bar. Click Run-&gt;Run.

[[#TOP]]
==Print statements==
Print statements help to display output on console. 
{{#ev:youtube|https://youtu.be/gECkqaOwyt0|250|right}}

===Syntax===
print()

===How to print a message?===
In order to print a message in Python, write &lt;pre&gt;print(&quot;message&quot;)&lt;/pre&gt;.
Single, double, triple quote can be used print()

'''Example:'''

'''Single Quote'''
&lt;pre&gt;
print('Hello')  
Output: Hello
&lt;/pre&gt;
'''Double Quote'''
print(&quot;Hello&quot;)  
Output: Hello

'''Quote within quote'''
print('Is &quot;Ram&quot; a good boy?')  
Output: Is &quot;Ram&quot; a good boy?

[[#TOP]]

==Escape sequences with strings==

We can use escape sequence within strings to make output more presentable.

'''\n'''  : It will move to next line.

'''\t'''  : It will add tab space(5space)

'''\a'''  : It will play system sound once.

'''Example:'''

Print(&quot;Hi, \n How are you?&quot;)

Output: 

Hi,

How are you?

Print(&quot;Hi, \t How are you?&quot;)

Output: 

Hi, &lt;5 spaces&gt; How are you?

[[File:Escape_Sequence.jpg]]

==Variables==
[[#Top]]
&lt;pre&gt;
Variables are used to store some values. Values can be strings, integers or decimal values.  

Variable Name Rules:
1. Variable name should start with letter or underscore. Variable name cant start with number.
Example:
Valid: JOC, WIKI, JOC_WIKI, _JOC
Invalid: 1JOC, 123WIKI, 0_WIKI

2. Remaining letter other then first one can contain number, underscore.
Example:
JOC1234, WIKI012_1332

3. Variable names are case sensitivities.
Example:
JOC, jOC, joC all are different varibles. 

&lt;/pre&gt;
{{#ev:youtube|https://youtu.be/60iAXH1sm-Y|250|right}}
===How to print a variable?===
In order to print the value of a variable in python, first initialize the variable and then call it where ever you wanna use it. 
&lt;pre&gt;print(variable_name)&lt;/pre&gt;

&lt;pre&gt;For example :
x=2                # x is viable here
print(x)           # calling variable x with print function

a = &quot;JOC&quot;          # a is variable here
b = &quot;_WIKI&quot;        # b is variable here
c = a + b          # c is variable here which will provide addition of variable a and b
&lt;/pre&gt;

===Some facts about Variables===
* If you want to print variable name with a message, you can use , operator. For example : I want to print Hello Simran and Simran has been stored in a variable called ''name''.
  name=&quot;Simran&quot;
  print(&quot;Hello&quot;,name)
* If you change the value of a variable, it will store the latest value. For example :
  name=&quot;Simran&quot;
  name=&quot;Amit&quot;
  If you will execute the command ''print(name)'', Amit will be displayed.
* You can perform operations like addition, subtraction etc only on integral variables.

===Variables Types and Conversion===
&lt;pre&gt;Variable can be decimal, integer and decimal. And they can be inter covered with the help of conversion functions.

Example:
JOC = 5           Save in Memory as 5       # We have variable with name JOC having value 5 here.
JOC = int(5)      Save in Memory as 5       # Here Variable JOC holding integer value of 5. 
JOC = flot(5)     Save in Memory as 5.0     # Here variable JOC holding flot value of 5
JOC = str(5)      Save in Memory as &quot;5&quot;     # Here variable JOC holding string value of 5 or We can say 5 will be treated as string here.
JOC = complex(5)  Save in Memory as (5+0j)  # Here variable JOC holding complex value of 5.
JOC = oct(5)      Save in Memory as 012     # Here variable JOC holding octal representation of 5.
JOC = hex(5)      Save in Memory as 0xa     # Here variable JOC holding hexadecimal representation of 5

There are many more function available in python. You can convert variable as per your requirement.
&lt;/pre&gt;


&lt;h1 style='color:black;font-family:Calibri;font-size:14.0pt;font-weight:800;
font-style:normal'&gt;Conversion Table with Eample&lt;/h1&gt;

&lt;table border=0 cellpadding=0 cellspacing=0 width=656 style='border-collapse:
 collapse;table-layout:fixed;width:492pt'&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6624497 width=63 style='height:15.0pt;width:47pt'&gt;Serial
  No&lt;/td&gt;
  &lt;td class=xl6724497 width=77 style='border-left:none;width:58pt'&gt;Function&lt;/td&gt;
  &lt;td class=xl6724497 width=303 style='border-left:none;width:227pt'&gt;Description&lt;/td&gt;
  &lt;td class=xl6724497 width=162 style='border-left:none;width:122pt'&gt;Example&lt;/td&gt;
  &lt;td class=xl6824497 width=51 style='border-left:none;width:38pt'&gt;Output&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;1&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;int(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to an
  integer.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10.12;
  print(int(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;2&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;long(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a&lt;span
  style='mso-spacerun:yes'&gt;  &lt;/span&gt;to a long integer&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10.12;
  print(long(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;3&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;float(a)&lt;/td&gt;
  &lt;td class=xl6524497 width=303 style='border-top:none;border-left:none;
  width:227pt'&gt;Converts a to a floating-point number.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 101.23;
  print(float(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;101.23&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;4&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;complex(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to a
  complex number.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print(complex(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10+0j&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;5&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;str(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to
  string.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print(str(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;6&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;repr(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts object
  a to an expression string.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print(repr(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;7&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;tuple(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to
  tuple.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print((a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;8&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;list(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to
  list.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print([a])&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;[10]&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;9&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;set(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to
  set.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a =
  set(&amp;quot;10&amp;quot;); print(a)&lt;/td&gt;
  &lt;td class=xl7124497 width=51 style='border-top:none;border-left:none;
  width:38pt'&gt;{'1', '0'}&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;10&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;dict(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to
  dictonary&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = dict(a=10);
  print(a)&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;{'a': 10}&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;11&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;chr(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts an
  integer to a character.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 97;
  print(chr(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;a&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;12&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;ord(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a
  single character to its integer value.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a =
  &amp;quot;J&amp;quot;; print(ord(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;74&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;13&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;hex(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts an
  integer to a hexadecimal string.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print(hex(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;0xa&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=21 style='height:15.75pt'&gt;
  &lt;td height=21 class=xl7224497 style='height:15.75pt;border-top:none'&gt;14&lt;/td&gt;
  &lt;td class=xl7324497 style='border-top:none;border-left:none'&gt;oct(a)&lt;/td&gt;
  &lt;td class=xl7324497 style='border-top:none;border-left:none'&gt;Converts an
  integer to an octal string.&lt;/td&gt;
  &lt;td class=xl7324497 style='border-top:none;border-left:none'&gt;a = 10;
  print(oct(a))&lt;/td&gt;
  &lt;td class=xl7424497 style='border-top:none;border-left:none'&gt;0o12&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
  &lt;tr height=0 style='display:none'&gt;
  &lt;td width=63 style='width:47pt'&gt;&lt;/td&gt;
  &lt;td width=77 style='width:58pt'&gt;&lt;/td&gt;
  &lt;td width=303 style='width:227pt'&gt;&lt;/td&gt;
  &lt;td width=162 style='width:122pt'&gt;&lt;/td&gt;
  &lt;td width=51 style='width:38pt'&gt;&lt;/td&gt;
 &lt;/tr&gt;
&lt;/table&gt;

==How to execute couple of instructions on console?==
You can execute couple of instructions on console using ;. Write Statement 1;Statement 2;......and then press ''Enter''.
{{#ev:youtube|https://youtu.be/CYQCYvLE22Y|250|right}}









==How to take input from the user?==
We can take input from the user using ''input'' function. For Example : You want the user to input variable ''x'', then write x=input(&quot;Enter the value of x&quot;) and execute. Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNkVLCxZw_jcgyS-bmrIVSP

And when the input you need is of data type other than string. You can do both the input function and data conversion in a single line.
For example:
Consider the program for letting in the patients
'''c=input(&quot;Enter (1/0)&quot;);d=int(c)'''

Instead of using it in two separate lines, combine it into a single line
'''c=int(input(&quot;Enter (1/0)&quot;))'''.

To get two inputs in same line with a space between them split() is used.

a,b=input(&quot;enter a&quot;).split(&quot;enter b&quot;)
----
[[#Top]]

==If statement==
If statement is used to execute set of two contrary statements based on a condition. 

===Syntax===
If (Condition):
    Statement 1
else:
    Statement 2

If 'Condition' is true then 'Statement 1' will be executed otherwise 'Statement 2' will be executed.

Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNhHmg3SkK1uiutigcAbH9K

==Loops==
[[#Top]]&lt;br&gt;
Loops in a programming languages are used to execute set of repetitive statements. For loop and while loop are used extensively to execute a set of looping instructions.

=== For loop Syntax ===
&lt;pre&gt;
for i in range(10): 
    Statement
&lt;/pre&gt;
range(10) indicate that values 0 to 9 will be assigned to the variable i and for each value of i the Statement will be executed, e.g.
&lt;pre&gt;
for i in range(10): 
    print(i)
&lt;/pre&gt;
Output will be
&lt;pre&gt;
0
1
2
3
4
5
6
7
8
9
&lt;/pre&gt;

[[#Top]]

=== While loop Syntax ===
&lt;pre&gt;
intialisation

while(condition):
   Statement
   increment/decrement
&lt;/pre&gt;
e.g.
&lt;pre&gt;
#initialization
i=0
while(i&lt;10): 
    print(i)
    i=i+1
&lt;/pre&gt;
Output will be:
&lt;pre&gt;
0
1
2
3
4
5
6
7
8
9
&lt;/pre&gt;
Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNbl5jkVrrw1E5XSvm3GiCI

[[#TOP]]
==Importance of Indentation in Python==
Indentation is used to indicate to what block of statements belong. Indentation of blocks convey program structure in Python. Indentation in Python is used to refer a group/block of code/statements. In C++ we use { and } (curly brackets) to group a set of statements. But in Python, there are no such brackets used. Instead of such brackets used in other programming languages, we use indentation in Python.
Use tabs,instead of spaces for ease of writing code.

Wrong indentation can lead to syntax error, or makes your output wrong for your logic e.g.
&lt;pre&gt;
#IndentationError: expected an indented block
i=-1
if i&lt;0:
print(&quot;Test successful&quot;)#Wrong indentation 
else:    
    print(&quot;Test failed&quot;)
#Output: IndentationError: expected an indented block
&lt;/pre&gt;
---
&lt;pre&gt;
#Properly Indented code:
i=-1
if i&lt;0:
    print(&quot;Test successful&quot;)#Wrong indentation
else:    
    print(&quot;Test failed&quot;)
#Output:Test successful
&lt;/pre&gt;
---
Logic changed, so output changed, with improper indentation, e.g.
---
&lt;h3&gt;Code : 1&lt;/h3&gt;
&lt;pre&gt;
sum=0
for i in range(5):
    for j in range(5):
        sum+=i
print(sum, end=&quot; &quot;)
#Output: 50
&lt;/pre&gt;
        
&lt;h3&gt;Code : 2&lt;/h3&gt;
&lt;pre&gt;
for i in range(5):
    for j in range(5):
        print(end=&quot; &quot;)
    sum+=i
print(sum, end=&quot; &quot;)
#Output:                          10
&lt;/pre&gt;
{{#ev:youtube|https://youtu.be/pmavoW419Yc|250|right}}&lt;br&gt;

[[#Top]]

==Spyder IDE Black Screen Solution==

----

 This issue is because of ''Help'' screen which is by default open. 
 We need to close it. So here's how you do it-


===Method 1:===

Step 1-    Try by closing current pane for that,  &quot;''press ctrl+shift+F4''&quot;  wait for few seconds things will appear on screen.

Step 2-    If it so than on menu bar go to ''view &gt; panes &gt; help'' unchecked &quot;''Help''&quot; option.

Step 3-    Make sure that &quot;''Help''&quot; under ''view &gt; panes'' is permanently unchecked. And ''Editor, Ipython console, Variable explorer''  are checked. 


===Method 2:===

Step 1-    Open spyder.

Step 2-   On that black screen randomly ''Left click'' on spyder &quot;''Menu bar''&quot; area you will get menu drop downs, You have to find Drop down with &quot;''Panes''&quot; option.

Step 3-   On &quot;''Panes''&quot; drop down unchecked the &quot;''Help''&quot;.

Step 4-   Wait for few seconds Spyder view will appear.

Step 5 -  Make sure that ''&quot;Help&quot;'' under view&gt;panes is permanently unchecked. And ''Editor, Ipython console, variable explorer'' are checked.


[[#Top]]</text>
      <sha1>plgdxcqdq0x9ct2y3a8e0wggrc2l7jz</sha1>
    </revision>
    <revision>
      <id>3609</id>
      <parentid>3608</parentid>
      <timestamp>2018-09-28T04:22:46Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* How to print a message? */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="20359">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_2 Contributors of this page]
==Introduction to Python==
 &lt;p style=&quot;text-align:justify&quot;&gt;Python is a widely used programming language which allows programmers to write the program in fewer lines of code. It was designed by ''Guido van Rossum'' in 1991. Python uses an interpreter instead of compiler.Basically, the main difference between compiler and interpreter is that the compiler takes the code as 'whole' and compiles it. for example, in C language and on the other side in interpreter. For example: languages like Python. It interprets the written code 'line by line', and if somewhere error is found. It stops interpreting the code from there itself. Here, in our course we will be using Spyder IDE. Spyder is an integrated development environment with editing options to assist the programmers in writing programs. Spyder IDE is divided into two panes, one is console and other one is where program is written.&lt;/p&gt;

&lt;p style=&quot;text-align:justify&quot;&gt;
Python works on different platforms (Windows, Mac, Linux, Raspberry Pi, etc).
Python has a simple syntax similar to the English language.
Python has syntax that allows developers to write programs with fewer lines than some other programming languages.
Python runs on an interpreter system, meaning that code can be executed as soon as it is written. This means that prototyping can be very quick.&lt;/p&gt;
Python can be treated in a procedural way, an object-orientated way or a functional way.

==Installing Anaconda==
[[#Top]]
This article is all about installing and troubleshooting Anaconda and Spyder on different platforms.

===Windows===
Step 1 -&gt; Download the installer from here 
 &lt;p style=&quot;text-align:justify&quot;&gt;
[https://www.anaconda.com/download/#windows Download Link]. Make sure that you download the version compatible to your operating system architecture. If you have a 64 bit OS then you can download either 64 bit of 32 bit, but if you have 32 bit OS then you should download the 32 bit version only.
&lt;/p&gt;
 &lt;p style=&quot;text-align:justify&quot;&gt;
Step 2 -&gt; Double click on the .exe file that you downloaded just now and follow the instructions. If you are not sure of the installation options then just choose the default.&lt;/p&gt;
 &lt;p style=&quot;text-align:justify&quot;&gt;
Step 3 -&gt; To test your installation, open cmd (go to Start -&gt; then type cmd in the search bar and hit enter). There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.&lt;/p&gt;

===Mac===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#macos Download Link].

Step 2 -&gt; Double click on the .pkg file that you just downloaded. If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

===Linux===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#linux Download Link].

Step 2 -&gt; Go to the folder where you downloaded the .sh file and type following command 

  '''bash Anaconda-latest-Linux-x86_64.sh'''

If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

==Troubleshooting Spyder==

[[#Top]]
 &lt;p style=&quot;text-align:justify&quot;&gt;
In most of the cases, it happens that Spyder is already running and you have initiated one more instance of it. Please make sure that spyder is not running already.
If you are on Linux OS, please launch spyder through terminal. Just open the terminal and type '''spyder''' and it will launch. When Spyder opens, make sure you see Anaconda with the version written on the Ipython console. If not, try changing the path of your anaconda. Follow these steps according to your OS version.&lt;/p&gt;

====Windows====
[https://stackoverflow.com/questions/44597662/conda-command-is-not-recognized-on-windows-10 Click Here]

====Linux====
[https://stackoverflow.com/questions/18675907/how-to-run-conda Click Here]

====Mac====
[https://stackoverflow.com/questions/35246386/conda-command-not-found Click Here]

In most of the cases relaunching Spyder works.
A more general Troubleshoot is present [https://github.com/spyder-ide/spyder/wiki/Troubleshooting-Guide-and-FAQ Here]

==How to run a program in Spyder IDE?==
Go to Run on the menu bar. Click Run-&gt;Run.

[[#TOP]]
==Print statements==
Print statements help to display output on console. 
{{#ev:youtube|https://youtu.be/gECkqaOwyt0|250|right}}

===Syntax===
print()

===How to print a message?===
In order to print a message in Python, write &lt;pre&gt;print(&quot;message&quot;)&lt;/pre&gt;.
Single, double, triple quote can be used print()

'''Example:'''

'''Single Quote'''
&lt;pre&gt;
print('Hello')  
Output: Hello
&lt;/pre&gt;
'''Double Quote'''
&lt;pre&gt;
print(&quot;Hello&quot;)  
Output: Hello
&lt;/pre&gt;
'''Quote within quote'''
print('Is &quot;Ram&quot; a good boy?')  
Output: Is &quot;Ram&quot; a good boy?

[[#TOP]]

==Escape sequences with strings==

We can use escape sequence within strings to make output more presentable.

'''\n'''  : It will move to next line.

'''\t'''  : It will add tab space(5space)

'''\a'''  : It will play system sound once.

'''Example:'''

Print(&quot;Hi, \n How are you?&quot;)

Output: 

Hi,

How are you?

Print(&quot;Hi, \t How are you?&quot;)

Output: 

Hi, &lt;5 spaces&gt; How are you?

[[File:Escape_Sequence.jpg]]

==Variables==
[[#Top]]
&lt;pre&gt;
Variables are used to store some values. Values can be strings, integers or decimal values.  

Variable Name Rules:
1. Variable name should start with letter or underscore. Variable name cant start with number.
Example:
Valid: JOC, WIKI, JOC_WIKI, _JOC
Invalid: 1JOC, 123WIKI, 0_WIKI

2. Remaining letter other then first one can contain number, underscore.
Example:
JOC1234, WIKI012_1332

3. Variable names are case sensitivities.
Example:
JOC, jOC, joC all are different varibles. 

&lt;/pre&gt;
{{#ev:youtube|https://youtu.be/60iAXH1sm-Y|250|right}}
===How to print a variable?===
In order to print the value of a variable in python, first initialize the variable and then call it where ever you wanna use it. 
&lt;pre&gt;print(variable_name)&lt;/pre&gt;

&lt;pre&gt;For example :
x=2                # x is viable here
print(x)           # calling variable x with print function

a = &quot;JOC&quot;          # a is variable here
b = &quot;_WIKI&quot;        # b is variable here
c = a + b          # c is variable here which will provide addition of variable a and b
&lt;/pre&gt;

===Some facts about Variables===
* If you want to print variable name with a message, you can use , operator. For example : I want to print Hello Simran and Simran has been stored in a variable called ''name''.
  name=&quot;Simran&quot;
  print(&quot;Hello&quot;,name)
* If you change the value of a variable, it will store the latest value. For example :
  name=&quot;Simran&quot;
  name=&quot;Amit&quot;
  If you will execute the command ''print(name)'', Amit will be displayed.
* You can perform operations like addition, subtraction etc only on integral variables.

===Variables Types and Conversion===
&lt;pre&gt;Variable can be decimal, integer and decimal. And they can be inter covered with the help of conversion functions.

Example:
JOC = 5           Save in Memory as 5       # We have variable with name JOC having value 5 here.
JOC = int(5)      Save in Memory as 5       # Here Variable JOC holding integer value of 5. 
JOC = flot(5)     Save in Memory as 5.0     # Here variable JOC holding flot value of 5
JOC = str(5)      Save in Memory as &quot;5&quot;     # Here variable JOC holding string value of 5 or We can say 5 will be treated as string here.
JOC = complex(5)  Save in Memory as (5+0j)  # Here variable JOC holding complex value of 5.
JOC = oct(5)      Save in Memory as 012     # Here variable JOC holding octal representation of 5.
JOC = hex(5)      Save in Memory as 0xa     # Here variable JOC holding hexadecimal representation of 5

There are many more function available in python. You can convert variable as per your requirement.
&lt;/pre&gt;


&lt;h1 style='color:black;font-family:Calibri;font-size:14.0pt;font-weight:800;
font-style:normal'&gt;Conversion Table with Eample&lt;/h1&gt;

&lt;table border=0 cellpadding=0 cellspacing=0 width=656 style='border-collapse:
 collapse;table-layout:fixed;width:492pt'&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6624497 width=63 style='height:15.0pt;width:47pt'&gt;Serial
  No&lt;/td&gt;
  &lt;td class=xl6724497 width=77 style='border-left:none;width:58pt'&gt;Function&lt;/td&gt;
  &lt;td class=xl6724497 width=303 style='border-left:none;width:227pt'&gt;Description&lt;/td&gt;
  &lt;td class=xl6724497 width=162 style='border-left:none;width:122pt'&gt;Example&lt;/td&gt;
  &lt;td class=xl6824497 width=51 style='border-left:none;width:38pt'&gt;Output&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;1&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;int(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to an
  integer.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10.12;
  print(int(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;2&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;long(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a&lt;span
  style='mso-spacerun:yes'&gt;  &lt;/span&gt;to a long integer&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10.12;
  print(long(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;3&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;float(a)&lt;/td&gt;
  &lt;td class=xl6524497 width=303 style='border-top:none;border-left:none;
  width:227pt'&gt;Converts a to a floating-point number.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 101.23;
  print(float(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;101.23&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;4&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;complex(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to a
  complex number.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print(complex(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10+0j&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;5&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;str(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to
  string.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print(str(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;6&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;repr(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts object
  a to an expression string.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print(repr(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;7&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;tuple(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to
  tuple.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print((a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;8&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;list(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to
  list.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print([a])&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;[10]&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;9&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;set(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to
  set.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a =
  set(&amp;quot;10&amp;quot;); print(a)&lt;/td&gt;
  &lt;td class=xl7124497 width=51 style='border-top:none;border-left:none;
  width:38pt'&gt;{'1', '0'}&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;10&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;dict(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to
  dictonary&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = dict(a=10);
  print(a)&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;{'a': 10}&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;11&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;chr(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts an
  integer to a character.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 97;
  print(chr(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;a&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;12&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;ord(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a
  single character to its integer value.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a =
  &amp;quot;J&amp;quot;; print(ord(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;74&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;13&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;hex(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts an
  integer to a hexadecimal string.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print(hex(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;0xa&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=21 style='height:15.75pt'&gt;
  &lt;td height=21 class=xl7224497 style='height:15.75pt;border-top:none'&gt;14&lt;/td&gt;
  &lt;td class=xl7324497 style='border-top:none;border-left:none'&gt;oct(a)&lt;/td&gt;
  &lt;td class=xl7324497 style='border-top:none;border-left:none'&gt;Converts an
  integer to an octal string.&lt;/td&gt;
  &lt;td class=xl7324497 style='border-top:none;border-left:none'&gt;a = 10;
  print(oct(a))&lt;/td&gt;
  &lt;td class=xl7424497 style='border-top:none;border-left:none'&gt;0o12&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
  &lt;tr height=0 style='display:none'&gt;
  &lt;td width=63 style='width:47pt'&gt;&lt;/td&gt;
  &lt;td width=77 style='width:58pt'&gt;&lt;/td&gt;
  &lt;td width=303 style='width:227pt'&gt;&lt;/td&gt;
  &lt;td width=162 style='width:122pt'&gt;&lt;/td&gt;
  &lt;td width=51 style='width:38pt'&gt;&lt;/td&gt;
 &lt;/tr&gt;
&lt;/table&gt;

==How to execute couple of instructions on console?==
You can execute couple of instructions on console using ;. Write Statement 1;Statement 2;......and then press ''Enter''.
{{#ev:youtube|https://youtu.be/CYQCYvLE22Y|250|right}}









==How to take input from the user?==
We can take input from the user using ''input'' function. For Example : You want the user to input variable ''x'', then write x=input(&quot;Enter the value of x&quot;) and execute. Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNkVLCxZw_jcgyS-bmrIVSP

And when the input you need is of data type other than string. You can do both the input function and data conversion in a single line.
For example:
Consider the program for letting in the patients
'''c=input(&quot;Enter (1/0)&quot;);d=int(c)'''

Instead of using it in two separate lines, combine it into a single line
'''c=int(input(&quot;Enter (1/0)&quot;))'''.

To get two inputs in same line with a space between them split() is used.

a,b=input(&quot;enter a&quot;).split(&quot;enter b&quot;)
----
[[#Top]]

==If statement==
If statement is used to execute set of two contrary statements based on a condition. 

===Syntax===
If (Condition):
    Statement 1
else:
    Statement 2

If 'Condition' is true then 'Statement 1' will be executed otherwise 'Statement 2' will be executed.

Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNhHmg3SkK1uiutigcAbH9K

==Loops==
[[#Top]]&lt;br&gt;
Loops in a programming languages are used to execute set of repetitive statements. For loop and while loop are used extensively to execute a set of looping instructions.

=== For loop Syntax ===
&lt;pre&gt;
for i in range(10): 
    Statement
&lt;/pre&gt;
range(10) indicate that values 0 to 9 will be assigned to the variable i and for each value of i the Statement will be executed, e.g.
&lt;pre&gt;
for i in range(10): 
    print(i)
&lt;/pre&gt;
Output will be
&lt;pre&gt;
0
1
2
3
4
5
6
7
8
9
&lt;/pre&gt;

[[#Top]]

=== While loop Syntax ===
&lt;pre&gt;
intialisation

while(condition):
   Statement
   increment/decrement
&lt;/pre&gt;
e.g.
&lt;pre&gt;
#initialization
i=0
while(i&lt;10): 
    print(i)
    i=i+1
&lt;/pre&gt;
Output will be:
&lt;pre&gt;
0
1
2
3
4
5
6
7
8
9
&lt;/pre&gt;
Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNbl5jkVrrw1E5XSvm3GiCI

[[#TOP]]
==Importance of Indentation in Python==
Indentation is used to indicate to what block of statements belong. Indentation of blocks convey program structure in Python. Indentation in Python is used to refer a group/block of code/statements. In C++ we use { and } (curly brackets) to group a set of statements. But in Python, there are no such brackets used. Instead of such brackets used in other programming languages, we use indentation in Python.
Use tabs,instead of spaces for ease of writing code.

Wrong indentation can lead to syntax error, or makes your output wrong for your logic e.g.
&lt;pre&gt;
#IndentationError: expected an indented block
i=-1
if i&lt;0:
print(&quot;Test successful&quot;)#Wrong indentation 
else:    
    print(&quot;Test failed&quot;)
#Output: IndentationError: expected an indented block
&lt;/pre&gt;
---
&lt;pre&gt;
#Properly Indented code:
i=-1
if i&lt;0:
    print(&quot;Test successful&quot;)#Wrong indentation
else:    
    print(&quot;Test failed&quot;)
#Output:Test successful
&lt;/pre&gt;
---
Logic changed, so output changed, with improper indentation, e.g.
---
&lt;h3&gt;Code : 1&lt;/h3&gt;
&lt;pre&gt;
sum=0
for i in range(5):
    for j in range(5):
        sum+=i
print(sum, end=&quot; &quot;)
#Output: 50
&lt;/pre&gt;
        
&lt;h3&gt;Code : 2&lt;/h3&gt;
&lt;pre&gt;
for i in range(5):
    for j in range(5):
        print(end=&quot; &quot;)
    sum+=i
print(sum, end=&quot; &quot;)
#Output:                          10
&lt;/pre&gt;
{{#ev:youtube|https://youtu.be/pmavoW419Yc|250|right}}&lt;br&gt;

[[#Top]]

==Spyder IDE Black Screen Solution==

----

 This issue is because of ''Help'' screen which is by default open. 
 We need to close it. So here's how you do it-


===Method 1:===

Step 1-    Try by closing current pane for that,  &quot;''press ctrl+shift+F4''&quot;  wait for few seconds things will appear on screen.

Step 2-    If it so than on menu bar go to ''view &gt; panes &gt; help'' unchecked &quot;''Help''&quot; option.

Step 3-    Make sure that &quot;''Help''&quot; under ''view &gt; panes'' is permanently unchecked. And ''Editor, Ipython console, Variable explorer''  are checked. 


===Method 2:===

Step 1-    Open spyder.

Step 2-   On that black screen randomly ''Left click'' on spyder &quot;''Menu bar''&quot; area you will get menu drop downs, You have to find Drop down with &quot;''Panes''&quot; option.

Step 3-   On &quot;''Panes''&quot; drop down unchecked the &quot;''Help''&quot;.

Step 4-   Wait for few seconds Spyder view will appear.

Step 5 -  Make sure that ''&quot;Help&quot;'' under view&gt;panes is permanently unchecked. And ''Editor, Ipython console, variable explorer'' are checked.


[[#Top]]</text>
      <sha1>98578iusjhdlemtq6jag1afb4hvuxcy</sha1>
    </revision>
    <revision>
      <id>3610</id>
      <parentid>3609</parentid>
      <timestamp>2018-09-28T04:23:12Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* How to print a message? */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="20370">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_2 Contributors of this page]
==Introduction to Python==
 &lt;p style=&quot;text-align:justify&quot;&gt;Python is a widely used programming language which allows programmers to write the program in fewer lines of code. It was designed by ''Guido van Rossum'' in 1991. Python uses an interpreter instead of compiler.Basically, the main difference between compiler and interpreter is that the compiler takes the code as 'whole' and compiles it. for example, in C language and on the other side in interpreter. For example: languages like Python. It interprets the written code 'line by line', and if somewhere error is found. It stops interpreting the code from there itself. Here, in our course we will be using Spyder IDE. Spyder is an integrated development environment with editing options to assist the programmers in writing programs. Spyder IDE is divided into two panes, one is console and other one is where program is written.&lt;/p&gt;

&lt;p style=&quot;text-align:justify&quot;&gt;
Python works on different platforms (Windows, Mac, Linux, Raspberry Pi, etc).
Python has a simple syntax similar to the English language.
Python has syntax that allows developers to write programs with fewer lines than some other programming languages.
Python runs on an interpreter system, meaning that code can be executed as soon as it is written. This means that prototyping can be very quick.&lt;/p&gt;
Python can be treated in a procedural way, an object-orientated way or a functional way.

==Installing Anaconda==
[[#Top]]
This article is all about installing and troubleshooting Anaconda and Spyder on different platforms.

===Windows===
Step 1 -&gt; Download the installer from here 
 &lt;p style=&quot;text-align:justify&quot;&gt;
[https://www.anaconda.com/download/#windows Download Link]. Make sure that you download the version compatible to your operating system architecture. If you have a 64 bit OS then you can download either 64 bit of 32 bit, but if you have 32 bit OS then you should download the 32 bit version only.
&lt;/p&gt;
 &lt;p style=&quot;text-align:justify&quot;&gt;
Step 2 -&gt; Double click on the .exe file that you downloaded just now and follow the instructions. If you are not sure of the installation options then just choose the default.&lt;/p&gt;
 &lt;p style=&quot;text-align:justify&quot;&gt;
Step 3 -&gt; To test your installation, open cmd (go to Start -&gt; then type cmd in the search bar and hit enter). There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.&lt;/p&gt;

===Mac===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#macos Download Link].

Step 2 -&gt; Double click on the .pkg file that you just downloaded. If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

===Linux===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#linux Download Link].

Step 2 -&gt; Go to the folder where you downloaded the .sh file and type following command 

  '''bash Anaconda-latest-Linux-x86_64.sh'''

If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

==Troubleshooting Spyder==

[[#Top]]
 &lt;p style=&quot;text-align:justify&quot;&gt;
In most of the cases, it happens that Spyder is already running and you have initiated one more instance of it. Please make sure that spyder is not running already.
If you are on Linux OS, please launch spyder through terminal. Just open the terminal and type '''spyder''' and it will launch. When Spyder opens, make sure you see Anaconda with the version written on the Ipython console. If not, try changing the path of your anaconda. Follow these steps according to your OS version.&lt;/p&gt;

====Windows====
[https://stackoverflow.com/questions/44597662/conda-command-is-not-recognized-on-windows-10 Click Here]

====Linux====
[https://stackoverflow.com/questions/18675907/how-to-run-conda Click Here]

====Mac====
[https://stackoverflow.com/questions/35246386/conda-command-not-found Click Here]

In most of the cases relaunching Spyder works.
A more general Troubleshoot is present [https://github.com/spyder-ide/spyder/wiki/Troubleshooting-Guide-and-FAQ Here]

==How to run a program in Spyder IDE?==
Go to Run on the menu bar. Click Run-&gt;Run.

[[#TOP]]
==Print statements==
Print statements help to display output on console. 
{{#ev:youtube|https://youtu.be/gECkqaOwyt0|250|right}}

===Syntax===
print()

===How to print a message?===
In order to print a message in Python, write &lt;pre&gt;print(&quot;message&quot;)&lt;/pre&gt;.
Single, double, triple quote can be used print()

'''Example:'''

'''Single Quote'''
&lt;pre&gt;
print('Hello')  
Output: Hello
&lt;/pre&gt;
'''Double Quote'''
&lt;pre&gt;
print(&quot;Hello&quot;)  
Output: Hello
&lt;/pre&gt;
'''Quote within quote'''
&lt;pre&gt;print('Is &quot;Ram&quot; a good boy?')  
Output: Is &quot;Ram&quot; a good boy?&lt;/pre&gt;

[[#TOP]]

==Escape sequences with strings==

We can use escape sequence within strings to make output more presentable.

'''\n'''  : It will move to next line.

'''\t'''  : It will add tab space(5space)

'''\a'''  : It will play system sound once.

'''Example:'''

Print(&quot;Hi, \n How are you?&quot;)

Output: 

Hi,

How are you?

Print(&quot;Hi, \t How are you?&quot;)

Output: 

Hi, &lt;5 spaces&gt; How are you?

[[File:Escape_Sequence.jpg]]

==Variables==
[[#Top]]
&lt;pre&gt;
Variables are used to store some values. Values can be strings, integers or decimal values.  

Variable Name Rules:
1. Variable name should start with letter or underscore. Variable name cant start with number.
Example:
Valid: JOC, WIKI, JOC_WIKI, _JOC
Invalid: 1JOC, 123WIKI, 0_WIKI

2. Remaining letter other then first one can contain number, underscore.
Example:
JOC1234, WIKI012_1332

3. Variable names are case sensitivities.
Example:
JOC, jOC, joC all are different varibles. 

&lt;/pre&gt;
{{#ev:youtube|https://youtu.be/60iAXH1sm-Y|250|right}}
===How to print a variable?===
In order to print the value of a variable in python, first initialize the variable and then call it where ever you wanna use it. 
&lt;pre&gt;print(variable_name)&lt;/pre&gt;

&lt;pre&gt;For example :
x=2                # x is viable here
print(x)           # calling variable x with print function

a = &quot;JOC&quot;          # a is variable here
b = &quot;_WIKI&quot;        # b is variable here
c = a + b          # c is variable here which will provide addition of variable a and b
&lt;/pre&gt;

===Some facts about Variables===
* If you want to print variable name with a message, you can use , operator. For example : I want to print Hello Simran and Simran has been stored in a variable called ''name''.
  name=&quot;Simran&quot;
  print(&quot;Hello&quot;,name)
* If you change the value of a variable, it will store the latest value. For example :
  name=&quot;Simran&quot;
  name=&quot;Amit&quot;
  If you will execute the command ''print(name)'', Amit will be displayed.
* You can perform operations like addition, subtraction etc only on integral variables.

===Variables Types and Conversion===
&lt;pre&gt;Variable can be decimal, integer and decimal. And they can be inter covered with the help of conversion functions.

Example:
JOC = 5           Save in Memory as 5       # We have variable with name JOC having value 5 here.
JOC = int(5)      Save in Memory as 5       # Here Variable JOC holding integer value of 5. 
JOC = flot(5)     Save in Memory as 5.0     # Here variable JOC holding flot value of 5
JOC = str(5)      Save in Memory as &quot;5&quot;     # Here variable JOC holding string value of 5 or We can say 5 will be treated as string here.
JOC = complex(5)  Save in Memory as (5+0j)  # Here variable JOC holding complex value of 5.
JOC = oct(5)      Save in Memory as 012     # Here variable JOC holding octal representation of 5.
JOC = hex(5)      Save in Memory as 0xa     # Here variable JOC holding hexadecimal representation of 5

There are many more function available in python. You can convert variable as per your requirement.
&lt;/pre&gt;


&lt;h1 style='color:black;font-family:Calibri;font-size:14.0pt;font-weight:800;
font-style:normal'&gt;Conversion Table with Eample&lt;/h1&gt;

&lt;table border=0 cellpadding=0 cellspacing=0 width=656 style='border-collapse:
 collapse;table-layout:fixed;width:492pt'&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6624497 width=63 style='height:15.0pt;width:47pt'&gt;Serial
  No&lt;/td&gt;
  &lt;td class=xl6724497 width=77 style='border-left:none;width:58pt'&gt;Function&lt;/td&gt;
  &lt;td class=xl6724497 width=303 style='border-left:none;width:227pt'&gt;Description&lt;/td&gt;
  &lt;td class=xl6724497 width=162 style='border-left:none;width:122pt'&gt;Example&lt;/td&gt;
  &lt;td class=xl6824497 width=51 style='border-left:none;width:38pt'&gt;Output&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;1&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;int(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to an
  integer.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10.12;
  print(int(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;2&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;long(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a&lt;span
  style='mso-spacerun:yes'&gt;  &lt;/span&gt;to a long integer&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10.12;
  print(long(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;3&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;float(a)&lt;/td&gt;
  &lt;td class=xl6524497 width=303 style='border-top:none;border-left:none;
  width:227pt'&gt;Converts a to a floating-point number.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 101.23;
  print(float(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;101.23&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;4&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;complex(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to a
  complex number.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print(complex(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10+0j&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;5&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;str(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to
  string.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print(str(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;6&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;repr(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts object
  a to an expression string.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print(repr(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;7&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;tuple(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to
  tuple.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print((a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;8&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;list(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to
  list.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print([a])&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;[10]&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;9&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;set(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to
  set.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a =
  set(&amp;quot;10&amp;quot;); print(a)&lt;/td&gt;
  &lt;td class=xl7124497 width=51 style='border-top:none;border-left:none;
  width:38pt'&gt;{'1', '0'}&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;10&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;dict(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to
  dictonary&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = dict(a=10);
  print(a)&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;{'a': 10}&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;11&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;chr(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts an
  integer to a character.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 97;
  print(chr(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;a&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;12&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;ord(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a
  single character to its integer value.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a =
  &amp;quot;J&amp;quot;; print(ord(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;74&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;13&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;hex(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts an
  integer to a hexadecimal string.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print(hex(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;0xa&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=21 style='height:15.75pt'&gt;
  &lt;td height=21 class=xl7224497 style='height:15.75pt;border-top:none'&gt;14&lt;/td&gt;
  &lt;td class=xl7324497 style='border-top:none;border-left:none'&gt;oct(a)&lt;/td&gt;
  &lt;td class=xl7324497 style='border-top:none;border-left:none'&gt;Converts an
  integer to an octal string.&lt;/td&gt;
  &lt;td class=xl7324497 style='border-top:none;border-left:none'&gt;a = 10;
  print(oct(a))&lt;/td&gt;
  &lt;td class=xl7424497 style='border-top:none;border-left:none'&gt;0o12&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
  &lt;tr height=0 style='display:none'&gt;
  &lt;td width=63 style='width:47pt'&gt;&lt;/td&gt;
  &lt;td width=77 style='width:58pt'&gt;&lt;/td&gt;
  &lt;td width=303 style='width:227pt'&gt;&lt;/td&gt;
  &lt;td width=162 style='width:122pt'&gt;&lt;/td&gt;
  &lt;td width=51 style='width:38pt'&gt;&lt;/td&gt;
 &lt;/tr&gt;
&lt;/table&gt;

==How to execute couple of instructions on console?==
You can execute couple of instructions on console using ;. Write Statement 1;Statement 2;......and then press ''Enter''.
{{#ev:youtube|https://youtu.be/CYQCYvLE22Y|250|right}}









==How to take input from the user?==
We can take input from the user using ''input'' function. For Example : You want the user to input variable ''x'', then write x=input(&quot;Enter the value of x&quot;) and execute. Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNkVLCxZw_jcgyS-bmrIVSP

And when the input you need is of data type other than string. You can do both the input function and data conversion in a single line.
For example:
Consider the program for letting in the patients
'''c=input(&quot;Enter (1/0)&quot;);d=int(c)'''

Instead of using it in two separate lines, combine it into a single line
'''c=int(input(&quot;Enter (1/0)&quot;))'''.

To get two inputs in same line with a space between them split() is used.

a,b=input(&quot;enter a&quot;).split(&quot;enter b&quot;)
----
[[#Top]]

==If statement==
If statement is used to execute set of two contrary statements based on a condition. 

===Syntax===
If (Condition):
    Statement 1
else:
    Statement 2

If 'Condition' is true then 'Statement 1' will be executed otherwise 'Statement 2' will be executed.

Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNhHmg3SkK1uiutigcAbH9K

==Loops==
[[#Top]]&lt;br&gt;
Loops in a programming languages are used to execute set of repetitive statements. For loop and while loop are used extensively to execute a set of looping instructions.

=== For loop Syntax ===
&lt;pre&gt;
for i in range(10): 
    Statement
&lt;/pre&gt;
range(10) indicate that values 0 to 9 will be assigned to the variable i and for each value of i the Statement will be executed, e.g.
&lt;pre&gt;
for i in range(10): 
    print(i)
&lt;/pre&gt;
Output will be
&lt;pre&gt;
0
1
2
3
4
5
6
7
8
9
&lt;/pre&gt;

[[#Top]]

=== While loop Syntax ===
&lt;pre&gt;
intialisation

while(condition):
   Statement
   increment/decrement
&lt;/pre&gt;
e.g.
&lt;pre&gt;
#initialization
i=0
while(i&lt;10): 
    print(i)
    i=i+1
&lt;/pre&gt;
Output will be:
&lt;pre&gt;
0
1
2
3
4
5
6
7
8
9
&lt;/pre&gt;
Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNbl5jkVrrw1E5XSvm3GiCI

[[#TOP]]
==Importance of Indentation in Python==
Indentation is used to indicate to what block of statements belong. Indentation of blocks convey program structure in Python. Indentation in Python is used to refer a group/block of code/statements. In C++ we use { and } (curly brackets) to group a set of statements. But in Python, there are no such brackets used. Instead of such brackets used in other programming languages, we use indentation in Python.
Use tabs,instead of spaces for ease of writing code.

Wrong indentation can lead to syntax error, or makes your output wrong for your logic e.g.
&lt;pre&gt;
#IndentationError: expected an indented block
i=-1
if i&lt;0:
print(&quot;Test successful&quot;)#Wrong indentation 
else:    
    print(&quot;Test failed&quot;)
#Output: IndentationError: expected an indented block
&lt;/pre&gt;
---
&lt;pre&gt;
#Properly Indented code:
i=-1
if i&lt;0:
    print(&quot;Test successful&quot;)#Wrong indentation
else:    
    print(&quot;Test failed&quot;)
#Output:Test successful
&lt;/pre&gt;
---
Logic changed, so output changed, with improper indentation, e.g.
---
&lt;h3&gt;Code : 1&lt;/h3&gt;
&lt;pre&gt;
sum=0
for i in range(5):
    for j in range(5):
        sum+=i
print(sum, end=&quot; &quot;)
#Output: 50
&lt;/pre&gt;
        
&lt;h3&gt;Code : 2&lt;/h3&gt;
&lt;pre&gt;
for i in range(5):
    for j in range(5):
        print(end=&quot; &quot;)
    sum+=i
print(sum, end=&quot; &quot;)
#Output:                          10
&lt;/pre&gt;
{{#ev:youtube|https://youtu.be/pmavoW419Yc|250|right}}&lt;br&gt;

[[#Top]]

==Spyder IDE Black Screen Solution==

----

 This issue is because of ''Help'' screen which is by default open. 
 We need to close it. So here's how you do it-


===Method 1:===

Step 1-    Try by closing current pane for that,  &quot;''press ctrl+shift+F4''&quot;  wait for few seconds things will appear on screen.

Step 2-    If it so than on menu bar go to ''view &gt; panes &gt; help'' unchecked &quot;''Help''&quot; option.

Step 3-    Make sure that &quot;''Help''&quot; under ''view &gt; panes'' is permanently unchecked. And ''Editor, Ipython console, Variable explorer''  are checked. 


===Method 2:===

Step 1-    Open spyder.

Step 2-   On that black screen randomly ''Left click'' on spyder &quot;''Menu bar''&quot; area you will get menu drop downs, You have to find Drop down with &quot;''Panes''&quot; option.

Step 3-   On &quot;''Panes''&quot; drop down unchecked the &quot;''Help''&quot;.

Step 4-   Wait for few seconds Spyder view will appear.

Step 5 -  Make sure that ''&quot;Help&quot;'' under view&gt;panes is permanently unchecked. And ''Editor, Ipython console, variable explorer'' are checked.


[[#Top]]</text>
      <sha1>1nro9yl1hqx4rj65uawpx7p4e4ngbi4</sha1>
    </revision>
    <revision>
      <id>3634</id>
      <parentid>3610</parentid>
      <timestamp>2018-09-28T04:59:50Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* Escape sequences with strings */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="20392">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_2 Contributors of this page]
==Introduction to Python==
 &lt;p style=&quot;text-align:justify&quot;&gt;Python is a widely used programming language which allows programmers to write the program in fewer lines of code. It was designed by ''Guido van Rossum'' in 1991. Python uses an interpreter instead of compiler.Basically, the main difference between compiler and interpreter is that the compiler takes the code as 'whole' and compiles it. for example, in C language and on the other side in interpreter. For example: languages like Python. It interprets the written code 'line by line', and if somewhere error is found. It stops interpreting the code from there itself. Here, in our course we will be using Spyder IDE. Spyder is an integrated development environment with editing options to assist the programmers in writing programs. Spyder IDE is divided into two panes, one is console and other one is where program is written.&lt;/p&gt;

&lt;p style=&quot;text-align:justify&quot;&gt;
Python works on different platforms (Windows, Mac, Linux, Raspberry Pi, etc).
Python has a simple syntax similar to the English language.
Python has syntax that allows developers to write programs with fewer lines than some other programming languages.
Python runs on an interpreter system, meaning that code can be executed as soon as it is written. This means that prototyping can be very quick.&lt;/p&gt;
Python can be treated in a procedural way, an object-orientated way or a functional way.

==Installing Anaconda==
[[#Top]]
This article is all about installing and troubleshooting Anaconda and Spyder on different platforms.

===Windows===
Step 1 -&gt; Download the installer from here 
 &lt;p style=&quot;text-align:justify&quot;&gt;
[https://www.anaconda.com/download/#windows Download Link]. Make sure that you download the version compatible to your operating system architecture. If you have a 64 bit OS then you can download either 64 bit of 32 bit, but if you have 32 bit OS then you should download the 32 bit version only.
&lt;/p&gt;
 &lt;p style=&quot;text-align:justify&quot;&gt;
Step 2 -&gt; Double click on the .exe file that you downloaded just now and follow the instructions. If you are not sure of the installation options then just choose the default.&lt;/p&gt;
 &lt;p style=&quot;text-align:justify&quot;&gt;
Step 3 -&gt; To test your installation, open cmd (go to Start -&gt; then type cmd in the search bar and hit enter). There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.&lt;/p&gt;

===Mac===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#macos Download Link].

Step 2 -&gt; Double click on the .pkg file that you just downloaded. If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

===Linux===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#linux Download Link].

Step 2 -&gt; Go to the folder where you downloaded the .sh file and type following command 

  '''bash Anaconda-latest-Linux-x86_64.sh'''

If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

==Troubleshooting Spyder==

[[#Top]]
 &lt;p style=&quot;text-align:justify&quot;&gt;
In most of the cases, it happens that Spyder is already running and you have initiated one more instance of it. Please make sure that spyder is not running already.
If you are on Linux OS, please launch spyder through terminal. Just open the terminal and type '''spyder''' and it will launch. When Spyder opens, make sure you see Anaconda with the version written on the Ipython console. If not, try changing the path of your anaconda. Follow these steps according to your OS version.&lt;/p&gt;

====Windows====
[https://stackoverflow.com/questions/44597662/conda-command-is-not-recognized-on-windows-10 Click Here]

====Linux====
[https://stackoverflow.com/questions/18675907/how-to-run-conda Click Here]

====Mac====
[https://stackoverflow.com/questions/35246386/conda-command-not-found Click Here]

In most of the cases relaunching Spyder works.
A more general Troubleshoot is present [https://github.com/spyder-ide/spyder/wiki/Troubleshooting-Guide-and-FAQ Here]

==How to run a program in Spyder IDE?==
Go to Run on the menu bar. Click Run-&gt;Run.

[[#TOP]]
==Print statements==
Print statements help to display output on console. 
{{#ev:youtube|https://youtu.be/gECkqaOwyt0|250|right}}

===Syntax===
print()

===How to print a message?===
In order to print a message in Python, write &lt;pre&gt;print(&quot;message&quot;)&lt;/pre&gt;.
Single, double, triple quote can be used print()

'''Example:'''

'''Single Quote'''
&lt;pre&gt;
print('Hello')  
Output: Hello
&lt;/pre&gt;
'''Double Quote'''
&lt;pre&gt;
print(&quot;Hello&quot;)  
Output: Hello
&lt;/pre&gt;
'''Quote within quote'''
&lt;pre&gt;print('Is &quot;Ram&quot; a good boy?')  
Output: Is &quot;Ram&quot; a good boy?&lt;/pre&gt;

[[#TOP]]

==Escape sequences with strings==

We can use escape sequence within strings to make output more presentable.

'''\n'''  : It will move to next line.

'''\t'''  : It will add tab space(5space)

'''\a'''  : It will play system sound once.

'''Example:'''

&lt;pre&gt;print(&quot;Hi, \n How are you?&quot;)&lt;/pre&gt;

Output: 

Hi,

How are you?

&lt;pre&gt;print(&quot;Hi, \t How are you?&quot;)&lt;/pre&gt;

Output: 

Hi, &lt;5 spaces&gt; How are you?

[[File:Escape_Sequence.jpg]]

==Variables==
[[#Top]]
&lt;pre&gt;
Variables are used to store some values. Values can be strings, integers or decimal values.  

Variable Name Rules:
1. Variable name should start with letter or underscore. Variable name cant start with number.
Example:
Valid: JOC, WIKI, JOC_WIKI, _JOC
Invalid: 1JOC, 123WIKI, 0_WIKI

2. Remaining letter other then first one can contain number, underscore.
Example:
JOC1234, WIKI012_1332

3. Variable names are case sensitivities.
Example:
JOC, jOC, joC all are different varibles. 

&lt;/pre&gt;
{{#ev:youtube|https://youtu.be/60iAXH1sm-Y|250|right}}
===How to print a variable?===
In order to print the value of a variable in python, first initialize the variable and then call it where ever you wanna use it. 
&lt;pre&gt;print(variable_name)&lt;/pre&gt;

&lt;pre&gt;For example :
x=2                # x is viable here
print(x)           # calling variable x with print function

a = &quot;JOC&quot;          # a is variable here
b = &quot;_WIKI&quot;        # b is variable here
c = a + b          # c is variable here which will provide addition of variable a and b
&lt;/pre&gt;

===Some facts about Variables===
* If you want to print variable name with a message, you can use , operator. For example : I want to print Hello Simran and Simran has been stored in a variable called ''name''.
  name=&quot;Simran&quot;
  print(&quot;Hello&quot;,name)
* If you change the value of a variable, it will store the latest value. For example :
  name=&quot;Simran&quot;
  name=&quot;Amit&quot;
  If you will execute the command ''print(name)'', Amit will be displayed.
* You can perform operations like addition, subtraction etc only on integral variables.

===Variables Types and Conversion===
&lt;pre&gt;Variable can be decimal, integer and decimal. And they can be inter covered with the help of conversion functions.

Example:
JOC = 5           Save in Memory as 5       # We have variable with name JOC having value 5 here.
JOC = int(5)      Save in Memory as 5       # Here Variable JOC holding integer value of 5. 
JOC = flot(5)     Save in Memory as 5.0     # Here variable JOC holding flot value of 5
JOC = str(5)      Save in Memory as &quot;5&quot;     # Here variable JOC holding string value of 5 or We can say 5 will be treated as string here.
JOC = complex(5)  Save in Memory as (5+0j)  # Here variable JOC holding complex value of 5.
JOC = oct(5)      Save in Memory as 012     # Here variable JOC holding octal representation of 5.
JOC = hex(5)      Save in Memory as 0xa     # Here variable JOC holding hexadecimal representation of 5

There are many more function available in python. You can convert variable as per your requirement.
&lt;/pre&gt;


&lt;h1 style='color:black;font-family:Calibri;font-size:14.0pt;font-weight:800;
font-style:normal'&gt;Conversion Table with Eample&lt;/h1&gt;

&lt;table border=0 cellpadding=0 cellspacing=0 width=656 style='border-collapse:
 collapse;table-layout:fixed;width:492pt'&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6624497 width=63 style='height:15.0pt;width:47pt'&gt;Serial
  No&lt;/td&gt;
  &lt;td class=xl6724497 width=77 style='border-left:none;width:58pt'&gt;Function&lt;/td&gt;
  &lt;td class=xl6724497 width=303 style='border-left:none;width:227pt'&gt;Description&lt;/td&gt;
  &lt;td class=xl6724497 width=162 style='border-left:none;width:122pt'&gt;Example&lt;/td&gt;
  &lt;td class=xl6824497 width=51 style='border-left:none;width:38pt'&gt;Output&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;1&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;int(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to an
  integer.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10.12;
  print(int(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;2&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;long(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a&lt;span
  style='mso-spacerun:yes'&gt;  &lt;/span&gt;to a long integer&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10.12;
  print(long(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;3&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;float(a)&lt;/td&gt;
  &lt;td class=xl6524497 width=303 style='border-top:none;border-left:none;
  width:227pt'&gt;Converts a to a floating-point number.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 101.23;
  print(float(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;101.23&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;4&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;complex(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to a
  complex number.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print(complex(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10+0j&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;5&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;str(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to
  string.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print(str(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;6&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;repr(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts object
  a to an expression string.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print(repr(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;7&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;tuple(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to
  tuple.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print((a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;8&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;list(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to
  list.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print([a])&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;[10]&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;9&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;set(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to
  set.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a =
  set(&amp;quot;10&amp;quot;); print(a)&lt;/td&gt;
  &lt;td class=xl7124497 width=51 style='border-top:none;border-left:none;
  width:38pt'&gt;{'1', '0'}&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;10&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;dict(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to
  dictonary&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = dict(a=10);
  print(a)&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;{'a': 10}&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;11&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;chr(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts an
  integer to a character.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 97;
  print(chr(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;a&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;12&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;ord(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a
  single character to its integer value.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a =
  &amp;quot;J&amp;quot;; print(ord(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;74&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;13&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;hex(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts an
  integer to a hexadecimal string.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print(hex(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;0xa&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=21 style='height:15.75pt'&gt;
  &lt;td height=21 class=xl7224497 style='height:15.75pt;border-top:none'&gt;14&lt;/td&gt;
  &lt;td class=xl7324497 style='border-top:none;border-left:none'&gt;oct(a)&lt;/td&gt;
  &lt;td class=xl7324497 style='border-top:none;border-left:none'&gt;Converts an
  integer to an octal string.&lt;/td&gt;
  &lt;td class=xl7324497 style='border-top:none;border-left:none'&gt;a = 10;
  print(oct(a))&lt;/td&gt;
  &lt;td class=xl7424497 style='border-top:none;border-left:none'&gt;0o12&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
  &lt;tr height=0 style='display:none'&gt;
  &lt;td width=63 style='width:47pt'&gt;&lt;/td&gt;
  &lt;td width=77 style='width:58pt'&gt;&lt;/td&gt;
  &lt;td width=303 style='width:227pt'&gt;&lt;/td&gt;
  &lt;td width=162 style='width:122pt'&gt;&lt;/td&gt;
  &lt;td width=51 style='width:38pt'&gt;&lt;/td&gt;
 &lt;/tr&gt;
&lt;/table&gt;

==How to execute couple of instructions on console?==
You can execute couple of instructions on console using ;. Write Statement 1;Statement 2;......and then press ''Enter''.
{{#ev:youtube|https://youtu.be/CYQCYvLE22Y|250|right}}









==How to take input from the user?==
We can take input from the user using ''input'' function. For Example : You want the user to input variable ''x'', then write x=input(&quot;Enter the value of x&quot;) and execute. Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNkVLCxZw_jcgyS-bmrIVSP

And when the input you need is of data type other than string. You can do both the input function and data conversion in a single line.
For example:
Consider the program for letting in the patients
'''c=input(&quot;Enter (1/0)&quot;);d=int(c)'''

Instead of using it in two separate lines, combine it into a single line
'''c=int(input(&quot;Enter (1/0)&quot;))'''.

To get two inputs in same line with a space between them split() is used.

a,b=input(&quot;enter a&quot;).split(&quot;enter b&quot;)
----
[[#Top]]

==If statement==
If statement is used to execute set of two contrary statements based on a condition. 

===Syntax===
If (Condition):
    Statement 1
else:
    Statement 2

If 'Condition' is true then 'Statement 1' will be executed otherwise 'Statement 2' will be executed.

Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNhHmg3SkK1uiutigcAbH9K

==Loops==
[[#Top]]&lt;br&gt;
Loops in a programming languages are used to execute set of repetitive statements. For loop and while loop are used extensively to execute a set of looping instructions.

=== For loop Syntax ===
&lt;pre&gt;
for i in range(10): 
    Statement
&lt;/pre&gt;
range(10) indicate that values 0 to 9 will be assigned to the variable i and for each value of i the Statement will be executed, e.g.
&lt;pre&gt;
for i in range(10): 
    print(i)
&lt;/pre&gt;
Output will be
&lt;pre&gt;
0
1
2
3
4
5
6
7
8
9
&lt;/pre&gt;

[[#Top]]

=== While loop Syntax ===
&lt;pre&gt;
intialisation

while(condition):
   Statement
   increment/decrement
&lt;/pre&gt;
e.g.
&lt;pre&gt;
#initialization
i=0
while(i&lt;10): 
    print(i)
    i=i+1
&lt;/pre&gt;
Output will be:
&lt;pre&gt;
0
1
2
3
4
5
6
7
8
9
&lt;/pre&gt;
Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNbl5jkVrrw1E5XSvm3GiCI

[[#TOP]]
==Importance of Indentation in Python==
Indentation is used to indicate to what block of statements belong. Indentation of blocks convey program structure in Python. Indentation in Python is used to refer a group/block of code/statements. In C++ we use { and } (curly brackets) to group a set of statements. But in Python, there are no such brackets used. Instead of such brackets used in other programming languages, we use indentation in Python.
Use tabs,instead of spaces for ease of writing code.

Wrong indentation can lead to syntax error, or makes your output wrong for your logic e.g.
&lt;pre&gt;
#IndentationError: expected an indented block
i=-1
if i&lt;0:
print(&quot;Test successful&quot;)#Wrong indentation 
else:    
    print(&quot;Test failed&quot;)
#Output: IndentationError: expected an indented block
&lt;/pre&gt;
---
&lt;pre&gt;
#Properly Indented code:
i=-1
if i&lt;0:
    print(&quot;Test successful&quot;)#Wrong indentation
else:    
    print(&quot;Test failed&quot;)
#Output:Test successful
&lt;/pre&gt;
---
Logic changed, so output changed, with improper indentation, e.g.
---
&lt;h3&gt;Code : 1&lt;/h3&gt;
&lt;pre&gt;
sum=0
for i in range(5):
    for j in range(5):
        sum+=i
print(sum, end=&quot; &quot;)
#Output: 50
&lt;/pre&gt;
        
&lt;h3&gt;Code : 2&lt;/h3&gt;
&lt;pre&gt;
for i in range(5):
    for j in range(5):
        print(end=&quot; &quot;)
    sum+=i
print(sum, end=&quot; &quot;)
#Output:                          10
&lt;/pre&gt;
{{#ev:youtube|https://youtu.be/pmavoW419Yc|250|right}}&lt;br&gt;

[[#Top]]

==Spyder IDE Black Screen Solution==

----

 This issue is because of ''Help'' screen which is by default open. 
 We need to close it. So here's how you do it-


===Method 1:===

Step 1-    Try by closing current pane for that,  &quot;''press ctrl+shift+F4''&quot;  wait for few seconds things will appear on screen.

Step 2-    If it so than on menu bar go to ''view &gt; panes &gt; help'' unchecked &quot;''Help''&quot; option.

Step 3-    Make sure that &quot;''Help''&quot; under ''view &gt; panes'' is permanently unchecked. And ''Editor, Ipython console, Variable explorer''  are checked. 


===Method 2:===

Step 1-    Open spyder.

Step 2-   On that black screen randomly ''Left click'' on spyder &quot;''Menu bar''&quot; area you will get menu drop downs, You have to find Drop down with &quot;''Panes''&quot; option.

Step 3-   On &quot;''Panes''&quot; drop down unchecked the &quot;''Help''&quot;.

Step 4-   Wait for few seconds Spyder view will appear.

Step 5 -  Make sure that ''&quot;Help&quot;'' under view&gt;panes is permanently unchecked. And ''Editor, Ipython console, variable explorer'' are checked.


[[#Top]]</text>
      <sha1>etsqx9p3sckwfnf06p4prij4k07exgw</sha1>
    </revision>
    <revision>
      <id>3635</id>
      <parentid>3634</parentid>
      <timestamp>2018-09-28T05:01:02Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* Variables Types and Conversion */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="20392">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_2 Contributors of this page]
==Introduction to Python==
 &lt;p style=&quot;text-align:justify&quot;&gt;Python is a widely used programming language which allows programmers to write the program in fewer lines of code. It was designed by ''Guido van Rossum'' in 1991. Python uses an interpreter instead of compiler.Basically, the main difference between compiler and interpreter is that the compiler takes the code as 'whole' and compiles it. for example, in C language and on the other side in interpreter. For example: languages like Python. It interprets the written code 'line by line', and if somewhere error is found. It stops interpreting the code from there itself. Here, in our course we will be using Spyder IDE. Spyder is an integrated development environment with editing options to assist the programmers in writing programs. Spyder IDE is divided into two panes, one is console and other one is where program is written.&lt;/p&gt;

&lt;p style=&quot;text-align:justify&quot;&gt;
Python works on different platforms (Windows, Mac, Linux, Raspberry Pi, etc).
Python has a simple syntax similar to the English language.
Python has syntax that allows developers to write programs with fewer lines than some other programming languages.
Python runs on an interpreter system, meaning that code can be executed as soon as it is written. This means that prototyping can be very quick.&lt;/p&gt;
Python can be treated in a procedural way, an object-orientated way or a functional way.

==Installing Anaconda==
[[#Top]]
This article is all about installing and troubleshooting Anaconda and Spyder on different platforms.

===Windows===
Step 1 -&gt; Download the installer from here 
 &lt;p style=&quot;text-align:justify&quot;&gt;
[https://www.anaconda.com/download/#windows Download Link]. Make sure that you download the version compatible to your operating system architecture. If you have a 64 bit OS then you can download either 64 bit of 32 bit, but if you have 32 bit OS then you should download the 32 bit version only.
&lt;/p&gt;
 &lt;p style=&quot;text-align:justify&quot;&gt;
Step 2 -&gt; Double click on the .exe file that you downloaded just now and follow the instructions. If you are not sure of the installation options then just choose the default.&lt;/p&gt;
 &lt;p style=&quot;text-align:justify&quot;&gt;
Step 3 -&gt; To test your installation, open cmd (go to Start -&gt; then type cmd in the search bar and hit enter). There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.&lt;/p&gt;

===Mac===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#macos Download Link].

Step 2 -&gt; Double click on the .pkg file that you just downloaded. If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

===Linux===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#linux Download Link].

Step 2 -&gt; Go to the folder where you downloaded the .sh file and type following command 

  '''bash Anaconda-latest-Linux-x86_64.sh'''

If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

==Troubleshooting Spyder==

[[#Top]]
 &lt;p style=&quot;text-align:justify&quot;&gt;
In most of the cases, it happens that Spyder is already running and you have initiated one more instance of it. Please make sure that spyder is not running already.
If you are on Linux OS, please launch spyder through terminal. Just open the terminal and type '''spyder''' and it will launch. When Spyder opens, make sure you see Anaconda with the version written on the Ipython console. If not, try changing the path of your anaconda. Follow these steps according to your OS version.&lt;/p&gt;

====Windows====
[https://stackoverflow.com/questions/44597662/conda-command-is-not-recognized-on-windows-10 Click Here]

====Linux====
[https://stackoverflow.com/questions/18675907/how-to-run-conda Click Here]

====Mac====
[https://stackoverflow.com/questions/35246386/conda-command-not-found Click Here]

In most of the cases relaunching Spyder works.
A more general Troubleshoot is present [https://github.com/spyder-ide/spyder/wiki/Troubleshooting-Guide-and-FAQ Here]

==How to run a program in Spyder IDE?==
Go to Run on the menu bar. Click Run-&gt;Run.

[[#TOP]]
==Print statements==
Print statements help to display output on console. 
{{#ev:youtube|https://youtu.be/gECkqaOwyt0|250|right}}

===Syntax===
print()

===How to print a message?===
In order to print a message in Python, write &lt;pre&gt;print(&quot;message&quot;)&lt;/pre&gt;.
Single, double, triple quote can be used print()

'''Example:'''

'''Single Quote'''
&lt;pre&gt;
print('Hello')  
Output: Hello
&lt;/pre&gt;
'''Double Quote'''
&lt;pre&gt;
print(&quot;Hello&quot;)  
Output: Hello
&lt;/pre&gt;
'''Quote within quote'''
&lt;pre&gt;print('Is &quot;Ram&quot; a good boy?')  
Output: Is &quot;Ram&quot; a good boy?&lt;/pre&gt;

[[#TOP]]

==Escape sequences with strings==

We can use escape sequence within strings to make output more presentable.

'''\n'''  : It will move to next line.

'''\t'''  : It will add tab space(5space)

'''\a'''  : It will play system sound once.

'''Example:'''

&lt;pre&gt;print(&quot;Hi, \n How are you?&quot;)&lt;/pre&gt;

Output: 

Hi,

How are you?

&lt;pre&gt;print(&quot;Hi, \t How are you?&quot;)&lt;/pre&gt;

Output: 

Hi, &lt;5 spaces&gt; How are you?

[[File:Escape_Sequence.jpg]]

==Variables==
[[#Top]]
&lt;pre&gt;
Variables are used to store some values. Values can be strings, integers or decimal values.  

Variable Name Rules:
1. Variable name should start with letter or underscore. Variable name cant start with number.
Example:
Valid: JOC, WIKI, JOC_WIKI, _JOC
Invalid: 1JOC, 123WIKI, 0_WIKI

2. Remaining letter other then first one can contain number, underscore.
Example:
JOC1234, WIKI012_1332

3. Variable names are case sensitivities.
Example:
JOC, jOC, joC all are different varibles. 

&lt;/pre&gt;
{{#ev:youtube|https://youtu.be/60iAXH1sm-Y|250|right}}
===How to print a variable?===
In order to print the value of a variable in python, first initialize the variable and then call it where ever you wanna use it. 
&lt;pre&gt;print(variable_name)&lt;/pre&gt;

&lt;pre&gt;For example :
x=2                # x is viable here
print(x)           # calling variable x with print function

a = &quot;JOC&quot;          # a is variable here
b = &quot;_WIKI&quot;        # b is variable here
c = a + b          # c is variable here which will provide addition of variable a and b
&lt;/pre&gt;

===Some facts about Variables===
* If you want to print variable name with a message, you can use , operator. For example : I want to print Hello Simran and Simran has been stored in a variable called ''name''.
  name=&quot;Simran&quot;
  print(&quot;Hello&quot;,name)
* If you change the value of a variable, it will store the latest value. For example :
  name=&quot;Simran&quot;
  name=&quot;Amit&quot;
  If you will execute the command ''print(name)'', Amit will be displayed.
* You can perform operations like addition, subtraction etc only on integral variables.

===Variables Types and Conversion===
&lt;pre&gt;Variable can be decimal, integer and decimal. And they can be inter covered with the help of conversion functions.

Example:
JOC = 5           Save in Memory as 5       # We have variable with name JOC having value 5 here.
JOC = int(5)      Save in Memory as 5       # Here Variable JOC holding integer value of 5. 
JOC = flot(5)     Save in Memory as 5.0     # Here variable JOC holding flot value of 5
JOC = str(5)      Save in Memory as &quot;5&quot;     # Here variable JOC holding string value of 5 or We can say 5 will be treated as string here.
JOC = complex(5)  Save in Memory as (5+0j)  # Here variable JOC holding complex value of 5.
JOC = oct(5)      Save in Memory as 012     # Here variable JOC holding octal representation of 5.
JOC = hex(5)      Save in Memory as 0xa     # Here variable JOC holding hexadecimal representation of 5

There are many more function available in Python. You can convert variable as per your requirement.
&lt;/pre&gt;


&lt;h1 style='color:black;font-family:Calibri;font-size:14.0pt;font-weight:800;
font-style:normal'&gt;Conversion Table with Eample&lt;/h1&gt;

&lt;table border=0 cellpadding=0 cellspacing=0 width=656 style='border-collapse:
 collapse;table-layout:fixed;width:492pt'&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6624497 width=63 style='height:15.0pt;width:47pt'&gt;Serial
  No&lt;/td&gt;
  &lt;td class=xl6724497 width=77 style='border-left:none;width:58pt'&gt;Function&lt;/td&gt;
  &lt;td class=xl6724497 width=303 style='border-left:none;width:227pt'&gt;Description&lt;/td&gt;
  &lt;td class=xl6724497 width=162 style='border-left:none;width:122pt'&gt;Example&lt;/td&gt;
  &lt;td class=xl6824497 width=51 style='border-left:none;width:38pt'&gt;Output&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;1&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;int(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to an
  integer.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10.12;
  print(int(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;2&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;long(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a&lt;span
  style='mso-spacerun:yes'&gt;  &lt;/span&gt;to a long integer&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10.12;
  print(long(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;3&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;float(a)&lt;/td&gt;
  &lt;td class=xl6524497 width=303 style='border-top:none;border-left:none;
  width:227pt'&gt;Converts a to a floating-point number.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 101.23;
  print(float(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;101.23&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;4&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;complex(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to a
  complex number.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print(complex(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10+0j&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;5&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;str(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to
  string.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print(str(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;6&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;repr(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts object
  a to an expression string.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print(repr(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;7&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;tuple(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to
  tuple.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print((a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;8&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;list(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to
  list.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print([a])&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;[10]&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;9&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;set(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to
  set.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a =
  set(&amp;quot;10&amp;quot;); print(a)&lt;/td&gt;
  &lt;td class=xl7124497 width=51 style='border-top:none;border-left:none;
  width:38pt'&gt;{'1', '0'}&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;10&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;dict(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to
  dictonary&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = dict(a=10);
  print(a)&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;{'a': 10}&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;11&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;chr(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts an
  integer to a character.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 97;
  print(chr(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;a&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;12&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;ord(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a
  single character to its integer value.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a =
  &amp;quot;J&amp;quot;; print(ord(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;74&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;13&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;hex(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts an
  integer to a hexadecimal string.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print(hex(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;0xa&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=21 style='height:15.75pt'&gt;
  &lt;td height=21 class=xl7224497 style='height:15.75pt;border-top:none'&gt;14&lt;/td&gt;
  &lt;td class=xl7324497 style='border-top:none;border-left:none'&gt;oct(a)&lt;/td&gt;
  &lt;td class=xl7324497 style='border-top:none;border-left:none'&gt;Converts an
  integer to an octal string.&lt;/td&gt;
  &lt;td class=xl7324497 style='border-top:none;border-left:none'&gt;a = 10;
  print(oct(a))&lt;/td&gt;
  &lt;td class=xl7424497 style='border-top:none;border-left:none'&gt;0o12&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
  &lt;tr height=0 style='display:none'&gt;
  &lt;td width=63 style='width:47pt'&gt;&lt;/td&gt;
  &lt;td width=77 style='width:58pt'&gt;&lt;/td&gt;
  &lt;td width=303 style='width:227pt'&gt;&lt;/td&gt;
  &lt;td width=162 style='width:122pt'&gt;&lt;/td&gt;
  &lt;td width=51 style='width:38pt'&gt;&lt;/td&gt;
 &lt;/tr&gt;
&lt;/table&gt;

==How to execute couple of instructions on console?==
You can execute couple of instructions on console using ;. Write Statement 1;Statement 2;......and then press ''Enter''.
{{#ev:youtube|https://youtu.be/CYQCYvLE22Y|250|right}}









==How to take input from the user?==
We can take input from the user using ''input'' function. For Example : You want the user to input variable ''x'', then write x=input(&quot;Enter the value of x&quot;) and execute. Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNkVLCxZw_jcgyS-bmrIVSP

And when the input you need is of data type other than string. You can do both the input function and data conversion in a single line.
For example:
Consider the program for letting in the patients
'''c=input(&quot;Enter (1/0)&quot;);d=int(c)'''

Instead of using it in two separate lines, combine it into a single line
'''c=int(input(&quot;Enter (1/0)&quot;))'''.

To get two inputs in same line with a space between them split() is used.

a,b=input(&quot;enter a&quot;).split(&quot;enter b&quot;)
----
[[#Top]]

==If statement==
If statement is used to execute set of two contrary statements based on a condition. 

===Syntax===
If (Condition):
    Statement 1
else:
    Statement 2

If 'Condition' is true then 'Statement 1' will be executed otherwise 'Statement 2' will be executed.

Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNhHmg3SkK1uiutigcAbH9K

==Loops==
[[#Top]]&lt;br&gt;
Loops in a programming languages are used to execute set of repetitive statements. For loop and while loop are used extensively to execute a set of looping instructions.

=== For loop Syntax ===
&lt;pre&gt;
for i in range(10): 
    Statement
&lt;/pre&gt;
range(10) indicate that values 0 to 9 will be assigned to the variable i and for each value of i the Statement will be executed, e.g.
&lt;pre&gt;
for i in range(10): 
    print(i)
&lt;/pre&gt;
Output will be
&lt;pre&gt;
0
1
2
3
4
5
6
7
8
9
&lt;/pre&gt;

[[#Top]]

=== While loop Syntax ===
&lt;pre&gt;
intialisation

while(condition):
   Statement
   increment/decrement
&lt;/pre&gt;
e.g.
&lt;pre&gt;
#initialization
i=0
while(i&lt;10): 
    print(i)
    i=i+1
&lt;/pre&gt;
Output will be:
&lt;pre&gt;
0
1
2
3
4
5
6
7
8
9
&lt;/pre&gt;
Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNbl5jkVrrw1E5XSvm3GiCI

[[#TOP]]
==Importance of Indentation in Python==
Indentation is used to indicate to what block of statements belong. Indentation of blocks convey program structure in Python. Indentation in Python is used to refer a group/block of code/statements. In C++ we use { and } (curly brackets) to group a set of statements. But in Python, there are no such brackets used. Instead of such brackets used in other programming languages, we use indentation in Python.
Use tabs,instead of spaces for ease of writing code.

Wrong indentation can lead to syntax error, or makes your output wrong for your logic e.g.
&lt;pre&gt;
#IndentationError: expected an indented block
i=-1
if i&lt;0:
print(&quot;Test successful&quot;)#Wrong indentation 
else:    
    print(&quot;Test failed&quot;)
#Output: IndentationError: expected an indented block
&lt;/pre&gt;
---
&lt;pre&gt;
#Properly Indented code:
i=-1
if i&lt;0:
    print(&quot;Test successful&quot;)#Wrong indentation
else:    
    print(&quot;Test failed&quot;)
#Output:Test successful
&lt;/pre&gt;
---
Logic changed, so output changed, with improper indentation, e.g.
---
&lt;h3&gt;Code : 1&lt;/h3&gt;
&lt;pre&gt;
sum=0
for i in range(5):
    for j in range(5):
        sum+=i
print(sum, end=&quot; &quot;)
#Output: 50
&lt;/pre&gt;
        
&lt;h3&gt;Code : 2&lt;/h3&gt;
&lt;pre&gt;
for i in range(5):
    for j in range(5):
        print(end=&quot; &quot;)
    sum+=i
print(sum, end=&quot; &quot;)
#Output:                          10
&lt;/pre&gt;
{{#ev:youtube|https://youtu.be/pmavoW419Yc|250|right}}&lt;br&gt;

[[#Top]]

==Spyder IDE Black Screen Solution==

----

 This issue is because of ''Help'' screen which is by default open. 
 We need to close it. So here's how you do it-


===Method 1:===

Step 1-    Try by closing current pane for that,  &quot;''press ctrl+shift+F4''&quot;  wait for few seconds things will appear on screen.

Step 2-    If it so than on menu bar go to ''view &gt; panes &gt; help'' unchecked &quot;''Help''&quot; option.

Step 3-    Make sure that &quot;''Help''&quot; under ''view &gt; panes'' is permanently unchecked. And ''Editor, Ipython console, Variable explorer''  are checked. 


===Method 2:===

Step 1-    Open spyder.

Step 2-   On that black screen randomly ''Left click'' on spyder &quot;''Menu bar''&quot; area you will get menu drop downs, You have to find Drop down with &quot;''Panes''&quot; option.

Step 3-   On &quot;''Panes''&quot; drop down unchecked the &quot;''Help''&quot;.

Step 4-   Wait for few seconds Spyder view will appear.

Step 5 -  Make sure that ''&quot;Help&quot;'' under view&gt;panes is permanently unchecked. And ''Editor, Ipython console, variable explorer'' are checked.


[[#Top]]</text>
      <sha1>qy1a7k0dy3gg444w4ywj9cugg925dhq</sha1>
    </revision>
    <revision>
      <id>3636</id>
      <parentid>3635</parentid>
      <timestamp>2018-09-28T05:01:30Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* Importance of Indentation in Python */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="20429">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_2 Contributors of this page]
==Introduction to Python==
 &lt;p style=&quot;text-align:justify&quot;&gt;Python is a widely used programming language which allows programmers to write the program in fewer lines of code. It was designed by ''Guido van Rossum'' in 1991. Python uses an interpreter instead of compiler.Basically, the main difference between compiler and interpreter is that the compiler takes the code as 'whole' and compiles it. for example, in C language and on the other side in interpreter. For example: languages like Python. It interprets the written code 'line by line', and if somewhere error is found. It stops interpreting the code from there itself. Here, in our course we will be using Spyder IDE. Spyder is an integrated development environment with editing options to assist the programmers in writing programs. Spyder IDE is divided into two panes, one is console and other one is where program is written.&lt;/p&gt;

&lt;p style=&quot;text-align:justify&quot;&gt;
Python works on different platforms (Windows, Mac, Linux, Raspberry Pi, etc).
Python has a simple syntax similar to the English language.
Python has syntax that allows developers to write programs with fewer lines than some other programming languages.
Python runs on an interpreter system, meaning that code can be executed as soon as it is written. This means that prototyping can be very quick.&lt;/p&gt;
Python can be treated in a procedural way, an object-orientated way or a functional way.

==Installing Anaconda==
[[#Top]]
This article is all about installing and troubleshooting Anaconda and Spyder on different platforms.

===Windows===
Step 1 -&gt; Download the installer from here 
 &lt;p style=&quot;text-align:justify&quot;&gt;
[https://www.anaconda.com/download/#windows Download Link]. Make sure that you download the version compatible to your operating system architecture. If you have a 64 bit OS then you can download either 64 bit of 32 bit, but if you have 32 bit OS then you should download the 32 bit version only.
&lt;/p&gt;
 &lt;p style=&quot;text-align:justify&quot;&gt;
Step 2 -&gt; Double click on the .exe file that you downloaded just now and follow the instructions. If you are not sure of the installation options then just choose the default.&lt;/p&gt;
 &lt;p style=&quot;text-align:justify&quot;&gt;
Step 3 -&gt; To test your installation, open cmd (go to Start -&gt; then type cmd in the search bar and hit enter). There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.&lt;/p&gt;

===Mac===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#macos Download Link].

Step 2 -&gt; Double click on the .pkg file that you just downloaded. If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

===Linux===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#linux Download Link].

Step 2 -&gt; Go to the folder where you downloaded the .sh file and type following command 

  '''bash Anaconda-latest-Linux-x86_64.sh'''

If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

==Troubleshooting Spyder==

[[#Top]]
 &lt;p style=&quot;text-align:justify&quot;&gt;
In most of the cases, it happens that Spyder is already running and you have initiated one more instance of it. Please make sure that spyder is not running already.
If you are on Linux OS, please launch spyder through terminal. Just open the terminal and type '''spyder''' and it will launch. When Spyder opens, make sure you see Anaconda with the version written on the Ipython console. If not, try changing the path of your anaconda. Follow these steps according to your OS version.&lt;/p&gt;

====Windows====
[https://stackoverflow.com/questions/44597662/conda-command-is-not-recognized-on-windows-10 Click Here]

====Linux====
[https://stackoverflow.com/questions/18675907/how-to-run-conda Click Here]

====Mac====
[https://stackoverflow.com/questions/35246386/conda-command-not-found Click Here]

In most of the cases relaunching Spyder works.
A more general Troubleshoot is present [https://github.com/spyder-ide/spyder/wiki/Troubleshooting-Guide-and-FAQ Here]

==How to run a program in Spyder IDE?==
Go to Run on the menu bar. Click Run-&gt;Run.

[[#TOP]]
==Print statements==
Print statements help to display output on console. 
{{#ev:youtube|https://youtu.be/gECkqaOwyt0|250|right}}

===Syntax===
print()

===How to print a message?===
In order to print a message in Python, write &lt;pre&gt;print(&quot;message&quot;)&lt;/pre&gt;.
Single, double, triple quote can be used print()

'''Example:'''

'''Single Quote'''
&lt;pre&gt;
print('Hello')  
Output: Hello
&lt;/pre&gt;
'''Double Quote'''
&lt;pre&gt;
print(&quot;Hello&quot;)  
Output: Hello
&lt;/pre&gt;
'''Quote within quote'''
&lt;pre&gt;print('Is &quot;Ram&quot; a good boy?')  
Output: Is &quot;Ram&quot; a good boy?&lt;/pre&gt;

[[#TOP]]

==Escape sequences with strings==

We can use escape sequence within strings to make output more presentable.

'''\n'''  : It will move to next line.

'''\t'''  : It will add tab space(5space)

'''\a'''  : It will play system sound once.

'''Example:'''

&lt;pre&gt;print(&quot;Hi, \n How are you?&quot;)&lt;/pre&gt;

Output: 

Hi,

How are you?

&lt;pre&gt;print(&quot;Hi, \t How are you?&quot;)&lt;/pre&gt;

Output: 

Hi, &lt;5 spaces&gt; How are you?

[[File:Escape_Sequence.jpg]]

==Variables==
[[#Top]]
&lt;pre&gt;
Variables are used to store some values. Values can be strings, integers or decimal values.  

Variable Name Rules:
1. Variable name should start with letter or underscore. Variable name cant start with number.
Example:
Valid: JOC, WIKI, JOC_WIKI, _JOC
Invalid: 1JOC, 123WIKI, 0_WIKI

2. Remaining letter other then first one can contain number, underscore.
Example:
JOC1234, WIKI012_1332

3. Variable names are case sensitivities.
Example:
JOC, jOC, joC all are different varibles. 

&lt;/pre&gt;
{{#ev:youtube|https://youtu.be/60iAXH1sm-Y|250|right}}
===How to print a variable?===
In order to print the value of a variable in python, first initialize the variable and then call it where ever you wanna use it. 
&lt;pre&gt;print(variable_name)&lt;/pre&gt;

&lt;pre&gt;For example :
x=2                # x is viable here
print(x)           # calling variable x with print function

a = &quot;JOC&quot;          # a is variable here
b = &quot;_WIKI&quot;        # b is variable here
c = a + b          # c is variable here which will provide addition of variable a and b
&lt;/pre&gt;

===Some facts about Variables===
* If you want to print variable name with a message, you can use , operator. For example : I want to print Hello Simran and Simran has been stored in a variable called ''name''.
  name=&quot;Simran&quot;
  print(&quot;Hello&quot;,name)
* If you change the value of a variable, it will store the latest value. For example :
  name=&quot;Simran&quot;
  name=&quot;Amit&quot;
  If you will execute the command ''print(name)'', Amit will be displayed.
* You can perform operations like addition, subtraction etc only on integral variables.

===Variables Types and Conversion===
&lt;pre&gt;Variable can be decimal, integer and decimal. And they can be inter covered with the help of conversion functions.

Example:
JOC = 5           Save in Memory as 5       # We have variable with name JOC having value 5 here.
JOC = int(5)      Save in Memory as 5       # Here Variable JOC holding integer value of 5. 
JOC = flot(5)     Save in Memory as 5.0     # Here variable JOC holding flot value of 5
JOC = str(5)      Save in Memory as &quot;5&quot;     # Here variable JOC holding string value of 5 or We can say 5 will be treated as string here.
JOC = complex(5)  Save in Memory as (5+0j)  # Here variable JOC holding complex value of 5.
JOC = oct(5)      Save in Memory as 012     # Here variable JOC holding octal representation of 5.
JOC = hex(5)      Save in Memory as 0xa     # Here variable JOC holding hexadecimal representation of 5

There are many more function available in Python. You can convert variable as per your requirement.
&lt;/pre&gt;


&lt;h1 style='color:black;font-family:Calibri;font-size:14.0pt;font-weight:800;
font-style:normal'&gt;Conversion Table with Eample&lt;/h1&gt;

&lt;table border=0 cellpadding=0 cellspacing=0 width=656 style='border-collapse:
 collapse;table-layout:fixed;width:492pt'&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6624497 width=63 style='height:15.0pt;width:47pt'&gt;Serial
  No&lt;/td&gt;
  &lt;td class=xl6724497 width=77 style='border-left:none;width:58pt'&gt;Function&lt;/td&gt;
  &lt;td class=xl6724497 width=303 style='border-left:none;width:227pt'&gt;Description&lt;/td&gt;
  &lt;td class=xl6724497 width=162 style='border-left:none;width:122pt'&gt;Example&lt;/td&gt;
  &lt;td class=xl6824497 width=51 style='border-left:none;width:38pt'&gt;Output&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;1&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;int(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to an
  integer.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10.12;
  print(int(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;2&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;long(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a&lt;span
  style='mso-spacerun:yes'&gt;  &lt;/span&gt;to a long integer&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10.12;
  print(long(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;3&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;float(a)&lt;/td&gt;
  &lt;td class=xl6524497 width=303 style='border-top:none;border-left:none;
  width:227pt'&gt;Converts a to a floating-point number.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 101.23;
  print(float(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;101.23&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;4&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;complex(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to a
  complex number.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print(complex(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10+0j&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;5&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;str(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to
  string.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print(str(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;6&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;repr(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts object
  a to an expression string.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print(repr(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;7&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;tuple(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to
  tuple.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print((a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;8&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;list(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to
  list.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print([a])&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;[10]&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;9&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;set(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to
  set.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a =
  set(&amp;quot;10&amp;quot;); print(a)&lt;/td&gt;
  &lt;td class=xl7124497 width=51 style='border-top:none;border-left:none;
  width:38pt'&gt;{'1', '0'}&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;10&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;dict(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to
  dictonary&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = dict(a=10);
  print(a)&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;{'a': 10}&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;11&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;chr(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts an
  integer to a character.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 97;
  print(chr(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;a&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;12&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;ord(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a
  single character to its integer value.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a =
  &amp;quot;J&amp;quot;; print(ord(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;74&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;13&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;hex(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts an
  integer to a hexadecimal string.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print(hex(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;0xa&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=21 style='height:15.75pt'&gt;
  &lt;td height=21 class=xl7224497 style='height:15.75pt;border-top:none'&gt;14&lt;/td&gt;
  &lt;td class=xl7324497 style='border-top:none;border-left:none'&gt;oct(a)&lt;/td&gt;
  &lt;td class=xl7324497 style='border-top:none;border-left:none'&gt;Converts an
  integer to an octal string.&lt;/td&gt;
  &lt;td class=xl7324497 style='border-top:none;border-left:none'&gt;a = 10;
  print(oct(a))&lt;/td&gt;
  &lt;td class=xl7424497 style='border-top:none;border-left:none'&gt;0o12&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
  &lt;tr height=0 style='display:none'&gt;
  &lt;td width=63 style='width:47pt'&gt;&lt;/td&gt;
  &lt;td width=77 style='width:58pt'&gt;&lt;/td&gt;
  &lt;td width=303 style='width:227pt'&gt;&lt;/td&gt;
  &lt;td width=162 style='width:122pt'&gt;&lt;/td&gt;
  &lt;td width=51 style='width:38pt'&gt;&lt;/td&gt;
 &lt;/tr&gt;
&lt;/table&gt;

==How to execute couple of instructions on console?==
You can execute couple of instructions on console using ;. Write Statement 1;Statement 2;......and then press ''Enter''.
{{#ev:youtube|https://youtu.be/CYQCYvLE22Y|250|right}}









==How to take input from the user?==
We can take input from the user using ''input'' function. For Example : You want the user to input variable ''x'', then write x=input(&quot;Enter the value of x&quot;) and execute. Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNkVLCxZw_jcgyS-bmrIVSP

And when the input you need is of data type other than string. You can do both the input function and data conversion in a single line.
For example:
Consider the program for letting in the patients
'''c=input(&quot;Enter (1/0)&quot;);d=int(c)'''

Instead of using it in two separate lines, combine it into a single line
'''c=int(input(&quot;Enter (1/0)&quot;))'''.

To get two inputs in same line with a space between them split() is used.

a,b=input(&quot;enter a&quot;).split(&quot;enter b&quot;)
----
[[#Top]]

==If statement==
If statement is used to execute set of two contrary statements based on a condition. 

===Syntax===
If (Condition):
    Statement 1
else:
    Statement 2

If 'Condition' is true then 'Statement 1' will be executed otherwise 'Statement 2' will be executed.

Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNhHmg3SkK1uiutigcAbH9K

==Loops==
[[#Top]]&lt;br&gt;
Loops in a programming languages are used to execute set of repetitive statements. For loop and while loop are used extensively to execute a set of looping instructions.

=== For loop Syntax ===
&lt;pre&gt;
for i in range(10): 
    Statement
&lt;/pre&gt;
range(10) indicate that values 0 to 9 will be assigned to the variable i and for each value of i the Statement will be executed, e.g.
&lt;pre&gt;
for i in range(10): 
    print(i)
&lt;/pre&gt;
Output will be
&lt;pre&gt;
0
1
2
3
4
5
6
7
8
9
&lt;/pre&gt;

[[#Top]]

=== While loop Syntax ===
&lt;pre&gt;
intialisation

while(condition):
   Statement
   increment/decrement
&lt;/pre&gt;
e.g.
&lt;pre&gt;
#initialization
i=0
while(i&lt;10): 
    print(i)
    i=i+1
&lt;/pre&gt;
Output will be:
&lt;pre&gt;
0
1
2
3
4
5
6
7
8
9
&lt;/pre&gt;
Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNbl5jkVrrw1E5XSvm3GiCI

[[#TOP]]
==Importance of Indentation in Python==
 &lt;p style=&quot;text-align:justify&quot;&gt;
Indentation is used to indicate to what block of statements belong. Indentation of blocks convey program structure in Python. Indentation in Python is used to refer a group/block of code/statements. In C++ we use { and } (curly brackets) to group a set of statements. But in Python, there are no such brackets used. Instead of such brackets used in other programming languages, we use indentation in Python.&lt;/p&gt;

Use tabs,instead of spaces for ease of writing code.

Wrong indentation can lead to syntax error, or makes your output wrong for your logic e.g.
&lt;pre&gt;
#IndentationError: expected an indented block
i=-1
if i&lt;0:
print(&quot;Test successful&quot;)#Wrong indentation 
else:    
    print(&quot;Test failed&quot;)
#Output: IndentationError: expected an indented block
&lt;/pre&gt;
---
&lt;pre&gt;
#Properly Indented code:
i=-1
if i&lt;0:
    print(&quot;Test successful&quot;)#Wrong indentation
else:    
    print(&quot;Test failed&quot;)
#Output:Test successful
&lt;/pre&gt;
---
Logic changed, so output changed, with improper indentation, e.g.
---
&lt;h3&gt;Code : 1&lt;/h3&gt;
&lt;pre&gt;
sum=0
for i in range(5):
    for j in range(5):
        sum+=i
print(sum, end=&quot; &quot;)
#Output: 50
&lt;/pre&gt;
        
&lt;h3&gt;Code : 2&lt;/h3&gt;
&lt;pre&gt;
for i in range(5):
    for j in range(5):
        print(end=&quot; &quot;)
    sum+=i
print(sum, end=&quot; &quot;)
#Output:                          10
&lt;/pre&gt;
{{#ev:youtube|https://youtu.be/pmavoW419Yc|250|right}}&lt;br&gt;

[[#Top]]

==Spyder IDE Black Screen Solution==

----

 This issue is because of ''Help'' screen which is by default open. 
 We need to close it. So here's how you do it-


===Method 1:===

Step 1-    Try by closing current pane for that,  &quot;''press ctrl+shift+F4''&quot;  wait for few seconds things will appear on screen.

Step 2-    If it so than on menu bar go to ''view &gt; panes &gt; help'' unchecked &quot;''Help''&quot; option.

Step 3-    Make sure that &quot;''Help''&quot; under ''view &gt; panes'' is permanently unchecked. And ''Editor, Ipython console, Variable explorer''  are checked. 


===Method 2:===

Step 1-    Open spyder.

Step 2-   On that black screen randomly ''Left click'' on spyder &quot;''Menu bar''&quot; area you will get menu drop downs, You have to find Drop down with &quot;''Panes''&quot; option.

Step 3-   On &quot;''Panes''&quot; drop down unchecked the &quot;''Help''&quot;.

Step 4-   Wait for few seconds Spyder view will appear.

Step 5 -  Make sure that ''&quot;Help&quot;'' under view&gt;panes is permanently unchecked. And ''Editor, Ipython console, variable explorer'' are checked.


[[#Top]]</text>
      <sha1>ne08gne07y9clqcsfvch9olm3zevzzp</sha1>
    </revision>
    <revision>
      <id>3655</id>
      <parentid>3636</parentid>
      <timestamp>2018-09-28T07:09:57Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* While loop Syntax */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="20430">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_2 Contributors of this page]
==Introduction to Python==
 &lt;p style=&quot;text-align:justify&quot;&gt;Python is a widely used programming language which allows programmers to write the program in fewer lines of code. It was designed by ''Guido van Rossum'' in 1991. Python uses an interpreter instead of compiler.Basically, the main difference between compiler and interpreter is that the compiler takes the code as 'whole' and compiles it. for example, in C language and on the other side in interpreter. For example: languages like Python. It interprets the written code 'line by line', and if somewhere error is found. It stops interpreting the code from there itself. Here, in our course we will be using Spyder IDE. Spyder is an integrated development environment with editing options to assist the programmers in writing programs. Spyder IDE is divided into two panes, one is console and other one is where program is written.&lt;/p&gt;

&lt;p style=&quot;text-align:justify&quot;&gt;
Python works on different platforms (Windows, Mac, Linux, Raspberry Pi, etc).
Python has a simple syntax similar to the English language.
Python has syntax that allows developers to write programs with fewer lines than some other programming languages.
Python runs on an interpreter system, meaning that code can be executed as soon as it is written. This means that prototyping can be very quick.&lt;/p&gt;
Python can be treated in a procedural way, an object-orientated way or a functional way.

==Installing Anaconda==
[[#Top]]
This article is all about installing and troubleshooting Anaconda and Spyder on different platforms.

===Windows===
Step 1 -&gt; Download the installer from here 
 &lt;p style=&quot;text-align:justify&quot;&gt;
[https://www.anaconda.com/download/#windows Download Link]. Make sure that you download the version compatible to your operating system architecture. If you have a 64 bit OS then you can download either 64 bit of 32 bit, but if you have 32 bit OS then you should download the 32 bit version only.
&lt;/p&gt;
 &lt;p style=&quot;text-align:justify&quot;&gt;
Step 2 -&gt; Double click on the .exe file that you downloaded just now and follow the instructions. If you are not sure of the installation options then just choose the default.&lt;/p&gt;
 &lt;p style=&quot;text-align:justify&quot;&gt;
Step 3 -&gt; To test your installation, open cmd (go to Start -&gt; then type cmd in the search bar and hit enter). There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.&lt;/p&gt;

===Mac===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#macos Download Link].

Step 2 -&gt; Double click on the .pkg file that you just downloaded. If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

===Linux===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#linux Download Link].

Step 2 -&gt; Go to the folder where you downloaded the .sh file and type following command 

  '''bash Anaconda-latest-Linux-x86_64.sh'''

If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

==Troubleshooting Spyder==

[[#Top]]
 &lt;p style=&quot;text-align:justify&quot;&gt;
In most of the cases, it happens that Spyder is already running and you have initiated one more instance of it. Please make sure that spyder is not running already.
If you are on Linux OS, please launch spyder through terminal. Just open the terminal and type '''spyder''' and it will launch. When Spyder opens, make sure you see Anaconda with the version written on the Ipython console. If not, try changing the path of your anaconda. Follow these steps according to your OS version.&lt;/p&gt;

====Windows====
[https://stackoverflow.com/questions/44597662/conda-command-is-not-recognized-on-windows-10 Click Here]

====Linux====
[https://stackoverflow.com/questions/18675907/how-to-run-conda Click Here]

====Mac====
[https://stackoverflow.com/questions/35246386/conda-command-not-found Click Here]

In most of the cases relaunching Spyder works.
A more general Troubleshoot is present [https://github.com/spyder-ide/spyder/wiki/Troubleshooting-Guide-and-FAQ Here]

==How to run a program in Spyder IDE?==
Go to Run on the menu bar. Click Run-&gt;Run.

[[#TOP]]
==Print statements==
Print statements help to display output on console. 
{{#ev:youtube|https://youtu.be/gECkqaOwyt0|250|right}}

===Syntax===
print()

===How to print a message?===
In order to print a message in Python, write &lt;pre&gt;print(&quot;message&quot;)&lt;/pre&gt;.
Single, double, triple quote can be used print()

'''Example:'''

'''Single Quote'''
&lt;pre&gt;
print('Hello')  
Output: Hello
&lt;/pre&gt;
'''Double Quote'''
&lt;pre&gt;
print(&quot;Hello&quot;)  
Output: Hello
&lt;/pre&gt;
'''Quote within quote'''
&lt;pre&gt;print('Is &quot;Ram&quot; a good boy?')  
Output: Is &quot;Ram&quot; a good boy?&lt;/pre&gt;

[[#TOP]]

==Escape sequences with strings==

We can use escape sequence within strings to make output more presentable.

'''\n'''  : It will move to next line.

'''\t'''  : It will add tab space(5space)

'''\a'''  : It will play system sound once.

'''Example:'''

&lt;pre&gt;print(&quot;Hi, \n How are you?&quot;)&lt;/pre&gt;

Output: 

Hi,

How are you?

&lt;pre&gt;print(&quot;Hi, \t How are you?&quot;)&lt;/pre&gt;

Output: 

Hi, &lt;5 spaces&gt; How are you?

[[File:Escape_Sequence.jpg]]

==Variables==
[[#Top]]
&lt;pre&gt;
Variables are used to store some values. Values can be strings, integers or decimal values.  

Variable Name Rules:
1. Variable name should start with letter or underscore. Variable name cant start with number.
Example:
Valid: JOC, WIKI, JOC_WIKI, _JOC
Invalid: 1JOC, 123WIKI, 0_WIKI

2. Remaining letter other then first one can contain number, underscore.
Example:
JOC1234, WIKI012_1332

3. Variable names are case sensitivities.
Example:
JOC, jOC, joC all are different varibles. 

&lt;/pre&gt;
{{#ev:youtube|https://youtu.be/60iAXH1sm-Y|250|right}}
===How to print a variable?===
In order to print the value of a variable in python, first initialize the variable and then call it where ever you wanna use it. 
&lt;pre&gt;print(variable_name)&lt;/pre&gt;

&lt;pre&gt;For example :
x=2                # x is viable here
print(x)           # calling variable x with print function

a = &quot;JOC&quot;          # a is variable here
b = &quot;_WIKI&quot;        # b is variable here
c = a + b          # c is variable here which will provide addition of variable a and b
&lt;/pre&gt;

===Some facts about Variables===
* If you want to print variable name with a message, you can use , operator. For example : I want to print Hello Simran and Simran has been stored in a variable called ''name''.
  name=&quot;Simran&quot;
  print(&quot;Hello&quot;,name)
* If you change the value of a variable, it will store the latest value. For example :
  name=&quot;Simran&quot;
  name=&quot;Amit&quot;
  If you will execute the command ''print(name)'', Amit will be displayed.
* You can perform operations like addition, subtraction etc only on integral variables.

===Variables Types and Conversion===
&lt;pre&gt;Variable can be decimal, integer and decimal. And they can be inter covered with the help of conversion functions.

Example:
JOC = 5           Save in Memory as 5       # We have variable with name JOC having value 5 here.
JOC = int(5)      Save in Memory as 5       # Here Variable JOC holding integer value of 5. 
JOC = flot(5)     Save in Memory as 5.0     # Here variable JOC holding flot value of 5
JOC = str(5)      Save in Memory as &quot;5&quot;     # Here variable JOC holding string value of 5 or We can say 5 will be treated as string here.
JOC = complex(5)  Save in Memory as (5+0j)  # Here variable JOC holding complex value of 5.
JOC = oct(5)      Save in Memory as 012     # Here variable JOC holding octal representation of 5.
JOC = hex(5)      Save in Memory as 0xa     # Here variable JOC holding hexadecimal representation of 5

There are many more function available in Python. You can convert variable as per your requirement.
&lt;/pre&gt;


&lt;h1 style='color:black;font-family:Calibri;font-size:14.0pt;font-weight:800;
font-style:normal'&gt;Conversion Table with Eample&lt;/h1&gt;

&lt;table border=0 cellpadding=0 cellspacing=0 width=656 style='border-collapse:
 collapse;table-layout:fixed;width:492pt'&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6624497 width=63 style='height:15.0pt;width:47pt'&gt;Serial
  No&lt;/td&gt;
  &lt;td class=xl6724497 width=77 style='border-left:none;width:58pt'&gt;Function&lt;/td&gt;
  &lt;td class=xl6724497 width=303 style='border-left:none;width:227pt'&gt;Description&lt;/td&gt;
  &lt;td class=xl6724497 width=162 style='border-left:none;width:122pt'&gt;Example&lt;/td&gt;
  &lt;td class=xl6824497 width=51 style='border-left:none;width:38pt'&gt;Output&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;1&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;int(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to an
  integer.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10.12;
  print(int(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;2&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;long(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a&lt;span
  style='mso-spacerun:yes'&gt;  &lt;/span&gt;to a long integer&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10.12;
  print(long(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;3&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;float(a)&lt;/td&gt;
  &lt;td class=xl6524497 width=303 style='border-top:none;border-left:none;
  width:227pt'&gt;Converts a to a floating-point number.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 101.23;
  print(float(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;101.23&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;4&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;complex(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to a
  complex number.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print(complex(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10+0j&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;5&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;str(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to
  string.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print(str(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;6&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;repr(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts object
  a to an expression string.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print(repr(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;7&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;tuple(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to
  tuple.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print((a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;8&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;list(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to
  list.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print([a])&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;[10]&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;9&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;set(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to
  set.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a =
  set(&amp;quot;10&amp;quot;); print(a)&lt;/td&gt;
  &lt;td class=xl7124497 width=51 style='border-top:none;border-left:none;
  width:38pt'&gt;{'1', '0'}&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;10&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;dict(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to
  dictonary&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = dict(a=10);
  print(a)&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;{'a': 10}&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;11&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;chr(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts an
  integer to a character.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 97;
  print(chr(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;a&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;12&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;ord(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a
  single character to its integer value.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a =
  &amp;quot;J&amp;quot;; print(ord(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;74&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;13&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;hex(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts an
  integer to a hexadecimal string.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print(hex(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;0xa&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=21 style='height:15.75pt'&gt;
  &lt;td height=21 class=xl7224497 style='height:15.75pt;border-top:none'&gt;14&lt;/td&gt;
  &lt;td class=xl7324497 style='border-top:none;border-left:none'&gt;oct(a)&lt;/td&gt;
  &lt;td class=xl7324497 style='border-top:none;border-left:none'&gt;Converts an
  integer to an octal string.&lt;/td&gt;
  &lt;td class=xl7324497 style='border-top:none;border-left:none'&gt;a = 10;
  print(oct(a))&lt;/td&gt;
  &lt;td class=xl7424497 style='border-top:none;border-left:none'&gt;0o12&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
  &lt;tr height=0 style='display:none'&gt;
  &lt;td width=63 style='width:47pt'&gt;&lt;/td&gt;
  &lt;td width=77 style='width:58pt'&gt;&lt;/td&gt;
  &lt;td width=303 style='width:227pt'&gt;&lt;/td&gt;
  &lt;td width=162 style='width:122pt'&gt;&lt;/td&gt;
  &lt;td width=51 style='width:38pt'&gt;&lt;/td&gt;
 &lt;/tr&gt;
&lt;/table&gt;

==How to execute couple of instructions on console?==
You can execute couple of instructions on console using ;. Write Statement 1;Statement 2;......and then press ''Enter''.
{{#ev:youtube|https://youtu.be/CYQCYvLE22Y|250|right}}









==How to take input from the user?==
We can take input from the user using ''input'' function. For Example : You want the user to input variable ''x'', then write x=input(&quot;Enter the value of x&quot;) and execute. Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNkVLCxZw_jcgyS-bmrIVSP

And when the input you need is of data type other than string. You can do both the input function and data conversion in a single line.
For example:
Consider the program for letting in the patients
'''c=input(&quot;Enter (1/0)&quot;);d=int(c)'''

Instead of using it in two separate lines, combine it into a single line
'''c=int(input(&quot;Enter (1/0)&quot;))'''.

To get two inputs in same line with a space between them split() is used.

a,b=input(&quot;enter a&quot;).split(&quot;enter b&quot;)
----
[[#Top]]

==If statement==
If statement is used to execute set of two contrary statements based on a condition. 

===Syntax===
If (Condition):
    Statement 1
else:
    Statement 2

If 'Condition' is true then 'Statement 1' will be executed otherwise 'Statement 2' will be executed.

Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNhHmg3SkK1uiutigcAbH9K

==Loops==
[[#Top]]&lt;br&gt;
Loops in a programming languages are used to execute set of repetitive statements. For loop and while loop are used extensively to execute a set of looping instructions.

=== For loop Syntax ===
&lt;pre&gt;
for i in range(10): 
    Statement
&lt;/pre&gt;
range(10) indicate that values 0 to 9 will be assigned to the variable i and for each value of i the Statement will be executed, e.g.
&lt;pre&gt;
for i in range(10): 
    print(i)
&lt;/pre&gt;
Output will be
&lt;pre&gt;
0
1
2
3
4
5
6
7
8
9
&lt;/pre&gt;

[[#Top]]

=== While loop Syntax ===
&lt;pre&gt;
intialisation

while(condition):
   Statement
   increment/decrement
&lt;/pre&gt;
e.g.
&lt;pre&gt;
#initialization
i=0
while(i&lt;10): 
    print(i)
    i=i+1
&lt;/pre&gt;
Output will be:
&lt;pre&gt;
0
1
2
3
4
5
6
7
8
9
&lt;/pre&gt;
Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNbl5jkVrrw1E5XSvm3GiCI

[[#Top]]

==Importance of Indentation in Python==
 &lt;p style=&quot;text-align:justify&quot;&gt;
Indentation is used to indicate to what block of statements belong. Indentation of blocks convey program structure in Python. Indentation in Python is used to refer a group/block of code/statements. In C++ we use { and } (curly brackets) to group a set of statements. But in Python, there are no such brackets used. Instead of such brackets used in other programming languages, we use indentation in Python.&lt;/p&gt;

Use tabs,instead of spaces for ease of writing code.

Wrong indentation can lead to syntax error, or makes your output wrong for your logic e.g.
&lt;pre&gt;
#IndentationError: expected an indented block
i=-1
if i&lt;0:
print(&quot;Test successful&quot;)#Wrong indentation 
else:    
    print(&quot;Test failed&quot;)
#Output: IndentationError: expected an indented block
&lt;/pre&gt;
---
&lt;pre&gt;
#Properly Indented code:
i=-1
if i&lt;0:
    print(&quot;Test successful&quot;)#Wrong indentation
else:    
    print(&quot;Test failed&quot;)
#Output:Test successful
&lt;/pre&gt;
---
Logic changed, so output changed, with improper indentation, e.g.
---
&lt;h3&gt;Code : 1&lt;/h3&gt;
&lt;pre&gt;
sum=0
for i in range(5):
    for j in range(5):
        sum+=i
print(sum, end=&quot; &quot;)
#Output: 50
&lt;/pre&gt;
        
&lt;h3&gt;Code : 2&lt;/h3&gt;
&lt;pre&gt;
for i in range(5):
    for j in range(5):
        print(end=&quot; &quot;)
    sum+=i
print(sum, end=&quot; &quot;)
#Output:                          10
&lt;/pre&gt;
{{#ev:youtube|https://youtu.be/pmavoW419Yc|250|right}}&lt;br&gt;

[[#Top]]

==Spyder IDE Black Screen Solution==

----

 This issue is because of ''Help'' screen which is by default open. 
 We need to close it. So here's how you do it-


===Method 1:===

Step 1-    Try by closing current pane for that,  &quot;''press ctrl+shift+F4''&quot;  wait for few seconds things will appear on screen.

Step 2-    If it so than on menu bar go to ''view &gt; panes &gt; help'' unchecked &quot;''Help''&quot; option.

Step 3-    Make sure that &quot;''Help''&quot; under ''view &gt; panes'' is permanently unchecked. And ''Editor, Ipython console, Variable explorer''  are checked. 


===Method 2:===

Step 1-    Open spyder.

Step 2-   On that black screen randomly ''Left click'' on spyder &quot;''Menu bar''&quot; area you will get menu drop downs, You have to find Drop down with &quot;''Panes''&quot; option.

Step 3-   On &quot;''Panes''&quot; drop down unchecked the &quot;''Help''&quot;.

Step 4-   Wait for few seconds Spyder view will appear.

Step 5 -  Make sure that ''&quot;Help&quot;'' under view&gt;panes is permanently unchecked. And ''Editor, Ipython console, variable explorer'' are checked.


[[#Top]]</text>
      <sha1>tkvbomzb0sskq6x8v3btj62etiqwx1p</sha1>
    </revision>
    <revision>
      <id>3656</id>
      <parentid>3655</parentid>
      <timestamp>2018-09-28T07:10:07Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* While loop Syntax */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="20429">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_2 Contributors of this page]
==Introduction to Python==
 &lt;p style=&quot;text-align:justify&quot;&gt;Python is a widely used programming language which allows programmers to write the program in fewer lines of code. It was designed by ''Guido van Rossum'' in 1991. Python uses an interpreter instead of compiler.Basically, the main difference between compiler and interpreter is that the compiler takes the code as 'whole' and compiles it. for example, in C language and on the other side in interpreter. For example: languages like Python. It interprets the written code 'line by line', and if somewhere error is found. It stops interpreting the code from there itself. Here, in our course we will be using Spyder IDE. Spyder is an integrated development environment with editing options to assist the programmers in writing programs. Spyder IDE is divided into two panes, one is console and other one is where program is written.&lt;/p&gt;

&lt;p style=&quot;text-align:justify&quot;&gt;
Python works on different platforms (Windows, Mac, Linux, Raspberry Pi, etc).
Python has a simple syntax similar to the English language.
Python has syntax that allows developers to write programs with fewer lines than some other programming languages.
Python runs on an interpreter system, meaning that code can be executed as soon as it is written. This means that prototyping can be very quick.&lt;/p&gt;
Python can be treated in a procedural way, an object-orientated way or a functional way.

==Installing Anaconda==
[[#Top]]
This article is all about installing and troubleshooting Anaconda and Spyder on different platforms.

===Windows===
Step 1 -&gt; Download the installer from here 
 &lt;p style=&quot;text-align:justify&quot;&gt;
[https://www.anaconda.com/download/#windows Download Link]. Make sure that you download the version compatible to your operating system architecture. If you have a 64 bit OS then you can download either 64 bit of 32 bit, but if you have 32 bit OS then you should download the 32 bit version only.
&lt;/p&gt;
 &lt;p style=&quot;text-align:justify&quot;&gt;
Step 2 -&gt; Double click on the .exe file that you downloaded just now and follow the instructions. If you are not sure of the installation options then just choose the default.&lt;/p&gt;
 &lt;p style=&quot;text-align:justify&quot;&gt;
Step 3 -&gt; To test your installation, open cmd (go to Start -&gt; then type cmd in the search bar and hit enter). There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.&lt;/p&gt;

===Mac===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#macos Download Link].

Step 2 -&gt; Double click on the .pkg file that you just downloaded. If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

===Linux===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#linux Download Link].

Step 2 -&gt; Go to the folder where you downloaded the .sh file and type following command 

  '''bash Anaconda-latest-Linux-x86_64.sh'''

If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

==Troubleshooting Spyder==

[[#Top]]
 &lt;p style=&quot;text-align:justify&quot;&gt;
In most of the cases, it happens that Spyder is already running and you have initiated one more instance of it. Please make sure that spyder is not running already.
If you are on Linux OS, please launch spyder through terminal. Just open the terminal and type '''spyder''' and it will launch. When Spyder opens, make sure you see Anaconda with the version written on the Ipython console. If not, try changing the path of your anaconda. Follow these steps according to your OS version.&lt;/p&gt;

====Windows====
[https://stackoverflow.com/questions/44597662/conda-command-is-not-recognized-on-windows-10 Click Here]

====Linux====
[https://stackoverflow.com/questions/18675907/how-to-run-conda Click Here]

====Mac====
[https://stackoverflow.com/questions/35246386/conda-command-not-found Click Here]

In most of the cases relaunching Spyder works.
A more general Troubleshoot is present [https://github.com/spyder-ide/spyder/wiki/Troubleshooting-Guide-and-FAQ Here]

==How to run a program in Spyder IDE?==
Go to Run on the menu bar. Click Run-&gt;Run.

[[#TOP]]
==Print statements==
Print statements help to display output on console. 
{{#ev:youtube|https://youtu.be/gECkqaOwyt0|250|right}}

===Syntax===
print()

===How to print a message?===
In order to print a message in Python, write &lt;pre&gt;print(&quot;message&quot;)&lt;/pre&gt;.
Single, double, triple quote can be used print()

'''Example:'''

'''Single Quote'''
&lt;pre&gt;
print('Hello')  
Output: Hello
&lt;/pre&gt;
'''Double Quote'''
&lt;pre&gt;
print(&quot;Hello&quot;)  
Output: Hello
&lt;/pre&gt;
'''Quote within quote'''
&lt;pre&gt;print('Is &quot;Ram&quot; a good boy?')  
Output: Is &quot;Ram&quot; a good boy?&lt;/pre&gt;

[[#TOP]]

==Escape sequences with strings==

We can use escape sequence within strings to make output more presentable.

'''\n'''  : It will move to next line.

'''\t'''  : It will add tab space(5space)

'''\a'''  : It will play system sound once.

'''Example:'''

&lt;pre&gt;print(&quot;Hi, \n How are you?&quot;)&lt;/pre&gt;

Output: 

Hi,

How are you?

&lt;pre&gt;print(&quot;Hi, \t How are you?&quot;)&lt;/pre&gt;

Output: 

Hi, &lt;5 spaces&gt; How are you?

[[File:Escape_Sequence.jpg]]

==Variables==
[[#Top]]
&lt;pre&gt;
Variables are used to store some values. Values can be strings, integers or decimal values.  

Variable Name Rules:
1. Variable name should start with letter or underscore. Variable name cant start with number.
Example:
Valid: JOC, WIKI, JOC_WIKI, _JOC
Invalid: 1JOC, 123WIKI, 0_WIKI

2. Remaining letter other then first one can contain number, underscore.
Example:
JOC1234, WIKI012_1332

3. Variable names are case sensitivities.
Example:
JOC, jOC, joC all are different varibles. 

&lt;/pre&gt;
{{#ev:youtube|https://youtu.be/60iAXH1sm-Y|250|right}}
===How to print a variable?===
In order to print the value of a variable in python, first initialize the variable and then call it where ever you wanna use it. 
&lt;pre&gt;print(variable_name)&lt;/pre&gt;

&lt;pre&gt;For example :
x=2                # x is viable here
print(x)           # calling variable x with print function

a = &quot;JOC&quot;          # a is variable here
b = &quot;_WIKI&quot;        # b is variable here
c = a + b          # c is variable here which will provide addition of variable a and b
&lt;/pre&gt;

===Some facts about Variables===
* If you want to print variable name with a message, you can use , operator. For example : I want to print Hello Simran and Simran has been stored in a variable called ''name''.
  name=&quot;Simran&quot;
  print(&quot;Hello&quot;,name)
* If you change the value of a variable, it will store the latest value. For example :
  name=&quot;Simran&quot;
  name=&quot;Amit&quot;
  If you will execute the command ''print(name)'', Amit will be displayed.
* You can perform operations like addition, subtraction etc only on integral variables.

===Variables Types and Conversion===
&lt;pre&gt;Variable can be decimal, integer and decimal. And they can be inter covered with the help of conversion functions.

Example:
JOC = 5           Save in Memory as 5       # We have variable with name JOC having value 5 here.
JOC = int(5)      Save in Memory as 5       # Here Variable JOC holding integer value of 5. 
JOC = flot(5)     Save in Memory as 5.0     # Here variable JOC holding flot value of 5
JOC = str(5)      Save in Memory as &quot;5&quot;     # Here variable JOC holding string value of 5 or We can say 5 will be treated as string here.
JOC = complex(5)  Save in Memory as (5+0j)  # Here variable JOC holding complex value of 5.
JOC = oct(5)      Save in Memory as 012     # Here variable JOC holding octal representation of 5.
JOC = hex(5)      Save in Memory as 0xa     # Here variable JOC holding hexadecimal representation of 5

There are many more function available in Python. You can convert variable as per your requirement.
&lt;/pre&gt;


&lt;h1 style='color:black;font-family:Calibri;font-size:14.0pt;font-weight:800;
font-style:normal'&gt;Conversion Table with Eample&lt;/h1&gt;

&lt;table border=0 cellpadding=0 cellspacing=0 width=656 style='border-collapse:
 collapse;table-layout:fixed;width:492pt'&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6624497 width=63 style='height:15.0pt;width:47pt'&gt;Serial
  No&lt;/td&gt;
  &lt;td class=xl6724497 width=77 style='border-left:none;width:58pt'&gt;Function&lt;/td&gt;
  &lt;td class=xl6724497 width=303 style='border-left:none;width:227pt'&gt;Description&lt;/td&gt;
  &lt;td class=xl6724497 width=162 style='border-left:none;width:122pt'&gt;Example&lt;/td&gt;
  &lt;td class=xl6824497 width=51 style='border-left:none;width:38pt'&gt;Output&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;1&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;int(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to an
  integer.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10.12;
  print(int(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;2&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;long(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a&lt;span
  style='mso-spacerun:yes'&gt;  &lt;/span&gt;to a long integer&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10.12;
  print(long(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;3&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;float(a)&lt;/td&gt;
  &lt;td class=xl6524497 width=303 style='border-top:none;border-left:none;
  width:227pt'&gt;Converts a to a floating-point number.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 101.23;
  print(float(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;101.23&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;4&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;complex(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to a
  complex number.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print(complex(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10+0j&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;5&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;str(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to
  string.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print(str(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;6&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;repr(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts object
  a to an expression string.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print(repr(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;7&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;tuple(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to
  tuple.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print((a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;8&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;list(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to
  list.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print([a])&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;[10]&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;9&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;set(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to
  set.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a =
  set(&amp;quot;10&amp;quot;); print(a)&lt;/td&gt;
  &lt;td class=xl7124497 width=51 style='border-top:none;border-left:none;
  width:38pt'&gt;{'1', '0'}&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;10&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;dict(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to
  dictonary&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = dict(a=10);
  print(a)&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;{'a': 10}&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;11&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;chr(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts an
  integer to a character.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 97;
  print(chr(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;a&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;12&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;ord(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a
  single character to its integer value.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a =
  &amp;quot;J&amp;quot;; print(ord(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;74&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;13&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;hex(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts an
  integer to a hexadecimal string.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print(hex(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;0xa&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=21 style='height:15.75pt'&gt;
  &lt;td height=21 class=xl7224497 style='height:15.75pt;border-top:none'&gt;14&lt;/td&gt;
  &lt;td class=xl7324497 style='border-top:none;border-left:none'&gt;oct(a)&lt;/td&gt;
  &lt;td class=xl7324497 style='border-top:none;border-left:none'&gt;Converts an
  integer to an octal string.&lt;/td&gt;
  &lt;td class=xl7324497 style='border-top:none;border-left:none'&gt;a = 10;
  print(oct(a))&lt;/td&gt;
  &lt;td class=xl7424497 style='border-top:none;border-left:none'&gt;0o12&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
  &lt;tr height=0 style='display:none'&gt;
  &lt;td width=63 style='width:47pt'&gt;&lt;/td&gt;
  &lt;td width=77 style='width:58pt'&gt;&lt;/td&gt;
  &lt;td width=303 style='width:227pt'&gt;&lt;/td&gt;
  &lt;td width=162 style='width:122pt'&gt;&lt;/td&gt;
  &lt;td width=51 style='width:38pt'&gt;&lt;/td&gt;
 &lt;/tr&gt;
&lt;/table&gt;

==How to execute couple of instructions on console?==
You can execute couple of instructions on console using ;. Write Statement 1;Statement 2;......and then press ''Enter''.
{{#ev:youtube|https://youtu.be/CYQCYvLE22Y|250|right}}









==How to take input from the user?==
We can take input from the user using ''input'' function. For Example : You want the user to input variable ''x'', then write x=input(&quot;Enter the value of x&quot;) and execute. Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNkVLCxZw_jcgyS-bmrIVSP

And when the input you need is of data type other than string. You can do both the input function and data conversion in a single line.
For example:
Consider the program for letting in the patients
'''c=input(&quot;Enter (1/0)&quot;);d=int(c)'''

Instead of using it in two separate lines, combine it into a single line
'''c=int(input(&quot;Enter (1/0)&quot;))'''.

To get two inputs in same line with a space between them split() is used.

a,b=input(&quot;enter a&quot;).split(&quot;enter b&quot;)
----
[[#Top]]

==If statement==
If statement is used to execute set of two contrary statements based on a condition. 

===Syntax===
If (Condition):
    Statement 1
else:
    Statement 2

If 'Condition' is true then 'Statement 1' will be executed otherwise 'Statement 2' will be executed.

Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNhHmg3SkK1uiutigcAbH9K

==Loops==
[[#Top]]&lt;br&gt;
Loops in a programming languages are used to execute set of repetitive statements. For loop and while loop are used extensively to execute a set of looping instructions.

=== For loop Syntax ===
&lt;pre&gt;
for i in range(10): 
    Statement
&lt;/pre&gt;
range(10) indicate that values 0 to 9 will be assigned to the variable i and for each value of i the Statement will be executed, e.g.
&lt;pre&gt;
for i in range(10): 
    print(i)
&lt;/pre&gt;
Output will be
&lt;pre&gt;
0
1
2
3
4
5
6
7
8
9
&lt;/pre&gt;

[[#Top]]

=== While loop Syntax ===
&lt;pre&gt;
intialisation

while(condition):
   Statement
   increment/decrement
&lt;/pre&gt;
e.g.
&lt;pre&gt;
#initialization
i=0
while(i&lt;10): 
    print(i)
    i=i+1
&lt;/pre&gt;
Output will be:
&lt;pre&gt;
0
1
2
3
4
5
6
7
8
9
&lt;/pre&gt;
Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNbl5jkVrrw1E5XSvm3GiCI

[[#TOP]]
==Importance of Indentation in Python==
 &lt;p style=&quot;text-align:justify&quot;&gt;
Indentation is used to indicate to what block of statements belong. Indentation of blocks convey program structure in Python. Indentation in Python is used to refer a group/block of code/statements. In C++ we use { and } (curly brackets) to group a set of statements. But in Python, there are no such brackets used. Instead of such brackets used in other programming languages, we use indentation in Python.&lt;/p&gt;

Use tabs,instead of spaces for ease of writing code.

Wrong indentation can lead to syntax error, or makes your output wrong for your logic e.g.
&lt;pre&gt;
#IndentationError: expected an indented block
i=-1
if i&lt;0:
print(&quot;Test successful&quot;)#Wrong indentation 
else:    
    print(&quot;Test failed&quot;)
#Output: IndentationError: expected an indented block
&lt;/pre&gt;
---
&lt;pre&gt;
#Properly Indented code:
i=-1
if i&lt;0:
    print(&quot;Test successful&quot;)#Wrong indentation
else:    
    print(&quot;Test failed&quot;)
#Output:Test successful
&lt;/pre&gt;
---
Logic changed, so output changed, with improper indentation, e.g.
---
&lt;h3&gt;Code : 1&lt;/h3&gt;
&lt;pre&gt;
sum=0
for i in range(5):
    for j in range(5):
        sum+=i
print(sum, end=&quot; &quot;)
#Output: 50
&lt;/pre&gt;
        
&lt;h3&gt;Code : 2&lt;/h3&gt;
&lt;pre&gt;
for i in range(5):
    for j in range(5):
        print(end=&quot; &quot;)
    sum+=i
print(sum, end=&quot; &quot;)
#Output:                          10
&lt;/pre&gt;
{{#ev:youtube|https://youtu.be/pmavoW419Yc|250|right}}&lt;br&gt;

[[#Top]]

==Spyder IDE Black Screen Solution==

----

 This issue is because of ''Help'' screen which is by default open. 
 We need to close it. So here's how you do it-


===Method 1:===

Step 1-    Try by closing current pane for that,  &quot;''press ctrl+shift+F4''&quot;  wait for few seconds things will appear on screen.

Step 2-    If it so than on menu bar go to ''view &gt; panes &gt; help'' unchecked &quot;''Help''&quot; option.

Step 3-    Make sure that &quot;''Help''&quot; under ''view &gt; panes'' is permanently unchecked. And ''Editor, Ipython console, Variable explorer''  are checked. 


===Method 2:===

Step 1-    Open spyder.

Step 2-   On that black screen randomly ''Left click'' on spyder &quot;''Menu bar''&quot; area you will get menu drop downs, You have to find Drop down with &quot;''Panes''&quot; option.

Step 3-   On &quot;''Panes''&quot; drop down unchecked the &quot;''Help''&quot;.

Step 4-   Wait for few seconds Spyder view will appear.

Step 5 -  Make sure that ''&quot;Help&quot;'' under view&gt;panes is permanently unchecked. And ''Editor, Ipython console, variable explorer'' are checked.


[[#Top]]</text>
      <sha1>ne08gne07y9clqcsfvch9olm3zevzzp</sha1>
    </revision>
    <revision>
      <id>3687</id>
      <parentid>3656</parentid>
      <timestamp>2018-09-29T01:04:44Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* Introduction to Python */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="20434">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_2 Contributors of this page]
==Introduction to Python==
 &lt;p style=&quot;text-align:justify&quot;&gt;Python is a widely used programming language which allows programmers to write the program in fewer lines of code. It was designed by ''Guido van Rossum'' in 1991. Python uses an interpreter instead of compiler. Basically, the main difference between compiler and interpreter is that the compiler takes the code as 'whole' and compiles it. for example, in ''C'' language and on the other side in interpreter. For example: languages like Python. It interprets the written code 'line by line', and if somewhere error is found. It stops interpreting the code from there itself. Here, in our course we will be using Spyder IDE. Spyder is an integrated development environment with editing options to assist the programmers in writing programs. Spyder IDE is divided into two panes, one is console and other one is where program is written.&lt;/p&gt;

&lt;p style=&quot;text-align:justify&quot;&gt;
Python works on different platforms (Windows, Mac, Linux, Raspberry Pi, etc).
Python has a simple syntax similar to the English language.
Python has syntax that allows developers to write programs with fewer lines than some other programming languages.
Python runs on an interpreter system, meaning that code can be executed as soon as it is written. This means that prototyping can be very quick.&lt;/p&gt;
Python can be treated in a procedural way, an object-orientated way or a functional way.

==Installing Anaconda==
[[#Top]]
This article is all about installing and troubleshooting Anaconda and Spyder on different platforms.

===Windows===
Step 1 -&gt; Download the installer from here 
 &lt;p style=&quot;text-align:justify&quot;&gt;
[https://www.anaconda.com/download/#windows Download Link]. Make sure that you download the version compatible to your operating system architecture. If you have a 64 bit OS then you can download either 64 bit of 32 bit, but if you have 32 bit OS then you should download the 32 bit version only.
&lt;/p&gt;
 &lt;p style=&quot;text-align:justify&quot;&gt;
Step 2 -&gt; Double click on the .exe file that you downloaded just now and follow the instructions. If you are not sure of the installation options then just choose the default.&lt;/p&gt;
 &lt;p style=&quot;text-align:justify&quot;&gt;
Step 3 -&gt; To test your installation, open cmd (go to Start -&gt; then type cmd in the search bar and hit enter). There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.&lt;/p&gt;

===Mac===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#macos Download Link].

Step 2 -&gt; Double click on the .pkg file that you just downloaded. If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

===Linux===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#linux Download Link].

Step 2 -&gt; Go to the folder where you downloaded the .sh file and type following command 

  '''bash Anaconda-latest-Linux-x86_64.sh'''

If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

==Troubleshooting Spyder==

[[#Top]]
 &lt;p style=&quot;text-align:justify&quot;&gt;
In most of the cases, it happens that Spyder is already running and you have initiated one more instance of it. Please make sure that spyder is not running already.
If you are on Linux OS, please launch spyder through terminal. Just open the terminal and type '''spyder''' and it will launch. When Spyder opens, make sure you see Anaconda with the version written on the Ipython console. If not, try changing the path of your anaconda. Follow these steps according to your OS version.&lt;/p&gt;

====Windows====
[https://stackoverflow.com/questions/44597662/conda-command-is-not-recognized-on-windows-10 Click Here]

====Linux====
[https://stackoverflow.com/questions/18675907/how-to-run-conda Click Here]

====Mac====
[https://stackoverflow.com/questions/35246386/conda-command-not-found Click Here]

In most of the cases relaunching Spyder works.
A more general Troubleshoot is present [https://github.com/spyder-ide/spyder/wiki/Troubleshooting-Guide-and-FAQ Here]

==How to run a program in Spyder IDE?==
Go to Run on the menu bar. Click Run-&gt;Run.

[[#TOP]]
==Print statements==
Print statements help to display output on console. 
{{#ev:youtube|https://youtu.be/gECkqaOwyt0|250|right}}

===Syntax===
print()

===How to print a message?===
In order to print a message in Python, write &lt;pre&gt;print(&quot;message&quot;)&lt;/pre&gt;.
Single, double, triple quote can be used print()

'''Example:'''

'''Single Quote'''
&lt;pre&gt;
print('Hello')  
Output: Hello
&lt;/pre&gt;
'''Double Quote'''
&lt;pre&gt;
print(&quot;Hello&quot;)  
Output: Hello
&lt;/pre&gt;
'''Quote within quote'''
&lt;pre&gt;print('Is &quot;Ram&quot; a good boy?')  
Output: Is &quot;Ram&quot; a good boy?&lt;/pre&gt;

[[#TOP]]

==Escape sequences with strings==

We can use escape sequence within strings to make output more presentable.

'''\n'''  : It will move to next line.

'''\t'''  : It will add tab space(5space)

'''\a'''  : It will play system sound once.

'''Example:'''

&lt;pre&gt;print(&quot;Hi, \n How are you?&quot;)&lt;/pre&gt;

Output: 

Hi,

How are you?

&lt;pre&gt;print(&quot;Hi, \t How are you?&quot;)&lt;/pre&gt;

Output: 

Hi, &lt;5 spaces&gt; How are you?

[[File:Escape_Sequence.jpg]]

==Variables==
[[#Top]]
&lt;pre&gt;
Variables are used to store some values. Values can be strings, integers or decimal values.  

Variable Name Rules:
1. Variable name should start with letter or underscore. Variable name cant start with number.
Example:
Valid: JOC, WIKI, JOC_WIKI, _JOC
Invalid: 1JOC, 123WIKI, 0_WIKI

2. Remaining letter other then first one can contain number, underscore.
Example:
JOC1234, WIKI012_1332

3. Variable names are case sensitivities.
Example:
JOC, jOC, joC all are different varibles. 

&lt;/pre&gt;
{{#ev:youtube|https://youtu.be/60iAXH1sm-Y|250|right}}
===How to print a variable?===
In order to print the value of a variable in python, first initialize the variable and then call it where ever you wanna use it. 
&lt;pre&gt;print(variable_name)&lt;/pre&gt;

&lt;pre&gt;For example :
x=2                # x is viable here
print(x)           # calling variable x with print function

a = &quot;JOC&quot;          # a is variable here
b = &quot;_WIKI&quot;        # b is variable here
c = a + b          # c is variable here which will provide addition of variable a and b
&lt;/pre&gt;

===Some facts about Variables===
* If you want to print variable name with a message, you can use , operator. For example : I want to print Hello Simran and Simran has been stored in a variable called ''name''.
  name=&quot;Simran&quot;
  print(&quot;Hello&quot;,name)
* If you change the value of a variable, it will store the latest value. For example :
  name=&quot;Simran&quot;
  name=&quot;Amit&quot;
  If you will execute the command ''print(name)'', Amit will be displayed.
* You can perform operations like addition, subtraction etc only on integral variables.

===Variables Types and Conversion===
&lt;pre&gt;Variable can be decimal, integer and decimal. And they can be inter covered with the help of conversion functions.

Example:
JOC = 5           Save in Memory as 5       # We have variable with name JOC having value 5 here.
JOC = int(5)      Save in Memory as 5       # Here Variable JOC holding integer value of 5. 
JOC = flot(5)     Save in Memory as 5.0     # Here variable JOC holding flot value of 5
JOC = str(5)      Save in Memory as &quot;5&quot;     # Here variable JOC holding string value of 5 or We can say 5 will be treated as string here.
JOC = complex(5)  Save in Memory as (5+0j)  # Here variable JOC holding complex value of 5.
JOC = oct(5)      Save in Memory as 012     # Here variable JOC holding octal representation of 5.
JOC = hex(5)      Save in Memory as 0xa     # Here variable JOC holding hexadecimal representation of 5

There are many more function available in Python. You can convert variable as per your requirement.
&lt;/pre&gt;


&lt;h1 style='color:black;font-family:Calibri;font-size:14.0pt;font-weight:800;
font-style:normal'&gt;Conversion Table with Eample&lt;/h1&gt;

&lt;table border=0 cellpadding=0 cellspacing=0 width=656 style='border-collapse:
 collapse;table-layout:fixed;width:492pt'&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6624497 width=63 style='height:15.0pt;width:47pt'&gt;Serial
  No&lt;/td&gt;
  &lt;td class=xl6724497 width=77 style='border-left:none;width:58pt'&gt;Function&lt;/td&gt;
  &lt;td class=xl6724497 width=303 style='border-left:none;width:227pt'&gt;Description&lt;/td&gt;
  &lt;td class=xl6724497 width=162 style='border-left:none;width:122pt'&gt;Example&lt;/td&gt;
  &lt;td class=xl6824497 width=51 style='border-left:none;width:38pt'&gt;Output&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;1&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;int(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to an
  integer.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10.12;
  print(int(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;2&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;long(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a&lt;span
  style='mso-spacerun:yes'&gt;  &lt;/span&gt;to a long integer&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10.12;
  print(long(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;3&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;float(a)&lt;/td&gt;
  &lt;td class=xl6524497 width=303 style='border-top:none;border-left:none;
  width:227pt'&gt;Converts a to a floating-point number.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 101.23;
  print(float(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;101.23&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;4&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;complex(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to a
  complex number.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print(complex(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10+0j&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;5&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;str(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to
  string.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print(str(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;6&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;repr(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts object
  a to an expression string.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print(repr(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;7&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;tuple(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to
  tuple.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print((a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;8&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;list(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to
  list.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print([a])&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;[10]&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;9&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;set(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to
  set.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a =
  set(&amp;quot;10&amp;quot;); print(a)&lt;/td&gt;
  &lt;td class=xl7124497 width=51 style='border-top:none;border-left:none;
  width:38pt'&gt;{'1', '0'}&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;10&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;dict(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to
  dictonary&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = dict(a=10);
  print(a)&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;{'a': 10}&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;11&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;chr(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts an
  integer to a character.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 97;
  print(chr(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;a&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;12&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;ord(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a
  single character to its integer value.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a =
  &amp;quot;J&amp;quot;; print(ord(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;74&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;13&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;hex(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts an
  integer to a hexadecimal string.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print(hex(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;0xa&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=21 style='height:15.75pt'&gt;
  &lt;td height=21 class=xl7224497 style='height:15.75pt;border-top:none'&gt;14&lt;/td&gt;
  &lt;td class=xl7324497 style='border-top:none;border-left:none'&gt;oct(a)&lt;/td&gt;
  &lt;td class=xl7324497 style='border-top:none;border-left:none'&gt;Converts an
  integer to an octal string.&lt;/td&gt;
  &lt;td class=xl7324497 style='border-top:none;border-left:none'&gt;a = 10;
  print(oct(a))&lt;/td&gt;
  &lt;td class=xl7424497 style='border-top:none;border-left:none'&gt;0o12&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
  &lt;tr height=0 style='display:none'&gt;
  &lt;td width=63 style='width:47pt'&gt;&lt;/td&gt;
  &lt;td width=77 style='width:58pt'&gt;&lt;/td&gt;
  &lt;td width=303 style='width:227pt'&gt;&lt;/td&gt;
  &lt;td width=162 style='width:122pt'&gt;&lt;/td&gt;
  &lt;td width=51 style='width:38pt'&gt;&lt;/td&gt;
 &lt;/tr&gt;
&lt;/table&gt;

==How to execute couple of instructions on console?==
You can execute couple of instructions on console using ;. Write Statement 1;Statement 2;......and then press ''Enter''.
{{#ev:youtube|https://youtu.be/CYQCYvLE22Y|250|right}}









==How to take input from the user?==
We can take input from the user using ''input'' function. For Example : You want the user to input variable ''x'', then write x=input(&quot;Enter the value of x&quot;) and execute. Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNkVLCxZw_jcgyS-bmrIVSP

And when the input you need is of data type other than string. You can do both the input function and data conversion in a single line.
For example:
Consider the program for letting in the patients
'''c=input(&quot;Enter (1/0)&quot;);d=int(c)'''

Instead of using it in two separate lines, combine it into a single line
'''c=int(input(&quot;Enter (1/0)&quot;))'''.

To get two inputs in same line with a space between them split() is used.

a,b=input(&quot;enter a&quot;).split(&quot;enter b&quot;)
----
[[#Top]]

==If statement==
If statement is used to execute set of two contrary statements based on a condition. 

===Syntax===
If (Condition):
    Statement 1
else:
    Statement 2

If 'Condition' is true then 'Statement 1' will be executed otherwise 'Statement 2' will be executed.

Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNhHmg3SkK1uiutigcAbH9K

==Loops==
[[#Top]]&lt;br&gt;
Loops in a programming languages are used to execute set of repetitive statements. For loop and while loop are used extensively to execute a set of looping instructions.

=== For loop Syntax ===
&lt;pre&gt;
for i in range(10): 
    Statement
&lt;/pre&gt;
range(10) indicate that values 0 to 9 will be assigned to the variable i and for each value of i the Statement will be executed, e.g.
&lt;pre&gt;
for i in range(10): 
    print(i)
&lt;/pre&gt;
Output will be
&lt;pre&gt;
0
1
2
3
4
5
6
7
8
9
&lt;/pre&gt;

[[#Top]]

=== While loop Syntax ===
&lt;pre&gt;
intialisation

while(condition):
   Statement
   increment/decrement
&lt;/pre&gt;
e.g.
&lt;pre&gt;
#initialization
i=0
while(i&lt;10): 
    print(i)
    i=i+1
&lt;/pre&gt;
Output will be:
&lt;pre&gt;
0
1
2
3
4
5
6
7
8
9
&lt;/pre&gt;
Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNbl5jkVrrw1E5XSvm3GiCI

[[#TOP]]
==Importance of Indentation in Python==
 &lt;p style=&quot;text-align:justify&quot;&gt;
Indentation is used to indicate to what block of statements belong. Indentation of blocks convey program structure in Python. Indentation in Python is used to refer a group/block of code/statements. In C++ we use { and } (curly brackets) to group a set of statements. But in Python, there are no such brackets used. Instead of such brackets used in other programming languages, we use indentation in Python.&lt;/p&gt;

Use tabs,instead of spaces for ease of writing code.

Wrong indentation can lead to syntax error, or makes your output wrong for your logic e.g.
&lt;pre&gt;
#IndentationError: expected an indented block
i=-1
if i&lt;0:
print(&quot;Test successful&quot;)#Wrong indentation 
else:    
    print(&quot;Test failed&quot;)
#Output: IndentationError: expected an indented block
&lt;/pre&gt;
---
&lt;pre&gt;
#Properly Indented code:
i=-1
if i&lt;0:
    print(&quot;Test successful&quot;)#Wrong indentation
else:    
    print(&quot;Test failed&quot;)
#Output:Test successful
&lt;/pre&gt;
---
Logic changed, so output changed, with improper indentation, e.g.
---
&lt;h3&gt;Code : 1&lt;/h3&gt;
&lt;pre&gt;
sum=0
for i in range(5):
    for j in range(5):
        sum+=i
print(sum, end=&quot; &quot;)
#Output: 50
&lt;/pre&gt;
        
&lt;h3&gt;Code : 2&lt;/h3&gt;
&lt;pre&gt;
for i in range(5):
    for j in range(5):
        print(end=&quot; &quot;)
    sum+=i
print(sum, end=&quot; &quot;)
#Output:                          10
&lt;/pre&gt;
{{#ev:youtube|https://youtu.be/pmavoW419Yc|250|right}}&lt;br&gt;

[[#Top]]

==Spyder IDE Black Screen Solution==

----

 This issue is because of ''Help'' screen which is by default open. 
 We need to close it. So here's how you do it-


===Method 1:===

Step 1-    Try by closing current pane for that,  &quot;''press ctrl+shift+F4''&quot;  wait for few seconds things will appear on screen.

Step 2-    If it so than on menu bar go to ''view &gt; panes &gt; help'' unchecked &quot;''Help''&quot; option.

Step 3-    Make sure that &quot;''Help''&quot; under ''view &gt; panes'' is permanently unchecked. And ''Editor, Ipython console, Variable explorer''  are checked. 


===Method 2:===

Step 1-    Open spyder.

Step 2-   On that black screen randomly ''Left click'' on spyder &quot;''Menu bar''&quot; area you will get menu drop downs, You have to find Drop down with &quot;''Panes''&quot; option.

Step 3-   On &quot;''Panes''&quot; drop down unchecked the &quot;''Help''&quot;.

Step 4-   Wait for few seconds Spyder view will appear.

Step 5 -  Make sure that ''&quot;Help&quot;'' under view&gt;panes is permanently unchecked. And ''Editor, Ipython console, variable explorer'' are checked.


[[#Top]]</text>
      <sha1>dbvllcmgtsbt7ik0r30b7c6hftgtmfp</sha1>
    </revision>
    <revision>
      <id>3688</id>
      <parentid>3687</parentid>
      <timestamp>2018-09-29T01:06:00Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* Introduction to Python */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="20438">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_2 Contributors of this page]
==Introduction to Python==
 &lt;p style=&quot;text-align:justify&quot;&gt;Python is a widely used programming language which allows programmers to write the program in fewer lines of code. It was designed by ''Guido van Rossum'' in 1991. Python uses an interpreter instead of compiler. Basically, the main difference between compiler and interpreter is that the compiler takes the code as 'whole' and compiles it. for example, in ''C'' language and on the other side in interpreter. For example: languages like Python. It interprets the written code 'line by line', and if somewhere error is found. It stops interpreting the code from there itself. Here, in our course we will be using ''Spyder IDE''. Spyder is an integrated development environment with editing options to assist the programmers in writing programs. Spyder IDE is divided into two panes, one is console and other one is where program is written.&lt;/p&gt;

&lt;p style=&quot;text-align:justify&quot;&gt;
Python works on different platforms (Windows, Mac, Linux, Raspberry Pi, etc).
Python has a simple syntax similar to the English language.
Python has syntax that allows developers to write programs with fewer lines than some other programming languages.
Python runs on an interpreter system, meaning that code can be executed as soon as it is written. This means that prototyping can be very quick.&lt;/p&gt;
Python can be treated in a procedural way, an object-orientated way or a functional way.

==Installing Anaconda==
[[#Top]]
This article is all about installing and troubleshooting Anaconda and Spyder on different platforms.

===Windows===
Step 1 -&gt; Download the installer from here 
 &lt;p style=&quot;text-align:justify&quot;&gt;
[https://www.anaconda.com/download/#windows Download Link]. Make sure that you download the version compatible to your operating system architecture. If you have a 64 bit OS then you can download either 64 bit of 32 bit, but if you have 32 bit OS then you should download the 32 bit version only.
&lt;/p&gt;
 &lt;p style=&quot;text-align:justify&quot;&gt;
Step 2 -&gt; Double click on the .exe file that you downloaded just now and follow the instructions. If you are not sure of the installation options then just choose the default.&lt;/p&gt;
 &lt;p style=&quot;text-align:justify&quot;&gt;
Step 3 -&gt; To test your installation, open cmd (go to Start -&gt; then type cmd in the search bar and hit enter). There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.&lt;/p&gt;

===Mac===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#macos Download Link].

Step 2 -&gt; Double click on the .pkg file that you just downloaded. If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

===Linux===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#linux Download Link].

Step 2 -&gt; Go to the folder where you downloaded the .sh file and type following command 

  '''bash Anaconda-latest-Linux-x86_64.sh'''

If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

==Troubleshooting Spyder==

[[#Top]]
 &lt;p style=&quot;text-align:justify&quot;&gt;
In most of the cases, it happens that Spyder is already running and you have initiated one more instance of it. Please make sure that spyder is not running already.
If you are on Linux OS, please launch spyder through terminal. Just open the terminal and type '''spyder''' and it will launch. When Spyder opens, make sure you see Anaconda with the version written on the Ipython console. If not, try changing the path of your anaconda. Follow these steps according to your OS version.&lt;/p&gt;

====Windows====
[https://stackoverflow.com/questions/44597662/conda-command-is-not-recognized-on-windows-10 Click Here]

====Linux====
[https://stackoverflow.com/questions/18675907/how-to-run-conda Click Here]

====Mac====
[https://stackoverflow.com/questions/35246386/conda-command-not-found Click Here]

In most of the cases relaunching Spyder works.
A more general Troubleshoot is present [https://github.com/spyder-ide/spyder/wiki/Troubleshooting-Guide-and-FAQ Here]

==How to run a program in Spyder IDE?==
Go to Run on the menu bar. Click Run-&gt;Run.

[[#TOP]]
==Print statements==
Print statements help to display output on console. 
{{#ev:youtube|https://youtu.be/gECkqaOwyt0|250|right}}

===Syntax===
print()

===How to print a message?===
In order to print a message in Python, write &lt;pre&gt;print(&quot;message&quot;)&lt;/pre&gt;.
Single, double, triple quote can be used print()

'''Example:'''

'''Single Quote'''
&lt;pre&gt;
print('Hello')  
Output: Hello
&lt;/pre&gt;
'''Double Quote'''
&lt;pre&gt;
print(&quot;Hello&quot;)  
Output: Hello
&lt;/pre&gt;
'''Quote within quote'''
&lt;pre&gt;print('Is &quot;Ram&quot; a good boy?')  
Output: Is &quot;Ram&quot; a good boy?&lt;/pre&gt;

[[#TOP]]

==Escape sequences with strings==

We can use escape sequence within strings to make output more presentable.

'''\n'''  : It will move to next line.

'''\t'''  : It will add tab space(5space)

'''\a'''  : It will play system sound once.

'''Example:'''

&lt;pre&gt;print(&quot;Hi, \n How are you?&quot;)&lt;/pre&gt;

Output: 

Hi,

How are you?

&lt;pre&gt;print(&quot;Hi, \t How are you?&quot;)&lt;/pre&gt;

Output: 

Hi, &lt;5 spaces&gt; How are you?

[[File:Escape_Sequence.jpg]]

==Variables==
[[#Top]]
&lt;pre&gt;
Variables are used to store some values. Values can be strings, integers or decimal values.  

Variable Name Rules:
1. Variable name should start with letter or underscore. Variable name cant start with number.
Example:
Valid: JOC, WIKI, JOC_WIKI, _JOC
Invalid: 1JOC, 123WIKI, 0_WIKI

2. Remaining letter other then first one can contain number, underscore.
Example:
JOC1234, WIKI012_1332

3. Variable names are case sensitivities.
Example:
JOC, jOC, joC all are different varibles. 

&lt;/pre&gt;
{{#ev:youtube|https://youtu.be/60iAXH1sm-Y|250|right}}
===How to print a variable?===
In order to print the value of a variable in python, first initialize the variable and then call it where ever you wanna use it. 
&lt;pre&gt;print(variable_name)&lt;/pre&gt;

&lt;pre&gt;For example :
x=2                # x is viable here
print(x)           # calling variable x with print function

a = &quot;JOC&quot;          # a is variable here
b = &quot;_WIKI&quot;        # b is variable here
c = a + b          # c is variable here which will provide addition of variable a and b
&lt;/pre&gt;

===Some facts about Variables===
* If you want to print variable name with a message, you can use , operator. For example : I want to print Hello Simran and Simran has been stored in a variable called ''name''.
  name=&quot;Simran&quot;
  print(&quot;Hello&quot;,name)
* If you change the value of a variable, it will store the latest value. For example :
  name=&quot;Simran&quot;
  name=&quot;Amit&quot;
  If you will execute the command ''print(name)'', Amit will be displayed.
* You can perform operations like addition, subtraction etc only on integral variables.

===Variables Types and Conversion===
&lt;pre&gt;Variable can be decimal, integer and decimal. And they can be inter covered with the help of conversion functions.

Example:
JOC = 5           Save in Memory as 5       # We have variable with name JOC having value 5 here.
JOC = int(5)      Save in Memory as 5       # Here Variable JOC holding integer value of 5. 
JOC = flot(5)     Save in Memory as 5.0     # Here variable JOC holding flot value of 5
JOC = str(5)      Save in Memory as &quot;5&quot;     # Here variable JOC holding string value of 5 or We can say 5 will be treated as string here.
JOC = complex(5)  Save in Memory as (5+0j)  # Here variable JOC holding complex value of 5.
JOC = oct(5)      Save in Memory as 012     # Here variable JOC holding octal representation of 5.
JOC = hex(5)      Save in Memory as 0xa     # Here variable JOC holding hexadecimal representation of 5

There are many more function available in Python. You can convert variable as per your requirement.
&lt;/pre&gt;


&lt;h1 style='color:black;font-family:Calibri;font-size:14.0pt;font-weight:800;
font-style:normal'&gt;Conversion Table with Eample&lt;/h1&gt;

&lt;table border=0 cellpadding=0 cellspacing=0 width=656 style='border-collapse:
 collapse;table-layout:fixed;width:492pt'&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6624497 width=63 style='height:15.0pt;width:47pt'&gt;Serial
  No&lt;/td&gt;
  &lt;td class=xl6724497 width=77 style='border-left:none;width:58pt'&gt;Function&lt;/td&gt;
  &lt;td class=xl6724497 width=303 style='border-left:none;width:227pt'&gt;Description&lt;/td&gt;
  &lt;td class=xl6724497 width=162 style='border-left:none;width:122pt'&gt;Example&lt;/td&gt;
  &lt;td class=xl6824497 width=51 style='border-left:none;width:38pt'&gt;Output&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;1&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;int(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to an
  integer.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10.12;
  print(int(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;2&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;long(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a&lt;span
  style='mso-spacerun:yes'&gt;  &lt;/span&gt;to a long integer&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10.12;
  print(long(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;3&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;float(a)&lt;/td&gt;
  &lt;td class=xl6524497 width=303 style='border-top:none;border-left:none;
  width:227pt'&gt;Converts a to a floating-point number.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 101.23;
  print(float(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;101.23&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;4&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;complex(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to a
  complex number.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print(complex(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10+0j&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;5&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;str(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to
  string.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print(str(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;6&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;repr(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts object
  a to an expression string.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print(repr(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;7&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;tuple(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to
  tuple.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print((a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;8&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;list(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to
  list.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print([a])&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;[10]&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;9&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;set(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to
  set.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a =
  set(&amp;quot;10&amp;quot;); print(a)&lt;/td&gt;
  &lt;td class=xl7124497 width=51 style='border-top:none;border-left:none;
  width:38pt'&gt;{'1', '0'}&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;10&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;dict(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to
  dictonary&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = dict(a=10);
  print(a)&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;{'a': 10}&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;11&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;chr(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts an
  integer to a character.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 97;
  print(chr(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;a&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;12&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;ord(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a
  single character to its integer value.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a =
  &amp;quot;J&amp;quot;; print(ord(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;74&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;13&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;hex(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts an
  integer to a hexadecimal string.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print(hex(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;0xa&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=21 style='height:15.75pt'&gt;
  &lt;td height=21 class=xl7224497 style='height:15.75pt;border-top:none'&gt;14&lt;/td&gt;
  &lt;td class=xl7324497 style='border-top:none;border-left:none'&gt;oct(a)&lt;/td&gt;
  &lt;td class=xl7324497 style='border-top:none;border-left:none'&gt;Converts an
  integer to an octal string.&lt;/td&gt;
  &lt;td class=xl7324497 style='border-top:none;border-left:none'&gt;a = 10;
  print(oct(a))&lt;/td&gt;
  &lt;td class=xl7424497 style='border-top:none;border-left:none'&gt;0o12&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
  &lt;tr height=0 style='display:none'&gt;
  &lt;td width=63 style='width:47pt'&gt;&lt;/td&gt;
  &lt;td width=77 style='width:58pt'&gt;&lt;/td&gt;
  &lt;td width=303 style='width:227pt'&gt;&lt;/td&gt;
  &lt;td width=162 style='width:122pt'&gt;&lt;/td&gt;
  &lt;td width=51 style='width:38pt'&gt;&lt;/td&gt;
 &lt;/tr&gt;
&lt;/table&gt;

==How to execute couple of instructions on console?==
You can execute couple of instructions on console using ;. Write Statement 1;Statement 2;......and then press ''Enter''.
{{#ev:youtube|https://youtu.be/CYQCYvLE22Y|250|right}}









==How to take input from the user?==
We can take input from the user using ''input'' function. For Example : You want the user to input variable ''x'', then write x=input(&quot;Enter the value of x&quot;) and execute. Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNkVLCxZw_jcgyS-bmrIVSP

And when the input you need is of data type other than string. You can do both the input function and data conversion in a single line.
For example:
Consider the program for letting in the patients
'''c=input(&quot;Enter (1/0)&quot;);d=int(c)'''

Instead of using it in two separate lines, combine it into a single line
'''c=int(input(&quot;Enter (1/0)&quot;))'''.

To get two inputs in same line with a space between them split() is used.

a,b=input(&quot;enter a&quot;).split(&quot;enter b&quot;)
----
[[#Top]]

==If statement==
If statement is used to execute set of two contrary statements based on a condition. 

===Syntax===
If (Condition):
    Statement 1
else:
    Statement 2

If 'Condition' is true then 'Statement 1' will be executed otherwise 'Statement 2' will be executed.

Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNhHmg3SkK1uiutigcAbH9K

==Loops==
[[#Top]]&lt;br&gt;
Loops in a programming languages are used to execute set of repetitive statements. For loop and while loop are used extensively to execute a set of looping instructions.

=== For loop Syntax ===
&lt;pre&gt;
for i in range(10): 
    Statement
&lt;/pre&gt;
range(10) indicate that values 0 to 9 will be assigned to the variable i and for each value of i the Statement will be executed, e.g.
&lt;pre&gt;
for i in range(10): 
    print(i)
&lt;/pre&gt;
Output will be
&lt;pre&gt;
0
1
2
3
4
5
6
7
8
9
&lt;/pre&gt;

[[#Top]]

=== While loop Syntax ===
&lt;pre&gt;
intialisation

while(condition):
   Statement
   increment/decrement
&lt;/pre&gt;
e.g.
&lt;pre&gt;
#initialization
i=0
while(i&lt;10): 
    print(i)
    i=i+1
&lt;/pre&gt;
Output will be:
&lt;pre&gt;
0
1
2
3
4
5
6
7
8
9
&lt;/pre&gt;
Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNbl5jkVrrw1E5XSvm3GiCI

[[#TOP]]
==Importance of Indentation in Python==
 &lt;p style=&quot;text-align:justify&quot;&gt;
Indentation is used to indicate to what block of statements belong. Indentation of blocks convey program structure in Python. Indentation in Python is used to refer a group/block of code/statements. In C++ we use { and } (curly brackets) to group a set of statements. But in Python, there are no such brackets used. Instead of such brackets used in other programming languages, we use indentation in Python.&lt;/p&gt;

Use tabs,instead of spaces for ease of writing code.

Wrong indentation can lead to syntax error, or makes your output wrong for your logic e.g.
&lt;pre&gt;
#IndentationError: expected an indented block
i=-1
if i&lt;0:
print(&quot;Test successful&quot;)#Wrong indentation 
else:    
    print(&quot;Test failed&quot;)
#Output: IndentationError: expected an indented block
&lt;/pre&gt;
---
&lt;pre&gt;
#Properly Indented code:
i=-1
if i&lt;0:
    print(&quot;Test successful&quot;)#Wrong indentation
else:    
    print(&quot;Test failed&quot;)
#Output:Test successful
&lt;/pre&gt;
---
Logic changed, so output changed, with improper indentation, e.g.
---
&lt;h3&gt;Code : 1&lt;/h3&gt;
&lt;pre&gt;
sum=0
for i in range(5):
    for j in range(5):
        sum+=i
print(sum, end=&quot; &quot;)
#Output: 50
&lt;/pre&gt;
        
&lt;h3&gt;Code : 2&lt;/h3&gt;
&lt;pre&gt;
for i in range(5):
    for j in range(5):
        print(end=&quot; &quot;)
    sum+=i
print(sum, end=&quot; &quot;)
#Output:                          10
&lt;/pre&gt;
{{#ev:youtube|https://youtu.be/pmavoW419Yc|250|right}}&lt;br&gt;

[[#Top]]

==Spyder IDE Black Screen Solution==

----

 This issue is because of ''Help'' screen which is by default open. 
 We need to close it. So here's how you do it-


===Method 1:===

Step 1-    Try by closing current pane for that,  &quot;''press ctrl+shift+F4''&quot;  wait for few seconds things will appear on screen.

Step 2-    If it so than on menu bar go to ''view &gt; panes &gt; help'' unchecked &quot;''Help''&quot; option.

Step 3-    Make sure that &quot;''Help''&quot; under ''view &gt; panes'' is permanently unchecked. And ''Editor, Ipython console, Variable explorer''  are checked. 


===Method 2:===

Step 1-    Open spyder.

Step 2-   On that black screen randomly ''Left click'' on spyder &quot;''Menu bar''&quot; area you will get menu drop downs, You have to find Drop down with &quot;''Panes''&quot; option.

Step 3-   On &quot;''Panes''&quot; drop down unchecked the &quot;''Help''&quot;.

Step 4-   Wait for few seconds Spyder view will appear.

Step 5 -  Make sure that ''&quot;Help&quot;'' under view&gt;panes is permanently unchecked. And ''Editor, Ipython console, variable explorer'' are checked.


[[#Top]]</text>
      <sha1>1rwow2ne7lhc0taqyao6bl3sloey84y</sha1>
    </revision>
    <revision>
      <id>3689</id>
      <parentid>3688</parentid>
      <timestamp>2018-09-29T01:06:21Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* Installing Anaconda */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="20439">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_2 Contributors of this page]
==Introduction to Python==
 &lt;p style=&quot;text-align:justify&quot;&gt;Python is a widely used programming language which allows programmers to write the program in fewer lines of code. It was designed by ''Guido van Rossum'' in 1991. Python uses an interpreter instead of compiler. Basically, the main difference between compiler and interpreter is that the compiler takes the code as 'whole' and compiles it. for example, in ''C'' language and on the other side in interpreter. For example: languages like Python. It interprets the written code 'line by line', and if somewhere error is found. It stops interpreting the code from there itself. Here, in our course we will be using ''Spyder IDE''. Spyder is an integrated development environment with editing options to assist the programmers in writing programs. Spyder IDE is divided into two panes, one is console and other one is where program is written.&lt;/p&gt;

&lt;p style=&quot;text-align:justify&quot;&gt;
Python works on different platforms (Windows, Mac, Linux, Raspberry Pi, etc).
Python has a simple syntax similar to the English language.
Python has syntax that allows developers to write programs with fewer lines than some other programming languages.
Python runs on an interpreter system, meaning that code can be executed as soon as it is written. This means that prototyping can be very quick.&lt;/p&gt;
Python can be treated in a procedural way, an object-orientated way or a functional way.

==Installing Anaconda==
[[#Top]]

This article is all about installing and troubleshooting Anaconda and Spyder on different platforms.

===Windows===
Step 1 -&gt; Download the installer from here 
 &lt;p style=&quot;text-align:justify&quot;&gt;
[https://www.anaconda.com/download/#windows Download Link]. Make sure that you download the version compatible to your operating system architecture. If you have a 64 bit OS then you can download either 64 bit of 32 bit, but if you have 32 bit OS then you should download the 32 bit version only.
&lt;/p&gt;
 &lt;p style=&quot;text-align:justify&quot;&gt;
Step 2 -&gt; Double click on the .exe file that you downloaded just now and follow the instructions. If you are not sure of the installation options then just choose the default.&lt;/p&gt;
 &lt;p style=&quot;text-align:justify&quot;&gt;
Step 3 -&gt; To test your installation, open cmd (go to Start -&gt; then type cmd in the search bar and hit enter). There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.&lt;/p&gt;

===Mac===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#macos Download Link].

Step 2 -&gt; Double click on the .pkg file that you just downloaded. If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

===Linux===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#linux Download Link].

Step 2 -&gt; Go to the folder where you downloaded the .sh file and type following command 

  '''bash Anaconda-latest-Linux-x86_64.sh'''

If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

==Troubleshooting Spyder==

[[#Top]]
 &lt;p style=&quot;text-align:justify&quot;&gt;
In most of the cases, it happens that Spyder is already running and you have initiated one more instance of it. Please make sure that spyder is not running already.
If you are on Linux OS, please launch spyder through terminal. Just open the terminal and type '''spyder''' and it will launch. When Spyder opens, make sure you see Anaconda with the version written on the Ipython console. If not, try changing the path of your anaconda. Follow these steps according to your OS version.&lt;/p&gt;

====Windows====
[https://stackoverflow.com/questions/44597662/conda-command-is-not-recognized-on-windows-10 Click Here]

====Linux====
[https://stackoverflow.com/questions/18675907/how-to-run-conda Click Here]

====Mac====
[https://stackoverflow.com/questions/35246386/conda-command-not-found Click Here]

In most of the cases relaunching Spyder works.
A more general Troubleshoot is present [https://github.com/spyder-ide/spyder/wiki/Troubleshooting-Guide-and-FAQ Here]

==How to run a program in Spyder IDE?==
Go to Run on the menu bar. Click Run-&gt;Run.

[[#TOP]]
==Print statements==
Print statements help to display output on console. 
{{#ev:youtube|https://youtu.be/gECkqaOwyt0|250|right}}

===Syntax===
print()

===How to print a message?===
In order to print a message in Python, write &lt;pre&gt;print(&quot;message&quot;)&lt;/pre&gt;.
Single, double, triple quote can be used print()

'''Example:'''

'''Single Quote'''
&lt;pre&gt;
print('Hello')  
Output: Hello
&lt;/pre&gt;
'''Double Quote'''
&lt;pre&gt;
print(&quot;Hello&quot;)  
Output: Hello
&lt;/pre&gt;
'''Quote within quote'''
&lt;pre&gt;print('Is &quot;Ram&quot; a good boy?')  
Output: Is &quot;Ram&quot; a good boy?&lt;/pre&gt;

[[#TOP]]

==Escape sequences with strings==

We can use escape sequence within strings to make output more presentable.

'''\n'''  : It will move to next line.

'''\t'''  : It will add tab space(5space)

'''\a'''  : It will play system sound once.

'''Example:'''

&lt;pre&gt;print(&quot;Hi, \n How are you?&quot;)&lt;/pre&gt;

Output: 

Hi,

How are you?

&lt;pre&gt;print(&quot;Hi, \t How are you?&quot;)&lt;/pre&gt;

Output: 

Hi, &lt;5 spaces&gt; How are you?

[[File:Escape_Sequence.jpg]]

==Variables==
[[#Top]]
&lt;pre&gt;
Variables are used to store some values. Values can be strings, integers or decimal values.  

Variable Name Rules:
1. Variable name should start with letter or underscore. Variable name cant start with number.
Example:
Valid: JOC, WIKI, JOC_WIKI, _JOC
Invalid: 1JOC, 123WIKI, 0_WIKI

2. Remaining letter other then first one can contain number, underscore.
Example:
JOC1234, WIKI012_1332

3. Variable names are case sensitivities.
Example:
JOC, jOC, joC all are different varibles. 

&lt;/pre&gt;
{{#ev:youtube|https://youtu.be/60iAXH1sm-Y|250|right}}
===How to print a variable?===
In order to print the value of a variable in python, first initialize the variable and then call it where ever you wanna use it. 
&lt;pre&gt;print(variable_name)&lt;/pre&gt;

&lt;pre&gt;For example :
x=2                # x is viable here
print(x)           # calling variable x with print function

a = &quot;JOC&quot;          # a is variable here
b = &quot;_WIKI&quot;        # b is variable here
c = a + b          # c is variable here which will provide addition of variable a and b
&lt;/pre&gt;

===Some facts about Variables===
* If you want to print variable name with a message, you can use , operator. For example : I want to print Hello Simran and Simran has been stored in a variable called ''name''.
  name=&quot;Simran&quot;
  print(&quot;Hello&quot;,name)
* If you change the value of a variable, it will store the latest value. For example :
  name=&quot;Simran&quot;
  name=&quot;Amit&quot;
  If you will execute the command ''print(name)'', Amit will be displayed.
* You can perform operations like addition, subtraction etc only on integral variables.

===Variables Types and Conversion===
&lt;pre&gt;Variable can be decimal, integer and decimal. And they can be inter covered with the help of conversion functions.

Example:
JOC = 5           Save in Memory as 5       # We have variable with name JOC having value 5 here.
JOC = int(5)      Save in Memory as 5       # Here Variable JOC holding integer value of 5. 
JOC = flot(5)     Save in Memory as 5.0     # Here variable JOC holding flot value of 5
JOC = str(5)      Save in Memory as &quot;5&quot;     # Here variable JOC holding string value of 5 or We can say 5 will be treated as string here.
JOC = complex(5)  Save in Memory as (5+0j)  # Here variable JOC holding complex value of 5.
JOC = oct(5)      Save in Memory as 012     # Here variable JOC holding octal representation of 5.
JOC = hex(5)      Save in Memory as 0xa     # Here variable JOC holding hexadecimal representation of 5

There are many more function available in Python. You can convert variable as per your requirement.
&lt;/pre&gt;


&lt;h1 style='color:black;font-family:Calibri;font-size:14.0pt;font-weight:800;
font-style:normal'&gt;Conversion Table with Eample&lt;/h1&gt;

&lt;table border=0 cellpadding=0 cellspacing=0 width=656 style='border-collapse:
 collapse;table-layout:fixed;width:492pt'&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6624497 width=63 style='height:15.0pt;width:47pt'&gt;Serial
  No&lt;/td&gt;
  &lt;td class=xl6724497 width=77 style='border-left:none;width:58pt'&gt;Function&lt;/td&gt;
  &lt;td class=xl6724497 width=303 style='border-left:none;width:227pt'&gt;Description&lt;/td&gt;
  &lt;td class=xl6724497 width=162 style='border-left:none;width:122pt'&gt;Example&lt;/td&gt;
  &lt;td class=xl6824497 width=51 style='border-left:none;width:38pt'&gt;Output&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;1&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;int(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to an
  integer.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10.12;
  print(int(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;2&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;long(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a&lt;span
  style='mso-spacerun:yes'&gt;  &lt;/span&gt;to a long integer&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10.12;
  print(long(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;3&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;float(a)&lt;/td&gt;
  &lt;td class=xl6524497 width=303 style='border-top:none;border-left:none;
  width:227pt'&gt;Converts a to a floating-point number.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 101.23;
  print(float(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;101.23&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;4&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;complex(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to a
  complex number.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print(complex(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10+0j&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;5&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;str(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to
  string.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print(str(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;6&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;repr(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts object
  a to an expression string.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print(repr(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;7&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;tuple(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to
  tuple.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print((a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;8&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;list(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to
  list.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print([a])&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;[10]&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;9&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;set(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to
  set.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a =
  set(&amp;quot;10&amp;quot;); print(a)&lt;/td&gt;
  &lt;td class=xl7124497 width=51 style='border-top:none;border-left:none;
  width:38pt'&gt;{'1', '0'}&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;10&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;dict(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to
  dictonary&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = dict(a=10);
  print(a)&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;{'a': 10}&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;11&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;chr(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts an
  integer to a character.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 97;
  print(chr(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;a&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;12&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;ord(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a
  single character to its integer value.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a =
  &amp;quot;J&amp;quot;; print(ord(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;74&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;13&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;hex(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts an
  integer to a hexadecimal string.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print(hex(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;0xa&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=21 style='height:15.75pt'&gt;
  &lt;td height=21 class=xl7224497 style='height:15.75pt;border-top:none'&gt;14&lt;/td&gt;
  &lt;td class=xl7324497 style='border-top:none;border-left:none'&gt;oct(a)&lt;/td&gt;
  &lt;td class=xl7324497 style='border-top:none;border-left:none'&gt;Converts an
  integer to an octal string.&lt;/td&gt;
  &lt;td class=xl7324497 style='border-top:none;border-left:none'&gt;a = 10;
  print(oct(a))&lt;/td&gt;
  &lt;td class=xl7424497 style='border-top:none;border-left:none'&gt;0o12&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
  &lt;tr height=0 style='display:none'&gt;
  &lt;td width=63 style='width:47pt'&gt;&lt;/td&gt;
  &lt;td width=77 style='width:58pt'&gt;&lt;/td&gt;
  &lt;td width=303 style='width:227pt'&gt;&lt;/td&gt;
  &lt;td width=162 style='width:122pt'&gt;&lt;/td&gt;
  &lt;td width=51 style='width:38pt'&gt;&lt;/td&gt;
 &lt;/tr&gt;
&lt;/table&gt;

==How to execute couple of instructions on console?==
You can execute couple of instructions on console using ;. Write Statement 1;Statement 2;......and then press ''Enter''.
{{#ev:youtube|https://youtu.be/CYQCYvLE22Y|250|right}}









==How to take input from the user?==
We can take input from the user using ''input'' function. For Example : You want the user to input variable ''x'', then write x=input(&quot;Enter the value of x&quot;) and execute. Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNkVLCxZw_jcgyS-bmrIVSP

And when the input you need is of data type other than string. You can do both the input function and data conversion in a single line.
For example:
Consider the program for letting in the patients
'''c=input(&quot;Enter (1/0)&quot;);d=int(c)'''

Instead of using it in two separate lines, combine it into a single line
'''c=int(input(&quot;Enter (1/0)&quot;))'''.

To get two inputs in same line with a space between them split() is used.

a,b=input(&quot;enter a&quot;).split(&quot;enter b&quot;)
----
[[#Top]]

==If statement==
If statement is used to execute set of two contrary statements based on a condition. 

===Syntax===
If (Condition):
    Statement 1
else:
    Statement 2

If 'Condition' is true then 'Statement 1' will be executed otherwise 'Statement 2' will be executed.

Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNhHmg3SkK1uiutigcAbH9K

==Loops==
[[#Top]]&lt;br&gt;
Loops in a programming languages are used to execute set of repetitive statements. For loop and while loop are used extensively to execute a set of looping instructions.

=== For loop Syntax ===
&lt;pre&gt;
for i in range(10): 
    Statement
&lt;/pre&gt;
range(10) indicate that values 0 to 9 will be assigned to the variable i and for each value of i the Statement will be executed, e.g.
&lt;pre&gt;
for i in range(10): 
    print(i)
&lt;/pre&gt;
Output will be
&lt;pre&gt;
0
1
2
3
4
5
6
7
8
9
&lt;/pre&gt;

[[#Top]]

=== While loop Syntax ===
&lt;pre&gt;
intialisation

while(condition):
   Statement
   increment/decrement
&lt;/pre&gt;
e.g.
&lt;pre&gt;
#initialization
i=0
while(i&lt;10): 
    print(i)
    i=i+1
&lt;/pre&gt;
Output will be:
&lt;pre&gt;
0
1
2
3
4
5
6
7
8
9
&lt;/pre&gt;
Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNbl5jkVrrw1E5XSvm3GiCI

[[#TOP]]
==Importance of Indentation in Python==
 &lt;p style=&quot;text-align:justify&quot;&gt;
Indentation is used to indicate to what block of statements belong. Indentation of blocks convey program structure in Python. Indentation in Python is used to refer a group/block of code/statements. In C++ we use { and } (curly brackets) to group a set of statements. But in Python, there are no such brackets used. Instead of such brackets used in other programming languages, we use indentation in Python.&lt;/p&gt;

Use tabs,instead of spaces for ease of writing code.

Wrong indentation can lead to syntax error, or makes your output wrong for your logic e.g.
&lt;pre&gt;
#IndentationError: expected an indented block
i=-1
if i&lt;0:
print(&quot;Test successful&quot;)#Wrong indentation 
else:    
    print(&quot;Test failed&quot;)
#Output: IndentationError: expected an indented block
&lt;/pre&gt;
---
&lt;pre&gt;
#Properly Indented code:
i=-1
if i&lt;0:
    print(&quot;Test successful&quot;)#Wrong indentation
else:    
    print(&quot;Test failed&quot;)
#Output:Test successful
&lt;/pre&gt;
---
Logic changed, so output changed, with improper indentation, e.g.
---
&lt;h3&gt;Code : 1&lt;/h3&gt;
&lt;pre&gt;
sum=0
for i in range(5):
    for j in range(5):
        sum+=i
print(sum, end=&quot; &quot;)
#Output: 50
&lt;/pre&gt;
        
&lt;h3&gt;Code : 2&lt;/h3&gt;
&lt;pre&gt;
for i in range(5):
    for j in range(5):
        print(end=&quot; &quot;)
    sum+=i
print(sum, end=&quot; &quot;)
#Output:                          10
&lt;/pre&gt;
{{#ev:youtube|https://youtu.be/pmavoW419Yc|250|right}}&lt;br&gt;

[[#Top]]

==Spyder IDE Black Screen Solution==

----

 This issue is because of ''Help'' screen which is by default open. 
 We need to close it. So here's how you do it-


===Method 1:===

Step 1-    Try by closing current pane for that,  &quot;''press ctrl+shift+F4''&quot;  wait for few seconds things will appear on screen.

Step 2-    If it so than on menu bar go to ''view &gt; panes &gt; help'' unchecked &quot;''Help''&quot; option.

Step 3-    Make sure that &quot;''Help''&quot; under ''view &gt; panes'' is permanently unchecked. And ''Editor, Ipython console, Variable explorer''  are checked. 


===Method 2:===

Step 1-    Open spyder.

Step 2-   On that black screen randomly ''Left click'' on spyder &quot;''Menu bar''&quot; area you will get menu drop downs, You have to find Drop down with &quot;''Panes''&quot; option.

Step 3-   On &quot;''Panes''&quot; drop down unchecked the &quot;''Help''&quot;.

Step 4-   Wait for few seconds Spyder view will appear.

Step 5 -  Make sure that ''&quot;Help&quot;'' under view&gt;panes is permanently unchecked. And ''Editor, Ipython console, variable explorer'' are checked.


[[#Top]]</text>
      <sha1>g3txwthlzl7oixygcn85v65rvx0nkzo</sha1>
    </revision>
    <revision>
      <id>3690</id>
      <parentid>3689</parentid>
      <timestamp>2018-09-29T01:07:38Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* How to run a program in Spyder IDE? */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="20440">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_2 Contributors of this page]
==Introduction to Python==
 &lt;p style=&quot;text-align:justify&quot;&gt;Python is a widely used programming language which allows programmers to write the program in fewer lines of code. It was designed by ''Guido van Rossum'' in 1991. Python uses an interpreter instead of compiler. Basically, the main difference between compiler and interpreter is that the compiler takes the code as 'whole' and compiles it. for example, in ''C'' language and on the other side in interpreter. For example: languages like Python. It interprets the written code 'line by line', and if somewhere error is found. It stops interpreting the code from there itself. Here, in our course we will be using ''Spyder IDE''. Spyder is an integrated development environment with editing options to assist the programmers in writing programs. Spyder IDE is divided into two panes, one is console and other one is where program is written.&lt;/p&gt;

&lt;p style=&quot;text-align:justify&quot;&gt;
Python works on different platforms (Windows, Mac, Linux, Raspberry Pi, etc).
Python has a simple syntax similar to the English language.
Python has syntax that allows developers to write programs with fewer lines than some other programming languages.
Python runs on an interpreter system, meaning that code can be executed as soon as it is written. This means that prototyping can be very quick.&lt;/p&gt;
Python can be treated in a procedural way, an object-orientated way or a functional way.

==Installing Anaconda==
[[#Top]]

This article is all about installing and troubleshooting Anaconda and Spyder on different platforms.

===Windows===
Step 1 -&gt; Download the installer from here 
 &lt;p style=&quot;text-align:justify&quot;&gt;
[https://www.anaconda.com/download/#windows Download Link]. Make sure that you download the version compatible to your operating system architecture. If you have a 64 bit OS then you can download either 64 bit of 32 bit, but if you have 32 bit OS then you should download the 32 bit version only.
&lt;/p&gt;
 &lt;p style=&quot;text-align:justify&quot;&gt;
Step 2 -&gt; Double click on the .exe file that you downloaded just now and follow the instructions. If you are not sure of the installation options then just choose the default.&lt;/p&gt;
 &lt;p style=&quot;text-align:justify&quot;&gt;
Step 3 -&gt; To test your installation, open cmd (go to Start -&gt; then type cmd in the search bar and hit enter). There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.&lt;/p&gt;

===Mac===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#macos Download Link].

Step 2 -&gt; Double click on the .pkg file that you just downloaded. If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

===Linux===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#linux Download Link].

Step 2 -&gt; Go to the folder where you downloaded the .sh file and type following command 

  '''bash Anaconda-latest-Linux-x86_64.sh'''

If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

==Troubleshooting Spyder==

[[#Top]]
 &lt;p style=&quot;text-align:justify&quot;&gt;
In most of the cases, it happens that Spyder is already running and you have initiated one more instance of it. Please make sure that spyder is not running already.
If you are on Linux OS, please launch spyder through terminal. Just open the terminal and type '''spyder''' and it will launch. When Spyder opens, make sure you see Anaconda with the version written on the Ipython console. If not, try changing the path of your anaconda. Follow these steps according to your OS version.&lt;/p&gt;

====Windows====
[https://stackoverflow.com/questions/44597662/conda-command-is-not-recognized-on-windows-10 Click Here]

====Linux====
[https://stackoverflow.com/questions/18675907/how-to-run-conda Click Here]

====Mac====
[https://stackoverflow.com/questions/35246386/conda-command-not-found Click Here]

In most of the cases relaunching Spyder works.
A more general Troubleshoot is present [https://github.com/spyder-ide/spyder/wiki/Troubleshooting-Guide-and-FAQ Here]

==How to run a program in Spyder IDE?==
Go to Run on the menu bar. Click Run-&gt;Run.

[[#Top]]

==Print statements==
Print statements help to display output on console. 
{{#ev:youtube|https://youtu.be/gECkqaOwyt0|250|right}}

===Syntax===
print()

===How to print a message?===
In order to print a message in Python, write &lt;pre&gt;print(&quot;message&quot;)&lt;/pre&gt;.
Single, double, triple quote can be used print()

'''Example:'''

'''Single Quote'''
&lt;pre&gt;
print('Hello')  
Output: Hello
&lt;/pre&gt;
'''Double Quote'''
&lt;pre&gt;
print(&quot;Hello&quot;)  
Output: Hello
&lt;/pre&gt;
'''Quote within quote'''
&lt;pre&gt;print('Is &quot;Ram&quot; a good boy?')  
Output: Is &quot;Ram&quot; a good boy?&lt;/pre&gt;

[[#TOP]]

==Escape sequences with strings==

We can use escape sequence within strings to make output more presentable.

'''\n'''  : It will move to next line.

'''\t'''  : It will add tab space(5space)

'''\a'''  : It will play system sound once.

'''Example:'''

&lt;pre&gt;print(&quot;Hi, \n How are you?&quot;)&lt;/pre&gt;

Output: 

Hi,

How are you?

&lt;pre&gt;print(&quot;Hi, \t How are you?&quot;)&lt;/pre&gt;

Output: 

Hi, &lt;5 spaces&gt; How are you?

[[File:Escape_Sequence.jpg]]

==Variables==
[[#Top]]
&lt;pre&gt;
Variables are used to store some values. Values can be strings, integers or decimal values.  

Variable Name Rules:
1. Variable name should start with letter or underscore. Variable name cant start with number.
Example:
Valid: JOC, WIKI, JOC_WIKI, _JOC
Invalid: 1JOC, 123WIKI, 0_WIKI

2. Remaining letter other then first one can contain number, underscore.
Example:
JOC1234, WIKI012_1332

3. Variable names are case sensitivities.
Example:
JOC, jOC, joC all are different varibles. 

&lt;/pre&gt;
{{#ev:youtube|https://youtu.be/60iAXH1sm-Y|250|right}}
===How to print a variable?===
In order to print the value of a variable in python, first initialize the variable and then call it where ever you wanna use it. 
&lt;pre&gt;print(variable_name)&lt;/pre&gt;

&lt;pre&gt;For example :
x=2                # x is viable here
print(x)           # calling variable x with print function

a = &quot;JOC&quot;          # a is variable here
b = &quot;_WIKI&quot;        # b is variable here
c = a + b          # c is variable here which will provide addition of variable a and b
&lt;/pre&gt;

===Some facts about Variables===
* If you want to print variable name with a message, you can use , operator. For example : I want to print Hello Simran and Simran has been stored in a variable called ''name''.
  name=&quot;Simran&quot;
  print(&quot;Hello&quot;,name)
* If you change the value of a variable, it will store the latest value. For example :
  name=&quot;Simran&quot;
  name=&quot;Amit&quot;
  If you will execute the command ''print(name)'', Amit will be displayed.
* You can perform operations like addition, subtraction etc only on integral variables.

===Variables Types and Conversion===
&lt;pre&gt;Variable can be decimal, integer and decimal. And they can be inter covered with the help of conversion functions.

Example:
JOC = 5           Save in Memory as 5       # We have variable with name JOC having value 5 here.
JOC = int(5)      Save in Memory as 5       # Here Variable JOC holding integer value of 5. 
JOC = flot(5)     Save in Memory as 5.0     # Here variable JOC holding flot value of 5
JOC = str(5)      Save in Memory as &quot;5&quot;     # Here variable JOC holding string value of 5 or We can say 5 will be treated as string here.
JOC = complex(5)  Save in Memory as (5+0j)  # Here variable JOC holding complex value of 5.
JOC = oct(5)      Save in Memory as 012     # Here variable JOC holding octal representation of 5.
JOC = hex(5)      Save in Memory as 0xa     # Here variable JOC holding hexadecimal representation of 5

There are many more function available in Python. You can convert variable as per your requirement.
&lt;/pre&gt;


&lt;h1 style='color:black;font-family:Calibri;font-size:14.0pt;font-weight:800;
font-style:normal'&gt;Conversion Table with Eample&lt;/h1&gt;

&lt;table border=0 cellpadding=0 cellspacing=0 width=656 style='border-collapse:
 collapse;table-layout:fixed;width:492pt'&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6624497 width=63 style='height:15.0pt;width:47pt'&gt;Serial
  No&lt;/td&gt;
  &lt;td class=xl6724497 width=77 style='border-left:none;width:58pt'&gt;Function&lt;/td&gt;
  &lt;td class=xl6724497 width=303 style='border-left:none;width:227pt'&gt;Description&lt;/td&gt;
  &lt;td class=xl6724497 width=162 style='border-left:none;width:122pt'&gt;Example&lt;/td&gt;
  &lt;td class=xl6824497 width=51 style='border-left:none;width:38pt'&gt;Output&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;1&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;int(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to an
  integer.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10.12;
  print(int(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;2&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;long(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a&lt;span
  style='mso-spacerun:yes'&gt;  &lt;/span&gt;to a long integer&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10.12;
  print(long(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;3&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;float(a)&lt;/td&gt;
  &lt;td class=xl6524497 width=303 style='border-top:none;border-left:none;
  width:227pt'&gt;Converts a to a floating-point number.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 101.23;
  print(float(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;101.23&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;4&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;complex(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to a
  complex number.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print(complex(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10+0j&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;5&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;str(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to
  string.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print(str(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;6&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;repr(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts object
  a to an expression string.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print(repr(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;7&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;tuple(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to
  tuple.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print((a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;8&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;list(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to
  list.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print([a])&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;[10]&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;9&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;set(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to
  set.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a =
  set(&amp;quot;10&amp;quot;); print(a)&lt;/td&gt;
  &lt;td class=xl7124497 width=51 style='border-top:none;border-left:none;
  width:38pt'&gt;{'1', '0'}&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;10&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;dict(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to
  dictonary&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = dict(a=10);
  print(a)&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;{'a': 10}&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;11&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;chr(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts an
  integer to a character.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 97;
  print(chr(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;a&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;12&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;ord(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a
  single character to its integer value.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a =
  &amp;quot;J&amp;quot;; print(ord(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;74&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;13&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;hex(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts an
  integer to a hexadecimal string.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print(hex(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;0xa&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=21 style='height:15.75pt'&gt;
  &lt;td height=21 class=xl7224497 style='height:15.75pt;border-top:none'&gt;14&lt;/td&gt;
  &lt;td class=xl7324497 style='border-top:none;border-left:none'&gt;oct(a)&lt;/td&gt;
  &lt;td class=xl7324497 style='border-top:none;border-left:none'&gt;Converts an
  integer to an octal string.&lt;/td&gt;
  &lt;td class=xl7324497 style='border-top:none;border-left:none'&gt;a = 10;
  print(oct(a))&lt;/td&gt;
  &lt;td class=xl7424497 style='border-top:none;border-left:none'&gt;0o12&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
  &lt;tr height=0 style='display:none'&gt;
  &lt;td width=63 style='width:47pt'&gt;&lt;/td&gt;
  &lt;td width=77 style='width:58pt'&gt;&lt;/td&gt;
  &lt;td width=303 style='width:227pt'&gt;&lt;/td&gt;
  &lt;td width=162 style='width:122pt'&gt;&lt;/td&gt;
  &lt;td width=51 style='width:38pt'&gt;&lt;/td&gt;
 &lt;/tr&gt;
&lt;/table&gt;

==How to execute couple of instructions on console?==
You can execute couple of instructions on console using ;. Write Statement 1;Statement 2;......and then press ''Enter''.
{{#ev:youtube|https://youtu.be/CYQCYvLE22Y|250|right}}









==How to take input from the user?==
We can take input from the user using ''input'' function. For Example : You want the user to input variable ''x'', then write x=input(&quot;Enter the value of x&quot;) and execute. Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNkVLCxZw_jcgyS-bmrIVSP

And when the input you need is of data type other than string. You can do both the input function and data conversion in a single line.
For example:
Consider the program for letting in the patients
'''c=input(&quot;Enter (1/0)&quot;);d=int(c)'''

Instead of using it in two separate lines, combine it into a single line
'''c=int(input(&quot;Enter (1/0)&quot;))'''.

To get two inputs in same line with a space between them split() is used.

a,b=input(&quot;enter a&quot;).split(&quot;enter b&quot;)
----
[[#Top]]

==If statement==
If statement is used to execute set of two contrary statements based on a condition. 

===Syntax===
If (Condition):
    Statement 1
else:
    Statement 2

If 'Condition' is true then 'Statement 1' will be executed otherwise 'Statement 2' will be executed.

Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNhHmg3SkK1uiutigcAbH9K

==Loops==
[[#Top]]&lt;br&gt;
Loops in a programming languages are used to execute set of repetitive statements. For loop and while loop are used extensively to execute a set of looping instructions.

=== For loop Syntax ===
&lt;pre&gt;
for i in range(10): 
    Statement
&lt;/pre&gt;
range(10) indicate that values 0 to 9 will be assigned to the variable i and for each value of i the Statement will be executed, e.g.
&lt;pre&gt;
for i in range(10): 
    print(i)
&lt;/pre&gt;
Output will be
&lt;pre&gt;
0
1
2
3
4
5
6
7
8
9
&lt;/pre&gt;

[[#Top]]

=== While loop Syntax ===
&lt;pre&gt;
intialisation

while(condition):
   Statement
   increment/decrement
&lt;/pre&gt;
e.g.
&lt;pre&gt;
#initialization
i=0
while(i&lt;10): 
    print(i)
    i=i+1
&lt;/pre&gt;
Output will be:
&lt;pre&gt;
0
1
2
3
4
5
6
7
8
9
&lt;/pre&gt;
Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNbl5jkVrrw1E5XSvm3GiCI

[[#TOP]]
==Importance of Indentation in Python==
 &lt;p style=&quot;text-align:justify&quot;&gt;
Indentation is used to indicate to what block of statements belong. Indentation of blocks convey program structure in Python. Indentation in Python is used to refer a group/block of code/statements. In C++ we use { and } (curly brackets) to group a set of statements. But in Python, there are no such brackets used. Instead of such brackets used in other programming languages, we use indentation in Python.&lt;/p&gt;

Use tabs,instead of spaces for ease of writing code.

Wrong indentation can lead to syntax error, or makes your output wrong for your logic e.g.
&lt;pre&gt;
#IndentationError: expected an indented block
i=-1
if i&lt;0:
print(&quot;Test successful&quot;)#Wrong indentation 
else:    
    print(&quot;Test failed&quot;)
#Output: IndentationError: expected an indented block
&lt;/pre&gt;
---
&lt;pre&gt;
#Properly Indented code:
i=-1
if i&lt;0:
    print(&quot;Test successful&quot;)#Wrong indentation
else:    
    print(&quot;Test failed&quot;)
#Output:Test successful
&lt;/pre&gt;
---
Logic changed, so output changed, with improper indentation, e.g.
---
&lt;h3&gt;Code : 1&lt;/h3&gt;
&lt;pre&gt;
sum=0
for i in range(5):
    for j in range(5):
        sum+=i
print(sum, end=&quot; &quot;)
#Output: 50
&lt;/pre&gt;
        
&lt;h3&gt;Code : 2&lt;/h3&gt;
&lt;pre&gt;
for i in range(5):
    for j in range(5):
        print(end=&quot; &quot;)
    sum+=i
print(sum, end=&quot; &quot;)
#Output:                          10
&lt;/pre&gt;
{{#ev:youtube|https://youtu.be/pmavoW419Yc|250|right}}&lt;br&gt;

[[#Top]]

==Spyder IDE Black Screen Solution==

----

 This issue is because of ''Help'' screen which is by default open. 
 We need to close it. So here's how you do it-


===Method 1:===

Step 1-    Try by closing current pane for that,  &quot;''press ctrl+shift+F4''&quot;  wait for few seconds things will appear on screen.

Step 2-    If it so than on menu bar go to ''view &gt; panes &gt; help'' unchecked &quot;''Help''&quot; option.

Step 3-    Make sure that &quot;''Help''&quot; under ''view &gt; panes'' is permanently unchecked. And ''Editor, Ipython console, Variable explorer''  are checked. 


===Method 2:===

Step 1-    Open spyder.

Step 2-   On that black screen randomly ''Left click'' on spyder &quot;''Menu bar''&quot; area you will get menu drop downs, You have to find Drop down with &quot;''Panes''&quot; option.

Step 3-   On &quot;''Panes''&quot; drop down unchecked the &quot;''Help''&quot;.

Step 4-   Wait for few seconds Spyder view will appear.

Step 5 -  Make sure that ''&quot;Help&quot;'' under view&gt;panes is permanently unchecked. And ''Editor, Ipython console, variable explorer'' are checked.


[[#Top]]</text>
      <sha1>s6z8gbjg87zxjgo2remup5v68qer74x</sha1>
    </revision>
    <revision>
      <id>3691</id>
      <parentid>3690</parentid>
      <timestamp>2018-09-29T01:08:02Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* Syntax */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="20451">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_2 Contributors of this page]
==Introduction to Python==
 &lt;p style=&quot;text-align:justify&quot;&gt;Python is a widely used programming language which allows programmers to write the program in fewer lines of code. It was designed by ''Guido van Rossum'' in 1991. Python uses an interpreter instead of compiler. Basically, the main difference between compiler and interpreter is that the compiler takes the code as 'whole' and compiles it. for example, in ''C'' language and on the other side in interpreter. For example: languages like Python. It interprets the written code 'line by line', and if somewhere error is found. It stops interpreting the code from there itself. Here, in our course we will be using ''Spyder IDE''. Spyder is an integrated development environment with editing options to assist the programmers in writing programs. Spyder IDE is divided into two panes, one is console and other one is where program is written.&lt;/p&gt;

&lt;p style=&quot;text-align:justify&quot;&gt;
Python works on different platforms (Windows, Mac, Linux, Raspberry Pi, etc).
Python has a simple syntax similar to the English language.
Python has syntax that allows developers to write programs with fewer lines than some other programming languages.
Python runs on an interpreter system, meaning that code can be executed as soon as it is written. This means that prototyping can be very quick.&lt;/p&gt;
Python can be treated in a procedural way, an object-orientated way or a functional way.

==Installing Anaconda==
[[#Top]]

This article is all about installing and troubleshooting Anaconda and Spyder on different platforms.

===Windows===
Step 1 -&gt; Download the installer from here 
 &lt;p style=&quot;text-align:justify&quot;&gt;
[https://www.anaconda.com/download/#windows Download Link]. Make sure that you download the version compatible to your operating system architecture. If you have a 64 bit OS then you can download either 64 bit of 32 bit, but if you have 32 bit OS then you should download the 32 bit version only.
&lt;/p&gt;
 &lt;p style=&quot;text-align:justify&quot;&gt;
Step 2 -&gt; Double click on the .exe file that you downloaded just now and follow the instructions. If you are not sure of the installation options then just choose the default.&lt;/p&gt;
 &lt;p style=&quot;text-align:justify&quot;&gt;
Step 3 -&gt; To test your installation, open cmd (go to Start -&gt; then type cmd in the search bar and hit enter). There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.&lt;/p&gt;

===Mac===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#macos Download Link].

Step 2 -&gt; Double click on the .pkg file that you just downloaded. If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

===Linux===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#linux Download Link].

Step 2 -&gt; Go to the folder where you downloaded the .sh file and type following command 

  '''bash Anaconda-latest-Linux-x86_64.sh'''

If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

==Troubleshooting Spyder==

[[#Top]]
 &lt;p style=&quot;text-align:justify&quot;&gt;
In most of the cases, it happens that Spyder is already running and you have initiated one more instance of it. Please make sure that spyder is not running already.
If you are on Linux OS, please launch spyder through terminal. Just open the terminal and type '''spyder''' and it will launch. When Spyder opens, make sure you see Anaconda with the version written on the Ipython console. If not, try changing the path of your anaconda. Follow these steps according to your OS version.&lt;/p&gt;

====Windows====
[https://stackoverflow.com/questions/44597662/conda-command-is-not-recognized-on-windows-10 Click Here]

====Linux====
[https://stackoverflow.com/questions/18675907/how-to-run-conda Click Here]

====Mac====
[https://stackoverflow.com/questions/35246386/conda-command-not-found Click Here]

In most of the cases relaunching Spyder works.
A more general Troubleshoot is present [https://github.com/spyder-ide/spyder/wiki/Troubleshooting-Guide-and-FAQ Here]

==How to run a program in Spyder IDE?==
Go to Run on the menu bar. Click Run-&gt;Run.

[[#Top]]

==Print statements==
Print statements help to display output on console. 
{{#ev:youtube|https://youtu.be/gECkqaOwyt0|250|right}}

===Syntax===
&lt;pre&gt;print()&lt;/pre&gt;

===How to print a message?===
In order to print a message in Python, write &lt;pre&gt;print(&quot;message&quot;)&lt;/pre&gt;.
Single, double, triple quote can be used print()

'''Example:'''

'''Single Quote'''
&lt;pre&gt;
print('Hello')  
Output: Hello
&lt;/pre&gt;
'''Double Quote'''
&lt;pre&gt;
print(&quot;Hello&quot;)  
Output: Hello
&lt;/pre&gt;
'''Quote within quote'''
&lt;pre&gt;print('Is &quot;Ram&quot; a good boy?')  
Output: Is &quot;Ram&quot; a good boy?&lt;/pre&gt;

[[#TOP]]

==Escape sequences with strings==

We can use escape sequence within strings to make output more presentable.

'''\n'''  : It will move to next line.

'''\t'''  : It will add tab space(5space)

'''\a'''  : It will play system sound once.

'''Example:'''

&lt;pre&gt;print(&quot;Hi, \n How are you?&quot;)&lt;/pre&gt;

Output: 

Hi,

How are you?

&lt;pre&gt;print(&quot;Hi, \t How are you?&quot;)&lt;/pre&gt;

Output: 

Hi, &lt;5 spaces&gt; How are you?

[[File:Escape_Sequence.jpg]]

==Variables==
[[#Top]]
&lt;pre&gt;
Variables are used to store some values. Values can be strings, integers or decimal values.  

Variable Name Rules:
1. Variable name should start with letter or underscore. Variable name cant start with number.
Example:
Valid: JOC, WIKI, JOC_WIKI, _JOC
Invalid: 1JOC, 123WIKI, 0_WIKI

2. Remaining letter other then first one can contain number, underscore.
Example:
JOC1234, WIKI012_1332

3. Variable names are case sensitivities.
Example:
JOC, jOC, joC all are different varibles. 

&lt;/pre&gt;
{{#ev:youtube|https://youtu.be/60iAXH1sm-Y|250|right}}
===How to print a variable?===
In order to print the value of a variable in python, first initialize the variable and then call it where ever you wanna use it. 
&lt;pre&gt;print(variable_name)&lt;/pre&gt;

&lt;pre&gt;For example :
x=2                # x is viable here
print(x)           # calling variable x with print function

a = &quot;JOC&quot;          # a is variable here
b = &quot;_WIKI&quot;        # b is variable here
c = a + b          # c is variable here which will provide addition of variable a and b
&lt;/pre&gt;

===Some facts about Variables===
* If you want to print variable name with a message, you can use , operator. For example : I want to print Hello Simran and Simran has been stored in a variable called ''name''.
  name=&quot;Simran&quot;
  print(&quot;Hello&quot;,name)
* If you change the value of a variable, it will store the latest value. For example :
  name=&quot;Simran&quot;
  name=&quot;Amit&quot;
  If you will execute the command ''print(name)'', Amit will be displayed.
* You can perform operations like addition, subtraction etc only on integral variables.

===Variables Types and Conversion===
&lt;pre&gt;Variable can be decimal, integer and decimal. And they can be inter covered with the help of conversion functions.

Example:
JOC = 5           Save in Memory as 5       # We have variable with name JOC having value 5 here.
JOC = int(5)      Save in Memory as 5       # Here Variable JOC holding integer value of 5. 
JOC = flot(5)     Save in Memory as 5.0     # Here variable JOC holding flot value of 5
JOC = str(5)      Save in Memory as &quot;5&quot;     # Here variable JOC holding string value of 5 or We can say 5 will be treated as string here.
JOC = complex(5)  Save in Memory as (5+0j)  # Here variable JOC holding complex value of 5.
JOC = oct(5)      Save in Memory as 012     # Here variable JOC holding octal representation of 5.
JOC = hex(5)      Save in Memory as 0xa     # Here variable JOC holding hexadecimal representation of 5

There are many more function available in Python. You can convert variable as per your requirement.
&lt;/pre&gt;


&lt;h1 style='color:black;font-family:Calibri;font-size:14.0pt;font-weight:800;
font-style:normal'&gt;Conversion Table with Eample&lt;/h1&gt;

&lt;table border=0 cellpadding=0 cellspacing=0 width=656 style='border-collapse:
 collapse;table-layout:fixed;width:492pt'&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6624497 width=63 style='height:15.0pt;width:47pt'&gt;Serial
  No&lt;/td&gt;
  &lt;td class=xl6724497 width=77 style='border-left:none;width:58pt'&gt;Function&lt;/td&gt;
  &lt;td class=xl6724497 width=303 style='border-left:none;width:227pt'&gt;Description&lt;/td&gt;
  &lt;td class=xl6724497 width=162 style='border-left:none;width:122pt'&gt;Example&lt;/td&gt;
  &lt;td class=xl6824497 width=51 style='border-left:none;width:38pt'&gt;Output&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;1&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;int(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to an
  integer.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10.12;
  print(int(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;2&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;long(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a&lt;span
  style='mso-spacerun:yes'&gt;  &lt;/span&gt;to a long integer&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10.12;
  print(long(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;3&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;float(a)&lt;/td&gt;
  &lt;td class=xl6524497 width=303 style='border-top:none;border-left:none;
  width:227pt'&gt;Converts a to a floating-point number.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 101.23;
  print(float(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;101.23&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;4&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;complex(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to a
  complex number.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print(complex(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10+0j&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;5&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;str(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to
  string.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print(str(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;6&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;repr(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts object
  a to an expression string.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print(repr(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;7&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;tuple(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to
  tuple.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print((a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;8&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;list(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to
  list.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print([a])&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;[10]&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;9&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;set(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to
  set.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a =
  set(&amp;quot;10&amp;quot;); print(a)&lt;/td&gt;
  &lt;td class=xl7124497 width=51 style='border-top:none;border-left:none;
  width:38pt'&gt;{'1', '0'}&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;10&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;dict(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to
  dictonary&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = dict(a=10);
  print(a)&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;{'a': 10}&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;11&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;chr(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts an
  integer to a character.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 97;
  print(chr(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;a&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;12&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;ord(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a
  single character to its integer value.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a =
  &amp;quot;J&amp;quot;; print(ord(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;74&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;13&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;hex(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts an
  integer to a hexadecimal string.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print(hex(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;0xa&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=21 style='height:15.75pt'&gt;
  &lt;td height=21 class=xl7224497 style='height:15.75pt;border-top:none'&gt;14&lt;/td&gt;
  &lt;td class=xl7324497 style='border-top:none;border-left:none'&gt;oct(a)&lt;/td&gt;
  &lt;td class=xl7324497 style='border-top:none;border-left:none'&gt;Converts an
  integer to an octal string.&lt;/td&gt;
  &lt;td class=xl7324497 style='border-top:none;border-left:none'&gt;a = 10;
  print(oct(a))&lt;/td&gt;
  &lt;td class=xl7424497 style='border-top:none;border-left:none'&gt;0o12&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
  &lt;tr height=0 style='display:none'&gt;
  &lt;td width=63 style='width:47pt'&gt;&lt;/td&gt;
  &lt;td width=77 style='width:58pt'&gt;&lt;/td&gt;
  &lt;td width=303 style='width:227pt'&gt;&lt;/td&gt;
  &lt;td width=162 style='width:122pt'&gt;&lt;/td&gt;
  &lt;td width=51 style='width:38pt'&gt;&lt;/td&gt;
 &lt;/tr&gt;
&lt;/table&gt;

==How to execute couple of instructions on console?==
You can execute couple of instructions on console using ;. Write Statement 1;Statement 2;......and then press ''Enter''.
{{#ev:youtube|https://youtu.be/CYQCYvLE22Y|250|right}}









==How to take input from the user?==
We can take input from the user using ''input'' function. For Example : You want the user to input variable ''x'', then write x=input(&quot;Enter the value of x&quot;) and execute. Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNkVLCxZw_jcgyS-bmrIVSP

And when the input you need is of data type other than string. You can do both the input function and data conversion in a single line.
For example:
Consider the program for letting in the patients
'''c=input(&quot;Enter (1/0)&quot;);d=int(c)'''

Instead of using it in two separate lines, combine it into a single line
'''c=int(input(&quot;Enter (1/0)&quot;))'''.

To get two inputs in same line with a space between them split() is used.

a,b=input(&quot;enter a&quot;).split(&quot;enter b&quot;)
----
[[#Top]]

==If statement==
If statement is used to execute set of two contrary statements based on a condition. 

===Syntax===
If (Condition):
    Statement 1
else:
    Statement 2

If 'Condition' is true then 'Statement 1' will be executed otherwise 'Statement 2' will be executed.

Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNhHmg3SkK1uiutigcAbH9K

==Loops==
[[#Top]]&lt;br&gt;
Loops in a programming languages are used to execute set of repetitive statements. For loop and while loop are used extensively to execute a set of looping instructions.

=== For loop Syntax ===
&lt;pre&gt;
for i in range(10): 
    Statement
&lt;/pre&gt;
range(10) indicate that values 0 to 9 will be assigned to the variable i and for each value of i the Statement will be executed, e.g.
&lt;pre&gt;
for i in range(10): 
    print(i)
&lt;/pre&gt;
Output will be
&lt;pre&gt;
0
1
2
3
4
5
6
7
8
9
&lt;/pre&gt;

[[#Top]]

=== While loop Syntax ===
&lt;pre&gt;
intialisation

while(condition):
   Statement
   increment/decrement
&lt;/pre&gt;
e.g.
&lt;pre&gt;
#initialization
i=0
while(i&lt;10): 
    print(i)
    i=i+1
&lt;/pre&gt;
Output will be:
&lt;pre&gt;
0
1
2
3
4
5
6
7
8
9
&lt;/pre&gt;
Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNbl5jkVrrw1E5XSvm3GiCI

[[#TOP]]
==Importance of Indentation in Python==
 &lt;p style=&quot;text-align:justify&quot;&gt;
Indentation is used to indicate to what block of statements belong. Indentation of blocks convey program structure in Python. Indentation in Python is used to refer a group/block of code/statements. In C++ we use { and } (curly brackets) to group a set of statements. But in Python, there are no such brackets used. Instead of such brackets used in other programming languages, we use indentation in Python.&lt;/p&gt;

Use tabs,instead of spaces for ease of writing code.

Wrong indentation can lead to syntax error, or makes your output wrong for your logic e.g.
&lt;pre&gt;
#IndentationError: expected an indented block
i=-1
if i&lt;0:
print(&quot;Test successful&quot;)#Wrong indentation 
else:    
    print(&quot;Test failed&quot;)
#Output: IndentationError: expected an indented block
&lt;/pre&gt;
---
&lt;pre&gt;
#Properly Indented code:
i=-1
if i&lt;0:
    print(&quot;Test successful&quot;)#Wrong indentation
else:    
    print(&quot;Test failed&quot;)
#Output:Test successful
&lt;/pre&gt;
---
Logic changed, so output changed, with improper indentation, e.g.
---
&lt;h3&gt;Code : 1&lt;/h3&gt;
&lt;pre&gt;
sum=0
for i in range(5):
    for j in range(5):
        sum+=i
print(sum, end=&quot; &quot;)
#Output: 50
&lt;/pre&gt;
        
&lt;h3&gt;Code : 2&lt;/h3&gt;
&lt;pre&gt;
for i in range(5):
    for j in range(5):
        print(end=&quot; &quot;)
    sum+=i
print(sum, end=&quot; &quot;)
#Output:                          10
&lt;/pre&gt;
{{#ev:youtube|https://youtu.be/pmavoW419Yc|250|right}}&lt;br&gt;

[[#Top]]

==Spyder IDE Black Screen Solution==

----

 This issue is because of ''Help'' screen which is by default open. 
 We need to close it. So here's how you do it-


===Method 1:===

Step 1-    Try by closing current pane for that,  &quot;''press ctrl+shift+F4''&quot;  wait for few seconds things will appear on screen.

Step 2-    If it so than on menu bar go to ''view &gt; panes &gt; help'' unchecked &quot;''Help''&quot; option.

Step 3-    Make sure that &quot;''Help''&quot; under ''view &gt; panes'' is permanently unchecked. And ''Editor, Ipython console, Variable explorer''  are checked. 


===Method 2:===

Step 1-    Open spyder.

Step 2-   On that black screen randomly ''Left click'' on spyder &quot;''Menu bar''&quot; area you will get menu drop downs, You have to find Drop down with &quot;''Panes''&quot; option.

Step 3-   On &quot;''Panes''&quot; drop down unchecked the &quot;''Help''&quot;.

Step 4-   Wait for few seconds Spyder view will appear.

Step 5 -  Make sure that ''&quot;Help&quot;'' under view&gt;panes is permanently unchecked. And ''Editor, Ipython console, variable explorer'' are checked.


[[#Top]]</text>
      <sha1>g96xmk6n12ghqcrzcktfaljpdu5z6ag</sha1>
    </revision>
    <revision>
      <id>3692</id>
      <parentid>3691</parentid>
      <timestamp>2018-09-29T01:08:27Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* How to print a message? */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="20451">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_2 Contributors of this page]
==Introduction to Python==
 &lt;p style=&quot;text-align:justify&quot;&gt;Python is a widely used programming language which allows programmers to write the program in fewer lines of code. It was designed by ''Guido van Rossum'' in 1991. Python uses an interpreter instead of compiler. Basically, the main difference between compiler and interpreter is that the compiler takes the code as 'whole' and compiles it. for example, in ''C'' language and on the other side in interpreter. For example: languages like Python. It interprets the written code 'line by line', and if somewhere error is found. It stops interpreting the code from there itself. Here, in our course we will be using ''Spyder IDE''. Spyder is an integrated development environment with editing options to assist the programmers in writing programs. Spyder IDE is divided into two panes, one is console and other one is where program is written.&lt;/p&gt;

&lt;p style=&quot;text-align:justify&quot;&gt;
Python works on different platforms (Windows, Mac, Linux, Raspberry Pi, etc).
Python has a simple syntax similar to the English language.
Python has syntax that allows developers to write programs with fewer lines than some other programming languages.
Python runs on an interpreter system, meaning that code can be executed as soon as it is written. This means that prototyping can be very quick.&lt;/p&gt;
Python can be treated in a procedural way, an object-orientated way or a functional way.

==Installing Anaconda==
[[#Top]]

This article is all about installing and troubleshooting Anaconda and Spyder on different platforms.

===Windows===
Step 1 -&gt; Download the installer from here 
 &lt;p style=&quot;text-align:justify&quot;&gt;
[https://www.anaconda.com/download/#windows Download Link]. Make sure that you download the version compatible to your operating system architecture. If you have a 64 bit OS then you can download either 64 bit of 32 bit, but if you have 32 bit OS then you should download the 32 bit version only.
&lt;/p&gt;
 &lt;p style=&quot;text-align:justify&quot;&gt;
Step 2 -&gt; Double click on the .exe file that you downloaded just now and follow the instructions. If you are not sure of the installation options then just choose the default.&lt;/p&gt;
 &lt;p style=&quot;text-align:justify&quot;&gt;
Step 3 -&gt; To test your installation, open cmd (go to Start -&gt; then type cmd in the search bar and hit enter). There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.&lt;/p&gt;

===Mac===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#macos Download Link].

Step 2 -&gt; Double click on the .pkg file that you just downloaded. If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

===Linux===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#linux Download Link].

Step 2 -&gt; Go to the folder where you downloaded the .sh file and type following command 

  '''bash Anaconda-latest-Linux-x86_64.sh'''

If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

==Troubleshooting Spyder==

[[#Top]]
 &lt;p style=&quot;text-align:justify&quot;&gt;
In most of the cases, it happens that Spyder is already running and you have initiated one more instance of it. Please make sure that spyder is not running already.
If you are on Linux OS, please launch spyder through terminal. Just open the terminal and type '''spyder''' and it will launch. When Spyder opens, make sure you see Anaconda with the version written on the Ipython console. If not, try changing the path of your anaconda. Follow these steps according to your OS version.&lt;/p&gt;

====Windows====
[https://stackoverflow.com/questions/44597662/conda-command-is-not-recognized-on-windows-10 Click Here]

====Linux====
[https://stackoverflow.com/questions/18675907/how-to-run-conda Click Here]

====Mac====
[https://stackoverflow.com/questions/35246386/conda-command-not-found Click Here]

In most of the cases relaunching Spyder works.
A more general Troubleshoot is present [https://github.com/spyder-ide/spyder/wiki/Troubleshooting-Guide-and-FAQ Here]

==How to run a program in Spyder IDE?==
Go to Run on the menu bar. Click Run-&gt;Run.

[[#Top]]

==Print statements==
Print statements help to display output on console. 
{{#ev:youtube|https://youtu.be/gECkqaOwyt0|250|right}}

===Syntax===
&lt;pre&gt;print()&lt;/pre&gt;

===How to print a message?===
In order to print a message in Python, write &lt;pre&gt;print(&quot;message&quot;)&lt;/pre&gt;.
Single, double, triple quote can be used print()

'''Example:'''

'''Single Quote'''
&lt;pre&gt;
print('Hello')  
Output: Hello
&lt;/pre&gt;
'''Double Quote'''
&lt;pre&gt;
print(&quot;Hello&quot;)  
Output: Hello
&lt;/pre&gt;
'''Quote within quote'''
&lt;pre&gt;print('Is &quot;Ram&quot; a good boy?')  
Output: Is &quot;Ram&quot; a good boy?&lt;/pre&gt;

[[#Top]]

==Escape sequences with strings==

We can use escape sequence within strings to make output more presentable.

'''\n'''  : It will move to next line.

'''\t'''  : It will add tab space(5space)

'''\a'''  : It will play system sound once.

'''Example:'''

&lt;pre&gt;print(&quot;Hi, \n How are you?&quot;)&lt;/pre&gt;

Output: 

Hi,

How are you?

&lt;pre&gt;print(&quot;Hi, \t How are you?&quot;)&lt;/pre&gt;

Output: 

Hi, &lt;5 spaces&gt; How are you?

[[File:Escape_Sequence.jpg]]

==Variables==
[[#Top]]
&lt;pre&gt;
Variables are used to store some values. Values can be strings, integers or decimal values.  

Variable Name Rules:
1. Variable name should start with letter or underscore. Variable name cant start with number.
Example:
Valid: JOC, WIKI, JOC_WIKI, _JOC
Invalid: 1JOC, 123WIKI, 0_WIKI

2. Remaining letter other then first one can contain number, underscore.
Example:
JOC1234, WIKI012_1332

3. Variable names are case sensitivities.
Example:
JOC, jOC, joC all are different varibles. 

&lt;/pre&gt;
{{#ev:youtube|https://youtu.be/60iAXH1sm-Y|250|right}}
===How to print a variable?===
In order to print the value of a variable in python, first initialize the variable and then call it where ever you wanna use it. 
&lt;pre&gt;print(variable_name)&lt;/pre&gt;

&lt;pre&gt;For example :
x=2                # x is viable here
print(x)           # calling variable x with print function

a = &quot;JOC&quot;          # a is variable here
b = &quot;_WIKI&quot;        # b is variable here
c = a + b          # c is variable here which will provide addition of variable a and b
&lt;/pre&gt;

===Some facts about Variables===
* If you want to print variable name with a message, you can use , operator. For example : I want to print Hello Simran and Simran has been stored in a variable called ''name''.
  name=&quot;Simran&quot;
  print(&quot;Hello&quot;,name)
* If you change the value of a variable, it will store the latest value. For example :
  name=&quot;Simran&quot;
  name=&quot;Amit&quot;
  If you will execute the command ''print(name)'', Amit will be displayed.
* You can perform operations like addition, subtraction etc only on integral variables.

===Variables Types and Conversion===
&lt;pre&gt;Variable can be decimal, integer and decimal. And they can be inter covered with the help of conversion functions.

Example:
JOC = 5           Save in Memory as 5       # We have variable with name JOC having value 5 here.
JOC = int(5)      Save in Memory as 5       # Here Variable JOC holding integer value of 5. 
JOC = flot(5)     Save in Memory as 5.0     # Here variable JOC holding flot value of 5
JOC = str(5)      Save in Memory as &quot;5&quot;     # Here variable JOC holding string value of 5 or We can say 5 will be treated as string here.
JOC = complex(5)  Save in Memory as (5+0j)  # Here variable JOC holding complex value of 5.
JOC = oct(5)      Save in Memory as 012     # Here variable JOC holding octal representation of 5.
JOC = hex(5)      Save in Memory as 0xa     # Here variable JOC holding hexadecimal representation of 5

There are many more function available in Python. You can convert variable as per your requirement.
&lt;/pre&gt;


&lt;h1 style='color:black;font-family:Calibri;font-size:14.0pt;font-weight:800;
font-style:normal'&gt;Conversion Table with Eample&lt;/h1&gt;

&lt;table border=0 cellpadding=0 cellspacing=0 width=656 style='border-collapse:
 collapse;table-layout:fixed;width:492pt'&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6624497 width=63 style='height:15.0pt;width:47pt'&gt;Serial
  No&lt;/td&gt;
  &lt;td class=xl6724497 width=77 style='border-left:none;width:58pt'&gt;Function&lt;/td&gt;
  &lt;td class=xl6724497 width=303 style='border-left:none;width:227pt'&gt;Description&lt;/td&gt;
  &lt;td class=xl6724497 width=162 style='border-left:none;width:122pt'&gt;Example&lt;/td&gt;
  &lt;td class=xl6824497 width=51 style='border-left:none;width:38pt'&gt;Output&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;1&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;int(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to an
  integer.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10.12;
  print(int(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;2&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;long(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a&lt;span
  style='mso-spacerun:yes'&gt;  &lt;/span&gt;to a long integer&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10.12;
  print(long(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;3&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;float(a)&lt;/td&gt;
  &lt;td class=xl6524497 width=303 style='border-top:none;border-left:none;
  width:227pt'&gt;Converts a to a floating-point number.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 101.23;
  print(float(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;101.23&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;4&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;complex(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to a
  complex number.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print(complex(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10+0j&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;5&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;str(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to
  string.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print(str(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;6&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;repr(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts object
  a to an expression string.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print(repr(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;7&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;tuple(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to
  tuple.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print((a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;8&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;list(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to
  list.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print([a])&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;[10]&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;9&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;set(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to
  set.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a =
  set(&amp;quot;10&amp;quot;); print(a)&lt;/td&gt;
  &lt;td class=xl7124497 width=51 style='border-top:none;border-left:none;
  width:38pt'&gt;{'1', '0'}&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;10&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;dict(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to
  dictonary&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = dict(a=10);
  print(a)&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;{'a': 10}&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;11&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;chr(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts an
  integer to a character.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 97;
  print(chr(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;a&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;12&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;ord(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a
  single character to its integer value.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a =
  &amp;quot;J&amp;quot;; print(ord(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;74&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;13&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;hex(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts an
  integer to a hexadecimal string.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print(hex(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;0xa&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=21 style='height:15.75pt'&gt;
  &lt;td height=21 class=xl7224497 style='height:15.75pt;border-top:none'&gt;14&lt;/td&gt;
  &lt;td class=xl7324497 style='border-top:none;border-left:none'&gt;oct(a)&lt;/td&gt;
  &lt;td class=xl7324497 style='border-top:none;border-left:none'&gt;Converts an
  integer to an octal string.&lt;/td&gt;
  &lt;td class=xl7324497 style='border-top:none;border-left:none'&gt;a = 10;
  print(oct(a))&lt;/td&gt;
  &lt;td class=xl7424497 style='border-top:none;border-left:none'&gt;0o12&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
  &lt;tr height=0 style='display:none'&gt;
  &lt;td width=63 style='width:47pt'&gt;&lt;/td&gt;
  &lt;td width=77 style='width:58pt'&gt;&lt;/td&gt;
  &lt;td width=303 style='width:227pt'&gt;&lt;/td&gt;
  &lt;td width=162 style='width:122pt'&gt;&lt;/td&gt;
  &lt;td width=51 style='width:38pt'&gt;&lt;/td&gt;
 &lt;/tr&gt;
&lt;/table&gt;

==How to execute couple of instructions on console?==
You can execute couple of instructions on console using ;. Write Statement 1;Statement 2;......and then press ''Enter''.
{{#ev:youtube|https://youtu.be/CYQCYvLE22Y|250|right}}









==How to take input from the user?==
We can take input from the user using ''input'' function. For Example : You want the user to input variable ''x'', then write x=input(&quot;Enter the value of x&quot;) and execute. Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNkVLCxZw_jcgyS-bmrIVSP

And when the input you need is of data type other than string. You can do both the input function and data conversion in a single line.
For example:
Consider the program for letting in the patients
'''c=input(&quot;Enter (1/0)&quot;);d=int(c)'''

Instead of using it in two separate lines, combine it into a single line
'''c=int(input(&quot;Enter (1/0)&quot;))'''.

To get two inputs in same line with a space between them split() is used.

a,b=input(&quot;enter a&quot;).split(&quot;enter b&quot;)
----
[[#Top]]

==If statement==
If statement is used to execute set of two contrary statements based on a condition. 

===Syntax===
If (Condition):
    Statement 1
else:
    Statement 2

If 'Condition' is true then 'Statement 1' will be executed otherwise 'Statement 2' will be executed.

Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNhHmg3SkK1uiutigcAbH9K

==Loops==
[[#Top]]&lt;br&gt;
Loops in a programming languages are used to execute set of repetitive statements. For loop and while loop are used extensively to execute a set of looping instructions.

=== For loop Syntax ===
&lt;pre&gt;
for i in range(10): 
    Statement
&lt;/pre&gt;
range(10) indicate that values 0 to 9 will be assigned to the variable i and for each value of i the Statement will be executed, e.g.
&lt;pre&gt;
for i in range(10): 
    print(i)
&lt;/pre&gt;
Output will be
&lt;pre&gt;
0
1
2
3
4
5
6
7
8
9
&lt;/pre&gt;

[[#Top]]

=== While loop Syntax ===
&lt;pre&gt;
intialisation

while(condition):
   Statement
   increment/decrement
&lt;/pre&gt;
e.g.
&lt;pre&gt;
#initialization
i=0
while(i&lt;10): 
    print(i)
    i=i+1
&lt;/pre&gt;
Output will be:
&lt;pre&gt;
0
1
2
3
4
5
6
7
8
9
&lt;/pre&gt;
Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNbl5jkVrrw1E5XSvm3GiCI

[[#TOP]]
==Importance of Indentation in Python==
 &lt;p style=&quot;text-align:justify&quot;&gt;
Indentation is used to indicate to what block of statements belong. Indentation of blocks convey program structure in Python. Indentation in Python is used to refer a group/block of code/statements. In C++ we use { and } (curly brackets) to group a set of statements. But in Python, there are no such brackets used. Instead of such brackets used in other programming languages, we use indentation in Python.&lt;/p&gt;

Use tabs,instead of spaces for ease of writing code.

Wrong indentation can lead to syntax error, or makes your output wrong for your logic e.g.
&lt;pre&gt;
#IndentationError: expected an indented block
i=-1
if i&lt;0:
print(&quot;Test successful&quot;)#Wrong indentation 
else:    
    print(&quot;Test failed&quot;)
#Output: IndentationError: expected an indented block
&lt;/pre&gt;
---
&lt;pre&gt;
#Properly Indented code:
i=-1
if i&lt;0:
    print(&quot;Test successful&quot;)#Wrong indentation
else:    
    print(&quot;Test failed&quot;)
#Output:Test successful
&lt;/pre&gt;
---
Logic changed, so output changed, with improper indentation, e.g.
---
&lt;h3&gt;Code : 1&lt;/h3&gt;
&lt;pre&gt;
sum=0
for i in range(5):
    for j in range(5):
        sum+=i
print(sum, end=&quot; &quot;)
#Output: 50
&lt;/pre&gt;
        
&lt;h3&gt;Code : 2&lt;/h3&gt;
&lt;pre&gt;
for i in range(5):
    for j in range(5):
        print(end=&quot; &quot;)
    sum+=i
print(sum, end=&quot; &quot;)
#Output:                          10
&lt;/pre&gt;
{{#ev:youtube|https://youtu.be/pmavoW419Yc|250|right}}&lt;br&gt;

[[#Top]]

==Spyder IDE Black Screen Solution==

----

 This issue is because of ''Help'' screen which is by default open. 
 We need to close it. So here's how you do it-


===Method 1:===

Step 1-    Try by closing current pane for that,  &quot;''press ctrl+shift+F4''&quot;  wait for few seconds things will appear on screen.

Step 2-    If it so than on menu bar go to ''view &gt; panes &gt; help'' unchecked &quot;''Help''&quot; option.

Step 3-    Make sure that &quot;''Help''&quot; under ''view &gt; panes'' is permanently unchecked. And ''Editor, Ipython console, Variable explorer''  are checked. 


===Method 2:===

Step 1-    Open spyder.

Step 2-   On that black screen randomly ''Left click'' on spyder &quot;''Menu bar''&quot; area you will get menu drop downs, You have to find Drop down with &quot;''Panes''&quot; option.

Step 3-   On &quot;''Panes''&quot; drop down unchecked the &quot;''Help''&quot;.

Step 4-   Wait for few seconds Spyder view will appear.

Step 5 -  Make sure that ''&quot;Help&quot;'' under view&gt;panes is permanently unchecked. And ''Editor, Ipython console, variable explorer'' are checked.


[[#Top]]</text>
      <sha1>0mw2g1f0k5pfe4v2wp9am91xh551qko</sha1>
    </revision>
    <revision>
      <id>3693</id>
      <parentid>3692</parentid>
      <timestamp>2018-09-29T01:08:46Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* How to print a message? */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="20450">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_2 Contributors of this page]
==Introduction to Python==
 &lt;p style=&quot;text-align:justify&quot;&gt;Python is a widely used programming language which allows programmers to write the program in fewer lines of code. It was designed by ''Guido van Rossum'' in 1991. Python uses an interpreter instead of compiler. Basically, the main difference between compiler and interpreter is that the compiler takes the code as 'whole' and compiles it. for example, in ''C'' language and on the other side in interpreter. For example: languages like Python. It interprets the written code 'line by line', and if somewhere error is found. It stops interpreting the code from there itself. Here, in our course we will be using ''Spyder IDE''. Spyder is an integrated development environment with editing options to assist the programmers in writing programs. Spyder IDE is divided into two panes, one is console and other one is where program is written.&lt;/p&gt;

&lt;p style=&quot;text-align:justify&quot;&gt;
Python works on different platforms (Windows, Mac, Linux, Raspberry Pi, etc).
Python has a simple syntax similar to the English language.
Python has syntax that allows developers to write programs with fewer lines than some other programming languages.
Python runs on an interpreter system, meaning that code can be executed as soon as it is written. This means that prototyping can be very quick.&lt;/p&gt;
Python can be treated in a procedural way, an object-orientated way or a functional way.

==Installing Anaconda==
[[#Top]]

This article is all about installing and troubleshooting Anaconda and Spyder on different platforms.

===Windows===
Step 1 -&gt; Download the installer from here 
 &lt;p style=&quot;text-align:justify&quot;&gt;
[https://www.anaconda.com/download/#windows Download Link]. Make sure that you download the version compatible to your operating system architecture. If you have a 64 bit OS then you can download either 64 bit of 32 bit, but if you have 32 bit OS then you should download the 32 bit version only.
&lt;/p&gt;
 &lt;p style=&quot;text-align:justify&quot;&gt;
Step 2 -&gt; Double click on the .exe file that you downloaded just now and follow the instructions. If you are not sure of the installation options then just choose the default.&lt;/p&gt;
 &lt;p style=&quot;text-align:justify&quot;&gt;
Step 3 -&gt; To test your installation, open cmd (go to Start -&gt; then type cmd in the search bar and hit enter). There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.&lt;/p&gt;

===Mac===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#macos Download Link].

Step 2 -&gt; Double click on the .pkg file that you just downloaded. If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

===Linux===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#linux Download Link].

Step 2 -&gt; Go to the folder where you downloaded the .sh file and type following command 

  '''bash Anaconda-latest-Linux-x86_64.sh'''

If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

==Troubleshooting Spyder==

[[#Top]]
 &lt;p style=&quot;text-align:justify&quot;&gt;
In most of the cases, it happens that Spyder is already running and you have initiated one more instance of it. Please make sure that spyder is not running already.
If you are on Linux OS, please launch spyder through terminal. Just open the terminal and type '''spyder''' and it will launch. When Spyder opens, make sure you see Anaconda with the version written on the Ipython console. If not, try changing the path of your anaconda. Follow these steps according to your OS version.&lt;/p&gt;

====Windows====
[https://stackoverflow.com/questions/44597662/conda-command-is-not-recognized-on-windows-10 Click Here]

====Linux====
[https://stackoverflow.com/questions/18675907/how-to-run-conda Click Here]

====Mac====
[https://stackoverflow.com/questions/35246386/conda-command-not-found Click Here]

In most of the cases relaunching Spyder works.
A more general Troubleshoot is present [https://github.com/spyder-ide/spyder/wiki/Troubleshooting-Guide-and-FAQ Here]

==How to run a program in Spyder IDE?==
Go to Run on the menu bar. Click Run-&gt;Run.

[[#Top]]

==Print statements==
Print statements help to display output on console. 
{{#ev:youtube|https://youtu.be/gECkqaOwyt0|250|right}}

===Syntax===
&lt;pre&gt;print()&lt;/pre&gt;

===How to print a message?===
In order to print a message in Python, write &lt;pre&gt;print(&quot;message&quot;)&lt;/pre&gt;
Single, double, triple quote can be used print()

'''Example:'''

'''Single Quote'''
&lt;pre&gt;
print('Hello')  
Output: Hello
&lt;/pre&gt;
'''Double Quote'''
&lt;pre&gt;
print(&quot;Hello&quot;)  
Output: Hello
&lt;/pre&gt;
'''Quote within quote'''
&lt;pre&gt;print('Is &quot;Ram&quot; a good boy?')  
Output: Is &quot;Ram&quot; a good boy?&lt;/pre&gt;

[[#Top]]

==Escape sequences with strings==

We can use escape sequence within strings to make output more presentable.

'''\n'''  : It will move to next line.

'''\t'''  : It will add tab space(5space)

'''\a'''  : It will play system sound once.

'''Example:'''

&lt;pre&gt;print(&quot;Hi, \n How are you?&quot;)&lt;/pre&gt;

Output: 

Hi,

How are you?

&lt;pre&gt;print(&quot;Hi, \t How are you?&quot;)&lt;/pre&gt;

Output: 

Hi, &lt;5 spaces&gt; How are you?

[[File:Escape_Sequence.jpg]]

==Variables==
[[#Top]]
&lt;pre&gt;
Variables are used to store some values. Values can be strings, integers or decimal values.  

Variable Name Rules:
1. Variable name should start with letter or underscore. Variable name cant start with number.
Example:
Valid: JOC, WIKI, JOC_WIKI, _JOC
Invalid: 1JOC, 123WIKI, 0_WIKI

2. Remaining letter other then first one can contain number, underscore.
Example:
JOC1234, WIKI012_1332

3. Variable names are case sensitivities.
Example:
JOC, jOC, joC all are different varibles. 

&lt;/pre&gt;
{{#ev:youtube|https://youtu.be/60iAXH1sm-Y|250|right}}
===How to print a variable?===
In order to print the value of a variable in python, first initialize the variable and then call it where ever you wanna use it. 
&lt;pre&gt;print(variable_name)&lt;/pre&gt;

&lt;pre&gt;For example :
x=2                # x is viable here
print(x)           # calling variable x with print function

a = &quot;JOC&quot;          # a is variable here
b = &quot;_WIKI&quot;        # b is variable here
c = a + b          # c is variable here which will provide addition of variable a and b
&lt;/pre&gt;

===Some facts about Variables===
* If you want to print variable name with a message, you can use , operator. For example : I want to print Hello Simran and Simran has been stored in a variable called ''name''.
  name=&quot;Simran&quot;
  print(&quot;Hello&quot;,name)
* If you change the value of a variable, it will store the latest value. For example :
  name=&quot;Simran&quot;
  name=&quot;Amit&quot;
  If you will execute the command ''print(name)'', Amit will be displayed.
* You can perform operations like addition, subtraction etc only on integral variables.

===Variables Types and Conversion===
&lt;pre&gt;Variable can be decimal, integer and decimal. And they can be inter covered with the help of conversion functions.

Example:
JOC = 5           Save in Memory as 5       # We have variable with name JOC having value 5 here.
JOC = int(5)      Save in Memory as 5       # Here Variable JOC holding integer value of 5. 
JOC = flot(5)     Save in Memory as 5.0     # Here variable JOC holding flot value of 5
JOC = str(5)      Save in Memory as &quot;5&quot;     # Here variable JOC holding string value of 5 or We can say 5 will be treated as string here.
JOC = complex(5)  Save in Memory as (5+0j)  # Here variable JOC holding complex value of 5.
JOC = oct(5)      Save in Memory as 012     # Here variable JOC holding octal representation of 5.
JOC = hex(5)      Save in Memory as 0xa     # Here variable JOC holding hexadecimal representation of 5

There are many more function available in Python. You can convert variable as per your requirement.
&lt;/pre&gt;


&lt;h1 style='color:black;font-family:Calibri;font-size:14.0pt;font-weight:800;
font-style:normal'&gt;Conversion Table with Eample&lt;/h1&gt;

&lt;table border=0 cellpadding=0 cellspacing=0 width=656 style='border-collapse:
 collapse;table-layout:fixed;width:492pt'&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6624497 width=63 style='height:15.0pt;width:47pt'&gt;Serial
  No&lt;/td&gt;
  &lt;td class=xl6724497 width=77 style='border-left:none;width:58pt'&gt;Function&lt;/td&gt;
  &lt;td class=xl6724497 width=303 style='border-left:none;width:227pt'&gt;Description&lt;/td&gt;
  &lt;td class=xl6724497 width=162 style='border-left:none;width:122pt'&gt;Example&lt;/td&gt;
  &lt;td class=xl6824497 width=51 style='border-left:none;width:38pt'&gt;Output&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;1&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;int(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to an
  integer.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10.12;
  print(int(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;2&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;long(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a&lt;span
  style='mso-spacerun:yes'&gt;  &lt;/span&gt;to a long integer&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10.12;
  print(long(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;3&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;float(a)&lt;/td&gt;
  &lt;td class=xl6524497 width=303 style='border-top:none;border-left:none;
  width:227pt'&gt;Converts a to a floating-point number.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 101.23;
  print(float(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;101.23&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;4&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;complex(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to a
  complex number.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print(complex(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10+0j&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;5&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;str(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to
  string.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print(str(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;6&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;repr(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts object
  a to an expression string.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print(repr(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;7&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;tuple(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to
  tuple.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print((a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;8&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;list(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to
  list.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print([a])&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;[10]&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;9&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;set(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to
  set.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a =
  set(&amp;quot;10&amp;quot;); print(a)&lt;/td&gt;
  &lt;td class=xl7124497 width=51 style='border-top:none;border-left:none;
  width:38pt'&gt;{'1', '0'}&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;10&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;dict(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to
  dictonary&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = dict(a=10);
  print(a)&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;{'a': 10}&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;11&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;chr(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts an
  integer to a character.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 97;
  print(chr(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;a&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;12&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;ord(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a
  single character to its integer value.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a =
  &amp;quot;J&amp;quot;; print(ord(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;74&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;13&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;hex(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts an
  integer to a hexadecimal string.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print(hex(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;0xa&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=21 style='height:15.75pt'&gt;
  &lt;td height=21 class=xl7224497 style='height:15.75pt;border-top:none'&gt;14&lt;/td&gt;
  &lt;td class=xl7324497 style='border-top:none;border-left:none'&gt;oct(a)&lt;/td&gt;
  &lt;td class=xl7324497 style='border-top:none;border-left:none'&gt;Converts an
  integer to an octal string.&lt;/td&gt;
  &lt;td class=xl7324497 style='border-top:none;border-left:none'&gt;a = 10;
  print(oct(a))&lt;/td&gt;
  &lt;td class=xl7424497 style='border-top:none;border-left:none'&gt;0o12&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
  &lt;tr height=0 style='display:none'&gt;
  &lt;td width=63 style='width:47pt'&gt;&lt;/td&gt;
  &lt;td width=77 style='width:58pt'&gt;&lt;/td&gt;
  &lt;td width=303 style='width:227pt'&gt;&lt;/td&gt;
  &lt;td width=162 style='width:122pt'&gt;&lt;/td&gt;
  &lt;td width=51 style='width:38pt'&gt;&lt;/td&gt;
 &lt;/tr&gt;
&lt;/table&gt;

==How to execute couple of instructions on console?==
You can execute couple of instructions on console using ;. Write Statement 1;Statement 2;......and then press ''Enter''.
{{#ev:youtube|https://youtu.be/CYQCYvLE22Y|250|right}}









==How to take input from the user?==
We can take input from the user using ''input'' function. For Example : You want the user to input variable ''x'', then write x=input(&quot;Enter the value of x&quot;) and execute. Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNkVLCxZw_jcgyS-bmrIVSP

And when the input you need is of data type other than string. You can do both the input function and data conversion in a single line.
For example:
Consider the program for letting in the patients
'''c=input(&quot;Enter (1/0)&quot;);d=int(c)'''

Instead of using it in two separate lines, combine it into a single line
'''c=int(input(&quot;Enter (1/0)&quot;))'''.

To get two inputs in same line with a space between them split() is used.

a,b=input(&quot;enter a&quot;).split(&quot;enter b&quot;)
----
[[#Top]]

==If statement==
If statement is used to execute set of two contrary statements based on a condition. 

===Syntax===
If (Condition):
    Statement 1
else:
    Statement 2

If 'Condition' is true then 'Statement 1' will be executed otherwise 'Statement 2' will be executed.

Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNhHmg3SkK1uiutigcAbH9K

==Loops==
[[#Top]]&lt;br&gt;
Loops in a programming languages are used to execute set of repetitive statements. For loop and while loop are used extensively to execute a set of looping instructions.

=== For loop Syntax ===
&lt;pre&gt;
for i in range(10): 
    Statement
&lt;/pre&gt;
range(10) indicate that values 0 to 9 will be assigned to the variable i and for each value of i the Statement will be executed, e.g.
&lt;pre&gt;
for i in range(10): 
    print(i)
&lt;/pre&gt;
Output will be
&lt;pre&gt;
0
1
2
3
4
5
6
7
8
9
&lt;/pre&gt;

[[#Top]]

=== While loop Syntax ===
&lt;pre&gt;
intialisation

while(condition):
   Statement
   increment/decrement
&lt;/pre&gt;
e.g.
&lt;pre&gt;
#initialization
i=0
while(i&lt;10): 
    print(i)
    i=i+1
&lt;/pre&gt;
Output will be:
&lt;pre&gt;
0
1
2
3
4
5
6
7
8
9
&lt;/pre&gt;
Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNbl5jkVrrw1E5XSvm3GiCI

[[#TOP]]
==Importance of Indentation in Python==
 &lt;p style=&quot;text-align:justify&quot;&gt;
Indentation is used to indicate to what block of statements belong. Indentation of blocks convey program structure in Python. Indentation in Python is used to refer a group/block of code/statements. In C++ we use { and } (curly brackets) to group a set of statements. But in Python, there are no such brackets used. Instead of such brackets used in other programming languages, we use indentation in Python.&lt;/p&gt;

Use tabs,instead of spaces for ease of writing code.

Wrong indentation can lead to syntax error, or makes your output wrong for your logic e.g.
&lt;pre&gt;
#IndentationError: expected an indented block
i=-1
if i&lt;0:
print(&quot;Test successful&quot;)#Wrong indentation 
else:    
    print(&quot;Test failed&quot;)
#Output: IndentationError: expected an indented block
&lt;/pre&gt;
---
&lt;pre&gt;
#Properly Indented code:
i=-1
if i&lt;0:
    print(&quot;Test successful&quot;)#Wrong indentation
else:    
    print(&quot;Test failed&quot;)
#Output:Test successful
&lt;/pre&gt;
---
Logic changed, so output changed, with improper indentation, e.g.
---
&lt;h3&gt;Code : 1&lt;/h3&gt;
&lt;pre&gt;
sum=0
for i in range(5):
    for j in range(5):
        sum+=i
print(sum, end=&quot; &quot;)
#Output: 50
&lt;/pre&gt;
        
&lt;h3&gt;Code : 2&lt;/h3&gt;
&lt;pre&gt;
for i in range(5):
    for j in range(5):
        print(end=&quot; &quot;)
    sum+=i
print(sum, end=&quot; &quot;)
#Output:                          10
&lt;/pre&gt;
{{#ev:youtube|https://youtu.be/pmavoW419Yc|250|right}}&lt;br&gt;

[[#Top]]

==Spyder IDE Black Screen Solution==

----

 This issue is because of ''Help'' screen which is by default open. 
 We need to close it. So here's how you do it-


===Method 1:===

Step 1-    Try by closing current pane for that,  &quot;''press ctrl+shift+F4''&quot;  wait for few seconds things will appear on screen.

Step 2-    If it so than on menu bar go to ''view &gt; panes &gt; help'' unchecked &quot;''Help''&quot; option.

Step 3-    Make sure that &quot;''Help''&quot; under ''view &gt; panes'' is permanently unchecked. And ''Editor, Ipython console, Variable explorer''  are checked. 


===Method 2:===

Step 1-    Open spyder.

Step 2-   On that black screen randomly ''Left click'' on spyder &quot;''Menu bar''&quot; area you will get menu drop downs, You have to find Drop down with &quot;''Panes''&quot; option.

Step 3-   On &quot;''Panes''&quot; drop down unchecked the &quot;''Help''&quot;.

Step 4-   Wait for few seconds Spyder view will appear.

Step 5 -  Make sure that ''&quot;Help&quot;'' under view&gt;panes is permanently unchecked. And ''Editor, Ipython console, variable explorer'' are checked.


[[#Top]]</text>
      <sha1>72ubzktt0j634n6i7uk9m4zfa8wl72s</sha1>
    </revision>
    <revision>
      <id>3694</id>
      <parentid>3693</parentid>
      <timestamp>2018-09-29T01:09:33Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* Escape sequences with strings */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="20461">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_2 Contributors of this page]
==Introduction to Python==
 &lt;p style=&quot;text-align:justify&quot;&gt;Python is a widely used programming language which allows programmers to write the program in fewer lines of code. It was designed by ''Guido van Rossum'' in 1991. Python uses an interpreter instead of compiler. Basically, the main difference between compiler and interpreter is that the compiler takes the code as 'whole' and compiles it. for example, in ''C'' language and on the other side in interpreter. For example: languages like Python. It interprets the written code 'line by line', and if somewhere error is found. It stops interpreting the code from there itself. Here, in our course we will be using ''Spyder IDE''. Spyder is an integrated development environment with editing options to assist the programmers in writing programs. Spyder IDE is divided into two panes, one is console and other one is where program is written.&lt;/p&gt;

&lt;p style=&quot;text-align:justify&quot;&gt;
Python works on different platforms (Windows, Mac, Linux, Raspberry Pi, etc).
Python has a simple syntax similar to the English language.
Python has syntax that allows developers to write programs with fewer lines than some other programming languages.
Python runs on an interpreter system, meaning that code can be executed as soon as it is written. This means that prototyping can be very quick.&lt;/p&gt;
Python can be treated in a procedural way, an object-orientated way or a functional way.

==Installing Anaconda==
[[#Top]]

This article is all about installing and troubleshooting Anaconda and Spyder on different platforms.

===Windows===
Step 1 -&gt; Download the installer from here 
 &lt;p style=&quot;text-align:justify&quot;&gt;
[https://www.anaconda.com/download/#windows Download Link]. Make sure that you download the version compatible to your operating system architecture. If you have a 64 bit OS then you can download either 64 bit of 32 bit, but if you have 32 bit OS then you should download the 32 bit version only.
&lt;/p&gt;
 &lt;p style=&quot;text-align:justify&quot;&gt;
Step 2 -&gt; Double click on the .exe file that you downloaded just now and follow the instructions. If you are not sure of the installation options then just choose the default.&lt;/p&gt;
 &lt;p style=&quot;text-align:justify&quot;&gt;
Step 3 -&gt; To test your installation, open cmd (go to Start -&gt; then type cmd in the search bar and hit enter). There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.&lt;/p&gt;

===Mac===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#macos Download Link].

Step 2 -&gt; Double click on the .pkg file that you just downloaded. If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

===Linux===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#linux Download Link].

Step 2 -&gt; Go to the folder where you downloaded the .sh file and type following command 

  '''bash Anaconda-latest-Linux-x86_64.sh'''

If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

==Troubleshooting Spyder==

[[#Top]]
 &lt;p style=&quot;text-align:justify&quot;&gt;
In most of the cases, it happens that Spyder is already running and you have initiated one more instance of it. Please make sure that spyder is not running already.
If you are on Linux OS, please launch spyder through terminal. Just open the terminal and type '''spyder''' and it will launch. When Spyder opens, make sure you see Anaconda with the version written on the Ipython console. If not, try changing the path of your anaconda. Follow these steps according to your OS version.&lt;/p&gt;

====Windows====
[https://stackoverflow.com/questions/44597662/conda-command-is-not-recognized-on-windows-10 Click Here]

====Linux====
[https://stackoverflow.com/questions/18675907/how-to-run-conda Click Here]

====Mac====
[https://stackoverflow.com/questions/35246386/conda-command-not-found Click Here]

In most of the cases relaunching Spyder works.
A more general Troubleshoot is present [https://github.com/spyder-ide/spyder/wiki/Troubleshooting-Guide-and-FAQ Here]

==How to run a program in Spyder IDE?==
Go to Run on the menu bar. Click Run-&gt;Run.

[[#Top]]

==Print statements==
Print statements help to display output on console. 
{{#ev:youtube|https://youtu.be/gECkqaOwyt0|250|right}}

===Syntax===
&lt;pre&gt;print()&lt;/pre&gt;

===How to print a message?===
In order to print a message in Python, write &lt;pre&gt;print(&quot;message&quot;)&lt;/pre&gt;
Single, double, triple quote can be used print()

'''Example:'''

'''Single Quote'''
&lt;pre&gt;
print('Hello')  
Output: Hello
&lt;/pre&gt;
'''Double Quote'''
&lt;pre&gt;
print(&quot;Hello&quot;)  
Output: Hello
&lt;/pre&gt;
'''Quote within quote'''
&lt;pre&gt;print('Is &quot;Ram&quot; a good boy?')  
Output: Is &quot;Ram&quot; a good boy?&lt;/pre&gt;

[[#Top]]

==Escape sequences with strings==

We can use escape sequence within strings to make output more presentable.

'''\n'''  : It will move to next line.

'''\t'''  : It will add tab space(5space)

'''\a'''  : It will play system sound once.

'''Example:'''

&lt;pre&gt;print(&quot;Hi, \n How are you?&quot;)&lt;/pre&gt;
&lt;pre&gt;
Output: 

Hi,

How are you?
&lt;/pre&gt;
&lt;pre&gt;print(&quot;Hi, \t How are you?&quot;)&lt;/pre&gt;

Output: 

Hi, &lt;5 spaces&gt; How are you?

[[File:Escape_Sequence.jpg]]

==Variables==
[[#Top]]
&lt;pre&gt;
Variables are used to store some values. Values can be strings, integers or decimal values.  

Variable Name Rules:
1. Variable name should start with letter or underscore. Variable name cant start with number.
Example:
Valid: JOC, WIKI, JOC_WIKI, _JOC
Invalid: 1JOC, 123WIKI, 0_WIKI

2. Remaining letter other then first one can contain number, underscore.
Example:
JOC1234, WIKI012_1332

3. Variable names are case sensitivities.
Example:
JOC, jOC, joC all are different varibles. 

&lt;/pre&gt;
{{#ev:youtube|https://youtu.be/60iAXH1sm-Y|250|right}}
===How to print a variable?===
In order to print the value of a variable in python, first initialize the variable and then call it where ever you wanna use it. 
&lt;pre&gt;print(variable_name)&lt;/pre&gt;

&lt;pre&gt;For example :
x=2                # x is viable here
print(x)           # calling variable x with print function

a = &quot;JOC&quot;          # a is variable here
b = &quot;_WIKI&quot;        # b is variable here
c = a + b          # c is variable here which will provide addition of variable a and b
&lt;/pre&gt;

===Some facts about Variables===
* If you want to print variable name with a message, you can use , operator. For example : I want to print Hello Simran and Simran has been stored in a variable called ''name''.
  name=&quot;Simran&quot;
  print(&quot;Hello&quot;,name)
* If you change the value of a variable, it will store the latest value. For example :
  name=&quot;Simran&quot;
  name=&quot;Amit&quot;
  If you will execute the command ''print(name)'', Amit will be displayed.
* You can perform operations like addition, subtraction etc only on integral variables.

===Variables Types and Conversion===
&lt;pre&gt;Variable can be decimal, integer and decimal. And they can be inter covered with the help of conversion functions.

Example:
JOC = 5           Save in Memory as 5       # We have variable with name JOC having value 5 here.
JOC = int(5)      Save in Memory as 5       # Here Variable JOC holding integer value of 5. 
JOC = flot(5)     Save in Memory as 5.0     # Here variable JOC holding flot value of 5
JOC = str(5)      Save in Memory as &quot;5&quot;     # Here variable JOC holding string value of 5 or We can say 5 will be treated as string here.
JOC = complex(5)  Save in Memory as (5+0j)  # Here variable JOC holding complex value of 5.
JOC = oct(5)      Save in Memory as 012     # Here variable JOC holding octal representation of 5.
JOC = hex(5)      Save in Memory as 0xa     # Here variable JOC holding hexadecimal representation of 5

There are many more function available in Python. You can convert variable as per your requirement.
&lt;/pre&gt;


&lt;h1 style='color:black;font-family:Calibri;font-size:14.0pt;font-weight:800;
font-style:normal'&gt;Conversion Table with Eample&lt;/h1&gt;

&lt;table border=0 cellpadding=0 cellspacing=0 width=656 style='border-collapse:
 collapse;table-layout:fixed;width:492pt'&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6624497 width=63 style='height:15.0pt;width:47pt'&gt;Serial
  No&lt;/td&gt;
  &lt;td class=xl6724497 width=77 style='border-left:none;width:58pt'&gt;Function&lt;/td&gt;
  &lt;td class=xl6724497 width=303 style='border-left:none;width:227pt'&gt;Description&lt;/td&gt;
  &lt;td class=xl6724497 width=162 style='border-left:none;width:122pt'&gt;Example&lt;/td&gt;
  &lt;td class=xl6824497 width=51 style='border-left:none;width:38pt'&gt;Output&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;1&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;int(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to an
  integer.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10.12;
  print(int(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;2&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;long(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a&lt;span
  style='mso-spacerun:yes'&gt;  &lt;/span&gt;to a long integer&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10.12;
  print(long(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;3&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;float(a)&lt;/td&gt;
  &lt;td class=xl6524497 width=303 style='border-top:none;border-left:none;
  width:227pt'&gt;Converts a to a floating-point number.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 101.23;
  print(float(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;101.23&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;4&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;complex(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to a
  complex number.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print(complex(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10+0j&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;5&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;str(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to
  string.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print(str(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;6&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;repr(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts object
  a to an expression string.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print(repr(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;7&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;tuple(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to
  tuple.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print((a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;8&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;list(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to
  list.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print([a])&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;[10]&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;9&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;set(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to
  set.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a =
  set(&amp;quot;10&amp;quot;); print(a)&lt;/td&gt;
  &lt;td class=xl7124497 width=51 style='border-top:none;border-left:none;
  width:38pt'&gt;{'1', '0'}&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;10&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;dict(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to
  dictonary&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = dict(a=10);
  print(a)&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;{'a': 10}&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;11&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;chr(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts an
  integer to a character.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 97;
  print(chr(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;a&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;12&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;ord(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a
  single character to its integer value.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a =
  &amp;quot;J&amp;quot;; print(ord(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;74&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;13&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;hex(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts an
  integer to a hexadecimal string.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print(hex(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;0xa&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=21 style='height:15.75pt'&gt;
  &lt;td height=21 class=xl7224497 style='height:15.75pt;border-top:none'&gt;14&lt;/td&gt;
  &lt;td class=xl7324497 style='border-top:none;border-left:none'&gt;oct(a)&lt;/td&gt;
  &lt;td class=xl7324497 style='border-top:none;border-left:none'&gt;Converts an
  integer to an octal string.&lt;/td&gt;
  &lt;td class=xl7324497 style='border-top:none;border-left:none'&gt;a = 10;
  print(oct(a))&lt;/td&gt;
  &lt;td class=xl7424497 style='border-top:none;border-left:none'&gt;0o12&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
  &lt;tr height=0 style='display:none'&gt;
  &lt;td width=63 style='width:47pt'&gt;&lt;/td&gt;
  &lt;td width=77 style='width:58pt'&gt;&lt;/td&gt;
  &lt;td width=303 style='width:227pt'&gt;&lt;/td&gt;
  &lt;td width=162 style='width:122pt'&gt;&lt;/td&gt;
  &lt;td width=51 style='width:38pt'&gt;&lt;/td&gt;
 &lt;/tr&gt;
&lt;/table&gt;

==How to execute couple of instructions on console?==
You can execute couple of instructions on console using ;. Write Statement 1;Statement 2;......and then press ''Enter''.
{{#ev:youtube|https://youtu.be/CYQCYvLE22Y|250|right}}









==How to take input from the user?==
We can take input from the user using ''input'' function. For Example : You want the user to input variable ''x'', then write x=input(&quot;Enter the value of x&quot;) and execute. Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNkVLCxZw_jcgyS-bmrIVSP

And when the input you need is of data type other than string. You can do both the input function and data conversion in a single line.
For example:
Consider the program for letting in the patients
'''c=input(&quot;Enter (1/0)&quot;);d=int(c)'''

Instead of using it in two separate lines, combine it into a single line
'''c=int(input(&quot;Enter (1/0)&quot;))'''.

To get two inputs in same line with a space between them split() is used.

a,b=input(&quot;enter a&quot;).split(&quot;enter b&quot;)
----
[[#Top]]

==If statement==
If statement is used to execute set of two contrary statements based on a condition. 

===Syntax===
If (Condition):
    Statement 1
else:
    Statement 2

If 'Condition' is true then 'Statement 1' will be executed otherwise 'Statement 2' will be executed.

Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNhHmg3SkK1uiutigcAbH9K

==Loops==
[[#Top]]&lt;br&gt;
Loops in a programming languages are used to execute set of repetitive statements. For loop and while loop are used extensively to execute a set of looping instructions.

=== For loop Syntax ===
&lt;pre&gt;
for i in range(10): 
    Statement
&lt;/pre&gt;
range(10) indicate that values 0 to 9 will be assigned to the variable i and for each value of i the Statement will be executed, e.g.
&lt;pre&gt;
for i in range(10): 
    print(i)
&lt;/pre&gt;
Output will be
&lt;pre&gt;
0
1
2
3
4
5
6
7
8
9
&lt;/pre&gt;

[[#Top]]

=== While loop Syntax ===
&lt;pre&gt;
intialisation

while(condition):
   Statement
   increment/decrement
&lt;/pre&gt;
e.g.
&lt;pre&gt;
#initialization
i=0
while(i&lt;10): 
    print(i)
    i=i+1
&lt;/pre&gt;
Output will be:
&lt;pre&gt;
0
1
2
3
4
5
6
7
8
9
&lt;/pre&gt;
Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNbl5jkVrrw1E5XSvm3GiCI

[[#TOP]]
==Importance of Indentation in Python==
 &lt;p style=&quot;text-align:justify&quot;&gt;
Indentation is used to indicate to what block of statements belong. Indentation of blocks convey program structure in Python. Indentation in Python is used to refer a group/block of code/statements. In C++ we use { and } (curly brackets) to group a set of statements. But in Python, there are no such brackets used. Instead of such brackets used in other programming languages, we use indentation in Python.&lt;/p&gt;

Use tabs,instead of spaces for ease of writing code.

Wrong indentation can lead to syntax error, or makes your output wrong for your logic e.g.
&lt;pre&gt;
#IndentationError: expected an indented block
i=-1
if i&lt;0:
print(&quot;Test successful&quot;)#Wrong indentation 
else:    
    print(&quot;Test failed&quot;)
#Output: IndentationError: expected an indented block
&lt;/pre&gt;
---
&lt;pre&gt;
#Properly Indented code:
i=-1
if i&lt;0:
    print(&quot;Test successful&quot;)#Wrong indentation
else:    
    print(&quot;Test failed&quot;)
#Output:Test successful
&lt;/pre&gt;
---
Logic changed, so output changed, with improper indentation, e.g.
---
&lt;h3&gt;Code : 1&lt;/h3&gt;
&lt;pre&gt;
sum=0
for i in range(5):
    for j in range(5):
        sum+=i
print(sum, end=&quot; &quot;)
#Output: 50
&lt;/pre&gt;
        
&lt;h3&gt;Code : 2&lt;/h3&gt;
&lt;pre&gt;
for i in range(5):
    for j in range(5):
        print(end=&quot; &quot;)
    sum+=i
print(sum, end=&quot; &quot;)
#Output:                          10
&lt;/pre&gt;
{{#ev:youtube|https://youtu.be/pmavoW419Yc|250|right}}&lt;br&gt;

[[#Top]]

==Spyder IDE Black Screen Solution==

----

 This issue is because of ''Help'' screen which is by default open. 
 We need to close it. So here's how you do it-


===Method 1:===

Step 1-    Try by closing current pane for that,  &quot;''press ctrl+shift+F4''&quot;  wait for few seconds things will appear on screen.

Step 2-    If it so than on menu bar go to ''view &gt; panes &gt; help'' unchecked &quot;''Help''&quot; option.

Step 3-    Make sure that &quot;''Help''&quot; under ''view &gt; panes'' is permanently unchecked. And ''Editor, Ipython console, Variable explorer''  are checked. 


===Method 2:===

Step 1-    Open spyder.

Step 2-   On that black screen randomly ''Left click'' on spyder &quot;''Menu bar''&quot; area you will get menu drop downs, You have to find Drop down with &quot;''Panes''&quot; option.

Step 3-   On &quot;''Panes''&quot; drop down unchecked the &quot;''Help''&quot;.

Step 4-   Wait for few seconds Spyder view will appear.

Step 5 -  Make sure that ''&quot;Help&quot;'' under view&gt;panes is permanently unchecked. And ''Editor, Ipython console, variable explorer'' are checked.


[[#Top]]</text>
      <sha1>d6ramsao7dvhuzdxfk333urle71rvxy</sha1>
    </revision>
    <revision>
      <id>3695</id>
      <parentid>3694</parentid>
      <timestamp>2018-09-29T01:11:34Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* Variables */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="20465">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_2 Contributors of this page]
==Introduction to Python==
 &lt;p style=&quot;text-align:justify&quot;&gt;Python is a widely used programming language which allows programmers to write the program in fewer lines of code. It was designed by ''Guido van Rossum'' in 1991. Python uses an interpreter instead of compiler. Basically, the main difference between compiler and interpreter is that the compiler takes the code as 'whole' and compiles it. for example, in ''C'' language and on the other side in interpreter. For example: languages like Python. It interprets the written code 'line by line', and if somewhere error is found. It stops interpreting the code from there itself. Here, in our course we will be using ''Spyder IDE''. Spyder is an integrated development environment with editing options to assist the programmers in writing programs. Spyder IDE is divided into two panes, one is console and other one is where program is written.&lt;/p&gt;

&lt;p style=&quot;text-align:justify&quot;&gt;
Python works on different platforms (Windows, Mac, Linux, Raspberry Pi, etc).
Python has a simple syntax similar to the English language.
Python has syntax that allows developers to write programs with fewer lines than some other programming languages.
Python runs on an interpreter system, meaning that code can be executed as soon as it is written. This means that prototyping can be very quick.&lt;/p&gt;
Python can be treated in a procedural way, an object-orientated way or a functional way.

==Installing Anaconda==
[[#Top]]

This article is all about installing and troubleshooting Anaconda and Spyder on different platforms.

===Windows===
Step 1 -&gt; Download the installer from here 
 &lt;p style=&quot;text-align:justify&quot;&gt;
[https://www.anaconda.com/download/#windows Download Link]. Make sure that you download the version compatible to your operating system architecture. If you have a 64 bit OS then you can download either 64 bit of 32 bit, but if you have 32 bit OS then you should download the 32 bit version only.
&lt;/p&gt;
 &lt;p style=&quot;text-align:justify&quot;&gt;
Step 2 -&gt; Double click on the .exe file that you downloaded just now and follow the instructions. If you are not sure of the installation options then just choose the default.&lt;/p&gt;
 &lt;p style=&quot;text-align:justify&quot;&gt;
Step 3 -&gt; To test your installation, open cmd (go to Start -&gt; then type cmd in the search bar and hit enter). There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.&lt;/p&gt;

===Mac===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#macos Download Link].

Step 2 -&gt; Double click on the .pkg file that you just downloaded. If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

===Linux===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#linux Download Link].

Step 2 -&gt; Go to the folder where you downloaded the .sh file and type following command 

  '''bash Anaconda-latest-Linux-x86_64.sh'''

If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

==Troubleshooting Spyder==

[[#Top]]
 &lt;p style=&quot;text-align:justify&quot;&gt;
In most of the cases, it happens that Spyder is already running and you have initiated one more instance of it. Please make sure that spyder is not running already.
If you are on Linux OS, please launch spyder through terminal. Just open the terminal and type '''spyder''' and it will launch. When Spyder opens, make sure you see Anaconda with the version written on the Ipython console. If not, try changing the path of your anaconda. Follow these steps according to your OS version.&lt;/p&gt;

====Windows====
[https://stackoverflow.com/questions/44597662/conda-command-is-not-recognized-on-windows-10 Click Here]

====Linux====
[https://stackoverflow.com/questions/18675907/how-to-run-conda Click Here]

====Mac====
[https://stackoverflow.com/questions/35246386/conda-command-not-found Click Here]

In most of the cases relaunching Spyder works.
A more general Troubleshoot is present [https://github.com/spyder-ide/spyder/wiki/Troubleshooting-Guide-and-FAQ Here]

==How to run a program in Spyder IDE?==
Go to Run on the menu bar. Click Run-&gt;Run.

[[#Top]]

==Print statements==
Print statements help to display output on console. 
{{#ev:youtube|https://youtu.be/gECkqaOwyt0|250|right}}

===Syntax===
&lt;pre&gt;print()&lt;/pre&gt;

===How to print a message?===
In order to print a message in Python, write &lt;pre&gt;print(&quot;message&quot;)&lt;/pre&gt;
Single, double, triple quote can be used print()

'''Example:'''

'''Single Quote'''
&lt;pre&gt;
print('Hello')  
Output: Hello
&lt;/pre&gt;
'''Double Quote'''
&lt;pre&gt;
print(&quot;Hello&quot;)  
Output: Hello
&lt;/pre&gt;
'''Quote within quote'''
&lt;pre&gt;print('Is &quot;Ram&quot; a good boy?')  
Output: Is &quot;Ram&quot; a good boy?&lt;/pre&gt;

[[#Top]]

==Escape sequences with strings==

We can use escape sequence within strings to make output more presentable.

'''\n'''  : It will move to next line.

'''\t'''  : It will add tab space(5space)

'''\a'''  : It will play system sound once.

'''Example:'''

&lt;pre&gt;print(&quot;Hi, \n How are you?&quot;)&lt;/pre&gt;
&lt;pre&gt;
Output: 

Hi,

How are you?
&lt;/pre&gt;
&lt;pre&gt;print(&quot;Hi, \t How are you?&quot;)&lt;/pre&gt;

Output: 

Hi, &lt;5 spaces&gt; How are you?

[[File:Escape_Sequence.jpg]]

==Variables==
[[#Top]]
&lt;pre&gt;
Variables are used to store some values. Values can be strings, integers or decimal values.  

Variable Name Rules:
1. Variable name should start with letter or underscore. Variable name cant start with number.
Example:
✓ Valid: JOC, WIKI, JOC_WIKI, _JOC
Invalid: 1JOC, 123WIKI, 0_WIKI

2. Remaining letter other then first one can contain number, underscore.
Example:
JOC1234, WIKI012_1332

3. Variable names are case sensitivities.
Example:
JOC, jOC, joC all are different varibles. 

&lt;/pre&gt;
{{#ev:youtube|https://youtu.be/60iAXH1sm-Y|250|right}}
===How to print a variable?===
In order to print the value of a variable in python, first initialize the variable and then call it where ever you wanna use it. 
&lt;pre&gt;print(variable_name)&lt;/pre&gt;

&lt;pre&gt;For example :
x=2                # x is viable here
print(x)           # calling variable x with print function

a = &quot;JOC&quot;          # a is variable here
b = &quot;_WIKI&quot;        # b is variable here
c = a + b          # c is variable here which will provide addition of variable a and b
&lt;/pre&gt;

===Some facts about Variables===
* If you want to print variable name with a message, you can use , operator. For example : I want to print Hello Simran and Simran has been stored in a variable called ''name''.
  name=&quot;Simran&quot;
  print(&quot;Hello&quot;,name)
* If you change the value of a variable, it will store the latest value. For example :
  name=&quot;Simran&quot;
  name=&quot;Amit&quot;
  If you will execute the command ''print(name)'', Amit will be displayed.
* You can perform operations like addition, subtraction etc only on integral variables.

===Variables Types and Conversion===
&lt;pre&gt;Variable can be decimal, integer and decimal. And they can be inter covered with the help of conversion functions.

Example:
JOC = 5           Save in Memory as 5       # We have variable with name JOC having value 5 here.
JOC = int(5)      Save in Memory as 5       # Here Variable JOC holding integer value of 5. 
JOC = flot(5)     Save in Memory as 5.0     # Here variable JOC holding flot value of 5
JOC = str(5)      Save in Memory as &quot;5&quot;     # Here variable JOC holding string value of 5 or We can say 5 will be treated as string here.
JOC = complex(5)  Save in Memory as (5+0j)  # Here variable JOC holding complex value of 5.
JOC = oct(5)      Save in Memory as 012     # Here variable JOC holding octal representation of 5.
JOC = hex(5)      Save in Memory as 0xa     # Here variable JOC holding hexadecimal representation of 5

There are many more function available in Python. You can convert variable as per your requirement.
&lt;/pre&gt;


&lt;h1 style='color:black;font-family:Calibri;font-size:14.0pt;font-weight:800;
font-style:normal'&gt;Conversion Table with Eample&lt;/h1&gt;

&lt;table border=0 cellpadding=0 cellspacing=0 width=656 style='border-collapse:
 collapse;table-layout:fixed;width:492pt'&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6624497 width=63 style='height:15.0pt;width:47pt'&gt;Serial
  No&lt;/td&gt;
  &lt;td class=xl6724497 width=77 style='border-left:none;width:58pt'&gt;Function&lt;/td&gt;
  &lt;td class=xl6724497 width=303 style='border-left:none;width:227pt'&gt;Description&lt;/td&gt;
  &lt;td class=xl6724497 width=162 style='border-left:none;width:122pt'&gt;Example&lt;/td&gt;
  &lt;td class=xl6824497 width=51 style='border-left:none;width:38pt'&gt;Output&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;1&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;int(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to an
  integer.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10.12;
  print(int(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;2&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;long(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a&lt;span
  style='mso-spacerun:yes'&gt;  &lt;/span&gt;to a long integer&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10.12;
  print(long(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;3&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;float(a)&lt;/td&gt;
  &lt;td class=xl6524497 width=303 style='border-top:none;border-left:none;
  width:227pt'&gt;Converts a to a floating-point number.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 101.23;
  print(float(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;101.23&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;4&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;complex(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to a
  complex number.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print(complex(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10+0j&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;5&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;str(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to
  string.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print(str(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;6&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;repr(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts object
  a to an expression string.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print(repr(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;7&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;tuple(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to
  tuple.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print((a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;8&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;list(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to
  list.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print([a])&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;[10]&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;9&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;set(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to
  set.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a =
  set(&amp;quot;10&amp;quot;); print(a)&lt;/td&gt;
  &lt;td class=xl7124497 width=51 style='border-top:none;border-left:none;
  width:38pt'&gt;{'1', '0'}&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;10&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;dict(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to
  dictonary&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = dict(a=10);
  print(a)&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;{'a': 10}&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;11&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;chr(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts an
  integer to a character.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 97;
  print(chr(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;a&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;12&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;ord(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a
  single character to its integer value.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a =
  &amp;quot;J&amp;quot;; print(ord(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;74&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;13&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;hex(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts an
  integer to a hexadecimal string.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print(hex(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;0xa&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=21 style='height:15.75pt'&gt;
  &lt;td height=21 class=xl7224497 style='height:15.75pt;border-top:none'&gt;14&lt;/td&gt;
  &lt;td class=xl7324497 style='border-top:none;border-left:none'&gt;oct(a)&lt;/td&gt;
  &lt;td class=xl7324497 style='border-top:none;border-left:none'&gt;Converts an
  integer to an octal string.&lt;/td&gt;
  &lt;td class=xl7324497 style='border-top:none;border-left:none'&gt;a = 10;
  print(oct(a))&lt;/td&gt;
  &lt;td class=xl7424497 style='border-top:none;border-left:none'&gt;0o12&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
  &lt;tr height=0 style='display:none'&gt;
  &lt;td width=63 style='width:47pt'&gt;&lt;/td&gt;
  &lt;td width=77 style='width:58pt'&gt;&lt;/td&gt;
  &lt;td width=303 style='width:227pt'&gt;&lt;/td&gt;
  &lt;td width=162 style='width:122pt'&gt;&lt;/td&gt;
  &lt;td width=51 style='width:38pt'&gt;&lt;/td&gt;
 &lt;/tr&gt;
&lt;/table&gt;

==How to execute couple of instructions on console?==
You can execute couple of instructions on console using ;. Write Statement 1;Statement 2;......and then press ''Enter''.
{{#ev:youtube|https://youtu.be/CYQCYvLE22Y|250|right}}









==How to take input from the user?==
We can take input from the user using ''input'' function. For Example : You want the user to input variable ''x'', then write x=input(&quot;Enter the value of x&quot;) and execute. Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNkVLCxZw_jcgyS-bmrIVSP

And when the input you need is of data type other than string. You can do both the input function and data conversion in a single line.
For example:
Consider the program for letting in the patients
'''c=input(&quot;Enter (1/0)&quot;);d=int(c)'''

Instead of using it in two separate lines, combine it into a single line
'''c=int(input(&quot;Enter (1/0)&quot;))'''.

To get two inputs in same line with a space between them split() is used.

a,b=input(&quot;enter a&quot;).split(&quot;enter b&quot;)
----
[[#Top]]

==If statement==
If statement is used to execute set of two contrary statements based on a condition. 

===Syntax===
If (Condition):
    Statement 1
else:
    Statement 2

If 'Condition' is true then 'Statement 1' will be executed otherwise 'Statement 2' will be executed.

Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNhHmg3SkK1uiutigcAbH9K

==Loops==
[[#Top]]&lt;br&gt;
Loops in a programming languages are used to execute set of repetitive statements. For loop and while loop are used extensively to execute a set of looping instructions.

=== For loop Syntax ===
&lt;pre&gt;
for i in range(10): 
    Statement
&lt;/pre&gt;
range(10) indicate that values 0 to 9 will be assigned to the variable i and for each value of i the Statement will be executed, e.g.
&lt;pre&gt;
for i in range(10): 
    print(i)
&lt;/pre&gt;
Output will be
&lt;pre&gt;
0
1
2
3
4
5
6
7
8
9
&lt;/pre&gt;

[[#Top]]

=== While loop Syntax ===
&lt;pre&gt;
intialisation

while(condition):
   Statement
   increment/decrement
&lt;/pre&gt;
e.g.
&lt;pre&gt;
#initialization
i=0
while(i&lt;10): 
    print(i)
    i=i+1
&lt;/pre&gt;
Output will be:
&lt;pre&gt;
0
1
2
3
4
5
6
7
8
9
&lt;/pre&gt;
Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNbl5jkVrrw1E5XSvm3GiCI

[[#TOP]]
==Importance of Indentation in Python==
 &lt;p style=&quot;text-align:justify&quot;&gt;
Indentation is used to indicate to what block of statements belong. Indentation of blocks convey program structure in Python. Indentation in Python is used to refer a group/block of code/statements. In C++ we use { and } (curly brackets) to group a set of statements. But in Python, there are no such brackets used. Instead of such brackets used in other programming languages, we use indentation in Python.&lt;/p&gt;

Use tabs,instead of spaces for ease of writing code.

Wrong indentation can lead to syntax error, or makes your output wrong for your logic e.g.
&lt;pre&gt;
#IndentationError: expected an indented block
i=-1
if i&lt;0:
print(&quot;Test successful&quot;)#Wrong indentation 
else:    
    print(&quot;Test failed&quot;)
#Output: IndentationError: expected an indented block
&lt;/pre&gt;
---
&lt;pre&gt;
#Properly Indented code:
i=-1
if i&lt;0:
    print(&quot;Test successful&quot;)#Wrong indentation
else:    
    print(&quot;Test failed&quot;)
#Output:Test successful
&lt;/pre&gt;
---
Logic changed, so output changed, with improper indentation, e.g.
---
&lt;h3&gt;Code : 1&lt;/h3&gt;
&lt;pre&gt;
sum=0
for i in range(5):
    for j in range(5):
        sum+=i
print(sum, end=&quot; &quot;)
#Output: 50
&lt;/pre&gt;
        
&lt;h3&gt;Code : 2&lt;/h3&gt;
&lt;pre&gt;
for i in range(5):
    for j in range(5):
        print(end=&quot; &quot;)
    sum+=i
print(sum, end=&quot; &quot;)
#Output:                          10
&lt;/pre&gt;
{{#ev:youtube|https://youtu.be/pmavoW419Yc|250|right}}&lt;br&gt;

[[#Top]]

==Spyder IDE Black Screen Solution==

----

 This issue is because of ''Help'' screen which is by default open. 
 We need to close it. So here's how you do it-


===Method 1:===

Step 1-    Try by closing current pane for that,  &quot;''press ctrl+shift+F4''&quot;  wait for few seconds things will appear on screen.

Step 2-    If it so than on menu bar go to ''view &gt; panes &gt; help'' unchecked &quot;''Help''&quot; option.

Step 3-    Make sure that &quot;''Help''&quot; under ''view &gt; panes'' is permanently unchecked. And ''Editor, Ipython console, Variable explorer''  are checked. 


===Method 2:===

Step 1-    Open spyder.

Step 2-   On that black screen randomly ''Left click'' on spyder &quot;''Menu bar''&quot; area you will get menu drop downs, You have to find Drop down with &quot;''Panes''&quot; option.

Step 3-   On &quot;''Panes''&quot; drop down unchecked the &quot;''Help''&quot;.

Step 4-   Wait for few seconds Spyder view will appear.

Step 5 -  Make sure that ''&quot;Help&quot;'' under view&gt;panes is permanently unchecked. And ''Editor, Ipython console, variable explorer'' are checked.


[[#Top]]</text>
      <sha1>qiixcznmoo0zkkydqcfsam1wf2voff6</sha1>
    </revision>
    <revision>
      <id>3696</id>
      <parentid>3695</parentid>
      <timestamp>2018-09-29T01:13:20Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* Variables */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="20485">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_2 Contributors of this page]
==Introduction to Python==
 &lt;p style=&quot;text-align:justify&quot;&gt;Python is a widely used programming language which allows programmers to write the program in fewer lines of code. It was designed by ''Guido van Rossum'' in 1991. Python uses an interpreter instead of compiler. Basically, the main difference between compiler and interpreter is that the compiler takes the code as 'whole' and compiles it. for example, in ''C'' language and on the other side in interpreter. For example: languages like Python. It interprets the written code 'line by line', and if somewhere error is found. It stops interpreting the code from there itself. Here, in our course we will be using ''Spyder IDE''. Spyder is an integrated development environment with editing options to assist the programmers in writing programs. Spyder IDE is divided into two panes, one is console and other one is where program is written.&lt;/p&gt;

&lt;p style=&quot;text-align:justify&quot;&gt;
Python works on different platforms (Windows, Mac, Linux, Raspberry Pi, etc).
Python has a simple syntax similar to the English language.
Python has syntax that allows developers to write programs with fewer lines than some other programming languages.
Python runs on an interpreter system, meaning that code can be executed as soon as it is written. This means that prototyping can be very quick.&lt;/p&gt;
Python can be treated in a procedural way, an object-orientated way or a functional way.

==Installing Anaconda==
[[#Top]]

This article is all about installing and troubleshooting Anaconda and Spyder on different platforms.

===Windows===
Step 1 -&gt; Download the installer from here 
 &lt;p style=&quot;text-align:justify&quot;&gt;
[https://www.anaconda.com/download/#windows Download Link]. Make sure that you download the version compatible to your operating system architecture. If you have a 64 bit OS then you can download either 64 bit of 32 bit, but if you have 32 bit OS then you should download the 32 bit version only.
&lt;/p&gt;
 &lt;p style=&quot;text-align:justify&quot;&gt;
Step 2 -&gt; Double click on the .exe file that you downloaded just now and follow the instructions. If you are not sure of the installation options then just choose the default.&lt;/p&gt;
 &lt;p style=&quot;text-align:justify&quot;&gt;
Step 3 -&gt; To test your installation, open cmd (go to Start -&gt; then type cmd in the search bar and hit enter). There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.&lt;/p&gt;

===Mac===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#macos Download Link].

Step 2 -&gt; Double click on the .pkg file that you just downloaded. If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

===Linux===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#linux Download Link].

Step 2 -&gt; Go to the folder where you downloaded the .sh file and type following command 

  '''bash Anaconda-latest-Linux-x86_64.sh'''

If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

==Troubleshooting Spyder==

[[#Top]]
 &lt;p style=&quot;text-align:justify&quot;&gt;
In most of the cases, it happens that Spyder is already running and you have initiated one more instance of it. Please make sure that spyder is not running already.
If you are on Linux OS, please launch spyder through terminal. Just open the terminal and type '''spyder''' and it will launch. When Spyder opens, make sure you see Anaconda with the version written on the Ipython console. If not, try changing the path of your anaconda. Follow these steps according to your OS version.&lt;/p&gt;

====Windows====
[https://stackoverflow.com/questions/44597662/conda-command-is-not-recognized-on-windows-10 Click Here]

====Linux====
[https://stackoverflow.com/questions/18675907/how-to-run-conda Click Here]

====Mac====
[https://stackoverflow.com/questions/35246386/conda-command-not-found Click Here]

In most of the cases relaunching Spyder works.
A more general Troubleshoot is present [https://github.com/spyder-ide/spyder/wiki/Troubleshooting-Guide-and-FAQ Here]

==How to run a program in Spyder IDE?==
Go to Run on the menu bar. Click Run-&gt;Run.

[[#Top]]

==Print statements==
Print statements help to display output on console. 
{{#ev:youtube|https://youtu.be/gECkqaOwyt0|250|right}}

===Syntax===
&lt;pre&gt;print()&lt;/pre&gt;

===How to print a message?===
In order to print a message in Python, write &lt;pre&gt;print(&quot;message&quot;)&lt;/pre&gt;
Single, double, triple quote can be used print()

'''Example:'''

'''Single Quote'''
&lt;pre&gt;
print('Hello')  
Output: Hello
&lt;/pre&gt;
'''Double Quote'''
&lt;pre&gt;
print(&quot;Hello&quot;)  
Output: Hello
&lt;/pre&gt;
'''Quote within quote'''
&lt;pre&gt;print('Is &quot;Ram&quot; a good boy?')  
Output: Is &quot;Ram&quot; a good boy?&lt;/pre&gt;

[[#Top]]

==Escape sequences with strings==

We can use escape sequence within strings to make output more presentable.

'''\n'''  : It will move to next line.

'''\t'''  : It will add tab space(5space)

'''\a'''  : It will play system sound once.

'''Example:'''

&lt;pre&gt;print(&quot;Hi, \n How are you?&quot;)&lt;/pre&gt;
&lt;pre&gt;
Output: 

Hi,

How are you?
&lt;/pre&gt;
&lt;pre&gt;print(&quot;Hi, \t How are you?&quot;)&lt;/pre&gt;

Output: 

Hi, &lt;5 spaces&gt; How are you?

[[File:Escape_Sequence.jpg]]

==Variables==
[[#Top]]
&lt;pre&gt;
Variables are used to store some values. Values can be strings, integers or decimal values.  

Variable Name Rules:
1. Variable name should start with letter or underscore. Variable name cant start with number.
Example:
&lt;font size=5&gt;✓&lt;/font&gt; Valid: JOC, WIKI, JOC_WIKI, _JOC
Invalid: 1JOC, 123WIKI, 0_WIKI

2. Remaining letter other then first one can contain number, underscore.
Example:
JOC1234, WIKI012_1332

3. Variable names are case sensitivities.
Example:
JOC, jOC, joC all are different varibles. 

&lt;/pre&gt;
{{#ev:youtube|https://youtu.be/60iAXH1sm-Y|250|right}}
===How to print a variable?===
In order to print the value of a variable in python, first initialize the variable and then call it where ever you wanna use it. 
&lt;pre&gt;print(variable_name)&lt;/pre&gt;

&lt;pre&gt;For example :
x=2                # x is viable here
print(x)           # calling variable x with print function

a = &quot;JOC&quot;          # a is variable here
b = &quot;_WIKI&quot;        # b is variable here
c = a + b          # c is variable here which will provide addition of variable a and b
&lt;/pre&gt;

===Some facts about Variables===
* If you want to print variable name with a message, you can use , operator. For example : I want to print Hello Simran and Simran has been stored in a variable called ''name''.
  name=&quot;Simran&quot;
  print(&quot;Hello&quot;,name)
* If you change the value of a variable, it will store the latest value. For example :
  name=&quot;Simran&quot;
  name=&quot;Amit&quot;
  If you will execute the command ''print(name)'', Amit will be displayed.
* You can perform operations like addition, subtraction etc only on integral variables.

===Variables Types and Conversion===
&lt;pre&gt;Variable can be decimal, integer and decimal. And they can be inter covered with the help of conversion functions.

Example:
JOC = 5           Save in Memory as 5       # We have variable with name JOC having value 5 here.
JOC = int(5)      Save in Memory as 5       # Here Variable JOC holding integer value of 5. 
JOC = flot(5)     Save in Memory as 5.0     # Here variable JOC holding flot value of 5
JOC = str(5)      Save in Memory as &quot;5&quot;     # Here variable JOC holding string value of 5 or We can say 5 will be treated as string here.
JOC = complex(5)  Save in Memory as (5+0j)  # Here variable JOC holding complex value of 5.
JOC = oct(5)      Save in Memory as 012     # Here variable JOC holding octal representation of 5.
JOC = hex(5)      Save in Memory as 0xa     # Here variable JOC holding hexadecimal representation of 5

There are many more function available in Python. You can convert variable as per your requirement.
&lt;/pre&gt;


&lt;h1 style='color:black;font-family:Calibri;font-size:14.0pt;font-weight:800;
font-style:normal'&gt;Conversion Table with Eample&lt;/h1&gt;

&lt;table border=0 cellpadding=0 cellspacing=0 width=656 style='border-collapse:
 collapse;table-layout:fixed;width:492pt'&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6624497 width=63 style='height:15.0pt;width:47pt'&gt;Serial
  No&lt;/td&gt;
  &lt;td class=xl6724497 width=77 style='border-left:none;width:58pt'&gt;Function&lt;/td&gt;
  &lt;td class=xl6724497 width=303 style='border-left:none;width:227pt'&gt;Description&lt;/td&gt;
  &lt;td class=xl6724497 width=162 style='border-left:none;width:122pt'&gt;Example&lt;/td&gt;
  &lt;td class=xl6824497 width=51 style='border-left:none;width:38pt'&gt;Output&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;1&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;int(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to an
  integer.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10.12;
  print(int(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;2&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;long(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a&lt;span
  style='mso-spacerun:yes'&gt;  &lt;/span&gt;to a long integer&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10.12;
  print(long(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;3&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;float(a)&lt;/td&gt;
  &lt;td class=xl6524497 width=303 style='border-top:none;border-left:none;
  width:227pt'&gt;Converts a to a floating-point number.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 101.23;
  print(float(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;101.23&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;4&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;complex(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to a
  complex number.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print(complex(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10+0j&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;5&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;str(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to
  string.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print(str(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;6&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;repr(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts object
  a to an expression string.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print(repr(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;7&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;tuple(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to
  tuple.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print((a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;8&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;list(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to
  list.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print([a])&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;[10]&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;9&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;set(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to
  set.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a =
  set(&amp;quot;10&amp;quot;); print(a)&lt;/td&gt;
  &lt;td class=xl7124497 width=51 style='border-top:none;border-left:none;
  width:38pt'&gt;{'1', '0'}&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;10&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;dict(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to
  dictonary&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = dict(a=10);
  print(a)&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;{'a': 10}&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;11&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;chr(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts an
  integer to a character.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 97;
  print(chr(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;a&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;12&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;ord(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a
  single character to its integer value.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a =
  &amp;quot;J&amp;quot;; print(ord(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;74&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;13&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;hex(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts an
  integer to a hexadecimal string.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print(hex(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;0xa&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=21 style='height:15.75pt'&gt;
  &lt;td height=21 class=xl7224497 style='height:15.75pt;border-top:none'&gt;14&lt;/td&gt;
  &lt;td class=xl7324497 style='border-top:none;border-left:none'&gt;oct(a)&lt;/td&gt;
  &lt;td class=xl7324497 style='border-top:none;border-left:none'&gt;Converts an
  integer to an octal string.&lt;/td&gt;
  &lt;td class=xl7324497 style='border-top:none;border-left:none'&gt;a = 10;
  print(oct(a))&lt;/td&gt;
  &lt;td class=xl7424497 style='border-top:none;border-left:none'&gt;0o12&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
  &lt;tr height=0 style='display:none'&gt;
  &lt;td width=63 style='width:47pt'&gt;&lt;/td&gt;
  &lt;td width=77 style='width:58pt'&gt;&lt;/td&gt;
  &lt;td width=303 style='width:227pt'&gt;&lt;/td&gt;
  &lt;td width=162 style='width:122pt'&gt;&lt;/td&gt;
  &lt;td width=51 style='width:38pt'&gt;&lt;/td&gt;
 &lt;/tr&gt;
&lt;/table&gt;

==How to execute couple of instructions on console?==
You can execute couple of instructions on console using ;. Write Statement 1;Statement 2;......and then press ''Enter''.
{{#ev:youtube|https://youtu.be/CYQCYvLE22Y|250|right}}









==How to take input from the user?==
We can take input from the user using ''input'' function. For Example : You want the user to input variable ''x'', then write x=input(&quot;Enter the value of x&quot;) and execute. Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNkVLCxZw_jcgyS-bmrIVSP

And when the input you need is of data type other than string. You can do both the input function and data conversion in a single line.
For example:
Consider the program for letting in the patients
'''c=input(&quot;Enter (1/0)&quot;);d=int(c)'''

Instead of using it in two separate lines, combine it into a single line
'''c=int(input(&quot;Enter (1/0)&quot;))'''.

To get two inputs in same line with a space between them split() is used.

a,b=input(&quot;enter a&quot;).split(&quot;enter b&quot;)
----
[[#Top]]

==If statement==
If statement is used to execute set of two contrary statements based on a condition. 

===Syntax===
If (Condition):
    Statement 1
else:
    Statement 2

If 'Condition' is true then 'Statement 1' will be executed otherwise 'Statement 2' will be executed.

Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNhHmg3SkK1uiutigcAbH9K

==Loops==
[[#Top]]&lt;br&gt;
Loops in a programming languages are used to execute set of repetitive statements. For loop and while loop are used extensively to execute a set of looping instructions.

=== For loop Syntax ===
&lt;pre&gt;
for i in range(10): 
    Statement
&lt;/pre&gt;
range(10) indicate that values 0 to 9 will be assigned to the variable i and for each value of i the Statement will be executed, e.g.
&lt;pre&gt;
for i in range(10): 
    print(i)
&lt;/pre&gt;
Output will be
&lt;pre&gt;
0
1
2
3
4
5
6
7
8
9
&lt;/pre&gt;

[[#Top]]

=== While loop Syntax ===
&lt;pre&gt;
intialisation

while(condition):
   Statement
   increment/decrement
&lt;/pre&gt;
e.g.
&lt;pre&gt;
#initialization
i=0
while(i&lt;10): 
    print(i)
    i=i+1
&lt;/pre&gt;
Output will be:
&lt;pre&gt;
0
1
2
3
4
5
6
7
8
9
&lt;/pre&gt;
Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNbl5jkVrrw1E5XSvm3GiCI

[[#TOP]]
==Importance of Indentation in Python==
 &lt;p style=&quot;text-align:justify&quot;&gt;
Indentation is used to indicate to what block of statements belong. Indentation of blocks convey program structure in Python. Indentation in Python is used to refer a group/block of code/statements. In C++ we use { and } (curly brackets) to group a set of statements. But in Python, there are no such brackets used. Instead of such brackets used in other programming languages, we use indentation in Python.&lt;/p&gt;

Use tabs,instead of spaces for ease of writing code.

Wrong indentation can lead to syntax error, or makes your output wrong for your logic e.g.
&lt;pre&gt;
#IndentationError: expected an indented block
i=-1
if i&lt;0:
print(&quot;Test successful&quot;)#Wrong indentation 
else:    
    print(&quot;Test failed&quot;)
#Output: IndentationError: expected an indented block
&lt;/pre&gt;
---
&lt;pre&gt;
#Properly Indented code:
i=-1
if i&lt;0:
    print(&quot;Test successful&quot;)#Wrong indentation
else:    
    print(&quot;Test failed&quot;)
#Output:Test successful
&lt;/pre&gt;
---
Logic changed, so output changed, with improper indentation, e.g.
---
&lt;h3&gt;Code : 1&lt;/h3&gt;
&lt;pre&gt;
sum=0
for i in range(5):
    for j in range(5):
        sum+=i
print(sum, end=&quot; &quot;)
#Output: 50
&lt;/pre&gt;
        
&lt;h3&gt;Code : 2&lt;/h3&gt;
&lt;pre&gt;
for i in range(5):
    for j in range(5):
        print(end=&quot; &quot;)
    sum+=i
print(sum, end=&quot; &quot;)
#Output:                          10
&lt;/pre&gt;
{{#ev:youtube|https://youtu.be/pmavoW419Yc|250|right}}&lt;br&gt;

[[#Top]]

==Spyder IDE Black Screen Solution==

----

 This issue is because of ''Help'' screen which is by default open. 
 We need to close it. So here's how you do it-


===Method 1:===

Step 1-    Try by closing current pane for that,  &quot;''press ctrl+shift+F4''&quot;  wait for few seconds things will appear on screen.

Step 2-    If it so than on menu bar go to ''view &gt; panes &gt; help'' unchecked &quot;''Help''&quot; option.

Step 3-    Make sure that &quot;''Help''&quot; under ''view &gt; panes'' is permanently unchecked. And ''Editor, Ipython console, Variable explorer''  are checked. 


===Method 2:===

Step 1-    Open spyder.

Step 2-   On that black screen randomly ''Left click'' on spyder &quot;''Menu bar''&quot; area you will get menu drop downs, You have to find Drop down with &quot;''Panes''&quot; option.

Step 3-   On &quot;''Panes''&quot; drop down unchecked the &quot;''Help''&quot;.

Step 4-   Wait for few seconds Spyder view will appear.

Step 5 -  Make sure that ''&quot;Help&quot;'' under view&gt;panes is permanently unchecked. And ''Editor, Ipython console, variable explorer'' are checked.


[[#Top]]</text>
      <sha1>e8jzawp6yxej2790z7gvujs2j8hlqxg</sha1>
    </revision>
    <revision>
      <id>3697</id>
      <parentid>3696</parentid>
      <timestamp>2018-09-29T01:13:45Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* Variables */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="20464">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_2 Contributors of this page]
==Introduction to Python==
 &lt;p style=&quot;text-align:justify&quot;&gt;Python is a widely used programming language which allows programmers to write the program in fewer lines of code. It was designed by ''Guido van Rossum'' in 1991. Python uses an interpreter instead of compiler. Basically, the main difference between compiler and interpreter is that the compiler takes the code as 'whole' and compiles it. for example, in ''C'' language and on the other side in interpreter. For example: languages like Python. It interprets the written code 'line by line', and if somewhere error is found. It stops interpreting the code from there itself. Here, in our course we will be using ''Spyder IDE''. Spyder is an integrated development environment with editing options to assist the programmers in writing programs. Spyder IDE is divided into two panes, one is console and other one is where program is written.&lt;/p&gt;

&lt;p style=&quot;text-align:justify&quot;&gt;
Python works on different platforms (Windows, Mac, Linux, Raspberry Pi, etc).
Python has a simple syntax similar to the English language.
Python has syntax that allows developers to write programs with fewer lines than some other programming languages.
Python runs on an interpreter system, meaning that code can be executed as soon as it is written. This means that prototyping can be very quick.&lt;/p&gt;
Python can be treated in a procedural way, an object-orientated way or a functional way.

==Installing Anaconda==
[[#Top]]

This article is all about installing and troubleshooting Anaconda and Spyder on different platforms.

===Windows===
Step 1 -&gt; Download the installer from here 
 &lt;p style=&quot;text-align:justify&quot;&gt;
[https://www.anaconda.com/download/#windows Download Link]. Make sure that you download the version compatible to your operating system architecture. If you have a 64 bit OS then you can download either 64 bit of 32 bit, but if you have 32 bit OS then you should download the 32 bit version only.
&lt;/p&gt;
 &lt;p style=&quot;text-align:justify&quot;&gt;
Step 2 -&gt; Double click on the .exe file that you downloaded just now and follow the instructions. If you are not sure of the installation options then just choose the default.&lt;/p&gt;
 &lt;p style=&quot;text-align:justify&quot;&gt;
Step 3 -&gt; To test your installation, open cmd (go to Start -&gt; then type cmd in the search bar and hit enter). There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.&lt;/p&gt;

===Mac===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#macos Download Link].

Step 2 -&gt; Double click on the .pkg file that you just downloaded. If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

===Linux===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#linux Download Link].

Step 2 -&gt; Go to the folder where you downloaded the .sh file and type following command 

  '''bash Anaconda-latest-Linux-x86_64.sh'''

If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

==Troubleshooting Spyder==

[[#Top]]
 &lt;p style=&quot;text-align:justify&quot;&gt;
In most of the cases, it happens that Spyder is already running and you have initiated one more instance of it. Please make sure that spyder is not running already.
If you are on Linux OS, please launch spyder through terminal. Just open the terminal and type '''spyder''' and it will launch. When Spyder opens, make sure you see Anaconda with the version written on the Ipython console. If not, try changing the path of your anaconda. Follow these steps according to your OS version.&lt;/p&gt;

====Windows====
[https://stackoverflow.com/questions/44597662/conda-command-is-not-recognized-on-windows-10 Click Here]

====Linux====
[https://stackoverflow.com/questions/18675907/how-to-run-conda Click Here]

====Mac====
[https://stackoverflow.com/questions/35246386/conda-command-not-found Click Here]

In most of the cases relaunching Spyder works.
A more general Troubleshoot is present [https://github.com/spyder-ide/spyder/wiki/Troubleshooting-Guide-and-FAQ Here]

==How to run a program in Spyder IDE?==
Go to Run on the menu bar. Click Run-&gt;Run.

[[#Top]]

==Print statements==
Print statements help to display output on console. 
{{#ev:youtube|https://youtu.be/gECkqaOwyt0|250|right}}

===Syntax===
&lt;pre&gt;print()&lt;/pre&gt;

===How to print a message?===
In order to print a message in Python, write &lt;pre&gt;print(&quot;message&quot;)&lt;/pre&gt;
Single, double, triple quote can be used print()

'''Example:'''

'''Single Quote'''
&lt;pre&gt;
print('Hello')  
Output: Hello
&lt;/pre&gt;
'''Double Quote'''
&lt;pre&gt;
print(&quot;Hello&quot;)  
Output: Hello
&lt;/pre&gt;
'''Quote within quote'''
&lt;pre&gt;print('Is &quot;Ram&quot; a good boy?')  
Output: Is &quot;Ram&quot; a good boy?&lt;/pre&gt;

[[#Top]]

==Escape sequences with strings==

We can use escape sequence within strings to make output more presentable.

'''\n'''  : It will move to next line.

'''\t'''  : It will add tab space(5space)

'''\a'''  : It will play system sound once.

'''Example:'''

&lt;pre&gt;print(&quot;Hi, \n How are you?&quot;)&lt;/pre&gt;
&lt;pre&gt;
Output: 

Hi,

How are you?
&lt;/pre&gt;
&lt;pre&gt;print(&quot;Hi, \t How are you?&quot;)&lt;/pre&gt;

Output: 

Hi, &lt;5 spaces&gt; How are you?

[[File:Escape_Sequence.jpg]]

==Variables==
[[#Top]]
&lt;pre&gt;
Variables are used to store some values. Values can be strings, integers or decimal values.  

Variable Name Rules:
1. Variable name should start with letter or underscore. Variable name cant start with number.
Example:
✓Valid: JOC, WIKI, JOC_WIKI, _JOC
Invalid: 1JOC, 123WIKI, 0_WIKI

2. Remaining letter other then first one can contain number, underscore.
Example:
JOC1234, WIKI012_1332

3. Variable names are case sensitivities.
Example:
JOC, jOC, joC all are different varibles. 

&lt;/pre&gt;
{{#ev:youtube|https://youtu.be/60iAXH1sm-Y|250|right}}
===How to print a variable?===
In order to print the value of a variable in python, first initialize the variable and then call it where ever you wanna use it. 
&lt;pre&gt;print(variable_name)&lt;/pre&gt;

&lt;pre&gt;For example :
x=2                # x is viable here
print(x)           # calling variable x with print function

a = &quot;JOC&quot;          # a is variable here
b = &quot;_WIKI&quot;        # b is variable here
c = a + b          # c is variable here which will provide addition of variable a and b
&lt;/pre&gt;

===Some facts about Variables===
* If you want to print variable name with a message, you can use , operator. For example : I want to print Hello Simran and Simran has been stored in a variable called ''name''.
  name=&quot;Simran&quot;
  print(&quot;Hello&quot;,name)
* If you change the value of a variable, it will store the latest value. For example :
  name=&quot;Simran&quot;
  name=&quot;Amit&quot;
  If you will execute the command ''print(name)'', Amit will be displayed.
* You can perform operations like addition, subtraction etc only on integral variables.

===Variables Types and Conversion===
&lt;pre&gt;Variable can be decimal, integer and decimal. And they can be inter covered with the help of conversion functions.

Example:
JOC = 5           Save in Memory as 5       # We have variable with name JOC having value 5 here.
JOC = int(5)      Save in Memory as 5       # Here Variable JOC holding integer value of 5. 
JOC = flot(5)     Save in Memory as 5.0     # Here variable JOC holding flot value of 5
JOC = str(5)      Save in Memory as &quot;5&quot;     # Here variable JOC holding string value of 5 or We can say 5 will be treated as string here.
JOC = complex(5)  Save in Memory as (5+0j)  # Here variable JOC holding complex value of 5.
JOC = oct(5)      Save in Memory as 012     # Here variable JOC holding octal representation of 5.
JOC = hex(5)      Save in Memory as 0xa     # Here variable JOC holding hexadecimal representation of 5

There are many more function available in Python. You can convert variable as per your requirement.
&lt;/pre&gt;


&lt;h1 style='color:black;font-family:Calibri;font-size:14.0pt;font-weight:800;
font-style:normal'&gt;Conversion Table with Eample&lt;/h1&gt;

&lt;table border=0 cellpadding=0 cellspacing=0 width=656 style='border-collapse:
 collapse;table-layout:fixed;width:492pt'&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6624497 width=63 style='height:15.0pt;width:47pt'&gt;Serial
  No&lt;/td&gt;
  &lt;td class=xl6724497 width=77 style='border-left:none;width:58pt'&gt;Function&lt;/td&gt;
  &lt;td class=xl6724497 width=303 style='border-left:none;width:227pt'&gt;Description&lt;/td&gt;
  &lt;td class=xl6724497 width=162 style='border-left:none;width:122pt'&gt;Example&lt;/td&gt;
  &lt;td class=xl6824497 width=51 style='border-left:none;width:38pt'&gt;Output&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;1&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;int(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to an
  integer.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10.12;
  print(int(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;2&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;long(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a&lt;span
  style='mso-spacerun:yes'&gt;  &lt;/span&gt;to a long integer&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10.12;
  print(long(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;3&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;float(a)&lt;/td&gt;
  &lt;td class=xl6524497 width=303 style='border-top:none;border-left:none;
  width:227pt'&gt;Converts a to a floating-point number.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 101.23;
  print(float(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;101.23&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;4&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;complex(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to a
  complex number.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print(complex(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10+0j&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;5&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;str(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to
  string.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print(str(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;6&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;repr(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts object
  a to an expression string.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print(repr(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;7&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;tuple(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to
  tuple.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print((a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;8&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;list(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to
  list.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print([a])&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;[10]&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;9&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;set(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to
  set.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a =
  set(&amp;quot;10&amp;quot;); print(a)&lt;/td&gt;
  &lt;td class=xl7124497 width=51 style='border-top:none;border-left:none;
  width:38pt'&gt;{'1', '0'}&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;10&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;dict(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to
  dictonary&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = dict(a=10);
  print(a)&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;{'a': 10}&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;11&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;chr(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts an
  integer to a character.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 97;
  print(chr(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;a&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;12&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;ord(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a
  single character to its integer value.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a =
  &amp;quot;J&amp;quot;; print(ord(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;74&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;13&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;hex(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts an
  integer to a hexadecimal string.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print(hex(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;0xa&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=21 style='height:15.75pt'&gt;
  &lt;td height=21 class=xl7224497 style='height:15.75pt;border-top:none'&gt;14&lt;/td&gt;
  &lt;td class=xl7324497 style='border-top:none;border-left:none'&gt;oct(a)&lt;/td&gt;
  &lt;td class=xl7324497 style='border-top:none;border-left:none'&gt;Converts an
  integer to an octal string.&lt;/td&gt;
  &lt;td class=xl7324497 style='border-top:none;border-left:none'&gt;a = 10;
  print(oct(a))&lt;/td&gt;
  &lt;td class=xl7424497 style='border-top:none;border-left:none'&gt;0o12&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
  &lt;tr height=0 style='display:none'&gt;
  &lt;td width=63 style='width:47pt'&gt;&lt;/td&gt;
  &lt;td width=77 style='width:58pt'&gt;&lt;/td&gt;
  &lt;td width=303 style='width:227pt'&gt;&lt;/td&gt;
  &lt;td width=162 style='width:122pt'&gt;&lt;/td&gt;
  &lt;td width=51 style='width:38pt'&gt;&lt;/td&gt;
 &lt;/tr&gt;
&lt;/table&gt;

==How to execute couple of instructions on console?==
You can execute couple of instructions on console using ;. Write Statement 1;Statement 2;......and then press ''Enter''.
{{#ev:youtube|https://youtu.be/CYQCYvLE22Y|250|right}}









==How to take input from the user?==
We can take input from the user using ''input'' function. For Example : You want the user to input variable ''x'', then write x=input(&quot;Enter the value of x&quot;) and execute. Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNkVLCxZw_jcgyS-bmrIVSP

And when the input you need is of data type other than string. You can do both the input function and data conversion in a single line.
For example:
Consider the program for letting in the patients
'''c=input(&quot;Enter (1/0)&quot;);d=int(c)'''

Instead of using it in two separate lines, combine it into a single line
'''c=int(input(&quot;Enter (1/0)&quot;))'''.

To get two inputs in same line with a space between them split() is used.

a,b=input(&quot;enter a&quot;).split(&quot;enter b&quot;)
----
[[#Top]]

==If statement==
If statement is used to execute set of two contrary statements based on a condition. 

===Syntax===
If (Condition):
    Statement 1
else:
    Statement 2

If 'Condition' is true then 'Statement 1' will be executed otherwise 'Statement 2' will be executed.

Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNhHmg3SkK1uiutigcAbH9K

==Loops==
[[#Top]]&lt;br&gt;
Loops in a programming languages are used to execute set of repetitive statements. For loop and while loop are used extensively to execute a set of looping instructions.

=== For loop Syntax ===
&lt;pre&gt;
for i in range(10): 
    Statement
&lt;/pre&gt;
range(10) indicate that values 0 to 9 will be assigned to the variable i and for each value of i the Statement will be executed, e.g.
&lt;pre&gt;
for i in range(10): 
    print(i)
&lt;/pre&gt;
Output will be
&lt;pre&gt;
0
1
2
3
4
5
6
7
8
9
&lt;/pre&gt;

[[#Top]]

=== While loop Syntax ===
&lt;pre&gt;
intialisation

while(condition):
   Statement
   increment/decrement
&lt;/pre&gt;
e.g.
&lt;pre&gt;
#initialization
i=0
while(i&lt;10): 
    print(i)
    i=i+1
&lt;/pre&gt;
Output will be:
&lt;pre&gt;
0
1
2
3
4
5
6
7
8
9
&lt;/pre&gt;
Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNbl5jkVrrw1E5XSvm3GiCI

[[#TOP]]
==Importance of Indentation in Python==
 &lt;p style=&quot;text-align:justify&quot;&gt;
Indentation is used to indicate to what block of statements belong. Indentation of blocks convey program structure in Python. Indentation in Python is used to refer a group/block of code/statements. In C++ we use { and } (curly brackets) to group a set of statements. But in Python, there are no such brackets used. Instead of such brackets used in other programming languages, we use indentation in Python.&lt;/p&gt;

Use tabs,instead of spaces for ease of writing code.

Wrong indentation can lead to syntax error, or makes your output wrong for your logic e.g.
&lt;pre&gt;
#IndentationError: expected an indented block
i=-1
if i&lt;0:
print(&quot;Test successful&quot;)#Wrong indentation 
else:    
    print(&quot;Test failed&quot;)
#Output: IndentationError: expected an indented block
&lt;/pre&gt;
---
&lt;pre&gt;
#Properly Indented code:
i=-1
if i&lt;0:
    print(&quot;Test successful&quot;)#Wrong indentation
else:    
    print(&quot;Test failed&quot;)
#Output:Test successful
&lt;/pre&gt;
---
Logic changed, so output changed, with improper indentation, e.g.
---
&lt;h3&gt;Code : 1&lt;/h3&gt;
&lt;pre&gt;
sum=0
for i in range(5):
    for j in range(5):
        sum+=i
print(sum, end=&quot; &quot;)
#Output: 50
&lt;/pre&gt;
        
&lt;h3&gt;Code : 2&lt;/h3&gt;
&lt;pre&gt;
for i in range(5):
    for j in range(5):
        print(end=&quot; &quot;)
    sum+=i
print(sum, end=&quot; &quot;)
#Output:                          10
&lt;/pre&gt;
{{#ev:youtube|https://youtu.be/pmavoW419Yc|250|right}}&lt;br&gt;

[[#Top]]

==Spyder IDE Black Screen Solution==

----

 This issue is because of ''Help'' screen which is by default open. 
 We need to close it. So here's how you do it-


===Method 1:===

Step 1-    Try by closing current pane for that,  &quot;''press ctrl+shift+F4''&quot;  wait for few seconds things will appear on screen.

Step 2-    If it so than on menu bar go to ''view &gt; panes &gt; help'' unchecked &quot;''Help''&quot; option.

Step 3-    Make sure that &quot;''Help''&quot; under ''view &gt; panes'' is permanently unchecked. And ''Editor, Ipython console, Variable explorer''  are checked. 


===Method 2:===

Step 1-    Open spyder.

Step 2-   On that black screen randomly ''Left click'' on spyder &quot;''Menu bar''&quot; area you will get menu drop downs, You have to find Drop down with &quot;''Panes''&quot; option.

Step 3-   On &quot;''Panes''&quot; drop down unchecked the &quot;''Help''&quot;.

Step 4-   Wait for few seconds Spyder view will appear.

Step 5 -  Make sure that ''&quot;Help&quot;'' under view&gt;panes is permanently unchecked. And ''Editor, Ipython console, variable explorer'' are checked.


[[#Top]]</text>
      <sha1>tee4zpz3z32rhrbegvu17wnf4t5esa0</sha1>
    </revision>
    <revision>
      <id>3698</id>
      <parentid>3697</parentid>
      <timestamp>2018-09-29T01:14:43Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* Variables */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="20470">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_2 Contributors of this page]
==Introduction to Python==
 &lt;p style=&quot;text-align:justify&quot;&gt;Python is a widely used programming language which allows programmers to write the program in fewer lines of code. It was designed by ''Guido van Rossum'' in 1991. Python uses an interpreter instead of compiler. Basically, the main difference between compiler and interpreter is that the compiler takes the code as 'whole' and compiles it. for example, in ''C'' language and on the other side in interpreter. For example: languages like Python. It interprets the written code 'line by line', and if somewhere error is found. It stops interpreting the code from there itself. Here, in our course we will be using ''Spyder IDE''. Spyder is an integrated development environment with editing options to assist the programmers in writing programs. Spyder IDE is divided into two panes, one is console and other one is where program is written.&lt;/p&gt;

&lt;p style=&quot;text-align:justify&quot;&gt;
Python works on different platforms (Windows, Mac, Linux, Raspberry Pi, etc).
Python has a simple syntax similar to the English language.
Python has syntax that allows developers to write programs with fewer lines than some other programming languages.
Python runs on an interpreter system, meaning that code can be executed as soon as it is written. This means that prototyping can be very quick.&lt;/p&gt;
Python can be treated in a procedural way, an object-orientated way or a functional way.

==Installing Anaconda==
[[#Top]]

This article is all about installing and troubleshooting Anaconda and Spyder on different platforms.

===Windows===
Step 1 -&gt; Download the installer from here 
 &lt;p style=&quot;text-align:justify&quot;&gt;
[https://www.anaconda.com/download/#windows Download Link]. Make sure that you download the version compatible to your operating system architecture. If you have a 64 bit OS then you can download either 64 bit of 32 bit, but if you have 32 bit OS then you should download the 32 bit version only.
&lt;/p&gt;
 &lt;p style=&quot;text-align:justify&quot;&gt;
Step 2 -&gt; Double click on the .exe file that you downloaded just now and follow the instructions. If you are not sure of the installation options then just choose the default.&lt;/p&gt;
 &lt;p style=&quot;text-align:justify&quot;&gt;
Step 3 -&gt; To test your installation, open cmd (go to Start -&gt; then type cmd in the search bar and hit enter). There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.&lt;/p&gt;

===Mac===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#macos Download Link].

Step 2 -&gt; Double click on the .pkg file that you just downloaded. If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

===Linux===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#linux Download Link].

Step 2 -&gt; Go to the folder where you downloaded the .sh file and type following command 

  '''bash Anaconda-latest-Linux-x86_64.sh'''

If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

==Troubleshooting Spyder==

[[#Top]]
 &lt;p style=&quot;text-align:justify&quot;&gt;
In most of the cases, it happens that Spyder is already running and you have initiated one more instance of it. Please make sure that spyder is not running already.
If you are on Linux OS, please launch spyder through terminal. Just open the terminal and type '''spyder''' and it will launch. When Spyder opens, make sure you see Anaconda with the version written on the Ipython console. If not, try changing the path of your anaconda. Follow these steps according to your OS version.&lt;/p&gt;

====Windows====
[https://stackoverflow.com/questions/44597662/conda-command-is-not-recognized-on-windows-10 Click Here]

====Linux====
[https://stackoverflow.com/questions/18675907/how-to-run-conda Click Here]

====Mac====
[https://stackoverflow.com/questions/35246386/conda-command-not-found Click Here]

In most of the cases relaunching Spyder works.
A more general Troubleshoot is present [https://github.com/spyder-ide/spyder/wiki/Troubleshooting-Guide-and-FAQ Here]

==How to run a program in Spyder IDE?==
Go to Run on the menu bar. Click Run-&gt;Run.

[[#Top]]

==Print statements==
Print statements help to display output on console. 
{{#ev:youtube|https://youtu.be/gECkqaOwyt0|250|right}}

===Syntax===
&lt;pre&gt;print()&lt;/pre&gt;

===How to print a message?===
In order to print a message in Python, write &lt;pre&gt;print(&quot;message&quot;)&lt;/pre&gt;
Single, double, triple quote can be used print()

'''Example:'''

'''Single Quote'''
&lt;pre&gt;
print('Hello')  
Output: Hello
&lt;/pre&gt;
'''Double Quote'''
&lt;pre&gt;
print(&quot;Hello&quot;)  
Output: Hello
&lt;/pre&gt;
'''Quote within quote'''
&lt;pre&gt;print('Is &quot;Ram&quot; a good boy?')  
Output: Is &quot;Ram&quot; a good boy?&lt;/pre&gt;

[[#Top]]

==Escape sequences with strings==

We can use escape sequence within strings to make output more presentable.

'''\n'''  : It will move to next line.

'''\t'''  : It will add tab space(5space)

'''\a'''  : It will play system sound once.

'''Example:'''

&lt;pre&gt;print(&quot;Hi, \n How are you?&quot;)&lt;/pre&gt;
&lt;pre&gt;
Output: 

Hi,

How are you?
&lt;/pre&gt;
&lt;pre&gt;print(&quot;Hi, \t How are you?&quot;)&lt;/pre&gt;

Output: 

Hi, &lt;5 spaces&gt; How are you?

[[File:Escape_Sequence.jpg]]

==Variables==
[[#Top]]
&lt;pre&gt;
Variables are used to store some values. Values can be strings, integers or decimal values.  

Variable Name Rules:
1. Variable name should start with letter or underscore. Variable name cant start with number.
Example:
&amp;#10004; Valid: JOC, WIKI, JOC_WIKI, _JOC
Invalid: 1JOC, 123WIKI, 0_WIKI

2. Remaining letter other then first one can contain number, underscore.
Example:
JOC1234, WIKI012_1332

3. Variable names are case sensitivities.
Example:
JOC, jOC, joC all are different varibles. 

&lt;/pre&gt;
{{#ev:youtube|https://youtu.be/60iAXH1sm-Y|250|right}}
===How to print a variable?===
In order to print the value of a variable in python, first initialize the variable and then call it where ever you wanna use it. 
&lt;pre&gt;print(variable_name)&lt;/pre&gt;

&lt;pre&gt;For example :
x=2                # x is viable here
print(x)           # calling variable x with print function

a = &quot;JOC&quot;          # a is variable here
b = &quot;_WIKI&quot;        # b is variable here
c = a + b          # c is variable here which will provide addition of variable a and b
&lt;/pre&gt;

===Some facts about Variables===
* If you want to print variable name with a message, you can use , operator. For example : I want to print Hello Simran and Simran has been stored in a variable called ''name''.
  name=&quot;Simran&quot;
  print(&quot;Hello&quot;,name)
* If you change the value of a variable, it will store the latest value. For example :
  name=&quot;Simran&quot;
  name=&quot;Amit&quot;
  If you will execute the command ''print(name)'', Amit will be displayed.
* You can perform operations like addition, subtraction etc only on integral variables.

===Variables Types and Conversion===
&lt;pre&gt;Variable can be decimal, integer and decimal. And they can be inter covered with the help of conversion functions.

Example:
JOC = 5           Save in Memory as 5       # We have variable with name JOC having value 5 here.
JOC = int(5)      Save in Memory as 5       # Here Variable JOC holding integer value of 5. 
JOC = flot(5)     Save in Memory as 5.0     # Here variable JOC holding flot value of 5
JOC = str(5)      Save in Memory as &quot;5&quot;     # Here variable JOC holding string value of 5 or We can say 5 will be treated as string here.
JOC = complex(5)  Save in Memory as (5+0j)  # Here variable JOC holding complex value of 5.
JOC = oct(5)      Save in Memory as 012     # Here variable JOC holding octal representation of 5.
JOC = hex(5)      Save in Memory as 0xa     # Here variable JOC holding hexadecimal representation of 5

There are many more function available in Python. You can convert variable as per your requirement.
&lt;/pre&gt;


&lt;h1 style='color:black;font-family:Calibri;font-size:14.0pt;font-weight:800;
font-style:normal'&gt;Conversion Table with Eample&lt;/h1&gt;

&lt;table border=0 cellpadding=0 cellspacing=0 width=656 style='border-collapse:
 collapse;table-layout:fixed;width:492pt'&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6624497 width=63 style='height:15.0pt;width:47pt'&gt;Serial
  No&lt;/td&gt;
  &lt;td class=xl6724497 width=77 style='border-left:none;width:58pt'&gt;Function&lt;/td&gt;
  &lt;td class=xl6724497 width=303 style='border-left:none;width:227pt'&gt;Description&lt;/td&gt;
  &lt;td class=xl6724497 width=162 style='border-left:none;width:122pt'&gt;Example&lt;/td&gt;
  &lt;td class=xl6824497 width=51 style='border-left:none;width:38pt'&gt;Output&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;1&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;int(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to an
  integer.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10.12;
  print(int(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;2&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;long(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a&lt;span
  style='mso-spacerun:yes'&gt;  &lt;/span&gt;to a long integer&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10.12;
  print(long(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;3&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;float(a)&lt;/td&gt;
  &lt;td class=xl6524497 width=303 style='border-top:none;border-left:none;
  width:227pt'&gt;Converts a to a floating-point number.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 101.23;
  print(float(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;101.23&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;4&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;complex(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to a
  complex number.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print(complex(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10+0j&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;5&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;str(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to
  string.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print(str(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;6&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;repr(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts object
  a to an expression string.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print(repr(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;7&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;tuple(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to
  tuple.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print((a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;8&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;list(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to
  list.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print([a])&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;[10]&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;9&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;set(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to
  set.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a =
  set(&amp;quot;10&amp;quot;); print(a)&lt;/td&gt;
  &lt;td class=xl7124497 width=51 style='border-top:none;border-left:none;
  width:38pt'&gt;{'1', '0'}&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;10&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;dict(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to
  dictonary&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = dict(a=10);
  print(a)&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;{'a': 10}&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;11&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;chr(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts an
  integer to a character.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 97;
  print(chr(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;a&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;12&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;ord(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a
  single character to its integer value.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a =
  &amp;quot;J&amp;quot;; print(ord(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;74&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;13&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;hex(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts an
  integer to a hexadecimal string.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print(hex(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;0xa&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=21 style='height:15.75pt'&gt;
  &lt;td height=21 class=xl7224497 style='height:15.75pt;border-top:none'&gt;14&lt;/td&gt;
  &lt;td class=xl7324497 style='border-top:none;border-left:none'&gt;oct(a)&lt;/td&gt;
  &lt;td class=xl7324497 style='border-top:none;border-left:none'&gt;Converts an
  integer to an octal string.&lt;/td&gt;
  &lt;td class=xl7324497 style='border-top:none;border-left:none'&gt;a = 10;
  print(oct(a))&lt;/td&gt;
  &lt;td class=xl7424497 style='border-top:none;border-left:none'&gt;0o12&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
  &lt;tr height=0 style='display:none'&gt;
  &lt;td width=63 style='width:47pt'&gt;&lt;/td&gt;
  &lt;td width=77 style='width:58pt'&gt;&lt;/td&gt;
  &lt;td width=303 style='width:227pt'&gt;&lt;/td&gt;
  &lt;td width=162 style='width:122pt'&gt;&lt;/td&gt;
  &lt;td width=51 style='width:38pt'&gt;&lt;/td&gt;
 &lt;/tr&gt;
&lt;/table&gt;

==How to execute couple of instructions on console?==
You can execute couple of instructions on console using ;. Write Statement 1;Statement 2;......and then press ''Enter''.
{{#ev:youtube|https://youtu.be/CYQCYvLE22Y|250|right}}









==How to take input from the user?==
We can take input from the user using ''input'' function. For Example : You want the user to input variable ''x'', then write x=input(&quot;Enter the value of x&quot;) and execute. Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNkVLCxZw_jcgyS-bmrIVSP

And when the input you need is of data type other than string. You can do both the input function and data conversion in a single line.
For example:
Consider the program for letting in the patients
'''c=input(&quot;Enter (1/0)&quot;);d=int(c)'''

Instead of using it in two separate lines, combine it into a single line
'''c=int(input(&quot;Enter (1/0)&quot;))'''.

To get two inputs in same line with a space between them split() is used.

a,b=input(&quot;enter a&quot;).split(&quot;enter b&quot;)
----
[[#Top]]

==If statement==
If statement is used to execute set of two contrary statements based on a condition. 

===Syntax===
If (Condition):
    Statement 1
else:
    Statement 2

If 'Condition' is true then 'Statement 1' will be executed otherwise 'Statement 2' will be executed.

Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNhHmg3SkK1uiutigcAbH9K

==Loops==
[[#Top]]&lt;br&gt;
Loops in a programming languages are used to execute set of repetitive statements. For loop and while loop are used extensively to execute a set of looping instructions.

=== For loop Syntax ===
&lt;pre&gt;
for i in range(10): 
    Statement
&lt;/pre&gt;
range(10) indicate that values 0 to 9 will be assigned to the variable i and for each value of i the Statement will be executed, e.g.
&lt;pre&gt;
for i in range(10): 
    print(i)
&lt;/pre&gt;
Output will be
&lt;pre&gt;
0
1
2
3
4
5
6
7
8
9
&lt;/pre&gt;

[[#Top]]

=== While loop Syntax ===
&lt;pre&gt;
intialisation

while(condition):
   Statement
   increment/decrement
&lt;/pre&gt;
e.g.
&lt;pre&gt;
#initialization
i=0
while(i&lt;10): 
    print(i)
    i=i+1
&lt;/pre&gt;
Output will be:
&lt;pre&gt;
0
1
2
3
4
5
6
7
8
9
&lt;/pre&gt;
Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNbl5jkVrrw1E5XSvm3GiCI

[[#TOP]]
==Importance of Indentation in Python==
 &lt;p style=&quot;text-align:justify&quot;&gt;
Indentation is used to indicate to what block of statements belong. Indentation of blocks convey program structure in Python. Indentation in Python is used to refer a group/block of code/statements. In C++ we use { and } (curly brackets) to group a set of statements. But in Python, there are no such brackets used. Instead of such brackets used in other programming languages, we use indentation in Python.&lt;/p&gt;

Use tabs,instead of spaces for ease of writing code.

Wrong indentation can lead to syntax error, or makes your output wrong for your logic e.g.
&lt;pre&gt;
#IndentationError: expected an indented block
i=-1
if i&lt;0:
print(&quot;Test successful&quot;)#Wrong indentation 
else:    
    print(&quot;Test failed&quot;)
#Output: IndentationError: expected an indented block
&lt;/pre&gt;
---
&lt;pre&gt;
#Properly Indented code:
i=-1
if i&lt;0:
    print(&quot;Test successful&quot;)#Wrong indentation
else:    
    print(&quot;Test failed&quot;)
#Output:Test successful
&lt;/pre&gt;
---
Logic changed, so output changed, with improper indentation, e.g.
---
&lt;h3&gt;Code : 1&lt;/h3&gt;
&lt;pre&gt;
sum=0
for i in range(5):
    for j in range(5):
        sum+=i
print(sum, end=&quot; &quot;)
#Output: 50
&lt;/pre&gt;
        
&lt;h3&gt;Code : 2&lt;/h3&gt;
&lt;pre&gt;
for i in range(5):
    for j in range(5):
        print(end=&quot; &quot;)
    sum+=i
print(sum, end=&quot; &quot;)
#Output:                          10
&lt;/pre&gt;
{{#ev:youtube|https://youtu.be/pmavoW419Yc|250|right}}&lt;br&gt;

[[#Top]]

==Spyder IDE Black Screen Solution==

----

 This issue is because of ''Help'' screen which is by default open. 
 We need to close it. So here's how you do it-


===Method 1:===

Step 1-    Try by closing current pane for that,  &quot;''press ctrl+shift+F4''&quot;  wait for few seconds things will appear on screen.

Step 2-    If it so than on menu bar go to ''view &gt; panes &gt; help'' unchecked &quot;''Help''&quot; option.

Step 3-    Make sure that &quot;''Help''&quot; under ''view &gt; panes'' is permanently unchecked. And ''Editor, Ipython console, Variable explorer''  are checked. 


===Method 2:===

Step 1-    Open spyder.

Step 2-   On that black screen randomly ''Left click'' on spyder &quot;''Menu bar''&quot; area you will get menu drop downs, You have to find Drop down with &quot;''Panes''&quot; option.

Step 3-   On &quot;''Panes''&quot; drop down unchecked the &quot;''Help''&quot;.

Step 4-   Wait for few seconds Spyder view will appear.

Step 5 -  Make sure that ''&quot;Help&quot;'' under view&gt;panes is permanently unchecked. And ''Editor, Ipython console, variable explorer'' are checked.


[[#Top]]</text>
      <sha1>i7q2g70p9fqbxunw45dunhralxn9t9o</sha1>
    </revision>
    <revision>
      <id>3699</id>
      <parentid>3698</parentid>
      <timestamp>2018-09-29T01:15:06Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* Variables */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="20481">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_2 Contributors of this page]
==Introduction to Python==
 &lt;p style=&quot;text-align:justify&quot;&gt;Python is a widely used programming language which allows programmers to write the program in fewer lines of code. It was designed by ''Guido van Rossum'' in 1991. Python uses an interpreter instead of compiler. Basically, the main difference between compiler and interpreter is that the compiler takes the code as 'whole' and compiles it. for example, in ''C'' language and on the other side in interpreter. For example: languages like Python. It interprets the written code 'line by line', and if somewhere error is found. It stops interpreting the code from there itself. Here, in our course we will be using ''Spyder IDE''. Spyder is an integrated development environment with editing options to assist the programmers in writing programs. Spyder IDE is divided into two panes, one is console and other one is where program is written.&lt;/p&gt;

&lt;p style=&quot;text-align:justify&quot;&gt;
Python works on different platforms (Windows, Mac, Linux, Raspberry Pi, etc).
Python has a simple syntax similar to the English language.
Python has syntax that allows developers to write programs with fewer lines than some other programming languages.
Python runs on an interpreter system, meaning that code can be executed as soon as it is written. This means that prototyping can be very quick.&lt;/p&gt;
Python can be treated in a procedural way, an object-orientated way or a functional way.

==Installing Anaconda==
[[#Top]]

This article is all about installing and troubleshooting Anaconda and Spyder on different platforms.

===Windows===
Step 1 -&gt; Download the installer from here 
 &lt;p style=&quot;text-align:justify&quot;&gt;
[https://www.anaconda.com/download/#windows Download Link]. Make sure that you download the version compatible to your operating system architecture. If you have a 64 bit OS then you can download either 64 bit of 32 bit, but if you have 32 bit OS then you should download the 32 bit version only.
&lt;/p&gt;
 &lt;p style=&quot;text-align:justify&quot;&gt;
Step 2 -&gt; Double click on the .exe file that you downloaded just now and follow the instructions. If you are not sure of the installation options then just choose the default.&lt;/p&gt;
 &lt;p style=&quot;text-align:justify&quot;&gt;
Step 3 -&gt; To test your installation, open cmd (go to Start -&gt; then type cmd in the search bar and hit enter). There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.&lt;/p&gt;

===Mac===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#macos Download Link].

Step 2 -&gt; Double click on the .pkg file that you just downloaded. If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

===Linux===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#linux Download Link].

Step 2 -&gt; Go to the folder where you downloaded the .sh file and type following command 

  '''bash Anaconda-latest-Linux-x86_64.sh'''

If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

==Troubleshooting Spyder==

[[#Top]]
 &lt;p style=&quot;text-align:justify&quot;&gt;
In most of the cases, it happens that Spyder is already running and you have initiated one more instance of it. Please make sure that spyder is not running already.
If you are on Linux OS, please launch spyder through terminal. Just open the terminal and type '''spyder''' and it will launch. When Spyder opens, make sure you see Anaconda with the version written on the Ipython console. If not, try changing the path of your anaconda. Follow these steps according to your OS version.&lt;/p&gt;

====Windows====
[https://stackoverflow.com/questions/44597662/conda-command-is-not-recognized-on-windows-10 Click Here]

====Linux====
[https://stackoverflow.com/questions/18675907/how-to-run-conda Click Here]

====Mac====
[https://stackoverflow.com/questions/35246386/conda-command-not-found Click Here]

In most of the cases relaunching Spyder works.
A more general Troubleshoot is present [https://github.com/spyder-ide/spyder/wiki/Troubleshooting-Guide-and-FAQ Here]

==How to run a program in Spyder IDE?==
Go to Run on the menu bar. Click Run-&gt;Run.

[[#Top]]

==Print statements==
Print statements help to display output on console. 
{{#ev:youtube|https://youtu.be/gECkqaOwyt0|250|right}}

===Syntax===
&lt;pre&gt;print()&lt;/pre&gt;

===How to print a message?===
In order to print a message in Python, write &lt;pre&gt;print(&quot;message&quot;)&lt;/pre&gt;
Single, double, triple quote can be used print()

'''Example:'''

'''Single Quote'''
&lt;pre&gt;
print('Hello')  
Output: Hello
&lt;/pre&gt;
'''Double Quote'''
&lt;pre&gt;
print(&quot;Hello&quot;)  
Output: Hello
&lt;/pre&gt;
'''Quote within quote'''
&lt;pre&gt;print('Is &quot;Ram&quot; a good boy?')  
Output: Is &quot;Ram&quot; a good boy?&lt;/pre&gt;

[[#Top]]

==Escape sequences with strings==

We can use escape sequence within strings to make output more presentable.

'''\n'''  : It will move to next line.

'''\t'''  : It will add tab space(5space)

'''\a'''  : It will play system sound once.

'''Example:'''

&lt;pre&gt;print(&quot;Hi, \n How are you?&quot;)&lt;/pre&gt;
&lt;pre&gt;
Output: 

Hi,

How are you?
&lt;/pre&gt;
&lt;pre&gt;print(&quot;Hi, \t How are you?&quot;)&lt;/pre&gt;

Output: 

Hi, &lt;5 spaces&gt; How are you?

[[File:Escape_Sequence.jpg]]

==Variables==
[[#Top]]
&lt;pre&gt;
Variables are used to store some values. Values can be strings, integers or decimal values.  

Variable Name Rules:
1. Variable name should start with letter or underscore. Variable name cant start with number.
Example:
&lt;big&gt;&amp;#10004;&lt;/big&gt; Valid: JOC, WIKI, JOC_WIKI, _JOC
Invalid: 1JOC, 123WIKI, 0_WIKI

2. Remaining letter other then first one can contain number, underscore.
Example:
JOC1234, WIKI012_1332

3. Variable names are case sensitivities.
Example:
JOC, jOC, joC all are different varibles. 

&lt;/pre&gt;
{{#ev:youtube|https://youtu.be/60iAXH1sm-Y|250|right}}
===How to print a variable?===
In order to print the value of a variable in python, first initialize the variable and then call it where ever you wanna use it. 
&lt;pre&gt;print(variable_name)&lt;/pre&gt;

&lt;pre&gt;For example :
x=2                # x is viable here
print(x)           # calling variable x with print function

a = &quot;JOC&quot;          # a is variable here
b = &quot;_WIKI&quot;        # b is variable here
c = a + b          # c is variable here which will provide addition of variable a and b
&lt;/pre&gt;

===Some facts about Variables===
* If you want to print variable name with a message, you can use , operator. For example : I want to print Hello Simran and Simran has been stored in a variable called ''name''.
  name=&quot;Simran&quot;
  print(&quot;Hello&quot;,name)
* If you change the value of a variable, it will store the latest value. For example :
  name=&quot;Simran&quot;
  name=&quot;Amit&quot;
  If you will execute the command ''print(name)'', Amit will be displayed.
* You can perform operations like addition, subtraction etc only on integral variables.

===Variables Types and Conversion===
&lt;pre&gt;Variable can be decimal, integer and decimal. And they can be inter covered with the help of conversion functions.

Example:
JOC = 5           Save in Memory as 5       # We have variable with name JOC having value 5 here.
JOC = int(5)      Save in Memory as 5       # Here Variable JOC holding integer value of 5. 
JOC = flot(5)     Save in Memory as 5.0     # Here variable JOC holding flot value of 5
JOC = str(5)      Save in Memory as &quot;5&quot;     # Here variable JOC holding string value of 5 or We can say 5 will be treated as string here.
JOC = complex(5)  Save in Memory as (5+0j)  # Here variable JOC holding complex value of 5.
JOC = oct(5)      Save in Memory as 012     # Here variable JOC holding octal representation of 5.
JOC = hex(5)      Save in Memory as 0xa     # Here variable JOC holding hexadecimal representation of 5

There are many more function available in Python. You can convert variable as per your requirement.
&lt;/pre&gt;


&lt;h1 style='color:black;font-family:Calibri;font-size:14.0pt;font-weight:800;
font-style:normal'&gt;Conversion Table with Eample&lt;/h1&gt;

&lt;table border=0 cellpadding=0 cellspacing=0 width=656 style='border-collapse:
 collapse;table-layout:fixed;width:492pt'&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6624497 width=63 style='height:15.0pt;width:47pt'&gt;Serial
  No&lt;/td&gt;
  &lt;td class=xl6724497 width=77 style='border-left:none;width:58pt'&gt;Function&lt;/td&gt;
  &lt;td class=xl6724497 width=303 style='border-left:none;width:227pt'&gt;Description&lt;/td&gt;
  &lt;td class=xl6724497 width=162 style='border-left:none;width:122pt'&gt;Example&lt;/td&gt;
  &lt;td class=xl6824497 width=51 style='border-left:none;width:38pt'&gt;Output&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;1&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;int(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to an
  integer.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10.12;
  print(int(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;2&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;long(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a&lt;span
  style='mso-spacerun:yes'&gt;  &lt;/span&gt;to a long integer&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10.12;
  print(long(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;3&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;float(a)&lt;/td&gt;
  &lt;td class=xl6524497 width=303 style='border-top:none;border-left:none;
  width:227pt'&gt;Converts a to a floating-point number.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 101.23;
  print(float(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;101.23&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;4&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;complex(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to a
  complex number.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print(complex(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10+0j&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;5&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;str(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to
  string.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print(str(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;6&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;repr(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts object
  a to an expression string.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print(repr(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;7&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;tuple(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to
  tuple.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print((a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;8&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;list(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to
  list.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print([a])&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;[10]&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;9&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;set(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to
  set.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a =
  set(&amp;quot;10&amp;quot;); print(a)&lt;/td&gt;
  &lt;td class=xl7124497 width=51 style='border-top:none;border-left:none;
  width:38pt'&gt;{'1', '0'}&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;10&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;dict(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to
  dictonary&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = dict(a=10);
  print(a)&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;{'a': 10}&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;11&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;chr(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts an
  integer to a character.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 97;
  print(chr(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;a&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;12&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;ord(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a
  single character to its integer value.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a =
  &amp;quot;J&amp;quot;; print(ord(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;74&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;13&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;hex(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts an
  integer to a hexadecimal string.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print(hex(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;0xa&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=21 style='height:15.75pt'&gt;
  &lt;td height=21 class=xl7224497 style='height:15.75pt;border-top:none'&gt;14&lt;/td&gt;
  &lt;td class=xl7324497 style='border-top:none;border-left:none'&gt;oct(a)&lt;/td&gt;
  &lt;td class=xl7324497 style='border-top:none;border-left:none'&gt;Converts an
  integer to an octal string.&lt;/td&gt;
  &lt;td class=xl7324497 style='border-top:none;border-left:none'&gt;a = 10;
  print(oct(a))&lt;/td&gt;
  &lt;td class=xl7424497 style='border-top:none;border-left:none'&gt;0o12&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
  &lt;tr height=0 style='display:none'&gt;
  &lt;td width=63 style='width:47pt'&gt;&lt;/td&gt;
  &lt;td width=77 style='width:58pt'&gt;&lt;/td&gt;
  &lt;td width=303 style='width:227pt'&gt;&lt;/td&gt;
  &lt;td width=162 style='width:122pt'&gt;&lt;/td&gt;
  &lt;td width=51 style='width:38pt'&gt;&lt;/td&gt;
 &lt;/tr&gt;
&lt;/table&gt;

==How to execute couple of instructions on console?==
You can execute couple of instructions on console using ;. Write Statement 1;Statement 2;......and then press ''Enter''.
{{#ev:youtube|https://youtu.be/CYQCYvLE22Y|250|right}}









==How to take input from the user?==
We can take input from the user using ''input'' function. For Example : You want the user to input variable ''x'', then write x=input(&quot;Enter the value of x&quot;) and execute. Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNkVLCxZw_jcgyS-bmrIVSP

And when the input you need is of data type other than string. You can do both the input function and data conversion in a single line.
For example:
Consider the program for letting in the patients
'''c=input(&quot;Enter (1/0)&quot;);d=int(c)'''

Instead of using it in two separate lines, combine it into a single line
'''c=int(input(&quot;Enter (1/0)&quot;))'''.

To get two inputs in same line with a space between them split() is used.

a,b=input(&quot;enter a&quot;).split(&quot;enter b&quot;)
----
[[#Top]]

==If statement==
If statement is used to execute set of two contrary statements based on a condition. 

===Syntax===
If (Condition):
    Statement 1
else:
    Statement 2

If 'Condition' is true then 'Statement 1' will be executed otherwise 'Statement 2' will be executed.

Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNhHmg3SkK1uiutigcAbH9K

==Loops==
[[#Top]]&lt;br&gt;
Loops in a programming languages are used to execute set of repetitive statements. For loop and while loop are used extensively to execute a set of looping instructions.

=== For loop Syntax ===
&lt;pre&gt;
for i in range(10): 
    Statement
&lt;/pre&gt;
range(10) indicate that values 0 to 9 will be assigned to the variable i and for each value of i the Statement will be executed, e.g.
&lt;pre&gt;
for i in range(10): 
    print(i)
&lt;/pre&gt;
Output will be
&lt;pre&gt;
0
1
2
3
4
5
6
7
8
9
&lt;/pre&gt;

[[#Top]]

=== While loop Syntax ===
&lt;pre&gt;
intialisation

while(condition):
   Statement
   increment/decrement
&lt;/pre&gt;
e.g.
&lt;pre&gt;
#initialization
i=0
while(i&lt;10): 
    print(i)
    i=i+1
&lt;/pre&gt;
Output will be:
&lt;pre&gt;
0
1
2
3
4
5
6
7
8
9
&lt;/pre&gt;
Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNbl5jkVrrw1E5XSvm3GiCI

[[#TOP]]
==Importance of Indentation in Python==
 &lt;p style=&quot;text-align:justify&quot;&gt;
Indentation is used to indicate to what block of statements belong. Indentation of blocks convey program structure in Python. Indentation in Python is used to refer a group/block of code/statements. In C++ we use { and } (curly brackets) to group a set of statements. But in Python, there are no such brackets used. Instead of such brackets used in other programming languages, we use indentation in Python.&lt;/p&gt;

Use tabs,instead of spaces for ease of writing code.

Wrong indentation can lead to syntax error, or makes your output wrong for your logic e.g.
&lt;pre&gt;
#IndentationError: expected an indented block
i=-1
if i&lt;0:
print(&quot;Test successful&quot;)#Wrong indentation 
else:    
    print(&quot;Test failed&quot;)
#Output: IndentationError: expected an indented block
&lt;/pre&gt;
---
&lt;pre&gt;
#Properly Indented code:
i=-1
if i&lt;0:
    print(&quot;Test successful&quot;)#Wrong indentation
else:    
    print(&quot;Test failed&quot;)
#Output:Test successful
&lt;/pre&gt;
---
Logic changed, so output changed, with improper indentation, e.g.
---
&lt;h3&gt;Code : 1&lt;/h3&gt;
&lt;pre&gt;
sum=0
for i in range(5):
    for j in range(5):
        sum+=i
print(sum, end=&quot; &quot;)
#Output: 50
&lt;/pre&gt;
        
&lt;h3&gt;Code : 2&lt;/h3&gt;
&lt;pre&gt;
for i in range(5):
    for j in range(5):
        print(end=&quot; &quot;)
    sum+=i
print(sum, end=&quot; &quot;)
#Output:                          10
&lt;/pre&gt;
{{#ev:youtube|https://youtu.be/pmavoW419Yc|250|right}}&lt;br&gt;

[[#Top]]

==Spyder IDE Black Screen Solution==

----

 This issue is because of ''Help'' screen which is by default open. 
 We need to close it. So here's how you do it-


===Method 1:===

Step 1-    Try by closing current pane for that,  &quot;''press ctrl+shift+F4''&quot;  wait for few seconds things will appear on screen.

Step 2-    If it so than on menu bar go to ''view &gt; panes &gt; help'' unchecked &quot;''Help''&quot; option.

Step 3-    Make sure that &quot;''Help''&quot; under ''view &gt; panes'' is permanently unchecked. And ''Editor, Ipython console, Variable explorer''  are checked. 


===Method 2:===

Step 1-    Open spyder.

Step 2-   On that black screen randomly ''Left click'' on spyder &quot;''Menu bar''&quot; area you will get menu drop downs, You have to find Drop down with &quot;''Panes''&quot; option.

Step 3-   On &quot;''Panes''&quot; drop down unchecked the &quot;''Help''&quot;.

Step 4-   Wait for few seconds Spyder view will appear.

Step 5 -  Make sure that ''&quot;Help&quot;'' under view&gt;panes is permanently unchecked. And ''Editor, Ipython console, variable explorer'' are checked.


[[#Top]]</text>
      <sha1>ldkepr6h76sz5a86beei2jbwvpq0sq5</sha1>
    </revision>
    <revision>
      <id>3700</id>
      <parentid>3699</parentid>
      <timestamp>2018-09-29T01:15:25Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* Variables */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="20470">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_2 Contributors of this page]
==Introduction to Python==
 &lt;p style=&quot;text-align:justify&quot;&gt;Python is a widely used programming language which allows programmers to write the program in fewer lines of code. It was designed by ''Guido van Rossum'' in 1991. Python uses an interpreter instead of compiler. Basically, the main difference between compiler and interpreter is that the compiler takes the code as 'whole' and compiles it. for example, in ''C'' language and on the other side in interpreter. For example: languages like Python. It interprets the written code 'line by line', and if somewhere error is found. It stops interpreting the code from there itself. Here, in our course we will be using ''Spyder IDE''. Spyder is an integrated development environment with editing options to assist the programmers in writing programs. Spyder IDE is divided into two panes, one is console and other one is where program is written.&lt;/p&gt;

&lt;p style=&quot;text-align:justify&quot;&gt;
Python works on different platforms (Windows, Mac, Linux, Raspberry Pi, etc).
Python has a simple syntax similar to the English language.
Python has syntax that allows developers to write programs with fewer lines than some other programming languages.
Python runs on an interpreter system, meaning that code can be executed as soon as it is written. This means that prototyping can be very quick.&lt;/p&gt;
Python can be treated in a procedural way, an object-orientated way or a functional way.

==Installing Anaconda==
[[#Top]]

This article is all about installing and troubleshooting Anaconda and Spyder on different platforms.

===Windows===
Step 1 -&gt; Download the installer from here 
 &lt;p style=&quot;text-align:justify&quot;&gt;
[https://www.anaconda.com/download/#windows Download Link]. Make sure that you download the version compatible to your operating system architecture. If you have a 64 bit OS then you can download either 64 bit of 32 bit, but if you have 32 bit OS then you should download the 32 bit version only.
&lt;/p&gt;
 &lt;p style=&quot;text-align:justify&quot;&gt;
Step 2 -&gt; Double click on the .exe file that you downloaded just now and follow the instructions. If you are not sure of the installation options then just choose the default.&lt;/p&gt;
 &lt;p style=&quot;text-align:justify&quot;&gt;
Step 3 -&gt; To test your installation, open cmd (go to Start -&gt; then type cmd in the search bar and hit enter). There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.&lt;/p&gt;

===Mac===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#macos Download Link].

Step 2 -&gt; Double click on the .pkg file that you just downloaded. If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

===Linux===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#linux Download Link].

Step 2 -&gt; Go to the folder where you downloaded the .sh file and type following command 

  '''bash Anaconda-latest-Linux-x86_64.sh'''

If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

==Troubleshooting Spyder==

[[#Top]]
 &lt;p style=&quot;text-align:justify&quot;&gt;
In most of the cases, it happens that Spyder is already running and you have initiated one more instance of it. Please make sure that spyder is not running already.
If you are on Linux OS, please launch spyder through terminal. Just open the terminal and type '''spyder''' and it will launch. When Spyder opens, make sure you see Anaconda with the version written on the Ipython console. If not, try changing the path of your anaconda. Follow these steps according to your OS version.&lt;/p&gt;

====Windows====
[https://stackoverflow.com/questions/44597662/conda-command-is-not-recognized-on-windows-10 Click Here]

====Linux====
[https://stackoverflow.com/questions/18675907/how-to-run-conda Click Here]

====Mac====
[https://stackoverflow.com/questions/35246386/conda-command-not-found Click Here]

In most of the cases relaunching Spyder works.
A more general Troubleshoot is present [https://github.com/spyder-ide/spyder/wiki/Troubleshooting-Guide-and-FAQ Here]

==How to run a program in Spyder IDE?==
Go to Run on the menu bar. Click Run-&gt;Run.

[[#Top]]

==Print statements==
Print statements help to display output on console. 
{{#ev:youtube|https://youtu.be/gECkqaOwyt0|250|right}}

===Syntax===
&lt;pre&gt;print()&lt;/pre&gt;

===How to print a message?===
In order to print a message in Python, write &lt;pre&gt;print(&quot;message&quot;)&lt;/pre&gt;
Single, double, triple quote can be used print()

'''Example:'''

'''Single Quote'''
&lt;pre&gt;
print('Hello')  
Output: Hello
&lt;/pre&gt;
'''Double Quote'''
&lt;pre&gt;
print(&quot;Hello&quot;)  
Output: Hello
&lt;/pre&gt;
'''Quote within quote'''
&lt;pre&gt;print('Is &quot;Ram&quot; a good boy?')  
Output: Is &quot;Ram&quot; a good boy?&lt;/pre&gt;

[[#Top]]

==Escape sequences with strings==

We can use escape sequence within strings to make output more presentable.

'''\n'''  : It will move to next line.

'''\t'''  : It will add tab space(5space)

'''\a'''  : It will play system sound once.

'''Example:'''

&lt;pre&gt;print(&quot;Hi, \n How are you?&quot;)&lt;/pre&gt;
&lt;pre&gt;
Output: 

Hi,

How are you?
&lt;/pre&gt;
&lt;pre&gt;print(&quot;Hi, \t How are you?&quot;)&lt;/pre&gt;

Output: 

Hi, &lt;5 spaces&gt; How are you?

[[File:Escape_Sequence.jpg]]

==Variables==
[[#Top]]
&lt;pre&gt;
Variables are used to store some values. Values can be strings, integers or decimal values.  

Variable Name Rules:
1. Variable name should start with letter or underscore. Variable name cant start with number.
Example:
&amp;#10004; Valid: JOC, WIKI, JOC_WIKI, _JOC
Invalid: 1JOC, 123WIKI, 0_WIKI

2. Remaining letter other then first one can contain number, underscore.
Example:
JOC1234, WIKI012_1332

3. Variable names are case sensitivities.
Example:
JOC, jOC, joC all are different varibles. 

&lt;/pre&gt;
{{#ev:youtube|https://youtu.be/60iAXH1sm-Y|250|right}}
===How to print a variable?===
In order to print the value of a variable in python, first initialize the variable and then call it where ever you wanna use it. 
&lt;pre&gt;print(variable_name)&lt;/pre&gt;

&lt;pre&gt;For example :
x=2                # x is viable here
print(x)           # calling variable x with print function

a = &quot;JOC&quot;          # a is variable here
b = &quot;_WIKI&quot;        # b is variable here
c = a + b          # c is variable here which will provide addition of variable a and b
&lt;/pre&gt;

===Some facts about Variables===
* If you want to print variable name with a message, you can use , operator. For example : I want to print Hello Simran and Simran has been stored in a variable called ''name''.
  name=&quot;Simran&quot;
  print(&quot;Hello&quot;,name)
* If you change the value of a variable, it will store the latest value. For example :
  name=&quot;Simran&quot;
  name=&quot;Amit&quot;
  If you will execute the command ''print(name)'', Amit will be displayed.
* You can perform operations like addition, subtraction etc only on integral variables.

===Variables Types and Conversion===
&lt;pre&gt;Variable can be decimal, integer and decimal. And they can be inter covered with the help of conversion functions.

Example:
JOC = 5           Save in Memory as 5       # We have variable with name JOC having value 5 here.
JOC = int(5)      Save in Memory as 5       # Here Variable JOC holding integer value of 5. 
JOC = flot(5)     Save in Memory as 5.0     # Here variable JOC holding flot value of 5
JOC = str(5)      Save in Memory as &quot;5&quot;     # Here variable JOC holding string value of 5 or We can say 5 will be treated as string here.
JOC = complex(5)  Save in Memory as (5+0j)  # Here variable JOC holding complex value of 5.
JOC = oct(5)      Save in Memory as 012     # Here variable JOC holding octal representation of 5.
JOC = hex(5)      Save in Memory as 0xa     # Here variable JOC holding hexadecimal representation of 5

There are many more function available in Python. You can convert variable as per your requirement.
&lt;/pre&gt;


&lt;h1 style='color:black;font-family:Calibri;font-size:14.0pt;font-weight:800;
font-style:normal'&gt;Conversion Table with Eample&lt;/h1&gt;

&lt;table border=0 cellpadding=0 cellspacing=0 width=656 style='border-collapse:
 collapse;table-layout:fixed;width:492pt'&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6624497 width=63 style='height:15.0pt;width:47pt'&gt;Serial
  No&lt;/td&gt;
  &lt;td class=xl6724497 width=77 style='border-left:none;width:58pt'&gt;Function&lt;/td&gt;
  &lt;td class=xl6724497 width=303 style='border-left:none;width:227pt'&gt;Description&lt;/td&gt;
  &lt;td class=xl6724497 width=162 style='border-left:none;width:122pt'&gt;Example&lt;/td&gt;
  &lt;td class=xl6824497 width=51 style='border-left:none;width:38pt'&gt;Output&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;1&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;int(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to an
  integer.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10.12;
  print(int(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;2&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;long(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a&lt;span
  style='mso-spacerun:yes'&gt;  &lt;/span&gt;to a long integer&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10.12;
  print(long(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;3&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;float(a)&lt;/td&gt;
  &lt;td class=xl6524497 width=303 style='border-top:none;border-left:none;
  width:227pt'&gt;Converts a to a floating-point number.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 101.23;
  print(float(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;101.23&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;4&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;complex(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to a
  complex number.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print(complex(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10+0j&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;5&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;str(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to
  string.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print(str(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;6&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;repr(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts object
  a to an expression string.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print(repr(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;7&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;tuple(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to
  tuple.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print((a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;8&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;list(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to
  list.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print([a])&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;[10]&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;9&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;set(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to
  set.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a =
  set(&amp;quot;10&amp;quot;); print(a)&lt;/td&gt;
  &lt;td class=xl7124497 width=51 style='border-top:none;border-left:none;
  width:38pt'&gt;{'1', '0'}&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;10&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;dict(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to
  dictonary&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = dict(a=10);
  print(a)&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;{'a': 10}&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;11&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;chr(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts an
  integer to a character.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 97;
  print(chr(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;a&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;12&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;ord(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a
  single character to its integer value.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a =
  &amp;quot;J&amp;quot;; print(ord(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;74&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;13&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;hex(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts an
  integer to a hexadecimal string.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print(hex(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;0xa&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=21 style='height:15.75pt'&gt;
  &lt;td height=21 class=xl7224497 style='height:15.75pt;border-top:none'&gt;14&lt;/td&gt;
  &lt;td class=xl7324497 style='border-top:none;border-left:none'&gt;oct(a)&lt;/td&gt;
  &lt;td class=xl7324497 style='border-top:none;border-left:none'&gt;Converts an
  integer to an octal string.&lt;/td&gt;
  &lt;td class=xl7324497 style='border-top:none;border-left:none'&gt;a = 10;
  print(oct(a))&lt;/td&gt;
  &lt;td class=xl7424497 style='border-top:none;border-left:none'&gt;0o12&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
  &lt;tr height=0 style='display:none'&gt;
  &lt;td width=63 style='width:47pt'&gt;&lt;/td&gt;
  &lt;td width=77 style='width:58pt'&gt;&lt;/td&gt;
  &lt;td width=303 style='width:227pt'&gt;&lt;/td&gt;
  &lt;td width=162 style='width:122pt'&gt;&lt;/td&gt;
  &lt;td width=51 style='width:38pt'&gt;&lt;/td&gt;
 &lt;/tr&gt;
&lt;/table&gt;

==How to execute couple of instructions on console?==
You can execute couple of instructions on console using ;. Write Statement 1;Statement 2;......and then press ''Enter''.
{{#ev:youtube|https://youtu.be/CYQCYvLE22Y|250|right}}









==How to take input from the user?==
We can take input from the user using ''input'' function. For Example : You want the user to input variable ''x'', then write x=input(&quot;Enter the value of x&quot;) and execute. Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNkVLCxZw_jcgyS-bmrIVSP

And when the input you need is of data type other than string. You can do both the input function and data conversion in a single line.
For example:
Consider the program for letting in the patients
'''c=input(&quot;Enter (1/0)&quot;);d=int(c)'''

Instead of using it in two separate lines, combine it into a single line
'''c=int(input(&quot;Enter (1/0)&quot;))'''.

To get two inputs in same line with a space between them split() is used.

a,b=input(&quot;enter a&quot;).split(&quot;enter b&quot;)
----
[[#Top]]

==If statement==
If statement is used to execute set of two contrary statements based on a condition. 

===Syntax===
If (Condition):
    Statement 1
else:
    Statement 2

If 'Condition' is true then 'Statement 1' will be executed otherwise 'Statement 2' will be executed.

Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNhHmg3SkK1uiutigcAbH9K

==Loops==
[[#Top]]&lt;br&gt;
Loops in a programming languages are used to execute set of repetitive statements. For loop and while loop are used extensively to execute a set of looping instructions.

=== For loop Syntax ===
&lt;pre&gt;
for i in range(10): 
    Statement
&lt;/pre&gt;
range(10) indicate that values 0 to 9 will be assigned to the variable i and for each value of i the Statement will be executed, e.g.
&lt;pre&gt;
for i in range(10): 
    print(i)
&lt;/pre&gt;
Output will be
&lt;pre&gt;
0
1
2
3
4
5
6
7
8
9
&lt;/pre&gt;

[[#Top]]

=== While loop Syntax ===
&lt;pre&gt;
intialisation

while(condition):
   Statement
   increment/decrement
&lt;/pre&gt;
e.g.
&lt;pre&gt;
#initialization
i=0
while(i&lt;10): 
    print(i)
    i=i+1
&lt;/pre&gt;
Output will be:
&lt;pre&gt;
0
1
2
3
4
5
6
7
8
9
&lt;/pre&gt;
Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNbl5jkVrrw1E5XSvm3GiCI

[[#TOP]]
==Importance of Indentation in Python==
 &lt;p style=&quot;text-align:justify&quot;&gt;
Indentation is used to indicate to what block of statements belong. Indentation of blocks convey program structure in Python. Indentation in Python is used to refer a group/block of code/statements. In C++ we use { and } (curly brackets) to group a set of statements. But in Python, there are no such brackets used. Instead of such brackets used in other programming languages, we use indentation in Python.&lt;/p&gt;

Use tabs,instead of spaces for ease of writing code.

Wrong indentation can lead to syntax error, or makes your output wrong for your logic e.g.
&lt;pre&gt;
#IndentationError: expected an indented block
i=-1
if i&lt;0:
print(&quot;Test successful&quot;)#Wrong indentation 
else:    
    print(&quot;Test failed&quot;)
#Output: IndentationError: expected an indented block
&lt;/pre&gt;
---
&lt;pre&gt;
#Properly Indented code:
i=-1
if i&lt;0:
    print(&quot;Test successful&quot;)#Wrong indentation
else:    
    print(&quot;Test failed&quot;)
#Output:Test successful
&lt;/pre&gt;
---
Logic changed, so output changed, with improper indentation, e.g.
---
&lt;h3&gt;Code : 1&lt;/h3&gt;
&lt;pre&gt;
sum=0
for i in range(5):
    for j in range(5):
        sum+=i
print(sum, end=&quot; &quot;)
#Output: 50
&lt;/pre&gt;
        
&lt;h3&gt;Code : 2&lt;/h3&gt;
&lt;pre&gt;
for i in range(5):
    for j in range(5):
        print(end=&quot; &quot;)
    sum+=i
print(sum, end=&quot; &quot;)
#Output:                          10
&lt;/pre&gt;
{{#ev:youtube|https://youtu.be/pmavoW419Yc|250|right}}&lt;br&gt;

[[#Top]]

==Spyder IDE Black Screen Solution==

----

 This issue is because of ''Help'' screen which is by default open. 
 We need to close it. So here's how you do it-


===Method 1:===

Step 1-    Try by closing current pane for that,  &quot;''press ctrl+shift+F4''&quot;  wait for few seconds things will appear on screen.

Step 2-    If it so than on menu bar go to ''view &gt; panes &gt; help'' unchecked &quot;''Help''&quot; option.

Step 3-    Make sure that &quot;''Help''&quot; under ''view &gt; panes'' is permanently unchecked. And ''Editor, Ipython console, Variable explorer''  are checked. 


===Method 2:===

Step 1-    Open spyder.

Step 2-   On that black screen randomly ''Left click'' on spyder &quot;''Menu bar''&quot; area you will get menu drop downs, You have to find Drop down with &quot;''Panes''&quot; option.

Step 3-   On &quot;''Panes''&quot; drop down unchecked the &quot;''Help''&quot;.

Step 4-   Wait for few seconds Spyder view will appear.

Step 5 -  Make sure that ''&quot;Help&quot;'' under view&gt;panes is permanently unchecked. And ''Editor, Ipython console, variable explorer'' are checked.


[[#Top]]</text>
      <sha1>i7q2g70p9fqbxunw45dunhralxn9t9o</sha1>
    </revision>
    <revision>
      <id>3701</id>
      <parentid>3700</parentid>
      <timestamp>2018-09-29T01:16:29Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* Variables */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="20480">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_2 Contributors of this page]
==Introduction to Python==
 &lt;p style=&quot;text-align:justify&quot;&gt;Python is a widely used programming language which allows programmers to write the program in fewer lines of code. It was designed by ''Guido van Rossum'' in 1991. Python uses an interpreter instead of compiler. Basically, the main difference between compiler and interpreter is that the compiler takes the code as 'whole' and compiles it. for example, in ''C'' language and on the other side in interpreter. For example: languages like Python. It interprets the written code 'line by line', and if somewhere error is found. It stops interpreting the code from there itself. Here, in our course we will be using ''Spyder IDE''. Spyder is an integrated development environment with editing options to assist the programmers in writing programs. Spyder IDE is divided into two panes, one is console and other one is where program is written.&lt;/p&gt;

&lt;p style=&quot;text-align:justify&quot;&gt;
Python works on different platforms (Windows, Mac, Linux, Raspberry Pi, etc).
Python has a simple syntax similar to the English language.
Python has syntax that allows developers to write programs with fewer lines than some other programming languages.
Python runs on an interpreter system, meaning that code can be executed as soon as it is written. This means that prototyping can be very quick.&lt;/p&gt;
Python can be treated in a procedural way, an object-orientated way or a functional way.

==Installing Anaconda==
[[#Top]]

This article is all about installing and troubleshooting Anaconda and Spyder on different platforms.

===Windows===
Step 1 -&gt; Download the installer from here 
 &lt;p style=&quot;text-align:justify&quot;&gt;
[https://www.anaconda.com/download/#windows Download Link]. Make sure that you download the version compatible to your operating system architecture. If you have a 64 bit OS then you can download either 64 bit of 32 bit, but if you have 32 bit OS then you should download the 32 bit version only.
&lt;/p&gt;
 &lt;p style=&quot;text-align:justify&quot;&gt;
Step 2 -&gt; Double click on the .exe file that you downloaded just now and follow the instructions. If you are not sure of the installation options then just choose the default.&lt;/p&gt;
 &lt;p style=&quot;text-align:justify&quot;&gt;
Step 3 -&gt; To test your installation, open cmd (go to Start -&gt; then type cmd in the search bar and hit enter). There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.&lt;/p&gt;

===Mac===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#macos Download Link].

Step 2 -&gt; Double click on the .pkg file that you just downloaded. If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

===Linux===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#linux Download Link].

Step 2 -&gt; Go to the folder where you downloaded the .sh file and type following command 

  '''bash Anaconda-latest-Linux-x86_64.sh'''

If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

==Troubleshooting Spyder==

[[#Top]]
 &lt;p style=&quot;text-align:justify&quot;&gt;
In most of the cases, it happens that Spyder is already running and you have initiated one more instance of it. Please make sure that spyder is not running already.
If you are on Linux OS, please launch spyder through terminal. Just open the terminal and type '''spyder''' and it will launch. When Spyder opens, make sure you see Anaconda with the version written on the Ipython console. If not, try changing the path of your anaconda. Follow these steps according to your OS version.&lt;/p&gt;

====Windows====
[https://stackoverflow.com/questions/44597662/conda-command-is-not-recognized-on-windows-10 Click Here]

====Linux====
[https://stackoverflow.com/questions/18675907/how-to-run-conda Click Here]

====Mac====
[https://stackoverflow.com/questions/35246386/conda-command-not-found Click Here]

In most of the cases relaunching Spyder works.
A more general Troubleshoot is present [https://github.com/spyder-ide/spyder/wiki/Troubleshooting-Guide-and-FAQ Here]

==How to run a program in Spyder IDE?==
Go to Run on the menu bar. Click Run-&gt;Run.

[[#Top]]

==Print statements==
Print statements help to display output on console. 
{{#ev:youtube|https://youtu.be/gECkqaOwyt0|250|right}}

===Syntax===
&lt;pre&gt;print()&lt;/pre&gt;

===How to print a message?===
In order to print a message in Python, write &lt;pre&gt;print(&quot;message&quot;)&lt;/pre&gt;
Single, double, triple quote can be used print()

'''Example:'''

'''Single Quote'''
&lt;pre&gt;
print('Hello')  
Output: Hello
&lt;/pre&gt;
'''Double Quote'''
&lt;pre&gt;
print(&quot;Hello&quot;)  
Output: Hello
&lt;/pre&gt;
'''Quote within quote'''
&lt;pre&gt;print('Is &quot;Ram&quot; a good boy?')  
Output: Is &quot;Ram&quot; a good boy?&lt;/pre&gt;

[[#Top]]

==Escape sequences with strings==

We can use escape sequence within strings to make output more presentable.

'''\n'''  : It will move to next line.

'''\t'''  : It will add tab space(5space)

'''\a'''  : It will play system sound once.

'''Example:'''

&lt;pre&gt;print(&quot;Hi, \n How are you?&quot;)&lt;/pre&gt;
&lt;pre&gt;
Output: 

Hi,

How are you?
&lt;/pre&gt;
&lt;pre&gt;print(&quot;Hi, \t How are you?&quot;)&lt;/pre&gt;

Output: 

Hi, &lt;5 spaces&gt; How are you?

[[File:Escape_Sequence.jpg]]

==Variables==
[[#Top]]
&lt;pre&gt;
Variables are used to store some values. Values can be strings, integers or decimal values.  

Variable Name Rules:
1. Variable name should start with letter or underscore. Variable name cant start with number.
Example:
&amp;#10004; Valid: JOC, WIKI, JOC_WIKI, _JOC
&amp;#10008; Invalid: 1JOC, 123WIKI, 0_WIKI

2. Remaining letter other then first one can contain number, underscore.
Example:
JOC1234, WIKI012_1332

3. Variable names are case sensitivities.
Example:
JOC, jOC, joC all are different varibles. 

&lt;/pre&gt;
{{#ev:youtube|https://youtu.be/60iAXH1sm-Y|250|right}}

===How to print a variable?===
In order to print the value of a variable in python, first initialize the variable and then call it where ever you wanna use it. 
&lt;pre&gt;print(variable_name)&lt;/pre&gt;

&lt;pre&gt;For example :
x=2                # x is viable here
print(x)           # calling variable x with print function

a = &quot;JOC&quot;          # a is variable here
b = &quot;_WIKI&quot;        # b is variable here
c = a + b          # c is variable here which will provide addition of variable a and b
&lt;/pre&gt;

===Some facts about Variables===
* If you want to print variable name with a message, you can use , operator. For example : I want to print Hello Simran and Simran has been stored in a variable called ''name''.
  name=&quot;Simran&quot;
  print(&quot;Hello&quot;,name)
* If you change the value of a variable, it will store the latest value. For example :
  name=&quot;Simran&quot;
  name=&quot;Amit&quot;
  If you will execute the command ''print(name)'', Amit will be displayed.
* You can perform operations like addition, subtraction etc only on integral variables.

===Variables Types and Conversion===
&lt;pre&gt;Variable can be decimal, integer and decimal. And they can be inter covered with the help of conversion functions.

Example:
JOC = 5           Save in Memory as 5       # We have variable with name JOC having value 5 here.
JOC = int(5)      Save in Memory as 5       # Here Variable JOC holding integer value of 5. 
JOC = flot(5)     Save in Memory as 5.0     # Here variable JOC holding flot value of 5
JOC = str(5)      Save in Memory as &quot;5&quot;     # Here variable JOC holding string value of 5 or We can say 5 will be treated as string here.
JOC = complex(5)  Save in Memory as (5+0j)  # Here variable JOC holding complex value of 5.
JOC = oct(5)      Save in Memory as 012     # Here variable JOC holding octal representation of 5.
JOC = hex(5)      Save in Memory as 0xa     # Here variable JOC holding hexadecimal representation of 5

There are many more function available in Python. You can convert variable as per your requirement.
&lt;/pre&gt;


&lt;h1 style='color:black;font-family:Calibri;font-size:14.0pt;font-weight:800;
font-style:normal'&gt;Conversion Table with Eample&lt;/h1&gt;

&lt;table border=0 cellpadding=0 cellspacing=0 width=656 style='border-collapse:
 collapse;table-layout:fixed;width:492pt'&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6624497 width=63 style='height:15.0pt;width:47pt'&gt;Serial
  No&lt;/td&gt;
  &lt;td class=xl6724497 width=77 style='border-left:none;width:58pt'&gt;Function&lt;/td&gt;
  &lt;td class=xl6724497 width=303 style='border-left:none;width:227pt'&gt;Description&lt;/td&gt;
  &lt;td class=xl6724497 width=162 style='border-left:none;width:122pt'&gt;Example&lt;/td&gt;
  &lt;td class=xl6824497 width=51 style='border-left:none;width:38pt'&gt;Output&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;1&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;int(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to an
  integer.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10.12;
  print(int(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;2&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;long(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a&lt;span
  style='mso-spacerun:yes'&gt;  &lt;/span&gt;to a long integer&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10.12;
  print(long(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;3&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;float(a)&lt;/td&gt;
  &lt;td class=xl6524497 width=303 style='border-top:none;border-left:none;
  width:227pt'&gt;Converts a to a floating-point number.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 101.23;
  print(float(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;101.23&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;4&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;complex(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to a
  complex number.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print(complex(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10+0j&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;5&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;str(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to
  string.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print(str(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;6&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;repr(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts object
  a to an expression string.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print(repr(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;7&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;tuple(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to
  tuple.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print((a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;8&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;list(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to
  list.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print([a])&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;[10]&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;9&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;set(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to
  set.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a =
  set(&amp;quot;10&amp;quot;); print(a)&lt;/td&gt;
  &lt;td class=xl7124497 width=51 style='border-top:none;border-left:none;
  width:38pt'&gt;{'1', '0'}&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;10&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;dict(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to
  dictonary&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = dict(a=10);
  print(a)&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;{'a': 10}&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;11&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;chr(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts an
  integer to a character.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 97;
  print(chr(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;a&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;12&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;ord(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a
  single character to its integer value.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a =
  &amp;quot;J&amp;quot;; print(ord(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;74&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;13&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;hex(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts an
  integer to a hexadecimal string.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print(hex(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;0xa&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=21 style='height:15.75pt'&gt;
  &lt;td height=21 class=xl7224497 style='height:15.75pt;border-top:none'&gt;14&lt;/td&gt;
  &lt;td class=xl7324497 style='border-top:none;border-left:none'&gt;oct(a)&lt;/td&gt;
  &lt;td class=xl7324497 style='border-top:none;border-left:none'&gt;Converts an
  integer to an octal string.&lt;/td&gt;
  &lt;td class=xl7324497 style='border-top:none;border-left:none'&gt;a = 10;
  print(oct(a))&lt;/td&gt;
  &lt;td class=xl7424497 style='border-top:none;border-left:none'&gt;0o12&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
  &lt;tr height=0 style='display:none'&gt;
  &lt;td width=63 style='width:47pt'&gt;&lt;/td&gt;
  &lt;td width=77 style='width:58pt'&gt;&lt;/td&gt;
  &lt;td width=303 style='width:227pt'&gt;&lt;/td&gt;
  &lt;td width=162 style='width:122pt'&gt;&lt;/td&gt;
  &lt;td width=51 style='width:38pt'&gt;&lt;/td&gt;
 &lt;/tr&gt;
&lt;/table&gt;

==How to execute couple of instructions on console?==
You can execute couple of instructions on console using ;. Write Statement 1;Statement 2;......and then press ''Enter''.
{{#ev:youtube|https://youtu.be/CYQCYvLE22Y|250|right}}









==How to take input from the user?==
We can take input from the user using ''input'' function. For Example : You want the user to input variable ''x'', then write x=input(&quot;Enter the value of x&quot;) and execute. Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNkVLCxZw_jcgyS-bmrIVSP

And when the input you need is of data type other than string. You can do both the input function and data conversion in a single line.
For example:
Consider the program for letting in the patients
'''c=input(&quot;Enter (1/0)&quot;);d=int(c)'''

Instead of using it in two separate lines, combine it into a single line
'''c=int(input(&quot;Enter (1/0)&quot;))'''.

To get two inputs in same line with a space between them split() is used.

a,b=input(&quot;enter a&quot;).split(&quot;enter b&quot;)
----
[[#Top]]

==If statement==
If statement is used to execute set of two contrary statements based on a condition. 

===Syntax===
If (Condition):
    Statement 1
else:
    Statement 2

If 'Condition' is true then 'Statement 1' will be executed otherwise 'Statement 2' will be executed.

Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNhHmg3SkK1uiutigcAbH9K

==Loops==
[[#Top]]&lt;br&gt;
Loops in a programming languages are used to execute set of repetitive statements. For loop and while loop are used extensively to execute a set of looping instructions.

=== For loop Syntax ===
&lt;pre&gt;
for i in range(10): 
    Statement
&lt;/pre&gt;
range(10) indicate that values 0 to 9 will be assigned to the variable i and for each value of i the Statement will be executed, e.g.
&lt;pre&gt;
for i in range(10): 
    print(i)
&lt;/pre&gt;
Output will be
&lt;pre&gt;
0
1
2
3
4
5
6
7
8
9
&lt;/pre&gt;

[[#Top]]

=== While loop Syntax ===
&lt;pre&gt;
intialisation

while(condition):
   Statement
   increment/decrement
&lt;/pre&gt;
e.g.
&lt;pre&gt;
#initialization
i=0
while(i&lt;10): 
    print(i)
    i=i+1
&lt;/pre&gt;
Output will be:
&lt;pre&gt;
0
1
2
3
4
5
6
7
8
9
&lt;/pre&gt;
Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNbl5jkVrrw1E5XSvm3GiCI

[[#TOP]]
==Importance of Indentation in Python==
 &lt;p style=&quot;text-align:justify&quot;&gt;
Indentation is used to indicate to what block of statements belong. Indentation of blocks convey program structure in Python. Indentation in Python is used to refer a group/block of code/statements. In C++ we use { and } (curly brackets) to group a set of statements. But in Python, there are no such brackets used. Instead of such brackets used in other programming languages, we use indentation in Python.&lt;/p&gt;

Use tabs,instead of spaces for ease of writing code.

Wrong indentation can lead to syntax error, or makes your output wrong for your logic e.g.
&lt;pre&gt;
#IndentationError: expected an indented block
i=-1
if i&lt;0:
print(&quot;Test successful&quot;)#Wrong indentation 
else:    
    print(&quot;Test failed&quot;)
#Output: IndentationError: expected an indented block
&lt;/pre&gt;
---
&lt;pre&gt;
#Properly Indented code:
i=-1
if i&lt;0:
    print(&quot;Test successful&quot;)#Wrong indentation
else:    
    print(&quot;Test failed&quot;)
#Output:Test successful
&lt;/pre&gt;
---
Logic changed, so output changed, with improper indentation, e.g.
---
&lt;h3&gt;Code : 1&lt;/h3&gt;
&lt;pre&gt;
sum=0
for i in range(5):
    for j in range(5):
        sum+=i
print(sum, end=&quot; &quot;)
#Output: 50
&lt;/pre&gt;
        
&lt;h3&gt;Code : 2&lt;/h3&gt;
&lt;pre&gt;
for i in range(5):
    for j in range(5):
        print(end=&quot; &quot;)
    sum+=i
print(sum, end=&quot; &quot;)
#Output:                          10
&lt;/pre&gt;
{{#ev:youtube|https://youtu.be/pmavoW419Yc|250|right}}&lt;br&gt;

[[#Top]]

==Spyder IDE Black Screen Solution==

----

 This issue is because of ''Help'' screen which is by default open. 
 We need to close it. So here's how you do it-


===Method 1:===

Step 1-    Try by closing current pane for that,  &quot;''press ctrl+shift+F4''&quot;  wait for few seconds things will appear on screen.

Step 2-    If it so than on menu bar go to ''view &gt; panes &gt; help'' unchecked &quot;''Help''&quot; option.

Step 3-    Make sure that &quot;''Help''&quot; under ''view &gt; panes'' is permanently unchecked. And ''Editor, Ipython console, Variable explorer''  are checked. 


===Method 2:===

Step 1-    Open spyder.

Step 2-   On that black screen randomly ''Left click'' on spyder &quot;''Menu bar''&quot; area you will get menu drop downs, You have to find Drop down with &quot;''Panes''&quot; option.

Step 3-   On &quot;''Panes''&quot; drop down unchecked the &quot;''Help''&quot;.

Step 4-   Wait for few seconds Spyder view will appear.

Step 5 -  Make sure that ''&quot;Help&quot;'' under view&gt;panes is permanently unchecked. And ''Editor, Ipython console, variable explorer'' are checked.


[[#Top]]</text>
      <sha1>c2egvgrngmtqknjkfiz7342n322vfzg</sha1>
    </revision>
    <revision>
      <id>3702</id>
      <parentid>3701</parentid>
      <timestamp>2018-09-29T01:17:35Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* While loop Syntax */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="20481">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_2 Contributors of this page]
==Introduction to Python==
 &lt;p style=&quot;text-align:justify&quot;&gt;Python is a widely used programming language which allows programmers to write the program in fewer lines of code. It was designed by ''Guido van Rossum'' in 1991. Python uses an interpreter instead of compiler. Basically, the main difference between compiler and interpreter is that the compiler takes the code as 'whole' and compiles it. for example, in ''C'' language and on the other side in interpreter. For example: languages like Python. It interprets the written code 'line by line', and if somewhere error is found. It stops interpreting the code from there itself. Here, in our course we will be using ''Spyder IDE''. Spyder is an integrated development environment with editing options to assist the programmers in writing programs. Spyder IDE is divided into two panes, one is console and other one is where program is written.&lt;/p&gt;

&lt;p style=&quot;text-align:justify&quot;&gt;
Python works on different platforms (Windows, Mac, Linux, Raspberry Pi, etc).
Python has a simple syntax similar to the English language.
Python has syntax that allows developers to write programs with fewer lines than some other programming languages.
Python runs on an interpreter system, meaning that code can be executed as soon as it is written. This means that prototyping can be very quick.&lt;/p&gt;
Python can be treated in a procedural way, an object-orientated way or a functional way.

==Installing Anaconda==
[[#Top]]

This article is all about installing and troubleshooting Anaconda and Spyder on different platforms.

===Windows===
Step 1 -&gt; Download the installer from here 
 &lt;p style=&quot;text-align:justify&quot;&gt;
[https://www.anaconda.com/download/#windows Download Link]. Make sure that you download the version compatible to your operating system architecture. If you have a 64 bit OS then you can download either 64 bit of 32 bit, but if you have 32 bit OS then you should download the 32 bit version only.
&lt;/p&gt;
 &lt;p style=&quot;text-align:justify&quot;&gt;
Step 2 -&gt; Double click on the .exe file that you downloaded just now and follow the instructions. If you are not sure of the installation options then just choose the default.&lt;/p&gt;
 &lt;p style=&quot;text-align:justify&quot;&gt;
Step 3 -&gt; To test your installation, open cmd (go to Start -&gt; then type cmd in the search bar and hit enter). There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.&lt;/p&gt;

===Mac===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#macos Download Link].

Step 2 -&gt; Double click on the .pkg file that you just downloaded. If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

===Linux===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#linux Download Link].

Step 2 -&gt; Go to the folder where you downloaded the .sh file and type following command 

  '''bash Anaconda-latest-Linux-x86_64.sh'''

If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

==Troubleshooting Spyder==

[[#Top]]
 &lt;p style=&quot;text-align:justify&quot;&gt;
In most of the cases, it happens that Spyder is already running and you have initiated one more instance of it. Please make sure that spyder is not running already.
If you are on Linux OS, please launch spyder through terminal. Just open the terminal and type '''spyder''' and it will launch. When Spyder opens, make sure you see Anaconda with the version written on the Ipython console. If not, try changing the path of your anaconda. Follow these steps according to your OS version.&lt;/p&gt;

====Windows====
[https://stackoverflow.com/questions/44597662/conda-command-is-not-recognized-on-windows-10 Click Here]

====Linux====
[https://stackoverflow.com/questions/18675907/how-to-run-conda Click Here]

====Mac====
[https://stackoverflow.com/questions/35246386/conda-command-not-found Click Here]

In most of the cases relaunching Spyder works.
A more general Troubleshoot is present [https://github.com/spyder-ide/spyder/wiki/Troubleshooting-Guide-and-FAQ Here]

==How to run a program in Spyder IDE?==
Go to Run on the menu bar. Click Run-&gt;Run.

[[#Top]]

==Print statements==
Print statements help to display output on console. 
{{#ev:youtube|https://youtu.be/gECkqaOwyt0|250|right}}

===Syntax===
&lt;pre&gt;print()&lt;/pre&gt;

===How to print a message?===
In order to print a message in Python, write &lt;pre&gt;print(&quot;message&quot;)&lt;/pre&gt;
Single, double, triple quote can be used print()

'''Example:'''

'''Single Quote'''
&lt;pre&gt;
print('Hello')  
Output: Hello
&lt;/pre&gt;
'''Double Quote'''
&lt;pre&gt;
print(&quot;Hello&quot;)  
Output: Hello
&lt;/pre&gt;
'''Quote within quote'''
&lt;pre&gt;print('Is &quot;Ram&quot; a good boy?')  
Output: Is &quot;Ram&quot; a good boy?&lt;/pre&gt;

[[#Top]]

==Escape sequences with strings==

We can use escape sequence within strings to make output more presentable.

'''\n'''  : It will move to next line.

'''\t'''  : It will add tab space(5space)

'''\a'''  : It will play system sound once.

'''Example:'''

&lt;pre&gt;print(&quot;Hi, \n How are you?&quot;)&lt;/pre&gt;
&lt;pre&gt;
Output: 

Hi,

How are you?
&lt;/pre&gt;
&lt;pre&gt;print(&quot;Hi, \t How are you?&quot;)&lt;/pre&gt;

Output: 

Hi, &lt;5 spaces&gt; How are you?

[[File:Escape_Sequence.jpg]]

==Variables==
[[#Top]]
&lt;pre&gt;
Variables are used to store some values. Values can be strings, integers or decimal values.  

Variable Name Rules:
1. Variable name should start with letter or underscore. Variable name cant start with number.
Example:
&amp;#10004; Valid: JOC, WIKI, JOC_WIKI, _JOC
&amp;#10008; Invalid: 1JOC, 123WIKI, 0_WIKI

2. Remaining letter other then first one can contain number, underscore.
Example:
JOC1234, WIKI012_1332

3. Variable names are case sensitivities.
Example:
JOC, jOC, joC all are different varibles. 

&lt;/pre&gt;
{{#ev:youtube|https://youtu.be/60iAXH1sm-Y|250|right}}

===How to print a variable?===
In order to print the value of a variable in python, first initialize the variable and then call it where ever you wanna use it. 
&lt;pre&gt;print(variable_name)&lt;/pre&gt;

&lt;pre&gt;For example :
x=2                # x is viable here
print(x)           # calling variable x with print function

a = &quot;JOC&quot;          # a is variable here
b = &quot;_WIKI&quot;        # b is variable here
c = a + b          # c is variable here which will provide addition of variable a and b
&lt;/pre&gt;

===Some facts about Variables===
* If you want to print variable name with a message, you can use , operator. For example : I want to print Hello Simran and Simran has been stored in a variable called ''name''.
  name=&quot;Simran&quot;
  print(&quot;Hello&quot;,name)
* If you change the value of a variable, it will store the latest value. For example :
  name=&quot;Simran&quot;
  name=&quot;Amit&quot;
  If you will execute the command ''print(name)'', Amit will be displayed.
* You can perform operations like addition, subtraction etc only on integral variables.

===Variables Types and Conversion===
&lt;pre&gt;Variable can be decimal, integer and decimal. And they can be inter covered with the help of conversion functions.

Example:
JOC = 5           Save in Memory as 5       # We have variable with name JOC having value 5 here.
JOC = int(5)      Save in Memory as 5       # Here Variable JOC holding integer value of 5. 
JOC = flot(5)     Save in Memory as 5.0     # Here variable JOC holding flot value of 5
JOC = str(5)      Save in Memory as &quot;5&quot;     # Here variable JOC holding string value of 5 or We can say 5 will be treated as string here.
JOC = complex(5)  Save in Memory as (5+0j)  # Here variable JOC holding complex value of 5.
JOC = oct(5)      Save in Memory as 012     # Here variable JOC holding octal representation of 5.
JOC = hex(5)      Save in Memory as 0xa     # Here variable JOC holding hexadecimal representation of 5

There are many more function available in Python. You can convert variable as per your requirement.
&lt;/pre&gt;


&lt;h1 style='color:black;font-family:Calibri;font-size:14.0pt;font-weight:800;
font-style:normal'&gt;Conversion Table with Eample&lt;/h1&gt;

&lt;table border=0 cellpadding=0 cellspacing=0 width=656 style='border-collapse:
 collapse;table-layout:fixed;width:492pt'&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6624497 width=63 style='height:15.0pt;width:47pt'&gt;Serial
  No&lt;/td&gt;
  &lt;td class=xl6724497 width=77 style='border-left:none;width:58pt'&gt;Function&lt;/td&gt;
  &lt;td class=xl6724497 width=303 style='border-left:none;width:227pt'&gt;Description&lt;/td&gt;
  &lt;td class=xl6724497 width=162 style='border-left:none;width:122pt'&gt;Example&lt;/td&gt;
  &lt;td class=xl6824497 width=51 style='border-left:none;width:38pt'&gt;Output&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;1&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;int(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to an
  integer.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10.12;
  print(int(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;2&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;long(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a&lt;span
  style='mso-spacerun:yes'&gt;  &lt;/span&gt;to a long integer&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10.12;
  print(long(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;3&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;float(a)&lt;/td&gt;
  &lt;td class=xl6524497 width=303 style='border-top:none;border-left:none;
  width:227pt'&gt;Converts a to a floating-point number.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 101.23;
  print(float(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;101.23&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;4&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;complex(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to a
  complex number.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print(complex(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10+0j&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;5&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;str(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to
  string.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print(str(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;6&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;repr(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts object
  a to an expression string.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print(repr(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;7&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;tuple(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to
  tuple.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print((a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;8&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;list(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to
  list.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print([a])&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;[10]&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;9&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;set(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to
  set.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a =
  set(&amp;quot;10&amp;quot;); print(a)&lt;/td&gt;
  &lt;td class=xl7124497 width=51 style='border-top:none;border-left:none;
  width:38pt'&gt;{'1', '0'}&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;10&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;dict(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to
  dictonary&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = dict(a=10);
  print(a)&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;{'a': 10}&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;11&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;chr(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts an
  integer to a character.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 97;
  print(chr(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;a&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;12&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;ord(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a
  single character to its integer value.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a =
  &amp;quot;J&amp;quot;; print(ord(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;74&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;13&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;hex(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts an
  integer to a hexadecimal string.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print(hex(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;0xa&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=21 style='height:15.75pt'&gt;
  &lt;td height=21 class=xl7224497 style='height:15.75pt;border-top:none'&gt;14&lt;/td&gt;
  &lt;td class=xl7324497 style='border-top:none;border-left:none'&gt;oct(a)&lt;/td&gt;
  &lt;td class=xl7324497 style='border-top:none;border-left:none'&gt;Converts an
  integer to an octal string.&lt;/td&gt;
  &lt;td class=xl7324497 style='border-top:none;border-left:none'&gt;a = 10;
  print(oct(a))&lt;/td&gt;
  &lt;td class=xl7424497 style='border-top:none;border-left:none'&gt;0o12&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
  &lt;tr height=0 style='display:none'&gt;
  &lt;td width=63 style='width:47pt'&gt;&lt;/td&gt;
  &lt;td width=77 style='width:58pt'&gt;&lt;/td&gt;
  &lt;td width=303 style='width:227pt'&gt;&lt;/td&gt;
  &lt;td width=162 style='width:122pt'&gt;&lt;/td&gt;
  &lt;td width=51 style='width:38pt'&gt;&lt;/td&gt;
 &lt;/tr&gt;
&lt;/table&gt;

==How to execute couple of instructions on console?==
You can execute couple of instructions on console using ;. Write Statement 1;Statement 2;......and then press ''Enter''.
{{#ev:youtube|https://youtu.be/CYQCYvLE22Y|250|right}}









==How to take input from the user?==
We can take input from the user using ''input'' function. For Example : You want the user to input variable ''x'', then write x=input(&quot;Enter the value of x&quot;) and execute. Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNkVLCxZw_jcgyS-bmrIVSP

And when the input you need is of data type other than string. You can do both the input function and data conversion in a single line.
For example:
Consider the program for letting in the patients
'''c=input(&quot;Enter (1/0)&quot;);d=int(c)'''

Instead of using it in two separate lines, combine it into a single line
'''c=int(input(&quot;Enter (1/0)&quot;))'''.

To get two inputs in same line with a space between them split() is used.

a,b=input(&quot;enter a&quot;).split(&quot;enter b&quot;)
----
[[#Top]]

==If statement==
If statement is used to execute set of two contrary statements based on a condition. 

===Syntax===
If (Condition):
    Statement 1
else:
    Statement 2

If 'Condition' is true then 'Statement 1' will be executed otherwise 'Statement 2' will be executed.

Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNhHmg3SkK1uiutigcAbH9K

==Loops==
[[#Top]]&lt;br&gt;
Loops in a programming languages are used to execute set of repetitive statements. For loop and while loop are used extensively to execute a set of looping instructions.

=== For loop Syntax ===
&lt;pre&gt;
for i in range(10): 
    Statement
&lt;/pre&gt;
range(10) indicate that values 0 to 9 will be assigned to the variable i and for each value of i the Statement will be executed, e.g.
&lt;pre&gt;
for i in range(10): 
    print(i)
&lt;/pre&gt;
Output will be
&lt;pre&gt;
0
1
2
3
4
5
6
7
8
9
&lt;/pre&gt;

[[#Top]]

=== While loop Syntax ===
&lt;pre&gt;
intialisation

while(condition):
   Statement
   increment/decrement
&lt;/pre&gt;
e.g.
&lt;pre&gt;
#initialization
i=0
while(i&lt;10): 
    print(i)
    i=i+1
&lt;/pre&gt;
Output will be:
&lt;pre&gt;
0
1
2
3
4
5
6
7
8
9
&lt;/pre&gt;
Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNbl5jkVrrw1E5XSvm3GiCI

[[#Top]]

==Importance of Indentation in Python==
 &lt;p style=&quot;text-align:justify&quot;&gt;
Indentation is used to indicate to what block of statements belong. Indentation of blocks convey program structure in Python. Indentation in Python is used to refer a group/block of code/statements. In C++ we use { and } (curly brackets) to group a set of statements. But in Python, there are no such brackets used. Instead of such brackets used in other programming languages, we use indentation in Python.&lt;/p&gt;

Use tabs,instead of spaces for ease of writing code.

Wrong indentation can lead to syntax error, or makes your output wrong for your logic e.g.
&lt;pre&gt;
#IndentationError: expected an indented block
i=-1
if i&lt;0:
print(&quot;Test successful&quot;)#Wrong indentation 
else:    
    print(&quot;Test failed&quot;)
#Output: IndentationError: expected an indented block
&lt;/pre&gt;
---
&lt;pre&gt;
#Properly Indented code:
i=-1
if i&lt;0:
    print(&quot;Test successful&quot;)#Wrong indentation
else:    
    print(&quot;Test failed&quot;)
#Output:Test successful
&lt;/pre&gt;
---
Logic changed, so output changed, with improper indentation, e.g.
---
&lt;h3&gt;Code : 1&lt;/h3&gt;
&lt;pre&gt;
sum=0
for i in range(5):
    for j in range(5):
        sum+=i
print(sum, end=&quot; &quot;)
#Output: 50
&lt;/pre&gt;
        
&lt;h3&gt;Code : 2&lt;/h3&gt;
&lt;pre&gt;
for i in range(5):
    for j in range(5):
        print(end=&quot; &quot;)
    sum+=i
print(sum, end=&quot; &quot;)
#Output:                          10
&lt;/pre&gt;
{{#ev:youtube|https://youtu.be/pmavoW419Yc|250|right}}&lt;br&gt;

[[#Top]]

==Spyder IDE Black Screen Solution==

----

 This issue is because of ''Help'' screen which is by default open. 
 We need to close it. So here's how you do it-


===Method 1:===

Step 1-    Try by closing current pane for that,  &quot;''press ctrl+shift+F4''&quot;  wait for few seconds things will appear on screen.

Step 2-    If it so than on menu bar go to ''view &gt; panes &gt; help'' unchecked &quot;''Help''&quot; option.

Step 3-    Make sure that &quot;''Help''&quot; under ''view &gt; panes'' is permanently unchecked. And ''Editor, Ipython console, Variable explorer''  are checked. 


===Method 2:===

Step 1-    Open spyder.

Step 2-   On that black screen randomly ''Left click'' on spyder &quot;''Menu bar''&quot; area you will get menu drop downs, You have to find Drop down with &quot;''Panes''&quot; option.

Step 3-   On &quot;''Panes''&quot; drop down unchecked the &quot;''Help''&quot;.

Step 4-   Wait for few seconds Spyder view will appear.

Step 5 -  Make sure that ''&quot;Help&quot;'' under view&gt;panes is permanently unchecked. And ''Editor, Ipython console, variable explorer'' are checked.


[[#Top]]</text>
      <sha1>23mxuyxe2fjmzk7duq1as1ipza2dbx1</sha1>
    </revision>
    <revision>
      <id>3703</id>
      <parentid>3702</parentid>
      <timestamp>2018-09-29T01:18:23Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* Importance of Indentation in Python */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="20485">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_2 Contributors of this page]
==Introduction to Python==
 &lt;p style=&quot;text-align:justify&quot;&gt;Python is a widely used programming language which allows programmers to write the program in fewer lines of code. It was designed by ''Guido van Rossum'' in 1991. Python uses an interpreter instead of compiler. Basically, the main difference between compiler and interpreter is that the compiler takes the code as 'whole' and compiles it. for example, in ''C'' language and on the other side in interpreter. For example: languages like Python. It interprets the written code 'line by line', and if somewhere error is found. It stops interpreting the code from there itself. Here, in our course we will be using ''Spyder IDE''. Spyder is an integrated development environment with editing options to assist the programmers in writing programs. Spyder IDE is divided into two panes, one is console and other one is where program is written.&lt;/p&gt;

&lt;p style=&quot;text-align:justify&quot;&gt;
Python works on different platforms (Windows, Mac, Linux, Raspberry Pi, etc).
Python has a simple syntax similar to the English language.
Python has syntax that allows developers to write programs with fewer lines than some other programming languages.
Python runs on an interpreter system, meaning that code can be executed as soon as it is written. This means that prototyping can be very quick.&lt;/p&gt;
Python can be treated in a procedural way, an object-orientated way or a functional way.

==Installing Anaconda==
[[#Top]]

This article is all about installing and troubleshooting Anaconda and Spyder on different platforms.

===Windows===
Step 1 -&gt; Download the installer from here 
 &lt;p style=&quot;text-align:justify&quot;&gt;
[https://www.anaconda.com/download/#windows Download Link]. Make sure that you download the version compatible to your operating system architecture. If you have a 64 bit OS then you can download either 64 bit of 32 bit, but if you have 32 bit OS then you should download the 32 bit version only.
&lt;/p&gt;
 &lt;p style=&quot;text-align:justify&quot;&gt;
Step 2 -&gt; Double click on the .exe file that you downloaded just now and follow the instructions. If you are not sure of the installation options then just choose the default.&lt;/p&gt;
 &lt;p style=&quot;text-align:justify&quot;&gt;
Step 3 -&gt; To test your installation, open cmd (go to Start -&gt; then type cmd in the search bar and hit enter). There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.&lt;/p&gt;

===Mac===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#macos Download Link].

Step 2 -&gt; Double click on the .pkg file that you just downloaded. If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

===Linux===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#linux Download Link].

Step 2 -&gt; Go to the folder where you downloaded the .sh file and type following command 

  '''bash Anaconda-latest-Linux-x86_64.sh'''

If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

==Troubleshooting Spyder==

[[#Top]]
 &lt;p style=&quot;text-align:justify&quot;&gt;
In most of the cases, it happens that Spyder is already running and you have initiated one more instance of it. Please make sure that spyder is not running already.
If you are on Linux OS, please launch spyder through terminal. Just open the terminal and type '''spyder''' and it will launch. When Spyder opens, make sure you see Anaconda with the version written on the Ipython console. If not, try changing the path of your anaconda. Follow these steps according to your OS version.&lt;/p&gt;

====Windows====
[https://stackoverflow.com/questions/44597662/conda-command-is-not-recognized-on-windows-10 Click Here]

====Linux====
[https://stackoverflow.com/questions/18675907/how-to-run-conda Click Here]

====Mac====
[https://stackoverflow.com/questions/35246386/conda-command-not-found Click Here]

In most of the cases relaunching Spyder works.
A more general Troubleshoot is present [https://github.com/spyder-ide/spyder/wiki/Troubleshooting-Guide-and-FAQ Here]

==How to run a program in Spyder IDE?==
Go to Run on the menu bar. Click Run-&gt;Run.

[[#Top]]

==Print statements==
Print statements help to display output on console. 
{{#ev:youtube|https://youtu.be/gECkqaOwyt0|250|right}}

===Syntax===
&lt;pre&gt;print()&lt;/pre&gt;

===How to print a message?===
In order to print a message in Python, write &lt;pre&gt;print(&quot;message&quot;)&lt;/pre&gt;
Single, double, triple quote can be used print()

'''Example:'''

'''Single Quote'''
&lt;pre&gt;
print('Hello')  
Output: Hello
&lt;/pre&gt;
'''Double Quote'''
&lt;pre&gt;
print(&quot;Hello&quot;)  
Output: Hello
&lt;/pre&gt;
'''Quote within quote'''
&lt;pre&gt;print('Is &quot;Ram&quot; a good boy?')  
Output: Is &quot;Ram&quot; a good boy?&lt;/pre&gt;

[[#Top]]

==Escape sequences with strings==

We can use escape sequence within strings to make output more presentable.

'''\n'''  : It will move to next line.

'''\t'''  : It will add tab space(5space)

'''\a'''  : It will play system sound once.

'''Example:'''

&lt;pre&gt;print(&quot;Hi, \n How are you?&quot;)&lt;/pre&gt;
&lt;pre&gt;
Output: 

Hi,

How are you?
&lt;/pre&gt;
&lt;pre&gt;print(&quot;Hi, \t How are you?&quot;)&lt;/pre&gt;

Output: 

Hi, &lt;5 spaces&gt; How are you?

[[File:Escape_Sequence.jpg]]

==Variables==
[[#Top]]
&lt;pre&gt;
Variables are used to store some values. Values can be strings, integers or decimal values.  

Variable Name Rules:
1. Variable name should start with letter or underscore. Variable name cant start with number.
Example:
&amp;#10004; Valid: JOC, WIKI, JOC_WIKI, _JOC
&amp;#10008; Invalid: 1JOC, 123WIKI, 0_WIKI

2. Remaining letter other then first one can contain number, underscore.
Example:
JOC1234, WIKI012_1332

3. Variable names are case sensitivities.
Example:
JOC, jOC, joC all are different varibles. 

&lt;/pre&gt;
{{#ev:youtube|https://youtu.be/60iAXH1sm-Y|250|right}}

===How to print a variable?===
In order to print the value of a variable in python, first initialize the variable and then call it where ever you wanna use it. 
&lt;pre&gt;print(variable_name)&lt;/pre&gt;

&lt;pre&gt;For example :
x=2                # x is viable here
print(x)           # calling variable x with print function

a = &quot;JOC&quot;          # a is variable here
b = &quot;_WIKI&quot;        # b is variable here
c = a + b          # c is variable here which will provide addition of variable a and b
&lt;/pre&gt;

===Some facts about Variables===
* If you want to print variable name with a message, you can use , operator. For example : I want to print Hello Simran and Simran has been stored in a variable called ''name''.
  name=&quot;Simran&quot;
  print(&quot;Hello&quot;,name)
* If you change the value of a variable, it will store the latest value. For example :
  name=&quot;Simran&quot;
  name=&quot;Amit&quot;
  If you will execute the command ''print(name)'', Amit will be displayed.
* You can perform operations like addition, subtraction etc only on integral variables.

===Variables Types and Conversion===
&lt;pre&gt;Variable can be decimal, integer and decimal. And they can be inter covered with the help of conversion functions.

Example:
JOC = 5           Save in Memory as 5       # We have variable with name JOC having value 5 here.
JOC = int(5)      Save in Memory as 5       # Here Variable JOC holding integer value of 5. 
JOC = flot(5)     Save in Memory as 5.0     # Here variable JOC holding flot value of 5
JOC = str(5)      Save in Memory as &quot;5&quot;     # Here variable JOC holding string value of 5 or We can say 5 will be treated as string here.
JOC = complex(5)  Save in Memory as (5+0j)  # Here variable JOC holding complex value of 5.
JOC = oct(5)      Save in Memory as 012     # Here variable JOC holding octal representation of 5.
JOC = hex(5)      Save in Memory as 0xa     # Here variable JOC holding hexadecimal representation of 5

There are many more function available in Python. You can convert variable as per your requirement.
&lt;/pre&gt;


&lt;h1 style='color:black;font-family:Calibri;font-size:14.0pt;font-weight:800;
font-style:normal'&gt;Conversion Table with Eample&lt;/h1&gt;

&lt;table border=0 cellpadding=0 cellspacing=0 width=656 style='border-collapse:
 collapse;table-layout:fixed;width:492pt'&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6624497 width=63 style='height:15.0pt;width:47pt'&gt;Serial
  No&lt;/td&gt;
  &lt;td class=xl6724497 width=77 style='border-left:none;width:58pt'&gt;Function&lt;/td&gt;
  &lt;td class=xl6724497 width=303 style='border-left:none;width:227pt'&gt;Description&lt;/td&gt;
  &lt;td class=xl6724497 width=162 style='border-left:none;width:122pt'&gt;Example&lt;/td&gt;
  &lt;td class=xl6824497 width=51 style='border-left:none;width:38pt'&gt;Output&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;1&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;int(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to an
  integer.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10.12;
  print(int(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;2&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;long(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a&lt;span
  style='mso-spacerun:yes'&gt;  &lt;/span&gt;to a long integer&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10.12;
  print(long(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;3&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;float(a)&lt;/td&gt;
  &lt;td class=xl6524497 width=303 style='border-top:none;border-left:none;
  width:227pt'&gt;Converts a to a floating-point number.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 101.23;
  print(float(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;101.23&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;4&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;complex(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to a
  complex number.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print(complex(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10+0j&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;5&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;str(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to
  string.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print(str(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;6&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;repr(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts object
  a to an expression string.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print(repr(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;7&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;tuple(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to
  tuple.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print((a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;8&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;list(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to
  list.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print([a])&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;[10]&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;9&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;set(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to
  set.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a =
  set(&amp;quot;10&amp;quot;); print(a)&lt;/td&gt;
  &lt;td class=xl7124497 width=51 style='border-top:none;border-left:none;
  width:38pt'&gt;{'1', '0'}&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;10&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;dict(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to
  dictonary&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = dict(a=10);
  print(a)&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;{'a': 10}&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;11&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;chr(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts an
  integer to a character.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 97;
  print(chr(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;a&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;12&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;ord(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a
  single character to its integer value.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a =
  &amp;quot;J&amp;quot;; print(ord(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;74&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;13&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;hex(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts an
  integer to a hexadecimal string.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print(hex(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;0xa&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=21 style='height:15.75pt'&gt;
  &lt;td height=21 class=xl7224497 style='height:15.75pt;border-top:none'&gt;14&lt;/td&gt;
  &lt;td class=xl7324497 style='border-top:none;border-left:none'&gt;oct(a)&lt;/td&gt;
  &lt;td class=xl7324497 style='border-top:none;border-left:none'&gt;Converts an
  integer to an octal string.&lt;/td&gt;
  &lt;td class=xl7324497 style='border-top:none;border-left:none'&gt;a = 10;
  print(oct(a))&lt;/td&gt;
  &lt;td class=xl7424497 style='border-top:none;border-left:none'&gt;0o12&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
  &lt;tr height=0 style='display:none'&gt;
  &lt;td width=63 style='width:47pt'&gt;&lt;/td&gt;
  &lt;td width=77 style='width:58pt'&gt;&lt;/td&gt;
  &lt;td width=303 style='width:227pt'&gt;&lt;/td&gt;
  &lt;td width=162 style='width:122pt'&gt;&lt;/td&gt;
  &lt;td width=51 style='width:38pt'&gt;&lt;/td&gt;
 &lt;/tr&gt;
&lt;/table&gt;

==How to execute couple of instructions on console?==
You can execute couple of instructions on console using ;. Write Statement 1;Statement 2;......and then press ''Enter''.
{{#ev:youtube|https://youtu.be/CYQCYvLE22Y|250|right}}









==How to take input from the user?==
We can take input from the user using ''input'' function. For Example : You want the user to input variable ''x'', then write x=input(&quot;Enter the value of x&quot;) and execute. Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNkVLCxZw_jcgyS-bmrIVSP

And when the input you need is of data type other than string. You can do both the input function and data conversion in a single line.
For example:
Consider the program for letting in the patients
'''c=input(&quot;Enter (1/0)&quot;);d=int(c)'''

Instead of using it in two separate lines, combine it into a single line
'''c=int(input(&quot;Enter (1/0)&quot;))'''.

To get two inputs in same line with a space between them split() is used.

a,b=input(&quot;enter a&quot;).split(&quot;enter b&quot;)
----
[[#Top]]

==If statement==
If statement is used to execute set of two contrary statements based on a condition. 

===Syntax===
If (Condition):
    Statement 1
else:
    Statement 2

If 'Condition' is true then 'Statement 1' will be executed otherwise 'Statement 2' will be executed.

Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNhHmg3SkK1uiutigcAbH9K

==Loops==
[[#Top]]&lt;br&gt;
Loops in a programming languages are used to execute set of repetitive statements. For loop and while loop are used extensively to execute a set of looping instructions.

=== For loop Syntax ===
&lt;pre&gt;
for i in range(10): 
    Statement
&lt;/pre&gt;
range(10) indicate that values 0 to 9 will be assigned to the variable i and for each value of i the Statement will be executed, e.g.
&lt;pre&gt;
for i in range(10): 
    print(i)
&lt;/pre&gt;
Output will be
&lt;pre&gt;
0
1
2
3
4
5
6
7
8
9
&lt;/pre&gt;

[[#Top]]

=== While loop Syntax ===
&lt;pre&gt;
intialisation

while(condition):
   Statement
   increment/decrement
&lt;/pre&gt;
e.g.
&lt;pre&gt;
#initialization
i=0
while(i&lt;10): 
    print(i)
    i=i+1
&lt;/pre&gt;
Output will be:
&lt;pre&gt;
0
1
2
3
4
5
6
7
8
9
&lt;/pre&gt;
Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNbl5jkVrrw1E5XSvm3GiCI

[[#Top]]

==Importance of Indentation in Python==
 &lt;p style=&quot;text-align:justify&quot;&gt;
Indentation is used to indicate to what block of statements belong. Indentation of blocks convey program structure in Python. Indentation in Python is used to refer a group/block of code/statements. In ''C++'' we use { and } (curly brackets) to group a set of statements. But in Python, there are no such brackets used. Instead of such brackets used in other programming languages, we use indentation in Python.&lt;/p&gt;

Use tabs,instead of spaces for ease of writing code.

Wrong indentation can lead to syntax error, or makes your output wrong for your logic e.g.
&lt;pre&gt;
#IndentationError: expected an indented block
i=-1
if i&lt;0:
print(&quot;Test successful&quot;)#Wrong indentation 
else:    
    print(&quot;Test failed&quot;)
#Output: IndentationError: expected an indented block
&lt;/pre&gt;
---
&lt;pre&gt;
#Properly Indented code:
i=-1
if i&lt;0:
    print(&quot;Test successful&quot;)#Wrong indentation
else:    
    print(&quot;Test failed&quot;)
#Output:Test successful
&lt;/pre&gt;
---
Logic changed, so output changed, with improper indentation, e.g.
---
&lt;h3&gt;Code : 1&lt;/h3&gt;
&lt;pre&gt;
sum=0
for i in range(5):
    for j in range(5):
        sum+=i
print(sum, end=&quot; &quot;)
#Output: 50
&lt;/pre&gt;
        
&lt;h3&gt;Code : 2&lt;/h3&gt;
&lt;pre&gt;
for i in range(5):
    for j in range(5):
        print(end=&quot; &quot;)
    sum+=i
print(sum, end=&quot; &quot;)
#Output:                          10
&lt;/pre&gt;
{{#ev:youtube|https://youtu.be/pmavoW419Yc|250|right}}&lt;br&gt;

[[#Top]]

==Spyder IDE Black Screen Solution==

----

 This issue is because of ''Help'' screen which is by default open. 
 We need to close it. So here's how you do it-


===Method 1:===

Step 1-    Try by closing current pane for that,  &quot;''press ctrl+shift+F4''&quot;  wait for few seconds things will appear on screen.

Step 2-    If it so than on menu bar go to ''view &gt; panes &gt; help'' unchecked &quot;''Help''&quot; option.

Step 3-    Make sure that &quot;''Help''&quot; under ''view &gt; panes'' is permanently unchecked. And ''Editor, Ipython console, Variable explorer''  are checked. 


===Method 2:===

Step 1-    Open spyder.

Step 2-   On that black screen randomly ''Left click'' on spyder &quot;''Menu bar''&quot; area you will get menu drop downs, You have to find Drop down with &quot;''Panes''&quot; option.

Step 3-   On &quot;''Panes''&quot; drop down unchecked the &quot;''Help''&quot;.

Step 4-   Wait for few seconds Spyder view will appear.

Step 5 -  Make sure that ''&quot;Help&quot;'' under view&gt;panes is permanently unchecked. And ''Editor, Ipython console, variable explorer'' are checked.


[[#Top]]</text>
      <sha1>3amwhdevf80lfqz755ucegvgmqizbd5</sha1>
    </revision>
    <revision>
      <id>3704</id>
      <parentid>3703</parentid>
      <timestamp>2018-09-29T01:19:21Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* Importance of Indentation in Python */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="20486">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_2 Contributors of this page]
==Introduction to Python==
 &lt;p style=&quot;text-align:justify&quot;&gt;Python is a widely used programming language which allows programmers to write the program in fewer lines of code. It was designed by ''Guido van Rossum'' in 1991. Python uses an interpreter instead of compiler. Basically, the main difference between compiler and interpreter is that the compiler takes the code as 'whole' and compiles it. for example, in ''C'' language and on the other side in interpreter. For example: languages like Python. It interprets the written code 'line by line', and if somewhere error is found. It stops interpreting the code from there itself. Here, in our course we will be using ''Spyder IDE''. Spyder is an integrated development environment with editing options to assist the programmers in writing programs. Spyder IDE is divided into two panes, one is console and other one is where program is written.&lt;/p&gt;

&lt;p style=&quot;text-align:justify&quot;&gt;
Python works on different platforms (Windows, Mac, Linux, Raspberry Pi, etc).
Python has a simple syntax similar to the English language.
Python has syntax that allows developers to write programs with fewer lines than some other programming languages.
Python runs on an interpreter system, meaning that code can be executed as soon as it is written. This means that prototyping can be very quick.&lt;/p&gt;
Python can be treated in a procedural way, an object-orientated way or a functional way.

==Installing Anaconda==
[[#Top]]

This article is all about installing and troubleshooting Anaconda and Spyder on different platforms.

===Windows===
Step 1 -&gt; Download the installer from here 
 &lt;p style=&quot;text-align:justify&quot;&gt;
[https://www.anaconda.com/download/#windows Download Link]. Make sure that you download the version compatible to your operating system architecture. If you have a 64 bit OS then you can download either 64 bit of 32 bit, but if you have 32 bit OS then you should download the 32 bit version only.
&lt;/p&gt;
 &lt;p style=&quot;text-align:justify&quot;&gt;
Step 2 -&gt; Double click on the .exe file that you downloaded just now and follow the instructions. If you are not sure of the installation options then just choose the default.&lt;/p&gt;
 &lt;p style=&quot;text-align:justify&quot;&gt;
Step 3 -&gt; To test your installation, open cmd (go to Start -&gt; then type cmd in the search bar and hit enter). There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.&lt;/p&gt;

===Mac===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#macos Download Link].

Step 2 -&gt; Double click on the .pkg file that you just downloaded. If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

===Linux===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#linux Download Link].

Step 2 -&gt; Go to the folder where you downloaded the .sh file and type following command 

  '''bash Anaconda-latest-Linux-x86_64.sh'''

If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

==Troubleshooting Spyder==

[[#Top]]
 &lt;p style=&quot;text-align:justify&quot;&gt;
In most of the cases, it happens that Spyder is already running and you have initiated one more instance of it. Please make sure that spyder is not running already.
If you are on Linux OS, please launch spyder through terminal. Just open the terminal and type '''spyder''' and it will launch. When Spyder opens, make sure you see Anaconda with the version written on the Ipython console. If not, try changing the path of your anaconda. Follow these steps according to your OS version.&lt;/p&gt;

====Windows====
[https://stackoverflow.com/questions/44597662/conda-command-is-not-recognized-on-windows-10 Click Here]

====Linux====
[https://stackoverflow.com/questions/18675907/how-to-run-conda Click Here]

====Mac====
[https://stackoverflow.com/questions/35246386/conda-command-not-found Click Here]

In most of the cases relaunching Spyder works.
A more general Troubleshoot is present [https://github.com/spyder-ide/spyder/wiki/Troubleshooting-Guide-and-FAQ Here]

==How to run a program in Spyder IDE?==
Go to Run on the menu bar. Click Run-&gt;Run.

[[#Top]]

==Print statements==
Print statements help to display output on console. 
{{#ev:youtube|https://youtu.be/gECkqaOwyt0|250|right}}

===Syntax===
&lt;pre&gt;print()&lt;/pre&gt;

===How to print a message?===
In order to print a message in Python, write &lt;pre&gt;print(&quot;message&quot;)&lt;/pre&gt;
Single, double, triple quote can be used print()

'''Example:'''

'''Single Quote'''
&lt;pre&gt;
print('Hello')  
Output: Hello
&lt;/pre&gt;
'''Double Quote'''
&lt;pre&gt;
print(&quot;Hello&quot;)  
Output: Hello
&lt;/pre&gt;
'''Quote within quote'''
&lt;pre&gt;print('Is &quot;Ram&quot; a good boy?')  
Output: Is &quot;Ram&quot; a good boy?&lt;/pre&gt;

[[#Top]]

==Escape sequences with strings==

We can use escape sequence within strings to make output more presentable.

'''\n'''  : It will move to next line.

'''\t'''  : It will add tab space(5space)

'''\a'''  : It will play system sound once.

'''Example:'''

&lt;pre&gt;print(&quot;Hi, \n How are you?&quot;)&lt;/pre&gt;
&lt;pre&gt;
Output: 

Hi,

How are you?
&lt;/pre&gt;
&lt;pre&gt;print(&quot;Hi, \t How are you?&quot;)&lt;/pre&gt;

Output: 

Hi, &lt;5 spaces&gt; How are you?

[[File:Escape_Sequence.jpg]]

==Variables==
[[#Top]]
&lt;pre&gt;
Variables are used to store some values. Values can be strings, integers or decimal values.  

Variable Name Rules:
1. Variable name should start with letter or underscore. Variable name cant start with number.
Example:
&amp;#10004; Valid: JOC, WIKI, JOC_WIKI, _JOC
&amp;#10008; Invalid: 1JOC, 123WIKI, 0_WIKI

2. Remaining letter other then first one can contain number, underscore.
Example:
JOC1234, WIKI012_1332

3. Variable names are case sensitivities.
Example:
JOC, jOC, joC all are different varibles. 

&lt;/pre&gt;
{{#ev:youtube|https://youtu.be/60iAXH1sm-Y|250|right}}

===How to print a variable?===
In order to print the value of a variable in python, first initialize the variable and then call it where ever you wanna use it. 
&lt;pre&gt;print(variable_name)&lt;/pre&gt;

&lt;pre&gt;For example :
x=2                # x is viable here
print(x)           # calling variable x with print function

a = &quot;JOC&quot;          # a is variable here
b = &quot;_WIKI&quot;        # b is variable here
c = a + b          # c is variable here which will provide addition of variable a and b
&lt;/pre&gt;

===Some facts about Variables===
* If you want to print variable name with a message, you can use , operator. For example : I want to print Hello Simran and Simran has been stored in a variable called ''name''.
  name=&quot;Simran&quot;
  print(&quot;Hello&quot;,name)
* If you change the value of a variable, it will store the latest value. For example :
  name=&quot;Simran&quot;
  name=&quot;Amit&quot;
  If you will execute the command ''print(name)'', Amit will be displayed.
* You can perform operations like addition, subtraction etc only on integral variables.

===Variables Types and Conversion===
&lt;pre&gt;Variable can be decimal, integer and decimal. And they can be inter covered with the help of conversion functions.

Example:
JOC = 5           Save in Memory as 5       # We have variable with name JOC having value 5 here.
JOC = int(5)      Save in Memory as 5       # Here Variable JOC holding integer value of 5. 
JOC = flot(5)     Save in Memory as 5.0     # Here variable JOC holding flot value of 5
JOC = str(5)      Save in Memory as &quot;5&quot;     # Here variable JOC holding string value of 5 or We can say 5 will be treated as string here.
JOC = complex(5)  Save in Memory as (5+0j)  # Here variable JOC holding complex value of 5.
JOC = oct(5)      Save in Memory as 012     # Here variable JOC holding octal representation of 5.
JOC = hex(5)      Save in Memory as 0xa     # Here variable JOC holding hexadecimal representation of 5

There are many more function available in Python. You can convert variable as per your requirement.
&lt;/pre&gt;


&lt;h1 style='color:black;font-family:Calibri;font-size:14.0pt;font-weight:800;
font-style:normal'&gt;Conversion Table with Eample&lt;/h1&gt;

&lt;table border=0 cellpadding=0 cellspacing=0 width=656 style='border-collapse:
 collapse;table-layout:fixed;width:492pt'&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6624497 width=63 style='height:15.0pt;width:47pt'&gt;Serial
  No&lt;/td&gt;
  &lt;td class=xl6724497 width=77 style='border-left:none;width:58pt'&gt;Function&lt;/td&gt;
  &lt;td class=xl6724497 width=303 style='border-left:none;width:227pt'&gt;Description&lt;/td&gt;
  &lt;td class=xl6724497 width=162 style='border-left:none;width:122pt'&gt;Example&lt;/td&gt;
  &lt;td class=xl6824497 width=51 style='border-left:none;width:38pt'&gt;Output&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;1&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;int(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to an
  integer.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10.12;
  print(int(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;2&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;long(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a&lt;span
  style='mso-spacerun:yes'&gt;  &lt;/span&gt;to a long integer&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10.12;
  print(long(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;3&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;float(a)&lt;/td&gt;
  &lt;td class=xl6524497 width=303 style='border-top:none;border-left:none;
  width:227pt'&gt;Converts a to a floating-point number.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 101.23;
  print(float(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;101.23&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;4&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;complex(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to a
  complex number.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print(complex(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10+0j&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;5&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;str(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to
  string.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print(str(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;6&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;repr(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts object
  a to an expression string.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print(repr(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;7&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;tuple(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to
  tuple.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print((a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;8&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;list(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to
  list.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print([a])&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;[10]&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;9&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;set(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to
  set.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a =
  set(&amp;quot;10&amp;quot;); print(a)&lt;/td&gt;
  &lt;td class=xl7124497 width=51 style='border-top:none;border-left:none;
  width:38pt'&gt;{'1', '0'}&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;10&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;dict(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to
  dictonary&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = dict(a=10);
  print(a)&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;{'a': 10}&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;11&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;chr(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts an
  integer to a character.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 97;
  print(chr(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;a&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;12&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;ord(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a
  single character to its integer value.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a =
  &amp;quot;J&amp;quot;; print(ord(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;74&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;13&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;hex(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts an
  integer to a hexadecimal string.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print(hex(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;0xa&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=21 style='height:15.75pt'&gt;
  &lt;td height=21 class=xl7224497 style='height:15.75pt;border-top:none'&gt;14&lt;/td&gt;
  &lt;td class=xl7324497 style='border-top:none;border-left:none'&gt;oct(a)&lt;/td&gt;
  &lt;td class=xl7324497 style='border-top:none;border-left:none'&gt;Converts an
  integer to an octal string.&lt;/td&gt;
  &lt;td class=xl7324497 style='border-top:none;border-left:none'&gt;a = 10;
  print(oct(a))&lt;/td&gt;
  &lt;td class=xl7424497 style='border-top:none;border-left:none'&gt;0o12&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
  &lt;tr height=0 style='display:none'&gt;
  &lt;td width=63 style='width:47pt'&gt;&lt;/td&gt;
  &lt;td width=77 style='width:58pt'&gt;&lt;/td&gt;
  &lt;td width=303 style='width:227pt'&gt;&lt;/td&gt;
  &lt;td width=162 style='width:122pt'&gt;&lt;/td&gt;
  &lt;td width=51 style='width:38pt'&gt;&lt;/td&gt;
 &lt;/tr&gt;
&lt;/table&gt;

==How to execute couple of instructions on console?==
You can execute couple of instructions on console using ;. Write Statement 1;Statement 2;......and then press ''Enter''.
{{#ev:youtube|https://youtu.be/CYQCYvLE22Y|250|right}}









==How to take input from the user?==
We can take input from the user using ''input'' function. For Example : You want the user to input variable ''x'', then write x=input(&quot;Enter the value of x&quot;) and execute. Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNkVLCxZw_jcgyS-bmrIVSP

And when the input you need is of data type other than string. You can do both the input function and data conversion in a single line.
For example:
Consider the program for letting in the patients
'''c=input(&quot;Enter (1/0)&quot;);d=int(c)'''

Instead of using it in two separate lines, combine it into a single line
'''c=int(input(&quot;Enter (1/0)&quot;))'''.

To get two inputs in same line with a space between them split() is used.

a,b=input(&quot;enter a&quot;).split(&quot;enter b&quot;)
----
[[#Top]]

==If statement==
If statement is used to execute set of two contrary statements based on a condition. 

===Syntax===
If (Condition):
    Statement 1
else:
    Statement 2

If 'Condition' is true then 'Statement 1' will be executed otherwise 'Statement 2' will be executed.

Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNhHmg3SkK1uiutigcAbH9K

==Loops==
[[#Top]]&lt;br&gt;
Loops in a programming languages are used to execute set of repetitive statements. For loop and while loop are used extensively to execute a set of looping instructions.

=== For loop Syntax ===
&lt;pre&gt;
for i in range(10): 
    Statement
&lt;/pre&gt;
range(10) indicate that values 0 to 9 will be assigned to the variable i and for each value of i the Statement will be executed, e.g.
&lt;pre&gt;
for i in range(10): 
    print(i)
&lt;/pre&gt;
Output will be
&lt;pre&gt;
0
1
2
3
4
5
6
7
8
9
&lt;/pre&gt;

[[#Top]]

=== While loop Syntax ===
&lt;pre&gt;
intialisation

while(condition):
   Statement
   increment/decrement
&lt;/pre&gt;
e.g.
&lt;pre&gt;
#initialization
i=0
while(i&lt;10): 
    print(i)
    i=i+1
&lt;/pre&gt;
Output will be:
&lt;pre&gt;
0
1
2
3
4
5
6
7
8
9
&lt;/pre&gt;
Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNbl5jkVrrw1E5XSvm3GiCI

[[#Top]]

==Importance of Indentation in Python==
 &lt;p style=&quot;text-align:justify&quot;&gt;
Indentation is used to indicate to what block of statements belong. Indentation of blocks convey program structure in Python. Indentation in Python is used to refer a group/block of code/statements. In ''C++'' we use { and } (curly brackets) to group a set of statements. But in Python, there are no such brackets used. Instead of such brackets used in other programming languages, we use indentation in Python.&lt;/p&gt;

Use tabs, instead of spaces for ease of writing code.

Wrong indentation can lead to syntax error, or makes your output wrong for your logic e.g.
&lt;pre&gt;
#IndentationError: expected an indented block
i=-1
if i&lt;0:
print(&quot;Test successful&quot;)#Wrong indentation 
else:    
    print(&quot;Test failed&quot;)
#Output: IndentationError: expected an indented block
&lt;/pre&gt;
---
&lt;pre&gt;
#Properly Indented code:
i=-1
if i&lt;0:
    print(&quot;Test successful&quot;)#Wrong indentation
else:    
    print(&quot;Test failed&quot;)
#Output:Test successful
&lt;/pre&gt;
---
Logic changed, so output changed, with improper indentation, e.g.
---
&lt;h3&gt;Code : 1&lt;/h3&gt;
&lt;pre&gt;
sum=0
for i in range(5):
    for j in range(5):
        sum+=i
print(sum, end=&quot; &quot;)
#Output: 50
&lt;/pre&gt;
        
&lt;h3&gt;Code : 2&lt;/h3&gt;
&lt;pre&gt;
for i in range(5):
    for j in range(5):
        print(end=&quot; &quot;)
    sum+=i
print(sum, end=&quot; &quot;)
#Output:                          10
&lt;/pre&gt;
{{#ev:youtube|https://youtu.be/pmavoW419Yc|250|right}}&lt;br&gt;

[[#Top]]

==Spyder IDE Black Screen Solution==

----

 This issue is because of ''Help'' screen which is by default open. 
 We need to close it. So here's how you do it-


===Method 1:===

Step 1-    Try by closing current pane for that,  &quot;''press ctrl+shift+F4''&quot;  wait for few seconds things will appear on screen.

Step 2-    If it so than on menu bar go to ''view &gt; panes &gt; help'' unchecked &quot;''Help''&quot; option.

Step 3-    Make sure that &quot;''Help''&quot; under ''view &gt; panes'' is permanently unchecked. And ''Editor, Ipython console, Variable explorer''  are checked. 


===Method 2:===

Step 1-    Open spyder.

Step 2-   On that black screen randomly ''Left click'' on spyder &quot;''Menu bar''&quot; area you will get menu drop downs, You have to find Drop down with &quot;''Panes''&quot; option.

Step 3-   On &quot;''Panes''&quot; drop down unchecked the &quot;''Help''&quot;.

Step 4-   Wait for few seconds Spyder view will appear.

Step 5 -  Make sure that ''&quot;Help&quot;'' under view&gt;panes is permanently unchecked. And ''Editor, Ipython console, variable explorer'' are checked.


[[#Top]]</text>
      <sha1>k6vyi6koiyzn9nleuczomnpm7xchdf9</sha1>
    </revision>
    <revision>
      <id>3719</id>
      <parentid>3704</parentid>
      <timestamp>2018-09-29T01:30:29Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* Importance of Indentation in Python */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="20486">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_2 Contributors of this page]
==Introduction to Python==
 &lt;p style=&quot;text-align:justify&quot;&gt;Python is a widely used programming language which allows programmers to write the program in fewer lines of code. It was designed by ''Guido van Rossum'' in 1991. Python uses an interpreter instead of compiler. Basically, the main difference between compiler and interpreter is that the compiler takes the code as 'whole' and compiles it. for example, in ''C'' language and on the other side in interpreter. For example: languages like Python. It interprets the written code 'line by line', and if somewhere error is found. It stops interpreting the code from there itself. Here, in our course we will be using ''Spyder IDE''. Spyder is an integrated development environment with editing options to assist the programmers in writing programs. Spyder IDE is divided into two panes, one is console and other one is where program is written.&lt;/p&gt;

&lt;p style=&quot;text-align:justify&quot;&gt;
Python works on different platforms (Windows, Mac, Linux, Raspberry Pi, etc).
Python has a simple syntax similar to the English language.
Python has syntax that allows developers to write programs with fewer lines than some other programming languages.
Python runs on an interpreter system, meaning that code can be executed as soon as it is written. This means that prototyping can be very quick.&lt;/p&gt;
Python can be treated in a procedural way, an object-orientated way or a functional way.

==Installing Anaconda==
[[#Top]]

This article is all about installing and troubleshooting Anaconda and Spyder on different platforms.

===Windows===
Step 1 -&gt; Download the installer from here 
 &lt;p style=&quot;text-align:justify&quot;&gt;
[https://www.anaconda.com/download/#windows Download Link]. Make sure that you download the version compatible to your operating system architecture. If you have a 64 bit OS then you can download either 64 bit of 32 bit, but if you have 32 bit OS then you should download the 32 bit version only.
&lt;/p&gt;
 &lt;p style=&quot;text-align:justify&quot;&gt;
Step 2 -&gt; Double click on the .exe file that you downloaded just now and follow the instructions. If you are not sure of the installation options then just choose the default.&lt;/p&gt;
 &lt;p style=&quot;text-align:justify&quot;&gt;
Step 3 -&gt; To test your installation, open cmd (go to Start -&gt; then type cmd in the search bar and hit enter). There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.&lt;/p&gt;

===Mac===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#macos Download Link].

Step 2 -&gt; Double click on the .pkg file that you just downloaded. If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

===Linux===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#linux Download Link].

Step 2 -&gt; Go to the folder where you downloaded the .sh file and type following command 

  '''bash Anaconda-latest-Linux-x86_64.sh'''

If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

==Troubleshooting Spyder==

[[#Top]]
 &lt;p style=&quot;text-align:justify&quot;&gt;
In most of the cases, it happens that Spyder is already running and you have initiated one more instance of it. Please make sure that spyder is not running already.
If you are on Linux OS, please launch spyder through terminal. Just open the terminal and type '''spyder''' and it will launch. When Spyder opens, make sure you see Anaconda with the version written on the Ipython console. If not, try changing the path of your anaconda. Follow these steps according to your OS version.&lt;/p&gt;

====Windows====
[https://stackoverflow.com/questions/44597662/conda-command-is-not-recognized-on-windows-10 Click Here]

====Linux====
[https://stackoverflow.com/questions/18675907/how-to-run-conda Click Here]

====Mac====
[https://stackoverflow.com/questions/35246386/conda-command-not-found Click Here]

In most of the cases relaunching Spyder works.
A more general Troubleshoot is present [https://github.com/spyder-ide/spyder/wiki/Troubleshooting-Guide-and-FAQ Here]

==How to run a program in Spyder IDE?==
Go to Run on the menu bar. Click Run-&gt;Run.

[[#Top]]

==Print statements==
Print statements help to display output on console. 
{{#ev:youtube|https://youtu.be/gECkqaOwyt0|250|right}}

===Syntax===
&lt;pre&gt;print()&lt;/pre&gt;

===How to print a message?===
In order to print a message in Python, write &lt;pre&gt;print(&quot;message&quot;)&lt;/pre&gt;
Single, double, triple quote can be used print()

'''Example:'''

'''Single Quote'''
&lt;pre&gt;
print('Hello')  
Output: Hello
&lt;/pre&gt;
'''Double Quote'''
&lt;pre&gt;
print(&quot;Hello&quot;)  
Output: Hello
&lt;/pre&gt;
'''Quote within quote'''
&lt;pre&gt;print('Is &quot;Ram&quot; a good boy?')  
Output: Is &quot;Ram&quot; a good boy?&lt;/pre&gt;

[[#Top]]

==Escape sequences with strings==

We can use escape sequence within strings to make output more presentable.

'''\n'''  : It will move to next line.

'''\t'''  : It will add tab space(5space)

'''\a'''  : It will play system sound once.

'''Example:'''

&lt;pre&gt;print(&quot;Hi, \n How are you?&quot;)&lt;/pre&gt;
&lt;pre&gt;
Output: 

Hi,

How are you?
&lt;/pre&gt;
&lt;pre&gt;print(&quot;Hi, \t How are you?&quot;)&lt;/pre&gt;

Output: 

Hi, &lt;5 spaces&gt; How are you?

[[File:Escape_Sequence.jpg]]

==Variables==
[[#Top]]
&lt;pre&gt;
Variables are used to store some values. Values can be strings, integers or decimal values.  

Variable Name Rules:
1. Variable name should start with letter or underscore. Variable name cant start with number.
Example:
&amp;#10004; Valid: JOC, WIKI, JOC_WIKI, _JOC
&amp;#10008; Invalid: 1JOC, 123WIKI, 0_WIKI

2. Remaining letter other then first one can contain number, underscore.
Example:
JOC1234, WIKI012_1332

3. Variable names are case sensitivities.
Example:
JOC, jOC, joC all are different varibles. 

&lt;/pre&gt;
{{#ev:youtube|https://youtu.be/60iAXH1sm-Y|250|right}}

===How to print a variable?===
In order to print the value of a variable in python, first initialize the variable and then call it where ever you wanna use it. 
&lt;pre&gt;print(variable_name)&lt;/pre&gt;

&lt;pre&gt;For example :
x=2                # x is viable here
print(x)           # calling variable x with print function

a = &quot;JOC&quot;          # a is variable here
b = &quot;_WIKI&quot;        # b is variable here
c = a + b          # c is variable here which will provide addition of variable a and b
&lt;/pre&gt;

===Some facts about Variables===
* If you want to print variable name with a message, you can use , operator. For example : I want to print Hello Simran and Simran has been stored in a variable called ''name''.
  name=&quot;Simran&quot;
  print(&quot;Hello&quot;,name)
* If you change the value of a variable, it will store the latest value. For example :
  name=&quot;Simran&quot;
  name=&quot;Amit&quot;
  If you will execute the command ''print(name)'', Amit will be displayed.
* You can perform operations like addition, subtraction etc only on integral variables.

===Variables Types and Conversion===
&lt;pre&gt;Variable can be decimal, integer and decimal. And they can be inter covered with the help of conversion functions.

Example:
JOC = 5           Save in Memory as 5       # We have variable with name JOC having value 5 here.
JOC = int(5)      Save in Memory as 5       # Here Variable JOC holding integer value of 5. 
JOC = flot(5)     Save in Memory as 5.0     # Here variable JOC holding flot value of 5
JOC = str(5)      Save in Memory as &quot;5&quot;     # Here variable JOC holding string value of 5 or We can say 5 will be treated as string here.
JOC = complex(5)  Save in Memory as (5+0j)  # Here variable JOC holding complex value of 5.
JOC = oct(5)      Save in Memory as 012     # Here variable JOC holding octal representation of 5.
JOC = hex(5)      Save in Memory as 0xa     # Here variable JOC holding hexadecimal representation of 5

There are many more function available in Python. You can convert variable as per your requirement.
&lt;/pre&gt;


&lt;h1 style='color:black;font-family:Calibri;font-size:14.0pt;font-weight:800;
font-style:normal'&gt;Conversion Table with Eample&lt;/h1&gt;

&lt;table border=0 cellpadding=0 cellspacing=0 width=656 style='border-collapse:
 collapse;table-layout:fixed;width:492pt'&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6624497 width=63 style='height:15.0pt;width:47pt'&gt;Serial
  No&lt;/td&gt;
  &lt;td class=xl6724497 width=77 style='border-left:none;width:58pt'&gt;Function&lt;/td&gt;
  &lt;td class=xl6724497 width=303 style='border-left:none;width:227pt'&gt;Description&lt;/td&gt;
  &lt;td class=xl6724497 width=162 style='border-left:none;width:122pt'&gt;Example&lt;/td&gt;
  &lt;td class=xl6824497 width=51 style='border-left:none;width:38pt'&gt;Output&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;1&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;int(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to an
  integer.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10.12;
  print(int(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;2&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;long(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a&lt;span
  style='mso-spacerun:yes'&gt;  &lt;/span&gt;to a long integer&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10.12;
  print(long(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;3&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;float(a)&lt;/td&gt;
  &lt;td class=xl6524497 width=303 style='border-top:none;border-left:none;
  width:227pt'&gt;Converts a to a floating-point number.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 101.23;
  print(float(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;101.23&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;4&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;complex(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to a
  complex number.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print(complex(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10+0j&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;5&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;str(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to
  string.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print(str(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;6&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;repr(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts object
  a to an expression string.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print(repr(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;7&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;tuple(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to
  tuple.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print((a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;8&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;list(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to
  list.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print([a])&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;[10]&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;9&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;set(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to
  set.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a =
  set(&amp;quot;10&amp;quot;); print(a)&lt;/td&gt;
  &lt;td class=xl7124497 width=51 style='border-top:none;border-left:none;
  width:38pt'&gt;{'1', '0'}&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;10&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;dict(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to
  dictonary&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = dict(a=10);
  print(a)&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;{'a': 10}&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;11&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;chr(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts an
  integer to a character.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 97;
  print(chr(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;a&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;12&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;ord(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a
  single character to its integer value.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a =
  &amp;quot;J&amp;quot;; print(ord(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;74&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;13&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;hex(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts an
  integer to a hexadecimal string.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print(hex(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;0xa&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=21 style='height:15.75pt'&gt;
  &lt;td height=21 class=xl7224497 style='height:15.75pt;border-top:none'&gt;14&lt;/td&gt;
  &lt;td class=xl7324497 style='border-top:none;border-left:none'&gt;oct(a)&lt;/td&gt;
  &lt;td class=xl7324497 style='border-top:none;border-left:none'&gt;Converts an
  integer to an octal string.&lt;/td&gt;
  &lt;td class=xl7324497 style='border-top:none;border-left:none'&gt;a = 10;
  print(oct(a))&lt;/td&gt;
  &lt;td class=xl7424497 style='border-top:none;border-left:none'&gt;0o12&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
  &lt;tr height=0 style='display:none'&gt;
  &lt;td width=63 style='width:47pt'&gt;&lt;/td&gt;
  &lt;td width=77 style='width:58pt'&gt;&lt;/td&gt;
  &lt;td width=303 style='width:227pt'&gt;&lt;/td&gt;
  &lt;td width=162 style='width:122pt'&gt;&lt;/td&gt;
  &lt;td width=51 style='width:38pt'&gt;&lt;/td&gt;
 &lt;/tr&gt;
&lt;/table&gt;

==How to execute couple of instructions on console?==
You can execute couple of instructions on console using ;. Write Statement 1;Statement 2;......and then press ''Enter''.
{{#ev:youtube|https://youtu.be/CYQCYvLE22Y|250|right}}









==How to take input from the user?==
We can take input from the user using ''input'' function. For Example : You want the user to input variable ''x'', then write x=input(&quot;Enter the value of x&quot;) and execute. Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNkVLCxZw_jcgyS-bmrIVSP

And when the input you need is of data type other than string. You can do both the input function and data conversion in a single line.
For example:
Consider the program for letting in the patients
'''c=input(&quot;Enter (1/0)&quot;);d=int(c)'''

Instead of using it in two separate lines, combine it into a single line
'''c=int(input(&quot;Enter (1/0)&quot;))'''.

To get two inputs in same line with a space between them split() is used.

a,b=input(&quot;enter a&quot;).split(&quot;enter b&quot;)
----
[[#Top]]

==If statement==
If statement is used to execute set of two contrary statements based on a condition. 

===Syntax===
If (Condition):
    Statement 1
else:
    Statement 2

If 'Condition' is true then 'Statement 1' will be executed otherwise 'Statement 2' will be executed.

Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNhHmg3SkK1uiutigcAbH9K

==Loops==
[[#Top]]&lt;br&gt;
Loops in a programming languages are used to execute set of repetitive statements. For loop and while loop are used extensively to execute a set of looping instructions.

=== For loop Syntax ===
&lt;pre&gt;
for i in range(10): 
    Statement
&lt;/pre&gt;
range(10) indicate that values 0 to 9 will be assigned to the variable i and for each value of i the Statement will be executed, e.g.
&lt;pre&gt;
for i in range(10): 
    print(i)
&lt;/pre&gt;
Output will be
&lt;pre&gt;
0
1
2
3
4
5
6
7
8
9
&lt;/pre&gt;

[[#Top]]

=== While loop Syntax ===
&lt;pre&gt;
intialisation

while(condition):
   Statement
   increment/decrement
&lt;/pre&gt;
e.g.
&lt;pre&gt;
#initialization
i=0
while(i&lt;10): 
    print(i)
    i=i+1
&lt;/pre&gt;
Output will be:
&lt;pre&gt;
0
1
2
3
4
5
6
7
8
9
&lt;/pre&gt;
Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNbl5jkVrrw1E5XSvm3GiCI

[[#Top]]

==Importance of Indentation in Python==
 &lt;p style=&quot;text-align:justify&quot;&gt;
Indentation is used to indicate to what block of statements belong. Indentation of blocks convey program structure in Python. Indentation in Python is used to refer a group/block of code/statements. In ''C++'' we use { and } (curly brackets) to group a set of statements. But in Python, there are no such brackets used. Instead of such brackets used in other programming languages, we use indentation in Python.&lt;/p&gt;

Use tabs, instead of spaces for ease of writing code.

Wrong indentation can lead to syntax error, or makes your output wrong for your logic e.g.
&lt;pre&gt;
#IndentationError: expected an indented block
i=-1
if i&lt;0:
print(&quot;Test successful&quot;)#Wrong indentation 
else:    
    print(&quot;Test failed&quot;)
#Output: IndentationError: expected an indented block
&lt;/pre&gt;
---
&lt;pre&gt;
#Properly Indented code:
i=-1
if i&lt;0:
    print(&quot;Test successful&quot;)#Right indentation
else:    
    print(&quot;Test failed&quot;)
#Output:Test successful
&lt;/pre&gt;
---
Logic changed, so output changed, with improper indentation, e.g.
---
&lt;h3&gt;Code : 1&lt;/h3&gt;
&lt;pre&gt;
sum=0
for i in range(5):
    for j in range(5):
        sum+=i
print(sum, end=&quot; &quot;)
#Output: 50
&lt;/pre&gt;
        
&lt;h3&gt;Code : 2&lt;/h3&gt;
&lt;pre&gt;
for i in range(5):
    for j in range(5):
        print(end=&quot; &quot;)
    sum+=i
print(sum, end=&quot; &quot;)
#Output:                          10
&lt;/pre&gt;
{{#ev:youtube|https://youtu.be/pmavoW419Yc|250|right}}&lt;br&gt;

[[#Top]]

==Spyder IDE Black Screen Solution==

----

 This issue is because of ''Help'' screen which is by default open. 
 We need to close it. So here's how you do it-


===Method 1:===

Step 1-    Try by closing current pane for that,  &quot;''press ctrl+shift+F4''&quot;  wait for few seconds things will appear on screen.

Step 2-    If it so than on menu bar go to ''view &gt; panes &gt; help'' unchecked &quot;''Help''&quot; option.

Step 3-    Make sure that &quot;''Help''&quot; under ''view &gt; panes'' is permanently unchecked. And ''Editor, Ipython console, Variable explorer''  are checked. 


===Method 2:===

Step 1-    Open spyder.

Step 2-   On that black screen randomly ''Left click'' on spyder &quot;''Menu bar''&quot; area you will get menu drop downs, You have to find Drop down with &quot;''Panes''&quot; option.

Step 3-   On &quot;''Panes''&quot; drop down unchecked the &quot;''Help''&quot;.

Step 4-   Wait for few seconds Spyder view will appear.

Step 5 -  Make sure that ''&quot;Help&quot;'' under view&gt;panes is permanently unchecked. And ''Editor, Ipython console, variable explorer'' are checked.


[[#Top]]</text>
      <sha1>sm7w93ozw9lt7tt1dp3318tqaqarmnh</sha1>
    </revision>
    <revision>
      <id>3721</id>
      <parentid>3719</parentid>
      <timestamp>2018-09-29T01:32:13Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* Importance of Indentation in Python */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="20493">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_2 Contributors of this page]
==Introduction to Python==
 &lt;p style=&quot;text-align:justify&quot;&gt;Python is a widely used programming language which allows programmers to write the program in fewer lines of code. It was designed by ''Guido van Rossum'' in 1991. Python uses an interpreter instead of compiler. Basically, the main difference between compiler and interpreter is that the compiler takes the code as 'whole' and compiles it. for example, in ''C'' language and on the other side in interpreter. For example: languages like Python. It interprets the written code 'line by line', and if somewhere error is found. It stops interpreting the code from there itself. Here, in our course we will be using ''Spyder IDE''. Spyder is an integrated development environment with editing options to assist the programmers in writing programs. Spyder IDE is divided into two panes, one is console and other one is where program is written.&lt;/p&gt;

&lt;p style=&quot;text-align:justify&quot;&gt;
Python works on different platforms (Windows, Mac, Linux, Raspberry Pi, etc).
Python has a simple syntax similar to the English language.
Python has syntax that allows developers to write programs with fewer lines than some other programming languages.
Python runs on an interpreter system, meaning that code can be executed as soon as it is written. This means that prototyping can be very quick.&lt;/p&gt;
Python can be treated in a procedural way, an object-orientated way or a functional way.

==Installing Anaconda==
[[#Top]]

This article is all about installing and troubleshooting Anaconda and Spyder on different platforms.

===Windows===
Step 1 -&gt; Download the installer from here 
 &lt;p style=&quot;text-align:justify&quot;&gt;
[https://www.anaconda.com/download/#windows Download Link]. Make sure that you download the version compatible to your operating system architecture. If you have a 64 bit OS then you can download either 64 bit of 32 bit, but if you have 32 bit OS then you should download the 32 bit version only.
&lt;/p&gt;
 &lt;p style=&quot;text-align:justify&quot;&gt;
Step 2 -&gt; Double click on the .exe file that you downloaded just now and follow the instructions. If you are not sure of the installation options then just choose the default.&lt;/p&gt;
 &lt;p style=&quot;text-align:justify&quot;&gt;
Step 3 -&gt; To test your installation, open cmd (go to Start -&gt; then type cmd in the search bar and hit enter). There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.&lt;/p&gt;

===Mac===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#macos Download Link].

Step 2 -&gt; Double click on the .pkg file that you just downloaded. If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

===Linux===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#linux Download Link].

Step 2 -&gt; Go to the folder where you downloaded the .sh file and type following command 

  '''bash Anaconda-latest-Linux-x86_64.sh'''

If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

==Troubleshooting Spyder==

[[#Top]]
 &lt;p style=&quot;text-align:justify&quot;&gt;
In most of the cases, it happens that Spyder is already running and you have initiated one more instance of it. Please make sure that spyder is not running already.
If you are on Linux OS, please launch spyder through terminal. Just open the terminal and type '''spyder''' and it will launch. When Spyder opens, make sure you see Anaconda with the version written on the Ipython console. If not, try changing the path of your anaconda. Follow these steps according to your OS version.&lt;/p&gt;

====Windows====
[https://stackoverflow.com/questions/44597662/conda-command-is-not-recognized-on-windows-10 Click Here]

====Linux====
[https://stackoverflow.com/questions/18675907/how-to-run-conda Click Here]

====Mac====
[https://stackoverflow.com/questions/35246386/conda-command-not-found Click Here]

In most of the cases relaunching Spyder works.
A more general Troubleshoot is present [https://github.com/spyder-ide/spyder/wiki/Troubleshooting-Guide-and-FAQ Here]

==How to run a program in Spyder IDE?==
Go to Run on the menu bar. Click Run-&gt;Run.

[[#Top]]

==Print statements==
Print statements help to display output on console. 
{{#ev:youtube|https://youtu.be/gECkqaOwyt0|250|right}}

===Syntax===
&lt;pre&gt;print()&lt;/pre&gt;

===How to print a message?===
In order to print a message in Python, write &lt;pre&gt;print(&quot;message&quot;)&lt;/pre&gt;
Single, double, triple quote can be used print()

'''Example:'''

'''Single Quote'''
&lt;pre&gt;
print('Hello')  
Output: Hello
&lt;/pre&gt;
'''Double Quote'''
&lt;pre&gt;
print(&quot;Hello&quot;)  
Output: Hello
&lt;/pre&gt;
'''Quote within quote'''
&lt;pre&gt;print('Is &quot;Ram&quot; a good boy?')  
Output: Is &quot;Ram&quot; a good boy?&lt;/pre&gt;

[[#Top]]

==Escape sequences with strings==

We can use escape sequence within strings to make output more presentable.

'''\n'''  : It will move to next line.

'''\t'''  : It will add tab space(5space)

'''\a'''  : It will play system sound once.

'''Example:'''

&lt;pre&gt;print(&quot;Hi, \n How are you?&quot;)&lt;/pre&gt;
&lt;pre&gt;
Output: 

Hi,

How are you?
&lt;/pre&gt;
&lt;pre&gt;print(&quot;Hi, \t How are you?&quot;)&lt;/pre&gt;

Output: 

Hi, &lt;5 spaces&gt; How are you?

[[File:Escape_Sequence.jpg]]

==Variables==
[[#Top]]
&lt;pre&gt;
Variables are used to store some values. Values can be strings, integers or decimal values.  

Variable Name Rules:
1. Variable name should start with letter or underscore. Variable name cant start with number.
Example:
&amp;#10004; Valid: JOC, WIKI, JOC_WIKI, _JOC
&amp;#10008; Invalid: 1JOC, 123WIKI, 0_WIKI

2. Remaining letter other then first one can contain number, underscore.
Example:
JOC1234, WIKI012_1332

3. Variable names are case sensitivities.
Example:
JOC, jOC, joC all are different varibles. 

&lt;/pre&gt;
{{#ev:youtube|https://youtu.be/60iAXH1sm-Y|250|right}}

===How to print a variable?===
In order to print the value of a variable in python, first initialize the variable and then call it where ever you wanna use it. 
&lt;pre&gt;print(variable_name)&lt;/pre&gt;

&lt;pre&gt;For example :
x=2                # x is viable here
print(x)           # calling variable x with print function

a = &quot;JOC&quot;          # a is variable here
b = &quot;_WIKI&quot;        # b is variable here
c = a + b          # c is variable here which will provide addition of variable a and b
&lt;/pre&gt;

===Some facts about Variables===
* If you want to print variable name with a message, you can use , operator. For example : I want to print Hello Simran and Simran has been stored in a variable called ''name''.
  name=&quot;Simran&quot;
  print(&quot;Hello&quot;,name)
* If you change the value of a variable, it will store the latest value. For example :
  name=&quot;Simran&quot;
  name=&quot;Amit&quot;
  If you will execute the command ''print(name)'', Amit will be displayed.
* You can perform operations like addition, subtraction etc only on integral variables.

===Variables Types and Conversion===
&lt;pre&gt;Variable can be decimal, integer and decimal. And they can be inter covered with the help of conversion functions.

Example:
JOC = 5           Save in Memory as 5       # We have variable with name JOC having value 5 here.
JOC = int(5)      Save in Memory as 5       # Here Variable JOC holding integer value of 5. 
JOC = flot(5)     Save in Memory as 5.0     # Here variable JOC holding flot value of 5
JOC = str(5)      Save in Memory as &quot;5&quot;     # Here variable JOC holding string value of 5 or We can say 5 will be treated as string here.
JOC = complex(5)  Save in Memory as (5+0j)  # Here variable JOC holding complex value of 5.
JOC = oct(5)      Save in Memory as 012     # Here variable JOC holding octal representation of 5.
JOC = hex(5)      Save in Memory as 0xa     # Here variable JOC holding hexadecimal representation of 5

There are many more function available in Python. You can convert variable as per your requirement.
&lt;/pre&gt;


&lt;h1 style='color:black;font-family:Calibri;font-size:14.0pt;font-weight:800;
font-style:normal'&gt;Conversion Table with Eample&lt;/h1&gt;

&lt;table border=0 cellpadding=0 cellspacing=0 width=656 style='border-collapse:
 collapse;table-layout:fixed;width:492pt'&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6624497 width=63 style='height:15.0pt;width:47pt'&gt;Serial
  No&lt;/td&gt;
  &lt;td class=xl6724497 width=77 style='border-left:none;width:58pt'&gt;Function&lt;/td&gt;
  &lt;td class=xl6724497 width=303 style='border-left:none;width:227pt'&gt;Description&lt;/td&gt;
  &lt;td class=xl6724497 width=162 style='border-left:none;width:122pt'&gt;Example&lt;/td&gt;
  &lt;td class=xl6824497 width=51 style='border-left:none;width:38pt'&gt;Output&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;1&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;int(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to an
  integer.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10.12;
  print(int(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;2&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;long(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a&lt;span
  style='mso-spacerun:yes'&gt;  &lt;/span&gt;to a long integer&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10.12;
  print(long(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;3&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;float(a)&lt;/td&gt;
  &lt;td class=xl6524497 width=303 style='border-top:none;border-left:none;
  width:227pt'&gt;Converts a to a floating-point number.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 101.23;
  print(float(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;101.23&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;4&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;complex(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to a
  complex number.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print(complex(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10+0j&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;5&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;str(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to
  string.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print(str(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;6&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;repr(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts object
  a to an expression string.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print(repr(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;7&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;tuple(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to
  tuple.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print((a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;8&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;list(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to
  list.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print([a])&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;[10]&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;9&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;set(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to
  set.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a =
  set(&amp;quot;10&amp;quot;); print(a)&lt;/td&gt;
  &lt;td class=xl7124497 width=51 style='border-top:none;border-left:none;
  width:38pt'&gt;{'1', '0'}&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;10&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;dict(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to
  dictonary&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = dict(a=10);
  print(a)&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;{'a': 10}&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;11&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;chr(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts an
  integer to a character.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 97;
  print(chr(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;a&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;12&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;ord(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a
  single character to its integer value.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a =
  &amp;quot;J&amp;quot;; print(ord(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;74&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;13&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;hex(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts an
  integer to a hexadecimal string.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print(hex(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;0xa&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=21 style='height:15.75pt'&gt;
  &lt;td height=21 class=xl7224497 style='height:15.75pt;border-top:none'&gt;14&lt;/td&gt;
  &lt;td class=xl7324497 style='border-top:none;border-left:none'&gt;oct(a)&lt;/td&gt;
  &lt;td class=xl7324497 style='border-top:none;border-left:none'&gt;Converts an
  integer to an octal string.&lt;/td&gt;
  &lt;td class=xl7324497 style='border-top:none;border-left:none'&gt;a = 10;
  print(oct(a))&lt;/td&gt;
  &lt;td class=xl7424497 style='border-top:none;border-left:none'&gt;0o12&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
  &lt;tr height=0 style='display:none'&gt;
  &lt;td width=63 style='width:47pt'&gt;&lt;/td&gt;
  &lt;td width=77 style='width:58pt'&gt;&lt;/td&gt;
  &lt;td width=303 style='width:227pt'&gt;&lt;/td&gt;
  &lt;td width=162 style='width:122pt'&gt;&lt;/td&gt;
  &lt;td width=51 style='width:38pt'&gt;&lt;/td&gt;
 &lt;/tr&gt;
&lt;/table&gt;

==How to execute couple of instructions on console?==
You can execute couple of instructions on console using ;. Write Statement 1;Statement 2;......and then press ''Enter''.
{{#ev:youtube|https://youtu.be/CYQCYvLE22Y|250|right}}









==How to take input from the user?==
We can take input from the user using ''input'' function. For Example : You want the user to input variable ''x'', then write x=input(&quot;Enter the value of x&quot;) and execute. Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNkVLCxZw_jcgyS-bmrIVSP

And when the input you need is of data type other than string. You can do both the input function and data conversion in a single line.
For example:
Consider the program for letting in the patients
'''c=input(&quot;Enter (1/0)&quot;);d=int(c)'''

Instead of using it in two separate lines, combine it into a single line
'''c=int(input(&quot;Enter (1/0)&quot;))'''.

To get two inputs in same line with a space between them split() is used.

a,b=input(&quot;enter a&quot;).split(&quot;enter b&quot;)
----
[[#Top]]

==If statement==
If statement is used to execute set of two contrary statements based on a condition. 

===Syntax===
If (Condition):
    Statement 1
else:
    Statement 2

If 'Condition' is true then 'Statement 1' will be executed otherwise 'Statement 2' will be executed.

Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNhHmg3SkK1uiutigcAbH9K

==Loops==
[[#Top]]&lt;br&gt;
Loops in a programming languages are used to execute set of repetitive statements. For loop and while loop are used extensively to execute a set of looping instructions.

=== For loop Syntax ===
&lt;pre&gt;
for i in range(10): 
    Statement
&lt;/pre&gt;
range(10) indicate that values 0 to 9 will be assigned to the variable i and for each value of i the Statement will be executed, e.g.
&lt;pre&gt;
for i in range(10): 
    print(i)
&lt;/pre&gt;
Output will be
&lt;pre&gt;
0
1
2
3
4
5
6
7
8
9
&lt;/pre&gt;

[[#Top]]

=== While loop Syntax ===
&lt;pre&gt;
intialisation

while(condition):
   Statement
   increment/decrement
&lt;/pre&gt;
e.g.
&lt;pre&gt;
#initialization
i=0
while(i&lt;10): 
    print(i)
    i=i+1
&lt;/pre&gt;
Output will be:
&lt;pre&gt;
0
1
2
3
4
5
6
7
8
9
&lt;/pre&gt;
Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNbl5jkVrrw1E5XSvm3GiCI

[[#Top]]

==Importance of Indentation in Python==
 &lt;p style=&quot;text-align:justify&quot;&gt;
Indentation is used to indicate to what block of statements belong. Indentation of blocks convey program structure in Python. Indentation in Python is used to refer a group/block of code/statements. In ''C++'' we use { and } (curly brackets) to group a set of statements. But in Python, there are no such brackets used. Instead of such brackets used in other programming languages, we use indentation in Python.&lt;/p&gt;

Use tabs, instead of spaces for ease of writing code.

Wrong indentation can lead to syntax error, or makes your output wrong for your logic e.g.
&lt;pre&gt;
#IndentationError: expected an indented block
i=-1
if i&lt;0:
print(&quot;Test successful&quot;)#Wrong indentation 
else:    
    print(&quot;Test failed&quot;)
#Output: IndentationError: expected an indented block
&lt;/pre&gt;
---
&lt;pre&gt;
&amp;9989; #Properly Indented code:
i=-1
if i&lt;0:
    print(&quot;Test successful&quot;)#Right indentation
else:    
    print(&quot;Test failed&quot;)
#Output:Test successful
&lt;/pre&gt;
---
Logic changed, so output changed, with improper indentation, e.g.
---
&lt;h3&gt;Code : 1&lt;/h3&gt;
&lt;pre&gt;
sum=0
for i in range(5):
    for j in range(5):
        sum+=i
print(sum, end=&quot; &quot;)
#Output: 50
&lt;/pre&gt;
        
&lt;h3&gt;Code : 2&lt;/h3&gt;
&lt;pre&gt;
for i in range(5):
    for j in range(5):
        print(end=&quot; &quot;)
    sum+=i
print(sum, end=&quot; &quot;)
#Output:                          10
&lt;/pre&gt;
{{#ev:youtube|https://youtu.be/pmavoW419Yc|250|right}}&lt;br&gt;

[[#Top]]

==Spyder IDE Black Screen Solution==

----

 This issue is because of ''Help'' screen which is by default open. 
 We need to close it. So here's how you do it-


===Method 1:===

Step 1-    Try by closing current pane for that,  &quot;''press ctrl+shift+F4''&quot;  wait for few seconds things will appear on screen.

Step 2-    If it so than on menu bar go to ''view &gt; panes &gt; help'' unchecked &quot;''Help''&quot; option.

Step 3-    Make sure that &quot;''Help''&quot; under ''view &gt; panes'' is permanently unchecked. And ''Editor, Ipython console, Variable explorer''  are checked. 


===Method 2:===

Step 1-    Open spyder.

Step 2-   On that black screen randomly ''Left click'' on spyder &quot;''Menu bar''&quot; area you will get menu drop downs, You have to find Drop down with &quot;''Panes''&quot; option.

Step 3-   On &quot;''Panes''&quot; drop down unchecked the &quot;''Help''&quot;.

Step 4-   Wait for few seconds Spyder view will appear.

Step 5 -  Make sure that ''&quot;Help&quot;'' under view&gt;panes is permanently unchecked. And ''Editor, Ipython console, variable explorer'' are checked.


[[#Top]]</text>
      <sha1>49dxux05ei098s55vmy18fg4h07vt1e</sha1>
    </revision>
    <revision>
      <id>3722</id>
      <parentid>3721</parentid>
      <timestamp>2018-09-29T01:33:00Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* Importance of Indentation in Python */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="20494">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_2 Contributors of this page]
==Introduction to Python==
 &lt;p style=&quot;text-align:justify&quot;&gt;Python is a widely used programming language which allows programmers to write the program in fewer lines of code. It was designed by ''Guido van Rossum'' in 1991. Python uses an interpreter instead of compiler. Basically, the main difference between compiler and interpreter is that the compiler takes the code as 'whole' and compiles it. for example, in ''C'' language and on the other side in interpreter. For example: languages like Python. It interprets the written code 'line by line', and if somewhere error is found. It stops interpreting the code from there itself. Here, in our course we will be using ''Spyder IDE''. Spyder is an integrated development environment with editing options to assist the programmers in writing programs. Spyder IDE is divided into two panes, one is console and other one is where program is written.&lt;/p&gt;

&lt;p style=&quot;text-align:justify&quot;&gt;
Python works on different platforms (Windows, Mac, Linux, Raspberry Pi, etc).
Python has a simple syntax similar to the English language.
Python has syntax that allows developers to write programs with fewer lines than some other programming languages.
Python runs on an interpreter system, meaning that code can be executed as soon as it is written. This means that prototyping can be very quick.&lt;/p&gt;
Python can be treated in a procedural way, an object-orientated way or a functional way.

==Installing Anaconda==
[[#Top]]

This article is all about installing and troubleshooting Anaconda and Spyder on different platforms.

===Windows===
Step 1 -&gt; Download the installer from here 
 &lt;p style=&quot;text-align:justify&quot;&gt;
[https://www.anaconda.com/download/#windows Download Link]. Make sure that you download the version compatible to your operating system architecture. If you have a 64 bit OS then you can download either 64 bit of 32 bit, but if you have 32 bit OS then you should download the 32 bit version only.
&lt;/p&gt;
 &lt;p style=&quot;text-align:justify&quot;&gt;
Step 2 -&gt; Double click on the .exe file that you downloaded just now and follow the instructions. If you are not sure of the installation options then just choose the default.&lt;/p&gt;
 &lt;p style=&quot;text-align:justify&quot;&gt;
Step 3 -&gt; To test your installation, open cmd (go to Start -&gt; then type cmd in the search bar and hit enter). There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.&lt;/p&gt;

===Mac===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#macos Download Link].

Step 2 -&gt; Double click on the .pkg file that you just downloaded. If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

===Linux===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#linux Download Link].

Step 2 -&gt; Go to the folder where you downloaded the .sh file and type following command 

  '''bash Anaconda-latest-Linux-x86_64.sh'''

If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

==Troubleshooting Spyder==

[[#Top]]
 &lt;p style=&quot;text-align:justify&quot;&gt;
In most of the cases, it happens that Spyder is already running and you have initiated one more instance of it. Please make sure that spyder is not running already.
If you are on Linux OS, please launch spyder through terminal. Just open the terminal and type '''spyder''' and it will launch. When Spyder opens, make sure you see Anaconda with the version written on the Ipython console. If not, try changing the path of your anaconda. Follow these steps according to your OS version.&lt;/p&gt;

====Windows====
[https://stackoverflow.com/questions/44597662/conda-command-is-not-recognized-on-windows-10 Click Here]

====Linux====
[https://stackoverflow.com/questions/18675907/how-to-run-conda Click Here]

====Mac====
[https://stackoverflow.com/questions/35246386/conda-command-not-found Click Here]

In most of the cases relaunching Spyder works.
A more general Troubleshoot is present [https://github.com/spyder-ide/spyder/wiki/Troubleshooting-Guide-and-FAQ Here]

==How to run a program in Spyder IDE?==
Go to Run on the menu bar. Click Run-&gt;Run.

[[#Top]]

==Print statements==
Print statements help to display output on console. 
{{#ev:youtube|https://youtu.be/gECkqaOwyt0|250|right}}

===Syntax===
&lt;pre&gt;print()&lt;/pre&gt;

===How to print a message?===
In order to print a message in Python, write &lt;pre&gt;print(&quot;message&quot;)&lt;/pre&gt;
Single, double, triple quote can be used print()

'''Example:'''

'''Single Quote'''
&lt;pre&gt;
print('Hello')  
Output: Hello
&lt;/pre&gt;
'''Double Quote'''
&lt;pre&gt;
print(&quot;Hello&quot;)  
Output: Hello
&lt;/pre&gt;
'''Quote within quote'''
&lt;pre&gt;print('Is &quot;Ram&quot; a good boy?')  
Output: Is &quot;Ram&quot; a good boy?&lt;/pre&gt;

[[#Top]]

==Escape sequences with strings==

We can use escape sequence within strings to make output more presentable.

'''\n'''  : It will move to next line.

'''\t'''  : It will add tab space(5space)

'''\a'''  : It will play system sound once.

'''Example:'''

&lt;pre&gt;print(&quot;Hi, \n How are you?&quot;)&lt;/pre&gt;
&lt;pre&gt;
Output: 

Hi,

How are you?
&lt;/pre&gt;
&lt;pre&gt;print(&quot;Hi, \t How are you?&quot;)&lt;/pre&gt;

Output: 

Hi, &lt;5 spaces&gt; How are you?

[[File:Escape_Sequence.jpg]]

==Variables==
[[#Top]]
&lt;pre&gt;
Variables are used to store some values. Values can be strings, integers or decimal values.  

Variable Name Rules:
1. Variable name should start with letter or underscore. Variable name cant start with number.
Example:
&amp;#10004; Valid: JOC, WIKI, JOC_WIKI, _JOC
&amp;#10008; Invalid: 1JOC, 123WIKI, 0_WIKI

2. Remaining letter other then first one can contain number, underscore.
Example:
JOC1234, WIKI012_1332

3. Variable names are case sensitivities.
Example:
JOC, jOC, joC all are different varibles. 

&lt;/pre&gt;
{{#ev:youtube|https://youtu.be/60iAXH1sm-Y|250|right}}

===How to print a variable?===
In order to print the value of a variable in python, first initialize the variable and then call it where ever you wanna use it. 
&lt;pre&gt;print(variable_name)&lt;/pre&gt;

&lt;pre&gt;For example :
x=2                # x is viable here
print(x)           # calling variable x with print function

a = &quot;JOC&quot;          # a is variable here
b = &quot;_WIKI&quot;        # b is variable here
c = a + b          # c is variable here which will provide addition of variable a and b
&lt;/pre&gt;

===Some facts about Variables===
* If you want to print variable name with a message, you can use , operator. For example : I want to print Hello Simran and Simran has been stored in a variable called ''name''.
  name=&quot;Simran&quot;
  print(&quot;Hello&quot;,name)
* If you change the value of a variable, it will store the latest value. For example :
  name=&quot;Simran&quot;
  name=&quot;Amit&quot;
  If you will execute the command ''print(name)'', Amit will be displayed.
* You can perform operations like addition, subtraction etc only on integral variables.

===Variables Types and Conversion===
&lt;pre&gt;Variable can be decimal, integer and decimal. And they can be inter covered with the help of conversion functions.

Example:
JOC = 5           Save in Memory as 5       # We have variable with name JOC having value 5 here.
JOC = int(5)      Save in Memory as 5       # Here Variable JOC holding integer value of 5. 
JOC = flot(5)     Save in Memory as 5.0     # Here variable JOC holding flot value of 5
JOC = str(5)      Save in Memory as &quot;5&quot;     # Here variable JOC holding string value of 5 or We can say 5 will be treated as string here.
JOC = complex(5)  Save in Memory as (5+0j)  # Here variable JOC holding complex value of 5.
JOC = oct(5)      Save in Memory as 012     # Here variable JOC holding octal representation of 5.
JOC = hex(5)      Save in Memory as 0xa     # Here variable JOC holding hexadecimal representation of 5

There are many more function available in Python. You can convert variable as per your requirement.
&lt;/pre&gt;


&lt;h1 style='color:black;font-family:Calibri;font-size:14.0pt;font-weight:800;
font-style:normal'&gt;Conversion Table with Eample&lt;/h1&gt;

&lt;table border=0 cellpadding=0 cellspacing=0 width=656 style='border-collapse:
 collapse;table-layout:fixed;width:492pt'&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6624497 width=63 style='height:15.0pt;width:47pt'&gt;Serial
  No&lt;/td&gt;
  &lt;td class=xl6724497 width=77 style='border-left:none;width:58pt'&gt;Function&lt;/td&gt;
  &lt;td class=xl6724497 width=303 style='border-left:none;width:227pt'&gt;Description&lt;/td&gt;
  &lt;td class=xl6724497 width=162 style='border-left:none;width:122pt'&gt;Example&lt;/td&gt;
  &lt;td class=xl6824497 width=51 style='border-left:none;width:38pt'&gt;Output&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;1&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;int(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to an
  integer.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10.12;
  print(int(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;2&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;long(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a&lt;span
  style='mso-spacerun:yes'&gt;  &lt;/span&gt;to a long integer&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10.12;
  print(long(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;3&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;float(a)&lt;/td&gt;
  &lt;td class=xl6524497 width=303 style='border-top:none;border-left:none;
  width:227pt'&gt;Converts a to a floating-point number.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 101.23;
  print(float(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;101.23&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;4&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;complex(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to a
  complex number.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print(complex(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10+0j&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;5&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;str(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to
  string.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print(str(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;6&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;repr(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts object
  a to an expression string.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print(repr(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;7&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;tuple(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to
  tuple.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print((a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;8&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;list(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to
  list.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print([a])&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;[10]&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;9&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;set(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to
  set.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a =
  set(&amp;quot;10&amp;quot;); print(a)&lt;/td&gt;
  &lt;td class=xl7124497 width=51 style='border-top:none;border-left:none;
  width:38pt'&gt;{'1', '0'}&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;10&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;dict(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to
  dictonary&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = dict(a=10);
  print(a)&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;{'a': 10}&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;11&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;chr(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts an
  integer to a character.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 97;
  print(chr(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;a&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;12&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;ord(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a
  single character to its integer value.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a =
  &amp;quot;J&amp;quot;; print(ord(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;74&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;13&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;hex(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts an
  integer to a hexadecimal string.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print(hex(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;0xa&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=21 style='height:15.75pt'&gt;
  &lt;td height=21 class=xl7224497 style='height:15.75pt;border-top:none'&gt;14&lt;/td&gt;
  &lt;td class=xl7324497 style='border-top:none;border-left:none'&gt;oct(a)&lt;/td&gt;
  &lt;td class=xl7324497 style='border-top:none;border-left:none'&gt;Converts an
  integer to an octal string.&lt;/td&gt;
  &lt;td class=xl7324497 style='border-top:none;border-left:none'&gt;a = 10;
  print(oct(a))&lt;/td&gt;
  &lt;td class=xl7424497 style='border-top:none;border-left:none'&gt;0o12&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
  &lt;tr height=0 style='display:none'&gt;
  &lt;td width=63 style='width:47pt'&gt;&lt;/td&gt;
  &lt;td width=77 style='width:58pt'&gt;&lt;/td&gt;
  &lt;td width=303 style='width:227pt'&gt;&lt;/td&gt;
  &lt;td width=162 style='width:122pt'&gt;&lt;/td&gt;
  &lt;td width=51 style='width:38pt'&gt;&lt;/td&gt;
 &lt;/tr&gt;
&lt;/table&gt;

==How to execute couple of instructions on console?==
You can execute couple of instructions on console using ;. Write Statement 1;Statement 2;......and then press ''Enter''.
{{#ev:youtube|https://youtu.be/CYQCYvLE22Y|250|right}}









==How to take input from the user?==
We can take input from the user using ''input'' function. For Example : You want the user to input variable ''x'', then write x=input(&quot;Enter the value of x&quot;) and execute. Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNkVLCxZw_jcgyS-bmrIVSP

And when the input you need is of data type other than string. You can do both the input function and data conversion in a single line.
For example:
Consider the program for letting in the patients
'''c=input(&quot;Enter (1/0)&quot;);d=int(c)'''

Instead of using it in two separate lines, combine it into a single line
'''c=int(input(&quot;Enter (1/0)&quot;))'''.

To get two inputs in same line with a space between them split() is used.

a,b=input(&quot;enter a&quot;).split(&quot;enter b&quot;)
----
[[#Top]]

==If statement==
If statement is used to execute set of two contrary statements based on a condition. 

===Syntax===
If (Condition):
    Statement 1
else:
    Statement 2

If 'Condition' is true then 'Statement 1' will be executed otherwise 'Statement 2' will be executed.

Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNhHmg3SkK1uiutigcAbH9K

==Loops==
[[#Top]]&lt;br&gt;
Loops in a programming languages are used to execute set of repetitive statements. For loop and while loop are used extensively to execute a set of looping instructions.

=== For loop Syntax ===
&lt;pre&gt;
for i in range(10): 
    Statement
&lt;/pre&gt;
range(10) indicate that values 0 to 9 will be assigned to the variable i and for each value of i the Statement will be executed, e.g.
&lt;pre&gt;
for i in range(10): 
    print(i)
&lt;/pre&gt;
Output will be
&lt;pre&gt;
0
1
2
3
4
5
6
7
8
9
&lt;/pre&gt;

[[#Top]]

=== While loop Syntax ===
&lt;pre&gt;
intialisation

while(condition):
   Statement
   increment/decrement
&lt;/pre&gt;
e.g.
&lt;pre&gt;
#initialization
i=0
while(i&lt;10): 
    print(i)
    i=i+1
&lt;/pre&gt;
Output will be:
&lt;pre&gt;
0
1
2
3
4
5
6
7
8
9
&lt;/pre&gt;
Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNbl5jkVrrw1E5XSvm3GiCI

[[#Top]]

==Importance of Indentation in Python==
 &lt;p style=&quot;text-align:justify&quot;&gt;
Indentation is used to indicate to what block of statements belong. Indentation of blocks convey program structure in Python. Indentation in Python is used to refer a group/block of code/statements. In ''C++'' we use { and } (curly brackets) to group a set of statements. But in Python, there are no such brackets used. Instead of such brackets used in other programming languages, we use indentation in Python.&lt;/p&gt;

Use tabs, instead of spaces for ease of writing code.

Wrong indentation can lead to syntax error, or makes your output wrong for your logic e.g.
&lt;pre&gt;
#IndentationError: expected an indented block
i=-1
if i&lt;0:
print(&quot;Test successful&quot;)#Wrong indentation 
else:    
    print(&quot;Test failed&quot;)
#Output: IndentationError: expected an indented block
&lt;/pre&gt;
---
&lt;pre&gt;
&amp;#9989; #Properly Indented code:
i=-1
if i&lt;0:
    print(&quot;Test successful&quot;)#Right indentation
else:    
    print(&quot;Test failed&quot;)
#Output:Test successful
&lt;/pre&gt;
---
Logic changed, so output changed, with improper indentation, e.g.
---
&lt;h3&gt;Code : 1&lt;/h3&gt;
&lt;pre&gt;
sum=0
for i in range(5):
    for j in range(5):
        sum+=i
print(sum, end=&quot; &quot;)
#Output: 50
&lt;/pre&gt;
        
&lt;h3&gt;Code : 2&lt;/h3&gt;
&lt;pre&gt;
for i in range(5):
    for j in range(5):
        print(end=&quot; &quot;)
    sum+=i
print(sum, end=&quot; &quot;)
#Output:                          10
&lt;/pre&gt;
{{#ev:youtube|https://youtu.be/pmavoW419Yc|250|right}}&lt;br&gt;

[[#Top]]

==Spyder IDE Black Screen Solution==

----

 This issue is because of ''Help'' screen which is by default open. 
 We need to close it. So here's how you do it-


===Method 1:===

Step 1-    Try by closing current pane for that,  &quot;''press ctrl+shift+F4''&quot;  wait for few seconds things will appear on screen.

Step 2-    If it so than on menu bar go to ''view &gt; panes &gt; help'' unchecked &quot;''Help''&quot; option.

Step 3-    Make sure that &quot;''Help''&quot; under ''view &gt; panes'' is permanently unchecked. And ''Editor, Ipython console, Variable explorer''  are checked. 


===Method 2:===

Step 1-    Open spyder.

Step 2-   On that black screen randomly ''Left click'' on spyder &quot;''Menu bar''&quot; area you will get menu drop downs, You have to find Drop down with &quot;''Panes''&quot; option.

Step 3-   On &quot;''Panes''&quot; drop down unchecked the &quot;''Help''&quot;.

Step 4-   Wait for few seconds Spyder view will appear.

Step 5 -  Make sure that ''&quot;Help&quot;'' under view&gt;panes is permanently unchecked. And ''Editor, Ipython console, variable explorer'' are checked.


[[#Top]]</text>
      <sha1>9pwf6znqa62khwhh5xztir2tgbiqehw</sha1>
    </revision>
    <revision>
      <id>3723</id>
      <parentid>3722</parentid>
      <timestamp>2018-09-29T01:34:04Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* Importance of Indentation in Python */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="20502">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_2 Contributors of this page]
==Introduction to Python==
 &lt;p style=&quot;text-align:justify&quot;&gt;Python is a widely used programming language which allows programmers to write the program in fewer lines of code. It was designed by ''Guido van Rossum'' in 1991. Python uses an interpreter instead of compiler. Basically, the main difference between compiler and interpreter is that the compiler takes the code as 'whole' and compiles it. for example, in ''C'' language and on the other side in interpreter. For example: languages like Python. It interprets the written code 'line by line', and if somewhere error is found. It stops interpreting the code from there itself. Here, in our course we will be using ''Spyder IDE''. Spyder is an integrated development environment with editing options to assist the programmers in writing programs. Spyder IDE is divided into two panes, one is console and other one is where program is written.&lt;/p&gt;

&lt;p style=&quot;text-align:justify&quot;&gt;
Python works on different platforms (Windows, Mac, Linux, Raspberry Pi, etc).
Python has a simple syntax similar to the English language.
Python has syntax that allows developers to write programs with fewer lines than some other programming languages.
Python runs on an interpreter system, meaning that code can be executed as soon as it is written. This means that prototyping can be very quick.&lt;/p&gt;
Python can be treated in a procedural way, an object-orientated way or a functional way.

==Installing Anaconda==
[[#Top]]

This article is all about installing and troubleshooting Anaconda and Spyder on different platforms.

===Windows===
Step 1 -&gt; Download the installer from here 
 &lt;p style=&quot;text-align:justify&quot;&gt;
[https://www.anaconda.com/download/#windows Download Link]. Make sure that you download the version compatible to your operating system architecture. If you have a 64 bit OS then you can download either 64 bit of 32 bit, but if you have 32 bit OS then you should download the 32 bit version only.
&lt;/p&gt;
 &lt;p style=&quot;text-align:justify&quot;&gt;
Step 2 -&gt; Double click on the .exe file that you downloaded just now and follow the instructions. If you are not sure of the installation options then just choose the default.&lt;/p&gt;
 &lt;p style=&quot;text-align:justify&quot;&gt;
Step 3 -&gt; To test your installation, open cmd (go to Start -&gt; then type cmd in the search bar and hit enter). There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.&lt;/p&gt;

===Mac===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#macos Download Link].

Step 2 -&gt; Double click on the .pkg file that you just downloaded. If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

===Linux===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#linux Download Link].

Step 2 -&gt; Go to the folder where you downloaded the .sh file and type following command 

  '''bash Anaconda-latest-Linux-x86_64.sh'''

If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

==Troubleshooting Spyder==

[[#Top]]
 &lt;p style=&quot;text-align:justify&quot;&gt;
In most of the cases, it happens that Spyder is already running and you have initiated one more instance of it. Please make sure that spyder is not running already.
If you are on Linux OS, please launch spyder through terminal. Just open the terminal and type '''spyder''' and it will launch. When Spyder opens, make sure you see Anaconda with the version written on the Ipython console. If not, try changing the path of your anaconda. Follow these steps according to your OS version.&lt;/p&gt;

====Windows====
[https://stackoverflow.com/questions/44597662/conda-command-is-not-recognized-on-windows-10 Click Here]

====Linux====
[https://stackoverflow.com/questions/18675907/how-to-run-conda Click Here]

====Mac====
[https://stackoverflow.com/questions/35246386/conda-command-not-found Click Here]

In most of the cases relaunching Spyder works.
A more general Troubleshoot is present [https://github.com/spyder-ide/spyder/wiki/Troubleshooting-Guide-and-FAQ Here]

==How to run a program in Spyder IDE?==
Go to Run on the menu bar. Click Run-&gt;Run.

[[#Top]]

==Print statements==
Print statements help to display output on console. 
{{#ev:youtube|https://youtu.be/gECkqaOwyt0|250|right}}

===Syntax===
&lt;pre&gt;print()&lt;/pre&gt;

===How to print a message?===
In order to print a message in Python, write &lt;pre&gt;print(&quot;message&quot;)&lt;/pre&gt;
Single, double, triple quote can be used print()

'''Example:'''

'''Single Quote'''
&lt;pre&gt;
print('Hello')  
Output: Hello
&lt;/pre&gt;
'''Double Quote'''
&lt;pre&gt;
print(&quot;Hello&quot;)  
Output: Hello
&lt;/pre&gt;
'''Quote within quote'''
&lt;pre&gt;print('Is &quot;Ram&quot; a good boy?')  
Output: Is &quot;Ram&quot; a good boy?&lt;/pre&gt;

[[#Top]]

==Escape sequences with strings==

We can use escape sequence within strings to make output more presentable.

'''\n'''  : It will move to next line.

'''\t'''  : It will add tab space(5space)

'''\a'''  : It will play system sound once.

'''Example:'''

&lt;pre&gt;print(&quot;Hi, \n How are you?&quot;)&lt;/pre&gt;
&lt;pre&gt;
Output: 

Hi,

How are you?
&lt;/pre&gt;
&lt;pre&gt;print(&quot;Hi, \t How are you?&quot;)&lt;/pre&gt;

Output: 

Hi, &lt;5 spaces&gt; How are you?

[[File:Escape_Sequence.jpg]]

==Variables==
[[#Top]]
&lt;pre&gt;
Variables are used to store some values. Values can be strings, integers or decimal values.  

Variable Name Rules:
1. Variable name should start with letter or underscore. Variable name cant start with number.
Example:
&amp;#10004; Valid: JOC, WIKI, JOC_WIKI, _JOC
&amp;#10008; Invalid: 1JOC, 123WIKI, 0_WIKI

2. Remaining letter other then first one can contain number, underscore.
Example:
JOC1234, WIKI012_1332

3. Variable names are case sensitivities.
Example:
JOC, jOC, joC all are different varibles. 

&lt;/pre&gt;
{{#ev:youtube|https://youtu.be/60iAXH1sm-Y|250|right}}

===How to print a variable?===
In order to print the value of a variable in python, first initialize the variable and then call it where ever you wanna use it. 
&lt;pre&gt;print(variable_name)&lt;/pre&gt;

&lt;pre&gt;For example :
x=2                # x is viable here
print(x)           # calling variable x with print function

a = &quot;JOC&quot;          # a is variable here
b = &quot;_WIKI&quot;        # b is variable here
c = a + b          # c is variable here which will provide addition of variable a and b
&lt;/pre&gt;

===Some facts about Variables===
* If you want to print variable name with a message, you can use , operator. For example : I want to print Hello Simran and Simran has been stored in a variable called ''name''.
  name=&quot;Simran&quot;
  print(&quot;Hello&quot;,name)
* If you change the value of a variable, it will store the latest value. For example :
  name=&quot;Simran&quot;
  name=&quot;Amit&quot;
  If you will execute the command ''print(name)'', Amit will be displayed.
* You can perform operations like addition, subtraction etc only on integral variables.

===Variables Types and Conversion===
&lt;pre&gt;Variable can be decimal, integer and decimal. And they can be inter covered with the help of conversion functions.

Example:
JOC = 5           Save in Memory as 5       # We have variable with name JOC having value 5 here.
JOC = int(5)      Save in Memory as 5       # Here Variable JOC holding integer value of 5. 
JOC = flot(5)     Save in Memory as 5.0     # Here variable JOC holding flot value of 5
JOC = str(5)      Save in Memory as &quot;5&quot;     # Here variable JOC holding string value of 5 or We can say 5 will be treated as string here.
JOC = complex(5)  Save in Memory as (5+0j)  # Here variable JOC holding complex value of 5.
JOC = oct(5)      Save in Memory as 012     # Here variable JOC holding octal representation of 5.
JOC = hex(5)      Save in Memory as 0xa     # Here variable JOC holding hexadecimal representation of 5

There are many more function available in Python. You can convert variable as per your requirement.
&lt;/pre&gt;


&lt;h1 style='color:black;font-family:Calibri;font-size:14.0pt;font-weight:800;
font-style:normal'&gt;Conversion Table with Eample&lt;/h1&gt;

&lt;table border=0 cellpadding=0 cellspacing=0 width=656 style='border-collapse:
 collapse;table-layout:fixed;width:492pt'&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6624497 width=63 style='height:15.0pt;width:47pt'&gt;Serial
  No&lt;/td&gt;
  &lt;td class=xl6724497 width=77 style='border-left:none;width:58pt'&gt;Function&lt;/td&gt;
  &lt;td class=xl6724497 width=303 style='border-left:none;width:227pt'&gt;Description&lt;/td&gt;
  &lt;td class=xl6724497 width=162 style='border-left:none;width:122pt'&gt;Example&lt;/td&gt;
  &lt;td class=xl6824497 width=51 style='border-left:none;width:38pt'&gt;Output&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;1&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;int(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to an
  integer.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10.12;
  print(int(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;2&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;long(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a&lt;span
  style='mso-spacerun:yes'&gt;  &lt;/span&gt;to a long integer&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10.12;
  print(long(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;3&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;float(a)&lt;/td&gt;
  &lt;td class=xl6524497 width=303 style='border-top:none;border-left:none;
  width:227pt'&gt;Converts a to a floating-point number.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 101.23;
  print(float(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;101.23&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;4&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;complex(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to a
  complex number.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print(complex(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10+0j&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;5&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;str(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to
  string.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print(str(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;6&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;repr(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts object
  a to an expression string.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print(repr(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;7&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;tuple(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to
  tuple.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print((a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;8&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;list(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to
  list.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print([a])&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;[10]&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;9&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;set(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to
  set.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a =
  set(&amp;quot;10&amp;quot;); print(a)&lt;/td&gt;
  &lt;td class=xl7124497 width=51 style='border-top:none;border-left:none;
  width:38pt'&gt;{'1', '0'}&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;10&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;dict(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to
  dictonary&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = dict(a=10);
  print(a)&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;{'a': 10}&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;11&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;chr(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts an
  integer to a character.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 97;
  print(chr(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;a&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;12&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;ord(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a
  single character to its integer value.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a =
  &amp;quot;J&amp;quot;; print(ord(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;74&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;13&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;hex(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts an
  integer to a hexadecimal string.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print(hex(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;0xa&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=21 style='height:15.75pt'&gt;
  &lt;td height=21 class=xl7224497 style='height:15.75pt;border-top:none'&gt;14&lt;/td&gt;
  &lt;td class=xl7324497 style='border-top:none;border-left:none'&gt;oct(a)&lt;/td&gt;
  &lt;td class=xl7324497 style='border-top:none;border-left:none'&gt;Converts an
  integer to an octal string.&lt;/td&gt;
  &lt;td class=xl7324497 style='border-top:none;border-left:none'&gt;a = 10;
  print(oct(a))&lt;/td&gt;
  &lt;td class=xl7424497 style='border-top:none;border-left:none'&gt;0o12&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
  &lt;tr height=0 style='display:none'&gt;
  &lt;td width=63 style='width:47pt'&gt;&lt;/td&gt;
  &lt;td width=77 style='width:58pt'&gt;&lt;/td&gt;
  &lt;td width=303 style='width:227pt'&gt;&lt;/td&gt;
  &lt;td width=162 style='width:122pt'&gt;&lt;/td&gt;
  &lt;td width=51 style='width:38pt'&gt;&lt;/td&gt;
 &lt;/tr&gt;
&lt;/table&gt;

==How to execute couple of instructions on console?==
You can execute couple of instructions on console using ;. Write Statement 1;Statement 2;......and then press ''Enter''.
{{#ev:youtube|https://youtu.be/CYQCYvLE22Y|250|right}}









==How to take input from the user?==
We can take input from the user using ''input'' function. For Example : You want the user to input variable ''x'', then write x=input(&quot;Enter the value of x&quot;) and execute. Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNkVLCxZw_jcgyS-bmrIVSP

And when the input you need is of data type other than string. You can do both the input function and data conversion in a single line.
For example:
Consider the program for letting in the patients
'''c=input(&quot;Enter (1/0)&quot;);d=int(c)'''

Instead of using it in two separate lines, combine it into a single line
'''c=int(input(&quot;Enter (1/0)&quot;))'''.

To get two inputs in same line with a space between them split() is used.

a,b=input(&quot;enter a&quot;).split(&quot;enter b&quot;)
----
[[#Top]]

==If statement==
If statement is used to execute set of two contrary statements based on a condition. 

===Syntax===
If (Condition):
    Statement 1
else:
    Statement 2

If 'Condition' is true then 'Statement 1' will be executed otherwise 'Statement 2' will be executed.

Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNhHmg3SkK1uiutigcAbH9K

==Loops==
[[#Top]]&lt;br&gt;
Loops in a programming languages are used to execute set of repetitive statements. For loop and while loop are used extensively to execute a set of looping instructions.

=== For loop Syntax ===
&lt;pre&gt;
for i in range(10): 
    Statement
&lt;/pre&gt;
range(10) indicate that values 0 to 9 will be assigned to the variable i and for each value of i the Statement will be executed, e.g.
&lt;pre&gt;
for i in range(10): 
    print(i)
&lt;/pre&gt;
Output will be
&lt;pre&gt;
0
1
2
3
4
5
6
7
8
9
&lt;/pre&gt;

[[#Top]]

=== While loop Syntax ===
&lt;pre&gt;
intialisation

while(condition):
   Statement
   increment/decrement
&lt;/pre&gt;
e.g.
&lt;pre&gt;
#initialization
i=0
while(i&lt;10): 
    print(i)
    i=i+1
&lt;/pre&gt;
Output will be:
&lt;pre&gt;
0
1
2
3
4
5
6
7
8
9
&lt;/pre&gt;
Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNbl5jkVrrw1E5XSvm3GiCI

[[#Top]]

==Importance of Indentation in Python==
 &lt;p style=&quot;text-align:justify&quot;&gt;
Indentation is used to indicate to what block of statements belong. Indentation of blocks convey program structure in Python. Indentation in Python is used to refer a group/block of code/statements. In ''C++'' we use { and } (curly brackets) to group a set of statements. But in Python, there are no such brackets used. Instead of such brackets used in other programming languages, we use indentation in Python.&lt;/p&gt;

Use tabs, instead of spaces for ease of writing code.

Wrong indentation can lead to syntax error, or makes your output wrong for your logic e.g.
&lt;pre&gt;
#IndentationError: expected an indented block
i=-1
if i&lt;0:
print(&quot;Test successful&quot;)#Wrong indentation &amp;#10006;
else:    
    print(&quot;Test failed&quot;)
#Output: IndentationError: expected an indented block
&lt;/pre&gt;
---
&lt;pre&gt;
#Properly Indented code:
i=-1
if i&lt;0:
    print(&quot;Test successful&quot;)#Right indentation &amp;#9989;
else:    
    print(&quot;Test failed&quot;)
#Output:Test successful
&lt;/pre&gt;
---
Logic changed, so output changed, with improper indentation, e.g.
---
&lt;h3&gt;Code : 1&lt;/h3&gt;
&lt;pre&gt;
sum=0
for i in range(5):
    for j in range(5):
        sum+=i
print(sum, end=&quot; &quot;)
#Output: 50
&lt;/pre&gt;
        
&lt;h3&gt;Code : 2&lt;/h3&gt;
&lt;pre&gt;
for i in range(5):
    for j in range(5):
        print(end=&quot; &quot;)
    sum+=i
print(sum, end=&quot; &quot;)
#Output:                          10
&lt;/pre&gt;
{{#ev:youtube|https://youtu.be/pmavoW419Yc|250|right}}&lt;br&gt;

[[#Top]]

==Spyder IDE Black Screen Solution==

----

 This issue is because of ''Help'' screen which is by default open. 
 We need to close it. So here's how you do it-


===Method 1:===

Step 1-    Try by closing current pane for that,  &quot;''press ctrl+shift+F4''&quot;  wait for few seconds things will appear on screen.

Step 2-    If it so than on menu bar go to ''view &gt; panes &gt; help'' unchecked &quot;''Help''&quot; option.

Step 3-    Make sure that &quot;''Help''&quot; under ''view &gt; panes'' is permanently unchecked. And ''Editor, Ipython console, Variable explorer''  are checked. 


===Method 2:===

Step 1-    Open spyder.

Step 2-   On that black screen randomly ''Left click'' on spyder &quot;''Menu bar''&quot; area you will get menu drop downs, You have to find Drop down with &quot;''Panes''&quot; option.

Step 3-   On &quot;''Panes''&quot; drop down unchecked the &quot;''Help''&quot;.

Step 4-   Wait for few seconds Spyder view will appear.

Step 5 -  Make sure that ''&quot;Help&quot;'' under view&gt;panes is permanently unchecked. And ''Editor, Ipython console, variable explorer'' are checked.


[[#Top]]</text>
      <sha1>kr0joixpgxehpxl8i9k1ubjo9ab7nxz</sha1>
    </revision>
    <revision>
      <id>3731</id>
      <parentid>3723</parentid>
      <timestamp>2018-09-29T01:36:16Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* Importance of Indentation in Python */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="20502">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_2 Contributors of this page]
==Introduction to Python==
 &lt;p style=&quot;text-align:justify&quot;&gt;Python is a widely used programming language which allows programmers to write the program in fewer lines of code. It was designed by ''Guido van Rossum'' in 1991. Python uses an interpreter instead of compiler. Basically, the main difference between compiler and interpreter is that the compiler takes the code as 'whole' and compiles it. for example, in ''C'' language and on the other side in interpreter. For example: languages like Python. It interprets the written code 'line by line', and if somewhere error is found. It stops interpreting the code from there itself. Here, in our course we will be using ''Spyder IDE''. Spyder is an integrated development environment with editing options to assist the programmers in writing programs. Spyder IDE is divided into two panes, one is console and other one is where program is written.&lt;/p&gt;

&lt;p style=&quot;text-align:justify&quot;&gt;
Python works on different platforms (Windows, Mac, Linux, Raspberry Pi, etc).
Python has a simple syntax similar to the English language.
Python has syntax that allows developers to write programs with fewer lines than some other programming languages.
Python runs on an interpreter system, meaning that code can be executed as soon as it is written. This means that prototyping can be very quick.&lt;/p&gt;
Python can be treated in a procedural way, an object-orientated way or a functional way.

==Installing Anaconda==
[[#Top]]

This article is all about installing and troubleshooting Anaconda and Spyder on different platforms.

===Windows===
Step 1 -&gt; Download the installer from here 
 &lt;p style=&quot;text-align:justify&quot;&gt;
[https://www.anaconda.com/download/#windows Download Link]. Make sure that you download the version compatible to your operating system architecture. If you have a 64 bit OS then you can download either 64 bit of 32 bit, but if you have 32 bit OS then you should download the 32 bit version only.
&lt;/p&gt;
 &lt;p style=&quot;text-align:justify&quot;&gt;
Step 2 -&gt; Double click on the .exe file that you downloaded just now and follow the instructions. If you are not sure of the installation options then just choose the default.&lt;/p&gt;
 &lt;p style=&quot;text-align:justify&quot;&gt;
Step 3 -&gt; To test your installation, open cmd (go to Start -&gt; then type cmd in the search bar and hit enter). There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.&lt;/p&gt;

===Mac===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#macos Download Link].

Step 2 -&gt; Double click on the .pkg file that you just downloaded. If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

===Linux===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#linux Download Link].

Step 2 -&gt; Go to the folder where you downloaded the .sh file and type following command 

  '''bash Anaconda-latest-Linux-x86_64.sh'''

If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

==Troubleshooting Spyder==

[[#Top]]
 &lt;p style=&quot;text-align:justify&quot;&gt;
In most of the cases, it happens that Spyder is already running and you have initiated one more instance of it. Please make sure that spyder is not running already.
If you are on Linux OS, please launch spyder through terminal. Just open the terminal and type '''spyder''' and it will launch. When Spyder opens, make sure you see Anaconda with the version written on the Ipython console. If not, try changing the path of your anaconda. Follow these steps according to your OS version.&lt;/p&gt;

====Windows====
[https://stackoverflow.com/questions/44597662/conda-command-is-not-recognized-on-windows-10 Click Here]

====Linux====
[https://stackoverflow.com/questions/18675907/how-to-run-conda Click Here]

====Mac====
[https://stackoverflow.com/questions/35246386/conda-command-not-found Click Here]

In most of the cases relaunching Spyder works.
A more general Troubleshoot is present [https://github.com/spyder-ide/spyder/wiki/Troubleshooting-Guide-and-FAQ Here]

==How to run a program in Spyder IDE?==
Go to Run on the menu bar. Click Run-&gt;Run.

[[#Top]]

==Print statements==
Print statements help to display output on console. 
{{#ev:youtube|https://youtu.be/gECkqaOwyt0|250|right}}

===Syntax===
&lt;pre&gt;print()&lt;/pre&gt;

===How to print a message?===
In order to print a message in Python, write &lt;pre&gt;print(&quot;message&quot;)&lt;/pre&gt;
Single, double, triple quote can be used print()

'''Example:'''

'''Single Quote'''
&lt;pre&gt;
print('Hello')  
Output: Hello
&lt;/pre&gt;
'''Double Quote'''
&lt;pre&gt;
print(&quot;Hello&quot;)  
Output: Hello
&lt;/pre&gt;
'''Quote within quote'''
&lt;pre&gt;print('Is &quot;Ram&quot; a good boy?')  
Output: Is &quot;Ram&quot; a good boy?&lt;/pre&gt;

[[#Top]]

==Escape sequences with strings==

We can use escape sequence within strings to make output more presentable.

'''\n'''  : It will move to next line.

'''\t'''  : It will add tab space(5space)

'''\a'''  : It will play system sound once.

'''Example:'''

&lt;pre&gt;print(&quot;Hi, \n How are you?&quot;)&lt;/pre&gt;
&lt;pre&gt;
Output: 

Hi,

How are you?
&lt;/pre&gt;
&lt;pre&gt;print(&quot;Hi, \t How are you?&quot;)&lt;/pre&gt;

Output: 

Hi, &lt;5 spaces&gt; How are you?

[[File:Escape_Sequence.jpg]]

==Variables==
[[#Top]]
&lt;pre&gt;
Variables are used to store some values. Values can be strings, integers or decimal values.  

Variable Name Rules:
1. Variable name should start with letter or underscore. Variable name cant start with number.
Example:
&amp;#10004; Valid: JOC, WIKI, JOC_WIKI, _JOC
&amp;#10008; Invalid: 1JOC, 123WIKI, 0_WIKI

2. Remaining letter other then first one can contain number, underscore.
Example:
JOC1234, WIKI012_1332

3. Variable names are case sensitivities.
Example:
JOC, jOC, joC all are different varibles. 

&lt;/pre&gt;
{{#ev:youtube|https://youtu.be/60iAXH1sm-Y|250|right}}

===How to print a variable?===
In order to print the value of a variable in python, first initialize the variable and then call it where ever you wanna use it. 
&lt;pre&gt;print(variable_name)&lt;/pre&gt;

&lt;pre&gt;For example :
x=2                # x is viable here
print(x)           # calling variable x with print function

a = &quot;JOC&quot;          # a is variable here
b = &quot;_WIKI&quot;        # b is variable here
c = a + b          # c is variable here which will provide addition of variable a and b
&lt;/pre&gt;

===Some facts about Variables===
* If you want to print variable name with a message, you can use , operator. For example : I want to print Hello Simran and Simran has been stored in a variable called ''name''.
  name=&quot;Simran&quot;
  print(&quot;Hello&quot;,name)
* If you change the value of a variable, it will store the latest value. For example :
  name=&quot;Simran&quot;
  name=&quot;Amit&quot;
  If you will execute the command ''print(name)'', Amit will be displayed.
* You can perform operations like addition, subtraction etc only on integral variables.

===Variables Types and Conversion===
&lt;pre&gt;Variable can be decimal, integer and decimal. And they can be inter covered with the help of conversion functions.

Example:
JOC = 5           Save in Memory as 5       # We have variable with name JOC having value 5 here.
JOC = int(5)      Save in Memory as 5       # Here Variable JOC holding integer value of 5. 
JOC = flot(5)     Save in Memory as 5.0     # Here variable JOC holding flot value of 5
JOC = str(5)      Save in Memory as &quot;5&quot;     # Here variable JOC holding string value of 5 or We can say 5 will be treated as string here.
JOC = complex(5)  Save in Memory as (5+0j)  # Here variable JOC holding complex value of 5.
JOC = oct(5)      Save in Memory as 012     # Here variable JOC holding octal representation of 5.
JOC = hex(5)      Save in Memory as 0xa     # Here variable JOC holding hexadecimal representation of 5

There are many more function available in Python. You can convert variable as per your requirement.
&lt;/pre&gt;


&lt;h1 style='color:black;font-family:Calibri;font-size:14.0pt;font-weight:800;
font-style:normal'&gt;Conversion Table with Eample&lt;/h1&gt;

&lt;table border=0 cellpadding=0 cellspacing=0 width=656 style='border-collapse:
 collapse;table-layout:fixed;width:492pt'&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6624497 width=63 style='height:15.0pt;width:47pt'&gt;Serial
  No&lt;/td&gt;
  &lt;td class=xl6724497 width=77 style='border-left:none;width:58pt'&gt;Function&lt;/td&gt;
  &lt;td class=xl6724497 width=303 style='border-left:none;width:227pt'&gt;Description&lt;/td&gt;
  &lt;td class=xl6724497 width=162 style='border-left:none;width:122pt'&gt;Example&lt;/td&gt;
  &lt;td class=xl6824497 width=51 style='border-left:none;width:38pt'&gt;Output&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;1&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;int(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to an
  integer.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10.12;
  print(int(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;2&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;long(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a&lt;span
  style='mso-spacerun:yes'&gt;  &lt;/span&gt;to a long integer&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10.12;
  print(long(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;3&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;float(a)&lt;/td&gt;
  &lt;td class=xl6524497 width=303 style='border-top:none;border-left:none;
  width:227pt'&gt;Converts a to a floating-point number.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 101.23;
  print(float(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;101.23&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;4&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;complex(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to a
  complex number.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print(complex(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10+0j&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;5&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;str(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to
  string.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print(str(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;6&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;repr(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts object
  a to an expression string.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print(repr(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;7&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;tuple(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to
  tuple.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print((a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;8&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;list(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to
  list.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print([a])&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;[10]&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;9&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;set(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to
  set.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a =
  set(&amp;quot;10&amp;quot;); print(a)&lt;/td&gt;
  &lt;td class=xl7124497 width=51 style='border-top:none;border-left:none;
  width:38pt'&gt;{'1', '0'}&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;10&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;dict(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to
  dictonary&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = dict(a=10);
  print(a)&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;{'a': 10}&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;11&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;chr(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts an
  integer to a character.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 97;
  print(chr(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;a&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;12&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;ord(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a
  single character to its integer value.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a =
  &amp;quot;J&amp;quot;; print(ord(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;74&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;13&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;hex(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts an
  integer to a hexadecimal string.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print(hex(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;0xa&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=21 style='height:15.75pt'&gt;
  &lt;td height=21 class=xl7224497 style='height:15.75pt;border-top:none'&gt;14&lt;/td&gt;
  &lt;td class=xl7324497 style='border-top:none;border-left:none'&gt;oct(a)&lt;/td&gt;
  &lt;td class=xl7324497 style='border-top:none;border-left:none'&gt;Converts an
  integer to an octal string.&lt;/td&gt;
  &lt;td class=xl7324497 style='border-top:none;border-left:none'&gt;a = 10;
  print(oct(a))&lt;/td&gt;
  &lt;td class=xl7424497 style='border-top:none;border-left:none'&gt;0o12&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
  &lt;tr height=0 style='display:none'&gt;
  &lt;td width=63 style='width:47pt'&gt;&lt;/td&gt;
  &lt;td width=77 style='width:58pt'&gt;&lt;/td&gt;
  &lt;td width=303 style='width:227pt'&gt;&lt;/td&gt;
  &lt;td width=162 style='width:122pt'&gt;&lt;/td&gt;
  &lt;td width=51 style='width:38pt'&gt;&lt;/td&gt;
 &lt;/tr&gt;
&lt;/table&gt;

==How to execute couple of instructions on console?==
You can execute couple of instructions on console using ;. Write Statement 1;Statement 2;......and then press ''Enter''.
{{#ev:youtube|https://youtu.be/CYQCYvLE22Y|250|right}}









==How to take input from the user?==
We can take input from the user using ''input'' function. For Example : You want the user to input variable ''x'', then write x=input(&quot;Enter the value of x&quot;) and execute. Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNkVLCxZw_jcgyS-bmrIVSP

And when the input you need is of data type other than string. You can do both the input function and data conversion in a single line.
For example:
Consider the program for letting in the patients
'''c=input(&quot;Enter (1/0)&quot;);d=int(c)'''

Instead of using it in two separate lines, combine it into a single line
'''c=int(input(&quot;Enter (1/0)&quot;))'''.

To get two inputs in same line with a space between them split() is used.

a,b=input(&quot;enter a&quot;).split(&quot;enter b&quot;)
----
[[#Top]]

==If statement==
If statement is used to execute set of two contrary statements based on a condition. 

===Syntax===
If (Condition):
    Statement 1
else:
    Statement 2

If 'Condition' is true then 'Statement 1' will be executed otherwise 'Statement 2' will be executed.

Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNhHmg3SkK1uiutigcAbH9K

==Loops==
[[#Top]]&lt;br&gt;
Loops in a programming languages are used to execute set of repetitive statements. For loop and while loop are used extensively to execute a set of looping instructions.

=== For loop Syntax ===
&lt;pre&gt;
for i in range(10): 
    Statement
&lt;/pre&gt;
range(10) indicate that values 0 to 9 will be assigned to the variable i and for each value of i the Statement will be executed, e.g.
&lt;pre&gt;
for i in range(10): 
    print(i)
&lt;/pre&gt;
Output will be
&lt;pre&gt;
0
1
2
3
4
5
6
7
8
9
&lt;/pre&gt;

[[#Top]]

=== While loop Syntax ===
&lt;pre&gt;
intialisation

while(condition):
   Statement
   increment/decrement
&lt;/pre&gt;
e.g.
&lt;pre&gt;
#initialization
i=0
while(i&lt;10): 
    print(i)
    i=i+1
&lt;/pre&gt;
Output will be:
&lt;pre&gt;
0
1
2
3
4
5
6
7
8
9
&lt;/pre&gt;
Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNbl5jkVrrw1E5XSvm3GiCI

[[#Top]]

==Importance of Indentation in Python==
 &lt;p style=&quot;text-align:justify&quot;&gt;
Indentation is used to indicate to what block of statements belong. Indentation of blocks convey program structure in Python. Indentation in Python is used to refer a group/block of code/statements. In ''C++'' we use { and } (curly brackets) to group a set of statements. But in Python, there are no such brackets used. Instead of such brackets used in other programming languages, we use indentation in Python.&lt;/p&gt;

Use tabs, instead of spaces for ease of writing code.

Wrong indentation can lead to syntax error, or makes your output wrong for your logic e.g.
&lt;pre&gt;
#IndentationError: expected an indented block
i=-1
if i&lt;0:
print(&quot;Test successful&quot;)#Wrong indentation &amp;#10006;
else:    
    print(&quot;Test failed&quot;)
#Output: IndentationError: expected an indented block
&lt;/pre&gt;
---
&lt;pre&gt;
#Properly Indented code:
i=-1
if i&lt;0:
    print(&quot;Test successful&quot;)#Right indentation &amp;#9989;
else:    
    print(&quot;Test failed&quot;)
#Output:Test successful
&lt;/pre&gt;

'''Logic changed, so output changed, with improper indentation''', e.g.

&lt;h3&gt;Code : 1&lt;/h3&gt;
&lt;pre&gt;
sum=0
for i in range(5):
    for j in range(5):
        sum+=i
print(sum, end=&quot; &quot;)
#Output: 50
&lt;/pre&gt;
        
&lt;h3&gt;Code : 2&lt;/h3&gt;
&lt;pre&gt;
for i in range(5):
    for j in range(5):
        print(end=&quot; &quot;)
    sum+=i
print(sum, end=&quot; &quot;)
#Output:                          10
&lt;/pre&gt;
{{#ev:youtube|https://youtu.be/pmavoW419Yc|250|right}}&lt;br&gt;

[[#Top]]

==Spyder IDE Black Screen Solution==

----

 This issue is because of ''Help'' screen which is by default open. 
 We need to close it. So here's how you do it-


===Method 1:===

Step 1-    Try by closing current pane for that,  &quot;''press ctrl+shift+F4''&quot;  wait for few seconds things will appear on screen.

Step 2-    If it so than on menu bar go to ''view &gt; panes &gt; help'' unchecked &quot;''Help''&quot; option.

Step 3-    Make sure that &quot;''Help''&quot; under ''view &gt; panes'' is permanently unchecked. And ''Editor, Ipython console, Variable explorer''  are checked. 


===Method 2:===

Step 1-    Open spyder.

Step 2-   On that black screen randomly ''Left click'' on spyder &quot;''Menu bar''&quot; area you will get menu drop downs, You have to find Drop down with &quot;''Panes''&quot; option.

Step 3-   On &quot;''Panes''&quot; drop down unchecked the &quot;''Help''&quot;.

Step 4-   Wait for few seconds Spyder view will appear.

Step 5 -  Make sure that ''&quot;Help&quot;'' under view&gt;panes is permanently unchecked. And ''Editor, Ipython console, variable explorer'' are checked.


[[#Top]]</text>
      <sha1>9ew17vlrn6jdvjqfnz7gb8qlb2ye5en</sha1>
    </revision>
    <revision>
      <id>3732</id>
      <parentid>3731</parentid>
      <timestamp>2018-09-29T01:36:37Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* Importance of Indentation in Python */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="20504">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_2 Contributors of this page]
==Introduction to Python==
 &lt;p style=&quot;text-align:justify&quot;&gt;Python is a widely used programming language which allows programmers to write the program in fewer lines of code. It was designed by ''Guido van Rossum'' in 1991. Python uses an interpreter instead of compiler. Basically, the main difference between compiler and interpreter is that the compiler takes the code as 'whole' and compiles it. for example, in ''C'' language and on the other side in interpreter. For example: languages like Python. It interprets the written code 'line by line', and if somewhere error is found. It stops interpreting the code from there itself. Here, in our course we will be using ''Spyder IDE''. Spyder is an integrated development environment with editing options to assist the programmers in writing programs. Spyder IDE is divided into two panes, one is console and other one is where program is written.&lt;/p&gt;

&lt;p style=&quot;text-align:justify&quot;&gt;
Python works on different platforms (Windows, Mac, Linux, Raspberry Pi, etc).
Python has a simple syntax similar to the English language.
Python has syntax that allows developers to write programs with fewer lines than some other programming languages.
Python runs on an interpreter system, meaning that code can be executed as soon as it is written. This means that prototyping can be very quick.&lt;/p&gt;
Python can be treated in a procedural way, an object-orientated way or a functional way.

==Installing Anaconda==
[[#Top]]

This article is all about installing and troubleshooting Anaconda and Spyder on different platforms.

===Windows===
Step 1 -&gt; Download the installer from here 
 &lt;p style=&quot;text-align:justify&quot;&gt;
[https://www.anaconda.com/download/#windows Download Link]. Make sure that you download the version compatible to your operating system architecture. If you have a 64 bit OS then you can download either 64 bit of 32 bit, but if you have 32 bit OS then you should download the 32 bit version only.
&lt;/p&gt;
 &lt;p style=&quot;text-align:justify&quot;&gt;
Step 2 -&gt; Double click on the .exe file that you downloaded just now and follow the instructions. If you are not sure of the installation options then just choose the default.&lt;/p&gt;
 &lt;p style=&quot;text-align:justify&quot;&gt;
Step 3 -&gt; To test your installation, open cmd (go to Start -&gt; then type cmd in the search bar and hit enter). There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.&lt;/p&gt;

===Mac===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#macos Download Link].

Step 2 -&gt; Double click on the .pkg file that you just downloaded. If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

===Linux===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#linux Download Link].

Step 2 -&gt; Go to the folder where you downloaded the .sh file and type following command 

  '''bash Anaconda-latest-Linux-x86_64.sh'''

If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

==Troubleshooting Spyder==

[[#Top]]
 &lt;p style=&quot;text-align:justify&quot;&gt;
In most of the cases, it happens that Spyder is already running and you have initiated one more instance of it. Please make sure that spyder is not running already.
If you are on Linux OS, please launch spyder through terminal. Just open the terminal and type '''spyder''' and it will launch. When Spyder opens, make sure you see Anaconda with the version written on the Ipython console. If not, try changing the path of your anaconda. Follow these steps according to your OS version.&lt;/p&gt;

====Windows====
[https://stackoverflow.com/questions/44597662/conda-command-is-not-recognized-on-windows-10 Click Here]

====Linux====
[https://stackoverflow.com/questions/18675907/how-to-run-conda Click Here]

====Mac====
[https://stackoverflow.com/questions/35246386/conda-command-not-found Click Here]

In most of the cases relaunching Spyder works.
A more general Troubleshoot is present [https://github.com/spyder-ide/spyder/wiki/Troubleshooting-Guide-and-FAQ Here]

==How to run a program in Spyder IDE?==
Go to Run on the menu bar. Click Run-&gt;Run.

[[#Top]]

==Print statements==
Print statements help to display output on console. 
{{#ev:youtube|https://youtu.be/gECkqaOwyt0|250|right}}

===Syntax===
&lt;pre&gt;print()&lt;/pre&gt;

===How to print a message?===
In order to print a message in Python, write &lt;pre&gt;print(&quot;message&quot;)&lt;/pre&gt;
Single, double, triple quote can be used print()

'''Example:'''

'''Single Quote'''
&lt;pre&gt;
print('Hello')  
Output: Hello
&lt;/pre&gt;
'''Double Quote'''
&lt;pre&gt;
print(&quot;Hello&quot;)  
Output: Hello
&lt;/pre&gt;
'''Quote within quote'''
&lt;pre&gt;print('Is &quot;Ram&quot; a good boy?')  
Output: Is &quot;Ram&quot; a good boy?&lt;/pre&gt;

[[#Top]]

==Escape sequences with strings==

We can use escape sequence within strings to make output more presentable.

'''\n'''  : It will move to next line.

'''\t'''  : It will add tab space(5space)

'''\a'''  : It will play system sound once.

'''Example:'''

&lt;pre&gt;print(&quot;Hi, \n How are you?&quot;)&lt;/pre&gt;
&lt;pre&gt;
Output: 

Hi,

How are you?
&lt;/pre&gt;
&lt;pre&gt;print(&quot;Hi, \t How are you?&quot;)&lt;/pre&gt;

Output: 

Hi, &lt;5 spaces&gt; How are you?

[[File:Escape_Sequence.jpg]]

==Variables==
[[#Top]]
&lt;pre&gt;
Variables are used to store some values. Values can be strings, integers or decimal values.  

Variable Name Rules:
1. Variable name should start with letter or underscore. Variable name cant start with number.
Example:
&amp;#10004; Valid: JOC, WIKI, JOC_WIKI, _JOC
&amp;#10008; Invalid: 1JOC, 123WIKI, 0_WIKI

2. Remaining letter other then first one can contain number, underscore.
Example:
JOC1234, WIKI012_1332

3. Variable names are case sensitivities.
Example:
JOC, jOC, joC all are different varibles. 

&lt;/pre&gt;
{{#ev:youtube|https://youtu.be/60iAXH1sm-Y|250|right}}

===How to print a variable?===
In order to print the value of a variable in python, first initialize the variable and then call it where ever you wanna use it. 
&lt;pre&gt;print(variable_name)&lt;/pre&gt;

&lt;pre&gt;For example :
x=2                # x is viable here
print(x)           # calling variable x with print function

a = &quot;JOC&quot;          # a is variable here
b = &quot;_WIKI&quot;        # b is variable here
c = a + b          # c is variable here which will provide addition of variable a and b
&lt;/pre&gt;

===Some facts about Variables===
* If you want to print variable name with a message, you can use , operator. For example : I want to print Hello Simran and Simran has been stored in a variable called ''name''.
  name=&quot;Simran&quot;
  print(&quot;Hello&quot;,name)
* If you change the value of a variable, it will store the latest value. For example :
  name=&quot;Simran&quot;
  name=&quot;Amit&quot;
  If you will execute the command ''print(name)'', Amit will be displayed.
* You can perform operations like addition, subtraction etc only on integral variables.

===Variables Types and Conversion===
&lt;pre&gt;Variable can be decimal, integer and decimal. And they can be inter covered with the help of conversion functions.

Example:
JOC = 5           Save in Memory as 5       # We have variable with name JOC having value 5 here.
JOC = int(5)      Save in Memory as 5       # Here Variable JOC holding integer value of 5. 
JOC = flot(5)     Save in Memory as 5.0     # Here variable JOC holding flot value of 5
JOC = str(5)      Save in Memory as &quot;5&quot;     # Here variable JOC holding string value of 5 or We can say 5 will be treated as string here.
JOC = complex(5)  Save in Memory as (5+0j)  # Here variable JOC holding complex value of 5.
JOC = oct(5)      Save in Memory as 012     # Here variable JOC holding octal representation of 5.
JOC = hex(5)      Save in Memory as 0xa     # Here variable JOC holding hexadecimal representation of 5

There are many more function available in Python. You can convert variable as per your requirement.
&lt;/pre&gt;


&lt;h1 style='color:black;font-family:Calibri;font-size:14.0pt;font-weight:800;
font-style:normal'&gt;Conversion Table with Eample&lt;/h1&gt;

&lt;table border=0 cellpadding=0 cellspacing=0 width=656 style='border-collapse:
 collapse;table-layout:fixed;width:492pt'&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6624497 width=63 style='height:15.0pt;width:47pt'&gt;Serial
  No&lt;/td&gt;
  &lt;td class=xl6724497 width=77 style='border-left:none;width:58pt'&gt;Function&lt;/td&gt;
  &lt;td class=xl6724497 width=303 style='border-left:none;width:227pt'&gt;Description&lt;/td&gt;
  &lt;td class=xl6724497 width=162 style='border-left:none;width:122pt'&gt;Example&lt;/td&gt;
  &lt;td class=xl6824497 width=51 style='border-left:none;width:38pt'&gt;Output&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;1&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;int(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to an
  integer.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10.12;
  print(int(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;2&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;long(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a&lt;span
  style='mso-spacerun:yes'&gt;  &lt;/span&gt;to a long integer&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10.12;
  print(long(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;3&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;float(a)&lt;/td&gt;
  &lt;td class=xl6524497 width=303 style='border-top:none;border-left:none;
  width:227pt'&gt;Converts a to a floating-point number.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 101.23;
  print(float(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;101.23&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;4&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;complex(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to a
  complex number.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print(complex(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10+0j&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;5&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;str(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to
  string.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print(str(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;6&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;repr(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts object
  a to an expression string.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print(repr(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;7&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;tuple(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to
  tuple.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print((a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;8&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;list(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to
  list.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print([a])&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;[10]&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;9&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;set(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to
  set.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a =
  set(&amp;quot;10&amp;quot;); print(a)&lt;/td&gt;
  &lt;td class=xl7124497 width=51 style='border-top:none;border-left:none;
  width:38pt'&gt;{'1', '0'}&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;10&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;dict(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to
  dictonary&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = dict(a=10);
  print(a)&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;{'a': 10}&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;11&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;chr(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts an
  integer to a character.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 97;
  print(chr(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;a&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;12&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;ord(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a
  single character to its integer value.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a =
  &amp;quot;J&amp;quot;; print(ord(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;74&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;13&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;hex(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts an
  integer to a hexadecimal string.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print(hex(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;0xa&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=21 style='height:15.75pt'&gt;
  &lt;td height=21 class=xl7224497 style='height:15.75pt;border-top:none'&gt;14&lt;/td&gt;
  &lt;td class=xl7324497 style='border-top:none;border-left:none'&gt;oct(a)&lt;/td&gt;
  &lt;td class=xl7324497 style='border-top:none;border-left:none'&gt;Converts an
  integer to an octal string.&lt;/td&gt;
  &lt;td class=xl7324497 style='border-top:none;border-left:none'&gt;a = 10;
  print(oct(a))&lt;/td&gt;
  &lt;td class=xl7424497 style='border-top:none;border-left:none'&gt;0o12&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
  &lt;tr height=0 style='display:none'&gt;
  &lt;td width=63 style='width:47pt'&gt;&lt;/td&gt;
  &lt;td width=77 style='width:58pt'&gt;&lt;/td&gt;
  &lt;td width=303 style='width:227pt'&gt;&lt;/td&gt;
  &lt;td width=162 style='width:122pt'&gt;&lt;/td&gt;
  &lt;td width=51 style='width:38pt'&gt;&lt;/td&gt;
 &lt;/tr&gt;
&lt;/table&gt;

==How to execute couple of instructions on console?==
You can execute couple of instructions on console using ;. Write Statement 1;Statement 2;......and then press ''Enter''.
{{#ev:youtube|https://youtu.be/CYQCYvLE22Y|250|right}}









==How to take input from the user?==
We can take input from the user using ''input'' function. For Example : You want the user to input variable ''x'', then write x=input(&quot;Enter the value of x&quot;) and execute. Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNkVLCxZw_jcgyS-bmrIVSP

And when the input you need is of data type other than string. You can do both the input function and data conversion in a single line.
For example:
Consider the program for letting in the patients
'''c=input(&quot;Enter (1/0)&quot;);d=int(c)'''

Instead of using it in two separate lines, combine it into a single line
'''c=int(input(&quot;Enter (1/0)&quot;))'''.

To get two inputs in same line with a space between them split() is used.

a,b=input(&quot;enter a&quot;).split(&quot;enter b&quot;)
----
[[#Top]]

==If statement==
If statement is used to execute set of two contrary statements based on a condition. 

===Syntax===
If (Condition):
    Statement 1
else:
    Statement 2

If 'Condition' is true then 'Statement 1' will be executed otherwise 'Statement 2' will be executed.

Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNhHmg3SkK1uiutigcAbH9K

==Loops==
[[#Top]]&lt;br&gt;
Loops in a programming languages are used to execute set of repetitive statements. For loop and while loop are used extensively to execute a set of looping instructions.

=== For loop Syntax ===
&lt;pre&gt;
for i in range(10): 
    Statement
&lt;/pre&gt;
range(10) indicate that values 0 to 9 will be assigned to the variable i and for each value of i the Statement will be executed, e.g.
&lt;pre&gt;
for i in range(10): 
    print(i)
&lt;/pre&gt;
Output will be
&lt;pre&gt;
0
1
2
3
4
5
6
7
8
9
&lt;/pre&gt;

[[#Top]]

=== While loop Syntax ===
&lt;pre&gt;
intialisation

while(condition):
   Statement
   increment/decrement
&lt;/pre&gt;
e.g.
&lt;pre&gt;
#initialization
i=0
while(i&lt;10): 
    print(i)
    i=i+1
&lt;/pre&gt;
Output will be:
&lt;pre&gt;
0
1
2
3
4
5
6
7
8
9
&lt;/pre&gt;
Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNbl5jkVrrw1E5XSvm3GiCI

[[#Top]]

==Importance of Indentation in Python==
 &lt;p style=&quot;text-align:justify&quot;&gt;
Indentation is used to indicate to what block of statements belong. Indentation of blocks convey program structure in Python. Indentation in Python is used to refer a group/block of code/statements. In ''C++'' we use { and } (curly brackets) to group a set of statements. But in Python, there are no such brackets used. Instead of such brackets used in other programming languages, we use indentation in Python.&lt;/p&gt;

Use tabs, instead of spaces for ease of writing code.

Wrong indentation can lead to syntax error, or makes your output wrong for your logic e.g.
&lt;pre&gt;
#IndentationError: expected an indented block
i=-1
if i&lt;0:
print(&quot;Test successful&quot;)#Wrong indentation &amp;#10006;
else:    
    print(&quot;Test failed&quot;)
#Output: IndentationError: expected an indented block
&lt;/pre&gt;
---
&lt;pre&gt;
#Properly Indented code:
i=-1
if i&lt;0:
    print(&quot;Test successful&quot;)#Right indentation &amp;#9989;
else:    
    print(&quot;Test failed&quot;)
#Output:Test successful
&lt;/pre&gt;


'''Logic changed, so output changed, with improper indentation''', e.g.


&lt;h3&gt;Code : 1&lt;/h3&gt;
&lt;pre&gt;
sum=0
for i in range(5):
    for j in range(5):
        sum+=i
print(sum, end=&quot; &quot;)
#Output: 50
&lt;/pre&gt;
        
&lt;h3&gt;Code : 2&lt;/h3&gt;
&lt;pre&gt;
for i in range(5):
    for j in range(5):
        print(end=&quot; &quot;)
    sum+=i
print(sum, end=&quot; &quot;)
#Output:                          10
&lt;/pre&gt;
{{#ev:youtube|https://youtu.be/pmavoW419Yc|250|right}}&lt;br&gt;

[[#Top]]

==Spyder IDE Black Screen Solution==

----

 This issue is because of ''Help'' screen which is by default open. 
 We need to close it. So here's how you do it-


===Method 1:===

Step 1-    Try by closing current pane for that,  &quot;''press ctrl+shift+F4''&quot;  wait for few seconds things will appear on screen.

Step 2-    If it so than on menu bar go to ''view &gt; panes &gt; help'' unchecked &quot;''Help''&quot; option.

Step 3-    Make sure that &quot;''Help''&quot; under ''view &gt; panes'' is permanently unchecked. And ''Editor, Ipython console, Variable explorer''  are checked. 


===Method 2:===

Step 1-    Open spyder.

Step 2-   On that black screen randomly ''Left click'' on spyder &quot;''Menu bar''&quot; area you will get menu drop downs, You have to find Drop down with &quot;''Panes''&quot; option.

Step 3-   On &quot;''Panes''&quot; drop down unchecked the &quot;''Help''&quot;.

Step 4-   Wait for few seconds Spyder view will appear.

Step 5 -  Make sure that ''&quot;Help&quot;'' under view&gt;panes is permanently unchecked. And ''Editor, Ipython console, variable explorer'' are checked.


[[#Top]]</text>
      <sha1>b3j0ekcnecwsd6gyvxi69ogphx6lzwh</sha1>
    </revision>
    <revision>
      <id>3733</id>
      <parentid>3732</parentid>
      <timestamp>2018-09-29T01:37:13Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* Importance of Indentation in Python */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="20514">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_2 Contributors of this page]
==Introduction to Python==
 &lt;p style=&quot;text-align:justify&quot;&gt;Python is a widely used programming language which allows programmers to write the program in fewer lines of code. It was designed by ''Guido van Rossum'' in 1991. Python uses an interpreter instead of compiler. Basically, the main difference between compiler and interpreter is that the compiler takes the code as 'whole' and compiles it. for example, in ''C'' language and on the other side in interpreter. For example: languages like Python. It interprets the written code 'line by line', and if somewhere error is found. It stops interpreting the code from there itself. Here, in our course we will be using ''Spyder IDE''. Spyder is an integrated development environment with editing options to assist the programmers in writing programs. Spyder IDE is divided into two panes, one is console and other one is where program is written.&lt;/p&gt;

&lt;p style=&quot;text-align:justify&quot;&gt;
Python works on different platforms (Windows, Mac, Linux, Raspberry Pi, etc).
Python has a simple syntax similar to the English language.
Python has syntax that allows developers to write programs with fewer lines than some other programming languages.
Python runs on an interpreter system, meaning that code can be executed as soon as it is written. This means that prototyping can be very quick.&lt;/p&gt;
Python can be treated in a procedural way, an object-orientated way or a functional way.

==Installing Anaconda==
[[#Top]]

This article is all about installing and troubleshooting Anaconda and Spyder on different platforms.

===Windows===
Step 1 -&gt; Download the installer from here 
 &lt;p style=&quot;text-align:justify&quot;&gt;
[https://www.anaconda.com/download/#windows Download Link]. Make sure that you download the version compatible to your operating system architecture. If you have a 64 bit OS then you can download either 64 bit of 32 bit, but if you have 32 bit OS then you should download the 32 bit version only.
&lt;/p&gt;
 &lt;p style=&quot;text-align:justify&quot;&gt;
Step 2 -&gt; Double click on the .exe file that you downloaded just now and follow the instructions. If you are not sure of the installation options then just choose the default.&lt;/p&gt;
 &lt;p style=&quot;text-align:justify&quot;&gt;
Step 3 -&gt; To test your installation, open cmd (go to Start -&gt; then type cmd in the search bar and hit enter). There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.&lt;/p&gt;

===Mac===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#macos Download Link].

Step 2 -&gt; Double click on the .pkg file that you just downloaded. If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

===Linux===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#linux Download Link].

Step 2 -&gt; Go to the folder where you downloaded the .sh file and type following command 

  '''bash Anaconda-latest-Linux-x86_64.sh'''

If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

==Troubleshooting Spyder==

[[#Top]]
 &lt;p style=&quot;text-align:justify&quot;&gt;
In most of the cases, it happens that Spyder is already running and you have initiated one more instance of it. Please make sure that spyder is not running already.
If you are on Linux OS, please launch spyder through terminal. Just open the terminal and type '''spyder''' and it will launch. When Spyder opens, make sure you see Anaconda with the version written on the Ipython console. If not, try changing the path of your anaconda. Follow these steps according to your OS version.&lt;/p&gt;

====Windows====
[https://stackoverflow.com/questions/44597662/conda-command-is-not-recognized-on-windows-10 Click Here]

====Linux====
[https://stackoverflow.com/questions/18675907/how-to-run-conda Click Here]

====Mac====
[https://stackoverflow.com/questions/35246386/conda-command-not-found Click Here]

In most of the cases relaunching Spyder works.
A more general Troubleshoot is present [https://github.com/spyder-ide/spyder/wiki/Troubleshooting-Guide-and-FAQ Here]

==How to run a program in Spyder IDE?==
Go to Run on the menu bar. Click Run-&gt;Run.

[[#Top]]

==Print statements==
Print statements help to display output on console. 
{{#ev:youtube|https://youtu.be/gECkqaOwyt0|250|right}}

===Syntax===
&lt;pre&gt;print()&lt;/pre&gt;

===How to print a message?===
In order to print a message in Python, write &lt;pre&gt;print(&quot;message&quot;)&lt;/pre&gt;
Single, double, triple quote can be used print()

'''Example:'''

'''Single Quote'''
&lt;pre&gt;
print('Hello')  
Output: Hello
&lt;/pre&gt;
'''Double Quote'''
&lt;pre&gt;
print(&quot;Hello&quot;)  
Output: Hello
&lt;/pre&gt;
'''Quote within quote'''
&lt;pre&gt;print('Is &quot;Ram&quot; a good boy?')  
Output: Is &quot;Ram&quot; a good boy?&lt;/pre&gt;

[[#Top]]

==Escape sequences with strings==

We can use escape sequence within strings to make output more presentable.

'''\n'''  : It will move to next line.

'''\t'''  : It will add tab space(5space)

'''\a'''  : It will play system sound once.

'''Example:'''

&lt;pre&gt;print(&quot;Hi, \n How are you?&quot;)&lt;/pre&gt;
&lt;pre&gt;
Output: 

Hi,

How are you?
&lt;/pre&gt;
&lt;pre&gt;print(&quot;Hi, \t How are you?&quot;)&lt;/pre&gt;

Output: 

Hi, &lt;5 spaces&gt; How are you?

[[File:Escape_Sequence.jpg]]

==Variables==
[[#Top]]
&lt;pre&gt;
Variables are used to store some values. Values can be strings, integers or decimal values.  

Variable Name Rules:
1. Variable name should start with letter or underscore. Variable name cant start with number.
Example:
&amp;#10004; Valid: JOC, WIKI, JOC_WIKI, _JOC
&amp;#10008; Invalid: 1JOC, 123WIKI, 0_WIKI

2. Remaining letter other then first one can contain number, underscore.
Example:
JOC1234, WIKI012_1332

3. Variable names are case sensitivities.
Example:
JOC, jOC, joC all are different varibles. 

&lt;/pre&gt;
{{#ev:youtube|https://youtu.be/60iAXH1sm-Y|250|right}}

===How to print a variable?===
In order to print the value of a variable in python, first initialize the variable and then call it where ever you wanna use it. 
&lt;pre&gt;print(variable_name)&lt;/pre&gt;

&lt;pre&gt;For example :
x=2                # x is viable here
print(x)           # calling variable x with print function

a = &quot;JOC&quot;          # a is variable here
b = &quot;_WIKI&quot;        # b is variable here
c = a + b          # c is variable here which will provide addition of variable a and b
&lt;/pre&gt;

===Some facts about Variables===
* If you want to print variable name with a message, you can use , operator. For example : I want to print Hello Simran and Simran has been stored in a variable called ''name''.
  name=&quot;Simran&quot;
  print(&quot;Hello&quot;,name)
* If you change the value of a variable, it will store the latest value. For example :
  name=&quot;Simran&quot;
  name=&quot;Amit&quot;
  If you will execute the command ''print(name)'', Amit will be displayed.
* You can perform operations like addition, subtraction etc only on integral variables.

===Variables Types and Conversion===
&lt;pre&gt;Variable can be decimal, integer and decimal. And they can be inter covered with the help of conversion functions.

Example:
JOC = 5           Save in Memory as 5       # We have variable with name JOC having value 5 here.
JOC = int(5)      Save in Memory as 5       # Here Variable JOC holding integer value of 5. 
JOC = flot(5)     Save in Memory as 5.0     # Here variable JOC holding flot value of 5
JOC = str(5)      Save in Memory as &quot;5&quot;     # Here variable JOC holding string value of 5 or We can say 5 will be treated as string here.
JOC = complex(5)  Save in Memory as (5+0j)  # Here variable JOC holding complex value of 5.
JOC = oct(5)      Save in Memory as 012     # Here variable JOC holding octal representation of 5.
JOC = hex(5)      Save in Memory as 0xa     # Here variable JOC holding hexadecimal representation of 5

There are many more function available in Python. You can convert variable as per your requirement.
&lt;/pre&gt;


&lt;h1 style='color:black;font-family:Calibri;font-size:14.0pt;font-weight:800;
font-style:normal'&gt;Conversion Table with Eample&lt;/h1&gt;

&lt;table border=0 cellpadding=0 cellspacing=0 width=656 style='border-collapse:
 collapse;table-layout:fixed;width:492pt'&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6624497 width=63 style='height:15.0pt;width:47pt'&gt;Serial
  No&lt;/td&gt;
  &lt;td class=xl6724497 width=77 style='border-left:none;width:58pt'&gt;Function&lt;/td&gt;
  &lt;td class=xl6724497 width=303 style='border-left:none;width:227pt'&gt;Description&lt;/td&gt;
  &lt;td class=xl6724497 width=162 style='border-left:none;width:122pt'&gt;Example&lt;/td&gt;
  &lt;td class=xl6824497 width=51 style='border-left:none;width:38pt'&gt;Output&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;1&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;int(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to an
  integer.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10.12;
  print(int(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;2&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;long(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a&lt;span
  style='mso-spacerun:yes'&gt;  &lt;/span&gt;to a long integer&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10.12;
  print(long(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;3&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;float(a)&lt;/td&gt;
  &lt;td class=xl6524497 width=303 style='border-top:none;border-left:none;
  width:227pt'&gt;Converts a to a floating-point number.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 101.23;
  print(float(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;101.23&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;4&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;complex(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to a
  complex number.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print(complex(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10+0j&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;5&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;str(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to
  string.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print(str(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;6&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;repr(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts object
  a to an expression string.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print(repr(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;7&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;tuple(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to
  tuple.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print((a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;8&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;list(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to
  list.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print([a])&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;[10]&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;9&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;set(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to
  set.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a =
  set(&amp;quot;10&amp;quot;); print(a)&lt;/td&gt;
  &lt;td class=xl7124497 width=51 style='border-top:none;border-left:none;
  width:38pt'&gt;{'1', '0'}&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;10&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;dict(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to
  dictonary&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = dict(a=10);
  print(a)&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;{'a': 10}&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;11&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;chr(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts an
  integer to a character.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 97;
  print(chr(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;a&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;12&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;ord(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a
  single character to its integer value.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a =
  &amp;quot;J&amp;quot;; print(ord(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;74&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;13&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;hex(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts an
  integer to a hexadecimal string.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print(hex(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;0xa&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=21 style='height:15.75pt'&gt;
  &lt;td height=21 class=xl7224497 style='height:15.75pt;border-top:none'&gt;14&lt;/td&gt;
  &lt;td class=xl7324497 style='border-top:none;border-left:none'&gt;oct(a)&lt;/td&gt;
  &lt;td class=xl7324497 style='border-top:none;border-left:none'&gt;Converts an
  integer to an octal string.&lt;/td&gt;
  &lt;td class=xl7324497 style='border-top:none;border-left:none'&gt;a = 10;
  print(oct(a))&lt;/td&gt;
  &lt;td class=xl7424497 style='border-top:none;border-left:none'&gt;0o12&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
  &lt;tr height=0 style='display:none'&gt;
  &lt;td width=63 style='width:47pt'&gt;&lt;/td&gt;
  &lt;td width=77 style='width:58pt'&gt;&lt;/td&gt;
  &lt;td width=303 style='width:227pt'&gt;&lt;/td&gt;
  &lt;td width=162 style='width:122pt'&gt;&lt;/td&gt;
  &lt;td width=51 style='width:38pt'&gt;&lt;/td&gt;
 &lt;/tr&gt;
&lt;/table&gt;

==How to execute couple of instructions on console?==
You can execute couple of instructions on console using ;. Write Statement 1;Statement 2;......and then press ''Enter''.
{{#ev:youtube|https://youtu.be/CYQCYvLE22Y|250|right}}









==How to take input from the user?==
We can take input from the user using ''input'' function. For Example : You want the user to input variable ''x'', then write x=input(&quot;Enter the value of x&quot;) and execute. Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNkVLCxZw_jcgyS-bmrIVSP

And when the input you need is of data type other than string. You can do both the input function and data conversion in a single line.
For example:
Consider the program for letting in the patients
'''c=input(&quot;Enter (1/0)&quot;);d=int(c)'''

Instead of using it in two separate lines, combine it into a single line
'''c=int(input(&quot;Enter (1/0)&quot;))'''.

To get two inputs in same line with a space between them split() is used.

a,b=input(&quot;enter a&quot;).split(&quot;enter b&quot;)
----
[[#Top]]

==If statement==
If statement is used to execute set of two contrary statements based on a condition. 

===Syntax===
If (Condition):
    Statement 1
else:
    Statement 2

If 'Condition' is true then 'Statement 1' will be executed otherwise 'Statement 2' will be executed.

Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNhHmg3SkK1uiutigcAbH9K

==Loops==
[[#Top]]&lt;br&gt;
Loops in a programming languages are used to execute set of repetitive statements. For loop and while loop are used extensively to execute a set of looping instructions.

=== For loop Syntax ===
&lt;pre&gt;
for i in range(10): 
    Statement
&lt;/pre&gt;
range(10) indicate that values 0 to 9 will be assigned to the variable i and for each value of i the Statement will be executed, e.g.
&lt;pre&gt;
for i in range(10): 
    print(i)
&lt;/pre&gt;
Output will be
&lt;pre&gt;
0
1
2
3
4
5
6
7
8
9
&lt;/pre&gt;

[[#Top]]

=== While loop Syntax ===
&lt;pre&gt;
intialisation

while(condition):
   Statement
   increment/decrement
&lt;/pre&gt;
e.g.
&lt;pre&gt;
#initialization
i=0
while(i&lt;10): 
    print(i)
    i=i+1
&lt;/pre&gt;
Output will be:
&lt;pre&gt;
0
1
2
3
4
5
6
7
8
9
&lt;/pre&gt;
Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNbl5jkVrrw1E5XSvm3GiCI

[[#Top]]

==Importance of Indentation in Python==
 &lt;p style=&quot;text-align:justify&quot;&gt;
Indentation is used to indicate to what block of statements belong. Indentation of blocks convey program structure in Python. Indentation in Python is used to refer a group/block of code/statements. In ''C++'' we use { and } (curly brackets) to group a set of statements. But in Python, there are no such brackets used. Instead of such brackets used in other programming languages, we use indentation in Python.&lt;/p&gt;

Use tabs, instead of spaces for ease of writing code.

Wrong indentation can lead to syntax error, or makes your output wrong for your logic e.g.
&lt;pre&gt;
'''IndentationError: expected an indented block'''
i=-1
if i&lt;0:
print(&quot;Test successful&quot;)#Wrong indentation &amp;#10006;
else:    
    print(&quot;Test failed&quot;)
#Output: IndentationError: expected an indented block
&lt;/pre&gt;
---
&lt;pre&gt;
'''Properly Indented code:'''
i=-1
if i&lt;0:
    print(&quot;Test successful&quot;)#Right indentation &amp;#9989;
else:    
    print(&quot;Test failed&quot;)
#Output:Test successful
&lt;/pre&gt;


'''Logic changed, so output changed, with improper indentation''', e.g.


&lt;h3&gt;Code : 1&lt;/h3&gt;
&lt;pre&gt;
sum=0
for i in range(5):
    for j in range(5):
        sum+=i
print(sum, end=&quot; &quot;)
#Output: 50
&lt;/pre&gt;
        
&lt;h3&gt;Code : 2&lt;/h3&gt;
&lt;pre&gt;
for i in range(5):
    for j in range(5):
        print(end=&quot; &quot;)
    sum+=i
print(sum, end=&quot; &quot;)
#Output:                          10
&lt;/pre&gt;
{{#ev:youtube|https://youtu.be/pmavoW419Yc|250|right}}&lt;br&gt;

[[#Top]]

==Spyder IDE Black Screen Solution==

----

 This issue is because of ''Help'' screen which is by default open. 
 We need to close it. So here's how you do it-


===Method 1:===

Step 1-    Try by closing current pane for that,  &quot;''press ctrl+shift+F4''&quot;  wait for few seconds things will appear on screen.

Step 2-    If it so than on menu bar go to ''view &gt; panes &gt; help'' unchecked &quot;''Help''&quot; option.

Step 3-    Make sure that &quot;''Help''&quot; under ''view &gt; panes'' is permanently unchecked. And ''Editor, Ipython console, Variable explorer''  are checked. 


===Method 2:===

Step 1-    Open spyder.

Step 2-   On that black screen randomly ''Left click'' on spyder &quot;''Menu bar''&quot; area you will get menu drop downs, You have to find Drop down with &quot;''Panes''&quot; option.

Step 3-   On &quot;''Panes''&quot; drop down unchecked the &quot;''Help''&quot;.

Step 4-   Wait for few seconds Spyder view will appear.

Step 5 -  Make sure that ''&quot;Help&quot;'' under view&gt;panes is permanently unchecked. And ''Editor, Ipython console, variable explorer'' are checked.


[[#Top]]</text>
      <sha1>5hkrreiiv2nd3vc3s6a856njuqk73m3</sha1>
    </revision>
    <revision>
      <id>3734</id>
      <parentid>3733</parentid>
      <timestamp>2018-09-29T01:37:49Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* Importance of Indentation in Python */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="20513">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_2 Contributors of this page]
==Introduction to Python==
 &lt;p style=&quot;text-align:justify&quot;&gt;Python is a widely used programming language which allows programmers to write the program in fewer lines of code. It was designed by ''Guido van Rossum'' in 1991. Python uses an interpreter instead of compiler. Basically, the main difference between compiler and interpreter is that the compiler takes the code as 'whole' and compiles it. for example, in ''C'' language and on the other side in interpreter. For example: languages like Python. It interprets the written code 'line by line', and if somewhere error is found. It stops interpreting the code from there itself. Here, in our course we will be using ''Spyder IDE''. Spyder is an integrated development environment with editing options to assist the programmers in writing programs. Spyder IDE is divided into two panes, one is console and other one is where program is written.&lt;/p&gt;

&lt;p style=&quot;text-align:justify&quot;&gt;
Python works on different platforms (Windows, Mac, Linux, Raspberry Pi, etc).
Python has a simple syntax similar to the English language.
Python has syntax that allows developers to write programs with fewer lines than some other programming languages.
Python runs on an interpreter system, meaning that code can be executed as soon as it is written. This means that prototyping can be very quick.&lt;/p&gt;
Python can be treated in a procedural way, an object-orientated way or a functional way.

==Installing Anaconda==
[[#Top]]

This article is all about installing and troubleshooting Anaconda and Spyder on different platforms.

===Windows===
Step 1 -&gt; Download the installer from here 
 &lt;p style=&quot;text-align:justify&quot;&gt;
[https://www.anaconda.com/download/#windows Download Link]. Make sure that you download the version compatible to your operating system architecture. If you have a 64 bit OS then you can download either 64 bit of 32 bit, but if you have 32 bit OS then you should download the 32 bit version only.
&lt;/p&gt;
 &lt;p style=&quot;text-align:justify&quot;&gt;
Step 2 -&gt; Double click on the .exe file that you downloaded just now and follow the instructions. If you are not sure of the installation options then just choose the default.&lt;/p&gt;
 &lt;p style=&quot;text-align:justify&quot;&gt;
Step 3 -&gt; To test your installation, open cmd (go to Start -&gt; then type cmd in the search bar and hit enter). There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.&lt;/p&gt;

===Mac===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#macos Download Link].

Step 2 -&gt; Double click on the .pkg file that you just downloaded. If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

===Linux===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#linux Download Link].

Step 2 -&gt; Go to the folder where you downloaded the .sh file and type following command 

  '''bash Anaconda-latest-Linux-x86_64.sh'''

If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

==Troubleshooting Spyder==

[[#Top]]
 &lt;p style=&quot;text-align:justify&quot;&gt;
In most of the cases, it happens that Spyder is already running and you have initiated one more instance of it. Please make sure that spyder is not running already.
If you are on Linux OS, please launch spyder through terminal. Just open the terminal and type '''spyder''' and it will launch. When Spyder opens, make sure you see Anaconda with the version written on the Ipython console. If not, try changing the path of your anaconda. Follow these steps according to your OS version.&lt;/p&gt;

====Windows====
[https://stackoverflow.com/questions/44597662/conda-command-is-not-recognized-on-windows-10 Click Here]

====Linux====
[https://stackoverflow.com/questions/18675907/how-to-run-conda Click Here]

====Mac====
[https://stackoverflow.com/questions/35246386/conda-command-not-found Click Here]

In most of the cases relaunching Spyder works.
A more general Troubleshoot is present [https://github.com/spyder-ide/spyder/wiki/Troubleshooting-Guide-and-FAQ Here]

==How to run a program in Spyder IDE?==
Go to Run on the menu bar. Click Run-&gt;Run.

[[#Top]]

==Print statements==
Print statements help to display output on console. 
{{#ev:youtube|https://youtu.be/gECkqaOwyt0|250|right}}

===Syntax===
&lt;pre&gt;print()&lt;/pre&gt;

===How to print a message?===
In order to print a message in Python, write &lt;pre&gt;print(&quot;message&quot;)&lt;/pre&gt;
Single, double, triple quote can be used print()

'''Example:'''

'''Single Quote'''
&lt;pre&gt;
print('Hello')  
Output: Hello
&lt;/pre&gt;
'''Double Quote'''
&lt;pre&gt;
print(&quot;Hello&quot;)  
Output: Hello
&lt;/pre&gt;
'''Quote within quote'''
&lt;pre&gt;print('Is &quot;Ram&quot; a good boy?')  
Output: Is &quot;Ram&quot; a good boy?&lt;/pre&gt;

[[#Top]]

==Escape sequences with strings==

We can use escape sequence within strings to make output more presentable.

'''\n'''  : It will move to next line.

'''\t'''  : It will add tab space(5space)

'''\a'''  : It will play system sound once.

'''Example:'''

&lt;pre&gt;print(&quot;Hi, \n How are you?&quot;)&lt;/pre&gt;
&lt;pre&gt;
Output: 

Hi,

How are you?
&lt;/pre&gt;
&lt;pre&gt;print(&quot;Hi, \t How are you?&quot;)&lt;/pre&gt;

Output: 

Hi, &lt;5 spaces&gt; How are you?

[[File:Escape_Sequence.jpg]]

==Variables==
[[#Top]]
&lt;pre&gt;
Variables are used to store some values. Values can be strings, integers or decimal values.  

Variable Name Rules:
1. Variable name should start with letter or underscore. Variable name cant start with number.
Example:
&amp;#10004; Valid: JOC, WIKI, JOC_WIKI, _JOC
&amp;#10008; Invalid: 1JOC, 123WIKI, 0_WIKI

2. Remaining letter other then first one can contain number, underscore.
Example:
JOC1234, WIKI012_1332

3. Variable names are case sensitivities.
Example:
JOC, jOC, joC all are different varibles. 

&lt;/pre&gt;
{{#ev:youtube|https://youtu.be/60iAXH1sm-Y|250|right}}

===How to print a variable?===
In order to print the value of a variable in python, first initialize the variable and then call it where ever you wanna use it. 
&lt;pre&gt;print(variable_name)&lt;/pre&gt;

&lt;pre&gt;For example :
x=2                # x is viable here
print(x)           # calling variable x with print function

a = &quot;JOC&quot;          # a is variable here
b = &quot;_WIKI&quot;        # b is variable here
c = a + b          # c is variable here which will provide addition of variable a and b
&lt;/pre&gt;

===Some facts about Variables===
* If you want to print variable name with a message, you can use , operator. For example : I want to print Hello Simran and Simran has been stored in a variable called ''name''.
  name=&quot;Simran&quot;
  print(&quot;Hello&quot;,name)
* If you change the value of a variable, it will store the latest value. For example :
  name=&quot;Simran&quot;
  name=&quot;Amit&quot;
  If you will execute the command ''print(name)'', Amit will be displayed.
* You can perform operations like addition, subtraction etc only on integral variables.

===Variables Types and Conversion===
&lt;pre&gt;Variable can be decimal, integer and decimal. And they can be inter covered with the help of conversion functions.

Example:
JOC = 5           Save in Memory as 5       # We have variable with name JOC having value 5 here.
JOC = int(5)      Save in Memory as 5       # Here Variable JOC holding integer value of 5. 
JOC = flot(5)     Save in Memory as 5.0     # Here variable JOC holding flot value of 5
JOC = str(5)      Save in Memory as &quot;5&quot;     # Here variable JOC holding string value of 5 or We can say 5 will be treated as string here.
JOC = complex(5)  Save in Memory as (5+0j)  # Here variable JOC holding complex value of 5.
JOC = oct(5)      Save in Memory as 012     # Here variable JOC holding octal representation of 5.
JOC = hex(5)      Save in Memory as 0xa     # Here variable JOC holding hexadecimal representation of 5

There are many more function available in Python. You can convert variable as per your requirement.
&lt;/pre&gt;


&lt;h1 style='color:black;font-family:Calibri;font-size:14.0pt;font-weight:800;
font-style:normal'&gt;Conversion Table with Eample&lt;/h1&gt;

&lt;table border=0 cellpadding=0 cellspacing=0 width=656 style='border-collapse:
 collapse;table-layout:fixed;width:492pt'&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6624497 width=63 style='height:15.0pt;width:47pt'&gt;Serial
  No&lt;/td&gt;
  &lt;td class=xl6724497 width=77 style='border-left:none;width:58pt'&gt;Function&lt;/td&gt;
  &lt;td class=xl6724497 width=303 style='border-left:none;width:227pt'&gt;Description&lt;/td&gt;
  &lt;td class=xl6724497 width=162 style='border-left:none;width:122pt'&gt;Example&lt;/td&gt;
  &lt;td class=xl6824497 width=51 style='border-left:none;width:38pt'&gt;Output&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;1&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;int(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to an
  integer.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10.12;
  print(int(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;2&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;long(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a&lt;span
  style='mso-spacerun:yes'&gt;  &lt;/span&gt;to a long integer&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10.12;
  print(long(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;3&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;float(a)&lt;/td&gt;
  &lt;td class=xl6524497 width=303 style='border-top:none;border-left:none;
  width:227pt'&gt;Converts a to a floating-point number.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 101.23;
  print(float(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;101.23&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;4&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;complex(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to a
  complex number.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print(complex(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10+0j&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;5&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;str(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to
  string.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print(str(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;6&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;repr(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts object
  a to an expression string.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print(repr(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;7&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;tuple(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to
  tuple.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print((a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;8&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;list(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to
  list.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print([a])&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;[10]&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;9&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;set(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to
  set.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a =
  set(&amp;quot;10&amp;quot;); print(a)&lt;/td&gt;
  &lt;td class=xl7124497 width=51 style='border-top:none;border-left:none;
  width:38pt'&gt;{'1', '0'}&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;10&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;dict(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to
  dictonary&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = dict(a=10);
  print(a)&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;{'a': 10}&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;11&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;chr(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts an
  integer to a character.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 97;
  print(chr(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;a&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;12&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;ord(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a
  single character to its integer value.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a =
  &amp;quot;J&amp;quot;; print(ord(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;74&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;13&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;hex(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts an
  integer to a hexadecimal string.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print(hex(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;0xa&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=21 style='height:15.75pt'&gt;
  &lt;td height=21 class=xl7224497 style='height:15.75pt;border-top:none'&gt;14&lt;/td&gt;
  &lt;td class=xl7324497 style='border-top:none;border-left:none'&gt;oct(a)&lt;/td&gt;
  &lt;td class=xl7324497 style='border-top:none;border-left:none'&gt;Converts an
  integer to an octal string.&lt;/td&gt;
  &lt;td class=xl7324497 style='border-top:none;border-left:none'&gt;a = 10;
  print(oct(a))&lt;/td&gt;
  &lt;td class=xl7424497 style='border-top:none;border-left:none'&gt;0o12&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
  &lt;tr height=0 style='display:none'&gt;
  &lt;td width=63 style='width:47pt'&gt;&lt;/td&gt;
  &lt;td width=77 style='width:58pt'&gt;&lt;/td&gt;
  &lt;td width=303 style='width:227pt'&gt;&lt;/td&gt;
  &lt;td width=162 style='width:122pt'&gt;&lt;/td&gt;
  &lt;td width=51 style='width:38pt'&gt;&lt;/td&gt;
 &lt;/tr&gt;
&lt;/table&gt;

==How to execute couple of instructions on console?==
You can execute couple of instructions on console using ;. Write Statement 1;Statement 2;......and then press ''Enter''.
{{#ev:youtube|https://youtu.be/CYQCYvLE22Y|250|right}}









==How to take input from the user?==
We can take input from the user using ''input'' function. For Example : You want the user to input variable ''x'', then write x=input(&quot;Enter the value of x&quot;) and execute. Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNkVLCxZw_jcgyS-bmrIVSP

And when the input you need is of data type other than string. You can do both the input function and data conversion in a single line.
For example:
Consider the program for letting in the patients
'''c=input(&quot;Enter (1/0)&quot;);d=int(c)'''

Instead of using it in two separate lines, combine it into a single line
'''c=int(input(&quot;Enter (1/0)&quot;))'''.

To get two inputs in same line with a space between them split() is used.

a,b=input(&quot;enter a&quot;).split(&quot;enter b&quot;)
----
[[#Top]]

==If statement==
If statement is used to execute set of two contrary statements based on a condition. 

===Syntax===
If (Condition):
    Statement 1
else:
    Statement 2

If 'Condition' is true then 'Statement 1' will be executed otherwise 'Statement 2' will be executed.

Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNhHmg3SkK1uiutigcAbH9K

==Loops==
[[#Top]]&lt;br&gt;
Loops in a programming languages are used to execute set of repetitive statements. For loop and while loop are used extensively to execute a set of looping instructions.

=== For loop Syntax ===
&lt;pre&gt;
for i in range(10): 
    Statement
&lt;/pre&gt;
range(10) indicate that values 0 to 9 will be assigned to the variable i and for each value of i the Statement will be executed, e.g.
&lt;pre&gt;
for i in range(10): 
    print(i)
&lt;/pre&gt;
Output will be
&lt;pre&gt;
0
1
2
3
4
5
6
7
8
9
&lt;/pre&gt;

[[#Top]]

=== While loop Syntax ===
&lt;pre&gt;
intialisation

while(condition):
   Statement
   increment/decrement
&lt;/pre&gt;
e.g.
&lt;pre&gt;
#initialization
i=0
while(i&lt;10): 
    print(i)
    i=i+1
&lt;/pre&gt;
Output will be:
&lt;pre&gt;
0
1
2
3
4
5
6
7
8
9
&lt;/pre&gt;
Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNbl5jkVrrw1E5XSvm3GiCI

[[#Top]]

==Importance of Indentation in Python==
 &lt;p style=&quot;text-align:justify&quot;&gt;
Indentation is used to indicate to what block of statements belong. Indentation of blocks convey program structure in Python. Indentation in Python is used to refer a group/block of code/statements. In ''C++'' we use { and } (curly brackets) to group a set of statements. But in Python, there are no such brackets used. Instead of such brackets used in other programming languages, we use indentation in Python.&lt;/p&gt;

Use tabs, instead of spaces for ease of writing code.

Wrong indentation can lead to syntax error, or makes your output wrong for your logic e.g.

'''IndentationError: expected an indented block'''
&lt;pre&gt;
i=-1
if i&lt;0:
print(&quot;Test successful&quot;)#Wrong indentation &amp;#10006;
else:    
    print(&quot;Test failed&quot;)
#Output: IndentationError: expected an indented block
&lt;/pre&gt;

'''Properly Indented code:'''

&lt;pre&gt;
i=-1
if i&lt;0:
    print(&quot;Test successful&quot;)#Right indentation &amp;#9989;
else:    
    print(&quot;Test failed&quot;)
#Output:Test successful
&lt;/pre&gt;


'''Logic changed, so output changed, with improper indentation''', e.g.


&lt;h3&gt;Code : 1&lt;/h3&gt;
&lt;pre&gt;
sum=0
for i in range(5):
    for j in range(5):
        sum+=i
print(sum, end=&quot; &quot;)
#Output: 50
&lt;/pre&gt;
        
&lt;h3&gt;Code : 2&lt;/h3&gt;
&lt;pre&gt;
for i in range(5):
    for j in range(5):
        print(end=&quot; &quot;)
    sum+=i
print(sum, end=&quot; &quot;)
#Output:                          10
&lt;/pre&gt;
{{#ev:youtube|https://youtu.be/pmavoW419Yc|250|right}}&lt;br&gt;

[[#Top]]

==Spyder IDE Black Screen Solution==

----

 This issue is because of ''Help'' screen which is by default open. 
 We need to close it. So here's how you do it-


===Method 1:===

Step 1-    Try by closing current pane for that,  &quot;''press ctrl+shift+F4''&quot;  wait for few seconds things will appear on screen.

Step 2-    If it so than on menu bar go to ''view &gt; panes &gt; help'' unchecked &quot;''Help''&quot; option.

Step 3-    Make sure that &quot;''Help''&quot; under ''view &gt; panes'' is permanently unchecked. And ''Editor, Ipython console, Variable explorer''  are checked. 


===Method 2:===

Step 1-    Open spyder.

Step 2-   On that black screen randomly ''Left click'' on spyder &quot;''Menu bar''&quot; area you will get menu drop downs, You have to find Drop down with &quot;''Panes''&quot; option.

Step 3-   On &quot;''Panes''&quot; drop down unchecked the &quot;''Help''&quot;.

Step 4-   Wait for few seconds Spyder view will appear.

Step 5 -  Make sure that ''&quot;Help&quot;'' under view&gt;panes is permanently unchecked. And ''Editor, Ipython console, variable explorer'' are checked.


[[#Top]]</text>
      <sha1>nqny8hao2aftnmriqotma15ttdwfhdu</sha1>
    </revision>
    <revision>
      <id>3735</id>
      <parentid>3734</parentid>
      <timestamp>2018-09-29T01:38:09Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* Importance of Indentation in Python */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="20514">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_2 Contributors of this page]
==Introduction to Python==
 &lt;p style=&quot;text-align:justify&quot;&gt;Python is a widely used programming language which allows programmers to write the program in fewer lines of code. It was designed by ''Guido van Rossum'' in 1991. Python uses an interpreter instead of compiler. Basically, the main difference between compiler and interpreter is that the compiler takes the code as 'whole' and compiles it. for example, in ''C'' language and on the other side in interpreter. For example: languages like Python. It interprets the written code 'line by line', and if somewhere error is found. It stops interpreting the code from there itself. Here, in our course we will be using ''Spyder IDE''. Spyder is an integrated development environment with editing options to assist the programmers in writing programs. Spyder IDE is divided into two panes, one is console and other one is where program is written.&lt;/p&gt;

&lt;p style=&quot;text-align:justify&quot;&gt;
Python works on different platforms (Windows, Mac, Linux, Raspberry Pi, etc).
Python has a simple syntax similar to the English language.
Python has syntax that allows developers to write programs with fewer lines than some other programming languages.
Python runs on an interpreter system, meaning that code can be executed as soon as it is written. This means that prototyping can be very quick.&lt;/p&gt;
Python can be treated in a procedural way, an object-orientated way or a functional way.

==Installing Anaconda==
[[#Top]]

This article is all about installing and troubleshooting Anaconda and Spyder on different platforms.

===Windows===
Step 1 -&gt; Download the installer from here 
 &lt;p style=&quot;text-align:justify&quot;&gt;
[https://www.anaconda.com/download/#windows Download Link]. Make sure that you download the version compatible to your operating system architecture. If you have a 64 bit OS then you can download either 64 bit of 32 bit, but if you have 32 bit OS then you should download the 32 bit version only.
&lt;/p&gt;
 &lt;p style=&quot;text-align:justify&quot;&gt;
Step 2 -&gt; Double click on the .exe file that you downloaded just now and follow the instructions. If you are not sure of the installation options then just choose the default.&lt;/p&gt;
 &lt;p style=&quot;text-align:justify&quot;&gt;
Step 3 -&gt; To test your installation, open cmd (go to Start -&gt; then type cmd in the search bar and hit enter). There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.&lt;/p&gt;

===Mac===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#macos Download Link].

Step 2 -&gt; Double click on the .pkg file that you just downloaded. If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

===Linux===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#linux Download Link].

Step 2 -&gt; Go to the folder where you downloaded the .sh file and type following command 

  '''bash Anaconda-latest-Linux-x86_64.sh'''

If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

==Troubleshooting Spyder==

[[#Top]]
 &lt;p style=&quot;text-align:justify&quot;&gt;
In most of the cases, it happens that Spyder is already running and you have initiated one more instance of it. Please make sure that spyder is not running already.
If you are on Linux OS, please launch spyder through terminal. Just open the terminal and type '''spyder''' and it will launch. When Spyder opens, make sure you see Anaconda with the version written on the Ipython console. If not, try changing the path of your anaconda. Follow these steps according to your OS version.&lt;/p&gt;

====Windows====
[https://stackoverflow.com/questions/44597662/conda-command-is-not-recognized-on-windows-10 Click Here]

====Linux====
[https://stackoverflow.com/questions/18675907/how-to-run-conda Click Here]

====Mac====
[https://stackoverflow.com/questions/35246386/conda-command-not-found Click Here]

In most of the cases relaunching Spyder works.
A more general Troubleshoot is present [https://github.com/spyder-ide/spyder/wiki/Troubleshooting-Guide-and-FAQ Here]

==How to run a program in Spyder IDE?==
Go to Run on the menu bar. Click Run-&gt;Run.

[[#Top]]

==Print statements==
Print statements help to display output on console. 
{{#ev:youtube|https://youtu.be/gECkqaOwyt0|250|right}}

===Syntax===
&lt;pre&gt;print()&lt;/pre&gt;

===How to print a message?===
In order to print a message in Python, write &lt;pre&gt;print(&quot;message&quot;)&lt;/pre&gt;
Single, double, triple quote can be used print()

'''Example:'''

'''Single Quote'''
&lt;pre&gt;
print('Hello')  
Output: Hello
&lt;/pre&gt;
'''Double Quote'''
&lt;pre&gt;
print(&quot;Hello&quot;)  
Output: Hello
&lt;/pre&gt;
'''Quote within quote'''
&lt;pre&gt;print('Is &quot;Ram&quot; a good boy?')  
Output: Is &quot;Ram&quot; a good boy?&lt;/pre&gt;

[[#Top]]

==Escape sequences with strings==

We can use escape sequence within strings to make output more presentable.

'''\n'''  : It will move to next line.

'''\t'''  : It will add tab space(5space)

'''\a'''  : It will play system sound once.

'''Example:'''

&lt;pre&gt;print(&quot;Hi, \n How are you?&quot;)&lt;/pre&gt;
&lt;pre&gt;
Output: 

Hi,

How are you?
&lt;/pre&gt;
&lt;pre&gt;print(&quot;Hi, \t How are you?&quot;)&lt;/pre&gt;

Output: 

Hi, &lt;5 spaces&gt; How are you?

[[File:Escape_Sequence.jpg]]

==Variables==
[[#Top]]
&lt;pre&gt;
Variables are used to store some values. Values can be strings, integers or decimal values.  

Variable Name Rules:
1. Variable name should start with letter or underscore. Variable name cant start with number.
Example:
&amp;#10004; Valid: JOC, WIKI, JOC_WIKI, _JOC
&amp;#10008; Invalid: 1JOC, 123WIKI, 0_WIKI

2. Remaining letter other then first one can contain number, underscore.
Example:
JOC1234, WIKI012_1332

3. Variable names are case sensitivities.
Example:
JOC, jOC, joC all are different varibles. 

&lt;/pre&gt;
{{#ev:youtube|https://youtu.be/60iAXH1sm-Y|250|right}}

===How to print a variable?===
In order to print the value of a variable in python, first initialize the variable and then call it where ever you wanna use it. 
&lt;pre&gt;print(variable_name)&lt;/pre&gt;

&lt;pre&gt;For example :
x=2                # x is viable here
print(x)           # calling variable x with print function

a = &quot;JOC&quot;          # a is variable here
b = &quot;_WIKI&quot;        # b is variable here
c = a + b          # c is variable here which will provide addition of variable a and b
&lt;/pre&gt;

===Some facts about Variables===
* If you want to print variable name with a message, you can use , operator. For example : I want to print Hello Simran and Simran has been stored in a variable called ''name''.
  name=&quot;Simran&quot;
  print(&quot;Hello&quot;,name)
* If you change the value of a variable, it will store the latest value. For example :
  name=&quot;Simran&quot;
  name=&quot;Amit&quot;
  If you will execute the command ''print(name)'', Amit will be displayed.
* You can perform operations like addition, subtraction etc only on integral variables.

===Variables Types and Conversion===
&lt;pre&gt;Variable can be decimal, integer and decimal. And they can be inter covered with the help of conversion functions.

Example:
JOC = 5           Save in Memory as 5       # We have variable with name JOC having value 5 here.
JOC = int(5)      Save in Memory as 5       # Here Variable JOC holding integer value of 5. 
JOC = flot(5)     Save in Memory as 5.0     # Here variable JOC holding flot value of 5
JOC = str(5)      Save in Memory as &quot;5&quot;     # Here variable JOC holding string value of 5 or We can say 5 will be treated as string here.
JOC = complex(5)  Save in Memory as (5+0j)  # Here variable JOC holding complex value of 5.
JOC = oct(5)      Save in Memory as 012     # Here variable JOC holding octal representation of 5.
JOC = hex(5)      Save in Memory as 0xa     # Here variable JOC holding hexadecimal representation of 5

There are many more function available in Python. You can convert variable as per your requirement.
&lt;/pre&gt;


&lt;h1 style='color:black;font-family:Calibri;font-size:14.0pt;font-weight:800;
font-style:normal'&gt;Conversion Table with Eample&lt;/h1&gt;

&lt;table border=0 cellpadding=0 cellspacing=0 width=656 style='border-collapse:
 collapse;table-layout:fixed;width:492pt'&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6624497 width=63 style='height:15.0pt;width:47pt'&gt;Serial
  No&lt;/td&gt;
  &lt;td class=xl6724497 width=77 style='border-left:none;width:58pt'&gt;Function&lt;/td&gt;
  &lt;td class=xl6724497 width=303 style='border-left:none;width:227pt'&gt;Description&lt;/td&gt;
  &lt;td class=xl6724497 width=162 style='border-left:none;width:122pt'&gt;Example&lt;/td&gt;
  &lt;td class=xl6824497 width=51 style='border-left:none;width:38pt'&gt;Output&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;1&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;int(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to an
  integer.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10.12;
  print(int(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;2&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;long(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a&lt;span
  style='mso-spacerun:yes'&gt;  &lt;/span&gt;to a long integer&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10.12;
  print(long(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;3&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;float(a)&lt;/td&gt;
  &lt;td class=xl6524497 width=303 style='border-top:none;border-left:none;
  width:227pt'&gt;Converts a to a floating-point number.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 101.23;
  print(float(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;101.23&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;4&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;complex(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to a
  complex number.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print(complex(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10+0j&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;5&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;str(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to
  string.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print(str(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;6&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;repr(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts object
  a to an expression string.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print(repr(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;7&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;tuple(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to
  tuple.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print((a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;8&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;list(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to
  list.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print([a])&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;[10]&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;9&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;set(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to
  set.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a =
  set(&amp;quot;10&amp;quot;); print(a)&lt;/td&gt;
  &lt;td class=xl7124497 width=51 style='border-top:none;border-left:none;
  width:38pt'&gt;{'1', '0'}&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;10&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;dict(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to
  dictonary&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = dict(a=10);
  print(a)&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;{'a': 10}&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;11&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;chr(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts an
  integer to a character.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 97;
  print(chr(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;a&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;12&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;ord(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a
  single character to its integer value.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a =
  &amp;quot;J&amp;quot;; print(ord(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;74&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;13&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;hex(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts an
  integer to a hexadecimal string.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print(hex(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;0xa&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=21 style='height:15.75pt'&gt;
  &lt;td height=21 class=xl7224497 style='height:15.75pt;border-top:none'&gt;14&lt;/td&gt;
  &lt;td class=xl7324497 style='border-top:none;border-left:none'&gt;oct(a)&lt;/td&gt;
  &lt;td class=xl7324497 style='border-top:none;border-left:none'&gt;Converts an
  integer to an octal string.&lt;/td&gt;
  &lt;td class=xl7324497 style='border-top:none;border-left:none'&gt;a = 10;
  print(oct(a))&lt;/td&gt;
  &lt;td class=xl7424497 style='border-top:none;border-left:none'&gt;0o12&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
  &lt;tr height=0 style='display:none'&gt;
  &lt;td width=63 style='width:47pt'&gt;&lt;/td&gt;
  &lt;td width=77 style='width:58pt'&gt;&lt;/td&gt;
  &lt;td width=303 style='width:227pt'&gt;&lt;/td&gt;
  &lt;td width=162 style='width:122pt'&gt;&lt;/td&gt;
  &lt;td width=51 style='width:38pt'&gt;&lt;/td&gt;
 &lt;/tr&gt;
&lt;/table&gt;

==How to execute couple of instructions on console?==
You can execute couple of instructions on console using ;. Write Statement 1;Statement 2;......and then press ''Enter''.
{{#ev:youtube|https://youtu.be/CYQCYvLE22Y|250|right}}









==How to take input from the user?==
We can take input from the user using ''input'' function. For Example : You want the user to input variable ''x'', then write x=input(&quot;Enter the value of x&quot;) and execute. Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNkVLCxZw_jcgyS-bmrIVSP

And when the input you need is of data type other than string. You can do both the input function and data conversion in a single line.
For example:
Consider the program for letting in the patients
'''c=input(&quot;Enter (1/0)&quot;);d=int(c)'''

Instead of using it in two separate lines, combine it into a single line
'''c=int(input(&quot;Enter (1/0)&quot;))'''.

To get two inputs in same line with a space between them split() is used.

a,b=input(&quot;enter a&quot;).split(&quot;enter b&quot;)
----
[[#Top]]

==If statement==
If statement is used to execute set of two contrary statements based on a condition. 

===Syntax===
If (Condition):
    Statement 1
else:
    Statement 2

If 'Condition' is true then 'Statement 1' will be executed otherwise 'Statement 2' will be executed.

Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNhHmg3SkK1uiutigcAbH9K

==Loops==
[[#Top]]&lt;br&gt;
Loops in a programming languages are used to execute set of repetitive statements. For loop and while loop are used extensively to execute a set of looping instructions.

=== For loop Syntax ===
&lt;pre&gt;
for i in range(10): 
    Statement
&lt;/pre&gt;
range(10) indicate that values 0 to 9 will be assigned to the variable i and for each value of i the Statement will be executed, e.g.
&lt;pre&gt;
for i in range(10): 
    print(i)
&lt;/pre&gt;
Output will be
&lt;pre&gt;
0
1
2
3
4
5
6
7
8
9
&lt;/pre&gt;

[[#Top]]

=== While loop Syntax ===
&lt;pre&gt;
intialisation

while(condition):
   Statement
   increment/decrement
&lt;/pre&gt;
e.g.
&lt;pre&gt;
#initialization
i=0
while(i&lt;10): 
    print(i)
    i=i+1
&lt;/pre&gt;
Output will be:
&lt;pre&gt;
0
1
2
3
4
5
6
7
8
9
&lt;/pre&gt;
Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNbl5jkVrrw1E5XSvm3GiCI

[[#Top]]

==Importance of Indentation in Python==
 &lt;p style=&quot;text-align:justify&quot;&gt;
Indentation is used to indicate to what block of statements belong. Indentation of blocks convey program structure in Python. Indentation in Python is used to refer a group/block of code/statements. In ''C++'' we use { and } (curly brackets) to group a set of statements. But in Python, there are no such brackets used. Instead of such brackets used in other programming languages, we use indentation in Python.&lt;/p&gt;

Use tabs, instead of spaces for ease of writing code.

Wrong indentation can lead to syntax error, or makes your output wrong for your logic e.g.

'''IndentationError: expected an indented block'''
&lt;pre&gt;
i=-1
if i&lt;0:
print(&quot;Test successful&quot;)#Wrong indentation &amp;#10006;
else:    
    print(&quot;Test failed&quot;)
#Output: IndentationError: expected an indented block

&lt;/pre&gt;

'''Properly Indented code:'''

&lt;pre&gt;
i=-1
if i&lt;0:
    print(&quot;Test successful&quot;)#Right indentation &amp;#9989;
else:    
    print(&quot;Test failed&quot;)
#Output:Test successful
&lt;/pre&gt;


'''Logic changed, so output changed, with improper indentation''', e.g.


&lt;h3&gt;Code : 1&lt;/h3&gt;
&lt;pre&gt;
sum=0
for i in range(5):
    for j in range(5):
        sum+=i
print(sum, end=&quot; &quot;)
#Output: 50
&lt;/pre&gt;
        
&lt;h3&gt;Code : 2&lt;/h3&gt;
&lt;pre&gt;
for i in range(5):
    for j in range(5):
        print(end=&quot; &quot;)
    sum+=i
print(sum, end=&quot; &quot;)
#Output:                          10
&lt;/pre&gt;
{{#ev:youtube|https://youtu.be/pmavoW419Yc|250|right}}&lt;br&gt;

[[#Top]]

==Spyder IDE Black Screen Solution==

----

 This issue is because of ''Help'' screen which is by default open. 
 We need to close it. So here's how you do it-


===Method 1:===

Step 1-    Try by closing current pane for that,  &quot;''press ctrl+shift+F4''&quot;  wait for few seconds things will appear on screen.

Step 2-    If it so than on menu bar go to ''view &gt; panes &gt; help'' unchecked &quot;''Help''&quot; option.

Step 3-    Make sure that &quot;''Help''&quot; under ''view &gt; panes'' is permanently unchecked. And ''Editor, Ipython console, Variable explorer''  are checked. 


===Method 2:===

Step 1-    Open spyder.

Step 2-   On that black screen randomly ''Left click'' on spyder &quot;''Menu bar''&quot; area you will get menu drop downs, You have to find Drop down with &quot;''Panes''&quot; option.

Step 3-   On &quot;''Panes''&quot; drop down unchecked the &quot;''Help''&quot;.

Step 4-   Wait for few seconds Spyder view will appear.

Step 5 -  Make sure that ''&quot;Help&quot;'' under view&gt;panes is permanently unchecked. And ''Editor, Ipython console, variable explorer'' are checked.


[[#Top]]</text>
      <sha1>1i7jyj77l416kcem5xp5mxjts2uj655</sha1>
    </revision>
    <revision>
      <id>3736</id>
      <parentid>3735</parentid>
      <timestamp>2018-09-29T01:38:35Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* Importance of Indentation in Python */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="20512">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_2 Contributors of this page]
==Introduction to Python==
 &lt;p style=&quot;text-align:justify&quot;&gt;Python is a widely used programming language which allows programmers to write the program in fewer lines of code. It was designed by ''Guido van Rossum'' in 1991. Python uses an interpreter instead of compiler. Basically, the main difference between compiler and interpreter is that the compiler takes the code as 'whole' and compiles it. for example, in ''C'' language and on the other side in interpreter. For example: languages like Python. It interprets the written code 'line by line', and if somewhere error is found. It stops interpreting the code from there itself. Here, in our course we will be using ''Spyder IDE''. Spyder is an integrated development environment with editing options to assist the programmers in writing programs. Spyder IDE is divided into two panes, one is console and other one is where program is written.&lt;/p&gt;

&lt;p style=&quot;text-align:justify&quot;&gt;
Python works on different platforms (Windows, Mac, Linux, Raspberry Pi, etc).
Python has a simple syntax similar to the English language.
Python has syntax that allows developers to write programs with fewer lines than some other programming languages.
Python runs on an interpreter system, meaning that code can be executed as soon as it is written. This means that prototyping can be very quick.&lt;/p&gt;
Python can be treated in a procedural way, an object-orientated way or a functional way.

==Installing Anaconda==
[[#Top]]

This article is all about installing and troubleshooting Anaconda and Spyder on different platforms.

===Windows===
Step 1 -&gt; Download the installer from here 
 &lt;p style=&quot;text-align:justify&quot;&gt;
[https://www.anaconda.com/download/#windows Download Link]. Make sure that you download the version compatible to your operating system architecture. If you have a 64 bit OS then you can download either 64 bit of 32 bit, but if you have 32 bit OS then you should download the 32 bit version only.
&lt;/p&gt;
 &lt;p style=&quot;text-align:justify&quot;&gt;
Step 2 -&gt; Double click on the .exe file that you downloaded just now and follow the instructions. If you are not sure of the installation options then just choose the default.&lt;/p&gt;
 &lt;p style=&quot;text-align:justify&quot;&gt;
Step 3 -&gt; To test your installation, open cmd (go to Start -&gt; then type cmd in the search bar and hit enter). There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.&lt;/p&gt;

===Mac===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#macos Download Link].

Step 2 -&gt; Double click on the .pkg file that you just downloaded. If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

===Linux===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#linux Download Link].

Step 2 -&gt; Go to the folder where you downloaded the .sh file and type following command 

  '''bash Anaconda-latest-Linux-x86_64.sh'''

If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

==Troubleshooting Spyder==

[[#Top]]
 &lt;p style=&quot;text-align:justify&quot;&gt;
In most of the cases, it happens that Spyder is already running and you have initiated one more instance of it. Please make sure that spyder is not running already.
If you are on Linux OS, please launch spyder through terminal. Just open the terminal and type '''spyder''' and it will launch. When Spyder opens, make sure you see Anaconda with the version written on the Ipython console. If not, try changing the path of your anaconda. Follow these steps according to your OS version.&lt;/p&gt;

====Windows====
[https://stackoverflow.com/questions/44597662/conda-command-is-not-recognized-on-windows-10 Click Here]

====Linux====
[https://stackoverflow.com/questions/18675907/how-to-run-conda Click Here]

====Mac====
[https://stackoverflow.com/questions/35246386/conda-command-not-found Click Here]

In most of the cases relaunching Spyder works.
A more general Troubleshoot is present [https://github.com/spyder-ide/spyder/wiki/Troubleshooting-Guide-and-FAQ Here]

==How to run a program in Spyder IDE?==
Go to Run on the menu bar. Click Run-&gt;Run.

[[#Top]]

==Print statements==
Print statements help to display output on console. 
{{#ev:youtube|https://youtu.be/gECkqaOwyt0|250|right}}

===Syntax===
&lt;pre&gt;print()&lt;/pre&gt;

===How to print a message?===
In order to print a message in Python, write &lt;pre&gt;print(&quot;message&quot;)&lt;/pre&gt;
Single, double, triple quote can be used print()

'''Example:'''

'''Single Quote'''
&lt;pre&gt;
print('Hello')  
Output: Hello
&lt;/pre&gt;
'''Double Quote'''
&lt;pre&gt;
print(&quot;Hello&quot;)  
Output: Hello
&lt;/pre&gt;
'''Quote within quote'''
&lt;pre&gt;print('Is &quot;Ram&quot; a good boy?')  
Output: Is &quot;Ram&quot; a good boy?&lt;/pre&gt;

[[#Top]]

==Escape sequences with strings==

We can use escape sequence within strings to make output more presentable.

'''\n'''  : It will move to next line.

'''\t'''  : It will add tab space(5space)

'''\a'''  : It will play system sound once.

'''Example:'''

&lt;pre&gt;print(&quot;Hi, \n How are you?&quot;)&lt;/pre&gt;
&lt;pre&gt;
Output: 

Hi,

How are you?
&lt;/pre&gt;
&lt;pre&gt;print(&quot;Hi, \t How are you?&quot;)&lt;/pre&gt;

Output: 

Hi, &lt;5 spaces&gt; How are you?

[[File:Escape_Sequence.jpg]]

==Variables==
[[#Top]]
&lt;pre&gt;
Variables are used to store some values. Values can be strings, integers or decimal values.  

Variable Name Rules:
1. Variable name should start with letter or underscore. Variable name cant start with number.
Example:
&amp;#10004; Valid: JOC, WIKI, JOC_WIKI, _JOC
&amp;#10008; Invalid: 1JOC, 123WIKI, 0_WIKI

2. Remaining letter other then first one can contain number, underscore.
Example:
JOC1234, WIKI012_1332

3. Variable names are case sensitivities.
Example:
JOC, jOC, joC all are different varibles. 

&lt;/pre&gt;
{{#ev:youtube|https://youtu.be/60iAXH1sm-Y|250|right}}

===How to print a variable?===
In order to print the value of a variable in python, first initialize the variable and then call it where ever you wanna use it. 
&lt;pre&gt;print(variable_name)&lt;/pre&gt;

&lt;pre&gt;For example :
x=2                # x is viable here
print(x)           # calling variable x with print function

a = &quot;JOC&quot;          # a is variable here
b = &quot;_WIKI&quot;        # b is variable here
c = a + b          # c is variable here which will provide addition of variable a and b
&lt;/pre&gt;

===Some facts about Variables===
* If you want to print variable name with a message, you can use , operator. For example : I want to print Hello Simran and Simran has been stored in a variable called ''name''.
  name=&quot;Simran&quot;
  print(&quot;Hello&quot;,name)
* If you change the value of a variable, it will store the latest value. For example :
  name=&quot;Simran&quot;
  name=&quot;Amit&quot;
  If you will execute the command ''print(name)'', Amit will be displayed.
* You can perform operations like addition, subtraction etc only on integral variables.

===Variables Types and Conversion===
&lt;pre&gt;Variable can be decimal, integer and decimal. And they can be inter covered with the help of conversion functions.

Example:
JOC = 5           Save in Memory as 5       # We have variable with name JOC having value 5 here.
JOC = int(5)      Save in Memory as 5       # Here Variable JOC holding integer value of 5. 
JOC = flot(5)     Save in Memory as 5.0     # Here variable JOC holding flot value of 5
JOC = str(5)      Save in Memory as &quot;5&quot;     # Here variable JOC holding string value of 5 or We can say 5 will be treated as string here.
JOC = complex(5)  Save in Memory as (5+0j)  # Here variable JOC holding complex value of 5.
JOC = oct(5)      Save in Memory as 012     # Here variable JOC holding octal representation of 5.
JOC = hex(5)      Save in Memory as 0xa     # Here variable JOC holding hexadecimal representation of 5

There are many more function available in Python. You can convert variable as per your requirement.
&lt;/pre&gt;


&lt;h1 style='color:black;font-family:Calibri;font-size:14.0pt;font-weight:800;
font-style:normal'&gt;Conversion Table with Eample&lt;/h1&gt;

&lt;table border=0 cellpadding=0 cellspacing=0 width=656 style='border-collapse:
 collapse;table-layout:fixed;width:492pt'&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6624497 width=63 style='height:15.0pt;width:47pt'&gt;Serial
  No&lt;/td&gt;
  &lt;td class=xl6724497 width=77 style='border-left:none;width:58pt'&gt;Function&lt;/td&gt;
  &lt;td class=xl6724497 width=303 style='border-left:none;width:227pt'&gt;Description&lt;/td&gt;
  &lt;td class=xl6724497 width=162 style='border-left:none;width:122pt'&gt;Example&lt;/td&gt;
  &lt;td class=xl6824497 width=51 style='border-left:none;width:38pt'&gt;Output&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;1&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;int(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to an
  integer.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10.12;
  print(int(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;2&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;long(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a&lt;span
  style='mso-spacerun:yes'&gt;  &lt;/span&gt;to a long integer&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10.12;
  print(long(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;3&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;float(a)&lt;/td&gt;
  &lt;td class=xl6524497 width=303 style='border-top:none;border-left:none;
  width:227pt'&gt;Converts a to a floating-point number.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 101.23;
  print(float(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;101.23&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;4&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;complex(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to a
  complex number.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print(complex(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10+0j&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;5&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;str(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to
  string.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print(str(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;6&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;repr(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts object
  a to an expression string.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print(repr(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;7&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;tuple(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to
  tuple.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print((a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;8&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;list(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to
  list.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print([a])&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;[10]&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;9&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;set(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to
  set.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a =
  set(&amp;quot;10&amp;quot;); print(a)&lt;/td&gt;
  &lt;td class=xl7124497 width=51 style='border-top:none;border-left:none;
  width:38pt'&gt;{'1', '0'}&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;10&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;dict(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to
  dictonary&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = dict(a=10);
  print(a)&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;{'a': 10}&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;11&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;chr(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts an
  integer to a character.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 97;
  print(chr(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;a&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;12&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;ord(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a
  single character to its integer value.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a =
  &amp;quot;J&amp;quot;; print(ord(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;74&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;13&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;hex(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts an
  integer to a hexadecimal string.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print(hex(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;0xa&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=21 style='height:15.75pt'&gt;
  &lt;td height=21 class=xl7224497 style='height:15.75pt;border-top:none'&gt;14&lt;/td&gt;
  &lt;td class=xl7324497 style='border-top:none;border-left:none'&gt;oct(a)&lt;/td&gt;
  &lt;td class=xl7324497 style='border-top:none;border-left:none'&gt;Converts an
  integer to an octal string.&lt;/td&gt;
  &lt;td class=xl7324497 style='border-top:none;border-left:none'&gt;a = 10;
  print(oct(a))&lt;/td&gt;
  &lt;td class=xl7424497 style='border-top:none;border-left:none'&gt;0o12&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
  &lt;tr height=0 style='display:none'&gt;
  &lt;td width=63 style='width:47pt'&gt;&lt;/td&gt;
  &lt;td width=77 style='width:58pt'&gt;&lt;/td&gt;
  &lt;td width=303 style='width:227pt'&gt;&lt;/td&gt;
  &lt;td width=162 style='width:122pt'&gt;&lt;/td&gt;
  &lt;td width=51 style='width:38pt'&gt;&lt;/td&gt;
 &lt;/tr&gt;
&lt;/table&gt;

==How to execute couple of instructions on console?==
You can execute couple of instructions on console using ;. Write Statement 1;Statement 2;......and then press ''Enter''.
{{#ev:youtube|https://youtu.be/CYQCYvLE22Y|250|right}}









==How to take input from the user?==
We can take input from the user using ''input'' function. For Example : You want the user to input variable ''x'', then write x=input(&quot;Enter the value of x&quot;) and execute. Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNkVLCxZw_jcgyS-bmrIVSP

And when the input you need is of data type other than string. You can do both the input function and data conversion in a single line.
For example:
Consider the program for letting in the patients
'''c=input(&quot;Enter (1/0)&quot;);d=int(c)'''

Instead of using it in two separate lines, combine it into a single line
'''c=int(input(&quot;Enter (1/0)&quot;))'''.

To get two inputs in same line with a space between them split() is used.

a,b=input(&quot;enter a&quot;).split(&quot;enter b&quot;)
----
[[#Top]]

==If statement==
If statement is used to execute set of two contrary statements based on a condition. 

===Syntax===
If (Condition):
    Statement 1
else:
    Statement 2

If 'Condition' is true then 'Statement 1' will be executed otherwise 'Statement 2' will be executed.

Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNhHmg3SkK1uiutigcAbH9K

==Loops==
[[#Top]]&lt;br&gt;
Loops in a programming languages are used to execute set of repetitive statements. For loop and while loop are used extensively to execute a set of looping instructions.

=== For loop Syntax ===
&lt;pre&gt;
for i in range(10): 
    Statement
&lt;/pre&gt;
range(10) indicate that values 0 to 9 will be assigned to the variable i and for each value of i the Statement will be executed, e.g.
&lt;pre&gt;
for i in range(10): 
    print(i)
&lt;/pre&gt;
Output will be
&lt;pre&gt;
0
1
2
3
4
5
6
7
8
9
&lt;/pre&gt;

[[#Top]]

=== While loop Syntax ===
&lt;pre&gt;
intialisation

while(condition):
   Statement
   increment/decrement
&lt;/pre&gt;
e.g.
&lt;pre&gt;
#initialization
i=0
while(i&lt;10): 
    print(i)
    i=i+1
&lt;/pre&gt;
Output will be:
&lt;pre&gt;
0
1
2
3
4
5
6
7
8
9
&lt;/pre&gt;
Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNbl5jkVrrw1E5XSvm3GiCI

[[#Top]]

==Importance of Indentation in Python==
 &lt;p style=&quot;text-align:justify&quot;&gt;
Indentation is used to indicate to what block of statements belong. Indentation of blocks convey program structure in Python. Indentation in Python is used to refer a group/block of code/statements. In ''C++'' we use { and } (curly brackets) to group a set of statements. But in Python, there are no such brackets used. Instead of such brackets used in other programming languages, we use indentation in Python.&lt;/p&gt;

Use tabs, instead of spaces for ease of writing code.

Wrong indentation can lead to syntax error, or makes your output wrong for your logic e.g.

'''IndentationError: expected an indented block'''
&lt;pre&gt;
i=-1
if i&lt;0:
print(&quot;Test successful&quot;)#Wrong indentation &amp;#10006;
else:    
    print(&quot;Test failed&quot;)
#Output: IndentationError: expected an indented block

&lt;/pre&gt;

'''Properly Indented code:'''

&lt;pre&gt;
i=-1
if i&lt;0:
    print(&quot;Test successful&quot;)#Right indentation &amp;#9989;
else:    
    print(&quot;Test failed&quot;)
#Output:Test successful
&lt;/pre&gt;

'''Logic changed, so output changed, with improper indentation''', e.g.

&lt;h3&gt;Code : 1&lt;/h3&gt;
&lt;pre&gt;
sum=0
for i in range(5):
    for j in range(5):
        sum+=i
print(sum, end=&quot; &quot;)
#Output: 50
&lt;/pre&gt;
        
&lt;h3&gt;Code : 2&lt;/h3&gt;
&lt;pre&gt;
for i in range(5):
    for j in range(5):
        print(end=&quot; &quot;)
    sum+=i
print(sum, end=&quot; &quot;)
#Output:                          10
&lt;/pre&gt;
{{#ev:youtube|https://youtu.be/pmavoW419Yc|250|right}}&lt;br&gt;

[[#Top]]

==Spyder IDE Black Screen Solution==

----

 This issue is because of ''Help'' screen which is by default open. 
 We need to close it. So here's how you do it-


===Method 1:===

Step 1-    Try by closing current pane for that,  &quot;''press ctrl+shift+F4''&quot;  wait for few seconds things will appear on screen.

Step 2-    If it so than on menu bar go to ''view &gt; panes &gt; help'' unchecked &quot;''Help''&quot; option.

Step 3-    Make sure that &quot;''Help''&quot; under ''view &gt; panes'' is permanently unchecked. And ''Editor, Ipython console, Variable explorer''  are checked. 


===Method 2:===

Step 1-    Open spyder.

Step 2-   On that black screen randomly ''Left click'' on spyder &quot;''Menu bar''&quot; area you will get menu drop downs, You have to find Drop down with &quot;''Panes''&quot; option.

Step 3-   On &quot;''Panes''&quot; drop down unchecked the &quot;''Help''&quot;.

Step 4-   Wait for few seconds Spyder view will appear.

Step 5 -  Make sure that ''&quot;Help&quot;'' under view&gt;panes is permanently unchecked. And ''Editor, Ipython console, variable explorer'' are checked.


[[#Top]]</text>
      <sha1>16pusgd241biw6mhgzjhgxldpgwfdve</sha1>
    </revision>
    <revision>
      <id>3917</id>
      <parentid>3736</parentid>
      <timestamp>2018-09-30T12:37:28Z</timestamp>
      <contributor>
        <username>Prada gupta</username>
        <id>828</id>
      </contributor>
      <minor/>
      <comment>/* Variables Types and Conversion */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="20514">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_2 Contributors of this page]
==Introduction to Python==
 &lt;p style=&quot;text-align:justify&quot;&gt;Python is a widely used programming language which allows programmers to write the program in fewer lines of code. It was designed by ''Guido van Rossum'' in 1991. Python uses an interpreter instead of compiler. Basically, the main difference between compiler and interpreter is that the compiler takes the code as 'whole' and compiles it. for example, in ''C'' language and on the other side in interpreter. For example: languages like Python. It interprets the written code 'line by line', and if somewhere error is found. It stops interpreting the code from there itself. Here, in our course we will be using ''Spyder IDE''. Spyder is an integrated development environment with editing options to assist the programmers in writing programs. Spyder IDE is divided into two panes, one is console and other one is where program is written.&lt;/p&gt;

&lt;p style=&quot;text-align:justify&quot;&gt;
Python works on different platforms (Windows, Mac, Linux, Raspberry Pi, etc).
Python has a simple syntax similar to the English language.
Python has syntax that allows developers to write programs with fewer lines than some other programming languages.
Python runs on an interpreter system, meaning that code can be executed as soon as it is written. This means that prototyping can be very quick.&lt;/p&gt;
Python can be treated in a procedural way, an object-orientated way or a functional way.

==Installing Anaconda==
[[#Top]]

This article is all about installing and troubleshooting Anaconda and Spyder on different platforms.

===Windows===
Step 1 -&gt; Download the installer from here 
 &lt;p style=&quot;text-align:justify&quot;&gt;
[https://www.anaconda.com/download/#windows Download Link]. Make sure that you download the version compatible to your operating system architecture. If you have a 64 bit OS then you can download either 64 bit of 32 bit, but if you have 32 bit OS then you should download the 32 bit version only.
&lt;/p&gt;
 &lt;p style=&quot;text-align:justify&quot;&gt;
Step 2 -&gt; Double click on the .exe file that you downloaded just now and follow the instructions. If you are not sure of the installation options then just choose the default.&lt;/p&gt;
 &lt;p style=&quot;text-align:justify&quot;&gt;
Step 3 -&gt; To test your installation, open cmd (go to Start -&gt; then type cmd in the search bar and hit enter). There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.&lt;/p&gt;

===Mac===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#macos Download Link].

Step 2 -&gt; Double click on the .pkg file that you just downloaded. If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

===Linux===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#linux Download Link].

Step 2 -&gt; Go to the folder where you downloaded the .sh file and type following command 

  '''bash Anaconda-latest-Linux-x86_64.sh'''

If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

==Troubleshooting Spyder==

[[#Top]]
 &lt;p style=&quot;text-align:justify&quot;&gt;
In most of the cases, it happens that Spyder is already running and you have initiated one more instance of it. Please make sure that spyder is not running already.
If you are on Linux OS, please launch spyder through terminal. Just open the terminal and type '''spyder''' and it will launch. When Spyder opens, make sure you see Anaconda with the version written on the Ipython console. If not, try changing the path of your anaconda. Follow these steps according to your OS version.&lt;/p&gt;

====Windows====
[https://stackoverflow.com/questions/44597662/conda-command-is-not-recognized-on-windows-10 Click Here]

====Linux====
[https://stackoverflow.com/questions/18675907/how-to-run-conda Click Here]

====Mac====
[https://stackoverflow.com/questions/35246386/conda-command-not-found Click Here]

In most of the cases relaunching Spyder works.
A more general Troubleshoot is present [https://github.com/spyder-ide/spyder/wiki/Troubleshooting-Guide-and-FAQ Here]

==How to run a program in Spyder IDE?==
Go to Run on the menu bar. Click Run-&gt;Run.

[[#Top]]

==Print statements==
Print statements help to display output on console. 
{{#ev:youtube|https://youtu.be/gECkqaOwyt0|250|right}}

===Syntax===
&lt;pre&gt;print()&lt;/pre&gt;

===How to print a message?===
In order to print a message in Python, write &lt;pre&gt;print(&quot;message&quot;)&lt;/pre&gt;
Single, double, triple quote can be used print()

'''Example:'''

'''Single Quote'''
&lt;pre&gt;
print('Hello')  
Output: Hello
&lt;/pre&gt;
'''Double Quote'''
&lt;pre&gt;
print(&quot;Hello&quot;)  
Output: Hello
&lt;/pre&gt;
'''Quote within quote'''
&lt;pre&gt;print('Is &quot;Ram&quot; a good boy?')  
Output: Is &quot;Ram&quot; a good boy?&lt;/pre&gt;

[[#Top]]

==Escape sequences with strings==

We can use escape sequence within strings to make output more presentable.

'''\n'''  : It will move to next line.

'''\t'''  : It will add tab space(5space)

'''\a'''  : It will play system sound once.

'''Example:'''

&lt;pre&gt;print(&quot;Hi, \n How are you?&quot;)&lt;/pre&gt;
&lt;pre&gt;
Output: 

Hi,

How are you?
&lt;/pre&gt;
&lt;pre&gt;print(&quot;Hi, \t How are you?&quot;)&lt;/pre&gt;

Output: 

Hi, &lt;5 spaces&gt; How are you?

[[File:Escape_Sequence.jpg]]

==Variables==
[[#Top]]
&lt;pre&gt;
Variables are used to store some values. Values can be strings, integers or decimal values.  

Variable Name Rules:
1. Variable name should start with letter or underscore. Variable name cant start with number.
Example:
&amp;#10004; Valid: JOC, WIKI, JOC_WIKI, _JOC
&amp;#10008; Invalid: 1JOC, 123WIKI, 0_WIKI

2. Remaining letter other then first one can contain number, underscore.
Example:
JOC1234, WIKI012_1332

3. Variable names are case sensitivities.
Example:
JOC, jOC, joC all are different varibles. 

&lt;/pre&gt;
{{#ev:youtube|https://youtu.be/60iAXH1sm-Y|250|right}}

===How to print a variable?===
In order to print the value of a variable in python, first initialize the variable and then call it where ever you wanna use it. 
&lt;pre&gt;print(variable_name)&lt;/pre&gt;

&lt;pre&gt;For example :
x=2                # x is viable here
print(x)           # calling variable x with print function

a = &quot;JOC&quot;          # a is variable here
b = &quot;_WIKI&quot;        # b is variable here
c = a + b          # c is variable here which will provide addition of variable a and b
&lt;/pre&gt;

===Some facts about Variables===
* If you want to print variable name with a message, you can use , operator. For example : I want to print Hello Simran and Simran has been stored in a variable called ''name''.
  name=&quot;Simran&quot;
  print(&quot;Hello&quot;,name)
* If you change the value of a variable, it will store the latest value. For example :
  name=&quot;Simran&quot;
  name=&quot;Amit&quot;
  If you will execute the command ''print(name)'', Amit will be displayed.
* You can perform operations like addition, subtraction etc only on integral variables.

===Variables Types and Conversion===
&lt;pre&gt;Variable can be decimal, integer and decimal. And they can be inter covered with the help of conversion functions.

Example:
JOC = 5           Save in Memory as 5       # We have variable with name JOC having value 5 here.
JOC = int(5)      Save in Memory as 5       # Here Variable JOC holding integer value of 5. 
JOC = float(5)     Save in Memory as 5.0     # Here variable JOC holding float value of 5
JOC = str(5)      Save in Memory as &quot;5&quot;     # Here variable JOC holding string value of 5 or We can say 5 will be treated as string here.
JOC = complex(5)  Save in Memory as (5+0j)  # Here variable JOC holding complex value of 5.
JOC = oct(5)      Save in Memory as 012     # Here variable JOC holding octal representation of 5.
JOC = hex(5)      Save in Memory as 0xa     # Here variable JOC holding hexadecimal representation of 5

There are many more function available in Python. You can convert variable as per your requirement.
&lt;/pre&gt;


&lt;h1 style='color:black;font-family:Calibri;font-size:14.0pt;font-weight:800;
font-style:normal'&gt;Conversion Table with Eample&lt;/h1&gt;

&lt;table border=0 cellpadding=0 cellspacing=0 width=656 style='border-collapse:
 collapse;table-layout:fixed;width:492pt'&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6624497 width=63 style='height:15.0pt;width:47pt'&gt;Serial
  No&lt;/td&gt;
  &lt;td class=xl6724497 width=77 style='border-left:none;width:58pt'&gt;Function&lt;/td&gt;
  &lt;td class=xl6724497 width=303 style='border-left:none;width:227pt'&gt;Description&lt;/td&gt;
  &lt;td class=xl6724497 width=162 style='border-left:none;width:122pt'&gt;Example&lt;/td&gt;
  &lt;td class=xl6824497 width=51 style='border-left:none;width:38pt'&gt;Output&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;1&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;int(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to an
  integer.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10.12;
  print(int(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;2&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;long(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a&lt;span
  style='mso-spacerun:yes'&gt;  &lt;/span&gt;to a long integer&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10.12;
  print(long(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;3&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;float(a)&lt;/td&gt;
  &lt;td class=xl6524497 width=303 style='border-top:none;border-left:none;
  width:227pt'&gt;Converts a to a floating-point number.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 101.23;
  print(float(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;101.23&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;4&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;complex(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to a
  complex number.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print(complex(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10+0j&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;5&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;str(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to
  string.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print(str(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;6&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;repr(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts object
  a to an expression string.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print(repr(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;7&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;tuple(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to
  tuple.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print((a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;8&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;list(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to
  list.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print([a])&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;[10]&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;9&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;set(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to
  set.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a =
  set(&amp;quot;10&amp;quot;); print(a)&lt;/td&gt;
  &lt;td class=xl7124497 width=51 style='border-top:none;border-left:none;
  width:38pt'&gt;{'1', '0'}&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;10&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;dict(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to
  dictonary&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = dict(a=10);
  print(a)&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;{'a': 10}&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;11&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;chr(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts an
  integer to a character.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 97;
  print(chr(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;a&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;12&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;ord(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a
  single character to its integer value.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a =
  &amp;quot;J&amp;quot;; print(ord(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;74&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;13&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;hex(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts an
  integer to a hexadecimal string.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print(hex(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;0xa&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=21 style='height:15.75pt'&gt;
  &lt;td height=21 class=xl7224497 style='height:15.75pt;border-top:none'&gt;14&lt;/td&gt;
  &lt;td class=xl7324497 style='border-top:none;border-left:none'&gt;oct(a)&lt;/td&gt;
  &lt;td class=xl7324497 style='border-top:none;border-left:none'&gt;Converts an
  integer to an octal string.&lt;/td&gt;
  &lt;td class=xl7324497 style='border-top:none;border-left:none'&gt;a = 10;
  print(oct(a))&lt;/td&gt;
  &lt;td class=xl7424497 style='border-top:none;border-left:none'&gt;0o12&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
  &lt;tr height=0 style='display:none'&gt;
  &lt;td width=63 style='width:47pt'&gt;&lt;/td&gt;
  &lt;td width=77 style='width:58pt'&gt;&lt;/td&gt;
  &lt;td width=303 style='width:227pt'&gt;&lt;/td&gt;
  &lt;td width=162 style='width:122pt'&gt;&lt;/td&gt;
  &lt;td width=51 style='width:38pt'&gt;&lt;/td&gt;
 &lt;/tr&gt;
&lt;/table&gt;

==How to execute couple of instructions on console?==
You can execute couple of instructions on console using ;. Write Statement 1;Statement 2;......and then press ''Enter''.
{{#ev:youtube|https://youtu.be/CYQCYvLE22Y|250|right}}









==How to take input from the user?==
We can take input from the user using ''input'' function. For Example : You want the user to input variable ''x'', then write x=input(&quot;Enter the value of x&quot;) and execute. Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNkVLCxZw_jcgyS-bmrIVSP

And when the input you need is of data type other than string. You can do both the input function and data conversion in a single line.
For example:
Consider the program for letting in the patients
'''c=input(&quot;Enter (1/0)&quot;);d=int(c)'''

Instead of using it in two separate lines, combine it into a single line
'''c=int(input(&quot;Enter (1/0)&quot;))'''.

To get two inputs in same line with a space between them split() is used.

a,b=input(&quot;enter a&quot;).split(&quot;enter b&quot;)
----
[[#Top]]

==If statement==
If statement is used to execute set of two contrary statements based on a condition. 

===Syntax===
If (Condition):
    Statement 1
else:
    Statement 2

If 'Condition' is true then 'Statement 1' will be executed otherwise 'Statement 2' will be executed.

Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNhHmg3SkK1uiutigcAbH9K

==Loops==
[[#Top]]&lt;br&gt;
Loops in a programming languages are used to execute set of repetitive statements. For loop and while loop are used extensively to execute a set of looping instructions.

=== For loop Syntax ===
&lt;pre&gt;
for i in range(10): 
    Statement
&lt;/pre&gt;
range(10) indicate that values 0 to 9 will be assigned to the variable i and for each value of i the Statement will be executed, e.g.
&lt;pre&gt;
for i in range(10): 
    print(i)
&lt;/pre&gt;
Output will be
&lt;pre&gt;
0
1
2
3
4
5
6
7
8
9
&lt;/pre&gt;

[[#Top]]

=== While loop Syntax ===
&lt;pre&gt;
intialisation

while(condition):
   Statement
   increment/decrement
&lt;/pre&gt;
e.g.
&lt;pre&gt;
#initialization
i=0
while(i&lt;10): 
    print(i)
    i=i+1
&lt;/pre&gt;
Output will be:
&lt;pre&gt;
0
1
2
3
4
5
6
7
8
9
&lt;/pre&gt;
Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNbl5jkVrrw1E5XSvm3GiCI

[[#Top]]

==Importance of Indentation in Python==
 &lt;p style=&quot;text-align:justify&quot;&gt;
Indentation is used to indicate to what block of statements belong. Indentation of blocks convey program structure in Python. Indentation in Python is used to refer a group/block of code/statements. In ''C++'' we use { and } (curly brackets) to group a set of statements. But in Python, there are no such brackets used. Instead of such brackets used in other programming languages, we use indentation in Python.&lt;/p&gt;

Use tabs, instead of spaces for ease of writing code.

Wrong indentation can lead to syntax error, or makes your output wrong for your logic e.g.

'''IndentationError: expected an indented block'''
&lt;pre&gt;
i=-1
if i&lt;0:
print(&quot;Test successful&quot;)#Wrong indentation &amp;#10006;
else:    
    print(&quot;Test failed&quot;)
#Output: IndentationError: expected an indented block

&lt;/pre&gt;

'''Properly Indented code:'''

&lt;pre&gt;
i=-1
if i&lt;0:
    print(&quot;Test successful&quot;)#Right indentation &amp;#9989;
else:    
    print(&quot;Test failed&quot;)
#Output:Test successful
&lt;/pre&gt;

'''Logic changed, so output changed, with improper indentation''', e.g.

&lt;h3&gt;Code : 1&lt;/h3&gt;
&lt;pre&gt;
sum=0
for i in range(5):
    for j in range(5):
        sum+=i
print(sum, end=&quot; &quot;)
#Output: 50
&lt;/pre&gt;
        
&lt;h3&gt;Code : 2&lt;/h3&gt;
&lt;pre&gt;
for i in range(5):
    for j in range(5):
        print(end=&quot; &quot;)
    sum+=i
print(sum, end=&quot; &quot;)
#Output:                          10
&lt;/pre&gt;
{{#ev:youtube|https://youtu.be/pmavoW419Yc|250|right}}&lt;br&gt;

[[#Top]]

==Spyder IDE Black Screen Solution==

----

 This issue is because of ''Help'' screen which is by default open. 
 We need to close it. So here's how you do it-


===Method 1:===

Step 1-    Try by closing current pane for that,  &quot;''press ctrl+shift+F4''&quot;  wait for few seconds things will appear on screen.

Step 2-    If it so than on menu bar go to ''view &gt; panes &gt; help'' unchecked &quot;''Help''&quot; option.

Step 3-    Make sure that &quot;''Help''&quot; under ''view &gt; panes'' is permanently unchecked. And ''Editor, Ipython console, Variable explorer''  are checked. 


===Method 2:===

Step 1-    Open spyder.

Step 2-   On that black screen randomly ''Left click'' on spyder &quot;''Menu bar''&quot; area you will get menu drop downs, You have to find Drop down with &quot;''Panes''&quot; option.

Step 3-   On &quot;''Panes''&quot; drop down unchecked the &quot;''Help''&quot;.

Step 4-   Wait for few seconds Spyder view will appear.

Step 5 -  Make sure that ''&quot;Help&quot;'' under view&gt;panes is permanently unchecked. And ''Editor, Ipython console, variable explorer'' are checked.


[[#Top]]</text>
      <sha1>3994twgz4utynmtb8kqge80qlb3clhq</sha1>
    </revision>
    <revision>
      <id>4165</id>
      <parentid>3917</parentid>
      <timestamp>2018-10-10T10:37:48Z</timestamp>
      <contributor>
        <username>Neha Thakur</username>
        <id>3356</id>
      </contributor>
      <minor/>
      <comment>/* How to take input from the user? */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="20499">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_2 Contributors of this page]
==Introduction to Python==
 &lt;p style=&quot;text-align:justify&quot;&gt;Python is a widely used programming language which allows programmers to write the program in fewer lines of code. It was designed by ''Guido van Rossum'' in 1991. Python uses an interpreter instead of compiler. Basically, the main difference between compiler and interpreter is that the compiler takes the code as 'whole' and compiles it. for example, in ''C'' language and on the other side in interpreter. For example: languages like Python. It interprets the written code 'line by line', and if somewhere error is found. It stops interpreting the code from there itself. Here, in our course we will be using ''Spyder IDE''. Spyder is an integrated development environment with editing options to assist the programmers in writing programs. Spyder IDE is divided into two panes, one is console and other one is where program is written.&lt;/p&gt;

&lt;p style=&quot;text-align:justify&quot;&gt;
Python works on different platforms (Windows, Mac, Linux, Raspberry Pi, etc).
Python has a simple syntax similar to the English language.
Python has syntax that allows developers to write programs with fewer lines than some other programming languages.
Python runs on an interpreter system, meaning that code can be executed as soon as it is written. This means that prototyping can be very quick.&lt;/p&gt;
Python can be treated in a procedural way, an object-orientated way or a functional way.

==Installing Anaconda==
[[#Top]]

This article is all about installing and troubleshooting Anaconda and Spyder on different platforms.

===Windows===
Step 1 -&gt; Download the installer from here 
 &lt;p style=&quot;text-align:justify&quot;&gt;
[https://www.anaconda.com/download/#windows Download Link]. Make sure that you download the version compatible to your operating system architecture. If you have a 64 bit OS then you can download either 64 bit of 32 bit, but if you have 32 bit OS then you should download the 32 bit version only.
&lt;/p&gt;
 &lt;p style=&quot;text-align:justify&quot;&gt;
Step 2 -&gt; Double click on the .exe file that you downloaded just now and follow the instructions. If you are not sure of the installation options then just choose the default.&lt;/p&gt;
 &lt;p style=&quot;text-align:justify&quot;&gt;
Step 3 -&gt; To test your installation, open cmd (go to Start -&gt; then type cmd in the search bar and hit enter). There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.&lt;/p&gt;

===Mac===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#macos Download Link].

Step 2 -&gt; Double click on the .pkg file that you just downloaded. If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

===Linux===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#linux Download Link].

Step 2 -&gt; Go to the folder where you downloaded the .sh file and type following command 

  '''bash Anaconda-latest-Linux-x86_64.sh'''

If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

==Troubleshooting Spyder==

[[#Top]]
 &lt;p style=&quot;text-align:justify&quot;&gt;
In most of the cases, it happens that Spyder is already running and you have initiated one more instance of it. Please make sure that spyder is not running already.
If you are on Linux OS, please launch spyder through terminal. Just open the terminal and type '''spyder''' and it will launch. When Spyder opens, make sure you see Anaconda with the version written on the Ipython console. If not, try changing the path of your anaconda. Follow these steps according to your OS version.&lt;/p&gt;

====Windows====
[https://stackoverflow.com/questions/44597662/conda-command-is-not-recognized-on-windows-10 Click Here]

====Linux====
[https://stackoverflow.com/questions/18675907/how-to-run-conda Click Here]

====Mac====
[https://stackoverflow.com/questions/35246386/conda-command-not-found Click Here]

In most of the cases relaunching Spyder works.
A more general Troubleshoot is present [https://github.com/spyder-ide/spyder/wiki/Troubleshooting-Guide-and-FAQ Here]

==How to run a program in Spyder IDE?==
Go to Run on the menu bar. Click Run-&gt;Run.

[[#Top]]

==Print statements==
Print statements help to display output on console. 
{{#ev:youtube|https://youtu.be/gECkqaOwyt0|250|right}}

===Syntax===
&lt;pre&gt;print()&lt;/pre&gt;

===How to print a message?===
In order to print a message in Python, write &lt;pre&gt;print(&quot;message&quot;)&lt;/pre&gt;
Single, double, triple quote can be used print()

'''Example:'''

'''Single Quote'''
&lt;pre&gt;
print('Hello')  
Output: Hello
&lt;/pre&gt;
'''Double Quote'''
&lt;pre&gt;
print(&quot;Hello&quot;)  
Output: Hello
&lt;/pre&gt;
'''Quote within quote'''
&lt;pre&gt;print('Is &quot;Ram&quot; a good boy?')  
Output: Is &quot;Ram&quot; a good boy?&lt;/pre&gt;

[[#Top]]

==Escape sequences with strings==

We can use escape sequence within strings to make output more presentable.

'''\n'''  : It will move to next line.

'''\t'''  : It will add tab space(5space)

'''\a'''  : It will play system sound once.

'''Example:'''

&lt;pre&gt;print(&quot;Hi, \n How are you?&quot;)&lt;/pre&gt;
&lt;pre&gt;
Output: 

Hi,

How are you?
&lt;/pre&gt;
&lt;pre&gt;print(&quot;Hi, \t How are you?&quot;)&lt;/pre&gt;

Output: 

Hi, &lt;5 spaces&gt; How are you?

[[File:Escape_Sequence.jpg]]

==Variables==
[[#Top]]
&lt;pre&gt;
Variables are used to store some values. Values can be strings, integers or decimal values.  

Variable Name Rules:
1. Variable name should start with letter or underscore. Variable name cant start with number.
Example:
&amp;#10004; Valid: JOC, WIKI, JOC_WIKI, _JOC
&amp;#10008; Invalid: 1JOC, 123WIKI, 0_WIKI

2. Remaining letter other then first one can contain number, underscore.
Example:
JOC1234, WIKI012_1332

3. Variable names are case sensitivities.
Example:
JOC, jOC, joC all are different varibles. 

&lt;/pre&gt;
{{#ev:youtube|https://youtu.be/60iAXH1sm-Y|250|right}}

===How to print a variable?===
In order to print the value of a variable in python, first initialize the variable and then call it where ever you wanna use it. 
&lt;pre&gt;print(variable_name)&lt;/pre&gt;

&lt;pre&gt;For example :
x=2                # x is viable here
print(x)           # calling variable x with print function

a = &quot;JOC&quot;          # a is variable here
b = &quot;_WIKI&quot;        # b is variable here
c = a + b          # c is variable here which will provide addition of variable a and b
&lt;/pre&gt;

===Some facts about Variables===
* If you want to print variable name with a message, you can use , operator. For example : I want to print Hello Simran and Simran has been stored in a variable called ''name''.
  name=&quot;Simran&quot;
  print(&quot;Hello&quot;,name)
* If you change the value of a variable, it will store the latest value. For example :
  name=&quot;Simran&quot;
  name=&quot;Amit&quot;
  If you will execute the command ''print(name)'', Amit will be displayed.
* You can perform operations like addition, subtraction etc only on integral variables.

===Variables Types and Conversion===
&lt;pre&gt;Variable can be decimal, integer and decimal. And they can be inter covered with the help of conversion functions.

Example:
JOC = 5           Save in Memory as 5       # We have variable with name JOC having value 5 here.
JOC = int(5)      Save in Memory as 5       # Here Variable JOC holding integer value of 5. 
JOC = float(5)     Save in Memory as 5.0     # Here variable JOC holding float value of 5
JOC = str(5)      Save in Memory as &quot;5&quot;     # Here variable JOC holding string value of 5 or We can say 5 will be treated as string here.
JOC = complex(5)  Save in Memory as (5+0j)  # Here variable JOC holding complex value of 5.
JOC = oct(5)      Save in Memory as 012     # Here variable JOC holding octal representation of 5.
JOC = hex(5)      Save in Memory as 0xa     # Here variable JOC holding hexadecimal representation of 5

There are many more function available in Python. You can convert variable as per your requirement.
&lt;/pre&gt;


&lt;h1 style='color:black;font-family:Calibri;font-size:14.0pt;font-weight:800;
font-style:normal'&gt;Conversion Table with Eample&lt;/h1&gt;

&lt;table border=0 cellpadding=0 cellspacing=0 width=656 style='border-collapse:
 collapse;table-layout:fixed;width:492pt'&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6624497 width=63 style='height:15.0pt;width:47pt'&gt;Serial
  No&lt;/td&gt;
  &lt;td class=xl6724497 width=77 style='border-left:none;width:58pt'&gt;Function&lt;/td&gt;
  &lt;td class=xl6724497 width=303 style='border-left:none;width:227pt'&gt;Description&lt;/td&gt;
  &lt;td class=xl6724497 width=162 style='border-left:none;width:122pt'&gt;Example&lt;/td&gt;
  &lt;td class=xl6824497 width=51 style='border-left:none;width:38pt'&gt;Output&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;1&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;int(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to an
  integer.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10.12;
  print(int(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;2&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;long(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a&lt;span
  style='mso-spacerun:yes'&gt;  &lt;/span&gt;to a long integer&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10.12;
  print(long(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;3&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;float(a)&lt;/td&gt;
  &lt;td class=xl6524497 width=303 style='border-top:none;border-left:none;
  width:227pt'&gt;Converts a to a floating-point number.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 101.23;
  print(float(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;101.23&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;4&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;complex(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to a
  complex number.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print(complex(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10+0j&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;5&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;str(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to
  string.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print(str(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;6&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;repr(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts object
  a to an expression string.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print(repr(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;7&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;tuple(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to
  tuple.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print((a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;8&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;list(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to
  list.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print([a])&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;[10]&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;9&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;set(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to
  set.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a =
  set(&amp;quot;10&amp;quot;); print(a)&lt;/td&gt;
  &lt;td class=xl7124497 width=51 style='border-top:none;border-left:none;
  width:38pt'&gt;{'1', '0'}&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;10&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;dict(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to
  dictonary&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = dict(a=10);
  print(a)&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;{'a': 10}&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;11&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;chr(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts an
  integer to a character.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 97;
  print(chr(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;a&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;12&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;ord(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a
  single character to its integer value.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a =
  &amp;quot;J&amp;quot;; print(ord(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;74&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;13&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;hex(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts an
  integer to a hexadecimal string.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print(hex(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;0xa&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=21 style='height:15.75pt'&gt;
  &lt;td height=21 class=xl7224497 style='height:15.75pt;border-top:none'&gt;14&lt;/td&gt;
  &lt;td class=xl7324497 style='border-top:none;border-left:none'&gt;oct(a)&lt;/td&gt;
  &lt;td class=xl7324497 style='border-top:none;border-left:none'&gt;Converts an
  integer to an octal string.&lt;/td&gt;
  &lt;td class=xl7324497 style='border-top:none;border-left:none'&gt;a = 10;
  print(oct(a))&lt;/td&gt;
  &lt;td class=xl7424497 style='border-top:none;border-left:none'&gt;0o12&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
  &lt;tr height=0 style='display:none'&gt;
  &lt;td width=63 style='width:47pt'&gt;&lt;/td&gt;
  &lt;td width=77 style='width:58pt'&gt;&lt;/td&gt;
  &lt;td width=303 style='width:227pt'&gt;&lt;/td&gt;
  &lt;td width=162 style='width:122pt'&gt;&lt;/td&gt;
  &lt;td width=51 style='width:38pt'&gt;&lt;/td&gt;
 &lt;/tr&gt;
&lt;/table&gt;

==How to execute couple of instructions on console?==
You can execute couple of instructions on console using ;. Write Statement 1;Statement 2;......and then press ''Enter''.
{{#ev:youtube|https://youtu.be/CYQCYvLE22Y|250|right}}









==How to take input from the user?==
We can take input from the user using ''input'' function. For Example : You want the user to input variable ''x'', then write x=input(&quot;Enter the value of x&quot;) and execute. Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNkVLCxZw_jcgyS-bmrIVSP

And when the input you need is of data type other than string. You can do both the input function and data conversion in a single line.
For example:
Consider the program for letting in the patients
'''c=input(&quot;Enter (1/0)&quot;);d=int(c)'''

Instead of using it in two separate lines, combine it into a single line
'''c=int(input(&quot;Enter (1/0)&quot;))'''.

To get two inputs in same line with a space between them split() is used.

a,b=input().split(&quot; &quot;)
----
[[#Top]]

==If statement==
If statement is used to execute set of two contrary statements based on a condition. 

===Syntax===
If (Condition):
    Statement 1
else:
    Statement 2

If 'Condition' is true then 'Statement 1' will be executed otherwise 'Statement 2' will be executed.

Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNhHmg3SkK1uiutigcAbH9K

==Loops==
[[#Top]]&lt;br&gt;
Loops in a programming languages are used to execute set of repetitive statements. For loop and while loop are used extensively to execute a set of looping instructions.

=== For loop Syntax ===
&lt;pre&gt;
for i in range(10): 
    Statement
&lt;/pre&gt;
range(10) indicate that values 0 to 9 will be assigned to the variable i and for each value of i the Statement will be executed, e.g.
&lt;pre&gt;
for i in range(10): 
    print(i)
&lt;/pre&gt;
Output will be
&lt;pre&gt;
0
1
2
3
4
5
6
7
8
9
&lt;/pre&gt;

[[#Top]]

=== While loop Syntax ===
&lt;pre&gt;
intialisation

while(condition):
   Statement
   increment/decrement
&lt;/pre&gt;
e.g.
&lt;pre&gt;
#initialization
i=0
while(i&lt;10): 
    print(i)
    i=i+1
&lt;/pre&gt;
Output will be:
&lt;pre&gt;
0
1
2
3
4
5
6
7
8
9
&lt;/pre&gt;
Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNbl5jkVrrw1E5XSvm3GiCI

[[#Top]]

==Importance of Indentation in Python==
 &lt;p style=&quot;text-align:justify&quot;&gt;
Indentation is used to indicate to what block of statements belong. Indentation of blocks convey program structure in Python. Indentation in Python is used to refer a group/block of code/statements. In ''C++'' we use { and } (curly brackets) to group a set of statements. But in Python, there are no such brackets used. Instead of such brackets used in other programming languages, we use indentation in Python.&lt;/p&gt;

Use tabs, instead of spaces for ease of writing code.

Wrong indentation can lead to syntax error, or makes your output wrong for your logic e.g.

'''IndentationError: expected an indented block'''
&lt;pre&gt;
i=-1
if i&lt;0:
print(&quot;Test successful&quot;)#Wrong indentation &amp;#10006;
else:    
    print(&quot;Test failed&quot;)
#Output: IndentationError: expected an indented block

&lt;/pre&gt;

'''Properly Indented code:'''

&lt;pre&gt;
i=-1
if i&lt;0:
    print(&quot;Test successful&quot;)#Right indentation &amp;#9989;
else:    
    print(&quot;Test failed&quot;)
#Output:Test successful
&lt;/pre&gt;

'''Logic changed, so output changed, with improper indentation''', e.g.

&lt;h3&gt;Code : 1&lt;/h3&gt;
&lt;pre&gt;
sum=0
for i in range(5):
    for j in range(5):
        sum+=i
print(sum, end=&quot; &quot;)
#Output: 50
&lt;/pre&gt;
        
&lt;h3&gt;Code : 2&lt;/h3&gt;
&lt;pre&gt;
for i in range(5):
    for j in range(5):
        print(end=&quot; &quot;)
    sum+=i
print(sum, end=&quot; &quot;)
#Output:                          10
&lt;/pre&gt;
{{#ev:youtube|https://youtu.be/pmavoW419Yc|250|right}}&lt;br&gt;

[[#Top]]

==Spyder IDE Black Screen Solution==

----

 This issue is because of ''Help'' screen which is by default open. 
 We need to close it. So here's how you do it-


===Method 1:===

Step 1-    Try by closing current pane for that,  &quot;''press ctrl+shift+F4''&quot;  wait for few seconds things will appear on screen.

Step 2-    If it so than on menu bar go to ''view &gt; panes &gt; help'' unchecked &quot;''Help''&quot; option.

Step 3-    Make sure that &quot;''Help''&quot; under ''view &gt; panes'' is permanently unchecked. And ''Editor, Ipython console, Variable explorer''  are checked. 


===Method 2:===

Step 1-    Open spyder.

Step 2-   On that black screen randomly ''Left click'' on spyder &quot;''Menu bar''&quot; area you will get menu drop downs, You have to find Drop down with &quot;''Panes''&quot; option.

Step 3-   On &quot;''Panes''&quot; drop down unchecked the &quot;''Help''&quot;.

Step 4-   Wait for few seconds Spyder view will appear.

Step 5 -  Make sure that ''&quot;Help&quot;'' under view&gt;panes is permanently unchecked. And ''Editor, Ipython console, variable explorer'' are checked.


[[#Top]]</text>
      <sha1>apsmjtye1jgrlysbr8jppzlsvilpgb7</sha1>
    </revision>
    <revision>
      <id>4495</id>
      <parentid>4165</parentid>
      <timestamp>2018-10-18T00:00:57Z</timestamp>
      <contributor>
        <username>Mukund.sbt16</username>
        <id>1747</id>
      </contributor>
      <comment>/* Variables */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="20500">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_2 Contributors of this page]
==Introduction to Python==
 &lt;p style=&quot;text-align:justify&quot;&gt;Python is a widely used programming language which allows programmers to write the program in fewer lines of code. It was designed by ''Guido van Rossum'' in 1991. Python uses an interpreter instead of compiler. Basically, the main difference between compiler and interpreter is that the compiler takes the code as 'whole' and compiles it. for example, in ''C'' language and on the other side in interpreter. For example: languages like Python. It interprets the written code 'line by line', and if somewhere error is found. It stops interpreting the code from there itself. Here, in our course we will be using ''Spyder IDE''. Spyder is an integrated development environment with editing options to assist the programmers in writing programs. Spyder IDE is divided into two panes, one is console and other one is where program is written.&lt;/p&gt;

&lt;p style=&quot;text-align:justify&quot;&gt;
Python works on different platforms (Windows, Mac, Linux, Raspberry Pi, etc).
Python has a simple syntax similar to the English language.
Python has syntax that allows developers to write programs with fewer lines than some other programming languages.
Python runs on an interpreter system, meaning that code can be executed as soon as it is written. This means that prototyping can be very quick.&lt;/p&gt;
Python can be treated in a procedural way, an object-orientated way or a functional way.

==Installing Anaconda==
[[#Top]]

This article is all about installing and troubleshooting Anaconda and Spyder on different platforms.

===Windows===
Step 1 -&gt; Download the installer from here 
 &lt;p style=&quot;text-align:justify&quot;&gt;
[https://www.anaconda.com/download/#windows Download Link]. Make sure that you download the version compatible to your operating system architecture. If you have a 64 bit OS then you can download either 64 bit of 32 bit, but if you have 32 bit OS then you should download the 32 bit version only.
&lt;/p&gt;
 &lt;p style=&quot;text-align:justify&quot;&gt;
Step 2 -&gt; Double click on the .exe file that you downloaded just now and follow the instructions. If you are not sure of the installation options then just choose the default.&lt;/p&gt;
 &lt;p style=&quot;text-align:justify&quot;&gt;
Step 3 -&gt; To test your installation, open cmd (go to Start -&gt; then type cmd in the search bar and hit enter). There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.&lt;/p&gt;

===Mac===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#macos Download Link].

Step 2 -&gt; Double click on the .pkg file that you just downloaded. If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

===Linux===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#linux Download Link].

Step 2 -&gt; Go to the folder where you downloaded the .sh file and type following command 

  '''bash Anaconda-latest-Linux-x86_64.sh'''

If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

==Troubleshooting Spyder==

[[#Top]]
 &lt;p style=&quot;text-align:justify&quot;&gt;
In most of the cases, it happens that Spyder is already running and you have initiated one more instance of it. Please make sure that spyder is not running already.
If you are on Linux OS, please launch spyder through terminal. Just open the terminal and type '''spyder''' and it will launch. When Spyder opens, make sure you see Anaconda with the version written on the Ipython console. If not, try changing the path of your anaconda. Follow these steps according to your OS version.&lt;/p&gt;

====Windows====
[https://stackoverflow.com/questions/44597662/conda-command-is-not-recognized-on-windows-10 Click Here]

====Linux====
[https://stackoverflow.com/questions/18675907/how-to-run-conda Click Here]

====Mac====
[https://stackoverflow.com/questions/35246386/conda-command-not-found Click Here]

In most of the cases relaunching Spyder works.
A more general Troubleshoot is present [https://github.com/spyder-ide/spyder/wiki/Troubleshooting-Guide-and-FAQ Here]

==How to run a program in Spyder IDE?==
Go to Run on the menu bar. Click Run-&gt;Run.

[[#Top]]

==Print statements==
Print statements help to display output on console. 
{{#ev:youtube|https://youtu.be/gECkqaOwyt0|250|right}}

===Syntax===
&lt;pre&gt;print()&lt;/pre&gt;

===How to print a message?===
In order to print a message in Python, write &lt;pre&gt;print(&quot;message&quot;)&lt;/pre&gt;
Single, double, triple quote can be used print()

'''Example:'''

'''Single Quote'''
&lt;pre&gt;
print('Hello')  
Output: Hello
&lt;/pre&gt;
'''Double Quote'''
&lt;pre&gt;
print(&quot;Hello&quot;)  
Output: Hello
&lt;/pre&gt;
'''Quote within quote'''
&lt;pre&gt;print('Is &quot;Ram&quot; a good boy?')  
Output: Is &quot;Ram&quot; a good boy?&lt;/pre&gt;

[[#Top]]

==Escape sequences with strings==

We can use escape sequence within strings to make output more presentable.

'''\n'''  : It will move to next line.

'''\t'''  : It will add tab space(5space)

'''\a'''  : It will play system sound once.

'''Example:'''

&lt;pre&gt;print(&quot;Hi, \n How are you?&quot;)&lt;/pre&gt;
&lt;pre&gt;
Output: 

Hi,

How are you?
&lt;/pre&gt;
&lt;pre&gt;print(&quot;Hi, \t How are you?&quot;)&lt;/pre&gt;

Output: 

Hi, &lt;5 spaces&gt; How are you?

[[File:Escape_Sequence.jpg]]

==Variables==
[[#Top]]
&lt;pre&gt;
Variables are used to store some values. Values can be strings, integers or decimal values.  

Variable Name Rules:
1. Variable name should start with letter or underscore. Variable name cant start with number.
Example:
&amp;#10004; Valid: JOC, WIKI, JOC_WIKI, _JOC
&amp;#10008; Invalid: 1JOC, 123WIKI, 0_WIKI

2. Remaining letter other then first one can contain number, underscore.
Example:
JOC1234, WIKI012_1332

3. Variable names are case sensitivities.
Example:
JOC, jOC, joC all are different variables. 

&lt;/pre&gt;
{{#ev:youtube|https://youtu.be/60iAXH1sm-Y|250|right}}

===How to print a variable?===
In order to print the value of a variable in python, first initialize the variable and then call it where ever you wanna use it. 
&lt;pre&gt;print(variable_name)&lt;/pre&gt;

&lt;pre&gt;For example :
x=2                # x is viable here
print(x)           # calling variable x with print function

a = &quot;JOC&quot;          # a is variable here
b = &quot;_WIKI&quot;        # b is variable here
c = a + b          # c is variable here which will provide addition of variable a and b
&lt;/pre&gt;

===Some facts about Variables===
* If you want to print variable name with a message, you can use , operator. For example : I want to print Hello Simran and Simran has been stored in a variable called ''name''.
  name=&quot;Simran&quot;
  print(&quot;Hello&quot;,name)
* If you change the value of a variable, it will store the latest value. For example :
  name=&quot;Simran&quot;
  name=&quot;Amit&quot;
  If you will execute the command ''print(name)'', Amit will be displayed.
* You can perform operations like addition, subtraction etc only on integral variables.

===Variables Types and Conversion===
&lt;pre&gt;Variable can be decimal, integer and decimal. And they can be inter covered with the help of conversion functions.

Example:
JOC = 5           Save in Memory as 5       # We have variable with name JOC having value 5 here.
JOC = int(5)      Save in Memory as 5       # Here Variable JOC holding integer value of 5. 
JOC = float(5)     Save in Memory as 5.0     # Here variable JOC holding float value of 5
JOC = str(5)      Save in Memory as &quot;5&quot;     # Here variable JOC holding string value of 5 or We can say 5 will be treated as string here.
JOC = complex(5)  Save in Memory as (5+0j)  # Here variable JOC holding complex value of 5.
JOC = oct(5)      Save in Memory as 012     # Here variable JOC holding octal representation of 5.
JOC = hex(5)      Save in Memory as 0xa     # Here variable JOC holding hexadecimal representation of 5

There are many more function available in Python. You can convert variable as per your requirement.
&lt;/pre&gt;


&lt;h1 style='color:black;font-family:Calibri;font-size:14.0pt;font-weight:800;
font-style:normal'&gt;Conversion Table with Eample&lt;/h1&gt;

&lt;table border=0 cellpadding=0 cellspacing=0 width=656 style='border-collapse:
 collapse;table-layout:fixed;width:492pt'&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6624497 width=63 style='height:15.0pt;width:47pt'&gt;Serial
  No&lt;/td&gt;
  &lt;td class=xl6724497 width=77 style='border-left:none;width:58pt'&gt;Function&lt;/td&gt;
  &lt;td class=xl6724497 width=303 style='border-left:none;width:227pt'&gt;Description&lt;/td&gt;
  &lt;td class=xl6724497 width=162 style='border-left:none;width:122pt'&gt;Example&lt;/td&gt;
  &lt;td class=xl6824497 width=51 style='border-left:none;width:38pt'&gt;Output&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;1&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;int(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to an
  integer.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10.12;
  print(int(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;2&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;long(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a&lt;span
  style='mso-spacerun:yes'&gt;  &lt;/span&gt;to a long integer&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10.12;
  print(long(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;3&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;float(a)&lt;/td&gt;
  &lt;td class=xl6524497 width=303 style='border-top:none;border-left:none;
  width:227pt'&gt;Converts a to a floating-point number.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 101.23;
  print(float(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;101.23&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;4&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;complex(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to a
  complex number.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print(complex(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10+0j&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;5&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;str(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to
  string.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print(str(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;6&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;repr(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts object
  a to an expression string.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print(repr(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;7&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;tuple(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to
  tuple.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print((a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;8&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;list(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to
  list.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print([a])&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;[10]&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;9&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;set(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to
  set.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a =
  set(&amp;quot;10&amp;quot;); print(a)&lt;/td&gt;
  &lt;td class=xl7124497 width=51 style='border-top:none;border-left:none;
  width:38pt'&gt;{'1', '0'}&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;10&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;dict(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to
  dictonary&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = dict(a=10);
  print(a)&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;{'a': 10}&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;11&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;chr(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts an
  integer to a character.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 97;
  print(chr(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;a&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;12&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;ord(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a
  single character to its integer value.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a =
  &amp;quot;J&amp;quot;; print(ord(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;74&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;13&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;hex(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts an
  integer to a hexadecimal string.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print(hex(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;0xa&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=21 style='height:15.75pt'&gt;
  &lt;td height=21 class=xl7224497 style='height:15.75pt;border-top:none'&gt;14&lt;/td&gt;
  &lt;td class=xl7324497 style='border-top:none;border-left:none'&gt;oct(a)&lt;/td&gt;
  &lt;td class=xl7324497 style='border-top:none;border-left:none'&gt;Converts an
  integer to an octal string.&lt;/td&gt;
  &lt;td class=xl7324497 style='border-top:none;border-left:none'&gt;a = 10;
  print(oct(a))&lt;/td&gt;
  &lt;td class=xl7424497 style='border-top:none;border-left:none'&gt;0o12&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
  &lt;tr height=0 style='display:none'&gt;
  &lt;td width=63 style='width:47pt'&gt;&lt;/td&gt;
  &lt;td width=77 style='width:58pt'&gt;&lt;/td&gt;
  &lt;td width=303 style='width:227pt'&gt;&lt;/td&gt;
  &lt;td width=162 style='width:122pt'&gt;&lt;/td&gt;
  &lt;td width=51 style='width:38pt'&gt;&lt;/td&gt;
 &lt;/tr&gt;
&lt;/table&gt;

==How to execute couple of instructions on console?==
You can execute couple of instructions on console using ;. Write Statement 1;Statement 2;......and then press ''Enter''.
{{#ev:youtube|https://youtu.be/CYQCYvLE22Y|250|right}}









==How to take input from the user?==
We can take input from the user using ''input'' function. For Example : You want the user to input variable ''x'', then write x=input(&quot;Enter the value of x&quot;) and execute. Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNkVLCxZw_jcgyS-bmrIVSP

And when the input you need is of data type other than string. You can do both the input function and data conversion in a single line.
For example:
Consider the program for letting in the patients
'''c=input(&quot;Enter (1/0)&quot;);d=int(c)'''

Instead of using it in two separate lines, combine it into a single line
'''c=int(input(&quot;Enter (1/0)&quot;))'''.

To get two inputs in same line with a space between them split() is used.

a,b=input().split(&quot; &quot;)
----
[[#Top]]

==If statement==
If statement is used to execute set of two contrary statements based on a condition. 

===Syntax===
If (Condition):
    Statement 1
else:
    Statement 2

If 'Condition' is true then 'Statement 1' will be executed otherwise 'Statement 2' will be executed.

Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNhHmg3SkK1uiutigcAbH9K

==Loops==
[[#Top]]&lt;br&gt;
Loops in a programming languages are used to execute set of repetitive statements. For loop and while loop are used extensively to execute a set of looping instructions.

=== For loop Syntax ===
&lt;pre&gt;
for i in range(10): 
    Statement
&lt;/pre&gt;
range(10) indicate that values 0 to 9 will be assigned to the variable i and for each value of i the Statement will be executed, e.g.
&lt;pre&gt;
for i in range(10): 
    print(i)
&lt;/pre&gt;
Output will be
&lt;pre&gt;
0
1
2
3
4
5
6
7
8
9
&lt;/pre&gt;

[[#Top]]

=== While loop Syntax ===
&lt;pre&gt;
intialisation

while(condition):
   Statement
   increment/decrement
&lt;/pre&gt;
e.g.
&lt;pre&gt;
#initialization
i=0
while(i&lt;10): 
    print(i)
    i=i+1
&lt;/pre&gt;
Output will be:
&lt;pre&gt;
0
1
2
3
4
5
6
7
8
9
&lt;/pre&gt;
Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNbl5jkVrrw1E5XSvm3GiCI

[[#Top]]

==Importance of Indentation in Python==
 &lt;p style=&quot;text-align:justify&quot;&gt;
Indentation is used to indicate to what block of statements belong. Indentation of blocks convey program structure in Python. Indentation in Python is used to refer a group/block of code/statements. In ''C++'' we use { and } (curly brackets) to group a set of statements. But in Python, there are no such brackets used. Instead of such brackets used in other programming languages, we use indentation in Python.&lt;/p&gt;

Use tabs, instead of spaces for ease of writing code.

Wrong indentation can lead to syntax error, or makes your output wrong for your logic e.g.

'''IndentationError: expected an indented block'''
&lt;pre&gt;
i=-1
if i&lt;0:
print(&quot;Test successful&quot;)#Wrong indentation &amp;#10006;
else:    
    print(&quot;Test failed&quot;)
#Output: IndentationError: expected an indented block

&lt;/pre&gt;

'''Properly Indented code:'''

&lt;pre&gt;
i=-1
if i&lt;0:
    print(&quot;Test successful&quot;)#Right indentation &amp;#9989;
else:    
    print(&quot;Test failed&quot;)
#Output:Test successful
&lt;/pre&gt;

'''Logic changed, so output changed, with improper indentation''', e.g.

&lt;h3&gt;Code : 1&lt;/h3&gt;
&lt;pre&gt;
sum=0
for i in range(5):
    for j in range(5):
        sum+=i
print(sum, end=&quot; &quot;)
#Output: 50
&lt;/pre&gt;
        
&lt;h3&gt;Code : 2&lt;/h3&gt;
&lt;pre&gt;
for i in range(5):
    for j in range(5):
        print(end=&quot; &quot;)
    sum+=i
print(sum, end=&quot; &quot;)
#Output:                          10
&lt;/pre&gt;
{{#ev:youtube|https://youtu.be/pmavoW419Yc|250|right}}&lt;br&gt;

[[#Top]]

==Spyder IDE Black Screen Solution==

----

 This issue is because of ''Help'' screen which is by default open. 
 We need to close it. So here's how you do it-


===Method 1:===

Step 1-    Try by closing current pane for that,  &quot;''press ctrl+shift+F4''&quot;  wait for few seconds things will appear on screen.

Step 2-    If it so than on menu bar go to ''view &gt; panes &gt; help'' unchecked &quot;''Help''&quot; option.

Step 3-    Make sure that &quot;''Help''&quot; under ''view &gt; panes'' is permanently unchecked. And ''Editor, Ipython console, Variable explorer''  are checked. 


===Method 2:===

Step 1-    Open spyder.

Step 2-   On that black screen randomly ''Left click'' on spyder &quot;''Menu bar''&quot; area you will get menu drop downs, You have to find Drop down with &quot;''Panes''&quot; option.

Step 3-   On &quot;''Panes''&quot; drop down unchecked the &quot;''Help''&quot;.

Step 4-   Wait for few seconds Spyder view will appear.

Step 5 -  Make sure that ''&quot;Help&quot;'' under view&gt;panes is permanently unchecked. And ''Editor, Ipython console, variable explorer'' are checked.


[[#Top]]</text>
      <sha1>pxi67tfggb45rh4dwahll6lelbhcnbz</sha1>
    </revision>
    <revision>
      <id>4522</id>
      <parentid>4495</parentid>
      <timestamp>2018-10-22T01:11:51Z</timestamp>
      <contributor>
        <username>Suryakant</username>
        <id>3541</id>
      </contributor>
      <comment>/* Variables Types and Conversion */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="20500">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_2 Contributors of this page]
==Introduction to Python==
 &lt;p style=&quot;text-align:justify&quot;&gt;Python is a widely used programming language which allows programmers to write the program in fewer lines of code. It was designed by ''Guido van Rossum'' in 1991. Python uses an interpreter instead of compiler. Basically, the main difference between compiler and interpreter is that the compiler takes the code as 'whole' and compiles it. for example, in ''C'' language and on the other side in interpreter. For example: languages like Python. It interprets the written code 'line by line', and if somewhere error is found. It stops interpreting the code from there itself. Here, in our course we will be using ''Spyder IDE''. Spyder is an integrated development environment with editing options to assist the programmers in writing programs. Spyder IDE is divided into two panes, one is console and other one is where program is written.&lt;/p&gt;

&lt;p style=&quot;text-align:justify&quot;&gt;
Python works on different platforms (Windows, Mac, Linux, Raspberry Pi, etc).
Python has a simple syntax similar to the English language.
Python has syntax that allows developers to write programs with fewer lines than some other programming languages.
Python runs on an interpreter system, meaning that code can be executed as soon as it is written. This means that prototyping can be very quick.&lt;/p&gt;
Python can be treated in a procedural way, an object-orientated way or a functional way.

==Installing Anaconda==
[[#Top]]

This article is all about installing and troubleshooting Anaconda and Spyder on different platforms.

===Windows===
Step 1 -&gt; Download the installer from here 
 &lt;p style=&quot;text-align:justify&quot;&gt;
[https://www.anaconda.com/download/#windows Download Link]. Make sure that you download the version compatible to your operating system architecture. If you have a 64 bit OS then you can download either 64 bit of 32 bit, but if you have 32 bit OS then you should download the 32 bit version only.
&lt;/p&gt;
 &lt;p style=&quot;text-align:justify&quot;&gt;
Step 2 -&gt; Double click on the .exe file that you downloaded just now and follow the instructions. If you are not sure of the installation options then just choose the default.&lt;/p&gt;
 &lt;p style=&quot;text-align:justify&quot;&gt;
Step 3 -&gt; To test your installation, open cmd (go to Start -&gt; then type cmd in the search bar and hit enter). There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.&lt;/p&gt;

===Mac===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#macos Download Link].

Step 2 -&gt; Double click on the .pkg file that you just downloaded. If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

===Linux===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#linux Download Link].

Step 2 -&gt; Go to the folder where you downloaded the .sh file and type following command 

  '''bash Anaconda-latest-Linux-x86_64.sh'''

If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

==Troubleshooting Spyder==

[[#Top]]
 &lt;p style=&quot;text-align:justify&quot;&gt;
In most of the cases, it happens that Spyder is already running and you have initiated one more instance of it. Please make sure that spyder is not running already.
If you are on Linux OS, please launch spyder through terminal. Just open the terminal and type '''spyder''' and it will launch. When Spyder opens, make sure you see Anaconda with the version written on the Ipython console. If not, try changing the path of your anaconda. Follow these steps according to your OS version.&lt;/p&gt;

====Windows====
[https://stackoverflow.com/questions/44597662/conda-command-is-not-recognized-on-windows-10 Click Here]

====Linux====
[https://stackoverflow.com/questions/18675907/how-to-run-conda Click Here]

====Mac====
[https://stackoverflow.com/questions/35246386/conda-command-not-found Click Here]

In most of the cases relaunching Spyder works.
A more general Troubleshoot is present [https://github.com/spyder-ide/spyder/wiki/Troubleshooting-Guide-and-FAQ Here]

==How to run a program in Spyder IDE?==
Go to Run on the menu bar. Click Run-&gt;Run.

[[#Top]]

==Print statements==
Print statements help to display output on console. 
{{#ev:youtube|https://youtu.be/gECkqaOwyt0|250|right}}

===Syntax===
&lt;pre&gt;print()&lt;/pre&gt;

===How to print a message?===
In order to print a message in Python, write &lt;pre&gt;print(&quot;message&quot;)&lt;/pre&gt;
Single, double, triple quote can be used print()

'''Example:'''

'''Single Quote'''
&lt;pre&gt;
print('Hello')  
Output: Hello
&lt;/pre&gt;
'''Double Quote'''
&lt;pre&gt;
print(&quot;Hello&quot;)  
Output: Hello
&lt;/pre&gt;
'''Quote within quote'''
&lt;pre&gt;print('Is &quot;Ram&quot; a good boy?')  
Output: Is &quot;Ram&quot; a good boy?&lt;/pre&gt;

[[#Top]]

==Escape sequences with strings==

We can use escape sequence within strings to make output more presentable.

'''\n'''  : It will move to next line.

'''\t'''  : It will add tab space(5space)

'''\a'''  : It will play system sound once.

'''Example:'''

&lt;pre&gt;print(&quot;Hi, \n How are you?&quot;)&lt;/pre&gt;
&lt;pre&gt;
Output: 

Hi,

How are you?
&lt;/pre&gt;
&lt;pre&gt;print(&quot;Hi, \t How are you?&quot;)&lt;/pre&gt;

Output: 

Hi, &lt;5 spaces&gt; How are you?

[[File:Escape_Sequence.jpg]]

==Variables==
[[#Top]]
&lt;pre&gt;
Variables are used to store some values. Values can be strings, integers or decimal values.  

Variable Name Rules:
1. Variable name should start with letter or underscore. Variable name cant start with number.
Example:
&amp;#10004; Valid: JOC, WIKI, JOC_WIKI, _JOC
&amp;#10008; Invalid: 1JOC, 123WIKI, 0_WIKI

2. Remaining letter other then first one can contain number, underscore.
Example:
JOC1234, WIKI012_1332

3. Variable names are case sensitivities.
Example:
JOC, jOC, joC all are different variables. 

&lt;/pre&gt;
{{#ev:youtube|https://youtu.be/60iAXH1sm-Y|250|right}}

===How to print a variable?===
In order to print the value of a variable in python, first initialize the variable and then call it where ever you wanna use it. 
&lt;pre&gt;print(variable_name)&lt;/pre&gt;

&lt;pre&gt;For example :
x=2                # x is viable here
print(x)           # calling variable x with print function

a = &quot;JOC&quot;          # a is variable here
b = &quot;_WIKI&quot;        # b is variable here
c = a + b          # c is variable here which will provide addition of variable a and b
&lt;/pre&gt;

===Some facts about Variables===
* If you want to print variable name with a message, you can use , operator. For example : I want to print Hello Simran and Simran has been stored in a variable called ''name''.
  name=&quot;Simran&quot;
  print(&quot;Hello&quot;,name)
* If you change the value of a variable, it will store the latest value. For example :
  name=&quot;Simran&quot;
  name=&quot;Amit&quot;
  If you will execute the command ''print(name)'', Amit will be displayed.
* You can perform operations like addition, subtraction etc only on integral variables.

===Variables Types and Conversion===
&lt;pre&gt;Variable can be decimal, integer and decimal. And they can be inter covered with the help of conversion functions.

Example:
JOC = 5           Save in Memory as 5       # We have variable with name JOC having value 5 here.
JOC = int(5)      Save in Memory as 5       # Here Variable JOC holding integer value of 5. 
JOC = float(5)     Save in Memory as 5.0     # Here variable JOC holding float value of 5
JOC = str(5)      Save in Memory as &quot;5&quot;     # Here variable JOC holding string value of 5 or We can say 5 will be treated as string here.
JOC = complex(5)  Save in Memory as (5+0j)  # Here variable JOC holding complex value of 5.
JOC = oct(5)      Save in Memory as 0o5     # Here variable JOC holding octal representation of 5.
JOC = hex(5)      Save in Memory as 0x5     # Here variable JOC holding hexadecimal representation of 5

There are many more function available in Python. You can convert variable as per your requirement.
&lt;/pre&gt;


&lt;h1 style='color:black;font-family:Calibri;font-size:14.0pt;font-weight:800;
font-style:normal'&gt;Conversion Table with Eample&lt;/h1&gt;

&lt;table border=0 cellpadding=0 cellspacing=0 width=656 style='border-collapse:
 collapse;table-layout:fixed;width:492pt'&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6624497 width=63 style='height:15.0pt;width:47pt'&gt;Serial
  No&lt;/td&gt;
  &lt;td class=xl6724497 width=77 style='border-left:none;width:58pt'&gt;Function&lt;/td&gt;
  &lt;td class=xl6724497 width=303 style='border-left:none;width:227pt'&gt;Description&lt;/td&gt;
  &lt;td class=xl6724497 width=162 style='border-left:none;width:122pt'&gt;Example&lt;/td&gt;
  &lt;td class=xl6824497 width=51 style='border-left:none;width:38pt'&gt;Output&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;1&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;int(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to an
  integer.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10.12;
  print(int(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;2&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;long(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a&lt;span
  style='mso-spacerun:yes'&gt;  &lt;/span&gt;to a long integer&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10.12;
  print(long(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;3&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;float(a)&lt;/td&gt;
  &lt;td class=xl6524497 width=303 style='border-top:none;border-left:none;
  width:227pt'&gt;Converts a to a floating-point number.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 101.23;
  print(float(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;101.23&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;4&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;complex(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to a
  complex number.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print(complex(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10+0j&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;5&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;str(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to
  string.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print(str(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;6&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;repr(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts object
  a to an expression string.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print(repr(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;7&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;tuple(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to
  tuple.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print((a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;8&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;list(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to
  list.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print([a])&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;[10]&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;9&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;set(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to
  set.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a =
  set(&amp;quot;10&amp;quot;); print(a)&lt;/td&gt;
  &lt;td class=xl7124497 width=51 style='border-top:none;border-left:none;
  width:38pt'&gt;{'1', '0'}&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;10&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;dict(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to
  dictonary&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = dict(a=10);
  print(a)&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;{'a': 10}&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;11&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;chr(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts an
  integer to a character.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 97;
  print(chr(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;a&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;12&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;ord(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a
  single character to its integer value.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a =
  &amp;quot;J&amp;quot;; print(ord(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;74&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;13&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;hex(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts an
  integer to a hexadecimal string.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print(hex(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;0xa&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=21 style='height:15.75pt'&gt;
  &lt;td height=21 class=xl7224497 style='height:15.75pt;border-top:none'&gt;14&lt;/td&gt;
  &lt;td class=xl7324497 style='border-top:none;border-left:none'&gt;oct(a)&lt;/td&gt;
  &lt;td class=xl7324497 style='border-top:none;border-left:none'&gt;Converts an
  integer to an octal string.&lt;/td&gt;
  &lt;td class=xl7324497 style='border-top:none;border-left:none'&gt;a = 10;
  print(oct(a))&lt;/td&gt;
  &lt;td class=xl7424497 style='border-top:none;border-left:none'&gt;0o12&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
  &lt;tr height=0 style='display:none'&gt;
  &lt;td width=63 style='width:47pt'&gt;&lt;/td&gt;
  &lt;td width=77 style='width:58pt'&gt;&lt;/td&gt;
  &lt;td width=303 style='width:227pt'&gt;&lt;/td&gt;
  &lt;td width=162 style='width:122pt'&gt;&lt;/td&gt;
  &lt;td width=51 style='width:38pt'&gt;&lt;/td&gt;
 &lt;/tr&gt;
&lt;/table&gt;

==How to execute couple of instructions on console?==
You can execute couple of instructions on console using ;. Write Statement 1;Statement 2;......and then press ''Enter''.
{{#ev:youtube|https://youtu.be/CYQCYvLE22Y|250|right}}









==How to take input from the user?==
We can take input from the user using ''input'' function. For Example : You want the user to input variable ''x'', then write x=input(&quot;Enter the value of x&quot;) and execute. Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNkVLCxZw_jcgyS-bmrIVSP

And when the input you need is of data type other than string. You can do both the input function and data conversion in a single line.
For example:
Consider the program for letting in the patients
'''c=input(&quot;Enter (1/0)&quot;);d=int(c)'''

Instead of using it in two separate lines, combine it into a single line
'''c=int(input(&quot;Enter (1/0)&quot;))'''.

To get two inputs in same line with a space between them split() is used.

a,b=input().split(&quot; &quot;)
----
[[#Top]]

==If statement==
If statement is used to execute set of two contrary statements based on a condition. 

===Syntax===
If (Condition):
    Statement 1
else:
    Statement 2

If 'Condition' is true then 'Statement 1' will be executed otherwise 'Statement 2' will be executed.

Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNhHmg3SkK1uiutigcAbH9K

==Loops==
[[#Top]]&lt;br&gt;
Loops in a programming languages are used to execute set of repetitive statements. For loop and while loop are used extensively to execute a set of looping instructions.

=== For loop Syntax ===
&lt;pre&gt;
for i in range(10): 
    Statement
&lt;/pre&gt;
range(10) indicate that values 0 to 9 will be assigned to the variable i and for each value of i the Statement will be executed, e.g.
&lt;pre&gt;
for i in range(10): 
    print(i)
&lt;/pre&gt;
Output will be
&lt;pre&gt;
0
1
2
3
4
5
6
7
8
9
&lt;/pre&gt;

[[#Top]]

=== While loop Syntax ===
&lt;pre&gt;
intialisation

while(condition):
   Statement
   increment/decrement
&lt;/pre&gt;
e.g.
&lt;pre&gt;
#initialization
i=0
while(i&lt;10): 
    print(i)
    i=i+1
&lt;/pre&gt;
Output will be:
&lt;pre&gt;
0
1
2
3
4
5
6
7
8
9
&lt;/pre&gt;
Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNbl5jkVrrw1E5XSvm3GiCI

[[#Top]]

==Importance of Indentation in Python==
 &lt;p style=&quot;text-align:justify&quot;&gt;
Indentation is used to indicate to what block of statements belong. Indentation of blocks convey program structure in Python. Indentation in Python is used to refer a group/block of code/statements. In ''C++'' we use { and } (curly brackets) to group a set of statements. But in Python, there are no such brackets used. Instead of such brackets used in other programming languages, we use indentation in Python.&lt;/p&gt;

Use tabs, instead of spaces for ease of writing code.

Wrong indentation can lead to syntax error, or makes your output wrong for your logic e.g.

'''IndentationError: expected an indented block'''
&lt;pre&gt;
i=-1
if i&lt;0:
print(&quot;Test successful&quot;)#Wrong indentation &amp;#10006;
else:    
    print(&quot;Test failed&quot;)
#Output: IndentationError: expected an indented block

&lt;/pre&gt;

'''Properly Indented code:'''

&lt;pre&gt;
i=-1
if i&lt;0:
    print(&quot;Test successful&quot;)#Right indentation &amp;#9989;
else:    
    print(&quot;Test failed&quot;)
#Output:Test successful
&lt;/pre&gt;

'''Logic changed, so output changed, with improper indentation''', e.g.

&lt;h3&gt;Code : 1&lt;/h3&gt;
&lt;pre&gt;
sum=0
for i in range(5):
    for j in range(5):
        sum+=i
print(sum, end=&quot; &quot;)
#Output: 50
&lt;/pre&gt;
        
&lt;h3&gt;Code : 2&lt;/h3&gt;
&lt;pre&gt;
for i in range(5):
    for j in range(5):
        print(end=&quot; &quot;)
    sum+=i
print(sum, end=&quot; &quot;)
#Output:                          10
&lt;/pre&gt;
{{#ev:youtube|https://youtu.be/pmavoW419Yc|250|right}}&lt;br&gt;

[[#Top]]

==Spyder IDE Black Screen Solution==

----

 This issue is because of ''Help'' screen which is by default open. 
 We need to close it. So here's how you do it-


===Method 1:===

Step 1-    Try by closing current pane for that,  &quot;''press ctrl+shift+F4''&quot;  wait for few seconds things will appear on screen.

Step 2-    If it so than on menu bar go to ''view &gt; panes &gt; help'' unchecked &quot;''Help''&quot; option.

Step 3-    Make sure that &quot;''Help''&quot; under ''view &gt; panes'' is permanently unchecked. And ''Editor, Ipython console, Variable explorer''  are checked. 


===Method 2:===

Step 1-    Open spyder.

Step 2-   On that black screen randomly ''Left click'' on spyder &quot;''Menu bar''&quot; area you will get menu drop downs, You have to find Drop down with &quot;''Panes''&quot; option.

Step 3-   On &quot;''Panes''&quot; drop down unchecked the &quot;''Help''&quot;.

Step 4-   Wait for few seconds Spyder view will appear.

Step 5 -  Make sure that ''&quot;Help&quot;'' under view&gt;panes is permanently unchecked. And ''Editor, Ipython console, variable explorer'' are checked.


[[#Top]]</text>
      <sha1>5hmqkhmkigs0tbuc6vfa5p18pr78yn9</sha1>
    </revision>
    <revision>
      <id>4528</id>
      <parentid>4522</parentid>
      <timestamp>2018-10-22T19:11:14Z</timestamp>
      <contributor>
        <username>Ankita98</username>
        <id>2567</id>
      </contributor>
      <minor/>
      <comment>/* Variables */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="20501">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_2 Contributors of this page]
==Introduction to Python==
 &lt;p style=&quot;text-align:justify&quot;&gt;Python is a widely used programming language which allows programmers to write the program in fewer lines of code. It was designed by ''Guido van Rossum'' in 1991. Python uses an interpreter instead of compiler. Basically, the main difference between compiler and interpreter is that the compiler takes the code as 'whole' and compiles it. for example, in ''C'' language and on the other side in interpreter. For example: languages like Python. It interprets the written code 'line by line', and if somewhere error is found. It stops interpreting the code from there itself. Here, in our course we will be using ''Spyder IDE''. Spyder is an integrated development environment with editing options to assist the programmers in writing programs. Spyder IDE is divided into two panes, one is console and other one is where program is written.&lt;/p&gt;

&lt;p style=&quot;text-align:justify&quot;&gt;
Python works on different platforms (Windows, Mac, Linux, Raspberry Pi, etc).
Python has a simple syntax similar to the English language.
Python has syntax that allows developers to write programs with fewer lines than some other programming languages.
Python runs on an interpreter system, meaning that code can be executed as soon as it is written. This means that prototyping can be very quick.&lt;/p&gt;
Python can be treated in a procedural way, an object-orientated way or a functional way.

==Installing Anaconda==
[[#Top]]

This article is all about installing and troubleshooting Anaconda and Spyder on different platforms.

===Windows===
Step 1 -&gt; Download the installer from here 
 &lt;p style=&quot;text-align:justify&quot;&gt;
[https://www.anaconda.com/download/#windows Download Link]. Make sure that you download the version compatible to your operating system architecture. If you have a 64 bit OS then you can download either 64 bit of 32 bit, but if you have 32 bit OS then you should download the 32 bit version only.
&lt;/p&gt;
 &lt;p style=&quot;text-align:justify&quot;&gt;
Step 2 -&gt; Double click on the .exe file that you downloaded just now and follow the instructions. If you are not sure of the installation options then just choose the default.&lt;/p&gt;
 &lt;p style=&quot;text-align:justify&quot;&gt;
Step 3 -&gt; To test your installation, open cmd (go to Start -&gt; then type cmd in the search bar and hit enter). There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.&lt;/p&gt;

===Mac===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#macos Download Link].

Step 2 -&gt; Double click on the .pkg file that you just downloaded. If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

===Linux===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#linux Download Link].

Step 2 -&gt; Go to the folder where you downloaded the .sh file and type following command 

  '''bash Anaconda-latest-Linux-x86_64.sh'''

If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

==Troubleshooting Spyder==

[[#Top]]
 &lt;p style=&quot;text-align:justify&quot;&gt;
In most of the cases, it happens that Spyder is already running and you have initiated one more instance of it. Please make sure that spyder is not running already.
If you are on Linux OS, please launch spyder through terminal. Just open the terminal and type '''spyder''' and it will launch. When Spyder opens, make sure you see Anaconda with the version written on the Ipython console. If not, try changing the path of your anaconda. Follow these steps according to your OS version.&lt;/p&gt;

====Windows====
[https://stackoverflow.com/questions/44597662/conda-command-is-not-recognized-on-windows-10 Click Here]

====Linux====
[https://stackoverflow.com/questions/18675907/how-to-run-conda Click Here]

====Mac====
[https://stackoverflow.com/questions/35246386/conda-command-not-found Click Here]

In most of the cases relaunching Spyder works.
A more general Troubleshoot is present [https://github.com/spyder-ide/spyder/wiki/Troubleshooting-Guide-and-FAQ Here]

==How to run a program in Spyder IDE?==
Go to Run on the menu bar. Click Run-&gt;Run.

[[#Top]]

==Print statements==
Print statements help to display output on console. 
{{#ev:youtube|https://youtu.be/gECkqaOwyt0|250|right}}

===Syntax===
&lt;pre&gt;print()&lt;/pre&gt;

===How to print a message?===
In order to print a message in Python, write &lt;pre&gt;print(&quot;message&quot;)&lt;/pre&gt;
Single, double, triple quote can be used print()

'''Example:'''

'''Single Quote'''
&lt;pre&gt;
print('Hello')  
Output: Hello
&lt;/pre&gt;
'''Double Quote'''
&lt;pre&gt;
print(&quot;Hello&quot;)  
Output: Hello
&lt;/pre&gt;
'''Quote within quote'''
&lt;pre&gt;print('Is &quot;Ram&quot; a good boy?')  
Output: Is &quot;Ram&quot; a good boy?&lt;/pre&gt;

[[#Top]]

==Escape sequences with strings==

We can use escape sequence within strings to make output more presentable.

'''\n'''  : It will move to next line.

'''\t'''  : It will add tab space(5space)

'''\a'''  : It will play system sound once.

'''Example:'''

&lt;pre&gt;print(&quot;Hi, \n How are you?&quot;)&lt;/pre&gt;
&lt;pre&gt;
Output: 

Hi,

How are you?
&lt;/pre&gt;
&lt;pre&gt;print(&quot;Hi, \t How are you?&quot;)&lt;/pre&gt;

Output: 

Hi, &lt;5 spaces&gt; How are you?

[[File:Escape_Sequence.jpg]]

==Variables==
[[#Top]]
&lt;pre&gt;
Variables are used to store some values. Values can be strings, integers or decimal values.  

Variable Name Rules:
1. Variable name should start with letter or underscore. Variable name cant start with number.
Example:
&amp;#10004; Valid: JOC, WIKI, JOC_WIKI, _JOC
&amp;#10008; Invalid: 1JOC, 123WIKI, 0_WIKI

2. Remaining letters other then the first one can contain number, underscore.
Example:
JOC1234, WIKI012_1332

3. Variable names are case-sensitive.
Example:
JOC, jOC, joC all are different variables. 

&lt;/pre&gt;
{{#ev:youtube|https://youtu.be/60iAXH1sm-Y|250|right}}

===How to print a variable?===
In order to print the value of a variable in python, first initialize the variable and then call it where ever you wanna use it. 
&lt;pre&gt;print(variable_name)&lt;/pre&gt;

&lt;pre&gt;For example :
x=2                # x is viable here
print(x)           # calling variable x with print function

a = &quot;JOC&quot;          # a is variable here
b = &quot;_WIKI&quot;        # b is variable here
c = a + b          # c is variable here which will provide addition of variable a and b
&lt;/pre&gt;

===Some facts about Variables===
* If you want to print variable name with a message, you can use , operator. For example : I want to print Hello Simran and Simran has been stored in a variable called ''name''.
  name=&quot;Simran&quot;
  print(&quot;Hello&quot;,name)
* If you change the value of a variable, it will store the latest value. For example :
  name=&quot;Simran&quot;
  name=&quot;Amit&quot;
  If you will execute the command ''print(name)'', Amit will be displayed.
* You can perform operations like addition, subtraction etc only on integral variables.

===Variables Types and Conversion===
&lt;pre&gt;Variable can be decimal, integer and decimal. And they can be inter covered with the help of conversion functions.

Example:
JOC = 5           Save in Memory as 5       # We have variable with name JOC having value 5 here.
JOC = int(5)      Save in Memory as 5       # Here Variable JOC holding integer value of 5. 
JOC = float(5)     Save in Memory as 5.0     # Here variable JOC holding float value of 5
JOC = str(5)      Save in Memory as &quot;5&quot;     # Here variable JOC holding string value of 5 or We can say 5 will be treated as string here.
JOC = complex(5)  Save in Memory as (5+0j)  # Here variable JOC holding complex value of 5.
JOC = oct(5)      Save in Memory as 0o5     # Here variable JOC holding octal representation of 5.
JOC = hex(5)      Save in Memory as 0x5     # Here variable JOC holding hexadecimal representation of 5

There are many more function available in Python. You can convert variable as per your requirement.
&lt;/pre&gt;


&lt;h1 style='color:black;font-family:Calibri;font-size:14.0pt;font-weight:800;
font-style:normal'&gt;Conversion Table with Eample&lt;/h1&gt;

&lt;table border=0 cellpadding=0 cellspacing=0 width=656 style='border-collapse:
 collapse;table-layout:fixed;width:492pt'&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6624497 width=63 style='height:15.0pt;width:47pt'&gt;Serial
  No&lt;/td&gt;
  &lt;td class=xl6724497 width=77 style='border-left:none;width:58pt'&gt;Function&lt;/td&gt;
  &lt;td class=xl6724497 width=303 style='border-left:none;width:227pt'&gt;Description&lt;/td&gt;
  &lt;td class=xl6724497 width=162 style='border-left:none;width:122pt'&gt;Example&lt;/td&gt;
  &lt;td class=xl6824497 width=51 style='border-left:none;width:38pt'&gt;Output&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;1&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;int(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to an
  integer.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10.12;
  print(int(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;2&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;long(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a&lt;span
  style='mso-spacerun:yes'&gt;  &lt;/span&gt;to a long integer&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10.12;
  print(long(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;3&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;float(a)&lt;/td&gt;
  &lt;td class=xl6524497 width=303 style='border-top:none;border-left:none;
  width:227pt'&gt;Converts a to a floating-point number.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 101.23;
  print(float(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;101.23&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;4&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;complex(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to a
  complex number.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print(complex(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10+0j&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;5&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;str(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to
  string.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print(str(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;6&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;repr(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts object
  a to an expression string.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print(repr(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;7&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;tuple(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to
  tuple.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print((a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;8&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;list(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to
  list.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print([a])&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;[10]&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;9&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;set(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to
  set.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a =
  set(&amp;quot;10&amp;quot;); print(a)&lt;/td&gt;
  &lt;td class=xl7124497 width=51 style='border-top:none;border-left:none;
  width:38pt'&gt;{'1', '0'}&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;10&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;dict(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to
  dictonary&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = dict(a=10);
  print(a)&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;{'a': 10}&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;11&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;chr(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts an
  integer to a character.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 97;
  print(chr(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;a&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;12&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;ord(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a
  single character to its integer value.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a =
  &amp;quot;J&amp;quot;; print(ord(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;74&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;13&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;hex(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts an
  integer to a hexadecimal string.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print(hex(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;0xa&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=21 style='height:15.75pt'&gt;
  &lt;td height=21 class=xl7224497 style='height:15.75pt;border-top:none'&gt;14&lt;/td&gt;
  &lt;td class=xl7324497 style='border-top:none;border-left:none'&gt;oct(a)&lt;/td&gt;
  &lt;td class=xl7324497 style='border-top:none;border-left:none'&gt;Converts an
  integer to an octal string.&lt;/td&gt;
  &lt;td class=xl7324497 style='border-top:none;border-left:none'&gt;a = 10;
  print(oct(a))&lt;/td&gt;
  &lt;td class=xl7424497 style='border-top:none;border-left:none'&gt;0o12&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
  &lt;tr height=0 style='display:none'&gt;
  &lt;td width=63 style='width:47pt'&gt;&lt;/td&gt;
  &lt;td width=77 style='width:58pt'&gt;&lt;/td&gt;
  &lt;td width=303 style='width:227pt'&gt;&lt;/td&gt;
  &lt;td width=162 style='width:122pt'&gt;&lt;/td&gt;
  &lt;td width=51 style='width:38pt'&gt;&lt;/td&gt;
 &lt;/tr&gt;
&lt;/table&gt;

==How to execute couple of instructions on console?==
You can execute couple of instructions on console using ;. Write Statement 1;Statement 2;......and then press ''Enter''.
{{#ev:youtube|https://youtu.be/CYQCYvLE22Y|250|right}}









==How to take input from the user?==
We can take input from the user using ''input'' function. For Example : You want the user to input variable ''x'', then write x=input(&quot;Enter the value of x&quot;) and execute. Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNkVLCxZw_jcgyS-bmrIVSP

And when the input you need is of data type other than string. You can do both the input function and data conversion in a single line.
For example:
Consider the program for letting in the patients
'''c=input(&quot;Enter (1/0)&quot;);d=int(c)'''

Instead of using it in two separate lines, combine it into a single line
'''c=int(input(&quot;Enter (1/0)&quot;))'''.

To get two inputs in same line with a space between them split() is used.

a,b=input().split(&quot; &quot;)
----
[[#Top]]

==If statement==
If statement is used to execute set of two contrary statements based on a condition. 

===Syntax===
If (Condition):
    Statement 1
else:
    Statement 2

If 'Condition' is true then 'Statement 1' will be executed otherwise 'Statement 2' will be executed.

Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNhHmg3SkK1uiutigcAbH9K

==Loops==
[[#Top]]&lt;br&gt;
Loops in a programming languages are used to execute set of repetitive statements. For loop and while loop are used extensively to execute a set of looping instructions.

=== For loop Syntax ===
&lt;pre&gt;
for i in range(10): 
    Statement
&lt;/pre&gt;
range(10) indicate that values 0 to 9 will be assigned to the variable i and for each value of i the Statement will be executed, e.g.
&lt;pre&gt;
for i in range(10): 
    print(i)
&lt;/pre&gt;
Output will be
&lt;pre&gt;
0
1
2
3
4
5
6
7
8
9
&lt;/pre&gt;

[[#Top]]

=== While loop Syntax ===
&lt;pre&gt;
intialisation

while(condition):
   Statement
   increment/decrement
&lt;/pre&gt;
e.g.
&lt;pre&gt;
#initialization
i=0
while(i&lt;10): 
    print(i)
    i=i+1
&lt;/pre&gt;
Output will be:
&lt;pre&gt;
0
1
2
3
4
5
6
7
8
9
&lt;/pre&gt;
Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNbl5jkVrrw1E5XSvm3GiCI

[[#Top]]

==Importance of Indentation in Python==
 &lt;p style=&quot;text-align:justify&quot;&gt;
Indentation is used to indicate to what block of statements belong. Indentation of blocks convey program structure in Python. Indentation in Python is used to refer a group/block of code/statements. In ''C++'' we use { and } (curly brackets) to group a set of statements. But in Python, there are no such brackets used. Instead of such brackets used in other programming languages, we use indentation in Python.&lt;/p&gt;

Use tabs, instead of spaces for ease of writing code.

Wrong indentation can lead to syntax error, or makes your output wrong for your logic e.g.

'''IndentationError: expected an indented block'''
&lt;pre&gt;
i=-1
if i&lt;0:
print(&quot;Test successful&quot;)#Wrong indentation &amp;#10006;
else:    
    print(&quot;Test failed&quot;)
#Output: IndentationError: expected an indented block

&lt;/pre&gt;

'''Properly Indented code:'''

&lt;pre&gt;
i=-1
if i&lt;0:
    print(&quot;Test successful&quot;)#Right indentation &amp;#9989;
else:    
    print(&quot;Test failed&quot;)
#Output:Test successful
&lt;/pre&gt;

'''Logic changed, so output changed, with improper indentation''', e.g.

&lt;h3&gt;Code : 1&lt;/h3&gt;
&lt;pre&gt;
sum=0
for i in range(5):
    for j in range(5):
        sum+=i
print(sum, end=&quot; &quot;)
#Output: 50
&lt;/pre&gt;
        
&lt;h3&gt;Code : 2&lt;/h3&gt;
&lt;pre&gt;
for i in range(5):
    for j in range(5):
        print(end=&quot; &quot;)
    sum+=i
print(sum, end=&quot; &quot;)
#Output:                          10
&lt;/pre&gt;
{{#ev:youtube|https://youtu.be/pmavoW419Yc|250|right}}&lt;br&gt;

[[#Top]]

==Spyder IDE Black Screen Solution==

----

 This issue is because of ''Help'' screen which is by default open. 
 We need to close it. So here's how you do it-


===Method 1:===

Step 1-    Try by closing current pane for that,  &quot;''press ctrl+shift+F4''&quot;  wait for few seconds things will appear on screen.

Step 2-    If it so than on menu bar go to ''view &gt; panes &gt; help'' unchecked &quot;''Help''&quot; option.

Step 3-    Make sure that &quot;''Help''&quot; under ''view &gt; panes'' is permanently unchecked. And ''Editor, Ipython console, Variable explorer''  are checked. 


===Method 2:===

Step 1-    Open spyder.

Step 2-   On that black screen randomly ''Left click'' on spyder &quot;''Menu bar''&quot; area you will get menu drop downs, You have to find Drop down with &quot;''Panes''&quot; option.

Step 3-   On &quot;''Panes''&quot; drop down unchecked the &quot;''Help''&quot;.

Step 4-   Wait for few seconds Spyder view will appear.

Step 5 -  Make sure that ''&quot;Help&quot;'' under view&gt;panes is permanently unchecked. And ''Editor, Ipython console, variable explorer'' are checked.


[[#Top]]</text>
      <sha1>th4bxznu86vm4xk307q576rnvotplt9</sha1>
    </revision>
    <revision>
      <id>4529</id>
      <parentid>4528</parentid>
      <timestamp>2018-10-22T19:13:51Z</timestamp>
      <contributor>
        <username>Ankita98</username>
        <id>2567</id>
      </contributor>
      <minor/>
      <comment>/* Variables Types and Conversion */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="20502">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_2 Contributors of this page]
==Introduction to Python==
 &lt;p style=&quot;text-align:justify&quot;&gt;Python is a widely used programming language which allows programmers to write the program in fewer lines of code. It was designed by ''Guido van Rossum'' in 1991. Python uses an interpreter instead of compiler. Basically, the main difference between compiler and interpreter is that the compiler takes the code as 'whole' and compiles it. for example, in ''C'' language and on the other side in interpreter. For example: languages like Python. It interprets the written code 'line by line', and if somewhere error is found. It stops interpreting the code from there itself. Here, in our course we will be using ''Spyder IDE''. Spyder is an integrated development environment with editing options to assist the programmers in writing programs. Spyder IDE is divided into two panes, one is console and other one is where program is written.&lt;/p&gt;

&lt;p style=&quot;text-align:justify&quot;&gt;
Python works on different platforms (Windows, Mac, Linux, Raspberry Pi, etc).
Python has a simple syntax similar to the English language.
Python has syntax that allows developers to write programs with fewer lines than some other programming languages.
Python runs on an interpreter system, meaning that code can be executed as soon as it is written. This means that prototyping can be very quick.&lt;/p&gt;
Python can be treated in a procedural way, an object-orientated way or a functional way.

==Installing Anaconda==
[[#Top]]

This article is all about installing and troubleshooting Anaconda and Spyder on different platforms.

===Windows===
Step 1 -&gt; Download the installer from here 
 &lt;p style=&quot;text-align:justify&quot;&gt;
[https://www.anaconda.com/download/#windows Download Link]. Make sure that you download the version compatible to your operating system architecture. If you have a 64 bit OS then you can download either 64 bit of 32 bit, but if you have 32 bit OS then you should download the 32 bit version only.
&lt;/p&gt;
 &lt;p style=&quot;text-align:justify&quot;&gt;
Step 2 -&gt; Double click on the .exe file that you downloaded just now and follow the instructions. If you are not sure of the installation options then just choose the default.&lt;/p&gt;
 &lt;p style=&quot;text-align:justify&quot;&gt;
Step 3 -&gt; To test your installation, open cmd (go to Start -&gt; then type cmd in the search bar and hit enter). There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.&lt;/p&gt;

===Mac===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#macos Download Link].

Step 2 -&gt; Double click on the .pkg file that you just downloaded. If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

===Linux===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#linux Download Link].

Step 2 -&gt; Go to the folder where you downloaded the .sh file and type following command 

  '''bash Anaconda-latest-Linux-x86_64.sh'''

If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

==Troubleshooting Spyder==

[[#Top]]
 &lt;p style=&quot;text-align:justify&quot;&gt;
In most of the cases, it happens that Spyder is already running and you have initiated one more instance of it. Please make sure that spyder is not running already.
If you are on Linux OS, please launch spyder through terminal. Just open the terminal and type '''spyder''' and it will launch. When Spyder opens, make sure you see Anaconda with the version written on the Ipython console. If not, try changing the path of your anaconda. Follow these steps according to your OS version.&lt;/p&gt;

====Windows====
[https://stackoverflow.com/questions/44597662/conda-command-is-not-recognized-on-windows-10 Click Here]

====Linux====
[https://stackoverflow.com/questions/18675907/how-to-run-conda Click Here]

====Mac====
[https://stackoverflow.com/questions/35246386/conda-command-not-found Click Here]

In most of the cases relaunching Spyder works.
A more general Troubleshoot is present [https://github.com/spyder-ide/spyder/wiki/Troubleshooting-Guide-and-FAQ Here]

==How to run a program in Spyder IDE?==
Go to Run on the menu bar. Click Run-&gt;Run.

[[#Top]]

==Print statements==
Print statements help to display output on console. 
{{#ev:youtube|https://youtu.be/gECkqaOwyt0|250|right}}

===Syntax===
&lt;pre&gt;print()&lt;/pre&gt;

===How to print a message?===
In order to print a message in Python, write &lt;pre&gt;print(&quot;message&quot;)&lt;/pre&gt;
Single, double, triple quote can be used print()

'''Example:'''

'''Single Quote'''
&lt;pre&gt;
print('Hello')  
Output: Hello
&lt;/pre&gt;
'''Double Quote'''
&lt;pre&gt;
print(&quot;Hello&quot;)  
Output: Hello
&lt;/pre&gt;
'''Quote within quote'''
&lt;pre&gt;print('Is &quot;Ram&quot; a good boy?')  
Output: Is &quot;Ram&quot; a good boy?&lt;/pre&gt;

[[#Top]]

==Escape sequences with strings==

We can use escape sequence within strings to make output more presentable.

'''\n'''  : It will move to next line.

'''\t'''  : It will add tab space(5space)

'''\a'''  : It will play system sound once.

'''Example:'''

&lt;pre&gt;print(&quot;Hi, \n How are you?&quot;)&lt;/pre&gt;
&lt;pre&gt;
Output: 

Hi,

How are you?
&lt;/pre&gt;
&lt;pre&gt;print(&quot;Hi, \t How are you?&quot;)&lt;/pre&gt;

Output: 

Hi, &lt;5 spaces&gt; How are you?

[[File:Escape_Sequence.jpg]]

==Variables==
[[#Top]]
&lt;pre&gt;
Variables are used to store some values. Values can be strings, integers or decimal values.  

Variable Name Rules:
1. Variable name should start with letter or underscore. Variable name cant start with number.
Example:
&amp;#10004; Valid: JOC, WIKI, JOC_WIKI, _JOC
&amp;#10008; Invalid: 1JOC, 123WIKI, 0_WIKI

2. Remaining letters other then the first one can contain number, underscore.
Example:
JOC1234, WIKI012_1332

3. Variable names are case-sensitive.
Example:
JOC, jOC, joC all are different variables. 

&lt;/pre&gt;
{{#ev:youtube|https://youtu.be/60iAXH1sm-Y|250|right}}

===How to print a variable?===
In order to print the value of a variable in python, first initialize the variable and then call it where ever you wanna use it. 
&lt;pre&gt;print(variable_name)&lt;/pre&gt;

&lt;pre&gt;For example :
x=2                # x is viable here
print(x)           # calling variable x with print function

a = &quot;JOC&quot;          # a is variable here
b = &quot;_WIKI&quot;        # b is variable here
c = a + b          # c is variable here which will provide addition of variable a and b
&lt;/pre&gt;

===Some facts about Variables===
* If you want to print variable name with a message, you can use , operator. For example : I want to print Hello Simran and Simran has been stored in a variable called ''name''.
  name=&quot;Simran&quot;
  print(&quot;Hello&quot;,name)
* If you change the value of a variable, it will store the latest value. For example :
  name=&quot;Simran&quot;
  name=&quot;Amit&quot;
  If you will execute the command ''print(name)'', Amit will be displayed.
* You can perform operations like addition, subtraction etc only on integral variables.

===Variables Types and Conversion===
&lt;pre&gt;Variable can be decimal, integer and decimal. And they can be inter covered with the help of conversion functions.

Example:
JOC = 5           Save in Memory as 5       # We have variable with name JOC having value 5 here.
JOC = int(5)      Save in Memory as 5       # Here Variable JOC holding integer value of 5. 
JOC = float(5)     Save in Memory as 5.0     # Here variable JOC holding float value of 5
JOC = str(5)      Save in Memory as &quot;5&quot;     # Here variable JOC holding string value of 5 or We can say 5 will be treated as string here.
JOC = complex(5)  Save in Memory as (5+0j)  # Here variable JOC holding complex value of 5.
JOC = oct(5)      Save in Memory as 0o5     # Here variable JOC holding octal representation of 5.
JOC = hex(5)      Save in Memory as 0x5     # Here variable JOC holding hexadecimal representation of 5

There are many more function available in Python. You can convert variable as per your requirement.
&lt;/pre&gt;


&lt;h1 style='color:black;font-family:Calibri;font-size:14.0pt;font-weight:800;
font-style:normal'&gt;Conversion Table with Example&lt;/h1&gt;

&lt;table border=0 cellpadding=0 cellspacing=0 width=656 style='border-collapse:
 collapse;table-layout:fixed;width:492pt'&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6624497 width=63 style='height:15.0pt;width:47pt'&gt;Serial
  No&lt;/td&gt;
  &lt;td class=xl6724497 width=77 style='border-left:none;width:58pt'&gt;Function&lt;/td&gt;
  &lt;td class=xl6724497 width=303 style='border-left:none;width:227pt'&gt;Description&lt;/td&gt;
  &lt;td class=xl6724497 width=162 style='border-left:none;width:122pt'&gt;Example&lt;/td&gt;
  &lt;td class=xl6824497 width=51 style='border-left:none;width:38pt'&gt;Output&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;1&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;int(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to an
  integer.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10.12;
  print(int(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;2&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;long(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a&lt;span
  style='mso-spacerun:yes'&gt;  &lt;/span&gt;to a long integer&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10.12;
  print(long(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;3&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;float(a)&lt;/td&gt;
  &lt;td class=xl6524497 width=303 style='border-top:none;border-left:none;
  width:227pt'&gt;Converts a to a floating-point number.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 101.23;
  print(float(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;101.23&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;4&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;complex(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to a
  complex number.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print(complex(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10+0j&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;5&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;str(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to
  string.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print(str(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;6&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;repr(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts object
  a to an expression string.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print(repr(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;7&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;tuple(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to
  tuple.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print((a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;8&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;list(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to
  list.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print([a])&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;[10]&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;9&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;set(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to
  set.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a =
  set(&amp;quot;10&amp;quot;); print(a)&lt;/td&gt;
  &lt;td class=xl7124497 width=51 style='border-top:none;border-left:none;
  width:38pt'&gt;{'1', '0'}&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;10&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;dict(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to
  dictonary&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = dict(a=10);
  print(a)&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;{'a': 10}&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;11&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;chr(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts an
  integer to a character.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 97;
  print(chr(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;a&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;12&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;ord(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a
  single character to its integer value.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a =
  &amp;quot;J&amp;quot;; print(ord(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;74&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;13&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;hex(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts an
  integer to a hexadecimal string.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print(hex(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;0xa&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=21 style='height:15.75pt'&gt;
  &lt;td height=21 class=xl7224497 style='height:15.75pt;border-top:none'&gt;14&lt;/td&gt;
  &lt;td class=xl7324497 style='border-top:none;border-left:none'&gt;oct(a)&lt;/td&gt;
  &lt;td class=xl7324497 style='border-top:none;border-left:none'&gt;Converts an
  integer to an octal string.&lt;/td&gt;
  &lt;td class=xl7324497 style='border-top:none;border-left:none'&gt;a = 10;
  print(oct(a))&lt;/td&gt;
  &lt;td class=xl7424497 style='border-top:none;border-left:none'&gt;0o12&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
  &lt;tr height=0 style='display:none'&gt;
  &lt;td width=63 style='width:47pt'&gt;&lt;/td&gt;
  &lt;td width=77 style='width:58pt'&gt;&lt;/td&gt;
  &lt;td width=303 style='width:227pt'&gt;&lt;/td&gt;
  &lt;td width=162 style='width:122pt'&gt;&lt;/td&gt;
  &lt;td width=51 style='width:38pt'&gt;&lt;/td&gt;
 &lt;/tr&gt;
&lt;/table&gt;

==How to execute couple of instructions on console?==
You can execute couple of instructions on console using ;. Write Statement 1;Statement 2;......and then press ''Enter''.
{{#ev:youtube|https://youtu.be/CYQCYvLE22Y|250|right}}









==How to take input from the user?==
We can take input from the user using ''input'' function. For Example : You want the user to input variable ''x'', then write x=input(&quot;Enter the value of x&quot;) and execute. Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNkVLCxZw_jcgyS-bmrIVSP

And when the input you need is of data type other than string. You can do both the input function and data conversion in a single line.
For example:
Consider the program for letting in the patients
'''c=input(&quot;Enter (1/0)&quot;);d=int(c)'''

Instead of using it in two separate lines, combine it into a single line
'''c=int(input(&quot;Enter (1/0)&quot;))'''.

To get two inputs in same line with a space between them split() is used.

a,b=input().split(&quot; &quot;)
----
[[#Top]]

==If statement==
If statement is used to execute set of two contrary statements based on a condition. 

===Syntax===
If (Condition):
    Statement 1
else:
    Statement 2

If 'Condition' is true then 'Statement 1' will be executed otherwise 'Statement 2' will be executed.

Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNhHmg3SkK1uiutigcAbH9K

==Loops==
[[#Top]]&lt;br&gt;
Loops in a programming languages are used to execute set of repetitive statements. For loop and while loop are used extensively to execute a set of looping instructions.

=== For loop Syntax ===
&lt;pre&gt;
for i in range(10): 
    Statement
&lt;/pre&gt;
range(10) indicate that values 0 to 9 will be assigned to the variable i and for each value of i the Statement will be executed, e.g.
&lt;pre&gt;
for i in range(10): 
    print(i)
&lt;/pre&gt;
Output will be
&lt;pre&gt;
0
1
2
3
4
5
6
7
8
9
&lt;/pre&gt;

[[#Top]]

=== While loop Syntax ===
&lt;pre&gt;
intialisation

while(condition):
   Statement
   increment/decrement
&lt;/pre&gt;
e.g.
&lt;pre&gt;
#initialization
i=0
while(i&lt;10): 
    print(i)
    i=i+1
&lt;/pre&gt;
Output will be:
&lt;pre&gt;
0
1
2
3
4
5
6
7
8
9
&lt;/pre&gt;
Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNbl5jkVrrw1E5XSvm3GiCI

[[#Top]]

==Importance of Indentation in Python==
 &lt;p style=&quot;text-align:justify&quot;&gt;
Indentation is used to indicate to what block of statements belong. Indentation of blocks convey program structure in Python. Indentation in Python is used to refer a group/block of code/statements. In ''C++'' we use { and } (curly brackets) to group a set of statements. But in Python, there are no such brackets used. Instead of such brackets used in other programming languages, we use indentation in Python.&lt;/p&gt;

Use tabs, instead of spaces for ease of writing code.

Wrong indentation can lead to syntax error, or makes your output wrong for your logic e.g.

'''IndentationError: expected an indented block'''
&lt;pre&gt;
i=-1
if i&lt;0:
print(&quot;Test successful&quot;)#Wrong indentation &amp;#10006;
else:    
    print(&quot;Test failed&quot;)
#Output: IndentationError: expected an indented block

&lt;/pre&gt;

'''Properly Indented code:'''

&lt;pre&gt;
i=-1
if i&lt;0:
    print(&quot;Test successful&quot;)#Right indentation &amp;#9989;
else:    
    print(&quot;Test failed&quot;)
#Output:Test successful
&lt;/pre&gt;

'''Logic changed, so output changed, with improper indentation''', e.g.

&lt;h3&gt;Code : 1&lt;/h3&gt;
&lt;pre&gt;
sum=0
for i in range(5):
    for j in range(5):
        sum+=i
print(sum, end=&quot; &quot;)
#Output: 50
&lt;/pre&gt;
        
&lt;h3&gt;Code : 2&lt;/h3&gt;
&lt;pre&gt;
for i in range(5):
    for j in range(5):
        print(end=&quot; &quot;)
    sum+=i
print(sum, end=&quot; &quot;)
#Output:                          10
&lt;/pre&gt;
{{#ev:youtube|https://youtu.be/pmavoW419Yc|250|right}}&lt;br&gt;

[[#Top]]

==Spyder IDE Black Screen Solution==

----

 This issue is because of ''Help'' screen which is by default open. 
 We need to close it. So here's how you do it-


===Method 1:===

Step 1-    Try by closing current pane for that,  &quot;''press ctrl+shift+F4''&quot;  wait for few seconds things will appear on screen.

Step 2-    If it so than on menu bar go to ''view &gt; panes &gt; help'' unchecked &quot;''Help''&quot; option.

Step 3-    Make sure that &quot;''Help''&quot; under ''view &gt; panes'' is permanently unchecked. And ''Editor, Ipython console, Variable explorer''  are checked. 


===Method 2:===

Step 1-    Open spyder.

Step 2-   On that black screen randomly ''Left click'' on spyder &quot;''Menu bar''&quot; area you will get menu drop downs, You have to find Drop down with &quot;''Panes''&quot; option.

Step 3-   On &quot;''Panes''&quot; drop down unchecked the &quot;''Help''&quot;.

Step 4-   Wait for few seconds Spyder view will appear.

Step 5 -  Make sure that ''&quot;Help&quot;'' under view&gt;panes is permanently unchecked. And ''Editor, Ipython console, variable explorer'' are checked.


[[#Top]]</text>
      <sha1>hn2rzaa1f5hm1lhqoyjf76ep8r26xkh</sha1>
    </revision>
    <revision>
      <id>4558</id>
      <parentid>4529</parentid>
      <timestamp>2018-10-26T07:44:16Z</timestamp>
      <contributor>
        <username>Dungeonmaster</username>
        <id>2551</id>
      </contributor>
      <comment>/* Escape sequences with strings */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="20501">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_2 Contributors of this page]
==Introduction to Python==
 &lt;p style=&quot;text-align:justify&quot;&gt;Python is a widely used programming language which allows programmers to write the program in fewer lines of code. It was designed by ''Guido van Rossum'' in 1991. Python uses an interpreter instead of compiler. Basically, the main difference between compiler and interpreter is that the compiler takes the code as 'whole' and compiles it. for example, in ''C'' language and on the other side in interpreter. For example: languages like Python. It interprets the written code 'line by line', and if somewhere error is found. It stops interpreting the code from there itself. Here, in our course we will be using ''Spyder IDE''. Spyder is an integrated development environment with editing options to assist the programmers in writing programs. Spyder IDE is divided into two panes, one is console and other one is where program is written.&lt;/p&gt;

&lt;p style=&quot;text-align:justify&quot;&gt;
Python works on different platforms (Windows, Mac, Linux, Raspberry Pi, etc).
Python has a simple syntax similar to the English language.
Python has syntax that allows developers to write programs with fewer lines than some other programming languages.
Python runs on an interpreter system, meaning that code can be executed as soon as it is written. This means that prototyping can be very quick.&lt;/p&gt;
Python can be treated in a procedural way, an object-orientated way or a functional way.

==Installing Anaconda==
[[#Top]]

This article is all about installing and troubleshooting Anaconda and Spyder on different platforms.

===Windows===
Step 1 -&gt; Download the installer from here 
 &lt;p style=&quot;text-align:justify&quot;&gt;
[https://www.anaconda.com/download/#windows Download Link]. Make sure that you download the version compatible to your operating system architecture. If you have a 64 bit OS then you can download either 64 bit of 32 bit, but if you have 32 bit OS then you should download the 32 bit version only.
&lt;/p&gt;
 &lt;p style=&quot;text-align:justify&quot;&gt;
Step 2 -&gt; Double click on the .exe file that you downloaded just now and follow the instructions. If you are not sure of the installation options then just choose the default.&lt;/p&gt;
 &lt;p style=&quot;text-align:justify&quot;&gt;
Step 3 -&gt; To test your installation, open cmd (go to Start -&gt; then type cmd in the search bar and hit enter). There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.&lt;/p&gt;

===Mac===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#macos Download Link].

Step 2 -&gt; Double click on the .pkg file that you just downloaded. If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

===Linux===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#linux Download Link].

Step 2 -&gt; Go to the folder where you downloaded the .sh file and type following command 

  '''bash Anaconda-latest-Linux-x86_64.sh'''

If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

==Troubleshooting Spyder==

[[#Top]]
 &lt;p style=&quot;text-align:justify&quot;&gt;
In most of the cases, it happens that Spyder is already running and you have initiated one more instance of it. Please make sure that spyder is not running already.
If you are on Linux OS, please launch spyder through terminal. Just open the terminal and type '''spyder''' and it will launch. When Spyder opens, make sure you see Anaconda with the version written on the Ipython console. If not, try changing the path of your anaconda. Follow these steps according to your OS version.&lt;/p&gt;

====Windows====
[https://stackoverflow.com/questions/44597662/conda-command-is-not-recognized-on-windows-10 Click Here]

====Linux====
[https://stackoverflow.com/questions/18675907/how-to-run-conda Click Here]

====Mac====
[https://stackoverflow.com/questions/35246386/conda-command-not-found Click Here]

In most of the cases relaunching Spyder works.
A more general Troubleshoot is present [https://github.com/spyder-ide/spyder/wiki/Troubleshooting-Guide-and-FAQ Here]

==How to run a program in Spyder IDE?==
Go to Run on the menu bar. Click Run-&gt;Run.

[[#Top]]

==Print statements==
Print statements help to display output on console. 
{{#ev:youtube|https://youtu.be/gECkqaOwyt0|250|right}}

===Syntax===
&lt;pre&gt;print()&lt;/pre&gt;

===How to print a message?===
In order to print a message in Python, write &lt;pre&gt;print(&quot;message&quot;)&lt;/pre&gt;
Single, double, triple quote can be used print()

'''Example:'''

'''Single Quote'''
&lt;pre&gt;
print('Hello')  
Output: Hello
&lt;/pre&gt;
'''Double Quote'''
&lt;pre&gt;
print(&quot;Hello&quot;)  
Output: Hello
&lt;/pre&gt;
'''Quote within quote'''
&lt;pre&gt;print('Is &quot;Ram&quot; a good boy?')  
Output: Is &quot;Ram&quot; a good boy?&lt;/pre&gt;

[[#Top]]

==Escape sequences with strings==

We can use escape sequence within strings to make output more presentable.

'''\n'''  : It will move to next line.

'''\t'''  : It will add tab space(5space)

'''\a'''  : It will play system sound once.

'''Example:'''

&lt;pre&gt;print(&quot;Hi, \n How are you?&quot;)&lt;/pre&gt;
&lt;pre&gt;
Output: 

Hi,
How are you?
&lt;/pre&gt;
&lt;pre&gt;print(&quot;Hi, \t How are you?&quot;)&lt;/pre&gt;

Output: 

Hi, &lt;5 spaces&gt; How are you?

[[File:Escape_Sequence.jpg]]

==Variables==
[[#Top]]
&lt;pre&gt;
Variables are used to store some values. Values can be strings, integers or decimal values.  

Variable Name Rules:
1. Variable name should start with letter or underscore. Variable name cant start with number.
Example:
&amp;#10004; Valid: JOC, WIKI, JOC_WIKI, _JOC
&amp;#10008; Invalid: 1JOC, 123WIKI, 0_WIKI

2. Remaining letters other then the first one can contain number, underscore.
Example:
JOC1234, WIKI012_1332

3. Variable names are case-sensitive.
Example:
JOC, jOC, joC all are different variables. 

&lt;/pre&gt;
{{#ev:youtube|https://youtu.be/60iAXH1sm-Y|250|right}}

===How to print a variable?===
In order to print the value of a variable in python, first initialize the variable and then call it where ever you wanna use it. 
&lt;pre&gt;print(variable_name)&lt;/pre&gt;

&lt;pre&gt;For example :
x=2                # x is viable here
print(x)           # calling variable x with print function

a = &quot;JOC&quot;          # a is variable here
b = &quot;_WIKI&quot;        # b is variable here
c = a + b          # c is variable here which will provide addition of variable a and b
&lt;/pre&gt;

===Some facts about Variables===
* If you want to print variable name with a message, you can use , operator. For example : I want to print Hello Simran and Simran has been stored in a variable called ''name''.
  name=&quot;Simran&quot;
  print(&quot;Hello&quot;,name)
* If you change the value of a variable, it will store the latest value. For example :
  name=&quot;Simran&quot;
  name=&quot;Amit&quot;
  If you will execute the command ''print(name)'', Amit will be displayed.
* You can perform operations like addition, subtraction etc only on integral variables.

===Variables Types and Conversion===
&lt;pre&gt;Variable can be decimal, integer and decimal. And they can be inter covered with the help of conversion functions.

Example:
JOC = 5           Save in Memory as 5       # We have variable with name JOC having value 5 here.
JOC = int(5)      Save in Memory as 5       # Here Variable JOC holding integer value of 5. 
JOC = float(5)     Save in Memory as 5.0     # Here variable JOC holding float value of 5
JOC = str(5)      Save in Memory as &quot;5&quot;     # Here variable JOC holding string value of 5 or We can say 5 will be treated as string here.
JOC = complex(5)  Save in Memory as (5+0j)  # Here variable JOC holding complex value of 5.
JOC = oct(5)      Save in Memory as 0o5     # Here variable JOC holding octal representation of 5.
JOC = hex(5)      Save in Memory as 0x5     # Here variable JOC holding hexadecimal representation of 5

There are many more function available in Python. You can convert variable as per your requirement.
&lt;/pre&gt;


&lt;h1 style='color:black;font-family:Calibri;font-size:14.0pt;font-weight:800;
font-style:normal'&gt;Conversion Table with Example&lt;/h1&gt;

&lt;table border=0 cellpadding=0 cellspacing=0 width=656 style='border-collapse:
 collapse;table-layout:fixed;width:492pt'&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6624497 width=63 style='height:15.0pt;width:47pt'&gt;Serial
  No&lt;/td&gt;
  &lt;td class=xl6724497 width=77 style='border-left:none;width:58pt'&gt;Function&lt;/td&gt;
  &lt;td class=xl6724497 width=303 style='border-left:none;width:227pt'&gt;Description&lt;/td&gt;
  &lt;td class=xl6724497 width=162 style='border-left:none;width:122pt'&gt;Example&lt;/td&gt;
  &lt;td class=xl6824497 width=51 style='border-left:none;width:38pt'&gt;Output&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;1&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;int(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to an
  integer.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10.12;
  print(int(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;2&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;long(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a&lt;span
  style='mso-spacerun:yes'&gt;  &lt;/span&gt;to a long integer&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10.12;
  print(long(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;3&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;float(a)&lt;/td&gt;
  &lt;td class=xl6524497 width=303 style='border-top:none;border-left:none;
  width:227pt'&gt;Converts a to a floating-point number.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 101.23;
  print(float(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;101.23&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;4&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;complex(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to a
  complex number.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print(complex(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10+0j&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;5&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;str(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to
  string.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print(str(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;6&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;repr(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts object
  a to an expression string.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print(repr(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;7&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;tuple(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to
  tuple.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print((a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;8&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;list(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to
  list.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print([a])&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;[10]&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;9&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;set(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to
  set.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a =
  set(&amp;quot;10&amp;quot;); print(a)&lt;/td&gt;
  &lt;td class=xl7124497 width=51 style='border-top:none;border-left:none;
  width:38pt'&gt;{'1', '0'}&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;10&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;dict(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to
  dictonary&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = dict(a=10);
  print(a)&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;{'a': 10}&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;11&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;chr(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts an
  integer to a character.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 97;
  print(chr(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;a&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;12&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;ord(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a
  single character to its integer value.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a =
  &amp;quot;J&amp;quot;; print(ord(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;74&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;13&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;hex(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts an
  integer to a hexadecimal string.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print(hex(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;0xa&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=21 style='height:15.75pt'&gt;
  &lt;td height=21 class=xl7224497 style='height:15.75pt;border-top:none'&gt;14&lt;/td&gt;
  &lt;td class=xl7324497 style='border-top:none;border-left:none'&gt;oct(a)&lt;/td&gt;
  &lt;td class=xl7324497 style='border-top:none;border-left:none'&gt;Converts an
  integer to an octal string.&lt;/td&gt;
  &lt;td class=xl7324497 style='border-top:none;border-left:none'&gt;a = 10;
  print(oct(a))&lt;/td&gt;
  &lt;td class=xl7424497 style='border-top:none;border-left:none'&gt;0o12&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
  &lt;tr height=0 style='display:none'&gt;
  &lt;td width=63 style='width:47pt'&gt;&lt;/td&gt;
  &lt;td width=77 style='width:58pt'&gt;&lt;/td&gt;
  &lt;td width=303 style='width:227pt'&gt;&lt;/td&gt;
  &lt;td width=162 style='width:122pt'&gt;&lt;/td&gt;
  &lt;td width=51 style='width:38pt'&gt;&lt;/td&gt;
 &lt;/tr&gt;
&lt;/table&gt;

==How to execute couple of instructions on console?==
You can execute couple of instructions on console using ;. Write Statement 1;Statement 2;......and then press ''Enter''.
{{#ev:youtube|https://youtu.be/CYQCYvLE22Y|250|right}}









==How to take input from the user?==
We can take input from the user using ''input'' function. For Example : You want the user to input variable ''x'', then write x=input(&quot;Enter the value of x&quot;) and execute. Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNkVLCxZw_jcgyS-bmrIVSP

And when the input you need is of data type other than string. You can do both the input function and data conversion in a single line.
For example:
Consider the program for letting in the patients
'''c=input(&quot;Enter (1/0)&quot;);d=int(c)'''

Instead of using it in two separate lines, combine it into a single line
'''c=int(input(&quot;Enter (1/0)&quot;))'''.

To get two inputs in same line with a space between them split() is used.

a,b=input().split(&quot; &quot;)
----
[[#Top]]

==If statement==
If statement is used to execute set of two contrary statements based on a condition. 

===Syntax===
If (Condition):
    Statement 1
else:
    Statement 2

If 'Condition' is true then 'Statement 1' will be executed otherwise 'Statement 2' will be executed.

Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNhHmg3SkK1uiutigcAbH9K

==Loops==
[[#Top]]&lt;br&gt;
Loops in a programming languages are used to execute set of repetitive statements. For loop and while loop are used extensively to execute a set of looping instructions.

=== For loop Syntax ===
&lt;pre&gt;
for i in range(10): 
    Statement
&lt;/pre&gt;
range(10) indicate that values 0 to 9 will be assigned to the variable i and for each value of i the Statement will be executed, e.g.
&lt;pre&gt;
for i in range(10): 
    print(i)
&lt;/pre&gt;
Output will be
&lt;pre&gt;
0
1
2
3
4
5
6
7
8
9
&lt;/pre&gt;

[[#Top]]

=== While loop Syntax ===
&lt;pre&gt;
intialisation

while(condition):
   Statement
   increment/decrement
&lt;/pre&gt;
e.g.
&lt;pre&gt;
#initialization
i=0
while(i&lt;10): 
    print(i)
    i=i+1
&lt;/pre&gt;
Output will be:
&lt;pre&gt;
0
1
2
3
4
5
6
7
8
9
&lt;/pre&gt;
Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNbl5jkVrrw1E5XSvm3GiCI

[[#Top]]

==Importance of Indentation in Python==
 &lt;p style=&quot;text-align:justify&quot;&gt;
Indentation is used to indicate to what block of statements belong. Indentation of blocks convey program structure in Python. Indentation in Python is used to refer a group/block of code/statements. In ''C++'' we use { and } (curly brackets) to group a set of statements. But in Python, there are no such brackets used. Instead of such brackets used in other programming languages, we use indentation in Python.&lt;/p&gt;

Use tabs, instead of spaces for ease of writing code.

Wrong indentation can lead to syntax error, or makes your output wrong for your logic e.g.

'''IndentationError: expected an indented block'''
&lt;pre&gt;
i=-1
if i&lt;0:
print(&quot;Test successful&quot;)#Wrong indentation &amp;#10006;
else:    
    print(&quot;Test failed&quot;)
#Output: IndentationError: expected an indented block

&lt;/pre&gt;

'''Properly Indented code:'''

&lt;pre&gt;
i=-1
if i&lt;0:
    print(&quot;Test successful&quot;)#Right indentation &amp;#9989;
else:    
    print(&quot;Test failed&quot;)
#Output:Test successful
&lt;/pre&gt;

'''Logic changed, so output changed, with improper indentation''', e.g.

&lt;h3&gt;Code : 1&lt;/h3&gt;
&lt;pre&gt;
sum=0
for i in range(5):
    for j in range(5):
        sum+=i
print(sum, end=&quot; &quot;)
#Output: 50
&lt;/pre&gt;
        
&lt;h3&gt;Code : 2&lt;/h3&gt;
&lt;pre&gt;
for i in range(5):
    for j in range(5):
        print(end=&quot; &quot;)
    sum+=i
print(sum, end=&quot; &quot;)
#Output:                          10
&lt;/pre&gt;
{{#ev:youtube|https://youtu.be/pmavoW419Yc|250|right}}&lt;br&gt;

[[#Top]]

==Spyder IDE Black Screen Solution==

----

 This issue is because of ''Help'' screen which is by default open. 
 We need to close it. So here's how you do it-


===Method 1:===

Step 1-    Try by closing current pane for that,  &quot;''press ctrl+shift+F4''&quot;  wait for few seconds things will appear on screen.

Step 2-    If it so than on menu bar go to ''view &gt; panes &gt; help'' unchecked &quot;''Help''&quot; option.

Step 3-    Make sure that &quot;''Help''&quot; under ''view &gt; panes'' is permanently unchecked. And ''Editor, Ipython console, Variable explorer''  are checked. 


===Method 2:===

Step 1-    Open spyder.

Step 2-   On that black screen randomly ''Left click'' on spyder &quot;''Menu bar''&quot; area you will get menu drop downs, You have to find Drop down with &quot;''Panes''&quot; option.

Step 3-   On &quot;''Panes''&quot; drop down unchecked the &quot;''Help''&quot;.

Step 4-   Wait for few seconds Spyder view will appear.

Step 5 -  Make sure that ''&quot;Help&quot;'' under view&gt;panes is permanently unchecked. And ''Editor, Ipython console, variable explorer'' are checked.


[[#Top]]</text>
      <sha1>egamsvukegv34pbd3g79s48d72vc0hz</sha1>
    </revision>
    <revision>
      <id>4571</id>
      <parentid>4558</parentid>
      <timestamp>2018-10-27T04:29:45Z</timestamp>
      <contributor>
        <username>Balakrishna</username>
        <id>3073</id>
      </contributor>
      <comment>/* How to print a variable? */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="20503">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_2 Contributors of this page]
==Introduction to Python==
 &lt;p style=&quot;text-align:justify&quot;&gt;Python is a widely used programming language which allows programmers to write the program in fewer lines of code. It was designed by ''Guido van Rossum'' in 1991. Python uses an interpreter instead of compiler. Basically, the main difference between compiler and interpreter is that the compiler takes the code as 'whole' and compiles it. for example, in ''C'' language and on the other side in interpreter. For example: languages like Python. It interprets the written code 'line by line', and if somewhere error is found. It stops interpreting the code from there itself. Here, in our course we will be using ''Spyder IDE''. Spyder is an integrated development environment with editing options to assist the programmers in writing programs. Spyder IDE is divided into two panes, one is console and other one is where program is written.&lt;/p&gt;

&lt;p style=&quot;text-align:justify&quot;&gt;
Python works on different platforms (Windows, Mac, Linux, Raspberry Pi, etc).
Python has a simple syntax similar to the English language.
Python has syntax that allows developers to write programs with fewer lines than some other programming languages.
Python runs on an interpreter system, meaning that code can be executed as soon as it is written. This means that prototyping can be very quick.&lt;/p&gt;
Python can be treated in a procedural way, an object-orientated way or a functional way.

==Installing Anaconda==
[[#Top]]

This article is all about installing and troubleshooting Anaconda and Spyder on different platforms.

===Windows===
Step 1 -&gt; Download the installer from here 
 &lt;p style=&quot;text-align:justify&quot;&gt;
[https://www.anaconda.com/download/#windows Download Link]. Make sure that you download the version compatible to your operating system architecture. If you have a 64 bit OS then you can download either 64 bit of 32 bit, but if you have 32 bit OS then you should download the 32 bit version only.
&lt;/p&gt;
 &lt;p style=&quot;text-align:justify&quot;&gt;
Step 2 -&gt; Double click on the .exe file that you downloaded just now and follow the instructions. If you are not sure of the installation options then just choose the default.&lt;/p&gt;
 &lt;p style=&quot;text-align:justify&quot;&gt;
Step 3 -&gt; To test your installation, open cmd (go to Start -&gt; then type cmd in the search bar and hit enter). There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.&lt;/p&gt;

===Mac===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#macos Download Link].

Step 2 -&gt; Double click on the .pkg file that you just downloaded. If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

===Linux===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#linux Download Link].

Step 2 -&gt; Go to the folder where you downloaded the .sh file and type following command 

  '''bash Anaconda-latest-Linux-x86_64.sh'''

If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

==Troubleshooting Spyder==

[[#Top]]
 &lt;p style=&quot;text-align:justify&quot;&gt;
In most of the cases, it happens that Spyder is already running and you have initiated one more instance of it. Please make sure that spyder is not running already.
If you are on Linux OS, please launch spyder through terminal. Just open the terminal and type '''spyder''' and it will launch. When Spyder opens, make sure you see Anaconda with the version written on the Ipython console. If not, try changing the path of your anaconda. Follow these steps according to your OS version.&lt;/p&gt;

====Windows====
[https://stackoverflow.com/questions/44597662/conda-command-is-not-recognized-on-windows-10 Click Here]

====Linux====
[https://stackoverflow.com/questions/18675907/how-to-run-conda Click Here]

====Mac====
[https://stackoverflow.com/questions/35246386/conda-command-not-found Click Here]

In most of the cases relaunching Spyder works.
A more general Troubleshoot is present [https://github.com/spyder-ide/spyder/wiki/Troubleshooting-Guide-and-FAQ Here]

==How to run a program in Spyder IDE?==
Go to Run on the menu bar. Click Run-&gt;Run.

[[#Top]]

==Print statements==
Print statements help to display output on console. 
{{#ev:youtube|https://youtu.be/gECkqaOwyt0|250|right}}

===Syntax===
&lt;pre&gt;print()&lt;/pre&gt;

===How to print a message?===
In order to print a message in Python, write &lt;pre&gt;print(&quot;message&quot;)&lt;/pre&gt;
Single, double, triple quote can be used print()

'''Example:'''

'''Single Quote'''
&lt;pre&gt;
print('Hello')  
Output: Hello
&lt;/pre&gt;
'''Double Quote'''
&lt;pre&gt;
print(&quot;Hello&quot;)  
Output: Hello
&lt;/pre&gt;
'''Quote within quote'''
&lt;pre&gt;print('Is &quot;Ram&quot; a good boy?')  
Output: Is &quot;Ram&quot; a good boy?&lt;/pre&gt;

[[#Top]]

==Escape sequences with strings==

We can use escape sequence within strings to make output more presentable.

'''\n'''  : It will move to next line.

'''\t'''  : It will add tab space(5space)

'''\a'''  : It will play system sound once.

'''Example:'''

&lt;pre&gt;print(&quot;Hi, \n How are you?&quot;)&lt;/pre&gt;
&lt;pre&gt;
Output: 

Hi,
How are you?
&lt;/pre&gt;
&lt;pre&gt;print(&quot;Hi, \t How are you?&quot;)&lt;/pre&gt;

Output: 

Hi, &lt;5 spaces&gt; How are you?

[[File:Escape_Sequence.jpg]]

==Variables==
[[#Top]]
&lt;pre&gt;
Variables are used to store some values. Values can be strings, integers or decimal values.  

Variable Name Rules:
1. Variable name should start with letter or underscore. Variable name cant start with number.
Example:
&amp;#10004; Valid: JOC, WIKI, JOC_WIKI, _JOC
&amp;#10008; Invalid: 1JOC, 123WIKI, 0_WIKI

2. Remaining letters other then the first one can contain number, underscore.
Example:
JOC1234, WIKI012_1332

3. Variable names are case-sensitive.
Example:
JOC, jOC, joC all are different variables. 

&lt;/pre&gt;
{{#ev:youtube|https://youtu.be/60iAXH1sm-Y|250|right}}

===How to print a variable?===
In order to print the value of a variable in python, first initialize the variable and then call it where ever you wanna use it. 
&lt;pre&gt;print(variable_name)&lt;/pre&gt;

&lt;pre&gt;For example :
x=2                # x is variable here
print(x)           # calling variable x with print function

a = &quot;JOC&quot;          # a is variable here
b = &quot;_WIKI&quot;        # b is variable here
c = a + b          # c is variable here which will provide addition of variable a and b
&lt;/pre&gt;

===Some facts about Variables===
* If you want to print variable name with a message, you can use , operator. For example : I want to print Hello Simran and Simran has been stored in a variable called ''name''.
  name=&quot;Simran&quot;
  print(&quot;Hello&quot;,name)
* If you change the value of a variable, it will store the latest value. For example :
  name=&quot;Simran&quot;
  name=&quot;Amit&quot;
  If you will execute the command ''print(name)'', Amit will be displayed.
* You can perform operations like addition, subtraction etc only on integral variables.

===Variables Types and Conversion===
&lt;pre&gt;Variable can be decimal, integer and decimal. And they can be inter covered with the help of conversion functions.

Example:
JOC = 5           Save in Memory as 5       # We have variable with name JOC having value 5 here.
JOC = int(5)      Save in Memory as 5       # Here Variable JOC holding integer value of 5. 
JOC = float(5)     Save in Memory as 5.0     # Here variable JOC holding float value of 5
JOC = str(5)      Save in Memory as &quot;5&quot;     # Here variable JOC holding string value of 5 or We can say 5 will be treated as string here.
JOC = complex(5)  Save in Memory as (5+0j)  # Here variable JOC holding complex value of 5.
JOC = oct(5)      Save in Memory as 0o5     # Here variable JOC holding octal representation of 5.
JOC = hex(5)      Save in Memory as 0x5     # Here variable JOC holding hexadecimal representation of 5

There are many more function available in Python. You can convert variable as per your requirement.
&lt;/pre&gt;


&lt;h1 style='color:black;font-family:Calibri;font-size:14.0pt;font-weight:800;
font-style:normal'&gt;Conversion Table with Example&lt;/h1&gt;

&lt;table border=0 cellpadding=0 cellspacing=0 width=656 style='border-collapse:
 collapse;table-layout:fixed;width:492pt'&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6624497 width=63 style='height:15.0pt;width:47pt'&gt;Serial
  No&lt;/td&gt;
  &lt;td class=xl6724497 width=77 style='border-left:none;width:58pt'&gt;Function&lt;/td&gt;
  &lt;td class=xl6724497 width=303 style='border-left:none;width:227pt'&gt;Description&lt;/td&gt;
  &lt;td class=xl6724497 width=162 style='border-left:none;width:122pt'&gt;Example&lt;/td&gt;
  &lt;td class=xl6824497 width=51 style='border-left:none;width:38pt'&gt;Output&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;1&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;int(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to an
  integer.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10.12;
  print(int(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;2&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;long(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a&lt;span
  style='mso-spacerun:yes'&gt;  &lt;/span&gt;to a long integer&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10.12;
  print(long(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;3&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;float(a)&lt;/td&gt;
  &lt;td class=xl6524497 width=303 style='border-top:none;border-left:none;
  width:227pt'&gt;Converts a to a floating-point number.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 101.23;
  print(float(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;101.23&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;4&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;complex(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to a
  complex number.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print(complex(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10+0j&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;5&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;str(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to
  string.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print(str(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;6&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;repr(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts object
  a to an expression string.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print(repr(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;7&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;tuple(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to
  tuple.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print((a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;8&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;list(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to
  list.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print([a])&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;[10]&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;9&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;set(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to
  set.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a =
  set(&amp;quot;10&amp;quot;); print(a)&lt;/td&gt;
  &lt;td class=xl7124497 width=51 style='border-top:none;border-left:none;
  width:38pt'&gt;{'1', '0'}&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;10&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;dict(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to
  dictonary&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = dict(a=10);
  print(a)&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;{'a': 10}&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;11&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;chr(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts an
  integer to a character.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 97;
  print(chr(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;a&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;12&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;ord(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a
  single character to its integer value.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a =
  &amp;quot;J&amp;quot;; print(ord(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;74&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;13&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;hex(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts an
  integer to a hexadecimal string.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print(hex(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;0xa&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=21 style='height:15.75pt'&gt;
  &lt;td height=21 class=xl7224497 style='height:15.75pt;border-top:none'&gt;14&lt;/td&gt;
  &lt;td class=xl7324497 style='border-top:none;border-left:none'&gt;oct(a)&lt;/td&gt;
  &lt;td class=xl7324497 style='border-top:none;border-left:none'&gt;Converts an
  integer to an octal string.&lt;/td&gt;
  &lt;td class=xl7324497 style='border-top:none;border-left:none'&gt;a = 10;
  print(oct(a))&lt;/td&gt;
  &lt;td class=xl7424497 style='border-top:none;border-left:none'&gt;0o12&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
  &lt;tr height=0 style='display:none'&gt;
  &lt;td width=63 style='width:47pt'&gt;&lt;/td&gt;
  &lt;td width=77 style='width:58pt'&gt;&lt;/td&gt;
  &lt;td width=303 style='width:227pt'&gt;&lt;/td&gt;
  &lt;td width=162 style='width:122pt'&gt;&lt;/td&gt;
  &lt;td width=51 style='width:38pt'&gt;&lt;/td&gt;
 &lt;/tr&gt;
&lt;/table&gt;

==How to execute couple of instructions on console?==
You can execute couple of instructions on console using ;. Write Statement 1;Statement 2;......and then press ''Enter''.
{{#ev:youtube|https://youtu.be/CYQCYvLE22Y|250|right}}









==How to take input from the user?==
We can take input from the user using ''input'' function. For Example : You want the user to input variable ''x'', then write x=input(&quot;Enter the value of x&quot;) and execute. Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNkVLCxZw_jcgyS-bmrIVSP

And when the input you need is of data type other than string. You can do both the input function and data conversion in a single line.
For example:
Consider the program for letting in the patients
'''c=input(&quot;Enter (1/0)&quot;);d=int(c)'''

Instead of using it in two separate lines, combine it into a single line
'''c=int(input(&quot;Enter (1/0)&quot;))'''.

To get two inputs in same line with a space between them split() is used.

a,b=input().split(&quot; &quot;)
----
[[#Top]]

==If statement==
If statement is used to execute set of two contrary statements based on a condition. 

===Syntax===
If (Condition):
    Statement 1
else:
    Statement 2

If 'Condition' is true then 'Statement 1' will be executed otherwise 'Statement 2' will be executed.

Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNhHmg3SkK1uiutigcAbH9K

==Loops==
[[#Top]]&lt;br&gt;
Loops in a programming languages are used to execute set of repetitive statements. For loop and while loop are used extensively to execute a set of looping instructions.

=== For loop Syntax ===
&lt;pre&gt;
for i in range(10): 
    Statement
&lt;/pre&gt;
range(10) indicate that values 0 to 9 will be assigned to the variable i and for each value of i the Statement will be executed, e.g.
&lt;pre&gt;
for i in range(10): 
    print(i)
&lt;/pre&gt;
Output will be
&lt;pre&gt;
0
1
2
3
4
5
6
7
8
9
&lt;/pre&gt;

[[#Top]]

=== While loop Syntax ===
&lt;pre&gt;
intialisation

while(condition):
   Statement
   increment/decrement
&lt;/pre&gt;
e.g.
&lt;pre&gt;
#initialization
i=0
while(i&lt;10): 
    print(i)
    i=i+1
&lt;/pre&gt;
Output will be:
&lt;pre&gt;
0
1
2
3
4
5
6
7
8
9
&lt;/pre&gt;
Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNbl5jkVrrw1E5XSvm3GiCI

[[#Top]]

==Importance of Indentation in Python==
 &lt;p style=&quot;text-align:justify&quot;&gt;
Indentation is used to indicate to what block of statements belong. Indentation of blocks convey program structure in Python. Indentation in Python is used to refer a group/block of code/statements. In ''C++'' we use { and } (curly brackets) to group a set of statements. But in Python, there are no such brackets used. Instead of such brackets used in other programming languages, we use indentation in Python.&lt;/p&gt;

Use tabs, instead of spaces for ease of writing code.

Wrong indentation can lead to syntax error, or makes your output wrong for your logic e.g.

'''IndentationError: expected an indented block'''
&lt;pre&gt;
i=-1
if i&lt;0:
print(&quot;Test successful&quot;)#Wrong indentation &amp;#10006;
else:    
    print(&quot;Test failed&quot;)
#Output: IndentationError: expected an indented block

&lt;/pre&gt;

'''Properly Indented code:'''

&lt;pre&gt;
i=-1
if i&lt;0:
    print(&quot;Test successful&quot;)#Right indentation &amp;#9989;
else:    
    print(&quot;Test failed&quot;)
#Output:Test successful
&lt;/pre&gt;

'''Logic changed, so output changed, with improper indentation''', e.g.

&lt;h3&gt;Code : 1&lt;/h3&gt;
&lt;pre&gt;
sum=0
for i in range(5):
    for j in range(5):
        sum+=i
print(sum, end=&quot; &quot;)
#Output: 50
&lt;/pre&gt;
        
&lt;h3&gt;Code : 2&lt;/h3&gt;
&lt;pre&gt;
for i in range(5):
    for j in range(5):
        print(end=&quot; &quot;)
    sum+=i
print(sum, end=&quot; &quot;)
#Output:                          10
&lt;/pre&gt;
{{#ev:youtube|https://youtu.be/pmavoW419Yc|250|right}}&lt;br&gt;

[[#Top]]

==Spyder IDE Black Screen Solution==

----

 This issue is because of ''Help'' screen which is by default open. 
 We need to close it. So here's how you do it-


===Method 1:===

Step 1-    Try by closing current pane for that,  &quot;''press ctrl+shift+F4''&quot;  wait for few seconds things will appear on screen.

Step 2-    If it so than on menu bar go to ''view &gt; panes &gt; help'' unchecked &quot;''Help''&quot; option.

Step 3-    Make sure that &quot;''Help''&quot; under ''view &gt; panes'' is permanently unchecked. And ''Editor, Ipython console, Variable explorer''  are checked. 


===Method 2:===

Step 1-    Open spyder.

Step 2-   On that black screen randomly ''Left click'' on spyder &quot;''Menu bar''&quot; area you will get menu drop downs, You have to find Drop down with &quot;''Panes''&quot; option.

Step 3-   On &quot;''Panes''&quot; drop down unchecked the &quot;''Help''&quot;.

Step 4-   Wait for few seconds Spyder view will appear.

Step 5 -  Make sure that ''&quot;Help&quot;'' under view&gt;panes is permanently unchecked. And ''Editor, Ipython console, variable explorer'' are checked.


[[#Top]]</text>
      <sha1>h6blrjemob53ui8hk1iirqeiuiiamw4</sha1>
    </revision>
    <revision>
      <id>4572</id>
      <parentid>4571</parentid>
      <timestamp>2018-10-27T04:32:55Z</timestamp>
      <contributor>
        <username>Balakrishna</username>
        <id>3073</id>
      </contributor>
      <comment>/* Variables Types and Conversion */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="20499">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_2 Contributors of this page]
==Introduction to Python==
 &lt;p style=&quot;text-align:justify&quot;&gt;Python is a widely used programming language which allows programmers to write the program in fewer lines of code. It was designed by ''Guido van Rossum'' in 1991. Python uses an interpreter instead of compiler. Basically, the main difference between compiler and interpreter is that the compiler takes the code as 'whole' and compiles it. for example, in ''C'' language and on the other side in interpreter. For example: languages like Python. It interprets the written code 'line by line', and if somewhere error is found. It stops interpreting the code from there itself. Here, in our course we will be using ''Spyder IDE''. Spyder is an integrated development environment with editing options to assist the programmers in writing programs. Spyder IDE is divided into two panes, one is console and other one is where program is written.&lt;/p&gt;

&lt;p style=&quot;text-align:justify&quot;&gt;
Python works on different platforms (Windows, Mac, Linux, Raspberry Pi, etc).
Python has a simple syntax similar to the English language.
Python has syntax that allows developers to write programs with fewer lines than some other programming languages.
Python runs on an interpreter system, meaning that code can be executed as soon as it is written. This means that prototyping can be very quick.&lt;/p&gt;
Python can be treated in a procedural way, an object-orientated way or a functional way.

==Installing Anaconda==
[[#Top]]

This article is all about installing and troubleshooting Anaconda and Spyder on different platforms.

===Windows===
Step 1 -&gt; Download the installer from here 
 &lt;p style=&quot;text-align:justify&quot;&gt;
[https://www.anaconda.com/download/#windows Download Link]. Make sure that you download the version compatible to your operating system architecture. If you have a 64 bit OS then you can download either 64 bit of 32 bit, but if you have 32 bit OS then you should download the 32 bit version only.
&lt;/p&gt;
 &lt;p style=&quot;text-align:justify&quot;&gt;
Step 2 -&gt; Double click on the .exe file that you downloaded just now and follow the instructions. If you are not sure of the installation options then just choose the default.&lt;/p&gt;
 &lt;p style=&quot;text-align:justify&quot;&gt;
Step 3 -&gt; To test your installation, open cmd (go to Start -&gt; then type cmd in the search bar and hit enter). There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.&lt;/p&gt;

===Mac===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#macos Download Link].

Step 2 -&gt; Double click on the .pkg file that you just downloaded. If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

===Linux===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#linux Download Link].

Step 2 -&gt; Go to the folder where you downloaded the .sh file and type following command 

  '''bash Anaconda-latest-Linux-x86_64.sh'''

If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

==Troubleshooting Spyder==

[[#Top]]
 &lt;p style=&quot;text-align:justify&quot;&gt;
In most of the cases, it happens that Spyder is already running and you have initiated one more instance of it. Please make sure that spyder is not running already.
If you are on Linux OS, please launch spyder through terminal. Just open the terminal and type '''spyder''' and it will launch. When Spyder opens, make sure you see Anaconda with the version written on the Ipython console. If not, try changing the path of your anaconda. Follow these steps according to your OS version.&lt;/p&gt;

====Windows====
[https://stackoverflow.com/questions/44597662/conda-command-is-not-recognized-on-windows-10 Click Here]

====Linux====
[https://stackoverflow.com/questions/18675907/how-to-run-conda Click Here]

====Mac====
[https://stackoverflow.com/questions/35246386/conda-command-not-found Click Here]

In most of the cases relaunching Spyder works.
A more general Troubleshoot is present [https://github.com/spyder-ide/spyder/wiki/Troubleshooting-Guide-and-FAQ Here]

==How to run a program in Spyder IDE?==
Go to Run on the menu bar. Click Run-&gt;Run.

[[#Top]]

==Print statements==
Print statements help to display output on console. 
{{#ev:youtube|https://youtu.be/gECkqaOwyt0|250|right}}

===Syntax===
&lt;pre&gt;print()&lt;/pre&gt;

===How to print a message?===
In order to print a message in Python, write &lt;pre&gt;print(&quot;message&quot;)&lt;/pre&gt;
Single, double, triple quote can be used print()

'''Example:'''

'''Single Quote'''
&lt;pre&gt;
print('Hello')  
Output: Hello
&lt;/pre&gt;
'''Double Quote'''
&lt;pre&gt;
print(&quot;Hello&quot;)  
Output: Hello
&lt;/pre&gt;
'''Quote within quote'''
&lt;pre&gt;print('Is &quot;Ram&quot; a good boy?')  
Output: Is &quot;Ram&quot; a good boy?&lt;/pre&gt;

[[#Top]]

==Escape sequences with strings==

We can use escape sequence within strings to make output more presentable.

'''\n'''  : It will move to next line.

'''\t'''  : It will add tab space(5space)

'''\a'''  : It will play system sound once.

'''Example:'''

&lt;pre&gt;print(&quot;Hi, \n How are you?&quot;)&lt;/pre&gt;
&lt;pre&gt;
Output: 

Hi,
How are you?
&lt;/pre&gt;
&lt;pre&gt;print(&quot;Hi, \t How are you?&quot;)&lt;/pre&gt;

Output: 

Hi, &lt;5 spaces&gt; How are you?

[[File:Escape_Sequence.jpg]]

==Variables==
[[#Top]]
&lt;pre&gt;
Variables are used to store some values. Values can be strings, integers or decimal values.  

Variable Name Rules:
1. Variable name should start with letter or underscore. Variable name cant start with number.
Example:
&amp;#10004; Valid: JOC, WIKI, JOC_WIKI, _JOC
&amp;#10008; Invalid: 1JOC, 123WIKI, 0_WIKI

2. Remaining letters other then the first one can contain number, underscore.
Example:
JOC1234, WIKI012_1332

3. Variable names are case-sensitive.
Example:
JOC, jOC, joC all are different variables. 

&lt;/pre&gt;
{{#ev:youtube|https://youtu.be/60iAXH1sm-Y|250|right}}

===How to print a variable?===
In order to print the value of a variable in python, first initialize the variable and then call it where ever you wanna use it. 
&lt;pre&gt;print(variable_name)&lt;/pre&gt;

&lt;pre&gt;For example :
x=2                # x is variable here
print(x)           # calling variable x with print function

a = &quot;JOC&quot;          # a is variable here
b = &quot;_WIKI&quot;        # b is variable here
c = a + b          # c is variable here which will provide addition of variable a and b
&lt;/pre&gt;

===Some facts about Variables===
* If you want to print variable name with a message, you can use , operator. For example : I want to print Hello Simran and Simran has been stored in a variable called ''name''.
  name=&quot;Simran&quot;
  print(&quot;Hello&quot;,name)
* If you change the value of a variable, it will store the latest value. For example :
  name=&quot;Simran&quot;
  name=&quot;Amit&quot;
  If you will execute the command ''print(name)'', Amit will be displayed.
* You can perform operations like addition, subtraction etc only on integral variables.

===Variables Types and Conversion===
&lt;pre&gt;Variable can be decimal, integer and decimal. And they can be converted with the help of conversion functions.

Example:
JOC = 5           Save in Memory as 5       # We have variable with name JOC having value 5 here.
JOC = int(5)      Save in Memory as 5       # Here Variable JOC holding integer value of 5. 
JOC = float(5)     Save in Memory as 5.0     # Here variable JOC holding float value of 5
JOC = str(5)      Save in Memory as &quot;5&quot;     # Here variable JOC holding string value of 5 or We can say 5 will be treated as string here.
JOC = complex(5)  Save in Memory as (5+0j)  # Here variable JOC holding complex value of 5.
JOC = oct(5)      Save in Memory as 0o5     # Here variable JOC holding octal representation of 5.
JOC = hex(5)      Save in Memory as 0x5     # Here variable JOC holding hexadecimal representation of 5

There are many more function available in Python. You can convert variable as per your requirement.
&lt;/pre&gt;


&lt;h1 style='color:black;font-family:Calibri;font-size:14.0pt;font-weight:800;
font-style:normal'&gt;Conversion Table with Example&lt;/h1&gt;

&lt;table border=0 cellpadding=0 cellspacing=0 width=656 style='border-collapse:
 collapse;table-layout:fixed;width:492pt'&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6624497 width=63 style='height:15.0pt;width:47pt'&gt;Serial
  No&lt;/td&gt;
  &lt;td class=xl6724497 width=77 style='border-left:none;width:58pt'&gt;Function&lt;/td&gt;
  &lt;td class=xl6724497 width=303 style='border-left:none;width:227pt'&gt;Description&lt;/td&gt;
  &lt;td class=xl6724497 width=162 style='border-left:none;width:122pt'&gt;Example&lt;/td&gt;
  &lt;td class=xl6824497 width=51 style='border-left:none;width:38pt'&gt;Output&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;1&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;int(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to an
  integer.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10.12;
  print(int(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;2&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;long(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a&lt;span
  style='mso-spacerun:yes'&gt;  &lt;/span&gt;to a long integer&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10.12;
  print(long(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;3&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;float(a)&lt;/td&gt;
  &lt;td class=xl6524497 width=303 style='border-top:none;border-left:none;
  width:227pt'&gt;Converts a to a floating-point number.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 101.23;
  print(float(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;101.23&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;4&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;complex(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to a
  complex number.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print(complex(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10+0j&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;5&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;str(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to
  string.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print(str(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;6&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;repr(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts object
  a to an expression string.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print(repr(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;7&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;tuple(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to
  tuple.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print((a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;8&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;list(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to
  list.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print([a])&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;[10]&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;9&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;set(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to
  set.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a =
  set(&amp;quot;10&amp;quot;); print(a)&lt;/td&gt;
  &lt;td class=xl7124497 width=51 style='border-top:none;border-left:none;
  width:38pt'&gt;{'1', '0'}&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;10&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;dict(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to
  dictonary&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = dict(a=10);
  print(a)&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;{'a': 10}&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;11&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;chr(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts an
  integer to a character.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 97;
  print(chr(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;a&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;12&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;ord(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a
  single character to its integer value.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a =
  &amp;quot;J&amp;quot;; print(ord(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;74&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;13&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;hex(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts an
  integer to a hexadecimal string.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print(hex(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;0xa&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=21 style='height:15.75pt'&gt;
  &lt;td height=21 class=xl7224497 style='height:15.75pt;border-top:none'&gt;14&lt;/td&gt;
  &lt;td class=xl7324497 style='border-top:none;border-left:none'&gt;oct(a)&lt;/td&gt;
  &lt;td class=xl7324497 style='border-top:none;border-left:none'&gt;Converts an
  integer to an octal string.&lt;/td&gt;
  &lt;td class=xl7324497 style='border-top:none;border-left:none'&gt;a = 10;
  print(oct(a))&lt;/td&gt;
  &lt;td class=xl7424497 style='border-top:none;border-left:none'&gt;0o12&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
  &lt;tr height=0 style='display:none'&gt;
  &lt;td width=63 style='width:47pt'&gt;&lt;/td&gt;
  &lt;td width=77 style='width:58pt'&gt;&lt;/td&gt;
  &lt;td width=303 style='width:227pt'&gt;&lt;/td&gt;
  &lt;td width=162 style='width:122pt'&gt;&lt;/td&gt;
  &lt;td width=51 style='width:38pt'&gt;&lt;/td&gt;
 &lt;/tr&gt;
&lt;/table&gt;

==How to execute couple of instructions on console?==
You can execute couple of instructions on console using ;. Write Statement 1;Statement 2;......and then press ''Enter''.
{{#ev:youtube|https://youtu.be/CYQCYvLE22Y|250|right}}









==How to take input from the user?==
We can take input from the user using ''input'' function. For Example : You want the user to input variable ''x'', then write x=input(&quot;Enter the value of x&quot;) and execute. Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNkVLCxZw_jcgyS-bmrIVSP

And when the input you need is of data type other than string. You can do both the input function and data conversion in a single line.
For example:
Consider the program for letting in the patients
'''c=input(&quot;Enter (1/0)&quot;);d=int(c)'''

Instead of using it in two separate lines, combine it into a single line
'''c=int(input(&quot;Enter (1/0)&quot;))'''.

To get two inputs in same line with a space between them split() is used.

a,b=input().split(&quot; &quot;)
----
[[#Top]]

==If statement==
If statement is used to execute set of two contrary statements based on a condition. 

===Syntax===
If (Condition):
    Statement 1
else:
    Statement 2

If 'Condition' is true then 'Statement 1' will be executed otherwise 'Statement 2' will be executed.

Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNhHmg3SkK1uiutigcAbH9K

==Loops==
[[#Top]]&lt;br&gt;
Loops in a programming languages are used to execute set of repetitive statements. For loop and while loop are used extensively to execute a set of looping instructions.

=== For loop Syntax ===
&lt;pre&gt;
for i in range(10): 
    Statement
&lt;/pre&gt;
range(10) indicate that values 0 to 9 will be assigned to the variable i and for each value of i the Statement will be executed, e.g.
&lt;pre&gt;
for i in range(10): 
    print(i)
&lt;/pre&gt;
Output will be
&lt;pre&gt;
0
1
2
3
4
5
6
7
8
9
&lt;/pre&gt;

[[#Top]]

=== While loop Syntax ===
&lt;pre&gt;
intialisation

while(condition):
   Statement
   increment/decrement
&lt;/pre&gt;
e.g.
&lt;pre&gt;
#initialization
i=0
while(i&lt;10): 
    print(i)
    i=i+1
&lt;/pre&gt;
Output will be:
&lt;pre&gt;
0
1
2
3
4
5
6
7
8
9
&lt;/pre&gt;
Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNbl5jkVrrw1E5XSvm3GiCI

[[#Top]]

==Importance of Indentation in Python==
 &lt;p style=&quot;text-align:justify&quot;&gt;
Indentation is used to indicate to what block of statements belong. Indentation of blocks convey program structure in Python. Indentation in Python is used to refer a group/block of code/statements. In ''C++'' we use { and } (curly brackets) to group a set of statements. But in Python, there are no such brackets used. Instead of such brackets used in other programming languages, we use indentation in Python.&lt;/p&gt;

Use tabs, instead of spaces for ease of writing code.

Wrong indentation can lead to syntax error, or makes your output wrong for your logic e.g.

'''IndentationError: expected an indented block'''
&lt;pre&gt;
i=-1
if i&lt;0:
print(&quot;Test successful&quot;)#Wrong indentation &amp;#10006;
else:    
    print(&quot;Test failed&quot;)
#Output: IndentationError: expected an indented block

&lt;/pre&gt;

'''Properly Indented code:'''

&lt;pre&gt;
i=-1
if i&lt;0:
    print(&quot;Test successful&quot;)#Right indentation &amp;#9989;
else:    
    print(&quot;Test failed&quot;)
#Output:Test successful
&lt;/pre&gt;

'''Logic changed, so output changed, with improper indentation''', e.g.

&lt;h3&gt;Code : 1&lt;/h3&gt;
&lt;pre&gt;
sum=0
for i in range(5):
    for j in range(5):
        sum+=i
print(sum, end=&quot; &quot;)
#Output: 50
&lt;/pre&gt;
        
&lt;h3&gt;Code : 2&lt;/h3&gt;
&lt;pre&gt;
for i in range(5):
    for j in range(5):
        print(end=&quot; &quot;)
    sum+=i
print(sum, end=&quot; &quot;)
#Output:                          10
&lt;/pre&gt;
{{#ev:youtube|https://youtu.be/pmavoW419Yc|250|right}}&lt;br&gt;

[[#Top]]

==Spyder IDE Black Screen Solution==

----

 This issue is because of ''Help'' screen which is by default open. 
 We need to close it. So here's how you do it-


===Method 1:===

Step 1-    Try by closing current pane for that,  &quot;''press ctrl+shift+F4''&quot;  wait for few seconds things will appear on screen.

Step 2-    If it so than on menu bar go to ''view &gt; panes &gt; help'' unchecked &quot;''Help''&quot; option.

Step 3-    Make sure that &quot;''Help''&quot; under ''view &gt; panes'' is permanently unchecked. And ''Editor, Ipython console, Variable explorer''  are checked. 


===Method 2:===

Step 1-    Open spyder.

Step 2-   On that black screen randomly ''Left click'' on spyder &quot;''Menu bar''&quot; area you will get menu drop downs, You have to find Drop down with &quot;''Panes''&quot; option.

Step 3-   On &quot;''Panes''&quot; drop down unchecked the &quot;''Help''&quot;.

Step 4-   Wait for few seconds Spyder view will appear.

Step 5 -  Make sure that ''&quot;Help&quot;'' under view&gt;panes is permanently unchecked. And ''Editor, Ipython console, variable explorer'' are checked.


[[#Top]]</text>
      <sha1>5hv358mmzmwh6x8wtixubebumrax2l0</sha1>
    </revision>
    <revision>
      <id>4573</id>
      <parentid>4572</parentid>
      <timestamp>2018-10-27T04:33:43Z</timestamp>
      <contributor>
        <username>Balakrishna</username>
        <id>3073</id>
      </contributor>
      <comment>/* Variables Types and Conversion */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="20533">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_2 Contributors of this page]
==Introduction to Python==
 &lt;p style=&quot;text-align:justify&quot;&gt;Python is a widely used programming language which allows programmers to write the program in fewer lines of code. It was designed by ''Guido van Rossum'' in 1991. Python uses an interpreter instead of compiler. Basically, the main difference between compiler and interpreter is that the compiler takes the code as 'whole' and compiles it. for example, in ''C'' language and on the other side in interpreter. For example: languages like Python. It interprets the written code 'line by line', and if somewhere error is found. It stops interpreting the code from there itself. Here, in our course we will be using ''Spyder IDE''. Spyder is an integrated development environment with editing options to assist the programmers in writing programs. Spyder IDE is divided into two panes, one is console and other one is where program is written.&lt;/p&gt;

&lt;p style=&quot;text-align:justify&quot;&gt;
Python works on different platforms (Windows, Mac, Linux, Raspberry Pi, etc).
Python has a simple syntax similar to the English language.
Python has syntax that allows developers to write programs with fewer lines than some other programming languages.
Python runs on an interpreter system, meaning that code can be executed as soon as it is written. This means that prototyping can be very quick.&lt;/p&gt;
Python can be treated in a procedural way, an object-orientated way or a functional way.

==Installing Anaconda==
[[#Top]]

This article is all about installing and troubleshooting Anaconda and Spyder on different platforms.

===Windows===
Step 1 -&gt; Download the installer from here 
 &lt;p style=&quot;text-align:justify&quot;&gt;
[https://www.anaconda.com/download/#windows Download Link]. Make sure that you download the version compatible to your operating system architecture. If you have a 64 bit OS then you can download either 64 bit of 32 bit, but if you have 32 bit OS then you should download the 32 bit version only.
&lt;/p&gt;
 &lt;p style=&quot;text-align:justify&quot;&gt;
Step 2 -&gt; Double click on the .exe file that you downloaded just now and follow the instructions. If you are not sure of the installation options then just choose the default.&lt;/p&gt;
 &lt;p style=&quot;text-align:justify&quot;&gt;
Step 3 -&gt; To test your installation, open cmd (go to Start -&gt; then type cmd in the search bar and hit enter). There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.&lt;/p&gt;

===Mac===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#macos Download Link].

Step 2 -&gt; Double click on the .pkg file that you just downloaded. If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

===Linux===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#linux Download Link].

Step 2 -&gt; Go to the folder where you downloaded the .sh file and type following command 

  '''bash Anaconda-latest-Linux-x86_64.sh'''

If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

==Troubleshooting Spyder==

[[#Top]]
 &lt;p style=&quot;text-align:justify&quot;&gt;
In most of the cases, it happens that Spyder is already running and you have initiated one more instance of it. Please make sure that spyder is not running already.
If you are on Linux OS, please launch spyder through terminal. Just open the terminal and type '''spyder''' and it will launch. When Spyder opens, make sure you see Anaconda with the version written on the Ipython console. If not, try changing the path of your anaconda. Follow these steps according to your OS version.&lt;/p&gt;

====Windows====
[https://stackoverflow.com/questions/44597662/conda-command-is-not-recognized-on-windows-10 Click Here]

====Linux====
[https://stackoverflow.com/questions/18675907/how-to-run-conda Click Here]

====Mac====
[https://stackoverflow.com/questions/35246386/conda-command-not-found Click Here]

In most of the cases relaunching Spyder works.
A more general Troubleshoot is present [https://github.com/spyder-ide/spyder/wiki/Troubleshooting-Guide-and-FAQ Here]

==How to run a program in Spyder IDE?==
Go to Run on the menu bar. Click Run-&gt;Run.

[[#Top]]

==Print statements==
Print statements help to display output on console. 
{{#ev:youtube|https://youtu.be/gECkqaOwyt0|250|right}}

===Syntax===
&lt;pre&gt;print()&lt;/pre&gt;

===How to print a message?===
In order to print a message in Python, write &lt;pre&gt;print(&quot;message&quot;)&lt;/pre&gt;
Single, double, triple quote can be used print()

'''Example:'''

'''Single Quote'''
&lt;pre&gt;
print('Hello')  
Output: Hello
&lt;/pre&gt;
'''Double Quote'''
&lt;pre&gt;
print(&quot;Hello&quot;)  
Output: Hello
&lt;/pre&gt;
'''Quote within quote'''
&lt;pre&gt;print('Is &quot;Ram&quot; a good boy?')  
Output: Is &quot;Ram&quot; a good boy?&lt;/pre&gt;

[[#Top]]

==Escape sequences with strings==

We can use escape sequence within strings to make output more presentable.

'''\n'''  : It will move to next line.

'''\t'''  : It will add tab space(5space)

'''\a'''  : It will play system sound once.

'''Example:'''

&lt;pre&gt;print(&quot;Hi, \n How are you?&quot;)&lt;/pre&gt;
&lt;pre&gt;
Output: 

Hi,
How are you?
&lt;/pre&gt;
&lt;pre&gt;print(&quot;Hi, \t How are you?&quot;)&lt;/pre&gt;

Output: 

Hi, &lt;5 spaces&gt; How are you?

[[File:Escape_Sequence.jpg]]

==Variables==
[[#Top]]
&lt;pre&gt;
Variables are used to store some values. Values can be strings, integers or decimal values.  

Variable Name Rules:
1. Variable name should start with letter or underscore. Variable name cant start with number.
Example:
&amp;#10004; Valid: JOC, WIKI, JOC_WIKI, _JOC
&amp;#10008; Invalid: 1JOC, 123WIKI, 0_WIKI

2. Remaining letters other then the first one can contain number, underscore.
Example:
JOC1234, WIKI012_1332

3. Variable names are case-sensitive.
Example:
JOC, jOC, joC all are different variables. 

&lt;/pre&gt;
{{#ev:youtube|https://youtu.be/60iAXH1sm-Y|250|right}}

===How to print a variable?===
In order to print the value of a variable in python, first initialize the variable and then call it where ever you wanna use it. 
&lt;pre&gt;print(variable_name)&lt;/pre&gt;

&lt;pre&gt;For example :
x=2                # x is variable here
print(x)           # calling variable x with print function

a = &quot;JOC&quot;          # a is variable here
b = &quot;_WIKI&quot;        # b is variable here
c = a + b          # c is variable here which will provide addition of variable a and b
&lt;/pre&gt;

===Some facts about Variables===
* If you want to print variable name with a message, you can use , operator. For example : I want to print Hello Simran and Simran has been stored in a variable called ''name''.
  name=&quot;Simran&quot;
  print(&quot;Hello&quot;,name)
* If you change the value of a variable, it will store the latest value. For example :
  name=&quot;Simran&quot;
  name=&quot;Amit&quot;
  If you will execute the command ''print(name)'', Amit will be displayed.
* You can perform operations like addition, subtraction etc only on integral variables.

===Variables Types and Conversion===
&lt;pre&gt;Variable can be decimal, integer and string. And they can be converted to each other where ever possible, with the help of conversion functions.

Example:
JOC = 5           Save in Memory as 5       # We have variable with name JOC having value 5 here.
JOC = int(5)      Save in Memory as 5       # Here Variable JOC holding integer value of 5. 
JOC = float(5)     Save in Memory as 5.0     # Here variable JOC holding float value of 5
JOC = str(5)      Save in Memory as &quot;5&quot;     # Here variable JOC holding string value of 5 or We can say 5 will be treated as string here.
JOC = complex(5)  Save in Memory as (5+0j)  # Here variable JOC holding complex value of 5.
JOC = oct(5)      Save in Memory as 0o5     # Here variable JOC holding octal representation of 5.
JOC = hex(5)      Save in Memory as 0x5     # Here variable JOC holding hexadecimal representation of 5

There are many more function available in Python. You can convert variable as per your requirement.
&lt;/pre&gt;


&lt;h1 style='color:black;font-family:Calibri;font-size:14.0pt;font-weight:800;
font-style:normal'&gt;Conversion Table with Example&lt;/h1&gt;

&lt;table border=0 cellpadding=0 cellspacing=0 width=656 style='border-collapse:
 collapse;table-layout:fixed;width:492pt'&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6624497 width=63 style='height:15.0pt;width:47pt'&gt;Serial
  No&lt;/td&gt;
  &lt;td class=xl6724497 width=77 style='border-left:none;width:58pt'&gt;Function&lt;/td&gt;
  &lt;td class=xl6724497 width=303 style='border-left:none;width:227pt'&gt;Description&lt;/td&gt;
  &lt;td class=xl6724497 width=162 style='border-left:none;width:122pt'&gt;Example&lt;/td&gt;
  &lt;td class=xl6824497 width=51 style='border-left:none;width:38pt'&gt;Output&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;1&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;int(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to an
  integer.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10.12;
  print(int(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;2&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;long(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a&lt;span
  style='mso-spacerun:yes'&gt;  &lt;/span&gt;to a long integer&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10.12;
  print(long(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;3&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;float(a)&lt;/td&gt;
  &lt;td class=xl6524497 width=303 style='border-top:none;border-left:none;
  width:227pt'&gt;Converts a to a floating-point number.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 101.23;
  print(float(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;101.23&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;4&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;complex(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to a
  complex number.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print(complex(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10+0j&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;5&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;str(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to
  string.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print(str(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;6&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;repr(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts object
  a to an expression string.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print(repr(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;7&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;tuple(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to
  tuple.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print((a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;8&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;list(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to
  list.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print([a])&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;[10]&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;9&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;set(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to
  set.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a =
  set(&amp;quot;10&amp;quot;); print(a)&lt;/td&gt;
  &lt;td class=xl7124497 width=51 style='border-top:none;border-left:none;
  width:38pt'&gt;{'1', '0'}&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;10&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;dict(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to
  dictonary&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = dict(a=10);
  print(a)&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;{'a': 10}&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;11&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;chr(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts an
  integer to a character.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 97;
  print(chr(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;a&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;12&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;ord(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a
  single character to its integer value.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a =
  &amp;quot;J&amp;quot;; print(ord(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;74&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;13&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;hex(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts an
  integer to a hexadecimal string.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print(hex(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;0xa&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=21 style='height:15.75pt'&gt;
  &lt;td height=21 class=xl7224497 style='height:15.75pt;border-top:none'&gt;14&lt;/td&gt;
  &lt;td class=xl7324497 style='border-top:none;border-left:none'&gt;oct(a)&lt;/td&gt;
  &lt;td class=xl7324497 style='border-top:none;border-left:none'&gt;Converts an
  integer to an octal string.&lt;/td&gt;
  &lt;td class=xl7324497 style='border-top:none;border-left:none'&gt;a = 10;
  print(oct(a))&lt;/td&gt;
  &lt;td class=xl7424497 style='border-top:none;border-left:none'&gt;0o12&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
  &lt;tr height=0 style='display:none'&gt;
  &lt;td width=63 style='width:47pt'&gt;&lt;/td&gt;
  &lt;td width=77 style='width:58pt'&gt;&lt;/td&gt;
  &lt;td width=303 style='width:227pt'&gt;&lt;/td&gt;
  &lt;td width=162 style='width:122pt'&gt;&lt;/td&gt;
  &lt;td width=51 style='width:38pt'&gt;&lt;/td&gt;
 &lt;/tr&gt;
&lt;/table&gt;

==How to execute couple of instructions on console?==
You can execute couple of instructions on console using ;. Write Statement 1;Statement 2;......and then press ''Enter''.
{{#ev:youtube|https://youtu.be/CYQCYvLE22Y|250|right}}









==How to take input from the user?==
We can take input from the user using ''input'' function. For Example : You want the user to input variable ''x'', then write x=input(&quot;Enter the value of x&quot;) and execute. Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNkVLCxZw_jcgyS-bmrIVSP

And when the input you need is of data type other than string. You can do both the input function and data conversion in a single line.
For example:
Consider the program for letting in the patients
'''c=input(&quot;Enter (1/0)&quot;);d=int(c)'''

Instead of using it in two separate lines, combine it into a single line
'''c=int(input(&quot;Enter (1/0)&quot;))'''.

To get two inputs in same line with a space between them split() is used.

a,b=input().split(&quot; &quot;)
----
[[#Top]]

==If statement==
If statement is used to execute set of two contrary statements based on a condition. 

===Syntax===
If (Condition):
    Statement 1
else:
    Statement 2

If 'Condition' is true then 'Statement 1' will be executed otherwise 'Statement 2' will be executed.

Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNhHmg3SkK1uiutigcAbH9K

==Loops==
[[#Top]]&lt;br&gt;
Loops in a programming languages are used to execute set of repetitive statements. For loop and while loop are used extensively to execute a set of looping instructions.

=== For loop Syntax ===
&lt;pre&gt;
for i in range(10): 
    Statement
&lt;/pre&gt;
range(10) indicate that values 0 to 9 will be assigned to the variable i and for each value of i the Statement will be executed, e.g.
&lt;pre&gt;
for i in range(10): 
    print(i)
&lt;/pre&gt;
Output will be
&lt;pre&gt;
0
1
2
3
4
5
6
7
8
9
&lt;/pre&gt;

[[#Top]]

=== While loop Syntax ===
&lt;pre&gt;
intialisation

while(condition):
   Statement
   increment/decrement
&lt;/pre&gt;
e.g.
&lt;pre&gt;
#initialization
i=0
while(i&lt;10): 
    print(i)
    i=i+1
&lt;/pre&gt;
Output will be:
&lt;pre&gt;
0
1
2
3
4
5
6
7
8
9
&lt;/pre&gt;
Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNbl5jkVrrw1E5XSvm3GiCI

[[#Top]]

==Importance of Indentation in Python==
 &lt;p style=&quot;text-align:justify&quot;&gt;
Indentation is used to indicate to what block of statements belong. Indentation of blocks convey program structure in Python. Indentation in Python is used to refer a group/block of code/statements. In ''C++'' we use { and } (curly brackets) to group a set of statements. But in Python, there are no such brackets used. Instead of such brackets used in other programming languages, we use indentation in Python.&lt;/p&gt;

Use tabs, instead of spaces for ease of writing code.

Wrong indentation can lead to syntax error, or makes your output wrong for your logic e.g.

'''IndentationError: expected an indented block'''
&lt;pre&gt;
i=-1
if i&lt;0:
print(&quot;Test successful&quot;)#Wrong indentation &amp;#10006;
else:    
    print(&quot;Test failed&quot;)
#Output: IndentationError: expected an indented block

&lt;/pre&gt;

'''Properly Indented code:'''

&lt;pre&gt;
i=-1
if i&lt;0:
    print(&quot;Test successful&quot;)#Right indentation &amp;#9989;
else:    
    print(&quot;Test failed&quot;)
#Output:Test successful
&lt;/pre&gt;

'''Logic changed, so output changed, with improper indentation''', e.g.

&lt;h3&gt;Code : 1&lt;/h3&gt;
&lt;pre&gt;
sum=0
for i in range(5):
    for j in range(5):
        sum+=i
print(sum, end=&quot; &quot;)
#Output: 50
&lt;/pre&gt;
        
&lt;h3&gt;Code : 2&lt;/h3&gt;
&lt;pre&gt;
for i in range(5):
    for j in range(5):
        print(end=&quot; &quot;)
    sum+=i
print(sum, end=&quot; &quot;)
#Output:                          10
&lt;/pre&gt;
{{#ev:youtube|https://youtu.be/pmavoW419Yc|250|right}}&lt;br&gt;

[[#Top]]

==Spyder IDE Black Screen Solution==

----

 This issue is because of ''Help'' screen which is by default open. 
 We need to close it. So here's how you do it-


===Method 1:===

Step 1-    Try by closing current pane for that,  &quot;''press ctrl+shift+F4''&quot;  wait for few seconds things will appear on screen.

Step 2-    If it so than on menu bar go to ''view &gt; panes &gt; help'' unchecked &quot;''Help''&quot; option.

Step 3-    Make sure that &quot;''Help''&quot; under ''view &gt; panes'' is permanently unchecked. And ''Editor, Ipython console, Variable explorer''  are checked. 


===Method 2:===

Step 1-    Open spyder.

Step 2-   On that black screen randomly ''Left click'' on spyder &quot;''Menu bar''&quot; area you will get menu drop downs, You have to find Drop down with &quot;''Panes''&quot; option.

Step 3-   On &quot;''Panes''&quot; drop down unchecked the &quot;''Help''&quot;.

Step 4-   Wait for few seconds Spyder view will appear.

Step 5 -  Make sure that ''&quot;Help&quot;'' under view&gt;panes is permanently unchecked. And ''Editor, Ipython console, variable explorer'' are checked.


[[#Top]]</text>
      <sha1>rmcee802uc7tx5wa4sgjc14uyjsr5tu</sha1>
    </revision>
    <revision>
      <id>4576</id>
      <parentid>4573</parentid>
      <timestamp>2018-10-27T05:12:15Z</timestamp>
      <contributor>
        <username>Balakrishna</username>
        <id>3073</id>
      </contributor>
      <comment>/* Importance of Indentation in Python */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="20541">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_2 Contributors of this page]
==Introduction to Python==
 &lt;p style=&quot;text-align:justify&quot;&gt;Python is a widely used programming language which allows programmers to write the program in fewer lines of code. It was designed by ''Guido van Rossum'' in 1991. Python uses an interpreter instead of compiler. Basically, the main difference between compiler and interpreter is that the compiler takes the code as 'whole' and compiles it. for example, in ''C'' language and on the other side in interpreter. For example: languages like Python. It interprets the written code 'line by line', and if somewhere error is found. It stops interpreting the code from there itself. Here, in our course we will be using ''Spyder IDE''. Spyder is an integrated development environment with editing options to assist the programmers in writing programs. Spyder IDE is divided into two panes, one is console and other one is where program is written.&lt;/p&gt;

&lt;p style=&quot;text-align:justify&quot;&gt;
Python works on different platforms (Windows, Mac, Linux, Raspberry Pi, etc).
Python has a simple syntax similar to the English language.
Python has syntax that allows developers to write programs with fewer lines than some other programming languages.
Python runs on an interpreter system, meaning that code can be executed as soon as it is written. This means that prototyping can be very quick.&lt;/p&gt;
Python can be treated in a procedural way, an object-orientated way or a functional way.

==Installing Anaconda==
[[#Top]]

This article is all about installing and troubleshooting Anaconda and Spyder on different platforms.

===Windows===
Step 1 -&gt; Download the installer from here 
 &lt;p style=&quot;text-align:justify&quot;&gt;
[https://www.anaconda.com/download/#windows Download Link]. Make sure that you download the version compatible to your operating system architecture. If you have a 64 bit OS then you can download either 64 bit of 32 bit, but if you have 32 bit OS then you should download the 32 bit version only.
&lt;/p&gt;
 &lt;p style=&quot;text-align:justify&quot;&gt;
Step 2 -&gt; Double click on the .exe file that you downloaded just now and follow the instructions. If you are not sure of the installation options then just choose the default.&lt;/p&gt;
 &lt;p style=&quot;text-align:justify&quot;&gt;
Step 3 -&gt; To test your installation, open cmd (go to Start -&gt; then type cmd in the search bar and hit enter). There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.&lt;/p&gt;

===Mac===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#macos Download Link].

Step 2 -&gt; Double click on the .pkg file that you just downloaded. If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

===Linux===
Step 1 -&gt; Download the installer from here [https://www.anaconda.com/download/#linux Download Link].

Step 2 -&gt; Go to the folder where you downloaded the .sh file and type following command 

  '''bash Anaconda-latest-Linux-x86_64.sh'''

If you are not sure of the installation options then just choose the default.

Step 3 -&gt; To test your installation, open terminal. There type '''conda list'''. You will see a list of packages installed if not, then there was some problem.

==Troubleshooting Spyder==

[[#Top]]
 &lt;p style=&quot;text-align:justify&quot;&gt;
In most of the cases, it happens that Spyder is already running and you have initiated one more instance of it. Please make sure that spyder is not running already.
If you are on Linux OS, please launch spyder through terminal. Just open the terminal and type '''spyder''' and it will launch. When Spyder opens, make sure you see Anaconda with the version written on the Ipython console. If not, try changing the path of your anaconda. Follow these steps according to your OS version.&lt;/p&gt;

====Windows====
[https://stackoverflow.com/questions/44597662/conda-command-is-not-recognized-on-windows-10 Click Here]

====Linux====
[https://stackoverflow.com/questions/18675907/how-to-run-conda Click Here]

====Mac====
[https://stackoverflow.com/questions/35246386/conda-command-not-found Click Here]

In most of the cases relaunching Spyder works.
A more general Troubleshoot is present [https://github.com/spyder-ide/spyder/wiki/Troubleshooting-Guide-and-FAQ Here]

==How to run a program in Spyder IDE?==
Go to Run on the menu bar. Click Run-&gt;Run.

[[#Top]]

==Print statements==
Print statements help to display output on console. 
{{#ev:youtube|https://youtu.be/gECkqaOwyt0|250|right}}

===Syntax===
&lt;pre&gt;print()&lt;/pre&gt;

===How to print a message?===
In order to print a message in Python, write &lt;pre&gt;print(&quot;message&quot;)&lt;/pre&gt;
Single, double, triple quote can be used print()

'''Example:'''

'''Single Quote'''
&lt;pre&gt;
print('Hello')  
Output: Hello
&lt;/pre&gt;
'''Double Quote'''
&lt;pre&gt;
print(&quot;Hello&quot;)  
Output: Hello
&lt;/pre&gt;
'''Quote within quote'''
&lt;pre&gt;print('Is &quot;Ram&quot; a good boy?')  
Output: Is &quot;Ram&quot; a good boy?&lt;/pre&gt;

[[#Top]]

==Escape sequences with strings==

We can use escape sequence within strings to make output more presentable.

'''\n'''  : It will move to next line.

'''\t'''  : It will add tab space(5space)

'''\a'''  : It will play system sound once.

'''Example:'''

&lt;pre&gt;print(&quot;Hi, \n How are you?&quot;)&lt;/pre&gt;
&lt;pre&gt;
Output: 

Hi,
How are you?
&lt;/pre&gt;
&lt;pre&gt;print(&quot;Hi, \t How are you?&quot;)&lt;/pre&gt;

Output: 

Hi, &lt;5 spaces&gt; How are you?

[[File:Escape_Sequence.jpg]]

==Variables==
[[#Top]]
&lt;pre&gt;
Variables are used to store some values. Values can be strings, integers or decimal values.  

Variable Name Rules:
1. Variable name should start with letter or underscore. Variable name cant start with number.
Example:
&amp;#10004; Valid: JOC, WIKI, JOC_WIKI, _JOC
&amp;#10008; Invalid: 1JOC, 123WIKI, 0_WIKI

2. Remaining letters other then the first one can contain number, underscore.
Example:
JOC1234, WIKI012_1332

3. Variable names are case-sensitive.
Example:
JOC, jOC, joC all are different variables. 

&lt;/pre&gt;
{{#ev:youtube|https://youtu.be/60iAXH1sm-Y|250|right}}

===How to print a variable?===
In order to print the value of a variable in python, first initialize the variable and then call it where ever you wanna use it. 
&lt;pre&gt;print(variable_name)&lt;/pre&gt;

&lt;pre&gt;For example :
x=2                # x is variable here
print(x)           # calling variable x with print function

a = &quot;JOC&quot;          # a is variable here
b = &quot;_WIKI&quot;        # b is variable here
c = a + b          # c is variable here which will provide addition of variable a and b
&lt;/pre&gt;

===Some facts about Variables===
* If you want to print variable name with a message, you can use , operator. For example : I want to print Hello Simran and Simran has been stored in a variable called ''name''.
  name=&quot;Simran&quot;
  print(&quot;Hello&quot;,name)
* If you change the value of a variable, it will store the latest value. For example :
  name=&quot;Simran&quot;
  name=&quot;Amit&quot;
  If you will execute the command ''print(name)'', Amit will be displayed.
* You can perform operations like addition, subtraction etc only on integral variables.

===Variables Types and Conversion===
&lt;pre&gt;Variable can be decimal, integer and string. And they can be converted to each other where ever possible, with the help of conversion functions.

Example:
JOC = 5           Save in Memory as 5       # We have variable with name JOC having value 5 here.
JOC = int(5)      Save in Memory as 5       # Here Variable JOC holding integer value of 5. 
JOC = float(5)     Save in Memory as 5.0     # Here variable JOC holding float value of 5
JOC = str(5)      Save in Memory as &quot;5&quot;     # Here variable JOC holding string value of 5 or We can say 5 will be treated as string here.
JOC = complex(5)  Save in Memory as (5+0j)  # Here variable JOC holding complex value of 5.
JOC = oct(5)      Save in Memory as 0o5     # Here variable JOC holding octal representation of 5.
JOC = hex(5)      Save in Memory as 0x5     # Here variable JOC holding hexadecimal representation of 5

There are many more function available in Python. You can convert variable as per your requirement.
&lt;/pre&gt;


&lt;h1 style='color:black;font-family:Calibri;font-size:14.0pt;font-weight:800;
font-style:normal'&gt;Conversion Table with Example&lt;/h1&gt;

&lt;table border=0 cellpadding=0 cellspacing=0 width=656 style='border-collapse:
 collapse;table-layout:fixed;width:492pt'&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6624497 width=63 style='height:15.0pt;width:47pt'&gt;Serial
  No&lt;/td&gt;
  &lt;td class=xl6724497 width=77 style='border-left:none;width:58pt'&gt;Function&lt;/td&gt;
  &lt;td class=xl6724497 width=303 style='border-left:none;width:227pt'&gt;Description&lt;/td&gt;
  &lt;td class=xl6724497 width=162 style='border-left:none;width:122pt'&gt;Example&lt;/td&gt;
  &lt;td class=xl6824497 width=51 style='border-left:none;width:38pt'&gt;Output&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;1&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;int(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to an
  integer.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10.12;
  print(int(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;2&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;long(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a&lt;span
  style='mso-spacerun:yes'&gt;  &lt;/span&gt;to a long integer&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10.12;
  print(long(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;3&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;float(a)&lt;/td&gt;
  &lt;td class=xl6524497 width=303 style='border-top:none;border-left:none;
  width:227pt'&gt;Converts a to a floating-point number.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 101.23;
  print(float(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;101.23&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;4&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;complex(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to a
  complex number.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print(complex(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10+0j&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;5&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;str(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to
  string.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print(str(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;6&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;repr(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts object
  a to an expression string.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print(repr(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;7&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;tuple(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to
  tuple.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print((a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;10&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;8&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;list(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to
  list.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print([a])&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;[10]&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;9&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;set(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to
  set.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a =
  set(&amp;quot;10&amp;quot;); print(a)&lt;/td&gt;
  &lt;td class=xl7124497 width=51 style='border-top:none;border-left:none;
  width:38pt'&gt;{'1', '0'}&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;10&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;dict(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a to
  dictonary&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = dict(a=10);
  print(a)&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;{'a': 10}&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;11&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;chr(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts an
  integer to a character.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 97;
  print(chr(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;a&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;12&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;ord(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts a
  single character to its integer value.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a =
  &amp;quot;J&amp;quot;; print(ord(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;74&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=20 style='height:15.0pt'&gt;
  &lt;td height=20 class=xl6924497 style='height:15.0pt;border-top:none'&gt;13&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;hex(a)&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;Converts an
  integer to a hexadecimal string.&lt;/td&gt;
  &lt;td class=xl6424497 style='border-top:none;border-left:none'&gt;a = 10;
  print(hex(a))&lt;/td&gt;
  &lt;td class=xl7024497 style='border-top:none;border-left:none'&gt;0xa&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height=21 style='height:15.75pt'&gt;
  &lt;td height=21 class=xl7224497 style='height:15.75pt;border-top:none'&gt;14&lt;/td&gt;
  &lt;td class=xl7324497 style='border-top:none;border-left:none'&gt;oct(a)&lt;/td&gt;
  &lt;td class=xl7324497 style='border-top:none;border-left:none'&gt;Converts an
  integer to an octal string.&lt;/td&gt;
  &lt;td class=xl7324497 style='border-top:none;border-left:none'&gt;a = 10;
  print(oct(a))&lt;/td&gt;
  &lt;td class=xl7424497 style='border-top:none;border-left:none'&gt;0o12&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
  &lt;tr height=0 style='display:none'&gt;
  &lt;td width=63 style='width:47pt'&gt;&lt;/td&gt;
  &lt;td width=77 style='width:58pt'&gt;&lt;/td&gt;
  &lt;td width=303 style='width:227pt'&gt;&lt;/td&gt;
  &lt;td width=162 style='width:122pt'&gt;&lt;/td&gt;
  &lt;td width=51 style='width:38pt'&gt;&lt;/td&gt;
 &lt;/tr&gt;
&lt;/table&gt;

==How to execute couple of instructions on console?==
You can execute couple of instructions on console using ;. Write Statement 1;Statement 2;......and then press ''Enter''.
{{#ev:youtube|https://youtu.be/CYQCYvLE22Y|250|right}}









==How to take input from the user?==
We can take input from the user using ''input'' function. For Example : You want the user to input variable ''x'', then write x=input(&quot;Enter the value of x&quot;) and execute. Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNkVLCxZw_jcgyS-bmrIVSP

And when the input you need is of data type other than string. You can do both the input function and data conversion in a single line.
For example:
Consider the program for letting in the patients
'''c=input(&quot;Enter (1/0)&quot;);d=int(c)'''

Instead of using it in two separate lines, combine it into a single line
'''c=int(input(&quot;Enter (1/0)&quot;))'''.

To get two inputs in same line with a space between them split() is used.

a,b=input().split(&quot; &quot;)
----
[[#Top]]

==If statement==
If statement is used to execute set of two contrary statements based on a condition. 

===Syntax===
If (Condition):
    Statement 1
else:
    Statement 2

If 'Condition' is true then 'Statement 1' will be executed otherwise 'Statement 2' will be executed.

Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNhHmg3SkK1uiutigcAbH9K

==Loops==
[[#Top]]&lt;br&gt;
Loops in a programming languages are used to execute set of repetitive statements. For loop and while loop are used extensively to execute a set of looping instructions.

=== For loop Syntax ===
&lt;pre&gt;
for i in range(10): 
    Statement
&lt;/pre&gt;
range(10) indicate that values 0 to 9 will be assigned to the variable i and for each value of i the Statement will be executed, e.g.
&lt;pre&gt;
for i in range(10): 
    print(i)
&lt;/pre&gt;
Output will be
&lt;pre&gt;
0
1
2
3
4
5
6
7
8
9
&lt;/pre&gt;

[[#Top]]

=== While loop Syntax ===
&lt;pre&gt;
intialisation

while(condition):
   Statement
   increment/decrement
&lt;/pre&gt;
e.g.
&lt;pre&gt;
#initialization
i=0
while(i&lt;10): 
    print(i)
    i=i+1
&lt;/pre&gt;
Output will be:
&lt;pre&gt;
0
1
2
3
4
5
6
7
8
9
&lt;/pre&gt;
Please watch : https://www.youtube.com/playlist?list=PLc_j0TNIaWxNbl5jkVrrw1E5XSvm3GiCI

[[#Top]]

==Importance of Indentation in Python==
 &lt;p style=&quot;text-align:justify&quot;&gt;
Indentation is used to indicate to what block of code, a statement belongs. Indentation of blocks convey program structure in Python. Indentation in Python is used to refer a group/block of code/statements. In ''C++'' we use { and } (curly brackets) to group a set of statements. But in Python, there are no such brackets used. Instead of such brackets used in other programming languages, we use indentation in Python.&lt;/p&gt;

Use tabs, instead of spaces for ease of writing code.

Wrong indentation can lead to syntax error, or makes your output wrong for your logic e.g.

'''IndentationError: expected an indented block'''
&lt;pre&gt;
i=-1
if i&lt;0:
print(&quot;Test successful&quot;)#Wrong indentation &amp;#10006;
else:    
    print(&quot;Test failed&quot;)
#Output: IndentationError: expected an indented block

&lt;/pre&gt;

'''Properly Indented code:'''

&lt;pre&gt;
i=-1
if i&lt;0:
    print(&quot;Test successful&quot;)#Right indentation &amp;#9989;
else:    
    print(&quot;Test failed&quot;)
#Output:Test successful
&lt;/pre&gt;

'''Logic changed, so output changed, with improper indentation''', e.g.

&lt;h3&gt;Code : 1&lt;/h3&gt;
&lt;pre&gt;
sum=0
for i in range(5):
    for j in range(5):
        sum+=i
print(sum, end=&quot; &quot;)
#Output: 50
&lt;/pre&gt;
        
&lt;h3&gt;Code : 2&lt;/h3&gt;
&lt;pre&gt;
for i in range(5):
    for j in range(5):
        print(end=&quot; &quot;)
    sum+=i
print(sum, end=&quot; &quot;)
#Output:                          10
&lt;/pre&gt;
{{#ev:youtube|https://youtu.be/pmavoW419Yc|250|right}}&lt;br&gt;

[[#Top]]

==Spyder IDE Black Screen Solution==

----

 This issue is because of ''Help'' screen which is by default open. 
 We need to close it. So here's how you do it-


===Method 1:===

Step 1-    Try by closing current pane for that,  &quot;''press ctrl+shift+F4''&quot;  wait for few seconds things will appear on screen.

Step 2-    If it so than on menu bar go to ''view &gt; panes &gt; help'' unchecked &quot;''Help''&quot; option.

Step 3-    Make sure that &quot;''Help''&quot; under ''view &gt; panes'' is permanently unchecked. And ''Editor, Ipython console, Variable explorer''  are checked. 


===Method 2:===

Step 1-    Open spyder.

Step 2-   On that black screen randomly ''Left click'' on spyder &quot;''Menu bar''&quot; area you will get menu drop downs, You have to find Drop down with &quot;''Panes''&quot; option.

Step 3-   On &quot;''Panes''&quot; drop down unchecked the &quot;''Help''&quot;.

Step 4-   Wait for few seconds Spyder view will appear.

Step 5 -  Make sure that ''&quot;Help&quot;'' under view&gt;panes is permanently unchecked. And ''Editor, Ipython console, variable explorer'' are checked.


[[#Top]]</text>
      <sha1>iq7459cen5g7i9weioxzqyyq44mb805</sha1>
    </revision>
  </page>
</mediawiki>
