<mediawiki xmlns="http://www.mediawiki.org/xml/export-0.10/" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.mediawiki.org/xml/export-0.10/ http://www.mediawiki.org/xml/export-0.10.xsd" version="0.10" xml:lang="en">
  <siteinfo>
    <sitename>JOCWiki</sitename>
    <dbname>joc_wiki</dbname>
    <base>http://sccilabs.org/jocwiki/index.php/Main_Page</base>
    <generator>MediaWiki 1.30.0</generator>
    <case>first-letter</case>
    <namespaces>
      <namespace key="-2" case="first-letter">Media</namespace>
      <namespace key="-1" case="first-letter">Special</namespace>
      <namespace key="0" case="first-letter" />
      <namespace key="1" case="first-letter">Talk</namespace>
      <namespace key="2" case="first-letter">User</namespace>
      <namespace key="3" case="first-letter">User talk</namespace>
      <namespace key="4" case="first-letter">JOCWiki</namespace>
      <namespace key="5" case="first-letter">JOCWiki talk</namespace>
      <namespace key="6" case="first-letter">File</namespace>
      <namespace key="7" case="first-letter">File talk</namespace>
      <namespace key="8" case="first-letter">MediaWiki</namespace>
      <namespace key="9" case="first-letter">MediaWiki talk</namespace>
      <namespace key="10" case="first-letter">Template</namespace>
      <namespace key="11" case="first-letter">Template talk</namespace>
      <namespace key="12" case="first-letter">Help</namespace>
      <namespace key="13" case="first-letter">Help talk</namespace>
      <namespace key="14" case="first-letter">Category</namespace>
      <namespace key="15" case="first-letter">Category talk</namespace>
      <namespace key="828" case="first-letter">Module</namespace>
      <namespace key="829" case="first-letter">Module talk</namespace>
      <namespace key="2300" case="first-letter">Gadget</namespace>
      <namespace key="2301" case="first-letter">Gadget talk</namespace>
      <namespace key="2302" case="case-sensitive">Gadget definition</namespace>
      <namespace key="2303" case="case-sensitive">Gadget definition talk</namespace>
      <namespace key="2600" case="first-letter">Topic</namespace>
    </namespaces>
  </siteinfo>
  <page>
    <title>Lecture Notes: Week 3</title>
    <ns>0</ns>
    <id>227</id>
    <revision>
      <id>583</id>
      <timestamp>2018-08-13T03:39:45Z</timestamp>
      <contributor>
        <username>Simmi</username>
        <id>18</id>
      </contributor>
      <comment>Created blank page</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="0" />
      <sha1>phoiac9h4m842xq45sp7s6u21eteeq1</sha1>
    </revision>
    <revision>
      <id>584</id>
      <parentid>583</parentid>
      <timestamp>2018-08-13T03:40:51Z</timestamp>
      <contributor>
        <username>Simmi</username>
        <id>18</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="107">[http://sccilabs.org/jocwiki/index.php/Loops_and_Conditionals_:_Fizzbuzz| Loops and Conditionals: Fizzbuzz]</text>
      <sha1>b6gqec193n57fwnwg0uo6mrlh70t2zr</sha1>
    </revision>
    <revision>
      <id>585</id>
      <parentid>584</parentid>
      <timestamp>2018-08-13T03:41:35Z</timestamp>
      <contributor>
        <username>Simmi</username>
        <id>18</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="212">*[http://sccilabs.org/jocwiki/index.php/Loops_and_Conditionals_:_Fizzbuzz| Loops and Conditionals: Fizzbuzz]
*[http://sccilabs.org/jocwiki/index.php/Crowd_Computing_:Just_Estimate| Crowd Computing: Just Estimate]</text>
      <sha1>j8ukq03nrrrm085abktv660yg1f6znr</sha1>
    </revision>
    <revision>
      <id>586</id>
      <parentid>585</parentid>
      <timestamp>2018-08-13T03:43:00Z</timestamp>
      <contributor>
        <username>Simmi</username>
        <id>18</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="311">*[http://sccilabs.org/jocwiki/index.php/Loops_and_Conditionals_:_Fizzbuzz| Loops and Conditionals: Fizzbuzz]
*[http://sccilabs.org/jocwiki/index.php/Crowd_Computing_:Just_Estimate| Crowd Computing: Just Estimate]
*[http://sccilabs.org/jocwiki/index.php/Permutations_:_Jumbled_Words| Permutations: Jumbled Words]</text>
      <sha1>fi200ihcjm50cqhspicqd79hq8tzfrh</sha1>
    </revision>
    <revision>
      <id>587</id>
      <parentid>586</parentid>
      <timestamp>2018-08-13T03:43:49Z</timestamp>
      <contributor>
        <username>Simmi</username>
        <id>18</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="393">*[http://sccilabs.org/jocwiki/index.php/Loops_and_Conditionals_:_Fizzbuzz| Loops and Conditionals: Fizzbuzz]
*[http://sccilabs.org/jocwiki/index.php/Crowd_Computing_:Just_Estimate| Crowd Computing: Just Estimate]
*[http://sccilabs.org/jocwiki/index.php/Permutations_:_Jumbled_Words| Permutations: Jumbled Words]
*[http://sccilabs.org/jocwiki/index.php/Theory_of_Evolution| Theory of Evolution]</text>
      <sha1>rcqqj4pkvp9a7vshlp6j5nafg8ihqk9</sha1>
    </revision>
    <revision>
      <id>604</id>
      <parentid>587</parentid>
      <timestamp>2018-08-14T09:59:30Z</timestamp>
      <contributor>
        <username>Simmi</username>
        <id>18</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="394">*[http://sccilabs.org/jocwiki/index.php/Loops_and_Conditionals_:_Fizzbuzz | Loops and Conditionals: Fizzbuzz]
*[http://sccilabs.org/jocwiki/index.php/Crowd_Computing_:Just_Estimate| Crowd Computing: Just Estimate]
*[http://sccilabs.org/jocwiki/index.php/Permutations_:_Jumbled_Words| Permutations: Jumbled Words]
*[http://sccilabs.org/jocwiki/index.php/Theory_of_Evolution| Theory of Evolution]</text>
      <sha1>833kabnrxr58ko6r8qzuul09ye7qfho</sha1>
    </revision>
    <revision>
      <id>605</id>
      <parentid>604</parentid>
      <timestamp>2018-08-14T09:59:56Z</timestamp>
      <contributor>
        <username>Simmi</username>
        <id>18</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="390">*[http://sccilabs.org/jocwiki/index.php/Loops_and_Conditionals_:_Fizzbuzz  Loops and Conditionals: Fizzbuzz]
*[http://sccilabs.org/jocwiki/index.php/Crowd_Computing_:Just_Estimate Crowd Computing: Just Estimate]
*[http://sccilabs.org/jocwiki/index.php/Permutations_:_Jumbled_Words Permutations: Jumbled Words]
*[http://sccilabs.org/jocwiki/index.php/Theory_of_Evolution Theory of Evolution]</text>
      <sha1>7xmv3vepc4882y4ttlp7a2w6vjmwnfo</sha1>
    </revision>
    <revision>
      <id>643</id>
      <parentid>605</parentid>
      <timestamp>2018-08-16T00:28:11Z</timestamp>
      <contributor>
        <username>Vinodh</username>
        <id>346</id>
      </contributor>
      <comment>Slicing - Negative index values</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="909">Slicing:

I tried something different. This may probably help sometime.

students
Out[35]: ['mohan', 'sid', 'basha', 'vinodh']

students[-1:]
Out[36]: ['vinodh']

students[-2:]
Out[37]: ['basha', 'vinodh']

students[-2:1]
Out[38]: []

students[-2:2]
Out[39]: []

students[-2:3]
Out[40]: ['basha']

students
Out[41]: ['mohan', 'sid', 'basha', 'vinodh']

students[-2:-1]
Out[42]: ['basha']

When we have the start/end index as a negative value, it kind of calculates the index by looping back from the end of the list. 

*[http://sccilabs.org/jocwiki/index.php/Loops_and_Conditionals_:_Fizzbuzz  Loops and Conditionals: Fizzbuzz]
*[http://sccilabs.org/jocwiki/index.php/Crowd_Computing_:Just_Estimate Crowd Computing: Just Estimate]
*[http://sccilabs.org/jocwiki/index.php/Permutations_:_Jumbled_Words Permutations: Jumbled Words]
*[http://sccilabs.org/jocwiki/index.php/Theory_of_Evolution Theory of Evolution]</text>
      <sha1>or8czrxobyateb35hfnhwk717ihfdvy</sha1>
    </revision>
    <revision>
      <id>855</id>
      <parentid>643</parentid>
      <timestamp>2018-08-20T16:26:18Z</timestamp>
      <contributor>
        <username>Sam</username>
        <id>673</id>
      </contributor>
      <comment>Content box missing in the page</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="108">&lt;inputbox&gt;
type=create
width=100
break=no
buttonlabel=Create new article
default=(Article title)
&lt;/inputbox&gt;</text>
      <sha1>kl2umuqiqkdhaepo7maweiuuq5jvqlc</sha1>
    </revision>
    <revision>
      <id>873</id>
      <parentid>855</parentid>
      <timestamp>2018-08-20T17:18:18Z</timestamp>
      <contributor>
        <username>Sam</username>
        <id>673</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="572">&lt;inputbox&gt;
type=create
width=100
break=no
buttonlabel=Create new article
default=(Article title)
&lt;/inputbox&gt;
*[http://sccilabs.org/jocwiki/index.php/List_Processing List Processing]
*[http://sccilabs.org/jocwiki/index.php/Loops_and_Conditionals_:_Fizzbuzz  Loops and Conditionals: Fizzbuzz]
*[http://sccilabs.org/jocwiki/index.php/Crowd_Computing_:Just_Estimate Crowd Computing: Just Estimate]
*[http://sccilabs.org/jocwiki/index.php/Permutations_:_Jumbled_Words Permutations: Jumbled Words]
*[http://sccilabs.org/jocwiki/index.php/Theory_of_Evolution Theory of Evolution]</text>
      <sha1>9f8m2sx1ldm6lx81oirj7t9oxk3bmqr</sha1>
    </revision>
    <revision>
      <id>874</id>
      <parentid>873</parentid>
      <timestamp>2018-08-20T17:19:27Z</timestamp>
      <contributor>
        <username>Sam</username>
        <id>673</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="464">
*[http://sccilabs.org/jocwiki/index.php/List_Processing List Processing]
*[http://sccilabs.org/jocwiki/index.php/Loops_and_Conditionals_:_Fizzbuzz  Loops and Conditionals: Fizzbuzz]
*[http://sccilabs.org/jocwiki/index.php/Crowd_Computing_:Just_Estimate Crowd Computing: Just Estimate]
*[http://sccilabs.org/jocwiki/index.php/Permutations_:_Jumbled_Words Permutations: Jumbled Words]
*[http://sccilabs.org/jocwiki/index.php/Theory_of_Evolution Theory of Evolution]</text>
      <sha1>8bzgxausn8gaadl535b0g9ktaq6gtse</sha1>
    </revision>
    <revision>
      <id>1371</id>
      <parentid>874</parentid>
      <timestamp>2018-08-30T10:28:46Z</timestamp>
      <contributor>
        <username>Simmi</username>
        <id>18</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="554">*Week 3 Playlist: https://www.youtube.com/playlist?list=PLc_j0TNIaWxOVx_z9jAM2UB3RqYNXaoEo
*[http://sccilabs.org/jocwiki/index.php/List_Processing List Processing]
*[http://sccilabs.org/jocwiki/index.php/Loops_and_Conditionals_:_Fizzbuzz  Loops and Conditionals: Fizzbuzz]
*[http://sccilabs.org/jocwiki/index.php/Crowd_Computing_:Just_Estimate Crowd Computing: Just Estimate]
*[http://sccilabs.org/jocwiki/index.php/Permutations_:_Jumbled_Words Permutations: Jumbled Words]
*[http://sccilabs.org/jocwiki/index.php/Theory_of_Evolution Theory of Evolution]</text>
      <sha1>ql418c45wqbsolza8cccfej0k5msthc</sha1>
    </revision>
    <revision>
      <id>3353</id>
      <parentid>1371</parentid>
      <timestamp>2018-09-26T06:02:25Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="663">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_3 Contributors of this page]
*Week 3 Playlist: https://www.youtube.com/playlist?list=PLc_j0TNIaWxOVx_z9jAM2UB3RqYNXaoEo
*[http://sccilabs.org/jocwiki/index.php/List_Processing List Processing]
*[http://sccilabs.org/jocwiki/index.php/Loops_and_Conditionals_:_Fizzbuzz  Loops and Conditionals: Fizzbuzz]
*[http://sccilabs.org/jocwiki/index.php/Crowd_Computing_:Just_Estimate Crowd Computing: Just Estimate]
*[http://sccilabs.org/jocwiki/index.php/Permutations_:_Jumbled_Words Permutations: Jumbled Words]
*[http://sccilabs.org/jocwiki/index.php/Theory_of_Evolution Theory of Evolution]</text>
      <sha1>m0szik6g0hqnu3ezj1c38f7gsop98hs</sha1>
    </revision>
    <revision>
      <id>3354</id>
      <parentid>3353</parentid>
      <timestamp>2018-09-26T06:04:43Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="12823">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_3 Contributors of this page]
*Week 3 Playlist: https://www.youtube.com/playlist?list=PLc_j0TNIaWxOVx_z9jAM2UB3RqYNXaoEo
*[http://sccilabs.org/jocwiki/index.php/List_Processing List Processing]
==List==
List is a flexible data structure used for storing a group of data separated by comma. The elements in a list need not be of the same data type.

'''Example:'''
       List_1 = [ 1, 2,3] or 
       List_1 = [&quot;coffee&quot;, &quot;Tea&quot;, &quot;Milk&quot;] or
       List_1 = [1,&quot;coffee&quot;, &quot;Tea&quot;, 3, &quot;5&quot;]

==List Creation==
a) A list can be created by simply putting values (separated by comma) between square brackets as given below,
       List_1 = [1,&quot;coffee&quot;, &quot;Tea&quot;, 3, &quot;5&quot;] #this creates a list by name List_1 containing following items


Or,
(b)A List can be created from scratch and elements can be added 
        List_2 = [ ]
        List_2.append(&quot;Kala&quot;)
        List_2.append(&quot;Mala&quot;)
Here we use &quot;append&quot; ,which is a function in python that enable us to append or attach an element to a list .
Thus List_2 will now hold [&quot;Kala&quot;,&quot;Mala&quot;]

==Operations and Methods to work with List==
&lt;pre&gt;
a = [25,30,50,90,12,13]
b = [100,300,500,200,250]
&lt;/pre&gt;
&lt;hr&gt;
&lt;table border=2&gt;
  &lt;tr&gt;
    &lt;th&gt;&lt;b&gt;Method/&lt;br&gt;Operator&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Function&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Syntax&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Output&lt;/b&gt;&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;len()&lt;/td&gt;
    &lt;td&gt;Find length of a list&lt;/td&gt;
    &lt;td&gt;len(a)&lt;/td&gt;
    &lt;td&gt;6&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;max()&lt;/td&gt;
    &lt;td&gt;Find maximum element from the list&lt;/td&gt;
    &lt;td&gt;max(a)&lt;/td&gt;
    &lt;td&gt;90&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;min()&lt;/td&gt;
    &lt;td&gt;Find minimum element from the list&lt;/td&gt;
    &lt;td&gt;min(a)&lt;/td&gt;
    &lt;td&gt;12&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sum()&lt;/td&gt;
    &lt;td&gt;Returns sum of all elements of the list&lt;/td&gt;
    &lt;td&gt;sum(a)&lt;/td&gt;
    &lt;td&gt;220&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;reverse()&lt;/td&gt;
    &lt;td&gt;Reverses the original list&lt;/td&gt;
    &lt;td&gt;a.reverse()&lt;/td&gt;
    &lt;td&gt;[13, 12, 90, 50, 30, 25]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sort()&lt;/td&gt;
    &lt;td&gt;Sorts the original list in ascending order&lt;/td&gt;
    &lt;td&gt;a.sort()&lt;/td&gt;
    &lt;td&gt;[12, 13, 25, 30, 50, 90]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sorted()&lt;/td&gt;
    &lt;td&gt;Returns the new sorted list &lt;/td&gt;
    &lt;td&gt;sorted(a)&lt;/td&gt;
    &lt;td&gt;[12, 13, 25, 30, 50, 90]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;insert()&lt;/td&gt;
    &lt;td&gt;Insert at a particular index in the list, and shifts remaining elements&lt;/td&gt;
    &lt;td&gt;a.insert(3,3)&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 3, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;append()&lt;/td&gt;
    &lt;td&gt;Adds elements/object to the end of the list&lt;/td&gt;
    &lt;td&gt;a.append(5)&lt;br&gt;a.append([10,20])&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 5]&lt;br&gt;[25, 30, 50, 90, 12, 13, [10, 20]]&lt;br&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;extend()&lt;/td&gt;
    &lt;td&gt;Adds object to the end of the list as elements not as object&lt;/td&gt;
    &lt;td&gt;a.extend([10,20])&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 10, 20]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;*&amp;nbsp;&amp;nbsp;Repeatation&lt;br&gt;operator&lt;/td&gt;
    &lt;td&gt;Repeat the list for n times and returns a new list&lt;/td&gt;
    &lt;td&gt;a*2&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 25, 30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;+ Concatenation&lt;br&gt;operator&lt;/td&gt;
    &lt;td&gt;Concatenates two lists, and returns a new list&lt;/td&gt;
    &lt;td&gt;a+b&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 100, 300, 500, 200, 250]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;index()&lt;/td&gt;
    &lt;td&gt;Finds index of a particular element in the list or not&lt;/td&gt;
    &lt;td&gt;a.index(25)&lt;br&gt;a.index(0)&lt;br&gt;&lt;/td&gt;
    &lt;td&gt;0&lt;br&gt;&lt;br&gt;ValueError: 0 is not in list&lt;br&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;in operator&lt;/td&gt;
    &lt;td&gt;Finds whether a particular element is in the list or not, returns boolean&lt;/td&gt;
    &lt;td&gt;25 in a&lt;/td&gt;
    &lt;td&gt;True&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;not in operator&lt;/td&gt;
    &lt;td&gt;Checks if element is not available in list, returns boolean&lt;/td&gt;
    &lt;td&gt;25 not in a&lt;/td&gt;
    &lt;td&gt;False&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;count()&lt;/td&gt;
    &lt;td&gt;Counts the number of occurence of an element in the list&lt;/td&gt;
    &lt;td&gt;a.count(25)&lt;/td&gt;
    &lt;td&gt;1&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;remove()&lt;/td&gt;
    &lt;td&gt;Removes an element from the list&lt;/td&gt;
    &lt;td&gt;a.remove(25)&lt;/td&gt;
    &lt;td&gt; [30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;pop()&lt;/td&gt;
    &lt;td&gt;Delete and return item at index 0&lt;/td&gt;
    &lt;td&gt;a.pop(0)&lt;/td&gt;
    &lt;td&gt;25 , a will be [30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;del&lt;/td&gt;
    &lt;td&gt;Deletes item at a particular index from the list&lt;/td&gt;
    &lt;td&gt;del a[0]&lt;/td&gt;
    &lt;td&gt;[30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;

==Printing the List==
=== Print whole list ===
A list can be printed simply or using a ''for / while'' loop 

 print(List_2)     # To print the entire list
This code will print      
 ['Kala','Mala']     

===Print element at a particular index===
&lt;pre&gt;
Using index position
    List_2[0]     # prints 'Kala' ,i.e,the value at index position 0.
    List_2[1]     # prints 'Mala'.
&lt;/pre&gt;
=== Without using index position ===
&lt;pre&gt;
for item in List_2:   # here item is a variable used to access elements in list.
       print(item)
   This code snippet prints 
    Kala
    Mala
&lt;/pre&gt;

==Search for a particular element in list==
Elements in a list can be searched by one of the two ways:
=== using index() function===
&lt;pre&gt;
ages1 = [11,23,12,23,45]

#if element is available in the list, index() returns the index value on which, the element is present.
print(ages1.index(45))#Output: 4

#if element is not available in the list, index() returns ''ValueError''
print(ages1.index(0))#Output: ValueError:
&lt;/pre&gt;

In programming, if such error occurs, program gets terminated. It can be solved using exception handling.
e.g.
&lt;pre&gt;
ages1 = [11,23,12,23,45]

try:
    print(ages1.index(0))
except ValueError:
    print(&quot;Exception has occured&quot;)    
    print(&quot;Element is not found in the list&quot;)

&lt;/pre&gt;
&lt;pre&gt;
'''Output: 
Exception has occured
Element is not found in the list
'''&lt;/pre&gt;

=== using 'in' operator===
''in'' operator is used to check whether a particular element is available in the list or not.e.g.

&lt;pre&gt;
ages1 = [11,23,12,23,45]
no=11

if no in ages1:
    print(&quot;no is there in the list&quot;)
else:    
    print(&quot;no is NOT there in the list&quot;)
&lt;/pre&gt;
&lt;pre&gt;
#Output: no is there in the list
&lt;/pre&gt;

'''Number is not there in the list'''
&lt;pre&gt;
ages1 = [11,23,12,23,45]
no=15

if no in ages1:
    print(&quot;no is there in the list&quot;)
else:    
    print(&quot;no is NOT there in the list&quot;)
&lt;/pre&gt;
&lt;pre&gt;
Output: no is NOT there in the list
&lt;/pre&gt;


==Updating the List==
The lists can be updated using ''append'' or ''insert'' function.  Append adds the element to the end of the list and Insert adds the element in the specified position.
   List_2.append(&quot;Sheela&quot;)    # add the element 'Sheela' to the end of the list.
   print (List_2) will output 
   ['Kala', 'Mala', 'Sheela']
   
   List_2.insert(1,&quot;Bala&quot;)    # add the element &quot;Bala&quot; in the list at the index 1.
   print (List_2) will output 
   ['Kala', 'Bala','Mala', 'Sheela']

=== Extend the list by adding elements of other list at end using extend()===
&lt;pre&gt;
ages = [11,23,12,23,45]
ages.extend([57,58])
print(ages)
&lt;/pre&gt;

&lt;pre&gt;
#Output: [11, 23, 12, 23, 45, 57, 58]
&lt;/pre&gt;

==== Difference between ''append and extend'' ====
Difference between append and extend can be easily understood, by the following example.

&lt;pre&gt;
appendlist = [11,23,12,23,45]
appendlist.append([57,58])

extendlist= [11,23,12,23,45]
extendlist.extend([57,58])
&lt;/pre&gt;

&lt;pre&gt;
'''Output:
[11, 23, 12, 23, 45, [57, 58]]
[11, 23, 12, 23, 45, 57, 58]'''
&lt;/pre&gt;

==Basic Operations on List==
===Frequency of Occurrence===
list.count(object) will return the number of times the object occur in the list.
  '''Example'''
    ages = [11,23,12,23,45,43,22,24,23]
    ages.count(23) will return
    3
    ages.count(100) will return
    0

===Length of the List===
len(list) will return the length of the list ie. the number of objects in the list.
  '''Example'''
    ages = [11,23,12,23,45,43,22,24,23]
    len(ages) will output
    9
To print the objects in the list either use ''for item in list'' or ''for index in range(len(list))''
    for item in ages:       
        print (item)  
        (OR)
    for index in range(len(ages)) :
        print (ages[index])
===Sort the List===
list.sort() will sort the list in ascending order
  '''Example'''
    ages = [11,23,12,23,45,43,22,24,23]
    ages.sort() 
    print (ages) 
    [11, 12, 22, 23, 23, 23, 24, 43, 45]
===Sort the List using sorted() function===
sorted(list1) will sort the list and return a new list, it doesn't modify the original list
&lt;br&gt;'''Example: Sort in ascending order'''
&lt;pre&gt;
ages = [11,23,12,23,45,43,22,24,23]
newList=sorted(ages)
print(newList)

#Output: [11, 12, 22, 23, 23, 23, 24, 43, 45]
&lt;/pre&gt;

&lt;br&gt;'''Example: Sort in descending order'''
&lt;pre&gt;
ages = [11,23,12,23,45,43,22,24,23]
newList=sorted(ages,reverse=True)
print(newList)

#Output: [45, 43, 24, 23, 23, 23, 22, 12, 11]
&lt;/pre&gt;

===Reverse the List===
list.reverse() will reverse the original list
  '''Example'''
    ages = [11, 12, 22, 23, 23, 23, 24, 43, 45]
    ages.reverse()
    print (ages)
    [45, 43, 24, 23, 23, 23, 22, 12, 11]

Both sort() and reverse() list operation will work on numeric and alphanumeric data list.

A special use of the reverse() function is to descend a list that is sorted in ascending order.

  '''Example'''
&lt;pre&gt;
ages = [11, 12, 22, 23, 23, 23, 24, 43, 45]
ages.sort()
print(ages)
ages.reverse()
print(ages)
&lt;/pre&gt;

===Slicing===
Used to retrieve an object or objects in a range as a list  
  '''Example'''
Use ''list[index]'' to retrieve the object at the given index
         In [1]: student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
         In [2]: student[3]     #Object at index 3.  Remember index starts at 0
         Out[2]: 'Geetha'      


Use ''list[start_index : end_index + 1]'' to retrieve objects from the start_index to end_index 
         In [3]: student[2:4]     # Objects from index 2 to 3 as List. Note the [ and ]
         Out[3]: ['Vijay', 'Geetha']   


Use ''list[:]'' to retrieve objects from the starting of the list to the end of the list. 
The default start value will be the starting index of the list (i.e. 0) and the default end value
will be the length of the list 
         In [4]: student[:]        # prints the entire list
         Out[4]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma', 'Janani']


         In [5]: student[:5]       # prints the objects from the start of the list upto object at index 4
         Out[5]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran']


         In [6]: student[2:]       # prints the objects from index 2 upto the end of the list
         Out[6]: ['Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma', 'Janani']


Negative index too is available in Python. It starts from last element of the list. i.e.

         In [7]:student[-1]        #prints last index of list
         Out[7]: 'Janani'


         In [8]:student[-1:-8]     #prints empty list
         Out[8]: []


         In [9]:student[-8:-1]     #prints -8th index to -1st index elements
         Out[9]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma']

===Removing Item from list ===
----

Is used to remove a specific item from the list.

'''Example:'''
 
Use list.remove(entry/value)  Or   del list[index]    Or list.pop(index)
         student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
         student.remove(&quot;Arun&quot;)   #This will delete item &quot;Arun&quot;
         Or    
         del student[0]           # This will delete item at index 0
         Or
         student.pop(0)         # This will delete and return item at index 0


         print(student)    
         Output: [&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]

===Delete list ===
----
Used to delete complete list

'''Example'''

Use del &lt;list name&gt;
         student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
         del student

===Concatenation of two lists===
----
''+'' is the concatenation operator which is used concatenate two lists. 
&lt;pre&gt;
ages1 = [11,23,12,23,45]
ages2 = [25, 24, 43, 47]
age=ages1+ages2
print(age)
#Output: [11, 23, 12, 23, 45, 25, 24, 43, 47]
&lt;/pre&gt;

===Repeatation of a list ===
----
''*'' is the operator to repeat a particular list.
&lt;pre&gt;
ages1 = [11,23,12,23,45]
age=ages1*5 #ages1 list is repeated 5 times and stroed in ''age'' list
print(age)

#Output: [11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45]
&lt;/pre&gt;

*[http://sccilabs.org/jocwiki/index.php/Loops_and_Conditionals_:_Fizzbuzz  Loops and Conditionals: Fizzbuzz]
*[http://sccilabs.org/jocwiki/index.php/Crowd_Computing_:Just_Estimate Crowd Computing: Just Estimate]
*[http://sccilabs.org/jocwiki/index.php/Permutations_:_Jumbled_Words Permutations: Jumbled Words]
*[http://sccilabs.org/jocwiki/index.php/Theory_of_Evolution Theory of Evolution]</text>
      <sha1>tkc8xp7itujn23ifa4l1qt3b09dnvbk</sha1>
    </revision>
    <revision>
      <id>3355</id>
      <parentid>3354</parentid>
      <timestamp>2018-09-26T06:05:43Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="12748">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_3 Contributors of this page]
*Week 3 Playlist: https://www.youtube.com/playlist?list=PLc_j0TNIaWxOVx_z9jAM2UB3RqYNXaoEo
=List=
List is a flexible data structure used for storing a group of data separated by comma. The elements in a list need not be of the same data type.

'''Example:'''
       List_1 = [ 1, 2,3] or 
       List_1 = [&quot;coffee&quot;, &quot;Tea&quot;, &quot;Milk&quot;] or
       List_1 = [1,&quot;coffee&quot;, &quot;Tea&quot;, 3, &quot;5&quot;]

==List Creation==
a) A list can be created by simply putting values (separated by comma) between square brackets as given below,
       List_1 = [1,&quot;coffee&quot;, &quot;Tea&quot;, 3, &quot;5&quot;] #this creates a list by name List_1 containing following items


Or,
(b)A List can be created from scratch and elements can be added 
        List_2 = [ ]
        List_2.append(&quot;Kala&quot;)
        List_2.append(&quot;Mala&quot;)
Here we use &quot;append&quot; ,which is a function in python that enable us to append or attach an element to a list .
Thus List_2 will now hold [&quot;Kala&quot;,&quot;Mala&quot;]

==Operations and Methods to work with List==
&lt;pre&gt;
a = [25,30,50,90,12,13]
b = [100,300,500,200,250]
&lt;/pre&gt;
&lt;hr&gt;
&lt;table border=2&gt;
  &lt;tr&gt;
    &lt;th&gt;&lt;b&gt;Method/&lt;br&gt;Operator&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Function&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Syntax&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Output&lt;/b&gt;&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;len()&lt;/td&gt;
    &lt;td&gt;Find length of a list&lt;/td&gt;
    &lt;td&gt;len(a)&lt;/td&gt;
    &lt;td&gt;6&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;max()&lt;/td&gt;
    &lt;td&gt;Find maximum element from the list&lt;/td&gt;
    &lt;td&gt;max(a)&lt;/td&gt;
    &lt;td&gt;90&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;min()&lt;/td&gt;
    &lt;td&gt;Find minimum element from the list&lt;/td&gt;
    &lt;td&gt;min(a)&lt;/td&gt;
    &lt;td&gt;12&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sum()&lt;/td&gt;
    &lt;td&gt;Returns sum of all elements of the list&lt;/td&gt;
    &lt;td&gt;sum(a)&lt;/td&gt;
    &lt;td&gt;220&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;reverse()&lt;/td&gt;
    &lt;td&gt;Reverses the original list&lt;/td&gt;
    &lt;td&gt;a.reverse()&lt;/td&gt;
    &lt;td&gt;[13, 12, 90, 50, 30, 25]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sort()&lt;/td&gt;
    &lt;td&gt;Sorts the original list in ascending order&lt;/td&gt;
    &lt;td&gt;a.sort()&lt;/td&gt;
    &lt;td&gt;[12, 13, 25, 30, 50, 90]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sorted()&lt;/td&gt;
    &lt;td&gt;Returns the new sorted list &lt;/td&gt;
    &lt;td&gt;sorted(a)&lt;/td&gt;
    &lt;td&gt;[12, 13, 25, 30, 50, 90]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;insert()&lt;/td&gt;
    &lt;td&gt;Insert at a particular index in the list, and shifts remaining elements&lt;/td&gt;
    &lt;td&gt;a.insert(3,3)&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 3, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;append()&lt;/td&gt;
    &lt;td&gt;Adds elements/object to the end of the list&lt;/td&gt;
    &lt;td&gt;a.append(5)&lt;br&gt;a.append([10,20])&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 5]&lt;br&gt;[25, 30, 50, 90, 12, 13, [10, 20]]&lt;br&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;extend()&lt;/td&gt;
    &lt;td&gt;Adds object to the end of the list as elements not as object&lt;/td&gt;
    &lt;td&gt;a.extend([10,20])&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 10, 20]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;*&amp;nbsp;&amp;nbsp;Repeatation&lt;br&gt;operator&lt;/td&gt;
    &lt;td&gt;Repeat the list for n times and returns a new list&lt;/td&gt;
    &lt;td&gt;a*2&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 25, 30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;+ Concatenation&lt;br&gt;operator&lt;/td&gt;
    &lt;td&gt;Concatenates two lists, and returns a new list&lt;/td&gt;
    &lt;td&gt;a+b&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 100, 300, 500, 200, 250]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;index()&lt;/td&gt;
    &lt;td&gt;Finds index of a particular element in the list or not&lt;/td&gt;
    &lt;td&gt;a.index(25)&lt;br&gt;a.index(0)&lt;br&gt;&lt;/td&gt;
    &lt;td&gt;0&lt;br&gt;&lt;br&gt;ValueError: 0 is not in list&lt;br&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;in operator&lt;/td&gt;
    &lt;td&gt;Finds whether a particular element is in the list or not, returns boolean&lt;/td&gt;
    &lt;td&gt;25 in a&lt;/td&gt;
    &lt;td&gt;True&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;not in operator&lt;/td&gt;
    &lt;td&gt;Checks if element is not available in list, returns boolean&lt;/td&gt;
    &lt;td&gt;25 not in a&lt;/td&gt;
    &lt;td&gt;False&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;count()&lt;/td&gt;
    &lt;td&gt;Counts the number of occurence of an element in the list&lt;/td&gt;
    &lt;td&gt;a.count(25)&lt;/td&gt;
    &lt;td&gt;1&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;remove()&lt;/td&gt;
    &lt;td&gt;Removes an element from the list&lt;/td&gt;
    &lt;td&gt;a.remove(25)&lt;/td&gt;
    &lt;td&gt; [30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;pop()&lt;/td&gt;
    &lt;td&gt;Delete and return item at index 0&lt;/td&gt;
    &lt;td&gt;a.pop(0)&lt;/td&gt;
    &lt;td&gt;25 , a will be [30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;del&lt;/td&gt;
    &lt;td&gt;Deletes item at a particular index from the list&lt;/td&gt;
    &lt;td&gt;del a[0]&lt;/td&gt;
    &lt;td&gt;[30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;

==Printing the List==
=== Print whole list ===
A list can be printed simply or using a ''for / while'' loop 

 print(List_2)     # To print the entire list
This code will print      
 ['Kala','Mala']     

===Print element at a particular index===
&lt;pre&gt;
Using index position
    List_2[0]     # prints 'Kala' ,i.e,the value at index position 0.
    List_2[1]     # prints 'Mala'.
&lt;/pre&gt;
=== Without using index position ===
&lt;pre&gt;
for item in List_2:   # here item is a variable used to access elements in list.
       print(item)
   This code snippet prints 
    Kala
    Mala
&lt;/pre&gt;

==Search for a particular element in list==
Elements in a list can be searched by one of the two ways:
=== using index() function===
&lt;pre&gt;
ages1 = [11,23,12,23,45]

#if element is available in the list, index() returns the index value on which, the element is present.
print(ages1.index(45))#Output: 4

#if element is not available in the list, index() returns ''ValueError''
print(ages1.index(0))#Output: ValueError:
&lt;/pre&gt;

In programming, if such error occurs, program gets terminated. It can be solved using exception handling.
e.g.
&lt;pre&gt;
ages1 = [11,23,12,23,45]

try:
    print(ages1.index(0))
except ValueError:
    print(&quot;Exception has occured&quot;)    
    print(&quot;Element is not found in the list&quot;)

&lt;/pre&gt;
&lt;pre&gt;
'''Output: 
Exception has occured
Element is not found in the list
'''&lt;/pre&gt;

=== using 'in' operator===
''in'' operator is used to check whether a particular element is available in the list or not.e.g.

&lt;pre&gt;
ages1 = [11,23,12,23,45]
no=11

if no in ages1:
    print(&quot;no is there in the list&quot;)
else:    
    print(&quot;no is NOT there in the list&quot;)
&lt;/pre&gt;
&lt;pre&gt;
#Output: no is there in the list
&lt;/pre&gt;

'''Number is not there in the list'''
&lt;pre&gt;
ages1 = [11,23,12,23,45]
no=15

if no in ages1:
    print(&quot;no is there in the list&quot;)
else:    
    print(&quot;no is NOT there in the list&quot;)
&lt;/pre&gt;
&lt;pre&gt;
Output: no is NOT there in the list
&lt;/pre&gt;


==Updating the List==
The lists can be updated using ''append'' or ''insert'' function.  Append adds the element to the end of the list and Insert adds the element in the specified position.
   List_2.append(&quot;Sheela&quot;)    # add the element 'Sheela' to the end of the list.
   print (List_2) will output 
   ['Kala', 'Mala', 'Sheela']
   
   List_2.insert(1,&quot;Bala&quot;)    # add the element &quot;Bala&quot; in the list at the index 1.
   print (List_2) will output 
   ['Kala', 'Bala','Mala', 'Sheela']

=== Extend the list by adding elements of other list at end using extend()===
&lt;pre&gt;
ages = [11,23,12,23,45]
ages.extend([57,58])
print(ages)
&lt;/pre&gt;

&lt;pre&gt;
#Output: [11, 23, 12, 23, 45, 57, 58]
&lt;/pre&gt;

==== Difference between ''append and extend'' ====
Difference between append and extend can be easily understood, by the following example.

&lt;pre&gt;
appendlist = [11,23,12,23,45]
appendlist.append([57,58])

extendlist= [11,23,12,23,45]
extendlist.extend([57,58])
&lt;/pre&gt;

&lt;pre&gt;
'''Output:
[11, 23, 12, 23, 45, [57, 58]]
[11, 23, 12, 23, 45, 57, 58]'''
&lt;/pre&gt;

==Basic Operations on List==
===Frequency of Occurrence===
list.count(object) will return the number of times the object occur in the list.
  '''Example'''
    ages = [11,23,12,23,45,43,22,24,23]
    ages.count(23) will return
    3
    ages.count(100) will return
    0

===Length of the List===
len(list) will return the length of the list ie. the number of objects in the list.
  '''Example'''
    ages = [11,23,12,23,45,43,22,24,23]
    len(ages) will output
    9
To print the objects in the list either use ''for item in list'' or ''for index in range(len(list))''
    for item in ages:       
        print (item)  
        (OR)
    for index in range(len(ages)) :
        print (ages[index])
===Sort the List===
list.sort() will sort the list in ascending order
  '''Example'''
    ages = [11,23,12,23,45,43,22,24,23]
    ages.sort() 
    print (ages) 
    [11, 12, 22, 23, 23, 23, 24, 43, 45]
===Sort the List using sorted() function===
sorted(list1) will sort the list and return a new list, it doesn't modify the original list
&lt;br&gt;'''Example: Sort in ascending order'''
&lt;pre&gt;
ages = [11,23,12,23,45,43,22,24,23]
newList=sorted(ages)
print(newList)

#Output: [11, 12, 22, 23, 23, 23, 24, 43, 45]
&lt;/pre&gt;

&lt;br&gt;'''Example: Sort in descending order'''
&lt;pre&gt;
ages = [11,23,12,23,45,43,22,24,23]
newList=sorted(ages,reverse=True)
print(newList)

#Output: [45, 43, 24, 23, 23, 23, 22, 12, 11]
&lt;/pre&gt;

===Reverse the List===
list.reverse() will reverse the original list
  '''Example'''
    ages = [11, 12, 22, 23, 23, 23, 24, 43, 45]
    ages.reverse()
    print (ages)
    [45, 43, 24, 23, 23, 23, 22, 12, 11]

Both sort() and reverse() list operation will work on numeric and alphanumeric data list.

A special use of the reverse() function is to descend a list that is sorted in ascending order.

  '''Example'''
&lt;pre&gt;
ages = [11, 12, 22, 23, 23, 23, 24, 43, 45]
ages.sort()
print(ages)
ages.reverse()
print(ages)
&lt;/pre&gt;

===Slicing===
Used to retrieve an object or objects in a range as a list  
  '''Example'''
Use ''list[index]'' to retrieve the object at the given index
         In [1]: student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
         In [2]: student[3]     #Object at index 3.  Remember index starts at 0
         Out[2]: 'Geetha'      


Use ''list[start_index : end_index + 1]'' to retrieve objects from the start_index to end_index 
         In [3]: student[2:4]     # Objects from index 2 to 3 as List. Note the [ and ]
         Out[3]: ['Vijay', 'Geetha']   


Use ''list[:]'' to retrieve objects from the starting of the list to the end of the list. 
The default start value will be the starting index of the list (i.e. 0) and the default end value
will be the length of the list 
         In [4]: student[:]        # prints the entire list
         Out[4]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma', 'Janani']


         In [5]: student[:5]       # prints the objects from the start of the list upto object at index 4
         Out[5]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran']


         In [6]: student[2:]       # prints the objects from index 2 upto the end of the list
         Out[6]: ['Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma', 'Janani']


Negative index too is available in Python. It starts from last element of the list. i.e.

         In [7]:student[-1]        #prints last index of list
         Out[7]: 'Janani'


         In [8]:student[-1:-8]     #prints empty list
         Out[8]: []


         In [9]:student[-8:-1]     #prints -8th index to -1st index elements
         Out[9]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma']

===Removing Item from list ===
----

Is used to remove a specific item from the list.

'''Example:'''
 
Use list.remove(entry/value)  Or   del list[index]    Or list.pop(index)
         student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
         student.remove(&quot;Arun&quot;)   #This will delete item &quot;Arun&quot;
         Or    
         del student[0]           # This will delete item at index 0
         Or
         student.pop(0)         # This will delete and return item at index 0


         print(student)    
         Output: [&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]

===Delete list ===
----
Used to delete complete list

'''Example'''

Use del &lt;list name&gt;
         student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
         del student

===Concatenation of two lists===
----
''+'' is the concatenation operator which is used concatenate two lists. 
&lt;pre&gt;
ages1 = [11,23,12,23,45]
ages2 = [25, 24, 43, 47]
age=ages1+ages2
print(age)
#Output: [11, 23, 12, 23, 45, 25, 24, 43, 47]
&lt;/pre&gt;

===Repeatation of a list ===
----
''*'' is the operator to repeat a particular list.
&lt;pre&gt;
ages1 = [11,23,12,23,45]
age=ages1*5 #ages1 list is repeated 5 times and stroed in ''age'' list
print(age)

#Output: [11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45]
&lt;/pre&gt;

*[http://sccilabs.org/jocwiki/index.php/Loops_and_Conditionals_:_Fizzbuzz  Loops and Conditionals: Fizzbuzz]
*[http://sccilabs.org/jocwiki/index.php/Crowd_Computing_:Just_Estimate Crowd Computing: Just Estimate]
*[http://sccilabs.org/jocwiki/index.php/Permutations_:_Jumbled_Words Permutations: Jumbled Words]
*[http://sccilabs.org/jocwiki/index.php/Theory_of_Evolution Theory of Evolution]</text>
      <sha1>ktxjf2s0vcbmmze4ibcveqekgq21z7t</sha1>
    </revision>
    <revision>
      <id>3356</id>
      <parentid>3355</parentid>
      <timestamp>2018-09-26T06:08:24Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="19284">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_3 Contributors of this page]
*Week 3 Playlist: https://www.youtube.com/playlist?list=PLc_j0TNIaWxOVx_z9jAM2UB3RqYNXaoEo
=List=
List is a flexible data structure used for storing a group of data separated by comma. The elements in a list need not be of the same data type.

'''Example:'''
       List_1 = [ 1, 2,3] or 
       List_1 = [&quot;coffee&quot;, &quot;Tea&quot;, &quot;Milk&quot;] or
       List_1 = [1,&quot;coffee&quot;, &quot;Tea&quot;, 3, &quot;5&quot;]

==List Creation==
a) A list can be created by simply putting values (separated by comma) between square brackets as given below,
       List_1 = [1,&quot;coffee&quot;, &quot;Tea&quot;, 3, &quot;5&quot;] #this creates a list by name List_1 containing following items


Or,
(b)A List can be created from scratch and elements can be added 
        List_2 = [ ]
        List_2.append(&quot;Kala&quot;)
        List_2.append(&quot;Mala&quot;)
Here we use &quot;append&quot; ,which is a function in python that enable us to append or attach an element to a list .
Thus List_2 will now hold [&quot;Kala&quot;,&quot;Mala&quot;]

==Operations and Methods to work with List==
&lt;pre&gt;
a = [25,30,50,90,12,13]
b = [100,300,500,200,250]
&lt;/pre&gt;
&lt;hr&gt;
&lt;table border=2&gt;
  &lt;tr&gt;
    &lt;th&gt;&lt;b&gt;Method/&lt;br&gt;Operator&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Function&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Syntax&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Output&lt;/b&gt;&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;len()&lt;/td&gt;
    &lt;td&gt;Find length of a list&lt;/td&gt;
    &lt;td&gt;len(a)&lt;/td&gt;
    &lt;td&gt;6&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;max()&lt;/td&gt;
    &lt;td&gt;Find maximum element from the list&lt;/td&gt;
    &lt;td&gt;max(a)&lt;/td&gt;
    &lt;td&gt;90&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;min()&lt;/td&gt;
    &lt;td&gt;Find minimum element from the list&lt;/td&gt;
    &lt;td&gt;min(a)&lt;/td&gt;
    &lt;td&gt;12&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sum()&lt;/td&gt;
    &lt;td&gt;Returns sum of all elements of the list&lt;/td&gt;
    &lt;td&gt;sum(a)&lt;/td&gt;
    &lt;td&gt;220&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;reverse()&lt;/td&gt;
    &lt;td&gt;Reverses the original list&lt;/td&gt;
    &lt;td&gt;a.reverse()&lt;/td&gt;
    &lt;td&gt;[13, 12, 90, 50, 30, 25]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sort()&lt;/td&gt;
    &lt;td&gt;Sorts the original list in ascending order&lt;/td&gt;
    &lt;td&gt;a.sort()&lt;/td&gt;
    &lt;td&gt;[12, 13, 25, 30, 50, 90]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sorted()&lt;/td&gt;
    &lt;td&gt;Returns the new sorted list &lt;/td&gt;
    &lt;td&gt;sorted(a)&lt;/td&gt;
    &lt;td&gt;[12, 13, 25, 30, 50, 90]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;insert()&lt;/td&gt;
    &lt;td&gt;Insert at a particular index in the list, and shifts remaining elements&lt;/td&gt;
    &lt;td&gt;a.insert(3,3)&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 3, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;append()&lt;/td&gt;
    &lt;td&gt;Adds elements/object to the end of the list&lt;/td&gt;
    &lt;td&gt;a.append(5)&lt;br&gt;a.append([10,20])&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 5]&lt;br&gt;[25, 30, 50, 90, 12, 13, [10, 20]]&lt;br&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;extend()&lt;/td&gt;
    &lt;td&gt;Adds object to the end of the list as elements not as object&lt;/td&gt;
    &lt;td&gt;a.extend([10,20])&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 10, 20]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;*&amp;nbsp;&amp;nbsp;Repeatation&lt;br&gt;operator&lt;/td&gt;
    &lt;td&gt;Repeat the list for n times and returns a new list&lt;/td&gt;
    &lt;td&gt;a*2&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 25, 30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;+ Concatenation&lt;br&gt;operator&lt;/td&gt;
    &lt;td&gt;Concatenates two lists, and returns a new list&lt;/td&gt;
    &lt;td&gt;a+b&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 100, 300, 500, 200, 250]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;index()&lt;/td&gt;
    &lt;td&gt;Finds index of a particular element in the list or not&lt;/td&gt;
    &lt;td&gt;a.index(25)&lt;br&gt;a.index(0)&lt;br&gt;&lt;/td&gt;
    &lt;td&gt;0&lt;br&gt;&lt;br&gt;ValueError: 0 is not in list&lt;br&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;in operator&lt;/td&gt;
    &lt;td&gt;Finds whether a particular element is in the list or not, returns boolean&lt;/td&gt;
    &lt;td&gt;25 in a&lt;/td&gt;
    &lt;td&gt;True&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;not in operator&lt;/td&gt;
    &lt;td&gt;Checks if element is not available in list, returns boolean&lt;/td&gt;
    &lt;td&gt;25 not in a&lt;/td&gt;
    &lt;td&gt;False&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;count()&lt;/td&gt;
    &lt;td&gt;Counts the number of occurence of an element in the list&lt;/td&gt;
    &lt;td&gt;a.count(25)&lt;/td&gt;
    &lt;td&gt;1&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;remove()&lt;/td&gt;
    &lt;td&gt;Removes an element from the list&lt;/td&gt;
    &lt;td&gt;a.remove(25)&lt;/td&gt;
    &lt;td&gt; [30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;pop()&lt;/td&gt;
    &lt;td&gt;Delete and return item at index 0&lt;/td&gt;
    &lt;td&gt;a.pop(0)&lt;/td&gt;
    &lt;td&gt;25 , a will be [30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;del&lt;/td&gt;
    &lt;td&gt;Deletes item at a particular index from the list&lt;/td&gt;
    &lt;td&gt;del a[0]&lt;/td&gt;
    &lt;td&gt;[30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;

==Printing the List==
=== Print whole list ===
A list can be printed simply or using a ''for / while'' loop 

 print(List_2)     # To print the entire list
This code will print      
 ['Kala','Mala']     

===Print element at a particular index===
&lt;pre&gt;
Using index position
    List_2[0]     # prints 'Kala' ,i.e,the value at index position 0.
    List_2[1]     # prints 'Mala'.
&lt;/pre&gt;
=== Without using index position ===
&lt;pre&gt;
for item in List_2:   # here item is a variable used to access elements in list.
       print(item)
   This code snippet prints 
    Kala
    Mala
&lt;/pre&gt;

==Search for a particular element in list==
Elements in a list can be searched by one of the two ways:
=== using index() function===
&lt;pre&gt;
ages1 = [11,23,12,23,45]

#if element is available in the list, index() returns the index value on which, the element is present.
print(ages1.index(45))#Output: 4

#if element is not available in the list, index() returns ''ValueError''
print(ages1.index(0))#Output: ValueError:
&lt;/pre&gt;

In programming, if such error occurs, program gets terminated. It can be solved using exception handling.
e.g.
&lt;pre&gt;
ages1 = [11,23,12,23,45]

try:
    print(ages1.index(0))
except ValueError:
    print(&quot;Exception has occured&quot;)    
    print(&quot;Element is not found in the list&quot;)

&lt;/pre&gt;
&lt;pre&gt;
'''Output: 
Exception has occured
Element is not found in the list
'''&lt;/pre&gt;

=== using 'in' operator===
''in'' operator is used to check whether a particular element is available in the list or not.e.g.

&lt;pre&gt;
ages1 = [11,23,12,23,45]
no=11

if no in ages1:
    print(&quot;no is there in the list&quot;)
else:    
    print(&quot;no is NOT there in the list&quot;)
&lt;/pre&gt;
&lt;pre&gt;
#Output: no is there in the list
&lt;/pre&gt;

'''Number is not there in the list'''
&lt;pre&gt;
ages1 = [11,23,12,23,45]
no=15

if no in ages1:
    print(&quot;no is there in the list&quot;)
else:    
    print(&quot;no is NOT there in the list&quot;)
&lt;/pre&gt;
&lt;pre&gt;
Output: no is NOT there in the list
&lt;/pre&gt;


==Updating the List==
The lists can be updated using ''append'' or ''insert'' function.  Append adds the element to the end of the list and Insert adds the element in the specified position.
   List_2.append(&quot;Sheela&quot;)    # add the element 'Sheela' to the end of the list.
   print (List_2) will output 
   ['Kala', 'Mala', 'Sheela']
   
   List_2.insert(1,&quot;Bala&quot;)    # add the element &quot;Bala&quot; in the list at the index 1.
   print (List_2) will output 
   ['Kala', 'Bala','Mala', 'Sheela']

=== Extend the list by adding elements of other list at end using extend()===
&lt;pre&gt;
ages = [11,23,12,23,45]
ages.extend([57,58])
print(ages)
&lt;/pre&gt;

&lt;pre&gt;
#Output: [11, 23, 12, 23, 45, 57, 58]
&lt;/pre&gt;

==== Difference between ''append and extend'' ====
Difference between append and extend can be easily understood, by the following example.

&lt;pre&gt;
appendlist = [11,23,12,23,45]
appendlist.append([57,58])

extendlist= [11,23,12,23,45]
extendlist.extend([57,58])
&lt;/pre&gt;

&lt;pre&gt;
'''Output:
[11, 23, 12, 23, 45, [57, 58]]
[11, 23, 12, 23, 45, 57, 58]'''
&lt;/pre&gt;

==Basic Operations on List==
===Frequency of Occurrence===
list.count(object) will return the number of times the object occur in the list.
  '''Example'''
    ages = [11,23,12,23,45,43,22,24,23]
    ages.count(23) will return
    3
    ages.count(100) will return
    0

===Length of the List===
len(list) will return the length of the list ie. the number of objects in the list.
  '''Example'''
    ages = [11,23,12,23,45,43,22,24,23]
    len(ages) will output
    9
To print the objects in the list either use ''for item in list'' or ''for index in range(len(list))''
    for item in ages:       
        print (item)  
        (OR)
    for index in range(len(ages)) :
        print (ages[index])
===Sort the List===
list.sort() will sort the list in ascending order
  '''Example'''
    ages = [11,23,12,23,45,43,22,24,23]
    ages.sort() 
    print (ages) 
    [11, 12, 22, 23, 23, 23, 24, 43, 45]
===Sort the List using sorted() function===
sorted(list1) will sort the list and return a new list, it doesn't modify the original list
&lt;br&gt;'''Example: Sort in ascending order'''
&lt;pre&gt;
ages = [11,23,12,23,45,43,22,24,23]
newList=sorted(ages)
print(newList)

#Output: [11, 12, 22, 23, 23, 23, 24, 43, 45]
&lt;/pre&gt;

&lt;br&gt;'''Example: Sort in descending order'''
&lt;pre&gt;
ages = [11,23,12,23,45,43,22,24,23]
newList=sorted(ages,reverse=True)
print(newList)

#Output: [45, 43, 24, 23, 23, 23, 22, 12, 11]
&lt;/pre&gt;

===Reverse the List===
list.reverse() will reverse the original list
  '''Example'''
    ages = [11, 12, 22, 23, 23, 23, 24, 43, 45]
    ages.reverse()
    print (ages)
    [45, 43, 24, 23, 23, 23, 22, 12, 11]

Both sort() and reverse() list operation will work on numeric and alphanumeric data list.

A special use of the reverse() function is to descend a list that is sorted in ascending order.

  '''Example'''
&lt;pre&gt;
ages = [11, 12, 22, 23, 23, 23, 24, 43, 45]
ages.sort()
print(ages)
ages.reverse()
print(ages)
&lt;/pre&gt;

===Slicing===
Used to retrieve an object or objects in a range as a list  
  '''Example'''
Use ''list[index]'' to retrieve the object at the given index
         In [1]: student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
         In [2]: student[3]     #Object at index 3.  Remember index starts at 0
         Out[2]: 'Geetha'      


Use ''list[start_index : end_index + 1]'' to retrieve objects from the start_index to end_index 
         In [3]: student[2:4]     # Objects from index 2 to 3 as List. Note the [ and ]
         Out[3]: ['Vijay', 'Geetha']   


Use ''list[:]'' to retrieve objects from the starting of the list to the end of the list. 
The default start value will be the starting index of the list (i.e. 0) and the default end value
will be the length of the list 
         In [4]: student[:]        # prints the entire list
         Out[4]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma', 'Janani']


         In [5]: student[:5]       # prints the objects from the start of the list upto object at index 4
         Out[5]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran']


         In [6]: student[2:]       # prints the objects from index 2 upto the end of the list
         Out[6]: ['Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma', 'Janani']


Negative index too is available in Python. It starts from last element of the list. i.e.

         In [7]:student[-1]        #prints last index of list
         Out[7]: 'Janani'


         In [8]:student[-1:-8]     #prints empty list
         Out[8]: []


         In [9]:student[-8:-1]     #prints -8th index to -1st index elements
         Out[9]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma']

===Removing Item from list ===
----

Is used to remove a specific item from the list.

'''Example:'''
 
Use list.remove(entry/value)  Or   del list[index]    Or list.pop(index)
         student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
         student.remove(&quot;Arun&quot;)   #This will delete item &quot;Arun&quot;
         Or    
         del student[0]           # This will delete item at index 0
         Or
         student.pop(0)         # This will delete and return item at index 0


         print(student)    
         Output: [&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]

===Delete list ===
----
Used to delete complete list

'''Example'''

Use del &lt;list name&gt;
         student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
         del student

===Concatenation of two lists===
----
''+'' is the concatenation operator which is used concatenate two lists. 
&lt;pre&gt;
ages1 = [11,23,12,23,45]
ages2 = [25, 24, 43, 47]
age=ages1+ages2
print(age)
#Output: [11, 23, 12, 23, 45, 25, 24, 43, 47]
&lt;/pre&gt;

===Repeatation of a list ===
----
''*'' is the operator to repeat a particular list.
&lt;pre&gt;
ages1 = [11,23,12,23,45]
age=ages1*5 #ages1 list is repeated 5 times and stroed in ''age'' list
print(age)

#Output: [11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45]
&lt;/pre&gt;
===='''Conditional Statements'''====
    Conditionals are used to check the condition and change the flow of the program 
accordingly. They are realized in programming languages through if statement. The 
syntax is as follows :
         if condition : 
            statement
    '''Note:''' Do not forget indentation (inserting space/tab) in the line after the
 if condition.
    
    In case you want to execute a set of statements when a condition is true and another

set of statement when the condition is false.
         if condition : 
            statement 1
         else :
            statement 2
    
    Multiple if-else statements can be written as follows:
         if condition_1 : 
            statement 1
         elif condition_2 : # 'elif' is short for 'else if'
            statement 2
         elif condition_3 :
            statement 3
        .
        .
         else :
            final statement
=Loops and Conditionals : Fizzbuzz=
===='''Loops'''====

    Loops are used to execute a set of repetitive statements. They are realized
 through 'while' and 'for' loops in programming languages. The syntax of 'for' loop is 
as follows :
        for LOOPVARIABLE in SEQUENCE: 
            STATEMENTS
    '''e.g.''' to print all the data from a list we can write:
        for item in list_name
            print(item)
    OR
        for index in range(len(list_name))
            print(list_name[index])
    
    The syntax for while loop is as follows :
    
        while BOOLEANEXPRESSION: 
            STATEMENTS
            INCREMENT/DECREMENT
    
    '''e.g.''' if we want to print all numbers from 1 to 10
        i=1
        while i&lt;=10 :
            print(i,&quot; &quot;)
            i=i+1
    
    'while' loop has indefinite iteration (run-time unknown). So, there must be loop
 break statement in it.
 Whereas 'for' loop is definite in nature (i.e. known or predictable span).&lt;br&gt;

&lt;b&gt;NOTE: Python doesn't have anything like do-while loop.&lt;/b&gt;

==Implementation==
Here, we try to demonstrate the concept of loops and conditionals through a game called Fizzbuzz. The rules are as follows :&lt;br/&gt;
[[File:fizzBuzz.gif]]

• if input number is a multiple of ’3’ print ”Fizz”
&lt;br/&gt;
• if input number is a multiple of ’5’ print ”Buzz”
&lt;br/&gt;
• if input number is a multiple of both '3' and ’5’ print ”FizzBuzz”
&lt;br/&gt;
The pseudo code is as follows :
&lt;pre&gt;
   If input no % 3 == 0 and  input no % 5 == 0 : 
       print ”Fizzbuzz”
   else if input no % 3 == 0 : 
       print ”Fizz”
   else if input no % 5 == 0 : 
       print ”Buzz”
   else :
       print the input no
&lt;/pre&gt;
The order of statements execution matters to get the desired output. The highest priority condition should be first followed by other. In fizzbuzz programming, first checking should be done for both divisibility of 3 and 5. If condition not satisfied only then it should check individually for 3 or 5. So carefully choosing the order is crucial for better programming.
Note: There is some effect of present condition statements chosen on next conditions statements. That is why in first attempt fizzbuzz programming got struck.

Example: 
&lt;pre&gt;
#Code to achieve the above requirement in python3.
i = int(input(&quot;Enter the number&quot;)) 
if i%3 == 0 and i%5 == 0: print(i,&quot;FizzBuzz&quot;)  
elif i%5 == 0: print(i,&quot;Buzz&quot;)
elif i%3 == 0: print(i,&quot;Fizz&quot;)
else: print(i)
&lt;/pre&gt;
Lets put the same into a loop for a range given by the user.
&lt;pre&gt;
def fizzbuzzgame(start,stop):
    for i in range(start,stop+1):
        if i%3 == 0 and i%5 == 0:
            print(i,&quot;FizzBuzz&quot;)
        elif i%5 == 0:
            print(i,&quot;Buzz&quot;)
        elif i%3 == 0:
            print(i,&quot;Fizz&quot;)
        else: print(i)

fizzbuzzgame(50,100)
&lt;/pre&gt;


=== Fizz Buzz game in Interactive mode with Score ===
'''By Ms. Ami Tusharkant Choksi'''
&lt;pre&gt;
def fizzbuzzgame(i):
        if i%3 == 0 and i%5 == 0:
            print(i,&quot;FizzBuzz&quot;)
            return(&quot;fzbz&quot;)
        elif i%5 == 0:
            print(i,&quot;Buzz&quot;)
            return(&quot;bz&quot;)
        elif i%3 == 0:
            print(i,&quot;Fizz&quot;)
            return(&quot;fz&quot;)
        else:
            print(i)
            return(&quot;no&quot;)

ch = 'y'
fizzbuzz=0
fizz=0
buzz=0
nothing=0
print(&quot;&quot;&quot;
 _____  ____  _____  _____  ____   __ __  _____  _____       ____   ____  ___ ___    ___ 
|     ||    ||     ||     ||    \ |  |  ||     ||     |     /    | /    ||   |   |  /  _]
|   __| |  | |__/  ||__/  ||  o  )|  |  ||__/  ||__/  |    |   __||  o  || _   _ | /  [_ 
|  |_   |  | |   __||   __||     ||  |  ||   __||   __|    |  |  ||     ||  \_/  ||    _]
|   _]  |  | |  /  ||  /  ||  O  ||  :  ||  /  ||  /  |    |  |_ ||  _  ||   |   ||   [_ 
|  |    |  | |     ||     ||     ||     ||     ||     |    |     ||  |  ||   |   ||     |
|__|   |____||_____||_____||_____| \__,_||_____||_____|    |___,_||__|__||___|___||_____|
                                                                                         
&quot;&quot;&quot;)   

while(ch == 'y'):
    n=int(input(&quot;Enter a Number : &quot;))
    winLoose=fizzbuzzgame(n)
    if(winLoose == &quot;fz&quot;):
        fizz+=1
    elif(winLoose == &quot;bz&quot;):
        buzz+=1
    elif(winLoose == &quot;fzbz&quot;):
        fizzbuzz+=1
    ch=input(&quot;Do you want to continue playing the game : (y/n)&quot;)
    if(ch=='n'):
        print('Congratulations, your score is\n FizzBuzz:%d\nFizz:%d\nBuzz:%d' %
(fizzbuzz,fizz,buzz))
    
'''Sample Output:

 _____  ____  _____  _____  ____   __ __  _____  _____       ____   ____  ___ ___    ___ 
|     ||    ||     ||     ||    \ |  |  ||     ||     |     /    | /    ||   |   |  /  _]
|   __| |  | |__/  ||__/  ||  o  )|  |  ||__/  ||__/  |    |   __||  o  || _   _ | /  [_ 
|  |_   |  | |   __||   __||     ||  |  ||   __||   __|    |  |  ||     ||  \_/  ||    _]
|   _]  |  | |  /  ||  /  ||  O  ||  :  ||  /  ||  /  |    |  |_ ||  _  ||   |   ||   [_ 
|  |    |  | |     ||     ||     ||     ||     ||     |    |     ||  |  ||   |   ||     |
|__|   |____||_____||_____||_____| \__,_||_____||_____|    |___,_||__|__||___|___||_____|
                                                                                         

Enter a Number : 666
666 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 777
777 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 555
555 FizzBuzz
Do you want to continue playing the game : (y/n)y
Enter a Number : 1
1
Do you want to continue playing the game : (y/n)y
Enter a Number : 789
789 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 25
25 Buzz
Do you want to continue playing the game : (y/n)n
Congratulations, your score is

FizzBuzz:1
Fizz:3
Buzz:1

&lt;/pre&gt;


*[http://sccilabs.org/jocwiki/index.php/Crowd_Computing_:Just_Estimate Crowd Computing: Just Estimate]
*[http://sccilabs.org/jocwiki/index.php/Permutations_:_Jumbled_Words Permutations: Jumbled Words]
*[http://sccilabs.org/jocwiki/index.php/Theory_of_Evolution Theory of Evolution]</text>
      <sha1>e4c3kylp90agxhgsqxlgbmsq7kqgzfh</sha1>
    </revision>
    <revision>
      <id>3357</id>
      <parentid>3356</parentid>
      <timestamp>2018-09-26T06:08:42Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* Conditional Statements */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="19279">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_3 Contributors of this page]
*Week 3 Playlist: https://www.youtube.com/playlist?list=PLc_j0TNIaWxOVx_z9jAM2UB3RqYNXaoEo
=List=
List is a flexible data structure used for storing a group of data separated by comma. The elements in a list need not be of the same data type.

'''Example:'''
       List_1 = [ 1, 2,3] or 
       List_1 = [&quot;coffee&quot;, &quot;Tea&quot;, &quot;Milk&quot;] or
       List_1 = [1,&quot;coffee&quot;, &quot;Tea&quot;, 3, &quot;5&quot;]

==List Creation==
a) A list can be created by simply putting values (separated by comma) between square brackets as given below,
       List_1 = [1,&quot;coffee&quot;, &quot;Tea&quot;, 3, &quot;5&quot;] #this creates a list by name List_1 containing following items


Or,
(b)A List can be created from scratch and elements can be added 
        List_2 = [ ]
        List_2.append(&quot;Kala&quot;)
        List_2.append(&quot;Mala&quot;)
Here we use &quot;append&quot; ,which is a function in python that enable us to append or attach an element to a list .
Thus List_2 will now hold [&quot;Kala&quot;,&quot;Mala&quot;]

==Operations and Methods to work with List==
&lt;pre&gt;
a = [25,30,50,90,12,13]
b = [100,300,500,200,250]
&lt;/pre&gt;
&lt;hr&gt;
&lt;table border=2&gt;
  &lt;tr&gt;
    &lt;th&gt;&lt;b&gt;Method/&lt;br&gt;Operator&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Function&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Syntax&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Output&lt;/b&gt;&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;len()&lt;/td&gt;
    &lt;td&gt;Find length of a list&lt;/td&gt;
    &lt;td&gt;len(a)&lt;/td&gt;
    &lt;td&gt;6&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;max()&lt;/td&gt;
    &lt;td&gt;Find maximum element from the list&lt;/td&gt;
    &lt;td&gt;max(a)&lt;/td&gt;
    &lt;td&gt;90&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;min()&lt;/td&gt;
    &lt;td&gt;Find minimum element from the list&lt;/td&gt;
    &lt;td&gt;min(a)&lt;/td&gt;
    &lt;td&gt;12&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sum()&lt;/td&gt;
    &lt;td&gt;Returns sum of all elements of the list&lt;/td&gt;
    &lt;td&gt;sum(a)&lt;/td&gt;
    &lt;td&gt;220&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;reverse()&lt;/td&gt;
    &lt;td&gt;Reverses the original list&lt;/td&gt;
    &lt;td&gt;a.reverse()&lt;/td&gt;
    &lt;td&gt;[13, 12, 90, 50, 30, 25]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sort()&lt;/td&gt;
    &lt;td&gt;Sorts the original list in ascending order&lt;/td&gt;
    &lt;td&gt;a.sort()&lt;/td&gt;
    &lt;td&gt;[12, 13, 25, 30, 50, 90]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sorted()&lt;/td&gt;
    &lt;td&gt;Returns the new sorted list &lt;/td&gt;
    &lt;td&gt;sorted(a)&lt;/td&gt;
    &lt;td&gt;[12, 13, 25, 30, 50, 90]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;insert()&lt;/td&gt;
    &lt;td&gt;Insert at a particular index in the list, and shifts remaining elements&lt;/td&gt;
    &lt;td&gt;a.insert(3,3)&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 3, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;append()&lt;/td&gt;
    &lt;td&gt;Adds elements/object to the end of the list&lt;/td&gt;
    &lt;td&gt;a.append(5)&lt;br&gt;a.append([10,20])&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 5]&lt;br&gt;[25, 30, 50, 90, 12, 13, [10, 20]]&lt;br&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;extend()&lt;/td&gt;
    &lt;td&gt;Adds object to the end of the list as elements not as object&lt;/td&gt;
    &lt;td&gt;a.extend([10,20])&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 10, 20]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;*&amp;nbsp;&amp;nbsp;Repeatation&lt;br&gt;operator&lt;/td&gt;
    &lt;td&gt;Repeat the list for n times and returns a new list&lt;/td&gt;
    &lt;td&gt;a*2&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 25, 30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;+ Concatenation&lt;br&gt;operator&lt;/td&gt;
    &lt;td&gt;Concatenates two lists, and returns a new list&lt;/td&gt;
    &lt;td&gt;a+b&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 100, 300, 500, 200, 250]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;index()&lt;/td&gt;
    &lt;td&gt;Finds index of a particular element in the list or not&lt;/td&gt;
    &lt;td&gt;a.index(25)&lt;br&gt;a.index(0)&lt;br&gt;&lt;/td&gt;
    &lt;td&gt;0&lt;br&gt;&lt;br&gt;ValueError: 0 is not in list&lt;br&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;in operator&lt;/td&gt;
    &lt;td&gt;Finds whether a particular element is in the list or not, returns boolean&lt;/td&gt;
    &lt;td&gt;25 in a&lt;/td&gt;
    &lt;td&gt;True&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;not in operator&lt;/td&gt;
    &lt;td&gt;Checks if element is not available in list, returns boolean&lt;/td&gt;
    &lt;td&gt;25 not in a&lt;/td&gt;
    &lt;td&gt;False&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;count()&lt;/td&gt;
    &lt;td&gt;Counts the number of occurence of an element in the list&lt;/td&gt;
    &lt;td&gt;a.count(25)&lt;/td&gt;
    &lt;td&gt;1&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;remove()&lt;/td&gt;
    &lt;td&gt;Removes an element from the list&lt;/td&gt;
    &lt;td&gt;a.remove(25)&lt;/td&gt;
    &lt;td&gt; [30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;pop()&lt;/td&gt;
    &lt;td&gt;Delete and return item at index 0&lt;/td&gt;
    &lt;td&gt;a.pop(0)&lt;/td&gt;
    &lt;td&gt;25 , a will be [30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;del&lt;/td&gt;
    &lt;td&gt;Deletes item at a particular index from the list&lt;/td&gt;
    &lt;td&gt;del a[0]&lt;/td&gt;
    &lt;td&gt;[30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;

==Printing the List==
=== Print whole list ===
A list can be printed simply or using a ''for / while'' loop 

 print(List_2)     # To print the entire list
This code will print      
 ['Kala','Mala']     

===Print element at a particular index===
&lt;pre&gt;
Using index position
    List_2[0]     # prints 'Kala' ,i.e,the value at index position 0.
    List_2[1]     # prints 'Mala'.
&lt;/pre&gt;
=== Without using index position ===
&lt;pre&gt;
for item in List_2:   # here item is a variable used to access elements in list.
       print(item)
   This code snippet prints 
    Kala
    Mala
&lt;/pre&gt;

==Search for a particular element in list==
Elements in a list can be searched by one of the two ways:
=== using index() function===
&lt;pre&gt;
ages1 = [11,23,12,23,45]

#if element is available in the list, index() returns the index value on which, the element is present.
print(ages1.index(45))#Output: 4

#if element is not available in the list, index() returns ''ValueError''
print(ages1.index(0))#Output: ValueError:
&lt;/pre&gt;

In programming, if such error occurs, program gets terminated. It can be solved using exception handling.
e.g.
&lt;pre&gt;
ages1 = [11,23,12,23,45]

try:
    print(ages1.index(0))
except ValueError:
    print(&quot;Exception has occured&quot;)    
    print(&quot;Element is not found in the list&quot;)

&lt;/pre&gt;
&lt;pre&gt;
'''Output: 
Exception has occured
Element is not found in the list
'''&lt;/pre&gt;

=== using 'in' operator===
''in'' operator is used to check whether a particular element is available in the list or not.e.g.

&lt;pre&gt;
ages1 = [11,23,12,23,45]
no=11

if no in ages1:
    print(&quot;no is there in the list&quot;)
else:    
    print(&quot;no is NOT there in the list&quot;)
&lt;/pre&gt;
&lt;pre&gt;
#Output: no is there in the list
&lt;/pre&gt;

'''Number is not there in the list'''
&lt;pre&gt;
ages1 = [11,23,12,23,45]
no=15

if no in ages1:
    print(&quot;no is there in the list&quot;)
else:    
    print(&quot;no is NOT there in the list&quot;)
&lt;/pre&gt;
&lt;pre&gt;
Output: no is NOT there in the list
&lt;/pre&gt;


==Updating the List==
The lists can be updated using ''append'' or ''insert'' function.  Append adds the element to the end of the list and Insert adds the element in the specified position.
   List_2.append(&quot;Sheela&quot;)    # add the element 'Sheela' to the end of the list.
   print (List_2) will output 
   ['Kala', 'Mala', 'Sheela']
   
   List_2.insert(1,&quot;Bala&quot;)    # add the element &quot;Bala&quot; in the list at the index 1.
   print (List_2) will output 
   ['Kala', 'Bala','Mala', 'Sheela']

=== Extend the list by adding elements of other list at end using extend()===
&lt;pre&gt;
ages = [11,23,12,23,45]
ages.extend([57,58])
print(ages)
&lt;/pre&gt;

&lt;pre&gt;
#Output: [11, 23, 12, 23, 45, 57, 58]
&lt;/pre&gt;

==== Difference between ''append and extend'' ====
Difference between append and extend can be easily understood, by the following example.

&lt;pre&gt;
appendlist = [11,23,12,23,45]
appendlist.append([57,58])

extendlist= [11,23,12,23,45]
extendlist.extend([57,58])
&lt;/pre&gt;

&lt;pre&gt;
'''Output:
[11, 23, 12, 23, 45, [57, 58]]
[11, 23, 12, 23, 45, 57, 58]'''
&lt;/pre&gt;

==Basic Operations on List==
===Frequency of Occurrence===
list.count(object) will return the number of times the object occur in the list.
  '''Example'''
    ages = [11,23,12,23,45,43,22,24,23]
    ages.count(23) will return
    3
    ages.count(100) will return
    0

===Length of the List===
len(list) will return the length of the list ie. the number of objects in the list.
  '''Example'''
    ages = [11,23,12,23,45,43,22,24,23]
    len(ages) will output
    9
To print the objects in the list either use ''for item in list'' or ''for index in range(len(list))''
    for item in ages:       
        print (item)  
        (OR)
    for index in range(len(ages)) :
        print (ages[index])
===Sort the List===
list.sort() will sort the list in ascending order
  '''Example'''
    ages = [11,23,12,23,45,43,22,24,23]
    ages.sort() 
    print (ages) 
    [11, 12, 22, 23, 23, 23, 24, 43, 45]
===Sort the List using sorted() function===
sorted(list1) will sort the list and return a new list, it doesn't modify the original list
&lt;br&gt;'''Example: Sort in ascending order'''
&lt;pre&gt;
ages = [11,23,12,23,45,43,22,24,23]
newList=sorted(ages)
print(newList)

#Output: [11, 12, 22, 23, 23, 23, 24, 43, 45]
&lt;/pre&gt;

&lt;br&gt;'''Example: Sort in descending order'''
&lt;pre&gt;
ages = [11,23,12,23,45,43,22,24,23]
newList=sorted(ages,reverse=True)
print(newList)

#Output: [45, 43, 24, 23, 23, 23, 22, 12, 11]
&lt;/pre&gt;

===Reverse the List===
list.reverse() will reverse the original list
  '''Example'''
    ages = [11, 12, 22, 23, 23, 23, 24, 43, 45]
    ages.reverse()
    print (ages)
    [45, 43, 24, 23, 23, 23, 22, 12, 11]

Both sort() and reverse() list operation will work on numeric and alphanumeric data list.

A special use of the reverse() function is to descend a list that is sorted in ascending order.

  '''Example'''
&lt;pre&gt;
ages = [11, 12, 22, 23, 23, 23, 24, 43, 45]
ages.sort()
print(ages)
ages.reverse()
print(ages)
&lt;/pre&gt;

===Slicing===
Used to retrieve an object or objects in a range as a list  
  '''Example'''
Use ''list[index]'' to retrieve the object at the given index
         In [1]: student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
         In [2]: student[3]     #Object at index 3.  Remember index starts at 0
         Out[2]: 'Geetha'      


Use ''list[start_index : end_index + 1]'' to retrieve objects from the start_index to end_index 
         In [3]: student[2:4]     # Objects from index 2 to 3 as List. Note the [ and ]
         Out[3]: ['Vijay', 'Geetha']   


Use ''list[:]'' to retrieve objects from the starting of the list to the end of the list. 
The default start value will be the starting index of the list (i.e. 0) and the default end value
will be the length of the list 
         In [4]: student[:]        # prints the entire list
         Out[4]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma', 'Janani']


         In [5]: student[:5]       # prints the objects from the start of the list upto object at index 4
         Out[5]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran']


         In [6]: student[2:]       # prints the objects from index 2 upto the end of the list
         Out[6]: ['Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma', 'Janani']


Negative index too is available in Python. It starts from last element of the list. i.e.

         In [7]:student[-1]        #prints last index of list
         Out[7]: 'Janani'


         In [8]:student[-1:-8]     #prints empty list
         Out[8]: []


         In [9]:student[-8:-1]     #prints -8th index to -1st index elements
         Out[9]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma']

===Removing Item from list ===
----

Is used to remove a specific item from the list.

'''Example:'''
 
Use list.remove(entry/value)  Or   del list[index]    Or list.pop(index)
         student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
         student.remove(&quot;Arun&quot;)   #This will delete item &quot;Arun&quot;
         Or    
         del student[0]           # This will delete item at index 0
         Or
         student.pop(0)         # This will delete and return item at index 0


         print(student)    
         Output: [&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]

===Delete list ===
----
Used to delete complete list

'''Example'''

Use del &lt;list name&gt;
         student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
         del student

===Concatenation of two lists===
----
''+'' is the concatenation operator which is used concatenate two lists. 
&lt;pre&gt;
ages1 = [11,23,12,23,45]
ages2 = [25, 24, 43, 47]
age=ages1+ages2
print(age)
#Output: [11, 23, 12, 23, 45, 25, 24, 43, 47]
&lt;/pre&gt;

===Repeatation of a list ===
----
''*'' is the operator to repeat a particular list.
&lt;pre&gt;
ages1 = [11,23,12,23,45]
age=ages1*5 #ages1 list is repeated 5 times and stroed in ''age'' list
print(age)

#Output: [11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45]
&lt;/pre&gt;
====Conditional Statements====
    Conditionals are used to check the condition and change the flow of the program 
accordingly. They are realized in programming languages through if statement. The 
syntax is as follows :
         if condition : 
            statement
    '''Note:''' Do not forget indentation (inserting space/tab) in the line after the
 if condition.
    
    In case you want to execute a set of statements when a condition is true and another

set of statement when the condition is false.
         if condition : 
            statement 1
         else :
            statement 2
    
    Multiple if-else statements can be written as follows:
         if condition_1 : 
            statement 1
         elif condition_2 : # 'elif' is short for 'else if'
            statement 2
         elif condition_3 :
            statement 3
        .
        .
         else :
            final statement

=Loops and Conditionals : Fizzbuzz=
===='''Loops'''====

    Loops are used to execute a set of repetitive statements. They are realized
 through 'while' and 'for' loops in programming languages. The syntax of 'for' loop is 
as follows :
        for LOOPVARIABLE in SEQUENCE: 
            STATEMENTS
    '''e.g.''' to print all the data from a list we can write:
        for item in list_name
            print(item)
    OR
        for index in range(len(list_name))
            print(list_name[index])
    
    The syntax for while loop is as follows :
    
        while BOOLEANEXPRESSION: 
            STATEMENTS
            INCREMENT/DECREMENT
    
    '''e.g.''' if we want to print all numbers from 1 to 10
        i=1
        while i&lt;=10 :
            print(i,&quot; &quot;)
            i=i+1
    
    'while' loop has indefinite iteration (run-time unknown). So, there must be loop
 break statement in it.
 Whereas 'for' loop is definite in nature (i.e. known or predictable span).&lt;br&gt;

&lt;b&gt;NOTE: Python doesn't have anything like do-while loop.&lt;/b&gt;

==Implementation==
Here, we try to demonstrate the concept of loops and conditionals through a game called Fizzbuzz. The rules are as follows :&lt;br/&gt;
[[File:fizzBuzz.gif]]

• if input number is a multiple of ’3’ print ”Fizz”
&lt;br/&gt;
• if input number is a multiple of ’5’ print ”Buzz”
&lt;br/&gt;
• if input number is a multiple of both '3' and ’5’ print ”FizzBuzz”
&lt;br/&gt;
The pseudo code is as follows :
&lt;pre&gt;
   If input no % 3 == 0 and  input no % 5 == 0 : 
       print ”Fizzbuzz”
   else if input no % 3 == 0 : 
       print ”Fizz”
   else if input no % 5 == 0 : 
       print ”Buzz”
   else :
       print the input no
&lt;/pre&gt;
The order of statements execution matters to get the desired output. The highest priority condition should be first followed by other. In fizzbuzz programming, first checking should be done for both divisibility of 3 and 5. If condition not satisfied only then it should check individually for 3 or 5. So carefully choosing the order is crucial for better programming.
Note: There is some effect of present condition statements chosen on next conditions statements. That is why in first attempt fizzbuzz programming got struck.

Example: 
&lt;pre&gt;
#Code to achieve the above requirement in python3.
i = int(input(&quot;Enter the number&quot;)) 
if i%3 == 0 and i%5 == 0: print(i,&quot;FizzBuzz&quot;)  
elif i%5 == 0: print(i,&quot;Buzz&quot;)
elif i%3 == 0: print(i,&quot;Fizz&quot;)
else: print(i)
&lt;/pre&gt;
Lets put the same into a loop for a range given by the user.
&lt;pre&gt;
def fizzbuzzgame(start,stop):
    for i in range(start,stop+1):
        if i%3 == 0 and i%5 == 0:
            print(i,&quot;FizzBuzz&quot;)
        elif i%5 == 0:
            print(i,&quot;Buzz&quot;)
        elif i%3 == 0:
            print(i,&quot;Fizz&quot;)
        else: print(i)

fizzbuzzgame(50,100)
&lt;/pre&gt;


=== Fizz Buzz game in Interactive mode with Score ===
'''By Ms. Ami Tusharkant Choksi'''
&lt;pre&gt;
def fizzbuzzgame(i):
        if i%3 == 0 and i%5 == 0:
            print(i,&quot;FizzBuzz&quot;)
            return(&quot;fzbz&quot;)
        elif i%5 == 0:
            print(i,&quot;Buzz&quot;)
            return(&quot;bz&quot;)
        elif i%3 == 0:
            print(i,&quot;Fizz&quot;)
            return(&quot;fz&quot;)
        else:
            print(i)
            return(&quot;no&quot;)

ch = 'y'
fizzbuzz=0
fizz=0
buzz=0
nothing=0
print(&quot;&quot;&quot;
 _____  ____  _____  _____  ____   __ __  _____  _____       ____   ____  ___ ___    ___ 
|     ||    ||     ||     ||    \ |  |  ||     ||     |     /    | /    ||   |   |  /  _]
|   __| |  | |__/  ||__/  ||  o  )|  |  ||__/  ||__/  |    |   __||  o  || _   _ | /  [_ 
|  |_   |  | |   __||   __||     ||  |  ||   __||   __|    |  |  ||     ||  \_/  ||    _]
|   _]  |  | |  /  ||  /  ||  O  ||  :  ||  /  ||  /  |    |  |_ ||  _  ||   |   ||   [_ 
|  |    |  | |     ||     ||     ||     ||     ||     |    |     ||  |  ||   |   ||     |
|__|   |____||_____||_____||_____| \__,_||_____||_____|    |___,_||__|__||___|___||_____|
                                                                                         
&quot;&quot;&quot;)   

while(ch == 'y'):
    n=int(input(&quot;Enter a Number : &quot;))
    winLoose=fizzbuzzgame(n)
    if(winLoose == &quot;fz&quot;):
        fizz+=1
    elif(winLoose == &quot;bz&quot;):
        buzz+=1
    elif(winLoose == &quot;fzbz&quot;):
        fizzbuzz+=1
    ch=input(&quot;Do you want to continue playing the game : (y/n)&quot;)
    if(ch=='n'):
        print('Congratulations, your score is\n FizzBuzz:%d\nFizz:%d\nBuzz:%d' %
(fizzbuzz,fizz,buzz))
    
'''Sample Output:

 _____  ____  _____  _____  ____   __ __  _____  _____       ____   ____  ___ ___    ___ 
|     ||    ||     ||     ||    \ |  |  ||     ||     |     /    | /    ||   |   |  /  _]
|   __| |  | |__/  ||__/  ||  o  )|  |  ||__/  ||__/  |    |   __||  o  || _   _ | /  [_ 
|  |_   |  | |   __||   __||     ||  |  ||   __||   __|    |  |  ||     ||  \_/  ||    _]
|   _]  |  | |  /  ||  /  ||  O  ||  :  ||  /  ||  /  |    |  |_ ||  _  ||   |   ||   [_ 
|  |    |  | |     ||     ||     ||     ||     ||     |    |     ||  |  ||   |   ||     |
|__|   |____||_____||_____||_____| \__,_||_____||_____|    |___,_||__|__||___|___||_____|
                                                                                         

Enter a Number : 666
666 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 777
777 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 555
555 FizzBuzz
Do you want to continue playing the game : (y/n)y
Enter a Number : 1
1
Do you want to continue playing the game : (y/n)y
Enter a Number : 789
789 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 25
25 Buzz
Do you want to continue playing the game : (y/n)n
Congratulations, your score is

FizzBuzz:1
Fizz:3
Buzz:1

&lt;/pre&gt;


*[http://sccilabs.org/jocwiki/index.php/Crowd_Computing_:Just_Estimate Crowd Computing: Just Estimate]
*[http://sccilabs.org/jocwiki/index.php/Permutations_:_Jumbled_Words Permutations: Jumbled Words]
*[http://sccilabs.org/jocwiki/index.php/Theory_of_Evolution Theory of Evolution]</text>
      <sha1>4kvqzenagtvq16odd88m4190cythj4i</sha1>
    </revision>
    <revision>
      <id>3358</id>
      <parentid>3357</parentid>
      <timestamp>2018-09-26T06:09:16Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* Loops */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="19273">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_3 Contributors of this page]
*Week 3 Playlist: https://www.youtube.com/playlist?list=PLc_j0TNIaWxOVx_z9jAM2UB3RqYNXaoEo
=List=
List is a flexible data structure used for storing a group of data separated by comma. The elements in a list need not be of the same data type.

'''Example:'''
       List_1 = [ 1, 2,3] or 
       List_1 = [&quot;coffee&quot;, &quot;Tea&quot;, &quot;Milk&quot;] or
       List_1 = [1,&quot;coffee&quot;, &quot;Tea&quot;, 3, &quot;5&quot;]

==List Creation==
a) A list can be created by simply putting values (separated by comma) between square brackets as given below,
       List_1 = [1,&quot;coffee&quot;, &quot;Tea&quot;, 3, &quot;5&quot;] #this creates a list by name List_1 containing following items


Or,
(b)A List can be created from scratch and elements can be added 
        List_2 = [ ]
        List_2.append(&quot;Kala&quot;)
        List_2.append(&quot;Mala&quot;)
Here we use &quot;append&quot; ,which is a function in python that enable us to append or attach an element to a list .
Thus List_2 will now hold [&quot;Kala&quot;,&quot;Mala&quot;]

==Operations and Methods to work with List==
&lt;pre&gt;
a = [25,30,50,90,12,13]
b = [100,300,500,200,250]
&lt;/pre&gt;
&lt;hr&gt;
&lt;table border=2&gt;
  &lt;tr&gt;
    &lt;th&gt;&lt;b&gt;Method/&lt;br&gt;Operator&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Function&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Syntax&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Output&lt;/b&gt;&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;len()&lt;/td&gt;
    &lt;td&gt;Find length of a list&lt;/td&gt;
    &lt;td&gt;len(a)&lt;/td&gt;
    &lt;td&gt;6&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;max()&lt;/td&gt;
    &lt;td&gt;Find maximum element from the list&lt;/td&gt;
    &lt;td&gt;max(a)&lt;/td&gt;
    &lt;td&gt;90&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;min()&lt;/td&gt;
    &lt;td&gt;Find minimum element from the list&lt;/td&gt;
    &lt;td&gt;min(a)&lt;/td&gt;
    &lt;td&gt;12&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sum()&lt;/td&gt;
    &lt;td&gt;Returns sum of all elements of the list&lt;/td&gt;
    &lt;td&gt;sum(a)&lt;/td&gt;
    &lt;td&gt;220&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;reverse()&lt;/td&gt;
    &lt;td&gt;Reverses the original list&lt;/td&gt;
    &lt;td&gt;a.reverse()&lt;/td&gt;
    &lt;td&gt;[13, 12, 90, 50, 30, 25]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sort()&lt;/td&gt;
    &lt;td&gt;Sorts the original list in ascending order&lt;/td&gt;
    &lt;td&gt;a.sort()&lt;/td&gt;
    &lt;td&gt;[12, 13, 25, 30, 50, 90]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sorted()&lt;/td&gt;
    &lt;td&gt;Returns the new sorted list &lt;/td&gt;
    &lt;td&gt;sorted(a)&lt;/td&gt;
    &lt;td&gt;[12, 13, 25, 30, 50, 90]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;insert()&lt;/td&gt;
    &lt;td&gt;Insert at a particular index in the list, and shifts remaining elements&lt;/td&gt;
    &lt;td&gt;a.insert(3,3)&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 3, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;append()&lt;/td&gt;
    &lt;td&gt;Adds elements/object to the end of the list&lt;/td&gt;
    &lt;td&gt;a.append(5)&lt;br&gt;a.append([10,20])&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 5]&lt;br&gt;[25, 30, 50, 90, 12, 13, [10, 20]]&lt;br&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;extend()&lt;/td&gt;
    &lt;td&gt;Adds object to the end of the list as elements not as object&lt;/td&gt;
    &lt;td&gt;a.extend([10,20])&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 10, 20]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;*&amp;nbsp;&amp;nbsp;Repeatation&lt;br&gt;operator&lt;/td&gt;
    &lt;td&gt;Repeat the list for n times and returns a new list&lt;/td&gt;
    &lt;td&gt;a*2&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 25, 30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;+ Concatenation&lt;br&gt;operator&lt;/td&gt;
    &lt;td&gt;Concatenates two lists, and returns a new list&lt;/td&gt;
    &lt;td&gt;a+b&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 100, 300, 500, 200, 250]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;index()&lt;/td&gt;
    &lt;td&gt;Finds index of a particular element in the list or not&lt;/td&gt;
    &lt;td&gt;a.index(25)&lt;br&gt;a.index(0)&lt;br&gt;&lt;/td&gt;
    &lt;td&gt;0&lt;br&gt;&lt;br&gt;ValueError: 0 is not in list&lt;br&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;in operator&lt;/td&gt;
    &lt;td&gt;Finds whether a particular element is in the list or not, returns boolean&lt;/td&gt;
    &lt;td&gt;25 in a&lt;/td&gt;
    &lt;td&gt;True&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;not in operator&lt;/td&gt;
    &lt;td&gt;Checks if element is not available in list, returns boolean&lt;/td&gt;
    &lt;td&gt;25 not in a&lt;/td&gt;
    &lt;td&gt;False&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;count()&lt;/td&gt;
    &lt;td&gt;Counts the number of occurence of an element in the list&lt;/td&gt;
    &lt;td&gt;a.count(25)&lt;/td&gt;
    &lt;td&gt;1&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;remove()&lt;/td&gt;
    &lt;td&gt;Removes an element from the list&lt;/td&gt;
    &lt;td&gt;a.remove(25)&lt;/td&gt;
    &lt;td&gt; [30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;pop()&lt;/td&gt;
    &lt;td&gt;Delete and return item at index 0&lt;/td&gt;
    &lt;td&gt;a.pop(0)&lt;/td&gt;
    &lt;td&gt;25 , a will be [30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;del&lt;/td&gt;
    &lt;td&gt;Deletes item at a particular index from the list&lt;/td&gt;
    &lt;td&gt;del a[0]&lt;/td&gt;
    &lt;td&gt;[30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;

==Printing the List==
=== Print whole list ===
A list can be printed simply or using a ''for / while'' loop 

 print(List_2)     # To print the entire list
This code will print      
 ['Kala','Mala']     

===Print element at a particular index===
&lt;pre&gt;
Using index position
    List_2[0]     # prints 'Kala' ,i.e,the value at index position 0.
    List_2[1]     # prints 'Mala'.
&lt;/pre&gt;
=== Without using index position ===
&lt;pre&gt;
for item in List_2:   # here item is a variable used to access elements in list.
       print(item)
   This code snippet prints 
    Kala
    Mala
&lt;/pre&gt;

==Search for a particular element in list==
Elements in a list can be searched by one of the two ways:
=== using index() function===
&lt;pre&gt;
ages1 = [11,23,12,23,45]

#if element is available in the list, index() returns the index value on which, the element is present.
print(ages1.index(45))#Output: 4

#if element is not available in the list, index() returns ''ValueError''
print(ages1.index(0))#Output: ValueError:
&lt;/pre&gt;

In programming, if such error occurs, program gets terminated. It can be solved using exception handling.
e.g.
&lt;pre&gt;
ages1 = [11,23,12,23,45]

try:
    print(ages1.index(0))
except ValueError:
    print(&quot;Exception has occured&quot;)    
    print(&quot;Element is not found in the list&quot;)

&lt;/pre&gt;
&lt;pre&gt;
'''Output: 
Exception has occured
Element is not found in the list
'''&lt;/pre&gt;

=== using 'in' operator===
''in'' operator is used to check whether a particular element is available in the list or not.e.g.

&lt;pre&gt;
ages1 = [11,23,12,23,45]
no=11

if no in ages1:
    print(&quot;no is there in the list&quot;)
else:    
    print(&quot;no is NOT there in the list&quot;)
&lt;/pre&gt;
&lt;pre&gt;
#Output: no is there in the list
&lt;/pre&gt;

'''Number is not there in the list'''
&lt;pre&gt;
ages1 = [11,23,12,23,45]
no=15

if no in ages1:
    print(&quot;no is there in the list&quot;)
else:    
    print(&quot;no is NOT there in the list&quot;)
&lt;/pre&gt;
&lt;pre&gt;
Output: no is NOT there in the list
&lt;/pre&gt;


==Updating the List==
The lists can be updated using ''append'' or ''insert'' function.  Append adds the element to the end of the list and Insert adds the element in the specified position.
   List_2.append(&quot;Sheela&quot;)    # add the element 'Sheela' to the end of the list.
   print (List_2) will output 
   ['Kala', 'Mala', 'Sheela']
   
   List_2.insert(1,&quot;Bala&quot;)    # add the element &quot;Bala&quot; in the list at the index 1.
   print (List_2) will output 
   ['Kala', 'Bala','Mala', 'Sheela']

=== Extend the list by adding elements of other list at end using extend()===
&lt;pre&gt;
ages = [11,23,12,23,45]
ages.extend([57,58])
print(ages)
&lt;/pre&gt;

&lt;pre&gt;
#Output: [11, 23, 12, 23, 45, 57, 58]
&lt;/pre&gt;

==== Difference between ''append and extend'' ====
Difference between append and extend can be easily understood, by the following example.

&lt;pre&gt;
appendlist = [11,23,12,23,45]
appendlist.append([57,58])

extendlist= [11,23,12,23,45]
extendlist.extend([57,58])
&lt;/pre&gt;

&lt;pre&gt;
'''Output:
[11, 23, 12, 23, 45, [57, 58]]
[11, 23, 12, 23, 45, 57, 58]'''
&lt;/pre&gt;

==Basic Operations on List==
===Frequency of Occurrence===
list.count(object) will return the number of times the object occur in the list.
  '''Example'''
    ages = [11,23,12,23,45,43,22,24,23]
    ages.count(23) will return
    3
    ages.count(100) will return
    0

===Length of the List===
len(list) will return the length of the list ie. the number of objects in the list.
  '''Example'''
    ages = [11,23,12,23,45,43,22,24,23]
    len(ages) will output
    9
To print the objects in the list either use ''for item in list'' or ''for index in range(len(list))''
    for item in ages:       
        print (item)  
        (OR)
    for index in range(len(ages)) :
        print (ages[index])
===Sort the List===
list.sort() will sort the list in ascending order
  '''Example'''
    ages = [11,23,12,23,45,43,22,24,23]
    ages.sort() 
    print (ages) 
    [11, 12, 22, 23, 23, 23, 24, 43, 45]
===Sort the List using sorted() function===
sorted(list1) will sort the list and return a new list, it doesn't modify the original list
&lt;br&gt;'''Example: Sort in ascending order'''
&lt;pre&gt;
ages = [11,23,12,23,45,43,22,24,23]
newList=sorted(ages)
print(newList)

#Output: [11, 12, 22, 23, 23, 23, 24, 43, 45]
&lt;/pre&gt;

&lt;br&gt;'''Example: Sort in descending order'''
&lt;pre&gt;
ages = [11,23,12,23,45,43,22,24,23]
newList=sorted(ages,reverse=True)
print(newList)

#Output: [45, 43, 24, 23, 23, 23, 22, 12, 11]
&lt;/pre&gt;

===Reverse the List===
list.reverse() will reverse the original list
  '''Example'''
    ages = [11, 12, 22, 23, 23, 23, 24, 43, 45]
    ages.reverse()
    print (ages)
    [45, 43, 24, 23, 23, 23, 22, 12, 11]

Both sort() and reverse() list operation will work on numeric and alphanumeric data list.

A special use of the reverse() function is to descend a list that is sorted in ascending order.

  '''Example'''
&lt;pre&gt;
ages = [11, 12, 22, 23, 23, 23, 24, 43, 45]
ages.sort()
print(ages)
ages.reverse()
print(ages)
&lt;/pre&gt;

===Slicing===
Used to retrieve an object or objects in a range as a list  
  '''Example'''
Use ''list[index]'' to retrieve the object at the given index
         In [1]: student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
         In [2]: student[3]     #Object at index 3.  Remember index starts at 0
         Out[2]: 'Geetha'      


Use ''list[start_index : end_index + 1]'' to retrieve objects from the start_index to end_index 
         In [3]: student[2:4]     # Objects from index 2 to 3 as List. Note the [ and ]
         Out[3]: ['Vijay', 'Geetha']   


Use ''list[:]'' to retrieve objects from the starting of the list to the end of the list. 
The default start value will be the starting index of the list (i.e. 0) and the default end value
will be the length of the list 
         In [4]: student[:]        # prints the entire list
         Out[4]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma', 'Janani']


         In [5]: student[:5]       # prints the objects from the start of the list upto object at index 4
         Out[5]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran']


         In [6]: student[2:]       # prints the objects from index 2 upto the end of the list
         Out[6]: ['Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma', 'Janani']


Negative index too is available in Python. It starts from last element of the list. i.e.

         In [7]:student[-1]        #prints last index of list
         Out[7]: 'Janani'


         In [8]:student[-1:-8]     #prints empty list
         Out[8]: []


         In [9]:student[-8:-1]     #prints -8th index to -1st index elements
         Out[9]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma']

===Removing Item from list ===
----

Is used to remove a specific item from the list.

'''Example:'''
 
Use list.remove(entry/value)  Or   del list[index]    Or list.pop(index)
         student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
         student.remove(&quot;Arun&quot;)   #This will delete item &quot;Arun&quot;
         Or    
         del student[0]           # This will delete item at index 0
         Or
         student.pop(0)         # This will delete and return item at index 0


         print(student)    
         Output: [&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]

===Delete list ===
----
Used to delete complete list

'''Example'''

Use del &lt;list name&gt;
         student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
         del student

===Concatenation of two lists===
----
''+'' is the concatenation operator which is used concatenate two lists. 
&lt;pre&gt;
ages1 = [11,23,12,23,45]
ages2 = [25, 24, 43, 47]
age=ages1+ages2
print(age)
#Output: [11, 23, 12, 23, 45, 25, 24, 43, 47]
&lt;/pre&gt;

===Repeatation of a list ===
----
''*'' is the operator to repeat a particular list.
&lt;pre&gt;
ages1 = [11,23,12,23,45]
age=ages1*5 #ages1 list is repeated 5 times and stroed in ''age'' list
print(age)

#Output: [11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45]
&lt;/pre&gt;
====Conditional Statements====
    Conditionals are used to check the condition and change the flow of the program 
accordingly. They are realized in programming languages through if statement. The 
syntax is as follows :
         if condition : 
            statement
    '''Note:''' Do not forget indentation (inserting space/tab) in the line after the
 if condition.
    
    In case you want to execute a set of statements when a condition is true and another

set of statement when the condition is false.
         if condition : 
            statement 1
         else :
            statement 2
    
    Multiple if-else statements can be written as follows:
         if condition_1 : 
            statement 1
         elif condition_2 : # 'elif' is short for 'else if'
            statement 2
         elif condition_3 :
            statement 3
        .
        .
         else :
            final statement

=Loops and Conditionals : Fizzbuzz=
====Loops====

    Loops are used to execute a set of repetitive statements. They are realized
 through 'while' and 'for' loops in programming languages. The syntax of 'for' loop is 
as follows :
        for LOOPVARIABLE in SEQUENCE: 
            STATEMENTS
    '''e.g.''' to print all the data from a list we can write:
        for item in list_name
            print(item)
    OR
        for index in range(len(list_name))
            print(list_name[index])
    
    The syntax for while loop is as follows :
    
        while BOOLEANEXPRESSION: 
            STATEMENTS
            INCREMENT/DECREMENT
    
    '''e.g.''' if we want to print all numbers from 1 to 10
        i=1
        while i&lt;=10 :
            print(i,&quot; &quot;)
            i=i+1
    
    'while' loop has indefinite iteration (run-time unknown). So, there must be loop
 break statement in it.
 Whereas 'for' loop is definite in nature (i.e. known or predictable span).&lt;br&gt;

&lt;b&gt;NOTE: Python doesn't have anything like do-while loop.&lt;/b&gt;

==Implementation==
Here, we try to demonstrate the concept of loops and conditionals through a game called Fizzbuzz. The rules are as follows :&lt;br/&gt;
[[File:fizzBuzz.gif]]

• if input number is a multiple of ’3’ print ”Fizz”
&lt;br/&gt;
• if input number is a multiple of ’5’ print ”Buzz”
&lt;br/&gt;
• if input number is a multiple of both '3' and ’5’ print ”FizzBuzz”
&lt;br/&gt;
The pseudo code is as follows :
&lt;pre&gt;
   If input no % 3 == 0 and  input no % 5 == 0 : 
       print ”Fizzbuzz”
   else if input no % 3 == 0 : 
       print ”Fizz”
   else if input no % 5 == 0 : 
       print ”Buzz”
   else :
       print the input no
&lt;/pre&gt;
The order of statements execution matters to get the desired output. The highest priority condition should be first followed by other. In fizzbuzz programming, first checking should be done for both divisibility of 3 and 5. If condition not satisfied only then it should check individually for 3 or 5. So carefully choosing the order is crucial for better programming.
Note: There is some effect of present condition statements chosen on next conditions statements. That is why in first attempt fizzbuzz programming got struck.

Example: 
&lt;pre&gt;
#Code to achieve the above requirement in python3.
i = int(input(&quot;Enter the number&quot;)) 
if i%3 == 0 and i%5 == 0: print(i,&quot;FizzBuzz&quot;)  
elif i%5 == 0: print(i,&quot;Buzz&quot;)
elif i%3 == 0: print(i,&quot;Fizz&quot;)
else: print(i)
&lt;/pre&gt;
Lets put the same into a loop for a range given by the user.
&lt;pre&gt;
def fizzbuzzgame(start,stop):
    for i in range(start,stop+1):
        if i%3 == 0 and i%5 == 0:
            print(i,&quot;FizzBuzz&quot;)
        elif i%5 == 0:
            print(i,&quot;Buzz&quot;)
        elif i%3 == 0:
            print(i,&quot;Fizz&quot;)
        else: print(i)

fizzbuzzgame(50,100)
&lt;/pre&gt;


=== Fizz Buzz game in Interactive mode with Score ===
'''By Ms. Ami Tusharkant Choksi'''
&lt;pre&gt;
def fizzbuzzgame(i):
        if i%3 == 0 and i%5 == 0:
            print(i,&quot;FizzBuzz&quot;)
            return(&quot;fzbz&quot;)
        elif i%5 == 0:
            print(i,&quot;Buzz&quot;)
            return(&quot;bz&quot;)
        elif i%3 == 0:
            print(i,&quot;Fizz&quot;)
            return(&quot;fz&quot;)
        else:
            print(i)
            return(&quot;no&quot;)

ch = 'y'
fizzbuzz=0
fizz=0
buzz=0
nothing=0
print(&quot;&quot;&quot;
 _____  ____  _____  _____  ____   __ __  _____  _____       ____   ____  ___ ___    ___ 
|     ||    ||     ||     ||    \ |  |  ||     ||     |     /    | /    ||   |   |  /  _]
|   __| |  | |__/  ||__/  ||  o  )|  |  ||__/  ||__/  |    |   __||  o  || _   _ | /  [_ 
|  |_   |  | |   __||   __||     ||  |  ||   __||   __|    |  |  ||     ||  \_/  ||    _]
|   _]  |  | |  /  ||  /  ||  O  ||  :  ||  /  ||  /  |    |  |_ ||  _  ||   |   ||   [_ 
|  |    |  | |     ||     ||     ||     ||     ||     |    |     ||  |  ||   |   ||     |
|__|   |____||_____||_____||_____| \__,_||_____||_____|    |___,_||__|__||___|___||_____|
                                                                                         
&quot;&quot;&quot;)   

while(ch == 'y'):
    n=int(input(&quot;Enter a Number : &quot;))
    winLoose=fizzbuzzgame(n)
    if(winLoose == &quot;fz&quot;):
        fizz+=1
    elif(winLoose == &quot;bz&quot;):
        buzz+=1
    elif(winLoose == &quot;fzbz&quot;):
        fizzbuzz+=1
    ch=input(&quot;Do you want to continue playing the game : (y/n)&quot;)
    if(ch=='n'):
        print('Congratulations, your score is\n FizzBuzz:%d\nFizz:%d\nBuzz:%d' %
(fizzbuzz,fizz,buzz))
    
'''Sample Output:

 _____  ____  _____  _____  ____   __ __  _____  _____       ____   ____  ___ ___    ___ 
|     ||    ||     ||     ||    \ |  |  ||     ||     |     /    | /    ||   |   |  /  _]
|   __| |  | |__/  ||__/  ||  o  )|  |  ||__/  ||__/  |    |   __||  o  || _   _ | /  [_ 
|  |_   |  | |   __||   __||     ||  |  ||   __||   __|    |  |  ||     ||  \_/  ||    _]
|   _]  |  | |  /  ||  /  ||  O  ||  :  ||  /  ||  /  |    |  |_ ||  _  ||   |   ||   [_ 
|  |    |  | |     ||     ||     ||     ||     ||     |    |     ||  |  ||   |   ||     |
|__|   |____||_____||_____||_____| \__,_||_____||_____|    |___,_||__|__||___|___||_____|
                                                                                         

Enter a Number : 666
666 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 777
777 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 555
555 FizzBuzz
Do you want to continue playing the game : (y/n)y
Enter a Number : 1
1
Do you want to continue playing the game : (y/n)y
Enter a Number : 789
789 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 25
25 Buzz
Do you want to continue playing the game : (y/n)n
Congratulations, your score is

FizzBuzz:1
Fizz:3
Buzz:1

&lt;/pre&gt;


*[http://sccilabs.org/jocwiki/index.php/Crowd_Computing_:Just_Estimate Crowd Computing: Just Estimate]
*[http://sccilabs.org/jocwiki/index.php/Permutations_:_Jumbled_Words Permutations: Jumbled Words]
*[http://sccilabs.org/jocwiki/index.php/Theory_of_Evolution Theory of Evolution]</text>
      <sha1>eumquzj8ie3o7sptvax7g8gdjr17tin</sha1>
    </revision>
    <revision>
      <id>3359</id>
      <parentid>3358</parentid>
      <timestamp>2018-09-26T06:11:39Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* Fizz Buzz game in Interactive mode with Score */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="22686">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_3 Contributors of this page]
*Week 3 Playlist: https://www.youtube.com/playlist?list=PLc_j0TNIaWxOVx_z9jAM2UB3RqYNXaoEo
=List=
List is a flexible data structure used for storing a group of data separated by comma. The elements in a list need not be of the same data type.

'''Example:'''
       List_1 = [ 1, 2,3] or 
       List_1 = [&quot;coffee&quot;, &quot;Tea&quot;, &quot;Milk&quot;] or
       List_1 = [1,&quot;coffee&quot;, &quot;Tea&quot;, 3, &quot;5&quot;]

==List Creation==
a) A list can be created by simply putting values (separated by comma) between square brackets as given below,
       List_1 = [1,&quot;coffee&quot;, &quot;Tea&quot;, 3, &quot;5&quot;] #this creates a list by name List_1 containing following items


Or,
(b)A List can be created from scratch and elements can be added 
        List_2 = [ ]
        List_2.append(&quot;Kala&quot;)
        List_2.append(&quot;Mala&quot;)
Here we use &quot;append&quot; ,which is a function in python that enable us to append or attach an element to a list .
Thus List_2 will now hold [&quot;Kala&quot;,&quot;Mala&quot;]

==Operations and Methods to work with List==
&lt;pre&gt;
a = [25,30,50,90,12,13]
b = [100,300,500,200,250]
&lt;/pre&gt;
&lt;hr&gt;
&lt;table border=2&gt;
  &lt;tr&gt;
    &lt;th&gt;&lt;b&gt;Method/&lt;br&gt;Operator&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Function&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Syntax&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Output&lt;/b&gt;&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;len()&lt;/td&gt;
    &lt;td&gt;Find length of a list&lt;/td&gt;
    &lt;td&gt;len(a)&lt;/td&gt;
    &lt;td&gt;6&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;max()&lt;/td&gt;
    &lt;td&gt;Find maximum element from the list&lt;/td&gt;
    &lt;td&gt;max(a)&lt;/td&gt;
    &lt;td&gt;90&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;min()&lt;/td&gt;
    &lt;td&gt;Find minimum element from the list&lt;/td&gt;
    &lt;td&gt;min(a)&lt;/td&gt;
    &lt;td&gt;12&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sum()&lt;/td&gt;
    &lt;td&gt;Returns sum of all elements of the list&lt;/td&gt;
    &lt;td&gt;sum(a)&lt;/td&gt;
    &lt;td&gt;220&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;reverse()&lt;/td&gt;
    &lt;td&gt;Reverses the original list&lt;/td&gt;
    &lt;td&gt;a.reverse()&lt;/td&gt;
    &lt;td&gt;[13, 12, 90, 50, 30, 25]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sort()&lt;/td&gt;
    &lt;td&gt;Sorts the original list in ascending order&lt;/td&gt;
    &lt;td&gt;a.sort()&lt;/td&gt;
    &lt;td&gt;[12, 13, 25, 30, 50, 90]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sorted()&lt;/td&gt;
    &lt;td&gt;Returns the new sorted list &lt;/td&gt;
    &lt;td&gt;sorted(a)&lt;/td&gt;
    &lt;td&gt;[12, 13, 25, 30, 50, 90]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;insert()&lt;/td&gt;
    &lt;td&gt;Insert at a particular index in the list, and shifts remaining elements&lt;/td&gt;
    &lt;td&gt;a.insert(3,3)&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 3, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;append()&lt;/td&gt;
    &lt;td&gt;Adds elements/object to the end of the list&lt;/td&gt;
    &lt;td&gt;a.append(5)&lt;br&gt;a.append([10,20])&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 5]&lt;br&gt;[25, 30, 50, 90, 12, 13, [10, 20]]&lt;br&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;extend()&lt;/td&gt;
    &lt;td&gt;Adds object to the end of the list as elements not as object&lt;/td&gt;
    &lt;td&gt;a.extend([10,20])&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 10, 20]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;*&amp;nbsp;&amp;nbsp;Repeatation&lt;br&gt;operator&lt;/td&gt;
    &lt;td&gt;Repeat the list for n times and returns a new list&lt;/td&gt;
    &lt;td&gt;a*2&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 25, 30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;+ Concatenation&lt;br&gt;operator&lt;/td&gt;
    &lt;td&gt;Concatenates two lists, and returns a new list&lt;/td&gt;
    &lt;td&gt;a+b&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 100, 300, 500, 200, 250]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;index()&lt;/td&gt;
    &lt;td&gt;Finds index of a particular element in the list or not&lt;/td&gt;
    &lt;td&gt;a.index(25)&lt;br&gt;a.index(0)&lt;br&gt;&lt;/td&gt;
    &lt;td&gt;0&lt;br&gt;&lt;br&gt;ValueError: 0 is not in list&lt;br&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;in operator&lt;/td&gt;
    &lt;td&gt;Finds whether a particular element is in the list or not, returns boolean&lt;/td&gt;
    &lt;td&gt;25 in a&lt;/td&gt;
    &lt;td&gt;True&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;not in operator&lt;/td&gt;
    &lt;td&gt;Checks if element is not available in list, returns boolean&lt;/td&gt;
    &lt;td&gt;25 not in a&lt;/td&gt;
    &lt;td&gt;False&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;count()&lt;/td&gt;
    &lt;td&gt;Counts the number of occurence of an element in the list&lt;/td&gt;
    &lt;td&gt;a.count(25)&lt;/td&gt;
    &lt;td&gt;1&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;remove()&lt;/td&gt;
    &lt;td&gt;Removes an element from the list&lt;/td&gt;
    &lt;td&gt;a.remove(25)&lt;/td&gt;
    &lt;td&gt; [30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;pop()&lt;/td&gt;
    &lt;td&gt;Delete and return item at index 0&lt;/td&gt;
    &lt;td&gt;a.pop(0)&lt;/td&gt;
    &lt;td&gt;25 , a will be [30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;del&lt;/td&gt;
    &lt;td&gt;Deletes item at a particular index from the list&lt;/td&gt;
    &lt;td&gt;del a[0]&lt;/td&gt;
    &lt;td&gt;[30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;

==Printing the List==
=== Print whole list ===
A list can be printed simply or using a ''for / while'' loop 

 print(List_2)     # To print the entire list
This code will print      
 ['Kala','Mala']     

===Print element at a particular index===
&lt;pre&gt;
Using index position
    List_2[0]     # prints 'Kala' ,i.e,the value at index position 0.
    List_2[1]     # prints 'Mala'.
&lt;/pre&gt;
=== Without using index position ===
&lt;pre&gt;
for item in List_2:   # here item is a variable used to access elements in list.
       print(item)
   This code snippet prints 
    Kala
    Mala
&lt;/pre&gt;

==Search for a particular element in list==
Elements in a list can be searched by one of the two ways:
=== using index() function===
&lt;pre&gt;
ages1 = [11,23,12,23,45]

#if element is available in the list, index() returns the index value on which, the element is present.
print(ages1.index(45))#Output: 4

#if element is not available in the list, index() returns ''ValueError''
print(ages1.index(0))#Output: ValueError:
&lt;/pre&gt;

In programming, if such error occurs, program gets terminated. It can be solved using exception handling.
e.g.
&lt;pre&gt;
ages1 = [11,23,12,23,45]

try:
    print(ages1.index(0))
except ValueError:
    print(&quot;Exception has occured&quot;)    
    print(&quot;Element is not found in the list&quot;)

&lt;/pre&gt;
&lt;pre&gt;
'''Output: 
Exception has occured
Element is not found in the list
'''&lt;/pre&gt;

=== using 'in' operator===
''in'' operator is used to check whether a particular element is available in the list or not.e.g.

&lt;pre&gt;
ages1 = [11,23,12,23,45]
no=11

if no in ages1:
    print(&quot;no is there in the list&quot;)
else:    
    print(&quot;no is NOT there in the list&quot;)
&lt;/pre&gt;
&lt;pre&gt;
#Output: no is there in the list
&lt;/pre&gt;

'''Number is not there in the list'''
&lt;pre&gt;
ages1 = [11,23,12,23,45]
no=15

if no in ages1:
    print(&quot;no is there in the list&quot;)
else:    
    print(&quot;no is NOT there in the list&quot;)
&lt;/pre&gt;
&lt;pre&gt;
Output: no is NOT there in the list
&lt;/pre&gt;


==Updating the List==
The lists can be updated using ''append'' or ''insert'' function.  Append adds the element to the end of the list and Insert adds the element in the specified position.
   List_2.append(&quot;Sheela&quot;)    # add the element 'Sheela' to the end of the list.
   print (List_2) will output 
   ['Kala', 'Mala', 'Sheela']
   
   List_2.insert(1,&quot;Bala&quot;)    # add the element &quot;Bala&quot; in the list at the index 1.
   print (List_2) will output 
   ['Kala', 'Bala','Mala', 'Sheela']

=== Extend the list by adding elements of other list at end using extend()===
&lt;pre&gt;
ages = [11,23,12,23,45]
ages.extend([57,58])
print(ages)
&lt;/pre&gt;

&lt;pre&gt;
#Output: [11, 23, 12, 23, 45, 57, 58]
&lt;/pre&gt;

==== Difference between ''append and extend'' ====
Difference between append and extend can be easily understood, by the following example.

&lt;pre&gt;
appendlist = [11,23,12,23,45]
appendlist.append([57,58])

extendlist= [11,23,12,23,45]
extendlist.extend([57,58])
&lt;/pre&gt;

&lt;pre&gt;
'''Output:
[11, 23, 12, 23, 45, [57, 58]]
[11, 23, 12, 23, 45, 57, 58]'''
&lt;/pre&gt;

==Basic Operations on List==
===Frequency of Occurrence===
list.count(object) will return the number of times the object occur in the list.
  '''Example'''
    ages = [11,23,12,23,45,43,22,24,23]
    ages.count(23) will return
    3
    ages.count(100) will return
    0

===Length of the List===
len(list) will return the length of the list ie. the number of objects in the list.
  '''Example'''
    ages = [11,23,12,23,45,43,22,24,23]
    len(ages) will output
    9
To print the objects in the list either use ''for item in list'' or ''for index in range(len(list))''
    for item in ages:       
        print (item)  
        (OR)
    for index in range(len(ages)) :
        print (ages[index])
===Sort the List===
list.sort() will sort the list in ascending order
  '''Example'''
    ages = [11,23,12,23,45,43,22,24,23]
    ages.sort() 
    print (ages) 
    [11, 12, 22, 23, 23, 23, 24, 43, 45]
===Sort the List using sorted() function===
sorted(list1) will sort the list and return a new list, it doesn't modify the original list
&lt;br&gt;'''Example: Sort in ascending order'''
&lt;pre&gt;
ages = [11,23,12,23,45,43,22,24,23]
newList=sorted(ages)
print(newList)

#Output: [11, 12, 22, 23, 23, 23, 24, 43, 45]
&lt;/pre&gt;

&lt;br&gt;'''Example: Sort in descending order'''
&lt;pre&gt;
ages = [11,23,12,23,45,43,22,24,23]
newList=sorted(ages,reverse=True)
print(newList)

#Output: [45, 43, 24, 23, 23, 23, 22, 12, 11]
&lt;/pre&gt;

===Reverse the List===
list.reverse() will reverse the original list
  '''Example'''
    ages = [11, 12, 22, 23, 23, 23, 24, 43, 45]
    ages.reverse()
    print (ages)
    [45, 43, 24, 23, 23, 23, 22, 12, 11]

Both sort() and reverse() list operation will work on numeric and alphanumeric data list.

A special use of the reverse() function is to descend a list that is sorted in ascending order.

  '''Example'''
&lt;pre&gt;
ages = [11, 12, 22, 23, 23, 23, 24, 43, 45]
ages.sort()
print(ages)
ages.reverse()
print(ages)
&lt;/pre&gt;

===Slicing===
Used to retrieve an object or objects in a range as a list  
  '''Example'''
Use ''list[index]'' to retrieve the object at the given index
         In [1]: student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
         In [2]: student[3]     #Object at index 3.  Remember index starts at 0
         Out[2]: 'Geetha'      


Use ''list[start_index : end_index + 1]'' to retrieve objects from the start_index to end_index 
         In [3]: student[2:4]     # Objects from index 2 to 3 as List. Note the [ and ]
         Out[3]: ['Vijay', 'Geetha']   


Use ''list[:]'' to retrieve objects from the starting of the list to the end of the list. 
The default start value will be the starting index of the list (i.e. 0) and the default end value
will be the length of the list 
         In [4]: student[:]        # prints the entire list
         Out[4]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma', 'Janani']


         In [5]: student[:5]       # prints the objects from the start of the list upto object at index 4
         Out[5]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran']


         In [6]: student[2:]       # prints the objects from index 2 upto the end of the list
         Out[6]: ['Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma', 'Janani']


Negative index too is available in Python. It starts from last element of the list. i.e.

         In [7]:student[-1]        #prints last index of list
         Out[7]: 'Janani'


         In [8]:student[-1:-8]     #prints empty list
         Out[8]: []


         In [9]:student[-8:-1]     #prints -8th index to -1st index elements
         Out[9]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma']

===Removing Item from list ===
----

Is used to remove a specific item from the list.

'''Example:'''
 
Use list.remove(entry/value)  Or   del list[index]    Or list.pop(index)
         student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
         student.remove(&quot;Arun&quot;)   #This will delete item &quot;Arun&quot;
         Or    
         del student[0]           # This will delete item at index 0
         Or
         student.pop(0)         # This will delete and return item at index 0


         print(student)    
         Output: [&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]

===Delete list ===
----
Used to delete complete list

'''Example'''

Use del &lt;list name&gt;
         student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
         del student

===Concatenation of two lists===
----
''+'' is the concatenation operator which is used concatenate two lists. 
&lt;pre&gt;
ages1 = [11,23,12,23,45]
ages2 = [25, 24, 43, 47]
age=ages1+ages2
print(age)
#Output: [11, 23, 12, 23, 45, 25, 24, 43, 47]
&lt;/pre&gt;

===Repeatation of a list ===
----
''*'' is the operator to repeat a particular list.
&lt;pre&gt;
ages1 = [11,23,12,23,45]
age=ages1*5 #ages1 list is repeated 5 times and stroed in ''age'' list
print(age)

#Output: [11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45]
&lt;/pre&gt;
====Conditional Statements====
    Conditionals are used to check the condition and change the flow of the program 
accordingly. They are realized in programming languages through if statement. The 
syntax is as follows :
         if condition : 
            statement
    '''Note:''' Do not forget indentation (inserting space/tab) in the line after the
 if condition.
    
    In case you want to execute a set of statements when a condition is true and another

set of statement when the condition is false.
         if condition : 
            statement 1
         else :
            statement 2
    
    Multiple if-else statements can be written as follows:
         if condition_1 : 
            statement 1
         elif condition_2 : # 'elif' is short for 'else if'
            statement 2
         elif condition_3 :
            statement 3
        .
        .
         else :
            final statement

=Loops and Conditionals : Fizzbuzz=
====Loops====

    Loops are used to execute a set of repetitive statements. They are realized
 through 'while' and 'for' loops in programming languages. The syntax of 'for' loop is 
as follows :
        for LOOPVARIABLE in SEQUENCE: 
            STATEMENTS
    '''e.g.''' to print all the data from a list we can write:
        for item in list_name
            print(item)
    OR
        for index in range(len(list_name))
            print(list_name[index])
    
    The syntax for while loop is as follows :
    
        while BOOLEANEXPRESSION: 
            STATEMENTS
            INCREMENT/DECREMENT
    
    '''e.g.''' if we want to print all numbers from 1 to 10
        i=1
        while i&lt;=10 :
            print(i,&quot; &quot;)
            i=i+1
    
    'while' loop has indefinite iteration (run-time unknown). So, there must be loop
 break statement in it.
 Whereas 'for' loop is definite in nature (i.e. known or predictable span).&lt;br&gt;

&lt;b&gt;NOTE: Python doesn't have anything like do-while loop.&lt;/b&gt;

==Implementation==
Here, we try to demonstrate the concept of loops and conditionals through a game called Fizzbuzz. The rules are as follows :&lt;br/&gt;
[[File:fizzBuzz.gif]]

• if input number is a multiple of ’3’ print ”Fizz”
&lt;br/&gt;
• if input number is a multiple of ’5’ print ”Buzz”
&lt;br/&gt;
• if input number is a multiple of both '3' and ’5’ print ”FizzBuzz”
&lt;br/&gt;
The pseudo code is as follows :
&lt;pre&gt;
   If input no % 3 == 0 and  input no % 5 == 0 : 
       print ”Fizzbuzz”
   else if input no % 3 == 0 : 
       print ”Fizz”
   else if input no % 5 == 0 : 
       print ”Buzz”
   else :
       print the input no
&lt;/pre&gt;
The order of statements execution matters to get the desired output. The highest priority condition should be first followed by other. In fizzbuzz programming, first checking should be done for both divisibility of 3 and 5. If condition not satisfied only then it should check individually for 3 or 5. So carefully choosing the order is crucial for better programming.
Note: There is some effect of present condition statements chosen on next conditions statements. That is why in first attempt fizzbuzz programming got struck.

Example: 
&lt;pre&gt;
#Code to achieve the above requirement in python3.
i = int(input(&quot;Enter the number&quot;)) 
if i%3 == 0 and i%5 == 0: print(i,&quot;FizzBuzz&quot;)  
elif i%5 == 0: print(i,&quot;Buzz&quot;)
elif i%3 == 0: print(i,&quot;Fizz&quot;)
else: print(i)
&lt;/pre&gt;
Lets put the same into a loop for a range given by the user.
&lt;pre&gt;
def fizzbuzzgame(start,stop):
    for i in range(start,stop+1):
        if i%3 == 0 and i%5 == 0:
            print(i,&quot;FizzBuzz&quot;)
        elif i%5 == 0:
            print(i,&quot;Buzz&quot;)
        elif i%3 == 0:
            print(i,&quot;Fizz&quot;)
        else: print(i)

fizzbuzzgame(50,100)
&lt;/pre&gt;


=== Fizz Buzz game in Interactive mode with Score ===
'''By Ms. Ami Tusharkant Choksi'''
&lt;pre&gt;
def fizzbuzzgame(i):
        if i%3 == 0 and i%5 == 0:
            print(i,&quot;FizzBuzz&quot;)
            return(&quot;fzbz&quot;)
        elif i%5 == 0:
            print(i,&quot;Buzz&quot;)
            return(&quot;bz&quot;)
        elif i%3 == 0:
            print(i,&quot;Fizz&quot;)
            return(&quot;fz&quot;)
        else:
            print(i)
            return(&quot;no&quot;)

ch = 'y'
fizzbuzz=0
fizz=0
buzz=0
nothing=0
print(&quot;&quot;&quot;
 _____  ____  _____  _____  ____   __ __  _____  _____       ____   ____  ___ ___    ___ 
|     ||    ||     ||     ||    \ |  |  ||     ||     |     /    | /    ||   |   |  /  _]
|   __| |  | |__/  ||__/  ||  o  )|  |  ||__/  ||__/  |    |   __||  o  || _   _ | /  [_ 
|  |_   |  | |   __||   __||     ||  |  ||   __||   __|    |  |  ||     ||  \_/  ||    _]
|   _]  |  | |  /  ||  /  ||  O  ||  :  ||  /  ||  /  |    |  |_ ||  _  ||   |   ||   [_ 
|  |    |  | |     ||     ||     ||     ||     ||     |    |     ||  |  ||   |   ||     |
|__|   |____||_____||_____||_____| \__,_||_____||_____|    |___,_||__|__||___|___||_____|
                                                                                         
&quot;&quot;&quot;)   

while(ch == 'y'):
    n=int(input(&quot;Enter a Number : &quot;))
    winLoose=fizzbuzzgame(n)
    if(winLoose == &quot;fz&quot;):
        fizz+=1
    elif(winLoose == &quot;bz&quot;):
        buzz+=1
    elif(winLoose == &quot;fzbz&quot;):
        fizzbuzz+=1
    ch=input(&quot;Do you want to continue playing the game : (y/n)&quot;)
    if(ch=='n'):
        print('Congratulations, your score is\n FizzBuzz:%d\nFizz:%d\nBuzz:%d' %
(fizzbuzz,fizz,buzz))
    
'''Sample Output:

 _____  ____  _____  _____  ____   __ __  _____  _____       ____   ____  ___ ___    ___ 
|     ||    ||     ||     ||    \ |  |  ||     ||     |     /    | /    ||   |   |  /  _]
|   __| |  | |__/  ||__/  ||  o  )|  |  ||__/  ||__/  |    |   __||  o  || _   _ | /  [_ 
|  |_   |  | |   __||   __||     ||  |  ||   __||   __|    |  |  ||     ||  \_/  ||    _]
|   _]  |  | |  /  ||  /  ||  O  ||  :  ||  /  ||  /  |    |  |_ ||  _  ||   |   ||   [_ 
|  |    |  | |     ||     ||     ||     ||     ||     |    |     ||  |  ||   |   ||     |
|__|   |____||_____||_____||_____| \__,_||_____||_____|    |___,_||__|__||___|___||_____|
                                                                                         

Enter a Number : 666
666 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 777
777 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 555
555 FizzBuzz
Do you want to continue playing the game : (y/n)y
Enter a Number : 1
1
Do you want to continue playing the game : (y/n)y
Enter a Number : 789
789 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 25
25 Buzz
Do you want to continue playing the game : (y/n)n
Congratulations, your score is

FizzBuzz:1
Fizz:3
Buzz:1

&lt;/pre&gt;

=Crowd Computing: Just Estimate=
==Wisdom of Crowds==
The concept of ’Wisdom of Crowds’ was proposed by Francis Galton. A weight-judging competition was carried on at the annual show of the West of England Fat Stock and Poultry Exhibition recently held at Plymouth, A fat ox having been selected, competitors bought stamped and numbered cards, each, on which to inscribe their respective names, addresses, and estimates of what the ox would weigh after it had been slaughtered. Those who guessed most successfully received prizes. About 8oo tickets were issued to the par- ticipants. The middlemost estimate of all the estimates recorded was 1207 lbs and the actual weight of the ox was 1198 lbs.

==Our Experiment==
The crowd had to guess the number of candies/gems in a jar. Around 75 people participated in the experiment. The actual number of gems in the jar were 375. The median of all estimates came out to be 300 and the mean of all the estimates came out to be around 396. Median underestimated and mean overestimated the actual value. So according to recent studies, Trimmed mean must be used as an aggregate measure to estimate where Wisdom of Crowds is involved.
[[File:Gemsjar.jpg|center|200px|caption]]

===Trimmed Mean===
In these kinds of experiments, 10% trimmed mean is usually followed. For calculating 10% trimmed mean, remove 10% smallest and 10% largest values from the sample. Calculate the mean of the sample obtained. In the above experiment, the trimmed mean came out to be around 351 which is very close to the actual value.

==Implementation==
Here, we try to demonstrate the concept of trimmed mean through crowd computing.
 Input a list of estimates done by the crowd .
 Sort the list.
 Remove the 10% smallest values.
 Remove the 10% largest values.
 Calculate the mean of the new list obtained .&lt;hr&gt;

==Data of Experiment==       
    Estimates =[1000,1010,1786,2000,1500,1500,100,120,150,150,150,170,175,180,197,200,200,200,200,200,200,220,220,220,220,234,250,250,250,250,250,250,250,250,250,263,270,275,275,286,300,
                300,300,300,300,300,300,300,320,350,350,350,400, 400,400,400,400,450,467,500,500,500,500,500,500,500,550,550,600,600,600,650,700,700,720]

    '''CODE:'''
&lt;pre&gt;
Estimates = [1000,1010,1786,2000,1500,1500,100,120,150,150,150,170,175,180,197,200,200,200,200,200,200,220,220,220,220,234,250,250,250,250,250,250,250,250,250,263,270,275,275,286,300,                300,300,300,300,300,300,300,320,350,350,350,400,400,400,400,400,450,467,500,500,500,500,500,500,500,550,550,600,600,600,650,700,700,720]
Estimates.sort()
offset = int(0.10*len(Estimates))
for i in range(offset):
       del Estimates[0]
       del Estimates[-1]
Sum = 0    
for i in range(len(Estimates)):
       Sum += Estimates[i]
Mean_Value = Sum/len(Estimates)
print(&quot;Mean : &quot;, int(Mean_Value))
#Output:
Mean :  351
&lt;/pre&gt;
&lt;hr&gt;
==Trimmed Mean for the above example== 
&lt;h3&gt;Using scipy library&lt;/h3&gt;
&lt;pre&gt;
#import scipy to use the method of trim_mean
from scipy import stats
trimMean = stats.trim_mean(Estimates, 0.1) # Trim 10% at both ends
print(&quot;Trimmed Mean : &quot;,trimMean)
#Output:
Trimmed Mean :  335.1020408163265
&lt;/pre&gt;

&lt;h3&gt;Without using scipy library&lt;/h3&gt;
&lt;pre&gt;
#Trimmed mean with 10%
p=10/100
#sorted data
data=[2, 4, 6, 7, 11, 21, 81, 90, 105, 121]
n = len(data)
#Remove elements from both end
rem=int(n*p)
newData = data[rem:-rem]
mean = 0
for i in newData:
    mean += i
mean = int(mean/len(newData))
print(&quot;Trimmed mean : &quot;,mean)
#Output: Trimmed mean :  40
&lt;/pre&gt;
[[#Top]]

*[http://sccilabs.org/jocwiki/index.php/Permutations_:_Jumbled_Words Permutations: Jumbled Words]
*[http://sccilabs.org/jocwiki/index.php/Theory_of_Evolution Theory of Evolution]</text>
      <sha1>8ehbzls7gsqf8gzr86n5rhy7ky6m9vi</sha1>
    </revision>
    <revision>
      <id>3360</id>
      <parentid>3359</parentid>
      <timestamp>2018-09-26T06:12:53Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* Trimmed Mean for the above example */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="26879">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_3 Contributors of this page]
*Week 3 Playlist: https://www.youtube.com/playlist?list=PLc_j0TNIaWxOVx_z9jAM2UB3RqYNXaoEo
=List=
List is a flexible data structure used for storing a group of data separated by comma. The elements in a list need not be of the same data type.

'''Example:'''
       List_1 = [ 1, 2,3] or 
       List_1 = [&quot;coffee&quot;, &quot;Tea&quot;, &quot;Milk&quot;] or
       List_1 = [1,&quot;coffee&quot;, &quot;Tea&quot;, 3, &quot;5&quot;]

==List Creation==
a) A list can be created by simply putting values (separated by comma) between square brackets as given below,
       List_1 = [1,&quot;coffee&quot;, &quot;Tea&quot;, 3, &quot;5&quot;] #this creates a list by name List_1 containing following items


Or,
(b)A List can be created from scratch and elements can be added 
        List_2 = [ ]
        List_2.append(&quot;Kala&quot;)
        List_2.append(&quot;Mala&quot;)
Here we use &quot;append&quot; ,which is a function in python that enable us to append or attach an element to a list .
Thus List_2 will now hold [&quot;Kala&quot;,&quot;Mala&quot;]

==Operations and Methods to work with List==
&lt;pre&gt;
a = [25,30,50,90,12,13]
b = [100,300,500,200,250]
&lt;/pre&gt;
&lt;hr&gt;
&lt;table border=2&gt;
  &lt;tr&gt;
    &lt;th&gt;&lt;b&gt;Method/&lt;br&gt;Operator&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Function&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Syntax&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Output&lt;/b&gt;&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;len()&lt;/td&gt;
    &lt;td&gt;Find length of a list&lt;/td&gt;
    &lt;td&gt;len(a)&lt;/td&gt;
    &lt;td&gt;6&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;max()&lt;/td&gt;
    &lt;td&gt;Find maximum element from the list&lt;/td&gt;
    &lt;td&gt;max(a)&lt;/td&gt;
    &lt;td&gt;90&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;min()&lt;/td&gt;
    &lt;td&gt;Find minimum element from the list&lt;/td&gt;
    &lt;td&gt;min(a)&lt;/td&gt;
    &lt;td&gt;12&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sum()&lt;/td&gt;
    &lt;td&gt;Returns sum of all elements of the list&lt;/td&gt;
    &lt;td&gt;sum(a)&lt;/td&gt;
    &lt;td&gt;220&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;reverse()&lt;/td&gt;
    &lt;td&gt;Reverses the original list&lt;/td&gt;
    &lt;td&gt;a.reverse()&lt;/td&gt;
    &lt;td&gt;[13, 12, 90, 50, 30, 25]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sort()&lt;/td&gt;
    &lt;td&gt;Sorts the original list in ascending order&lt;/td&gt;
    &lt;td&gt;a.sort()&lt;/td&gt;
    &lt;td&gt;[12, 13, 25, 30, 50, 90]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sorted()&lt;/td&gt;
    &lt;td&gt;Returns the new sorted list &lt;/td&gt;
    &lt;td&gt;sorted(a)&lt;/td&gt;
    &lt;td&gt;[12, 13, 25, 30, 50, 90]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;insert()&lt;/td&gt;
    &lt;td&gt;Insert at a particular index in the list, and shifts remaining elements&lt;/td&gt;
    &lt;td&gt;a.insert(3,3)&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 3, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;append()&lt;/td&gt;
    &lt;td&gt;Adds elements/object to the end of the list&lt;/td&gt;
    &lt;td&gt;a.append(5)&lt;br&gt;a.append([10,20])&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 5]&lt;br&gt;[25, 30, 50, 90, 12, 13, [10, 20]]&lt;br&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;extend()&lt;/td&gt;
    &lt;td&gt;Adds object to the end of the list as elements not as object&lt;/td&gt;
    &lt;td&gt;a.extend([10,20])&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 10, 20]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;*&amp;nbsp;&amp;nbsp;Repeatation&lt;br&gt;operator&lt;/td&gt;
    &lt;td&gt;Repeat the list for n times and returns a new list&lt;/td&gt;
    &lt;td&gt;a*2&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 25, 30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;+ Concatenation&lt;br&gt;operator&lt;/td&gt;
    &lt;td&gt;Concatenates two lists, and returns a new list&lt;/td&gt;
    &lt;td&gt;a+b&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 100, 300, 500, 200, 250]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;index()&lt;/td&gt;
    &lt;td&gt;Finds index of a particular element in the list or not&lt;/td&gt;
    &lt;td&gt;a.index(25)&lt;br&gt;a.index(0)&lt;br&gt;&lt;/td&gt;
    &lt;td&gt;0&lt;br&gt;&lt;br&gt;ValueError: 0 is not in list&lt;br&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;in operator&lt;/td&gt;
    &lt;td&gt;Finds whether a particular element is in the list or not, returns boolean&lt;/td&gt;
    &lt;td&gt;25 in a&lt;/td&gt;
    &lt;td&gt;True&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;not in operator&lt;/td&gt;
    &lt;td&gt;Checks if element is not available in list, returns boolean&lt;/td&gt;
    &lt;td&gt;25 not in a&lt;/td&gt;
    &lt;td&gt;False&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;count()&lt;/td&gt;
    &lt;td&gt;Counts the number of occurence of an element in the list&lt;/td&gt;
    &lt;td&gt;a.count(25)&lt;/td&gt;
    &lt;td&gt;1&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;remove()&lt;/td&gt;
    &lt;td&gt;Removes an element from the list&lt;/td&gt;
    &lt;td&gt;a.remove(25)&lt;/td&gt;
    &lt;td&gt; [30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;pop()&lt;/td&gt;
    &lt;td&gt;Delete and return item at index 0&lt;/td&gt;
    &lt;td&gt;a.pop(0)&lt;/td&gt;
    &lt;td&gt;25 , a will be [30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;del&lt;/td&gt;
    &lt;td&gt;Deletes item at a particular index from the list&lt;/td&gt;
    &lt;td&gt;del a[0]&lt;/td&gt;
    &lt;td&gt;[30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;

==Printing the List==
=== Print whole list ===
A list can be printed simply or using a ''for / while'' loop 

 print(List_2)     # To print the entire list
This code will print      
 ['Kala','Mala']     

===Print element at a particular index===
&lt;pre&gt;
Using index position
    List_2[0]     # prints 'Kala' ,i.e,the value at index position 0.
    List_2[1]     # prints 'Mala'.
&lt;/pre&gt;
=== Without using index position ===
&lt;pre&gt;
for item in List_2:   # here item is a variable used to access elements in list.
       print(item)
   This code snippet prints 
    Kala
    Mala
&lt;/pre&gt;

==Search for a particular element in list==
Elements in a list can be searched by one of the two ways:
=== using index() function===
&lt;pre&gt;
ages1 = [11,23,12,23,45]

#if element is available in the list, index() returns the index value on which, the element is present.
print(ages1.index(45))#Output: 4

#if element is not available in the list, index() returns ''ValueError''
print(ages1.index(0))#Output: ValueError:
&lt;/pre&gt;

In programming, if such error occurs, program gets terminated. It can be solved using exception handling.
e.g.
&lt;pre&gt;
ages1 = [11,23,12,23,45]

try:
    print(ages1.index(0))
except ValueError:
    print(&quot;Exception has occured&quot;)    
    print(&quot;Element is not found in the list&quot;)

&lt;/pre&gt;
&lt;pre&gt;
'''Output: 
Exception has occured
Element is not found in the list
'''&lt;/pre&gt;

=== using 'in' operator===
''in'' operator is used to check whether a particular element is available in the list or not.e.g.

&lt;pre&gt;
ages1 = [11,23,12,23,45]
no=11

if no in ages1:
    print(&quot;no is there in the list&quot;)
else:    
    print(&quot;no is NOT there in the list&quot;)
&lt;/pre&gt;
&lt;pre&gt;
#Output: no is there in the list
&lt;/pre&gt;

'''Number is not there in the list'''
&lt;pre&gt;
ages1 = [11,23,12,23,45]
no=15

if no in ages1:
    print(&quot;no is there in the list&quot;)
else:    
    print(&quot;no is NOT there in the list&quot;)
&lt;/pre&gt;
&lt;pre&gt;
Output: no is NOT there in the list
&lt;/pre&gt;


==Updating the List==
The lists can be updated using ''append'' or ''insert'' function.  Append adds the element to the end of the list and Insert adds the element in the specified position.
   List_2.append(&quot;Sheela&quot;)    # add the element 'Sheela' to the end of the list.
   print (List_2) will output 
   ['Kala', 'Mala', 'Sheela']
   
   List_2.insert(1,&quot;Bala&quot;)    # add the element &quot;Bala&quot; in the list at the index 1.
   print (List_2) will output 
   ['Kala', 'Bala','Mala', 'Sheela']

=== Extend the list by adding elements of other list at end using extend()===
&lt;pre&gt;
ages = [11,23,12,23,45]
ages.extend([57,58])
print(ages)
&lt;/pre&gt;

&lt;pre&gt;
#Output: [11, 23, 12, 23, 45, 57, 58]
&lt;/pre&gt;

==== Difference between ''append and extend'' ====
Difference between append and extend can be easily understood, by the following example.

&lt;pre&gt;
appendlist = [11,23,12,23,45]
appendlist.append([57,58])

extendlist= [11,23,12,23,45]
extendlist.extend([57,58])
&lt;/pre&gt;

&lt;pre&gt;
'''Output:
[11, 23, 12, 23, 45, [57, 58]]
[11, 23, 12, 23, 45, 57, 58]'''
&lt;/pre&gt;

==Basic Operations on List==
===Frequency of Occurrence===
list.count(object) will return the number of times the object occur in the list.
  '''Example'''
    ages = [11,23,12,23,45,43,22,24,23]
    ages.count(23) will return
    3
    ages.count(100) will return
    0

===Length of the List===
len(list) will return the length of the list ie. the number of objects in the list.
  '''Example'''
    ages = [11,23,12,23,45,43,22,24,23]
    len(ages) will output
    9
To print the objects in the list either use ''for item in list'' or ''for index in range(len(list))''
    for item in ages:       
        print (item)  
        (OR)
    for index in range(len(ages)) :
        print (ages[index])
===Sort the List===
list.sort() will sort the list in ascending order
  '''Example'''
    ages = [11,23,12,23,45,43,22,24,23]
    ages.sort() 
    print (ages) 
    [11, 12, 22, 23, 23, 23, 24, 43, 45]
===Sort the List using sorted() function===
sorted(list1) will sort the list and return a new list, it doesn't modify the original list
&lt;br&gt;'''Example: Sort in ascending order'''
&lt;pre&gt;
ages = [11,23,12,23,45,43,22,24,23]
newList=sorted(ages)
print(newList)

#Output: [11, 12, 22, 23, 23, 23, 24, 43, 45]
&lt;/pre&gt;

&lt;br&gt;'''Example: Sort in descending order'''
&lt;pre&gt;
ages = [11,23,12,23,45,43,22,24,23]
newList=sorted(ages,reverse=True)
print(newList)

#Output: [45, 43, 24, 23, 23, 23, 22, 12, 11]
&lt;/pre&gt;

===Reverse the List===
list.reverse() will reverse the original list
  '''Example'''
    ages = [11, 12, 22, 23, 23, 23, 24, 43, 45]
    ages.reverse()
    print (ages)
    [45, 43, 24, 23, 23, 23, 22, 12, 11]

Both sort() and reverse() list operation will work on numeric and alphanumeric data list.

A special use of the reverse() function is to descend a list that is sorted in ascending order.

  '''Example'''
&lt;pre&gt;
ages = [11, 12, 22, 23, 23, 23, 24, 43, 45]
ages.sort()
print(ages)
ages.reverse()
print(ages)
&lt;/pre&gt;

===Slicing===
Used to retrieve an object or objects in a range as a list  
  '''Example'''
Use ''list[index]'' to retrieve the object at the given index
         In [1]: student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
         In [2]: student[3]     #Object at index 3.  Remember index starts at 0
         Out[2]: 'Geetha'      


Use ''list[start_index : end_index + 1]'' to retrieve objects from the start_index to end_index 
         In [3]: student[2:4]     # Objects from index 2 to 3 as List. Note the [ and ]
         Out[3]: ['Vijay', 'Geetha']   


Use ''list[:]'' to retrieve objects from the starting of the list to the end of the list. 
The default start value will be the starting index of the list (i.e. 0) and the default end value
will be the length of the list 
         In [4]: student[:]        # prints the entire list
         Out[4]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma', 'Janani']


         In [5]: student[:5]       # prints the objects from the start of the list upto object at index 4
         Out[5]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran']


         In [6]: student[2:]       # prints the objects from index 2 upto the end of the list
         Out[6]: ['Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma', 'Janani']


Negative index too is available in Python. It starts from last element of the list. i.e.

         In [7]:student[-1]        #prints last index of list
         Out[7]: 'Janani'


         In [8]:student[-1:-8]     #prints empty list
         Out[8]: []


         In [9]:student[-8:-1]     #prints -8th index to -1st index elements
         Out[9]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma']

===Removing Item from list ===
----

Is used to remove a specific item from the list.

'''Example:'''
 
Use list.remove(entry/value)  Or   del list[index]    Or list.pop(index)
         student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
         student.remove(&quot;Arun&quot;)   #This will delete item &quot;Arun&quot;
         Or    
         del student[0]           # This will delete item at index 0
         Or
         student.pop(0)         # This will delete and return item at index 0


         print(student)    
         Output: [&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]

===Delete list ===
----
Used to delete complete list

'''Example'''

Use del &lt;list name&gt;
         student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
         del student

===Concatenation of two lists===
----
''+'' is the concatenation operator which is used concatenate two lists. 
&lt;pre&gt;
ages1 = [11,23,12,23,45]
ages2 = [25, 24, 43, 47]
age=ages1+ages2
print(age)
#Output: [11, 23, 12, 23, 45, 25, 24, 43, 47]
&lt;/pre&gt;

===Repeatation of a list ===
----
''*'' is the operator to repeat a particular list.
&lt;pre&gt;
ages1 = [11,23,12,23,45]
age=ages1*5 #ages1 list is repeated 5 times and stroed in ''age'' list
print(age)

#Output: [11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45]
&lt;/pre&gt;
====Conditional Statements====
    Conditionals are used to check the condition and change the flow of the program 
accordingly. They are realized in programming languages through if statement. The 
syntax is as follows :
         if condition : 
            statement
    '''Note:''' Do not forget indentation (inserting space/tab) in the line after the
 if condition.
    
    In case you want to execute a set of statements when a condition is true and another

set of statement when the condition is false.
         if condition : 
            statement 1
         else :
            statement 2
    
    Multiple if-else statements can be written as follows:
         if condition_1 : 
            statement 1
         elif condition_2 : # 'elif' is short for 'else if'
            statement 2
         elif condition_3 :
            statement 3
        .
        .
         else :
            final statement

=Loops and Conditionals : Fizzbuzz=
====Loops====

    Loops are used to execute a set of repetitive statements. They are realized
 through 'while' and 'for' loops in programming languages. The syntax of 'for' loop is 
as follows :
        for LOOPVARIABLE in SEQUENCE: 
            STATEMENTS
    '''e.g.''' to print all the data from a list we can write:
        for item in list_name
            print(item)
    OR
        for index in range(len(list_name))
            print(list_name[index])
    
    The syntax for while loop is as follows :
    
        while BOOLEANEXPRESSION: 
            STATEMENTS
            INCREMENT/DECREMENT
    
    '''e.g.''' if we want to print all numbers from 1 to 10
        i=1
        while i&lt;=10 :
            print(i,&quot; &quot;)
            i=i+1
    
    'while' loop has indefinite iteration (run-time unknown). So, there must be loop
 break statement in it.
 Whereas 'for' loop is definite in nature (i.e. known or predictable span).&lt;br&gt;

&lt;b&gt;NOTE: Python doesn't have anything like do-while loop.&lt;/b&gt;

==Implementation==
Here, we try to demonstrate the concept of loops and conditionals through a game called Fizzbuzz. The rules are as follows :&lt;br/&gt;
[[File:fizzBuzz.gif]]

• if input number is a multiple of ’3’ print ”Fizz”
&lt;br/&gt;
• if input number is a multiple of ’5’ print ”Buzz”
&lt;br/&gt;
• if input number is a multiple of both '3' and ’5’ print ”FizzBuzz”
&lt;br/&gt;
The pseudo code is as follows :
&lt;pre&gt;
   If input no % 3 == 0 and  input no % 5 == 0 : 
       print ”Fizzbuzz”
   else if input no % 3 == 0 : 
       print ”Fizz”
   else if input no % 5 == 0 : 
       print ”Buzz”
   else :
       print the input no
&lt;/pre&gt;
The order of statements execution matters to get the desired output. The highest priority condition should be first followed by other. In fizzbuzz programming, first checking should be done for both divisibility of 3 and 5. If condition not satisfied only then it should check individually for 3 or 5. So carefully choosing the order is crucial for better programming.
Note: There is some effect of present condition statements chosen on next conditions statements. That is why in first attempt fizzbuzz programming got struck.

Example: 
&lt;pre&gt;
#Code to achieve the above requirement in python3.
i = int(input(&quot;Enter the number&quot;)) 
if i%3 == 0 and i%5 == 0: print(i,&quot;FizzBuzz&quot;)  
elif i%5 == 0: print(i,&quot;Buzz&quot;)
elif i%3 == 0: print(i,&quot;Fizz&quot;)
else: print(i)
&lt;/pre&gt;
Lets put the same into a loop for a range given by the user.
&lt;pre&gt;
def fizzbuzzgame(start,stop):
    for i in range(start,stop+1):
        if i%3 == 0 and i%5 == 0:
            print(i,&quot;FizzBuzz&quot;)
        elif i%5 == 0:
            print(i,&quot;Buzz&quot;)
        elif i%3 == 0:
            print(i,&quot;Fizz&quot;)
        else: print(i)

fizzbuzzgame(50,100)
&lt;/pre&gt;


=== Fizz Buzz game in Interactive mode with Score ===
'''By Ms. Ami Tusharkant Choksi'''
&lt;pre&gt;
def fizzbuzzgame(i):
        if i%3 == 0 and i%5 == 0:
            print(i,&quot;FizzBuzz&quot;)
            return(&quot;fzbz&quot;)
        elif i%5 == 0:
            print(i,&quot;Buzz&quot;)
            return(&quot;bz&quot;)
        elif i%3 == 0:
            print(i,&quot;Fizz&quot;)
            return(&quot;fz&quot;)
        else:
            print(i)
            return(&quot;no&quot;)

ch = 'y'
fizzbuzz=0
fizz=0
buzz=0
nothing=0
print(&quot;&quot;&quot;
 _____  ____  _____  _____  ____   __ __  _____  _____       ____   ____  ___ ___    ___ 
|     ||    ||     ||     ||    \ |  |  ||     ||     |     /    | /    ||   |   |  /  _]
|   __| |  | |__/  ||__/  ||  o  )|  |  ||__/  ||__/  |    |   __||  o  || _   _ | /  [_ 
|  |_   |  | |   __||   __||     ||  |  ||   __||   __|    |  |  ||     ||  \_/  ||    _]
|   _]  |  | |  /  ||  /  ||  O  ||  :  ||  /  ||  /  |    |  |_ ||  _  ||   |   ||   [_ 
|  |    |  | |     ||     ||     ||     ||     ||     |    |     ||  |  ||   |   ||     |
|__|   |____||_____||_____||_____| \__,_||_____||_____|    |___,_||__|__||___|___||_____|
                                                                                         
&quot;&quot;&quot;)   

while(ch == 'y'):
    n=int(input(&quot;Enter a Number : &quot;))
    winLoose=fizzbuzzgame(n)
    if(winLoose == &quot;fz&quot;):
        fizz+=1
    elif(winLoose == &quot;bz&quot;):
        buzz+=1
    elif(winLoose == &quot;fzbz&quot;):
        fizzbuzz+=1
    ch=input(&quot;Do you want to continue playing the game : (y/n)&quot;)
    if(ch=='n'):
        print('Congratulations, your score is\n FizzBuzz:%d\nFizz:%d\nBuzz:%d' %
(fizzbuzz,fizz,buzz))
    
'''Sample Output:

 _____  ____  _____  _____  ____   __ __  _____  _____       ____   ____  ___ ___    ___ 
|     ||    ||     ||     ||    \ |  |  ||     ||     |     /    | /    ||   |   |  /  _]
|   __| |  | |__/  ||__/  ||  o  )|  |  ||__/  ||__/  |    |   __||  o  || _   _ | /  [_ 
|  |_   |  | |   __||   __||     ||  |  ||   __||   __|    |  |  ||     ||  \_/  ||    _]
|   _]  |  | |  /  ||  /  ||  O  ||  :  ||  /  ||  /  |    |  |_ ||  _  ||   |   ||   [_ 
|  |    |  | |     ||     ||     ||     ||     ||     |    |     ||  |  ||   |   ||     |
|__|   |____||_____||_____||_____| \__,_||_____||_____|    |___,_||__|__||___|___||_____|
                                                                                         

Enter a Number : 666
666 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 777
777 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 555
555 FizzBuzz
Do you want to continue playing the game : (y/n)y
Enter a Number : 1
1
Do you want to continue playing the game : (y/n)y
Enter a Number : 789
789 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 25
25 Buzz
Do you want to continue playing the game : (y/n)n
Congratulations, your score is

FizzBuzz:1
Fizz:3
Buzz:1

&lt;/pre&gt;

=Crowd Computing: Just Estimate=
==Wisdom of Crowds==
The concept of ’Wisdom of Crowds’ was proposed by Francis Galton. A weight-judging competition was carried on at the annual show of the West of England Fat Stock and Poultry Exhibition recently held at Plymouth, A fat ox having been selected, competitors bought stamped and numbered cards, each, on which to inscribe their respective names, addresses, and estimates of what the ox would weigh after it had been slaughtered. Those who guessed most successfully received prizes. About 8oo tickets were issued to the par- ticipants. The middlemost estimate of all the estimates recorded was 1207 lbs and the actual weight of the ox was 1198 lbs.

==Our Experiment==
The crowd had to guess the number of candies/gems in a jar. Around 75 people participated in the experiment. The actual number of gems in the jar were 375. The median of all estimates came out to be 300 and the mean of all the estimates came out to be around 396. Median underestimated and mean overestimated the actual value. So according to recent studies, Trimmed mean must be used as an aggregate measure to estimate where Wisdom of Crowds is involved.
[[File:Gemsjar.jpg|center|200px|caption]]

===Trimmed Mean===
In these kinds of experiments, 10% trimmed mean is usually followed. For calculating 10% trimmed mean, remove 10% smallest and 10% largest values from the sample. Calculate the mean of the sample obtained. In the above experiment, the trimmed mean came out to be around 351 which is very close to the actual value.

==Implementation==
Here, we try to demonstrate the concept of trimmed mean through crowd computing.
 Input a list of estimates done by the crowd .
 Sort the list.
 Remove the 10% smallest values.
 Remove the 10% largest values.
 Calculate the mean of the new list obtained .&lt;hr&gt;

==Data of Experiment==       
    Estimates =[1000,1010,1786,2000,1500,1500,100,120,150,150,150,170,175,180,197,200,200,200,200,200,200,220,220,220,220,234,250,250,250,250,250,250,250,250,250,263,270,275,275,286,300,
                300,300,300,300,300,300,300,320,350,350,350,400, 400,400,400,400,450,467,500,500,500,500,500,500,500,550,550,600,600,600,650,700,700,720]

    '''CODE:'''
&lt;pre&gt;
Estimates = [1000,1010,1786,2000,1500,1500,100,120,150,150,150,170,175,180,197,200,200,200,200,200,200,220,220,220,220,234,250,250,250,250,250,250,250,250,250,263,270,275,275,286,300,                300,300,300,300,300,300,300,320,350,350,350,400,400,400,400,400,450,467,500,500,500,500,500,500,500,550,550,600,600,600,650,700,700,720]
Estimates.sort()
offset = int(0.10*len(Estimates))
for i in range(offset):
       del Estimates[0]
       del Estimates[-1]
Sum = 0    
for i in range(len(Estimates)):
       Sum += Estimates[i]
Mean_Value = Sum/len(Estimates)
print(&quot;Mean : &quot;, int(Mean_Value))
#Output:
Mean :  351
&lt;/pre&gt;
&lt;hr&gt;
==Trimmed Mean for the above example== 
&lt;h3&gt;Using scipy library&lt;/h3&gt;
&lt;pre&gt;
#import scipy to use the method of trim_mean
from scipy import stats
trimMean = stats.trim_mean(Estimates, 0.1) # Trim 10% at both ends
print(&quot;Trimmed Mean : &quot;,trimMean)
#Output:
Trimmed Mean :  335.1020408163265
&lt;/pre&gt;

&lt;h3&gt;Without using scipy library&lt;/h3&gt;
&lt;pre&gt;
#Trimmed mean with 10%
p=10/100
#sorted data
data=[2, 4, 6, 7, 11, 21, 81, 90, 105, 121]
n = len(data)
#Remove elements from both end
rem=int(n*p)
newData = data[rem:-rem]
mean = 0
for i in newData:
    mean += i
mean = int(mean/len(newData))
print(&quot;Trimmed mean : &quot;,mean)
#Output: Trimmed mean :  40
&lt;/pre&gt;
[[#Top]]

=Jumbled_Words Permutations: Jumbled Words=
==What are Permutations ?==
A permutation also called ordering of selected number of elements from a list denoted by nPr here we are choosing all elements of a list and so n=r&lt;br&gt;
nPr=n!/(n-r)!&lt;br&gt; as n=r
nPn=n!&lt;br&gt; which gives all possible arrangement of elements present in a list.

 For example, permutations of list [1,2,3] are [1,2,3], [1,3,2], [2,1,3], [2,3,1], 
[3,1,2], and [3,2,1]. 
The number of permutations of a list of elements nPn is given by n!. For example, there are 2! = 2 x 1 = 2 permutations of [1,2], namely [1,2] and [2,1], and 3! = 3 x 2 x 1 = 6 permutations of [1,2,3], as mentioned above.&lt;br/&gt;
[[File:Permutations.jpg]]

==Implementation==
Here, we try to demonstrate the concept of permutations through jumbled words. It is a two player game in which one person presents the other person a different permutation of the word in his mind. The other person has to guess the right word. If he guesses, the he wins otherwise he loses.
 Input an list of words.
 Randomly pick a word from the list of words .
 Shuffle this word and present it to the other player.
 if word guesses by the player is same as the one picked from list of w
     player wins
 else
     player loses

ALTERNATE CODE TO GENERATE THIS GAME:
&lt;pre&gt;
import random
p1=input(&quot;enter player 1 name:&quot;)
p2=input(&quot;enter player 2 name:&quot;)
l=[&quot;rainbow&quot;,&quot;computer&quot;,&quot;robot&quot;,&quot;butter&quot;,&quot;vegetable&quot;,&quot;science&quot;,&quot;correct&quot;]
c1=c2=a1=a2=f1=f2=0
k=1
i=3
def play():
    n=random.choice(l)        ##n=chooses a word from list l
    l1=[]
    for j in n:
       l1.append(j)      ##creates a list for word in n
    for t in range(len(l1)):
       p=random.choice(l1)     ##this randomly displays letters in the list
       print(p)
       l1.remove(p)          ##to avoid the repetition of a letter
    s=input(&quot;enter the word:&quot;)
    if(s==n):
        print(&quot;correct&quot;)
        return 1
    else:
        print(&quot;not correct&quot;)
        print(&quot;answer is&quot;,n)
        return 0
def stat():
     print(&quot;player 1:&quot;)
     print(&quot;score:&quot;,c1)
     print(&quot;answered:&quot;,a1)
     print(&quot;failed:&quot;,f1)
     print(&quot;.............&quot;)
     print(&quot;player 2:&quot;)
     print(&quot;score:&quot;,c2)
     print(&quot;answered:&quot;,a2)
     print(&quot;failed&quot;,f2)
     if(c1&gt;c2):
         print(p1,&quot; won over &quot;,p2)
     elif(c1==c2):
         print(&quot;draw game&quot;)
     else:
         print(p2,&quot; won over &quot;,p1) 
while(i!=4):
      if(i==3):
         if(k==1):
             print(&quot;player 1 turn&quot;)
             print(&quot;your jumbled word is:&quot;)
             k=k+1
             m=play()
             if(m==1):      ##if guessed answer is correct,then score and no.of answered count will be increased
                c1+=1
                a1+=1
             else:
                f1+=1       ##else count of no.of failed to answered will be incremented
         else:
             print(&quot;player 2 turn&quot;)
             print(&quot;your jumbled word is:&quot;)
             k=k-1
             m=play()
             if(m==1):
                c2=c2+1
                a2=a2+1
             else:
                f2=f2+1
       if(i==2):
             print(&quot;present status&quot;)
             stat()
       i=int(input(&quot;enter your choice  1.stop 2.status 3.continue&quot;))
       if(i==1):
             stat()
             i=i+3
&lt;/pre&gt;
&lt;hr&gt;
=== JumbledWord Simple Logic, In Short ===
[[File:jumbledWord.gif]]
&lt;hr&gt;
'''Logic to create a Jumbled Word'''
&lt;hr&gt;
&lt;pre&gt;
#Get Jumbled Word and print it Horizontally
import random

def getJumbledWord(b):
    jumble=''
    l1 = [ b[i] for i in range(0, len(b)) ]
    for t in range(len(l1)):
       p=random.choice(l1)     ##this randomly gets letters from the list      
       jumble=jumble+p       
       l1.remove(p)
    return jumble

b=input(&quot;Enter a word to make it jumbled : &quot;)
print(&quot;Jumbled Word : &quot;, getJumbledWord(b))
&lt;/pre&gt;
&lt;hr&gt;
'''Another Logic to create a Jumbled Word'''
&lt;hr&gt;
&lt;pre&gt;
b=input(&quot;Enter a word to make it jumbled : &quot;)

def getJumbledWord1(b):
    l1 = [ b[i] for i in range(0, len(b)) ]
    random.shuffle(l1)
    str1 = ''.join(l1)
    return str1

print(&quot;Jumbled Word : &quot;, getJumbledWord1(b))
&lt;/pre&gt;

====Sample Output:====
&lt;pre&gt;
---- Output1 
Enter a word to make it jumbled : butter
Jumbled Word :  tbture

---- Output2 
Enter a word to make it jumbled : petriotism
Jumbled Word :  pittrosime
&lt;/pre&gt;

*[http://sccilabs.org/jocwiki/index.php/Theory_of_Evolution Theory of Evolution]</text>
      <sha1>c074m6uz8vvdeyp4dgr6wkyuuv395p0</sha1>
    </revision>
    <revision>
      <id>3361</id>
      <parentid>3360</parentid>
      <timestamp>2018-09-26T06:13:38Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* Jumbled_Words Permutations: Jumbled Words */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="26797">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_3 Contributors of this page]
*Week 3 Playlist: https://www.youtube.com/playlist?list=PLc_j0TNIaWxOVx_z9jAM2UB3RqYNXaoEo
=List=
List is a flexible data structure used for storing a group of data separated by comma. The elements in a list need not be of the same data type.

'''Example:'''
       List_1 = [ 1, 2,3] or 
       List_1 = [&quot;coffee&quot;, &quot;Tea&quot;, &quot;Milk&quot;] or
       List_1 = [1,&quot;coffee&quot;, &quot;Tea&quot;, 3, &quot;5&quot;]

==List Creation==
a) A list can be created by simply putting values (separated by comma) between square brackets as given below,
       List_1 = [1,&quot;coffee&quot;, &quot;Tea&quot;, 3, &quot;5&quot;] #this creates a list by name List_1 containing following items


Or,
(b)A List can be created from scratch and elements can be added 
        List_2 = [ ]
        List_2.append(&quot;Kala&quot;)
        List_2.append(&quot;Mala&quot;)
Here we use &quot;append&quot; ,which is a function in python that enable us to append or attach an element to a list .
Thus List_2 will now hold [&quot;Kala&quot;,&quot;Mala&quot;]

==Operations and Methods to work with List==
&lt;pre&gt;
a = [25,30,50,90,12,13]
b = [100,300,500,200,250]
&lt;/pre&gt;
&lt;hr&gt;
&lt;table border=2&gt;
  &lt;tr&gt;
    &lt;th&gt;&lt;b&gt;Method/&lt;br&gt;Operator&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Function&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Syntax&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Output&lt;/b&gt;&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;len()&lt;/td&gt;
    &lt;td&gt;Find length of a list&lt;/td&gt;
    &lt;td&gt;len(a)&lt;/td&gt;
    &lt;td&gt;6&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;max()&lt;/td&gt;
    &lt;td&gt;Find maximum element from the list&lt;/td&gt;
    &lt;td&gt;max(a)&lt;/td&gt;
    &lt;td&gt;90&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;min()&lt;/td&gt;
    &lt;td&gt;Find minimum element from the list&lt;/td&gt;
    &lt;td&gt;min(a)&lt;/td&gt;
    &lt;td&gt;12&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sum()&lt;/td&gt;
    &lt;td&gt;Returns sum of all elements of the list&lt;/td&gt;
    &lt;td&gt;sum(a)&lt;/td&gt;
    &lt;td&gt;220&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;reverse()&lt;/td&gt;
    &lt;td&gt;Reverses the original list&lt;/td&gt;
    &lt;td&gt;a.reverse()&lt;/td&gt;
    &lt;td&gt;[13, 12, 90, 50, 30, 25]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sort()&lt;/td&gt;
    &lt;td&gt;Sorts the original list in ascending order&lt;/td&gt;
    &lt;td&gt;a.sort()&lt;/td&gt;
    &lt;td&gt;[12, 13, 25, 30, 50, 90]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sorted()&lt;/td&gt;
    &lt;td&gt;Returns the new sorted list &lt;/td&gt;
    &lt;td&gt;sorted(a)&lt;/td&gt;
    &lt;td&gt;[12, 13, 25, 30, 50, 90]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;insert()&lt;/td&gt;
    &lt;td&gt;Insert at a particular index in the list, and shifts remaining elements&lt;/td&gt;
    &lt;td&gt;a.insert(3,3)&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 3, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;append()&lt;/td&gt;
    &lt;td&gt;Adds elements/object to the end of the list&lt;/td&gt;
    &lt;td&gt;a.append(5)&lt;br&gt;a.append([10,20])&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 5]&lt;br&gt;[25, 30, 50, 90, 12, 13, [10, 20]]&lt;br&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;extend()&lt;/td&gt;
    &lt;td&gt;Adds object to the end of the list as elements not as object&lt;/td&gt;
    &lt;td&gt;a.extend([10,20])&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 10, 20]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;*&amp;nbsp;&amp;nbsp;Repeatation&lt;br&gt;operator&lt;/td&gt;
    &lt;td&gt;Repeat the list for n times and returns a new list&lt;/td&gt;
    &lt;td&gt;a*2&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 25, 30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;+ Concatenation&lt;br&gt;operator&lt;/td&gt;
    &lt;td&gt;Concatenates two lists, and returns a new list&lt;/td&gt;
    &lt;td&gt;a+b&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 100, 300, 500, 200, 250]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;index()&lt;/td&gt;
    &lt;td&gt;Finds index of a particular element in the list or not&lt;/td&gt;
    &lt;td&gt;a.index(25)&lt;br&gt;a.index(0)&lt;br&gt;&lt;/td&gt;
    &lt;td&gt;0&lt;br&gt;&lt;br&gt;ValueError: 0 is not in list&lt;br&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;in operator&lt;/td&gt;
    &lt;td&gt;Finds whether a particular element is in the list or not, returns boolean&lt;/td&gt;
    &lt;td&gt;25 in a&lt;/td&gt;
    &lt;td&gt;True&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;not in operator&lt;/td&gt;
    &lt;td&gt;Checks if element is not available in list, returns boolean&lt;/td&gt;
    &lt;td&gt;25 not in a&lt;/td&gt;
    &lt;td&gt;False&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;count()&lt;/td&gt;
    &lt;td&gt;Counts the number of occurence of an element in the list&lt;/td&gt;
    &lt;td&gt;a.count(25)&lt;/td&gt;
    &lt;td&gt;1&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;remove()&lt;/td&gt;
    &lt;td&gt;Removes an element from the list&lt;/td&gt;
    &lt;td&gt;a.remove(25)&lt;/td&gt;
    &lt;td&gt; [30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;pop()&lt;/td&gt;
    &lt;td&gt;Delete and return item at index 0&lt;/td&gt;
    &lt;td&gt;a.pop(0)&lt;/td&gt;
    &lt;td&gt;25 , a will be [30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;del&lt;/td&gt;
    &lt;td&gt;Deletes item at a particular index from the list&lt;/td&gt;
    &lt;td&gt;del a[0]&lt;/td&gt;
    &lt;td&gt;[30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;

==Printing the List==
=== Print whole list ===
A list can be printed simply or using a ''for / while'' loop 

 print(List_2)     # To print the entire list
This code will print      
 ['Kala','Mala']     

===Print element at a particular index===
&lt;pre&gt;
Using index position
    List_2[0]     # prints 'Kala' ,i.e,the value at index position 0.
    List_2[1]     # prints 'Mala'.
&lt;/pre&gt;
=== Without using index position ===
&lt;pre&gt;
for item in List_2:   # here item is a variable used to access elements in list.
       print(item)
   This code snippet prints 
    Kala
    Mala
&lt;/pre&gt;

==Search for a particular element in list==
Elements in a list can be searched by one of the two ways:
=== using index() function===
&lt;pre&gt;
ages1 = [11,23,12,23,45]

#if element is available in the list, index() returns the index value on which, the element is present.
print(ages1.index(45))#Output: 4

#if element is not available in the list, index() returns ''ValueError''
print(ages1.index(0))#Output: ValueError:
&lt;/pre&gt;

In programming, if such error occurs, program gets terminated. It can be solved using exception handling.
e.g.
&lt;pre&gt;
ages1 = [11,23,12,23,45]

try:
    print(ages1.index(0))
except ValueError:
    print(&quot;Exception has occured&quot;)    
    print(&quot;Element is not found in the list&quot;)

&lt;/pre&gt;
&lt;pre&gt;
'''Output: 
Exception has occured
Element is not found in the list
'''&lt;/pre&gt;

=== using 'in' operator===
''in'' operator is used to check whether a particular element is available in the list or not.e.g.

&lt;pre&gt;
ages1 = [11,23,12,23,45]
no=11

if no in ages1:
    print(&quot;no is there in the list&quot;)
else:    
    print(&quot;no is NOT there in the list&quot;)
&lt;/pre&gt;
&lt;pre&gt;
#Output: no is there in the list
&lt;/pre&gt;

'''Number is not there in the list'''
&lt;pre&gt;
ages1 = [11,23,12,23,45]
no=15

if no in ages1:
    print(&quot;no is there in the list&quot;)
else:    
    print(&quot;no is NOT there in the list&quot;)
&lt;/pre&gt;
&lt;pre&gt;
Output: no is NOT there in the list
&lt;/pre&gt;


==Updating the List==
The lists can be updated using ''append'' or ''insert'' function.  Append adds the element to the end of the list and Insert adds the element in the specified position.
   List_2.append(&quot;Sheela&quot;)    # add the element 'Sheela' to the end of the list.
   print (List_2) will output 
   ['Kala', 'Mala', 'Sheela']
   
   List_2.insert(1,&quot;Bala&quot;)    # add the element &quot;Bala&quot; in the list at the index 1.
   print (List_2) will output 
   ['Kala', 'Bala','Mala', 'Sheela']

=== Extend the list by adding elements of other list at end using extend()===
&lt;pre&gt;
ages = [11,23,12,23,45]
ages.extend([57,58])
print(ages)
&lt;/pre&gt;

&lt;pre&gt;
#Output: [11, 23, 12, 23, 45, 57, 58]
&lt;/pre&gt;

==== Difference between ''append and extend'' ====
Difference between append and extend can be easily understood, by the following example.

&lt;pre&gt;
appendlist = [11,23,12,23,45]
appendlist.append([57,58])

extendlist= [11,23,12,23,45]
extendlist.extend([57,58])
&lt;/pre&gt;

&lt;pre&gt;
'''Output:
[11, 23, 12, 23, 45, [57, 58]]
[11, 23, 12, 23, 45, 57, 58]'''
&lt;/pre&gt;

==Basic Operations on List==
===Frequency of Occurrence===
list.count(object) will return the number of times the object occur in the list.
  '''Example'''
    ages = [11,23,12,23,45,43,22,24,23]
    ages.count(23) will return
    3
    ages.count(100) will return
    0

===Length of the List===
len(list) will return the length of the list ie. the number of objects in the list.
  '''Example'''
    ages = [11,23,12,23,45,43,22,24,23]
    len(ages) will output
    9
To print the objects in the list either use ''for item in list'' or ''for index in range(len(list))''
    for item in ages:       
        print (item)  
        (OR)
    for index in range(len(ages)) :
        print (ages[index])
===Sort the List===
list.sort() will sort the list in ascending order
  '''Example'''
    ages = [11,23,12,23,45,43,22,24,23]
    ages.sort() 
    print (ages) 
    [11, 12, 22, 23, 23, 23, 24, 43, 45]
===Sort the List using sorted() function===
sorted(list1) will sort the list and return a new list, it doesn't modify the original list
&lt;br&gt;'''Example: Sort in ascending order'''
&lt;pre&gt;
ages = [11,23,12,23,45,43,22,24,23]
newList=sorted(ages)
print(newList)

#Output: [11, 12, 22, 23, 23, 23, 24, 43, 45]
&lt;/pre&gt;

&lt;br&gt;'''Example: Sort in descending order'''
&lt;pre&gt;
ages = [11,23,12,23,45,43,22,24,23]
newList=sorted(ages,reverse=True)
print(newList)

#Output: [45, 43, 24, 23, 23, 23, 22, 12, 11]
&lt;/pre&gt;

===Reverse the List===
list.reverse() will reverse the original list
  '''Example'''
    ages = [11, 12, 22, 23, 23, 23, 24, 43, 45]
    ages.reverse()
    print (ages)
    [45, 43, 24, 23, 23, 23, 22, 12, 11]

Both sort() and reverse() list operation will work on numeric and alphanumeric data list.

A special use of the reverse() function is to descend a list that is sorted in ascending order.

  '''Example'''
&lt;pre&gt;
ages = [11, 12, 22, 23, 23, 23, 24, 43, 45]
ages.sort()
print(ages)
ages.reverse()
print(ages)
&lt;/pre&gt;

===Slicing===
Used to retrieve an object or objects in a range as a list  
  '''Example'''
Use ''list[index]'' to retrieve the object at the given index
         In [1]: student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
         In [2]: student[3]     #Object at index 3.  Remember index starts at 0
         Out[2]: 'Geetha'      


Use ''list[start_index : end_index + 1]'' to retrieve objects from the start_index to end_index 
         In [3]: student[2:4]     # Objects from index 2 to 3 as List. Note the [ and ]
         Out[3]: ['Vijay', 'Geetha']   


Use ''list[:]'' to retrieve objects from the starting of the list to the end of the list. 
The default start value will be the starting index of the list (i.e. 0) and the default end value
will be the length of the list 
         In [4]: student[:]        # prints the entire list
         Out[4]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma', 'Janani']


         In [5]: student[:5]       # prints the objects from the start of the list upto object at index 4
         Out[5]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran']


         In [6]: student[2:]       # prints the objects from index 2 upto the end of the list
         Out[6]: ['Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma', 'Janani']


Negative index too is available in Python. It starts from last element of the list. i.e.

         In [7]:student[-1]        #prints last index of list
         Out[7]: 'Janani'


         In [8]:student[-1:-8]     #prints empty list
         Out[8]: []


         In [9]:student[-8:-1]     #prints -8th index to -1st index elements
         Out[9]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma']

===Removing Item from list ===
----

Is used to remove a specific item from the list.

'''Example:'''
 
Use list.remove(entry/value)  Or   del list[index]    Or list.pop(index)
         student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
         student.remove(&quot;Arun&quot;)   #This will delete item &quot;Arun&quot;
         Or    
         del student[0]           # This will delete item at index 0
         Or
         student.pop(0)         # This will delete and return item at index 0


         print(student)    
         Output: [&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]

===Delete list ===
----
Used to delete complete list

'''Example'''

Use del &lt;list name&gt;
         student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
         del student

===Concatenation of two lists===
----
''+'' is the concatenation operator which is used concatenate two lists. 
&lt;pre&gt;
ages1 = [11,23,12,23,45]
ages2 = [25, 24, 43, 47]
age=ages1+ages2
print(age)
#Output: [11, 23, 12, 23, 45, 25, 24, 43, 47]
&lt;/pre&gt;

===Repeatation of a list ===
----
''*'' is the operator to repeat a particular list.
&lt;pre&gt;
ages1 = [11,23,12,23,45]
age=ages1*5 #ages1 list is repeated 5 times and stroed in ''age'' list
print(age)

#Output: [11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45]
&lt;/pre&gt;
====Conditional Statements====
    Conditionals are used to check the condition and change the flow of the program 
accordingly. They are realized in programming languages through if statement. The 
syntax is as follows :
         if condition : 
            statement
    '''Note:''' Do not forget indentation (inserting space/tab) in the line after the
 if condition.
    
    In case you want to execute a set of statements when a condition is true and another

set of statement when the condition is false.
         if condition : 
            statement 1
         else :
            statement 2
    
    Multiple if-else statements can be written as follows:
         if condition_1 : 
            statement 1
         elif condition_2 : # 'elif' is short for 'else if'
            statement 2
         elif condition_3 :
            statement 3
        .
        .
         else :
            final statement

=Loops and Conditionals : Fizzbuzz=
====Loops====

    Loops are used to execute a set of repetitive statements. They are realized
 through 'while' and 'for' loops in programming languages. The syntax of 'for' loop is 
as follows :
        for LOOPVARIABLE in SEQUENCE: 
            STATEMENTS
    '''e.g.''' to print all the data from a list we can write:
        for item in list_name
            print(item)
    OR
        for index in range(len(list_name))
            print(list_name[index])
    
    The syntax for while loop is as follows :
    
        while BOOLEANEXPRESSION: 
            STATEMENTS
            INCREMENT/DECREMENT
    
    '''e.g.''' if we want to print all numbers from 1 to 10
        i=1
        while i&lt;=10 :
            print(i,&quot; &quot;)
            i=i+1
    
    'while' loop has indefinite iteration (run-time unknown). So, there must be loop
 break statement in it.
 Whereas 'for' loop is definite in nature (i.e. known or predictable span).&lt;br&gt;

&lt;b&gt;NOTE: Python doesn't have anything like do-while loop.&lt;/b&gt;

==Implementation==
Here, we try to demonstrate the concept of loops and conditionals through a game called Fizzbuzz. The rules are as follows :&lt;br/&gt;
[[File:fizzBuzz.gif]]

• if input number is a multiple of ’3’ print ”Fizz”
&lt;br/&gt;
• if input number is a multiple of ’5’ print ”Buzz”
&lt;br/&gt;
• if input number is a multiple of both '3' and ’5’ print ”FizzBuzz”
&lt;br/&gt;
The pseudo code is as follows :
&lt;pre&gt;
   If input no % 3 == 0 and  input no % 5 == 0 : 
       print ”Fizzbuzz”
   else if input no % 3 == 0 : 
       print ”Fizz”
   else if input no % 5 == 0 : 
       print ”Buzz”
   else :
       print the input no
&lt;/pre&gt;
The order of statements execution matters to get the desired output. The highest priority condition should be first followed by other. In fizzbuzz programming, first checking should be done for both divisibility of 3 and 5. If condition not satisfied only then it should check individually for 3 or 5. So carefully choosing the order is crucial for better programming.
Note: There is some effect of present condition statements chosen on next conditions statements. That is why in first attempt fizzbuzz programming got struck.

Example: 
&lt;pre&gt;
#Code to achieve the above requirement in python3.
i = int(input(&quot;Enter the number&quot;)) 
if i%3 == 0 and i%5 == 0: print(i,&quot;FizzBuzz&quot;)  
elif i%5 == 0: print(i,&quot;Buzz&quot;)
elif i%3 == 0: print(i,&quot;Fizz&quot;)
else: print(i)
&lt;/pre&gt;
Lets put the same into a loop for a range given by the user.
&lt;pre&gt;
def fizzbuzzgame(start,stop):
    for i in range(start,stop+1):
        if i%3 == 0 and i%5 == 0:
            print(i,&quot;FizzBuzz&quot;)
        elif i%5 == 0:
            print(i,&quot;Buzz&quot;)
        elif i%3 == 0:
            print(i,&quot;Fizz&quot;)
        else: print(i)

fizzbuzzgame(50,100)
&lt;/pre&gt;


=== Fizz Buzz game in Interactive mode with Score ===
'''By Ms. Ami Tusharkant Choksi'''
&lt;pre&gt;
def fizzbuzzgame(i):
        if i%3 == 0 and i%5 == 0:
            print(i,&quot;FizzBuzz&quot;)
            return(&quot;fzbz&quot;)
        elif i%5 == 0:
            print(i,&quot;Buzz&quot;)
            return(&quot;bz&quot;)
        elif i%3 == 0:
            print(i,&quot;Fizz&quot;)
            return(&quot;fz&quot;)
        else:
            print(i)
            return(&quot;no&quot;)

ch = 'y'
fizzbuzz=0
fizz=0
buzz=0
nothing=0
print(&quot;&quot;&quot;
 _____  ____  _____  _____  ____   __ __  _____  _____       ____   ____  ___ ___    ___ 
|     ||    ||     ||     ||    \ |  |  ||     ||     |     /    | /    ||   |   |  /  _]
|   __| |  | |__/  ||__/  ||  o  )|  |  ||__/  ||__/  |    |   __||  o  || _   _ | /  [_ 
|  |_   |  | |   __||   __||     ||  |  ||   __||   __|    |  |  ||     ||  \_/  ||    _]
|   _]  |  | |  /  ||  /  ||  O  ||  :  ||  /  ||  /  |    |  |_ ||  _  ||   |   ||   [_ 
|  |    |  | |     ||     ||     ||     ||     ||     |    |     ||  |  ||   |   ||     |
|__|   |____||_____||_____||_____| \__,_||_____||_____|    |___,_||__|__||___|___||_____|
                                                                                         
&quot;&quot;&quot;)   

while(ch == 'y'):
    n=int(input(&quot;Enter a Number : &quot;))
    winLoose=fizzbuzzgame(n)
    if(winLoose == &quot;fz&quot;):
        fizz+=1
    elif(winLoose == &quot;bz&quot;):
        buzz+=1
    elif(winLoose == &quot;fzbz&quot;):
        fizzbuzz+=1
    ch=input(&quot;Do you want to continue playing the game : (y/n)&quot;)
    if(ch=='n'):
        print('Congratulations, your score is\n FizzBuzz:%d\nFizz:%d\nBuzz:%d' %
(fizzbuzz,fizz,buzz))
    
'''Sample Output:

 _____  ____  _____  _____  ____   __ __  _____  _____       ____   ____  ___ ___    ___ 
|     ||    ||     ||     ||    \ |  |  ||     ||     |     /    | /    ||   |   |  /  _]
|   __| |  | |__/  ||__/  ||  o  )|  |  ||__/  ||__/  |    |   __||  o  || _   _ | /  [_ 
|  |_   |  | |   __||   __||     ||  |  ||   __||   __|    |  |  ||     ||  \_/  ||    _]
|   _]  |  | |  /  ||  /  ||  O  ||  :  ||  /  ||  /  |    |  |_ ||  _  ||   |   ||   [_ 
|  |    |  | |     ||     ||     ||     ||     ||     |    |     ||  |  ||   |   ||     |
|__|   |____||_____||_____||_____| \__,_||_____||_____|    |___,_||__|__||___|___||_____|
                                                                                         

Enter a Number : 666
666 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 777
777 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 555
555 FizzBuzz
Do you want to continue playing the game : (y/n)y
Enter a Number : 1
1
Do you want to continue playing the game : (y/n)y
Enter a Number : 789
789 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 25
25 Buzz
Do you want to continue playing the game : (y/n)n
Congratulations, your score is

FizzBuzz:1
Fizz:3
Buzz:1

&lt;/pre&gt;

=Crowd Computing: Just Estimate=
==Wisdom of Crowds==
The concept of ’Wisdom of Crowds’ was proposed by Francis Galton. A weight-judging competition was carried on at the annual show of the West of England Fat Stock and Poultry Exhibition recently held at Plymouth, A fat ox having been selected, competitors bought stamped and numbered cards, each, on which to inscribe their respective names, addresses, and estimates of what the ox would weigh after it had been slaughtered. Those who guessed most successfully received prizes. About 8oo tickets were issued to the par- ticipants. The middlemost estimate of all the estimates recorded was 1207 lbs and the actual weight of the ox was 1198 lbs.

==Our Experiment==
The crowd had to guess the number of candies/gems in a jar. Around 75 people participated in the experiment. The actual number of gems in the jar were 375. The median of all estimates came out to be 300 and the mean of all the estimates came out to be around 396. Median underestimated and mean overestimated the actual value. So according to recent studies, Trimmed mean must be used as an aggregate measure to estimate where Wisdom of Crowds is involved.
[[File:Gemsjar.jpg|center|200px|caption]]

===Trimmed Mean===
In these kinds of experiments, 10% trimmed mean is usually followed. For calculating 10% trimmed mean, remove 10% smallest and 10% largest values from the sample. Calculate the mean of the sample obtained. In the above experiment, the trimmed mean came out to be around 351 which is very close to the actual value.

==Implementation==
Here, we try to demonstrate the concept of trimmed mean through crowd computing.
 Input a list of estimates done by the crowd .
 Sort the list.
 Remove the 10% smallest values.
 Remove the 10% largest values.
 Calculate the mean of the new list obtained .&lt;hr&gt;

==Data of Experiment==       
    Estimates =[1000,1010,1786,2000,1500,1500,100,120,150,150,150,170,175,180,197,200,200,200,200,200,200,220,220,220,220,234,250,250,250,250,250,250,250,250,250,263,270,275,275,286,300,
                300,300,300,300,300,300,300,320,350,350,350,400, 400,400,400,400,450,467,500,500,500,500,500,500,500,550,550,600,600,600,650,700,700,720]

    '''CODE:'''
&lt;pre&gt;
Estimates = [1000,1010,1786,2000,1500,1500,100,120,150,150,150,170,175,180,197,200,200,200,200,200,200,220,220,220,220,234,250,250,250,250,250,250,250,250,250,263,270,275,275,286,300,                300,300,300,300,300,300,300,320,350,350,350,400,400,400,400,400,450,467,500,500,500,500,500,500,500,550,550,600,600,600,650,700,700,720]
Estimates.sort()
offset = int(0.10*len(Estimates))
for i in range(offset):
       del Estimates[0]
       del Estimates[-1]
Sum = 0    
for i in range(len(Estimates)):
       Sum += Estimates[i]
Mean_Value = Sum/len(Estimates)
print(&quot;Mean : &quot;, int(Mean_Value))
#Output:
Mean :  351
&lt;/pre&gt;
&lt;hr&gt;
==Trimmed Mean for the above example== 
&lt;h3&gt;Using scipy library&lt;/h3&gt;
&lt;pre&gt;
#import scipy to use the method of trim_mean
from scipy import stats
trimMean = stats.trim_mean(Estimates, 0.1) # Trim 10% at both ends
print(&quot;Trimmed Mean : &quot;,trimMean)
#Output:
Trimmed Mean :  335.1020408163265
&lt;/pre&gt;

&lt;h3&gt;Without using scipy library&lt;/h3&gt;
&lt;pre&gt;
#Trimmed mean with 10%
p=10/100
#sorted data
data=[2, 4, 6, 7, 11, 21, 81, 90, 105, 121]
n = len(data)
#Remove elements from both end
rem=int(n*p)
newData = data[rem:-rem]
mean = 0
for i in newData:
    mean += i
mean = int(mean/len(newData))
print(&quot;Trimmed mean : &quot;,mean)
#Output: Trimmed mean :  40
&lt;/pre&gt;
[[#Top]]

=Jumbled_Words Permutations: Jumbled Words=
==What are Permutations ?==
A permutation also called ordering of selected number of elements from a list denoted by nPr here we are choosing all elements of a list and so n=r&lt;br&gt;
nPr=n!/(n-r)!&lt;br&gt; as n=r
nPn=n!&lt;br&gt; which gives all possible arrangement of elements present in a list.

 For example, permutations of list [1,2,3] are [1,2,3], [1,3,2], [2,1,3], [2,3,1], 
[3,1,2], and [3,2,1]. 
The number of permutations of a list of elements nPn is given by n!. For example, there are 2! = 2 x 1 = 2 permutations of [1,2], namely [1,2] and [2,1], and 3! = 3 x 2 x 1 = 6 permutations of [1,2,3], as mentioned above.&lt;br/&gt;
[[File:Permutations.jpg]]

==Implementation==
Here, we try to demonstrate the concept of permutations through jumbled words. It is a two player game in which one person presents the other person a different permutation of the word in his mind. The other person has to guess the right word. If he guesses, the he wins otherwise he loses.
 Input an list of words.
 Randomly pick a word from the list of words .
 Shuffle this word and present it to the other player.
 if word guesses by the player is same as the one picked from list of w
     player wins
 else
     player loses

ALTERNATE CODE TO GENERATE THIS GAME:
&lt;pre&gt;
import random
p1=input(&quot;enter player 1 name:&quot;)
p2=input(&quot;enter player 2 name:&quot;)
l=[&quot;rainbow&quot;,&quot;computer&quot;,&quot;robot&quot;,&quot;butter&quot;,&quot;vegetable&quot;,&quot;science&quot;,&quot;correct&quot;]
c1=c2=a1=a2=f1=f2=0
k=1
i=3
def play():
    n=random.choice(l)        ##n=chooses a word from list l
    l1=[]
    for j in n:
       l1.append(j)      ##creates a list for word in n
    for t in range(len(l1)):
       p=random.choice(l1)     ##this randomly displays letters in the list
       print(p)
       l1.remove(p)          ##to avoid the repetition of a letter
    s=input(&quot;enter the word:&quot;)
    if(s==n):
        print(&quot;correct&quot;)
        return 1
    else:
        print(&quot;not correct&quot;)
        print(&quot;answer is&quot;,n)
        return 0
def stat():
     print(&quot;player 1:&quot;)
     print(&quot;score:&quot;,c1)
     print(&quot;answered:&quot;,a1)
     print(&quot;failed:&quot;,f1)
     print(&quot;.............&quot;)
     print(&quot;player 2:&quot;)
     print(&quot;score:&quot;,c2)
     print(&quot;answered:&quot;,a2)
     print(&quot;failed&quot;,f2)
     if(c1&gt;c2):
         print(p1,&quot; won over &quot;,p2)
     elif(c1==c2):
         print(&quot;draw game&quot;)
     else:
         print(p2,&quot; won over &quot;,p1) 
while(i!=4):
      if(i==3):
         if(k==1):
             print(&quot;player 1 turn&quot;)
             print(&quot;your jumbled word is:&quot;)
             k=k+1
             m=play()
             if(m==1):      ##if guessed answer is correct,then score and no.of answered count will be increased
                c1+=1
                a1+=1
             else:
                f1+=1       ##else count of no.of failed to answered will be incremented
         else:
             print(&quot;player 2 turn&quot;)
             print(&quot;your jumbled word is:&quot;)
             k=k-1
             m=play()
             if(m==1):
                c2=c2+1
                a2=a2+1
             else:
                f2=f2+1
       if(i==2):
             print(&quot;present status&quot;)
             stat()
       i=int(input(&quot;enter your choice  1.stop 2.status 3.continue&quot;))
       if(i==1):
             stat()
             i=i+3
&lt;/pre&gt;
&lt;hr&gt;
=== JumbledWord Simple Logic, In Short ===
[[File:jumbledWord.gif]]
&lt;hr&gt;
'''Logic to create a Jumbled Word'''
&lt;hr&gt;
&lt;pre&gt;
#Get Jumbled Word and print it Horizontally
import random

def getJumbledWord(b):
    jumble=''
    l1 = [ b[i] for i in range(0, len(b)) ]
    for t in range(len(l1)):
       p=random.choice(l1)     ##this randomly gets letters from the list      
       jumble=jumble+p       
       l1.remove(p)
    return jumble

b=input(&quot;Enter a word to make it jumbled : &quot;)
print(&quot;Jumbled Word : &quot;, getJumbledWord(b))
&lt;/pre&gt;
&lt;hr&gt;
'''Another Logic to create a Jumbled Word'''
&lt;hr&gt;
&lt;pre&gt;
b=input(&quot;Enter a word to make it jumbled : &quot;)

def getJumbledWord1(b):
    l1 = [ b[i] for i in range(0, len(b)) ]
    random.shuffle(l1)
    str1 = ''.join(l1)
    return str1

print(&quot;Jumbled Word : &quot;, getJumbledWord1(b))
&lt;/pre&gt;

====Sample Output:====
&lt;pre&gt;
---- Output1 
Enter a word to make it jumbled : butter
Jumbled Word :  tbture

---- Output2 
Enter a word to make it jumbled : petriotism
Jumbled Word :  pittrosime
&lt;/pre&gt;</text>
      <sha1>8re4wpq62yk4fbcolcepksvsfcu8i25</sha1>
    </revision>
    <revision>
      <id>3362</id>
      <parentid>3361</parentid>
      <timestamp>2018-09-26T06:14:08Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* Implementation */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="26881">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_3 Contributors of this page]
*Week 3 Playlist: https://www.youtube.com/playlist?list=PLc_j0TNIaWxOVx_z9jAM2UB3RqYNXaoEo
=List=
List is a flexible data structure used for storing a group of data separated by comma. The elements in a list need not be of the same data type.

'''Example:'''
       List_1 = [ 1, 2,3] or 
       List_1 = [&quot;coffee&quot;, &quot;Tea&quot;, &quot;Milk&quot;] or
       List_1 = [1,&quot;coffee&quot;, &quot;Tea&quot;, 3, &quot;5&quot;]

==List Creation==
a) A list can be created by simply putting values (separated by comma) between square brackets as given below,
       List_1 = [1,&quot;coffee&quot;, &quot;Tea&quot;, 3, &quot;5&quot;] #this creates a list by name List_1 containing following items


Or,
(b)A List can be created from scratch and elements can be added 
        List_2 = [ ]
        List_2.append(&quot;Kala&quot;)
        List_2.append(&quot;Mala&quot;)
Here we use &quot;append&quot; ,which is a function in python that enable us to append or attach an element to a list .
Thus List_2 will now hold [&quot;Kala&quot;,&quot;Mala&quot;]

==Operations and Methods to work with List==
&lt;pre&gt;
a = [25,30,50,90,12,13]
b = [100,300,500,200,250]
&lt;/pre&gt;
&lt;hr&gt;
&lt;table border=2&gt;
  &lt;tr&gt;
    &lt;th&gt;&lt;b&gt;Method/&lt;br&gt;Operator&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Function&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Syntax&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Output&lt;/b&gt;&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;len()&lt;/td&gt;
    &lt;td&gt;Find length of a list&lt;/td&gt;
    &lt;td&gt;len(a)&lt;/td&gt;
    &lt;td&gt;6&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;max()&lt;/td&gt;
    &lt;td&gt;Find maximum element from the list&lt;/td&gt;
    &lt;td&gt;max(a)&lt;/td&gt;
    &lt;td&gt;90&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;min()&lt;/td&gt;
    &lt;td&gt;Find minimum element from the list&lt;/td&gt;
    &lt;td&gt;min(a)&lt;/td&gt;
    &lt;td&gt;12&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sum()&lt;/td&gt;
    &lt;td&gt;Returns sum of all elements of the list&lt;/td&gt;
    &lt;td&gt;sum(a)&lt;/td&gt;
    &lt;td&gt;220&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;reverse()&lt;/td&gt;
    &lt;td&gt;Reverses the original list&lt;/td&gt;
    &lt;td&gt;a.reverse()&lt;/td&gt;
    &lt;td&gt;[13, 12, 90, 50, 30, 25]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sort()&lt;/td&gt;
    &lt;td&gt;Sorts the original list in ascending order&lt;/td&gt;
    &lt;td&gt;a.sort()&lt;/td&gt;
    &lt;td&gt;[12, 13, 25, 30, 50, 90]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sorted()&lt;/td&gt;
    &lt;td&gt;Returns the new sorted list &lt;/td&gt;
    &lt;td&gt;sorted(a)&lt;/td&gt;
    &lt;td&gt;[12, 13, 25, 30, 50, 90]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;insert()&lt;/td&gt;
    &lt;td&gt;Insert at a particular index in the list, and shifts remaining elements&lt;/td&gt;
    &lt;td&gt;a.insert(3,3)&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 3, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;append()&lt;/td&gt;
    &lt;td&gt;Adds elements/object to the end of the list&lt;/td&gt;
    &lt;td&gt;a.append(5)&lt;br&gt;a.append([10,20])&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 5]&lt;br&gt;[25, 30, 50, 90, 12, 13, [10, 20]]&lt;br&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;extend()&lt;/td&gt;
    &lt;td&gt;Adds object to the end of the list as elements not as object&lt;/td&gt;
    &lt;td&gt;a.extend([10,20])&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 10, 20]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;*&amp;nbsp;&amp;nbsp;Repeatation&lt;br&gt;operator&lt;/td&gt;
    &lt;td&gt;Repeat the list for n times and returns a new list&lt;/td&gt;
    &lt;td&gt;a*2&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 25, 30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;+ Concatenation&lt;br&gt;operator&lt;/td&gt;
    &lt;td&gt;Concatenates two lists, and returns a new list&lt;/td&gt;
    &lt;td&gt;a+b&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 100, 300, 500, 200, 250]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;index()&lt;/td&gt;
    &lt;td&gt;Finds index of a particular element in the list or not&lt;/td&gt;
    &lt;td&gt;a.index(25)&lt;br&gt;a.index(0)&lt;br&gt;&lt;/td&gt;
    &lt;td&gt;0&lt;br&gt;&lt;br&gt;ValueError: 0 is not in list&lt;br&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;in operator&lt;/td&gt;
    &lt;td&gt;Finds whether a particular element is in the list or not, returns boolean&lt;/td&gt;
    &lt;td&gt;25 in a&lt;/td&gt;
    &lt;td&gt;True&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;not in operator&lt;/td&gt;
    &lt;td&gt;Checks if element is not available in list, returns boolean&lt;/td&gt;
    &lt;td&gt;25 not in a&lt;/td&gt;
    &lt;td&gt;False&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;count()&lt;/td&gt;
    &lt;td&gt;Counts the number of occurence of an element in the list&lt;/td&gt;
    &lt;td&gt;a.count(25)&lt;/td&gt;
    &lt;td&gt;1&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;remove()&lt;/td&gt;
    &lt;td&gt;Removes an element from the list&lt;/td&gt;
    &lt;td&gt;a.remove(25)&lt;/td&gt;
    &lt;td&gt; [30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;pop()&lt;/td&gt;
    &lt;td&gt;Delete and return item at index 0&lt;/td&gt;
    &lt;td&gt;a.pop(0)&lt;/td&gt;
    &lt;td&gt;25 , a will be [30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;del&lt;/td&gt;
    &lt;td&gt;Deletes item at a particular index from the list&lt;/td&gt;
    &lt;td&gt;del a[0]&lt;/td&gt;
    &lt;td&gt;[30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;

==Printing the List==
=== Print whole list ===
A list can be printed simply or using a ''for / while'' loop 

 print(List_2)     # To print the entire list
This code will print      
 ['Kala','Mala']     

===Print element at a particular index===
&lt;pre&gt;
Using index position
    List_2[0]     # prints 'Kala' ,i.e,the value at index position 0.
    List_2[1]     # prints 'Mala'.
&lt;/pre&gt;
=== Without using index position ===
&lt;pre&gt;
for item in List_2:   # here item is a variable used to access elements in list.
       print(item)
   This code snippet prints 
    Kala
    Mala
&lt;/pre&gt;

==Search for a particular element in list==
Elements in a list can be searched by one of the two ways:
=== using index() function===
&lt;pre&gt;
ages1 = [11,23,12,23,45]

#if element is available in the list, index() returns the index value on which, the element is present.
print(ages1.index(45))#Output: 4

#if element is not available in the list, index() returns ''ValueError''
print(ages1.index(0))#Output: ValueError:
&lt;/pre&gt;

In programming, if such error occurs, program gets terminated. It can be solved using exception handling.
e.g.
&lt;pre&gt;
ages1 = [11,23,12,23,45]

try:
    print(ages1.index(0))
except ValueError:
    print(&quot;Exception has occured&quot;)    
    print(&quot;Element is not found in the list&quot;)

&lt;/pre&gt;
&lt;pre&gt;
'''Output: 
Exception has occured
Element is not found in the list
'''&lt;/pre&gt;

=== using 'in' operator===
''in'' operator is used to check whether a particular element is available in the list or not.e.g.

&lt;pre&gt;
ages1 = [11,23,12,23,45]
no=11

if no in ages1:
    print(&quot;no is there in the list&quot;)
else:    
    print(&quot;no is NOT there in the list&quot;)
&lt;/pre&gt;
&lt;pre&gt;
#Output: no is there in the list
&lt;/pre&gt;

'''Number is not there in the list'''
&lt;pre&gt;
ages1 = [11,23,12,23,45]
no=15

if no in ages1:
    print(&quot;no is there in the list&quot;)
else:    
    print(&quot;no is NOT there in the list&quot;)
&lt;/pre&gt;
&lt;pre&gt;
Output: no is NOT there in the list
&lt;/pre&gt;


==Updating the List==
The lists can be updated using ''append'' or ''insert'' function.  Append adds the element to the end of the list and Insert adds the element in the specified position.
   List_2.append(&quot;Sheela&quot;)    # add the element 'Sheela' to the end of the list.
   print (List_2) will output 
   ['Kala', 'Mala', 'Sheela']
   
   List_2.insert(1,&quot;Bala&quot;)    # add the element &quot;Bala&quot; in the list at the index 1.
   print (List_2) will output 
   ['Kala', 'Bala','Mala', 'Sheela']

=== Extend the list by adding elements of other list at end using extend()===
&lt;pre&gt;
ages = [11,23,12,23,45]
ages.extend([57,58])
print(ages)
&lt;/pre&gt;

&lt;pre&gt;
#Output: [11, 23, 12, 23, 45, 57, 58]
&lt;/pre&gt;

==== Difference between ''append and extend'' ====
Difference between append and extend can be easily understood, by the following example.

&lt;pre&gt;
appendlist = [11,23,12,23,45]
appendlist.append([57,58])

extendlist= [11,23,12,23,45]
extendlist.extend([57,58])
&lt;/pre&gt;

&lt;pre&gt;
'''Output:
[11, 23, 12, 23, 45, [57, 58]]
[11, 23, 12, 23, 45, 57, 58]'''
&lt;/pre&gt;

==Basic Operations on List==
===Frequency of Occurrence===
list.count(object) will return the number of times the object occur in the list.
  '''Example'''
    ages = [11,23,12,23,45,43,22,24,23]
    ages.count(23) will return
    3
    ages.count(100) will return
    0

===Length of the List===
len(list) will return the length of the list ie. the number of objects in the list.
  '''Example'''
    ages = [11,23,12,23,45,43,22,24,23]
    len(ages) will output
    9
To print the objects in the list either use ''for item in list'' or ''for index in range(len(list))''
    for item in ages:       
        print (item)  
        (OR)
    for index in range(len(ages)) :
        print (ages[index])
===Sort the List===
list.sort() will sort the list in ascending order
  '''Example'''
    ages = [11,23,12,23,45,43,22,24,23]
    ages.sort() 
    print (ages) 
    [11, 12, 22, 23, 23, 23, 24, 43, 45]
===Sort the List using sorted() function===
sorted(list1) will sort the list and return a new list, it doesn't modify the original list
&lt;br&gt;'''Example: Sort in ascending order'''
&lt;pre&gt;
ages = [11,23,12,23,45,43,22,24,23]
newList=sorted(ages)
print(newList)

#Output: [11, 12, 22, 23, 23, 23, 24, 43, 45]
&lt;/pre&gt;

&lt;br&gt;'''Example: Sort in descending order'''
&lt;pre&gt;
ages = [11,23,12,23,45,43,22,24,23]
newList=sorted(ages,reverse=True)
print(newList)

#Output: [45, 43, 24, 23, 23, 23, 22, 12, 11]
&lt;/pre&gt;

===Reverse the List===
list.reverse() will reverse the original list
  '''Example'''
    ages = [11, 12, 22, 23, 23, 23, 24, 43, 45]
    ages.reverse()
    print (ages)
    [45, 43, 24, 23, 23, 23, 22, 12, 11]

Both sort() and reverse() list operation will work on numeric and alphanumeric data list.

A special use of the reverse() function is to descend a list that is sorted in ascending order.

  '''Example'''
&lt;pre&gt;
ages = [11, 12, 22, 23, 23, 23, 24, 43, 45]
ages.sort()
print(ages)
ages.reverse()
print(ages)
&lt;/pre&gt;

===Slicing===
Used to retrieve an object or objects in a range as a list  
  '''Example'''
Use ''list[index]'' to retrieve the object at the given index
         In [1]: student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
         In [2]: student[3]     #Object at index 3.  Remember index starts at 0
         Out[2]: 'Geetha'      


Use ''list[start_index : end_index + 1]'' to retrieve objects from the start_index to end_index 
         In [3]: student[2:4]     # Objects from index 2 to 3 as List. Note the [ and ]
         Out[3]: ['Vijay', 'Geetha']   


Use ''list[:]'' to retrieve objects from the starting of the list to the end of the list. 
The default start value will be the starting index of the list (i.e. 0) and the default end value
will be the length of the list 
         In [4]: student[:]        # prints the entire list
         Out[4]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma', 'Janani']


         In [5]: student[:5]       # prints the objects from the start of the list upto object at index 4
         Out[5]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran']


         In [6]: student[2:]       # prints the objects from index 2 upto the end of the list
         Out[6]: ['Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma', 'Janani']


Negative index too is available in Python. It starts from last element of the list. i.e.

         In [7]:student[-1]        #prints last index of list
         Out[7]: 'Janani'


         In [8]:student[-1:-8]     #prints empty list
         Out[8]: []


         In [9]:student[-8:-1]     #prints -8th index to -1st index elements
         Out[9]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma']

===Removing Item from list ===
----

Is used to remove a specific item from the list.

'''Example:'''
 
Use list.remove(entry/value)  Or   del list[index]    Or list.pop(index)
         student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
         student.remove(&quot;Arun&quot;)   #This will delete item &quot;Arun&quot;
         Or    
         del student[0]           # This will delete item at index 0
         Or
         student.pop(0)         # This will delete and return item at index 0


         print(student)    
         Output: [&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]

===Delete list ===
----
Used to delete complete list

'''Example'''

Use del &lt;list name&gt;
         student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
         del student

===Concatenation of two lists===
----
''+'' is the concatenation operator which is used concatenate two lists. 
&lt;pre&gt;
ages1 = [11,23,12,23,45]
ages2 = [25, 24, 43, 47]
age=ages1+ages2
print(age)
#Output: [11, 23, 12, 23, 45, 25, 24, 43, 47]
&lt;/pre&gt;

===Repeatation of a list ===
----
''*'' is the operator to repeat a particular list.
&lt;pre&gt;
ages1 = [11,23,12,23,45]
age=ages1*5 #ages1 list is repeated 5 times and stroed in ''age'' list
print(age)

#Output: [11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45]
&lt;/pre&gt;
====Conditional Statements====
    Conditionals are used to check the condition and change the flow of the program 
accordingly. They are realized in programming languages through if statement. The 
syntax is as follows :
         if condition : 
            statement
    '''Note:''' Do not forget indentation (inserting space/tab) in the line after the
 if condition.
    
    In case you want to execute a set of statements when a condition is true and another

set of statement when the condition is false.
         if condition : 
            statement 1
         else :
            statement 2
    
    Multiple if-else statements can be written as follows:
         if condition_1 : 
            statement 1
         elif condition_2 : # 'elif' is short for 'else if'
            statement 2
         elif condition_3 :
            statement 3
        .
        .
         else :
            final statement

=Loops and Conditionals : Fizzbuzz=
====Loops====

    Loops are used to execute a set of repetitive statements. They are realized
 through 'while' and 'for' loops in programming languages. The syntax of 'for' loop is 
as follows :
        for LOOPVARIABLE in SEQUENCE: 
            STATEMENTS
    '''e.g.''' to print all the data from a list we can write:
        for item in list_name
            print(item)
    OR
        for index in range(len(list_name))
            print(list_name[index])
    
    The syntax for while loop is as follows :
    
        while BOOLEANEXPRESSION: 
            STATEMENTS
            INCREMENT/DECREMENT
    
    '''e.g.''' if we want to print all numbers from 1 to 10
        i=1
        while i&lt;=10 :
            print(i,&quot; &quot;)
            i=i+1
    
    'while' loop has indefinite iteration (run-time unknown). So, there must be loop
 break statement in it.
 Whereas 'for' loop is definite in nature (i.e. known or predictable span).&lt;br&gt;

&lt;b&gt;NOTE: Python doesn't have anything like do-while loop.&lt;/b&gt;

==Implementation==
Here, we try to demonstrate the concept of loops and conditionals through a game called Fizzbuzz. The rules are as follows :&lt;br/&gt;
[[File:fizzBuzz.gif]]

• if input number is a multiple of ’3’ print ”Fizz”
&lt;br/&gt;
• if input number is a multiple of ’5’ print ”Buzz”
&lt;br/&gt;
• if input number is a multiple of both '3' and ’5’ print ”FizzBuzz”
&lt;br/&gt;
The pseudo code is as follows :
&lt;pre&gt;
   If input no % 3 == 0 and  input no % 5 == 0 : 
       print ”Fizzbuzz”
   else if input no % 3 == 0 : 
       print ”Fizz”
   else if input no % 5 == 0 : 
       print ”Buzz”
   else :
       print the input no
&lt;/pre&gt;
The order of statements execution matters to get the desired output. The highest priority condition should be first followed by other. In fizzbuzz programming, first checking should be done for both divisibility of 3 and 5. If condition not satisfied only then it should check individually for 3 or 5. So carefully choosing the order is crucial for better programming.
Note: There is some effect of present condition statements chosen on next conditions statements. That is why in first attempt fizzbuzz programming got struck.

Example: 
&lt;pre&gt;
#Code to achieve the above requirement in python3.
i = int(input(&quot;Enter the number&quot;)) 
if i%3 == 0 and i%5 == 0: print(i,&quot;FizzBuzz&quot;)  
elif i%5 == 0: print(i,&quot;Buzz&quot;)
elif i%3 == 0: print(i,&quot;Fizz&quot;)
else: print(i)
&lt;/pre&gt;
Lets put the same into a loop for a range given by the user.
&lt;pre&gt;
def fizzbuzzgame(start,stop):
    for i in range(start,stop+1):
        if i%3 == 0 and i%5 == 0:
            print(i,&quot;FizzBuzz&quot;)
        elif i%5 == 0:
            print(i,&quot;Buzz&quot;)
        elif i%3 == 0:
            print(i,&quot;Fizz&quot;)
        else: print(i)

fizzbuzzgame(50,100)
&lt;/pre&gt;


=== Fizz Buzz game in Interactive mode with Score ===
'''By Ms. Ami Tusharkant Choksi'''
&lt;pre&gt;
def fizzbuzzgame(i):
        if i%3 == 0 and i%5 == 0:
            print(i,&quot;FizzBuzz&quot;)
            return(&quot;fzbz&quot;)
        elif i%5 == 0:
            print(i,&quot;Buzz&quot;)
            return(&quot;bz&quot;)
        elif i%3 == 0:
            print(i,&quot;Fizz&quot;)
            return(&quot;fz&quot;)
        else:
            print(i)
            return(&quot;no&quot;)

ch = 'y'
fizzbuzz=0
fizz=0
buzz=0
nothing=0
print(&quot;&quot;&quot;
 _____  ____  _____  _____  ____   __ __  _____  _____       ____   ____  ___ ___    ___ 
|     ||    ||     ||     ||    \ |  |  ||     ||     |     /    | /    ||   |   |  /  _]
|   __| |  | |__/  ||__/  ||  o  )|  |  ||__/  ||__/  |    |   __||  o  || _   _ | /  [_ 
|  |_   |  | |   __||   __||     ||  |  ||   __||   __|    |  |  ||     ||  \_/  ||    _]
|   _]  |  | |  /  ||  /  ||  O  ||  :  ||  /  ||  /  |    |  |_ ||  _  ||   |   ||   [_ 
|  |    |  | |     ||     ||     ||     ||     ||     |    |     ||  |  ||   |   ||     |
|__|   |____||_____||_____||_____| \__,_||_____||_____|    |___,_||__|__||___|___||_____|
                                                                                         
&quot;&quot;&quot;)   

while(ch == 'y'):
    n=int(input(&quot;Enter a Number : &quot;))
    winLoose=fizzbuzzgame(n)
    if(winLoose == &quot;fz&quot;):
        fizz+=1
    elif(winLoose == &quot;bz&quot;):
        buzz+=1
    elif(winLoose == &quot;fzbz&quot;):
        fizzbuzz+=1
    ch=input(&quot;Do you want to continue playing the game : (y/n)&quot;)
    if(ch=='n'):
        print('Congratulations, your score is\n FizzBuzz:%d\nFizz:%d\nBuzz:%d' %
(fizzbuzz,fizz,buzz))
    
'''Sample Output:

 _____  ____  _____  _____  ____   __ __  _____  _____       ____   ____  ___ ___    ___ 
|     ||    ||     ||     ||    \ |  |  ||     ||     |     /    | /    ||   |   |  /  _]
|   __| |  | |__/  ||__/  ||  o  )|  |  ||__/  ||__/  |    |   __||  o  || _   _ | /  [_ 
|  |_   |  | |   __||   __||     ||  |  ||   __||   __|    |  |  ||     ||  \_/  ||    _]
|   _]  |  | |  /  ||  /  ||  O  ||  :  ||  /  ||  /  |    |  |_ ||  _  ||   |   ||   [_ 
|  |    |  | |     ||     ||     ||     ||     ||     |    |     ||  |  ||   |   ||     |
|__|   |____||_____||_____||_____| \__,_||_____||_____|    |___,_||__|__||___|___||_____|
                                                                                         

Enter a Number : 666
666 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 777
777 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 555
555 FizzBuzz
Do you want to continue playing the game : (y/n)y
Enter a Number : 1
1
Do you want to continue playing the game : (y/n)y
Enter a Number : 789
789 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 25
25 Buzz
Do you want to continue playing the game : (y/n)n
Congratulations, your score is

FizzBuzz:1
Fizz:3
Buzz:1

&lt;/pre&gt;

=Crowd Computing: Just Estimate=
==Wisdom of Crowds==
The concept of ’Wisdom of Crowds’ was proposed by Francis Galton. A weight-judging competition was carried on at the annual show of the West of England Fat Stock and Poultry Exhibition recently held at Plymouth, A fat ox having been selected, competitors bought stamped and numbered cards, each, on which to inscribe their respective names, addresses, and estimates of what the ox would weigh after it had been slaughtered. Those who guessed most successfully received prizes. About 8oo tickets were issued to the par- ticipants. The middlemost estimate of all the estimates recorded was 1207 lbs and the actual weight of the ox was 1198 lbs.

==Our Experiment==
The crowd had to guess the number of candies/gems in a jar. Around 75 people participated in the experiment. The actual number of gems in the jar were 375. The median of all estimates came out to be 300 and the mean of all the estimates came out to be around 396. Median underestimated and mean overestimated the actual value. So according to recent studies, Trimmed mean must be used as an aggregate measure to estimate where Wisdom of Crowds is involved.
[[File:Gemsjar.jpg|center|200px|caption]]

===Trimmed Mean===
In these kinds of experiments, 10% trimmed mean is usually followed. For calculating 10% trimmed mean, remove 10% smallest and 10% largest values from the sample. Calculate the mean of the sample obtained. In the above experiment, the trimmed mean came out to be around 351 which is very close to the actual value.

==Implementation==
Here, we try to demonstrate the concept of trimmed mean through crowd computing.
 Input a list of estimates done by the crowd .
 Sort the list.
 Remove the 10% smallest values.
 Remove the 10% largest values.
 Calculate the mean of the new list obtained .&lt;hr&gt;

==Data of Experiment==       
    Estimates =[1000,1010,1786,2000,1500,1500,100,120,150,150,150,170,175,180,197,200,200,200,200,200,200,220,220,220,220,234,250,250,250,250,250,250,250,250,250,263,270,275,275,286,300,
                300,300,300,300,300,300,300,320,350,350,350,400, 400,400,400,400,450,467,500,500,500,500,500,500,500,550,550,600,600,600,650,700,700,720]

    '''CODE:'''
&lt;pre&gt;
Estimates = [1000,1010,1786,2000,1500,1500,100,120,150,150,150,170,175,180,197,200,200,200,200,200,200,220,220,220,220,234,250,250,250,250,250,250,250,250,250,263,270,275,275,286,300,                300,300,300,300,300,300,300,320,350,350,350,400,400,400,400,400,450,467,500,500,500,500,500,500,500,550,550,600,600,600,650,700,700,720]
Estimates.sort()
offset = int(0.10*len(Estimates))
for i in range(offset):
       del Estimates[0]
       del Estimates[-1]
Sum = 0    
for i in range(len(Estimates)):
       Sum += Estimates[i]
Mean_Value = Sum/len(Estimates)
print(&quot;Mean : &quot;, int(Mean_Value))
#Output:
Mean :  351
&lt;/pre&gt;
&lt;hr&gt;
==Trimmed Mean for the above example== 
&lt;h3&gt;Using scipy library&lt;/h3&gt;
&lt;pre&gt;
#import scipy to use the method of trim_mean
from scipy import stats
trimMean = stats.trim_mean(Estimates, 0.1) # Trim 10% at both ends
print(&quot;Trimmed Mean : &quot;,trimMean)
#Output:
Trimmed Mean :  335.1020408163265
&lt;/pre&gt;

&lt;h3&gt;Without using scipy library&lt;/h3&gt;
&lt;pre&gt;
#Trimmed mean with 10%
p=10/100
#sorted data
data=[2, 4, 6, 7, 11, 21, 81, 90, 105, 121]
n = len(data)
#Remove elements from both end
rem=int(n*p)
newData = data[rem:-rem]
mean = 0
for i in newData:
    mean += i
mean = int(mean/len(newData))
print(&quot;Trimmed mean : &quot;,mean)
#Output: Trimmed mean :  40
&lt;/pre&gt;
[[#Top]]

=Jumbled_Words Permutations: Jumbled Words=
==What are Permutations ?==
A permutation also called ordering of selected number of elements from a list denoted by nPr here we are choosing all elements of a list and so n=r&lt;br&gt;
nPr=n!/(n-r)!&lt;br&gt; as n=r
nPn=n!&lt;br&gt; which gives all possible arrangement of elements present in a list.

 For example, permutations of list [1,2,3] are [1,2,3], [1,3,2], [2,1,3], [2,3,1], 
[3,1,2], and [3,2,1]. 
The number of permutations of a list of elements nPn is given by n!. For example, there are 2! = 2 x 1 = 2 permutations of [1,2], namely [1,2] and [2,1], and 3! = 3 x 2 x 1 = 6 permutations of [1,2,3], as mentioned above.&lt;br/&gt;
[[File:Permutations.jpg]]

==Implementation==
Here, we try to demonstrate the concept of permutations through jumbled words. It is a two player game in which one person presents the other person a different permutation of the word in his mind. The other person has to guess the right word. If he guesses, the he wins otherwise he loses.
 Input an list of words.
 Randomly pick a word from the list of words .
 Shuffle this word and present it to the other player.
 if word guesses by the player is same as the one picked from list of w
     player wins
 else
     player loses

ALTERNATE CODE TO GENERATE THIS GAME:
&lt;pre&gt;
import random
p1=input(&quot;enter player 1 name:&quot;)
p2=input(&quot;enter player 2 name:&quot;)
l=[&quot;rainbow&quot;,&quot;computer&quot;,&quot;robot&quot;,&quot;butter&quot;,&quot;vegetable&quot;,&quot;science&quot;,&quot;correct&quot;]
c1=c2=a1=a2=f1=f2=0
k=1
i=3
def play():
    n=random.choice(l)        ##n=chooses a word from list l
    l1=[]
    for j in n:
       l1.append(j)      ##creates a list for word in n
    for t in range(len(l1)):
       p=random.choice(l1)     ##this randomly displays letters in the list
       print(p)
       l1.remove(p)          ##to avoid the repetition of a letter
    s=input(&quot;enter the word:&quot;)
    if(s==n):
        print(&quot;correct&quot;)
        return 1
    else:
        print(&quot;not correct&quot;)
        print(&quot;answer is&quot;,n)
        return 0
def stat():
     print(&quot;player 1:&quot;)
     print(&quot;score:&quot;,c1)
     print(&quot;answered:&quot;,a1)
     print(&quot;failed:&quot;,f1)
     print(&quot;.............&quot;)
     print(&quot;player 2:&quot;)
     print(&quot;score:&quot;,c2)
     print(&quot;answered:&quot;,a2)
     print(&quot;failed&quot;,f2)
     if(c1&gt;c2):
         print(p1,&quot; won over &quot;,p2)
     elif(c1==c2):
         print(&quot;draw game&quot;)
     else:
         print(p2,&quot; won over &quot;,p1) 
while(i!=4):
      if(i==3):
         if(k==1):
             print(&quot;player 1 turn&quot;)
             print(&quot;your jumbled word is:&quot;)
             k=k+1
             m=play()
             if(m==1):      ##if guessed answer is correct,then score and no.of answered count will be increased
                c1+=1
                a1+=1
             else:
                f1+=1       ##else count of no.of failed to answered will be incremented
         else:
             print(&quot;player 2 turn&quot;)
             print(&quot;your jumbled word is:&quot;)
             k=k-1
             m=play()
             if(m==1):
                c2=c2+1
                a2=a2+1
             else:
                f2=f2+1
       if(i==2):
             print(&quot;present status&quot;)
             stat()
       i=int(input(&quot;enter your choice  1.stop 2.status 3.continue&quot;))
       if(i==1):
             stat()
             i=i+3
&lt;/pre&gt;
&lt;hr&gt;
=== JumbledWord Simple Logic, In Short ===
[[File:jumbledWord.gif]]
&lt;hr&gt;
'''Logic to create a Jumbled Word'''
&lt;hr&gt;
&lt;pre&gt;
#Get Jumbled Word and print it Horizontally
import random

def getJumbledWord(b):
    jumble=''
    l1 = [ b[i] for i in range(0, len(b)) ]
    for t in range(len(l1)):
       p=random.choice(l1)     ##this randomly gets letters from the list      
       jumble=jumble+p       
       l1.remove(p)
    return jumble

b=input(&quot;Enter a word to make it jumbled : &quot;)
print(&quot;Jumbled Word : &quot;, getJumbledWord(b))
&lt;/pre&gt;
&lt;hr&gt;
'''Another Logic to create a Jumbled Word'''
&lt;hr&gt;
&lt;pre&gt;
b=input(&quot;Enter a word to make it jumbled : &quot;)

def getJumbledWord1(b):
    l1 = [ b[i] for i in range(0, len(b)) ]
    random.shuffle(l1)
    str1 = ''.join(l1)
    return str1

print(&quot;Jumbled Word : &quot;, getJumbledWord1(b))
&lt;/pre&gt;

====Sample Output:====
&lt;pre&gt;
---- Output1 
Enter a word to make it jumbled : butter
Jumbled Word :  tbture

---- Output2 
Enter a word to make it jumbled : petriotism
Jumbled Word :  pittrosime
&lt;/pre&gt;

*[[http://sccilabs.org/jocwiki/index.php/Theory_of_Evolution Theory of Evolution]]</text>
      <sha1>b6pql8wt8uz0cpyqorphs66w80lp29y</sha1>
    </revision>
    <revision>
      <id>3363</id>
      <parentid>3362</parentid>
      <timestamp>2018-09-26T06:15:16Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* JumbledWord Simple Logic, In Short */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="28101">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_3 Contributors of this page]
*Week 3 Playlist: https://www.youtube.com/playlist?list=PLc_j0TNIaWxOVx_z9jAM2UB3RqYNXaoEo
=List=
List is a flexible data structure used for storing a group of data separated by comma. The elements in a list need not be of the same data type.

'''Example:'''
       List_1 = [ 1, 2,3] or 
       List_1 = [&quot;coffee&quot;, &quot;Tea&quot;, &quot;Milk&quot;] or
       List_1 = [1,&quot;coffee&quot;, &quot;Tea&quot;, 3, &quot;5&quot;]

==List Creation==
a) A list can be created by simply putting values (separated by comma) between square brackets as given below,
       List_1 = [1,&quot;coffee&quot;, &quot;Tea&quot;, 3, &quot;5&quot;] #this creates a list by name List_1 containing following items


Or,
(b)A List can be created from scratch and elements can be added 
        List_2 = [ ]
        List_2.append(&quot;Kala&quot;)
        List_2.append(&quot;Mala&quot;)
Here we use &quot;append&quot; ,which is a function in python that enable us to append or attach an element to a list .
Thus List_2 will now hold [&quot;Kala&quot;,&quot;Mala&quot;]

==Operations and Methods to work with List==
&lt;pre&gt;
a = [25,30,50,90,12,13]
b = [100,300,500,200,250]
&lt;/pre&gt;
&lt;hr&gt;
&lt;table border=2&gt;
  &lt;tr&gt;
    &lt;th&gt;&lt;b&gt;Method/&lt;br&gt;Operator&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Function&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Syntax&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Output&lt;/b&gt;&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;len()&lt;/td&gt;
    &lt;td&gt;Find length of a list&lt;/td&gt;
    &lt;td&gt;len(a)&lt;/td&gt;
    &lt;td&gt;6&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;max()&lt;/td&gt;
    &lt;td&gt;Find maximum element from the list&lt;/td&gt;
    &lt;td&gt;max(a)&lt;/td&gt;
    &lt;td&gt;90&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;min()&lt;/td&gt;
    &lt;td&gt;Find minimum element from the list&lt;/td&gt;
    &lt;td&gt;min(a)&lt;/td&gt;
    &lt;td&gt;12&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sum()&lt;/td&gt;
    &lt;td&gt;Returns sum of all elements of the list&lt;/td&gt;
    &lt;td&gt;sum(a)&lt;/td&gt;
    &lt;td&gt;220&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;reverse()&lt;/td&gt;
    &lt;td&gt;Reverses the original list&lt;/td&gt;
    &lt;td&gt;a.reverse()&lt;/td&gt;
    &lt;td&gt;[13, 12, 90, 50, 30, 25]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sort()&lt;/td&gt;
    &lt;td&gt;Sorts the original list in ascending order&lt;/td&gt;
    &lt;td&gt;a.sort()&lt;/td&gt;
    &lt;td&gt;[12, 13, 25, 30, 50, 90]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sorted()&lt;/td&gt;
    &lt;td&gt;Returns the new sorted list &lt;/td&gt;
    &lt;td&gt;sorted(a)&lt;/td&gt;
    &lt;td&gt;[12, 13, 25, 30, 50, 90]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;insert()&lt;/td&gt;
    &lt;td&gt;Insert at a particular index in the list, and shifts remaining elements&lt;/td&gt;
    &lt;td&gt;a.insert(3,3)&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 3, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;append()&lt;/td&gt;
    &lt;td&gt;Adds elements/object to the end of the list&lt;/td&gt;
    &lt;td&gt;a.append(5)&lt;br&gt;a.append([10,20])&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 5]&lt;br&gt;[25, 30, 50, 90, 12, 13, [10, 20]]&lt;br&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;extend()&lt;/td&gt;
    &lt;td&gt;Adds object to the end of the list as elements not as object&lt;/td&gt;
    &lt;td&gt;a.extend([10,20])&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 10, 20]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;*&amp;nbsp;&amp;nbsp;Repeatation&lt;br&gt;operator&lt;/td&gt;
    &lt;td&gt;Repeat the list for n times and returns a new list&lt;/td&gt;
    &lt;td&gt;a*2&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 25, 30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;+ Concatenation&lt;br&gt;operator&lt;/td&gt;
    &lt;td&gt;Concatenates two lists, and returns a new list&lt;/td&gt;
    &lt;td&gt;a+b&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 100, 300, 500, 200, 250]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;index()&lt;/td&gt;
    &lt;td&gt;Finds index of a particular element in the list or not&lt;/td&gt;
    &lt;td&gt;a.index(25)&lt;br&gt;a.index(0)&lt;br&gt;&lt;/td&gt;
    &lt;td&gt;0&lt;br&gt;&lt;br&gt;ValueError: 0 is not in list&lt;br&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;in operator&lt;/td&gt;
    &lt;td&gt;Finds whether a particular element is in the list or not, returns boolean&lt;/td&gt;
    &lt;td&gt;25 in a&lt;/td&gt;
    &lt;td&gt;True&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;not in operator&lt;/td&gt;
    &lt;td&gt;Checks if element is not available in list, returns boolean&lt;/td&gt;
    &lt;td&gt;25 not in a&lt;/td&gt;
    &lt;td&gt;False&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;count()&lt;/td&gt;
    &lt;td&gt;Counts the number of occurence of an element in the list&lt;/td&gt;
    &lt;td&gt;a.count(25)&lt;/td&gt;
    &lt;td&gt;1&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;remove()&lt;/td&gt;
    &lt;td&gt;Removes an element from the list&lt;/td&gt;
    &lt;td&gt;a.remove(25)&lt;/td&gt;
    &lt;td&gt; [30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;pop()&lt;/td&gt;
    &lt;td&gt;Delete and return item at index 0&lt;/td&gt;
    &lt;td&gt;a.pop(0)&lt;/td&gt;
    &lt;td&gt;25 , a will be [30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;del&lt;/td&gt;
    &lt;td&gt;Deletes item at a particular index from the list&lt;/td&gt;
    &lt;td&gt;del a[0]&lt;/td&gt;
    &lt;td&gt;[30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;

==Printing the List==
=== Print whole list ===
A list can be printed simply or using a ''for / while'' loop 

 print(List_2)     # To print the entire list
This code will print      
 ['Kala','Mala']     

===Print element at a particular index===
&lt;pre&gt;
Using index position
    List_2[0]     # prints 'Kala' ,i.e,the value at index position 0.
    List_2[1]     # prints 'Mala'.
&lt;/pre&gt;
=== Without using index position ===
&lt;pre&gt;
for item in List_2:   # here item is a variable used to access elements in list.
       print(item)
   This code snippet prints 
    Kala
    Mala
&lt;/pre&gt;

==Search for a particular element in list==
Elements in a list can be searched by one of the two ways:
=== using index() function===
&lt;pre&gt;
ages1 = [11,23,12,23,45]

#if element is available in the list, index() returns the index value on which, the element is present.
print(ages1.index(45))#Output: 4

#if element is not available in the list, index() returns ''ValueError''
print(ages1.index(0))#Output: ValueError:
&lt;/pre&gt;

In programming, if such error occurs, program gets terminated. It can be solved using exception handling.
e.g.
&lt;pre&gt;
ages1 = [11,23,12,23,45]

try:
    print(ages1.index(0))
except ValueError:
    print(&quot;Exception has occured&quot;)    
    print(&quot;Element is not found in the list&quot;)

&lt;/pre&gt;
&lt;pre&gt;
'''Output: 
Exception has occured
Element is not found in the list
'''&lt;/pre&gt;

=== using 'in' operator===
''in'' operator is used to check whether a particular element is available in the list or not.e.g.

&lt;pre&gt;
ages1 = [11,23,12,23,45]
no=11

if no in ages1:
    print(&quot;no is there in the list&quot;)
else:    
    print(&quot;no is NOT there in the list&quot;)
&lt;/pre&gt;
&lt;pre&gt;
#Output: no is there in the list
&lt;/pre&gt;

'''Number is not there in the list'''
&lt;pre&gt;
ages1 = [11,23,12,23,45]
no=15

if no in ages1:
    print(&quot;no is there in the list&quot;)
else:    
    print(&quot;no is NOT there in the list&quot;)
&lt;/pre&gt;
&lt;pre&gt;
Output: no is NOT there in the list
&lt;/pre&gt;


==Updating the List==
The lists can be updated using ''append'' or ''insert'' function.  Append adds the element to the end of the list and Insert adds the element in the specified position.
   List_2.append(&quot;Sheela&quot;)    # add the element 'Sheela' to the end of the list.
   print (List_2) will output 
   ['Kala', 'Mala', 'Sheela']
   
   List_2.insert(1,&quot;Bala&quot;)    # add the element &quot;Bala&quot; in the list at the index 1.
   print (List_2) will output 
   ['Kala', 'Bala','Mala', 'Sheela']

=== Extend the list by adding elements of other list at end using extend()===
&lt;pre&gt;
ages = [11,23,12,23,45]
ages.extend([57,58])
print(ages)
&lt;/pre&gt;

&lt;pre&gt;
#Output: [11, 23, 12, 23, 45, 57, 58]
&lt;/pre&gt;

==== Difference between ''append and extend'' ====
Difference between append and extend can be easily understood, by the following example.

&lt;pre&gt;
appendlist = [11,23,12,23,45]
appendlist.append([57,58])

extendlist= [11,23,12,23,45]
extendlist.extend([57,58])
&lt;/pre&gt;

&lt;pre&gt;
'''Output:
[11, 23, 12, 23, 45, [57, 58]]
[11, 23, 12, 23, 45, 57, 58]'''
&lt;/pre&gt;

==Basic Operations on List==
===Frequency of Occurrence===
list.count(object) will return the number of times the object occur in the list.
  '''Example'''
    ages = [11,23,12,23,45,43,22,24,23]
    ages.count(23) will return
    3
    ages.count(100) will return
    0

===Length of the List===
len(list) will return the length of the list ie. the number of objects in the list.
  '''Example'''
    ages = [11,23,12,23,45,43,22,24,23]
    len(ages) will output
    9
To print the objects in the list either use ''for item in list'' or ''for index in range(len(list))''
    for item in ages:       
        print (item)  
        (OR)
    for index in range(len(ages)) :
        print (ages[index])
===Sort the List===
list.sort() will sort the list in ascending order
  '''Example'''
    ages = [11,23,12,23,45,43,22,24,23]
    ages.sort() 
    print (ages) 
    [11, 12, 22, 23, 23, 23, 24, 43, 45]
===Sort the List using sorted() function===
sorted(list1) will sort the list and return a new list, it doesn't modify the original list
&lt;br&gt;'''Example: Sort in ascending order'''
&lt;pre&gt;
ages = [11,23,12,23,45,43,22,24,23]
newList=sorted(ages)
print(newList)

#Output: [11, 12, 22, 23, 23, 23, 24, 43, 45]
&lt;/pre&gt;

&lt;br&gt;'''Example: Sort in descending order'''
&lt;pre&gt;
ages = [11,23,12,23,45,43,22,24,23]
newList=sorted(ages,reverse=True)
print(newList)

#Output: [45, 43, 24, 23, 23, 23, 22, 12, 11]
&lt;/pre&gt;

===Reverse the List===
list.reverse() will reverse the original list
  '''Example'''
    ages = [11, 12, 22, 23, 23, 23, 24, 43, 45]
    ages.reverse()
    print (ages)
    [45, 43, 24, 23, 23, 23, 22, 12, 11]

Both sort() and reverse() list operation will work on numeric and alphanumeric data list.

A special use of the reverse() function is to descend a list that is sorted in ascending order.

  '''Example'''
&lt;pre&gt;
ages = [11, 12, 22, 23, 23, 23, 24, 43, 45]
ages.sort()
print(ages)
ages.reverse()
print(ages)
&lt;/pre&gt;

===Slicing===
Used to retrieve an object or objects in a range as a list  
  '''Example'''
Use ''list[index]'' to retrieve the object at the given index
         In [1]: student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
         In [2]: student[3]     #Object at index 3.  Remember index starts at 0
         Out[2]: 'Geetha'      


Use ''list[start_index : end_index + 1]'' to retrieve objects from the start_index to end_index 
         In [3]: student[2:4]     # Objects from index 2 to 3 as List. Note the [ and ]
         Out[3]: ['Vijay', 'Geetha']   


Use ''list[:]'' to retrieve objects from the starting of the list to the end of the list. 
The default start value will be the starting index of the list (i.e. 0) and the default end value
will be the length of the list 
         In [4]: student[:]        # prints the entire list
         Out[4]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma', 'Janani']


         In [5]: student[:5]       # prints the objects from the start of the list upto object at index 4
         Out[5]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran']


         In [6]: student[2:]       # prints the objects from index 2 upto the end of the list
         Out[6]: ['Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma', 'Janani']


Negative index too is available in Python. It starts from last element of the list. i.e.

         In [7]:student[-1]        #prints last index of list
         Out[7]: 'Janani'


         In [8]:student[-1:-8]     #prints empty list
         Out[8]: []


         In [9]:student[-8:-1]     #prints -8th index to -1st index elements
         Out[9]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma']

===Removing Item from list ===
----

Is used to remove a specific item from the list.

'''Example:'''
 
Use list.remove(entry/value)  Or   del list[index]    Or list.pop(index)
         student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
         student.remove(&quot;Arun&quot;)   #This will delete item &quot;Arun&quot;
         Or    
         del student[0]           # This will delete item at index 0
         Or
         student.pop(0)         # This will delete and return item at index 0


         print(student)    
         Output: [&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]

===Delete list ===
----
Used to delete complete list

'''Example'''

Use del &lt;list name&gt;
         student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
         del student

===Concatenation of two lists===
----
''+'' is the concatenation operator which is used concatenate two lists. 
&lt;pre&gt;
ages1 = [11,23,12,23,45]
ages2 = [25, 24, 43, 47]
age=ages1+ages2
print(age)
#Output: [11, 23, 12, 23, 45, 25, 24, 43, 47]
&lt;/pre&gt;

===Repeatation of a list ===
----
''*'' is the operator to repeat a particular list.
&lt;pre&gt;
ages1 = [11,23,12,23,45]
age=ages1*5 #ages1 list is repeated 5 times and stroed in ''age'' list
print(age)

#Output: [11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45]
&lt;/pre&gt;
====Conditional Statements====
    Conditionals are used to check the condition and change the flow of the program 
accordingly. They are realized in programming languages through if statement. The 
syntax is as follows :
         if condition : 
            statement
    '''Note:''' Do not forget indentation (inserting space/tab) in the line after the
 if condition.
    
    In case you want to execute a set of statements when a condition is true and another

set of statement when the condition is false.
         if condition : 
            statement 1
         else :
            statement 2
    
    Multiple if-else statements can be written as follows:
         if condition_1 : 
            statement 1
         elif condition_2 : # 'elif' is short for 'else if'
            statement 2
         elif condition_3 :
            statement 3
        .
        .
         else :
            final statement

=Loops and Conditionals : Fizzbuzz=
====Loops====

    Loops are used to execute a set of repetitive statements. They are realized
 through 'while' and 'for' loops in programming languages. The syntax of 'for' loop is 
as follows :
        for LOOPVARIABLE in SEQUENCE: 
            STATEMENTS
    '''e.g.''' to print all the data from a list we can write:
        for item in list_name
            print(item)
    OR
        for index in range(len(list_name))
            print(list_name[index])
    
    The syntax for while loop is as follows :
    
        while BOOLEANEXPRESSION: 
            STATEMENTS
            INCREMENT/DECREMENT
    
    '''e.g.''' if we want to print all numbers from 1 to 10
        i=1
        while i&lt;=10 :
            print(i,&quot; &quot;)
            i=i+1
    
    'while' loop has indefinite iteration (run-time unknown). So, there must be loop
 break statement in it.
 Whereas 'for' loop is definite in nature (i.e. known or predictable span).&lt;br&gt;

&lt;b&gt;NOTE: Python doesn't have anything like do-while loop.&lt;/b&gt;

==Implementation==
Here, we try to demonstrate the concept of loops and conditionals through a game called Fizzbuzz. The rules are as follows :&lt;br/&gt;
[[File:fizzBuzz.gif]]

• if input number is a multiple of ’3’ print ”Fizz”
&lt;br/&gt;
• if input number is a multiple of ’5’ print ”Buzz”
&lt;br/&gt;
• if input number is a multiple of both '3' and ’5’ print ”FizzBuzz”
&lt;br/&gt;
The pseudo code is as follows :
&lt;pre&gt;
   If input no % 3 == 0 and  input no % 5 == 0 : 
       print ”Fizzbuzz”
   else if input no % 3 == 0 : 
       print ”Fizz”
   else if input no % 5 == 0 : 
       print ”Buzz”
   else :
       print the input no
&lt;/pre&gt;
The order of statements execution matters to get the desired output. The highest priority condition should be first followed by other. In fizzbuzz programming, first checking should be done for both divisibility of 3 and 5. If condition not satisfied only then it should check individually for 3 or 5. So carefully choosing the order is crucial for better programming.
Note: There is some effect of present condition statements chosen on next conditions statements. That is why in first attempt fizzbuzz programming got struck.

Example: 
&lt;pre&gt;
#Code to achieve the above requirement in python3.
i = int(input(&quot;Enter the number&quot;)) 
if i%3 == 0 and i%5 == 0: print(i,&quot;FizzBuzz&quot;)  
elif i%5 == 0: print(i,&quot;Buzz&quot;)
elif i%3 == 0: print(i,&quot;Fizz&quot;)
else: print(i)
&lt;/pre&gt;
Lets put the same into a loop for a range given by the user.
&lt;pre&gt;
def fizzbuzzgame(start,stop):
    for i in range(start,stop+1):
        if i%3 == 0 and i%5 == 0:
            print(i,&quot;FizzBuzz&quot;)
        elif i%5 == 0:
            print(i,&quot;Buzz&quot;)
        elif i%3 == 0:
            print(i,&quot;Fizz&quot;)
        else: print(i)

fizzbuzzgame(50,100)
&lt;/pre&gt;


=== Fizz Buzz game in Interactive mode with Score ===
'''By Ms. Ami Tusharkant Choksi'''
&lt;pre&gt;
def fizzbuzzgame(i):
        if i%3 == 0 and i%5 == 0:
            print(i,&quot;FizzBuzz&quot;)
            return(&quot;fzbz&quot;)
        elif i%5 == 0:
            print(i,&quot;Buzz&quot;)
            return(&quot;bz&quot;)
        elif i%3 == 0:
            print(i,&quot;Fizz&quot;)
            return(&quot;fz&quot;)
        else:
            print(i)
            return(&quot;no&quot;)

ch = 'y'
fizzbuzz=0
fizz=0
buzz=0
nothing=0
print(&quot;&quot;&quot;
 _____  ____  _____  _____  ____   __ __  _____  _____       ____   ____  ___ ___    ___ 
|     ||    ||     ||     ||    \ |  |  ||     ||     |     /    | /    ||   |   |  /  _]
|   __| |  | |__/  ||__/  ||  o  )|  |  ||__/  ||__/  |    |   __||  o  || _   _ | /  [_ 
|  |_   |  | |   __||   __||     ||  |  ||   __||   __|    |  |  ||     ||  \_/  ||    _]
|   _]  |  | |  /  ||  /  ||  O  ||  :  ||  /  ||  /  |    |  |_ ||  _  ||   |   ||   [_ 
|  |    |  | |     ||     ||     ||     ||     ||     |    |     ||  |  ||   |   ||     |
|__|   |____||_____||_____||_____| \__,_||_____||_____|    |___,_||__|__||___|___||_____|
                                                                                         
&quot;&quot;&quot;)   

while(ch == 'y'):
    n=int(input(&quot;Enter a Number : &quot;))
    winLoose=fizzbuzzgame(n)
    if(winLoose == &quot;fz&quot;):
        fizz+=1
    elif(winLoose == &quot;bz&quot;):
        buzz+=1
    elif(winLoose == &quot;fzbz&quot;):
        fizzbuzz+=1
    ch=input(&quot;Do you want to continue playing the game : (y/n)&quot;)
    if(ch=='n'):
        print('Congratulations, your score is\n FizzBuzz:%d\nFizz:%d\nBuzz:%d' %
(fizzbuzz,fizz,buzz))
    
'''Sample Output:

 _____  ____  _____  _____  ____   __ __  _____  _____       ____   ____  ___ ___    ___ 
|     ||    ||     ||     ||    \ |  |  ||     ||     |     /    | /    ||   |   |  /  _]
|   __| |  | |__/  ||__/  ||  o  )|  |  ||__/  ||__/  |    |   __||  o  || _   _ | /  [_ 
|  |_   |  | |   __||   __||     ||  |  ||   __||   __|    |  |  ||     ||  \_/  ||    _]
|   _]  |  | |  /  ||  /  ||  O  ||  :  ||  /  ||  /  |    |  |_ ||  _  ||   |   ||   [_ 
|  |    |  | |     ||     ||     ||     ||     ||     |    |     ||  |  ||   |   ||     |
|__|   |____||_____||_____||_____| \__,_||_____||_____|    |___,_||__|__||___|___||_____|
                                                                                         

Enter a Number : 666
666 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 777
777 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 555
555 FizzBuzz
Do you want to continue playing the game : (y/n)y
Enter a Number : 1
1
Do you want to continue playing the game : (y/n)y
Enter a Number : 789
789 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 25
25 Buzz
Do you want to continue playing the game : (y/n)n
Congratulations, your score is

FizzBuzz:1
Fizz:3
Buzz:1

&lt;/pre&gt;

=Crowd Computing: Just Estimate=
==Wisdom of Crowds==
The concept of ’Wisdom of Crowds’ was proposed by Francis Galton. A weight-judging competition was carried on at the annual show of the West of England Fat Stock and Poultry Exhibition recently held at Plymouth, A fat ox having been selected, competitors bought stamped and numbered cards, each, on which to inscribe their respective names, addresses, and estimates of what the ox would weigh after it had been slaughtered. Those who guessed most successfully received prizes. About 8oo tickets were issued to the par- ticipants. The middlemost estimate of all the estimates recorded was 1207 lbs and the actual weight of the ox was 1198 lbs.

==Our Experiment==
The crowd had to guess the number of candies/gems in a jar. Around 75 people participated in the experiment. The actual number of gems in the jar were 375. The median of all estimates came out to be 300 and the mean of all the estimates came out to be around 396. Median underestimated and mean overestimated the actual value. So according to recent studies, Trimmed mean must be used as an aggregate measure to estimate where Wisdom of Crowds is involved.
[[File:Gemsjar.jpg|center|200px|caption]]

===Trimmed Mean===
In these kinds of experiments, 10% trimmed mean is usually followed. For calculating 10% trimmed mean, remove 10% smallest and 10% largest values from the sample. Calculate the mean of the sample obtained. In the above experiment, the trimmed mean came out to be around 351 which is very close to the actual value.

==Implementation==
Here, we try to demonstrate the concept of trimmed mean through crowd computing.
 Input a list of estimates done by the crowd .
 Sort the list.
 Remove the 10% smallest values.
 Remove the 10% largest values.
 Calculate the mean of the new list obtained .&lt;hr&gt;

==Data of Experiment==       
    Estimates =[1000,1010,1786,2000,1500,1500,100,120,150,150,150,170,175,180,197,200,200,200,200,200,200,220,220,220,220,234,250,250,250,250,250,250,250,250,250,263,270,275,275,286,300,
                300,300,300,300,300,300,300,320,350,350,350,400, 400,400,400,400,450,467,500,500,500,500,500,500,500,550,550,600,600,600,650,700,700,720]

    '''CODE:'''
&lt;pre&gt;
Estimates = [1000,1010,1786,2000,1500,1500,100,120,150,150,150,170,175,180,197,200,200,200,200,200,200,220,220,220,220,234,250,250,250,250,250,250,250,250,250,263,270,275,275,286,300,                300,300,300,300,300,300,300,320,350,350,350,400,400,400,400,400,450,467,500,500,500,500,500,500,500,550,550,600,600,600,650,700,700,720]
Estimates.sort()
offset = int(0.10*len(Estimates))
for i in range(offset):
       del Estimates[0]
       del Estimates[-1]
Sum = 0    
for i in range(len(Estimates)):
       Sum += Estimates[i]
Mean_Value = Sum/len(Estimates)
print(&quot;Mean : &quot;, int(Mean_Value))
#Output:
Mean :  351
&lt;/pre&gt;
&lt;hr&gt;
==Trimmed Mean for the above example== 
&lt;h3&gt;Using scipy library&lt;/h3&gt;
&lt;pre&gt;
#import scipy to use the method of trim_mean
from scipy import stats
trimMean = stats.trim_mean(Estimates, 0.1) # Trim 10% at both ends
print(&quot;Trimmed Mean : &quot;,trimMean)
#Output:
Trimmed Mean :  335.1020408163265
&lt;/pre&gt;

&lt;h3&gt;Without using scipy library&lt;/h3&gt;
&lt;pre&gt;
#Trimmed mean with 10%
p=10/100
#sorted data
data=[2, 4, 6, 7, 11, 21, 81, 90, 105, 121]
n = len(data)
#Remove elements from both end
rem=int(n*p)
newData = data[rem:-rem]
mean = 0
for i in newData:
    mean += i
mean = int(mean/len(newData))
print(&quot;Trimmed mean : &quot;,mean)
#Output: Trimmed mean :  40
&lt;/pre&gt;
[[#Top]]

=Jumbled_Words Permutations: Jumbled Words=
==What are Permutations ?==
A permutation also called ordering of selected number of elements from a list denoted by nPr here we are choosing all elements of a list and so n=r&lt;br&gt;
nPr=n!/(n-r)!&lt;br&gt; as n=r
nPn=n!&lt;br&gt; which gives all possible arrangement of elements present in a list.

 For example, permutations of list [1,2,3] are [1,2,3], [1,3,2], [2,1,3], [2,3,1], 
[3,1,2], and [3,2,1]. 
The number of permutations of a list of elements nPn is given by n!. For example, there are 2! = 2 x 1 = 2 permutations of [1,2], namely [1,2] and [2,1], and 3! = 3 x 2 x 1 = 6 permutations of [1,2,3], as mentioned above.&lt;br/&gt;
[[File:Permutations.jpg]]

==Implementation==
Here, we try to demonstrate the concept of permutations through jumbled words. It is a two player game in which one person presents the other person a different permutation of the word in his mind. The other person has to guess the right word. If he guesses, the he wins otherwise he loses.
 Input an list of words.
 Randomly pick a word from the list of words .
 Shuffle this word and present it to the other player.
 if word guesses by the player is same as the one picked from list of w
     player wins
 else
     player loses

ALTERNATE CODE TO GENERATE THIS GAME:
&lt;pre&gt;
import random
p1=input(&quot;enter player 1 name:&quot;)
p2=input(&quot;enter player 2 name:&quot;)
l=[&quot;rainbow&quot;,&quot;computer&quot;,&quot;robot&quot;,&quot;butter&quot;,&quot;vegetable&quot;,&quot;science&quot;,&quot;correct&quot;]
c1=c2=a1=a2=f1=f2=0
k=1
i=3
def play():
    n=random.choice(l)        ##n=chooses a word from list l
    l1=[]
    for j in n:
       l1.append(j)      ##creates a list for word in n
    for t in range(len(l1)):
       p=random.choice(l1)     ##this randomly displays letters in the list
       print(p)
       l1.remove(p)          ##to avoid the repetition of a letter
    s=input(&quot;enter the word:&quot;)
    if(s==n):
        print(&quot;correct&quot;)
        return 1
    else:
        print(&quot;not correct&quot;)
        print(&quot;answer is&quot;,n)
        return 0
def stat():
     print(&quot;player 1:&quot;)
     print(&quot;score:&quot;,c1)
     print(&quot;answered:&quot;,a1)
     print(&quot;failed:&quot;,f1)
     print(&quot;.............&quot;)
     print(&quot;player 2:&quot;)
     print(&quot;score:&quot;,c2)
     print(&quot;answered:&quot;,a2)
     print(&quot;failed&quot;,f2)
     if(c1&gt;c2):
         print(p1,&quot; won over &quot;,p2)
     elif(c1==c2):
         print(&quot;draw game&quot;)
     else:
         print(p2,&quot; won over &quot;,p1) 
while(i!=4):
      if(i==3):
         if(k==1):
             print(&quot;player 1 turn&quot;)
             print(&quot;your jumbled word is:&quot;)
             k=k+1
             m=play()
             if(m==1):      ##if guessed answer is correct,then score and no.of answered count will be increased
                c1+=1
                a1+=1
             else:
                f1+=1       ##else count of no.of failed to answered will be incremented
         else:
             print(&quot;player 2 turn&quot;)
             print(&quot;your jumbled word is:&quot;)
             k=k-1
             m=play()
             if(m==1):
                c2=c2+1
                a2=a2+1
             else:
                f2=f2+1
       if(i==2):
             print(&quot;present status&quot;)
             stat()
       i=int(input(&quot;enter your choice  1.stop 2.status 3.continue&quot;))
       if(i==1):
             stat()
             i=i+3
&lt;/pre&gt;
&lt;hr&gt;
=== JumbledWord Simple Logic, In Short ===
[[File:jumbledWord.gif]]
&lt;hr&gt;
'''Logic to create a Jumbled Word'''
&lt;hr&gt;
&lt;pre&gt;
#Get Jumbled Word and print it Horizontally
import random

def getJumbledWord(b):
    jumble=''
    l1 = [ b[i] for i in range(0, len(b)) ]
    for t in range(len(l1)):
       p=random.choice(l1)     ##this randomly gets letters from the list      
       jumble=jumble+p       
       l1.remove(p)
    return jumble

b=input(&quot;Enter a word to make it jumbled : &quot;)
print(&quot;Jumbled Word : &quot;, getJumbledWord(b))
&lt;/pre&gt;
&lt;hr&gt;
'''Another Logic to create a Jumbled Word'''
&lt;hr&gt;
&lt;pre&gt;
b=input(&quot;Enter a word to make it jumbled : &quot;)

def getJumbledWord1(b):
    l1 = [ b[i] for i in range(0, len(b)) ]
    random.shuffle(l1)
    str1 = ''.join(l1)
    return str1

print(&quot;Jumbled Word : &quot;, getJumbledWord1(b))
&lt;/pre&gt;

====Sample Output:====
&lt;pre&gt;
---- Output1 
Enter a word to make it jumbled : butter
Jumbled Word :  tbture

---- Output2 
Enter a word to make it jumbled : petriotism
Jumbled Word :  pittrosime
&lt;/pre&gt;

=Theory of Evolution=

== What is Evolution ? ==
Evolution is the change in heritable characteristics over successive generations. The theory of evolution explains that DNA, which acts as a carrier of genetic information from one generation to other, tends to change or mutate occasionally. These changes are reflected in next generations to come. This is how life has evolved on earth from bacteria to human beings.&lt;br&gt;
[[File:Evolution.png|500px]]

== Implementation ==
An array representing DNA is stored in a file. As genes are forms of DNA, they contain information to be transferred to forthcoming generations. Assume that information is in the form of bits (in the form of 0s and 1s). A number is picked randomly from 1 to the size of the array. A new parameter has been introduced which decides whether mutation would occur or not. If the value of this new parameter is 1 (It is picked randomly from 1 to 100), then only change is reflected down the generations, otherwise it is not. The pseudo code is as follows :
Input an array containing genetic information .
Randomly generate a number (say m) from 1 to length of the array. Randomly generate other number (say p) from 1 to 100.
 
    if p is equal to 1 then 
        if m is 1 then
          set it to 0
        else
          set it to 1</text>
      <sha1>m93dw5m6hk872of5c05so4u62kyuffz</sha1>
    </revision>
    <revision>
      <id>3480</id>
      <parentid>3363</parentid>
      <timestamp>2018-09-27T13:08:11Z</timestamp>
      <contributor>
        <username>Sachinkr</username>
        <id>1743</id>
      </contributor>
      <comment>/* List Creation */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="28110">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_3 Contributors of this page]
*Week 3 Playlist: https://www.youtube.com/playlist?list=PLc_j0TNIaWxOVx_z9jAM2UB3RqYNXaoEo
=List=
List is a flexible data structure used for storing a group of data separated by comma. The elements in a list need not be of the same data type.

'''Example:'''
       List_1 = [ 1, 2,3] or 
       List_1 = [&quot;coffee&quot;, &quot;Tea&quot;, &quot;Milk&quot;] or
       List_1 = [1,&quot;coffee&quot;, &quot;Tea&quot;, 3, &quot;5&quot;]

==List Creation==
a) A list can be created by simply putting values (separated by comma) between square brackets as given below,
       List_1 = [1,&quot;coffee&quot;, &quot;Tea&quot;, 3, &quot;5&quot;] #this creates a list by name List_1 containing following items


Or,
(b)A List can be created from scratch and elements can be added 
        List_2 = [ ]
        List_2.append(&quot;Kala&quot;)
        List_2.append(&quot;Mala&quot;)
Here we use &quot;append&quot; ,which is a function in python that enable us to append or attach an element to a list .
Thus List_2 will now hold [&quot;Kala&quot;,&quot;Mala&quot;]
[[#TOP]]

==Operations and Methods to work with List==
&lt;pre&gt;
a = [25,30,50,90,12,13]
b = [100,300,500,200,250]
&lt;/pre&gt;
&lt;hr&gt;
&lt;table border=2&gt;
  &lt;tr&gt;
    &lt;th&gt;&lt;b&gt;Method/&lt;br&gt;Operator&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Function&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Syntax&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Output&lt;/b&gt;&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;len()&lt;/td&gt;
    &lt;td&gt;Find length of a list&lt;/td&gt;
    &lt;td&gt;len(a)&lt;/td&gt;
    &lt;td&gt;6&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;max()&lt;/td&gt;
    &lt;td&gt;Find maximum element from the list&lt;/td&gt;
    &lt;td&gt;max(a)&lt;/td&gt;
    &lt;td&gt;90&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;min()&lt;/td&gt;
    &lt;td&gt;Find minimum element from the list&lt;/td&gt;
    &lt;td&gt;min(a)&lt;/td&gt;
    &lt;td&gt;12&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sum()&lt;/td&gt;
    &lt;td&gt;Returns sum of all elements of the list&lt;/td&gt;
    &lt;td&gt;sum(a)&lt;/td&gt;
    &lt;td&gt;220&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;reverse()&lt;/td&gt;
    &lt;td&gt;Reverses the original list&lt;/td&gt;
    &lt;td&gt;a.reverse()&lt;/td&gt;
    &lt;td&gt;[13, 12, 90, 50, 30, 25]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sort()&lt;/td&gt;
    &lt;td&gt;Sorts the original list in ascending order&lt;/td&gt;
    &lt;td&gt;a.sort()&lt;/td&gt;
    &lt;td&gt;[12, 13, 25, 30, 50, 90]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sorted()&lt;/td&gt;
    &lt;td&gt;Returns the new sorted list &lt;/td&gt;
    &lt;td&gt;sorted(a)&lt;/td&gt;
    &lt;td&gt;[12, 13, 25, 30, 50, 90]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;insert()&lt;/td&gt;
    &lt;td&gt;Insert at a particular index in the list, and shifts remaining elements&lt;/td&gt;
    &lt;td&gt;a.insert(3,3)&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 3, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;append()&lt;/td&gt;
    &lt;td&gt;Adds elements/object to the end of the list&lt;/td&gt;
    &lt;td&gt;a.append(5)&lt;br&gt;a.append([10,20])&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 5]&lt;br&gt;[25, 30, 50, 90, 12, 13, [10, 20]]&lt;br&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;extend()&lt;/td&gt;
    &lt;td&gt;Adds object to the end of the list as elements not as object&lt;/td&gt;
    &lt;td&gt;a.extend([10,20])&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 10, 20]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;*&amp;nbsp;&amp;nbsp;Repeatation&lt;br&gt;operator&lt;/td&gt;
    &lt;td&gt;Repeat the list for n times and returns a new list&lt;/td&gt;
    &lt;td&gt;a*2&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 25, 30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;+ Concatenation&lt;br&gt;operator&lt;/td&gt;
    &lt;td&gt;Concatenates two lists, and returns a new list&lt;/td&gt;
    &lt;td&gt;a+b&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 100, 300, 500, 200, 250]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;index()&lt;/td&gt;
    &lt;td&gt;Finds index of a particular element in the list or not&lt;/td&gt;
    &lt;td&gt;a.index(25)&lt;br&gt;a.index(0)&lt;br&gt;&lt;/td&gt;
    &lt;td&gt;0&lt;br&gt;&lt;br&gt;ValueError: 0 is not in list&lt;br&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;in operator&lt;/td&gt;
    &lt;td&gt;Finds whether a particular element is in the list or not, returns boolean&lt;/td&gt;
    &lt;td&gt;25 in a&lt;/td&gt;
    &lt;td&gt;True&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;not in operator&lt;/td&gt;
    &lt;td&gt;Checks if element is not available in list, returns boolean&lt;/td&gt;
    &lt;td&gt;25 not in a&lt;/td&gt;
    &lt;td&gt;False&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;count()&lt;/td&gt;
    &lt;td&gt;Counts the number of occurence of an element in the list&lt;/td&gt;
    &lt;td&gt;a.count(25)&lt;/td&gt;
    &lt;td&gt;1&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;remove()&lt;/td&gt;
    &lt;td&gt;Removes an element from the list&lt;/td&gt;
    &lt;td&gt;a.remove(25)&lt;/td&gt;
    &lt;td&gt; [30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;pop()&lt;/td&gt;
    &lt;td&gt;Delete and return item at index 0&lt;/td&gt;
    &lt;td&gt;a.pop(0)&lt;/td&gt;
    &lt;td&gt;25 , a will be [30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;del&lt;/td&gt;
    &lt;td&gt;Deletes item at a particular index from the list&lt;/td&gt;
    &lt;td&gt;del a[0]&lt;/td&gt;
    &lt;td&gt;[30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;

==Printing the List==
=== Print whole list ===
A list can be printed simply or using a ''for / while'' loop 

 print(List_2)     # To print the entire list
This code will print      
 ['Kala','Mala']     

===Print element at a particular index===
&lt;pre&gt;
Using index position
    List_2[0]     # prints 'Kala' ,i.e,the value at index position 0.
    List_2[1]     # prints 'Mala'.
&lt;/pre&gt;
=== Without using index position ===
&lt;pre&gt;
for item in List_2:   # here item is a variable used to access elements in list.
       print(item)
   This code snippet prints 
    Kala
    Mala
&lt;/pre&gt;

==Search for a particular element in list==
Elements in a list can be searched by one of the two ways:
=== using index() function===
&lt;pre&gt;
ages1 = [11,23,12,23,45]

#if element is available in the list, index() returns the index value on which, the element is present.
print(ages1.index(45))#Output: 4

#if element is not available in the list, index() returns ''ValueError''
print(ages1.index(0))#Output: ValueError:
&lt;/pre&gt;

In programming, if such error occurs, program gets terminated. It can be solved using exception handling.
e.g.
&lt;pre&gt;
ages1 = [11,23,12,23,45]

try:
    print(ages1.index(0))
except ValueError:
    print(&quot;Exception has occured&quot;)    
    print(&quot;Element is not found in the list&quot;)

&lt;/pre&gt;
&lt;pre&gt;
'''Output: 
Exception has occured
Element is not found in the list
'''&lt;/pre&gt;

=== using 'in' operator===
''in'' operator is used to check whether a particular element is available in the list or not.e.g.

&lt;pre&gt;
ages1 = [11,23,12,23,45]
no=11

if no in ages1:
    print(&quot;no is there in the list&quot;)
else:    
    print(&quot;no is NOT there in the list&quot;)
&lt;/pre&gt;
&lt;pre&gt;
#Output: no is there in the list
&lt;/pre&gt;

'''Number is not there in the list'''
&lt;pre&gt;
ages1 = [11,23,12,23,45]
no=15

if no in ages1:
    print(&quot;no is there in the list&quot;)
else:    
    print(&quot;no is NOT there in the list&quot;)
&lt;/pre&gt;
&lt;pre&gt;
Output: no is NOT there in the list
&lt;/pre&gt;


==Updating the List==
The lists can be updated using ''append'' or ''insert'' function.  Append adds the element to the end of the list and Insert adds the element in the specified position.
   List_2.append(&quot;Sheela&quot;)    # add the element 'Sheela' to the end of the list.
   print (List_2) will output 
   ['Kala', 'Mala', 'Sheela']
   
   List_2.insert(1,&quot;Bala&quot;)    # add the element &quot;Bala&quot; in the list at the index 1.
   print (List_2) will output 
   ['Kala', 'Bala','Mala', 'Sheela']

=== Extend the list by adding elements of other list at end using extend()===
&lt;pre&gt;
ages = [11,23,12,23,45]
ages.extend([57,58])
print(ages)
&lt;/pre&gt;

&lt;pre&gt;
#Output: [11, 23, 12, 23, 45, 57, 58]
&lt;/pre&gt;

==== Difference between ''append and extend'' ====
Difference between append and extend can be easily understood, by the following example.

&lt;pre&gt;
appendlist = [11,23,12,23,45]
appendlist.append([57,58])

extendlist= [11,23,12,23,45]
extendlist.extend([57,58])
&lt;/pre&gt;

&lt;pre&gt;
'''Output:
[11, 23, 12, 23, 45, [57, 58]]
[11, 23, 12, 23, 45, 57, 58]'''
&lt;/pre&gt;

==Basic Operations on List==
===Frequency of Occurrence===
list.count(object) will return the number of times the object occur in the list.
  '''Example'''
    ages = [11,23,12,23,45,43,22,24,23]
    ages.count(23) will return
    3
    ages.count(100) will return
    0

===Length of the List===
len(list) will return the length of the list ie. the number of objects in the list.
  '''Example'''
    ages = [11,23,12,23,45,43,22,24,23]
    len(ages) will output
    9
To print the objects in the list either use ''for item in list'' or ''for index in range(len(list))''
    for item in ages:       
        print (item)  
        (OR)
    for index in range(len(ages)) :
        print (ages[index])
===Sort the List===
list.sort() will sort the list in ascending order
  '''Example'''
    ages = [11,23,12,23,45,43,22,24,23]
    ages.sort() 
    print (ages) 
    [11, 12, 22, 23, 23, 23, 24, 43, 45]
===Sort the List using sorted() function===
sorted(list1) will sort the list and return a new list, it doesn't modify the original list
&lt;br&gt;'''Example: Sort in ascending order'''
&lt;pre&gt;
ages = [11,23,12,23,45,43,22,24,23]
newList=sorted(ages)
print(newList)

#Output: [11, 12, 22, 23, 23, 23, 24, 43, 45]
&lt;/pre&gt;

&lt;br&gt;'''Example: Sort in descending order'''
&lt;pre&gt;
ages = [11,23,12,23,45,43,22,24,23]
newList=sorted(ages,reverse=True)
print(newList)

#Output: [45, 43, 24, 23, 23, 23, 22, 12, 11]
&lt;/pre&gt;

===Reverse the List===
list.reverse() will reverse the original list
  '''Example'''
    ages = [11, 12, 22, 23, 23, 23, 24, 43, 45]
    ages.reverse()
    print (ages)
    [45, 43, 24, 23, 23, 23, 22, 12, 11]

Both sort() and reverse() list operation will work on numeric and alphanumeric data list.

A special use of the reverse() function is to descend a list that is sorted in ascending order.

  '''Example'''
&lt;pre&gt;
ages = [11, 12, 22, 23, 23, 23, 24, 43, 45]
ages.sort()
print(ages)
ages.reverse()
print(ages)
&lt;/pre&gt;

===Slicing===
Used to retrieve an object or objects in a range as a list  
  '''Example'''
Use ''list[index]'' to retrieve the object at the given index
         In [1]: student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
         In [2]: student[3]     #Object at index 3.  Remember index starts at 0
         Out[2]: 'Geetha'      


Use ''list[start_index : end_index + 1]'' to retrieve objects from the start_index to end_index 
         In [3]: student[2:4]     # Objects from index 2 to 3 as List. Note the [ and ]
         Out[3]: ['Vijay', 'Geetha']   


Use ''list[:]'' to retrieve objects from the starting of the list to the end of the list. 
The default start value will be the starting index of the list (i.e. 0) and the default end value
will be the length of the list 
         In [4]: student[:]        # prints the entire list
         Out[4]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma', 'Janani']


         In [5]: student[:5]       # prints the objects from the start of the list upto object at index 4
         Out[5]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran']


         In [6]: student[2:]       # prints the objects from index 2 upto the end of the list
         Out[6]: ['Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma', 'Janani']


Negative index too is available in Python. It starts from last element of the list. i.e.

         In [7]:student[-1]        #prints last index of list
         Out[7]: 'Janani'


         In [8]:student[-1:-8]     #prints empty list
         Out[8]: []


         In [9]:student[-8:-1]     #prints -8th index to -1st index elements
         Out[9]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma']

===Removing Item from list ===
----

Is used to remove a specific item from the list.

'''Example:'''
 
Use list.remove(entry/value)  Or   del list[index]    Or list.pop(index)
         student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
         student.remove(&quot;Arun&quot;)   #This will delete item &quot;Arun&quot;
         Or    
         del student[0]           # This will delete item at index 0
         Or
         student.pop(0)         # This will delete and return item at index 0


         print(student)    
         Output: [&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]

===Delete list ===
----
Used to delete complete list

'''Example'''

Use del &lt;list name&gt;
         student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
         del student

===Concatenation of two lists===
----
''+'' is the concatenation operator which is used concatenate two lists. 
&lt;pre&gt;
ages1 = [11,23,12,23,45]
ages2 = [25, 24, 43, 47]
age=ages1+ages2
print(age)
#Output: [11, 23, 12, 23, 45, 25, 24, 43, 47]
&lt;/pre&gt;

===Repeatation of a list ===
----
''*'' is the operator to repeat a particular list.
&lt;pre&gt;
ages1 = [11,23,12,23,45]
age=ages1*5 #ages1 list is repeated 5 times and stroed in ''age'' list
print(age)

#Output: [11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45]
&lt;/pre&gt;
====Conditional Statements====
    Conditionals are used to check the condition and change the flow of the program 
accordingly. They are realized in programming languages through if statement. The 
syntax is as follows :
         if condition : 
            statement
    '''Note:''' Do not forget indentation (inserting space/tab) in the line after the
 if condition.
    
    In case you want to execute a set of statements when a condition is true and another

set of statement when the condition is false.
         if condition : 
            statement 1
         else :
            statement 2
    
    Multiple if-else statements can be written as follows:
         if condition_1 : 
            statement 1
         elif condition_2 : # 'elif' is short for 'else if'
            statement 2
         elif condition_3 :
            statement 3
        .
        .
         else :
            final statement

=Loops and Conditionals : Fizzbuzz=
====Loops====

    Loops are used to execute a set of repetitive statements. They are realized
 through 'while' and 'for' loops in programming languages. The syntax of 'for' loop is 
as follows :
        for LOOPVARIABLE in SEQUENCE: 
            STATEMENTS
    '''e.g.''' to print all the data from a list we can write:
        for item in list_name
            print(item)
    OR
        for index in range(len(list_name))
            print(list_name[index])
    
    The syntax for while loop is as follows :
    
        while BOOLEANEXPRESSION: 
            STATEMENTS
            INCREMENT/DECREMENT
    
    '''e.g.''' if we want to print all numbers from 1 to 10
        i=1
        while i&lt;=10 :
            print(i,&quot; &quot;)
            i=i+1
    
    'while' loop has indefinite iteration (run-time unknown). So, there must be loop
 break statement in it.
 Whereas 'for' loop is definite in nature (i.e. known or predictable span).&lt;br&gt;

&lt;b&gt;NOTE: Python doesn't have anything like do-while loop.&lt;/b&gt;

==Implementation==
Here, we try to demonstrate the concept of loops and conditionals through a game called Fizzbuzz. The rules are as follows :&lt;br/&gt;
[[File:fizzBuzz.gif]]

• if input number is a multiple of ’3’ print ”Fizz”
&lt;br/&gt;
• if input number is a multiple of ’5’ print ”Buzz”
&lt;br/&gt;
• if input number is a multiple of both '3' and ’5’ print ”FizzBuzz”
&lt;br/&gt;
The pseudo code is as follows :
&lt;pre&gt;
   If input no % 3 == 0 and  input no % 5 == 0 : 
       print ”Fizzbuzz”
   else if input no % 3 == 0 : 
       print ”Fizz”
   else if input no % 5 == 0 : 
       print ”Buzz”
   else :
       print the input no
&lt;/pre&gt;
The order of statements execution matters to get the desired output. The highest priority condition should be first followed by other. In fizzbuzz programming, first checking should be done for both divisibility of 3 and 5. If condition not satisfied only then it should check individually for 3 or 5. So carefully choosing the order is crucial for better programming.
Note: There is some effect of present condition statements chosen on next conditions statements. That is why in first attempt fizzbuzz programming got struck.

Example: 
&lt;pre&gt;
#Code to achieve the above requirement in python3.
i = int(input(&quot;Enter the number&quot;)) 
if i%3 == 0 and i%5 == 0: print(i,&quot;FizzBuzz&quot;)  
elif i%5 == 0: print(i,&quot;Buzz&quot;)
elif i%3 == 0: print(i,&quot;Fizz&quot;)
else: print(i)
&lt;/pre&gt;
Lets put the same into a loop for a range given by the user.
&lt;pre&gt;
def fizzbuzzgame(start,stop):
    for i in range(start,stop+1):
        if i%3 == 0 and i%5 == 0:
            print(i,&quot;FizzBuzz&quot;)
        elif i%5 == 0:
            print(i,&quot;Buzz&quot;)
        elif i%3 == 0:
            print(i,&quot;Fizz&quot;)
        else: print(i)

fizzbuzzgame(50,100)
&lt;/pre&gt;


=== Fizz Buzz game in Interactive mode with Score ===
'''By Ms. Ami Tusharkant Choksi'''
&lt;pre&gt;
def fizzbuzzgame(i):
        if i%3 == 0 and i%5 == 0:
            print(i,&quot;FizzBuzz&quot;)
            return(&quot;fzbz&quot;)
        elif i%5 == 0:
            print(i,&quot;Buzz&quot;)
            return(&quot;bz&quot;)
        elif i%3 == 0:
            print(i,&quot;Fizz&quot;)
            return(&quot;fz&quot;)
        else:
            print(i)
            return(&quot;no&quot;)

ch = 'y'
fizzbuzz=0
fizz=0
buzz=0
nothing=0
print(&quot;&quot;&quot;
 _____  ____  _____  _____  ____   __ __  _____  _____       ____   ____  ___ ___    ___ 
|     ||    ||     ||     ||    \ |  |  ||     ||     |     /    | /    ||   |   |  /  _]
|   __| |  | |__/  ||__/  ||  o  )|  |  ||__/  ||__/  |    |   __||  o  || _   _ | /  [_ 
|  |_   |  | |   __||   __||     ||  |  ||   __||   __|    |  |  ||     ||  \_/  ||    _]
|   _]  |  | |  /  ||  /  ||  O  ||  :  ||  /  ||  /  |    |  |_ ||  _  ||   |   ||   [_ 
|  |    |  | |     ||     ||     ||     ||     ||     |    |     ||  |  ||   |   ||     |
|__|   |____||_____||_____||_____| \__,_||_____||_____|    |___,_||__|__||___|___||_____|
                                                                                         
&quot;&quot;&quot;)   

while(ch == 'y'):
    n=int(input(&quot;Enter a Number : &quot;))
    winLoose=fizzbuzzgame(n)
    if(winLoose == &quot;fz&quot;):
        fizz+=1
    elif(winLoose == &quot;bz&quot;):
        buzz+=1
    elif(winLoose == &quot;fzbz&quot;):
        fizzbuzz+=1
    ch=input(&quot;Do you want to continue playing the game : (y/n)&quot;)
    if(ch=='n'):
        print('Congratulations, your score is\n FizzBuzz:%d\nFizz:%d\nBuzz:%d' %
(fizzbuzz,fizz,buzz))
    
'''Sample Output:

 _____  ____  _____  _____  ____   __ __  _____  _____       ____   ____  ___ ___    ___ 
|     ||    ||     ||     ||    \ |  |  ||     ||     |     /    | /    ||   |   |  /  _]
|   __| |  | |__/  ||__/  ||  o  )|  |  ||__/  ||__/  |    |   __||  o  || _   _ | /  [_ 
|  |_   |  | |   __||   __||     ||  |  ||   __||   __|    |  |  ||     ||  \_/  ||    _]
|   _]  |  | |  /  ||  /  ||  O  ||  :  ||  /  ||  /  |    |  |_ ||  _  ||   |   ||   [_ 
|  |    |  | |     ||     ||     ||     ||     ||     |    |     ||  |  ||   |   ||     |
|__|   |____||_____||_____||_____| \__,_||_____||_____|    |___,_||__|__||___|___||_____|
                                                                                         

Enter a Number : 666
666 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 777
777 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 555
555 FizzBuzz
Do you want to continue playing the game : (y/n)y
Enter a Number : 1
1
Do you want to continue playing the game : (y/n)y
Enter a Number : 789
789 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 25
25 Buzz
Do you want to continue playing the game : (y/n)n
Congratulations, your score is

FizzBuzz:1
Fizz:3
Buzz:1

&lt;/pre&gt;

=Crowd Computing: Just Estimate=
==Wisdom of Crowds==
The concept of ’Wisdom of Crowds’ was proposed by Francis Galton. A weight-judging competition was carried on at the annual show of the West of England Fat Stock and Poultry Exhibition recently held at Plymouth, A fat ox having been selected, competitors bought stamped and numbered cards, each, on which to inscribe their respective names, addresses, and estimates of what the ox would weigh after it had been slaughtered. Those who guessed most successfully received prizes. About 8oo tickets were issued to the par- ticipants. The middlemost estimate of all the estimates recorded was 1207 lbs and the actual weight of the ox was 1198 lbs.

==Our Experiment==
The crowd had to guess the number of candies/gems in a jar. Around 75 people participated in the experiment. The actual number of gems in the jar were 375. The median of all estimates came out to be 300 and the mean of all the estimates came out to be around 396. Median underestimated and mean overestimated the actual value. So according to recent studies, Trimmed mean must be used as an aggregate measure to estimate where Wisdom of Crowds is involved.
[[File:Gemsjar.jpg|center|200px|caption]]

===Trimmed Mean===
In these kinds of experiments, 10% trimmed mean is usually followed. For calculating 10% trimmed mean, remove 10% smallest and 10% largest values from the sample. Calculate the mean of the sample obtained. In the above experiment, the trimmed mean came out to be around 351 which is very close to the actual value.

==Implementation==
Here, we try to demonstrate the concept of trimmed mean through crowd computing.
 Input a list of estimates done by the crowd .
 Sort the list.
 Remove the 10% smallest values.
 Remove the 10% largest values.
 Calculate the mean of the new list obtained .&lt;hr&gt;

==Data of Experiment==       
    Estimates =[1000,1010,1786,2000,1500,1500,100,120,150,150,150,170,175,180,197,200,200,200,200,200,200,220,220,220,220,234,250,250,250,250,250,250,250,250,250,263,270,275,275,286,300,
                300,300,300,300,300,300,300,320,350,350,350,400, 400,400,400,400,450,467,500,500,500,500,500,500,500,550,550,600,600,600,650,700,700,720]

    '''CODE:'''
&lt;pre&gt;
Estimates = [1000,1010,1786,2000,1500,1500,100,120,150,150,150,170,175,180,197,200,200,200,200,200,200,220,220,220,220,234,250,250,250,250,250,250,250,250,250,263,270,275,275,286,300,                300,300,300,300,300,300,300,320,350,350,350,400,400,400,400,400,450,467,500,500,500,500,500,500,500,550,550,600,600,600,650,700,700,720]
Estimates.sort()
offset = int(0.10*len(Estimates))
for i in range(offset):
       del Estimates[0]
       del Estimates[-1]
Sum = 0    
for i in range(len(Estimates)):
       Sum += Estimates[i]
Mean_Value = Sum/len(Estimates)
print(&quot;Mean : &quot;, int(Mean_Value))
#Output:
Mean :  351
&lt;/pre&gt;
&lt;hr&gt;
==Trimmed Mean for the above example== 
&lt;h3&gt;Using scipy library&lt;/h3&gt;
&lt;pre&gt;
#import scipy to use the method of trim_mean
from scipy import stats
trimMean = stats.trim_mean(Estimates, 0.1) # Trim 10% at both ends
print(&quot;Trimmed Mean : &quot;,trimMean)
#Output:
Trimmed Mean :  335.1020408163265
&lt;/pre&gt;

&lt;h3&gt;Without using scipy library&lt;/h3&gt;
&lt;pre&gt;
#Trimmed mean with 10%
p=10/100
#sorted data
data=[2, 4, 6, 7, 11, 21, 81, 90, 105, 121]
n = len(data)
#Remove elements from both end
rem=int(n*p)
newData = data[rem:-rem]
mean = 0
for i in newData:
    mean += i
mean = int(mean/len(newData))
print(&quot;Trimmed mean : &quot;,mean)
#Output: Trimmed mean :  40
&lt;/pre&gt;
[[#Top]]

=Jumbled_Words Permutations: Jumbled Words=
==What are Permutations ?==
A permutation also called ordering of selected number of elements from a list denoted by nPr here we are choosing all elements of a list and so n=r&lt;br&gt;
nPr=n!/(n-r)!&lt;br&gt; as n=r
nPn=n!&lt;br&gt; which gives all possible arrangement of elements present in a list.

 For example, permutations of list [1,2,3] are [1,2,3], [1,3,2], [2,1,3], [2,3,1], 
[3,1,2], and [3,2,1]. 
The number of permutations of a list of elements nPn is given by n!. For example, there are 2! = 2 x 1 = 2 permutations of [1,2], namely [1,2] and [2,1], and 3! = 3 x 2 x 1 = 6 permutations of [1,2,3], as mentioned above.&lt;br/&gt;
[[File:Permutations.jpg]]

==Implementation==
Here, we try to demonstrate the concept of permutations through jumbled words. It is a two player game in which one person presents the other person a different permutation of the word in his mind. The other person has to guess the right word. If he guesses, the he wins otherwise he loses.
 Input an list of words.
 Randomly pick a word from the list of words .
 Shuffle this word and present it to the other player.
 if word guesses by the player is same as the one picked from list of w
     player wins
 else
     player loses

ALTERNATE CODE TO GENERATE THIS GAME:
&lt;pre&gt;
import random
p1=input(&quot;enter player 1 name:&quot;)
p2=input(&quot;enter player 2 name:&quot;)
l=[&quot;rainbow&quot;,&quot;computer&quot;,&quot;robot&quot;,&quot;butter&quot;,&quot;vegetable&quot;,&quot;science&quot;,&quot;correct&quot;]
c1=c2=a1=a2=f1=f2=0
k=1
i=3
def play():
    n=random.choice(l)        ##n=chooses a word from list l
    l1=[]
    for j in n:
       l1.append(j)      ##creates a list for word in n
    for t in range(len(l1)):
       p=random.choice(l1)     ##this randomly displays letters in the list
       print(p)
       l1.remove(p)          ##to avoid the repetition of a letter
    s=input(&quot;enter the word:&quot;)
    if(s==n):
        print(&quot;correct&quot;)
        return 1
    else:
        print(&quot;not correct&quot;)
        print(&quot;answer is&quot;,n)
        return 0
def stat():
     print(&quot;player 1:&quot;)
     print(&quot;score:&quot;,c1)
     print(&quot;answered:&quot;,a1)
     print(&quot;failed:&quot;,f1)
     print(&quot;.............&quot;)
     print(&quot;player 2:&quot;)
     print(&quot;score:&quot;,c2)
     print(&quot;answered:&quot;,a2)
     print(&quot;failed&quot;,f2)
     if(c1&gt;c2):
         print(p1,&quot; won over &quot;,p2)
     elif(c1==c2):
         print(&quot;draw game&quot;)
     else:
         print(p2,&quot; won over &quot;,p1) 
while(i!=4):
      if(i==3):
         if(k==1):
             print(&quot;player 1 turn&quot;)
             print(&quot;your jumbled word is:&quot;)
             k=k+1
             m=play()
             if(m==1):      ##if guessed answer is correct,then score and no.of answered count will be increased
                c1+=1
                a1+=1
             else:
                f1+=1       ##else count of no.of failed to answered will be incremented
         else:
             print(&quot;player 2 turn&quot;)
             print(&quot;your jumbled word is:&quot;)
             k=k-1
             m=play()
             if(m==1):
                c2=c2+1
                a2=a2+1
             else:
                f2=f2+1
       if(i==2):
             print(&quot;present status&quot;)
             stat()
       i=int(input(&quot;enter your choice  1.stop 2.status 3.continue&quot;))
       if(i==1):
             stat()
             i=i+3
&lt;/pre&gt;
&lt;hr&gt;
=== JumbledWord Simple Logic, In Short ===
[[File:jumbledWord.gif]]
&lt;hr&gt;
'''Logic to create a Jumbled Word'''
&lt;hr&gt;
&lt;pre&gt;
#Get Jumbled Word and print it Horizontally
import random

def getJumbledWord(b):
    jumble=''
    l1 = [ b[i] for i in range(0, len(b)) ]
    for t in range(len(l1)):
       p=random.choice(l1)     ##this randomly gets letters from the list      
       jumble=jumble+p       
       l1.remove(p)
    return jumble

b=input(&quot;Enter a word to make it jumbled : &quot;)
print(&quot;Jumbled Word : &quot;, getJumbledWord(b))
&lt;/pre&gt;
&lt;hr&gt;
'''Another Logic to create a Jumbled Word'''
&lt;hr&gt;
&lt;pre&gt;
b=input(&quot;Enter a word to make it jumbled : &quot;)

def getJumbledWord1(b):
    l1 = [ b[i] for i in range(0, len(b)) ]
    random.shuffle(l1)
    str1 = ''.join(l1)
    return str1

print(&quot;Jumbled Word : &quot;, getJumbledWord1(b))
&lt;/pre&gt;

====Sample Output:====
&lt;pre&gt;
---- Output1 
Enter a word to make it jumbled : butter
Jumbled Word :  tbture

---- Output2 
Enter a word to make it jumbled : petriotism
Jumbled Word :  pittrosime
&lt;/pre&gt;

=Theory of Evolution=

== What is Evolution ? ==
Evolution is the change in heritable characteristics over successive generations. The theory of evolution explains that DNA, which acts as a carrier of genetic information from one generation to other, tends to change or mutate occasionally. These changes are reflected in next generations to come. This is how life has evolved on earth from bacteria to human beings.&lt;br&gt;
[[File:Evolution.png|500px]]

== Implementation ==
An array representing DNA is stored in a file. As genes are forms of DNA, they contain information to be transferred to forthcoming generations. Assume that information is in the form of bits (in the form of 0s and 1s). A number is picked randomly from 1 to the size of the array. A new parameter has been introduced which decides whether mutation would occur or not. If the value of this new parameter is 1 (It is picked randomly from 1 to 100), then only change is reflected down the generations, otherwise it is not. The pseudo code is as follows :
Input an array containing genetic information .
Randomly generate a number (say m) from 1 to length of the array. Randomly generate other number (say p) from 1 to 100.
 
    if p is equal to 1 then 
        if m is 1 then
          set it to 0
        else
          set it to 1</text>
      <sha1>7r9pn4z3506d7how85xi8xynj6kgjh1</sha1>
    </revision>
    <revision>
      <id>3481</id>
      <parentid>3480</parentid>
      <timestamp>2018-09-27T13:09:01Z</timestamp>
      <contributor>
        <username>Sachinkr</username>
        <id>1743</id>
      </contributor>
      <comment>/* List Creation */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="28122">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_3 Contributors of this page]
*Week 3 Playlist: https://www.youtube.com/playlist?list=PLc_j0TNIaWxOVx_z9jAM2UB3RqYNXaoEo
=List=
List is a flexible data structure used for storing a group of data separated by comma. The elements in a list need not be of the same data type.

'''Example:'''
       List_1 = [ 1, 2,3] or 
       List_1 = [&quot;coffee&quot;, &quot;Tea&quot;, &quot;Milk&quot;] or
       List_1 = [1,&quot;coffee&quot;, &quot;Tea&quot;, 3, &quot;5&quot;]

==List Creation==
&lt;pre&gt;a) A list can be created by simply putting values (separated by comma) between square brackets as given below,
       List_1 = [1,&quot;coffee&quot;, &quot;Tea&quot;, 3, &quot;5&quot;] #this creates a list by name List_1 containing following items


Or,
(b)A List can be created from scratch and elements can be added 
        List_2 = [ ]
        List_2.append(&quot;Kala&quot;)
        List_2.append(&quot;Mala&quot;)
Here we use &quot;append&quot; ,which is a function in python that enable us to append or attach an element to a list .
Thus List_2 will now hold [&quot;Kala&quot;,&quot;Mala&quot;]
&lt;/pre&gt;
[[#TOP]]

==Operations and Methods to work with List==
&lt;pre&gt;
a = [25,30,50,90,12,13]
b = [100,300,500,200,250]
&lt;/pre&gt;
&lt;hr&gt;
&lt;table border=2&gt;
  &lt;tr&gt;
    &lt;th&gt;&lt;b&gt;Method/&lt;br&gt;Operator&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Function&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Syntax&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Output&lt;/b&gt;&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;len()&lt;/td&gt;
    &lt;td&gt;Find length of a list&lt;/td&gt;
    &lt;td&gt;len(a)&lt;/td&gt;
    &lt;td&gt;6&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;max()&lt;/td&gt;
    &lt;td&gt;Find maximum element from the list&lt;/td&gt;
    &lt;td&gt;max(a)&lt;/td&gt;
    &lt;td&gt;90&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;min()&lt;/td&gt;
    &lt;td&gt;Find minimum element from the list&lt;/td&gt;
    &lt;td&gt;min(a)&lt;/td&gt;
    &lt;td&gt;12&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sum()&lt;/td&gt;
    &lt;td&gt;Returns sum of all elements of the list&lt;/td&gt;
    &lt;td&gt;sum(a)&lt;/td&gt;
    &lt;td&gt;220&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;reverse()&lt;/td&gt;
    &lt;td&gt;Reverses the original list&lt;/td&gt;
    &lt;td&gt;a.reverse()&lt;/td&gt;
    &lt;td&gt;[13, 12, 90, 50, 30, 25]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sort()&lt;/td&gt;
    &lt;td&gt;Sorts the original list in ascending order&lt;/td&gt;
    &lt;td&gt;a.sort()&lt;/td&gt;
    &lt;td&gt;[12, 13, 25, 30, 50, 90]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sorted()&lt;/td&gt;
    &lt;td&gt;Returns the new sorted list &lt;/td&gt;
    &lt;td&gt;sorted(a)&lt;/td&gt;
    &lt;td&gt;[12, 13, 25, 30, 50, 90]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;insert()&lt;/td&gt;
    &lt;td&gt;Insert at a particular index in the list, and shifts remaining elements&lt;/td&gt;
    &lt;td&gt;a.insert(3,3)&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 3, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;append()&lt;/td&gt;
    &lt;td&gt;Adds elements/object to the end of the list&lt;/td&gt;
    &lt;td&gt;a.append(5)&lt;br&gt;a.append([10,20])&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 5]&lt;br&gt;[25, 30, 50, 90, 12, 13, [10, 20]]&lt;br&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;extend()&lt;/td&gt;
    &lt;td&gt;Adds object to the end of the list as elements not as object&lt;/td&gt;
    &lt;td&gt;a.extend([10,20])&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 10, 20]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;*&amp;nbsp;&amp;nbsp;Repeatation&lt;br&gt;operator&lt;/td&gt;
    &lt;td&gt;Repeat the list for n times and returns a new list&lt;/td&gt;
    &lt;td&gt;a*2&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 25, 30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;+ Concatenation&lt;br&gt;operator&lt;/td&gt;
    &lt;td&gt;Concatenates two lists, and returns a new list&lt;/td&gt;
    &lt;td&gt;a+b&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 100, 300, 500, 200, 250]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;index()&lt;/td&gt;
    &lt;td&gt;Finds index of a particular element in the list or not&lt;/td&gt;
    &lt;td&gt;a.index(25)&lt;br&gt;a.index(0)&lt;br&gt;&lt;/td&gt;
    &lt;td&gt;0&lt;br&gt;&lt;br&gt;ValueError: 0 is not in list&lt;br&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;in operator&lt;/td&gt;
    &lt;td&gt;Finds whether a particular element is in the list or not, returns boolean&lt;/td&gt;
    &lt;td&gt;25 in a&lt;/td&gt;
    &lt;td&gt;True&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;not in operator&lt;/td&gt;
    &lt;td&gt;Checks if element is not available in list, returns boolean&lt;/td&gt;
    &lt;td&gt;25 not in a&lt;/td&gt;
    &lt;td&gt;False&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;count()&lt;/td&gt;
    &lt;td&gt;Counts the number of occurence of an element in the list&lt;/td&gt;
    &lt;td&gt;a.count(25)&lt;/td&gt;
    &lt;td&gt;1&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;remove()&lt;/td&gt;
    &lt;td&gt;Removes an element from the list&lt;/td&gt;
    &lt;td&gt;a.remove(25)&lt;/td&gt;
    &lt;td&gt; [30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;pop()&lt;/td&gt;
    &lt;td&gt;Delete and return item at index 0&lt;/td&gt;
    &lt;td&gt;a.pop(0)&lt;/td&gt;
    &lt;td&gt;25 , a will be [30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;del&lt;/td&gt;
    &lt;td&gt;Deletes item at a particular index from the list&lt;/td&gt;
    &lt;td&gt;del a[0]&lt;/td&gt;
    &lt;td&gt;[30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;

==Printing the List==
=== Print whole list ===
A list can be printed simply or using a ''for / while'' loop 

 print(List_2)     # To print the entire list
This code will print      
 ['Kala','Mala']     

===Print element at a particular index===
&lt;pre&gt;
Using index position
    List_2[0]     # prints 'Kala' ,i.e,the value at index position 0.
    List_2[1]     # prints 'Mala'.
&lt;/pre&gt;
=== Without using index position ===
&lt;pre&gt;
for item in List_2:   # here item is a variable used to access elements in list.
       print(item)
   This code snippet prints 
    Kala
    Mala
&lt;/pre&gt;

==Search for a particular element in list==
Elements in a list can be searched by one of the two ways:
=== using index() function===
&lt;pre&gt;
ages1 = [11,23,12,23,45]

#if element is available in the list, index() returns the index value on which, the element is present.
print(ages1.index(45))#Output: 4

#if element is not available in the list, index() returns ''ValueError''
print(ages1.index(0))#Output: ValueError:
&lt;/pre&gt;

In programming, if such error occurs, program gets terminated. It can be solved using exception handling.
e.g.
&lt;pre&gt;
ages1 = [11,23,12,23,45]

try:
    print(ages1.index(0))
except ValueError:
    print(&quot;Exception has occured&quot;)    
    print(&quot;Element is not found in the list&quot;)

&lt;/pre&gt;
&lt;pre&gt;
'''Output: 
Exception has occured
Element is not found in the list
'''&lt;/pre&gt;

=== using 'in' operator===
''in'' operator is used to check whether a particular element is available in the list or not.e.g.

&lt;pre&gt;
ages1 = [11,23,12,23,45]
no=11

if no in ages1:
    print(&quot;no is there in the list&quot;)
else:    
    print(&quot;no is NOT there in the list&quot;)
&lt;/pre&gt;
&lt;pre&gt;
#Output: no is there in the list
&lt;/pre&gt;

'''Number is not there in the list'''
&lt;pre&gt;
ages1 = [11,23,12,23,45]
no=15

if no in ages1:
    print(&quot;no is there in the list&quot;)
else:    
    print(&quot;no is NOT there in the list&quot;)
&lt;/pre&gt;
&lt;pre&gt;
Output: no is NOT there in the list
&lt;/pre&gt;


==Updating the List==
The lists can be updated using ''append'' or ''insert'' function.  Append adds the element to the end of the list and Insert adds the element in the specified position.
   List_2.append(&quot;Sheela&quot;)    # add the element 'Sheela' to the end of the list.
   print (List_2) will output 
   ['Kala', 'Mala', 'Sheela']
   
   List_2.insert(1,&quot;Bala&quot;)    # add the element &quot;Bala&quot; in the list at the index 1.
   print (List_2) will output 
   ['Kala', 'Bala','Mala', 'Sheela']

=== Extend the list by adding elements of other list at end using extend()===
&lt;pre&gt;
ages = [11,23,12,23,45]
ages.extend([57,58])
print(ages)
&lt;/pre&gt;

&lt;pre&gt;
#Output: [11, 23, 12, 23, 45, 57, 58]
&lt;/pre&gt;

==== Difference between ''append and extend'' ====
Difference between append and extend can be easily understood, by the following example.

&lt;pre&gt;
appendlist = [11,23,12,23,45]
appendlist.append([57,58])

extendlist= [11,23,12,23,45]
extendlist.extend([57,58])
&lt;/pre&gt;

&lt;pre&gt;
'''Output:
[11, 23, 12, 23, 45, [57, 58]]
[11, 23, 12, 23, 45, 57, 58]'''
&lt;/pre&gt;

==Basic Operations on List==
===Frequency of Occurrence===
list.count(object) will return the number of times the object occur in the list.
  '''Example'''
    ages = [11,23,12,23,45,43,22,24,23]
    ages.count(23) will return
    3
    ages.count(100) will return
    0

===Length of the List===
len(list) will return the length of the list ie. the number of objects in the list.
  '''Example'''
    ages = [11,23,12,23,45,43,22,24,23]
    len(ages) will output
    9
To print the objects in the list either use ''for item in list'' or ''for index in range(len(list))''
    for item in ages:       
        print (item)  
        (OR)
    for index in range(len(ages)) :
        print (ages[index])
===Sort the List===
list.sort() will sort the list in ascending order
  '''Example'''
    ages = [11,23,12,23,45,43,22,24,23]
    ages.sort() 
    print (ages) 
    [11, 12, 22, 23, 23, 23, 24, 43, 45]
===Sort the List using sorted() function===
sorted(list1) will sort the list and return a new list, it doesn't modify the original list
&lt;br&gt;'''Example: Sort in ascending order'''
&lt;pre&gt;
ages = [11,23,12,23,45,43,22,24,23]
newList=sorted(ages)
print(newList)

#Output: [11, 12, 22, 23, 23, 23, 24, 43, 45]
&lt;/pre&gt;

&lt;br&gt;'''Example: Sort in descending order'''
&lt;pre&gt;
ages = [11,23,12,23,45,43,22,24,23]
newList=sorted(ages,reverse=True)
print(newList)

#Output: [45, 43, 24, 23, 23, 23, 22, 12, 11]
&lt;/pre&gt;

===Reverse the List===
list.reverse() will reverse the original list
  '''Example'''
    ages = [11, 12, 22, 23, 23, 23, 24, 43, 45]
    ages.reverse()
    print (ages)
    [45, 43, 24, 23, 23, 23, 22, 12, 11]

Both sort() and reverse() list operation will work on numeric and alphanumeric data list.

A special use of the reverse() function is to descend a list that is sorted in ascending order.

  '''Example'''
&lt;pre&gt;
ages = [11, 12, 22, 23, 23, 23, 24, 43, 45]
ages.sort()
print(ages)
ages.reverse()
print(ages)
&lt;/pre&gt;

===Slicing===
Used to retrieve an object or objects in a range as a list  
  '''Example'''
Use ''list[index]'' to retrieve the object at the given index
         In [1]: student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
         In [2]: student[3]     #Object at index 3.  Remember index starts at 0
         Out[2]: 'Geetha'      


Use ''list[start_index : end_index + 1]'' to retrieve objects from the start_index to end_index 
         In [3]: student[2:4]     # Objects from index 2 to 3 as List. Note the [ and ]
         Out[3]: ['Vijay', 'Geetha']   


Use ''list[:]'' to retrieve objects from the starting of the list to the end of the list. 
The default start value will be the starting index of the list (i.e. 0) and the default end value
will be the length of the list 
         In [4]: student[:]        # prints the entire list
         Out[4]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma', 'Janani']


         In [5]: student[:5]       # prints the objects from the start of the list upto object at index 4
         Out[5]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran']


         In [6]: student[2:]       # prints the objects from index 2 upto the end of the list
         Out[6]: ['Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma', 'Janani']


Negative index too is available in Python. It starts from last element of the list. i.e.

         In [7]:student[-1]        #prints last index of list
         Out[7]: 'Janani'


         In [8]:student[-1:-8]     #prints empty list
         Out[8]: []


         In [9]:student[-8:-1]     #prints -8th index to -1st index elements
         Out[9]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma']

===Removing Item from list ===
----

Is used to remove a specific item from the list.

'''Example:'''
 
Use list.remove(entry/value)  Or   del list[index]    Or list.pop(index)
         student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
         student.remove(&quot;Arun&quot;)   #This will delete item &quot;Arun&quot;
         Or    
         del student[0]           # This will delete item at index 0
         Or
         student.pop(0)         # This will delete and return item at index 0


         print(student)    
         Output: [&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]

===Delete list ===
----
Used to delete complete list

'''Example'''

Use del &lt;list name&gt;
         student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
         del student

===Concatenation of two lists===
----
''+'' is the concatenation operator which is used concatenate two lists. 
&lt;pre&gt;
ages1 = [11,23,12,23,45]
ages2 = [25, 24, 43, 47]
age=ages1+ages2
print(age)
#Output: [11, 23, 12, 23, 45, 25, 24, 43, 47]
&lt;/pre&gt;

===Repeatation of a list ===
----
''*'' is the operator to repeat a particular list.
&lt;pre&gt;
ages1 = [11,23,12,23,45]
age=ages1*5 #ages1 list is repeated 5 times and stroed in ''age'' list
print(age)

#Output: [11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45]
&lt;/pre&gt;
====Conditional Statements====
    Conditionals are used to check the condition and change the flow of the program 
accordingly. They are realized in programming languages through if statement. The 
syntax is as follows :
         if condition : 
            statement
    '''Note:''' Do not forget indentation (inserting space/tab) in the line after the
 if condition.
    
    In case you want to execute a set of statements when a condition is true and another

set of statement when the condition is false.
         if condition : 
            statement 1
         else :
            statement 2
    
    Multiple if-else statements can be written as follows:
         if condition_1 : 
            statement 1
         elif condition_2 : # 'elif' is short for 'else if'
            statement 2
         elif condition_3 :
            statement 3
        .
        .
         else :
            final statement

=Loops and Conditionals : Fizzbuzz=
====Loops====

    Loops are used to execute a set of repetitive statements. They are realized
 through 'while' and 'for' loops in programming languages. The syntax of 'for' loop is 
as follows :
        for LOOPVARIABLE in SEQUENCE: 
            STATEMENTS
    '''e.g.''' to print all the data from a list we can write:
        for item in list_name
            print(item)
    OR
        for index in range(len(list_name))
            print(list_name[index])
    
    The syntax for while loop is as follows :
    
        while BOOLEANEXPRESSION: 
            STATEMENTS
            INCREMENT/DECREMENT
    
    '''e.g.''' if we want to print all numbers from 1 to 10
        i=1
        while i&lt;=10 :
            print(i,&quot; &quot;)
            i=i+1
    
    'while' loop has indefinite iteration (run-time unknown). So, there must be loop
 break statement in it.
 Whereas 'for' loop is definite in nature (i.e. known or predictable span).&lt;br&gt;

&lt;b&gt;NOTE: Python doesn't have anything like do-while loop.&lt;/b&gt;

==Implementation==
Here, we try to demonstrate the concept of loops and conditionals through a game called Fizzbuzz. The rules are as follows :&lt;br/&gt;
[[File:fizzBuzz.gif]]

• if input number is a multiple of ’3’ print ”Fizz”
&lt;br/&gt;
• if input number is a multiple of ’5’ print ”Buzz”
&lt;br/&gt;
• if input number is a multiple of both '3' and ’5’ print ”FizzBuzz”
&lt;br/&gt;
The pseudo code is as follows :
&lt;pre&gt;
   If input no % 3 == 0 and  input no % 5 == 0 : 
       print ”Fizzbuzz”
   else if input no % 3 == 0 : 
       print ”Fizz”
   else if input no % 5 == 0 : 
       print ”Buzz”
   else :
       print the input no
&lt;/pre&gt;
The order of statements execution matters to get the desired output. The highest priority condition should be first followed by other. In fizzbuzz programming, first checking should be done for both divisibility of 3 and 5. If condition not satisfied only then it should check individually for 3 or 5. So carefully choosing the order is crucial for better programming.
Note: There is some effect of present condition statements chosen on next conditions statements. That is why in first attempt fizzbuzz programming got struck.

Example: 
&lt;pre&gt;
#Code to achieve the above requirement in python3.
i = int(input(&quot;Enter the number&quot;)) 
if i%3 == 0 and i%5 == 0: print(i,&quot;FizzBuzz&quot;)  
elif i%5 == 0: print(i,&quot;Buzz&quot;)
elif i%3 == 0: print(i,&quot;Fizz&quot;)
else: print(i)
&lt;/pre&gt;
Lets put the same into a loop for a range given by the user.
&lt;pre&gt;
def fizzbuzzgame(start,stop):
    for i in range(start,stop+1):
        if i%3 == 0 and i%5 == 0:
            print(i,&quot;FizzBuzz&quot;)
        elif i%5 == 0:
            print(i,&quot;Buzz&quot;)
        elif i%3 == 0:
            print(i,&quot;Fizz&quot;)
        else: print(i)

fizzbuzzgame(50,100)
&lt;/pre&gt;


=== Fizz Buzz game in Interactive mode with Score ===
'''By Ms. Ami Tusharkant Choksi'''
&lt;pre&gt;
def fizzbuzzgame(i):
        if i%3 == 0 and i%5 == 0:
            print(i,&quot;FizzBuzz&quot;)
            return(&quot;fzbz&quot;)
        elif i%5 == 0:
            print(i,&quot;Buzz&quot;)
            return(&quot;bz&quot;)
        elif i%3 == 0:
            print(i,&quot;Fizz&quot;)
            return(&quot;fz&quot;)
        else:
            print(i)
            return(&quot;no&quot;)

ch = 'y'
fizzbuzz=0
fizz=0
buzz=0
nothing=0
print(&quot;&quot;&quot;
 _____  ____  _____  _____  ____   __ __  _____  _____       ____   ____  ___ ___    ___ 
|     ||    ||     ||     ||    \ |  |  ||     ||     |     /    | /    ||   |   |  /  _]
|   __| |  | |__/  ||__/  ||  o  )|  |  ||__/  ||__/  |    |   __||  o  || _   _ | /  [_ 
|  |_   |  | |   __||   __||     ||  |  ||   __||   __|    |  |  ||     ||  \_/  ||    _]
|   _]  |  | |  /  ||  /  ||  O  ||  :  ||  /  ||  /  |    |  |_ ||  _  ||   |   ||   [_ 
|  |    |  | |     ||     ||     ||     ||     ||     |    |     ||  |  ||   |   ||     |
|__|   |____||_____||_____||_____| \__,_||_____||_____|    |___,_||__|__||___|___||_____|
                                                                                         
&quot;&quot;&quot;)   

while(ch == 'y'):
    n=int(input(&quot;Enter a Number : &quot;))
    winLoose=fizzbuzzgame(n)
    if(winLoose == &quot;fz&quot;):
        fizz+=1
    elif(winLoose == &quot;bz&quot;):
        buzz+=1
    elif(winLoose == &quot;fzbz&quot;):
        fizzbuzz+=1
    ch=input(&quot;Do you want to continue playing the game : (y/n)&quot;)
    if(ch=='n'):
        print('Congratulations, your score is\n FizzBuzz:%d\nFizz:%d\nBuzz:%d' %
(fizzbuzz,fizz,buzz))
    
'''Sample Output:

 _____  ____  _____  _____  ____   __ __  _____  _____       ____   ____  ___ ___    ___ 
|     ||    ||     ||     ||    \ |  |  ||     ||     |     /    | /    ||   |   |  /  _]
|   __| |  | |__/  ||__/  ||  o  )|  |  ||__/  ||__/  |    |   __||  o  || _   _ | /  [_ 
|  |_   |  | |   __||   __||     ||  |  ||   __||   __|    |  |  ||     ||  \_/  ||    _]
|   _]  |  | |  /  ||  /  ||  O  ||  :  ||  /  ||  /  |    |  |_ ||  _  ||   |   ||   [_ 
|  |    |  | |     ||     ||     ||     ||     ||     |    |     ||  |  ||   |   ||     |
|__|   |____||_____||_____||_____| \__,_||_____||_____|    |___,_||__|__||___|___||_____|
                                                                                         

Enter a Number : 666
666 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 777
777 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 555
555 FizzBuzz
Do you want to continue playing the game : (y/n)y
Enter a Number : 1
1
Do you want to continue playing the game : (y/n)y
Enter a Number : 789
789 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 25
25 Buzz
Do you want to continue playing the game : (y/n)n
Congratulations, your score is

FizzBuzz:1
Fizz:3
Buzz:1

&lt;/pre&gt;

=Crowd Computing: Just Estimate=
==Wisdom of Crowds==
The concept of ’Wisdom of Crowds’ was proposed by Francis Galton. A weight-judging competition was carried on at the annual show of the West of England Fat Stock and Poultry Exhibition recently held at Plymouth, A fat ox having been selected, competitors bought stamped and numbered cards, each, on which to inscribe their respective names, addresses, and estimates of what the ox would weigh after it had been slaughtered. Those who guessed most successfully received prizes. About 8oo tickets were issued to the par- ticipants. The middlemost estimate of all the estimates recorded was 1207 lbs and the actual weight of the ox was 1198 lbs.

==Our Experiment==
The crowd had to guess the number of candies/gems in a jar. Around 75 people participated in the experiment. The actual number of gems in the jar were 375. The median of all estimates came out to be 300 and the mean of all the estimates came out to be around 396. Median underestimated and mean overestimated the actual value. So according to recent studies, Trimmed mean must be used as an aggregate measure to estimate where Wisdom of Crowds is involved.
[[File:Gemsjar.jpg|center|200px|caption]]

===Trimmed Mean===
In these kinds of experiments, 10% trimmed mean is usually followed. For calculating 10% trimmed mean, remove 10% smallest and 10% largest values from the sample. Calculate the mean of the sample obtained. In the above experiment, the trimmed mean came out to be around 351 which is very close to the actual value.

==Implementation==
Here, we try to demonstrate the concept of trimmed mean through crowd computing.
 Input a list of estimates done by the crowd .
 Sort the list.
 Remove the 10% smallest values.
 Remove the 10% largest values.
 Calculate the mean of the new list obtained .&lt;hr&gt;

==Data of Experiment==       
    Estimates =[1000,1010,1786,2000,1500,1500,100,120,150,150,150,170,175,180,197,200,200,200,200,200,200,220,220,220,220,234,250,250,250,250,250,250,250,250,250,263,270,275,275,286,300,
                300,300,300,300,300,300,300,320,350,350,350,400, 400,400,400,400,450,467,500,500,500,500,500,500,500,550,550,600,600,600,650,700,700,720]

    '''CODE:'''
&lt;pre&gt;
Estimates = [1000,1010,1786,2000,1500,1500,100,120,150,150,150,170,175,180,197,200,200,200,200,200,200,220,220,220,220,234,250,250,250,250,250,250,250,250,250,263,270,275,275,286,300,                300,300,300,300,300,300,300,320,350,350,350,400,400,400,400,400,450,467,500,500,500,500,500,500,500,550,550,600,600,600,650,700,700,720]
Estimates.sort()
offset = int(0.10*len(Estimates))
for i in range(offset):
       del Estimates[0]
       del Estimates[-1]
Sum = 0    
for i in range(len(Estimates)):
       Sum += Estimates[i]
Mean_Value = Sum/len(Estimates)
print(&quot;Mean : &quot;, int(Mean_Value))
#Output:
Mean :  351
&lt;/pre&gt;
&lt;hr&gt;
==Trimmed Mean for the above example== 
&lt;h3&gt;Using scipy library&lt;/h3&gt;
&lt;pre&gt;
#import scipy to use the method of trim_mean
from scipy import stats
trimMean = stats.trim_mean(Estimates, 0.1) # Trim 10% at both ends
print(&quot;Trimmed Mean : &quot;,trimMean)
#Output:
Trimmed Mean :  335.1020408163265
&lt;/pre&gt;

&lt;h3&gt;Without using scipy library&lt;/h3&gt;
&lt;pre&gt;
#Trimmed mean with 10%
p=10/100
#sorted data
data=[2, 4, 6, 7, 11, 21, 81, 90, 105, 121]
n = len(data)
#Remove elements from both end
rem=int(n*p)
newData = data[rem:-rem]
mean = 0
for i in newData:
    mean += i
mean = int(mean/len(newData))
print(&quot;Trimmed mean : &quot;,mean)
#Output: Trimmed mean :  40
&lt;/pre&gt;
[[#Top]]

=Jumbled_Words Permutations: Jumbled Words=
==What are Permutations ?==
A permutation also called ordering of selected number of elements from a list denoted by nPr here we are choosing all elements of a list and so n=r&lt;br&gt;
nPr=n!/(n-r)!&lt;br&gt; as n=r
nPn=n!&lt;br&gt; which gives all possible arrangement of elements present in a list.

 For example, permutations of list [1,2,3] are [1,2,3], [1,3,2], [2,1,3], [2,3,1], 
[3,1,2], and [3,2,1]. 
The number of permutations of a list of elements nPn is given by n!. For example, there are 2! = 2 x 1 = 2 permutations of [1,2], namely [1,2] and [2,1], and 3! = 3 x 2 x 1 = 6 permutations of [1,2,3], as mentioned above.&lt;br/&gt;
[[File:Permutations.jpg]]

==Implementation==
Here, we try to demonstrate the concept of permutations through jumbled words. It is a two player game in which one person presents the other person a different permutation of the word in his mind. The other person has to guess the right word. If he guesses, the he wins otherwise he loses.
 Input an list of words.
 Randomly pick a word from the list of words .
 Shuffle this word and present it to the other player.
 if word guesses by the player is same as the one picked from list of w
     player wins
 else
     player loses

ALTERNATE CODE TO GENERATE THIS GAME:
&lt;pre&gt;
import random
p1=input(&quot;enter player 1 name:&quot;)
p2=input(&quot;enter player 2 name:&quot;)
l=[&quot;rainbow&quot;,&quot;computer&quot;,&quot;robot&quot;,&quot;butter&quot;,&quot;vegetable&quot;,&quot;science&quot;,&quot;correct&quot;]
c1=c2=a1=a2=f1=f2=0
k=1
i=3
def play():
    n=random.choice(l)        ##n=chooses a word from list l
    l1=[]
    for j in n:
       l1.append(j)      ##creates a list for word in n
    for t in range(len(l1)):
       p=random.choice(l1)     ##this randomly displays letters in the list
       print(p)
       l1.remove(p)          ##to avoid the repetition of a letter
    s=input(&quot;enter the word:&quot;)
    if(s==n):
        print(&quot;correct&quot;)
        return 1
    else:
        print(&quot;not correct&quot;)
        print(&quot;answer is&quot;,n)
        return 0
def stat():
     print(&quot;player 1:&quot;)
     print(&quot;score:&quot;,c1)
     print(&quot;answered:&quot;,a1)
     print(&quot;failed:&quot;,f1)
     print(&quot;.............&quot;)
     print(&quot;player 2:&quot;)
     print(&quot;score:&quot;,c2)
     print(&quot;answered:&quot;,a2)
     print(&quot;failed&quot;,f2)
     if(c1&gt;c2):
         print(p1,&quot; won over &quot;,p2)
     elif(c1==c2):
         print(&quot;draw game&quot;)
     else:
         print(p2,&quot; won over &quot;,p1) 
while(i!=4):
      if(i==3):
         if(k==1):
             print(&quot;player 1 turn&quot;)
             print(&quot;your jumbled word is:&quot;)
             k=k+1
             m=play()
             if(m==1):      ##if guessed answer is correct,then score and no.of answered count will be increased
                c1+=1
                a1+=1
             else:
                f1+=1       ##else count of no.of failed to answered will be incremented
         else:
             print(&quot;player 2 turn&quot;)
             print(&quot;your jumbled word is:&quot;)
             k=k-1
             m=play()
             if(m==1):
                c2=c2+1
                a2=a2+1
             else:
                f2=f2+1
       if(i==2):
             print(&quot;present status&quot;)
             stat()
       i=int(input(&quot;enter your choice  1.stop 2.status 3.continue&quot;))
       if(i==1):
             stat()
             i=i+3
&lt;/pre&gt;
&lt;hr&gt;
=== JumbledWord Simple Logic, In Short ===
[[File:jumbledWord.gif]]
&lt;hr&gt;
'''Logic to create a Jumbled Word'''
&lt;hr&gt;
&lt;pre&gt;
#Get Jumbled Word and print it Horizontally
import random

def getJumbledWord(b):
    jumble=''
    l1 = [ b[i] for i in range(0, len(b)) ]
    for t in range(len(l1)):
       p=random.choice(l1)     ##this randomly gets letters from the list      
       jumble=jumble+p       
       l1.remove(p)
    return jumble

b=input(&quot;Enter a word to make it jumbled : &quot;)
print(&quot;Jumbled Word : &quot;, getJumbledWord(b))
&lt;/pre&gt;
&lt;hr&gt;
'''Another Logic to create a Jumbled Word'''
&lt;hr&gt;
&lt;pre&gt;
b=input(&quot;Enter a word to make it jumbled : &quot;)

def getJumbledWord1(b):
    l1 = [ b[i] for i in range(0, len(b)) ]
    random.shuffle(l1)
    str1 = ''.join(l1)
    return str1

print(&quot;Jumbled Word : &quot;, getJumbledWord1(b))
&lt;/pre&gt;

====Sample Output:====
&lt;pre&gt;
---- Output1 
Enter a word to make it jumbled : butter
Jumbled Word :  tbture

---- Output2 
Enter a word to make it jumbled : petriotism
Jumbled Word :  pittrosime
&lt;/pre&gt;

=Theory of Evolution=

== What is Evolution ? ==
Evolution is the change in heritable characteristics over successive generations. The theory of evolution explains that DNA, which acts as a carrier of genetic information from one generation to other, tends to change or mutate occasionally. These changes are reflected in next generations to come. This is how life has evolved on earth from bacteria to human beings.&lt;br&gt;
[[File:Evolution.png|500px]]

== Implementation ==
An array representing DNA is stored in a file. As genes are forms of DNA, they contain information to be transferred to forthcoming generations. Assume that information is in the form of bits (in the form of 0s and 1s). A number is picked randomly from 1 to the size of the array. A new parameter has been introduced which decides whether mutation would occur or not. If the value of this new parameter is 1 (It is picked randomly from 1 to 100), then only change is reflected down the generations, otherwise it is not. The pseudo code is as follows :
Input an array containing genetic information .
Randomly generate a number (say m) from 1 to length of the array. Randomly generate other number (say p) from 1 to 100.
 
    if p is equal to 1 then 
        if m is 1 then
          set it to 0
        else
          set it to 1</text>
      <sha1>8ei05wijodiswsd12y0k6qornmnr2vn</sha1>
    </revision>
    <revision>
      <id>3482</id>
      <parentid>3481</parentid>
      <timestamp>2018-09-27T13:09:24Z</timestamp>
      <contributor>
        <username>Sachinkr</username>
        <id>1743</id>
      </contributor>
      <comment>/* Without using index position */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="28131">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_3 Contributors of this page]
*Week 3 Playlist: https://www.youtube.com/playlist?list=PLc_j0TNIaWxOVx_z9jAM2UB3RqYNXaoEo
=List=
List is a flexible data structure used for storing a group of data separated by comma. The elements in a list need not be of the same data type.

'''Example:'''
       List_1 = [ 1, 2,3] or 
       List_1 = [&quot;coffee&quot;, &quot;Tea&quot;, &quot;Milk&quot;] or
       List_1 = [1,&quot;coffee&quot;, &quot;Tea&quot;, 3, &quot;5&quot;]

==List Creation==
&lt;pre&gt;a) A list can be created by simply putting values (separated by comma) between square brackets as given below,
       List_1 = [1,&quot;coffee&quot;, &quot;Tea&quot;, 3, &quot;5&quot;] #this creates a list by name List_1 containing following items


Or,
(b)A List can be created from scratch and elements can be added 
        List_2 = [ ]
        List_2.append(&quot;Kala&quot;)
        List_2.append(&quot;Mala&quot;)
Here we use &quot;append&quot; ,which is a function in python that enable us to append or attach an element to a list .
Thus List_2 will now hold [&quot;Kala&quot;,&quot;Mala&quot;]
&lt;/pre&gt;
[[#TOP]]

==Operations and Methods to work with List==
&lt;pre&gt;
a = [25,30,50,90,12,13]
b = [100,300,500,200,250]
&lt;/pre&gt;
&lt;hr&gt;
&lt;table border=2&gt;
  &lt;tr&gt;
    &lt;th&gt;&lt;b&gt;Method/&lt;br&gt;Operator&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Function&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Syntax&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Output&lt;/b&gt;&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;len()&lt;/td&gt;
    &lt;td&gt;Find length of a list&lt;/td&gt;
    &lt;td&gt;len(a)&lt;/td&gt;
    &lt;td&gt;6&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;max()&lt;/td&gt;
    &lt;td&gt;Find maximum element from the list&lt;/td&gt;
    &lt;td&gt;max(a)&lt;/td&gt;
    &lt;td&gt;90&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;min()&lt;/td&gt;
    &lt;td&gt;Find minimum element from the list&lt;/td&gt;
    &lt;td&gt;min(a)&lt;/td&gt;
    &lt;td&gt;12&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sum()&lt;/td&gt;
    &lt;td&gt;Returns sum of all elements of the list&lt;/td&gt;
    &lt;td&gt;sum(a)&lt;/td&gt;
    &lt;td&gt;220&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;reverse()&lt;/td&gt;
    &lt;td&gt;Reverses the original list&lt;/td&gt;
    &lt;td&gt;a.reverse()&lt;/td&gt;
    &lt;td&gt;[13, 12, 90, 50, 30, 25]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sort()&lt;/td&gt;
    &lt;td&gt;Sorts the original list in ascending order&lt;/td&gt;
    &lt;td&gt;a.sort()&lt;/td&gt;
    &lt;td&gt;[12, 13, 25, 30, 50, 90]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sorted()&lt;/td&gt;
    &lt;td&gt;Returns the new sorted list &lt;/td&gt;
    &lt;td&gt;sorted(a)&lt;/td&gt;
    &lt;td&gt;[12, 13, 25, 30, 50, 90]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;insert()&lt;/td&gt;
    &lt;td&gt;Insert at a particular index in the list, and shifts remaining elements&lt;/td&gt;
    &lt;td&gt;a.insert(3,3)&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 3, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;append()&lt;/td&gt;
    &lt;td&gt;Adds elements/object to the end of the list&lt;/td&gt;
    &lt;td&gt;a.append(5)&lt;br&gt;a.append([10,20])&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 5]&lt;br&gt;[25, 30, 50, 90, 12, 13, [10, 20]]&lt;br&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;extend()&lt;/td&gt;
    &lt;td&gt;Adds object to the end of the list as elements not as object&lt;/td&gt;
    &lt;td&gt;a.extend([10,20])&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 10, 20]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;*&amp;nbsp;&amp;nbsp;Repeatation&lt;br&gt;operator&lt;/td&gt;
    &lt;td&gt;Repeat the list for n times and returns a new list&lt;/td&gt;
    &lt;td&gt;a*2&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 25, 30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;+ Concatenation&lt;br&gt;operator&lt;/td&gt;
    &lt;td&gt;Concatenates two lists, and returns a new list&lt;/td&gt;
    &lt;td&gt;a+b&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 100, 300, 500, 200, 250]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;index()&lt;/td&gt;
    &lt;td&gt;Finds index of a particular element in the list or not&lt;/td&gt;
    &lt;td&gt;a.index(25)&lt;br&gt;a.index(0)&lt;br&gt;&lt;/td&gt;
    &lt;td&gt;0&lt;br&gt;&lt;br&gt;ValueError: 0 is not in list&lt;br&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;in operator&lt;/td&gt;
    &lt;td&gt;Finds whether a particular element is in the list or not, returns boolean&lt;/td&gt;
    &lt;td&gt;25 in a&lt;/td&gt;
    &lt;td&gt;True&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;not in operator&lt;/td&gt;
    &lt;td&gt;Checks if element is not available in list, returns boolean&lt;/td&gt;
    &lt;td&gt;25 not in a&lt;/td&gt;
    &lt;td&gt;False&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;count()&lt;/td&gt;
    &lt;td&gt;Counts the number of occurence of an element in the list&lt;/td&gt;
    &lt;td&gt;a.count(25)&lt;/td&gt;
    &lt;td&gt;1&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;remove()&lt;/td&gt;
    &lt;td&gt;Removes an element from the list&lt;/td&gt;
    &lt;td&gt;a.remove(25)&lt;/td&gt;
    &lt;td&gt; [30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;pop()&lt;/td&gt;
    &lt;td&gt;Delete and return item at index 0&lt;/td&gt;
    &lt;td&gt;a.pop(0)&lt;/td&gt;
    &lt;td&gt;25 , a will be [30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;del&lt;/td&gt;
    &lt;td&gt;Deletes item at a particular index from the list&lt;/td&gt;
    &lt;td&gt;del a[0]&lt;/td&gt;
    &lt;td&gt;[30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;

==Printing the List==
=== Print whole list ===
A list can be printed simply or using a ''for / while'' loop 

 print(List_2)     # To print the entire list
This code will print      
 ['Kala','Mala']     

===Print element at a particular index===
&lt;pre&gt;
Using index position
    List_2[0]     # prints 'Kala' ,i.e,the value at index position 0.
    List_2[1]     # prints 'Mala'.
&lt;/pre&gt;
=== Without using index position ===
&lt;pre&gt;
for item in List_2:   # here item is a variable used to access elements in list.
       print(item)
   This code snippet prints 
    Kala
    Mala
&lt;/pre&gt;
[[#TOP]]

==Search for a particular element in list==
Elements in a list can be searched by one of the two ways:
=== using index() function===
&lt;pre&gt;
ages1 = [11,23,12,23,45]

#if element is available in the list, index() returns the index value on which, the element is present.
print(ages1.index(45))#Output: 4

#if element is not available in the list, index() returns ''ValueError''
print(ages1.index(0))#Output: ValueError:
&lt;/pre&gt;

In programming, if such error occurs, program gets terminated. It can be solved using exception handling.
e.g.
&lt;pre&gt;
ages1 = [11,23,12,23,45]

try:
    print(ages1.index(0))
except ValueError:
    print(&quot;Exception has occured&quot;)    
    print(&quot;Element is not found in the list&quot;)

&lt;/pre&gt;
&lt;pre&gt;
'''Output: 
Exception has occured
Element is not found in the list
'''&lt;/pre&gt;

=== using 'in' operator===
''in'' operator is used to check whether a particular element is available in the list or not.e.g.

&lt;pre&gt;
ages1 = [11,23,12,23,45]
no=11

if no in ages1:
    print(&quot;no is there in the list&quot;)
else:    
    print(&quot;no is NOT there in the list&quot;)
&lt;/pre&gt;
&lt;pre&gt;
#Output: no is there in the list
&lt;/pre&gt;

'''Number is not there in the list'''
&lt;pre&gt;
ages1 = [11,23,12,23,45]
no=15

if no in ages1:
    print(&quot;no is there in the list&quot;)
else:    
    print(&quot;no is NOT there in the list&quot;)
&lt;/pre&gt;
&lt;pre&gt;
Output: no is NOT there in the list
&lt;/pre&gt;


==Updating the List==
The lists can be updated using ''append'' or ''insert'' function.  Append adds the element to the end of the list and Insert adds the element in the specified position.
   List_2.append(&quot;Sheela&quot;)    # add the element 'Sheela' to the end of the list.
   print (List_2) will output 
   ['Kala', 'Mala', 'Sheela']
   
   List_2.insert(1,&quot;Bala&quot;)    # add the element &quot;Bala&quot; in the list at the index 1.
   print (List_2) will output 
   ['Kala', 'Bala','Mala', 'Sheela']

=== Extend the list by adding elements of other list at end using extend()===
&lt;pre&gt;
ages = [11,23,12,23,45]
ages.extend([57,58])
print(ages)
&lt;/pre&gt;

&lt;pre&gt;
#Output: [11, 23, 12, 23, 45, 57, 58]
&lt;/pre&gt;

==== Difference between ''append and extend'' ====
Difference between append and extend can be easily understood, by the following example.

&lt;pre&gt;
appendlist = [11,23,12,23,45]
appendlist.append([57,58])

extendlist= [11,23,12,23,45]
extendlist.extend([57,58])
&lt;/pre&gt;

&lt;pre&gt;
'''Output:
[11, 23, 12, 23, 45, [57, 58]]
[11, 23, 12, 23, 45, 57, 58]'''
&lt;/pre&gt;

==Basic Operations on List==
===Frequency of Occurrence===
list.count(object) will return the number of times the object occur in the list.
  '''Example'''
    ages = [11,23,12,23,45,43,22,24,23]
    ages.count(23) will return
    3
    ages.count(100) will return
    0

===Length of the List===
len(list) will return the length of the list ie. the number of objects in the list.
  '''Example'''
    ages = [11,23,12,23,45,43,22,24,23]
    len(ages) will output
    9
To print the objects in the list either use ''for item in list'' or ''for index in range(len(list))''
    for item in ages:       
        print (item)  
        (OR)
    for index in range(len(ages)) :
        print (ages[index])
===Sort the List===
list.sort() will sort the list in ascending order
  '''Example'''
    ages = [11,23,12,23,45,43,22,24,23]
    ages.sort() 
    print (ages) 
    [11, 12, 22, 23, 23, 23, 24, 43, 45]
===Sort the List using sorted() function===
sorted(list1) will sort the list and return a new list, it doesn't modify the original list
&lt;br&gt;'''Example: Sort in ascending order'''
&lt;pre&gt;
ages = [11,23,12,23,45,43,22,24,23]
newList=sorted(ages)
print(newList)

#Output: [11, 12, 22, 23, 23, 23, 24, 43, 45]
&lt;/pre&gt;

&lt;br&gt;'''Example: Sort in descending order'''
&lt;pre&gt;
ages = [11,23,12,23,45,43,22,24,23]
newList=sorted(ages,reverse=True)
print(newList)

#Output: [45, 43, 24, 23, 23, 23, 22, 12, 11]
&lt;/pre&gt;

===Reverse the List===
list.reverse() will reverse the original list
  '''Example'''
    ages = [11, 12, 22, 23, 23, 23, 24, 43, 45]
    ages.reverse()
    print (ages)
    [45, 43, 24, 23, 23, 23, 22, 12, 11]

Both sort() and reverse() list operation will work on numeric and alphanumeric data list.

A special use of the reverse() function is to descend a list that is sorted in ascending order.

  '''Example'''
&lt;pre&gt;
ages = [11, 12, 22, 23, 23, 23, 24, 43, 45]
ages.sort()
print(ages)
ages.reverse()
print(ages)
&lt;/pre&gt;

===Slicing===
Used to retrieve an object or objects in a range as a list  
  '''Example'''
Use ''list[index]'' to retrieve the object at the given index
         In [1]: student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
         In [2]: student[3]     #Object at index 3.  Remember index starts at 0
         Out[2]: 'Geetha'      


Use ''list[start_index : end_index + 1]'' to retrieve objects from the start_index to end_index 
         In [3]: student[2:4]     # Objects from index 2 to 3 as List. Note the [ and ]
         Out[3]: ['Vijay', 'Geetha']   


Use ''list[:]'' to retrieve objects from the starting of the list to the end of the list. 
The default start value will be the starting index of the list (i.e. 0) and the default end value
will be the length of the list 
         In [4]: student[:]        # prints the entire list
         Out[4]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma', 'Janani']


         In [5]: student[:5]       # prints the objects from the start of the list upto object at index 4
         Out[5]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran']


         In [6]: student[2:]       # prints the objects from index 2 upto the end of the list
         Out[6]: ['Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma', 'Janani']


Negative index too is available in Python. It starts from last element of the list. i.e.

         In [7]:student[-1]        #prints last index of list
         Out[7]: 'Janani'


         In [8]:student[-1:-8]     #prints empty list
         Out[8]: []


         In [9]:student[-8:-1]     #prints -8th index to -1st index elements
         Out[9]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma']

===Removing Item from list ===
----

Is used to remove a specific item from the list.

'''Example:'''
 
Use list.remove(entry/value)  Or   del list[index]    Or list.pop(index)
         student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
         student.remove(&quot;Arun&quot;)   #This will delete item &quot;Arun&quot;
         Or    
         del student[0]           # This will delete item at index 0
         Or
         student.pop(0)         # This will delete and return item at index 0


         print(student)    
         Output: [&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]

===Delete list ===
----
Used to delete complete list

'''Example'''

Use del &lt;list name&gt;
         student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
         del student

===Concatenation of two lists===
----
''+'' is the concatenation operator which is used concatenate two lists. 
&lt;pre&gt;
ages1 = [11,23,12,23,45]
ages2 = [25, 24, 43, 47]
age=ages1+ages2
print(age)
#Output: [11, 23, 12, 23, 45, 25, 24, 43, 47]
&lt;/pre&gt;

===Repeatation of a list ===
----
''*'' is the operator to repeat a particular list.
&lt;pre&gt;
ages1 = [11,23,12,23,45]
age=ages1*5 #ages1 list is repeated 5 times and stroed in ''age'' list
print(age)

#Output: [11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45]
&lt;/pre&gt;
====Conditional Statements====
    Conditionals are used to check the condition and change the flow of the program 
accordingly. They are realized in programming languages through if statement. The 
syntax is as follows :
         if condition : 
            statement
    '''Note:''' Do not forget indentation (inserting space/tab) in the line after the
 if condition.
    
    In case you want to execute a set of statements when a condition is true and another

set of statement when the condition is false.
         if condition : 
            statement 1
         else :
            statement 2
    
    Multiple if-else statements can be written as follows:
         if condition_1 : 
            statement 1
         elif condition_2 : # 'elif' is short for 'else if'
            statement 2
         elif condition_3 :
            statement 3
        .
        .
         else :
            final statement

=Loops and Conditionals : Fizzbuzz=
====Loops====

    Loops are used to execute a set of repetitive statements. They are realized
 through 'while' and 'for' loops in programming languages. The syntax of 'for' loop is 
as follows :
        for LOOPVARIABLE in SEQUENCE: 
            STATEMENTS
    '''e.g.''' to print all the data from a list we can write:
        for item in list_name
            print(item)
    OR
        for index in range(len(list_name))
            print(list_name[index])
    
    The syntax for while loop is as follows :
    
        while BOOLEANEXPRESSION: 
            STATEMENTS
            INCREMENT/DECREMENT
    
    '''e.g.''' if we want to print all numbers from 1 to 10
        i=1
        while i&lt;=10 :
            print(i,&quot; &quot;)
            i=i+1
    
    'while' loop has indefinite iteration (run-time unknown). So, there must be loop
 break statement in it.
 Whereas 'for' loop is definite in nature (i.e. known or predictable span).&lt;br&gt;

&lt;b&gt;NOTE: Python doesn't have anything like do-while loop.&lt;/b&gt;

==Implementation==
Here, we try to demonstrate the concept of loops and conditionals through a game called Fizzbuzz. The rules are as follows :&lt;br/&gt;
[[File:fizzBuzz.gif]]

• if input number is a multiple of ’3’ print ”Fizz”
&lt;br/&gt;
• if input number is a multiple of ’5’ print ”Buzz”
&lt;br/&gt;
• if input number is a multiple of both '3' and ’5’ print ”FizzBuzz”
&lt;br/&gt;
The pseudo code is as follows :
&lt;pre&gt;
   If input no % 3 == 0 and  input no % 5 == 0 : 
       print ”Fizzbuzz”
   else if input no % 3 == 0 : 
       print ”Fizz”
   else if input no % 5 == 0 : 
       print ”Buzz”
   else :
       print the input no
&lt;/pre&gt;
The order of statements execution matters to get the desired output. The highest priority condition should be first followed by other. In fizzbuzz programming, first checking should be done for both divisibility of 3 and 5. If condition not satisfied only then it should check individually for 3 or 5. So carefully choosing the order is crucial for better programming.
Note: There is some effect of present condition statements chosen on next conditions statements. That is why in first attempt fizzbuzz programming got struck.

Example: 
&lt;pre&gt;
#Code to achieve the above requirement in python3.
i = int(input(&quot;Enter the number&quot;)) 
if i%3 == 0 and i%5 == 0: print(i,&quot;FizzBuzz&quot;)  
elif i%5 == 0: print(i,&quot;Buzz&quot;)
elif i%3 == 0: print(i,&quot;Fizz&quot;)
else: print(i)
&lt;/pre&gt;
Lets put the same into a loop for a range given by the user.
&lt;pre&gt;
def fizzbuzzgame(start,stop):
    for i in range(start,stop+1):
        if i%3 == 0 and i%5 == 0:
            print(i,&quot;FizzBuzz&quot;)
        elif i%5 == 0:
            print(i,&quot;Buzz&quot;)
        elif i%3 == 0:
            print(i,&quot;Fizz&quot;)
        else: print(i)

fizzbuzzgame(50,100)
&lt;/pre&gt;


=== Fizz Buzz game in Interactive mode with Score ===
'''By Ms. Ami Tusharkant Choksi'''
&lt;pre&gt;
def fizzbuzzgame(i):
        if i%3 == 0 and i%5 == 0:
            print(i,&quot;FizzBuzz&quot;)
            return(&quot;fzbz&quot;)
        elif i%5 == 0:
            print(i,&quot;Buzz&quot;)
            return(&quot;bz&quot;)
        elif i%3 == 0:
            print(i,&quot;Fizz&quot;)
            return(&quot;fz&quot;)
        else:
            print(i)
            return(&quot;no&quot;)

ch = 'y'
fizzbuzz=0
fizz=0
buzz=0
nothing=0
print(&quot;&quot;&quot;
 _____  ____  _____  _____  ____   __ __  _____  _____       ____   ____  ___ ___    ___ 
|     ||    ||     ||     ||    \ |  |  ||     ||     |     /    | /    ||   |   |  /  _]
|   __| |  | |__/  ||__/  ||  o  )|  |  ||__/  ||__/  |    |   __||  o  || _   _ | /  [_ 
|  |_   |  | |   __||   __||     ||  |  ||   __||   __|    |  |  ||     ||  \_/  ||    _]
|   _]  |  | |  /  ||  /  ||  O  ||  :  ||  /  ||  /  |    |  |_ ||  _  ||   |   ||   [_ 
|  |    |  | |     ||     ||     ||     ||     ||     |    |     ||  |  ||   |   ||     |
|__|   |____||_____||_____||_____| \__,_||_____||_____|    |___,_||__|__||___|___||_____|
                                                                                         
&quot;&quot;&quot;)   

while(ch == 'y'):
    n=int(input(&quot;Enter a Number : &quot;))
    winLoose=fizzbuzzgame(n)
    if(winLoose == &quot;fz&quot;):
        fizz+=1
    elif(winLoose == &quot;bz&quot;):
        buzz+=1
    elif(winLoose == &quot;fzbz&quot;):
        fizzbuzz+=1
    ch=input(&quot;Do you want to continue playing the game : (y/n)&quot;)
    if(ch=='n'):
        print('Congratulations, your score is\n FizzBuzz:%d\nFizz:%d\nBuzz:%d' %
(fizzbuzz,fizz,buzz))
    
'''Sample Output:

 _____  ____  _____  _____  ____   __ __  _____  _____       ____   ____  ___ ___    ___ 
|     ||    ||     ||     ||    \ |  |  ||     ||     |     /    | /    ||   |   |  /  _]
|   __| |  | |__/  ||__/  ||  o  )|  |  ||__/  ||__/  |    |   __||  o  || _   _ | /  [_ 
|  |_   |  | |   __||   __||     ||  |  ||   __||   __|    |  |  ||     ||  \_/  ||    _]
|   _]  |  | |  /  ||  /  ||  O  ||  :  ||  /  ||  /  |    |  |_ ||  _  ||   |   ||   [_ 
|  |    |  | |     ||     ||     ||     ||     ||     |    |     ||  |  ||   |   ||     |
|__|   |____||_____||_____||_____| \__,_||_____||_____|    |___,_||__|__||___|___||_____|
                                                                                         

Enter a Number : 666
666 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 777
777 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 555
555 FizzBuzz
Do you want to continue playing the game : (y/n)y
Enter a Number : 1
1
Do you want to continue playing the game : (y/n)y
Enter a Number : 789
789 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 25
25 Buzz
Do you want to continue playing the game : (y/n)n
Congratulations, your score is

FizzBuzz:1
Fizz:3
Buzz:1

&lt;/pre&gt;

=Crowd Computing: Just Estimate=
==Wisdom of Crowds==
The concept of ’Wisdom of Crowds’ was proposed by Francis Galton. A weight-judging competition was carried on at the annual show of the West of England Fat Stock and Poultry Exhibition recently held at Plymouth, A fat ox having been selected, competitors bought stamped and numbered cards, each, on which to inscribe their respective names, addresses, and estimates of what the ox would weigh after it had been slaughtered. Those who guessed most successfully received prizes. About 8oo tickets were issued to the par- ticipants. The middlemost estimate of all the estimates recorded was 1207 lbs and the actual weight of the ox was 1198 lbs.

==Our Experiment==
The crowd had to guess the number of candies/gems in a jar. Around 75 people participated in the experiment. The actual number of gems in the jar were 375. The median of all estimates came out to be 300 and the mean of all the estimates came out to be around 396. Median underestimated and mean overestimated the actual value. So according to recent studies, Trimmed mean must be used as an aggregate measure to estimate where Wisdom of Crowds is involved.
[[File:Gemsjar.jpg|center|200px|caption]]

===Trimmed Mean===
In these kinds of experiments, 10% trimmed mean is usually followed. For calculating 10% trimmed mean, remove 10% smallest and 10% largest values from the sample. Calculate the mean of the sample obtained. In the above experiment, the trimmed mean came out to be around 351 which is very close to the actual value.

==Implementation==
Here, we try to demonstrate the concept of trimmed mean through crowd computing.
 Input a list of estimates done by the crowd .
 Sort the list.
 Remove the 10% smallest values.
 Remove the 10% largest values.
 Calculate the mean of the new list obtained .&lt;hr&gt;

==Data of Experiment==       
    Estimates =[1000,1010,1786,2000,1500,1500,100,120,150,150,150,170,175,180,197,200,200,200,200,200,200,220,220,220,220,234,250,250,250,250,250,250,250,250,250,263,270,275,275,286,300,
                300,300,300,300,300,300,300,320,350,350,350,400, 400,400,400,400,450,467,500,500,500,500,500,500,500,550,550,600,600,600,650,700,700,720]

    '''CODE:'''
&lt;pre&gt;
Estimates = [1000,1010,1786,2000,1500,1500,100,120,150,150,150,170,175,180,197,200,200,200,200,200,200,220,220,220,220,234,250,250,250,250,250,250,250,250,250,263,270,275,275,286,300,                300,300,300,300,300,300,300,320,350,350,350,400,400,400,400,400,450,467,500,500,500,500,500,500,500,550,550,600,600,600,650,700,700,720]
Estimates.sort()
offset = int(0.10*len(Estimates))
for i in range(offset):
       del Estimates[0]
       del Estimates[-1]
Sum = 0    
for i in range(len(Estimates)):
       Sum += Estimates[i]
Mean_Value = Sum/len(Estimates)
print(&quot;Mean : &quot;, int(Mean_Value))
#Output:
Mean :  351
&lt;/pre&gt;
&lt;hr&gt;
==Trimmed Mean for the above example== 
&lt;h3&gt;Using scipy library&lt;/h3&gt;
&lt;pre&gt;
#import scipy to use the method of trim_mean
from scipy import stats
trimMean = stats.trim_mean(Estimates, 0.1) # Trim 10% at both ends
print(&quot;Trimmed Mean : &quot;,trimMean)
#Output:
Trimmed Mean :  335.1020408163265
&lt;/pre&gt;

&lt;h3&gt;Without using scipy library&lt;/h3&gt;
&lt;pre&gt;
#Trimmed mean with 10%
p=10/100
#sorted data
data=[2, 4, 6, 7, 11, 21, 81, 90, 105, 121]
n = len(data)
#Remove elements from both end
rem=int(n*p)
newData = data[rem:-rem]
mean = 0
for i in newData:
    mean += i
mean = int(mean/len(newData))
print(&quot;Trimmed mean : &quot;,mean)
#Output: Trimmed mean :  40
&lt;/pre&gt;
[[#Top]]

=Jumbled_Words Permutations: Jumbled Words=
==What are Permutations ?==
A permutation also called ordering of selected number of elements from a list denoted by nPr here we are choosing all elements of a list and so n=r&lt;br&gt;
nPr=n!/(n-r)!&lt;br&gt; as n=r
nPn=n!&lt;br&gt; which gives all possible arrangement of elements present in a list.

 For example, permutations of list [1,2,3] are [1,2,3], [1,3,2], [2,1,3], [2,3,1], 
[3,1,2], and [3,2,1]. 
The number of permutations of a list of elements nPn is given by n!. For example, there are 2! = 2 x 1 = 2 permutations of [1,2], namely [1,2] and [2,1], and 3! = 3 x 2 x 1 = 6 permutations of [1,2,3], as mentioned above.&lt;br/&gt;
[[File:Permutations.jpg]]

==Implementation==
Here, we try to demonstrate the concept of permutations through jumbled words. It is a two player game in which one person presents the other person a different permutation of the word in his mind. The other person has to guess the right word. If he guesses, the he wins otherwise he loses.
 Input an list of words.
 Randomly pick a word from the list of words .
 Shuffle this word and present it to the other player.
 if word guesses by the player is same as the one picked from list of w
     player wins
 else
     player loses

ALTERNATE CODE TO GENERATE THIS GAME:
&lt;pre&gt;
import random
p1=input(&quot;enter player 1 name:&quot;)
p2=input(&quot;enter player 2 name:&quot;)
l=[&quot;rainbow&quot;,&quot;computer&quot;,&quot;robot&quot;,&quot;butter&quot;,&quot;vegetable&quot;,&quot;science&quot;,&quot;correct&quot;]
c1=c2=a1=a2=f1=f2=0
k=1
i=3
def play():
    n=random.choice(l)        ##n=chooses a word from list l
    l1=[]
    for j in n:
       l1.append(j)      ##creates a list for word in n
    for t in range(len(l1)):
       p=random.choice(l1)     ##this randomly displays letters in the list
       print(p)
       l1.remove(p)          ##to avoid the repetition of a letter
    s=input(&quot;enter the word:&quot;)
    if(s==n):
        print(&quot;correct&quot;)
        return 1
    else:
        print(&quot;not correct&quot;)
        print(&quot;answer is&quot;,n)
        return 0
def stat():
     print(&quot;player 1:&quot;)
     print(&quot;score:&quot;,c1)
     print(&quot;answered:&quot;,a1)
     print(&quot;failed:&quot;,f1)
     print(&quot;.............&quot;)
     print(&quot;player 2:&quot;)
     print(&quot;score:&quot;,c2)
     print(&quot;answered:&quot;,a2)
     print(&quot;failed&quot;,f2)
     if(c1&gt;c2):
         print(p1,&quot; won over &quot;,p2)
     elif(c1==c2):
         print(&quot;draw game&quot;)
     else:
         print(p2,&quot; won over &quot;,p1) 
while(i!=4):
      if(i==3):
         if(k==1):
             print(&quot;player 1 turn&quot;)
             print(&quot;your jumbled word is:&quot;)
             k=k+1
             m=play()
             if(m==1):      ##if guessed answer is correct,then score and no.of answered count will be increased
                c1+=1
                a1+=1
             else:
                f1+=1       ##else count of no.of failed to answered will be incremented
         else:
             print(&quot;player 2 turn&quot;)
             print(&quot;your jumbled word is:&quot;)
             k=k-1
             m=play()
             if(m==1):
                c2=c2+1
                a2=a2+1
             else:
                f2=f2+1
       if(i==2):
             print(&quot;present status&quot;)
             stat()
       i=int(input(&quot;enter your choice  1.stop 2.status 3.continue&quot;))
       if(i==1):
             stat()
             i=i+3
&lt;/pre&gt;
&lt;hr&gt;
=== JumbledWord Simple Logic, In Short ===
[[File:jumbledWord.gif]]
&lt;hr&gt;
'''Logic to create a Jumbled Word'''
&lt;hr&gt;
&lt;pre&gt;
#Get Jumbled Word and print it Horizontally
import random

def getJumbledWord(b):
    jumble=''
    l1 = [ b[i] for i in range(0, len(b)) ]
    for t in range(len(l1)):
       p=random.choice(l1)     ##this randomly gets letters from the list      
       jumble=jumble+p       
       l1.remove(p)
    return jumble

b=input(&quot;Enter a word to make it jumbled : &quot;)
print(&quot;Jumbled Word : &quot;, getJumbledWord(b))
&lt;/pre&gt;
&lt;hr&gt;
'''Another Logic to create a Jumbled Word'''
&lt;hr&gt;
&lt;pre&gt;
b=input(&quot;Enter a word to make it jumbled : &quot;)

def getJumbledWord1(b):
    l1 = [ b[i] for i in range(0, len(b)) ]
    random.shuffle(l1)
    str1 = ''.join(l1)
    return str1

print(&quot;Jumbled Word : &quot;, getJumbledWord1(b))
&lt;/pre&gt;

====Sample Output:====
&lt;pre&gt;
---- Output1 
Enter a word to make it jumbled : butter
Jumbled Word :  tbture

---- Output2 
Enter a word to make it jumbled : petriotism
Jumbled Word :  pittrosime
&lt;/pre&gt;

=Theory of Evolution=

== What is Evolution ? ==
Evolution is the change in heritable characteristics over successive generations. The theory of evolution explains that DNA, which acts as a carrier of genetic information from one generation to other, tends to change or mutate occasionally. These changes are reflected in next generations to come. This is how life has evolved on earth from bacteria to human beings.&lt;br&gt;
[[File:Evolution.png|500px]]

== Implementation ==
An array representing DNA is stored in a file. As genes are forms of DNA, they contain information to be transferred to forthcoming generations. Assume that information is in the form of bits (in the form of 0s and 1s). A number is picked randomly from 1 to the size of the array. A new parameter has been introduced which decides whether mutation would occur or not. If the value of this new parameter is 1 (It is picked randomly from 1 to 100), then only change is reflected down the generations, otherwise it is not. The pseudo code is as follows :
Input an array containing genetic information .
Randomly generate a number (say m) from 1 to length of the array. Randomly generate other number (say p) from 1 to 100.
 
    if p is equal to 1 then 
        if m is 1 then
          set it to 0
        else
          set it to 1</text>
      <sha1>avykq461x91i09m43lqwmzjqnrrhamn</sha1>
    </revision>
    <revision>
      <id>3483</id>
      <parentid>3482</parentid>
      <timestamp>2018-09-27T13:09:50Z</timestamp>
      <contributor>
        <username>Sachinkr</username>
        <id>1743</id>
      </contributor>
      <comment>/* using index() function */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="28140">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_3 Contributors of this page]
*Week 3 Playlist: https://www.youtube.com/playlist?list=PLc_j0TNIaWxOVx_z9jAM2UB3RqYNXaoEo
=List=
List is a flexible data structure used for storing a group of data separated by comma. The elements in a list need not be of the same data type.

'''Example:'''
       List_1 = [ 1, 2,3] or 
       List_1 = [&quot;coffee&quot;, &quot;Tea&quot;, &quot;Milk&quot;] or
       List_1 = [1,&quot;coffee&quot;, &quot;Tea&quot;, 3, &quot;5&quot;]

==List Creation==
&lt;pre&gt;a) A list can be created by simply putting values (separated by comma) between square brackets as given below,
       List_1 = [1,&quot;coffee&quot;, &quot;Tea&quot;, 3, &quot;5&quot;] #this creates a list by name List_1 containing following items


Or,
(b)A List can be created from scratch and elements can be added 
        List_2 = [ ]
        List_2.append(&quot;Kala&quot;)
        List_2.append(&quot;Mala&quot;)
Here we use &quot;append&quot; ,which is a function in python that enable us to append or attach an element to a list .
Thus List_2 will now hold [&quot;Kala&quot;,&quot;Mala&quot;]
&lt;/pre&gt;
[[#TOP]]

==Operations and Methods to work with List==
&lt;pre&gt;
a = [25,30,50,90,12,13]
b = [100,300,500,200,250]
&lt;/pre&gt;
&lt;hr&gt;
&lt;table border=2&gt;
  &lt;tr&gt;
    &lt;th&gt;&lt;b&gt;Method/&lt;br&gt;Operator&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Function&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Syntax&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Output&lt;/b&gt;&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;len()&lt;/td&gt;
    &lt;td&gt;Find length of a list&lt;/td&gt;
    &lt;td&gt;len(a)&lt;/td&gt;
    &lt;td&gt;6&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;max()&lt;/td&gt;
    &lt;td&gt;Find maximum element from the list&lt;/td&gt;
    &lt;td&gt;max(a)&lt;/td&gt;
    &lt;td&gt;90&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;min()&lt;/td&gt;
    &lt;td&gt;Find minimum element from the list&lt;/td&gt;
    &lt;td&gt;min(a)&lt;/td&gt;
    &lt;td&gt;12&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sum()&lt;/td&gt;
    &lt;td&gt;Returns sum of all elements of the list&lt;/td&gt;
    &lt;td&gt;sum(a)&lt;/td&gt;
    &lt;td&gt;220&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;reverse()&lt;/td&gt;
    &lt;td&gt;Reverses the original list&lt;/td&gt;
    &lt;td&gt;a.reverse()&lt;/td&gt;
    &lt;td&gt;[13, 12, 90, 50, 30, 25]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sort()&lt;/td&gt;
    &lt;td&gt;Sorts the original list in ascending order&lt;/td&gt;
    &lt;td&gt;a.sort()&lt;/td&gt;
    &lt;td&gt;[12, 13, 25, 30, 50, 90]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sorted()&lt;/td&gt;
    &lt;td&gt;Returns the new sorted list &lt;/td&gt;
    &lt;td&gt;sorted(a)&lt;/td&gt;
    &lt;td&gt;[12, 13, 25, 30, 50, 90]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;insert()&lt;/td&gt;
    &lt;td&gt;Insert at a particular index in the list, and shifts remaining elements&lt;/td&gt;
    &lt;td&gt;a.insert(3,3)&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 3, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;append()&lt;/td&gt;
    &lt;td&gt;Adds elements/object to the end of the list&lt;/td&gt;
    &lt;td&gt;a.append(5)&lt;br&gt;a.append([10,20])&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 5]&lt;br&gt;[25, 30, 50, 90, 12, 13, [10, 20]]&lt;br&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;extend()&lt;/td&gt;
    &lt;td&gt;Adds object to the end of the list as elements not as object&lt;/td&gt;
    &lt;td&gt;a.extend([10,20])&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 10, 20]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;*&amp;nbsp;&amp;nbsp;Repeatation&lt;br&gt;operator&lt;/td&gt;
    &lt;td&gt;Repeat the list for n times and returns a new list&lt;/td&gt;
    &lt;td&gt;a*2&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 25, 30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;+ Concatenation&lt;br&gt;operator&lt;/td&gt;
    &lt;td&gt;Concatenates two lists, and returns a new list&lt;/td&gt;
    &lt;td&gt;a+b&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 100, 300, 500, 200, 250]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;index()&lt;/td&gt;
    &lt;td&gt;Finds index of a particular element in the list or not&lt;/td&gt;
    &lt;td&gt;a.index(25)&lt;br&gt;a.index(0)&lt;br&gt;&lt;/td&gt;
    &lt;td&gt;0&lt;br&gt;&lt;br&gt;ValueError: 0 is not in list&lt;br&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;in operator&lt;/td&gt;
    &lt;td&gt;Finds whether a particular element is in the list or not, returns boolean&lt;/td&gt;
    &lt;td&gt;25 in a&lt;/td&gt;
    &lt;td&gt;True&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;not in operator&lt;/td&gt;
    &lt;td&gt;Checks if element is not available in list, returns boolean&lt;/td&gt;
    &lt;td&gt;25 not in a&lt;/td&gt;
    &lt;td&gt;False&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;count()&lt;/td&gt;
    &lt;td&gt;Counts the number of occurence of an element in the list&lt;/td&gt;
    &lt;td&gt;a.count(25)&lt;/td&gt;
    &lt;td&gt;1&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;remove()&lt;/td&gt;
    &lt;td&gt;Removes an element from the list&lt;/td&gt;
    &lt;td&gt;a.remove(25)&lt;/td&gt;
    &lt;td&gt; [30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;pop()&lt;/td&gt;
    &lt;td&gt;Delete and return item at index 0&lt;/td&gt;
    &lt;td&gt;a.pop(0)&lt;/td&gt;
    &lt;td&gt;25 , a will be [30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;del&lt;/td&gt;
    &lt;td&gt;Deletes item at a particular index from the list&lt;/td&gt;
    &lt;td&gt;del a[0]&lt;/td&gt;
    &lt;td&gt;[30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;

==Printing the List==
=== Print whole list ===
A list can be printed simply or using a ''for / while'' loop 

 print(List_2)     # To print the entire list
This code will print      
 ['Kala','Mala']     

===Print element at a particular index===
&lt;pre&gt;
Using index position
    List_2[0]     # prints 'Kala' ,i.e,the value at index position 0.
    List_2[1]     # prints 'Mala'.
&lt;/pre&gt;
=== Without using index position ===
&lt;pre&gt;
for item in List_2:   # here item is a variable used to access elements in list.
       print(item)
   This code snippet prints 
    Kala
    Mala
&lt;/pre&gt;
[[#TOP]]

==Search for a particular element in list==
Elements in a list can be searched by one of the two ways:
=== using index() function===
&lt;pre&gt;
ages1 = [11,23,12,23,45]

#if element is available in the list, index() returns the index value on which, the element is present.
print(ages1.index(45))#Output: 4

#if element is not available in the list, index() returns ''ValueError''
print(ages1.index(0))#Output: ValueError:
&lt;/pre&gt;

In programming, if such error occurs, program gets terminated. It can be solved using exception handling.
e.g.
&lt;pre&gt;
ages1 = [11,23,12,23,45]

try:
    print(ages1.index(0))
except ValueError:
    print(&quot;Exception has occured&quot;)    
    print(&quot;Element is not found in the list&quot;)

&lt;/pre&gt;
&lt;pre&gt;
'''Output: 
Exception has occured
Element is not found in the list
'''&lt;/pre&gt;
[[#TOP]]

=== using 'in' operator===
''in'' operator is used to check whether a particular element is available in the list or not.e.g.

&lt;pre&gt;
ages1 = [11,23,12,23,45]
no=11

if no in ages1:
    print(&quot;no is there in the list&quot;)
else:    
    print(&quot;no is NOT there in the list&quot;)
&lt;/pre&gt;
&lt;pre&gt;
#Output: no is there in the list
&lt;/pre&gt;

'''Number is not there in the list'''
&lt;pre&gt;
ages1 = [11,23,12,23,45]
no=15

if no in ages1:
    print(&quot;no is there in the list&quot;)
else:    
    print(&quot;no is NOT there in the list&quot;)
&lt;/pre&gt;
&lt;pre&gt;
Output: no is NOT there in the list
&lt;/pre&gt;


==Updating the List==
The lists can be updated using ''append'' or ''insert'' function.  Append adds the element to the end of the list and Insert adds the element in the specified position.
   List_2.append(&quot;Sheela&quot;)    # add the element 'Sheela' to the end of the list.
   print (List_2) will output 
   ['Kala', 'Mala', 'Sheela']
   
   List_2.insert(1,&quot;Bala&quot;)    # add the element &quot;Bala&quot; in the list at the index 1.
   print (List_2) will output 
   ['Kala', 'Bala','Mala', 'Sheela']

=== Extend the list by adding elements of other list at end using extend()===
&lt;pre&gt;
ages = [11,23,12,23,45]
ages.extend([57,58])
print(ages)
&lt;/pre&gt;

&lt;pre&gt;
#Output: [11, 23, 12, 23, 45, 57, 58]
&lt;/pre&gt;

==== Difference between ''append and extend'' ====
Difference between append and extend can be easily understood, by the following example.

&lt;pre&gt;
appendlist = [11,23,12,23,45]
appendlist.append([57,58])

extendlist= [11,23,12,23,45]
extendlist.extend([57,58])
&lt;/pre&gt;

&lt;pre&gt;
'''Output:
[11, 23, 12, 23, 45, [57, 58]]
[11, 23, 12, 23, 45, 57, 58]'''
&lt;/pre&gt;

==Basic Operations on List==
===Frequency of Occurrence===
list.count(object) will return the number of times the object occur in the list.
  '''Example'''
    ages = [11,23,12,23,45,43,22,24,23]
    ages.count(23) will return
    3
    ages.count(100) will return
    0

===Length of the List===
len(list) will return the length of the list ie. the number of objects in the list.
  '''Example'''
    ages = [11,23,12,23,45,43,22,24,23]
    len(ages) will output
    9
To print the objects in the list either use ''for item in list'' or ''for index in range(len(list))''
    for item in ages:       
        print (item)  
        (OR)
    for index in range(len(ages)) :
        print (ages[index])
===Sort the List===
list.sort() will sort the list in ascending order
  '''Example'''
    ages = [11,23,12,23,45,43,22,24,23]
    ages.sort() 
    print (ages) 
    [11, 12, 22, 23, 23, 23, 24, 43, 45]
===Sort the List using sorted() function===
sorted(list1) will sort the list and return a new list, it doesn't modify the original list
&lt;br&gt;'''Example: Sort in ascending order'''
&lt;pre&gt;
ages = [11,23,12,23,45,43,22,24,23]
newList=sorted(ages)
print(newList)

#Output: [11, 12, 22, 23, 23, 23, 24, 43, 45]
&lt;/pre&gt;

&lt;br&gt;'''Example: Sort in descending order'''
&lt;pre&gt;
ages = [11,23,12,23,45,43,22,24,23]
newList=sorted(ages,reverse=True)
print(newList)

#Output: [45, 43, 24, 23, 23, 23, 22, 12, 11]
&lt;/pre&gt;

===Reverse the List===
list.reverse() will reverse the original list
  '''Example'''
    ages = [11, 12, 22, 23, 23, 23, 24, 43, 45]
    ages.reverse()
    print (ages)
    [45, 43, 24, 23, 23, 23, 22, 12, 11]

Both sort() and reverse() list operation will work on numeric and alphanumeric data list.

A special use of the reverse() function is to descend a list that is sorted in ascending order.

  '''Example'''
&lt;pre&gt;
ages = [11, 12, 22, 23, 23, 23, 24, 43, 45]
ages.sort()
print(ages)
ages.reverse()
print(ages)
&lt;/pre&gt;

===Slicing===
Used to retrieve an object or objects in a range as a list  
  '''Example'''
Use ''list[index]'' to retrieve the object at the given index
         In [1]: student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
         In [2]: student[3]     #Object at index 3.  Remember index starts at 0
         Out[2]: 'Geetha'      


Use ''list[start_index : end_index + 1]'' to retrieve objects from the start_index to end_index 
         In [3]: student[2:4]     # Objects from index 2 to 3 as List. Note the [ and ]
         Out[3]: ['Vijay', 'Geetha']   


Use ''list[:]'' to retrieve objects from the starting of the list to the end of the list. 
The default start value will be the starting index of the list (i.e. 0) and the default end value
will be the length of the list 
         In [4]: student[:]        # prints the entire list
         Out[4]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma', 'Janani']


         In [5]: student[:5]       # prints the objects from the start of the list upto object at index 4
         Out[5]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran']


         In [6]: student[2:]       # prints the objects from index 2 upto the end of the list
         Out[6]: ['Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma', 'Janani']


Negative index too is available in Python. It starts from last element of the list. i.e.

         In [7]:student[-1]        #prints last index of list
         Out[7]: 'Janani'


         In [8]:student[-1:-8]     #prints empty list
         Out[8]: []


         In [9]:student[-8:-1]     #prints -8th index to -1st index elements
         Out[9]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma']

===Removing Item from list ===
----

Is used to remove a specific item from the list.

'''Example:'''
 
Use list.remove(entry/value)  Or   del list[index]    Or list.pop(index)
         student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
         student.remove(&quot;Arun&quot;)   #This will delete item &quot;Arun&quot;
         Or    
         del student[0]           # This will delete item at index 0
         Or
         student.pop(0)         # This will delete and return item at index 0


         print(student)    
         Output: [&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]

===Delete list ===
----
Used to delete complete list

'''Example'''

Use del &lt;list name&gt;
         student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
         del student

===Concatenation of two lists===
----
''+'' is the concatenation operator which is used concatenate two lists. 
&lt;pre&gt;
ages1 = [11,23,12,23,45]
ages2 = [25, 24, 43, 47]
age=ages1+ages2
print(age)
#Output: [11, 23, 12, 23, 45, 25, 24, 43, 47]
&lt;/pre&gt;

===Repeatation of a list ===
----
''*'' is the operator to repeat a particular list.
&lt;pre&gt;
ages1 = [11,23,12,23,45]
age=ages1*5 #ages1 list is repeated 5 times and stroed in ''age'' list
print(age)

#Output: [11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45]
&lt;/pre&gt;
====Conditional Statements====
    Conditionals are used to check the condition and change the flow of the program 
accordingly. They are realized in programming languages through if statement. The 
syntax is as follows :
         if condition : 
            statement
    '''Note:''' Do not forget indentation (inserting space/tab) in the line after the
 if condition.
    
    In case you want to execute a set of statements when a condition is true and another

set of statement when the condition is false.
         if condition : 
            statement 1
         else :
            statement 2
    
    Multiple if-else statements can be written as follows:
         if condition_1 : 
            statement 1
         elif condition_2 : # 'elif' is short for 'else if'
            statement 2
         elif condition_3 :
            statement 3
        .
        .
         else :
            final statement

=Loops and Conditionals : Fizzbuzz=
====Loops====

    Loops are used to execute a set of repetitive statements. They are realized
 through 'while' and 'for' loops in programming languages. The syntax of 'for' loop is 
as follows :
        for LOOPVARIABLE in SEQUENCE: 
            STATEMENTS
    '''e.g.''' to print all the data from a list we can write:
        for item in list_name
            print(item)
    OR
        for index in range(len(list_name))
            print(list_name[index])
    
    The syntax for while loop is as follows :
    
        while BOOLEANEXPRESSION: 
            STATEMENTS
            INCREMENT/DECREMENT
    
    '''e.g.''' if we want to print all numbers from 1 to 10
        i=1
        while i&lt;=10 :
            print(i,&quot; &quot;)
            i=i+1
    
    'while' loop has indefinite iteration (run-time unknown). So, there must be loop
 break statement in it.
 Whereas 'for' loop is definite in nature (i.e. known or predictable span).&lt;br&gt;

&lt;b&gt;NOTE: Python doesn't have anything like do-while loop.&lt;/b&gt;

==Implementation==
Here, we try to demonstrate the concept of loops and conditionals through a game called Fizzbuzz. The rules are as follows :&lt;br/&gt;
[[File:fizzBuzz.gif]]

• if input number is a multiple of ’3’ print ”Fizz”
&lt;br/&gt;
• if input number is a multiple of ’5’ print ”Buzz”
&lt;br/&gt;
• if input number is a multiple of both '3' and ’5’ print ”FizzBuzz”
&lt;br/&gt;
The pseudo code is as follows :
&lt;pre&gt;
   If input no % 3 == 0 and  input no % 5 == 0 : 
       print ”Fizzbuzz”
   else if input no % 3 == 0 : 
       print ”Fizz”
   else if input no % 5 == 0 : 
       print ”Buzz”
   else :
       print the input no
&lt;/pre&gt;
The order of statements execution matters to get the desired output. The highest priority condition should be first followed by other. In fizzbuzz programming, first checking should be done for both divisibility of 3 and 5. If condition not satisfied only then it should check individually for 3 or 5. So carefully choosing the order is crucial for better programming.
Note: There is some effect of present condition statements chosen on next conditions statements. That is why in first attempt fizzbuzz programming got struck.

Example: 
&lt;pre&gt;
#Code to achieve the above requirement in python3.
i = int(input(&quot;Enter the number&quot;)) 
if i%3 == 0 and i%5 == 0: print(i,&quot;FizzBuzz&quot;)  
elif i%5 == 0: print(i,&quot;Buzz&quot;)
elif i%3 == 0: print(i,&quot;Fizz&quot;)
else: print(i)
&lt;/pre&gt;
Lets put the same into a loop for a range given by the user.
&lt;pre&gt;
def fizzbuzzgame(start,stop):
    for i in range(start,stop+1):
        if i%3 == 0 and i%5 == 0:
            print(i,&quot;FizzBuzz&quot;)
        elif i%5 == 0:
            print(i,&quot;Buzz&quot;)
        elif i%3 == 0:
            print(i,&quot;Fizz&quot;)
        else: print(i)

fizzbuzzgame(50,100)
&lt;/pre&gt;


=== Fizz Buzz game in Interactive mode with Score ===
'''By Ms. Ami Tusharkant Choksi'''
&lt;pre&gt;
def fizzbuzzgame(i):
        if i%3 == 0 and i%5 == 0:
            print(i,&quot;FizzBuzz&quot;)
            return(&quot;fzbz&quot;)
        elif i%5 == 0:
            print(i,&quot;Buzz&quot;)
            return(&quot;bz&quot;)
        elif i%3 == 0:
            print(i,&quot;Fizz&quot;)
            return(&quot;fz&quot;)
        else:
            print(i)
            return(&quot;no&quot;)

ch = 'y'
fizzbuzz=0
fizz=0
buzz=0
nothing=0
print(&quot;&quot;&quot;
 _____  ____  _____  _____  ____   __ __  _____  _____       ____   ____  ___ ___    ___ 
|     ||    ||     ||     ||    \ |  |  ||     ||     |     /    | /    ||   |   |  /  _]
|   __| |  | |__/  ||__/  ||  o  )|  |  ||__/  ||__/  |    |   __||  o  || _   _ | /  [_ 
|  |_   |  | |   __||   __||     ||  |  ||   __||   __|    |  |  ||     ||  \_/  ||    _]
|   _]  |  | |  /  ||  /  ||  O  ||  :  ||  /  ||  /  |    |  |_ ||  _  ||   |   ||   [_ 
|  |    |  | |     ||     ||     ||     ||     ||     |    |     ||  |  ||   |   ||     |
|__|   |____||_____||_____||_____| \__,_||_____||_____|    |___,_||__|__||___|___||_____|
                                                                                         
&quot;&quot;&quot;)   

while(ch == 'y'):
    n=int(input(&quot;Enter a Number : &quot;))
    winLoose=fizzbuzzgame(n)
    if(winLoose == &quot;fz&quot;):
        fizz+=1
    elif(winLoose == &quot;bz&quot;):
        buzz+=1
    elif(winLoose == &quot;fzbz&quot;):
        fizzbuzz+=1
    ch=input(&quot;Do you want to continue playing the game : (y/n)&quot;)
    if(ch=='n'):
        print('Congratulations, your score is\n FizzBuzz:%d\nFizz:%d\nBuzz:%d' %
(fizzbuzz,fizz,buzz))
    
'''Sample Output:

 _____  ____  _____  _____  ____   __ __  _____  _____       ____   ____  ___ ___    ___ 
|     ||    ||     ||     ||    \ |  |  ||     ||     |     /    | /    ||   |   |  /  _]
|   __| |  | |__/  ||__/  ||  o  )|  |  ||__/  ||__/  |    |   __||  o  || _   _ | /  [_ 
|  |_   |  | |   __||   __||     ||  |  ||   __||   __|    |  |  ||     ||  \_/  ||    _]
|   _]  |  | |  /  ||  /  ||  O  ||  :  ||  /  ||  /  |    |  |_ ||  _  ||   |   ||   [_ 
|  |    |  | |     ||     ||     ||     ||     ||     |    |     ||  |  ||   |   ||     |
|__|   |____||_____||_____||_____| \__,_||_____||_____|    |___,_||__|__||___|___||_____|
                                                                                         

Enter a Number : 666
666 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 777
777 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 555
555 FizzBuzz
Do you want to continue playing the game : (y/n)y
Enter a Number : 1
1
Do you want to continue playing the game : (y/n)y
Enter a Number : 789
789 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 25
25 Buzz
Do you want to continue playing the game : (y/n)n
Congratulations, your score is

FizzBuzz:1
Fizz:3
Buzz:1

&lt;/pre&gt;

=Crowd Computing: Just Estimate=
==Wisdom of Crowds==
The concept of ’Wisdom of Crowds’ was proposed by Francis Galton. A weight-judging competition was carried on at the annual show of the West of England Fat Stock and Poultry Exhibition recently held at Plymouth, A fat ox having been selected, competitors bought stamped and numbered cards, each, on which to inscribe their respective names, addresses, and estimates of what the ox would weigh after it had been slaughtered. Those who guessed most successfully received prizes. About 8oo tickets were issued to the par- ticipants. The middlemost estimate of all the estimates recorded was 1207 lbs and the actual weight of the ox was 1198 lbs.

==Our Experiment==
The crowd had to guess the number of candies/gems in a jar. Around 75 people participated in the experiment. The actual number of gems in the jar were 375. The median of all estimates came out to be 300 and the mean of all the estimates came out to be around 396. Median underestimated and mean overestimated the actual value. So according to recent studies, Trimmed mean must be used as an aggregate measure to estimate where Wisdom of Crowds is involved.
[[File:Gemsjar.jpg|center|200px|caption]]

===Trimmed Mean===
In these kinds of experiments, 10% trimmed mean is usually followed. For calculating 10% trimmed mean, remove 10% smallest and 10% largest values from the sample. Calculate the mean of the sample obtained. In the above experiment, the trimmed mean came out to be around 351 which is very close to the actual value.

==Implementation==
Here, we try to demonstrate the concept of trimmed mean through crowd computing.
 Input a list of estimates done by the crowd .
 Sort the list.
 Remove the 10% smallest values.
 Remove the 10% largest values.
 Calculate the mean of the new list obtained .&lt;hr&gt;

==Data of Experiment==       
    Estimates =[1000,1010,1786,2000,1500,1500,100,120,150,150,150,170,175,180,197,200,200,200,200,200,200,220,220,220,220,234,250,250,250,250,250,250,250,250,250,263,270,275,275,286,300,
                300,300,300,300,300,300,300,320,350,350,350,400, 400,400,400,400,450,467,500,500,500,500,500,500,500,550,550,600,600,600,650,700,700,720]

    '''CODE:'''
&lt;pre&gt;
Estimates = [1000,1010,1786,2000,1500,1500,100,120,150,150,150,170,175,180,197,200,200,200,200,200,200,220,220,220,220,234,250,250,250,250,250,250,250,250,250,263,270,275,275,286,300,                300,300,300,300,300,300,300,320,350,350,350,400,400,400,400,400,450,467,500,500,500,500,500,500,500,550,550,600,600,600,650,700,700,720]
Estimates.sort()
offset = int(0.10*len(Estimates))
for i in range(offset):
       del Estimates[0]
       del Estimates[-1]
Sum = 0    
for i in range(len(Estimates)):
       Sum += Estimates[i]
Mean_Value = Sum/len(Estimates)
print(&quot;Mean : &quot;, int(Mean_Value))
#Output:
Mean :  351
&lt;/pre&gt;
&lt;hr&gt;
==Trimmed Mean for the above example== 
&lt;h3&gt;Using scipy library&lt;/h3&gt;
&lt;pre&gt;
#import scipy to use the method of trim_mean
from scipy import stats
trimMean = stats.trim_mean(Estimates, 0.1) # Trim 10% at both ends
print(&quot;Trimmed Mean : &quot;,trimMean)
#Output:
Trimmed Mean :  335.1020408163265
&lt;/pre&gt;

&lt;h3&gt;Without using scipy library&lt;/h3&gt;
&lt;pre&gt;
#Trimmed mean with 10%
p=10/100
#sorted data
data=[2, 4, 6, 7, 11, 21, 81, 90, 105, 121]
n = len(data)
#Remove elements from both end
rem=int(n*p)
newData = data[rem:-rem]
mean = 0
for i in newData:
    mean += i
mean = int(mean/len(newData))
print(&quot;Trimmed mean : &quot;,mean)
#Output: Trimmed mean :  40
&lt;/pre&gt;
[[#Top]]

=Jumbled_Words Permutations: Jumbled Words=
==What are Permutations ?==
A permutation also called ordering of selected number of elements from a list denoted by nPr here we are choosing all elements of a list and so n=r&lt;br&gt;
nPr=n!/(n-r)!&lt;br&gt; as n=r
nPn=n!&lt;br&gt; which gives all possible arrangement of elements present in a list.

 For example, permutations of list [1,2,3] are [1,2,3], [1,3,2], [2,1,3], [2,3,1], 
[3,1,2], and [3,2,1]. 
The number of permutations of a list of elements nPn is given by n!. For example, there are 2! = 2 x 1 = 2 permutations of [1,2], namely [1,2] and [2,1], and 3! = 3 x 2 x 1 = 6 permutations of [1,2,3], as mentioned above.&lt;br/&gt;
[[File:Permutations.jpg]]

==Implementation==
Here, we try to demonstrate the concept of permutations through jumbled words. It is a two player game in which one person presents the other person a different permutation of the word in his mind. The other person has to guess the right word. If he guesses, the he wins otherwise he loses.
 Input an list of words.
 Randomly pick a word from the list of words .
 Shuffle this word and present it to the other player.
 if word guesses by the player is same as the one picked from list of w
     player wins
 else
     player loses

ALTERNATE CODE TO GENERATE THIS GAME:
&lt;pre&gt;
import random
p1=input(&quot;enter player 1 name:&quot;)
p2=input(&quot;enter player 2 name:&quot;)
l=[&quot;rainbow&quot;,&quot;computer&quot;,&quot;robot&quot;,&quot;butter&quot;,&quot;vegetable&quot;,&quot;science&quot;,&quot;correct&quot;]
c1=c2=a1=a2=f1=f2=0
k=1
i=3
def play():
    n=random.choice(l)        ##n=chooses a word from list l
    l1=[]
    for j in n:
       l1.append(j)      ##creates a list for word in n
    for t in range(len(l1)):
       p=random.choice(l1)     ##this randomly displays letters in the list
       print(p)
       l1.remove(p)          ##to avoid the repetition of a letter
    s=input(&quot;enter the word:&quot;)
    if(s==n):
        print(&quot;correct&quot;)
        return 1
    else:
        print(&quot;not correct&quot;)
        print(&quot;answer is&quot;,n)
        return 0
def stat():
     print(&quot;player 1:&quot;)
     print(&quot;score:&quot;,c1)
     print(&quot;answered:&quot;,a1)
     print(&quot;failed:&quot;,f1)
     print(&quot;.............&quot;)
     print(&quot;player 2:&quot;)
     print(&quot;score:&quot;,c2)
     print(&quot;answered:&quot;,a2)
     print(&quot;failed&quot;,f2)
     if(c1&gt;c2):
         print(p1,&quot; won over &quot;,p2)
     elif(c1==c2):
         print(&quot;draw game&quot;)
     else:
         print(p2,&quot; won over &quot;,p1) 
while(i!=4):
      if(i==3):
         if(k==1):
             print(&quot;player 1 turn&quot;)
             print(&quot;your jumbled word is:&quot;)
             k=k+1
             m=play()
             if(m==1):      ##if guessed answer is correct,then score and no.of answered count will be increased
                c1+=1
                a1+=1
             else:
                f1+=1       ##else count of no.of failed to answered will be incremented
         else:
             print(&quot;player 2 turn&quot;)
             print(&quot;your jumbled word is:&quot;)
             k=k-1
             m=play()
             if(m==1):
                c2=c2+1
                a2=a2+1
             else:
                f2=f2+1
       if(i==2):
             print(&quot;present status&quot;)
             stat()
       i=int(input(&quot;enter your choice  1.stop 2.status 3.continue&quot;))
       if(i==1):
             stat()
             i=i+3
&lt;/pre&gt;
&lt;hr&gt;
=== JumbledWord Simple Logic, In Short ===
[[File:jumbledWord.gif]]
&lt;hr&gt;
'''Logic to create a Jumbled Word'''
&lt;hr&gt;
&lt;pre&gt;
#Get Jumbled Word and print it Horizontally
import random

def getJumbledWord(b):
    jumble=''
    l1 = [ b[i] for i in range(0, len(b)) ]
    for t in range(len(l1)):
       p=random.choice(l1)     ##this randomly gets letters from the list      
       jumble=jumble+p       
       l1.remove(p)
    return jumble

b=input(&quot;Enter a word to make it jumbled : &quot;)
print(&quot;Jumbled Word : &quot;, getJumbledWord(b))
&lt;/pre&gt;
&lt;hr&gt;
'''Another Logic to create a Jumbled Word'''
&lt;hr&gt;
&lt;pre&gt;
b=input(&quot;Enter a word to make it jumbled : &quot;)

def getJumbledWord1(b):
    l1 = [ b[i] for i in range(0, len(b)) ]
    random.shuffle(l1)
    str1 = ''.join(l1)
    return str1

print(&quot;Jumbled Word : &quot;, getJumbledWord1(b))
&lt;/pre&gt;

====Sample Output:====
&lt;pre&gt;
---- Output1 
Enter a word to make it jumbled : butter
Jumbled Word :  tbture

---- Output2 
Enter a word to make it jumbled : petriotism
Jumbled Word :  pittrosime
&lt;/pre&gt;

=Theory of Evolution=

== What is Evolution ? ==
Evolution is the change in heritable characteristics over successive generations. The theory of evolution explains that DNA, which acts as a carrier of genetic information from one generation to other, tends to change or mutate occasionally. These changes are reflected in next generations to come. This is how life has evolved on earth from bacteria to human beings.&lt;br&gt;
[[File:Evolution.png|500px]]

== Implementation ==
An array representing DNA is stored in a file. As genes are forms of DNA, they contain information to be transferred to forthcoming generations. Assume that information is in the form of bits (in the form of 0s and 1s). A number is picked randomly from 1 to the size of the array. A new parameter has been introduced which decides whether mutation would occur or not. If the value of this new parameter is 1 (It is picked randomly from 1 to 100), then only change is reflected down the generations, otherwise it is not. The pseudo code is as follows :
Input an array containing genetic information .
Randomly generate a number (say m) from 1 to length of the array. Randomly generate other number (say p) from 1 to 100.
 
    if p is equal to 1 then 
        if m is 1 then
          set it to 0
        else
          set it to 1</text>
      <sha1>ild8u9caqn81tb911sadxlbw5vza06i</sha1>
    </revision>
    <revision>
      <id>3484</id>
      <parentid>3483</parentid>
      <timestamp>2018-09-27T13:12:14Z</timestamp>
      <contributor>
        <username>Sachinkr</username>
        <id>1743</id>
      </contributor>
      <comment>/* using 'in' operator */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="28148">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_3 Contributors of this page]
*Week 3 Playlist: https://www.youtube.com/playlist?list=PLc_j0TNIaWxOVx_z9jAM2UB3RqYNXaoEo
=List=
List is a flexible data structure used for storing a group of data separated by comma. The elements in a list need not be of the same data type.

'''Example:'''
       List_1 = [ 1, 2,3] or 
       List_1 = [&quot;coffee&quot;, &quot;Tea&quot;, &quot;Milk&quot;] or
       List_1 = [1,&quot;coffee&quot;, &quot;Tea&quot;, 3, &quot;5&quot;]

==List Creation==
&lt;pre&gt;a) A list can be created by simply putting values (separated by comma) between square brackets as given below,
       List_1 = [1,&quot;coffee&quot;, &quot;Tea&quot;, 3, &quot;5&quot;] #this creates a list by name List_1 containing following items


Or,
(b)A List can be created from scratch and elements can be added 
        List_2 = [ ]
        List_2.append(&quot;Kala&quot;)
        List_2.append(&quot;Mala&quot;)
Here we use &quot;append&quot; ,which is a function in python that enable us to append or attach an element to a list .
Thus List_2 will now hold [&quot;Kala&quot;,&quot;Mala&quot;]
&lt;/pre&gt;
[[#TOP]]

==Operations and Methods to work with List==
&lt;pre&gt;
a = [25,30,50,90,12,13]
b = [100,300,500,200,250]
&lt;/pre&gt;
&lt;hr&gt;
&lt;table border=2&gt;
  &lt;tr&gt;
    &lt;th&gt;&lt;b&gt;Method/&lt;br&gt;Operator&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Function&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Syntax&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Output&lt;/b&gt;&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;len()&lt;/td&gt;
    &lt;td&gt;Find length of a list&lt;/td&gt;
    &lt;td&gt;len(a)&lt;/td&gt;
    &lt;td&gt;6&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;max()&lt;/td&gt;
    &lt;td&gt;Find maximum element from the list&lt;/td&gt;
    &lt;td&gt;max(a)&lt;/td&gt;
    &lt;td&gt;90&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;min()&lt;/td&gt;
    &lt;td&gt;Find minimum element from the list&lt;/td&gt;
    &lt;td&gt;min(a)&lt;/td&gt;
    &lt;td&gt;12&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sum()&lt;/td&gt;
    &lt;td&gt;Returns sum of all elements of the list&lt;/td&gt;
    &lt;td&gt;sum(a)&lt;/td&gt;
    &lt;td&gt;220&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;reverse()&lt;/td&gt;
    &lt;td&gt;Reverses the original list&lt;/td&gt;
    &lt;td&gt;a.reverse()&lt;/td&gt;
    &lt;td&gt;[13, 12, 90, 50, 30, 25]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sort()&lt;/td&gt;
    &lt;td&gt;Sorts the original list in ascending order&lt;/td&gt;
    &lt;td&gt;a.sort()&lt;/td&gt;
    &lt;td&gt;[12, 13, 25, 30, 50, 90]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sorted()&lt;/td&gt;
    &lt;td&gt;Returns the new sorted list &lt;/td&gt;
    &lt;td&gt;sorted(a)&lt;/td&gt;
    &lt;td&gt;[12, 13, 25, 30, 50, 90]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;insert()&lt;/td&gt;
    &lt;td&gt;Insert at a particular index in the list, and shifts remaining elements&lt;/td&gt;
    &lt;td&gt;a.insert(3,3)&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 3, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;append()&lt;/td&gt;
    &lt;td&gt;Adds elements/object to the end of the list&lt;/td&gt;
    &lt;td&gt;a.append(5)&lt;br&gt;a.append([10,20])&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 5]&lt;br&gt;[25, 30, 50, 90, 12, 13, [10, 20]]&lt;br&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;extend()&lt;/td&gt;
    &lt;td&gt;Adds object to the end of the list as elements not as object&lt;/td&gt;
    &lt;td&gt;a.extend([10,20])&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 10, 20]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;*&amp;nbsp;&amp;nbsp;Repeatation&lt;br&gt;operator&lt;/td&gt;
    &lt;td&gt;Repeat the list for n times and returns a new list&lt;/td&gt;
    &lt;td&gt;a*2&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 25, 30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;+ Concatenation&lt;br&gt;operator&lt;/td&gt;
    &lt;td&gt;Concatenates two lists, and returns a new list&lt;/td&gt;
    &lt;td&gt;a+b&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 100, 300, 500, 200, 250]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;index()&lt;/td&gt;
    &lt;td&gt;Finds index of a particular element in the list or not&lt;/td&gt;
    &lt;td&gt;a.index(25)&lt;br&gt;a.index(0)&lt;br&gt;&lt;/td&gt;
    &lt;td&gt;0&lt;br&gt;&lt;br&gt;ValueError: 0 is not in list&lt;br&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;in operator&lt;/td&gt;
    &lt;td&gt;Finds whether a particular element is in the list or not, returns boolean&lt;/td&gt;
    &lt;td&gt;25 in a&lt;/td&gt;
    &lt;td&gt;True&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;not in operator&lt;/td&gt;
    &lt;td&gt;Checks if element is not available in list, returns boolean&lt;/td&gt;
    &lt;td&gt;25 not in a&lt;/td&gt;
    &lt;td&gt;False&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;count()&lt;/td&gt;
    &lt;td&gt;Counts the number of occurence of an element in the list&lt;/td&gt;
    &lt;td&gt;a.count(25)&lt;/td&gt;
    &lt;td&gt;1&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;remove()&lt;/td&gt;
    &lt;td&gt;Removes an element from the list&lt;/td&gt;
    &lt;td&gt;a.remove(25)&lt;/td&gt;
    &lt;td&gt; [30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;pop()&lt;/td&gt;
    &lt;td&gt;Delete and return item at index 0&lt;/td&gt;
    &lt;td&gt;a.pop(0)&lt;/td&gt;
    &lt;td&gt;25 , a will be [30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;del&lt;/td&gt;
    &lt;td&gt;Deletes item at a particular index from the list&lt;/td&gt;
    &lt;td&gt;del a[0]&lt;/td&gt;
    &lt;td&gt;[30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;

==Printing the List==
=== Print whole list ===
A list can be printed simply or using a ''for / while'' loop 

 print(List_2)     # To print the entire list
This code will print      
 ['Kala','Mala']     

===Print element at a particular index===
&lt;pre&gt;
Using index position
    List_2[0]     # prints 'Kala' ,i.e,the value at index position 0.
    List_2[1]     # prints 'Mala'.
&lt;/pre&gt;
=== Without using index position ===
&lt;pre&gt;
for item in List_2:   # here item is a variable used to access elements in list.
       print(item)
   This code snippet prints 
    Kala
    Mala
&lt;/pre&gt;
[[#TOP]]

==Search for a particular element in list==
Elements in a list can be searched by one of the two ways:
=== using index() function===
&lt;pre&gt;
ages1 = [11,23,12,23,45]

#if element is available in the list, index() returns the index value on which, the element is present.
print(ages1.index(45))#Output: 4

#if element is not available in the list, index() returns ''ValueError''
print(ages1.index(0))#Output: ValueError:
&lt;/pre&gt;

In programming, if such error occurs, program gets terminated. It can be solved using exception handling.
e.g.
&lt;pre&gt;
ages1 = [11,23,12,23,45]

try:
    print(ages1.index(0))
except ValueError:
    print(&quot;Exception has occured&quot;)    
    print(&quot;Element is not found in the list&quot;)

&lt;/pre&gt;
&lt;pre&gt;
'''Output: 
Exception has occured
Element is not found in the list
'''&lt;/pre&gt;
[[#TOP]]

=== using 'in' operator===
''in'' operator is used to check whether a particular element is available in the list or not.e.g.

&lt;pre&gt;
ages1 = [11,23,12,23,45]
no=11

if no in ages1:
    print(&quot;no is there in the list&quot;)
else:    
    print(&quot;no is NOT there in the list&quot;)
&lt;/pre&gt;
&lt;pre&gt;
#Output: no is there in the list
&lt;/pre&gt;

'''Number is not there in the list'''
&lt;pre&gt;
ages1 = [11,23,12,23,45]
no=15

if no in ages1:
    print(&quot;no is there in the list&quot;)
else:    
    print(&quot;no is NOT there in the list&quot;)
&lt;/pre&gt;
&lt;pre&gt;
Output: no is NOT there in the list
&lt;/pre&gt;
[[#TOP]]

==Updating the List==
The lists can be updated using ''append'' or ''insert'' function.  Append adds the element to the end of the list and Insert adds the element in the specified position.
   List_2.append(&quot;Sheela&quot;)    # add the element 'Sheela' to the end of the list.
   print (List_2) will output 
   ['Kala', 'Mala', 'Sheela']
   
   List_2.insert(1,&quot;Bala&quot;)    # add the element &quot;Bala&quot; in the list at the index 1.
   print (List_2) will output 
   ['Kala', 'Bala','Mala', 'Sheela']

=== Extend the list by adding elements of other list at end using extend()===
&lt;pre&gt;
ages = [11,23,12,23,45]
ages.extend([57,58])
print(ages)
&lt;/pre&gt;

&lt;pre&gt;
#Output: [11, 23, 12, 23, 45, 57, 58]
&lt;/pre&gt;

==== Difference between ''append and extend'' ====
Difference between append and extend can be easily understood, by the following example.

&lt;pre&gt;
appendlist = [11,23,12,23,45]
appendlist.append([57,58])

extendlist= [11,23,12,23,45]
extendlist.extend([57,58])
&lt;/pre&gt;

&lt;pre&gt;
'''Output:
[11, 23, 12, 23, 45, [57, 58]]
[11, 23, 12, 23, 45, 57, 58]'''
&lt;/pre&gt;

==Basic Operations on List==
===Frequency of Occurrence===
list.count(object) will return the number of times the object occur in the list.
  '''Example'''
    ages = [11,23,12,23,45,43,22,24,23]
    ages.count(23) will return
    3
    ages.count(100) will return
    0

===Length of the List===
len(list) will return the length of the list ie. the number of objects in the list.
  '''Example'''
    ages = [11,23,12,23,45,43,22,24,23]
    len(ages) will output
    9
To print the objects in the list either use ''for item in list'' or ''for index in range(len(list))''
    for item in ages:       
        print (item)  
        (OR)
    for index in range(len(ages)) :
        print (ages[index])
===Sort the List===
list.sort() will sort the list in ascending order
  '''Example'''
    ages = [11,23,12,23,45,43,22,24,23]
    ages.sort() 
    print (ages) 
    [11, 12, 22, 23, 23, 23, 24, 43, 45]
===Sort the List using sorted() function===
sorted(list1) will sort the list and return a new list, it doesn't modify the original list
&lt;br&gt;'''Example: Sort in ascending order'''
&lt;pre&gt;
ages = [11,23,12,23,45,43,22,24,23]
newList=sorted(ages)
print(newList)

#Output: [11, 12, 22, 23, 23, 23, 24, 43, 45]
&lt;/pre&gt;

&lt;br&gt;'''Example: Sort in descending order'''
&lt;pre&gt;
ages = [11,23,12,23,45,43,22,24,23]
newList=sorted(ages,reverse=True)
print(newList)

#Output: [45, 43, 24, 23, 23, 23, 22, 12, 11]
&lt;/pre&gt;

===Reverse the List===
list.reverse() will reverse the original list
  '''Example'''
    ages = [11, 12, 22, 23, 23, 23, 24, 43, 45]
    ages.reverse()
    print (ages)
    [45, 43, 24, 23, 23, 23, 22, 12, 11]

Both sort() and reverse() list operation will work on numeric and alphanumeric data list.

A special use of the reverse() function is to descend a list that is sorted in ascending order.

  '''Example'''
&lt;pre&gt;
ages = [11, 12, 22, 23, 23, 23, 24, 43, 45]
ages.sort()
print(ages)
ages.reverse()
print(ages)
&lt;/pre&gt;

===Slicing===
Used to retrieve an object or objects in a range as a list  
  '''Example'''
Use ''list[index]'' to retrieve the object at the given index
         In [1]: student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
         In [2]: student[3]     #Object at index 3.  Remember index starts at 0
         Out[2]: 'Geetha'      


Use ''list[start_index : end_index + 1]'' to retrieve objects from the start_index to end_index 
         In [3]: student[2:4]     # Objects from index 2 to 3 as List. Note the [ and ]
         Out[3]: ['Vijay', 'Geetha']   


Use ''list[:]'' to retrieve objects from the starting of the list to the end of the list. 
The default start value will be the starting index of the list (i.e. 0) and the default end value
will be the length of the list 
         In [4]: student[:]        # prints the entire list
         Out[4]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma', 'Janani']


         In [5]: student[:5]       # prints the objects from the start of the list upto object at index 4
         Out[5]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran']


         In [6]: student[2:]       # prints the objects from index 2 upto the end of the list
         Out[6]: ['Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma', 'Janani']


Negative index too is available in Python. It starts from last element of the list. i.e.

         In [7]:student[-1]        #prints last index of list
         Out[7]: 'Janani'


         In [8]:student[-1:-8]     #prints empty list
         Out[8]: []


         In [9]:student[-8:-1]     #prints -8th index to -1st index elements
         Out[9]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma']

===Removing Item from list ===
----

Is used to remove a specific item from the list.

'''Example:'''
 
Use list.remove(entry/value)  Or   del list[index]    Or list.pop(index)
         student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
         student.remove(&quot;Arun&quot;)   #This will delete item &quot;Arun&quot;
         Or    
         del student[0]           # This will delete item at index 0
         Or
         student.pop(0)         # This will delete and return item at index 0


         print(student)    
         Output: [&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]

===Delete list ===
----
Used to delete complete list

'''Example'''

Use del &lt;list name&gt;
         student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
         del student

===Concatenation of two lists===
----
''+'' is the concatenation operator which is used concatenate two lists. 
&lt;pre&gt;
ages1 = [11,23,12,23,45]
ages2 = [25, 24, 43, 47]
age=ages1+ages2
print(age)
#Output: [11, 23, 12, 23, 45, 25, 24, 43, 47]
&lt;/pre&gt;

===Repeatation of a list ===
----
''*'' is the operator to repeat a particular list.
&lt;pre&gt;
ages1 = [11,23,12,23,45]
age=ages1*5 #ages1 list is repeated 5 times and stroed in ''age'' list
print(age)

#Output: [11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45]
&lt;/pre&gt;
====Conditional Statements====
    Conditionals are used to check the condition and change the flow of the program 
accordingly. They are realized in programming languages through if statement. The 
syntax is as follows :
         if condition : 
            statement
    '''Note:''' Do not forget indentation (inserting space/tab) in the line after the
 if condition.
    
    In case you want to execute a set of statements when a condition is true and another

set of statement when the condition is false.
         if condition : 
            statement 1
         else :
            statement 2
    
    Multiple if-else statements can be written as follows:
         if condition_1 : 
            statement 1
         elif condition_2 : # 'elif' is short for 'else if'
            statement 2
         elif condition_3 :
            statement 3
        .
        .
         else :
            final statement

=Loops and Conditionals : Fizzbuzz=
====Loops====

    Loops are used to execute a set of repetitive statements. They are realized
 through 'while' and 'for' loops in programming languages. The syntax of 'for' loop is 
as follows :
        for LOOPVARIABLE in SEQUENCE: 
            STATEMENTS
    '''e.g.''' to print all the data from a list we can write:
        for item in list_name
            print(item)
    OR
        for index in range(len(list_name))
            print(list_name[index])
    
    The syntax for while loop is as follows :
    
        while BOOLEANEXPRESSION: 
            STATEMENTS
            INCREMENT/DECREMENT
    
    '''e.g.''' if we want to print all numbers from 1 to 10
        i=1
        while i&lt;=10 :
            print(i,&quot; &quot;)
            i=i+1
    
    'while' loop has indefinite iteration (run-time unknown). So, there must be loop
 break statement in it.
 Whereas 'for' loop is definite in nature (i.e. known or predictable span).&lt;br&gt;

&lt;b&gt;NOTE: Python doesn't have anything like do-while loop.&lt;/b&gt;

==Implementation==
Here, we try to demonstrate the concept of loops and conditionals through a game called Fizzbuzz. The rules are as follows :&lt;br/&gt;
[[File:fizzBuzz.gif]]

• if input number is a multiple of ’3’ print ”Fizz”
&lt;br/&gt;
• if input number is a multiple of ’5’ print ”Buzz”
&lt;br/&gt;
• if input number is a multiple of both '3' and ’5’ print ”FizzBuzz”
&lt;br/&gt;
The pseudo code is as follows :
&lt;pre&gt;
   If input no % 3 == 0 and  input no % 5 == 0 : 
       print ”Fizzbuzz”
   else if input no % 3 == 0 : 
       print ”Fizz”
   else if input no % 5 == 0 : 
       print ”Buzz”
   else :
       print the input no
&lt;/pre&gt;
The order of statements execution matters to get the desired output. The highest priority condition should be first followed by other. In fizzbuzz programming, first checking should be done for both divisibility of 3 and 5. If condition not satisfied only then it should check individually for 3 or 5. So carefully choosing the order is crucial for better programming.
Note: There is some effect of present condition statements chosen on next conditions statements. That is why in first attempt fizzbuzz programming got struck.

Example: 
&lt;pre&gt;
#Code to achieve the above requirement in python3.
i = int(input(&quot;Enter the number&quot;)) 
if i%3 == 0 and i%5 == 0: print(i,&quot;FizzBuzz&quot;)  
elif i%5 == 0: print(i,&quot;Buzz&quot;)
elif i%3 == 0: print(i,&quot;Fizz&quot;)
else: print(i)
&lt;/pre&gt;
Lets put the same into a loop for a range given by the user.
&lt;pre&gt;
def fizzbuzzgame(start,stop):
    for i in range(start,stop+1):
        if i%3 == 0 and i%5 == 0:
            print(i,&quot;FizzBuzz&quot;)
        elif i%5 == 0:
            print(i,&quot;Buzz&quot;)
        elif i%3 == 0:
            print(i,&quot;Fizz&quot;)
        else: print(i)

fizzbuzzgame(50,100)
&lt;/pre&gt;


=== Fizz Buzz game in Interactive mode with Score ===
'''By Ms. Ami Tusharkant Choksi'''
&lt;pre&gt;
def fizzbuzzgame(i):
        if i%3 == 0 and i%5 == 0:
            print(i,&quot;FizzBuzz&quot;)
            return(&quot;fzbz&quot;)
        elif i%5 == 0:
            print(i,&quot;Buzz&quot;)
            return(&quot;bz&quot;)
        elif i%3 == 0:
            print(i,&quot;Fizz&quot;)
            return(&quot;fz&quot;)
        else:
            print(i)
            return(&quot;no&quot;)

ch = 'y'
fizzbuzz=0
fizz=0
buzz=0
nothing=0
print(&quot;&quot;&quot;
 _____  ____  _____  _____  ____   __ __  _____  _____       ____   ____  ___ ___    ___ 
|     ||    ||     ||     ||    \ |  |  ||     ||     |     /    | /    ||   |   |  /  _]
|   __| |  | |__/  ||__/  ||  o  )|  |  ||__/  ||__/  |    |   __||  o  || _   _ | /  [_ 
|  |_   |  | |   __||   __||     ||  |  ||   __||   __|    |  |  ||     ||  \_/  ||    _]
|   _]  |  | |  /  ||  /  ||  O  ||  :  ||  /  ||  /  |    |  |_ ||  _  ||   |   ||   [_ 
|  |    |  | |     ||     ||     ||     ||     ||     |    |     ||  |  ||   |   ||     |
|__|   |____||_____||_____||_____| \__,_||_____||_____|    |___,_||__|__||___|___||_____|
                                                                                         
&quot;&quot;&quot;)   

while(ch == 'y'):
    n=int(input(&quot;Enter a Number : &quot;))
    winLoose=fizzbuzzgame(n)
    if(winLoose == &quot;fz&quot;):
        fizz+=1
    elif(winLoose == &quot;bz&quot;):
        buzz+=1
    elif(winLoose == &quot;fzbz&quot;):
        fizzbuzz+=1
    ch=input(&quot;Do you want to continue playing the game : (y/n)&quot;)
    if(ch=='n'):
        print('Congratulations, your score is\n FizzBuzz:%d\nFizz:%d\nBuzz:%d' %
(fizzbuzz,fizz,buzz))
    
'''Sample Output:

 _____  ____  _____  _____  ____   __ __  _____  _____       ____   ____  ___ ___    ___ 
|     ||    ||     ||     ||    \ |  |  ||     ||     |     /    | /    ||   |   |  /  _]
|   __| |  | |__/  ||__/  ||  o  )|  |  ||__/  ||__/  |    |   __||  o  || _   _ | /  [_ 
|  |_   |  | |   __||   __||     ||  |  ||   __||   __|    |  |  ||     ||  \_/  ||    _]
|   _]  |  | |  /  ||  /  ||  O  ||  :  ||  /  ||  /  |    |  |_ ||  _  ||   |   ||   [_ 
|  |    |  | |     ||     ||     ||     ||     ||     |    |     ||  |  ||   |   ||     |
|__|   |____||_____||_____||_____| \__,_||_____||_____|    |___,_||__|__||___|___||_____|
                                                                                         

Enter a Number : 666
666 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 777
777 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 555
555 FizzBuzz
Do you want to continue playing the game : (y/n)y
Enter a Number : 1
1
Do you want to continue playing the game : (y/n)y
Enter a Number : 789
789 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 25
25 Buzz
Do you want to continue playing the game : (y/n)n
Congratulations, your score is

FizzBuzz:1
Fizz:3
Buzz:1

&lt;/pre&gt;

=Crowd Computing: Just Estimate=
==Wisdom of Crowds==
The concept of ’Wisdom of Crowds’ was proposed by Francis Galton. A weight-judging competition was carried on at the annual show of the West of England Fat Stock and Poultry Exhibition recently held at Plymouth, A fat ox having been selected, competitors bought stamped and numbered cards, each, on which to inscribe their respective names, addresses, and estimates of what the ox would weigh after it had been slaughtered. Those who guessed most successfully received prizes. About 8oo tickets were issued to the par- ticipants. The middlemost estimate of all the estimates recorded was 1207 lbs and the actual weight of the ox was 1198 lbs.

==Our Experiment==
The crowd had to guess the number of candies/gems in a jar. Around 75 people participated in the experiment. The actual number of gems in the jar were 375. The median of all estimates came out to be 300 and the mean of all the estimates came out to be around 396. Median underestimated and mean overestimated the actual value. So according to recent studies, Trimmed mean must be used as an aggregate measure to estimate where Wisdom of Crowds is involved.
[[File:Gemsjar.jpg|center|200px|caption]]

===Trimmed Mean===
In these kinds of experiments, 10% trimmed mean is usually followed. For calculating 10% trimmed mean, remove 10% smallest and 10% largest values from the sample. Calculate the mean of the sample obtained. In the above experiment, the trimmed mean came out to be around 351 which is very close to the actual value.

==Implementation==
Here, we try to demonstrate the concept of trimmed mean through crowd computing.
 Input a list of estimates done by the crowd .
 Sort the list.
 Remove the 10% smallest values.
 Remove the 10% largest values.
 Calculate the mean of the new list obtained .&lt;hr&gt;

==Data of Experiment==       
    Estimates =[1000,1010,1786,2000,1500,1500,100,120,150,150,150,170,175,180,197,200,200,200,200,200,200,220,220,220,220,234,250,250,250,250,250,250,250,250,250,263,270,275,275,286,300,
                300,300,300,300,300,300,300,320,350,350,350,400, 400,400,400,400,450,467,500,500,500,500,500,500,500,550,550,600,600,600,650,700,700,720]

    '''CODE:'''
&lt;pre&gt;
Estimates = [1000,1010,1786,2000,1500,1500,100,120,150,150,150,170,175,180,197,200,200,200,200,200,200,220,220,220,220,234,250,250,250,250,250,250,250,250,250,263,270,275,275,286,300,                300,300,300,300,300,300,300,320,350,350,350,400,400,400,400,400,450,467,500,500,500,500,500,500,500,550,550,600,600,600,650,700,700,720]
Estimates.sort()
offset = int(0.10*len(Estimates))
for i in range(offset):
       del Estimates[0]
       del Estimates[-1]
Sum = 0    
for i in range(len(Estimates)):
       Sum += Estimates[i]
Mean_Value = Sum/len(Estimates)
print(&quot;Mean : &quot;, int(Mean_Value))
#Output:
Mean :  351
&lt;/pre&gt;
&lt;hr&gt;
==Trimmed Mean for the above example== 
&lt;h3&gt;Using scipy library&lt;/h3&gt;
&lt;pre&gt;
#import scipy to use the method of trim_mean
from scipy import stats
trimMean = stats.trim_mean(Estimates, 0.1) # Trim 10% at both ends
print(&quot;Trimmed Mean : &quot;,trimMean)
#Output:
Trimmed Mean :  335.1020408163265
&lt;/pre&gt;

&lt;h3&gt;Without using scipy library&lt;/h3&gt;
&lt;pre&gt;
#Trimmed mean with 10%
p=10/100
#sorted data
data=[2, 4, 6, 7, 11, 21, 81, 90, 105, 121]
n = len(data)
#Remove elements from both end
rem=int(n*p)
newData = data[rem:-rem]
mean = 0
for i in newData:
    mean += i
mean = int(mean/len(newData))
print(&quot;Trimmed mean : &quot;,mean)
#Output: Trimmed mean :  40
&lt;/pre&gt;
[[#Top]]

=Jumbled_Words Permutations: Jumbled Words=
==What are Permutations ?==
A permutation also called ordering of selected number of elements from a list denoted by nPr here we are choosing all elements of a list and so n=r&lt;br&gt;
nPr=n!/(n-r)!&lt;br&gt; as n=r
nPn=n!&lt;br&gt; which gives all possible arrangement of elements present in a list.

 For example, permutations of list [1,2,3] are [1,2,3], [1,3,2], [2,1,3], [2,3,1], 
[3,1,2], and [3,2,1]. 
The number of permutations of a list of elements nPn is given by n!. For example, there are 2! = 2 x 1 = 2 permutations of [1,2], namely [1,2] and [2,1], and 3! = 3 x 2 x 1 = 6 permutations of [1,2,3], as mentioned above.&lt;br/&gt;
[[File:Permutations.jpg]]

==Implementation==
Here, we try to demonstrate the concept of permutations through jumbled words. It is a two player game in which one person presents the other person a different permutation of the word in his mind. The other person has to guess the right word. If he guesses, the he wins otherwise he loses.
 Input an list of words.
 Randomly pick a word from the list of words .
 Shuffle this word and present it to the other player.
 if word guesses by the player is same as the one picked from list of w
     player wins
 else
     player loses

ALTERNATE CODE TO GENERATE THIS GAME:
&lt;pre&gt;
import random
p1=input(&quot;enter player 1 name:&quot;)
p2=input(&quot;enter player 2 name:&quot;)
l=[&quot;rainbow&quot;,&quot;computer&quot;,&quot;robot&quot;,&quot;butter&quot;,&quot;vegetable&quot;,&quot;science&quot;,&quot;correct&quot;]
c1=c2=a1=a2=f1=f2=0
k=1
i=3
def play():
    n=random.choice(l)        ##n=chooses a word from list l
    l1=[]
    for j in n:
       l1.append(j)      ##creates a list for word in n
    for t in range(len(l1)):
       p=random.choice(l1)     ##this randomly displays letters in the list
       print(p)
       l1.remove(p)          ##to avoid the repetition of a letter
    s=input(&quot;enter the word:&quot;)
    if(s==n):
        print(&quot;correct&quot;)
        return 1
    else:
        print(&quot;not correct&quot;)
        print(&quot;answer is&quot;,n)
        return 0
def stat():
     print(&quot;player 1:&quot;)
     print(&quot;score:&quot;,c1)
     print(&quot;answered:&quot;,a1)
     print(&quot;failed:&quot;,f1)
     print(&quot;.............&quot;)
     print(&quot;player 2:&quot;)
     print(&quot;score:&quot;,c2)
     print(&quot;answered:&quot;,a2)
     print(&quot;failed&quot;,f2)
     if(c1&gt;c2):
         print(p1,&quot; won over &quot;,p2)
     elif(c1==c2):
         print(&quot;draw game&quot;)
     else:
         print(p2,&quot; won over &quot;,p1) 
while(i!=4):
      if(i==3):
         if(k==1):
             print(&quot;player 1 turn&quot;)
             print(&quot;your jumbled word is:&quot;)
             k=k+1
             m=play()
             if(m==1):      ##if guessed answer is correct,then score and no.of answered count will be increased
                c1+=1
                a1+=1
             else:
                f1+=1       ##else count of no.of failed to answered will be incremented
         else:
             print(&quot;player 2 turn&quot;)
             print(&quot;your jumbled word is:&quot;)
             k=k-1
             m=play()
             if(m==1):
                c2=c2+1
                a2=a2+1
             else:
                f2=f2+1
       if(i==2):
             print(&quot;present status&quot;)
             stat()
       i=int(input(&quot;enter your choice  1.stop 2.status 3.continue&quot;))
       if(i==1):
             stat()
             i=i+3
&lt;/pre&gt;
&lt;hr&gt;
=== JumbledWord Simple Logic, In Short ===
[[File:jumbledWord.gif]]
&lt;hr&gt;
'''Logic to create a Jumbled Word'''
&lt;hr&gt;
&lt;pre&gt;
#Get Jumbled Word and print it Horizontally
import random

def getJumbledWord(b):
    jumble=''
    l1 = [ b[i] for i in range(0, len(b)) ]
    for t in range(len(l1)):
       p=random.choice(l1)     ##this randomly gets letters from the list      
       jumble=jumble+p       
       l1.remove(p)
    return jumble

b=input(&quot;Enter a word to make it jumbled : &quot;)
print(&quot;Jumbled Word : &quot;, getJumbledWord(b))
&lt;/pre&gt;
&lt;hr&gt;
'''Another Logic to create a Jumbled Word'''
&lt;hr&gt;
&lt;pre&gt;
b=input(&quot;Enter a word to make it jumbled : &quot;)

def getJumbledWord1(b):
    l1 = [ b[i] for i in range(0, len(b)) ]
    random.shuffle(l1)
    str1 = ''.join(l1)
    return str1

print(&quot;Jumbled Word : &quot;, getJumbledWord1(b))
&lt;/pre&gt;

====Sample Output:====
&lt;pre&gt;
---- Output1 
Enter a word to make it jumbled : butter
Jumbled Word :  tbture

---- Output2 
Enter a word to make it jumbled : petriotism
Jumbled Word :  pittrosime
&lt;/pre&gt;

=Theory of Evolution=

== What is Evolution ? ==
Evolution is the change in heritable characteristics over successive generations. The theory of evolution explains that DNA, which acts as a carrier of genetic information from one generation to other, tends to change or mutate occasionally. These changes are reflected in next generations to come. This is how life has evolved on earth from bacteria to human beings.&lt;br&gt;
[[File:Evolution.png|500px]]

== Implementation ==
An array representing DNA is stored in a file. As genes are forms of DNA, they contain information to be transferred to forthcoming generations. Assume that information is in the form of bits (in the form of 0s and 1s). A number is picked randomly from 1 to the size of the array. A new parameter has been introduced which decides whether mutation would occur or not. If the value of this new parameter is 1 (It is picked randomly from 1 to 100), then only change is reflected down the generations, otherwise it is not. The pseudo code is as follows :
Input an array containing genetic information .
Randomly generate a number (say m) from 1 to length of the array. Randomly generate other number (say p) from 1 to 100.
 
    if p is equal to 1 then 
        if m is 1 then
          set it to 0
        else
          set it to 1</text>
      <sha1>8ocx1v8tidqhrkhh25ys4u4rzpx7s25</sha1>
    </revision>
    <revision>
      <id>3485</id>
      <parentid>3484</parentid>
      <timestamp>2018-09-27T13:12:39Z</timestamp>
      <contributor>
        <username>Sachinkr</username>
        <id>1743</id>
      </contributor>
      <comment>/* Difference between append and extend */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="28157">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_3 Contributors of this page]
*Week 3 Playlist: https://www.youtube.com/playlist?list=PLc_j0TNIaWxOVx_z9jAM2UB3RqYNXaoEo
=List=
List is a flexible data structure used for storing a group of data separated by comma. The elements in a list need not be of the same data type.

'''Example:'''
       List_1 = [ 1, 2,3] or 
       List_1 = [&quot;coffee&quot;, &quot;Tea&quot;, &quot;Milk&quot;] or
       List_1 = [1,&quot;coffee&quot;, &quot;Tea&quot;, 3, &quot;5&quot;]

==List Creation==
&lt;pre&gt;a) A list can be created by simply putting values (separated by comma) between square brackets as given below,
       List_1 = [1,&quot;coffee&quot;, &quot;Tea&quot;, 3, &quot;5&quot;] #this creates a list by name List_1 containing following items


Or,
(b)A List can be created from scratch and elements can be added 
        List_2 = [ ]
        List_2.append(&quot;Kala&quot;)
        List_2.append(&quot;Mala&quot;)
Here we use &quot;append&quot; ,which is a function in python that enable us to append or attach an element to a list .
Thus List_2 will now hold [&quot;Kala&quot;,&quot;Mala&quot;]
&lt;/pre&gt;
[[#TOP]]

==Operations and Methods to work with List==
&lt;pre&gt;
a = [25,30,50,90,12,13]
b = [100,300,500,200,250]
&lt;/pre&gt;
&lt;hr&gt;
&lt;table border=2&gt;
  &lt;tr&gt;
    &lt;th&gt;&lt;b&gt;Method/&lt;br&gt;Operator&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Function&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Syntax&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Output&lt;/b&gt;&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;len()&lt;/td&gt;
    &lt;td&gt;Find length of a list&lt;/td&gt;
    &lt;td&gt;len(a)&lt;/td&gt;
    &lt;td&gt;6&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;max()&lt;/td&gt;
    &lt;td&gt;Find maximum element from the list&lt;/td&gt;
    &lt;td&gt;max(a)&lt;/td&gt;
    &lt;td&gt;90&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;min()&lt;/td&gt;
    &lt;td&gt;Find minimum element from the list&lt;/td&gt;
    &lt;td&gt;min(a)&lt;/td&gt;
    &lt;td&gt;12&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sum()&lt;/td&gt;
    &lt;td&gt;Returns sum of all elements of the list&lt;/td&gt;
    &lt;td&gt;sum(a)&lt;/td&gt;
    &lt;td&gt;220&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;reverse()&lt;/td&gt;
    &lt;td&gt;Reverses the original list&lt;/td&gt;
    &lt;td&gt;a.reverse()&lt;/td&gt;
    &lt;td&gt;[13, 12, 90, 50, 30, 25]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sort()&lt;/td&gt;
    &lt;td&gt;Sorts the original list in ascending order&lt;/td&gt;
    &lt;td&gt;a.sort()&lt;/td&gt;
    &lt;td&gt;[12, 13, 25, 30, 50, 90]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sorted()&lt;/td&gt;
    &lt;td&gt;Returns the new sorted list &lt;/td&gt;
    &lt;td&gt;sorted(a)&lt;/td&gt;
    &lt;td&gt;[12, 13, 25, 30, 50, 90]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;insert()&lt;/td&gt;
    &lt;td&gt;Insert at a particular index in the list, and shifts remaining elements&lt;/td&gt;
    &lt;td&gt;a.insert(3,3)&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 3, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;append()&lt;/td&gt;
    &lt;td&gt;Adds elements/object to the end of the list&lt;/td&gt;
    &lt;td&gt;a.append(5)&lt;br&gt;a.append([10,20])&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 5]&lt;br&gt;[25, 30, 50, 90, 12, 13, [10, 20]]&lt;br&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;extend()&lt;/td&gt;
    &lt;td&gt;Adds object to the end of the list as elements not as object&lt;/td&gt;
    &lt;td&gt;a.extend([10,20])&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 10, 20]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;*&amp;nbsp;&amp;nbsp;Repeatation&lt;br&gt;operator&lt;/td&gt;
    &lt;td&gt;Repeat the list for n times and returns a new list&lt;/td&gt;
    &lt;td&gt;a*2&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 25, 30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;+ Concatenation&lt;br&gt;operator&lt;/td&gt;
    &lt;td&gt;Concatenates two lists, and returns a new list&lt;/td&gt;
    &lt;td&gt;a+b&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 100, 300, 500, 200, 250]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;index()&lt;/td&gt;
    &lt;td&gt;Finds index of a particular element in the list or not&lt;/td&gt;
    &lt;td&gt;a.index(25)&lt;br&gt;a.index(0)&lt;br&gt;&lt;/td&gt;
    &lt;td&gt;0&lt;br&gt;&lt;br&gt;ValueError: 0 is not in list&lt;br&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;in operator&lt;/td&gt;
    &lt;td&gt;Finds whether a particular element is in the list or not, returns boolean&lt;/td&gt;
    &lt;td&gt;25 in a&lt;/td&gt;
    &lt;td&gt;True&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;not in operator&lt;/td&gt;
    &lt;td&gt;Checks if element is not available in list, returns boolean&lt;/td&gt;
    &lt;td&gt;25 not in a&lt;/td&gt;
    &lt;td&gt;False&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;count()&lt;/td&gt;
    &lt;td&gt;Counts the number of occurence of an element in the list&lt;/td&gt;
    &lt;td&gt;a.count(25)&lt;/td&gt;
    &lt;td&gt;1&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;remove()&lt;/td&gt;
    &lt;td&gt;Removes an element from the list&lt;/td&gt;
    &lt;td&gt;a.remove(25)&lt;/td&gt;
    &lt;td&gt; [30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;pop()&lt;/td&gt;
    &lt;td&gt;Delete and return item at index 0&lt;/td&gt;
    &lt;td&gt;a.pop(0)&lt;/td&gt;
    &lt;td&gt;25 , a will be [30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;del&lt;/td&gt;
    &lt;td&gt;Deletes item at a particular index from the list&lt;/td&gt;
    &lt;td&gt;del a[0]&lt;/td&gt;
    &lt;td&gt;[30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;

==Printing the List==
=== Print whole list ===
A list can be printed simply or using a ''for / while'' loop 

 print(List_2)     # To print the entire list
This code will print      
 ['Kala','Mala']     

===Print element at a particular index===
&lt;pre&gt;
Using index position
    List_2[0]     # prints 'Kala' ,i.e,the value at index position 0.
    List_2[1]     # prints 'Mala'.
&lt;/pre&gt;
=== Without using index position ===
&lt;pre&gt;
for item in List_2:   # here item is a variable used to access elements in list.
       print(item)
   This code snippet prints 
    Kala
    Mala
&lt;/pre&gt;
[[#TOP]]

==Search for a particular element in list==
Elements in a list can be searched by one of the two ways:
=== using index() function===
&lt;pre&gt;
ages1 = [11,23,12,23,45]

#if element is available in the list, index() returns the index value on which, the element is present.
print(ages1.index(45))#Output: 4

#if element is not available in the list, index() returns ''ValueError''
print(ages1.index(0))#Output: ValueError:
&lt;/pre&gt;

In programming, if such error occurs, program gets terminated. It can be solved using exception handling.
e.g.
&lt;pre&gt;
ages1 = [11,23,12,23,45]

try:
    print(ages1.index(0))
except ValueError:
    print(&quot;Exception has occured&quot;)    
    print(&quot;Element is not found in the list&quot;)

&lt;/pre&gt;
&lt;pre&gt;
'''Output: 
Exception has occured
Element is not found in the list
'''&lt;/pre&gt;
[[#TOP]]

=== using 'in' operator===
''in'' operator is used to check whether a particular element is available in the list or not.e.g.

&lt;pre&gt;
ages1 = [11,23,12,23,45]
no=11

if no in ages1:
    print(&quot;no is there in the list&quot;)
else:    
    print(&quot;no is NOT there in the list&quot;)
&lt;/pre&gt;
&lt;pre&gt;
#Output: no is there in the list
&lt;/pre&gt;

'''Number is not there in the list'''
&lt;pre&gt;
ages1 = [11,23,12,23,45]
no=15

if no in ages1:
    print(&quot;no is there in the list&quot;)
else:    
    print(&quot;no is NOT there in the list&quot;)
&lt;/pre&gt;
&lt;pre&gt;
Output: no is NOT there in the list
&lt;/pre&gt;
[[#TOP]]

==Updating the List==
The lists can be updated using ''append'' or ''insert'' function.  Append adds the element to the end of the list and Insert adds the element in the specified position.
   List_2.append(&quot;Sheela&quot;)    # add the element 'Sheela' to the end of the list.
   print (List_2) will output 
   ['Kala', 'Mala', 'Sheela']
   
   List_2.insert(1,&quot;Bala&quot;)    # add the element &quot;Bala&quot; in the list at the index 1.
   print (List_2) will output 
   ['Kala', 'Bala','Mala', 'Sheela']

=== Extend the list by adding elements of other list at end using extend()===
&lt;pre&gt;
ages = [11,23,12,23,45]
ages.extend([57,58])
print(ages)
&lt;/pre&gt;

&lt;pre&gt;
#Output: [11, 23, 12, 23, 45, 57, 58]
&lt;/pre&gt;

==== Difference between ''append and extend'' ====
Difference between append and extend can be easily understood, by the following example.

&lt;pre&gt;
appendlist = [11,23,12,23,45]
appendlist.append([57,58])

extendlist= [11,23,12,23,45]
extendlist.extend([57,58])
&lt;/pre&gt;

&lt;pre&gt;
'''Output:
[11, 23, 12, 23, 45, [57, 58]]
[11, 23, 12, 23, 45, 57, 58]'''
&lt;/pre&gt;
[[#TOP]]

==Basic Operations on List==
===Frequency of Occurrence===
list.count(object) will return the number of times the object occur in the list.
  '''Example'''
    ages = [11,23,12,23,45,43,22,24,23]
    ages.count(23) will return
    3
    ages.count(100) will return
    0

===Length of the List===
len(list) will return the length of the list ie. the number of objects in the list.
  '''Example'''
    ages = [11,23,12,23,45,43,22,24,23]
    len(ages) will output
    9
To print the objects in the list either use ''for item in list'' or ''for index in range(len(list))''
    for item in ages:       
        print (item)  
        (OR)
    for index in range(len(ages)) :
        print (ages[index])
===Sort the List===
list.sort() will sort the list in ascending order
  '''Example'''
    ages = [11,23,12,23,45,43,22,24,23]
    ages.sort() 
    print (ages) 
    [11, 12, 22, 23, 23, 23, 24, 43, 45]
===Sort the List using sorted() function===
sorted(list1) will sort the list and return a new list, it doesn't modify the original list
&lt;br&gt;'''Example: Sort in ascending order'''
&lt;pre&gt;
ages = [11,23,12,23,45,43,22,24,23]
newList=sorted(ages)
print(newList)

#Output: [11, 12, 22, 23, 23, 23, 24, 43, 45]
&lt;/pre&gt;

&lt;br&gt;'''Example: Sort in descending order'''
&lt;pre&gt;
ages = [11,23,12,23,45,43,22,24,23]
newList=sorted(ages,reverse=True)
print(newList)

#Output: [45, 43, 24, 23, 23, 23, 22, 12, 11]
&lt;/pre&gt;

===Reverse the List===
list.reverse() will reverse the original list
  '''Example'''
    ages = [11, 12, 22, 23, 23, 23, 24, 43, 45]
    ages.reverse()
    print (ages)
    [45, 43, 24, 23, 23, 23, 22, 12, 11]

Both sort() and reverse() list operation will work on numeric and alphanumeric data list.

A special use of the reverse() function is to descend a list that is sorted in ascending order.

  '''Example'''
&lt;pre&gt;
ages = [11, 12, 22, 23, 23, 23, 24, 43, 45]
ages.sort()
print(ages)
ages.reverse()
print(ages)
&lt;/pre&gt;

===Slicing===
Used to retrieve an object or objects in a range as a list  
  '''Example'''
Use ''list[index]'' to retrieve the object at the given index
         In [1]: student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
         In [2]: student[3]     #Object at index 3.  Remember index starts at 0
         Out[2]: 'Geetha'      


Use ''list[start_index : end_index + 1]'' to retrieve objects from the start_index to end_index 
         In [3]: student[2:4]     # Objects from index 2 to 3 as List. Note the [ and ]
         Out[3]: ['Vijay', 'Geetha']   


Use ''list[:]'' to retrieve objects from the starting of the list to the end of the list. 
The default start value will be the starting index of the list (i.e. 0) and the default end value
will be the length of the list 
         In [4]: student[:]        # prints the entire list
         Out[4]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma', 'Janani']


         In [5]: student[:5]       # prints the objects from the start of the list upto object at index 4
         Out[5]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran']


         In [6]: student[2:]       # prints the objects from index 2 upto the end of the list
         Out[6]: ['Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma', 'Janani']


Negative index too is available in Python. It starts from last element of the list. i.e.

         In [7]:student[-1]        #prints last index of list
         Out[7]: 'Janani'


         In [8]:student[-1:-8]     #prints empty list
         Out[8]: []


         In [9]:student[-8:-1]     #prints -8th index to -1st index elements
         Out[9]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma']

===Removing Item from list ===
----

Is used to remove a specific item from the list.

'''Example:'''
 
Use list.remove(entry/value)  Or   del list[index]    Or list.pop(index)
         student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
         student.remove(&quot;Arun&quot;)   #This will delete item &quot;Arun&quot;
         Or    
         del student[0]           # This will delete item at index 0
         Or
         student.pop(0)         # This will delete and return item at index 0


         print(student)    
         Output: [&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]

===Delete list ===
----
Used to delete complete list

'''Example'''

Use del &lt;list name&gt;
         student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
         del student

===Concatenation of two lists===
----
''+'' is the concatenation operator which is used concatenate two lists. 
&lt;pre&gt;
ages1 = [11,23,12,23,45]
ages2 = [25, 24, 43, 47]
age=ages1+ages2
print(age)
#Output: [11, 23, 12, 23, 45, 25, 24, 43, 47]
&lt;/pre&gt;

===Repeatation of a list ===
----
''*'' is the operator to repeat a particular list.
&lt;pre&gt;
ages1 = [11,23,12,23,45]
age=ages1*5 #ages1 list is repeated 5 times and stroed in ''age'' list
print(age)

#Output: [11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45]
&lt;/pre&gt;
====Conditional Statements====
    Conditionals are used to check the condition and change the flow of the program 
accordingly. They are realized in programming languages through if statement. The 
syntax is as follows :
         if condition : 
            statement
    '''Note:''' Do not forget indentation (inserting space/tab) in the line after the
 if condition.
    
    In case you want to execute a set of statements when a condition is true and another

set of statement when the condition is false.
         if condition : 
            statement 1
         else :
            statement 2
    
    Multiple if-else statements can be written as follows:
         if condition_1 : 
            statement 1
         elif condition_2 : # 'elif' is short for 'else if'
            statement 2
         elif condition_3 :
            statement 3
        .
        .
         else :
            final statement

=Loops and Conditionals : Fizzbuzz=
====Loops====

    Loops are used to execute a set of repetitive statements. They are realized
 through 'while' and 'for' loops in programming languages. The syntax of 'for' loop is 
as follows :
        for LOOPVARIABLE in SEQUENCE: 
            STATEMENTS
    '''e.g.''' to print all the data from a list we can write:
        for item in list_name
            print(item)
    OR
        for index in range(len(list_name))
            print(list_name[index])
    
    The syntax for while loop is as follows :
    
        while BOOLEANEXPRESSION: 
            STATEMENTS
            INCREMENT/DECREMENT
    
    '''e.g.''' if we want to print all numbers from 1 to 10
        i=1
        while i&lt;=10 :
            print(i,&quot; &quot;)
            i=i+1
    
    'while' loop has indefinite iteration (run-time unknown). So, there must be loop
 break statement in it.
 Whereas 'for' loop is definite in nature (i.e. known or predictable span).&lt;br&gt;

&lt;b&gt;NOTE: Python doesn't have anything like do-while loop.&lt;/b&gt;

==Implementation==
Here, we try to demonstrate the concept of loops and conditionals through a game called Fizzbuzz. The rules are as follows :&lt;br/&gt;
[[File:fizzBuzz.gif]]

• if input number is a multiple of ’3’ print ”Fizz”
&lt;br/&gt;
• if input number is a multiple of ’5’ print ”Buzz”
&lt;br/&gt;
• if input number is a multiple of both '3' and ’5’ print ”FizzBuzz”
&lt;br/&gt;
The pseudo code is as follows :
&lt;pre&gt;
   If input no % 3 == 0 and  input no % 5 == 0 : 
       print ”Fizzbuzz”
   else if input no % 3 == 0 : 
       print ”Fizz”
   else if input no % 5 == 0 : 
       print ”Buzz”
   else :
       print the input no
&lt;/pre&gt;
The order of statements execution matters to get the desired output. The highest priority condition should be first followed by other. In fizzbuzz programming, first checking should be done for both divisibility of 3 and 5. If condition not satisfied only then it should check individually for 3 or 5. So carefully choosing the order is crucial for better programming.
Note: There is some effect of present condition statements chosen on next conditions statements. That is why in first attempt fizzbuzz programming got struck.

Example: 
&lt;pre&gt;
#Code to achieve the above requirement in python3.
i = int(input(&quot;Enter the number&quot;)) 
if i%3 == 0 and i%5 == 0: print(i,&quot;FizzBuzz&quot;)  
elif i%5 == 0: print(i,&quot;Buzz&quot;)
elif i%3 == 0: print(i,&quot;Fizz&quot;)
else: print(i)
&lt;/pre&gt;
Lets put the same into a loop for a range given by the user.
&lt;pre&gt;
def fizzbuzzgame(start,stop):
    for i in range(start,stop+1):
        if i%3 == 0 and i%5 == 0:
            print(i,&quot;FizzBuzz&quot;)
        elif i%5 == 0:
            print(i,&quot;Buzz&quot;)
        elif i%3 == 0:
            print(i,&quot;Fizz&quot;)
        else: print(i)

fizzbuzzgame(50,100)
&lt;/pre&gt;


=== Fizz Buzz game in Interactive mode with Score ===
'''By Ms. Ami Tusharkant Choksi'''
&lt;pre&gt;
def fizzbuzzgame(i):
        if i%3 == 0 and i%5 == 0:
            print(i,&quot;FizzBuzz&quot;)
            return(&quot;fzbz&quot;)
        elif i%5 == 0:
            print(i,&quot;Buzz&quot;)
            return(&quot;bz&quot;)
        elif i%3 == 0:
            print(i,&quot;Fizz&quot;)
            return(&quot;fz&quot;)
        else:
            print(i)
            return(&quot;no&quot;)

ch = 'y'
fizzbuzz=0
fizz=0
buzz=0
nothing=0
print(&quot;&quot;&quot;
 _____  ____  _____  _____  ____   __ __  _____  _____       ____   ____  ___ ___    ___ 
|     ||    ||     ||     ||    \ |  |  ||     ||     |     /    | /    ||   |   |  /  _]
|   __| |  | |__/  ||__/  ||  o  )|  |  ||__/  ||__/  |    |   __||  o  || _   _ | /  [_ 
|  |_   |  | |   __||   __||     ||  |  ||   __||   __|    |  |  ||     ||  \_/  ||    _]
|   _]  |  | |  /  ||  /  ||  O  ||  :  ||  /  ||  /  |    |  |_ ||  _  ||   |   ||   [_ 
|  |    |  | |     ||     ||     ||     ||     ||     |    |     ||  |  ||   |   ||     |
|__|   |____||_____||_____||_____| \__,_||_____||_____|    |___,_||__|__||___|___||_____|
                                                                                         
&quot;&quot;&quot;)   

while(ch == 'y'):
    n=int(input(&quot;Enter a Number : &quot;))
    winLoose=fizzbuzzgame(n)
    if(winLoose == &quot;fz&quot;):
        fizz+=1
    elif(winLoose == &quot;bz&quot;):
        buzz+=1
    elif(winLoose == &quot;fzbz&quot;):
        fizzbuzz+=1
    ch=input(&quot;Do you want to continue playing the game : (y/n)&quot;)
    if(ch=='n'):
        print('Congratulations, your score is\n FizzBuzz:%d\nFizz:%d\nBuzz:%d' %
(fizzbuzz,fizz,buzz))
    
'''Sample Output:

 _____  ____  _____  _____  ____   __ __  _____  _____       ____   ____  ___ ___    ___ 
|     ||    ||     ||     ||    \ |  |  ||     ||     |     /    | /    ||   |   |  /  _]
|   __| |  | |__/  ||__/  ||  o  )|  |  ||__/  ||__/  |    |   __||  o  || _   _ | /  [_ 
|  |_   |  | |   __||   __||     ||  |  ||   __||   __|    |  |  ||     ||  \_/  ||    _]
|   _]  |  | |  /  ||  /  ||  O  ||  :  ||  /  ||  /  |    |  |_ ||  _  ||   |   ||   [_ 
|  |    |  | |     ||     ||     ||     ||     ||     |    |     ||  |  ||   |   ||     |
|__|   |____||_____||_____||_____| \__,_||_____||_____|    |___,_||__|__||___|___||_____|
                                                                                         

Enter a Number : 666
666 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 777
777 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 555
555 FizzBuzz
Do you want to continue playing the game : (y/n)y
Enter a Number : 1
1
Do you want to continue playing the game : (y/n)y
Enter a Number : 789
789 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 25
25 Buzz
Do you want to continue playing the game : (y/n)n
Congratulations, your score is

FizzBuzz:1
Fizz:3
Buzz:1

&lt;/pre&gt;

=Crowd Computing: Just Estimate=
==Wisdom of Crowds==
The concept of ’Wisdom of Crowds’ was proposed by Francis Galton. A weight-judging competition was carried on at the annual show of the West of England Fat Stock and Poultry Exhibition recently held at Plymouth, A fat ox having been selected, competitors bought stamped and numbered cards, each, on which to inscribe their respective names, addresses, and estimates of what the ox would weigh after it had been slaughtered. Those who guessed most successfully received prizes. About 8oo tickets were issued to the par- ticipants. The middlemost estimate of all the estimates recorded was 1207 lbs and the actual weight of the ox was 1198 lbs.

==Our Experiment==
The crowd had to guess the number of candies/gems in a jar. Around 75 people participated in the experiment. The actual number of gems in the jar were 375. The median of all estimates came out to be 300 and the mean of all the estimates came out to be around 396. Median underestimated and mean overestimated the actual value. So according to recent studies, Trimmed mean must be used as an aggregate measure to estimate where Wisdom of Crowds is involved.
[[File:Gemsjar.jpg|center|200px|caption]]

===Trimmed Mean===
In these kinds of experiments, 10% trimmed mean is usually followed. For calculating 10% trimmed mean, remove 10% smallest and 10% largest values from the sample. Calculate the mean of the sample obtained. In the above experiment, the trimmed mean came out to be around 351 which is very close to the actual value.

==Implementation==
Here, we try to demonstrate the concept of trimmed mean through crowd computing.
 Input a list of estimates done by the crowd .
 Sort the list.
 Remove the 10% smallest values.
 Remove the 10% largest values.
 Calculate the mean of the new list obtained .&lt;hr&gt;

==Data of Experiment==       
    Estimates =[1000,1010,1786,2000,1500,1500,100,120,150,150,150,170,175,180,197,200,200,200,200,200,200,220,220,220,220,234,250,250,250,250,250,250,250,250,250,263,270,275,275,286,300,
                300,300,300,300,300,300,300,320,350,350,350,400, 400,400,400,400,450,467,500,500,500,500,500,500,500,550,550,600,600,600,650,700,700,720]

    '''CODE:'''
&lt;pre&gt;
Estimates = [1000,1010,1786,2000,1500,1500,100,120,150,150,150,170,175,180,197,200,200,200,200,200,200,220,220,220,220,234,250,250,250,250,250,250,250,250,250,263,270,275,275,286,300,                300,300,300,300,300,300,300,320,350,350,350,400,400,400,400,400,450,467,500,500,500,500,500,500,500,550,550,600,600,600,650,700,700,720]
Estimates.sort()
offset = int(0.10*len(Estimates))
for i in range(offset):
       del Estimates[0]
       del Estimates[-1]
Sum = 0    
for i in range(len(Estimates)):
       Sum += Estimates[i]
Mean_Value = Sum/len(Estimates)
print(&quot;Mean : &quot;, int(Mean_Value))
#Output:
Mean :  351
&lt;/pre&gt;
&lt;hr&gt;
==Trimmed Mean for the above example== 
&lt;h3&gt;Using scipy library&lt;/h3&gt;
&lt;pre&gt;
#import scipy to use the method of trim_mean
from scipy import stats
trimMean = stats.trim_mean(Estimates, 0.1) # Trim 10% at both ends
print(&quot;Trimmed Mean : &quot;,trimMean)
#Output:
Trimmed Mean :  335.1020408163265
&lt;/pre&gt;

&lt;h3&gt;Without using scipy library&lt;/h3&gt;
&lt;pre&gt;
#Trimmed mean with 10%
p=10/100
#sorted data
data=[2, 4, 6, 7, 11, 21, 81, 90, 105, 121]
n = len(data)
#Remove elements from both end
rem=int(n*p)
newData = data[rem:-rem]
mean = 0
for i in newData:
    mean += i
mean = int(mean/len(newData))
print(&quot;Trimmed mean : &quot;,mean)
#Output: Trimmed mean :  40
&lt;/pre&gt;
[[#Top]]

=Jumbled_Words Permutations: Jumbled Words=
==What are Permutations ?==
A permutation also called ordering of selected number of elements from a list denoted by nPr here we are choosing all elements of a list and so n=r&lt;br&gt;
nPr=n!/(n-r)!&lt;br&gt; as n=r
nPn=n!&lt;br&gt; which gives all possible arrangement of elements present in a list.

 For example, permutations of list [1,2,3] are [1,2,3], [1,3,2], [2,1,3], [2,3,1], 
[3,1,2], and [3,2,1]. 
The number of permutations of a list of elements nPn is given by n!. For example, there are 2! = 2 x 1 = 2 permutations of [1,2], namely [1,2] and [2,1], and 3! = 3 x 2 x 1 = 6 permutations of [1,2,3], as mentioned above.&lt;br/&gt;
[[File:Permutations.jpg]]

==Implementation==
Here, we try to demonstrate the concept of permutations through jumbled words. It is a two player game in which one person presents the other person a different permutation of the word in his mind. The other person has to guess the right word. If he guesses, the he wins otherwise he loses.
 Input an list of words.
 Randomly pick a word from the list of words .
 Shuffle this word and present it to the other player.
 if word guesses by the player is same as the one picked from list of w
     player wins
 else
     player loses

ALTERNATE CODE TO GENERATE THIS GAME:
&lt;pre&gt;
import random
p1=input(&quot;enter player 1 name:&quot;)
p2=input(&quot;enter player 2 name:&quot;)
l=[&quot;rainbow&quot;,&quot;computer&quot;,&quot;robot&quot;,&quot;butter&quot;,&quot;vegetable&quot;,&quot;science&quot;,&quot;correct&quot;]
c1=c2=a1=a2=f1=f2=0
k=1
i=3
def play():
    n=random.choice(l)        ##n=chooses a word from list l
    l1=[]
    for j in n:
       l1.append(j)      ##creates a list for word in n
    for t in range(len(l1)):
       p=random.choice(l1)     ##this randomly displays letters in the list
       print(p)
       l1.remove(p)          ##to avoid the repetition of a letter
    s=input(&quot;enter the word:&quot;)
    if(s==n):
        print(&quot;correct&quot;)
        return 1
    else:
        print(&quot;not correct&quot;)
        print(&quot;answer is&quot;,n)
        return 0
def stat():
     print(&quot;player 1:&quot;)
     print(&quot;score:&quot;,c1)
     print(&quot;answered:&quot;,a1)
     print(&quot;failed:&quot;,f1)
     print(&quot;.............&quot;)
     print(&quot;player 2:&quot;)
     print(&quot;score:&quot;,c2)
     print(&quot;answered:&quot;,a2)
     print(&quot;failed&quot;,f2)
     if(c1&gt;c2):
         print(p1,&quot; won over &quot;,p2)
     elif(c1==c2):
         print(&quot;draw game&quot;)
     else:
         print(p2,&quot; won over &quot;,p1) 
while(i!=4):
      if(i==3):
         if(k==1):
             print(&quot;player 1 turn&quot;)
             print(&quot;your jumbled word is:&quot;)
             k=k+1
             m=play()
             if(m==1):      ##if guessed answer is correct,then score and no.of answered count will be increased
                c1+=1
                a1+=1
             else:
                f1+=1       ##else count of no.of failed to answered will be incremented
         else:
             print(&quot;player 2 turn&quot;)
             print(&quot;your jumbled word is:&quot;)
             k=k-1
             m=play()
             if(m==1):
                c2=c2+1
                a2=a2+1
             else:
                f2=f2+1
       if(i==2):
             print(&quot;present status&quot;)
             stat()
       i=int(input(&quot;enter your choice  1.stop 2.status 3.continue&quot;))
       if(i==1):
             stat()
             i=i+3
&lt;/pre&gt;
&lt;hr&gt;
=== JumbledWord Simple Logic, In Short ===
[[File:jumbledWord.gif]]
&lt;hr&gt;
'''Logic to create a Jumbled Word'''
&lt;hr&gt;
&lt;pre&gt;
#Get Jumbled Word and print it Horizontally
import random

def getJumbledWord(b):
    jumble=''
    l1 = [ b[i] for i in range(0, len(b)) ]
    for t in range(len(l1)):
       p=random.choice(l1)     ##this randomly gets letters from the list      
       jumble=jumble+p       
       l1.remove(p)
    return jumble

b=input(&quot;Enter a word to make it jumbled : &quot;)
print(&quot;Jumbled Word : &quot;, getJumbledWord(b))
&lt;/pre&gt;
&lt;hr&gt;
'''Another Logic to create a Jumbled Word'''
&lt;hr&gt;
&lt;pre&gt;
b=input(&quot;Enter a word to make it jumbled : &quot;)

def getJumbledWord1(b):
    l1 = [ b[i] for i in range(0, len(b)) ]
    random.shuffle(l1)
    str1 = ''.join(l1)
    return str1

print(&quot;Jumbled Word : &quot;, getJumbledWord1(b))
&lt;/pre&gt;

====Sample Output:====
&lt;pre&gt;
---- Output1 
Enter a word to make it jumbled : butter
Jumbled Word :  tbture

---- Output2 
Enter a word to make it jumbled : petriotism
Jumbled Word :  pittrosime
&lt;/pre&gt;

=Theory of Evolution=

== What is Evolution ? ==
Evolution is the change in heritable characteristics over successive generations. The theory of evolution explains that DNA, which acts as a carrier of genetic information from one generation to other, tends to change or mutate occasionally. These changes are reflected in next generations to come. This is how life has evolved on earth from bacteria to human beings.&lt;br&gt;
[[File:Evolution.png|500px]]

== Implementation ==
An array representing DNA is stored in a file. As genes are forms of DNA, they contain information to be transferred to forthcoming generations. Assume that information is in the form of bits (in the form of 0s and 1s). A number is picked randomly from 1 to the size of the array. A new parameter has been introduced which decides whether mutation would occur or not. If the value of this new parameter is 1 (It is picked randomly from 1 to 100), then only change is reflected down the generations, otherwise it is not. The pseudo code is as follows :
Input an array containing genetic information .
Randomly generate a number (say m) from 1 to length of the array. Randomly generate other number (say p) from 1 to 100.
 
    if p is equal to 1 then 
        if m is 1 then
          set it to 0
        else
          set it to 1</text>
      <sha1>k4beodqzw89xd5wicz9nuyn45jcdn3h</sha1>
    </revision>
    <revision>
      <id>3486</id>
      <parentid>3485</parentid>
      <timestamp>2018-09-27T13:13:31Z</timestamp>
      <contributor>
        <username>Sachinkr</username>
        <id>1743</id>
      </contributor>
      <comment>/* Sort the List */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="28168">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_3 Contributors of this page]
*Week 3 Playlist: https://www.youtube.com/playlist?list=PLc_j0TNIaWxOVx_z9jAM2UB3RqYNXaoEo
=List=
List is a flexible data structure used for storing a group of data separated by comma. The elements in a list need not be of the same data type.

'''Example:'''
       List_1 = [ 1, 2,3] or 
       List_1 = [&quot;coffee&quot;, &quot;Tea&quot;, &quot;Milk&quot;] or
       List_1 = [1,&quot;coffee&quot;, &quot;Tea&quot;, 3, &quot;5&quot;]

==List Creation==
&lt;pre&gt;a) A list can be created by simply putting values (separated by comma) between square brackets as given below,
       List_1 = [1,&quot;coffee&quot;, &quot;Tea&quot;, 3, &quot;5&quot;] #this creates a list by name List_1 containing following items


Or,
(b)A List can be created from scratch and elements can be added 
        List_2 = [ ]
        List_2.append(&quot;Kala&quot;)
        List_2.append(&quot;Mala&quot;)
Here we use &quot;append&quot; ,which is a function in python that enable us to append or attach an element to a list .
Thus List_2 will now hold [&quot;Kala&quot;,&quot;Mala&quot;]
&lt;/pre&gt;
[[#TOP]]

==Operations and Methods to work with List==
&lt;pre&gt;
a = [25,30,50,90,12,13]
b = [100,300,500,200,250]
&lt;/pre&gt;
&lt;hr&gt;
&lt;table border=2&gt;
  &lt;tr&gt;
    &lt;th&gt;&lt;b&gt;Method/&lt;br&gt;Operator&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Function&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Syntax&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Output&lt;/b&gt;&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;len()&lt;/td&gt;
    &lt;td&gt;Find length of a list&lt;/td&gt;
    &lt;td&gt;len(a)&lt;/td&gt;
    &lt;td&gt;6&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;max()&lt;/td&gt;
    &lt;td&gt;Find maximum element from the list&lt;/td&gt;
    &lt;td&gt;max(a)&lt;/td&gt;
    &lt;td&gt;90&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;min()&lt;/td&gt;
    &lt;td&gt;Find minimum element from the list&lt;/td&gt;
    &lt;td&gt;min(a)&lt;/td&gt;
    &lt;td&gt;12&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sum()&lt;/td&gt;
    &lt;td&gt;Returns sum of all elements of the list&lt;/td&gt;
    &lt;td&gt;sum(a)&lt;/td&gt;
    &lt;td&gt;220&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;reverse()&lt;/td&gt;
    &lt;td&gt;Reverses the original list&lt;/td&gt;
    &lt;td&gt;a.reverse()&lt;/td&gt;
    &lt;td&gt;[13, 12, 90, 50, 30, 25]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sort()&lt;/td&gt;
    &lt;td&gt;Sorts the original list in ascending order&lt;/td&gt;
    &lt;td&gt;a.sort()&lt;/td&gt;
    &lt;td&gt;[12, 13, 25, 30, 50, 90]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sorted()&lt;/td&gt;
    &lt;td&gt;Returns the new sorted list &lt;/td&gt;
    &lt;td&gt;sorted(a)&lt;/td&gt;
    &lt;td&gt;[12, 13, 25, 30, 50, 90]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;insert()&lt;/td&gt;
    &lt;td&gt;Insert at a particular index in the list, and shifts remaining elements&lt;/td&gt;
    &lt;td&gt;a.insert(3,3)&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 3, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;append()&lt;/td&gt;
    &lt;td&gt;Adds elements/object to the end of the list&lt;/td&gt;
    &lt;td&gt;a.append(5)&lt;br&gt;a.append([10,20])&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 5]&lt;br&gt;[25, 30, 50, 90, 12, 13, [10, 20]]&lt;br&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;extend()&lt;/td&gt;
    &lt;td&gt;Adds object to the end of the list as elements not as object&lt;/td&gt;
    &lt;td&gt;a.extend([10,20])&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 10, 20]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;*&amp;nbsp;&amp;nbsp;Repeatation&lt;br&gt;operator&lt;/td&gt;
    &lt;td&gt;Repeat the list for n times and returns a new list&lt;/td&gt;
    &lt;td&gt;a*2&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 25, 30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;+ Concatenation&lt;br&gt;operator&lt;/td&gt;
    &lt;td&gt;Concatenates two lists, and returns a new list&lt;/td&gt;
    &lt;td&gt;a+b&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 100, 300, 500, 200, 250]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;index()&lt;/td&gt;
    &lt;td&gt;Finds index of a particular element in the list or not&lt;/td&gt;
    &lt;td&gt;a.index(25)&lt;br&gt;a.index(0)&lt;br&gt;&lt;/td&gt;
    &lt;td&gt;0&lt;br&gt;&lt;br&gt;ValueError: 0 is not in list&lt;br&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;in operator&lt;/td&gt;
    &lt;td&gt;Finds whether a particular element is in the list or not, returns boolean&lt;/td&gt;
    &lt;td&gt;25 in a&lt;/td&gt;
    &lt;td&gt;True&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;not in operator&lt;/td&gt;
    &lt;td&gt;Checks if element is not available in list, returns boolean&lt;/td&gt;
    &lt;td&gt;25 not in a&lt;/td&gt;
    &lt;td&gt;False&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;count()&lt;/td&gt;
    &lt;td&gt;Counts the number of occurence of an element in the list&lt;/td&gt;
    &lt;td&gt;a.count(25)&lt;/td&gt;
    &lt;td&gt;1&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;remove()&lt;/td&gt;
    &lt;td&gt;Removes an element from the list&lt;/td&gt;
    &lt;td&gt;a.remove(25)&lt;/td&gt;
    &lt;td&gt; [30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;pop()&lt;/td&gt;
    &lt;td&gt;Delete and return item at index 0&lt;/td&gt;
    &lt;td&gt;a.pop(0)&lt;/td&gt;
    &lt;td&gt;25 , a will be [30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;del&lt;/td&gt;
    &lt;td&gt;Deletes item at a particular index from the list&lt;/td&gt;
    &lt;td&gt;del a[0]&lt;/td&gt;
    &lt;td&gt;[30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;

==Printing the List==
=== Print whole list ===
A list can be printed simply or using a ''for / while'' loop 

 print(List_2)     # To print the entire list
This code will print      
 ['Kala','Mala']     

===Print element at a particular index===
&lt;pre&gt;
Using index position
    List_2[0]     # prints 'Kala' ,i.e,the value at index position 0.
    List_2[1]     # prints 'Mala'.
&lt;/pre&gt;
=== Without using index position ===
&lt;pre&gt;
for item in List_2:   # here item is a variable used to access elements in list.
       print(item)
   This code snippet prints 
    Kala
    Mala
&lt;/pre&gt;
[[#TOP]]

==Search for a particular element in list==
Elements in a list can be searched by one of the two ways:
=== using index() function===
&lt;pre&gt;
ages1 = [11,23,12,23,45]

#if element is available in the list, index() returns the index value on which, the element is present.
print(ages1.index(45))#Output: 4

#if element is not available in the list, index() returns ''ValueError''
print(ages1.index(0))#Output: ValueError:
&lt;/pre&gt;

In programming, if such error occurs, program gets terminated. It can be solved using exception handling.
e.g.
&lt;pre&gt;
ages1 = [11,23,12,23,45]

try:
    print(ages1.index(0))
except ValueError:
    print(&quot;Exception has occured&quot;)    
    print(&quot;Element is not found in the list&quot;)

&lt;/pre&gt;
&lt;pre&gt;
'''Output: 
Exception has occured
Element is not found in the list
'''&lt;/pre&gt;
[[#TOP]]

=== using 'in' operator===
''in'' operator is used to check whether a particular element is available in the list or not.e.g.

&lt;pre&gt;
ages1 = [11,23,12,23,45]
no=11

if no in ages1:
    print(&quot;no is there in the list&quot;)
else:    
    print(&quot;no is NOT there in the list&quot;)
&lt;/pre&gt;
&lt;pre&gt;
#Output: no is there in the list
&lt;/pre&gt;

'''Number is not there in the list'''
&lt;pre&gt;
ages1 = [11,23,12,23,45]
no=15

if no in ages1:
    print(&quot;no is there in the list&quot;)
else:    
    print(&quot;no is NOT there in the list&quot;)
&lt;/pre&gt;
&lt;pre&gt;
Output: no is NOT there in the list
&lt;/pre&gt;
[[#TOP]]

==Updating the List==
The lists can be updated using ''append'' or ''insert'' function.  Append adds the element to the end of the list and Insert adds the element in the specified position.
   List_2.append(&quot;Sheela&quot;)    # add the element 'Sheela' to the end of the list.
   print (List_2) will output 
   ['Kala', 'Mala', 'Sheela']
   
   List_2.insert(1,&quot;Bala&quot;)    # add the element &quot;Bala&quot; in the list at the index 1.
   print (List_2) will output 
   ['Kala', 'Bala','Mala', 'Sheela']

=== Extend the list by adding elements of other list at end using extend()===
&lt;pre&gt;
ages = [11,23,12,23,45]
ages.extend([57,58])
print(ages)
&lt;/pre&gt;

&lt;pre&gt;
#Output: [11, 23, 12, 23, 45, 57, 58]
&lt;/pre&gt;

==== Difference between ''append and extend'' ====
Difference between append and extend can be easily understood, by the following example.

&lt;pre&gt;
appendlist = [11,23,12,23,45]
appendlist.append([57,58])

extendlist= [11,23,12,23,45]
extendlist.extend([57,58])
&lt;/pre&gt;

&lt;pre&gt;
'''Output:
[11, 23, 12, 23, 45, [57, 58]]
[11, 23, 12, 23, 45, 57, 58]'''
&lt;/pre&gt;
[[#TOP]]

==Basic Operations on List==
===Frequency of Occurrence===
list.count(object) will return the number of times the object occur in the list.
  '''Example'''
    ages = [11,23,12,23,45,43,22,24,23]
    ages.count(23) will return
    3
    ages.count(100) will return
    0

===Length of the List===
len(list) will return the length of the list ie. the number of objects in the list.
  '''Example'''
    ages = [11,23,12,23,45,43,22,24,23]
    len(ages) will output
    9
To print the objects in the list either use ''for item in list'' or ''for index in range(len(list))''
    for item in ages:       
        print (item)  
        (OR)
    for index in range(len(ages)) :
        print (ages[index])
===Sort the List===
list.sort() will sort the list in ascending order
  '''Example'''
    ages = [11,23,12,23,45,43,22,24,23]
    ages.sort() 
    print (ages) 
    [11, 12, 22, 23, 23, 23, 24, 43, 45]

[[#TOP]]

===Sort the List using sorted() function===
sorted(list1) will sort the list and return a new list, it doesn't modify the original list
&lt;br&gt;'''Example: Sort in ascending order'''
&lt;pre&gt;
ages = [11,23,12,23,45,43,22,24,23]
newList=sorted(ages)
print(newList)

#Output: [11, 12, 22, 23, 23, 23, 24, 43, 45]
&lt;/pre&gt;

&lt;br&gt;'''Example: Sort in descending order'''
&lt;pre&gt;
ages = [11,23,12,23,45,43,22,24,23]
newList=sorted(ages,reverse=True)
print(newList)

#Output: [45, 43, 24, 23, 23, 23, 22, 12, 11]
&lt;/pre&gt;

===Reverse the List===
list.reverse() will reverse the original list
  '''Example'''
    ages = [11, 12, 22, 23, 23, 23, 24, 43, 45]
    ages.reverse()
    print (ages)
    [45, 43, 24, 23, 23, 23, 22, 12, 11]

Both sort() and reverse() list operation will work on numeric and alphanumeric data list.

A special use of the reverse() function is to descend a list that is sorted in ascending order.

  '''Example'''
&lt;pre&gt;
ages = [11, 12, 22, 23, 23, 23, 24, 43, 45]
ages.sort()
print(ages)
ages.reverse()
print(ages)
&lt;/pre&gt;

===Slicing===
Used to retrieve an object or objects in a range as a list  
  '''Example'''
Use ''list[index]'' to retrieve the object at the given index
         In [1]: student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
         In [2]: student[3]     #Object at index 3.  Remember index starts at 0
         Out[2]: 'Geetha'      


Use ''list[start_index : end_index + 1]'' to retrieve objects from the start_index to end_index 
         In [3]: student[2:4]     # Objects from index 2 to 3 as List. Note the [ and ]
         Out[3]: ['Vijay', 'Geetha']   


Use ''list[:]'' to retrieve objects from the starting of the list to the end of the list. 
The default start value will be the starting index of the list (i.e. 0) and the default end value
will be the length of the list 
         In [4]: student[:]        # prints the entire list
         Out[4]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma', 'Janani']


         In [5]: student[:5]       # prints the objects from the start of the list upto object at index 4
         Out[5]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran']


         In [6]: student[2:]       # prints the objects from index 2 upto the end of the list
         Out[6]: ['Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma', 'Janani']


Negative index too is available in Python. It starts from last element of the list. i.e.

         In [7]:student[-1]        #prints last index of list
         Out[7]: 'Janani'


         In [8]:student[-1:-8]     #prints empty list
         Out[8]: []


         In [9]:student[-8:-1]     #prints -8th index to -1st index elements
         Out[9]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma']

===Removing Item from list ===
----

Is used to remove a specific item from the list.

'''Example:'''
 
Use list.remove(entry/value)  Or   del list[index]    Or list.pop(index)
         student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
         student.remove(&quot;Arun&quot;)   #This will delete item &quot;Arun&quot;
         Or    
         del student[0]           # This will delete item at index 0
         Or
         student.pop(0)         # This will delete and return item at index 0


         print(student)    
         Output: [&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]

===Delete list ===
----
Used to delete complete list

'''Example'''

Use del &lt;list name&gt;
         student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
         del student

===Concatenation of two lists===
----
''+'' is the concatenation operator which is used concatenate two lists. 
&lt;pre&gt;
ages1 = [11,23,12,23,45]
ages2 = [25, 24, 43, 47]
age=ages1+ages2
print(age)
#Output: [11, 23, 12, 23, 45, 25, 24, 43, 47]
&lt;/pre&gt;

===Repeatation of a list ===
----
''*'' is the operator to repeat a particular list.
&lt;pre&gt;
ages1 = [11,23,12,23,45]
age=ages1*5 #ages1 list is repeated 5 times and stroed in ''age'' list
print(age)

#Output: [11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45]
&lt;/pre&gt;
====Conditional Statements====
    Conditionals are used to check the condition and change the flow of the program 
accordingly. They are realized in programming languages through if statement. The 
syntax is as follows :
         if condition : 
            statement
    '''Note:''' Do not forget indentation (inserting space/tab) in the line after the
 if condition.
    
    In case you want to execute a set of statements when a condition is true and another

set of statement when the condition is false.
         if condition : 
            statement 1
         else :
            statement 2
    
    Multiple if-else statements can be written as follows:
         if condition_1 : 
            statement 1
         elif condition_2 : # 'elif' is short for 'else if'
            statement 2
         elif condition_3 :
            statement 3
        .
        .
         else :
            final statement

=Loops and Conditionals : Fizzbuzz=
====Loops====

    Loops are used to execute a set of repetitive statements. They are realized
 through 'while' and 'for' loops in programming languages. The syntax of 'for' loop is 
as follows :
        for LOOPVARIABLE in SEQUENCE: 
            STATEMENTS
    '''e.g.''' to print all the data from a list we can write:
        for item in list_name
            print(item)
    OR
        for index in range(len(list_name))
            print(list_name[index])
    
    The syntax for while loop is as follows :
    
        while BOOLEANEXPRESSION: 
            STATEMENTS
            INCREMENT/DECREMENT
    
    '''e.g.''' if we want to print all numbers from 1 to 10
        i=1
        while i&lt;=10 :
            print(i,&quot; &quot;)
            i=i+1
    
    'while' loop has indefinite iteration (run-time unknown). So, there must be loop
 break statement in it.
 Whereas 'for' loop is definite in nature (i.e. known or predictable span).&lt;br&gt;

&lt;b&gt;NOTE: Python doesn't have anything like do-while loop.&lt;/b&gt;

==Implementation==
Here, we try to demonstrate the concept of loops and conditionals through a game called Fizzbuzz. The rules are as follows :&lt;br/&gt;
[[File:fizzBuzz.gif]]

• if input number is a multiple of ’3’ print ”Fizz”
&lt;br/&gt;
• if input number is a multiple of ’5’ print ”Buzz”
&lt;br/&gt;
• if input number is a multiple of both '3' and ’5’ print ”FizzBuzz”
&lt;br/&gt;
The pseudo code is as follows :
&lt;pre&gt;
   If input no % 3 == 0 and  input no % 5 == 0 : 
       print ”Fizzbuzz”
   else if input no % 3 == 0 : 
       print ”Fizz”
   else if input no % 5 == 0 : 
       print ”Buzz”
   else :
       print the input no
&lt;/pre&gt;
The order of statements execution matters to get the desired output. The highest priority condition should be first followed by other. In fizzbuzz programming, first checking should be done for both divisibility of 3 and 5. If condition not satisfied only then it should check individually for 3 or 5. So carefully choosing the order is crucial for better programming.
Note: There is some effect of present condition statements chosen on next conditions statements. That is why in first attempt fizzbuzz programming got struck.

Example: 
&lt;pre&gt;
#Code to achieve the above requirement in python3.
i = int(input(&quot;Enter the number&quot;)) 
if i%3 == 0 and i%5 == 0: print(i,&quot;FizzBuzz&quot;)  
elif i%5 == 0: print(i,&quot;Buzz&quot;)
elif i%3 == 0: print(i,&quot;Fizz&quot;)
else: print(i)
&lt;/pre&gt;
Lets put the same into a loop for a range given by the user.
&lt;pre&gt;
def fizzbuzzgame(start,stop):
    for i in range(start,stop+1):
        if i%3 == 0 and i%5 == 0:
            print(i,&quot;FizzBuzz&quot;)
        elif i%5 == 0:
            print(i,&quot;Buzz&quot;)
        elif i%3 == 0:
            print(i,&quot;Fizz&quot;)
        else: print(i)

fizzbuzzgame(50,100)
&lt;/pre&gt;


=== Fizz Buzz game in Interactive mode with Score ===
'''By Ms. Ami Tusharkant Choksi'''
&lt;pre&gt;
def fizzbuzzgame(i):
        if i%3 == 0 and i%5 == 0:
            print(i,&quot;FizzBuzz&quot;)
            return(&quot;fzbz&quot;)
        elif i%5 == 0:
            print(i,&quot;Buzz&quot;)
            return(&quot;bz&quot;)
        elif i%3 == 0:
            print(i,&quot;Fizz&quot;)
            return(&quot;fz&quot;)
        else:
            print(i)
            return(&quot;no&quot;)

ch = 'y'
fizzbuzz=0
fizz=0
buzz=0
nothing=0
print(&quot;&quot;&quot;
 _____  ____  _____  _____  ____   __ __  _____  _____       ____   ____  ___ ___    ___ 
|     ||    ||     ||     ||    \ |  |  ||     ||     |     /    | /    ||   |   |  /  _]
|   __| |  | |__/  ||__/  ||  o  )|  |  ||__/  ||__/  |    |   __||  o  || _   _ | /  [_ 
|  |_   |  | |   __||   __||     ||  |  ||   __||   __|    |  |  ||     ||  \_/  ||    _]
|   _]  |  | |  /  ||  /  ||  O  ||  :  ||  /  ||  /  |    |  |_ ||  _  ||   |   ||   [_ 
|  |    |  | |     ||     ||     ||     ||     ||     |    |     ||  |  ||   |   ||     |
|__|   |____||_____||_____||_____| \__,_||_____||_____|    |___,_||__|__||___|___||_____|
                                                                                         
&quot;&quot;&quot;)   

while(ch == 'y'):
    n=int(input(&quot;Enter a Number : &quot;))
    winLoose=fizzbuzzgame(n)
    if(winLoose == &quot;fz&quot;):
        fizz+=1
    elif(winLoose == &quot;bz&quot;):
        buzz+=1
    elif(winLoose == &quot;fzbz&quot;):
        fizzbuzz+=1
    ch=input(&quot;Do you want to continue playing the game : (y/n)&quot;)
    if(ch=='n'):
        print('Congratulations, your score is\n FizzBuzz:%d\nFizz:%d\nBuzz:%d' %
(fizzbuzz,fizz,buzz))
    
'''Sample Output:

 _____  ____  _____  _____  ____   __ __  _____  _____       ____   ____  ___ ___    ___ 
|     ||    ||     ||     ||    \ |  |  ||     ||     |     /    | /    ||   |   |  /  _]
|   __| |  | |__/  ||__/  ||  o  )|  |  ||__/  ||__/  |    |   __||  o  || _   _ | /  [_ 
|  |_   |  | |   __||   __||     ||  |  ||   __||   __|    |  |  ||     ||  \_/  ||    _]
|   _]  |  | |  /  ||  /  ||  O  ||  :  ||  /  ||  /  |    |  |_ ||  _  ||   |   ||   [_ 
|  |    |  | |     ||     ||     ||     ||     ||     |    |     ||  |  ||   |   ||     |
|__|   |____||_____||_____||_____| \__,_||_____||_____|    |___,_||__|__||___|___||_____|
                                                                                         

Enter a Number : 666
666 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 777
777 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 555
555 FizzBuzz
Do you want to continue playing the game : (y/n)y
Enter a Number : 1
1
Do you want to continue playing the game : (y/n)y
Enter a Number : 789
789 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 25
25 Buzz
Do you want to continue playing the game : (y/n)n
Congratulations, your score is

FizzBuzz:1
Fizz:3
Buzz:1

&lt;/pre&gt;

=Crowd Computing: Just Estimate=
==Wisdom of Crowds==
The concept of ’Wisdom of Crowds’ was proposed by Francis Galton. A weight-judging competition was carried on at the annual show of the West of England Fat Stock and Poultry Exhibition recently held at Plymouth, A fat ox having been selected, competitors bought stamped and numbered cards, each, on which to inscribe their respective names, addresses, and estimates of what the ox would weigh after it had been slaughtered. Those who guessed most successfully received prizes. About 8oo tickets were issued to the par- ticipants. The middlemost estimate of all the estimates recorded was 1207 lbs and the actual weight of the ox was 1198 lbs.

==Our Experiment==
The crowd had to guess the number of candies/gems in a jar. Around 75 people participated in the experiment. The actual number of gems in the jar were 375. The median of all estimates came out to be 300 and the mean of all the estimates came out to be around 396. Median underestimated and mean overestimated the actual value. So according to recent studies, Trimmed mean must be used as an aggregate measure to estimate where Wisdom of Crowds is involved.
[[File:Gemsjar.jpg|center|200px|caption]]

===Trimmed Mean===
In these kinds of experiments, 10% trimmed mean is usually followed. For calculating 10% trimmed mean, remove 10% smallest and 10% largest values from the sample. Calculate the mean of the sample obtained. In the above experiment, the trimmed mean came out to be around 351 which is very close to the actual value.

==Implementation==
Here, we try to demonstrate the concept of trimmed mean through crowd computing.
 Input a list of estimates done by the crowd .
 Sort the list.
 Remove the 10% smallest values.
 Remove the 10% largest values.
 Calculate the mean of the new list obtained .&lt;hr&gt;

==Data of Experiment==       
    Estimates =[1000,1010,1786,2000,1500,1500,100,120,150,150,150,170,175,180,197,200,200,200,200,200,200,220,220,220,220,234,250,250,250,250,250,250,250,250,250,263,270,275,275,286,300,
                300,300,300,300,300,300,300,320,350,350,350,400, 400,400,400,400,450,467,500,500,500,500,500,500,500,550,550,600,600,600,650,700,700,720]

    '''CODE:'''
&lt;pre&gt;
Estimates = [1000,1010,1786,2000,1500,1500,100,120,150,150,150,170,175,180,197,200,200,200,200,200,200,220,220,220,220,234,250,250,250,250,250,250,250,250,250,263,270,275,275,286,300,                300,300,300,300,300,300,300,320,350,350,350,400,400,400,400,400,450,467,500,500,500,500,500,500,500,550,550,600,600,600,650,700,700,720]
Estimates.sort()
offset = int(0.10*len(Estimates))
for i in range(offset):
       del Estimates[0]
       del Estimates[-1]
Sum = 0    
for i in range(len(Estimates)):
       Sum += Estimates[i]
Mean_Value = Sum/len(Estimates)
print(&quot;Mean : &quot;, int(Mean_Value))
#Output:
Mean :  351
&lt;/pre&gt;
&lt;hr&gt;
==Trimmed Mean for the above example== 
&lt;h3&gt;Using scipy library&lt;/h3&gt;
&lt;pre&gt;
#import scipy to use the method of trim_mean
from scipy import stats
trimMean = stats.trim_mean(Estimates, 0.1) # Trim 10% at both ends
print(&quot;Trimmed Mean : &quot;,trimMean)
#Output:
Trimmed Mean :  335.1020408163265
&lt;/pre&gt;

&lt;h3&gt;Without using scipy library&lt;/h3&gt;
&lt;pre&gt;
#Trimmed mean with 10%
p=10/100
#sorted data
data=[2, 4, 6, 7, 11, 21, 81, 90, 105, 121]
n = len(data)
#Remove elements from both end
rem=int(n*p)
newData = data[rem:-rem]
mean = 0
for i in newData:
    mean += i
mean = int(mean/len(newData))
print(&quot;Trimmed mean : &quot;,mean)
#Output: Trimmed mean :  40
&lt;/pre&gt;
[[#Top]]

=Jumbled_Words Permutations: Jumbled Words=
==What are Permutations ?==
A permutation also called ordering of selected number of elements from a list denoted by nPr here we are choosing all elements of a list and so n=r&lt;br&gt;
nPr=n!/(n-r)!&lt;br&gt; as n=r
nPn=n!&lt;br&gt; which gives all possible arrangement of elements present in a list.

 For example, permutations of list [1,2,3] are [1,2,3], [1,3,2], [2,1,3], [2,3,1], 
[3,1,2], and [3,2,1]. 
The number of permutations of a list of elements nPn is given by n!. For example, there are 2! = 2 x 1 = 2 permutations of [1,2], namely [1,2] and [2,1], and 3! = 3 x 2 x 1 = 6 permutations of [1,2,3], as mentioned above.&lt;br/&gt;
[[File:Permutations.jpg]]

==Implementation==
Here, we try to demonstrate the concept of permutations through jumbled words. It is a two player game in which one person presents the other person a different permutation of the word in his mind. The other person has to guess the right word. If he guesses, the he wins otherwise he loses.
 Input an list of words.
 Randomly pick a word from the list of words .
 Shuffle this word and present it to the other player.
 if word guesses by the player is same as the one picked from list of w
     player wins
 else
     player loses

ALTERNATE CODE TO GENERATE THIS GAME:
&lt;pre&gt;
import random
p1=input(&quot;enter player 1 name:&quot;)
p2=input(&quot;enter player 2 name:&quot;)
l=[&quot;rainbow&quot;,&quot;computer&quot;,&quot;robot&quot;,&quot;butter&quot;,&quot;vegetable&quot;,&quot;science&quot;,&quot;correct&quot;]
c1=c2=a1=a2=f1=f2=0
k=1
i=3
def play():
    n=random.choice(l)        ##n=chooses a word from list l
    l1=[]
    for j in n:
       l1.append(j)      ##creates a list for word in n
    for t in range(len(l1)):
       p=random.choice(l1)     ##this randomly displays letters in the list
       print(p)
       l1.remove(p)          ##to avoid the repetition of a letter
    s=input(&quot;enter the word:&quot;)
    if(s==n):
        print(&quot;correct&quot;)
        return 1
    else:
        print(&quot;not correct&quot;)
        print(&quot;answer is&quot;,n)
        return 0
def stat():
     print(&quot;player 1:&quot;)
     print(&quot;score:&quot;,c1)
     print(&quot;answered:&quot;,a1)
     print(&quot;failed:&quot;,f1)
     print(&quot;.............&quot;)
     print(&quot;player 2:&quot;)
     print(&quot;score:&quot;,c2)
     print(&quot;answered:&quot;,a2)
     print(&quot;failed&quot;,f2)
     if(c1&gt;c2):
         print(p1,&quot; won over &quot;,p2)
     elif(c1==c2):
         print(&quot;draw game&quot;)
     else:
         print(p2,&quot; won over &quot;,p1) 
while(i!=4):
      if(i==3):
         if(k==1):
             print(&quot;player 1 turn&quot;)
             print(&quot;your jumbled word is:&quot;)
             k=k+1
             m=play()
             if(m==1):      ##if guessed answer is correct,then score and no.of answered count will be increased
                c1+=1
                a1+=1
             else:
                f1+=1       ##else count of no.of failed to answered will be incremented
         else:
             print(&quot;player 2 turn&quot;)
             print(&quot;your jumbled word is:&quot;)
             k=k-1
             m=play()
             if(m==1):
                c2=c2+1
                a2=a2+1
             else:
                f2=f2+1
       if(i==2):
             print(&quot;present status&quot;)
             stat()
       i=int(input(&quot;enter your choice  1.stop 2.status 3.continue&quot;))
       if(i==1):
             stat()
             i=i+3
&lt;/pre&gt;
&lt;hr&gt;
=== JumbledWord Simple Logic, In Short ===
[[File:jumbledWord.gif]]
&lt;hr&gt;
'''Logic to create a Jumbled Word'''
&lt;hr&gt;
&lt;pre&gt;
#Get Jumbled Word and print it Horizontally
import random

def getJumbledWord(b):
    jumble=''
    l1 = [ b[i] for i in range(0, len(b)) ]
    for t in range(len(l1)):
       p=random.choice(l1)     ##this randomly gets letters from the list      
       jumble=jumble+p       
       l1.remove(p)
    return jumble

b=input(&quot;Enter a word to make it jumbled : &quot;)
print(&quot;Jumbled Word : &quot;, getJumbledWord(b))
&lt;/pre&gt;
&lt;hr&gt;
'''Another Logic to create a Jumbled Word'''
&lt;hr&gt;
&lt;pre&gt;
b=input(&quot;Enter a word to make it jumbled : &quot;)

def getJumbledWord1(b):
    l1 = [ b[i] for i in range(0, len(b)) ]
    random.shuffle(l1)
    str1 = ''.join(l1)
    return str1

print(&quot;Jumbled Word : &quot;, getJumbledWord1(b))
&lt;/pre&gt;

====Sample Output:====
&lt;pre&gt;
---- Output1 
Enter a word to make it jumbled : butter
Jumbled Word :  tbture

---- Output2 
Enter a word to make it jumbled : petriotism
Jumbled Word :  pittrosime
&lt;/pre&gt;

=Theory of Evolution=

== What is Evolution ? ==
Evolution is the change in heritable characteristics over successive generations. The theory of evolution explains that DNA, which acts as a carrier of genetic information from one generation to other, tends to change or mutate occasionally. These changes are reflected in next generations to come. This is how life has evolved on earth from bacteria to human beings.&lt;br&gt;
[[File:Evolution.png|500px]]

== Implementation ==
An array representing DNA is stored in a file. As genes are forms of DNA, they contain information to be transferred to forthcoming generations. Assume that information is in the form of bits (in the form of 0s and 1s). A number is picked randomly from 1 to the size of the array. A new parameter has been introduced which decides whether mutation would occur or not. If the value of this new parameter is 1 (It is picked randomly from 1 to 100), then only change is reflected down the generations, otherwise it is not. The pseudo code is as follows :
Input an array containing genetic information .
Randomly generate a number (say m) from 1 to length of the array. Randomly generate other number (say p) from 1 to 100.
 
    if p is equal to 1 then 
        if m is 1 then
          set it to 0
        else
          set it to 1</text>
      <sha1>dhi7mct2q01vewjy12kahrwzn4vp16e</sha1>
    </revision>
    <revision>
      <id>3487</id>
      <parentid>3486</parentid>
      <timestamp>2018-09-27T13:14:21Z</timestamp>
      <contributor>
        <username>Sachinkr</username>
        <id>1743</id>
      </contributor>
      <comment>/* Removing Item from list */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="28177">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_3 Contributors of this page]
*Week 3 Playlist: https://www.youtube.com/playlist?list=PLc_j0TNIaWxOVx_z9jAM2UB3RqYNXaoEo
=List=
List is a flexible data structure used for storing a group of data separated by comma. The elements in a list need not be of the same data type.

'''Example:'''
       List_1 = [ 1, 2,3] or 
       List_1 = [&quot;coffee&quot;, &quot;Tea&quot;, &quot;Milk&quot;] or
       List_1 = [1,&quot;coffee&quot;, &quot;Tea&quot;, 3, &quot;5&quot;]

==List Creation==
&lt;pre&gt;a) A list can be created by simply putting values (separated by comma) between square brackets as given below,
       List_1 = [1,&quot;coffee&quot;, &quot;Tea&quot;, 3, &quot;5&quot;] #this creates a list by name List_1 containing following items


Or,
(b)A List can be created from scratch and elements can be added 
        List_2 = [ ]
        List_2.append(&quot;Kala&quot;)
        List_2.append(&quot;Mala&quot;)
Here we use &quot;append&quot; ,which is a function in python that enable us to append or attach an element to a list .
Thus List_2 will now hold [&quot;Kala&quot;,&quot;Mala&quot;]
&lt;/pre&gt;
[[#TOP]]

==Operations and Methods to work with List==
&lt;pre&gt;
a = [25,30,50,90,12,13]
b = [100,300,500,200,250]
&lt;/pre&gt;
&lt;hr&gt;
&lt;table border=2&gt;
  &lt;tr&gt;
    &lt;th&gt;&lt;b&gt;Method/&lt;br&gt;Operator&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Function&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Syntax&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Output&lt;/b&gt;&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;len()&lt;/td&gt;
    &lt;td&gt;Find length of a list&lt;/td&gt;
    &lt;td&gt;len(a)&lt;/td&gt;
    &lt;td&gt;6&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;max()&lt;/td&gt;
    &lt;td&gt;Find maximum element from the list&lt;/td&gt;
    &lt;td&gt;max(a)&lt;/td&gt;
    &lt;td&gt;90&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;min()&lt;/td&gt;
    &lt;td&gt;Find minimum element from the list&lt;/td&gt;
    &lt;td&gt;min(a)&lt;/td&gt;
    &lt;td&gt;12&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sum()&lt;/td&gt;
    &lt;td&gt;Returns sum of all elements of the list&lt;/td&gt;
    &lt;td&gt;sum(a)&lt;/td&gt;
    &lt;td&gt;220&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;reverse()&lt;/td&gt;
    &lt;td&gt;Reverses the original list&lt;/td&gt;
    &lt;td&gt;a.reverse()&lt;/td&gt;
    &lt;td&gt;[13, 12, 90, 50, 30, 25]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sort()&lt;/td&gt;
    &lt;td&gt;Sorts the original list in ascending order&lt;/td&gt;
    &lt;td&gt;a.sort()&lt;/td&gt;
    &lt;td&gt;[12, 13, 25, 30, 50, 90]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sorted()&lt;/td&gt;
    &lt;td&gt;Returns the new sorted list &lt;/td&gt;
    &lt;td&gt;sorted(a)&lt;/td&gt;
    &lt;td&gt;[12, 13, 25, 30, 50, 90]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;insert()&lt;/td&gt;
    &lt;td&gt;Insert at a particular index in the list, and shifts remaining elements&lt;/td&gt;
    &lt;td&gt;a.insert(3,3)&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 3, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;append()&lt;/td&gt;
    &lt;td&gt;Adds elements/object to the end of the list&lt;/td&gt;
    &lt;td&gt;a.append(5)&lt;br&gt;a.append([10,20])&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 5]&lt;br&gt;[25, 30, 50, 90, 12, 13, [10, 20]]&lt;br&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;extend()&lt;/td&gt;
    &lt;td&gt;Adds object to the end of the list as elements not as object&lt;/td&gt;
    &lt;td&gt;a.extend([10,20])&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 10, 20]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;*&amp;nbsp;&amp;nbsp;Repeatation&lt;br&gt;operator&lt;/td&gt;
    &lt;td&gt;Repeat the list for n times and returns a new list&lt;/td&gt;
    &lt;td&gt;a*2&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 25, 30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;+ Concatenation&lt;br&gt;operator&lt;/td&gt;
    &lt;td&gt;Concatenates two lists, and returns a new list&lt;/td&gt;
    &lt;td&gt;a+b&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 100, 300, 500, 200, 250]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;index()&lt;/td&gt;
    &lt;td&gt;Finds index of a particular element in the list or not&lt;/td&gt;
    &lt;td&gt;a.index(25)&lt;br&gt;a.index(0)&lt;br&gt;&lt;/td&gt;
    &lt;td&gt;0&lt;br&gt;&lt;br&gt;ValueError: 0 is not in list&lt;br&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;in operator&lt;/td&gt;
    &lt;td&gt;Finds whether a particular element is in the list or not, returns boolean&lt;/td&gt;
    &lt;td&gt;25 in a&lt;/td&gt;
    &lt;td&gt;True&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;not in operator&lt;/td&gt;
    &lt;td&gt;Checks if element is not available in list, returns boolean&lt;/td&gt;
    &lt;td&gt;25 not in a&lt;/td&gt;
    &lt;td&gt;False&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;count()&lt;/td&gt;
    &lt;td&gt;Counts the number of occurence of an element in the list&lt;/td&gt;
    &lt;td&gt;a.count(25)&lt;/td&gt;
    &lt;td&gt;1&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;remove()&lt;/td&gt;
    &lt;td&gt;Removes an element from the list&lt;/td&gt;
    &lt;td&gt;a.remove(25)&lt;/td&gt;
    &lt;td&gt; [30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;pop()&lt;/td&gt;
    &lt;td&gt;Delete and return item at index 0&lt;/td&gt;
    &lt;td&gt;a.pop(0)&lt;/td&gt;
    &lt;td&gt;25 , a will be [30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;del&lt;/td&gt;
    &lt;td&gt;Deletes item at a particular index from the list&lt;/td&gt;
    &lt;td&gt;del a[0]&lt;/td&gt;
    &lt;td&gt;[30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;

==Printing the List==
=== Print whole list ===
A list can be printed simply or using a ''for / while'' loop 

 print(List_2)     # To print the entire list
This code will print      
 ['Kala','Mala']     

===Print element at a particular index===
&lt;pre&gt;
Using index position
    List_2[0]     # prints 'Kala' ,i.e,the value at index position 0.
    List_2[1]     # prints 'Mala'.
&lt;/pre&gt;
=== Without using index position ===
&lt;pre&gt;
for item in List_2:   # here item is a variable used to access elements in list.
       print(item)
   This code snippet prints 
    Kala
    Mala
&lt;/pre&gt;
[[#TOP]]

==Search for a particular element in list==
Elements in a list can be searched by one of the two ways:
=== using index() function===
&lt;pre&gt;
ages1 = [11,23,12,23,45]

#if element is available in the list, index() returns the index value on which, the element is present.
print(ages1.index(45))#Output: 4

#if element is not available in the list, index() returns ''ValueError''
print(ages1.index(0))#Output: ValueError:
&lt;/pre&gt;

In programming, if such error occurs, program gets terminated. It can be solved using exception handling.
e.g.
&lt;pre&gt;
ages1 = [11,23,12,23,45]

try:
    print(ages1.index(0))
except ValueError:
    print(&quot;Exception has occured&quot;)    
    print(&quot;Element is not found in the list&quot;)

&lt;/pre&gt;
&lt;pre&gt;
'''Output: 
Exception has occured
Element is not found in the list
'''&lt;/pre&gt;
[[#TOP]]

=== using 'in' operator===
''in'' operator is used to check whether a particular element is available in the list or not.e.g.

&lt;pre&gt;
ages1 = [11,23,12,23,45]
no=11

if no in ages1:
    print(&quot;no is there in the list&quot;)
else:    
    print(&quot;no is NOT there in the list&quot;)
&lt;/pre&gt;
&lt;pre&gt;
#Output: no is there in the list
&lt;/pre&gt;

'''Number is not there in the list'''
&lt;pre&gt;
ages1 = [11,23,12,23,45]
no=15

if no in ages1:
    print(&quot;no is there in the list&quot;)
else:    
    print(&quot;no is NOT there in the list&quot;)
&lt;/pre&gt;
&lt;pre&gt;
Output: no is NOT there in the list
&lt;/pre&gt;
[[#TOP]]

==Updating the List==
The lists can be updated using ''append'' or ''insert'' function.  Append adds the element to the end of the list and Insert adds the element in the specified position.
   List_2.append(&quot;Sheela&quot;)    # add the element 'Sheela' to the end of the list.
   print (List_2) will output 
   ['Kala', 'Mala', 'Sheela']
   
   List_2.insert(1,&quot;Bala&quot;)    # add the element &quot;Bala&quot; in the list at the index 1.
   print (List_2) will output 
   ['Kala', 'Bala','Mala', 'Sheela']

=== Extend the list by adding elements of other list at end using extend()===
&lt;pre&gt;
ages = [11,23,12,23,45]
ages.extend([57,58])
print(ages)
&lt;/pre&gt;

&lt;pre&gt;
#Output: [11, 23, 12, 23, 45, 57, 58]
&lt;/pre&gt;

==== Difference between ''append and extend'' ====
Difference between append and extend can be easily understood, by the following example.

&lt;pre&gt;
appendlist = [11,23,12,23,45]
appendlist.append([57,58])

extendlist= [11,23,12,23,45]
extendlist.extend([57,58])
&lt;/pre&gt;

&lt;pre&gt;
'''Output:
[11, 23, 12, 23, 45, [57, 58]]
[11, 23, 12, 23, 45, 57, 58]'''
&lt;/pre&gt;
[[#TOP]]

==Basic Operations on List==
===Frequency of Occurrence===
list.count(object) will return the number of times the object occur in the list.
  '''Example'''
    ages = [11,23,12,23,45,43,22,24,23]
    ages.count(23) will return
    3
    ages.count(100) will return
    0

===Length of the List===
len(list) will return the length of the list ie. the number of objects in the list.
  '''Example'''
    ages = [11,23,12,23,45,43,22,24,23]
    len(ages) will output
    9
To print the objects in the list either use ''for item in list'' or ''for index in range(len(list))''
    for item in ages:       
        print (item)  
        (OR)
    for index in range(len(ages)) :
        print (ages[index])
===Sort the List===
list.sort() will sort the list in ascending order
  '''Example'''
    ages = [11,23,12,23,45,43,22,24,23]
    ages.sort() 
    print (ages) 
    [11, 12, 22, 23, 23, 23, 24, 43, 45]

[[#TOP]]

===Sort the List using sorted() function===
sorted(list1) will sort the list and return a new list, it doesn't modify the original list
&lt;br&gt;'''Example: Sort in ascending order'''
&lt;pre&gt;
ages = [11,23,12,23,45,43,22,24,23]
newList=sorted(ages)
print(newList)

#Output: [11, 12, 22, 23, 23, 23, 24, 43, 45]
&lt;/pre&gt;

&lt;br&gt;'''Example: Sort in descending order'''
&lt;pre&gt;
ages = [11,23,12,23,45,43,22,24,23]
newList=sorted(ages,reverse=True)
print(newList)

#Output: [45, 43, 24, 23, 23, 23, 22, 12, 11]
&lt;/pre&gt;

===Reverse the List===
list.reverse() will reverse the original list
  '''Example'''
    ages = [11, 12, 22, 23, 23, 23, 24, 43, 45]
    ages.reverse()
    print (ages)
    [45, 43, 24, 23, 23, 23, 22, 12, 11]

Both sort() and reverse() list operation will work on numeric and alphanumeric data list.

A special use of the reverse() function is to descend a list that is sorted in ascending order.

  '''Example'''
&lt;pre&gt;
ages = [11, 12, 22, 23, 23, 23, 24, 43, 45]
ages.sort()
print(ages)
ages.reverse()
print(ages)
&lt;/pre&gt;

===Slicing===
Used to retrieve an object or objects in a range as a list  
  '''Example'''
Use ''list[index]'' to retrieve the object at the given index
         In [1]: student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
         In [2]: student[3]     #Object at index 3.  Remember index starts at 0
         Out[2]: 'Geetha'      


Use ''list[start_index : end_index + 1]'' to retrieve objects from the start_index to end_index 
         In [3]: student[2:4]     # Objects from index 2 to 3 as List. Note the [ and ]
         Out[3]: ['Vijay', 'Geetha']   


Use ''list[:]'' to retrieve objects from the starting of the list to the end of the list. 
The default start value will be the starting index of the list (i.e. 0) and the default end value
will be the length of the list 
         In [4]: student[:]        # prints the entire list
         Out[4]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma', 'Janani']


         In [5]: student[:5]       # prints the objects from the start of the list upto object at index 4
         Out[5]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran']


         In [6]: student[2:]       # prints the objects from index 2 upto the end of the list
         Out[6]: ['Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma', 'Janani']


Negative index too is available in Python. It starts from last element of the list. i.e.

         In [7]:student[-1]        #prints last index of list
         Out[7]: 'Janani'


         In [8]:student[-1:-8]     #prints empty list
         Out[8]: []


         In [9]:student[-8:-1]     #prints -8th index to -1st index elements
         Out[9]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma']

[[#TOP]]
===Removing Item from list ===
----

Is used to remove a specific item from the list.

'''Example:'''
 
Use list.remove(entry/value)  Or   del list[index]    Or list.pop(index)
         student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
         student.remove(&quot;Arun&quot;)   #This will delete item &quot;Arun&quot;
         Or    
         del student[0]           # This will delete item at index 0
         Or
         student.pop(0)         # This will delete and return item at index 0


         print(student)    
         Output: [&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]

===Delete list ===
----
Used to delete complete list

'''Example'''

Use del &lt;list name&gt;
         student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
         del student

===Concatenation of two lists===
----
''+'' is the concatenation operator which is used concatenate two lists. 
&lt;pre&gt;
ages1 = [11,23,12,23,45]
ages2 = [25, 24, 43, 47]
age=ages1+ages2
print(age)
#Output: [11, 23, 12, 23, 45, 25, 24, 43, 47]
&lt;/pre&gt;

===Repeatation of a list ===
----
''*'' is the operator to repeat a particular list.
&lt;pre&gt;
ages1 = [11,23,12,23,45]
age=ages1*5 #ages1 list is repeated 5 times and stroed in ''age'' list
print(age)

#Output: [11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45]
&lt;/pre&gt;
====Conditional Statements====
    Conditionals are used to check the condition and change the flow of the program 
accordingly. They are realized in programming languages through if statement. The 
syntax is as follows :
         if condition : 
            statement
    '''Note:''' Do not forget indentation (inserting space/tab) in the line after the
 if condition.
    
    In case you want to execute a set of statements when a condition is true and another

set of statement when the condition is false.
         if condition : 
            statement 1
         else :
            statement 2
    
    Multiple if-else statements can be written as follows:
         if condition_1 : 
            statement 1
         elif condition_2 : # 'elif' is short for 'else if'
            statement 2
         elif condition_3 :
            statement 3
        .
        .
         else :
            final statement

=Loops and Conditionals : Fizzbuzz=
====Loops====

    Loops are used to execute a set of repetitive statements. They are realized
 through 'while' and 'for' loops in programming languages. The syntax of 'for' loop is 
as follows :
        for LOOPVARIABLE in SEQUENCE: 
            STATEMENTS
    '''e.g.''' to print all the data from a list we can write:
        for item in list_name
            print(item)
    OR
        for index in range(len(list_name))
            print(list_name[index])
    
    The syntax for while loop is as follows :
    
        while BOOLEANEXPRESSION: 
            STATEMENTS
            INCREMENT/DECREMENT
    
    '''e.g.''' if we want to print all numbers from 1 to 10
        i=1
        while i&lt;=10 :
            print(i,&quot; &quot;)
            i=i+1
    
    'while' loop has indefinite iteration (run-time unknown). So, there must be loop
 break statement in it.
 Whereas 'for' loop is definite in nature (i.e. known or predictable span).&lt;br&gt;

&lt;b&gt;NOTE: Python doesn't have anything like do-while loop.&lt;/b&gt;

==Implementation==
Here, we try to demonstrate the concept of loops and conditionals through a game called Fizzbuzz. The rules are as follows :&lt;br/&gt;
[[File:fizzBuzz.gif]]

• if input number is a multiple of ’3’ print ”Fizz”
&lt;br/&gt;
• if input number is a multiple of ’5’ print ”Buzz”
&lt;br/&gt;
• if input number is a multiple of both '3' and ’5’ print ”FizzBuzz”
&lt;br/&gt;
The pseudo code is as follows :
&lt;pre&gt;
   If input no % 3 == 0 and  input no % 5 == 0 : 
       print ”Fizzbuzz”
   else if input no % 3 == 0 : 
       print ”Fizz”
   else if input no % 5 == 0 : 
       print ”Buzz”
   else :
       print the input no
&lt;/pre&gt;
The order of statements execution matters to get the desired output. The highest priority condition should be first followed by other. In fizzbuzz programming, first checking should be done for both divisibility of 3 and 5. If condition not satisfied only then it should check individually for 3 or 5. So carefully choosing the order is crucial for better programming.
Note: There is some effect of present condition statements chosen on next conditions statements. That is why in first attempt fizzbuzz programming got struck.

Example: 
&lt;pre&gt;
#Code to achieve the above requirement in python3.
i = int(input(&quot;Enter the number&quot;)) 
if i%3 == 0 and i%5 == 0: print(i,&quot;FizzBuzz&quot;)  
elif i%5 == 0: print(i,&quot;Buzz&quot;)
elif i%3 == 0: print(i,&quot;Fizz&quot;)
else: print(i)
&lt;/pre&gt;
Lets put the same into a loop for a range given by the user.
&lt;pre&gt;
def fizzbuzzgame(start,stop):
    for i in range(start,stop+1):
        if i%3 == 0 and i%5 == 0:
            print(i,&quot;FizzBuzz&quot;)
        elif i%5 == 0:
            print(i,&quot;Buzz&quot;)
        elif i%3 == 0:
            print(i,&quot;Fizz&quot;)
        else: print(i)

fizzbuzzgame(50,100)
&lt;/pre&gt;


=== Fizz Buzz game in Interactive mode with Score ===
'''By Ms. Ami Tusharkant Choksi'''
&lt;pre&gt;
def fizzbuzzgame(i):
        if i%3 == 0 and i%5 == 0:
            print(i,&quot;FizzBuzz&quot;)
            return(&quot;fzbz&quot;)
        elif i%5 == 0:
            print(i,&quot;Buzz&quot;)
            return(&quot;bz&quot;)
        elif i%3 == 0:
            print(i,&quot;Fizz&quot;)
            return(&quot;fz&quot;)
        else:
            print(i)
            return(&quot;no&quot;)

ch = 'y'
fizzbuzz=0
fizz=0
buzz=0
nothing=0
print(&quot;&quot;&quot;
 _____  ____  _____  _____  ____   __ __  _____  _____       ____   ____  ___ ___    ___ 
|     ||    ||     ||     ||    \ |  |  ||     ||     |     /    | /    ||   |   |  /  _]
|   __| |  | |__/  ||__/  ||  o  )|  |  ||__/  ||__/  |    |   __||  o  || _   _ | /  [_ 
|  |_   |  | |   __||   __||     ||  |  ||   __||   __|    |  |  ||     ||  \_/  ||    _]
|   _]  |  | |  /  ||  /  ||  O  ||  :  ||  /  ||  /  |    |  |_ ||  _  ||   |   ||   [_ 
|  |    |  | |     ||     ||     ||     ||     ||     |    |     ||  |  ||   |   ||     |
|__|   |____||_____||_____||_____| \__,_||_____||_____|    |___,_||__|__||___|___||_____|
                                                                                         
&quot;&quot;&quot;)   

while(ch == 'y'):
    n=int(input(&quot;Enter a Number : &quot;))
    winLoose=fizzbuzzgame(n)
    if(winLoose == &quot;fz&quot;):
        fizz+=1
    elif(winLoose == &quot;bz&quot;):
        buzz+=1
    elif(winLoose == &quot;fzbz&quot;):
        fizzbuzz+=1
    ch=input(&quot;Do you want to continue playing the game : (y/n)&quot;)
    if(ch=='n'):
        print('Congratulations, your score is\n FizzBuzz:%d\nFizz:%d\nBuzz:%d' %
(fizzbuzz,fizz,buzz))
    
'''Sample Output:

 _____  ____  _____  _____  ____   __ __  _____  _____       ____   ____  ___ ___    ___ 
|     ||    ||     ||     ||    \ |  |  ||     ||     |     /    | /    ||   |   |  /  _]
|   __| |  | |__/  ||__/  ||  o  )|  |  ||__/  ||__/  |    |   __||  o  || _   _ | /  [_ 
|  |_   |  | |   __||   __||     ||  |  ||   __||   __|    |  |  ||     ||  \_/  ||    _]
|   _]  |  | |  /  ||  /  ||  O  ||  :  ||  /  ||  /  |    |  |_ ||  _  ||   |   ||   [_ 
|  |    |  | |     ||     ||     ||     ||     ||     |    |     ||  |  ||   |   ||     |
|__|   |____||_____||_____||_____| \__,_||_____||_____|    |___,_||__|__||___|___||_____|
                                                                                         

Enter a Number : 666
666 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 777
777 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 555
555 FizzBuzz
Do you want to continue playing the game : (y/n)y
Enter a Number : 1
1
Do you want to continue playing the game : (y/n)y
Enter a Number : 789
789 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 25
25 Buzz
Do you want to continue playing the game : (y/n)n
Congratulations, your score is

FizzBuzz:1
Fizz:3
Buzz:1

&lt;/pre&gt;

=Crowd Computing: Just Estimate=
==Wisdom of Crowds==
The concept of ’Wisdom of Crowds’ was proposed by Francis Galton. A weight-judging competition was carried on at the annual show of the West of England Fat Stock and Poultry Exhibition recently held at Plymouth, A fat ox having been selected, competitors bought stamped and numbered cards, each, on which to inscribe their respective names, addresses, and estimates of what the ox would weigh after it had been slaughtered. Those who guessed most successfully received prizes. About 8oo tickets were issued to the par- ticipants. The middlemost estimate of all the estimates recorded was 1207 lbs and the actual weight of the ox was 1198 lbs.

==Our Experiment==
The crowd had to guess the number of candies/gems in a jar. Around 75 people participated in the experiment. The actual number of gems in the jar were 375. The median of all estimates came out to be 300 and the mean of all the estimates came out to be around 396. Median underestimated and mean overestimated the actual value. So according to recent studies, Trimmed mean must be used as an aggregate measure to estimate where Wisdom of Crowds is involved.
[[File:Gemsjar.jpg|center|200px|caption]]

===Trimmed Mean===
In these kinds of experiments, 10% trimmed mean is usually followed. For calculating 10% trimmed mean, remove 10% smallest and 10% largest values from the sample. Calculate the mean of the sample obtained. In the above experiment, the trimmed mean came out to be around 351 which is very close to the actual value.

==Implementation==
Here, we try to demonstrate the concept of trimmed mean through crowd computing.
 Input a list of estimates done by the crowd .
 Sort the list.
 Remove the 10% smallest values.
 Remove the 10% largest values.
 Calculate the mean of the new list obtained .&lt;hr&gt;

==Data of Experiment==       
    Estimates =[1000,1010,1786,2000,1500,1500,100,120,150,150,150,170,175,180,197,200,200,200,200,200,200,220,220,220,220,234,250,250,250,250,250,250,250,250,250,263,270,275,275,286,300,
                300,300,300,300,300,300,300,320,350,350,350,400, 400,400,400,400,450,467,500,500,500,500,500,500,500,550,550,600,600,600,650,700,700,720]

    '''CODE:'''
&lt;pre&gt;
Estimates = [1000,1010,1786,2000,1500,1500,100,120,150,150,150,170,175,180,197,200,200,200,200,200,200,220,220,220,220,234,250,250,250,250,250,250,250,250,250,263,270,275,275,286,300,                300,300,300,300,300,300,300,320,350,350,350,400,400,400,400,400,450,467,500,500,500,500,500,500,500,550,550,600,600,600,650,700,700,720]
Estimates.sort()
offset = int(0.10*len(Estimates))
for i in range(offset):
       del Estimates[0]
       del Estimates[-1]
Sum = 0    
for i in range(len(Estimates)):
       Sum += Estimates[i]
Mean_Value = Sum/len(Estimates)
print(&quot;Mean : &quot;, int(Mean_Value))
#Output:
Mean :  351
&lt;/pre&gt;
&lt;hr&gt;
==Trimmed Mean for the above example== 
&lt;h3&gt;Using scipy library&lt;/h3&gt;
&lt;pre&gt;
#import scipy to use the method of trim_mean
from scipy import stats
trimMean = stats.trim_mean(Estimates, 0.1) # Trim 10% at both ends
print(&quot;Trimmed Mean : &quot;,trimMean)
#Output:
Trimmed Mean :  335.1020408163265
&lt;/pre&gt;

&lt;h3&gt;Without using scipy library&lt;/h3&gt;
&lt;pre&gt;
#Trimmed mean with 10%
p=10/100
#sorted data
data=[2, 4, 6, 7, 11, 21, 81, 90, 105, 121]
n = len(data)
#Remove elements from both end
rem=int(n*p)
newData = data[rem:-rem]
mean = 0
for i in newData:
    mean += i
mean = int(mean/len(newData))
print(&quot;Trimmed mean : &quot;,mean)
#Output: Trimmed mean :  40
&lt;/pre&gt;
[[#Top]]

=Jumbled_Words Permutations: Jumbled Words=
==What are Permutations ?==
A permutation also called ordering of selected number of elements from a list denoted by nPr here we are choosing all elements of a list and so n=r&lt;br&gt;
nPr=n!/(n-r)!&lt;br&gt; as n=r
nPn=n!&lt;br&gt; which gives all possible arrangement of elements present in a list.

 For example, permutations of list [1,2,3] are [1,2,3], [1,3,2], [2,1,3], [2,3,1], 
[3,1,2], and [3,2,1]. 
The number of permutations of a list of elements nPn is given by n!. For example, there are 2! = 2 x 1 = 2 permutations of [1,2], namely [1,2] and [2,1], and 3! = 3 x 2 x 1 = 6 permutations of [1,2,3], as mentioned above.&lt;br/&gt;
[[File:Permutations.jpg]]

==Implementation==
Here, we try to demonstrate the concept of permutations through jumbled words. It is a two player game in which one person presents the other person a different permutation of the word in his mind. The other person has to guess the right word. If he guesses, the he wins otherwise he loses.
 Input an list of words.
 Randomly pick a word from the list of words .
 Shuffle this word and present it to the other player.
 if word guesses by the player is same as the one picked from list of w
     player wins
 else
     player loses

ALTERNATE CODE TO GENERATE THIS GAME:
&lt;pre&gt;
import random
p1=input(&quot;enter player 1 name:&quot;)
p2=input(&quot;enter player 2 name:&quot;)
l=[&quot;rainbow&quot;,&quot;computer&quot;,&quot;robot&quot;,&quot;butter&quot;,&quot;vegetable&quot;,&quot;science&quot;,&quot;correct&quot;]
c1=c2=a1=a2=f1=f2=0
k=1
i=3
def play():
    n=random.choice(l)        ##n=chooses a word from list l
    l1=[]
    for j in n:
       l1.append(j)      ##creates a list for word in n
    for t in range(len(l1)):
       p=random.choice(l1)     ##this randomly displays letters in the list
       print(p)
       l1.remove(p)          ##to avoid the repetition of a letter
    s=input(&quot;enter the word:&quot;)
    if(s==n):
        print(&quot;correct&quot;)
        return 1
    else:
        print(&quot;not correct&quot;)
        print(&quot;answer is&quot;,n)
        return 0
def stat():
     print(&quot;player 1:&quot;)
     print(&quot;score:&quot;,c1)
     print(&quot;answered:&quot;,a1)
     print(&quot;failed:&quot;,f1)
     print(&quot;.............&quot;)
     print(&quot;player 2:&quot;)
     print(&quot;score:&quot;,c2)
     print(&quot;answered:&quot;,a2)
     print(&quot;failed&quot;,f2)
     if(c1&gt;c2):
         print(p1,&quot; won over &quot;,p2)
     elif(c1==c2):
         print(&quot;draw game&quot;)
     else:
         print(p2,&quot; won over &quot;,p1) 
while(i!=4):
      if(i==3):
         if(k==1):
             print(&quot;player 1 turn&quot;)
             print(&quot;your jumbled word is:&quot;)
             k=k+1
             m=play()
             if(m==1):      ##if guessed answer is correct,then score and no.of answered count will be increased
                c1+=1
                a1+=1
             else:
                f1+=1       ##else count of no.of failed to answered will be incremented
         else:
             print(&quot;player 2 turn&quot;)
             print(&quot;your jumbled word is:&quot;)
             k=k-1
             m=play()
             if(m==1):
                c2=c2+1
                a2=a2+1
             else:
                f2=f2+1
       if(i==2):
             print(&quot;present status&quot;)
             stat()
       i=int(input(&quot;enter your choice  1.stop 2.status 3.continue&quot;))
       if(i==1):
             stat()
             i=i+3
&lt;/pre&gt;
&lt;hr&gt;
=== JumbledWord Simple Logic, In Short ===
[[File:jumbledWord.gif]]
&lt;hr&gt;
'''Logic to create a Jumbled Word'''
&lt;hr&gt;
&lt;pre&gt;
#Get Jumbled Word and print it Horizontally
import random

def getJumbledWord(b):
    jumble=''
    l1 = [ b[i] for i in range(0, len(b)) ]
    for t in range(len(l1)):
       p=random.choice(l1)     ##this randomly gets letters from the list      
       jumble=jumble+p       
       l1.remove(p)
    return jumble

b=input(&quot;Enter a word to make it jumbled : &quot;)
print(&quot;Jumbled Word : &quot;, getJumbledWord(b))
&lt;/pre&gt;
&lt;hr&gt;
'''Another Logic to create a Jumbled Word'''
&lt;hr&gt;
&lt;pre&gt;
b=input(&quot;Enter a word to make it jumbled : &quot;)

def getJumbledWord1(b):
    l1 = [ b[i] for i in range(0, len(b)) ]
    random.shuffle(l1)
    str1 = ''.join(l1)
    return str1

print(&quot;Jumbled Word : &quot;, getJumbledWord1(b))
&lt;/pre&gt;

====Sample Output:====
&lt;pre&gt;
---- Output1 
Enter a word to make it jumbled : butter
Jumbled Word :  tbture

---- Output2 
Enter a word to make it jumbled : petriotism
Jumbled Word :  pittrosime
&lt;/pre&gt;

=Theory of Evolution=

== What is Evolution ? ==
Evolution is the change in heritable characteristics over successive generations. The theory of evolution explains that DNA, which acts as a carrier of genetic information from one generation to other, tends to change or mutate occasionally. These changes are reflected in next generations to come. This is how life has evolved on earth from bacteria to human beings.&lt;br&gt;
[[File:Evolution.png|500px]]

== Implementation ==
An array representing DNA is stored in a file. As genes are forms of DNA, they contain information to be transferred to forthcoming generations. Assume that information is in the form of bits (in the form of 0s and 1s). A number is picked randomly from 1 to the size of the array. A new parameter has been introduced which decides whether mutation would occur or not. If the value of this new parameter is 1 (It is picked randomly from 1 to 100), then only change is reflected down the generations, otherwise it is not. The pseudo code is as follows :
Input an array containing genetic information .
Randomly generate a number (say m) from 1 to length of the array. Randomly generate other number (say p) from 1 to 100.
 
    if p is equal to 1 then 
        if m is 1 then
          set it to 0
        else
          set it to 1</text>
      <sha1>s7omexf1pyqc4mi2gv6pp3xftpb96pn</sha1>
    </revision>
    <revision>
      <id>3488</id>
      <parentid>3487</parentid>
      <timestamp>2018-09-27T13:14:47Z</timestamp>
      <contributor>
        <username>Sachinkr</username>
        <id>1743</id>
      </contributor>
      <comment>/* Delete list */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="28186">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_3 Contributors of this page]
*Week 3 Playlist: https://www.youtube.com/playlist?list=PLc_j0TNIaWxOVx_z9jAM2UB3RqYNXaoEo
=List=
List is a flexible data structure used for storing a group of data separated by comma. The elements in a list need not be of the same data type.

'''Example:'''
       List_1 = [ 1, 2,3] or 
       List_1 = [&quot;coffee&quot;, &quot;Tea&quot;, &quot;Milk&quot;] or
       List_1 = [1,&quot;coffee&quot;, &quot;Tea&quot;, 3, &quot;5&quot;]

==List Creation==
&lt;pre&gt;a) A list can be created by simply putting values (separated by comma) between square brackets as given below,
       List_1 = [1,&quot;coffee&quot;, &quot;Tea&quot;, 3, &quot;5&quot;] #this creates a list by name List_1 containing following items


Or,
(b)A List can be created from scratch and elements can be added 
        List_2 = [ ]
        List_2.append(&quot;Kala&quot;)
        List_2.append(&quot;Mala&quot;)
Here we use &quot;append&quot; ,which is a function in python that enable us to append or attach an element to a list .
Thus List_2 will now hold [&quot;Kala&quot;,&quot;Mala&quot;]
&lt;/pre&gt;
[[#TOP]]

==Operations and Methods to work with List==
&lt;pre&gt;
a = [25,30,50,90,12,13]
b = [100,300,500,200,250]
&lt;/pre&gt;
&lt;hr&gt;
&lt;table border=2&gt;
  &lt;tr&gt;
    &lt;th&gt;&lt;b&gt;Method/&lt;br&gt;Operator&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Function&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Syntax&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Output&lt;/b&gt;&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;len()&lt;/td&gt;
    &lt;td&gt;Find length of a list&lt;/td&gt;
    &lt;td&gt;len(a)&lt;/td&gt;
    &lt;td&gt;6&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;max()&lt;/td&gt;
    &lt;td&gt;Find maximum element from the list&lt;/td&gt;
    &lt;td&gt;max(a)&lt;/td&gt;
    &lt;td&gt;90&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;min()&lt;/td&gt;
    &lt;td&gt;Find minimum element from the list&lt;/td&gt;
    &lt;td&gt;min(a)&lt;/td&gt;
    &lt;td&gt;12&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sum()&lt;/td&gt;
    &lt;td&gt;Returns sum of all elements of the list&lt;/td&gt;
    &lt;td&gt;sum(a)&lt;/td&gt;
    &lt;td&gt;220&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;reverse()&lt;/td&gt;
    &lt;td&gt;Reverses the original list&lt;/td&gt;
    &lt;td&gt;a.reverse()&lt;/td&gt;
    &lt;td&gt;[13, 12, 90, 50, 30, 25]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sort()&lt;/td&gt;
    &lt;td&gt;Sorts the original list in ascending order&lt;/td&gt;
    &lt;td&gt;a.sort()&lt;/td&gt;
    &lt;td&gt;[12, 13, 25, 30, 50, 90]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sorted()&lt;/td&gt;
    &lt;td&gt;Returns the new sorted list &lt;/td&gt;
    &lt;td&gt;sorted(a)&lt;/td&gt;
    &lt;td&gt;[12, 13, 25, 30, 50, 90]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;insert()&lt;/td&gt;
    &lt;td&gt;Insert at a particular index in the list, and shifts remaining elements&lt;/td&gt;
    &lt;td&gt;a.insert(3,3)&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 3, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;append()&lt;/td&gt;
    &lt;td&gt;Adds elements/object to the end of the list&lt;/td&gt;
    &lt;td&gt;a.append(5)&lt;br&gt;a.append([10,20])&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 5]&lt;br&gt;[25, 30, 50, 90, 12, 13, [10, 20]]&lt;br&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;extend()&lt;/td&gt;
    &lt;td&gt;Adds object to the end of the list as elements not as object&lt;/td&gt;
    &lt;td&gt;a.extend([10,20])&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 10, 20]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;*&amp;nbsp;&amp;nbsp;Repeatation&lt;br&gt;operator&lt;/td&gt;
    &lt;td&gt;Repeat the list for n times and returns a new list&lt;/td&gt;
    &lt;td&gt;a*2&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 25, 30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;+ Concatenation&lt;br&gt;operator&lt;/td&gt;
    &lt;td&gt;Concatenates two lists, and returns a new list&lt;/td&gt;
    &lt;td&gt;a+b&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 100, 300, 500, 200, 250]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;index()&lt;/td&gt;
    &lt;td&gt;Finds index of a particular element in the list or not&lt;/td&gt;
    &lt;td&gt;a.index(25)&lt;br&gt;a.index(0)&lt;br&gt;&lt;/td&gt;
    &lt;td&gt;0&lt;br&gt;&lt;br&gt;ValueError: 0 is not in list&lt;br&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;in operator&lt;/td&gt;
    &lt;td&gt;Finds whether a particular element is in the list or not, returns boolean&lt;/td&gt;
    &lt;td&gt;25 in a&lt;/td&gt;
    &lt;td&gt;True&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;not in operator&lt;/td&gt;
    &lt;td&gt;Checks if element is not available in list, returns boolean&lt;/td&gt;
    &lt;td&gt;25 not in a&lt;/td&gt;
    &lt;td&gt;False&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;count()&lt;/td&gt;
    &lt;td&gt;Counts the number of occurence of an element in the list&lt;/td&gt;
    &lt;td&gt;a.count(25)&lt;/td&gt;
    &lt;td&gt;1&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;remove()&lt;/td&gt;
    &lt;td&gt;Removes an element from the list&lt;/td&gt;
    &lt;td&gt;a.remove(25)&lt;/td&gt;
    &lt;td&gt; [30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;pop()&lt;/td&gt;
    &lt;td&gt;Delete and return item at index 0&lt;/td&gt;
    &lt;td&gt;a.pop(0)&lt;/td&gt;
    &lt;td&gt;25 , a will be [30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;del&lt;/td&gt;
    &lt;td&gt;Deletes item at a particular index from the list&lt;/td&gt;
    &lt;td&gt;del a[0]&lt;/td&gt;
    &lt;td&gt;[30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;

==Printing the List==
=== Print whole list ===
A list can be printed simply or using a ''for / while'' loop 

 print(List_2)     # To print the entire list
This code will print      
 ['Kala','Mala']     

===Print element at a particular index===
&lt;pre&gt;
Using index position
    List_2[0]     # prints 'Kala' ,i.e,the value at index position 0.
    List_2[1]     # prints 'Mala'.
&lt;/pre&gt;
=== Without using index position ===
&lt;pre&gt;
for item in List_2:   # here item is a variable used to access elements in list.
       print(item)
   This code snippet prints 
    Kala
    Mala
&lt;/pre&gt;
[[#TOP]]

==Search for a particular element in list==
Elements in a list can be searched by one of the two ways:
=== using index() function===
&lt;pre&gt;
ages1 = [11,23,12,23,45]

#if element is available in the list, index() returns the index value on which, the element is present.
print(ages1.index(45))#Output: 4

#if element is not available in the list, index() returns ''ValueError''
print(ages1.index(0))#Output: ValueError:
&lt;/pre&gt;

In programming, if such error occurs, program gets terminated. It can be solved using exception handling.
e.g.
&lt;pre&gt;
ages1 = [11,23,12,23,45]

try:
    print(ages1.index(0))
except ValueError:
    print(&quot;Exception has occured&quot;)    
    print(&quot;Element is not found in the list&quot;)

&lt;/pre&gt;
&lt;pre&gt;
'''Output: 
Exception has occured
Element is not found in the list
'''&lt;/pre&gt;
[[#TOP]]

=== using 'in' operator===
''in'' operator is used to check whether a particular element is available in the list or not.e.g.

&lt;pre&gt;
ages1 = [11,23,12,23,45]
no=11

if no in ages1:
    print(&quot;no is there in the list&quot;)
else:    
    print(&quot;no is NOT there in the list&quot;)
&lt;/pre&gt;
&lt;pre&gt;
#Output: no is there in the list
&lt;/pre&gt;

'''Number is not there in the list'''
&lt;pre&gt;
ages1 = [11,23,12,23,45]
no=15

if no in ages1:
    print(&quot;no is there in the list&quot;)
else:    
    print(&quot;no is NOT there in the list&quot;)
&lt;/pre&gt;
&lt;pre&gt;
Output: no is NOT there in the list
&lt;/pre&gt;
[[#TOP]]

==Updating the List==
The lists can be updated using ''append'' or ''insert'' function.  Append adds the element to the end of the list and Insert adds the element in the specified position.
   List_2.append(&quot;Sheela&quot;)    # add the element 'Sheela' to the end of the list.
   print (List_2) will output 
   ['Kala', 'Mala', 'Sheela']
   
   List_2.insert(1,&quot;Bala&quot;)    # add the element &quot;Bala&quot; in the list at the index 1.
   print (List_2) will output 
   ['Kala', 'Bala','Mala', 'Sheela']

=== Extend the list by adding elements of other list at end using extend()===
&lt;pre&gt;
ages = [11,23,12,23,45]
ages.extend([57,58])
print(ages)
&lt;/pre&gt;

&lt;pre&gt;
#Output: [11, 23, 12, 23, 45, 57, 58]
&lt;/pre&gt;

==== Difference between ''append and extend'' ====
Difference between append and extend can be easily understood, by the following example.

&lt;pre&gt;
appendlist = [11,23,12,23,45]
appendlist.append([57,58])

extendlist= [11,23,12,23,45]
extendlist.extend([57,58])
&lt;/pre&gt;

&lt;pre&gt;
'''Output:
[11, 23, 12, 23, 45, [57, 58]]
[11, 23, 12, 23, 45, 57, 58]'''
&lt;/pre&gt;
[[#TOP]]

==Basic Operations on List==
===Frequency of Occurrence===
list.count(object) will return the number of times the object occur in the list.
  '''Example'''
    ages = [11,23,12,23,45,43,22,24,23]
    ages.count(23) will return
    3
    ages.count(100) will return
    0

===Length of the List===
len(list) will return the length of the list ie. the number of objects in the list.
  '''Example'''
    ages = [11,23,12,23,45,43,22,24,23]
    len(ages) will output
    9
To print the objects in the list either use ''for item in list'' or ''for index in range(len(list))''
    for item in ages:       
        print (item)  
        (OR)
    for index in range(len(ages)) :
        print (ages[index])
===Sort the List===
list.sort() will sort the list in ascending order
  '''Example'''
    ages = [11,23,12,23,45,43,22,24,23]
    ages.sort() 
    print (ages) 
    [11, 12, 22, 23, 23, 23, 24, 43, 45]

[[#TOP]]

===Sort the List using sorted() function===
sorted(list1) will sort the list and return a new list, it doesn't modify the original list
&lt;br&gt;'''Example: Sort in ascending order'''
&lt;pre&gt;
ages = [11,23,12,23,45,43,22,24,23]
newList=sorted(ages)
print(newList)

#Output: [11, 12, 22, 23, 23, 23, 24, 43, 45]
&lt;/pre&gt;

&lt;br&gt;'''Example: Sort in descending order'''
&lt;pre&gt;
ages = [11,23,12,23,45,43,22,24,23]
newList=sorted(ages,reverse=True)
print(newList)

#Output: [45, 43, 24, 23, 23, 23, 22, 12, 11]
&lt;/pre&gt;

===Reverse the List===
list.reverse() will reverse the original list
  '''Example'''
    ages = [11, 12, 22, 23, 23, 23, 24, 43, 45]
    ages.reverse()
    print (ages)
    [45, 43, 24, 23, 23, 23, 22, 12, 11]

Both sort() and reverse() list operation will work on numeric and alphanumeric data list.

A special use of the reverse() function is to descend a list that is sorted in ascending order.

  '''Example'''
&lt;pre&gt;
ages = [11, 12, 22, 23, 23, 23, 24, 43, 45]
ages.sort()
print(ages)
ages.reverse()
print(ages)
&lt;/pre&gt;

===Slicing===
Used to retrieve an object or objects in a range as a list  
  '''Example'''
Use ''list[index]'' to retrieve the object at the given index
         In [1]: student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
         In [2]: student[3]     #Object at index 3.  Remember index starts at 0
         Out[2]: 'Geetha'      


Use ''list[start_index : end_index + 1]'' to retrieve objects from the start_index to end_index 
         In [3]: student[2:4]     # Objects from index 2 to 3 as List. Note the [ and ]
         Out[3]: ['Vijay', 'Geetha']   


Use ''list[:]'' to retrieve objects from the starting of the list to the end of the list. 
The default start value will be the starting index of the list (i.e. 0) and the default end value
will be the length of the list 
         In [4]: student[:]        # prints the entire list
         Out[4]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma', 'Janani']


         In [5]: student[:5]       # prints the objects from the start of the list upto object at index 4
         Out[5]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran']


         In [6]: student[2:]       # prints the objects from index 2 upto the end of the list
         Out[6]: ['Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma', 'Janani']


Negative index too is available in Python. It starts from last element of the list. i.e.

         In [7]:student[-1]        #prints last index of list
         Out[7]: 'Janani'


         In [8]:student[-1:-8]     #prints empty list
         Out[8]: []


         In [9]:student[-8:-1]     #prints -8th index to -1st index elements
         Out[9]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma']

[[#TOP]]
===Removing Item from list ===
----

Is used to remove a specific item from the list.

'''Example:'''
 
Use list.remove(entry/value)  Or   del list[index]    Or list.pop(index)
         student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
         student.remove(&quot;Arun&quot;)   #This will delete item &quot;Arun&quot;
         Or    
         del student[0]           # This will delete item at index 0
         Or
         student.pop(0)         # This will delete and return item at index 0


         print(student)    
         Output: [&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]

[[#TOP]]
===Delete list ===
----
Used to delete complete list

'''Example'''

Use del &lt;list name&gt;
         student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
         del student

===Concatenation of two lists===
----
''+'' is the concatenation operator which is used concatenate two lists. 
&lt;pre&gt;
ages1 = [11,23,12,23,45]
ages2 = [25, 24, 43, 47]
age=ages1+ages2
print(age)
#Output: [11, 23, 12, 23, 45, 25, 24, 43, 47]
&lt;/pre&gt;

===Repeatation of a list ===
----
''*'' is the operator to repeat a particular list.
&lt;pre&gt;
ages1 = [11,23,12,23,45]
age=ages1*5 #ages1 list is repeated 5 times and stroed in ''age'' list
print(age)

#Output: [11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45]
&lt;/pre&gt;
====Conditional Statements====
    Conditionals are used to check the condition and change the flow of the program 
accordingly. They are realized in programming languages through if statement. The 
syntax is as follows :
         if condition : 
            statement
    '''Note:''' Do not forget indentation (inserting space/tab) in the line after the
 if condition.
    
    In case you want to execute a set of statements when a condition is true and another

set of statement when the condition is false.
         if condition : 
            statement 1
         else :
            statement 2
    
    Multiple if-else statements can be written as follows:
         if condition_1 : 
            statement 1
         elif condition_2 : # 'elif' is short for 'else if'
            statement 2
         elif condition_3 :
            statement 3
        .
        .
         else :
            final statement

=Loops and Conditionals : Fizzbuzz=
====Loops====

    Loops are used to execute a set of repetitive statements. They are realized
 through 'while' and 'for' loops in programming languages. The syntax of 'for' loop is 
as follows :
        for LOOPVARIABLE in SEQUENCE: 
            STATEMENTS
    '''e.g.''' to print all the data from a list we can write:
        for item in list_name
            print(item)
    OR
        for index in range(len(list_name))
            print(list_name[index])
    
    The syntax for while loop is as follows :
    
        while BOOLEANEXPRESSION: 
            STATEMENTS
            INCREMENT/DECREMENT
    
    '''e.g.''' if we want to print all numbers from 1 to 10
        i=1
        while i&lt;=10 :
            print(i,&quot; &quot;)
            i=i+1
    
    'while' loop has indefinite iteration (run-time unknown). So, there must be loop
 break statement in it.
 Whereas 'for' loop is definite in nature (i.e. known or predictable span).&lt;br&gt;

&lt;b&gt;NOTE: Python doesn't have anything like do-while loop.&lt;/b&gt;

==Implementation==
Here, we try to demonstrate the concept of loops and conditionals through a game called Fizzbuzz. The rules are as follows :&lt;br/&gt;
[[File:fizzBuzz.gif]]

• if input number is a multiple of ’3’ print ”Fizz”
&lt;br/&gt;
• if input number is a multiple of ’5’ print ”Buzz”
&lt;br/&gt;
• if input number is a multiple of both '3' and ’5’ print ”FizzBuzz”
&lt;br/&gt;
The pseudo code is as follows :
&lt;pre&gt;
   If input no % 3 == 0 and  input no % 5 == 0 : 
       print ”Fizzbuzz”
   else if input no % 3 == 0 : 
       print ”Fizz”
   else if input no % 5 == 0 : 
       print ”Buzz”
   else :
       print the input no
&lt;/pre&gt;
The order of statements execution matters to get the desired output. The highest priority condition should be first followed by other. In fizzbuzz programming, first checking should be done for both divisibility of 3 and 5. If condition not satisfied only then it should check individually for 3 or 5. So carefully choosing the order is crucial for better programming.
Note: There is some effect of present condition statements chosen on next conditions statements. That is why in first attempt fizzbuzz programming got struck.

Example: 
&lt;pre&gt;
#Code to achieve the above requirement in python3.
i = int(input(&quot;Enter the number&quot;)) 
if i%3 == 0 and i%5 == 0: print(i,&quot;FizzBuzz&quot;)  
elif i%5 == 0: print(i,&quot;Buzz&quot;)
elif i%3 == 0: print(i,&quot;Fizz&quot;)
else: print(i)
&lt;/pre&gt;
Lets put the same into a loop for a range given by the user.
&lt;pre&gt;
def fizzbuzzgame(start,stop):
    for i in range(start,stop+1):
        if i%3 == 0 and i%5 == 0:
            print(i,&quot;FizzBuzz&quot;)
        elif i%5 == 0:
            print(i,&quot;Buzz&quot;)
        elif i%3 == 0:
            print(i,&quot;Fizz&quot;)
        else: print(i)

fizzbuzzgame(50,100)
&lt;/pre&gt;


=== Fizz Buzz game in Interactive mode with Score ===
'''By Ms. Ami Tusharkant Choksi'''
&lt;pre&gt;
def fizzbuzzgame(i):
        if i%3 == 0 and i%5 == 0:
            print(i,&quot;FizzBuzz&quot;)
            return(&quot;fzbz&quot;)
        elif i%5 == 0:
            print(i,&quot;Buzz&quot;)
            return(&quot;bz&quot;)
        elif i%3 == 0:
            print(i,&quot;Fizz&quot;)
            return(&quot;fz&quot;)
        else:
            print(i)
            return(&quot;no&quot;)

ch = 'y'
fizzbuzz=0
fizz=0
buzz=0
nothing=0
print(&quot;&quot;&quot;
 _____  ____  _____  _____  ____   __ __  _____  _____       ____   ____  ___ ___    ___ 
|     ||    ||     ||     ||    \ |  |  ||     ||     |     /    | /    ||   |   |  /  _]
|   __| |  | |__/  ||__/  ||  o  )|  |  ||__/  ||__/  |    |   __||  o  || _   _ | /  [_ 
|  |_   |  | |   __||   __||     ||  |  ||   __||   __|    |  |  ||     ||  \_/  ||    _]
|   _]  |  | |  /  ||  /  ||  O  ||  :  ||  /  ||  /  |    |  |_ ||  _  ||   |   ||   [_ 
|  |    |  | |     ||     ||     ||     ||     ||     |    |     ||  |  ||   |   ||     |
|__|   |____||_____||_____||_____| \__,_||_____||_____|    |___,_||__|__||___|___||_____|
                                                                                         
&quot;&quot;&quot;)   

while(ch == 'y'):
    n=int(input(&quot;Enter a Number : &quot;))
    winLoose=fizzbuzzgame(n)
    if(winLoose == &quot;fz&quot;):
        fizz+=1
    elif(winLoose == &quot;bz&quot;):
        buzz+=1
    elif(winLoose == &quot;fzbz&quot;):
        fizzbuzz+=1
    ch=input(&quot;Do you want to continue playing the game : (y/n)&quot;)
    if(ch=='n'):
        print('Congratulations, your score is\n FizzBuzz:%d\nFizz:%d\nBuzz:%d' %
(fizzbuzz,fizz,buzz))
    
'''Sample Output:

 _____  ____  _____  _____  ____   __ __  _____  _____       ____   ____  ___ ___    ___ 
|     ||    ||     ||     ||    \ |  |  ||     ||     |     /    | /    ||   |   |  /  _]
|   __| |  | |__/  ||__/  ||  o  )|  |  ||__/  ||__/  |    |   __||  o  || _   _ | /  [_ 
|  |_   |  | |   __||   __||     ||  |  ||   __||   __|    |  |  ||     ||  \_/  ||    _]
|   _]  |  | |  /  ||  /  ||  O  ||  :  ||  /  ||  /  |    |  |_ ||  _  ||   |   ||   [_ 
|  |    |  | |     ||     ||     ||     ||     ||     |    |     ||  |  ||   |   ||     |
|__|   |____||_____||_____||_____| \__,_||_____||_____|    |___,_||__|__||___|___||_____|
                                                                                         

Enter a Number : 666
666 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 777
777 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 555
555 FizzBuzz
Do you want to continue playing the game : (y/n)y
Enter a Number : 1
1
Do you want to continue playing the game : (y/n)y
Enter a Number : 789
789 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 25
25 Buzz
Do you want to continue playing the game : (y/n)n
Congratulations, your score is

FizzBuzz:1
Fizz:3
Buzz:1

&lt;/pre&gt;

=Crowd Computing: Just Estimate=
==Wisdom of Crowds==
The concept of ’Wisdom of Crowds’ was proposed by Francis Galton. A weight-judging competition was carried on at the annual show of the West of England Fat Stock and Poultry Exhibition recently held at Plymouth, A fat ox having been selected, competitors bought stamped and numbered cards, each, on which to inscribe their respective names, addresses, and estimates of what the ox would weigh after it had been slaughtered. Those who guessed most successfully received prizes. About 8oo tickets were issued to the par- ticipants. The middlemost estimate of all the estimates recorded was 1207 lbs and the actual weight of the ox was 1198 lbs.

==Our Experiment==
The crowd had to guess the number of candies/gems in a jar. Around 75 people participated in the experiment. The actual number of gems in the jar were 375. The median of all estimates came out to be 300 and the mean of all the estimates came out to be around 396. Median underestimated and mean overestimated the actual value. So according to recent studies, Trimmed mean must be used as an aggregate measure to estimate where Wisdom of Crowds is involved.
[[File:Gemsjar.jpg|center|200px|caption]]

===Trimmed Mean===
In these kinds of experiments, 10% trimmed mean is usually followed. For calculating 10% trimmed mean, remove 10% smallest and 10% largest values from the sample. Calculate the mean of the sample obtained. In the above experiment, the trimmed mean came out to be around 351 which is very close to the actual value.

==Implementation==
Here, we try to demonstrate the concept of trimmed mean through crowd computing.
 Input a list of estimates done by the crowd .
 Sort the list.
 Remove the 10% smallest values.
 Remove the 10% largest values.
 Calculate the mean of the new list obtained .&lt;hr&gt;

==Data of Experiment==       
    Estimates =[1000,1010,1786,2000,1500,1500,100,120,150,150,150,170,175,180,197,200,200,200,200,200,200,220,220,220,220,234,250,250,250,250,250,250,250,250,250,263,270,275,275,286,300,
                300,300,300,300,300,300,300,320,350,350,350,400, 400,400,400,400,450,467,500,500,500,500,500,500,500,550,550,600,600,600,650,700,700,720]

    '''CODE:'''
&lt;pre&gt;
Estimates = [1000,1010,1786,2000,1500,1500,100,120,150,150,150,170,175,180,197,200,200,200,200,200,200,220,220,220,220,234,250,250,250,250,250,250,250,250,250,263,270,275,275,286,300,                300,300,300,300,300,300,300,320,350,350,350,400,400,400,400,400,450,467,500,500,500,500,500,500,500,550,550,600,600,600,650,700,700,720]
Estimates.sort()
offset = int(0.10*len(Estimates))
for i in range(offset):
       del Estimates[0]
       del Estimates[-1]
Sum = 0    
for i in range(len(Estimates)):
       Sum += Estimates[i]
Mean_Value = Sum/len(Estimates)
print(&quot;Mean : &quot;, int(Mean_Value))
#Output:
Mean :  351
&lt;/pre&gt;
&lt;hr&gt;
==Trimmed Mean for the above example== 
&lt;h3&gt;Using scipy library&lt;/h3&gt;
&lt;pre&gt;
#import scipy to use the method of trim_mean
from scipy import stats
trimMean = stats.trim_mean(Estimates, 0.1) # Trim 10% at both ends
print(&quot;Trimmed Mean : &quot;,trimMean)
#Output:
Trimmed Mean :  335.1020408163265
&lt;/pre&gt;

&lt;h3&gt;Without using scipy library&lt;/h3&gt;
&lt;pre&gt;
#Trimmed mean with 10%
p=10/100
#sorted data
data=[2, 4, 6, 7, 11, 21, 81, 90, 105, 121]
n = len(data)
#Remove elements from both end
rem=int(n*p)
newData = data[rem:-rem]
mean = 0
for i in newData:
    mean += i
mean = int(mean/len(newData))
print(&quot;Trimmed mean : &quot;,mean)
#Output: Trimmed mean :  40
&lt;/pre&gt;
[[#Top]]

=Jumbled_Words Permutations: Jumbled Words=
==What are Permutations ?==
A permutation also called ordering of selected number of elements from a list denoted by nPr here we are choosing all elements of a list and so n=r&lt;br&gt;
nPr=n!/(n-r)!&lt;br&gt; as n=r
nPn=n!&lt;br&gt; which gives all possible arrangement of elements present in a list.

 For example, permutations of list [1,2,3] are [1,2,3], [1,3,2], [2,1,3], [2,3,1], 
[3,1,2], and [3,2,1]. 
The number of permutations of a list of elements nPn is given by n!. For example, there are 2! = 2 x 1 = 2 permutations of [1,2], namely [1,2] and [2,1], and 3! = 3 x 2 x 1 = 6 permutations of [1,2,3], as mentioned above.&lt;br/&gt;
[[File:Permutations.jpg]]

==Implementation==
Here, we try to demonstrate the concept of permutations through jumbled words. It is a two player game in which one person presents the other person a different permutation of the word in his mind. The other person has to guess the right word. If he guesses, the he wins otherwise he loses.
 Input an list of words.
 Randomly pick a word from the list of words .
 Shuffle this word and present it to the other player.
 if word guesses by the player is same as the one picked from list of w
     player wins
 else
     player loses

ALTERNATE CODE TO GENERATE THIS GAME:
&lt;pre&gt;
import random
p1=input(&quot;enter player 1 name:&quot;)
p2=input(&quot;enter player 2 name:&quot;)
l=[&quot;rainbow&quot;,&quot;computer&quot;,&quot;robot&quot;,&quot;butter&quot;,&quot;vegetable&quot;,&quot;science&quot;,&quot;correct&quot;]
c1=c2=a1=a2=f1=f2=0
k=1
i=3
def play():
    n=random.choice(l)        ##n=chooses a word from list l
    l1=[]
    for j in n:
       l1.append(j)      ##creates a list for word in n
    for t in range(len(l1)):
       p=random.choice(l1)     ##this randomly displays letters in the list
       print(p)
       l1.remove(p)          ##to avoid the repetition of a letter
    s=input(&quot;enter the word:&quot;)
    if(s==n):
        print(&quot;correct&quot;)
        return 1
    else:
        print(&quot;not correct&quot;)
        print(&quot;answer is&quot;,n)
        return 0
def stat():
     print(&quot;player 1:&quot;)
     print(&quot;score:&quot;,c1)
     print(&quot;answered:&quot;,a1)
     print(&quot;failed:&quot;,f1)
     print(&quot;.............&quot;)
     print(&quot;player 2:&quot;)
     print(&quot;score:&quot;,c2)
     print(&quot;answered:&quot;,a2)
     print(&quot;failed&quot;,f2)
     if(c1&gt;c2):
         print(p1,&quot; won over &quot;,p2)
     elif(c1==c2):
         print(&quot;draw game&quot;)
     else:
         print(p2,&quot; won over &quot;,p1) 
while(i!=4):
      if(i==3):
         if(k==1):
             print(&quot;player 1 turn&quot;)
             print(&quot;your jumbled word is:&quot;)
             k=k+1
             m=play()
             if(m==1):      ##if guessed answer is correct,then score and no.of answered count will be increased
                c1+=1
                a1+=1
             else:
                f1+=1       ##else count of no.of failed to answered will be incremented
         else:
             print(&quot;player 2 turn&quot;)
             print(&quot;your jumbled word is:&quot;)
             k=k-1
             m=play()
             if(m==1):
                c2=c2+1
                a2=a2+1
             else:
                f2=f2+1
       if(i==2):
             print(&quot;present status&quot;)
             stat()
       i=int(input(&quot;enter your choice  1.stop 2.status 3.continue&quot;))
       if(i==1):
             stat()
             i=i+3
&lt;/pre&gt;
&lt;hr&gt;
=== JumbledWord Simple Logic, In Short ===
[[File:jumbledWord.gif]]
&lt;hr&gt;
'''Logic to create a Jumbled Word'''
&lt;hr&gt;
&lt;pre&gt;
#Get Jumbled Word and print it Horizontally
import random

def getJumbledWord(b):
    jumble=''
    l1 = [ b[i] for i in range(0, len(b)) ]
    for t in range(len(l1)):
       p=random.choice(l1)     ##this randomly gets letters from the list      
       jumble=jumble+p       
       l1.remove(p)
    return jumble

b=input(&quot;Enter a word to make it jumbled : &quot;)
print(&quot;Jumbled Word : &quot;, getJumbledWord(b))
&lt;/pre&gt;
&lt;hr&gt;
'''Another Logic to create a Jumbled Word'''
&lt;hr&gt;
&lt;pre&gt;
b=input(&quot;Enter a word to make it jumbled : &quot;)

def getJumbledWord1(b):
    l1 = [ b[i] for i in range(0, len(b)) ]
    random.shuffle(l1)
    str1 = ''.join(l1)
    return str1

print(&quot;Jumbled Word : &quot;, getJumbledWord1(b))
&lt;/pre&gt;

====Sample Output:====
&lt;pre&gt;
---- Output1 
Enter a word to make it jumbled : butter
Jumbled Word :  tbture

---- Output2 
Enter a word to make it jumbled : petriotism
Jumbled Word :  pittrosime
&lt;/pre&gt;

=Theory of Evolution=

== What is Evolution ? ==
Evolution is the change in heritable characteristics over successive generations. The theory of evolution explains that DNA, which acts as a carrier of genetic information from one generation to other, tends to change or mutate occasionally. These changes are reflected in next generations to come. This is how life has evolved on earth from bacteria to human beings.&lt;br&gt;
[[File:Evolution.png|500px]]

== Implementation ==
An array representing DNA is stored in a file. As genes are forms of DNA, they contain information to be transferred to forthcoming generations. Assume that information is in the form of bits (in the form of 0s and 1s). A number is picked randomly from 1 to the size of the array. A new parameter has been introduced which decides whether mutation would occur or not. If the value of this new parameter is 1 (It is picked randomly from 1 to 100), then only change is reflected down the generations, otherwise it is not. The pseudo code is as follows :
Input an array containing genetic information .
Randomly generate a number (say m) from 1 to length of the array. Randomly generate other number (say p) from 1 to 100.
 
    if p is equal to 1 then 
        if m is 1 then
          set it to 0
        else
          set it to 1</text>
      <sha1>6tszqhd6n2hlkwi5rra9e0e2jiaipvf</sha1>
    </revision>
    <revision>
      <id>3489</id>
      <parentid>3488</parentid>
      <timestamp>2018-09-27T13:15:39Z</timestamp>
      <contributor>
        <username>Sachinkr</username>
        <id>1743</id>
      </contributor>
      <comment>/* Conditional Statements */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="28203">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_3 Contributors of this page]
*Week 3 Playlist: https://www.youtube.com/playlist?list=PLc_j0TNIaWxOVx_z9jAM2UB3RqYNXaoEo
=List=
List is a flexible data structure used for storing a group of data separated by comma. The elements in a list need not be of the same data type.

'''Example:'''
       List_1 = [ 1, 2,3] or 
       List_1 = [&quot;coffee&quot;, &quot;Tea&quot;, &quot;Milk&quot;] or
       List_1 = [1,&quot;coffee&quot;, &quot;Tea&quot;, 3, &quot;5&quot;]

==List Creation==
&lt;pre&gt;a) A list can be created by simply putting values (separated by comma) between square brackets as given below,
       List_1 = [1,&quot;coffee&quot;, &quot;Tea&quot;, 3, &quot;5&quot;] #this creates a list by name List_1 containing following items


Or,
(b)A List can be created from scratch and elements can be added 
        List_2 = [ ]
        List_2.append(&quot;Kala&quot;)
        List_2.append(&quot;Mala&quot;)
Here we use &quot;append&quot; ,which is a function in python that enable us to append or attach an element to a list .
Thus List_2 will now hold [&quot;Kala&quot;,&quot;Mala&quot;]
&lt;/pre&gt;
[[#TOP]]

==Operations and Methods to work with List==
&lt;pre&gt;
a = [25,30,50,90,12,13]
b = [100,300,500,200,250]
&lt;/pre&gt;
&lt;hr&gt;
&lt;table border=2&gt;
  &lt;tr&gt;
    &lt;th&gt;&lt;b&gt;Method/&lt;br&gt;Operator&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Function&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Syntax&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Output&lt;/b&gt;&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;len()&lt;/td&gt;
    &lt;td&gt;Find length of a list&lt;/td&gt;
    &lt;td&gt;len(a)&lt;/td&gt;
    &lt;td&gt;6&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;max()&lt;/td&gt;
    &lt;td&gt;Find maximum element from the list&lt;/td&gt;
    &lt;td&gt;max(a)&lt;/td&gt;
    &lt;td&gt;90&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;min()&lt;/td&gt;
    &lt;td&gt;Find minimum element from the list&lt;/td&gt;
    &lt;td&gt;min(a)&lt;/td&gt;
    &lt;td&gt;12&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sum()&lt;/td&gt;
    &lt;td&gt;Returns sum of all elements of the list&lt;/td&gt;
    &lt;td&gt;sum(a)&lt;/td&gt;
    &lt;td&gt;220&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;reverse()&lt;/td&gt;
    &lt;td&gt;Reverses the original list&lt;/td&gt;
    &lt;td&gt;a.reverse()&lt;/td&gt;
    &lt;td&gt;[13, 12, 90, 50, 30, 25]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sort()&lt;/td&gt;
    &lt;td&gt;Sorts the original list in ascending order&lt;/td&gt;
    &lt;td&gt;a.sort()&lt;/td&gt;
    &lt;td&gt;[12, 13, 25, 30, 50, 90]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sorted()&lt;/td&gt;
    &lt;td&gt;Returns the new sorted list &lt;/td&gt;
    &lt;td&gt;sorted(a)&lt;/td&gt;
    &lt;td&gt;[12, 13, 25, 30, 50, 90]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;insert()&lt;/td&gt;
    &lt;td&gt;Insert at a particular index in the list, and shifts remaining elements&lt;/td&gt;
    &lt;td&gt;a.insert(3,3)&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 3, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;append()&lt;/td&gt;
    &lt;td&gt;Adds elements/object to the end of the list&lt;/td&gt;
    &lt;td&gt;a.append(5)&lt;br&gt;a.append([10,20])&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 5]&lt;br&gt;[25, 30, 50, 90, 12, 13, [10, 20]]&lt;br&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;extend()&lt;/td&gt;
    &lt;td&gt;Adds object to the end of the list as elements not as object&lt;/td&gt;
    &lt;td&gt;a.extend([10,20])&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 10, 20]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;*&amp;nbsp;&amp;nbsp;Repeatation&lt;br&gt;operator&lt;/td&gt;
    &lt;td&gt;Repeat the list for n times and returns a new list&lt;/td&gt;
    &lt;td&gt;a*2&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 25, 30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;+ Concatenation&lt;br&gt;operator&lt;/td&gt;
    &lt;td&gt;Concatenates two lists, and returns a new list&lt;/td&gt;
    &lt;td&gt;a+b&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 100, 300, 500, 200, 250]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;index()&lt;/td&gt;
    &lt;td&gt;Finds index of a particular element in the list or not&lt;/td&gt;
    &lt;td&gt;a.index(25)&lt;br&gt;a.index(0)&lt;br&gt;&lt;/td&gt;
    &lt;td&gt;0&lt;br&gt;&lt;br&gt;ValueError: 0 is not in list&lt;br&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;in operator&lt;/td&gt;
    &lt;td&gt;Finds whether a particular element is in the list or not, returns boolean&lt;/td&gt;
    &lt;td&gt;25 in a&lt;/td&gt;
    &lt;td&gt;True&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;not in operator&lt;/td&gt;
    &lt;td&gt;Checks if element is not available in list, returns boolean&lt;/td&gt;
    &lt;td&gt;25 not in a&lt;/td&gt;
    &lt;td&gt;False&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;count()&lt;/td&gt;
    &lt;td&gt;Counts the number of occurence of an element in the list&lt;/td&gt;
    &lt;td&gt;a.count(25)&lt;/td&gt;
    &lt;td&gt;1&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;remove()&lt;/td&gt;
    &lt;td&gt;Removes an element from the list&lt;/td&gt;
    &lt;td&gt;a.remove(25)&lt;/td&gt;
    &lt;td&gt; [30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;pop()&lt;/td&gt;
    &lt;td&gt;Delete and return item at index 0&lt;/td&gt;
    &lt;td&gt;a.pop(0)&lt;/td&gt;
    &lt;td&gt;25 , a will be [30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;del&lt;/td&gt;
    &lt;td&gt;Deletes item at a particular index from the list&lt;/td&gt;
    &lt;td&gt;del a[0]&lt;/td&gt;
    &lt;td&gt;[30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;

==Printing the List==
=== Print whole list ===
A list can be printed simply or using a ''for / while'' loop 

 print(List_2)     # To print the entire list
This code will print      
 ['Kala','Mala']     

===Print element at a particular index===
&lt;pre&gt;
Using index position
    List_2[0]     # prints 'Kala' ,i.e,the value at index position 0.
    List_2[1]     # prints 'Mala'.
&lt;/pre&gt;
=== Without using index position ===
&lt;pre&gt;
for item in List_2:   # here item is a variable used to access elements in list.
       print(item)
   This code snippet prints 
    Kala
    Mala
&lt;/pre&gt;
[[#TOP]]

==Search for a particular element in list==
Elements in a list can be searched by one of the two ways:
=== using index() function===
&lt;pre&gt;
ages1 = [11,23,12,23,45]

#if element is available in the list, index() returns the index value on which, the element is present.
print(ages1.index(45))#Output: 4

#if element is not available in the list, index() returns ''ValueError''
print(ages1.index(0))#Output: ValueError:
&lt;/pre&gt;

In programming, if such error occurs, program gets terminated. It can be solved using exception handling.
e.g.
&lt;pre&gt;
ages1 = [11,23,12,23,45]

try:
    print(ages1.index(0))
except ValueError:
    print(&quot;Exception has occured&quot;)    
    print(&quot;Element is not found in the list&quot;)

&lt;/pre&gt;
&lt;pre&gt;
'''Output: 
Exception has occured
Element is not found in the list
'''&lt;/pre&gt;
[[#TOP]]

=== using 'in' operator===
''in'' operator is used to check whether a particular element is available in the list or not.e.g.

&lt;pre&gt;
ages1 = [11,23,12,23,45]
no=11

if no in ages1:
    print(&quot;no is there in the list&quot;)
else:    
    print(&quot;no is NOT there in the list&quot;)
&lt;/pre&gt;
&lt;pre&gt;
#Output: no is there in the list
&lt;/pre&gt;

'''Number is not there in the list'''
&lt;pre&gt;
ages1 = [11,23,12,23,45]
no=15

if no in ages1:
    print(&quot;no is there in the list&quot;)
else:    
    print(&quot;no is NOT there in the list&quot;)
&lt;/pre&gt;
&lt;pre&gt;
Output: no is NOT there in the list
&lt;/pre&gt;
[[#TOP]]

==Updating the List==
The lists can be updated using ''append'' or ''insert'' function.  Append adds the element to the end of the list and Insert adds the element in the specified position.
   List_2.append(&quot;Sheela&quot;)    # add the element 'Sheela' to the end of the list.
   print (List_2) will output 
   ['Kala', 'Mala', 'Sheela']
   
   List_2.insert(1,&quot;Bala&quot;)    # add the element &quot;Bala&quot; in the list at the index 1.
   print (List_2) will output 
   ['Kala', 'Bala','Mala', 'Sheela']

=== Extend the list by adding elements of other list at end using extend()===
&lt;pre&gt;
ages = [11,23,12,23,45]
ages.extend([57,58])
print(ages)
&lt;/pre&gt;

&lt;pre&gt;
#Output: [11, 23, 12, 23, 45, 57, 58]
&lt;/pre&gt;

==== Difference between ''append and extend'' ====
Difference between append and extend can be easily understood, by the following example.

&lt;pre&gt;
appendlist = [11,23,12,23,45]
appendlist.append([57,58])

extendlist= [11,23,12,23,45]
extendlist.extend([57,58])
&lt;/pre&gt;

&lt;pre&gt;
'''Output:
[11, 23, 12, 23, 45, [57, 58]]
[11, 23, 12, 23, 45, 57, 58]'''
&lt;/pre&gt;
[[#TOP]]

==Basic Operations on List==
===Frequency of Occurrence===
list.count(object) will return the number of times the object occur in the list.
  '''Example'''
    ages = [11,23,12,23,45,43,22,24,23]
    ages.count(23) will return
    3
    ages.count(100) will return
    0

===Length of the List===
len(list) will return the length of the list ie. the number of objects in the list.
  '''Example'''
    ages = [11,23,12,23,45,43,22,24,23]
    len(ages) will output
    9
To print the objects in the list either use ''for item in list'' or ''for index in range(len(list))''
    for item in ages:       
        print (item)  
        (OR)
    for index in range(len(ages)) :
        print (ages[index])
===Sort the List===
list.sort() will sort the list in ascending order
  '''Example'''
    ages = [11,23,12,23,45,43,22,24,23]
    ages.sort() 
    print (ages) 
    [11, 12, 22, 23, 23, 23, 24, 43, 45]

[[#TOP]]

===Sort the List using sorted() function===
sorted(list1) will sort the list and return a new list, it doesn't modify the original list
&lt;br&gt;'''Example: Sort in ascending order'''
&lt;pre&gt;
ages = [11,23,12,23,45,43,22,24,23]
newList=sorted(ages)
print(newList)

#Output: [11, 12, 22, 23, 23, 23, 24, 43, 45]
&lt;/pre&gt;

&lt;br&gt;'''Example: Sort in descending order'''
&lt;pre&gt;
ages = [11,23,12,23,45,43,22,24,23]
newList=sorted(ages,reverse=True)
print(newList)

#Output: [45, 43, 24, 23, 23, 23, 22, 12, 11]
&lt;/pre&gt;

===Reverse the List===
list.reverse() will reverse the original list
  '''Example'''
    ages = [11, 12, 22, 23, 23, 23, 24, 43, 45]
    ages.reverse()
    print (ages)
    [45, 43, 24, 23, 23, 23, 22, 12, 11]

Both sort() and reverse() list operation will work on numeric and alphanumeric data list.

A special use of the reverse() function is to descend a list that is sorted in ascending order.

  '''Example'''
&lt;pre&gt;
ages = [11, 12, 22, 23, 23, 23, 24, 43, 45]
ages.sort()
print(ages)
ages.reverse()
print(ages)
&lt;/pre&gt;

===Slicing===
Used to retrieve an object or objects in a range as a list  
  '''Example'''
Use ''list[index]'' to retrieve the object at the given index
         In [1]: student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
         In [2]: student[3]     #Object at index 3.  Remember index starts at 0
         Out[2]: 'Geetha'      


Use ''list[start_index : end_index + 1]'' to retrieve objects from the start_index to end_index 
         In [3]: student[2:4]     # Objects from index 2 to 3 as List. Note the [ and ]
         Out[3]: ['Vijay', 'Geetha']   


Use ''list[:]'' to retrieve objects from the starting of the list to the end of the list. 
The default start value will be the starting index of the list (i.e. 0) and the default end value
will be the length of the list 
         In [4]: student[:]        # prints the entire list
         Out[4]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma', 'Janani']


         In [5]: student[:5]       # prints the objects from the start of the list upto object at index 4
         Out[5]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran']


         In [6]: student[2:]       # prints the objects from index 2 upto the end of the list
         Out[6]: ['Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma', 'Janani']


Negative index too is available in Python. It starts from last element of the list. i.e.

         In [7]:student[-1]        #prints last index of list
         Out[7]: 'Janani'


         In [8]:student[-1:-8]     #prints empty list
         Out[8]: []


         In [9]:student[-8:-1]     #prints -8th index to -1st index elements
         Out[9]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma']

[[#TOP]]
===Removing Item from list ===
----

Is used to remove a specific item from the list.

'''Example:'''
 
Use list.remove(entry/value)  Or   del list[index]    Or list.pop(index)
         student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
         student.remove(&quot;Arun&quot;)   #This will delete item &quot;Arun&quot;
         Or    
         del student[0]           # This will delete item at index 0
         Or
         student.pop(0)         # This will delete and return item at index 0


         print(student)    
         Output: [&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]

[[#TOP]]
===Delete list ===
----
Used to delete complete list

'''Example'''

Use del &lt;list name&gt;
         student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
         del student

===Concatenation of two lists===
----
''+'' is the concatenation operator which is used concatenate two lists. 
&lt;pre&gt;
ages1 = [11,23,12,23,45]
ages2 = [25, 24, 43, 47]
age=ages1+ages2
print(age)
#Output: [11, 23, 12, 23, 45, 25, 24, 43, 47]
&lt;/pre&gt;

===Repeatation of a list ===
----
''*'' is the operator to repeat a particular list.
&lt;pre&gt;
ages1 = [11,23,12,23,45]
age=ages1*5 #ages1 list is repeated 5 times and stroed in ''age'' list
print(age)

#Output: [11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45]
&lt;/pre&gt;
====Conditional Statements====
&lt;pre&gt;Conditionals are used to check the condition and change the flow of the program 
accordingly. They are realized in programming languages through if statement. The 
syntax is as follows :
         if condition : 
            statement
    '''Note:''' Do not forget indentation (inserting space/tab) in the line after the
 if condition.
    
    In case you want to execute a set of statements when a condition is true and another

set of statement when the condition is false.
         if condition : 
            statement 1
         else :
            statement 2
    
    Multiple if-else statements can be written as follows:
         if condition_1 : 
            statement 1
         elif condition_2 : # 'elif' is short for 'else if'
            statement 2
         elif condition_3 :
            statement 3
        .
        .
         else :
            final statement
&lt;/pre&gt;
[[#TOP]]

=Loops and Conditionals : Fizzbuzz=
====Loops====

    Loops are used to execute a set of repetitive statements. They are realized
 through 'while' and 'for' loops in programming languages. The syntax of 'for' loop is 
as follows :
        for LOOPVARIABLE in SEQUENCE: 
            STATEMENTS
    '''e.g.''' to print all the data from a list we can write:
        for item in list_name
            print(item)
    OR
        for index in range(len(list_name))
            print(list_name[index])
    
    The syntax for while loop is as follows :
    
        while BOOLEANEXPRESSION: 
            STATEMENTS
            INCREMENT/DECREMENT
    
    '''e.g.''' if we want to print all numbers from 1 to 10
        i=1
        while i&lt;=10 :
            print(i,&quot; &quot;)
            i=i+1
    
    'while' loop has indefinite iteration (run-time unknown). So, there must be loop
 break statement in it.
 Whereas 'for' loop is definite in nature (i.e. known or predictable span).&lt;br&gt;

&lt;b&gt;NOTE: Python doesn't have anything like do-while loop.&lt;/b&gt;

==Implementation==
Here, we try to demonstrate the concept of loops and conditionals through a game called Fizzbuzz. The rules are as follows :&lt;br/&gt;
[[File:fizzBuzz.gif]]

• if input number is a multiple of ’3’ print ”Fizz”
&lt;br/&gt;
• if input number is a multiple of ’5’ print ”Buzz”
&lt;br/&gt;
• if input number is a multiple of both '3' and ’5’ print ”FizzBuzz”
&lt;br/&gt;
The pseudo code is as follows :
&lt;pre&gt;
   If input no % 3 == 0 and  input no % 5 == 0 : 
       print ”Fizzbuzz”
   else if input no % 3 == 0 : 
       print ”Fizz”
   else if input no % 5 == 0 : 
       print ”Buzz”
   else :
       print the input no
&lt;/pre&gt;
The order of statements execution matters to get the desired output. The highest priority condition should be first followed by other. In fizzbuzz programming, first checking should be done for both divisibility of 3 and 5. If condition not satisfied only then it should check individually for 3 or 5. So carefully choosing the order is crucial for better programming.
Note: There is some effect of present condition statements chosen on next conditions statements. That is why in first attempt fizzbuzz programming got struck.

Example: 
&lt;pre&gt;
#Code to achieve the above requirement in python3.
i = int(input(&quot;Enter the number&quot;)) 
if i%3 == 0 and i%5 == 0: print(i,&quot;FizzBuzz&quot;)  
elif i%5 == 0: print(i,&quot;Buzz&quot;)
elif i%3 == 0: print(i,&quot;Fizz&quot;)
else: print(i)
&lt;/pre&gt;
Lets put the same into a loop for a range given by the user.
&lt;pre&gt;
def fizzbuzzgame(start,stop):
    for i in range(start,stop+1):
        if i%3 == 0 and i%5 == 0:
            print(i,&quot;FizzBuzz&quot;)
        elif i%5 == 0:
            print(i,&quot;Buzz&quot;)
        elif i%3 == 0:
            print(i,&quot;Fizz&quot;)
        else: print(i)

fizzbuzzgame(50,100)
&lt;/pre&gt;


=== Fizz Buzz game in Interactive mode with Score ===
'''By Ms. Ami Tusharkant Choksi'''
&lt;pre&gt;
def fizzbuzzgame(i):
        if i%3 == 0 and i%5 == 0:
            print(i,&quot;FizzBuzz&quot;)
            return(&quot;fzbz&quot;)
        elif i%5 == 0:
            print(i,&quot;Buzz&quot;)
            return(&quot;bz&quot;)
        elif i%3 == 0:
            print(i,&quot;Fizz&quot;)
            return(&quot;fz&quot;)
        else:
            print(i)
            return(&quot;no&quot;)

ch = 'y'
fizzbuzz=0
fizz=0
buzz=0
nothing=0
print(&quot;&quot;&quot;
 _____  ____  _____  _____  ____   __ __  _____  _____       ____   ____  ___ ___    ___ 
|     ||    ||     ||     ||    \ |  |  ||     ||     |     /    | /    ||   |   |  /  _]
|   __| |  | |__/  ||__/  ||  o  )|  |  ||__/  ||__/  |    |   __||  o  || _   _ | /  [_ 
|  |_   |  | |   __||   __||     ||  |  ||   __||   __|    |  |  ||     ||  \_/  ||    _]
|   _]  |  | |  /  ||  /  ||  O  ||  :  ||  /  ||  /  |    |  |_ ||  _  ||   |   ||   [_ 
|  |    |  | |     ||     ||     ||     ||     ||     |    |     ||  |  ||   |   ||     |
|__|   |____||_____||_____||_____| \__,_||_____||_____|    |___,_||__|__||___|___||_____|
                                                                                         
&quot;&quot;&quot;)   

while(ch == 'y'):
    n=int(input(&quot;Enter a Number : &quot;))
    winLoose=fizzbuzzgame(n)
    if(winLoose == &quot;fz&quot;):
        fizz+=1
    elif(winLoose == &quot;bz&quot;):
        buzz+=1
    elif(winLoose == &quot;fzbz&quot;):
        fizzbuzz+=1
    ch=input(&quot;Do you want to continue playing the game : (y/n)&quot;)
    if(ch=='n'):
        print('Congratulations, your score is\n FizzBuzz:%d\nFizz:%d\nBuzz:%d' %
(fizzbuzz,fizz,buzz))
    
'''Sample Output:

 _____  ____  _____  _____  ____   __ __  _____  _____       ____   ____  ___ ___    ___ 
|     ||    ||     ||     ||    \ |  |  ||     ||     |     /    | /    ||   |   |  /  _]
|   __| |  | |__/  ||__/  ||  o  )|  |  ||__/  ||__/  |    |   __||  o  || _   _ | /  [_ 
|  |_   |  | |   __||   __||     ||  |  ||   __||   __|    |  |  ||     ||  \_/  ||    _]
|   _]  |  | |  /  ||  /  ||  O  ||  :  ||  /  ||  /  |    |  |_ ||  _  ||   |   ||   [_ 
|  |    |  | |     ||     ||     ||     ||     ||     |    |     ||  |  ||   |   ||     |
|__|   |____||_____||_____||_____| \__,_||_____||_____|    |___,_||__|__||___|___||_____|
                                                                                         

Enter a Number : 666
666 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 777
777 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 555
555 FizzBuzz
Do you want to continue playing the game : (y/n)y
Enter a Number : 1
1
Do you want to continue playing the game : (y/n)y
Enter a Number : 789
789 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 25
25 Buzz
Do you want to continue playing the game : (y/n)n
Congratulations, your score is

FizzBuzz:1
Fizz:3
Buzz:1

&lt;/pre&gt;

=Crowd Computing: Just Estimate=
==Wisdom of Crowds==
The concept of ’Wisdom of Crowds’ was proposed by Francis Galton. A weight-judging competition was carried on at the annual show of the West of England Fat Stock and Poultry Exhibition recently held at Plymouth, A fat ox having been selected, competitors bought stamped and numbered cards, each, on which to inscribe their respective names, addresses, and estimates of what the ox would weigh after it had been slaughtered. Those who guessed most successfully received prizes. About 8oo tickets were issued to the par- ticipants. The middlemost estimate of all the estimates recorded was 1207 lbs and the actual weight of the ox was 1198 lbs.

==Our Experiment==
The crowd had to guess the number of candies/gems in a jar. Around 75 people participated in the experiment. The actual number of gems in the jar were 375. The median of all estimates came out to be 300 and the mean of all the estimates came out to be around 396. Median underestimated and mean overestimated the actual value. So according to recent studies, Trimmed mean must be used as an aggregate measure to estimate where Wisdom of Crowds is involved.
[[File:Gemsjar.jpg|center|200px|caption]]

===Trimmed Mean===
In these kinds of experiments, 10% trimmed mean is usually followed. For calculating 10% trimmed mean, remove 10% smallest and 10% largest values from the sample. Calculate the mean of the sample obtained. In the above experiment, the trimmed mean came out to be around 351 which is very close to the actual value.

==Implementation==
Here, we try to demonstrate the concept of trimmed mean through crowd computing.
 Input a list of estimates done by the crowd .
 Sort the list.
 Remove the 10% smallest values.
 Remove the 10% largest values.
 Calculate the mean of the new list obtained .&lt;hr&gt;

==Data of Experiment==       
    Estimates =[1000,1010,1786,2000,1500,1500,100,120,150,150,150,170,175,180,197,200,200,200,200,200,200,220,220,220,220,234,250,250,250,250,250,250,250,250,250,263,270,275,275,286,300,
                300,300,300,300,300,300,300,320,350,350,350,400, 400,400,400,400,450,467,500,500,500,500,500,500,500,550,550,600,600,600,650,700,700,720]

    '''CODE:'''
&lt;pre&gt;
Estimates = [1000,1010,1786,2000,1500,1500,100,120,150,150,150,170,175,180,197,200,200,200,200,200,200,220,220,220,220,234,250,250,250,250,250,250,250,250,250,263,270,275,275,286,300,                300,300,300,300,300,300,300,320,350,350,350,400,400,400,400,400,450,467,500,500,500,500,500,500,500,550,550,600,600,600,650,700,700,720]
Estimates.sort()
offset = int(0.10*len(Estimates))
for i in range(offset):
       del Estimates[0]
       del Estimates[-1]
Sum = 0    
for i in range(len(Estimates)):
       Sum += Estimates[i]
Mean_Value = Sum/len(Estimates)
print(&quot;Mean : &quot;, int(Mean_Value))
#Output:
Mean :  351
&lt;/pre&gt;
&lt;hr&gt;
==Trimmed Mean for the above example== 
&lt;h3&gt;Using scipy library&lt;/h3&gt;
&lt;pre&gt;
#import scipy to use the method of trim_mean
from scipy import stats
trimMean = stats.trim_mean(Estimates, 0.1) # Trim 10% at both ends
print(&quot;Trimmed Mean : &quot;,trimMean)
#Output:
Trimmed Mean :  335.1020408163265
&lt;/pre&gt;

&lt;h3&gt;Without using scipy library&lt;/h3&gt;
&lt;pre&gt;
#Trimmed mean with 10%
p=10/100
#sorted data
data=[2, 4, 6, 7, 11, 21, 81, 90, 105, 121]
n = len(data)
#Remove elements from both end
rem=int(n*p)
newData = data[rem:-rem]
mean = 0
for i in newData:
    mean += i
mean = int(mean/len(newData))
print(&quot;Trimmed mean : &quot;,mean)
#Output: Trimmed mean :  40
&lt;/pre&gt;
[[#Top]]

=Jumbled_Words Permutations: Jumbled Words=
==What are Permutations ?==
A permutation also called ordering of selected number of elements from a list denoted by nPr here we are choosing all elements of a list and so n=r&lt;br&gt;
nPr=n!/(n-r)!&lt;br&gt; as n=r
nPn=n!&lt;br&gt; which gives all possible arrangement of elements present in a list.

 For example, permutations of list [1,2,3] are [1,2,3], [1,3,2], [2,1,3], [2,3,1], 
[3,1,2], and [3,2,1]. 
The number of permutations of a list of elements nPn is given by n!. For example, there are 2! = 2 x 1 = 2 permutations of [1,2], namely [1,2] and [2,1], and 3! = 3 x 2 x 1 = 6 permutations of [1,2,3], as mentioned above.&lt;br/&gt;
[[File:Permutations.jpg]]

==Implementation==
Here, we try to demonstrate the concept of permutations through jumbled words. It is a two player game in which one person presents the other person a different permutation of the word in his mind. The other person has to guess the right word. If he guesses, the he wins otherwise he loses.
 Input an list of words.
 Randomly pick a word from the list of words .
 Shuffle this word and present it to the other player.
 if word guesses by the player is same as the one picked from list of w
     player wins
 else
     player loses

ALTERNATE CODE TO GENERATE THIS GAME:
&lt;pre&gt;
import random
p1=input(&quot;enter player 1 name:&quot;)
p2=input(&quot;enter player 2 name:&quot;)
l=[&quot;rainbow&quot;,&quot;computer&quot;,&quot;robot&quot;,&quot;butter&quot;,&quot;vegetable&quot;,&quot;science&quot;,&quot;correct&quot;]
c1=c2=a1=a2=f1=f2=0
k=1
i=3
def play():
    n=random.choice(l)        ##n=chooses a word from list l
    l1=[]
    for j in n:
       l1.append(j)      ##creates a list for word in n
    for t in range(len(l1)):
       p=random.choice(l1)     ##this randomly displays letters in the list
       print(p)
       l1.remove(p)          ##to avoid the repetition of a letter
    s=input(&quot;enter the word:&quot;)
    if(s==n):
        print(&quot;correct&quot;)
        return 1
    else:
        print(&quot;not correct&quot;)
        print(&quot;answer is&quot;,n)
        return 0
def stat():
     print(&quot;player 1:&quot;)
     print(&quot;score:&quot;,c1)
     print(&quot;answered:&quot;,a1)
     print(&quot;failed:&quot;,f1)
     print(&quot;.............&quot;)
     print(&quot;player 2:&quot;)
     print(&quot;score:&quot;,c2)
     print(&quot;answered:&quot;,a2)
     print(&quot;failed&quot;,f2)
     if(c1&gt;c2):
         print(p1,&quot; won over &quot;,p2)
     elif(c1==c2):
         print(&quot;draw game&quot;)
     else:
         print(p2,&quot; won over &quot;,p1) 
while(i!=4):
      if(i==3):
         if(k==1):
             print(&quot;player 1 turn&quot;)
             print(&quot;your jumbled word is:&quot;)
             k=k+1
             m=play()
             if(m==1):      ##if guessed answer is correct,then score and no.of answered count will be increased
                c1+=1
                a1+=1
             else:
                f1+=1       ##else count of no.of failed to answered will be incremented
         else:
             print(&quot;player 2 turn&quot;)
             print(&quot;your jumbled word is:&quot;)
             k=k-1
             m=play()
             if(m==1):
                c2=c2+1
                a2=a2+1
             else:
                f2=f2+1
       if(i==2):
             print(&quot;present status&quot;)
             stat()
       i=int(input(&quot;enter your choice  1.stop 2.status 3.continue&quot;))
       if(i==1):
             stat()
             i=i+3
&lt;/pre&gt;
&lt;hr&gt;
=== JumbledWord Simple Logic, In Short ===
[[File:jumbledWord.gif]]
&lt;hr&gt;
'''Logic to create a Jumbled Word'''
&lt;hr&gt;
&lt;pre&gt;
#Get Jumbled Word and print it Horizontally
import random

def getJumbledWord(b):
    jumble=''
    l1 = [ b[i] for i in range(0, len(b)) ]
    for t in range(len(l1)):
       p=random.choice(l1)     ##this randomly gets letters from the list      
       jumble=jumble+p       
       l1.remove(p)
    return jumble

b=input(&quot;Enter a word to make it jumbled : &quot;)
print(&quot;Jumbled Word : &quot;, getJumbledWord(b))
&lt;/pre&gt;
&lt;hr&gt;
'''Another Logic to create a Jumbled Word'''
&lt;hr&gt;
&lt;pre&gt;
b=input(&quot;Enter a word to make it jumbled : &quot;)

def getJumbledWord1(b):
    l1 = [ b[i] for i in range(0, len(b)) ]
    random.shuffle(l1)
    str1 = ''.join(l1)
    return str1

print(&quot;Jumbled Word : &quot;, getJumbledWord1(b))
&lt;/pre&gt;

====Sample Output:====
&lt;pre&gt;
---- Output1 
Enter a word to make it jumbled : butter
Jumbled Word :  tbture

---- Output2 
Enter a word to make it jumbled : petriotism
Jumbled Word :  pittrosime
&lt;/pre&gt;

=Theory of Evolution=

== What is Evolution ? ==
Evolution is the change in heritable characteristics over successive generations. The theory of evolution explains that DNA, which acts as a carrier of genetic information from one generation to other, tends to change or mutate occasionally. These changes are reflected in next generations to come. This is how life has evolved on earth from bacteria to human beings.&lt;br&gt;
[[File:Evolution.png|500px]]

== Implementation ==
An array representing DNA is stored in a file. As genes are forms of DNA, they contain information to be transferred to forthcoming generations. Assume that information is in the form of bits (in the form of 0s and 1s). A number is picked randomly from 1 to the size of the array. A new parameter has been introduced which decides whether mutation would occur or not. If the value of this new parameter is 1 (It is picked randomly from 1 to 100), then only change is reflected down the generations, otherwise it is not. The pseudo code is as follows :
Input an array containing genetic information .
Randomly generate a number (say m) from 1 to length of the array. Randomly generate other number (say p) from 1 to 100.
 
    if p is equal to 1 then 
        if m is 1 then
          set it to 0
        else
          set it to 1</text>
      <sha1>meodcq8h5uledae4wdlwtq4jcsr0kuc</sha1>
    </revision>
    <revision>
      <id>3490</id>
      <parentid>3489</parentid>
      <timestamp>2018-09-27T13:16:21Z</timestamp>
      <contributor>
        <username>Sachinkr</username>
        <id>1743</id>
      </contributor>
      <comment>/* Loops */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="28212">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_3 Contributors of this page]
*Week 3 Playlist: https://www.youtube.com/playlist?list=PLc_j0TNIaWxOVx_z9jAM2UB3RqYNXaoEo
=List=
List is a flexible data structure used for storing a group of data separated by comma. The elements in a list need not be of the same data type.

'''Example:'''
       List_1 = [ 1, 2,3] or 
       List_1 = [&quot;coffee&quot;, &quot;Tea&quot;, &quot;Milk&quot;] or
       List_1 = [1,&quot;coffee&quot;, &quot;Tea&quot;, 3, &quot;5&quot;]

==List Creation==
&lt;pre&gt;a) A list can be created by simply putting values (separated by comma) between square brackets as given below,
       List_1 = [1,&quot;coffee&quot;, &quot;Tea&quot;, 3, &quot;5&quot;] #this creates a list by name List_1 containing following items


Or,
(b)A List can be created from scratch and elements can be added 
        List_2 = [ ]
        List_2.append(&quot;Kala&quot;)
        List_2.append(&quot;Mala&quot;)
Here we use &quot;append&quot; ,which is a function in python that enable us to append or attach an element to a list .
Thus List_2 will now hold [&quot;Kala&quot;,&quot;Mala&quot;]
&lt;/pre&gt;
[[#TOP]]

==Operations and Methods to work with List==
&lt;pre&gt;
a = [25,30,50,90,12,13]
b = [100,300,500,200,250]
&lt;/pre&gt;
&lt;hr&gt;
&lt;table border=2&gt;
  &lt;tr&gt;
    &lt;th&gt;&lt;b&gt;Method/&lt;br&gt;Operator&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Function&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Syntax&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Output&lt;/b&gt;&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;len()&lt;/td&gt;
    &lt;td&gt;Find length of a list&lt;/td&gt;
    &lt;td&gt;len(a)&lt;/td&gt;
    &lt;td&gt;6&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;max()&lt;/td&gt;
    &lt;td&gt;Find maximum element from the list&lt;/td&gt;
    &lt;td&gt;max(a)&lt;/td&gt;
    &lt;td&gt;90&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;min()&lt;/td&gt;
    &lt;td&gt;Find minimum element from the list&lt;/td&gt;
    &lt;td&gt;min(a)&lt;/td&gt;
    &lt;td&gt;12&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sum()&lt;/td&gt;
    &lt;td&gt;Returns sum of all elements of the list&lt;/td&gt;
    &lt;td&gt;sum(a)&lt;/td&gt;
    &lt;td&gt;220&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;reverse()&lt;/td&gt;
    &lt;td&gt;Reverses the original list&lt;/td&gt;
    &lt;td&gt;a.reverse()&lt;/td&gt;
    &lt;td&gt;[13, 12, 90, 50, 30, 25]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sort()&lt;/td&gt;
    &lt;td&gt;Sorts the original list in ascending order&lt;/td&gt;
    &lt;td&gt;a.sort()&lt;/td&gt;
    &lt;td&gt;[12, 13, 25, 30, 50, 90]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sorted()&lt;/td&gt;
    &lt;td&gt;Returns the new sorted list &lt;/td&gt;
    &lt;td&gt;sorted(a)&lt;/td&gt;
    &lt;td&gt;[12, 13, 25, 30, 50, 90]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;insert()&lt;/td&gt;
    &lt;td&gt;Insert at a particular index in the list, and shifts remaining elements&lt;/td&gt;
    &lt;td&gt;a.insert(3,3)&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 3, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;append()&lt;/td&gt;
    &lt;td&gt;Adds elements/object to the end of the list&lt;/td&gt;
    &lt;td&gt;a.append(5)&lt;br&gt;a.append([10,20])&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 5]&lt;br&gt;[25, 30, 50, 90, 12, 13, [10, 20]]&lt;br&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;extend()&lt;/td&gt;
    &lt;td&gt;Adds object to the end of the list as elements not as object&lt;/td&gt;
    &lt;td&gt;a.extend([10,20])&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 10, 20]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;*&amp;nbsp;&amp;nbsp;Repeatation&lt;br&gt;operator&lt;/td&gt;
    &lt;td&gt;Repeat the list for n times and returns a new list&lt;/td&gt;
    &lt;td&gt;a*2&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 25, 30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;+ Concatenation&lt;br&gt;operator&lt;/td&gt;
    &lt;td&gt;Concatenates two lists, and returns a new list&lt;/td&gt;
    &lt;td&gt;a+b&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 100, 300, 500, 200, 250]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;index()&lt;/td&gt;
    &lt;td&gt;Finds index of a particular element in the list or not&lt;/td&gt;
    &lt;td&gt;a.index(25)&lt;br&gt;a.index(0)&lt;br&gt;&lt;/td&gt;
    &lt;td&gt;0&lt;br&gt;&lt;br&gt;ValueError: 0 is not in list&lt;br&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;in operator&lt;/td&gt;
    &lt;td&gt;Finds whether a particular element is in the list or not, returns boolean&lt;/td&gt;
    &lt;td&gt;25 in a&lt;/td&gt;
    &lt;td&gt;True&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;not in operator&lt;/td&gt;
    &lt;td&gt;Checks if element is not available in list, returns boolean&lt;/td&gt;
    &lt;td&gt;25 not in a&lt;/td&gt;
    &lt;td&gt;False&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;count()&lt;/td&gt;
    &lt;td&gt;Counts the number of occurence of an element in the list&lt;/td&gt;
    &lt;td&gt;a.count(25)&lt;/td&gt;
    &lt;td&gt;1&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;remove()&lt;/td&gt;
    &lt;td&gt;Removes an element from the list&lt;/td&gt;
    &lt;td&gt;a.remove(25)&lt;/td&gt;
    &lt;td&gt; [30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;pop()&lt;/td&gt;
    &lt;td&gt;Delete and return item at index 0&lt;/td&gt;
    &lt;td&gt;a.pop(0)&lt;/td&gt;
    &lt;td&gt;25 , a will be [30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;del&lt;/td&gt;
    &lt;td&gt;Deletes item at a particular index from the list&lt;/td&gt;
    &lt;td&gt;del a[0]&lt;/td&gt;
    &lt;td&gt;[30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;

==Printing the List==
=== Print whole list ===
A list can be printed simply or using a ''for / while'' loop 

 print(List_2)     # To print the entire list
This code will print      
 ['Kala','Mala']     

===Print element at a particular index===
&lt;pre&gt;
Using index position
    List_2[0]     # prints 'Kala' ,i.e,the value at index position 0.
    List_2[1]     # prints 'Mala'.
&lt;/pre&gt;
=== Without using index position ===
&lt;pre&gt;
for item in List_2:   # here item is a variable used to access elements in list.
       print(item)
   This code snippet prints 
    Kala
    Mala
&lt;/pre&gt;
[[#TOP]]

==Search for a particular element in list==
Elements in a list can be searched by one of the two ways:
=== using index() function===
&lt;pre&gt;
ages1 = [11,23,12,23,45]

#if element is available in the list, index() returns the index value on which, the element is present.
print(ages1.index(45))#Output: 4

#if element is not available in the list, index() returns ''ValueError''
print(ages1.index(0))#Output: ValueError:
&lt;/pre&gt;

In programming, if such error occurs, program gets terminated. It can be solved using exception handling.
e.g.
&lt;pre&gt;
ages1 = [11,23,12,23,45]

try:
    print(ages1.index(0))
except ValueError:
    print(&quot;Exception has occured&quot;)    
    print(&quot;Element is not found in the list&quot;)

&lt;/pre&gt;
&lt;pre&gt;
'''Output: 
Exception has occured
Element is not found in the list
'''&lt;/pre&gt;
[[#TOP]]

=== using 'in' operator===
''in'' operator is used to check whether a particular element is available in the list or not.e.g.

&lt;pre&gt;
ages1 = [11,23,12,23,45]
no=11

if no in ages1:
    print(&quot;no is there in the list&quot;)
else:    
    print(&quot;no is NOT there in the list&quot;)
&lt;/pre&gt;
&lt;pre&gt;
#Output: no is there in the list
&lt;/pre&gt;

'''Number is not there in the list'''
&lt;pre&gt;
ages1 = [11,23,12,23,45]
no=15

if no in ages1:
    print(&quot;no is there in the list&quot;)
else:    
    print(&quot;no is NOT there in the list&quot;)
&lt;/pre&gt;
&lt;pre&gt;
Output: no is NOT there in the list
&lt;/pre&gt;
[[#TOP]]

==Updating the List==
The lists can be updated using ''append'' or ''insert'' function.  Append adds the element to the end of the list and Insert adds the element in the specified position.
   List_2.append(&quot;Sheela&quot;)    # add the element 'Sheela' to the end of the list.
   print (List_2) will output 
   ['Kala', 'Mala', 'Sheela']
   
   List_2.insert(1,&quot;Bala&quot;)    # add the element &quot;Bala&quot; in the list at the index 1.
   print (List_2) will output 
   ['Kala', 'Bala','Mala', 'Sheela']

=== Extend the list by adding elements of other list at end using extend()===
&lt;pre&gt;
ages = [11,23,12,23,45]
ages.extend([57,58])
print(ages)
&lt;/pre&gt;

&lt;pre&gt;
#Output: [11, 23, 12, 23, 45, 57, 58]
&lt;/pre&gt;

==== Difference between ''append and extend'' ====
Difference between append and extend can be easily understood, by the following example.

&lt;pre&gt;
appendlist = [11,23,12,23,45]
appendlist.append([57,58])

extendlist= [11,23,12,23,45]
extendlist.extend([57,58])
&lt;/pre&gt;

&lt;pre&gt;
'''Output:
[11, 23, 12, 23, 45, [57, 58]]
[11, 23, 12, 23, 45, 57, 58]'''
&lt;/pre&gt;
[[#TOP]]

==Basic Operations on List==
===Frequency of Occurrence===
list.count(object) will return the number of times the object occur in the list.
  '''Example'''
    ages = [11,23,12,23,45,43,22,24,23]
    ages.count(23) will return
    3
    ages.count(100) will return
    0

===Length of the List===
len(list) will return the length of the list ie. the number of objects in the list.
  '''Example'''
    ages = [11,23,12,23,45,43,22,24,23]
    len(ages) will output
    9
To print the objects in the list either use ''for item in list'' or ''for index in range(len(list))''
    for item in ages:       
        print (item)  
        (OR)
    for index in range(len(ages)) :
        print (ages[index])
===Sort the List===
list.sort() will sort the list in ascending order
  '''Example'''
    ages = [11,23,12,23,45,43,22,24,23]
    ages.sort() 
    print (ages) 
    [11, 12, 22, 23, 23, 23, 24, 43, 45]

[[#TOP]]

===Sort the List using sorted() function===
sorted(list1) will sort the list and return a new list, it doesn't modify the original list
&lt;br&gt;'''Example: Sort in ascending order'''
&lt;pre&gt;
ages = [11,23,12,23,45,43,22,24,23]
newList=sorted(ages)
print(newList)

#Output: [11, 12, 22, 23, 23, 23, 24, 43, 45]
&lt;/pre&gt;

&lt;br&gt;'''Example: Sort in descending order'''
&lt;pre&gt;
ages = [11,23,12,23,45,43,22,24,23]
newList=sorted(ages,reverse=True)
print(newList)

#Output: [45, 43, 24, 23, 23, 23, 22, 12, 11]
&lt;/pre&gt;

===Reverse the List===
list.reverse() will reverse the original list
  '''Example'''
    ages = [11, 12, 22, 23, 23, 23, 24, 43, 45]
    ages.reverse()
    print (ages)
    [45, 43, 24, 23, 23, 23, 22, 12, 11]

Both sort() and reverse() list operation will work on numeric and alphanumeric data list.

A special use of the reverse() function is to descend a list that is sorted in ascending order.

  '''Example'''
&lt;pre&gt;
ages = [11, 12, 22, 23, 23, 23, 24, 43, 45]
ages.sort()
print(ages)
ages.reverse()
print(ages)
&lt;/pre&gt;

===Slicing===
Used to retrieve an object or objects in a range as a list  
  '''Example'''
Use ''list[index]'' to retrieve the object at the given index
         In [1]: student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
         In [2]: student[3]     #Object at index 3.  Remember index starts at 0
         Out[2]: 'Geetha'      


Use ''list[start_index : end_index + 1]'' to retrieve objects from the start_index to end_index 
         In [3]: student[2:4]     # Objects from index 2 to 3 as List. Note the [ and ]
         Out[3]: ['Vijay', 'Geetha']   


Use ''list[:]'' to retrieve objects from the starting of the list to the end of the list. 
The default start value will be the starting index of the list (i.e. 0) and the default end value
will be the length of the list 
         In [4]: student[:]        # prints the entire list
         Out[4]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma', 'Janani']


         In [5]: student[:5]       # prints the objects from the start of the list upto object at index 4
         Out[5]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran']


         In [6]: student[2:]       # prints the objects from index 2 upto the end of the list
         Out[6]: ['Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma', 'Janani']


Negative index too is available in Python. It starts from last element of the list. i.e.

         In [7]:student[-1]        #prints last index of list
         Out[7]: 'Janani'


         In [8]:student[-1:-8]     #prints empty list
         Out[8]: []


         In [9]:student[-8:-1]     #prints -8th index to -1st index elements
         Out[9]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma']

[[#TOP]]
===Removing Item from list ===
----

Is used to remove a specific item from the list.

'''Example:'''
 
Use list.remove(entry/value)  Or   del list[index]    Or list.pop(index)
         student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
         student.remove(&quot;Arun&quot;)   #This will delete item &quot;Arun&quot;
         Or    
         del student[0]           # This will delete item at index 0
         Or
         student.pop(0)         # This will delete and return item at index 0


         print(student)    
         Output: [&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]

[[#TOP]]
===Delete list ===
----
Used to delete complete list

'''Example'''

Use del &lt;list name&gt;
         student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
         del student

===Concatenation of two lists===
----
''+'' is the concatenation operator which is used concatenate two lists. 
&lt;pre&gt;
ages1 = [11,23,12,23,45]
ages2 = [25, 24, 43, 47]
age=ages1+ages2
print(age)
#Output: [11, 23, 12, 23, 45, 25, 24, 43, 47]
&lt;/pre&gt;

===Repeatation of a list ===
----
''*'' is the operator to repeat a particular list.
&lt;pre&gt;
ages1 = [11,23,12,23,45]
age=ages1*5 #ages1 list is repeated 5 times and stroed in ''age'' list
print(age)

#Output: [11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45]
&lt;/pre&gt;
====Conditional Statements====
&lt;pre&gt;Conditionals are used to check the condition and change the flow of the program 
accordingly. They are realized in programming languages through if statement. The 
syntax is as follows :
         if condition : 
            statement
    '''Note:''' Do not forget indentation (inserting space/tab) in the line after the
 if condition.
    
    In case you want to execute a set of statements when a condition is true and another

set of statement when the condition is false.
         if condition : 
            statement 1
         else :
            statement 2
    
    Multiple if-else statements can be written as follows:
         if condition_1 : 
            statement 1
         elif condition_2 : # 'elif' is short for 'else if'
            statement 2
         elif condition_3 :
            statement 3
        .
        .
         else :
            final statement
&lt;/pre&gt;
[[#TOP]]

=Loops and Conditionals : Fizzbuzz=
====Loops====

    Loops are used to execute a set of repetitive statements. They are realized
 through 'while' and 'for' loops in programming languages. The syntax of 'for' loop is 
as follows :
        for LOOPVARIABLE in SEQUENCE: 
            STATEMENTS
    '''e.g.''' to print all the data from a list we can write:
        for item in list_name
            print(item)
    OR
        for index in range(len(list_name))
            print(list_name[index])
    
    The syntax for while loop is as follows :
    
        while BOOLEANEXPRESSION: 
            STATEMENTS
            INCREMENT/DECREMENT
    
    '''e.g.''' if we want to print all numbers from 1 to 10
        i=1
        while i&lt;=10 :
            print(i,&quot; &quot;)
            i=i+1
    
    'while' loop has indefinite iteration (run-time unknown). So, there must be loop
 break statement in it.
 Whereas 'for' loop is definite in nature (i.e. known or predictable span).&lt;br&gt;

&lt;b&gt;NOTE: Python doesn't have anything like do-while loop.&lt;/b&gt;
[[#TOP]]

==Implementation==
Here, we try to demonstrate the concept of loops and conditionals through a game called Fizzbuzz. The rules are as follows :&lt;br/&gt;
[[File:fizzBuzz.gif]]

• if input number is a multiple of ’3’ print ”Fizz”
&lt;br/&gt;
• if input number is a multiple of ’5’ print ”Buzz”
&lt;br/&gt;
• if input number is a multiple of both '3' and ’5’ print ”FizzBuzz”
&lt;br/&gt;
The pseudo code is as follows :
&lt;pre&gt;
   If input no % 3 == 0 and  input no % 5 == 0 : 
       print ”Fizzbuzz”
   else if input no % 3 == 0 : 
       print ”Fizz”
   else if input no % 5 == 0 : 
       print ”Buzz”
   else :
       print the input no
&lt;/pre&gt;
The order of statements execution matters to get the desired output. The highest priority condition should be first followed by other. In fizzbuzz programming, first checking should be done for both divisibility of 3 and 5. If condition not satisfied only then it should check individually for 3 or 5. So carefully choosing the order is crucial for better programming.
Note: There is some effect of present condition statements chosen on next conditions statements. That is why in first attempt fizzbuzz programming got struck.

Example: 
&lt;pre&gt;
#Code to achieve the above requirement in python3.
i = int(input(&quot;Enter the number&quot;)) 
if i%3 == 0 and i%5 == 0: print(i,&quot;FizzBuzz&quot;)  
elif i%5 == 0: print(i,&quot;Buzz&quot;)
elif i%3 == 0: print(i,&quot;Fizz&quot;)
else: print(i)
&lt;/pre&gt;
Lets put the same into a loop for a range given by the user.
&lt;pre&gt;
def fizzbuzzgame(start,stop):
    for i in range(start,stop+1):
        if i%3 == 0 and i%5 == 0:
            print(i,&quot;FizzBuzz&quot;)
        elif i%5 == 0:
            print(i,&quot;Buzz&quot;)
        elif i%3 == 0:
            print(i,&quot;Fizz&quot;)
        else: print(i)

fizzbuzzgame(50,100)
&lt;/pre&gt;


=== Fizz Buzz game in Interactive mode with Score ===
'''By Ms. Ami Tusharkant Choksi'''
&lt;pre&gt;
def fizzbuzzgame(i):
        if i%3 == 0 and i%5 == 0:
            print(i,&quot;FizzBuzz&quot;)
            return(&quot;fzbz&quot;)
        elif i%5 == 0:
            print(i,&quot;Buzz&quot;)
            return(&quot;bz&quot;)
        elif i%3 == 0:
            print(i,&quot;Fizz&quot;)
            return(&quot;fz&quot;)
        else:
            print(i)
            return(&quot;no&quot;)

ch = 'y'
fizzbuzz=0
fizz=0
buzz=0
nothing=0
print(&quot;&quot;&quot;
 _____  ____  _____  _____  ____   __ __  _____  _____       ____   ____  ___ ___    ___ 
|     ||    ||     ||     ||    \ |  |  ||     ||     |     /    | /    ||   |   |  /  _]
|   __| |  | |__/  ||__/  ||  o  )|  |  ||__/  ||__/  |    |   __||  o  || _   _ | /  [_ 
|  |_   |  | |   __||   __||     ||  |  ||   __||   __|    |  |  ||     ||  \_/  ||    _]
|   _]  |  | |  /  ||  /  ||  O  ||  :  ||  /  ||  /  |    |  |_ ||  _  ||   |   ||   [_ 
|  |    |  | |     ||     ||     ||     ||     ||     |    |     ||  |  ||   |   ||     |
|__|   |____||_____||_____||_____| \__,_||_____||_____|    |___,_||__|__||___|___||_____|
                                                                                         
&quot;&quot;&quot;)   

while(ch == 'y'):
    n=int(input(&quot;Enter a Number : &quot;))
    winLoose=fizzbuzzgame(n)
    if(winLoose == &quot;fz&quot;):
        fizz+=1
    elif(winLoose == &quot;bz&quot;):
        buzz+=1
    elif(winLoose == &quot;fzbz&quot;):
        fizzbuzz+=1
    ch=input(&quot;Do you want to continue playing the game : (y/n)&quot;)
    if(ch=='n'):
        print('Congratulations, your score is\n FizzBuzz:%d\nFizz:%d\nBuzz:%d' %
(fizzbuzz,fizz,buzz))
    
'''Sample Output:

 _____  ____  _____  _____  ____   __ __  _____  _____       ____   ____  ___ ___    ___ 
|     ||    ||     ||     ||    \ |  |  ||     ||     |     /    | /    ||   |   |  /  _]
|   __| |  | |__/  ||__/  ||  o  )|  |  ||__/  ||__/  |    |   __||  o  || _   _ | /  [_ 
|  |_   |  | |   __||   __||     ||  |  ||   __||   __|    |  |  ||     ||  \_/  ||    _]
|   _]  |  | |  /  ||  /  ||  O  ||  :  ||  /  ||  /  |    |  |_ ||  _  ||   |   ||   [_ 
|  |    |  | |     ||     ||     ||     ||     ||     |    |     ||  |  ||   |   ||     |
|__|   |____||_____||_____||_____| \__,_||_____||_____|    |___,_||__|__||___|___||_____|
                                                                                         

Enter a Number : 666
666 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 777
777 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 555
555 FizzBuzz
Do you want to continue playing the game : (y/n)y
Enter a Number : 1
1
Do you want to continue playing the game : (y/n)y
Enter a Number : 789
789 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 25
25 Buzz
Do you want to continue playing the game : (y/n)n
Congratulations, your score is

FizzBuzz:1
Fizz:3
Buzz:1

&lt;/pre&gt;

=Crowd Computing: Just Estimate=
==Wisdom of Crowds==
The concept of ’Wisdom of Crowds’ was proposed by Francis Galton. A weight-judging competition was carried on at the annual show of the West of England Fat Stock and Poultry Exhibition recently held at Plymouth, A fat ox having been selected, competitors bought stamped and numbered cards, each, on which to inscribe their respective names, addresses, and estimates of what the ox would weigh after it had been slaughtered. Those who guessed most successfully received prizes. About 8oo tickets were issued to the par- ticipants. The middlemost estimate of all the estimates recorded was 1207 lbs and the actual weight of the ox was 1198 lbs.

==Our Experiment==
The crowd had to guess the number of candies/gems in a jar. Around 75 people participated in the experiment. The actual number of gems in the jar were 375. The median of all estimates came out to be 300 and the mean of all the estimates came out to be around 396. Median underestimated and mean overestimated the actual value. So according to recent studies, Trimmed mean must be used as an aggregate measure to estimate where Wisdom of Crowds is involved.
[[File:Gemsjar.jpg|center|200px|caption]]

===Trimmed Mean===
In these kinds of experiments, 10% trimmed mean is usually followed. For calculating 10% trimmed mean, remove 10% smallest and 10% largest values from the sample. Calculate the mean of the sample obtained. In the above experiment, the trimmed mean came out to be around 351 which is very close to the actual value.

==Implementation==
Here, we try to demonstrate the concept of trimmed mean through crowd computing.
 Input a list of estimates done by the crowd .
 Sort the list.
 Remove the 10% smallest values.
 Remove the 10% largest values.
 Calculate the mean of the new list obtained .&lt;hr&gt;

==Data of Experiment==       
    Estimates =[1000,1010,1786,2000,1500,1500,100,120,150,150,150,170,175,180,197,200,200,200,200,200,200,220,220,220,220,234,250,250,250,250,250,250,250,250,250,263,270,275,275,286,300,
                300,300,300,300,300,300,300,320,350,350,350,400, 400,400,400,400,450,467,500,500,500,500,500,500,500,550,550,600,600,600,650,700,700,720]

    '''CODE:'''
&lt;pre&gt;
Estimates = [1000,1010,1786,2000,1500,1500,100,120,150,150,150,170,175,180,197,200,200,200,200,200,200,220,220,220,220,234,250,250,250,250,250,250,250,250,250,263,270,275,275,286,300,                300,300,300,300,300,300,300,320,350,350,350,400,400,400,400,400,450,467,500,500,500,500,500,500,500,550,550,600,600,600,650,700,700,720]
Estimates.sort()
offset = int(0.10*len(Estimates))
for i in range(offset):
       del Estimates[0]
       del Estimates[-1]
Sum = 0    
for i in range(len(Estimates)):
       Sum += Estimates[i]
Mean_Value = Sum/len(Estimates)
print(&quot;Mean : &quot;, int(Mean_Value))
#Output:
Mean :  351
&lt;/pre&gt;
&lt;hr&gt;
==Trimmed Mean for the above example== 
&lt;h3&gt;Using scipy library&lt;/h3&gt;
&lt;pre&gt;
#import scipy to use the method of trim_mean
from scipy import stats
trimMean = stats.trim_mean(Estimates, 0.1) # Trim 10% at both ends
print(&quot;Trimmed Mean : &quot;,trimMean)
#Output:
Trimmed Mean :  335.1020408163265
&lt;/pre&gt;

&lt;h3&gt;Without using scipy library&lt;/h3&gt;
&lt;pre&gt;
#Trimmed mean with 10%
p=10/100
#sorted data
data=[2, 4, 6, 7, 11, 21, 81, 90, 105, 121]
n = len(data)
#Remove elements from both end
rem=int(n*p)
newData = data[rem:-rem]
mean = 0
for i in newData:
    mean += i
mean = int(mean/len(newData))
print(&quot;Trimmed mean : &quot;,mean)
#Output: Trimmed mean :  40
&lt;/pre&gt;
[[#Top]]

=Jumbled_Words Permutations: Jumbled Words=
==What are Permutations ?==
A permutation also called ordering of selected number of elements from a list denoted by nPr here we are choosing all elements of a list and so n=r&lt;br&gt;
nPr=n!/(n-r)!&lt;br&gt; as n=r
nPn=n!&lt;br&gt; which gives all possible arrangement of elements present in a list.

 For example, permutations of list [1,2,3] are [1,2,3], [1,3,2], [2,1,3], [2,3,1], 
[3,1,2], and [3,2,1]. 
The number of permutations of a list of elements nPn is given by n!. For example, there are 2! = 2 x 1 = 2 permutations of [1,2], namely [1,2] and [2,1], and 3! = 3 x 2 x 1 = 6 permutations of [1,2,3], as mentioned above.&lt;br/&gt;
[[File:Permutations.jpg]]

==Implementation==
Here, we try to demonstrate the concept of permutations through jumbled words. It is a two player game in which one person presents the other person a different permutation of the word in his mind. The other person has to guess the right word. If he guesses, the he wins otherwise he loses.
 Input an list of words.
 Randomly pick a word from the list of words .
 Shuffle this word and present it to the other player.
 if word guesses by the player is same as the one picked from list of w
     player wins
 else
     player loses

ALTERNATE CODE TO GENERATE THIS GAME:
&lt;pre&gt;
import random
p1=input(&quot;enter player 1 name:&quot;)
p2=input(&quot;enter player 2 name:&quot;)
l=[&quot;rainbow&quot;,&quot;computer&quot;,&quot;robot&quot;,&quot;butter&quot;,&quot;vegetable&quot;,&quot;science&quot;,&quot;correct&quot;]
c1=c2=a1=a2=f1=f2=0
k=1
i=3
def play():
    n=random.choice(l)        ##n=chooses a word from list l
    l1=[]
    for j in n:
       l1.append(j)      ##creates a list for word in n
    for t in range(len(l1)):
       p=random.choice(l1)     ##this randomly displays letters in the list
       print(p)
       l1.remove(p)          ##to avoid the repetition of a letter
    s=input(&quot;enter the word:&quot;)
    if(s==n):
        print(&quot;correct&quot;)
        return 1
    else:
        print(&quot;not correct&quot;)
        print(&quot;answer is&quot;,n)
        return 0
def stat():
     print(&quot;player 1:&quot;)
     print(&quot;score:&quot;,c1)
     print(&quot;answered:&quot;,a1)
     print(&quot;failed:&quot;,f1)
     print(&quot;.............&quot;)
     print(&quot;player 2:&quot;)
     print(&quot;score:&quot;,c2)
     print(&quot;answered:&quot;,a2)
     print(&quot;failed&quot;,f2)
     if(c1&gt;c2):
         print(p1,&quot; won over &quot;,p2)
     elif(c1==c2):
         print(&quot;draw game&quot;)
     else:
         print(p2,&quot; won over &quot;,p1) 
while(i!=4):
      if(i==3):
         if(k==1):
             print(&quot;player 1 turn&quot;)
             print(&quot;your jumbled word is:&quot;)
             k=k+1
             m=play()
             if(m==1):      ##if guessed answer is correct,then score and no.of answered count will be increased
                c1+=1
                a1+=1
             else:
                f1+=1       ##else count of no.of failed to answered will be incremented
         else:
             print(&quot;player 2 turn&quot;)
             print(&quot;your jumbled word is:&quot;)
             k=k-1
             m=play()
             if(m==1):
                c2=c2+1
                a2=a2+1
             else:
                f2=f2+1
       if(i==2):
             print(&quot;present status&quot;)
             stat()
       i=int(input(&quot;enter your choice  1.stop 2.status 3.continue&quot;))
       if(i==1):
             stat()
             i=i+3
&lt;/pre&gt;
&lt;hr&gt;
=== JumbledWord Simple Logic, In Short ===
[[File:jumbledWord.gif]]
&lt;hr&gt;
'''Logic to create a Jumbled Word'''
&lt;hr&gt;
&lt;pre&gt;
#Get Jumbled Word and print it Horizontally
import random

def getJumbledWord(b):
    jumble=''
    l1 = [ b[i] for i in range(0, len(b)) ]
    for t in range(len(l1)):
       p=random.choice(l1)     ##this randomly gets letters from the list      
       jumble=jumble+p       
       l1.remove(p)
    return jumble

b=input(&quot;Enter a word to make it jumbled : &quot;)
print(&quot;Jumbled Word : &quot;, getJumbledWord(b))
&lt;/pre&gt;
&lt;hr&gt;
'''Another Logic to create a Jumbled Word'''
&lt;hr&gt;
&lt;pre&gt;
b=input(&quot;Enter a word to make it jumbled : &quot;)

def getJumbledWord1(b):
    l1 = [ b[i] for i in range(0, len(b)) ]
    random.shuffle(l1)
    str1 = ''.join(l1)
    return str1

print(&quot;Jumbled Word : &quot;, getJumbledWord1(b))
&lt;/pre&gt;

====Sample Output:====
&lt;pre&gt;
---- Output1 
Enter a word to make it jumbled : butter
Jumbled Word :  tbture

---- Output2 
Enter a word to make it jumbled : petriotism
Jumbled Word :  pittrosime
&lt;/pre&gt;

=Theory of Evolution=

== What is Evolution ? ==
Evolution is the change in heritable characteristics over successive generations. The theory of evolution explains that DNA, which acts as a carrier of genetic information from one generation to other, tends to change or mutate occasionally. These changes are reflected in next generations to come. This is how life has evolved on earth from bacteria to human beings.&lt;br&gt;
[[File:Evolution.png|500px]]

== Implementation ==
An array representing DNA is stored in a file. As genes are forms of DNA, they contain information to be transferred to forthcoming generations. Assume that information is in the form of bits (in the form of 0s and 1s). A number is picked randomly from 1 to the size of the array. A new parameter has been introduced which decides whether mutation would occur or not. If the value of this new parameter is 1 (It is picked randomly from 1 to 100), then only change is reflected down the generations, otherwise it is not. The pseudo code is as follows :
Input an array containing genetic information .
Randomly generate a number (say m) from 1 to length of the array. Randomly generate other number (say p) from 1 to 100.
 
    if p is equal to 1 then 
        if m is 1 then
          set it to 0
        else
          set it to 1</text>
      <sha1>hacb9paaq7trbrndomznkcxnnd67zz8</sha1>
    </revision>
    <revision>
      <id>3491</id>
      <parentid>3490</parentid>
      <timestamp>2018-09-27T13:16:53Z</timestamp>
      <contributor>
        <username>Sachinkr</username>
        <id>1743</id>
      </contributor>
      <comment>/* Loops */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="28219">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_3 Contributors of this page]
*Week 3 Playlist: https://www.youtube.com/playlist?list=PLc_j0TNIaWxOVx_z9jAM2UB3RqYNXaoEo
=List=
List is a flexible data structure used for storing a group of data separated by comma. The elements in a list need not be of the same data type.

'''Example:'''
       List_1 = [ 1, 2,3] or 
       List_1 = [&quot;coffee&quot;, &quot;Tea&quot;, &quot;Milk&quot;] or
       List_1 = [1,&quot;coffee&quot;, &quot;Tea&quot;, 3, &quot;5&quot;]

==List Creation==
&lt;pre&gt;a) A list can be created by simply putting values (separated by comma) between square brackets as given below,
       List_1 = [1,&quot;coffee&quot;, &quot;Tea&quot;, 3, &quot;5&quot;] #this creates a list by name List_1 containing following items


Or,
(b)A List can be created from scratch and elements can be added 
        List_2 = [ ]
        List_2.append(&quot;Kala&quot;)
        List_2.append(&quot;Mala&quot;)
Here we use &quot;append&quot; ,which is a function in python that enable us to append or attach an element to a list .
Thus List_2 will now hold [&quot;Kala&quot;,&quot;Mala&quot;]
&lt;/pre&gt;
[[#TOP]]

==Operations and Methods to work with List==
&lt;pre&gt;
a = [25,30,50,90,12,13]
b = [100,300,500,200,250]
&lt;/pre&gt;
&lt;hr&gt;
&lt;table border=2&gt;
  &lt;tr&gt;
    &lt;th&gt;&lt;b&gt;Method/&lt;br&gt;Operator&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Function&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Syntax&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Output&lt;/b&gt;&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;len()&lt;/td&gt;
    &lt;td&gt;Find length of a list&lt;/td&gt;
    &lt;td&gt;len(a)&lt;/td&gt;
    &lt;td&gt;6&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;max()&lt;/td&gt;
    &lt;td&gt;Find maximum element from the list&lt;/td&gt;
    &lt;td&gt;max(a)&lt;/td&gt;
    &lt;td&gt;90&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;min()&lt;/td&gt;
    &lt;td&gt;Find minimum element from the list&lt;/td&gt;
    &lt;td&gt;min(a)&lt;/td&gt;
    &lt;td&gt;12&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sum()&lt;/td&gt;
    &lt;td&gt;Returns sum of all elements of the list&lt;/td&gt;
    &lt;td&gt;sum(a)&lt;/td&gt;
    &lt;td&gt;220&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;reverse()&lt;/td&gt;
    &lt;td&gt;Reverses the original list&lt;/td&gt;
    &lt;td&gt;a.reverse()&lt;/td&gt;
    &lt;td&gt;[13, 12, 90, 50, 30, 25]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sort()&lt;/td&gt;
    &lt;td&gt;Sorts the original list in ascending order&lt;/td&gt;
    &lt;td&gt;a.sort()&lt;/td&gt;
    &lt;td&gt;[12, 13, 25, 30, 50, 90]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sorted()&lt;/td&gt;
    &lt;td&gt;Returns the new sorted list &lt;/td&gt;
    &lt;td&gt;sorted(a)&lt;/td&gt;
    &lt;td&gt;[12, 13, 25, 30, 50, 90]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;insert()&lt;/td&gt;
    &lt;td&gt;Insert at a particular index in the list, and shifts remaining elements&lt;/td&gt;
    &lt;td&gt;a.insert(3,3)&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 3, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;append()&lt;/td&gt;
    &lt;td&gt;Adds elements/object to the end of the list&lt;/td&gt;
    &lt;td&gt;a.append(5)&lt;br&gt;a.append([10,20])&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 5]&lt;br&gt;[25, 30, 50, 90, 12, 13, [10, 20]]&lt;br&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;extend()&lt;/td&gt;
    &lt;td&gt;Adds object to the end of the list as elements not as object&lt;/td&gt;
    &lt;td&gt;a.extend([10,20])&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 10, 20]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;*&amp;nbsp;&amp;nbsp;Repeatation&lt;br&gt;operator&lt;/td&gt;
    &lt;td&gt;Repeat the list for n times and returns a new list&lt;/td&gt;
    &lt;td&gt;a*2&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 25, 30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;+ Concatenation&lt;br&gt;operator&lt;/td&gt;
    &lt;td&gt;Concatenates two lists, and returns a new list&lt;/td&gt;
    &lt;td&gt;a+b&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 100, 300, 500, 200, 250]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;index()&lt;/td&gt;
    &lt;td&gt;Finds index of a particular element in the list or not&lt;/td&gt;
    &lt;td&gt;a.index(25)&lt;br&gt;a.index(0)&lt;br&gt;&lt;/td&gt;
    &lt;td&gt;0&lt;br&gt;&lt;br&gt;ValueError: 0 is not in list&lt;br&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;in operator&lt;/td&gt;
    &lt;td&gt;Finds whether a particular element is in the list or not, returns boolean&lt;/td&gt;
    &lt;td&gt;25 in a&lt;/td&gt;
    &lt;td&gt;True&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;not in operator&lt;/td&gt;
    &lt;td&gt;Checks if element is not available in list, returns boolean&lt;/td&gt;
    &lt;td&gt;25 not in a&lt;/td&gt;
    &lt;td&gt;False&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;count()&lt;/td&gt;
    &lt;td&gt;Counts the number of occurence of an element in the list&lt;/td&gt;
    &lt;td&gt;a.count(25)&lt;/td&gt;
    &lt;td&gt;1&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;remove()&lt;/td&gt;
    &lt;td&gt;Removes an element from the list&lt;/td&gt;
    &lt;td&gt;a.remove(25)&lt;/td&gt;
    &lt;td&gt; [30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;pop()&lt;/td&gt;
    &lt;td&gt;Delete and return item at index 0&lt;/td&gt;
    &lt;td&gt;a.pop(0)&lt;/td&gt;
    &lt;td&gt;25 , a will be [30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;del&lt;/td&gt;
    &lt;td&gt;Deletes item at a particular index from the list&lt;/td&gt;
    &lt;td&gt;del a[0]&lt;/td&gt;
    &lt;td&gt;[30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;

==Printing the List==
=== Print whole list ===
A list can be printed simply or using a ''for / while'' loop 

 print(List_2)     # To print the entire list
This code will print      
 ['Kala','Mala']     

===Print element at a particular index===
&lt;pre&gt;
Using index position
    List_2[0]     # prints 'Kala' ,i.e,the value at index position 0.
    List_2[1]     # prints 'Mala'.
&lt;/pre&gt;
=== Without using index position ===
&lt;pre&gt;
for item in List_2:   # here item is a variable used to access elements in list.
       print(item)
   This code snippet prints 
    Kala
    Mala
&lt;/pre&gt;
[[#TOP]]

==Search for a particular element in list==
Elements in a list can be searched by one of the two ways:
=== using index() function===
&lt;pre&gt;
ages1 = [11,23,12,23,45]

#if element is available in the list, index() returns the index value on which, the element is present.
print(ages1.index(45))#Output: 4

#if element is not available in the list, index() returns ''ValueError''
print(ages1.index(0))#Output: ValueError:
&lt;/pre&gt;

In programming, if such error occurs, program gets terminated. It can be solved using exception handling.
e.g.
&lt;pre&gt;
ages1 = [11,23,12,23,45]

try:
    print(ages1.index(0))
except ValueError:
    print(&quot;Exception has occured&quot;)    
    print(&quot;Element is not found in the list&quot;)

&lt;/pre&gt;
&lt;pre&gt;
'''Output: 
Exception has occured
Element is not found in the list
'''&lt;/pre&gt;
[[#TOP]]

=== using 'in' operator===
''in'' operator is used to check whether a particular element is available in the list or not.e.g.

&lt;pre&gt;
ages1 = [11,23,12,23,45]
no=11

if no in ages1:
    print(&quot;no is there in the list&quot;)
else:    
    print(&quot;no is NOT there in the list&quot;)
&lt;/pre&gt;
&lt;pre&gt;
#Output: no is there in the list
&lt;/pre&gt;

'''Number is not there in the list'''
&lt;pre&gt;
ages1 = [11,23,12,23,45]
no=15

if no in ages1:
    print(&quot;no is there in the list&quot;)
else:    
    print(&quot;no is NOT there in the list&quot;)
&lt;/pre&gt;
&lt;pre&gt;
Output: no is NOT there in the list
&lt;/pre&gt;
[[#TOP]]

==Updating the List==
The lists can be updated using ''append'' or ''insert'' function.  Append adds the element to the end of the list and Insert adds the element in the specified position.
   List_2.append(&quot;Sheela&quot;)    # add the element 'Sheela' to the end of the list.
   print (List_2) will output 
   ['Kala', 'Mala', 'Sheela']
   
   List_2.insert(1,&quot;Bala&quot;)    # add the element &quot;Bala&quot; in the list at the index 1.
   print (List_2) will output 
   ['Kala', 'Bala','Mala', 'Sheela']

=== Extend the list by adding elements of other list at end using extend()===
&lt;pre&gt;
ages = [11,23,12,23,45]
ages.extend([57,58])
print(ages)
&lt;/pre&gt;

&lt;pre&gt;
#Output: [11, 23, 12, 23, 45, 57, 58]
&lt;/pre&gt;

==== Difference between ''append and extend'' ====
Difference between append and extend can be easily understood, by the following example.

&lt;pre&gt;
appendlist = [11,23,12,23,45]
appendlist.append([57,58])

extendlist= [11,23,12,23,45]
extendlist.extend([57,58])
&lt;/pre&gt;

&lt;pre&gt;
'''Output:
[11, 23, 12, 23, 45, [57, 58]]
[11, 23, 12, 23, 45, 57, 58]'''
&lt;/pre&gt;
[[#TOP]]

==Basic Operations on List==
===Frequency of Occurrence===
list.count(object) will return the number of times the object occur in the list.
  '''Example'''
    ages = [11,23,12,23,45,43,22,24,23]
    ages.count(23) will return
    3
    ages.count(100) will return
    0

===Length of the List===
len(list) will return the length of the list ie. the number of objects in the list.
  '''Example'''
    ages = [11,23,12,23,45,43,22,24,23]
    len(ages) will output
    9
To print the objects in the list either use ''for item in list'' or ''for index in range(len(list))''
    for item in ages:       
        print (item)  
        (OR)
    for index in range(len(ages)) :
        print (ages[index])
===Sort the List===
list.sort() will sort the list in ascending order
  '''Example'''
    ages = [11,23,12,23,45,43,22,24,23]
    ages.sort() 
    print (ages) 
    [11, 12, 22, 23, 23, 23, 24, 43, 45]

[[#TOP]]

===Sort the List using sorted() function===
sorted(list1) will sort the list and return a new list, it doesn't modify the original list
&lt;br&gt;'''Example: Sort in ascending order'''
&lt;pre&gt;
ages = [11,23,12,23,45,43,22,24,23]
newList=sorted(ages)
print(newList)

#Output: [11, 12, 22, 23, 23, 23, 24, 43, 45]
&lt;/pre&gt;

&lt;br&gt;'''Example: Sort in descending order'''
&lt;pre&gt;
ages = [11,23,12,23,45,43,22,24,23]
newList=sorted(ages,reverse=True)
print(newList)

#Output: [45, 43, 24, 23, 23, 23, 22, 12, 11]
&lt;/pre&gt;

===Reverse the List===
list.reverse() will reverse the original list
  '''Example'''
    ages = [11, 12, 22, 23, 23, 23, 24, 43, 45]
    ages.reverse()
    print (ages)
    [45, 43, 24, 23, 23, 23, 22, 12, 11]

Both sort() and reverse() list operation will work on numeric and alphanumeric data list.

A special use of the reverse() function is to descend a list that is sorted in ascending order.

  '''Example'''
&lt;pre&gt;
ages = [11, 12, 22, 23, 23, 23, 24, 43, 45]
ages.sort()
print(ages)
ages.reverse()
print(ages)
&lt;/pre&gt;

===Slicing===
Used to retrieve an object or objects in a range as a list  
  '''Example'''
Use ''list[index]'' to retrieve the object at the given index
         In [1]: student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
         In [2]: student[3]     #Object at index 3.  Remember index starts at 0
         Out[2]: 'Geetha'      


Use ''list[start_index : end_index + 1]'' to retrieve objects from the start_index to end_index 
         In [3]: student[2:4]     # Objects from index 2 to 3 as List. Note the [ and ]
         Out[3]: ['Vijay', 'Geetha']   


Use ''list[:]'' to retrieve objects from the starting of the list to the end of the list. 
The default start value will be the starting index of the list (i.e. 0) and the default end value
will be the length of the list 
         In [4]: student[:]        # prints the entire list
         Out[4]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma', 'Janani']


         In [5]: student[:5]       # prints the objects from the start of the list upto object at index 4
         Out[5]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran']


         In [6]: student[2:]       # prints the objects from index 2 upto the end of the list
         Out[6]: ['Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma', 'Janani']


Negative index too is available in Python. It starts from last element of the list. i.e.

         In [7]:student[-1]        #prints last index of list
         Out[7]: 'Janani'


         In [8]:student[-1:-8]     #prints empty list
         Out[8]: []


         In [9]:student[-8:-1]     #prints -8th index to -1st index elements
         Out[9]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma']

[[#TOP]]
===Removing Item from list ===
----

Is used to remove a specific item from the list.

'''Example:'''
 
Use list.remove(entry/value)  Or   del list[index]    Or list.pop(index)
         student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
         student.remove(&quot;Arun&quot;)   #This will delete item &quot;Arun&quot;
         Or    
         del student[0]           # This will delete item at index 0
         Or
         student.pop(0)         # This will delete and return item at index 0


         print(student)    
         Output: [&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]

[[#TOP]]
===Delete list ===
----
Used to delete complete list

'''Example'''

Use del &lt;list name&gt;
         student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
         del student

===Concatenation of two lists===
----
''+'' is the concatenation operator which is used concatenate two lists. 
&lt;pre&gt;
ages1 = [11,23,12,23,45]
ages2 = [25, 24, 43, 47]
age=ages1+ages2
print(age)
#Output: [11, 23, 12, 23, 45, 25, 24, 43, 47]
&lt;/pre&gt;

===Repeatation of a list ===
----
''*'' is the operator to repeat a particular list.
&lt;pre&gt;
ages1 = [11,23,12,23,45]
age=ages1*5 #ages1 list is repeated 5 times and stroed in ''age'' list
print(age)

#Output: [11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45]
&lt;/pre&gt;
====Conditional Statements====
&lt;pre&gt;Conditionals are used to check the condition and change the flow of the program 
accordingly. They are realized in programming languages through if statement. The 
syntax is as follows :
         if condition : 
            statement
    '''Note:''' Do not forget indentation (inserting space/tab) in the line after the
 if condition.
    
    In case you want to execute a set of statements when a condition is true and another

set of statement when the condition is false.
         if condition : 
            statement 1
         else :
            statement 2
    
    Multiple if-else statements can be written as follows:
         if condition_1 : 
            statement 1
         elif condition_2 : # 'elif' is short for 'else if'
            statement 2
         elif condition_3 :
            statement 3
        .
        .
         else :
            final statement
&lt;/pre&gt;
[[#TOP]]

=Loops and Conditionals : Fizzbuzz=
====Loops====
&lt;pre&gt;
Loops are used to execute a set of repetitive statements. They are realized
through 'while' and 'for' loops in programming languages. The syntax of 'for' loop is 
as follows :
        for LOOPVARIABLE in SEQUENCE: 
            STATEMENTS
    '''e.g.''' to print all the data from a list we can write:
        for item in list_name
            print(item)
    OR
        for index in range(len(list_name))
            print(list_name[index])
    
    The syntax for while loop is as follows :
    
        while BOOLEANEXPRESSION: 
            STATEMENTS
            INCREMENT/DECREMENT
    
    '''e.g.''' if we want to print all numbers from 1 to 10
        i=1
        while i&lt;=10 :
            print(i,&quot; &quot;)
            i=i+1
    
    'while' loop has indefinite iteration (run-time unknown). So, there must be loop
 break statement in it.
 Whereas 'for' loop is definite in nature (i.e. known or predictable span).&lt;br&gt;

&lt;b&gt;NOTE: Python doesn't have anything like do-while loop.&lt;/b&gt;
&lt;/pre&gt;
[[#TOP]]

==Implementation==
Here, we try to demonstrate the concept of loops and conditionals through a game called Fizzbuzz. The rules are as follows :&lt;br/&gt;
[[File:fizzBuzz.gif]]

• if input number is a multiple of ’3’ print ”Fizz”
&lt;br/&gt;
• if input number is a multiple of ’5’ print ”Buzz”
&lt;br/&gt;
• if input number is a multiple of both '3' and ’5’ print ”FizzBuzz”
&lt;br/&gt;
The pseudo code is as follows :
&lt;pre&gt;
   If input no % 3 == 0 and  input no % 5 == 0 : 
       print ”Fizzbuzz”
   else if input no % 3 == 0 : 
       print ”Fizz”
   else if input no % 5 == 0 : 
       print ”Buzz”
   else :
       print the input no
&lt;/pre&gt;
The order of statements execution matters to get the desired output. The highest priority condition should be first followed by other. In fizzbuzz programming, first checking should be done for both divisibility of 3 and 5. If condition not satisfied only then it should check individually for 3 or 5. So carefully choosing the order is crucial for better programming.
Note: There is some effect of present condition statements chosen on next conditions statements. That is why in first attempt fizzbuzz programming got struck.

Example: 
&lt;pre&gt;
#Code to achieve the above requirement in python3.
i = int(input(&quot;Enter the number&quot;)) 
if i%3 == 0 and i%5 == 0: print(i,&quot;FizzBuzz&quot;)  
elif i%5 == 0: print(i,&quot;Buzz&quot;)
elif i%3 == 0: print(i,&quot;Fizz&quot;)
else: print(i)
&lt;/pre&gt;
Lets put the same into a loop for a range given by the user.
&lt;pre&gt;
def fizzbuzzgame(start,stop):
    for i in range(start,stop+1):
        if i%3 == 0 and i%5 == 0:
            print(i,&quot;FizzBuzz&quot;)
        elif i%5 == 0:
            print(i,&quot;Buzz&quot;)
        elif i%3 == 0:
            print(i,&quot;Fizz&quot;)
        else: print(i)

fizzbuzzgame(50,100)
&lt;/pre&gt;


=== Fizz Buzz game in Interactive mode with Score ===
'''By Ms. Ami Tusharkant Choksi'''
&lt;pre&gt;
def fizzbuzzgame(i):
        if i%3 == 0 and i%5 == 0:
            print(i,&quot;FizzBuzz&quot;)
            return(&quot;fzbz&quot;)
        elif i%5 == 0:
            print(i,&quot;Buzz&quot;)
            return(&quot;bz&quot;)
        elif i%3 == 0:
            print(i,&quot;Fizz&quot;)
            return(&quot;fz&quot;)
        else:
            print(i)
            return(&quot;no&quot;)

ch = 'y'
fizzbuzz=0
fizz=0
buzz=0
nothing=0
print(&quot;&quot;&quot;
 _____  ____  _____  _____  ____   __ __  _____  _____       ____   ____  ___ ___    ___ 
|     ||    ||     ||     ||    \ |  |  ||     ||     |     /    | /    ||   |   |  /  _]
|   __| |  | |__/  ||__/  ||  o  )|  |  ||__/  ||__/  |    |   __||  o  || _   _ | /  [_ 
|  |_   |  | |   __||   __||     ||  |  ||   __||   __|    |  |  ||     ||  \_/  ||    _]
|   _]  |  | |  /  ||  /  ||  O  ||  :  ||  /  ||  /  |    |  |_ ||  _  ||   |   ||   [_ 
|  |    |  | |     ||     ||     ||     ||     ||     |    |     ||  |  ||   |   ||     |
|__|   |____||_____||_____||_____| \__,_||_____||_____|    |___,_||__|__||___|___||_____|
                                                                                         
&quot;&quot;&quot;)   

while(ch == 'y'):
    n=int(input(&quot;Enter a Number : &quot;))
    winLoose=fizzbuzzgame(n)
    if(winLoose == &quot;fz&quot;):
        fizz+=1
    elif(winLoose == &quot;bz&quot;):
        buzz+=1
    elif(winLoose == &quot;fzbz&quot;):
        fizzbuzz+=1
    ch=input(&quot;Do you want to continue playing the game : (y/n)&quot;)
    if(ch=='n'):
        print('Congratulations, your score is\n FizzBuzz:%d\nFizz:%d\nBuzz:%d' %
(fizzbuzz,fizz,buzz))
    
'''Sample Output:

 _____  ____  _____  _____  ____   __ __  _____  _____       ____   ____  ___ ___    ___ 
|     ||    ||     ||     ||    \ |  |  ||     ||     |     /    | /    ||   |   |  /  _]
|   __| |  | |__/  ||__/  ||  o  )|  |  ||__/  ||__/  |    |   __||  o  || _   _ | /  [_ 
|  |_   |  | |   __||   __||     ||  |  ||   __||   __|    |  |  ||     ||  \_/  ||    _]
|   _]  |  | |  /  ||  /  ||  O  ||  :  ||  /  ||  /  |    |  |_ ||  _  ||   |   ||   [_ 
|  |    |  | |     ||     ||     ||     ||     ||     |    |     ||  |  ||   |   ||     |
|__|   |____||_____||_____||_____| \__,_||_____||_____|    |___,_||__|__||___|___||_____|
                                                                                         

Enter a Number : 666
666 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 777
777 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 555
555 FizzBuzz
Do you want to continue playing the game : (y/n)y
Enter a Number : 1
1
Do you want to continue playing the game : (y/n)y
Enter a Number : 789
789 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 25
25 Buzz
Do you want to continue playing the game : (y/n)n
Congratulations, your score is

FizzBuzz:1
Fizz:3
Buzz:1

&lt;/pre&gt;

=Crowd Computing: Just Estimate=
==Wisdom of Crowds==
The concept of ’Wisdom of Crowds’ was proposed by Francis Galton. A weight-judging competition was carried on at the annual show of the West of England Fat Stock and Poultry Exhibition recently held at Plymouth, A fat ox having been selected, competitors bought stamped and numbered cards, each, on which to inscribe their respective names, addresses, and estimates of what the ox would weigh after it had been slaughtered. Those who guessed most successfully received prizes. About 8oo tickets were issued to the par- ticipants. The middlemost estimate of all the estimates recorded was 1207 lbs and the actual weight of the ox was 1198 lbs.

==Our Experiment==
The crowd had to guess the number of candies/gems in a jar. Around 75 people participated in the experiment. The actual number of gems in the jar were 375. The median of all estimates came out to be 300 and the mean of all the estimates came out to be around 396. Median underestimated and mean overestimated the actual value. So according to recent studies, Trimmed mean must be used as an aggregate measure to estimate where Wisdom of Crowds is involved.
[[File:Gemsjar.jpg|center|200px|caption]]

===Trimmed Mean===
In these kinds of experiments, 10% trimmed mean is usually followed. For calculating 10% trimmed mean, remove 10% smallest and 10% largest values from the sample. Calculate the mean of the sample obtained. In the above experiment, the trimmed mean came out to be around 351 which is very close to the actual value.

==Implementation==
Here, we try to demonstrate the concept of trimmed mean through crowd computing.
 Input a list of estimates done by the crowd .
 Sort the list.
 Remove the 10% smallest values.
 Remove the 10% largest values.
 Calculate the mean of the new list obtained .&lt;hr&gt;

==Data of Experiment==       
    Estimates =[1000,1010,1786,2000,1500,1500,100,120,150,150,150,170,175,180,197,200,200,200,200,200,200,220,220,220,220,234,250,250,250,250,250,250,250,250,250,263,270,275,275,286,300,
                300,300,300,300,300,300,300,320,350,350,350,400, 400,400,400,400,450,467,500,500,500,500,500,500,500,550,550,600,600,600,650,700,700,720]

    '''CODE:'''
&lt;pre&gt;
Estimates = [1000,1010,1786,2000,1500,1500,100,120,150,150,150,170,175,180,197,200,200,200,200,200,200,220,220,220,220,234,250,250,250,250,250,250,250,250,250,263,270,275,275,286,300,                300,300,300,300,300,300,300,320,350,350,350,400,400,400,400,400,450,467,500,500,500,500,500,500,500,550,550,600,600,600,650,700,700,720]
Estimates.sort()
offset = int(0.10*len(Estimates))
for i in range(offset):
       del Estimates[0]
       del Estimates[-1]
Sum = 0    
for i in range(len(Estimates)):
       Sum += Estimates[i]
Mean_Value = Sum/len(Estimates)
print(&quot;Mean : &quot;, int(Mean_Value))
#Output:
Mean :  351
&lt;/pre&gt;
&lt;hr&gt;
==Trimmed Mean for the above example== 
&lt;h3&gt;Using scipy library&lt;/h3&gt;
&lt;pre&gt;
#import scipy to use the method of trim_mean
from scipy import stats
trimMean = stats.trim_mean(Estimates, 0.1) # Trim 10% at both ends
print(&quot;Trimmed Mean : &quot;,trimMean)
#Output:
Trimmed Mean :  335.1020408163265
&lt;/pre&gt;

&lt;h3&gt;Without using scipy library&lt;/h3&gt;
&lt;pre&gt;
#Trimmed mean with 10%
p=10/100
#sorted data
data=[2, 4, 6, 7, 11, 21, 81, 90, 105, 121]
n = len(data)
#Remove elements from both end
rem=int(n*p)
newData = data[rem:-rem]
mean = 0
for i in newData:
    mean += i
mean = int(mean/len(newData))
print(&quot;Trimmed mean : &quot;,mean)
#Output: Trimmed mean :  40
&lt;/pre&gt;
[[#Top]]

=Jumbled_Words Permutations: Jumbled Words=
==What are Permutations ?==
A permutation also called ordering of selected number of elements from a list denoted by nPr here we are choosing all elements of a list and so n=r&lt;br&gt;
nPr=n!/(n-r)!&lt;br&gt; as n=r
nPn=n!&lt;br&gt; which gives all possible arrangement of elements present in a list.

 For example, permutations of list [1,2,3] are [1,2,3], [1,3,2], [2,1,3], [2,3,1], 
[3,1,2], and [3,2,1]. 
The number of permutations of a list of elements nPn is given by n!. For example, there are 2! = 2 x 1 = 2 permutations of [1,2], namely [1,2] and [2,1], and 3! = 3 x 2 x 1 = 6 permutations of [1,2,3], as mentioned above.&lt;br/&gt;
[[File:Permutations.jpg]]

==Implementation==
Here, we try to demonstrate the concept of permutations through jumbled words. It is a two player game in which one person presents the other person a different permutation of the word in his mind. The other person has to guess the right word. If he guesses, the he wins otherwise he loses.
 Input an list of words.
 Randomly pick a word from the list of words .
 Shuffle this word and present it to the other player.
 if word guesses by the player is same as the one picked from list of w
     player wins
 else
     player loses

ALTERNATE CODE TO GENERATE THIS GAME:
&lt;pre&gt;
import random
p1=input(&quot;enter player 1 name:&quot;)
p2=input(&quot;enter player 2 name:&quot;)
l=[&quot;rainbow&quot;,&quot;computer&quot;,&quot;robot&quot;,&quot;butter&quot;,&quot;vegetable&quot;,&quot;science&quot;,&quot;correct&quot;]
c1=c2=a1=a2=f1=f2=0
k=1
i=3
def play():
    n=random.choice(l)        ##n=chooses a word from list l
    l1=[]
    for j in n:
       l1.append(j)      ##creates a list for word in n
    for t in range(len(l1)):
       p=random.choice(l1)     ##this randomly displays letters in the list
       print(p)
       l1.remove(p)          ##to avoid the repetition of a letter
    s=input(&quot;enter the word:&quot;)
    if(s==n):
        print(&quot;correct&quot;)
        return 1
    else:
        print(&quot;not correct&quot;)
        print(&quot;answer is&quot;,n)
        return 0
def stat():
     print(&quot;player 1:&quot;)
     print(&quot;score:&quot;,c1)
     print(&quot;answered:&quot;,a1)
     print(&quot;failed:&quot;,f1)
     print(&quot;.............&quot;)
     print(&quot;player 2:&quot;)
     print(&quot;score:&quot;,c2)
     print(&quot;answered:&quot;,a2)
     print(&quot;failed&quot;,f2)
     if(c1&gt;c2):
         print(p1,&quot; won over &quot;,p2)
     elif(c1==c2):
         print(&quot;draw game&quot;)
     else:
         print(p2,&quot; won over &quot;,p1) 
while(i!=4):
      if(i==3):
         if(k==1):
             print(&quot;player 1 turn&quot;)
             print(&quot;your jumbled word is:&quot;)
             k=k+1
             m=play()
             if(m==1):      ##if guessed answer is correct,then score and no.of answered count will be increased
                c1+=1
                a1+=1
             else:
                f1+=1       ##else count of no.of failed to answered will be incremented
         else:
             print(&quot;player 2 turn&quot;)
             print(&quot;your jumbled word is:&quot;)
             k=k-1
             m=play()
             if(m==1):
                c2=c2+1
                a2=a2+1
             else:
                f2=f2+1
       if(i==2):
             print(&quot;present status&quot;)
             stat()
       i=int(input(&quot;enter your choice  1.stop 2.status 3.continue&quot;))
       if(i==1):
             stat()
             i=i+3
&lt;/pre&gt;
&lt;hr&gt;
=== JumbledWord Simple Logic, In Short ===
[[File:jumbledWord.gif]]
&lt;hr&gt;
'''Logic to create a Jumbled Word'''
&lt;hr&gt;
&lt;pre&gt;
#Get Jumbled Word and print it Horizontally
import random

def getJumbledWord(b):
    jumble=''
    l1 = [ b[i] for i in range(0, len(b)) ]
    for t in range(len(l1)):
       p=random.choice(l1)     ##this randomly gets letters from the list      
       jumble=jumble+p       
       l1.remove(p)
    return jumble

b=input(&quot;Enter a word to make it jumbled : &quot;)
print(&quot;Jumbled Word : &quot;, getJumbledWord(b))
&lt;/pre&gt;
&lt;hr&gt;
'''Another Logic to create a Jumbled Word'''
&lt;hr&gt;
&lt;pre&gt;
b=input(&quot;Enter a word to make it jumbled : &quot;)

def getJumbledWord1(b):
    l1 = [ b[i] for i in range(0, len(b)) ]
    random.shuffle(l1)
    str1 = ''.join(l1)
    return str1

print(&quot;Jumbled Word : &quot;, getJumbledWord1(b))
&lt;/pre&gt;

====Sample Output:====
&lt;pre&gt;
---- Output1 
Enter a word to make it jumbled : butter
Jumbled Word :  tbture

---- Output2 
Enter a word to make it jumbled : petriotism
Jumbled Word :  pittrosime
&lt;/pre&gt;

=Theory of Evolution=

== What is Evolution ? ==
Evolution is the change in heritable characteristics over successive generations. The theory of evolution explains that DNA, which acts as a carrier of genetic information from one generation to other, tends to change or mutate occasionally. These changes are reflected in next generations to come. This is how life has evolved on earth from bacteria to human beings.&lt;br&gt;
[[File:Evolution.png|500px]]

== Implementation ==
An array representing DNA is stored in a file. As genes are forms of DNA, they contain information to be transferred to forthcoming generations. Assume that information is in the form of bits (in the form of 0s and 1s). A number is picked randomly from 1 to the size of the array. A new parameter has been introduced which decides whether mutation would occur or not. If the value of this new parameter is 1 (It is picked randomly from 1 to 100), then only change is reflected down the generations, otherwise it is not. The pseudo code is as follows :
Input an array containing genetic information .
Randomly generate a number (say m) from 1 to length of the array. Randomly generate other number (say p) from 1 to 100.
 
    if p is equal to 1 then 
        if m is 1 then
          set it to 0
        else
          set it to 1</text>
      <sha1>hdmoha1vhah5di3oxzt3rl8hoxxrnnz</sha1>
    </revision>
    <revision>
      <id>3494</id>
      <parentid>3491</parentid>
      <timestamp>2018-09-27T13:17:37Z</timestamp>
      <contributor>
        <username>Sachinkr</username>
        <id>1743</id>
      </contributor>
      <comment>/* Implementation */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="28240">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_3 Contributors of this page]
*Week 3 Playlist: https://www.youtube.com/playlist?list=PLc_j0TNIaWxOVx_z9jAM2UB3RqYNXaoEo
=List=
List is a flexible data structure used for storing a group of data separated by comma. The elements in a list need not be of the same data type.

'''Example:'''
       List_1 = [ 1, 2,3] or 
       List_1 = [&quot;coffee&quot;, &quot;Tea&quot;, &quot;Milk&quot;] or
       List_1 = [1,&quot;coffee&quot;, &quot;Tea&quot;, 3, &quot;5&quot;]

==List Creation==
&lt;pre&gt;a) A list can be created by simply putting values (separated by comma) between square brackets as given below,
       List_1 = [1,&quot;coffee&quot;, &quot;Tea&quot;, 3, &quot;5&quot;] #this creates a list by name List_1 containing following items


Or,
(b)A List can be created from scratch and elements can be added 
        List_2 = [ ]
        List_2.append(&quot;Kala&quot;)
        List_2.append(&quot;Mala&quot;)
Here we use &quot;append&quot; ,which is a function in python that enable us to append or attach an element to a list .
Thus List_2 will now hold [&quot;Kala&quot;,&quot;Mala&quot;]
&lt;/pre&gt;
[[#TOP]]

==Operations and Methods to work with List==
&lt;pre&gt;
a = [25,30,50,90,12,13]
b = [100,300,500,200,250]
&lt;/pre&gt;
&lt;hr&gt;
&lt;table border=2&gt;
  &lt;tr&gt;
    &lt;th&gt;&lt;b&gt;Method/&lt;br&gt;Operator&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Function&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Syntax&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Output&lt;/b&gt;&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;len()&lt;/td&gt;
    &lt;td&gt;Find length of a list&lt;/td&gt;
    &lt;td&gt;len(a)&lt;/td&gt;
    &lt;td&gt;6&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;max()&lt;/td&gt;
    &lt;td&gt;Find maximum element from the list&lt;/td&gt;
    &lt;td&gt;max(a)&lt;/td&gt;
    &lt;td&gt;90&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;min()&lt;/td&gt;
    &lt;td&gt;Find minimum element from the list&lt;/td&gt;
    &lt;td&gt;min(a)&lt;/td&gt;
    &lt;td&gt;12&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sum()&lt;/td&gt;
    &lt;td&gt;Returns sum of all elements of the list&lt;/td&gt;
    &lt;td&gt;sum(a)&lt;/td&gt;
    &lt;td&gt;220&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;reverse()&lt;/td&gt;
    &lt;td&gt;Reverses the original list&lt;/td&gt;
    &lt;td&gt;a.reverse()&lt;/td&gt;
    &lt;td&gt;[13, 12, 90, 50, 30, 25]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sort()&lt;/td&gt;
    &lt;td&gt;Sorts the original list in ascending order&lt;/td&gt;
    &lt;td&gt;a.sort()&lt;/td&gt;
    &lt;td&gt;[12, 13, 25, 30, 50, 90]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sorted()&lt;/td&gt;
    &lt;td&gt;Returns the new sorted list &lt;/td&gt;
    &lt;td&gt;sorted(a)&lt;/td&gt;
    &lt;td&gt;[12, 13, 25, 30, 50, 90]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;insert()&lt;/td&gt;
    &lt;td&gt;Insert at a particular index in the list, and shifts remaining elements&lt;/td&gt;
    &lt;td&gt;a.insert(3,3)&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 3, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;append()&lt;/td&gt;
    &lt;td&gt;Adds elements/object to the end of the list&lt;/td&gt;
    &lt;td&gt;a.append(5)&lt;br&gt;a.append([10,20])&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 5]&lt;br&gt;[25, 30, 50, 90, 12, 13, [10, 20]]&lt;br&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;extend()&lt;/td&gt;
    &lt;td&gt;Adds object to the end of the list as elements not as object&lt;/td&gt;
    &lt;td&gt;a.extend([10,20])&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 10, 20]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;*&amp;nbsp;&amp;nbsp;Repeatation&lt;br&gt;operator&lt;/td&gt;
    &lt;td&gt;Repeat the list for n times and returns a new list&lt;/td&gt;
    &lt;td&gt;a*2&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 25, 30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;+ Concatenation&lt;br&gt;operator&lt;/td&gt;
    &lt;td&gt;Concatenates two lists, and returns a new list&lt;/td&gt;
    &lt;td&gt;a+b&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 100, 300, 500, 200, 250]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;index()&lt;/td&gt;
    &lt;td&gt;Finds index of a particular element in the list or not&lt;/td&gt;
    &lt;td&gt;a.index(25)&lt;br&gt;a.index(0)&lt;br&gt;&lt;/td&gt;
    &lt;td&gt;0&lt;br&gt;&lt;br&gt;ValueError: 0 is not in list&lt;br&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;in operator&lt;/td&gt;
    &lt;td&gt;Finds whether a particular element is in the list or not, returns boolean&lt;/td&gt;
    &lt;td&gt;25 in a&lt;/td&gt;
    &lt;td&gt;True&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;not in operator&lt;/td&gt;
    &lt;td&gt;Checks if element is not available in list, returns boolean&lt;/td&gt;
    &lt;td&gt;25 not in a&lt;/td&gt;
    &lt;td&gt;False&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;count()&lt;/td&gt;
    &lt;td&gt;Counts the number of occurence of an element in the list&lt;/td&gt;
    &lt;td&gt;a.count(25)&lt;/td&gt;
    &lt;td&gt;1&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;remove()&lt;/td&gt;
    &lt;td&gt;Removes an element from the list&lt;/td&gt;
    &lt;td&gt;a.remove(25)&lt;/td&gt;
    &lt;td&gt; [30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;pop()&lt;/td&gt;
    &lt;td&gt;Delete and return item at index 0&lt;/td&gt;
    &lt;td&gt;a.pop(0)&lt;/td&gt;
    &lt;td&gt;25 , a will be [30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;del&lt;/td&gt;
    &lt;td&gt;Deletes item at a particular index from the list&lt;/td&gt;
    &lt;td&gt;del a[0]&lt;/td&gt;
    &lt;td&gt;[30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;

==Printing the List==
=== Print whole list ===
A list can be printed simply or using a ''for / while'' loop 

 print(List_2)     # To print the entire list
This code will print      
 ['Kala','Mala']     

===Print element at a particular index===
&lt;pre&gt;
Using index position
    List_2[0]     # prints 'Kala' ,i.e,the value at index position 0.
    List_2[1]     # prints 'Mala'.
&lt;/pre&gt;
=== Without using index position ===
&lt;pre&gt;
for item in List_2:   # here item is a variable used to access elements in list.
       print(item)
   This code snippet prints 
    Kala
    Mala
&lt;/pre&gt;
[[#TOP]]

==Search for a particular element in list==
Elements in a list can be searched by one of the two ways:
=== using index() function===
&lt;pre&gt;
ages1 = [11,23,12,23,45]

#if element is available in the list, index() returns the index value on which, the element is present.
print(ages1.index(45))#Output: 4

#if element is not available in the list, index() returns ''ValueError''
print(ages1.index(0))#Output: ValueError:
&lt;/pre&gt;

In programming, if such error occurs, program gets terminated. It can be solved using exception handling.
e.g.
&lt;pre&gt;
ages1 = [11,23,12,23,45]

try:
    print(ages1.index(0))
except ValueError:
    print(&quot;Exception has occured&quot;)    
    print(&quot;Element is not found in the list&quot;)

&lt;/pre&gt;
&lt;pre&gt;
'''Output: 
Exception has occured
Element is not found in the list
'''&lt;/pre&gt;
[[#TOP]]

=== using 'in' operator===
''in'' operator is used to check whether a particular element is available in the list or not.e.g.

&lt;pre&gt;
ages1 = [11,23,12,23,45]
no=11

if no in ages1:
    print(&quot;no is there in the list&quot;)
else:    
    print(&quot;no is NOT there in the list&quot;)
&lt;/pre&gt;
&lt;pre&gt;
#Output: no is there in the list
&lt;/pre&gt;

'''Number is not there in the list'''
&lt;pre&gt;
ages1 = [11,23,12,23,45]
no=15

if no in ages1:
    print(&quot;no is there in the list&quot;)
else:    
    print(&quot;no is NOT there in the list&quot;)
&lt;/pre&gt;
&lt;pre&gt;
Output: no is NOT there in the list
&lt;/pre&gt;
[[#TOP]]

==Updating the List==
The lists can be updated using ''append'' or ''insert'' function.  Append adds the element to the end of the list and Insert adds the element in the specified position.
   List_2.append(&quot;Sheela&quot;)    # add the element 'Sheela' to the end of the list.
   print (List_2) will output 
   ['Kala', 'Mala', 'Sheela']
   
   List_2.insert(1,&quot;Bala&quot;)    # add the element &quot;Bala&quot; in the list at the index 1.
   print (List_2) will output 
   ['Kala', 'Bala','Mala', 'Sheela']

=== Extend the list by adding elements of other list at end using extend()===
&lt;pre&gt;
ages = [11,23,12,23,45]
ages.extend([57,58])
print(ages)
&lt;/pre&gt;

&lt;pre&gt;
#Output: [11, 23, 12, 23, 45, 57, 58]
&lt;/pre&gt;

==== Difference between ''append and extend'' ====
Difference between append and extend can be easily understood, by the following example.

&lt;pre&gt;
appendlist = [11,23,12,23,45]
appendlist.append([57,58])

extendlist= [11,23,12,23,45]
extendlist.extend([57,58])
&lt;/pre&gt;

&lt;pre&gt;
'''Output:
[11, 23, 12, 23, 45, [57, 58]]
[11, 23, 12, 23, 45, 57, 58]'''
&lt;/pre&gt;
[[#TOP]]

==Basic Operations on List==
===Frequency of Occurrence===
list.count(object) will return the number of times the object occur in the list.
  '''Example'''
    ages = [11,23,12,23,45,43,22,24,23]
    ages.count(23) will return
    3
    ages.count(100) will return
    0

===Length of the List===
len(list) will return the length of the list ie. the number of objects in the list.
  '''Example'''
    ages = [11,23,12,23,45,43,22,24,23]
    len(ages) will output
    9
To print the objects in the list either use ''for item in list'' or ''for index in range(len(list))''
    for item in ages:       
        print (item)  
        (OR)
    for index in range(len(ages)) :
        print (ages[index])
===Sort the List===
list.sort() will sort the list in ascending order
  '''Example'''
    ages = [11,23,12,23,45,43,22,24,23]
    ages.sort() 
    print (ages) 
    [11, 12, 22, 23, 23, 23, 24, 43, 45]

[[#TOP]]

===Sort the List using sorted() function===
sorted(list1) will sort the list and return a new list, it doesn't modify the original list
&lt;br&gt;'''Example: Sort in ascending order'''
&lt;pre&gt;
ages = [11,23,12,23,45,43,22,24,23]
newList=sorted(ages)
print(newList)

#Output: [11, 12, 22, 23, 23, 23, 24, 43, 45]
&lt;/pre&gt;

&lt;br&gt;'''Example: Sort in descending order'''
&lt;pre&gt;
ages = [11,23,12,23,45,43,22,24,23]
newList=sorted(ages,reverse=True)
print(newList)

#Output: [45, 43, 24, 23, 23, 23, 22, 12, 11]
&lt;/pre&gt;

===Reverse the List===
list.reverse() will reverse the original list
  '''Example'''
    ages = [11, 12, 22, 23, 23, 23, 24, 43, 45]
    ages.reverse()
    print (ages)
    [45, 43, 24, 23, 23, 23, 22, 12, 11]

Both sort() and reverse() list operation will work on numeric and alphanumeric data list.

A special use of the reverse() function is to descend a list that is sorted in ascending order.

  '''Example'''
&lt;pre&gt;
ages = [11, 12, 22, 23, 23, 23, 24, 43, 45]
ages.sort()
print(ages)
ages.reverse()
print(ages)
&lt;/pre&gt;

===Slicing===
Used to retrieve an object or objects in a range as a list  
  '''Example'''
Use ''list[index]'' to retrieve the object at the given index
         In [1]: student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
         In [2]: student[3]     #Object at index 3.  Remember index starts at 0
         Out[2]: 'Geetha'      


Use ''list[start_index : end_index + 1]'' to retrieve objects from the start_index to end_index 
         In [3]: student[2:4]     # Objects from index 2 to 3 as List. Note the [ and ]
         Out[3]: ['Vijay', 'Geetha']   


Use ''list[:]'' to retrieve objects from the starting of the list to the end of the list. 
The default start value will be the starting index of the list (i.e. 0) and the default end value
will be the length of the list 
         In [4]: student[:]        # prints the entire list
         Out[4]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma', 'Janani']


         In [5]: student[:5]       # prints the objects from the start of the list upto object at index 4
         Out[5]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran']


         In [6]: student[2:]       # prints the objects from index 2 upto the end of the list
         Out[6]: ['Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma', 'Janani']


Negative index too is available in Python. It starts from last element of the list. i.e.

         In [7]:student[-1]        #prints last index of list
         Out[7]: 'Janani'


         In [8]:student[-1:-8]     #prints empty list
         Out[8]: []


         In [9]:student[-8:-1]     #prints -8th index to -1st index elements
         Out[9]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma']

[[#TOP]]
===Removing Item from list ===
----

Is used to remove a specific item from the list.

'''Example:'''
 
Use list.remove(entry/value)  Or   del list[index]    Or list.pop(index)
         student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
         student.remove(&quot;Arun&quot;)   #This will delete item &quot;Arun&quot;
         Or    
         del student[0]           # This will delete item at index 0
         Or
         student.pop(0)         # This will delete and return item at index 0


         print(student)    
         Output: [&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]

[[#TOP]]
===Delete list ===
----
Used to delete complete list

'''Example'''

Use del &lt;list name&gt;
         student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
         del student

===Concatenation of two lists===
----
''+'' is the concatenation operator which is used concatenate two lists. 
&lt;pre&gt;
ages1 = [11,23,12,23,45]
ages2 = [25, 24, 43, 47]
age=ages1+ages2
print(age)
#Output: [11, 23, 12, 23, 45, 25, 24, 43, 47]
&lt;/pre&gt;

===Repeatation of a list ===
----
''*'' is the operator to repeat a particular list.
&lt;pre&gt;
ages1 = [11,23,12,23,45]
age=ages1*5 #ages1 list is repeated 5 times and stroed in ''age'' list
print(age)

#Output: [11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45]
&lt;/pre&gt;
====Conditional Statements====
&lt;pre&gt;Conditionals are used to check the condition and change the flow of the program 
accordingly. They are realized in programming languages through if statement. The 
syntax is as follows :
         if condition : 
            statement
    '''Note:''' Do not forget indentation (inserting space/tab) in the line after the
 if condition.
    
    In case you want to execute a set of statements when a condition is true and another

set of statement when the condition is false.
         if condition : 
            statement 1
         else :
            statement 2
    
    Multiple if-else statements can be written as follows:
         if condition_1 : 
            statement 1
         elif condition_2 : # 'elif' is short for 'else if'
            statement 2
         elif condition_3 :
            statement 3
        .
        .
         else :
            final statement
&lt;/pre&gt;
[[#TOP]]

=Loops and Conditionals : Fizzbuzz=
====Loops====
&lt;pre&gt;
Loops are used to execute a set of repetitive statements. They are realized
through 'while' and 'for' loops in programming languages. The syntax of 'for' loop is 
as follows :
        for LOOPVARIABLE in SEQUENCE: 
            STATEMENTS
    '''e.g.''' to print all the data from a list we can write:
        for item in list_name
            print(item)
    OR
        for index in range(len(list_name))
            print(list_name[index])
    
    The syntax for while loop is as follows :
    
        while BOOLEANEXPRESSION: 
            STATEMENTS
            INCREMENT/DECREMENT
    
    '''e.g.''' if we want to print all numbers from 1 to 10
        i=1
        while i&lt;=10 :
            print(i,&quot; &quot;)
            i=i+1
    
    'while' loop has indefinite iteration (run-time unknown). So, there must be loop
 break statement in it.
 Whereas 'for' loop is definite in nature (i.e. known or predictable span).&lt;br&gt;

&lt;b&gt;NOTE: Python doesn't have anything like do-while loop.&lt;/b&gt;
&lt;/pre&gt;
[[#TOP]]

==Implementation==
Here, we try to demonstrate the concept of loops and conditionals through a game called Fizzbuzz. The rules are as follows :&lt;br/&gt;
[[File:fizzBuzz.gif]]

• if input number is a multiple of ’3’ print ”Fizz”
&lt;br/&gt;
• if input number is a multiple of ’5’ print ”Buzz”
&lt;br/&gt;
• if input number is a multiple of both '3' and ’5’ print ”FizzBuzz”
&lt;br/&gt;
The pseudo code is as follows :
&lt;pre&gt;
   If input no % 3 == 0 and  input no % 5 == 0 : 
       print ”Fizzbuzz”
   else if input no % 3 == 0 : 
       print ”Fizz”
   else if input no % 5 == 0 : 
       print ”Buzz”
   else :
       print the input no
&lt;/pre&gt;
The order of statements execution matters to get the desired output. The highest priority condition should be first followed by other. In fizzbuzz programming, first checking should be done for both divisibility of 3 and 5. If condition not satisfied only then it should check individually for 3 or 5. So carefully choosing the order is crucial for better programming.
Note: There is some effect of present condition statements chosen on next conditions statements. That is why in first attempt fizzbuzz programming got struck.

Example: 
&lt;pre&gt;
#Code to achieve the above requirement in python3.
i = int(input(&quot;Enter the number&quot;)) 
if i%3 == 0 and i%5 == 0: print(i,&quot;FizzBuzz&quot;)  
elif i%5 == 0: print(i,&quot;Buzz&quot;)
elif i%3 == 0: print(i,&quot;Fizz&quot;)
else: print(i)
&lt;/pre&gt;
Lets put the same into a loop for a range given by the user.
&lt;pre&gt;
def fizzbuzzgame(start,stop):
    for i in range(start,stop+1):
        if i%3 == 0 and i%5 == 0:
            print(i,&quot;FizzBuzz&quot;)
        elif i%5 == 0:
            print(i,&quot;Buzz&quot;)
        elif i%3 == 0:
            print(i,&quot;Fizz&quot;)
        else: print(i)

fizzbuzzgame(50,100)
&lt;/pre&gt;


=== Fizz Buzz game in Interactive mode with Score ===
'''By Ms. Ami Tusharkant Choksi'''
&lt;pre&gt;
def fizzbuzzgame(i):
        if i%3 == 0 and i%5 == 0:
            print(i,&quot;FizzBuzz&quot;)
            return(&quot;fzbz&quot;)
        elif i%5 == 0:
            print(i,&quot;Buzz&quot;)
            return(&quot;bz&quot;)
        elif i%3 == 0:
            print(i,&quot;Fizz&quot;)
            return(&quot;fz&quot;)
        else:
            print(i)
            return(&quot;no&quot;)

ch = 'y'
fizzbuzz=0
fizz=0
buzz=0
nothing=0
print(&quot;&quot;&quot;
 _____  ____  _____  _____  ____   __ __  _____  _____       ____   ____  ___ ___    ___ 
|     ||    ||     ||     ||    \ |  |  ||     ||     |     /    | /    ||   |   |  /  _]
|   __| |  | |__/  ||__/  ||  o  )|  |  ||__/  ||__/  |    |   __||  o  || _   _ | /  [_ 
|  |_   |  | |   __||   __||     ||  |  ||   __||   __|    |  |  ||     ||  \_/  ||    _]
|   _]  |  | |  /  ||  /  ||  O  ||  :  ||  /  ||  /  |    |  |_ ||  _  ||   |   ||   [_ 
|  |    |  | |     ||     ||     ||     ||     ||     |    |     ||  |  ||   |   ||     |
|__|   |____||_____||_____||_____| \__,_||_____||_____|    |___,_||__|__||___|___||_____|
                                                                                         
&quot;&quot;&quot;)   

while(ch == 'y'):
    n=int(input(&quot;Enter a Number : &quot;))
    winLoose=fizzbuzzgame(n)
    if(winLoose == &quot;fz&quot;):
        fizz+=1
    elif(winLoose == &quot;bz&quot;):
        buzz+=1
    elif(winLoose == &quot;fzbz&quot;):
        fizzbuzz+=1
    ch=input(&quot;Do you want to continue playing the game : (y/n)&quot;)
    if(ch=='n'):
        print('Congratulations, your score is\n FizzBuzz:%d\nFizz:%d\nBuzz:%d' %
(fizzbuzz,fizz,buzz))
    
'''Sample Output:

 _____  ____  _____  _____  ____   __ __  _____  _____       ____   ____  ___ ___    ___ 
|     ||    ||     ||     ||    \ |  |  ||     ||     |     /    | /    ||   |   |  /  _]
|   __| |  | |__/  ||__/  ||  o  )|  |  ||__/  ||__/  |    |   __||  o  || _   _ | /  [_ 
|  |_   |  | |   __||   __||     ||  |  ||   __||   __|    |  |  ||     ||  \_/  ||    _]
|   _]  |  | |  /  ||  /  ||  O  ||  :  ||  /  ||  /  |    |  |_ ||  _  ||   |   ||   [_ 
|  |    |  | |     ||     ||     ||     ||     ||     |    |     ||  |  ||   |   ||     |
|__|   |____||_____||_____||_____| \__,_||_____||_____|    |___,_||__|__||___|___||_____|
                                                                                         

Enter a Number : 666
666 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 777
777 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 555
555 FizzBuzz
Do you want to continue playing the game : (y/n)y
Enter a Number : 1
1
Do you want to continue playing the game : (y/n)y
Enter a Number : 789
789 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 25
25 Buzz
Do you want to continue playing the game : (y/n)n
Congratulations, your score is

FizzBuzz:1
Fizz:3
Buzz:1

&lt;/pre&gt;

=Crowd Computing: Just Estimate=
==Wisdom of Crowds==
The concept of ’Wisdom of Crowds’ was proposed by Francis Galton. A weight-judging competition was carried on at the annual show of the West of England Fat Stock and Poultry Exhibition recently held at Plymouth, A fat ox having been selected, competitors bought stamped and numbered cards, each, on which to inscribe their respective names, addresses, and estimates of what the ox would weigh after it had been slaughtered. Those who guessed most successfully received prizes. About 8oo tickets were issued to the par- ticipants. The middlemost estimate of all the estimates recorded was 1207 lbs and the actual weight of the ox was 1198 lbs.

==Our Experiment==
The crowd had to guess the number of candies/gems in a jar. Around 75 people participated in the experiment. The actual number of gems in the jar were 375. The median of all estimates came out to be 300 and the mean of all the estimates came out to be around 396. Median underestimated and mean overestimated the actual value. So according to recent studies, Trimmed mean must be used as an aggregate measure to estimate where Wisdom of Crowds is involved.
[[File:Gemsjar.jpg|center|200px|caption]]

===Trimmed Mean===
In these kinds of experiments, 10% trimmed mean is usually followed. For calculating 10% trimmed mean, remove 10% smallest and 10% largest values from the sample. Calculate the mean of the sample obtained. In the above experiment, the trimmed mean came out to be around 351 which is very close to the actual value.

==Implementation==
Here, we try to demonstrate the concept of trimmed mean through crowd computing.
 Input a list of estimates done by the crowd .
 Sort the list.
 Remove the 10% smallest values.
 Remove the 10% largest values.
 Calculate the mean of the new list obtained .&lt;hr&gt;

==Data of Experiment==       
    Estimates =[1000,1010,1786,2000,1500,1500,100,120,150,150,150,170,175,180,197,200,200,200,200,200,200,220,220,220,220,234,250,250,250,250,250,250,250,250,250,263,270,275,275,286,300,
                300,300,300,300,300,300,300,320,350,350,350,400, 400,400,400,400,450,467,500,500,500,500,500,500,500,550,550,600,600,600,650,700,700,720]

    '''CODE:'''
&lt;pre&gt;
Estimates = [1000,1010,1786,2000,1500,1500,100,120,150,150,150,170,175,180,197,200,200,200,200,200,200,220,220,220,220,234,250,250,250,250,250,250,250,250,250,263,270,275,275,286,300,                300,300,300,300,300,300,300,320,350,350,350,400,400,400,400,400,450,467,500,500,500,500,500,500,500,550,550,600,600,600,650,700,700,720]
Estimates.sort()
offset = int(0.10*len(Estimates))
for i in range(offset):
       del Estimates[0]
       del Estimates[-1]
Sum = 0    
for i in range(len(Estimates)):
       Sum += Estimates[i]
Mean_Value = Sum/len(Estimates)
print(&quot;Mean : &quot;, int(Mean_Value))
#Output:
Mean :  351
&lt;/pre&gt;
&lt;hr&gt;
==Trimmed Mean for the above example== 
&lt;h3&gt;Using scipy library&lt;/h3&gt;
&lt;pre&gt;
#import scipy to use the method of trim_mean
from scipy import stats
trimMean = stats.trim_mean(Estimates, 0.1) # Trim 10% at both ends
print(&quot;Trimmed Mean : &quot;,trimMean)
#Output:
Trimmed Mean :  335.1020408163265
&lt;/pre&gt;

&lt;h3&gt;Without using scipy library&lt;/h3&gt;
&lt;pre&gt;
#Trimmed mean with 10%
p=10/100
#sorted data
data=[2, 4, 6, 7, 11, 21, 81, 90, 105, 121]
n = len(data)
#Remove elements from both end
rem=int(n*p)
newData = data[rem:-rem]
mean = 0
for i in newData:
    mean += i
mean = int(mean/len(newData))
print(&quot;Trimmed mean : &quot;,mean)
#Output: Trimmed mean :  40
&lt;/pre&gt;
[[#Top]]

=Jumbled_Words Permutations: Jumbled Words=
==What are Permutations ?==
A permutation also called ordering of selected number of elements from a list denoted by nPr here we are choosing all elements of a list and so n=r&lt;br&gt;
nPr=n!/(n-r)!&lt;br&gt; as n=r
nPn=n!&lt;br&gt; which gives all possible arrangement of elements present in a list.

 For example, permutations of list [1,2,3] are [1,2,3], [1,3,2], [2,1,3], [2,3,1], 
[3,1,2], and [3,2,1]. 
The number of permutations of a list of elements nPn is given by n!. For example, there are 2! = 2 x 1 = 2 permutations of [1,2], namely [1,2] and [2,1], and 3! = 3 x 2 x 1 = 6 permutations of [1,2,3], as mentioned above.&lt;br/&gt;
[[File:Permutations.jpg]]

==Implementation==
Here, we try to demonstrate the concept of permutations through jumbled words. It is a two player game in which one person presents the other person a different permutation of the word in his mind. The other person has to guess the right word. If he guesses, the he wins otherwise he loses.
 Input an list of words.
 Randomly pick a word from the list of words .
 Shuffle this word and present it to the other player.
 if word guesses by the player is same as the one picked from list of w
     player wins
 else
     player loses

ALTERNATE CODE TO GENERATE THIS GAME:
&lt;pre&gt;
import random
p1=input(&quot;enter player 1 name:&quot;)
p2=input(&quot;enter player 2 name:&quot;)
l=[&quot;rainbow&quot;,&quot;computer&quot;,&quot;robot&quot;,&quot;butter&quot;,&quot;vegetable&quot;,&quot;science&quot;,&quot;correct&quot;]
c1=c2=a1=a2=f1=f2=0
k=1
i=3
def play():
    n=random.choice(l)        ##n=chooses a word from list l
    l1=[]
    for j in n:
       l1.append(j)      ##creates a list for word in n
    for t in range(len(l1)):
       p=random.choice(l1)     ##this randomly displays letters in the list
       print(p)
       l1.remove(p)          ##to avoid the repetition of a letter
    s=input(&quot;enter the word:&quot;)
    if(s==n):
        print(&quot;correct&quot;)
        return 1
    else:
        print(&quot;not correct&quot;)
        print(&quot;answer is&quot;,n)
        return 0
def stat():
     print(&quot;player 1:&quot;)
     print(&quot;score:&quot;,c1)
     print(&quot;answered:&quot;,a1)
     print(&quot;failed:&quot;,f1)
     print(&quot;.............&quot;)
     print(&quot;player 2:&quot;)
     print(&quot;score:&quot;,c2)
     print(&quot;answered:&quot;,a2)
     print(&quot;failed&quot;,f2)
     if(c1&gt;c2):
         print(p1,&quot; won over &quot;,p2)
     elif(c1==c2):
         print(&quot;draw game&quot;)
     else:
         print(p2,&quot; won over &quot;,p1) 
while(i!=4):
      if(i==3):
         if(k==1):
             print(&quot;player 1 turn&quot;)
             print(&quot;your jumbled word is:&quot;)
             k=k+1
             m=play()
             if(m==1):      ##if guessed answer is correct,then score and no.of answered count will be increased
                c1+=1
                a1+=1
             else:
                f1+=1       ##else count of no.of failed to answered will be incremented
         else:
             print(&quot;player 2 turn&quot;)
             print(&quot;your jumbled word is:&quot;)
             k=k-1
             m=play()
             if(m==1):
                c2=c2+1
                a2=a2+1
             else:
                f2=f2+1
       if(i==2):
             print(&quot;present status&quot;)
             stat()
       i=int(input(&quot;enter your choice  1.stop 2.status 3.continue&quot;))
       if(i==1):
             stat()
             i=i+3
&lt;/pre&gt;
&lt;hr&gt;
=== JumbledWord Simple Logic, In Short ===
[[File:jumbledWord.gif]]
&lt;hr&gt;
'''Logic to create a Jumbled Word'''
&lt;hr&gt;
&lt;pre&gt;
#Get Jumbled Word and print it Horizontally
import random

def getJumbledWord(b):
    jumble=''
    l1 = [ b[i] for i in range(0, len(b)) ]
    for t in range(len(l1)):
       p=random.choice(l1)     ##this randomly gets letters from the list      
       jumble=jumble+p       
       l1.remove(p)
    return jumble

b=input(&quot;Enter a word to make it jumbled : &quot;)
print(&quot;Jumbled Word : &quot;, getJumbledWord(b))
&lt;/pre&gt;
&lt;hr&gt;
'''Another Logic to create a Jumbled Word'''
&lt;hr&gt;
&lt;pre&gt;
b=input(&quot;Enter a word to make it jumbled : &quot;)

def getJumbledWord1(b):
    l1 = [ b[i] for i in range(0, len(b)) ]
    random.shuffle(l1)
    str1 = ''.join(l1)
    return str1

print(&quot;Jumbled Word : &quot;, getJumbledWord1(b))
&lt;/pre&gt;

====Sample Output:====
&lt;pre&gt;
---- Output1 
Enter a word to make it jumbled : butter
Jumbled Word :  tbture

---- Output2 
Enter a word to make it jumbled : petriotism
Jumbled Word :  pittrosime
&lt;/pre&gt;

=Theory of Evolution=

== What is Evolution ? ==
Evolution is the change in heritable characteristics over successive generations. The theory of evolution explains that DNA, which acts as a carrier of genetic information from one generation to other, tends to change or mutate occasionally. These changes are reflected in next generations to come. This is how life has evolved on earth from bacteria to human beings.&lt;br&gt;
[[File:Evolution.png|500px]]

== Implementation ==
&lt;pre&gt;An array representing DNA is stored in a file. As genes are forms of DNA, they contain information to be transferred to forthcoming generations. Assume that information is in the form of bits (in the form of 0s and 1s). A number is picked randomly from 1 to the size of the array. A new parameter has been introduced which decides whether mutation would occur or not. If the value of this new parameter is 1 (It is picked randomly from 1 to 100), then only change is reflected down the generations, otherwise it is not. The pseudo code is as follows :
Input an array containing genetic information .
Randomly generate a number (say m) from 1 to length of the array. Randomly generate other number (say p) from 1 to 100.
 
    if p is equal to 1 then 
        if m is 1 then
          set it to 0
        else
          set it to 1
&lt;/pre&gt;
[[#TOP]]</text>
      <sha1>t23bhbvaab96rk2kzmgnr2uxnb89sve</sha1>
    </revision>
    <revision>
      <id>3508</id>
      <parentid>3494</parentid>
      <timestamp>2018-09-28T00:39:05Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* Repeatation of a list */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="28633">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_3 Contributors of this page]
*Week 3 Playlist: https://www.youtube.com/playlist?list=PLc_j0TNIaWxOVx_z9jAM2UB3RqYNXaoEo
=List=
List is a flexible data structure used for storing a group of data separated by comma. The elements in a list need not be of the same data type.

'''Example:'''
       List_1 = [ 1, 2,3] or 
       List_1 = [&quot;coffee&quot;, &quot;Tea&quot;, &quot;Milk&quot;] or
       List_1 = [1,&quot;coffee&quot;, &quot;Tea&quot;, 3, &quot;5&quot;]

==List Creation==
&lt;pre&gt;a) A list can be created by simply putting values (separated by comma) between square brackets as given below,
       List_1 = [1,&quot;coffee&quot;, &quot;Tea&quot;, 3, &quot;5&quot;] #this creates a list by name List_1 containing following items


Or,
(b)A List can be created from scratch and elements can be added 
        List_2 = [ ]
        List_2.append(&quot;Kala&quot;)
        List_2.append(&quot;Mala&quot;)
Here we use &quot;append&quot; ,which is a function in python that enable us to append or attach an element to a list .
Thus List_2 will now hold [&quot;Kala&quot;,&quot;Mala&quot;]
&lt;/pre&gt;
[[#TOP]]

==Operations and Methods to work with List==
&lt;pre&gt;
a = [25,30,50,90,12,13]
b = [100,300,500,200,250]
&lt;/pre&gt;
&lt;hr&gt;
&lt;table border=2&gt;
  &lt;tr&gt;
    &lt;th&gt;&lt;b&gt;Method/&lt;br&gt;Operator&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Function&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Syntax&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Output&lt;/b&gt;&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;len()&lt;/td&gt;
    &lt;td&gt;Find length of a list&lt;/td&gt;
    &lt;td&gt;len(a)&lt;/td&gt;
    &lt;td&gt;6&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;max()&lt;/td&gt;
    &lt;td&gt;Find maximum element from the list&lt;/td&gt;
    &lt;td&gt;max(a)&lt;/td&gt;
    &lt;td&gt;90&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;min()&lt;/td&gt;
    &lt;td&gt;Find minimum element from the list&lt;/td&gt;
    &lt;td&gt;min(a)&lt;/td&gt;
    &lt;td&gt;12&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sum()&lt;/td&gt;
    &lt;td&gt;Returns sum of all elements of the list&lt;/td&gt;
    &lt;td&gt;sum(a)&lt;/td&gt;
    &lt;td&gt;220&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;reverse()&lt;/td&gt;
    &lt;td&gt;Reverses the original list&lt;/td&gt;
    &lt;td&gt;a.reverse()&lt;/td&gt;
    &lt;td&gt;[13, 12, 90, 50, 30, 25]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sort()&lt;/td&gt;
    &lt;td&gt;Sorts the original list in ascending order&lt;/td&gt;
    &lt;td&gt;a.sort()&lt;/td&gt;
    &lt;td&gt;[12, 13, 25, 30, 50, 90]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sorted()&lt;/td&gt;
    &lt;td&gt;Returns the new sorted list &lt;/td&gt;
    &lt;td&gt;sorted(a)&lt;/td&gt;
    &lt;td&gt;[12, 13, 25, 30, 50, 90]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;insert()&lt;/td&gt;
    &lt;td&gt;Insert at a particular index in the list, and shifts remaining elements&lt;/td&gt;
    &lt;td&gt;a.insert(3,3)&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 3, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;append()&lt;/td&gt;
    &lt;td&gt;Adds elements/object to the end of the list&lt;/td&gt;
    &lt;td&gt;a.append(5)&lt;br&gt;a.append([10,20])&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 5]&lt;br&gt;[25, 30, 50, 90, 12, 13, [10, 20]]&lt;br&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;extend()&lt;/td&gt;
    &lt;td&gt;Adds object to the end of the list as elements not as object&lt;/td&gt;
    &lt;td&gt;a.extend([10,20])&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 10, 20]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;*&amp;nbsp;&amp;nbsp;Repeatation&lt;br&gt;operator&lt;/td&gt;
    &lt;td&gt;Repeat the list for n times and returns a new list&lt;/td&gt;
    &lt;td&gt;a*2&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 25, 30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;+ Concatenation&lt;br&gt;operator&lt;/td&gt;
    &lt;td&gt;Concatenates two lists, and returns a new list&lt;/td&gt;
    &lt;td&gt;a+b&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 100, 300, 500, 200, 250]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;index()&lt;/td&gt;
    &lt;td&gt;Finds index of a particular element in the list or not&lt;/td&gt;
    &lt;td&gt;a.index(25)&lt;br&gt;a.index(0)&lt;br&gt;&lt;/td&gt;
    &lt;td&gt;0&lt;br&gt;&lt;br&gt;ValueError: 0 is not in list&lt;br&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;in operator&lt;/td&gt;
    &lt;td&gt;Finds whether a particular element is in the list or not, returns boolean&lt;/td&gt;
    &lt;td&gt;25 in a&lt;/td&gt;
    &lt;td&gt;True&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;not in operator&lt;/td&gt;
    &lt;td&gt;Checks if element is not available in list, returns boolean&lt;/td&gt;
    &lt;td&gt;25 not in a&lt;/td&gt;
    &lt;td&gt;False&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;count()&lt;/td&gt;
    &lt;td&gt;Counts the number of occurence of an element in the list&lt;/td&gt;
    &lt;td&gt;a.count(25)&lt;/td&gt;
    &lt;td&gt;1&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;remove()&lt;/td&gt;
    &lt;td&gt;Removes an element from the list&lt;/td&gt;
    &lt;td&gt;a.remove(25)&lt;/td&gt;
    &lt;td&gt; [30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;pop()&lt;/td&gt;
    &lt;td&gt;Delete and return item at index 0&lt;/td&gt;
    &lt;td&gt;a.pop(0)&lt;/td&gt;
    &lt;td&gt;25 , a will be [30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;del&lt;/td&gt;
    &lt;td&gt;Deletes item at a particular index from the list&lt;/td&gt;
    &lt;td&gt;del a[0]&lt;/td&gt;
    &lt;td&gt;[30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;

==Printing the List==
=== Print whole list ===
A list can be printed simply or using a ''for / while'' loop 

 print(List_2)     # To print the entire list
This code will print      
 ['Kala','Mala']     

===Print element at a particular index===
&lt;pre&gt;
Using index position
    List_2[0]     # prints 'Kala' ,i.e,the value at index position 0.
    List_2[1]     # prints 'Mala'.
&lt;/pre&gt;
=== Without using index position ===
&lt;pre&gt;
for item in List_2:   # here item is a variable used to access elements in list.
       print(item)
   This code snippet prints 
    Kala
    Mala
&lt;/pre&gt;
[[#TOP]]

==Search for a particular element in list==
Elements in a list can be searched by one of the two ways:
=== using index() function===
&lt;pre&gt;
ages1 = [11,23,12,23,45]

#if element is available in the list, index() returns the index value on which, the element is present.
print(ages1.index(45))#Output: 4

#if element is not available in the list, index() returns ''ValueError''
print(ages1.index(0))#Output: ValueError:
&lt;/pre&gt;

In programming, if such error occurs, program gets terminated. It can be solved using exception handling.
e.g.
&lt;pre&gt;
ages1 = [11,23,12,23,45]

try:
    print(ages1.index(0))
except ValueError:
    print(&quot;Exception has occured&quot;)    
    print(&quot;Element is not found in the list&quot;)

&lt;/pre&gt;
&lt;pre&gt;
'''Output: 
Exception has occured
Element is not found in the list
'''&lt;/pre&gt;
[[#TOP]]

=== using 'in' operator===
''in'' operator is used to check whether a particular element is available in the list or not.e.g.

&lt;pre&gt;
ages1 = [11,23,12,23,45]
no=11

if no in ages1:
    print(&quot;no is there in the list&quot;)
else:    
    print(&quot;no is NOT there in the list&quot;)
&lt;/pre&gt;
&lt;pre&gt;
#Output: no is there in the list
&lt;/pre&gt;

'''Number is not there in the list'''
&lt;pre&gt;
ages1 = [11,23,12,23,45]
no=15

if no in ages1:
    print(&quot;no is there in the list&quot;)
else:    
    print(&quot;no is NOT there in the list&quot;)
&lt;/pre&gt;
&lt;pre&gt;
Output: no is NOT there in the list
&lt;/pre&gt;
[[#TOP]]

==Updating the List==
The lists can be updated using ''append'' or ''insert'' function.  Append adds the element to the end of the list and Insert adds the element in the specified position.
   List_2.append(&quot;Sheela&quot;)    # add the element 'Sheela' to the end of the list.
   print (List_2) will output 
   ['Kala', 'Mala', 'Sheela']
   
   List_2.insert(1,&quot;Bala&quot;)    # add the element &quot;Bala&quot; in the list at the index 1.
   print (List_2) will output 
   ['Kala', 'Bala','Mala', 'Sheela']

=== Extend the list by adding elements of other list at end using extend()===
&lt;pre&gt;
ages = [11,23,12,23,45]
ages.extend([57,58])
print(ages)
&lt;/pre&gt;

&lt;pre&gt;
#Output: [11, 23, 12, 23, 45, 57, 58]
&lt;/pre&gt;

==== Difference between ''append and extend'' ====
Difference between append and extend can be easily understood, by the following example.

&lt;pre&gt;
appendlist = [11,23,12,23,45]
appendlist.append([57,58])

extendlist= [11,23,12,23,45]
extendlist.extend([57,58])
&lt;/pre&gt;

&lt;pre&gt;
'''Output:
[11, 23, 12, 23, 45, [57, 58]]
[11, 23, 12, 23, 45, 57, 58]'''
&lt;/pre&gt;
[[#TOP]]

==Basic Operations on List==
===Frequency of Occurrence===
list.count(object) will return the number of times the object occur in the list.
  '''Example'''
    ages = [11,23,12,23,45,43,22,24,23]
    ages.count(23) will return
    3
    ages.count(100) will return
    0

===Length of the List===
len(list) will return the length of the list ie. the number of objects in the list.
  '''Example'''
    ages = [11,23,12,23,45,43,22,24,23]
    len(ages) will output
    9
To print the objects in the list either use ''for item in list'' or ''for index in range(len(list))''
    for item in ages:       
        print (item)  
        (OR)
    for index in range(len(ages)) :
        print (ages[index])
===Sort the List===
list.sort() will sort the list in ascending order
  '''Example'''
    ages = [11,23,12,23,45,43,22,24,23]
    ages.sort() 
    print (ages) 
    [11, 12, 22, 23, 23, 23, 24, 43, 45]

[[#TOP]]

===Sort the List using sorted() function===
sorted(list1) will sort the list and return a new list, it doesn't modify the original list
&lt;br&gt;'''Example: Sort in ascending order'''
&lt;pre&gt;
ages = [11,23,12,23,45,43,22,24,23]
newList=sorted(ages)
print(newList)

#Output: [11, 12, 22, 23, 23, 23, 24, 43, 45]
&lt;/pre&gt;

&lt;br&gt;'''Example: Sort in descending order'''
&lt;pre&gt;
ages = [11,23,12,23,45,43,22,24,23]
newList=sorted(ages,reverse=True)
print(newList)

#Output: [45, 43, 24, 23, 23, 23, 22, 12, 11]
&lt;/pre&gt;

===Reverse the List===
list.reverse() will reverse the original list
  '''Example'''
    ages = [11, 12, 22, 23, 23, 23, 24, 43, 45]
    ages.reverse()
    print (ages)
    [45, 43, 24, 23, 23, 23, 22, 12, 11]

Both sort() and reverse() list operation will work on numeric and alphanumeric data list.

A special use of the reverse() function is to descend a list that is sorted in ascending order.

  '''Example'''
&lt;pre&gt;
ages = [11, 12, 22, 23, 23, 23, 24, 43, 45]
ages.sort()
print(ages)
ages.reverse()
print(ages)
&lt;/pre&gt;

===Slicing===
Used to retrieve an object or objects in a range as a list  
  '''Example'''
Use ''list[index]'' to retrieve the object at the given index
         In [1]: student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
         In [2]: student[3]     #Object at index 3.  Remember index starts at 0
         Out[2]: 'Geetha'      


Use ''list[start_index : end_index + 1]'' to retrieve objects from the start_index to end_index 
         In [3]: student[2:4]     # Objects from index 2 to 3 as List. Note the [ and ]
         Out[3]: ['Vijay', 'Geetha']   


Use ''list[:]'' to retrieve objects from the starting of the list to the end of the list. 
The default start value will be the starting index of the list (i.e. 0) and the default end value
will be the length of the list 
         In [4]: student[:]        # prints the entire list
         Out[4]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma', 'Janani']


         In [5]: student[:5]       # prints the objects from the start of the list upto object at index 4
         Out[5]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran']


         In [6]: student[2:]       # prints the objects from index 2 upto the end of the list
         Out[6]: ['Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma', 'Janani']


Negative index too is available in Python. It starts from last element of the list. i.e.

         In [7]:student[-1]        #prints last index of list
         Out[7]: 'Janani'


         In [8]:student[-1:-8]     #prints empty list
         Out[8]: []


         In [9]:student[-8:-1]     #prints -8th index to -1st index elements
         Out[9]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma']

[[#TOP]]
===Removing Item from list ===
----

Is used to remove a specific item from the list.

'''Example:'''
 
Use list.remove(entry/value)  Or   del list[index]    Or list.pop(index)
         student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
         student.remove(&quot;Arun&quot;)   #This will delete item &quot;Arun&quot;
         Or    
         del student[0]           # This will delete item at index 0
         Or
         student.pop(0)         # This will delete and return item at index 0


         print(student)    
         Output: [&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]

[[#TOP]]
===Delete list ===
----
Used to delete complete list

'''Example'''

Use del &lt;list name&gt;
         student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
         del student

===Concatenation of two lists===
----
''+'' is the concatenation operator which is used concatenate two lists. 
&lt;pre&gt;
ages1 = [11,23,12,23,45]
ages2 = [25, 24, 43, 47]
age=ages1+ages2
print(age)
#Output: [11, 23, 12, 23, 45, 25, 24, 43, 47]
&lt;/pre&gt;

===Repeatation of a list ===
----
''*'' is the operator to repeat a particular list.
&lt;pre&gt;
ages1 = [11,23,12,23,45]
age=ages1*5 #ages1 list is repeated 5 times and stroed in ''age'' list
print(age)

#Output: [11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45]
&lt;/pre&gt;

=== all and any for List===
&lt;pre&gt;
lsit=[True, True, True, True]
print(all(lsit))#Output: True
print(any(lsit))#Output: True

lsit1=[True, False, True, True]
print(all(lsit1))#Output: False
print(any(lsit1))#Output: True

lsit2=[False,False,False]
print(all(lsit2))#Output: False
print(any(lsit2))#Output: False

lsit3=[]
print(all(lsit3))#Output: True
print(any(lsit3))#Output: False
&lt;/pre&gt;

====Conditional Statements====
&lt;pre&gt;Conditionals are used to check the condition and change the flow of the program 
accordingly. They are realized in programming languages through if statement. The 
syntax is as follows :
         if condition : 
            statement
    '''Note:''' Do not forget indentation (inserting space/tab) in the line after the
 if condition.
    
    In case you want to execute a set of statements when a condition is true and another

set of statement when the condition is false.
         if condition : 
            statement 1
         else :
            statement 2
    
    Multiple if-else statements can be written as follows:
         if condition_1 : 
            statement 1
         elif condition_2 : # 'elif' is short for 'else if'
            statement 2
         elif condition_3 :
            statement 3
        .
        .
         else :
            final statement
&lt;/pre&gt;
[[#TOP]]

=Loops and Conditionals : Fizzbuzz=
====Loops====
&lt;pre&gt;
Loops are used to execute a set of repetitive statements. They are realized
through 'while' and 'for' loops in programming languages. The syntax of 'for' loop is 
as follows :
        for LOOPVARIABLE in SEQUENCE: 
            STATEMENTS
    '''e.g.''' to print all the data from a list we can write:
        for item in list_name
            print(item)
    OR
        for index in range(len(list_name))
            print(list_name[index])
    
    The syntax for while loop is as follows :
    
        while BOOLEANEXPRESSION: 
            STATEMENTS
            INCREMENT/DECREMENT
    
    '''e.g.''' if we want to print all numbers from 1 to 10
        i=1
        while i&lt;=10 :
            print(i,&quot; &quot;)
            i=i+1
    
    'while' loop has indefinite iteration (run-time unknown). So, there must be loop
 break statement in it.
 Whereas 'for' loop is definite in nature (i.e. known or predictable span).&lt;br&gt;

&lt;b&gt;NOTE: Python doesn't have anything like do-while loop.&lt;/b&gt;
&lt;/pre&gt;
[[#TOP]]

==Implementation==
Here, we try to demonstrate the concept of loops and conditionals through a game called Fizzbuzz. The rules are as follows :&lt;br/&gt;
[[File:fizzBuzz.gif]]

• if input number is a multiple of ’3’ print ”Fizz”
&lt;br/&gt;
• if input number is a multiple of ’5’ print ”Buzz”
&lt;br/&gt;
• if input number is a multiple of both '3' and ’5’ print ”FizzBuzz”
&lt;br/&gt;
The pseudo code is as follows :
&lt;pre&gt;
   If input no % 3 == 0 and  input no % 5 == 0 : 
       print ”Fizzbuzz”
   else if input no % 3 == 0 : 
       print ”Fizz”
   else if input no % 5 == 0 : 
       print ”Buzz”
   else :
       print the input no
&lt;/pre&gt;
The order of statements execution matters to get the desired output. The highest priority condition should be first followed by other. In fizzbuzz programming, first checking should be done for both divisibility of 3 and 5. If condition not satisfied only then it should check individually for 3 or 5. So carefully choosing the order is crucial for better programming.
Note: There is some effect of present condition statements chosen on next conditions statements. That is why in first attempt fizzbuzz programming got struck.

Example: 
&lt;pre&gt;
#Code to achieve the above requirement in python3.
i = int(input(&quot;Enter the number&quot;)) 
if i%3 == 0 and i%5 == 0: print(i,&quot;FizzBuzz&quot;)  
elif i%5 == 0: print(i,&quot;Buzz&quot;)
elif i%3 == 0: print(i,&quot;Fizz&quot;)
else: print(i)
&lt;/pre&gt;
Lets put the same into a loop for a range given by the user.
&lt;pre&gt;
def fizzbuzzgame(start,stop):
    for i in range(start,stop+1):
        if i%3 == 0 and i%5 == 0:
            print(i,&quot;FizzBuzz&quot;)
        elif i%5 == 0:
            print(i,&quot;Buzz&quot;)
        elif i%3 == 0:
            print(i,&quot;Fizz&quot;)
        else: print(i)

fizzbuzzgame(50,100)
&lt;/pre&gt;


=== Fizz Buzz game in Interactive mode with Score ===
'''By Ms. Ami Tusharkant Choksi'''
&lt;pre&gt;
def fizzbuzzgame(i):
        if i%3 == 0 and i%5 == 0:
            print(i,&quot;FizzBuzz&quot;)
            return(&quot;fzbz&quot;)
        elif i%5 == 0:
            print(i,&quot;Buzz&quot;)
            return(&quot;bz&quot;)
        elif i%3 == 0:
            print(i,&quot;Fizz&quot;)
            return(&quot;fz&quot;)
        else:
            print(i)
            return(&quot;no&quot;)

ch = 'y'
fizzbuzz=0
fizz=0
buzz=0
nothing=0
print(&quot;&quot;&quot;
 _____  ____  _____  _____  ____   __ __  _____  _____       ____   ____  ___ ___    ___ 
|     ||    ||     ||     ||    \ |  |  ||     ||     |     /    | /    ||   |   |  /  _]
|   __| |  | |__/  ||__/  ||  o  )|  |  ||__/  ||__/  |    |   __||  o  || _   _ | /  [_ 
|  |_   |  | |   __||   __||     ||  |  ||   __||   __|    |  |  ||     ||  \_/  ||    _]
|   _]  |  | |  /  ||  /  ||  O  ||  :  ||  /  ||  /  |    |  |_ ||  _  ||   |   ||   [_ 
|  |    |  | |     ||     ||     ||     ||     ||     |    |     ||  |  ||   |   ||     |
|__|   |____||_____||_____||_____| \__,_||_____||_____|    |___,_||__|__||___|___||_____|
                                                                                         
&quot;&quot;&quot;)   

while(ch == 'y'):
    n=int(input(&quot;Enter a Number : &quot;))
    winLoose=fizzbuzzgame(n)
    if(winLoose == &quot;fz&quot;):
        fizz+=1
    elif(winLoose == &quot;bz&quot;):
        buzz+=1
    elif(winLoose == &quot;fzbz&quot;):
        fizzbuzz+=1
    ch=input(&quot;Do you want to continue playing the game : (y/n)&quot;)
    if(ch=='n'):
        print('Congratulations, your score is\n FizzBuzz:%d\nFizz:%d\nBuzz:%d' %
(fizzbuzz,fizz,buzz))
    
'''Sample Output:

 _____  ____  _____  _____  ____   __ __  _____  _____       ____   ____  ___ ___    ___ 
|     ||    ||     ||     ||    \ |  |  ||     ||     |     /    | /    ||   |   |  /  _]
|   __| |  | |__/  ||__/  ||  o  )|  |  ||__/  ||__/  |    |   __||  o  || _   _ | /  [_ 
|  |_   |  | |   __||   __||     ||  |  ||   __||   __|    |  |  ||     ||  \_/  ||    _]
|   _]  |  | |  /  ||  /  ||  O  ||  :  ||  /  ||  /  |    |  |_ ||  _  ||   |   ||   [_ 
|  |    |  | |     ||     ||     ||     ||     ||     |    |     ||  |  ||   |   ||     |
|__|   |____||_____||_____||_____| \__,_||_____||_____|    |___,_||__|__||___|___||_____|
                                                                                         

Enter a Number : 666
666 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 777
777 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 555
555 FizzBuzz
Do you want to continue playing the game : (y/n)y
Enter a Number : 1
1
Do you want to continue playing the game : (y/n)y
Enter a Number : 789
789 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 25
25 Buzz
Do you want to continue playing the game : (y/n)n
Congratulations, your score is

FizzBuzz:1
Fizz:3
Buzz:1

&lt;/pre&gt;

=Crowd Computing: Just Estimate=
==Wisdom of Crowds==
The concept of ’Wisdom of Crowds’ was proposed by Francis Galton. A weight-judging competition was carried on at the annual show of the West of England Fat Stock and Poultry Exhibition recently held at Plymouth, A fat ox having been selected, competitors bought stamped and numbered cards, each, on which to inscribe their respective names, addresses, and estimates of what the ox would weigh after it had been slaughtered. Those who guessed most successfully received prizes. About 8oo tickets were issued to the par- ticipants. The middlemost estimate of all the estimates recorded was 1207 lbs and the actual weight of the ox was 1198 lbs.

==Our Experiment==
The crowd had to guess the number of candies/gems in a jar. Around 75 people participated in the experiment. The actual number of gems in the jar were 375. The median of all estimates came out to be 300 and the mean of all the estimates came out to be around 396. Median underestimated and mean overestimated the actual value. So according to recent studies, Trimmed mean must be used as an aggregate measure to estimate where Wisdom of Crowds is involved.
[[File:Gemsjar.jpg|center|200px|caption]]

===Trimmed Mean===
In these kinds of experiments, 10% trimmed mean is usually followed. For calculating 10% trimmed mean, remove 10% smallest and 10% largest values from the sample. Calculate the mean of the sample obtained. In the above experiment, the trimmed mean came out to be around 351 which is very close to the actual value.

==Implementation==
Here, we try to demonstrate the concept of trimmed mean through crowd computing.
 Input a list of estimates done by the crowd .
 Sort the list.
 Remove the 10% smallest values.
 Remove the 10% largest values.
 Calculate the mean of the new list obtained .&lt;hr&gt;

==Data of Experiment==       
    Estimates =[1000,1010,1786,2000,1500,1500,100,120,150,150,150,170,175,180,197,200,200,200,200,200,200,220,220,220,220,234,250,250,250,250,250,250,250,250,250,263,270,275,275,286,300,
                300,300,300,300,300,300,300,320,350,350,350,400, 400,400,400,400,450,467,500,500,500,500,500,500,500,550,550,600,600,600,650,700,700,720]

    '''CODE:'''
&lt;pre&gt;
Estimates = [1000,1010,1786,2000,1500,1500,100,120,150,150,150,170,175,180,197,200,200,200,200,200,200,220,220,220,220,234,250,250,250,250,250,250,250,250,250,263,270,275,275,286,300,                300,300,300,300,300,300,300,320,350,350,350,400,400,400,400,400,450,467,500,500,500,500,500,500,500,550,550,600,600,600,650,700,700,720]
Estimates.sort()
offset = int(0.10*len(Estimates))
for i in range(offset):
       del Estimates[0]
       del Estimates[-1]
Sum = 0    
for i in range(len(Estimates)):
       Sum += Estimates[i]
Mean_Value = Sum/len(Estimates)
print(&quot;Mean : &quot;, int(Mean_Value))
#Output:
Mean :  351
&lt;/pre&gt;
&lt;hr&gt;
==Trimmed Mean for the above example== 
&lt;h3&gt;Using scipy library&lt;/h3&gt;
&lt;pre&gt;
#import scipy to use the method of trim_mean
from scipy import stats
trimMean = stats.trim_mean(Estimates, 0.1) # Trim 10% at both ends
print(&quot;Trimmed Mean : &quot;,trimMean)
#Output:
Trimmed Mean :  335.1020408163265
&lt;/pre&gt;

&lt;h3&gt;Without using scipy library&lt;/h3&gt;
&lt;pre&gt;
#Trimmed mean with 10%
p=10/100
#sorted data
data=[2, 4, 6, 7, 11, 21, 81, 90, 105, 121]
n = len(data)
#Remove elements from both end
rem=int(n*p)
newData = data[rem:-rem]
mean = 0
for i in newData:
    mean += i
mean = int(mean/len(newData))
print(&quot;Trimmed mean : &quot;,mean)
#Output: Trimmed mean :  40
&lt;/pre&gt;
[[#Top]]

=Jumbled_Words Permutations: Jumbled Words=
==What are Permutations ?==
A permutation also called ordering of selected number of elements from a list denoted by nPr here we are choosing all elements of a list and so n=r&lt;br&gt;
nPr=n!/(n-r)!&lt;br&gt; as n=r
nPn=n!&lt;br&gt; which gives all possible arrangement of elements present in a list.

 For example, permutations of list [1,2,3] are [1,2,3], [1,3,2], [2,1,3], [2,3,1], 
[3,1,2], and [3,2,1]. 
The number of permutations of a list of elements nPn is given by n!. For example, there are 2! = 2 x 1 = 2 permutations of [1,2], namely [1,2] and [2,1], and 3! = 3 x 2 x 1 = 6 permutations of [1,2,3], as mentioned above.&lt;br/&gt;
[[File:Permutations.jpg]]

==Implementation==
Here, we try to demonstrate the concept of permutations through jumbled words. It is a two player game in which one person presents the other person a different permutation of the word in his mind. The other person has to guess the right word. If he guesses, the he wins otherwise he loses.
 Input an list of words.
 Randomly pick a word from the list of words .
 Shuffle this word and present it to the other player.
 if word guesses by the player is same as the one picked from list of w
     player wins
 else
     player loses

ALTERNATE CODE TO GENERATE THIS GAME:
&lt;pre&gt;
import random
p1=input(&quot;enter player 1 name:&quot;)
p2=input(&quot;enter player 2 name:&quot;)
l=[&quot;rainbow&quot;,&quot;computer&quot;,&quot;robot&quot;,&quot;butter&quot;,&quot;vegetable&quot;,&quot;science&quot;,&quot;correct&quot;]
c1=c2=a1=a2=f1=f2=0
k=1
i=3
def play():
    n=random.choice(l)        ##n=chooses a word from list l
    l1=[]
    for j in n:
       l1.append(j)      ##creates a list for word in n
    for t in range(len(l1)):
       p=random.choice(l1)     ##this randomly displays letters in the list
       print(p)
       l1.remove(p)          ##to avoid the repetition of a letter
    s=input(&quot;enter the word:&quot;)
    if(s==n):
        print(&quot;correct&quot;)
        return 1
    else:
        print(&quot;not correct&quot;)
        print(&quot;answer is&quot;,n)
        return 0
def stat():
     print(&quot;player 1:&quot;)
     print(&quot;score:&quot;,c1)
     print(&quot;answered:&quot;,a1)
     print(&quot;failed:&quot;,f1)
     print(&quot;.............&quot;)
     print(&quot;player 2:&quot;)
     print(&quot;score:&quot;,c2)
     print(&quot;answered:&quot;,a2)
     print(&quot;failed&quot;,f2)
     if(c1&gt;c2):
         print(p1,&quot; won over &quot;,p2)
     elif(c1==c2):
         print(&quot;draw game&quot;)
     else:
         print(p2,&quot; won over &quot;,p1) 
while(i!=4):
      if(i==3):
         if(k==1):
             print(&quot;player 1 turn&quot;)
             print(&quot;your jumbled word is:&quot;)
             k=k+1
             m=play()
             if(m==1):      ##if guessed answer is correct,then score and no.of answered count will be increased
                c1+=1
                a1+=1
             else:
                f1+=1       ##else count of no.of failed to answered will be incremented
         else:
             print(&quot;player 2 turn&quot;)
             print(&quot;your jumbled word is:&quot;)
             k=k-1
             m=play()
             if(m==1):
                c2=c2+1
                a2=a2+1
             else:
                f2=f2+1
       if(i==2):
             print(&quot;present status&quot;)
             stat()
       i=int(input(&quot;enter your choice  1.stop 2.status 3.continue&quot;))
       if(i==1):
             stat()
             i=i+3
&lt;/pre&gt;
&lt;hr&gt;
=== JumbledWord Simple Logic, In Short ===
[[File:jumbledWord.gif]]
&lt;hr&gt;
'''Logic to create a Jumbled Word'''
&lt;hr&gt;
&lt;pre&gt;
#Get Jumbled Word and print it Horizontally
import random

def getJumbledWord(b):
    jumble=''
    l1 = [ b[i] for i in range(0, len(b)) ]
    for t in range(len(l1)):
       p=random.choice(l1)     ##this randomly gets letters from the list      
       jumble=jumble+p       
       l1.remove(p)
    return jumble

b=input(&quot;Enter a word to make it jumbled : &quot;)
print(&quot;Jumbled Word : &quot;, getJumbledWord(b))
&lt;/pre&gt;
&lt;hr&gt;
'''Another Logic to create a Jumbled Word'''
&lt;hr&gt;
&lt;pre&gt;
b=input(&quot;Enter a word to make it jumbled : &quot;)

def getJumbledWord1(b):
    l1 = [ b[i] for i in range(0, len(b)) ]
    random.shuffle(l1)
    str1 = ''.join(l1)
    return str1

print(&quot;Jumbled Word : &quot;, getJumbledWord1(b))
&lt;/pre&gt;

====Sample Output:====
&lt;pre&gt;
---- Output1 
Enter a word to make it jumbled : butter
Jumbled Word :  tbture

---- Output2 
Enter a word to make it jumbled : petriotism
Jumbled Word :  pittrosime
&lt;/pre&gt;

=Theory of Evolution=

== What is Evolution ? ==
Evolution is the change in heritable characteristics over successive generations. The theory of evolution explains that DNA, which acts as a carrier of genetic information from one generation to other, tends to change or mutate occasionally. These changes are reflected in next generations to come. This is how life has evolved on earth from bacteria to human beings.&lt;br&gt;
[[File:Evolution.png|500px]]

== Implementation ==
&lt;pre&gt;An array representing DNA is stored in a file. As genes are forms of DNA, they contain information to be transferred to forthcoming generations. Assume that information is in the form of bits (in the form of 0s and 1s). A number is picked randomly from 1 to the size of the array. A new parameter has been introduced which decides whether mutation would occur or not. If the value of this new parameter is 1 (It is picked randomly from 1 to 100), then only change is reflected down the generations, otherwise it is not. The pseudo code is as follows :
Input an array containing genetic information .
Randomly generate a number (say m) from 1 to length of the array. Randomly generate other number (say p) from 1 to 100.
 
    if p is equal to 1 then 
        if m is 1 then
          set it to 0
        else
          set it to 1
&lt;/pre&gt;
[[#TOP]]</text>
      <sha1>1avucn0tgzm1cvvys5ly267eksh86on</sha1>
    </revision>
    <revision>
      <id>3509</id>
      <parentid>3508</parentid>
      <timestamp>2018-09-28T00:41:13Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* all and any for List */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="28834">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_3 Contributors of this page]
*Week 3 Playlist: https://www.youtube.com/playlist?list=PLc_j0TNIaWxOVx_z9jAM2UB3RqYNXaoEo
=List=
List is a flexible data structure used for storing a group of data separated by comma. The elements in a list need not be of the same data type.

'''Example:'''
       List_1 = [ 1, 2,3] or 
       List_1 = [&quot;coffee&quot;, &quot;Tea&quot;, &quot;Milk&quot;] or
       List_1 = [1,&quot;coffee&quot;, &quot;Tea&quot;, 3, &quot;5&quot;]

==List Creation==
&lt;pre&gt;a) A list can be created by simply putting values (separated by comma) between square brackets as given below,
       List_1 = [1,&quot;coffee&quot;, &quot;Tea&quot;, 3, &quot;5&quot;] #this creates a list by name List_1 containing following items


Or,
(b)A List can be created from scratch and elements can be added 
        List_2 = [ ]
        List_2.append(&quot;Kala&quot;)
        List_2.append(&quot;Mala&quot;)
Here we use &quot;append&quot; ,which is a function in python that enable us to append or attach an element to a list .
Thus List_2 will now hold [&quot;Kala&quot;,&quot;Mala&quot;]
&lt;/pre&gt;
[[#TOP]]

==Operations and Methods to work with List==
&lt;pre&gt;
a = [25,30,50,90,12,13]
b = [100,300,500,200,250]
&lt;/pre&gt;
&lt;hr&gt;
&lt;table border=2&gt;
  &lt;tr&gt;
    &lt;th&gt;&lt;b&gt;Method/&lt;br&gt;Operator&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Function&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Syntax&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Output&lt;/b&gt;&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;len()&lt;/td&gt;
    &lt;td&gt;Find length of a list&lt;/td&gt;
    &lt;td&gt;len(a)&lt;/td&gt;
    &lt;td&gt;6&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;max()&lt;/td&gt;
    &lt;td&gt;Find maximum element from the list&lt;/td&gt;
    &lt;td&gt;max(a)&lt;/td&gt;
    &lt;td&gt;90&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;min()&lt;/td&gt;
    &lt;td&gt;Find minimum element from the list&lt;/td&gt;
    &lt;td&gt;min(a)&lt;/td&gt;
    &lt;td&gt;12&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sum()&lt;/td&gt;
    &lt;td&gt;Returns sum of all elements of the list&lt;/td&gt;
    &lt;td&gt;sum(a)&lt;/td&gt;
    &lt;td&gt;220&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;reverse()&lt;/td&gt;
    &lt;td&gt;Reverses the original list&lt;/td&gt;
    &lt;td&gt;a.reverse()&lt;/td&gt;
    &lt;td&gt;[13, 12, 90, 50, 30, 25]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sort()&lt;/td&gt;
    &lt;td&gt;Sorts the original list in ascending order&lt;/td&gt;
    &lt;td&gt;a.sort()&lt;/td&gt;
    &lt;td&gt;[12, 13, 25, 30, 50, 90]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sorted()&lt;/td&gt;
    &lt;td&gt;Returns the new sorted list &lt;/td&gt;
    &lt;td&gt;sorted(a)&lt;/td&gt;
    &lt;td&gt;[12, 13, 25, 30, 50, 90]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;insert()&lt;/td&gt;
    &lt;td&gt;Insert at a particular index in the list, and shifts remaining elements&lt;/td&gt;
    &lt;td&gt;a.insert(3,3)&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 3, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;append()&lt;/td&gt;
    &lt;td&gt;Adds elements/object to the end of the list&lt;/td&gt;
    &lt;td&gt;a.append(5)&lt;br&gt;a.append([10,20])&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 5]&lt;br&gt;[25, 30, 50, 90, 12, 13, [10, 20]]&lt;br&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;extend()&lt;/td&gt;
    &lt;td&gt;Adds object to the end of the list as elements not as object&lt;/td&gt;
    &lt;td&gt;a.extend([10,20])&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 10, 20]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;*&amp;nbsp;&amp;nbsp;Repeatation&lt;br&gt;operator&lt;/td&gt;
    &lt;td&gt;Repeat the list for n times and returns a new list&lt;/td&gt;
    &lt;td&gt;a*2&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 25, 30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;+ Concatenation&lt;br&gt;operator&lt;/td&gt;
    &lt;td&gt;Concatenates two lists, and returns a new list&lt;/td&gt;
    &lt;td&gt;a+b&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 100, 300, 500, 200, 250]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;index()&lt;/td&gt;
    &lt;td&gt;Finds index of a particular element in the list or not&lt;/td&gt;
    &lt;td&gt;a.index(25)&lt;br&gt;a.index(0)&lt;br&gt;&lt;/td&gt;
    &lt;td&gt;0&lt;br&gt;&lt;br&gt;ValueError: 0 is not in list&lt;br&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;in operator&lt;/td&gt;
    &lt;td&gt;Finds whether a particular element is in the list or not, returns boolean&lt;/td&gt;
    &lt;td&gt;25 in a&lt;/td&gt;
    &lt;td&gt;True&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;not in operator&lt;/td&gt;
    &lt;td&gt;Checks if element is not available in list, returns boolean&lt;/td&gt;
    &lt;td&gt;25 not in a&lt;/td&gt;
    &lt;td&gt;False&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;count()&lt;/td&gt;
    &lt;td&gt;Counts the number of occurence of an element in the list&lt;/td&gt;
    &lt;td&gt;a.count(25)&lt;/td&gt;
    &lt;td&gt;1&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;remove()&lt;/td&gt;
    &lt;td&gt;Removes an element from the list&lt;/td&gt;
    &lt;td&gt;a.remove(25)&lt;/td&gt;
    &lt;td&gt; [30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;pop()&lt;/td&gt;
    &lt;td&gt;Delete and return item at index 0&lt;/td&gt;
    &lt;td&gt;a.pop(0)&lt;/td&gt;
    &lt;td&gt;25 , a will be [30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;del&lt;/td&gt;
    &lt;td&gt;Deletes item at a particular index from the list&lt;/td&gt;
    &lt;td&gt;del a[0]&lt;/td&gt;
    &lt;td&gt;[30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;

==Printing the List==
=== Print whole list ===
A list can be printed simply or using a ''for / while'' loop 

 print(List_2)     # To print the entire list
This code will print      
 ['Kala','Mala']     

===Print element at a particular index===
&lt;pre&gt;
Using index position
    List_2[0]     # prints 'Kala' ,i.e,the value at index position 0.
    List_2[1]     # prints 'Mala'.
&lt;/pre&gt;
=== Without using index position ===
&lt;pre&gt;
for item in List_2:   # here item is a variable used to access elements in list.
       print(item)
   This code snippet prints 
    Kala
    Mala
&lt;/pre&gt;
[[#TOP]]

==Search for a particular element in list==
Elements in a list can be searched by one of the two ways:
=== using index() function===
&lt;pre&gt;
ages1 = [11,23,12,23,45]

#if element is available in the list, index() returns the index value on which, the element is present.
print(ages1.index(45))#Output: 4

#if element is not available in the list, index() returns ''ValueError''
print(ages1.index(0))#Output: ValueError:
&lt;/pre&gt;

In programming, if such error occurs, program gets terminated. It can be solved using exception handling.
e.g.
&lt;pre&gt;
ages1 = [11,23,12,23,45]

try:
    print(ages1.index(0))
except ValueError:
    print(&quot;Exception has occured&quot;)    
    print(&quot;Element is not found in the list&quot;)

&lt;/pre&gt;
&lt;pre&gt;
'''Output: 
Exception has occured
Element is not found in the list
'''&lt;/pre&gt;
[[#TOP]]

=== using 'in' operator===
''in'' operator is used to check whether a particular element is available in the list or not.e.g.

&lt;pre&gt;
ages1 = [11,23,12,23,45]
no=11

if no in ages1:
    print(&quot;no is there in the list&quot;)
else:    
    print(&quot;no is NOT there in the list&quot;)
&lt;/pre&gt;
&lt;pre&gt;
#Output: no is there in the list
&lt;/pre&gt;

'''Number is not there in the list'''
&lt;pre&gt;
ages1 = [11,23,12,23,45]
no=15

if no in ages1:
    print(&quot;no is there in the list&quot;)
else:    
    print(&quot;no is NOT there in the list&quot;)
&lt;/pre&gt;
&lt;pre&gt;
Output: no is NOT there in the list
&lt;/pre&gt;
[[#TOP]]

==Updating the List==
The lists can be updated using ''append'' or ''insert'' function.  Append adds the element to the end of the list and Insert adds the element in the specified position.
   List_2.append(&quot;Sheela&quot;)    # add the element 'Sheela' to the end of the list.
   print (List_2) will output 
   ['Kala', 'Mala', 'Sheela']
   
   List_2.insert(1,&quot;Bala&quot;)    # add the element &quot;Bala&quot; in the list at the index 1.
   print (List_2) will output 
   ['Kala', 'Bala','Mala', 'Sheela']

=== Extend the list by adding elements of other list at end using extend()===
&lt;pre&gt;
ages = [11,23,12,23,45]
ages.extend([57,58])
print(ages)
&lt;/pre&gt;

&lt;pre&gt;
#Output: [11, 23, 12, 23, 45, 57, 58]
&lt;/pre&gt;

==== Difference between ''append and extend'' ====
Difference between append and extend can be easily understood, by the following example.

&lt;pre&gt;
appendlist = [11,23,12,23,45]
appendlist.append([57,58])

extendlist= [11,23,12,23,45]
extendlist.extend([57,58])
&lt;/pre&gt;

&lt;pre&gt;
'''Output:
[11, 23, 12, 23, 45, [57, 58]]
[11, 23, 12, 23, 45, 57, 58]'''
&lt;/pre&gt;
[[#TOP]]

==Basic Operations on List==
===Frequency of Occurrence===
list.count(object) will return the number of times the object occur in the list.
  '''Example'''
    ages = [11,23,12,23,45,43,22,24,23]
    ages.count(23) will return
    3
    ages.count(100) will return
    0

===Length of the List===
len(list) will return the length of the list ie. the number of objects in the list.
  '''Example'''
    ages = [11,23,12,23,45,43,22,24,23]
    len(ages) will output
    9
To print the objects in the list either use ''for item in list'' or ''for index in range(len(list))''
    for item in ages:       
        print (item)  
        (OR)
    for index in range(len(ages)) :
        print (ages[index])
===Sort the List===
list.sort() will sort the list in ascending order
  '''Example'''
    ages = [11,23,12,23,45,43,22,24,23]
    ages.sort() 
    print (ages) 
    [11, 12, 22, 23, 23, 23, 24, 43, 45]

[[#TOP]]

===Sort the List using sorted() function===
sorted(list1) will sort the list and return a new list, it doesn't modify the original list
&lt;br&gt;'''Example: Sort in ascending order'''
&lt;pre&gt;
ages = [11,23,12,23,45,43,22,24,23]
newList=sorted(ages)
print(newList)

#Output: [11, 12, 22, 23, 23, 23, 24, 43, 45]
&lt;/pre&gt;

&lt;br&gt;'''Example: Sort in descending order'''
&lt;pre&gt;
ages = [11,23,12,23,45,43,22,24,23]
newList=sorted(ages,reverse=True)
print(newList)

#Output: [45, 43, 24, 23, 23, 23, 22, 12, 11]
&lt;/pre&gt;

===Reverse the List===
list.reverse() will reverse the original list
  '''Example'''
    ages = [11, 12, 22, 23, 23, 23, 24, 43, 45]
    ages.reverse()
    print (ages)
    [45, 43, 24, 23, 23, 23, 22, 12, 11]

Both sort() and reverse() list operation will work on numeric and alphanumeric data list.

A special use of the reverse() function is to descend a list that is sorted in ascending order.

  '''Example'''
&lt;pre&gt;
ages = [11, 12, 22, 23, 23, 23, 24, 43, 45]
ages.sort()
print(ages)
ages.reverse()
print(ages)
&lt;/pre&gt;

===Slicing===
Used to retrieve an object or objects in a range as a list  
  '''Example'''
Use ''list[index]'' to retrieve the object at the given index
         In [1]: student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
         In [2]: student[3]     #Object at index 3.  Remember index starts at 0
         Out[2]: 'Geetha'      


Use ''list[start_index : end_index + 1]'' to retrieve objects from the start_index to end_index 
         In [3]: student[2:4]     # Objects from index 2 to 3 as List. Note the [ and ]
         Out[3]: ['Vijay', 'Geetha']   


Use ''list[:]'' to retrieve objects from the starting of the list to the end of the list. 
The default start value will be the starting index of the list (i.e. 0) and the default end value
will be the length of the list 
         In [4]: student[:]        # prints the entire list
         Out[4]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma', 'Janani']


         In [5]: student[:5]       # prints the objects from the start of the list upto object at index 4
         Out[5]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran']


         In [6]: student[2:]       # prints the objects from index 2 upto the end of the list
         Out[6]: ['Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma', 'Janani']


Negative index too is available in Python. It starts from last element of the list. i.e.

         In [7]:student[-1]        #prints last index of list
         Out[7]: 'Janani'


         In [8]:student[-1:-8]     #prints empty list
         Out[8]: []


         In [9]:student[-8:-1]     #prints -8th index to -1st index elements
         Out[9]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma']

[[#TOP]]
===Removing Item from list ===
----

Is used to remove a specific item from the list.

'''Example:'''
 
Use list.remove(entry/value)  Or   del list[index]    Or list.pop(index)
         student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
         student.remove(&quot;Arun&quot;)   #This will delete item &quot;Arun&quot;
         Or    
         del student[0]           # This will delete item at index 0
         Or
         student.pop(0)         # This will delete and return item at index 0


         print(student)    
         Output: [&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]

[[#TOP]]
===Delete list ===
----
Used to delete complete list

'''Example'''

Use del &lt;list name&gt;
         student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
         del student

===Concatenation of two lists===
----
''+'' is the concatenation operator which is used concatenate two lists. 
&lt;pre&gt;
ages1 = [11,23,12,23,45]
ages2 = [25, 24, 43, 47]
age=ages1+ages2
print(age)
#Output: [11, 23, 12, 23, 45, 25, 24, 43, 47]
&lt;/pre&gt;

===Repeatation of a list ===
----
''*'' is the operator to repeat a particular list.
&lt;pre&gt;
ages1 = [11,23,12,23,45]
age=ages1*5 #ages1 list is repeated 5 times and stroed in ''age'' list
print(age)

#Output: [11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45]
&lt;/pre&gt;

=== all and any for List===
all() and any() are special functions to check whether all elements in iterable is ''True'' or any element is ''True''
&lt;ol&gt;If all elements in a list are ''True'', '''all()''' will return ''True''&lt;/ol&gt;
&lt;pre&gt;
lsit=[True, True, True, True]
print(all(lsit))#Output: True
print(any(lsit))#Output: True

lsit1=[True, False, True, True]
print(all(lsit1))#Output: False
print(any(lsit1))#Output: True

lsit2=[False,False,False]
print(all(lsit2))#Output: False
print(any(lsit2))#Output: False

lsit3=[]
print(all(lsit3))#Output: True
print(any(lsit3))#Output: False
&lt;/pre&gt;

====Conditional Statements====
&lt;pre&gt;Conditionals are used to check the condition and change the flow of the program 
accordingly. They are realized in programming languages through if statement. The 
syntax is as follows :
         if condition : 
            statement
    '''Note:''' Do not forget indentation (inserting space/tab) in the line after the
 if condition.
    
    In case you want to execute a set of statements when a condition is true and another

set of statement when the condition is false.
         if condition : 
            statement 1
         else :
            statement 2
    
    Multiple if-else statements can be written as follows:
         if condition_1 : 
            statement 1
         elif condition_2 : # 'elif' is short for 'else if'
            statement 2
         elif condition_3 :
            statement 3
        .
        .
         else :
            final statement
&lt;/pre&gt;
[[#TOP]]

=Loops and Conditionals : Fizzbuzz=
====Loops====
&lt;pre&gt;
Loops are used to execute a set of repetitive statements. They are realized
through 'while' and 'for' loops in programming languages. The syntax of 'for' loop is 
as follows :
        for LOOPVARIABLE in SEQUENCE: 
            STATEMENTS
    '''e.g.''' to print all the data from a list we can write:
        for item in list_name
            print(item)
    OR
        for index in range(len(list_name))
            print(list_name[index])
    
    The syntax for while loop is as follows :
    
        while BOOLEANEXPRESSION: 
            STATEMENTS
            INCREMENT/DECREMENT
    
    '''e.g.''' if we want to print all numbers from 1 to 10
        i=1
        while i&lt;=10 :
            print(i,&quot; &quot;)
            i=i+1
    
    'while' loop has indefinite iteration (run-time unknown). So, there must be loop
 break statement in it.
 Whereas 'for' loop is definite in nature (i.e. known or predictable span).&lt;br&gt;

&lt;b&gt;NOTE: Python doesn't have anything like do-while loop.&lt;/b&gt;
&lt;/pre&gt;
[[#TOP]]

==Implementation==
Here, we try to demonstrate the concept of loops and conditionals through a game called Fizzbuzz. The rules are as follows :&lt;br/&gt;
[[File:fizzBuzz.gif]]

• if input number is a multiple of ’3’ print ”Fizz”
&lt;br/&gt;
• if input number is a multiple of ’5’ print ”Buzz”
&lt;br/&gt;
• if input number is a multiple of both '3' and ’5’ print ”FizzBuzz”
&lt;br/&gt;
The pseudo code is as follows :
&lt;pre&gt;
   If input no % 3 == 0 and  input no % 5 == 0 : 
       print ”Fizzbuzz”
   else if input no % 3 == 0 : 
       print ”Fizz”
   else if input no % 5 == 0 : 
       print ”Buzz”
   else :
       print the input no
&lt;/pre&gt;
The order of statements execution matters to get the desired output. The highest priority condition should be first followed by other. In fizzbuzz programming, first checking should be done for both divisibility of 3 and 5. If condition not satisfied only then it should check individually for 3 or 5. So carefully choosing the order is crucial for better programming.
Note: There is some effect of present condition statements chosen on next conditions statements. That is why in first attempt fizzbuzz programming got struck.

Example: 
&lt;pre&gt;
#Code to achieve the above requirement in python3.
i = int(input(&quot;Enter the number&quot;)) 
if i%3 == 0 and i%5 == 0: print(i,&quot;FizzBuzz&quot;)  
elif i%5 == 0: print(i,&quot;Buzz&quot;)
elif i%3 == 0: print(i,&quot;Fizz&quot;)
else: print(i)
&lt;/pre&gt;
Lets put the same into a loop for a range given by the user.
&lt;pre&gt;
def fizzbuzzgame(start,stop):
    for i in range(start,stop+1):
        if i%3 == 0 and i%5 == 0:
            print(i,&quot;FizzBuzz&quot;)
        elif i%5 == 0:
            print(i,&quot;Buzz&quot;)
        elif i%3 == 0:
            print(i,&quot;Fizz&quot;)
        else: print(i)

fizzbuzzgame(50,100)
&lt;/pre&gt;


=== Fizz Buzz game in Interactive mode with Score ===
'''By Ms. Ami Tusharkant Choksi'''
&lt;pre&gt;
def fizzbuzzgame(i):
        if i%3 == 0 and i%5 == 0:
            print(i,&quot;FizzBuzz&quot;)
            return(&quot;fzbz&quot;)
        elif i%5 == 0:
            print(i,&quot;Buzz&quot;)
            return(&quot;bz&quot;)
        elif i%3 == 0:
            print(i,&quot;Fizz&quot;)
            return(&quot;fz&quot;)
        else:
            print(i)
            return(&quot;no&quot;)

ch = 'y'
fizzbuzz=0
fizz=0
buzz=0
nothing=0
print(&quot;&quot;&quot;
 _____  ____  _____  _____  ____   __ __  _____  _____       ____   ____  ___ ___    ___ 
|     ||    ||     ||     ||    \ |  |  ||     ||     |     /    | /    ||   |   |  /  _]
|   __| |  | |__/  ||__/  ||  o  )|  |  ||__/  ||__/  |    |   __||  o  || _   _ | /  [_ 
|  |_   |  | |   __||   __||     ||  |  ||   __||   __|    |  |  ||     ||  \_/  ||    _]
|   _]  |  | |  /  ||  /  ||  O  ||  :  ||  /  ||  /  |    |  |_ ||  _  ||   |   ||   [_ 
|  |    |  | |     ||     ||     ||     ||     ||     |    |     ||  |  ||   |   ||     |
|__|   |____||_____||_____||_____| \__,_||_____||_____|    |___,_||__|__||___|___||_____|
                                                                                         
&quot;&quot;&quot;)   

while(ch == 'y'):
    n=int(input(&quot;Enter a Number : &quot;))
    winLoose=fizzbuzzgame(n)
    if(winLoose == &quot;fz&quot;):
        fizz+=1
    elif(winLoose == &quot;bz&quot;):
        buzz+=1
    elif(winLoose == &quot;fzbz&quot;):
        fizzbuzz+=1
    ch=input(&quot;Do you want to continue playing the game : (y/n)&quot;)
    if(ch=='n'):
        print('Congratulations, your score is\n FizzBuzz:%d\nFizz:%d\nBuzz:%d' %
(fizzbuzz,fizz,buzz))
    
'''Sample Output:

 _____  ____  _____  _____  ____   __ __  _____  _____       ____   ____  ___ ___    ___ 
|     ||    ||     ||     ||    \ |  |  ||     ||     |     /    | /    ||   |   |  /  _]
|   __| |  | |__/  ||__/  ||  o  )|  |  ||__/  ||__/  |    |   __||  o  || _   _ | /  [_ 
|  |_   |  | |   __||   __||     ||  |  ||   __||   __|    |  |  ||     ||  \_/  ||    _]
|   _]  |  | |  /  ||  /  ||  O  ||  :  ||  /  ||  /  |    |  |_ ||  _  ||   |   ||   [_ 
|  |    |  | |     ||     ||     ||     ||     ||     |    |     ||  |  ||   |   ||     |
|__|   |____||_____||_____||_____| \__,_||_____||_____|    |___,_||__|__||___|___||_____|
                                                                                         

Enter a Number : 666
666 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 777
777 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 555
555 FizzBuzz
Do you want to continue playing the game : (y/n)y
Enter a Number : 1
1
Do you want to continue playing the game : (y/n)y
Enter a Number : 789
789 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 25
25 Buzz
Do you want to continue playing the game : (y/n)n
Congratulations, your score is

FizzBuzz:1
Fizz:3
Buzz:1

&lt;/pre&gt;

=Crowd Computing: Just Estimate=
==Wisdom of Crowds==
The concept of ’Wisdom of Crowds’ was proposed by Francis Galton. A weight-judging competition was carried on at the annual show of the West of England Fat Stock and Poultry Exhibition recently held at Plymouth, A fat ox having been selected, competitors bought stamped and numbered cards, each, on which to inscribe their respective names, addresses, and estimates of what the ox would weigh after it had been slaughtered. Those who guessed most successfully received prizes. About 8oo tickets were issued to the par- ticipants. The middlemost estimate of all the estimates recorded was 1207 lbs and the actual weight of the ox was 1198 lbs.

==Our Experiment==
The crowd had to guess the number of candies/gems in a jar. Around 75 people participated in the experiment. The actual number of gems in the jar were 375. The median of all estimates came out to be 300 and the mean of all the estimates came out to be around 396. Median underestimated and mean overestimated the actual value. So according to recent studies, Trimmed mean must be used as an aggregate measure to estimate where Wisdom of Crowds is involved.
[[File:Gemsjar.jpg|center|200px|caption]]

===Trimmed Mean===
In these kinds of experiments, 10% trimmed mean is usually followed. For calculating 10% trimmed mean, remove 10% smallest and 10% largest values from the sample. Calculate the mean of the sample obtained. In the above experiment, the trimmed mean came out to be around 351 which is very close to the actual value.

==Implementation==
Here, we try to demonstrate the concept of trimmed mean through crowd computing.
 Input a list of estimates done by the crowd .
 Sort the list.
 Remove the 10% smallest values.
 Remove the 10% largest values.
 Calculate the mean of the new list obtained .&lt;hr&gt;

==Data of Experiment==       
    Estimates =[1000,1010,1786,2000,1500,1500,100,120,150,150,150,170,175,180,197,200,200,200,200,200,200,220,220,220,220,234,250,250,250,250,250,250,250,250,250,263,270,275,275,286,300,
                300,300,300,300,300,300,300,320,350,350,350,400, 400,400,400,400,450,467,500,500,500,500,500,500,500,550,550,600,600,600,650,700,700,720]

    '''CODE:'''
&lt;pre&gt;
Estimates = [1000,1010,1786,2000,1500,1500,100,120,150,150,150,170,175,180,197,200,200,200,200,200,200,220,220,220,220,234,250,250,250,250,250,250,250,250,250,263,270,275,275,286,300,                300,300,300,300,300,300,300,320,350,350,350,400,400,400,400,400,450,467,500,500,500,500,500,500,500,550,550,600,600,600,650,700,700,720]
Estimates.sort()
offset = int(0.10*len(Estimates))
for i in range(offset):
       del Estimates[0]
       del Estimates[-1]
Sum = 0    
for i in range(len(Estimates)):
       Sum += Estimates[i]
Mean_Value = Sum/len(Estimates)
print(&quot;Mean : &quot;, int(Mean_Value))
#Output:
Mean :  351
&lt;/pre&gt;
&lt;hr&gt;
==Trimmed Mean for the above example== 
&lt;h3&gt;Using scipy library&lt;/h3&gt;
&lt;pre&gt;
#import scipy to use the method of trim_mean
from scipy import stats
trimMean = stats.trim_mean(Estimates, 0.1) # Trim 10% at both ends
print(&quot;Trimmed Mean : &quot;,trimMean)
#Output:
Trimmed Mean :  335.1020408163265
&lt;/pre&gt;

&lt;h3&gt;Without using scipy library&lt;/h3&gt;
&lt;pre&gt;
#Trimmed mean with 10%
p=10/100
#sorted data
data=[2, 4, 6, 7, 11, 21, 81, 90, 105, 121]
n = len(data)
#Remove elements from both end
rem=int(n*p)
newData = data[rem:-rem]
mean = 0
for i in newData:
    mean += i
mean = int(mean/len(newData))
print(&quot;Trimmed mean : &quot;,mean)
#Output: Trimmed mean :  40
&lt;/pre&gt;
[[#Top]]

=Jumbled_Words Permutations: Jumbled Words=
==What are Permutations ?==
A permutation also called ordering of selected number of elements from a list denoted by nPr here we are choosing all elements of a list and so n=r&lt;br&gt;
nPr=n!/(n-r)!&lt;br&gt; as n=r
nPn=n!&lt;br&gt; which gives all possible arrangement of elements present in a list.

 For example, permutations of list [1,2,3] are [1,2,3], [1,3,2], [2,1,3], [2,3,1], 
[3,1,2], and [3,2,1]. 
The number of permutations of a list of elements nPn is given by n!. For example, there are 2! = 2 x 1 = 2 permutations of [1,2], namely [1,2] and [2,1], and 3! = 3 x 2 x 1 = 6 permutations of [1,2,3], as mentioned above.&lt;br/&gt;
[[File:Permutations.jpg]]

==Implementation==
Here, we try to demonstrate the concept of permutations through jumbled words. It is a two player game in which one person presents the other person a different permutation of the word in his mind. The other person has to guess the right word. If he guesses, the he wins otherwise he loses.
 Input an list of words.
 Randomly pick a word from the list of words .
 Shuffle this word and present it to the other player.
 if word guesses by the player is same as the one picked from list of w
     player wins
 else
     player loses

ALTERNATE CODE TO GENERATE THIS GAME:
&lt;pre&gt;
import random
p1=input(&quot;enter player 1 name:&quot;)
p2=input(&quot;enter player 2 name:&quot;)
l=[&quot;rainbow&quot;,&quot;computer&quot;,&quot;robot&quot;,&quot;butter&quot;,&quot;vegetable&quot;,&quot;science&quot;,&quot;correct&quot;]
c1=c2=a1=a2=f1=f2=0
k=1
i=3
def play():
    n=random.choice(l)        ##n=chooses a word from list l
    l1=[]
    for j in n:
       l1.append(j)      ##creates a list for word in n
    for t in range(len(l1)):
       p=random.choice(l1)     ##this randomly displays letters in the list
       print(p)
       l1.remove(p)          ##to avoid the repetition of a letter
    s=input(&quot;enter the word:&quot;)
    if(s==n):
        print(&quot;correct&quot;)
        return 1
    else:
        print(&quot;not correct&quot;)
        print(&quot;answer is&quot;,n)
        return 0
def stat():
     print(&quot;player 1:&quot;)
     print(&quot;score:&quot;,c1)
     print(&quot;answered:&quot;,a1)
     print(&quot;failed:&quot;,f1)
     print(&quot;.............&quot;)
     print(&quot;player 2:&quot;)
     print(&quot;score:&quot;,c2)
     print(&quot;answered:&quot;,a2)
     print(&quot;failed&quot;,f2)
     if(c1&gt;c2):
         print(p1,&quot; won over &quot;,p2)
     elif(c1==c2):
         print(&quot;draw game&quot;)
     else:
         print(p2,&quot; won over &quot;,p1) 
while(i!=4):
      if(i==3):
         if(k==1):
             print(&quot;player 1 turn&quot;)
             print(&quot;your jumbled word is:&quot;)
             k=k+1
             m=play()
             if(m==1):      ##if guessed answer is correct,then score and no.of answered count will be increased
                c1+=1
                a1+=1
             else:
                f1+=1       ##else count of no.of failed to answered will be incremented
         else:
             print(&quot;player 2 turn&quot;)
             print(&quot;your jumbled word is:&quot;)
             k=k-1
             m=play()
             if(m==1):
                c2=c2+1
                a2=a2+1
             else:
                f2=f2+1
       if(i==2):
             print(&quot;present status&quot;)
             stat()
       i=int(input(&quot;enter your choice  1.stop 2.status 3.continue&quot;))
       if(i==1):
             stat()
             i=i+3
&lt;/pre&gt;
&lt;hr&gt;
=== JumbledWord Simple Logic, In Short ===
[[File:jumbledWord.gif]]
&lt;hr&gt;
'''Logic to create a Jumbled Word'''
&lt;hr&gt;
&lt;pre&gt;
#Get Jumbled Word and print it Horizontally
import random

def getJumbledWord(b):
    jumble=''
    l1 = [ b[i] for i in range(0, len(b)) ]
    for t in range(len(l1)):
       p=random.choice(l1)     ##this randomly gets letters from the list      
       jumble=jumble+p       
       l1.remove(p)
    return jumble

b=input(&quot;Enter a word to make it jumbled : &quot;)
print(&quot;Jumbled Word : &quot;, getJumbledWord(b))
&lt;/pre&gt;
&lt;hr&gt;
'''Another Logic to create a Jumbled Word'''
&lt;hr&gt;
&lt;pre&gt;
b=input(&quot;Enter a word to make it jumbled : &quot;)

def getJumbledWord1(b):
    l1 = [ b[i] for i in range(0, len(b)) ]
    random.shuffle(l1)
    str1 = ''.join(l1)
    return str1

print(&quot;Jumbled Word : &quot;, getJumbledWord1(b))
&lt;/pre&gt;

====Sample Output:====
&lt;pre&gt;
---- Output1 
Enter a word to make it jumbled : butter
Jumbled Word :  tbture

---- Output2 
Enter a word to make it jumbled : petriotism
Jumbled Word :  pittrosime
&lt;/pre&gt;

=Theory of Evolution=

== What is Evolution ? ==
Evolution is the change in heritable characteristics over successive generations. The theory of evolution explains that DNA, which acts as a carrier of genetic information from one generation to other, tends to change or mutate occasionally. These changes are reflected in next generations to come. This is how life has evolved on earth from bacteria to human beings.&lt;br&gt;
[[File:Evolution.png|500px]]

== Implementation ==
&lt;pre&gt;An array representing DNA is stored in a file. As genes are forms of DNA, they contain information to be transferred to forthcoming generations. Assume that information is in the form of bits (in the form of 0s and 1s). A number is picked randomly from 1 to the size of the array. A new parameter has been introduced which decides whether mutation would occur or not. If the value of this new parameter is 1 (It is picked randomly from 1 to 100), then only change is reflected down the generations, otherwise it is not. The pseudo code is as follows :
Input an array containing genetic information .
Randomly generate a number (say m) from 1 to length of the array. Randomly generate other number (say p) from 1 to 100.
 
    if p is equal to 1 then 
        if m is 1 then
          set it to 0
        else
          set it to 1
&lt;/pre&gt;
[[#TOP]]</text>
      <sha1>bmzreytjtu24sdadem7ekeygsx24jqq</sha1>
    </revision>
    <revision>
      <id>3510</id>
      <parentid>3509</parentid>
      <timestamp>2018-09-28T00:42:18Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* all and any for List */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="28913">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_3 Contributors of this page]
*Week 3 Playlist: https://www.youtube.com/playlist?list=PLc_j0TNIaWxOVx_z9jAM2UB3RqYNXaoEo
=List=
List is a flexible data structure used for storing a group of data separated by comma. The elements in a list need not be of the same data type.

'''Example:'''
       List_1 = [ 1, 2,3] or 
       List_1 = [&quot;coffee&quot;, &quot;Tea&quot;, &quot;Milk&quot;] or
       List_1 = [1,&quot;coffee&quot;, &quot;Tea&quot;, 3, &quot;5&quot;]

==List Creation==
&lt;pre&gt;a) A list can be created by simply putting values (separated by comma) between square brackets as given below,
       List_1 = [1,&quot;coffee&quot;, &quot;Tea&quot;, 3, &quot;5&quot;] #this creates a list by name List_1 containing following items


Or,
(b)A List can be created from scratch and elements can be added 
        List_2 = [ ]
        List_2.append(&quot;Kala&quot;)
        List_2.append(&quot;Mala&quot;)
Here we use &quot;append&quot; ,which is a function in python that enable us to append or attach an element to a list .
Thus List_2 will now hold [&quot;Kala&quot;,&quot;Mala&quot;]
&lt;/pre&gt;
[[#TOP]]

==Operations and Methods to work with List==
&lt;pre&gt;
a = [25,30,50,90,12,13]
b = [100,300,500,200,250]
&lt;/pre&gt;
&lt;hr&gt;
&lt;table border=2&gt;
  &lt;tr&gt;
    &lt;th&gt;&lt;b&gt;Method/&lt;br&gt;Operator&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Function&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Syntax&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Output&lt;/b&gt;&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;len()&lt;/td&gt;
    &lt;td&gt;Find length of a list&lt;/td&gt;
    &lt;td&gt;len(a)&lt;/td&gt;
    &lt;td&gt;6&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;max()&lt;/td&gt;
    &lt;td&gt;Find maximum element from the list&lt;/td&gt;
    &lt;td&gt;max(a)&lt;/td&gt;
    &lt;td&gt;90&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;min()&lt;/td&gt;
    &lt;td&gt;Find minimum element from the list&lt;/td&gt;
    &lt;td&gt;min(a)&lt;/td&gt;
    &lt;td&gt;12&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sum()&lt;/td&gt;
    &lt;td&gt;Returns sum of all elements of the list&lt;/td&gt;
    &lt;td&gt;sum(a)&lt;/td&gt;
    &lt;td&gt;220&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;reverse()&lt;/td&gt;
    &lt;td&gt;Reverses the original list&lt;/td&gt;
    &lt;td&gt;a.reverse()&lt;/td&gt;
    &lt;td&gt;[13, 12, 90, 50, 30, 25]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sort()&lt;/td&gt;
    &lt;td&gt;Sorts the original list in ascending order&lt;/td&gt;
    &lt;td&gt;a.sort()&lt;/td&gt;
    &lt;td&gt;[12, 13, 25, 30, 50, 90]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sorted()&lt;/td&gt;
    &lt;td&gt;Returns the new sorted list &lt;/td&gt;
    &lt;td&gt;sorted(a)&lt;/td&gt;
    &lt;td&gt;[12, 13, 25, 30, 50, 90]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;insert()&lt;/td&gt;
    &lt;td&gt;Insert at a particular index in the list, and shifts remaining elements&lt;/td&gt;
    &lt;td&gt;a.insert(3,3)&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 3, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;append()&lt;/td&gt;
    &lt;td&gt;Adds elements/object to the end of the list&lt;/td&gt;
    &lt;td&gt;a.append(5)&lt;br&gt;a.append([10,20])&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 5]&lt;br&gt;[25, 30, 50, 90, 12, 13, [10, 20]]&lt;br&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;extend()&lt;/td&gt;
    &lt;td&gt;Adds object to the end of the list as elements not as object&lt;/td&gt;
    &lt;td&gt;a.extend([10,20])&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 10, 20]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;*&amp;nbsp;&amp;nbsp;Repeatation&lt;br&gt;operator&lt;/td&gt;
    &lt;td&gt;Repeat the list for n times and returns a new list&lt;/td&gt;
    &lt;td&gt;a*2&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 25, 30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;+ Concatenation&lt;br&gt;operator&lt;/td&gt;
    &lt;td&gt;Concatenates two lists, and returns a new list&lt;/td&gt;
    &lt;td&gt;a+b&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 100, 300, 500, 200, 250]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;index()&lt;/td&gt;
    &lt;td&gt;Finds index of a particular element in the list or not&lt;/td&gt;
    &lt;td&gt;a.index(25)&lt;br&gt;a.index(0)&lt;br&gt;&lt;/td&gt;
    &lt;td&gt;0&lt;br&gt;&lt;br&gt;ValueError: 0 is not in list&lt;br&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;in operator&lt;/td&gt;
    &lt;td&gt;Finds whether a particular element is in the list or not, returns boolean&lt;/td&gt;
    &lt;td&gt;25 in a&lt;/td&gt;
    &lt;td&gt;True&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;not in operator&lt;/td&gt;
    &lt;td&gt;Checks if element is not available in list, returns boolean&lt;/td&gt;
    &lt;td&gt;25 not in a&lt;/td&gt;
    &lt;td&gt;False&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;count()&lt;/td&gt;
    &lt;td&gt;Counts the number of occurence of an element in the list&lt;/td&gt;
    &lt;td&gt;a.count(25)&lt;/td&gt;
    &lt;td&gt;1&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;remove()&lt;/td&gt;
    &lt;td&gt;Removes an element from the list&lt;/td&gt;
    &lt;td&gt;a.remove(25)&lt;/td&gt;
    &lt;td&gt; [30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;pop()&lt;/td&gt;
    &lt;td&gt;Delete and return item at index 0&lt;/td&gt;
    &lt;td&gt;a.pop(0)&lt;/td&gt;
    &lt;td&gt;25 , a will be [30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;del&lt;/td&gt;
    &lt;td&gt;Deletes item at a particular index from the list&lt;/td&gt;
    &lt;td&gt;del a[0]&lt;/td&gt;
    &lt;td&gt;[30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;

==Printing the List==
=== Print whole list ===
A list can be printed simply or using a ''for / while'' loop 

 print(List_2)     # To print the entire list
This code will print      
 ['Kala','Mala']     

===Print element at a particular index===
&lt;pre&gt;
Using index position
    List_2[0]     # prints 'Kala' ,i.e,the value at index position 0.
    List_2[1]     # prints 'Mala'.
&lt;/pre&gt;
=== Without using index position ===
&lt;pre&gt;
for item in List_2:   # here item is a variable used to access elements in list.
       print(item)
   This code snippet prints 
    Kala
    Mala
&lt;/pre&gt;
[[#TOP]]

==Search for a particular element in list==
Elements in a list can be searched by one of the two ways:
=== using index() function===
&lt;pre&gt;
ages1 = [11,23,12,23,45]

#if element is available in the list, index() returns the index value on which, the element is present.
print(ages1.index(45))#Output: 4

#if element is not available in the list, index() returns ''ValueError''
print(ages1.index(0))#Output: ValueError:
&lt;/pre&gt;

In programming, if such error occurs, program gets terminated. It can be solved using exception handling.
e.g.
&lt;pre&gt;
ages1 = [11,23,12,23,45]

try:
    print(ages1.index(0))
except ValueError:
    print(&quot;Exception has occured&quot;)    
    print(&quot;Element is not found in the list&quot;)

&lt;/pre&gt;
&lt;pre&gt;
'''Output: 
Exception has occured
Element is not found in the list
'''&lt;/pre&gt;
[[#TOP]]

=== using 'in' operator===
''in'' operator is used to check whether a particular element is available in the list or not.e.g.

&lt;pre&gt;
ages1 = [11,23,12,23,45]
no=11

if no in ages1:
    print(&quot;no is there in the list&quot;)
else:    
    print(&quot;no is NOT there in the list&quot;)
&lt;/pre&gt;
&lt;pre&gt;
#Output: no is there in the list
&lt;/pre&gt;

'''Number is not there in the list'''
&lt;pre&gt;
ages1 = [11,23,12,23,45]
no=15

if no in ages1:
    print(&quot;no is there in the list&quot;)
else:    
    print(&quot;no is NOT there in the list&quot;)
&lt;/pre&gt;
&lt;pre&gt;
Output: no is NOT there in the list
&lt;/pre&gt;
[[#TOP]]

==Updating the List==
The lists can be updated using ''append'' or ''insert'' function.  Append adds the element to the end of the list and Insert adds the element in the specified position.
   List_2.append(&quot;Sheela&quot;)    # add the element 'Sheela' to the end of the list.
   print (List_2) will output 
   ['Kala', 'Mala', 'Sheela']
   
   List_2.insert(1,&quot;Bala&quot;)    # add the element &quot;Bala&quot; in the list at the index 1.
   print (List_2) will output 
   ['Kala', 'Bala','Mala', 'Sheela']

=== Extend the list by adding elements of other list at end using extend()===
&lt;pre&gt;
ages = [11,23,12,23,45]
ages.extend([57,58])
print(ages)
&lt;/pre&gt;

&lt;pre&gt;
#Output: [11, 23, 12, 23, 45, 57, 58]
&lt;/pre&gt;

==== Difference between ''append and extend'' ====
Difference between append and extend can be easily understood, by the following example.

&lt;pre&gt;
appendlist = [11,23,12,23,45]
appendlist.append([57,58])

extendlist= [11,23,12,23,45]
extendlist.extend([57,58])
&lt;/pre&gt;

&lt;pre&gt;
'''Output:
[11, 23, 12, 23, 45, [57, 58]]
[11, 23, 12, 23, 45, 57, 58]'''
&lt;/pre&gt;
[[#TOP]]

==Basic Operations on List==
===Frequency of Occurrence===
list.count(object) will return the number of times the object occur in the list.
  '''Example'''
    ages = [11,23,12,23,45,43,22,24,23]
    ages.count(23) will return
    3
    ages.count(100) will return
    0

===Length of the List===
len(list) will return the length of the list ie. the number of objects in the list.
  '''Example'''
    ages = [11,23,12,23,45,43,22,24,23]
    len(ages) will output
    9
To print the objects in the list either use ''for item in list'' or ''for index in range(len(list))''
    for item in ages:       
        print (item)  
        (OR)
    for index in range(len(ages)) :
        print (ages[index])
===Sort the List===
list.sort() will sort the list in ascending order
  '''Example'''
    ages = [11,23,12,23,45,43,22,24,23]
    ages.sort() 
    print (ages) 
    [11, 12, 22, 23, 23, 23, 24, 43, 45]

[[#TOP]]

===Sort the List using sorted() function===
sorted(list1) will sort the list and return a new list, it doesn't modify the original list
&lt;br&gt;'''Example: Sort in ascending order'''
&lt;pre&gt;
ages = [11,23,12,23,45,43,22,24,23]
newList=sorted(ages)
print(newList)

#Output: [11, 12, 22, 23, 23, 23, 24, 43, 45]
&lt;/pre&gt;

&lt;br&gt;'''Example: Sort in descending order'''
&lt;pre&gt;
ages = [11,23,12,23,45,43,22,24,23]
newList=sorted(ages,reverse=True)
print(newList)

#Output: [45, 43, 24, 23, 23, 23, 22, 12, 11]
&lt;/pre&gt;

===Reverse the List===
list.reverse() will reverse the original list
  '''Example'''
    ages = [11, 12, 22, 23, 23, 23, 24, 43, 45]
    ages.reverse()
    print (ages)
    [45, 43, 24, 23, 23, 23, 22, 12, 11]

Both sort() and reverse() list operation will work on numeric and alphanumeric data list.

A special use of the reverse() function is to descend a list that is sorted in ascending order.

  '''Example'''
&lt;pre&gt;
ages = [11, 12, 22, 23, 23, 23, 24, 43, 45]
ages.sort()
print(ages)
ages.reverse()
print(ages)
&lt;/pre&gt;

===Slicing===
Used to retrieve an object or objects in a range as a list  
  '''Example'''
Use ''list[index]'' to retrieve the object at the given index
         In [1]: student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
         In [2]: student[3]     #Object at index 3.  Remember index starts at 0
         Out[2]: 'Geetha'      


Use ''list[start_index : end_index + 1]'' to retrieve objects from the start_index to end_index 
         In [3]: student[2:4]     # Objects from index 2 to 3 as List. Note the [ and ]
         Out[3]: ['Vijay', 'Geetha']   


Use ''list[:]'' to retrieve objects from the starting of the list to the end of the list. 
The default start value will be the starting index of the list (i.e. 0) and the default end value
will be the length of the list 
         In [4]: student[:]        # prints the entire list
         Out[4]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma', 'Janani']


         In [5]: student[:5]       # prints the objects from the start of the list upto object at index 4
         Out[5]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran']


         In [6]: student[2:]       # prints the objects from index 2 upto the end of the list
         Out[6]: ['Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma', 'Janani']


Negative index too is available in Python. It starts from last element of the list. i.e.

         In [7]:student[-1]        #prints last index of list
         Out[7]: 'Janani'


         In [8]:student[-1:-8]     #prints empty list
         Out[8]: []


         In [9]:student[-8:-1]     #prints -8th index to -1st index elements
         Out[9]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma']

[[#TOP]]
===Removing Item from list ===
----

Is used to remove a specific item from the list.

'''Example:'''
 
Use list.remove(entry/value)  Or   del list[index]    Or list.pop(index)
         student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
         student.remove(&quot;Arun&quot;)   #This will delete item &quot;Arun&quot;
         Or    
         del student[0]           # This will delete item at index 0
         Or
         student.pop(0)         # This will delete and return item at index 0


         print(student)    
         Output: [&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]

[[#TOP]]
===Delete list ===
----
Used to delete complete list

'''Example'''

Use del &lt;list name&gt;
         student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
         del student

===Concatenation of two lists===
----
''+'' is the concatenation operator which is used concatenate two lists. 
&lt;pre&gt;
ages1 = [11,23,12,23,45]
ages2 = [25, 24, 43, 47]
age=ages1+ages2
print(age)
#Output: [11, 23, 12, 23, 45, 25, 24, 43, 47]
&lt;/pre&gt;

===Repeatation of a list ===
----
''*'' is the operator to repeat a particular list.
&lt;pre&gt;
ages1 = [11,23,12,23,45]
age=ages1*5 #ages1 list is repeated 5 times and stroed in ''age'' list
print(age)

#Output: [11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45]
&lt;/pre&gt;

=== all and any for List===
all() and any() are special functions to check whether all elements in iterable is ''True'' or any element is ''True''
&lt;ol&gt;
&lt;li&gt;If all elements in a list are ''True'', '''all()''' will return ''True''&lt;/li&gt;
&lt;li&gt;If iterable is ''empty'', '''all()''' will return ''True''&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;
lsit=[True, True, True, True]
print(all(lsit))#Output: True
print(any(lsit))#Output: True

lsit1=[True, False, True, True]
print(all(lsit1))#Output: False
print(any(lsit1))#Output: True

lsit2=[False,False,False]
print(all(lsit2))#Output: False
print(any(lsit2))#Output: False

lsit3=[]
print(all(lsit3))#Output: True
print(any(lsit3))#Output: False
&lt;/pre&gt;

====Conditional Statements====
&lt;pre&gt;Conditionals are used to check the condition and change the flow of the program 
accordingly. They are realized in programming languages through if statement. The 
syntax is as follows :
         if condition : 
            statement
    '''Note:''' Do not forget indentation (inserting space/tab) in the line after the
 if condition.
    
    In case you want to execute a set of statements when a condition is true and another

set of statement when the condition is false.
         if condition : 
            statement 1
         else :
            statement 2
    
    Multiple if-else statements can be written as follows:
         if condition_1 : 
            statement 1
         elif condition_2 : # 'elif' is short for 'else if'
            statement 2
         elif condition_3 :
            statement 3
        .
        .
         else :
            final statement
&lt;/pre&gt;
[[#TOP]]

=Loops and Conditionals : Fizzbuzz=
====Loops====
&lt;pre&gt;
Loops are used to execute a set of repetitive statements. They are realized
through 'while' and 'for' loops in programming languages. The syntax of 'for' loop is 
as follows :
        for LOOPVARIABLE in SEQUENCE: 
            STATEMENTS
    '''e.g.''' to print all the data from a list we can write:
        for item in list_name
            print(item)
    OR
        for index in range(len(list_name))
            print(list_name[index])
    
    The syntax for while loop is as follows :
    
        while BOOLEANEXPRESSION: 
            STATEMENTS
            INCREMENT/DECREMENT
    
    '''e.g.''' if we want to print all numbers from 1 to 10
        i=1
        while i&lt;=10 :
            print(i,&quot; &quot;)
            i=i+1
    
    'while' loop has indefinite iteration (run-time unknown). So, there must be loop
 break statement in it.
 Whereas 'for' loop is definite in nature (i.e. known or predictable span).&lt;br&gt;

&lt;b&gt;NOTE: Python doesn't have anything like do-while loop.&lt;/b&gt;
&lt;/pre&gt;
[[#TOP]]

==Implementation==
Here, we try to demonstrate the concept of loops and conditionals through a game called Fizzbuzz. The rules are as follows :&lt;br/&gt;
[[File:fizzBuzz.gif]]

• if input number is a multiple of ’3’ print ”Fizz”
&lt;br/&gt;
• if input number is a multiple of ’5’ print ”Buzz”
&lt;br/&gt;
• if input number is a multiple of both '3' and ’5’ print ”FizzBuzz”
&lt;br/&gt;
The pseudo code is as follows :
&lt;pre&gt;
   If input no % 3 == 0 and  input no % 5 == 0 : 
       print ”Fizzbuzz”
   else if input no % 3 == 0 : 
       print ”Fizz”
   else if input no % 5 == 0 : 
       print ”Buzz”
   else :
       print the input no
&lt;/pre&gt;
The order of statements execution matters to get the desired output. The highest priority condition should be first followed by other. In fizzbuzz programming, first checking should be done for both divisibility of 3 and 5. If condition not satisfied only then it should check individually for 3 or 5. So carefully choosing the order is crucial for better programming.
Note: There is some effect of present condition statements chosen on next conditions statements. That is why in first attempt fizzbuzz programming got struck.

Example: 
&lt;pre&gt;
#Code to achieve the above requirement in python3.
i = int(input(&quot;Enter the number&quot;)) 
if i%3 == 0 and i%5 == 0: print(i,&quot;FizzBuzz&quot;)  
elif i%5 == 0: print(i,&quot;Buzz&quot;)
elif i%3 == 0: print(i,&quot;Fizz&quot;)
else: print(i)
&lt;/pre&gt;
Lets put the same into a loop for a range given by the user.
&lt;pre&gt;
def fizzbuzzgame(start,stop):
    for i in range(start,stop+1):
        if i%3 == 0 and i%5 == 0:
            print(i,&quot;FizzBuzz&quot;)
        elif i%5 == 0:
            print(i,&quot;Buzz&quot;)
        elif i%3 == 0:
            print(i,&quot;Fizz&quot;)
        else: print(i)

fizzbuzzgame(50,100)
&lt;/pre&gt;


=== Fizz Buzz game in Interactive mode with Score ===
'''By Ms. Ami Tusharkant Choksi'''
&lt;pre&gt;
def fizzbuzzgame(i):
        if i%3 == 0 and i%5 == 0:
            print(i,&quot;FizzBuzz&quot;)
            return(&quot;fzbz&quot;)
        elif i%5 == 0:
            print(i,&quot;Buzz&quot;)
            return(&quot;bz&quot;)
        elif i%3 == 0:
            print(i,&quot;Fizz&quot;)
            return(&quot;fz&quot;)
        else:
            print(i)
            return(&quot;no&quot;)

ch = 'y'
fizzbuzz=0
fizz=0
buzz=0
nothing=0
print(&quot;&quot;&quot;
 _____  ____  _____  _____  ____   __ __  _____  _____       ____   ____  ___ ___    ___ 
|     ||    ||     ||     ||    \ |  |  ||     ||     |     /    | /    ||   |   |  /  _]
|   __| |  | |__/  ||__/  ||  o  )|  |  ||__/  ||__/  |    |   __||  o  || _   _ | /  [_ 
|  |_   |  | |   __||   __||     ||  |  ||   __||   __|    |  |  ||     ||  \_/  ||    _]
|   _]  |  | |  /  ||  /  ||  O  ||  :  ||  /  ||  /  |    |  |_ ||  _  ||   |   ||   [_ 
|  |    |  | |     ||     ||     ||     ||     ||     |    |     ||  |  ||   |   ||     |
|__|   |____||_____||_____||_____| \__,_||_____||_____|    |___,_||__|__||___|___||_____|
                                                                                         
&quot;&quot;&quot;)   

while(ch == 'y'):
    n=int(input(&quot;Enter a Number : &quot;))
    winLoose=fizzbuzzgame(n)
    if(winLoose == &quot;fz&quot;):
        fizz+=1
    elif(winLoose == &quot;bz&quot;):
        buzz+=1
    elif(winLoose == &quot;fzbz&quot;):
        fizzbuzz+=1
    ch=input(&quot;Do you want to continue playing the game : (y/n)&quot;)
    if(ch=='n'):
        print('Congratulations, your score is\n FizzBuzz:%d\nFizz:%d\nBuzz:%d' %
(fizzbuzz,fizz,buzz))
    
'''Sample Output:

 _____  ____  _____  _____  ____   __ __  _____  _____       ____   ____  ___ ___    ___ 
|     ||    ||     ||     ||    \ |  |  ||     ||     |     /    | /    ||   |   |  /  _]
|   __| |  | |__/  ||__/  ||  o  )|  |  ||__/  ||__/  |    |   __||  o  || _   _ | /  [_ 
|  |_   |  | |   __||   __||     ||  |  ||   __||   __|    |  |  ||     ||  \_/  ||    _]
|   _]  |  | |  /  ||  /  ||  O  ||  :  ||  /  ||  /  |    |  |_ ||  _  ||   |   ||   [_ 
|  |    |  | |     ||     ||     ||     ||     ||     |    |     ||  |  ||   |   ||     |
|__|   |____||_____||_____||_____| \__,_||_____||_____|    |___,_||__|__||___|___||_____|
                                                                                         

Enter a Number : 666
666 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 777
777 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 555
555 FizzBuzz
Do you want to continue playing the game : (y/n)y
Enter a Number : 1
1
Do you want to continue playing the game : (y/n)y
Enter a Number : 789
789 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 25
25 Buzz
Do you want to continue playing the game : (y/n)n
Congratulations, your score is

FizzBuzz:1
Fizz:3
Buzz:1

&lt;/pre&gt;

=Crowd Computing: Just Estimate=
==Wisdom of Crowds==
The concept of ’Wisdom of Crowds’ was proposed by Francis Galton. A weight-judging competition was carried on at the annual show of the West of England Fat Stock and Poultry Exhibition recently held at Plymouth, A fat ox having been selected, competitors bought stamped and numbered cards, each, on which to inscribe their respective names, addresses, and estimates of what the ox would weigh after it had been slaughtered. Those who guessed most successfully received prizes. About 8oo tickets were issued to the par- ticipants. The middlemost estimate of all the estimates recorded was 1207 lbs and the actual weight of the ox was 1198 lbs.

==Our Experiment==
The crowd had to guess the number of candies/gems in a jar. Around 75 people participated in the experiment. The actual number of gems in the jar were 375. The median of all estimates came out to be 300 and the mean of all the estimates came out to be around 396. Median underestimated and mean overestimated the actual value. So according to recent studies, Trimmed mean must be used as an aggregate measure to estimate where Wisdom of Crowds is involved.
[[File:Gemsjar.jpg|center|200px|caption]]

===Trimmed Mean===
In these kinds of experiments, 10% trimmed mean is usually followed. For calculating 10% trimmed mean, remove 10% smallest and 10% largest values from the sample. Calculate the mean of the sample obtained. In the above experiment, the trimmed mean came out to be around 351 which is very close to the actual value.

==Implementation==
Here, we try to demonstrate the concept of trimmed mean through crowd computing.
 Input a list of estimates done by the crowd .
 Sort the list.
 Remove the 10% smallest values.
 Remove the 10% largest values.
 Calculate the mean of the new list obtained .&lt;hr&gt;

==Data of Experiment==       
    Estimates =[1000,1010,1786,2000,1500,1500,100,120,150,150,150,170,175,180,197,200,200,200,200,200,200,220,220,220,220,234,250,250,250,250,250,250,250,250,250,263,270,275,275,286,300,
                300,300,300,300,300,300,300,320,350,350,350,400, 400,400,400,400,450,467,500,500,500,500,500,500,500,550,550,600,600,600,650,700,700,720]

    '''CODE:'''
&lt;pre&gt;
Estimates = [1000,1010,1786,2000,1500,1500,100,120,150,150,150,170,175,180,197,200,200,200,200,200,200,220,220,220,220,234,250,250,250,250,250,250,250,250,250,263,270,275,275,286,300,                300,300,300,300,300,300,300,320,350,350,350,400,400,400,400,400,450,467,500,500,500,500,500,500,500,550,550,600,600,600,650,700,700,720]
Estimates.sort()
offset = int(0.10*len(Estimates))
for i in range(offset):
       del Estimates[0]
       del Estimates[-1]
Sum = 0    
for i in range(len(Estimates)):
       Sum += Estimates[i]
Mean_Value = Sum/len(Estimates)
print(&quot;Mean : &quot;, int(Mean_Value))
#Output:
Mean :  351
&lt;/pre&gt;
&lt;hr&gt;
==Trimmed Mean for the above example== 
&lt;h3&gt;Using scipy library&lt;/h3&gt;
&lt;pre&gt;
#import scipy to use the method of trim_mean
from scipy import stats
trimMean = stats.trim_mean(Estimates, 0.1) # Trim 10% at both ends
print(&quot;Trimmed Mean : &quot;,trimMean)
#Output:
Trimmed Mean :  335.1020408163265
&lt;/pre&gt;

&lt;h3&gt;Without using scipy library&lt;/h3&gt;
&lt;pre&gt;
#Trimmed mean with 10%
p=10/100
#sorted data
data=[2, 4, 6, 7, 11, 21, 81, 90, 105, 121]
n = len(data)
#Remove elements from both end
rem=int(n*p)
newData = data[rem:-rem]
mean = 0
for i in newData:
    mean += i
mean = int(mean/len(newData))
print(&quot;Trimmed mean : &quot;,mean)
#Output: Trimmed mean :  40
&lt;/pre&gt;
[[#Top]]

=Jumbled_Words Permutations: Jumbled Words=
==What are Permutations ?==
A permutation also called ordering of selected number of elements from a list denoted by nPr here we are choosing all elements of a list and so n=r&lt;br&gt;
nPr=n!/(n-r)!&lt;br&gt; as n=r
nPn=n!&lt;br&gt; which gives all possible arrangement of elements present in a list.

 For example, permutations of list [1,2,3] are [1,2,3], [1,3,2], [2,1,3], [2,3,1], 
[3,1,2], and [3,2,1]. 
The number of permutations of a list of elements nPn is given by n!. For example, there are 2! = 2 x 1 = 2 permutations of [1,2], namely [1,2] and [2,1], and 3! = 3 x 2 x 1 = 6 permutations of [1,2,3], as mentioned above.&lt;br/&gt;
[[File:Permutations.jpg]]

==Implementation==
Here, we try to demonstrate the concept of permutations through jumbled words. It is a two player game in which one person presents the other person a different permutation of the word in his mind. The other person has to guess the right word. If he guesses, the he wins otherwise he loses.
 Input an list of words.
 Randomly pick a word from the list of words .
 Shuffle this word and present it to the other player.
 if word guesses by the player is same as the one picked from list of w
     player wins
 else
     player loses

ALTERNATE CODE TO GENERATE THIS GAME:
&lt;pre&gt;
import random
p1=input(&quot;enter player 1 name:&quot;)
p2=input(&quot;enter player 2 name:&quot;)
l=[&quot;rainbow&quot;,&quot;computer&quot;,&quot;robot&quot;,&quot;butter&quot;,&quot;vegetable&quot;,&quot;science&quot;,&quot;correct&quot;]
c1=c2=a1=a2=f1=f2=0
k=1
i=3
def play():
    n=random.choice(l)        ##n=chooses a word from list l
    l1=[]
    for j in n:
       l1.append(j)      ##creates a list for word in n
    for t in range(len(l1)):
       p=random.choice(l1)     ##this randomly displays letters in the list
       print(p)
       l1.remove(p)          ##to avoid the repetition of a letter
    s=input(&quot;enter the word:&quot;)
    if(s==n):
        print(&quot;correct&quot;)
        return 1
    else:
        print(&quot;not correct&quot;)
        print(&quot;answer is&quot;,n)
        return 0
def stat():
     print(&quot;player 1:&quot;)
     print(&quot;score:&quot;,c1)
     print(&quot;answered:&quot;,a1)
     print(&quot;failed:&quot;,f1)
     print(&quot;.............&quot;)
     print(&quot;player 2:&quot;)
     print(&quot;score:&quot;,c2)
     print(&quot;answered:&quot;,a2)
     print(&quot;failed&quot;,f2)
     if(c1&gt;c2):
         print(p1,&quot; won over &quot;,p2)
     elif(c1==c2):
         print(&quot;draw game&quot;)
     else:
         print(p2,&quot; won over &quot;,p1) 
while(i!=4):
      if(i==3):
         if(k==1):
             print(&quot;player 1 turn&quot;)
             print(&quot;your jumbled word is:&quot;)
             k=k+1
             m=play()
             if(m==1):      ##if guessed answer is correct,then score and no.of answered count will be increased
                c1+=1
                a1+=1
             else:
                f1+=1       ##else count of no.of failed to answered will be incremented
         else:
             print(&quot;player 2 turn&quot;)
             print(&quot;your jumbled word is:&quot;)
             k=k-1
             m=play()
             if(m==1):
                c2=c2+1
                a2=a2+1
             else:
                f2=f2+1
       if(i==2):
             print(&quot;present status&quot;)
             stat()
       i=int(input(&quot;enter your choice  1.stop 2.status 3.continue&quot;))
       if(i==1):
             stat()
             i=i+3
&lt;/pre&gt;
&lt;hr&gt;
=== JumbledWord Simple Logic, In Short ===
[[File:jumbledWord.gif]]
&lt;hr&gt;
'''Logic to create a Jumbled Word'''
&lt;hr&gt;
&lt;pre&gt;
#Get Jumbled Word and print it Horizontally
import random

def getJumbledWord(b):
    jumble=''
    l1 = [ b[i] for i in range(0, len(b)) ]
    for t in range(len(l1)):
       p=random.choice(l1)     ##this randomly gets letters from the list      
       jumble=jumble+p       
       l1.remove(p)
    return jumble

b=input(&quot;Enter a word to make it jumbled : &quot;)
print(&quot;Jumbled Word : &quot;, getJumbledWord(b))
&lt;/pre&gt;
&lt;hr&gt;
'''Another Logic to create a Jumbled Word'''
&lt;hr&gt;
&lt;pre&gt;
b=input(&quot;Enter a word to make it jumbled : &quot;)

def getJumbledWord1(b):
    l1 = [ b[i] for i in range(0, len(b)) ]
    random.shuffle(l1)
    str1 = ''.join(l1)
    return str1

print(&quot;Jumbled Word : &quot;, getJumbledWord1(b))
&lt;/pre&gt;

====Sample Output:====
&lt;pre&gt;
---- Output1 
Enter a word to make it jumbled : butter
Jumbled Word :  tbture

---- Output2 
Enter a word to make it jumbled : petriotism
Jumbled Word :  pittrosime
&lt;/pre&gt;

=Theory of Evolution=

== What is Evolution ? ==
Evolution is the change in heritable characteristics over successive generations. The theory of evolution explains that DNA, which acts as a carrier of genetic information from one generation to other, tends to change or mutate occasionally. These changes are reflected in next generations to come. This is how life has evolved on earth from bacteria to human beings.&lt;br&gt;
[[File:Evolution.png|500px]]

== Implementation ==
&lt;pre&gt;An array representing DNA is stored in a file. As genes are forms of DNA, they contain information to be transferred to forthcoming generations. Assume that information is in the form of bits (in the form of 0s and 1s). A number is picked randomly from 1 to the size of the array. A new parameter has been introduced which decides whether mutation would occur or not. If the value of this new parameter is 1 (It is picked randomly from 1 to 100), then only change is reflected down the generations, otherwise it is not. The pseudo code is as follows :
Input an array containing genetic information .
Randomly generate a number (say m) from 1 to length of the array. Randomly generate other number (say p) from 1 to 100.
 
    if p is equal to 1 then 
        if m is 1 then
          set it to 0
        else
          set it to 1
&lt;/pre&gt;
[[#TOP]]</text>
      <sha1>4yjb1e6wyy7rbynfa8ddt3xarlbuj3s</sha1>
    </revision>
    <revision>
      <id>3511</id>
      <parentid>3510</parentid>
      <timestamp>2018-09-28T00:44:10Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* Conditional Statements */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="28909">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_3 Contributors of this page]
*Week 3 Playlist: https://www.youtube.com/playlist?list=PLc_j0TNIaWxOVx_z9jAM2UB3RqYNXaoEo
=List=
List is a flexible data structure used for storing a group of data separated by comma. The elements in a list need not be of the same data type.

'''Example:'''
       List_1 = [ 1, 2,3] or 
       List_1 = [&quot;coffee&quot;, &quot;Tea&quot;, &quot;Milk&quot;] or
       List_1 = [1,&quot;coffee&quot;, &quot;Tea&quot;, 3, &quot;5&quot;]

==List Creation==
&lt;pre&gt;a) A list can be created by simply putting values (separated by comma) between square brackets as given below,
       List_1 = [1,&quot;coffee&quot;, &quot;Tea&quot;, 3, &quot;5&quot;] #this creates a list by name List_1 containing following items


Or,
(b)A List can be created from scratch and elements can be added 
        List_2 = [ ]
        List_2.append(&quot;Kala&quot;)
        List_2.append(&quot;Mala&quot;)
Here we use &quot;append&quot; ,which is a function in python that enable us to append or attach an element to a list .
Thus List_2 will now hold [&quot;Kala&quot;,&quot;Mala&quot;]
&lt;/pre&gt;
[[#TOP]]

==Operations and Methods to work with List==
&lt;pre&gt;
a = [25,30,50,90,12,13]
b = [100,300,500,200,250]
&lt;/pre&gt;
&lt;hr&gt;
&lt;table border=2&gt;
  &lt;tr&gt;
    &lt;th&gt;&lt;b&gt;Method/&lt;br&gt;Operator&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Function&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Syntax&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Output&lt;/b&gt;&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;len()&lt;/td&gt;
    &lt;td&gt;Find length of a list&lt;/td&gt;
    &lt;td&gt;len(a)&lt;/td&gt;
    &lt;td&gt;6&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;max()&lt;/td&gt;
    &lt;td&gt;Find maximum element from the list&lt;/td&gt;
    &lt;td&gt;max(a)&lt;/td&gt;
    &lt;td&gt;90&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;min()&lt;/td&gt;
    &lt;td&gt;Find minimum element from the list&lt;/td&gt;
    &lt;td&gt;min(a)&lt;/td&gt;
    &lt;td&gt;12&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sum()&lt;/td&gt;
    &lt;td&gt;Returns sum of all elements of the list&lt;/td&gt;
    &lt;td&gt;sum(a)&lt;/td&gt;
    &lt;td&gt;220&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;reverse()&lt;/td&gt;
    &lt;td&gt;Reverses the original list&lt;/td&gt;
    &lt;td&gt;a.reverse()&lt;/td&gt;
    &lt;td&gt;[13, 12, 90, 50, 30, 25]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sort()&lt;/td&gt;
    &lt;td&gt;Sorts the original list in ascending order&lt;/td&gt;
    &lt;td&gt;a.sort()&lt;/td&gt;
    &lt;td&gt;[12, 13, 25, 30, 50, 90]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sorted()&lt;/td&gt;
    &lt;td&gt;Returns the new sorted list &lt;/td&gt;
    &lt;td&gt;sorted(a)&lt;/td&gt;
    &lt;td&gt;[12, 13, 25, 30, 50, 90]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;insert()&lt;/td&gt;
    &lt;td&gt;Insert at a particular index in the list, and shifts remaining elements&lt;/td&gt;
    &lt;td&gt;a.insert(3,3)&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 3, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;append()&lt;/td&gt;
    &lt;td&gt;Adds elements/object to the end of the list&lt;/td&gt;
    &lt;td&gt;a.append(5)&lt;br&gt;a.append([10,20])&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 5]&lt;br&gt;[25, 30, 50, 90, 12, 13, [10, 20]]&lt;br&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;extend()&lt;/td&gt;
    &lt;td&gt;Adds object to the end of the list as elements not as object&lt;/td&gt;
    &lt;td&gt;a.extend([10,20])&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 10, 20]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;*&amp;nbsp;&amp;nbsp;Repeatation&lt;br&gt;operator&lt;/td&gt;
    &lt;td&gt;Repeat the list for n times and returns a new list&lt;/td&gt;
    &lt;td&gt;a*2&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 25, 30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;+ Concatenation&lt;br&gt;operator&lt;/td&gt;
    &lt;td&gt;Concatenates two lists, and returns a new list&lt;/td&gt;
    &lt;td&gt;a+b&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 100, 300, 500, 200, 250]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;index()&lt;/td&gt;
    &lt;td&gt;Finds index of a particular element in the list or not&lt;/td&gt;
    &lt;td&gt;a.index(25)&lt;br&gt;a.index(0)&lt;br&gt;&lt;/td&gt;
    &lt;td&gt;0&lt;br&gt;&lt;br&gt;ValueError: 0 is not in list&lt;br&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;in operator&lt;/td&gt;
    &lt;td&gt;Finds whether a particular element is in the list or not, returns boolean&lt;/td&gt;
    &lt;td&gt;25 in a&lt;/td&gt;
    &lt;td&gt;True&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;not in operator&lt;/td&gt;
    &lt;td&gt;Checks if element is not available in list, returns boolean&lt;/td&gt;
    &lt;td&gt;25 not in a&lt;/td&gt;
    &lt;td&gt;False&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;count()&lt;/td&gt;
    &lt;td&gt;Counts the number of occurence of an element in the list&lt;/td&gt;
    &lt;td&gt;a.count(25)&lt;/td&gt;
    &lt;td&gt;1&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;remove()&lt;/td&gt;
    &lt;td&gt;Removes an element from the list&lt;/td&gt;
    &lt;td&gt;a.remove(25)&lt;/td&gt;
    &lt;td&gt; [30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;pop()&lt;/td&gt;
    &lt;td&gt;Delete and return item at index 0&lt;/td&gt;
    &lt;td&gt;a.pop(0)&lt;/td&gt;
    &lt;td&gt;25 , a will be [30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;del&lt;/td&gt;
    &lt;td&gt;Deletes item at a particular index from the list&lt;/td&gt;
    &lt;td&gt;del a[0]&lt;/td&gt;
    &lt;td&gt;[30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;

==Printing the List==
=== Print whole list ===
A list can be printed simply or using a ''for / while'' loop 

 print(List_2)     # To print the entire list
This code will print      
 ['Kala','Mala']     

===Print element at a particular index===
&lt;pre&gt;
Using index position
    List_2[0]     # prints 'Kala' ,i.e,the value at index position 0.
    List_2[1]     # prints 'Mala'.
&lt;/pre&gt;
=== Without using index position ===
&lt;pre&gt;
for item in List_2:   # here item is a variable used to access elements in list.
       print(item)
   This code snippet prints 
    Kala
    Mala
&lt;/pre&gt;
[[#TOP]]

==Search for a particular element in list==
Elements in a list can be searched by one of the two ways:
=== using index() function===
&lt;pre&gt;
ages1 = [11,23,12,23,45]

#if element is available in the list, index() returns the index value on which, the element is present.
print(ages1.index(45))#Output: 4

#if element is not available in the list, index() returns ''ValueError''
print(ages1.index(0))#Output: ValueError:
&lt;/pre&gt;

In programming, if such error occurs, program gets terminated. It can be solved using exception handling.
e.g.
&lt;pre&gt;
ages1 = [11,23,12,23,45]

try:
    print(ages1.index(0))
except ValueError:
    print(&quot;Exception has occured&quot;)    
    print(&quot;Element is not found in the list&quot;)

&lt;/pre&gt;
&lt;pre&gt;
'''Output: 
Exception has occured
Element is not found in the list
'''&lt;/pre&gt;
[[#TOP]]

=== using 'in' operator===
''in'' operator is used to check whether a particular element is available in the list or not.e.g.

&lt;pre&gt;
ages1 = [11,23,12,23,45]
no=11

if no in ages1:
    print(&quot;no is there in the list&quot;)
else:    
    print(&quot;no is NOT there in the list&quot;)
&lt;/pre&gt;
&lt;pre&gt;
#Output: no is there in the list
&lt;/pre&gt;

'''Number is not there in the list'''
&lt;pre&gt;
ages1 = [11,23,12,23,45]
no=15

if no in ages1:
    print(&quot;no is there in the list&quot;)
else:    
    print(&quot;no is NOT there in the list&quot;)
&lt;/pre&gt;
&lt;pre&gt;
Output: no is NOT there in the list
&lt;/pre&gt;
[[#TOP]]

==Updating the List==
The lists can be updated using ''append'' or ''insert'' function.  Append adds the element to the end of the list and Insert adds the element in the specified position.
   List_2.append(&quot;Sheela&quot;)    # add the element 'Sheela' to the end of the list.
   print (List_2) will output 
   ['Kala', 'Mala', 'Sheela']
   
   List_2.insert(1,&quot;Bala&quot;)    # add the element &quot;Bala&quot; in the list at the index 1.
   print (List_2) will output 
   ['Kala', 'Bala','Mala', 'Sheela']

=== Extend the list by adding elements of other list at end using extend()===
&lt;pre&gt;
ages = [11,23,12,23,45]
ages.extend([57,58])
print(ages)
&lt;/pre&gt;

&lt;pre&gt;
#Output: [11, 23, 12, 23, 45, 57, 58]
&lt;/pre&gt;

==== Difference between ''append and extend'' ====
Difference between append and extend can be easily understood, by the following example.

&lt;pre&gt;
appendlist = [11,23,12,23,45]
appendlist.append([57,58])

extendlist= [11,23,12,23,45]
extendlist.extend([57,58])
&lt;/pre&gt;

&lt;pre&gt;
'''Output:
[11, 23, 12, 23, 45, [57, 58]]
[11, 23, 12, 23, 45, 57, 58]'''
&lt;/pre&gt;
[[#TOP]]

==Basic Operations on List==
===Frequency of Occurrence===
list.count(object) will return the number of times the object occur in the list.
  '''Example'''
    ages = [11,23,12,23,45,43,22,24,23]
    ages.count(23) will return
    3
    ages.count(100) will return
    0

===Length of the List===
len(list) will return the length of the list ie. the number of objects in the list.
  '''Example'''
    ages = [11,23,12,23,45,43,22,24,23]
    len(ages) will output
    9
To print the objects in the list either use ''for item in list'' or ''for index in range(len(list))''
    for item in ages:       
        print (item)  
        (OR)
    for index in range(len(ages)) :
        print (ages[index])
===Sort the List===
list.sort() will sort the list in ascending order
  '''Example'''
    ages = [11,23,12,23,45,43,22,24,23]
    ages.sort() 
    print (ages) 
    [11, 12, 22, 23, 23, 23, 24, 43, 45]

[[#TOP]]

===Sort the List using sorted() function===
sorted(list1) will sort the list and return a new list, it doesn't modify the original list
&lt;br&gt;'''Example: Sort in ascending order'''
&lt;pre&gt;
ages = [11,23,12,23,45,43,22,24,23]
newList=sorted(ages)
print(newList)

#Output: [11, 12, 22, 23, 23, 23, 24, 43, 45]
&lt;/pre&gt;

&lt;br&gt;'''Example: Sort in descending order'''
&lt;pre&gt;
ages = [11,23,12,23,45,43,22,24,23]
newList=sorted(ages,reverse=True)
print(newList)

#Output: [45, 43, 24, 23, 23, 23, 22, 12, 11]
&lt;/pre&gt;

===Reverse the List===
list.reverse() will reverse the original list
  '''Example'''
    ages = [11, 12, 22, 23, 23, 23, 24, 43, 45]
    ages.reverse()
    print (ages)
    [45, 43, 24, 23, 23, 23, 22, 12, 11]

Both sort() and reverse() list operation will work on numeric and alphanumeric data list.

A special use of the reverse() function is to descend a list that is sorted in ascending order.

  '''Example'''
&lt;pre&gt;
ages = [11, 12, 22, 23, 23, 23, 24, 43, 45]
ages.sort()
print(ages)
ages.reverse()
print(ages)
&lt;/pre&gt;

===Slicing===
Used to retrieve an object or objects in a range as a list  
  '''Example'''
Use ''list[index]'' to retrieve the object at the given index
         In [1]: student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
         In [2]: student[3]     #Object at index 3.  Remember index starts at 0
         Out[2]: 'Geetha'      


Use ''list[start_index : end_index + 1]'' to retrieve objects from the start_index to end_index 
         In [3]: student[2:4]     # Objects from index 2 to 3 as List. Note the [ and ]
         Out[3]: ['Vijay', 'Geetha']   


Use ''list[:]'' to retrieve objects from the starting of the list to the end of the list. 
The default start value will be the starting index of the list (i.e. 0) and the default end value
will be the length of the list 
         In [4]: student[:]        # prints the entire list
         Out[4]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma', 'Janani']


         In [5]: student[:5]       # prints the objects from the start of the list upto object at index 4
         Out[5]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran']


         In [6]: student[2:]       # prints the objects from index 2 upto the end of the list
         Out[6]: ['Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma', 'Janani']


Negative index too is available in Python. It starts from last element of the list. i.e.

         In [7]:student[-1]        #prints last index of list
         Out[7]: 'Janani'


         In [8]:student[-1:-8]     #prints empty list
         Out[8]: []


         In [9]:student[-8:-1]     #prints -8th index to -1st index elements
         Out[9]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma']

[[#TOP]]
===Removing Item from list ===
----

Is used to remove a specific item from the list.

'''Example:'''
 
Use list.remove(entry/value)  Or   del list[index]    Or list.pop(index)
         student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
         student.remove(&quot;Arun&quot;)   #This will delete item &quot;Arun&quot;
         Or    
         del student[0]           # This will delete item at index 0
         Or
         student.pop(0)         # This will delete and return item at index 0


         print(student)    
         Output: [&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]

[[#TOP]]
===Delete list ===
----
Used to delete complete list

'''Example'''

Use del &lt;list name&gt;
         student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
         del student

===Concatenation of two lists===
----
''+'' is the concatenation operator which is used concatenate two lists. 
&lt;pre&gt;
ages1 = [11,23,12,23,45]
ages2 = [25, 24, 43, 47]
age=ages1+ages2
print(age)
#Output: [11, 23, 12, 23, 45, 25, 24, 43, 47]
&lt;/pre&gt;

===Repeatation of a list ===
----
''*'' is the operator to repeat a particular list.
&lt;pre&gt;
ages1 = [11,23,12,23,45]
age=ages1*5 #ages1 list is repeated 5 times and stroed in ''age'' list
print(age)

#Output: [11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45]
&lt;/pre&gt;

=== all and any for List===
all() and any() are special functions to check whether all elements in iterable is ''True'' or any element is ''True''
&lt;ol&gt;
&lt;li&gt;If all elements in a list are ''True'', '''all()''' will return ''True''&lt;/li&gt;
&lt;li&gt;If iterable is ''empty'', '''all()''' will return ''True''&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;
lsit=[True, True, True, True]
print(all(lsit))#Output: True
print(any(lsit))#Output: True

lsit1=[True, False, True, True]
print(all(lsit1))#Output: False
print(any(lsit1))#Output: True

lsit2=[False,False,False]
print(all(lsit2))#Output: False
print(any(lsit2))#Output: False

lsit3=[]
print(all(lsit3))#Output: True
print(any(lsit3))#Output: False
&lt;/pre&gt;

==Conditional Statements==
&lt;pre&gt;Conditionals are used to check the condition and change the flow of the program 
accordingly. They are realized in programming languages through if statement. The 
syntax is as follows :
         if condition : 
            statement
    '''Note:''' Do not forget indentation (inserting space/tab) in the line after the
 if condition.
    
    In case you want to execute a set of statements when a condition is true and another

set of statement when the condition is false.
         if condition : 
            statement 1
         else :
            statement 2
    
    Multiple if-else statements can be written as follows:
         if condition_1 : 
            statement 1
         elif condition_2 : # 'elif' is short for 'else if'
            statement 2
         elif condition_3 :
            statement 3
        .
        .
         else :
            final statement
&lt;/pre&gt;
[[#TOP]]

=Loops and Conditionals : Fizzbuzz=
====Loops====
&lt;pre&gt;
Loops are used to execute a set of repetitive statements. They are realized
through 'while' and 'for' loops in programming languages. The syntax of 'for' loop is 
as follows :
        for LOOPVARIABLE in SEQUENCE: 
            STATEMENTS
    '''e.g.''' to print all the data from a list we can write:
        for item in list_name
            print(item)
    OR
        for index in range(len(list_name))
            print(list_name[index])
    
    The syntax for while loop is as follows :
    
        while BOOLEANEXPRESSION: 
            STATEMENTS
            INCREMENT/DECREMENT
    
    '''e.g.''' if we want to print all numbers from 1 to 10
        i=1
        while i&lt;=10 :
            print(i,&quot; &quot;)
            i=i+1
    
    'while' loop has indefinite iteration (run-time unknown). So, there must be loop
 break statement in it.
 Whereas 'for' loop is definite in nature (i.e. known or predictable span).&lt;br&gt;

&lt;b&gt;NOTE: Python doesn't have anything like do-while loop.&lt;/b&gt;
&lt;/pre&gt;
[[#TOP]]

==Implementation==
Here, we try to demonstrate the concept of loops and conditionals through a game called Fizzbuzz. The rules are as follows :&lt;br/&gt;
[[File:fizzBuzz.gif]]

• if input number is a multiple of ’3’ print ”Fizz”
&lt;br/&gt;
• if input number is a multiple of ’5’ print ”Buzz”
&lt;br/&gt;
• if input number is a multiple of both '3' and ’5’ print ”FizzBuzz”
&lt;br/&gt;
The pseudo code is as follows :
&lt;pre&gt;
   If input no % 3 == 0 and  input no % 5 == 0 : 
       print ”Fizzbuzz”
   else if input no % 3 == 0 : 
       print ”Fizz”
   else if input no % 5 == 0 : 
       print ”Buzz”
   else :
       print the input no
&lt;/pre&gt;
The order of statements execution matters to get the desired output. The highest priority condition should be first followed by other. In fizzbuzz programming, first checking should be done for both divisibility of 3 and 5. If condition not satisfied only then it should check individually for 3 or 5. So carefully choosing the order is crucial for better programming.
Note: There is some effect of present condition statements chosen on next conditions statements. That is why in first attempt fizzbuzz programming got struck.

Example: 
&lt;pre&gt;
#Code to achieve the above requirement in python3.
i = int(input(&quot;Enter the number&quot;)) 
if i%3 == 0 and i%5 == 0: print(i,&quot;FizzBuzz&quot;)  
elif i%5 == 0: print(i,&quot;Buzz&quot;)
elif i%3 == 0: print(i,&quot;Fizz&quot;)
else: print(i)
&lt;/pre&gt;
Lets put the same into a loop for a range given by the user.
&lt;pre&gt;
def fizzbuzzgame(start,stop):
    for i in range(start,stop+1):
        if i%3 == 0 and i%5 == 0:
            print(i,&quot;FizzBuzz&quot;)
        elif i%5 == 0:
            print(i,&quot;Buzz&quot;)
        elif i%3 == 0:
            print(i,&quot;Fizz&quot;)
        else: print(i)

fizzbuzzgame(50,100)
&lt;/pre&gt;


=== Fizz Buzz game in Interactive mode with Score ===
'''By Ms. Ami Tusharkant Choksi'''
&lt;pre&gt;
def fizzbuzzgame(i):
        if i%3 == 0 and i%5 == 0:
            print(i,&quot;FizzBuzz&quot;)
            return(&quot;fzbz&quot;)
        elif i%5 == 0:
            print(i,&quot;Buzz&quot;)
            return(&quot;bz&quot;)
        elif i%3 == 0:
            print(i,&quot;Fizz&quot;)
            return(&quot;fz&quot;)
        else:
            print(i)
            return(&quot;no&quot;)

ch = 'y'
fizzbuzz=0
fizz=0
buzz=0
nothing=0
print(&quot;&quot;&quot;
 _____  ____  _____  _____  ____   __ __  _____  _____       ____   ____  ___ ___    ___ 
|     ||    ||     ||     ||    \ |  |  ||     ||     |     /    | /    ||   |   |  /  _]
|   __| |  | |__/  ||__/  ||  o  )|  |  ||__/  ||__/  |    |   __||  o  || _   _ | /  [_ 
|  |_   |  | |   __||   __||     ||  |  ||   __||   __|    |  |  ||     ||  \_/  ||    _]
|   _]  |  | |  /  ||  /  ||  O  ||  :  ||  /  ||  /  |    |  |_ ||  _  ||   |   ||   [_ 
|  |    |  | |     ||     ||     ||     ||     ||     |    |     ||  |  ||   |   ||     |
|__|   |____||_____||_____||_____| \__,_||_____||_____|    |___,_||__|__||___|___||_____|
                                                                                         
&quot;&quot;&quot;)   

while(ch == 'y'):
    n=int(input(&quot;Enter a Number : &quot;))
    winLoose=fizzbuzzgame(n)
    if(winLoose == &quot;fz&quot;):
        fizz+=1
    elif(winLoose == &quot;bz&quot;):
        buzz+=1
    elif(winLoose == &quot;fzbz&quot;):
        fizzbuzz+=1
    ch=input(&quot;Do you want to continue playing the game : (y/n)&quot;)
    if(ch=='n'):
        print('Congratulations, your score is\n FizzBuzz:%d\nFizz:%d\nBuzz:%d' %
(fizzbuzz,fizz,buzz))
    
'''Sample Output:

 _____  ____  _____  _____  ____   __ __  _____  _____       ____   ____  ___ ___    ___ 
|     ||    ||     ||     ||    \ |  |  ||     ||     |     /    | /    ||   |   |  /  _]
|   __| |  | |__/  ||__/  ||  o  )|  |  ||__/  ||__/  |    |   __||  o  || _   _ | /  [_ 
|  |_   |  | |   __||   __||     ||  |  ||   __||   __|    |  |  ||     ||  \_/  ||    _]
|   _]  |  | |  /  ||  /  ||  O  ||  :  ||  /  ||  /  |    |  |_ ||  _  ||   |   ||   [_ 
|  |    |  | |     ||     ||     ||     ||     ||     |    |     ||  |  ||   |   ||     |
|__|   |____||_____||_____||_____| \__,_||_____||_____|    |___,_||__|__||___|___||_____|
                                                                                         

Enter a Number : 666
666 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 777
777 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 555
555 FizzBuzz
Do you want to continue playing the game : (y/n)y
Enter a Number : 1
1
Do you want to continue playing the game : (y/n)y
Enter a Number : 789
789 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 25
25 Buzz
Do you want to continue playing the game : (y/n)n
Congratulations, your score is

FizzBuzz:1
Fizz:3
Buzz:1

&lt;/pre&gt;

=Crowd Computing: Just Estimate=
==Wisdom of Crowds==
The concept of ’Wisdom of Crowds’ was proposed by Francis Galton. A weight-judging competition was carried on at the annual show of the West of England Fat Stock and Poultry Exhibition recently held at Plymouth, A fat ox having been selected, competitors bought stamped and numbered cards, each, on which to inscribe their respective names, addresses, and estimates of what the ox would weigh after it had been slaughtered. Those who guessed most successfully received prizes. About 8oo tickets were issued to the par- ticipants. The middlemost estimate of all the estimates recorded was 1207 lbs and the actual weight of the ox was 1198 lbs.

==Our Experiment==
The crowd had to guess the number of candies/gems in a jar. Around 75 people participated in the experiment. The actual number of gems in the jar were 375. The median of all estimates came out to be 300 and the mean of all the estimates came out to be around 396. Median underestimated and mean overestimated the actual value. So according to recent studies, Trimmed mean must be used as an aggregate measure to estimate where Wisdom of Crowds is involved.
[[File:Gemsjar.jpg|center|200px|caption]]

===Trimmed Mean===
In these kinds of experiments, 10% trimmed mean is usually followed. For calculating 10% trimmed mean, remove 10% smallest and 10% largest values from the sample. Calculate the mean of the sample obtained. In the above experiment, the trimmed mean came out to be around 351 which is very close to the actual value.

==Implementation==
Here, we try to demonstrate the concept of trimmed mean through crowd computing.
 Input a list of estimates done by the crowd .
 Sort the list.
 Remove the 10% smallest values.
 Remove the 10% largest values.
 Calculate the mean of the new list obtained .&lt;hr&gt;

==Data of Experiment==       
    Estimates =[1000,1010,1786,2000,1500,1500,100,120,150,150,150,170,175,180,197,200,200,200,200,200,200,220,220,220,220,234,250,250,250,250,250,250,250,250,250,263,270,275,275,286,300,
                300,300,300,300,300,300,300,320,350,350,350,400, 400,400,400,400,450,467,500,500,500,500,500,500,500,550,550,600,600,600,650,700,700,720]

    '''CODE:'''
&lt;pre&gt;
Estimates = [1000,1010,1786,2000,1500,1500,100,120,150,150,150,170,175,180,197,200,200,200,200,200,200,220,220,220,220,234,250,250,250,250,250,250,250,250,250,263,270,275,275,286,300,                300,300,300,300,300,300,300,320,350,350,350,400,400,400,400,400,450,467,500,500,500,500,500,500,500,550,550,600,600,600,650,700,700,720]
Estimates.sort()
offset = int(0.10*len(Estimates))
for i in range(offset):
       del Estimates[0]
       del Estimates[-1]
Sum = 0    
for i in range(len(Estimates)):
       Sum += Estimates[i]
Mean_Value = Sum/len(Estimates)
print(&quot;Mean : &quot;, int(Mean_Value))
#Output:
Mean :  351
&lt;/pre&gt;
&lt;hr&gt;
==Trimmed Mean for the above example== 
&lt;h3&gt;Using scipy library&lt;/h3&gt;
&lt;pre&gt;
#import scipy to use the method of trim_mean
from scipy import stats
trimMean = stats.trim_mean(Estimates, 0.1) # Trim 10% at both ends
print(&quot;Trimmed Mean : &quot;,trimMean)
#Output:
Trimmed Mean :  335.1020408163265
&lt;/pre&gt;

&lt;h3&gt;Without using scipy library&lt;/h3&gt;
&lt;pre&gt;
#Trimmed mean with 10%
p=10/100
#sorted data
data=[2, 4, 6, 7, 11, 21, 81, 90, 105, 121]
n = len(data)
#Remove elements from both end
rem=int(n*p)
newData = data[rem:-rem]
mean = 0
for i in newData:
    mean += i
mean = int(mean/len(newData))
print(&quot;Trimmed mean : &quot;,mean)
#Output: Trimmed mean :  40
&lt;/pre&gt;
[[#Top]]

=Jumbled_Words Permutations: Jumbled Words=
==What are Permutations ?==
A permutation also called ordering of selected number of elements from a list denoted by nPr here we are choosing all elements of a list and so n=r&lt;br&gt;
nPr=n!/(n-r)!&lt;br&gt; as n=r
nPn=n!&lt;br&gt; which gives all possible arrangement of elements present in a list.

 For example, permutations of list [1,2,3] are [1,2,3], [1,3,2], [2,1,3], [2,3,1], 
[3,1,2], and [3,2,1]. 
The number of permutations of a list of elements nPn is given by n!. For example, there are 2! = 2 x 1 = 2 permutations of [1,2], namely [1,2] and [2,1], and 3! = 3 x 2 x 1 = 6 permutations of [1,2,3], as mentioned above.&lt;br/&gt;
[[File:Permutations.jpg]]

==Implementation==
Here, we try to demonstrate the concept of permutations through jumbled words. It is a two player game in which one person presents the other person a different permutation of the word in his mind. The other person has to guess the right word. If he guesses, the he wins otherwise he loses.
 Input an list of words.
 Randomly pick a word from the list of words .
 Shuffle this word and present it to the other player.
 if word guesses by the player is same as the one picked from list of w
     player wins
 else
     player loses

ALTERNATE CODE TO GENERATE THIS GAME:
&lt;pre&gt;
import random
p1=input(&quot;enter player 1 name:&quot;)
p2=input(&quot;enter player 2 name:&quot;)
l=[&quot;rainbow&quot;,&quot;computer&quot;,&quot;robot&quot;,&quot;butter&quot;,&quot;vegetable&quot;,&quot;science&quot;,&quot;correct&quot;]
c1=c2=a1=a2=f1=f2=0
k=1
i=3
def play():
    n=random.choice(l)        ##n=chooses a word from list l
    l1=[]
    for j in n:
       l1.append(j)      ##creates a list for word in n
    for t in range(len(l1)):
       p=random.choice(l1)     ##this randomly displays letters in the list
       print(p)
       l1.remove(p)          ##to avoid the repetition of a letter
    s=input(&quot;enter the word:&quot;)
    if(s==n):
        print(&quot;correct&quot;)
        return 1
    else:
        print(&quot;not correct&quot;)
        print(&quot;answer is&quot;,n)
        return 0
def stat():
     print(&quot;player 1:&quot;)
     print(&quot;score:&quot;,c1)
     print(&quot;answered:&quot;,a1)
     print(&quot;failed:&quot;,f1)
     print(&quot;.............&quot;)
     print(&quot;player 2:&quot;)
     print(&quot;score:&quot;,c2)
     print(&quot;answered:&quot;,a2)
     print(&quot;failed&quot;,f2)
     if(c1&gt;c2):
         print(p1,&quot; won over &quot;,p2)
     elif(c1==c2):
         print(&quot;draw game&quot;)
     else:
         print(p2,&quot; won over &quot;,p1) 
while(i!=4):
      if(i==3):
         if(k==1):
             print(&quot;player 1 turn&quot;)
             print(&quot;your jumbled word is:&quot;)
             k=k+1
             m=play()
             if(m==1):      ##if guessed answer is correct,then score and no.of answered count will be increased
                c1+=1
                a1+=1
             else:
                f1+=1       ##else count of no.of failed to answered will be incremented
         else:
             print(&quot;player 2 turn&quot;)
             print(&quot;your jumbled word is:&quot;)
             k=k-1
             m=play()
             if(m==1):
                c2=c2+1
                a2=a2+1
             else:
                f2=f2+1
       if(i==2):
             print(&quot;present status&quot;)
             stat()
       i=int(input(&quot;enter your choice  1.stop 2.status 3.continue&quot;))
       if(i==1):
             stat()
             i=i+3
&lt;/pre&gt;
&lt;hr&gt;
=== JumbledWord Simple Logic, In Short ===
[[File:jumbledWord.gif]]
&lt;hr&gt;
'''Logic to create a Jumbled Word'''
&lt;hr&gt;
&lt;pre&gt;
#Get Jumbled Word and print it Horizontally
import random

def getJumbledWord(b):
    jumble=''
    l1 = [ b[i] for i in range(0, len(b)) ]
    for t in range(len(l1)):
       p=random.choice(l1)     ##this randomly gets letters from the list      
       jumble=jumble+p       
       l1.remove(p)
    return jumble

b=input(&quot;Enter a word to make it jumbled : &quot;)
print(&quot;Jumbled Word : &quot;, getJumbledWord(b))
&lt;/pre&gt;
&lt;hr&gt;
'''Another Logic to create a Jumbled Word'''
&lt;hr&gt;
&lt;pre&gt;
b=input(&quot;Enter a word to make it jumbled : &quot;)

def getJumbledWord1(b):
    l1 = [ b[i] for i in range(0, len(b)) ]
    random.shuffle(l1)
    str1 = ''.join(l1)
    return str1

print(&quot;Jumbled Word : &quot;, getJumbledWord1(b))
&lt;/pre&gt;

====Sample Output:====
&lt;pre&gt;
---- Output1 
Enter a word to make it jumbled : butter
Jumbled Word :  tbture

---- Output2 
Enter a word to make it jumbled : petriotism
Jumbled Word :  pittrosime
&lt;/pre&gt;

=Theory of Evolution=

== What is Evolution ? ==
Evolution is the change in heritable characteristics over successive generations. The theory of evolution explains that DNA, which acts as a carrier of genetic information from one generation to other, tends to change or mutate occasionally. These changes are reflected in next generations to come. This is how life has evolved on earth from bacteria to human beings.&lt;br&gt;
[[File:Evolution.png|500px]]

== Implementation ==
&lt;pre&gt;An array representing DNA is stored in a file. As genes are forms of DNA, they contain information to be transferred to forthcoming generations. Assume that information is in the form of bits (in the form of 0s and 1s). A number is picked randomly from 1 to the size of the array. A new parameter has been introduced which decides whether mutation would occur or not. If the value of this new parameter is 1 (It is picked randomly from 1 to 100), then only change is reflected down the generations, otherwise it is not. The pseudo code is as follows :
Input an array containing genetic information .
Randomly generate a number (say m) from 1 to length of the array. Randomly generate other number (say p) from 1 to 100.
 
    if p is equal to 1 then 
        if m is 1 then
          set it to 0
        else
          set it to 1
&lt;/pre&gt;
[[#TOP]]</text>
      <sha1>3dvy3pubearmxqfol744gzoy7glpvxu</sha1>
    </revision>
    <revision>
      <id>3512</id>
      <parentid>3511</parentid>
      <timestamp>2018-09-28T00:47:13Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* all and any for List */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="29064">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_3 Contributors of this page]
*Week 3 Playlist: https://www.youtube.com/playlist?list=PLc_j0TNIaWxOVx_z9jAM2UB3RqYNXaoEo
=List=
List is a flexible data structure used for storing a group of data separated by comma. The elements in a list need not be of the same data type.

'''Example:'''
       List_1 = [ 1, 2,3] or 
       List_1 = [&quot;coffee&quot;, &quot;Tea&quot;, &quot;Milk&quot;] or
       List_1 = [1,&quot;coffee&quot;, &quot;Tea&quot;, 3, &quot;5&quot;]

==List Creation==
&lt;pre&gt;a) A list can be created by simply putting values (separated by comma) between square brackets as given below,
       List_1 = [1,&quot;coffee&quot;, &quot;Tea&quot;, 3, &quot;5&quot;] #this creates a list by name List_1 containing following items


Or,
(b)A List can be created from scratch and elements can be added 
        List_2 = [ ]
        List_2.append(&quot;Kala&quot;)
        List_2.append(&quot;Mala&quot;)
Here we use &quot;append&quot; ,which is a function in python that enable us to append or attach an element to a list .
Thus List_2 will now hold [&quot;Kala&quot;,&quot;Mala&quot;]
&lt;/pre&gt;
[[#TOP]]

==Operations and Methods to work with List==
&lt;pre&gt;
a = [25,30,50,90,12,13]
b = [100,300,500,200,250]
&lt;/pre&gt;
&lt;hr&gt;
&lt;table border=2&gt;
  &lt;tr&gt;
    &lt;th&gt;&lt;b&gt;Method/&lt;br&gt;Operator&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Function&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Syntax&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Output&lt;/b&gt;&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;len()&lt;/td&gt;
    &lt;td&gt;Find length of a list&lt;/td&gt;
    &lt;td&gt;len(a)&lt;/td&gt;
    &lt;td&gt;6&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;max()&lt;/td&gt;
    &lt;td&gt;Find maximum element from the list&lt;/td&gt;
    &lt;td&gt;max(a)&lt;/td&gt;
    &lt;td&gt;90&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;min()&lt;/td&gt;
    &lt;td&gt;Find minimum element from the list&lt;/td&gt;
    &lt;td&gt;min(a)&lt;/td&gt;
    &lt;td&gt;12&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sum()&lt;/td&gt;
    &lt;td&gt;Returns sum of all elements of the list&lt;/td&gt;
    &lt;td&gt;sum(a)&lt;/td&gt;
    &lt;td&gt;220&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;reverse()&lt;/td&gt;
    &lt;td&gt;Reverses the original list&lt;/td&gt;
    &lt;td&gt;a.reverse()&lt;/td&gt;
    &lt;td&gt;[13, 12, 90, 50, 30, 25]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sort()&lt;/td&gt;
    &lt;td&gt;Sorts the original list in ascending order&lt;/td&gt;
    &lt;td&gt;a.sort()&lt;/td&gt;
    &lt;td&gt;[12, 13, 25, 30, 50, 90]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sorted()&lt;/td&gt;
    &lt;td&gt;Returns the new sorted list &lt;/td&gt;
    &lt;td&gt;sorted(a)&lt;/td&gt;
    &lt;td&gt;[12, 13, 25, 30, 50, 90]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;insert()&lt;/td&gt;
    &lt;td&gt;Insert at a particular index in the list, and shifts remaining elements&lt;/td&gt;
    &lt;td&gt;a.insert(3,3)&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 3, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;append()&lt;/td&gt;
    &lt;td&gt;Adds elements/object to the end of the list&lt;/td&gt;
    &lt;td&gt;a.append(5)&lt;br&gt;a.append([10,20])&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 5]&lt;br&gt;[25, 30, 50, 90, 12, 13, [10, 20]]&lt;br&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;extend()&lt;/td&gt;
    &lt;td&gt;Adds object to the end of the list as elements not as object&lt;/td&gt;
    &lt;td&gt;a.extend([10,20])&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 10, 20]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;*&amp;nbsp;&amp;nbsp;Repeatation&lt;br&gt;operator&lt;/td&gt;
    &lt;td&gt;Repeat the list for n times and returns a new list&lt;/td&gt;
    &lt;td&gt;a*2&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 25, 30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;+ Concatenation&lt;br&gt;operator&lt;/td&gt;
    &lt;td&gt;Concatenates two lists, and returns a new list&lt;/td&gt;
    &lt;td&gt;a+b&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 100, 300, 500, 200, 250]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;index()&lt;/td&gt;
    &lt;td&gt;Finds index of a particular element in the list or not&lt;/td&gt;
    &lt;td&gt;a.index(25)&lt;br&gt;a.index(0)&lt;br&gt;&lt;/td&gt;
    &lt;td&gt;0&lt;br&gt;&lt;br&gt;ValueError: 0 is not in list&lt;br&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;in operator&lt;/td&gt;
    &lt;td&gt;Finds whether a particular element is in the list or not, returns boolean&lt;/td&gt;
    &lt;td&gt;25 in a&lt;/td&gt;
    &lt;td&gt;True&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;not in operator&lt;/td&gt;
    &lt;td&gt;Checks if element is not available in list, returns boolean&lt;/td&gt;
    &lt;td&gt;25 not in a&lt;/td&gt;
    &lt;td&gt;False&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;count()&lt;/td&gt;
    &lt;td&gt;Counts the number of occurence of an element in the list&lt;/td&gt;
    &lt;td&gt;a.count(25)&lt;/td&gt;
    &lt;td&gt;1&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;remove()&lt;/td&gt;
    &lt;td&gt;Removes an element from the list&lt;/td&gt;
    &lt;td&gt;a.remove(25)&lt;/td&gt;
    &lt;td&gt; [30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;pop()&lt;/td&gt;
    &lt;td&gt;Delete and return item at index 0&lt;/td&gt;
    &lt;td&gt;a.pop(0)&lt;/td&gt;
    &lt;td&gt;25 , a will be [30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;del&lt;/td&gt;
    &lt;td&gt;Deletes item at a particular index from the list&lt;/td&gt;
    &lt;td&gt;del a[0]&lt;/td&gt;
    &lt;td&gt;[30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;

==Printing the List==
=== Print whole list ===
A list can be printed simply or using a ''for / while'' loop 

 print(List_2)     # To print the entire list
This code will print      
 ['Kala','Mala']     

===Print element at a particular index===
&lt;pre&gt;
Using index position
    List_2[0]     # prints 'Kala' ,i.e,the value at index position 0.
    List_2[1]     # prints 'Mala'.
&lt;/pre&gt;
=== Without using index position ===
&lt;pre&gt;
for item in List_2:   # here item is a variable used to access elements in list.
       print(item)
   This code snippet prints 
    Kala
    Mala
&lt;/pre&gt;
[[#TOP]]

==Search for a particular element in list==
Elements in a list can be searched by one of the two ways:
=== using index() function===
&lt;pre&gt;
ages1 = [11,23,12,23,45]

#if element is available in the list, index() returns the index value on which, the element is present.
print(ages1.index(45))#Output: 4

#if element is not available in the list, index() returns ''ValueError''
print(ages1.index(0))#Output: ValueError:
&lt;/pre&gt;

In programming, if such error occurs, program gets terminated. It can be solved using exception handling.
e.g.
&lt;pre&gt;
ages1 = [11,23,12,23,45]

try:
    print(ages1.index(0))
except ValueError:
    print(&quot;Exception has occured&quot;)    
    print(&quot;Element is not found in the list&quot;)

&lt;/pre&gt;
&lt;pre&gt;
'''Output: 
Exception has occured
Element is not found in the list
'''&lt;/pre&gt;
[[#TOP]]

=== using 'in' operator===
''in'' operator is used to check whether a particular element is available in the list or not.e.g.

&lt;pre&gt;
ages1 = [11,23,12,23,45]
no=11

if no in ages1:
    print(&quot;no is there in the list&quot;)
else:    
    print(&quot;no is NOT there in the list&quot;)
&lt;/pre&gt;
&lt;pre&gt;
#Output: no is there in the list
&lt;/pre&gt;

'''Number is not there in the list'''
&lt;pre&gt;
ages1 = [11,23,12,23,45]
no=15

if no in ages1:
    print(&quot;no is there in the list&quot;)
else:    
    print(&quot;no is NOT there in the list&quot;)
&lt;/pre&gt;
&lt;pre&gt;
Output: no is NOT there in the list
&lt;/pre&gt;
[[#TOP]]

==Updating the List==
The lists can be updated using ''append'' or ''insert'' function.  Append adds the element to the end of the list and Insert adds the element in the specified position.
   List_2.append(&quot;Sheela&quot;)    # add the element 'Sheela' to the end of the list.
   print (List_2) will output 
   ['Kala', 'Mala', 'Sheela']
   
   List_2.insert(1,&quot;Bala&quot;)    # add the element &quot;Bala&quot; in the list at the index 1.
   print (List_2) will output 
   ['Kala', 'Bala','Mala', 'Sheela']

=== Extend the list by adding elements of other list at end using extend()===
&lt;pre&gt;
ages = [11,23,12,23,45]
ages.extend([57,58])
print(ages)
&lt;/pre&gt;

&lt;pre&gt;
#Output: [11, 23, 12, 23, 45, 57, 58]
&lt;/pre&gt;

==== Difference between ''append and extend'' ====
Difference between append and extend can be easily understood, by the following example.

&lt;pre&gt;
appendlist = [11,23,12,23,45]
appendlist.append([57,58])

extendlist= [11,23,12,23,45]
extendlist.extend([57,58])
&lt;/pre&gt;

&lt;pre&gt;
'''Output:
[11, 23, 12, 23, 45, [57, 58]]
[11, 23, 12, 23, 45, 57, 58]'''
&lt;/pre&gt;
[[#TOP]]

==Basic Operations on List==
===Frequency of Occurrence===
list.count(object) will return the number of times the object occur in the list.
  '''Example'''
    ages = [11,23,12,23,45,43,22,24,23]
    ages.count(23) will return
    3
    ages.count(100) will return
    0

===Length of the List===
len(list) will return the length of the list ie. the number of objects in the list.
  '''Example'''
    ages = [11,23,12,23,45,43,22,24,23]
    len(ages) will output
    9
To print the objects in the list either use ''for item in list'' or ''for index in range(len(list))''
    for item in ages:       
        print (item)  
        (OR)
    for index in range(len(ages)) :
        print (ages[index])
===Sort the List===
list.sort() will sort the list in ascending order
  '''Example'''
    ages = [11,23,12,23,45,43,22,24,23]
    ages.sort() 
    print (ages) 
    [11, 12, 22, 23, 23, 23, 24, 43, 45]

[[#TOP]]

===Sort the List using sorted() function===
sorted(list1) will sort the list and return a new list, it doesn't modify the original list
&lt;br&gt;'''Example: Sort in ascending order'''
&lt;pre&gt;
ages = [11,23,12,23,45,43,22,24,23]
newList=sorted(ages)
print(newList)

#Output: [11, 12, 22, 23, 23, 23, 24, 43, 45]
&lt;/pre&gt;

&lt;br&gt;'''Example: Sort in descending order'''
&lt;pre&gt;
ages = [11,23,12,23,45,43,22,24,23]
newList=sorted(ages,reverse=True)
print(newList)

#Output: [45, 43, 24, 23, 23, 23, 22, 12, 11]
&lt;/pre&gt;

===Reverse the List===
list.reverse() will reverse the original list
  '''Example'''
    ages = [11, 12, 22, 23, 23, 23, 24, 43, 45]
    ages.reverse()
    print (ages)
    [45, 43, 24, 23, 23, 23, 22, 12, 11]

Both sort() and reverse() list operation will work on numeric and alphanumeric data list.

A special use of the reverse() function is to descend a list that is sorted in ascending order.

  '''Example'''
&lt;pre&gt;
ages = [11, 12, 22, 23, 23, 23, 24, 43, 45]
ages.sort()
print(ages)
ages.reverse()
print(ages)
&lt;/pre&gt;

===Slicing===
Used to retrieve an object or objects in a range as a list  
  '''Example'''
Use ''list[index]'' to retrieve the object at the given index
         In [1]: student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
         In [2]: student[3]     #Object at index 3.  Remember index starts at 0
         Out[2]: 'Geetha'      


Use ''list[start_index : end_index + 1]'' to retrieve objects from the start_index to end_index 
         In [3]: student[2:4]     # Objects from index 2 to 3 as List. Note the [ and ]
         Out[3]: ['Vijay', 'Geetha']   


Use ''list[:]'' to retrieve objects from the starting of the list to the end of the list. 
The default start value will be the starting index of the list (i.e. 0) and the default end value
will be the length of the list 
         In [4]: student[:]        # prints the entire list
         Out[4]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma', 'Janani']


         In [5]: student[:5]       # prints the objects from the start of the list upto object at index 4
         Out[5]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran']


         In [6]: student[2:]       # prints the objects from index 2 upto the end of the list
         Out[6]: ['Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma', 'Janani']


Negative index too is available in Python. It starts from last element of the list. i.e.

         In [7]:student[-1]        #prints last index of list
         Out[7]: 'Janani'


         In [8]:student[-1:-8]     #prints empty list
         Out[8]: []


         In [9]:student[-8:-1]     #prints -8th index to -1st index elements
         Out[9]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma']

[[#TOP]]
===Removing Item from list ===
----

Is used to remove a specific item from the list.

'''Example:'''
 
Use list.remove(entry/value)  Or   del list[index]    Or list.pop(index)
         student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
         student.remove(&quot;Arun&quot;)   #This will delete item &quot;Arun&quot;
         Or    
         del student[0]           # This will delete item at index 0
         Or
         student.pop(0)         # This will delete and return item at index 0


         print(student)    
         Output: [&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]

[[#TOP]]
===Delete list ===
----
Used to delete complete list

'''Example'''

Use del &lt;list name&gt;
         student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
         del student

===Concatenation of two lists===
----
''+'' is the concatenation operator which is used concatenate two lists. 
&lt;pre&gt;
ages1 = [11,23,12,23,45]
ages2 = [25, 24, 43, 47]
age=ages1+ages2
print(age)
#Output: [11, 23, 12, 23, 45, 25, 24, 43, 47]
&lt;/pre&gt;

===Repeatation of a list ===
----
''*'' is the operator to repeat a particular list.
&lt;pre&gt;
ages1 = [11,23,12,23,45]
age=ages1*5 #ages1 list is repeated 5 times and stroed in ''age'' list
print(age)

#Output: [11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45]
&lt;/pre&gt;

=== all and any for List===
all() and any() are special functions to check whether all elements in iterable is ''True'' or any element is ''True''
&lt;ol&gt;
&lt;li&gt;If all elements in a list are ''True'', '''all()''' will return ''True''&lt;/li&gt;
&lt;li&gt;If iterable is ''empty'', '''all()''' will return ''True''&lt;/li&gt;
&lt;li&gt;If iterable contains at least one ''True'', '''any()''' will return ''True''&lt;/li&gt;
&lt;li&gt;If iterable is ''empty'', '''any()''' will return ''False''&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;
lsit=[True, True, True, True]
print(all(lsit))#Output: True
print(any(lsit))#Output: True

lsit1=[True, False, True, True]
print(all(lsit1))#Output: False
print(any(lsit1))#Output: True

lsit2=[False,False,False]
print(all(lsit2))#Output: False
print(any(lsit2))#Output: False

lsit3=[]
print(all(lsit3))#Output: True
print(any(lsit3))#Output: False
&lt;/pre&gt;

==Conditional Statements==
&lt;pre&gt;Conditionals are used to check the condition and change the flow of the program 
accordingly. They are realized in programming languages through if statement. The 
syntax is as follows :
         if condition : 
            statement
    '''Note:''' Do not forget indentation (inserting space/tab) in the line after the
 if condition.
    
    In case you want to execute a set of statements when a condition is true and another

set of statement when the condition is false.
         if condition : 
            statement 1
         else :
            statement 2
    
    Multiple if-else statements can be written as follows:
         if condition_1 : 
            statement 1
         elif condition_2 : # 'elif' is short for 'else if'
            statement 2
         elif condition_3 :
            statement 3
        .
        .
         else :
            final statement
&lt;/pre&gt;
[[#TOP]]

=Loops and Conditionals : Fizzbuzz=
====Loops====
&lt;pre&gt;
Loops are used to execute a set of repetitive statements. They are realized
through 'while' and 'for' loops in programming languages. The syntax of 'for' loop is 
as follows :
        for LOOPVARIABLE in SEQUENCE: 
            STATEMENTS
    '''e.g.''' to print all the data from a list we can write:
        for item in list_name
            print(item)
    OR
        for index in range(len(list_name))
            print(list_name[index])
    
    The syntax for while loop is as follows :
    
        while BOOLEANEXPRESSION: 
            STATEMENTS
            INCREMENT/DECREMENT
    
    '''e.g.''' if we want to print all numbers from 1 to 10
        i=1
        while i&lt;=10 :
            print(i,&quot; &quot;)
            i=i+1
    
    'while' loop has indefinite iteration (run-time unknown). So, there must be loop
 break statement in it.
 Whereas 'for' loop is definite in nature (i.e. known or predictable span).&lt;br&gt;

&lt;b&gt;NOTE: Python doesn't have anything like do-while loop.&lt;/b&gt;
&lt;/pre&gt;
[[#TOP]]

==Implementation==
Here, we try to demonstrate the concept of loops and conditionals through a game called Fizzbuzz. The rules are as follows :&lt;br/&gt;
[[File:fizzBuzz.gif]]

• if input number is a multiple of ’3’ print ”Fizz”
&lt;br/&gt;
• if input number is a multiple of ’5’ print ”Buzz”
&lt;br/&gt;
• if input number is a multiple of both '3' and ’5’ print ”FizzBuzz”
&lt;br/&gt;
The pseudo code is as follows :
&lt;pre&gt;
   If input no % 3 == 0 and  input no % 5 == 0 : 
       print ”Fizzbuzz”
   else if input no % 3 == 0 : 
       print ”Fizz”
   else if input no % 5 == 0 : 
       print ”Buzz”
   else :
       print the input no
&lt;/pre&gt;
The order of statements execution matters to get the desired output. The highest priority condition should be first followed by other. In fizzbuzz programming, first checking should be done for both divisibility of 3 and 5. If condition not satisfied only then it should check individually for 3 or 5. So carefully choosing the order is crucial for better programming.
Note: There is some effect of present condition statements chosen on next conditions statements. That is why in first attempt fizzbuzz programming got struck.

Example: 
&lt;pre&gt;
#Code to achieve the above requirement in python3.
i = int(input(&quot;Enter the number&quot;)) 
if i%3 == 0 and i%5 == 0: print(i,&quot;FizzBuzz&quot;)  
elif i%5 == 0: print(i,&quot;Buzz&quot;)
elif i%3 == 0: print(i,&quot;Fizz&quot;)
else: print(i)
&lt;/pre&gt;
Lets put the same into a loop for a range given by the user.
&lt;pre&gt;
def fizzbuzzgame(start,stop):
    for i in range(start,stop+1):
        if i%3 == 0 and i%5 == 0:
            print(i,&quot;FizzBuzz&quot;)
        elif i%5 == 0:
            print(i,&quot;Buzz&quot;)
        elif i%3 == 0:
            print(i,&quot;Fizz&quot;)
        else: print(i)

fizzbuzzgame(50,100)
&lt;/pre&gt;


=== Fizz Buzz game in Interactive mode with Score ===
'''By Ms. Ami Tusharkant Choksi'''
&lt;pre&gt;
def fizzbuzzgame(i):
        if i%3 == 0 and i%5 == 0:
            print(i,&quot;FizzBuzz&quot;)
            return(&quot;fzbz&quot;)
        elif i%5 == 0:
            print(i,&quot;Buzz&quot;)
            return(&quot;bz&quot;)
        elif i%3 == 0:
            print(i,&quot;Fizz&quot;)
            return(&quot;fz&quot;)
        else:
            print(i)
            return(&quot;no&quot;)

ch = 'y'
fizzbuzz=0
fizz=0
buzz=0
nothing=0
print(&quot;&quot;&quot;
 _____  ____  _____  _____  ____   __ __  _____  _____       ____   ____  ___ ___    ___ 
|     ||    ||     ||     ||    \ |  |  ||     ||     |     /    | /    ||   |   |  /  _]
|   __| |  | |__/  ||__/  ||  o  )|  |  ||__/  ||__/  |    |   __||  o  || _   _ | /  [_ 
|  |_   |  | |   __||   __||     ||  |  ||   __||   __|    |  |  ||     ||  \_/  ||    _]
|   _]  |  | |  /  ||  /  ||  O  ||  :  ||  /  ||  /  |    |  |_ ||  _  ||   |   ||   [_ 
|  |    |  | |     ||     ||     ||     ||     ||     |    |     ||  |  ||   |   ||     |
|__|   |____||_____||_____||_____| \__,_||_____||_____|    |___,_||__|__||___|___||_____|
                                                                                         
&quot;&quot;&quot;)   

while(ch == 'y'):
    n=int(input(&quot;Enter a Number : &quot;))
    winLoose=fizzbuzzgame(n)
    if(winLoose == &quot;fz&quot;):
        fizz+=1
    elif(winLoose == &quot;bz&quot;):
        buzz+=1
    elif(winLoose == &quot;fzbz&quot;):
        fizzbuzz+=1
    ch=input(&quot;Do you want to continue playing the game : (y/n)&quot;)
    if(ch=='n'):
        print('Congratulations, your score is\n FizzBuzz:%d\nFizz:%d\nBuzz:%d' %
(fizzbuzz,fizz,buzz))
    
'''Sample Output:

 _____  ____  _____  _____  ____   __ __  _____  _____       ____   ____  ___ ___    ___ 
|     ||    ||     ||     ||    \ |  |  ||     ||     |     /    | /    ||   |   |  /  _]
|   __| |  | |__/  ||__/  ||  o  )|  |  ||__/  ||__/  |    |   __||  o  || _   _ | /  [_ 
|  |_   |  | |   __||   __||     ||  |  ||   __||   __|    |  |  ||     ||  \_/  ||    _]
|   _]  |  | |  /  ||  /  ||  O  ||  :  ||  /  ||  /  |    |  |_ ||  _  ||   |   ||   [_ 
|  |    |  | |     ||     ||     ||     ||     ||     |    |     ||  |  ||   |   ||     |
|__|   |____||_____||_____||_____| \__,_||_____||_____|    |___,_||__|__||___|___||_____|
                                                                                         

Enter a Number : 666
666 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 777
777 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 555
555 FizzBuzz
Do you want to continue playing the game : (y/n)y
Enter a Number : 1
1
Do you want to continue playing the game : (y/n)y
Enter a Number : 789
789 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 25
25 Buzz
Do you want to continue playing the game : (y/n)n
Congratulations, your score is

FizzBuzz:1
Fizz:3
Buzz:1

&lt;/pre&gt;

=Crowd Computing: Just Estimate=
==Wisdom of Crowds==
The concept of ’Wisdom of Crowds’ was proposed by Francis Galton. A weight-judging competition was carried on at the annual show of the West of England Fat Stock and Poultry Exhibition recently held at Plymouth, A fat ox having been selected, competitors bought stamped and numbered cards, each, on which to inscribe their respective names, addresses, and estimates of what the ox would weigh after it had been slaughtered. Those who guessed most successfully received prizes. About 8oo tickets were issued to the par- ticipants. The middlemost estimate of all the estimates recorded was 1207 lbs and the actual weight of the ox was 1198 lbs.

==Our Experiment==
The crowd had to guess the number of candies/gems in a jar. Around 75 people participated in the experiment. The actual number of gems in the jar were 375. The median of all estimates came out to be 300 and the mean of all the estimates came out to be around 396. Median underestimated and mean overestimated the actual value. So according to recent studies, Trimmed mean must be used as an aggregate measure to estimate where Wisdom of Crowds is involved.
[[File:Gemsjar.jpg|center|200px|caption]]

===Trimmed Mean===
In these kinds of experiments, 10% trimmed mean is usually followed. For calculating 10% trimmed mean, remove 10% smallest and 10% largest values from the sample. Calculate the mean of the sample obtained. In the above experiment, the trimmed mean came out to be around 351 which is very close to the actual value.

==Implementation==
Here, we try to demonstrate the concept of trimmed mean through crowd computing.
 Input a list of estimates done by the crowd .
 Sort the list.
 Remove the 10% smallest values.
 Remove the 10% largest values.
 Calculate the mean of the new list obtained .&lt;hr&gt;

==Data of Experiment==       
    Estimates =[1000,1010,1786,2000,1500,1500,100,120,150,150,150,170,175,180,197,200,200,200,200,200,200,220,220,220,220,234,250,250,250,250,250,250,250,250,250,263,270,275,275,286,300,
                300,300,300,300,300,300,300,320,350,350,350,400, 400,400,400,400,450,467,500,500,500,500,500,500,500,550,550,600,600,600,650,700,700,720]

    '''CODE:'''
&lt;pre&gt;
Estimates = [1000,1010,1786,2000,1500,1500,100,120,150,150,150,170,175,180,197,200,200,200,200,200,200,220,220,220,220,234,250,250,250,250,250,250,250,250,250,263,270,275,275,286,300,                300,300,300,300,300,300,300,320,350,350,350,400,400,400,400,400,450,467,500,500,500,500,500,500,500,550,550,600,600,600,650,700,700,720]
Estimates.sort()
offset = int(0.10*len(Estimates))
for i in range(offset):
       del Estimates[0]
       del Estimates[-1]
Sum = 0    
for i in range(len(Estimates)):
       Sum += Estimates[i]
Mean_Value = Sum/len(Estimates)
print(&quot;Mean : &quot;, int(Mean_Value))
#Output:
Mean :  351
&lt;/pre&gt;
&lt;hr&gt;
==Trimmed Mean for the above example== 
&lt;h3&gt;Using scipy library&lt;/h3&gt;
&lt;pre&gt;
#import scipy to use the method of trim_mean
from scipy import stats
trimMean = stats.trim_mean(Estimates, 0.1) # Trim 10% at both ends
print(&quot;Trimmed Mean : &quot;,trimMean)
#Output:
Trimmed Mean :  335.1020408163265
&lt;/pre&gt;

&lt;h3&gt;Without using scipy library&lt;/h3&gt;
&lt;pre&gt;
#Trimmed mean with 10%
p=10/100
#sorted data
data=[2, 4, 6, 7, 11, 21, 81, 90, 105, 121]
n = len(data)
#Remove elements from both end
rem=int(n*p)
newData = data[rem:-rem]
mean = 0
for i in newData:
    mean += i
mean = int(mean/len(newData))
print(&quot;Trimmed mean : &quot;,mean)
#Output: Trimmed mean :  40
&lt;/pre&gt;
[[#Top]]

=Jumbled_Words Permutations: Jumbled Words=
==What are Permutations ?==
A permutation also called ordering of selected number of elements from a list denoted by nPr here we are choosing all elements of a list and so n=r&lt;br&gt;
nPr=n!/(n-r)!&lt;br&gt; as n=r
nPn=n!&lt;br&gt; which gives all possible arrangement of elements present in a list.

 For example, permutations of list [1,2,3] are [1,2,3], [1,3,2], [2,1,3], [2,3,1], 
[3,1,2], and [3,2,1]. 
The number of permutations of a list of elements nPn is given by n!. For example, there are 2! = 2 x 1 = 2 permutations of [1,2], namely [1,2] and [2,1], and 3! = 3 x 2 x 1 = 6 permutations of [1,2,3], as mentioned above.&lt;br/&gt;
[[File:Permutations.jpg]]

==Implementation==
Here, we try to demonstrate the concept of permutations through jumbled words. It is a two player game in which one person presents the other person a different permutation of the word in his mind. The other person has to guess the right word. If he guesses, the he wins otherwise he loses.
 Input an list of words.
 Randomly pick a word from the list of words .
 Shuffle this word and present it to the other player.
 if word guesses by the player is same as the one picked from list of w
     player wins
 else
     player loses

ALTERNATE CODE TO GENERATE THIS GAME:
&lt;pre&gt;
import random
p1=input(&quot;enter player 1 name:&quot;)
p2=input(&quot;enter player 2 name:&quot;)
l=[&quot;rainbow&quot;,&quot;computer&quot;,&quot;robot&quot;,&quot;butter&quot;,&quot;vegetable&quot;,&quot;science&quot;,&quot;correct&quot;]
c1=c2=a1=a2=f1=f2=0
k=1
i=3
def play():
    n=random.choice(l)        ##n=chooses a word from list l
    l1=[]
    for j in n:
       l1.append(j)      ##creates a list for word in n
    for t in range(len(l1)):
       p=random.choice(l1)     ##this randomly displays letters in the list
       print(p)
       l1.remove(p)          ##to avoid the repetition of a letter
    s=input(&quot;enter the word:&quot;)
    if(s==n):
        print(&quot;correct&quot;)
        return 1
    else:
        print(&quot;not correct&quot;)
        print(&quot;answer is&quot;,n)
        return 0
def stat():
     print(&quot;player 1:&quot;)
     print(&quot;score:&quot;,c1)
     print(&quot;answered:&quot;,a1)
     print(&quot;failed:&quot;,f1)
     print(&quot;.............&quot;)
     print(&quot;player 2:&quot;)
     print(&quot;score:&quot;,c2)
     print(&quot;answered:&quot;,a2)
     print(&quot;failed&quot;,f2)
     if(c1&gt;c2):
         print(p1,&quot; won over &quot;,p2)
     elif(c1==c2):
         print(&quot;draw game&quot;)
     else:
         print(p2,&quot; won over &quot;,p1) 
while(i!=4):
      if(i==3):
         if(k==1):
             print(&quot;player 1 turn&quot;)
             print(&quot;your jumbled word is:&quot;)
             k=k+1
             m=play()
             if(m==1):      ##if guessed answer is correct,then score and no.of answered count will be increased
                c1+=1
                a1+=1
             else:
                f1+=1       ##else count of no.of failed to answered will be incremented
         else:
             print(&quot;player 2 turn&quot;)
             print(&quot;your jumbled word is:&quot;)
             k=k-1
             m=play()
             if(m==1):
                c2=c2+1
                a2=a2+1
             else:
                f2=f2+1
       if(i==2):
             print(&quot;present status&quot;)
             stat()
       i=int(input(&quot;enter your choice  1.stop 2.status 3.continue&quot;))
       if(i==1):
             stat()
             i=i+3
&lt;/pre&gt;
&lt;hr&gt;
=== JumbledWord Simple Logic, In Short ===
[[File:jumbledWord.gif]]
&lt;hr&gt;
'''Logic to create a Jumbled Word'''
&lt;hr&gt;
&lt;pre&gt;
#Get Jumbled Word and print it Horizontally
import random

def getJumbledWord(b):
    jumble=''
    l1 = [ b[i] for i in range(0, len(b)) ]
    for t in range(len(l1)):
       p=random.choice(l1)     ##this randomly gets letters from the list      
       jumble=jumble+p       
       l1.remove(p)
    return jumble

b=input(&quot;Enter a word to make it jumbled : &quot;)
print(&quot;Jumbled Word : &quot;, getJumbledWord(b))
&lt;/pre&gt;
&lt;hr&gt;
'''Another Logic to create a Jumbled Word'''
&lt;hr&gt;
&lt;pre&gt;
b=input(&quot;Enter a word to make it jumbled : &quot;)

def getJumbledWord1(b):
    l1 = [ b[i] for i in range(0, len(b)) ]
    random.shuffle(l1)
    str1 = ''.join(l1)
    return str1

print(&quot;Jumbled Word : &quot;, getJumbledWord1(b))
&lt;/pre&gt;

====Sample Output:====
&lt;pre&gt;
---- Output1 
Enter a word to make it jumbled : butter
Jumbled Word :  tbture

---- Output2 
Enter a word to make it jumbled : petriotism
Jumbled Word :  pittrosime
&lt;/pre&gt;

=Theory of Evolution=

== What is Evolution ? ==
Evolution is the change in heritable characteristics over successive generations. The theory of evolution explains that DNA, which acts as a carrier of genetic information from one generation to other, tends to change or mutate occasionally. These changes are reflected in next generations to come. This is how life has evolved on earth from bacteria to human beings.&lt;br&gt;
[[File:Evolution.png|500px]]

== Implementation ==
&lt;pre&gt;An array representing DNA is stored in a file. As genes are forms of DNA, they contain information to be transferred to forthcoming generations. Assume that information is in the form of bits (in the form of 0s and 1s). A number is picked randomly from 1 to the size of the array. A new parameter has been introduced which decides whether mutation would occur or not. If the value of this new parameter is 1 (It is picked randomly from 1 to 100), then only change is reflected down the generations, otherwise it is not. The pseudo code is as follows :
Input an array containing genetic information .
Randomly generate a number (say m) from 1 to length of the array. Randomly generate other number (say p) from 1 to 100.
 
    if p is equal to 1 then 
        if m is 1 then
          set it to 0
        else
          set it to 1
&lt;/pre&gt;
[[#TOP]]</text>
      <sha1>61634xf3esp2bs2tkv2ndxrwed2xwlg</sha1>
    </revision>
    <revision>
      <id>3513</id>
      <parentid>3512</parentid>
      <timestamp>2018-09-28T00:51:58Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* Operations and Methods to work with List */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="29257">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_3 Contributors of this page]
*Week 3 Playlist: https://www.youtube.com/playlist?list=PLc_j0TNIaWxOVx_z9jAM2UB3RqYNXaoEo
=List=
List is a flexible data structure used for storing a group of data separated by comma. The elements in a list need not be of the same data type.

'''Example:'''
       List_1 = [ 1, 2,3] or 
       List_1 = [&quot;coffee&quot;, &quot;Tea&quot;, &quot;Milk&quot;] or
       List_1 = [1,&quot;coffee&quot;, &quot;Tea&quot;, 3, &quot;5&quot;]

==List Creation==
&lt;pre&gt;a) A list can be created by simply putting values (separated by comma) between square brackets as given below,
       List_1 = [1,&quot;coffee&quot;, &quot;Tea&quot;, 3, &quot;5&quot;] #this creates a list by name List_1 containing following items


Or,
(b)A List can be created from scratch and elements can be added 
        List_2 = [ ]
        List_2.append(&quot;Kala&quot;)
        List_2.append(&quot;Mala&quot;)
Here we use &quot;append&quot; ,which is a function in python that enable us to append or attach an element to a list .
Thus List_2 will now hold [&quot;Kala&quot;,&quot;Mala&quot;]
&lt;/pre&gt;
[[#TOP]]

==Operations and Methods to work with List==
&lt;pre&gt;
a = [25,30,50,90,12,13]
b = [100,300,500,200,250]
&lt;/pre&gt;
&lt;hr&gt;
&lt;table border=2&gt;
  &lt;tr&gt;
    &lt;th&gt;&lt;b&gt;Method/&lt;br&gt;Operator&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Function&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Syntax&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Output&lt;/b&gt;&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;len()&lt;/td&gt;
    &lt;td&gt;Find length of a list&lt;/td&gt;
    &lt;td&gt;len(a)&lt;/td&gt;
    &lt;td&gt;6&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;max()&lt;/td&gt;
    &lt;td&gt;Find maximum element from the list&lt;/td&gt;
    &lt;td&gt;max(a)&lt;/td&gt;
    &lt;td&gt;90&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;min()&lt;/td&gt;
    &lt;td&gt;Find minimum element from the list&lt;/td&gt;
    &lt;td&gt;min(a)&lt;/td&gt;
    &lt;td&gt;12&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sum()&lt;/td&gt;
    &lt;td&gt;Returns sum of all elements of the list&lt;/td&gt;
    &lt;td&gt;sum(a)&lt;/td&gt;
    &lt;td&gt;220&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;reverse()&lt;/td&gt;
    &lt;td&gt;Reverses the original list&lt;/td&gt;
    &lt;td&gt;a.reverse()&lt;/td&gt;
    &lt;td&gt;[13, 12, 90, 50, 30, 25]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sort()&lt;/td&gt;
    &lt;td&gt;Sorts the original list in ascending order&lt;/td&gt;
    &lt;td&gt;a.sort()&lt;/td&gt;
    &lt;td&gt;[12, 13, 25, 30, 50, 90]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sorted()&lt;/td&gt;
    &lt;td&gt;Returns the new sorted list &lt;/td&gt;
    &lt;td&gt;sorted(a)&lt;/td&gt;
    &lt;td&gt;[12, 13, 25, 30, 50, 90]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;insert()&lt;/td&gt;
    &lt;td&gt;Insert at a particular index in the list, and shifts remaining elements&lt;/td&gt;
    &lt;td&gt;a.insert(3,3)&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 3, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;append()&lt;/td&gt;
    &lt;td&gt;Adds elements/object to the end of the list&lt;/td&gt;
    &lt;td&gt;a.append(5)&lt;br&gt;a.append([10,20])&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 5]&lt;br&gt;[25, 30, 50, 90, 12, 13, [10, 20]]&lt;br&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;extend()&lt;/td&gt;
    &lt;td&gt;Adds object to the end of the list as elements not as object&lt;/td&gt;
    &lt;td&gt;a.extend([10,20])&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 10, 20]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;*&amp;nbsp;&amp;nbsp;Repeatation&lt;br&gt;operator&lt;/td&gt;
    &lt;td&gt;Repeat the list for n times and returns a new list&lt;/td&gt;
    &lt;td&gt;a*2&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 25, 30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;+ Concatenation&lt;br&gt;operator&lt;/td&gt;
    &lt;td&gt;Concatenates two lists, and returns a new list&lt;/td&gt;
    &lt;td&gt;a+b&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 100, 300, 500, 200, 250]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;index()&lt;/td&gt;
    &lt;td&gt;Finds index of a particular element in the list or not&lt;/td&gt;
    &lt;td&gt;a.index(25)&lt;br&gt;a.index(0)&lt;br&gt;&lt;/td&gt;
    &lt;td&gt;0&lt;br&gt;&lt;br&gt;ValueError: 0 is not in list&lt;br&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;in operator&lt;/td&gt;
    &lt;td&gt;Finds whether a particular element is in the list or not, returns boolean&lt;/td&gt;
    &lt;td&gt;25 in a&lt;/td&gt;
    &lt;td&gt;True&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;not in operator&lt;/td&gt;
    &lt;td&gt;Checks if element is not available in list, returns boolean&lt;/td&gt;
    &lt;td&gt;25 not in a&lt;/td&gt;
    &lt;td&gt;False&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;count()&lt;/td&gt;
    &lt;td&gt;Counts the number of occurence of an element in the list&lt;/td&gt;
    &lt;td&gt;a.count(25)&lt;/td&gt;
    &lt;td&gt;1&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;remove()&lt;/td&gt;
    &lt;td&gt;Removes an element from the list&lt;/td&gt;
    &lt;td&gt;a.remove(25)&lt;/td&gt;
    &lt;td&gt; [30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;pop()&lt;/td&gt;
    &lt;td&gt;Delete and return item at index 0&lt;/td&gt;
    &lt;td&gt;a.pop(0)&lt;/td&gt;
    &lt;td&gt;25 , a will be [30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;del&lt;/td&gt;
    &lt;td&gt;Deletes item at a particular index from the list&lt;/td&gt;
    &lt;td&gt;del a[0]&lt;/td&gt;
    &lt;td&gt;[30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;all()&lt;/td&gt;
&lt;td&gt;Returns True is all items in list are True or it is an empty list&lt;/td&gt;
&lt;td&gt;all([True, True, True])
all([])
&lt;/td&gt;
&lt;td&gt;True
True&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;

&lt;/tr&gt;
&lt;/table&gt;

==Printing the List==
=== Print whole list ===
A list can be printed simply or using a ''for / while'' loop 

 print(List_2)     # To print the entire list
This code will print      
 ['Kala','Mala']     

===Print element at a particular index===
&lt;pre&gt;
Using index position
    List_2[0]     # prints 'Kala' ,i.e,the value at index position 0.
    List_2[1]     # prints 'Mala'.
&lt;/pre&gt;
=== Without using index position ===
&lt;pre&gt;
for item in List_2:   # here item is a variable used to access elements in list.
       print(item)
   This code snippet prints 
    Kala
    Mala
&lt;/pre&gt;
[[#TOP]]

==Search for a particular element in list==
Elements in a list can be searched by one of the two ways:
=== using index() function===
&lt;pre&gt;
ages1 = [11,23,12,23,45]

#if element is available in the list, index() returns the index value on which, the element is present.
print(ages1.index(45))#Output: 4

#if element is not available in the list, index() returns ''ValueError''
print(ages1.index(0))#Output: ValueError:
&lt;/pre&gt;

In programming, if such error occurs, program gets terminated. It can be solved using exception handling.
e.g.
&lt;pre&gt;
ages1 = [11,23,12,23,45]

try:
    print(ages1.index(0))
except ValueError:
    print(&quot;Exception has occured&quot;)    
    print(&quot;Element is not found in the list&quot;)

&lt;/pre&gt;
&lt;pre&gt;
'''Output: 
Exception has occured
Element is not found in the list
'''&lt;/pre&gt;
[[#TOP]]

=== using 'in' operator===
''in'' operator is used to check whether a particular element is available in the list or not.e.g.

&lt;pre&gt;
ages1 = [11,23,12,23,45]
no=11

if no in ages1:
    print(&quot;no is there in the list&quot;)
else:    
    print(&quot;no is NOT there in the list&quot;)
&lt;/pre&gt;
&lt;pre&gt;
#Output: no is there in the list
&lt;/pre&gt;

'''Number is not there in the list'''
&lt;pre&gt;
ages1 = [11,23,12,23,45]
no=15

if no in ages1:
    print(&quot;no is there in the list&quot;)
else:    
    print(&quot;no is NOT there in the list&quot;)
&lt;/pre&gt;
&lt;pre&gt;
Output: no is NOT there in the list
&lt;/pre&gt;
[[#TOP]]

==Updating the List==
The lists can be updated using ''append'' or ''insert'' function.  Append adds the element to the end of the list and Insert adds the element in the specified position.
   List_2.append(&quot;Sheela&quot;)    # add the element 'Sheela' to the end of the list.
   print (List_2) will output 
   ['Kala', 'Mala', 'Sheela']
   
   List_2.insert(1,&quot;Bala&quot;)    # add the element &quot;Bala&quot; in the list at the index 1.
   print (List_2) will output 
   ['Kala', 'Bala','Mala', 'Sheela']

=== Extend the list by adding elements of other list at end using extend()===
&lt;pre&gt;
ages = [11,23,12,23,45]
ages.extend([57,58])
print(ages)
&lt;/pre&gt;

&lt;pre&gt;
#Output: [11, 23, 12, 23, 45, 57, 58]
&lt;/pre&gt;

==== Difference between ''append and extend'' ====
Difference between append and extend can be easily understood, by the following example.

&lt;pre&gt;
appendlist = [11,23,12,23,45]
appendlist.append([57,58])

extendlist= [11,23,12,23,45]
extendlist.extend([57,58])
&lt;/pre&gt;

&lt;pre&gt;
'''Output:
[11, 23, 12, 23, 45, [57, 58]]
[11, 23, 12, 23, 45, 57, 58]'''
&lt;/pre&gt;
[[#TOP]]

==Basic Operations on List==
===Frequency of Occurrence===
list.count(object) will return the number of times the object occur in the list.
  '''Example'''
    ages = [11,23,12,23,45,43,22,24,23]
    ages.count(23) will return
    3
    ages.count(100) will return
    0

===Length of the List===
len(list) will return the length of the list ie. the number of objects in the list.
  '''Example'''
    ages = [11,23,12,23,45,43,22,24,23]
    len(ages) will output
    9
To print the objects in the list either use ''for item in list'' or ''for index in range(len(list))''
    for item in ages:       
        print (item)  
        (OR)
    for index in range(len(ages)) :
        print (ages[index])
===Sort the List===
list.sort() will sort the list in ascending order
  '''Example'''
    ages = [11,23,12,23,45,43,22,24,23]
    ages.sort() 
    print (ages) 
    [11, 12, 22, 23, 23, 23, 24, 43, 45]

[[#TOP]]

===Sort the List using sorted() function===
sorted(list1) will sort the list and return a new list, it doesn't modify the original list
&lt;br&gt;'''Example: Sort in ascending order'''
&lt;pre&gt;
ages = [11,23,12,23,45,43,22,24,23]
newList=sorted(ages)
print(newList)

#Output: [11, 12, 22, 23, 23, 23, 24, 43, 45]
&lt;/pre&gt;

&lt;br&gt;'''Example: Sort in descending order'''
&lt;pre&gt;
ages = [11,23,12,23,45,43,22,24,23]
newList=sorted(ages,reverse=True)
print(newList)

#Output: [45, 43, 24, 23, 23, 23, 22, 12, 11]
&lt;/pre&gt;

===Reverse the List===
list.reverse() will reverse the original list
  '''Example'''
    ages = [11, 12, 22, 23, 23, 23, 24, 43, 45]
    ages.reverse()
    print (ages)
    [45, 43, 24, 23, 23, 23, 22, 12, 11]

Both sort() and reverse() list operation will work on numeric and alphanumeric data list.

A special use of the reverse() function is to descend a list that is sorted in ascending order.

  '''Example'''
&lt;pre&gt;
ages = [11, 12, 22, 23, 23, 23, 24, 43, 45]
ages.sort()
print(ages)
ages.reverse()
print(ages)
&lt;/pre&gt;

===Slicing===
Used to retrieve an object or objects in a range as a list  
  '''Example'''
Use ''list[index]'' to retrieve the object at the given index
         In [1]: student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
         In [2]: student[3]     #Object at index 3.  Remember index starts at 0
         Out[2]: 'Geetha'      


Use ''list[start_index : end_index + 1]'' to retrieve objects from the start_index to end_index 
         In [3]: student[2:4]     # Objects from index 2 to 3 as List. Note the [ and ]
         Out[3]: ['Vijay', 'Geetha']   


Use ''list[:]'' to retrieve objects from the starting of the list to the end of the list. 
The default start value will be the starting index of the list (i.e. 0) and the default end value
will be the length of the list 
         In [4]: student[:]        # prints the entire list
         Out[4]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma', 'Janani']


         In [5]: student[:5]       # prints the objects from the start of the list upto object at index 4
         Out[5]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran']


         In [6]: student[2:]       # prints the objects from index 2 upto the end of the list
         Out[6]: ['Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma', 'Janani']


Negative index too is available in Python. It starts from last element of the list. i.e.

         In [7]:student[-1]        #prints last index of list
         Out[7]: 'Janani'


         In [8]:student[-1:-8]     #prints empty list
         Out[8]: []


         In [9]:student[-8:-1]     #prints -8th index to -1st index elements
         Out[9]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma']

[[#TOP]]
===Removing Item from list ===
----

Is used to remove a specific item from the list.

'''Example:'''
 
Use list.remove(entry/value)  Or   del list[index]    Or list.pop(index)
         student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
         student.remove(&quot;Arun&quot;)   #This will delete item &quot;Arun&quot;
         Or    
         del student[0]           # This will delete item at index 0
         Or
         student.pop(0)         # This will delete and return item at index 0


         print(student)    
         Output: [&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]

[[#TOP]]
===Delete list ===
----
Used to delete complete list

'''Example'''

Use del &lt;list name&gt;
         student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
         del student

===Concatenation of two lists===
----
''+'' is the concatenation operator which is used concatenate two lists. 
&lt;pre&gt;
ages1 = [11,23,12,23,45]
ages2 = [25, 24, 43, 47]
age=ages1+ages2
print(age)
#Output: [11, 23, 12, 23, 45, 25, 24, 43, 47]
&lt;/pre&gt;

===Repeatation of a list ===
----
''*'' is the operator to repeat a particular list.
&lt;pre&gt;
ages1 = [11,23,12,23,45]
age=ages1*5 #ages1 list is repeated 5 times and stroed in ''age'' list
print(age)

#Output: [11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45]
&lt;/pre&gt;

=== all and any for List===
all() and any() are special functions to check whether all elements in iterable is ''True'' or any element is ''True''
&lt;ol&gt;
&lt;li&gt;If all elements in a list are ''True'', '''all()''' will return ''True''&lt;/li&gt;
&lt;li&gt;If iterable is ''empty'', '''all()''' will return ''True''&lt;/li&gt;
&lt;li&gt;If iterable contains at least one ''True'', '''any()''' will return ''True''&lt;/li&gt;
&lt;li&gt;If iterable is ''empty'', '''any()''' will return ''False''&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;
lsit=[True, True, True, True]
print(all(lsit))#Output: True
print(any(lsit))#Output: True

lsit1=[True, False, True, True]
print(all(lsit1))#Output: False
print(any(lsit1))#Output: True

lsit2=[False,False,False]
print(all(lsit2))#Output: False
print(any(lsit2))#Output: False

lsit3=[]
print(all(lsit3))#Output: True
print(any(lsit3))#Output: False
&lt;/pre&gt;

==Conditional Statements==
&lt;pre&gt;Conditionals are used to check the condition and change the flow of the program 
accordingly. They are realized in programming languages through if statement. The 
syntax is as follows :
         if condition : 
            statement
    '''Note:''' Do not forget indentation (inserting space/tab) in the line after the
 if condition.
    
    In case you want to execute a set of statements when a condition is true and another

set of statement when the condition is false.
         if condition : 
            statement 1
         else :
            statement 2
    
    Multiple if-else statements can be written as follows:
         if condition_1 : 
            statement 1
         elif condition_2 : # 'elif' is short for 'else if'
            statement 2
         elif condition_3 :
            statement 3
        .
        .
         else :
            final statement
&lt;/pre&gt;
[[#TOP]]

=Loops and Conditionals : Fizzbuzz=
====Loops====
&lt;pre&gt;
Loops are used to execute a set of repetitive statements. They are realized
through 'while' and 'for' loops in programming languages. The syntax of 'for' loop is 
as follows :
        for LOOPVARIABLE in SEQUENCE: 
            STATEMENTS
    '''e.g.''' to print all the data from a list we can write:
        for item in list_name
            print(item)
    OR
        for index in range(len(list_name))
            print(list_name[index])
    
    The syntax for while loop is as follows :
    
        while BOOLEANEXPRESSION: 
            STATEMENTS
            INCREMENT/DECREMENT
    
    '''e.g.''' if we want to print all numbers from 1 to 10
        i=1
        while i&lt;=10 :
            print(i,&quot; &quot;)
            i=i+1
    
    'while' loop has indefinite iteration (run-time unknown). So, there must be loop
 break statement in it.
 Whereas 'for' loop is definite in nature (i.e. known or predictable span).&lt;br&gt;

&lt;b&gt;NOTE: Python doesn't have anything like do-while loop.&lt;/b&gt;
&lt;/pre&gt;
[[#TOP]]

==Implementation==
Here, we try to demonstrate the concept of loops and conditionals through a game called Fizzbuzz. The rules are as follows :&lt;br/&gt;
[[File:fizzBuzz.gif]]

• if input number is a multiple of ’3’ print ”Fizz”
&lt;br/&gt;
• if input number is a multiple of ’5’ print ”Buzz”
&lt;br/&gt;
• if input number is a multiple of both '3' and ’5’ print ”FizzBuzz”
&lt;br/&gt;
The pseudo code is as follows :
&lt;pre&gt;
   If input no % 3 == 0 and  input no % 5 == 0 : 
       print ”Fizzbuzz”
   else if input no % 3 == 0 : 
       print ”Fizz”
   else if input no % 5 == 0 : 
       print ”Buzz”
   else :
       print the input no
&lt;/pre&gt;
The order of statements execution matters to get the desired output. The highest priority condition should be first followed by other. In fizzbuzz programming, first checking should be done for both divisibility of 3 and 5. If condition not satisfied only then it should check individually for 3 or 5. So carefully choosing the order is crucial for better programming.
Note: There is some effect of present condition statements chosen on next conditions statements. That is why in first attempt fizzbuzz programming got struck.

Example: 
&lt;pre&gt;
#Code to achieve the above requirement in python3.
i = int(input(&quot;Enter the number&quot;)) 
if i%3 == 0 and i%5 == 0: print(i,&quot;FizzBuzz&quot;)  
elif i%5 == 0: print(i,&quot;Buzz&quot;)
elif i%3 == 0: print(i,&quot;Fizz&quot;)
else: print(i)
&lt;/pre&gt;
Lets put the same into a loop for a range given by the user.
&lt;pre&gt;
def fizzbuzzgame(start,stop):
    for i in range(start,stop+1):
        if i%3 == 0 and i%5 == 0:
            print(i,&quot;FizzBuzz&quot;)
        elif i%5 == 0:
            print(i,&quot;Buzz&quot;)
        elif i%3 == 0:
            print(i,&quot;Fizz&quot;)
        else: print(i)

fizzbuzzgame(50,100)
&lt;/pre&gt;


=== Fizz Buzz game in Interactive mode with Score ===
'''By Ms. Ami Tusharkant Choksi'''
&lt;pre&gt;
def fizzbuzzgame(i):
        if i%3 == 0 and i%5 == 0:
            print(i,&quot;FizzBuzz&quot;)
            return(&quot;fzbz&quot;)
        elif i%5 == 0:
            print(i,&quot;Buzz&quot;)
            return(&quot;bz&quot;)
        elif i%3 == 0:
            print(i,&quot;Fizz&quot;)
            return(&quot;fz&quot;)
        else:
            print(i)
            return(&quot;no&quot;)

ch = 'y'
fizzbuzz=0
fizz=0
buzz=0
nothing=0
print(&quot;&quot;&quot;
 _____  ____  _____  _____  ____   __ __  _____  _____       ____   ____  ___ ___    ___ 
|     ||    ||     ||     ||    \ |  |  ||     ||     |     /    | /    ||   |   |  /  _]
|   __| |  | |__/  ||__/  ||  o  )|  |  ||__/  ||__/  |    |   __||  o  || _   _ | /  [_ 
|  |_   |  | |   __||   __||     ||  |  ||   __||   __|    |  |  ||     ||  \_/  ||    _]
|   _]  |  | |  /  ||  /  ||  O  ||  :  ||  /  ||  /  |    |  |_ ||  _  ||   |   ||   [_ 
|  |    |  | |     ||     ||     ||     ||     ||     |    |     ||  |  ||   |   ||     |
|__|   |____||_____||_____||_____| \__,_||_____||_____|    |___,_||__|__||___|___||_____|
                                                                                         
&quot;&quot;&quot;)   

while(ch == 'y'):
    n=int(input(&quot;Enter a Number : &quot;))
    winLoose=fizzbuzzgame(n)
    if(winLoose == &quot;fz&quot;):
        fizz+=1
    elif(winLoose == &quot;bz&quot;):
        buzz+=1
    elif(winLoose == &quot;fzbz&quot;):
        fizzbuzz+=1
    ch=input(&quot;Do you want to continue playing the game : (y/n)&quot;)
    if(ch=='n'):
        print('Congratulations, your score is\n FizzBuzz:%d\nFizz:%d\nBuzz:%d' %
(fizzbuzz,fizz,buzz))
    
'''Sample Output:

 _____  ____  _____  _____  ____   __ __  _____  _____       ____   ____  ___ ___    ___ 
|     ||    ||     ||     ||    \ |  |  ||     ||     |     /    | /    ||   |   |  /  _]
|   __| |  | |__/  ||__/  ||  o  )|  |  ||__/  ||__/  |    |   __||  o  || _   _ | /  [_ 
|  |_   |  | |   __||   __||     ||  |  ||   __||   __|    |  |  ||     ||  \_/  ||    _]
|   _]  |  | |  /  ||  /  ||  O  ||  :  ||  /  ||  /  |    |  |_ ||  _  ||   |   ||   [_ 
|  |    |  | |     ||     ||     ||     ||     ||     |    |     ||  |  ||   |   ||     |
|__|   |____||_____||_____||_____| \__,_||_____||_____|    |___,_||__|__||___|___||_____|
                                                                                         

Enter a Number : 666
666 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 777
777 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 555
555 FizzBuzz
Do you want to continue playing the game : (y/n)y
Enter a Number : 1
1
Do you want to continue playing the game : (y/n)y
Enter a Number : 789
789 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 25
25 Buzz
Do you want to continue playing the game : (y/n)n
Congratulations, your score is

FizzBuzz:1
Fizz:3
Buzz:1

&lt;/pre&gt;

=Crowd Computing: Just Estimate=
==Wisdom of Crowds==
The concept of ’Wisdom of Crowds’ was proposed by Francis Galton. A weight-judging competition was carried on at the annual show of the West of England Fat Stock and Poultry Exhibition recently held at Plymouth, A fat ox having been selected, competitors bought stamped and numbered cards, each, on which to inscribe their respective names, addresses, and estimates of what the ox would weigh after it had been slaughtered. Those who guessed most successfully received prizes. About 8oo tickets were issued to the par- ticipants. The middlemost estimate of all the estimates recorded was 1207 lbs and the actual weight of the ox was 1198 lbs.

==Our Experiment==
The crowd had to guess the number of candies/gems in a jar. Around 75 people participated in the experiment. The actual number of gems in the jar were 375. The median of all estimates came out to be 300 and the mean of all the estimates came out to be around 396. Median underestimated and mean overestimated the actual value. So according to recent studies, Trimmed mean must be used as an aggregate measure to estimate where Wisdom of Crowds is involved.
[[File:Gemsjar.jpg|center|200px|caption]]

===Trimmed Mean===
In these kinds of experiments, 10% trimmed mean is usually followed. For calculating 10% trimmed mean, remove 10% smallest and 10% largest values from the sample. Calculate the mean of the sample obtained. In the above experiment, the trimmed mean came out to be around 351 which is very close to the actual value.

==Implementation==
Here, we try to demonstrate the concept of trimmed mean through crowd computing.
 Input a list of estimates done by the crowd .
 Sort the list.
 Remove the 10% smallest values.
 Remove the 10% largest values.
 Calculate the mean of the new list obtained .&lt;hr&gt;

==Data of Experiment==       
    Estimates =[1000,1010,1786,2000,1500,1500,100,120,150,150,150,170,175,180,197,200,200,200,200,200,200,220,220,220,220,234,250,250,250,250,250,250,250,250,250,263,270,275,275,286,300,
                300,300,300,300,300,300,300,320,350,350,350,400, 400,400,400,400,450,467,500,500,500,500,500,500,500,550,550,600,600,600,650,700,700,720]

    '''CODE:'''
&lt;pre&gt;
Estimates = [1000,1010,1786,2000,1500,1500,100,120,150,150,150,170,175,180,197,200,200,200,200,200,200,220,220,220,220,234,250,250,250,250,250,250,250,250,250,263,270,275,275,286,300,                300,300,300,300,300,300,300,320,350,350,350,400,400,400,400,400,450,467,500,500,500,500,500,500,500,550,550,600,600,600,650,700,700,720]
Estimates.sort()
offset = int(0.10*len(Estimates))
for i in range(offset):
       del Estimates[0]
       del Estimates[-1]
Sum = 0    
for i in range(len(Estimates)):
       Sum += Estimates[i]
Mean_Value = Sum/len(Estimates)
print(&quot;Mean : &quot;, int(Mean_Value))
#Output:
Mean :  351
&lt;/pre&gt;
&lt;hr&gt;
==Trimmed Mean for the above example== 
&lt;h3&gt;Using scipy library&lt;/h3&gt;
&lt;pre&gt;
#import scipy to use the method of trim_mean
from scipy import stats
trimMean = stats.trim_mean(Estimates, 0.1) # Trim 10% at both ends
print(&quot;Trimmed Mean : &quot;,trimMean)
#Output:
Trimmed Mean :  335.1020408163265
&lt;/pre&gt;

&lt;h3&gt;Without using scipy library&lt;/h3&gt;
&lt;pre&gt;
#Trimmed mean with 10%
p=10/100
#sorted data
data=[2, 4, 6, 7, 11, 21, 81, 90, 105, 121]
n = len(data)
#Remove elements from both end
rem=int(n*p)
newData = data[rem:-rem]
mean = 0
for i in newData:
    mean += i
mean = int(mean/len(newData))
print(&quot;Trimmed mean : &quot;,mean)
#Output: Trimmed mean :  40
&lt;/pre&gt;
[[#Top]]

=Jumbled_Words Permutations: Jumbled Words=
==What are Permutations ?==
A permutation also called ordering of selected number of elements from a list denoted by nPr here we are choosing all elements of a list and so n=r&lt;br&gt;
nPr=n!/(n-r)!&lt;br&gt; as n=r
nPn=n!&lt;br&gt; which gives all possible arrangement of elements present in a list.

 For example, permutations of list [1,2,3] are [1,2,3], [1,3,2], [2,1,3], [2,3,1], 
[3,1,2], and [3,2,1]. 
The number of permutations of a list of elements nPn is given by n!. For example, there are 2! = 2 x 1 = 2 permutations of [1,2], namely [1,2] and [2,1], and 3! = 3 x 2 x 1 = 6 permutations of [1,2,3], as mentioned above.&lt;br/&gt;
[[File:Permutations.jpg]]

==Implementation==
Here, we try to demonstrate the concept of permutations through jumbled words. It is a two player game in which one person presents the other person a different permutation of the word in his mind. The other person has to guess the right word. If he guesses, the he wins otherwise he loses.
 Input an list of words.
 Randomly pick a word from the list of words .
 Shuffle this word and present it to the other player.
 if word guesses by the player is same as the one picked from list of w
     player wins
 else
     player loses

ALTERNATE CODE TO GENERATE THIS GAME:
&lt;pre&gt;
import random
p1=input(&quot;enter player 1 name:&quot;)
p2=input(&quot;enter player 2 name:&quot;)
l=[&quot;rainbow&quot;,&quot;computer&quot;,&quot;robot&quot;,&quot;butter&quot;,&quot;vegetable&quot;,&quot;science&quot;,&quot;correct&quot;]
c1=c2=a1=a2=f1=f2=0
k=1
i=3
def play():
    n=random.choice(l)        ##n=chooses a word from list l
    l1=[]
    for j in n:
       l1.append(j)      ##creates a list for word in n
    for t in range(len(l1)):
       p=random.choice(l1)     ##this randomly displays letters in the list
       print(p)
       l1.remove(p)          ##to avoid the repetition of a letter
    s=input(&quot;enter the word:&quot;)
    if(s==n):
        print(&quot;correct&quot;)
        return 1
    else:
        print(&quot;not correct&quot;)
        print(&quot;answer is&quot;,n)
        return 0
def stat():
     print(&quot;player 1:&quot;)
     print(&quot;score:&quot;,c1)
     print(&quot;answered:&quot;,a1)
     print(&quot;failed:&quot;,f1)
     print(&quot;.............&quot;)
     print(&quot;player 2:&quot;)
     print(&quot;score:&quot;,c2)
     print(&quot;answered:&quot;,a2)
     print(&quot;failed&quot;,f2)
     if(c1&gt;c2):
         print(p1,&quot; won over &quot;,p2)
     elif(c1==c2):
         print(&quot;draw game&quot;)
     else:
         print(p2,&quot; won over &quot;,p1) 
while(i!=4):
      if(i==3):
         if(k==1):
             print(&quot;player 1 turn&quot;)
             print(&quot;your jumbled word is:&quot;)
             k=k+1
             m=play()
             if(m==1):      ##if guessed answer is correct,then score and no.of answered count will be increased
                c1+=1
                a1+=1
             else:
                f1+=1       ##else count of no.of failed to answered will be incremented
         else:
             print(&quot;player 2 turn&quot;)
             print(&quot;your jumbled word is:&quot;)
             k=k-1
             m=play()
             if(m==1):
                c2=c2+1
                a2=a2+1
             else:
                f2=f2+1
       if(i==2):
             print(&quot;present status&quot;)
             stat()
       i=int(input(&quot;enter your choice  1.stop 2.status 3.continue&quot;))
       if(i==1):
             stat()
             i=i+3
&lt;/pre&gt;
&lt;hr&gt;
=== JumbledWord Simple Logic, In Short ===
[[File:jumbledWord.gif]]
&lt;hr&gt;
'''Logic to create a Jumbled Word'''
&lt;hr&gt;
&lt;pre&gt;
#Get Jumbled Word and print it Horizontally
import random

def getJumbledWord(b):
    jumble=''
    l1 = [ b[i] for i in range(0, len(b)) ]
    for t in range(len(l1)):
       p=random.choice(l1)     ##this randomly gets letters from the list      
       jumble=jumble+p       
       l1.remove(p)
    return jumble

b=input(&quot;Enter a word to make it jumbled : &quot;)
print(&quot;Jumbled Word : &quot;, getJumbledWord(b))
&lt;/pre&gt;
&lt;hr&gt;
'''Another Logic to create a Jumbled Word'''
&lt;hr&gt;
&lt;pre&gt;
b=input(&quot;Enter a word to make it jumbled : &quot;)

def getJumbledWord1(b):
    l1 = [ b[i] for i in range(0, len(b)) ]
    random.shuffle(l1)
    str1 = ''.join(l1)
    return str1

print(&quot;Jumbled Word : &quot;, getJumbledWord1(b))
&lt;/pre&gt;

====Sample Output:====
&lt;pre&gt;
---- Output1 
Enter a word to make it jumbled : butter
Jumbled Word :  tbture

---- Output2 
Enter a word to make it jumbled : petriotism
Jumbled Word :  pittrosime
&lt;/pre&gt;

=Theory of Evolution=

== What is Evolution ? ==
Evolution is the change in heritable characteristics over successive generations. The theory of evolution explains that DNA, which acts as a carrier of genetic information from one generation to other, tends to change or mutate occasionally. These changes are reflected in next generations to come. This is how life has evolved on earth from bacteria to human beings.&lt;br&gt;
[[File:Evolution.png|500px]]

== Implementation ==
&lt;pre&gt;An array representing DNA is stored in a file. As genes are forms of DNA, they contain information to be transferred to forthcoming generations. Assume that information is in the form of bits (in the form of 0s and 1s). A number is picked randomly from 1 to the size of the array. A new parameter has been introduced which decides whether mutation would occur or not. If the value of this new parameter is 1 (It is picked randomly from 1 to 100), then only change is reflected down the generations, otherwise it is not. The pseudo code is as follows :
Input an array containing genetic information .
Randomly generate a number (say m) from 1 to length of the array. Randomly generate other number (say p) from 1 to 100.
 
    if p is equal to 1 then 
        if m is 1 then
          set it to 0
        else
          set it to 1
&lt;/pre&gt;
[[#TOP]]</text>
      <sha1>3npkqcgl99cifx184jgmz9mw01wnv6b</sha1>
    </revision>
    <revision>
      <id>3514</id>
      <parentid>3513</parentid>
      <timestamp>2018-09-28T00:52:31Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* Operations and Methods to work with List */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="29261">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_3 Contributors of this page]
*Week 3 Playlist: https://www.youtube.com/playlist?list=PLc_j0TNIaWxOVx_z9jAM2UB3RqYNXaoEo
=List=
List is a flexible data structure used for storing a group of data separated by comma. The elements in a list need not be of the same data type.

'''Example:'''
       List_1 = [ 1, 2,3] or 
       List_1 = [&quot;coffee&quot;, &quot;Tea&quot;, &quot;Milk&quot;] or
       List_1 = [1,&quot;coffee&quot;, &quot;Tea&quot;, 3, &quot;5&quot;]

==List Creation==
&lt;pre&gt;a) A list can be created by simply putting values (separated by comma) between square brackets as given below,
       List_1 = [1,&quot;coffee&quot;, &quot;Tea&quot;, 3, &quot;5&quot;] #this creates a list by name List_1 containing following items


Or,
(b)A List can be created from scratch and elements can be added 
        List_2 = [ ]
        List_2.append(&quot;Kala&quot;)
        List_2.append(&quot;Mala&quot;)
Here we use &quot;append&quot; ,which is a function in python that enable us to append or attach an element to a list .
Thus List_2 will now hold [&quot;Kala&quot;,&quot;Mala&quot;]
&lt;/pre&gt;
[[#TOP]]

==Operations and Methods to work with List==
&lt;pre&gt;
a = [25,30,50,90,12,13]
b = [100,300,500,200,250]
&lt;/pre&gt;
&lt;hr&gt;
&lt;table border=2&gt;
  &lt;tr&gt;
    &lt;th&gt;&lt;b&gt;Method/&lt;br&gt;Operator&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Function&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Syntax&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Output&lt;/b&gt;&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;len()&lt;/td&gt;
    &lt;td&gt;Find length of a list&lt;/td&gt;
    &lt;td&gt;len(a)&lt;/td&gt;
    &lt;td&gt;6&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;max()&lt;/td&gt;
    &lt;td&gt;Find maximum element from the list&lt;/td&gt;
    &lt;td&gt;max(a)&lt;/td&gt;
    &lt;td&gt;90&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;min()&lt;/td&gt;
    &lt;td&gt;Find minimum element from the list&lt;/td&gt;
    &lt;td&gt;min(a)&lt;/td&gt;
    &lt;td&gt;12&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sum()&lt;/td&gt;
    &lt;td&gt;Returns sum of all elements of the list&lt;/td&gt;
    &lt;td&gt;sum(a)&lt;/td&gt;
    &lt;td&gt;220&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;reverse()&lt;/td&gt;
    &lt;td&gt;Reverses the original list&lt;/td&gt;
    &lt;td&gt;a.reverse()&lt;/td&gt;
    &lt;td&gt;[13, 12, 90, 50, 30, 25]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sort()&lt;/td&gt;
    &lt;td&gt;Sorts the original list in ascending order&lt;/td&gt;
    &lt;td&gt;a.sort()&lt;/td&gt;
    &lt;td&gt;[12, 13, 25, 30, 50, 90]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sorted()&lt;/td&gt;
    &lt;td&gt;Returns the new sorted list &lt;/td&gt;
    &lt;td&gt;sorted(a)&lt;/td&gt;
    &lt;td&gt;[12, 13, 25, 30, 50, 90]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;insert()&lt;/td&gt;
    &lt;td&gt;Insert at a particular index in the list, and shifts remaining elements&lt;/td&gt;
    &lt;td&gt;a.insert(3,3)&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 3, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;append()&lt;/td&gt;
    &lt;td&gt;Adds elements/object to the end of the list&lt;/td&gt;
    &lt;td&gt;a.append(5)&lt;br&gt;a.append([10,20])&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 5]&lt;br&gt;[25, 30, 50, 90, 12, 13, [10, 20]]&lt;br&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;extend()&lt;/td&gt;
    &lt;td&gt;Adds object to the end of the list as elements not as object&lt;/td&gt;
    &lt;td&gt;a.extend([10,20])&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 10, 20]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;*&amp;nbsp;&amp;nbsp;Repeatation&lt;br&gt;operator&lt;/td&gt;
    &lt;td&gt;Repeat the list for n times and returns a new list&lt;/td&gt;
    &lt;td&gt;a*2&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 25, 30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;+ Concatenation&lt;br&gt;operator&lt;/td&gt;
    &lt;td&gt;Concatenates two lists, and returns a new list&lt;/td&gt;
    &lt;td&gt;a+b&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 100, 300, 500, 200, 250]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;index()&lt;/td&gt;
    &lt;td&gt;Finds index of a particular element in the list or not&lt;/td&gt;
    &lt;td&gt;a.index(25)&lt;br&gt;a.index(0)&lt;br&gt;&lt;/td&gt;
    &lt;td&gt;0&lt;br&gt;&lt;br&gt;ValueError: 0 is not in list&lt;br&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;in operator&lt;/td&gt;
    &lt;td&gt;Finds whether a particular element is in the list or not, returns boolean&lt;/td&gt;
    &lt;td&gt;25 in a&lt;/td&gt;
    &lt;td&gt;True&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;not in operator&lt;/td&gt;
    &lt;td&gt;Checks if element is not available in list, returns boolean&lt;/td&gt;
    &lt;td&gt;25 not in a&lt;/td&gt;
    &lt;td&gt;False&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;count()&lt;/td&gt;
    &lt;td&gt;Counts the number of occurence of an element in the list&lt;/td&gt;
    &lt;td&gt;a.count(25)&lt;/td&gt;
    &lt;td&gt;1&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;remove()&lt;/td&gt;
    &lt;td&gt;Removes an element from the list&lt;/td&gt;
    &lt;td&gt;a.remove(25)&lt;/td&gt;
    &lt;td&gt; [30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;pop()&lt;/td&gt;
    &lt;td&gt;Delete and return item at index 0&lt;/td&gt;
    &lt;td&gt;a.pop(0)&lt;/td&gt;
    &lt;td&gt;25 , a will be [30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;del&lt;/td&gt;
    &lt;td&gt;Deletes item at a particular index from the list&lt;/td&gt;
    &lt;td&gt;del a[0]&lt;/td&gt;
    &lt;td&gt;[30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;all()&lt;/td&gt;
&lt;td&gt;Returns True is all items in list are True or it is an empty list&lt;/td&gt;
&lt;td&gt;all([True, True, True])
all([])
&lt;/td&gt;
&lt;td&gt;True&lt;br&gt;
True&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;

&lt;/tr&gt;
&lt;/table&gt;

==Printing the List==
=== Print whole list ===
A list can be printed simply or using a ''for / while'' loop 

 print(List_2)     # To print the entire list
This code will print      
 ['Kala','Mala']     

===Print element at a particular index===
&lt;pre&gt;
Using index position
    List_2[0]     # prints 'Kala' ,i.e,the value at index position 0.
    List_2[1]     # prints 'Mala'.
&lt;/pre&gt;
=== Without using index position ===
&lt;pre&gt;
for item in List_2:   # here item is a variable used to access elements in list.
       print(item)
   This code snippet prints 
    Kala
    Mala
&lt;/pre&gt;
[[#TOP]]

==Search for a particular element in list==
Elements in a list can be searched by one of the two ways:
=== using index() function===
&lt;pre&gt;
ages1 = [11,23,12,23,45]

#if element is available in the list, index() returns the index value on which, the element is present.
print(ages1.index(45))#Output: 4

#if element is not available in the list, index() returns ''ValueError''
print(ages1.index(0))#Output: ValueError:
&lt;/pre&gt;

In programming, if such error occurs, program gets terminated. It can be solved using exception handling.
e.g.
&lt;pre&gt;
ages1 = [11,23,12,23,45]

try:
    print(ages1.index(0))
except ValueError:
    print(&quot;Exception has occured&quot;)    
    print(&quot;Element is not found in the list&quot;)

&lt;/pre&gt;
&lt;pre&gt;
'''Output: 
Exception has occured
Element is not found in the list
'''&lt;/pre&gt;
[[#TOP]]

=== using 'in' operator===
''in'' operator is used to check whether a particular element is available in the list or not.e.g.

&lt;pre&gt;
ages1 = [11,23,12,23,45]
no=11

if no in ages1:
    print(&quot;no is there in the list&quot;)
else:    
    print(&quot;no is NOT there in the list&quot;)
&lt;/pre&gt;
&lt;pre&gt;
#Output: no is there in the list
&lt;/pre&gt;

'''Number is not there in the list'''
&lt;pre&gt;
ages1 = [11,23,12,23,45]
no=15

if no in ages1:
    print(&quot;no is there in the list&quot;)
else:    
    print(&quot;no is NOT there in the list&quot;)
&lt;/pre&gt;
&lt;pre&gt;
Output: no is NOT there in the list
&lt;/pre&gt;
[[#TOP]]

==Updating the List==
The lists can be updated using ''append'' or ''insert'' function.  Append adds the element to the end of the list and Insert adds the element in the specified position.
   List_2.append(&quot;Sheela&quot;)    # add the element 'Sheela' to the end of the list.
   print (List_2) will output 
   ['Kala', 'Mala', 'Sheela']
   
   List_2.insert(1,&quot;Bala&quot;)    # add the element &quot;Bala&quot; in the list at the index 1.
   print (List_2) will output 
   ['Kala', 'Bala','Mala', 'Sheela']

=== Extend the list by adding elements of other list at end using extend()===
&lt;pre&gt;
ages = [11,23,12,23,45]
ages.extend([57,58])
print(ages)
&lt;/pre&gt;

&lt;pre&gt;
#Output: [11, 23, 12, 23, 45, 57, 58]
&lt;/pre&gt;

==== Difference between ''append and extend'' ====
Difference between append and extend can be easily understood, by the following example.

&lt;pre&gt;
appendlist = [11,23,12,23,45]
appendlist.append([57,58])

extendlist= [11,23,12,23,45]
extendlist.extend([57,58])
&lt;/pre&gt;

&lt;pre&gt;
'''Output:
[11, 23, 12, 23, 45, [57, 58]]
[11, 23, 12, 23, 45, 57, 58]'''
&lt;/pre&gt;
[[#TOP]]

==Basic Operations on List==
===Frequency of Occurrence===
list.count(object) will return the number of times the object occur in the list.
  '''Example'''
    ages = [11,23,12,23,45,43,22,24,23]
    ages.count(23) will return
    3
    ages.count(100) will return
    0

===Length of the List===
len(list) will return the length of the list ie. the number of objects in the list.
  '''Example'''
    ages = [11,23,12,23,45,43,22,24,23]
    len(ages) will output
    9
To print the objects in the list either use ''for item in list'' or ''for index in range(len(list))''
    for item in ages:       
        print (item)  
        (OR)
    for index in range(len(ages)) :
        print (ages[index])
===Sort the List===
list.sort() will sort the list in ascending order
  '''Example'''
    ages = [11,23,12,23,45,43,22,24,23]
    ages.sort() 
    print (ages) 
    [11, 12, 22, 23, 23, 23, 24, 43, 45]

[[#TOP]]

===Sort the List using sorted() function===
sorted(list1) will sort the list and return a new list, it doesn't modify the original list
&lt;br&gt;'''Example: Sort in ascending order'''
&lt;pre&gt;
ages = [11,23,12,23,45,43,22,24,23]
newList=sorted(ages)
print(newList)

#Output: [11, 12, 22, 23, 23, 23, 24, 43, 45]
&lt;/pre&gt;

&lt;br&gt;'''Example: Sort in descending order'''
&lt;pre&gt;
ages = [11,23,12,23,45,43,22,24,23]
newList=sorted(ages,reverse=True)
print(newList)

#Output: [45, 43, 24, 23, 23, 23, 22, 12, 11]
&lt;/pre&gt;

===Reverse the List===
list.reverse() will reverse the original list
  '''Example'''
    ages = [11, 12, 22, 23, 23, 23, 24, 43, 45]
    ages.reverse()
    print (ages)
    [45, 43, 24, 23, 23, 23, 22, 12, 11]

Both sort() and reverse() list operation will work on numeric and alphanumeric data list.

A special use of the reverse() function is to descend a list that is sorted in ascending order.

  '''Example'''
&lt;pre&gt;
ages = [11, 12, 22, 23, 23, 23, 24, 43, 45]
ages.sort()
print(ages)
ages.reverse()
print(ages)
&lt;/pre&gt;

===Slicing===
Used to retrieve an object or objects in a range as a list  
  '''Example'''
Use ''list[index]'' to retrieve the object at the given index
         In [1]: student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
         In [2]: student[3]     #Object at index 3.  Remember index starts at 0
         Out[2]: 'Geetha'      


Use ''list[start_index : end_index + 1]'' to retrieve objects from the start_index to end_index 
         In [3]: student[2:4]     # Objects from index 2 to 3 as List. Note the [ and ]
         Out[3]: ['Vijay', 'Geetha']   


Use ''list[:]'' to retrieve objects from the starting of the list to the end of the list. 
The default start value will be the starting index of the list (i.e. 0) and the default end value
will be the length of the list 
         In [4]: student[:]        # prints the entire list
         Out[4]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma', 'Janani']


         In [5]: student[:5]       # prints the objects from the start of the list upto object at index 4
         Out[5]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran']


         In [6]: student[2:]       # prints the objects from index 2 upto the end of the list
         Out[6]: ['Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma', 'Janani']


Negative index too is available in Python. It starts from last element of the list. i.e.

         In [7]:student[-1]        #prints last index of list
         Out[7]: 'Janani'


         In [8]:student[-1:-8]     #prints empty list
         Out[8]: []


         In [9]:student[-8:-1]     #prints -8th index to -1st index elements
         Out[9]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma']

[[#TOP]]
===Removing Item from list ===
----

Is used to remove a specific item from the list.

'''Example:'''
 
Use list.remove(entry/value)  Or   del list[index]    Or list.pop(index)
         student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
         student.remove(&quot;Arun&quot;)   #This will delete item &quot;Arun&quot;
         Or    
         del student[0]           # This will delete item at index 0
         Or
         student.pop(0)         # This will delete and return item at index 0


         print(student)    
         Output: [&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]

[[#TOP]]
===Delete list ===
----
Used to delete complete list

'''Example'''

Use del &lt;list name&gt;
         student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
         del student

===Concatenation of two lists===
----
''+'' is the concatenation operator which is used concatenate two lists. 
&lt;pre&gt;
ages1 = [11,23,12,23,45]
ages2 = [25, 24, 43, 47]
age=ages1+ages2
print(age)
#Output: [11, 23, 12, 23, 45, 25, 24, 43, 47]
&lt;/pre&gt;

===Repeatation of a list ===
----
''*'' is the operator to repeat a particular list.
&lt;pre&gt;
ages1 = [11,23,12,23,45]
age=ages1*5 #ages1 list is repeated 5 times and stroed in ''age'' list
print(age)

#Output: [11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45]
&lt;/pre&gt;

=== all and any for List===
all() and any() are special functions to check whether all elements in iterable is ''True'' or any element is ''True''
&lt;ol&gt;
&lt;li&gt;If all elements in a list are ''True'', '''all()''' will return ''True''&lt;/li&gt;
&lt;li&gt;If iterable is ''empty'', '''all()''' will return ''True''&lt;/li&gt;
&lt;li&gt;If iterable contains at least one ''True'', '''any()''' will return ''True''&lt;/li&gt;
&lt;li&gt;If iterable is ''empty'', '''any()''' will return ''False''&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;
lsit=[True, True, True, True]
print(all(lsit))#Output: True
print(any(lsit))#Output: True

lsit1=[True, False, True, True]
print(all(lsit1))#Output: False
print(any(lsit1))#Output: True

lsit2=[False,False,False]
print(all(lsit2))#Output: False
print(any(lsit2))#Output: False

lsit3=[]
print(all(lsit3))#Output: True
print(any(lsit3))#Output: False
&lt;/pre&gt;

==Conditional Statements==
&lt;pre&gt;Conditionals are used to check the condition and change the flow of the program 
accordingly. They are realized in programming languages through if statement. The 
syntax is as follows :
         if condition : 
            statement
    '''Note:''' Do not forget indentation (inserting space/tab) in the line after the
 if condition.
    
    In case you want to execute a set of statements when a condition is true and another

set of statement when the condition is false.
         if condition : 
            statement 1
         else :
            statement 2
    
    Multiple if-else statements can be written as follows:
         if condition_1 : 
            statement 1
         elif condition_2 : # 'elif' is short for 'else if'
            statement 2
         elif condition_3 :
            statement 3
        .
        .
         else :
            final statement
&lt;/pre&gt;
[[#TOP]]

=Loops and Conditionals : Fizzbuzz=
====Loops====
&lt;pre&gt;
Loops are used to execute a set of repetitive statements. They are realized
through 'while' and 'for' loops in programming languages. The syntax of 'for' loop is 
as follows :
        for LOOPVARIABLE in SEQUENCE: 
            STATEMENTS
    '''e.g.''' to print all the data from a list we can write:
        for item in list_name
            print(item)
    OR
        for index in range(len(list_name))
            print(list_name[index])
    
    The syntax for while loop is as follows :
    
        while BOOLEANEXPRESSION: 
            STATEMENTS
            INCREMENT/DECREMENT
    
    '''e.g.''' if we want to print all numbers from 1 to 10
        i=1
        while i&lt;=10 :
            print(i,&quot; &quot;)
            i=i+1
    
    'while' loop has indefinite iteration (run-time unknown). So, there must be loop
 break statement in it.
 Whereas 'for' loop is definite in nature (i.e. known or predictable span).&lt;br&gt;

&lt;b&gt;NOTE: Python doesn't have anything like do-while loop.&lt;/b&gt;
&lt;/pre&gt;
[[#TOP]]

==Implementation==
Here, we try to demonstrate the concept of loops and conditionals through a game called Fizzbuzz. The rules are as follows :&lt;br/&gt;
[[File:fizzBuzz.gif]]

• if input number is a multiple of ’3’ print ”Fizz”
&lt;br/&gt;
• if input number is a multiple of ’5’ print ”Buzz”
&lt;br/&gt;
• if input number is a multiple of both '3' and ’5’ print ”FizzBuzz”
&lt;br/&gt;
The pseudo code is as follows :
&lt;pre&gt;
   If input no % 3 == 0 and  input no % 5 == 0 : 
       print ”Fizzbuzz”
   else if input no % 3 == 0 : 
       print ”Fizz”
   else if input no % 5 == 0 : 
       print ”Buzz”
   else :
       print the input no
&lt;/pre&gt;
The order of statements execution matters to get the desired output. The highest priority condition should be first followed by other. In fizzbuzz programming, first checking should be done for both divisibility of 3 and 5. If condition not satisfied only then it should check individually for 3 or 5. So carefully choosing the order is crucial for better programming.
Note: There is some effect of present condition statements chosen on next conditions statements. That is why in first attempt fizzbuzz programming got struck.

Example: 
&lt;pre&gt;
#Code to achieve the above requirement in python3.
i = int(input(&quot;Enter the number&quot;)) 
if i%3 == 0 and i%5 == 0: print(i,&quot;FizzBuzz&quot;)  
elif i%5 == 0: print(i,&quot;Buzz&quot;)
elif i%3 == 0: print(i,&quot;Fizz&quot;)
else: print(i)
&lt;/pre&gt;
Lets put the same into a loop for a range given by the user.
&lt;pre&gt;
def fizzbuzzgame(start,stop):
    for i in range(start,stop+1):
        if i%3 == 0 and i%5 == 0:
            print(i,&quot;FizzBuzz&quot;)
        elif i%5 == 0:
            print(i,&quot;Buzz&quot;)
        elif i%3 == 0:
            print(i,&quot;Fizz&quot;)
        else: print(i)

fizzbuzzgame(50,100)
&lt;/pre&gt;


=== Fizz Buzz game in Interactive mode with Score ===
'''By Ms. Ami Tusharkant Choksi'''
&lt;pre&gt;
def fizzbuzzgame(i):
        if i%3 == 0 and i%5 == 0:
            print(i,&quot;FizzBuzz&quot;)
            return(&quot;fzbz&quot;)
        elif i%5 == 0:
            print(i,&quot;Buzz&quot;)
            return(&quot;bz&quot;)
        elif i%3 == 0:
            print(i,&quot;Fizz&quot;)
            return(&quot;fz&quot;)
        else:
            print(i)
            return(&quot;no&quot;)

ch = 'y'
fizzbuzz=0
fizz=0
buzz=0
nothing=0
print(&quot;&quot;&quot;
 _____  ____  _____  _____  ____   __ __  _____  _____       ____   ____  ___ ___    ___ 
|     ||    ||     ||     ||    \ |  |  ||     ||     |     /    | /    ||   |   |  /  _]
|   __| |  | |__/  ||__/  ||  o  )|  |  ||__/  ||__/  |    |   __||  o  || _   _ | /  [_ 
|  |_   |  | |   __||   __||     ||  |  ||   __||   __|    |  |  ||     ||  \_/  ||    _]
|   _]  |  | |  /  ||  /  ||  O  ||  :  ||  /  ||  /  |    |  |_ ||  _  ||   |   ||   [_ 
|  |    |  | |     ||     ||     ||     ||     ||     |    |     ||  |  ||   |   ||     |
|__|   |____||_____||_____||_____| \__,_||_____||_____|    |___,_||__|__||___|___||_____|
                                                                                         
&quot;&quot;&quot;)   

while(ch == 'y'):
    n=int(input(&quot;Enter a Number : &quot;))
    winLoose=fizzbuzzgame(n)
    if(winLoose == &quot;fz&quot;):
        fizz+=1
    elif(winLoose == &quot;bz&quot;):
        buzz+=1
    elif(winLoose == &quot;fzbz&quot;):
        fizzbuzz+=1
    ch=input(&quot;Do you want to continue playing the game : (y/n)&quot;)
    if(ch=='n'):
        print('Congratulations, your score is\n FizzBuzz:%d\nFizz:%d\nBuzz:%d' %
(fizzbuzz,fizz,buzz))
    
'''Sample Output:

 _____  ____  _____  _____  ____   __ __  _____  _____       ____   ____  ___ ___    ___ 
|     ||    ||     ||     ||    \ |  |  ||     ||     |     /    | /    ||   |   |  /  _]
|   __| |  | |__/  ||__/  ||  o  )|  |  ||__/  ||__/  |    |   __||  o  || _   _ | /  [_ 
|  |_   |  | |   __||   __||     ||  |  ||   __||   __|    |  |  ||     ||  \_/  ||    _]
|   _]  |  | |  /  ||  /  ||  O  ||  :  ||  /  ||  /  |    |  |_ ||  _  ||   |   ||   [_ 
|  |    |  | |     ||     ||     ||     ||     ||     |    |     ||  |  ||   |   ||     |
|__|   |____||_____||_____||_____| \__,_||_____||_____|    |___,_||__|__||___|___||_____|
                                                                                         

Enter a Number : 666
666 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 777
777 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 555
555 FizzBuzz
Do you want to continue playing the game : (y/n)y
Enter a Number : 1
1
Do you want to continue playing the game : (y/n)y
Enter a Number : 789
789 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 25
25 Buzz
Do you want to continue playing the game : (y/n)n
Congratulations, your score is

FizzBuzz:1
Fizz:3
Buzz:1

&lt;/pre&gt;

=Crowd Computing: Just Estimate=
==Wisdom of Crowds==
The concept of ’Wisdom of Crowds’ was proposed by Francis Galton. A weight-judging competition was carried on at the annual show of the West of England Fat Stock and Poultry Exhibition recently held at Plymouth, A fat ox having been selected, competitors bought stamped and numbered cards, each, on which to inscribe their respective names, addresses, and estimates of what the ox would weigh after it had been slaughtered. Those who guessed most successfully received prizes. About 8oo tickets were issued to the par- ticipants. The middlemost estimate of all the estimates recorded was 1207 lbs and the actual weight of the ox was 1198 lbs.

==Our Experiment==
The crowd had to guess the number of candies/gems in a jar. Around 75 people participated in the experiment. The actual number of gems in the jar were 375. The median of all estimates came out to be 300 and the mean of all the estimates came out to be around 396. Median underestimated and mean overestimated the actual value. So according to recent studies, Trimmed mean must be used as an aggregate measure to estimate where Wisdom of Crowds is involved.
[[File:Gemsjar.jpg|center|200px|caption]]

===Trimmed Mean===
In these kinds of experiments, 10% trimmed mean is usually followed. For calculating 10% trimmed mean, remove 10% smallest and 10% largest values from the sample. Calculate the mean of the sample obtained. In the above experiment, the trimmed mean came out to be around 351 which is very close to the actual value.

==Implementation==
Here, we try to demonstrate the concept of trimmed mean through crowd computing.
 Input a list of estimates done by the crowd .
 Sort the list.
 Remove the 10% smallest values.
 Remove the 10% largest values.
 Calculate the mean of the new list obtained .&lt;hr&gt;

==Data of Experiment==       
    Estimates =[1000,1010,1786,2000,1500,1500,100,120,150,150,150,170,175,180,197,200,200,200,200,200,200,220,220,220,220,234,250,250,250,250,250,250,250,250,250,263,270,275,275,286,300,
                300,300,300,300,300,300,300,320,350,350,350,400, 400,400,400,400,450,467,500,500,500,500,500,500,500,550,550,600,600,600,650,700,700,720]

    '''CODE:'''
&lt;pre&gt;
Estimates = [1000,1010,1786,2000,1500,1500,100,120,150,150,150,170,175,180,197,200,200,200,200,200,200,220,220,220,220,234,250,250,250,250,250,250,250,250,250,263,270,275,275,286,300,                300,300,300,300,300,300,300,320,350,350,350,400,400,400,400,400,450,467,500,500,500,500,500,500,500,550,550,600,600,600,650,700,700,720]
Estimates.sort()
offset = int(0.10*len(Estimates))
for i in range(offset):
       del Estimates[0]
       del Estimates[-1]
Sum = 0    
for i in range(len(Estimates)):
       Sum += Estimates[i]
Mean_Value = Sum/len(Estimates)
print(&quot;Mean : &quot;, int(Mean_Value))
#Output:
Mean :  351
&lt;/pre&gt;
&lt;hr&gt;
==Trimmed Mean for the above example== 
&lt;h3&gt;Using scipy library&lt;/h3&gt;
&lt;pre&gt;
#import scipy to use the method of trim_mean
from scipy import stats
trimMean = stats.trim_mean(Estimates, 0.1) # Trim 10% at both ends
print(&quot;Trimmed Mean : &quot;,trimMean)
#Output:
Trimmed Mean :  335.1020408163265
&lt;/pre&gt;

&lt;h3&gt;Without using scipy library&lt;/h3&gt;
&lt;pre&gt;
#Trimmed mean with 10%
p=10/100
#sorted data
data=[2, 4, 6, 7, 11, 21, 81, 90, 105, 121]
n = len(data)
#Remove elements from both end
rem=int(n*p)
newData = data[rem:-rem]
mean = 0
for i in newData:
    mean += i
mean = int(mean/len(newData))
print(&quot;Trimmed mean : &quot;,mean)
#Output: Trimmed mean :  40
&lt;/pre&gt;
[[#Top]]

=Jumbled_Words Permutations: Jumbled Words=
==What are Permutations ?==
A permutation also called ordering of selected number of elements from a list denoted by nPr here we are choosing all elements of a list and so n=r&lt;br&gt;
nPr=n!/(n-r)!&lt;br&gt; as n=r
nPn=n!&lt;br&gt; which gives all possible arrangement of elements present in a list.

 For example, permutations of list [1,2,3] are [1,2,3], [1,3,2], [2,1,3], [2,3,1], 
[3,1,2], and [3,2,1]. 
The number of permutations of a list of elements nPn is given by n!. For example, there are 2! = 2 x 1 = 2 permutations of [1,2], namely [1,2] and [2,1], and 3! = 3 x 2 x 1 = 6 permutations of [1,2,3], as mentioned above.&lt;br/&gt;
[[File:Permutations.jpg]]

==Implementation==
Here, we try to demonstrate the concept of permutations through jumbled words. It is a two player game in which one person presents the other person a different permutation of the word in his mind. The other person has to guess the right word. If he guesses, the he wins otherwise he loses.
 Input an list of words.
 Randomly pick a word from the list of words .
 Shuffle this word and present it to the other player.
 if word guesses by the player is same as the one picked from list of w
     player wins
 else
     player loses

ALTERNATE CODE TO GENERATE THIS GAME:
&lt;pre&gt;
import random
p1=input(&quot;enter player 1 name:&quot;)
p2=input(&quot;enter player 2 name:&quot;)
l=[&quot;rainbow&quot;,&quot;computer&quot;,&quot;robot&quot;,&quot;butter&quot;,&quot;vegetable&quot;,&quot;science&quot;,&quot;correct&quot;]
c1=c2=a1=a2=f1=f2=0
k=1
i=3
def play():
    n=random.choice(l)        ##n=chooses a word from list l
    l1=[]
    for j in n:
       l1.append(j)      ##creates a list for word in n
    for t in range(len(l1)):
       p=random.choice(l1)     ##this randomly displays letters in the list
       print(p)
       l1.remove(p)          ##to avoid the repetition of a letter
    s=input(&quot;enter the word:&quot;)
    if(s==n):
        print(&quot;correct&quot;)
        return 1
    else:
        print(&quot;not correct&quot;)
        print(&quot;answer is&quot;,n)
        return 0
def stat():
     print(&quot;player 1:&quot;)
     print(&quot;score:&quot;,c1)
     print(&quot;answered:&quot;,a1)
     print(&quot;failed:&quot;,f1)
     print(&quot;.............&quot;)
     print(&quot;player 2:&quot;)
     print(&quot;score:&quot;,c2)
     print(&quot;answered:&quot;,a2)
     print(&quot;failed&quot;,f2)
     if(c1&gt;c2):
         print(p1,&quot; won over &quot;,p2)
     elif(c1==c2):
         print(&quot;draw game&quot;)
     else:
         print(p2,&quot; won over &quot;,p1) 
while(i!=4):
      if(i==3):
         if(k==1):
             print(&quot;player 1 turn&quot;)
             print(&quot;your jumbled word is:&quot;)
             k=k+1
             m=play()
             if(m==1):      ##if guessed answer is correct,then score and no.of answered count will be increased
                c1+=1
                a1+=1
             else:
                f1+=1       ##else count of no.of failed to answered will be incremented
         else:
             print(&quot;player 2 turn&quot;)
             print(&quot;your jumbled word is:&quot;)
             k=k-1
             m=play()
             if(m==1):
                c2=c2+1
                a2=a2+1
             else:
                f2=f2+1
       if(i==2):
             print(&quot;present status&quot;)
             stat()
       i=int(input(&quot;enter your choice  1.stop 2.status 3.continue&quot;))
       if(i==1):
             stat()
             i=i+3
&lt;/pre&gt;
&lt;hr&gt;
=== JumbledWord Simple Logic, In Short ===
[[File:jumbledWord.gif]]
&lt;hr&gt;
'''Logic to create a Jumbled Word'''
&lt;hr&gt;
&lt;pre&gt;
#Get Jumbled Word and print it Horizontally
import random

def getJumbledWord(b):
    jumble=''
    l1 = [ b[i] for i in range(0, len(b)) ]
    for t in range(len(l1)):
       p=random.choice(l1)     ##this randomly gets letters from the list      
       jumble=jumble+p       
       l1.remove(p)
    return jumble

b=input(&quot;Enter a word to make it jumbled : &quot;)
print(&quot;Jumbled Word : &quot;, getJumbledWord(b))
&lt;/pre&gt;
&lt;hr&gt;
'''Another Logic to create a Jumbled Word'''
&lt;hr&gt;
&lt;pre&gt;
b=input(&quot;Enter a word to make it jumbled : &quot;)

def getJumbledWord1(b):
    l1 = [ b[i] for i in range(0, len(b)) ]
    random.shuffle(l1)
    str1 = ''.join(l1)
    return str1

print(&quot;Jumbled Word : &quot;, getJumbledWord1(b))
&lt;/pre&gt;

====Sample Output:====
&lt;pre&gt;
---- Output1 
Enter a word to make it jumbled : butter
Jumbled Word :  tbture

---- Output2 
Enter a word to make it jumbled : petriotism
Jumbled Word :  pittrosime
&lt;/pre&gt;

=Theory of Evolution=

== What is Evolution ? ==
Evolution is the change in heritable characteristics over successive generations. The theory of evolution explains that DNA, which acts as a carrier of genetic information from one generation to other, tends to change or mutate occasionally. These changes are reflected in next generations to come. This is how life has evolved on earth from bacteria to human beings.&lt;br&gt;
[[File:Evolution.png|500px]]

== Implementation ==
&lt;pre&gt;An array representing DNA is stored in a file. As genes are forms of DNA, they contain information to be transferred to forthcoming generations. Assume that information is in the form of bits (in the form of 0s and 1s). A number is picked randomly from 1 to the size of the array. A new parameter has been introduced which decides whether mutation would occur or not. If the value of this new parameter is 1 (It is picked randomly from 1 to 100), then only change is reflected down the generations, otherwise it is not. The pseudo code is as follows :
Input an array containing genetic information .
Randomly generate a number (say m) from 1 to length of the array. Randomly generate other number (say p) from 1 to 100.
 
    if p is equal to 1 then 
        if m is 1 then
          set it to 0
        else
          set it to 1
&lt;/pre&gt;
[[#TOP]]</text>
      <sha1>riiumexppc1ui6m0ksnzggytwz9pz97</sha1>
    </revision>
    <revision>
      <id>3515</id>
      <parentid>3514</parentid>
      <timestamp>2018-09-28T00:53:18Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* Operations and Methods to work with List */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="29266">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_3 Contributors of this page]
*Week 3 Playlist: https://www.youtube.com/playlist?list=PLc_j0TNIaWxOVx_z9jAM2UB3RqYNXaoEo
=List=
List is a flexible data structure used for storing a group of data separated by comma. The elements in a list need not be of the same data type.

'''Example:'''
       List_1 = [ 1, 2,3] or 
       List_1 = [&quot;coffee&quot;, &quot;Tea&quot;, &quot;Milk&quot;] or
       List_1 = [1,&quot;coffee&quot;, &quot;Tea&quot;, 3, &quot;5&quot;]

==List Creation==
&lt;pre&gt;a) A list can be created by simply putting values (separated by comma) between square brackets as given below,
       List_1 = [1,&quot;coffee&quot;, &quot;Tea&quot;, 3, &quot;5&quot;] #this creates a list by name List_1 containing following items


Or,
(b)A List can be created from scratch and elements can be added 
        List_2 = [ ]
        List_2.append(&quot;Kala&quot;)
        List_2.append(&quot;Mala&quot;)
Here we use &quot;append&quot; ,which is a function in python that enable us to append or attach an element to a list .
Thus List_2 will now hold [&quot;Kala&quot;,&quot;Mala&quot;]
&lt;/pre&gt;
[[#TOP]]

==Operations and Methods to work with List==
&lt;pre&gt;
a = [25,30,50,90,12,13]
b = [100,300,500,200,250]
&lt;/pre&gt;
&lt;hr&gt;
&lt;table border=2&gt;
  &lt;tr&gt;
    &lt;th&gt;&lt;b&gt;Method/&lt;br&gt;Operator&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Function&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Syntax&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Output&lt;/b&gt;&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;len()&lt;/td&gt;
    &lt;td&gt;Find length of a list&lt;/td&gt;
    &lt;td&gt;len(a)&lt;/td&gt;
    &lt;td&gt;6&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;max()&lt;/td&gt;
    &lt;td&gt;Find maximum element from the list&lt;/td&gt;
    &lt;td&gt;max(a)&lt;/td&gt;
    &lt;td&gt;90&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;min()&lt;/td&gt;
    &lt;td&gt;Find minimum element from the list&lt;/td&gt;
    &lt;td&gt;min(a)&lt;/td&gt;
    &lt;td&gt;12&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sum()&lt;/td&gt;
    &lt;td&gt;Returns sum of all elements of the list&lt;/td&gt;
    &lt;td&gt;sum(a)&lt;/td&gt;
    &lt;td&gt;220&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;reverse()&lt;/td&gt;
    &lt;td&gt;Reverses the original list&lt;/td&gt;
    &lt;td&gt;a.reverse()&lt;/td&gt;
    &lt;td&gt;[13, 12, 90, 50, 30, 25]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sort()&lt;/td&gt;
    &lt;td&gt;Sorts the original list in ascending order&lt;/td&gt;
    &lt;td&gt;a.sort()&lt;/td&gt;
    &lt;td&gt;[12, 13, 25, 30, 50, 90]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sorted()&lt;/td&gt;
    &lt;td&gt;Returns the new sorted list &lt;/td&gt;
    &lt;td&gt;sorted(a)&lt;/td&gt;
    &lt;td&gt;[12, 13, 25, 30, 50, 90]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;insert()&lt;/td&gt;
    &lt;td&gt;Insert at a particular index in the list, and shifts remaining elements&lt;/td&gt;
    &lt;td&gt;a.insert(3,3)&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 3, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;append()&lt;/td&gt;
    &lt;td&gt;Adds elements/object to the end of the list&lt;/td&gt;
    &lt;td&gt;a.append(5)&lt;br&gt;a.append([10,20])&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 5]&lt;br&gt;[25, 30, 50, 90, 12, 13, [10, 20]]&lt;br&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;extend()&lt;/td&gt;
    &lt;td&gt;Adds object to the end of the list as elements not as object&lt;/td&gt;
    &lt;td&gt;a.extend([10,20])&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 10, 20]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;*&amp;nbsp;&amp;nbsp;Repeatation&lt;br&gt;operator&lt;/td&gt;
    &lt;td&gt;Repeat the list for n times and returns a new list&lt;/td&gt;
    &lt;td&gt;a*2&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 25, 30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;+ Concatenation&lt;br&gt;operator&lt;/td&gt;
    &lt;td&gt;Concatenates two lists, and returns a new list&lt;/td&gt;
    &lt;td&gt;a+b&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 100, 300, 500, 200, 250]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;index()&lt;/td&gt;
    &lt;td&gt;Finds index of a particular element in the list or not&lt;/td&gt;
    &lt;td&gt;a.index(25)&lt;br&gt;a.index(0)&lt;br&gt;&lt;/td&gt;
    &lt;td&gt;0&lt;br&gt;&lt;br&gt;ValueError: 0 is not in list&lt;br&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;in operator&lt;/td&gt;
    &lt;td&gt;Finds whether a particular element is in the list or not, returns boolean&lt;/td&gt;
    &lt;td&gt;25 in a&lt;/td&gt;
    &lt;td&gt;True&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;not in operator&lt;/td&gt;
    &lt;td&gt;Checks if element is not available in list, returns boolean&lt;/td&gt;
    &lt;td&gt;25 not in a&lt;/td&gt;
    &lt;td&gt;False&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;count()&lt;/td&gt;
    &lt;td&gt;Counts the number of occurence of an element in the list&lt;/td&gt;
    &lt;td&gt;a.count(25)&lt;/td&gt;
    &lt;td&gt;1&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;remove()&lt;/td&gt;
    &lt;td&gt;Removes an element from the list&lt;/td&gt;
    &lt;td&gt;a.remove(25)&lt;/td&gt;
    &lt;td&gt; [30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;pop()&lt;/td&gt;
    &lt;td&gt;Delete and return item at index 0&lt;/td&gt;
    &lt;td&gt;a.pop(0)&lt;/td&gt;
    &lt;td&gt;25 , a will be [30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;del&lt;/td&gt;
    &lt;td&gt;Deletes item at a particular index from the list&lt;/td&gt;
    &lt;td&gt;del a[0]&lt;/td&gt;
    &lt;td&gt;[30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;all()&lt;/td&gt;
&lt;td&gt;Returns True is all items in list are True or it is an empty list&lt;/td&gt;
&lt;td&gt;all([True, True, True])
all([])
&lt;/td&gt;
&lt;td&gt;True&lt;br&gt;
True&lt;/td&gt;
&lt;td&gt;any()&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;

&lt;/tr&gt;
&lt;/table&gt;

==Printing the List==
=== Print whole list ===
A list can be printed simply or using a ''for / while'' loop 

 print(List_2)     # To print the entire list
This code will print      
 ['Kala','Mala']     

===Print element at a particular index===
&lt;pre&gt;
Using index position
    List_2[0]     # prints 'Kala' ,i.e,the value at index position 0.
    List_2[1]     # prints 'Mala'.
&lt;/pre&gt;
=== Without using index position ===
&lt;pre&gt;
for item in List_2:   # here item is a variable used to access elements in list.
       print(item)
   This code snippet prints 
    Kala
    Mala
&lt;/pre&gt;
[[#TOP]]

==Search for a particular element in list==
Elements in a list can be searched by one of the two ways:
=== using index() function===
&lt;pre&gt;
ages1 = [11,23,12,23,45]

#if element is available in the list, index() returns the index value on which, the element is present.
print(ages1.index(45))#Output: 4

#if element is not available in the list, index() returns ''ValueError''
print(ages1.index(0))#Output: ValueError:
&lt;/pre&gt;

In programming, if such error occurs, program gets terminated. It can be solved using exception handling.
e.g.
&lt;pre&gt;
ages1 = [11,23,12,23,45]

try:
    print(ages1.index(0))
except ValueError:
    print(&quot;Exception has occured&quot;)    
    print(&quot;Element is not found in the list&quot;)

&lt;/pre&gt;
&lt;pre&gt;
'''Output: 
Exception has occured
Element is not found in the list
'''&lt;/pre&gt;
[[#TOP]]

=== using 'in' operator===
''in'' operator is used to check whether a particular element is available in the list or not.e.g.

&lt;pre&gt;
ages1 = [11,23,12,23,45]
no=11

if no in ages1:
    print(&quot;no is there in the list&quot;)
else:    
    print(&quot;no is NOT there in the list&quot;)
&lt;/pre&gt;
&lt;pre&gt;
#Output: no is there in the list
&lt;/pre&gt;

'''Number is not there in the list'''
&lt;pre&gt;
ages1 = [11,23,12,23,45]
no=15

if no in ages1:
    print(&quot;no is there in the list&quot;)
else:    
    print(&quot;no is NOT there in the list&quot;)
&lt;/pre&gt;
&lt;pre&gt;
Output: no is NOT there in the list
&lt;/pre&gt;
[[#TOP]]

==Updating the List==
The lists can be updated using ''append'' or ''insert'' function.  Append adds the element to the end of the list and Insert adds the element in the specified position.
   List_2.append(&quot;Sheela&quot;)    # add the element 'Sheela' to the end of the list.
   print (List_2) will output 
   ['Kala', 'Mala', 'Sheela']
   
   List_2.insert(1,&quot;Bala&quot;)    # add the element &quot;Bala&quot; in the list at the index 1.
   print (List_2) will output 
   ['Kala', 'Bala','Mala', 'Sheela']

=== Extend the list by adding elements of other list at end using extend()===
&lt;pre&gt;
ages = [11,23,12,23,45]
ages.extend([57,58])
print(ages)
&lt;/pre&gt;

&lt;pre&gt;
#Output: [11, 23, 12, 23, 45, 57, 58]
&lt;/pre&gt;

==== Difference between ''append and extend'' ====
Difference between append and extend can be easily understood, by the following example.

&lt;pre&gt;
appendlist = [11,23,12,23,45]
appendlist.append([57,58])

extendlist= [11,23,12,23,45]
extendlist.extend([57,58])
&lt;/pre&gt;

&lt;pre&gt;
'''Output:
[11, 23, 12, 23, 45, [57, 58]]
[11, 23, 12, 23, 45, 57, 58]'''
&lt;/pre&gt;
[[#TOP]]

==Basic Operations on List==
===Frequency of Occurrence===
list.count(object) will return the number of times the object occur in the list.
  '''Example'''
    ages = [11,23,12,23,45,43,22,24,23]
    ages.count(23) will return
    3
    ages.count(100) will return
    0

===Length of the List===
len(list) will return the length of the list ie. the number of objects in the list.
  '''Example'''
    ages = [11,23,12,23,45,43,22,24,23]
    len(ages) will output
    9
To print the objects in the list either use ''for item in list'' or ''for index in range(len(list))''
    for item in ages:       
        print (item)  
        (OR)
    for index in range(len(ages)) :
        print (ages[index])
===Sort the List===
list.sort() will sort the list in ascending order
  '''Example'''
    ages = [11,23,12,23,45,43,22,24,23]
    ages.sort() 
    print (ages) 
    [11, 12, 22, 23, 23, 23, 24, 43, 45]

[[#TOP]]

===Sort the List using sorted() function===
sorted(list1) will sort the list and return a new list, it doesn't modify the original list
&lt;br&gt;'''Example: Sort in ascending order'''
&lt;pre&gt;
ages = [11,23,12,23,45,43,22,24,23]
newList=sorted(ages)
print(newList)

#Output: [11, 12, 22, 23, 23, 23, 24, 43, 45]
&lt;/pre&gt;

&lt;br&gt;'''Example: Sort in descending order'''
&lt;pre&gt;
ages = [11,23,12,23,45,43,22,24,23]
newList=sorted(ages,reverse=True)
print(newList)

#Output: [45, 43, 24, 23, 23, 23, 22, 12, 11]
&lt;/pre&gt;

===Reverse the List===
list.reverse() will reverse the original list
  '''Example'''
    ages = [11, 12, 22, 23, 23, 23, 24, 43, 45]
    ages.reverse()
    print (ages)
    [45, 43, 24, 23, 23, 23, 22, 12, 11]

Both sort() and reverse() list operation will work on numeric and alphanumeric data list.

A special use of the reverse() function is to descend a list that is sorted in ascending order.

  '''Example'''
&lt;pre&gt;
ages = [11, 12, 22, 23, 23, 23, 24, 43, 45]
ages.sort()
print(ages)
ages.reverse()
print(ages)
&lt;/pre&gt;

===Slicing===
Used to retrieve an object or objects in a range as a list  
  '''Example'''
Use ''list[index]'' to retrieve the object at the given index
         In [1]: student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
         In [2]: student[3]     #Object at index 3.  Remember index starts at 0
         Out[2]: 'Geetha'      


Use ''list[start_index : end_index + 1]'' to retrieve objects from the start_index to end_index 
         In [3]: student[2:4]     # Objects from index 2 to 3 as List. Note the [ and ]
         Out[3]: ['Vijay', 'Geetha']   


Use ''list[:]'' to retrieve objects from the starting of the list to the end of the list. 
The default start value will be the starting index of the list (i.e. 0) and the default end value
will be the length of the list 
         In [4]: student[:]        # prints the entire list
         Out[4]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma', 'Janani']


         In [5]: student[:5]       # prints the objects from the start of the list upto object at index 4
         Out[5]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran']


         In [6]: student[2:]       # prints the objects from index 2 upto the end of the list
         Out[6]: ['Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma', 'Janani']


Negative index too is available in Python. It starts from last element of the list. i.e.

         In [7]:student[-1]        #prints last index of list
         Out[7]: 'Janani'


         In [8]:student[-1:-8]     #prints empty list
         Out[8]: []


         In [9]:student[-8:-1]     #prints -8th index to -1st index elements
         Out[9]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma']

[[#TOP]]
===Removing Item from list ===
----

Is used to remove a specific item from the list.

'''Example:'''
 
Use list.remove(entry/value)  Or   del list[index]    Or list.pop(index)
         student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
         student.remove(&quot;Arun&quot;)   #This will delete item &quot;Arun&quot;
         Or    
         del student[0]           # This will delete item at index 0
         Or
         student.pop(0)         # This will delete and return item at index 0


         print(student)    
         Output: [&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]

[[#TOP]]
===Delete list ===
----
Used to delete complete list

'''Example'''

Use del &lt;list name&gt;
         student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
         del student

===Concatenation of two lists===
----
''+'' is the concatenation operator which is used concatenate two lists. 
&lt;pre&gt;
ages1 = [11,23,12,23,45]
ages2 = [25, 24, 43, 47]
age=ages1+ages2
print(age)
#Output: [11, 23, 12, 23, 45, 25, 24, 43, 47]
&lt;/pre&gt;

===Repeatation of a list ===
----
''*'' is the operator to repeat a particular list.
&lt;pre&gt;
ages1 = [11,23,12,23,45]
age=ages1*5 #ages1 list is repeated 5 times and stroed in ''age'' list
print(age)

#Output: [11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45]
&lt;/pre&gt;

=== all and any for List===
all() and any() are special functions to check whether all elements in iterable is ''True'' or any element is ''True''
&lt;ol&gt;
&lt;li&gt;If all elements in a list are ''True'', '''all()''' will return ''True''&lt;/li&gt;
&lt;li&gt;If iterable is ''empty'', '''all()''' will return ''True''&lt;/li&gt;
&lt;li&gt;If iterable contains at least one ''True'', '''any()''' will return ''True''&lt;/li&gt;
&lt;li&gt;If iterable is ''empty'', '''any()''' will return ''False''&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;
lsit=[True, True, True, True]
print(all(lsit))#Output: True
print(any(lsit))#Output: True

lsit1=[True, False, True, True]
print(all(lsit1))#Output: False
print(any(lsit1))#Output: True

lsit2=[False,False,False]
print(all(lsit2))#Output: False
print(any(lsit2))#Output: False

lsit3=[]
print(all(lsit3))#Output: True
print(any(lsit3))#Output: False
&lt;/pre&gt;

==Conditional Statements==
&lt;pre&gt;Conditionals are used to check the condition and change the flow of the program 
accordingly. They are realized in programming languages through if statement. The 
syntax is as follows :
         if condition : 
            statement
    '''Note:''' Do not forget indentation (inserting space/tab) in the line after the
 if condition.
    
    In case you want to execute a set of statements when a condition is true and another

set of statement when the condition is false.
         if condition : 
            statement 1
         else :
            statement 2
    
    Multiple if-else statements can be written as follows:
         if condition_1 : 
            statement 1
         elif condition_2 : # 'elif' is short for 'else if'
            statement 2
         elif condition_3 :
            statement 3
        .
        .
         else :
            final statement
&lt;/pre&gt;
[[#TOP]]

=Loops and Conditionals : Fizzbuzz=
====Loops====
&lt;pre&gt;
Loops are used to execute a set of repetitive statements. They are realized
through 'while' and 'for' loops in programming languages. The syntax of 'for' loop is 
as follows :
        for LOOPVARIABLE in SEQUENCE: 
            STATEMENTS
    '''e.g.''' to print all the data from a list we can write:
        for item in list_name
            print(item)
    OR
        for index in range(len(list_name))
            print(list_name[index])
    
    The syntax for while loop is as follows :
    
        while BOOLEANEXPRESSION: 
            STATEMENTS
            INCREMENT/DECREMENT
    
    '''e.g.''' if we want to print all numbers from 1 to 10
        i=1
        while i&lt;=10 :
            print(i,&quot; &quot;)
            i=i+1
    
    'while' loop has indefinite iteration (run-time unknown). So, there must be loop
 break statement in it.
 Whereas 'for' loop is definite in nature (i.e. known or predictable span).&lt;br&gt;

&lt;b&gt;NOTE: Python doesn't have anything like do-while loop.&lt;/b&gt;
&lt;/pre&gt;
[[#TOP]]

==Implementation==
Here, we try to demonstrate the concept of loops and conditionals through a game called Fizzbuzz. The rules are as follows :&lt;br/&gt;
[[File:fizzBuzz.gif]]

• if input number is a multiple of ’3’ print ”Fizz”
&lt;br/&gt;
• if input number is a multiple of ’5’ print ”Buzz”
&lt;br/&gt;
• if input number is a multiple of both '3' and ’5’ print ”FizzBuzz”
&lt;br/&gt;
The pseudo code is as follows :
&lt;pre&gt;
   If input no % 3 == 0 and  input no % 5 == 0 : 
       print ”Fizzbuzz”
   else if input no % 3 == 0 : 
       print ”Fizz”
   else if input no % 5 == 0 : 
       print ”Buzz”
   else :
       print the input no
&lt;/pre&gt;
The order of statements execution matters to get the desired output. The highest priority condition should be first followed by other. In fizzbuzz programming, first checking should be done for both divisibility of 3 and 5. If condition not satisfied only then it should check individually for 3 or 5. So carefully choosing the order is crucial for better programming.
Note: There is some effect of present condition statements chosen on next conditions statements. That is why in first attempt fizzbuzz programming got struck.

Example: 
&lt;pre&gt;
#Code to achieve the above requirement in python3.
i = int(input(&quot;Enter the number&quot;)) 
if i%3 == 0 and i%5 == 0: print(i,&quot;FizzBuzz&quot;)  
elif i%5 == 0: print(i,&quot;Buzz&quot;)
elif i%3 == 0: print(i,&quot;Fizz&quot;)
else: print(i)
&lt;/pre&gt;
Lets put the same into a loop for a range given by the user.
&lt;pre&gt;
def fizzbuzzgame(start,stop):
    for i in range(start,stop+1):
        if i%3 == 0 and i%5 == 0:
            print(i,&quot;FizzBuzz&quot;)
        elif i%5 == 0:
            print(i,&quot;Buzz&quot;)
        elif i%3 == 0:
            print(i,&quot;Fizz&quot;)
        else: print(i)

fizzbuzzgame(50,100)
&lt;/pre&gt;


=== Fizz Buzz game in Interactive mode with Score ===
'''By Ms. Ami Tusharkant Choksi'''
&lt;pre&gt;
def fizzbuzzgame(i):
        if i%3 == 0 and i%5 == 0:
            print(i,&quot;FizzBuzz&quot;)
            return(&quot;fzbz&quot;)
        elif i%5 == 0:
            print(i,&quot;Buzz&quot;)
            return(&quot;bz&quot;)
        elif i%3 == 0:
            print(i,&quot;Fizz&quot;)
            return(&quot;fz&quot;)
        else:
            print(i)
            return(&quot;no&quot;)

ch = 'y'
fizzbuzz=0
fizz=0
buzz=0
nothing=0
print(&quot;&quot;&quot;
 _____  ____  _____  _____  ____   __ __  _____  _____       ____   ____  ___ ___    ___ 
|     ||    ||     ||     ||    \ |  |  ||     ||     |     /    | /    ||   |   |  /  _]
|   __| |  | |__/  ||__/  ||  o  )|  |  ||__/  ||__/  |    |   __||  o  || _   _ | /  [_ 
|  |_   |  | |   __||   __||     ||  |  ||   __||   __|    |  |  ||     ||  \_/  ||    _]
|   _]  |  | |  /  ||  /  ||  O  ||  :  ||  /  ||  /  |    |  |_ ||  _  ||   |   ||   [_ 
|  |    |  | |     ||     ||     ||     ||     ||     |    |     ||  |  ||   |   ||     |
|__|   |____||_____||_____||_____| \__,_||_____||_____|    |___,_||__|__||___|___||_____|
                                                                                         
&quot;&quot;&quot;)   

while(ch == 'y'):
    n=int(input(&quot;Enter a Number : &quot;))
    winLoose=fizzbuzzgame(n)
    if(winLoose == &quot;fz&quot;):
        fizz+=1
    elif(winLoose == &quot;bz&quot;):
        buzz+=1
    elif(winLoose == &quot;fzbz&quot;):
        fizzbuzz+=1
    ch=input(&quot;Do you want to continue playing the game : (y/n)&quot;)
    if(ch=='n'):
        print('Congratulations, your score is\n FizzBuzz:%d\nFizz:%d\nBuzz:%d' %
(fizzbuzz,fizz,buzz))
    
'''Sample Output:

 _____  ____  _____  _____  ____   __ __  _____  _____       ____   ____  ___ ___    ___ 
|     ||    ||     ||     ||    \ |  |  ||     ||     |     /    | /    ||   |   |  /  _]
|   __| |  | |__/  ||__/  ||  o  )|  |  ||__/  ||__/  |    |   __||  o  || _   _ | /  [_ 
|  |_   |  | |   __||   __||     ||  |  ||   __||   __|    |  |  ||     ||  \_/  ||    _]
|   _]  |  | |  /  ||  /  ||  O  ||  :  ||  /  ||  /  |    |  |_ ||  _  ||   |   ||   [_ 
|  |    |  | |     ||     ||     ||     ||     ||     |    |     ||  |  ||   |   ||     |
|__|   |____||_____||_____||_____| \__,_||_____||_____|    |___,_||__|__||___|___||_____|
                                                                                         

Enter a Number : 666
666 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 777
777 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 555
555 FizzBuzz
Do you want to continue playing the game : (y/n)y
Enter a Number : 1
1
Do you want to continue playing the game : (y/n)y
Enter a Number : 789
789 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 25
25 Buzz
Do you want to continue playing the game : (y/n)n
Congratulations, your score is

FizzBuzz:1
Fizz:3
Buzz:1

&lt;/pre&gt;

=Crowd Computing: Just Estimate=
==Wisdom of Crowds==
The concept of ’Wisdom of Crowds’ was proposed by Francis Galton. A weight-judging competition was carried on at the annual show of the West of England Fat Stock and Poultry Exhibition recently held at Plymouth, A fat ox having been selected, competitors bought stamped and numbered cards, each, on which to inscribe their respective names, addresses, and estimates of what the ox would weigh after it had been slaughtered. Those who guessed most successfully received prizes. About 8oo tickets were issued to the par- ticipants. The middlemost estimate of all the estimates recorded was 1207 lbs and the actual weight of the ox was 1198 lbs.

==Our Experiment==
The crowd had to guess the number of candies/gems in a jar. Around 75 people participated in the experiment. The actual number of gems in the jar were 375. The median of all estimates came out to be 300 and the mean of all the estimates came out to be around 396. Median underestimated and mean overestimated the actual value. So according to recent studies, Trimmed mean must be used as an aggregate measure to estimate where Wisdom of Crowds is involved.
[[File:Gemsjar.jpg|center|200px|caption]]

===Trimmed Mean===
In these kinds of experiments, 10% trimmed mean is usually followed. For calculating 10% trimmed mean, remove 10% smallest and 10% largest values from the sample. Calculate the mean of the sample obtained. In the above experiment, the trimmed mean came out to be around 351 which is very close to the actual value.

==Implementation==
Here, we try to demonstrate the concept of trimmed mean through crowd computing.
 Input a list of estimates done by the crowd .
 Sort the list.
 Remove the 10% smallest values.
 Remove the 10% largest values.
 Calculate the mean of the new list obtained .&lt;hr&gt;

==Data of Experiment==       
    Estimates =[1000,1010,1786,2000,1500,1500,100,120,150,150,150,170,175,180,197,200,200,200,200,200,200,220,220,220,220,234,250,250,250,250,250,250,250,250,250,263,270,275,275,286,300,
                300,300,300,300,300,300,300,320,350,350,350,400, 400,400,400,400,450,467,500,500,500,500,500,500,500,550,550,600,600,600,650,700,700,720]

    '''CODE:'''
&lt;pre&gt;
Estimates = [1000,1010,1786,2000,1500,1500,100,120,150,150,150,170,175,180,197,200,200,200,200,200,200,220,220,220,220,234,250,250,250,250,250,250,250,250,250,263,270,275,275,286,300,                300,300,300,300,300,300,300,320,350,350,350,400,400,400,400,400,450,467,500,500,500,500,500,500,500,550,550,600,600,600,650,700,700,720]
Estimates.sort()
offset = int(0.10*len(Estimates))
for i in range(offset):
       del Estimates[0]
       del Estimates[-1]
Sum = 0    
for i in range(len(Estimates)):
       Sum += Estimates[i]
Mean_Value = Sum/len(Estimates)
print(&quot;Mean : &quot;, int(Mean_Value))
#Output:
Mean :  351
&lt;/pre&gt;
&lt;hr&gt;
==Trimmed Mean for the above example== 
&lt;h3&gt;Using scipy library&lt;/h3&gt;
&lt;pre&gt;
#import scipy to use the method of trim_mean
from scipy import stats
trimMean = stats.trim_mean(Estimates, 0.1) # Trim 10% at both ends
print(&quot;Trimmed Mean : &quot;,trimMean)
#Output:
Trimmed Mean :  335.1020408163265
&lt;/pre&gt;

&lt;h3&gt;Without using scipy library&lt;/h3&gt;
&lt;pre&gt;
#Trimmed mean with 10%
p=10/100
#sorted data
data=[2, 4, 6, 7, 11, 21, 81, 90, 105, 121]
n = len(data)
#Remove elements from both end
rem=int(n*p)
newData = data[rem:-rem]
mean = 0
for i in newData:
    mean += i
mean = int(mean/len(newData))
print(&quot;Trimmed mean : &quot;,mean)
#Output: Trimmed mean :  40
&lt;/pre&gt;
[[#Top]]

=Jumbled_Words Permutations: Jumbled Words=
==What are Permutations ?==
A permutation also called ordering of selected number of elements from a list denoted by nPr here we are choosing all elements of a list and so n=r&lt;br&gt;
nPr=n!/(n-r)!&lt;br&gt; as n=r
nPn=n!&lt;br&gt; which gives all possible arrangement of elements present in a list.

 For example, permutations of list [1,2,3] are [1,2,3], [1,3,2], [2,1,3], [2,3,1], 
[3,1,2], and [3,2,1]. 
The number of permutations of a list of elements nPn is given by n!. For example, there are 2! = 2 x 1 = 2 permutations of [1,2], namely [1,2] and [2,1], and 3! = 3 x 2 x 1 = 6 permutations of [1,2,3], as mentioned above.&lt;br/&gt;
[[File:Permutations.jpg]]

==Implementation==
Here, we try to demonstrate the concept of permutations through jumbled words. It is a two player game in which one person presents the other person a different permutation of the word in his mind. The other person has to guess the right word. If he guesses, the he wins otherwise he loses.
 Input an list of words.
 Randomly pick a word from the list of words .
 Shuffle this word and present it to the other player.
 if word guesses by the player is same as the one picked from list of w
     player wins
 else
     player loses

ALTERNATE CODE TO GENERATE THIS GAME:
&lt;pre&gt;
import random
p1=input(&quot;enter player 1 name:&quot;)
p2=input(&quot;enter player 2 name:&quot;)
l=[&quot;rainbow&quot;,&quot;computer&quot;,&quot;robot&quot;,&quot;butter&quot;,&quot;vegetable&quot;,&quot;science&quot;,&quot;correct&quot;]
c1=c2=a1=a2=f1=f2=0
k=1
i=3
def play():
    n=random.choice(l)        ##n=chooses a word from list l
    l1=[]
    for j in n:
       l1.append(j)      ##creates a list for word in n
    for t in range(len(l1)):
       p=random.choice(l1)     ##this randomly displays letters in the list
       print(p)
       l1.remove(p)          ##to avoid the repetition of a letter
    s=input(&quot;enter the word:&quot;)
    if(s==n):
        print(&quot;correct&quot;)
        return 1
    else:
        print(&quot;not correct&quot;)
        print(&quot;answer is&quot;,n)
        return 0
def stat():
     print(&quot;player 1:&quot;)
     print(&quot;score:&quot;,c1)
     print(&quot;answered:&quot;,a1)
     print(&quot;failed:&quot;,f1)
     print(&quot;.............&quot;)
     print(&quot;player 2:&quot;)
     print(&quot;score:&quot;,c2)
     print(&quot;answered:&quot;,a2)
     print(&quot;failed&quot;,f2)
     if(c1&gt;c2):
         print(p1,&quot; won over &quot;,p2)
     elif(c1==c2):
         print(&quot;draw game&quot;)
     else:
         print(p2,&quot; won over &quot;,p1) 
while(i!=4):
      if(i==3):
         if(k==1):
             print(&quot;player 1 turn&quot;)
             print(&quot;your jumbled word is:&quot;)
             k=k+1
             m=play()
             if(m==1):      ##if guessed answer is correct,then score and no.of answered count will be increased
                c1+=1
                a1+=1
             else:
                f1+=1       ##else count of no.of failed to answered will be incremented
         else:
             print(&quot;player 2 turn&quot;)
             print(&quot;your jumbled word is:&quot;)
             k=k-1
             m=play()
             if(m==1):
                c2=c2+1
                a2=a2+1
             else:
                f2=f2+1
       if(i==2):
             print(&quot;present status&quot;)
             stat()
       i=int(input(&quot;enter your choice  1.stop 2.status 3.continue&quot;))
       if(i==1):
             stat()
             i=i+3
&lt;/pre&gt;
&lt;hr&gt;
=== JumbledWord Simple Logic, In Short ===
[[File:jumbledWord.gif]]
&lt;hr&gt;
'''Logic to create a Jumbled Word'''
&lt;hr&gt;
&lt;pre&gt;
#Get Jumbled Word and print it Horizontally
import random

def getJumbledWord(b):
    jumble=''
    l1 = [ b[i] for i in range(0, len(b)) ]
    for t in range(len(l1)):
       p=random.choice(l1)     ##this randomly gets letters from the list      
       jumble=jumble+p       
       l1.remove(p)
    return jumble

b=input(&quot;Enter a word to make it jumbled : &quot;)
print(&quot;Jumbled Word : &quot;, getJumbledWord(b))
&lt;/pre&gt;
&lt;hr&gt;
'''Another Logic to create a Jumbled Word'''
&lt;hr&gt;
&lt;pre&gt;
b=input(&quot;Enter a word to make it jumbled : &quot;)

def getJumbledWord1(b):
    l1 = [ b[i] for i in range(0, len(b)) ]
    random.shuffle(l1)
    str1 = ''.join(l1)
    return str1

print(&quot;Jumbled Word : &quot;, getJumbledWord1(b))
&lt;/pre&gt;

====Sample Output:====
&lt;pre&gt;
---- Output1 
Enter a word to make it jumbled : butter
Jumbled Word :  tbture

---- Output2 
Enter a word to make it jumbled : petriotism
Jumbled Word :  pittrosime
&lt;/pre&gt;

=Theory of Evolution=

== What is Evolution ? ==
Evolution is the change in heritable characteristics over successive generations. The theory of evolution explains that DNA, which acts as a carrier of genetic information from one generation to other, tends to change or mutate occasionally. These changes are reflected in next generations to come. This is how life has evolved on earth from bacteria to human beings.&lt;br&gt;
[[File:Evolution.png|500px]]

== Implementation ==
&lt;pre&gt;An array representing DNA is stored in a file. As genes are forms of DNA, they contain information to be transferred to forthcoming generations. Assume that information is in the form of bits (in the form of 0s and 1s). A number is picked randomly from 1 to the size of the array. A new parameter has been introduced which decides whether mutation would occur or not. If the value of this new parameter is 1 (It is picked randomly from 1 to 100), then only change is reflected down the generations, otherwise it is not. The pseudo code is as follows :
Input an array containing genetic information .
Randomly generate a number (say m) from 1 to length of the array. Randomly generate other number (say p) from 1 to 100.
 
    if p is equal to 1 then 
        if m is 1 then
          set it to 0
        else
          set it to 1
&lt;/pre&gt;
[[#TOP]]</text>
      <sha1>mw5nsirnki79lizbt1xze38r6ugxqed</sha1>
    </revision>
    <revision>
      <id>3516</id>
      <parentid>3515</parentid>
      <timestamp>2018-09-28T00:55:10Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* Operations and Methods to work with List */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="29363">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_3 Contributors of this page]
*Week 3 Playlist: https://www.youtube.com/playlist?list=PLc_j0TNIaWxOVx_z9jAM2UB3RqYNXaoEo
=List=
List is a flexible data structure used for storing a group of data separated by comma. The elements in a list need not be of the same data type.

'''Example:'''
       List_1 = [ 1, 2,3] or 
       List_1 = [&quot;coffee&quot;, &quot;Tea&quot;, &quot;Milk&quot;] or
       List_1 = [1,&quot;coffee&quot;, &quot;Tea&quot;, 3, &quot;5&quot;]

==List Creation==
&lt;pre&gt;a) A list can be created by simply putting values (separated by comma) between square brackets as given below,
       List_1 = [1,&quot;coffee&quot;, &quot;Tea&quot;, 3, &quot;5&quot;] #this creates a list by name List_1 containing following items


Or,
(b)A List can be created from scratch and elements can be added 
        List_2 = [ ]
        List_2.append(&quot;Kala&quot;)
        List_2.append(&quot;Mala&quot;)
Here we use &quot;append&quot; ,which is a function in python that enable us to append or attach an element to a list .
Thus List_2 will now hold [&quot;Kala&quot;,&quot;Mala&quot;]
&lt;/pre&gt;
[[#TOP]]

==Operations and Methods to work with List==
&lt;pre&gt;
a = [25,30,50,90,12,13]
b = [100,300,500,200,250]
&lt;/pre&gt;
&lt;hr&gt;
&lt;table border=2&gt;
  &lt;tr&gt;
    &lt;th&gt;&lt;b&gt;Method/&lt;br&gt;Operator&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Function&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Syntax&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Output&lt;/b&gt;&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;len()&lt;/td&gt;
    &lt;td&gt;Find length of a list&lt;/td&gt;
    &lt;td&gt;len(a)&lt;/td&gt;
    &lt;td&gt;6&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;max()&lt;/td&gt;
    &lt;td&gt;Find maximum element from the list&lt;/td&gt;
    &lt;td&gt;max(a)&lt;/td&gt;
    &lt;td&gt;90&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;min()&lt;/td&gt;
    &lt;td&gt;Find minimum element from the list&lt;/td&gt;
    &lt;td&gt;min(a)&lt;/td&gt;
    &lt;td&gt;12&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sum()&lt;/td&gt;
    &lt;td&gt;Returns sum of all elements of the list&lt;/td&gt;
    &lt;td&gt;sum(a)&lt;/td&gt;
    &lt;td&gt;220&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;reverse()&lt;/td&gt;
    &lt;td&gt;Reverses the original list&lt;/td&gt;
    &lt;td&gt;a.reverse()&lt;/td&gt;
    &lt;td&gt;[13, 12, 90, 50, 30, 25]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sort()&lt;/td&gt;
    &lt;td&gt;Sorts the original list in ascending order&lt;/td&gt;
    &lt;td&gt;a.sort()&lt;/td&gt;
    &lt;td&gt;[12, 13, 25, 30, 50, 90]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sorted()&lt;/td&gt;
    &lt;td&gt;Returns the new sorted list &lt;/td&gt;
    &lt;td&gt;sorted(a)&lt;/td&gt;
    &lt;td&gt;[12, 13, 25, 30, 50, 90]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;insert()&lt;/td&gt;
    &lt;td&gt;Insert at a particular index in the list, and shifts remaining elements&lt;/td&gt;
    &lt;td&gt;a.insert(3,3)&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 3, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;append()&lt;/td&gt;
    &lt;td&gt;Adds elements/object to the end of the list&lt;/td&gt;
    &lt;td&gt;a.append(5)&lt;br&gt;a.append([10,20])&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 5]&lt;br&gt;[25, 30, 50, 90, 12, 13, [10, 20]]&lt;br&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;extend()&lt;/td&gt;
    &lt;td&gt;Adds object to the end of the list as elements not as object&lt;/td&gt;
    &lt;td&gt;a.extend([10,20])&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 10, 20]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;*&amp;nbsp;&amp;nbsp;Repeatation&lt;br&gt;operator&lt;/td&gt;
    &lt;td&gt;Repeat the list for n times and returns a new list&lt;/td&gt;
    &lt;td&gt;a*2&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 25, 30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;+ Concatenation&lt;br&gt;operator&lt;/td&gt;
    &lt;td&gt;Concatenates two lists, and returns a new list&lt;/td&gt;
    &lt;td&gt;a+b&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 100, 300, 500, 200, 250]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;index()&lt;/td&gt;
    &lt;td&gt;Finds index of a particular element in the list or not&lt;/td&gt;
    &lt;td&gt;a.index(25)&lt;br&gt;a.index(0)&lt;br&gt;&lt;/td&gt;
    &lt;td&gt;0&lt;br&gt;&lt;br&gt;ValueError: 0 is not in list&lt;br&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;in operator&lt;/td&gt;
    &lt;td&gt;Finds whether a particular element is in the list or not, returns boolean&lt;/td&gt;
    &lt;td&gt;25 in a&lt;/td&gt;
    &lt;td&gt;True&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;not in operator&lt;/td&gt;
    &lt;td&gt;Checks if element is not available in list, returns boolean&lt;/td&gt;
    &lt;td&gt;25 not in a&lt;/td&gt;
    &lt;td&gt;False&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;count()&lt;/td&gt;
    &lt;td&gt;Counts the number of occurence of an element in the list&lt;/td&gt;
    &lt;td&gt;a.count(25)&lt;/td&gt;
    &lt;td&gt;1&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;remove()&lt;/td&gt;
    &lt;td&gt;Removes an element from the list&lt;/td&gt;
    &lt;td&gt;a.remove(25)&lt;/td&gt;
    &lt;td&gt; [30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;pop()&lt;/td&gt;
    &lt;td&gt;Delete and return item at index 0&lt;/td&gt;
    &lt;td&gt;a.pop(0)&lt;/td&gt;
    &lt;td&gt;25 , a will be [30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;del&lt;/td&gt;
    &lt;td&gt;Deletes item at a particular index from the list&lt;/td&gt;
    &lt;td&gt;del a[0]&lt;/td&gt;
    &lt;td&gt;[30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;all()&lt;/td&gt;
&lt;td&gt;Returns True, if all items in list are True or it is an empty list&lt;/td&gt;
&lt;td&gt;all([True, True, True])
all([])
&lt;/td&gt;
&lt;td&gt;True&lt;br&gt;
True&lt;/td&gt;
&lt;td&gt;any()&lt;/td&gt;
&lt;td&gt;Returns True, if any item in list is True else return False&lt;/td&gt;
&lt;td&gt;any([True, True, True])&lt;/td&gt;
&lt;td&gt;True&lt;/td&gt;

&lt;/tr&gt;
&lt;/table&gt;

==Printing the List==
=== Print whole list ===
A list can be printed simply or using a ''for / while'' loop 

 print(List_2)     # To print the entire list
This code will print      
 ['Kala','Mala']     

===Print element at a particular index===
&lt;pre&gt;
Using index position
    List_2[0]     # prints 'Kala' ,i.e,the value at index position 0.
    List_2[1]     # prints 'Mala'.
&lt;/pre&gt;
=== Without using index position ===
&lt;pre&gt;
for item in List_2:   # here item is a variable used to access elements in list.
       print(item)
   This code snippet prints 
    Kala
    Mala
&lt;/pre&gt;
[[#TOP]]

==Search for a particular element in list==
Elements in a list can be searched by one of the two ways:
=== using index() function===
&lt;pre&gt;
ages1 = [11,23,12,23,45]

#if element is available in the list, index() returns the index value on which, the element is present.
print(ages1.index(45))#Output: 4

#if element is not available in the list, index() returns ''ValueError''
print(ages1.index(0))#Output: ValueError:
&lt;/pre&gt;

In programming, if such error occurs, program gets terminated. It can be solved using exception handling.
e.g.
&lt;pre&gt;
ages1 = [11,23,12,23,45]

try:
    print(ages1.index(0))
except ValueError:
    print(&quot;Exception has occured&quot;)    
    print(&quot;Element is not found in the list&quot;)

&lt;/pre&gt;
&lt;pre&gt;
'''Output: 
Exception has occured
Element is not found in the list
'''&lt;/pre&gt;
[[#TOP]]

=== using 'in' operator===
''in'' operator is used to check whether a particular element is available in the list or not.e.g.

&lt;pre&gt;
ages1 = [11,23,12,23,45]
no=11

if no in ages1:
    print(&quot;no is there in the list&quot;)
else:    
    print(&quot;no is NOT there in the list&quot;)
&lt;/pre&gt;
&lt;pre&gt;
#Output: no is there in the list
&lt;/pre&gt;

'''Number is not there in the list'''
&lt;pre&gt;
ages1 = [11,23,12,23,45]
no=15

if no in ages1:
    print(&quot;no is there in the list&quot;)
else:    
    print(&quot;no is NOT there in the list&quot;)
&lt;/pre&gt;
&lt;pre&gt;
Output: no is NOT there in the list
&lt;/pre&gt;
[[#TOP]]

==Updating the List==
The lists can be updated using ''append'' or ''insert'' function.  Append adds the element to the end of the list and Insert adds the element in the specified position.
   List_2.append(&quot;Sheela&quot;)    # add the element 'Sheela' to the end of the list.
   print (List_2) will output 
   ['Kala', 'Mala', 'Sheela']
   
   List_2.insert(1,&quot;Bala&quot;)    # add the element &quot;Bala&quot; in the list at the index 1.
   print (List_2) will output 
   ['Kala', 'Bala','Mala', 'Sheela']

=== Extend the list by adding elements of other list at end using extend()===
&lt;pre&gt;
ages = [11,23,12,23,45]
ages.extend([57,58])
print(ages)
&lt;/pre&gt;

&lt;pre&gt;
#Output: [11, 23, 12, 23, 45, 57, 58]
&lt;/pre&gt;

==== Difference between ''append and extend'' ====
Difference between append and extend can be easily understood, by the following example.

&lt;pre&gt;
appendlist = [11,23,12,23,45]
appendlist.append([57,58])

extendlist= [11,23,12,23,45]
extendlist.extend([57,58])
&lt;/pre&gt;

&lt;pre&gt;
'''Output:
[11, 23, 12, 23, 45, [57, 58]]
[11, 23, 12, 23, 45, 57, 58]'''
&lt;/pre&gt;
[[#TOP]]

==Basic Operations on List==
===Frequency of Occurrence===
list.count(object) will return the number of times the object occur in the list.
  '''Example'''
    ages = [11,23,12,23,45,43,22,24,23]
    ages.count(23) will return
    3
    ages.count(100) will return
    0

===Length of the List===
len(list) will return the length of the list ie. the number of objects in the list.
  '''Example'''
    ages = [11,23,12,23,45,43,22,24,23]
    len(ages) will output
    9
To print the objects in the list either use ''for item in list'' or ''for index in range(len(list))''
    for item in ages:       
        print (item)  
        (OR)
    for index in range(len(ages)) :
        print (ages[index])
===Sort the List===
list.sort() will sort the list in ascending order
  '''Example'''
    ages = [11,23,12,23,45,43,22,24,23]
    ages.sort() 
    print (ages) 
    [11, 12, 22, 23, 23, 23, 24, 43, 45]

[[#TOP]]

===Sort the List using sorted() function===
sorted(list1) will sort the list and return a new list, it doesn't modify the original list
&lt;br&gt;'''Example: Sort in ascending order'''
&lt;pre&gt;
ages = [11,23,12,23,45,43,22,24,23]
newList=sorted(ages)
print(newList)

#Output: [11, 12, 22, 23, 23, 23, 24, 43, 45]
&lt;/pre&gt;

&lt;br&gt;'''Example: Sort in descending order'''
&lt;pre&gt;
ages = [11,23,12,23,45,43,22,24,23]
newList=sorted(ages,reverse=True)
print(newList)

#Output: [45, 43, 24, 23, 23, 23, 22, 12, 11]
&lt;/pre&gt;

===Reverse the List===
list.reverse() will reverse the original list
  '''Example'''
    ages = [11, 12, 22, 23, 23, 23, 24, 43, 45]
    ages.reverse()
    print (ages)
    [45, 43, 24, 23, 23, 23, 22, 12, 11]

Both sort() and reverse() list operation will work on numeric and alphanumeric data list.

A special use of the reverse() function is to descend a list that is sorted in ascending order.

  '''Example'''
&lt;pre&gt;
ages = [11, 12, 22, 23, 23, 23, 24, 43, 45]
ages.sort()
print(ages)
ages.reverse()
print(ages)
&lt;/pre&gt;

===Slicing===
Used to retrieve an object or objects in a range as a list  
  '''Example'''
Use ''list[index]'' to retrieve the object at the given index
         In [1]: student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
         In [2]: student[3]     #Object at index 3.  Remember index starts at 0
         Out[2]: 'Geetha'      


Use ''list[start_index : end_index + 1]'' to retrieve objects from the start_index to end_index 
         In [3]: student[2:4]     # Objects from index 2 to 3 as List. Note the [ and ]
         Out[3]: ['Vijay', 'Geetha']   


Use ''list[:]'' to retrieve objects from the starting of the list to the end of the list. 
The default start value will be the starting index of the list (i.e. 0) and the default end value
will be the length of the list 
         In [4]: student[:]        # prints the entire list
         Out[4]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma', 'Janani']


         In [5]: student[:5]       # prints the objects from the start of the list upto object at index 4
         Out[5]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran']


         In [6]: student[2:]       # prints the objects from index 2 upto the end of the list
         Out[6]: ['Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma', 'Janani']


Negative index too is available in Python. It starts from last element of the list. i.e.

         In [7]:student[-1]        #prints last index of list
         Out[7]: 'Janani'


         In [8]:student[-1:-8]     #prints empty list
         Out[8]: []


         In [9]:student[-8:-1]     #prints -8th index to -1st index elements
         Out[9]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma']

[[#TOP]]
===Removing Item from list ===
----

Is used to remove a specific item from the list.

'''Example:'''
 
Use list.remove(entry/value)  Or   del list[index]    Or list.pop(index)
         student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
         student.remove(&quot;Arun&quot;)   #This will delete item &quot;Arun&quot;
         Or    
         del student[0]           # This will delete item at index 0
         Or
         student.pop(0)         # This will delete and return item at index 0


         print(student)    
         Output: [&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]

[[#TOP]]
===Delete list ===
----
Used to delete complete list

'''Example'''

Use del &lt;list name&gt;
         student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
         del student

===Concatenation of two lists===
----
''+'' is the concatenation operator which is used concatenate two lists. 
&lt;pre&gt;
ages1 = [11,23,12,23,45]
ages2 = [25, 24, 43, 47]
age=ages1+ages2
print(age)
#Output: [11, 23, 12, 23, 45, 25, 24, 43, 47]
&lt;/pre&gt;

===Repeatation of a list ===
----
''*'' is the operator to repeat a particular list.
&lt;pre&gt;
ages1 = [11,23,12,23,45]
age=ages1*5 #ages1 list is repeated 5 times and stroed in ''age'' list
print(age)

#Output: [11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45]
&lt;/pre&gt;

=== all and any for List===
all() and any() are special functions to check whether all elements in iterable is ''True'' or any element is ''True''
&lt;ol&gt;
&lt;li&gt;If all elements in a list are ''True'', '''all()''' will return ''True''&lt;/li&gt;
&lt;li&gt;If iterable is ''empty'', '''all()''' will return ''True''&lt;/li&gt;
&lt;li&gt;If iterable contains at least one ''True'', '''any()''' will return ''True''&lt;/li&gt;
&lt;li&gt;If iterable is ''empty'', '''any()''' will return ''False''&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;
lsit=[True, True, True, True]
print(all(lsit))#Output: True
print(any(lsit))#Output: True

lsit1=[True, False, True, True]
print(all(lsit1))#Output: False
print(any(lsit1))#Output: True

lsit2=[False,False,False]
print(all(lsit2))#Output: False
print(any(lsit2))#Output: False

lsit3=[]
print(all(lsit3))#Output: True
print(any(lsit3))#Output: False
&lt;/pre&gt;

==Conditional Statements==
&lt;pre&gt;Conditionals are used to check the condition and change the flow of the program 
accordingly. They are realized in programming languages through if statement. The 
syntax is as follows :
         if condition : 
            statement
    '''Note:''' Do not forget indentation (inserting space/tab) in the line after the
 if condition.
    
    In case you want to execute a set of statements when a condition is true and another

set of statement when the condition is false.
         if condition : 
            statement 1
         else :
            statement 2
    
    Multiple if-else statements can be written as follows:
         if condition_1 : 
            statement 1
         elif condition_2 : # 'elif' is short for 'else if'
            statement 2
         elif condition_3 :
            statement 3
        .
        .
         else :
            final statement
&lt;/pre&gt;
[[#TOP]]

=Loops and Conditionals : Fizzbuzz=
====Loops====
&lt;pre&gt;
Loops are used to execute a set of repetitive statements. They are realized
through 'while' and 'for' loops in programming languages. The syntax of 'for' loop is 
as follows :
        for LOOPVARIABLE in SEQUENCE: 
            STATEMENTS
    '''e.g.''' to print all the data from a list we can write:
        for item in list_name
            print(item)
    OR
        for index in range(len(list_name))
            print(list_name[index])
    
    The syntax for while loop is as follows :
    
        while BOOLEANEXPRESSION: 
            STATEMENTS
            INCREMENT/DECREMENT
    
    '''e.g.''' if we want to print all numbers from 1 to 10
        i=1
        while i&lt;=10 :
            print(i,&quot; &quot;)
            i=i+1
    
    'while' loop has indefinite iteration (run-time unknown). So, there must be loop
 break statement in it.
 Whereas 'for' loop is definite in nature (i.e. known or predictable span).&lt;br&gt;

&lt;b&gt;NOTE: Python doesn't have anything like do-while loop.&lt;/b&gt;
&lt;/pre&gt;
[[#TOP]]

==Implementation==
Here, we try to demonstrate the concept of loops and conditionals through a game called Fizzbuzz. The rules are as follows :&lt;br/&gt;
[[File:fizzBuzz.gif]]

• if input number is a multiple of ’3’ print ”Fizz”
&lt;br/&gt;
• if input number is a multiple of ’5’ print ”Buzz”
&lt;br/&gt;
• if input number is a multiple of both '3' and ’5’ print ”FizzBuzz”
&lt;br/&gt;
The pseudo code is as follows :
&lt;pre&gt;
   If input no % 3 == 0 and  input no % 5 == 0 : 
       print ”Fizzbuzz”
   else if input no % 3 == 0 : 
       print ”Fizz”
   else if input no % 5 == 0 : 
       print ”Buzz”
   else :
       print the input no
&lt;/pre&gt;
The order of statements execution matters to get the desired output. The highest priority condition should be first followed by other. In fizzbuzz programming, first checking should be done for both divisibility of 3 and 5. If condition not satisfied only then it should check individually for 3 or 5. So carefully choosing the order is crucial for better programming.
Note: There is some effect of present condition statements chosen on next conditions statements. That is why in first attempt fizzbuzz programming got struck.

Example: 
&lt;pre&gt;
#Code to achieve the above requirement in python3.
i = int(input(&quot;Enter the number&quot;)) 
if i%3 == 0 and i%5 == 0: print(i,&quot;FizzBuzz&quot;)  
elif i%5 == 0: print(i,&quot;Buzz&quot;)
elif i%3 == 0: print(i,&quot;Fizz&quot;)
else: print(i)
&lt;/pre&gt;
Lets put the same into a loop for a range given by the user.
&lt;pre&gt;
def fizzbuzzgame(start,stop):
    for i in range(start,stop+1):
        if i%3 == 0 and i%5 == 0:
            print(i,&quot;FizzBuzz&quot;)
        elif i%5 == 0:
            print(i,&quot;Buzz&quot;)
        elif i%3 == 0:
            print(i,&quot;Fizz&quot;)
        else: print(i)

fizzbuzzgame(50,100)
&lt;/pre&gt;


=== Fizz Buzz game in Interactive mode with Score ===
'''By Ms. Ami Tusharkant Choksi'''
&lt;pre&gt;
def fizzbuzzgame(i):
        if i%3 == 0 and i%5 == 0:
            print(i,&quot;FizzBuzz&quot;)
            return(&quot;fzbz&quot;)
        elif i%5 == 0:
            print(i,&quot;Buzz&quot;)
            return(&quot;bz&quot;)
        elif i%3 == 0:
            print(i,&quot;Fizz&quot;)
            return(&quot;fz&quot;)
        else:
            print(i)
            return(&quot;no&quot;)

ch = 'y'
fizzbuzz=0
fizz=0
buzz=0
nothing=0
print(&quot;&quot;&quot;
 _____  ____  _____  _____  ____   __ __  _____  _____       ____   ____  ___ ___    ___ 
|     ||    ||     ||     ||    \ |  |  ||     ||     |     /    | /    ||   |   |  /  _]
|   __| |  | |__/  ||__/  ||  o  )|  |  ||__/  ||__/  |    |   __||  o  || _   _ | /  [_ 
|  |_   |  | |   __||   __||     ||  |  ||   __||   __|    |  |  ||     ||  \_/  ||    _]
|   _]  |  | |  /  ||  /  ||  O  ||  :  ||  /  ||  /  |    |  |_ ||  _  ||   |   ||   [_ 
|  |    |  | |     ||     ||     ||     ||     ||     |    |     ||  |  ||   |   ||     |
|__|   |____||_____||_____||_____| \__,_||_____||_____|    |___,_||__|__||___|___||_____|
                                                                                         
&quot;&quot;&quot;)   

while(ch == 'y'):
    n=int(input(&quot;Enter a Number : &quot;))
    winLoose=fizzbuzzgame(n)
    if(winLoose == &quot;fz&quot;):
        fizz+=1
    elif(winLoose == &quot;bz&quot;):
        buzz+=1
    elif(winLoose == &quot;fzbz&quot;):
        fizzbuzz+=1
    ch=input(&quot;Do you want to continue playing the game : (y/n)&quot;)
    if(ch=='n'):
        print('Congratulations, your score is\n FizzBuzz:%d\nFizz:%d\nBuzz:%d' %
(fizzbuzz,fizz,buzz))
    
'''Sample Output:

 _____  ____  _____  _____  ____   __ __  _____  _____       ____   ____  ___ ___    ___ 
|     ||    ||     ||     ||    \ |  |  ||     ||     |     /    | /    ||   |   |  /  _]
|   __| |  | |__/  ||__/  ||  o  )|  |  ||__/  ||__/  |    |   __||  o  || _   _ | /  [_ 
|  |_   |  | |   __||   __||     ||  |  ||   __||   __|    |  |  ||     ||  \_/  ||    _]
|   _]  |  | |  /  ||  /  ||  O  ||  :  ||  /  ||  /  |    |  |_ ||  _  ||   |   ||   [_ 
|  |    |  | |     ||     ||     ||     ||     ||     |    |     ||  |  ||   |   ||     |
|__|   |____||_____||_____||_____| \__,_||_____||_____|    |___,_||__|__||___|___||_____|
                                                                                         

Enter a Number : 666
666 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 777
777 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 555
555 FizzBuzz
Do you want to continue playing the game : (y/n)y
Enter a Number : 1
1
Do you want to continue playing the game : (y/n)y
Enter a Number : 789
789 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 25
25 Buzz
Do you want to continue playing the game : (y/n)n
Congratulations, your score is

FizzBuzz:1
Fizz:3
Buzz:1

&lt;/pre&gt;

=Crowd Computing: Just Estimate=
==Wisdom of Crowds==
The concept of ’Wisdom of Crowds’ was proposed by Francis Galton. A weight-judging competition was carried on at the annual show of the West of England Fat Stock and Poultry Exhibition recently held at Plymouth, A fat ox having been selected, competitors bought stamped and numbered cards, each, on which to inscribe their respective names, addresses, and estimates of what the ox would weigh after it had been slaughtered. Those who guessed most successfully received prizes. About 8oo tickets were issued to the par- ticipants. The middlemost estimate of all the estimates recorded was 1207 lbs and the actual weight of the ox was 1198 lbs.

==Our Experiment==
The crowd had to guess the number of candies/gems in a jar. Around 75 people participated in the experiment. The actual number of gems in the jar were 375. The median of all estimates came out to be 300 and the mean of all the estimates came out to be around 396. Median underestimated and mean overestimated the actual value. So according to recent studies, Trimmed mean must be used as an aggregate measure to estimate where Wisdom of Crowds is involved.
[[File:Gemsjar.jpg|center|200px|caption]]

===Trimmed Mean===
In these kinds of experiments, 10% trimmed mean is usually followed. For calculating 10% trimmed mean, remove 10% smallest and 10% largest values from the sample. Calculate the mean of the sample obtained. In the above experiment, the trimmed mean came out to be around 351 which is very close to the actual value.

==Implementation==
Here, we try to demonstrate the concept of trimmed mean through crowd computing.
 Input a list of estimates done by the crowd .
 Sort the list.
 Remove the 10% smallest values.
 Remove the 10% largest values.
 Calculate the mean of the new list obtained .&lt;hr&gt;

==Data of Experiment==       
    Estimates =[1000,1010,1786,2000,1500,1500,100,120,150,150,150,170,175,180,197,200,200,200,200,200,200,220,220,220,220,234,250,250,250,250,250,250,250,250,250,263,270,275,275,286,300,
                300,300,300,300,300,300,300,320,350,350,350,400, 400,400,400,400,450,467,500,500,500,500,500,500,500,550,550,600,600,600,650,700,700,720]

    '''CODE:'''
&lt;pre&gt;
Estimates = [1000,1010,1786,2000,1500,1500,100,120,150,150,150,170,175,180,197,200,200,200,200,200,200,220,220,220,220,234,250,250,250,250,250,250,250,250,250,263,270,275,275,286,300,                300,300,300,300,300,300,300,320,350,350,350,400,400,400,400,400,450,467,500,500,500,500,500,500,500,550,550,600,600,600,650,700,700,720]
Estimates.sort()
offset = int(0.10*len(Estimates))
for i in range(offset):
       del Estimates[0]
       del Estimates[-1]
Sum = 0    
for i in range(len(Estimates)):
       Sum += Estimates[i]
Mean_Value = Sum/len(Estimates)
print(&quot;Mean : &quot;, int(Mean_Value))
#Output:
Mean :  351
&lt;/pre&gt;
&lt;hr&gt;
==Trimmed Mean for the above example== 
&lt;h3&gt;Using scipy library&lt;/h3&gt;
&lt;pre&gt;
#import scipy to use the method of trim_mean
from scipy import stats
trimMean = stats.trim_mean(Estimates, 0.1) # Trim 10% at both ends
print(&quot;Trimmed Mean : &quot;,trimMean)
#Output:
Trimmed Mean :  335.1020408163265
&lt;/pre&gt;

&lt;h3&gt;Without using scipy library&lt;/h3&gt;
&lt;pre&gt;
#Trimmed mean with 10%
p=10/100
#sorted data
data=[2, 4, 6, 7, 11, 21, 81, 90, 105, 121]
n = len(data)
#Remove elements from both end
rem=int(n*p)
newData = data[rem:-rem]
mean = 0
for i in newData:
    mean += i
mean = int(mean/len(newData))
print(&quot;Trimmed mean : &quot;,mean)
#Output: Trimmed mean :  40
&lt;/pre&gt;
[[#Top]]

=Jumbled_Words Permutations: Jumbled Words=
==What are Permutations ?==
A permutation also called ordering of selected number of elements from a list denoted by nPr here we are choosing all elements of a list and so n=r&lt;br&gt;
nPr=n!/(n-r)!&lt;br&gt; as n=r
nPn=n!&lt;br&gt; which gives all possible arrangement of elements present in a list.

 For example, permutations of list [1,2,3] are [1,2,3], [1,3,2], [2,1,3], [2,3,1], 
[3,1,2], and [3,2,1]. 
The number of permutations of a list of elements nPn is given by n!. For example, there are 2! = 2 x 1 = 2 permutations of [1,2], namely [1,2] and [2,1], and 3! = 3 x 2 x 1 = 6 permutations of [1,2,3], as mentioned above.&lt;br/&gt;
[[File:Permutations.jpg]]

==Implementation==
Here, we try to demonstrate the concept of permutations through jumbled words. It is a two player game in which one person presents the other person a different permutation of the word in his mind. The other person has to guess the right word. If he guesses, the he wins otherwise he loses.
 Input an list of words.
 Randomly pick a word from the list of words .
 Shuffle this word and present it to the other player.
 if word guesses by the player is same as the one picked from list of w
     player wins
 else
     player loses

ALTERNATE CODE TO GENERATE THIS GAME:
&lt;pre&gt;
import random
p1=input(&quot;enter player 1 name:&quot;)
p2=input(&quot;enter player 2 name:&quot;)
l=[&quot;rainbow&quot;,&quot;computer&quot;,&quot;robot&quot;,&quot;butter&quot;,&quot;vegetable&quot;,&quot;science&quot;,&quot;correct&quot;]
c1=c2=a1=a2=f1=f2=0
k=1
i=3
def play():
    n=random.choice(l)        ##n=chooses a word from list l
    l1=[]
    for j in n:
       l1.append(j)      ##creates a list for word in n
    for t in range(len(l1)):
       p=random.choice(l1)     ##this randomly displays letters in the list
       print(p)
       l1.remove(p)          ##to avoid the repetition of a letter
    s=input(&quot;enter the word:&quot;)
    if(s==n):
        print(&quot;correct&quot;)
        return 1
    else:
        print(&quot;not correct&quot;)
        print(&quot;answer is&quot;,n)
        return 0
def stat():
     print(&quot;player 1:&quot;)
     print(&quot;score:&quot;,c1)
     print(&quot;answered:&quot;,a1)
     print(&quot;failed:&quot;,f1)
     print(&quot;.............&quot;)
     print(&quot;player 2:&quot;)
     print(&quot;score:&quot;,c2)
     print(&quot;answered:&quot;,a2)
     print(&quot;failed&quot;,f2)
     if(c1&gt;c2):
         print(p1,&quot; won over &quot;,p2)
     elif(c1==c2):
         print(&quot;draw game&quot;)
     else:
         print(p2,&quot; won over &quot;,p1) 
while(i!=4):
      if(i==3):
         if(k==1):
             print(&quot;player 1 turn&quot;)
             print(&quot;your jumbled word is:&quot;)
             k=k+1
             m=play()
             if(m==1):      ##if guessed answer is correct,then score and no.of answered count will be increased
                c1+=1
                a1+=1
             else:
                f1+=1       ##else count of no.of failed to answered will be incremented
         else:
             print(&quot;player 2 turn&quot;)
             print(&quot;your jumbled word is:&quot;)
             k=k-1
             m=play()
             if(m==1):
                c2=c2+1
                a2=a2+1
             else:
                f2=f2+1
       if(i==2):
             print(&quot;present status&quot;)
             stat()
       i=int(input(&quot;enter your choice  1.stop 2.status 3.continue&quot;))
       if(i==1):
             stat()
             i=i+3
&lt;/pre&gt;
&lt;hr&gt;
=== JumbledWord Simple Logic, In Short ===
[[File:jumbledWord.gif]]
&lt;hr&gt;
'''Logic to create a Jumbled Word'''
&lt;hr&gt;
&lt;pre&gt;
#Get Jumbled Word and print it Horizontally
import random

def getJumbledWord(b):
    jumble=''
    l1 = [ b[i] for i in range(0, len(b)) ]
    for t in range(len(l1)):
       p=random.choice(l1)     ##this randomly gets letters from the list      
       jumble=jumble+p       
       l1.remove(p)
    return jumble

b=input(&quot;Enter a word to make it jumbled : &quot;)
print(&quot;Jumbled Word : &quot;, getJumbledWord(b))
&lt;/pre&gt;
&lt;hr&gt;
'''Another Logic to create a Jumbled Word'''
&lt;hr&gt;
&lt;pre&gt;
b=input(&quot;Enter a word to make it jumbled : &quot;)

def getJumbledWord1(b):
    l1 = [ b[i] for i in range(0, len(b)) ]
    random.shuffle(l1)
    str1 = ''.join(l1)
    return str1

print(&quot;Jumbled Word : &quot;, getJumbledWord1(b))
&lt;/pre&gt;

====Sample Output:====
&lt;pre&gt;
---- Output1 
Enter a word to make it jumbled : butter
Jumbled Word :  tbture

---- Output2 
Enter a word to make it jumbled : petriotism
Jumbled Word :  pittrosime
&lt;/pre&gt;

=Theory of Evolution=

== What is Evolution ? ==
Evolution is the change in heritable characteristics over successive generations. The theory of evolution explains that DNA, which acts as a carrier of genetic information from one generation to other, tends to change or mutate occasionally. These changes are reflected in next generations to come. This is how life has evolved on earth from bacteria to human beings.&lt;br&gt;
[[File:Evolution.png|500px]]

== Implementation ==
&lt;pre&gt;An array representing DNA is stored in a file. As genes are forms of DNA, they contain information to be transferred to forthcoming generations. Assume that information is in the form of bits (in the form of 0s and 1s). A number is picked randomly from 1 to the size of the array. A new parameter has been introduced which decides whether mutation would occur or not. If the value of this new parameter is 1 (It is picked randomly from 1 to 100), then only change is reflected down the generations, otherwise it is not. The pseudo code is as follows :
Input an array containing genetic information .
Randomly generate a number (say m) from 1 to length of the array. Randomly generate other number (say p) from 1 to 100.
 
    if p is equal to 1 then 
        if m is 1 then
          set it to 0
        else
          set it to 1
&lt;/pre&gt;
[[#TOP]]</text>
      <sha1>bogib5v2s41b4553oykoi1moa8ma73r</sha1>
    </revision>
    <revision>
      <id>3517</id>
      <parentid>3516</parentid>
      <timestamp>2018-09-28T00:57:20Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* Operations and Methods to work with List */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="29432">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_3 Contributors of this page]
*Week 3 Playlist: https://www.youtube.com/playlist?list=PLc_j0TNIaWxOVx_z9jAM2UB3RqYNXaoEo
=List=
List is a flexible data structure used for storing a group of data separated by comma. The elements in a list need not be of the same data type.

'''Example:'''
       List_1 = [ 1, 2,3] or 
       List_1 = [&quot;coffee&quot;, &quot;Tea&quot;, &quot;Milk&quot;] or
       List_1 = [1,&quot;coffee&quot;, &quot;Tea&quot;, 3, &quot;5&quot;]

==List Creation==
&lt;pre&gt;a) A list can be created by simply putting values (separated by comma) between square brackets as given below,
       List_1 = [1,&quot;coffee&quot;, &quot;Tea&quot;, 3, &quot;5&quot;] #this creates a list by name List_1 containing following items


Or,
(b)A List can be created from scratch and elements can be added 
        List_2 = [ ]
        List_2.append(&quot;Kala&quot;)
        List_2.append(&quot;Mala&quot;)
Here we use &quot;append&quot; ,which is a function in python that enable us to append or attach an element to a list .
Thus List_2 will now hold [&quot;Kala&quot;,&quot;Mala&quot;]
&lt;/pre&gt;
[[#TOP]]

==Operations and Methods to work with List==
&lt;pre&gt;
a = [25,30,50,90,12,13]
b = [100,300,500,200,250]
&lt;/pre&gt;
&lt;hr&gt;
&lt;table border=2&gt;
  &lt;tr&gt;
    &lt;th&gt;&lt;b&gt;Method/&lt;br&gt;Operator&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Function&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Syntax&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Output&lt;/b&gt;&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;len()&lt;/td&gt;
    &lt;td&gt;Find length of a list&lt;/td&gt;
    &lt;td&gt;len(a)&lt;/td&gt;
    &lt;td&gt;6&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;max()&lt;/td&gt;
    &lt;td&gt;Find maximum element from the list&lt;/td&gt;
    &lt;td&gt;max(a)&lt;/td&gt;
    &lt;td&gt;90&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;min()&lt;/td&gt;
    &lt;td&gt;Find minimum element from the list&lt;/td&gt;
    &lt;td&gt;min(a)&lt;/td&gt;
    &lt;td&gt;12&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sum()&lt;/td&gt;
    &lt;td&gt;Returns sum of all elements of the list&lt;/td&gt;
    &lt;td&gt;sum(a)&lt;/td&gt;
    &lt;td&gt;220&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;reverse()&lt;/td&gt;
    &lt;td&gt;Reverses the original list&lt;/td&gt;
    &lt;td&gt;a.reverse()&lt;/td&gt;
    &lt;td&gt;[13, 12, 90, 50, 30, 25]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sort()&lt;/td&gt;
    &lt;td&gt;Sorts the original list in ascending order&lt;/td&gt;
    &lt;td&gt;a.sort()&lt;/td&gt;
    &lt;td&gt;[12, 13, 25, 30, 50, 90]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sorted()&lt;/td&gt;
    &lt;td&gt;Returns the new sorted list &lt;/td&gt;
    &lt;td&gt;sorted(a)&lt;/td&gt;
    &lt;td&gt;[12, 13, 25, 30, 50, 90]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;insert()&lt;/td&gt;
    &lt;td&gt;Insert at a particular index in the list, and shifts remaining elements&lt;/td&gt;
    &lt;td&gt;a.insert(3,3)&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 3, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;append()&lt;/td&gt;
    &lt;td&gt;Adds elements/object to the end of the list&lt;/td&gt;
    &lt;td&gt;a.append(5)&lt;br&gt;a.append([10,20])&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 5]&lt;br&gt;[25, 30, 50, 90, 12, 13, [10, 20]]&lt;br&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;extend()&lt;/td&gt;
    &lt;td&gt;Adds object to the end of the list as elements not as object&lt;/td&gt;
    &lt;td&gt;a.extend([10,20])&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 10, 20]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;*&amp;nbsp;&amp;nbsp;Repeatation&lt;br&gt;operator&lt;/td&gt;
    &lt;td&gt;Repeat the list for n times and returns a new list&lt;/td&gt;
    &lt;td&gt;a*2&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 25, 30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;+ Concatenation&lt;br&gt;operator&lt;/td&gt;
    &lt;td&gt;Concatenates two lists, and returns a new list&lt;/td&gt;
    &lt;td&gt;a+b&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 100, 300, 500, 200, 250]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;index()&lt;/td&gt;
    &lt;td&gt;Finds index of a particular element in the list or not&lt;/td&gt;
    &lt;td&gt;a.index(25)&lt;br&gt;a.index(0)&lt;br&gt;&lt;/td&gt;
    &lt;td&gt;0&lt;br&gt;&lt;br&gt;ValueError: 0 is not in list&lt;br&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;in operator&lt;/td&gt;
    &lt;td&gt;Finds whether a particular element is in the list or not, returns boolean&lt;/td&gt;
    &lt;td&gt;25 in a&lt;/td&gt;
    &lt;td&gt;True&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;not in operator&lt;/td&gt;
    &lt;td&gt;Checks if element is not available in list, returns boolean&lt;/td&gt;
    &lt;td&gt;25 not in a&lt;/td&gt;
    &lt;td&gt;False&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;count()&lt;/td&gt;
    &lt;td&gt;Counts the number of occurence of an element in the list&lt;/td&gt;
    &lt;td&gt;a.count(25)&lt;/td&gt;
    &lt;td&gt;1&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;remove()&lt;/td&gt;
    &lt;td&gt;Removes an element from the list&lt;/td&gt;
    &lt;td&gt;a.remove(25)&lt;/td&gt;
    &lt;td&gt; [30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;pop()&lt;/td&gt;
    &lt;td&gt;Delete and return item at index 0&lt;/td&gt;
    &lt;td&gt;a.pop(0)&lt;/td&gt;
    &lt;td&gt;25 , a will be [30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;del&lt;/td&gt;
    &lt;td&gt;Deletes item at a particular index from the list&lt;/td&gt;
    &lt;td&gt;del a[0]&lt;/td&gt;
    &lt;td&gt;[30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;all()&lt;/td&gt;
&lt;td&gt;Returns True, if all items in list are True or it is an empty list&lt;/td&gt;
&lt;td&gt;all([True, True, True])
all([])
&lt;/td&gt;
&lt;td&gt;True&lt;br&gt;
True&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;any()&lt;/td&gt;
&lt;td&gt;Returns True, if any item in list is True else return False&lt;/td&gt;
&lt;td&gt;any([True, True, True])&lt;br&gt;
any([True, False, True])&lt;br&gt;
any([])&lt;/td&gt;
&lt;td&gt;True&lt;br&gt;False&lt;br&gt;False&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;

==Printing the List==
=== Print whole list ===
A list can be printed simply or using a ''for / while'' loop 

 print(List_2)     # To print the entire list
This code will print      
 ['Kala','Mala']     

===Print element at a particular index===
&lt;pre&gt;
Using index position
    List_2[0]     # prints 'Kala' ,i.e,the value at index position 0.
    List_2[1]     # prints 'Mala'.
&lt;/pre&gt;
=== Without using index position ===
&lt;pre&gt;
for item in List_2:   # here item is a variable used to access elements in list.
       print(item)
   This code snippet prints 
    Kala
    Mala
&lt;/pre&gt;
[[#TOP]]

==Search for a particular element in list==
Elements in a list can be searched by one of the two ways:
=== using index() function===
&lt;pre&gt;
ages1 = [11,23,12,23,45]

#if element is available in the list, index() returns the index value on which, the element is present.
print(ages1.index(45))#Output: 4

#if element is not available in the list, index() returns ''ValueError''
print(ages1.index(0))#Output: ValueError:
&lt;/pre&gt;

In programming, if such error occurs, program gets terminated. It can be solved using exception handling.
e.g.
&lt;pre&gt;
ages1 = [11,23,12,23,45]

try:
    print(ages1.index(0))
except ValueError:
    print(&quot;Exception has occured&quot;)    
    print(&quot;Element is not found in the list&quot;)

&lt;/pre&gt;
&lt;pre&gt;
'''Output: 
Exception has occured
Element is not found in the list
'''&lt;/pre&gt;
[[#TOP]]

=== using 'in' operator===
''in'' operator is used to check whether a particular element is available in the list or not.e.g.

&lt;pre&gt;
ages1 = [11,23,12,23,45]
no=11

if no in ages1:
    print(&quot;no is there in the list&quot;)
else:    
    print(&quot;no is NOT there in the list&quot;)
&lt;/pre&gt;
&lt;pre&gt;
#Output: no is there in the list
&lt;/pre&gt;

'''Number is not there in the list'''
&lt;pre&gt;
ages1 = [11,23,12,23,45]
no=15

if no in ages1:
    print(&quot;no is there in the list&quot;)
else:    
    print(&quot;no is NOT there in the list&quot;)
&lt;/pre&gt;
&lt;pre&gt;
Output: no is NOT there in the list
&lt;/pre&gt;
[[#TOP]]

==Updating the List==
The lists can be updated using ''append'' or ''insert'' function.  Append adds the element to the end of the list and Insert adds the element in the specified position.
   List_2.append(&quot;Sheela&quot;)    # add the element 'Sheela' to the end of the list.
   print (List_2) will output 
   ['Kala', 'Mala', 'Sheela']
   
   List_2.insert(1,&quot;Bala&quot;)    # add the element &quot;Bala&quot; in the list at the index 1.
   print (List_2) will output 
   ['Kala', 'Bala','Mala', 'Sheela']

=== Extend the list by adding elements of other list at end using extend()===
&lt;pre&gt;
ages = [11,23,12,23,45]
ages.extend([57,58])
print(ages)
&lt;/pre&gt;

&lt;pre&gt;
#Output: [11, 23, 12, 23, 45, 57, 58]
&lt;/pre&gt;

==== Difference between ''append and extend'' ====
Difference between append and extend can be easily understood, by the following example.

&lt;pre&gt;
appendlist = [11,23,12,23,45]
appendlist.append([57,58])

extendlist= [11,23,12,23,45]
extendlist.extend([57,58])
&lt;/pre&gt;

&lt;pre&gt;
'''Output:
[11, 23, 12, 23, 45, [57, 58]]
[11, 23, 12, 23, 45, 57, 58]'''
&lt;/pre&gt;
[[#TOP]]

==Basic Operations on List==
===Frequency of Occurrence===
list.count(object) will return the number of times the object occur in the list.
  '''Example'''
    ages = [11,23,12,23,45,43,22,24,23]
    ages.count(23) will return
    3
    ages.count(100) will return
    0

===Length of the List===
len(list) will return the length of the list ie. the number of objects in the list.
  '''Example'''
    ages = [11,23,12,23,45,43,22,24,23]
    len(ages) will output
    9
To print the objects in the list either use ''for item in list'' or ''for index in range(len(list))''
    for item in ages:       
        print (item)  
        (OR)
    for index in range(len(ages)) :
        print (ages[index])
===Sort the List===
list.sort() will sort the list in ascending order
  '''Example'''
    ages = [11,23,12,23,45,43,22,24,23]
    ages.sort() 
    print (ages) 
    [11, 12, 22, 23, 23, 23, 24, 43, 45]

[[#TOP]]

===Sort the List using sorted() function===
sorted(list1) will sort the list and return a new list, it doesn't modify the original list
&lt;br&gt;'''Example: Sort in ascending order'''
&lt;pre&gt;
ages = [11,23,12,23,45,43,22,24,23]
newList=sorted(ages)
print(newList)

#Output: [11, 12, 22, 23, 23, 23, 24, 43, 45]
&lt;/pre&gt;

&lt;br&gt;'''Example: Sort in descending order'''
&lt;pre&gt;
ages = [11,23,12,23,45,43,22,24,23]
newList=sorted(ages,reverse=True)
print(newList)

#Output: [45, 43, 24, 23, 23, 23, 22, 12, 11]
&lt;/pre&gt;

===Reverse the List===
list.reverse() will reverse the original list
  '''Example'''
    ages = [11, 12, 22, 23, 23, 23, 24, 43, 45]
    ages.reverse()
    print (ages)
    [45, 43, 24, 23, 23, 23, 22, 12, 11]

Both sort() and reverse() list operation will work on numeric and alphanumeric data list.

A special use of the reverse() function is to descend a list that is sorted in ascending order.

  '''Example'''
&lt;pre&gt;
ages = [11, 12, 22, 23, 23, 23, 24, 43, 45]
ages.sort()
print(ages)
ages.reverse()
print(ages)
&lt;/pre&gt;

===Slicing===
Used to retrieve an object or objects in a range as a list  
  '''Example'''
Use ''list[index]'' to retrieve the object at the given index
         In [1]: student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
         In [2]: student[3]     #Object at index 3.  Remember index starts at 0
         Out[2]: 'Geetha'      


Use ''list[start_index : end_index + 1]'' to retrieve objects from the start_index to end_index 
         In [3]: student[2:4]     # Objects from index 2 to 3 as List. Note the [ and ]
         Out[3]: ['Vijay', 'Geetha']   


Use ''list[:]'' to retrieve objects from the starting of the list to the end of the list. 
The default start value will be the starting index of the list (i.e. 0) and the default end value
will be the length of the list 
         In [4]: student[:]        # prints the entire list
         Out[4]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma', 'Janani']


         In [5]: student[:5]       # prints the objects from the start of the list upto object at index 4
         Out[5]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran']


         In [6]: student[2:]       # prints the objects from index 2 upto the end of the list
         Out[6]: ['Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma', 'Janani']


Negative index too is available in Python. It starts from last element of the list. i.e.

         In [7]:student[-1]        #prints last index of list
         Out[7]: 'Janani'


         In [8]:student[-1:-8]     #prints empty list
         Out[8]: []


         In [9]:student[-8:-1]     #prints -8th index to -1st index elements
         Out[9]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma']

[[#TOP]]
===Removing Item from list ===
----

Is used to remove a specific item from the list.

'''Example:'''
 
Use list.remove(entry/value)  Or   del list[index]    Or list.pop(index)
         student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
         student.remove(&quot;Arun&quot;)   #This will delete item &quot;Arun&quot;
         Or    
         del student[0]           # This will delete item at index 0
         Or
         student.pop(0)         # This will delete and return item at index 0


         print(student)    
         Output: [&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]

[[#TOP]]
===Delete list ===
----
Used to delete complete list

'''Example'''

Use del &lt;list name&gt;
         student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
         del student

===Concatenation of two lists===
----
''+'' is the concatenation operator which is used concatenate two lists. 
&lt;pre&gt;
ages1 = [11,23,12,23,45]
ages2 = [25, 24, 43, 47]
age=ages1+ages2
print(age)
#Output: [11, 23, 12, 23, 45, 25, 24, 43, 47]
&lt;/pre&gt;

===Repeatation of a list ===
----
''*'' is the operator to repeat a particular list.
&lt;pre&gt;
ages1 = [11,23,12,23,45]
age=ages1*5 #ages1 list is repeated 5 times and stroed in ''age'' list
print(age)

#Output: [11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45]
&lt;/pre&gt;

=== all and any for List===
all() and any() are special functions to check whether all elements in iterable is ''True'' or any element is ''True''
&lt;ol&gt;
&lt;li&gt;If all elements in a list are ''True'', '''all()''' will return ''True''&lt;/li&gt;
&lt;li&gt;If iterable is ''empty'', '''all()''' will return ''True''&lt;/li&gt;
&lt;li&gt;If iterable contains at least one ''True'', '''any()''' will return ''True''&lt;/li&gt;
&lt;li&gt;If iterable is ''empty'', '''any()''' will return ''False''&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;
lsit=[True, True, True, True]
print(all(lsit))#Output: True
print(any(lsit))#Output: True

lsit1=[True, False, True, True]
print(all(lsit1))#Output: False
print(any(lsit1))#Output: True

lsit2=[False,False,False]
print(all(lsit2))#Output: False
print(any(lsit2))#Output: False

lsit3=[]
print(all(lsit3))#Output: True
print(any(lsit3))#Output: False
&lt;/pre&gt;

==Conditional Statements==
&lt;pre&gt;Conditionals are used to check the condition and change the flow of the program 
accordingly. They are realized in programming languages through if statement. The 
syntax is as follows :
         if condition : 
            statement
    '''Note:''' Do not forget indentation (inserting space/tab) in the line after the
 if condition.
    
    In case you want to execute a set of statements when a condition is true and another

set of statement when the condition is false.
         if condition : 
            statement 1
         else :
            statement 2
    
    Multiple if-else statements can be written as follows:
         if condition_1 : 
            statement 1
         elif condition_2 : # 'elif' is short for 'else if'
            statement 2
         elif condition_3 :
            statement 3
        .
        .
         else :
            final statement
&lt;/pre&gt;
[[#TOP]]

=Loops and Conditionals : Fizzbuzz=
====Loops====
&lt;pre&gt;
Loops are used to execute a set of repetitive statements. They are realized
through 'while' and 'for' loops in programming languages. The syntax of 'for' loop is 
as follows :
        for LOOPVARIABLE in SEQUENCE: 
            STATEMENTS
    '''e.g.''' to print all the data from a list we can write:
        for item in list_name
            print(item)
    OR
        for index in range(len(list_name))
            print(list_name[index])
    
    The syntax for while loop is as follows :
    
        while BOOLEANEXPRESSION: 
            STATEMENTS
            INCREMENT/DECREMENT
    
    '''e.g.''' if we want to print all numbers from 1 to 10
        i=1
        while i&lt;=10 :
            print(i,&quot; &quot;)
            i=i+1
    
    'while' loop has indefinite iteration (run-time unknown). So, there must be loop
 break statement in it.
 Whereas 'for' loop is definite in nature (i.e. known or predictable span).&lt;br&gt;

&lt;b&gt;NOTE: Python doesn't have anything like do-while loop.&lt;/b&gt;
&lt;/pre&gt;
[[#TOP]]

==Implementation==
Here, we try to demonstrate the concept of loops and conditionals through a game called Fizzbuzz. The rules are as follows :&lt;br/&gt;
[[File:fizzBuzz.gif]]

• if input number is a multiple of ’3’ print ”Fizz”
&lt;br/&gt;
• if input number is a multiple of ’5’ print ”Buzz”
&lt;br/&gt;
• if input number is a multiple of both '3' and ’5’ print ”FizzBuzz”
&lt;br/&gt;
The pseudo code is as follows :
&lt;pre&gt;
   If input no % 3 == 0 and  input no % 5 == 0 : 
       print ”Fizzbuzz”
   else if input no % 3 == 0 : 
       print ”Fizz”
   else if input no % 5 == 0 : 
       print ”Buzz”
   else :
       print the input no
&lt;/pre&gt;
The order of statements execution matters to get the desired output. The highest priority condition should be first followed by other. In fizzbuzz programming, first checking should be done for both divisibility of 3 and 5. If condition not satisfied only then it should check individually for 3 or 5. So carefully choosing the order is crucial for better programming.
Note: There is some effect of present condition statements chosen on next conditions statements. That is why in first attempt fizzbuzz programming got struck.

Example: 
&lt;pre&gt;
#Code to achieve the above requirement in python3.
i = int(input(&quot;Enter the number&quot;)) 
if i%3 == 0 and i%5 == 0: print(i,&quot;FizzBuzz&quot;)  
elif i%5 == 0: print(i,&quot;Buzz&quot;)
elif i%3 == 0: print(i,&quot;Fizz&quot;)
else: print(i)
&lt;/pre&gt;
Lets put the same into a loop for a range given by the user.
&lt;pre&gt;
def fizzbuzzgame(start,stop):
    for i in range(start,stop+1):
        if i%3 == 0 and i%5 == 0:
            print(i,&quot;FizzBuzz&quot;)
        elif i%5 == 0:
            print(i,&quot;Buzz&quot;)
        elif i%3 == 0:
            print(i,&quot;Fizz&quot;)
        else: print(i)

fizzbuzzgame(50,100)
&lt;/pre&gt;


=== Fizz Buzz game in Interactive mode with Score ===
'''By Ms. Ami Tusharkant Choksi'''
&lt;pre&gt;
def fizzbuzzgame(i):
        if i%3 == 0 and i%5 == 0:
            print(i,&quot;FizzBuzz&quot;)
            return(&quot;fzbz&quot;)
        elif i%5 == 0:
            print(i,&quot;Buzz&quot;)
            return(&quot;bz&quot;)
        elif i%3 == 0:
            print(i,&quot;Fizz&quot;)
            return(&quot;fz&quot;)
        else:
            print(i)
            return(&quot;no&quot;)

ch = 'y'
fizzbuzz=0
fizz=0
buzz=0
nothing=0
print(&quot;&quot;&quot;
 _____  ____  _____  _____  ____   __ __  _____  _____       ____   ____  ___ ___    ___ 
|     ||    ||     ||     ||    \ |  |  ||     ||     |     /    | /    ||   |   |  /  _]
|   __| |  | |__/  ||__/  ||  o  )|  |  ||__/  ||__/  |    |   __||  o  || _   _ | /  [_ 
|  |_   |  | |   __||   __||     ||  |  ||   __||   __|    |  |  ||     ||  \_/  ||    _]
|   _]  |  | |  /  ||  /  ||  O  ||  :  ||  /  ||  /  |    |  |_ ||  _  ||   |   ||   [_ 
|  |    |  | |     ||     ||     ||     ||     ||     |    |     ||  |  ||   |   ||     |
|__|   |____||_____||_____||_____| \__,_||_____||_____|    |___,_||__|__||___|___||_____|
                                                                                         
&quot;&quot;&quot;)   

while(ch == 'y'):
    n=int(input(&quot;Enter a Number : &quot;))
    winLoose=fizzbuzzgame(n)
    if(winLoose == &quot;fz&quot;):
        fizz+=1
    elif(winLoose == &quot;bz&quot;):
        buzz+=1
    elif(winLoose == &quot;fzbz&quot;):
        fizzbuzz+=1
    ch=input(&quot;Do you want to continue playing the game : (y/n)&quot;)
    if(ch=='n'):
        print('Congratulations, your score is\n FizzBuzz:%d\nFizz:%d\nBuzz:%d' %
(fizzbuzz,fizz,buzz))
    
'''Sample Output:

 _____  ____  _____  _____  ____   __ __  _____  _____       ____   ____  ___ ___    ___ 
|     ||    ||     ||     ||    \ |  |  ||     ||     |     /    | /    ||   |   |  /  _]
|   __| |  | |__/  ||__/  ||  o  )|  |  ||__/  ||__/  |    |   __||  o  || _   _ | /  [_ 
|  |_   |  | |   __||   __||     ||  |  ||   __||   __|    |  |  ||     ||  \_/  ||    _]
|   _]  |  | |  /  ||  /  ||  O  ||  :  ||  /  ||  /  |    |  |_ ||  _  ||   |   ||   [_ 
|  |    |  | |     ||     ||     ||     ||     ||     |    |     ||  |  ||   |   ||     |
|__|   |____||_____||_____||_____| \__,_||_____||_____|    |___,_||__|__||___|___||_____|
                                                                                         

Enter a Number : 666
666 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 777
777 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 555
555 FizzBuzz
Do you want to continue playing the game : (y/n)y
Enter a Number : 1
1
Do you want to continue playing the game : (y/n)y
Enter a Number : 789
789 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 25
25 Buzz
Do you want to continue playing the game : (y/n)n
Congratulations, your score is

FizzBuzz:1
Fizz:3
Buzz:1

&lt;/pre&gt;

=Crowd Computing: Just Estimate=
==Wisdom of Crowds==
The concept of ’Wisdom of Crowds’ was proposed by Francis Galton. A weight-judging competition was carried on at the annual show of the West of England Fat Stock and Poultry Exhibition recently held at Plymouth, A fat ox having been selected, competitors bought stamped and numbered cards, each, on which to inscribe their respective names, addresses, and estimates of what the ox would weigh after it had been slaughtered. Those who guessed most successfully received prizes. About 8oo tickets were issued to the par- ticipants. The middlemost estimate of all the estimates recorded was 1207 lbs and the actual weight of the ox was 1198 lbs.

==Our Experiment==
The crowd had to guess the number of candies/gems in a jar. Around 75 people participated in the experiment. The actual number of gems in the jar were 375. The median of all estimates came out to be 300 and the mean of all the estimates came out to be around 396. Median underestimated and mean overestimated the actual value. So according to recent studies, Trimmed mean must be used as an aggregate measure to estimate where Wisdom of Crowds is involved.
[[File:Gemsjar.jpg|center|200px|caption]]

===Trimmed Mean===
In these kinds of experiments, 10% trimmed mean is usually followed. For calculating 10% trimmed mean, remove 10% smallest and 10% largest values from the sample. Calculate the mean of the sample obtained. In the above experiment, the trimmed mean came out to be around 351 which is very close to the actual value.

==Implementation==
Here, we try to demonstrate the concept of trimmed mean through crowd computing.
 Input a list of estimates done by the crowd .
 Sort the list.
 Remove the 10% smallest values.
 Remove the 10% largest values.
 Calculate the mean of the new list obtained .&lt;hr&gt;

==Data of Experiment==       
    Estimates =[1000,1010,1786,2000,1500,1500,100,120,150,150,150,170,175,180,197,200,200,200,200,200,200,220,220,220,220,234,250,250,250,250,250,250,250,250,250,263,270,275,275,286,300,
                300,300,300,300,300,300,300,320,350,350,350,400, 400,400,400,400,450,467,500,500,500,500,500,500,500,550,550,600,600,600,650,700,700,720]

    '''CODE:'''
&lt;pre&gt;
Estimates = [1000,1010,1786,2000,1500,1500,100,120,150,150,150,170,175,180,197,200,200,200,200,200,200,220,220,220,220,234,250,250,250,250,250,250,250,250,250,263,270,275,275,286,300,                300,300,300,300,300,300,300,320,350,350,350,400,400,400,400,400,450,467,500,500,500,500,500,500,500,550,550,600,600,600,650,700,700,720]
Estimates.sort()
offset = int(0.10*len(Estimates))
for i in range(offset):
       del Estimates[0]
       del Estimates[-1]
Sum = 0    
for i in range(len(Estimates)):
       Sum += Estimates[i]
Mean_Value = Sum/len(Estimates)
print(&quot;Mean : &quot;, int(Mean_Value))
#Output:
Mean :  351
&lt;/pre&gt;
&lt;hr&gt;
==Trimmed Mean for the above example== 
&lt;h3&gt;Using scipy library&lt;/h3&gt;
&lt;pre&gt;
#import scipy to use the method of trim_mean
from scipy import stats
trimMean = stats.trim_mean(Estimates, 0.1) # Trim 10% at both ends
print(&quot;Trimmed Mean : &quot;,trimMean)
#Output:
Trimmed Mean :  335.1020408163265
&lt;/pre&gt;

&lt;h3&gt;Without using scipy library&lt;/h3&gt;
&lt;pre&gt;
#Trimmed mean with 10%
p=10/100
#sorted data
data=[2, 4, 6, 7, 11, 21, 81, 90, 105, 121]
n = len(data)
#Remove elements from both end
rem=int(n*p)
newData = data[rem:-rem]
mean = 0
for i in newData:
    mean += i
mean = int(mean/len(newData))
print(&quot;Trimmed mean : &quot;,mean)
#Output: Trimmed mean :  40
&lt;/pre&gt;
[[#Top]]

=Jumbled_Words Permutations: Jumbled Words=
==What are Permutations ?==
A permutation also called ordering of selected number of elements from a list denoted by nPr here we are choosing all elements of a list and so n=r&lt;br&gt;
nPr=n!/(n-r)!&lt;br&gt; as n=r
nPn=n!&lt;br&gt; which gives all possible arrangement of elements present in a list.

 For example, permutations of list [1,2,3] are [1,2,3], [1,3,2], [2,1,3], [2,3,1], 
[3,1,2], and [3,2,1]. 
The number of permutations of a list of elements nPn is given by n!. For example, there are 2! = 2 x 1 = 2 permutations of [1,2], namely [1,2] and [2,1], and 3! = 3 x 2 x 1 = 6 permutations of [1,2,3], as mentioned above.&lt;br/&gt;
[[File:Permutations.jpg]]

==Implementation==
Here, we try to demonstrate the concept of permutations through jumbled words. It is a two player game in which one person presents the other person a different permutation of the word in his mind. The other person has to guess the right word. If he guesses, the he wins otherwise he loses.
 Input an list of words.
 Randomly pick a word from the list of words .
 Shuffle this word and present it to the other player.
 if word guesses by the player is same as the one picked from list of w
     player wins
 else
     player loses

ALTERNATE CODE TO GENERATE THIS GAME:
&lt;pre&gt;
import random
p1=input(&quot;enter player 1 name:&quot;)
p2=input(&quot;enter player 2 name:&quot;)
l=[&quot;rainbow&quot;,&quot;computer&quot;,&quot;robot&quot;,&quot;butter&quot;,&quot;vegetable&quot;,&quot;science&quot;,&quot;correct&quot;]
c1=c2=a1=a2=f1=f2=0
k=1
i=3
def play():
    n=random.choice(l)        ##n=chooses a word from list l
    l1=[]
    for j in n:
       l1.append(j)      ##creates a list for word in n
    for t in range(len(l1)):
       p=random.choice(l1)     ##this randomly displays letters in the list
       print(p)
       l1.remove(p)          ##to avoid the repetition of a letter
    s=input(&quot;enter the word:&quot;)
    if(s==n):
        print(&quot;correct&quot;)
        return 1
    else:
        print(&quot;not correct&quot;)
        print(&quot;answer is&quot;,n)
        return 0
def stat():
     print(&quot;player 1:&quot;)
     print(&quot;score:&quot;,c1)
     print(&quot;answered:&quot;,a1)
     print(&quot;failed:&quot;,f1)
     print(&quot;.............&quot;)
     print(&quot;player 2:&quot;)
     print(&quot;score:&quot;,c2)
     print(&quot;answered:&quot;,a2)
     print(&quot;failed&quot;,f2)
     if(c1&gt;c2):
         print(p1,&quot; won over &quot;,p2)
     elif(c1==c2):
         print(&quot;draw game&quot;)
     else:
         print(p2,&quot; won over &quot;,p1) 
while(i!=4):
      if(i==3):
         if(k==1):
             print(&quot;player 1 turn&quot;)
             print(&quot;your jumbled word is:&quot;)
             k=k+1
             m=play()
             if(m==1):      ##if guessed answer is correct,then score and no.of answered count will be increased
                c1+=1
                a1+=1
             else:
                f1+=1       ##else count of no.of failed to answered will be incremented
         else:
             print(&quot;player 2 turn&quot;)
             print(&quot;your jumbled word is:&quot;)
             k=k-1
             m=play()
             if(m==1):
                c2=c2+1
                a2=a2+1
             else:
                f2=f2+1
       if(i==2):
             print(&quot;present status&quot;)
             stat()
       i=int(input(&quot;enter your choice  1.stop 2.status 3.continue&quot;))
       if(i==1):
             stat()
             i=i+3
&lt;/pre&gt;
&lt;hr&gt;
=== JumbledWord Simple Logic, In Short ===
[[File:jumbledWord.gif]]
&lt;hr&gt;
'''Logic to create a Jumbled Word'''
&lt;hr&gt;
&lt;pre&gt;
#Get Jumbled Word and print it Horizontally
import random

def getJumbledWord(b):
    jumble=''
    l1 = [ b[i] for i in range(0, len(b)) ]
    for t in range(len(l1)):
       p=random.choice(l1)     ##this randomly gets letters from the list      
       jumble=jumble+p       
       l1.remove(p)
    return jumble

b=input(&quot;Enter a word to make it jumbled : &quot;)
print(&quot;Jumbled Word : &quot;, getJumbledWord(b))
&lt;/pre&gt;
&lt;hr&gt;
'''Another Logic to create a Jumbled Word'''
&lt;hr&gt;
&lt;pre&gt;
b=input(&quot;Enter a word to make it jumbled : &quot;)

def getJumbledWord1(b):
    l1 = [ b[i] for i in range(0, len(b)) ]
    random.shuffle(l1)
    str1 = ''.join(l1)
    return str1

print(&quot;Jumbled Word : &quot;, getJumbledWord1(b))
&lt;/pre&gt;

====Sample Output:====
&lt;pre&gt;
---- Output1 
Enter a word to make it jumbled : butter
Jumbled Word :  tbture

---- Output2 
Enter a word to make it jumbled : petriotism
Jumbled Word :  pittrosime
&lt;/pre&gt;

=Theory of Evolution=

== What is Evolution ? ==
Evolution is the change in heritable characteristics over successive generations. The theory of evolution explains that DNA, which acts as a carrier of genetic information from one generation to other, tends to change or mutate occasionally. These changes are reflected in next generations to come. This is how life has evolved on earth from bacteria to human beings.&lt;br&gt;
[[File:Evolution.png|500px]]

== Implementation ==
&lt;pre&gt;An array representing DNA is stored in a file. As genes are forms of DNA, they contain information to be transferred to forthcoming generations. Assume that information is in the form of bits (in the form of 0s and 1s). A number is picked randomly from 1 to the size of the array. A new parameter has been introduced which decides whether mutation would occur or not. If the value of this new parameter is 1 (It is picked randomly from 1 to 100), then only change is reflected down the generations, otherwise it is not. The pseudo code is as follows :
Input an array containing genetic information .
Randomly generate a number (say m) from 1 to length of the array. Randomly generate other number (say p) from 1 to 100.
 
    if p is equal to 1 then 
        if m is 1 then
          set it to 0
        else
          set it to 1
&lt;/pre&gt;
[[#TOP]]</text>
      <sha1>1ks1apf1fe5mejlykwcs2m1erv1fpsj</sha1>
    </revision>
    <revision>
      <id>3547</id>
      <parentid>3517</parentid>
      <timestamp>2018-09-28T02:21:54Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* using 'in' operator */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="29433">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_3 Contributors of this page]
*Week 3 Playlist: https://www.youtube.com/playlist?list=PLc_j0TNIaWxOVx_z9jAM2UB3RqYNXaoEo
=List=
List is a flexible data structure used for storing a group of data separated by comma. The elements in a list need not be of the same data type.

'''Example:'''
       List_1 = [ 1, 2,3] or 
       List_1 = [&quot;coffee&quot;, &quot;Tea&quot;, &quot;Milk&quot;] or
       List_1 = [1,&quot;coffee&quot;, &quot;Tea&quot;, 3, &quot;5&quot;]

==List Creation==
&lt;pre&gt;a) A list can be created by simply putting values (separated by comma) between square brackets as given below,
       List_1 = [1,&quot;coffee&quot;, &quot;Tea&quot;, 3, &quot;5&quot;] #this creates a list by name List_1 containing following items


Or,
(b)A List can be created from scratch and elements can be added 
        List_2 = [ ]
        List_2.append(&quot;Kala&quot;)
        List_2.append(&quot;Mala&quot;)
Here we use &quot;append&quot; ,which is a function in python that enable us to append or attach an element to a list .
Thus List_2 will now hold [&quot;Kala&quot;,&quot;Mala&quot;]
&lt;/pre&gt;
[[#TOP]]

==Operations and Methods to work with List==
&lt;pre&gt;
a = [25,30,50,90,12,13]
b = [100,300,500,200,250]
&lt;/pre&gt;
&lt;hr&gt;
&lt;table border=2&gt;
  &lt;tr&gt;
    &lt;th&gt;&lt;b&gt;Method/&lt;br&gt;Operator&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Function&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Syntax&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Output&lt;/b&gt;&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;len()&lt;/td&gt;
    &lt;td&gt;Find length of a list&lt;/td&gt;
    &lt;td&gt;len(a)&lt;/td&gt;
    &lt;td&gt;6&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;max()&lt;/td&gt;
    &lt;td&gt;Find maximum element from the list&lt;/td&gt;
    &lt;td&gt;max(a)&lt;/td&gt;
    &lt;td&gt;90&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;min()&lt;/td&gt;
    &lt;td&gt;Find minimum element from the list&lt;/td&gt;
    &lt;td&gt;min(a)&lt;/td&gt;
    &lt;td&gt;12&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sum()&lt;/td&gt;
    &lt;td&gt;Returns sum of all elements of the list&lt;/td&gt;
    &lt;td&gt;sum(a)&lt;/td&gt;
    &lt;td&gt;220&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;reverse()&lt;/td&gt;
    &lt;td&gt;Reverses the original list&lt;/td&gt;
    &lt;td&gt;a.reverse()&lt;/td&gt;
    &lt;td&gt;[13, 12, 90, 50, 30, 25]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sort()&lt;/td&gt;
    &lt;td&gt;Sorts the original list in ascending order&lt;/td&gt;
    &lt;td&gt;a.sort()&lt;/td&gt;
    &lt;td&gt;[12, 13, 25, 30, 50, 90]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sorted()&lt;/td&gt;
    &lt;td&gt;Returns the new sorted list &lt;/td&gt;
    &lt;td&gt;sorted(a)&lt;/td&gt;
    &lt;td&gt;[12, 13, 25, 30, 50, 90]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;insert()&lt;/td&gt;
    &lt;td&gt;Insert at a particular index in the list, and shifts remaining elements&lt;/td&gt;
    &lt;td&gt;a.insert(3,3)&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 3, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;append()&lt;/td&gt;
    &lt;td&gt;Adds elements/object to the end of the list&lt;/td&gt;
    &lt;td&gt;a.append(5)&lt;br&gt;a.append([10,20])&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 5]&lt;br&gt;[25, 30, 50, 90, 12, 13, [10, 20]]&lt;br&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;extend()&lt;/td&gt;
    &lt;td&gt;Adds object to the end of the list as elements not as object&lt;/td&gt;
    &lt;td&gt;a.extend([10,20])&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 10, 20]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;*&amp;nbsp;&amp;nbsp;Repeatation&lt;br&gt;operator&lt;/td&gt;
    &lt;td&gt;Repeat the list for n times and returns a new list&lt;/td&gt;
    &lt;td&gt;a*2&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 25, 30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;+ Concatenation&lt;br&gt;operator&lt;/td&gt;
    &lt;td&gt;Concatenates two lists, and returns a new list&lt;/td&gt;
    &lt;td&gt;a+b&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 100, 300, 500, 200, 250]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;index()&lt;/td&gt;
    &lt;td&gt;Finds index of a particular element in the list or not&lt;/td&gt;
    &lt;td&gt;a.index(25)&lt;br&gt;a.index(0)&lt;br&gt;&lt;/td&gt;
    &lt;td&gt;0&lt;br&gt;&lt;br&gt;ValueError: 0 is not in list&lt;br&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;in operator&lt;/td&gt;
    &lt;td&gt;Finds whether a particular element is in the list or not, returns boolean&lt;/td&gt;
    &lt;td&gt;25 in a&lt;/td&gt;
    &lt;td&gt;True&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;not in operator&lt;/td&gt;
    &lt;td&gt;Checks if element is not available in list, returns boolean&lt;/td&gt;
    &lt;td&gt;25 not in a&lt;/td&gt;
    &lt;td&gt;False&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;count()&lt;/td&gt;
    &lt;td&gt;Counts the number of occurence of an element in the list&lt;/td&gt;
    &lt;td&gt;a.count(25)&lt;/td&gt;
    &lt;td&gt;1&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;remove()&lt;/td&gt;
    &lt;td&gt;Removes an element from the list&lt;/td&gt;
    &lt;td&gt;a.remove(25)&lt;/td&gt;
    &lt;td&gt; [30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;pop()&lt;/td&gt;
    &lt;td&gt;Delete and return item at index 0&lt;/td&gt;
    &lt;td&gt;a.pop(0)&lt;/td&gt;
    &lt;td&gt;25 , a will be [30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;del&lt;/td&gt;
    &lt;td&gt;Deletes item at a particular index from the list&lt;/td&gt;
    &lt;td&gt;del a[0]&lt;/td&gt;
    &lt;td&gt;[30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;all()&lt;/td&gt;
&lt;td&gt;Returns True, if all items in list are True or it is an empty list&lt;/td&gt;
&lt;td&gt;all([True, True, True])
all([])
&lt;/td&gt;
&lt;td&gt;True&lt;br&gt;
True&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;any()&lt;/td&gt;
&lt;td&gt;Returns True, if any item in list is True else return False&lt;/td&gt;
&lt;td&gt;any([True, True, True])&lt;br&gt;
any([True, False, True])&lt;br&gt;
any([])&lt;/td&gt;
&lt;td&gt;True&lt;br&gt;False&lt;br&gt;False&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;

==Printing the List==
=== Print whole list ===
A list can be printed simply or using a ''for / while'' loop 

 print(List_2)     # To print the entire list
This code will print      
 ['Kala','Mala']     

===Print element at a particular index===
&lt;pre&gt;
Using index position
    List_2[0]     # prints 'Kala' ,i.e,the value at index position 0.
    List_2[1]     # prints 'Mala'.
&lt;/pre&gt;
=== Without using index position ===
&lt;pre&gt;
for item in List_2:   # here item is a variable used to access elements in list.
       print(item)
   This code snippet prints 
    Kala
    Mala
&lt;/pre&gt;
[[#TOP]]

==Search for a particular element in list==
Elements in a list can be searched by one of the two ways:
=== using index() function===
&lt;pre&gt;
ages1 = [11,23,12,23,45]

#if element is available in the list, index() returns the index value on which, the element is present.
print(ages1.index(45))#Output: 4

#if element is not available in the list, index() returns ''ValueError''
print(ages1.index(0))#Output: ValueError:
&lt;/pre&gt;

In programming, if such error occurs, program gets terminated. It can be solved using exception handling.
e.g.
&lt;pre&gt;
ages1 = [11,23,12,23,45]

try:
    print(ages1.index(0))
except ValueError:
    print(&quot;Exception has occured&quot;)    
    print(&quot;Element is not found in the list&quot;)

&lt;/pre&gt;
&lt;pre&gt;
'''Output: 
Exception has occured
Element is not found in the list
'''&lt;/pre&gt;
[[#TOP]]

=== using 'in' operator===
''in'' operator is used to check whether a particular element is available in the list or not.e.g.

&lt;pre&gt;
ages1 = [11,23,12,23,45]
no=11

if no in ages1:
    print(&quot;no is there in the list&quot;)
else:    
    print(&quot;no is NOT there in the list&quot;)
&lt;/pre&gt;
&lt;pre&gt;
#Output: no is there in the list
&lt;/pre&gt;


'''Number is not there in the list'''
&lt;pre&gt;
ages1 = [11,23,12,23,45]
no=15

if no in ages1:
    print(&quot;no is there in the list&quot;)
else:    
    print(&quot;no is NOT there in the list&quot;)
&lt;/pre&gt;
&lt;pre&gt;
Output: no is NOT there in the list
&lt;/pre&gt;
[[#TOP]]

==Updating the List==
The lists can be updated using ''append'' or ''insert'' function.  Append adds the element to the end of the list and Insert adds the element in the specified position.
   List_2.append(&quot;Sheela&quot;)    # add the element 'Sheela' to the end of the list.
   print (List_2) will output 
   ['Kala', 'Mala', 'Sheela']
   
   List_2.insert(1,&quot;Bala&quot;)    # add the element &quot;Bala&quot; in the list at the index 1.
   print (List_2) will output 
   ['Kala', 'Bala','Mala', 'Sheela']

=== Extend the list by adding elements of other list at end using extend()===
&lt;pre&gt;
ages = [11,23,12,23,45]
ages.extend([57,58])
print(ages)
&lt;/pre&gt;

&lt;pre&gt;
#Output: [11, 23, 12, 23, 45, 57, 58]
&lt;/pre&gt;

==== Difference between ''append and extend'' ====
Difference between append and extend can be easily understood, by the following example.

&lt;pre&gt;
appendlist = [11,23,12,23,45]
appendlist.append([57,58])

extendlist= [11,23,12,23,45]
extendlist.extend([57,58])
&lt;/pre&gt;

&lt;pre&gt;
'''Output:
[11, 23, 12, 23, 45, [57, 58]]
[11, 23, 12, 23, 45, 57, 58]'''
&lt;/pre&gt;
[[#TOP]]

==Basic Operations on List==
===Frequency of Occurrence===
list.count(object) will return the number of times the object occur in the list.
  '''Example'''
    ages = [11,23,12,23,45,43,22,24,23]
    ages.count(23) will return
    3
    ages.count(100) will return
    0

===Length of the List===
len(list) will return the length of the list ie. the number of objects in the list.
  '''Example'''
    ages = [11,23,12,23,45,43,22,24,23]
    len(ages) will output
    9
To print the objects in the list either use ''for item in list'' or ''for index in range(len(list))''
    for item in ages:       
        print (item)  
        (OR)
    for index in range(len(ages)) :
        print (ages[index])
===Sort the List===
list.sort() will sort the list in ascending order
  '''Example'''
    ages = [11,23,12,23,45,43,22,24,23]
    ages.sort() 
    print (ages) 
    [11, 12, 22, 23, 23, 23, 24, 43, 45]

[[#TOP]]

===Sort the List using sorted() function===
sorted(list1) will sort the list and return a new list, it doesn't modify the original list
&lt;br&gt;'''Example: Sort in ascending order'''
&lt;pre&gt;
ages = [11,23,12,23,45,43,22,24,23]
newList=sorted(ages)
print(newList)

#Output: [11, 12, 22, 23, 23, 23, 24, 43, 45]
&lt;/pre&gt;

&lt;br&gt;'''Example: Sort in descending order'''
&lt;pre&gt;
ages = [11,23,12,23,45,43,22,24,23]
newList=sorted(ages,reverse=True)
print(newList)

#Output: [45, 43, 24, 23, 23, 23, 22, 12, 11]
&lt;/pre&gt;

===Reverse the List===
list.reverse() will reverse the original list
  '''Example'''
    ages = [11, 12, 22, 23, 23, 23, 24, 43, 45]
    ages.reverse()
    print (ages)
    [45, 43, 24, 23, 23, 23, 22, 12, 11]

Both sort() and reverse() list operation will work on numeric and alphanumeric data list.

A special use of the reverse() function is to descend a list that is sorted in ascending order.

  '''Example'''
&lt;pre&gt;
ages = [11, 12, 22, 23, 23, 23, 24, 43, 45]
ages.sort()
print(ages)
ages.reverse()
print(ages)
&lt;/pre&gt;

===Slicing===
Used to retrieve an object or objects in a range as a list  
  '''Example'''
Use ''list[index]'' to retrieve the object at the given index
         In [1]: student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
         In [2]: student[3]     #Object at index 3.  Remember index starts at 0
         Out[2]: 'Geetha'      


Use ''list[start_index : end_index + 1]'' to retrieve objects from the start_index to end_index 
         In [3]: student[2:4]     # Objects from index 2 to 3 as List. Note the [ and ]
         Out[3]: ['Vijay', 'Geetha']   


Use ''list[:]'' to retrieve objects from the starting of the list to the end of the list. 
The default start value will be the starting index of the list (i.e. 0) and the default end value
will be the length of the list 
         In [4]: student[:]        # prints the entire list
         Out[4]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma', 'Janani']


         In [5]: student[:5]       # prints the objects from the start of the list upto object at index 4
         Out[5]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran']


         In [6]: student[2:]       # prints the objects from index 2 upto the end of the list
         Out[6]: ['Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma', 'Janani']


Negative index too is available in Python. It starts from last element of the list. i.e.

         In [7]:student[-1]        #prints last index of list
         Out[7]: 'Janani'


         In [8]:student[-1:-8]     #prints empty list
         Out[8]: []


         In [9]:student[-8:-1]     #prints -8th index to -1st index elements
         Out[9]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma']

[[#TOP]]
===Removing Item from list ===
----

Is used to remove a specific item from the list.

'''Example:'''
 
Use list.remove(entry/value)  Or   del list[index]    Or list.pop(index)
         student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
         student.remove(&quot;Arun&quot;)   #This will delete item &quot;Arun&quot;
         Or    
         del student[0]           # This will delete item at index 0
         Or
         student.pop(0)         # This will delete and return item at index 0


         print(student)    
         Output: [&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]

[[#TOP]]
===Delete list ===
----
Used to delete complete list

'''Example'''

Use del &lt;list name&gt;
         student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
         del student

===Concatenation of two lists===
----
''+'' is the concatenation operator which is used concatenate two lists. 
&lt;pre&gt;
ages1 = [11,23,12,23,45]
ages2 = [25, 24, 43, 47]
age=ages1+ages2
print(age)
#Output: [11, 23, 12, 23, 45, 25, 24, 43, 47]
&lt;/pre&gt;

===Repeatation of a list ===
----
''*'' is the operator to repeat a particular list.
&lt;pre&gt;
ages1 = [11,23,12,23,45]
age=ages1*5 #ages1 list is repeated 5 times and stroed in ''age'' list
print(age)

#Output: [11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45]
&lt;/pre&gt;

=== all and any for List===
all() and any() are special functions to check whether all elements in iterable is ''True'' or any element is ''True''
&lt;ol&gt;
&lt;li&gt;If all elements in a list are ''True'', '''all()''' will return ''True''&lt;/li&gt;
&lt;li&gt;If iterable is ''empty'', '''all()''' will return ''True''&lt;/li&gt;
&lt;li&gt;If iterable contains at least one ''True'', '''any()''' will return ''True''&lt;/li&gt;
&lt;li&gt;If iterable is ''empty'', '''any()''' will return ''False''&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;
lsit=[True, True, True, True]
print(all(lsit))#Output: True
print(any(lsit))#Output: True

lsit1=[True, False, True, True]
print(all(lsit1))#Output: False
print(any(lsit1))#Output: True

lsit2=[False,False,False]
print(all(lsit2))#Output: False
print(any(lsit2))#Output: False

lsit3=[]
print(all(lsit3))#Output: True
print(any(lsit3))#Output: False
&lt;/pre&gt;

==Conditional Statements==
&lt;pre&gt;Conditionals are used to check the condition and change the flow of the program 
accordingly. They are realized in programming languages through if statement. The 
syntax is as follows :
         if condition : 
            statement
    '''Note:''' Do not forget indentation (inserting space/tab) in the line after the
 if condition.
    
    In case you want to execute a set of statements when a condition is true and another

set of statement when the condition is false.
         if condition : 
            statement 1
         else :
            statement 2
    
    Multiple if-else statements can be written as follows:
         if condition_1 : 
            statement 1
         elif condition_2 : # 'elif' is short for 'else if'
            statement 2
         elif condition_3 :
            statement 3
        .
        .
         else :
            final statement
&lt;/pre&gt;
[[#TOP]]

=Loops and Conditionals : Fizzbuzz=
====Loops====
&lt;pre&gt;
Loops are used to execute a set of repetitive statements. They are realized
through 'while' and 'for' loops in programming languages. The syntax of 'for' loop is 
as follows :
        for LOOPVARIABLE in SEQUENCE: 
            STATEMENTS
    '''e.g.''' to print all the data from a list we can write:
        for item in list_name
            print(item)
    OR
        for index in range(len(list_name))
            print(list_name[index])
    
    The syntax for while loop is as follows :
    
        while BOOLEANEXPRESSION: 
            STATEMENTS
            INCREMENT/DECREMENT
    
    '''e.g.''' if we want to print all numbers from 1 to 10
        i=1
        while i&lt;=10 :
            print(i,&quot; &quot;)
            i=i+1
    
    'while' loop has indefinite iteration (run-time unknown). So, there must be loop
 break statement in it.
 Whereas 'for' loop is definite in nature (i.e. known or predictable span).&lt;br&gt;

&lt;b&gt;NOTE: Python doesn't have anything like do-while loop.&lt;/b&gt;
&lt;/pre&gt;
[[#TOP]]

==Implementation==
Here, we try to demonstrate the concept of loops and conditionals through a game called Fizzbuzz. The rules are as follows :&lt;br/&gt;
[[File:fizzBuzz.gif]]

• if input number is a multiple of ’3’ print ”Fizz”
&lt;br/&gt;
• if input number is a multiple of ’5’ print ”Buzz”
&lt;br/&gt;
• if input number is a multiple of both '3' and ’5’ print ”FizzBuzz”
&lt;br/&gt;
The pseudo code is as follows :
&lt;pre&gt;
   If input no % 3 == 0 and  input no % 5 == 0 : 
       print ”Fizzbuzz”
   else if input no % 3 == 0 : 
       print ”Fizz”
   else if input no % 5 == 0 : 
       print ”Buzz”
   else :
       print the input no
&lt;/pre&gt;
The order of statements execution matters to get the desired output. The highest priority condition should be first followed by other. In fizzbuzz programming, first checking should be done for both divisibility of 3 and 5. If condition not satisfied only then it should check individually for 3 or 5. So carefully choosing the order is crucial for better programming.
Note: There is some effect of present condition statements chosen on next conditions statements. That is why in first attempt fizzbuzz programming got struck.

Example: 
&lt;pre&gt;
#Code to achieve the above requirement in python3.
i = int(input(&quot;Enter the number&quot;)) 
if i%3 == 0 and i%5 == 0: print(i,&quot;FizzBuzz&quot;)  
elif i%5 == 0: print(i,&quot;Buzz&quot;)
elif i%3 == 0: print(i,&quot;Fizz&quot;)
else: print(i)
&lt;/pre&gt;
Lets put the same into a loop for a range given by the user.
&lt;pre&gt;
def fizzbuzzgame(start,stop):
    for i in range(start,stop+1):
        if i%3 == 0 and i%5 == 0:
            print(i,&quot;FizzBuzz&quot;)
        elif i%5 == 0:
            print(i,&quot;Buzz&quot;)
        elif i%3 == 0:
            print(i,&quot;Fizz&quot;)
        else: print(i)

fizzbuzzgame(50,100)
&lt;/pre&gt;


=== Fizz Buzz game in Interactive mode with Score ===
'''By Ms. Ami Tusharkant Choksi'''
&lt;pre&gt;
def fizzbuzzgame(i):
        if i%3 == 0 and i%5 == 0:
            print(i,&quot;FizzBuzz&quot;)
            return(&quot;fzbz&quot;)
        elif i%5 == 0:
            print(i,&quot;Buzz&quot;)
            return(&quot;bz&quot;)
        elif i%3 == 0:
            print(i,&quot;Fizz&quot;)
            return(&quot;fz&quot;)
        else:
            print(i)
            return(&quot;no&quot;)

ch = 'y'
fizzbuzz=0
fizz=0
buzz=0
nothing=0
print(&quot;&quot;&quot;
 _____  ____  _____  _____  ____   __ __  _____  _____       ____   ____  ___ ___    ___ 
|     ||    ||     ||     ||    \ |  |  ||     ||     |     /    | /    ||   |   |  /  _]
|   __| |  | |__/  ||__/  ||  o  )|  |  ||__/  ||__/  |    |   __||  o  || _   _ | /  [_ 
|  |_   |  | |   __||   __||     ||  |  ||   __||   __|    |  |  ||     ||  \_/  ||    _]
|   _]  |  | |  /  ||  /  ||  O  ||  :  ||  /  ||  /  |    |  |_ ||  _  ||   |   ||   [_ 
|  |    |  | |     ||     ||     ||     ||     ||     |    |     ||  |  ||   |   ||     |
|__|   |____||_____||_____||_____| \__,_||_____||_____|    |___,_||__|__||___|___||_____|
                                                                                         
&quot;&quot;&quot;)   

while(ch == 'y'):
    n=int(input(&quot;Enter a Number : &quot;))
    winLoose=fizzbuzzgame(n)
    if(winLoose == &quot;fz&quot;):
        fizz+=1
    elif(winLoose == &quot;bz&quot;):
        buzz+=1
    elif(winLoose == &quot;fzbz&quot;):
        fizzbuzz+=1
    ch=input(&quot;Do you want to continue playing the game : (y/n)&quot;)
    if(ch=='n'):
        print('Congratulations, your score is\n FizzBuzz:%d\nFizz:%d\nBuzz:%d' %
(fizzbuzz,fizz,buzz))
    
'''Sample Output:

 _____  ____  _____  _____  ____   __ __  _____  _____       ____   ____  ___ ___    ___ 
|     ||    ||     ||     ||    \ |  |  ||     ||     |     /    | /    ||   |   |  /  _]
|   __| |  | |__/  ||__/  ||  o  )|  |  ||__/  ||__/  |    |   __||  o  || _   _ | /  [_ 
|  |_   |  | |   __||   __||     ||  |  ||   __||   __|    |  |  ||     ||  \_/  ||    _]
|   _]  |  | |  /  ||  /  ||  O  ||  :  ||  /  ||  /  |    |  |_ ||  _  ||   |   ||   [_ 
|  |    |  | |     ||     ||     ||     ||     ||     |    |     ||  |  ||   |   ||     |
|__|   |____||_____||_____||_____| \__,_||_____||_____|    |___,_||__|__||___|___||_____|
                                                                                         

Enter a Number : 666
666 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 777
777 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 555
555 FizzBuzz
Do you want to continue playing the game : (y/n)y
Enter a Number : 1
1
Do you want to continue playing the game : (y/n)y
Enter a Number : 789
789 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 25
25 Buzz
Do you want to continue playing the game : (y/n)n
Congratulations, your score is

FizzBuzz:1
Fizz:3
Buzz:1

&lt;/pre&gt;

=Crowd Computing: Just Estimate=
==Wisdom of Crowds==
The concept of ’Wisdom of Crowds’ was proposed by Francis Galton. A weight-judging competition was carried on at the annual show of the West of England Fat Stock and Poultry Exhibition recently held at Plymouth, A fat ox having been selected, competitors bought stamped and numbered cards, each, on which to inscribe their respective names, addresses, and estimates of what the ox would weigh after it had been slaughtered. Those who guessed most successfully received prizes. About 8oo tickets were issued to the par- ticipants. The middlemost estimate of all the estimates recorded was 1207 lbs and the actual weight of the ox was 1198 lbs.

==Our Experiment==
The crowd had to guess the number of candies/gems in a jar. Around 75 people participated in the experiment. The actual number of gems in the jar were 375. The median of all estimates came out to be 300 and the mean of all the estimates came out to be around 396. Median underestimated and mean overestimated the actual value. So according to recent studies, Trimmed mean must be used as an aggregate measure to estimate where Wisdom of Crowds is involved.
[[File:Gemsjar.jpg|center|200px|caption]]

===Trimmed Mean===
In these kinds of experiments, 10% trimmed mean is usually followed. For calculating 10% trimmed mean, remove 10% smallest and 10% largest values from the sample. Calculate the mean of the sample obtained. In the above experiment, the trimmed mean came out to be around 351 which is very close to the actual value.

==Implementation==
Here, we try to demonstrate the concept of trimmed mean through crowd computing.
 Input a list of estimates done by the crowd .
 Sort the list.
 Remove the 10% smallest values.
 Remove the 10% largest values.
 Calculate the mean of the new list obtained .&lt;hr&gt;

==Data of Experiment==       
    Estimates =[1000,1010,1786,2000,1500,1500,100,120,150,150,150,170,175,180,197,200,200,200,200,200,200,220,220,220,220,234,250,250,250,250,250,250,250,250,250,263,270,275,275,286,300,
                300,300,300,300,300,300,300,320,350,350,350,400, 400,400,400,400,450,467,500,500,500,500,500,500,500,550,550,600,600,600,650,700,700,720]

    '''CODE:'''
&lt;pre&gt;
Estimates = [1000,1010,1786,2000,1500,1500,100,120,150,150,150,170,175,180,197,200,200,200,200,200,200,220,220,220,220,234,250,250,250,250,250,250,250,250,250,263,270,275,275,286,300,                300,300,300,300,300,300,300,320,350,350,350,400,400,400,400,400,450,467,500,500,500,500,500,500,500,550,550,600,600,600,650,700,700,720]
Estimates.sort()
offset = int(0.10*len(Estimates))
for i in range(offset):
       del Estimates[0]
       del Estimates[-1]
Sum = 0    
for i in range(len(Estimates)):
       Sum += Estimates[i]
Mean_Value = Sum/len(Estimates)
print(&quot;Mean : &quot;, int(Mean_Value))
#Output:
Mean :  351
&lt;/pre&gt;
&lt;hr&gt;
==Trimmed Mean for the above example== 
&lt;h3&gt;Using scipy library&lt;/h3&gt;
&lt;pre&gt;
#import scipy to use the method of trim_mean
from scipy import stats
trimMean = stats.trim_mean(Estimates, 0.1) # Trim 10% at both ends
print(&quot;Trimmed Mean : &quot;,trimMean)
#Output:
Trimmed Mean :  335.1020408163265
&lt;/pre&gt;

&lt;h3&gt;Without using scipy library&lt;/h3&gt;
&lt;pre&gt;
#Trimmed mean with 10%
p=10/100
#sorted data
data=[2, 4, 6, 7, 11, 21, 81, 90, 105, 121]
n = len(data)
#Remove elements from both end
rem=int(n*p)
newData = data[rem:-rem]
mean = 0
for i in newData:
    mean += i
mean = int(mean/len(newData))
print(&quot;Trimmed mean : &quot;,mean)
#Output: Trimmed mean :  40
&lt;/pre&gt;
[[#Top]]

=Jumbled_Words Permutations: Jumbled Words=
==What are Permutations ?==
A permutation also called ordering of selected number of elements from a list denoted by nPr here we are choosing all elements of a list and so n=r&lt;br&gt;
nPr=n!/(n-r)!&lt;br&gt; as n=r
nPn=n!&lt;br&gt; which gives all possible arrangement of elements present in a list.

 For example, permutations of list [1,2,3] are [1,2,3], [1,3,2], [2,1,3], [2,3,1], 
[3,1,2], and [3,2,1]. 
The number of permutations of a list of elements nPn is given by n!. For example, there are 2! = 2 x 1 = 2 permutations of [1,2], namely [1,2] and [2,1], and 3! = 3 x 2 x 1 = 6 permutations of [1,2,3], as mentioned above.&lt;br/&gt;
[[File:Permutations.jpg]]

==Implementation==
Here, we try to demonstrate the concept of permutations through jumbled words. It is a two player game in which one person presents the other person a different permutation of the word in his mind. The other person has to guess the right word. If he guesses, the he wins otherwise he loses.
 Input an list of words.
 Randomly pick a word from the list of words .
 Shuffle this word and present it to the other player.
 if word guesses by the player is same as the one picked from list of w
     player wins
 else
     player loses

ALTERNATE CODE TO GENERATE THIS GAME:
&lt;pre&gt;
import random
p1=input(&quot;enter player 1 name:&quot;)
p2=input(&quot;enter player 2 name:&quot;)
l=[&quot;rainbow&quot;,&quot;computer&quot;,&quot;robot&quot;,&quot;butter&quot;,&quot;vegetable&quot;,&quot;science&quot;,&quot;correct&quot;]
c1=c2=a1=a2=f1=f2=0
k=1
i=3
def play():
    n=random.choice(l)        ##n=chooses a word from list l
    l1=[]
    for j in n:
       l1.append(j)      ##creates a list for word in n
    for t in range(len(l1)):
       p=random.choice(l1)     ##this randomly displays letters in the list
       print(p)
       l1.remove(p)          ##to avoid the repetition of a letter
    s=input(&quot;enter the word:&quot;)
    if(s==n):
        print(&quot;correct&quot;)
        return 1
    else:
        print(&quot;not correct&quot;)
        print(&quot;answer is&quot;,n)
        return 0
def stat():
     print(&quot;player 1:&quot;)
     print(&quot;score:&quot;,c1)
     print(&quot;answered:&quot;,a1)
     print(&quot;failed:&quot;,f1)
     print(&quot;.............&quot;)
     print(&quot;player 2:&quot;)
     print(&quot;score:&quot;,c2)
     print(&quot;answered:&quot;,a2)
     print(&quot;failed&quot;,f2)
     if(c1&gt;c2):
         print(p1,&quot; won over &quot;,p2)
     elif(c1==c2):
         print(&quot;draw game&quot;)
     else:
         print(p2,&quot; won over &quot;,p1) 
while(i!=4):
      if(i==3):
         if(k==1):
             print(&quot;player 1 turn&quot;)
             print(&quot;your jumbled word is:&quot;)
             k=k+1
             m=play()
             if(m==1):      ##if guessed answer is correct,then score and no.of answered count will be increased
                c1+=1
                a1+=1
             else:
                f1+=1       ##else count of no.of failed to answered will be incremented
         else:
             print(&quot;player 2 turn&quot;)
             print(&quot;your jumbled word is:&quot;)
             k=k-1
             m=play()
             if(m==1):
                c2=c2+1
                a2=a2+1
             else:
                f2=f2+1
       if(i==2):
             print(&quot;present status&quot;)
             stat()
       i=int(input(&quot;enter your choice  1.stop 2.status 3.continue&quot;))
       if(i==1):
             stat()
             i=i+3
&lt;/pre&gt;
&lt;hr&gt;
=== JumbledWord Simple Logic, In Short ===
[[File:jumbledWord.gif]]
&lt;hr&gt;
'''Logic to create a Jumbled Word'''
&lt;hr&gt;
&lt;pre&gt;
#Get Jumbled Word and print it Horizontally
import random

def getJumbledWord(b):
    jumble=''
    l1 = [ b[i] for i in range(0, len(b)) ]
    for t in range(len(l1)):
       p=random.choice(l1)     ##this randomly gets letters from the list      
       jumble=jumble+p       
       l1.remove(p)
    return jumble

b=input(&quot;Enter a word to make it jumbled : &quot;)
print(&quot;Jumbled Word : &quot;, getJumbledWord(b))
&lt;/pre&gt;
&lt;hr&gt;
'''Another Logic to create a Jumbled Word'''
&lt;hr&gt;
&lt;pre&gt;
b=input(&quot;Enter a word to make it jumbled : &quot;)

def getJumbledWord1(b):
    l1 = [ b[i] for i in range(0, len(b)) ]
    random.shuffle(l1)
    str1 = ''.join(l1)
    return str1

print(&quot;Jumbled Word : &quot;, getJumbledWord1(b))
&lt;/pre&gt;

====Sample Output:====
&lt;pre&gt;
---- Output1 
Enter a word to make it jumbled : butter
Jumbled Word :  tbture

---- Output2 
Enter a word to make it jumbled : petriotism
Jumbled Word :  pittrosime
&lt;/pre&gt;

=Theory of Evolution=

== What is Evolution ? ==
Evolution is the change in heritable characteristics over successive generations. The theory of evolution explains that DNA, which acts as a carrier of genetic information from one generation to other, tends to change or mutate occasionally. These changes are reflected in next generations to come. This is how life has evolved on earth from bacteria to human beings.&lt;br&gt;
[[File:Evolution.png|500px]]

== Implementation ==
&lt;pre&gt;An array representing DNA is stored in a file. As genes are forms of DNA, they contain information to be transferred to forthcoming generations. Assume that information is in the form of bits (in the form of 0s and 1s). A number is picked randomly from 1 to the size of the array. A new parameter has been introduced which decides whether mutation would occur or not. If the value of this new parameter is 1 (It is picked randomly from 1 to 100), then only change is reflected down the generations, otherwise it is not. The pseudo code is as follows :
Input an array containing genetic information .
Randomly generate a number (say m) from 1 to length of the array. Randomly generate other number (say p) from 1 to 100.
 
    if p is equal to 1 then 
        if m is 1 then
          set it to 0
        else
          set it to 1
&lt;/pre&gt;
[[#TOP]]</text>
      <sha1>cy9rml15cgzfk9mtso0l856q7ih5poj</sha1>
    </revision>
    <revision>
      <id>3549</id>
      <parentid>3547</parentid>
      <timestamp>2018-09-28T02:22:46Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* Updating the List */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="29463">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_3 Contributors of this page]
*Week 3 Playlist: https://www.youtube.com/playlist?list=PLc_j0TNIaWxOVx_z9jAM2UB3RqYNXaoEo
=List=
List is a flexible data structure used for storing a group of data separated by comma. The elements in a list need not be of the same data type.

'''Example:'''
       List_1 = [ 1, 2,3] or 
       List_1 = [&quot;coffee&quot;, &quot;Tea&quot;, &quot;Milk&quot;] or
       List_1 = [1,&quot;coffee&quot;, &quot;Tea&quot;, 3, &quot;5&quot;]

==List Creation==
&lt;pre&gt;a) A list can be created by simply putting values (separated by comma) between square brackets as given below,
       List_1 = [1,&quot;coffee&quot;, &quot;Tea&quot;, 3, &quot;5&quot;] #this creates a list by name List_1 containing following items


Or,
(b)A List can be created from scratch and elements can be added 
        List_2 = [ ]
        List_2.append(&quot;Kala&quot;)
        List_2.append(&quot;Mala&quot;)
Here we use &quot;append&quot; ,which is a function in python that enable us to append or attach an element to a list .
Thus List_2 will now hold [&quot;Kala&quot;,&quot;Mala&quot;]
&lt;/pre&gt;
[[#TOP]]

==Operations and Methods to work with List==
&lt;pre&gt;
a = [25,30,50,90,12,13]
b = [100,300,500,200,250]
&lt;/pre&gt;
&lt;hr&gt;
&lt;table border=2&gt;
  &lt;tr&gt;
    &lt;th&gt;&lt;b&gt;Method/&lt;br&gt;Operator&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Function&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Syntax&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Output&lt;/b&gt;&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;len()&lt;/td&gt;
    &lt;td&gt;Find length of a list&lt;/td&gt;
    &lt;td&gt;len(a)&lt;/td&gt;
    &lt;td&gt;6&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;max()&lt;/td&gt;
    &lt;td&gt;Find maximum element from the list&lt;/td&gt;
    &lt;td&gt;max(a)&lt;/td&gt;
    &lt;td&gt;90&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;min()&lt;/td&gt;
    &lt;td&gt;Find minimum element from the list&lt;/td&gt;
    &lt;td&gt;min(a)&lt;/td&gt;
    &lt;td&gt;12&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sum()&lt;/td&gt;
    &lt;td&gt;Returns sum of all elements of the list&lt;/td&gt;
    &lt;td&gt;sum(a)&lt;/td&gt;
    &lt;td&gt;220&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;reverse()&lt;/td&gt;
    &lt;td&gt;Reverses the original list&lt;/td&gt;
    &lt;td&gt;a.reverse()&lt;/td&gt;
    &lt;td&gt;[13, 12, 90, 50, 30, 25]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sort()&lt;/td&gt;
    &lt;td&gt;Sorts the original list in ascending order&lt;/td&gt;
    &lt;td&gt;a.sort()&lt;/td&gt;
    &lt;td&gt;[12, 13, 25, 30, 50, 90]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sorted()&lt;/td&gt;
    &lt;td&gt;Returns the new sorted list &lt;/td&gt;
    &lt;td&gt;sorted(a)&lt;/td&gt;
    &lt;td&gt;[12, 13, 25, 30, 50, 90]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;insert()&lt;/td&gt;
    &lt;td&gt;Insert at a particular index in the list, and shifts remaining elements&lt;/td&gt;
    &lt;td&gt;a.insert(3,3)&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 3, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;append()&lt;/td&gt;
    &lt;td&gt;Adds elements/object to the end of the list&lt;/td&gt;
    &lt;td&gt;a.append(5)&lt;br&gt;a.append([10,20])&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 5]&lt;br&gt;[25, 30, 50, 90, 12, 13, [10, 20]]&lt;br&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;extend()&lt;/td&gt;
    &lt;td&gt;Adds object to the end of the list as elements not as object&lt;/td&gt;
    &lt;td&gt;a.extend([10,20])&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 10, 20]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;*&amp;nbsp;&amp;nbsp;Repeatation&lt;br&gt;operator&lt;/td&gt;
    &lt;td&gt;Repeat the list for n times and returns a new list&lt;/td&gt;
    &lt;td&gt;a*2&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 25, 30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;+ Concatenation&lt;br&gt;operator&lt;/td&gt;
    &lt;td&gt;Concatenates two lists, and returns a new list&lt;/td&gt;
    &lt;td&gt;a+b&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 100, 300, 500, 200, 250]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;index()&lt;/td&gt;
    &lt;td&gt;Finds index of a particular element in the list or not&lt;/td&gt;
    &lt;td&gt;a.index(25)&lt;br&gt;a.index(0)&lt;br&gt;&lt;/td&gt;
    &lt;td&gt;0&lt;br&gt;&lt;br&gt;ValueError: 0 is not in list&lt;br&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;in operator&lt;/td&gt;
    &lt;td&gt;Finds whether a particular element is in the list or not, returns boolean&lt;/td&gt;
    &lt;td&gt;25 in a&lt;/td&gt;
    &lt;td&gt;True&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;not in operator&lt;/td&gt;
    &lt;td&gt;Checks if element is not available in list, returns boolean&lt;/td&gt;
    &lt;td&gt;25 not in a&lt;/td&gt;
    &lt;td&gt;False&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;count()&lt;/td&gt;
    &lt;td&gt;Counts the number of occurence of an element in the list&lt;/td&gt;
    &lt;td&gt;a.count(25)&lt;/td&gt;
    &lt;td&gt;1&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;remove()&lt;/td&gt;
    &lt;td&gt;Removes an element from the list&lt;/td&gt;
    &lt;td&gt;a.remove(25)&lt;/td&gt;
    &lt;td&gt; [30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;pop()&lt;/td&gt;
    &lt;td&gt;Delete and return item at index 0&lt;/td&gt;
    &lt;td&gt;a.pop(0)&lt;/td&gt;
    &lt;td&gt;25 , a will be [30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;del&lt;/td&gt;
    &lt;td&gt;Deletes item at a particular index from the list&lt;/td&gt;
    &lt;td&gt;del a[0]&lt;/td&gt;
    &lt;td&gt;[30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;all()&lt;/td&gt;
&lt;td&gt;Returns True, if all items in list are True or it is an empty list&lt;/td&gt;
&lt;td&gt;all([True, True, True])
all([])
&lt;/td&gt;
&lt;td&gt;True&lt;br&gt;
True&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;any()&lt;/td&gt;
&lt;td&gt;Returns True, if any item in list is True else return False&lt;/td&gt;
&lt;td&gt;any([True, True, True])&lt;br&gt;
any([True, False, True])&lt;br&gt;
any([])&lt;/td&gt;
&lt;td&gt;True&lt;br&gt;False&lt;br&gt;False&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;

==Printing the List==
=== Print whole list ===
A list can be printed simply or using a ''for / while'' loop 

 print(List_2)     # To print the entire list
This code will print      
 ['Kala','Mala']     

===Print element at a particular index===
&lt;pre&gt;
Using index position
    List_2[0]     # prints 'Kala' ,i.e,the value at index position 0.
    List_2[1]     # prints 'Mala'.
&lt;/pre&gt;
=== Without using index position ===
&lt;pre&gt;
for item in List_2:   # here item is a variable used to access elements in list.
       print(item)
   This code snippet prints 
    Kala
    Mala
&lt;/pre&gt;
[[#TOP]]

==Search for a particular element in list==
Elements in a list can be searched by one of the two ways:
=== using index() function===
&lt;pre&gt;
ages1 = [11,23,12,23,45]

#if element is available in the list, index() returns the index value on which, the element is present.
print(ages1.index(45))#Output: 4

#if element is not available in the list, index() returns ''ValueError''
print(ages1.index(0))#Output: ValueError:
&lt;/pre&gt;

In programming, if such error occurs, program gets terminated. It can be solved using exception handling.
e.g.
&lt;pre&gt;
ages1 = [11,23,12,23,45]

try:
    print(ages1.index(0))
except ValueError:
    print(&quot;Exception has occured&quot;)    
    print(&quot;Element is not found in the list&quot;)

&lt;/pre&gt;
&lt;pre&gt;
'''Output: 
Exception has occured
Element is not found in the list
'''&lt;/pre&gt;
[[#TOP]]

=== using 'in' operator===
''in'' operator is used to check whether a particular element is available in the list or not.e.g.

&lt;pre&gt;
ages1 = [11,23,12,23,45]
no=11

if no in ages1:
    print(&quot;no is there in the list&quot;)
else:    
    print(&quot;no is NOT there in the list&quot;)
&lt;/pre&gt;
&lt;pre&gt;
#Output: no is there in the list
&lt;/pre&gt;


'''Number is not there in the list'''
&lt;pre&gt;
ages1 = [11,23,12,23,45]
no=15

if no in ages1:
    print(&quot;no is there in the list&quot;)
else:    
    print(&quot;no is NOT there in the list&quot;)
&lt;/pre&gt;
&lt;pre&gt;
Output: no is NOT there in the list
&lt;/pre&gt;
[[#TOP]]

==Updating the List==
The lists can be updated using ''append'' or ''insert'' function.  Append adds the element to the end of the list and Insert adds the element in the specified position.
&lt;pre&gt;
   # add the element 'Sheela' to the end of the list.
   List_2.append(&quot;Sheela&quot;)    
   print (List_2) will output 
   ['Kala', 'Mala', 'Sheela']
&lt;/pre&gt;
   &lt;pre&gt;
# add the element &quot;Bala&quot; in the list at the index 1.
   List_2.insert(1,&quot;Bala&quot;)    
   print (List_2) will output 
   ['Kala', 'Bala','Mala', 'Sheela']
&lt;/pre&gt;

=== Extend the list by adding elements of other list at end using extend()===
&lt;pre&gt;
ages = [11,23,12,23,45]
ages.extend([57,58])
print(ages)
&lt;/pre&gt;

&lt;pre&gt;
#Output: [11, 23, 12, 23, 45, 57, 58]
&lt;/pre&gt;

==== Difference between ''append and extend'' ====
Difference between append and extend can be easily understood, by the following example.

&lt;pre&gt;
appendlist = [11,23,12,23,45]
appendlist.append([57,58])

extendlist= [11,23,12,23,45]
extendlist.extend([57,58])
&lt;/pre&gt;

&lt;pre&gt;
'''Output:
[11, 23, 12, 23, 45, [57, 58]]
[11, 23, 12, 23, 45, 57, 58]'''
&lt;/pre&gt;
[[#TOP]]

==Basic Operations on List==
===Frequency of Occurrence===
list.count(object) will return the number of times the object occur in the list.
  '''Example'''
    ages = [11,23,12,23,45,43,22,24,23]
    ages.count(23) will return
    3
    ages.count(100) will return
    0

===Length of the List===
len(list) will return the length of the list ie. the number of objects in the list.
  '''Example'''
    ages = [11,23,12,23,45,43,22,24,23]
    len(ages) will output
    9
To print the objects in the list either use ''for item in list'' or ''for index in range(len(list))''
    for item in ages:       
        print (item)  
        (OR)
    for index in range(len(ages)) :
        print (ages[index])
===Sort the List===
list.sort() will sort the list in ascending order
  '''Example'''
    ages = [11,23,12,23,45,43,22,24,23]
    ages.sort() 
    print (ages) 
    [11, 12, 22, 23, 23, 23, 24, 43, 45]

[[#TOP]]

===Sort the List using sorted() function===
sorted(list1) will sort the list and return a new list, it doesn't modify the original list
&lt;br&gt;'''Example: Sort in ascending order'''
&lt;pre&gt;
ages = [11,23,12,23,45,43,22,24,23]
newList=sorted(ages)
print(newList)

#Output: [11, 12, 22, 23, 23, 23, 24, 43, 45]
&lt;/pre&gt;

&lt;br&gt;'''Example: Sort in descending order'''
&lt;pre&gt;
ages = [11,23,12,23,45,43,22,24,23]
newList=sorted(ages,reverse=True)
print(newList)

#Output: [45, 43, 24, 23, 23, 23, 22, 12, 11]
&lt;/pre&gt;

===Reverse the List===
list.reverse() will reverse the original list
  '''Example'''
    ages = [11, 12, 22, 23, 23, 23, 24, 43, 45]
    ages.reverse()
    print (ages)
    [45, 43, 24, 23, 23, 23, 22, 12, 11]

Both sort() and reverse() list operation will work on numeric and alphanumeric data list.

A special use of the reverse() function is to descend a list that is sorted in ascending order.

  '''Example'''
&lt;pre&gt;
ages = [11, 12, 22, 23, 23, 23, 24, 43, 45]
ages.sort()
print(ages)
ages.reverse()
print(ages)
&lt;/pre&gt;

===Slicing===
Used to retrieve an object or objects in a range as a list  
  '''Example'''
Use ''list[index]'' to retrieve the object at the given index
         In [1]: student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
         In [2]: student[3]     #Object at index 3.  Remember index starts at 0
         Out[2]: 'Geetha'      


Use ''list[start_index : end_index + 1]'' to retrieve objects from the start_index to end_index 
         In [3]: student[2:4]     # Objects from index 2 to 3 as List. Note the [ and ]
         Out[3]: ['Vijay', 'Geetha']   


Use ''list[:]'' to retrieve objects from the starting of the list to the end of the list. 
The default start value will be the starting index of the list (i.e. 0) and the default end value
will be the length of the list 
         In [4]: student[:]        # prints the entire list
         Out[4]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma', 'Janani']


         In [5]: student[:5]       # prints the objects from the start of the list upto object at index 4
         Out[5]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran']


         In [6]: student[2:]       # prints the objects from index 2 upto the end of the list
         Out[6]: ['Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma', 'Janani']


Negative index too is available in Python. It starts from last element of the list. i.e.

         In [7]:student[-1]        #prints last index of list
         Out[7]: 'Janani'


         In [8]:student[-1:-8]     #prints empty list
         Out[8]: []


         In [9]:student[-8:-1]     #prints -8th index to -1st index elements
         Out[9]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma']

[[#TOP]]
===Removing Item from list ===
----

Is used to remove a specific item from the list.

'''Example:'''
 
Use list.remove(entry/value)  Or   del list[index]    Or list.pop(index)
         student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
         student.remove(&quot;Arun&quot;)   #This will delete item &quot;Arun&quot;
         Or    
         del student[0]           # This will delete item at index 0
         Or
         student.pop(0)         # This will delete and return item at index 0


         print(student)    
         Output: [&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]

[[#TOP]]
===Delete list ===
----
Used to delete complete list

'''Example'''

Use del &lt;list name&gt;
         student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
         del student

===Concatenation of two lists===
----
''+'' is the concatenation operator which is used concatenate two lists. 
&lt;pre&gt;
ages1 = [11,23,12,23,45]
ages2 = [25, 24, 43, 47]
age=ages1+ages2
print(age)
#Output: [11, 23, 12, 23, 45, 25, 24, 43, 47]
&lt;/pre&gt;

===Repeatation of a list ===
----
''*'' is the operator to repeat a particular list.
&lt;pre&gt;
ages1 = [11,23,12,23,45]
age=ages1*5 #ages1 list is repeated 5 times and stroed in ''age'' list
print(age)

#Output: [11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45]
&lt;/pre&gt;

=== all and any for List===
all() and any() are special functions to check whether all elements in iterable is ''True'' or any element is ''True''
&lt;ol&gt;
&lt;li&gt;If all elements in a list are ''True'', '''all()''' will return ''True''&lt;/li&gt;
&lt;li&gt;If iterable is ''empty'', '''all()''' will return ''True''&lt;/li&gt;
&lt;li&gt;If iterable contains at least one ''True'', '''any()''' will return ''True''&lt;/li&gt;
&lt;li&gt;If iterable is ''empty'', '''any()''' will return ''False''&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;
lsit=[True, True, True, True]
print(all(lsit))#Output: True
print(any(lsit))#Output: True

lsit1=[True, False, True, True]
print(all(lsit1))#Output: False
print(any(lsit1))#Output: True

lsit2=[False,False,False]
print(all(lsit2))#Output: False
print(any(lsit2))#Output: False

lsit3=[]
print(all(lsit3))#Output: True
print(any(lsit3))#Output: False
&lt;/pre&gt;

==Conditional Statements==
&lt;pre&gt;Conditionals are used to check the condition and change the flow of the program 
accordingly. They are realized in programming languages through if statement. The 
syntax is as follows :
         if condition : 
            statement
    '''Note:''' Do not forget indentation (inserting space/tab) in the line after the
 if condition.
    
    In case you want to execute a set of statements when a condition is true and another

set of statement when the condition is false.
         if condition : 
            statement 1
         else :
            statement 2
    
    Multiple if-else statements can be written as follows:
         if condition_1 : 
            statement 1
         elif condition_2 : # 'elif' is short for 'else if'
            statement 2
         elif condition_3 :
            statement 3
        .
        .
         else :
            final statement
&lt;/pre&gt;
[[#TOP]]

=Loops and Conditionals : Fizzbuzz=
====Loops====
&lt;pre&gt;
Loops are used to execute a set of repetitive statements. They are realized
through 'while' and 'for' loops in programming languages. The syntax of 'for' loop is 
as follows :
        for LOOPVARIABLE in SEQUENCE: 
            STATEMENTS
    '''e.g.''' to print all the data from a list we can write:
        for item in list_name
            print(item)
    OR
        for index in range(len(list_name))
            print(list_name[index])
    
    The syntax for while loop is as follows :
    
        while BOOLEANEXPRESSION: 
            STATEMENTS
            INCREMENT/DECREMENT
    
    '''e.g.''' if we want to print all numbers from 1 to 10
        i=1
        while i&lt;=10 :
            print(i,&quot; &quot;)
            i=i+1
    
    'while' loop has indefinite iteration (run-time unknown). So, there must be loop
 break statement in it.
 Whereas 'for' loop is definite in nature (i.e. known or predictable span).&lt;br&gt;

&lt;b&gt;NOTE: Python doesn't have anything like do-while loop.&lt;/b&gt;
&lt;/pre&gt;
[[#TOP]]

==Implementation==
Here, we try to demonstrate the concept of loops and conditionals through a game called Fizzbuzz. The rules are as follows :&lt;br/&gt;
[[File:fizzBuzz.gif]]

• if input number is a multiple of ’3’ print ”Fizz”
&lt;br/&gt;
• if input number is a multiple of ’5’ print ”Buzz”
&lt;br/&gt;
• if input number is a multiple of both '3' and ’5’ print ”FizzBuzz”
&lt;br/&gt;
The pseudo code is as follows :
&lt;pre&gt;
   If input no % 3 == 0 and  input no % 5 == 0 : 
       print ”Fizzbuzz”
   else if input no % 3 == 0 : 
       print ”Fizz”
   else if input no % 5 == 0 : 
       print ”Buzz”
   else :
       print the input no
&lt;/pre&gt;
The order of statements execution matters to get the desired output. The highest priority condition should be first followed by other. In fizzbuzz programming, first checking should be done for both divisibility of 3 and 5. If condition not satisfied only then it should check individually for 3 or 5. So carefully choosing the order is crucial for better programming.
Note: There is some effect of present condition statements chosen on next conditions statements. That is why in first attempt fizzbuzz programming got struck.

Example: 
&lt;pre&gt;
#Code to achieve the above requirement in python3.
i = int(input(&quot;Enter the number&quot;)) 
if i%3 == 0 and i%5 == 0: print(i,&quot;FizzBuzz&quot;)  
elif i%5 == 0: print(i,&quot;Buzz&quot;)
elif i%3 == 0: print(i,&quot;Fizz&quot;)
else: print(i)
&lt;/pre&gt;
Lets put the same into a loop for a range given by the user.
&lt;pre&gt;
def fizzbuzzgame(start,stop):
    for i in range(start,stop+1):
        if i%3 == 0 and i%5 == 0:
            print(i,&quot;FizzBuzz&quot;)
        elif i%5 == 0:
            print(i,&quot;Buzz&quot;)
        elif i%3 == 0:
            print(i,&quot;Fizz&quot;)
        else: print(i)

fizzbuzzgame(50,100)
&lt;/pre&gt;


=== Fizz Buzz game in Interactive mode with Score ===
'''By Ms. Ami Tusharkant Choksi'''
&lt;pre&gt;
def fizzbuzzgame(i):
        if i%3 == 0 and i%5 == 0:
            print(i,&quot;FizzBuzz&quot;)
            return(&quot;fzbz&quot;)
        elif i%5 == 0:
            print(i,&quot;Buzz&quot;)
            return(&quot;bz&quot;)
        elif i%3 == 0:
            print(i,&quot;Fizz&quot;)
            return(&quot;fz&quot;)
        else:
            print(i)
            return(&quot;no&quot;)

ch = 'y'
fizzbuzz=0
fizz=0
buzz=0
nothing=0
print(&quot;&quot;&quot;
 _____  ____  _____  _____  ____   __ __  _____  _____       ____   ____  ___ ___    ___ 
|     ||    ||     ||     ||    \ |  |  ||     ||     |     /    | /    ||   |   |  /  _]
|   __| |  | |__/  ||__/  ||  o  )|  |  ||__/  ||__/  |    |   __||  o  || _   _ | /  [_ 
|  |_   |  | |   __||   __||     ||  |  ||   __||   __|    |  |  ||     ||  \_/  ||    _]
|   _]  |  | |  /  ||  /  ||  O  ||  :  ||  /  ||  /  |    |  |_ ||  _  ||   |   ||   [_ 
|  |    |  | |     ||     ||     ||     ||     ||     |    |     ||  |  ||   |   ||     |
|__|   |____||_____||_____||_____| \__,_||_____||_____|    |___,_||__|__||___|___||_____|
                                                                                         
&quot;&quot;&quot;)   

while(ch == 'y'):
    n=int(input(&quot;Enter a Number : &quot;))
    winLoose=fizzbuzzgame(n)
    if(winLoose == &quot;fz&quot;):
        fizz+=1
    elif(winLoose == &quot;bz&quot;):
        buzz+=1
    elif(winLoose == &quot;fzbz&quot;):
        fizzbuzz+=1
    ch=input(&quot;Do you want to continue playing the game : (y/n)&quot;)
    if(ch=='n'):
        print('Congratulations, your score is\n FizzBuzz:%d\nFizz:%d\nBuzz:%d' %
(fizzbuzz,fizz,buzz))
    
'''Sample Output:

 _____  ____  _____  _____  ____   __ __  _____  _____       ____   ____  ___ ___    ___ 
|     ||    ||     ||     ||    \ |  |  ||     ||     |     /    | /    ||   |   |  /  _]
|   __| |  | |__/  ||__/  ||  o  )|  |  ||__/  ||__/  |    |   __||  o  || _   _ | /  [_ 
|  |_   |  | |   __||   __||     ||  |  ||   __||   __|    |  |  ||     ||  \_/  ||    _]
|   _]  |  | |  /  ||  /  ||  O  ||  :  ||  /  ||  /  |    |  |_ ||  _  ||   |   ||   [_ 
|  |    |  | |     ||     ||     ||     ||     ||     |    |     ||  |  ||   |   ||     |
|__|   |____||_____||_____||_____| \__,_||_____||_____|    |___,_||__|__||___|___||_____|
                                                                                         

Enter a Number : 666
666 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 777
777 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 555
555 FizzBuzz
Do you want to continue playing the game : (y/n)y
Enter a Number : 1
1
Do you want to continue playing the game : (y/n)y
Enter a Number : 789
789 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 25
25 Buzz
Do you want to continue playing the game : (y/n)n
Congratulations, your score is

FizzBuzz:1
Fizz:3
Buzz:1

&lt;/pre&gt;

=Crowd Computing: Just Estimate=
==Wisdom of Crowds==
The concept of ’Wisdom of Crowds’ was proposed by Francis Galton. A weight-judging competition was carried on at the annual show of the West of England Fat Stock and Poultry Exhibition recently held at Plymouth, A fat ox having been selected, competitors bought stamped and numbered cards, each, on which to inscribe their respective names, addresses, and estimates of what the ox would weigh after it had been slaughtered. Those who guessed most successfully received prizes. About 8oo tickets were issued to the par- ticipants. The middlemost estimate of all the estimates recorded was 1207 lbs and the actual weight of the ox was 1198 lbs.

==Our Experiment==
The crowd had to guess the number of candies/gems in a jar. Around 75 people participated in the experiment. The actual number of gems in the jar were 375. The median of all estimates came out to be 300 and the mean of all the estimates came out to be around 396. Median underestimated and mean overestimated the actual value. So according to recent studies, Trimmed mean must be used as an aggregate measure to estimate where Wisdom of Crowds is involved.
[[File:Gemsjar.jpg|center|200px|caption]]

===Trimmed Mean===
In these kinds of experiments, 10% trimmed mean is usually followed. For calculating 10% trimmed mean, remove 10% smallest and 10% largest values from the sample. Calculate the mean of the sample obtained. In the above experiment, the trimmed mean came out to be around 351 which is very close to the actual value.

==Implementation==
Here, we try to demonstrate the concept of trimmed mean through crowd computing.
 Input a list of estimates done by the crowd .
 Sort the list.
 Remove the 10% smallest values.
 Remove the 10% largest values.
 Calculate the mean of the new list obtained .&lt;hr&gt;

==Data of Experiment==       
    Estimates =[1000,1010,1786,2000,1500,1500,100,120,150,150,150,170,175,180,197,200,200,200,200,200,200,220,220,220,220,234,250,250,250,250,250,250,250,250,250,263,270,275,275,286,300,
                300,300,300,300,300,300,300,320,350,350,350,400, 400,400,400,400,450,467,500,500,500,500,500,500,500,550,550,600,600,600,650,700,700,720]

    '''CODE:'''
&lt;pre&gt;
Estimates = [1000,1010,1786,2000,1500,1500,100,120,150,150,150,170,175,180,197,200,200,200,200,200,200,220,220,220,220,234,250,250,250,250,250,250,250,250,250,263,270,275,275,286,300,                300,300,300,300,300,300,300,320,350,350,350,400,400,400,400,400,450,467,500,500,500,500,500,500,500,550,550,600,600,600,650,700,700,720]
Estimates.sort()
offset = int(0.10*len(Estimates))
for i in range(offset):
       del Estimates[0]
       del Estimates[-1]
Sum = 0    
for i in range(len(Estimates)):
       Sum += Estimates[i]
Mean_Value = Sum/len(Estimates)
print(&quot;Mean : &quot;, int(Mean_Value))
#Output:
Mean :  351
&lt;/pre&gt;
&lt;hr&gt;
==Trimmed Mean for the above example== 
&lt;h3&gt;Using scipy library&lt;/h3&gt;
&lt;pre&gt;
#import scipy to use the method of trim_mean
from scipy import stats
trimMean = stats.trim_mean(Estimates, 0.1) # Trim 10% at both ends
print(&quot;Trimmed Mean : &quot;,trimMean)
#Output:
Trimmed Mean :  335.1020408163265
&lt;/pre&gt;

&lt;h3&gt;Without using scipy library&lt;/h3&gt;
&lt;pre&gt;
#Trimmed mean with 10%
p=10/100
#sorted data
data=[2, 4, 6, 7, 11, 21, 81, 90, 105, 121]
n = len(data)
#Remove elements from both end
rem=int(n*p)
newData = data[rem:-rem]
mean = 0
for i in newData:
    mean += i
mean = int(mean/len(newData))
print(&quot;Trimmed mean : &quot;,mean)
#Output: Trimmed mean :  40
&lt;/pre&gt;
[[#Top]]

=Jumbled_Words Permutations: Jumbled Words=
==What are Permutations ?==
A permutation also called ordering of selected number of elements from a list denoted by nPr here we are choosing all elements of a list and so n=r&lt;br&gt;
nPr=n!/(n-r)!&lt;br&gt; as n=r
nPn=n!&lt;br&gt; which gives all possible arrangement of elements present in a list.

 For example, permutations of list [1,2,3] are [1,2,3], [1,3,2], [2,1,3], [2,3,1], 
[3,1,2], and [3,2,1]. 
The number of permutations of a list of elements nPn is given by n!. For example, there are 2! = 2 x 1 = 2 permutations of [1,2], namely [1,2] and [2,1], and 3! = 3 x 2 x 1 = 6 permutations of [1,2,3], as mentioned above.&lt;br/&gt;
[[File:Permutations.jpg]]

==Implementation==
Here, we try to demonstrate the concept of permutations through jumbled words. It is a two player game in which one person presents the other person a different permutation of the word in his mind. The other person has to guess the right word. If he guesses, the he wins otherwise he loses.
 Input an list of words.
 Randomly pick a word from the list of words .
 Shuffle this word and present it to the other player.
 if word guesses by the player is same as the one picked from list of w
     player wins
 else
     player loses

ALTERNATE CODE TO GENERATE THIS GAME:
&lt;pre&gt;
import random
p1=input(&quot;enter player 1 name:&quot;)
p2=input(&quot;enter player 2 name:&quot;)
l=[&quot;rainbow&quot;,&quot;computer&quot;,&quot;robot&quot;,&quot;butter&quot;,&quot;vegetable&quot;,&quot;science&quot;,&quot;correct&quot;]
c1=c2=a1=a2=f1=f2=0
k=1
i=3
def play():
    n=random.choice(l)        ##n=chooses a word from list l
    l1=[]
    for j in n:
       l1.append(j)      ##creates a list for word in n
    for t in range(len(l1)):
       p=random.choice(l1)     ##this randomly displays letters in the list
       print(p)
       l1.remove(p)          ##to avoid the repetition of a letter
    s=input(&quot;enter the word:&quot;)
    if(s==n):
        print(&quot;correct&quot;)
        return 1
    else:
        print(&quot;not correct&quot;)
        print(&quot;answer is&quot;,n)
        return 0
def stat():
     print(&quot;player 1:&quot;)
     print(&quot;score:&quot;,c1)
     print(&quot;answered:&quot;,a1)
     print(&quot;failed:&quot;,f1)
     print(&quot;.............&quot;)
     print(&quot;player 2:&quot;)
     print(&quot;score:&quot;,c2)
     print(&quot;answered:&quot;,a2)
     print(&quot;failed&quot;,f2)
     if(c1&gt;c2):
         print(p1,&quot; won over &quot;,p2)
     elif(c1==c2):
         print(&quot;draw game&quot;)
     else:
         print(p2,&quot; won over &quot;,p1) 
while(i!=4):
      if(i==3):
         if(k==1):
             print(&quot;player 1 turn&quot;)
             print(&quot;your jumbled word is:&quot;)
             k=k+1
             m=play()
             if(m==1):      ##if guessed answer is correct,then score and no.of answered count will be increased
                c1+=1
                a1+=1
             else:
                f1+=1       ##else count of no.of failed to answered will be incremented
         else:
             print(&quot;player 2 turn&quot;)
             print(&quot;your jumbled word is:&quot;)
             k=k-1
             m=play()
             if(m==1):
                c2=c2+1
                a2=a2+1
             else:
                f2=f2+1
       if(i==2):
             print(&quot;present status&quot;)
             stat()
       i=int(input(&quot;enter your choice  1.stop 2.status 3.continue&quot;))
       if(i==1):
             stat()
             i=i+3
&lt;/pre&gt;
&lt;hr&gt;
=== JumbledWord Simple Logic, In Short ===
[[File:jumbledWord.gif]]
&lt;hr&gt;
'''Logic to create a Jumbled Word'''
&lt;hr&gt;
&lt;pre&gt;
#Get Jumbled Word and print it Horizontally
import random

def getJumbledWord(b):
    jumble=''
    l1 = [ b[i] for i in range(0, len(b)) ]
    for t in range(len(l1)):
       p=random.choice(l1)     ##this randomly gets letters from the list      
       jumble=jumble+p       
       l1.remove(p)
    return jumble

b=input(&quot;Enter a word to make it jumbled : &quot;)
print(&quot;Jumbled Word : &quot;, getJumbledWord(b))
&lt;/pre&gt;
&lt;hr&gt;
'''Another Logic to create a Jumbled Word'''
&lt;hr&gt;
&lt;pre&gt;
b=input(&quot;Enter a word to make it jumbled : &quot;)

def getJumbledWord1(b):
    l1 = [ b[i] for i in range(0, len(b)) ]
    random.shuffle(l1)
    str1 = ''.join(l1)
    return str1

print(&quot;Jumbled Word : &quot;, getJumbledWord1(b))
&lt;/pre&gt;

====Sample Output:====
&lt;pre&gt;
---- Output1 
Enter a word to make it jumbled : butter
Jumbled Word :  tbture

---- Output2 
Enter a word to make it jumbled : petriotism
Jumbled Word :  pittrosime
&lt;/pre&gt;

=Theory of Evolution=

== What is Evolution ? ==
Evolution is the change in heritable characteristics over successive generations. The theory of evolution explains that DNA, which acts as a carrier of genetic information from one generation to other, tends to change or mutate occasionally. These changes are reflected in next generations to come. This is how life has evolved on earth from bacteria to human beings.&lt;br&gt;
[[File:Evolution.png|500px]]

== Implementation ==
&lt;pre&gt;An array representing DNA is stored in a file. As genes are forms of DNA, they contain information to be transferred to forthcoming generations. Assume that information is in the form of bits (in the form of 0s and 1s). A number is picked randomly from 1 to the size of the array. A new parameter has been introduced which decides whether mutation would occur or not. If the value of this new parameter is 1 (It is picked randomly from 1 to 100), then only change is reflected down the generations, otherwise it is not. The pseudo code is as follows :
Input an array containing genetic information .
Randomly generate a number (say m) from 1 to length of the array. Randomly generate other number (say p) from 1 to 100.
 
    if p is equal to 1 then 
        if m is 1 then
          set it to 0
        else
          set it to 1
&lt;/pre&gt;
[[#TOP]]</text>
      <sha1>fq5dp7vxugpcc1zml2h6pzd66v1m4jd</sha1>
    </revision>
    <revision>
      <id>3550</id>
      <parentid>3549</parentid>
      <timestamp>2018-09-28T02:24:33Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* Difference between append and extend */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="29464">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_3 Contributors of this page]
*Week 3 Playlist: https://www.youtube.com/playlist?list=PLc_j0TNIaWxOVx_z9jAM2UB3RqYNXaoEo
=List=
List is a flexible data structure used for storing a group of data separated by comma. The elements in a list need not be of the same data type.

'''Example:'''
       List_1 = [ 1, 2,3] or 
       List_1 = [&quot;coffee&quot;, &quot;Tea&quot;, &quot;Milk&quot;] or
       List_1 = [1,&quot;coffee&quot;, &quot;Tea&quot;, 3, &quot;5&quot;]

==List Creation==
&lt;pre&gt;a) A list can be created by simply putting values (separated by comma) between square brackets as given below,
       List_1 = [1,&quot;coffee&quot;, &quot;Tea&quot;, 3, &quot;5&quot;] #this creates a list by name List_1 containing following items


Or,
(b)A List can be created from scratch and elements can be added 
        List_2 = [ ]
        List_2.append(&quot;Kala&quot;)
        List_2.append(&quot;Mala&quot;)
Here we use &quot;append&quot; ,which is a function in python that enable us to append or attach an element to a list .
Thus List_2 will now hold [&quot;Kala&quot;,&quot;Mala&quot;]
&lt;/pre&gt;
[[#TOP]]

==Operations and Methods to work with List==
&lt;pre&gt;
a = [25,30,50,90,12,13]
b = [100,300,500,200,250]
&lt;/pre&gt;
&lt;hr&gt;
&lt;table border=2&gt;
  &lt;tr&gt;
    &lt;th&gt;&lt;b&gt;Method/&lt;br&gt;Operator&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Function&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Syntax&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Output&lt;/b&gt;&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;len()&lt;/td&gt;
    &lt;td&gt;Find length of a list&lt;/td&gt;
    &lt;td&gt;len(a)&lt;/td&gt;
    &lt;td&gt;6&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;max()&lt;/td&gt;
    &lt;td&gt;Find maximum element from the list&lt;/td&gt;
    &lt;td&gt;max(a)&lt;/td&gt;
    &lt;td&gt;90&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;min()&lt;/td&gt;
    &lt;td&gt;Find minimum element from the list&lt;/td&gt;
    &lt;td&gt;min(a)&lt;/td&gt;
    &lt;td&gt;12&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sum()&lt;/td&gt;
    &lt;td&gt;Returns sum of all elements of the list&lt;/td&gt;
    &lt;td&gt;sum(a)&lt;/td&gt;
    &lt;td&gt;220&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;reverse()&lt;/td&gt;
    &lt;td&gt;Reverses the original list&lt;/td&gt;
    &lt;td&gt;a.reverse()&lt;/td&gt;
    &lt;td&gt;[13, 12, 90, 50, 30, 25]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sort()&lt;/td&gt;
    &lt;td&gt;Sorts the original list in ascending order&lt;/td&gt;
    &lt;td&gt;a.sort()&lt;/td&gt;
    &lt;td&gt;[12, 13, 25, 30, 50, 90]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sorted()&lt;/td&gt;
    &lt;td&gt;Returns the new sorted list &lt;/td&gt;
    &lt;td&gt;sorted(a)&lt;/td&gt;
    &lt;td&gt;[12, 13, 25, 30, 50, 90]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;insert()&lt;/td&gt;
    &lt;td&gt;Insert at a particular index in the list, and shifts remaining elements&lt;/td&gt;
    &lt;td&gt;a.insert(3,3)&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 3, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;append()&lt;/td&gt;
    &lt;td&gt;Adds elements/object to the end of the list&lt;/td&gt;
    &lt;td&gt;a.append(5)&lt;br&gt;a.append([10,20])&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 5]&lt;br&gt;[25, 30, 50, 90, 12, 13, [10, 20]]&lt;br&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;extend()&lt;/td&gt;
    &lt;td&gt;Adds object to the end of the list as elements not as object&lt;/td&gt;
    &lt;td&gt;a.extend([10,20])&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 10, 20]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;*&amp;nbsp;&amp;nbsp;Repeatation&lt;br&gt;operator&lt;/td&gt;
    &lt;td&gt;Repeat the list for n times and returns a new list&lt;/td&gt;
    &lt;td&gt;a*2&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 25, 30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;+ Concatenation&lt;br&gt;operator&lt;/td&gt;
    &lt;td&gt;Concatenates two lists, and returns a new list&lt;/td&gt;
    &lt;td&gt;a+b&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 100, 300, 500, 200, 250]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;index()&lt;/td&gt;
    &lt;td&gt;Finds index of a particular element in the list or not&lt;/td&gt;
    &lt;td&gt;a.index(25)&lt;br&gt;a.index(0)&lt;br&gt;&lt;/td&gt;
    &lt;td&gt;0&lt;br&gt;&lt;br&gt;ValueError: 0 is not in list&lt;br&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;in operator&lt;/td&gt;
    &lt;td&gt;Finds whether a particular element is in the list or not, returns boolean&lt;/td&gt;
    &lt;td&gt;25 in a&lt;/td&gt;
    &lt;td&gt;True&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;not in operator&lt;/td&gt;
    &lt;td&gt;Checks if element is not available in list, returns boolean&lt;/td&gt;
    &lt;td&gt;25 not in a&lt;/td&gt;
    &lt;td&gt;False&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;count()&lt;/td&gt;
    &lt;td&gt;Counts the number of occurence of an element in the list&lt;/td&gt;
    &lt;td&gt;a.count(25)&lt;/td&gt;
    &lt;td&gt;1&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;remove()&lt;/td&gt;
    &lt;td&gt;Removes an element from the list&lt;/td&gt;
    &lt;td&gt;a.remove(25)&lt;/td&gt;
    &lt;td&gt; [30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;pop()&lt;/td&gt;
    &lt;td&gt;Delete and return item at index 0&lt;/td&gt;
    &lt;td&gt;a.pop(0)&lt;/td&gt;
    &lt;td&gt;25 , a will be [30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;del&lt;/td&gt;
    &lt;td&gt;Deletes item at a particular index from the list&lt;/td&gt;
    &lt;td&gt;del a[0]&lt;/td&gt;
    &lt;td&gt;[30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;all()&lt;/td&gt;
&lt;td&gt;Returns True, if all items in list are True or it is an empty list&lt;/td&gt;
&lt;td&gt;all([True, True, True])
all([])
&lt;/td&gt;
&lt;td&gt;True&lt;br&gt;
True&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;any()&lt;/td&gt;
&lt;td&gt;Returns True, if any item in list is True else return False&lt;/td&gt;
&lt;td&gt;any([True, True, True])&lt;br&gt;
any([True, False, True])&lt;br&gt;
any([])&lt;/td&gt;
&lt;td&gt;True&lt;br&gt;False&lt;br&gt;False&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;

==Printing the List==
=== Print whole list ===
A list can be printed simply or using a ''for / while'' loop 

 print(List_2)     # To print the entire list
This code will print      
 ['Kala','Mala']     

===Print element at a particular index===
&lt;pre&gt;
Using index position
    List_2[0]     # prints 'Kala' ,i.e,the value at index position 0.
    List_2[1]     # prints 'Mala'.
&lt;/pre&gt;
=== Without using index position ===
&lt;pre&gt;
for item in List_2:   # here item is a variable used to access elements in list.
       print(item)
   This code snippet prints 
    Kala
    Mala
&lt;/pre&gt;
[[#TOP]]

==Search for a particular element in list==
Elements in a list can be searched by one of the two ways:
=== using index() function===
&lt;pre&gt;
ages1 = [11,23,12,23,45]

#if element is available in the list, index() returns the index value on which, the element is present.
print(ages1.index(45))#Output: 4

#if element is not available in the list, index() returns ''ValueError''
print(ages1.index(0))#Output: ValueError:
&lt;/pre&gt;

In programming, if such error occurs, program gets terminated. It can be solved using exception handling.
e.g.
&lt;pre&gt;
ages1 = [11,23,12,23,45]

try:
    print(ages1.index(0))
except ValueError:
    print(&quot;Exception has occured&quot;)    
    print(&quot;Element is not found in the list&quot;)

&lt;/pre&gt;
&lt;pre&gt;
'''Output: 
Exception has occured
Element is not found in the list
'''&lt;/pre&gt;
[[#TOP]]

=== using 'in' operator===
''in'' operator is used to check whether a particular element is available in the list or not.e.g.

&lt;pre&gt;
ages1 = [11,23,12,23,45]
no=11

if no in ages1:
    print(&quot;no is there in the list&quot;)
else:    
    print(&quot;no is NOT there in the list&quot;)
&lt;/pre&gt;
&lt;pre&gt;
#Output: no is there in the list
&lt;/pre&gt;


'''Number is not there in the list'''
&lt;pre&gt;
ages1 = [11,23,12,23,45]
no=15

if no in ages1:
    print(&quot;no is there in the list&quot;)
else:    
    print(&quot;no is NOT there in the list&quot;)
&lt;/pre&gt;
&lt;pre&gt;
Output: no is NOT there in the list
&lt;/pre&gt;
[[#TOP]]

==Updating the List==
The lists can be updated using ''append'' or ''insert'' function.  Append adds the element to the end of the list and Insert adds the element in the specified position.
&lt;pre&gt;
   # add the element 'Sheela' to the end of the list.
   List_2.append(&quot;Sheela&quot;)    
   print (List_2) will output 
   ['Kala', 'Mala', 'Sheela']
&lt;/pre&gt;
   &lt;pre&gt;
# add the element &quot;Bala&quot; in the list at the index 1.
   List_2.insert(1,&quot;Bala&quot;)    
   print (List_2) will output 
   ['Kala', 'Bala','Mala', 'Sheela']
&lt;/pre&gt;

=== Extend the list by adding elements of other list at end using extend()===
&lt;pre&gt;
ages = [11,23,12,23,45]
ages.extend([57,58])
print(ages)
&lt;/pre&gt;

&lt;pre&gt;
#Output: [11, 23, 12, 23, 45, 57, 58]
&lt;/pre&gt;

==== Difference between ''append and extend'' ====
Difference between append and extend can be easily understood, by the following example.

&lt;pre&gt;
appendlist = [11,23,12,23,45]
appendlist.append([57,58])

extendlist= [11,23,12,23,45]
extendlist.extend([57,58])
&lt;/pre&gt;

&lt;pre&gt;
'''Output:
[11, 23, 12, 23, 45, [57, 58]]
[11, 23, 12, 23, 45, 57, 58]'''
&lt;/pre&gt;

[[#TOP]]

==Basic Operations on List==
===Frequency of Occurrence===
list.count(object) will return the number of times the object occur in the list.
  '''Example'''
    ages = [11,23,12,23,45,43,22,24,23]
    ages.count(23) will return
    3
    ages.count(100) will return
    0

===Length of the List===
len(list) will return the length of the list ie. the number of objects in the list.
  '''Example'''
    ages = [11,23,12,23,45,43,22,24,23]
    len(ages) will output
    9
To print the objects in the list either use ''for item in list'' or ''for index in range(len(list))''
    for item in ages:       
        print (item)  
        (OR)
    for index in range(len(ages)) :
        print (ages[index])
===Sort the List===
list.sort() will sort the list in ascending order
  '''Example'''
    ages = [11,23,12,23,45,43,22,24,23]
    ages.sort() 
    print (ages) 
    [11, 12, 22, 23, 23, 23, 24, 43, 45]

[[#TOP]]

===Sort the List using sorted() function===
sorted(list1) will sort the list and return a new list, it doesn't modify the original list
&lt;br&gt;'''Example: Sort in ascending order'''
&lt;pre&gt;
ages = [11,23,12,23,45,43,22,24,23]
newList=sorted(ages)
print(newList)

#Output: [11, 12, 22, 23, 23, 23, 24, 43, 45]
&lt;/pre&gt;

&lt;br&gt;'''Example: Sort in descending order'''
&lt;pre&gt;
ages = [11,23,12,23,45,43,22,24,23]
newList=sorted(ages,reverse=True)
print(newList)

#Output: [45, 43, 24, 23, 23, 23, 22, 12, 11]
&lt;/pre&gt;

===Reverse the List===
list.reverse() will reverse the original list
  '''Example'''
    ages = [11, 12, 22, 23, 23, 23, 24, 43, 45]
    ages.reverse()
    print (ages)
    [45, 43, 24, 23, 23, 23, 22, 12, 11]

Both sort() and reverse() list operation will work on numeric and alphanumeric data list.

A special use of the reverse() function is to descend a list that is sorted in ascending order.

  '''Example'''
&lt;pre&gt;
ages = [11, 12, 22, 23, 23, 23, 24, 43, 45]
ages.sort()
print(ages)
ages.reverse()
print(ages)
&lt;/pre&gt;

===Slicing===
Used to retrieve an object or objects in a range as a list  
  '''Example'''
Use ''list[index]'' to retrieve the object at the given index
         In [1]: student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
         In [2]: student[3]     #Object at index 3.  Remember index starts at 0
         Out[2]: 'Geetha'      


Use ''list[start_index : end_index + 1]'' to retrieve objects from the start_index to end_index 
         In [3]: student[2:4]     # Objects from index 2 to 3 as List. Note the [ and ]
         Out[3]: ['Vijay', 'Geetha']   


Use ''list[:]'' to retrieve objects from the starting of the list to the end of the list. 
The default start value will be the starting index of the list (i.e. 0) and the default end value
will be the length of the list 
         In [4]: student[:]        # prints the entire list
         Out[4]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma', 'Janani']


         In [5]: student[:5]       # prints the objects from the start of the list upto object at index 4
         Out[5]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran']


         In [6]: student[2:]       # prints the objects from index 2 upto the end of the list
         Out[6]: ['Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma', 'Janani']


Negative index too is available in Python. It starts from last element of the list. i.e.

         In [7]:student[-1]        #prints last index of list
         Out[7]: 'Janani'


         In [8]:student[-1:-8]     #prints empty list
         Out[8]: []


         In [9]:student[-8:-1]     #prints -8th index to -1st index elements
         Out[9]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma']

[[#TOP]]
===Removing Item from list ===
----

Is used to remove a specific item from the list.

'''Example:'''
 
Use list.remove(entry/value)  Or   del list[index]    Or list.pop(index)
         student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
         student.remove(&quot;Arun&quot;)   #This will delete item &quot;Arun&quot;
         Or    
         del student[0]           # This will delete item at index 0
         Or
         student.pop(0)         # This will delete and return item at index 0


         print(student)    
         Output: [&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]

[[#TOP]]
===Delete list ===
----
Used to delete complete list

'''Example'''

Use del &lt;list name&gt;
         student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
         del student

===Concatenation of two lists===
----
''+'' is the concatenation operator which is used concatenate two lists. 
&lt;pre&gt;
ages1 = [11,23,12,23,45]
ages2 = [25, 24, 43, 47]
age=ages1+ages2
print(age)
#Output: [11, 23, 12, 23, 45, 25, 24, 43, 47]
&lt;/pre&gt;

===Repeatation of a list ===
----
''*'' is the operator to repeat a particular list.
&lt;pre&gt;
ages1 = [11,23,12,23,45]
age=ages1*5 #ages1 list is repeated 5 times and stroed in ''age'' list
print(age)

#Output: [11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45]
&lt;/pre&gt;

=== all and any for List===
all() and any() are special functions to check whether all elements in iterable is ''True'' or any element is ''True''
&lt;ol&gt;
&lt;li&gt;If all elements in a list are ''True'', '''all()''' will return ''True''&lt;/li&gt;
&lt;li&gt;If iterable is ''empty'', '''all()''' will return ''True''&lt;/li&gt;
&lt;li&gt;If iterable contains at least one ''True'', '''any()''' will return ''True''&lt;/li&gt;
&lt;li&gt;If iterable is ''empty'', '''any()''' will return ''False''&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;
lsit=[True, True, True, True]
print(all(lsit))#Output: True
print(any(lsit))#Output: True

lsit1=[True, False, True, True]
print(all(lsit1))#Output: False
print(any(lsit1))#Output: True

lsit2=[False,False,False]
print(all(lsit2))#Output: False
print(any(lsit2))#Output: False

lsit3=[]
print(all(lsit3))#Output: True
print(any(lsit3))#Output: False
&lt;/pre&gt;

==Conditional Statements==
&lt;pre&gt;Conditionals are used to check the condition and change the flow of the program 
accordingly. They are realized in programming languages through if statement. The 
syntax is as follows :
         if condition : 
            statement
    '''Note:''' Do not forget indentation (inserting space/tab) in the line after the
 if condition.
    
    In case you want to execute a set of statements when a condition is true and another

set of statement when the condition is false.
         if condition : 
            statement 1
         else :
            statement 2
    
    Multiple if-else statements can be written as follows:
         if condition_1 : 
            statement 1
         elif condition_2 : # 'elif' is short for 'else if'
            statement 2
         elif condition_3 :
            statement 3
        .
        .
         else :
            final statement
&lt;/pre&gt;
[[#TOP]]

=Loops and Conditionals : Fizzbuzz=
====Loops====
&lt;pre&gt;
Loops are used to execute a set of repetitive statements. They are realized
through 'while' and 'for' loops in programming languages. The syntax of 'for' loop is 
as follows :
        for LOOPVARIABLE in SEQUENCE: 
            STATEMENTS
    '''e.g.''' to print all the data from a list we can write:
        for item in list_name
            print(item)
    OR
        for index in range(len(list_name))
            print(list_name[index])
    
    The syntax for while loop is as follows :
    
        while BOOLEANEXPRESSION: 
            STATEMENTS
            INCREMENT/DECREMENT
    
    '''e.g.''' if we want to print all numbers from 1 to 10
        i=1
        while i&lt;=10 :
            print(i,&quot; &quot;)
            i=i+1
    
    'while' loop has indefinite iteration (run-time unknown). So, there must be loop
 break statement in it.
 Whereas 'for' loop is definite in nature (i.e. known or predictable span).&lt;br&gt;

&lt;b&gt;NOTE: Python doesn't have anything like do-while loop.&lt;/b&gt;
&lt;/pre&gt;
[[#TOP]]

==Implementation==
Here, we try to demonstrate the concept of loops and conditionals through a game called Fizzbuzz. The rules are as follows :&lt;br/&gt;
[[File:fizzBuzz.gif]]

• if input number is a multiple of ’3’ print ”Fizz”
&lt;br/&gt;
• if input number is a multiple of ’5’ print ”Buzz”
&lt;br/&gt;
• if input number is a multiple of both '3' and ’5’ print ”FizzBuzz”
&lt;br/&gt;
The pseudo code is as follows :
&lt;pre&gt;
   If input no % 3 == 0 and  input no % 5 == 0 : 
       print ”Fizzbuzz”
   else if input no % 3 == 0 : 
       print ”Fizz”
   else if input no % 5 == 0 : 
       print ”Buzz”
   else :
       print the input no
&lt;/pre&gt;
The order of statements execution matters to get the desired output. The highest priority condition should be first followed by other. In fizzbuzz programming, first checking should be done for both divisibility of 3 and 5. If condition not satisfied only then it should check individually for 3 or 5. So carefully choosing the order is crucial for better programming.
Note: There is some effect of present condition statements chosen on next conditions statements. That is why in first attempt fizzbuzz programming got struck.

Example: 
&lt;pre&gt;
#Code to achieve the above requirement in python3.
i = int(input(&quot;Enter the number&quot;)) 
if i%3 == 0 and i%5 == 0: print(i,&quot;FizzBuzz&quot;)  
elif i%5 == 0: print(i,&quot;Buzz&quot;)
elif i%3 == 0: print(i,&quot;Fizz&quot;)
else: print(i)
&lt;/pre&gt;
Lets put the same into a loop for a range given by the user.
&lt;pre&gt;
def fizzbuzzgame(start,stop):
    for i in range(start,stop+1):
        if i%3 == 0 and i%5 == 0:
            print(i,&quot;FizzBuzz&quot;)
        elif i%5 == 0:
            print(i,&quot;Buzz&quot;)
        elif i%3 == 0:
            print(i,&quot;Fizz&quot;)
        else: print(i)

fizzbuzzgame(50,100)
&lt;/pre&gt;


=== Fizz Buzz game in Interactive mode with Score ===
'''By Ms. Ami Tusharkant Choksi'''
&lt;pre&gt;
def fizzbuzzgame(i):
        if i%3 == 0 and i%5 == 0:
            print(i,&quot;FizzBuzz&quot;)
            return(&quot;fzbz&quot;)
        elif i%5 == 0:
            print(i,&quot;Buzz&quot;)
            return(&quot;bz&quot;)
        elif i%3 == 0:
            print(i,&quot;Fizz&quot;)
            return(&quot;fz&quot;)
        else:
            print(i)
            return(&quot;no&quot;)

ch = 'y'
fizzbuzz=0
fizz=0
buzz=0
nothing=0
print(&quot;&quot;&quot;
 _____  ____  _____  _____  ____   __ __  _____  _____       ____   ____  ___ ___    ___ 
|     ||    ||     ||     ||    \ |  |  ||     ||     |     /    | /    ||   |   |  /  _]
|   __| |  | |__/  ||__/  ||  o  )|  |  ||__/  ||__/  |    |   __||  o  || _   _ | /  [_ 
|  |_   |  | |   __||   __||     ||  |  ||   __||   __|    |  |  ||     ||  \_/  ||    _]
|   _]  |  | |  /  ||  /  ||  O  ||  :  ||  /  ||  /  |    |  |_ ||  _  ||   |   ||   [_ 
|  |    |  | |     ||     ||     ||     ||     ||     |    |     ||  |  ||   |   ||     |
|__|   |____||_____||_____||_____| \__,_||_____||_____|    |___,_||__|__||___|___||_____|
                                                                                         
&quot;&quot;&quot;)   

while(ch == 'y'):
    n=int(input(&quot;Enter a Number : &quot;))
    winLoose=fizzbuzzgame(n)
    if(winLoose == &quot;fz&quot;):
        fizz+=1
    elif(winLoose == &quot;bz&quot;):
        buzz+=1
    elif(winLoose == &quot;fzbz&quot;):
        fizzbuzz+=1
    ch=input(&quot;Do you want to continue playing the game : (y/n)&quot;)
    if(ch=='n'):
        print('Congratulations, your score is\n FizzBuzz:%d\nFizz:%d\nBuzz:%d' %
(fizzbuzz,fizz,buzz))
    
'''Sample Output:

 _____  ____  _____  _____  ____   __ __  _____  _____       ____   ____  ___ ___    ___ 
|     ||    ||     ||     ||    \ |  |  ||     ||     |     /    | /    ||   |   |  /  _]
|   __| |  | |__/  ||__/  ||  o  )|  |  ||__/  ||__/  |    |   __||  o  || _   _ | /  [_ 
|  |_   |  | |   __||   __||     ||  |  ||   __||   __|    |  |  ||     ||  \_/  ||    _]
|   _]  |  | |  /  ||  /  ||  O  ||  :  ||  /  ||  /  |    |  |_ ||  _  ||   |   ||   [_ 
|  |    |  | |     ||     ||     ||     ||     ||     |    |     ||  |  ||   |   ||     |
|__|   |____||_____||_____||_____| \__,_||_____||_____|    |___,_||__|__||___|___||_____|
                                                                                         

Enter a Number : 666
666 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 777
777 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 555
555 FizzBuzz
Do you want to continue playing the game : (y/n)y
Enter a Number : 1
1
Do you want to continue playing the game : (y/n)y
Enter a Number : 789
789 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 25
25 Buzz
Do you want to continue playing the game : (y/n)n
Congratulations, your score is

FizzBuzz:1
Fizz:3
Buzz:1

&lt;/pre&gt;

=Crowd Computing: Just Estimate=
==Wisdom of Crowds==
The concept of ’Wisdom of Crowds’ was proposed by Francis Galton. A weight-judging competition was carried on at the annual show of the West of England Fat Stock and Poultry Exhibition recently held at Plymouth, A fat ox having been selected, competitors bought stamped and numbered cards, each, on which to inscribe their respective names, addresses, and estimates of what the ox would weigh after it had been slaughtered. Those who guessed most successfully received prizes. About 8oo tickets were issued to the par- ticipants. The middlemost estimate of all the estimates recorded was 1207 lbs and the actual weight of the ox was 1198 lbs.

==Our Experiment==
The crowd had to guess the number of candies/gems in a jar. Around 75 people participated in the experiment. The actual number of gems in the jar were 375. The median of all estimates came out to be 300 and the mean of all the estimates came out to be around 396. Median underestimated and mean overestimated the actual value. So according to recent studies, Trimmed mean must be used as an aggregate measure to estimate where Wisdom of Crowds is involved.
[[File:Gemsjar.jpg|center|200px|caption]]

===Trimmed Mean===
In these kinds of experiments, 10% trimmed mean is usually followed. For calculating 10% trimmed mean, remove 10% smallest and 10% largest values from the sample. Calculate the mean of the sample obtained. In the above experiment, the trimmed mean came out to be around 351 which is very close to the actual value.

==Implementation==
Here, we try to demonstrate the concept of trimmed mean through crowd computing.
 Input a list of estimates done by the crowd .
 Sort the list.
 Remove the 10% smallest values.
 Remove the 10% largest values.
 Calculate the mean of the new list obtained .&lt;hr&gt;

==Data of Experiment==       
    Estimates =[1000,1010,1786,2000,1500,1500,100,120,150,150,150,170,175,180,197,200,200,200,200,200,200,220,220,220,220,234,250,250,250,250,250,250,250,250,250,263,270,275,275,286,300,
                300,300,300,300,300,300,300,320,350,350,350,400, 400,400,400,400,450,467,500,500,500,500,500,500,500,550,550,600,600,600,650,700,700,720]

    '''CODE:'''
&lt;pre&gt;
Estimates = [1000,1010,1786,2000,1500,1500,100,120,150,150,150,170,175,180,197,200,200,200,200,200,200,220,220,220,220,234,250,250,250,250,250,250,250,250,250,263,270,275,275,286,300,                300,300,300,300,300,300,300,320,350,350,350,400,400,400,400,400,450,467,500,500,500,500,500,500,500,550,550,600,600,600,650,700,700,720]
Estimates.sort()
offset = int(0.10*len(Estimates))
for i in range(offset):
       del Estimates[0]
       del Estimates[-1]
Sum = 0    
for i in range(len(Estimates)):
       Sum += Estimates[i]
Mean_Value = Sum/len(Estimates)
print(&quot;Mean : &quot;, int(Mean_Value))
#Output:
Mean :  351
&lt;/pre&gt;
&lt;hr&gt;
==Trimmed Mean for the above example== 
&lt;h3&gt;Using scipy library&lt;/h3&gt;
&lt;pre&gt;
#import scipy to use the method of trim_mean
from scipy import stats
trimMean = stats.trim_mean(Estimates, 0.1) # Trim 10% at both ends
print(&quot;Trimmed Mean : &quot;,trimMean)
#Output:
Trimmed Mean :  335.1020408163265
&lt;/pre&gt;

&lt;h3&gt;Without using scipy library&lt;/h3&gt;
&lt;pre&gt;
#Trimmed mean with 10%
p=10/100
#sorted data
data=[2, 4, 6, 7, 11, 21, 81, 90, 105, 121]
n = len(data)
#Remove elements from both end
rem=int(n*p)
newData = data[rem:-rem]
mean = 0
for i in newData:
    mean += i
mean = int(mean/len(newData))
print(&quot;Trimmed mean : &quot;,mean)
#Output: Trimmed mean :  40
&lt;/pre&gt;
[[#Top]]

=Jumbled_Words Permutations: Jumbled Words=
==What are Permutations ?==
A permutation also called ordering of selected number of elements from a list denoted by nPr here we are choosing all elements of a list and so n=r&lt;br&gt;
nPr=n!/(n-r)!&lt;br&gt; as n=r
nPn=n!&lt;br&gt; which gives all possible arrangement of elements present in a list.

 For example, permutations of list [1,2,3] are [1,2,3], [1,3,2], [2,1,3], [2,3,1], 
[3,1,2], and [3,2,1]. 
The number of permutations of a list of elements nPn is given by n!. For example, there are 2! = 2 x 1 = 2 permutations of [1,2], namely [1,2] and [2,1], and 3! = 3 x 2 x 1 = 6 permutations of [1,2,3], as mentioned above.&lt;br/&gt;
[[File:Permutations.jpg]]

==Implementation==
Here, we try to demonstrate the concept of permutations through jumbled words. It is a two player game in which one person presents the other person a different permutation of the word in his mind. The other person has to guess the right word. If he guesses, the he wins otherwise he loses.
 Input an list of words.
 Randomly pick a word from the list of words .
 Shuffle this word and present it to the other player.
 if word guesses by the player is same as the one picked from list of w
     player wins
 else
     player loses

ALTERNATE CODE TO GENERATE THIS GAME:
&lt;pre&gt;
import random
p1=input(&quot;enter player 1 name:&quot;)
p2=input(&quot;enter player 2 name:&quot;)
l=[&quot;rainbow&quot;,&quot;computer&quot;,&quot;robot&quot;,&quot;butter&quot;,&quot;vegetable&quot;,&quot;science&quot;,&quot;correct&quot;]
c1=c2=a1=a2=f1=f2=0
k=1
i=3
def play():
    n=random.choice(l)        ##n=chooses a word from list l
    l1=[]
    for j in n:
       l1.append(j)      ##creates a list for word in n
    for t in range(len(l1)):
       p=random.choice(l1)     ##this randomly displays letters in the list
       print(p)
       l1.remove(p)          ##to avoid the repetition of a letter
    s=input(&quot;enter the word:&quot;)
    if(s==n):
        print(&quot;correct&quot;)
        return 1
    else:
        print(&quot;not correct&quot;)
        print(&quot;answer is&quot;,n)
        return 0
def stat():
     print(&quot;player 1:&quot;)
     print(&quot;score:&quot;,c1)
     print(&quot;answered:&quot;,a1)
     print(&quot;failed:&quot;,f1)
     print(&quot;.............&quot;)
     print(&quot;player 2:&quot;)
     print(&quot;score:&quot;,c2)
     print(&quot;answered:&quot;,a2)
     print(&quot;failed&quot;,f2)
     if(c1&gt;c2):
         print(p1,&quot; won over &quot;,p2)
     elif(c1==c2):
         print(&quot;draw game&quot;)
     else:
         print(p2,&quot; won over &quot;,p1) 
while(i!=4):
      if(i==3):
         if(k==1):
             print(&quot;player 1 turn&quot;)
             print(&quot;your jumbled word is:&quot;)
             k=k+1
             m=play()
             if(m==1):      ##if guessed answer is correct,then score and no.of answered count will be increased
                c1+=1
                a1+=1
             else:
                f1+=1       ##else count of no.of failed to answered will be incremented
         else:
             print(&quot;player 2 turn&quot;)
             print(&quot;your jumbled word is:&quot;)
             k=k-1
             m=play()
             if(m==1):
                c2=c2+1
                a2=a2+1
             else:
                f2=f2+1
       if(i==2):
             print(&quot;present status&quot;)
             stat()
       i=int(input(&quot;enter your choice  1.stop 2.status 3.continue&quot;))
       if(i==1):
             stat()
             i=i+3
&lt;/pre&gt;
&lt;hr&gt;
=== JumbledWord Simple Logic, In Short ===
[[File:jumbledWord.gif]]
&lt;hr&gt;
'''Logic to create a Jumbled Word'''
&lt;hr&gt;
&lt;pre&gt;
#Get Jumbled Word and print it Horizontally
import random

def getJumbledWord(b):
    jumble=''
    l1 = [ b[i] for i in range(0, len(b)) ]
    for t in range(len(l1)):
       p=random.choice(l1)     ##this randomly gets letters from the list      
       jumble=jumble+p       
       l1.remove(p)
    return jumble

b=input(&quot;Enter a word to make it jumbled : &quot;)
print(&quot;Jumbled Word : &quot;, getJumbledWord(b))
&lt;/pre&gt;
&lt;hr&gt;
'''Another Logic to create a Jumbled Word'''
&lt;hr&gt;
&lt;pre&gt;
b=input(&quot;Enter a word to make it jumbled : &quot;)

def getJumbledWord1(b):
    l1 = [ b[i] for i in range(0, len(b)) ]
    random.shuffle(l1)
    str1 = ''.join(l1)
    return str1

print(&quot;Jumbled Word : &quot;, getJumbledWord1(b))
&lt;/pre&gt;

====Sample Output:====
&lt;pre&gt;
---- Output1 
Enter a word to make it jumbled : butter
Jumbled Word :  tbture

---- Output2 
Enter a word to make it jumbled : petriotism
Jumbled Word :  pittrosime
&lt;/pre&gt;

=Theory of Evolution=

== What is Evolution ? ==
Evolution is the change in heritable characteristics over successive generations. The theory of evolution explains that DNA, which acts as a carrier of genetic information from one generation to other, tends to change or mutate occasionally. These changes are reflected in next generations to come. This is how life has evolved on earth from bacteria to human beings.&lt;br&gt;
[[File:Evolution.png|500px]]

== Implementation ==
&lt;pre&gt;An array representing DNA is stored in a file. As genes are forms of DNA, they contain information to be transferred to forthcoming generations. Assume that information is in the form of bits (in the form of 0s and 1s). A number is picked randomly from 1 to the size of the array. A new parameter has been introduced which decides whether mutation would occur or not. If the value of this new parameter is 1 (It is picked randomly from 1 to 100), then only change is reflected down the generations, otherwise it is not. The pseudo code is as follows :
Input an array containing genetic information .
Randomly generate a number (say m) from 1 to length of the array. Randomly generate other number (say p) from 1 to 100.
 
    if p is equal to 1 then 
        if m is 1 then
          set it to 0
        else
          set it to 1
&lt;/pre&gt;
[[#TOP]]</text>
      <sha1>qql6dof2cpke5g097d2c7cfvagateb6</sha1>
    </revision>
    <revision>
      <id>3552</id>
      <parentid>3550</parentid>
      <timestamp>2018-09-28T02:25:13Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* Length of the List */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="29473">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_3 Contributors of this page]
*Week 3 Playlist: https://www.youtube.com/playlist?list=PLc_j0TNIaWxOVx_z9jAM2UB3RqYNXaoEo
=List=
List is a flexible data structure used for storing a group of data separated by comma. The elements in a list need not be of the same data type.

'''Example:'''
       List_1 = [ 1, 2,3] or 
       List_1 = [&quot;coffee&quot;, &quot;Tea&quot;, &quot;Milk&quot;] or
       List_1 = [1,&quot;coffee&quot;, &quot;Tea&quot;, 3, &quot;5&quot;]

==List Creation==
&lt;pre&gt;a) A list can be created by simply putting values (separated by comma) between square brackets as given below,
       List_1 = [1,&quot;coffee&quot;, &quot;Tea&quot;, 3, &quot;5&quot;] #this creates a list by name List_1 containing following items


Or,
(b)A List can be created from scratch and elements can be added 
        List_2 = [ ]
        List_2.append(&quot;Kala&quot;)
        List_2.append(&quot;Mala&quot;)
Here we use &quot;append&quot; ,which is a function in python that enable us to append or attach an element to a list .
Thus List_2 will now hold [&quot;Kala&quot;,&quot;Mala&quot;]
&lt;/pre&gt;
[[#TOP]]

==Operations and Methods to work with List==
&lt;pre&gt;
a = [25,30,50,90,12,13]
b = [100,300,500,200,250]
&lt;/pre&gt;
&lt;hr&gt;
&lt;table border=2&gt;
  &lt;tr&gt;
    &lt;th&gt;&lt;b&gt;Method/&lt;br&gt;Operator&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Function&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Syntax&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Output&lt;/b&gt;&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;len()&lt;/td&gt;
    &lt;td&gt;Find length of a list&lt;/td&gt;
    &lt;td&gt;len(a)&lt;/td&gt;
    &lt;td&gt;6&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;max()&lt;/td&gt;
    &lt;td&gt;Find maximum element from the list&lt;/td&gt;
    &lt;td&gt;max(a)&lt;/td&gt;
    &lt;td&gt;90&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;min()&lt;/td&gt;
    &lt;td&gt;Find minimum element from the list&lt;/td&gt;
    &lt;td&gt;min(a)&lt;/td&gt;
    &lt;td&gt;12&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sum()&lt;/td&gt;
    &lt;td&gt;Returns sum of all elements of the list&lt;/td&gt;
    &lt;td&gt;sum(a)&lt;/td&gt;
    &lt;td&gt;220&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;reverse()&lt;/td&gt;
    &lt;td&gt;Reverses the original list&lt;/td&gt;
    &lt;td&gt;a.reverse()&lt;/td&gt;
    &lt;td&gt;[13, 12, 90, 50, 30, 25]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sort()&lt;/td&gt;
    &lt;td&gt;Sorts the original list in ascending order&lt;/td&gt;
    &lt;td&gt;a.sort()&lt;/td&gt;
    &lt;td&gt;[12, 13, 25, 30, 50, 90]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sorted()&lt;/td&gt;
    &lt;td&gt;Returns the new sorted list &lt;/td&gt;
    &lt;td&gt;sorted(a)&lt;/td&gt;
    &lt;td&gt;[12, 13, 25, 30, 50, 90]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;insert()&lt;/td&gt;
    &lt;td&gt;Insert at a particular index in the list, and shifts remaining elements&lt;/td&gt;
    &lt;td&gt;a.insert(3,3)&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 3, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;append()&lt;/td&gt;
    &lt;td&gt;Adds elements/object to the end of the list&lt;/td&gt;
    &lt;td&gt;a.append(5)&lt;br&gt;a.append([10,20])&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 5]&lt;br&gt;[25, 30, 50, 90, 12, 13, [10, 20]]&lt;br&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;extend()&lt;/td&gt;
    &lt;td&gt;Adds object to the end of the list as elements not as object&lt;/td&gt;
    &lt;td&gt;a.extend([10,20])&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 10, 20]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;*&amp;nbsp;&amp;nbsp;Repeatation&lt;br&gt;operator&lt;/td&gt;
    &lt;td&gt;Repeat the list for n times and returns a new list&lt;/td&gt;
    &lt;td&gt;a*2&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 25, 30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;+ Concatenation&lt;br&gt;operator&lt;/td&gt;
    &lt;td&gt;Concatenates two lists, and returns a new list&lt;/td&gt;
    &lt;td&gt;a+b&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 100, 300, 500, 200, 250]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;index()&lt;/td&gt;
    &lt;td&gt;Finds index of a particular element in the list or not&lt;/td&gt;
    &lt;td&gt;a.index(25)&lt;br&gt;a.index(0)&lt;br&gt;&lt;/td&gt;
    &lt;td&gt;0&lt;br&gt;&lt;br&gt;ValueError: 0 is not in list&lt;br&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;in operator&lt;/td&gt;
    &lt;td&gt;Finds whether a particular element is in the list or not, returns boolean&lt;/td&gt;
    &lt;td&gt;25 in a&lt;/td&gt;
    &lt;td&gt;True&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;not in operator&lt;/td&gt;
    &lt;td&gt;Checks if element is not available in list, returns boolean&lt;/td&gt;
    &lt;td&gt;25 not in a&lt;/td&gt;
    &lt;td&gt;False&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;count()&lt;/td&gt;
    &lt;td&gt;Counts the number of occurence of an element in the list&lt;/td&gt;
    &lt;td&gt;a.count(25)&lt;/td&gt;
    &lt;td&gt;1&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;remove()&lt;/td&gt;
    &lt;td&gt;Removes an element from the list&lt;/td&gt;
    &lt;td&gt;a.remove(25)&lt;/td&gt;
    &lt;td&gt; [30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;pop()&lt;/td&gt;
    &lt;td&gt;Delete and return item at index 0&lt;/td&gt;
    &lt;td&gt;a.pop(0)&lt;/td&gt;
    &lt;td&gt;25 , a will be [30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;del&lt;/td&gt;
    &lt;td&gt;Deletes item at a particular index from the list&lt;/td&gt;
    &lt;td&gt;del a[0]&lt;/td&gt;
    &lt;td&gt;[30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;all()&lt;/td&gt;
&lt;td&gt;Returns True, if all items in list are True or it is an empty list&lt;/td&gt;
&lt;td&gt;all([True, True, True])
all([])
&lt;/td&gt;
&lt;td&gt;True&lt;br&gt;
True&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;any()&lt;/td&gt;
&lt;td&gt;Returns True, if any item in list is True else return False&lt;/td&gt;
&lt;td&gt;any([True, True, True])&lt;br&gt;
any([True, False, True])&lt;br&gt;
any([])&lt;/td&gt;
&lt;td&gt;True&lt;br&gt;False&lt;br&gt;False&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;

==Printing the List==
=== Print whole list ===
A list can be printed simply or using a ''for / while'' loop 

 print(List_2)     # To print the entire list
This code will print      
 ['Kala','Mala']     

===Print element at a particular index===
&lt;pre&gt;
Using index position
    List_2[0]     # prints 'Kala' ,i.e,the value at index position 0.
    List_2[1]     # prints 'Mala'.
&lt;/pre&gt;
=== Without using index position ===
&lt;pre&gt;
for item in List_2:   # here item is a variable used to access elements in list.
       print(item)
   This code snippet prints 
    Kala
    Mala
&lt;/pre&gt;
[[#TOP]]

==Search for a particular element in list==
Elements in a list can be searched by one of the two ways:
=== using index() function===
&lt;pre&gt;
ages1 = [11,23,12,23,45]

#if element is available in the list, index() returns the index value on which, the element is present.
print(ages1.index(45))#Output: 4

#if element is not available in the list, index() returns ''ValueError''
print(ages1.index(0))#Output: ValueError:
&lt;/pre&gt;

In programming, if such error occurs, program gets terminated. It can be solved using exception handling.
e.g.
&lt;pre&gt;
ages1 = [11,23,12,23,45]

try:
    print(ages1.index(0))
except ValueError:
    print(&quot;Exception has occured&quot;)    
    print(&quot;Element is not found in the list&quot;)

&lt;/pre&gt;
&lt;pre&gt;
'''Output: 
Exception has occured
Element is not found in the list
'''&lt;/pre&gt;
[[#TOP]]

=== using 'in' operator===
''in'' operator is used to check whether a particular element is available in the list or not.e.g.

&lt;pre&gt;
ages1 = [11,23,12,23,45]
no=11

if no in ages1:
    print(&quot;no is there in the list&quot;)
else:    
    print(&quot;no is NOT there in the list&quot;)
&lt;/pre&gt;
&lt;pre&gt;
#Output: no is there in the list
&lt;/pre&gt;


'''Number is not there in the list'''
&lt;pre&gt;
ages1 = [11,23,12,23,45]
no=15

if no in ages1:
    print(&quot;no is there in the list&quot;)
else:    
    print(&quot;no is NOT there in the list&quot;)
&lt;/pre&gt;
&lt;pre&gt;
Output: no is NOT there in the list
&lt;/pre&gt;
[[#TOP]]

==Updating the List==
The lists can be updated using ''append'' or ''insert'' function.  Append adds the element to the end of the list and Insert adds the element in the specified position.
&lt;pre&gt;
   # add the element 'Sheela' to the end of the list.
   List_2.append(&quot;Sheela&quot;)    
   print (List_2) will output 
   ['Kala', 'Mala', 'Sheela']
&lt;/pre&gt;
   &lt;pre&gt;
# add the element &quot;Bala&quot; in the list at the index 1.
   List_2.insert(1,&quot;Bala&quot;)    
   print (List_2) will output 
   ['Kala', 'Bala','Mala', 'Sheela']
&lt;/pre&gt;

=== Extend the list by adding elements of other list at end using extend()===
&lt;pre&gt;
ages = [11,23,12,23,45]
ages.extend([57,58])
print(ages)
&lt;/pre&gt;

&lt;pre&gt;
#Output: [11, 23, 12, 23, 45, 57, 58]
&lt;/pre&gt;

==== Difference between ''append and extend'' ====
Difference between append and extend can be easily understood, by the following example.

&lt;pre&gt;
appendlist = [11,23,12,23,45]
appendlist.append([57,58])

extendlist= [11,23,12,23,45]
extendlist.extend([57,58])
&lt;/pre&gt;

&lt;pre&gt;
'''Output:
[11, 23, 12, 23, 45, [57, 58]]
[11, 23, 12, 23, 45, 57, 58]'''
&lt;/pre&gt;

[[#TOP]]

==Basic Operations on List==
===Frequency of Occurrence===
list.count(object) will return the number of times the object occur in the list.
  '''Example'''
    ages = [11,23,12,23,45,43,22,24,23]
    ages.count(23) will return
    3
    ages.count(100) will return
    0

===Length of the List===
len(list) will return the length of the list ie. the number of objects in the list.
  '''Example'''
&lt;pre&gt;
    ages = [11,23,12,23,45,43,22,24,23]
    len(ages) # Output: 9
&lt;/pre&gt;

To print the objects in the list either use ''for item in list'' or ''for index in range(len(list))''
    for item in ages:       
        print (item)  
        (OR)
    for index in range(len(ages)) :
        print (ages[index])

===Sort the List===
list.sort() will sort the list in ascending order
  '''Example'''
    ages = [11,23,12,23,45,43,22,24,23]
    ages.sort() 
    print (ages) 
    [11, 12, 22, 23, 23, 23, 24, 43, 45]

[[#TOP]]

===Sort the List using sorted() function===
sorted(list1) will sort the list and return a new list, it doesn't modify the original list
&lt;br&gt;'''Example: Sort in ascending order'''
&lt;pre&gt;
ages = [11,23,12,23,45,43,22,24,23]
newList=sorted(ages)
print(newList)

#Output: [11, 12, 22, 23, 23, 23, 24, 43, 45]
&lt;/pre&gt;

&lt;br&gt;'''Example: Sort in descending order'''
&lt;pre&gt;
ages = [11,23,12,23,45,43,22,24,23]
newList=sorted(ages,reverse=True)
print(newList)

#Output: [45, 43, 24, 23, 23, 23, 22, 12, 11]
&lt;/pre&gt;

===Reverse the List===
list.reverse() will reverse the original list
  '''Example'''
    ages = [11, 12, 22, 23, 23, 23, 24, 43, 45]
    ages.reverse()
    print (ages)
    [45, 43, 24, 23, 23, 23, 22, 12, 11]

Both sort() and reverse() list operation will work on numeric and alphanumeric data list.

A special use of the reverse() function is to descend a list that is sorted in ascending order.

  '''Example'''
&lt;pre&gt;
ages = [11, 12, 22, 23, 23, 23, 24, 43, 45]
ages.sort()
print(ages)
ages.reverse()
print(ages)
&lt;/pre&gt;

===Slicing===
Used to retrieve an object or objects in a range as a list  
  '''Example'''
Use ''list[index]'' to retrieve the object at the given index
         In [1]: student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
         In [2]: student[3]     #Object at index 3.  Remember index starts at 0
         Out[2]: 'Geetha'      


Use ''list[start_index : end_index + 1]'' to retrieve objects from the start_index to end_index 
         In [3]: student[2:4]     # Objects from index 2 to 3 as List. Note the [ and ]
         Out[3]: ['Vijay', 'Geetha']   


Use ''list[:]'' to retrieve objects from the starting of the list to the end of the list. 
The default start value will be the starting index of the list (i.e. 0) and the default end value
will be the length of the list 
         In [4]: student[:]        # prints the entire list
         Out[4]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma', 'Janani']


         In [5]: student[:5]       # prints the objects from the start of the list upto object at index 4
         Out[5]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran']


         In [6]: student[2:]       # prints the objects from index 2 upto the end of the list
         Out[6]: ['Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma', 'Janani']


Negative index too is available in Python. It starts from last element of the list. i.e.

         In [7]:student[-1]        #prints last index of list
         Out[7]: 'Janani'


         In [8]:student[-1:-8]     #prints empty list
         Out[8]: []


         In [9]:student[-8:-1]     #prints -8th index to -1st index elements
         Out[9]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma']

[[#TOP]]
===Removing Item from list ===
----

Is used to remove a specific item from the list.

'''Example:'''
 
Use list.remove(entry/value)  Or   del list[index]    Or list.pop(index)
         student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
         student.remove(&quot;Arun&quot;)   #This will delete item &quot;Arun&quot;
         Or    
         del student[0]           # This will delete item at index 0
         Or
         student.pop(0)         # This will delete and return item at index 0


         print(student)    
         Output: [&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]

[[#TOP]]
===Delete list ===
----
Used to delete complete list

'''Example'''

Use del &lt;list name&gt;
         student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
         del student

===Concatenation of two lists===
----
''+'' is the concatenation operator which is used concatenate two lists. 
&lt;pre&gt;
ages1 = [11,23,12,23,45]
ages2 = [25, 24, 43, 47]
age=ages1+ages2
print(age)
#Output: [11, 23, 12, 23, 45, 25, 24, 43, 47]
&lt;/pre&gt;

===Repeatation of a list ===
----
''*'' is the operator to repeat a particular list.
&lt;pre&gt;
ages1 = [11,23,12,23,45]
age=ages1*5 #ages1 list is repeated 5 times and stroed in ''age'' list
print(age)

#Output: [11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45]
&lt;/pre&gt;

=== all and any for List===
all() and any() are special functions to check whether all elements in iterable is ''True'' or any element is ''True''
&lt;ol&gt;
&lt;li&gt;If all elements in a list are ''True'', '''all()''' will return ''True''&lt;/li&gt;
&lt;li&gt;If iterable is ''empty'', '''all()''' will return ''True''&lt;/li&gt;
&lt;li&gt;If iterable contains at least one ''True'', '''any()''' will return ''True''&lt;/li&gt;
&lt;li&gt;If iterable is ''empty'', '''any()''' will return ''False''&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;
lsit=[True, True, True, True]
print(all(lsit))#Output: True
print(any(lsit))#Output: True

lsit1=[True, False, True, True]
print(all(lsit1))#Output: False
print(any(lsit1))#Output: True

lsit2=[False,False,False]
print(all(lsit2))#Output: False
print(any(lsit2))#Output: False

lsit3=[]
print(all(lsit3))#Output: True
print(any(lsit3))#Output: False
&lt;/pre&gt;

==Conditional Statements==
&lt;pre&gt;Conditionals are used to check the condition and change the flow of the program 
accordingly. They are realized in programming languages through if statement. The 
syntax is as follows :
         if condition : 
            statement
    '''Note:''' Do not forget indentation (inserting space/tab) in the line after the
 if condition.
    
    In case you want to execute a set of statements when a condition is true and another

set of statement when the condition is false.
         if condition : 
            statement 1
         else :
            statement 2
    
    Multiple if-else statements can be written as follows:
         if condition_1 : 
            statement 1
         elif condition_2 : # 'elif' is short for 'else if'
            statement 2
         elif condition_3 :
            statement 3
        .
        .
         else :
            final statement
&lt;/pre&gt;
[[#TOP]]

=Loops and Conditionals : Fizzbuzz=
====Loops====
&lt;pre&gt;
Loops are used to execute a set of repetitive statements. They are realized
through 'while' and 'for' loops in programming languages. The syntax of 'for' loop is 
as follows :
        for LOOPVARIABLE in SEQUENCE: 
            STATEMENTS
    '''e.g.''' to print all the data from a list we can write:
        for item in list_name
            print(item)
    OR
        for index in range(len(list_name))
            print(list_name[index])
    
    The syntax for while loop is as follows :
    
        while BOOLEANEXPRESSION: 
            STATEMENTS
            INCREMENT/DECREMENT
    
    '''e.g.''' if we want to print all numbers from 1 to 10
        i=1
        while i&lt;=10 :
            print(i,&quot; &quot;)
            i=i+1
    
    'while' loop has indefinite iteration (run-time unknown). So, there must be loop
 break statement in it.
 Whereas 'for' loop is definite in nature (i.e. known or predictable span).&lt;br&gt;

&lt;b&gt;NOTE: Python doesn't have anything like do-while loop.&lt;/b&gt;
&lt;/pre&gt;
[[#TOP]]

==Implementation==
Here, we try to demonstrate the concept of loops and conditionals through a game called Fizzbuzz. The rules are as follows :&lt;br/&gt;
[[File:fizzBuzz.gif]]

• if input number is a multiple of ’3’ print ”Fizz”
&lt;br/&gt;
• if input number is a multiple of ’5’ print ”Buzz”
&lt;br/&gt;
• if input number is a multiple of both '3' and ’5’ print ”FizzBuzz”
&lt;br/&gt;
The pseudo code is as follows :
&lt;pre&gt;
   If input no % 3 == 0 and  input no % 5 == 0 : 
       print ”Fizzbuzz”
   else if input no % 3 == 0 : 
       print ”Fizz”
   else if input no % 5 == 0 : 
       print ”Buzz”
   else :
       print the input no
&lt;/pre&gt;
The order of statements execution matters to get the desired output. The highest priority condition should be first followed by other. In fizzbuzz programming, first checking should be done for both divisibility of 3 and 5. If condition not satisfied only then it should check individually for 3 or 5. So carefully choosing the order is crucial for better programming.
Note: There is some effect of present condition statements chosen on next conditions statements. That is why in first attempt fizzbuzz programming got struck.

Example: 
&lt;pre&gt;
#Code to achieve the above requirement in python3.
i = int(input(&quot;Enter the number&quot;)) 
if i%3 == 0 and i%5 == 0: print(i,&quot;FizzBuzz&quot;)  
elif i%5 == 0: print(i,&quot;Buzz&quot;)
elif i%3 == 0: print(i,&quot;Fizz&quot;)
else: print(i)
&lt;/pre&gt;
Lets put the same into a loop for a range given by the user.
&lt;pre&gt;
def fizzbuzzgame(start,stop):
    for i in range(start,stop+1):
        if i%3 == 0 and i%5 == 0:
            print(i,&quot;FizzBuzz&quot;)
        elif i%5 == 0:
            print(i,&quot;Buzz&quot;)
        elif i%3 == 0:
            print(i,&quot;Fizz&quot;)
        else: print(i)

fizzbuzzgame(50,100)
&lt;/pre&gt;


=== Fizz Buzz game in Interactive mode with Score ===
'''By Ms. Ami Tusharkant Choksi'''
&lt;pre&gt;
def fizzbuzzgame(i):
        if i%3 == 0 and i%5 == 0:
            print(i,&quot;FizzBuzz&quot;)
            return(&quot;fzbz&quot;)
        elif i%5 == 0:
            print(i,&quot;Buzz&quot;)
            return(&quot;bz&quot;)
        elif i%3 == 0:
            print(i,&quot;Fizz&quot;)
            return(&quot;fz&quot;)
        else:
            print(i)
            return(&quot;no&quot;)

ch = 'y'
fizzbuzz=0
fizz=0
buzz=0
nothing=0
print(&quot;&quot;&quot;
 _____  ____  _____  _____  ____   __ __  _____  _____       ____   ____  ___ ___    ___ 
|     ||    ||     ||     ||    \ |  |  ||     ||     |     /    | /    ||   |   |  /  _]
|   __| |  | |__/  ||__/  ||  o  )|  |  ||__/  ||__/  |    |   __||  o  || _   _ | /  [_ 
|  |_   |  | |   __||   __||     ||  |  ||   __||   __|    |  |  ||     ||  \_/  ||    _]
|   _]  |  | |  /  ||  /  ||  O  ||  :  ||  /  ||  /  |    |  |_ ||  _  ||   |   ||   [_ 
|  |    |  | |     ||     ||     ||     ||     ||     |    |     ||  |  ||   |   ||     |
|__|   |____||_____||_____||_____| \__,_||_____||_____|    |___,_||__|__||___|___||_____|
                                                                                         
&quot;&quot;&quot;)   

while(ch == 'y'):
    n=int(input(&quot;Enter a Number : &quot;))
    winLoose=fizzbuzzgame(n)
    if(winLoose == &quot;fz&quot;):
        fizz+=1
    elif(winLoose == &quot;bz&quot;):
        buzz+=1
    elif(winLoose == &quot;fzbz&quot;):
        fizzbuzz+=1
    ch=input(&quot;Do you want to continue playing the game : (y/n)&quot;)
    if(ch=='n'):
        print('Congratulations, your score is\n FizzBuzz:%d\nFizz:%d\nBuzz:%d' %
(fizzbuzz,fizz,buzz))
    
'''Sample Output:

 _____  ____  _____  _____  ____   __ __  _____  _____       ____   ____  ___ ___    ___ 
|     ||    ||     ||     ||    \ |  |  ||     ||     |     /    | /    ||   |   |  /  _]
|   __| |  | |__/  ||__/  ||  o  )|  |  ||__/  ||__/  |    |   __||  o  || _   _ | /  [_ 
|  |_   |  | |   __||   __||     ||  |  ||   __||   __|    |  |  ||     ||  \_/  ||    _]
|   _]  |  | |  /  ||  /  ||  O  ||  :  ||  /  ||  /  |    |  |_ ||  _  ||   |   ||   [_ 
|  |    |  | |     ||     ||     ||     ||     ||     |    |     ||  |  ||   |   ||     |
|__|   |____||_____||_____||_____| \__,_||_____||_____|    |___,_||__|__||___|___||_____|
                                                                                         

Enter a Number : 666
666 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 777
777 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 555
555 FizzBuzz
Do you want to continue playing the game : (y/n)y
Enter a Number : 1
1
Do you want to continue playing the game : (y/n)y
Enter a Number : 789
789 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 25
25 Buzz
Do you want to continue playing the game : (y/n)n
Congratulations, your score is

FizzBuzz:1
Fizz:3
Buzz:1

&lt;/pre&gt;

=Crowd Computing: Just Estimate=
==Wisdom of Crowds==
The concept of ’Wisdom of Crowds’ was proposed by Francis Galton. A weight-judging competition was carried on at the annual show of the West of England Fat Stock and Poultry Exhibition recently held at Plymouth, A fat ox having been selected, competitors bought stamped and numbered cards, each, on which to inscribe their respective names, addresses, and estimates of what the ox would weigh after it had been slaughtered. Those who guessed most successfully received prizes. About 8oo tickets were issued to the par- ticipants. The middlemost estimate of all the estimates recorded was 1207 lbs and the actual weight of the ox was 1198 lbs.

==Our Experiment==
The crowd had to guess the number of candies/gems in a jar. Around 75 people participated in the experiment. The actual number of gems in the jar were 375. The median of all estimates came out to be 300 and the mean of all the estimates came out to be around 396. Median underestimated and mean overestimated the actual value. So according to recent studies, Trimmed mean must be used as an aggregate measure to estimate where Wisdom of Crowds is involved.
[[File:Gemsjar.jpg|center|200px|caption]]

===Trimmed Mean===
In these kinds of experiments, 10% trimmed mean is usually followed. For calculating 10% trimmed mean, remove 10% smallest and 10% largest values from the sample. Calculate the mean of the sample obtained. In the above experiment, the trimmed mean came out to be around 351 which is very close to the actual value.

==Implementation==
Here, we try to demonstrate the concept of trimmed mean through crowd computing.
 Input a list of estimates done by the crowd .
 Sort the list.
 Remove the 10% smallest values.
 Remove the 10% largest values.
 Calculate the mean of the new list obtained .&lt;hr&gt;

==Data of Experiment==       
    Estimates =[1000,1010,1786,2000,1500,1500,100,120,150,150,150,170,175,180,197,200,200,200,200,200,200,220,220,220,220,234,250,250,250,250,250,250,250,250,250,263,270,275,275,286,300,
                300,300,300,300,300,300,300,320,350,350,350,400, 400,400,400,400,450,467,500,500,500,500,500,500,500,550,550,600,600,600,650,700,700,720]

    '''CODE:'''
&lt;pre&gt;
Estimates = [1000,1010,1786,2000,1500,1500,100,120,150,150,150,170,175,180,197,200,200,200,200,200,200,220,220,220,220,234,250,250,250,250,250,250,250,250,250,263,270,275,275,286,300,                300,300,300,300,300,300,300,320,350,350,350,400,400,400,400,400,450,467,500,500,500,500,500,500,500,550,550,600,600,600,650,700,700,720]
Estimates.sort()
offset = int(0.10*len(Estimates))
for i in range(offset):
       del Estimates[0]
       del Estimates[-1]
Sum = 0    
for i in range(len(Estimates)):
       Sum += Estimates[i]
Mean_Value = Sum/len(Estimates)
print(&quot;Mean : &quot;, int(Mean_Value))
#Output:
Mean :  351
&lt;/pre&gt;
&lt;hr&gt;
==Trimmed Mean for the above example== 
&lt;h3&gt;Using scipy library&lt;/h3&gt;
&lt;pre&gt;
#import scipy to use the method of trim_mean
from scipy import stats
trimMean = stats.trim_mean(Estimates, 0.1) # Trim 10% at both ends
print(&quot;Trimmed Mean : &quot;,trimMean)
#Output:
Trimmed Mean :  335.1020408163265
&lt;/pre&gt;

&lt;h3&gt;Without using scipy library&lt;/h3&gt;
&lt;pre&gt;
#Trimmed mean with 10%
p=10/100
#sorted data
data=[2, 4, 6, 7, 11, 21, 81, 90, 105, 121]
n = len(data)
#Remove elements from both end
rem=int(n*p)
newData = data[rem:-rem]
mean = 0
for i in newData:
    mean += i
mean = int(mean/len(newData))
print(&quot;Trimmed mean : &quot;,mean)
#Output: Trimmed mean :  40
&lt;/pre&gt;
[[#Top]]

=Jumbled_Words Permutations: Jumbled Words=
==What are Permutations ?==
A permutation also called ordering of selected number of elements from a list denoted by nPr here we are choosing all elements of a list and so n=r&lt;br&gt;
nPr=n!/(n-r)!&lt;br&gt; as n=r
nPn=n!&lt;br&gt; which gives all possible arrangement of elements present in a list.

 For example, permutations of list [1,2,3] are [1,2,3], [1,3,2], [2,1,3], [2,3,1], 
[3,1,2], and [3,2,1]. 
The number of permutations of a list of elements nPn is given by n!. For example, there are 2! = 2 x 1 = 2 permutations of [1,2], namely [1,2] and [2,1], and 3! = 3 x 2 x 1 = 6 permutations of [1,2,3], as mentioned above.&lt;br/&gt;
[[File:Permutations.jpg]]

==Implementation==
Here, we try to demonstrate the concept of permutations through jumbled words. It is a two player game in which one person presents the other person a different permutation of the word in his mind. The other person has to guess the right word. If he guesses, the he wins otherwise he loses.
 Input an list of words.
 Randomly pick a word from the list of words .
 Shuffle this word and present it to the other player.
 if word guesses by the player is same as the one picked from list of w
     player wins
 else
     player loses

ALTERNATE CODE TO GENERATE THIS GAME:
&lt;pre&gt;
import random
p1=input(&quot;enter player 1 name:&quot;)
p2=input(&quot;enter player 2 name:&quot;)
l=[&quot;rainbow&quot;,&quot;computer&quot;,&quot;robot&quot;,&quot;butter&quot;,&quot;vegetable&quot;,&quot;science&quot;,&quot;correct&quot;]
c1=c2=a1=a2=f1=f2=0
k=1
i=3
def play():
    n=random.choice(l)        ##n=chooses a word from list l
    l1=[]
    for j in n:
       l1.append(j)      ##creates a list for word in n
    for t in range(len(l1)):
       p=random.choice(l1)     ##this randomly displays letters in the list
       print(p)
       l1.remove(p)          ##to avoid the repetition of a letter
    s=input(&quot;enter the word:&quot;)
    if(s==n):
        print(&quot;correct&quot;)
        return 1
    else:
        print(&quot;not correct&quot;)
        print(&quot;answer is&quot;,n)
        return 0
def stat():
     print(&quot;player 1:&quot;)
     print(&quot;score:&quot;,c1)
     print(&quot;answered:&quot;,a1)
     print(&quot;failed:&quot;,f1)
     print(&quot;.............&quot;)
     print(&quot;player 2:&quot;)
     print(&quot;score:&quot;,c2)
     print(&quot;answered:&quot;,a2)
     print(&quot;failed&quot;,f2)
     if(c1&gt;c2):
         print(p1,&quot; won over &quot;,p2)
     elif(c1==c2):
         print(&quot;draw game&quot;)
     else:
         print(p2,&quot; won over &quot;,p1) 
while(i!=4):
      if(i==3):
         if(k==1):
             print(&quot;player 1 turn&quot;)
             print(&quot;your jumbled word is:&quot;)
             k=k+1
             m=play()
             if(m==1):      ##if guessed answer is correct,then score and no.of answered count will be increased
                c1+=1
                a1+=1
             else:
                f1+=1       ##else count of no.of failed to answered will be incremented
         else:
             print(&quot;player 2 turn&quot;)
             print(&quot;your jumbled word is:&quot;)
             k=k-1
             m=play()
             if(m==1):
                c2=c2+1
                a2=a2+1
             else:
                f2=f2+1
       if(i==2):
             print(&quot;present status&quot;)
             stat()
       i=int(input(&quot;enter your choice  1.stop 2.status 3.continue&quot;))
       if(i==1):
             stat()
             i=i+3
&lt;/pre&gt;
&lt;hr&gt;
=== JumbledWord Simple Logic, In Short ===
[[File:jumbledWord.gif]]
&lt;hr&gt;
'''Logic to create a Jumbled Word'''
&lt;hr&gt;
&lt;pre&gt;
#Get Jumbled Word and print it Horizontally
import random

def getJumbledWord(b):
    jumble=''
    l1 = [ b[i] for i in range(0, len(b)) ]
    for t in range(len(l1)):
       p=random.choice(l1)     ##this randomly gets letters from the list      
       jumble=jumble+p       
       l1.remove(p)
    return jumble

b=input(&quot;Enter a word to make it jumbled : &quot;)
print(&quot;Jumbled Word : &quot;, getJumbledWord(b))
&lt;/pre&gt;
&lt;hr&gt;
'''Another Logic to create a Jumbled Word'''
&lt;hr&gt;
&lt;pre&gt;
b=input(&quot;Enter a word to make it jumbled : &quot;)

def getJumbledWord1(b):
    l1 = [ b[i] for i in range(0, len(b)) ]
    random.shuffle(l1)
    str1 = ''.join(l1)
    return str1

print(&quot;Jumbled Word : &quot;, getJumbledWord1(b))
&lt;/pre&gt;

====Sample Output:====
&lt;pre&gt;
---- Output1 
Enter a word to make it jumbled : butter
Jumbled Word :  tbture

---- Output2 
Enter a word to make it jumbled : petriotism
Jumbled Word :  pittrosime
&lt;/pre&gt;

=Theory of Evolution=

== What is Evolution ? ==
Evolution is the change in heritable characteristics over successive generations. The theory of evolution explains that DNA, which acts as a carrier of genetic information from one generation to other, tends to change or mutate occasionally. These changes are reflected in next generations to come. This is how life has evolved on earth from bacteria to human beings.&lt;br&gt;
[[File:Evolution.png|500px]]

== Implementation ==
&lt;pre&gt;An array representing DNA is stored in a file. As genes are forms of DNA, they contain information to be transferred to forthcoming generations. Assume that information is in the form of bits (in the form of 0s and 1s). A number is picked randomly from 1 to the size of the array. A new parameter has been introduced which decides whether mutation would occur or not. If the value of this new parameter is 1 (It is picked randomly from 1 to 100), then only change is reflected down the generations, otherwise it is not. The pseudo code is as follows :
Input an array containing genetic information .
Randomly generate a number (say m) from 1 to length of the array. Randomly generate other number (say p) from 1 to 100.
 
    if p is equal to 1 then 
        if m is 1 then
          set it to 0
        else
          set it to 1
&lt;/pre&gt;
[[#TOP]]</text>
      <sha1>h9jkse8egxll4c5f7vkmexk0opw07i2</sha1>
    </revision>
    <revision>
      <id>3553</id>
      <parentid>3552</parentid>
      <timestamp>2018-09-28T02:25:42Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* Length of the List */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="29486">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_3 Contributors of this page]
*Week 3 Playlist: https://www.youtube.com/playlist?list=PLc_j0TNIaWxOVx_z9jAM2UB3RqYNXaoEo
=List=
List is a flexible data structure used for storing a group of data separated by comma. The elements in a list need not be of the same data type.

'''Example:'''
       List_1 = [ 1, 2,3] or 
       List_1 = [&quot;coffee&quot;, &quot;Tea&quot;, &quot;Milk&quot;] or
       List_1 = [1,&quot;coffee&quot;, &quot;Tea&quot;, 3, &quot;5&quot;]

==List Creation==
&lt;pre&gt;a) A list can be created by simply putting values (separated by comma) between square brackets as given below,
       List_1 = [1,&quot;coffee&quot;, &quot;Tea&quot;, 3, &quot;5&quot;] #this creates a list by name List_1 containing following items


Or,
(b)A List can be created from scratch and elements can be added 
        List_2 = [ ]
        List_2.append(&quot;Kala&quot;)
        List_2.append(&quot;Mala&quot;)
Here we use &quot;append&quot; ,which is a function in python that enable us to append or attach an element to a list .
Thus List_2 will now hold [&quot;Kala&quot;,&quot;Mala&quot;]
&lt;/pre&gt;
[[#TOP]]

==Operations and Methods to work with List==
&lt;pre&gt;
a = [25,30,50,90,12,13]
b = [100,300,500,200,250]
&lt;/pre&gt;
&lt;hr&gt;
&lt;table border=2&gt;
  &lt;tr&gt;
    &lt;th&gt;&lt;b&gt;Method/&lt;br&gt;Operator&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Function&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Syntax&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Output&lt;/b&gt;&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;len()&lt;/td&gt;
    &lt;td&gt;Find length of a list&lt;/td&gt;
    &lt;td&gt;len(a)&lt;/td&gt;
    &lt;td&gt;6&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;max()&lt;/td&gt;
    &lt;td&gt;Find maximum element from the list&lt;/td&gt;
    &lt;td&gt;max(a)&lt;/td&gt;
    &lt;td&gt;90&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;min()&lt;/td&gt;
    &lt;td&gt;Find minimum element from the list&lt;/td&gt;
    &lt;td&gt;min(a)&lt;/td&gt;
    &lt;td&gt;12&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sum()&lt;/td&gt;
    &lt;td&gt;Returns sum of all elements of the list&lt;/td&gt;
    &lt;td&gt;sum(a)&lt;/td&gt;
    &lt;td&gt;220&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;reverse()&lt;/td&gt;
    &lt;td&gt;Reverses the original list&lt;/td&gt;
    &lt;td&gt;a.reverse()&lt;/td&gt;
    &lt;td&gt;[13, 12, 90, 50, 30, 25]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sort()&lt;/td&gt;
    &lt;td&gt;Sorts the original list in ascending order&lt;/td&gt;
    &lt;td&gt;a.sort()&lt;/td&gt;
    &lt;td&gt;[12, 13, 25, 30, 50, 90]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sorted()&lt;/td&gt;
    &lt;td&gt;Returns the new sorted list &lt;/td&gt;
    &lt;td&gt;sorted(a)&lt;/td&gt;
    &lt;td&gt;[12, 13, 25, 30, 50, 90]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;insert()&lt;/td&gt;
    &lt;td&gt;Insert at a particular index in the list, and shifts remaining elements&lt;/td&gt;
    &lt;td&gt;a.insert(3,3)&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 3, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;append()&lt;/td&gt;
    &lt;td&gt;Adds elements/object to the end of the list&lt;/td&gt;
    &lt;td&gt;a.append(5)&lt;br&gt;a.append([10,20])&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 5]&lt;br&gt;[25, 30, 50, 90, 12, 13, [10, 20]]&lt;br&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;extend()&lt;/td&gt;
    &lt;td&gt;Adds object to the end of the list as elements not as object&lt;/td&gt;
    &lt;td&gt;a.extend([10,20])&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 10, 20]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;*&amp;nbsp;&amp;nbsp;Repeatation&lt;br&gt;operator&lt;/td&gt;
    &lt;td&gt;Repeat the list for n times and returns a new list&lt;/td&gt;
    &lt;td&gt;a*2&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 25, 30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;+ Concatenation&lt;br&gt;operator&lt;/td&gt;
    &lt;td&gt;Concatenates two lists, and returns a new list&lt;/td&gt;
    &lt;td&gt;a+b&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 100, 300, 500, 200, 250]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;index()&lt;/td&gt;
    &lt;td&gt;Finds index of a particular element in the list or not&lt;/td&gt;
    &lt;td&gt;a.index(25)&lt;br&gt;a.index(0)&lt;br&gt;&lt;/td&gt;
    &lt;td&gt;0&lt;br&gt;&lt;br&gt;ValueError: 0 is not in list&lt;br&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;in operator&lt;/td&gt;
    &lt;td&gt;Finds whether a particular element is in the list or not, returns boolean&lt;/td&gt;
    &lt;td&gt;25 in a&lt;/td&gt;
    &lt;td&gt;True&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;not in operator&lt;/td&gt;
    &lt;td&gt;Checks if element is not available in list, returns boolean&lt;/td&gt;
    &lt;td&gt;25 not in a&lt;/td&gt;
    &lt;td&gt;False&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;count()&lt;/td&gt;
    &lt;td&gt;Counts the number of occurence of an element in the list&lt;/td&gt;
    &lt;td&gt;a.count(25)&lt;/td&gt;
    &lt;td&gt;1&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;remove()&lt;/td&gt;
    &lt;td&gt;Removes an element from the list&lt;/td&gt;
    &lt;td&gt;a.remove(25)&lt;/td&gt;
    &lt;td&gt; [30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;pop()&lt;/td&gt;
    &lt;td&gt;Delete and return item at index 0&lt;/td&gt;
    &lt;td&gt;a.pop(0)&lt;/td&gt;
    &lt;td&gt;25 , a will be [30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;del&lt;/td&gt;
    &lt;td&gt;Deletes item at a particular index from the list&lt;/td&gt;
    &lt;td&gt;del a[0]&lt;/td&gt;
    &lt;td&gt;[30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;all()&lt;/td&gt;
&lt;td&gt;Returns True, if all items in list are True or it is an empty list&lt;/td&gt;
&lt;td&gt;all([True, True, True])
all([])
&lt;/td&gt;
&lt;td&gt;True&lt;br&gt;
True&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;any()&lt;/td&gt;
&lt;td&gt;Returns True, if any item in list is True else return False&lt;/td&gt;
&lt;td&gt;any([True, True, True])&lt;br&gt;
any([True, False, True])&lt;br&gt;
any([])&lt;/td&gt;
&lt;td&gt;True&lt;br&gt;False&lt;br&gt;False&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;

==Printing the List==
=== Print whole list ===
A list can be printed simply or using a ''for / while'' loop 

 print(List_2)     # To print the entire list
This code will print      
 ['Kala','Mala']     

===Print element at a particular index===
&lt;pre&gt;
Using index position
    List_2[0]     # prints 'Kala' ,i.e,the value at index position 0.
    List_2[1]     # prints 'Mala'.
&lt;/pre&gt;
=== Without using index position ===
&lt;pre&gt;
for item in List_2:   # here item is a variable used to access elements in list.
       print(item)
   This code snippet prints 
    Kala
    Mala
&lt;/pre&gt;
[[#TOP]]

==Search for a particular element in list==
Elements in a list can be searched by one of the two ways:
=== using index() function===
&lt;pre&gt;
ages1 = [11,23,12,23,45]

#if element is available in the list, index() returns the index value on which, the element is present.
print(ages1.index(45))#Output: 4

#if element is not available in the list, index() returns ''ValueError''
print(ages1.index(0))#Output: ValueError:
&lt;/pre&gt;

In programming, if such error occurs, program gets terminated. It can be solved using exception handling.
e.g.
&lt;pre&gt;
ages1 = [11,23,12,23,45]

try:
    print(ages1.index(0))
except ValueError:
    print(&quot;Exception has occured&quot;)    
    print(&quot;Element is not found in the list&quot;)

&lt;/pre&gt;
&lt;pre&gt;
'''Output: 
Exception has occured
Element is not found in the list
'''&lt;/pre&gt;
[[#TOP]]

=== using 'in' operator===
''in'' operator is used to check whether a particular element is available in the list or not.e.g.

&lt;pre&gt;
ages1 = [11,23,12,23,45]
no=11

if no in ages1:
    print(&quot;no is there in the list&quot;)
else:    
    print(&quot;no is NOT there in the list&quot;)
&lt;/pre&gt;
&lt;pre&gt;
#Output: no is there in the list
&lt;/pre&gt;


'''Number is not there in the list'''
&lt;pre&gt;
ages1 = [11,23,12,23,45]
no=15

if no in ages1:
    print(&quot;no is there in the list&quot;)
else:    
    print(&quot;no is NOT there in the list&quot;)
&lt;/pre&gt;
&lt;pre&gt;
Output: no is NOT there in the list
&lt;/pre&gt;
[[#TOP]]

==Updating the List==
The lists can be updated using ''append'' or ''insert'' function.  Append adds the element to the end of the list and Insert adds the element in the specified position.
&lt;pre&gt;
   # add the element 'Sheela' to the end of the list.
   List_2.append(&quot;Sheela&quot;)    
   print (List_2) will output 
   ['Kala', 'Mala', 'Sheela']
&lt;/pre&gt;
   &lt;pre&gt;
# add the element &quot;Bala&quot; in the list at the index 1.
   List_2.insert(1,&quot;Bala&quot;)    
   print (List_2) will output 
   ['Kala', 'Bala','Mala', 'Sheela']
&lt;/pre&gt;

=== Extend the list by adding elements of other list at end using extend()===
&lt;pre&gt;
ages = [11,23,12,23,45]
ages.extend([57,58])
print(ages)
&lt;/pre&gt;

&lt;pre&gt;
#Output: [11, 23, 12, 23, 45, 57, 58]
&lt;/pre&gt;

==== Difference between ''append and extend'' ====
Difference between append and extend can be easily understood, by the following example.

&lt;pre&gt;
appendlist = [11,23,12,23,45]
appendlist.append([57,58])

extendlist= [11,23,12,23,45]
extendlist.extend([57,58])
&lt;/pre&gt;

&lt;pre&gt;
'''Output:
[11, 23, 12, 23, 45, [57, 58]]
[11, 23, 12, 23, 45, 57, 58]'''
&lt;/pre&gt;

[[#TOP]]

==Basic Operations on List==
===Frequency of Occurrence===
list.count(object) will return the number of times the object occur in the list.
  '''Example'''
    ages = [11,23,12,23,45,43,22,24,23]
    ages.count(23) will return
    3
    ages.count(100) will return
    0

===Length of the List===
len(list) will return the length of the list ie. the number of objects in the list.
  '''Example'''
&lt;pre&gt;
    ages = [11,23,12,23,45,43,22,24,23]
    len(ages) # Output: 9
&lt;/pre&gt;

To print the objects in the list either use ''for item in list'' or ''for index in range(len(list))''
&lt;pre&gt;
    for item in ages:       
        print (item)  
        (OR)
    for index in range(len(ages)) :
        print (ages[index])
&lt;/pre&gt;

===Sort the List===
list.sort() will sort the list in ascending order
  '''Example'''
    ages = [11,23,12,23,45,43,22,24,23]
    ages.sort() 
    print (ages) 
    [11, 12, 22, 23, 23, 23, 24, 43, 45]

[[#TOP]]

===Sort the List using sorted() function===
sorted(list1) will sort the list and return a new list, it doesn't modify the original list
&lt;br&gt;'''Example: Sort in ascending order'''
&lt;pre&gt;
ages = [11,23,12,23,45,43,22,24,23]
newList=sorted(ages)
print(newList)

#Output: [11, 12, 22, 23, 23, 23, 24, 43, 45]
&lt;/pre&gt;

&lt;br&gt;'''Example: Sort in descending order'''
&lt;pre&gt;
ages = [11,23,12,23,45,43,22,24,23]
newList=sorted(ages,reverse=True)
print(newList)

#Output: [45, 43, 24, 23, 23, 23, 22, 12, 11]
&lt;/pre&gt;

===Reverse the List===
list.reverse() will reverse the original list
  '''Example'''
    ages = [11, 12, 22, 23, 23, 23, 24, 43, 45]
    ages.reverse()
    print (ages)
    [45, 43, 24, 23, 23, 23, 22, 12, 11]

Both sort() and reverse() list operation will work on numeric and alphanumeric data list.

A special use of the reverse() function is to descend a list that is sorted in ascending order.

  '''Example'''
&lt;pre&gt;
ages = [11, 12, 22, 23, 23, 23, 24, 43, 45]
ages.sort()
print(ages)
ages.reverse()
print(ages)
&lt;/pre&gt;

===Slicing===
Used to retrieve an object or objects in a range as a list  
  '''Example'''
Use ''list[index]'' to retrieve the object at the given index
         In [1]: student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
         In [2]: student[3]     #Object at index 3.  Remember index starts at 0
         Out[2]: 'Geetha'      


Use ''list[start_index : end_index + 1]'' to retrieve objects from the start_index to end_index 
         In [3]: student[2:4]     # Objects from index 2 to 3 as List. Note the [ and ]
         Out[3]: ['Vijay', 'Geetha']   


Use ''list[:]'' to retrieve objects from the starting of the list to the end of the list. 
The default start value will be the starting index of the list (i.e. 0) and the default end value
will be the length of the list 
         In [4]: student[:]        # prints the entire list
         Out[4]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma', 'Janani']


         In [5]: student[:5]       # prints the objects from the start of the list upto object at index 4
         Out[5]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran']


         In [6]: student[2:]       # prints the objects from index 2 upto the end of the list
         Out[6]: ['Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma', 'Janani']


Negative index too is available in Python. It starts from last element of the list. i.e.

         In [7]:student[-1]        #prints last index of list
         Out[7]: 'Janani'


         In [8]:student[-1:-8]     #prints empty list
         Out[8]: []


         In [9]:student[-8:-1]     #prints -8th index to -1st index elements
         Out[9]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma']

[[#TOP]]
===Removing Item from list ===
----

Is used to remove a specific item from the list.

'''Example:'''
 
Use list.remove(entry/value)  Or   del list[index]    Or list.pop(index)
         student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
         student.remove(&quot;Arun&quot;)   #This will delete item &quot;Arun&quot;
         Or    
         del student[0]           # This will delete item at index 0
         Or
         student.pop(0)         # This will delete and return item at index 0


         print(student)    
         Output: [&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]

[[#TOP]]
===Delete list ===
----
Used to delete complete list

'''Example'''

Use del &lt;list name&gt;
         student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
         del student

===Concatenation of two lists===
----
''+'' is the concatenation operator which is used concatenate two lists. 
&lt;pre&gt;
ages1 = [11,23,12,23,45]
ages2 = [25, 24, 43, 47]
age=ages1+ages2
print(age)
#Output: [11, 23, 12, 23, 45, 25, 24, 43, 47]
&lt;/pre&gt;

===Repeatation of a list ===
----
''*'' is the operator to repeat a particular list.
&lt;pre&gt;
ages1 = [11,23,12,23,45]
age=ages1*5 #ages1 list is repeated 5 times and stroed in ''age'' list
print(age)

#Output: [11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45]
&lt;/pre&gt;

=== all and any for List===
all() and any() are special functions to check whether all elements in iterable is ''True'' or any element is ''True''
&lt;ol&gt;
&lt;li&gt;If all elements in a list are ''True'', '''all()''' will return ''True''&lt;/li&gt;
&lt;li&gt;If iterable is ''empty'', '''all()''' will return ''True''&lt;/li&gt;
&lt;li&gt;If iterable contains at least one ''True'', '''any()''' will return ''True''&lt;/li&gt;
&lt;li&gt;If iterable is ''empty'', '''any()''' will return ''False''&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;
lsit=[True, True, True, True]
print(all(lsit))#Output: True
print(any(lsit))#Output: True

lsit1=[True, False, True, True]
print(all(lsit1))#Output: False
print(any(lsit1))#Output: True

lsit2=[False,False,False]
print(all(lsit2))#Output: False
print(any(lsit2))#Output: False

lsit3=[]
print(all(lsit3))#Output: True
print(any(lsit3))#Output: False
&lt;/pre&gt;

==Conditional Statements==
&lt;pre&gt;Conditionals are used to check the condition and change the flow of the program 
accordingly. They are realized in programming languages through if statement. The 
syntax is as follows :
         if condition : 
            statement
    '''Note:''' Do not forget indentation (inserting space/tab) in the line after the
 if condition.
    
    In case you want to execute a set of statements when a condition is true and another

set of statement when the condition is false.
         if condition : 
            statement 1
         else :
            statement 2
    
    Multiple if-else statements can be written as follows:
         if condition_1 : 
            statement 1
         elif condition_2 : # 'elif' is short for 'else if'
            statement 2
         elif condition_3 :
            statement 3
        .
        .
         else :
            final statement
&lt;/pre&gt;
[[#TOP]]

=Loops and Conditionals : Fizzbuzz=
====Loops====
&lt;pre&gt;
Loops are used to execute a set of repetitive statements. They are realized
through 'while' and 'for' loops in programming languages. The syntax of 'for' loop is 
as follows :
        for LOOPVARIABLE in SEQUENCE: 
            STATEMENTS
    '''e.g.''' to print all the data from a list we can write:
        for item in list_name
            print(item)
    OR
        for index in range(len(list_name))
            print(list_name[index])
    
    The syntax for while loop is as follows :
    
        while BOOLEANEXPRESSION: 
            STATEMENTS
            INCREMENT/DECREMENT
    
    '''e.g.''' if we want to print all numbers from 1 to 10
        i=1
        while i&lt;=10 :
            print(i,&quot; &quot;)
            i=i+1
    
    'while' loop has indefinite iteration (run-time unknown). So, there must be loop
 break statement in it.
 Whereas 'for' loop is definite in nature (i.e. known or predictable span).&lt;br&gt;

&lt;b&gt;NOTE: Python doesn't have anything like do-while loop.&lt;/b&gt;
&lt;/pre&gt;
[[#TOP]]

==Implementation==
Here, we try to demonstrate the concept of loops and conditionals through a game called Fizzbuzz. The rules are as follows :&lt;br/&gt;
[[File:fizzBuzz.gif]]

• if input number is a multiple of ’3’ print ”Fizz”
&lt;br/&gt;
• if input number is a multiple of ’5’ print ”Buzz”
&lt;br/&gt;
• if input number is a multiple of both '3' and ’5’ print ”FizzBuzz”
&lt;br/&gt;
The pseudo code is as follows :
&lt;pre&gt;
   If input no % 3 == 0 and  input no % 5 == 0 : 
       print ”Fizzbuzz”
   else if input no % 3 == 0 : 
       print ”Fizz”
   else if input no % 5 == 0 : 
       print ”Buzz”
   else :
       print the input no
&lt;/pre&gt;
The order of statements execution matters to get the desired output. The highest priority condition should be first followed by other. In fizzbuzz programming, first checking should be done for both divisibility of 3 and 5. If condition not satisfied only then it should check individually for 3 or 5. So carefully choosing the order is crucial for better programming.
Note: There is some effect of present condition statements chosen on next conditions statements. That is why in first attempt fizzbuzz programming got struck.

Example: 
&lt;pre&gt;
#Code to achieve the above requirement in python3.
i = int(input(&quot;Enter the number&quot;)) 
if i%3 == 0 and i%5 == 0: print(i,&quot;FizzBuzz&quot;)  
elif i%5 == 0: print(i,&quot;Buzz&quot;)
elif i%3 == 0: print(i,&quot;Fizz&quot;)
else: print(i)
&lt;/pre&gt;
Lets put the same into a loop for a range given by the user.
&lt;pre&gt;
def fizzbuzzgame(start,stop):
    for i in range(start,stop+1):
        if i%3 == 0 and i%5 == 0:
            print(i,&quot;FizzBuzz&quot;)
        elif i%5 == 0:
            print(i,&quot;Buzz&quot;)
        elif i%3 == 0:
            print(i,&quot;Fizz&quot;)
        else: print(i)

fizzbuzzgame(50,100)
&lt;/pre&gt;


=== Fizz Buzz game in Interactive mode with Score ===
'''By Ms. Ami Tusharkant Choksi'''
&lt;pre&gt;
def fizzbuzzgame(i):
        if i%3 == 0 and i%5 == 0:
            print(i,&quot;FizzBuzz&quot;)
            return(&quot;fzbz&quot;)
        elif i%5 == 0:
            print(i,&quot;Buzz&quot;)
            return(&quot;bz&quot;)
        elif i%3 == 0:
            print(i,&quot;Fizz&quot;)
            return(&quot;fz&quot;)
        else:
            print(i)
            return(&quot;no&quot;)

ch = 'y'
fizzbuzz=0
fizz=0
buzz=0
nothing=0
print(&quot;&quot;&quot;
 _____  ____  _____  _____  ____   __ __  _____  _____       ____   ____  ___ ___    ___ 
|     ||    ||     ||     ||    \ |  |  ||     ||     |     /    | /    ||   |   |  /  _]
|   __| |  | |__/  ||__/  ||  o  )|  |  ||__/  ||__/  |    |   __||  o  || _   _ | /  [_ 
|  |_   |  | |   __||   __||     ||  |  ||   __||   __|    |  |  ||     ||  \_/  ||    _]
|   _]  |  | |  /  ||  /  ||  O  ||  :  ||  /  ||  /  |    |  |_ ||  _  ||   |   ||   [_ 
|  |    |  | |     ||     ||     ||     ||     ||     |    |     ||  |  ||   |   ||     |
|__|   |____||_____||_____||_____| \__,_||_____||_____|    |___,_||__|__||___|___||_____|
                                                                                         
&quot;&quot;&quot;)   

while(ch == 'y'):
    n=int(input(&quot;Enter a Number : &quot;))
    winLoose=fizzbuzzgame(n)
    if(winLoose == &quot;fz&quot;):
        fizz+=1
    elif(winLoose == &quot;bz&quot;):
        buzz+=1
    elif(winLoose == &quot;fzbz&quot;):
        fizzbuzz+=1
    ch=input(&quot;Do you want to continue playing the game : (y/n)&quot;)
    if(ch=='n'):
        print('Congratulations, your score is\n FizzBuzz:%d\nFizz:%d\nBuzz:%d' %
(fizzbuzz,fizz,buzz))
    
'''Sample Output:

 _____  ____  _____  _____  ____   __ __  _____  _____       ____   ____  ___ ___    ___ 
|     ||    ||     ||     ||    \ |  |  ||     ||     |     /    | /    ||   |   |  /  _]
|   __| |  | |__/  ||__/  ||  o  )|  |  ||__/  ||__/  |    |   __||  o  || _   _ | /  [_ 
|  |_   |  | |   __||   __||     ||  |  ||   __||   __|    |  |  ||     ||  \_/  ||    _]
|   _]  |  | |  /  ||  /  ||  O  ||  :  ||  /  ||  /  |    |  |_ ||  _  ||   |   ||   [_ 
|  |    |  | |     ||     ||     ||     ||     ||     |    |     ||  |  ||   |   ||     |
|__|   |____||_____||_____||_____| \__,_||_____||_____|    |___,_||__|__||___|___||_____|
                                                                                         

Enter a Number : 666
666 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 777
777 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 555
555 FizzBuzz
Do you want to continue playing the game : (y/n)y
Enter a Number : 1
1
Do you want to continue playing the game : (y/n)y
Enter a Number : 789
789 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 25
25 Buzz
Do you want to continue playing the game : (y/n)n
Congratulations, your score is

FizzBuzz:1
Fizz:3
Buzz:1

&lt;/pre&gt;

=Crowd Computing: Just Estimate=
==Wisdom of Crowds==
The concept of ’Wisdom of Crowds’ was proposed by Francis Galton. A weight-judging competition was carried on at the annual show of the West of England Fat Stock and Poultry Exhibition recently held at Plymouth, A fat ox having been selected, competitors bought stamped and numbered cards, each, on which to inscribe their respective names, addresses, and estimates of what the ox would weigh after it had been slaughtered. Those who guessed most successfully received prizes. About 8oo tickets were issued to the par- ticipants. The middlemost estimate of all the estimates recorded was 1207 lbs and the actual weight of the ox was 1198 lbs.

==Our Experiment==
The crowd had to guess the number of candies/gems in a jar. Around 75 people participated in the experiment. The actual number of gems in the jar were 375. The median of all estimates came out to be 300 and the mean of all the estimates came out to be around 396. Median underestimated and mean overestimated the actual value. So according to recent studies, Trimmed mean must be used as an aggregate measure to estimate where Wisdom of Crowds is involved.
[[File:Gemsjar.jpg|center|200px|caption]]

===Trimmed Mean===
In these kinds of experiments, 10% trimmed mean is usually followed. For calculating 10% trimmed mean, remove 10% smallest and 10% largest values from the sample. Calculate the mean of the sample obtained. In the above experiment, the trimmed mean came out to be around 351 which is very close to the actual value.

==Implementation==
Here, we try to demonstrate the concept of trimmed mean through crowd computing.
 Input a list of estimates done by the crowd .
 Sort the list.
 Remove the 10% smallest values.
 Remove the 10% largest values.
 Calculate the mean of the new list obtained .&lt;hr&gt;

==Data of Experiment==       
    Estimates =[1000,1010,1786,2000,1500,1500,100,120,150,150,150,170,175,180,197,200,200,200,200,200,200,220,220,220,220,234,250,250,250,250,250,250,250,250,250,263,270,275,275,286,300,
                300,300,300,300,300,300,300,320,350,350,350,400, 400,400,400,400,450,467,500,500,500,500,500,500,500,550,550,600,600,600,650,700,700,720]

    '''CODE:'''
&lt;pre&gt;
Estimates = [1000,1010,1786,2000,1500,1500,100,120,150,150,150,170,175,180,197,200,200,200,200,200,200,220,220,220,220,234,250,250,250,250,250,250,250,250,250,263,270,275,275,286,300,                300,300,300,300,300,300,300,320,350,350,350,400,400,400,400,400,450,467,500,500,500,500,500,500,500,550,550,600,600,600,650,700,700,720]
Estimates.sort()
offset = int(0.10*len(Estimates))
for i in range(offset):
       del Estimates[0]
       del Estimates[-1]
Sum = 0    
for i in range(len(Estimates)):
       Sum += Estimates[i]
Mean_Value = Sum/len(Estimates)
print(&quot;Mean : &quot;, int(Mean_Value))
#Output:
Mean :  351
&lt;/pre&gt;
&lt;hr&gt;
==Trimmed Mean for the above example== 
&lt;h3&gt;Using scipy library&lt;/h3&gt;
&lt;pre&gt;
#import scipy to use the method of trim_mean
from scipy import stats
trimMean = stats.trim_mean(Estimates, 0.1) # Trim 10% at both ends
print(&quot;Trimmed Mean : &quot;,trimMean)
#Output:
Trimmed Mean :  335.1020408163265
&lt;/pre&gt;

&lt;h3&gt;Without using scipy library&lt;/h3&gt;
&lt;pre&gt;
#Trimmed mean with 10%
p=10/100
#sorted data
data=[2, 4, 6, 7, 11, 21, 81, 90, 105, 121]
n = len(data)
#Remove elements from both end
rem=int(n*p)
newData = data[rem:-rem]
mean = 0
for i in newData:
    mean += i
mean = int(mean/len(newData))
print(&quot;Trimmed mean : &quot;,mean)
#Output: Trimmed mean :  40
&lt;/pre&gt;
[[#Top]]

=Jumbled_Words Permutations: Jumbled Words=
==What are Permutations ?==
A permutation also called ordering of selected number of elements from a list denoted by nPr here we are choosing all elements of a list and so n=r&lt;br&gt;
nPr=n!/(n-r)!&lt;br&gt; as n=r
nPn=n!&lt;br&gt; which gives all possible arrangement of elements present in a list.

 For example, permutations of list [1,2,3] are [1,2,3], [1,3,2], [2,1,3], [2,3,1], 
[3,1,2], and [3,2,1]. 
The number of permutations of a list of elements nPn is given by n!. For example, there are 2! = 2 x 1 = 2 permutations of [1,2], namely [1,2] and [2,1], and 3! = 3 x 2 x 1 = 6 permutations of [1,2,3], as mentioned above.&lt;br/&gt;
[[File:Permutations.jpg]]

==Implementation==
Here, we try to demonstrate the concept of permutations through jumbled words. It is a two player game in which one person presents the other person a different permutation of the word in his mind. The other person has to guess the right word. If he guesses, the he wins otherwise he loses.
 Input an list of words.
 Randomly pick a word from the list of words .
 Shuffle this word and present it to the other player.
 if word guesses by the player is same as the one picked from list of w
     player wins
 else
     player loses

ALTERNATE CODE TO GENERATE THIS GAME:
&lt;pre&gt;
import random
p1=input(&quot;enter player 1 name:&quot;)
p2=input(&quot;enter player 2 name:&quot;)
l=[&quot;rainbow&quot;,&quot;computer&quot;,&quot;robot&quot;,&quot;butter&quot;,&quot;vegetable&quot;,&quot;science&quot;,&quot;correct&quot;]
c1=c2=a1=a2=f1=f2=0
k=1
i=3
def play():
    n=random.choice(l)        ##n=chooses a word from list l
    l1=[]
    for j in n:
       l1.append(j)      ##creates a list for word in n
    for t in range(len(l1)):
       p=random.choice(l1)     ##this randomly displays letters in the list
       print(p)
       l1.remove(p)          ##to avoid the repetition of a letter
    s=input(&quot;enter the word:&quot;)
    if(s==n):
        print(&quot;correct&quot;)
        return 1
    else:
        print(&quot;not correct&quot;)
        print(&quot;answer is&quot;,n)
        return 0
def stat():
     print(&quot;player 1:&quot;)
     print(&quot;score:&quot;,c1)
     print(&quot;answered:&quot;,a1)
     print(&quot;failed:&quot;,f1)
     print(&quot;.............&quot;)
     print(&quot;player 2:&quot;)
     print(&quot;score:&quot;,c2)
     print(&quot;answered:&quot;,a2)
     print(&quot;failed&quot;,f2)
     if(c1&gt;c2):
         print(p1,&quot; won over &quot;,p2)
     elif(c1==c2):
         print(&quot;draw game&quot;)
     else:
         print(p2,&quot; won over &quot;,p1) 
while(i!=4):
      if(i==3):
         if(k==1):
             print(&quot;player 1 turn&quot;)
             print(&quot;your jumbled word is:&quot;)
             k=k+1
             m=play()
             if(m==1):      ##if guessed answer is correct,then score and no.of answered count will be increased
                c1+=1
                a1+=1
             else:
                f1+=1       ##else count of no.of failed to answered will be incremented
         else:
             print(&quot;player 2 turn&quot;)
             print(&quot;your jumbled word is:&quot;)
             k=k-1
             m=play()
             if(m==1):
                c2=c2+1
                a2=a2+1
             else:
                f2=f2+1
       if(i==2):
             print(&quot;present status&quot;)
             stat()
       i=int(input(&quot;enter your choice  1.stop 2.status 3.continue&quot;))
       if(i==1):
             stat()
             i=i+3
&lt;/pre&gt;
&lt;hr&gt;
=== JumbledWord Simple Logic, In Short ===
[[File:jumbledWord.gif]]
&lt;hr&gt;
'''Logic to create a Jumbled Word'''
&lt;hr&gt;
&lt;pre&gt;
#Get Jumbled Word and print it Horizontally
import random

def getJumbledWord(b):
    jumble=''
    l1 = [ b[i] for i in range(0, len(b)) ]
    for t in range(len(l1)):
       p=random.choice(l1)     ##this randomly gets letters from the list      
       jumble=jumble+p       
       l1.remove(p)
    return jumble

b=input(&quot;Enter a word to make it jumbled : &quot;)
print(&quot;Jumbled Word : &quot;, getJumbledWord(b))
&lt;/pre&gt;
&lt;hr&gt;
'''Another Logic to create a Jumbled Word'''
&lt;hr&gt;
&lt;pre&gt;
b=input(&quot;Enter a word to make it jumbled : &quot;)

def getJumbledWord1(b):
    l1 = [ b[i] for i in range(0, len(b)) ]
    random.shuffle(l1)
    str1 = ''.join(l1)
    return str1

print(&quot;Jumbled Word : &quot;, getJumbledWord1(b))
&lt;/pre&gt;

====Sample Output:====
&lt;pre&gt;
---- Output1 
Enter a word to make it jumbled : butter
Jumbled Word :  tbture

---- Output2 
Enter a word to make it jumbled : petriotism
Jumbled Word :  pittrosime
&lt;/pre&gt;

=Theory of Evolution=

== What is Evolution ? ==
Evolution is the change in heritable characteristics over successive generations. The theory of evolution explains that DNA, which acts as a carrier of genetic information from one generation to other, tends to change or mutate occasionally. These changes are reflected in next generations to come. This is how life has evolved on earth from bacteria to human beings.&lt;br&gt;
[[File:Evolution.png|500px]]

== Implementation ==
&lt;pre&gt;An array representing DNA is stored in a file. As genes are forms of DNA, they contain information to be transferred to forthcoming generations. Assume that information is in the form of bits (in the form of 0s and 1s). A number is picked randomly from 1 to the size of the array. A new parameter has been introduced which decides whether mutation would occur or not. If the value of this new parameter is 1 (It is picked randomly from 1 to 100), then only change is reflected down the generations, otherwise it is not. The pseudo code is as follows :
Input an array containing genetic information .
Randomly generate a number (say m) from 1 to length of the array. Randomly generate other number (say p) from 1 to 100.
 
    if p is equal to 1 then 
        if m is 1 then
          set it to 0
        else
          set it to 1
&lt;/pre&gt;
[[#TOP]]</text>
      <sha1>tnxgnsle6cz2j1p8f9e08oxwypltjfo</sha1>
    </revision>
    <revision>
      <id>3554</id>
      <parentid>3553</parentid>
      <timestamp>2018-09-28T02:26:50Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* Slicing */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="29473">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_3 Contributors of this page]
*Week 3 Playlist: https://www.youtube.com/playlist?list=PLc_j0TNIaWxOVx_z9jAM2UB3RqYNXaoEo
=List=
List is a flexible data structure used for storing a group of data separated by comma. The elements in a list need not be of the same data type.

'''Example:'''
       List_1 = [ 1, 2,3] or 
       List_1 = [&quot;coffee&quot;, &quot;Tea&quot;, &quot;Milk&quot;] or
       List_1 = [1,&quot;coffee&quot;, &quot;Tea&quot;, 3, &quot;5&quot;]

==List Creation==
&lt;pre&gt;a) A list can be created by simply putting values (separated by comma) between square brackets as given below,
       List_1 = [1,&quot;coffee&quot;, &quot;Tea&quot;, 3, &quot;5&quot;] #this creates a list by name List_1 containing following items


Or,
(b)A List can be created from scratch and elements can be added 
        List_2 = [ ]
        List_2.append(&quot;Kala&quot;)
        List_2.append(&quot;Mala&quot;)
Here we use &quot;append&quot; ,which is a function in python that enable us to append or attach an element to a list .
Thus List_2 will now hold [&quot;Kala&quot;,&quot;Mala&quot;]
&lt;/pre&gt;
[[#TOP]]

==Operations and Methods to work with List==
&lt;pre&gt;
a = [25,30,50,90,12,13]
b = [100,300,500,200,250]
&lt;/pre&gt;
&lt;hr&gt;
&lt;table border=2&gt;
  &lt;tr&gt;
    &lt;th&gt;&lt;b&gt;Method/&lt;br&gt;Operator&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Function&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Syntax&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Output&lt;/b&gt;&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;len()&lt;/td&gt;
    &lt;td&gt;Find length of a list&lt;/td&gt;
    &lt;td&gt;len(a)&lt;/td&gt;
    &lt;td&gt;6&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;max()&lt;/td&gt;
    &lt;td&gt;Find maximum element from the list&lt;/td&gt;
    &lt;td&gt;max(a)&lt;/td&gt;
    &lt;td&gt;90&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;min()&lt;/td&gt;
    &lt;td&gt;Find minimum element from the list&lt;/td&gt;
    &lt;td&gt;min(a)&lt;/td&gt;
    &lt;td&gt;12&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sum()&lt;/td&gt;
    &lt;td&gt;Returns sum of all elements of the list&lt;/td&gt;
    &lt;td&gt;sum(a)&lt;/td&gt;
    &lt;td&gt;220&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;reverse()&lt;/td&gt;
    &lt;td&gt;Reverses the original list&lt;/td&gt;
    &lt;td&gt;a.reverse()&lt;/td&gt;
    &lt;td&gt;[13, 12, 90, 50, 30, 25]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sort()&lt;/td&gt;
    &lt;td&gt;Sorts the original list in ascending order&lt;/td&gt;
    &lt;td&gt;a.sort()&lt;/td&gt;
    &lt;td&gt;[12, 13, 25, 30, 50, 90]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sorted()&lt;/td&gt;
    &lt;td&gt;Returns the new sorted list &lt;/td&gt;
    &lt;td&gt;sorted(a)&lt;/td&gt;
    &lt;td&gt;[12, 13, 25, 30, 50, 90]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;insert()&lt;/td&gt;
    &lt;td&gt;Insert at a particular index in the list, and shifts remaining elements&lt;/td&gt;
    &lt;td&gt;a.insert(3,3)&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 3, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;append()&lt;/td&gt;
    &lt;td&gt;Adds elements/object to the end of the list&lt;/td&gt;
    &lt;td&gt;a.append(5)&lt;br&gt;a.append([10,20])&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 5]&lt;br&gt;[25, 30, 50, 90, 12, 13, [10, 20]]&lt;br&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;extend()&lt;/td&gt;
    &lt;td&gt;Adds object to the end of the list as elements not as object&lt;/td&gt;
    &lt;td&gt;a.extend([10,20])&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 10, 20]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;*&amp;nbsp;&amp;nbsp;Repeatation&lt;br&gt;operator&lt;/td&gt;
    &lt;td&gt;Repeat the list for n times and returns a new list&lt;/td&gt;
    &lt;td&gt;a*2&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 25, 30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;+ Concatenation&lt;br&gt;operator&lt;/td&gt;
    &lt;td&gt;Concatenates two lists, and returns a new list&lt;/td&gt;
    &lt;td&gt;a+b&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 100, 300, 500, 200, 250]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;index()&lt;/td&gt;
    &lt;td&gt;Finds index of a particular element in the list or not&lt;/td&gt;
    &lt;td&gt;a.index(25)&lt;br&gt;a.index(0)&lt;br&gt;&lt;/td&gt;
    &lt;td&gt;0&lt;br&gt;&lt;br&gt;ValueError: 0 is not in list&lt;br&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;in operator&lt;/td&gt;
    &lt;td&gt;Finds whether a particular element is in the list or not, returns boolean&lt;/td&gt;
    &lt;td&gt;25 in a&lt;/td&gt;
    &lt;td&gt;True&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;not in operator&lt;/td&gt;
    &lt;td&gt;Checks if element is not available in list, returns boolean&lt;/td&gt;
    &lt;td&gt;25 not in a&lt;/td&gt;
    &lt;td&gt;False&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;count()&lt;/td&gt;
    &lt;td&gt;Counts the number of occurence of an element in the list&lt;/td&gt;
    &lt;td&gt;a.count(25)&lt;/td&gt;
    &lt;td&gt;1&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;remove()&lt;/td&gt;
    &lt;td&gt;Removes an element from the list&lt;/td&gt;
    &lt;td&gt;a.remove(25)&lt;/td&gt;
    &lt;td&gt; [30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;pop()&lt;/td&gt;
    &lt;td&gt;Delete and return item at index 0&lt;/td&gt;
    &lt;td&gt;a.pop(0)&lt;/td&gt;
    &lt;td&gt;25 , a will be [30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;del&lt;/td&gt;
    &lt;td&gt;Deletes item at a particular index from the list&lt;/td&gt;
    &lt;td&gt;del a[0]&lt;/td&gt;
    &lt;td&gt;[30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;all()&lt;/td&gt;
&lt;td&gt;Returns True, if all items in list are True or it is an empty list&lt;/td&gt;
&lt;td&gt;all([True, True, True])
all([])
&lt;/td&gt;
&lt;td&gt;True&lt;br&gt;
True&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;any()&lt;/td&gt;
&lt;td&gt;Returns True, if any item in list is True else return False&lt;/td&gt;
&lt;td&gt;any([True, True, True])&lt;br&gt;
any([True, False, True])&lt;br&gt;
any([])&lt;/td&gt;
&lt;td&gt;True&lt;br&gt;False&lt;br&gt;False&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;

==Printing the List==
=== Print whole list ===
A list can be printed simply or using a ''for / while'' loop 

 print(List_2)     # To print the entire list
This code will print      
 ['Kala','Mala']     

===Print element at a particular index===
&lt;pre&gt;
Using index position
    List_2[0]     # prints 'Kala' ,i.e,the value at index position 0.
    List_2[1]     # prints 'Mala'.
&lt;/pre&gt;
=== Without using index position ===
&lt;pre&gt;
for item in List_2:   # here item is a variable used to access elements in list.
       print(item)
   This code snippet prints 
    Kala
    Mala
&lt;/pre&gt;
[[#TOP]]

==Search for a particular element in list==
Elements in a list can be searched by one of the two ways:
=== using index() function===
&lt;pre&gt;
ages1 = [11,23,12,23,45]

#if element is available in the list, index() returns the index value on which, the element is present.
print(ages1.index(45))#Output: 4

#if element is not available in the list, index() returns ''ValueError''
print(ages1.index(0))#Output: ValueError:
&lt;/pre&gt;

In programming, if such error occurs, program gets terminated. It can be solved using exception handling.
e.g.
&lt;pre&gt;
ages1 = [11,23,12,23,45]

try:
    print(ages1.index(0))
except ValueError:
    print(&quot;Exception has occured&quot;)    
    print(&quot;Element is not found in the list&quot;)

&lt;/pre&gt;
&lt;pre&gt;
'''Output: 
Exception has occured
Element is not found in the list
'''&lt;/pre&gt;
[[#TOP]]

=== using 'in' operator===
''in'' operator is used to check whether a particular element is available in the list or not.e.g.

&lt;pre&gt;
ages1 = [11,23,12,23,45]
no=11

if no in ages1:
    print(&quot;no is there in the list&quot;)
else:    
    print(&quot;no is NOT there in the list&quot;)
&lt;/pre&gt;
&lt;pre&gt;
#Output: no is there in the list
&lt;/pre&gt;


'''Number is not there in the list'''
&lt;pre&gt;
ages1 = [11,23,12,23,45]
no=15

if no in ages1:
    print(&quot;no is there in the list&quot;)
else:    
    print(&quot;no is NOT there in the list&quot;)
&lt;/pre&gt;
&lt;pre&gt;
Output: no is NOT there in the list
&lt;/pre&gt;
[[#TOP]]

==Updating the List==
The lists can be updated using ''append'' or ''insert'' function.  Append adds the element to the end of the list and Insert adds the element in the specified position.
&lt;pre&gt;
   # add the element 'Sheela' to the end of the list.
   List_2.append(&quot;Sheela&quot;)    
   print (List_2) will output 
   ['Kala', 'Mala', 'Sheela']
&lt;/pre&gt;
   &lt;pre&gt;
# add the element &quot;Bala&quot; in the list at the index 1.
   List_2.insert(1,&quot;Bala&quot;)    
   print (List_2) will output 
   ['Kala', 'Bala','Mala', 'Sheela']
&lt;/pre&gt;

=== Extend the list by adding elements of other list at end using extend()===
&lt;pre&gt;
ages = [11,23,12,23,45]
ages.extend([57,58])
print(ages)
&lt;/pre&gt;

&lt;pre&gt;
#Output: [11, 23, 12, 23, 45, 57, 58]
&lt;/pre&gt;

==== Difference between ''append and extend'' ====
Difference between append and extend can be easily understood, by the following example.

&lt;pre&gt;
appendlist = [11,23,12,23,45]
appendlist.append([57,58])

extendlist= [11,23,12,23,45]
extendlist.extend([57,58])
&lt;/pre&gt;

&lt;pre&gt;
'''Output:
[11, 23, 12, 23, 45, [57, 58]]
[11, 23, 12, 23, 45, 57, 58]'''
&lt;/pre&gt;

[[#TOP]]

==Basic Operations on List==
===Frequency of Occurrence===
list.count(object) will return the number of times the object occur in the list.
  '''Example'''
    ages = [11,23,12,23,45,43,22,24,23]
    ages.count(23) will return
    3
    ages.count(100) will return
    0

===Length of the List===
len(list) will return the length of the list ie. the number of objects in the list.
  '''Example'''
&lt;pre&gt;
    ages = [11,23,12,23,45,43,22,24,23]
    len(ages) # Output: 9
&lt;/pre&gt;

To print the objects in the list either use ''for item in list'' or ''for index in range(len(list))''
&lt;pre&gt;
    for item in ages:       
        print (item)  
        (OR)
    for index in range(len(ages)) :
        print (ages[index])
&lt;/pre&gt;

===Sort the List===
list.sort() will sort the list in ascending order
  '''Example'''
    ages = [11,23,12,23,45,43,22,24,23]
    ages.sort() 
    print (ages) 
    [11, 12, 22, 23, 23, 23, 24, 43, 45]

[[#TOP]]

===Sort the List using sorted() function===
sorted(list1) will sort the list and return a new list, it doesn't modify the original list
&lt;br&gt;'''Example: Sort in ascending order'''
&lt;pre&gt;
ages = [11,23,12,23,45,43,22,24,23]
newList=sorted(ages)
print(newList)

#Output: [11, 12, 22, 23, 23, 23, 24, 43, 45]
&lt;/pre&gt;

&lt;br&gt;'''Example: Sort in descending order'''
&lt;pre&gt;
ages = [11,23,12,23,45,43,22,24,23]
newList=sorted(ages,reverse=True)
print(newList)

#Output: [45, 43, 24, 23, 23, 23, 22, 12, 11]
&lt;/pre&gt;

===Reverse the List===
list.reverse() will reverse the original list
  '''Example'''
    ages = [11, 12, 22, 23, 23, 23, 24, 43, 45]
    ages.reverse()
    print (ages)
    [45, 43, 24, 23, 23, 23, 22, 12, 11]

Both sort() and reverse() list operation will work on numeric and alphanumeric data list.

A special use of the reverse() function is to descend a list that is sorted in ascending order.

  '''Example'''
&lt;pre&gt;
ages = [11, 12, 22, 23, 23, 23, 24, 43, 45]
ages.sort()
print(ages)
ages.reverse()
print(ages)
&lt;/pre&gt;

===Slicing===
Used to retrieve an object or objects in a range as a list  
  '''Example'''

Use ''list[index]'' to retrieve the object at the given index
&lt;pre&gt;
In [1]: student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
In [2]: student[3]     #Object at index 3.  Remember index starts at 0
Out[2]: 'Geetha'      
&lt;/pre&gt;

Use ''list[start_index : end_index + 1]'' to retrieve objects from the start_index to end_index 
         In [3]: student[2:4]     # Objects from index 2 to 3 as List. Note the [ and ]
         Out[3]: ['Vijay', 'Geetha']   


Use ''list[:]'' to retrieve objects from the starting of the list to the end of the list. 
The default start value will be the starting index of the list (i.e. 0) and the default end value
will be the length of the list 
         In [4]: student[:]        # prints the entire list
         Out[4]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma', 'Janani']


         In [5]: student[:5]       # prints the objects from the start of the list upto object at index 4
         Out[5]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran']


         In [6]: student[2:]       # prints the objects from index 2 upto the end of the list
         Out[6]: ['Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma', 'Janani']


Negative index too is available in Python. It starts from last element of the list. i.e.

         In [7]:student[-1]        #prints last index of list
         Out[7]: 'Janani'


         In [8]:student[-1:-8]     #prints empty list
         Out[8]: []


         In [9]:student[-8:-1]     #prints -8th index to -1st index elements
         Out[9]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma']

[[#TOP]]

===Removing Item from list ===
----

Is used to remove a specific item from the list.

'''Example:'''
 
Use list.remove(entry/value)  Or   del list[index]    Or list.pop(index)
         student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
         student.remove(&quot;Arun&quot;)   #This will delete item &quot;Arun&quot;
         Or    
         del student[0]           # This will delete item at index 0
         Or
         student.pop(0)         # This will delete and return item at index 0


         print(student)    
         Output: [&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]

[[#TOP]]
===Delete list ===
----
Used to delete complete list

'''Example'''

Use del &lt;list name&gt;
         student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
         del student

===Concatenation of two lists===
----
''+'' is the concatenation operator which is used concatenate two lists. 
&lt;pre&gt;
ages1 = [11,23,12,23,45]
ages2 = [25, 24, 43, 47]
age=ages1+ages2
print(age)
#Output: [11, 23, 12, 23, 45, 25, 24, 43, 47]
&lt;/pre&gt;

===Repeatation of a list ===
----
''*'' is the operator to repeat a particular list.
&lt;pre&gt;
ages1 = [11,23,12,23,45]
age=ages1*5 #ages1 list is repeated 5 times and stroed in ''age'' list
print(age)

#Output: [11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45]
&lt;/pre&gt;

=== all and any for List===
all() and any() are special functions to check whether all elements in iterable is ''True'' or any element is ''True''
&lt;ol&gt;
&lt;li&gt;If all elements in a list are ''True'', '''all()''' will return ''True''&lt;/li&gt;
&lt;li&gt;If iterable is ''empty'', '''all()''' will return ''True''&lt;/li&gt;
&lt;li&gt;If iterable contains at least one ''True'', '''any()''' will return ''True''&lt;/li&gt;
&lt;li&gt;If iterable is ''empty'', '''any()''' will return ''False''&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;
lsit=[True, True, True, True]
print(all(lsit))#Output: True
print(any(lsit))#Output: True

lsit1=[True, False, True, True]
print(all(lsit1))#Output: False
print(any(lsit1))#Output: True

lsit2=[False,False,False]
print(all(lsit2))#Output: False
print(any(lsit2))#Output: False

lsit3=[]
print(all(lsit3))#Output: True
print(any(lsit3))#Output: False
&lt;/pre&gt;

==Conditional Statements==
&lt;pre&gt;Conditionals are used to check the condition and change the flow of the program 
accordingly. They are realized in programming languages through if statement. The 
syntax is as follows :
         if condition : 
            statement
    '''Note:''' Do not forget indentation (inserting space/tab) in the line after the
 if condition.
    
    In case you want to execute a set of statements when a condition is true and another

set of statement when the condition is false.
         if condition : 
            statement 1
         else :
            statement 2
    
    Multiple if-else statements can be written as follows:
         if condition_1 : 
            statement 1
         elif condition_2 : # 'elif' is short for 'else if'
            statement 2
         elif condition_3 :
            statement 3
        .
        .
         else :
            final statement
&lt;/pre&gt;
[[#TOP]]

=Loops and Conditionals : Fizzbuzz=
====Loops====
&lt;pre&gt;
Loops are used to execute a set of repetitive statements. They are realized
through 'while' and 'for' loops in programming languages. The syntax of 'for' loop is 
as follows :
        for LOOPVARIABLE in SEQUENCE: 
            STATEMENTS
    '''e.g.''' to print all the data from a list we can write:
        for item in list_name
            print(item)
    OR
        for index in range(len(list_name))
            print(list_name[index])
    
    The syntax for while loop is as follows :
    
        while BOOLEANEXPRESSION: 
            STATEMENTS
            INCREMENT/DECREMENT
    
    '''e.g.''' if we want to print all numbers from 1 to 10
        i=1
        while i&lt;=10 :
            print(i,&quot; &quot;)
            i=i+1
    
    'while' loop has indefinite iteration (run-time unknown). So, there must be loop
 break statement in it.
 Whereas 'for' loop is definite in nature (i.e. known or predictable span).&lt;br&gt;

&lt;b&gt;NOTE: Python doesn't have anything like do-while loop.&lt;/b&gt;
&lt;/pre&gt;
[[#TOP]]

==Implementation==
Here, we try to demonstrate the concept of loops and conditionals through a game called Fizzbuzz. The rules are as follows :&lt;br/&gt;
[[File:fizzBuzz.gif]]

• if input number is a multiple of ’3’ print ”Fizz”
&lt;br/&gt;
• if input number is a multiple of ’5’ print ”Buzz”
&lt;br/&gt;
• if input number is a multiple of both '3' and ’5’ print ”FizzBuzz”
&lt;br/&gt;
The pseudo code is as follows :
&lt;pre&gt;
   If input no % 3 == 0 and  input no % 5 == 0 : 
       print ”Fizzbuzz”
   else if input no % 3 == 0 : 
       print ”Fizz”
   else if input no % 5 == 0 : 
       print ”Buzz”
   else :
       print the input no
&lt;/pre&gt;
The order of statements execution matters to get the desired output. The highest priority condition should be first followed by other. In fizzbuzz programming, first checking should be done for both divisibility of 3 and 5. If condition not satisfied only then it should check individually for 3 or 5. So carefully choosing the order is crucial for better programming.
Note: There is some effect of present condition statements chosen on next conditions statements. That is why in first attempt fizzbuzz programming got struck.

Example: 
&lt;pre&gt;
#Code to achieve the above requirement in python3.
i = int(input(&quot;Enter the number&quot;)) 
if i%3 == 0 and i%5 == 0: print(i,&quot;FizzBuzz&quot;)  
elif i%5 == 0: print(i,&quot;Buzz&quot;)
elif i%3 == 0: print(i,&quot;Fizz&quot;)
else: print(i)
&lt;/pre&gt;
Lets put the same into a loop for a range given by the user.
&lt;pre&gt;
def fizzbuzzgame(start,stop):
    for i in range(start,stop+1):
        if i%3 == 0 and i%5 == 0:
            print(i,&quot;FizzBuzz&quot;)
        elif i%5 == 0:
            print(i,&quot;Buzz&quot;)
        elif i%3 == 0:
            print(i,&quot;Fizz&quot;)
        else: print(i)

fizzbuzzgame(50,100)
&lt;/pre&gt;


=== Fizz Buzz game in Interactive mode with Score ===
'''By Ms. Ami Tusharkant Choksi'''
&lt;pre&gt;
def fizzbuzzgame(i):
        if i%3 == 0 and i%5 == 0:
            print(i,&quot;FizzBuzz&quot;)
            return(&quot;fzbz&quot;)
        elif i%5 == 0:
            print(i,&quot;Buzz&quot;)
            return(&quot;bz&quot;)
        elif i%3 == 0:
            print(i,&quot;Fizz&quot;)
            return(&quot;fz&quot;)
        else:
            print(i)
            return(&quot;no&quot;)

ch = 'y'
fizzbuzz=0
fizz=0
buzz=0
nothing=0
print(&quot;&quot;&quot;
 _____  ____  _____  _____  ____   __ __  _____  _____       ____   ____  ___ ___    ___ 
|     ||    ||     ||     ||    \ |  |  ||     ||     |     /    | /    ||   |   |  /  _]
|   __| |  | |__/  ||__/  ||  o  )|  |  ||__/  ||__/  |    |   __||  o  || _   _ | /  [_ 
|  |_   |  | |   __||   __||     ||  |  ||   __||   __|    |  |  ||     ||  \_/  ||    _]
|   _]  |  | |  /  ||  /  ||  O  ||  :  ||  /  ||  /  |    |  |_ ||  _  ||   |   ||   [_ 
|  |    |  | |     ||     ||     ||     ||     ||     |    |     ||  |  ||   |   ||     |
|__|   |____||_____||_____||_____| \__,_||_____||_____|    |___,_||__|__||___|___||_____|
                                                                                         
&quot;&quot;&quot;)   

while(ch == 'y'):
    n=int(input(&quot;Enter a Number : &quot;))
    winLoose=fizzbuzzgame(n)
    if(winLoose == &quot;fz&quot;):
        fizz+=1
    elif(winLoose == &quot;bz&quot;):
        buzz+=1
    elif(winLoose == &quot;fzbz&quot;):
        fizzbuzz+=1
    ch=input(&quot;Do you want to continue playing the game : (y/n)&quot;)
    if(ch=='n'):
        print('Congratulations, your score is\n FizzBuzz:%d\nFizz:%d\nBuzz:%d' %
(fizzbuzz,fizz,buzz))
    
'''Sample Output:

 _____  ____  _____  _____  ____   __ __  _____  _____       ____   ____  ___ ___    ___ 
|     ||    ||     ||     ||    \ |  |  ||     ||     |     /    | /    ||   |   |  /  _]
|   __| |  | |__/  ||__/  ||  o  )|  |  ||__/  ||__/  |    |   __||  o  || _   _ | /  [_ 
|  |_   |  | |   __||   __||     ||  |  ||   __||   __|    |  |  ||     ||  \_/  ||    _]
|   _]  |  | |  /  ||  /  ||  O  ||  :  ||  /  ||  /  |    |  |_ ||  _  ||   |   ||   [_ 
|  |    |  | |     ||     ||     ||     ||     ||     |    |     ||  |  ||   |   ||     |
|__|   |____||_____||_____||_____| \__,_||_____||_____|    |___,_||__|__||___|___||_____|
                                                                                         

Enter a Number : 666
666 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 777
777 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 555
555 FizzBuzz
Do you want to continue playing the game : (y/n)y
Enter a Number : 1
1
Do you want to continue playing the game : (y/n)y
Enter a Number : 789
789 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 25
25 Buzz
Do you want to continue playing the game : (y/n)n
Congratulations, your score is

FizzBuzz:1
Fizz:3
Buzz:1

&lt;/pre&gt;

=Crowd Computing: Just Estimate=
==Wisdom of Crowds==
The concept of ’Wisdom of Crowds’ was proposed by Francis Galton. A weight-judging competition was carried on at the annual show of the West of England Fat Stock and Poultry Exhibition recently held at Plymouth, A fat ox having been selected, competitors bought stamped and numbered cards, each, on which to inscribe their respective names, addresses, and estimates of what the ox would weigh after it had been slaughtered. Those who guessed most successfully received prizes. About 8oo tickets were issued to the par- ticipants. The middlemost estimate of all the estimates recorded was 1207 lbs and the actual weight of the ox was 1198 lbs.

==Our Experiment==
The crowd had to guess the number of candies/gems in a jar. Around 75 people participated in the experiment. The actual number of gems in the jar were 375. The median of all estimates came out to be 300 and the mean of all the estimates came out to be around 396. Median underestimated and mean overestimated the actual value. So according to recent studies, Trimmed mean must be used as an aggregate measure to estimate where Wisdom of Crowds is involved.
[[File:Gemsjar.jpg|center|200px|caption]]

===Trimmed Mean===
In these kinds of experiments, 10% trimmed mean is usually followed. For calculating 10% trimmed mean, remove 10% smallest and 10% largest values from the sample. Calculate the mean of the sample obtained. In the above experiment, the trimmed mean came out to be around 351 which is very close to the actual value.

==Implementation==
Here, we try to demonstrate the concept of trimmed mean through crowd computing.
 Input a list of estimates done by the crowd .
 Sort the list.
 Remove the 10% smallest values.
 Remove the 10% largest values.
 Calculate the mean of the new list obtained .&lt;hr&gt;

==Data of Experiment==       
    Estimates =[1000,1010,1786,2000,1500,1500,100,120,150,150,150,170,175,180,197,200,200,200,200,200,200,220,220,220,220,234,250,250,250,250,250,250,250,250,250,263,270,275,275,286,300,
                300,300,300,300,300,300,300,320,350,350,350,400, 400,400,400,400,450,467,500,500,500,500,500,500,500,550,550,600,600,600,650,700,700,720]

    '''CODE:'''
&lt;pre&gt;
Estimates = [1000,1010,1786,2000,1500,1500,100,120,150,150,150,170,175,180,197,200,200,200,200,200,200,220,220,220,220,234,250,250,250,250,250,250,250,250,250,263,270,275,275,286,300,                300,300,300,300,300,300,300,320,350,350,350,400,400,400,400,400,450,467,500,500,500,500,500,500,500,550,550,600,600,600,650,700,700,720]
Estimates.sort()
offset = int(0.10*len(Estimates))
for i in range(offset):
       del Estimates[0]
       del Estimates[-1]
Sum = 0    
for i in range(len(Estimates)):
       Sum += Estimates[i]
Mean_Value = Sum/len(Estimates)
print(&quot;Mean : &quot;, int(Mean_Value))
#Output:
Mean :  351
&lt;/pre&gt;
&lt;hr&gt;
==Trimmed Mean for the above example== 
&lt;h3&gt;Using scipy library&lt;/h3&gt;
&lt;pre&gt;
#import scipy to use the method of trim_mean
from scipy import stats
trimMean = stats.trim_mean(Estimates, 0.1) # Trim 10% at both ends
print(&quot;Trimmed Mean : &quot;,trimMean)
#Output:
Trimmed Mean :  335.1020408163265
&lt;/pre&gt;

&lt;h3&gt;Without using scipy library&lt;/h3&gt;
&lt;pre&gt;
#Trimmed mean with 10%
p=10/100
#sorted data
data=[2, 4, 6, 7, 11, 21, 81, 90, 105, 121]
n = len(data)
#Remove elements from both end
rem=int(n*p)
newData = data[rem:-rem]
mean = 0
for i in newData:
    mean += i
mean = int(mean/len(newData))
print(&quot;Trimmed mean : &quot;,mean)
#Output: Trimmed mean :  40
&lt;/pre&gt;
[[#Top]]

=Jumbled_Words Permutations: Jumbled Words=
==What are Permutations ?==
A permutation also called ordering of selected number of elements from a list denoted by nPr here we are choosing all elements of a list and so n=r&lt;br&gt;
nPr=n!/(n-r)!&lt;br&gt; as n=r
nPn=n!&lt;br&gt; which gives all possible arrangement of elements present in a list.

 For example, permutations of list [1,2,3] are [1,2,3], [1,3,2], [2,1,3], [2,3,1], 
[3,1,2], and [3,2,1]. 
The number of permutations of a list of elements nPn is given by n!. For example, there are 2! = 2 x 1 = 2 permutations of [1,2], namely [1,2] and [2,1], and 3! = 3 x 2 x 1 = 6 permutations of [1,2,3], as mentioned above.&lt;br/&gt;
[[File:Permutations.jpg]]

==Implementation==
Here, we try to demonstrate the concept of permutations through jumbled words. It is a two player game in which one person presents the other person a different permutation of the word in his mind. The other person has to guess the right word. If he guesses, the he wins otherwise he loses.
 Input an list of words.
 Randomly pick a word from the list of words .
 Shuffle this word and present it to the other player.
 if word guesses by the player is same as the one picked from list of w
     player wins
 else
     player loses

ALTERNATE CODE TO GENERATE THIS GAME:
&lt;pre&gt;
import random
p1=input(&quot;enter player 1 name:&quot;)
p2=input(&quot;enter player 2 name:&quot;)
l=[&quot;rainbow&quot;,&quot;computer&quot;,&quot;robot&quot;,&quot;butter&quot;,&quot;vegetable&quot;,&quot;science&quot;,&quot;correct&quot;]
c1=c2=a1=a2=f1=f2=0
k=1
i=3
def play():
    n=random.choice(l)        ##n=chooses a word from list l
    l1=[]
    for j in n:
       l1.append(j)      ##creates a list for word in n
    for t in range(len(l1)):
       p=random.choice(l1)     ##this randomly displays letters in the list
       print(p)
       l1.remove(p)          ##to avoid the repetition of a letter
    s=input(&quot;enter the word:&quot;)
    if(s==n):
        print(&quot;correct&quot;)
        return 1
    else:
        print(&quot;not correct&quot;)
        print(&quot;answer is&quot;,n)
        return 0
def stat():
     print(&quot;player 1:&quot;)
     print(&quot;score:&quot;,c1)
     print(&quot;answered:&quot;,a1)
     print(&quot;failed:&quot;,f1)
     print(&quot;.............&quot;)
     print(&quot;player 2:&quot;)
     print(&quot;score:&quot;,c2)
     print(&quot;answered:&quot;,a2)
     print(&quot;failed&quot;,f2)
     if(c1&gt;c2):
         print(p1,&quot; won over &quot;,p2)
     elif(c1==c2):
         print(&quot;draw game&quot;)
     else:
         print(p2,&quot; won over &quot;,p1) 
while(i!=4):
      if(i==3):
         if(k==1):
             print(&quot;player 1 turn&quot;)
             print(&quot;your jumbled word is:&quot;)
             k=k+1
             m=play()
             if(m==1):      ##if guessed answer is correct,then score and no.of answered count will be increased
                c1+=1
                a1+=1
             else:
                f1+=1       ##else count of no.of failed to answered will be incremented
         else:
             print(&quot;player 2 turn&quot;)
             print(&quot;your jumbled word is:&quot;)
             k=k-1
             m=play()
             if(m==1):
                c2=c2+1
                a2=a2+1
             else:
                f2=f2+1
       if(i==2):
             print(&quot;present status&quot;)
             stat()
       i=int(input(&quot;enter your choice  1.stop 2.status 3.continue&quot;))
       if(i==1):
             stat()
             i=i+3
&lt;/pre&gt;
&lt;hr&gt;
=== JumbledWord Simple Logic, In Short ===
[[File:jumbledWord.gif]]
&lt;hr&gt;
'''Logic to create a Jumbled Word'''
&lt;hr&gt;
&lt;pre&gt;
#Get Jumbled Word and print it Horizontally
import random

def getJumbledWord(b):
    jumble=''
    l1 = [ b[i] for i in range(0, len(b)) ]
    for t in range(len(l1)):
       p=random.choice(l1)     ##this randomly gets letters from the list      
       jumble=jumble+p       
       l1.remove(p)
    return jumble

b=input(&quot;Enter a word to make it jumbled : &quot;)
print(&quot;Jumbled Word : &quot;, getJumbledWord(b))
&lt;/pre&gt;
&lt;hr&gt;
'''Another Logic to create a Jumbled Word'''
&lt;hr&gt;
&lt;pre&gt;
b=input(&quot;Enter a word to make it jumbled : &quot;)

def getJumbledWord1(b):
    l1 = [ b[i] for i in range(0, len(b)) ]
    random.shuffle(l1)
    str1 = ''.join(l1)
    return str1

print(&quot;Jumbled Word : &quot;, getJumbledWord1(b))
&lt;/pre&gt;

====Sample Output:====
&lt;pre&gt;
---- Output1 
Enter a word to make it jumbled : butter
Jumbled Word :  tbture

---- Output2 
Enter a word to make it jumbled : petriotism
Jumbled Word :  pittrosime
&lt;/pre&gt;

=Theory of Evolution=

== What is Evolution ? ==
Evolution is the change in heritable characteristics over successive generations. The theory of evolution explains that DNA, which acts as a carrier of genetic information from one generation to other, tends to change or mutate occasionally. These changes are reflected in next generations to come. This is how life has evolved on earth from bacteria to human beings.&lt;br&gt;
[[File:Evolution.png|500px]]

== Implementation ==
&lt;pre&gt;An array representing DNA is stored in a file. As genes are forms of DNA, they contain information to be transferred to forthcoming generations. Assume that information is in the form of bits (in the form of 0s and 1s). A number is picked randomly from 1 to the size of the array. A new parameter has been introduced which decides whether mutation would occur or not. If the value of this new parameter is 1 (It is picked randomly from 1 to 100), then only change is reflected down the generations, otherwise it is not. The pseudo code is as follows :
Input an array containing genetic information .
Randomly generate a number (say m) from 1 to length of the array. Randomly generate other number (say p) from 1 to 100.
 
    if p is equal to 1 then 
        if m is 1 then
          set it to 0
        else
          set it to 1
&lt;/pre&gt;
[[#TOP]]</text>
      <sha1>b6kk123nkbltcifrjkezc2it05ri5et</sha1>
    </revision>
    <revision>
      <id>3555</id>
      <parentid>3554</parentid>
      <timestamp>2018-09-28T02:27:31Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* Slicing */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="29467">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_3 Contributors of this page]
*Week 3 Playlist: https://www.youtube.com/playlist?list=PLc_j0TNIaWxOVx_z9jAM2UB3RqYNXaoEo
=List=
List is a flexible data structure used for storing a group of data separated by comma. The elements in a list need not be of the same data type.

'''Example:'''
       List_1 = [ 1, 2,3] or 
       List_1 = [&quot;coffee&quot;, &quot;Tea&quot;, &quot;Milk&quot;] or
       List_1 = [1,&quot;coffee&quot;, &quot;Tea&quot;, 3, &quot;5&quot;]

==List Creation==
&lt;pre&gt;a) A list can be created by simply putting values (separated by comma) between square brackets as given below,
       List_1 = [1,&quot;coffee&quot;, &quot;Tea&quot;, 3, &quot;5&quot;] #this creates a list by name List_1 containing following items


Or,
(b)A List can be created from scratch and elements can be added 
        List_2 = [ ]
        List_2.append(&quot;Kala&quot;)
        List_2.append(&quot;Mala&quot;)
Here we use &quot;append&quot; ,which is a function in python that enable us to append or attach an element to a list .
Thus List_2 will now hold [&quot;Kala&quot;,&quot;Mala&quot;]
&lt;/pre&gt;
[[#TOP]]

==Operations and Methods to work with List==
&lt;pre&gt;
a = [25,30,50,90,12,13]
b = [100,300,500,200,250]
&lt;/pre&gt;
&lt;hr&gt;
&lt;table border=2&gt;
  &lt;tr&gt;
    &lt;th&gt;&lt;b&gt;Method/&lt;br&gt;Operator&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Function&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Syntax&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Output&lt;/b&gt;&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;len()&lt;/td&gt;
    &lt;td&gt;Find length of a list&lt;/td&gt;
    &lt;td&gt;len(a)&lt;/td&gt;
    &lt;td&gt;6&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;max()&lt;/td&gt;
    &lt;td&gt;Find maximum element from the list&lt;/td&gt;
    &lt;td&gt;max(a)&lt;/td&gt;
    &lt;td&gt;90&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;min()&lt;/td&gt;
    &lt;td&gt;Find minimum element from the list&lt;/td&gt;
    &lt;td&gt;min(a)&lt;/td&gt;
    &lt;td&gt;12&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sum()&lt;/td&gt;
    &lt;td&gt;Returns sum of all elements of the list&lt;/td&gt;
    &lt;td&gt;sum(a)&lt;/td&gt;
    &lt;td&gt;220&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;reverse()&lt;/td&gt;
    &lt;td&gt;Reverses the original list&lt;/td&gt;
    &lt;td&gt;a.reverse()&lt;/td&gt;
    &lt;td&gt;[13, 12, 90, 50, 30, 25]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sort()&lt;/td&gt;
    &lt;td&gt;Sorts the original list in ascending order&lt;/td&gt;
    &lt;td&gt;a.sort()&lt;/td&gt;
    &lt;td&gt;[12, 13, 25, 30, 50, 90]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sorted()&lt;/td&gt;
    &lt;td&gt;Returns the new sorted list &lt;/td&gt;
    &lt;td&gt;sorted(a)&lt;/td&gt;
    &lt;td&gt;[12, 13, 25, 30, 50, 90]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;insert()&lt;/td&gt;
    &lt;td&gt;Insert at a particular index in the list, and shifts remaining elements&lt;/td&gt;
    &lt;td&gt;a.insert(3,3)&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 3, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;append()&lt;/td&gt;
    &lt;td&gt;Adds elements/object to the end of the list&lt;/td&gt;
    &lt;td&gt;a.append(5)&lt;br&gt;a.append([10,20])&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 5]&lt;br&gt;[25, 30, 50, 90, 12, 13, [10, 20]]&lt;br&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;extend()&lt;/td&gt;
    &lt;td&gt;Adds object to the end of the list as elements not as object&lt;/td&gt;
    &lt;td&gt;a.extend([10,20])&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 10, 20]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;*&amp;nbsp;&amp;nbsp;Repeatation&lt;br&gt;operator&lt;/td&gt;
    &lt;td&gt;Repeat the list for n times and returns a new list&lt;/td&gt;
    &lt;td&gt;a*2&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 25, 30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;+ Concatenation&lt;br&gt;operator&lt;/td&gt;
    &lt;td&gt;Concatenates two lists, and returns a new list&lt;/td&gt;
    &lt;td&gt;a+b&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 100, 300, 500, 200, 250]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;index()&lt;/td&gt;
    &lt;td&gt;Finds index of a particular element in the list or not&lt;/td&gt;
    &lt;td&gt;a.index(25)&lt;br&gt;a.index(0)&lt;br&gt;&lt;/td&gt;
    &lt;td&gt;0&lt;br&gt;&lt;br&gt;ValueError: 0 is not in list&lt;br&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;in operator&lt;/td&gt;
    &lt;td&gt;Finds whether a particular element is in the list or not, returns boolean&lt;/td&gt;
    &lt;td&gt;25 in a&lt;/td&gt;
    &lt;td&gt;True&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;not in operator&lt;/td&gt;
    &lt;td&gt;Checks if element is not available in list, returns boolean&lt;/td&gt;
    &lt;td&gt;25 not in a&lt;/td&gt;
    &lt;td&gt;False&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;count()&lt;/td&gt;
    &lt;td&gt;Counts the number of occurence of an element in the list&lt;/td&gt;
    &lt;td&gt;a.count(25)&lt;/td&gt;
    &lt;td&gt;1&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;remove()&lt;/td&gt;
    &lt;td&gt;Removes an element from the list&lt;/td&gt;
    &lt;td&gt;a.remove(25)&lt;/td&gt;
    &lt;td&gt; [30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;pop()&lt;/td&gt;
    &lt;td&gt;Delete and return item at index 0&lt;/td&gt;
    &lt;td&gt;a.pop(0)&lt;/td&gt;
    &lt;td&gt;25 , a will be [30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;del&lt;/td&gt;
    &lt;td&gt;Deletes item at a particular index from the list&lt;/td&gt;
    &lt;td&gt;del a[0]&lt;/td&gt;
    &lt;td&gt;[30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;all()&lt;/td&gt;
&lt;td&gt;Returns True, if all items in list are True or it is an empty list&lt;/td&gt;
&lt;td&gt;all([True, True, True])
all([])
&lt;/td&gt;
&lt;td&gt;True&lt;br&gt;
True&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;any()&lt;/td&gt;
&lt;td&gt;Returns True, if any item in list is True else return False&lt;/td&gt;
&lt;td&gt;any([True, True, True])&lt;br&gt;
any([True, False, True])&lt;br&gt;
any([])&lt;/td&gt;
&lt;td&gt;True&lt;br&gt;False&lt;br&gt;False&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;

==Printing the List==
=== Print whole list ===
A list can be printed simply or using a ''for / while'' loop 

 print(List_2)     # To print the entire list
This code will print      
 ['Kala','Mala']     

===Print element at a particular index===
&lt;pre&gt;
Using index position
    List_2[0]     # prints 'Kala' ,i.e,the value at index position 0.
    List_2[1]     # prints 'Mala'.
&lt;/pre&gt;
=== Without using index position ===
&lt;pre&gt;
for item in List_2:   # here item is a variable used to access elements in list.
       print(item)
   This code snippet prints 
    Kala
    Mala
&lt;/pre&gt;
[[#TOP]]

==Search for a particular element in list==
Elements in a list can be searched by one of the two ways:
=== using index() function===
&lt;pre&gt;
ages1 = [11,23,12,23,45]

#if element is available in the list, index() returns the index value on which, the element is present.
print(ages1.index(45))#Output: 4

#if element is not available in the list, index() returns ''ValueError''
print(ages1.index(0))#Output: ValueError:
&lt;/pre&gt;

In programming, if such error occurs, program gets terminated. It can be solved using exception handling.
e.g.
&lt;pre&gt;
ages1 = [11,23,12,23,45]

try:
    print(ages1.index(0))
except ValueError:
    print(&quot;Exception has occured&quot;)    
    print(&quot;Element is not found in the list&quot;)

&lt;/pre&gt;
&lt;pre&gt;
'''Output: 
Exception has occured
Element is not found in the list
'''&lt;/pre&gt;
[[#TOP]]

=== using 'in' operator===
''in'' operator is used to check whether a particular element is available in the list or not.e.g.

&lt;pre&gt;
ages1 = [11,23,12,23,45]
no=11

if no in ages1:
    print(&quot;no is there in the list&quot;)
else:    
    print(&quot;no is NOT there in the list&quot;)
&lt;/pre&gt;
&lt;pre&gt;
#Output: no is there in the list
&lt;/pre&gt;


'''Number is not there in the list'''
&lt;pre&gt;
ages1 = [11,23,12,23,45]
no=15

if no in ages1:
    print(&quot;no is there in the list&quot;)
else:    
    print(&quot;no is NOT there in the list&quot;)
&lt;/pre&gt;
&lt;pre&gt;
Output: no is NOT there in the list
&lt;/pre&gt;
[[#TOP]]

==Updating the List==
The lists can be updated using ''append'' or ''insert'' function.  Append adds the element to the end of the list and Insert adds the element in the specified position.
&lt;pre&gt;
   # add the element 'Sheela' to the end of the list.
   List_2.append(&quot;Sheela&quot;)    
   print (List_2) will output 
   ['Kala', 'Mala', 'Sheela']
&lt;/pre&gt;
   &lt;pre&gt;
# add the element &quot;Bala&quot; in the list at the index 1.
   List_2.insert(1,&quot;Bala&quot;)    
   print (List_2) will output 
   ['Kala', 'Bala','Mala', 'Sheela']
&lt;/pre&gt;

=== Extend the list by adding elements of other list at end using extend()===
&lt;pre&gt;
ages = [11,23,12,23,45]
ages.extend([57,58])
print(ages)
&lt;/pre&gt;

&lt;pre&gt;
#Output: [11, 23, 12, 23, 45, 57, 58]
&lt;/pre&gt;

==== Difference between ''append and extend'' ====
Difference between append and extend can be easily understood, by the following example.

&lt;pre&gt;
appendlist = [11,23,12,23,45]
appendlist.append([57,58])

extendlist= [11,23,12,23,45]
extendlist.extend([57,58])
&lt;/pre&gt;

&lt;pre&gt;
'''Output:
[11, 23, 12, 23, 45, [57, 58]]
[11, 23, 12, 23, 45, 57, 58]'''
&lt;/pre&gt;

[[#TOP]]

==Basic Operations on List==
===Frequency of Occurrence===
list.count(object) will return the number of times the object occur in the list.
  '''Example'''
    ages = [11,23,12,23,45,43,22,24,23]
    ages.count(23) will return
    3
    ages.count(100) will return
    0

===Length of the List===
len(list) will return the length of the list ie. the number of objects in the list.
  '''Example'''
&lt;pre&gt;
    ages = [11,23,12,23,45,43,22,24,23]
    len(ages) # Output: 9
&lt;/pre&gt;

To print the objects in the list either use ''for item in list'' or ''for index in range(len(list))''
&lt;pre&gt;
    for item in ages:       
        print (item)  
        (OR)
    for index in range(len(ages)) :
        print (ages[index])
&lt;/pre&gt;

===Sort the List===
list.sort() will sort the list in ascending order
  '''Example'''
    ages = [11,23,12,23,45,43,22,24,23]
    ages.sort() 
    print (ages) 
    [11, 12, 22, 23, 23, 23, 24, 43, 45]

[[#TOP]]

===Sort the List using sorted() function===
sorted(list1) will sort the list and return a new list, it doesn't modify the original list
&lt;br&gt;'''Example: Sort in ascending order'''
&lt;pre&gt;
ages = [11,23,12,23,45,43,22,24,23]
newList=sorted(ages)
print(newList)

#Output: [11, 12, 22, 23, 23, 23, 24, 43, 45]
&lt;/pre&gt;

&lt;br&gt;'''Example: Sort in descending order'''
&lt;pre&gt;
ages = [11,23,12,23,45,43,22,24,23]
newList=sorted(ages,reverse=True)
print(newList)

#Output: [45, 43, 24, 23, 23, 23, 22, 12, 11]
&lt;/pre&gt;

===Reverse the List===
list.reverse() will reverse the original list
  '''Example'''
    ages = [11, 12, 22, 23, 23, 23, 24, 43, 45]
    ages.reverse()
    print (ages)
    [45, 43, 24, 23, 23, 23, 22, 12, 11]

Both sort() and reverse() list operation will work on numeric and alphanumeric data list.

A special use of the reverse() function is to descend a list that is sorted in ascending order.

  '''Example'''
&lt;pre&gt;
ages = [11, 12, 22, 23, 23, 23, 24, 43, 45]
ages.sort()
print(ages)
ages.reverse()
print(ages)
&lt;/pre&gt;

===Slicing===
Used to retrieve an object or objects in a range as a list  
  '''Example'''

Use ''list[index]'' to retrieve the object at the given index
&lt;pre&gt;
In [1]: student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
In [2]: student[3]     #Object at index 3.  Remember index starts at 0
Out[2]: 'Geetha'      
&lt;/pre&gt;

Use ''list[start_index : end_index + 1]'' to retrieve objects from the start_index to end_index 
&lt;pre&gt;
In [3]: student[2:4]     # Objects from index 2 to 3 as List. Note the [ and ]
Out[3]: ['Vijay', 'Geetha']   
&lt;/pre&gt;

Use ''list[:]'' to retrieve objects from the starting of the list to the end of the list. 
The default start value will be the starting index of the list (i.e. 0) and the default end value
will be the length of the list 
         In [4]: student[:]        # prints the entire list
         Out[4]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma', 'Janani']


         In [5]: student[:5]       # prints the objects from the start of the list upto object at index 4
         Out[5]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran']


         In [6]: student[2:]       # prints the objects from index 2 upto the end of the list
         Out[6]: ['Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma', 'Janani']


Negative index too is available in Python. It starts from last element of the list. i.e.

         In [7]:student[-1]        #prints last index of list
         Out[7]: 'Janani'


         In [8]:student[-1:-8]     #prints empty list
         Out[8]: []


         In [9]:student[-8:-1]     #prints -8th index to -1st index elements
         Out[9]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma']

[[#TOP]]

===Removing Item from list ===
----

Is used to remove a specific item from the list.

'''Example:'''
 
Use list.remove(entry/value)  Or   del list[index]    Or list.pop(index)
         student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
         student.remove(&quot;Arun&quot;)   #This will delete item &quot;Arun&quot;
         Or    
         del student[0]           # This will delete item at index 0
         Or
         student.pop(0)         # This will delete and return item at index 0


         print(student)    
         Output: [&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]

[[#TOP]]
===Delete list ===
----
Used to delete complete list

'''Example'''

Use del &lt;list name&gt;
         student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
         del student

===Concatenation of two lists===
----
''+'' is the concatenation operator which is used concatenate two lists. 
&lt;pre&gt;
ages1 = [11,23,12,23,45]
ages2 = [25, 24, 43, 47]
age=ages1+ages2
print(age)
#Output: [11, 23, 12, 23, 45, 25, 24, 43, 47]
&lt;/pre&gt;

===Repeatation of a list ===
----
''*'' is the operator to repeat a particular list.
&lt;pre&gt;
ages1 = [11,23,12,23,45]
age=ages1*5 #ages1 list is repeated 5 times and stroed in ''age'' list
print(age)

#Output: [11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45]
&lt;/pre&gt;

=== all and any for List===
all() and any() are special functions to check whether all elements in iterable is ''True'' or any element is ''True''
&lt;ol&gt;
&lt;li&gt;If all elements in a list are ''True'', '''all()''' will return ''True''&lt;/li&gt;
&lt;li&gt;If iterable is ''empty'', '''all()''' will return ''True''&lt;/li&gt;
&lt;li&gt;If iterable contains at least one ''True'', '''any()''' will return ''True''&lt;/li&gt;
&lt;li&gt;If iterable is ''empty'', '''any()''' will return ''False''&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;
lsit=[True, True, True, True]
print(all(lsit))#Output: True
print(any(lsit))#Output: True

lsit1=[True, False, True, True]
print(all(lsit1))#Output: False
print(any(lsit1))#Output: True

lsit2=[False,False,False]
print(all(lsit2))#Output: False
print(any(lsit2))#Output: False

lsit3=[]
print(all(lsit3))#Output: True
print(any(lsit3))#Output: False
&lt;/pre&gt;

==Conditional Statements==
&lt;pre&gt;Conditionals are used to check the condition and change the flow of the program 
accordingly. They are realized in programming languages through if statement. The 
syntax is as follows :
         if condition : 
            statement
    '''Note:''' Do not forget indentation (inserting space/tab) in the line after the
 if condition.
    
    In case you want to execute a set of statements when a condition is true and another

set of statement when the condition is false.
         if condition : 
            statement 1
         else :
            statement 2
    
    Multiple if-else statements can be written as follows:
         if condition_1 : 
            statement 1
         elif condition_2 : # 'elif' is short for 'else if'
            statement 2
         elif condition_3 :
            statement 3
        .
        .
         else :
            final statement
&lt;/pre&gt;
[[#TOP]]

=Loops and Conditionals : Fizzbuzz=
====Loops====
&lt;pre&gt;
Loops are used to execute a set of repetitive statements. They are realized
through 'while' and 'for' loops in programming languages. The syntax of 'for' loop is 
as follows :
        for LOOPVARIABLE in SEQUENCE: 
            STATEMENTS
    '''e.g.''' to print all the data from a list we can write:
        for item in list_name
            print(item)
    OR
        for index in range(len(list_name))
            print(list_name[index])
    
    The syntax for while loop is as follows :
    
        while BOOLEANEXPRESSION: 
            STATEMENTS
            INCREMENT/DECREMENT
    
    '''e.g.''' if we want to print all numbers from 1 to 10
        i=1
        while i&lt;=10 :
            print(i,&quot; &quot;)
            i=i+1
    
    'while' loop has indefinite iteration (run-time unknown). So, there must be loop
 break statement in it.
 Whereas 'for' loop is definite in nature (i.e. known or predictable span).&lt;br&gt;

&lt;b&gt;NOTE: Python doesn't have anything like do-while loop.&lt;/b&gt;
&lt;/pre&gt;
[[#TOP]]

==Implementation==
Here, we try to demonstrate the concept of loops and conditionals through a game called Fizzbuzz. The rules are as follows :&lt;br/&gt;
[[File:fizzBuzz.gif]]

• if input number is a multiple of ’3’ print ”Fizz”
&lt;br/&gt;
• if input number is a multiple of ’5’ print ”Buzz”
&lt;br/&gt;
• if input number is a multiple of both '3' and ’5’ print ”FizzBuzz”
&lt;br/&gt;
The pseudo code is as follows :
&lt;pre&gt;
   If input no % 3 == 0 and  input no % 5 == 0 : 
       print ”Fizzbuzz”
   else if input no % 3 == 0 : 
       print ”Fizz”
   else if input no % 5 == 0 : 
       print ”Buzz”
   else :
       print the input no
&lt;/pre&gt;
The order of statements execution matters to get the desired output. The highest priority condition should be first followed by other. In fizzbuzz programming, first checking should be done for both divisibility of 3 and 5. If condition not satisfied only then it should check individually for 3 or 5. So carefully choosing the order is crucial for better programming.
Note: There is some effect of present condition statements chosen on next conditions statements. That is why in first attempt fizzbuzz programming got struck.

Example: 
&lt;pre&gt;
#Code to achieve the above requirement in python3.
i = int(input(&quot;Enter the number&quot;)) 
if i%3 == 0 and i%5 == 0: print(i,&quot;FizzBuzz&quot;)  
elif i%5 == 0: print(i,&quot;Buzz&quot;)
elif i%3 == 0: print(i,&quot;Fizz&quot;)
else: print(i)
&lt;/pre&gt;
Lets put the same into a loop for a range given by the user.
&lt;pre&gt;
def fizzbuzzgame(start,stop):
    for i in range(start,stop+1):
        if i%3 == 0 and i%5 == 0:
            print(i,&quot;FizzBuzz&quot;)
        elif i%5 == 0:
            print(i,&quot;Buzz&quot;)
        elif i%3 == 0:
            print(i,&quot;Fizz&quot;)
        else: print(i)

fizzbuzzgame(50,100)
&lt;/pre&gt;


=== Fizz Buzz game in Interactive mode with Score ===
'''By Ms. Ami Tusharkant Choksi'''
&lt;pre&gt;
def fizzbuzzgame(i):
        if i%3 == 0 and i%5 == 0:
            print(i,&quot;FizzBuzz&quot;)
            return(&quot;fzbz&quot;)
        elif i%5 == 0:
            print(i,&quot;Buzz&quot;)
            return(&quot;bz&quot;)
        elif i%3 == 0:
            print(i,&quot;Fizz&quot;)
            return(&quot;fz&quot;)
        else:
            print(i)
            return(&quot;no&quot;)

ch = 'y'
fizzbuzz=0
fizz=0
buzz=0
nothing=0
print(&quot;&quot;&quot;
 _____  ____  _____  _____  ____   __ __  _____  _____       ____   ____  ___ ___    ___ 
|     ||    ||     ||     ||    \ |  |  ||     ||     |     /    | /    ||   |   |  /  _]
|   __| |  | |__/  ||__/  ||  o  )|  |  ||__/  ||__/  |    |   __||  o  || _   _ | /  [_ 
|  |_   |  | |   __||   __||     ||  |  ||   __||   __|    |  |  ||     ||  \_/  ||    _]
|   _]  |  | |  /  ||  /  ||  O  ||  :  ||  /  ||  /  |    |  |_ ||  _  ||   |   ||   [_ 
|  |    |  | |     ||     ||     ||     ||     ||     |    |     ||  |  ||   |   ||     |
|__|   |____||_____||_____||_____| \__,_||_____||_____|    |___,_||__|__||___|___||_____|
                                                                                         
&quot;&quot;&quot;)   

while(ch == 'y'):
    n=int(input(&quot;Enter a Number : &quot;))
    winLoose=fizzbuzzgame(n)
    if(winLoose == &quot;fz&quot;):
        fizz+=1
    elif(winLoose == &quot;bz&quot;):
        buzz+=1
    elif(winLoose == &quot;fzbz&quot;):
        fizzbuzz+=1
    ch=input(&quot;Do you want to continue playing the game : (y/n)&quot;)
    if(ch=='n'):
        print('Congratulations, your score is\n FizzBuzz:%d\nFizz:%d\nBuzz:%d' %
(fizzbuzz,fizz,buzz))
    
'''Sample Output:

 _____  ____  _____  _____  ____   __ __  _____  _____       ____   ____  ___ ___    ___ 
|     ||    ||     ||     ||    \ |  |  ||     ||     |     /    | /    ||   |   |  /  _]
|   __| |  | |__/  ||__/  ||  o  )|  |  ||__/  ||__/  |    |   __||  o  || _   _ | /  [_ 
|  |_   |  | |   __||   __||     ||  |  ||   __||   __|    |  |  ||     ||  \_/  ||    _]
|   _]  |  | |  /  ||  /  ||  O  ||  :  ||  /  ||  /  |    |  |_ ||  _  ||   |   ||   [_ 
|  |    |  | |     ||     ||     ||     ||     ||     |    |     ||  |  ||   |   ||     |
|__|   |____||_____||_____||_____| \__,_||_____||_____|    |___,_||__|__||___|___||_____|
                                                                                         

Enter a Number : 666
666 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 777
777 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 555
555 FizzBuzz
Do you want to continue playing the game : (y/n)y
Enter a Number : 1
1
Do you want to continue playing the game : (y/n)y
Enter a Number : 789
789 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 25
25 Buzz
Do you want to continue playing the game : (y/n)n
Congratulations, your score is

FizzBuzz:1
Fizz:3
Buzz:1

&lt;/pre&gt;

=Crowd Computing: Just Estimate=
==Wisdom of Crowds==
The concept of ’Wisdom of Crowds’ was proposed by Francis Galton. A weight-judging competition was carried on at the annual show of the West of England Fat Stock and Poultry Exhibition recently held at Plymouth, A fat ox having been selected, competitors bought stamped and numbered cards, each, on which to inscribe their respective names, addresses, and estimates of what the ox would weigh after it had been slaughtered. Those who guessed most successfully received prizes. About 8oo tickets were issued to the par- ticipants. The middlemost estimate of all the estimates recorded was 1207 lbs and the actual weight of the ox was 1198 lbs.

==Our Experiment==
The crowd had to guess the number of candies/gems in a jar. Around 75 people participated in the experiment. The actual number of gems in the jar were 375. The median of all estimates came out to be 300 and the mean of all the estimates came out to be around 396. Median underestimated and mean overestimated the actual value. So according to recent studies, Trimmed mean must be used as an aggregate measure to estimate where Wisdom of Crowds is involved.
[[File:Gemsjar.jpg|center|200px|caption]]

===Trimmed Mean===
In these kinds of experiments, 10% trimmed mean is usually followed. For calculating 10% trimmed mean, remove 10% smallest and 10% largest values from the sample. Calculate the mean of the sample obtained. In the above experiment, the trimmed mean came out to be around 351 which is very close to the actual value.

==Implementation==
Here, we try to demonstrate the concept of trimmed mean through crowd computing.
 Input a list of estimates done by the crowd .
 Sort the list.
 Remove the 10% smallest values.
 Remove the 10% largest values.
 Calculate the mean of the new list obtained .&lt;hr&gt;

==Data of Experiment==       
    Estimates =[1000,1010,1786,2000,1500,1500,100,120,150,150,150,170,175,180,197,200,200,200,200,200,200,220,220,220,220,234,250,250,250,250,250,250,250,250,250,263,270,275,275,286,300,
                300,300,300,300,300,300,300,320,350,350,350,400, 400,400,400,400,450,467,500,500,500,500,500,500,500,550,550,600,600,600,650,700,700,720]

    '''CODE:'''
&lt;pre&gt;
Estimates = [1000,1010,1786,2000,1500,1500,100,120,150,150,150,170,175,180,197,200,200,200,200,200,200,220,220,220,220,234,250,250,250,250,250,250,250,250,250,263,270,275,275,286,300,                300,300,300,300,300,300,300,320,350,350,350,400,400,400,400,400,450,467,500,500,500,500,500,500,500,550,550,600,600,600,650,700,700,720]
Estimates.sort()
offset = int(0.10*len(Estimates))
for i in range(offset):
       del Estimates[0]
       del Estimates[-1]
Sum = 0    
for i in range(len(Estimates)):
       Sum += Estimates[i]
Mean_Value = Sum/len(Estimates)
print(&quot;Mean : &quot;, int(Mean_Value))
#Output:
Mean :  351
&lt;/pre&gt;
&lt;hr&gt;
==Trimmed Mean for the above example== 
&lt;h3&gt;Using scipy library&lt;/h3&gt;
&lt;pre&gt;
#import scipy to use the method of trim_mean
from scipy import stats
trimMean = stats.trim_mean(Estimates, 0.1) # Trim 10% at both ends
print(&quot;Trimmed Mean : &quot;,trimMean)
#Output:
Trimmed Mean :  335.1020408163265
&lt;/pre&gt;

&lt;h3&gt;Without using scipy library&lt;/h3&gt;
&lt;pre&gt;
#Trimmed mean with 10%
p=10/100
#sorted data
data=[2, 4, 6, 7, 11, 21, 81, 90, 105, 121]
n = len(data)
#Remove elements from both end
rem=int(n*p)
newData = data[rem:-rem]
mean = 0
for i in newData:
    mean += i
mean = int(mean/len(newData))
print(&quot;Trimmed mean : &quot;,mean)
#Output: Trimmed mean :  40
&lt;/pre&gt;
[[#Top]]

=Jumbled_Words Permutations: Jumbled Words=
==What are Permutations ?==
A permutation also called ordering of selected number of elements from a list denoted by nPr here we are choosing all elements of a list and so n=r&lt;br&gt;
nPr=n!/(n-r)!&lt;br&gt; as n=r
nPn=n!&lt;br&gt; which gives all possible arrangement of elements present in a list.

 For example, permutations of list [1,2,3] are [1,2,3], [1,3,2], [2,1,3], [2,3,1], 
[3,1,2], and [3,2,1]. 
The number of permutations of a list of elements nPn is given by n!. For example, there are 2! = 2 x 1 = 2 permutations of [1,2], namely [1,2] and [2,1], and 3! = 3 x 2 x 1 = 6 permutations of [1,2,3], as mentioned above.&lt;br/&gt;
[[File:Permutations.jpg]]

==Implementation==
Here, we try to demonstrate the concept of permutations through jumbled words. It is a two player game in which one person presents the other person a different permutation of the word in his mind. The other person has to guess the right word. If he guesses, the he wins otherwise he loses.
 Input an list of words.
 Randomly pick a word from the list of words .
 Shuffle this word and present it to the other player.
 if word guesses by the player is same as the one picked from list of w
     player wins
 else
     player loses

ALTERNATE CODE TO GENERATE THIS GAME:
&lt;pre&gt;
import random
p1=input(&quot;enter player 1 name:&quot;)
p2=input(&quot;enter player 2 name:&quot;)
l=[&quot;rainbow&quot;,&quot;computer&quot;,&quot;robot&quot;,&quot;butter&quot;,&quot;vegetable&quot;,&quot;science&quot;,&quot;correct&quot;]
c1=c2=a1=a2=f1=f2=0
k=1
i=3
def play():
    n=random.choice(l)        ##n=chooses a word from list l
    l1=[]
    for j in n:
       l1.append(j)      ##creates a list for word in n
    for t in range(len(l1)):
       p=random.choice(l1)     ##this randomly displays letters in the list
       print(p)
       l1.remove(p)          ##to avoid the repetition of a letter
    s=input(&quot;enter the word:&quot;)
    if(s==n):
        print(&quot;correct&quot;)
        return 1
    else:
        print(&quot;not correct&quot;)
        print(&quot;answer is&quot;,n)
        return 0
def stat():
     print(&quot;player 1:&quot;)
     print(&quot;score:&quot;,c1)
     print(&quot;answered:&quot;,a1)
     print(&quot;failed:&quot;,f1)
     print(&quot;.............&quot;)
     print(&quot;player 2:&quot;)
     print(&quot;score:&quot;,c2)
     print(&quot;answered:&quot;,a2)
     print(&quot;failed&quot;,f2)
     if(c1&gt;c2):
         print(p1,&quot; won over &quot;,p2)
     elif(c1==c2):
         print(&quot;draw game&quot;)
     else:
         print(p2,&quot; won over &quot;,p1) 
while(i!=4):
      if(i==3):
         if(k==1):
             print(&quot;player 1 turn&quot;)
             print(&quot;your jumbled word is:&quot;)
             k=k+1
             m=play()
             if(m==1):      ##if guessed answer is correct,then score and no.of answered count will be increased
                c1+=1
                a1+=1
             else:
                f1+=1       ##else count of no.of failed to answered will be incremented
         else:
             print(&quot;player 2 turn&quot;)
             print(&quot;your jumbled word is:&quot;)
             k=k-1
             m=play()
             if(m==1):
                c2=c2+1
                a2=a2+1
             else:
                f2=f2+1
       if(i==2):
             print(&quot;present status&quot;)
             stat()
       i=int(input(&quot;enter your choice  1.stop 2.status 3.continue&quot;))
       if(i==1):
             stat()
             i=i+3
&lt;/pre&gt;
&lt;hr&gt;
=== JumbledWord Simple Logic, In Short ===
[[File:jumbledWord.gif]]
&lt;hr&gt;
'''Logic to create a Jumbled Word'''
&lt;hr&gt;
&lt;pre&gt;
#Get Jumbled Word and print it Horizontally
import random

def getJumbledWord(b):
    jumble=''
    l1 = [ b[i] for i in range(0, len(b)) ]
    for t in range(len(l1)):
       p=random.choice(l1)     ##this randomly gets letters from the list      
       jumble=jumble+p       
       l1.remove(p)
    return jumble

b=input(&quot;Enter a word to make it jumbled : &quot;)
print(&quot;Jumbled Word : &quot;, getJumbledWord(b))
&lt;/pre&gt;
&lt;hr&gt;
'''Another Logic to create a Jumbled Word'''
&lt;hr&gt;
&lt;pre&gt;
b=input(&quot;Enter a word to make it jumbled : &quot;)

def getJumbledWord1(b):
    l1 = [ b[i] for i in range(0, len(b)) ]
    random.shuffle(l1)
    str1 = ''.join(l1)
    return str1

print(&quot;Jumbled Word : &quot;, getJumbledWord1(b))
&lt;/pre&gt;

====Sample Output:====
&lt;pre&gt;
---- Output1 
Enter a word to make it jumbled : butter
Jumbled Word :  tbture

---- Output2 
Enter a word to make it jumbled : petriotism
Jumbled Word :  pittrosime
&lt;/pre&gt;

=Theory of Evolution=

== What is Evolution ? ==
Evolution is the change in heritable characteristics over successive generations. The theory of evolution explains that DNA, which acts as a carrier of genetic information from one generation to other, tends to change or mutate occasionally. These changes are reflected in next generations to come. This is how life has evolved on earth from bacteria to human beings.&lt;br&gt;
[[File:Evolution.png|500px]]

== Implementation ==
&lt;pre&gt;An array representing DNA is stored in a file. As genes are forms of DNA, they contain information to be transferred to forthcoming generations. Assume that information is in the form of bits (in the form of 0s and 1s). A number is picked randomly from 1 to the size of the array. A new parameter has been introduced which decides whether mutation would occur or not. If the value of this new parameter is 1 (It is picked randomly from 1 to 100), then only change is reflected down the generations, otherwise it is not. The pseudo code is as follows :
Input an array containing genetic information .
Randomly generate a number (say m) from 1 to length of the array. Randomly generate other number (say p) from 1 to 100.
 
    if p is equal to 1 then 
        if m is 1 then
          set it to 0
        else
          set it to 1
&lt;/pre&gt;
[[#TOP]]</text>
      <sha1>t9bomk6t8jtlcpfqafhh1rjinyw476z</sha1>
    </revision>
    <revision>
      <id>3557</id>
      <parentid>3555</parentid>
      <timestamp>2018-09-28T02:28:00Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* Slicing */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="29461">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_3 Contributors of this page]
*Week 3 Playlist: https://www.youtube.com/playlist?list=PLc_j0TNIaWxOVx_z9jAM2UB3RqYNXaoEo
=List=
List is a flexible data structure used for storing a group of data separated by comma. The elements in a list need not be of the same data type.

'''Example:'''
       List_1 = [ 1, 2,3] or 
       List_1 = [&quot;coffee&quot;, &quot;Tea&quot;, &quot;Milk&quot;] or
       List_1 = [1,&quot;coffee&quot;, &quot;Tea&quot;, 3, &quot;5&quot;]

==List Creation==
&lt;pre&gt;a) A list can be created by simply putting values (separated by comma) between square brackets as given below,
       List_1 = [1,&quot;coffee&quot;, &quot;Tea&quot;, 3, &quot;5&quot;] #this creates a list by name List_1 containing following items


Or,
(b)A List can be created from scratch and elements can be added 
        List_2 = [ ]
        List_2.append(&quot;Kala&quot;)
        List_2.append(&quot;Mala&quot;)
Here we use &quot;append&quot; ,which is a function in python that enable us to append or attach an element to a list .
Thus List_2 will now hold [&quot;Kala&quot;,&quot;Mala&quot;]
&lt;/pre&gt;
[[#TOP]]

==Operations and Methods to work with List==
&lt;pre&gt;
a = [25,30,50,90,12,13]
b = [100,300,500,200,250]
&lt;/pre&gt;
&lt;hr&gt;
&lt;table border=2&gt;
  &lt;tr&gt;
    &lt;th&gt;&lt;b&gt;Method/&lt;br&gt;Operator&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Function&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Syntax&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Output&lt;/b&gt;&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;len()&lt;/td&gt;
    &lt;td&gt;Find length of a list&lt;/td&gt;
    &lt;td&gt;len(a)&lt;/td&gt;
    &lt;td&gt;6&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;max()&lt;/td&gt;
    &lt;td&gt;Find maximum element from the list&lt;/td&gt;
    &lt;td&gt;max(a)&lt;/td&gt;
    &lt;td&gt;90&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;min()&lt;/td&gt;
    &lt;td&gt;Find minimum element from the list&lt;/td&gt;
    &lt;td&gt;min(a)&lt;/td&gt;
    &lt;td&gt;12&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sum()&lt;/td&gt;
    &lt;td&gt;Returns sum of all elements of the list&lt;/td&gt;
    &lt;td&gt;sum(a)&lt;/td&gt;
    &lt;td&gt;220&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;reverse()&lt;/td&gt;
    &lt;td&gt;Reverses the original list&lt;/td&gt;
    &lt;td&gt;a.reverse()&lt;/td&gt;
    &lt;td&gt;[13, 12, 90, 50, 30, 25]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sort()&lt;/td&gt;
    &lt;td&gt;Sorts the original list in ascending order&lt;/td&gt;
    &lt;td&gt;a.sort()&lt;/td&gt;
    &lt;td&gt;[12, 13, 25, 30, 50, 90]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sorted()&lt;/td&gt;
    &lt;td&gt;Returns the new sorted list &lt;/td&gt;
    &lt;td&gt;sorted(a)&lt;/td&gt;
    &lt;td&gt;[12, 13, 25, 30, 50, 90]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;insert()&lt;/td&gt;
    &lt;td&gt;Insert at a particular index in the list, and shifts remaining elements&lt;/td&gt;
    &lt;td&gt;a.insert(3,3)&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 3, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;append()&lt;/td&gt;
    &lt;td&gt;Adds elements/object to the end of the list&lt;/td&gt;
    &lt;td&gt;a.append(5)&lt;br&gt;a.append([10,20])&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 5]&lt;br&gt;[25, 30, 50, 90, 12, 13, [10, 20]]&lt;br&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;extend()&lt;/td&gt;
    &lt;td&gt;Adds object to the end of the list as elements not as object&lt;/td&gt;
    &lt;td&gt;a.extend([10,20])&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 10, 20]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;*&amp;nbsp;&amp;nbsp;Repeatation&lt;br&gt;operator&lt;/td&gt;
    &lt;td&gt;Repeat the list for n times and returns a new list&lt;/td&gt;
    &lt;td&gt;a*2&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 25, 30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;+ Concatenation&lt;br&gt;operator&lt;/td&gt;
    &lt;td&gt;Concatenates two lists, and returns a new list&lt;/td&gt;
    &lt;td&gt;a+b&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 100, 300, 500, 200, 250]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;index()&lt;/td&gt;
    &lt;td&gt;Finds index of a particular element in the list or not&lt;/td&gt;
    &lt;td&gt;a.index(25)&lt;br&gt;a.index(0)&lt;br&gt;&lt;/td&gt;
    &lt;td&gt;0&lt;br&gt;&lt;br&gt;ValueError: 0 is not in list&lt;br&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;in operator&lt;/td&gt;
    &lt;td&gt;Finds whether a particular element is in the list or not, returns boolean&lt;/td&gt;
    &lt;td&gt;25 in a&lt;/td&gt;
    &lt;td&gt;True&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;not in operator&lt;/td&gt;
    &lt;td&gt;Checks if element is not available in list, returns boolean&lt;/td&gt;
    &lt;td&gt;25 not in a&lt;/td&gt;
    &lt;td&gt;False&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;count()&lt;/td&gt;
    &lt;td&gt;Counts the number of occurence of an element in the list&lt;/td&gt;
    &lt;td&gt;a.count(25)&lt;/td&gt;
    &lt;td&gt;1&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;remove()&lt;/td&gt;
    &lt;td&gt;Removes an element from the list&lt;/td&gt;
    &lt;td&gt;a.remove(25)&lt;/td&gt;
    &lt;td&gt; [30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;pop()&lt;/td&gt;
    &lt;td&gt;Delete and return item at index 0&lt;/td&gt;
    &lt;td&gt;a.pop(0)&lt;/td&gt;
    &lt;td&gt;25 , a will be [30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;del&lt;/td&gt;
    &lt;td&gt;Deletes item at a particular index from the list&lt;/td&gt;
    &lt;td&gt;del a[0]&lt;/td&gt;
    &lt;td&gt;[30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;all()&lt;/td&gt;
&lt;td&gt;Returns True, if all items in list are True or it is an empty list&lt;/td&gt;
&lt;td&gt;all([True, True, True])
all([])
&lt;/td&gt;
&lt;td&gt;True&lt;br&gt;
True&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;any()&lt;/td&gt;
&lt;td&gt;Returns True, if any item in list is True else return False&lt;/td&gt;
&lt;td&gt;any([True, True, True])&lt;br&gt;
any([True, False, True])&lt;br&gt;
any([])&lt;/td&gt;
&lt;td&gt;True&lt;br&gt;False&lt;br&gt;False&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;

==Printing the List==
=== Print whole list ===
A list can be printed simply or using a ''for / while'' loop 

 print(List_2)     # To print the entire list
This code will print      
 ['Kala','Mala']     

===Print element at a particular index===
&lt;pre&gt;
Using index position
    List_2[0]     # prints 'Kala' ,i.e,the value at index position 0.
    List_2[1]     # prints 'Mala'.
&lt;/pre&gt;
=== Without using index position ===
&lt;pre&gt;
for item in List_2:   # here item is a variable used to access elements in list.
       print(item)
   This code snippet prints 
    Kala
    Mala
&lt;/pre&gt;
[[#TOP]]

==Search for a particular element in list==
Elements in a list can be searched by one of the two ways:
=== using index() function===
&lt;pre&gt;
ages1 = [11,23,12,23,45]

#if element is available in the list, index() returns the index value on which, the element is present.
print(ages1.index(45))#Output: 4

#if element is not available in the list, index() returns ''ValueError''
print(ages1.index(0))#Output: ValueError:
&lt;/pre&gt;

In programming, if such error occurs, program gets terminated. It can be solved using exception handling.
e.g.
&lt;pre&gt;
ages1 = [11,23,12,23,45]

try:
    print(ages1.index(0))
except ValueError:
    print(&quot;Exception has occured&quot;)    
    print(&quot;Element is not found in the list&quot;)

&lt;/pre&gt;
&lt;pre&gt;
'''Output: 
Exception has occured
Element is not found in the list
'''&lt;/pre&gt;
[[#TOP]]

=== using 'in' operator===
''in'' operator is used to check whether a particular element is available in the list or not.e.g.

&lt;pre&gt;
ages1 = [11,23,12,23,45]
no=11

if no in ages1:
    print(&quot;no is there in the list&quot;)
else:    
    print(&quot;no is NOT there in the list&quot;)
&lt;/pre&gt;
&lt;pre&gt;
#Output: no is there in the list
&lt;/pre&gt;


'''Number is not there in the list'''
&lt;pre&gt;
ages1 = [11,23,12,23,45]
no=15

if no in ages1:
    print(&quot;no is there in the list&quot;)
else:    
    print(&quot;no is NOT there in the list&quot;)
&lt;/pre&gt;
&lt;pre&gt;
Output: no is NOT there in the list
&lt;/pre&gt;
[[#TOP]]

==Updating the List==
The lists can be updated using ''append'' or ''insert'' function.  Append adds the element to the end of the list and Insert adds the element in the specified position.
&lt;pre&gt;
   # add the element 'Sheela' to the end of the list.
   List_2.append(&quot;Sheela&quot;)    
   print (List_2) will output 
   ['Kala', 'Mala', 'Sheela']
&lt;/pre&gt;
   &lt;pre&gt;
# add the element &quot;Bala&quot; in the list at the index 1.
   List_2.insert(1,&quot;Bala&quot;)    
   print (List_2) will output 
   ['Kala', 'Bala','Mala', 'Sheela']
&lt;/pre&gt;

=== Extend the list by adding elements of other list at end using extend()===
&lt;pre&gt;
ages = [11,23,12,23,45]
ages.extend([57,58])
print(ages)
&lt;/pre&gt;

&lt;pre&gt;
#Output: [11, 23, 12, 23, 45, 57, 58]
&lt;/pre&gt;

==== Difference between ''append and extend'' ====
Difference between append and extend can be easily understood, by the following example.

&lt;pre&gt;
appendlist = [11,23,12,23,45]
appendlist.append([57,58])

extendlist= [11,23,12,23,45]
extendlist.extend([57,58])
&lt;/pre&gt;

&lt;pre&gt;
'''Output:
[11, 23, 12, 23, 45, [57, 58]]
[11, 23, 12, 23, 45, 57, 58]'''
&lt;/pre&gt;

[[#TOP]]

==Basic Operations on List==
===Frequency of Occurrence===
list.count(object) will return the number of times the object occur in the list.
  '''Example'''
    ages = [11,23,12,23,45,43,22,24,23]
    ages.count(23) will return
    3
    ages.count(100) will return
    0

===Length of the List===
len(list) will return the length of the list ie. the number of objects in the list.
  '''Example'''
&lt;pre&gt;
    ages = [11,23,12,23,45,43,22,24,23]
    len(ages) # Output: 9
&lt;/pre&gt;

To print the objects in the list either use ''for item in list'' or ''for index in range(len(list))''
&lt;pre&gt;
    for item in ages:       
        print (item)  
        (OR)
    for index in range(len(ages)) :
        print (ages[index])
&lt;/pre&gt;

===Sort the List===
list.sort() will sort the list in ascending order
  '''Example'''
    ages = [11,23,12,23,45,43,22,24,23]
    ages.sort() 
    print (ages) 
    [11, 12, 22, 23, 23, 23, 24, 43, 45]

[[#TOP]]

===Sort the List using sorted() function===
sorted(list1) will sort the list and return a new list, it doesn't modify the original list
&lt;br&gt;'''Example: Sort in ascending order'''
&lt;pre&gt;
ages = [11,23,12,23,45,43,22,24,23]
newList=sorted(ages)
print(newList)

#Output: [11, 12, 22, 23, 23, 23, 24, 43, 45]
&lt;/pre&gt;

&lt;br&gt;'''Example: Sort in descending order'''
&lt;pre&gt;
ages = [11,23,12,23,45,43,22,24,23]
newList=sorted(ages,reverse=True)
print(newList)

#Output: [45, 43, 24, 23, 23, 23, 22, 12, 11]
&lt;/pre&gt;

===Reverse the List===
list.reverse() will reverse the original list
  '''Example'''
    ages = [11, 12, 22, 23, 23, 23, 24, 43, 45]
    ages.reverse()
    print (ages)
    [45, 43, 24, 23, 23, 23, 22, 12, 11]

Both sort() and reverse() list operation will work on numeric and alphanumeric data list.

A special use of the reverse() function is to descend a list that is sorted in ascending order.

  '''Example'''
&lt;pre&gt;
ages = [11, 12, 22, 23, 23, 23, 24, 43, 45]
ages.sort()
print(ages)
ages.reverse()
print(ages)
&lt;/pre&gt;

===Slicing===
Used to retrieve an object or objects in a range as a list  
  '''Example'''

Use ''list[index]'' to retrieve the object at the given index
&lt;pre&gt;
In [1]: student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
In [2]: student[3]     #Object at index 3.  Remember index starts at 0
Out[2]: 'Geetha'      
&lt;/pre&gt;

Use ''list[start_index : end_index + 1]'' to retrieve objects from the start_index to end_index 
&lt;pre&gt;
In [3]: student[2:4]     # Objects from index 2 to 3 as List. Note the [ and ]
Out[3]: ['Vijay', 'Geetha']   
&lt;/pre&gt;

Use ''list[:]'' to retrieve objects from the starting of the list to the end of the list. 
The default start value will be the starting index of the list (i.e. 0) and the default end value
will be the length of the list 
&lt;pre&gt;
In [4]: student[:]        # prints the entire list
Out[4]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma', 'Janani']
&lt;/pre&gt;

         In [5]: student[:5]       # prints the objects from the start of the list upto object at index 4
         Out[5]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran']


         In [6]: student[2:]       # prints the objects from index 2 upto the end of the list
         Out[6]: ['Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma', 'Janani']


Negative index too is available in Python. It starts from last element of the list. i.e.

         In [7]:student[-1]        #prints last index of list
         Out[7]: 'Janani'


         In [8]:student[-1:-8]     #prints empty list
         Out[8]: []


         In [9]:student[-8:-1]     #prints -8th index to -1st index elements
         Out[9]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma']

[[#TOP]]

===Removing Item from list ===
----

Is used to remove a specific item from the list.

'''Example:'''
 
Use list.remove(entry/value)  Or   del list[index]    Or list.pop(index)
         student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
         student.remove(&quot;Arun&quot;)   #This will delete item &quot;Arun&quot;
         Or    
         del student[0]           # This will delete item at index 0
         Or
         student.pop(0)         # This will delete and return item at index 0


         print(student)    
         Output: [&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]

[[#TOP]]
===Delete list ===
----
Used to delete complete list

'''Example'''

Use del &lt;list name&gt;
         student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
         del student

===Concatenation of two lists===
----
''+'' is the concatenation operator which is used concatenate two lists. 
&lt;pre&gt;
ages1 = [11,23,12,23,45]
ages2 = [25, 24, 43, 47]
age=ages1+ages2
print(age)
#Output: [11, 23, 12, 23, 45, 25, 24, 43, 47]
&lt;/pre&gt;

===Repeatation of a list ===
----
''*'' is the operator to repeat a particular list.
&lt;pre&gt;
ages1 = [11,23,12,23,45]
age=ages1*5 #ages1 list is repeated 5 times and stroed in ''age'' list
print(age)

#Output: [11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45]
&lt;/pre&gt;

=== all and any for List===
all() and any() are special functions to check whether all elements in iterable is ''True'' or any element is ''True''
&lt;ol&gt;
&lt;li&gt;If all elements in a list are ''True'', '''all()''' will return ''True''&lt;/li&gt;
&lt;li&gt;If iterable is ''empty'', '''all()''' will return ''True''&lt;/li&gt;
&lt;li&gt;If iterable contains at least one ''True'', '''any()''' will return ''True''&lt;/li&gt;
&lt;li&gt;If iterable is ''empty'', '''any()''' will return ''False''&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;
lsit=[True, True, True, True]
print(all(lsit))#Output: True
print(any(lsit))#Output: True

lsit1=[True, False, True, True]
print(all(lsit1))#Output: False
print(any(lsit1))#Output: True

lsit2=[False,False,False]
print(all(lsit2))#Output: False
print(any(lsit2))#Output: False

lsit3=[]
print(all(lsit3))#Output: True
print(any(lsit3))#Output: False
&lt;/pre&gt;

==Conditional Statements==
&lt;pre&gt;Conditionals are used to check the condition and change the flow of the program 
accordingly. They are realized in programming languages through if statement. The 
syntax is as follows :
         if condition : 
            statement
    '''Note:''' Do not forget indentation (inserting space/tab) in the line after the
 if condition.
    
    In case you want to execute a set of statements when a condition is true and another

set of statement when the condition is false.
         if condition : 
            statement 1
         else :
            statement 2
    
    Multiple if-else statements can be written as follows:
         if condition_1 : 
            statement 1
         elif condition_2 : # 'elif' is short for 'else if'
            statement 2
         elif condition_3 :
            statement 3
        .
        .
         else :
            final statement
&lt;/pre&gt;
[[#TOP]]

=Loops and Conditionals : Fizzbuzz=
====Loops====
&lt;pre&gt;
Loops are used to execute a set of repetitive statements. They are realized
through 'while' and 'for' loops in programming languages. The syntax of 'for' loop is 
as follows :
        for LOOPVARIABLE in SEQUENCE: 
            STATEMENTS
    '''e.g.''' to print all the data from a list we can write:
        for item in list_name
            print(item)
    OR
        for index in range(len(list_name))
            print(list_name[index])
    
    The syntax for while loop is as follows :
    
        while BOOLEANEXPRESSION: 
            STATEMENTS
            INCREMENT/DECREMENT
    
    '''e.g.''' if we want to print all numbers from 1 to 10
        i=1
        while i&lt;=10 :
            print(i,&quot; &quot;)
            i=i+1
    
    'while' loop has indefinite iteration (run-time unknown). So, there must be loop
 break statement in it.
 Whereas 'for' loop is definite in nature (i.e. known or predictable span).&lt;br&gt;

&lt;b&gt;NOTE: Python doesn't have anything like do-while loop.&lt;/b&gt;
&lt;/pre&gt;
[[#TOP]]

==Implementation==
Here, we try to demonstrate the concept of loops and conditionals through a game called Fizzbuzz. The rules are as follows :&lt;br/&gt;
[[File:fizzBuzz.gif]]

• if input number is a multiple of ’3’ print ”Fizz”
&lt;br/&gt;
• if input number is a multiple of ’5’ print ”Buzz”
&lt;br/&gt;
• if input number is a multiple of both '3' and ’5’ print ”FizzBuzz”
&lt;br/&gt;
The pseudo code is as follows :
&lt;pre&gt;
   If input no % 3 == 0 and  input no % 5 == 0 : 
       print ”Fizzbuzz”
   else if input no % 3 == 0 : 
       print ”Fizz”
   else if input no % 5 == 0 : 
       print ”Buzz”
   else :
       print the input no
&lt;/pre&gt;
The order of statements execution matters to get the desired output. The highest priority condition should be first followed by other. In fizzbuzz programming, first checking should be done for both divisibility of 3 and 5. If condition not satisfied only then it should check individually for 3 or 5. So carefully choosing the order is crucial for better programming.
Note: There is some effect of present condition statements chosen on next conditions statements. That is why in first attempt fizzbuzz programming got struck.

Example: 
&lt;pre&gt;
#Code to achieve the above requirement in python3.
i = int(input(&quot;Enter the number&quot;)) 
if i%3 == 0 and i%5 == 0: print(i,&quot;FizzBuzz&quot;)  
elif i%5 == 0: print(i,&quot;Buzz&quot;)
elif i%3 == 0: print(i,&quot;Fizz&quot;)
else: print(i)
&lt;/pre&gt;
Lets put the same into a loop for a range given by the user.
&lt;pre&gt;
def fizzbuzzgame(start,stop):
    for i in range(start,stop+1):
        if i%3 == 0 and i%5 == 0:
            print(i,&quot;FizzBuzz&quot;)
        elif i%5 == 0:
            print(i,&quot;Buzz&quot;)
        elif i%3 == 0:
            print(i,&quot;Fizz&quot;)
        else: print(i)

fizzbuzzgame(50,100)
&lt;/pre&gt;


=== Fizz Buzz game in Interactive mode with Score ===
'''By Ms. Ami Tusharkant Choksi'''
&lt;pre&gt;
def fizzbuzzgame(i):
        if i%3 == 0 and i%5 == 0:
            print(i,&quot;FizzBuzz&quot;)
            return(&quot;fzbz&quot;)
        elif i%5 == 0:
            print(i,&quot;Buzz&quot;)
            return(&quot;bz&quot;)
        elif i%3 == 0:
            print(i,&quot;Fizz&quot;)
            return(&quot;fz&quot;)
        else:
            print(i)
            return(&quot;no&quot;)

ch = 'y'
fizzbuzz=0
fizz=0
buzz=0
nothing=0
print(&quot;&quot;&quot;
 _____  ____  _____  _____  ____   __ __  _____  _____       ____   ____  ___ ___    ___ 
|     ||    ||     ||     ||    \ |  |  ||     ||     |     /    | /    ||   |   |  /  _]
|   __| |  | |__/  ||__/  ||  o  )|  |  ||__/  ||__/  |    |   __||  o  || _   _ | /  [_ 
|  |_   |  | |   __||   __||     ||  |  ||   __||   __|    |  |  ||     ||  \_/  ||    _]
|   _]  |  | |  /  ||  /  ||  O  ||  :  ||  /  ||  /  |    |  |_ ||  _  ||   |   ||   [_ 
|  |    |  | |     ||     ||     ||     ||     ||     |    |     ||  |  ||   |   ||     |
|__|   |____||_____||_____||_____| \__,_||_____||_____|    |___,_||__|__||___|___||_____|
                                                                                         
&quot;&quot;&quot;)   

while(ch == 'y'):
    n=int(input(&quot;Enter a Number : &quot;))
    winLoose=fizzbuzzgame(n)
    if(winLoose == &quot;fz&quot;):
        fizz+=1
    elif(winLoose == &quot;bz&quot;):
        buzz+=1
    elif(winLoose == &quot;fzbz&quot;):
        fizzbuzz+=1
    ch=input(&quot;Do you want to continue playing the game : (y/n)&quot;)
    if(ch=='n'):
        print('Congratulations, your score is\n FizzBuzz:%d\nFizz:%d\nBuzz:%d' %
(fizzbuzz,fizz,buzz))
    
'''Sample Output:

 _____  ____  _____  _____  ____   __ __  _____  _____       ____   ____  ___ ___    ___ 
|     ||    ||     ||     ||    \ |  |  ||     ||     |     /    | /    ||   |   |  /  _]
|   __| |  | |__/  ||__/  ||  o  )|  |  ||__/  ||__/  |    |   __||  o  || _   _ | /  [_ 
|  |_   |  | |   __||   __||     ||  |  ||   __||   __|    |  |  ||     ||  \_/  ||    _]
|   _]  |  | |  /  ||  /  ||  O  ||  :  ||  /  ||  /  |    |  |_ ||  _  ||   |   ||   [_ 
|  |    |  | |     ||     ||     ||     ||     ||     |    |     ||  |  ||   |   ||     |
|__|   |____||_____||_____||_____| \__,_||_____||_____|    |___,_||__|__||___|___||_____|
                                                                                         

Enter a Number : 666
666 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 777
777 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 555
555 FizzBuzz
Do you want to continue playing the game : (y/n)y
Enter a Number : 1
1
Do you want to continue playing the game : (y/n)y
Enter a Number : 789
789 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 25
25 Buzz
Do you want to continue playing the game : (y/n)n
Congratulations, your score is

FizzBuzz:1
Fizz:3
Buzz:1

&lt;/pre&gt;

=Crowd Computing: Just Estimate=
==Wisdom of Crowds==
The concept of ’Wisdom of Crowds’ was proposed by Francis Galton. A weight-judging competition was carried on at the annual show of the West of England Fat Stock and Poultry Exhibition recently held at Plymouth, A fat ox having been selected, competitors bought stamped and numbered cards, each, on which to inscribe their respective names, addresses, and estimates of what the ox would weigh after it had been slaughtered. Those who guessed most successfully received prizes. About 8oo tickets were issued to the par- ticipants. The middlemost estimate of all the estimates recorded was 1207 lbs and the actual weight of the ox was 1198 lbs.

==Our Experiment==
The crowd had to guess the number of candies/gems in a jar. Around 75 people participated in the experiment. The actual number of gems in the jar were 375. The median of all estimates came out to be 300 and the mean of all the estimates came out to be around 396. Median underestimated and mean overestimated the actual value. So according to recent studies, Trimmed mean must be used as an aggregate measure to estimate where Wisdom of Crowds is involved.
[[File:Gemsjar.jpg|center|200px|caption]]

===Trimmed Mean===
In these kinds of experiments, 10% trimmed mean is usually followed. For calculating 10% trimmed mean, remove 10% smallest and 10% largest values from the sample. Calculate the mean of the sample obtained. In the above experiment, the trimmed mean came out to be around 351 which is very close to the actual value.

==Implementation==
Here, we try to demonstrate the concept of trimmed mean through crowd computing.
 Input a list of estimates done by the crowd .
 Sort the list.
 Remove the 10% smallest values.
 Remove the 10% largest values.
 Calculate the mean of the new list obtained .&lt;hr&gt;

==Data of Experiment==       
    Estimates =[1000,1010,1786,2000,1500,1500,100,120,150,150,150,170,175,180,197,200,200,200,200,200,200,220,220,220,220,234,250,250,250,250,250,250,250,250,250,263,270,275,275,286,300,
                300,300,300,300,300,300,300,320,350,350,350,400, 400,400,400,400,450,467,500,500,500,500,500,500,500,550,550,600,600,600,650,700,700,720]

    '''CODE:'''
&lt;pre&gt;
Estimates = [1000,1010,1786,2000,1500,1500,100,120,150,150,150,170,175,180,197,200,200,200,200,200,200,220,220,220,220,234,250,250,250,250,250,250,250,250,250,263,270,275,275,286,300,                300,300,300,300,300,300,300,320,350,350,350,400,400,400,400,400,450,467,500,500,500,500,500,500,500,550,550,600,600,600,650,700,700,720]
Estimates.sort()
offset = int(0.10*len(Estimates))
for i in range(offset):
       del Estimates[0]
       del Estimates[-1]
Sum = 0    
for i in range(len(Estimates)):
       Sum += Estimates[i]
Mean_Value = Sum/len(Estimates)
print(&quot;Mean : &quot;, int(Mean_Value))
#Output:
Mean :  351
&lt;/pre&gt;
&lt;hr&gt;
==Trimmed Mean for the above example== 
&lt;h3&gt;Using scipy library&lt;/h3&gt;
&lt;pre&gt;
#import scipy to use the method of trim_mean
from scipy import stats
trimMean = stats.trim_mean(Estimates, 0.1) # Trim 10% at both ends
print(&quot;Trimmed Mean : &quot;,trimMean)
#Output:
Trimmed Mean :  335.1020408163265
&lt;/pre&gt;

&lt;h3&gt;Without using scipy library&lt;/h3&gt;
&lt;pre&gt;
#Trimmed mean with 10%
p=10/100
#sorted data
data=[2, 4, 6, 7, 11, 21, 81, 90, 105, 121]
n = len(data)
#Remove elements from both end
rem=int(n*p)
newData = data[rem:-rem]
mean = 0
for i in newData:
    mean += i
mean = int(mean/len(newData))
print(&quot;Trimmed mean : &quot;,mean)
#Output: Trimmed mean :  40
&lt;/pre&gt;
[[#Top]]

=Jumbled_Words Permutations: Jumbled Words=
==What are Permutations ?==
A permutation also called ordering of selected number of elements from a list denoted by nPr here we are choosing all elements of a list and so n=r&lt;br&gt;
nPr=n!/(n-r)!&lt;br&gt; as n=r
nPn=n!&lt;br&gt; which gives all possible arrangement of elements present in a list.

 For example, permutations of list [1,2,3] are [1,2,3], [1,3,2], [2,1,3], [2,3,1], 
[3,1,2], and [3,2,1]. 
The number of permutations of a list of elements nPn is given by n!. For example, there are 2! = 2 x 1 = 2 permutations of [1,2], namely [1,2] and [2,1], and 3! = 3 x 2 x 1 = 6 permutations of [1,2,3], as mentioned above.&lt;br/&gt;
[[File:Permutations.jpg]]

==Implementation==
Here, we try to demonstrate the concept of permutations through jumbled words. It is a two player game in which one person presents the other person a different permutation of the word in his mind. The other person has to guess the right word. If he guesses, the he wins otherwise he loses.
 Input an list of words.
 Randomly pick a word from the list of words .
 Shuffle this word and present it to the other player.
 if word guesses by the player is same as the one picked from list of w
     player wins
 else
     player loses

ALTERNATE CODE TO GENERATE THIS GAME:
&lt;pre&gt;
import random
p1=input(&quot;enter player 1 name:&quot;)
p2=input(&quot;enter player 2 name:&quot;)
l=[&quot;rainbow&quot;,&quot;computer&quot;,&quot;robot&quot;,&quot;butter&quot;,&quot;vegetable&quot;,&quot;science&quot;,&quot;correct&quot;]
c1=c2=a1=a2=f1=f2=0
k=1
i=3
def play():
    n=random.choice(l)        ##n=chooses a word from list l
    l1=[]
    for j in n:
       l1.append(j)      ##creates a list for word in n
    for t in range(len(l1)):
       p=random.choice(l1)     ##this randomly displays letters in the list
       print(p)
       l1.remove(p)          ##to avoid the repetition of a letter
    s=input(&quot;enter the word:&quot;)
    if(s==n):
        print(&quot;correct&quot;)
        return 1
    else:
        print(&quot;not correct&quot;)
        print(&quot;answer is&quot;,n)
        return 0
def stat():
     print(&quot;player 1:&quot;)
     print(&quot;score:&quot;,c1)
     print(&quot;answered:&quot;,a1)
     print(&quot;failed:&quot;,f1)
     print(&quot;.............&quot;)
     print(&quot;player 2:&quot;)
     print(&quot;score:&quot;,c2)
     print(&quot;answered:&quot;,a2)
     print(&quot;failed&quot;,f2)
     if(c1&gt;c2):
         print(p1,&quot; won over &quot;,p2)
     elif(c1==c2):
         print(&quot;draw game&quot;)
     else:
         print(p2,&quot; won over &quot;,p1) 
while(i!=4):
      if(i==3):
         if(k==1):
             print(&quot;player 1 turn&quot;)
             print(&quot;your jumbled word is:&quot;)
             k=k+1
             m=play()
             if(m==1):      ##if guessed answer is correct,then score and no.of answered count will be increased
                c1+=1
                a1+=1
             else:
                f1+=1       ##else count of no.of failed to answered will be incremented
         else:
             print(&quot;player 2 turn&quot;)
             print(&quot;your jumbled word is:&quot;)
             k=k-1
             m=play()
             if(m==1):
                c2=c2+1
                a2=a2+1
             else:
                f2=f2+1
       if(i==2):
             print(&quot;present status&quot;)
             stat()
       i=int(input(&quot;enter your choice  1.stop 2.status 3.continue&quot;))
       if(i==1):
             stat()
             i=i+3
&lt;/pre&gt;
&lt;hr&gt;
=== JumbledWord Simple Logic, In Short ===
[[File:jumbledWord.gif]]
&lt;hr&gt;
'''Logic to create a Jumbled Word'''
&lt;hr&gt;
&lt;pre&gt;
#Get Jumbled Word and print it Horizontally
import random

def getJumbledWord(b):
    jumble=''
    l1 = [ b[i] for i in range(0, len(b)) ]
    for t in range(len(l1)):
       p=random.choice(l1)     ##this randomly gets letters from the list      
       jumble=jumble+p       
       l1.remove(p)
    return jumble

b=input(&quot;Enter a word to make it jumbled : &quot;)
print(&quot;Jumbled Word : &quot;, getJumbledWord(b))
&lt;/pre&gt;
&lt;hr&gt;
'''Another Logic to create a Jumbled Word'''
&lt;hr&gt;
&lt;pre&gt;
b=input(&quot;Enter a word to make it jumbled : &quot;)

def getJumbledWord1(b):
    l1 = [ b[i] for i in range(0, len(b)) ]
    random.shuffle(l1)
    str1 = ''.join(l1)
    return str1

print(&quot;Jumbled Word : &quot;, getJumbledWord1(b))
&lt;/pre&gt;

====Sample Output:====
&lt;pre&gt;
---- Output1 
Enter a word to make it jumbled : butter
Jumbled Word :  tbture

---- Output2 
Enter a word to make it jumbled : petriotism
Jumbled Word :  pittrosime
&lt;/pre&gt;

=Theory of Evolution=

== What is Evolution ? ==
Evolution is the change in heritable characteristics over successive generations. The theory of evolution explains that DNA, which acts as a carrier of genetic information from one generation to other, tends to change or mutate occasionally. These changes are reflected in next generations to come. This is how life has evolved on earth from bacteria to human beings.&lt;br&gt;
[[File:Evolution.png|500px]]

== Implementation ==
&lt;pre&gt;An array representing DNA is stored in a file. As genes are forms of DNA, they contain information to be transferred to forthcoming generations. Assume that information is in the form of bits (in the form of 0s and 1s). A number is picked randomly from 1 to the size of the array. A new parameter has been introduced which decides whether mutation would occur or not. If the value of this new parameter is 1 (It is picked randomly from 1 to 100), then only change is reflected down the generations, otherwise it is not. The pseudo code is as follows :
Input an array containing genetic information .
Randomly generate a number (say m) from 1 to length of the array. Randomly generate other number (say p) from 1 to 100.
 
    if p is equal to 1 then 
        if m is 1 then
          set it to 0
        else
          set it to 1
&lt;/pre&gt;
[[#TOP]]</text>
      <sha1>dsfbdu3rbs2n3ja65qwkpj65n6b4wyu</sha1>
    </revision>
    <revision>
      <id>3558</id>
      <parentid>3557</parentid>
      <timestamp>2018-09-28T02:28:46Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* Slicing */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="29454">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_3 Contributors of this page]
*Week 3 Playlist: https://www.youtube.com/playlist?list=PLc_j0TNIaWxOVx_z9jAM2UB3RqYNXaoEo
=List=
List is a flexible data structure used for storing a group of data separated by comma. The elements in a list need not be of the same data type.

'''Example:'''
       List_1 = [ 1, 2,3] or 
       List_1 = [&quot;coffee&quot;, &quot;Tea&quot;, &quot;Milk&quot;] or
       List_1 = [1,&quot;coffee&quot;, &quot;Tea&quot;, 3, &quot;5&quot;]

==List Creation==
&lt;pre&gt;a) A list can be created by simply putting values (separated by comma) between square brackets as given below,
       List_1 = [1,&quot;coffee&quot;, &quot;Tea&quot;, 3, &quot;5&quot;] #this creates a list by name List_1 containing following items


Or,
(b)A List can be created from scratch and elements can be added 
        List_2 = [ ]
        List_2.append(&quot;Kala&quot;)
        List_2.append(&quot;Mala&quot;)
Here we use &quot;append&quot; ,which is a function in python that enable us to append or attach an element to a list .
Thus List_2 will now hold [&quot;Kala&quot;,&quot;Mala&quot;]
&lt;/pre&gt;
[[#TOP]]

==Operations and Methods to work with List==
&lt;pre&gt;
a = [25,30,50,90,12,13]
b = [100,300,500,200,250]
&lt;/pre&gt;
&lt;hr&gt;
&lt;table border=2&gt;
  &lt;tr&gt;
    &lt;th&gt;&lt;b&gt;Method/&lt;br&gt;Operator&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Function&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Syntax&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Output&lt;/b&gt;&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;len()&lt;/td&gt;
    &lt;td&gt;Find length of a list&lt;/td&gt;
    &lt;td&gt;len(a)&lt;/td&gt;
    &lt;td&gt;6&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;max()&lt;/td&gt;
    &lt;td&gt;Find maximum element from the list&lt;/td&gt;
    &lt;td&gt;max(a)&lt;/td&gt;
    &lt;td&gt;90&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;min()&lt;/td&gt;
    &lt;td&gt;Find minimum element from the list&lt;/td&gt;
    &lt;td&gt;min(a)&lt;/td&gt;
    &lt;td&gt;12&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sum()&lt;/td&gt;
    &lt;td&gt;Returns sum of all elements of the list&lt;/td&gt;
    &lt;td&gt;sum(a)&lt;/td&gt;
    &lt;td&gt;220&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;reverse()&lt;/td&gt;
    &lt;td&gt;Reverses the original list&lt;/td&gt;
    &lt;td&gt;a.reverse()&lt;/td&gt;
    &lt;td&gt;[13, 12, 90, 50, 30, 25]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sort()&lt;/td&gt;
    &lt;td&gt;Sorts the original list in ascending order&lt;/td&gt;
    &lt;td&gt;a.sort()&lt;/td&gt;
    &lt;td&gt;[12, 13, 25, 30, 50, 90]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sorted()&lt;/td&gt;
    &lt;td&gt;Returns the new sorted list &lt;/td&gt;
    &lt;td&gt;sorted(a)&lt;/td&gt;
    &lt;td&gt;[12, 13, 25, 30, 50, 90]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;insert()&lt;/td&gt;
    &lt;td&gt;Insert at a particular index in the list, and shifts remaining elements&lt;/td&gt;
    &lt;td&gt;a.insert(3,3)&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 3, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;append()&lt;/td&gt;
    &lt;td&gt;Adds elements/object to the end of the list&lt;/td&gt;
    &lt;td&gt;a.append(5)&lt;br&gt;a.append([10,20])&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 5]&lt;br&gt;[25, 30, 50, 90, 12, 13, [10, 20]]&lt;br&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;extend()&lt;/td&gt;
    &lt;td&gt;Adds object to the end of the list as elements not as object&lt;/td&gt;
    &lt;td&gt;a.extend([10,20])&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 10, 20]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;*&amp;nbsp;&amp;nbsp;Repeatation&lt;br&gt;operator&lt;/td&gt;
    &lt;td&gt;Repeat the list for n times and returns a new list&lt;/td&gt;
    &lt;td&gt;a*2&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 25, 30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;+ Concatenation&lt;br&gt;operator&lt;/td&gt;
    &lt;td&gt;Concatenates two lists, and returns a new list&lt;/td&gt;
    &lt;td&gt;a+b&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 100, 300, 500, 200, 250]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;index()&lt;/td&gt;
    &lt;td&gt;Finds index of a particular element in the list or not&lt;/td&gt;
    &lt;td&gt;a.index(25)&lt;br&gt;a.index(0)&lt;br&gt;&lt;/td&gt;
    &lt;td&gt;0&lt;br&gt;&lt;br&gt;ValueError: 0 is not in list&lt;br&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;in operator&lt;/td&gt;
    &lt;td&gt;Finds whether a particular element is in the list or not, returns boolean&lt;/td&gt;
    &lt;td&gt;25 in a&lt;/td&gt;
    &lt;td&gt;True&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;not in operator&lt;/td&gt;
    &lt;td&gt;Checks if element is not available in list, returns boolean&lt;/td&gt;
    &lt;td&gt;25 not in a&lt;/td&gt;
    &lt;td&gt;False&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;count()&lt;/td&gt;
    &lt;td&gt;Counts the number of occurence of an element in the list&lt;/td&gt;
    &lt;td&gt;a.count(25)&lt;/td&gt;
    &lt;td&gt;1&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;remove()&lt;/td&gt;
    &lt;td&gt;Removes an element from the list&lt;/td&gt;
    &lt;td&gt;a.remove(25)&lt;/td&gt;
    &lt;td&gt; [30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;pop()&lt;/td&gt;
    &lt;td&gt;Delete and return item at index 0&lt;/td&gt;
    &lt;td&gt;a.pop(0)&lt;/td&gt;
    &lt;td&gt;25 , a will be [30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;del&lt;/td&gt;
    &lt;td&gt;Deletes item at a particular index from the list&lt;/td&gt;
    &lt;td&gt;del a[0]&lt;/td&gt;
    &lt;td&gt;[30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;all()&lt;/td&gt;
&lt;td&gt;Returns True, if all items in list are True or it is an empty list&lt;/td&gt;
&lt;td&gt;all([True, True, True])
all([])
&lt;/td&gt;
&lt;td&gt;True&lt;br&gt;
True&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;any()&lt;/td&gt;
&lt;td&gt;Returns True, if any item in list is True else return False&lt;/td&gt;
&lt;td&gt;any([True, True, True])&lt;br&gt;
any([True, False, True])&lt;br&gt;
any([])&lt;/td&gt;
&lt;td&gt;True&lt;br&gt;False&lt;br&gt;False&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;

==Printing the List==
=== Print whole list ===
A list can be printed simply or using a ''for / while'' loop 

 print(List_2)     # To print the entire list
This code will print      
 ['Kala','Mala']     

===Print element at a particular index===
&lt;pre&gt;
Using index position
    List_2[0]     # prints 'Kala' ,i.e,the value at index position 0.
    List_2[1]     # prints 'Mala'.
&lt;/pre&gt;
=== Without using index position ===
&lt;pre&gt;
for item in List_2:   # here item is a variable used to access elements in list.
       print(item)
   This code snippet prints 
    Kala
    Mala
&lt;/pre&gt;
[[#TOP]]

==Search for a particular element in list==
Elements in a list can be searched by one of the two ways:
=== using index() function===
&lt;pre&gt;
ages1 = [11,23,12,23,45]

#if element is available in the list, index() returns the index value on which, the element is present.
print(ages1.index(45))#Output: 4

#if element is not available in the list, index() returns ''ValueError''
print(ages1.index(0))#Output: ValueError:
&lt;/pre&gt;

In programming, if such error occurs, program gets terminated. It can be solved using exception handling.
e.g.
&lt;pre&gt;
ages1 = [11,23,12,23,45]

try:
    print(ages1.index(0))
except ValueError:
    print(&quot;Exception has occured&quot;)    
    print(&quot;Element is not found in the list&quot;)

&lt;/pre&gt;
&lt;pre&gt;
'''Output: 
Exception has occured
Element is not found in the list
'''&lt;/pre&gt;
[[#TOP]]

=== using 'in' operator===
''in'' operator is used to check whether a particular element is available in the list or not.e.g.

&lt;pre&gt;
ages1 = [11,23,12,23,45]
no=11

if no in ages1:
    print(&quot;no is there in the list&quot;)
else:    
    print(&quot;no is NOT there in the list&quot;)
&lt;/pre&gt;
&lt;pre&gt;
#Output: no is there in the list
&lt;/pre&gt;


'''Number is not there in the list'''
&lt;pre&gt;
ages1 = [11,23,12,23,45]
no=15

if no in ages1:
    print(&quot;no is there in the list&quot;)
else:    
    print(&quot;no is NOT there in the list&quot;)
&lt;/pre&gt;
&lt;pre&gt;
Output: no is NOT there in the list
&lt;/pre&gt;
[[#TOP]]

==Updating the List==
The lists can be updated using ''append'' or ''insert'' function.  Append adds the element to the end of the list and Insert adds the element in the specified position.
&lt;pre&gt;
   # add the element 'Sheela' to the end of the list.
   List_2.append(&quot;Sheela&quot;)    
   print (List_2) will output 
   ['Kala', 'Mala', 'Sheela']
&lt;/pre&gt;
   &lt;pre&gt;
# add the element &quot;Bala&quot; in the list at the index 1.
   List_2.insert(1,&quot;Bala&quot;)    
   print (List_2) will output 
   ['Kala', 'Bala','Mala', 'Sheela']
&lt;/pre&gt;

=== Extend the list by adding elements of other list at end using extend()===
&lt;pre&gt;
ages = [11,23,12,23,45]
ages.extend([57,58])
print(ages)
&lt;/pre&gt;

&lt;pre&gt;
#Output: [11, 23, 12, 23, 45, 57, 58]
&lt;/pre&gt;

==== Difference between ''append and extend'' ====
Difference between append and extend can be easily understood, by the following example.

&lt;pre&gt;
appendlist = [11,23,12,23,45]
appendlist.append([57,58])

extendlist= [11,23,12,23,45]
extendlist.extend([57,58])
&lt;/pre&gt;

&lt;pre&gt;
'''Output:
[11, 23, 12, 23, 45, [57, 58]]
[11, 23, 12, 23, 45, 57, 58]'''
&lt;/pre&gt;

[[#TOP]]

==Basic Operations on List==
===Frequency of Occurrence===
list.count(object) will return the number of times the object occur in the list.
  '''Example'''
    ages = [11,23,12,23,45,43,22,24,23]
    ages.count(23) will return
    3
    ages.count(100) will return
    0

===Length of the List===
len(list) will return the length of the list ie. the number of objects in the list.
  '''Example'''
&lt;pre&gt;
    ages = [11,23,12,23,45,43,22,24,23]
    len(ages) # Output: 9
&lt;/pre&gt;

To print the objects in the list either use ''for item in list'' or ''for index in range(len(list))''
&lt;pre&gt;
    for item in ages:       
        print (item)  
        (OR)
    for index in range(len(ages)) :
        print (ages[index])
&lt;/pre&gt;

===Sort the List===
list.sort() will sort the list in ascending order
  '''Example'''
    ages = [11,23,12,23,45,43,22,24,23]
    ages.sort() 
    print (ages) 
    [11, 12, 22, 23, 23, 23, 24, 43, 45]

[[#TOP]]

===Sort the List using sorted() function===
sorted(list1) will sort the list and return a new list, it doesn't modify the original list
&lt;br&gt;'''Example: Sort in ascending order'''
&lt;pre&gt;
ages = [11,23,12,23,45,43,22,24,23]
newList=sorted(ages)
print(newList)

#Output: [11, 12, 22, 23, 23, 23, 24, 43, 45]
&lt;/pre&gt;

&lt;br&gt;'''Example: Sort in descending order'''
&lt;pre&gt;
ages = [11,23,12,23,45,43,22,24,23]
newList=sorted(ages,reverse=True)
print(newList)

#Output: [45, 43, 24, 23, 23, 23, 22, 12, 11]
&lt;/pre&gt;

===Reverse the List===
list.reverse() will reverse the original list
  '''Example'''
    ages = [11, 12, 22, 23, 23, 23, 24, 43, 45]
    ages.reverse()
    print (ages)
    [45, 43, 24, 23, 23, 23, 22, 12, 11]

Both sort() and reverse() list operation will work on numeric and alphanumeric data list.

A special use of the reverse() function is to descend a list that is sorted in ascending order.

  '''Example'''
&lt;pre&gt;
ages = [11, 12, 22, 23, 23, 23, 24, 43, 45]
ages.sort()
print(ages)
ages.reverse()
print(ages)
&lt;/pre&gt;

===Slicing===
Used to retrieve an object or objects in a range as a list  
  '''Example'''

Use ''list[index]'' to retrieve the object at the given index
&lt;pre&gt;
In [1]: student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
In [2]: student[3]     #Object at index 3.  Remember index starts at 0
Out[2]: 'Geetha'      
&lt;/pre&gt;

Use ''list[start_index : end_index + 1]'' to retrieve objects from the start_index to end_index 
&lt;pre&gt;
In [3]: student[2:4]     # Objects from index 2 to 3 as List. Note the [ and ]
Out[3]: ['Vijay', 'Geetha']   
&lt;/pre&gt;

Use ''list[:]'' to retrieve objects from the starting of the list to the end of the list. 
The default start value will be the starting index of the list (i.e. 0) and the default end value
will be the length of the list 
&lt;pre&gt;
In [4]: student[:]        # prints the entire list
Out[4]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma', 'Janani']
&lt;/pre&gt;
&lt;pre&gt;
In [5]: student[:5]       # prints the objects from the start of the list upto object at index 4
Out[5]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran']
&lt;/pre&gt;

         In [6]: student[2:]       # prints the objects from index 2 upto the end of the list
         Out[6]: ['Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma', 'Janani']


Negative index too is available in Python. It starts from last element of the list. i.e.

         In [7]:student[-1]        #prints last index of list
         Out[7]: 'Janani'


         In [8]:student[-1:-8]     #prints empty list
         Out[8]: []


         In [9]:student[-8:-1]     #prints -8th index to -1st index elements
         Out[9]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma']

[[#TOP]]

===Removing Item from list ===
----

Is used to remove a specific item from the list.

'''Example:'''
 
Use list.remove(entry/value)  Or   del list[index]    Or list.pop(index)
         student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
         student.remove(&quot;Arun&quot;)   #This will delete item &quot;Arun&quot;
         Or    
         del student[0]           # This will delete item at index 0
         Or
         student.pop(0)         # This will delete and return item at index 0


         print(student)    
         Output: [&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]

[[#TOP]]
===Delete list ===
----
Used to delete complete list

'''Example'''

Use del &lt;list name&gt;
         student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
         del student

===Concatenation of two lists===
----
''+'' is the concatenation operator which is used concatenate two lists. 
&lt;pre&gt;
ages1 = [11,23,12,23,45]
ages2 = [25, 24, 43, 47]
age=ages1+ages2
print(age)
#Output: [11, 23, 12, 23, 45, 25, 24, 43, 47]
&lt;/pre&gt;

===Repeatation of a list ===
----
''*'' is the operator to repeat a particular list.
&lt;pre&gt;
ages1 = [11,23,12,23,45]
age=ages1*5 #ages1 list is repeated 5 times and stroed in ''age'' list
print(age)

#Output: [11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45]
&lt;/pre&gt;

=== all and any for List===
all() and any() are special functions to check whether all elements in iterable is ''True'' or any element is ''True''
&lt;ol&gt;
&lt;li&gt;If all elements in a list are ''True'', '''all()''' will return ''True''&lt;/li&gt;
&lt;li&gt;If iterable is ''empty'', '''all()''' will return ''True''&lt;/li&gt;
&lt;li&gt;If iterable contains at least one ''True'', '''any()''' will return ''True''&lt;/li&gt;
&lt;li&gt;If iterable is ''empty'', '''any()''' will return ''False''&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;
lsit=[True, True, True, True]
print(all(lsit))#Output: True
print(any(lsit))#Output: True

lsit1=[True, False, True, True]
print(all(lsit1))#Output: False
print(any(lsit1))#Output: True

lsit2=[False,False,False]
print(all(lsit2))#Output: False
print(any(lsit2))#Output: False

lsit3=[]
print(all(lsit3))#Output: True
print(any(lsit3))#Output: False
&lt;/pre&gt;

==Conditional Statements==
&lt;pre&gt;Conditionals are used to check the condition and change the flow of the program 
accordingly. They are realized in programming languages through if statement. The 
syntax is as follows :
         if condition : 
            statement
    '''Note:''' Do not forget indentation (inserting space/tab) in the line after the
 if condition.
    
    In case you want to execute a set of statements when a condition is true and another

set of statement when the condition is false.
         if condition : 
            statement 1
         else :
            statement 2
    
    Multiple if-else statements can be written as follows:
         if condition_1 : 
            statement 1
         elif condition_2 : # 'elif' is short for 'else if'
            statement 2
         elif condition_3 :
            statement 3
        .
        .
         else :
            final statement
&lt;/pre&gt;
[[#TOP]]

=Loops and Conditionals : Fizzbuzz=
====Loops====
&lt;pre&gt;
Loops are used to execute a set of repetitive statements. They are realized
through 'while' and 'for' loops in programming languages. The syntax of 'for' loop is 
as follows :
        for LOOPVARIABLE in SEQUENCE: 
            STATEMENTS
    '''e.g.''' to print all the data from a list we can write:
        for item in list_name
            print(item)
    OR
        for index in range(len(list_name))
            print(list_name[index])
    
    The syntax for while loop is as follows :
    
        while BOOLEANEXPRESSION: 
            STATEMENTS
            INCREMENT/DECREMENT
    
    '''e.g.''' if we want to print all numbers from 1 to 10
        i=1
        while i&lt;=10 :
            print(i,&quot; &quot;)
            i=i+1
    
    'while' loop has indefinite iteration (run-time unknown). So, there must be loop
 break statement in it.
 Whereas 'for' loop is definite in nature (i.e. known or predictable span).&lt;br&gt;

&lt;b&gt;NOTE: Python doesn't have anything like do-while loop.&lt;/b&gt;
&lt;/pre&gt;
[[#TOP]]

==Implementation==
Here, we try to demonstrate the concept of loops and conditionals through a game called Fizzbuzz. The rules are as follows :&lt;br/&gt;
[[File:fizzBuzz.gif]]

• if input number is a multiple of ’3’ print ”Fizz”
&lt;br/&gt;
• if input number is a multiple of ’5’ print ”Buzz”
&lt;br/&gt;
• if input number is a multiple of both '3' and ’5’ print ”FizzBuzz”
&lt;br/&gt;
The pseudo code is as follows :
&lt;pre&gt;
   If input no % 3 == 0 and  input no % 5 == 0 : 
       print ”Fizzbuzz”
   else if input no % 3 == 0 : 
       print ”Fizz”
   else if input no % 5 == 0 : 
       print ”Buzz”
   else :
       print the input no
&lt;/pre&gt;
The order of statements execution matters to get the desired output. The highest priority condition should be first followed by other. In fizzbuzz programming, first checking should be done for both divisibility of 3 and 5. If condition not satisfied only then it should check individually for 3 or 5. So carefully choosing the order is crucial for better programming.
Note: There is some effect of present condition statements chosen on next conditions statements. That is why in first attempt fizzbuzz programming got struck.

Example: 
&lt;pre&gt;
#Code to achieve the above requirement in python3.
i = int(input(&quot;Enter the number&quot;)) 
if i%3 == 0 and i%5 == 0: print(i,&quot;FizzBuzz&quot;)  
elif i%5 == 0: print(i,&quot;Buzz&quot;)
elif i%3 == 0: print(i,&quot;Fizz&quot;)
else: print(i)
&lt;/pre&gt;
Lets put the same into a loop for a range given by the user.
&lt;pre&gt;
def fizzbuzzgame(start,stop):
    for i in range(start,stop+1):
        if i%3 == 0 and i%5 == 0:
            print(i,&quot;FizzBuzz&quot;)
        elif i%5 == 0:
            print(i,&quot;Buzz&quot;)
        elif i%3 == 0:
            print(i,&quot;Fizz&quot;)
        else: print(i)

fizzbuzzgame(50,100)
&lt;/pre&gt;


=== Fizz Buzz game in Interactive mode with Score ===
'''By Ms. Ami Tusharkant Choksi'''
&lt;pre&gt;
def fizzbuzzgame(i):
        if i%3 == 0 and i%5 == 0:
            print(i,&quot;FizzBuzz&quot;)
            return(&quot;fzbz&quot;)
        elif i%5 == 0:
            print(i,&quot;Buzz&quot;)
            return(&quot;bz&quot;)
        elif i%3 == 0:
            print(i,&quot;Fizz&quot;)
            return(&quot;fz&quot;)
        else:
            print(i)
            return(&quot;no&quot;)

ch = 'y'
fizzbuzz=0
fizz=0
buzz=0
nothing=0
print(&quot;&quot;&quot;
 _____  ____  _____  _____  ____   __ __  _____  _____       ____   ____  ___ ___    ___ 
|     ||    ||     ||     ||    \ |  |  ||     ||     |     /    | /    ||   |   |  /  _]
|   __| |  | |__/  ||__/  ||  o  )|  |  ||__/  ||__/  |    |   __||  o  || _   _ | /  [_ 
|  |_   |  | |   __||   __||     ||  |  ||   __||   __|    |  |  ||     ||  \_/  ||    _]
|   _]  |  | |  /  ||  /  ||  O  ||  :  ||  /  ||  /  |    |  |_ ||  _  ||   |   ||   [_ 
|  |    |  | |     ||     ||     ||     ||     ||     |    |     ||  |  ||   |   ||     |
|__|   |____||_____||_____||_____| \__,_||_____||_____|    |___,_||__|__||___|___||_____|
                                                                                         
&quot;&quot;&quot;)   

while(ch == 'y'):
    n=int(input(&quot;Enter a Number : &quot;))
    winLoose=fizzbuzzgame(n)
    if(winLoose == &quot;fz&quot;):
        fizz+=1
    elif(winLoose == &quot;bz&quot;):
        buzz+=1
    elif(winLoose == &quot;fzbz&quot;):
        fizzbuzz+=1
    ch=input(&quot;Do you want to continue playing the game : (y/n)&quot;)
    if(ch=='n'):
        print('Congratulations, your score is\n FizzBuzz:%d\nFizz:%d\nBuzz:%d' %
(fizzbuzz,fizz,buzz))
    
'''Sample Output:

 _____  ____  _____  _____  ____   __ __  _____  _____       ____   ____  ___ ___    ___ 
|     ||    ||     ||     ||    \ |  |  ||     ||     |     /    | /    ||   |   |  /  _]
|   __| |  | |__/  ||__/  ||  o  )|  |  ||__/  ||__/  |    |   __||  o  || _   _ | /  [_ 
|  |_   |  | |   __||   __||     ||  |  ||   __||   __|    |  |  ||     ||  \_/  ||    _]
|   _]  |  | |  /  ||  /  ||  O  ||  :  ||  /  ||  /  |    |  |_ ||  _  ||   |   ||   [_ 
|  |    |  | |     ||     ||     ||     ||     ||     |    |     ||  |  ||   |   ||     |
|__|   |____||_____||_____||_____| \__,_||_____||_____|    |___,_||__|__||___|___||_____|
                                                                                         

Enter a Number : 666
666 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 777
777 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 555
555 FizzBuzz
Do you want to continue playing the game : (y/n)y
Enter a Number : 1
1
Do you want to continue playing the game : (y/n)y
Enter a Number : 789
789 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 25
25 Buzz
Do you want to continue playing the game : (y/n)n
Congratulations, your score is

FizzBuzz:1
Fizz:3
Buzz:1

&lt;/pre&gt;

=Crowd Computing: Just Estimate=
==Wisdom of Crowds==
The concept of ’Wisdom of Crowds’ was proposed by Francis Galton. A weight-judging competition was carried on at the annual show of the West of England Fat Stock and Poultry Exhibition recently held at Plymouth, A fat ox having been selected, competitors bought stamped and numbered cards, each, on which to inscribe their respective names, addresses, and estimates of what the ox would weigh after it had been slaughtered. Those who guessed most successfully received prizes. About 8oo tickets were issued to the par- ticipants. The middlemost estimate of all the estimates recorded was 1207 lbs and the actual weight of the ox was 1198 lbs.

==Our Experiment==
The crowd had to guess the number of candies/gems in a jar. Around 75 people participated in the experiment. The actual number of gems in the jar were 375. The median of all estimates came out to be 300 and the mean of all the estimates came out to be around 396. Median underestimated and mean overestimated the actual value. So according to recent studies, Trimmed mean must be used as an aggregate measure to estimate where Wisdom of Crowds is involved.
[[File:Gemsjar.jpg|center|200px|caption]]

===Trimmed Mean===
In these kinds of experiments, 10% trimmed mean is usually followed. For calculating 10% trimmed mean, remove 10% smallest and 10% largest values from the sample. Calculate the mean of the sample obtained. In the above experiment, the trimmed mean came out to be around 351 which is very close to the actual value.

==Implementation==
Here, we try to demonstrate the concept of trimmed mean through crowd computing.
 Input a list of estimates done by the crowd .
 Sort the list.
 Remove the 10% smallest values.
 Remove the 10% largest values.
 Calculate the mean of the new list obtained .&lt;hr&gt;

==Data of Experiment==       
    Estimates =[1000,1010,1786,2000,1500,1500,100,120,150,150,150,170,175,180,197,200,200,200,200,200,200,220,220,220,220,234,250,250,250,250,250,250,250,250,250,263,270,275,275,286,300,
                300,300,300,300,300,300,300,320,350,350,350,400, 400,400,400,400,450,467,500,500,500,500,500,500,500,550,550,600,600,600,650,700,700,720]

    '''CODE:'''
&lt;pre&gt;
Estimates = [1000,1010,1786,2000,1500,1500,100,120,150,150,150,170,175,180,197,200,200,200,200,200,200,220,220,220,220,234,250,250,250,250,250,250,250,250,250,263,270,275,275,286,300,                300,300,300,300,300,300,300,320,350,350,350,400,400,400,400,400,450,467,500,500,500,500,500,500,500,550,550,600,600,600,650,700,700,720]
Estimates.sort()
offset = int(0.10*len(Estimates))
for i in range(offset):
       del Estimates[0]
       del Estimates[-1]
Sum = 0    
for i in range(len(Estimates)):
       Sum += Estimates[i]
Mean_Value = Sum/len(Estimates)
print(&quot;Mean : &quot;, int(Mean_Value))
#Output:
Mean :  351
&lt;/pre&gt;
&lt;hr&gt;
==Trimmed Mean for the above example== 
&lt;h3&gt;Using scipy library&lt;/h3&gt;
&lt;pre&gt;
#import scipy to use the method of trim_mean
from scipy import stats
trimMean = stats.trim_mean(Estimates, 0.1) # Trim 10% at both ends
print(&quot;Trimmed Mean : &quot;,trimMean)
#Output:
Trimmed Mean :  335.1020408163265
&lt;/pre&gt;

&lt;h3&gt;Without using scipy library&lt;/h3&gt;
&lt;pre&gt;
#Trimmed mean with 10%
p=10/100
#sorted data
data=[2, 4, 6, 7, 11, 21, 81, 90, 105, 121]
n = len(data)
#Remove elements from both end
rem=int(n*p)
newData = data[rem:-rem]
mean = 0
for i in newData:
    mean += i
mean = int(mean/len(newData))
print(&quot;Trimmed mean : &quot;,mean)
#Output: Trimmed mean :  40
&lt;/pre&gt;
[[#Top]]

=Jumbled_Words Permutations: Jumbled Words=
==What are Permutations ?==
A permutation also called ordering of selected number of elements from a list denoted by nPr here we are choosing all elements of a list and so n=r&lt;br&gt;
nPr=n!/(n-r)!&lt;br&gt; as n=r
nPn=n!&lt;br&gt; which gives all possible arrangement of elements present in a list.

 For example, permutations of list [1,2,3] are [1,2,3], [1,3,2], [2,1,3], [2,3,1], 
[3,1,2], and [3,2,1]. 
The number of permutations of a list of elements nPn is given by n!. For example, there are 2! = 2 x 1 = 2 permutations of [1,2], namely [1,2] and [2,1], and 3! = 3 x 2 x 1 = 6 permutations of [1,2,3], as mentioned above.&lt;br/&gt;
[[File:Permutations.jpg]]

==Implementation==
Here, we try to demonstrate the concept of permutations through jumbled words. It is a two player game in which one person presents the other person a different permutation of the word in his mind. The other person has to guess the right word. If he guesses, the he wins otherwise he loses.
 Input an list of words.
 Randomly pick a word from the list of words .
 Shuffle this word and present it to the other player.
 if word guesses by the player is same as the one picked from list of w
     player wins
 else
     player loses

ALTERNATE CODE TO GENERATE THIS GAME:
&lt;pre&gt;
import random
p1=input(&quot;enter player 1 name:&quot;)
p2=input(&quot;enter player 2 name:&quot;)
l=[&quot;rainbow&quot;,&quot;computer&quot;,&quot;robot&quot;,&quot;butter&quot;,&quot;vegetable&quot;,&quot;science&quot;,&quot;correct&quot;]
c1=c2=a1=a2=f1=f2=0
k=1
i=3
def play():
    n=random.choice(l)        ##n=chooses a word from list l
    l1=[]
    for j in n:
       l1.append(j)      ##creates a list for word in n
    for t in range(len(l1)):
       p=random.choice(l1)     ##this randomly displays letters in the list
       print(p)
       l1.remove(p)          ##to avoid the repetition of a letter
    s=input(&quot;enter the word:&quot;)
    if(s==n):
        print(&quot;correct&quot;)
        return 1
    else:
        print(&quot;not correct&quot;)
        print(&quot;answer is&quot;,n)
        return 0
def stat():
     print(&quot;player 1:&quot;)
     print(&quot;score:&quot;,c1)
     print(&quot;answered:&quot;,a1)
     print(&quot;failed:&quot;,f1)
     print(&quot;.............&quot;)
     print(&quot;player 2:&quot;)
     print(&quot;score:&quot;,c2)
     print(&quot;answered:&quot;,a2)
     print(&quot;failed&quot;,f2)
     if(c1&gt;c2):
         print(p1,&quot; won over &quot;,p2)
     elif(c1==c2):
         print(&quot;draw game&quot;)
     else:
         print(p2,&quot; won over &quot;,p1) 
while(i!=4):
      if(i==3):
         if(k==1):
             print(&quot;player 1 turn&quot;)
             print(&quot;your jumbled word is:&quot;)
             k=k+1
             m=play()
             if(m==1):      ##if guessed answer is correct,then score and no.of answered count will be increased
                c1+=1
                a1+=1
             else:
                f1+=1       ##else count of no.of failed to answered will be incremented
         else:
             print(&quot;player 2 turn&quot;)
             print(&quot;your jumbled word is:&quot;)
             k=k-1
             m=play()
             if(m==1):
                c2=c2+1
                a2=a2+1
             else:
                f2=f2+1
       if(i==2):
             print(&quot;present status&quot;)
             stat()
       i=int(input(&quot;enter your choice  1.stop 2.status 3.continue&quot;))
       if(i==1):
             stat()
             i=i+3
&lt;/pre&gt;
&lt;hr&gt;
=== JumbledWord Simple Logic, In Short ===
[[File:jumbledWord.gif]]
&lt;hr&gt;
'''Logic to create a Jumbled Word'''
&lt;hr&gt;
&lt;pre&gt;
#Get Jumbled Word and print it Horizontally
import random

def getJumbledWord(b):
    jumble=''
    l1 = [ b[i] for i in range(0, len(b)) ]
    for t in range(len(l1)):
       p=random.choice(l1)     ##this randomly gets letters from the list      
       jumble=jumble+p       
       l1.remove(p)
    return jumble

b=input(&quot;Enter a word to make it jumbled : &quot;)
print(&quot;Jumbled Word : &quot;, getJumbledWord(b))
&lt;/pre&gt;
&lt;hr&gt;
'''Another Logic to create a Jumbled Word'''
&lt;hr&gt;
&lt;pre&gt;
b=input(&quot;Enter a word to make it jumbled : &quot;)

def getJumbledWord1(b):
    l1 = [ b[i] for i in range(0, len(b)) ]
    random.shuffle(l1)
    str1 = ''.join(l1)
    return str1

print(&quot;Jumbled Word : &quot;, getJumbledWord1(b))
&lt;/pre&gt;

====Sample Output:====
&lt;pre&gt;
---- Output1 
Enter a word to make it jumbled : butter
Jumbled Word :  tbture

---- Output2 
Enter a word to make it jumbled : petriotism
Jumbled Word :  pittrosime
&lt;/pre&gt;

=Theory of Evolution=

== What is Evolution ? ==
Evolution is the change in heritable characteristics over successive generations. The theory of evolution explains that DNA, which acts as a carrier of genetic information from one generation to other, tends to change or mutate occasionally. These changes are reflected in next generations to come. This is how life has evolved on earth from bacteria to human beings.&lt;br&gt;
[[File:Evolution.png|500px]]

== Implementation ==
&lt;pre&gt;An array representing DNA is stored in a file. As genes are forms of DNA, they contain information to be transferred to forthcoming generations. Assume that information is in the form of bits (in the form of 0s and 1s). A number is picked randomly from 1 to the size of the array. A new parameter has been introduced which decides whether mutation would occur or not. If the value of this new parameter is 1 (It is picked randomly from 1 to 100), then only change is reflected down the generations, otherwise it is not. The pseudo code is as follows :
Input an array containing genetic information .
Randomly generate a number (say m) from 1 to length of the array. Randomly generate other number (say p) from 1 to 100.
 
    if p is equal to 1 then 
        if m is 1 then
          set it to 0
        else
          set it to 1
&lt;/pre&gt;
[[#TOP]]</text>
      <sha1>0ihd3phgv6u0foy5x1dsnp4e0832a9o</sha1>
    </revision>
    <revision>
      <id>3559</id>
      <parentid>3558</parentid>
      <timestamp>2018-09-28T02:29:20Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* Slicing */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="29447">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_3 Contributors of this page]
*Week 3 Playlist: https://www.youtube.com/playlist?list=PLc_j0TNIaWxOVx_z9jAM2UB3RqYNXaoEo
=List=
List is a flexible data structure used for storing a group of data separated by comma. The elements in a list need not be of the same data type.

'''Example:'''
       List_1 = [ 1, 2,3] or 
       List_1 = [&quot;coffee&quot;, &quot;Tea&quot;, &quot;Milk&quot;] or
       List_1 = [1,&quot;coffee&quot;, &quot;Tea&quot;, 3, &quot;5&quot;]

==List Creation==
&lt;pre&gt;a) A list can be created by simply putting values (separated by comma) between square brackets as given below,
       List_1 = [1,&quot;coffee&quot;, &quot;Tea&quot;, 3, &quot;5&quot;] #this creates a list by name List_1 containing following items


Or,
(b)A List can be created from scratch and elements can be added 
        List_2 = [ ]
        List_2.append(&quot;Kala&quot;)
        List_2.append(&quot;Mala&quot;)
Here we use &quot;append&quot; ,which is a function in python that enable us to append or attach an element to a list .
Thus List_2 will now hold [&quot;Kala&quot;,&quot;Mala&quot;]
&lt;/pre&gt;
[[#TOP]]

==Operations and Methods to work with List==
&lt;pre&gt;
a = [25,30,50,90,12,13]
b = [100,300,500,200,250]
&lt;/pre&gt;
&lt;hr&gt;
&lt;table border=2&gt;
  &lt;tr&gt;
    &lt;th&gt;&lt;b&gt;Method/&lt;br&gt;Operator&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Function&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Syntax&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Output&lt;/b&gt;&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;len()&lt;/td&gt;
    &lt;td&gt;Find length of a list&lt;/td&gt;
    &lt;td&gt;len(a)&lt;/td&gt;
    &lt;td&gt;6&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;max()&lt;/td&gt;
    &lt;td&gt;Find maximum element from the list&lt;/td&gt;
    &lt;td&gt;max(a)&lt;/td&gt;
    &lt;td&gt;90&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;min()&lt;/td&gt;
    &lt;td&gt;Find minimum element from the list&lt;/td&gt;
    &lt;td&gt;min(a)&lt;/td&gt;
    &lt;td&gt;12&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sum()&lt;/td&gt;
    &lt;td&gt;Returns sum of all elements of the list&lt;/td&gt;
    &lt;td&gt;sum(a)&lt;/td&gt;
    &lt;td&gt;220&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;reverse()&lt;/td&gt;
    &lt;td&gt;Reverses the original list&lt;/td&gt;
    &lt;td&gt;a.reverse()&lt;/td&gt;
    &lt;td&gt;[13, 12, 90, 50, 30, 25]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sort()&lt;/td&gt;
    &lt;td&gt;Sorts the original list in ascending order&lt;/td&gt;
    &lt;td&gt;a.sort()&lt;/td&gt;
    &lt;td&gt;[12, 13, 25, 30, 50, 90]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sorted()&lt;/td&gt;
    &lt;td&gt;Returns the new sorted list &lt;/td&gt;
    &lt;td&gt;sorted(a)&lt;/td&gt;
    &lt;td&gt;[12, 13, 25, 30, 50, 90]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;insert()&lt;/td&gt;
    &lt;td&gt;Insert at a particular index in the list, and shifts remaining elements&lt;/td&gt;
    &lt;td&gt;a.insert(3,3)&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 3, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;append()&lt;/td&gt;
    &lt;td&gt;Adds elements/object to the end of the list&lt;/td&gt;
    &lt;td&gt;a.append(5)&lt;br&gt;a.append([10,20])&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 5]&lt;br&gt;[25, 30, 50, 90, 12, 13, [10, 20]]&lt;br&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;extend()&lt;/td&gt;
    &lt;td&gt;Adds object to the end of the list as elements not as object&lt;/td&gt;
    &lt;td&gt;a.extend([10,20])&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 10, 20]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;*&amp;nbsp;&amp;nbsp;Repeatation&lt;br&gt;operator&lt;/td&gt;
    &lt;td&gt;Repeat the list for n times and returns a new list&lt;/td&gt;
    &lt;td&gt;a*2&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 25, 30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;+ Concatenation&lt;br&gt;operator&lt;/td&gt;
    &lt;td&gt;Concatenates two lists, and returns a new list&lt;/td&gt;
    &lt;td&gt;a+b&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 100, 300, 500, 200, 250]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;index()&lt;/td&gt;
    &lt;td&gt;Finds index of a particular element in the list or not&lt;/td&gt;
    &lt;td&gt;a.index(25)&lt;br&gt;a.index(0)&lt;br&gt;&lt;/td&gt;
    &lt;td&gt;0&lt;br&gt;&lt;br&gt;ValueError: 0 is not in list&lt;br&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;in operator&lt;/td&gt;
    &lt;td&gt;Finds whether a particular element is in the list or not, returns boolean&lt;/td&gt;
    &lt;td&gt;25 in a&lt;/td&gt;
    &lt;td&gt;True&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;not in operator&lt;/td&gt;
    &lt;td&gt;Checks if element is not available in list, returns boolean&lt;/td&gt;
    &lt;td&gt;25 not in a&lt;/td&gt;
    &lt;td&gt;False&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;count()&lt;/td&gt;
    &lt;td&gt;Counts the number of occurence of an element in the list&lt;/td&gt;
    &lt;td&gt;a.count(25)&lt;/td&gt;
    &lt;td&gt;1&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;remove()&lt;/td&gt;
    &lt;td&gt;Removes an element from the list&lt;/td&gt;
    &lt;td&gt;a.remove(25)&lt;/td&gt;
    &lt;td&gt; [30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;pop()&lt;/td&gt;
    &lt;td&gt;Delete and return item at index 0&lt;/td&gt;
    &lt;td&gt;a.pop(0)&lt;/td&gt;
    &lt;td&gt;25 , a will be [30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;del&lt;/td&gt;
    &lt;td&gt;Deletes item at a particular index from the list&lt;/td&gt;
    &lt;td&gt;del a[0]&lt;/td&gt;
    &lt;td&gt;[30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;all()&lt;/td&gt;
&lt;td&gt;Returns True, if all items in list are True or it is an empty list&lt;/td&gt;
&lt;td&gt;all([True, True, True])
all([])
&lt;/td&gt;
&lt;td&gt;True&lt;br&gt;
True&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;any()&lt;/td&gt;
&lt;td&gt;Returns True, if any item in list is True else return False&lt;/td&gt;
&lt;td&gt;any([True, True, True])&lt;br&gt;
any([True, False, True])&lt;br&gt;
any([])&lt;/td&gt;
&lt;td&gt;True&lt;br&gt;False&lt;br&gt;False&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;

==Printing the List==
=== Print whole list ===
A list can be printed simply or using a ''for / while'' loop 

 print(List_2)     # To print the entire list
This code will print      
 ['Kala','Mala']     

===Print element at a particular index===
&lt;pre&gt;
Using index position
    List_2[0]     # prints 'Kala' ,i.e,the value at index position 0.
    List_2[1]     # prints 'Mala'.
&lt;/pre&gt;
=== Without using index position ===
&lt;pre&gt;
for item in List_2:   # here item is a variable used to access elements in list.
       print(item)
   This code snippet prints 
    Kala
    Mala
&lt;/pre&gt;
[[#TOP]]

==Search for a particular element in list==
Elements in a list can be searched by one of the two ways:
=== using index() function===
&lt;pre&gt;
ages1 = [11,23,12,23,45]

#if element is available in the list, index() returns the index value on which, the element is present.
print(ages1.index(45))#Output: 4

#if element is not available in the list, index() returns ''ValueError''
print(ages1.index(0))#Output: ValueError:
&lt;/pre&gt;

In programming, if such error occurs, program gets terminated. It can be solved using exception handling.
e.g.
&lt;pre&gt;
ages1 = [11,23,12,23,45]

try:
    print(ages1.index(0))
except ValueError:
    print(&quot;Exception has occured&quot;)    
    print(&quot;Element is not found in the list&quot;)

&lt;/pre&gt;
&lt;pre&gt;
'''Output: 
Exception has occured
Element is not found in the list
'''&lt;/pre&gt;
[[#TOP]]

=== using 'in' operator===
''in'' operator is used to check whether a particular element is available in the list or not.e.g.

&lt;pre&gt;
ages1 = [11,23,12,23,45]
no=11

if no in ages1:
    print(&quot;no is there in the list&quot;)
else:    
    print(&quot;no is NOT there in the list&quot;)
&lt;/pre&gt;
&lt;pre&gt;
#Output: no is there in the list
&lt;/pre&gt;


'''Number is not there in the list'''
&lt;pre&gt;
ages1 = [11,23,12,23,45]
no=15

if no in ages1:
    print(&quot;no is there in the list&quot;)
else:    
    print(&quot;no is NOT there in the list&quot;)
&lt;/pre&gt;
&lt;pre&gt;
Output: no is NOT there in the list
&lt;/pre&gt;
[[#TOP]]

==Updating the List==
The lists can be updated using ''append'' or ''insert'' function.  Append adds the element to the end of the list and Insert adds the element in the specified position.
&lt;pre&gt;
   # add the element 'Sheela' to the end of the list.
   List_2.append(&quot;Sheela&quot;)    
   print (List_2) will output 
   ['Kala', 'Mala', 'Sheela']
&lt;/pre&gt;
   &lt;pre&gt;
# add the element &quot;Bala&quot; in the list at the index 1.
   List_2.insert(1,&quot;Bala&quot;)    
   print (List_2) will output 
   ['Kala', 'Bala','Mala', 'Sheela']
&lt;/pre&gt;

=== Extend the list by adding elements of other list at end using extend()===
&lt;pre&gt;
ages = [11,23,12,23,45]
ages.extend([57,58])
print(ages)
&lt;/pre&gt;

&lt;pre&gt;
#Output: [11, 23, 12, 23, 45, 57, 58]
&lt;/pre&gt;

==== Difference between ''append and extend'' ====
Difference between append and extend can be easily understood, by the following example.

&lt;pre&gt;
appendlist = [11,23,12,23,45]
appendlist.append([57,58])

extendlist= [11,23,12,23,45]
extendlist.extend([57,58])
&lt;/pre&gt;

&lt;pre&gt;
'''Output:
[11, 23, 12, 23, 45, [57, 58]]
[11, 23, 12, 23, 45, 57, 58]'''
&lt;/pre&gt;

[[#TOP]]

==Basic Operations on List==
===Frequency of Occurrence===
list.count(object) will return the number of times the object occur in the list.
  '''Example'''
    ages = [11,23,12,23,45,43,22,24,23]
    ages.count(23) will return
    3
    ages.count(100) will return
    0

===Length of the List===
len(list) will return the length of the list ie. the number of objects in the list.
  '''Example'''
&lt;pre&gt;
    ages = [11,23,12,23,45,43,22,24,23]
    len(ages) # Output: 9
&lt;/pre&gt;

To print the objects in the list either use ''for item in list'' or ''for index in range(len(list))''
&lt;pre&gt;
    for item in ages:       
        print (item)  
        (OR)
    for index in range(len(ages)) :
        print (ages[index])
&lt;/pre&gt;

===Sort the List===
list.sort() will sort the list in ascending order
  '''Example'''
    ages = [11,23,12,23,45,43,22,24,23]
    ages.sort() 
    print (ages) 
    [11, 12, 22, 23, 23, 23, 24, 43, 45]

[[#TOP]]

===Sort the List using sorted() function===
sorted(list1) will sort the list and return a new list, it doesn't modify the original list
&lt;br&gt;'''Example: Sort in ascending order'''
&lt;pre&gt;
ages = [11,23,12,23,45,43,22,24,23]
newList=sorted(ages)
print(newList)

#Output: [11, 12, 22, 23, 23, 23, 24, 43, 45]
&lt;/pre&gt;

&lt;br&gt;'''Example: Sort in descending order'''
&lt;pre&gt;
ages = [11,23,12,23,45,43,22,24,23]
newList=sorted(ages,reverse=True)
print(newList)

#Output: [45, 43, 24, 23, 23, 23, 22, 12, 11]
&lt;/pre&gt;

===Reverse the List===
list.reverse() will reverse the original list
  '''Example'''
    ages = [11, 12, 22, 23, 23, 23, 24, 43, 45]
    ages.reverse()
    print (ages)
    [45, 43, 24, 23, 23, 23, 22, 12, 11]

Both sort() and reverse() list operation will work on numeric and alphanumeric data list.

A special use of the reverse() function is to descend a list that is sorted in ascending order.

  '''Example'''
&lt;pre&gt;
ages = [11, 12, 22, 23, 23, 23, 24, 43, 45]
ages.sort()
print(ages)
ages.reverse()
print(ages)
&lt;/pre&gt;

===Slicing===
Used to retrieve an object or objects in a range as a list  
  '''Example'''

Use ''list[index]'' to retrieve the object at the given index
&lt;pre&gt;
In [1]: student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
In [2]: student[3]     #Object at index 3.  Remember index starts at 0
Out[2]: 'Geetha'      
&lt;/pre&gt;

Use ''list[start_index : end_index + 1]'' to retrieve objects from the start_index to end_index 
&lt;pre&gt;
In [3]: student[2:4]     # Objects from index 2 to 3 as List. Note the [ and ]
Out[3]: ['Vijay', 'Geetha']   
&lt;/pre&gt;

Use ''list[:]'' to retrieve objects from the starting of the list to the end of the list. 
The default start value will be the starting index of the list (i.e. 0) and the default end value
will be the length of the list 
&lt;pre&gt;
In [4]: student[:]        # prints the entire list
Out[4]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma', 'Janani']
&lt;/pre&gt;
&lt;pre&gt;
In [5]: student[:5]       # prints the objects from the start of the list upto object at index 4
Out[5]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran']
&lt;/pre&gt;
&lt;pre&gt;
In [6]: student[2:]       # prints the objects from index 2 upto the end of the list
Out[6]: ['Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma', 'Janani']
&lt;/pre&gt;

Negative index too is available in Python. It starts from last element of the list. i.e.

         In [7]:student[-1]        #prints last index of list
         Out[7]: 'Janani'


         In [8]:student[-1:-8]     #prints empty list
         Out[8]: []


         In [9]:student[-8:-1]     #prints -8th index to -1st index elements
         Out[9]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma']

[[#TOP]]

===Removing Item from list ===
----

Is used to remove a specific item from the list.

'''Example:'''
 
Use list.remove(entry/value)  Or   del list[index]    Or list.pop(index)
         student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
         student.remove(&quot;Arun&quot;)   #This will delete item &quot;Arun&quot;
         Or    
         del student[0]           # This will delete item at index 0
         Or
         student.pop(0)         # This will delete and return item at index 0


         print(student)    
         Output: [&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]

[[#TOP]]
===Delete list ===
----
Used to delete complete list

'''Example'''

Use del &lt;list name&gt;
         student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
         del student

===Concatenation of two lists===
----
''+'' is the concatenation operator which is used concatenate two lists. 
&lt;pre&gt;
ages1 = [11,23,12,23,45]
ages2 = [25, 24, 43, 47]
age=ages1+ages2
print(age)
#Output: [11, 23, 12, 23, 45, 25, 24, 43, 47]
&lt;/pre&gt;

===Repeatation of a list ===
----
''*'' is the operator to repeat a particular list.
&lt;pre&gt;
ages1 = [11,23,12,23,45]
age=ages1*5 #ages1 list is repeated 5 times and stroed in ''age'' list
print(age)

#Output: [11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45]
&lt;/pre&gt;

=== all and any for List===
all() and any() are special functions to check whether all elements in iterable is ''True'' or any element is ''True''
&lt;ol&gt;
&lt;li&gt;If all elements in a list are ''True'', '''all()''' will return ''True''&lt;/li&gt;
&lt;li&gt;If iterable is ''empty'', '''all()''' will return ''True''&lt;/li&gt;
&lt;li&gt;If iterable contains at least one ''True'', '''any()''' will return ''True''&lt;/li&gt;
&lt;li&gt;If iterable is ''empty'', '''any()''' will return ''False''&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;
lsit=[True, True, True, True]
print(all(lsit))#Output: True
print(any(lsit))#Output: True

lsit1=[True, False, True, True]
print(all(lsit1))#Output: False
print(any(lsit1))#Output: True

lsit2=[False,False,False]
print(all(lsit2))#Output: False
print(any(lsit2))#Output: False

lsit3=[]
print(all(lsit3))#Output: True
print(any(lsit3))#Output: False
&lt;/pre&gt;

==Conditional Statements==
&lt;pre&gt;Conditionals are used to check the condition and change the flow of the program 
accordingly. They are realized in programming languages through if statement. The 
syntax is as follows :
         if condition : 
            statement
    '''Note:''' Do not forget indentation (inserting space/tab) in the line after the
 if condition.
    
    In case you want to execute a set of statements when a condition is true and another

set of statement when the condition is false.
         if condition : 
            statement 1
         else :
            statement 2
    
    Multiple if-else statements can be written as follows:
         if condition_1 : 
            statement 1
         elif condition_2 : # 'elif' is short for 'else if'
            statement 2
         elif condition_3 :
            statement 3
        .
        .
         else :
            final statement
&lt;/pre&gt;
[[#TOP]]

=Loops and Conditionals : Fizzbuzz=
====Loops====
&lt;pre&gt;
Loops are used to execute a set of repetitive statements. They are realized
through 'while' and 'for' loops in programming languages. The syntax of 'for' loop is 
as follows :
        for LOOPVARIABLE in SEQUENCE: 
            STATEMENTS
    '''e.g.''' to print all the data from a list we can write:
        for item in list_name
            print(item)
    OR
        for index in range(len(list_name))
            print(list_name[index])
    
    The syntax for while loop is as follows :
    
        while BOOLEANEXPRESSION: 
            STATEMENTS
            INCREMENT/DECREMENT
    
    '''e.g.''' if we want to print all numbers from 1 to 10
        i=1
        while i&lt;=10 :
            print(i,&quot; &quot;)
            i=i+1
    
    'while' loop has indefinite iteration (run-time unknown). So, there must be loop
 break statement in it.
 Whereas 'for' loop is definite in nature (i.e. known or predictable span).&lt;br&gt;

&lt;b&gt;NOTE: Python doesn't have anything like do-while loop.&lt;/b&gt;
&lt;/pre&gt;
[[#TOP]]

==Implementation==
Here, we try to demonstrate the concept of loops and conditionals through a game called Fizzbuzz. The rules are as follows :&lt;br/&gt;
[[File:fizzBuzz.gif]]

• if input number is a multiple of ’3’ print ”Fizz”
&lt;br/&gt;
• if input number is a multiple of ’5’ print ”Buzz”
&lt;br/&gt;
• if input number is a multiple of both '3' and ’5’ print ”FizzBuzz”
&lt;br/&gt;
The pseudo code is as follows :
&lt;pre&gt;
   If input no % 3 == 0 and  input no % 5 == 0 : 
       print ”Fizzbuzz”
   else if input no % 3 == 0 : 
       print ”Fizz”
   else if input no % 5 == 0 : 
       print ”Buzz”
   else :
       print the input no
&lt;/pre&gt;
The order of statements execution matters to get the desired output. The highest priority condition should be first followed by other. In fizzbuzz programming, first checking should be done for both divisibility of 3 and 5. If condition not satisfied only then it should check individually for 3 or 5. So carefully choosing the order is crucial for better programming.
Note: There is some effect of present condition statements chosen on next conditions statements. That is why in first attempt fizzbuzz programming got struck.

Example: 
&lt;pre&gt;
#Code to achieve the above requirement in python3.
i = int(input(&quot;Enter the number&quot;)) 
if i%3 == 0 and i%5 == 0: print(i,&quot;FizzBuzz&quot;)  
elif i%5 == 0: print(i,&quot;Buzz&quot;)
elif i%3 == 0: print(i,&quot;Fizz&quot;)
else: print(i)
&lt;/pre&gt;
Lets put the same into a loop for a range given by the user.
&lt;pre&gt;
def fizzbuzzgame(start,stop):
    for i in range(start,stop+1):
        if i%3 == 0 and i%5 == 0:
            print(i,&quot;FizzBuzz&quot;)
        elif i%5 == 0:
            print(i,&quot;Buzz&quot;)
        elif i%3 == 0:
            print(i,&quot;Fizz&quot;)
        else: print(i)

fizzbuzzgame(50,100)
&lt;/pre&gt;


=== Fizz Buzz game in Interactive mode with Score ===
'''By Ms. Ami Tusharkant Choksi'''
&lt;pre&gt;
def fizzbuzzgame(i):
        if i%3 == 0 and i%5 == 0:
            print(i,&quot;FizzBuzz&quot;)
            return(&quot;fzbz&quot;)
        elif i%5 == 0:
            print(i,&quot;Buzz&quot;)
            return(&quot;bz&quot;)
        elif i%3 == 0:
            print(i,&quot;Fizz&quot;)
            return(&quot;fz&quot;)
        else:
            print(i)
            return(&quot;no&quot;)

ch = 'y'
fizzbuzz=0
fizz=0
buzz=0
nothing=0
print(&quot;&quot;&quot;
 _____  ____  _____  _____  ____   __ __  _____  _____       ____   ____  ___ ___    ___ 
|     ||    ||     ||     ||    \ |  |  ||     ||     |     /    | /    ||   |   |  /  _]
|   __| |  | |__/  ||__/  ||  o  )|  |  ||__/  ||__/  |    |   __||  o  || _   _ | /  [_ 
|  |_   |  | |   __||   __||     ||  |  ||   __||   __|    |  |  ||     ||  \_/  ||    _]
|   _]  |  | |  /  ||  /  ||  O  ||  :  ||  /  ||  /  |    |  |_ ||  _  ||   |   ||   [_ 
|  |    |  | |     ||     ||     ||     ||     ||     |    |     ||  |  ||   |   ||     |
|__|   |____||_____||_____||_____| \__,_||_____||_____|    |___,_||__|__||___|___||_____|
                                                                                         
&quot;&quot;&quot;)   

while(ch == 'y'):
    n=int(input(&quot;Enter a Number : &quot;))
    winLoose=fizzbuzzgame(n)
    if(winLoose == &quot;fz&quot;):
        fizz+=1
    elif(winLoose == &quot;bz&quot;):
        buzz+=1
    elif(winLoose == &quot;fzbz&quot;):
        fizzbuzz+=1
    ch=input(&quot;Do you want to continue playing the game : (y/n)&quot;)
    if(ch=='n'):
        print('Congratulations, your score is\n FizzBuzz:%d\nFizz:%d\nBuzz:%d' %
(fizzbuzz,fizz,buzz))
    
'''Sample Output:

 _____  ____  _____  _____  ____   __ __  _____  _____       ____   ____  ___ ___    ___ 
|     ||    ||     ||     ||    \ |  |  ||     ||     |     /    | /    ||   |   |  /  _]
|   __| |  | |__/  ||__/  ||  o  )|  |  ||__/  ||__/  |    |   __||  o  || _   _ | /  [_ 
|  |_   |  | |   __||   __||     ||  |  ||   __||   __|    |  |  ||     ||  \_/  ||    _]
|   _]  |  | |  /  ||  /  ||  O  ||  :  ||  /  ||  /  |    |  |_ ||  _  ||   |   ||   [_ 
|  |    |  | |     ||     ||     ||     ||     ||     |    |     ||  |  ||   |   ||     |
|__|   |____||_____||_____||_____| \__,_||_____||_____|    |___,_||__|__||___|___||_____|
                                                                                         

Enter a Number : 666
666 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 777
777 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 555
555 FizzBuzz
Do you want to continue playing the game : (y/n)y
Enter a Number : 1
1
Do you want to continue playing the game : (y/n)y
Enter a Number : 789
789 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 25
25 Buzz
Do you want to continue playing the game : (y/n)n
Congratulations, your score is

FizzBuzz:1
Fizz:3
Buzz:1

&lt;/pre&gt;

=Crowd Computing: Just Estimate=
==Wisdom of Crowds==
The concept of ’Wisdom of Crowds’ was proposed by Francis Galton. A weight-judging competition was carried on at the annual show of the West of England Fat Stock and Poultry Exhibition recently held at Plymouth, A fat ox having been selected, competitors bought stamped and numbered cards, each, on which to inscribe their respective names, addresses, and estimates of what the ox would weigh after it had been slaughtered. Those who guessed most successfully received prizes. About 8oo tickets were issued to the par- ticipants. The middlemost estimate of all the estimates recorded was 1207 lbs and the actual weight of the ox was 1198 lbs.

==Our Experiment==
The crowd had to guess the number of candies/gems in a jar. Around 75 people participated in the experiment. The actual number of gems in the jar were 375. The median of all estimates came out to be 300 and the mean of all the estimates came out to be around 396. Median underestimated and mean overestimated the actual value. So according to recent studies, Trimmed mean must be used as an aggregate measure to estimate where Wisdom of Crowds is involved.
[[File:Gemsjar.jpg|center|200px|caption]]

===Trimmed Mean===
In these kinds of experiments, 10% trimmed mean is usually followed. For calculating 10% trimmed mean, remove 10% smallest and 10% largest values from the sample. Calculate the mean of the sample obtained. In the above experiment, the trimmed mean came out to be around 351 which is very close to the actual value.

==Implementation==
Here, we try to demonstrate the concept of trimmed mean through crowd computing.
 Input a list of estimates done by the crowd .
 Sort the list.
 Remove the 10% smallest values.
 Remove the 10% largest values.
 Calculate the mean of the new list obtained .&lt;hr&gt;

==Data of Experiment==       
    Estimates =[1000,1010,1786,2000,1500,1500,100,120,150,150,150,170,175,180,197,200,200,200,200,200,200,220,220,220,220,234,250,250,250,250,250,250,250,250,250,263,270,275,275,286,300,
                300,300,300,300,300,300,300,320,350,350,350,400, 400,400,400,400,450,467,500,500,500,500,500,500,500,550,550,600,600,600,650,700,700,720]

    '''CODE:'''
&lt;pre&gt;
Estimates = [1000,1010,1786,2000,1500,1500,100,120,150,150,150,170,175,180,197,200,200,200,200,200,200,220,220,220,220,234,250,250,250,250,250,250,250,250,250,263,270,275,275,286,300,                300,300,300,300,300,300,300,320,350,350,350,400,400,400,400,400,450,467,500,500,500,500,500,500,500,550,550,600,600,600,650,700,700,720]
Estimates.sort()
offset = int(0.10*len(Estimates))
for i in range(offset):
       del Estimates[0]
       del Estimates[-1]
Sum = 0    
for i in range(len(Estimates)):
       Sum += Estimates[i]
Mean_Value = Sum/len(Estimates)
print(&quot;Mean : &quot;, int(Mean_Value))
#Output:
Mean :  351
&lt;/pre&gt;
&lt;hr&gt;
==Trimmed Mean for the above example== 
&lt;h3&gt;Using scipy library&lt;/h3&gt;
&lt;pre&gt;
#import scipy to use the method of trim_mean
from scipy import stats
trimMean = stats.trim_mean(Estimates, 0.1) # Trim 10% at both ends
print(&quot;Trimmed Mean : &quot;,trimMean)
#Output:
Trimmed Mean :  335.1020408163265
&lt;/pre&gt;

&lt;h3&gt;Without using scipy library&lt;/h3&gt;
&lt;pre&gt;
#Trimmed mean with 10%
p=10/100
#sorted data
data=[2, 4, 6, 7, 11, 21, 81, 90, 105, 121]
n = len(data)
#Remove elements from both end
rem=int(n*p)
newData = data[rem:-rem]
mean = 0
for i in newData:
    mean += i
mean = int(mean/len(newData))
print(&quot;Trimmed mean : &quot;,mean)
#Output: Trimmed mean :  40
&lt;/pre&gt;
[[#Top]]

=Jumbled_Words Permutations: Jumbled Words=
==What are Permutations ?==
A permutation also called ordering of selected number of elements from a list denoted by nPr here we are choosing all elements of a list and so n=r&lt;br&gt;
nPr=n!/(n-r)!&lt;br&gt; as n=r
nPn=n!&lt;br&gt; which gives all possible arrangement of elements present in a list.

 For example, permutations of list [1,2,3] are [1,2,3], [1,3,2], [2,1,3], [2,3,1], 
[3,1,2], and [3,2,1]. 
The number of permutations of a list of elements nPn is given by n!. For example, there are 2! = 2 x 1 = 2 permutations of [1,2], namely [1,2] and [2,1], and 3! = 3 x 2 x 1 = 6 permutations of [1,2,3], as mentioned above.&lt;br/&gt;
[[File:Permutations.jpg]]

==Implementation==
Here, we try to demonstrate the concept of permutations through jumbled words. It is a two player game in which one person presents the other person a different permutation of the word in his mind. The other person has to guess the right word. If he guesses, the he wins otherwise he loses.
 Input an list of words.
 Randomly pick a word from the list of words .
 Shuffle this word and present it to the other player.
 if word guesses by the player is same as the one picked from list of w
     player wins
 else
     player loses

ALTERNATE CODE TO GENERATE THIS GAME:
&lt;pre&gt;
import random
p1=input(&quot;enter player 1 name:&quot;)
p2=input(&quot;enter player 2 name:&quot;)
l=[&quot;rainbow&quot;,&quot;computer&quot;,&quot;robot&quot;,&quot;butter&quot;,&quot;vegetable&quot;,&quot;science&quot;,&quot;correct&quot;]
c1=c2=a1=a2=f1=f2=0
k=1
i=3
def play():
    n=random.choice(l)        ##n=chooses a word from list l
    l1=[]
    for j in n:
       l1.append(j)      ##creates a list for word in n
    for t in range(len(l1)):
       p=random.choice(l1)     ##this randomly displays letters in the list
       print(p)
       l1.remove(p)          ##to avoid the repetition of a letter
    s=input(&quot;enter the word:&quot;)
    if(s==n):
        print(&quot;correct&quot;)
        return 1
    else:
        print(&quot;not correct&quot;)
        print(&quot;answer is&quot;,n)
        return 0
def stat():
     print(&quot;player 1:&quot;)
     print(&quot;score:&quot;,c1)
     print(&quot;answered:&quot;,a1)
     print(&quot;failed:&quot;,f1)
     print(&quot;.............&quot;)
     print(&quot;player 2:&quot;)
     print(&quot;score:&quot;,c2)
     print(&quot;answered:&quot;,a2)
     print(&quot;failed&quot;,f2)
     if(c1&gt;c2):
         print(p1,&quot; won over &quot;,p2)
     elif(c1==c2):
         print(&quot;draw game&quot;)
     else:
         print(p2,&quot; won over &quot;,p1) 
while(i!=4):
      if(i==3):
         if(k==1):
             print(&quot;player 1 turn&quot;)
             print(&quot;your jumbled word is:&quot;)
             k=k+1
             m=play()
             if(m==1):      ##if guessed answer is correct,then score and no.of answered count will be increased
                c1+=1
                a1+=1
             else:
                f1+=1       ##else count of no.of failed to answered will be incremented
         else:
             print(&quot;player 2 turn&quot;)
             print(&quot;your jumbled word is:&quot;)
             k=k-1
             m=play()
             if(m==1):
                c2=c2+1
                a2=a2+1
             else:
                f2=f2+1
       if(i==2):
             print(&quot;present status&quot;)
             stat()
       i=int(input(&quot;enter your choice  1.stop 2.status 3.continue&quot;))
       if(i==1):
             stat()
             i=i+3
&lt;/pre&gt;
&lt;hr&gt;
=== JumbledWord Simple Logic, In Short ===
[[File:jumbledWord.gif]]
&lt;hr&gt;
'''Logic to create a Jumbled Word'''
&lt;hr&gt;
&lt;pre&gt;
#Get Jumbled Word and print it Horizontally
import random

def getJumbledWord(b):
    jumble=''
    l1 = [ b[i] for i in range(0, len(b)) ]
    for t in range(len(l1)):
       p=random.choice(l1)     ##this randomly gets letters from the list      
       jumble=jumble+p       
       l1.remove(p)
    return jumble

b=input(&quot;Enter a word to make it jumbled : &quot;)
print(&quot;Jumbled Word : &quot;, getJumbledWord(b))
&lt;/pre&gt;
&lt;hr&gt;
'''Another Logic to create a Jumbled Word'''
&lt;hr&gt;
&lt;pre&gt;
b=input(&quot;Enter a word to make it jumbled : &quot;)

def getJumbledWord1(b):
    l1 = [ b[i] for i in range(0, len(b)) ]
    random.shuffle(l1)
    str1 = ''.join(l1)
    return str1

print(&quot;Jumbled Word : &quot;, getJumbledWord1(b))
&lt;/pre&gt;

====Sample Output:====
&lt;pre&gt;
---- Output1 
Enter a word to make it jumbled : butter
Jumbled Word :  tbture

---- Output2 
Enter a word to make it jumbled : petriotism
Jumbled Word :  pittrosime
&lt;/pre&gt;

=Theory of Evolution=

== What is Evolution ? ==
Evolution is the change in heritable characteristics over successive generations. The theory of evolution explains that DNA, which acts as a carrier of genetic information from one generation to other, tends to change or mutate occasionally. These changes are reflected in next generations to come. This is how life has evolved on earth from bacteria to human beings.&lt;br&gt;
[[File:Evolution.png|500px]]

== Implementation ==
&lt;pre&gt;An array representing DNA is stored in a file. As genes are forms of DNA, they contain information to be transferred to forthcoming generations. Assume that information is in the form of bits (in the form of 0s and 1s). A number is picked randomly from 1 to the size of the array. A new parameter has been introduced which decides whether mutation would occur or not. If the value of this new parameter is 1 (It is picked randomly from 1 to 100), then only change is reflected down the generations, otherwise it is not. The pseudo code is as follows :
Input an array containing genetic information .
Randomly generate a number (say m) from 1 to length of the array. Randomly generate other number (say p) from 1 to 100.
 
    if p is equal to 1 then 
        if m is 1 then
          set it to 0
        else
          set it to 1
&lt;/pre&gt;
[[#TOP]]</text>
      <sha1>hvw1fmd8tkr3c8ug1sullehx7litkg8</sha1>
    </revision>
    <revision>
      <id>3560</id>
      <parentid>3559</parentid>
      <timestamp>2018-09-28T02:29:57Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* Slicing */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="29440">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_3 Contributors of this page]
*Week 3 Playlist: https://www.youtube.com/playlist?list=PLc_j0TNIaWxOVx_z9jAM2UB3RqYNXaoEo
=List=
List is a flexible data structure used for storing a group of data separated by comma. The elements in a list need not be of the same data type.

'''Example:'''
       List_1 = [ 1, 2,3] or 
       List_1 = [&quot;coffee&quot;, &quot;Tea&quot;, &quot;Milk&quot;] or
       List_1 = [1,&quot;coffee&quot;, &quot;Tea&quot;, 3, &quot;5&quot;]

==List Creation==
&lt;pre&gt;a) A list can be created by simply putting values (separated by comma) between square brackets as given below,
       List_1 = [1,&quot;coffee&quot;, &quot;Tea&quot;, 3, &quot;5&quot;] #this creates a list by name List_1 containing following items


Or,
(b)A List can be created from scratch and elements can be added 
        List_2 = [ ]
        List_2.append(&quot;Kala&quot;)
        List_2.append(&quot;Mala&quot;)
Here we use &quot;append&quot; ,which is a function in python that enable us to append or attach an element to a list .
Thus List_2 will now hold [&quot;Kala&quot;,&quot;Mala&quot;]
&lt;/pre&gt;
[[#TOP]]

==Operations and Methods to work with List==
&lt;pre&gt;
a = [25,30,50,90,12,13]
b = [100,300,500,200,250]
&lt;/pre&gt;
&lt;hr&gt;
&lt;table border=2&gt;
  &lt;tr&gt;
    &lt;th&gt;&lt;b&gt;Method/&lt;br&gt;Operator&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Function&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Syntax&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Output&lt;/b&gt;&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;len()&lt;/td&gt;
    &lt;td&gt;Find length of a list&lt;/td&gt;
    &lt;td&gt;len(a)&lt;/td&gt;
    &lt;td&gt;6&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;max()&lt;/td&gt;
    &lt;td&gt;Find maximum element from the list&lt;/td&gt;
    &lt;td&gt;max(a)&lt;/td&gt;
    &lt;td&gt;90&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;min()&lt;/td&gt;
    &lt;td&gt;Find minimum element from the list&lt;/td&gt;
    &lt;td&gt;min(a)&lt;/td&gt;
    &lt;td&gt;12&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sum()&lt;/td&gt;
    &lt;td&gt;Returns sum of all elements of the list&lt;/td&gt;
    &lt;td&gt;sum(a)&lt;/td&gt;
    &lt;td&gt;220&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;reverse()&lt;/td&gt;
    &lt;td&gt;Reverses the original list&lt;/td&gt;
    &lt;td&gt;a.reverse()&lt;/td&gt;
    &lt;td&gt;[13, 12, 90, 50, 30, 25]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sort()&lt;/td&gt;
    &lt;td&gt;Sorts the original list in ascending order&lt;/td&gt;
    &lt;td&gt;a.sort()&lt;/td&gt;
    &lt;td&gt;[12, 13, 25, 30, 50, 90]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sorted()&lt;/td&gt;
    &lt;td&gt;Returns the new sorted list &lt;/td&gt;
    &lt;td&gt;sorted(a)&lt;/td&gt;
    &lt;td&gt;[12, 13, 25, 30, 50, 90]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;insert()&lt;/td&gt;
    &lt;td&gt;Insert at a particular index in the list, and shifts remaining elements&lt;/td&gt;
    &lt;td&gt;a.insert(3,3)&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 3, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;append()&lt;/td&gt;
    &lt;td&gt;Adds elements/object to the end of the list&lt;/td&gt;
    &lt;td&gt;a.append(5)&lt;br&gt;a.append([10,20])&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 5]&lt;br&gt;[25, 30, 50, 90, 12, 13, [10, 20]]&lt;br&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;extend()&lt;/td&gt;
    &lt;td&gt;Adds object to the end of the list as elements not as object&lt;/td&gt;
    &lt;td&gt;a.extend([10,20])&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 10, 20]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;*&amp;nbsp;&amp;nbsp;Repeatation&lt;br&gt;operator&lt;/td&gt;
    &lt;td&gt;Repeat the list for n times and returns a new list&lt;/td&gt;
    &lt;td&gt;a*2&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 25, 30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;+ Concatenation&lt;br&gt;operator&lt;/td&gt;
    &lt;td&gt;Concatenates two lists, and returns a new list&lt;/td&gt;
    &lt;td&gt;a+b&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 100, 300, 500, 200, 250]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;index()&lt;/td&gt;
    &lt;td&gt;Finds index of a particular element in the list or not&lt;/td&gt;
    &lt;td&gt;a.index(25)&lt;br&gt;a.index(0)&lt;br&gt;&lt;/td&gt;
    &lt;td&gt;0&lt;br&gt;&lt;br&gt;ValueError: 0 is not in list&lt;br&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;in operator&lt;/td&gt;
    &lt;td&gt;Finds whether a particular element is in the list or not, returns boolean&lt;/td&gt;
    &lt;td&gt;25 in a&lt;/td&gt;
    &lt;td&gt;True&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;not in operator&lt;/td&gt;
    &lt;td&gt;Checks if element is not available in list, returns boolean&lt;/td&gt;
    &lt;td&gt;25 not in a&lt;/td&gt;
    &lt;td&gt;False&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;count()&lt;/td&gt;
    &lt;td&gt;Counts the number of occurence of an element in the list&lt;/td&gt;
    &lt;td&gt;a.count(25)&lt;/td&gt;
    &lt;td&gt;1&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;remove()&lt;/td&gt;
    &lt;td&gt;Removes an element from the list&lt;/td&gt;
    &lt;td&gt;a.remove(25)&lt;/td&gt;
    &lt;td&gt; [30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;pop()&lt;/td&gt;
    &lt;td&gt;Delete and return item at index 0&lt;/td&gt;
    &lt;td&gt;a.pop(0)&lt;/td&gt;
    &lt;td&gt;25 , a will be [30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;del&lt;/td&gt;
    &lt;td&gt;Deletes item at a particular index from the list&lt;/td&gt;
    &lt;td&gt;del a[0]&lt;/td&gt;
    &lt;td&gt;[30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;all()&lt;/td&gt;
&lt;td&gt;Returns True, if all items in list are True or it is an empty list&lt;/td&gt;
&lt;td&gt;all([True, True, True])
all([])
&lt;/td&gt;
&lt;td&gt;True&lt;br&gt;
True&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;any()&lt;/td&gt;
&lt;td&gt;Returns True, if any item in list is True else return False&lt;/td&gt;
&lt;td&gt;any([True, True, True])&lt;br&gt;
any([True, False, True])&lt;br&gt;
any([])&lt;/td&gt;
&lt;td&gt;True&lt;br&gt;False&lt;br&gt;False&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;

==Printing the List==
=== Print whole list ===
A list can be printed simply or using a ''for / while'' loop 

 print(List_2)     # To print the entire list
This code will print      
 ['Kala','Mala']     

===Print element at a particular index===
&lt;pre&gt;
Using index position
    List_2[0]     # prints 'Kala' ,i.e,the value at index position 0.
    List_2[1]     # prints 'Mala'.
&lt;/pre&gt;
=== Without using index position ===
&lt;pre&gt;
for item in List_2:   # here item is a variable used to access elements in list.
       print(item)
   This code snippet prints 
    Kala
    Mala
&lt;/pre&gt;
[[#TOP]]

==Search for a particular element in list==
Elements in a list can be searched by one of the two ways:
=== using index() function===
&lt;pre&gt;
ages1 = [11,23,12,23,45]

#if element is available in the list, index() returns the index value on which, the element is present.
print(ages1.index(45))#Output: 4

#if element is not available in the list, index() returns ''ValueError''
print(ages1.index(0))#Output: ValueError:
&lt;/pre&gt;

In programming, if such error occurs, program gets terminated. It can be solved using exception handling.
e.g.
&lt;pre&gt;
ages1 = [11,23,12,23,45]

try:
    print(ages1.index(0))
except ValueError:
    print(&quot;Exception has occured&quot;)    
    print(&quot;Element is not found in the list&quot;)

&lt;/pre&gt;
&lt;pre&gt;
'''Output: 
Exception has occured
Element is not found in the list
'''&lt;/pre&gt;
[[#TOP]]

=== using 'in' operator===
''in'' operator is used to check whether a particular element is available in the list or not.e.g.

&lt;pre&gt;
ages1 = [11,23,12,23,45]
no=11

if no in ages1:
    print(&quot;no is there in the list&quot;)
else:    
    print(&quot;no is NOT there in the list&quot;)
&lt;/pre&gt;
&lt;pre&gt;
#Output: no is there in the list
&lt;/pre&gt;


'''Number is not there in the list'''
&lt;pre&gt;
ages1 = [11,23,12,23,45]
no=15

if no in ages1:
    print(&quot;no is there in the list&quot;)
else:    
    print(&quot;no is NOT there in the list&quot;)
&lt;/pre&gt;
&lt;pre&gt;
Output: no is NOT there in the list
&lt;/pre&gt;
[[#TOP]]

==Updating the List==
The lists can be updated using ''append'' or ''insert'' function.  Append adds the element to the end of the list and Insert adds the element in the specified position.
&lt;pre&gt;
   # add the element 'Sheela' to the end of the list.
   List_2.append(&quot;Sheela&quot;)    
   print (List_2) will output 
   ['Kala', 'Mala', 'Sheela']
&lt;/pre&gt;
   &lt;pre&gt;
# add the element &quot;Bala&quot; in the list at the index 1.
   List_2.insert(1,&quot;Bala&quot;)    
   print (List_2) will output 
   ['Kala', 'Bala','Mala', 'Sheela']
&lt;/pre&gt;

=== Extend the list by adding elements of other list at end using extend()===
&lt;pre&gt;
ages = [11,23,12,23,45]
ages.extend([57,58])
print(ages)
&lt;/pre&gt;

&lt;pre&gt;
#Output: [11, 23, 12, 23, 45, 57, 58]
&lt;/pre&gt;

==== Difference between ''append and extend'' ====
Difference between append and extend can be easily understood, by the following example.

&lt;pre&gt;
appendlist = [11,23,12,23,45]
appendlist.append([57,58])

extendlist= [11,23,12,23,45]
extendlist.extend([57,58])
&lt;/pre&gt;

&lt;pre&gt;
'''Output:
[11, 23, 12, 23, 45, [57, 58]]
[11, 23, 12, 23, 45, 57, 58]'''
&lt;/pre&gt;

[[#TOP]]

==Basic Operations on List==
===Frequency of Occurrence===
list.count(object) will return the number of times the object occur in the list.
  '''Example'''
    ages = [11,23,12,23,45,43,22,24,23]
    ages.count(23) will return
    3
    ages.count(100) will return
    0

===Length of the List===
len(list) will return the length of the list ie. the number of objects in the list.
  '''Example'''
&lt;pre&gt;
    ages = [11,23,12,23,45,43,22,24,23]
    len(ages) # Output: 9
&lt;/pre&gt;

To print the objects in the list either use ''for item in list'' or ''for index in range(len(list))''
&lt;pre&gt;
    for item in ages:       
        print (item)  
        (OR)
    for index in range(len(ages)) :
        print (ages[index])
&lt;/pre&gt;

===Sort the List===
list.sort() will sort the list in ascending order
  '''Example'''
    ages = [11,23,12,23,45,43,22,24,23]
    ages.sort() 
    print (ages) 
    [11, 12, 22, 23, 23, 23, 24, 43, 45]

[[#TOP]]

===Sort the List using sorted() function===
sorted(list1) will sort the list and return a new list, it doesn't modify the original list
&lt;br&gt;'''Example: Sort in ascending order'''
&lt;pre&gt;
ages = [11,23,12,23,45,43,22,24,23]
newList=sorted(ages)
print(newList)

#Output: [11, 12, 22, 23, 23, 23, 24, 43, 45]
&lt;/pre&gt;

&lt;br&gt;'''Example: Sort in descending order'''
&lt;pre&gt;
ages = [11,23,12,23,45,43,22,24,23]
newList=sorted(ages,reverse=True)
print(newList)

#Output: [45, 43, 24, 23, 23, 23, 22, 12, 11]
&lt;/pre&gt;

===Reverse the List===
list.reverse() will reverse the original list
  '''Example'''
    ages = [11, 12, 22, 23, 23, 23, 24, 43, 45]
    ages.reverse()
    print (ages)
    [45, 43, 24, 23, 23, 23, 22, 12, 11]

Both sort() and reverse() list operation will work on numeric and alphanumeric data list.

A special use of the reverse() function is to descend a list that is sorted in ascending order.

  '''Example'''
&lt;pre&gt;
ages = [11, 12, 22, 23, 23, 23, 24, 43, 45]
ages.sort()
print(ages)
ages.reverse()
print(ages)
&lt;/pre&gt;

===Slicing===
Used to retrieve an object or objects in a range as a list  
  '''Example'''

Use ''list[index]'' to retrieve the object at the given index
&lt;pre&gt;
In [1]: student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
In [2]: student[3]     #Object at index 3.  Remember index starts at 0
Out[2]: 'Geetha'      
&lt;/pre&gt;

Use ''list[start_index : end_index + 1]'' to retrieve objects from the start_index to end_index 
&lt;pre&gt;
In [3]: student[2:4]     # Objects from index 2 to 3 as List. Note the [ and ]
Out[3]: ['Vijay', 'Geetha']   
&lt;/pre&gt;

Use ''list[:]'' to retrieve objects from the starting of the list to the end of the list. 
The default start value will be the starting index of the list (i.e. 0) and the default end value
will be the length of the list 
&lt;pre&gt;
In [4]: student[:]        # prints the entire list
Out[4]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma', 'Janani']
&lt;/pre&gt;
&lt;pre&gt;
In [5]: student[:5]       # prints the objects from the start of the list upto object at index 4
Out[5]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran']
&lt;/pre&gt;
&lt;pre&gt;
In [6]: student[2:]       # prints the objects from index 2 upto the end of the list
Out[6]: ['Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma', 'Janani']
&lt;/pre&gt;

Negative index too is available in Python. It starts from last element of the list. i.e.
&lt;pre&gt;
In [7]:student[-1]        #prints last index of list
Out[7]: 'Janani'
&lt;/pre&gt;

         In [8]:student[-1:-8]     #prints empty list
         Out[8]: []


         In [9]:student[-8:-1]     #prints -8th index to -1st index elements
         Out[9]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma']

[[#TOP]]

===Removing Item from list ===
----

Is used to remove a specific item from the list.

'''Example:'''
 
Use list.remove(entry/value)  Or   del list[index]    Or list.pop(index)
         student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
         student.remove(&quot;Arun&quot;)   #This will delete item &quot;Arun&quot;
         Or    
         del student[0]           # This will delete item at index 0
         Or
         student.pop(0)         # This will delete and return item at index 0


         print(student)    
         Output: [&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]

[[#TOP]]
===Delete list ===
----
Used to delete complete list

'''Example'''

Use del &lt;list name&gt;
         student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
         del student

===Concatenation of two lists===
----
''+'' is the concatenation operator which is used concatenate two lists. 
&lt;pre&gt;
ages1 = [11,23,12,23,45]
ages2 = [25, 24, 43, 47]
age=ages1+ages2
print(age)
#Output: [11, 23, 12, 23, 45, 25, 24, 43, 47]
&lt;/pre&gt;

===Repeatation of a list ===
----
''*'' is the operator to repeat a particular list.
&lt;pre&gt;
ages1 = [11,23,12,23,45]
age=ages1*5 #ages1 list is repeated 5 times and stroed in ''age'' list
print(age)

#Output: [11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45]
&lt;/pre&gt;

=== all and any for List===
all() and any() are special functions to check whether all elements in iterable is ''True'' or any element is ''True''
&lt;ol&gt;
&lt;li&gt;If all elements in a list are ''True'', '''all()''' will return ''True''&lt;/li&gt;
&lt;li&gt;If iterable is ''empty'', '''all()''' will return ''True''&lt;/li&gt;
&lt;li&gt;If iterable contains at least one ''True'', '''any()''' will return ''True''&lt;/li&gt;
&lt;li&gt;If iterable is ''empty'', '''any()''' will return ''False''&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;
lsit=[True, True, True, True]
print(all(lsit))#Output: True
print(any(lsit))#Output: True

lsit1=[True, False, True, True]
print(all(lsit1))#Output: False
print(any(lsit1))#Output: True

lsit2=[False,False,False]
print(all(lsit2))#Output: False
print(any(lsit2))#Output: False

lsit3=[]
print(all(lsit3))#Output: True
print(any(lsit3))#Output: False
&lt;/pre&gt;

==Conditional Statements==
&lt;pre&gt;Conditionals are used to check the condition and change the flow of the program 
accordingly. They are realized in programming languages through if statement. The 
syntax is as follows :
         if condition : 
            statement
    '''Note:''' Do not forget indentation (inserting space/tab) in the line after the
 if condition.
    
    In case you want to execute a set of statements when a condition is true and another

set of statement when the condition is false.
         if condition : 
            statement 1
         else :
            statement 2
    
    Multiple if-else statements can be written as follows:
         if condition_1 : 
            statement 1
         elif condition_2 : # 'elif' is short for 'else if'
            statement 2
         elif condition_3 :
            statement 3
        .
        .
         else :
            final statement
&lt;/pre&gt;
[[#TOP]]

=Loops and Conditionals : Fizzbuzz=
====Loops====
&lt;pre&gt;
Loops are used to execute a set of repetitive statements. They are realized
through 'while' and 'for' loops in programming languages. The syntax of 'for' loop is 
as follows :
        for LOOPVARIABLE in SEQUENCE: 
            STATEMENTS
    '''e.g.''' to print all the data from a list we can write:
        for item in list_name
            print(item)
    OR
        for index in range(len(list_name))
            print(list_name[index])
    
    The syntax for while loop is as follows :
    
        while BOOLEANEXPRESSION: 
            STATEMENTS
            INCREMENT/DECREMENT
    
    '''e.g.''' if we want to print all numbers from 1 to 10
        i=1
        while i&lt;=10 :
            print(i,&quot; &quot;)
            i=i+1
    
    'while' loop has indefinite iteration (run-time unknown). So, there must be loop
 break statement in it.
 Whereas 'for' loop is definite in nature (i.e. known or predictable span).&lt;br&gt;

&lt;b&gt;NOTE: Python doesn't have anything like do-while loop.&lt;/b&gt;
&lt;/pre&gt;
[[#TOP]]

==Implementation==
Here, we try to demonstrate the concept of loops and conditionals through a game called Fizzbuzz. The rules are as follows :&lt;br/&gt;
[[File:fizzBuzz.gif]]

• if input number is a multiple of ’3’ print ”Fizz”
&lt;br/&gt;
• if input number is a multiple of ’5’ print ”Buzz”
&lt;br/&gt;
• if input number is a multiple of both '3' and ’5’ print ”FizzBuzz”
&lt;br/&gt;
The pseudo code is as follows :
&lt;pre&gt;
   If input no % 3 == 0 and  input no % 5 == 0 : 
       print ”Fizzbuzz”
   else if input no % 3 == 0 : 
       print ”Fizz”
   else if input no % 5 == 0 : 
       print ”Buzz”
   else :
       print the input no
&lt;/pre&gt;
The order of statements execution matters to get the desired output. The highest priority condition should be first followed by other. In fizzbuzz programming, first checking should be done for both divisibility of 3 and 5. If condition not satisfied only then it should check individually for 3 or 5. So carefully choosing the order is crucial for better programming.
Note: There is some effect of present condition statements chosen on next conditions statements. That is why in first attempt fizzbuzz programming got struck.

Example: 
&lt;pre&gt;
#Code to achieve the above requirement in python3.
i = int(input(&quot;Enter the number&quot;)) 
if i%3 == 0 and i%5 == 0: print(i,&quot;FizzBuzz&quot;)  
elif i%5 == 0: print(i,&quot;Buzz&quot;)
elif i%3 == 0: print(i,&quot;Fizz&quot;)
else: print(i)
&lt;/pre&gt;
Lets put the same into a loop for a range given by the user.
&lt;pre&gt;
def fizzbuzzgame(start,stop):
    for i in range(start,stop+1):
        if i%3 == 0 and i%5 == 0:
            print(i,&quot;FizzBuzz&quot;)
        elif i%5 == 0:
            print(i,&quot;Buzz&quot;)
        elif i%3 == 0:
            print(i,&quot;Fizz&quot;)
        else: print(i)

fizzbuzzgame(50,100)
&lt;/pre&gt;


=== Fizz Buzz game in Interactive mode with Score ===
'''By Ms. Ami Tusharkant Choksi'''
&lt;pre&gt;
def fizzbuzzgame(i):
        if i%3 == 0 and i%5 == 0:
            print(i,&quot;FizzBuzz&quot;)
            return(&quot;fzbz&quot;)
        elif i%5 == 0:
            print(i,&quot;Buzz&quot;)
            return(&quot;bz&quot;)
        elif i%3 == 0:
            print(i,&quot;Fizz&quot;)
            return(&quot;fz&quot;)
        else:
            print(i)
            return(&quot;no&quot;)

ch = 'y'
fizzbuzz=0
fizz=0
buzz=0
nothing=0
print(&quot;&quot;&quot;
 _____  ____  _____  _____  ____   __ __  _____  _____       ____   ____  ___ ___    ___ 
|     ||    ||     ||     ||    \ |  |  ||     ||     |     /    | /    ||   |   |  /  _]
|   __| |  | |__/  ||__/  ||  o  )|  |  ||__/  ||__/  |    |   __||  o  || _   _ | /  [_ 
|  |_   |  | |   __||   __||     ||  |  ||   __||   __|    |  |  ||     ||  \_/  ||    _]
|   _]  |  | |  /  ||  /  ||  O  ||  :  ||  /  ||  /  |    |  |_ ||  _  ||   |   ||   [_ 
|  |    |  | |     ||     ||     ||     ||     ||     |    |     ||  |  ||   |   ||     |
|__|   |____||_____||_____||_____| \__,_||_____||_____|    |___,_||__|__||___|___||_____|
                                                                                         
&quot;&quot;&quot;)   

while(ch == 'y'):
    n=int(input(&quot;Enter a Number : &quot;))
    winLoose=fizzbuzzgame(n)
    if(winLoose == &quot;fz&quot;):
        fizz+=1
    elif(winLoose == &quot;bz&quot;):
        buzz+=1
    elif(winLoose == &quot;fzbz&quot;):
        fizzbuzz+=1
    ch=input(&quot;Do you want to continue playing the game : (y/n)&quot;)
    if(ch=='n'):
        print('Congratulations, your score is\n FizzBuzz:%d\nFizz:%d\nBuzz:%d' %
(fizzbuzz,fizz,buzz))
    
'''Sample Output:

 _____  ____  _____  _____  ____   __ __  _____  _____       ____   ____  ___ ___    ___ 
|     ||    ||     ||     ||    \ |  |  ||     ||     |     /    | /    ||   |   |  /  _]
|   __| |  | |__/  ||__/  ||  o  )|  |  ||__/  ||__/  |    |   __||  o  || _   _ | /  [_ 
|  |_   |  | |   __||   __||     ||  |  ||   __||   __|    |  |  ||     ||  \_/  ||    _]
|   _]  |  | |  /  ||  /  ||  O  ||  :  ||  /  ||  /  |    |  |_ ||  _  ||   |   ||   [_ 
|  |    |  | |     ||     ||     ||     ||     ||     |    |     ||  |  ||   |   ||     |
|__|   |____||_____||_____||_____| \__,_||_____||_____|    |___,_||__|__||___|___||_____|
                                                                                         

Enter a Number : 666
666 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 777
777 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 555
555 FizzBuzz
Do you want to continue playing the game : (y/n)y
Enter a Number : 1
1
Do you want to continue playing the game : (y/n)y
Enter a Number : 789
789 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 25
25 Buzz
Do you want to continue playing the game : (y/n)n
Congratulations, your score is

FizzBuzz:1
Fizz:3
Buzz:1

&lt;/pre&gt;

=Crowd Computing: Just Estimate=
==Wisdom of Crowds==
The concept of ’Wisdom of Crowds’ was proposed by Francis Galton. A weight-judging competition was carried on at the annual show of the West of England Fat Stock and Poultry Exhibition recently held at Plymouth, A fat ox having been selected, competitors bought stamped and numbered cards, each, on which to inscribe their respective names, addresses, and estimates of what the ox would weigh after it had been slaughtered. Those who guessed most successfully received prizes. About 8oo tickets were issued to the par- ticipants. The middlemost estimate of all the estimates recorded was 1207 lbs and the actual weight of the ox was 1198 lbs.

==Our Experiment==
The crowd had to guess the number of candies/gems in a jar. Around 75 people participated in the experiment. The actual number of gems in the jar were 375. The median of all estimates came out to be 300 and the mean of all the estimates came out to be around 396. Median underestimated and mean overestimated the actual value. So according to recent studies, Trimmed mean must be used as an aggregate measure to estimate where Wisdom of Crowds is involved.
[[File:Gemsjar.jpg|center|200px|caption]]

===Trimmed Mean===
In these kinds of experiments, 10% trimmed mean is usually followed. For calculating 10% trimmed mean, remove 10% smallest and 10% largest values from the sample. Calculate the mean of the sample obtained. In the above experiment, the trimmed mean came out to be around 351 which is very close to the actual value.

==Implementation==
Here, we try to demonstrate the concept of trimmed mean through crowd computing.
 Input a list of estimates done by the crowd .
 Sort the list.
 Remove the 10% smallest values.
 Remove the 10% largest values.
 Calculate the mean of the new list obtained .&lt;hr&gt;

==Data of Experiment==       
    Estimates =[1000,1010,1786,2000,1500,1500,100,120,150,150,150,170,175,180,197,200,200,200,200,200,200,220,220,220,220,234,250,250,250,250,250,250,250,250,250,263,270,275,275,286,300,
                300,300,300,300,300,300,300,320,350,350,350,400, 400,400,400,400,450,467,500,500,500,500,500,500,500,550,550,600,600,600,650,700,700,720]

    '''CODE:'''
&lt;pre&gt;
Estimates = [1000,1010,1786,2000,1500,1500,100,120,150,150,150,170,175,180,197,200,200,200,200,200,200,220,220,220,220,234,250,250,250,250,250,250,250,250,250,263,270,275,275,286,300,                300,300,300,300,300,300,300,320,350,350,350,400,400,400,400,400,450,467,500,500,500,500,500,500,500,550,550,600,600,600,650,700,700,720]
Estimates.sort()
offset = int(0.10*len(Estimates))
for i in range(offset):
       del Estimates[0]
       del Estimates[-1]
Sum = 0    
for i in range(len(Estimates)):
       Sum += Estimates[i]
Mean_Value = Sum/len(Estimates)
print(&quot;Mean : &quot;, int(Mean_Value))
#Output:
Mean :  351
&lt;/pre&gt;
&lt;hr&gt;
==Trimmed Mean for the above example== 
&lt;h3&gt;Using scipy library&lt;/h3&gt;
&lt;pre&gt;
#import scipy to use the method of trim_mean
from scipy import stats
trimMean = stats.trim_mean(Estimates, 0.1) # Trim 10% at both ends
print(&quot;Trimmed Mean : &quot;,trimMean)
#Output:
Trimmed Mean :  335.1020408163265
&lt;/pre&gt;

&lt;h3&gt;Without using scipy library&lt;/h3&gt;
&lt;pre&gt;
#Trimmed mean with 10%
p=10/100
#sorted data
data=[2, 4, 6, 7, 11, 21, 81, 90, 105, 121]
n = len(data)
#Remove elements from both end
rem=int(n*p)
newData = data[rem:-rem]
mean = 0
for i in newData:
    mean += i
mean = int(mean/len(newData))
print(&quot;Trimmed mean : &quot;,mean)
#Output: Trimmed mean :  40
&lt;/pre&gt;
[[#Top]]

=Jumbled_Words Permutations: Jumbled Words=
==What are Permutations ?==
A permutation also called ordering of selected number of elements from a list denoted by nPr here we are choosing all elements of a list and so n=r&lt;br&gt;
nPr=n!/(n-r)!&lt;br&gt; as n=r
nPn=n!&lt;br&gt; which gives all possible arrangement of elements present in a list.

 For example, permutations of list [1,2,3] are [1,2,3], [1,3,2], [2,1,3], [2,3,1], 
[3,1,2], and [3,2,1]. 
The number of permutations of a list of elements nPn is given by n!. For example, there are 2! = 2 x 1 = 2 permutations of [1,2], namely [1,2] and [2,1], and 3! = 3 x 2 x 1 = 6 permutations of [1,2,3], as mentioned above.&lt;br/&gt;
[[File:Permutations.jpg]]

==Implementation==
Here, we try to demonstrate the concept of permutations through jumbled words. It is a two player game in which one person presents the other person a different permutation of the word in his mind. The other person has to guess the right word. If he guesses, the he wins otherwise he loses.
 Input an list of words.
 Randomly pick a word from the list of words .
 Shuffle this word and present it to the other player.
 if word guesses by the player is same as the one picked from list of w
     player wins
 else
     player loses

ALTERNATE CODE TO GENERATE THIS GAME:
&lt;pre&gt;
import random
p1=input(&quot;enter player 1 name:&quot;)
p2=input(&quot;enter player 2 name:&quot;)
l=[&quot;rainbow&quot;,&quot;computer&quot;,&quot;robot&quot;,&quot;butter&quot;,&quot;vegetable&quot;,&quot;science&quot;,&quot;correct&quot;]
c1=c2=a1=a2=f1=f2=0
k=1
i=3
def play():
    n=random.choice(l)        ##n=chooses a word from list l
    l1=[]
    for j in n:
       l1.append(j)      ##creates a list for word in n
    for t in range(len(l1)):
       p=random.choice(l1)     ##this randomly displays letters in the list
       print(p)
       l1.remove(p)          ##to avoid the repetition of a letter
    s=input(&quot;enter the word:&quot;)
    if(s==n):
        print(&quot;correct&quot;)
        return 1
    else:
        print(&quot;not correct&quot;)
        print(&quot;answer is&quot;,n)
        return 0
def stat():
     print(&quot;player 1:&quot;)
     print(&quot;score:&quot;,c1)
     print(&quot;answered:&quot;,a1)
     print(&quot;failed:&quot;,f1)
     print(&quot;.............&quot;)
     print(&quot;player 2:&quot;)
     print(&quot;score:&quot;,c2)
     print(&quot;answered:&quot;,a2)
     print(&quot;failed&quot;,f2)
     if(c1&gt;c2):
         print(p1,&quot; won over &quot;,p2)
     elif(c1==c2):
         print(&quot;draw game&quot;)
     else:
         print(p2,&quot; won over &quot;,p1) 
while(i!=4):
      if(i==3):
         if(k==1):
             print(&quot;player 1 turn&quot;)
             print(&quot;your jumbled word is:&quot;)
             k=k+1
             m=play()
             if(m==1):      ##if guessed answer is correct,then score and no.of answered count will be increased
                c1+=1
                a1+=1
             else:
                f1+=1       ##else count of no.of failed to answered will be incremented
         else:
             print(&quot;player 2 turn&quot;)
             print(&quot;your jumbled word is:&quot;)
             k=k-1
             m=play()
             if(m==1):
                c2=c2+1
                a2=a2+1
             else:
                f2=f2+1
       if(i==2):
             print(&quot;present status&quot;)
             stat()
       i=int(input(&quot;enter your choice  1.stop 2.status 3.continue&quot;))
       if(i==1):
             stat()
             i=i+3
&lt;/pre&gt;
&lt;hr&gt;
=== JumbledWord Simple Logic, In Short ===
[[File:jumbledWord.gif]]
&lt;hr&gt;
'''Logic to create a Jumbled Word'''
&lt;hr&gt;
&lt;pre&gt;
#Get Jumbled Word and print it Horizontally
import random

def getJumbledWord(b):
    jumble=''
    l1 = [ b[i] for i in range(0, len(b)) ]
    for t in range(len(l1)):
       p=random.choice(l1)     ##this randomly gets letters from the list      
       jumble=jumble+p       
       l1.remove(p)
    return jumble

b=input(&quot;Enter a word to make it jumbled : &quot;)
print(&quot;Jumbled Word : &quot;, getJumbledWord(b))
&lt;/pre&gt;
&lt;hr&gt;
'''Another Logic to create a Jumbled Word'''
&lt;hr&gt;
&lt;pre&gt;
b=input(&quot;Enter a word to make it jumbled : &quot;)

def getJumbledWord1(b):
    l1 = [ b[i] for i in range(0, len(b)) ]
    random.shuffle(l1)
    str1 = ''.join(l1)
    return str1

print(&quot;Jumbled Word : &quot;, getJumbledWord1(b))
&lt;/pre&gt;

====Sample Output:====
&lt;pre&gt;
---- Output1 
Enter a word to make it jumbled : butter
Jumbled Word :  tbture

---- Output2 
Enter a word to make it jumbled : petriotism
Jumbled Word :  pittrosime
&lt;/pre&gt;

=Theory of Evolution=

== What is Evolution ? ==
Evolution is the change in heritable characteristics over successive generations. The theory of evolution explains that DNA, which acts as a carrier of genetic information from one generation to other, tends to change or mutate occasionally. These changes are reflected in next generations to come. This is how life has evolved on earth from bacteria to human beings.&lt;br&gt;
[[File:Evolution.png|500px]]

== Implementation ==
&lt;pre&gt;An array representing DNA is stored in a file. As genes are forms of DNA, they contain information to be transferred to forthcoming generations. Assume that information is in the form of bits (in the form of 0s and 1s). A number is picked randomly from 1 to the size of the array. A new parameter has been introduced which decides whether mutation would occur or not. If the value of this new parameter is 1 (It is picked randomly from 1 to 100), then only change is reflected down the generations, otherwise it is not. The pseudo code is as follows :
Input an array containing genetic information .
Randomly generate a number (say m) from 1 to length of the array. Randomly generate other number (say p) from 1 to 100.
 
    if p is equal to 1 then 
        if m is 1 then
          set it to 0
        else
          set it to 1
&lt;/pre&gt;
[[#TOP]]</text>
      <sha1>lj9uxqm035r1mf24wy4yr1xbmver7pc</sha1>
    </revision>
    <revision>
      <id>3561</id>
      <parentid>3560</parentid>
      <timestamp>2018-09-28T02:30:36Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* Slicing */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="29433">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_3 Contributors of this page]
*Week 3 Playlist: https://www.youtube.com/playlist?list=PLc_j0TNIaWxOVx_z9jAM2UB3RqYNXaoEo
=List=
List is a flexible data structure used for storing a group of data separated by comma. The elements in a list need not be of the same data type.

'''Example:'''
       List_1 = [ 1, 2,3] or 
       List_1 = [&quot;coffee&quot;, &quot;Tea&quot;, &quot;Milk&quot;] or
       List_1 = [1,&quot;coffee&quot;, &quot;Tea&quot;, 3, &quot;5&quot;]

==List Creation==
&lt;pre&gt;a) A list can be created by simply putting values (separated by comma) between square brackets as given below,
       List_1 = [1,&quot;coffee&quot;, &quot;Tea&quot;, 3, &quot;5&quot;] #this creates a list by name List_1 containing following items


Or,
(b)A List can be created from scratch and elements can be added 
        List_2 = [ ]
        List_2.append(&quot;Kala&quot;)
        List_2.append(&quot;Mala&quot;)
Here we use &quot;append&quot; ,which is a function in python that enable us to append or attach an element to a list .
Thus List_2 will now hold [&quot;Kala&quot;,&quot;Mala&quot;]
&lt;/pre&gt;
[[#TOP]]

==Operations and Methods to work with List==
&lt;pre&gt;
a = [25,30,50,90,12,13]
b = [100,300,500,200,250]
&lt;/pre&gt;
&lt;hr&gt;
&lt;table border=2&gt;
  &lt;tr&gt;
    &lt;th&gt;&lt;b&gt;Method/&lt;br&gt;Operator&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Function&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Syntax&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Output&lt;/b&gt;&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;len()&lt;/td&gt;
    &lt;td&gt;Find length of a list&lt;/td&gt;
    &lt;td&gt;len(a)&lt;/td&gt;
    &lt;td&gt;6&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;max()&lt;/td&gt;
    &lt;td&gt;Find maximum element from the list&lt;/td&gt;
    &lt;td&gt;max(a)&lt;/td&gt;
    &lt;td&gt;90&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;min()&lt;/td&gt;
    &lt;td&gt;Find minimum element from the list&lt;/td&gt;
    &lt;td&gt;min(a)&lt;/td&gt;
    &lt;td&gt;12&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sum()&lt;/td&gt;
    &lt;td&gt;Returns sum of all elements of the list&lt;/td&gt;
    &lt;td&gt;sum(a)&lt;/td&gt;
    &lt;td&gt;220&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;reverse()&lt;/td&gt;
    &lt;td&gt;Reverses the original list&lt;/td&gt;
    &lt;td&gt;a.reverse()&lt;/td&gt;
    &lt;td&gt;[13, 12, 90, 50, 30, 25]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sort()&lt;/td&gt;
    &lt;td&gt;Sorts the original list in ascending order&lt;/td&gt;
    &lt;td&gt;a.sort()&lt;/td&gt;
    &lt;td&gt;[12, 13, 25, 30, 50, 90]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sorted()&lt;/td&gt;
    &lt;td&gt;Returns the new sorted list &lt;/td&gt;
    &lt;td&gt;sorted(a)&lt;/td&gt;
    &lt;td&gt;[12, 13, 25, 30, 50, 90]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;insert()&lt;/td&gt;
    &lt;td&gt;Insert at a particular index in the list, and shifts remaining elements&lt;/td&gt;
    &lt;td&gt;a.insert(3,3)&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 3, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;append()&lt;/td&gt;
    &lt;td&gt;Adds elements/object to the end of the list&lt;/td&gt;
    &lt;td&gt;a.append(5)&lt;br&gt;a.append([10,20])&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 5]&lt;br&gt;[25, 30, 50, 90, 12, 13, [10, 20]]&lt;br&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;extend()&lt;/td&gt;
    &lt;td&gt;Adds object to the end of the list as elements not as object&lt;/td&gt;
    &lt;td&gt;a.extend([10,20])&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 10, 20]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;*&amp;nbsp;&amp;nbsp;Repeatation&lt;br&gt;operator&lt;/td&gt;
    &lt;td&gt;Repeat the list for n times and returns a new list&lt;/td&gt;
    &lt;td&gt;a*2&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 25, 30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;+ Concatenation&lt;br&gt;operator&lt;/td&gt;
    &lt;td&gt;Concatenates two lists, and returns a new list&lt;/td&gt;
    &lt;td&gt;a+b&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 100, 300, 500, 200, 250]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;index()&lt;/td&gt;
    &lt;td&gt;Finds index of a particular element in the list or not&lt;/td&gt;
    &lt;td&gt;a.index(25)&lt;br&gt;a.index(0)&lt;br&gt;&lt;/td&gt;
    &lt;td&gt;0&lt;br&gt;&lt;br&gt;ValueError: 0 is not in list&lt;br&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;in operator&lt;/td&gt;
    &lt;td&gt;Finds whether a particular element is in the list or not, returns boolean&lt;/td&gt;
    &lt;td&gt;25 in a&lt;/td&gt;
    &lt;td&gt;True&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;not in operator&lt;/td&gt;
    &lt;td&gt;Checks if element is not available in list, returns boolean&lt;/td&gt;
    &lt;td&gt;25 not in a&lt;/td&gt;
    &lt;td&gt;False&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;count()&lt;/td&gt;
    &lt;td&gt;Counts the number of occurence of an element in the list&lt;/td&gt;
    &lt;td&gt;a.count(25)&lt;/td&gt;
    &lt;td&gt;1&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;remove()&lt;/td&gt;
    &lt;td&gt;Removes an element from the list&lt;/td&gt;
    &lt;td&gt;a.remove(25)&lt;/td&gt;
    &lt;td&gt; [30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;pop()&lt;/td&gt;
    &lt;td&gt;Delete and return item at index 0&lt;/td&gt;
    &lt;td&gt;a.pop(0)&lt;/td&gt;
    &lt;td&gt;25 , a will be [30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;del&lt;/td&gt;
    &lt;td&gt;Deletes item at a particular index from the list&lt;/td&gt;
    &lt;td&gt;del a[0]&lt;/td&gt;
    &lt;td&gt;[30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;all()&lt;/td&gt;
&lt;td&gt;Returns True, if all items in list are True or it is an empty list&lt;/td&gt;
&lt;td&gt;all([True, True, True])
all([])
&lt;/td&gt;
&lt;td&gt;True&lt;br&gt;
True&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;any()&lt;/td&gt;
&lt;td&gt;Returns True, if any item in list is True else return False&lt;/td&gt;
&lt;td&gt;any([True, True, True])&lt;br&gt;
any([True, False, True])&lt;br&gt;
any([])&lt;/td&gt;
&lt;td&gt;True&lt;br&gt;False&lt;br&gt;False&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;

==Printing the List==
=== Print whole list ===
A list can be printed simply or using a ''for / while'' loop 

 print(List_2)     # To print the entire list
This code will print      
 ['Kala','Mala']     

===Print element at a particular index===
&lt;pre&gt;
Using index position
    List_2[0]     # prints 'Kala' ,i.e,the value at index position 0.
    List_2[1]     # prints 'Mala'.
&lt;/pre&gt;
=== Without using index position ===
&lt;pre&gt;
for item in List_2:   # here item is a variable used to access elements in list.
       print(item)
   This code snippet prints 
    Kala
    Mala
&lt;/pre&gt;
[[#TOP]]

==Search for a particular element in list==
Elements in a list can be searched by one of the two ways:
=== using index() function===
&lt;pre&gt;
ages1 = [11,23,12,23,45]

#if element is available in the list, index() returns the index value on which, the element is present.
print(ages1.index(45))#Output: 4

#if element is not available in the list, index() returns ''ValueError''
print(ages1.index(0))#Output: ValueError:
&lt;/pre&gt;

In programming, if such error occurs, program gets terminated. It can be solved using exception handling.
e.g.
&lt;pre&gt;
ages1 = [11,23,12,23,45]

try:
    print(ages1.index(0))
except ValueError:
    print(&quot;Exception has occured&quot;)    
    print(&quot;Element is not found in the list&quot;)

&lt;/pre&gt;
&lt;pre&gt;
'''Output: 
Exception has occured
Element is not found in the list
'''&lt;/pre&gt;
[[#TOP]]

=== using 'in' operator===
''in'' operator is used to check whether a particular element is available in the list or not.e.g.

&lt;pre&gt;
ages1 = [11,23,12,23,45]
no=11

if no in ages1:
    print(&quot;no is there in the list&quot;)
else:    
    print(&quot;no is NOT there in the list&quot;)
&lt;/pre&gt;
&lt;pre&gt;
#Output: no is there in the list
&lt;/pre&gt;


'''Number is not there in the list'''
&lt;pre&gt;
ages1 = [11,23,12,23,45]
no=15

if no in ages1:
    print(&quot;no is there in the list&quot;)
else:    
    print(&quot;no is NOT there in the list&quot;)
&lt;/pre&gt;
&lt;pre&gt;
Output: no is NOT there in the list
&lt;/pre&gt;
[[#TOP]]

==Updating the List==
The lists can be updated using ''append'' or ''insert'' function.  Append adds the element to the end of the list and Insert adds the element in the specified position.
&lt;pre&gt;
   # add the element 'Sheela' to the end of the list.
   List_2.append(&quot;Sheela&quot;)    
   print (List_2) will output 
   ['Kala', 'Mala', 'Sheela']
&lt;/pre&gt;
   &lt;pre&gt;
# add the element &quot;Bala&quot; in the list at the index 1.
   List_2.insert(1,&quot;Bala&quot;)    
   print (List_2) will output 
   ['Kala', 'Bala','Mala', 'Sheela']
&lt;/pre&gt;

=== Extend the list by adding elements of other list at end using extend()===
&lt;pre&gt;
ages = [11,23,12,23,45]
ages.extend([57,58])
print(ages)
&lt;/pre&gt;

&lt;pre&gt;
#Output: [11, 23, 12, 23, 45, 57, 58]
&lt;/pre&gt;

==== Difference between ''append and extend'' ====
Difference between append and extend can be easily understood, by the following example.

&lt;pre&gt;
appendlist = [11,23,12,23,45]
appendlist.append([57,58])

extendlist= [11,23,12,23,45]
extendlist.extend([57,58])
&lt;/pre&gt;

&lt;pre&gt;
'''Output:
[11, 23, 12, 23, 45, [57, 58]]
[11, 23, 12, 23, 45, 57, 58]'''
&lt;/pre&gt;

[[#TOP]]

==Basic Operations on List==
===Frequency of Occurrence===
list.count(object) will return the number of times the object occur in the list.
  '''Example'''
    ages = [11,23,12,23,45,43,22,24,23]
    ages.count(23) will return
    3
    ages.count(100) will return
    0

===Length of the List===
len(list) will return the length of the list ie. the number of objects in the list.
  '''Example'''
&lt;pre&gt;
    ages = [11,23,12,23,45,43,22,24,23]
    len(ages) # Output: 9
&lt;/pre&gt;

To print the objects in the list either use ''for item in list'' or ''for index in range(len(list))''
&lt;pre&gt;
    for item in ages:       
        print (item)  
        (OR)
    for index in range(len(ages)) :
        print (ages[index])
&lt;/pre&gt;

===Sort the List===
list.sort() will sort the list in ascending order
  '''Example'''
    ages = [11,23,12,23,45,43,22,24,23]
    ages.sort() 
    print (ages) 
    [11, 12, 22, 23, 23, 23, 24, 43, 45]

[[#TOP]]

===Sort the List using sorted() function===
sorted(list1) will sort the list and return a new list, it doesn't modify the original list
&lt;br&gt;'''Example: Sort in ascending order'''
&lt;pre&gt;
ages = [11,23,12,23,45,43,22,24,23]
newList=sorted(ages)
print(newList)

#Output: [11, 12, 22, 23, 23, 23, 24, 43, 45]
&lt;/pre&gt;

&lt;br&gt;'''Example: Sort in descending order'''
&lt;pre&gt;
ages = [11,23,12,23,45,43,22,24,23]
newList=sorted(ages,reverse=True)
print(newList)

#Output: [45, 43, 24, 23, 23, 23, 22, 12, 11]
&lt;/pre&gt;

===Reverse the List===
list.reverse() will reverse the original list
  '''Example'''
    ages = [11, 12, 22, 23, 23, 23, 24, 43, 45]
    ages.reverse()
    print (ages)
    [45, 43, 24, 23, 23, 23, 22, 12, 11]

Both sort() and reverse() list operation will work on numeric and alphanumeric data list.

A special use of the reverse() function is to descend a list that is sorted in ascending order.

  '''Example'''
&lt;pre&gt;
ages = [11, 12, 22, 23, 23, 23, 24, 43, 45]
ages.sort()
print(ages)
ages.reverse()
print(ages)
&lt;/pre&gt;

===Slicing===
Used to retrieve an object or objects in a range as a list  
  '''Example'''

Use ''list[index]'' to retrieve the object at the given index
&lt;pre&gt;
In [1]: student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
In [2]: student[3]     #Object at index 3.  Remember index starts at 0
Out[2]: 'Geetha'      
&lt;/pre&gt;

Use ''list[start_index : end_index + 1]'' to retrieve objects from the start_index to end_index 
&lt;pre&gt;
In [3]: student[2:4]     # Objects from index 2 to 3 as List. Note the [ and ]
Out[3]: ['Vijay', 'Geetha']   
&lt;/pre&gt;

Use ''list[:]'' to retrieve objects from the starting of the list to the end of the list. 
The default start value will be the starting index of the list (i.e. 0) and the default end value
will be the length of the list 
&lt;pre&gt;
In [4]: student[:]        # prints the entire list
Out[4]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma', 'Janani']
&lt;/pre&gt;
&lt;pre&gt;
In [5]: student[:5]       # prints the objects from the start of the list upto object at index 4
Out[5]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran']
&lt;/pre&gt;
&lt;pre&gt;
In [6]: student[2:]       # prints the objects from index 2 upto the end of the list
Out[6]: ['Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma', 'Janani']
&lt;/pre&gt;

Negative index too is available in Python. It starts from last element of the list. i.e.
&lt;pre&gt;
In [7]:student[-1]        #prints last index of list
Out[7]: 'Janani'
&lt;/pre&gt;
&lt;pre&gt;
In [8]:student[-1:-8]     #prints empty list
Out[8]: []
&lt;/pre&gt;

         In [9]:student[-8:-1]     #prints -8th index to -1st index elements
         Out[9]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma']

[[#TOP]]

===Removing Item from list ===
----

Is used to remove a specific item from the list.

'''Example:'''
 
Use list.remove(entry/value)  Or   del list[index]    Or list.pop(index)
         student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
         student.remove(&quot;Arun&quot;)   #This will delete item &quot;Arun&quot;
         Or    
         del student[0]           # This will delete item at index 0
         Or
         student.pop(0)         # This will delete and return item at index 0


         print(student)    
         Output: [&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]

[[#TOP]]
===Delete list ===
----
Used to delete complete list

'''Example'''

Use del &lt;list name&gt;
         student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
         del student

===Concatenation of two lists===
----
''+'' is the concatenation operator which is used concatenate two lists. 
&lt;pre&gt;
ages1 = [11,23,12,23,45]
ages2 = [25, 24, 43, 47]
age=ages1+ages2
print(age)
#Output: [11, 23, 12, 23, 45, 25, 24, 43, 47]
&lt;/pre&gt;

===Repeatation of a list ===
----
''*'' is the operator to repeat a particular list.
&lt;pre&gt;
ages1 = [11,23,12,23,45]
age=ages1*5 #ages1 list is repeated 5 times and stroed in ''age'' list
print(age)

#Output: [11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45]
&lt;/pre&gt;

=== all and any for List===
all() and any() are special functions to check whether all elements in iterable is ''True'' or any element is ''True''
&lt;ol&gt;
&lt;li&gt;If all elements in a list are ''True'', '''all()''' will return ''True''&lt;/li&gt;
&lt;li&gt;If iterable is ''empty'', '''all()''' will return ''True''&lt;/li&gt;
&lt;li&gt;If iterable contains at least one ''True'', '''any()''' will return ''True''&lt;/li&gt;
&lt;li&gt;If iterable is ''empty'', '''any()''' will return ''False''&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;
lsit=[True, True, True, True]
print(all(lsit))#Output: True
print(any(lsit))#Output: True

lsit1=[True, False, True, True]
print(all(lsit1))#Output: False
print(any(lsit1))#Output: True

lsit2=[False,False,False]
print(all(lsit2))#Output: False
print(any(lsit2))#Output: False

lsit3=[]
print(all(lsit3))#Output: True
print(any(lsit3))#Output: False
&lt;/pre&gt;

==Conditional Statements==
&lt;pre&gt;Conditionals are used to check the condition and change the flow of the program 
accordingly. They are realized in programming languages through if statement. The 
syntax is as follows :
         if condition : 
            statement
    '''Note:''' Do not forget indentation (inserting space/tab) in the line after the
 if condition.
    
    In case you want to execute a set of statements when a condition is true and another

set of statement when the condition is false.
         if condition : 
            statement 1
         else :
            statement 2
    
    Multiple if-else statements can be written as follows:
         if condition_1 : 
            statement 1
         elif condition_2 : # 'elif' is short for 'else if'
            statement 2
         elif condition_3 :
            statement 3
        .
        .
         else :
            final statement
&lt;/pre&gt;
[[#TOP]]

=Loops and Conditionals : Fizzbuzz=
====Loops====
&lt;pre&gt;
Loops are used to execute a set of repetitive statements. They are realized
through 'while' and 'for' loops in programming languages. The syntax of 'for' loop is 
as follows :
        for LOOPVARIABLE in SEQUENCE: 
            STATEMENTS
    '''e.g.''' to print all the data from a list we can write:
        for item in list_name
            print(item)
    OR
        for index in range(len(list_name))
            print(list_name[index])
    
    The syntax for while loop is as follows :
    
        while BOOLEANEXPRESSION: 
            STATEMENTS
            INCREMENT/DECREMENT
    
    '''e.g.''' if we want to print all numbers from 1 to 10
        i=1
        while i&lt;=10 :
            print(i,&quot; &quot;)
            i=i+1
    
    'while' loop has indefinite iteration (run-time unknown). So, there must be loop
 break statement in it.
 Whereas 'for' loop is definite in nature (i.e. known or predictable span).&lt;br&gt;

&lt;b&gt;NOTE: Python doesn't have anything like do-while loop.&lt;/b&gt;
&lt;/pre&gt;
[[#TOP]]

==Implementation==
Here, we try to demonstrate the concept of loops and conditionals through a game called Fizzbuzz. The rules are as follows :&lt;br/&gt;
[[File:fizzBuzz.gif]]

• if input number is a multiple of ’3’ print ”Fizz”
&lt;br/&gt;
• if input number is a multiple of ’5’ print ”Buzz”
&lt;br/&gt;
• if input number is a multiple of both '3' and ’5’ print ”FizzBuzz”
&lt;br/&gt;
The pseudo code is as follows :
&lt;pre&gt;
   If input no % 3 == 0 and  input no % 5 == 0 : 
       print ”Fizzbuzz”
   else if input no % 3 == 0 : 
       print ”Fizz”
   else if input no % 5 == 0 : 
       print ”Buzz”
   else :
       print the input no
&lt;/pre&gt;
The order of statements execution matters to get the desired output. The highest priority condition should be first followed by other. In fizzbuzz programming, first checking should be done for both divisibility of 3 and 5. If condition not satisfied only then it should check individually for 3 or 5. So carefully choosing the order is crucial for better programming.
Note: There is some effect of present condition statements chosen on next conditions statements. That is why in first attempt fizzbuzz programming got struck.

Example: 
&lt;pre&gt;
#Code to achieve the above requirement in python3.
i = int(input(&quot;Enter the number&quot;)) 
if i%3 == 0 and i%5 == 0: print(i,&quot;FizzBuzz&quot;)  
elif i%5 == 0: print(i,&quot;Buzz&quot;)
elif i%3 == 0: print(i,&quot;Fizz&quot;)
else: print(i)
&lt;/pre&gt;
Lets put the same into a loop for a range given by the user.
&lt;pre&gt;
def fizzbuzzgame(start,stop):
    for i in range(start,stop+1):
        if i%3 == 0 and i%5 == 0:
            print(i,&quot;FizzBuzz&quot;)
        elif i%5 == 0:
            print(i,&quot;Buzz&quot;)
        elif i%3 == 0:
            print(i,&quot;Fizz&quot;)
        else: print(i)

fizzbuzzgame(50,100)
&lt;/pre&gt;


=== Fizz Buzz game in Interactive mode with Score ===
'''By Ms. Ami Tusharkant Choksi'''
&lt;pre&gt;
def fizzbuzzgame(i):
        if i%3 == 0 and i%5 == 0:
            print(i,&quot;FizzBuzz&quot;)
            return(&quot;fzbz&quot;)
        elif i%5 == 0:
            print(i,&quot;Buzz&quot;)
            return(&quot;bz&quot;)
        elif i%3 == 0:
            print(i,&quot;Fizz&quot;)
            return(&quot;fz&quot;)
        else:
            print(i)
            return(&quot;no&quot;)

ch = 'y'
fizzbuzz=0
fizz=0
buzz=0
nothing=0
print(&quot;&quot;&quot;
 _____  ____  _____  _____  ____   __ __  _____  _____       ____   ____  ___ ___    ___ 
|     ||    ||     ||     ||    \ |  |  ||     ||     |     /    | /    ||   |   |  /  _]
|   __| |  | |__/  ||__/  ||  o  )|  |  ||__/  ||__/  |    |   __||  o  || _   _ | /  [_ 
|  |_   |  | |   __||   __||     ||  |  ||   __||   __|    |  |  ||     ||  \_/  ||    _]
|   _]  |  | |  /  ||  /  ||  O  ||  :  ||  /  ||  /  |    |  |_ ||  _  ||   |   ||   [_ 
|  |    |  | |     ||     ||     ||     ||     ||     |    |     ||  |  ||   |   ||     |
|__|   |____||_____||_____||_____| \__,_||_____||_____|    |___,_||__|__||___|___||_____|
                                                                                         
&quot;&quot;&quot;)   

while(ch == 'y'):
    n=int(input(&quot;Enter a Number : &quot;))
    winLoose=fizzbuzzgame(n)
    if(winLoose == &quot;fz&quot;):
        fizz+=1
    elif(winLoose == &quot;bz&quot;):
        buzz+=1
    elif(winLoose == &quot;fzbz&quot;):
        fizzbuzz+=1
    ch=input(&quot;Do you want to continue playing the game : (y/n)&quot;)
    if(ch=='n'):
        print('Congratulations, your score is\n FizzBuzz:%d\nFizz:%d\nBuzz:%d' %
(fizzbuzz,fizz,buzz))
    
'''Sample Output:

 _____  ____  _____  _____  ____   __ __  _____  _____       ____   ____  ___ ___    ___ 
|     ||    ||     ||     ||    \ |  |  ||     ||     |     /    | /    ||   |   |  /  _]
|   __| |  | |__/  ||__/  ||  o  )|  |  ||__/  ||__/  |    |   __||  o  || _   _ | /  [_ 
|  |_   |  | |   __||   __||     ||  |  ||   __||   __|    |  |  ||     ||  \_/  ||    _]
|   _]  |  | |  /  ||  /  ||  O  ||  :  ||  /  ||  /  |    |  |_ ||  _  ||   |   ||   [_ 
|  |    |  | |     ||     ||     ||     ||     ||     |    |     ||  |  ||   |   ||     |
|__|   |____||_____||_____||_____| \__,_||_____||_____|    |___,_||__|__||___|___||_____|
                                                                                         

Enter a Number : 666
666 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 777
777 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 555
555 FizzBuzz
Do you want to continue playing the game : (y/n)y
Enter a Number : 1
1
Do you want to continue playing the game : (y/n)y
Enter a Number : 789
789 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 25
25 Buzz
Do you want to continue playing the game : (y/n)n
Congratulations, your score is

FizzBuzz:1
Fizz:3
Buzz:1

&lt;/pre&gt;

=Crowd Computing: Just Estimate=
==Wisdom of Crowds==
The concept of ’Wisdom of Crowds’ was proposed by Francis Galton. A weight-judging competition was carried on at the annual show of the West of England Fat Stock and Poultry Exhibition recently held at Plymouth, A fat ox having been selected, competitors bought stamped and numbered cards, each, on which to inscribe their respective names, addresses, and estimates of what the ox would weigh after it had been slaughtered. Those who guessed most successfully received prizes. About 8oo tickets were issued to the par- ticipants. The middlemost estimate of all the estimates recorded was 1207 lbs and the actual weight of the ox was 1198 lbs.

==Our Experiment==
The crowd had to guess the number of candies/gems in a jar. Around 75 people participated in the experiment. The actual number of gems in the jar were 375. The median of all estimates came out to be 300 and the mean of all the estimates came out to be around 396. Median underestimated and mean overestimated the actual value. So according to recent studies, Trimmed mean must be used as an aggregate measure to estimate where Wisdom of Crowds is involved.
[[File:Gemsjar.jpg|center|200px|caption]]

===Trimmed Mean===
In these kinds of experiments, 10% trimmed mean is usually followed. For calculating 10% trimmed mean, remove 10% smallest and 10% largest values from the sample. Calculate the mean of the sample obtained. In the above experiment, the trimmed mean came out to be around 351 which is very close to the actual value.

==Implementation==
Here, we try to demonstrate the concept of trimmed mean through crowd computing.
 Input a list of estimates done by the crowd .
 Sort the list.
 Remove the 10% smallest values.
 Remove the 10% largest values.
 Calculate the mean of the new list obtained .&lt;hr&gt;

==Data of Experiment==       
    Estimates =[1000,1010,1786,2000,1500,1500,100,120,150,150,150,170,175,180,197,200,200,200,200,200,200,220,220,220,220,234,250,250,250,250,250,250,250,250,250,263,270,275,275,286,300,
                300,300,300,300,300,300,300,320,350,350,350,400, 400,400,400,400,450,467,500,500,500,500,500,500,500,550,550,600,600,600,650,700,700,720]

    '''CODE:'''
&lt;pre&gt;
Estimates = [1000,1010,1786,2000,1500,1500,100,120,150,150,150,170,175,180,197,200,200,200,200,200,200,220,220,220,220,234,250,250,250,250,250,250,250,250,250,263,270,275,275,286,300,                300,300,300,300,300,300,300,320,350,350,350,400,400,400,400,400,450,467,500,500,500,500,500,500,500,550,550,600,600,600,650,700,700,720]
Estimates.sort()
offset = int(0.10*len(Estimates))
for i in range(offset):
       del Estimates[0]
       del Estimates[-1]
Sum = 0    
for i in range(len(Estimates)):
       Sum += Estimates[i]
Mean_Value = Sum/len(Estimates)
print(&quot;Mean : &quot;, int(Mean_Value))
#Output:
Mean :  351
&lt;/pre&gt;
&lt;hr&gt;
==Trimmed Mean for the above example== 
&lt;h3&gt;Using scipy library&lt;/h3&gt;
&lt;pre&gt;
#import scipy to use the method of trim_mean
from scipy import stats
trimMean = stats.trim_mean(Estimates, 0.1) # Trim 10% at both ends
print(&quot;Trimmed Mean : &quot;,trimMean)
#Output:
Trimmed Mean :  335.1020408163265
&lt;/pre&gt;

&lt;h3&gt;Without using scipy library&lt;/h3&gt;
&lt;pre&gt;
#Trimmed mean with 10%
p=10/100
#sorted data
data=[2, 4, 6, 7, 11, 21, 81, 90, 105, 121]
n = len(data)
#Remove elements from both end
rem=int(n*p)
newData = data[rem:-rem]
mean = 0
for i in newData:
    mean += i
mean = int(mean/len(newData))
print(&quot;Trimmed mean : &quot;,mean)
#Output: Trimmed mean :  40
&lt;/pre&gt;
[[#Top]]

=Jumbled_Words Permutations: Jumbled Words=
==What are Permutations ?==
A permutation also called ordering of selected number of elements from a list denoted by nPr here we are choosing all elements of a list and so n=r&lt;br&gt;
nPr=n!/(n-r)!&lt;br&gt; as n=r
nPn=n!&lt;br&gt; which gives all possible arrangement of elements present in a list.

 For example, permutations of list [1,2,3] are [1,2,3], [1,3,2], [2,1,3], [2,3,1], 
[3,1,2], and [3,2,1]. 
The number of permutations of a list of elements nPn is given by n!. For example, there are 2! = 2 x 1 = 2 permutations of [1,2], namely [1,2] and [2,1], and 3! = 3 x 2 x 1 = 6 permutations of [1,2,3], as mentioned above.&lt;br/&gt;
[[File:Permutations.jpg]]

==Implementation==
Here, we try to demonstrate the concept of permutations through jumbled words. It is a two player game in which one person presents the other person a different permutation of the word in his mind. The other person has to guess the right word. If he guesses, the he wins otherwise he loses.
 Input an list of words.
 Randomly pick a word from the list of words .
 Shuffle this word and present it to the other player.
 if word guesses by the player is same as the one picked from list of w
     player wins
 else
     player loses

ALTERNATE CODE TO GENERATE THIS GAME:
&lt;pre&gt;
import random
p1=input(&quot;enter player 1 name:&quot;)
p2=input(&quot;enter player 2 name:&quot;)
l=[&quot;rainbow&quot;,&quot;computer&quot;,&quot;robot&quot;,&quot;butter&quot;,&quot;vegetable&quot;,&quot;science&quot;,&quot;correct&quot;]
c1=c2=a1=a2=f1=f2=0
k=1
i=3
def play():
    n=random.choice(l)        ##n=chooses a word from list l
    l1=[]
    for j in n:
       l1.append(j)      ##creates a list for word in n
    for t in range(len(l1)):
       p=random.choice(l1)     ##this randomly displays letters in the list
       print(p)
       l1.remove(p)          ##to avoid the repetition of a letter
    s=input(&quot;enter the word:&quot;)
    if(s==n):
        print(&quot;correct&quot;)
        return 1
    else:
        print(&quot;not correct&quot;)
        print(&quot;answer is&quot;,n)
        return 0
def stat():
     print(&quot;player 1:&quot;)
     print(&quot;score:&quot;,c1)
     print(&quot;answered:&quot;,a1)
     print(&quot;failed:&quot;,f1)
     print(&quot;.............&quot;)
     print(&quot;player 2:&quot;)
     print(&quot;score:&quot;,c2)
     print(&quot;answered:&quot;,a2)
     print(&quot;failed&quot;,f2)
     if(c1&gt;c2):
         print(p1,&quot; won over &quot;,p2)
     elif(c1==c2):
         print(&quot;draw game&quot;)
     else:
         print(p2,&quot; won over &quot;,p1) 
while(i!=4):
      if(i==3):
         if(k==1):
             print(&quot;player 1 turn&quot;)
             print(&quot;your jumbled word is:&quot;)
             k=k+1
             m=play()
             if(m==1):      ##if guessed answer is correct,then score and no.of answered count will be increased
                c1+=1
                a1+=1
             else:
                f1+=1       ##else count of no.of failed to answered will be incremented
         else:
             print(&quot;player 2 turn&quot;)
             print(&quot;your jumbled word is:&quot;)
             k=k-1
             m=play()
             if(m==1):
                c2=c2+1
                a2=a2+1
             else:
                f2=f2+1
       if(i==2):
             print(&quot;present status&quot;)
             stat()
       i=int(input(&quot;enter your choice  1.stop 2.status 3.continue&quot;))
       if(i==1):
             stat()
             i=i+3
&lt;/pre&gt;
&lt;hr&gt;
=== JumbledWord Simple Logic, In Short ===
[[File:jumbledWord.gif]]
&lt;hr&gt;
'''Logic to create a Jumbled Word'''
&lt;hr&gt;
&lt;pre&gt;
#Get Jumbled Word and print it Horizontally
import random

def getJumbledWord(b):
    jumble=''
    l1 = [ b[i] for i in range(0, len(b)) ]
    for t in range(len(l1)):
       p=random.choice(l1)     ##this randomly gets letters from the list      
       jumble=jumble+p       
       l1.remove(p)
    return jumble

b=input(&quot;Enter a word to make it jumbled : &quot;)
print(&quot;Jumbled Word : &quot;, getJumbledWord(b))
&lt;/pre&gt;
&lt;hr&gt;
'''Another Logic to create a Jumbled Word'''
&lt;hr&gt;
&lt;pre&gt;
b=input(&quot;Enter a word to make it jumbled : &quot;)

def getJumbledWord1(b):
    l1 = [ b[i] for i in range(0, len(b)) ]
    random.shuffle(l1)
    str1 = ''.join(l1)
    return str1

print(&quot;Jumbled Word : &quot;, getJumbledWord1(b))
&lt;/pre&gt;

====Sample Output:====
&lt;pre&gt;
---- Output1 
Enter a word to make it jumbled : butter
Jumbled Word :  tbture

---- Output2 
Enter a word to make it jumbled : petriotism
Jumbled Word :  pittrosime
&lt;/pre&gt;

=Theory of Evolution=

== What is Evolution ? ==
Evolution is the change in heritable characteristics over successive generations. The theory of evolution explains that DNA, which acts as a carrier of genetic information from one generation to other, tends to change or mutate occasionally. These changes are reflected in next generations to come. This is how life has evolved on earth from bacteria to human beings.&lt;br&gt;
[[File:Evolution.png|500px]]

== Implementation ==
&lt;pre&gt;An array representing DNA is stored in a file. As genes are forms of DNA, they contain information to be transferred to forthcoming generations. Assume that information is in the form of bits (in the form of 0s and 1s). A number is picked randomly from 1 to the size of the array. A new parameter has been introduced which decides whether mutation would occur or not. If the value of this new parameter is 1 (It is picked randomly from 1 to 100), then only change is reflected down the generations, otherwise it is not. The pseudo code is as follows :
Input an array containing genetic information .
Randomly generate a number (say m) from 1 to length of the array. Randomly generate other number (say p) from 1 to 100.
 
    if p is equal to 1 then 
        if m is 1 then
          set it to 0
        else
          set it to 1
&lt;/pre&gt;
[[#TOP]]</text>
      <sha1>h7re9qc3vjpslymg4ccyigqan05ukfi</sha1>
    </revision>
    <revision>
      <id>3563</id>
      <parentid>3561</parentid>
      <timestamp>2018-09-28T02:31:20Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* Slicing */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="29427">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_3 Contributors of this page]
*Week 3 Playlist: https://www.youtube.com/playlist?list=PLc_j0TNIaWxOVx_z9jAM2UB3RqYNXaoEo
=List=
List is a flexible data structure used for storing a group of data separated by comma. The elements in a list need not be of the same data type.

'''Example:'''
       List_1 = [ 1, 2,3] or 
       List_1 = [&quot;coffee&quot;, &quot;Tea&quot;, &quot;Milk&quot;] or
       List_1 = [1,&quot;coffee&quot;, &quot;Tea&quot;, 3, &quot;5&quot;]

==List Creation==
&lt;pre&gt;a) A list can be created by simply putting values (separated by comma) between square brackets as given below,
       List_1 = [1,&quot;coffee&quot;, &quot;Tea&quot;, 3, &quot;5&quot;] #this creates a list by name List_1 containing following items


Or,
(b)A List can be created from scratch and elements can be added 
        List_2 = [ ]
        List_2.append(&quot;Kala&quot;)
        List_2.append(&quot;Mala&quot;)
Here we use &quot;append&quot; ,which is a function in python that enable us to append or attach an element to a list .
Thus List_2 will now hold [&quot;Kala&quot;,&quot;Mala&quot;]
&lt;/pre&gt;
[[#TOP]]

==Operations and Methods to work with List==
&lt;pre&gt;
a = [25,30,50,90,12,13]
b = [100,300,500,200,250]
&lt;/pre&gt;
&lt;hr&gt;
&lt;table border=2&gt;
  &lt;tr&gt;
    &lt;th&gt;&lt;b&gt;Method/&lt;br&gt;Operator&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Function&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Syntax&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Output&lt;/b&gt;&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;len()&lt;/td&gt;
    &lt;td&gt;Find length of a list&lt;/td&gt;
    &lt;td&gt;len(a)&lt;/td&gt;
    &lt;td&gt;6&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;max()&lt;/td&gt;
    &lt;td&gt;Find maximum element from the list&lt;/td&gt;
    &lt;td&gt;max(a)&lt;/td&gt;
    &lt;td&gt;90&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;min()&lt;/td&gt;
    &lt;td&gt;Find minimum element from the list&lt;/td&gt;
    &lt;td&gt;min(a)&lt;/td&gt;
    &lt;td&gt;12&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sum()&lt;/td&gt;
    &lt;td&gt;Returns sum of all elements of the list&lt;/td&gt;
    &lt;td&gt;sum(a)&lt;/td&gt;
    &lt;td&gt;220&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;reverse()&lt;/td&gt;
    &lt;td&gt;Reverses the original list&lt;/td&gt;
    &lt;td&gt;a.reverse()&lt;/td&gt;
    &lt;td&gt;[13, 12, 90, 50, 30, 25]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sort()&lt;/td&gt;
    &lt;td&gt;Sorts the original list in ascending order&lt;/td&gt;
    &lt;td&gt;a.sort()&lt;/td&gt;
    &lt;td&gt;[12, 13, 25, 30, 50, 90]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sorted()&lt;/td&gt;
    &lt;td&gt;Returns the new sorted list &lt;/td&gt;
    &lt;td&gt;sorted(a)&lt;/td&gt;
    &lt;td&gt;[12, 13, 25, 30, 50, 90]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;insert()&lt;/td&gt;
    &lt;td&gt;Insert at a particular index in the list, and shifts remaining elements&lt;/td&gt;
    &lt;td&gt;a.insert(3,3)&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 3, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;append()&lt;/td&gt;
    &lt;td&gt;Adds elements/object to the end of the list&lt;/td&gt;
    &lt;td&gt;a.append(5)&lt;br&gt;a.append([10,20])&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 5]&lt;br&gt;[25, 30, 50, 90, 12, 13, [10, 20]]&lt;br&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;extend()&lt;/td&gt;
    &lt;td&gt;Adds object to the end of the list as elements not as object&lt;/td&gt;
    &lt;td&gt;a.extend([10,20])&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 10, 20]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;*&amp;nbsp;&amp;nbsp;Repeatation&lt;br&gt;operator&lt;/td&gt;
    &lt;td&gt;Repeat the list for n times and returns a new list&lt;/td&gt;
    &lt;td&gt;a*2&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 25, 30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;+ Concatenation&lt;br&gt;operator&lt;/td&gt;
    &lt;td&gt;Concatenates two lists, and returns a new list&lt;/td&gt;
    &lt;td&gt;a+b&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 100, 300, 500, 200, 250]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;index()&lt;/td&gt;
    &lt;td&gt;Finds index of a particular element in the list or not&lt;/td&gt;
    &lt;td&gt;a.index(25)&lt;br&gt;a.index(0)&lt;br&gt;&lt;/td&gt;
    &lt;td&gt;0&lt;br&gt;&lt;br&gt;ValueError: 0 is not in list&lt;br&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;in operator&lt;/td&gt;
    &lt;td&gt;Finds whether a particular element is in the list or not, returns boolean&lt;/td&gt;
    &lt;td&gt;25 in a&lt;/td&gt;
    &lt;td&gt;True&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;not in operator&lt;/td&gt;
    &lt;td&gt;Checks if element is not available in list, returns boolean&lt;/td&gt;
    &lt;td&gt;25 not in a&lt;/td&gt;
    &lt;td&gt;False&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;count()&lt;/td&gt;
    &lt;td&gt;Counts the number of occurence of an element in the list&lt;/td&gt;
    &lt;td&gt;a.count(25)&lt;/td&gt;
    &lt;td&gt;1&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;remove()&lt;/td&gt;
    &lt;td&gt;Removes an element from the list&lt;/td&gt;
    &lt;td&gt;a.remove(25)&lt;/td&gt;
    &lt;td&gt; [30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;pop()&lt;/td&gt;
    &lt;td&gt;Delete and return item at index 0&lt;/td&gt;
    &lt;td&gt;a.pop(0)&lt;/td&gt;
    &lt;td&gt;25 , a will be [30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;del&lt;/td&gt;
    &lt;td&gt;Deletes item at a particular index from the list&lt;/td&gt;
    &lt;td&gt;del a[0]&lt;/td&gt;
    &lt;td&gt;[30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;all()&lt;/td&gt;
&lt;td&gt;Returns True, if all items in list are True or it is an empty list&lt;/td&gt;
&lt;td&gt;all([True, True, True])
all([])
&lt;/td&gt;
&lt;td&gt;True&lt;br&gt;
True&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;any()&lt;/td&gt;
&lt;td&gt;Returns True, if any item in list is True else return False&lt;/td&gt;
&lt;td&gt;any([True, True, True])&lt;br&gt;
any([True, False, True])&lt;br&gt;
any([])&lt;/td&gt;
&lt;td&gt;True&lt;br&gt;False&lt;br&gt;False&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;

==Printing the List==
=== Print whole list ===
A list can be printed simply or using a ''for / while'' loop 

 print(List_2)     # To print the entire list
This code will print      
 ['Kala','Mala']     

===Print element at a particular index===
&lt;pre&gt;
Using index position
    List_2[0]     # prints 'Kala' ,i.e,the value at index position 0.
    List_2[1]     # prints 'Mala'.
&lt;/pre&gt;
=== Without using index position ===
&lt;pre&gt;
for item in List_2:   # here item is a variable used to access elements in list.
       print(item)
   This code snippet prints 
    Kala
    Mala
&lt;/pre&gt;
[[#TOP]]

==Search for a particular element in list==
Elements in a list can be searched by one of the two ways:
=== using index() function===
&lt;pre&gt;
ages1 = [11,23,12,23,45]

#if element is available in the list, index() returns the index value on which, the element is present.
print(ages1.index(45))#Output: 4

#if element is not available in the list, index() returns ''ValueError''
print(ages1.index(0))#Output: ValueError:
&lt;/pre&gt;

In programming, if such error occurs, program gets terminated. It can be solved using exception handling.
e.g.
&lt;pre&gt;
ages1 = [11,23,12,23,45]

try:
    print(ages1.index(0))
except ValueError:
    print(&quot;Exception has occured&quot;)    
    print(&quot;Element is not found in the list&quot;)

&lt;/pre&gt;
&lt;pre&gt;
'''Output: 
Exception has occured
Element is not found in the list
'''&lt;/pre&gt;
[[#TOP]]

=== using 'in' operator===
''in'' operator is used to check whether a particular element is available in the list or not.e.g.

&lt;pre&gt;
ages1 = [11,23,12,23,45]
no=11

if no in ages1:
    print(&quot;no is there in the list&quot;)
else:    
    print(&quot;no is NOT there in the list&quot;)
&lt;/pre&gt;
&lt;pre&gt;
#Output: no is there in the list
&lt;/pre&gt;


'''Number is not there in the list'''
&lt;pre&gt;
ages1 = [11,23,12,23,45]
no=15

if no in ages1:
    print(&quot;no is there in the list&quot;)
else:    
    print(&quot;no is NOT there in the list&quot;)
&lt;/pre&gt;
&lt;pre&gt;
Output: no is NOT there in the list
&lt;/pre&gt;
[[#TOP]]

==Updating the List==
The lists can be updated using ''append'' or ''insert'' function.  Append adds the element to the end of the list and Insert adds the element in the specified position.
&lt;pre&gt;
   # add the element 'Sheela' to the end of the list.
   List_2.append(&quot;Sheela&quot;)    
   print (List_2) will output 
   ['Kala', 'Mala', 'Sheela']
&lt;/pre&gt;
   &lt;pre&gt;
# add the element &quot;Bala&quot; in the list at the index 1.
   List_2.insert(1,&quot;Bala&quot;)    
   print (List_2) will output 
   ['Kala', 'Bala','Mala', 'Sheela']
&lt;/pre&gt;

=== Extend the list by adding elements of other list at end using extend()===
&lt;pre&gt;
ages = [11,23,12,23,45]
ages.extend([57,58])
print(ages)
&lt;/pre&gt;

&lt;pre&gt;
#Output: [11, 23, 12, 23, 45, 57, 58]
&lt;/pre&gt;

==== Difference between ''append and extend'' ====
Difference between append and extend can be easily understood, by the following example.

&lt;pre&gt;
appendlist = [11,23,12,23,45]
appendlist.append([57,58])

extendlist= [11,23,12,23,45]
extendlist.extend([57,58])
&lt;/pre&gt;

&lt;pre&gt;
'''Output:
[11, 23, 12, 23, 45, [57, 58]]
[11, 23, 12, 23, 45, 57, 58]'''
&lt;/pre&gt;

[[#TOP]]

==Basic Operations on List==
===Frequency of Occurrence===
list.count(object) will return the number of times the object occur in the list.
  '''Example'''
    ages = [11,23,12,23,45,43,22,24,23]
    ages.count(23) will return
    3
    ages.count(100) will return
    0

===Length of the List===
len(list) will return the length of the list ie. the number of objects in the list.
  '''Example'''
&lt;pre&gt;
    ages = [11,23,12,23,45,43,22,24,23]
    len(ages) # Output: 9
&lt;/pre&gt;

To print the objects in the list either use ''for item in list'' or ''for index in range(len(list))''
&lt;pre&gt;
    for item in ages:       
        print (item)  
        (OR)
    for index in range(len(ages)) :
        print (ages[index])
&lt;/pre&gt;

===Sort the List===
list.sort() will sort the list in ascending order
  '''Example'''
    ages = [11,23,12,23,45,43,22,24,23]
    ages.sort() 
    print (ages) 
    [11, 12, 22, 23, 23, 23, 24, 43, 45]

[[#TOP]]

===Sort the List using sorted() function===
sorted(list1) will sort the list and return a new list, it doesn't modify the original list
&lt;br&gt;'''Example: Sort in ascending order'''
&lt;pre&gt;
ages = [11,23,12,23,45,43,22,24,23]
newList=sorted(ages)
print(newList)

#Output: [11, 12, 22, 23, 23, 23, 24, 43, 45]
&lt;/pre&gt;

&lt;br&gt;'''Example: Sort in descending order'''
&lt;pre&gt;
ages = [11,23,12,23,45,43,22,24,23]
newList=sorted(ages,reverse=True)
print(newList)

#Output: [45, 43, 24, 23, 23, 23, 22, 12, 11]
&lt;/pre&gt;

===Reverse the List===
list.reverse() will reverse the original list
  '''Example'''
    ages = [11, 12, 22, 23, 23, 23, 24, 43, 45]
    ages.reverse()
    print (ages)
    [45, 43, 24, 23, 23, 23, 22, 12, 11]

Both sort() and reverse() list operation will work on numeric and alphanumeric data list.

A special use of the reverse() function is to descend a list that is sorted in ascending order.

  '''Example'''
&lt;pre&gt;
ages = [11, 12, 22, 23, 23, 23, 24, 43, 45]
ages.sort()
print(ages)
ages.reverse()
print(ages)
&lt;/pre&gt;

===Slicing===
Used to retrieve an object or objects in a range as a list  
  '''Example'''

Use ''list[index]'' to retrieve the object at the given index
&lt;pre&gt;
In [1]: student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
In [2]: student[3]     #Object at index 3.  Remember index starts at 0
Out[2]: 'Geetha'      
&lt;/pre&gt;

Use ''list[start_index : end_index + 1]'' to retrieve objects from the start_index to end_index 
&lt;pre&gt;
In [3]: student[2:4]     # Objects from index 2 to 3 as List. Note the [ and ]
Out[3]: ['Vijay', 'Geetha']   
&lt;/pre&gt;

Use ''list[:]'' to retrieve objects from the starting of the list to the end of the list. 
The default start value will be the starting index of the list (i.e. 0) and the default end value
will be the length of the list 
&lt;pre&gt;
In [4]: student[:]        # prints the entire list
Out[4]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma', 'Janani']
&lt;/pre&gt;
&lt;pre&gt;
In [5]: student[:5]       # prints the objects from the start of the list upto object at index 4
Out[5]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran']
&lt;/pre&gt;
&lt;pre&gt;
In [6]: student[2:]       # prints the objects from index 2 upto the end of the list
Out[6]: ['Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma', 'Janani']
&lt;/pre&gt;

Negative index too is available in Python. It starts from last element of the list. i.e.
&lt;pre&gt;
In [7]:student[-1]        #prints last index of list
Out[7]: 'Janani'
&lt;/pre&gt;
&lt;pre&gt;
In [8]:student[-1:-8]     #prints empty list
Out[8]: []
&lt;/pre&gt;
&lt;pre&gt;
In [9]:student[-8:-1]     #prints -8th index to -1st index elements
Out[9]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma']
&lt;/pre&gt;

[[#TOP]]

===Removing Item from list ===
----

Is used to remove a specific item from the list.

'''Example:'''
 
Use list.remove(entry/value)  Or   del list[index]    Or list.pop(index)
         student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
         student.remove(&quot;Arun&quot;)   #This will delete item &quot;Arun&quot;
         Or    
         del student[0]           # This will delete item at index 0
         Or
         student.pop(0)         # This will delete and return item at index 0


         print(student)    
         Output: [&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]

[[#TOP]]
===Delete list ===
----
Used to delete complete list

'''Example'''

Use del &lt;list name&gt;
         student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
         del student

===Concatenation of two lists===
----
''+'' is the concatenation operator which is used concatenate two lists. 
&lt;pre&gt;
ages1 = [11,23,12,23,45]
ages2 = [25, 24, 43, 47]
age=ages1+ages2
print(age)
#Output: [11, 23, 12, 23, 45, 25, 24, 43, 47]
&lt;/pre&gt;

===Repeatation of a list ===
----
''*'' is the operator to repeat a particular list.
&lt;pre&gt;
ages1 = [11,23,12,23,45]
age=ages1*5 #ages1 list is repeated 5 times and stroed in ''age'' list
print(age)

#Output: [11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45]
&lt;/pre&gt;

=== all and any for List===
all() and any() are special functions to check whether all elements in iterable is ''True'' or any element is ''True''
&lt;ol&gt;
&lt;li&gt;If all elements in a list are ''True'', '''all()''' will return ''True''&lt;/li&gt;
&lt;li&gt;If iterable is ''empty'', '''all()''' will return ''True''&lt;/li&gt;
&lt;li&gt;If iterable contains at least one ''True'', '''any()''' will return ''True''&lt;/li&gt;
&lt;li&gt;If iterable is ''empty'', '''any()''' will return ''False''&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;
lsit=[True, True, True, True]
print(all(lsit))#Output: True
print(any(lsit))#Output: True

lsit1=[True, False, True, True]
print(all(lsit1))#Output: False
print(any(lsit1))#Output: True

lsit2=[False,False,False]
print(all(lsit2))#Output: False
print(any(lsit2))#Output: False

lsit3=[]
print(all(lsit3))#Output: True
print(any(lsit3))#Output: False
&lt;/pre&gt;

==Conditional Statements==
&lt;pre&gt;Conditionals are used to check the condition and change the flow of the program 
accordingly. They are realized in programming languages through if statement. The 
syntax is as follows :
         if condition : 
            statement
    '''Note:''' Do not forget indentation (inserting space/tab) in the line after the
 if condition.
    
    In case you want to execute a set of statements when a condition is true and another

set of statement when the condition is false.
         if condition : 
            statement 1
         else :
            statement 2
    
    Multiple if-else statements can be written as follows:
         if condition_1 : 
            statement 1
         elif condition_2 : # 'elif' is short for 'else if'
            statement 2
         elif condition_3 :
            statement 3
        .
        .
         else :
            final statement
&lt;/pre&gt;
[[#TOP]]

=Loops and Conditionals : Fizzbuzz=
====Loops====
&lt;pre&gt;
Loops are used to execute a set of repetitive statements. They are realized
through 'while' and 'for' loops in programming languages. The syntax of 'for' loop is 
as follows :
        for LOOPVARIABLE in SEQUENCE: 
            STATEMENTS
    '''e.g.''' to print all the data from a list we can write:
        for item in list_name
            print(item)
    OR
        for index in range(len(list_name))
            print(list_name[index])
    
    The syntax for while loop is as follows :
    
        while BOOLEANEXPRESSION: 
            STATEMENTS
            INCREMENT/DECREMENT
    
    '''e.g.''' if we want to print all numbers from 1 to 10
        i=1
        while i&lt;=10 :
            print(i,&quot; &quot;)
            i=i+1
    
    'while' loop has indefinite iteration (run-time unknown). So, there must be loop
 break statement in it.
 Whereas 'for' loop is definite in nature (i.e. known or predictable span).&lt;br&gt;

&lt;b&gt;NOTE: Python doesn't have anything like do-while loop.&lt;/b&gt;
&lt;/pre&gt;
[[#TOP]]

==Implementation==
Here, we try to demonstrate the concept of loops and conditionals through a game called Fizzbuzz. The rules are as follows :&lt;br/&gt;
[[File:fizzBuzz.gif]]

• if input number is a multiple of ’3’ print ”Fizz”
&lt;br/&gt;
• if input number is a multiple of ’5’ print ”Buzz”
&lt;br/&gt;
• if input number is a multiple of both '3' and ’5’ print ”FizzBuzz”
&lt;br/&gt;
The pseudo code is as follows :
&lt;pre&gt;
   If input no % 3 == 0 and  input no % 5 == 0 : 
       print ”Fizzbuzz”
   else if input no % 3 == 0 : 
       print ”Fizz”
   else if input no % 5 == 0 : 
       print ”Buzz”
   else :
       print the input no
&lt;/pre&gt;
The order of statements execution matters to get the desired output. The highest priority condition should be first followed by other. In fizzbuzz programming, first checking should be done for both divisibility of 3 and 5. If condition not satisfied only then it should check individually for 3 or 5. So carefully choosing the order is crucial for better programming.
Note: There is some effect of present condition statements chosen on next conditions statements. That is why in first attempt fizzbuzz programming got struck.

Example: 
&lt;pre&gt;
#Code to achieve the above requirement in python3.
i = int(input(&quot;Enter the number&quot;)) 
if i%3 == 0 and i%5 == 0: print(i,&quot;FizzBuzz&quot;)  
elif i%5 == 0: print(i,&quot;Buzz&quot;)
elif i%3 == 0: print(i,&quot;Fizz&quot;)
else: print(i)
&lt;/pre&gt;
Lets put the same into a loop for a range given by the user.
&lt;pre&gt;
def fizzbuzzgame(start,stop):
    for i in range(start,stop+1):
        if i%3 == 0 and i%5 == 0:
            print(i,&quot;FizzBuzz&quot;)
        elif i%5 == 0:
            print(i,&quot;Buzz&quot;)
        elif i%3 == 0:
            print(i,&quot;Fizz&quot;)
        else: print(i)

fizzbuzzgame(50,100)
&lt;/pre&gt;


=== Fizz Buzz game in Interactive mode with Score ===
'''By Ms. Ami Tusharkant Choksi'''
&lt;pre&gt;
def fizzbuzzgame(i):
        if i%3 == 0 and i%5 == 0:
            print(i,&quot;FizzBuzz&quot;)
            return(&quot;fzbz&quot;)
        elif i%5 == 0:
            print(i,&quot;Buzz&quot;)
            return(&quot;bz&quot;)
        elif i%3 == 0:
            print(i,&quot;Fizz&quot;)
            return(&quot;fz&quot;)
        else:
            print(i)
            return(&quot;no&quot;)

ch = 'y'
fizzbuzz=0
fizz=0
buzz=0
nothing=0
print(&quot;&quot;&quot;
 _____  ____  _____  _____  ____   __ __  _____  _____       ____   ____  ___ ___    ___ 
|     ||    ||     ||     ||    \ |  |  ||     ||     |     /    | /    ||   |   |  /  _]
|   __| |  | |__/  ||__/  ||  o  )|  |  ||__/  ||__/  |    |   __||  o  || _   _ | /  [_ 
|  |_   |  | |   __||   __||     ||  |  ||   __||   __|    |  |  ||     ||  \_/  ||    _]
|   _]  |  | |  /  ||  /  ||  O  ||  :  ||  /  ||  /  |    |  |_ ||  _  ||   |   ||   [_ 
|  |    |  | |     ||     ||     ||     ||     ||     |    |     ||  |  ||   |   ||     |
|__|   |____||_____||_____||_____| \__,_||_____||_____|    |___,_||__|__||___|___||_____|
                                                                                         
&quot;&quot;&quot;)   

while(ch == 'y'):
    n=int(input(&quot;Enter a Number : &quot;))
    winLoose=fizzbuzzgame(n)
    if(winLoose == &quot;fz&quot;):
        fizz+=1
    elif(winLoose == &quot;bz&quot;):
        buzz+=1
    elif(winLoose == &quot;fzbz&quot;):
        fizzbuzz+=1
    ch=input(&quot;Do you want to continue playing the game : (y/n)&quot;)
    if(ch=='n'):
        print('Congratulations, your score is\n FizzBuzz:%d\nFizz:%d\nBuzz:%d' %
(fizzbuzz,fizz,buzz))
    
'''Sample Output:

 _____  ____  _____  _____  ____   __ __  _____  _____       ____   ____  ___ ___    ___ 
|     ||    ||     ||     ||    \ |  |  ||     ||     |     /    | /    ||   |   |  /  _]
|   __| |  | |__/  ||__/  ||  o  )|  |  ||__/  ||__/  |    |   __||  o  || _   _ | /  [_ 
|  |_   |  | |   __||   __||     ||  |  ||   __||   __|    |  |  ||     ||  \_/  ||    _]
|   _]  |  | |  /  ||  /  ||  O  ||  :  ||  /  ||  /  |    |  |_ ||  _  ||   |   ||   [_ 
|  |    |  | |     ||     ||     ||     ||     ||     |    |     ||  |  ||   |   ||     |
|__|   |____||_____||_____||_____| \__,_||_____||_____|    |___,_||__|__||___|___||_____|
                                                                                         

Enter a Number : 666
666 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 777
777 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 555
555 FizzBuzz
Do you want to continue playing the game : (y/n)y
Enter a Number : 1
1
Do you want to continue playing the game : (y/n)y
Enter a Number : 789
789 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 25
25 Buzz
Do you want to continue playing the game : (y/n)n
Congratulations, your score is

FizzBuzz:1
Fizz:3
Buzz:1

&lt;/pre&gt;

=Crowd Computing: Just Estimate=
==Wisdom of Crowds==
The concept of ’Wisdom of Crowds’ was proposed by Francis Galton. A weight-judging competition was carried on at the annual show of the West of England Fat Stock and Poultry Exhibition recently held at Plymouth, A fat ox having been selected, competitors bought stamped and numbered cards, each, on which to inscribe their respective names, addresses, and estimates of what the ox would weigh after it had been slaughtered. Those who guessed most successfully received prizes. About 8oo tickets were issued to the par- ticipants. The middlemost estimate of all the estimates recorded was 1207 lbs and the actual weight of the ox was 1198 lbs.

==Our Experiment==
The crowd had to guess the number of candies/gems in a jar. Around 75 people participated in the experiment. The actual number of gems in the jar were 375. The median of all estimates came out to be 300 and the mean of all the estimates came out to be around 396. Median underestimated and mean overestimated the actual value. So according to recent studies, Trimmed mean must be used as an aggregate measure to estimate where Wisdom of Crowds is involved.
[[File:Gemsjar.jpg|center|200px|caption]]

===Trimmed Mean===
In these kinds of experiments, 10% trimmed mean is usually followed. For calculating 10% trimmed mean, remove 10% smallest and 10% largest values from the sample. Calculate the mean of the sample obtained. In the above experiment, the trimmed mean came out to be around 351 which is very close to the actual value.

==Implementation==
Here, we try to demonstrate the concept of trimmed mean through crowd computing.
 Input a list of estimates done by the crowd .
 Sort the list.
 Remove the 10% smallest values.
 Remove the 10% largest values.
 Calculate the mean of the new list obtained .&lt;hr&gt;

==Data of Experiment==       
    Estimates =[1000,1010,1786,2000,1500,1500,100,120,150,150,150,170,175,180,197,200,200,200,200,200,200,220,220,220,220,234,250,250,250,250,250,250,250,250,250,263,270,275,275,286,300,
                300,300,300,300,300,300,300,320,350,350,350,400, 400,400,400,400,450,467,500,500,500,500,500,500,500,550,550,600,600,600,650,700,700,720]

    '''CODE:'''
&lt;pre&gt;
Estimates = [1000,1010,1786,2000,1500,1500,100,120,150,150,150,170,175,180,197,200,200,200,200,200,200,220,220,220,220,234,250,250,250,250,250,250,250,250,250,263,270,275,275,286,300,                300,300,300,300,300,300,300,320,350,350,350,400,400,400,400,400,450,467,500,500,500,500,500,500,500,550,550,600,600,600,650,700,700,720]
Estimates.sort()
offset = int(0.10*len(Estimates))
for i in range(offset):
       del Estimates[0]
       del Estimates[-1]
Sum = 0    
for i in range(len(Estimates)):
       Sum += Estimates[i]
Mean_Value = Sum/len(Estimates)
print(&quot;Mean : &quot;, int(Mean_Value))
#Output:
Mean :  351
&lt;/pre&gt;
&lt;hr&gt;
==Trimmed Mean for the above example== 
&lt;h3&gt;Using scipy library&lt;/h3&gt;
&lt;pre&gt;
#import scipy to use the method of trim_mean
from scipy import stats
trimMean = stats.trim_mean(Estimates, 0.1) # Trim 10% at both ends
print(&quot;Trimmed Mean : &quot;,trimMean)
#Output:
Trimmed Mean :  335.1020408163265
&lt;/pre&gt;

&lt;h3&gt;Without using scipy library&lt;/h3&gt;
&lt;pre&gt;
#Trimmed mean with 10%
p=10/100
#sorted data
data=[2, 4, 6, 7, 11, 21, 81, 90, 105, 121]
n = len(data)
#Remove elements from both end
rem=int(n*p)
newData = data[rem:-rem]
mean = 0
for i in newData:
    mean += i
mean = int(mean/len(newData))
print(&quot;Trimmed mean : &quot;,mean)
#Output: Trimmed mean :  40
&lt;/pre&gt;
[[#Top]]

=Jumbled_Words Permutations: Jumbled Words=
==What are Permutations ?==
A permutation also called ordering of selected number of elements from a list denoted by nPr here we are choosing all elements of a list and so n=r&lt;br&gt;
nPr=n!/(n-r)!&lt;br&gt; as n=r
nPn=n!&lt;br&gt; which gives all possible arrangement of elements present in a list.

 For example, permutations of list [1,2,3] are [1,2,3], [1,3,2], [2,1,3], [2,3,1], 
[3,1,2], and [3,2,1]. 
The number of permutations of a list of elements nPn is given by n!. For example, there are 2! = 2 x 1 = 2 permutations of [1,2], namely [1,2] and [2,1], and 3! = 3 x 2 x 1 = 6 permutations of [1,2,3], as mentioned above.&lt;br/&gt;
[[File:Permutations.jpg]]

==Implementation==
Here, we try to demonstrate the concept of permutations through jumbled words. It is a two player game in which one person presents the other person a different permutation of the word in his mind. The other person has to guess the right word. If he guesses, the he wins otherwise he loses.
 Input an list of words.
 Randomly pick a word from the list of words .
 Shuffle this word and present it to the other player.
 if word guesses by the player is same as the one picked from list of w
     player wins
 else
     player loses

ALTERNATE CODE TO GENERATE THIS GAME:
&lt;pre&gt;
import random
p1=input(&quot;enter player 1 name:&quot;)
p2=input(&quot;enter player 2 name:&quot;)
l=[&quot;rainbow&quot;,&quot;computer&quot;,&quot;robot&quot;,&quot;butter&quot;,&quot;vegetable&quot;,&quot;science&quot;,&quot;correct&quot;]
c1=c2=a1=a2=f1=f2=0
k=1
i=3
def play():
    n=random.choice(l)        ##n=chooses a word from list l
    l1=[]
    for j in n:
       l1.append(j)      ##creates a list for word in n
    for t in range(len(l1)):
       p=random.choice(l1)     ##this randomly displays letters in the list
       print(p)
       l1.remove(p)          ##to avoid the repetition of a letter
    s=input(&quot;enter the word:&quot;)
    if(s==n):
        print(&quot;correct&quot;)
        return 1
    else:
        print(&quot;not correct&quot;)
        print(&quot;answer is&quot;,n)
        return 0
def stat():
     print(&quot;player 1:&quot;)
     print(&quot;score:&quot;,c1)
     print(&quot;answered:&quot;,a1)
     print(&quot;failed:&quot;,f1)
     print(&quot;.............&quot;)
     print(&quot;player 2:&quot;)
     print(&quot;score:&quot;,c2)
     print(&quot;answered:&quot;,a2)
     print(&quot;failed&quot;,f2)
     if(c1&gt;c2):
         print(p1,&quot; won over &quot;,p2)
     elif(c1==c2):
         print(&quot;draw game&quot;)
     else:
         print(p2,&quot; won over &quot;,p1) 
while(i!=4):
      if(i==3):
         if(k==1):
             print(&quot;player 1 turn&quot;)
             print(&quot;your jumbled word is:&quot;)
             k=k+1
             m=play()
             if(m==1):      ##if guessed answer is correct,then score and no.of answered count will be increased
                c1+=1
                a1+=1
             else:
                f1+=1       ##else count of no.of failed to answered will be incremented
         else:
             print(&quot;player 2 turn&quot;)
             print(&quot;your jumbled word is:&quot;)
             k=k-1
             m=play()
             if(m==1):
                c2=c2+1
                a2=a2+1
             else:
                f2=f2+1
       if(i==2):
             print(&quot;present status&quot;)
             stat()
       i=int(input(&quot;enter your choice  1.stop 2.status 3.continue&quot;))
       if(i==1):
             stat()
             i=i+3
&lt;/pre&gt;
&lt;hr&gt;
=== JumbledWord Simple Logic, In Short ===
[[File:jumbledWord.gif]]
&lt;hr&gt;
'''Logic to create a Jumbled Word'''
&lt;hr&gt;
&lt;pre&gt;
#Get Jumbled Word and print it Horizontally
import random

def getJumbledWord(b):
    jumble=''
    l1 = [ b[i] for i in range(0, len(b)) ]
    for t in range(len(l1)):
       p=random.choice(l1)     ##this randomly gets letters from the list      
       jumble=jumble+p       
       l1.remove(p)
    return jumble

b=input(&quot;Enter a word to make it jumbled : &quot;)
print(&quot;Jumbled Word : &quot;, getJumbledWord(b))
&lt;/pre&gt;
&lt;hr&gt;
'''Another Logic to create a Jumbled Word'''
&lt;hr&gt;
&lt;pre&gt;
b=input(&quot;Enter a word to make it jumbled : &quot;)

def getJumbledWord1(b):
    l1 = [ b[i] for i in range(0, len(b)) ]
    random.shuffle(l1)
    str1 = ''.join(l1)
    return str1

print(&quot;Jumbled Word : &quot;, getJumbledWord1(b))
&lt;/pre&gt;

====Sample Output:====
&lt;pre&gt;
---- Output1 
Enter a word to make it jumbled : butter
Jumbled Word :  tbture

---- Output2 
Enter a word to make it jumbled : petriotism
Jumbled Word :  pittrosime
&lt;/pre&gt;

=Theory of Evolution=

== What is Evolution ? ==
Evolution is the change in heritable characteristics over successive generations. The theory of evolution explains that DNA, which acts as a carrier of genetic information from one generation to other, tends to change or mutate occasionally. These changes are reflected in next generations to come. This is how life has evolved on earth from bacteria to human beings.&lt;br&gt;
[[File:Evolution.png|500px]]

== Implementation ==
&lt;pre&gt;An array representing DNA is stored in a file. As genes are forms of DNA, they contain information to be transferred to forthcoming generations. Assume that information is in the form of bits (in the form of 0s and 1s). A number is picked randomly from 1 to the size of the array. A new parameter has been introduced which decides whether mutation would occur or not. If the value of this new parameter is 1 (It is picked randomly from 1 to 100), then only change is reflected down the generations, otherwise it is not. The pseudo code is as follows :
Input an array containing genetic information .
Randomly generate a number (say m) from 1 to length of the array. Randomly generate other number (say p) from 1 to 100.
 
    if p is equal to 1 then 
        if m is 1 then
          set it to 0
        else
          set it to 1
&lt;/pre&gt;
[[#TOP]]</text>
      <sha1>j9fg7uvwz1p3myl65w4ihjtehx6i0sn</sha1>
    </revision>
    <revision>
      <id>3564</id>
      <parentid>3563</parentid>
      <timestamp>2018-09-28T02:32:32Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* Removing Item from list */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="29384">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_3 Contributors of this page]
*Week 3 Playlist: https://www.youtube.com/playlist?list=PLc_j0TNIaWxOVx_z9jAM2UB3RqYNXaoEo
=List=
List is a flexible data structure used for storing a group of data separated by comma. The elements in a list need not be of the same data type.

'''Example:'''
       List_1 = [ 1, 2,3] or 
       List_1 = [&quot;coffee&quot;, &quot;Tea&quot;, &quot;Milk&quot;] or
       List_1 = [1,&quot;coffee&quot;, &quot;Tea&quot;, 3, &quot;5&quot;]

==List Creation==
&lt;pre&gt;a) A list can be created by simply putting values (separated by comma) between square brackets as given below,
       List_1 = [1,&quot;coffee&quot;, &quot;Tea&quot;, 3, &quot;5&quot;] #this creates a list by name List_1 containing following items


Or,
(b)A List can be created from scratch and elements can be added 
        List_2 = [ ]
        List_2.append(&quot;Kala&quot;)
        List_2.append(&quot;Mala&quot;)
Here we use &quot;append&quot; ,which is a function in python that enable us to append or attach an element to a list .
Thus List_2 will now hold [&quot;Kala&quot;,&quot;Mala&quot;]
&lt;/pre&gt;
[[#TOP]]

==Operations and Methods to work with List==
&lt;pre&gt;
a = [25,30,50,90,12,13]
b = [100,300,500,200,250]
&lt;/pre&gt;
&lt;hr&gt;
&lt;table border=2&gt;
  &lt;tr&gt;
    &lt;th&gt;&lt;b&gt;Method/&lt;br&gt;Operator&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Function&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Syntax&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Output&lt;/b&gt;&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;len()&lt;/td&gt;
    &lt;td&gt;Find length of a list&lt;/td&gt;
    &lt;td&gt;len(a)&lt;/td&gt;
    &lt;td&gt;6&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;max()&lt;/td&gt;
    &lt;td&gt;Find maximum element from the list&lt;/td&gt;
    &lt;td&gt;max(a)&lt;/td&gt;
    &lt;td&gt;90&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;min()&lt;/td&gt;
    &lt;td&gt;Find minimum element from the list&lt;/td&gt;
    &lt;td&gt;min(a)&lt;/td&gt;
    &lt;td&gt;12&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sum()&lt;/td&gt;
    &lt;td&gt;Returns sum of all elements of the list&lt;/td&gt;
    &lt;td&gt;sum(a)&lt;/td&gt;
    &lt;td&gt;220&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;reverse()&lt;/td&gt;
    &lt;td&gt;Reverses the original list&lt;/td&gt;
    &lt;td&gt;a.reverse()&lt;/td&gt;
    &lt;td&gt;[13, 12, 90, 50, 30, 25]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sort()&lt;/td&gt;
    &lt;td&gt;Sorts the original list in ascending order&lt;/td&gt;
    &lt;td&gt;a.sort()&lt;/td&gt;
    &lt;td&gt;[12, 13, 25, 30, 50, 90]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sorted()&lt;/td&gt;
    &lt;td&gt;Returns the new sorted list &lt;/td&gt;
    &lt;td&gt;sorted(a)&lt;/td&gt;
    &lt;td&gt;[12, 13, 25, 30, 50, 90]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;insert()&lt;/td&gt;
    &lt;td&gt;Insert at a particular index in the list, and shifts remaining elements&lt;/td&gt;
    &lt;td&gt;a.insert(3,3)&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 3, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;append()&lt;/td&gt;
    &lt;td&gt;Adds elements/object to the end of the list&lt;/td&gt;
    &lt;td&gt;a.append(5)&lt;br&gt;a.append([10,20])&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 5]&lt;br&gt;[25, 30, 50, 90, 12, 13, [10, 20]]&lt;br&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;extend()&lt;/td&gt;
    &lt;td&gt;Adds object to the end of the list as elements not as object&lt;/td&gt;
    &lt;td&gt;a.extend([10,20])&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 10, 20]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;*&amp;nbsp;&amp;nbsp;Repeatation&lt;br&gt;operator&lt;/td&gt;
    &lt;td&gt;Repeat the list for n times and returns a new list&lt;/td&gt;
    &lt;td&gt;a*2&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 25, 30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;+ Concatenation&lt;br&gt;operator&lt;/td&gt;
    &lt;td&gt;Concatenates two lists, and returns a new list&lt;/td&gt;
    &lt;td&gt;a+b&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 100, 300, 500, 200, 250]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;index()&lt;/td&gt;
    &lt;td&gt;Finds index of a particular element in the list or not&lt;/td&gt;
    &lt;td&gt;a.index(25)&lt;br&gt;a.index(0)&lt;br&gt;&lt;/td&gt;
    &lt;td&gt;0&lt;br&gt;&lt;br&gt;ValueError: 0 is not in list&lt;br&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;in operator&lt;/td&gt;
    &lt;td&gt;Finds whether a particular element is in the list or not, returns boolean&lt;/td&gt;
    &lt;td&gt;25 in a&lt;/td&gt;
    &lt;td&gt;True&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;not in operator&lt;/td&gt;
    &lt;td&gt;Checks if element is not available in list, returns boolean&lt;/td&gt;
    &lt;td&gt;25 not in a&lt;/td&gt;
    &lt;td&gt;False&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;count()&lt;/td&gt;
    &lt;td&gt;Counts the number of occurence of an element in the list&lt;/td&gt;
    &lt;td&gt;a.count(25)&lt;/td&gt;
    &lt;td&gt;1&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;remove()&lt;/td&gt;
    &lt;td&gt;Removes an element from the list&lt;/td&gt;
    &lt;td&gt;a.remove(25)&lt;/td&gt;
    &lt;td&gt; [30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;pop()&lt;/td&gt;
    &lt;td&gt;Delete and return item at index 0&lt;/td&gt;
    &lt;td&gt;a.pop(0)&lt;/td&gt;
    &lt;td&gt;25 , a will be [30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;del&lt;/td&gt;
    &lt;td&gt;Deletes item at a particular index from the list&lt;/td&gt;
    &lt;td&gt;del a[0]&lt;/td&gt;
    &lt;td&gt;[30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;all()&lt;/td&gt;
&lt;td&gt;Returns True, if all items in list are True or it is an empty list&lt;/td&gt;
&lt;td&gt;all([True, True, True])
all([])
&lt;/td&gt;
&lt;td&gt;True&lt;br&gt;
True&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;any()&lt;/td&gt;
&lt;td&gt;Returns True, if any item in list is True else return False&lt;/td&gt;
&lt;td&gt;any([True, True, True])&lt;br&gt;
any([True, False, True])&lt;br&gt;
any([])&lt;/td&gt;
&lt;td&gt;True&lt;br&gt;False&lt;br&gt;False&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;

==Printing the List==
=== Print whole list ===
A list can be printed simply or using a ''for / while'' loop 

 print(List_2)     # To print the entire list
This code will print      
 ['Kala','Mala']     

===Print element at a particular index===
&lt;pre&gt;
Using index position
    List_2[0]     # prints 'Kala' ,i.e,the value at index position 0.
    List_2[1]     # prints 'Mala'.
&lt;/pre&gt;
=== Without using index position ===
&lt;pre&gt;
for item in List_2:   # here item is a variable used to access elements in list.
       print(item)
   This code snippet prints 
    Kala
    Mala
&lt;/pre&gt;
[[#TOP]]

==Search for a particular element in list==
Elements in a list can be searched by one of the two ways:
=== using index() function===
&lt;pre&gt;
ages1 = [11,23,12,23,45]

#if element is available in the list, index() returns the index value on which, the element is present.
print(ages1.index(45))#Output: 4

#if element is not available in the list, index() returns ''ValueError''
print(ages1.index(0))#Output: ValueError:
&lt;/pre&gt;

In programming, if such error occurs, program gets terminated. It can be solved using exception handling.
e.g.
&lt;pre&gt;
ages1 = [11,23,12,23,45]

try:
    print(ages1.index(0))
except ValueError:
    print(&quot;Exception has occured&quot;)    
    print(&quot;Element is not found in the list&quot;)

&lt;/pre&gt;
&lt;pre&gt;
'''Output: 
Exception has occured
Element is not found in the list
'''&lt;/pre&gt;
[[#TOP]]

=== using 'in' operator===
''in'' operator is used to check whether a particular element is available in the list or not.e.g.

&lt;pre&gt;
ages1 = [11,23,12,23,45]
no=11

if no in ages1:
    print(&quot;no is there in the list&quot;)
else:    
    print(&quot;no is NOT there in the list&quot;)
&lt;/pre&gt;
&lt;pre&gt;
#Output: no is there in the list
&lt;/pre&gt;


'''Number is not there in the list'''
&lt;pre&gt;
ages1 = [11,23,12,23,45]
no=15

if no in ages1:
    print(&quot;no is there in the list&quot;)
else:    
    print(&quot;no is NOT there in the list&quot;)
&lt;/pre&gt;
&lt;pre&gt;
Output: no is NOT there in the list
&lt;/pre&gt;
[[#TOP]]

==Updating the List==
The lists can be updated using ''append'' or ''insert'' function.  Append adds the element to the end of the list and Insert adds the element in the specified position.
&lt;pre&gt;
   # add the element 'Sheela' to the end of the list.
   List_2.append(&quot;Sheela&quot;)    
   print (List_2) will output 
   ['Kala', 'Mala', 'Sheela']
&lt;/pre&gt;
   &lt;pre&gt;
# add the element &quot;Bala&quot; in the list at the index 1.
   List_2.insert(1,&quot;Bala&quot;)    
   print (List_2) will output 
   ['Kala', 'Bala','Mala', 'Sheela']
&lt;/pre&gt;

=== Extend the list by adding elements of other list at end using extend()===
&lt;pre&gt;
ages = [11,23,12,23,45]
ages.extend([57,58])
print(ages)
&lt;/pre&gt;

&lt;pre&gt;
#Output: [11, 23, 12, 23, 45, 57, 58]
&lt;/pre&gt;

==== Difference between ''append and extend'' ====
Difference between append and extend can be easily understood, by the following example.

&lt;pre&gt;
appendlist = [11,23,12,23,45]
appendlist.append([57,58])

extendlist= [11,23,12,23,45]
extendlist.extend([57,58])
&lt;/pre&gt;

&lt;pre&gt;
'''Output:
[11, 23, 12, 23, 45, [57, 58]]
[11, 23, 12, 23, 45, 57, 58]'''
&lt;/pre&gt;

[[#TOP]]

==Basic Operations on List==
===Frequency of Occurrence===
list.count(object) will return the number of times the object occur in the list.
  '''Example'''
    ages = [11,23,12,23,45,43,22,24,23]
    ages.count(23) will return
    3
    ages.count(100) will return
    0

===Length of the List===
len(list) will return the length of the list ie. the number of objects in the list.
  '''Example'''
&lt;pre&gt;
    ages = [11,23,12,23,45,43,22,24,23]
    len(ages) # Output: 9
&lt;/pre&gt;

To print the objects in the list either use ''for item in list'' or ''for index in range(len(list))''
&lt;pre&gt;
    for item in ages:       
        print (item)  
        (OR)
    for index in range(len(ages)) :
        print (ages[index])
&lt;/pre&gt;

===Sort the List===
list.sort() will sort the list in ascending order
  '''Example'''
    ages = [11,23,12,23,45,43,22,24,23]
    ages.sort() 
    print (ages) 
    [11, 12, 22, 23, 23, 23, 24, 43, 45]

[[#TOP]]

===Sort the List using sorted() function===
sorted(list1) will sort the list and return a new list, it doesn't modify the original list
&lt;br&gt;'''Example: Sort in ascending order'''
&lt;pre&gt;
ages = [11,23,12,23,45,43,22,24,23]
newList=sorted(ages)
print(newList)

#Output: [11, 12, 22, 23, 23, 23, 24, 43, 45]
&lt;/pre&gt;

&lt;br&gt;'''Example: Sort in descending order'''
&lt;pre&gt;
ages = [11,23,12,23,45,43,22,24,23]
newList=sorted(ages,reverse=True)
print(newList)

#Output: [45, 43, 24, 23, 23, 23, 22, 12, 11]
&lt;/pre&gt;

===Reverse the List===
list.reverse() will reverse the original list
  '''Example'''
    ages = [11, 12, 22, 23, 23, 23, 24, 43, 45]
    ages.reverse()
    print (ages)
    [45, 43, 24, 23, 23, 23, 22, 12, 11]

Both sort() and reverse() list operation will work on numeric and alphanumeric data list.

A special use of the reverse() function is to descend a list that is sorted in ascending order.

  '''Example'''
&lt;pre&gt;
ages = [11, 12, 22, 23, 23, 23, 24, 43, 45]
ages.sort()
print(ages)
ages.reverse()
print(ages)
&lt;/pre&gt;

===Slicing===
Used to retrieve an object or objects in a range as a list  
  '''Example'''

Use ''list[index]'' to retrieve the object at the given index
&lt;pre&gt;
In [1]: student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
In [2]: student[3]     #Object at index 3.  Remember index starts at 0
Out[2]: 'Geetha'      
&lt;/pre&gt;

Use ''list[start_index : end_index + 1]'' to retrieve objects from the start_index to end_index 
&lt;pre&gt;
In [3]: student[2:4]     # Objects from index 2 to 3 as List. Note the [ and ]
Out[3]: ['Vijay', 'Geetha']   
&lt;/pre&gt;

Use ''list[:]'' to retrieve objects from the starting of the list to the end of the list. 
The default start value will be the starting index of the list (i.e. 0) and the default end value
will be the length of the list 
&lt;pre&gt;
In [4]: student[:]        # prints the entire list
Out[4]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma', 'Janani']
&lt;/pre&gt;
&lt;pre&gt;
In [5]: student[:5]       # prints the objects from the start of the list upto object at index 4
Out[5]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran']
&lt;/pre&gt;
&lt;pre&gt;
In [6]: student[2:]       # prints the objects from index 2 upto the end of the list
Out[6]: ['Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma', 'Janani']
&lt;/pre&gt;

Negative index too is available in Python. It starts from last element of the list. i.e.
&lt;pre&gt;
In [7]:student[-1]        #prints last index of list
Out[7]: 'Janani'
&lt;/pre&gt;
&lt;pre&gt;
In [8]:student[-1:-8]     #prints empty list
Out[8]: []
&lt;/pre&gt;
&lt;pre&gt;
In [9]:student[-8:-1]     #prints -8th index to -1st index elements
Out[9]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma']
&lt;/pre&gt;

[[#TOP]]

===Removing Item from list ===
----

Is used to remove a specific item from the list.

'''Example:'''
 
Use list.remove(entry/value)  Or   del list[index]    Or list.pop(index)
&lt;pre&gt;
student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
student.remove(&quot;Arun&quot;)   #This will delete item &quot;Arun&quot;
         Or    
del student[0]           # This will delete item at index 0
         Or
student.pop(0)         # This will delete and return item at index 0
print(student)    
Output: &quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
&lt;/pre&gt;

[[#TOP]]

===Delete list ===
----
Used to delete complete list

'''Example'''

Use del &lt;list name&gt;
         student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
         del student

===Concatenation of two lists===
----
''+'' is the concatenation operator which is used concatenate two lists. 
&lt;pre&gt;
ages1 = [11,23,12,23,45]
ages2 = [25, 24, 43, 47]
age=ages1+ages2
print(age)
#Output: [11, 23, 12, 23, 45, 25, 24, 43, 47]
&lt;/pre&gt;

===Repeatation of a list ===
----
''*'' is the operator to repeat a particular list.
&lt;pre&gt;
ages1 = [11,23,12,23,45]
age=ages1*5 #ages1 list is repeated 5 times and stroed in ''age'' list
print(age)

#Output: [11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45]
&lt;/pre&gt;

=== all and any for List===
all() and any() are special functions to check whether all elements in iterable is ''True'' or any element is ''True''
&lt;ol&gt;
&lt;li&gt;If all elements in a list are ''True'', '''all()''' will return ''True''&lt;/li&gt;
&lt;li&gt;If iterable is ''empty'', '''all()''' will return ''True''&lt;/li&gt;
&lt;li&gt;If iterable contains at least one ''True'', '''any()''' will return ''True''&lt;/li&gt;
&lt;li&gt;If iterable is ''empty'', '''any()''' will return ''False''&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;
lsit=[True, True, True, True]
print(all(lsit))#Output: True
print(any(lsit))#Output: True

lsit1=[True, False, True, True]
print(all(lsit1))#Output: False
print(any(lsit1))#Output: True

lsit2=[False,False,False]
print(all(lsit2))#Output: False
print(any(lsit2))#Output: False

lsit3=[]
print(all(lsit3))#Output: True
print(any(lsit3))#Output: False
&lt;/pre&gt;

==Conditional Statements==
&lt;pre&gt;Conditionals are used to check the condition and change the flow of the program 
accordingly. They are realized in programming languages through if statement. The 
syntax is as follows :
         if condition : 
            statement
    '''Note:''' Do not forget indentation (inserting space/tab) in the line after the
 if condition.
    
    In case you want to execute a set of statements when a condition is true and another

set of statement when the condition is false.
         if condition : 
            statement 1
         else :
            statement 2
    
    Multiple if-else statements can be written as follows:
         if condition_1 : 
            statement 1
         elif condition_2 : # 'elif' is short for 'else if'
            statement 2
         elif condition_3 :
            statement 3
        .
        .
         else :
            final statement
&lt;/pre&gt;
[[#TOP]]

=Loops and Conditionals : Fizzbuzz=
====Loops====
&lt;pre&gt;
Loops are used to execute a set of repetitive statements. They are realized
through 'while' and 'for' loops in programming languages. The syntax of 'for' loop is 
as follows :
        for LOOPVARIABLE in SEQUENCE: 
            STATEMENTS
    '''e.g.''' to print all the data from a list we can write:
        for item in list_name
            print(item)
    OR
        for index in range(len(list_name))
            print(list_name[index])
    
    The syntax for while loop is as follows :
    
        while BOOLEANEXPRESSION: 
            STATEMENTS
            INCREMENT/DECREMENT
    
    '''e.g.''' if we want to print all numbers from 1 to 10
        i=1
        while i&lt;=10 :
            print(i,&quot; &quot;)
            i=i+1
    
    'while' loop has indefinite iteration (run-time unknown). So, there must be loop
 break statement in it.
 Whereas 'for' loop is definite in nature (i.e. known or predictable span).&lt;br&gt;

&lt;b&gt;NOTE: Python doesn't have anything like do-while loop.&lt;/b&gt;
&lt;/pre&gt;
[[#TOP]]

==Implementation==
Here, we try to demonstrate the concept of loops and conditionals through a game called Fizzbuzz. The rules are as follows :&lt;br/&gt;
[[File:fizzBuzz.gif]]

• if input number is a multiple of ’3’ print ”Fizz”
&lt;br/&gt;
• if input number is a multiple of ’5’ print ”Buzz”
&lt;br/&gt;
• if input number is a multiple of both '3' and ’5’ print ”FizzBuzz”
&lt;br/&gt;
The pseudo code is as follows :
&lt;pre&gt;
   If input no % 3 == 0 and  input no % 5 == 0 : 
       print ”Fizzbuzz”
   else if input no % 3 == 0 : 
       print ”Fizz”
   else if input no % 5 == 0 : 
       print ”Buzz”
   else :
       print the input no
&lt;/pre&gt;
The order of statements execution matters to get the desired output. The highest priority condition should be first followed by other. In fizzbuzz programming, first checking should be done for both divisibility of 3 and 5. If condition not satisfied only then it should check individually for 3 or 5. So carefully choosing the order is crucial for better programming.
Note: There is some effect of present condition statements chosen on next conditions statements. That is why in first attempt fizzbuzz programming got struck.

Example: 
&lt;pre&gt;
#Code to achieve the above requirement in python3.
i = int(input(&quot;Enter the number&quot;)) 
if i%3 == 0 and i%5 == 0: print(i,&quot;FizzBuzz&quot;)  
elif i%5 == 0: print(i,&quot;Buzz&quot;)
elif i%3 == 0: print(i,&quot;Fizz&quot;)
else: print(i)
&lt;/pre&gt;
Lets put the same into a loop for a range given by the user.
&lt;pre&gt;
def fizzbuzzgame(start,stop):
    for i in range(start,stop+1):
        if i%3 == 0 and i%5 == 0:
            print(i,&quot;FizzBuzz&quot;)
        elif i%5 == 0:
            print(i,&quot;Buzz&quot;)
        elif i%3 == 0:
            print(i,&quot;Fizz&quot;)
        else: print(i)

fizzbuzzgame(50,100)
&lt;/pre&gt;


=== Fizz Buzz game in Interactive mode with Score ===
'''By Ms. Ami Tusharkant Choksi'''
&lt;pre&gt;
def fizzbuzzgame(i):
        if i%3 == 0 and i%5 == 0:
            print(i,&quot;FizzBuzz&quot;)
            return(&quot;fzbz&quot;)
        elif i%5 == 0:
            print(i,&quot;Buzz&quot;)
            return(&quot;bz&quot;)
        elif i%3 == 0:
            print(i,&quot;Fizz&quot;)
            return(&quot;fz&quot;)
        else:
            print(i)
            return(&quot;no&quot;)

ch = 'y'
fizzbuzz=0
fizz=0
buzz=0
nothing=0
print(&quot;&quot;&quot;
 _____  ____  _____  _____  ____   __ __  _____  _____       ____   ____  ___ ___    ___ 
|     ||    ||     ||     ||    \ |  |  ||     ||     |     /    | /    ||   |   |  /  _]
|   __| |  | |__/  ||__/  ||  o  )|  |  ||__/  ||__/  |    |   __||  o  || _   _ | /  [_ 
|  |_   |  | |   __||   __||     ||  |  ||   __||   __|    |  |  ||     ||  \_/  ||    _]
|   _]  |  | |  /  ||  /  ||  O  ||  :  ||  /  ||  /  |    |  |_ ||  _  ||   |   ||   [_ 
|  |    |  | |     ||     ||     ||     ||     ||     |    |     ||  |  ||   |   ||     |
|__|   |____||_____||_____||_____| \__,_||_____||_____|    |___,_||__|__||___|___||_____|
                                                                                         
&quot;&quot;&quot;)   

while(ch == 'y'):
    n=int(input(&quot;Enter a Number : &quot;))
    winLoose=fizzbuzzgame(n)
    if(winLoose == &quot;fz&quot;):
        fizz+=1
    elif(winLoose == &quot;bz&quot;):
        buzz+=1
    elif(winLoose == &quot;fzbz&quot;):
        fizzbuzz+=1
    ch=input(&quot;Do you want to continue playing the game : (y/n)&quot;)
    if(ch=='n'):
        print('Congratulations, your score is\n FizzBuzz:%d\nFizz:%d\nBuzz:%d' %
(fizzbuzz,fizz,buzz))
    
'''Sample Output:

 _____  ____  _____  _____  ____   __ __  _____  _____       ____   ____  ___ ___    ___ 
|     ||    ||     ||     ||    \ |  |  ||     ||     |     /    | /    ||   |   |  /  _]
|   __| |  | |__/  ||__/  ||  o  )|  |  ||__/  ||__/  |    |   __||  o  || _   _ | /  [_ 
|  |_   |  | |   __||   __||     ||  |  ||   __||   __|    |  |  ||     ||  \_/  ||    _]
|   _]  |  | |  /  ||  /  ||  O  ||  :  ||  /  ||  /  |    |  |_ ||  _  ||   |   ||   [_ 
|  |    |  | |     ||     ||     ||     ||     ||     |    |     ||  |  ||   |   ||     |
|__|   |____||_____||_____||_____| \__,_||_____||_____|    |___,_||__|__||___|___||_____|
                                                                                         

Enter a Number : 666
666 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 777
777 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 555
555 FizzBuzz
Do you want to continue playing the game : (y/n)y
Enter a Number : 1
1
Do you want to continue playing the game : (y/n)y
Enter a Number : 789
789 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 25
25 Buzz
Do you want to continue playing the game : (y/n)n
Congratulations, your score is

FizzBuzz:1
Fizz:3
Buzz:1

&lt;/pre&gt;

=Crowd Computing: Just Estimate=
==Wisdom of Crowds==
The concept of ’Wisdom of Crowds’ was proposed by Francis Galton. A weight-judging competition was carried on at the annual show of the West of England Fat Stock and Poultry Exhibition recently held at Plymouth, A fat ox having been selected, competitors bought stamped and numbered cards, each, on which to inscribe their respective names, addresses, and estimates of what the ox would weigh after it had been slaughtered. Those who guessed most successfully received prizes. About 8oo tickets were issued to the par- ticipants. The middlemost estimate of all the estimates recorded was 1207 lbs and the actual weight of the ox was 1198 lbs.

==Our Experiment==
The crowd had to guess the number of candies/gems in a jar. Around 75 people participated in the experiment. The actual number of gems in the jar were 375. The median of all estimates came out to be 300 and the mean of all the estimates came out to be around 396. Median underestimated and mean overestimated the actual value. So according to recent studies, Trimmed mean must be used as an aggregate measure to estimate where Wisdom of Crowds is involved.
[[File:Gemsjar.jpg|center|200px|caption]]

===Trimmed Mean===
In these kinds of experiments, 10% trimmed mean is usually followed. For calculating 10% trimmed mean, remove 10% smallest and 10% largest values from the sample. Calculate the mean of the sample obtained. In the above experiment, the trimmed mean came out to be around 351 which is very close to the actual value.

==Implementation==
Here, we try to demonstrate the concept of trimmed mean through crowd computing.
 Input a list of estimates done by the crowd .
 Sort the list.
 Remove the 10% smallest values.
 Remove the 10% largest values.
 Calculate the mean of the new list obtained .&lt;hr&gt;

==Data of Experiment==       
    Estimates =[1000,1010,1786,2000,1500,1500,100,120,150,150,150,170,175,180,197,200,200,200,200,200,200,220,220,220,220,234,250,250,250,250,250,250,250,250,250,263,270,275,275,286,300,
                300,300,300,300,300,300,300,320,350,350,350,400, 400,400,400,400,450,467,500,500,500,500,500,500,500,550,550,600,600,600,650,700,700,720]

    '''CODE:'''
&lt;pre&gt;
Estimates = [1000,1010,1786,2000,1500,1500,100,120,150,150,150,170,175,180,197,200,200,200,200,200,200,220,220,220,220,234,250,250,250,250,250,250,250,250,250,263,270,275,275,286,300,                300,300,300,300,300,300,300,320,350,350,350,400,400,400,400,400,450,467,500,500,500,500,500,500,500,550,550,600,600,600,650,700,700,720]
Estimates.sort()
offset = int(0.10*len(Estimates))
for i in range(offset):
       del Estimates[0]
       del Estimates[-1]
Sum = 0    
for i in range(len(Estimates)):
       Sum += Estimates[i]
Mean_Value = Sum/len(Estimates)
print(&quot;Mean : &quot;, int(Mean_Value))
#Output:
Mean :  351
&lt;/pre&gt;
&lt;hr&gt;
==Trimmed Mean for the above example== 
&lt;h3&gt;Using scipy library&lt;/h3&gt;
&lt;pre&gt;
#import scipy to use the method of trim_mean
from scipy import stats
trimMean = stats.trim_mean(Estimates, 0.1) # Trim 10% at both ends
print(&quot;Trimmed Mean : &quot;,trimMean)
#Output:
Trimmed Mean :  335.1020408163265
&lt;/pre&gt;

&lt;h3&gt;Without using scipy library&lt;/h3&gt;
&lt;pre&gt;
#Trimmed mean with 10%
p=10/100
#sorted data
data=[2, 4, 6, 7, 11, 21, 81, 90, 105, 121]
n = len(data)
#Remove elements from both end
rem=int(n*p)
newData = data[rem:-rem]
mean = 0
for i in newData:
    mean += i
mean = int(mean/len(newData))
print(&quot;Trimmed mean : &quot;,mean)
#Output: Trimmed mean :  40
&lt;/pre&gt;
[[#Top]]

=Jumbled_Words Permutations: Jumbled Words=
==What are Permutations ?==
A permutation also called ordering of selected number of elements from a list denoted by nPr here we are choosing all elements of a list and so n=r&lt;br&gt;
nPr=n!/(n-r)!&lt;br&gt; as n=r
nPn=n!&lt;br&gt; which gives all possible arrangement of elements present in a list.

 For example, permutations of list [1,2,3] are [1,2,3], [1,3,2], [2,1,3], [2,3,1], 
[3,1,2], and [3,2,1]. 
The number of permutations of a list of elements nPn is given by n!. For example, there are 2! = 2 x 1 = 2 permutations of [1,2], namely [1,2] and [2,1], and 3! = 3 x 2 x 1 = 6 permutations of [1,2,3], as mentioned above.&lt;br/&gt;
[[File:Permutations.jpg]]

==Implementation==
Here, we try to demonstrate the concept of permutations through jumbled words. It is a two player game in which one person presents the other person a different permutation of the word in his mind. The other person has to guess the right word. If he guesses, the he wins otherwise he loses.
 Input an list of words.
 Randomly pick a word from the list of words .
 Shuffle this word and present it to the other player.
 if word guesses by the player is same as the one picked from list of w
     player wins
 else
     player loses

ALTERNATE CODE TO GENERATE THIS GAME:
&lt;pre&gt;
import random
p1=input(&quot;enter player 1 name:&quot;)
p2=input(&quot;enter player 2 name:&quot;)
l=[&quot;rainbow&quot;,&quot;computer&quot;,&quot;robot&quot;,&quot;butter&quot;,&quot;vegetable&quot;,&quot;science&quot;,&quot;correct&quot;]
c1=c2=a1=a2=f1=f2=0
k=1
i=3
def play():
    n=random.choice(l)        ##n=chooses a word from list l
    l1=[]
    for j in n:
       l1.append(j)      ##creates a list for word in n
    for t in range(len(l1)):
       p=random.choice(l1)     ##this randomly displays letters in the list
       print(p)
       l1.remove(p)          ##to avoid the repetition of a letter
    s=input(&quot;enter the word:&quot;)
    if(s==n):
        print(&quot;correct&quot;)
        return 1
    else:
        print(&quot;not correct&quot;)
        print(&quot;answer is&quot;,n)
        return 0
def stat():
     print(&quot;player 1:&quot;)
     print(&quot;score:&quot;,c1)
     print(&quot;answered:&quot;,a1)
     print(&quot;failed:&quot;,f1)
     print(&quot;.............&quot;)
     print(&quot;player 2:&quot;)
     print(&quot;score:&quot;,c2)
     print(&quot;answered:&quot;,a2)
     print(&quot;failed&quot;,f2)
     if(c1&gt;c2):
         print(p1,&quot; won over &quot;,p2)
     elif(c1==c2):
         print(&quot;draw game&quot;)
     else:
         print(p2,&quot; won over &quot;,p1) 
while(i!=4):
      if(i==3):
         if(k==1):
             print(&quot;player 1 turn&quot;)
             print(&quot;your jumbled word is:&quot;)
             k=k+1
             m=play()
             if(m==1):      ##if guessed answer is correct,then score and no.of answered count will be increased
                c1+=1
                a1+=1
             else:
                f1+=1       ##else count of no.of failed to answered will be incremented
         else:
             print(&quot;player 2 turn&quot;)
             print(&quot;your jumbled word is:&quot;)
             k=k-1
             m=play()
             if(m==1):
                c2=c2+1
                a2=a2+1
             else:
                f2=f2+1
       if(i==2):
             print(&quot;present status&quot;)
             stat()
       i=int(input(&quot;enter your choice  1.stop 2.status 3.continue&quot;))
       if(i==1):
             stat()
             i=i+3
&lt;/pre&gt;
&lt;hr&gt;
=== JumbledWord Simple Logic, In Short ===
[[File:jumbledWord.gif]]
&lt;hr&gt;
'''Logic to create a Jumbled Word'''
&lt;hr&gt;
&lt;pre&gt;
#Get Jumbled Word and print it Horizontally
import random

def getJumbledWord(b):
    jumble=''
    l1 = [ b[i] for i in range(0, len(b)) ]
    for t in range(len(l1)):
       p=random.choice(l1)     ##this randomly gets letters from the list      
       jumble=jumble+p       
       l1.remove(p)
    return jumble

b=input(&quot;Enter a word to make it jumbled : &quot;)
print(&quot;Jumbled Word : &quot;, getJumbledWord(b))
&lt;/pre&gt;
&lt;hr&gt;
'''Another Logic to create a Jumbled Word'''
&lt;hr&gt;
&lt;pre&gt;
b=input(&quot;Enter a word to make it jumbled : &quot;)

def getJumbledWord1(b):
    l1 = [ b[i] for i in range(0, len(b)) ]
    random.shuffle(l1)
    str1 = ''.join(l1)
    return str1

print(&quot;Jumbled Word : &quot;, getJumbledWord1(b))
&lt;/pre&gt;

====Sample Output:====
&lt;pre&gt;
---- Output1 
Enter a word to make it jumbled : butter
Jumbled Word :  tbture

---- Output2 
Enter a word to make it jumbled : petriotism
Jumbled Word :  pittrosime
&lt;/pre&gt;

=Theory of Evolution=

== What is Evolution ? ==
Evolution is the change in heritable characteristics over successive generations. The theory of evolution explains that DNA, which acts as a carrier of genetic information from one generation to other, tends to change or mutate occasionally. These changes are reflected in next generations to come. This is how life has evolved on earth from bacteria to human beings.&lt;br&gt;
[[File:Evolution.png|500px]]

== Implementation ==
&lt;pre&gt;An array representing DNA is stored in a file. As genes are forms of DNA, they contain information to be transferred to forthcoming generations. Assume that information is in the form of bits (in the form of 0s and 1s). A number is picked randomly from 1 to the size of the array. A new parameter has been introduced which decides whether mutation would occur or not. If the value of this new parameter is 1 (It is picked randomly from 1 to 100), then only change is reflected down the generations, otherwise it is not. The pseudo code is as follows :
Input an array containing genetic information .
Randomly generate a number (say m) from 1 to length of the array. Randomly generate other number (say p) from 1 to 100.
 
    if p is equal to 1 then 
        if m is 1 then
          set it to 0
        else
          set it to 1
&lt;/pre&gt;
[[#TOP]]</text>
      <sha1>ghlpjt3dh0nnchq7vms8vovrf5nr5jy</sha1>
    </revision>
    <revision>
      <id>3565</id>
      <parentid>3564</parentid>
      <timestamp>2018-09-28T02:33:12Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* Delete list */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="29378">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_3 Contributors of this page]
*Week 3 Playlist: https://www.youtube.com/playlist?list=PLc_j0TNIaWxOVx_z9jAM2UB3RqYNXaoEo
=List=
List is a flexible data structure used for storing a group of data separated by comma. The elements in a list need not be of the same data type.

'''Example:'''
       List_1 = [ 1, 2,3] or 
       List_1 = [&quot;coffee&quot;, &quot;Tea&quot;, &quot;Milk&quot;] or
       List_1 = [1,&quot;coffee&quot;, &quot;Tea&quot;, 3, &quot;5&quot;]

==List Creation==
&lt;pre&gt;a) A list can be created by simply putting values (separated by comma) between square brackets as given below,
       List_1 = [1,&quot;coffee&quot;, &quot;Tea&quot;, 3, &quot;5&quot;] #this creates a list by name List_1 containing following items


Or,
(b)A List can be created from scratch and elements can be added 
        List_2 = [ ]
        List_2.append(&quot;Kala&quot;)
        List_2.append(&quot;Mala&quot;)
Here we use &quot;append&quot; ,which is a function in python that enable us to append or attach an element to a list .
Thus List_2 will now hold [&quot;Kala&quot;,&quot;Mala&quot;]
&lt;/pre&gt;
[[#TOP]]

==Operations and Methods to work with List==
&lt;pre&gt;
a = [25,30,50,90,12,13]
b = [100,300,500,200,250]
&lt;/pre&gt;
&lt;hr&gt;
&lt;table border=2&gt;
  &lt;tr&gt;
    &lt;th&gt;&lt;b&gt;Method/&lt;br&gt;Operator&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Function&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Syntax&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Output&lt;/b&gt;&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;len()&lt;/td&gt;
    &lt;td&gt;Find length of a list&lt;/td&gt;
    &lt;td&gt;len(a)&lt;/td&gt;
    &lt;td&gt;6&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;max()&lt;/td&gt;
    &lt;td&gt;Find maximum element from the list&lt;/td&gt;
    &lt;td&gt;max(a)&lt;/td&gt;
    &lt;td&gt;90&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;min()&lt;/td&gt;
    &lt;td&gt;Find minimum element from the list&lt;/td&gt;
    &lt;td&gt;min(a)&lt;/td&gt;
    &lt;td&gt;12&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sum()&lt;/td&gt;
    &lt;td&gt;Returns sum of all elements of the list&lt;/td&gt;
    &lt;td&gt;sum(a)&lt;/td&gt;
    &lt;td&gt;220&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;reverse()&lt;/td&gt;
    &lt;td&gt;Reverses the original list&lt;/td&gt;
    &lt;td&gt;a.reverse()&lt;/td&gt;
    &lt;td&gt;[13, 12, 90, 50, 30, 25]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sort()&lt;/td&gt;
    &lt;td&gt;Sorts the original list in ascending order&lt;/td&gt;
    &lt;td&gt;a.sort()&lt;/td&gt;
    &lt;td&gt;[12, 13, 25, 30, 50, 90]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sorted()&lt;/td&gt;
    &lt;td&gt;Returns the new sorted list &lt;/td&gt;
    &lt;td&gt;sorted(a)&lt;/td&gt;
    &lt;td&gt;[12, 13, 25, 30, 50, 90]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;insert()&lt;/td&gt;
    &lt;td&gt;Insert at a particular index in the list, and shifts remaining elements&lt;/td&gt;
    &lt;td&gt;a.insert(3,3)&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 3, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;append()&lt;/td&gt;
    &lt;td&gt;Adds elements/object to the end of the list&lt;/td&gt;
    &lt;td&gt;a.append(5)&lt;br&gt;a.append([10,20])&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 5]&lt;br&gt;[25, 30, 50, 90, 12, 13, [10, 20]]&lt;br&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;extend()&lt;/td&gt;
    &lt;td&gt;Adds object to the end of the list as elements not as object&lt;/td&gt;
    &lt;td&gt;a.extend([10,20])&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 10, 20]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;*&amp;nbsp;&amp;nbsp;Repeatation&lt;br&gt;operator&lt;/td&gt;
    &lt;td&gt;Repeat the list for n times and returns a new list&lt;/td&gt;
    &lt;td&gt;a*2&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 25, 30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;+ Concatenation&lt;br&gt;operator&lt;/td&gt;
    &lt;td&gt;Concatenates two lists, and returns a new list&lt;/td&gt;
    &lt;td&gt;a+b&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 100, 300, 500, 200, 250]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;index()&lt;/td&gt;
    &lt;td&gt;Finds index of a particular element in the list or not&lt;/td&gt;
    &lt;td&gt;a.index(25)&lt;br&gt;a.index(0)&lt;br&gt;&lt;/td&gt;
    &lt;td&gt;0&lt;br&gt;&lt;br&gt;ValueError: 0 is not in list&lt;br&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;in operator&lt;/td&gt;
    &lt;td&gt;Finds whether a particular element is in the list or not, returns boolean&lt;/td&gt;
    &lt;td&gt;25 in a&lt;/td&gt;
    &lt;td&gt;True&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;not in operator&lt;/td&gt;
    &lt;td&gt;Checks if element is not available in list, returns boolean&lt;/td&gt;
    &lt;td&gt;25 not in a&lt;/td&gt;
    &lt;td&gt;False&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;count()&lt;/td&gt;
    &lt;td&gt;Counts the number of occurence of an element in the list&lt;/td&gt;
    &lt;td&gt;a.count(25)&lt;/td&gt;
    &lt;td&gt;1&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;remove()&lt;/td&gt;
    &lt;td&gt;Removes an element from the list&lt;/td&gt;
    &lt;td&gt;a.remove(25)&lt;/td&gt;
    &lt;td&gt; [30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;pop()&lt;/td&gt;
    &lt;td&gt;Delete and return item at index 0&lt;/td&gt;
    &lt;td&gt;a.pop(0)&lt;/td&gt;
    &lt;td&gt;25 , a will be [30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;del&lt;/td&gt;
    &lt;td&gt;Deletes item at a particular index from the list&lt;/td&gt;
    &lt;td&gt;del a[0]&lt;/td&gt;
    &lt;td&gt;[30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;all()&lt;/td&gt;
&lt;td&gt;Returns True, if all items in list are True or it is an empty list&lt;/td&gt;
&lt;td&gt;all([True, True, True])
all([])
&lt;/td&gt;
&lt;td&gt;True&lt;br&gt;
True&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;any()&lt;/td&gt;
&lt;td&gt;Returns True, if any item in list is True else return False&lt;/td&gt;
&lt;td&gt;any([True, True, True])&lt;br&gt;
any([True, False, True])&lt;br&gt;
any([])&lt;/td&gt;
&lt;td&gt;True&lt;br&gt;False&lt;br&gt;False&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;

==Printing the List==
=== Print whole list ===
A list can be printed simply or using a ''for / while'' loop 

 print(List_2)     # To print the entire list
This code will print      
 ['Kala','Mala']     

===Print element at a particular index===
&lt;pre&gt;
Using index position
    List_2[0]     # prints 'Kala' ,i.e,the value at index position 0.
    List_2[1]     # prints 'Mala'.
&lt;/pre&gt;
=== Without using index position ===
&lt;pre&gt;
for item in List_2:   # here item is a variable used to access elements in list.
       print(item)
   This code snippet prints 
    Kala
    Mala
&lt;/pre&gt;
[[#TOP]]

==Search for a particular element in list==
Elements in a list can be searched by one of the two ways:
=== using index() function===
&lt;pre&gt;
ages1 = [11,23,12,23,45]

#if element is available in the list, index() returns the index value on which, the element is present.
print(ages1.index(45))#Output: 4

#if element is not available in the list, index() returns ''ValueError''
print(ages1.index(0))#Output: ValueError:
&lt;/pre&gt;

In programming, if such error occurs, program gets terminated. It can be solved using exception handling.
e.g.
&lt;pre&gt;
ages1 = [11,23,12,23,45]

try:
    print(ages1.index(0))
except ValueError:
    print(&quot;Exception has occured&quot;)    
    print(&quot;Element is not found in the list&quot;)

&lt;/pre&gt;
&lt;pre&gt;
'''Output: 
Exception has occured
Element is not found in the list
'''&lt;/pre&gt;
[[#TOP]]

=== using 'in' operator===
''in'' operator is used to check whether a particular element is available in the list or not.e.g.

&lt;pre&gt;
ages1 = [11,23,12,23,45]
no=11

if no in ages1:
    print(&quot;no is there in the list&quot;)
else:    
    print(&quot;no is NOT there in the list&quot;)
&lt;/pre&gt;
&lt;pre&gt;
#Output: no is there in the list
&lt;/pre&gt;


'''Number is not there in the list'''
&lt;pre&gt;
ages1 = [11,23,12,23,45]
no=15

if no in ages1:
    print(&quot;no is there in the list&quot;)
else:    
    print(&quot;no is NOT there in the list&quot;)
&lt;/pre&gt;
&lt;pre&gt;
Output: no is NOT there in the list
&lt;/pre&gt;
[[#TOP]]

==Updating the List==
The lists can be updated using ''append'' or ''insert'' function.  Append adds the element to the end of the list and Insert adds the element in the specified position.
&lt;pre&gt;
   # add the element 'Sheela' to the end of the list.
   List_2.append(&quot;Sheela&quot;)    
   print (List_2) will output 
   ['Kala', 'Mala', 'Sheela']
&lt;/pre&gt;
   &lt;pre&gt;
# add the element &quot;Bala&quot; in the list at the index 1.
   List_2.insert(1,&quot;Bala&quot;)    
   print (List_2) will output 
   ['Kala', 'Bala','Mala', 'Sheela']
&lt;/pre&gt;

=== Extend the list by adding elements of other list at end using extend()===
&lt;pre&gt;
ages = [11,23,12,23,45]
ages.extend([57,58])
print(ages)
&lt;/pre&gt;

&lt;pre&gt;
#Output: [11, 23, 12, 23, 45, 57, 58]
&lt;/pre&gt;

==== Difference between ''append and extend'' ====
Difference between append and extend can be easily understood, by the following example.

&lt;pre&gt;
appendlist = [11,23,12,23,45]
appendlist.append([57,58])

extendlist= [11,23,12,23,45]
extendlist.extend([57,58])
&lt;/pre&gt;

&lt;pre&gt;
'''Output:
[11, 23, 12, 23, 45, [57, 58]]
[11, 23, 12, 23, 45, 57, 58]'''
&lt;/pre&gt;

[[#TOP]]

==Basic Operations on List==
===Frequency of Occurrence===
list.count(object) will return the number of times the object occur in the list.
  '''Example'''
    ages = [11,23,12,23,45,43,22,24,23]
    ages.count(23) will return
    3
    ages.count(100) will return
    0

===Length of the List===
len(list) will return the length of the list ie. the number of objects in the list.
  '''Example'''
&lt;pre&gt;
    ages = [11,23,12,23,45,43,22,24,23]
    len(ages) # Output: 9
&lt;/pre&gt;

To print the objects in the list either use ''for item in list'' or ''for index in range(len(list))''
&lt;pre&gt;
    for item in ages:       
        print (item)  
        (OR)
    for index in range(len(ages)) :
        print (ages[index])
&lt;/pre&gt;

===Sort the List===
list.sort() will sort the list in ascending order
  '''Example'''
    ages = [11,23,12,23,45,43,22,24,23]
    ages.sort() 
    print (ages) 
    [11, 12, 22, 23, 23, 23, 24, 43, 45]

[[#TOP]]

===Sort the List using sorted() function===
sorted(list1) will sort the list and return a new list, it doesn't modify the original list
&lt;br&gt;'''Example: Sort in ascending order'''
&lt;pre&gt;
ages = [11,23,12,23,45,43,22,24,23]
newList=sorted(ages)
print(newList)

#Output: [11, 12, 22, 23, 23, 23, 24, 43, 45]
&lt;/pre&gt;

&lt;br&gt;'''Example: Sort in descending order'''
&lt;pre&gt;
ages = [11,23,12,23,45,43,22,24,23]
newList=sorted(ages,reverse=True)
print(newList)

#Output: [45, 43, 24, 23, 23, 23, 22, 12, 11]
&lt;/pre&gt;

===Reverse the List===
list.reverse() will reverse the original list
  '''Example'''
    ages = [11, 12, 22, 23, 23, 23, 24, 43, 45]
    ages.reverse()
    print (ages)
    [45, 43, 24, 23, 23, 23, 22, 12, 11]

Both sort() and reverse() list operation will work on numeric and alphanumeric data list.

A special use of the reverse() function is to descend a list that is sorted in ascending order.

  '''Example'''
&lt;pre&gt;
ages = [11, 12, 22, 23, 23, 23, 24, 43, 45]
ages.sort()
print(ages)
ages.reverse()
print(ages)
&lt;/pre&gt;

===Slicing===
Used to retrieve an object or objects in a range as a list  
  '''Example'''

Use ''list[index]'' to retrieve the object at the given index
&lt;pre&gt;
In [1]: student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
In [2]: student[3]     #Object at index 3.  Remember index starts at 0
Out[2]: 'Geetha'      
&lt;/pre&gt;

Use ''list[start_index : end_index + 1]'' to retrieve objects from the start_index to end_index 
&lt;pre&gt;
In [3]: student[2:4]     # Objects from index 2 to 3 as List. Note the [ and ]
Out[3]: ['Vijay', 'Geetha']   
&lt;/pre&gt;

Use ''list[:]'' to retrieve objects from the starting of the list to the end of the list. 
The default start value will be the starting index of the list (i.e. 0) and the default end value
will be the length of the list 
&lt;pre&gt;
In [4]: student[:]        # prints the entire list
Out[4]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma', 'Janani']
&lt;/pre&gt;
&lt;pre&gt;
In [5]: student[:5]       # prints the objects from the start of the list upto object at index 4
Out[5]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran']
&lt;/pre&gt;
&lt;pre&gt;
In [6]: student[2:]       # prints the objects from index 2 upto the end of the list
Out[6]: ['Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma', 'Janani']
&lt;/pre&gt;

Negative index too is available in Python. It starts from last element of the list. i.e.
&lt;pre&gt;
In [7]:student[-1]        #prints last index of list
Out[7]: 'Janani'
&lt;/pre&gt;
&lt;pre&gt;
In [8]:student[-1:-8]     #prints empty list
Out[8]: []
&lt;/pre&gt;
&lt;pre&gt;
In [9]:student[-8:-1]     #prints -8th index to -1st index elements
Out[9]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma']
&lt;/pre&gt;

[[#TOP]]

===Removing Item from list ===
----

Is used to remove a specific item from the list.

'''Example:'''
 
Use list.remove(entry/value)  Or   del list[index]    Or list.pop(index)
&lt;pre&gt;
student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
student.remove(&quot;Arun&quot;)   #This will delete item &quot;Arun&quot;
         Or    
del student[0]           # This will delete item at index 0
         Or
student.pop(0)         # This will delete and return item at index 0
print(student)    
Output: &quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
&lt;/pre&gt;

[[#TOP]]

===Delete list ===
----
Used to delete complete list

'''Example'''

Use del &lt;list name&gt;
&lt;pre&gt;
student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
del student&lt;/pre&gt;

===Concatenation of two lists===
----
''+'' is the concatenation operator which is used concatenate two lists. 
&lt;pre&gt;
ages1 = [11,23,12,23,45]
ages2 = [25, 24, 43, 47]
age=ages1+ages2
print(age)
#Output: [11, 23, 12, 23, 45, 25, 24, 43, 47]
&lt;/pre&gt;

===Repeatation of a list ===
----
''*'' is the operator to repeat a particular list.
&lt;pre&gt;
ages1 = [11,23,12,23,45]
age=ages1*5 #ages1 list is repeated 5 times and stroed in ''age'' list
print(age)

#Output: [11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45]
&lt;/pre&gt;

=== all and any for List===
all() and any() are special functions to check whether all elements in iterable is ''True'' or any element is ''True''
&lt;ol&gt;
&lt;li&gt;If all elements in a list are ''True'', '''all()''' will return ''True''&lt;/li&gt;
&lt;li&gt;If iterable is ''empty'', '''all()''' will return ''True''&lt;/li&gt;
&lt;li&gt;If iterable contains at least one ''True'', '''any()''' will return ''True''&lt;/li&gt;
&lt;li&gt;If iterable is ''empty'', '''any()''' will return ''False''&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;
lsit=[True, True, True, True]
print(all(lsit))#Output: True
print(any(lsit))#Output: True

lsit1=[True, False, True, True]
print(all(lsit1))#Output: False
print(any(lsit1))#Output: True

lsit2=[False,False,False]
print(all(lsit2))#Output: False
print(any(lsit2))#Output: False

lsit3=[]
print(all(lsit3))#Output: True
print(any(lsit3))#Output: False
&lt;/pre&gt;

==Conditional Statements==
&lt;pre&gt;Conditionals are used to check the condition and change the flow of the program 
accordingly. They are realized in programming languages through if statement. The 
syntax is as follows :
         if condition : 
            statement
    '''Note:''' Do not forget indentation (inserting space/tab) in the line after the
 if condition.
    
    In case you want to execute a set of statements when a condition is true and another

set of statement when the condition is false.
         if condition : 
            statement 1
         else :
            statement 2
    
    Multiple if-else statements can be written as follows:
         if condition_1 : 
            statement 1
         elif condition_2 : # 'elif' is short for 'else if'
            statement 2
         elif condition_3 :
            statement 3
        .
        .
         else :
            final statement
&lt;/pre&gt;
[[#TOP]]

=Loops and Conditionals : Fizzbuzz=
====Loops====
&lt;pre&gt;
Loops are used to execute a set of repetitive statements. They are realized
through 'while' and 'for' loops in programming languages. The syntax of 'for' loop is 
as follows :
        for LOOPVARIABLE in SEQUENCE: 
            STATEMENTS
    '''e.g.''' to print all the data from a list we can write:
        for item in list_name
            print(item)
    OR
        for index in range(len(list_name))
            print(list_name[index])
    
    The syntax for while loop is as follows :
    
        while BOOLEANEXPRESSION: 
            STATEMENTS
            INCREMENT/DECREMENT
    
    '''e.g.''' if we want to print all numbers from 1 to 10
        i=1
        while i&lt;=10 :
            print(i,&quot; &quot;)
            i=i+1
    
    'while' loop has indefinite iteration (run-time unknown). So, there must be loop
 break statement in it.
 Whereas 'for' loop is definite in nature (i.e. known or predictable span).&lt;br&gt;

&lt;b&gt;NOTE: Python doesn't have anything like do-while loop.&lt;/b&gt;
&lt;/pre&gt;
[[#TOP]]

==Implementation==
Here, we try to demonstrate the concept of loops and conditionals through a game called Fizzbuzz. The rules are as follows :&lt;br/&gt;
[[File:fizzBuzz.gif]]

• if input number is a multiple of ’3’ print ”Fizz”
&lt;br/&gt;
• if input number is a multiple of ’5’ print ”Buzz”
&lt;br/&gt;
• if input number is a multiple of both '3' and ’5’ print ”FizzBuzz”
&lt;br/&gt;
The pseudo code is as follows :
&lt;pre&gt;
   If input no % 3 == 0 and  input no % 5 == 0 : 
       print ”Fizzbuzz”
   else if input no % 3 == 0 : 
       print ”Fizz”
   else if input no % 5 == 0 : 
       print ”Buzz”
   else :
       print the input no
&lt;/pre&gt;
The order of statements execution matters to get the desired output. The highest priority condition should be first followed by other. In fizzbuzz programming, first checking should be done for both divisibility of 3 and 5. If condition not satisfied only then it should check individually for 3 or 5. So carefully choosing the order is crucial for better programming.
Note: There is some effect of present condition statements chosen on next conditions statements. That is why in first attempt fizzbuzz programming got struck.

Example: 
&lt;pre&gt;
#Code to achieve the above requirement in python3.
i = int(input(&quot;Enter the number&quot;)) 
if i%3 == 0 and i%5 == 0: print(i,&quot;FizzBuzz&quot;)  
elif i%5 == 0: print(i,&quot;Buzz&quot;)
elif i%3 == 0: print(i,&quot;Fizz&quot;)
else: print(i)
&lt;/pre&gt;
Lets put the same into a loop for a range given by the user.
&lt;pre&gt;
def fizzbuzzgame(start,stop):
    for i in range(start,stop+1):
        if i%3 == 0 and i%5 == 0:
            print(i,&quot;FizzBuzz&quot;)
        elif i%5 == 0:
            print(i,&quot;Buzz&quot;)
        elif i%3 == 0:
            print(i,&quot;Fizz&quot;)
        else: print(i)

fizzbuzzgame(50,100)
&lt;/pre&gt;


=== Fizz Buzz game in Interactive mode with Score ===
'''By Ms. Ami Tusharkant Choksi'''
&lt;pre&gt;
def fizzbuzzgame(i):
        if i%3 == 0 and i%5 == 0:
            print(i,&quot;FizzBuzz&quot;)
            return(&quot;fzbz&quot;)
        elif i%5 == 0:
            print(i,&quot;Buzz&quot;)
            return(&quot;bz&quot;)
        elif i%3 == 0:
            print(i,&quot;Fizz&quot;)
            return(&quot;fz&quot;)
        else:
            print(i)
            return(&quot;no&quot;)

ch = 'y'
fizzbuzz=0
fizz=0
buzz=0
nothing=0
print(&quot;&quot;&quot;
 _____  ____  _____  _____  ____   __ __  _____  _____       ____   ____  ___ ___    ___ 
|     ||    ||     ||     ||    \ |  |  ||     ||     |     /    | /    ||   |   |  /  _]
|   __| |  | |__/  ||__/  ||  o  )|  |  ||__/  ||__/  |    |   __||  o  || _   _ | /  [_ 
|  |_   |  | |   __||   __||     ||  |  ||   __||   __|    |  |  ||     ||  \_/  ||    _]
|   _]  |  | |  /  ||  /  ||  O  ||  :  ||  /  ||  /  |    |  |_ ||  _  ||   |   ||   [_ 
|  |    |  | |     ||     ||     ||     ||     ||     |    |     ||  |  ||   |   ||     |
|__|   |____||_____||_____||_____| \__,_||_____||_____|    |___,_||__|__||___|___||_____|
                                                                                         
&quot;&quot;&quot;)   

while(ch == 'y'):
    n=int(input(&quot;Enter a Number : &quot;))
    winLoose=fizzbuzzgame(n)
    if(winLoose == &quot;fz&quot;):
        fizz+=1
    elif(winLoose == &quot;bz&quot;):
        buzz+=1
    elif(winLoose == &quot;fzbz&quot;):
        fizzbuzz+=1
    ch=input(&quot;Do you want to continue playing the game : (y/n)&quot;)
    if(ch=='n'):
        print('Congratulations, your score is\n FizzBuzz:%d\nFizz:%d\nBuzz:%d' %
(fizzbuzz,fizz,buzz))
    
'''Sample Output:

 _____  ____  _____  _____  ____   __ __  _____  _____       ____   ____  ___ ___    ___ 
|     ||    ||     ||     ||    \ |  |  ||     ||     |     /    | /    ||   |   |  /  _]
|   __| |  | |__/  ||__/  ||  o  )|  |  ||__/  ||__/  |    |   __||  o  || _   _ | /  [_ 
|  |_   |  | |   __||   __||     ||  |  ||   __||   __|    |  |  ||     ||  \_/  ||    _]
|   _]  |  | |  /  ||  /  ||  O  ||  :  ||  /  ||  /  |    |  |_ ||  _  ||   |   ||   [_ 
|  |    |  | |     ||     ||     ||     ||     ||     |    |     ||  |  ||   |   ||     |
|__|   |____||_____||_____||_____| \__,_||_____||_____|    |___,_||__|__||___|___||_____|
                                                                                         

Enter a Number : 666
666 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 777
777 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 555
555 FizzBuzz
Do you want to continue playing the game : (y/n)y
Enter a Number : 1
1
Do you want to continue playing the game : (y/n)y
Enter a Number : 789
789 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 25
25 Buzz
Do you want to continue playing the game : (y/n)n
Congratulations, your score is

FizzBuzz:1
Fizz:3
Buzz:1

&lt;/pre&gt;

=Crowd Computing: Just Estimate=
==Wisdom of Crowds==
The concept of ’Wisdom of Crowds’ was proposed by Francis Galton. A weight-judging competition was carried on at the annual show of the West of England Fat Stock and Poultry Exhibition recently held at Plymouth, A fat ox having been selected, competitors bought stamped and numbered cards, each, on which to inscribe their respective names, addresses, and estimates of what the ox would weigh after it had been slaughtered. Those who guessed most successfully received prizes. About 8oo tickets were issued to the par- ticipants. The middlemost estimate of all the estimates recorded was 1207 lbs and the actual weight of the ox was 1198 lbs.

==Our Experiment==
The crowd had to guess the number of candies/gems in a jar. Around 75 people participated in the experiment. The actual number of gems in the jar were 375. The median of all estimates came out to be 300 and the mean of all the estimates came out to be around 396. Median underestimated and mean overestimated the actual value. So according to recent studies, Trimmed mean must be used as an aggregate measure to estimate where Wisdom of Crowds is involved.
[[File:Gemsjar.jpg|center|200px|caption]]

===Trimmed Mean===
In these kinds of experiments, 10% trimmed mean is usually followed. For calculating 10% trimmed mean, remove 10% smallest and 10% largest values from the sample. Calculate the mean of the sample obtained. In the above experiment, the trimmed mean came out to be around 351 which is very close to the actual value.

==Implementation==
Here, we try to demonstrate the concept of trimmed mean through crowd computing.
 Input a list of estimates done by the crowd .
 Sort the list.
 Remove the 10% smallest values.
 Remove the 10% largest values.
 Calculate the mean of the new list obtained .&lt;hr&gt;

==Data of Experiment==       
    Estimates =[1000,1010,1786,2000,1500,1500,100,120,150,150,150,170,175,180,197,200,200,200,200,200,200,220,220,220,220,234,250,250,250,250,250,250,250,250,250,263,270,275,275,286,300,
                300,300,300,300,300,300,300,320,350,350,350,400, 400,400,400,400,450,467,500,500,500,500,500,500,500,550,550,600,600,600,650,700,700,720]

    '''CODE:'''
&lt;pre&gt;
Estimates = [1000,1010,1786,2000,1500,1500,100,120,150,150,150,170,175,180,197,200,200,200,200,200,200,220,220,220,220,234,250,250,250,250,250,250,250,250,250,263,270,275,275,286,300,                300,300,300,300,300,300,300,320,350,350,350,400,400,400,400,400,450,467,500,500,500,500,500,500,500,550,550,600,600,600,650,700,700,720]
Estimates.sort()
offset = int(0.10*len(Estimates))
for i in range(offset):
       del Estimates[0]
       del Estimates[-1]
Sum = 0    
for i in range(len(Estimates)):
       Sum += Estimates[i]
Mean_Value = Sum/len(Estimates)
print(&quot;Mean : &quot;, int(Mean_Value))
#Output:
Mean :  351
&lt;/pre&gt;
&lt;hr&gt;
==Trimmed Mean for the above example== 
&lt;h3&gt;Using scipy library&lt;/h3&gt;
&lt;pre&gt;
#import scipy to use the method of trim_mean
from scipy import stats
trimMean = stats.trim_mean(Estimates, 0.1) # Trim 10% at both ends
print(&quot;Trimmed Mean : &quot;,trimMean)
#Output:
Trimmed Mean :  335.1020408163265
&lt;/pre&gt;

&lt;h3&gt;Without using scipy library&lt;/h3&gt;
&lt;pre&gt;
#Trimmed mean with 10%
p=10/100
#sorted data
data=[2, 4, 6, 7, 11, 21, 81, 90, 105, 121]
n = len(data)
#Remove elements from both end
rem=int(n*p)
newData = data[rem:-rem]
mean = 0
for i in newData:
    mean += i
mean = int(mean/len(newData))
print(&quot;Trimmed mean : &quot;,mean)
#Output: Trimmed mean :  40
&lt;/pre&gt;
[[#Top]]

=Jumbled_Words Permutations: Jumbled Words=
==What are Permutations ?==
A permutation also called ordering of selected number of elements from a list denoted by nPr here we are choosing all elements of a list and so n=r&lt;br&gt;
nPr=n!/(n-r)!&lt;br&gt; as n=r
nPn=n!&lt;br&gt; which gives all possible arrangement of elements present in a list.

 For example, permutations of list [1,2,3] are [1,2,3], [1,3,2], [2,1,3], [2,3,1], 
[3,1,2], and [3,2,1]. 
The number of permutations of a list of elements nPn is given by n!. For example, there are 2! = 2 x 1 = 2 permutations of [1,2], namely [1,2] and [2,1], and 3! = 3 x 2 x 1 = 6 permutations of [1,2,3], as mentioned above.&lt;br/&gt;
[[File:Permutations.jpg]]

==Implementation==
Here, we try to demonstrate the concept of permutations through jumbled words. It is a two player game in which one person presents the other person a different permutation of the word in his mind. The other person has to guess the right word. If he guesses, the he wins otherwise he loses.
 Input an list of words.
 Randomly pick a word from the list of words .
 Shuffle this word and present it to the other player.
 if word guesses by the player is same as the one picked from list of w
     player wins
 else
     player loses

ALTERNATE CODE TO GENERATE THIS GAME:
&lt;pre&gt;
import random
p1=input(&quot;enter player 1 name:&quot;)
p2=input(&quot;enter player 2 name:&quot;)
l=[&quot;rainbow&quot;,&quot;computer&quot;,&quot;robot&quot;,&quot;butter&quot;,&quot;vegetable&quot;,&quot;science&quot;,&quot;correct&quot;]
c1=c2=a1=a2=f1=f2=0
k=1
i=3
def play():
    n=random.choice(l)        ##n=chooses a word from list l
    l1=[]
    for j in n:
       l1.append(j)      ##creates a list for word in n
    for t in range(len(l1)):
       p=random.choice(l1)     ##this randomly displays letters in the list
       print(p)
       l1.remove(p)          ##to avoid the repetition of a letter
    s=input(&quot;enter the word:&quot;)
    if(s==n):
        print(&quot;correct&quot;)
        return 1
    else:
        print(&quot;not correct&quot;)
        print(&quot;answer is&quot;,n)
        return 0
def stat():
     print(&quot;player 1:&quot;)
     print(&quot;score:&quot;,c1)
     print(&quot;answered:&quot;,a1)
     print(&quot;failed:&quot;,f1)
     print(&quot;.............&quot;)
     print(&quot;player 2:&quot;)
     print(&quot;score:&quot;,c2)
     print(&quot;answered:&quot;,a2)
     print(&quot;failed&quot;,f2)
     if(c1&gt;c2):
         print(p1,&quot; won over &quot;,p2)
     elif(c1==c2):
         print(&quot;draw game&quot;)
     else:
         print(p2,&quot; won over &quot;,p1) 
while(i!=4):
      if(i==3):
         if(k==1):
             print(&quot;player 1 turn&quot;)
             print(&quot;your jumbled word is:&quot;)
             k=k+1
             m=play()
             if(m==1):      ##if guessed answer is correct,then score and no.of answered count will be increased
                c1+=1
                a1+=1
             else:
                f1+=1       ##else count of no.of failed to answered will be incremented
         else:
             print(&quot;player 2 turn&quot;)
             print(&quot;your jumbled word is:&quot;)
             k=k-1
             m=play()
             if(m==1):
                c2=c2+1
                a2=a2+1
             else:
                f2=f2+1
       if(i==2):
             print(&quot;present status&quot;)
             stat()
       i=int(input(&quot;enter your choice  1.stop 2.status 3.continue&quot;))
       if(i==1):
             stat()
             i=i+3
&lt;/pre&gt;
&lt;hr&gt;
=== JumbledWord Simple Logic, In Short ===
[[File:jumbledWord.gif]]
&lt;hr&gt;
'''Logic to create a Jumbled Word'''
&lt;hr&gt;
&lt;pre&gt;
#Get Jumbled Word and print it Horizontally
import random

def getJumbledWord(b):
    jumble=''
    l1 = [ b[i] for i in range(0, len(b)) ]
    for t in range(len(l1)):
       p=random.choice(l1)     ##this randomly gets letters from the list      
       jumble=jumble+p       
       l1.remove(p)
    return jumble

b=input(&quot;Enter a word to make it jumbled : &quot;)
print(&quot;Jumbled Word : &quot;, getJumbledWord(b))
&lt;/pre&gt;
&lt;hr&gt;
'''Another Logic to create a Jumbled Word'''
&lt;hr&gt;
&lt;pre&gt;
b=input(&quot;Enter a word to make it jumbled : &quot;)

def getJumbledWord1(b):
    l1 = [ b[i] for i in range(0, len(b)) ]
    random.shuffle(l1)
    str1 = ''.join(l1)
    return str1

print(&quot;Jumbled Word : &quot;, getJumbledWord1(b))
&lt;/pre&gt;

====Sample Output:====
&lt;pre&gt;
---- Output1 
Enter a word to make it jumbled : butter
Jumbled Word :  tbture

---- Output2 
Enter a word to make it jumbled : petriotism
Jumbled Word :  pittrosime
&lt;/pre&gt;

=Theory of Evolution=

== What is Evolution ? ==
Evolution is the change in heritable characteristics over successive generations. The theory of evolution explains that DNA, which acts as a carrier of genetic information from one generation to other, tends to change or mutate occasionally. These changes are reflected in next generations to come. This is how life has evolved on earth from bacteria to human beings.&lt;br&gt;
[[File:Evolution.png|500px]]

== Implementation ==
&lt;pre&gt;An array representing DNA is stored in a file. As genes are forms of DNA, they contain information to be transferred to forthcoming generations. Assume that information is in the form of bits (in the form of 0s and 1s). A number is picked randomly from 1 to the size of the array. A new parameter has been introduced which decides whether mutation would occur or not. If the value of this new parameter is 1 (It is picked randomly from 1 to 100), then only change is reflected down the generations, otherwise it is not. The pseudo code is as follows :
Input an array containing genetic information .
Randomly generate a number (say m) from 1 to length of the array. Randomly generate other number (say p) from 1 to 100.
 
    if p is equal to 1 then 
        if m is 1 then
          set it to 0
        else
          set it to 1
&lt;/pre&gt;
[[#TOP]]</text>
      <sha1>0toygy0cg0790nvpehke3l7og0o8fmy</sha1>
    </revision>
    <revision>
      <id>3566</id>
      <parentid>3565</parentid>
      <timestamp>2018-09-28T02:34:04Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* Conditional Statements */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="29391">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_3 Contributors of this page]
*Week 3 Playlist: https://www.youtube.com/playlist?list=PLc_j0TNIaWxOVx_z9jAM2UB3RqYNXaoEo
=List=
List is a flexible data structure used for storing a group of data separated by comma. The elements in a list need not be of the same data type.

'''Example:'''
       List_1 = [ 1, 2,3] or 
       List_1 = [&quot;coffee&quot;, &quot;Tea&quot;, &quot;Milk&quot;] or
       List_1 = [1,&quot;coffee&quot;, &quot;Tea&quot;, 3, &quot;5&quot;]

==List Creation==
&lt;pre&gt;a) A list can be created by simply putting values (separated by comma) between square brackets as given below,
       List_1 = [1,&quot;coffee&quot;, &quot;Tea&quot;, 3, &quot;5&quot;] #this creates a list by name List_1 containing following items


Or,
(b)A List can be created from scratch and elements can be added 
        List_2 = [ ]
        List_2.append(&quot;Kala&quot;)
        List_2.append(&quot;Mala&quot;)
Here we use &quot;append&quot; ,which is a function in python that enable us to append or attach an element to a list .
Thus List_2 will now hold [&quot;Kala&quot;,&quot;Mala&quot;]
&lt;/pre&gt;
[[#TOP]]

==Operations and Methods to work with List==
&lt;pre&gt;
a = [25,30,50,90,12,13]
b = [100,300,500,200,250]
&lt;/pre&gt;
&lt;hr&gt;
&lt;table border=2&gt;
  &lt;tr&gt;
    &lt;th&gt;&lt;b&gt;Method/&lt;br&gt;Operator&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Function&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Syntax&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Output&lt;/b&gt;&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;len()&lt;/td&gt;
    &lt;td&gt;Find length of a list&lt;/td&gt;
    &lt;td&gt;len(a)&lt;/td&gt;
    &lt;td&gt;6&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;max()&lt;/td&gt;
    &lt;td&gt;Find maximum element from the list&lt;/td&gt;
    &lt;td&gt;max(a)&lt;/td&gt;
    &lt;td&gt;90&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;min()&lt;/td&gt;
    &lt;td&gt;Find minimum element from the list&lt;/td&gt;
    &lt;td&gt;min(a)&lt;/td&gt;
    &lt;td&gt;12&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sum()&lt;/td&gt;
    &lt;td&gt;Returns sum of all elements of the list&lt;/td&gt;
    &lt;td&gt;sum(a)&lt;/td&gt;
    &lt;td&gt;220&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;reverse()&lt;/td&gt;
    &lt;td&gt;Reverses the original list&lt;/td&gt;
    &lt;td&gt;a.reverse()&lt;/td&gt;
    &lt;td&gt;[13, 12, 90, 50, 30, 25]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sort()&lt;/td&gt;
    &lt;td&gt;Sorts the original list in ascending order&lt;/td&gt;
    &lt;td&gt;a.sort()&lt;/td&gt;
    &lt;td&gt;[12, 13, 25, 30, 50, 90]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sorted()&lt;/td&gt;
    &lt;td&gt;Returns the new sorted list &lt;/td&gt;
    &lt;td&gt;sorted(a)&lt;/td&gt;
    &lt;td&gt;[12, 13, 25, 30, 50, 90]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;insert()&lt;/td&gt;
    &lt;td&gt;Insert at a particular index in the list, and shifts remaining elements&lt;/td&gt;
    &lt;td&gt;a.insert(3,3)&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 3, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;append()&lt;/td&gt;
    &lt;td&gt;Adds elements/object to the end of the list&lt;/td&gt;
    &lt;td&gt;a.append(5)&lt;br&gt;a.append([10,20])&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 5]&lt;br&gt;[25, 30, 50, 90, 12, 13, [10, 20]]&lt;br&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;extend()&lt;/td&gt;
    &lt;td&gt;Adds object to the end of the list as elements not as object&lt;/td&gt;
    &lt;td&gt;a.extend([10,20])&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 10, 20]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;*&amp;nbsp;&amp;nbsp;Repeatation&lt;br&gt;operator&lt;/td&gt;
    &lt;td&gt;Repeat the list for n times and returns a new list&lt;/td&gt;
    &lt;td&gt;a*2&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 25, 30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;+ Concatenation&lt;br&gt;operator&lt;/td&gt;
    &lt;td&gt;Concatenates two lists, and returns a new list&lt;/td&gt;
    &lt;td&gt;a+b&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 100, 300, 500, 200, 250]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;index()&lt;/td&gt;
    &lt;td&gt;Finds index of a particular element in the list or not&lt;/td&gt;
    &lt;td&gt;a.index(25)&lt;br&gt;a.index(0)&lt;br&gt;&lt;/td&gt;
    &lt;td&gt;0&lt;br&gt;&lt;br&gt;ValueError: 0 is not in list&lt;br&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;in operator&lt;/td&gt;
    &lt;td&gt;Finds whether a particular element is in the list or not, returns boolean&lt;/td&gt;
    &lt;td&gt;25 in a&lt;/td&gt;
    &lt;td&gt;True&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;not in operator&lt;/td&gt;
    &lt;td&gt;Checks if element is not available in list, returns boolean&lt;/td&gt;
    &lt;td&gt;25 not in a&lt;/td&gt;
    &lt;td&gt;False&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;count()&lt;/td&gt;
    &lt;td&gt;Counts the number of occurence of an element in the list&lt;/td&gt;
    &lt;td&gt;a.count(25)&lt;/td&gt;
    &lt;td&gt;1&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;remove()&lt;/td&gt;
    &lt;td&gt;Removes an element from the list&lt;/td&gt;
    &lt;td&gt;a.remove(25)&lt;/td&gt;
    &lt;td&gt; [30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;pop()&lt;/td&gt;
    &lt;td&gt;Delete and return item at index 0&lt;/td&gt;
    &lt;td&gt;a.pop(0)&lt;/td&gt;
    &lt;td&gt;25 , a will be [30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;del&lt;/td&gt;
    &lt;td&gt;Deletes item at a particular index from the list&lt;/td&gt;
    &lt;td&gt;del a[0]&lt;/td&gt;
    &lt;td&gt;[30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;all()&lt;/td&gt;
&lt;td&gt;Returns True, if all items in list are True or it is an empty list&lt;/td&gt;
&lt;td&gt;all([True, True, True])
all([])
&lt;/td&gt;
&lt;td&gt;True&lt;br&gt;
True&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;any()&lt;/td&gt;
&lt;td&gt;Returns True, if any item in list is True else return False&lt;/td&gt;
&lt;td&gt;any([True, True, True])&lt;br&gt;
any([True, False, True])&lt;br&gt;
any([])&lt;/td&gt;
&lt;td&gt;True&lt;br&gt;False&lt;br&gt;False&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;

==Printing the List==
=== Print whole list ===
A list can be printed simply or using a ''for / while'' loop 

 print(List_2)     # To print the entire list
This code will print      
 ['Kala','Mala']     

===Print element at a particular index===
&lt;pre&gt;
Using index position
    List_2[0]     # prints 'Kala' ,i.e,the value at index position 0.
    List_2[1]     # prints 'Mala'.
&lt;/pre&gt;
=== Without using index position ===
&lt;pre&gt;
for item in List_2:   # here item is a variable used to access elements in list.
       print(item)
   This code snippet prints 
    Kala
    Mala
&lt;/pre&gt;
[[#TOP]]

==Search for a particular element in list==
Elements in a list can be searched by one of the two ways:
=== using index() function===
&lt;pre&gt;
ages1 = [11,23,12,23,45]

#if element is available in the list, index() returns the index value on which, the element is present.
print(ages1.index(45))#Output: 4

#if element is not available in the list, index() returns ''ValueError''
print(ages1.index(0))#Output: ValueError:
&lt;/pre&gt;

In programming, if such error occurs, program gets terminated. It can be solved using exception handling.
e.g.
&lt;pre&gt;
ages1 = [11,23,12,23,45]

try:
    print(ages1.index(0))
except ValueError:
    print(&quot;Exception has occured&quot;)    
    print(&quot;Element is not found in the list&quot;)

&lt;/pre&gt;
&lt;pre&gt;
'''Output: 
Exception has occured
Element is not found in the list
'''&lt;/pre&gt;
[[#TOP]]

=== using 'in' operator===
''in'' operator is used to check whether a particular element is available in the list or not.e.g.

&lt;pre&gt;
ages1 = [11,23,12,23,45]
no=11

if no in ages1:
    print(&quot;no is there in the list&quot;)
else:    
    print(&quot;no is NOT there in the list&quot;)
&lt;/pre&gt;
&lt;pre&gt;
#Output: no is there in the list
&lt;/pre&gt;


'''Number is not there in the list'''
&lt;pre&gt;
ages1 = [11,23,12,23,45]
no=15

if no in ages1:
    print(&quot;no is there in the list&quot;)
else:    
    print(&quot;no is NOT there in the list&quot;)
&lt;/pre&gt;
&lt;pre&gt;
Output: no is NOT there in the list
&lt;/pre&gt;
[[#TOP]]

==Updating the List==
The lists can be updated using ''append'' or ''insert'' function.  Append adds the element to the end of the list and Insert adds the element in the specified position.
&lt;pre&gt;
   # add the element 'Sheela' to the end of the list.
   List_2.append(&quot;Sheela&quot;)    
   print (List_2) will output 
   ['Kala', 'Mala', 'Sheela']
&lt;/pre&gt;
   &lt;pre&gt;
# add the element &quot;Bala&quot; in the list at the index 1.
   List_2.insert(1,&quot;Bala&quot;)    
   print (List_2) will output 
   ['Kala', 'Bala','Mala', 'Sheela']
&lt;/pre&gt;

=== Extend the list by adding elements of other list at end using extend()===
&lt;pre&gt;
ages = [11,23,12,23,45]
ages.extend([57,58])
print(ages)
&lt;/pre&gt;

&lt;pre&gt;
#Output: [11, 23, 12, 23, 45, 57, 58]
&lt;/pre&gt;

==== Difference between ''append and extend'' ====
Difference between append and extend can be easily understood, by the following example.

&lt;pre&gt;
appendlist = [11,23,12,23,45]
appendlist.append([57,58])

extendlist= [11,23,12,23,45]
extendlist.extend([57,58])
&lt;/pre&gt;

&lt;pre&gt;
'''Output:
[11, 23, 12, 23, 45, [57, 58]]
[11, 23, 12, 23, 45, 57, 58]'''
&lt;/pre&gt;

[[#TOP]]

==Basic Operations on List==
===Frequency of Occurrence===
list.count(object) will return the number of times the object occur in the list.
  '''Example'''
    ages = [11,23,12,23,45,43,22,24,23]
    ages.count(23) will return
    3
    ages.count(100) will return
    0

===Length of the List===
len(list) will return the length of the list ie. the number of objects in the list.
  '''Example'''
&lt;pre&gt;
    ages = [11,23,12,23,45,43,22,24,23]
    len(ages) # Output: 9
&lt;/pre&gt;

To print the objects in the list either use ''for item in list'' or ''for index in range(len(list))''
&lt;pre&gt;
    for item in ages:       
        print (item)  
        (OR)
    for index in range(len(ages)) :
        print (ages[index])
&lt;/pre&gt;

===Sort the List===
list.sort() will sort the list in ascending order
  '''Example'''
    ages = [11,23,12,23,45,43,22,24,23]
    ages.sort() 
    print (ages) 
    [11, 12, 22, 23, 23, 23, 24, 43, 45]

[[#TOP]]

===Sort the List using sorted() function===
sorted(list1) will sort the list and return a new list, it doesn't modify the original list
&lt;br&gt;'''Example: Sort in ascending order'''
&lt;pre&gt;
ages = [11,23,12,23,45,43,22,24,23]
newList=sorted(ages)
print(newList)

#Output: [11, 12, 22, 23, 23, 23, 24, 43, 45]
&lt;/pre&gt;

&lt;br&gt;'''Example: Sort in descending order'''
&lt;pre&gt;
ages = [11,23,12,23,45,43,22,24,23]
newList=sorted(ages,reverse=True)
print(newList)

#Output: [45, 43, 24, 23, 23, 23, 22, 12, 11]
&lt;/pre&gt;

===Reverse the List===
list.reverse() will reverse the original list
  '''Example'''
    ages = [11, 12, 22, 23, 23, 23, 24, 43, 45]
    ages.reverse()
    print (ages)
    [45, 43, 24, 23, 23, 23, 22, 12, 11]

Both sort() and reverse() list operation will work on numeric and alphanumeric data list.

A special use of the reverse() function is to descend a list that is sorted in ascending order.

  '''Example'''
&lt;pre&gt;
ages = [11, 12, 22, 23, 23, 23, 24, 43, 45]
ages.sort()
print(ages)
ages.reverse()
print(ages)
&lt;/pre&gt;

===Slicing===
Used to retrieve an object or objects in a range as a list  
  '''Example'''

Use ''list[index]'' to retrieve the object at the given index
&lt;pre&gt;
In [1]: student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
In [2]: student[3]     #Object at index 3.  Remember index starts at 0
Out[2]: 'Geetha'      
&lt;/pre&gt;

Use ''list[start_index : end_index + 1]'' to retrieve objects from the start_index to end_index 
&lt;pre&gt;
In [3]: student[2:4]     # Objects from index 2 to 3 as List. Note the [ and ]
Out[3]: ['Vijay', 'Geetha']   
&lt;/pre&gt;

Use ''list[:]'' to retrieve objects from the starting of the list to the end of the list. 
The default start value will be the starting index of the list (i.e. 0) and the default end value
will be the length of the list 
&lt;pre&gt;
In [4]: student[:]        # prints the entire list
Out[4]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma', 'Janani']
&lt;/pre&gt;
&lt;pre&gt;
In [5]: student[:5]       # prints the objects from the start of the list upto object at index 4
Out[5]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran']
&lt;/pre&gt;
&lt;pre&gt;
In [6]: student[2:]       # prints the objects from index 2 upto the end of the list
Out[6]: ['Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma', 'Janani']
&lt;/pre&gt;

Negative index too is available in Python. It starts from last element of the list. i.e.
&lt;pre&gt;
In [7]:student[-1]        #prints last index of list
Out[7]: 'Janani'
&lt;/pre&gt;
&lt;pre&gt;
In [8]:student[-1:-8]     #prints empty list
Out[8]: []
&lt;/pre&gt;
&lt;pre&gt;
In [9]:student[-8:-1]     #prints -8th index to -1st index elements
Out[9]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma']
&lt;/pre&gt;

[[#TOP]]

===Removing Item from list ===
----

Is used to remove a specific item from the list.

'''Example:'''
 
Use list.remove(entry/value)  Or   del list[index]    Or list.pop(index)
&lt;pre&gt;
student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
student.remove(&quot;Arun&quot;)   #This will delete item &quot;Arun&quot;
         Or    
del student[0]           # This will delete item at index 0
         Or
student.pop(0)         # This will delete and return item at index 0
print(student)    
Output: &quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
&lt;/pre&gt;

[[#TOP]]

===Delete list ===
----
Used to delete complete list

'''Example'''

Use del &lt;list name&gt;
&lt;pre&gt;
student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
del student&lt;/pre&gt;

===Concatenation of two lists===
----
''+'' is the concatenation operator which is used concatenate two lists. 
&lt;pre&gt;
ages1 = [11,23,12,23,45]
ages2 = [25, 24, 43, 47]
age=ages1+ages2
print(age)
#Output: [11, 23, 12, 23, 45, 25, 24, 43, 47]
&lt;/pre&gt;

===Repeatation of a list ===
----
''*'' is the operator to repeat a particular list.
&lt;pre&gt;
ages1 = [11,23,12,23,45]
age=ages1*5 #ages1 list is repeated 5 times and stroed in ''age'' list
print(age)

#Output: [11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45]
&lt;/pre&gt;

=== all and any for List===
all() and any() are special functions to check whether all elements in iterable is ''True'' or any element is ''True''
&lt;ol&gt;
&lt;li&gt;If all elements in a list are ''True'', '''all()''' will return ''True''&lt;/li&gt;
&lt;li&gt;If iterable is ''empty'', '''all()''' will return ''True''&lt;/li&gt;
&lt;li&gt;If iterable contains at least one ''True'', '''any()''' will return ''True''&lt;/li&gt;
&lt;li&gt;If iterable is ''empty'', '''any()''' will return ''False''&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;
lsit=[True, True, True, True]
print(all(lsit))#Output: True
print(any(lsit))#Output: True

lsit1=[True, False, True, True]
print(all(lsit1))#Output: False
print(any(lsit1))#Output: True

lsit2=[False,False,False]
print(all(lsit2))#Output: False
print(any(lsit2))#Output: False

lsit3=[]
print(all(lsit3))#Output: True
print(any(lsit3))#Output: False
&lt;/pre&gt;

==Conditional Statements==
&lt;pre&gt;Conditionals are used to check the condition and change the flow of the program 
accordingly. They are realized in programming languages through if statement. The 
syntax is as follows :
&lt;pre&gt;
         if condition : 
            statement
&lt;/pre&gt;
    '''Note:''' Do not forget indentation (inserting space/tab) in the line after the
 if condition.
    
    In case you want to execute a set of statements when a condition is true and another

set of statement when the condition is false.
         if condition : 
            statement 1
         else :
            statement 2
    
    Multiple if-else statements can be written as follows:
         if condition_1 : 
            statement 1
         elif condition_2 : # 'elif' is short for 'else if'
            statement 2
         elif condition_3 :
            statement 3
        .
        .
         else :
            final statement
&lt;/pre&gt;
[[#TOP]]

=Loops and Conditionals : Fizzbuzz=
====Loops====
&lt;pre&gt;
Loops are used to execute a set of repetitive statements. They are realized
through 'while' and 'for' loops in programming languages. The syntax of 'for' loop is 
as follows :
        for LOOPVARIABLE in SEQUENCE: 
            STATEMENTS
    '''e.g.''' to print all the data from a list we can write:
        for item in list_name
            print(item)
    OR
        for index in range(len(list_name))
            print(list_name[index])
    
    The syntax for while loop is as follows :
    
        while BOOLEANEXPRESSION: 
            STATEMENTS
            INCREMENT/DECREMENT
    
    '''e.g.''' if we want to print all numbers from 1 to 10
        i=1
        while i&lt;=10 :
            print(i,&quot; &quot;)
            i=i+1
    
    'while' loop has indefinite iteration (run-time unknown). So, there must be loop
 break statement in it.
 Whereas 'for' loop is definite in nature (i.e. known or predictable span).&lt;br&gt;

&lt;b&gt;NOTE: Python doesn't have anything like do-while loop.&lt;/b&gt;
&lt;/pre&gt;
[[#TOP]]

==Implementation==
Here, we try to demonstrate the concept of loops and conditionals through a game called Fizzbuzz. The rules are as follows :&lt;br/&gt;
[[File:fizzBuzz.gif]]

• if input number is a multiple of ’3’ print ”Fizz”
&lt;br/&gt;
• if input number is a multiple of ’5’ print ”Buzz”
&lt;br/&gt;
• if input number is a multiple of both '3' and ’5’ print ”FizzBuzz”
&lt;br/&gt;
The pseudo code is as follows :
&lt;pre&gt;
   If input no % 3 == 0 and  input no % 5 == 0 : 
       print ”Fizzbuzz”
   else if input no % 3 == 0 : 
       print ”Fizz”
   else if input no % 5 == 0 : 
       print ”Buzz”
   else :
       print the input no
&lt;/pre&gt;
The order of statements execution matters to get the desired output. The highest priority condition should be first followed by other. In fizzbuzz programming, first checking should be done for both divisibility of 3 and 5. If condition not satisfied only then it should check individually for 3 or 5. So carefully choosing the order is crucial for better programming.
Note: There is some effect of present condition statements chosen on next conditions statements. That is why in first attempt fizzbuzz programming got struck.

Example: 
&lt;pre&gt;
#Code to achieve the above requirement in python3.
i = int(input(&quot;Enter the number&quot;)) 
if i%3 == 0 and i%5 == 0: print(i,&quot;FizzBuzz&quot;)  
elif i%5 == 0: print(i,&quot;Buzz&quot;)
elif i%3 == 0: print(i,&quot;Fizz&quot;)
else: print(i)
&lt;/pre&gt;
Lets put the same into a loop for a range given by the user.
&lt;pre&gt;
def fizzbuzzgame(start,stop):
    for i in range(start,stop+1):
        if i%3 == 0 and i%5 == 0:
            print(i,&quot;FizzBuzz&quot;)
        elif i%5 == 0:
            print(i,&quot;Buzz&quot;)
        elif i%3 == 0:
            print(i,&quot;Fizz&quot;)
        else: print(i)

fizzbuzzgame(50,100)
&lt;/pre&gt;


=== Fizz Buzz game in Interactive mode with Score ===
'''By Ms. Ami Tusharkant Choksi'''
&lt;pre&gt;
def fizzbuzzgame(i):
        if i%3 == 0 and i%5 == 0:
            print(i,&quot;FizzBuzz&quot;)
            return(&quot;fzbz&quot;)
        elif i%5 == 0:
            print(i,&quot;Buzz&quot;)
            return(&quot;bz&quot;)
        elif i%3 == 0:
            print(i,&quot;Fizz&quot;)
            return(&quot;fz&quot;)
        else:
            print(i)
            return(&quot;no&quot;)

ch = 'y'
fizzbuzz=0
fizz=0
buzz=0
nothing=0
print(&quot;&quot;&quot;
 _____  ____  _____  _____  ____   __ __  _____  _____       ____   ____  ___ ___    ___ 
|     ||    ||     ||     ||    \ |  |  ||     ||     |     /    | /    ||   |   |  /  _]
|   __| |  | |__/  ||__/  ||  o  )|  |  ||__/  ||__/  |    |   __||  o  || _   _ | /  [_ 
|  |_   |  | |   __||   __||     ||  |  ||   __||   __|    |  |  ||     ||  \_/  ||    _]
|   _]  |  | |  /  ||  /  ||  O  ||  :  ||  /  ||  /  |    |  |_ ||  _  ||   |   ||   [_ 
|  |    |  | |     ||     ||     ||     ||     ||     |    |     ||  |  ||   |   ||     |
|__|   |____||_____||_____||_____| \__,_||_____||_____|    |___,_||__|__||___|___||_____|
                                                                                         
&quot;&quot;&quot;)   

while(ch == 'y'):
    n=int(input(&quot;Enter a Number : &quot;))
    winLoose=fizzbuzzgame(n)
    if(winLoose == &quot;fz&quot;):
        fizz+=1
    elif(winLoose == &quot;bz&quot;):
        buzz+=1
    elif(winLoose == &quot;fzbz&quot;):
        fizzbuzz+=1
    ch=input(&quot;Do you want to continue playing the game : (y/n)&quot;)
    if(ch=='n'):
        print('Congratulations, your score is\n FizzBuzz:%d\nFizz:%d\nBuzz:%d' %
(fizzbuzz,fizz,buzz))
    
'''Sample Output:

 _____  ____  _____  _____  ____   __ __  _____  _____       ____   ____  ___ ___    ___ 
|     ||    ||     ||     ||    \ |  |  ||     ||     |     /    | /    ||   |   |  /  _]
|   __| |  | |__/  ||__/  ||  o  )|  |  ||__/  ||__/  |    |   __||  o  || _   _ | /  [_ 
|  |_   |  | |   __||   __||     ||  |  ||   __||   __|    |  |  ||     ||  \_/  ||    _]
|   _]  |  | |  /  ||  /  ||  O  ||  :  ||  /  ||  /  |    |  |_ ||  _  ||   |   ||   [_ 
|  |    |  | |     ||     ||     ||     ||     ||     |    |     ||  |  ||   |   ||     |
|__|   |____||_____||_____||_____| \__,_||_____||_____|    |___,_||__|__||___|___||_____|
                                                                                         

Enter a Number : 666
666 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 777
777 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 555
555 FizzBuzz
Do you want to continue playing the game : (y/n)y
Enter a Number : 1
1
Do you want to continue playing the game : (y/n)y
Enter a Number : 789
789 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 25
25 Buzz
Do you want to continue playing the game : (y/n)n
Congratulations, your score is

FizzBuzz:1
Fizz:3
Buzz:1

&lt;/pre&gt;

=Crowd Computing: Just Estimate=
==Wisdom of Crowds==
The concept of ’Wisdom of Crowds’ was proposed by Francis Galton. A weight-judging competition was carried on at the annual show of the West of England Fat Stock and Poultry Exhibition recently held at Plymouth, A fat ox having been selected, competitors bought stamped and numbered cards, each, on which to inscribe their respective names, addresses, and estimates of what the ox would weigh after it had been slaughtered. Those who guessed most successfully received prizes. About 8oo tickets were issued to the par- ticipants. The middlemost estimate of all the estimates recorded was 1207 lbs and the actual weight of the ox was 1198 lbs.

==Our Experiment==
The crowd had to guess the number of candies/gems in a jar. Around 75 people participated in the experiment. The actual number of gems in the jar were 375. The median of all estimates came out to be 300 and the mean of all the estimates came out to be around 396. Median underestimated and mean overestimated the actual value. So according to recent studies, Trimmed mean must be used as an aggregate measure to estimate where Wisdom of Crowds is involved.
[[File:Gemsjar.jpg|center|200px|caption]]

===Trimmed Mean===
In these kinds of experiments, 10% trimmed mean is usually followed. For calculating 10% trimmed mean, remove 10% smallest and 10% largest values from the sample. Calculate the mean of the sample obtained. In the above experiment, the trimmed mean came out to be around 351 which is very close to the actual value.

==Implementation==
Here, we try to demonstrate the concept of trimmed mean through crowd computing.
 Input a list of estimates done by the crowd .
 Sort the list.
 Remove the 10% smallest values.
 Remove the 10% largest values.
 Calculate the mean of the new list obtained .&lt;hr&gt;

==Data of Experiment==       
    Estimates =[1000,1010,1786,2000,1500,1500,100,120,150,150,150,170,175,180,197,200,200,200,200,200,200,220,220,220,220,234,250,250,250,250,250,250,250,250,250,263,270,275,275,286,300,
                300,300,300,300,300,300,300,320,350,350,350,400, 400,400,400,400,450,467,500,500,500,500,500,500,500,550,550,600,600,600,650,700,700,720]

    '''CODE:'''
&lt;pre&gt;
Estimates = [1000,1010,1786,2000,1500,1500,100,120,150,150,150,170,175,180,197,200,200,200,200,200,200,220,220,220,220,234,250,250,250,250,250,250,250,250,250,263,270,275,275,286,300,                300,300,300,300,300,300,300,320,350,350,350,400,400,400,400,400,450,467,500,500,500,500,500,500,500,550,550,600,600,600,650,700,700,720]
Estimates.sort()
offset = int(0.10*len(Estimates))
for i in range(offset):
       del Estimates[0]
       del Estimates[-1]
Sum = 0    
for i in range(len(Estimates)):
       Sum += Estimates[i]
Mean_Value = Sum/len(Estimates)
print(&quot;Mean : &quot;, int(Mean_Value))
#Output:
Mean :  351
&lt;/pre&gt;
&lt;hr&gt;
==Trimmed Mean for the above example== 
&lt;h3&gt;Using scipy library&lt;/h3&gt;
&lt;pre&gt;
#import scipy to use the method of trim_mean
from scipy import stats
trimMean = stats.trim_mean(Estimates, 0.1) # Trim 10% at both ends
print(&quot;Trimmed Mean : &quot;,trimMean)
#Output:
Trimmed Mean :  335.1020408163265
&lt;/pre&gt;

&lt;h3&gt;Without using scipy library&lt;/h3&gt;
&lt;pre&gt;
#Trimmed mean with 10%
p=10/100
#sorted data
data=[2, 4, 6, 7, 11, 21, 81, 90, 105, 121]
n = len(data)
#Remove elements from both end
rem=int(n*p)
newData = data[rem:-rem]
mean = 0
for i in newData:
    mean += i
mean = int(mean/len(newData))
print(&quot;Trimmed mean : &quot;,mean)
#Output: Trimmed mean :  40
&lt;/pre&gt;
[[#Top]]

=Jumbled_Words Permutations: Jumbled Words=
==What are Permutations ?==
A permutation also called ordering of selected number of elements from a list denoted by nPr here we are choosing all elements of a list and so n=r&lt;br&gt;
nPr=n!/(n-r)!&lt;br&gt; as n=r
nPn=n!&lt;br&gt; which gives all possible arrangement of elements present in a list.

 For example, permutations of list [1,2,3] are [1,2,3], [1,3,2], [2,1,3], [2,3,1], 
[3,1,2], and [3,2,1]. 
The number of permutations of a list of elements nPn is given by n!. For example, there are 2! = 2 x 1 = 2 permutations of [1,2], namely [1,2] and [2,1], and 3! = 3 x 2 x 1 = 6 permutations of [1,2,3], as mentioned above.&lt;br/&gt;
[[File:Permutations.jpg]]

==Implementation==
Here, we try to demonstrate the concept of permutations through jumbled words. It is a two player game in which one person presents the other person a different permutation of the word in his mind. The other person has to guess the right word. If he guesses, the he wins otherwise he loses.
 Input an list of words.
 Randomly pick a word from the list of words .
 Shuffle this word and present it to the other player.
 if word guesses by the player is same as the one picked from list of w
     player wins
 else
     player loses

ALTERNATE CODE TO GENERATE THIS GAME:
&lt;pre&gt;
import random
p1=input(&quot;enter player 1 name:&quot;)
p2=input(&quot;enter player 2 name:&quot;)
l=[&quot;rainbow&quot;,&quot;computer&quot;,&quot;robot&quot;,&quot;butter&quot;,&quot;vegetable&quot;,&quot;science&quot;,&quot;correct&quot;]
c1=c2=a1=a2=f1=f2=0
k=1
i=3
def play():
    n=random.choice(l)        ##n=chooses a word from list l
    l1=[]
    for j in n:
       l1.append(j)      ##creates a list for word in n
    for t in range(len(l1)):
       p=random.choice(l1)     ##this randomly displays letters in the list
       print(p)
       l1.remove(p)          ##to avoid the repetition of a letter
    s=input(&quot;enter the word:&quot;)
    if(s==n):
        print(&quot;correct&quot;)
        return 1
    else:
        print(&quot;not correct&quot;)
        print(&quot;answer is&quot;,n)
        return 0
def stat():
     print(&quot;player 1:&quot;)
     print(&quot;score:&quot;,c1)
     print(&quot;answered:&quot;,a1)
     print(&quot;failed:&quot;,f1)
     print(&quot;.............&quot;)
     print(&quot;player 2:&quot;)
     print(&quot;score:&quot;,c2)
     print(&quot;answered:&quot;,a2)
     print(&quot;failed&quot;,f2)
     if(c1&gt;c2):
         print(p1,&quot; won over &quot;,p2)
     elif(c1==c2):
         print(&quot;draw game&quot;)
     else:
         print(p2,&quot; won over &quot;,p1) 
while(i!=4):
      if(i==3):
         if(k==1):
             print(&quot;player 1 turn&quot;)
             print(&quot;your jumbled word is:&quot;)
             k=k+1
             m=play()
             if(m==1):      ##if guessed answer is correct,then score and no.of answered count will be increased
                c1+=1
                a1+=1
             else:
                f1+=1       ##else count of no.of failed to answered will be incremented
         else:
             print(&quot;player 2 turn&quot;)
             print(&quot;your jumbled word is:&quot;)
             k=k-1
             m=play()
             if(m==1):
                c2=c2+1
                a2=a2+1
             else:
                f2=f2+1
       if(i==2):
             print(&quot;present status&quot;)
             stat()
       i=int(input(&quot;enter your choice  1.stop 2.status 3.continue&quot;))
       if(i==1):
             stat()
             i=i+3
&lt;/pre&gt;
&lt;hr&gt;
=== JumbledWord Simple Logic, In Short ===
[[File:jumbledWord.gif]]
&lt;hr&gt;
'''Logic to create a Jumbled Word'''
&lt;hr&gt;
&lt;pre&gt;
#Get Jumbled Word and print it Horizontally
import random

def getJumbledWord(b):
    jumble=''
    l1 = [ b[i] for i in range(0, len(b)) ]
    for t in range(len(l1)):
       p=random.choice(l1)     ##this randomly gets letters from the list      
       jumble=jumble+p       
       l1.remove(p)
    return jumble

b=input(&quot;Enter a word to make it jumbled : &quot;)
print(&quot;Jumbled Word : &quot;, getJumbledWord(b))
&lt;/pre&gt;
&lt;hr&gt;
'''Another Logic to create a Jumbled Word'''
&lt;hr&gt;
&lt;pre&gt;
b=input(&quot;Enter a word to make it jumbled : &quot;)

def getJumbledWord1(b):
    l1 = [ b[i] for i in range(0, len(b)) ]
    random.shuffle(l1)
    str1 = ''.join(l1)
    return str1

print(&quot;Jumbled Word : &quot;, getJumbledWord1(b))
&lt;/pre&gt;

====Sample Output:====
&lt;pre&gt;
---- Output1 
Enter a word to make it jumbled : butter
Jumbled Word :  tbture

---- Output2 
Enter a word to make it jumbled : petriotism
Jumbled Word :  pittrosime
&lt;/pre&gt;

=Theory of Evolution=

== What is Evolution ? ==
Evolution is the change in heritable characteristics over successive generations. The theory of evolution explains that DNA, which acts as a carrier of genetic information from one generation to other, tends to change or mutate occasionally. These changes are reflected in next generations to come. This is how life has evolved on earth from bacteria to human beings.&lt;br&gt;
[[File:Evolution.png|500px]]

== Implementation ==
&lt;pre&gt;An array representing DNA is stored in a file. As genes are forms of DNA, they contain information to be transferred to forthcoming generations. Assume that information is in the form of bits (in the form of 0s and 1s). A number is picked randomly from 1 to the size of the array. A new parameter has been introduced which decides whether mutation would occur or not. If the value of this new parameter is 1 (It is picked randomly from 1 to 100), then only change is reflected down the generations, otherwise it is not. The pseudo code is as follows :
Input an array containing genetic information .
Randomly generate a number (say m) from 1 to length of the array. Randomly generate other number (say p) from 1 to 100.
 
    if p is equal to 1 then 
        if m is 1 then
          set it to 0
        else
          set it to 1
&lt;/pre&gt;
[[#TOP]]</text>
      <sha1>bd0n0o0j3knwsi8tjznz770rybpw9jj</sha1>
    </revision>
    <revision>
      <id>3567</id>
      <parentid>3566</parentid>
      <timestamp>2018-09-28T02:34:42Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* Conditional Statements */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="29411">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_3 Contributors of this page]
*Week 3 Playlist: https://www.youtube.com/playlist?list=PLc_j0TNIaWxOVx_z9jAM2UB3RqYNXaoEo
=List=
List is a flexible data structure used for storing a group of data separated by comma. The elements in a list need not be of the same data type.

'''Example:'''
       List_1 = [ 1, 2,3] or 
       List_1 = [&quot;coffee&quot;, &quot;Tea&quot;, &quot;Milk&quot;] or
       List_1 = [1,&quot;coffee&quot;, &quot;Tea&quot;, 3, &quot;5&quot;]

==List Creation==
&lt;pre&gt;a) A list can be created by simply putting values (separated by comma) between square brackets as given below,
       List_1 = [1,&quot;coffee&quot;, &quot;Tea&quot;, 3, &quot;5&quot;] #this creates a list by name List_1 containing following items


Or,
(b)A List can be created from scratch and elements can be added 
        List_2 = [ ]
        List_2.append(&quot;Kala&quot;)
        List_2.append(&quot;Mala&quot;)
Here we use &quot;append&quot; ,which is a function in python that enable us to append or attach an element to a list .
Thus List_2 will now hold [&quot;Kala&quot;,&quot;Mala&quot;]
&lt;/pre&gt;
[[#TOP]]

==Operations and Methods to work with List==
&lt;pre&gt;
a = [25,30,50,90,12,13]
b = [100,300,500,200,250]
&lt;/pre&gt;
&lt;hr&gt;
&lt;table border=2&gt;
  &lt;tr&gt;
    &lt;th&gt;&lt;b&gt;Method/&lt;br&gt;Operator&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Function&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Syntax&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Output&lt;/b&gt;&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;len()&lt;/td&gt;
    &lt;td&gt;Find length of a list&lt;/td&gt;
    &lt;td&gt;len(a)&lt;/td&gt;
    &lt;td&gt;6&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;max()&lt;/td&gt;
    &lt;td&gt;Find maximum element from the list&lt;/td&gt;
    &lt;td&gt;max(a)&lt;/td&gt;
    &lt;td&gt;90&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;min()&lt;/td&gt;
    &lt;td&gt;Find minimum element from the list&lt;/td&gt;
    &lt;td&gt;min(a)&lt;/td&gt;
    &lt;td&gt;12&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sum()&lt;/td&gt;
    &lt;td&gt;Returns sum of all elements of the list&lt;/td&gt;
    &lt;td&gt;sum(a)&lt;/td&gt;
    &lt;td&gt;220&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;reverse()&lt;/td&gt;
    &lt;td&gt;Reverses the original list&lt;/td&gt;
    &lt;td&gt;a.reverse()&lt;/td&gt;
    &lt;td&gt;[13, 12, 90, 50, 30, 25]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sort()&lt;/td&gt;
    &lt;td&gt;Sorts the original list in ascending order&lt;/td&gt;
    &lt;td&gt;a.sort()&lt;/td&gt;
    &lt;td&gt;[12, 13, 25, 30, 50, 90]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sorted()&lt;/td&gt;
    &lt;td&gt;Returns the new sorted list &lt;/td&gt;
    &lt;td&gt;sorted(a)&lt;/td&gt;
    &lt;td&gt;[12, 13, 25, 30, 50, 90]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;insert()&lt;/td&gt;
    &lt;td&gt;Insert at a particular index in the list, and shifts remaining elements&lt;/td&gt;
    &lt;td&gt;a.insert(3,3)&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 3, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;append()&lt;/td&gt;
    &lt;td&gt;Adds elements/object to the end of the list&lt;/td&gt;
    &lt;td&gt;a.append(5)&lt;br&gt;a.append([10,20])&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 5]&lt;br&gt;[25, 30, 50, 90, 12, 13, [10, 20]]&lt;br&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;extend()&lt;/td&gt;
    &lt;td&gt;Adds object to the end of the list as elements not as object&lt;/td&gt;
    &lt;td&gt;a.extend([10,20])&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 10, 20]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;*&amp;nbsp;&amp;nbsp;Repeatation&lt;br&gt;operator&lt;/td&gt;
    &lt;td&gt;Repeat the list for n times and returns a new list&lt;/td&gt;
    &lt;td&gt;a*2&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 25, 30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;+ Concatenation&lt;br&gt;operator&lt;/td&gt;
    &lt;td&gt;Concatenates two lists, and returns a new list&lt;/td&gt;
    &lt;td&gt;a+b&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 100, 300, 500, 200, 250]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;index()&lt;/td&gt;
    &lt;td&gt;Finds index of a particular element in the list or not&lt;/td&gt;
    &lt;td&gt;a.index(25)&lt;br&gt;a.index(0)&lt;br&gt;&lt;/td&gt;
    &lt;td&gt;0&lt;br&gt;&lt;br&gt;ValueError: 0 is not in list&lt;br&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;in operator&lt;/td&gt;
    &lt;td&gt;Finds whether a particular element is in the list or not, returns boolean&lt;/td&gt;
    &lt;td&gt;25 in a&lt;/td&gt;
    &lt;td&gt;True&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;not in operator&lt;/td&gt;
    &lt;td&gt;Checks if element is not available in list, returns boolean&lt;/td&gt;
    &lt;td&gt;25 not in a&lt;/td&gt;
    &lt;td&gt;False&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;count()&lt;/td&gt;
    &lt;td&gt;Counts the number of occurence of an element in the list&lt;/td&gt;
    &lt;td&gt;a.count(25)&lt;/td&gt;
    &lt;td&gt;1&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;remove()&lt;/td&gt;
    &lt;td&gt;Removes an element from the list&lt;/td&gt;
    &lt;td&gt;a.remove(25)&lt;/td&gt;
    &lt;td&gt; [30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;pop()&lt;/td&gt;
    &lt;td&gt;Delete and return item at index 0&lt;/td&gt;
    &lt;td&gt;a.pop(0)&lt;/td&gt;
    &lt;td&gt;25 , a will be [30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;del&lt;/td&gt;
    &lt;td&gt;Deletes item at a particular index from the list&lt;/td&gt;
    &lt;td&gt;del a[0]&lt;/td&gt;
    &lt;td&gt;[30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;all()&lt;/td&gt;
&lt;td&gt;Returns True, if all items in list are True or it is an empty list&lt;/td&gt;
&lt;td&gt;all([True, True, True])
all([])
&lt;/td&gt;
&lt;td&gt;True&lt;br&gt;
True&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;any()&lt;/td&gt;
&lt;td&gt;Returns True, if any item in list is True else return False&lt;/td&gt;
&lt;td&gt;any([True, True, True])&lt;br&gt;
any([True, False, True])&lt;br&gt;
any([])&lt;/td&gt;
&lt;td&gt;True&lt;br&gt;False&lt;br&gt;False&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;

==Printing the List==
=== Print whole list ===
A list can be printed simply or using a ''for / while'' loop 

 print(List_2)     # To print the entire list
This code will print      
 ['Kala','Mala']     

===Print element at a particular index===
&lt;pre&gt;
Using index position
    List_2[0]     # prints 'Kala' ,i.e,the value at index position 0.
    List_2[1]     # prints 'Mala'.
&lt;/pre&gt;
=== Without using index position ===
&lt;pre&gt;
for item in List_2:   # here item is a variable used to access elements in list.
       print(item)
   This code snippet prints 
    Kala
    Mala
&lt;/pre&gt;
[[#TOP]]

==Search for a particular element in list==
Elements in a list can be searched by one of the two ways:
=== using index() function===
&lt;pre&gt;
ages1 = [11,23,12,23,45]

#if element is available in the list, index() returns the index value on which, the element is present.
print(ages1.index(45))#Output: 4

#if element is not available in the list, index() returns ''ValueError''
print(ages1.index(0))#Output: ValueError:
&lt;/pre&gt;

In programming, if such error occurs, program gets terminated. It can be solved using exception handling.
e.g.
&lt;pre&gt;
ages1 = [11,23,12,23,45]

try:
    print(ages1.index(0))
except ValueError:
    print(&quot;Exception has occured&quot;)    
    print(&quot;Element is not found in the list&quot;)

&lt;/pre&gt;
&lt;pre&gt;
'''Output: 
Exception has occured
Element is not found in the list
'''&lt;/pre&gt;
[[#TOP]]

=== using 'in' operator===
''in'' operator is used to check whether a particular element is available in the list or not.e.g.

&lt;pre&gt;
ages1 = [11,23,12,23,45]
no=11

if no in ages1:
    print(&quot;no is there in the list&quot;)
else:    
    print(&quot;no is NOT there in the list&quot;)
&lt;/pre&gt;
&lt;pre&gt;
#Output: no is there in the list
&lt;/pre&gt;


'''Number is not there in the list'''
&lt;pre&gt;
ages1 = [11,23,12,23,45]
no=15

if no in ages1:
    print(&quot;no is there in the list&quot;)
else:    
    print(&quot;no is NOT there in the list&quot;)
&lt;/pre&gt;
&lt;pre&gt;
Output: no is NOT there in the list
&lt;/pre&gt;
[[#TOP]]

==Updating the List==
The lists can be updated using ''append'' or ''insert'' function.  Append adds the element to the end of the list and Insert adds the element in the specified position.
&lt;pre&gt;
   # add the element 'Sheela' to the end of the list.
   List_2.append(&quot;Sheela&quot;)    
   print (List_2) will output 
   ['Kala', 'Mala', 'Sheela']
&lt;/pre&gt;
   &lt;pre&gt;
# add the element &quot;Bala&quot; in the list at the index 1.
   List_2.insert(1,&quot;Bala&quot;)    
   print (List_2) will output 
   ['Kala', 'Bala','Mala', 'Sheela']
&lt;/pre&gt;

=== Extend the list by adding elements of other list at end using extend()===
&lt;pre&gt;
ages = [11,23,12,23,45]
ages.extend([57,58])
print(ages)
&lt;/pre&gt;

&lt;pre&gt;
#Output: [11, 23, 12, 23, 45, 57, 58]
&lt;/pre&gt;

==== Difference between ''append and extend'' ====
Difference between append and extend can be easily understood, by the following example.

&lt;pre&gt;
appendlist = [11,23,12,23,45]
appendlist.append([57,58])

extendlist= [11,23,12,23,45]
extendlist.extend([57,58])
&lt;/pre&gt;

&lt;pre&gt;
'''Output:
[11, 23, 12, 23, 45, [57, 58]]
[11, 23, 12, 23, 45, 57, 58]'''
&lt;/pre&gt;

[[#TOP]]

==Basic Operations on List==
===Frequency of Occurrence===
list.count(object) will return the number of times the object occur in the list.
  '''Example'''
    ages = [11,23,12,23,45,43,22,24,23]
    ages.count(23) will return
    3
    ages.count(100) will return
    0

===Length of the List===
len(list) will return the length of the list ie. the number of objects in the list.
  '''Example'''
&lt;pre&gt;
    ages = [11,23,12,23,45,43,22,24,23]
    len(ages) # Output: 9
&lt;/pre&gt;

To print the objects in the list either use ''for item in list'' or ''for index in range(len(list))''
&lt;pre&gt;
    for item in ages:       
        print (item)  
        (OR)
    for index in range(len(ages)) :
        print (ages[index])
&lt;/pre&gt;

===Sort the List===
list.sort() will sort the list in ascending order
  '''Example'''
    ages = [11,23,12,23,45,43,22,24,23]
    ages.sort() 
    print (ages) 
    [11, 12, 22, 23, 23, 23, 24, 43, 45]

[[#TOP]]

===Sort the List using sorted() function===
sorted(list1) will sort the list and return a new list, it doesn't modify the original list
&lt;br&gt;'''Example: Sort in ascending order'''
&lt;pre&gt;
ages = [11,23,12,23,45,43,22,24,23]
newList=sorted(ages)
print(newList)

#Output: [11, 12, 22, 23, 23, 23, 24, 43, 45]
&lt;/pre&gt;

&lt;br&gt;'''Example: Sort in descending order'''
&lt;pre&gt;
ages = [11,23,12,23,45,43,22,24,23]
newList=sorted(ages,reverse=True)
print(newList)

#Output: [45, 43, 24, 23, 23, 23, 22, 12, 11]
&lt;/pre&gt;

===Reverse the List===
list.reverse() will reverse the original list
  '''Example'''
    ages = [11, 12, 22, 23, 23, 23, 24, 43, 45]
    ages.reverse()
    print (ages)
    [45, 43, 24, 23, 23, 23, 22, 12, 11]

Both sort() and reverse() list operation will work on numeric and alphanumeric data list.

A special use of the reverse() function is to descend a list that is sorted in ascending order.

  '''Example'''
&lt;pre&gt;
ages = [11, 12, 22, 23, 23, 23, 24, 43, 45]
ages.sort()
print(ages)
ages.reverse()
print(ages)
&lt;/pre&gt;

===Slicing===
Used to retrieve an object or objects in a range as a list  
  '''Example'''

Use ''list[index]'' to retrieve the object at the given index
&lt;pre&gt;
In [1]: student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
In [2]: student[3]     #Object at index 3.  Remember index starts at 0
Out[2]: 'Geetha'      
&lt;/pre&gt;

Use ''list[start_index : end_index + 1]'' to retrieve objects from the start_index to end_index 
&lt;pre&gt;
In [3]: student[2:4]     # Objects from index 2 to 3 as List. Note the [ and ]
Out[3]: ['Vijay', 'Geetha']   
&lt;/pre&gt;

Use ''list[:]'' to retrieve objects from the starting of the list to the end of the list. 
The default start value will be the starting index of the list (i.e. 0) and the default end value
will be the length of the list 
&lt;pre&gt;
In [4]: student[:]        # prints the entire list
Out[4]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma', 'Janani']
&lt;/pre&gt;
&lt;pre&gt;
In [5]: student[:5]       # prints the objects from the start of the list upto object at index 4
Out[5]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran']
&lt;/pre&gt;
&lt;pre&gt;
In [6]: student[2:]       # prints the objects from index 2 upto the end of the list
Out[6]: ['Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma', 'Janani']
&lt;/pre&gt;

Negative index too is available in Python. It starts from last element of the list. i.e.
&lt;pre&gt;
In [7]:student[-1]        #prints last index of list
Out[7]: 'Janani'
&lt;/pre&gt;
&lt;pre&gt;
In [8]:student[-1:-8]     #prints empty list
Out[8]: []
&lt;/pre&gt;
&lt;pre&gt;
In [9]:student[-8:-1]     #prints -8th index to -1st index elements
Out[9]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma']
&lt;/pre&gt;

[[#TOP]]

===Removing Item from list ===
----

Is used to remove a specific item from the list.

'''Example:'''
 
Use list.remove(entry/value)  Or   del list[index]    Or list.pop(index)
&lt;pre&gt;
student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
student.remove(&quot;Arun&quot;)   #This will delete item &quot;Arun&quot;
         Or    
del student[0]           # This will delete item at index 0
         Or
student.pop(0)         # This will delete and return item at index 0
print(student)    
Output: &quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
&lt;/pre&gt;

[[#TOP]]

===Delete list ===
----
Used to delete complete list

'''Example'''

Use del &lt;list name&gt;
&lt;pre&gt;
student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
del student&lt;/pre&gt;

===Concatenation of two lists===
----
''+'' is the concatenation operator which is used concatenate two lists. 
&lt;pre&gt;
ages1 = [11,23,12,23,45]
ages2 = [25, 24, 43, 47]
age=ages1+ages2
print(age)
#Output: [11, 23, 12, 23, 45, 25, 24, 43, 47]
&lt;/pre&gt;

===Repeatation of a list ===
----
''*'' is the operator to repeat a particular list.
&lt;pre&gt;
ages1 = [11,23,12,23,45]
age=ages1*5 #ages1 list is repeated 5 times and stroed in ''age'' list
print(age)

#Output: [11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45]
&lt;/pre&gt;

=== all and any for List===
all() and any() are special functions to check whether all elements in iterable is ''True'' or any element is ''True''
&lt;ol&gt;
&lt;li&gt;If all elements in a list are ''True'', '''all()''' will return ''True''&lt;/li&gt;
&lt;li&gt;If iterable is ''empty'', '''all()''' will return ''True''&lt;/li&gt;
&lt;li&gt;If iterable contains at least one ''True'', '''any()''' will return ''True''&lt;/li&gt;
&lt;li&gt;If iterable is ''empty'', '''any()''' will return ''False''&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;
lsit=[True, True, True, True]
print(all(lsit))#Output: True
print(any(lsit))#Output: True

lsit1=[True, False, True, True]
print(all(lsit1))#Output: False
print(any(lsit1))#Output: True

lsit2=[False,False,False]
print(all(lsit2))#Output: False
print(any(lsit2))#Output: False

lsit3=[]
print(all(lsit3))#Output: True
print(any(lsit3))#Output: False
&lt;/pre&gt;

==Conditional Statements==
&lt;pre&gt;Conditionals are used to check the condition and change the flow of the program 
accordingly. They are realized in programming languages through if statement. The 
syntax is as follows :
&lt;pre&gt;
         if condition : 
            statement
&lt;/pre&gt;
    '''Note:''' Do not forget indentation (inserting space/tab) in the line after the
 if condition.
    
    In case you want to execute a set of statements when a condition is true and another

set of statement when the condition is false.
&lt;pre&gt;
         if condition : 
            statement 1
         else :
            statement 2
&lt;/pre&gt;

&lt;pre&gt;    
    Multiple if-else statements can be written as follows:
         if condition_1 : 
            statement 1
         elif condition_2 : # 'elif' is short for 'else if'
            statement 2
         elif condition_3 :
            statement 3
        .
        .
         else :
            final statement
&lt;/pre&gt;

[[#TOP]]

=Loops and Conditionals : Fizzbuzz=
====Loops====
&lt;pre&gt;
Loops are used to execute a set of repetitive statements. They are realized
through 'while' and 'for' loops in programming languages. The syntax of 'for' loop is 
as follows :
        for LOOPVARIABLE in SEQUENCE: 
            STATEMENTS
    '''e.g.''' to print all the data from a list we can write:
        for item in list_name
            print(item)
    OR
        for index in range(len(list_name))
            print(list_name[index])
    
    The syntax for while loop is as follows :
    
        while BOOLEANEXPRESSION: 
            STATEMENTS
            INCREMENT/DECREMENT
    
    '''e.g.''' if we want to print all numbers from 1 to 10
        i=1
        while i&lt;=10 :
            print(i,&quot; &quot;)
            i=i+1
    
    'while' loop has indefinite iteration (run-time unknown). So, there must be loop
 break statement in it.
 Whereas 'for' loop is definite in nature (i.e. known or predictable span).&lt;br&gt;

&lt;b&gt;NOTE: Python doesn't have anything like do-while loop.&lt;/b&gt;
&lt;/pre&gt;
[[#TOP]]

==Implementation==
Here, we try to demonstrate the concept of loops and conditionals through a game called Fizzbuzz. The rules are as follows :&lt;br/&gt;
[[File:fizzBuzz.gif]]

• if input number is a multiple of ’3’ print ”Fizz”
&lt;br/&gt;
• if input number is a multiple of ’5’ print ”Buzz”
&lt;br/&gt;
• if input number is a multiple of both '3' and ’5’ print ”FizzBuzz”
&lt;br/&gt;
The pseudo code is as follows :
&lt;pre&gt;
   If input no % 3 == 0 and  input no % 5 == 0 : 
       print ”Fizzbuzz”
   else if input no % 3 == 0 : 
       print ”Fizz”
   else if input no % 5 == 0 : 
       print ”Buzz”
   else :
       print the input no
&lt;/pre&gt;
The order of statements execution matters to get the desired output. The highest priority condition should be first followed by other. In fizzbuzz programming, first checking should be done for both divisibility of 3 and 5. If condition not satisfied only then it should check individually for 3 or 5. So carefully choosing the order is crucial for better programming.
Note: There is some effect of present condition statements chosen on next conditions statements. That is why in first attempt fizzbuzz programming got struck.

Example: 
&lt;pre&gt;
#Code to achieve the above requirement in python3.
i = int(input(&quot;Enter the number&quot;)) 
if i%3 == 0 and i%5 == 0: print(i,&quot;FizzBuzz&quot;)  
elif i%5 == 0: print(i,&quot;Buzz&quot;)
elif i%3 == 0: print(i,&quot;Fizz&quot;)
else: print(i)
&lt;/pre&gt;
Lets put the same into a loop for a range given by the user.
&lt;pre&gt;
def fizzbuzzgame(start,stop):
    for i in range(start,stop+1):
        if i%3 == 0 and i%5 == 0:
            print(i,&quot;FizzBuzz&quot;)
        elif i%5 == 0:
            print(i,&quot;Buzz&quot;)
        elif i%3 == 0:
            print(i,&quot;Fizz&quot;)
        else: print(i)

fizzbuzzgame(50,100)
&lt;/pre&gt;


=== Fizz Buzz game in Interactive mode with Score ===
'''By Ms. Ami Tusharkant Choksi'''
&lt;pre&gt;
def fizzbuzzgame(i):
        if i%3 == 0 and i%5 == 0:
            print(i,&quot;FizzBuzz&quot;)
            return(&quot;fzbz&quot;)
        elif i%5 == 0:
            print(i,&quot;Buzz&quot;)
            return(&quot;bz&quot;)
        elif i%3 == 0:
            print(i,&quot;Fizz&quot;)
            return(&quot;fz&quot;)
        else:
            print(i)
            return(&quot;no&quot;)

ch = 'y'
fizzbuzz=0
fizz=0
buzz=0
nothing=0
print(&quot;&quot;&quot;
 _____  ____  _____  _____  ____   __ __  _____  _____       ____   ____  ___ ___    ___ 
|     ||    ||     ||     ||    \ |  |  ||     ||     |     /    | /    ||   |   |  /  _]
|   __| |  | |__/  ||__/  ||  o  )|  |  ||__/  ||__/  |    |   __||  o  || _   _ | /  [_ 
|  |_   |  | |   __||   __||     ||  |  ||   __||   __|    |  |  ||     ||  \_/  ||    _]
|   _]  |  | |  /  ||  /  ||  O  ||  :  ||  /  ||  /  |    |  |_ ||  _  ||   |   ||   [_ 
|  |    |  | |     ||     ||     ||     ||     ||     |    |     ||  |  ||   |   ||     |
|__|   |____||_____||_____||_____| \__,_||_____||_____|    |___,_||__|__||___|___||_____|
                                                                                         
&quot;&quot;&quot;)   

while(ch == 'y'):
    n=int(input(&quot;Enter a Number : &quot;))
    winLoose=fizzbuzzgame(n)
    if(winLoose == &quot;fz&quot;):
        fizz+=1
    elif(winLoose == &quot;bz&quot;):
        buzz+=1
    elif(winLoose == &quot;fzbz&quot;):
        fizzbuzz+=1
    ch=input(&quot;Do you want to continue playing the game : (y/n)&quot;)
    if(ch=='n'):
        print('Congratulations, your score is\n FizzBuzz:%d\nFizz:%d\nBuzz:%d' %
(fizzbuzz,fizz,buzz))
    
'''Sample Output:

 _____  ____  _____  _____  ____   __ __  _____  _____       ____   ____  ___ ___    ___ 
|     ||    ||     ||     ||    \ |  |  ||     ||     |     /    | /    ||   |   |  /  _]
|   __| |  | |__/  ||__/  ||  o  )|  |  ||__/  ||__/  |    |   __||  o  || _   _ | /  [_ 
|  |_   |  | |   __||   __||     ||  |  ||   __||   __|    |  |  ||     ||  \_/  ||    _]
|   _]  |  | |  /  ||  /  ||  O  ||  :  ||  /  ||  /  |    |  |_ ||  _  ||   |   ||   [_ 
|  |    |  | |     ||     ||     ||     ||     ||     |    |     ||  |  ||   |   ||     |
|__|   |____||_____||_____||_____| \__,_||_____||_____|    |___,_||__|__||___|___||_____|
                                                                                         

Enter a Number : 666
666 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 777
777 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 555
555 FizzBuzz
Do you want to continue playing the game : (y/n)y
Enter a Number : 1
1
Do you want to continue playing the game : (y/n)y
Enter a Number : 789
789 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 25
25 Buzz
Do you want to continue playing the game : (y/n)n
Congratulations, your score is

FizzBuzz:1
Fizz:3
Buzz:1

&lt;/pre&gt;

=Crowd Computing: Just Estimate=
==Wisdom of Crowds==
The concept of ’Wisdom of Crowds’ was proposed by Francis Galton. A weight-judging competition was carried on at the annual show of the West of England Fat Stock and Poultry Exhibition recently held at Plymouth, A fat ox having been selected, competitors bought stamped and numbered cards, each, on which to inscribe their respective names, addresses, and estimates of what the ox would weigh after it had been slaughtered. Those who guessed most successfully received prizes. About 8oo tickets were issued to the par- ticipants. The middlemost estimate of all the estimates recorded was 1207 lbs and the actual weight of the ox was 1198 lbs.

==Our Experiment==
The crowd had to guess the number of candies/gems in a jar. Around 75 people participated in the experiment. The actual number of gems in the jar were 375. The median of all estimates came out to be 300 and the mean of all the estimates came out to be around 396. Median underestimated and mean overestimated the actual value. So according to recent studies, Trimmed mean must be used as an aggregate measure to estimate where Wisdom of Crowds is involved.
[[File:Gemsjar.jpg|center|200px|caption]]

===Trimmed Mean===
In these kinds of experiments, 10% trimmed mean is usually followed. For calculating 10% trimmed mean, remove 10% smallest and 10% largest values from the sample. Calculate the mean of the sample obtained. In the above experiment, the trimmed mean came out to be around 351 which is very close to the actual value.

==Implementation==
Here, we try to demonstrate the concept of trimmed mean through crowd computing.
 Input a list of estimates done by the crowd .
 Sort the list.
 Remove the 10% smallest values.
 Remove the 10% largest values.
 Calculate the mean of the new list obtained .&lt;hr&gt;

==Data of Experiment==       
    Estimates =[1000,1010,1786,2000,1500,1500,100,120,150,150,150,170,175,180,197,200,200,200,200,200,200,220,220,220,220,234,250,250,250,250,250,250,250,250,250,263,270,275,275,286,300,
                300,300,300,300,300,300,300,320,350,350,350,400, 400,400,400,400,450,467,500,500,500,500,500,500,500,550,550,600,600,600,650,700,700,720]

    '''CODE:'''
&lt;pre&gt;
Estimates = [1000,1010,1786,2000,1500,1500,100,120,150,150,150,170,175,180,197,200,200,200,200,200,200,220,220,220,220,234,250,250,250,250,250,250,250,250,250,263,270,275,275,286,300,                300,300,300,300,300,300,300,320,350,350,350,400,400,400,400,400,450,467,500,500,500,500,500,500,500,550,550,600,600,600,650,700,700,720]
Estimates.sort()
offset = int(0.10*len(Estimates))
for i in range(offset):
       del Estimates[0]
       del Estimates[-1]
Sum = 0    
for i in range(len(Estimates)):
       Sum += Estimates[i]
Mean_Value = Sum/len(Estimates)
print(&quot;Mean : &quot;, int(Mean_Value))
#Output:
Mean :  351
&lt;/pre&gt;
&lt;hr&gt;
==Trimmed Mean for the above example== 
&lt;h3&gt;Using scipy library&lt;/h3&gt;
&lt;pre&gt;
#import scipy to use the method of trim_mean
from scipy import stats
trimMean = stats.trim_mean(Estimates, 0.1) # Trim 10% at both ends
print(&quot;Trimmed Mean : &quot;,trimMean)
#Output:
Trimmed Mean :  335.1020408163265
&lt;/pre&gt;

&lt;h3&gt;Without using scipy library&lt;/h3&gt;
&lt;pre&gt;
#Trimmed mean with 10%
p=10/100
#sorted data
data=[2, 4, 6, 7, 11, 21, 81, 90, 105, 121]
n = len(data)
#Remove elements from both end
rem=int(n*p)
newData = data[rem:-rem]
mean = 0
for i in newData:
    mean += i
mean = int(mean/len(newData))
print(&quot;Trimmed mean : &quot;,mean)
#Output: Trimmed mean :  40
&lt;/pre&gt;
[[#Top]]

=Jumbled_Words Permutations: Jumbled Words=
==What are Permutations ?==
A permutation also called ordering of selected number of elements from a list denoted by nPr here we are choosing all elements of a list and so n=r&lt;br&gt;
nPr=n!/(n-r)!&lt;br&gt; as n=r
nPn=n!&lt;br&gt; which gives all possible arrangement of elements present in a list.

 For example, permutations of list [1,2,3] are [1,2,3], [1,3,2], [2,1,3], [2,3,1], 
[3,1,2], and [3,2,1]. 
The number of permutations of a list of elements nPn is given by n!. For example, there are 2! = 2 x 1 = 2 permutations of [1,2], namely [1,2] and [2,1], and 3! = 3 x 2 x 1 = 6 permutations of [1,2,3], as mentioned above.&lt;br/&gt;
[[File:Permutations.jpg]]

==Implementation==
Here, we try to demonstrate the concept of permutations through jumbled words. It is a two player game in which one person presents the other person a different permutation of the word in his mind. The other person has to guess the right word. If he guesses, the he wins otherwise he loses.
 Input an list of words.
 Randomly pick a word from the list of words .
 Shuffle this word and present it to the other player.
 if word guesses by the player is same as the one picked from list of w
     player wins
 else
     player loses

ALTERNATE CODE TO GENERATE THIS GAME:
&lt;pre&gt;
import random
p1=input(&quot;enter player 1 name:&quot;)
p2=input(&quot;enter player 2 name:&quot;)
l=[&quot;rainbow&quot;,&quot;computer&quot;,&quot;robot&quot;,&quot;butter&quot;,&quot;vegetable&quot;,&quot;science&quot;,&quot;correct&quot;]
c1=c2=a1=a2=f1=f2=0
k=1
i=3
def play():
    n=random.choice(l)        ##n=chooses a word from list l
    l1=[]
    for j in n:
       l1.append(j)      ##creates a list for word in n
    for t in range(len(l1)):
       p=random.choice(l1)     ##this randomly displays letters in the list
       print(p)
       l1.remove(p)          ##to avoid the repetition of a letter
    s=input(&quot;enter the word:&quot;)
    if(s==n):
        print(&quot;correct&quot;)
        return 1
    else:
        print(&quot;not correct&quot;)
        print(&quot;answer is&quot;,n)
        return 0
def stat():
     print(&quot;player 1:&quot;)
     print(&quot;score:&quot;,c1)
     print(&quot;answered:&quot;,a1)
     print(&quot;failed:&quot;,f1)
     print(&quot;.............&quot;)
     print(&quot;player 2:&quot;)
     print(&quot;score:&quot;,c2)
     print(&quot;answered:&quot;,a2)
     print(&quot;failed&quot;,f2)
     if(c1&gt;c2):
         print(p1,&quot; won over &quot;,p2)
     elif(c1==c2):
         print(&quot;draw game&quot;)
     else:
         print(p2,&quot; won over &quot;,p1) 
while(i!=4):
      if(i==3):
         if(k==1):
             print(&quot;player 1 turn&quot;)
             print(&quot;your jumbled word is:&quot;)
             k=k+1
             m=play()
             if(m==1):      ##if guessed answer is correct,then score and no.of answered count will be increased
                c1+=1
                a1+=1
             else:
                f1+=1       ##else count of no.of failed to answered will be incremented
         else:
             print(&quot;player 2 turn&quot;)
             print(&quot;your jumbled word is:&quot;)
             k=k-1
             m=play()
             if(m==1):
                c2=c2+1
                a2=a2+1
             else:
                f2=f2+1
       if(i==2):
             print(&quot;present status&quot;)
             stat()
       i=int(input(&quot;enter your choice  1.stop 2.status 3.continue&quot;))
       if(i==1):
             stat()
             i=i+3
&lt;/pre&gt;
&lt;hr&gt;
=== JumbledWord Simple Logic, In Short ===
[[File:jumbledWord.gif]]
&lt;hr&gt;
'''Logic to create a Jumbled Word'''
&lt;hr&gt;
&lt;pre&gt;
#Get Jumbled Word and print it Horizontally
import random

def getJumbledWord(b):
    jumble=''
    l1 = [ b[i] for i in range(0, len(b)) ]
    for t in range(len(l1)):
       p=random.choice(l1)     ##this randomly gets letters from the list      
       jumble=jumble+p       
       l1.remove(p)
    return jumble

b=input(&quot;Enter a word to make it jumbled : &quot;)
print(&quot;Jumbled Word : &quot;, getJumbledWord(b))
&lt;/pre&gt;
&lt;hr&gt;
'''Another Logic to create a Jumbled Word'''
&lt;hr&gt;
&lt;pre&gt;
b=input(&quot;Enter a word to make it jumbled : &quot;)

def getJumbledWord1(b):
    l1 = [ b[i] for i in range(0, len(b)) ]
    random.shuffle(l1)
    str1 = ''.join(l1)
    return str1

print(&quot;Jumbled Word : &quot;, getJumbledWord1(b))
&lt;/pre&gt;

====Sample Output:====
&lt;pre&gt;
---- Output1 
Enter a word to make it jumbled : butter
Jumbled Word :  tbture

---- Output2 
Enter a word to make it jumbled : petriotism
Jumbled Word :  pittrosime
&lt;/pre&gt;

=Theory of Evolution=

== What is Evolution ? ==
Evolution is the change in heritable characteristics over successive generations. The theory of evolution explains that DNA, which acts as a carrier of genetic information from one generation to other, tends to change or mutate occasionally. These changes are reflected in next generations to come. This is how life has evolved on earth from bacteria to human beings.&lt;br&gt;
[[File:Evolution.png|500px]]

== Implementation ==
&lt;pre&gt;An array representing DNA is stored in a file. As genes are forms of DNA, they contain information to be transferred to forthcoming generations. Assume that information is in the form of bits (in the form of 0s and 1s). A number is picked randomly from 1 to the size of the array. A new parameter has been introduced which decides whether mutation would occur or not. If the value of this new parameter is 1 (It is picked randomly from 1 to 100), then only change is reflected down the generations, otherwise it is not. The pseudo code is as follows :
Input an array containing genetic information .
Randomly generate a number (say m) from 1 to length of the array. Randomly generate other number (say p) from 1 to 100.
 
    if p is equal to 1 then 
        if m is 1 then
          set it to 0
        else
          set it to 1
&lt;/pre&gt;
[[#TOP]]</text>
      <sha1>mpav3i5r6zyi09ugf9d2npfje4zsamx</sha1>
    </revision>
    <revision>
      <id>3568</id>
      <parentid>3567</parentid>
      <timestamp>2018-09-28T02:35:47Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* Loops and Conditionals : Fizzbuzz */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="29442">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_3 Contributors of this page]
*Week 3 Playlist: https://www.youtube.com/playlist?list=PLc_j0TNIaWxOVx_z9jAM2UB3RqYNXaoEo
=List=
List is a flexible data structure used for storing a group of data separated by comma. The elements in a list need not be of the same data type.

'''Example:'''
       List_1 = [ 1, 2,3] or 
       List_1 = [&quot;coffee&quot;, &quot;Tea&quot;, &quot;Milk&quot;] or
       List_1 = [1,&quot;coffee&quot;, &quot;Tea&quot;, 3, &quot;5&quot;]

==List Creation==
&lt;pre&gt;a) A list can be created by simply putting values (separated by comma) between square brackets as given below,
       List_1 = [1,&quot;coffee&quot;, &quot;Tea&quot;, 3, &quot;5&quot;] #this creates a list by name List_1 containing following items


Or,
(b)A List can be created from scratch and elements can be added 
        List_2 = [ ]
        List_2.append(&quot;Kala&quot;)
        List_2.append(&quot;Mala&quot;)
Here we use &quot;append&quot; ,which is a function in python that enable us to append or attach an element to a list .
Thus List_2 will now hold [&quot;Kala&quot;,&quot;Mala&quot;]
&lt;/pre&gt;
[[#TOP]]

==Operations and Methods to work with List==
&lt;pre&gt;
a = [25,30,50,90,12,13]
b = [100,300,500,200,250]
&lt;/pre&gt;
&lt;hr&gt;
&lt;table border=2&gt;
  &lt;tr&gt;
    &lt;th&gt;&lt;b&gt;Method/&lt;br&gt;Operator&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Function&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Syntax&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Output&lt;/b&gt;&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;len()&lt;/td&gt;
    &lt;td&gt;Find length of a list&lt;/td&gt;
    &lt;td&gt;len(a)&lt;/td&gt;
    &lt;td&gt;6&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;max()&lt;/td&gt;
    &lt;td&gt;Find maximum element from the list&lt;/td&gt;
    &lt;td&gt;max(a)&lt;/td&gt;
    &lt;td&gt;90&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;min()&lt;/td&gt;
    &lt;td&gt;Find minimum element from the list&lt;/td&gt;
    &lt;td&gt;min(a)&lt;/td&gt;
    &lt;td&gt;12&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sum()&lt;/td&gt;
    &lt;td&gt;Returns sum of all elements of the list&lt;/td&gt;
    &lt;td&gt;sum(a)&lt;/td&gt;
    &lt;td&gt;220&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;reverse()&lt;/td&gt;
    &lt;td&gt;Reverses the original list&lt;/td&gt;
    &lt;td&gt;a.reverse()&lt;/td&gt;
    &lt;td&gt;[13, 12, 90, 50, 30, 25]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sort()&lt;/td&gt;
    &lt;td&gt;Sorts the original list in ascending order&lt;/td&gt;
    &lt;td&gt;a.sort()&lt;/td&gt;
    &lt;td&gt;[12, 13, 25, 30, 50, 90]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sorted()&lt;/td&gt;
    &lt;td&gt;Returns the new sorted list &lt;/td&gt;
    &lt;td&gt;sorted(a)&lt;/td&gt;
    &lt;td&gt;[12, 13, 25, 30, 50, 90]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;insert()&lt;/td&gt;
    &lt;td&gt;Insert at a particular index in the list, and shifts remaining elements&lt;/td&gt;
    &lt;td&gt;a.insert(3,3)&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 3, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;append()&lt;/td&gt;
    &lt;td&gt;Adds elements/object to the end of the list&lt;/td&gt;
    &lt;td&gt;a.append(5)&lt;br&gt;a.append([10,20])&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 5]&lt;br&gt;[25, 30, 50, 90, 12, 13, [10, 20]]&lt;br&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;extend()&lt;/td&gt;
    &lt;td&gt;Adds object to the end of the list as elements not as object&lt;/td&gt;
    &lt;td&gt;a.extend([10,20])&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 10, 20]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;*&amp;nbsp;&amp;nbsp;Repeatation&lt;br&gt;operator&lt;/td&gt;
    &lt;td&gt;Repeat the list for n times and returns a new list&lt;/td&gt;
    &lt;td&gt;a*2&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 25, 30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;+ Concatenation&lt;br&gt;operator&lt;/td&gt;
    &lt;td&gt;Concatenates two lists, and returns a new list&lt;/td&gt;
    &lt;td&gt;a+b&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 100, 300, 500, 200, 250]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;index()&lt;/td&gt;
    &lt;td&gt;Finds index of a particular element in the list or not&lt;/td&gt;
    &lt;td&gt;a.index(25)&lt;br&gt;a.index(0)&lt;br&gt;&lt;/td&gt;
    &lt;td&gt;0&lt;br&gt;&lt;br&gt;ValueError: 0 is not in list&lt;br&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;in operator&lt;/td&gt;
    &lt;td&gt;Finds whether a particular element is in the list or not, returns boolean&lt;/td&gt;
    &lt;td&gt;25 in a&lt;/td&gt;
    &lt;td&gt;True&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;not in operator&lt;/td&gt;
    &lt;td&gt;Checks if element is not available in list, returns boolean&lt;/td&gt;
    &lt;td&gt;25 not in a&lt;/td&gt;
    &lt;td&gt;False&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;count()&lt;/td&gt;
    &lt;td&gt;Counts the number of occurence of an element in the list&lt;/td&gt;
    &lt;td&gt;a.count(25)&lt;/td&gt;
    &lt;td&gt;1&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;remove()&lt;/td&gt;
    &lt;td&gt;Removes an element from the list&lt;/td&gt;
    &lt;td&gt;a.remove(25)&lt;/td&gt;
    &lt;td&gt; [30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;pop()&lt;/td&gt;
    &lt;td&gt;Delete and return item at index 0&lt;/td&gt;
    &lt;td&gt;a.pop(0)&lt;/td&gt;
    &lt;td&gt;25 , a will be [30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;del&lt;/td&gt;
    &lt;td&gt;Deletes item at a particular index from the list&lt;/td&gt;
    &lt;td&gt;del a[0]&lt;/td&gt;
    &lt;td&gt;[30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;all()&lt;/td&gt;
&lt;td&gt;Returns True, if all items in list are True or it is an empty list&lt;/td&gt;
&lt;td&gt;all([True, True, True])
all([])
&lt;/td&gt;
&lt;td&gt;True&lt;br&gt;
True&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;any()&lt;/td&gt;
&lt;td&gt;Returns True, if any item in list is True else return False&lt;/td&gt;
&lt;td&gt;any([True, True, True])&lt;br&gt;
any([True, False, True])&lt;br&gt;
any([])&lt;/td&gt;
&lt;td&gt;True&lt;br&gt;False&lt;br&gt;False&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;

==Printing the List==
=== Print whole list ===
A list can be printed simply or using a ''for / while'' loop 

 print(List_2)     # To print the entire list
This code will print      
 ['Kala','Mala']     

===Print element at a particular index===
&lt;pre&gt;
Using index position
    List_2[0]     # prints 'Kala' ,i.e,the value at index position 0.
    List_2[1]     # prints 'Mala'.
&lt;/pre&gt;
=== Without using index position ===
&lt;pre&gt;
for item in List_2:   # here item is a variable used to access elements in list.
       print(item)
   This code snippet prints 
    Kala
    Mala
&lt;/pre&gt;
[[#TOP]]

==Search for a particular element in list==
Elements in a list can be searched by one of the two ways:
=== using index() function===
&lt;pre&gt;
ages1 = [11,23,12,23,45]

#if element is available in the list, index() returns the index value on which, the element is present.
print(ages1.index(45))#Output: 4

#if element is not available in the list, index() returns ''ValueError''
print(ages1.index(0))#Output: ValueError:
&lt;/pre&gt;

In programming, if such error occurs, program gets terminated. It can be solved using exception handling.
e.g.
&lt;pre&gt;
ages1 = [11,23,12,23,45]

try:
    print(ages1.index(0))
except ValueError:
    print(&quot;Exception has occured&quot;)    
    print(&quot;Element is not found in the list&quot;)

&lt;/pre&gt;
&lt;pre&gt;
'''Output: 
Exception has occured
Element is not found in the list
'''&lt;/pre&gt;
[[#TOP]]

=== using 'in' operator===
''in'' operator is used to check whether a particular element is available in the list or not.e.g.

&lt;pre&gt;
ages1 = [11,23,12,23,45]
no=11

if no in ages1:
    print(&quot;no is there in the list&quot;)
else:    
    print(&quot;no is NOT there in the list&quot;)
&lt;/pre&gt;
&lt;pre&gt;
#Output: no is there in the list
&lt;/pre&gt;


'''Number is not there in the list'''
&lt;pre&gt;
ages1 = [11,23,12,23,45]
no=15

if no in ages1:
    print(&quot;no is there in the list&quot;)
else:    
    print(&quot;no is NOT there in the list&quot;)
&lt;/pre&gt;
&lt;pre&gt;
Output: no is NOT there in the list
&lt;/pre&gt;
[[#TOP]]

==Updating the List==
The lists can be updated using ''append'' or ''insert'' function.  Append adds the element to the end of the list and Insert adds the element in the specified position.
&lt;pre&gt;
   # add the element 'Sheela' to the end of the list.
   List_2.append(&quot;Sheela&quot;)    
   print (List_2) will output 
   ['Kala', 'Mala', 'Sheela']
&lt;/pre&gt;
   &lt;pre&gt;
# add the element &quot;Bala&quot; in the list at the index 1.
   List_2.insert(1,&quot;Bala&quot;)    
   print (List_2) will output 
   ['Kala', 'Bala','Mala', 'Sheela']
&lt;/pre&gt;

=== Extend the list by adding elements of other list at end using extend()===
&lt;pre&gt;
ages = [11,23,12,23,45]
ages.extend([57,58])
print(ages)
&lt;/pre&gt;

&lt;pre&gt;
#Output: [11, 23, 12, 23, 45, 57, 58]
&lt;/pre&gt;

==== Difference between ''append and extend'' ====
Difference between append and extend can be easily understood, by the following example.

&lt;pre&gt;
appendlist = [11,23,12,23,45]
appendlist.append([57,58])

extendlist= [11,23,12,23,45]
extendlist.extend([57,58])
&lt;/pre&gt;

&lt;pre&gt;
'''Output:
[11, 23, 12, 23, 45, [57, 58]]
[11, 23, 12, 23, 45, 57, 58]'''
&lt;/pre&gt;

[[#TOP]]

==Basic Operations on List==
===Frequency of Occurrence===
list.count(object) will return the number of times the object occur in the list.
  '''Example'''
    ages = [11,23,12,23,45,43,22,24,23]
    ages.count(23) will return
    3
    ages.count(100) will return
    0

===Length of the List===
len(list) will return the length of the list ie. the number of objects in the list.
  '''Example'''
&lt;pre&gt;
    ages = [11,23,12,23,45,43,22,24,23]
    len(ages) # Output: 9
&lt;/pre&gt;

To print the objects in the list either use ''for item in list'' or ''for index in range(len(list))''
&lt;pre&gt;
    for item in ages:       
        print (item)  
        (OR)
    for index in range(len(ages)) :
        print (ages[index])
&lt;/pre&gt;

===Sort the List===
list.sort() will sort the list in ascending order
  '''Example'''
    ages = [11,23,12,23,45,43,22,24,23]
    ages.sort() 
    print (ages) 
    [11, 12, 22, 23, 23, 23, 24, 43, 45]

[[#TOP]]

===Sort the List using sorted() function===
sorted(list1) will sort the list and return a new list, it doesn't modify the original list
&lt;br&gt;'''Example: Sort in ascending order'''
&lt;pre&gt;
ages = [11,23,12,23,45,43,22,24,23]
newList=sorted(ages)
print(newList)

#Output: [11, 12, 22, 23, 23, 23, 24, 43, 45]
&lt;/pre&gt;

&lt;br&gt;'''Example: Sort in descending order'''
&lt;pre&gt;
ages = [11,23,12,23,45,43,22,24,23]
newList=sorted(ages,reverse=True)
print(newList)

#Output: [45, 43, 24, 23, 23, 23, 22, 12, 11]
&lt;/pre&gt;

===Reverse the List===
list.reverse() will reverse the original list
  '''Example'''
    ages = [11, 12, 22, 23, 23, 23, 24, 43, 45]
    ages.reverse()
    print (ages)
    [45, 43, 24, 23, 23, 23, 22, 12, 11]

Both sort() and reverse() list operation will work on numeric and alphanumeric data list.

A special use of the reverse() function is to descend a list that is sorted in ascending order.

  '''Example'''
&lt;pre&gt;
ages = [11, 12, 22, 23, 23, 23, 24, 43, 45]
ages.sort()
print(ages)
ages.reverse()
print(ages)
&lt;/pre&gt;

===Slicing===
Used to retrieve an object or objects in a range as a list  
  '''Example'''

Use ''list[index]'' to retrieve the object at the given index
&lt;pre&gt;
In [1]: student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
In [2]: student[3]     #Object at index 3.  Remember index starts at 0
Out[2]: 'Geetha'      
&lt;/pre&gt;

Use ''list[start_index : end_index + 1]'' to retrieve objects from the start_index to end_index 
&lt;pre&gt;
In [3]: student[2:4]     # Objects from index 2 to 3 as List. Note the [ and ]
Out[3]: ['Vijay', 'Geetha']   
&lt;/pre&gt;

Use ''list[:]'' to retrieve objects from the starting of the list to the end of the list. 
The default start value will be the starting index of the list (i.e. 0) and the default end value
will be the length of the list 
&lt;pre&gt;
In [4]: student[:]        # prints the entire list
Out[4]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma', 'Janani']
&lt;/pre&gt;
&lt;pre&gt;
In [5]: student[:5]       # prints the objects from the start of the list upto object at index 4
Out[5]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran']
&lt;/pre&gt;
&lt;pre&gt;
In [6]: student[2:]       # prints the objects from index 2 upto the end of the list
Out[6]: ['Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma', 'Janani']
&lt;/pre&gt;

Negative index too is available in Python. It starts from last element of the list. i.e.
&lt;pre&gt;
In [7]:student[-1]        #prints last index of list
Out[7]: 'Janani'
&lt;/pre&gt;
&lt;pre&gt;
In [8]:student[-1:-8]     #prints empty list
Out[8]: []
&lt;/pre&gt;
&lt;pre&gt;
In [9]:student[-8:-1]     #prints -8th index to -1st index elements
Out[9]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma']
&lt;/pre&gt;

[[#TOP]]

===Removing Item from list ===
----

Is used to remove a specific item from the list.

'''Example:'''
 
Use list.remove(entry/value)  Or   del list[index]    Or list.pop(index)
&lt;pre&gt;
student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
student.remove(&quot;Arun&quot;)   #This will delete item &quot;Arun&quot;
         Or    
del student[0]           # This will delete item at index 0
         Or
student.pop(0)         # This will delete and return item at index 0
print(student)    
Output: &quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
&lt;/pre&gt;

[[#TOP]]

===Delete list ===
----
Used to delete complete list

'''Example'''

Use del &lt;list name&gt;
&lt;pre&gt;
student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
del student&lt;/pre&gt;

===Concatenation of two lists===
----
''+'' is the concatenation operator which is used concatenate two lists. 
&lt;pre&gt;
ages1 = [11,23,12,23,45]
ages2 = [25, 24, 43, 47]
age=ages1+ages2
print(age)
#Output: [11, 23, 12, 23, 45, 25, 24, 43, 47]
&lt;/pre&gt;

===Repeatation of a list ===
----
''*'' is the operator to repeat a particular list.
&lt;pre&gt;
ages1 = [11,23,12,23,45]
age=ages1*5 #ages1 list is repeated 5 times and stroed in ''age'' list
print(age)

#Output: [11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45]
&lt;/pre&gt;

=== all and any for List===
all() and any() are special functions to check whether all elements in iterable is ''True'' or any element is ''True''
&lt;ol&gt;
&lt;li&gt;If all elements in a list are ''True'', '''all()''' will return ''True''&lt;/li&gt;
&lt;li&gt;If iterable is ''empty'', '''all()''' will return ''True''&lt;/li&gt;
&lt;li&gt;If iterable contains at least one ''True'', '''any()''' will return ''True''&lt;/li&gt;
&lt;li&gt;If iterable is ''empty'', '''any()''' will return ''False''&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;
lsit=[True, True, True, True]
print(all(lsit))#Output: True
print(any(lsit))#Output: True

lsit1=[True, False, True, True]
print(all(lsit1))#Output: False
print(any(lsit1))#Output: True

lsit2=[False,False,False]
print(all(lsit2))#Output: False
print(any(lsit2))#Output: False

lsit3=[]
print(all(lsit3))#Output: True
print(any(lsit3))#Output: False
&lt;/pre&gt;

==Conditional Statements==
&lt;pre&gt;Conditionals are used to check the condition and change the flow of the program 
accordingly. They are realized in programming languages through if statement. The 
syntax is as follows :
&lt;pre&gt;
         if condition : 
            statement
&lt;/pre&gt;
    '''Note:''' Do not forget indentation (inserting space/tab) in the line after the
 if condition.
    
    In case you want to execute a set of statements when a condition is true and another

set of statement when the condition is false.
&lt;pre&gt;
         if condition : 
            statement 1
         else :
            statement 2
&lt;/pre&gt;

&lt;pre&gt;    
    Multiple if-else statements can be written as follows:
         if condition_1 : 
            statement 1
         elif condition_2 : # 'elif' is short for 'else if'
            statement 2
         elif condition_3 :
            statement 3
        .
        .
         else :
            final statement
&lt;/pre&gt;

[[#TOP]]

=Loops and Conditionals : Fizzbuzz=
====Loops====
Loops are used to execute a set of repetitive statements. They are realised
through 'while' and 'for' loops in programming languages. The syntax of 'for' loop is 
as follows :
&lt;pre&gt;
        for LOOPVARIABLE in SEQUENCE: 
            STATEMENTS&lt;/pre&gt;

    '''e.g.''' to print all the data from a list we can write:
&lt;pre&gt;
        for item in list_name
            print(item)&lt;/pre&gt;
    OR
&lt;pre&gt;
        for index in range(len(list_name))
            print(list_name[index])
 &lt;/pre&gt;   
    The syntax for while loop is as follows :
    
        while BOOLEANEXPRESSION: 
            STATEMENTS
            INCREMENT/DECREMENT
    
    '''e.g.''' if we want to print all numbers from 1 to 10
        i=1
        while i&lt;=10 :
            print(i,&quot; &quot;)
            i=i+1
    
    'while' loop has indefinite iteration (run-time unknown). So, there must be loop
 break statement in it.
 Whereas 'for' loop is definite in nature (i.e. known or predictable span).&lt;br&gt;

&lt;b&gt;NOTE: Python doesn't have anything like do-while loop.&lt;/b&gt;
&lt;/pre&gt;
[[#TOP]]

==Implementation==
Here, we try to demonstrate the concept of loops and conditionals through a game called Fizzbuzz. The rules are as follows :&lt;br/&gt;
[[File:fizzBuzz.gif]]

• if input number is a multiple of ’3’ print ”Fizz”
&lt;br/&gt;
• if input number is a multiple of ’5’ print ”Buzz”
&lt;br/&gt;
• if input number is a multiple of both '3' and ’5’ print ”FizzBuzz”
&lt;br/&gt;
The pseudo code is as follows :
&lt;pre&gt;
   If input no % 3 == 0 and  input no % 5 == 0 : 
       print ”Fizzbuzz”
   else if input no % 3 == 0 : 
       print ”Fizz”
   else if input no % 5 == 0 : 
       print ”Buzz”
   else :
       print the input no
&lt;/pre&gt;
The order of statements execution matters to get the desired output. The highest priority condition should be first followed by other. In fizzbuzz programming, first checking should be done for both divisibility of 3 and 5. If condition not satisfied only then it should check individually for 3 or 5. So carefully choosing the order is crucial for better programming.
Note: There is some effect of present condition statements chosen on next conditions statements. That is why in first attempt fizzbuzz programming got struck.

Example: 
&lt;pre&gt;
#Code to achieve the above requirement in python3.
i = int(input(&quot;Enter the number&quot;)) 
if i%3 == 0 and i%5 == 0: print(i,&quot;FizzBuzz&quot;)  
elif i%5 == 0: print(i,&quot;Buzz&quot;)
elif i%3 == 0: print(i,&quot;Fizz&quot;)
else: print(i)
&lt;/pre&gt;
Lets put the same into a loop for a range given by the user.
&lt;pre&gt;
def fizzbuzzgame(start,stop):
    for i in range(start,stop+1):
        if i%3 == 0 and i%5 == 0:
            print(i,&quot;FizzBuzz&quot;)
        elif i%5 == 0:
            print(i,&quot;Buzz&quot;)
        elif i%3 == 0:
            print(i,&quot;Fizz&quot;)
        else: print(i)

fizzbuzzgame(50,100)
&lt;/pre&gt;


=== Fizz Buzz game in Interactive mode with Score ===
'''By Ms. Ami Tusharkant Choksi'''
&lt;pre&gt;
def fizzbuzzgame(i):
        if i%3 == 0 and i%5 == 0:
            print(i,&quot;FizzBuzz&quot;)
            return(&quot;fzbz&quot;)
        elif i%5 == 0:
            print(i,&quot;Buzz&quot;)
            return(&quot;bz&quot;)
        elif i%3 == 0:
            print(i,&quot;Fizz&quot;)
            return(&quot;fz&quot;)
        else:
            print(i)
            return(&quot;no&quot;)

ch = 'y'
fizzbuzz=0
fizz=0
buzz=0
nothing=0
print(&quot;&quot;&quot;
 _____  ____  _____  _____  ____   __ __  _____  _____       ____   ____  ___ ___    ___ 
|     ||    ||     ||     ||    \ |  |  ||     ||     |     /    | /    ||   |   |  /  _]
|   __| |  | |__/  ||__/  ||  o  )|  |  ||__/  ||__/  |    |   __||  o  || _   _ | /  [_ 
|  |_   |  | |   __||   __||     ||  |  ||   __||   __|    |  |  ||     ||  \_/  ||    _]
|   _]  |  | |  /  ||  /  ||  O  ||  :  ||  /  ||  /  |    |  |_ ||  _  ||   |   ||   [_ 
|  |    |  | |     ||     ||     ||     ||     ||     |    |     ||  |  ||   |   ||     |
|__|   |____||_____||_____||_____| \__,_||_____||_____|    |___,_||__|__||___|___||_____|
                                                                                         
&quot;&quot;&quot;)   

while(ch == 'y'):
    n=int(input(&quot;Enter a Number : &quot;))
    winLoose=fizzbuzzgame(n)
    if(winLoose == &quot;fz&quot;):
        fizz+=1
    elif(winLoose == &quot;bz&quot;):
        buzz+=1
    elif(winLoose == &quot;fzbz&quot;):
        fizzbuzz+=1
    ch=input(&quot;Do you want to continue playing the game : (y/n)&quot;)
    if(ch=='n'):
        print('Congratulations, your score is\n FizzBuzz:%d\nFizz:%d\nBuzz:%d' %
(fizzbuzz,fizz,buzz))
    
'''Sample Output:

 _____  ____  _____  _____  ____   __ __  _____  _____       ____   ____  ___ ___    ___ 
|     ||    ||     ||     ||    \ |  |  ||     ||     |     /    | /    ||   |   |  /  _]
|   __| |  | |__/  ||__/  ||  o  )|  |  ||__/  ||__/  |    |   __||  o  || _   _ | /  [_ 
|  |_   |  | |   __||   __||     ||  |  ||   __||   __|    |  |  ||     ||  \_/  ||    _]
|   _]  |  | |  /  ||  /  ||  O  ||  :  ||  /  ||  /  |    |  |_ ||  _  ||   |   ||   [_ 
|  |    |  | |     ||     ||     ||     ||     ||     |    |     ||  |  ||   |   ||     |
|__|   |____||_____||_____||_____| \__,_||_____||_____|    |___,_||__|__||___|___||_____|
                                                                                         

Enter a Number : 666
666 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 777
777 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 555
555 FizzBuzz
Do you want to continue playing the game : (y/n)y
Enter a Number : 1
1
Do you want to continue playing the game : (y/n)y
Enter a Number : 789
789 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 25
25 Buzz
Do you want to continue playing the game : (y/n)n
Congratulations, your score is

FizzBuzz:1
Fizz:3
Buzz:1

&lt;/pre&gt;

=Crowd Computing: Just Estimate=
==Wisdom of Crowds==
The concept of ’Wisdom of Crowds’ was proposed by Francis Galton. A weight-judging competition was carried on at the annual show of the West of England Fat Stock and Poultry Exhibition recently held at Plymouth, A fat ox having been selected, competitors bought stamped and numbered cards, each, on which to inscribe their respective names, addresses, and estimates of what the ox would weigh after it had been slaughtered. Those who guessed most successfully received prizes. About 8oo tickets were issued to the par- ticipants. The middlemost estimate of all the estimates recorded was 1207 lbs and the actual weight of the ox was 1198 lbs.

==Our Experiment==
The crowd had to guess the number of candies/gems in a jar. Around 75 people participated in the experiment. The actual number of gems in the jar were 375. The median of all estimates came out to be 300 and the mean of all the estimates came out to be around 396. Median underestimated and mean overestimated the actual value. So according to recent studies, Trimmed mean must be used as an aggregate measure to estimate where Wisdom of Crowds is involved.
[[File:Gemsjar.jpg|center|200px|caption]]

===Trimmed Mean===
In these kinds of experiments, 10% trimmed mean is usually followed. For calculating 10% trimmed mean, remove 10% smallest and 10% largest values from the sample. Calculate the mean of the sample obtained. In the above experiment, the trimmed mean came out to be around 351 which is very close to the actual value.

==Implementation==
Here, we try to demonstrate the concept of trimmed mean through crowd computing.
 Input a list of estimates done by the crowd .
 Sort the list.
 Remove the 10% smallest values.
 Remove the 10% largest values.
 Calculate the mean of the new list obtained .&lt;hr&gt;

==Data of Experiment==       
    Estimates =[1000,1010,1786,2000,1500,1500,100,120,150,150,150,170,175,180,197,200,200,200,200,200,200,220,220,220,220,234,250,250,250,250,250,250,250,250,250,263,270,275,275,286,300,
                300,300,300,300,300,300,300,320,350,350,350,400, 400,400,400,400,450,467,500,500,500,500,500,500,500,550,550,600,600,600,650,700,700,720]

    '''CODE:'''
&lt;pre&gt;
Estimates = [1000,1010,1786,2000,1500,1500,100,120,150,150,150,170,175,180,197,200,200,200,200,200,200,220,220,220,220,234,250,250,250,250,250,250,250,250,250,263,270,275,275,286,300,                300,300,300,300,300,300,300,320,350,350,350,400,400,400,400,400,450,467,500,500,500,500,500,500,500,550,550,600,600,600,650,700,700,720]
Estimates.sort()
offset = int(0.10*len(Estimates))
for i in range(offset):
       del Estimates[0]
       del Estimates[-1]
Sum = 0    
for i in range(len(Estimates)):
       Sum += Estimates[i]
Mean_Value = Sum/len(Estimates)
print(&quot;Mean : &quot;, int(Mean_Value))
#Output:
Mean :  351
&lt;/pre&gt;
&lt;hr&gt;
==Trimmed Mean for the above example== 
&lt;h3&gt;Using scipy library&lt;/h3&gt;
&lt;pre&gt;
#import scipy to use the method of trim_mean
from scipy import stats
trimMean = stats.trim_mean(Estimates, 0.1) # Trim 10% at both ends
print(&quot;Trimmed Mean : &quot;,trimMean)
#Output:
Trimmed Mean :  335.1020408163265
&lt;/pre&gt;

&lt;h3&gt;Without using scipy library&lt;/h3&gt;
&lt;pre&gt;
#Trimmed mean with 10%
p=10/100
#sorted data
data=[2, 4, 6, 7, 11, 21, 81, 90, 105, 121]
n = len(data)
#Remove elements from both end
rem=int(n*p)
newData = data[rem:-rem]
mean = 0
for i in newData:
    mean += i
mean = int(mean/len(newData))
print(&quot;Trimmed mean : &quot;,mean)
#Output: Trimmed mean :  40
&lt;/pre&gt;
[[#Top]]

=Jumbled_Words Permutations: Jumbled Words=
==What are Permutations ?==
A permutation also called ordering of selected number of elements from a list denoted by nPr here we are choosing all elements of a list and so n=r&lt;br&gt;
nPr=n!/(n-r)!&lt;br&gt; as n=r
nPn=n!&lt;br&gt; which gives all possible arrangement of elements present in a list.

 For example, permutations of list [1,2,3] are [1,2,3], [1,3,2], [2,1,3], [2,3,1], 
[3,1,2], and [3,2,1]. 
The number of permutations of a list of elements nPn is given by n!. For example, there are 2! = 2 x 1 = 2 permutations of [1,2], namely [1,2] and [2,1], and 3! = 3 x 2 x 1 = 6 permutations of [1,2,3], as mentioned above.&lt;br/&gt;
[[File:Permutations.jpg]]

==Implementation==
Here, we try to demonstrate the concept of permutations through jumbled words. It is a two player game in which one person presents the other person a different permutation of the word in his mind. The other person has to guess the right word. If he guesses, the he wins otherwise he loses.
 Input an list of words.
 Randomly pick a word from the list of words .
 Shuffle this word and present it to the other player.
 if word guesses by the player is same as the one picked from list of w
     player wins
 else
     player loses

ALTERNATE CODE TO GENERATE THIS GAME:
&lt;pre&gt;
import random
p1=input(&quot;enter player 1 name:&quot;)
p2=input(&quot;enter player 2 name:&quot;)
l=[&quot;rainbow&quot;,&quot;computer&quot;,&quot;robot&quot;,&quot;butter&quot;,&quot;vegetable&quot;,&quot;science&quot;,&quot;correct&quot;]
c1=c2=a1=a2=f1=f2=0
k=1
i=3
def play():
    n=random.choice(l)        ##n=chooses a word from list l
    l1=[]
    for j in n:
       l1.append(j)      ##creates a list for word in n
    for t in range(len(l1)):
       p=random.choice(l1)     ##this randomly displays letters in the list
       print(p)
       l1.remove(p)          ##to avoid the repetition of a letter
    s=input(&quot;enter the word:&quot;)
    if(s==n):
        print(&quot;correct&quot;)
        return 1
    else:
        print(&quot;not correct&quot;)
        print(&quot;answer is&quot;,n)
        return 0
def stat():
     print(&quot;player 1:&quot;)
     print(&quot;score:&quot;,c1)
     print(&quot;answered:&quot;,a1)
     print(&quot;failed:&quot;,f1)
     print(&quot;.............&quot;)
     print(&quot;player 2:&quot;)
     print(&quot;score:&quot;,c2)
     print(&quot;answered:&quot;,a2)
     print(&quot;failed&quot;,f2)
     if(c1&gt;c2):
         print(p1,&quot; won over &quot;,p2)
     elif(c1==c2):
         print(&quot;draw game&quot;)
     else:
         print(p2,&quot; won over &quot;,p1) 
while(i!=4):
      if(i==3):
         if(k==1):
             print(&quot;player 1 turn&quot;)
             print(&quot;your jumbled word is:&quot;)
             k=k+1
             m=play()
             if(m==1):      ##if guessed answer is correct,then score and no.of answered count will be increased
                c1+=1
                a1+=1
             else:
                f1+=1       ##else count of no.of failed to answered will be incremented
         else:
             print(&quot;player 2 turn&quot;)
             print(&quot;your jumbled word is:&quot;)
             k=k-1
             m=play()
             if(m==1):
                c2=c2+1
                a2=a2+1
             else:
                f2=f2+1
       if(i==2):
             print(&quot;present status&quot;)
             stat()
       i=int(input(&quot;enter your choice  1.stop 2.status 3.continue&quot;))
       if(i==1):
             stat()
             i=i+3
&lt;/pre&gt;
&lt;hr&gt;
=== JumbledWord Simple Logic, In Short ===
[[File:jumbledWord.gif]]
&lt;hr&gt;
'''Logic to create a Jumbled Word'''
&lt;hr&gt;
&lt;pre&gt;
#Get Jumbled Word and print it Horizontally
import random

def getJumbledWord(b):
    jumble=''
    l1 = [ b[i] for i in range(0, len(b)) ]
    for t in range(len(l1)):
       p=random.choice(l1)     ##this randomly gets letters from the list      
       jumble=jumble+p       
       l1.remove(p)
    return jumble

b=input(&quot;Enter a word to make it jumbled : &quot;)
print(&quot;Jumbled Word : &quot;, getJumbledWord(b))
&lt;/pre&gt;
&lt;hr&gt;
'''Another Logic to create a Jumbled Word'''
&lt;hr&gt;
&lt;pre&gt;
b=input(&quot;Enter a word to make it jumbled : &quot;)

def getJumbledWord1(b):
    l1 = [ b[i] for i in range(0, len(b)) ]
    random.shuffle(l1)
    str1 = ''.join(l1)
    return str1

print(&quot;Jumbled Word : &quot;, getJumbledWord1(b))
&lt;/pre&gt;

====Sample Output:====
&lt;pre&gt;
---- Output1 
Enter a word to make it jumbled : butter
Jumbled Word :  tbture

---- Output2 
Enter a word to make it jumbled : petriotism
Jumbled Word :  pittrosime
&lt;/pre&gt;

=Theory of Evolution=

== What is Evolution ? ==
Evolution is the change in heritable characteristics over successive generations. The theory of evolution explains that DNA, which acts as a carrier of genetic information from one generation to other, tends to change or mutate occasionally. These changes are reflected in next generations to come. This is how life has evolved on earth from bacteria to human beings.&lt;br&gt;
[[File:Evolution.png|500px]]

== Implementation ==
&lt;pre&gt;An array representing DNA is stored in a file. As genes are forms of DNA, they contain information to be transferred to forthcoming generations. Assume that information is in the form of bits (in the form of 0s and 1s). A number is picked randomly from 1 to the size of the array. A new parameter has been introduced which decides whether mutation would occur or not. If the value of this new parameter is 1 (It is picked randomly from 1 to 100), then only change is reflected down the generations, otherwise it is not. The pseudo code is as follows :
Input an array containing genetic information .
Randomly generate a number (say m) from 1 to length of the array. Randomly generate other number (say p) from 1 to 100.
 
    if p is equal to 1 then 
        if m is 1 then
          set it to 0
        else
          set it to 1
&lt;/pre&gt;
[[#TOP]]</text>
      <sha1>s0dek8jvqvwdek1rqejslgzhndyjzgj</sha1>
    </revision>
    <revision>
      <id>3569</id>
      <parentid>3568</parentid>
      <timestamp>2018-09-28T02:44:40Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* Loops */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="29434">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_3 Contributors of this page]
*Week 3 Playlist: https://www.youtube.com/playlist?list=PLc_j0TNIaWxOVx_z9jAM2UB3RqYNXaoEo
=List=
List is a flexible data structure used for storing a group of data separated by comma. The elements in a list need not be of the same data type.

'''Example:'''
       List_1 = [ 1, 2,3] or 
       List_1 = [&quot;coffee&quot;, &quot;Tea&quot;, &quot;Milk&quot;] or
       List_1 = [1,&quot;coffee&quot;, &quot;Tea&quot;, 3, &quot;5&quot;]

==List Creation==
&lt;pre&gt;a) A list can be created by simply putting values (separated by comma) between square brackets as given below,
       List_1 = [1,&quot;coffee&quot;, &quot;Tea&quot;, 3, &quot;5&quot;] #this creates a list by name List_1 containing following items


Or,
(b)A List can be created from scratch and elements can be added 
        List_2 = [ ]
        List_2.append(&quot;Kala&quot;)
        List_2.append(&quot;Mala&quot;)
Here we use &quot;append&quot; ,which is a function in python that enable us to append or attach an element to a list .
Thus List_2 will now hold [&quot;Kala&quot;,&quot;Mala&quot;]
&lt;/pre&gt;
[[#TOP]]

==Operations and Methods to work with List==
&lt;pre&gt;
a = [25,30,50,90,12,13]
b = [100,300,500,200,250]
&lt;/pre&gt;
&lt;hr&gt;
&lt;table border=2&gt;
  &lt;tr&gt;
    &lt;th&gt;&lt;b&gt;Method/&lt;br&gt;Operator&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Function&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Syntax&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Output&lt;/b&gt;&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;len()&lt;/td&gt;
    &lt;td&gt;Find length of a list&lt;/td&gt;
    &lt;td&gt;len(a)&lt;/td&gt;
    &lt;td&gt;6&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;max()&lt;/td&gt;
    &lt;td&gt;Find maximum element from the list&lt;/td&gt;
    &lt;td&gt;max(a)&lt;/td&gt;
    &lt;td&gt;90&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;min()&lt;/td&gt;
    &lt;td&gt;Find minimum element from the list&lt;/td&gt;
    &lt;td&gt;min(a)&lt;/td&gt;
    &lt;td&gt;12&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sum()&lt;/td&gt;
    &lt;td&gt;Returns sum of all elements of the list&lt;/td&gt;
    &lt;td&gt;sum(a)&lt;/td&gt;
    &lt;td&gt;220&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;reverse()&lt;/td&gt;
    &lt;td&gt;Reverses the original list&lt;/td&gt;
    &lt;td&gt;a.reverse()&lt;/td&gt;
    &lt;td&gt;[13, 12, 90, 50, 30, 25]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sort()&lt;/td&gt;
    &lt;td&gt;Sorts the original list in ascending order&lt;/td&gt;
    &lt;td&gt;a.sort()&lt;/td&gt;
    &lt;td&gt;[12, 13, 25, 30, 50, 90]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sorted()&lt;/td&gt;
    &lt;td&gt;Returns the new sorted list &lt;/td&gt;
    &lt;td&gt;sorted(a)&lt;/td&gt;
    &lt;td&gt;[12, 13, 25, 30, 50, 90]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;insert()&lt;/td&gt;
    &lt;td&gt;Insert at a particular index in the list, and shifts remaining elements&lt;/td&gt;
    &lt;td&gt;a.insert(3,3)&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 3, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;append()&lt;/td&gt;
    &lt;td&gt;Adds elements/object to the end of the list&lt;/td&gt;
    &lt;td&gt;a.append(5)&lt;br&gt;a.append([10,20])&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 5]&lt;br&gt;[25, 30, 50, 90, 12, 13, [10, 20]]&lt;br&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;extend()&lt;/td&gt;
    &lt;td&gt;Adds object to the end of the list as elements not as object&lt;/td&gt;
    &lt;td&gt;a.extend([10,20])&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 10, 20]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;*&amp;nbsp;&amp;nbsp;Repeatation&lt;br&gt;operator&lt;/td&gt;
    &lt;td&gt;Repeat the list for n times and returns a new list&lt;/td&gt;
    &lt;td&gt;a*2&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 25, 30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;+ Concatenation&lt;br&gt;operator&lt;/td&gt;
    &lt;td&gt;Concatenates two lists, and returns a new list&lt;/td&gt;
    &lt;td&gt;a+b&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 100, 300, 500, 200, 250]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;index()&lt;/td&gt;
    &lt;td&gt;Finds index of a particular element in the list or not&lt;/td&gt;
    &lt;td&gt;a.index(25)&lt;br&gt;a.index(0)&lt;br&gt;&lt;/td&gt;
    &lt;td&gt;0&lt;br&gt;&lt;br&gt;ValueError: 0 is not in list&lt;br&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;in operator&lt;/td&gt;
    &lt;td&gt;Finds whether a particular element is in the list or not, returns boolean&lt;/td&gt;
    &lt;td&gt;25 in a&lt;/td&gt;
    &lt;td&gt;True&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;not in operator&lt;/td&gt;
    &lt;td&gt;Checks if element is not available in list, returns boolean&lt;/td&gt;
    &lt;td&gt;25 not in a&lt;/td&gt;
    &lt;td&gt;False&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;count()&lt;/td&gt;
    &lt;td&gt;Counts the number of occurence of an element in the list&lt;/td&gt;
    &lt;td&gt;a.count(25)&lt;/td&gt;
    &lt;td&gt;1&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;remove()&lt;/td&gt;
    &lt;td&gt;Removes an element from the list&lt;/td&gt;
    &lt;td&gt;a.remove(25)&lt;/td&gt;
    &lt;td&gt; [30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;pop()&lt;/td&gt;
    &lt;td&gt;Delete and return item at index 0&lt;/td&gt;
    &lt;td&gt;a.pop(0)&lt;/td&gt;
    &lt;td&gt;25 , a will be [30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;del&lt;/td&gt;
    &lt;td&gt;Deletes item at a particular index from the list&lt;/td&gt;
    &lt;td&gt;del a[0]&lt;/td&gt;
    &lt;td&gt;[30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;all()&lt;/td&gt;
&lt;td&gt;Returns True, if all items in list are True or it is an empty list&lt;/td&gt;
&lt;td&gt;all([True, True, True])
all([])
&lt;/td&gt;
&lt;td&gt;True&lt;br&gt;
True&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;any()&lt;/td&gt;
&lt;td&gt;Returns True, if any item in list is True else return False&lt;/td&gt;
&lt;td&gt;any([True, True, True])&lt;br&gt;
any([True, False, True])&lt;br&gt;
any([])&lt;/td&gt;
&lt;td&gt;True&lt;br&gt;False&lt;br&gt;False&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;

==Printing the List==
=== Print whole list ===
A list can be printed simply or using a ''for / while'' loop 

 print(List_2)     # To print the entire list
This code will print      
 ['Kala','Mala']     

===Print element at a particular index===
&lt;pre&gt;
Using index position
    List_2[0]     # prints 'Kala' ,i.e,the value at index position 0.
    List_2[1]     # prints 'Mala'.
&lt;/pre&gt;
=== Without using index position ===
&lt;pre&gt;
for item in List_2:   # here item is a variable used to access elements in list.
       print(item)
   This code snippet prints 
    Kala
    Mala
&lt;/pre&gt;
[[#TOP]]

==Search for a particular element in list==
Elements in a list can be searched by one of the two ways:
=== using index() function===
&lt;pre&gt;
ages1 = [11,23,12,23,45]

#if element is available in the list, index() returns the index value on which, the element is present.
print(ages1.index(45))#Output: 4

#if element is not available in the list, index() returns ''ValueError''
print(ages1.index(0))#Output: ValueError:
&lt;/pre&gt;

In programming, if such error occurs, program gets terminated. It can be solved using exception handling.
e.g.
&lt;pre&gt;
ages1 = [11,23,12,23,45]

try:
    print(ages1.index(0))
except ValueError:
    print(&quot;Exception has occured&quot;)    
    print(&quot;Element is not found in the list&quot;)

&lt;/pre&gt;
&lt;pre&gt;
'''Output: 
Exception has occured
Element is not found in the list
'''&lt;/pre&gt;
[[#TOP]]

=== using 'in' operator===
''in'' operator is used to check whether a particular element is available in the list or not.e.g.

&lt;pre&gt;
ages1 = [11,23,12,23,45]
no=11

if no in ages1:
    print(&quot;no is there in the list&quot;)
else:    
    print(&quot;no is NOT there in the list&quot;)
&lt;/pre&gt;
&lt;pre&gt;
#Output: no is there in the list
&lt;/pre&gt;


'''Number is not there in the list'''
&lt;pre&gt;
ages1 = [11,23,12,23,45]
no=15

if no in ages1:
    print(&quot;no is there in the list&quot;)
else:    
    print(&quot;no is NOT there in the list&quot;)
&lt;/pre&gt;
&lt;pre&gt;
Output: no is NOT there in the list
&lt;/pre&gt;
[[#TOP]]

==Updating the List==
The lists can be updated using ''append'' or ''insert'' function.  Append adds the element to the end of the list and Insert adds the element in the specified position.
&lt;pre&gt;
   # add the element 'Sheela' to the end of the list.
   List_2.append(&quot;Sheela&quot;)    
   print (List_2) will output 
   ['Kala', 'Mala', 'Sheela']
&lt;/pre&gt;
   &lt;pre&gt;
# add the element &quot;Bala&quot; in the list at the index 1.
   List_2.insert(1,&quot;Bala&quot;)    
   print (List_2) will output 
   ['Kala', 'Bala','Mala', 'Sheela']
&lt;/pre&gt;

=== Extend the list by adding elements of other list at end using extend()===
&lt;pre&gt;
ages = [11,23,12,23,45]
ages.extend([57,58])
print(ages)
&lt;/pre&gt;

&lt;pre&gt;
#Output: [11, 23, 12, 23, 45, 57, 58]
&lt;/pre&gt;

==== Difference between ''append and extend'' ====
Difference between append and extend can be easily understood, by the following example.

&lt;pre&gt;
appendlist = [11,23,12,23,45]
appendlist.append([57,58])

extendlist= [11,23,12,23,45]
extendlist.extend([57,58])
&lt;/pre&gt;

&lt;pre&gt;
'''Output:
[11, 23, 12, 23, 45, [57, 58]]
[11, 23, 12, 23, 45, 57, 58]'''
&lt;/pre&gt;

[[#TOP]]

==Basic Operations on List==
===Frequency of Occurrence===
list.count(object) will return the number of times the object occur in the list.
  '''Example'''
    ages = [11,23,12,23,45,43,22,24,23]
    ages.count(23) will return
    3
    ages.count(100) will return
    0

===Length of the List===
len(list) will return the length of the list ie. the number of objects in the list.
  '''Example'''
&lt;pre&gt;
    ages = [11,23,12,23,45,43,22,24,23]
    len(ages) # Output: 9
&lt;/pre&gt;

To print the objects in the list either use ''for item in list'' or ''for index in range(len(list))''
&lt;pre&gt;
    for item in ages:       
        print (item)  
        (OR)
    for index in range(len(ages)) :
        print (ages[index])
&lt;/pre&gt;

===Sort the List===
list.sort() will sort the list in ascending order
  '''Example'''
    ages = [11,23,12,23,45,43,22,24,23]
    ages.sort() 
    print (ages) 
    [11, 12, 22, 23, 23, 23, 24, 43, 45]

[[#TOP]]

===Sort the List using sorted() function===
sorted(list1) will sort the list and return a new list, it doesn't modify the original list
&lt;br&gt;'''Example: Sort in ascending order'''
&lt;pre&gt;
ages = [11,23,12,23,45,43,22,24,23]
newList=sorted(ages)
print(newList)

#Output: [11, 12, 22, 23, 23, 23, 24, 43, 45]
&lt;/pre&gt;

&lt;br&gt;'''Example: Sort in descending order'''
&lt;pre&gt;
ages = [11,23,12,23,45,43,22,24,23]
newList=sorted(ages,reverse=True)
print(newList)

#Output: [45, 43, 24, 23, 23, 23, 22, 12, 11]
&lt;/pre&gt;

===Reverse the List===
list.reverse() will reverse the original list
  '''Example'''
    ages = [11, 12, 22, 23, 23, 23, 24, 43, 45]
    ages.reverse()
    print (ages)
    [45, 43, 24, 23, 23, 23, 22, 12, 11]

Both sort() and reverse() list operation will work on numeric and alphanumeric data list.

A special use of the reverse() function is to descend a list that is sorted in ascending order.

  '''Example'''
&lt;pre&gt;
ages = [11, 12, 22, 23, 23, 23, 24, 43, 45]
ages.sort()
print(ages)
ages.reverse()
print(ages)
&lt;/pre&gt;

===Slicing===
Used to retrieve an object or objects in a range as a list  
  '''Example'''

Use ''list[index]'' to retrieve the object at the given index
&lt;pre&gt;
In [1]: student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
In [2]: student[3]     #Object at index 3.  Remember index starts at 0
Out[2]: 'Geetha'      
&lt;/pre&gt;

Use ''list[start_index : end_index + 1]'' to retrieve objects from the start_index to end_index 
&lt;pre&gt;
In [3]: student[2:4]     # Objects from index 2 to 3 as List. Note the [ and ]
Out[3]: ['Vijay', 'Geetha']   
&lt;/pre&gt;

Use ''list[:]'' to retrieve objects from the starting of the list to the end of the list. 
The default start value will be the starting index of the list (i.e. 0) and the default end value
will be the length of the list 
&lt;pre&gt;
In [4]: student[:]        # prints the entire list
Out[4]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma', 'Janani']
&lt;/pre&gt;
&lt;pre&gt;
In [5]: student[:5]       # prints the objects from the start of the list upto object at index 4
Out[5]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran']
&lt;/pre&gt;
&lt;pre&gt;
In [6]: student[2:]       # prints the objects from index 2 upto the end of the list
Out[6]: ['Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma', 'Janani']
&lt;/pre&gt;

Negative index too is available in Python. It starts from last element of the list. i.e.
&lt;pre&gt;
In [7]:student[-1]        #prints last index of list
Out[7]: 'Janani'
&lt;/pre&gt;
&lt;pre&gt;
In [8]:student[-1:-8]     #prints empty list
Out[8]: []
&lt;/pre&gt;
&lt;pre&gt;
In [9]:student[-8:-1]     #prints -8th index to -1st index elements
Out[9]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma']
&lt;/pre&gt;

[[#TOP]]

===Removing Item from list ===
----

Is used to remove a specific item from the list.

'''Example:'''
 
Use list.remove(entry/value)  Or   del list[index]    Or list.pop(index)
&lt;pre&gt;
student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
student.remove(&quot;Arun&quot;)   #This will delete item &quot;Arun&quot;
         Or    
del student[0]           # This will delete item at index 0
         Or
student.pop(0)         # This will delete and return item at index 0
print(student)    
Output: &quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
&lt;/pre&gt;

[[#TOP]]

===Delete list ===
----
Used to delete complete list

'''Example'''

Use del &lt;list name&gt;
&lt;pre&gt;
student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
del student&lt;/pre&gt;

===Concatenation of two lists===
----
''+'' is the concatenation operator which is used concatenate two lists. 
&lt;pre&gt;
ages1 = [11,23,12,23,45]
ages2 = [25, 24, 43, 47]
age=ages1+ages2
print(age)
#Output: [11, 23, 12, 23, 45, 25, 24, 43, 47]
&lt;/pre&gt;

===Repeatation of a list ===
----
''*'' is the operator to repeat a particular list.
&lt;pre&gt;
ages1 = [11,23,12,23,45]
age=ages1*5 #ages1 list is repeated 5 times and stroed in ''age'' list
print(age)

#Output: [11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45]
&lt;/pre&gt;

=== all and any for List===
all() and any() are special functions to check whether all elements in iterable is ''True'' or any element is ''True''
&lt;ol&gt;
&lt;li&gt;If all elements in a list are ''True'', '''all()''' will return ''True''&lt;/li&gt;
&lt;li&gt;If iterable is ''empty'', '''all()''' will return ''True''&lt;/li&gt;
&lt;li&gt;If iterable contains at least one ''True'', '''any()''' will return ''True''&lt;/li&gt;
&lt;li&gt;If iterable is ''empty'', '''any()''' will return ''False''&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;
lsit=[True, True, True, True]
print(all(lsit))#Output: True
print(any(lsit))#Output: True

lsit1=[True, False, True, True]
print(all(lsit1))#Output: False
print(any(lsit1))#Output: True

lsit2=[False,False,False]
print(all(lsit2))#Output: False
print(any(lsit2))#Output: False

lsit3=[]
print(all(lsit3))#Output: True
print(any(lsit3))#Output: False
&lt;/pre&gt;

==Conditional Statements==
&lt;pre&gt;Conditionals are used to check the condition and change the flow of the program 
accordingly. They are realized in programming languages through if statement. The 
syntax is as follows :
&lt;pre&gt;
         if condition : 
            statement
&lt;/pre&gt;
    '''Note:''' Do not forget indentation (inserting space/tab) in the line after the
 if condition.
    
    In case you want to execute a set of statements when a condition is true and another

set of statement when the condition is false.
&lt;pre&gt;
         if condition : 
            statement 1
         else :
            statement 2
&lt;/pre&gt;

&lt;pre&gt;    
    Multiple if-else statements can be written as follows:
         if condition_1 : 
            statement 1
         elif condition_2 : # 'elif' is short for 'else if'
            statement 2
         elif condition_3 :
            statement 3
        .
        .
         else :
            final statement
&lt;/pre&gt;

[[#TOP]]

=Loops and Conditionals : Fizzbuzz=
====Loops====
Loops are used to execute a set of repetitive statements. They are realised
through 'while' and 'for' loops in programming languages. The syntax of 'for' loop is 
as follows :
&lt;pre&gt;
for LOOPVARIABLE in SEQUENCE: 
            STATEMENTS&lt;/pre&gt;

    '''e.g.''' to print all the data from a list we can write:
&lt;pre&gt;
        for item in list_name
            print(item)&lt;/pre&gt;
    OR
&lt;pre&gt;
        for index in range(len(list_name))
            print(list_name[index])
 &lt;/pre&gt;   
    The syntax for while loop is as follows :
    
        while BOOLEANEXPRESSION: 
            STATEMENTS
            INCREMENT/DECREMENT
    
    '''e.g.''' if we want to print all numbers from 1 to 10
        i=1
        while i&lt;=10 :
            print(i,&quot; &quot;)
            i=i+1
    
    'while' loop has indefinite iteration (run-time unknown). So, there must be loop
 break statement in it.
 Whereas 'for' loop is definite in nature (i.e. known or predictable span).&lt;br&gt;

&lt;b&gt;NOTE: Python doesn't have anything like do-while loop.&lt;/b&gt;
&lt;/pre&gt;
[[#TOP]]

==Implementation==
Here, we try to demonstrate the concept of loops and conditionals through a game called Fizzbuzz. The rules are as follows :&lt;br/&gt;
[[File:fizzBuzz.gif]]

• if input number is a multiple of ’3’ print ”Fizz”
&lt;br/&gt;
• if input number is a multiple of ’5’ print ”Buzz”
&lt;br/&gt;
• if input number is a multiple of both '3' and ’5’ print ”FizzBuzz”
&lt;br/&gt;
The pseudo code is as follows :
&lt;pre&gt;
   If input no % 3 == 0 and  input no % 5 == 0 : 
       print ”Fizzbuzz”
   else if input no % 3 == 0 : 
       print ”Fizz”
   else if input no % 5 == 0 : 
       print ”Buzz”
   else :
       print the input no
&lt;/pre&gt;
The order of statements execution matters to get the desired output. The highest priority condition should be first followed by other. In fizzbuzz programming, first checking should be done for both divisibility of 3 and 5. If condition not satisfied only then it should check individually for 3 or 5. So carefully choosing the order is crucial for better programming.
Note: There is some effect of present condition statements chosen on next conditions statements. That is why in first attempt fizzbuzz programming got struck.

Example: 
&lt;pre&gt;
#Code to achieve the above requirement in python3.
i = int(input(&quot;Enter the number&quot;)) 
if i%3 == 0 and i%5 == 0: print(i,&quot;FizzBuzz&quot;)  
elif i%5 == 0: print(i,&quot;Buzz&quot;)
elif i%3 == 0: print(i,&quot;Fizz&quot;)
else: print(i)
&lt;/pre&gt;
Lets put the same into a loop for a range given by the user.
&lt;pre&gt;
def fizzbuzzgame(start,stop):
    for i in range(start,stop+1):
        if i%3 == 0 and i%5 == 0:
            print(i,&quot;FizzBuzz&quot;)
        elif i%5 == 0:
            print(i,&quot;Buzz&quot;)
        elif i%3 == 0:
            print(i,&quot;Fizz&quot;)
        else: print(i)

fizzbuzzgame(50,100)
&lt;/pre&gt;


=== Fizz Buzz game in Interactive mode with Score ===
'''By Ms. Ami Tusharkant Choksi'''
&lt;pre&gt;
def fizzbuzzgame(i):
        if i%3 == 0 and i%5 == 0:
            print(i,&quot;FizzBuzz&quot;)
            return(&quot;fzbz&quot;)
        elif i%5 == 0:
            print(i,&quot;Buzz&quot;)
            return(&quot;bz&quot;)
        elif i%3 == 0:
            print(i,&quot;Fizz&quot;)
            return(&quot;fz&quot;)
        else:
            print(i)
            return(&quot;no&quot;)

ch = 'y'
fizzbuzz=0
fizz=0
buzz=0
nothing=0
print(&quot;&quot;&quot;
 _____  ____  _____  _____  ____   __ __  _____  _____       ____   ____  ___ ___    ___ 
|     ||    ||     ||     ||    \ |  |  ||     ||     |     /    | /    ||   |   |  /  _]
|   __| |  | |__/  ||__/  ||  o  )|  |  ||__/  ||__/  |    |   __||  o  || _   _ | /  [_ 
|  |_   |  | |   __||   __||     ||  |  ||   __||   __|    |  |  ||     ||  \_/  ||    _]
|   _]  |  | |  /  ||  /  ||  O  ||  :  ||  /  ||  /  |    |  |_ ||  _  ||   |   ||   [_ 
|  |    |  | |     ||     ||     ||     ||     ||     |    |     ||  |  ||   |   ||     |
|__|   |____||_____||_____||_____| \__,_||_____||_____|    |___,_||__|__||___|___||_____|
                                                                                         
&quot;&quot;&quot;)   

while(ch == 'y'):
    n=int(input(&quot;Enter a Number : &quot;))
    winLoose=fizzbuzzgame(n)
    if(winLoose == &quot;fz&quot;):
        fizz+=1
    elif(winLoose == &quot;bz&quot;):
        buzz+=1
    elif(winLoose == &quot;fzbz&quot;):
        fizzbuzz+=1
    ch=input(&quot;Do you want to continue playing the game : (y/n)&quot;)
    if(ch=='n'):
        print('Congratulations, your score is\n FizzBuzz:%d\nFizz:%d\nBuzz:%d' %
(fizzbuzz,fizz,buzz))
    
'''Sample Output:

 _____  ____  _____  _____  ____   __ __  _____  _____       ____   ____  ___ ___    ___ 
|     ||    ||     ||     ||    \ |  |  ||     ||     |     /    | /    ||   |   |  /  _]
|   __| |  | |__/  ||__/  ||  o  )|  |  ||__/  ||__/  |    |   __||  o  || _   _ | /  [_ 
|  |_   |  | |   __||   __||     ||  |  ||   __||   __|    |  |  ||     ||  \_/  ||    _]
|   _]  |  | |  /  ||  /  ||  O  ||  :  ||  /  ||  /  |    |  |_ ||  _  ||   |   ||   [_ 
|  |    |  | |     ||     ||     ||     ||     ||     |    |     ||  |  ||   |   ||     |
|__|   |____||_____||_____||_____| \__,_||_____||_____|    |___,_||__|__||___|___||_____|
                                                                                         

Enter a Number : 666
666 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 777
777 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 555
555 FizzBuzz
Do you want to continue playing the game : (y/n)y
Enter a Number : 1
1
Do you want to continue playing the game : (y/n)y
Enter a Number : 789
789 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 25
25 Buzz
Do you want to continue playing the game : (y/n)n
Congratulations, your score is

FizzBuzz:1
Fizz:3
Buzz:1

&lt;/pre&gt;

=Crowd Computing: Just Estimate=
==Wisdom of Crowds==
The concept of ’Wisdom of Crowds’ was proposed by Francis Galton. A weight-judging competition was carried on at the annual show of the West of England Fat Stock and Poultry Exhibition recently held at Plymouth, A fat ox having been selected, competitors bought stamped and numbered cards, each, on which to inscribe their respective names, addresses, and estimates of what the ox would weigh after it had been slaughtered. Those who guessed most successfully received prizes. About 8oo tickets were issued to the par- ticipants. The middlemost estimate of all the estimates recorded was 1207 lbs and the actual weight of the ox was 1198 lbs.

==Our Experiment==
The crowd had to guess the number of candies/gems in a jar. Around 75 people participated in the experiment. The actual number of gems in the jar were 375. The median of all estimates came out to be 300 and the mean of all the estimates came out to be around 396. Median underestimated and mean overestimated the actual value. So according to recent studies, Trimmed mean must be used as an aggregate measure to estimate where Wisdom of Crowds is involved.
[[File:Gemsjar.jpg|center|200px|caption]]

===Trimmed Mean===
In these kinds of experiments, 10% trimmed mean is usually followed. For calculating 10% trimmed mean, remove 10% smallest and 10% largest values from the sample. Calculate the mean of the sample obtained. In the above experiment, the trimmed mean came out to be around 351 which is very close to the actual value.

==Implementation==
Here, we try to demonstrate the concept of trimmed mean through crowd computing.
 Input a list of estimates done by the crowd .
 Sort the list.
 Remove the 10% smallest values.
 Remove the 10% largest values.
 Calculate the mean of the new list obtained .&lt;hr&gt;

==Data of Experiment==       
    Estimates =[1000,1010,1786,2000,1500,1500,100,120,150,150,150,170,175,180,197,200,200,200,200,200,200,220,220,220,220,234,250,250,250,250,250,250,250,250,250,263,270,275,275,286,300,
                300,300,300,300,300,300,300,320,350,350,350,400, 400,400,400,400,450,467,500,500,500,500,500,500,500,550,550,600,600,600,650,700,700,720]

    '''CODE:'''
&lt;pre&gt;
Estimates = [1000,1010,1786,2000,1500,1500,100,120,150,150,150,170,175,180,197,200,200,200,200,200,200,220,220,220,220,234,250,250,250,250,250,250,250,250,250,263,270,275,275,286,300,                300,300,300,300,300,300,300,320,350,350,350,400,400,400,400,400,450,467,500,500,500,500,500,500,500,550,550,600,600,600,650,700,700,720]
Estimates.sort()
offset = int(0.10*len(Estimates))
for i in range(offset):
       del Estimates[0]
       del Estimates[-1]
Sum = 0    
for i in range(len(Estimates)):
       Sum += Estimates[i]
Mean_Value = Sum/len(Estimates)
print(&quot;Mean : &quot;, int(Mean_Value))
#Output:
Mean :  351
&lt;/pre&gt;
&lt;hr&gt;
==Trimmed Mean for the above example== 
&lt;h3&gt;Using scipy library&lt;/h3&gt;
&lt;pre&gt;
#import scipy to use the method of trim_mean
from scipy import stats
trimMean = stats.trim_mean(Estimates, 0.1) # Trim 10% at both ends
print(&quot;Trimmed Mean : &quot;,trimMean)
#Output:
Trimmed Mean :  335.1020408163265
&lt;/pre&gt;

&lt;h3&gt;Without using scipy library&lt;/h3&gt;
&lt;pre&gt;
#Trimmed mean with 10%
p=10/100
#sorted data
data=[2, 4, 6, 7, 11, 21, 81, 90, 105, 121]
n = len(data)
#Remove elements from both end
rem=int(n*p)
newData = data[rem:-rem]
mean = 0
for i in newData:
    mean += i
mean = int(mean/len(newData))
print(&quot;Trimmed mean : &quot;,mean)
#Output: Trimmed mean :  40
&lt;/pre&gt;
[[#Top]]

=Jumbled_Words Permutations: Jumbled Words=
==What are Permutations ?==
A permutation also called ordering of selected number of elements from a list denoted by nPr here we are choosing all elements of a list and so n=r&lt;br&gt;
nPr=n!/(n-r)!&lt;br&gt; as n=r
nPn=n!&lt;br&gt; which gives all possible arrangement of elements present in a list.

 For example, permutations of list [1,2,3] are [1,2,3], [1,3,2], [2,1,3], [2,3,1], 
[3,1,2], and [3,2,1]. 
The number of permutations of a list of elements nPn is given by n!. For example, there are 2! = 2 x 1 = 2 permutations of [1,2], namely [1,2] and [2,1], and 3! = 3 x 2 x 1 = 6 permutations of [1,2,3], as mentioned above.&lt;br/&gt;
[[File:Permutations.jpg]]

==Implementation==
Here, we try to demonstrate the concept of permutations through jumbled words. It is a two player game in which one person presents the other person a different permutation of the word in his mind. The other person has to guess the right word. If he guesses, the he wins otherwise he loses.
 Input an list of words.
 Randomly pick a word from the list of words .
 Shuffle this word and present it to the other player.
 if word guesses by the player is same as the one picked from list of w
     player wins
 else
     player loses

ALTERNATE CODE TO GENERATE THIS GAME:
&lt;pre&gt;
import random
p1=input(&quot;enter player 1 name:&quot;)
p2=input(&quot;enter player 2 name:&quot;)
l=[&quot;rainbow&quot;,&quot;computer&quot;,&quot;robot&quot;,&quot;butter&quot;,&quot;vegetable&quot;,&quot;science&quot;,&quot;correct&quot;]
c1=c2=a1=a2=f1=f2=0
k=1
i=3
def play():
    n=random.choice(l)        ##n=chooses a word from list l
    l1=[]
    for j in n:
       l1.append(j)      ##creates a list for word in n
    for t in range(len(l1)):
       p=random.choice(l1)     ##this randomly displays letters in the list
       print(p)
       l1.remove(p)          ##to avoid the repetition of a letter
    s=input(&quot;enter the word:&quot;)
    if(s==n):
        print(&quot;correct&quot;)
        return 1
    else:
        print(&quot;not correct&quot;)
        print(&quot;answer is&quot;,n)
        return 0
def stat():
     print(&quot;player 1:&quot;)
     print(&quot;score:&quot;,c1)
     print(&quot;answered:&quot;,a1)
     print(&quot;failed:&quot;,f1)
     print(&quot;.............&quot;)
     print(&quot;player 2:&quot;)
     print(&quot;score:&quot;,c2)
     print(&quot;answered:&quot;,a2)
     print(&quot;failed&quot;,f2)
     if(c1&gt;c2):
         print(p1,&quot; won over &quot;,p2)
     elif(c1==c2):
         print(&quot;draw game&quot;)
     else:
         print(p2,&quot; won over &quot;,p1) 
while(i!=4):
      if(i==3):
         if(k==1):
             print(&quot;player 1 turn&quot;)
             print(&quot;your jumbled word is:&quot;)
             k=k+1
             m=play()
             if(m==1):      ##if guessed answer is correct,then score and no.of answered count will be increased
                c1+=1
                a1+=1
             else:
                f1+=1       ##else count of no.of failed to answered will be incremented
         else:
             print(&quot;player 2 turn&quot;)
             print(&quot;your jumbled word is:&quot;)
             k=k-1
             m=play()
             if(m==1):
                c2=c2+1
                a2=a2+1
             else:
                f2=f2+1
       if(i==2):
             print(&quot;present status&quot;)
             stat()
       i=int(input(&quot;enter your choice  1.stop 2.status 3.continue&quot;))
       if(i==1):
             stat()
             i=i+3
&lt;/pre&gt;
&lt;hr&gt;
=== JumbledWord Simple Logic, In Short ===
[[File:jumbledWord.gif]]
&lt;hr&gt;
'''Logic to create a Jumbled Word'''
&lt;hr&gt;
&lt;pre&gt;
#Get Jumbled Word and print it Horizontally
import random

def getJumbledWord(b):
    jumble=''
    l1 = [ b[i] for i in range(0, len(b)) ]
    for t in range(len(l1)):
       p=random.choice(l1)     ##this randomly gets letters from the list      
       jumble=jumble+p       
       l1.remove(p)
    return jumble

b=input(&quot;Enter a word to make it jumbled : &quot;)
print(&quot;Jumbled Word : &quot;, getJumbledWord(b))
&lt;/pre&gt;
&lt;hr&gt;
'''Another Logic to create a Jumbled Word'''
&lt;hr&gt;
&lt;pre&gt;
b=input(&quot;Enter a word to make it jumbled : &quot;)

def getJumbledWord1(b):
    l1 = [ b[i] for i in range(0, len(b)) ]
    random.shuffle(l1)
    str1 = ''.join(l1)
    return str1

print(&quot;Jumbled Word : &quot;, getJumbledWord1(b))
&lt;/pre&gt;

====Sample Output:====
&lt;pre&gt;
---- Output1 
Enter a word to make it jumbled : butter
Jumbled Word :  tbture

---- Output2 
Enter a word to make it jumbled : petriotism
Jumbled Word :  pittrosime
&lt;/pre&gt;

=Theory of Evolution=

== What is Evolution ? ==
Evolution is the change in heritable characteristics over successive generations. The theory of evolution explains that DNA, which acts as a carrier of genetic information from one generation to other, tends to change or mutate occasionally. These changes are reflected in next generations to come. This is how life has evolved on earth from bacteria to human beings.&lt;br&gt;
[[File:Evolution.png|500px]]

== Implementation ==
&lt;pre&gt;An array representing DNA is stored in a file. As genes are forms of DNA, they contain information to be transferred to forthcoming generations. Assume that information is in the form of bits (in the form of 0s and 1s). A number is picked randomly from 1 to the size of the array. A new parameter has been introduced which decides whether mutation would occur or not. If the value of this new parameter is 1 (It is picked randomly from 1 to 100), then only change is reflected down the generations, otherwise it is not. The pseudo code is as follows :
Input an array containing genetic information .
Randomly generate a number (say m) from 1 to length of the array. Randomly generate other number (say p) from 1 to 100.
 
    if p is equal to 1 then 
        if m is 1 then
          set it to 0
        else
          set it to 1
&lt;/pre&gt;
[[#TOP]]</text>
      <sha1>72awifuxlr34a4hg4q3kl11iw7sj5ic</sha1>
    </revision>
    <revision>
      <id>3570</id>
      <parentid>3569</parentid>
      <timestamp>2018-09-28T02:45:24Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* Loops */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="29440">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_3 Contributors of this page]
*Week 3 Playlist: https://www.youtube.com/playlist?list=PLc_j0TNIaWxOVx_z9jAM2UB3RqYNXaoEo
=List=
List is a flexible data structure used for storing a group of data separated by comma. The elements in a list need not be of the same data type.

'''Example:'''
       List_1 = [ 1, 2,3] or 
       List_1 = [&quot;coffee&quot;, &quot;Tea&quot;, &quot;Milk&quot;] or
       List_1 = [1,&quot;coffee&quot;, &quot;Tea&quot;, 3, &quot;5&quot;]

==List Creation==
&lt;pre&gt;a) A list can be created by simply putting values (separated by comma) between square brackets as given below,
       List_1 = [1,&quot;coffee&quot;, &quot;Tea&quot;, 3, &quot;5&quot;] #this creates a list by name List_1 containing following items


Or,
(b)A List can be created from scratch and elements can be added 
        List_2 = [ ]
        List_2.append(&quot;Kala&quot;)
        List_2.append(&quot;Mala&quot;)
Here we use &quot;append&quot; ,which is a function in python that enable us to append or attach an element to a list .
Thus List_2 will now hold [&quot;Kala&quot;,&quot;Mala&quot;]
&lt;/pre&gt;
[[#TOP]]

==Operations and Methods to work with List==
&lt;pre&gt;
a = [25,30,50,90,12,13]
b = [100,300,500,200,250]
&lt;/pre&gt;
&lt;hr&gt;
&lt;table border=2&gt;
  &lt;tr&gt;
    &lt;th&gt;&lt;b&gt;Method/&lt;br&gt;Operator&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Function&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Syntax&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Output&lt;/b&gt;&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;len()&lt;/td&gt;
    &lt;td&gt;Find length of a list&lt;/td&gt;
    &lt;td&gt;len(a)&lt;/td&gt;
    &lt;td&gt;6&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;max()&lt;/td&gt;
    &lt;td&gt;Find maximum element from the list&lt;/td&gt;
    &lt;td&gt;max(a)&lt;/td&gt;
    &lt;td&gt;90&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;min()&lt;/td&gt;
    &lt;td&gt;Find minimum element from the list&lt;/td&gt;
    &lt;td&gt;min(a)&lt;/td&gt;
    &lt;td&gt;12&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sum()&lt;/td&gt;
    &lt;td&gt;Returns sum of all elements of the list&lt;/td&gt;
    &lt;td&gt;sum(a)&lt;/td&gt;
    &lt;td&gt;220&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;reverse()&lt;/td&gt;
    &lt;td&gt;Reverses the original list&lt;/td&gt;
    &lt;td&gt;a.reverse()&lt;/td&gt;
    &lt;td&gt;[13, 12, 90, 50, 30, 25]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sort()&lt;/td&gt;
    &lt;td&gt;Sorts the original list in ascending order&lt;/td&gt;
    &lt;td&gt;a.sort()&lt;/td&gt;
    &lt;td&gt;[12, 13, 25, 30, 50, 90]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sorted()&lt;/td&gt;
    &lt;td&gt;Returns the new sorted list &lt;/td&gt;
    &lt;td&gt;sorted(a)&lt;/td&gt;
    &lt;td&gt;[12, 13, 25, 30, 50, 90]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;insert()&lt;/td&gt;
    &lt;td&gt;Insert at a particular index in the list, and shifts remaining elements&lt;/td&gt;
    &lt;td&gt;a.insert(3,3)&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 3, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;append()&lt;/td&gt;
    &lt;td&gt;Adds elements/object to the end of the list&lt;/td&gt;
    &lt;td&gt;a.append(5)&lt;br&gt;a.append([10,20])&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 5]&lt;br&gt;[25, 30, 50, 90, 12, 13, [10, 20]]&lt;br&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;extend()&lt;/td&gt;
    &lt;td&gt;Adds object to the end of the list as elements not as object&lt;/td&gt;
    &lt;td&gt;a.extend([10,20])&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 10, 20]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;*&amp;nbsp;&amp;nbsp;Repeatation&lt;br&gt;operator&lt;/td&gt;
    &lt;td&gt;Repeat the list for n times and returns a new list&lt;/td&gt;
    &lt;td&gt;a*2&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 25, 30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;+ Concatenation&lt;br&gt;operator&lt;/td&gt;
    &lt;td&gt;Concatenates two lists, and returns a new list&lt;/td&gt;
    &lt;td&gt;a+b&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 100, 300, 500, 200, 250]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;index()&lt;/td&gt;
    &lt;td&gt;Finds index of a particular element in the list or not&lt;/td&gt;
    &lt;td&gt;a.index(25)&lt;br&gt;a.index(0)&lt;br&gt;&lt;/td&gt;
    &lt;td&gt;0&lt;br&gt;&lt;br&gt;ValueError: 0 is not in list&lt;br&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;in operator&lt;/td&gt;
    &lt;td&gt;Finds whether a particular element is in the list or not, returns boolean&lt;/td&gt;
    &lt;td&gt;25 in a&lt;/td&gt;
    &lt;td&gt;True&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;not in operator&lt;/td&gt;
    &lt;td&gt;Checks if element is not available in list, returns boolean&lt;/td&gt;
    &lt;td&gt;25 not in a&lt;/td&gt;
    &lt;td&gt;False&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;count()&lt;/td&gt;
    &lt;td&gt;Counts the number of occurence of an element in the list&lt;/td&gt;
    &lt;td&gt;a.count(25)&lt;/td&gt;
    &lt;td&gt;1&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;remove()&lt;/td&gt;
    &lt;td&gt;Removes an element from the list&lt;/td&gt;
    &lt;td&gt;a.remove(25)&lt;/td&gt;
    &lt;td&gt; [30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;pop()&lt;/td&gt;
    &lt;td&gt;Delete and return item at index 0&lt;/td&gt;
    &lt;td&gt;a.pop(0)&lt;/td&gt;
    &lt;td&gt;25 , a will be [30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;del&lt;/td&gt;
    &lt;td&gt;Deletes item at a particular index from the list&lt;/td&gt;
    &lt;td&gt;del a[0]&lt;/td&gt;
    &lt;td&gt;[30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;all()&lt;/td&gt;
&lt;td&gt;Returns True, if all items in list are True or it is an empty list&lt;/td&gt;
&lt;td&gt;all([True, True, True])
all([])
&lt;/td&gt;
&lt;td&gt;True&lt;br&gt;
True&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;any()&lt;/td&gt;
&lt;td&gt;Returns True, if any item in list is True else return False&lt;/td&gt;
&lt;td&gt;any([True, True, True])&lt;br&gt;
any([True, False, True])&lt;br&gt;
any([])&lt;/td&gt;
&lt;td&gt;True&lt;br&gt;False&lt;br&gt;False&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;

==Printing the List==
=== Print whole list ===
A list can be printed simply or using a ''for / while'' loop 

 print(List_2)     # To print the entire list
This code will print      
 ['Kala','Mala']     

===Print element at a particular index===
&lt;pre&gt;
Using index position
    List_2[0]     # prints 'Kala' ,i.e,the value at index position 0.
    List_2[1]     # prints 'Mala'.
&lt;/pre&gt;
=== Without using index position ===
&lt;pre&gt;
for item in List_2:   # here item is a variable used to access elements in list.
       print(item)
   This code snippet prints 
    Kala
    Mala
&lt;/pre&gt;
[[#TOP]]

==Search for a particular element in list==
Elements in a list can be searched by one of the two ways:
=== using index() function===
&lt;pre&gt;
ages1 = [11,23,12,23,45]

#if element is available in the list, index() returns the index value on which, the element is present.
print(ages1.index(45))#Output: 4

#if element is not available in the list, index() returns ''ValueError''
print(ages1.index(0))#Output: ValueError:
&lt;/pre&gt;

In programming, if such error occurs, program gets terminated. It can be solved using exception handling.
e.g.
&lt;pre&gt;
ages1 = [11,23,12,23,45]

try:
    print(ages1.index(0))
except ValueError:
    print(&quot;Exception has occured&quot;)    
    print(&quot;Element is not found in the list&quot;)

&lt;/pre&gt;
&lt;pre&gt;
'''Output: 
Exception has occured
Element is not found in the list
'''&lt;/pre&gt;
[[#TOP]]

=== using 'in' operator===
''in'' operator is used to check whether a particular element is available in the list or not.e.g.

&lt;pre&gt;
ages1 = [11,23,12,23,45]
no=11

if no in ages1:
    print(&quot;no is there in the list&quot;)
else:    
    print(&quot;no is NOT there in the list&quot;)
&lt;/pre&gt;
&lt;pre&gt;
#Output: no is there in the list
&lt;/pre&gt;


'''Number is not there in the list'''
&lt;pre&gt;
ages1 = [11,23,12,23,45]
no=15

if no in ages1:
    print(&quot;no is there in the list&quot;)
else:    
    print(&quot;no is NOT there in the list&quot;)
&lt;/pre&gt;
&lt;pre&gt;
Output: no is NOT there in the list
&lt;/pre&gt;
[[#TOP]]

==Updating the List==
The lists can be updated using ''append'' or ''insert'' function.  Append adds the element to the end of the list and Insert adds the element in the specified position.
&lt;pre&gt;
   # add the element 'Sheela' to the end of the list.
   List_2.append(&quot;Sheela&quot;)    
   print (List_2) will output 
   ['Kala', 'Mala', 'Sheela']
&lt;/pre&gt;
   &lt;pre&gt;
# add the element &quot;Bala&quot; in the list at the index 1.
   List_2.insert(1,&quot;Bala&quot;)    
   print (List_2) will output 
   ['Kala', 'Bala','Mala', 'Sheela']
&lt;/pre&gt;

=== Extend the list by adding elements of other list at end using extend()===
&lt;pre&gt;
ages = [11,23,12,23,45]
ages.extend([57,58])
print(ages)
&lt;/pre&gt;

&lt;pre&gt;
#Output: [11, 23, 12, 23, 45, 57, 58]
&lt;/pre&gt;

==== Difference between ''append and extend'' ====
Difference between append and extend can be easily understood, by the following example.

&lt;pre&gt;
appendlist = [11,23,12,23,45]
appendlist.append([57,58])

extendlist= [11,23,12,23,45]
extendlist.extend([57,58])
&lt;/pre&gt;

&lt;pre&gt;
'''Output:
[11, 23, 12, 23, 45, [57, 58]]
[11, 23, 12, 23, 45, 57, 58]'''
&lt;/pre&gt;

[[#TOP]]

==Basic Operations on List==
===Frequency of Occurrence===
list.count(object) will return the number of times the object occur in the list.
  '''Example'''
    ages = [11,23,12,23,45,43,22,24,23]
    ages.count(23) will return
    3
    ages.count(100) will return
    0

===Length of the List===
len(list) will return the length of the list ie. the number of objects in the list.
  '''Example'''
&lt;pre&gt;
    ages = [11,23,12,23,45,43,22,24,23]
    len(ages) # Output: 9
&lt;/pre&gt;

To print the objects in the list either use ''for item in list'' or ''for index in range(len(list))''
&lt;pre&gt;
    for item in ages:       
        print (item)  
        (OR)
    for index in range(len(ages)) :
        print (ages[index])
&lt;/pre&gt;

===Sort the List===
list.sort() will sort the list in ascending order
  '''Example'''
    ages = [11,23,12,23,45,43,22,24,23]
    ages.sort() 
    print (ages) 
    [11, 12, 22, 23, 23, 23, 24, 43, 45]

[[#TOP]]

===Sort the List using sorted() function===
sorted(list1) will sort the list and return a new list, it doesn't modify the original list
&lt;br&gt;'''Example: Sort in ascending order'''
&lt;pre&gt;
ages = [11,23,12,23,45,43,22,24,23]
newList=sorted(ages)
print(newList)

#Output: [11, 12, 22, 23, 23, 23, 24, 43, 45]
&lt;/pre&gt;

&lt;br&gt;'''Example: Sort in descending order'''
&lt;pre&gt;
ages = [11,23,12,23,45,43,22,24,23]
newList=sorted(ages,reverse=True)
print(newList)

#Output: [45, 43, 24, 23, 23, 23, 22, 12, 11]
&lt;/pre&gt;

===Reverse the List===
list.reverse() will reverse the original list
  '''Example'''
    ages = [11, 12, 22, 23, 23, 23, 24, 43, 45]
    ages.reverse()
    print (ages)
    [45, 43, 24, 23, 23, 23, 22, 12, 11]

Both sort() and reverse() list operation will work on numeric and alphanumeric data list.

A special use of the reverse() function is to descend a list that is sorted in ascending order.

  '''Example'''
&lt;pre&gt;
ages = [11, 12, 22, 23, 23, 23, 24, 43, 45]
ages.sort()
print(ages)
ages.reverse()
print(ages)
&lt;/pre&gt;

===Slicing===
Used to retrieve an object or objects in a range as a list  
  '''Example'''

Use ''list[index]'' to retrieve the object at the given index
&lt;pre&gt;
In [1]: student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
In [2]: student[3]     #Object at index 3.  Remember index starts at 0
Out[2]: 'Geetha'      
&lt;/pre&gt;

Use ''list[start_index : end_index + 1]'' to retrieve objects from the start_index to end_index 
&lt;pre&gt;
In [3]: student[2:4]     # Objects from index 2 to 3 as List. Note the [ and ]
Out[3]: ['Vijay', 'Geetha']   
&lt;/pre&gt;

Use ''list[:]'' to retrieve objects from the starting of the list to the end of the list. 
The default start value will be the starting index of the list (i.e. 0) and the default end value
will be the length of the list 
&lt;pre&gt;
In [4]: student[:]        # prints the entire list
Out[4]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma', 'Janani']
&lt;/pre&gt;
&lt;pre&gt;
In [5]: student[:5]       # prints the objects from the start of the list upto object at index 4
Out[5]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran']
&lt;/pre&gt;
&lt;pre&gt;
In [6]: student[2:]       # prints the objects from index 2 upto the end of the list
Out[6]: ['Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma', 'Janani']
&lt;/pre&gt;

Negative index too is available in Python. It starts from last element of the list. i.e.
&lt;pre&gt;
In [7]:student[-1]        #prints last index of list
Out[7]: 'Janani'
&lt;/pre&gt;
&lt;pre&gt;
In [8]:student[-1:-8]     #prints empty list
Out[8]: []
&lt;/pre&gt;
&lt;pre&gt;
In [9]:student[-8:-1]     #prints -8th index to -1st index elements
Out[9]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma']
&lt;/pre&gt;

[[#TOP]]

===Removing Item from list ===
----

Is used to remove a specific item from the list.

'''Example:'''
 
Use list.remove(entry/value)  Or   del list[index]    Or list.pop(index)
&lt;pre&gt;
student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
student.remove(&quot;Arun&quot;)   #This will delete item &quot;Arun&quot;
         Or    
del student[0]           # This will delete item at index 0
         Or
student.pop(0)         # This will delete and return item at index 0
print(student)    
Output: &quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
&lt;/pre&gt;

[[#TOP]]

===Delete list ===
----
Used to delete complete list

'''Example'''

Use del &lt;list name&gt;
&lt;pre&gt;
student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
del student&lt;/pre&gt;

===Concatenation of two lists===
----
''+'' is the concatenation operator which is used concatenate two lists. 
&lt;pre&gt;
ages1 = [11,23,12,23,45]
ages2 = [25, 24, 43, 47]
age=ages1+ages2
print(age)
#Output: [11, 23, 12, 23, 45, 25, 24, 43, 47]
&lt;/pre&gt;

===Repeatation of a list ===
----
''*'' is the operator to repeat a particular list.
&lt;pre&gt;
ages1 = [11,23,12,23,45]
age=ages1*5 #ages1 list is repeated 5 times and stroed in ''age'' list
print(age)

#Output: [11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45]
&lt;/pre&gt;

=== all and any for List===
all() and any() are special functions to check whether all elements in iterable is ''True'' or any element is ''True''
&lt;ol&gt;
&lt;li&gt;If all elements in a list are ''True'', '''all()''' will return ''True''&lt;/li&gt;
&lt;li&gt;If iterable is ''empty'', '''all()''' will return ''True''&lt;/li&gt;
&lt;li&gt;If iterable contains at least one ''True'', '''any()''' will return ''True''&lt;/li&gt;
&lt;li&gt;If iterable is ''empty'', '''any()''' will return ''False''&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;
lsit=[True, True, True, True]
print(all(lsit))#Output: True
print(any(lsit))#Output: True

lsit1=[True, False, True, True]
print(all(lsit1))#Output: False
print(any(lsit1))#Output: True

lsit2=[False,False,False]
print(all(lsit2))#Output: False
print(any(lsit2))#Output: False

lsit3=[]
print(all(lsit3))#Output: True
print(any(lsit3))#Output: False
&lt;/pre&gt;

==Conditional Statements==
&lt;pre&gt;Conditionals are used to check the condition and change the flow of the program 
accordingly. They are realized in programming languages through if statement. The 
syntax is as follows :
&lt;pre&gt;
         if condition : 
            statement
&lt;/pre&gt;
    '''Note:''' Do not forget indentation (inserting space/tab) in the line after the
 if condition.
    
    In case you want to execute a set of statements when a condition is true and another

set of statement when the condition is false.
&lt;pre&gt;
         if condition : 
            statement 1
         else :
            statement 2
&lt;/pre&gt;

&lt;pre&gt;    
    Multiple if-else statements can be written as follows:
         if condition_1 : 
            statement 1
         elif condition_2 : # 'elif' is short for 'else if'
            statement 2
         elif condition_3 :
            statement 3
        .
        .
         else :
            final statement
&lt;/pre&gt;

[[#TOP]]

=Loops and Conditionals : Fizzbuzz=
====Loops====
Loops are used to execute a set of repetitive statements. They are realised
through 'while' and 'for' loops in programming languages. The syntax of 'for' loop is 
as follows :
&lt;pre&gt;
for LOOPVARIABLE in SEQUENCE: 
            STATEMENTS&lt;/pre&gt;

    '''e.g.''' to print all the data from a list we can write:
&lt;pre&gt;
        for item in list_name
            print(item)&lt;/pre&gt;
    OR
&lt;pre&gt;
        for index in range(len(list_name))
            print(list_name[index])
 &lt;/pre&gt;   
    The syntax for while loop is as follows :
    
        while BOOLEANEXPRESSION: 
            STATEMENTS
            INCREMENT/DECREMENT
    
    '''e.g.''' if we want to print all numbers from 1 to 10
&lt;pre&gt;
        i=1
        while i&lt;=10 :
            print(i,&quot; &quot;)
            i=i+1
    &lt;/pre&gt;
    'while' loop has indefinite iteration (run-time unknown). So, there must be loop
 break statement in it.
 Whereas 'for' loop is definite in nature (i.e. known or predictable span).&lt;br&gt;

&lt;b&gt;NOTE: Python doesn't have anything like do-while loop.&lt;/b&gt;

[[#TOP]]

==Implementation==
Here, we try to demonstrate the concept of loops and conditionals through a game called Fizzbuzz. The rules are as follows :&lt;br/&gt;
[[File:fizzBuzz.gif]]

• if input number is a multiple of ’3’ print ”Fizz”
&lt;br/&gt;
• if input number is a multiple of ’5’ print ”Buzz”
&lt;br/&gt;
• if input number is a multiple of both '3' and ’5’ print ”FizzBuzz”
&lt;br/&gt;
The pseudo code is as follows :
&lt;pre&gt;
   If input no % 3 == 0 and  input no % 5 == 0 : 
       print ”Fizzbuzz”
   else if input no % 3 == 0 : 
       print ”Fizz”
   else if input no % 5 == 0 : 
       print ”Buzz”
   else :
       print the input no
&lt;/pre&gt;
The order of statements execution matters to get the desired output. The highest priority condition should be first followed by other. In fizzbuzz programming, first checking should be done for both divisibility of 3 and 5. If condition not satisfied only then it should check individually for 3 or 5. So carefully choosing the order is crucial for better programming.
Note: There is some effect of present condition statements chosen on next conditions statements. That is why in first attempt fizzbuzz programming got struck.

Example: 
&lt;pre&gt;
#Code to achieve the above requirement in python3.
i = int(input(&quot;Enter the number&quot;)) 
if i%3 == 0 and i%5 == 0: print(i,&quot;FizzBuzz&quot;)  
elif i%5 == 0: print(i,&quot;Buzz&quot;)
elif i%3 == 0: print(i,&quot;Fizz&quot;)
else: print(i)
&lt;/pre&gt;
Lets put the same into a loop for a range given by the user.
&lt;pre&gt;
def fizzbuzzgame(start,stop):
    for i in range(start,stop+1):
        if i%3 == 0 and i%5 == 0:
            print(i,&quot;FizzBuzz&quot;)
        elif i%5 == 0:
            print(i,&quot;Buzz&quot;)
        elif i%3 == 0:
            print(i,&quot;Fizz&quot;)
        else: print(i)

fizzbuzzgame(50,100)
&lt;/pre&gt;


=== Fizz Buzz game in Interactive mode with Score ===
'''By Ms. Ami Tusharkant Choksi'''
&lt;pre&gt;
def fizzbuzzgame(i):
        if i%3 == 0 and i%5 == 0:
            print(i,&quot;FizzBuzz&quot;)
            return(&quot;fzbz&quot;)
        elif i%5 == 0:
            print(i,&quot;Buzz&quot;)
            return(&quot;bz&quot;)
        elif i%3 == 0:
            print(i,&quot;Fizz&quot;)
            return(&quot;fz&quot;)
        else:
            print(i)
            return(&quot;no&quot;)

ch = 'y'
fizzbuzz=0
fizz=0
buzz=0
nothing=0
print(&quot;&quot;&quot;
 _____  ____  _____  _____  ____   __ __  _____  _____       ____   ____  ___ ___    ___ 
|     ||    ||     ||     ||    \ |  |  ||     ||     |     /    | /    ||   |   |  /  _]
|   __| |  | |__/  ||__/  ||  o  )|  |  ||__/  ||__/  |    |   __||  o  || _   _ | /  [_ 
|  |_   |  | |   __||   __||     ||  |  ||   __||   __|    |  |  ||     ||  \_/  ||    _]
|   _]  |  | |  /  ||  /  ||  O  ||  :  ||  /  ||  /  |    |  |_ ||  _  ||   |   ||   [_ 
|  |    |  | |     ||     ||     ||     ||     ||     |    |     ||  |  ||   |   ||     |
|__|   |____||_____||_____||_____| \__,_||_____||_____|    |___,_||__|__||___|___||_____|
                                                                                         
&quot;&quot;&quot;)   

while(ch == 'y'):
    n=int(input(&quot;Enter a Number : &quot;))
    winLoose=fizzbuzzgame(n)
    if(winLoose == &quot;fz&quot;):
        fizz+=1
    elif(winLoose == &quot;bz&quot;):
        buzz+=1
    elif(winLoose == &quot;fzbz&quot;):
        fizzbuzz+=1
    ch=input(&quot;Do you want to continue playing the game : (y/n)&quot;)
    if(ch=='n'):
        print('Congratulations, your score is\n FizzBuzz:%d\nFizz:%d\nBuzz:%d' %
(fizzbuzz,fizz,buzz))
    
'''Sample Output:

 _____  ____  _____  _____  ____   __ __  _____  _____       ____   ____  ___ ___    ___ 
|     ||    ||     ||     ||    \ |  |  ||     ||     |     /    | /    ||   |   |  /  _]
|   __| |  | |__/  ||__/  ||  o  )|  |  ||__/  ||__/  |    |   __||  o  || _   _ | /  [_ 
|  |_   |  | |   __||   __||     ||  |  ||   __||   __|    |  |  ||     ||  \_/  ||    _]
|   _]  |  | |  /  ||  /  ||  O  ||  :  ||  /  ||  /  |    |  |_ ||  _  ||   |   ||   [_ 
|  |    |  | |     ||     ||     ||     ||     ||     |    |     ||  |  ||   |   ||     |
|__|   |____||_____||_____||_____| \__,_||_____||_____|    |___,_||__|__||___|___||_____|
                                                                                         

Enter a Number : 666
666 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 777
777 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 555
555 FizzBuzz
Do you want to continue playing the game : (y/n)y
Enter a Number : 1
1
Do you want to continue playing the game : (y/n)y
Enter a Number : 789
789 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 25
25 Buzz
Do you want to continue playing the game : (y/n)n
Congratulations, your score is

FizzBuzz:1
Fizz:3
Buzz:1

&lt;/pre&gt;

=Crowd Computing: Just Estimate=
==Wisdom of Crowds==
The concept of ’Wisdom of Crowds’ was proposed by Francis Galton. A weight-judging competition was carried on at the annual show of the West of England Fat Stock and Poultry Exhibition recently held at Plymouth, A fat ox having been selected, competitors bought stamped and numbered cards, each, on which to inscribe their respective names, addresses, and estimates of what the ox would weigh after it had been slaughtered. Those who guessed most successfully received prizes. About 8oo tickets were issued to the par- ticipants. The middlemost estimate of all the estimates recorded was 1207 lbs and the actual weight of the ox was 1198 lbs.

==Our Experiment==
The crowd had to guess the number of candies/gems in a jar. Around 75 people participated in the experiment. The actual number of gems in the jar were 375. The median of all estimates came out to be 300 and the mean of all the estimates came out to be around 396. Median underestimated and mean overestimated the actual value. So according to recent studies, Trimmed mean must be used as an aggregate measure to estimate where Wisdom of Crowds is involved.
[[File:Gemsjar.jpg|center|200px|caption]]

===Trimmed Mean===
In these kinds of experiments, 10% trimmed mean is usually followed. For calculating 10% trimmed mean, remove 10% smallest and 10% largest values from the sample. Calculate the mean of the sample obtained. In the above experiment, the trimmed mean came out to be around 351 which is very close to the actual value.

==Implementation==
Here, we try to demonstrate the concept of trimmed mean through crowd computing.
 Input a list of estimates done by the crowd .
 Sort the list.
 Remove the 10% smallest values.
 Remove the 10% largest values.
 Calculate the mean of the new list obtained .&lt;hr&gt;

==Data of Experiment==       
    Estimates =[1000,1010,1786,2000,1500,1500,100,120,150,150,150,170,175,180,197,200,200,200,200,200,200,220,220,220,220,234,250,250,250,250,250,250,250,250,250,263,270,275,275,286,300,
                300,300,300,300,300,300,300,320,350,350,350,400, 400,400,400,400,450,467,500,500,500,500,500,500,500,550,550,600,600,600,650,700,700,720]

    '''CODE:'''
&lt;pre&gt;
Estimates = [1000,1010,1786,2000,1500,1500,100,120,150,150,150,170,175,180,197,200,200,200,200,200,200,220,220,220,220,234,250,250,250,250,250,250,250,250,250,263,270,275,275,286,300,                300,300,300,300,300,300,300,320,350,350,350,400,400,400,400,400,450,467,500,500,500,500,500,500,500,550,550,600,600,600,650,700,700,720]
Estimates.sort()
offset = int(0.10*len(Estimates))
for i in range(offset):
       del Estimates[0]
       del Estimates[-1]
Sum = 0    
for i in range(len(Estimates)):
       Sum += Estimates[i]
Mean_Value = Sum/len(Estimates)
print(&quot;Mean : &quot;, int(Mean_Value))
#Output:
Mean :  351
&lt;/pre&gt;
&lt;hr&gt;
==Trimmed Mean for the above example== 
&lt;h3&gt;Using scipy library&lt;/h3&gt;
&lt;pre&gt;
#import scipy to use the method of trim_mean
from scipy import stats
trimMean = stats.trim_mean(Estimates, 0.1) # Trim 10% at both ends
print(&quot;Trimmed Mean : &quot;,trimMean)
#Output:
Trimmed Mean :  335.1020408163265
&lt;/pre&gt;

&lt;h3&gt;Without using scipy library&lt;/h3&gt;
&lt;pre&gt;
#Trimmed mean with 10%
p=10/100
#sorted data
data=[2, 4, 6, 7, 11, 21, 81, 90, 105, 121]
n = len(data)
#Remove elements from both end
rem=int(n*p)
newData = data[rem:-rem]
mean = 0
for i in newData:
    mean += i
mean = int(mean/len(newData))
print(&quot;Trimmed mean : &quot;,mean)
#Output: Trimmed mean :  40
&lt;/pre&gt;
[[#Top]]

=Jumbled_Words Permutations: Jumbled Words=
==What are Permutations ?==
A permutation also called ordering of selected number of elements from a list denoted by nPr here we are choosing all elements of a list and so n=r&lt;br&gt;
nPr=n!/(n-r)!&lt;br&gt; as n=r
nPn=n!&lt;br&gt; which gives all possible arrangement of elements present in a list.

 For example, permutations of list [1,2,3] are [1,2,3], [1,3,2], [2,1,3], [2,3,1], 
[3,1,2], and [3,2,1]. 
The number of permutations of a list of elements nPn is given by n!. For example, there are 2! = 2 x 1 = 2 permutations of [1,2], namely [1,2] and [2,1], and 3! = 3 x 2 x 1 = 6 permutations of [1,2,3], as mentioned above.&lt;br/&gt;
[[File:Permutations.jpg]]

==Implementation==
Here, we try to demonstrate the concept of permutations through jumbled words. It is a two player game in which one person presents the other person a different permutation of the word in his mind. The other person has to guess the right word. If he guesses, the he wins otherwise he loses.
 Input an list of words.
 Randomly pick a word from the list of words .
 Shuffle this word and present it to the other player.
 if word guesses by the player is same as the one picked from list of w
     player wins
 else
     player loses

ALTERNATE CODE TO GENERATE THIS GAME:
&lt;pre&gt;
import random
p1=input(&quot;enter player 1 name:&quot;)
p2=input(&quot;enter player 2 name:&quot;)
l=[&quot;rainbow&quot;,&quot;computer&quot;,&quot;robot&quot;,&quot;butter&quot;,&quot;vegetable&quot;,&quot;science&quot;,&quot;correct&quot;]
c1=c2=a1=a2=f1=f2=0
k=1
i=3
def play():
    n=random.choice(l)        ##n=chooses a word from list l
    l1=[]
    for j in n:
       l1.append(j)      ##creates a list for word in n
    for t in range(len(l1)):
       p=random.choice(l1)     ##this randomly displays letters in the list
       print(p)
       l1.remove(p)          ##to avoid the repetition of a letter
    s=input(&quot;enter the word:&quot;)
    if(s==n):
        print(&quot;correct&quot;)
        return 1
    else:
        print(&quot;not correct&quot;)
        print(&quot;answer is&quot;,n)
        return 0
def stat():
     print(&quot;player 1:&quot;)
     print(&quot;score:&quot;,c1)
     print(&quot;answered:&quot;,a1)
     print(&quot;failed:&quot;,f1)
     print(&quot;.............&quot;)
     print(&quot;player 2:&quot;)
     print(&quot;score:&quot;,c2)
     print(&quot;answered:&quot;,a2)
     print(&quot;failed&quot;,f2)
     if(c1&gt;c2):
         print(p1,&quot; won over &quot;,p2)
     elif(c1==c2):
         print(&quot;draw game&quot;)
     else:
         print(p2,&quot; won over &quot;,p1) 
while(i!=4):
      if(i==3):
         if(k==1):
             print(&quot;player 1 turn&quot;)
             print(&quot;your jumbled word is:&quot;)
             k=k+1
             m=play()
             if(m==1):      ##if guessed answer is correct,then score and no.of answered count will be increased
                c1+=1
                a1+=1
             else:
                f1+=1       ##else count of no.of failed to answered will be incremented
         else:
             print(&quot;player 2 turn&quot;)
             print(&quot;your jumbled word is:&quot;)
             k=k-1
             m=play()
             if(m==1):
                c2=c2+1
                a2=a2+1
             else:
                f2=f2+1
       if(i==2):
             print(&quot;present status&quot;)
             stat()
       i=int(input(&quot;enter your choice  1.stop 2.status 3.continue&quot;))
       if(i==1):
             stat()
             i=i+3
&lt;/pre&gt;
&lt;hr&gt;
=== JumbledWord Simple Logic, In Short ===
[[File:jumbledWord.gif]]
&lt;hr&gt;
'''Logic to create a Jumbled Word'''
&lt;hr&gt;
&lt;pre&gt;
#Get Jumbled Word and print it Horizontally
import random

def getJumbledWord(b):
    jumble=''
    l1 = [ b[i] for i in range(0, len(b)) ]
    for t in range(len(l1)):
       p=random.choice(l1)     ##this randomly gets letters from the list      
       jumble=jumble+p       
       l1.remove(p)
    return jumble

b=input(&quot;Enter a word to make it jumbled : &quot;)
print(&quot;Jumbled Word : &quot;, getJumbledWord(b))
&lt;/pre&gt;
&lt;hr&gt;
'''Another Logic to create a Jumbled Word'''
&lt;hr&gt;
&lt;pre&gt;
b=input(&quot;Enter a word to make it jumbled : &quot;)

def getJumbledWord1(b):
    l1 = [ b[i] for i in range(0, len(b)) ]
    random.shuffle(l1)
    str1 = ''.join(l1)
    return str1

print(&quot;Jumbled Word : &quot;, getJumbledWord1(b))
&lt;/pre&gt;

====Sample Output:====
&lt;pre&gt;
---- Output1 
Enter a word to make it jumbled : butter
Jumbled Word :  tbture

---- Output2 
Enter a word to make it jumbled : petriotism
Jumbled Word :  pittrosime
&lt;/pre&gt;

=Theory of Evolution=

== What is Evolution ? ==
Evolution is the change in heritable characteristics over successive generations. The theory of evolution explains that DNA, which acts as a carrier of genetic information from one generation to other, tends to change or mutate occasionally. These changes are reflected in next generations to come. This is how life has evolved on earth from bacteria to human beings.&lt;br&gt;
[[File:Evolution.png|500px]]

== Implementation ==
&lt;pre&gt;An array representing DNA is stored in a file. As genes are forms of DNA, they contain information to be transferred to forthcoming generations. Assume that information is in the form of bits (in the form of 0s and 1s). A number is picked randomly from 1 to the size of the array. A new parameter has been introduced which decides whether mutation would occur or not. If the value of this new parameter is 1 (It is picked randomly from 1 to 100), then only change is reflected down the generations, otherwise it is not. The pseudo code is as follows :
Input an array containing genetic information .
Randomly generate a number (say m) from 1 to length of the array. Randomly generate other number (say p) from 1 to 100.
 
    if p is equal to 1 then 
        if m is 1 then
          set it to 0
        else
          set it to 1
&lt;/pre&gt;
[[#TOP]]</text>
      <sha1>ps0xw1s6egf8w0fa1tjl4pwnja5aack</sha1>
    </revision>
    <revision>
      <id>3571</id>
      <parentid>3570</parentid>
      <timestamp>2018-09-28T02:46:35Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* Loops */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="29403">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_3 Contributors of this page]
*Week 3 Playlist: https://www.youtube.com/playlist?list=PLc_j0TNIaWxOVx_z9jAM2UB3RqYNXaoEo
=List=
List is a flexible data structure used for storing a group of data separated by comma. The elements in a list need not be of the same data type.

'''Example:'''
       List_1 = [ 1, 2,3] or 
       List_1 = [&quot;coffee&quot;, &quot;Tea&quot;, &quot;Milk&quot;] or
       List_1 = [1,&quot;coffee&quot;, &quot;Tea&quot;, 3, &quot;5&quot;]

==List Creation==
&lt;pre&gt;a) A list can be created by simply putting values (separated by comma) between square brackets as given below,
       List_1 = [1,&quot;coffee&quot;, &quot;Tea&quot;, 3, &quot;5&quot;] #this creates a list by name List_1 containing following items


Or,
(b)A List can be created from scratch and elements can be added 
        List_2 = [ ]
        List_2.append(&quot;Kala&quot;)
        List_2.append(&quot;Mala&quot;)
Here we use &quot;append&quot; ,which is a function in python that enable us to append or attach an element to a list .
Thus List_2 will now hold [&quot;Kala&quot;,&quot;Mala&quot;]
&lt;/pre&gt;
[[#TOP]]

==Operations and Methods to work with List==
&lt;pre&gt;
a = [25,30,50,90,12,13]
b = [100,300,500,200,250]
&lt;/pre&gt;
&lt;hr&gt;
&lt;table border=2&gt;
  &lt;tr&gt;
    &lt;th&gt;&lt;b&gt;Method/&lt;br&gt;Operator&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Function&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Syntax&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Output&lt;/b&gt;&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;len()&lt;/td&gt;
    &lt;td&gt;Find length of a list&lt;/td&gt;
    &lt;td&gt;len(a)&lt;/td&gt;
    &lt;td&gt;6&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;max()&lt;/td&gt;
    &lt;td&gt;Find maximum element from the list&lt;/td&gt;
    &lt;td&gt;max(a)&lt;/td&gt;
    &lt;td&gt;90&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;min()&lt;/td&gt;
    &lt;td&gt;Find minimum element from the list&lt;/td&gt;
    &lt;td&gt;min(a)&lt;/td&gt;
    &lt;td&gt;12&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sum()&lt;/td&gt;
    &lt;td&gt;Returns sum of all elements of the list&lt;/td&gt;
    &lt;td&gt;sum(a)&lt;/td&gt;
    &lt;td&gt;220&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;reverse()&lt;/td&gt;
    &lt;td&gt;Reverses the original list&lt;/td&gt;
    &lt;td&gt;a.reverse()&lt;/td&gt;
    &lt;td&gt;[13, 12, 90, 50, 30, 25]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sort()&lt;/td&gt;
    &lt;td&gt;Sorts the original list in ascending order&lt;/td&gt;
    &lt;td&gt;a.sort()&lt;/td&gt;
    &lt;td&gt;[12, 13, 25, 30, 50, 90]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sorted()&lt;/td&gt;
    &lt;td&gt;Returns the new sorted list &lt;/td&gt;
    &lt;td&gt;sorted(a)&lt;/td&gt;
    &lt;td&gt;[12, 13, 25, 30, 50, 90]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;insert()&lt;/td&gt;
    &lt;td&gt;Insert at a particular index in the list, and shifts remaining elements&lt;/td&gt;
    &lt;td&gt;a.insert(3,3)&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 3, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;append()&lt;/td&gt;
    &lt;td&gt;Adds elements/object to the end of the list&lt;/td&gt;
    &lt;td&gt;a.append(5)&lt;br&gt;a.append([10,20])&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 5]&lt;br&gt;[25, 30, 50, 90, 12, 13, [10, 20]]&lt;br&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;extend()&lt;/td&gt;
    &lt;td&gt;Adds object to the end of the list as elements not as object&lt;/td&gt;
    &lt;td&gt;a.extend([10,20])&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 10, 20]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;*&amp;nbsp;&amp;nbsp;Repeatation&lt;br&gt;operator&lt;/td&gt;
    &lt;td&gt;Repeat the list for n times and returns a new list&lt;/td&gt;
    &lt;td&gt;a*2&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 25, 30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;+ Concatenation&lt;br&gt;operator&lt;/td&gt;
    &lt;td&gt;Concatenates two lists, and returns a new list&lt;/td&gt;
    &lt;td&gt;a+b&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 100, 300, 500, 200, 250]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;index()&lt;/td&gt;
    &lt;td&gt;Finds index of a particular element in the list or not&lt;/td&gt;
    &lt;td&gt;a.index(25)&lt;br&gt;a.index(0)&lt;br&gt;&lt;/td&gt;
    &lt;td&gt;0&lt;br&gt;&lt;br&gt;ValueError: 0 is not in list&lt;br&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;in operator&lt;/td&gt;
    &lt;td&gt;Finds whether a particular element is in the list or not, returns boolean&lt;/td&gt;
    &lt;td&gt;25 in a&lt;/td&gt;
    &lt;td&gt;True&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;not in operator&lt;/td&gt;
    &lt;td&gt;Checks if element is not available in list, returns boolean&lt;/td&gt;
    &lt;td&gt;25 not in a&lt;/td&gt;
    &lt;td&gt;False&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;count()&lt;/td&gt;
    &lt;td&gt;Counts the number of occurence of an element in the list&lt;/td&gt;
    &lt;td&gt;a.count(25)&lt;/td&gt;
    &lt;td&gt;1&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;remove()&lt;/td&gt;
    &lt;td&gt;Removes an element from the list&lt;/td&gt;
    &lt;td&gt;a.remove(25)&lt;/td&gt;
    &lt;td&gt; [30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;pop()&lt;/td&gt;
    &lt;td&gt;Delete and return item at index 0&lt;/td&gt;
    &lt;td&gt;a.pop(0)&lt;/td&gt;
    &lt;td&gt;25 , a will be [30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;del&lt;/td&gt;
    &lt;td&gt;Deletes item at a particular index from the list&lt;/td&gt;
    &lt;td&gt;del a[0]&lt;/td&gt;
    &lt;td&gt;[30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;all()&lt;/td&gt;
&lt;td&gt;Returns True, if all items in list are True or it is an empty list&lt;/td&gt;
&lt;td&gt;all([True, True, True])
all([])
&lt;/td&gt;
&lt;td&gt;True&lt;br&gt;
True&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;any()&lt;/td&gt;
&lt;td&gt;Returns True, if any item in list is True else return False&lt;/td&gt;
&lt;td&gt;any([True, True, True])&lt;br&gt;
any([True, False, True])&lt;br&gt;
any([])&lt;/td&gt;
&lt;td&gt;True&lt;br&gt;False&lt;br&gt;False&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;

==Printing the List==
=== Print whole list ===
A list can be printed simply or using a ''for / while'' loop 

 print(List_2)     # To print the entire list
This code will print      
 ['Kala','Mala']     

===Print element at a particular index===
&lt;pre&gt;
Using index position
    List_2[0]     # prints 'Kala' ,i.e,the value at index position 0.
    List_2[1]     # prints 'Mala'.
&lt;/pre&gt;
=== Without using index position ===
&lt;pre&gt;
for item in List_2:   # here item is a variable used to access elements in list.
       print(item)
   This code snippet prints 
    Kala
    Mala
&lt;/pre&gt;
[[#TOP]]

==Search for a particular element in list==
Elements in a list can be searched by one of the two ways:
=== using index() function===
&lt;pre&gt;
ages1 = [11,23,12,23,45]

#if element is available in the list, index() returns the index value on which, the element is present.
print(ages1.index(45))#Output: 4

#if element is not available in the list, index() returns ''ValueError''
print(ages1.index(0))#Output: ValueError:
&lt;/pre&gt;

In programming, if such error occurs, program gets terminated. It can be solved using exception handling.
e.g.
&lt;pre&gt;
ages1 = [11,23,12,23,45]

try:
    print(ages1.index(0))
except ValueError:
    print(&quot;Exception has occured&quot;)    
    print(&quot;Element is not found in the list&quot;)

&lt;/pre&gt;
&lt;pre&gt;
'''Output: 
Exception has occured
Element is not found in the list
'''&lt;/pre&gt;
[[#TOP]]

=== using 'in' operator===
''in'' operator is used to check whether a particular element is available in the list or not.e.g.

&lt;pre&gt;
ages1 = [11,23,12,23,45]
no=11

if no in ages1:
    print(&quot;no is there in the list&quot;)
else:    
    print(&quot;no is NOT there in the list&quot;)
&lt;/pre&gt;
&lt;pre&gt;
#Output: no is there in the list
&lt;/pre&gt;


'''Number is not there in the list'''
&lt;pre&gt;
ages1 = [11,23,12,23,45]
no=15

if no in ages1:
    print(&quot;no is there in the list&quot;)
else:    
    print(&quot;no is NOT there in the list&quot;)
&lt;/pre&gt;
&lt;pre&gt;
Output: no is NOT there in the list
&lt;/pre&gt;
[[#TOP]]

==Updating the List==
The lists can be updated using ''append'' or ''insert'' function.  Append adds the element to the end of the list and Insert adds the element in the specified position.
&lt;pre&gt;
   # add the element 'Sheela' to the end of the list.
   List_2.append(&quot;Sheela&quot;)    
   print (List_2) will output 
   ['Kala', 'Mala', 'Sheela']
&lt;/pre&gt;
   &lt;pre&gt;
# add the element &quot;Bala&quot; in the list at the index 1.
   List_2.insert(1,&quot;Bala&quot;)    
   print (List_2) will output 
   ['Kala', 'Bala','Mala', 'Sheela']
&lt;/pre&gt;

=== Extend the list by adding elements of other list at end using extend()===
&lt;pre&gt;
ages = [11,23,12,23,45]
ages.extend([57,58])
print(ages)
&lt;/pre&gt;

&lt;pre&gt;
#Output: [11, 23, 12, 23, 45, 57, 58]
&lt;/pre&gt;

==== Difference between ''append and extend'' ====
Difference between append and extend can be easily understood, by the following example.

&lt;pre&gt;
appendlist = [11,23,12,23,45]
appendlist.append([57,58])

extendlist= [11,23,12,23,45]
extendlist.extend([57,58])
&lt;/pre&gt;

&lt;pre&gt;
'''Output:
[11, 23, 12, 23, 45, [57, 58]]
[11, 23, 12, 23, 45, 57, 58]'''
&lt;/pre&gt;

[[#TOP]]

==Basic Operations on List==
===Frequency of Occurrence===
list.count(object) will return the number of times the object occur in the list.
  '''Example'''
    ages = [11,23,12,23,45,43,22,24,23]
    ages.count(23) will return
    3
    ages.count(100) will return
    0

===Length of the List===
len(list) will return the length of the list ie. the number of objects in the list.
  '''Example'''
&lt;pre&gt;
    ages = [11,23,12,23,45,43,22,24,23]
    len(ages) # Output: 9
&lt;/pre&gt;

To print the objects in the list either use ''for item in list'' or ''for index in range(len(list))''
&lt;pre&gt;
    for item in ages:       
        print (item)  
        (OR)
    for index in range(len(ages)) :
        print (ages[index])
&lt;/pre&gt;

===Sort the List===
list.sort() will sort the list in ascending order
  '''Example'''
    ages = [11,23,12,23,45,43,22,24,23]
    ages.sort() 
    print (ages) 
    [11, 12, 22, 23, 23, 23, 24, 43, 45]

[[#TOP]]

===Sort the List using sorted() function===
sorted(list1) will sort the list and return a new list, it doesn't modify the original list
&lt;br&gt;'''Example: Sort in ascending order'''
&lt;pre&gt;
ages = [11,23,12,23,45,43,22,24,23]
newList=sorted(ages)
print(newList)

#Output: [11, 12, 22, 23, 23, 23, 24, 43, 45]
&lt;/pre&gt;

&lt;br&gt;'''Example: Sort in descending order'''
&lt;pre&gt;
ages = [11,23,12,23,45,43,22,24,23]
newList=sorted(ages,reverse=True)
print(newList)

#Output: [45, 43, 24, 23, 23, 23, 22, 12, 11]
&lt;/pre&gt;

===Reverse the List===
list.reverse() will reverse the original list
  '''Example'''
    ages = [11, 12, 22, 23, 23, 23, 24, 43, 45]
    ages.reverse()
    print (ages)
    [45, 43, 24, 23, 23, 23, 22, 12, 11]

Both sort() and reverse() list operation will work on numeric and alphanumeric data list.

A special use of the reverse() function is to descend a list that is sorted in ascending order.

  '''Example'''
&lt;pre&gt;
ages = [11, 12, 22, 23, 23, 23, 24, 43, 45]
ages.sort()
print(ages)
ages.reverse()
print(ages)
&lt;/pre&gt;

===Slicing===
Used to retrieve an object or objects in a range as a list  
  '''Example'''

Use ''list[index]'' to retrieve the object at the given index
&lt;pre&gt;
In [1]: student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
In [2]: student[3]     #Object at index 3.  Remember index starts at 0
Out[2]: 'Geetha'      
&lt;/pre&gt;

Use ''list[start_index : end_index + 1]'' to retrieve objects from the start_index to end_index 
&lt;pre&gt;
In [3]: student[2:4]     # Objects from index 2 to 3 as List. Note the [ and ]
Out[3]: ['Vijay', 'Geetha']   
&lt;/pre&gt;

Use ''list[:]'' to retrieve objects from the starting of the list to the end of the list. 
The default start value will be the starting index of the list (i.e. 0) and the default end value
will be the length of the list 
&lt;pre&gt;
In [4]: student[:]        # prints the entire list
Out[4]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma', 'Janani']
&lt;/pre&gt;
&lt;pre&gt;
In [5]: student[:5]       # prints the objects from the start of the list upto object at index 4
Out[5]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran']
&lt;/pre&gt;
&lt;pre&gt;
In [6]: student[2:]       # prints the objects from index 2 upto the end of the list
Out[6]: ['Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma', 'Janani']
&lt;/pre&gt;

Negative index too is available in Python. It starts from last element of the list. i.e.
&lt;pre&gt;
In [7]:student[-1]        #prints last index of list
Out[7]: 'Janani'
&lt;/pre&gt;
&lt;pre&gt;
In [8]:student[-1:-8]     #prints empty list
Out[8]: []
&lt;/pre&gt;
&lt;pre&gt;
In [9]:student[-8:-1]     #prints -8th index to -1st index elements
Out[9]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma']
&lt;/pre&gt;

[[#TOP]]

===Removing Item from list ===
----

Is used to remove a specific item from the list.

'''Example:'''
 
Use list.remove(entry/value)  Or   del list[index]    Or list.pop(index)
&lt;pre&gt;
student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
student.remove(&quot;Arun&quot;)   #This will delete item &quot;Arun&quot;
         Or    
del student[0]           # This will delete item at index 0
         Or
student.pop(0)         # This will delete and return item at index 0
print(student)    
Output: &quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
&lt;/pre&gt;

[[#TOP]]

===Delete list ===
----
Used to delete complete list

'''Example'''

Use del &lt;list name&gt;
&lt;pre&gt;
student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
del student&lt;/pre&gt;

===Concatenation of two lists===
----
''+'' is the concatenation operator which is used concatenate two lists. 
&lt;pre&gt;
ages1 = [11,23,12,23,45]
ages2 = [25, 24, 43, 47]
age=ages1+ages2
print(age)
#Output: [11, 23, 12, 23, 45, 25, 24, 43, 47]
&lt;/pre&gt;

===Repeatation of a list ===
----
''*'' is the operator to repeat a particular list.
&lt;pre&gt;
ages1 = [11,23,12,23,45]
age=ages1*5 #ages1 list is repeated 5 times and stroed in ''age'' list
print(age)

#Output: [11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45]
&lt;/pre&gt;

=== all and any for List===
all() and any() are special functions to check whether all elements in iterable is ''True'' or any element is ''True''
&lt;ol&gt;
&lt;li&gt;If all elements in a list are ''True'', '''all()''' will return ''True''&lt;/li&gt;
&lt;li&gt;If iterable is ''empty'', '''all()''' will return ''True''&lt;/li&gt;
&lt;li&gt;If iterable contains at least one ''True'', '''any()''' will return ''True''&lt;/li&gt;
&lt;li&gt;If iterable is ''empty'', '''any()''' will return ''False''&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;
lsit=[True, True, True, True]
print(all(lsit))#Output: True
print(any(lsit))#Output: True

lsit1=[True, False, True, True]
print(all(lsit1))#Output: False
print(any(lsit1))#Output: True

lsit2=[False,False,False]
print(all(lsit2))#Output: False
print(any(lsit2))#Output: False

lsit3=[]
print(all(lsit3))#Output: True
print(any(lsit3))#Output: False
&lt;/pre&gt;

==Conditional Statements==
&lt;pre&gt;Conditionals are used to check the condition and change the flow of the program 
accordingly. They are realized in programming languages through if statement. The 
syntax is as follows :
&lt;pre&gt;
         if condition : 
            statement
&lt;/pre&gt;
    '''Note:''' Do not forget indentation (inserting space/tab) in the line after the
 if condition.
    
    In case you want to execute a set of statements when a condition is true and another

set of statement when the condition is false.
&lt;pre&gt;
         if condition : 
            statement 1
         else :
            statement 2
&lt;/pre&gt;

&lt;pre&gt;    
    Multiple if-else statements can be written as follows:
         if condition_1 : 
            statement 1
         elif condition_2 : # 'elif' is short for 'else if'
            statement 2
         elif condition_3 :
            statement 3
        .
        .
         else :
            final statement
&lt;/pre&gt;

[[#TOP]]

=Loops and Conditionals : Fizzbuzz=
====Loops====
Loops are used to execute a set of repetitive statements. They are realised
through 'while' and 'for' loops in programming languages. The syntax of 'for' loop is 
as follows :
&lt;pre&gt;
for LOOPVARIABLE in SEQUENCE: 
            STATEMENTS&lt;/pre&gt;

    '''e.g.''' to print all the data from a list we can write:
&lt;pre&gt;
for item in list_name:
      print(item)&lt;/pre&gt;
    OR
&lt;pre&gt;
for index in range(len(list_name)):
      print(list_name[index])
 &lt;/pre&gt;   
    The syntax for while loop is as follows :
&lt;pre&gt;    
while BOOLEANEXPRESSION: 
     STATEMENTS
     INCREMENT/DECREMENT
&lt;/pre&gt;    
    '''e.g.''' if we want to print all numbers from 1 to 10
&lt;pre&gt;
        i=1
        while i&lt;=10 :
            print(i,&quot; &quot;)
            i=i+1
    &lt;/pre&gt;
    'while' loop has indefinite iteration (run-time unknown). So, there must be loop
 break statement in it.
 Whereas 'for' loop is definite in nature (i.e. known or predictable span).&lt;br&gt;

&lt;b&gt;NOTE: Python doesn't have anything like do-while loop.&lt;/b&gt;

[[#TOP]]

==Implementation==
Here, we try to demonstrate the concept of loops and conditionals through a game called Fizzbuzz. The rules are as follows :&lt;br/&gt;
[[File:fizzBuzz.gif]]

• if input number is a multiple of ’3’ print ”Fizz”
&lt;br/&gt;
• if input number is a multiple of ’5’ print ”Buzz”
&lt;br/&gt;
• if input number is a multiple of both '3' and ’5’ print ”FizzBuzz”
&lt;br/&gt;
The pseudo code is as follows :
&lt;pre&gt;
   If input no % 3 == 0 and  input no % 5 == 0 : 
       print ”Fizzbuzz”
   else if input no % 3 == 0 : 
       print ”Fizz”
   else if input no % 5 == 0 : 
       print ”Buzz”
   else :
       print the input no
&lt;/pre&gt;
The order of statements execution matters to get the desired output. The highest priority condition should be first followed by other. In fizzbuzz programming, first checking should be done for both divisibility of 3 and 5. If condition not satisfied only then it should check individually for 3 or 5. So carefully choosing the order is crucial for better programming.
Note: There is some effect of present condition statements chosen on next conditions statements. That is why in first attempt fizzbuzz programming got struck.

Example: 
&lt;pre&gt;
#Code to achieve the above requirement in python3.
i = int(input(&quot;Enter the number&quot;)) 
if i%3 == 0 and i%5 == 0: print(i,&quot;FizzBuzz&quot;)  
elif i%5 == 0: print(i,&quot;Buzz&quot;)
elif i%3 == 0: print(i,&quot;Fizz&quot;)
else: print(i)
&lt;/pre&gt;
Lets put the same into a loop for a range given by the user.
&lt;pre&gt;
def fizzbuzzgame(start,stop):
    for i in range(start,stop+1):
        if i%3 == 0 and i%5 == 0:
            print(i,&quot;FizzBuzz&quot;)
        elif i%5 == 0:
            print(i,&quot;Buzz&quot;)
        elif i%3 == 0:
            print(i,&quot;Fizz&quot;)
        else: print(i)

fizzbuzzgame(50,100)
&lt;/pre&gt;


=== Fizz Buzz game in Interactive mode with Score ===
'''By Ms. Ami Tusharkant Choksi'''
&lt;pre&gt;
def fizzbuzzgame(i):
        if i%3 == 0 and i%5 == 0:
            print(i,&quot;FizzBuzz&quot;)
            return(&quot;fzbz&quot;)
        elif i%5 == 0:
            print(i,&quot;Buzz&quot;)
            return(&quot;bz&quot;)
        elif i%3 == 0:
            print(i,&quot;Fizz&quot;)
            return(&quot;fz&quot;)
        else:
            print(i)
            return(&quot;no&quot;)

ch = 'y'
fizzbuzz=0
fizz=0
buzz=0
nothing=0
print(&quot;&quot;&quot;
 _____  ____  _____  _____  ____   __ __  _____  _____       ____   ____  ___ ___    ___ 
|     ||    ||     ||     ||    \ |  |  ||     ||     |     /    | /    ||   |   |  /  _]
|   __| |  | |__/  ||__/  ||  o  )|  |  ||__/  ||__/  |    |   __||  o  || _   _ | /  [_ 
|  |_   |  | |   __||   __||     ||  |  ||   __||   __|    |  |  ||     ||  \_/  ||    _]
|   _]  |  | |  /  ||  /  ||  O  ||  :  ||  /  ||  /  |    |  |_ ||  _  ||   |   ||   [_ 
|  |    |  | |     ||     ||     ||     ||     ||     |    |     ||  |  ||   |   ||     |
|__|   |____||_____||_____||_____| \__,_||_____||_____|    |___,_||__|__||___|___||_____|
                                                                                         
&quot;&quot;&quot;)   

while(ch == 'y'):
    n=int(input(&quot;Enter a Number : &quot;))
    winLoose=fizzbuzzgame(n)
    if(winLoose == &quot;fz&quot;):
        fizz+=1
    elif(winLoose == &quot;bz&quot;):
        buzz+=1
    elif(winLoose == &quot;fzbz&quot;):
        fizzbuzz+=1
    ch=input(&quot;Do you want to continue playing the game : (y/n)&quot;)
    if(ch=='n'):
        print('Congratulations, your score is\n FizzBuzz:%d\nFizz:%d\nBuzz:%d' %
(fizzbuzz,fizz,buzz))
    
'''Sample Output:

 _____  ____  _____  _____  ____   __ __  _____  _____       ____   ____  ___ ___    ___ 
|     ||    ||     ||     ||    \ |  |  ||     ||     |     /    | /    ||   |   |  /  _]
|   __| |  | |__/  ||__/  ||  o  )|  |  ||__/  ||__/  |    |   __||  o  || _   _ | /  [_ 
|  |_   |  | |   __||   __||     ||  |  ||   __||   __|    |  |  ||     ||  \_/  ||    _]
|   _]  |  | |  /  ||  /  ||  O  ||  :  ||  /  ||  /  |    |  |_ ||  _  ||   |   ||   [_ 
|  |    |  | |     ||     ||     ||     ||     ||     |    |     ||  |  ||   |   ||     |
|__|   |____||_____||_____||_____| \__,_||_____||_____|    |___,_||__|__||___|___||_____|
                                                                                         

Enter a Number : 666
666 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 777
777 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 555
555 FizzBuzz
Do you want to continue playing the game : (y/n)y
Enter a Number : 1
1
Do you want to continue playing the game : (y/n)y
Enter a Number : 789
789 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 25
25 Buzz
Do you want to continue playing the game : (y/n)n
Congratulations, your score is

FizzBuzz:1
Fizz:3
Buzz:1

&lt;/pre&gt;

=Crowd Computing: Just Estimate=
==Wisdom of Crowds==
The concept of ’Wisdom of Crowds’ was proposed by Francis Galton. A weight-judging competition was carried on at the annual show of the West of England Fat Stock and Poultry Exhibition recently held at Plymouth, A fat ox having been selected, competitors bought stamped and numbered cards, each, on which to inscribe their respective names, addresses, and estimates of what the ox would weigh after it had been slaughtered. Those who guessed most successfully received prizes. About 8oo tickets were issued to the par- ticipants. The middlemost estimate of all the estimates recorded was 1207 lbs and the actual weight of the ox was 1198 lbs.

==Our Experiment==
The crowd had to guess the number of candies/gems in a jar. Around 75 people participated in the experiment. The actual number of gems in the jar were 375. The median of all estimates came out to be 300 and the mean of all the estimates came out to be around 396. Median underestimated and mean overestimated the actual value. So according to recent studies, Trimmed mean must be used as an aggregate measure to estimate where Wisdom of Crowds is involved.
[[File:Gemsjar.jpg|center|200px|caption]]

===Trimmed Mean===
In these kinds of experiments, 10% trimmed mean is usually followed. For calculating 10% trimmed mean, remove 10% smallest and 10% largest values from the sample. Calculate the mean of the sample obtained. In the above experiment, the trimmed mean came out to be around 351 which is very close to the actual value.

==Implementation==
Here, we try to demonstrate the concept of trimmed mean through crowd computing.
 Input a list of estimates done by the crowd .
 Sort the list.
 Remove the 10% smallest values.
 Remove the 10% largest values.
 Calculate the mean of the new list obtained .&lt;hr&gt;

==Data of Experiment==       
    Estimates =[1000,1010,1786,2000,1500,1500,100,120,150,150,150,170,175,180,197,200,200,200,200,200,200,220,220,220,220,234,250,250,250,250,250,250,250,250,250,263,270,275,275,286,300,
                300,300,300,300,300,300,300,320,350,350,350,400, 400,400,400,400,450,467,500,500,500,500,500,500,500,550,550,600,600,600,650,700,700,720]

    '''CODE:'''
&lt;pre&gt;
Estimates = [1000,1010,1786,2000,1500,1500,100,120,150,150,150,170,175,180,197,200,200,200,200,200,200,220,220,220,220,234,250,250,250,250,250,250,250,250,250,263,270,275,275,286,300,                300,300,300,300,300,300,300,320,350,350,350,400,400,400,400,400,450,467,500,500,500,500,500,500,500,550,550,600,600,600,650,700,700,720]
Estimates.sort()
offset = int(0.10*len(Estimates))
for i in range(offset):
       del Estimates[0]
       del Estimates[-1]
Sum = 0    
for i in range(len(Estimates)):
       Sum += Estimates[i]
Mean_Value = Sum/len(Estimates)
print(&quot;Mean : &quot;, int(Mean_Value))
#Output:
Mean :  351
&lt;/pre&gt;
&lt;hr&gt;
==Trimmed Mean for the above example== 
&lt;h3&gt;Using scipy library&lt;/h3&gt;
&lt;pre&gt;
#import scipy to use the method of trim_mean
from scipy import stats
trimMean = stats.trim_mean(Estimates, 0.1) # Trim 10% at both ends
print(&quot;Trimmed Mean : &quot;,trimMean)
#Output:
Trimmed Mean :  335.1020408163265
&lt;/pre&gt;

&lt;h3&gt;Without using scipy library&lt;/h3&gt;
&lt;pre&gt;
#Trimmed mean with 10%
p=10/100
#sorted data
data=[2, 4, 6, 7, 11, 21, 81, 90, 105, 121]
n = len(data)
#Remove elements from both end
rem=int(n*p)
newData = data[rem:-rem]
mean = 0
for i in newData:
    mean += i
mean = int(mean/len(newData))
print(&quot;Trimmed mean : &quot;,mean)
#Output: Trimmed mean :  40
&lt;/pre&gt;
[[#Top]]

=Jumbled_Words Permutations: Jumbled Words=
==What are Permutations ?==
A permutation also called ordering of selected number of elements from a list denoted by nPr here we are choosing all elements of a list and so n=r&lt;br&gt;
nPr=n!/(n-r)!&lt;br&gt; as n=r
nPn=n!&lt;br&gt; which gives all possible arrangement of elements present in a list.

 For example, permutations of list [1,2,3] are [1,2,3], [1,3,2], [2,1,3], [2,3,1], 
[3,1,2], and [3,2,1]. 
The number of permutations of a list of elements nPn is given by n!. For example, there are 2! = 2 x 1 = 2 permutations of [1,2], namely [1,2] and [2,1], and 3! = 3 x 2 x 1 = 6 permutations of [1,2,3], as mentioned above.&lt;br/&gt;
[[File:Permutations.jpg]]

==Implementation==
Here, we try to demonstrate the concept of permutations through jumbled words. It is a two player game in which one person presents the other person a different permutation of the word in his mind. The other person has to guess the right word. If he guesses, the he wins otherwise he loses.
 Input an list of words.
 Randomly pick a word from the list of words .
 Shuffle this word and present it to the other player.
 if word guesses by the player is same as the one picked from list of w
     player wins
 else
     player loses

ALTERNATE CODE TO GENERATE THIS GAME:
&lt;pre&gt;
import random
p1=input(&quot;enter player 1 name:&quot;)
p2=input(&quot;enter player 2 name:&quot;)
l=[&quot;rainbow&quot;,&quot;computer&quot;,&quot;robot&quot;,&quot;butter&quot;,&quot;vegetable&quot;,&quot;science&quot;,&quot;correct&quot;]
c1=c2=a1=a2=f1=f2=0
k=1
i=3
def play():
    n=random.choice(l)        ##n=chooses a word from list l
    l1=[]
    for j in n:
       l1.append(j)      ##creates a list for word in n
    for t in range(len(l1)):
       p=random.choice(l1)     ##this randomly displays letters in the list
       print(p)
       l1.remove(p)          ##to avoid the repetition of a letter
    s=input(&quot;enter the word:&quot;)
    if(s==n):
        print(&quot;correct&quot;)
        return 1
    else:
        print(&quot;not correct&quot;)
        print(&quot;answer is&quot;,n)
        return 0
def stat():
     print(&quot;player 1:&quot;)
     print(&quot;score:&quot;,c1)
     print(&quot;answered:&quot;,a1)
     print(&quot;failed:&quot;,f1)
     print(&quot;.............&quot;)
     print(&quot;player 2:&quot;)
     print(&quot;score:&quot;,c2)
     print(&quot;answered:&quot;,a2)
     print(&quot;failed&quot;,f2)
     if(c1&gt;c2):
         print(p1,&quot; won over &quot;,p2)
     elif(c1==c2):
         print(&quot;draw game&quot;)
     else:
         print(p2,&quot; won over &quot;,p1) 
while(i!=4):
      if(i==3):
         if(k==1):
             print(&quot;player 1 turn&quot;)
             print(&quot;your jumbled word is:&quot;)
             k=k+1
             m=play()
             if(m==1):      ##if guessed answer is correct,then score and no.of answered count will be increased
                c1+=1
                a1+=1
             else:
                f1+=1       ##else count of no.of failed to answered will be incremented
         else:
             print(&quot;player 2 turn&quot;)
             print(&quot;your jumbled word is:&quot;)
             k=k-1
             m=play()
             if(m==1):
                c2=c2+1
                a2=a2+1
             else:
                f2=f2+1
       if(i==2):
             print(&quot;present status&quot;)
             stat()
       i=int(input(&quot;enter your choice  1.stop 2.status 3.continue&quot;))
       if(i==1):
             stat()
             i=i+3
&lt;/pre&gt;
&lt;hr&gt;
=== JumbledWord Simple Logic, In Short ===
[[File:jumbledWord.gif]]
&lt;hr&gt;
'''Logic to create a Jumbled Word'''
&lt;hr&gt;
&lt;pre&gt;
#Get Jumbled Word and print it Horizontally
import random

def getJumbledWord(b):
    jumble=''
    l1 = [ b[i] for i in range(0, len(b)) ]
    for t in range(len(l1)):
       p=random.choice(l1)     ##this randomly gets letters from the list      
       jumble=jumble+p       
       l1.remove(p)
    return jumble

b=input(&quot;Enter a word to make it jumbled : &quot;)
print(&quot;Jumbled Word : &quot;, getJumbledWord(b))
&lt;/pre&gt;
&lt;hr&gt;
'''Another Logic to create a Jumbled Word'''
&lt;hr&gt;
&lt;pre&gt;
b=input(&quot;Enter a word to make it jumbled : &quot;)

def getJumbledWord1(b):
    l1 = [ b[i] for i in range(0, len(b)) ]
    random.shuffle(l1)
    str1 = ''.join(l1)
    return str1

print(&quot;Jumbled Word : &quot;, getJumbledWord1(b))
&lt;/pre&gt;

====Sample Output:====
&lt;pre&gt;
---- Output1 
Enter a word to make it jumbled : butter
Jumbled Word :  tbture

---- Output2 
Enter a word to make it jumbled : petriotism
Jumbled Word :  pittrosime
&lt;/pre&gt;

=Theory of Evolution=

== What is Evolution ? ==
Evolution is the change in heritable characteristics over successive generations. The theory of evolution explains that DNA, which acts as a carrier of genetic information from one generation to other, tends to change or mutate occasionally. These changes are reflected in next generations to come. This is how life has evolved on earth from bacteria to human beings.&lt;br&gt;
[[File:Evolution.png|500px]]

== Implementation ==
&lt;pre&gt;An array representing DNA is stored in a file. As genes are forms of DNA, they contain information to be transferred to forthcoming generations. Assume that information is in the form of bits (in the form of 0s and 1s). A number is picked randomly from 1 to the size of the array. A new parameter has been introduced which decides whether mutation would occur or not. If the value of this new parameter is 1 (It is picked randomly from 1 to 100), then only change is reflected down the generations, otherwise it is not. The pseudo code is as follows :
Input an array containing genetic information .
Randomly generate a number (say m) from 1 to length of the array. Randomly generate other number (say p) from 1 to 100.
 
    if p is equal to 1 then 
        if m is 1 then
          set it to 0
        else
          set it to 1
&lt;/pre&gt;
[[#TOP]]</text>
      <sha1>j9g4jaftk1wlsj5qvbjkbqqxvcs44uo</sha1>
    </revision>
    <revision>
      <id>3572</id>
      <parentid>3571</parentid>
      <timestamp>2018-09-28T02:47:55Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* Loops */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="29372">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_3 Contributors of this page]
*Week 3 Playlist: https://www.youtube.com/playlist?list=PLc_j0TNIaWxOVx_z9jAM2UB3RqYNXaoEo
=List=
List is a flexible data structure used for storing a group of data separated by comma. The elements in a list need not be of the same data type.

'''Example:'''
       List_1 = [ 1, 2,3] or 
       List_1 = [&quot;coffee&quot;, &quot;Tea&quot;, &quot;Milk&quot;] or
       List_1 = [1,&quot;coffee&quot;, &quot;Tea&quot;, 3, &quot;5&quot;]

==List Creation==
&lt;pre&gt;a) A list can be created by simply putting values (separated by comma) between square brackets as given below,
       List_1 = [1,&quot;coffee&quot;, &quot;Tea&quot;, 3, &quot;5&quot;] #this creates a list by name List_1 containing following items


Or,
(b)A List can be created from scratch and elements can be added 
        List_2 = [ ]
        List_2.append(&quot;Kala&quot;)
        List_2.append(&quot;Mala&quot;)
Here we use &quot;append&quot; ,which is a function in python that enable us to append or attach an element to a list .
Thus List_2 will now hold [&quot;Kala&quot;,&quot;Mala&quot;]
&lt;/pre&gt;
[[#TOP]]

==Operations and Methods to work with List==
&lt;pre&gt;
a = [25,30,50,90,12,13]
b = [100,300,500,200,250]
&lt;/pre&gt;
&lt;hr&gt;
&lt;table border=2&gt;
  &lt;tr&gt;
    &lt;th&gt;&lt;b&gt;Method/&lt;br&gt;Operator&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Function&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Syntax&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Output&lt;/b&gt;&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;len()&lt;/td&gt;
    &lt;td&gt;Find length of a list&lt;/td&gt;
    &lt;td&gt;len(a)&lt;/td&gt;
    &lt;td&gt;6&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;max()&lt;/td&gt;
    &lt;td&gt;Find maximum element from the list&lt;/td&gt;
    &lt;td&gt;max(a)&lt;/td&gt;
    &lt;td&gt;90&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;min()&lt;/td&gt;
    &lt;td&gt;Find minimum element from the list&lt;/td&gt;
    &lt;td&gt;min(a)&lt;/td&gt;
    &lt;td&gt;12&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sum()&lt;/td&gt;
    &lt;td&gt;Returns sum of all elements of the list&lt;/td&gt;
    &lt;td&gt;sum(a)&lt;/td&gt;
    &lt;td&gt;220&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;reverse()&lt;/td&gt;
    &lt;td&gt;Reverses the original list&lt;/td&gt;
    &lt;td&gt;a.reverse()&lt;/td&gt;
    &lt;td&gt;[13, 12, 90, 50, 30, 25]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sort()&lt;/td&gt;
    &lt;td&gt;Sorts the original list in ascending order&lt;/td&gt;
    &lt;td&gt;a.sort()&lt;/td&gt;
    &lt;td&gt;[12, 13, 25, 30, 50, 90]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sorted()&lt;/td&gt;
    &lt;td&gt;Returns the new sorted list &lt;/td&gt;
    &lt;td&gt;sorted(a)&lt;/td&gt;
    &lt;td&gt;[12, 13, 25, 30, 50, 90]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;insert()&lt;/td&gt;
    &lt;td&gt;Insert at a particular index in the list, and shifts remaining elements&lt;/td&gt;
    &lt;td&gt;a.insert(3,3)&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 3, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;append()&lt;/td&gt;
    &lt;td&gt;Adds elements/object to the end of the list&lt;/td&gt;
    &lt;td&gt;a.append(5)&lt;br&gt;a.append([10,20])&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 5]&lt;br&gt;[25, 30, 50, 90, 12, 13, [10, 20]]&lt;br&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;extend()&lt;/td&gt;
    &lt;td&gt;Adds object to the end of the list as elements not as object&lt;/td&gt;
    &lt;td&gt;a.extend([10,20])&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 10, 20]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;*&amp;nbsp;&amp;nbsp;Repeatation&lt;br&gt;operator&lt;/td&gt;
    &lt;td&gt;Repeat the list for n times and returns a new list&lt;/td&gt;
    &lt;td&gt;a*2&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 25, 30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;+ Concatenation&lt;br&gt;operator&lt;/td&gt;
    &lt;td&gt;Concatenates two lists, and returns a new list&lt;/td&gt;
    &lt;td&gt;a+b&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 100, 300, 500, 200, 250]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;index()&lt;/td&gt;
    &lt;td&gt;Finds index of a particular element in the list or not&lt;/td&gt;
    &lt;td&gt;a.index(25)&lt;br&gt;a.index(0)&lt;br&gt;&lt;/td&gt;
    &lt;td&gt;0&lt;br&gt;&lt;br&gt;ValueError: 0 is not in list&lt;br&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;in operator&lt;/td&gt;
    &lt;td&gt;Finds whether a particular element is in the list or not, returns boolean&lt;/td&gt;
    &lt;td&gt;25 in a&lt;/td&gt;
    &lt;td&gt;True&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;not in operator&lt;/td&gt;
    &lt;td&gt;Checks if element is not available in list, returns boolean&lt;/td&gt;
    &lt;td&gt;25 not in a&lt;/td&gt;
    &lt;td&gt;False&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;count()&lt;/td&gt;
    &lt;td&gt;Counts the number of occurence of an element in the list&lt;/td&gt;
    &lt;td&gt;a.count(25)&lt;/td&gt;
    &lt;td&gt;1&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;remove()&lt;/td&gt;
    &lt;td&gt;Removes an element from the list&lt;/td&gt;
    &lt;td&gt;a.remove(25)&lt;/td&gt;
    &lt;td&gt; [30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;pop()&lt;/td&gt;
    &lt;td&gt;Delete and return item at index 0&lt;/td&gt;
    &lt;td&gt;a.pop(0)&lt;/td&gt;
    &lt;td&gt;25 , a will be [30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;del&lt;/td&gt;
    &lt;td&gt;Deletes item at a particular index from the list&lt;/td&gt;
    &lt;td&gt;del a[0]&lt;/td&gt;
    &lt;td&gt;[30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;all()&lt;/td&gt;
&lt;td&gt;Returns True, if all items in list are True or it is an empty list&lt;/td&gt;
&lt;td&gt;all([True, True, True])
all([])
&lt;/td&gt;
&lt;td&gt;True&lt;br&gt;
True&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;any()&lt;/td&gt;
&lt;td&gt;Returns True, if any item in list is True else return False&lt;/td&gt;
&lt;td&gt;any([True, True, True])&lt;br&gt;
any([True, False, True])&lt;br&gt;
any([])&lt;/td&gt;
&lt;td&gt;True&lt;br&gt;False&lt;br&gt;False&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;

==Printing the List==
=== Print whole list ===
A list can be printed simply or using a ''for / while'' loop 

 print(List_2)     # To print the entire list
This code will print      
 ['Kala','Mala']     

===Print element at a particular index===
&lt;pre&gt;
Using index position
    List_2[0]     # prints 'Kala' ,i.e,the value at index position 0.
    List_2[1]     # prints 'Mala'.
&lt;/pre&gt;
=== Without using index position ===
&lt;pre&gt;
for item in List_2:   # here item is a variable used to access elements in list.
       print(item)
   This code snippet prints 
    Kala
    Mala
&lt;/pre&gt;
[[#TOP]]

==Search for a particular element in list==
Elements in a list can be searched by one of the two ways:
=== using index() function===
&lt;pre&gt;
ages1 = [11,23,12,23,45]

#if element is available in the list, index() returns the index value on which, the element is present.
print(ages1.index(45))#Output: 4

#if element is not available in the list, index() returns ''ValueError''
print(ages1.index(0))#Output: ValueError:
&lt;/pre&gt;

In programming, if such error occurs, program gets terminated. It can be solved using exception handling.
e.g.
&lt;pre&gt;
ages1 = [11,23,12,23,45]

try:
    print(ages1.index(0))
except ValueError:
    print(&quot;Exception has occured&quot;)    
    print(&quot;Element is not found in the list&quot;)

&lt;/pre&gt;
&lt;pre&gt;
'''Output: 
Exception has occured
Element is not found in the list
'''&lt;/pre&gt;
[[#TOP]]

=== using 'in' operator===
''in'' operator is used to check whether a particular element is available in the list or not.e.g.

&lt;pre&gt;
ages1 = [11,23,12,23,45]
no=11

if no in ages1:
    print(&quot;no is there in the list&quot;)
else:    
    print(&quot;no is NOT there in the list&quot;)
&lt;/pre&gt;
&lt;pre&gt;
#Output: no is there in the list
&lt;/pre&gt;


'''Number is not there in the list'''
&lt;pre&gt;
ages1 = [11,23,12,23,45]
no=15

if no in ages1:
    print(&quot;no is there in the list&quot;)
else:    
    print(&quot;no is NOT there in the list&quot;)
&lt;/pre&gt;
&lt;pre&gt;
Output: no is NOT there in the list
&lt;/pre&gt;
[[#TOP]]

==Updating the List==
The lists can be updated using ''append'' or ''insert'' function.  Append adds the element to the end of the list and Insert adds the element in the specified position.
&lt;pre&gt;
   # add the element 'Sheela' to the end of the list.
   List_2.append(&quot;Sheela&quot;)    
   print (List_2) will output 
   ['Kala', 'Mala', 'Sheela']
&lt;/pre&gt;
   &lt;pre&gt;
# add the element &quot;Bala&quot; in the list at the index 1.
   List_2.insert(1,&quot;Bala&quot;)    
   print (List_2) will output 
   ['Kala', 'Bala','Mala', 'Sheela']
&lt;/pre&gt;

=== Extend the list by adding elements of other list at end using extend()===
&lt;pre&gt;
ages = [11,23,12,23,45]
ages.extend([57,58])
print(ages)
&lt;/pre&gt;

&lt;pre&gt;
#Output: [11, 23, 12, 23, 45, 57, 58]
&lt;/pre&gt;

==== Difference between ''append and extend'' ====
Difference between append and extend can be easily understood, by the following example.

&lt;pre&gt;
appendlist = [11,23,12,23,45]
appendlist.append([57,58])

extendlist= [11,23,12,23,45]
extendlist.extend([57,58])
&lt;/pre&gt;

&lt;pre&gt;
'''Output:
[11, 23, 12, 23, 45, [57, 58]]
[11, 23, 12, 23, 45, 57, 58]'''
&lt;/pre&gt;

[[#TOP]]

==Basic Operations on List==
===Frequency of Occurrence===
list.count(object) will return the number of times the object occur in the list.
  '''Example'''
    ages = [11,23,12,23,45,43,22,24,23]
    ages.count(23) will return
    3
    ages.count(100) will return
    0

===Length of the List===
len(list) will return the length of the list ie. the number of objects in the list.
  '''Example'''
&lt;pre&gt;
    ages = [11,23,12,23,45,43,22,24,23]
    len(ages) # Output: 9
&lt;/pre&gt;

To print the objects in the list either use ''for item in list'' or ''for index in range(len(list))''
&lt;pre&gt;
    for item in ages:       
        print (item)  
        (OR)
    for index in range(len(ages)) :
        print (ages[index])
&lt;/pre&gt;

===Sort the List===
list.sort() will sort the list in ascending order
  '''Example'''
    ages = [11,23,12,23,45,43,22,24,23]
    ages.sort() 
    print (ages) 
    [11, 12, 22, 23, 23, 23, 24, 43, 45]

[[#TOP]]

===Sort the List using sorted() function===
sorted(list1) will sort the list and return a new list, it doesn't modify the original list
&lt;br&gt;'''Example: Sort in ascending order'''
&lt;pre&gt;
ages = [11,23,12,23,45,43,22,24,23]
newList=sorted(ages)
print(newList)

#Output: [11, 12, 22, 23, 23, 23, 24, 43, 45]
&lt;/pre&gt;

&lt;br&gt;'''Example: Sort in descending order'''
&lt;pre&gt;
ages = [11,23,12,23,45,43,22,24,23]
newList=sorted(ages,reverse=True)
print(newList)

#Output: [45, 43, 24, 23, 23, 23, 22, 12, 11]
&lt;/pre&gt;

===Reverse the List===
list.reverse() will reverse the original list
  '''Example'''
    ages = [11, 12, 22, 23, 23, 23, 24, 43, 45]
    ages.reverse()
    print (ages)
    [45, 43, 24, 23, 23, 23, 22, 12, 11]

Both sort() and reverse() list operation will work on numeric and alphanumeric data list.

A special use of the reverse() function is to descend a list that is sorted in ascending order.

  '''Example'''
&lt;pre&gt;
ages = [11, 12, 22, 23, 23, 23, 24, 43, 45]
ages.sort()
print(ages)
ages.reverse()
print(ages)
&lt;/pre&gt;

===Slicing===
Used to retrieve an object or objects in a range as a list  
  '''Example'''

Use ''list[index]'' to retrieve the object at the given index
&lt;pre&gt;
In [1]: student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
In [2]: student[3]     #Object at index 3.  Remember index starts at 0
Out[2]: 'Geetha'      
&lt;/pre&gt;

Use ''list[start_index : end_index + 1]'' to retrieve objects from the start_index to end_index 
&lt;pre&gt;
In [3]: student[2:4]     # Objects from index 2 to 3 as List. Note the [ and ]
Out[3]: ['Vijay', 'Geetha']   
&lt;/pre&gt;

Use ''list[:]'' to retrieve objects from the starting of the list to the end of the list. 
The default start value will be the starting index of the list (i.e. 0) and the default end value
will be the length of the list 
&lt;pre&gt;
In [4]: student[:]        # prints the entire list
Out[4]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma', 'Janani']
&lt;/pre&gt;
&lt;pre&gt;
In [5]: student[:5]       # prints the objects from the start of the list upto object at index 4
Out[5]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran']
&lt;/pre&gt;
&lt;pre&gt;
In [6]: student[2:]       # prints the objects from index 2 upto the end of the list
Out[6]: ['Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma', 'Janani']
&lt;/pre&gt;

Negative index too is available in Python. It starts from last element of the list. i.e.
&lt;pre&gt;
In [7]:student[-1]        #prints last index of list
Out[7]: 'Janani'
&lt;/pre&gt;
&lt;pre&gt;
In [8]:student[-1:-8]     #prints empty list
Out[8]: []
&lt;/pre&gt;
&lt;pre&gt;
In [9]:student[-8:-1]     #prints -8th index to -1st index elements
Out[9]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma']
&lt;/pre&gt;

[[#TOP]]

===Removing Item from list ===
----

Is used to remove a specific item from the list.

'''Example:'''
 
Use list.remove(entry/value)  Or   del list[index]    Or list.pop(index)
&lt;pre&gt;
student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
student.remove(&quot;Arun&quot;)   #This will delete item &quot;Arun&quot;
         Or    
del student[0]           # This will delete item at index 0
         Or
student.pop(0)         # This will delete and return item at index 0
print(student)    
Output: &quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
&lt;/pre&gt;

[[#TOP]]

===Delete list ===
----
Used to delete complete list

'''Example'''

Use del &lt;list name&gt;
&lt;pre&gt;
student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
del student&lt;/pre&gt;

===Concatenation of two lists===
----
''+'' is the concatenation operator which is used concatenate two lists. 
&lt;pre&gt;
ages1 = [11,23,12,23,45]
ages2 = [25, 24, 43, 47]
age=ages1+ages2
print(age)
#Output: [11, 23, 12, 23, 45, 25, 24, 43, 47]
&lt;/pre&gt;

===Repeatation of a list ===
----
''*'' is the operator to repeat a particular list.
&lt;pre&gt;
ages1 = [11,23,12,23,45]
age=ages1*5 #ages1 list is repeated 5 times and stroed in ''age'' list
print(age)

#Output: [11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45]
&lt;/pre&gt;

=== all and any for List===
all() and any() are special functions to check whether all elements in iterable is ''True'' or any element is ''True''
&lt;ol&gt;
&lt;li&gt;If all elements in a list are ''True'', '''all()''' will return ''True''&lt;/li&gt;
&lt;li&gt;If iterable is ''empty'', '''all()''' will return ''True''&lt;/li&gt;
&lt;li&gt;If iterable contains at least one ''True'', '''any()''' will return ''True''&lt;/li&gt;
&lt;li&gt;If iterable is ''empty'', '''any()''' will return ''False''&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;
lsit=[True, True, True, True]
print(all(lsit))#Output: True
print(any(lsit))#Output: True

lsit1=[True, False, True, True]
print(all(lsit1))#Output: False
print(any(lsit1))#Output: True

lsit2=[False,False,False]
print(all(lsit2))#Output: False
print(any(lsit2))#Output: False

lsit3=[]
print(all(lsit3))#Output: True
print(any(lsit3))#Output: False
&lt;/pre&gt;

==Conditional Statements==
&lt;pre&gt;Conditionals are used to check the condition and change the flow of the program 
accordingly. They are realized in programming languages through if statement. The 
syntax is as follows :
&lt;pre&gt;
         if condition : 
            statement
&lt;/pre&gt;
    '''Note:''' Do not forget indentation (inserting space/tab) in the line after the
 if condition.
    
    In case you want to execute a set of statements when a condition is true and another

set of statement when the condition is false.
&lt;pre&gt;
         if condition : 
            statement 1
         else :
            statement 2
&lt;/pre&gt;

&lt;pre&gt;    
    Multiple if-else statements can be written as follows:
         if condition_1 : 
            statement 1
         elif condition_2 : # 'elif' is short for 'else if'
            statement 2
         elif condition_3 :
            statement 3
        .
        .
         else :
            final statement
&lt;/pre&gt;

[[#TOP]]

=Loops and Conditionals : Fizzbuzz=
====Loops====
Loops are used to execute a set of repetitive statements. They are realised
through 'while' and 'for' loops in programming languages. The syntax of 'for' loop is 
as follows :
&lt;pre&gt;
for LOOPVARIABLE in SEQUENCE: 
            STATEMENTS&lt;/pre&gt;

    '''e.g.''' to print all the data from a list we can write:
&lt;pre&gt;
for item in list_name:
      print(item)&lt;/pre&gt;
    OR
&lt;pre&gt;
for index in range(len(list_name)):
      print(list_name[index])
 &lt;/pre&gt;   
    The syntax for while loop is as follows :
&lt;pre&gt;    
while BOOLEANEXPRESSION: 
     STATEMENTS
     INCREMENT/DECREMENT
&lt;/pre&gt;    
    '''e.g.''' if we want to print all numbers from 1 to 10
&lt;pre&gt;
i=1
while i&lt;=10 :
    print(i,&quot; &quot;)
    i=i+1
    &lt;/pre&gt;
 
   'while' loop has indefinite iteration (run-time unknown). So, there must be loop
 break statement in it.
 Whereas 'for' loop is definite in nature (i.e. known or predictable span).&lt;br&gt;

&lt;b&gt;NOTE: Python doesn't have anything like do-while loop.&lt;/b&gt;

[[#TOP]]

==Implementation==
Here, we try to demonstrate the concept of loops and conditionals through a game called Fizzbuzz. The rules are as follows :&lt;br/&gt;
[[File:fizzBuzz.gif]]

• if input number is a multiple of ’3’ print ”Fizz”
&lt;br/&gt;
• if input number is a multiple of ’5’ print ”Buzz”
&lt;br/&gt;
• if input number is a multiple of both '3' and ’5’ print ”FizzBuzz”
&lt;br/&gt;
The pseudo code is as follows :
&lt;pre&gt;
   If input no % 3 == 0 and  input no % 5 == 0 : 
       print ”Fizzbuzz”
   else if input no % 3 == 0 : 
       print ”Fizz”
   else if input no % 5 == 0 : 
       print ”Buzz”
   else :
       print the input no
&lt;/pre&gt;
The order of statements execution matters to get the desired output. The highest priority condition should be first followed by other. In fizzbuzz programming, first checking should be done for both divisibility of 3 and 5. If condition not satisfied only then it should check individually for 3 or 5. So carefully choosing the order is crucial for better programming.
Note: There is some effect of present condition statements chosen on next conditions statements. That is why in first attempt fizzbuzz programming got struck.

Example: 
&lt;pre&gt;
#Code to achieve the above requirement in python3.
i = int(input(&quot;Enter the number&quot;)) 
if i%3 == 0 and i%5 == 0: print(i,&quot;FizzBuzz&quot;)  
elif i%5 == 0: print(i,&quot;Buzz&quot;)
elif i%3 == 0: print(i,&quot;Fizz&quot;)
else: print(i)
&lt;/pre&gt;
Lets put the same into a loop for a range given by the user.
&lt;pre&gt;
def fizzbuzzgame(start,stop):
    for i in range(start,stop+1):
        if i%3 == 0 and i%5 == 0:
            print(i,&quot;FizzBuzz&quot;)
        elif i%5 == 0:
            print(i,&quot;Buzz&quot;)
        elif i%3 == 0:
            print(i,&quot;Fizz&quot;)
        else: print(i)

fizzbuzzgame(50,100)
&lt;/pre&gt;


=== Fizz Buzz game in Interactive mode with Score ===
'''By Ms. Ami Tusharkant Choksi'''
&lt;pre&gt;
def fizzbuzzgame(i):
        if i%3 == 0 and i%5 == 0:
            print(i,&quot;FizzBuzz&quot;)
            return(&quot;fzbz&quot;)
        elif i%5 == 0:
            print(i,&quot;Buzz&quot;)
            return(&quot;bz&quot;)
        elif i%3 == 0:
            print(i,&quot;Fizz&quot;)
            return(&quot;fz&quot;)
        else:
            print(i)
            return(&quot;no&quot;)

ch = 'y'
fizzbuzz=0
fizz=0
buzz=0
nothing=0
print(&quot;&quot;&quot;
 _____  ____  _____  _____  ____   __ __  _____  _____       ____   ____  ___ ___    ___ 
|     ||    ||     ||     ||    \ |  |  ||     ||     |     /    | /    ||   |   |  /  _]
|   __| |  | |__/  ||__/  ||  o  )|  |  ||__/  ||__/  |    |   __||  o  || _   _ | /  [_ 
|  |_   |  | |   __||   __||     ||  |  ||   __||   __|    |  |  ||     ||  \_/  ||    _]
|   _]  |  | |  /  ||  /  ||  O  ||  :  ||  /  ||  /  |    |  |_ ||  _  ||   |   ||   [_ 
|  |    |  | |     ||     ||     ||     ||     ||     |    |     ||  |  ||   |   ||     |
|__|   |____||_____||_____||_____| \__,_||_____||_____|    |___,_||__|__||___|___||_____|
                                                                                         
&quot;&quot;&quot;)   

while(ch == 'y'):
    n=int(input(&quot;Enter a Number : &quot;))
    winLoose=fizzbuzzgame(n)
    if(winLoose == &quot;fz&quot;):
        fizz+=1
    elif(winLoose == &quot;bz&quot;):
        buzz+=1
    elif(winLoose == &quot;fzbz&quot;):
        fizzbuzz+=1
    ch=input(&quot;Do you want to continue playing the game : (y/n)&quot;)
    if(ch=='n'):
        print('Congratulations, your score is\n FizzBuzz:%d\nFizz:%d\nBuzz:%d' %
(fizzbuzz,fizz,buzz))
    
'''Sample Output:

 _____  ____  _____  _____  ____   __ __  _____  _____       ____   ____  ___ ___    ___ 
|     ||    ||     ||     ||    \ |  |  ||     ||     |     /    | /    ||   |   |  /  _]
|   __| |  | |__/  ||__/  ||  o  )|  |  ||__/  ||__/  |    |   __||  o  || _   _ | /  [_ 
|  |_   |  | |   __||   __||     ||  |  ||   __||   __|    |  |  ||     ||  \_/  ||    _]
|   _]  |  | |  /  ||  /  ||  O  ||  :  ||  /  ||  /  |    |  |_ ||  _  ||   |   ||   [_ 
|  |    |  | |     ||     ||     ||     ||     ||     |    |     ||  |  ||   |   ||     |
|__|   |____||_____||_____||_____| \__,_||_____||_____|    |___,_||__|__||___|___||_____|
                                                                                         

Enter a Number : 666
666 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 777
777 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 555
555 FizzBuzz
Do you want to continue playing the game : (y/n)y
Enter a Number : 1
1
Do you want to continue playing the game : (y/n)y
Enter a Number : 789
789 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 25
25 Buzz
Do you want to continue playing the game : (y/n)n
Congratulations, your score is

FizzBuzz:1
Fizz:3
Buzz:1

&lt;/pre&gt;

=Crowd Computing: Just Estimate=
==Wisdom of Crowds==
The concept of ’Wisdom of Crowds’ was proposed by Francis Galton. A weight-judging competition was carried on at the annual show of the West of England Fat Stock and Poultry Exhibition recently held at Plymouth, A fat ox having been selected, competitors bought stamped and numbered cards, each, on which to inscribe their respective names, addresses, and estimates of what the ox would weigh after it had been slaughtered. Those who guessed most successfully received prizes. About 8oo tickets were issued to the par- ticipants. The middlemost estimate of all the estimates recorded was 1207 lbs and the actual weight of the ox was 1198 lbs.

==Our Experiment==
The crowd had to guess the number of candies/gems in a jar. Around 75 people participated in the experiment. The actual number of gems in the jar were 375. The median of all estimates came out to be 300 and the mean of all the estimates came out to be around 396. Median underestimated and mean overestimated the actual value. So according to recent studies, Trimmed mean must be used as an aggregate measure to estimate where Wisdom of Crowds is involved.
[[File:Gemsjar.jpg|center|200px|caption]]

===Trimmed Mean===
In these kinds of experiments, 10% trimmed mean is usually followed. For calculating 10% trimmed mean, remove 10% smallest and 10% largest values from the sample. Calculate the mean of the sample obtained. In the above experiment, the trimmed mean came out to be around 351 which is very close to the actual value.

==Implementation==
Here, we try to demonstrate the concept of trimmed mean through crowd computing.
 Input a list of estimates done by the crowd .
 Sort the list.
 Remove the 10% smallest values.
 Remove the 10% largest values.
 Calculate the mean of the new list obtained .&lt;hr&gt;

==Data of Experiment==       
    Estimates =[1000,1010,1786,2000,1500,1500,100,120,150,150,150,170,175,180,197,200,200,200,200,200,200,220,220,220,220,234,250,250,250,250,250,250,250,250,250,263,270,275,275,286,300,
                300,300,300,300,300,300,300,320,350,350,350,400, 400,400,400,400,450,467,500,500,500,500,500,500,500,550,550,600,600,600,650,700,700,720]

    '''CODE:'''
&lt;pre&gt;
Estimates = [1000,1010,1786,2000,1500,1500,100,120,150,150,150,170,175,180,197,200,200,200,200,200,200,220,220,220,220,234,250,250,250,250,250,250,250,250,250,263,270,275,275,286,300,                300,300,300,300,300,300,300,320,350,350,350,400,400,400,400,400,450,467,500,500,500,500,500,500,500,550,550,600,600,600,650,700,700,720]
Estimates.sort()
offset = int(0.10*len(Estimates))
for i in range(offset):
       del Estimates[0]
       del Estimates[-1]
Sum = 0    
for i in range(len(Estimates)):
       Sum += Estimates[i]
Mean_Value = Sum/len(Estimates)
print(&quot;Mean : &quot;, int(Mean_Value))
#Output:
Mean :  351
&lt;/pre&gt;
&lt;hr&gt;
==Trimmed Mean for the above example== 
&lt;h3&gt;Using scipy library&lt;/h3&gt;
&lt;pre&gt;
#import scipy to use the method of trim_mean
from scipy import stats
trimMean = stats.trim_mean(Estimates, 0.1) # Trim 10% at both ends
print(&quot;Trimmed Mean : &quot;,trimMean)
#Output:
Trimmed Mean :  335.1020408163265
&lt;/pre&gt;

&lt;h3&gt;Without using scipy library&lt;/h3&gt;
&lt;pre&gt;
#Trimmed mean with 10%
p=10/100
#sorted data
data=[2, 4, 6, 7, 11, 21, 81, 90, 105, 121]
n = len(data)
#Remove elements from both end
rem=int(n*p)
newData = data[rem:-rem]
mean = 0
for i in newData:
    mean += i
mean = int(mean/len(newData))
print(&quot;Trimmed mean : &quot;,mean)
#Output: Trimmed mean :  40
&lt;/pre&gt;
[[#Top]]

=Jumbled_Words Permutations: Jumbled Words=
==What are Permutations ?==
A permutation also called ordering of selected number of elements from a list denoted by nPr here we are choosing all elements of a list and so n=r&lt;br&gt;
nPr=n!/(n-r)!&lt;br&gt; as n=r
nPn=n!&lt;br&gt; which gives all possible arrangement of elements present in a list.

 For example, permutations of list [1,2,3] are [1,2,3], [1,3,2], [2,1,3], [2,3,1], 
[3,1,2], and [3,2,1]. 
The number of permutations of a list of elements nPn is given by n!. For example, there are 2! = 2 x 1 = 2 permutations of [1,2], namely [1,2] and [2,1], and 3! = 3 x 2 x 1 = 6 permutations of [1,2,3], as mentioned above.&lt;br/&gt;
[[File:Permutations.jpg]]

==Implementation==
Here, we try to demonstrate the concept of permutations through jumbled words. It is a two player game in which one person presents the other person a different permutation of the word in his mind. The other person has to guess the right word. If he guesses, the he wins otherwise he loses.
 Input an list of words.
 Randomly pick a word from the list of words .
 Shuffle this word and present it to the other player.
 if word guesses by the player is same as the one picked from list of w
     player wins
 else
     player loses

ALTERNATE CODE TO GENERATE THIS GAME:
&lt;pre&gt;
import random
p1=input(&quot;enter player 1 name:&quot;)
p2=input(&quot;enter player 2 name:&quot;)
l=[&quot;rainbow&quot;,&quot;computer&quot;,&quot;robot&quot;,&quot;butter&quot;,&quot;vegetable&quot;,&quot;science&quot;,&quot;correct&quot;]
c1=c2=a1=a2=f1=f2=0
k=1
i=3
def play():
    n=random.choice(l)        ##n=chooses a word from list l
    l1=[]
    for j in n:
       l1.append(j)      ##creates a list for word in n
    for t in range(len(l1)):
       p=random.choice(l1)     ##this randomly displays letters in the list
       print(p)
       l1.remove(p)          ##to avoid the repetition of a letter
    s=input(&quot;enter the word:&quot;)
    if(s==n):
        print(&quot;correct&quot;)
        return 1
    else:
        print(&quot;not correct&quot;)
        print(&quot;answer is&quot;,n)
        return 0
def stat():
     print(&quot;player 1:&quot;)
     print(&quot;score:&quot;,c1)
     print(&quot;answered:&quot;,a1)
     print(&quot;failed:&quot;,f1)
     print(&quot;.............&quot;)
     print(&quot;player 2:&quot;)
     print(&quot;score:&quot;,c2)
     print(&quot;answered:&quot;,a2)
     print(&quot;failed&quot;,f2)
     if(c1&gt;c2):
         print(p1,&quot; won over &quot;,p2)
     elif(c1==c2):
         print(&quot;draw game&quot;)
     else:
         print(p2,&quot; won over &quot;,p1) 
while(i!=4):
      if(i==3):
         if(k==1):
             print(&quot;player 1 turn&quot;)
             print(&quot;your jumbled word is:&quot;)
             k=k+1
             m=play()
             if(m==1):      ##if guessed answer is correct,then score and no.of answered count will be increased
                c1+=1
                a1+=1
             else:
                f1+=1       ##else count of no.of failed to answered will be incremented
         else:
             print(&quot;player 2 turn&quot;)
             print(&quot;your jumbled word is:&quot;)
             k=k-1
             m=play()
             if(m==1):
                c2=c2+1
                a2=a2+1
             else:
                f2=f2+1
       if(i==2):
             print(&quot;present status&quot;)
             stat()
       i=int(input(&quot;enter your choice  1.stop 2.status 3.continue&quot;))
       if(i==1):
             stat()
             i=i+3
&lt;/pre&gt;
&lt;hr&gt;
=== JumbledWord Simple Logic, In Short ===
[[File:jumbledWord.gif]]
&lt;hr&gt;
'''Logic to create a Jumbled Word'''
&lt;hr&gt;
&lt;pre&gt;
#Get Jumbled Word and print it Horizontally
import random

def getJumbledWord(b):
    jumble=''
    l1 = [ b[i] for i in range(0, len(b)) ]
    for t in range(len(l1)):
       p=random.choice(l1)     ##this randomly gets letters from the list      
       jumble=jumble+p       
       l1.remove(p)
    return jumble

b=input(&quot;Enter a word to make it jumbled : &quot;)
print(&quot;Jumbled Word : &quot;, getJumbledWord(b))
&lt;/pre&gt;
&lt;hr&gt;
'''Another Logic to create a Jumbled Word'''
&lt;hr&gt;
&lt;pre&gt;
b=input(&quot;Enter a word to make it jumbled : &quot;)

def getJumbledWord1(b):
    l1 = [ b[i] for i in range(0, len(b)) ]
    random.shuffle(l1)
    str1 = ''.join(l1)
    return str1

print(&quot;Jumbled Word : &quot;, getJumbledWord1(b))
&lt;/pre&gt;

====Sample Output:====
&lt;pre&gt;
---- Output1 
Enter a word to make it jumbled : butter
Jumbled Word :  tbture

---- Output2 
Enter a word to make it jumbled : petriotism
Jumbled Word :  pittrosime
&lt;/pre&gt;

=Theory of Evolution=

== What is Evolution ? ==
Evolution is the change in heritable characteristics over successive generations. The theory of evolution explains that DNA, which acts as a carrier of genetic information from one generation to other, tends to change or mutate occasionally. These changes are reflected in next generations to come. This is how life has evolved on earth from bacteria to human beings.&lt;br&gt;
[[File:Evolution.png|500px]]

== Implementation ==
&lt;pre&gt;An array representing DNA is stored in a file. As genes are forms of DNA, they contain information to be transferred to forthcoming generations. Assume that information is in the form of bits (in the form of 0s and 1s). A number is picked randomly from 1 to the size of the array. A new parameter has been introduced which decides whether mutation would occur or not. If the value of this new parameter is 1 (It is picked randomly from 1 to 100), then only change is reflected down the generations, otherwise it is not. The pseudo code is as follows :
Input an array containing genetic information .
Randomly generate a number (say m) from 1 to length of the array. Randomly generate other number (say p) from 1 to 100.
 
    if p is equal to 1 then 
        if m is 1 then
          set it to 0
        else
          set it to 1
&lt;/pre&gt;
[[#TOP]]</text>
      <sha1>i9kzfep6q39litcyrzg9nnvprklx8mu</sha1>
    </revision>
    <revision>
      <id>3573</id>
      <parentid>3572</parentid>
      <timestamp>2018-09-28T02:57:08Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* Loops */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="29370">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_3 Contributors of this page]
*Week 3 Playlist: https://www.youtube.com/playlist?list=PLc_j0TNIaWxOVx_z9jAM2UB3RqYNXaoEo
=List=
List is a flexible data structure used for storing a group of data separated by comma. The elements in a list need not be of the same data type.

'''Example:'''
       List_1 = [ 1, 2,3] or 
       List_1 = [&quot;coffee&quot;, &quot;Tea&quot;, &quot;Milk&quot;] or
       List_1 = [1,&quot;coffee&quot;, &quot;Tea&quot;, 3, &quot;5&quot;]

==List Creation==
&lt;pre&gt;a) A list can be created by simply putting values (separated by comma) between square brackets as given below,
       List_1 = [1,&quot;coffee&quot;, &quot;Tea&quot;, 3, &quot;5&quot;] #this creates a list by name List_1 containing following items


Or,
(b)A List can be created from scratch and elements can be added 
        List_2 = [ ]
        List_2.append(&quot;Kala&quot;)
        List_2.append(&quot;Mala&quot;)
Here we use &quot;append&quot; ,which is a function in python that enable us to append or attach an element to a list .
Thus List_2 will now hold [&quot;Kala&quot;,&quot;Mala&quot;]
&lt;/pre&gt;
[[#TOP]]

==Operations and Methods to work with List==
&lt;pre&gt;
a = [25,30,50,90,12,13]
b = [100,300,500,200,250]
&lt;/pre&gt;
&lt;hr&gt;
&lt;table border=2&gt;
  &lt;tr&gt;
    &lt;th&gt;&lt;b&gt;Method/&lt;br&gt;Operator&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Function&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Syntax&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Output&lt;/b&gt;&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;len()&lt;/td&gt;
    &lt;td&gt;Find length of a list&lt;/td&gt;
    &lt;td&gt;len(a)&lt;/td&gt;
    &lt;td&gt;6&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;max()&lt;/td&gt;
    &lt;td&gt;Find maximum element from the list&lt;/td&gt;
    &lt;td&gt;max(a)&lt;/td&gt;
    &lt;td&gt;90&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;min()&lt;/td&gt;
    &lt;td&gt;Find minimum element from the list&lt;/td&gt;
    &lt;td&gt;min(a)&lt;/td&gt;
    &lt;td&gt;12&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sum()&lt;/td&gt;
    &lt;td&gt;Returns sum of all elements of the list&lt;/td&gt;
    &lt;td&gt;sum(a)&lt;/td&gt;
    &lt;td&gt;220&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;reverse()&lt;/td&gt;
    &lt;td&gt;Reverses the original list&lt;/td&gt;
    &lt;td&gt;a.reverse()&lt;/td&gt;
    &lt;td&gt;[13, 12, 90, 50, 30, 25]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sort()&lt;/td&gt;
    &lt;td&gt;Sorts the original list in ascending order&lt;/td&gt;
    &lt;td&gt;a.sort()&lt;/td&gt;
    &lt;td&gt;[12, 13, 25, 30, 50, 90]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sorted()&lt;/td&gt;
    &lt;td&gt;Returns the new sorted list &lt;/td&gt;
    &lt;td&gt;sorted(a)&lt;/td&gt;
    &lt;td&gt;[12, 13, 25, 30, 50, 90]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;insert()&lt;/td&gt;
    &lt;td&gt;Insert at a particular index in the list, and shifts remaining elements&lt;/td&gt;
    &lt;td&gt;a.insert(3,3)&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 3, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;append()&lt;/td&gt;
    &lt;td&gt;Adds elements/object to the end of the list&lt;/td&gt;
    &lt;td&gt;a.append(5)&lt;br&gt;a.append([10,20])&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 5]&lt;br&gt;[25, 30, 50, 90, 12, 13, [10, 20]]&lt;br&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;extend()&lt;/td&gt;
    &lt;td&gt;Adds object to the end of the list as elements not as object&lt;/td&gt;
    &lt;td&gt;a.extend([10,20])&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 10, 20]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;*&amp;nbsp;&amp;nbsp;Repeatation&lt;br&gt;operator&lt;/td&gt;
    &lt;td&gt;Repeat the list for n times and returns a new list&lt;/td&gt;
    &lt;td&gt;a*2&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 25, 30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;+ Concatenation&lt;br&gt;operator&lt;/td&gt;
    &lt;td&gt;Concatenates two lists, and returns a new list&lt;/td&gt;
    &lt;td&gt;a+b&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 100, 300, 500, 200, 250]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;index()&lt;/td&gt;
    &lt;td&gt;Finds index of a particular element in the list or not&lt;/td&gt;
    &lt;td&gt;a.index(25)&lt;br&gt;a.index(0)&lt;br&gt;&lt;/td&gt;
    &lt;td&gt;0&lt;br&gt;&lt;br&gt;ValueError: 0 is not in list&lt;br&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;in operator&lt;/td&gt;
    &lt;td&gt;Finds whether a particular element is in the list or not, returns boolean&lt;/td&gt;
    &lt;td&gt;25 in a&lt;/td&gt;
    &lt;td&gt;True&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;not in operator&lt;/td&gt;
    &lt;td&gt;Checks if element is not available in list, returns boolean&lt;/td&gt;
    &lt;td&gt;25 not in a&lt;/td&gt;
    &lt;td&gt;False&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;count()&lt;/td&gt;
    &lt;td&gt;Counts the number of occurence of an element in the list&lt;/td&gt;
    &lt;td&gt;a.count(25)&lt;/td&gt;
    &lt;td&gt;1&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;remove()&lt;/td&gt;
    &lt;td&gt;Removes an element from the list&lt;/td&gt;
    &lt;td&gt;a.remove(25)&lt;/td&gt;
    &lt;td&gt; [30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;pop()&lt;/td&gt;
    &lt;td&gt;Delete and return item at index 0&lt;/td&gt;
    &lt;td&gt;a.pop(0)&lt;/td&gt;
    &lt;td&gt;25 , a will be [30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;del&lt;/td&gt;
    &lt;td&gt;Deletes item at a particular index from the list&lt;/td&gt;
    &lt;td&gt;del a[0]&lt;/td&gt;
    &lt;td&gt;[30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;all()&lt;/td&gt;
&lt;td&gt;Returns True, if all items in list are True or it is an empty list&lt;/td&gt;
&lt;td&gt;all([True, True, True])
all([])
&lt;/td&gt;
&lt;td&gt;True&lt;br&gt;
True&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;any()&lt;/td&gt;
&lt;td&gt;Returns True, if any item in list is True else return False&lt;/td&gt;
&lt;td&gt;any([True, True, True])&lt;br&gt;
any([True, False, True])&lt;br&gt;
any([])&lt;/td&gt;
&lt;td&gt;True&lt;br&gt;False&lt;br&gt;False&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;

==Printing the List==
=== Print whole list ===
A list can be printed simply or using a ''for / while'' loop 

 print(List_2)     # To print the entire list
This code will print      
 ['Kala','Mala']     

===Print element at a particular index===
&lt;pre&gt;
Using index position
    List_2[0]     # prints 'Kala' ,i.e,the value at index position 0.
    List_2[1]     # prints 'Mala'.
&lt;/pre&gt;
=== Without using index position ===
&lt;pre&gt;
for item in List_2:   # here item is a variable used to access elements in list.
       print(item)
   This code snippet prints 
    Kala
    Mala
&lt;/pre&gt;
[[#TOP]]

==Search for a particular element in list==
Elements in a list can be searched by one of the two ways:
=== using index() function===
&lt;pre&gt;
ages1 = [11,23,12,23,45]

#if element is available in the list, index() returns the index value on which, the element is present.
print(ages1.index(45))#Output: 4

#if element is not available in the list, index() returns ''ValueError''
print(ages1.index(0))#Output: ValueError:
&lt;/pre&gt;

In programming, if such error occurs, program gets terminated. It can be solved using exception handling.
e.g.
&lt;pre&gt;
ages1 = [11,23,12,23,45]

try:
    print(ages1.index(0))
except ValueError:
    print(&quot;Exception has occured&quot;)    
    print(&quot;Element is not found in the list&quot;)

&lt;/pre&gt;
&lt;pre&gt;
'''Output: 
Exception has occured
Element is not found in the list
'''&lt;/pre&gt;
[[#TOP]]

=== using 'in' operator===
''in'' operator is used to check whether a particular element is available in the list or not.e.g.

&lt;pre&gt;
ages1 = [11,23,12,23,45]
no=11

if no in ages1:
    print(&quot;no is there in the list&quot;)
else:    
    print(&quot;no is NOT there in the list&quot;)
&lt;/pre&gt;
&lt;pre&gt;
#Output: no is there in the list
&lt;/pre&gt;


'''Number is not there in the list'''
&lt;pre&gt;
ages1 = [11,23,12,23,45]
no=15

if no in ages1:
    print(&quot;no is there in the list&quot;)
else:    
    print(&quot;no is NOT there in the list&quot;)
&lt;/pre&gt;
&lt;pre&gt;
Output: no is NOT there in the list
&lt;/pre&gt;
[[#TOP]]

==Updating the List==
The lists can be updated using ''append'' or ''insert'' function.  Append adds the element to the end of the list and Insert adds the element in the specified position.
&lt;pre&gt;
   # add the element 'Sheela' to the end of the list.
   List_2.append(&quot;Sheela&quot;)    
   print (List_2) will output 
   ['Kala', 'Mala', 'Sheela']
&lt;/pre&gt;
   &lt;pre&gt;
# add the element &quot;Bala&quot; in the list at the index 1.
   List_2.insert(1,&quot;Bala&quot;)    
   print (List_2) will output 
   ['Kala', 'Bala','Mala', 'Sheela']
&lt;/pre&gt;

=== Extend the list by adding elements of other list at end using extend()===
&lt;pre&gt;
ages = [11,23,12,23,45]
ages.extend([57,58])
print(ages)
&lt;/pre&gt;

&lt;pre&gt;
#Output: [11, 23, 12, 23, 45, 57, 58]
&lt;/pre&gt;

==== Difference between ''append and extend'' ====
Difference between append and extend can be easily understood, by the following example.

&lt;pre&gt;
appendlist = [11,23,12,23,45]
appendlist.append([57,58])

extendlist= [11,23,12,23,45]
extendlist.extend([57,58])
&lt;/pre&gt;

&lt;pre&gt;
'''Output:
[11, 23, 12, 23, 45, [57, 58]]
[11, 23, 12, 23, 45, 57, 58]'''
&lt;/pre&gt;

[[#TOP]]

==Basic Operations on List==
===Frequency of Occurrence===
list.count(object) will return the number of times the object occur in the list.
  '''Example'''
    ages = [11,23,12,23,45,43,22,24,23]
    ages.count(23) will return
    3
    ages.count(100) will return
    0

===Length of the List===
len(list) will return the length of the list ie. the number of objects in the list.
  '''Example'''
&lt;pre&gt;
    ages = [11,23,12,23,45,43,22,24,23]
    len(ages) # Output: 9
&lt;/pre&gt;

To print the objects in the list either use ''for item in list'' or ''for index in range(len(list))''
&lt;pre&gt;
    for item in ages:       
        print (item)  
        (OR)
    for index in range(len(ages)) :
        print (ages[index])
&lt;/pre&gt;

===Sort the List===
list.sort() will sort the list in ascending order
  '''Example'''
    ages = [11,23,12,23,45,43,22,24,23]
    ages.sort() 
    print (ages) 
    [11, 12, 22, 23, 23, 23, 24, 43, 45]

[[#TOP]]

===Sort the List using sorted() function===
sorted(list1) will sort the list and return a new list, it doesn't modify the original list
&lt;br&gt;'''Example: Sort in ascending order'''
&lt;pre&gt;
ages = [11,23,12,23,45,43,22,24,23]
newList=sorted(ages)
print(newList)

#Output: [11, 12, 22, 23, 23, 23, 24, 43, 45]
&lt;/pre&gt;

&lt;br&gt;'''Example: Sort in descending order'''
&lt;pre&gt;
ages = [11,23,12,23,45,43,22,24,23]
newList=sorted(ages,reverse=True)
print(newList)

#Output: [45, 43, 24, 23, 23, 23, 22, 12, 11]
&lt;/pre&gt;

===Reverse the List===
list.reverse() will reverse the original list
  '''Example'''
    ages = [11, 12, 22, 23, 23, 23, 24, 43, 45]
    ages.reverse()
    print (ages)
    [45, 43, 24, 23, 23, 23, 22, 12, 11]

Both sort() and reverse() list operation will work on numeric and alphanumeric data list.

A special use of the reverse() function is to descend a list that is sorted in ascending order.

  '''Example'''
&lt;pre&gt;
ages = [11, 12, 22, 23, 23, 23, 24, 43, 45]
ages.sort()
print(ages)
ages.reverse()
print(ages)
&lt;/pre&gt;

===Slicing===
Used to retrieve an object or objects in a range as a list  
  '''Example'''

Use ''list[index]'' to retrieve the object at the given index
&lt;pre&gt;
In [1]: student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
In [2]: student[3]     #Object at index 3.  Remember index starts at 0
Out[2]: 'Geetha'      
&lt;/pre&gt;

Use ''list[start_index : end_index + 1]'' to retrieve objects from the start_index to end_index 
&lt;pre&gt;
In [3]: student[2:4]     # Objects from index 2 to 3 as List. Note the [ and ]
Out[3]: ['Vijay', 'Geetha']   
&lt;/pre&gt;

Use ''list[:]'' to retrieve objects from the starting of the list to the end of the list. 
The default start value will be the starting index of the list (i.e. 0) and the default end value
will be the length of the list 
&lt;pre&gt;
In [4]: student[:]        # prints the entire list
Out[4]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma', 'Janani']
&lt;/pre&gt;
&lt;pre&gt;
In [5]: student[:5]       # prints the objects from the start of the list upto object at index 4
Out[5]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran']
&lt;/pre&gt;
&lt;pre&gt;
In [6]: student[2:]       # prints the objects from index 2 upto the end of the list
Out[6]: ['Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma', 'Janani']
&lt;/pre&gt;

Negative index too is available in Python. It starts from last element of the list. i.e.
&lt;pre&gt;
In [7]:student[-1]        #prints last index of list
Out[7]: 'Janani'
&lt;/pre&gt;
&lt;pre&gt;
In [8]:student[-1:-8]     #prints empty list
Out[8]: []
&lt;/pre&gt;
&lt;pre&gt;
In [9]:student[-8:-1]     #prints -8th index to -1st index elements
Out[9]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma']
&lt;/pre&gt;

[[#TOP]]

===Removing Item from list ===
----

Is used to remove a specific item from the list.

'''Example:'''
 
Use list.remove(entry/value)  Or   del list[index]    Or list.pop(index)
&lt;pre&gt;
student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
student.remove(&quot;Arun&quot;)   #This will delete item &quot;Arun&quot;
         Or    
del student[0]           # This will delete item at index 0
         Or
student.pop(0)         # This will delete and return item at index 0
print(student)    
Output: &quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
&lt;/pre&gt;

[[#TOP]]

===Delete list ===
----
Used to delete complete list

'''Example'''

Use del &lt;list name&gt;
&lt;pre&gt;
student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
del student&lt;/pre&gt;

===Concatenation of two lists===
----
''+'' is the concatenation operator which is used concatenate two lists. 
&lt;pre&gt;
ages1 = [11,23,12,23,45]
ages2 = [25, 24, 43, 47]
age=ages1+ages2
print(age)
#Output: [11, 23, 12, 23, 45, 25, 24, 43, 47]
&lt;/pre&gt;

===Repeatation of a list ===
----
''*'' is the operator to repeat a particular list.
&lt;pre&gt;
ages1 = [11,23,12,23,45]
age=ages1*5 #ages1 list is repeated 5 times and stroed in ''age'' list
print(age)

#Output: [11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45]
&lt;/pre&gt;

=== all and any for List===
all() and any() are special functions to check whether all elements in iterable is ''True'' or any element is ''True''
&lt;ol&gt;
&lt;li&gt;If all elements in a list are ''True'', '''all()''' will return ''True''&lt;/li&gt;
&lt;li&gt;If iterable is ''empty'', '''all()''' will return ''True''&lt;/li&gt;
&lt;li&gt;If iterable contains at least one ''True'', '''any()''' will return ''True''&lt;/li&gt;
&lt;li&gt;If iterable is ''empty'', '''any()''' will return ''False''&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;
lsit=[True, True, True, True]
print(all(lsit))#Output: True
print(any(lsit))#Output: True

lsit1=[True, False, True, True]
print(all(lsit1))#Output: False
print(any(lsit1))#Output: True

lsit2=[False,False,False]
print(all(lsit2))#Output: False
print(any(lsit2))#Output: False

lsit3=[]
print(all(lsit3))#Output: True
print(any(lsit3))#Output: False
&lt;/pre&gt;

==Conditional Statements==
&lt;pre&gt;Conditionals are used to check the condition and change the flow of the program 
accordingly. They are realized in programming languages through if statement. The 
syntax is as follows :
&lt;pre&gt;
         if condition : 
            statement
&lt;/pre&gt;
    '''Note:''' Do not forget indentation (inserting space/tab) in the line after the
 if condition.
    
    In case you want to execute a set of statements when a condition is true and another

set of statement when the condition is false.
&lt;pre&gt;
         if condition : 
            statement 1
         else :
            statement 2
&lt;/pre&gt;

&lt;pre&gt;    
    Multiple if-else statements can be written as follows:
         if condition_1 : 
            statement 1
         elif condition_2 : # 'elif' is short for 'else if'
            statement 2
         elif condition_3 :
            statement 3
        .
        .
         else :
            final statement
&lt;/pre&gt;

[[#TOP]]

=Loops and Conditionals : Fizzbuzz=
====Loops====
Loops are used to execute a set of repetitive statements. They are realised
through 'while' and 'for' loops in programming languages. The syntax of 'for' loop is 
as follows :
&lt;pre&gt;
for LOOPVARIABLE in SEQUENCE: 
            STATEMENTS&lt;/pre&gt;

    '''e.g.''' to print all the data from a list we can write:
&lt;pre&gt;
for item in list_name:
      print(item)&lt;/pre&gt;
    OR
&lt;pre&gt;
for index in range(len(list_name)):
      print(list_name[index])
 &lt;/pre&gt;   
    The syntax for while loop is as follows :
&lt;pre&gt;    
while BOOLEANEXPRESSION: 
     STATEMENTS
     INCREMENT/DECREMENT
&lt;/pre&gt;    
    '''e.g.''' if we want to print all numbers from 1 to 10
&lt;pre&gt;
i=1
while i&lt;=10 :
    print(i,&quot; &quot;)
    i=i+1
    &lt;/pre&gt;
 
'while' loop has indefinite iteration (run-time unknown). So, there must be loop,  break statement in it.
 Whereas 'for' loop is definite in nature (i.e. known or predictable span).&lt;br&gt;

&lt;b&gt;NOTE: Python doesn't have anything like do-while loop.&lt;/b&gt;

[[#TOP]]

==Implementation==
Here, we try to demonstrate the concept of loops and conditionals through a game called Fizzbuzz. The rules are as follows :&lt;br/&gt;
[[File:fizzBuzz.gif]]

• if input number is a multiple of ’3’ print ”Fizz”
&lt;br/&gt;
• if input number is a multiple of ’5’ print ”Buzz”
&lt;br/&gt;
• if input number is a multiple of both '3' and ’5’ print ”FizzBuzz”
&lt;br/&gt;
The pseudo code is as follows :
&lt;pre&gt;
   If input no % 3 == 0 and  input no % 5 == 0 : 
       print ”Fizzbuzz”
   else if input no % 3 == 0 : 
       print ”Fizz”
   else if input no % 5 == 0 : 
       print ”Buzz”
   else :
       print the input no
&lt;/pre&gt;
The order of statements execution matters to get the desired output. The highest priority condition should be first followed by other. In fizzbuzz programming, first checking should be done for both divisibility of 3 and 5. If condition not satisfied only then it should check individually for 3 or 5. So carefully choosing the order is crucial for better programming.
Note: There is some effect of present condition statements chosen on next conditions statements. That is why in first attempt fizzbuzz programming got struck.

Example: 
&lt;pre&gt;
#Code to achieve the above requirement in python3.
i = int(input(&quot;Enter the number&quot;)) 
if i%3 == 0 and i%5 == 0: print(i,&quot;FizzBuzz&quot;)  
elif i%5 == 0: print(i,&quot;Buzz&quot;)
elif i%3 == 0: print(i,&quot;Fizz&quot;)
else: print(i)
&lt;/pre&gt;
Lets put the same into a loop for a range given by the user.
&lt;pre&gt;
def fizzbuzzgame(start,stop):
    for i in range(start,stop+1):
        if i%3 == 0 and i%5 == 0:
            print(i,&quot;FizzBuzz&quot;)
        elif i%5 == 0:
            print(i,&quot;Buzz&quot;)
        elif i%3 == 0:
            print(i,&quot;Fizz&quot;)
        else: print(i)

fizzbuzzgame(50,100)
&lt;/pre&gt;


=== Fizz Buzz game in Interactive mode with Score ===
'''By Ms. Ami Tusharkant Choksi'''
&lt;pre&gt;
def fizzbuzzgame(i):
        if i%3 == 0 and i%5 == 0:
            print(i,&quot;FizzBuzz&quot;)
            return(&quot;fzbz&quot;)
        elif i%5 == 0:
            print(i,&quot;Buzz&quot;)
            return(&quot;bz&quot;)
        elif i%3 == 0:
            print(i,&quot;Fizz&quot;)
            return(&quot;fz&quot;)
        else:
            print(i)
            return(&quot;no&quot;)

ch = 'y'
fizzbuzz=0
fizz=0
buzz=0
nothing=0
print(&quot;&quot;&quot;
 _____  ____  _____  _____  ____   __ __  _____  _____       ____   ____  ___ ___    ___ 
|     ||    ||     ||     ||    \ |  |  ||     ||     |     /    | /    ||   |   |  /  _]
|   __| |  | |__/  ||__/  ||  o  )|  |  ||__/  ||__/  |    |   __||  o  || _   _ | /  [_ 
|  |_   |  | |   __||   __||     ||  |  ||   __||   __|    |  |  ||     ||  \_/  ||    _]
|   _]  |  | |  /  ||  /  ||  O  ||  :  ||  /  ||  /  |    |  |_ ||  _  ||   |   ||   [_ 
|  |    |  | |     ||     ||     ||     ||     ||     |    |     ||  |  ||   |   ||     |
|__|   |____||_____||_____||_____| \__,_||_____||_____|    |___,_||__|__||___|___||_____|
                                                                                         
&quot;&quot;&quot;)   

while(ch == 'y'):
    n=int(input(&quot;Enter a Number : &quot;))
    winLoose=fizzbuzzgame(n)
    if(winLoose == &quot;fz&quot;):
        fizz+=1
    elif(winLoose == &quot;bz&quot;):
        buzz+=1
    elif(winLoose == &quot;fzbz&quot;):
        fizzbuzz+=1
    ch=input(&quot;Do you want to continue playing the game : (y/n)&quot;)
    if(ch=='n'):
        print('Congratulations, your score is\n FizzBuzz:%d\nFizz:%d\nBuzz:%d' %
(fizzbuzz,fizz,buzz))
    
'''Sample Output:

 _____  ____  _____  _____  ____   __ __  _____  _____       ____   ____  ___ ___    ___ 
|     ||    ||     ||     ||    \ |  |  ||     ||     |     /    | /    ||   |   |  /  _]
|   __| |  | |__/  ||__/  ||  o  )|  |  ||__/  ||__/  |    |   __||  o  || _   _ | /  [_ 
|  |_   |  | |   __||   __||     ||  |  ||   __||   __|    |  |  ||     ||  \_/  ||    _]
|   _]  |  | |  /  ||  /  ||  O  ||  :  ||  /  ||  /  |    |  |_ ||  _  ||   |   ||   [_ 
|  |    |  | |     ||     ||     ||     ||     ||     |    |     ||  |  ||   |   ||     |
|__|   |____||_____||_____||_____| \__,_||_____||_____|    |___,_||__|__||___|___||_____|
                                                                                         

Enter a Number : 666
666 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 777
777 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 555
555 FizzBuzz
Do you want to continue playing the game : (y/n)y
Enter a Number : 1
1
Do you want to continue playing the game : (y/n)y
Enter a Number : 789
789 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 25
25 Buzz
Do you want to continue playing the game : (y/n)n
Congratulations, your score is

FizzBuzz:1
Fizz:3
Buzz:1

&lt;/pre&gt;

=Crowd Computing: Just Estimate=
==Wisdom of Crowds==
The concept of ’Wisdom of Crowds’ was proposed by Francis Galton. A weight-judging competition was carried on at the annual show of the West of England Fat Stock and Poultry Exhibition recently held at Plymouth, A fat ox having been selected, competitors bought stamped and numbered cards, each, on which to inscribe their respective names, addresses, and estimates of what the ox would weigh after it had been slaughtered. Those who guessed most successfully received prizes. About 8oo tickets were issued to the par- ticipants. The middlemost estimate of all the estimates recorded was 1207 lbs and the actual weight of the ox was 1198 lbs.

==Our Experiment==
The crowd had to guess the number of candies/gems in a jar. Around 75 people participated in the experiment. The actual number of gems in the jar were 375. The median of all estimates came out to be 300 and the mean of all the estimates came out to be around 396. Median underestimated and mean overestimated the actual value. So according to recent studies, Trimmed mean must be used as an aggregate measure to estimate where Wisdom of Crowds is involved.
[[File:Gemsjar.jpg|center|200px|caption]]

===Trimmed Mean===
In these kinds of experiments, 10% trimmed mean is usually followed. For calculating 10% trimmed mean, remove 10% smallest and 10% largest values from the sample. Calculate the mean of the sample obtained. In the above experiment, the trimmed mean came out to be around 351 which is very close to the actual value.

==Implementation==
Here, we try to demonstrate the concept of trimmed mean through crowd computing.
 Input a list of estimates done by the crowd .
 Sort the list.
 Remove the 10% smallest values.
 Remove the 10% largest values.
 Calculate the mean of the new list obtained .&lt;hr&gt;

==Data of Experiment==       
    Estimates =[1000,1010,1786,2000,1500,1500,100,120,150,150,150,170,175,180,197,200,200,200,200,200,200,220,220,220,220,234,250,250,250,250,250,250,250,250,250,263,270,275,275,286,300,
                300,300,300,300,300,300,300,320,350,350,350,400, 400,400,400,400,450,467,500,500,500,500,500,500,500,550,550,600,600,600,650,700,700,720]

    '''CODE:'''
&lt;pre&gt;
Estimates = [1000,1010,1786,2000,1500,1500,100,120,150,150,150,170,175,180,197,200,200,200,200,200,200,220,220,220,220,234,250,250,250,250,250,250,250,250,250,263,270,275,275,286,300,                300,300,300,300,300,300,300,320,350,350,350,400,400,400,400,400,450,467,500,500,500,500,500,500,500,550,550,600,600,600,650,700,700,720]
Estimates.sort()
offset = int(0.10*len(Estimates))
for i in range(offset):
       del Estimates[0]
       del Estimates[-1]
Sum = 0    
for i in range(len(Estimates)):
       Sum += Estimates[i]
Mean_Value = Sum/len(Estimates)
print(&quot;Mean : &quot;, int(Mean_Value))
#Output:
Mean :  351
&lt;/pre&gt;
&lt;hr&gt;
==Trimmed Mean for the above example== 
&lt;h3&gt;Using scipy library&lt;/h3&gt;
&lt;pre&gt;
#import scipy to use the method of trim_mean
from scipy import stats
trimMean = stats.trim_mean(Estimates, 0.1) # Trim 10% at both ends
print(&quot;Trimmed Mean : &quot;,trimMean)
#Output:
Trimmed Mean :  335.1020408163265
&lt;/pre&gt;

&lt;h3&gt;Without using scipy library&lt;/h3&gt;
&lt;pre&gt;
#Trimmed mean with 10%
p=10/100
#sorted data
data=[2, 4, 6, 7, 11, 21, 81, 90, 105, 121]
n = len(data)
#Remove elements from both end
rem=int(n*p)
newData = data[rem:-rem]
mean = 0
for i in newData:
    mean += i
mean = int(mean/len(newData))
print(&quot;Trimmed mean : &quot;,mean)
#Output: Trimmed mean :  40
&lt;/pre&gt;
[[#Top]]

=Jumbled_Words Permutations: Jumbled Words=
==What are Permutations ?==
A permutation also called ordering of selected number of elements from a list denoted by nPr here we are choosing all elements of a list and so n=r&lt;br&gt;
nPr=n!/(n-r)!&lt;br&gt; as n=r
nPn=n!&lt;br&gt; which gives all possible arrangement of elements present in a list.

 For example, permutations of list [1,2,3] are [1,2,3], [1,3,2], [2,1,3], [2,3,1], 
[3,1,2], and [3,2,1]. 
The number of permutations of a list of elements nPn is given by n!. For example, there are 2! = 2 x 1 = 2 permutations of [1,2], namely [1,2] and [2,1], and 3! = 3 x 2 x 1 = 6 permutations of [1,2,3], as mentioned above.&lt;br/&gt;
[[File:Permutations.jpg]]

==Implementation==
Here, we try to demonstrate the concept of permutations through jumbled words. It is a two player game in which one person presents the other person a different permutation of the word in his mind. The other person has to guess the right word. If he guesses, the he wins otherwise he loses.
 Input an list of words.
 Randomly pick a word from the list of words .
 Shuffle this word and present it to the other player.
 if word guesses by the player is same as the one picked from list of w
     player wins
 else
     player loses

ALTERNATE CODE TO GENERATE THIS GAME:
&lt;pre&gt;
import random
p1=input(&quot;enter player 1 name:&quot;)
p2=input(&quot;enter player 2 name:&quot;)
l=[&quot;rainbow&quot;,&quot;computer&quot;,&quot;robot&quot;,&quot;butter&quot;,&quot;vegetable&quot;,&quot;science&quot;,&quot;correct&quot;]
c1=c2=a1=a2=f1=f2=0
k=1
i=3
def play():
    n=random.choice(l)        ##n=chooses a word from list l
    l1=[]
    for j in n:
       l1.append(j)      ##creates a list for word in n
    for t in range(len(l1)):
       p=random.choice(l1)     ##this randomly displays letters in the list
       print(p)
       l1.remove(p)          ##to avoid the repetition of a letter
    s=input(&quot;enter the word:&quot;)
    if(s==n):
        print(&quot;correct&quot;)
        return 1
    else:
        print(&quot;not correct&quot;)
        print(&quot;answer is&quot;,n)
        return 0
def stat():
     print(&quot;player 1:&quot;)
     print(&quot;score:&quot;,c1)
     print(&quot;answered:&quot;,a1)
     print(&quot;failed:&quot;,f1)
     print(&quot;.............&quot;)
     print(&quot;player 2:&quot;)
     print(&quot;score:&quot;,c2)
     print(&quot;answered:&quot;,a2)
     print(&quot;failed&quot;,f2)
     if(c1&gt;c2):
         print(p1,&quot; won over &quot;,p2)
     elif(c1==c2):
         print(&quot;draw game&quot;)
     else:
         print(p2,&quot; won over &quot;,p1) 
while(i!=4):
      if(i==3):
         if(k==1):
             print(&quot;player 1 turn&quot;)
             print(&quot;your jumbled word is:&quot;)
             k=k+1
             m=play()
             if(m==1):      ##if guessed answer is correct,then score and no.of answered count will be increased
                c1+=1
                a1+=1
             else:
                f1+=1       ##else count of no.of failed to answered will be incremented
         else:
             print(&quot;player 2 turn&quot;)
             print(&quot;your jumbled word is:&quot;)
             k=k-1
             m=play()
             if(m==1):
                c2=c2+1
                a2=a2+1
             else:
                f2=f2+1
       if(i==2):
             print(&quot;present status&quot;)
             stat()
       i=int(input(&quot;enter your choice  1.stop 2.status 3.continue&quot;))
       if(i==1):
             stat()
             i=i+3
&lt;/pre&gt;
&lt;hr&gt;
=== JumbledWord Simple Logic, In Short ===
[[File:jumbledWord.gif]]
&lt;hr&gt;
'''Logic to create a Jumbled Word'''
&lt;hr&gt;
&lt;pre&gt;
#Get Jumbled Word and print it Horizontally
import random

def getJumbledWord(b):
    jumble=''
    l1 = [ b[i] for i in range(0, len(b)) ]
    for t in range(len(l1)):
       p=random.choice(l1)     ##this randomly gets letters from the list      
       jumble=jumble+p       
       l1.remove(p)
    return jumble

b=input(&quot;Enter a word to make it jumbled : &quot;)
print(&quot;Jumbled Word : &quot;, getJumbledWord(b))
&lt;/pre&gt;
&lt;hr&gt;
'''Another Logic to create a Jumbled Word'''
&lt;hr&gt;
&lt;pre&gt;
b=input(&quot;Enter a word to make it jumbled : &quot;)

def getJumbledWord1(b):
    l1 = [ b[i] for i in range(0, len(b)) ]
    random.shuffle(l1)
    str1 = ''.join(l1)
    return str1

print(&quot;Jumbled Word : &quot;, getJumbledWord1(b))
&lt;/pre&gt;

====Sample Output:====
&lt;pre&gt;
---- Output1 
Enter a word to make it jumbled : butter
Jumbled Word :  tbture

---- Output2 
Enter a word to make it jumbled : petriotism
Jumbled Word :  pittrosime
&lt;/pre&gt;

=Theory of Evolution=

== What is Evolution ? ==
Evolution is the change in heritable characteristics over successive generations. The theory of evolution explains that DNA, which acts as a carrier of genetic information from one generation to other, tends to change or mutate occasionally. These changes are reflected in next generations to come. This is how life has evolved on earth from bacteria to human beings.&lt;br&gt;
[[File:Evolution.png|500px]]

== Implementation ==
&lt;pre&gt;An array representing DNA is stored in a file. As genes are forms of DNA, they contain information to be transferred to forthcoming generations. Assume that information is in the form of bits (in the form of 0s and 1s). A number is picked randomly from 1 to the size of the array. A new parameter has been introduced which decides whether mutation would occur or not. If the value of this new parameter is 1 (It is picked randomly from 1 to 100), then only change is reflected down the generations, otherwise it is not. The pseudo code is as follows :
Input an array containing genetic information .
Randomly generate a number (say m) from 1 to length of the array. Randomly generate other number (say p) from 1 to 100.
 
    if p is equal to 1 then 
        if m is 1 then
          set it to 0
        else
          set it to 1
&lt;/pre&gt;
[[#TOP]]</text>
      <sha1>kc19qi12vkk2ee672immbfo33g7m679</sha1>
    </revision>
    <revision>
      <id>3577</id>
      <parentid>3573</parentid>
      <timestamp>2018-09-28T03:04:04Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* Fizz Buzz game in Interactive mode with Score */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="28869">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_3 Contributors of this page]
*Week 3 Playlist: https://www.youtube.com/playlist?list=PLc_j0TNIaWxOVx_z9jAM2UB3RqYNXaoEo
=List=
List is a flexible data structure used for storing a group of data separated by comma. The elements in a list need not be of the same data type.

'''Example:'''
       List_1 = [ 1, 2,3] or 
       List_1 = [&quot;coffee&quot;, &quot;Tea&quot;, &quot;Milk&quot;] or
       List_1 = [1,&quot;coffee&quot;, &quot;Tea&quot;, 3, &quot;5&quot;]

==List Creation==
&lt;pre&gt;a) A list can be created by simply putting values (separated by comma) between square brackets as given below,
       List_1 = [1,&quot;coffee&quot;, &quot;Tea&quot;, 3, &quot;5&quot;] #this creates a list by name List_1 containing following items


Or,
(b)A List can be created from scratch and elements can be added 
        List_2 = [ ]
        List_2.append(&quot;Kala&quot;)
        List_2.append(&quot;Mala&quot;)
Here we use &quot;append&quot; ,which is a function in python that enable us to append or attach an element to a list .
Thus List_2 will now hold [&quot;Kala&quot;,&quot;Mala&quot;]
&lt;/pre&gt;
[[#TOP]]

==Operations and Methods to work with List==
&lt;pre&gt;
a = [25,30,50,90,12,13]
b = [100,300,500,200,250]
&lt;/pre&gt;
&lt;hr&gt;
&lt;table border=2&gt;
  &lt;tr&gt;
    &lt;th&gt;&lt;b&gt;Method/&lt;br&gt;Operator&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Function&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Syntax&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Output&lt;/b&gt;&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;len()&lt;/td&gt;
    &lt;td&gt;Find length of a list&lt;/td&gt;
    &lt;td&gt;len(a)&lt;/td&gt;
    &lt;td&gt;6&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;max()&lt;/td&gt;
    &lt;td&gt;Find maximum element from the list&lt;/td&gt;
    &lt;td&gt;max(a)&lt;/td&gt;
    &lt;td&gt;90&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;min()&lt;/td&gt;
    &lt;td&gt;Find minimum element from the list&lt;/td&gt;
    &lt;td&gt;min(a)&lt;/td&gt;
    &lt;td&gt;12&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sum()&lt;/td&gt;
    &lt;td&gt;Returns sum of all elements of the list&lt;/td&gt;
    &lt;td&gt;sum(a)&lt;/td&gt;
    &lt;td&gt;220&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;reverse()&lt;/td&gt;
    &lt;td&gt;Reverses the original list&lt;/td&gt;
    &lt;td&gt;a.reverse()&lt;/td&gt;
    &lt;td&gt;[13, 12, 90, 50, 30, 25]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sort()&lt;/td&gt;
    &lt;td&gt;Sorts the original list in ascending order&lt;/td&gt;
    &lt;td&gt;a.sort()&lt;/td&gt;
    &lt;td&gt;[12, 13, 25, 30, 50, 90]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sorted()&lt;/td&gt;
    &lt;td&gt;Returns the new sorted list &lt;/td&gt;
    &lt;td&gt;sorted(a)&lt;/td&gt;
    &lt;td&gt;[12, 13, 25, 30, 50, 90]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;insert()&lt;/td&gt;
    &lt;td&gt;Insert at a particular index in the list, and shifts remaining elements&lt;/td&gt;
    &lt;td&gt;a.insert(3,3)&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 3, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;append()&lt;/td&gt;
    &lt;td&gt;Adds elements/object to the end of the list&lt;/td&gt;
    &lt;td&gt;a.append(5)&lt;br&gt;a.append([10,20])&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 5]&lt;br&gt;[25, 30, 50, 90, 12, 13, [10, 20]]&lt;br&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;extend()&lt;/td&gt;
    &lt;td&gt;Adds object to the end of the list as elements not as object&lt;/td&gt;
    &lt;td&gt;a.extend([10,20])&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 10, 20]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;*&amp;nbsp;&amp;nbsp;Repeatation&lt;br&gt;operator&lt;/td&gt;
    &lt;td&gt;Repeat the list for n times and returns a new list&lt;/td&gt;
    &lt;td&gt;a*2&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 25, 30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;+ Concatenation&lt;br&gt;operator&lt;/td&gt;
    &lt;td&gt;Concatenates two lists, and returns a new list&lt;/td&gt;
    &lt;td&gt;a+b&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 100, 300, 500, 200, 250]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;index()&lt;/td&gt;
    &lt;td&gt;Finds index of a particular element in the list or not&lt;/td&gt;
    &lt;td&gt;a.index(25)&lt;br&gt;a.index(0)&lt;br&gt;&lt;/td&gt;
    &lt;td&gt;0&lt;br&gt;&lt;br&gt;ValueError: 0 is not in list&lt;br&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;in operator&lt;/td&gt;
    &lt;td&gt;Finds whether a particular element is in the list or not, returns boolean&lt;/td&gt;
    &lt;td&gt;25 in a&lt;/td&gt;
    &lt;td&gt;True&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;not in operator&lt;/td&gt;
    &lt;td&gt;Checks if element is not available in list, returns boolean&lt;/td&gt;
    &lt;td&gt;25 not in a&lt;/td&gt;
    &lt;td&gt;False&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;count()&lt;/td&gt;
    &lt;td&gt;Counts the number of occurence of an element in the list&lt;/td&gt;
    &lt;td&gt;a.count(25)&lt;/td&gt;
    &lt;td&gt;1&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;remove()&lt;/td&gt;
    &lt;td&gt;Removes an element from the list&lt;/td&gt;
    &lt;td&gt;a.remove(25)&lt;/td&gt;
    &lt;td&gt; [30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;pop()&lt;/td&gt;
    &lt;td&gt;Delete and return item at index 0&lt;/td&gt;
    &lt;td&gt;a.pop(0)&lt;/td&gt;
    &lt;td&gt;25 , a will be [30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;del&lt;/td&gt;
    &lt;td&gt;Deletes item at a particular index from the list&lt;/td&gt;
    &lt;td&gt;del a[0]&lt;/td&gt;
    &lt;td&gt;[30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;all()&lt;/td&gt;
&lt;td&gt;Returns True, if all items in list are True or it is an empty list&lt;/td&gt;
&lt;td&gt;all([True, True, True])
all([])
&lt;/td&gt;
&lt;td&gt;True&lt;br&gt;
True&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;any()&lt;/td&gt;
&lt;td&gt;Returns True, if any item in list is True else return False&lt;/td&gt;
&lt;td&gt;any([True, True, True])&lt;br&gt;
any([True, False, True])&lt;br&gt;
any([])&lt;/td&gt;
&lt;td&gt;True&lt;br&gt;False&lt;br&gt;False&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;

==Printing the List==
=== Print whole list ===
A list can be printed simply or using a ''for / while'' loop 

 print(List_2)     # To print the entire list
This code will print      
 ['Kala','Mala']     

===Print element at a particular index===
&lt;pre&gt;
Using index position
    List_2[0]     # prints 'Kala' ,i.e,the value at index position 0.
    List_2[1]     # prints 'Mala'.
&lt;/pre&gt;
=== Without using index position ===
&lt;pre&gt;
for item in List_2:   # here item is a variable used to access elements in list.
       print(item)
   This code snippet prints 
    Kala
    Mala
&lt;/pre&gt;
[[#TOP]]

==Search for a particular element in list==
Elements in a list can be searched by one of the two ways:
=== using index() function===
&lt;pre&gt;
ages1 = [11,23,12,23,45]

#if element is available in the list, index() returns the index value on which, the element is present.
print(ages1.index(45))#Output: 4

#if element is not available in the list, index() returns ''ValueError''
print(ages1.index(0))#Output: ValueError:
&lt;/pre&gt;

In programming, if such error occurs, program gets terminated. It can be solved using exception handling.
e.g.
&lt;pre&gt;
ages1 = [11,23,12,23,45]

try:
    print(ages1.index(0))
except ValueError:
    print(&quot;Exception has occured&quot;)    
    print(&quot;Element is not found in the list&quot;)

&lt;/pre&gt;
&lt;pre&gt;
'''Output: 
Exception has occured
Element is not found in the list
'''&lt;/pre&gt;
[[#TOP]]

=== using 'in' operator===
''in'' operator is used to check whether a particular element is available in the list or not.e.g.

&lt;pre&gt;
ages1 = [11,23,12,23,45]
no=11

if no in ages1:
    print(&quot;no is there in the list&quot;)
else:    
    print(&quot;no is NOT there in the list&quot;)
&lt;/pre&gt;
&lt;pre&gt;
#Output: no is there in the list
&lt;/pre&gt;


'''Number is not there in the list'''
&lt;pre&gt;
ages1 = [11,23,12,23,45]
no=15

if no in ages1:
    print(&quot;no is there in the list&quot;)
else:    
    print(&quot;no is NOT there in the list&quot;)
&lt;/pre&gt;
&lt;pre&gt;
Output: no is NOT there in the list
&lt;/pre&gt;
[[#TOP]]

==Updating the List==
The lists can be updated using ''append'' or ''insert'' function.  Append adds the element to the end of the list and Insert adds the element in the specified position.
&lt;pre&gt;
   # add the element 'Sheela' to the end of the list.
   List_2.append(&quot;Sheela&quot;)    
   print (List_2) will output 
   ['Kala', 'Mala', 'Sheela']
&lt;/pre&gt;
   &lt;pre&gt;
# add the element &quot;Bala&quot; in the list at the index 1.
   List_2.insert(1,&quot;Bala&quot;)    
   print (List_2) will output 
   ['Kala', 'Bala','Mala', 'Sheela']
&lt;/pre&gt;

=== Extend the list by adding elements of other list at end using extend()===
&lt;pre&gt;
ages = [11,23,12,23,45]
ages.extend([57,58])
print(ages)
&lt;/pre&gt;

&lt;pre&gt;
#Output: [11, 23, 12, 23, 45, 57, 58]
&lt;/pre&gt;

==== Difference between ''append and extend'' ====
Difference between append and extend can be easily understood, by the following example.

&lt;pre&gt;
appendlist = [11,23,12,23,45]
appendlist.append([57,58])

extendlist= [11,23,12,23,45]
extendlist.extend([57,58])
&lt;/pre&gt;

&lt;pre&gt;
'''Output:
[11, 23, 12, 23, 45, [57, 58]]
[11, 23, 12, 23, 45, 57, 58]'''
&lt;/pre&gt;

[[#TOP]]

==Basic Operations on List==
===Frequency of Occurrence===
list.count(object) will return the number of times the object occur in the list.
  '''Example'''
    ages = [11,23,12,23,45,43,22,24,23]
    ages.count(23) will return
    3
    ages.count(100) will return
    0

===Length of the List===
len(list) will return the length of the list ie. the number of objects in the list.
  '''Example'''
&lt;pre&gt;
    ages = [11,23,12,23,45,43,22,24,23]
    len(ages) # Output: 9
&lt;/pre&gt;

To print the objects in the list either use ''for item in list'' or ''for index in range(len(list))''
&lt;pre&gt;
    for item in ages:       
        print (item)  
        (OR)
    for index in range(len(ages)) :
        print (ages[index])
&lt;/pre&gt;

===Sort the List===
list.sort() will sort the list in ascending order
  '''Example'''
    ages = [11,23,12,23,45,43,22,24,23]
    ages.sort() 
    print (ages) 
    [11, 12, 22, 23, 23, 23, 24, 43, 45]

[[#TOP]]

===Sort the List using sorted() function===
sorted(list1) will sort the list and return a new list, it doesn't modify the original list
&lt;br&gt;'''Example: Sort in ascending order'''
&lt;pre&gt;
ages = [11,23,12,23,45,43,22,24,23]
newList=sorted(ages)
print(newList)

#Output: [11, 12, 22, 23, 23, 23, 24, 43, 45]
&lt;/pre&gt;

&lt;br&gt;'''Example: Sort in descending order'''
&lt;pre&gt;
ages = [11,23,12,23,45,43,22,24,23]
newList=sorted(ages,reverse=True)
print(newList)

#Output: [45, 43, 24, 23, 23, 23, 22, 12, 11]
&lt;/pre&gt;

===Reverse the List===
list.reverse() will reverse the original list
  '''Example'''
    ages = [11, 12, 22, 23, 23, 23, 24, 43, 45]
    ages.reverse()
    print (ages)
    [45, 43, 24, 23, 23, 23, 22, 12, 11]

Both sort() and reverse() list operation will work on numeric and alphanumeric data list.

A special use of the reverse() function is to descend a list that is sorted in ascending order.

  '''Example'''
&lt;pre&gt;
ages = [11, 12, 22, 23, 23, 23, 24, 43, 45]
ages.sort()
print(ages)
ages.reverse()
print(ages)
&lt;/pre&gt;

===Slicing===
Used to retrieve an object or objects in a range as a list  
  '''Example'''

Use ''list[index]'' to retrieve the object at the given index
&lt;pre&gt;
In [1]: student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
In [2]: student[3]     #Object at index 3.  Remember index starts at 0
Out[2]: 'Geetha'      
&lt;/pre&gt;

Use ''list[start_index : end_index + 1]'' to retrieve objects from the start_index to end_index 
&lt;pre&gt;
In [3]: student[2:4]     # Objects from index 2 to 3 as List. Note the [ and ]
Out[3]: ['Vijay', 'Geetha']   
&lt;/pre&gt;

Use ''list[:]'' to retrieve objects from the starting of the list to the end of the list. 
The default start value will be the starting index of the list (i.e. 0) and the default end value
will be the length of the list 
&lt;pre&gt;
In [4]: student[:]        # prints the entire list
Out[4]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma', 'Janani']
&lt;/pre&gt;
&lt;pre&gt;
In [5]: student[:5]       # prints the objects from the start of the list upto object at index 4
Out[5]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran']
&lt;/pre&gt;
&lt;pre&gt;
In [6]: student[2:]       # prints the objects from index 2 upto the end of the list
Out[6]: ['Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma', 'Janani']
&lt;/pre&gt;

Negative index too is available in Python. It starts from last element of the list. i.e.
&lt;pre&gt;
In [7]:student[-1]        #prints last index of list
Out[7]: 'Janani'
&lt;/pre&gt;
&lt;pre&gt;
In [8]:student[-1:-8]     #prints empty list
Out[8]: []
&lt;/pre&gt;
&lt;pre&gt;
In [9]:student[-8:-1]     #prints -8th index to -1st index elements
Out[9]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma']
&lt;/pre&gt;

[[#TOP]]

===Removing Item from list ===
----

Is used to remove a specific item from the list.

'''Example:'''
 
Use list.remove(entry/value)  Or   del list[index]    Or list.pop(index)
&lt;pre&gt;
student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
student.remove(&quot;Arun&quot;)   #This will delete item &quot;Arun&quot;
         Or    
del student[0]           # This will delete item at index 0
         Or
student.pop(0)         # This will delete and return item at index 0
print(student)    
Output: &quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
&lt;/pre&gt;

[[#TOP]]

===Delete list ===
----
Used to delete complete list

'''Example'''

Use del &lt;list name&gt;
&lt;pre&gt;
student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
del student&lt;/pre&gt;

===Concatenation of two lists===
----
''+'' is the concatenation operator which is used concatenate two lists. 
&lt;pre&gt;
ages1 = [11,23,12,23,45]
ages2 = [25, 24, 43, 47]
age=ages1+ages2
print(age)
#Output: [11, 23, 12, 23, 45, 25, 24, 43, 47]
&lt;/pre&gt;

===Repeatation of a list ===
----
''*'' is the operator to repeat a particular list.
&lt;pre&gt;
ages1 = [11,23,12,23,45]
age=ages1*5 #ages1 list is repeated 5 times and stroed in ''age'' list
print(age)

#Output: [11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45]
&lt;/pre&gt;

=== all and any for List===
all() and any() are special functions to check whether all elements in iterable is ''True'' or any element is ''True''
&lt;ol&gt;
&lt;li&gt;If all elements in a list are ''True'', '''all()''' will return ''True''&lt;/li&gt;
&lt;li&gt;If iterable is ''empty'', '''all()''' will return ''True''&lt;/li&gt;
&lt;li&gt;If iterable contains at least one ''True'', '''any()''' will return ''True''&lt;/li&gt;
&lt;li&gt;If iterable is ''empty'', '''any()''' will return ''False''&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;
lsit=[True, True, True, True]
print(all(lsit))#Output: True
print(any(lsit))#Output: True

lsit1=[True, False, True, True]
print(all(lsit1))#Output: False
print(any(lsit1))#Output: True

lsit2=[False,False,False]
print(all(lsit2))#Output: False
print(any(lsit2))#Output: False

lsit3=[]
print(all(lsit3))#Output: True
print(any(lsit3))#Output: False
&lt;/pre&gt;

==Conditional Statements==
&lt;pre&gt;Conditionals are used to check the condition and change the flow of the program 
accordingly. They are realized in programming languages through if statement. The 
syntax is as follows :
&lt;pre&gt;
         if condition : 
            statement
&lt;/pre&gt;
    '''Note:''' Do not forget indentation (inserting space/tab) in the line after the
 if condition.
    
    In case you want to execute a set of statements when a condition is true and another

set of statement when the condition is false.
&lt;pre&gt;
         if condition : 
            statement 1
         else :
            statement 2
&lt;/pre&gt;

&lt;pre&gt;    
    Multiple if-else statements can be written as follows:
         if condition_1 : 
            statement 1
         elif condition_2 : # 'elif' is short for 'else if'
            statement 2
         elif condition_3 :
            statement 3
        .
        .
         else :
            final statement
&lt;/pre&gt;

[[#TOP]]

=Loops and Conditionals : Fizzbuzz=
====Loops====
Loops are used to execute a set of repetitive statements. They are realised
through 'while' and 'for' loops in programming languages. The syntax of 'for' loop is 
as follows :
&lt;pre&gt;
for LOOPVARIABLE in SEQUENCE: 
            STATEMENTS&lt;/pre&gt;

    '''e.g.''' to print all the data from a list we can write:
&lt;pre&gt;
for item in list_name:
      print(item)&lt;/pre&gt;
    OR
&lt;pre&gt;
for index in range(len(list_name)):
      print(list_name[index])
 &lt;/pre&gt;   
    The syntax for while loop is as follows :
&lt;pre&gt;    
while BOOLEANEXPRESSION: 
     STATEMENTS
     INCREMENT/DECREMENT
&lt;/pre&gt;    
    '''e.g.''' if we want to print all numbers from 1 to 10
&lt;pre&gt;
i=1
while i&lt;=10 :
    print(i,&quot; &quot;)
    i=i+1
    &lt;/pre&gt;
 
'while' loop has indefinite iteration (run-time unknown). So, there must be loop,  break statement in it.
 Whereas 'for' loop is definite in nature (i.e. known or predictable span).&lt;br&gt;

&lt;b&gt;NOTE: Python doesn't have anything like do-while loop.&lt;/b&gt;

[[#TOP]]

==Implementation==
Here, we try to demonstrate the concept of loops and conditionals through a game called Fizzbuzz. The rules are as follows :&lt;br/&gt;
[[File:fizzBuzz.gif]]

• if input number is a multiple of ’3’ print ”Fizz”
&lt;br/&gt;
• if input number is a multiple of ’5’ print ”Buzz”
&lt;br/&gt;
• if input number is a multiple of both '3' and ’5’ print ”FizzBuzz”
&lt;br/&gt;
The pseudo code is as follows :
&lt;pre&gt;
   If input no % 3 == 0 and  input no % 5 == 0 : 
       print ”Fizzbuzz”
   else if input no % 3 == 0 : 
       print ”Fizz”
   else if input no % 5 == 0 : 
       print ”Buzz”
   else :
       print the input no
&lt;/pre&gt;
The order of statements execution matters to get the desired output. The highest priority condition should be first followed by other. In fizzbuzz programming, first checking should be done for both divisibility of 3 and 5. If condition not satisfied only then it should check individually for 3 or 5. So carefully choosing the order is crucial for better programming.
Note: There is some effect of present condition statements chosen on next conditions statements. That is why in first attempt fizzbuzz programming got struck.

Example: 
&lt;pre&gt;
#Code to achieve the above requirement in python3.
i = int(input(&quot;Enter the number&quot;)) 
if i%3 == 0 and i%5 == 0: print(i,&quot;FizzBuzz&quot;)  
elif i%5 == 0: print(i,&quot;Buzz&quot;)
elif i%3 == 0: print(i,&quot;Fizz&quot;)
else: print(i)
&lt;/pre&gt;
Lets put the same into a loop for a range given by the user.
&lt;pre&gt;
def fizzbuzzgame(start,stop):
    for i in range(start,stop+1):
        if i%3 == 0 and i%5 == 0:
            print(i,&quot;FizzBuzz&quot;)
        elif i%5 == 0:
            print(i,&quot;Buzz&quot;)
        elif i%3 == 0:
            print(i,&quot;Fizz&quot;)
        else: print(i)

fizzbuzzgame(50,100)
&lt;/pre&gt;


=== Fizz Buzz game in Interactive mode with Score ===
'''By Ms. Ami Tusharkant Choksi'''
&lt;pre&gt;
def fizzbuzzgame(i):
        if i%3 == 0 and i%5 == 0:
            print(i,&quot;FizzBuzz&quot;)
            return(&quot;fzbz&quot;)
        elif i%5 == 0:
            print(i,&quot;Buzz&quot;)
            return(&quot;bz&quot;)
        elif i%3 == 0:
            print(i,&quot;Fizz&quot;)
            return(&quot;fz&quot;)
        else:
            print(i)
            return(&quot;no&quot;)

ch = 'y'
fizzbuzz=0
fizz=0
buzz=0
nothing=0
print(&quot;&quot;&quot;
 ♠♠♠♠♠    ♠♠♠♠♠
♠                      ♠ 
♠♠♠♠♠          ♠  
♠                      ♠
♠                 ♠♠♠♠♠                                                         
&quot;&quot;&quot;)   

while(ch == 'y'):
    n=int(input(&quot;Enter a Number : &quot;))
    winLoose=fizzbuzzgame(n)
    if(winLoose == &quot;fz&quot;):
        fizz+=1
    elif(winLoose == &quot;bz&quot;):
        buzz+=1
    elif(winLoose == &quot;fzbz&quot;):
        fizzbuzz+=1
    ch=input(&quot;Do you want to continue playing the game : (y/n)&quot;)
    if(ch=='n'):
        print('Congratulations, your score is\n FizzBuzz:%d\nFizz:%d\nBuzz:%d' %
(fizzbuzz,fizz,buzz))
    
'''Sample Output:

 _____  ____  _____  _____  ____   __ __  _____  _____       ____   ____  ___ ___    ___ 
|     ||    ||     ||     ||    \ |  |  ||     ||     |     /    | /    ||   |   |  /  _]
|   __| |  | |__/  ||__/  ||  o  )|  |  ||__/  ||__/  |    |   __||  o  || _   _ | /  [_ 
|  |_   |  | |   __||   __||     ||  |  ||   __||   __|    |  |  ||     ||  \_/  ||    _]
|   _]  |  | |  /  ||  /  ||  O  ||  :  ||  /  ||  /  |    |  |_ ||  _  ||   |   ||   [_ 
|  |    |  | |     ||     ||     ||     ||     ||     |    |     ||  |  ||   |   ||     |
|__|   |____||_____||_____||_____| \__,_||_____||_____|    |___,_||__|__||___|___||_____|
                                                                                         

Enter a Number : 666
666 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 777
777 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 555
555 FizzBuzz
Do you want to continue playing the game : (y/n)y
Enter a Number : 1
1
Do you want to continue playing the game : (y/n)y
Enter a Number : 789
789 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 25
25 Buzz
Do you want to continue playing the game : (y/n)n
Congratulations, your score is

FizzBuzz:1
Fizz:3
Buzz:1

&lt;/pre&gt;

=Crowd Computing: Just Estimate=
==Wisdom of Crowds==
The concept of ’Wisdom of Crowds’ was proposed by Francis Galton. A weight-judging competition was carried on at the annual show of the West of England Fat Stock and Poultry Exhibition recently held at Plymouth, A fat ox having been selected, competitors bought stamped and numbered cards, each, on which to inscribe their respective names, addresses, and estimates of what the ox would weigh after it had been slaughtered. Those who guessed most successfully received prizes. About 8oo tickets were issued to the par- ticipants. The middlemost estimate of all the estimates recorded was 1207 lbs and the actual weight of the ox was 1198 lbs.

==Our Experiment==
The crowd had to guess the number of candies/gems in a jar. Around 75 people participated in the experiment. The actual number of gems in the jar were 375. The median of all estimates came out to be 300 and the mean of all the estimates came out to be around 396. Median underestimated and mean overestimated the actual value. So according to recent studies, Trimmed mean must be used as an aggregate measure to estimate where Wisdom of Crowds is involved.
[[File:Gemsjar.jpg|center|200px|caption]]

===Trimmed Mean===
In these kinds of experiments, 10% trimmed mean is usually followed. For calculating 10% trimmed mean, remove 10% smallest and 10% largest values from the sample. Calculate the mean of the sample obtained. In the above experiment, the trimmed mean came out to be around 351 which is very close to the actual value.

==Implementation==
Here, we try to demonstrate the concept of trimmed mean through crowd computing.
 Input a list of estimates done by the crowd .
 Sort the list.
 Remove the 10% smallest values.
 Remove the 10% largest values.
 Calculate the mean of the new list obtained .&lt;hr&gt;

==Data of Experiment==       
    Estimates =[1000,1010,1786,2000,1500,1500,100,120,150,150,150,170,175,180,197,200,200,200,200,200,200,220,220,220,220,234,250,250,250,250,250,250,250,250,250,263,270,275,275,286,300,
                300,300,300,300,300,300,300,320,350,350,350,400, 400,400,400,400,450,467,500,500,500,500,500,500,500,550,550,600,600,600,650,700,700,720]

    '''CODE:'''
&lt;pre&gt;
Estimates = [1000,1010,1786,2000,1500,1500,100,120,150,150,150,170,175,180,197,200,200,200,200,200,200,220,220,220,220,234,250,250,250,250,250,250,250,250,250,263,270,275,275,286,300,                300,300,300,300,300,300,300,320,350,350,350,400,400,400,400,400,450,467,500,500,500,500,500,500,500,550,550,600,600,600,650,700,700,720]
Estimates.sort()
offset = int(0.10*len(Estimates))
for i in range(offset):
       del Estimates[0]
       del Estimates[-1]
Sum = 0    
for i in range(len(Estimates)):
       Sum += Estimates[i]
Mean_Value = Sum/len(Estimates)
print(&quot;Mean : &quot;, int(Mean_Value))
#Output:
Mean :  351
&lt;/pre&gt;
&lt;hr&gt;
==Trimmed Mean for the above example== 
&lt;h3&gt;Using scipy library&lt;/h3&gt;
&lt;pre&gt;
#import scipy to use the method of trim_mean
from scipy import stats
trimMean = stats.trim_mean(Estimates, 0.1) # Trim 10% at both ends
print(&quot;Trimmed Mean : &quot;,trimMean)
#Output:
Trimmed Mean :  335.1020408163265
&lt;/pre&gt;

&lt;h3&gt;Without using scipy library&lt;/h3&gt;
&lt;pre&gt;
#Trimmed mean with 10%
p=10/100
#sorted data
data=[2, 4, 6, 7, 11, 21, 81, 90, 105, 121]
n = len(data)
#Remove elements from both end
rem=int(n*p)
newData = data[rem:-rem]
mean = 0
for i in newData:
    mean += i
mean = int(mean/len(newData))
print(&quot;Trimmed mean : &quot;,mean)
#Output: Trimmed mean :  40
&lt;/pre&gt;
[[#Top]]

=Jumbled_Words Permutations: Jumbled Words=
==What are Permutations ?==
A permutation also called ordering of selected number of elements from a list denoted by nPr here we are choosing all elements of a list and so n=r&lt;br&gt;
nPr=n!/(n-r)!&lt;br&gt; as n=r
nPn=n!&lt;br&gt; which gives all possible arrangement of elements present in a list.

 For example, permutations of list [1,2,3] are [1,2,3], [1,3,2], [2,1,3], [2,3,1], 
[3,1,2], and [3,2,1]. 
The number of permutations of a list of elements nPn is given by n!. For example, there are 2! = 2 x 1 = 2 permutations of [1,2], namely [1,2] and [2,1], and 3! = 3 x 2 x 1 = 6 permutations of [1,2,3], as mentioned above.&lt;br/&gt;
[[File:Permutations.jpg]]

==Implementation==
Here, we try to demonstrate the concept of permutations through jumbled words. It is a two player game in which one person presents the other person a different permutation of the word in his mind. The other person has to guess the right word. If he guesses, the he wins otherwise he loses.
 Input an list of words.
 Randomly pick a word from the list of words .
 Shuffle this word and present it to the other player.
 if word guesses by the player is same as the one picked from list of w
     player wins
 else
     player loses

ALTERNATE CODE TO GENERATE THIS GAME:
&lt;pre&gt;
import random
p1=input(&quot;enter player 1 name:&quot;)
p2=input(&quot;enter player 2 name:&quot;)
l=[&quot;rainbow&quot;,&quot;computer&quot;,&quot;robot&quot;,&quot;butter&quot;,&quot;vegetable&quot;,&quot;science&quot;,&quot;correct&quot;]
c1=c2=a1=a2=f1=f2=0
k=1
i=3
def play():
    n=random.choice(l)        ##n=chooses a word from list l
    l1=[]
    for j in n:
       l1.append(j)      ##creates a list for word in n
    for t in range(len(l1)):
       p=random.choice(l1)     ##this randomly displays letters in the list
       print(p)
       l1.remove(p)          ##to avoid the repetition of a letter
    s=input(&quot;enter the word:&quot;)
    if(s==n):
        print(&quot;correct&quot;)
        return 1
    else:
        print(&quot;not correct&quot;)
        print(&quot;answer is&quot;,n)
        return 0
def stat():
     print(&quot;player 1:&quot;)
     print(&quot;score:&quot;,c1)
     print(&quot;answered:&quot;,a1)
     print(&quot;failed:&quot;,f1)
     print(&quot;.............&quot;)
     print(&quot;player 2:&quot;)
     print(&quot;score:&quot;,c2)
     print(&quot;answered:&quot;,a2)
     print(&quot;failed&quot;,f2)
     if(c1&gt;c2):
         print(p1,&quot; won over &quot;,p2)
     elif(c1==c2):
         print(&quot;draw game&quot;)
     else:
         print(p2,&quot; won over &quot;,p1) 
while(i!=4):
      if(i==3):
         if(k==1):
             print(&quot;player 1 turn&quot;)
             print(&quot;your jumbled word is:&quot;)
             k=k+1
             m=play()
             if(m==1):      ##if guessed answer is correct,then score and no.of answered count will be increased
                c1+=1
                a1+=1
             else:
                f1+=1       ##else count of no.of failed to answered will be incremented
         else:
             print(&quot;player 2 turn&quot;)
             print(&quot;your jumbled word is:&quot;)
             k=k-1
             m=play()
             if(m==1):
                c2=c2+1
                a2=a2+1
             else:
                f2=f2+1
       if(i==2):
             print(&quot;present status&quot;)
             stat()
       i=int(input(&quot;enter your choice  1.stop 2.status 3.continue&quot;))
       if(i==1):
             stat()
             i=i+3
&lt;/pre&gt;
&lt;hr&gt;
=== JumbledWord Simple Logic, In Short ===
[[File:jumbledWord.gif]]
&lt;hr&gt;
'''Logic to create a Jumbled Word'''
&lt;hr&gt;
&lt;pre&gt;
#Get Jumbled Word and print it Horizontally
import random

def getJumbledWord(b):
    jumble=''
    l1 = [ b[i] for i in range(0, len(b)) ]
    for t in range(len(l1)):
       p=random.choice(l1)     ##this randomly gets letters from the list      
       jumble=jumble+p       
       l1.remove(p)
    return jumble

b=input(&quot;Enter a word to make it jumbled : &quot;)
print(&quot;Jumbled Word : &quot;, getJumbledWord(b))
&lt;/pre&gt;
&lt;hr&gt;
'''Another Logic to create a Jumbled Word'''
&lt;hr&gt;
&lt;pre&gt;
b=input(&quot;Enter a word to make it jumbled : &quot;)

def getJumbledWord1(b):
    l1 = [ b[i] for i in range(0, len(b)) ]
    random.shuffle(l1)
    str1 = ''.join(l1)
    return str1

print(&quot;Jumbled Word : &quot;, getJumbledWord1(b))
&lt;/pre&gt;

====Sample Output:====
&lt;pre&gt;
---- Output1 
Enter a word to make it jumbled : butter
Jumbled Word :  tbture

---- Output2 
Enter a word to make it jumbled : petriotism
Jumbled Word :  pittrosime
&lt;/pre&gt;

=Theory of Evolution=

== What is Evolution ? ==
Evolution is the change in heritable characteristics over successive generations. The theory of evolution explains that DNA, which acts as a carrier of genetic information from one generation to other, tends to change or mutate occasionally. These changes are reflected in next generations to come. This is how life has evolved on earth from bacteria to human beings.&lt;br&gt;
[[File:Evolution.png|500px]]

== Implementation ==
&lt;pre&gt;An array representing DNA is stored in a file. As genes are forms of DNA, they contain information to be transferred to forthcoming generations. Assume that information is in the form of bits (in the form of 0s and 1s). A number is picked randomly from 1 to the size of the array. A new parameter has been introduced which decides whether mutation would occur or not. If the value of this new parameter is 1 (It is picked randomly from 1 to 100), then only change is reflected down the generations, otherwise it is not. The pseudo code is as follows :
Input an array containing genetic information .
Randomly generate a number (say m) from 1 to length of the array. Randomly generate other number (say p) from 1 to 100.
 
    if p is equal to 1 then 
        if m is 1 then
          set it to 0
        else
          set it to 1
&lt;/pre&gt;
[[#TOP]]</text>
      <sha1>m6xvvxn82o394dys0ha1f8k5wzkjwqz</sha1>
    </revision>
    <revision>
      <id>3579</id>
      <parentid>3577</parentid>
      <timestamp>2018-09-28T03:11:47Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* Fizz Buzz game in Interactive mode with Score */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="31174">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_3 Contributors of this page]
*Week 3 Playlist: https://www.youtube.com/playlist?list=PLc_j0TNIaWxOVx_z9jAM2UB3RqYNXaoEo
=List=
List is a flexible data structure used for storing a group of data separated by comma. The elements in a list need not be of the same data type.

'''Example:'''
       List_1 = [ 1, 2,3] or 
       List_1 = [&quot;coffee&quot;, &quot;Tea&quot;, &quot;Milk&quot;] or
       List_1 = [1,&quot;coffee&quot;, &quot;Tea&quot;, 3, &quot;5&quot;]

==List Creation==
&lt;pre&gt;a) A list can be created by simply putting values (separated by comma) between square brackets as given below,
       List_1 = [1,&quot;coffee&quot;, &quot;Tea&quot;, 3, &quot;5&quot;] #this creates a list by name List_1 containing following items


Or,
(b)A List can be created from scratch and elements can be added 
        List_2 = [ ]
        List_2.append(&quot;Kala&quot;)
        List_2.append(&quot;Mala&quot;)
Here we use &quot;append&quot; ,which is a function in python that enable us to append or attach an element to a list .
Thus List_2 will now hold [&quot;Kala&quot;,&quot;Mala&quot;]
&lt;/pre&gt;
[[#TOP]]

==Operations and Methods to work with List==
&lt;pre&gt;
a = [25,30,50,90,12,13]
b = [100,300,500,200,250]
&lt;/pre&gt;
&lt;hr&gt;
&lt;table border=2&gt;
  &lt;tr&gt;
    &lt;th&gt;&lt;b&gt;Method/&lt;br&gt;Operator&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Function&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Syntax&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Output&lt;/b&gt;&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;len()&lt;/td&gt;
    &lt;td&gt;Find length of a list&lt;/td&gt;
    &lt;td&gt;len(a)&lt;/td&gt;
    &lt;td&gt;6&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;max()&lt;/td&gt;
    &lt;td&gt;Find maximum element from the list&lt;/td&gt;
    &lt;td&gt;max(a)&lt;/td&gt;
    &lt;td&gt;90&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;min()&lt;/td&gt;
    &lt;td&gt;Find minimum element from the list&lt;/td&gt;
    &lt;td&gt;min(a)&lt;/td&gt;
    &lt;td&gt;12&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sum()&lt;/td&gt;
    &lt;td&gt;Returns sum of all elements of the list&lt;/td&gt;
    &lt;td&gt;sum(a)&lt;/td&gt;
    &lt;td&gt;220&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;reverse()&lt;/td&gt;
    &lt;td&gt;Reverses the original list&lt;/td&gt;
    &lt;td&gt;a.reverse()&lt;/td&gt;
    &lt;td&gt;[13, 12, 90, 50, 30, 25]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sort()&lt;/td&gt;
    &lt;td&gt;Sorts the original list in ascending order&lt;/td&gt;
    &lt;td&gt;a.sort()&lt;/td&gt;
    &lt;td&gt;[12, 13, 25, 30, 50, 90]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sorted()&lt;/td&gt;
    &lt;td&gt;Returns the new sorted list &lt;/td&gt;
    &lt;td&gt;sorted(a)&lt;/td&gt;
    &lt;td&gt;[12, 13, 25, 30, 50, 90]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;insert()&lt;/td&gt;
    &lt;td&gt;Insert at a particular index in the list, and shifts remaining elements&lt;/td&gt;
    &lt;td&gt;a.insert(3,3)&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 3, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;append()&lt;/td&gt;
    &lt;td&gt;Adds elements/object to the end of the list&lt;/td&gt;
    &lt;td&gt;a.append(5)&lt;br&gt;a.append([10,20])&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 5]&lt;br&gt;[25, 30, 50, 90, 12, 13, [10, 20]]&lt;br&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;extend()&lt;/td&gt;
    &lt;td&gt;Adds object to the end of the list as elements not as object&lt;/td&gt;
    &lt;td&gt;a.extend([10,20])&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 10, 20]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;*&amp;nbsp;&amp;nbsp;Repeatation&lt;br&gt;operator&lt;/td&gt;
    &lt;td&gt;Repeat the list for n times and returns a new list&lt;/td&gt;
    &lt;td&gt;a*2&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 25, 30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;+ Concatenation&lt;br&gt;operator&lt;/td&gt;
    &lt;td&gt;Concatenates two lists, and returns a new list&lt;/td&gt;
    &lt;td&gt;a+b&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 100, 300, 500, 200, 250]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;index()&lt;/td&gt;
    &lt;td&gt;Finds index of a particular element in the list or not&lt;/td&gt;
    &lt;td&gt;a.index(25)&lt;br&gt;a.index(0)&lt;br&gt;&lt;/td&gt;
    &lt;td&gt;0&lt;br&gt;&lt;br&gt;ValueError: 0 is not in list&lt;br&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;in operator&lt;/td&gt;
    &lt;td&gt;Finds whether a particular element is in the list or not, returns boolean&lt;/td&gt;
    &lt;td&gt;25 in a&lt;/td&gt;
    &lt;td&gt;True&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;not in operator&lt;/td&gt;
    &lt;td&gt;Checks if element is not available in list, returns boolean&lt;/td&gt;
    &lt;td&gt;25 not in a&lt;/td&gt;
    &lt;td&gt;False&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;count()&lt;/td&gt;
    &lt;td&gt;Counts the number of occurence of an element in the list&lt;/td&gt;
    &lt;td&gt;a.count(25)&lt;/td&gt;
    &lt;td&gt;1&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;remove()&lt;/td&gt;
    &lt;td&gt;Removes an element from the list&lt;/td&gt;
    &lt;td&gt;a.remove(25)&lt;/td&gt;
    &lt;td&gt; [30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;pop()&lt;/td&gt;
    &lt;td&gt;Delete and return item at index 0&lt;/td&gt;
    &lt;td&gt;a.pop(0)&lt;/td&gt;
    &lt;td&gt;25 , a will be [30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;del&lt;/td&gt;
    &lt;td&gt;Deletes item at a particular index from the list&lt;/td&gt;
    &lt;td&gt;del a[0]&lt;/td&gt;
    &lt;td&gt;[30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;all()&lt;/td&gt;
&lt;td&gt;Returns True, if all items in list are True or it is an empty list&lt;/td&gt;
&lt;td&gt;all([True, True, True])
all([])
&lt;/td&gt;
&lt;td&gt;True&lt;br&gt;
True&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;any()&lt;/td&gt;
&lt;td&gt;Returns True, if any item in list is True else return False&lt;/td&gt;
&lt;td&gt;any([True, True, True])&lt;br&gt;
any([True, False, True])&lt;br&gt;
any([])&lt;/td&gt;
&lt;td&gt;True&lt;br&gt;False&lt;br&gt;False&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;

==Printing the List==
=== Print whole list ===
A list can be printed simply or using a ''for / while'' loop 

 print(List_2)     # To print the entire list
This code will print      
 ['Kala','Mala']     

===Print element at a particular index===
&lt;pre&gt;
Using index position
    List_2[0]     # prints 'Kala' ,i.e,the value at index position 0.
    List_2[1]     # prints 'Mala'.
&lt;/pre&gt;
=== Without using index position ===
&lt;pre&gt;
for item in List_2:   # here item is a variable used to access elements in list.
       print(item)
   This code snippet prints 
    Kala
    Mala
&lt;/pre&gt;
[[#TOP]]

==Search for a particular element in list==
Elements in a list can be searched by one of the two ways:
=== using index() function===
&lt;pre&gt;
ages1 = [11,23,12,23,45]

#if element is available in the list, index() returns the index value on which, the element is present.
print(ages1.index(45))#Output: 4

#if element is not available in the list, index() returns ''ValueError''
print(ages1.index(0))#Output: ValueError:
&lt;/pre&gt;

In programming, if such error occurs, program gets terminated. It can be solved using exception handling.
e.g.
&lt;pre&gt;
ages1 = [11,23,12,23,45]

try:
    print(ages1.index(0))
except ValueError:
    print(&quot;Exception has occured&quot;)    
    print(&quot;Element is not found in the list&quot;)

&lt;/pre&gt;
&lt;pre&gt;
'''Output: 
Exception has occured
Element is not found in the list
'''&lt;/pre&gt;
[[#TOP]]

=== using 'in' operator===
''in'' operator is used to check whether a particular element is available in the list or not.e.g.

&lt;pre&gt;
ages1 = [11,23,12,23,45]
no=11

if no in ages1:
    print(&quot;no is there in the list&quot;)
else:    
    print(&quot;no is NOT there in the list&quot;)
&lt;/pre&gt;
&lt;pre&gt;
#Output: no is there in the list
&lt;/pre&gt;


'''Number is not there in the list'''
&lt;pre&gt;
ages1 = [11,23,12,23,45]
no=15

if no in ages1:
    print(&quot;no is there in the list&quot;)
else:    
    print(&quot;no is NOT there in the list&quot;)
&lt;/pre&gt;
&lt;pre&gt;
Output: no is NOT there in the list
&lt;/pre&gt;
[[#TOP]]

==Updating the List==
The lists can be updated using ''append'' or ''insert'' function.  Append adds the element to the end of the list and Insert adds the element in the specified position.
&lt;pre&gt;
   # add the element 'Sheela' to the end of the list.
   List_2.append(&quot;Sheela&quot;)    
   print (List_2) will output 
   ['Kala', 'Mala', 'Sheela']
&lt;/pre&gt;
   &lt;pre&gt;
# add the element &quot;Bala&quot; in the list at the index 1.
   List_2.insert(1,&quot;Bala&quot;)    
   print (List_2) will output 
   ['Kala', 'Bala','Mala', 'Sheela']
&lt;/pre&gt;

=== Extend the list by adding elements of other list at end using extend()===
&lt;pre&gt;
ages = [11,23,12,23,45]
ages.extend([57,58])
print(ages)
&lt;/pre&gt;

&lt;pre&gt;
#Output: [11, 23, 12, 23, 45, 57, 58]
&lt;/pre&gt;

==== Difference between ''append and extend'' ====
Difference between append and extend can be easily understood, by the following example.

&lt;pre&gt;
appendlist = [11,23,12,23,45]
appendlist.append([57,58])

extendlist= [11,23,12,23,45]
extendlist.extend([57,58])
&lt;/pre&gt;

&lt;pre&gt;
'''Output:
[11, 23, 12, 23, 45, [57, 58]]
[11, 23, 12, 23, 45, 57, 58]'''
&lt;/pre&gt;

[[#TOP]]

==Basic Operations on List==
===Frequency of Occurrence===
list.count(object) will return the number of times the object occur in the list.
  '''Example'''
    ages = [11,23,12,23,45,43,22,24,23]
    ages.count(23) will return
    3
    ages.count(100) will return
    0

===Length of the List===
len(list) will return the length of the list ie. the number of objects in the list.
  '''Example'''
&lt;pre&gt;
    ages = [11,23,12,23,45,43,22,24,23]
    len(ages) # Output: 9
&lt;/pre&gt;

To print the objects in the list either use ''for item in list'' or ''for index in range(len(list))''
&lt;pre&gt;
    for item in ages:       
        print (item)  
        (OR)
    for index in range(len(ages)) :
        print (ages[index])
&lt;/pre&gt;

===Sort the List===
list.sort() will sort the list in ascending order
  '''Example'''
    ages = [11,23,12,23,45,43,22,24,23]
    ages.sort() 
    print (ages) 
    [11, 12, 22, 23, 23, 23, 24, 43, 45]

[[#TOP]]

===Sort the List using sorted() function===
sorted(list1) will sort the list and return a new list, it doesn't modify the original list
&lt;br&gt;'''Example: Sort in ascending order'''
&lt;pre&gt;
ages = [11,23,12,23,45,43,22,24,23]
newList=sorted(ages)
print(newList)

#Output: [11, 12, 22, 23, 23, 23, 24, 43, 45]
&lt;/pre&gt;

&lt;br&gt;'''Example: Sort in descending order'''
&lt;pre&gt;
ages = [11,23,12,23,45,43,22,24,23]
newList=sorted(ages,reverse=True)
print(newList)

#Output: [45, 43, 24, 23, 23, 23, 22, 12, 11]
&lt;/pre&gt;

===Reverse the List===
list.reverse() will reverse the original list
  '''Example'''
    ages = [11, 12, 22, 23, 23, 23, 24, 43, 45]
    ages.reverse()
    print (ages)
    [45, 43, 24, 23, 23, 23, 22, 12, 11]

Both sort() and reverse() list operation will work on numeric and alphanumeric data list.

A special use of the reverse() function is to descend a list that is sorted in ascending order.

  '''Example'''
&lt;pre&gt;
ages = [11, 12, 22, 23, 23, 23, 24, 43, 45]
ages.sort()
print(ages)
ages.reverse()
print(ages)
&lt;/pre&gt;

===Slicing===
Used to retrieve an object or objects in a range as a list  
  '''Example'''

Use ''list[index]'' to retrieve the object at the given index
&lt;pre&gt;
In [1]: student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
In [2]: student[3]     #Object at index 3.  Remember index starts at 0
Out[2]: 'Geetha'      
&lt;/pre&gt;

Use ''list[start_index : end_index + 1]'' to retrieve objects from the start_index to end_index 
&lt;pre&gt;
In [3]: student[2:4]     # Objects from index 2 to 3 as List. Note the [ and ]
Out[3]: ['Vijay', 'Geetha']   
&lt;/pre&gt;

Use ''list[:]'' to retrieve objects from the starting of the list to the end of the list. 
The default start value will be the starting index of the list (i.e. 0) and the default end value
will be the length of the list 
&lt;pre&gt;
In [4]: student[:]        # prints the entire list
Out[4]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma', 'Janani']
&lt;/pre&gt;
&lt;pre&gt;
In [5]: student[:5]       # prints the objects from the start of the list upto object at index 4
Out[5]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran']
&lt;/pre&gt;
&lt;pre&gt;
In [6]: student[2:]       # prints the objects from index 2 upto the end of the list
Out[6]: ['Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma', 'Janani']
&lt;/pre&gt;

Negative index too is available in Python. It starts from last element of the list. i.e.
&lt;pre&gt;
In [7]:student[-1]        #prints last index of list
Out[7]: 'Janani'
&lt;/pre&gt;
&lt;pre&gt;
In [8]:student[-1:-8]     #prints empty list
Out[8]: []
&lt;/pre&gt;
&lt;pre&gt;
In [9]:student[-8:-1]     #prints -8th index to -1st index elements
Out[9]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma']
&lt;/pre&gt;

[[#TOP]]

===Removing Item from list ===
----

Is used to remove a specific item from the list.

'''Example:'''
 
Use list.remove(entry/value)  Or   del list[index]    Or list.pop(index)
&lt;pre&gt;
student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
student.remove(&quot;Arun&quot;)   #This will delete item &quot;Arun&quot;
         Or    
del student[0]           # This will delete item at index 0
         Or
student.pop(0)         # This will delete and return item at index 0
print(student)    
Output: &quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
&lt;/pre&gt;

[[#TOP]]

===Delete list ===
----
Used to delete complete list

'''Example'''

Use del &lt;list name&gt;
&lt;pre&gt;
student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
del student&lt;/pre&gt;

===Concatenation of two lists===
----
''+'' is the concatenation operator which is used concatenate two lists. 
&lt;pre&gt;
ages1 = [11,23,12,23,45]
ages2 = [25, 24, 43, 47]
age=ages1+ages2
print(age)
#Output: [11, 23, 12, 23, 45, 25, 24, 43, 47]
&lt;/pre&gt;

===Repeatation of a list ===
----
''*'' is the operator to repeat a particular list.
&lt;pre&gt;
ages1 = [11,23,12,23,45]
age=ages1*5 #ages1 list is repeated 5 times and stroed in ''age'' list
print(age)

#Output: [11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45]
&lt;/pre&gt;

=== all and any for List===
all() and any() are special functions to check whether all elements in iterable is ''True'' or any element is ''True''
&lt;ol&gt;
&lt;li&gt;If all elements in a list are ''True'', '''all()''' will return ''True''&lt;/li&gt;
&lt;li&gt;If iterable is ''empty'', '''all()''' will return ''True''&lt;/li&gt;
&lt;li&gt;If iterable contains at least one ''True'', '''any()''' will return ''True''&lt;/li&gt;
&lt;li&gt;If iterable is ''empty'', '''any()''' will return ''False''&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;
lsit=[True, True, True, True]
print(all(lsit))#Output: True
print(any(lsit))#Output: True

lsit1=[True, False, True, True]
print(all(lsit1))#Output: False
print(any(lsit1))#Output: True

lsit2=[False,False,False]
print(all(lsit2))#Output: False
print(any(lsit2))#Output: False

lsit3=[]
print(all(lsit3))#Output: True
print(any(lsit3))#Output: False
&lt;/pre&gt;

==Conditional Statements==
&lt;pre&gt;Conditionals are used to check the condition and change the flow of the program 
accordingly. They are realized in programming languages through if statement. The 
syntax is as follows :
&lt;pre&gt;
         if condition : 
            statement
&lt;/pre&gt;
    '''Note:''' Do not forget indentation (inserting space/tab) in the line after the
 if condition.
    
    In case you want to execute a set of statements when a condition is true and another

set of statement when the condition is false.
&lt;pre&gt;
         if condition : 
            statement 1
         else :
            statement 2
&lt;/pre&gt;

&lt;pre&gt;    
    Multiple if-else statements can be written as follows:
         if condition_1 : 
            statement 1
         elif condition_2 : # 'elif' is short for 'else if'
            statement 2
         elif condition_3 :
            statement 3
        .
        .
         else :
            final statement
&lt;/pre&gt;

[[#TOP]]

=Loops and Conditionals : Fizzbuzz=
====Loops====
Loops are used to execute a set of repetitive statements. They are realised
through 'while' and 'for' loops in programming languages. The syntax of 'for' loop is 
as follows :
&lt;pre&gt;
for LOOPVARIABLE in SEQUENCE: 
            STATEMENTS&lt;/pre&gt;

    '''e.g.''' to print all the data from a list we can write:
&lt;pre&gt;
for item in list_name:
      print(item)&lt;/pre&gt;
    OR
&lt;pre&gt;
for index in range(len(list_name)):
      print(list_name[index])
 &lt;/pre&gt;   
    The syntax for while loop is as follows :
&lt;pre&gt;    
while BOOLEANEXPRESSION: 
     STATEMENTS
     INCREMENT/DECREMENT
&lt;/pre&gt;    
    '''e.g.''' if we want to print all numbers from 1 to 10
&lt;pre&gt;
i=1
while i&lt;=10 :
    print(i,&quot; &quot;)
    i=i+1
    &lt;/pre&gt;
 
'while' loop has indefinite iteration (run-time unknown). So, there must be loop,  break statement in it.
 Whereas 'for' loop is definite in nature (i.e. known or predictable span).&lt;br&gt;

&lt;b&gt;NOTE: Python doesn't have anything like do-while loop.&lt;/b&gt;

[[#TOP]]

==Implementation==
Here, we try to demonstrate the concept of loops and conditionals through a game called Fizzbuzz. The rules are as follows :&lt;br/&gt;
[[File:fizzBuzz.gif]]

• if input number is a multiple of ’3’ print ”Fizz”
&lt;br/&gt;
• if input number is a multiple of ’5’ print ”Buzz”
&lt;br/&gt;
• if input number is a multiple of both '3' and ’5’ print ”FizzBuzz”
&lt;br/&gt;
The pseudo code is as follows :
&lt;pre&gt;
   If input no % 3 == 0 and  input no % 5 == 0 : 
       print ”Fizzbuzz”
   else if input no % 3 == 0 : 
       print ”Fizz”
   else if input no % 5 == 0 : 
       print ”Buzz”
   else :
       print the input no
&lt;/pre&gt;
The order of statements execution matters to get the desired output. The highest priority condition should be first followed by other. In fizzbuzz programming, first checking should be done for both divisibility of 3 and 5. If condition not satisfied only then it should check individually for 3 or 5. So carefully choosing the order is crucial for better programming.
Note: There is some effect of present condition statements chosen on next conditions statements. That is why in first attempt fizzbuzz programming got struck.

Example: 
&lt;pre&gt;
#Code to achieve the above requirement in python3.
i = int(input(&quot;Enter the number&quot;)) 
if i%3 == 0 and i%5 == 0: print(i,&quot;FizzBuzz&quot;)  
elif i%5 == 0: print(i,&quot;Buzz&quot;)
elif i%3 == 0: print(i,&quot;Fizz&quot;)
else: print(i)
&lt;/pre&gt;
Lets put the same into a loop for a range given by the user.
&lt;pre&gt;
def fizzbuzzgame(start,stop):
    for i in range(start,stop+1):
        if i%3 == 0 and i%5 == 0:
            print(i,&quot;FizzBuzz&quot;)
        elif i%5 == 0:
            print(i,&quot;Buzz&quot;)
        elif i%3 == 0:
            print(i,&quot;Fizz&quot;)
        else: print(i)

fizzbuzzgame(50,100)
&lt;/pre&gt;


=== Fizz Buzz game in Interactive mode with Score ===
'''By Ms. Ami Tusharkant Choksi'''
&lt;pre&gt;
def fizzbuzzgame(i):
        if i%3 == 0 and i%5 == 0:
            print(i,&quot;FizzBuzz&quot;)
            return(&quot;fzbz&quot;)
        elif i%5 == 0:
            print(i,&quot;Buzz&quot;)
            return(&quot;bz&quot;)
        elif i%3 == 0:
            print(i,&quot;Fizz&quot;)
            return(&quot;fz&quot;)
        else:
            print(i)
            return(&quot;no&quot;)

ch = 'y'
fizzbuzz=0
fizz=0
buzz=0
nothing=0
print(&quot;&quot;&quot;

                                                                                                                                                         
                                                                                                                                                         
    ,---,.                                       ,---,.                                                   ,----..                         ____           
  ,'  .' |  ,--,                               ,'  .'  \                                                 /   /   \                      ,'  , `.         
,---.'   |,--.'|          ,----,       ,----,,---.' .' |         ,--,        ,----,       ,----,        |   :     :                  ,-+-,.' _ |         
|   |   .'|  |,         .'   .`|     .'   .`||   |  |: |       ,'_ /|      .'   .`|     .'   .`|        .   |  ;. /               ,-+-. ;   , ||         
:   :  :  `--'_      .'   .'  .'  .'   .'  .':   :  :  /  .--. |  | :   .'   .'  .'  .'   .'  .'        .   ; /--`    ,--.--.    ,--.'|'   |  || ,---.   
:   |  |-,,' ,'|   ,---, '   ./ ,---, '   ./ :   |    ; ,'_ /| :  . | ,---, '   ./ ,---, '   ./         ;   | ;  __  /       \  |   |  ,', |  |,/     \  
|   :  ;/|'  | |   ;   | .'  /  ;   | .'  /  |   :     \|  ' | |  . . ;   | .'  /  ;   | .'  /          |   : |.' .'.--.  .-. | |   | /  | |--'/    /  | 
|   |   .'|  | :   `---' /  ;--,`---' /  ;--,|   |   . ||  | ' |  | | `---' /  ;--,`---' /  ;--,        .   | '_.' : \__\/: . . |   : |  | ,  .    ' / | 
'   :  '  '  : |__   /  /  / .`|  /  /  / .`|'   :  '; |:  | : ;  ; |   /  /  / .`|  /  /  / .`|        '   ; : \  | ,&quot; .--.; | |   : |  |/   '   ;   /| 
|   |  |  |  | '.'|./__;     .' ./__;     .' |   |  | ; '  :  `--'   \./__;     .' ./__;     .'         '   | '/  .'/  /  ,.  | |   | |`-'    '   |  / | 
|   :  \  ;  :    ;;   |  .'    ;   |  .'    |   :   /  :  ,      .-./;   |  .'    ;   |  .'            |   :    / ;  :   .'   \|   ;/        |   :    | 
|   | ,'  |  ,   / `---'        `---'        |   | ,'    `--`----'    `---'        `---'                 \   \ .'  |  ,     .-./'---'          \   \  /  
`----'     ---`-'                            `----'                                                       `---`     `--`---'                    `----'   
                                                                                                                                                         
                                                          
&quot;&quot;&quot;)   

while(ch == 'y'):
    n=int(input(&quot;Enter a Number : &quot;))
    winLoose=fizzbuzzgame(n)
    if(winLoose == &quot;fz&quot;):
        fizz+=1
    elif(winLoose == &quot;bz&quot;):
        buzz+=1
    elif(winLoose == &quot;fzbz&quot;):
        fizzbuzz+=1
    ch=input(&quot;Do you want to continue playing the game : (y/n)&quot;)
    if(ch=='n'):
        print('Congratulations, your score is\n FizzBuzz:%d\nFizz:%d\nBuzz:%d' %
(fizzbuzz,fizz,buzz))
    
'''Sample Output:

 _____  ____  _____  _____  ____   __ __  _____  _____       ____   ____  ___ ___    ___ 
|     ||    ||     ||     ||    \ |  |  ||     ||     |     /    | /    ||   |   |  /  _]
|   __| |  | |__/  ||__/  ||  o  )|  |  ||__/  ||__/  |    |   __||  o  || _   _ | /  [_ 
|  |_   |  | |   __||   __||     ||  |  ||   __||   __|    |  |  ||     ||  \_/  ||    _]
|   _]  |  | |  /  ||  /  ||  O  ||  :  ||  /  ||  /  |    |  |_ ||  _  ||   |   ||   [_ 
|  |    |  | |     ||     ||     ||     ||     ||     |    |     ||  |  ||   |   ||     |
|__|   |____||_____||_____||_____| \__,_||_____||_____|    |___,_||__|__||___|___||_____|
                                                                                         

Enter a Number : 666
666 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 777
777 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 555
555 FizzBuzz
Do you want to continue playing the game : (y/n)y
Enter a Number : 1
1
Do you want to continue playing the game : (y/n)y
Enter a Number : 789
789 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 25
25 Buzz
Do you want to continue playing the game : (y/n)n
Congratulations, your score is

FizzBuzz:1
Fizz:3
Buzz:1

&lt;/pre&gt;

=Crowd Computing: Just Estimate=
==Wisdom of Crowds==
The concept of ’Wisdom of Crowds’ was proposed by Francis Galton. A weight-judging competition was carried on at the annual show of the West of England Fat Stock and Poultry Exhibition recently held at Plymouth, A fat ox having been selected, competitors bought stamped and numbered cards, each, on which to inscribe their respective names, addresses, and estimates of what the ox would weigh after it had been slaughtered. Those who guessed most successfully received prizes. About 8oo tickets were issued to the par- ticipants. The middlemost estimate of all the estimates recorded was 1207 lbs and the actual weight of the ox was 1198 lbs.

==Our Experiment==
The crowd had to guess the number of candies/gems in a jar. Around 75 people participated in the experiment. The actual number of gems in the jar were 375. The median of all estimates came out to be 300 and the mean of all the estimates came out to be around 396. Median underestimated and mean overestimated the actual value. So according to recent studies, Trimmed mean must be used as an aggregate measure to estimate where Wisdom of Crowds is involved.
[[File:Gemsjar.jpg|center|200px|caption]]

===Trimmed Mean===
In these kinds of experiments, 10% trimmed mean is usually followed. For calculating 10% trimmed mean, remove 10% smallest and 10% largest values from the sample. Calculate the mean of the sample obtained. In the above experiment, the trimmed mean came out to be around 351 which is very close to the actual value.

==Implementation==
Here, we try to demonstrate the concept of trimmed mean through crowd computing.
 Input a list of estimates done by the crowd .
 Sort the list.
 Remove the 10% smallest values.
 Remove the 10% largest values.
 Calculate the mean of the new list obtained .&lt;hr&gt;

==Data of Experiment==       
    Estimates =[1000,1010,1786,2000,1500,1500,100,120,150,150,150,170,175,180,197,200,200,200,200,200,200,220,220,220,220,234,250,250,250,250,250,250,250,250,250,263,270,275,275,286,300,
                300,300,300,300,300,300,300,320,350,350,350,400, 400,400,400,400,450,467,500,500,500,500,500,500,500,550,550,600,600,600,650,700,700,720]

    '''CODE:'''
&lt;pre&gt;
Estimates = [1000,1010,1786,2000,1500,1500,100,120,150,150,150,170,175,180,197,200,200,200,200,200,200,220,220,220,220,234,250,250,250,250,250,250,250,250,250,263,270,275,275,286,300,                300,300,300,300,300,300,300,320,350,350,350,400,400,400,400,400,450,467,500,500,500,500,500,500,500,550,550,600,600,600,650,700,700,720]
Estimates.sort()
offset = int(0.10*len(Estimates))
for i in range(offset):
       del Estimates[0]
       del Estimates[-1]
Sum = 0    
for i in range(len(Estimates)):
       Sum += Estimates[i]
Mean_Value = Sum/len(Estimates)
print(&quot;Mean : &quot;, int(Mean_Value))
#Output:
Mean :  351
&lt;/pre&gt;
&lt;hr&gt;
==Trimmed Mean for the above example== 
&lt;h3&gt;Using scipy library&lt;/h3&gt;
&lt;pre&gt;
#import scipy to use the method of trim_mean
from scipy import stats
trimMean = stats.trim_mean(Estimates, 0.1) # Trim 10% at both ends
print(&quot;Trimmed Mean : &quot;,trimMean)
#Output:
Trimmed Mean :  335.1020408163265
&lt;/pre&gt;

&lt;h3&gt;Without using scipy library&lt;/h3&gt;
&lt;pre&gt;
#Trimmed mean with 10%
p=10/100
#sorted data
data=[2, 4, 6, 7, 11, 21, 81, 90, 105, 121]
n = len(data)
#Remove elements from both end
rem=int(n*p)
newData = data[rem:-rem]
mean = 0
for i in newData:
    mean += i
mean = int(mean/len(newData))
print(&quot;Trimmed mean : &quot;,mean)
#Output: Trimmed mean :  40
&lt;/pre&gt;
[[#Top]]

=Jumbled_Words Permutations: Jumbled Words=
==What are Permutations ?==
A permutation also called ordering of selected number of elements from a list denoted by nPr here we are choosing all elements of a list and so n=r&lt;br&gt;
nPr=n!/(n-r)!&lt;br&gt; as n=r
nPn=n!&lt;br&gt; which gives all possible arrangement of elements present in a list.

 For example, permutations of list [1,2,3] are [1,2,3], [1,3,2], [2,1,3], [2,3,1], 
[3,1,2], and [3,2,1]. 
The number of permutations of a list of elements nPn is given by n!. For example, there are 2! = 2 x 1 = 2 permutations of [1,2], namely [1,2] and [2,1], and 3! = 3 x 2 x 1 = 6 permutations of [1,2,3], as mentioned above.&lt;br/&gt;
[[File:Permutations.jpg]]

==Implementation==
Here, we try to demonstrate the concept of permutations through jumbled words. It is a two player game in which one person presents the other person a different permutation of the word in his mind. The other person has to guess the right word. If he guesses, the he wins otherwise he loses.
 Input an list of words.
 Randomly pick a word from the list of words .
 Shuffle this word and present it to the other player.
 if word guesses by the player is same as the one picked from list of w
     player wins
 else
     player loses

ALTERNATE CODE TO GENERATE THIS GAME:
&lt;pre&gt;
import random
p1=input(&quot;enter player 1 name:&quot;)
p2=input(&quot;enter player 2 name:&quot;)
l=[&quot;rainbow&quot;,&quot;computer&quot;,&quot;robot&quot;,&quot;butter&quot;,&quot;vegetable&quot;,&quot;science&quot;,&quot;correct&quot;]
c1=c2=a1=a2=f1=f2=0
k=1
i=3
def play():
    n=random.choice(l)        ##n=chooses a word from list l
    l1=[]
    for j in n:
       l1.append(j)      ##creates a list for word in n
    for t in range(len(l1)):
       p=random.choice(l1)     ##this randomly displays letters in the list
       print(p)
       l1.remove(p)          ##to avoid the repetition of a letter
    s=input(&quot;enter the word:&quot;)
    if(s==n):
        print(&quot;correct&quot;)
        return 1
    else:
        print(&quot;not correct&quot;)
        print(&quot;answer is&quot;,n)
        return 0
def stat():
     print(&quot;player 1:&quot;)
     print(&quot;score:&quot;,c1)
     print(&quot;answered:&quot;,a1)
     print(&quot;failed:&quot;,f1)
     print(&quot;.............&quot;)
     print(&quot;player 2:&quot;)
     print(&quot;score:&quot;,c2)
     print(&quot;answered:&quot;,a2)
     print(&quot;failed&quot;,f2)
     if(c1&gt;c2):
         print(p1,&quot; won over &quot;,p2)
     elif(c1==c2):
         print(&quot;draw game&quot;)
     else:
         print(p2,&quot; won over &quot;,p1) 
while(i!=4):
      if(i==3):
         if(k==1):
             print(&quot;player 1 turn&quot;)
             print(&quot;your jumbled word is:&quot;)
             k=k+1
             m=play()
             if(m==1):      ##if guessed answer is correct,then score and no.of answered count will be increased
                c1+=1
                a1+=1
             else:
                f1+=1       ##else count of no.of failed to answered will be incremented
         else:
             print(&quot;player 2 turn&quot;)
             print(&quot;your jumbled word is:&quot;)
             k=k-1
             m=play()
             if(m==1):
                c2=c2+1
                a2=a2+1
             else:
                f2=f2+1
       if(i==2):
             print(&quot;present status&quot;)
             stat()
       i=int(input(&quot;enter your choice  1.stop 2.status 3.continue&quot;))
       if(i==1):
             stat()
             i=i+3
&lt;/pre&gt;
&lt;hr&gt;
=== JumbledWord Simple Logic, In Short ===
[[File:jumbledWord.gif]]
&lt;hr&gt;
'''Logic to create a Jumbled Word'''
&lt;hr&gt;
&lt;pre&gt;
#Get Jumbled Word and print it Horizontally
import random

def getJumbledWord(b):
    jumble=''
    l1 = [ b[i] for i in range(0, len(b)) ]
    for t in range(len(l1)):
       p=random.choice(l1)     ##this randomly gets letters from the list      
       jumble=jumble+p       
       l1.remove(p)
    return jumble

b=input(&quot;Enter a word to make it jumbled : &quot;)
print(&quot;Jumbled Word : &quot;, getJumbledWord(b))
&lt;/pre&gt;
&lt;hr&gt;
'''Another Logic to create a Jumbled Word'''
&lt;hr&gt;
&lt;pre&gt;
b=input(&quot;Enter a word to make it jumbled : &quot;)

def getJumbledWord1(b):
    l1 = [ b[i] for i in range(0, len(b)) ]
    random.shuffle(l1)
    str1 = ''.join(l1)
    return str1

print(&quot;Jumbled Word : &quot;, getJumbledWord1(b))
&lt;/pre&gt;

====Sample Output:====
&lt;pre&gt;
---- Output1 
Enter a word to make it jumbled : butter
Jumbled Word :  tbture

---- Output2 
Enter a word to make it jumbled : petriotism
Jumbled Word :  pittrosime
&lt;/pre&gt;

=Theory of Evolution=

== What is Evolution ? ==
Evolution is the change in heritable characteristics over successive generations. The theory of evolution explains that DNA, which acts as a carrier of genetic information from one generation to other, tends to change or mutate occasionally. These changes are reflected in next generations to come. This is how life has evolved on earth from bacteria to human beings.&lt;br&gt;
[[File:Evolution.png|500px]]

== Implementation ==
&lt;pre&gt;An array representing DNA is stored in a file. As genes are forms of DNA, they contain information to be transferred to forthcoming generations. Assume that information is in the form of bits (in the form of 0s and 1s). A number is picked randomly from 1 to the size of the array. A new parameter has been introduced which decides whether mutation would occur or not. If the value of this new parameter is 1 (It is picked randomly from 1 to 100), then only change is reflected down the generations, otherwise it is not. The pseudo code is as follows :
Input an array containing genetic information .
Randomly generate a number (say m) from 1 to length of the array. Randomly generate other number (say p) from 1 to 100.
 
    if p is equal to 1 then 
        if m is 1 then
          set it to 0
        else
          set it to 1
&lt;/pre&gt;
[[#TOP]]</text>
      <sha1>hkfgqwru9dndlaz1ultjwvxuaer1tju</sha1>
    </revision>
    <revision>
      <id>3580</id>
      <parentid>3579</parentid>
      <timestamp>2018-09-28T03:14:10Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* Fizz Buzz game in Interactive mode with Score */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="29351">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_3 Contributors of this page]
*Week 3 Playlist: https://www.youtube.com/playlist?list=PLc_j0TNIaWxOVx_z9jAM2UB3RqYNXaoEo
=List=
List is a flexible data structure used for storing a group of data separated by comma. The elements in a list need not be of the same data type.

'''Example:'''
       List_1 = [ 1, 2,3] or 
       List_1 = [&quot;coffee&quot;, &quot;Tea&quot;, &quot;Milk&quot;] or
       List_1 = [1,&quot;coffee&quot;, &quot;Tea&quot;, 3, &quot;5&quot;]

==List Creation==
&lt;pre&gt;a) A list can be created by simply putting values (separated by comma) between square brackets as given below,
       List_1 = [1,&quot;coffee&quot;, &quot;Tea&quot;, 3, &quot;5&quot;] #this creates a list by name List_1 containing following items


Or,
(b)A List can be created from scratch and elements can be added 
        List_2 = [ ]
        List_2.append(&quot;Kala&quot;)
        List_2.append(&quot;Mala&quot;)
Here we use &quot;append&quot; ,which is a function in python that enable us to append or attach an element to a list .
Thus List_2 will now hold [&quot;Kala&quot;,&quot;Mala&quot;]
&lt;/pre&gt;
[[#TOP]]

==Operations and Methods to work with List==
&lt;pre&gt;
a = [25,30,50,90,12,13]
b = [100,300,500,200,250]
&lt;/pre&gt;
&lt;hr&gt;
&lt;table border=2&gt;
  &lt;tr&gt;
    &lt;th&gt;&lt;b&gt;Method/&lt;br&gt;Operator&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Function&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Syntax&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Output&lt;/b&gt;&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;len()&lt;/td&gt;
    &lt;td&gt;Find length of a list&lt;/td&gt;
    &lt;td&gt;len(a)&lt;/td&gt;
    &lt;td&gt;6&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;max()&lt;/td&gt;
    &lt;td&gt;Find maximum element from the list&lt;/td&gt;
    &lt;td&gt;max(a)&lt;/td&gt;
    &lt;td&gt;90&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;min()&lt;/td&gt;
    &lt;td&gt;Find minimum element from the list&lt;/td&gt;
    &lt;td&gt;min(a)&lt;/td&gt;
    &lt;td&gt;12&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sum()&lt;/td&gt;
    &lt;td&gt;Returns sum of all elements of the list&lt;/td&gt;
    &lt;td&gt;sum(a)&lt;/td&gt;
    &lt;td&gt;220&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;reverse()&lt;/td&gt;
    &lt;td&gt;Reverses the original list&lt;/td&gt;
    &lt;td&gt;a.reverse()&lt;/td&gt;
    &lt;td&gt;[13, 12, 90, 50, 30, 25]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sort()&lt;/td&gt;
    &lt;td&gt;Sorts the original list in ascending order&lt;/td&gt;
    &lt;td&gt;a.sort()&lt;/td&gt;
    &lt;td&gt;[12, 13, 25, 30, 50, 90]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sorted()&lt;/td&gt;
    &lt;td&gt;Returns the new sorted list &lt;/td&gt;
    &lt;td&gt;sorted(a)&lt;/td&gt;
    &lt;td&gt;[12, 13, 25, 30, 50, 90]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;insert()&lt;/td&gt;
    &lt;td&gt;Insert at a particular index in the list, and shifts remaining elements&lt;/td&gt;
    &lt;td&gt;a.insert(3,3)&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 3, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;append()&lt;/td&gt;
    &lt;td&gt;Adds elements/object to the end of the list&lt;/td&gt;
    &lt;td&gt;a.append(5)&lt;br&gt;a.append([10,20])&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 5]&lt;br&gt;[25, 30, 50, 90, 12, 13, [10, 20]]&lt;br&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;extend()&lt;/td&gt;
    &lt;td&gt;Adds object to the end of the list as elements not as object&lt;/td&gt;
    &lt;td&gt;a.extend([10,20])&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 10, 20]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;*&amp;nbsp;&amp;nbsp;Repeatation&lt;br&gt;operator&lt;/td&gt;
    &lt;td&gt;Repeat the list for n times and returns a new list&lt;/td&gt;
    &lt;td&gt;a*2&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 25, 30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;+ Concatenation&lt;br&gt;operator&lt;/td&gt;
    &lt;td&gt;Concatenates two lists, and returns a new list&lt;/td&gt;
    &lt;td&gt;a+b&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 100, 300, 500, 200, 250]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;index()&lt;/td&gt;
    &lt;td&gt;Finds index of a particular element in the list or not&lt;/td&gt;
    &lt;td&gt;a.index(25)&lt;br&gt;a.index(0)&lt;br&gt;&lt;/td&gt;
    &lt;td&gt;0&lt;br&gt;&lt;br&gt;ValueError: 0 is not in list&lt;br&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;in operator&lt;/td&gt;
    &lt;td&gt;Finds whether a particular element is in the list or not, returns boolean&lt;/td&gt;
    &lt;td&gt;25 in a&lt;/td&gt;
    &lt;td&gt;True&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;not in operator&lt;/td&gt;
    &lt;td&gt;Checks if element is not available in list, returns boolean&lt;/td&gt;
    &lt;td&gt;25 not in a&lt;/td&gt;
    &lt;td&gt;False&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;count()&lt;/td&gt;
    &lt;td&gt;Counts the number of occurence of an element in the list&lt;/td&gt;
    &lt;td&gt;a.count(25)&lt;/td&gt;
    &lt;td&gt;1&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;remove()&lt;/td&gt;
    &lt;td&gt;Removes an element from the list&lt;/td&gt;
    &lt;td&gt;a.remove(25)&lt;/td&gt;
    &lt;td&gt; [30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;pop()&lt;/td&gt;
    &lt;td&gt;Delete and return item at index 0&lt;/td&gt;
    &lt;td&gt;a.pop(0)&lt;/td&gt;
    &lt;td&gt;25 , a will be [30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;del&lt;/td&gt;
    &lt;td&gt;Deletes item at a particular index from the list&lt;/td&gt;
    &lt;td&gt;del a[0]&lt;/td&gt;
    &lt;td&gt;[30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;all()&lt;/td&gt;
&lt;td&gt;Returns True, if all items in list are True or it is an empty list&lt;/td&gt;
&lt;td&gt;all([True, True, True])
all([])
&lt;/td&gt;
&lt;td&gt;True&lt;br&gt;
True&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;any()&lt;/td&gt;
&lt;td&gt;Returns True, if any item in list is True else return False&lt;/td&gt;
&lt;td&gt;any([True, True, True])&lt;br&gt;
any([True, False, True])&lt;br&gt;
any([])&lt;/td&gt;
&lt;td&gt;True&lt;br&gt;False&lt;br&gt;False&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;

==Printing the List==
=== Print whole list ===
A list can be printed simply or using a ''for / while'' loop 

 print(List_2)     # To print the entire list
This code will print      
 ['Kala','Mala']     

===Print element at a particular index===
&lt;pre&gt;
Using index position
    List_2[0]     # prints 'Kala' ,i.e,the value at index position 0.
    List_2[1]     # prints 'Mala'.
&lt;/pre&gt;
=== Without using index position ===
&lt;pre&gt;
for item in List_2:   # here item is a variable used to access elements in list.
       print(item)
   This code snippet prints 
    Kala
    Mala
&lt;/pre&gt;
[[#TOP]]

==Search for a particular element in list==
Elements in a list can be searched by one of the two ways:
=== using index() function===
&lt;pre&gt;
ages1 = [11,23,12,23,45]

#if element is available in the list, index() returns the index value on which, the element is present.
print(ages1.index(45))#Output: 4

#if element is not available in the list, index() returns ''ValueError''
print(ages1.index(0))#Output: ValueError:
&lt;/pre&gt;

In programming, if such error occurs, program gets terminated. It can be solved using exception handling.
e.g.
&lt;pre&gt;
ages1 = [11,23,12,23,45]

try:
    print(ages1.index(0))
except ValueError:
    print(&quot;Exception has occured&quot;)    
    print(&quot;Element is not found in the list&quot;)

&lt;/pre&gt;
&lt;pre&gt;
'''Output: 
Exception has occured
Element is not found in the list
'''&lt;/pre&gt;
[[#TOP]]

=== using 'in' operator===
''in'' operator is used to check whether a particular element is available in the list or not.e.g.

&lt;pre&gt;
ages1 = [11,23,12,23,45]
no=11

if no in ages1:
    print(&quot;no is there in the list&quot;)
else:    
    print(&quot;no is NOT there in the list&quot;)
&lt;/pre&gt;
&lt;pre&gt;
#Output: no is there in the list
&lt;/pre&gt;


'''Number is not there in the list'''
&lt;pre&gt;
ages1 = [11,23,12,23,45]
no=15

if no in ages1:
    print(&quot;no is there in the list&quot;)
else:    
    print(&quot;no is NOT there in the list&quot;)
&lt;/pre&gt;
&lt;pre&gt;
Output: no is NOT there in the list
&lt;/pre&gt;
[[#TOP]]

==Updating the List==
The lists can be updated using ''append'' or ''insert'' function.  Append adds the element to the end of the list and Insert adds the element in the specified position.
&lt;pre&gt;
   # add the element 'Sheela' to the end of the list.
   List_2.append(&quot;Sheela&quot;)    
   print (List_2) will output 
   ['Kala', 'Mala', 'Sheela']
&lt;/pre&gt;
   &lt;pre&gt;
# add the element &quot;Bala&quot; in the list at the index 1.
   List_2.insert(1,&quot;Bala&quot;)    
   print (List_2) will output 
   ['Kala', 'Bala','Mala', 'Sheela']
&lt;/pre&gt;

=== Extend the list by adding elements of other list at end using extend()===
&lt;pre&gt;
ages = [11,23,12,23,45]
ages.extend([57,58])
print(ages)
&lt;/pre&gt;

&lt;pre&gt;
#Output: [11, 23, 12, 23, 45, 57, 58]
&lt;/pre&gt;

==== Difference between ''append and extend'' ====
Difference between append and extend can be easily understood, by the following example.

&lt;pre&gt;
appendlist = [11,23,12,23,45]
appendlist.append([57,58])

extendlist= [11,23,12,23,45]
extendlist.extend([57,58])
&lt;/pre&gt;

&lt;pre&gt;
'''Output:
[11, 23, 12, 23, 45, [57, 58]]
[11, 23, 12, 23, 45, 57, 58]'''
&lt;/pre&gt;

[[#TOP]]

==Basic Operations on List==
===Frequency of Occurrence===
list.count(object) will return the number of times the object occur in the list.
  '''Example'''
    ages = [11,23,12,23,45,43,22,24,23]
    ages.count(23) will return
    3
    ages.count(100) will return
    0

===Length of the List===
len(list) will return the length of the list ie. the number of objects in the list.
  '''Example'''
&lt;pre&gt;
    ages = [11,23,12,23,45,43,22,24,23]
    len(ages) # Output: 9
&lt;/pre&gt;

To print the objects in the list either use ''for item in list'' or ''for index in range(len(list))''
&lt;pre&gt;
    for item in ages:       
        print (item)  
        (OR)
    for index in range(len(ages)) :
        print (ages[index])
&lt;/pre&gt;

===Sort the List===
list.sort() will sort the list in ascending order
  '''Example'''
    ages = [11,23,12,23,45,43,22,24,23]
    ages.sort() 
    print (ages) 
    [11, 12, 22, 23, 23, 23, 24, 43, 45]

[[#TOP]]

===Sort the List using sorted() function===
sorted(list1) will sort the list and return a new list, it doesn't modify the original list
&lt;br&gt;'''Example: Sort in ascending order'''
&lt;pre&gt;
ages = [11,23,12,23,45,43,22,24,23]
newList=sorted(ages)
print(newList)

#Output: [11, 12, 22, 23, 23, 23, 24, 43, 45]
&lt;/pre&gt;

&lt;br&gt;'''Example: Sort in descending order'''
&lt;pre&gt;
ages = [11,23,12,23,45,43,22,24,23]
newList=sorted(ages,reverse=True)
print(newList)

#Output: [45, 43, 24, 23, 23, 23, 22, 12, 11]
&lt;/pre&gt;

===Reverse the List===
list.reverse() will reverse the original list
  '''Example'''
    ages = [11, 12, 22, 23, 23, 23, 24, 43, 45]
    ages.reverse()
    print (ages)
    [45, 43, 24, 23, 23, 23, 22, 12, 11]

Both sort() and reverse() list operation will work on numeric and alphanumeric data list.

A special use of the reverse() function is to descend a list that is sorted in ascending order.

  '''Example'''
&lt;pre&gt;
ages = [11, 12, 22, 23, 23, 23, 24, 43, 45]
ages.sort()
print(ages)
ages.reverse()
print(ages)
&lt;/pre&gt;

===Slicing===
Used to retrieve an object or objects in a range as a list  
  '''Example'''

Use ''list[index]'' to retrieve the object at the given index
&lt;pre&gt;
In [1]: student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
In [2]: student[3]     #Object at index 3.  Remember index starts at 0
Out[2]: 'Geetha'      
&lt;/pre&gt;

Use ''list[start_index : end_index + 1]'' to retrieve objects from the start_index to end_index 
&lt;pre&gt;
In [3]: student[2:4]     # Objects from index 2 to 3 as List. Note the [ and ]
Out[3]: ['Vijay', 'Geetha']   
&lt;/pre&gt;

Use ''list[:]'' to retrieve objects from the starting of the list to the end of the list. 
The default start value will be the starting index of the list (i.e. 0) and the default end value
will be the length of the list 
&lt;pre&gt;
In [4]: student[:]        # prints the entire list
Out[4]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma', 'Janani']
&lt;/pre&gt;
&lt;pre&gt;
In [5]: student[:5]       # prints the objects from the start of the list upto object at index 4
Out[5]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran']
&lt;/pre&gt;
&lt;pre&gt;
In [6]: student[2:]       # prints the objects from index 2 upto the end of the list
Out[6]: ['Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma', 'Janani']
&lt;/pre&gt;

Negative index too is available in Python. It starts from last element of the list. i.e.
&lt;pre&gt;
In [7]:student[-1]        #prints last index of list
Out[7]: 'Janani'
&lt;/pre&gt;
&lt;pre&gt;
In [8]:student[-1:-8]     #prints empty list
Out[8]: []
&lt;/pre&gt;
&lt;pre&gt;
In [9]:student[-8:-1]     #prints -8th index to -1st index elements
Out[9]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma']
&lt;/pre&gt;

[[#TOP]]

===Removing Item from list ===
----

Is used to remove a specific item from the list.

'''Example:'''
 
Use list.remove(entry/value)  Or   del list[index]    Or list.pop(index)
&lt;pre&gt;
student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
student.remove(&quot;Arun&quot;)   #This will delete item &quot;Arun&quot;
         Or    
del student[0]           # This will delete item at index 0
         Or
student.pop(0)         # This will delete and return item at index 0
print(student)    
Output: &quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
&lt;/pre&gt;

[[#TOP]]

===Delete list ===
----
Used to delete complete list

'''Example'''

Use del &lt;list name&gt;
&lt;pre&gt;
student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
del student&lt;/pre&gt;

===Concatenation of two lists===
----
''+'' is the concatenation operator which is used concatenate two lists. 
&lt;pre&gt;
ages1 = [11,23,12,23,45]
ages2 = [25, 24, 43, 47]
age=ages1+ages2
print(age)
#Output: [11, 23, 12, 23, 45, 25, 24, 43, 47]
&lt;/pre&gt;

===Repeatation of a list ===
----
''*'' is the operator to repeat a particular list.
&lt;pre&gt;
ages1 = [11,23,12,23,45]
age=ages1*5 #ages1 list is repeated 5 times and stroed in ''age'' list
print(age)

#Output: [11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45]
&lt;/pre&gt;

=== all and any for List===
all() and any() are special functions to check whether all elements in iterable is ''True'' or any element is ''True''
&lt;ol&gt;
&lt;li&gt;If all elements in a list are ''True'', '''all()''' will return ''True''&lt;/li&gt;
&lt;li&gt;If iterable is ''empty'', '''all()''' will return ''True''&lt;/li&gt;
&lt;li&gt;If iterable contains at least one ''True'', '''any()''' will return ''True''&lt;/li&gt;
&lt;li&gt;If iterable is ''empty'', '''any()''' will return ''False''&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;
lsit=[True, True, True, True]
print(all(lsit))#Output: True
print(any(lsit))#Output: True

lsit1=[True, False, True, True]
print(all(lsit1))#Output: False
print(any(lsit1))#Output: True

lsit2=[False,False,False]
print(all(lsit2))#Output: False
print(any(lsit2))#Output: False

lsit3=[]
print(all(lsit3))#Output: True
print(any(lsit3))#Output: False
&lt;/pre&gt;

==Conditional Statements==
&lt;pre&gt;Conditionals are used to check the condition and change the flow of the program 
accordingly. They are realized in programming languages through if statement. The 
syntax is as follows :
&lt;pre&gt;
         if condition : 
            statement
&lt;/pre&gt;
    '''Note:''' Do not forget indentation (inserting space/tab) in the line after the
 if condition.
    
    In case you want to execute a set of statements when a condition is true and another

set of statement when the condition is false.
&lt;pre&gt;
         if condition : 
            statement 1
         else :
            statement 2
&lt;/pre&gt;

&lt;pre&gt;    
    Multiple if-else statements can be written as follows:
         if condition_1 : 
            statement 1
         elif condition_2 : # 'elif' is short for 'else if'
            statement 2
         elif condition_3 :
            statement 3
        .
        .
         else :
            final statement
&lt;/pre&gt;

[[#TOP]]

=Loops and Conditionals : Fizzbuzz=
====Loops====
Loops are used to execute a set of repetitive statements. They are realised
through 'while' and 'for' loops in programming languages. The syntax of 'for' loop is 
as follows :
&lt;pre&gt;
for LOOPVARIABLE in SEQUENCE: 
            STATEMENTS&lt;/pre&gt;

    '''e.g.''' to print all the data from a list we can write:
&lt;pre&gt;
for item in list_name:
      print(item)&lt;/pre&gt;
    OR
&lt;pre&gt;
for index in range(len(list_name)):
      print(list_name[index])
 &lt;/pre&gt;   
    The syntax for while loop is as follows :
&lt;pre&gt;    
while BOOLEANEXPRESSION: 
     STATEMENTS
     INCREMENT/DECREMENT
&lt;/pre&gt;    
    '''e.g.''' if we want to print all numbers from 1 to 10
&lt;pre&gt;
i=1
while i&lt;=10 :
    print(i,&quot; &quot;)
    i=i+1
    &lt;/pre&gt;
 
'while' loop has indefinite iteration (run-time unknown). So, there must be loop,  break statement in it.
 Whereas 'for' loop is definite in nature (i.e. known or predictable span).&lt;br&gt;

&lt;b&gt;NOTE: Python doesn't have anything like do-while loop.&lt;/b&gt;

[[#TOP]]

==Implementation==
Here, we try to demonstrate the concept of loops and conditionals through a game called Fizzbuzz. The rules are as follows :&lt;br/&gt;
[[File:fizzBuzz.gif]]

• if input number is a multiple of ’3’ print ”Fizz”
&lt;br/&gt;
• if input number is a multiple of ’5’ print ”Buzz”
&lt;br/&gt;
• if input number is a multiple of both '3' and ’5’ print ”FizzBuzz”
&lt;br/&gt;
The pseudo code is as follows :
&lt;pre&gt;
   If input no % 3 == 0 and  input no % 5 == 0 : 
       print ”Fizzbuzz”
   else if input no % 3 == 0 : 
       print ”Fizz”
   else if input no % 5 == 0 : 
       print ”Buzz”
   else :
       print the input no
&lt;/pre&gt;
The order of statements execution matters to get the desired output. The highest priority condition should be first followed by other. In fizzbuzz programming, first checking should be done for both divisibility of 3 and 5. If condition not satisfied only then it should check individually for 3 or 5. So carefully choosing the order is crucial for better programming.
Note: There is some effect of present condition statements chosen on next conditions statements. That is why in first attempt fizzbuzz programming got struck.

Example: 
&lt;pre&gt;
#Code to achieve the above requirement in python3.
i = int(input(&quot;Enter the number&quot;)) 
if i%3 == 0 and i%5 == 0: print(i,&quot;FizzBuzz&quot;)  
elif i%5 == 0: print(i,&quot;Buzz&quot;)
elif i%3 == 0: print(i,&quot;Fizz&quot;)
else: print(i)
&lt;/pre&gt;
Lets put the same into a loop for a range given by the user.
&lt;pre&gt;
def fizzbuzzgame(start,stop):
    for i in range(start,stop+1):
        if i%3 == 0 and i%5 == 0:
            print(i,&quot;FizzBuzz&quot;)
        elif i%5 == 0:
            print(i,&quot;Buzz&quot;)
        elif i%3 == 0:
            print(i,&quot;Fizz&quot;)
        else: print(i)

fizzbuzzgame(50,100)
&lt;/pre&gt;


=== Fizz Buzz game in Interactive mode with Score ===
'''By Ms. Ami Tusharkant Choksi'''
&lt;pre&gt;
def fizzbuzzgame(i):
        if i%3 == 0 and i%5 == 0:
            print(i,&quot;FizzBuzz&quot;)
            return(&quot;fzbz&quot;)
        elif i%5 == 0:
            print(i,&quot;Buzz&quot;)
            return(&quot;bz&quot;)
        elif i%3 == 0:
            print(i,&quot;Fizz&quot;)
            return(&quot;fz&quot;)
        else:
            print(i)
            return(&quot;no&quot;)

ch = 'y'
fizzbuzz=0
fizz=0
buzz=0
nothing=0
print(&quot;&quot;&quot;

 /$$$$$$$$/$$                  /$$$$$$$                            
| $$_____|__/                 | $$__  $$                           
| $$      /$$/$$$$$$$$/$$$$$$$| $$  \ $$/$$   /$$/$$$$$$$$/$$$$$$$$
| $$$$$  | $|____ /$$|____ /$$| $$$$$$$| $$  | $|____ /$$|____ /$$/
| $$__/  | $$  /$$$$/   /$$$$/| $$__  $| $$  | $$  /$$$$/   /$$$$/ 
| $$     | $$ /$$__/   /$$__/ | $$  \ $| $$  | $$ /$$__/   /$$__/  
| $$     | $$/$$$$$$$$/$$$$$$$| $$$$$$$|  $$$$$$//$$$$$$$$/$$$$$$$$
|__/     |__|________|________|_______/ \______/|________|________/
                                                                  
&quot;&quot;&quot;)   
print('''

''')

while(ch == 'y'):
    n=int(input(&quot;Enter a Number : &quot;))
    winLoose=fizzbuzzgame(n)
    if(winLoose == &quot;fz&quot;):
        fizz+=1
    elif(winLoose == &quot;bz&quot;):
        buzz+=1
    elif(winLoose == &quot;fzbz&quot;):
        fizzbuzz+=1
    ch=input(&quot;Do you want to continue playing the game : (y/n)&quot;)
    if(ch=='n'):
        print('Congratulations, your score is\n FizzBuzz:%d\nFizz:%d\nBuzz:%d' %
(fizzbuzz,fizz,buzz))
    
'''Sample Output:

 /$$$$$$$$/$$                  /$$$$$$$                            
| $$_____|__/                 | $$__  $$                           
| $$      /$$/$$$$$$$$/$$$$$$$| $$  \ $$/$$   /$$/$$$$$$$$/$$$$$$$$
| $$$$$  | $|____ /$$|____ /$$| $$$$$$$| $$  | $|____ /$$|____ /$$/
| $$__/  | $$  /$$$$/   /$$$$/| $$__  $| $$  | $$  /$$$$/   /$$$$/ 
| $$     | $$ /$$__/   /$$__/ | $$  \ $| $$  | $$ /$$__/   /$$__/  
| $$     | $$/$$$$$$$$/$$$$$$$| $$$$$$$|  $$$$$$//$$$$$$$$/$$$$$$$$
|__/     |__|________|________|_______/ \______/|________|________/
                                                                   
                                                                   
                                                                   
                                            

Enter a Number : 666
666 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 777
777 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 555
555 FizzBuzz
Do you want to continue playing the game : (y/n)y
Enter a Number : 1
1
Do you want to continue playing the game : (y/n)y
Enter a Number : 789
789 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 25
25 Buzz
Do you want to continue playing the game : (y/n)n
Congratulations, your score is

FizzBuzz:1
Fizz:3
Buzz:1

&lt;/pre&gt;

=Crowd Computing: Just Estimate=
==Wisdom of Crowds==
The concept of ’Wisdom of Crowds’ was proposed by Francis Galton. A weight-judging competition was carried on at the annual show of the West of England Fat Stock and Poultry Exhibition recently held at Plymouth, A fat ox having been selected, competitors bought stamped and numbered cards, each, on which to inscribe their respective names, addresses, and estimates of what the ox would weigh after it had been slaughtered. Those who guessed most successfully received prizes. About 8oo tickets were issued to the par- ticipants. The middlemost estimate of all the estimates recorded was 1207 lbs and the actual weight of the ox was 1198 lbs.

==Our Experiment==
The crowd had to guess the number of candies/gems in a jar. Around 75 people participated in the experiment. The actual number of gems in the jar were 375. The median of all estimates came out to be 300 and the mean of all the estimates came out to be around 396. Median underestimated and mean overestimated the actual value. So according to recent studies, Trimmed mean must be used as an aggregate measure to estimate where Wisdom of Crowds is involved.
[[File:Gemsjar.jpg|center|200px|caption]]

===Trimmed Mean===
In these kinds of experiments, 10% trimmed mean is usually followed. For calculating 10% trimmed mean, remove 10% smallest and 10% largest values from the sample. Calculate the mean of the sample obtained. In the above experiment, the trimmed mean came out to be around 351 which is very close to the actual value.

==Implementation==
Here, we try to demonstrate the concept of trimmed mean through crowd computing.
 Input a list of estimates done by the crowd .
 Sort the list.
 Remove the 10% smallest values.
 Remove the 10% largest values.
 Calculate the mean of the new list obtained .&lt;hr&gt;

==Data of Experiment==       
    Estimates =[1000,1010,1786,2000,1500,1500,100,120,150,150,150,170,175,180,197,200,200,200,200,200,200,220,220,220,220,234,250,250,250,250,250,250,250,250,250,263,270,275,275,286,300,
                300,300,300,300,300,300,300,320,350,350,350,400, 400,400,400,400,450,467,500,500,500,500,500,500,500,550,550,600,600,600,650,700,700,720]

    '''CODE:'''
&lt;pre&gt;
Estimates = [1000,1010,1786,2000,1500,1500,100,120,150,150,150,170,175,180,197,200,200,200,200,200,200,220,220,220,220,234,250,250,250,250,250,250,250,250,250,263,270,275,275,286,300,                300,300,300,300,300,300,300,320,350,350,350,400,400,400,400,400,450,467,500,500,500,500,500,500,500,550,550,600,600,600,650,700,700,720]
Estimates.sort()
offset = int(0.10*len(Estimates))
for i in range(offset):
       del Estimates[0]
       del Estimates[-1]
Sum = 0    
for i in range(len(Estimates)):
       Sum += Estimates[i]
Mean_Value = Sum/len(Estimates)
print(&quot;Mean : &quot;, int(Mean_Value))
#Output:
Mean :  351
&lt;/pre&gt;
&lt;hr&gt;
==Trimmed Mean for the above example== 
&lt;h3&gt;Using scipy library&lt;/h3&gt;
&lt;pre&gt;
#import scipy to use the method of trim_mean
from scipy import stats
trimMean = stats.trim_mean(Estimates, 0.1) # Trim 10% at both ends
print(&quot;Trimmed Mean : &quot;,trimMean)
#Output:
Trimmed Mean :  335.1020408163265
&lt;/pre&gt;

&lt;h3&gt;Without using scipy library&lt;/h3&gt;
&lt;pre&gt;
#Trimmed mean with 10%
p=10/100
#sorted data
data=[2, 4, 6, 7, 11, 21, 81, 90, 105, 121]
n = len(data)
#Remove elements from both end
rem=int(n*p)
newData = data[rem:-rem]
mean = 0
for i in newData:
    mean += i
mean = int(mean/len(newData))
print(&quot;Trimmed mean : &quot;,mean)
#Output: Trimmed mean :  40
&lt;/pre&gt;
[[#Top]]

=Jumbled_Words Permutations: Jumbled Words=
==What are Permutations ?==
A permutation also called ordering of selected number of elements from a list denoted by nPr here we are choosing all elements of a list and so n=r&lt;br&gt;
nPr=n!/(n-r)!&lt;br&gt; as n=r
nPn=n!&lt;br&gt; which gives all possible arrangement of elements present in a list.

 For example, permutations of list [1,2,3] are [1,2,3], [1,3,2], [2,1,3], [2,3,1], 
[3,1,2], and [3,2,1]. 
The number of permutations of a list of elements nPn is given by n!. For example, there are 2! = 2 x 1 = 2 permutations of [1,2], namely [1,2] and [2,1], and 3! = 3 x 2 x 1 = 6 permutations of [1,2,3], as mentioned above.&lt;br/&gt;
[[File:Permutations.jpg]]

==Implementation==
Here, we try to demonstrate the concept of permutations through jumbled words. It is a two player game in which one person presents the other person a different permutation of the word in his mind. The other person has to guess the right word. If he guesses, the he wins otherwise he loses.
 Input an list of words.
 Randomly pick a word from the list of words .
 Shuffle this word and present it to the other player.
 if word guesses by the player is same as the one picked from list of w
     player wins
 else
     player loses

ALTERNATE CODE TO GENERATE THIS GAME:
&lt;pre&gt;
import random
p1=input(&quot;enter player 1 name:&quot;)
p2=input(&quot;enter player 2 name:&quot;)
l=[&quot;rainbow&quot;,&quot;computer&quot;,&quot;robot&quot;,&quot;butter&quot;,&quot;vegetable&quot;,&quot;science&quot;,&quot;correct&quot;]
c1=c2=a1=a2=f1=f2=0
k=1
i=3
def play():
    n=random.choice(l)        ##n=chooses a word from list l
    l1=[]
    for j in n:
       l1.append(j)      ##creates a list for word in n
    for t in range(len(l1)):
       p=random.choice(l1)     ##this randomly displays letters in the list
       print(p)
       l1.remove(p)          ##to avoid the repetition of a letter
    s=input(&quot;enter the word:&quot;)
    if(s==n):
        print(&quot;correct&quot;)
        return 1
    else:
        print(&quot;not correct&quot;)
        print(&quot;answer is&quot;,n)
        return 0
def stat():
     print(&quot;player 1:&quot;)
     print(&quot;score:&quot;,c1)
     print(&quot;answered:&quot;,a1)
     print(&quot;failed:&quot;,f1)
     print(&quot;.............&quot;)
     print(&quot;player 2:&quot;)
     print(&quot;score:&quot;,c2)
     print(&quot;answered:&quot;,a2)
     print(&quot;failed&quot;,f2)
     if(c1&gt;c2):
         print(p1,&quot; won over &quot;,p2)
     elif(c1==c2):
         print(&quot;draw game&quot;)
     else:
         print(p2,&quot; won over &quot;,p1) 
while(i!=4):
      if(i==3):
         if(k==1):
             print(&quot;player 1 turn&quot;)
             print(&quot;your jumbled word is:&quot;)
             k=k+1
             m=play()
             if(m==1):      ##if guessed answer is correct,then score and no.of answered count will be increased
                c1+=1
                a1+=1
             else:
                f1+=1       ##else count of no.of failed to answered will be incremented
         else:
             print(&quot;player 2 turn&quot;)
             print(&quot;your jumbled word is:&quot;)
             k=k-1
             m=play()
             if(m==1):
                c2=c2+1
                a2=a2+1
             else:
                f2=f2+1
       if(i==2):
             print(&quot;present status&quot;)
             stat()
       i=int(input(&quot;enter your choice  1.stop 2.status 3.continue&quot;))
       if(i==1):
             stat()
             i=i+3
&lt;/pre&gt;
&lt;hr&gt;
=== JumbledWord Simple Logic, In Short ===
[[File:jumbledWord.gif]]
&lt;hr&gt;
'''Logic to create a Jumbled Word'''
&lt;hr&gt;
&lt;pre&gt;
#Get Jumbled Word and print it Horizontally
import random

def getJumbledWord(b):
    jumble=''
    l1 = [ b[i] for i in range(0, len(b)) ]
    for t in range(len(l1)):
       p=random.choice(l1)     ##this randomly gets letters from the list      
       jumble=jumble+p       
       l1.remove(p)
    return jumble

b=input(&quot;Enter a word to make it jumbled : &quot;)
print(&quot;Jumbled Word : &quot;, getJumbledWord(b))
&lt;/pre&gt;
&lt;hr&gt;
'''Another Logic to create a Jumbled Word'''
&lt;hr&gt;
&lt;pre&gt;
b=input(&quot;Enter a word to make it jumbled : &quot;)

def getJumbledWord1(b):
    l1 = [ b[i] for i in range(0, len(b)) ]
    random.shuffle(l1)
    str1 = ''.join(l1)
    return str1

print(&quot;Jumbled Word : &quot;, getJumbledWord1(b))
&lt;/pre&gt;

====Sample Output:====
&lt;pre&gt;
---- Output1 
Enter a word to make it jumbled : butter
Jumbled Word :  tbture

---- Output2 
Enter a word to make it jumbled : petriotism
Jumbled Word :  pittrosime
&lt;/pre&gt;

=Theory of Evolution=

== What is Evolution ? ==
Evolution is the change in heritable characteristics over successive generations. The theory of evolution explains that DNA, which acts as a carrier of genetic information from one generation to other, tends to change or mutate occasionally. These changes are reflected in next generations to come. This is how life has evolved on earth from bacteria to human beings.&lt;br&gt;
[[File:Evolution.png|500px]]

== Implementation ==
&lt;pre&gt;An array representing DNA is stored in a file. As genes are forms of DNA, they contain information to be transferred to forthcoming generations. Assume that information is in the form of bits (in the form of 0s and 1s). A number is picked randomly from 1 to the size of the array. A new parameter has been introduced which decides whether mutation would occur or not. If the value of this new parameter is 1 (It is picked randomly from 1 to 100), then only change is reflected down the generations, otherwise it is not. The pseudo code is as follows :
Input an array containing genetic information .
Randomly generate a number (say m) from 1 to length of the array. Randomly generate other number (say p) from 1 to 100.
 
    if p is equal to 1 then 
        if m is 1 then
          set it to 0
        else
          set it to 1
&lt;/pre&gt;
[[#TOP]]</text>
      <sha1>bqt9gavrc6of3rmyqr4v0f4fdnh7b2n</sha1>
    </revision>
    <revision>
      <id>3581</id>
      <parentid>3580</parentid>
      <timestamp>2018-09-28T03:15:17Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* Fizz Buzz game in Interactive mode with Score */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="29987">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_3 Contributors of this page]
*Week 3 Playlist: https://www.youtube.com/playlist?list=PLc_j0TNIaWxOVx_z9jAM2UB3RqYNXaoEo
=List=
List is a flexible data structure used for storing a group of data separated by comma. The elements in a list need not be of the same data type.

'''Example:'''
       List_1 = [ 1, 2,3] or 
       List_1 = [&quot;coffee&quot;, &quot;Tea&quot;, &quot;Milk&quot;] or
       List_1 = [1,&quot;coffee&quot;, &quot;Tea&quot;, 3, &quot;5&quot;]

==List Creation==
&lt;pre&gt;a) A list can be created by simply putting values (separated by comma) between square brackets as given below,
       List_1 = [1,&quot;coffee&quot;, &quot;Tea&quot;, 3, &quot;5&quot;] #this creates a list by name List_1 containing following items


Or,
(b)A List can be created from scratch and elements can be added 
        List_2 = [ ]
        List_2.append(&quot;Kala&quot;)
        List_2.append(&quot;Mala&quot;)
Here we use &quot;append&quot; ,which is a function in python that enable us to append or attach an element to a list .
Thus List_2 will now hold [&quot;Kala&quot;,&quot;Mala&quot;]
&lt;/pre&gt;
[[#TOP]]

==Operations and Methods to work with List==
&lt;pre&gt;
a = [25,30,50,90,12,13]
b = [100,300,500,200,250]
&lt;/pre&gt;
&lt;hr&gt;
&lt;table border=2&gt;
  &lt;tr&gt;
    &lt;th&gt;&lt;b&gt;Method/&lt;br&gt;Operator&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Function&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Syntax&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Output&lt;/b&gt;&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;len()&lt;/td&gt;
    &lt;td&gt;Find length of a list&lt;/td&gt;
    &lt;td&gt;len(a)&lt;/td&gt;
    &lt;td&gt;6&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;max()&lt;/td&gt;
    &lt;td&gt;Find maximum element from the list&lt;/td&gt;
    &lt;td&gt;max(a)&lt;/td&gt;
    &lt;td&gt;90&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;min()&lt;/td&gt;
    &lt;td&gt;Find minimum element from the list&lt;/td&gt;
    &lt;td&gt;min(a)&lt;/td&gt;
    &lt;td&gt;12&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sum()&lt;/td&gt;
    &lt;td&gt;Returns sum of all elements of the list&lt;/td&gt;
    &lt;td&gt;sum(a)&lt;/td&gt;
    &lt;td&gt;220&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;reverse()&lt;/td&gt;
    &lt;td&gt;Reverses the original list&lt;/td&gt;
    &lt;td&gt;a.reverse()&lt;/td&gt;
    &lt;td&gt;[13, 12, 90, 50, 30, 25]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sort()&lt;/td&gt;
    &lt;td&gt;Sorts the original list in ascending order&lt;/td&gt;
    &lt;td&gt;a.sort()&lt;/td&gt;
    &lt;td&gt;[12, 13, 25, 30, 50, 90]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sorted()&lt;/td&gt;
    &lt;td&gt;Returns the new sorted list &lt;/td&gt;
    &lt;td&gt;sorted(a)&lt;/td&gt;
    &lt;td&gt;[12, 13, 25, 30, 50, 90]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;insert()&lt;/td&gt;
    &lt;td&gt;Insert at a particular index in the list, and shifts remaining elements&lt;/td&gt;
    &lt;td&gt;a.insert(3,3)&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 3, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;append()&lt;/td&gt;
    &lt;td&gt;Adds elements/object to the end of the list&lt;/td&gt;
    &lt;td&gt;a.append(5)&lt;br&gt;a.append([10,20])&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 5]&lt;br&gt;[25, 30, 50, 90, 12, 13, [10, 20]]&lt;br&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;extend()&lt;/td&gt;
    &lt;td&gt;Adds object to the end of the list as elements not as object&lt;/td&gt;
    &lt;td&gt;a.extend([10,20])&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 10, 20]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;*&amp;nbsp;&amp;nbsp;Repeatation&lt;br&gt;operator&lt;/td&gt;
    &lt;td&gt;Repeat the list for n times and returns a new list&lt;/td&gt;
    &lt;td&gt;a*2&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 25, 30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;+ Concatenation&lt;br&gt;operator&lt;/td&gt;
    &lt;td&gt;Concatenates two lists, and returns a new list&lt;/td&gt;
    &lt;td&gt;a+b&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 100, 300, 500, 200, 250]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;index()&lt;/td&gt;
    &lt;td&gt;Finds index of a particular element in the list or not&lt;/td&gt;
    &lt;td&gt;a.index(25)&lt;br&gt;a.index(0)&lt;br&gt;&lt;/td&gt;
    &lt;td&gt;0&lt;br&gt;&lt;br&gt;ValueError: 0 is not in list&lt;br&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;in operator&lt;/td&gt;
    &lt;td&gt;Finds whether a particular element is in the list or not, returns boolean&lt;/td&gt;
    &lt;td&gt;25 in a&lt;/td&gt;
    &lt;td&gt;True&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;not in operator&lt;/td&gt;
    &lt;td&gt;Checks if element is not available in list, returns boolean&lt;/td&gt;
    &lt;td&gt;25 not in a&lt;/td&gt;
    &lt;td&gt;False&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;count()&lt;/td&gt;
    &lt;td&gt;Counts the number of occurence of an element in the list&lt;/td&gt;
    &lt;td&gt;a.count(25)&lt;/td&gt;
    &lt;td&gt;1&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;remove()&lt;/td&gt;
    &lt;td&gt;Removes an element from the list&lt;/td&gt;
    &lt;td&gt;a.remove(25)&lt;/td&gt;
    &lt;td&gt; [30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;pop()&lt;/td&gt;
    &lt;td&gt;Delete and return item at index 0&lt;/td&gt;
    &lt;td&gt;a.pop(0)&lt;/td&gt;
    &lt;td&gt;25 , a will be [30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;del&lt;/td&gt;
    &lt;td&gt;Deletes item at a particular index from the list&lt;/td&gt;
    &lt;td&gt;del a[0]&lt;/td&gt;
    &lt;td&gt;[30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;all()&lt;/td&gt;
&lt;td&gt;Returns True, if all items in list are True or it is an empty list&lt;/td&gt;
&lt;td&gt;all([True, True, True])
all([])
&lt;/td&gt;
&lt;td&gt;True&lt;br&gt;
True&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;any()&lt;/td&gt;
&lt;td&gt;Returns True, if any item in list is True else return False&lt;/td&gt;
&lt;td&gt;any([True, True, True])&lt;br&gt;
any([True, False, True])&lt;br&gt;
any([])&lt;/td&gt;
&lt;td&gt;True&lt;br&gt;False&lt;br&gt;False&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;

==Printing the List==
=== Print whole list ===
A list can be printed simply or using a ''for / while'' loop 

 print(List_2)     # To print the entire list
This code will print      
 ['Kala','Mala']     

===Print element at a particular index===
&lt;pre&gt;
Using index position
    List_2[0]     # prints 'Kala' ,i.e,the value at index position 0.
    List_2[1]     # prints 'Mala'.
&lt;/pre&gt;
=== Without using index position ===
&lt;pre&gt;
for item in List_2:   # here item is a variable used to access elements in list.
       print(item)
   This code snippet prints 
    Kala
    Mala
&lt;/pre&gt;
[[#TOP]]

==Search for a particular element in list==
Elements in a list can be searched by one of the two ways:
=== using index() function===
&lt;pre&gt;
ages1 = [11,23,12,23,45]

#if element is available in the list, index() returns the index value on which, the element is present.
print(ages1.index(45))#Output: 4

#if element is not available in the list, index() returns ''ValueError''
print(ages1.index(0))#Output: ValueError:
&lt;/pre&gt;

In programming, if such error occurs, program gets terminated. It can be solved using exception handling.
e.g.
&lt;pre&gt;
ages1 = [11,23,12,23,45]

try:
    print(ages1.index(0))
except ValueError:
    print(&quot;Exception has occured&quot;)    
    print(&quot;Element is not found in the list&quot;)

&lt;/pre&gt;
&lt;pre&gt;
'''Output: 
Exception has occured
Element is not found in the list
'''&lt;/pre&gt;
[[#TOP]]

=== using 'in' operator===
''in'' operator is used to check whether a particular element is available in the list or not.e.g.

&lt;pre&gt;
ages1 = [11,23,12,23,45]
no=11

if no in ages1:
    print(&quot;no is there in the list&quot;)
else:    
    print(&quot;no is NOT there in the list&quot;)
&lt;/pre&gt;
&lt;pre&gt;
#Output: no is there in the list
&lt;/pre&gt;


'''Number is not there in the list'''
&lt;pre&gt;
ages1 = [11,23,12,23,45]
no=15

if no in ages1:
    print(&quot;no is there in the list&quot;)
else:    
    print(&quot;no is NOT there in the list&quot;)
&lt;/pre&gt;
&lt;pre&gt;
Output: no is NOT there in the list
&lt;/pre&gt;
[[#TOP]]

==Updating the List==
The lists can be updated using ''append'' or ''insert'' function.  Append adds the element to the end of the list and Insert adds the element in the specified position.
&lt;pre&gt;
   # add the element 'Sheela' to the end of the list.
   List_2.append(&quot;Sheela&quot;)    
   print (List_2) will output 
   ['Kala', 'Mala', 'Sheela']
&lt;/pre&gt;
   &lt;pre&gt;
# add the element &quot;Bala&quot; in the list at the index 1.
   List_2.insert(1,&quot;Bala&quot;)    
   print (List_2) will output 
   ['Kala', 'Bala','Mala', 'Sheela']
&lt;/pre&gt;

=== Extend the list by adding elements of other list at end using extend()===
&lt;pre&gt;
ages = [11,23,12,23,45]
ages.extend([57,58])
print(ages)
&lt;/pre&gt;

&lt;pre&gt;
#Output: [11, 23, 12, 23, 45, 57, 58]
&lt;/pre&gt;

==== Difference between ''append and extend'' ====
Difference between append and extend can be easily understood, by the following example.

&lt;pre&gt;
appendlist = [11,23,12,23,45]
appendlist.append([57,58])

extendlist= [11,23,12,23,45]
extendlist.extend([57,58])
&lt;/pre&gt;

&lt;pre&gt;
'''Output:
[11, 23, 12, 23, 45, [57, 58]]
[11, 23, 12, 23, 45, 57, 58]'''
&lt;/pre&gt;

[[#TOP]]

==Basic Operations on List==
===Frequency of Occurrence===
list.count(object) will return the number of times the object occur in the list.
  '''Example'''
    ages = [11,23,12,23,45,43,22,24,23]
    ages.count(23) will return
    3
    ages.count(100) will return
    0

===Length of the List===
len(list) will return the length of the list ie. the number of objects in the list.
  '''Example'''
&lt;pre&gt;
    ages = [11,23,12,23,45,43,22,24,23]
    len(ages) # Output: 9
&lt;/pre&gt;

To print the objects in the list either use ''for item in list'' or ''for index in range(len(list))''
&lt;pre&gt;
    for item in ages:       
        print (item)  
        (OR)
    for index in range(len(ages)) :
        print (ages[index])
&lt;/pre&gt;

===Sort the List===
list.sort() will sort the list in ascending order
  '''Example'''
    ages = [11,23,12,23,45,43,22,24,23]
    ages.sort() 
    print (ages) 
    [11, 12, 22, 23, 23, 23, 24, 43, 45]

[[#TOP]]

===Sort the List using sorted() function===
sorted(list1) will sort the list and return a new list, it doesn't modify the original list
&lt;br&gt;'''Example: Sort in ascending order'''
&lt;pre&gt;
ages = [11,23,12,23,45,43,22,24,23]
newList=sorted(ages)
print(newList)

#Output: [11, 12, 22, 23, 23, 23, 24, 43, 45]
&lt;/pre&gt;

&lt;br&gt;'''Example: Sort in descending order'''
&lt;pre&gt;
ages = [11,23,12,23,45,43,22,24,23]
newList=sorted(ages,reverse=True)
print(newList)

#Output: [45, 43, 24, 23, 23, 23, 22, 12, 11]
&lt;/pre&gt;

===Reverse the List===
list.reverse() will reverse the original list
  '''Example'''
    ages = [11, 12, 22, 23, 23, 23, 24, 43, 45]
    ages.reverse()
    print (ages)
    [45, 43, 24, 23, 23, 23, 22, 12, 11]

Both sort() and reverse() list operation will work on numeric and alphanumeric data list.

A special use of the reverse() function is to descend a list that is sorted in ascending order.

  '''Example'''
&lt;pre&gt;
ages = [11, 12, 22, 23, 23, 23, 24, 43, 45]
ages.sort()
print(ages)
ages.reverse()
print(ages)
&lt;/pre&gt;

===Slicing===
Used to retrieve an object or objects in a range as a list  
  '''Example'''

Use ''list[index]'' to retrieve the object at the given index
&lt;pre&gt;
In [1]: student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
In [2]: student[3]     #Object at index 3.  Remember index starts at 0
Out[2]: 'Geetha'      
&lt;/pre&gt;

Use ''list[start_index : end_index + 1]'' to retrieve objects from the start_index to end_index 
&lt;pre&gt;
In [3]: student[2:4]     # Objects from index 2 to 3 as List. Note the [ and ]
Out[3]: ['Vijay', 'Geetha']   
&lt;/pre&gt;

Use ''list[:]'' to retrieve objects from the starting of the list to the end of the list. 
The default start value will be the starting index of the list (i.e. 0) and the default end value
will be the length of the list 
&lt;pre&gt;
In [4]: student[:]        # prints the entire list
Out[4]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma', 'Janani']
&lt;/pre&gt;
&lt;pre&gt;
In [5]: student[:5]       # prints the objects from the start of the list upto object at index 4
Out[5]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran']
&lt;/pre&gt;
&lt;pre&gt;
In [6]: student[2:]       # prints the objects from index 2 upto the end of the list
Out[6]: ['Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma', 'Janani']
&lt;/pre&gt;

Negative index too is available in Python. It starts from last element of the list. i.e.
&lt;pre&gt;
In [7]:student[-1]        #prints last index of list
Out[7]: 'Janani'
&lt;/pre&gt;
&lt;pre&gt;
In [8]:student[-1:-8]     #prints empty list
Out[8]: []
&lt;/pre&gt;
&lt;pre&gt;
In [9]:student[-8:-1]     #prints -8th index to -1st index elements
Out[9]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma']
&lt;/pre&gt;

[[#TOP]]

===Removing Item from list ===
----

Is used to remove a specific item from the list.

'''Example:'''
 
Use list.remove(entry/value)  Or   del list[index]    Or list.pop(index)
&lt;pre&gt;
student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
student.remove(&quot;Arun&quot;)   #This will delete item &quot;Arun&quot;
         Or    
del student[0]           # This will delete item at index 0
         Or
student.pop(0)         # This will delete and return item at index 0
print(student)    
Output: &quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
&lt;/pre&gt;

[[#TOP]]

===Delete list ===
----
Used to delete complete list

'''Example'''

Use del &lt;list name&gt;
&lt;pre&gt;
student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
del student&lt;/pre&gt;

===Concatenation of two lists===
----
''+'' is the concatenation operator which is used concatenate two lists. 
&lt;pre&gt;
ages1 = [11,23,12,23,45]
ages2 = [25, 24, 43, 47]
age=ages1+ages2
print(age)
#Output: [11, 23, 12, 23, 45, 25, 24, 43, 47]
&lt;/pre&gt;

===Repeatation of a list ===
----
''*'' is the operator to repeat a particular list.
&lt;pre&gt;
ages1 = [11,23,12,23,45]
age=ages1*5 #ages1 list is repeated 5 times and stroed in ''age'' list
print(age)

#Output: [11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45]
&lt;/pre&gt;

=== all and any for List===
all() and any() are special functions to check whether all elements in iterable is ''True'' or any element is ''True''
&lt;ol&gt;
&lt;li&gt;If all elements in a list are ''True'', '''all()''' will return ''True''&lt;/li&gt;
&lt;li&gt;If iterable is ''empty'', '''all()''' will return ''True''&lt;/li&gt;
&lt;li&gt;If iterable contains at least one ''True'', '''any()''' will return ''True''&lt;/li&gt;
&lt;li&gt;If iterable is ''empty'', '''any()''' will return ''False''&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;
lsit=[True, True, True, True]
print(all(lsit))#Output: True
print(any(lsit))#Output: True

lsit1=[True, False, True, True]
print(all(lsit1))#Output: False
print(any(lsit1))#Output: True

lsit2=[False,False,False]
print(all(lsit2))#Output: False
print(any(lsit2))#Output: False

lsit3=[]
print(all(lsit3))#Output: True
print(any(lsit3))#Output: False
&lt;/pre&gt;

==Conditional Statements==
&lt;pre&gt;Conditionals are used to check the condition and change the flow of the program 
accordingly. They are realized in programming languages through if statement. The 
syntax is as follows :
&lt;pre&gt;
         if condition : 
            statement
&lt;/pre&gt;
    '''Note:''' Do not forget indentation (inserting space/tab) in the line after the
 if condition.
    
    In case you want to execute a set of statements when a condition is true and another

set of statement when the condition is false.
&lt;pre&gt;
         if condition : 
            statement 1
         else :
            statement 2
&lt;/pre&gt;

&lt;pre&gt;    
    Multiple if-else statements can be written as follows:
         if condition_1 : 
            statement 1
         elif condition_2 : # 'elif' is short for 'else if'
            statement 2
         elif condition_3 :
            statement 3
        .
        .
         else :
            final statement
&lt;/pre&gt;

[[#TOP]]

=Loops and Conditionals : Fizzbuzz=
====Loops====
Loops are used to execute a set of repetitive statements. They are realised
through 'while' and 'for' loops in programming languages. The syntax of 'for' loop is 
as follows :
&lt;pre&gt;
for LOOPVARIABLE in SEQUENCE: 
            STATEMENTS&lt;/pre&gt;

    '''e.g.''' to print all the data from a list we can write:
&lt;pre&gt;
for item in list_name:
      print(item)&lt;/pre&gt;
    OR
&lt;pre&gt;
for index in range(len(list_name)):
      print(list_name[index])
 &lt;/pre&gt;   
    The syntax for while loop is as follows :
&lt;pre&gt;    
while BOOLEANEXPRESSION: 
     STATEMENTS
     INCREMENT/DECREMENT
&lt;/pre&gt;    
    '''e.g.''' if we want to print all numbers from 1 to 10
&lt;pre&gt;
i=1
while i&lt;=10 :
    print(i,&quot; &quot;)
    i=i+1
    &lt;/pre&gt;
 
'while' loop has indefinite iteration (run-time unknown). So, there must be loop,  break statement in it.
 Whereas 'for' loop is definite in nature (i.e. known or predictable span).&lt;br&gt;

&lt;b&gt;NOTE: Python doesn't have anything like do-while loop.&lt;/b&gt;

[[#TOP]]

==Implementation==
Here, we try to demonstrate the concept of loops and conditionals through a game called Fizzbuzz. The rules are as follows :&lt;br/&gt;
[[File:fizzBuzz.gif]]

• if input number is a multiple of ’3’ print ”Fizz”
&lt;br/&gt;
• if input number is a multiple of ’5’ print ”Buzz”
&lt;br/&gt;
• if input number is a multiple of both '3' and ’5’ print ”FizzBuzz”
&lt;br/&gt;
The pseudo code is as follows :
&lt;pre&gt;
   If input no % 3 == 0 and  input no % 5 == 0 : 
       print ”Fizzbuzz”
   else if input no % 3 == 0 : 
       print ”Fizz”
   else if input no % 5 == 0 : 
       print ”Buzz”
   else :
       print the input no
&lt;/pre&gt;
The order of statements execution matters to get the desired output. The highest priority condition should be first followed by other. In fizzbuzz programming, first checking should be done for both divisibility of 3 and 5. If condition not satisfied only then it should check individually for 3 or 5. So carefully choosing the order is crucial for better programming.
Note: There is some effect of present condition statements chosen on next conditions statements. That is why in first attempt fizzbuzz programming got struck.

Example: 
&lt;pre&gt;
#Code to achieve the above requirement in python3.
i = int(input(&quot;Enter the number&quot;)) 
if i%3 == 0 and i%5 == 0: print(i,&quot;FizzBuzz&quot;)  
elif i%5 == 0: print(i,&quot;Buzz&quot;)
elif i%3 == 0: print(i,&quot;Fizz&quot;)
else: print(i)
&lt;/pre&gt;
Lets put the same into a loop for a range given by the user.
&lt;pre&gt;
def fizzbuzzgame(start,stop):
    for i in range(start,stop+1):
        if i%3 == 0 and i%5 == 0:
            print(i,&quot;FizzBuzz&quot;)
        elif i%5 == 0:
            print(i,&quot;Buzz&quot;)
        elif i%3 == 0:
            print(i,&quot;Fizz&quot;)
        else: print(i)

fizzbuzzgame(50,100)
&lt;/pre&gt;


=== Fizz Buzz game in Interactive mode with Score ===
'''By Ms. Ami Tusharkant Choksi'''
&lt;pre&gt;
def fizzbuzzgame(i):
        if i%3 == 0 and i%5 == 0:
            print(i,&quot;FizzBuzz&quot;)
            return(&quot;fzbz&quot;)
        elif i%5 == 0:
            print(i,&quot;Buzz&quot;)
            return(&quot;bz&quot;)
        elif i%3 == 0:
            print(i,&quot;Fizz&quot;)
            return(&quot;fz&quot;)
        else:
            print(i)
            return(&quot;no&quot;)

ch = 'y'
fizzbuzz=0
fizz=0
buzz=0
nothing=0
print(&quot;&quot;&quot;

 /$$$$$$$$/$$                  /$$$$$$$                            
| $$_____|__/                 | $$__  $$                           
| $$      /$$/$$$$$$$$/$$$$$$$| $$  \ $$/$$   /$$/$$$$$$$$/$$$$$$$$
| $$$$$  | $|____ /$$|____ /$$| $$$$$$$| $$  | $|____ /$$|____ /$$/
| $$__/  | $$  /$$$$/   /$$$$/| $$__  $| $$  | $$  /$$$$/   /$$$$/ 
| $$     | $$ /$$__/   /$$__/ | $$  \ $| $$  | $$ /$$__/   /$$__/  
| $$     | $$/$$$$$$$$/$$$$$$$| $$$$$$$|  $$$$$$//$$$$$$$$/$$$$$$$$
|__/     |__|________|________|_______/ \______/|________|________/
                                                                  
&quot;&quot;&quot;)   
print('''

  /$$$$$$                                
 /$$__  $$                               
| $$  \__/ /$$$$$$ /$$$$$$/$$$$  /$$$$$$ 
| $$ /$$$$|____  $| $$_  $$_  $$/$$__  $$
| $$|_  $$ /$$$$$$| $$ \ $$ \ $| $$$$$$$$
| $$  \ $$/$$__  $| $$ | $$ | $| $$_____/
|  $$$$$$|  $$$$$$| $$ | $$ | $|  $$$$$$$
 \______/ \_______|__/ |__/ |__/\_______/
                                     
''')

while(ch == 'y'):
    n=int(input(&quot;Enter a Number : &quot;))
    winLoose=fizzbuzzgame(n)
    if(winLoose == &quot;fz&quot;):
        fizz+=1
    elif(winLoose == &quot;bz&quot;):
        buzz+=1
    elif(winLoose == &quot;fzbz&quot;):
        fizzbuzz+=1
    ch=input(&quot;Do you want to continue playing the game : (y/n)&quot;)
    if(ch=='n'):
        print('Congratulations, your score is\n FizzBuzz:%d\nFizz:%d\nBuzz:%d' %
(fizzbuzz,fizz,buzz))
    
'''Sample Output:

 /$$$$$$$$/$$                  /$$$$$$$                            
| $$_____|__/                 | $$__  $$                           
| $$      /$$/$$$$$$$$/$$$$$$$| $$  \ $$/$$   /$$/$$$$$$$$/$$$$$$$$
| $$$$$  | $|____ /$$|____ /$$| $$$$$$$| $$  | $|____ /$$|____ /$$/
| $$__/  | $$  /$$$$/   /$$$$/| $$__  $| $$  | $$  /$$$$/   /$$$$/ 
| $$     | $$ /$$__/   /$$__/ | $$  \ $| $$  | $$ /$$__/   /$$__/  
| $$     | $$/$$$$$$$$/$$$$$$$| $$$$$$$|  $$$$$$//$$$$$$$$/$$$$$$$$
|__/     |__|________|________|_______/ \______/|________|________/
                                                                                                                                   

  /$$$$$$                                
 /$$__  $$                               
| $$  \__/ /$$$$$$ /$$$$$$/$$$$  /$$$$$$ 
| $$ /$$$$|____  $| $$_  $$_  $$/$$__  $$
| $$|_  $$ /$$$$$$| $$ \ $$ \ $| $$$$$$$$
| $$  \ $$/$$__  $| $$ | $$ | $| $$_____/
|  $$$$$$|  $$$$$$| $$ | $$ | $|  $$$$$$$
 \______/ \_______|__/ |__/ |__/\_______/
                                         

Enter a Number : 666
666 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 777
777 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 555
555 FizzBuzz
Do you want to continue playing the game : (y/n)y
Enter a Number : 1
1
Do you want to continue playing the game : (y/n)y
Enter a Number : 789
789 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 25
25 Buzz
Do you want to continue playing the game : (y/n)n
Congratulations, your score is

FizzBuzz:1
Fizz:3
Buzz:1

&lt;/pre&gt;

=Crowd Computing: Just Estimate=
==Wisdom of Crowds==
The concept of ’Wisdom of Crowds’ was proposed by Francis Galton. A weight-judging competition was carried on at the annual show of the West of England Fat Stock and Poultry Exhibition recently held at Plymouth, A fat ox having been selected, competitors bought stamped and numbered cards, each, on which to inscribe their respective names, addresses, and estimates of what the ox would weigh after it had been slaughtered. Those who guessed most successfully received prizes. About 8oo tickets were issued to the par- ticipants. The middlemost estimate of all the estimates recorded was 1207 lbs and the actual weight of the ox was 1198 lbs.

==Our Experiment==
The crowd had to guess the number of candies/gems in a jar. Around 75 people participated in the experiment. The actual number of gems in the jar were 375. The median of all estimates came out to be 300 and the mean of all the estimates came out to be around 396. Median underestimated and mean overestimated the actual value. So according to recent studies, Trimmed mean must be used as an aggregate measure to estimate where Wisdom of Crowds is involved.
[[File:Gemsjar.jpg|center|200px|caption]]

===Trimmed Mean===
In these kinds of experiments, 10% trimmed mean is usually followed. For calculating 10% trimmed mean, remove 10% smallest and 10% largest values from the sample. Calculate the mean of the sample obtained. In the above experiment, the trimmed mean came out to be around 351 which is very close to the actual value.

==Implementation==
Here, we try to demonstrate the concept of trimmed mean through crowd computing.
 Input a list of estimates done by the crowd .
 Sort the list.
 Remove the 10% smallest values.
 Remove the 10% largest values.
 Calculate the mean of the new list obtained .&lt;hr&gt;

==Data of Experiment==       
    Estimates =[1000,1010,1786,2000,1500,1500,100,120,150,150,150,170,175,180,197,200,200,200,200,200,200,220,220,220,220,234,250,250,250,250,250,250,250,250,250,263,270,275,275,286,300,
                300,300,300,300,300,300,300,320,350,350,350,400, 400,400,400,400,450,467,500,500,500,500,500,500,500,550,550,600,600,600,650,700,700,720]

    '''CODE:'''
&lt;pre&gt;
Estimates = [1000,1010,1786,2000,1500,1500,100,120,150,150,150,170,175,180,197,200,200,200,200,200,200,220,220,220,220,234,250,250,250,250,250,250,250,250,250,263,270,275,275,286,300,                300,300,300,300,300,300,300,320,350,350,350,400,400,400,400,400,450,467,500,500,500,500,500,500,500,550,550,600,600,600,650,700,700,720]
Estimates.sort()
offset = int(0.10*len(Estimates))
for i in range(offset):
       del Estimates[0]
       del Estimates[-1]
Sum = 0    
for i in range(len(Estimates)):
       Sum += Estimates[i]
Mean_Value = Sum/len(Estimates)
print(&quot;Mean : &quot;, int(Mean_Value))
#Output:
Mean :  351
&lt;/pre&gt;
&lt;hr&gt;
==Trimmed Mean for the above example== 
&lt;h3&gt;Using scipy library&lt;/h3&gt;
&lt;pre&gt;
#import scipy to use the method of trim_mean
from scipy import stats
trimMean = stats.trim_mean(Estimates, 0.1) # Trim 10% at both ends
print(&quot;Trimmed Mean : &quot;,trimMean)
#Output:
Trimmed Mean :  335.1020408163265
&lt;/pre&gt;

&lt;h3&gt;Without using scipy library&lt;/h3&gt;
&lt;pre&gt;
#Trimmed mean with 10%
p=10/100
#sorted data
data=[2, 4, 6, 7, 11, 21, 81, 90, 105, 121]
n = len(data)
#Remove elements from both end
rem=int(n*p)
newData = data[rem:-rem]
mean = 0
for i in newData:
    mean += i
mean = int(mean/len(newData))
print(&quot;Trimmed mean : &quot;,mean)
#Output: Trimmed mean :  40
&lt;/pre&gt;
[[#Top]]

=Jumbled_Words Permutations: Jumbled Words=
==What are Permutations ?==
A permutation also called ordering of selected number of elements from a list denoted by nPr here we are choosing all elements of a list and so n=r&lt;br&gt;
nPr=n!/(n-r)!&lt;br&gt; as n=r
nPn=n!&lt;br&gt; which gives all possible arrangement of elements present in a list.

 For example, permutations of list [1,2,3] are [1,2,3], [1,3,2], [2,1,3], [2,3,1], 
[3,1,2], and [3,2,1]. 
The number of permutations of a list of elements nPn is given by n!. For example, there are 2! = 2 x 1 = 2 permutations of [1,2], namely [1,2] and [2,1], and 3! = 3 x 2 x 1 = 6 permutations of [1,2,3], as mentioned above.&lt;br/&gt;
[[File:Permutations.jpg]]

==Implementation==
Here, we try to demonstrate the concept of permutations through jumbled words. It is a two player game in which one person presents the other person a different permutation of the word in his mind. The other person has to guess the right word. If he guesses, the he wins otherwise he loses.
 Input an list of words.
 Randomly pick a word from the list of words .
 Shuffle this word and present it to the other player.
 if word guesses by the player is same as the one picked from list of w
     player wins
 else
     player loses

ALTERNATE CODE TO GENERATE THIS GAME:
&lt;pre&gt;
import random
p1=input(&quot;enter player 1 name:&quot;)
p2=input(&quot;enter player 2 name:&quot;)
l=[&quot;rainbow&quot;,&quot;computer&quot;,&quot;robot&quot;,&quot;butter&quot;,&quot;vegetable&quot;,&quot;science&quot;,&quot;correct&quot;]
c1=c2=a1=a2=f1=f2=0
k=1
i=3
def play():
    n=random.choice(l)        ##n=chooses a word from list l
    l1=[]
    for j in n:
       l1.append(j)      ##creates a list for word in n
    for t in range(len(l1)):
       p=random.choice(l1)     ##this randomly displays letters in the list
       print(p)
       l1.remove(p)          ##to avoid the repetition of a letter
    s=input(&quot;enter the word:&quot;)
    if(s==n):
        print(&quot;correct&quot;)
        return 1
    else:
        print(&quot;not correct&quot;)
        print(&quot;answer is&quot;,n)
        return 0
def stat():
     print(&quot;player 1:&quot;)
     print(&quot;score:&quot;,c1)
     print(&quot;answered:&quot;,a1)
     print(&quot;failed:&quot;,f1)
     print(&quot;.............&quot;)
     print(&quot;player 2:&quot;)
     print(&quot;score:&quot;,c2)
     print(&quot;answered:&quot;,a2)
     print(&quot;failed&quot;,f2)
     if(c1&gt;c2):
         print(p1,&quot; won over &quot;,p2)
     elif(c1==c2):
         print(&quot;draw game&quot;)
     else:
         print(p2,&quot; won over &quot;,p1) 
while(i!=4):
      if(i==3):
         if(k==1):
             print(&quot;player 1 turn&quot;)
             print(&quot;your jumbled word is:&quot;)
             k=k+1
             m=play()
             if(m==1):      ##if guessed answer is correct,then score and no.of answered count will be increased
                c1+=1
                a1+=1
             else:
                f1+=1       ##else count of no.of failed to answered will be incremented
         else:
             print(&quot;player 2 turn&quot;)
             print(&quot;your jumbled word is:&quot;)
             k=k-1
             m=play()
             if(m==1):
                c2=c2+1
                a2=a2+1
             else:
                f2=f2+1
       if(i==2):
             print(&quot;present status&quot;)
             stat()
       i=int(input(&quot;enter your choice  1.stop 2.status 3.continue&quot;))
       if(i==1):
             stat()
             i=i+3
&lt;/pre&gt;
&lt;hr&gt;
=== JumbledWord Simple Logic, In Short ===
[[File:jumbledWord.gif]]
&lt;hr&gt;
'''Logic to create a Jumbled Word'''
&lt;hr&gt;
&lt;pre&gt;
#Get Jumbled Word and print it Horizontally
import random

def getJumbledWord(b):
    jumble=''
    l1 = [ b[i] for i in range(0, len(b)) ]
    for t in range(len(l1)):
       p=random.choice(l1)     ##this randomly gets letters from the list      
       jumble=jumble+p       
       l1.remove(p)
    return jumble

b=input(&quot;Enter a word to make it jumbled : &quot;)
print(&quot;Jumbled Word : &quot;, getJumbledWord(b))
&lt;/pre&gt;
&lt;hr&gt;
'''Another Logic to create a Jumbled Word'''
&lt;hr&gt;
&lt;pre&gt;
b=input(&quot;Enter a word to make it jumbled : &quot;)

def getJumbledWord1(b):
    l1 = [ b[i] for i in range(0, len(b)) ]
    random.shuffle(l1)
    str1 = ''.join(l1)
    return str1

print(&quot;Jumbled Word : &quot;, getJumbledWord1(b))
&lt;/pre&gt;

====Sample Output:====
&lt;pre&gt;
---- Output1 
Enter a word to make it jumbled : butter
Jumbled Word :  tbture

---- Output2 
Enter a word to make it jumbled : petriotism
Jumbled Word :  pittrosime
&lt;/pre&gt;

=Theory of Evolution=

== What is Evolution ? ==
Evolution is the change in heritable characteristics over successive generations. The theory of evolution explains that DNA, which acts as a carrier of genetic information from one generation to other, tends to change or mutate occasionally. These changes are reflected in next generations to come. This is how life has evolved on earth from bacteria to human beings.&lt;br&gt;
[[File:Evolution.png|500px]]

== Implementation ==
&lt;pre&gt;An array representing DNA is stored in a file. As genes are forms of DNA, they contain information to be transferred to forthcoming generations. Assume that information is in the form of bits (in the form of 0s and 1s). A number is picked randomly from 1 to the size of the array. A new parameter has been introduced which decides whether mutation would occur or not. If the value of this new parameter is 1 (It is picked randomly from 1 to 100), then only change is reflected down the generations, otherwise it is not. The pseudo code is as follows :
Input an array containing genetic information .
Randomly generate a number (say m) from 1 to length of the array. Randomly generate other number (say p) from 1 to 100.
 
    if p is equal to 1 then 
        if m is 1 then
          set it to 0
        else
          set it to 1
&lt;/pre&gt;
[[#TOP]]</text>
      <sha1>g4ow4lkrza59dq14ouopdddov0l1tl3</sha1>
    </revision>
    <revision>
      <id>3582</id>
      <parentid>3581</parentid>
      <timestamp>2018-09-28T03:18:09Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* Implementation */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="29989">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_3 Contributors of this page]
*Week 3 Playlist: https://www.youtube.com/playlist?list=PLc_j0TNIaWxOVx_z9jAM2UB3RqYNXaoEo
=List=
List is a flexible data structure used for storing a group of data separated by comma. The elements in a list need not be of the same data type.

'''Example:'''
       List_1 = [ 1, 2,3] or 
       List_1 = [&quot;coffee&quot;, &quot;Tea&quot;, &quot;Milk&quot;] or
       List_1 = [1,&quot;coffee&quot;, &quot;Tea&quot;, 3, &quot;5&quot;]

==List Creation==
&lt;pre&gt;a) A list can be created by simply putting values (separated by comma) between square brackets as given below,
       List_1 = [1,&quot;coffee&quot;, &quot;Tea&quot;, 3, &quot;5&quot;] #this creates a list by name List_1 containing following items


Or,
(b)A List can be created from scratch and elements can be added 
        List_2 = [ ]
        List_2.append(&quot;Kala&quot;)
        List_2.append(&quot;Mala&quot;)
Here we use &quot;append&quot; ,which is a function in python that enable us to append or attach an element to a list .
Thus List_2 will now hold [&quot;Kala&quot;,&quot;Mala&quot;]
&lt;/pre&gt;
[[#TOP]]

==Operations and Methods to work with List==
&lt;pre&gt;
a = [25,30,50,90,12,13]
b = [100,300,500,200,250]
&lt;/pre&gt;
&lt;hr&gt;
&lt;table border=2&gt;
  &lt;tr&gt;
    &lt;th&gt;&lt;b&gt;Method/&lt;br&gt;Operator&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Function&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Syntax&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Output&lt;/b&gt;&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;len()&lt;/td&gt;
    &lt;td&gt;Find length of a list&lt;/td&gt;
    &lt;td&gt;len(a)&lt;/td&gt;
    &lt;td&gt;6&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;max()&lt;/td&gt;
    &lt;td&gt;Find maximum element from the list&lt;/td&gt;
    &lt;td&gt;max(a)&lt;/td&gt;
    &lt;td&gt;90&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;min()&lt;/td&gt;
    &lt;td&gt;Find minimum element from the list&lt;/td&gt;
    &lt;td&gt;min(a)&lt;/td&gt;
    &lt;td&gt;12&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sum()&lt;/td&gt;
    &lt;td&gt;Returns sum of all elements of the list&lt;/td&gt;
    &lt;td&gt;sum(a)&lt;/td&gt;
    &lt;td&gt;220&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;reverse()&lt;/td&gt;
    &lt;td&gt;Reverses the original list&lt;/td&gt;
    &lt;td&gt;a.reverse()&lt;/td&gt;
    &lt;td&gt;[13, 12, 90, 50, 30, 25]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sort()&lt;/td&gt;
    &lt;td&gt;Sorts the original list in ascending order&lt;/td&gt;
    &lt;td&gt;a.sort()&lt;/td&gt;
    &lt;td&gt;[12, 13, 25, 30, 50, 90]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sorted()&lt;/td&gt;
    &lt;td&gt;Returns the new sorted list &lt;/td&gt;
    &lt;td&gt;sorted(a)&lt;/td&gt;
    &lt;td&gt;[12, 13, 25, 30, 50, 90]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;insert()&lt;/td&gt;
    &lt;td&gt;Insert at a particular index in the list, and shifts remaining elements&lt;/td&gt;
    &lt;td&gt;a.insert(3,3)&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 3, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;append()&lt;/td&gt;
    &lt;td&gt;Adds elements/object to the end of the list&lt;/td&gt;
    &lt;td&gt;a.append(5)&lt;br&gt;a.append([10,20])&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 5]&lt;br&gt;[25, 30, 50, 90, 12, 13, [10, 20]]&lt;br&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;extend()&lt;/td&gt;
    &lt;td&gt;Adds object to the end of the list as elements not as object&lt;/td&gt;
    &lt;td&gt;a.extend([10,20])&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 10, 20]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;*&amp;nbsp;&amp;nbsp;Repeatation&lt;br&gt;operator&lt;/td&gt;
    &lt;td&gt;Repeat the list for n times and returns a new list&lt;/td&gt;
    &lt;td&gt;a*2&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 25, 30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;+ Concatenation&lt;br&gt;operator&lt;/td&gt;
    &lt;td&gt;Concatenates two lists, and returns a new list&lt;/td&gt;
    &lt;td&gt;a+b&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 100, 300, 500, 200, 250]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;index()&lt;/td&gt;
    &lt;td&gt;Finds index of a particular element in the list or not&lt;/td&gt;
    &lt;td&gt;a.index(25)&lt;br&gt;a.index(0)&lt;br&gt;&lt;/td&gt;
    &lt;td&gt;0&lt;br&gt;&lt;br&gt;ValueError: 0 is not in list&lt;br&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;in operator&lt;/td&gt;
    &lt;td&gt;Finds whether a particular element is in the list or not, returns boolean&lt;/td&gt;
    &lt;td&gt;25 in a&lt;/td&gt;
    &lt;td&gt;True&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;not in operator&lt;/td&gt;
    &lt;td&gt;Checks if element is not available in list, returns boolean&lt;/td&gt;
    &lt;td&gt;25 not in a&lt;/td&gt;
    &lt;td&gt;False&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;count()&lt;/td&gt;
    &lt;td&gt;Counts the number of occurence of an element in the list&lt;/td&gt;
    &lt;td&gt;a.count(25)&lt;/td&gt;
    &lt;td&gt;1&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;remove()&lt;/td&gt;
    &lt;td&gt;Removes an element from the list&lt;/td&gt;
    &lt;td&gt;a.remove(25)&lt;/td&gt;
    &lt;td&gt; [30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;pop()&lt;/td&gt;
    &lt;td&gt;Delete and return item at index 0&lt;/td&gt;
    &lt;td&gt;a.pop(0)&lt;/td&gt;
    &lt;td&gt;25 , a will be [30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;del&lt;/td&gt;
    &lt;td&gt;Deletes item at a particular index from the list&lt;/td&gt;
    &lt;td&gt;del a[0]&lt;/td&gt;
    &lt;td&gt;[30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;all()&lt;/td&gt;
&lt;td&gt;Returns True, if all items in list are True or it is an empty list&lt;/td&gt;
&lt;td&gt;all([True, True, True])
all([])
&lt;/td&gt;
&lt;td&gt;True&lt;br&gt;
True&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;any()&lt;/td&gt;
&lt;td&gt;Returns True, if any item in list is True else return False&lt;/td&gt;
&lt;td&gt;any([True, True, True])&lt;br&gt;
any([True, False, True])&lt;br&gt;
any([])&lt;/td&gt;
&lt;td&gt;True&lt;br&gt;False&lt;br&gt;False&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;

==Printing the List==
=== Print whole list ===
A list can be printed simply or using a ''for / while'' loop 

 print(List_2)     # To print the entire list
This code will print      
 ['Kala','Mala']     

===Print element at a particular index===
&lt;pre&gt;
Using index position
    List_2[0]     # prints 'Kala' ,i.e,the value at index position 0.
    List_2[1]     # prints 'Mala'.
&lt;/pre&gt;
=== Without using index position ===
&lt;pre&gt;
for item in List_2:   # here item is a variable used to access elements in list.
       print(item)
   This code snippet prints 
    Kala
    Mala
&lt;/pre&gt;
[[#TOP]]

==Search for a particular element in list==
Elements in a list can be searched by one of the two ways:
=== using index() function===
&lt;pre&gt;
ages1 = [11,23,12,23,45]

#if element is available in the list, index() returns the index value on which, the element is present.
print(ages1.index(45))#Output: 4

#if element is not available in the list, index() returns ''ValueError''
print(ages1.index(0))#Output: ValueError:
&lt;/pre&gt;

In programming, if such error occurs, program gets terminated. It can be solved using exception handling.
e.g.
&lt;pre&gt;
ages1 = [11,23,12,23,45]

try:
    print(ages1.index(0))
except ValueError:
    print(&quot;Exception has occured&quot;)    
    print(&quot;Element is not found in the list&quot;)

&lt;/pre&gt;
&lt;pre&gt;
'''Output: 
Exception has occured
Element is not found in the list
'''&lt;/pre&gt;
[[#TOP]]

=== using 'in' operator===
''in'' operator is used to check whether a particular element is available in the list or not.e.g.

&lt;pre&gt;
ages1 = [11,23,12,23,45]
no=11

if no in ages1:
    print(&quot;no is there in the list&quot;)
else:    
    print(&quot;no is NOT there in the list&quot;)
&lt;/pre&gt;
&lt;pre&gt;
#Output: no is there in the list
&lt;/pre&gt;


'''Number is not there in the list'''
&lt;pre&gt;
ages1 = [11,23,12,23,45]
no=15

if no in ages1:
    print(&quot;no is there in the list&quot;)
else:    
    print(&quot;no is NOT there in the list&quot;)
&lt;/pre&gt;
&lt;pre&gt;
Output: no is NOT there in the list
&lt;/pre&gt;
[[#TOP]]

==Updating the List==
The lists can be updated using ''append'' or ''insert'' function.  Append adds the element to the end of the list and Insert adds the element in the specified position.
&lt;pre&gt;
   # add the element 'Sheela' to the end of the list.
   List_2.append(&quot;Sheela&quot;)    
   print (List_2) will output 
   ['Kala', 'Mala', 'Sheela']
&lt;/pre&gt;
   &lt;pre&gt;
# add the element &quot;Bala&quot; in the list at the index 1.
   List_2.insert(1,&quot;Bala&quot;)    
   print (List_2) will output 
   ['Kala', 'Bala','Mala', 'Sheela']
&lt;/pre&gt;

=== Extend the list by adding elements of other list at end using extend()===
&lt;pre&gt;
ages = [11,23,12,23,45]
ages.extend([57,58])
print(ages)
&lt;/pre&gt;

&lt;pre&gt;
#Output: [11, 23, 12, 23, 45, 57, 58]
&lt;/pre&gt;

==== Difference between ''append and extend'' ====
Difference between append and extend can be easily understood, by the following example.

&lt;pre&gt;
appendlist = [11,23,12,23,45]
appendlist.append([57,58])

extendlist= [11,23,12,23,45]
extendlist.extend([57,58])
&lt;/pre&gt;

&lt;pre&gt;
'''Output:
[11, 23, 12, 23, 45, [57, 58]]
[11, 23, 12, 23, 45, 57, 58]'''
&lt;/pre&gt;

[[#TOP]]

==Basic Operations on List==
===Frequency of Occurrence===
list.count(object) will return the number of times the object occur in the list.
  '''Example'''
    ages = [11,23,12,23,45,43,22,24,23]
    ages.count(23) will return
    3
    ages.count(100) will return
    0

===Length of the List===
len(list) will return the length of the list ie. the number of objects in the list.
  '''Example'''
&lt;pre&gt;
    ages = [11,23,12,23,45,43,22,24,23]
    len(ages) # Output: 9
&lt;/pre&gt;

To print the objects in the list either use ''for item in list'' or ''for index in range(len(list))''
&lt;pre&gt;
    for item in ages:       
        print (item)  
        (OR)
    for index in range(len(ages)) :
        print (ages[index])
&lt;/pre&gt;

===Sort the List===
list.sort() will sort the list in ascending order
  '''Example'''
    ages = [11,23,12,23,45,43,22,24,23]
    ages.sort() 
    print (ages) 
    [11, 12, 22, 23, 23, 23, 24, 43, 45]

[[#TOP]]

===Sort the List using sorted() function===
sorted(list1) will sort the list and return a new list, it doesn't modify the original list
&lt;br&gt;'''Example: Sort in ascending order'''
&lt;pre&gt;
ages = [11,23,12,23,45,43,22,24,23]
newList=sorted(ages)
print(newList)

#Output: [11, 12, 22, 23, 23, 23, 24, 43, 45]
&lt;/pre&gt;

&lt;br&gt;'''Example: Sort in descending order'''
&lt;pre&gt;
ages = [11,23,12,23,45,43,22,24,23]
newList=sorted(ages,reverse=True)
print(newList)

#Output: [45, 43, 24, 23, 23, 23, 22, 12, 11]
&lt;/pre&gt;

===Reverse the List===
list.reverse() will reverse the original list
  '''Example'''
    ages = [11, 12, 22, 23, 23, 23, 24, 43, 45]
    ages.reverse()
    print (ages)
    [45, 43, 24, 23, 23, 23, 22, 12, 11]

Both sort() and reverse() list operation will work on numeric and alphanumeric data list.

A special use of the reverse() function is to descend a list that is sorted in ascending order.

  '''Example'''
&lt;pre&gt;
ages = [11, 12, 22, 23, 23, 23, 24, 43, 45]
ages.sort()
print(ages)
ages.reverse()
print(ages)
&lt;/pre&gt;

===Slicing===
Used to retrieve an object or objects in a range as a list  
  '''Example'''

Use ''list[index]'' to retrieve the object at the given index
&lt;pre&gt;
In [1]: student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
In [2]: student[3]     #Object at index 3.  Remember index starts at 0
Out[2]: 'Geetha'      
&lt;/pre&gt;

Use ''list[start_index : end_index + 1]'' to retrieve objects from the start_index to end_index 
&lt;pre&gt;
In [3]: student[2:4]     # Objects from index 2 to 3 as List. Note the [ and ]
Out[3]: ['Vijay', 'Geetha']   
&lt;/pre&gt;

Use ''list[:]'' to retrieve objects from the starting of the list to the end of the list. 
The default start value will be the starting index of the list (i.e. 0) and the default end value
will be the length of the list 
&lt;pre&gt;
In [4]: student[:]        # prints the entire list
Out[4]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma', 'Janani']
&lt;/pre&gt;
&lt;pre&gt;
In [5]: student[:5]       # prints the objects from the start of the list upto object at index 4
Out[5]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran']
&lt;/pre&gt;
&lt;pre&gt;
In [6]: student[2:]       # prints the objects from index 2 upto the end of the list
Out[6]: ['Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma', 'Janani']
&lt;/pre&gt;

Negative index too is available in Python. It starts from last element of the list. i.e.
&lt;pre&gt;
In [7]:student[-1]        #prints last index of list
Out[7]: 'Janani'
&lt;/pre&gt;
&lt;pre&gt;
In [8]:student[-1:-8]     #prints empty list
Out[8]: []
&lt;/pre&gt;
&lt;pre&gt;
In [9]:student[-8:-1]     #prints -8th index to -1st index elements
Out[9]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma']
&lt;/pre&gt;

[[#TOP]]

===Removing Item from list ===
----

Is used to remove a specific item from the list.

'''Example:'''
 
Use list.remove(entry/value)  Or   del list[index]    Or list.pop(index)
&lt;pre&gt;
student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
student.remove(&quot;Arun&quot;)   #This will delete item &quot;Arun&quot;
         Or    
del student[0]           # This will delete item at index 0
         Or
student.pop(0)         # This will delete and return item at index 0
print(student)    
Output: &quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
&lt;/pre&gt;

[[#TOP]]

===Delete list ===
----
Used to delete complete list

'''Example'''

Use del &lt;list name&gt;
&lt;pre&gt;
student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
del student&lt;/pre&gt;

===Concatenation of two lists===
----
''+'' is the concatenation operator which is used concatenate two lists. 
&lt;pre&gt;
ages1 = [11,23,12,23,45]
ages2 = [25, 24, 43, 47]
age=ages1+ages2
print(age)
#Output: [11, 23, 12, 23, 45, 25, 24, 43, 47]
&lt;/pre&gt;

===Repeatation of a list ===
----
''*'' is the operator to repeat a particular list.
&lt;pre&gt;
ages1 = [11,23,12,23,45]
age=ages1*5 #ages1 list is repeated 5 times and stroed in ''age'' list
print(age)

#Output: [11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45]
&lt;/pre&gt;

=== all and any for List===
all() and any() are special functions to check whether all elements in iterable is ''True'' or any element is ''True''
&lt;ol&gt;
&lt;li&gt;If all elements in a list are ''True'', '''all()''' will return ''True''&lt;/li&gt;
&lt;li&gt;If iterable is ''empty'', '''all()''' will return ''True''&lt;/li&gt;
&lt;li&gt;If iterable contains at least one ''True'', '''any()''' will return ''True''&lt;/li&gt;
&lt;li&gt;If iterable is ''empty'', '''any()''' will return ''False''&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;
lsit=[True, True, True, True]
print(all(lsit))#Output: True
print(any(lsit))#Output: True

lsit1=[True, False, True, True]
print(all(lsit1))#Output: False
print(any(lsit1))#Output: True

lsit2=[False,False,False]
print(all(lsit2))#Output: False
print(any(lsit2))#Output: False

lsit3=[]
print(all(lsit3))#Output: True
print(any(lsit3))#Output: False
&lt;/pre&gt;

==Conditional Statements==
&lt;pre&gt;Conditionals are used to check the condition and change the flow of the program 
accordingly. They are realized in programming languages through if statement. The 
syntax is as follows :
&lt;pre&gt;
         if condition : 
            statement
&lt;/pre&gt;
    '''Note:''' Do not forget indentation (inserting space/tab) in the line after the
 if condition.
    
    In case you want to execute a set of statements when a condition is true and another

set of statement when the condition is false.
&lt;pre&gt;
         if condition : 
            statement 1
         else :
            statement 2
&lt;/pre&gt;

&lt;pre&gt;    
    Multiple if-else statements can be written as follows:
         if condition_1 : 
            statement 1
         elif condition_2 : # 'elif' is short for 'else if'
            statement 2
         elif condition_3 :
            statement 3
        .
        .
         else :
            final statement
&lt;/pre&gt;

[[#TOP]]

=Loops and Conditionals : Fizzbuzz=
====Loops====
Loops are used to execute a set of repetitive statements. They are realised
through 'while' and 'for' loops in programming languages. The syntax of 'for' loop is 
as follows :
&lt;pre&gt;
for LOOPVARIABLE in SEQUENCE: 
            STATEMENTS&lt;/pre&gt;

    '''e.g.''' to print all the data from a list we can write:
&lt;pre&gt;
for item in list_name:
      print(item)&lt;/pre&gt;
    OR
&lt;pre&gt;
for index in range(len(list_name)):
      print(list_name[index])
 &lt;/pre&gt;   
    The syntax for while loop is as follows :
&lt;pre&gt;    
while BOOLEANEXPRESSION: 
     STATEMENTS
     INCREMENT/DECREMENT
&lt;/pre&gt;    
    '''e.g.''' if we want to print all numbers from 1 to 10
&lt;pre&gt;
i=1
while i&lt;=10 :
    print(i,&quot; &quot;)
    i=i+1
    &lt;/pre&gt;
 
'while' loop has indefinite iteration (run-time unknown). So, there must be loop,  break statement in it.
 Whereas 'for' loop is definite in nature (i.e. known or predictable span).&lt;br&gt;

&lt;b&gt;NOTE: Python doesn't have anything like do-while loop.&lt;/b&gt;

[[#TOP]]

==Implementation==
Here, we try to demonstrate the concept of loops and conditionals through a game called Fizzbuzz. The rules are as follows :&lt;br/&gt;
[[File:fizzBuzz.gif]]

• if input number is a multiple of ’3’ print ”Fizz”
&lt;br/&gt;
• if input number is a multiple of ’5’ print ”Buzz”
&lt;br/&gt;
• if input number is a multiple of both '3' and ’5’ print ”FizzBuzz”
&lt;br/&gt;
The pseudo code is as follows :
&lt;pre&gt;
   If input no % 3 == 0 and  input no % 5 == 0 : 
       print ”Fizzbuzz”
   else if input no % 3 == 0 : 
       print ”Fizz”
   else if input no % 5 == 0 : 
       print ”Buzz”
   else :
       print the input no
&lt;/pre&gt;
The order of statements execution matters to get the desired output. The highest priority condition should be first followed by other. In fizzbuzz programming, first checking should be done for both divisibility of 3 and 5. If condition not satisfied only then it should check individually for 3 or 5. So carefully choosing the order is crucial for better programming.
Note: There is some effect of present condition statements chosen on next conditions statements. That is why in first attempt fizzbuzz programming got struck.

Example: 
&lt;pre&gt;
#Code to achieve the above requirement in python3.
i = int(input(&quot;Enter the number&quot;)) 
if i%3 == 0 and i%5 == 0: print(i,&quot;FizzBuzz&quot;)  
elif i%5 == 0: print(i,&quot;Buzz&quot;)
elif i%3 == 0: print(i,&quot;Fizz&quot;)
else: print(i)
&lt;/pre&gt;
Lets put the same into a loop for a range given by the user.
&lt;pre&gt;
def fizzbuzzgame(start,stop):
    for i in range(start,stop+1):
        if i%3 == 0 and i%5 == 0:
            print(i,&quot;FizzBuzz&quot;)
        elif i%5 == 0:
            print(i,&quot;Buzz&quot;)
        elif i%3 == 0:
            print(i,&quot;Fizz&quot;)
        else: print(i)

fizzbuzzgame(50,100)
&lt;/pre&gt;


=== Fizz Buzz game in Interactive mode with Score ===
'''By Ms. Ami Tusharkant Choksi'''
&lt;pre&gt;
def fizzbuzzgame(i):
        if i%3 == 0 and i%5 == 0:
            print(i,&quot;FizzBuzz&quot;)
            return(&quot;fzbz&quot;)
        elif i%5 == 0:
            print(i,&quot;Buzz&quot;)
            return(&quot;bz&quot;)
        elif i%3 == 0:
            print(i,&quot;Fizz&quot;)
            return(&quot;fz&quot;)
        else:
            print(i)
            return(&quot;no&quot;)

ch = 'y'
fizzbuzz=0
fizz=0
buzz=0
nothing=0
print(&quot;&quot;&quot;

 /$$$$$$$$/$$                  /$$$$$$$                            
| $$_____|__/                 | $$__  $$                           
| $$      /$$/$$$$$$$$/$$$$$$$| $$  \ $$/$$   /$$/$$$$$$$$/$$$$$$$$
| $$$$$  | $|____ /$$|____ /$$| $$$$$$$| $$  | $|____ /$$|____ /$$/
| $$__/  | $$  /$$$$/   /$$$$/| $$__  $| $$  | $$  /$$$$/   /$$$$/ 
| $$     | $$ /$$__/   /$$__/ | $$  \ $| $$  | $$ /$$__/   /$$__/  
| $$     | $$/$$$$$$$$/$$$$$$$| $$$$$$$|  $$$$$$//$$$$$$$$/$$$$$$$$
|__/     |__|________|________|_______/ \______/|________|________/
                                                                  
&quot;&quot;&quot;)   
print('''

  /$$$$$$                                
 /$$__  $$                               
| $$  \__/ /$$$$$$ /$$$$$$/$$$$  /$$$$$$ 
| $$ /$$$$|____  $| $$_  $$_  $$/$$__  $$
| $$|_  $$ /$$$$$$| $$ \ $$ \ $| $$$$$$$$
| $$  \ $$/$$__  $| $$ | $$ | $| $$_____/
|  $$$$$$|  $$$$$$| $$ | $$ | $|  $$$$$$$
 \______/ \_______|__/ |__/ |__/\_______/
                                     
''')

while(ch == 'y'):
    n=int(input(&quot;Enter a Number : &quot;))
    winLoose=fizzbuzzgame(n)
    if(winLoose == &quot;fz&quot;):
        fizz+=1
    elif(winLoose == &quot;bz&quot;):
        buzz+=1
    elif(winLoose == &quot;fzbz&quot;):
        fizzbuzz+=1
    ch=input(&quot;Do you want to continue playing the game : (y/n)&quot;)
    if(ch=='n'):
        print('Congratulations, your score is\n FizzBuzz:%d\nFizz:%d\nBuzz:%d' %
(fizzbuzz,fizz,buzz))
    
'''Sample Output:

 /$$$$$$$$/$$                  /$$$$$$$                            
| $$_____|__/                 | $$__  $$                           
| $$      /$$/$$$$$$$$/$$$$$$$| $$  \ $$/$$   /$$/$$$$$$$$/$$$$$$$$
| $$$$$  | $|____ /$$|____ /$$| $$$$$$$| $$  | $|____ /$$|____ /$$/
| $$__/  | $$  /$$$$/   /$$$$/| $$__  $| $$  | $$  /$$$$/   /$$$$/ 
| $$     | $$ /$$__/   /$$__/ | $$  \ $| $$  | $$ /$$__/   /$$__/  
| $$     | $$/$$$$$$$$/$$$$$$$| $$$$$$$|  $$$$$$//$$$$$$$$/$$$$$$$$
|__/     |__|________|________|_______/ \______/|________|________/
                                                                                                                                   

  /$$$$$$                                
 /$$__  $$                               
| $$  \__/ /$$$$$$ /$$$$$$/$$$$  /$$$$$$ 
| $$ /$$$$|____  $| $$_  $$_  $$/$$__  $$
| $$|_  $$ /$$$$$$| $$ \ $$ \ $| $$$$$$$$
| $$  \ $$/$$__  $| $$ | $$ | $| $$_____/
|  $$$$$$|  $$$$$$| $$ | $$ | $|  $$$$$$$
 \______/ \_______|__/ |__/ |__/\_______/
                                         

Enter a Number : 666
666 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 777
777 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 555
555 FizzBuzz
Do you want to continue playing the game : (y/n)y
Enter a Number : 1
1
Do you want to continue playing the game : (y/n)y
Enter a Number : 789
789 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 25
25 Buzz
Do you want to continue playing the game : (y/n)n
Congratulations, your score is

FizzBuzz:1
Fizz:3
Buzz:1

&lt;/pre&gt;

=Crowd Computing: Just Estimate=
==Wisdom of Crowds==
The concept of ’Wisdom of Crowds’ was proposed by Francis Galton. A weight-judging competition was carried on at the annual show of the West of England Fat Stock and Poultry Exhibition recently held at Plymouth, A fat ox having been selected, competitors bought stamped and numbered cards, each, on which to inscribe their respective names, addresses, and estimates of what the ox would weigh after it had been slaughtered. Those who guessed most successfully received prizes. About 8oo tickets were issued to the par- ticipants. The middlemost estimate of all the estimates recorded was 1207 lbs and the actual weight of the ox was 1198 lbs.

==Our Experiment==
The crowd had to guess the number of candies/gems in a jar. Around 75 people participated in the experiment. The actual number of gems in the jar were 375. The median of all estimates came out to be 300 and the mean of all the estimates came out to be around 396. Median underestimated and mean overestimated the actual value. So according to recent studies, Trimmed mean must be used as an aggregate measure to estimate where Wisdom of Crowds is involved.
[[File:Gemsjar.jpg|center|200px|caption]]

===Trimmed Mean===
In these kinds of experiments, 10% trimmed mean is usually followed. For calculating 10% trimmed mean, remove 10% smallest and 10% largest values from the sample. Calculate the mean of the sample obtained. In the above experiment, the trimmed mean came out to be around 351 which is very close to the actual value.

==Implementation==
Here, we try to demonstrate the concept of trimmed mean through crowd computing.
 Input a list of estimates done by the crowd .
 Sort the list.
 Remove the 10% smallest values.
 Remove the 10% largest values.
 Calculate the mean of the new list obtained .&lt;hr&gt;

==Data of Experiment==       
    Estimates =[1000,1010,1786,2000,1500,1500,100,120,150,150,150,170,175,180,197,200,200,200,200,200,200,220,220,220,220,234,250,250,250,250,250,250,250,250,250,263,270,275,275,286,300,
                300,300,300,300,300,300,300,320,350,350,350,400, 400,400,400,400,450,467,500,500,500,500,500,500,500,550,550,600,600,600,650,700,700,720]

    '''CODE:'''
&lt;pre&gt;
Estimates = [1000,1010,1786,2000,1500,1500,100,120,150,150,150,170,175,180,197,200,200,200,200,200,200,220,220,220,220,234,250,250,250,250,250,250,250,250,250,263,270,275,275,286,300,                300,300,300,300,300,300,300,320,350,350,350,400,400,400,400,400,450,467,500,500,500,500,500,500,500,550,550,600,600,600,650,700,700,720]
Estimates.sort()
offset = int(0.10*len(Estimates))
for i in range(offset):
       del Estimates[0]
       del Estimates[-1]
Sum = 0    
for i in range(len(Estimates)):
       Sum += Estimates[i]
Mean_Value = Sum/len(Estimates)
print(&quot;Mean : &quot;, int(Mean_Value))
#Output:
Mean :  351
&lt;/pre&gt;
&lt;hr&gt;
==Trimmed Mean for the above example== 
&lt;h3&gt;Using scipy library&lt;/h3&gt;
&lt;pre&gt;
#import scipy to use the method of trim_mean
from scipy import stats
trimMean = stats.trim_mean(Estimates, 0.1) # Trim 10% at both ends
print(&quot;Trimmed Mean : &quot;,trimMean)
#Output:
Trimmed Mean :  335.1020408163265
&lt;/pre&gt;

&lt;h3&gt;Without using scipy library&lt;/h3&gt;
&lt;pre&gt;
#Trimmed mean with 10%
p=10/100
#sorted data
data=[2, 4, 6, 7, 11, 21, 81, 90, 105, 121]
n = len(data)
#Remove elements from both end
rem=int(n*p)
newData = data[rem:-rem]
mean = 0
for i in newData:
    mean += i
mean = int(mean/len(newData))
print(&quot;Trimmed mean : &quot;,mean)
#Output: Trimmed mean :  40
&lt;/pre&gt;
[[#Top]]

=Jumbled_Words Permutations: Jumbled Words=
==What are Permutations ?==
A permutation also called ordering of selected number of elements from a list denoted by nPr here we are choosing all elements of a list and so n=r&lt;br&gt;
nPr=n!/(n-r)!&lt;br&gt; as n=r
nPn=n!&lt;br&gt; which gives all possible arrangement of elements present in a list.

 For example, permutations of list [1,2,3] are [1,2,3], [1,3,2], [2,1,3], [2,3,1], 
[3,1,2], and [3,2,1]. 
The number of permutations of a list of elements nPn is given by n!. For example, there are 2! = 2 x 1 = 2 permutations of [1,2], namely [1,2] and [2,1], and 3! = 3 x 2 x 1 = 6 permutations of [1,2,3], as mentioned above.&lt;br/&gt;
[[File:Permutations.jpg]]

==Implementation==
Here, we try to demonstrate the concept of permutations through jumbled words. It is a two player game in which one person presents the other person a different permutation of the word in his mind. The other person has to guess the right word. If he guesses, the he wins otherwise he loses.
 Input an list of words.
 Randomly pick a word from the list of words .
 Shuffle this word and present it to the other player.
 if word guesses by the player is same as the one picked from list of w
     player wins
 else
     player loses

ALTERNATE CODE TO GENERATE THIS GAME:
&lt;pre&gt;
import random
p1=input(&quot;enter player 1 name:&quot;)
p2=input(&quot;enter player 2 name:&quot;)
l=[&quot;rainbow&quot;,&quot;computer&quot;,&quot;robot&quot;,&quot;butter&quot;,&quot;vegetable&quot;,&quot;science&quot;,&quot;correct&quot;]
c1=c2=a1=a2=f1=f2=0
k=1
i=3
def play():
    n=random.choice(l)        ##n=chooses a word from list l
    l1=[]
    for j in n:
       l1.append(j)      ##creates a list for word in n
    for t in range(len(l1)):
       p=random.choice(l1)     ##this randomly displays letters in the list
       print(p)
       l1.remove(p)          ##to avoid the repetition of a letter
    s=input(&quot;enter the word:&quot;)
    if(s==n):
        print(&quot;correct&quot;)
        return 1
    else:
        print(&quot;not correct&quot;)
        print(&quot;answer is&quot;,n)
        return 0
def stat():
     print(&quot;player 1:&quot;)
     print(&quot;score:&quot;,c1)
     print(&quot;answered:&quot;,a1)
     print(&quot;failed:&quot;,f1)
     print(&quot;.............&quot;)
     print(&quot;player 2:&quot;)
     print(&quot;score:&quot;,c2)
     print(&quot;answered:&quot;,a2)
     print(&quot;failed&quot;,f2)
     if(c1&gt;c2):
         print(p1,&quot; won over &quot;,p2)
     elif(c1==c2):
         print(&quot;draw game&quot;)
     else:
         print(p2,&quot; won over &quot;,p1) 
while(i!=4):
      if(i==3):
         if(k==1):
             print(&quot;player 1 turn&quot;)
             print(&quot;your jumbled word is:&quot;)
             k=k+1
             m=play()
             if(m==1):      ##if guessed answer is correct,then score and no.of answered count will be increased
                c1+=1
                a1+=1
             else:
                f1+=1       ##else count of no.of failed to answered will be incremented
         else:
             print(&quot;player 2 turn&quot;)
             print(&quot;your jumbled word is:&quot;)
             k=k-1
             m=play()
             if(m==1):
                c2=c2+1
                a2=a2+1
             else:
                f2=f2+1
       if(i==2):
             print(&quot;present status&quot;)
             stat()
       i=int(input(&quot;enter your choice  1.stop 2.status 3.continue&quot;))
       if(i==1):
             stat()
             i=i+3
&lt;/pre&gt;
&lt;hr&gt;
=== JumbledWord Simple Logic, In Short ===
[[File:jumbledWord.gif]]
&lt;hr&gt;
'''Logic to create a Jumbled Word'''
&lt;hr&gt;
&lt;pre&gt;
#Get Jumbled Word and print it Horizontally
import random

def getJumbledWord(b):
    jumble=''
    l1 = [ b[i] for i in range(0, len(b)) ]
    for t in range(len(l1)):
       p=random.choice(l1)     ##this randomly gets letters from the list      
       jumble=jumble+p       
       l1.remove(p)
    return jumble

b=input(&quot;Enter a word to make it jumbled : &quot;)
print(&quot;Jumbled Word : &quot;, getJumbledWord(b))
&lt;/pre&gt;
&lt;hr&gt;
'''Another Logic to create a Jumbled Word'''
&lt;hr&gt;
&lt;pre&gt;
b=input(&quot;Enter a word to make it jumbled : &quot;)

def getJumbledWord1(b):
    l1 = [ b[i] for i in range(0, len(b)) ]
    random.shuffle(l1)
    str1 = ''.join(l1)
    return str1

print(&quot;Jumbled Word : &quot;, getJumbledWord1(b))
&lt;/pre&gt;

====Sample Output:====
&lt;pre&gt;
---- Output1 
Enter a word to make it jumbled : butter
Jumbled Word :  tbture

---- Output2 
Enter a word to make it jumbled : petriotism
Jumbled Word :  pittrosime
&lt;/pre&gt;

=Theory of Evolution=

== What is Evolution ? ==
Evolution is the change in heritable characteristics over successive generations. The theory of evolution explains that DNA, which acts as a carrier of genetic information from one generation to other, tends to change or mutate occasionally. These changes are reflected in next generations to come. This is how life has evolved on earth from bacteria to human beings.&lt;br&gt;
[[File:Evolution.png|500px]]

== Implementation ==
An array representing DNA is stored in a file. As genes are forms of DNA, they contain information to be transferred to forthcoming generations. Assume that information is in the form of bits (in the form of 0s and 1s). A number is picked randomly from 1 to the size of the array. A new parameter has been introduced which decides whether mutation would occur or not. If the value of this new parameter is 1 (It is picked randomly from 1 to 100), then only change is reflected down the generations, otherwise it is not. The pseudo code is as follows :

Input an array containing genetic information .
Randomly generate a number (say m) from 1 to length of the array. Randomly generate other number (say p) from 1 to 100.

&lt;pre&gt; 
    if p is equal to 1 then 
        if m is 1 then
          set it to 0
        else
          set it to 1
&lt;/pre&gt;
[[#TOP]]</text>
      <sha1>dhfki7811tsvdi2f7l5wpmkm5z1ektp</sha1>
    </revision>
    <revision>
      <id>3611</id>
      <parentid>3582</parentid>
      <timestamp>2018-09-28T04:23:55Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* Wisdom of Crowds */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="30011">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_3 Contributors of this page]
*Week 3 Playlist: https://www.youtube.com/playlist?list=PLc_j0TNIaWxOVx_z9jAM2UB3RqYNXaoEo
=List=
List is a flexible data structure used for storing a group of data separated by comma. The elements in a list need not be of the same data type.

'''Example:'''
       List_1 = [ 1, 2,3] or 
       List_1 = [&quot;coffee&quot;, &quot;Tea&quot;, &quot;Milk&quot;] or
       List_1 = [1,&quot;coffee&quot;, &quot;Tea&quot;, 3, &quot;5&quot;]

==List Creation==
&lt;pre&gt;a) A list can be created by simply putting values (separated by comma) between square brackets as given below,
       List_1 = [1,&quot;coffee&quot;, &quot;Tea&quot;, 3, &quot;5&quot;] #this creates a list by name List_1 containing following items


Or,
(b)A List can be created from scratch and elements can be added 
        List_2 = [ ]
        List_2.append(&quot;Kala&quot;)
        List_2.append(&quot;Mala&quot;)
Here we use &quot;append&quot; ,which is a function in python that enable us to append or attach an element to a list .
Thus List_2 will now hold [&quot;Kala&quot;,&quot;Mala&quot;]
&lt;/pre&gt;
[[#TOP]]

==Operations and Methods to work with List==
&lt;pre&gt;
a = [25,30,50,90,12,13]
b = [100,300,500,200,250]
&lt;/pre&gt;
&lt;hr&gt;
&lt;table border=2&gt;
  &lt;tr&gt;
    &lt;th&gt;&lt;b&gt;Method/&lt;br&gt;Operator&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Function&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Syntax&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Output&lt;/b&gt;&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;len()&lt;/td&gt;
    &lt;td&gt;Find length of a list&lt;/td&gt;
    &lt;td&gt;len(a)&lt;/td&gt;
    &lt;td&gt;6&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;max()&lt;/td&gt;
    &lt;td&gt;Find maximum element from the list&lt;/td&gt;
    &lt;td&gt;max(a)&lt;/td&gt;
    &lt;td&gt;90&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;min()&lt;/td&gt;
    &lt;td&gt;Find minimum element from the list&lt;/td&gt;
    &lt;td&gt;min(a)&lt;/td&gt;
    &lt;td&gt;12&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sum()&lt;/td&gt;
    &lt;td&gt;Returns sum of all elements of the list&lt;/td&gt;
    &lt;td&gt;sum(a)&lt;/td&gt;
    &lt;td&gt;220&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;reverse()&lt;/td&gt;
    &lt;td&gt;Reverses the original list&lt;/td&gt;
    &lt;td&gt;a.reverse()&lt;/td&gt;
    &lt;td&gt;[13, 12, 90, 50, 30, 25]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sort()&lt;/td&gt;
    &lt;td&gt;Sorts the original list in ascending order&lt;/td&gt;
    &lt;td&gt;a.sort()&lt;/td&gt;
    &lt;td&gt;[12, 13, 25, 30, 50, 90]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sorted()&lt;/td&gt;
    &lt;td&gt;Returns the new sorted list &lt;/td&gt;
    &lt;td&gt;sorted(a)&lt;/td&gt;
    &lt;td&gt;[12, 13, 25, 30, 50, 90]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;insert()&lt;/td&gt;
    &lt;td&gt;Insert at a particular index in the list, and shifts remaining elements&lt;/td&gt;
    &lt;td&gt;a.insert(3,3)&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 3, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;append()&lt;/td&gt;
    &lt;td&gt;Adds elements/object to the end of the list&lt;/td&gt;
    &lt;td&gt;a.append(5)&lt;br&gt;a.append([10,20])&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 5]&lt;br&gt;[25, 30, 50, 90, 12, 13, [10, 20]]&lt;br&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;extend()&lt;/td&gt;
    &lt;td&gt;Adds object to the end of the list as elements not as object&lt;/td&gt;
    &lt;td&gt;a.extend([10,20])&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 10, 20]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;*&amp;nbsp;&amp;nbsp;Repeatation&lt;br&gt;operator&lt;/td&gt;
    &lt;td&gt;Repeat the list for n times and returns a new list&lt;/td&gt;
    &lt;td&gt;a*2&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 25, 30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;+ Concatenation&lt;br&gt;operator&lt;/td&gt;
    &lt;td&gt;Concatenates two lists, and returns a new list&lt;/td&gt;
    &lt;td&gt;a+b&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 100, 300, 500, 200, 250]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;index()&lt;/td&gt;
    &lt;td&gt;Finds index of a particular element in the list or not&lt;/td&gt;
    &lt;td&gt;a.index(25)&lt;br&gt;a.index(0)&lt;br&gt;&lt;/td&gt;
    &lt;td&gt;0&lt;br&gt;&lt;br&gt;ValueError: 0 is not in list&lt;br&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;in operator&lt;/td&gt;
    &lt;td&gt;Finds whether a particular element is in the list or not, returns boolean&lt;/td&gt;
    &lt;td&gt;25 in a&lt;/td&gt;
    &lt;td&gt;True&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;not in operator&lt;/td&gt;
    &lt;td&gt;Checks if element is not available in list, returns boolean&lt;/td&gt;
    &lt;td&gt;25 not in a&lt;/td&gt;
    &lt;td&gt;False&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;count()&lt;/td&gt;
    &lt;td&gt;Counts the number of occurence of an element in the list&lt;/td&gt;
    &lt;td&gt;a.count(25)&lt;/td&gt;
    &lt;td&gt;1&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;remove()&lt;/td&gt;
    &lt;td&gt;Removes an element from the list&lt;/td&gt;
    &lt;td&gt;a.remove(25)&lt;/td&gt;
    &lt;td&gt; [30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;pop()&lt;/td&gt;
    &lt;td&gt;Delete and return item at index 0&lt;/td&gt;
    &lt;td&gt;a.pop(0)&lt;/td&gt;
    &lt;td&gt;25 , a will be [30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;del&lt;/td&gt;
    &lt;td&gt;Deletes item at a particular index from the list&lt;/td&gt;
    &lt;td&gt;del a[0]&lt;/td&gt;
    &lt;td&gt;[30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;all()&lt;/td&gt;
&lt;td&gt;Returns True, if all items in list are True or it is an empty list&lt;/td&gt;
&lt;td&gt;all([True, True, True])
all([])
&lt;/td&gt;
&lt;td&gt;True&lt;br&gt;
True&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;any()&lt;/td&gt;
&lt;td&gt;Returns True, if any item in list is True else return False&lt;/td&gt;
&lt;td&gt;any([True, True, True])&lt;br&gt;
any([True, False, True])&lt;br&gt;
any([])&lt;/td&gt;
&lt;td&gt;True&lt;br&gt;False&lt;br&gt;False&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;

==Printing the List==
=== Print whole list ===
A list can be printed simply or using a ''for / while'' loop 

 print(List_2)     # To print the entire list
This code will print      
 ['Kala','Mala']     

===Print element at a particular index===
&lt;pre&gt;
Using index position
    List_2[0]     # prints 'Kala' ,i.e,the value at index position 0.
    List_2[1]     # prints 'Mala'.
&lt;/pre&gt;
=== Without using index position ===
&lt;pre&gt;
for item in List_2:   # here item is a variable used to access elements in list.
       print(item)
   This code snippet prints 
    Kala
    Mala
&lt;/pre&gt;
[[#TOP]]

==Search for a particular element in list==
Elements in a list can be searched by one of the two ways:
=== using index() function===
&lt;pre&gt;
ages1 = [11,23,12,23,45]

#if element is available in the list, index() returns the index value on which, the element is present.
print(ages1.index(45))#Output: 4

#if element is not available in the list, index() returns ''ValueError''
print(ages1.index(0))#Output: ValueError:
&lt;/pre&gt;

In programming, if such error occurs, program gets terminated. It can be solved using exception handling.
e.g.
&lt;pre&gt;
ages1 = [11,23,12,23,45]

try:
    print(ages1.index(0))
except ValueError:
    print(&quot;Exception has occured&quot;)    
    print(&quot;Element is not found in the list&quot;)

&lt;/pre&gt;
&lt;pre&gt;
'''Output: 
Exception has occured
Element is not found in the list
'''&lt;/pre&gt;
[[#TOP]]

=== using 'in' operator===
''in'' operator is used to check whether a particular element is available in the list or not.e.g.

&lt;pre&gt;
ages1 = [11,23,12,23,45]
no=11

if no in ages1:
    print(&quot;no is there in the list&quot;)
else:    
    print(&quot;no is NOT there in the list&quot;)
&lt;/pre&gt;
&lt;pre&gt;
#Output: no is there in the list
&lt;/pre&gt;


'''Number is not there in the list'''
&lt;pre&gt;
ages1 = [11,23,12,23,45]
no=15

if no in ages1:
    print(&quot;no is there in the list&quot;)
else:    
    print(&quot;no is NOT there in the list&quot;)
&lt;/pre&gt;
&lt;pre&gt;
Output: no is NOT there in the list
&lt;/pre&gt;
[[#TOP]]

==Updating the List==
The lists can be updated using ''append'' or ''insert'' function.  Append adds the element to the end of the list and Insert adds the element in the specified position.
&lt;pre&gt;
   # add the element 'Sheela' to the end of the list.
   List_2.append(&quot;Sheela&quot;)    
   print (List_2) will output 
   ['Kala', 'Mala', 'Sheela']
&lt;/pre&gt;
   &lt;pre&gt;
# add the element &quot;Bala&quot; in the list at the index 1.
   List_2.insert(1,&quot;Bala&quot;)    
   print (List_2) will output 
   ['Kala', 'Bala','Mala', 'Sheela']
&lt;/pre&gt;

=== Extend the list by adding elements of other list at end using extend()===
&lt;pre&gt;
ages = [11,23,12,23,45]
ages.extend([57,58])
print(ages)
&lt;/pre&gt;

&lt;pre&gt;
#Output: [11, 23, 12, 23, 45, 57, 58]
&lt;/pre&gt;

==== Difference between ''append and extend'' ====
Difference between append and extend can be easily understood, by the following example.

&lt;pre&gt;
appendlist = [11,23,12,23,45]
appendlist.append([57,58])

extendlist= [11,23,12,23,45]
extendlist.extend([57,58])
&lt;/pre&gt;

&lt;pre&gt;
'''Output:
[11, 23, 12, 23, 45, [57, 58]]
[11, 23, 12, 23, 45, 57, 58]'''
&lt;/pre&gt;

[[#TOP]]

==Basic Operations on List==
===Frequency of Occurrence===
list.count(object) will return the number of times the object occur in the list.
  '''Example'''
    ages = [11,23,12,23,45,43,22,24,23]
    ages.count(23) will return
    3
    ages.count(100) will return
    0

===Length of the List===
len(list) will return the length of the list ie. the number of objects in the list.
  '''Example'''
&lt;pre&gt;
    ages = [11,23,12,23,45,43,22,24,23]
    len(ages) # Output: 9
&lt;/pre&gt;

To print the objects in the list either use ''for item in list'' or ''for index in range(len(list))''
&lt;pre&gt;
    for item in ages:       
        print (item)  
        (OR)
    for index in range(len(ages)) :
        print (ages[index])
&lt;/pre&gt;

===Sort the List===
list.sort() will sort the list in ascending order
  '''Example'''
    ages = [11,23,12,23,45,43,22,24,23]
    ages.sort() 
    print (ages) 
    [11, 12, 22, 23, 23, 23, 24, 43, 45]

[[#TOP]]

===Sort the List using sorted() function===
sorted(list1) will sort the list and return a new list, it doesn't modify the original list
&lt;br&gt;'''Example: Sort in ascending order'''
&lt;pre&gt;
ages = [11,23,12,23,45,43,22,24,23]
newList=sorted(ages)
print(newList)

#Output: [11, 12, 22, 23, 23, 23, 24, 43, 45]
&lt;/pre&gt;

&lt;br&gt;'''Example: Sort in descending order'''
&lt;pre&gt;
ages = [11,23,12,23,45,43,22,24,23]
newList=sorted(ages,reverse=True)
print(newList)

#Output: [45, 43, 24, 23, 23, 23, 22, 12, 11]
&lt;/pre&gt;

===Reverse the List===
list.reverse() will reverse the original list
  '''Example'''
    ages = [11, 12, 22, 23, 23, 23, 24, 43, 45]
    ages.reverse()
    print (ages)
    [45, 43, 24, 23, 23, 23, 22, 12, 11]

Both sort() and reverse() list operation will work on numeric and alphanumeric data list.

A special use of the reverse() function is to descend a list that is sorted in ascending order.

  '''Example'''
&lt;pre&gt;
ages = [11, 12, 22, 23, 23, 23, 24, 43, 45]
ages.sort()
print(ages)
ages.reverse()
print(ages)
&lt;/pre&gt;

===Slicing===
Used to retrieve an object or objects in a range as a list  
  '''Example'''

Use ''list[index]'' to retrieve the object at the given index
&lt;pre&gt;
In [1]: student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
In [2]: student[3]     #Object at index 3.  Remember index starts at 0
Out[2]: 'Geetha'      
&lt;/pre&gt;

Use ''list[start_index : end_index + 1]'' to retrieve objects from the start_index to end_index 
&lt;pre&gt;
In [3]: student[2:4]     # Objects from index 2 to 3 as List. Note the [ and ]
Out[3]: ['Vijay', 'Geetha']   
&lt;/pre&gt;

Use ''list[:]'' to retrieve objects from the starting of the list to the end of the list. 
The default start value will be the starting index of the list (i.e. 0) and the default end value
will be the length of the list 
&lt;pre&gt;
In [4]: student[:]        # prints the entire list
Out[4]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma', 'Janani']
&lt;/pre&gt;
&lt;pre&gt;
In [5]: student[:5]       # prints the objects from the start of the list upto object at index 4
Out[5]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran']
&lt;/pre&gt;
&lt;pre&gt;
In [6]: student[2:]       # prints the objects from index 2 upto the end of the list
Out[6]: ['Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma', 'Janani']
&lt;/pre&gt;

Negative index too is available in Python. It starts from last element of the list. i.e.
&lt;pre&gt;
In [7]:student[-1]        #prints last index of list
Out[7]: 'Janani'
&lt;/pre&gt;
&lt;pre&gt;
In [8]:student[-1:-8]     #prints empty list
Out[8]: []
&lt;/pre&gt;
&lt;pre&gt;
In [9]:student[-8:-1]     #prints -8th index to -1st index elements
Out[9]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma']
&lt;/pre&gt;

[[#TOP]]

===Removing Item from list ===
----

Is used to remove a specific item from the list.

'''Example:'''
 
Use list.remove(entry/value)  Or   del list[index]    Or list.pop(index)
&lt;pre&gt;
student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
student.remove(&quot;Arun&quot;)   #This will delete item &quot;Arun&quot;
         Or    
del student[0]           # This will delete item at index 0
         Or
student.pop(0)         # This will delete and return item at index 0
print(student)    
Output: &quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
&lt;/pre&gt;

[[#TOP]]

===Delete list ===
----
Used to delete complete list

'''Example'''

Use del &lt;list name&gt;
&lt;pre&gt;
student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
del student&lt;/pre&gt;

===Concatenation of two lists===
----
''+'' is the concatenation operator which is used concatenate two lists. 
&lt;pre&gt;
ages1 = [11,23,12,23,45]
ages2 = [25, 24, 43, 47]
age=ages1+ages2
print(age)
#Output: [11, 23, 12, 23, 45, 25, 24, 43, 47]
&lt;/pre&gt;

===Repeatation of a list ===
----
''*'' is the operator to repeat a particular list.
&lt;pre&gt;
ages1 = [11,23,12,23,45]
age=ages1*5 #ages1 list is repeated 5 times and stroed in ''age'' list
print(age)

#Output: [11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45]
&lt;/pre&gt;

=== all and any for List===
all() and any() are special functions to check whether all elements in iterable is ''True'' or any element is ''True''
&lt;ol&gt;
&lt;li&gt;If all elements in a list are ''True'', '''all()''' will return ''True''&lt;/li&gt;
&lt;li&gt;If iterable is ''empty'', '''all()''' will return ''True''&lt;/li&gt;
&lt;li&gt;If iterable contains at least one ''True'', '''any()''' will return ''True''&lt;/li&gt;
&lt;li&gt;If iterable is ''empty'', '''any()''' will return ''False''&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;
lsit=[True, True, True, True]
print(all(lsit))#Output: True
print(any(lsit))#Output: True

lsit1=[True, False, True, True]
print(all(lsit1))#Output: False
print(any(lsit1))#Output: True

lsit2=[False,False,False]
print(all(lsit2))#Output: False
print(any(lsit2))#Output: False

lsit3=[]
print(all(lsit3))#Output: True
print(any(lsit3))#Output: False
&lt;/pre&gt;

==Conditional Statements==
&lt;pre&gt;Conditionals are used to check the condition and change the flow of the program 
accordingly. They are realized in programming languages through if statement. The 
syntax is as follows :
&lt;pre&gt;
         if condition : 
            statement
&lt;/pre&gt;
    '''Note:''' Do not forget indentation (inserting space/tab) in the line after the
 if condition.
    
    In case you want to execute a set of statements when a condition is true and another

set of statement when the condition is false.
&lt;pre&gt;
         if condition : 
            statement 1
         else :
            statement 2
&lt;/pre&gt;

&lt;pre&gt;    
    Multiple if-else statements can be written as follows:
         if condition_1 : 
            statement 1
         elif condition_2 : # 'elif' is short for 'else if'
            statement 2
         elif condition_3 :
            statement 3
        .
        .
         else :
            final statement
&lt;/pre&gt;

[[#TOP]]

=Loops and Conditionals : Fizzbuzz=
====Loops====
Loops are used to execute a set of repetitive statements. They are realised
through 'while' and 'for' loops in programming languages. The syntax of 'for' loop is 
as follows :
&lt;pre&gt;
for LOOPVARIABLE in SEQUENCE: 
            STATEMENTS&lt;/pre&gt;

    '''e.g.''' to print all the data from a list we can write:
&lt;pre&gt;
for item in list_name:
      print(item)&lt;/pre&gt;
    OR
&lt;pre&gt;
for index in range(len(list_name)):
      print(list_name[index])
 &lt;/pre&gt;   
    The syntax for while loop is as follows :
&lt;pre&gt;    
while BOOLEANEXPRESSION: 
     STATEMENTS
     INCREMENT/DECREMENT
&lt;/pre&gt;    
    '''e.g.''' if we want to print all numbers from 1 to 10
&lt;pre&gt;
i=1
while i&lt;=10 :
    print(i,&quot; &quot;)
    i=i+1
    &lt;/pre&gt;
 
'while' loop has indefinite iteration (run-time unknown). So, there must be loop,  break statement in it.
 Whereas 'for' loop is definite in nature (i.e. known or predictable span).&lt;br&gt;

&lt;b&gt;NOTE: Python doesn't have anything like do-while loop.&lt;/b&gt;

[[#TOP]]

==Implementation==
Here, we try to demonstrate the concept of loops and conditionals through a game called Fizzbuzz. The rules are as follows :&lt;br/&gt;
[[File:fizzBuzz.gif]]

• if input number is a multiple of ’3’ print ”Fizz”
&lt;br/&gt;
• if input number is a multiple of ’5’ print ”Buzz”
&lt;br/&gt;
• if input number is a multiple of both '3' and ’5’ print ”FizzBuzz”
&lt;br/&gt;
The pseudo code is as follows :
&lt;pre&gt;
   If input no % 3 == 0 and  input no % 5 == 0 : 
       print ”Fizzbuzz”
   else if input no % 3 == 0 : 
       print ”Fizz”
   else if input no % 5 == 0 : 
       print ”Buzz”
   else :
       print the input no
&lt;/pre&gt;
The order of statements execution matters to get the desired output. The highest priority condition should be first followed by other. In fizzbuzz programming, first checking should be done for both divisibility of 3 and 5. If condition not satisfied only then it should check individually for 3 or 5. So carefully choosing the order is crucial for better programming.
Note: There is some effect of present condition statements chosen on next conditions statements. That is why in first attempt fizzbuzz programming got struck.

Example: 
&lt;pre&gt;
#Code to achieve the above requirement in python3.
i = int(input(&quot;Enter the number&quot;)) 
if i%3 == 0 and i%5 == 0: print(i,&quot;FizzBuzz&quot;)  
elif i%5 == 0: print(i,&quot;Buzz&quot;)
elif i%3 == 0: print(i,&quot;Fizz&quot;)
else: print(i)
&lt;/pre&gt;
Lets put the same into a loop for a range given by the user.
&lt;pre&gt;
def fizzbuzzgame(start,stop):
    for i in range(start,stop+1):
        if i%3 == 0 and i%5 == 0:
            print(i,&quot;FizzBuzz&quot;)
        elif i%5 == 0:
            print(i,&quot;Buzz&quot;)
        elif i%3 == 0:
            print(i,&quot;Fizz&quot;)
        else: print(i)

fizzbuzzgame(50,100)
&lt;/pre&gt;


=== Fizz Buzz game in Interactive mode with Score ===
'''By Ms. Ami Tusharkant Choksi'''
&lt;pre&gt;
def fizzbuzzgame(i):
        if i%3 == 0 and i%5 == 0:
            print(i,&quot;FizzBuzz&quot;)
            return(&quot;fzbz&quot;)
        elif i%5 == 0:
            print(i,&quot;Buzz&quot;)
            return(&quot;bz&quot;)
        elif i%3 == 0:
            print(i,&quot;Fizz&quot;)
            return(&quot;fz&quot;)
        else:
            print(i)
            return(&quot;no&quot;)

ch = 'y'
fizzbuzz=0
fizz=0
buzz=0
nothing=0
print(&quot;&quot;&quot;

 /$$$$$$$$/$$                  /$$$$$$$                            
| $$_____|__/                 | $$__  $$                           
| $$      /$$/$$$$$$$$/$$$$$$$| $$  \ $$/$$   /$$/$$$$$$$$/$$$$$$$$
| $$$$$  | $|____ /$$|____ /$$| $$$$$$$| $$  | $|____ /$$|____ /$$/
| $$__/  | $$  /$$$$/   /$$$$/| $$__  $| $$  | $$  /$$$$/   /$$$$/ 
| $$     | $$ /$$__/   /$$__/ | $$  \ $| $$  | $$ /$$__/   /$$__/  
| $$     | $$/$$$$$$$$/$$$$$$$| $$$$$$$|  $$$$$$//$$$$$$$$/$$$$$$$$
|__/     |__|________|________|_______/ \______/|________|________/
                                                                  
&quot;&quot;&quot;)   
print('''

  /$$$$$$                                
 /$$__  $$                               
| $$  \__/ /$$$$$$ /$$$$$$/$$$$  /$$$$$$ 
| $$ /$$$$|____  $| $$_  $$_  $$/$$__  $$
| $$|_  $$ /$$$$$$| $$ \ $$ \ $| $$$$$$$$
| $$  \ $$/$$__  $| $$ | $$ | $| $$_____/
|  $$$$$$|  $$$$$$| $$ | $$ | $|  $$$$$$$
 \______/ \_______|__/ |__/ |__/\_______/
                                     
''')

while(ch == 'y'):
    n=int(input(&quot;Enter a Number : &quot;))
    winLoose=fizzbuzzgame(n)
    if(winLoose == &quot;fz&quot;):
        fizz+=1
    elif(winLoose == &quot;bz&quot;):
        buzz+=1
    elif(winLoose == &quot;fzbz&quot;):
        fizzbuzz+=1
    ch=input(&quot;Do you want to continue playing the game : (y/n)&quot;)
    if(ch=='n'):
        print('Congratulations, your score is\n FizzBuzz:%d\nFizz:%d\nBuzz:%d' %
(fizzbuzz,fizz,buzz))
    
'''Sample Output:

 /$$$$$$$$/$$                  /$$$$$$$                            
| $$_____|__/                 | $$__  $$                           
| $$      /$$/$$$$$$$$/$$$$$$$| $$  \ $$/$$   /$$/$$$$$$$$/$$$$$$$$
| $$$$$  | $|____ /$$|____ /$$| $$$$$$$| $$  | $|____ /$$|____ /$$/
| $$__/  | $$  /$$$$/   /$$$$/| $$__  $| $$  | $$  /$$$$/   /$$$$/ 
| $$     | $$ /$$__/   /$$__/ | $$  \ $| $$  | $$ /$$__/   /$$__/  
| $$     | $$/$$$$$$$$/$$$$$$$| $$$$$$$|  $$$$$$//$$$$$$$$/$$$$$$$$
|__/     |__|________|________|_______/ \______/|________|________/
                                                                                                                                   

  /$$$$$$                                
 /$$__  $$                               
| $$  \__/ /$$$$$$ /$$$$$$/$$$$  /$$$$$$ 
| $$ /$$$$|____  $| $$_  $$_  $$/$$__  $$
| $$|_  $$ /$$$$$$| $$ \ $$ \ $| $$$$$$$$
| $$  \ $$/$$__  $| $$ | $$ | $| $$_____/
|  $$$$$$|  $$$$$$| $$ | $$ | $|  $$$$$$$
 \______/ \_______|__/ |__/ |__/\_______/
                                         

Enter a Number : 666
666 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 777
777 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 555
555 FizzBuzz
Do you want to continue playing the game : (y/n)y
Enter a Number : 1
1
Do you want to continue playing the game : (y/n)y
Enter a Number : 789
789 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 25
25 Buzz
Do you want to continue playing the game : (y/n)n
Congratulations, your score is

FizzBuzz:1
Fizz:3
Buzz:1

&lt;/pre&gt;

=Crowd Computing: Just Estimate=
==Wisdom of Crowds==
&lt;p align:justify&gt;
The concept of ’Wisdom of Crowds’ was proposed by Francis Galton. A weight-judging competition was carried on at the annual show of the West of England Fat Stock and Poultry Exhibition recently held at Plymouth, A fat ox having been selected, competitors bought stamped and numbered cards, each, on which to inscribe their respective names, addresses, and estimates of what the ox would weigh after it had been slaughtered. Those who guessed most successfully received prizes. About 8oo tickets were issued to the par- ticipants. The middlemost estimate of all the estimates recorded was 1207 lbs and the actual weight of the ox was 1198 lbs.&lt;/p&gt;

==Our Experiment==
The crowd had to guess the number of candies/gems in a jar. Around 75 people participated in the experiment. The actual number of gems in the jar were 375. The median of all estimates came out to be 300 and the mean of all the estimates came out to be around 396. Median underestimated and mean overestimated the actual value. So according to recent studies, Trimmed mean must be used as an aggregate measure to estimate where Wisdom of Crowds is involved.
[[File:Gemsjar.jpg|center|200px|caption]]

===Trimmed Mean===
In these kinds of experiments, 10% trimmed mean is usually followed. For calculating 10% trimmed mean, remove 10% smallest and 10% largest values from the sample. Calculate the mean of the sample obtained. In the above experiment, the trimmed mean came out to be around 351 which is very close to the actual value.

==Implementation==
Here, we try to demonstrate the concept of trimmed mean through crowd computing.
 Input a list of estimates done by the crowd .
 Sort the list.
 Remove the 10% smallest values.
 Remove the 10% largest values.
 Calculate the mean of the new list obtained .&lt;hr&gt;

==Data of Experiment==       
    Estimates =[1000,1010,1786,2000,1500,1500,100,120,150,150,150,170,175,180,197,200,200,200,200,200,200,220,220,220,220,234,250,250,250,250,250,250,250,250,250,263,270,275,275,286,300,
                300,300,300,300,300,300,300,320,350,350,350,400, 400,400,400,400,450,467,500,500,500,500,500,500,500,550,550,600,600,600,650,700,700,720]

    '''CODE:'''
&lt;pre&gt;
Estimates = [1000,1010,1786,2000,1500,1500,100,120,150,150,150,170,175,180,197,200,200,200,200,200,200,220,220,220,220,234,250,250,250,250,250,250,250,250,250,263,270,275,275,286,300,                300,300,300,300,300,300,300,320,350,350,350,400,400,400,400,400,450,467,500,500,500,500,500,500,500,550,550,600,600,600,650,700,700,720]
Estimates.sort()
offset = int(0.10*len(Estimates))
for i in range(offset):
       del Estimates[0]
       del Estimates[-1]
Sum = 0    
for i in range(len(Estimates)):
       Sum += Estimates[i]
Mean_Value = Sum/len(Estimates)
print(&quot;Mean : &quot;, int(Mean_Value))
#Output:
Mean :  351
&lt;/pre&gt;
&lt;hr&gt;
==Trimmed Mean for the above example== 
&lt;h3&gt;Using scipy library&lt;/h3&gt;
&lt;pre&gt;
#import scipy to use the method of trim_mean
from scipy import stats
trimMean = stats.trim_mean(Estimates, 0.1) # Trim 10% at both ends
print(&quot;Trimmed Mean : &quot;,trimMean)
#Output:
Trimmed Mean :  335.1020408163265
&lt;/pre&gt;

&lt;h3&gt;Without using scipy library&lt;/h3&gt;
&lt;pre&gt;
#Trimmed mean with 10%
p=10/100
#sorted data
data=[2, 4, 6, 7, 11, 21, 81, 90, 105, 121]
n = len(data)
#Remove elements from both end
rem=int(n*p)
newData = data[rem:-rem]
mean = 0
for i in newData:
    mean += i
mean = int(mean/len(newData))
print(&quot;Trimmed mean : &quot;,mean)
#Output: Trimmed mean :  40
&lt;/pre&gt;
[[#Top]]

=Jumbled_Words Permutations: Jumbled Words=
==What are Permutations ?==
A permutation also called ordering of selected number of elements from a list denoted by nPr here we are choosing all elements of a list and so n=r&lt;br&gt;
nPr=n!/(n-r)!&lt;br&gt; as n=r
nPn=n!&lt;br&gt; which gives all possible arrangement of elements present in a list.

 For example, permutations of list [1,2,3] are [1,2,3], [1,3,2], [2,1,3], [2,3,1], 
[3,1,2], and [3,2,1]. 
The number of permutations of a list of elements nPn is given by n!. For example, there are 2! = 2 x 1 = 2 permutations of [1,2], namely [1,2] and [2,1], and 3! = 3 x 2 x 1 = 6 permutations of [1,2,3], as mentioned above.&lt;br/&gt;
[[File:Permutations.jpg]]

==Implementation==
Here, we try to demonstrate the concept of permutations through jumbled words. It is a two player game in which one person presents the other person a different permutation of the word in his mind. The other person has to guess the right word. If he guesses, the he wins otherwise he loses.
 Input an list of words.
 Randomly pick a word from the list of words .
 Shuffle this word and present it to the other player.
 if word guesses by the player is same as the one picked from list of w
     player wins
 else
     player loses

ALTERNATE CODE TO GENERATE THIS GAME:
&lt;pre&gt;
import random
p1=input(&quot;enter player 1 name:&quot;)
p2=input(&quot;enter player 2 name:&quot;)
l=[&quot;rainbow&quot;,&quot;computer&quot;,&quot;robot&quot;,&quot;butter&quot;,&quot;vegetable&quot;,&quot;science&quot;,&quot;correct&quot;]
c1=c2=a1=a2=f1=f2=0
k=1
i=3
def play():
    n=random.choice(l)        ##n=chooses a word from list l
    l1=[]
    for j in n:
       l1.append(j)      ##creates a list for word in n
    for t in range(len(l1)):
       p=random.choice(l1)     ##this randomly displays letters in the list
       print(p)
       l1.remove(p)          ##to avoid the repetition of a letter
    s=input(&quot;enter the word:&quot;)
    if(s==n):
        print(&quot;correct&quot;)
        return 1
    else:
        print(&quot;not correct&quot;)
        print(&quot;answer is&quot;,n)
        return 0
def stat():
     print(&quot;player 1:&quot;)
     print(&quot;score:&quot;,c1)
     print(&quot;answered:&quot;,a1)
     print(&quot;failed:&quot;,f1)
     print(&quot;.............&quot;)
     print(&quot;player 2:&quot;)
     print(&quot;score:&quot;,c2)
     print(&quot;answered:&quot;,a2)
     print(&quot;failed&quot;,f2)
     if(c1&gt;c2):
         print(p1,&quot; won over &quot;,p2)
     elif(c1==c2):
         print(&quot;draw game&quot;)
     else:
         print(p2,&quot; won over &quot;,p1) 
while(i!=4):
      if(i==3):
         if(k==1):
             print(&quot;player 1 turn&quot;)
             print(&quot;your jumbled word is:&quot;)
             k=k+1
             m=play()
             if(m==1):      ##if guessed answer is correct,then score and no.of answered count will be increased
                c1+=1
                a1+=1
             else:
                f1+=1       ##else count of no.of failed to answered will be incremented
         else:
             print(&quot;player 2 turn&quot;)
             print(&quot;your jumbled word is:&quot;)
             k=k-1
             m=play()
             if(m==1):
                c2=c2+1
                a2=a2+1
             else:
                f2=f2+1
       if(i==2):
             print(&quot;present status&quot;)
             stat()
       i=int(input(&quot;enter your choice  1.stop 2.status 3.continue&quot;))
       if(i==1):
             stat()
             i=i+3
&lt;/pre&gt;
&lt;hr&gt;
=== JumbledWord Simple Logic, In Short ===
[[File:jumbledWord.gif]]
&lt;hr&gt;
'''Logic to create a Jumbled Word'''
&lt;hr&gt;
&lt;pre&gt;
#Get Jumbled Word and print it Horizontally
import random

def getJumbledWord(b):
    jumble=''
    l1 = [ b[i] for i in range(0, len(b)) ]
    for t in range(len(l1)):
       p=random.choice(l1)     ##this randomly gets letters from the list      
       jumble=jumble+p       
       l1.remove(p)
    return jumble

b=input(&quot;Enter a word to make it jumbled : &quot;)
print(&quot;Jumbled Word : &quot;, getJumbledWord(b))
&lt;/pre&gt;
&lt;hr&gt;
'''Another Logic to create a Jumbled Word'''
&lt;hr&gt;
&lt;pre&gt;
b=input(&quot;Enter a word to make it jumbled : &quot;)

def getJumbledWord1(b):
    l1 = [ b[i] for i in range(0, len(b)) ]
    random.shuffle(l1)
    str1 = ''.join(l1)
    return str1

print(&quot;Jumbled Word : &quot;, getJumbledWord1(b))
&lt;/pre&gt;

====Sample Output:====
&lt;pre&gt;
---- Output1 
Enter a word to make it jumbled : butter
Jumbled Word :  tbture

---- Output2 
Enter a word to make it jumbled : petriotism
Jumbled Word :  pittrosime
&lt;/pre&gt;

=Theory of Evolution=

== What is Evolution ? ==
Evolution is the change in heritable characteristics over successive generations. The theory of evolution explains that DNA, which acts as a carrier of genetic information from one generation to other, tends to change or mutate occasionally. These changes are reflected in next generations to come. This is how life has evolved on earth from bacteria to human beings.&lt;br&gt;
[[File:Evolution.png|500px]]

== Implementation ==
An array representing DNA is stored in a file. As genes are forms of DNA, they contain information to be transferred to forthcoming generations. Assume that information is in the form of bits (in the form of 0s and 1s). A number is picked randomly from 1 to the size of the array. A new parameter has been introduced which decides whether mutation would occur or not. If the value of this new parameter is 1 (It is picked randomly from 1 to 100), then only change is reflected down the generations, otherwise it is not. The pseudo code is as follows :

Input an array containing genetic information .
Randomly generate a number (say m) from 1 to length of the array. Randomly generate other number (say p) from 1 to 100.

&lt;pre&gt; 
    if p is equal to 1 then 
        if m is 1 then
          set it to 0
        else
          set it to 1
&lt;/pre&gt;
[[#TOP]]</text>
      <sha1>sgf3zwiy3eyvd1qsbxkidh5ric6q9ub</sha1>
    </revision>
    <revision>
      <id>3612</id>
      <parentid>3611</parentid>
      <timestamp>2018-09-28T04:24:26Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* Wisdom of Crowds */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="30025">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_3 Contributors of this page]
*Week 3 Playlist: https://www.youtube.com/playlist?list=PLc_j0TNIaWxOVx_z9jAM2UB3RqYNXaoEo
=List=
List is a flexible data structure used for storing a group of data separated by comma. The elements in a list need not be of the same data type.

'''Example:'''
       List_1 = [ 1, 2,3] or 
       List_1 = [&quot;coffee&quot;, &quot;Tea&quot;, &quot;Milk&quot;] or
       List_1 = [1,&quot;coffee&quot;, &quot;Tea&quot;, 3, &quot;5&quot;]

==List Creation==
&lt;pre&gt;a) A list can be created by simply putting values (separated by comma) between square brackets as given below,
       List_1 = [1,&quot;coffee&quot;, &quot;Tea&quot;, 3, &quot;5&quot;] #this creates a list by name List_1 containing following items


Or,
(b)A List can be created from scratch and elements can be added 
        List_2 = [ ]
        List_2.append(&quot;Kala&quot;)
        List_2.append(&quot;Mala&quot;)
Here we use &quot;append&quot; ,which is a function in python that enable us to append or attach an element to a list .
Thus List_2 will now hold [&quot;Kala&quot;,&quot;Mala&quot;]
&lt;/pre&gt;
[[#TOP]]

==Operations and Methods to work with List==
&lt;pre&gt;
a = [25,30,50,90,12,13]
b = [100,300,500,200,250]
&lt;/pre&gt;
&lt;hr&gt;
&lt;table border=2&gt;
  &lt;tr&gt;
    &lt;th&gt;&lt;b&gt;Method/&lt;br&gt;Operator&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Function&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Syntax&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Output&lt;/b&gt;&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;len()&lt;/td&gt;
    &lt;td&gt;Find length of a list&lt;/td&gt;
    &lt;td&gt;len(a)&lt;/td&gt;
    &lt;td&gt;6&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;max()&lt;/td&gt;
    &lt;td&gt;Find maximum element from the list&lt;/td&gt;
    &lt;td&gt;max(a)&lt;/td&gt;
    &lt;td&gt;90&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;min()&lt;/td&gt;
    &lt;td&gt;Find minimum element from the list&lt;/td&gt;
    &lt;td&gt;min(a)&lt;/td&gt;
    &lt;td&gt;12&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sum()&lt;/td&gt;
    &lt;td&gt;Returns sum of all elements of the list&lt;/td&gt;
    &lt;td&gt;sum(a)&lt;/td&gt;
    &lt;td&gt;220&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;reverse()&lt;/td&gt;
    &lt;td&gt;Reverses the original list&lt;/td&gt;
    &lt;td&gt;a.reverse()&lt;/td&gt;
    &lt;td&gt;[13, 12, 90, 50, 30, 25]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sort()&lt;/td&gt;
    &lt;td&gt;Sorts the original list in ascending order&lt;/td&gt;
    &lt;td&gt;a.sort()&lt;/td&gt;
    &lt;td&gt;[12, 13, 25, 30, 50, 90]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sorted()&lt;/td&gt;
    &lt;td&gt;Returns the new sorted list &lt;/td&gt;
    &lt;td&gt;sorted(a)&lt;/td&gt;
    &lt;td&gt;[12, 13, 25, 30, 50, 90]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;insert()&lt;/td&gt;
    &lt;td&gt;Insert at a particular index in the list, and shifts remaining elements&lt;/td&gt;
    &lt;td&gt;a.insert(3,3)&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 3, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;append()&lt;/td&gt;
    &lt;td&gt;Adds elements/object to the end of the list&lt;/td&gt;
    &lt;td&gt;a.append(5)&lt;br&gt;a.append([10,20])&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 5]&lt;br&gt;[25, 30, 50, 90, 12, 13, [10, 20]]&lt;br&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;extend()&lt;/td&gt;
    &lt;td&gt;Adds object to the end of the list as elements not as object&lt;/td&gt;
    &lt;td&gt;a.extend([10,20])&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 10, 20]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;*&amp;nbsp;&amp;nbsp;Repeatation&lt;br&gt;operator&lt;/td&gt;
    &lt;td&gt;Repeat the list for n times and returns a new list&lt;/td&gt;
    &lt;td&gt;a*2&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 25, 30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;+ Concatenation&lt;br&gt;operator&lt;/td&gt;
    &lt;td&gt;Concatenates two lists, and returns a new list&lt;/td&gt;
    &lt;td&gt;a+b&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 100, 300, 500, 200, 250]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;index()&lt;/td&gt;
    &lt;td&gt;Finds index of a particular element in the list or not&lt;/td&gt;
    &lt;td&gt;a.index(25)&lt;br&gt;a.index(0)&lt;br&gt;&lt;/td&gt;
    &lt;td&gt;0&lt;br&gt;&lt;br&gt;ValueError: 0 is not in list&lt;br&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;in operator&lt;/td&gt;
    &lt;td&gt;Finds whether a particular element is in the list or not, returns boolean&lt;/td&gt;
    &lt;td&gt;25 in a&lt;/td&gt;
    &lt;td&gt;True&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;not in operator&lt;/td&gt;
    &lt;td&gt;Checks if element is not available in list, returns boolean&lt;/td&gt;
    &lt;td&gt;25 not in a&lt;/td&gt;
    &lt;td&gt;False&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;count()&lt;/td&gt;
    &lt;td&gt;Counts the number of occurence of an element in the list&lt;/td&gt;
    &lt;td&gt;a.count(25)&lt;/td&gt;
    &lt;td&gt;1&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;remove()&lt;/td&gt;
    &lt;td&gt;Removes an element from the list&lt;/td&gt;
    &lt;td&gt;a.remove(25)&lt;/td&gt;
    &lt;td&gt; [30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;pop()&lt;/td&gt;
    &lt;td&gt;Delete and return item at index 0&lt;/td&gt;
    &lt;td&gt;a.pop(0)&lt;/td&gt;
    &lt;td&gt;25 , a will be [30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;del&lt;/td&gt;
    &lt;td&gt;Deletes item at a particular index from the list&lt;/td&gt;
    &lt;td&gt;del a[0]&lt;/td&gt;
    &lt;td&gt;[30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;all()&lt;/td&gt;
&lt;td&gt;Returns True, if all items in list are True or it is an empty list&lt;/td&gt;
&lt;td&gt;all([True, True, True])
all([])
&lt;/td&gt;
&lt;td&gt;True&lt;br&gt;
True&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;any()&lt;/td&gt;
&lt;td&gt;Returns True, if any item in list is True else return False&lt;/td&gt;
&lt;td&gt;any([True, True, True])&lt;br&gt;
any([True, False, True])&lt;br&gt;
any([])&lt;/td&gt;
&lt;td&gt;True&lt;br&gt;False&lt;br&gt;False&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;

==Printing the List==
=== Print whole list ===
A list can be printed simply or using a ''for / while'' loop 

 print(List_2)     # To print the entire list
This code will print      
 ['Kala','Mala']     

===Print element at a particular index===
&lt;pre&gt;
Using index position
    List_2[0]     # prints 'Kala' ,i.e,the value at index position 0.
    List_2[1]     # prints 'Mala'.
&lt;/pre&gt;
=== Without using index position ===
&lt;pre&gt;
for item in List_2:   # here item is a variable used to access elements in list.
       print(item)
   This code snippet prints 
    Kala
    Mala
&lt;/pre&gt;
[[#TOP]]

==Search for a particular element in list==
Elements in a list can be searched by one of the two ways:
=== using index() function===
&lt;pre&gt;
ages1 = [11,23,12,23,45]

#if element is available in the list, index() returns the index value on which, the element is present.
print(ages1.index(45))#Output: 4

#if element is not available in the list, index() returns ''ValueError''
print(ages1.index(0))#Output: ValueError:
&lt;/pre&gt;

In programming, if such error occurs, program gets terminated. It can be solved using exception handling.
e.g.
&lt;pre&gt;
ages1 = [11,23,12,23,45]

try:
    print(ages1.index(0))
except ValueError:
    print(&quot;Exception has occured&quot;)    
    print(&quot;Element is not found in the list&quot;)

&lt;/pre&gt;
&lt;pre&gt;
'''Output: 
Exception has occured
Element is not found in the list
'''&lt;/pre&gt;
[[#TOP]]

=== using 'in' operator===
''in'' operator is used to check whether a particular element is available in the list or not.e.g.

&lt;pre&gt;
ages1 = [11,23,12,23,45]
no=11

if no in ages1:
    print(&quot;no is there in the list&quot;)
else:    
    print(&quot;no is NOT there in the list&quot;)
&lt;/pre&gt;
&lt;pre&gt;
#Output: no is there in the list
&lt;/pre&gt;


'''Number is not there in the list'''
&lt;pre&gt;
ages1 = [11,23,12,23,45]
no=15

if no in ages1:
    print(&quot;no is there in the list&quot;)
else:    
    print(&quot;no is NOT there in the list&quot;)
&lt;/pre&gt;
&lt;pre&gt;
Output: no is NOT there in the list
&lt;/pre&gt;
[[#TOP]]

==Updating the List==
The lists can be updated using ''append'' or ''insert'' function.  Append adds the element to the end of the list and Insert adds the element in the specified position.
&lt;pre&gt;
   # add the element 'Sheela' to the end of the list.
   List_2.append(&quot;Sheela&quot;)    
   print (List_2) will output 
   ['Kala', 'Mala', 'Sheela']
&lt;/pre&gt;
   &lt;pre&gt;
# add the element &quot;Bala&quot; in the list at the index 1.
   List_2.insert(1,&quot;Bala&quot;)    
   print (List_2) will output 
   ['Kala', 'Bala','Mala', 'Sheela']
&lt;/pre&gt;

=== Extend the list by adding elements of other list at end using extend()===
&lt;pre&gt;
ages = [11,23,12,23,45]
ages.extend([57,58])
print(ages)
&lt;/pre&gt;

&lt;pre&gt;
#Output: [11, 23, 12, 23, 45, 57, 58]
&lt;/pre&gt;

==== Difference between ''append and extend'' ====
Difference between append and extend can be easily understood, by the following example.

&lt;pre&gt;
appendlist = [11,23,12,23,45]
appendlist.append([57,58])

extendlist= [11,23,12,23,45]
extendlist.extend([57,58])
&lt;/pre&gt;

&lt;pre&gt;
'''Output:
[11, 23, 12, 23, 45, [57, 58]]
[11, 23, 12, 23, 45, 57, 58]'''
&lt;/pre&gt;

[[#TOP]]

==Basic Operations on List==
===Frequency of Occurrence===
list.count(object) will return the number of times the object occur in the list.
  '''Example'''
    ages = [11,23,12,23,45,43,22,24,23]
    ages.count(23) will return
    3
    ages.count(100) will return
    0

===Length of the List===
len(list) will return the length of the list ie. the number of objects in the list.
  '''Example'''
&lt;pre&gt;
    ages = [11,23,12,23,45,43,22,24,23]
    len(ages) # Output: 9
&lt;/pre&gt;

To print the objects in the list either use ''for item in list'' or ''for index in range(len(list))''
&lt;pre&gt;
    for item in ages:       
        print (item)  
        (OR)
    for index in range(len(ages)) :
        print (ages[index])
&lt;/pre&gt;

===Sort the List===
list.sort() will sort the list in ascending order
  '''Example'''
    ages = [11,23,12,23,45,43,22,24,23]
    ages.sort() 
    print (ages) 
    [11, 12, 22, 23, 23, 23, 24, 43, 45]

[[#TOP]]

===Sort the List using sorted() function===
sorted(list1) will sort the list and return a new list, it doesn't modify the original list
&lt;br&gt;'''Example: Sort in ascending order'''
&lt;pre&gt;
ages = [11,23,12,23,45,43,22,24,23]
newList=sorted(ages)
print(newList)

#Output: [11, 12, 22, 23, 23, 23, 24, 43, 45]
&lt;/pre&gt;

&lt;br&gt;'''Example: Sort in descending order'''
&lt;pre&gt;
ages = [11,23,12,23,45,43,22,24,23]
newList=sorted(ages,reverse=True)
print(newList)

#Output: [45, 43, 24, 23, 23, 23, 22, 12, 11]
&lt;/pre&gt;

===Reverse the List===
list.reverse() will reverse the original list
  '''Example'''
    ages = [11, 12, 22, 23, 23, 23, 24, 43, 45]
    ages.reverse()
    print (ages)
    [45, 43, 24, 23, 23, 23, 22, 12, 11]

Both sort() and reverse() list operation will work on numeric and alphanumeric data list.

A special use of the reverse() function is to descend a list that is sorted in ascending order.

  '''Example'''
&lt;pre&gt;
ages = [11, 12, 22, 23, 23, 23, 24, 43, 45]
ages.sort()
print(ages)
ages.reverse()
print(ages)
&lt;/pre&gt;

===Slicing===
Used to retrieve an object or objects in a range as a list  
  '''Example'''

Use ''list[index]'' to retrieve the object at the given index
&lt;pre&gt;
In [1]: student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
In [2]: student[3]     #Object at index 3.  Remember index starts at 0
Out[2]: 'Geetha'      
&lt;/pre&gt;

Use ''list[start_index : end_index + 1]'' to retrieve objects from the start_index to end_index 
&lt;pre&gt;
In [3]: student[2:4]     # Objects from index 2 to 3 as List. Note the [ and ]
Out[3]: ['Vijay', 'Geetha']   
&lt;/pre&gt;

Use ''list[:]'' to retrieve objects from the starting of the list to the end of the list. 
The default start value will be the starting index of the list (i.e. 0) and the default end value
will be the length of the list 
&lt;pre&gt;
In [4]: student[:]        # prints the entire list
Out[4]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma', 'Janani']
&lt;/pre&gt;
&lt;pre&gt;
In [5]: student[:5]       # prints the objects from the start of the list upto object at index 4
Out[5]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran']
&lt;/pre&gt;
&lt;pre&gt;
In [6]: student[2:]       # prints the objects from index 2 upto the end of the list
Out[6]: ['Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma', 'Janani']
&lt;/pre&gt;

Negative index too is available in Python. It starts from last element of the list. i.e.
&lt;pre&gt;
In [7]:student[-1]        #prints last index of list
Out[7]: 'Janani'
&lt;/pre&gt;
&lt;pre&gt;
In [8]:student[-1:-8]     #prints empty list
Out[8]: []
&lt;/pre&gt;
&lt;pre&gt;
In [9]:student[-8:-1]     #prints -8th index to -1st index elements
Out[9]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma']
&lt;/pre&gt;

[[#TOP]]

===Removing Item from list ===
----

Is used to remove a specific item from the list.

'''Example:'''
 
Use list.remove(entry/value)  Or   del list[index]    Or list.pop(index)
&lt;pre&gt;
student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
student.remove(&quot;Arun&quot;)   #This will delete item &quot;Arun&quot;
         Or    
del student[0]           # This will delete item at index 0
         Or
student.pop(0)         # This will delete and return item at index 0
print(student)    
Output: &quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
&lt;/pre&gt;

[[#TOP]]

===Delete list ===
----
Used to delete complete list

'''Example'''

Use del &lt;list name&gt;
&lt;pre&gt;
student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
del student&lt;/pre&gt;

===Concatenation of two lists===
----
''+'' is the concatenation operator which is used concatenate two lists. 
&lt;pre&gt;
ages1 = [11,23,12,23,45]
ages2 = [25, 24, 43, 47]
age=ages1+ages2
print(age)
#Output: [11, 23, 12, 23, 45, 25, 24, 43, 47]
&lt;/pre&gt;

===Repeatation of a list ===
----
''*'' is the operator to repeat a particular list.
&lt;pre&gt;
ages1 = [11,23,12,23,45]
age=ages1*5 #ages1 list is repeated 5 times and stroed in ''age'' list
print(age)

#Output: [11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45]
&lt;/pre&gt;

=== all and any for List===
all() and any() are special functions to check whether all elements in iterable is ''True'' or any element is ''True''
&lt;ol&gt;
&lt;li&gt;If all elements in a list are ''True'', '''all()''' will return ''True''&lt;/li&gt;
&lt;li&gt;If iterable is ''empty'', '''all()''' will return ''True''&lt;/li&gt;
&lt;li&gt;If iterable contains at least one ''True'', '''any()''' will return ''True''&lt;/li&gt;
&lt;li&gt;If iterable is ''empty'', '''any()''' will return ''False''&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;
lsit=[True, True, True, True]
print(all(lsit))#Output: True
print(any(lsit))#Output: True

lsit1=[True, False, True, True]
print(all(lsit1))#Output: False
print(any(lsit1))#Output: True

lsit2=[False,False,False]
print(all(lsit2))#Output: False
print(any(lsit2))#Output: False

lsit3=[]
print(all(lsit3))#Output: True
print(any(lsit3))#Output: False
&lt;/pre&gt;

==Conditional Statements==
&lt;pre&gt;Conditionals are used to check the condition and change the flow of the program 
accordingly. They are realized in programming languages through if statement. The 
syntax is as follows :
&lt;pre&gt;
         if condition : 
            statement
&lt;/pre&gt;
    '''Note:''' Do not forget indentation (inserting space/tab) in the line after the
 if condition.
    
    In case you want to execute a set of statements when a condition is true and another

set of statement when the condition is false.
&lt;pre&gt;
         if condition : 
            statement 1
         else :
            statement 2
&lt;/pre&gt;

&lt;pre&gt;    
    Multiple if-else statements can be written as follows:
         if condition_1 : 
            statement 1
         elif condition_2 : # 'elif' is short for 'else if'
            statement 2
         elif condition_3 :
            statement 3
        .
        .
         else :
            final statement
&lt;/pre&gt;

[[#TOP]]

=Loops and Conditionals : Fizzbuzz=
====Loops====
Loops are used to execute a set of repetitive statements. They are realised
through 'while' and 'for' loops in programming languages. The syntax of 'for' loop is 
as follows :
&lt;pre&gt;
for LOOPVARIABLE in SEQUENCE: 
            STATEMENTS&lt;/pre&gt;

    '''e.g.''' to print all the data from a list we can write:
&lt;pre&gt;
for item in list_name:
      print(item)&lt;/pre&gt;
    OR
&lt;pre&gt;
for index in range(len(list_name)):
      print(list_name[index])
 &lt;/pre&gt;   
    The syntax for while loop is as follows :
&lt;pre&gt;    
while BOOLEANEXPRESSION: 
     STATEMENTS
     INCREMENT/DECREMENT
&lt;/pre&gt;    
    '''e.g.''' if we want to print all numbers from 1 to 10
&lt;pre&gt;
i=1
while i&lt;=10 :
    print(i,&quot; &quot;)
    i=i+1
    &lt;/pre&gt;
 
'while' loop has indefinite iteration (run-time unknown). So, there must be loop,  break statement in it.
 Whereas 'for' loop is definite in nature (i.e. known or predictable span).&lt;br&gt;

&lt;b&gt;NOTE: Python doesn't have anything like do-while loop.&lt;/b&gt;

[[#TOP]]

==Implementation==
Here, we try to demonstrate the concept of loops and conditionals through a game called Fizzbuzz. The rules are as follows :&lt;br/&gt;
[[File:fizzBuzz.gif]]

• if input number is a multiple of ’3’ print ”Fizz”
&lt;br/&gt;
• if input number is a multiple of ’5’ print ”Buzz”
&lt;br/&gt;
• if input number is a multiple of both '3' and ’5’ print ”FizzBuzz”
&lt;br/&gt;
The pseudo code is as follows :
&lt;pre&gt;
   If input no % 3 == 0 and  input no % 5 == 0 : 
       print ”Fizzbuzz”
   else if input no % 3 == 0 : 
       print ”Fizz”
   else if input no % 5 == 0 : 
       print ”Buzz”
   else :
       print the input no
&lt;/pre&gt;
The order of statements execution matters to get the desired output. The highest priority condition should be first followed by other. In fizzbuzz programming, first checking should be done for both divisibility of 3 and 5. If condition not satisfied only then it should check individually for 3 or 5. So carefully choosing the order is crucial for better programming.
Note: There is some effect of present condition statements chosen on next conditions statements. That is why in first attempt fizzbuzz programming got struck.

Example: 
&lt;pre&gt;
#Code to achieve the above requirement in python3.
i = int(input(&quot;Enter the number&quot;)) 
if i%3 == 0 and i%5 == 0: print(i,&quot;FizzBuzz&quot;)  
elif i%5 == 0: print(i,&quot;Buzz&quot;)
elif i%3 == 0: print(i,&quot;Fizz&quot;)
else: print(i)
&lt;/pre&gt;
Lets put the same into a loop for a range given by the user.
&lt;pre&gt;
def fizzbuzzgame(start,stop):
    for i in range(start,stop+1):
        if i%3 == 0 and i%5 == 0:
            print(i,&quot;FizzBuzz&quot;)
        elif i%5 == 0:
            print(i,&quot;Buzz&quot;)
        elif i%3 == 0:
            print(i,&quot;Fizz&quot;)
        else: print(i)

fizzbuzzgame(50,100)
&lt;/pre&gt;


=== Fizz Buzz game in Interactive mode with Score ===
'''By Ms. Ami Tusharkant Choksi'''
&lt;pre&gt;
def fizzbuzzgame(i):
        if i%3 == 0 and i%5 == 0:
            print(i,&quot;FizzBuzz&quot;)
            return(&quot;fzbz&quot;)
        elif i%5 == 0:
            print(i,&quot;Buzz&quot;)
            return(&quot;bz&quot;)
        elif i%3 == 0:
            print(i,&quot;Fizz&quot;)
            return(&quot;fz&quot;)
        else:
            print(i)
            return(&quot;no&quot;)

ch = 'y'
fizzbuzz=0
fizz=0
buzz=0
nothing=0
print(&quot;&quot;&quot;

 /$$$$$$$$/$$                  /$$$$$$$                            
| $$_____|__/                 | $$__  $$                           
| $$      /$$/$$$$$$$$/$$$$$$$| $$  \ $$/$$   /$$/$$$$$$$$/$$$$$$$$
| $$$$$  | $|____ /$$|____ /$$| $$$$$$$| $$  | $|____ /$$|____ /$$/
| $$__/  | $$  /$$$$/   /$$$$/| $$__  $| $$  | $$  /$$$$/   /$$$$/ 
| $$     | $$ /$$__/   /$$__/ | $$  \ $| $$  | $$ /$$__/   /$$__/  
| $$     | $$/$$$$$$$$/$$$$$$$| $$$$$$$|  $$$$$$//$$$$$$$$/$$$$$$$$
|__/     |__|________|________|_______/ \______/|________|________/
                                                                  
&quot;&quot;&quot;)   
print('''

  /$$$$$$                                
 /$$__  $$                               
| $$  \__/ /$$$$$$ /$$$$$$/$$$$  /$$$$$$ 
| $$ /$$$$|____  $| $$_  $$_  $$/$$__  $$
| $$|_  $$ /$$$$$$| $$ \ $$ \ $| $$$$$$$$
| $$  \ $$/$$__  $| $$ | $$ | $| $$_____/
|  $$$$$$|  $$$$$$| $$ | $$ | $|  $$$$$$$
 \______/ \_______|__/ |__/ |__/\_______/
                                     
''')

while(ch == 'y'):
    n=int(input(&quot;Enter a Number : &quot;))
    winLoose=fizzbuzzgame(n)
    if(winLoose == &quot;fz&quot;):
        fizz+=1
    elif(winLoose == &quot;bz&quot;):
        buzz+=1
    elif(winLoose == &quot;fzbz&quot;):
        fizzbuzz+=1
    ch=input(&quot;Do you want to continue playing the game : (y/n)&quot;)
    if(ch=='n'):
        print('Congratulations, your score is\n FizzBuzz:%d\nFizz:%d\nBuzz:%d' %
(fizzbuzz,fizz,buzz))
    
'''Sample Output:

 /$$$$$$$$/$$                  /$$$$$$$                            
| $$_____|__/                 | $$__  $$                           
| $$      /$$/$$$$$$$$/$$$$$$$| $$  \ $$/$$   /$$/$$$$$$$$/$$$$$$$$
| $$$$$  | $|____ /$$|____ /$$| $$$$$$$| $$  | $|____ /$$|____ /$$/
| $$__/  | $$  /$$$$/   /$$$$/| $$__  $| $$  | $$  /$$$$/   /$$$$/ 
| $$     | $$ /$$__/   /$$__/ | $$  \ $| $$  | $$ /$$__/   /$$__/  
| $$     | $$/$$$$$$$$/$$$$$$$| $$$$$$$|  $$$$$$//$$$$$$$$/$$$$$$$$
|__/     |__|________|________|_______/ \______/|________|________/
                                                                                                                                   

  /$$$$$$                                
 /$$__  $$                               
| $$  \__/ /$$$$$$ /$$$$$$/$$$$  /$$$$$$ 
| $$ /$$$$|____  $| $$_  $$_  $$/$$__  $$
| $$|_  $$ /$$$$$$| $$ \ $$ \ $| $$$$$$$$
| $$  \ $$/$$__  $| $$ | $$ | $| $$_____/
|  $$$$$$|  $$$$$$| $$ | $$ | $|  $$$$$$$
 \______/ \_______|__/ |__/ |__/\_______/
                                         

Enter a Number : 666
666 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 777
777 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 555
555 FizzBuzz
Do you want to continue playing the game : (y/n)y
Enter a Number : 1
1
Do you want to continue playing the game : (y/n)y
Enter a Number : 789
789 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 25
25 Buzz
Do you want to continue playing the game : (y/n)n
Congratulations, your score is

FizzBuzz:1
Fizz:3
Buzz:1

&lt;/pre&gt;

=Crowd Computing: Just Estimate=
==Wisdom of Crowds==
 &lt;p style=&quot;text-align:justify&quot;&gt;
The concept of ’Wisdom of Crowds’ was proposed by Francis Galton. A weight-judging competition was carried on at the annual show of the West of England Fat Stock and Poultry Exhibition recently held at Plymouth, A fat ox having been selected, competitors bought stamped and numbered cards, each, on which to inscribe their respective names, addresses, and estimates of what the ox would weigh after it had been slaughtered. Those who guessed most successfully received prizes. About 8oo tickets were issued to the par- ticipants. The middlemost estimate of all the estimates recorded was 1207 lbs and the actual weight of the ox was 1198 lbs.&lt;/p&gt;

==Our Experiment==
The crowd had to guess the number of candies/gems in a jar. Around 75 people participated in the experiment. The actual number of gems in the jar were 375. The median of all estimates came out to be 300 and the mean of all the estimates came out to be around 396. Median underestimated and mean overestimated the actual value. So according to recent studies, Trimmed mean must be used as an aggregate measure to estimate where Wisdom of Crowds is involved.
[[File:Gemsjar.jpg|center|200px|caption]]

===Trimmed Mean===
In these kinds of experiments, 10% trimmed mean is usually followed. For calculating 10% trimmed mean, remove 10% smallest and 10% largest values from the sample. Calculate the mean of the sample obtained. In the above experiment, the trimmed mean came out to be around 351 which is very close to the actual value.

==Implementation==
Here, we try to demonstrate the concept of trimmed mean through crowd computing.
 Input a list of estimates done by the crowd .
 Sort the list.
 Remove the 10% smallest values.
 Remove the 10% largest values.
 Calculate the mean of the new list obtained .&lt;hr&gt;

==Data of Experiment==       
    Estimates =[1000,1010,1786,2000,1500,1500,100,120,150,150,150,170,175,180,197,200,200,200,200,200,200,220,220,220,220,234,250,250,250,250,250,250,250,250,250,263,270,275,275,286,300,
                300,300,300,300,300,300,300,320,350,350,350,400, 400,400,400,400,450,467,500,500,500,500,500,500,500,550,550,600,600,600,650,700,700,720]

    '''CODE:'''
&lt;pre&gt;
Estimates = [1000,1010,1786,2000,1500,1500,100,120,150,150,150,170,175,180,197,200,200,200,200,200,200,220,220,220,220,234,250,250,250,250,250,250,250,250,250,263,270,275,275,286,300,                300,300,300,300,300,300,300,320,350,350,350,400,400,400,400,400,450,467,500,500,500,500,500,500,500,550,550,600,600,600,650,700,700,720]
Estimates.sort()
offset = int(0.10*len(Estimates))
for i in range(offset):
       del Estimates[0]
       del Estimates[-1]
Sum = 0    
for i in range(len(Estimates)):
       Sum += Estimates[i]
Mean_Value = Sum/len(Estimates)
print(&quot;Mean : &quot;, int(Mean_Value))
#Output:
Mean :  351
&lt;/pre&gt;
&lt;hr&gt;
==Trimmed Mean for the above example== 
&lt;h3&gt;Using scipy library&lt;/h3&gt;
&lt;pre&gt;
#import scipy to use the method of trim_mean
from scipy import stats
trimMean = stats.trim_mean(Estimates, 0.1) # Trim 10% at both ends
print(&quot;Trimmed Mean : &quot;,trimMean)
#Output:
Trimmed Mean :  335.1020408163265
&lt;/pre&gt;

&lt;h3&gt;Without using scipy library&lt;/h3&gt;
&lt;pre&gt;
#Trimmed mean with 10%
p=10/100
#sorted data
data=[2, 4, 6, 7, 11, 21, 81, 90, 105, 121]
n = len(data)
#Remove elements from both end
rem=int(n*p)
newData = data[rem:-rem]
mean = 0
for i in newData:
    mean += i
mean = int(mean/len(newData))
print(&quot;Trimmed mean : &quot;,mean)
#Output: Trimmed mean :  40
&lt;/pre&gt;
[[#Top]]

=Jumbled_Words Permutations: Jumbled Words=
==What are Permutations ?==
A permutation also called ordering of selected number of elements from a list denoted by nPr here we are choosing all elements of a list and so n=r&lt;br&gt;
nPr=n!/(n-r)!&lt;br&gt; as n=r
nPn=n!&lt;br&gt; which gives all possible arrangement of elements present in a list.

 For example, permutations of list [1,2,3] are [1,2,3], [1,3,2], [2,1,3], [2,3,1], 
[3,1,2], and [3,2,1]. 
The number of permutations of a list of elements nPn is given by n!. For example, there are 2! = 2 x 1 = 2 permutations of [1,2], namely [1,2] and [2,1], and 3! = 3 x 2 x 1 = 6 permutations of [1,2,3], as mentioned above.&lt;br/&gt;
[[File:Permutations.jpg]]

==Implementation==
Here, we try to demonstrate the concept of permutations through jumbled words. It is a two player game in which one person presents the other person a different permutation of the word in his mind. The other person has to guess the right word. If he guesses, the he wins otherwise he loses.
 Input an list of words.
 Randomly pick a word from the list of words .
 Shuffle this word and present it to the other player.
 if word guesses by the player is same as the one picked from list of w
     player wins
 else
     player loses

ALTERNATE CODE TO GENERATE THIS GAME:
&lt;pre&gt;
import random
p1=input(&quot;enter player 1 name:&quot;)
p2=input(&quot;enter player 2 name:&quot;)
l=[&quot;rainbow&quot;,&quot;computer&quot;,&quot;robot&quot;,&quot;butter&quot;,&quot;vegetable&quot;,&quot;science&quot;,&quot;correct&quot;]
c1=c2=a1=a2=f1=f2=0
k=1
i=3
def play():
    n=random.choice(l)        ##n=chooses a word from list l
    l1=[]
    for j in n:
       l1.append(j)      ##creates a list for word in n
    for t in range(len(l1)):
       p=random.choice(l1)     ##this randomly displays letters in the list
       print(p)
       l1.remove(p)          ##to avoid the repetition of a letter
    s=input(&quot;enter the word:&quot;)
    if(s==n):
        print(&quot;correct&quot;)
        return 1
    else:
        print(&quot;not correct&quot;)
        print(&quot;answer is&quot;,n)
        return 0
def stat():
     print(&quot;player 1:&quot;)
     print(&quot;score:&quot;,c1)
     print(&quot;answered:&quot;,a1)
     print(&quot;failed:&quot;,f1)
     print(&quot;.............&quot;)
     print(&quot;player 2:&quot;)
     print(&quot;score:&quot;,c2)
     print(&quot;answered:&quot;,a2)
     print(&quot;failed&quot;,f2)
     if(c1&gt;c2):
         print(p1,&quot; won over &quot;,p2)
     elif(c1==c2):
         print(&quot;draw game&quot;)
     else:
         print(p2,&quot; won over &quot;,p1) 
while(i!=4):
      if(i==3):
         if(k==1):
             print(&quot;player 1 turn&quot;)
             print(&quot;your jumbled word is:&quot;)
             k=k+1
             m=play()
             if(m==1):      ##if guessed answer is correct,then score and no.of answered count will be increased
                c1+=1
                a1+=1
             else:
                f1+=1       ##else count of no.of failed to answered will be incremented
         else:
             print(&quot;player 2 turn&quot;)
             print(&quot;your jumbled word is:&quot;)
             k=k-1
             m=play()
             if(m==1):
                c2=c2+1
                a2=a2+1
             else:
                f2=f2+1
       if(i==2):
             print(&quot;present status&quot;)
             stat()
       i=int(input(&quot;enter your choice  1.stop 2.status 3.continue&quot;))
       if(i==1):
             stat()
             i=i+3
&lt;/pre&gt;
&lt;hr&gt;
=== JumbledWord Simple Logic, In Short ===
[[File:jumbledWord.gif]]
&lt;hr&gt;
'''Logic to create a Jumbled Word'''
&lt;hr&gt;
&lt;pre&gt;
#Get Jumbled Word and print it Horizontally
import random

def getJumbledWord(b):
    jumble=''
    l1 = [ b[i] for i in range(0, len(b)) ]
    for t in range(len(l1)):
       p=random.choice(l1)     ##this randomly gets letters from the list      
       jumble=jumble+p       
       l1.remove(p)
    return jumble

b=input(&quot;Enter a word to make it jumbled : &quot;)
print(&quot;Jumbled Word : &quot;, getJumbledWord(b))
&lt;/pre&gt;
&lt;hr&gt;
'''Another Logic to create a Jumbled Word'''
&lt;hr&gt;
&lt;pre&gt;
b=input(&quot;Enter a word to make it jumbled : &quot;)

def getJumbledWord1(b):
    l1 = [ b[i] for i in range(0, len(b)) ]
    random.shuffle(l1)
    str1 = ''.join(l1)
    return str1

print(&quot;Jumbled Word : &quot;, getJumbledWord1(b))
&lt;/pre&gt;

====Sample Output:====
&lt;pre&gt;
---- Output1 
Enter a word to make it jumbled : butter
Jumbled Word :  tbture

---- Output2 
Enter a word to make it jumbled : petriotism
Jumbled Word :  pittrosime
&lt;/pre&gt;

=Theory of Evolution=

== What is Evolution ? ==
Evolution is the change in heritable characteristics over successive generations. The theory of evolution explains that DNA, which acts as a carrier of genetic information from one generation to other, tends to change or mutate occasionally. These changes are reflected in next generations to come. This is how life has evolved on earth from bacteria to human beings.&lt;br&gt;
[[File:Evolution.png|500px]]

== Implementation ==
An array representing DNA is stored in a file. As genes are forms of DNA, they contain information to be transferred to forthcoming generations. Assume that information is in the form of bits (in the form of 0s and 1s). A number is picked randomly from 1 to the size of the array. A new parameter has been introduced which decides whether mutation would occur or not. If the value of this new parameter is 1 (It is picked randomly from 1 to 100), then only change is reflected down the generations, otherwise it is not. The pseudo code is as follows :

Input an array containing genetic information .
Randomly generate a number (say m) from 1 to length of the array. Randomly generate other number (say p) from 1 to 100.

&lt;pre&gt; 
    if p is equal to 1 then 
        if m is 1 then
          set it to 0
        else
          set it to 1
&lt;/pre&gt;
[[#TOP]]</text>
      <sha1>goxn36rj257b7cedyx54n5wiaedgcrq</sha1>
    </revision>
    <revision>
      <id>3613</id>
      <parentid>3612</parentid>
      <timestamp>2018-09-28T04:24:53Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* Our Experiment */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="30062">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_3 Contributors of this page]
*Week 3 Playlist: https://www.youtube.com/playlist?list=PLc_j0TNIaWxOVx_z9jAM2UB3RqYNXaoEo
=List=
List is a flexible data structure used for storing a group of data separated by comma. The elements in a list need not be of the same data type.

'''Example:'''
       List_1 = [ 1, 2,3] or 
       List_1 = [&quot;coffee&quot;, &quot;Tea&quot;, &quot;Milk&quot;] or
       List_1 = [1,&quot;coffee&quot;, &quot;Tea&quot;, 3, &quot;5&quot;]

==List Creation==
&lt;pre&gt;a) A list can be created by simply putting values (separated by comma) between square brackets as given below,
       List_1 = [1,&quot;coffee&quot;, &quot;Tea&quot;, 3, &quot;5&quot;] #this creates a list by name List_1 containing following items


Or,
(b)A List can be created from scratch and elements can be added 
        List_2 = [ ]
        List_2.append(&quot;Kala&quot;)
        List_2.append(&quot;Mala&quot;)
Here we use &quot;append&quot; ,which is a function in python that enable us to append or attach an element to a list .
Thus List_2 will now hold [&quot;Kala&quot;,&quot;Mala&quot;]
&lt;/pre&gt;
[[#TOP]]

==Operations and Methods to work with List==
&lt;pre&gt;
a = [25,30,50,90,12,13]
b = [100,300,500,200,250]
&lt;/pre&gt;
&lt;hr&gt;
&lt;table border=2&gt;
  &lt;tr&gt;
    &lt;th&gt;&lt;b&gt;Method/&lt;br&gt;Operator&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Function&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Syntax&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Output&lt;/b&gt;&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;len()&lt;/td&gt;
    &lt;td&gt;Find length of a list&lt;/td&gt;
    &lt;td&gt;len(a)&lt;/td&gt;
    &lt;td&gt;6&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;max()&lt;/td&gt;
    &lt;td&gt;Find maximum element from the list&lt;/td&gt;
    &lt;td&gt;max(a)&lt;/td&gt;
    &lt;td&gt;90&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;min()&lt;/td&gt;
    &lt;td&gt;Find minimum element from the list&lt;/td&gt;
    &lt;td&gt;min(a)&lt;/td&gt;
    &lt;td&gt;12&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sum()&lt;/td&gt;
    &lt;td&gt;Returns sum of all elements of the list&lt;/td&gt;
    &lt;td&gt;sum(a)&lt;/td&gt;
    &lt;td&gt;220&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;reverse()&lt;/td&gt;
    &lt;td&gt;Reverses the original list&lt;/td&gt;
    &lt;td&gt;a.reverse()&lt;/td&gt;
    &lt;td&gt;[13, 12, 90, 50, 30, 25]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sort()&lt;/td&gt;
    &lt;td&gt;Sorts the original list in ascending order&lt;/td&gt;
    &lt;td&gt;a.sort()&lt;/td&gt;
    &lt;td&gt;[12, 13, 25, 30, 50, 90]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sorted()&lt;/td&gt;
    &lt;td&gt;Returns the new sorted list &lt;/td&gt;
    &lt;td&gt;sorted(a)&lt;/td&gt;
    &lt;td&gt;[12, 13, 25, 30, 50, 90]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;insert()&lt;/td&gt;
    &lt;td&gt;Insert at a particular index in the list, and shifts remaining elements&lt;/td&gt;
    &lt;td&gt;a.insert(3,3)&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 3, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;append()&lt;/td&gt;
    &lt;td&gt;Adds elements/object to the end of the list&lt;/td&gt;
    &lt;td&gt;a.append(5)&lt;br&gt;a.append([10,20])&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 5]&lt;br&gt;[25, 30, 50, 90, 12, 13, [10, 20]]&lt;br&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;extend()&lt;/td&gt;
    &lt;td&gt;Adds object to the end of the list as elements not as object&lt;/td&gt;
    &lt;td&gt;a.extend([10,20])&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 10, 20]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;*&amp;nbsp;&amp;nbsp;Repeatation&lt;br&gt;operator&lt;/td&gt;
    &lt;td&gt;Repeat the list for n times and returns a new list&lt;/td&gt;
    &lt;td&gt;a*2&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 25, 30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;+ Concatenation&lt;br&gt;operator&lt;/td&gt;
    &lt;td&gt;Concatenates two lists, and returns a new list&lt;/td&gt;
    &lt;td&gt;a+b&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 100, 300, 500, 200, 250]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;index()&lt;/td&gt;
    &lt;td&gt;Finds index of a particular element in the list or not&lt;/td&gt;
    &lt;td&gt;a.index(25)&lt;br&gt;a.index(0)&lt;br&gt;&lt;/td&gt;
    &lt;td&gt;0&lt;br&gt;&lt;br&gt;ValueError: 0 is not in list&lt;br&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;in operator&lt;/td&gt;
    &lt;td&gt;Finds whether a particular element is in the list or not, returns boolean&lt;/td&gt;
    &lt;td&gt;25 in a&lt;/td&gt;
    &lt;td&gt;True&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;not in operator&lt;/td&gt;
    &lt;td&gt;Checks if element is not available in list, returns boolean&lt;/td&gt;
    &lt;td&gt;25 not in a&lt;/td&gt;
    &lt;td&gt;False&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;count()&lt;/td&gt;
    &lt;td&gt;Counts the number of occurence of an element in the list&lt;/td&gt;
    &lt;td&gt;a.count(25)&lt;/td&gt;
    &lt;td&gt;1&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;remove()&lt;/td&gt;
    &lt;td&gt;Removes an element from the list&lt;/td&gt;
    &lt;td&gt;a.remove(25)&lt;/td&gt;
    &lt;td&gt; [30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;pop()&lt;/td&gt;
    &lt;td&gt;Delete and return item at index 0&lt;/td&gt;
    &lt;td&gt;a.pop(0)&lt;/td&gt;
    &lt;td&gt;25 , a will be [30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;del&lt;/td&gt;
    &lt;td&gt;Deletes item at a particular index from the list&lt;/td&gt;
    &lt;td&gt;del a[0]&lt;/td&gt;
    &lt;td&gt;[30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;all()&lt;/td&gt;
&lt;td&gt;Returns True, if all items in list are True or it is an empty list&lt;/td&gt;
&lt;td&gt;all([True, True, True])
all([])
&lt;/td&gt;
&lt;td&gt;True&lt;br&gt;
True&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;any()&lt;/td&gt;
&lt;td&gt;Returns True, if any item in list is True else return False&lt;/td&gt;
&lt;td&gt;any([True, True, True])&lt;br&gt;
any([True, False, True])&lt;br&gt;
any([])&lt;/td&gt;
&lt;td&gt;True&lt;br&gt;False&lt;br&gt;False&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;

==Printing the List==
=== Print whole list ===
A list can be printed simply or using a ''for / while'' loop 

 print(List_2)     # To print the entire list
This code will print      
 ['Kala','Mala']     

===Print element at a particular index===
&lt;pre&gt;
Using index position
    List_2[0]     # prints 'Kala' ,i.e,the value at index position 0.
    List_2[1]     # prints 'Mala'.
&lt;/pre&gt;
=== Without using index position ===
&lt;pre&gt;
for item in List_2:   # here item is a variable used to access elements in list.
       print(item)
   This code snippet prints 
    Kala
    Mala
&lt;/pre&gt;
[[#TOP]]

==Search for a particular element in list==
Elements in a list can be searched by one of the two ways:
=== using index() function===
&lt;pre&gt;
ages1 = [11,23,12,23,45]

#if element is available in the list, index() returns the index value on which, the element is present.
print(ages1.index(45))#Output: 4

#if element is not available in the list, index() returns ''ValueError''
print(ages1.index(0))#Output: ValueError:
&lt;/pre&gt;

In programming, if such error occurs, program gets terminated. It can be solved using exception handling.
e.g.
&lt;pre&gt;
ages1 = [11,23,12,23,45]

try:
    print(ages1.index(0))
except ValueError:
    print(&quot;Exception has occured&quot;)    
    print(&quot;Element is not found in the list&quot;)

&lt;/pre&gt;
&lt;pre&gt;
'''Output: 
Exception has occured
Element is not found in the list
'''&lt;/pre&gt;
[[#TOP]]

=== using 'in' operator===
''in'' operator is used to check whether a particular element is available in the list or not.e.g.

&lt;pre&gt;
ages1 = [11,23,12,23,45]
no=11

if no in ages1:
    print(&quot;no is there in the list&quot;)
else:    
    print(&quot;no is NOT there in the list&quot;)
&lt;/pre&gt;
&lt;pre&gt;
#Output: no is there in the list
&lt;/pre&gt;


'''Number is not there in the list'''
&lt;pre&gt;
ages1 = [11,23,12,23,45]
no=15

if no in ages1:
    print(&quot;no is there in the list&quot;)
else:    
    print(&quot;no is NOT there in the list&quot;)
&lt;/pre&gt;
&lt;pre&gt;
Output: no is NOT there in the list
&lt;/pre&gt;
[[#TOP]]

==Updating the List==
The lists can be updated using ''append'' or ''insert'' function.  Append adds the element to the end of the list and Insert adds the element in the specified position.
&lt;pre&gt;
   # add the element 'Sheela' to the end of the list.
   List_2.append(&quot;Sheela&quot;)    
   print (List_2) will output 
   ['Kala', 'Mala', 'Sheela']
&lt;/pre&gt;
   &lt;pre&gt;
# add the element &quot;Bala&quot; in the list at the index 1.
   List_2.insert(1,&quot;Bala&quot;)    
   print (List_2) will output 
   ['Kala', 'Bala','Mala', 'Sheela']
&lt;/pre&gt;

=== Extend the list by adding elements of other list at end using extend()===
&lt;pre&gt;
ages = [11,23,12,23,45]
ages.extend([57,58])
print(ages)
&lt;/pre&gt;

&lt;pre&gt;
#Output: [11, 23, 12, 23, 45, 57, 58]
&lt;/pre&gt;

==== Difference between ''append and extend'' ====
Difference between append and extend can be easily understood, by the following example.

&lt;pre&gt;
appendlist = [11,23,12,23,45]
appendlist.append([57,58])

extendlist= [11,23,12,23,45]
extendlist.extend([57,58])
&lt;/pre&gt;

&lt;pre&gt;
'''Output:
[11, 23, 12, 23, 45, [57, 58]]
[11, 23, 12, 23, 45, 57, 58]'''
&lt;/pre&gt;

[[#TOP]]

==Basic Operations on List==
===Frequency of Occurrence===
list.count(object) will return the number of times the object occur in the list.
  '''Example'''
    ages = [11,23,12,23,45,43,22,24,23]
    ages.count(23) will return
    3
    ages.count(100) will return
    0

===Length of the List===
len(list) will return the length of the list ie. the number of objects in the list.
  '''Example'''
&lt;pre&gt;
    ages = [11,23,12,23,45,43,22,24,23]
    len(ages) # Output: 9
&lt;/pre&gt;

To print the objects in the list either use ''for item in list'' or ''for index in range(len(list))''
&lt;pre&gt;
    for item in ages:       
        print (item)  
        (OR)
    for index in range(len(ages)) :
        print (ages[index])
&lt;/pre&gt;

===Sort the List===
list.sort() will sort the list in ascending order
  '''Example'''
    ages = [11,23,12,23,45,43,22,24,23]
    ages.sort() 
    print (ages) 
    [11, 12, 22, 23, 23, 23, 24, 43, 45]

[[#TOP]]

===Sort the List using sorted() function===
sorted(list1) will sort the list and return a new list, it doesn't modify the original list
&lt;br&gt;'''Example: Sort in ascending order'''
&lt;pre&gt;
ages = [11,23,12,23,45,43,22,24,23]
newList=sorted(ages)
print(newList)

#Output: [11, 12, 22, 23, 23, 23, 24, 43, 45]
&lt;/pre&gt;

&lt;br&gt;'''Example: Sort in descending order'''
&lt;pre&gt;
ages = [11,23,12,23,45,43,22,24,23]
newList=sorted(ages,reverse=True)
print(newList)

#Output: [45, 43, 24, 23, 23, 23, 22, 12, 11]
&lt;/pre&gt;

===Reverse the List===
list.reverse() will reverse the original list
  '''Example'''
    ages = [11, 12, 22, 23, 23, 23, 24, 43, 45]
    ages.reverse()
    print (ages)
    [45, 43, 24, 23, 23, 23, 22, 12, 11]

Both sort() and reverse() list operation will work on numeric and alphanumeric data list.

A special use of the reverse() function is to descend a list that is sorted in ascending order.

  '''Example'''
&lt;pre&gt;
ages = [11, 12, 22, 23, 23, 23, 24, 43, 45]
ages.sort()
print(ages)
ages.reverse()
print(ages)
&lt;/pre&gt;

===Slicing===
Used to retrieve an object or objects in a range as a list  
  '''Example'''

Use ''list[index]'' to retrieve the object at the given index
&lt;pre&gt;
In [1]: student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
In [2]: student[3]     #Object at index 3.  Remember index starts at 0
Out[2]: 'Geetha'      
&lt;/pre&gt;

Use ''list[start_index : end_index + 1]'' to retrieve objects from the start_index to end_index 
&lt;pre&gt;
In [3]: student[2:4]     # Objects from index 2 to 3 as List. Note the [ and ]
Out[3]: ['Vijay', 'Geetha']   
&lt;/pre&gt;

Use ''list[:]'' to retrieve objects from the starting of the list to the end of the list. 
The default start value will be the starting index of the list (i.e. 0) and the default end value
will be the length of the list 
&lt;pre&gt;
In [4]: student[:]        # prints the entire list
Out[4]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma', 'Janani']
&lt;/pre&gt;
&lt;pre&gt;
In [5]: student[:5]       # prints the objects from the start of the list upto object at index 4
Out[5]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran']
&lt;/pre&gt;
&lt;pre&gt;
In [6]: student[2:]       # prints the objects from index 2 upto the end of the list
Out[6]: ['Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma', 'Janani']
&lt;/pre&gt;

Negative index too is available in Python. It starts from last element of the list. i.e.
&lt;pre&gt;
In [7]:student[-1]        #prints last index of list
Out[7]: 'Janani'
&lt;/pre&gt;
&lt;pre&gt;
In [8]:student[-1:-8]     #prints empty list
Out[8]: []
&lt;/pre&gt;
&lt;pre&gt;
In [9]:student[-8:-1]     #prints -8th index to -1st index elements
Out[9]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma']
&lt;/pre&gt;

[[#TOP]]

===Removing Item from list ===
----

Is used to remove a specific item from the list.

'''Example:'''
 
Use list.remove(entry/value)  Or   del list[index]    Or list.pop(index)
&lt;pre&gt;
student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
student.remove(&quot;Arun&quot;)   #This will delete item &quot;Arun&quot;
         Or    
del student[0]           # This will delete item at index 0
         Or
student.pop(0)         # This will delete and return item at index 0
print(student)    
Output: &quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
&lt;/pre&gt;

[[#TOP]]

===Delete list ===
----
Used to delete complete list

'''Example'''

Use del &lt;list name&gt;
&lt;pre&gt;
student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
del student&lt;/pre&gt;

===Concatenation of two lists===
----
''+'' is the concatenation operator which is used concatenate two lists. 
&lt;pre&gt;
ages1 = [11,23,12,23,45]
ages2 = [25, 24, 43, 47]
age=ages1+ages2
print(age)
#Output: [11, 23, 12, 23, 45, 25, 24, 43, 47]
&lt;/pre&gt;

===Repeatation of a list ===
----
''*'' is the operator to repeat a particular list.
&lt;pre&gt;
ages1 = [11,23,12,23,45]
age=ages1*5 #ages1 list is repeated 5 times and stroed in ''age'' list
print(age)

#Output: [11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45]
&lt;/pre&gt;

=== all and any for List===
all() and any() are special functions to check whether all elements in iterable is ''True'' or any element is ''True''
&lt;ol&gt;
&lt;li&gt;If all elements in a list are ''True'', '''all()''' will return ''True''&lt;/li&gt;
&lt;li&gt;If iterable is ''empty'', '''all()''' will return ''True''&lt;/li&gt;
&lt;li&gt;If iterable contains at least one ''True'', '''any()''' will return ''True''&lt;/li&gt;
&lt;li&gt;If iterable is ''empty'', '''any()''' will return ''False''&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;
lsit=[True, True, True, True]
print(all(lsit))#Output: True
print(any(lsit))#Output: True

lsit1=[True, False, True, True]
print(all(lsit1))#Output: False
print(any(lsit1))#Output: True

lsit2=[False,False,False]
print(all(lsit2))#Output: False
print(any(lsit2))#Output: False

lsit3=[]
print(all(lsit3))#Output: True
print(any(lsit3))#Output: False
&lt;/pre&gt;

==Conditional Statements==
&lt;pre&gt;Conditionals are used to check the condition and change the flow of the program 
accordingly. They are realized in programming languages through if statement. The 
syntax is as follows :
&lt;pre&gt;
         if condition : 
            statement
&lt;/pre&gt;
    '''Note:''' Do not forget indentation (inserting space/tab) in the line after the
 if condition.
    
    In case you want to execute a set of statements when a condition is true and another

set of statement when the condition is false.
&lt;pre&gt;
         if condition : 
            statement 1
         else :
            statement 2
&lt;/pre&gt;

&lt;pre&gt;    
    Multiple if-else statements can be written as follows:
         if condition_1 : 
            statement 1
         elif condition_2 : # 'elif' is short for 'else if'
            statement 2
         elif condition_3 :
            statement 3
        .
        .
         else :
            final statement
&lt;/pre&gt;

[[#TOP]]

=Loops and Conditionals : Fizzbuzz=
====Loops====
Loops are used to execute a set of repetitive statements. They are realised
through 'while' and 'for' loops in programming languages. The syntax of 'for' loop is 
as follows :
&lt;pre&gt;
for LOOPVARIABLE in SEQUENCE: 
            STATEMENTS&lt;/pre&gt;

    '''e.g.''' to print all the data from a list we can write:
&lt;pre&gt;
for item in list_name:
      print(item)&lt;/pre&gt;
    OR
&lt;pre&gt;
for index in range(len(list_name)):
      print(list_name[index])
 &lt;/pre&gt;   
    The syntax for while loop is as follows :
&lt;pre&gt;    
while BOOLEANEXPRESSION: 
     STATEMENTS
     INCREMENT/DECREMENT
&lt;/pre&gt;    
    '''e.g.''' if we want to print all numbers from 1 to 10
&lt;pre&gt;
i=1
while i&lt;=10 :
    print(i,&quot; &quot;)
    i=i+1
    &lt;/pre&gt;
 
'while' loop has indefinite iteration (run-time unknown). So, there must be loop,  break statement in it.
 Whereas 'for' loop is definite in nature (i.e. known or predictable span).&lt;br&gt;

&lt;b&gt;NOTE: Python doesn't have anything like do-while loop.&lt;/b&gt;

[[#TOP]]

==Implementation==
Here, we try to demonstrate the concept of loops and conditionals through a game called Fizzbuzz. The rules are as follows :&lt;br/&gt;
[[File:fizzBuzz.gif]]

• if input number is a multiple of ’3’ print ”Fizz”
&lt;br/&gt;
• if input number is a multiple of ’5’ print ”Buzz”
&lt;br/&gt;
• if input number is a multiple of both '3' and ’5’ print ”FizzBuzz”
&lt;br/&gt;
The pseudo code is as follows :
&lt;pre&gt;
   If input no % 3 == 0 and  input no % 5 == 0 : 
       print ”Fizzbuzz”
   else if input no % 3 == 0 : 
       print ”Fizz”
   else if input no % 5 == 0 : 
       print ”Buzz”
   else :
       print the input no
&lt;/pre&gt;
The order of statements execution matters to get the desired output. The highest priority condition should be first followed by other. In fizzbuzz programming, first checking should be done for both divisibility of 3 and 5. If condition not satisfied only then it should check individually for 3 or 5. So carefully choosing the order is crucial for better programming.
Note: There is some effect of present condition statements chosen on next conditions statements. That is why in first attempt fizzbuzz programming got struck.

Example: 
&lt;pre&gt;
#Code to achieve the above requirement in python3.
i = int(input(&quot;Enter the number&quot;)) 
if i%3 == 0 and i%5 == 0: print(i,&quot;FizzBuzz&quot;)  
elif i%5 == 0: print(i,&quot;Buzz&quot;)
elif i%3 == 0: print(i,&quot;Fizz&quot;)
else: print(i)
&lt;/pre&gt;
Lets put the same into a loop for a range given by the user.
&lt;pre&gt;
def fizzbuzzgame(start,stop):
    for i in range(start,stop+1):
        if i%3 == 0 and i%5 == 0:
            print(i,&quot;FizzBuzz&quot;)
        elif i%5 == 0:
            print(i,&quot;Buzz&quot;)
        elif i%3 == 0:
            print(i,&quot;Fizz&quot;)
        else: print(i)

fizzbuzzgame(50,100)
&lt;/pre&gt;


=== Fizz Buzz game in Interactive mode with Score ===
'''By Ms. Ami Tusharkant Choksi'''
&lt;pre&gt;
def fizzbuzzgame(i):
        if i%3 == 0 and i%5 == 0:
            print(i,&quot;FizzBuzz&quot;)
            return(&quot;fzbz&quot;)
        elif i%5 == 0:
            print(i,&quot;Buzz&quot;)
            return(&quot;bz&quot;)
        elif i%3 == 0:
            print(i,&quot;Fizz&quot;)
            return(&quot;fz&quot;)
        else:
            print(i)
            return(&quot;no&quot;)

ch = 'y'
fizzbuzz=0
fizz=0
buzz=0
nothing=0
print(&quot;&quot;&quot;

 /$$$$$$$$/$$                  /$$$$$$$                            
| $$_____|__/                 | $$__  $$                           
| $$      /$$/$$$$$$$$/$$$$$$$| $$  \ $$/$$   /$$/$$$$$$$$/$$$$$$$$
| $$$$$  | $|____ /$$|____ /$$| $$$$$$$| $$  | $|____ /$$|____ /$$/
| $$__/  | $$  /$$$$/   /$$$$/| $$__  $| $$  | $$  /$$$$/   /$$$$/ 
| $$     | $$ /$$__/   /$$__/ | $$  \ $| $$  | $$ /$$__/   /$$__/  
| $$     | $$/$$$$$$$$/$$$$$$$| $$$$$$$|  $$$$$$//$$$$$$$$/$$$$$$$$
|__/     |__|________|________|_______/ \______/|________|________/
                                                                  
&quot;&quot;&quot;)   
print('''

  /$$$$$$                                
 /$$__  $$                               
| $$  \__/ /$$$$$$ /$$$$$$/$$$$  /$$$$$$ 
| $$ /$$$$|____  $| $$_  $$_  $$/$$__  $$
| $$|_  $$ /$$$$$$| $$ \ $$ \ $| $$$$$$$$
| $$  \ $$/$$__  $| $$ | $$ | $| $$_____/
|  $$$$$$|  $$$$$$| $$ | $$ | $|  $$$$$$$
 \______/ \_______|__/ |__/ |__/\_______/
                                     
''')

while(ch == 'y'):
    n=int(input(&quot;Enter a Number : &quot;))
    winLoose=fizzbuzzgame(n)
    if(winLoose == &quot;fz&quot;):
        fizz+=1
    elif(winLoose == &quot;bz&quot;):
        buzz+=1
    elif(winLoose == &quot;fzbz&quot;):
        fizzbuzz+=1
    ch=input(&quot;Do you want to continue playing the game : (y/n)&quot;)
    if(ch=='n'):
        print('Congratulations, your score is\n FizzBuzz:%d\nFizz:%d\nBuzz:%d' %
(fizzbuzz,fizz,buzz))
    
'''Sample Output:

 /$$$$$$$$/$$                  /$$$$$$$                            
| $$_____|__/                 | $$__  $$                           
| $$      /$$/$$$$$$$$/$$$$$$$| $$  \ $$/$$   /$$/$$$$$$$$/$$$$$$$$
| $$$$$  | $|____ /$$|____ /$$| $$$$$$$| $$  | $|____ /$$|____ /$$/
| $$__/  | $$  /$$$$/   /$$$$/| $$__  $| $$  | $$  /$$$$/   /$$$$/ 
| $$     | $$ /$$__/   /$$__/ | $$  \ $| $$  | $$ /$$__/   /$$__/  
| $$     | $$/$$$$$$$$/$$$$$$$| $$$$$$$|  $$$$$$//$$$$$$$$/$$$$$$$$
|__/     |__|________|________|_______/ \______/|________|________/
                                                                                                                                   

  /$$$$$$                                
 /$$__  $$                               
| $$  \__/ /$$$$$$ /$$$$$$/$$$$  /$$$$$$ 
| $$ /$$$$|____  $| $$_  $$_  $$/$$__  $$
| $$|_  $$ /$$$$$$| $$ \ $$ \ $| $$$$$$$$
| $$  \ $$/$$__  $| $$ | $$ | $| $$_____/
|  $$$$$$|  $$$$$$| $$ | $$ | $|  $$$$$$$
 \______/ \_______|__/ |__/ |__/\_______/
                                         

Enter a Number : 666
666 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 777
777 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 555
555 FizzBuzz
Do you want to continue playing the game : (y/n)y
Enter a Number : 1
1
Do you want to continue playing the game : (y/n)y
Enter a Number : 789
789 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 25
25 Buzz
Do you want to continue playing the game : (y/n)n
Congratulations, your score is

FizzBuzz:1
Fizz:3
Buzz:1

&lt;/pre&gt;

=Crowd Computing: Just Estimate=
==Wisdom of Crowds==
 &lt;p style=&quot;text-align:justify&quot;&gt;
The concept of ’Wisdom of Crowds’ was proposed by Francis Galton. A weight-judging competition was carried on at the annual show of the West of England Fat Stock and Poultry Exhibition recently held at Plymouth, A fat ox having been selected, competitors bought stamped and numbered cards, each, on which to inscribe their respective names, addresses, and estimates of what the ox would weigh after it had been slaughtered. Those who guessed most successfully received prizes. About 8oo tickets were issued to the par- ticipants. The middlemost estimate of all the estimates recorded was 1207 lbs and the actual weight of the ox was 1198 lbs.&lt;/p&gt;

==Our Experiment==
 &lt;p style=&quot;text-align:justify&quot;&gt;
The crowd had to guess the number of candies/gems in a jar. Around 75 people participated in the experiment. The actual number of gems in the jar were 375. The median of all estimates came out to be 300 and the mean of all the estimates came out to be around 396. Median underestimated and mean overestimated the actual value. So according to recent studies, Trimmed mean must be used as an aggregate measure to estimate where Wisdom of Crowds is involved.
&lt;/p&gt;
[[File:Gemsjar.jpg|center|200px|caption]]

===Trimmed Mean===
In these kinds of experiments, 10% trimmed mean is usually followed. For calculating 10% trimmed mean, remove 10% smallest and 10% largest values from the sample. Calculate the mean of the sample obtained. In the above experiment, the trimmed mean came out to be around 351 which is very close to the actual value.

==Implementation==
Here, we try to demonstrate the concept of trimmed mean through crowd computing.
 Input a list of estimates done by the crowd .
 Sort the list.
 Remove the 10% smallest values.
 Remove the 10% largest values.
 Calculate the mean of the new list obtained .&lt;hr&gt;

==Data of Experiment==       
    Estimates =[1000,1010,1786,2000,1500,1500,100,120,150,150,150,170,175,180,197,200,200,200,200,200,200,220,220,220,220,234,250,250,250,250,250,250,250,250,250,263,270,275,275,286,300,
                300,300,300,300,300,300,300,320,350,350,350,400, 400,400,400,400,450,467,500,500,500,500,500,500,500,550,550,600,600,600,650,700,700,720]

    '''CODE:'''
&lt;pre&gt;
Estimates = [1000,1010,1786,2000,1500,1500,100,120,150,150,150,170,175,180,197,200,200,200,200,200,200,220,220,220,220,234,250,250,250,250,250,250,250,250,250,263,270,275,275,286,300,                300,300,300,300,300,300,300,320,350,350,350,400,400,400,400,400,450,467,500,500,500,500,500,500,500,550,550,600,600,600,650,700,700,720]
Estimates.sort()
offset = int(0.10*len(Estimates))
for i in range(offset):
       del Estimates[0]
       del Estimates[-1]
Sum = 0    
for i in range(len(Estimates)):
       Sum += Estimates[i]
Mean_Value = Sum/len(Estimates)
print(&quot;Mean : &quot;, int(Mean_Value))
#Output:
Mean :  351
&lt;/pre&gt;
&lt;hr&gt;
==Trimmed Mean for the above example== 
&lt;h3&gt;Using scipy library&lt;/h3&gt;
&lt;pre&gt;
#import scipy to use the method of trim_mean
from scipy import stats
trimMean = stats.trim_mean(Estimates, 0.1) # Trim 10% at both ends
print(&quot;Trimmed Mean : &quot;,trimMean)
#Output:
Trimmed Mean :  335.1020408163265
&lt;/pre&gt;

&lt;h3&gt;Without using scipy library&lt;/h3&gt;
&lt;pre&gt;
#Trimmed mean with 10%
p=10/100
#sorted data
data=[2, 4, 6, 7, 11, 21, 81, 90, 105, 121]
n = len(data)
#Remove elements from both end
rem=int(n*p)
newData = data[rem:-rem]
mean = 0
for i in newData:
    mean += i
mean = int(mean/len(newData))
print(&quot;Trimmed mean : &quot;,mean)
#Output: Trimmed mean :  40
&lt;/pre&gt;
[[#Top]]

=Jumbled_Words Permutations: Jumbled Words=
==What are Permutations ?==
A permutation also called ordering of selected number of elements from a list denoted by nPr here we are choosing all elements of a list and so n=r&lt;br&gt;
nPr=n!/(n-r)!&lt;br&gt; as n=r
nPn=n!&lt;br&gt; which gives all possible arrangement of elements present in a list.

 For example, permutations of list [1,2,3] are [1,2,3], [1,3,2], [2,1,3], [2,3,1], 
[3,1,2], and [3,2,1]. 
The number of permutations of a list of elements nPn is given by n!. For example, there are 2! = 2 x 1 = 2 permutations of [1,2], namely [1,2] and [2,1], and 3! = 3 x 2 x 1 = 6 permutations of [1,2,3], as mentioned above.&lt;br/&gt;
[[File:Permutations.jpg]]

==Implementation==
Here, we try to demonstrate the concept of permutations through jumbled words. It is a two player game in which one person presents the other person a different permutation of the word in his mind. The other person has to guess the right word. If he guesses, the he wins otherwise he loses.
 Input an list of words.
 Randomly pick a word from the list of words .
 Shuffle this word and present it to the other player.
 if word guesses by the player is same as the one picked from list of w
     player wins
 else
     player loses

ALTERNATE CODE TO GENERATE THIS GAME:
&lt;pre&gt;
import random
p1=input(&quot;enter player 1 name:&quot;)
p2=input(&quot;enter player 2 name:&quot;)
l=[&quot;rainbow&quot;,&quot;computer&quot;,&quot;robot&quot;,&quot;butter&quot;,&quot;vegetable&quot;,&quot;science&quot;,&quot;correct&quot;]
c1=c2=a1=a2=f1=f2=0
k=1
i=3
def play():
    n=random.choice(l)        ##n=chooses a word from list l
    l1=[]
    for j in n:
       l1.append(j)      ##creates a list for word in n
    for t in range(len(l1)):
       p=random.choice(l1)     ##this randomly displays letters in the list
       print(p)
       l1.remove(p)          ##to avoid the repetition of a letter
    s=input(&quot;enter the word:&quot;)
    if(s==n):
        print(&quot;correct&quot;)
        return 1
    else:
        print(&quot;not correct&quot;)
        print(&quot;answer is&quot;,n)
        return 0
def stat():
     print(&quot;player 1:&quot;)
     print(&quot;score:&quot;,c1)
     print(&quot;answered:&quot;,a1)
     print(&quot;failed:&quot;,f1)
     print(&quot;.............&quot;)
     print(&quot;player 2:&quot;)
     print(&quot;score:&quot;,c2)
     print(&quot;answered:&quot;,a2)
     print(&quot;failed&quot;,f2)
     if(c1&gt;c2):
         print(p1,&quot; won over &quot;,p2)
     elif(c1==c2):
         print(&quot;draw game&quot;)
     else:
         print(p2,&quot; won over &quot;,p1) 
while(i!=4):
      if(i==3):
         if(k==1):
             print(&quot;player 1 turn&quot;)
             print(&quot;your jumbled word is:&quot;)
             k=k+1
             m=play()
             if(m==1):      ##if guessed answer is correct,then score and no.of answered count will be increased
                c1+=1
                a1+=1
             else:
                f1+=1       ##else count of no.of failed to answered will be incremented
         else:
             print(&quot;player 2 turn&quot;)
             print(&quot;your jumbled word is:&quot;)
             k=k-1
             m=play()
             if(m==1):
                c2=c2+1
                a2=a2+1
             else:
                f2=f2+1
       if(i==2):
             print(&quot;present status&quot;)
             stat()
       i=int(input(&quot;enter your choice  1.stop 2.status 3.continue&quot;))
       if(i==1):
             stat()
             i=i+3
&lt;/pre&gt;
&lt;hr&gt;
=== JumbledWord Simple Logic, In Short ===
[[File:jumbledWord.gif]]
&lt;hr&gt;
'''Logic to create a Jumbled Word'''
&lt;hr&gt;
&lt;pre&gt;
#Get Jumbled Word and print it Horizontally
import random

def getJumbledWord(b):
    jumble=''
    l1 = [ b[i] for i in range(0, len(b)) ]
    for t in range(len(l1)):
       p=random.choice(l1)     ##this randomly gets letters from the list      
       jumble=jumble+p       
       l1.remove(p)
    return jumble

b=input(&quot;Enter a word to make it jumbled : &quot;)
print(&quot;Jumbled Word : &quot;, getJumbledWord(b))
&lt;/pre&gt;
&lt;hr&gt;
'''Another Logic to create a Jumbled Word'''
&lt;hr&gt;
&lt;pre&gt;
b=input(&quot;Enter a word to make it jumbled : &quot;)

def getJumbledWord1(b):
    l1 = [ b[i] for i in range(0, len(b)) ]
    random.shuffle(l1)
    str1 = ''.join(l1)
    return str1

print(&quot;Jumbled Word : &quot;, getJumbledWord1(b))
&lt;/pre&gt;

====Sample Output:====
&lt;pre&gt;
---- Output1 
Enter a word to make it jumbled : butter
Jumbled Word :  tbture

---- Output2 
Enter a word to make it jumbled : petriotism
Jumbled Word :  pittrosime
&lt;/pre&gt;

=Theory of Evolution=

== What is Evolution ? ==
Evolution is the change in heritable characteristics over successive generations. The theory of evolution explains that DNA, which acts as a carrier of genetic information from one generation to other, tends to change or mutate occasionally. These changes are reflected in next generations to come. This is how life has evolved on earth from bacteria to human beings.&lt;br&gt;
[[File:Evolution.png|500px]]

== Implementation ==
An array representing DNA is stored in a file. As genes are forms of DNA, they contain information to be transferred to forthcoming generations. Assume that information is in the form of bits (in the form of 0s and 1s). A number is picked randomly from 1 to the size of the array. A new parameter has been introduced which decides whether mutation would occur or not. If the value of this new parameter is 1 (It is picked randomly from 1 to 100), then only change is reflected down the generations, otherwise it is not. The pseudo code is as follows :

Input an array containing genetic information .
Randomly generate a number (say m) from 1 to length of the array. Randomly generate other number (say p) from 1 to 100.

&lt;pre&gt; 
    if p is equal to 1 then 
        if m is 1 then
          set it to 0
        else
          set it to 1
&lt;/pre&gt;
[[#TOP]]</text>
      <sha1>35ogm74nmru1m3sibw44bfk0fpv4tzb</sha1>
    </revision>
    <revision>
      <id>3614</id>
      <parentid>3613</parentid>
      <timestamp>2018-09-28T04:25:10Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* Trimmed Mean */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="30098">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_3 Contributors of this page]
*Week 3 Playlist: https://www.youtube.com/playlist?list=PLc_j0TNIaWxOVx_z9jAM2UB3RqYNXaoEo
=List=
List is a flexible data structure used for storing a group of data separated by comma. The elements in a list need not be of the same data type.

'''Example:'''
       List_1 = [ 1, 2,3] or 
       List_1 = [&quot;coffee&quot;, &quot;Tea&quot;, &quot;Milk&quot;] or
       List_1 = [1,&quot;coffee&quot;, &quot;Tea&quot;, 3, &quot;5&quot;]

==List Creation==
&lt;pre&gt;a) A list can be created by simply putting values (separated by comma) between square brackets as given below,
       List_1 = [1,&quot;coffee&quot;, &quot;Tea&quot;, 3, &quot;5&quot;] #this creates a list by name List_1 containing following items


Or,
(b)A List can be created from scratch and elements can be added 
        List_2 = [ ]
        List_2.append(&quot;Kala&quot;)
        List_2.append(&quot;Mala&quot;)
Here we use &quot;append&quot; ,which is a function in python that enable us to append or attach an element to a list .
Thus List_2 will now hold [&quot;Kala&quot;,&quot;Mala&quot;]
&lt;/pre&gt;
[[#TOP]]

==Operations and Methods to work with List==
&lt;pre&gt;
a = [25,30,50,90,12,13]
b = [100,300,500,200,250]
&lt;/pre&gt;
&lt;hr&gt;
&lt;table border=2&gt;
  &lt;tr&gt;
    &lt;th&gt;&lt;b&gt;Method/&lt;br&gt;Operator&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Function&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Syntax&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Output&lt;/b&gt;&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;len()&lt;/td&gt;
    &lt;td&gt;Find length of a list&lt;/td&gt;
    &lt;td&gt;len(a)&lt;/td&gt;
    &lt;td&gt;6&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;max()&lt;/td&gt;
    &lt;td&gt;Find maximum element from the list&lt;/td&gt;
    &lt;td&gt;max(a)&lt;/td&gt;
    &lt;td&gt;90&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;min()&lt;/td&gt;
    &lt;td&gt;Find minimum element from the list&lt;/td&gt;
    &lt;td&gt;min(a)&lt;/td&gt;
    &lt;td&gt;12&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sum()&lt;/td&gt;
    &lt;td&gt;Returns sum of all elements of the list&lt;/td&gt;
    &lt;td&gt;sum(a)&lt;/td&gt;
    &lt;td&gt;220&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;reverse()&lt;/td&gt;
    &lt;td&gt;Reverses the original list&lt;/td&gt;
    &lt;td&gt;a.reverse()&lt;/td&gt;
    &lt;td&gt;[13, 12, 90, 50, 30, 25]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sort()&lt;/td&gt;
    &lt;td&gt;Sorts the original list in ascending order&lt;/td&gt;
    &lt;td&gt;a.sort()&lt;/td&gt;
    &lt;td&gt;[12, 13, 25, 30, 50, 90]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sorted()&lt;/td&gt;
    &lt;td&gt;Returns the new sorted list &lt;/td&gt;
    &lt;td&gt;sorted(a)&lt;/td&gt;
    &lt;td&gt;[12, 13, 25, 30, 50, 90]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;insert()&lt;/td&gt;
    &lt;td&gt;Insert at a particular index in the list, and shifts remaining elements&lt;/td&gt;
    &lt;td&gt;a.insert(3,3)&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 3, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;append()&lt;/td&gt;
    &lt;td&gt;Adds elements/object to the end of the list&lt;/td&gt;
    &lt;td&gt;a.append(5)&lt;br&gt;a.append([10,20])&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 5]&lt;br&gt;[25, 30, 50, 90, 12, 13, [10, 20]]&lt;br&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;extend()&lt;/td&gt;
    &lt;td&gt;Adds object to the end of the list as elements not as object&lt;/td&gt;
    &lt;td&gt;a.extend([10,20])&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 10, 20]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;*&amp;nbsp;&amp;nbsp;Repeatation&lt;br&gt;operator&lt;/td&gt;
    &lt;td&gt;Repeat the list for n times and returns a new list&lt;/td&gt;
    &lt;td&gt;a*2&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 25, 30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;+ Concatenation&lt;br&gt;operator&lt;/td&gt;
    &lt;td&gt;Concatenates two lists, and returns a new list&lt;/td&gt;
    &lt;td&gt;a+b&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 100, 300, 500, 200, 250]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;index()&lt;/td&gt;
    &lt;td&gt;Finds index of a particular element in the list or not&lt;/td&gt;
    &lt;td&gt;a.index(25)&lt;br&gt;a.index(0)&lt;br&gt;&lt;/td&gt;
    &lt;td&gt;0&lt;br&gt;&lt;br&gt;ValueError: 0 is not in list&lt;br&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;in operator&lt;/td&gt;
    &lt;td&gt;Finds whether a particular element is in the list or not, returns boolean&lt;/td&gt;
    &lt;td&gt;25 in a&lt;/td&gt;
    &lt;td&gt;True&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;not in operator&lt;/td&gt;
    &lt;td&gt;Checks if element is not available in list, returns boolean&lt;/td&gt;
    &lt;td&gt;25 not in a&lt;/td&gt;
    &lt;td&gt;False&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;count()&lt;/td&gt;
    &lt;td&gt;Counts the number of occurence of an element in the list&lt;/td&gt;
    &lt;td&gt;a.count(25)&lt;/td&gt;
    &lt;td&gt;1&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;remove()&lt;/td&gt;
    &lt;td&gt;Removes an element from the list&lt;/td&gt;
    &lt;td&gt;a.remove(25)&lt;/td&gt;
    &lt;td&gt; [30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;pop()&lt;/td&gt;
    &lt;td&gt;Delete and return item at index 0&lt;/td&gt;
    &lt;td&gt;a.pop(0)&lt;/td&gt;
    &lt;td&gt;25 , a will be [30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;del&lt;/td&gt;
    &lt;td&gt;Deletes item at a particular index from the list&lt;/td&gt;
    &lt;td&gt;del a[0]&lt;/td&gt;
    &lt;td&gt;[30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;all()&lt;/td&gt;
&lt;td&gt;Returns True, if all items in list are True or it is an empty list&lt;/td&gt;
&lt;td&gt;all([True, True, True])
all([])
&lt;/td&gt;
&lt;td&gt;True&lt;br&gt;
True&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;any()&lt;/td&gt;
&lt;td&gt;Returns True, if any item in list is True else return False&lt;/td&gt;
&lt;td&gt;any([True, True, True])&lt;br&gt;
any([True, False, True])&lt;br&gt;
any([])&lt;/td&gt;
&lt;td&gt;True&lt;br&gt;False&lt;br&gt;False&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;

==Printing the List==
=== Print whole list ===
A list can be printed simply or using a ''for / while'' loop 

 print(List_2)     # To print the entire list
This code will print      
 ['Kala','Mala']     

===Print element at a particular index===
&lt;pre&gt;
Using index position
    List_2[0]     # prints 'Kala' ,i.e,the value at index position 0.
    List_2[1]     # prints 'Mala'.
&lt;/pre&gt;
=== Without using index position ===
&lt;pre&gt;
for item in List_2:   # here item is a variable used to access elements in list.
       print(item)
   This code snippet prints 
    Kala
    Mala
&lt;/pre&gt;
[[#TOP]]

==Search for a particular element in list==
Elements in a list can be searched by one of the two ways:
=== using index() function===
&lt;pre&gt;
ages1 = [11,23,12,23,45]

#if element is available in the list, index() returns the index value on which, the element is present.
print(ages1.index(45))#Output: 4

#if element is not available in the list, index() returns ''ValueError''
print(ages1.index(0))#Output: ValueError:
&lt;/pre&gt;

In programming, if such error occurs, program gets terminated. It can be solved using exception handling.
e.g.
&lt;pre&gt;
ages1 = [11,23,12,23,45]

try:
    print(ages1.index(0))
except ValueError:
    print(&quot;Exception has occured&quot;)    
    print(&quot;Element is not found in the list&quot;)

&lt;/pre&gt;
&lt;pre&gt;
'''Output: 
Exception has occured
Element is not found in the list
'''&lt;/pre&gt;
[[#TOP]]

=== using 'in' operator===
''in'' operator is used to check whether a particular element is available in the list or not.e.g.

&lt;pre&gt;
ages1 = [11,23,12,23,45]
no=11

if no in ages1:
    print(&quot;no is there in the list&quot;)
else:    
    print(&quot;no is NOT there in the list&quot;)
&lt;/pre&gt;
&lt;pre&gt;
#Output: no is there in the list
&lt;/pre&gt;


'''Number is not there in the list'''
&lt;pre&gt;
ages1 = [11,23,12,23,45]
no=15

if no in ages1:
    print(&quot;no is there in the list&quot;)
else:    
    print(&quot;no is NOT there in the list&quot;)
&lt;/pre&gt;
&lt;pre&gt;
Output: no is NOT there in the list
&lt;/pre&gt;
[[#TOP]]

==Updating the List==
The lists can be updated using ''append'' or ''insert'' function.  Append adds the element to the end of the list and Insert adds the element in the specified position.
&lt;pre&gt;
   # add the element 'Sheela' to the end of the list.
   List_2.append(&quot;Sheela&quot;)    
   print (List_2) will output 
   ['Kala', 'Mala', 'Sheela']
&lt;/pre&gt;
   &lt;pre&gt;
# add the element &quot;Bala&quot; in the list at the index 1.
   List_2.insert(1,&quot;Bala&quot;)    
   print (List_2) will output 
   ['Kala', 'Bala','Mala', 'Sheela']
&lt;/pre&gt;

=== Extend the list by adding elements of other list at end using extend()===
&lt;pre&gt;
ages = [11,23,12,23,45]
ages.extend([57,58])
print(ages)
&lt;/pre&gt;

&lt;pre&gt;
#Output: [11, 23, 12, 23, 45, 57, 58]
&lt;/pre&gt;

==== Difference between ''append and extend'' ====
Difference between append and extend can be easily understood, by the following example.

&lt;pre&gt;
appendlist = [11,23,12,23,45]
appendlist.append([57,58])

extendlist= [11,23,12,23,45]
extendlist.extend([57,58])
&lt;/pre&gt;

&lt;pre&gt;
'''Output:
[11, 23, 12, 23, 45, [57, 58]]
[11, 23, 12, 23, 45, 57, 58]'''
&lt;/pre&gt;

[[#TOP]]

==Basic Operations on List==
===Frequency of Occurrence===
list.count(object) will return the number of times the object occur in the list.
  '''Example'''
    ages = [11,23,12,23,45,43,22,24,23]
    ages.count(23) will return
    3
    ages.count(100) will return
    0

===Length of the List===
len(list) will return the length of the list ie. the number of objects in the list.
  '''Example'''
&lt;pre&gt;
    ages = [11,23,12,23,45,43,22,24,23]
    len(ages) # Output: 9
&lt;/pre&gt;

To print the objects in the list either use ''for item in list'' or ''for index in range(len(list))''
&lt;pre&gt;
    for item in ages:       
        print (item)  
        (OR)
    for index in range(len(ages)) :
        print (ages[index])
&lt;/pre&gt;

===Sort the List===
list.sort() will sort the list in ascending order
  '''Example'''
    ages = [11,23,12,23,45,43,22,24,23]
    ages.sort() 
    print (ages) 
    [11, 12, 22, 23, 23, 23, 24, 43, 45]

[[#TOP]]

===Sort the List using sorted() function===
sorted(list1) will sort the list and return a new list, it doesn't modify the original list
&lt;br&gt;'''Example: Sort in ascending order'''
&lt;pre&gt;
ages = [11,23,12,23,45,43,22,24,23]
newList=sorted(ages)
print(newList)

#Output: [11, 12, 22, 23, 23, 23, 24, 43, 45]
&lt;/pre&gt;

&lt;br&gt;'''Example: Sort in descending order'''
&lt;pre&gt;
ages = [11,23,12,23,45,43,22,24,23]
newList=sorted(ages,reverse=True)
print(newList)

#Output: [45, 43, 24, 23, 23, 23, 22, 12, 11]
&lt;/pre&gt;

===Reverse the List===
list.reverse() will reverse the original list
  '''Example'''
    ages = [11, 12, 22, 23, 23, 23, 24, 43, 45]
    ages.reverse()
    print (ages)
    [45, 43, 24, 23, 23, 23, 22, 12, 11]

Both sort() and reverse() list operation will work on numeric and alphanumeric data list.

A special use of the reverse() function is to descend a list that is sorted in ascending order.

  '''Example'''
&lt;pre&gt;
ages = [11, 12, 22, 23, 23, 23, 24, 43, 45]
ages.sort()
print(ages)
ages.reverse()
print(ages)
&lt;/pre&gt;

===Slicing===
Used to retrieve an object or objects in a range as a list  
  '''Example'''

Use ''list[index]'' to retrieve the object at the given index
&lt;pre&gt;
In [1]: student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
In [2]: student[3]     #Object at index 3.  Remember index starts at 0
Out[2]: 'Geetha'      
&lt;/pre&gt;

Use ''list[start_index : end_index + 1]'' to retrieve objects from the start_index to end_index 
&lt;pre&gt;
In [3]: student[2:4]     # Objects from index 2 to 3 as List. Note the [ and ]
Out[3]: ['Vijay', 'Geetha']   
&lt;/pre&gt;

Use ''list[:]'' to retrieve objects from the starting of the list to the end of the list. 
The default start value will be the starting index of the list (i.e. 0) and the default end value
will be the length of the list 
&lt;pre&gt;
In [4]: student[:]        # prints the entire list
Out[4]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma', 'Janani']
&lt;/pre&gt;
&lt;pre&gt;
In [5]: student[:5]       # prints the objects from the start of the list upto object at index 4
Out[5]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran']
&lt;/pre&gt;
&lt;pre&gt;
In [6]: student[2:]       # prints the objects from index 2 upto the end of the list
Out[6]: ['Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma', 'Janani']
&lt;/pre&gt;

Negative index too is available in Python. It starts from last element of the list. i.e.
&lt;pre&gt;
In [7]:student[-1]        #prints last index of list
Out[7]: 'Janani'
&lt;/pre&gt;
&lt;pre&gt;
In [8]:student[-1:-8]     #prints empty list
Out[8]: []
&lt;/pre&gt;
&lt;pre&gt;
In [9]:student[-8:-1]     #prints -8th index to -1st index elements
Out[9]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma']
&lt;/pre&gt;

[[#TOP]]

===Removing Item from list ===
----

Is used to remove a specific item from the list.

'''Example:'''
 
Use list.remove(entry/value)  Or   del list[index]    Or list.pop(index)
&lt;pre&gt;
student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
student.remove(&quot;Arun&quot;)   #This will delete item &quot;Arun&quot;
         Or    
del student[0]           # This will delete item at index 0
         Or
student.pop(0)         # This will delete and return item at index 0
print(student)    
Output: &quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
&lt;/pre&gt;

[[#TOP]]

===Delete list ===
----
Used to delete complete list

'''Example'''

Use del &lt;list name&gt;
&lt;pre&gt;
student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
del student&lt;/pre&gt;

===Concatenation of two lists===
----
''+'' is the concatenation operator which is used concatenate two lists. 
&lt;pre&gt;
ages1 = [11,23,12,23,45]
ages2 = [25, 24, 43, 47]
age=ages1+ages2
print(age)
#Output: [11, 23, 12, 23, 45, 25, 24, 43, 47]
&lt;/pre&gt;

===Repeatation of a list ===
----
''*'' is the operator to repeat a particular list.
&lt;pre&gt;
ages1 = [11,23,12,23,45]
age=ages1*5 #ages1 list is repeated 5 times and stroed in ''age'' list
print(age)

#Output: [11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45]
&lt;/pre&gt;

=== all and any for List===
all() and any() are special functions to check whether all elements in iterable is ''True'' or any element is ''True''
&lt;ol&gt;
&lt;li&gt;If all elements in a list are ''True'', '''all()''' will return ''True''&lt;/li&gt;
&lt;li&gt;If iterable is ''empty'', '''all()''' will return ''True''&lt;/li&gt;
&lt;li&gt;If iterable contains at least one ''True'', '''any()''' will return ''True''&lt;/li&gt;
&lt;li&gt;If iterable is ''empty'', '''any()''' will return ''False''&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;
lsit=[True, True, True, True]
print(all(lsit))#Output: True
print(any(lsit))#Output: True

lsit1=[True, False, True, True]
print(all(lsit1))#Output: False
print(any(lsit1))#Output: True

lsit2=[False,False,False]
print(all(lsit2))#Output: False
print(any(lsit2))#Output: False

lsit3=[]
print(all(lsit3))#Output: True
print(any(lsit3))#Output: False
&lt;/pre&gt;

==Conditional Statements==
&lt;pre&gt;Conditionals are used to check the condition and change the flow of the program 
accordingly. They are realized in programming languages through if statement. The 
syntax is as follows :
&lt;pre&gt;
         if condition : 
            statement
&lt;/pre&gt;
    '''Note:''' Do not forget indentation (inserting space/tab) in the line after the
 if condition.
    
    In case you want to execute a set of statements when a condition is true and another

set of statement when the condition is false.
&lt;pre&gt;
         if condition : 
            statement 1
         else :
            statement 2
&lt;/pre&gt;

&lt;pre&gt;    
    Multiple if-else statements can be written as follows:
         if condition_1 : 
            statement 1
         elif condition_2 : # 'elif' is short for 'else if'
            statement 2
         elif condition_3 :
            statement 3
        .
        .
         else :
            final statement
&lt;/pre&gt;

[[#TOP]]

=Loops and Conditionals : Fizzbuzz=
====Loops====
Loops are used to execute a set of repetitive statements. They are realised
through 'while' and 'for' loops in programming languages. The syntax of 'for' loop is 
as follows :
&lt;pre&gt;
for LOOPVARIABLE in SEQUENCE: 
            STATEMENTS&lt;/pre&gt;

    '''e.g.''' to print all the data from a list we can write:
&lt;pre&gt;
for item in list_name:
      print(item)&lt;/pre&gt;
    OR
&lt;pre&gt;
for index in range(len(list_name)):
      print(list_name[index])
 &lt;/pre&gt;   
    The syntax for while loop is as follows :
&lt;pre&gt;    
while BOOLEANEXPRESSION: 
     STATEMENTS
     INCREMENT/DECREMENT
&lt;/pre&gt;    
    '''e.g.''' if we want to print all numbers from 1 to 10
&lt;pre&gt;
i=1
while i&lt;=10 :
    print(i,&quot; &quot;)
    i=i+1
    &lt;/pre&gt;
 
'while' loop has indefinite iteration (run-time unknown). So, there must be loop,  break statement in it.
 Whereas 'for' loop is definite in nature (i.e. known or predictable span).&lt;br&gt;

&lt;b&gt;NOTE: Python doesn't have anything like do-while loop.&lt;/b&gt;

[[#TOP]]

==Implementation==
Here, we try to demonstrate the concept of loops and conditionals through a game called Fizzbuzz. The rules are as follows :&lt;br/&gt;
[[File:fizzBuzz.gif]]

• if input number is a multiple of ’3’ print ”Fizz”
&lt;br/&gt;
• if input number is a multiple of ’5’ print ”Buzz”
&lt;br/&gt;
• if input number is a multiple of both '3' and ’5’ print ”FizzBuzz”
&lt;br/&gt;
The pseudo code is as follows :
&lt;pre&gt;
   If input no % 3 == 0 and  input no % 5 == 0 : 
       print ”Fizzbuzz”
   else if input no % 3 == 0 : 
       print ”Fizz”
   else if input no % 5 == 0 : 
       print ”Buzz”
   else :
       print the input no
&lt;/pre&gt;
The order of statements execution matters to get the desired output. The highest priority condition should be first followed by other. In fizzbuzz programming, first checking should be done for both divisibility of 3 and 5. If condition not satisfied only then it should check individually for 3 or 5. So carefully choosing the order is crucial for better programming.
Note: There is some effect of present condition statements chosen on next conditions statements. That is why in first attempt fizzbuzz programming got struck.

Example: 
&lt;pre&gt;
#Code to achieve the above requirement in python3.
i = int(input(&quot;Enter the number&quot;)) 
if i%3 == 0 and i%5 == 0: print(i,&quot;FizzBuzz&quot;)  
elif i%5 == 0: print(i,&quot;Buzz&quot;)
elif i%3 == 0: print(i,&quot;Fizz&quot;)
else: print(i)
&lt;/pre&gt;
Lets put the same into a loop for a range given by the user.
&lt;pre&gt;
def fizzbuzzgame(start,stop):
    for i in range(start,stop+1):
        if i%3 == 0 and i%5 == 0:
            print(i,&quot;FizzBuzz&quot;)
        elif i%5 == 0:
            print(i,&quot;Buzz&quot;)
        elif i%3 == 0:
            print(i,&quot;Fizz&quot;)
        else: print(i)

fizzbuzzgame(50,100)
&lt;/pre&gt;


=== Fizz Buzz game in Interactive mode with Score ===
'''By Ms. Ami Tusharkant Choksi'''
&lt;pre&gt;
def fizzbuzzgame(i):
        if i%3 == 0 and i%5 == 0:
            print(i,&quot;FizzBuzz&quot;)
            return(&quot;fzbz&quot;)
        elif i%5 == 0:
            print(i,&quot;Buzz&quot;)
            return(&quot;bz&quot;)
        elif i%3 == 0:
            print(i,&quot;Fizz&quot;)
            return(&quot;fz&quot;)
        else:
            print(i)
            return(&quot;no&quot;)

ch = 'y'
fizzbuzz=0
fizz=0
buzz=0
nothing=0
print(&quot;&quot;&quot;

 /$$$$$$$$/$$                  /$$$$$$$                            
| $$_____|__/                 | $$__  $$                           
| $$      /$$/$$$$$$$$/$$$$$$$| $$  \ $$/$$   /$$/$$$$$$$$/$$$$$$$$
| $$$$$  | $|____ /$$|____ /$$| $$$$$$$| $$  | $|____ /$$|____ /$$/
| $$__/  | $$  /$$$$/   /$$$$/| $$__  $| $$  | $$  /$$$$/   /$$$$/ 
| $$     | $$ /$$__/   /$$__/ | $$  \ $| $$  | $$ /$$__/   /$$__/  
| $$     | $$/$$$$$$$$/$$$$$$$| $$$$$$$|  $$$$$$//$$$$$$$$/$$$$$$$$
|__/     |__|________|________|_______/ \______/|________|________/
                                                                  
&quot;&quot;&quot;)   
print('''

  /$$$$$$                                
 /$$__  $$                               
| $$  \__/ /$$$$$$ /$$$$$$/$$$$  /$$$$$$ 
| $$ /$$$$|____  $| $$_  $$_  $$/$$__  $$
| $$|_  $$ /$$$$$$| $$ \ $$ \ $| $$$$$$$$
| $$  \ $$/$$__  $| $$ | $$ | $| $$_____/
|  $$$$$$|  $$$$$$| $$ | $$ | $|  $$$$$$$
 \______/ \_______|__/ |__/ |__/\_______/
                                     
''')

while(ch == 'y'):
    n=int(input(&quot;Enter a Number : &quot;))
    winLoose=fizzbuzzgame(n)
    if(winLoose == &quot;fz&quot;):
        fizz+=1
    elif(winLoose == &quot;bz&quot;):
        buzz+=1
    elif(winLoose == &quot;fzbz&quot;):
        fizzbuzz+=1
    ch=input(&quot;Do you want to continue playing the game : (y/n)&quot;)
    if(ch=='n'):
        print('Congratulations, your score is\n FizzBuzz:%d\nFizz:%d\nBuzz:%d' %
(fizzbuzz,fizz,buzz))
    
'''Sample Output:

 /$$$$$$$$/$$                  /$$$$$$$                            
| $$_____|__/                 | $$__  $$                           
| $$      /$$/$$$$$$$$/$$$$$$$| $$  \ $$/$$   /$$/$$$$$$$$/$$$$$$$$
| $$$$$  | $|____ /$$|____ /$$| $$$$$$$| $$  | $|____ /$$|____ /$$/
| $$__/  | $$  /$$$$/   /$$$$/| $$__  $| $$  | $$  /$$$$/   /$$$$/ 
| $$     | $$ /$$__/   /$$__/ | $$  \ $| $$  | $$ /$$__/   /$$__/  
| $$     | $$/$$$$$$$$/$$$$$$$| $$$$$$$|  $$$$$$//$$$$$$$$/$$$$$$$$
|__/     |__|________|________|_______/ \______/|________|________/
                                                                                                                                   

  /$$$$$$                                
 /$$__  $$                               
| $$  \__/ /$$$$$$ /$$$$$$/$$$$  /$$$$$$ 
| $$ /$$$$|____  $| $$_  $$_  $$/$$__  $$
| $$|_  $$ /$$$$$$| $$ \ $$ \ $| $$$$$$$$
| $$  \ $$/$$__  $| $$ | $$ | $| $$_____/
|  $$$$$$|  $$$$$$| $$ | $$ | $|  $$$$$$$
 \______/ \_______|__/ |__/ |__/\_______/
                                         

Enter a Number : 666
666 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 777
777 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 555
555 FizzBuzz
Do you want to continue playing the game : (y/n)y
Enter a Number : 1
1
Do you want to continue playing the game : (y/n)y
Enter a Number : 789
789 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 25
25 Buzz
Do you want to continue playing the game : (y/n)n
Congratulations, your score is

FizzBuzz:1
Fizz:3
Buzz:1

&lt;/pre&gt;

=Crowd Computing: Just Estimate=
==Wisdom of Crowds==
 &lt;p style=&quot;text-align:justify&quot;&gt;
The concept of ’Wisdom of Crowds’ was proposed by Francis Galton. A weight-judging competition was carried on at the annual show of the West of England Fat Stock and Poultry Exhibition recently held at Plymouth, A fat ox having been selected, competitors bought stamped and numbered cards, each, on which to inscribe their respective names, addresses, and estimates of what the ox would weigh after it had been slaughtered. Those who guessed most successfully received prizes. About 8oo tickets were issued to the par- ticipants. The middlemost estimate of all the estimates recorded was 1207 lbs and the actual weight of the ox was 1198 lbs.&lt;/p&gt;

==Our Experiment==
 &lt;p style=&quot;text-align:justify&quot;&gt;
The crowd had to guess the number of candies/gems in a jar. Around 75 people participated in the experiment. The actual number of gems in the jar were 375. The median of all estimates came out to be 300 and the mean of all the estimates came out to be around 396. Median underestimated and mean overestimated the actual value. So according to recent studies, Trimmed mean must be used as an aggregate measure to estimate where Wisdom of Crowds is involved.
&lt;/p&gt;
[[File:Gemsjar.jpg|center|200px|caption]]

===Trimmed Mean===
 &lt;p style=&quot;text-align:justify&quot;&gt;
In these kinds of experiments, 10% trimmed mean is usually followed. For calculating 10% trimmed mean, remove 10% smallest and 10% largest values from the sample. Calculate the mean of the sample obtained. In the above experiment, the trimmed mean came out to be around 351 which is very close to the actual value.&lt;/p&gt;

==Implementation==
Here, we try to demonstrate the concept of trimmed mean through crowd computing.
 Input a list of estimates done by the crowd .
 Sort the list.
 Remove the 10% smallest values.
 Remove the 10% largest values.
 Calculate the mean of the new list obtained .&lt;hr&gt;

==Data of Experiment==       
    Estimates =[1000,1010,1786,2000,1500,1500,100,120,150,150,150,170,175,180,197,200,200,200,200,200,200,220,220,220,220,234,250,250,250,250,250,250,250,250,250,263,270,275,275,286,300,
                300,300,300,300,300,300,300,320,350,350,350,400, 400,400,400,400,450,467,500,500,500,500,500,500,500,550,550,600,600,600,650,700,700,720]

    '''CODE:'''
&lt;pre&gt;
Estimates = [1000,1010,1786,2000,1500,1500,100,120,150,150,150,170,175,180,197,200,200,200,200,200,200,220,220,220,220,234,250,250,250,250,250,250,250,250,250,263,270,275,275,286,300,                300,300,300,300,300,300,300,320,350,350,350,400,400,400,400,400,450,467,500,500,500,500,500,500,500,550,550,600,600,600,650,700,700,720]
Estimates.sort()
offset = int(0.10*len(Estimates))
for i in range(offset):
       del Estimates[0]
       del Estimates[-1]
Sum = 0    
for i in range(len(Estimates)):
       Sum += Estimates[i]
Mean_Value = Sum/len(Estimates)
print(&quot;Mean : &quot;, int(Mean_Value))
#Output:
Mean :  351
&lt;/pre&gt;
&lt;hr&gt;
==Trimmed Mean for the above example== 
&lt;h3&gt;Using scipy library&lt;/h3&gt;
&lt;pre&gt;
#import scipy to use the method of trim_mean
from scipy import stats
trimMean = stats.trim_mean(Estimates, 0.1) # Trim 10% at both ends
print(&quot;Trimmed Mean : &quot;,trimMean)
#Output:
Trimmed Mean :  335.1020408163265
&lt;/pre&gt;

&lt;h3&gt;Without using scipy library&lt;/h3&gt;
&lt;pre&gt;
#Trimmed mean with 10%
p=10/100
#sorted data
data=[2, 4, 6, 7, 11, 21, 81, 90, 105, 121]
n = len(data)
#Remove elements from both end
rem=int(n*p)
newData = data[rem:-rem]
mean = 0
for i in newData:
    mean += i
mean = int(mean/len(newData))
print(&quot;Trimmed mean : &quot;,mean)
#Output: Trimmed mean :  40
&lt;/pre&gt;
[[#Top]]

=Jumbled_Words Permutations: Jumbled Words=
==What are Permutations ?==
A permutation also called ordering of selected number of elements from a list denoted by nPr here we are choosing all elements of a list and so n=r&lt;br&gt;
nPr=n!/(n-r)!&lt;br&gt; as n=r
nPn=n!&lt;br&gt; which gives all possible arrangement of elements present in a list.

 For example, permutations of list [1,2,3] are [1,2,3], [1,3,2], [2,1,3], [2,3,1], 
[3,1,2], and [3,2,1]. 
The number of permutations of a list of elements nPn is given by n!. For example, there are 2! = 2 x 1 = 2 permutations of [1,2], namely [1,2] and [2,1], and 3! = 3 x 2 x 1 = 6 permutations of [1,2,3], as mentioned above.&lt;br/&gt;
[[File:Permutations.jpg]]

==Implementation==
Here, we try to demonstrate the concept of permutations through jumbled words. It is a two player game in which one person presents the other person a different permutation of the word in his mind. The other person has to guess the right word. If he guesses, the he wins otherwise he loses.
 Input an list of words.
 Randomly pick a word from the list of words .
 Shuffle this word and present it to the other player.
 if word guesses by the player is same as the one picked from list of w
     player wins
 else
     player loses

ALTERNATE CODE TO GENERATE THIS GAME:
&lt;pre&gt;
import random
p1=input(&quot;enter player 1 name:&quot;)
p2=input(&quot;enter player 2 name:&quot;)
l=[&quot;rainbow&quot;,&quot;computer&quot;,&quot;robot&quot;,&quot;butter&quot;,&quot;vegetable&quot;,&quot;science&quot;,&quot;correct&quot;]
c1=c2=a1=a2=f1=f2=0
k=1
i=3
def play():
    n=random.choice(l)        ##n=chooses a word from list l
    l1=[]
    for j in n:
       l1.append(j)      ##creates a list for word in n
    for t in range(len(l1)):
       p=random.choice(l1)     ##this randomly displays letters in the list
       print(p)
       l1.remove(p)          ##to avoid the repetition of a letter
    s=input(&quot;enter the word:&quot;)
    if(s==n):
        print(&quot;correct&quot;)
        return 1
    else:
        print(&quot;not correct&quot;)
        print(&quot;answer is&quot;,n)
        return 0
def stat():
     print(&quot;player 1:&quot;)
     print(&quot;score:&quot;,c1)
     print(&quot;answered:&quot;,a1)
     print(&quot;failed:&quot;,f1)
     print(&quot;.............&quot;)
     print(&quot;player 2:&quot;)
     print(&quot;score:&quot;,c2)
     print(&quot;answered:&quot;,a2)
     print(&quot;failed&quot;,f2)
     if(c1&gt;c2):
         print(p1,&quot; won over &quot;,p2)
     elif(c1==c2):
         print(&quot;draw game&quot;)
     else:
         print(p2,&quot; won over &quot;,p1) 
while(i!=4):
      if(i==3):
         if(k==1):
             print(&quot;player 1 turn&quot;)
             print(&quot;your jumbled word is:&quot;)
             k=k+1
             m=play()
             if(m==1):      ##if guessed answer is correct,then score and no.of answered count will be increased
                c1+=1
                a1+=1
             else:
                f1+=1       ##else count of no.of failed to answered will be incremented
         else:
             print(&quot;player 2 turn&quot;)
             print(&quot;your jumbled word is:&quot;)
             k=k-1
             m=play()
             if(m==1):
                c2=c2+1
                a2=a2+1
             else:
                f2=f2+1
       if(i==2):
             print(&quot;present status&quot;)
             stat()
       i=int(input(&quot;enter your choice  1.stop 2.status 3.continue&quot;))
       if(i==1):
             stat()
             i=i+3
&lt;/pre&gt;
&lt;hr&gt;
=== JumbledWord Simple Logic, In Short ===
[[File:jumbledWord.gif]]
&lt;hr&gt;
'''Logic to create a Jumbled Word'''
&lt;hr&gt;
&lt;pre&gt;
#Get Jumbled Word and print it Horizontally
import random

def getJumbledWord(b):
    jumble=''
    l1 = [ b[i] for i in range(0, len(b)) ]
    for t in range(len(l1)):
       p=random.choice(l1)     ##this randomly gets letters from the list      
       jumble=jumble+p       
       l1.remove(p)
    return jumble

b=input(&quot;Enter a word to make it jumbled : &quot;)
print(&quot;Jumbled Word : &quot;, getJumbledWord(b))
&lt;/pre&gt;
&lt;hr&gt;
'''Another Logic to create a Jumbled Word'''
&lt;hr&gt;
&lt;pre&gt;
b=input(&quot;Enter a word to make it jumbled : &quot;)

def getJumbledWord1(b):
    l1 = [ b[i] for i in range(0, len(b)) ]
    random.shuffle(l1)
    str1 = ''.join(l1)
    return str1

print(&quot;Jumbled Word : &quot;, getJumbledWord1(b))
&lt;/pre&gt;

====Sample Output:====
&lt;pre&gt;
---- Output1 
Enter a word to make it jumbled : butter
Jumbled Word :  tbture

---- Output2 
Enter a word to make it jumbled : petriotism
Jumbled Word :  pittrosime
&lt;/pre&gt;

=Theory of Evolution=

== What is Evolution ? ==
Evolution is the change in heritable characteristics over successive generations. The theory of evolution explains that DNA, which acts as a carrier of genetic information from one generation to other, tends to change or mutate occasionally. These changes are reflected in next generations to come. This is how life has evolved on earth from bacteria to human beings.&lt;br&gt;
[[File:Evolution.png|500px]]

== Implementation ==
An array representing DNA is stored in a file. As genes are forms of DNA, they contain information to be transferred to forthcoming generations. Assume that information is in the form of bits (in the form of 0s and 1s). A number is picked randomly from 1 to the size of the array. A new parameter has been introduced which decides whether mutation would occur or not. If the value of this new parameter is 1 (It is picked randomly from 1 to 100), then only change is reflected down the generations, otherwise it is not. The pseudo code is as follows :

Input an array containing genetic information .
Randomly generate a number (say m) from 1 to length of the array. Randomly generate other number (say p) from 1 to 100.

&lt;pre&gt; 
    if p is equal to 1 then 
        if m is 1 then
          set it to 0
        else
          set it to 1
&lt;/pre&gt;
[[#TOP]]</text>
      <sha1>0c22o4ftxvqsz7kvpdfrpsnydp8rplf</sha1>
    </revision>
    <revision>
      <id>3615</id>
      <parentid>3614</parentid>
      <timestamp>2018-09-28T04:26:13Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* Implementation */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="30148">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_3 Contributors of this page]
*Week 3 Playlist: https://www.youtube.com/playlist?list=PLc_j0TNIaWxOVx_z9jAM2UB3RqYNXaoEo
=List=
List is a flexible data structure used for storing a group of data separated by comma. The elements in a list need not be of the same data type.

'''Example:'''
       List_1 = [ 1, 2,3] or 
       List_1 = [&quot;coffee&quot;, &quot;Tea&quot;, &quot;Milk&quot;] or
       List_1 = [1,&quot;coffee&quot;, &quot;Tea&quot;, 3, &quot;5&quot;]

==List Creation==
&lt;pre&gt;a) A list can be created by simply putting values (separated by comma) between square brackets as given below,
       List_1 = [1,&quot;coffee&quot;, &quot;Tea&quot;, 3, &quot;5&quot;] #this creates a list by name List_1 containing following items


Or,
(b)A List can be created from scratch and elements can be added 
        List_2 = [ ]
        List_2.append(&quot;Kala&quot;)
        List_2.append(&quot;Mala&quot;)
Here we use &quot;append&quot; ,which is a function in python that enable us to append or attach an element to a list .
Thus List_2 will now hold [&quot;Kala&quot;,&quot;Mala&quot;]
&lt;/pre&gt;
[[#TOP]]

==Operations and Methods to work with List==
&lt;pre&gt;
a = [25,30,50,90,12,13]
b = [100,300,500,200,250]
&lt;/pre&gt;
&lt;hr&gt;
&lt;table border=2&gt;
  &lt;tr&gt;
    &lt;th&gt;&lt;b&gt;Method/&lt;br&gt;Operator&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Function&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Syntax&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Output&lt;/b&gt;&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;len()&lt;/td&gt;
    &lt;td&gt;Find length of a list&lt;/td&gt;
    &lt;td&gt;len(a)&lt;/td&gt;
    &lt;td&gt;6&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;max()&lt;/td&gt;
    &lt;td&gt;Find maximum element from the list&lt;/td&gt;
    &lt;td&gt;max(a)&lt;/td&gt;
    &lt;td&gt;90&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;min()&lt;/td&gt;
    &lt;td&gt;Find minimum element from the list&lt;/td&gt;
    &lt;td&gt;min(a)&lt;/td&gt;
    &lt;td&gt;12&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sum()&lt;/td&gt;
    &lt;td&gt;Returns sum of all elements of the list&lt;/td&gt;
    &lt;td&gt;sum(a)&lt;/td&gt;
    &lt;td&gt;220&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;reverse()&lt;/td&gt;
    &lt;td&gt;Reverses the original list&lt;/td&gt;
    &lt;td&gt;a.reverse()&lt;/td&gt;
    &lt;td&gt;[13, 12, 90, 50, 30, 25]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sort()&lt;/td&gt;
    &lt;td&gt;Sorts the original list in ascending order&lt;/td&gt;
    &lt;td&gt;a.sort()&lt;/td&gt;
    &lt;td&gt;[12, 13, 25, 30, 50, 90]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sorted()&lt;/td&gt;
    &lt;td&gt;Returns the new sorted list &lt;/td&gt;
    &lt;td&gt;sorted(a)&lt;/td&gt;
    &lt;td&gt;[12, 13, 25, 30, 50, 90]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;insert()&lt;/td&gt;
    &lt;td&gt;Insert at a particular index in the list, and shifts remaining elements&lt;/td&gt;
    &lt;td&gt;a.insert(3,3)&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 3, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;append()&lt;/td&gt;
    &lt;td&gt;Adds elements/object to the end of the list&lt;/td&gt;
    &lt;td&gt;a.append(5)&lt;br&gt;a.append([10,20])&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 5]&lt;br&gt;[25, 30, 50, 90, 12, 13, [10, 20]]&lt;br&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;extend()&lt;/td&gt;
    &lt;td&gt;Adds object to the end of the list as elements not as object&lt;/td&gt;
    &lt;td&gt;a.extend([10,20])&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 10, 20]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;*&amp;nbsp;&amp;nbsp;Repeatation&lt;br&gt;operator&lt;/td&gt;
    &lt;td&gt;Repeat the list for n times and returns a new list&lt;/td&gt;
    &lt;td&gt;a*2&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 25, 30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;+ Concatenation&lt;br&gt;operator&lt;/td&gt;
    &lt;td&gt;Concatenates two lists, and returns a new list&lt;/td&gt;
    &lt;td&gt;a+b&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 100, 300, 500, 200, 250]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;index()&lt;/td&gt;
    &lt;td&gt;Finds index of a particular element in the list or not&lt;/td&gt;
    &lt;td&gt;a.index(25)&lt;br&gt;a.index(0)&lt;br&gt;&lt;/td&gt;
    &lt;td&gt;0&lt;br&gt;&lt;br&gt;ValueError: 0 is not in list&lt;br&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;in operator&lt;/td&gt;
    &lt;td&gt;Finds whether a particular element is in the list or not, returns boolean&lt;/td&gt;
    &lt;td&gt;25 in a&lt;/td&gt;
    &lt;td&gt;True&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;not in operator&lt;/td&gt;
    &lt;td&gt;Checks if element is not available in list, returns boolean&lt;/td&gt;
    &lt;td&gt;25 not in a&lt;/td&gt;
    &lt;td&gt;False&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;count()&lt;/td&gt;
    &lt;td&gt;Counts the number of occurence of an element in the list&lt;/td&gt;
    &lt;td&gt;a.count(25)&lt;/td&gt;
    &lt;td&gt;1&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;remove()&lt;/td&gt;
    &lt;td&gt;Removes an element from the list&lt;/td&gt;
    &lt;td&gt;a.remove(25)&lt;/td&gt;
    &lt;td&gt; [30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;pop()&lt;/td&gt;
    &lt;td&gt;Delete and return item at index 0&lt;/td&gt;
    &lt;td&gt;a.pop(0)&lt;/td&gt;
    &lt;td&gt;25 , a will be [30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;del&lt;/td&gt;
    &lt;td&gt;Deletes item at a particular index from the list&lt;/td&gt;
    &lt;td&gt;del a[0]&lt;/td&gt;
    &lt;td&gt;[30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;all()&lt;/td&gt;
&lt;td&gt;Returns True, if all items in list are True or it is an empty list&lt;/td&gt;
&lt;td&gt;all([True, True, True])
all([])
&lt;/td&gt;
&lt;td&gt;True&lt;br&gt;
True&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;any()&lt;/td&gt;
&lt;td&gt;Returns True, if any item in list is True else return False&lt;/td&gt;
&lt;td&gt;any([True, True, True])&lt;br&gt;
any([True, False, True])&lt;br&gt;
any([])&lt;/td&gt;
&lt;td&gt;True&lt;br&gt;False&lt;br&gt;False&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;

==Printing the List==
=== Print whole list ===
A list can be printed simply or using a ''for / while'' loop 

 print(List_2)     # To print the entire list
This code will print      
 ['Kala','Mala']     

===Print element at a particular index===
&lt;pre&gt;
Using index position
    List_2[0]     # prints 'Kala' ,i.e,the value at index position 0.
    List_2[1]     # prints 'Mala'.
&lt;/pre&gt;
=== Without using index position ===
&lt;pre&gt;
for item in List_2:   # here item is a variable used to access elements in list.
       print(item)
   This code snippet prints 
    Kala
    Mala
&lt;/pre&gt;
[[#TOP]]

==Search for a particular element in list==
Elements in a list can be searched by one of the two ways:
=== using index() function===
&lt;pre&gt;
ages1 = [11,23,12,23,45]

#if element is available in the list, index() returns the index value on which, the element is present.
print(ages1.index(45))#Output: 4

#if element is not available in the list, index() returns ''ValueError''
print(ages1.index(0))#Output: ValueError:
&lt;/pre&gt;

In programming, if such error occurs, program gets terminated. It can be solved using exception handling.
e.g.
&lt;pre&gt;
ages1 = [11,23,12,23,45]

try:
    print(ages1.index(0))
except ValueError:
    print(&quot;Exception has occured&quot;)    
    print(&quot;Element is not found in the list&quot;)

&lt;/pre&gt;
&lt;pre&gt;
'''Output: 
Exception has occured
Element is not found in the list
'''&lt;/pre&gt;
[[#TOP]]

=== using 'in' operator===
''in'' operator is used to check whether a particular element is available in the list or not.e.g.

&lt;pre&gt;
ages1 = [11,23,12,23,45]
no=11

if no in ages1:
    print(&quot;no is there in the list&quot;)
else:    
    print(&quot;no is NOT there in the list&quot;)
&lt;/pre&gt;
&lt;pre&gt;
#Output: no is there in the list
&lt;/pre&gt;


'''Number is not there in the list'''
&lt;pre&gt;
ages1 = [11,23,12,23,45]
no=15

if no in ages1:
    print(&quot;no is there in the list&quot;)
else:    
    print(&quot;no is NOT there in the list&quot;)
&lt;/pre&gt;
&lt;pre&gt;
Output: no is NOT there in the list
&lt;/pre&gt;
[[#TOP]]

==Updating the List==
The lists can be updated using ''append'' or ''insert'' function.  Append adds the element to the end of the list and Insert adds the element in the specified position.
&lt;pre&gt;
   # add the element 'Sheela' to the end of the list.
   List_2.append(&quot;Sheela&quot;)    
   print (List_2) will output 
   ['Kala', 'Mala', 'Sheela']
&lt;/pre&gt;
   &lt;pre&gt;
# add the element &quot;Bala&quot; in the list at the index 1.
   List_2.insert(1,&quot;Bala&quot;)    
   print (List_2) will output 
   ['Kala', 'Bala','Mala', 'Sheela']
&lt;/pre&gt;

=== Extend the list by adding elements of other list at end using extend()===
&lt;pre&gt;
ages = [11,23,12,23,45]
ages.extend([57,58])
print(ages)
&lt;/pre&gt;

&lt;pre&gt;
#Output: [11, 23, 12, 23, 45, 57, 58]
&lt;/pre&gt;

==== Difference between ''append and extend'' ====
Difference between append and extend can be easily understood, by the following example.

&lt;pre&gt;
appendlist = [11,23,12,23,45]
appendlist.append([57,58])

extendlist= [11,23,12,23,45]
extendlist.extend([57,58])
&lt;/pre&gt;

&lt;pre&gt;
'''Output:
[11, 23, 12, 23, 45, [57, 58]]
[11, 23, 12, 23, 45, 57, 58]'''
&lt;/pre&gt;

[[#TOP]]

==Basic Operations on List==
===Frequency of Occurrence===
list.count(object) will return the number of times the object occur in the list.
  '''Example'''
    ages = [11,23,12,23,45,43,22,24,23]
    ages.count(23) will return
    3
    ages.count(100) will return
    0

===Length of the List===
len(list) will return the length of the list ie. the number of objects in the list.
  '''Example'''
&lt;pre&gt;
    ages = [11,23,12,23,45,43,22,24,23]
    len(ages) # Output: 9
&lt;/pre&gt;

To print the objects in the list either use ''for item in list'' or ''for index in range(len(list))''
&lt;pre&gt;
    for item in ages:       
        print (item)  
        (OR)
    for index in range(len(ages)) :
        print (ages[index])
&lt;/pre&gt;

===Sort the List===
list.sort() will sort the list in ascending order
  '''Example'''
    ages = [11,23,12,23,45,43,22,24,23]
    ages.sort() 
    print (ages) 
    [11, 12, 22, 23, 23, 23, 24, 43, 45]

[[#TOP]]

===Sort the List using sorted() function===
sorted(list1) will sort the list and return a new list, it doesn't modify the original list
&lt;br&gt;'''Example: Sort in ascending order'''
&lt;pre&gt;
ages = [11,23,12,23,45,43,22,24,23]
newList=sorted(ages)
print(newList)

#Output: [11, 12, 22, 23, 23, 23, 24, 43, 45]
&lt;/pre&gt;

&lt;br&gt;'''Example: Sort in descending order'''
&lt;pre&gt;
ages = [11,23,12,23,45,43,22,24,23]
newList=sorted(ages,reverse=True)
print(newList)

#Output: [45, 43, 24, 23, 23, 23, 22, 12, 11]
&lt;/pre&gt;

===Reverse the List===
list.reverse() will reverse the original list
  '''Example'''
    ages = [11, 12, 22, 23, 23, 23, 24, 43, 45]
    ages.reverse()
    print (ages)
    [45, 43, 24, 23, 23, 23, 22, 12, 11]

Both sort() and reverse() list operation will work on numeric and alphanumeric data list.

A special use of the reverse() function is to descend a list that is sorted in ascending order.

  '''Example'''
&lt;pre&gt;
ages = [11, 12, 22, 23, 23, 23, 24, 43, 45]
ages.sort()
print(ages)
ages.reverse()
print(ages)
&lt;/pre&gt;

===Slicing===
Used to retrieve an object or objects in a range as a list  
  '''Example'''

Use ''list[index]'' to retrieve the object at the given index
&lt;pre&gt;
In [1]: student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
In [2]: student[3]     #Object at index 3.  Remember index starts at 0
Out[2]: 'Geetha'      
&lt;/pre&gt;

Use ''list[start_index : end_index + 1]'' to retrieve objects from the start_index to end_index 
&lt;pre&gt;
In [3]: student[2:4]     # Objects from index 2 to 3 as List. Note the [ and ]
Out[3]: ['Vijay', 'Geetha']   
&lt;/pre&gt;

Use ''list[:]'' to retrieve objects from the starting of the list to the end of the list. 
The default start value will be the starting index of the list (i.e. 0) and the default end value
will be the length of the list 
&lt;pre&gt;
In [4]: student[:]        # prints the entire list
Out[4]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma', 'Janani']
&lt;/pre&gt;
&lt;pre&gt;
In [5]: student[:5]       # prints the objects from the start of the list upto object at index 4
Out[5]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran']
&lt;/pre&gt;
&lt;pre&gt;
In [6]: student[2:]       # prints the objects from index 2 upto the end of the list
Out[6]: ['Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma', 'Janani']
&lt;/pre&gt;

Negative index too is available in Python. It starts from last element of the list. i.e.
&lt;pre&gt;
In [7]:student[-1]        #prints last index of list
Out[7]: 'Janani'
&lt;/pre&gt;
&lt;pre&gt;
In [8]:student[-1:-8]     #prints empty list
Out[8]: []
&lt;/pre&gt;
&lt;pre&gt;
In [9]:student[-8:-1]     #prints -8th index to -1st index elements
Out[9]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma']
&lt;/pre&gt;

[[#TOP]]

===Removing Item from list ===
----

Is used to remove a specific item from the list.

'''Example:'''
 
Use list.remove(entry/value)  Or   del list[index]    Or list.pop(index)
&lt;pre&gt;
student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
student.remove(&quot;Arun&quot;)   #This will delete item &quot;Arun&quot;
         Or    
del student[0]           # This will delete item at index 0
         Or
student.pop(0)         # This will delete and return item at index 0
print(student)    
Output: &quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
&lt;/pre&gt;

[[#TOP]]

===Delete list ===
----
Used to delete complete list

'''Example'''

Use del &lt;list name&gt;
&lt;pre&gt;
student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
del student&lt;/pre&gt;

===Concatenation of two lists===
----
''+'' is the concatenation operator which is used concatenate two lists. 
&lt;pre&gt;
ages1 = [11,23,12,23,45]
ages2 = [25, 24, 43, 47]
age=ages1+ages2
print(age)
#Output: [11, 23, 12, 23, 45, 25, 24, 43, 47]
&lt;/pre&gt;

===Repeatation of a list ===
----
''*'' is the operator to repeat a particular list.
&lt;pre&gt;
ages1 = [11,23,12,23,45]
age=ages1*5 #ages1 list is repeated 5 times and stroed in ''age'' list
print(age)

#Output: [11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45]
&lt;/pre&gt;

=== all and any for List===
all() and any() are special functions to check whether all elements in iterable is ''True'' or any element is ''True''
&lt;ol&gt;
&lt;li&gt;If all elements in a list are ''True'', '''all()''' will return ''True''&lt;/li&gt;
&lt;li&gt;If iterable is ''empty'', '''all()''' will return ''True''&lt;/li&gt;
&lt;li&gt;If iterable contains at least one ''True'', '''any()''' will return ''True''&lt;/li&gt;
&lt;li&gt;If iterable is ''empty'', '''any()''' will return ''False''&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;
lsit=[True, True, True, True]
print(all(lsit))#Output: True
print(any(lsit))#Output: True

lsit1=[True, False, True, True]
print(all(lsit1))#Output: False
print(any(lsit1))#Output: True

lsit2=[False,False,False]
print(all(lsit2))#Output: False
print(any(lsit2))#Output: False

lsit3=[]
print(all(lsit3))#Output: True
print(any(lsit3))#Output: False
&lt;/pre&gt;

==Conditional Statements==
&lt;pre&gt;Conditionals are used to check the condition and change the flow of the program 
accordingly. They are realized in programming languages through if statement. The 
syntax is as follows :
&lt;pre&gt;
         if condition : 
            statement
&lt;/pre&gt;
    '''Note:''' Do not forget indentation (inserting space/tab) in the line after the
 if condition.
    
    In case you want to execute a set of statements when a condition is true and another

set of statement when the condition is false.
&lt;pre&gt;
         if condition : 
            statement 1
         else :
            statement 2
&lt;/pre&gt;

&lt;pre&gt;    
    Multiple if-else statements can be written as follows:
         if condition_1 : 
            statement 1
         elif condition_2 : # 'elif' is short for 'else if'
            statement 2
         elif condition_3 :
            statement 3
        .
        .
         else :
            final statement
&lt;/pre&gt;

[[#TOP]]

=Loops and Conditionals : Fizzbuzz=
====Loops====
Loops are used to execute a set of repetitive statements. They are realised
through 'while' and 'for' loops in programming languages. The syntax of 'for' loop is 
as follows :
&lt;pre&gt;
for LOOPVARIABLE in SEQUENCE: 
            STATEMENTS&lt;/pre&gt;

    '''e.g.''' to print all the data from a list we can write:
&lt;pre&gt;
for item in list_name:
      print(item)&lt;/pre&gt;
    OR
&lt;pre&gt;
for index in range(len(list_name)):
      print(list_name[index])
 &lt;/pre&gt;   
    The syntax for while loop is as follows :
&lt;pre&gt;    
while BOOLEANEXPRESSION: 
     STATEMENTS
     INCREMENT/DECREMENT
&lt;/pre&gt;    
    '''e.g.''' if we want to print all numbers from 1 to 10
&lt;pre&gt;
i=1
while i&lt;=10 :
    print(i,&quot; &quot;)
    i=i+1
    &lt;/pre&gt;
 
'while' loop has indefinite iteration (run-time unknown). So, there must be loop,  break statement in it.
 Whereas 'for' loop is definite in nature (i.e. known or predictable span).&lt;br&gt;

&lt;b&gt;NOTE: Python doesn't have anything like do-while loop.&lt;/b&gt;

[[#TOP]]

==Implementation==
Here, we try to demonstrate the concept of loops and conditionals through a game called Fizzbuzz. The rules are as follows :&lt;br/&gt;
[[File:fizzBuzz.gif]]

• if input number is a multiple of ’3’ print ”Fizz”
&lt;br/&gt;
• if input number is a multiple of ’5’ print ”Buzz”
&lt;br/&gt;
• if input number is a multiple of both '3' and ’5’ print ”FizzBuzz”
&lt;br/&gt;
The pseudo code is as follows :
&lt;pre&gt;
   If input no % 3 == 0 and  input no % 5 == 0 : 
       print ”Fizzbuzz”
   else if input no % 3 == 0 : 
       print ”Fizz”
   else if input no % 5 == 0 : 
       print ”Buzz”
   else :
       print the input no
&lt;/pre&gt;
The order of statements execution matters to get the desired output. The highest priority condition should be first followed by other. In fizzbuzz programming, first checking should be done for both divisibility of 3 and 5. If condition not satisfied only then it should check individually for 3 or 5. So carefully choosing the order is crucial for better programming.
Note: There is some effect of present condition statements chosen on next conditions statements. That is why in first attempt fizzbuzz programming got struck.

Example: 
&lt;pre&gt;
#Code to achieve the above requirement in python3.
i = int(input(&quot;Enter the number&quot;)) 
if i%3 == 0 and i%5 == 0: print(i,&quot;FizzBuzz&quot;)  
elif i%5 == 0: print(i,&quot;Buzz&quot;)
elif i%3 == 0: print(i,&quot;Fizz&quot;)
else: print(i)
&lt;/pre&gt;
Lets put the same into a loop for a range given by the user.
&lt;pre&gt;
def fizzbuzzgame(start,stop):
    for i in range(start,stop+1):
        if i%3 == 0 and i%5 == 0:
            print(i,&quot;FizzBuzz&quot;)
        elif i%5 == 0:
            print(i,&quot;Buzz&quot;)
        elif i%3 == 0:
            print(i,&quot;Fizz&quot;)
        else: print(i)

fizzbuzzgame(50,100)
&lt;/pre&gt;


=== Fizz Buzz game in Interactive mode with Score ===
'''By Ms. Ami Tusharkant Choksi'''
&lt;pre&gt;
def fizzbuzzgame(i):
        if i%3 == 0 and i%5 == 0:
            print(i,&quot;FizzBuzz&quot;)
            return(&quot;fzbz&quot;)
        elif i%5 == 0:
            print(i,&quot;Buzz&quot;)
            return(&quot;bz&quot;)
        elif i%3 == 0:
            print(i,&quot;Fizz&quot;)
            return(&quot;fz&quot;)
        else:
            print(i)
            return(&quot;no&quot;)

ch = 'y'
fizzbuzz=0
fizz=0
buzz=0
nothing=0
print(&quot;&quot;&quot;

 /$$$$$$$$/$$                  /$$$$$$$                            
| $$_____|__/                 | $$__  $$                           
| $$      /$$/$$$$$$$$/$$$$$$$| $$  \ $$/$$   /$$/$$$$$$$$/$$$$$$$$
| $$$$$  | $|____ /$$|____ /$$| $$$$$$$| $$  | $|____ /$$|____ /$$/
| $$__/  | $$  /$$$$/   /$$$$/| $$__  $| $$  | $$  /$$$$/   /$$$$/ 
| $$     | $$ /$$__/   /$$__/ | $$  \ $| $$  | $$ /$$__/   /$$__/  
| $$     | $$/$$$$$$$$/$$$$$$$| $$$$$$$|  $$$$$$//$$$$$$$$/$$$$$$$$
|__/     |__|________|________|_______/ \______/|________|________/
                                                                  
&quot;&quot;&quot;)   
print('''

  /$$$$$$                                
 /$$__  $$                               
| $$  \__/ /$$$$$$ /$$$$$$/$$$$  /$$$$$$ 
| $$ /$$$$|____  $| $$_  $$_  $$/$$__  $$
| $$|_  $$ /$$$$$$| $$ \ $$ \ $| $$$$$$$$
| $$  \ $$/$$__  $| $$ | $$ | $| $$_____/
|  $$$$$$|  $$$$$$| $$ | $$ | $|  $$$$$$$
 \______/ \_______|__/ |__/ |__/\_______/
                                     
''')

while(ch == 'y'):
    n=int(input(&quot;Enter a Number : &quot;))
    winLoose=fizzbuzzgame(n)
    if(winLoose == &quot;fz&quot;):
        fizz+=1
    elif(winLoose == &quot;bz&quot;):
        buzz+=1
    elif(winLoose == &quot;fzbz&quot;):
        fizzbuzz+=1
    ch=input(&quot;Do you want to continue playing the game : (y/n)&quot;)
    if(ch=='n'):
        print('Congratulations, your score is\n FizzBuzz:%d\nFizz:%d\nBuzz:%d' %
(fizzbuzz,fizz,buzz))
    
'''Sample Output:

 /$$$$$$$$/$$                  /$$$$$$$                            
| $$_____|__/                 | $$__  $$                           
| $$      /$$/$$$$$$$$/$$$$$$$| $$  \ $$/$$   /$$/$$$$$$$$/$$$$$$$$
| $$$$$  | $|____ /$$|____ /$$| $$$$$$$| $$  | $|____ /$$|____ /$$/
| $$__/  | $$  /$$$$/   /$$$$/| $$__  $| $$  | $$  /$$$$/   /$$$$/ 
| $$     | $$ /$$__/   /$$__/ | $$  \ $| $$  | $$ /$$__/   /$$__/  
| $$     | $$/$$$$$$$$/$$$$$$$| $$$$$$$|  $$$$$$//$$$$$$$$/$$$$$$$$
|__/     |__|________|________|_______/ \______/|________|________/
                                                                                                                                   

  /$$$$$$                                
 /$$__  $$                               
| $$  \__/ /$$$$$$ /$$$$$$/$$$$  /$$$$$$ 
| $$ /$$$$|____  $| $$_  $$_  $$/$$__  $$
| $$|_  $$ /$$$$$$| $$ \ $$ \ $| $$$$$$$$
| $$  \ $$/$$__  $| $$ | $$ | $| $$_____/
|  $$$$$$|  $$$$$$| $$ | $$ | $|  $$$$$$$
 \______/ \_______|__/ |__/ |__/\_______/
                                         

Enter a Number : 666
666 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 777
777 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 555
555 FizzBuzz
Do you want to continue playing the game : (y/n)y
Enter a Number : 1
1
Do you want to continue playing the game : (y/n)y
Enter a Number : 789
789 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 25
25 Buzz
Do you want to continue playing the game : (y/n)n
Congratulations, your score is

FizzBuzz:1
Fizz:3
Buzz:1

&lt;/pre&gt;

=Crowd Computing: Just Estimate=
==Wisdom of Crowds==
 &lt;p style=&quot;text-align:justify&quot;&gt;
The concept of ’Wisdom of Crowds’ was proposed by Francis Galton. A weight-judging competition was carried on at the annual show of the West of England Fat Stock and Poultry Exhibition recently held at Plymouth, A fat ox having been selected, competitors bought stamped and numbered cards, each, on which to inscribe their respective names, addresses, and estimates of what the ox would weigh after it had been slaughtered. Those who guessed most successfully received prizes. About 8oo tickets were issued to the par- ticipants. The middlemost estimate of all the estimates recorded was 1207 lbs and the actual weight of the ox was 1198 lbs.&lt;/p&gt;

==Our Experiment==
 &lt;p style=&quot;text-align:justify&quot;&gt;
The crowd had to guess the number of candies/gems in a jar. Around 75 people participated in the experiment. The actual number of gems in the jar were 375. The median of all estimates came out to be 300 and the mean of all the estimates came out to be around 396. Median underestimated and mean overestimated the actual value. So according to recent studies, Trimmed mean must be used as an aggregate measure to estimate where Wisdom of Crowds is involved.
&lt;/p&gt;
[[File:Gemsjar.jpg|center|200px|caption]]

===Trimmed Mean===
 &lt;p style=&quot;text-align:justify&quot;&gt;
In these kinds of experiments, 10% trimmed mean is usually followed. For calculating 10% trimmed mean, remove 10% smallest and 10% largest values from the sample. Calculate the mean of the sample obtained. In the above experiment, the trimmed mean came out to be around 351 which is very close to the actual value.&lt;/p&gt;

==Implementation==
Here, we try to demonstrate the concept of trimmed mean through crowd computing.
&lt;ol&gt;
&lt;li&gt; Input a list of estimates done by the crowd .&lt;/li&gt;
&lt;li&gt; Sort the list.&lt;/li&gt;
&lt;li&gt; Remove the 10% smallest values.&lt;/li&gt;
&lt;li&gt; Remove the 10% largest values.
&lt;li&gt; Calculate the mean of the new list obtained .&lt;/li&gt;&lt;/ol&gt;&lt;hr&gt;

==Data of Experiment==       
    Estimates =[1000,1010,1786,2000,1500,1500,100,120,150,150,150,170,175,180,197,200,200,200,200,200,200,220,220,220,220,234,250,250,250,250,250,250,250,250,250,263,270,275,275,286,300,
                300,300,300,300,300,300,300,320,350,350,350,400, 400,400,400,400,450,467,500,500,500,500,500,500,500,550,550,600,600,600,650,700,700,720]

    '''CODE:'''
&lt;pre&gt;
Estimates = [1000,1010,1786,2000,1500,1500,100,120,150,150,150,170,175,180,197,200,200,200,200,200,200,220,220,220,220,234,250,250,250,250,250,250,250,250,250,263,270,275,275,286,300,                300,300,300,300,300,300,300,320,350,350,350,400,400,400,400,400,450,467,500,500,500,500,500,500,500,550,550,600,600,600,650,700,700,720]
Estimates.sort()
offset = int(0.10*len(Estimates))
for i in range(offset):
       del Estimates[0]
       del Estimates[-1]
Sum = 0    
for i in range(len(Estimates)):
       Sum += Estimates[i]
Mean_Value = Sum/len(Estimates)
print(&quot;Mean : &quot;, int(Mean_Value))
#Output:
Mean :  351
&lt;/pre&gt;
&lt;hr&gt;
==Trimmed Mean for the above example== 
&lt;h3&gt;Using scipy library&lt;/h3&gt;
&lt;pre&gt;
#import scipy to use the method of trim_mean
from scipy import stats
trimMean = stats.trim_mean(Estimates, 0.1) # Trim 10% at both ends
print(&quot;Trimmed Mean : &quot;,trimMean)
#Output:
Trimmed Mean :  335.1020408163265
&lt;/pre&gt;

&lt;h3&gt;Without using scipy library&lt;/h3&gt;
&lt;pre&gt;
#Trimmed mean with 10%
p=10/100
#sorted data
data=[2, 4, 6, 7, 11, 21, 81, 90, 105, 121]
n = len(data)
#Remove elements from both end
rem=int(n*p)
newData = data[rem:-rem]
mean = 0
for i in newData:
    mean += i
mean = int(mean/len(newData))
print(&quot;Trimmed mean : &quot;,mean)
#Output: Trimmed mean :  40
&lt;/pre&gt;
[[#Top]]

=Jumbled_Words Permutations: Jumbled Words=
==What are Permutations ?==
A permutation also called ordering of selected number of elements from a list denoted by nPr here we are choosing all elements of a list and so n=r&lt;br&gt;
nPr=n!/(n-r)!&lt;br&gt; as n=r
nPn=n!&lt;br&gt; which gives all possible arrangement of elements present in a list.

 For example, permutations of list [1,2,3] are [1,2,3], [1,3,2], [2,1,3], [2,3,1], 
[3,1,2], and [3,2,1]. 
The number of permutations of a list of elements nPn is given by n!. For example, there are 2! = 2 x 1 = 2 permutations of [1,2], namely [1,2] and [2,1], and 3! = 3 x 2 x 1 = 6 permutations of [1,2,3], as mentioned above.&lt;br/&gt;
[[File:Permutations.jpg]]

==Implementation==
Here, we try to demonstrate the concept of permutations through jumbled words. It is a two player game in which one person presents the other person a different permutation of the word in his mind. The other person has to guess the right word. If he guesses, the he wins otherwise he loses.
 Input an list of words.
 Randomly pick a word from the list of words .
 Shuffle this word and present it to the other player.
 if word guesses by the player is same as the one picked from list of w
     player wins
 else
     player loses

ALTERNATE CODE TO GENERATE THIS GAME:
&lt;pre&gt;
import random
p1=input(&quot;enter player 1 name:&quot;)
p2=input(&quot;enter player 2 name:&quot;)
l=[&quot;rainbow&quot;,&quot;computer&quot;,&quot;robot&quot;,&quot;butter&quot;,&quot;vegetable&quot;,&quot;science&quot;,&quot;correct&quot;]
c1=c2=a1=a2=f1=f2=0
k=1
i=3
def play():
    n=random.choice(l)        ##n=chooses a word from list l
    l1=[]
    for j in n:
       l1.append(j)      ##creates a list for word in n
    for t in range(len(l1)):
       p=random.choice(l1)     ##this randomly displays letters in the list
       print(p)
       l1.remove(p)          ##to avoid the repetition of a letter
    s=input(&quot;enter the word:&quot;)
    if(s==n):
        print(&quot;correct&quot;)
        return 1
    else:
        print(&quot;not correct&quot;)
        print(&quot;answer is&quot;,n)
        return 0
def stat():
     print(&quot;player 1:&quot;)
     print(&quot;score:&quot;,c1)
     print(&quot;answered:&quot;,a1)
     print(&quot;failed:&quot;,f1)
     print(&quot;.............&quot;)
     print(&quot;player 2:&quot;)
     print(&quot;score:&quot;,c2)
     print(&quot;answered:&quot;,a2)
     print(&quot;failed&quot;,f2)
     if(c1&gt;c2):
         print(p1,&quot; won over &quot;,p2)
     elif(c1==c2):
         print(&quot;draw game&quot;)
     else:
         print(p2,&quot; won over &quot;,p1) 
while(i!=4):
      if(i==3):
         if(k==1):
             print(&quot;player 1 turn&quot;)
             print(&quot;your jumbled word is:&quot;)
             k=k+1
             m=play()
             if(m==1):      ##if guessed answer is correct,then score and no.of answered count will be increased
                c1+=1
                a1+=1
             else:
                f1+=1       ##else count of no.of failed to answered will be incremented
         else:
             print(&quot;player 2 turn&quot;)
             print(&quot;your jumbled word is:&quot;)
             k=k-1
             m=play()
             if(m==1):
                c2=c2+1
                a2=a2+1
             else:
                f2=f2+1
       if(i==2):
             print(&quot;present status&quot;)
             stat()
       i=int(input(&quot;enter your choice  1.stop 2.status 3.continue&quot;))
       if(i==1):
             stat()
             i=i+3
&lt;/pre&gt;
&lt;hr&gt;
=== JumbledWord Simple Logic, In Short ===
[[File:jumbledWord.gif]]
&lt;hr&gt;
'''Logic to create a Jumbled Word'''
&lt;hr&gt;
&lt;pre&gt;
#Get Jumbled Word and print it Horizontally
import random

def getJumbledWord(b):
    jumble=''
    l1 = [ b[i] for i in range(0, len(b)) ]
    for t in range(len(l1)):
       p=random.choice(l1)     ##this randomly gets letters from the list      
       jumble=jumble+p       
       l1.remove(p)
    return jumble

b=input(&quot;Enter a word to make it jumbled : &quot;)
print(&quot;Jumbled Word : &quot;, getJumbledWord(b))
&lt;/pre&gt;
&lt;hr&gt;
'''Another Logic to create a Jumbled Word'''
&lt;hr&gt;
&lt;pre&gt;
b=input(&quot;Enter a word to make it jumbled : &quot;)

def getJumbledWord1(b):
    l1 = [ b[i] for i in range(0, len(b)) ]
    random.shuffle(l1)
    str1 = ''.join(l1)
    return str1

print(&quot;Jumbled Word : &quot;, getJumbledWord1(b))
&lt;/pre&gt;

====Sample Output:====
&lt;pre&gt;
---- Output1 
Enter a word to make it jumbled : butter
Jumbled Word :  tbture

---- Output2 
Enter a word to make it jumbled : petriotism
Jumbled Word :  pittrosime
&lt;/pre&gt;

=Theory of Evolution=

== What is Evolution ? ==
Evolution is the change in heritable characteristics over successive generations. The theory of evolution explains that DNA, which acts as a carrier of genetic information from one generation to other, tends to change or mutate occasionally. These changes are reflected in next generations to come. This is how life has evolved on earth from bacteria to human beings.&lt;br&gt;
[[File:Evolution.png|500px]]

== Implementation ==
An array representing DNA is stored in a file. As genes are forms of DNA, they contain information to be transferred to forthcoming generations. Assume that information is in the form of bits (in the form of 0s and 1s). A number is picked randomly from 1 to the size of the array. A new parameter has been introduced which decides whether mutation would occur or not. If the value of this new parameter is 1 (It is picked randomly from 1 to 100), then only change is reflected down the generations, otherwise it is not. The pseudo code is as follows :

Input an array containing genetic information .
Randomly generate a number (say m) from 1 to length of the array. Randomly generate other number (say p) from 1 to 100.

&lt;pre&gt; 
    if p is equal to 1 then 
        if m is 1 then
          set it to 0
        else
          set it to 1
&lt;/pre&gt;
[[#TOP]]</text>
      <sha1>k10uyqs7r9p6wwuxybm4mpj6xn706gg</sha1>
    </revision>
    <revision>
      <id>3616</id>
      <parentid>3615</parentid>
      <timestamp>2018-09-28T04:31:12Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* Implementation */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="30319">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_3 Contributors of this page]
*Week 3 Playlist: https://www.youtube.com/playlist?list=PLc_j0TNIaWxOVx_z9jAM2UB3RqYNXaoEo
=List=
List is a flexible data structure used for storing a group of data separated by comma. The elements in a list need not be of the same data type.

'''Example:'''
       List_1 = [ 1, 2,3] or 
       List_1 = [&quot;coffee&quot;, &quot;Tea&quot;, &quot;Milk&quot;] or
       List_1 = [1,&quot;coffee&quot;, &quot;Tea&quot;, 3, &quot;5&quot;]

==List Creation==
&lt;pre&gt;a) A list can be created by simply putting values (separated by comma) between square brackets as given below,
       List_1 = [1,&quot;coffee&quot;, &quot;Tea&quot;, 3, &quot;5&quot;] #this creates a list by name List_1 containing following items


Or,
(b)A List can be created from scratch and elements can be added 
        List_2 = [ ]
        List_2.append(&quot;Kala&quot;)
        List_2.append(&quot;Mala&quot;)
Here we use &quot;append&quot; ,which is a function in python that enable us to append or attach an element to a list .
Thus List_2 will now hold [&quot;Kala&quot;,&quot;Mala&quot;]
&lt;/pre&gt;
[[#TOP]]

==Operations and Methods to work with List==
&lt;pre&gt;
a = [25,30,50,90,12,13]
b = [100,300,500,200,250]
&lt;/pre&gt;
&lt;hr&gt;
&lt;table border=2&gt;
  &lt;tr&gt;
    &lt;th&gt;&lt;b&gt;Method/&lt;br&gt;Operator&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Function&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Syntax&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Output&lt;/b&gt;&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;len()&lt;/td&gt;
    &lt;td&gt;Find length of a list&lt;/td&gt;
    &lt;td&gt;len(a)&lt;/td&gt;
    &lt;td&gt;6&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;max()&lt;/td&gt;
    &lt;td&gt;Find maximum element from the list&lt;/td&gt;
    &lt;td&gt;max(a)&lt;/td&gt;
    &lt;td&gt;90&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;min()&lt;/td&gt;
    &lt;td&gt;Find minimum element from the list&lt;/td&gt;
    &lt;td&gt;min(a)&lt;/td&gt;
    &lt;td&gt;12&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sum()&lt;/td&gt;
    &lt;td&gt;Returns sum of all elements of the list&lt;/td&gt;
    &lt;td&gt;sum(a)&lt;/td&gt;
    &lt;td&gt;220&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;reverse()&lt;/td&gt;
    &lt;td&gt;Reverses the original list&lt;/td&gt;
    &lt;td&gt;a.reverse()&lt;/td&gt;
    &lt;td&gt;[13, 12, 90, 50, 30, 25]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sort()&lt;/td&gt;
    &lt;td&gt;Sorts the original list in ascending order&lt;/td&gt;
    &lt;td&gt;a.sort()&lt;/td&gt;
    &lt;td&gt;[12, 13, 25, 30, 50, 90]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sorted()&lt;/td&gt;
    &lt;td&gt;Returns the new sorted list &lt;/td&gt;
    &lt;td&gt;sorted(a)&lt;/td&gt;
    &lt;td&gt;[12, 13, 25, 30, 50, 90]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;insert()&lt;/td&gt;
    &lt;td&gt;Insert at a particular index in the list, and shifts remaining elements&lt;/td&gt;
    &lt;td&gt;a.insert(3,3)&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 3, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;append()&lt;/td&gt;
    &lt;td&gt;Adds elements/object to the end of the list&lt;/td&gt;
    &lt;td&gt;a.append(5)&lt;br&gt;a.append([10,20])&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 5]&lt;br&gt;[25, 30, 50, 90, 12, 13, [10, 20]]&lt;br&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;extend()&lt;/td&gt;
    &lt;td&gt;Adds object to the end of the list as elements not as object&lt;/td&gt;
    &lt;td&gt;a.extend([10,20])&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 10, 20]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;*&amp;nbsp;&amp;nbsp;Repeatation&lt;br&gt;operator&lt;/td&gt;
    &lt;td&gt;Repeat the list for n times and returns a new list&lt;/td&gt;
    &lt;td&gt;a*2&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 25, 30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;+ Concatenation&lt;br&gt;operator&lt;/td&gt;
    &lt;td&gt;Concatenates two lists, and returns a new list&lt;/td&gt;
    &lt;td&gt;a+b&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 100, 300, 500, 200, 250]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;index()&lt;/td&gt;
    &lt;td&gt;Finds index of a particular element in the list or not&lt;/td&gt;
    &lt;td&gt;a.index(25)&lt;br&gt;a.index(0)&lt;br&gt;&lt;/td&gt;
    &lt;td&gt;0&lt;br&gt;&lt;br&gt;ValueError: 0 is not in list&lt;br&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;in operator&lt;/td&gt;
    &lt;td&gt;Finds whether a particular element is in the list or not, returns boolean&lt;/td&gt;
    &lt;td&gt;25 in a&lt;/td&gt;
    &lt;td&gt;True&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;not in operator&lt;/td&gt;
    &lt;td&gt;Checks if element is not available in list, returns boolean&lt;/td&gt;
    &lt;td&gt;25 not in a&lt;/td&gt;
    &lt;td&gt;False&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;count()&lt;/td&gt;
    &lt;td&gt;Counts the number of occurence of an element in the list&lt;/td&gt;
    &lt;td&gt;a.count(25)&lt;/td&gt;
    &lt;td&gt;1&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;remove()&lt;/td&gt;
    &lt;td&gt;Removes an element from the list&lt;/td&gt;
    &lt;td&gt;a.remove(25)&lt;/td&gt;
    &lt;td&gt; [30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;pop()&lt;/td&gt;
    &lt;td&gt;Delete and return item at index 0&lt;/td&gt;
    &lt;td&gt;a.pop(0)&lt;/td&gt;
    &lt;td&gt;25 , a will be [30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;del&lt;/td&gt;
    &lt;td&gt;Deletes item at a particular index from the list&lt;/td&gt;
    &lt;td&gt;del a[0]&lt;/td&gt;
    &lt;td&gt;[30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;all()&lt;/td&gt;
&lt;td&gt;Returns True, if all items in list are True or it is an empty list&lt;/td&gt;
&lt;td&gt;all([True, True, True])
all([])
&lt;/td&gt;
&lt;td&gt;True&lt;br&gt;
True&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;any()&lt;/td&gt;
&lt;td&gt;Returns True, if any item in list is True else return False&lt;/td&gt;
&lt;td&gt;any([True, True, True])&lt;br&gt;
any([True, False, True])&lt;br&gt;
any([])&lt;/td&gt;
&lt;td&gt;True&lt;br&gt;False&lt;br&gt;False&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;

==Printing the List==
=== Print whole list ===
A list can be printed simply or using a ''for / while'' loop 

 print(List_2)     # To print the entire list
This code will print      
 ['Kala','Mala']     

===Print element at a particular index===
&lt;pre&gt;
Using index position
    List_2[0]     # prints 'Kala' ,i.e,the value at index position 0.
    List_2[1]     # prints 'Mala'.
&lt;/pre&gt;
=== Without using index position ===
&lt;pre&gt;
for item in List_2:   # here item is a variable used to access elements in list.
       print(item)
   This code snippet prints 
    Kala
    Mala
&lt;/pre&gt;
[[#TOP]]

==Search for a particular element in list==
Elements in a list can be searched by one of the two ways:
=== using index() function===
&lt;pre&gt;
ages1 = [11,23,12,23,45]

#if element is available in the list, index() returns the index value on which, the element is present.
print(ages1.index(45))#Output: 4

#if element is not available in the list, index() returns ''ValueError''
print(ages1.index(0))#Output: ValueError:
&lt;/pre&gt;

In programming, if such error occurs, program gets terminated. It can be solved using exception handling.
e.g.
&lt;pre&gt;
ages1 = [11,23,12,23,45]

try:
    print(ages1.index(0))
except ValueError:
    print(&quot;Exception has occured&quot;)    
    print(&quot;Element is not found in the list&quot;)

&lt;/pre&gt;
&lt;pre&gt;
'''Output: 
Exception has occured
Element is not found in the list
'''&lt;/pre&gt;
[[#TOP]]

=== using 'in' operator===
''in'' operator is used to check whether a particular element is available in the list or not.e.g.

&lt;pre&gt;
ages1 = [11,23,12,23,45]
no=11

if no in ages1:
    print(&quot;no is there in the list&quot;)
else:    
    print(&quot;no is NOT there in the list&quot;)
&lt;/pre&gt;
&lt;pre&gt;
#Output: no is there in the list
&lt;/pre&gt;


'''Number is not there in the list'''
&lt;pre&gt;
ages1 = [11,23,12,23,45]
no=15

if no in ages1:
    print(&quot;no is there in the list&quot;)
else:    
    print(&quot;no is NOT there in the list&quot;)
&lt;/pre&gt;
&lt;pre&gt;
Output: no is NOT there in the list
&lt;/pre&gt;
[[#TOP]]

==Updating the List==
The lists can be updated using ''append'' or ''insert'' function.  Append adds the element to the end of the list and Insert adds the element in the specified position.
&lt;pre&gt;
   # add the element 'Sheela' to the end of the list.
   List_2.append(&quot;Sheela&quot;)    
   print (List_2) will output 
   ['Kala', 'Mala', 'Sheela']
&lt;/pre&gt;
   &lt;pre&gt;
# add the element &quot;Bala&quot; in the list at the index 1.
   List_2.insert(1,&quot;Bala&quot;)    
   print (List_2) will output 
   ['Kala', 'Bala','Mala', 'Sheela']
&lt;/pre&gt;

=== Extend the list by adding elements of other list at end using extend()===
&lt;pre&gt;
ages = [11,23,12,23,45]
ages.extend([57,58])
print(ages)
&lt;/pre&gt;

&lt;pre&gt;
#Output: [11, 23, 12, 23, 45, 57, 58]
&lt;/pre&gt;

==== Difference between ''append and extend'' ====
Difference between append and extend can be easily understood, by the following example.

&lt;pre&gt;
appendlist = [11,23,12,23,45]
appendlist.append([57,58])

extendlist= [11,23,12,23,45]
extendlist.extend([57,58])
&lt;/pre&gt;

&lt;pre&gt;
'''Output:
[11, 23, 12, 23, 45, [57, 58]]
[11, 23, 12, 23, 45, 57, 58]'''
&lt;/pre&gt;

[[#TOP]]

==Basic Operations on List==
===Frequency of Occurrence===
list.count(object) will return the number of times the object occur in the list.
  '''Example'''
    ages = [11,23,12,23,45,43,22,24,23]
    ages.count(23) will return
    3
    ages.count(100) will return
    0

===Length of the List===
len(list) will return the length of the list ie. the number of objects in the list.
  '''Example'''
&lt;pre&gt;
    ages = [11,23,12,23,45,43,22,24,23]
    len(ages) # Output: 9
&lt;/pre&gt;

To print the objects in the list either use ''for item in list'' or ''for index in range(len(list))''
&lt;pre&gt;
    for item in ages:       
        print (item)  
        (OR)
    for index in range(len(ages)) :
        print (ages[index])
&lt;/pre&gt;

===Sort the List===
list.sort() will sort the list in ascending order
  '''Example'''
    ages = [11,23,12,23,45,43,22,24,23]
    ages.sort() 
    print (ages) 
    [11, 12, 22, 23, 23, 23, 24, 43, 45]

[[#TOP]]

===Sort the List using sorted() function===
sorted(list1) will sort the list and return a new list, it doesn't modify the original list
&lt;br&gt;'''Example: Sort in ascending order'''
&lt;pre&gt;
ages = [11,23,12,23,45,43,22,24,23]
newList=sorted(ages)
print(newList)

#Output: [11, 12, 22, 23, 23, 23, 24, 43, 45]
&lt;/pre&gt;

&lt;br&gt;'''Example: Sort in descending order'''
&lt;pre&gt;
ages = [11,23,12,23,45,43,22,24,23]
newList=sorted(ages,reverse=True)
print(newList)

#Output: [45, 43, 24, 23, 23, 23, 22, 12, 11]
&lt;/pre&gt;

===Reverse the List===
list.reverse() will reverse the original list
  '''Example'''
    ages = [11, 12, 22, 23, 23, 23, 24, 43, 45]
    ages.reverse()
    print (ages)
    [45, 43, 24, 23, 23, 23, 22, 12, 11]

Both sort() and reverse() list operation will work on numeric and alphanumeric data list.

A special use of the reverse() function is to descend a list that is sorted in ascending order.

  '''Example'''
&lt;pre&gt;
ages = [11, 12, 22, 23, 23, 23, 24, 43, 45]
ages.sort()
print(ages)
ages.reverse()
print(ages)
&lt;/pre&gt;

===Slicing===
Used to retrieve an object or objects in a range as a list  
  '''Example'''

Use ''list[index]'' to retrieve the object at the given index
&lt;pre&gt;
In [1]: student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
In [2]: student[3]     #Object at index 3.  Remember index starts at 0
Out[2]: 'Geetha'      
&lt;/pre&gt;

Use ''list[start_index : end_index + 1]'' to retrieve objects from the start_index to end_index 
&lt;pre&gt;
In [3]: student[2:4]     # Objects from index 2 to 3 as List. Note the [ and ]
Out[3]: ['Vijay', 'Geetha']   
&lt;/pre&gt;

Use ''list[:]'' to retrieve objects from the starting of the list to the end of the list. 
The default start value will be the starting index of the list (i.e. 0) and the default end value
will be the length of the list 
&lt;pre&gt;
In [4]: student[:]        # prints the entire list
Out[4]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma', 'Janani']
&lt;/pre&gt;
&lt;pre&gt;
In [5]: student[:5]       # prints the objects from the start of the list upto object at index 4
Out[5]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran']
&lt;/pre&gt;
&lt;pre&gt;
In [6]: student[2:]       # prints the objects from index 2 upto the end of the list
Out[6]: ['Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma', 'Janani']
&lt;/pre&gt;

Negative index too is available in Python. It starts from last element of the list. i.e.
&lt;pre&gt;
In [7]:student[-1]        #prints last index of list
Out[7]: 'Janani'
&lt;/pre&gt;
&lt;pre&gt;
In [8]:student[-1:-8]     #prints empty list
Out[8]: []
&lt;/pre&gt;
&lt;pre&gt;
In [9]:student[-8:-1]     #prints -8th index to -1st index elements
Out[9]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma']
&lt;/pre&gt;

[[#TOP]]

===Removing Item from list ===
----

Is used to remove a specific item from the list.

'''Example:'''
 
Use list.remove(entry/value)  Or   del list[index]    Or list.pop(index)
&lt;pre&gt;
student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
student.remove(&quot;Arun&quot;)   #This will delete item &quot;Arun&quot;
         Or    
del student[0]           # This will delete item at index 0
         Or
student.pop(0)         # This will delete and return item at index 0
print(student)    
Output: &quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
&lt;/pre&gt;

[[#TOP]]

===Delete list ===
----
Used to delete complete list

'''Example'''

Use del &lt;list name&gt;
&lt;pre&gt;
student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
del student&lt;/pre&gt;

===Concatenation of two lists===
----
''+'' is the concatenation operator which is used concatenate two lists. 
&lt;pre&gt;
ages1 = [11,23,12,23,45]
ages2 = [25, 24, 43, 47]
age=ages1+ages2
print(age)
#Output: [11, 23, 12, 23, 45, 25, 24, 43, 47]
&lt;/pre&gt;

===Repeatation of a list ===
----
''*'' is the operator to repeat a particular list.
&lt;pre&gt;
ages1 = [11,23,12,23,45]
age=ages1*5 #ages1 list is repeated 5 times and stroed in ''age'' list
print(age)

#Output: [11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45]
&lt;/pre&gt;

=== all and any for List===
all() and any() are special functions to check whether all elements in iterable is ''True'' or any element is ''True''
&lt;ol&gt;
&lt;li&gt;If all elements in a list are ''True'', '''all()''' will return ''True''&lt;/li&gt;
&lt;li&gt;If iterable is ''empty'', '''all()''' will return ''True''&lt;/li&gt;
&lt;li&gt;If iterable contains at least one ''True'', '''any()''' will return ''True''&lt;/li&gt;
&lt;li&gt;If iterable is ''empty'', '''any()''' will return ''False''&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;
lsit=[True, True, True, True]
print(all(lsit))#Output: True
print(any(lsit))#Output: True

lsit1=[True, False, True, True]
print(all(lsit1))#Output: False
print(any(lsit1))#Output: True

lsit2=[False,False,False]
print(all(lsit2))#Output: False
print(any(lsit2))#Output: False

lsit3=[]
print(all(lsit3))#Output: True
print(any(lsit3))#Output: False
&lt;/pre&gt;

==Conditional Statements==
&lt;pre&gt;Conditionals are used to check the condition and change the flow of the program 
accordingly. They are realized in programming languages through if statement. The 
syntax is as follows :
&lt;pre&gt;
         if condition : 
            statement
&lt;/pre&gt;
    '''Note:''' Do not forget indentation (inserting space/tab) in the line after the
 if condition.
    
    In case you want to execute a set of statements when a condition is true and another

set of statement when the condition is false.
&lt;pre&gt;
         if condition : 
            statement 1
         else :
            statement 2
&lt;/pre&gt;

&lt;pre&gt;    
    Multiple if-else statements can be written as follows:
         if condition_1 : 
            statement 1
         elif condition_2 : # 'elif' is short for 'else if'
            statement 2
         elif condition_3 :
            statement 3
        .
        .
         else :
            final statement
&lt;/pre&gt;

[[#TOP]]

=Loops and Conditionals : Fizzbuzz=
====Loops====
Loops are used to execute a set of repetitive statements. They are realised
through 'while' and 'for' loops in programming languages. The syntax of 'for' loop is 
as follows :
&lt;pre&gt;
for LOOPVARIABLE in SEQUENCE: 
            STATEMENTS&lt;/pre&gt;

    '''e.g.''' to print all the data from a list we can write:
&lt;pre&gt;
for item in list_name:
      print(item)&lt;/pre&gt;
    OR
&lt;pre&gt;
for index in range(len(list_name)):
      print(list_name[index])
 &lt;/pre&gt;   
    The syntax for while loop is as follows :
&lt;pre&gt;    
while BOOLEANEXPRESSION: 
     STATEMENTS
     INCREMENT/DECREMENT
&lt;/pre&gt;    
    '''e.g.''' if we want to print all numbers from 1 to 10
&lt;pre&gt;
i=1
while i&lt;=10 :
    print(i,&quot; &quot;)
    i=i+1
    &lt;/pre&gt;
 
'while' loop has indefinite iteration (run-time unknown). So, there must be loop,  break statement in it.
 Whereas 'for' loop is definite in nature (i.e. known or predictable span).&lt;br&gt;

&lt;b&gt;NOTE: Python doesn't have anything like do-while loop.&lt;/b&gt;

[[#TOP]]

==Implementation==
Here, we try to demonstrate the concept of loops and conditionals through a game called Fizzbuzz. The rules are as follows :&lt;br/&gt;
[[File:fizzBuzz.gif]]

• if input number is a multiple of ’3’ print ”Fizz”
&lt;br/&gt;
• if input number is a multiple of ’5’ print ”Buzz”
&lt;br/&gt;
• if input number is a multiple of both '3' and ’5’ print ”FizzBuzz”
&lt;br/&gt;
The pseudo code is as follows :
&lt;pre&gt;
   If input no % 3 == 0 and  input no % 5 == 0 : 
       print ”Fizzbuzz”
   else if input no % 3 == 0 : 
       print ”Fizz”
   else if input no % 5 == 0 : 
       print ”Buzz”
   else :
       print the input no
&lt;/pre&gt;
The order of statements execution matters to get the desired output. The highest priority condition should be first followed by other. In fizzbuzz programming, first checking should be done for both divisibility of 3 and 5. If condition not satisfied only then it should check individually for 3 or 5. So carefully choosing the order is crucial for better programming.
Note: There is some effect of present condition statements chosen on next conditions statements. That is why in first attempt fizzbuzz programming got struck.

Example: 
&lt;pre&gt;
#Code to achieve the above requirement in python3.
i = int(input(&quot;Enter the number&quot;)) 
if i%3 == 0 and i%5 == 0: print(i,&quot;FizzBuzz&quot;)  
elif i%5 == 0: print(i,&quot;Buzz&quot;)
elif i%3 == 0: print(i,&quot;Fizz&quot;)
else: print(i)
&lt;/pre&gt;
Lets put the same into a loop for a range given by the user.
&lt;pre&gt;
def fizzbuzzgame(start,stop):
    for i in range(start,stop+1):
        if i%3 == 0 and i%5 == 0:
            print(i,&quot;FizzBuzz&quot;)
        elif i%5 == 0:
            print(i,&quot;Buzz&quot;)
        elif i%3 == 0:
            print(i,&quot;Fizz&quot;)
        else: print(i)

fizzbuzzgame(50,100)
&lt;/pre&gt;
&lt;pre&gt;
1235
Buzz
======================================
555
Fizzbuzz
======================================
1235
Buzz
======================================
999
Fizz
&lt;/pre&gt;

=== Fizz Buzz game in Interactive mode with Score ===
'''By Ms. Ami Tusharkant Choksi'''
&lt;pre&gt;
def fizzbuzzgame(i):
        if i%3 == 0 and i%5 == 0:
            print(i,&quot;FizzBuzz&quot;)
            return(&quot;fzbz&quot;)
        elif i%5 == 0:
            print(i,&quot;Buzz&quot;)
            return(&quot;bz&quot;)
        elif i%3 == 0:
            print(i,&quot;Fizz&quot;)
            return(&quot;fz&quot;)
        else:
            print(i)
            return(&quot;no&quot;)

ch = 'y'
fizzbuzz=0
fizz=0
buzz=0
nothing=0
print(&quot;&quot;&quot;

 /$$$$$$$$/$$                  /$$$$$$$                            
| $$_____|__/                 | $$__  $$                           
| $$      /$$/$$$$$$$$/$$$$$$$| $$  \ $$/$$   /$$/$$$$$$$$/$$$$$$$$
| $$$$$  | $|____ /$$|____ /$$| $$$$$$$| $$  | $|____ /$$|____ /$$/
| $$__/  | $$  /$$$$/   /$$$$/| $$__  $| $$  | $$  /$$$$/   /$$$$/ 
| $$     | $$ /$$__/   /$$__/ | $$  \ $| $$  | $$ /$$__/   /$$__/  
| $$     | $$/$$$$$$$$/$$$$$$$| $$$$$$$|  $$$$$$//$$$$$$$$/$$$$$$$$
|__/     |__|________|________|_______/ \______/|________|________/
                                                                  
&quot;&quot;&quot;)   
print('''

  /$$$$$$                                
 /$$__  $$                               
| $$  \__/ /$$$$$$ /$$$$$$/$$$$  /$$$$$$ 
| $$ /$$$$|____  $| $$_  $$_  $$/$$__  $$
| $$|_  $$ /$$$$$$| $$ \ $$ \ $| $$$$$$$$
| $$  \ $$/$$__  $| $$ | $$ | $| $$_____/
|  $$$$$$|  $$$$$$| $$ | $$ | $|  $$$$$$$
 \______/ \_______|__/ |__/ |__/\_______/
                                     
''')

while(ch == 'y'):
    n=int(input(&quot;Enter a Number : &quot;))
    winLoose=fizzbuzzgame(n)
    if(winLoose == &quot;fz&quot;):
        fizz+=1
    elif(winLoose == &quot;bz&quot;):
        buzz+=1
    elif(winLoose == &quot;fzbz&quot;):
        fizzbuzz+=1
    ch=input(&quot;Do you want to continue playing the game : (y/n)&quot;)
    if(ch=='n'):
        print('Congratulations, your score is\n FizzBuzz:%d\nFizz:%d\nBuzz:%d' %
(fizzbuzz,fizz,buzz))
    
'''Sample Output:

 /$$$$$$$$/$$                  /$$$$$$$                            
| $$_____|__/                 | $$__  $$                           
| $$      /$$/$$$$$$$$/$$$$$$$| $$  \ $$/$$   /$$/$$$$$$$$/$$$$$$$$
| $$$$$  | $|____ /$$|____ /$$| $$$$$$$| $$  | $|____ /$$|____ /$$/
| $$__/  | $$  /$$$$/   /$$$$/| $$__  $| $$  | $$  /$$$$/   /$$$$/ 
| $$     | $$ /$$__/   /$$__/ | $$  \ $| $$  | $$ /$$__/   /$$__/  
| $$     | $$/$$$$$$$$/$$$$$$$| $$$$$$$|  $$$$$$//$$$$$$$$/$$$$$$$$
|__/     |__|________|________|_______/ \______/|________|________/
                                                                                                                                   

  /$$$$$$                                
 /$$__  $$                               
| $$  \__/ /$$$$$$ /$$$$$$/$$$$  /$$$$$$ 
| $$ /$$$$|____  $| $$_  $$_  $$/$$__  $$
| $$|_  $$ /$$$$$$| $$ \ $$ \ $| $$$$$$$$
| $$  \ $$/$$__  $| $$ | $$ | $| $$_____/
|  $$$$$$|  $$$$$$| $$ | $$ | $|  $$$$$$$
 \______/ \_______|__/ |__/ |__/\_______/
                                         

Enter a Number : 666
666 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 777
777 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 555
555 FizzBuzz
Do you want to continue playing the game : (y/n)y
Enter a Number : 1
1
Do you want to continue playing the game : (y/n)y
Enter a Number : 789
789 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 25
25 Buzz
Do you want to continue playing the game : (y/n)n
Congratulations, your score is

FizzBuzz:1
Fizz:3
Buzz:1

&lt;/pre&gt;

=Crowd Computing: Just Estimate=
==Wisdom of Crowds==
 &lt;p style=&quot;text-align:justify&quot;&gt;
The concept of ’Wisdom of Crowds’ was proposed by Francis Galton. A weight-judging competition was carried on at the annual show of the West of England Fat Stock and Poultry Exhibition recently held at Plymouth, A fat ox having been selected, competitors bought stamped and numbered cards, each, on which to inscribe their respective names, addresses, and estimates of what the ox would weigh after it had been slaughtered. Those who guessed most successfully received prizes. About 8oo tickets were issued to the par- ticipants. The middlemost estimate of all the estimates recorded was 1207 lbs and the actual weight of the ox was 1198 lbs.&lt;/p&gt;

==Our Experiment==
 &lt;p style=&quot;text-align:justify&quot;&gt;
The crowd had to guess the number of candies/gems in a jar. Around 75 people participated in the experiment. The actual number of gems in the jar were 375. The median of all estimates came out to be 300 and the mean of all the estimates came out to be around 396. Median underestimated and mean overestimated the actual value. So according to recent studies, Trimmed mean must be used as an aggregate measure to estimate where Wisdom of Crowds is involved.
&lt;/p&gt;
[[File:Gemsjar.jpg|center|200px|caption]]

===Trimmed Mean===
 &lt;p style=&quot;text-align:justify&quot;&gt;
In these kinds of experiments, 10% trimmed mean is usually followed. For calculating 10% trimmed mean, remove 10% smallest and 10% largest values from the sample. Calculate the mean of the sample obtained. In the above experiment, the trimmed mean came out to be around 351 which is very close to the actual value.&lt;/p&gt;

==Implementation==
Here, we try to demonstrate the concept of trimmed mean through crowd computing.
&lt;ol&gt;
&lt;li&gt; Input a list of estimates done by the crowd .&lt;/li&gt;
&lt;li&gt; Sort the list.&lt;/li&gt;
&lt;li&gt; Remove the 10% smallest values.&lt;/li&gt;
&lt;li&gt; Remove the 10% largest values.
&lt;li&gt; Calculate the mean of the new list obtained .&lt;/li&gt;&lt;/ol&gt;&lt;hr&gt;

==Data of Experiment==       
    Estimates =[1000,1010,1786,2000,1500,1500,100,120,150,150,150,170,175,180,197,200,200,200,200,200,200,220,220,220,220,234,250,250,250,250,250,250,250,250,250,263,270,275,275,286,300,
                300,300,300,300,300,300,300,320,350,350,350,400, 400,400,400,400,450,467,500,500,500,500,500,500,500,550,550,600,600,600,650,700,700,720]

    '''CODE:'''
&lt;pre&gt;
Estimates = [1000,1010,1786,2000,1500,1500,100,120,150,150,150,170,175,180,197,200,200,200,200,200,200,220,220,220,220,234,250,250,250,250,250,250,250,250,250,263,270,275,275,286,300,                300,300,300,300,300,300,300,320,350,350,350,400,400,400,400,400,450,467,500,500,500,500,500,500,500,550,550,600,600,600,650,700,700,720]
Estimates.sort()
offset = int(0.10*len(Estimates))
for i in range(offset):
       del Estimates[0]
       del Estimates[-1]
Sum = 0    
for i in range(len(Estimates)):
       Sum += Estimates[i]
Mean_Value = Sum/len(Estimates)
print(&quot;Mean : &quot;, int(Mean_Value))
#Output:
Mean :  351
&lt;/pre&gt;
&lt;hr&gt;
==Trimmed Mean for the above example== 
&lt;h3&gt;Using scipy library&lt;/h3&gt;
&lt;pre&gt;
#import scipy to use the method of trim_mean
from scipy import stats
trimMean = stats.trim_mean(Estimates, 0.1) # Trim 10% at both ends
print(&quot;Trimmed Mean : &quot;,trimMean)
#Output:
Trimmed Mean :  335.1020408163265
&lt;/pre&gt;

&lt;h3&gt;Without using scipy library&lt;/h3&gt;
&lt;pre&gt;
#Trimmed mean with 10%
p=10/100
#sorted data
data=[2, 4, 6, 7, 11, 21, 81, 90, 105, 121]
n = len(data)
#Remove elements from both end
rem=int(n*p)
newData = data[rem:-rem]
mean = 0
for i in newData:
    mean += i
mean = int(mean/len(newData))
print(&quot;Trimmed mean : &quot;,mean)
#Output: Trimmed mean :  40
&lt;/pre&gt;
[[#Top]]

=Jumbled_Words Permutations: Jumbled Words=
==What are Permutations ?==
A permutation also called ordering of selected number of elements from a list denoted by nPr here we are choosing all elements of a list and so n=r&lt;br&gt;
nPr=n!/(n-r)!&lt;br&gt; as n=r
nPn=n!&lt;br&gt; which gives all possible arrangement of elements present in a list.

 For example, permutations of list [1,2,3] are [1,2,3], [1,3,2], [2,1,3], [2,3,1], 
[3,1,2], and [3,2,1]. 
The number of permutations of a list of elements nPn is given by n!. For example, there are 2! = 2 x 1 = 2 permutations of [1,2], namely [1,2] and [2,1], and 3! = 3 x 2 x 1 = 6 permutations of [1,2,3], as mentioned above.&lt;br/&gt;
[[File:Permutations.jpg]]

==Implementation==
Here, we try to demonstrate the concept of permutations through jumbled words. It is a two player game in which one person presents the other person a different permutation of the word in his mind. The other person has to guess the right word. If he guesses, the he wins otherwise he loses.
 Input an list of words.
 Randomly pick a word from the list of words .
 Shuffle this word and present it to the other player.
 if word guesses by the player is same as the one picked from list of w
     player wins
 else
     player loses

ALTERNATE CODE TO GENERATE THIS GAME:
&lt;pre&gt;
import random
p1=input(&quot;enter player 1 name:&quot;)
p2=input(&quot;enter player 2 name:&quot;)
l=[&quot;rainbow&quot;,&quot;computer&quot;,&quot;robot&quot;,&quot;butter&quot;,&quot;vegetable&quot;,&quot;science&quot;,&quot;correct&quot;]
c1=c2=a1=a2=f1=f2=0
k=1
i=3
def play():
    n=random.choice(l)        ##n=chooses a word from list l
    l1=[]
    for j in n:
       l1.append(j)      ##creates a list for word in n
    for t in range(len(l1)):
       p=random.choice(l1)     ##this randomly displays letters in the list
       print(p)
       l1.remove(p)          ##to avoid the repetition of a letter
    s=input(&quot;enter the word:&quot;)
    if(s==n):
        print(&quot;correct&quot;)
        return 1
    else:
        print(&quot;not correct&quot;)
        print(&quot;answer is&quot;,n)
        return 0
def stat():
     print(&quot;player 1:&quot;)
     print(&quot;score:&quot;,c1)
     print(&quot;answered:&quot;,a1)
     print(&quot;failed:&quot;,f1)
     print(&quot;.............&quot;)
     print(&quot;player 2:&quot;)
     print(&quot;score:&quot;,c2)
     print(&quot;answered:&quot;,a2)
     print(&quot;failed&quot;,f2)
     if(c1&gt;c2):
         print(p1,&quot; won over &quot;,p2)
     elif(c1==c2):
         print(&quot;draw game&quot;)
     else:
         print(p2,&quot; won over &quot;,p1) 
while(i!=4):
      if(i==3):
         if(k==1):
             print(&quot;player 1 turn&quot;)
             print(&quot;your jumbled word is:&quot;)
             k=k+1
             m=play()
             if(m==1):      ##if guessed answer is correct,then score and no.of answered count will be increased
                c1+=1
                a1+=1
             else:
                f1+=1       ##else count of no.of failed to answered will be incremented
         else:
             print(&quot;player 2 turn&quot;)
             print(&quot;your jumbled word is:&quot;)
             k=k-1
             m=play()
             if(m==1):
                c2=c2+1
                a2=a2+1
             else:
                f2=f2+1
       if(i==2):
             print(&quot;present status&quot;)
             stat()
       i=int(input(&quot;enter your choice  1.stop 2.status 3.continue&quot;))
       if(i==1):
             stat()
             i=i+3
&lt;/pre&gt;
&lt;hr&gt;
=== JumbledWord Simple Logic, In Short ===
[[File:jumbledWord.gif]]
&lt;hr&gt;
'''Logic to create a Jumbled Word'''
&lt;hr&gt;
&lt;pre&gt;
#Get Jumbled Word and print it Horizontally
import random

def getJumbledWord(b):
    jumble=''
    l1 = [ b[i] for i in range(0, len(b)) ]
    for t in range(len(l1)):
       p=random.choice(l1)     ##this randomly gets letters from the list      
       jumble=jumble+p       
       l1.remove(p)
    return jumble

b=input(&quot;Enter a word to make it jumbled : &quot;)
print(&quot;Jumbled Word : &quot;, getJumbledWord(b))
&lt;/pre&gt;
&lt;hr&gt;
'''Another Logic to create a Jumbled Word'''
&lt;hr&gt;
&lt;pre&gt;
b=input(&quot;Enter a word to make it jumbled : &quot;)

def getJumbledWord1(b):
    l1 = [ b[i] for i in range(0, len(b)) ]
    random.shuffle(l1)
    str1 = ''.join(l1)
    return str1

print(&quot;Jumbled Word : &quot;, getJumbledWord1(b))
&lt;/pre&gt;

====Sample Output:====
&lt;pre&gt;
---- Output1 
Enter a word to make it jumbled : butter
Jumbled Word :  tbture

---- Output2 
Enter a word to make it jumbled : petriotism
Jumbled Word :  pittrosime
&lt;/pre&gt;

=Theory of Evolution=

== What is Evolution ? ==
Evolution is the change in heritable characteristics over successive generations. The theory of evolution explains that DNA, which acts as a carrier of genetic information from one generation to other, tends to change or mutate occasionally. These changes are reflected in next generations to come. This is how life has evolved on earth from bacteria to human beings.&lt;br&gt;
[[File:Evolution.png|500px]]

== Implementation ==
An array representing DNA is stored in a file. As genes are forms of DNA, they contain information to be transferred to forthcoming generations. Assume that information is in the form of bits (in the form of 0s and 1s). A number is picked randomly from 1 to the size of the array. A new parameter has been introduced which decides whether mutation would occur or not. If the value of this new parameter is 1 (It is picked randomly from 1 to 100), then only change is reflected down the generations, otherwise it is not. The pseudo code is as follows :

Input an array containing genetic information .
Randomly generate a number (say m) from 1 to length of the array. Randomly generate other number (say p) from 1 to 100.

&lt;pre&gt; 
    if p is equal to 1 then 
        if m is 1 then
          set it to 0
        else
          set it to 1
&lt;/pre&gt;
[[#TOP]]</text>
      <sha1>ayi1ov1svv0rqunr1cv6p9ms6qq7ean</sha1>
    </revision>
    <revision>
      <id>3617</id>
      <parentid>3616</parentid>
      <timestamp>2018-09-28T04:32:26Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* Implementation */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="30328">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_3 Contributors of this page]
*Week 3 Playlist: https://www.youtube.com/playlist?list=PLc_j0TNIaWxOVx_z9jAM2UB3RqYNXaoEo
=List=
List is a flexible data structure used for storing a group of data separated by comma. The elements in a list need not be of the same data type.

'''Example:'''
       List_1 = [ 1, 2,3] or 
       List_1 = [&quot;coffee&quot;, &quot;Tea&quot;, &quot;Milk&quot;] or
       List_1 = [1,&quot;coffee&quot;, &quot;Tea&quot;, 3, &quot;5&quot;]

==List Creation==
&lt;pre&gt;a) A list can be created by simply putting values (separated by comma) between square brackets as given below,
       List_1 = [1,&quot;coffee&quot;, &quot;Tea&quot;, 3, &quot;5&quot;] #this creates a list by name List_1 containing following items


Or,
(b)A List can be created from scratch and elements can be added 
        List_2 = [ ]
        List_2.append(&quot;Kala&quot;)
        List_2.append(&quot;Mala&quot;)
Here we use &quot;append&quot; ,which is a function in python that enable us to append or attach an element to a list .
Thus List_2 will now hold [&quot;Kala&quot;,&quot;Mala&quot;]
&lt;/pre&gt;
[[#TOP]]

==Operations and Methods to work with List==
&lt;pre&gt;
a = [25,30,50,90,12,13]
b = [100,300,500,200,250]
&lt;/pre&gt;
&lt;hr&gt;
&lt;table border=2&gt;
  &lt;tr&gt;
    &lt;th&gt;&lt;b&gt;Method/&lt;br&gt;Operator&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Function&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Syntax&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Output&lt;/b&gt;&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;len()&lt;/td&gt;
    &lt;td&gt;Find length of a list&lt;/td&gt;
    &lt;td&gt;len(a)&lt;/td&gt;
    &lt;td&gt;6&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;max()&lt;/td&gt;
    &lt;td&gt;Find maximum element from the list&lt;/td&gt;
    &lt;td&gt;max(a)&lt;/td&gt;
    &lt;td&gt;90&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;min()&lt;/td&gt;
    &lt;td&gt;Find minimum element from the list&lt;/td&gt;
    &lt;td&gt;min(a)&lt;/td&gt;
    &lt;td&gt;12&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sum()&lt;/td&gt;
    &lt;td&gt;Returns sum of all elements of the list&lt;/td&gt;
    &lt;td&gt;sum(a)&lt;/td&gt;
    &lt;td&gt;220&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;reverse()&lt;/td&gt;
    &lt;td&gt;Reverses the original list&lt;/td&gt;
    &lt;td&gt;a.reverse()&lt;/td&gt;
    &lt;td&gt;[13, 12, 90, 50, 30, 25]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sort()&lt;/td&gt;
    &lt;td&gt;Sorts the original list in ascending order&lt;/td&gt;
    &lt;td&gt;a.sort()&lt;/td&gt;
    &lt;td&gt;[12, 13, 25, 30, 50, 90]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sorted()&lt;/td&gt;
    &lt;td&gt;Returns the new sorted list &lt;/td&gt;
    &lt;td&gt;sorted(a)&lt;/td&gt;
    &lt;td&gt;[12, 13, 25, 30, 50, 90]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;insert()&lt;/td&gt;
    &lt;td&gt;Insert at a particular index in the list, and shifts remaining elements&lt;/td&gt;
    &lt;td&gt;a.insert(3,3)&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 3, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;append()&lt;/td&gt;
    &lt;td&gt;Adds elements/object to the end of the list&lt;/td&gt;
    &lt;td&gt;a.append(5)&lt;br&gt;a.append([10,20])&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 5]&lt;br&gt;[25, 30, 50, 90, 12, 13, [10, 20]]&lt;br&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;extend()&lt;/td&gt;
    &lt;td&gt;Adds object to the end of the list as elements not as object&lt;/td&gt;
    &lt;td&gt;a.extend([10,20])&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 10, 20]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;*&amp;nbsp;&amp;nbsp;Repeatation&lt;br&gt;operator&lt;/td&gt;
    &lt;td&gt;Repeat the list for n times and returns a new list&lt;/td&gt;
    &lt;td&gt;a*2&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 25, 30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;+ Concatenation&lt;br&gt;operator&lt;/td&gt;
    &lt;td&gt;Concatenates two lists, and returns a new list&lt;/td&gt;
    &lt;td&gt;a+b&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 100, 300, 500, 200, 250]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;index()&lt;/td&gt;
    &lt;td&gt;Finds index of a particular element in the list or not&lt;/td&gt;
    &lt;td&gt;a.index(25)&lt;br&gt;a.index(0)&lt;br&gt;&lt;/td&gt;
    &lt;td&gt;0&lt;br&gt;&lt;br&gt;ValueError: 0 is not in list&lt;br&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;in operator&lt;/td&gt;
    &lt;td&gt;Finds whether a particular element is in the list or not, returns boolean&lt;/td&gt;
    &lt;td&gt;25 in a&lt;/td&gt;
    &lt;td&gt;True&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;not in operator&lt;/td&gt;
    &lt;td&gt;Checks if element is not available in list, returns boolean&lt;/td&gt;
    &lt;td&gt;25 not in a&lt;/td&gt;
    &lt;td&gt;False&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;count()&lt;/td&gt;
    &lt;td&gt;Counts the number of occurence of an element in the list&lt;/td&gt;
    &lt;td&gt;a.count(25)&lt;/td&gt;
    &lt;td&gt;1&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;remove()&lt;/td&gt;
    &lt;td&gt;Removes an element from the list&lt;/td&gt;
    &lt;td&gt;a.remove(25)&lt;/td&gt;
    &lt;td&gt; [30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;pop()&lt;/td&gt;
    &lt;td&gt;Delete and return item at index 0&lt;/td&gt;
    &lt;td&gt;a.pop(0)&lt;/td&gt;
    &lt;td&gt;25 , a will be [30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;del&lt;/td&gt;
    &lt;td&gt;Deletes item at a particular index from the list&lt;/td&gt;
    &lt;td&gt;del a[0]&lt;/td&gt;
    &lt;td&gt;[30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;all()&lt;/td&gt;
&lt;td&gt;Returns True, if all items in list are True or it is an empty list&lt;/td&gt;
&lt;td&gt;all([True, True, True])
all([])
&lt;/td&gt;
&lt;td&gt;True&lt;br&gt;
True&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;any()&lt;/td&gt;
&lt;td&gt;Returns True, if any item in list is True else return False&lt;/td&gt;
&lt;td&gt;any([True, True, True])&lt;br&gt;
any([True, False, True])&lt;br&gt;
any([])&lt;/td&gt;
&lt;td&gt;True&lt;br&gt;False&lt;br&gt;False&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;

==Printing the List==
=== Print whole list ===
A list can be printed simply or using a ''for / while'' loop 

 print(List_2)     # To print the entire list
This code will print      
 ['Kala','Mala']     

===Print element at a particular index===
&lt;pre&gt;
Using index position
    List_2[0]     # prints 'Kala' ,i.e,the value at index position 0.
    List_2[1]     # prints 'Mala'.
&lt;/pre&gt;
=== Without using index position ===
&lt;pre&gt;
for item in List_2:   # here item is a variable used to access elements in list.
       print(item)
   This code snippet prints 
    Kala
    Mala
&lt;/pre&gt;
[[#TOP]]

==Search for a particular element in list==
Elements in a list can be searched by one of the two ways:
=== using index() function===
&lt;pre&gt;
ages1 = [11,23,12,23,45]

#if element is available in the list, index() returns the index value on which, the element is present.
print(ages1.index(45))#Output: 4

#if element is not available in the list, index() returns ''ValueError''
print(ages1.index(0))#Output: ValueError:
&lt;/pre&gt;

In programming, if such error occurs, program gets terminated. It can be solved using exception handling.
e.g.
&lt;pre&gt;
ages1 = [11,23,12,23,45]

try:
    print(ages1.index(0))
except ValueError:
    print(&quot;Exception has occured&quot;)    
    print(&quot;Element is not found in the list&quot;)

&lt;/pre&gt;
&lt;pre&gt;
'''Output: 
Exception has occured
Element is not found in the list
'''&lt;/pre&gt;
[[#TOP]]

=== using 'in' operator===
''in'' operator is used to check whether a particular element is available in the list or not.e.g.

&lt;pre&gt;
ages1 = [11,23,12,23,45]
no=11

if no in ages1:
    print(&quot;no is there in the list&quot;)
else:    
    print(&quot;no is NOT there in the list&quot;)
&lt;/pre&gt;
&lt;pre&gt;
#Output: no is there in the list
&lt;/pre&gt;


'''Number is not there in the list'''
&lt;pre&gt;
ages1 = [11,23,12,23,45]
no=15

if no in ages1:
    print(&quot;no is there in the list&quot;)
else:    
    print(&quot;no is NOT there in the list&quot;)
&lt;/pre&gt;
&lt;pre&gt;
Output: no is NOT there in the list
&lt;/pre&gt;
[[#TOP]]

==Updating the List==
The lists can be updated using ''append'' or ''insert'' function.  Append adds the element to the end of the list and Insert adds the element in the specified position.
&lt;pre&gt;
   # add the element 'Sheela' to the end of the list.
   List_2.append(&quot;Sheela&quot;)    
   print (List_2) will output 
   ['Kala', 'Mala', 'Sheela']
&lt;/pre&gt;
   &lt;pre&gt;
# add the element &quot;Bala&quot; in the list at the index 1.
   List_2.insert(1,&quot;Bala&quot;)    
   print (List_2) will output 
   ['Kala', 'Bala','Mala', 'Sheela']
&lt;/pre&gt;

=== Extend the list by adding elements of other list at end using extend()===
&lt;pre&gt;
ages = [11,23,12,23,45]
ages.extend([57,58])
print(ages)
&lt;/pre&gt;

&lt;pre&gt;
#Output: [11, 23, 12, 23, 45, 57, 58]
&lt;/pre&gt;

==== Difference between ''append and extend'' ====
Difference between append and extend can be easily understood, by the following example.

&lt;pre&gt;
appendlist = [11,23,12,23,45]
appendlist.append([57,58])

extendlist= [11,23,12,23,45]
extendlist.extend([57,58])
&lt;/pre&gt;

&lt;pre&gt;
'''Output:
[11, 23, 12, 23, 45, [57, 58]]
[11, 23, 12, 23, 45, 57, 58]'''
&lt;/pre&gt;

[[#TOP]]

==Basic Operations on List==
===Frequency of Occurrence===
list.count(object) will return the number of times the object occur in the list.
  '''Example'''
    ages = [11,23,12,23,45,43,22,24,23]
    ages.count(23) will return
    3
    ages.count(100) will return
    0

===Length of the List===
len(list) will return the length of the list ie. the number of objects in the list.
  '''Example'''
&lt;pre&gt;
    ages = [11,23,12,23,45,43,22,24,23]
    len(ages) # Output: 9
&lt;/pre&gt;

To print the objects in the list either use ''for item in list'' or ''for index in range(len(list))''
&lt;pre&gt;
    for item in ages:       
        print (item)  
        (OR)
    for index in range(len(ages)) :
        print (ages[index])
&lt;/pre&gt;

===Sort the List===
list.sort() will sort the list in ascending order
  '''Example'''
    ages = [11,23,12,23,45,43,22,24,23]
    ages.sort() 
    print (ages) 
    [11, 12, 22, 23, 23, 23, 24, 43, 45]

[[#TOP]]

===Sort the List using sorted() function===
sorted(list1) will sort the list and return a new list, it doesn't modify the original list
&lt;br&gt;'''Example: Sort in ascending order'''
&lt;pre&gt;
ages = [11,23,12,23,45,43,22,24,23]
newList=sorted(ages)
print(newList)

#Output: [11, 12, 22, 23, 23, 23, 24, 43, 45]
&lt;/pre&gt;

&lt;br&gt;'''Example: Sort in descending order'''
&lt;pre&gt;
ages = [11,23,12,23,45,43,22,24,23]
newList=sorted(ages,reverse=True)
print(newList)

#Output: [45, 43, 24, 23, 23, 23, 22, 12, 11]
&lt;/pre&gt;

===Reverse the List===
list.reverse() will reverse the original list
  '''Example'''
    ages = [11, 12, 22, 23, 23, 23, 24, 43, 45]
    ages.reverse()
    print (ages)
    [45, 43, 24, 23, 23, 23, 22, 12, 11]

Both sort() and reverse() list operation will work on numeric and alphanumeric data list.

A special use of the reverse() function is to descend a list that is sorted in ascending order.

  '''Example'''
&lt;pre&gt;
ages = [11, 12, 22, 23, 23, 23, 24, 43, 45]
ages.sort()
print(ages)
ages.reverse()
print(ages)
&lt;/pre&gt;

===Slicing===
Used to retrieve an object or objects in a range as a list  
  '''Example'''

Use ''list[index]'' to retrieve the object at the given index
&lt;pre&gt;
In [1]: student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
In [2]: student[3]     #Object at index 3.  Remember index starts at 0
Out[2]: 'Geetha'      
&lt;/pre&gt;

Use ''list[start_index : end_index + 1]'' to retrieve objects from the start_index to end_index 
&lt;pre&gt;
In [3]: student[2:4]     # Objects from index 2 to 3 as List. Note the [ and ]
Out[3]: ['Vijay', 'Geetha']   
&lt;/pre&gt;

Use ''list[:]'' to retrieve objects from the starting of the list to the end of the list. 
The default start value will be the starting index of the list (i.e. 0) and the default end value
will be the length of the list 
&lt;pre&gt;
In [4]: student[:]        # prints the entire list
Out[4]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma', 'Janani']
&lt;/pre&gt;
&lt;pre&gt;
In [5]: student[:5]       # prints the objects from the start of the list upto object at index 4
Out[5]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran']
&lt;/pre&gt;
&lt;pre&gt;
In [6]: student[2:]       # prints the objects from index 2 upto the end of the list
Out[6]: ['Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma', 'Janani']
&lt;/pre&gt;

Negative index too is available in Python. It starts from last element of the list. i.e.
&lt;pre&gt;
In [7]:student[-1]        #prints last index of list
Out[7]: 'Janani'
&lt;/pre&gt;
&lt;pre&gt;
In [8]:student[-1:-8]     #prints empty list
Out[8]: []
&lt;/pre&gt;
&lt;pre&gt;
In [9]:student[-8:-1]     #prints -8th index to -1st index elements
Out[9]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma']
&lt;/pre&gt;

[[#TOP]]

===Removing Item from list ===
----

Is used to remove a specific item from the list.

'''Example:'''
 
Use list.remove(entry/value)  Or   del list[index]    Or list.pop(index)
&lt;pre&gt;
student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
student.remove(&quot;Arun&quot;)   #This will delete item &quot;Arun&quot;
         Or    
del student[0]           # This will delete item at index 0
         Or
student.pop(0)         # This will delete and return item at index 0
print(student)    
Output: &quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
&lt;/pre&gt;

[[#TOP]]

===Delete list ===
----
Used to delete complete list

'''Example'''

Use del &lt;list name&gt;
&lt;pre&gt;
student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
del student&lt;/pre&gt;

===Concatenation of two lists===
----
''+'' is the concatenation operator which is used concatenate two lists. 
&lt;pre&gt;
ages1 = [11,23,12,23,45]
ages2 = [25, 24, 43, 47]
age=ages1+ages2
print(age)
#Output: [11, 23, 12, 23, 45, 25, 24, 43, 47]
&lt;/pre&gt;

===Repeatation of a list ===
----
''*'' is the operator to repeat a particular list.
&lt;pre&gt;
ages1 = [11,23,12,23,45]
age=ages1*5 #ages1 list is repeated 5 times and stroed in ''age'' list
print(age)

#Output: [11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45]
&lt;/pre&gt;

=== all and any for List===
all() and any() are special functions to check whether all elements in iterable is ''True'' or any element is ''True''
&lt;ol&gt;
&lt;li&gt;If all elements in a list are ''True'', '''all()''' will return ''True''&lt;/li&gt;
&lt;li&gt;If iterable is ''empty'', '''all()''' will return ''True''&lt;/li&gt;
&lt;li&gt;If iterable contains at least one ''True'', '''any()''' will return ''True''&lt;/li&gt;
&lt;li&gt;If iterable is ''empty'', '''any()''' will return ''False''&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;
lsit=[True, True, True, True]
print(all(lsit))#Output: True
print(any(lsit))#Output: True

lsit1=[True, False, True, True]
print(all(lsit1))#Output: False
print(any(lsit1))#Output: True

lsit2=[False,False,False]
print(all(lsit2))#Output: False
print(any(lsit2))#Output: False

lsit3=[]
print(all(lsit3))#Output: True
print(any(lsit3))#Output: False
&lt;/pre&gt;

==Conditional Statements==
&lt;pre&gt;Conditionals are used to check the condition and change the flow of the program 
accordingly. They are realized in programming languages through if statement. The 
syntax is as follows :
&lt;pre&gt;
         if condition : 
            statement
&lt;/pre&gt;
    '''Note:''' Do not forget indentation (inserting space/tab) in the line after the
 if condition.
    
    In case you want to execute a set of statements when a condition is true and another

set of statement when the condition is false.
&lt;pre&gt;
         if condition : 
            statement 1
         else :
            statement 2
&lt;/pre&gt;

&lt;pre&gt;    
    Multiple if-else statements can be written as follows:
         if condition_1 : 
            statement 1
         elif condition_2 : # 'elif' is short for 'else if'
            statement 2
         elif condition_3 :
            statement 3
        .
        .
         else :
            final statement
&lt;/pre&gt;

[[#TOP]]

=Loops and Conditionals : Fizzbuzz=
====Loops====
Loops are used to execute a set of repetitive statements. They are realised
through 'while' and 'for' loops in programming languages. The syntax of 'for' loop is 
as follows :
&lt;pre&gt;
for LOOPVARIABLE in SEQUENCE: 
            STATEMENTS&lt;/pre&gt;

    '''e.g.''' to print all the data from a list we can write:
&lt;pre&gt;
for item in list_name:
      print(item)&lt;/pre&gt;
    OR
&lt;pre&gt;
for index in range(len(list_name)):
      print(list_name[index])
 &lt;/pre&gt;   
    The syntax for while loop is as follows :
&lt;pre&gt;    
while BOOLEANEXPRESSION: 
     STATEMENTS
     INCREMENT/DECREMENT
&lt;/pre&gt;    
    '''e.g.''' if we want to print all numbers from 1 to 10
&lt;pre&gt;
i=1
while i&lt;=10 :
    print(i,&quot; &quot;)
    i=i+1
    &lt;/pre&gt;
 
'while' loop has indefinite iteration (run-time unknown). So, there must be loop,  break statement in it.
 Whereas 'for' loop is definite in nature (i.e. known or predictable span).&lt;br&gt;

&lt;b&gt;NOTE: Python doesn't have anything like do-while loop.&lt;/b&gt;

[[#TOP]]

==Implementation==
Here, we try to demonstrate the concept of loops and conditionals through a game called Fizzbuzz. The rules are as follows :&lt;br/&gt;
[[File:fizzBuzz.gif]]

• if input number is a multiple of ’3’ print ”Fizz”
&lt;br/&gt;
• if input number is a multiple of ’5’ print ”Buzz”
&lt;br/&gt;
• if input number is a multiple of both '3' and ’5’ print ”FizzBuzz”
&lt;br/&gt;
The pseudo code is as follows :
&lt;pre&gt;
   If input no % 3 == 0 and  input no % 5 == 0 : 
       print ”Fizzbuzz”
   else if input no % 3 == 0 : 
       print ”Fizz”
   else if input no % 5 == 0 : 
       print ”Buzz”
   else :
       print the input no
&lt;/pre&gt;
The order of statements execution matters to get the desired output. The highest priority condition should be first followed by other. In fizzbuzz programming, first checking should be done for both divisibility of 3 and 5. If condition not satisfied only then it should check individually for 3 or 5. So carefully choosing the order is crucial for better programming.
Note: There is some effect of present condition statements chosen on next conditions statements. That is why in first attempt fizzbuzz programming got struck.

Example: 
&lt;pre&gt;
#Code to achieve the above requirement in python3.
i = int(input(&quot;Enter the number&quot;)) 
if i%3 == 0 and i%5 == 0: print(i,&quot;FizzBuzz&quot;)  
elif i%5 == 0: print(i,&quot;Buzz&quot;)
elif i%3 == 0: print(i,&quot;Fizz&quot;)
else: print(i)
&lt;/pre&gt;
Lets put the same into a loop for a range given by the user.
&lt;pre&gt;
def fizzbuzzgame(start,stop):
    for i in range(start,stop+1):
        if i%3 == 0 and i%5 == 0:
            print(i,&quot;FizzBuzz&quot;)
        elif i%5 == 0:
            print(i,&quot;Buzz&quot;)
        elif i%3 == 0:
            print(i,&quot;Fizz&quot;)
        else: print(i)

fizzbuzzgame(50,100)
&lt;/pre&gt;
&lt;pre&gt;
#Output:
1235
Buzz
======================================
555
Fizzbuzz
======================================
1235
Buzz
======================================
999
Fizz
&lt;/pre&gt;

=== Fizz Buzz game in Interactive mode with Score ===
'''By Ms. Ami Tusharkant Choksi'''
&lt;pre&gt;
def fizzbuzzgame(i):
        if i%3 == 0 and i%5 == 0:
            print(i,&quot;FizzBuzz&quot;)
            return(&quot;fzbz&quot;)
        elif i%5 == 0:
            print(i,&quot;Buzz&quot;)
            return(&quot;bz&quot;)
        elif i%3 == 0:
            print(i,&quot;Fizz&quot;)
            return(&quot;fz&quot;)
        else:
            print(i)
            return(&quot;no&quot;)

ch = 'y'
fizzbuzz=0
fizz=0
buzz=0
nothing=0
print(&quot;&quot;&quot;

 /$$$$$$$$/$$                  /$$$$$$$                            
| $$_____|__/                 | $$__  $$                           
| $$      /$$/$$$$$$$$/$$$$$$$| $$  \ $$/$$   /$$/$$$$$$$$/$$$$$$$$
| $$$$$  | $|____ /$$|____ /$$| $$$$$$$| $$  | $|____ /$$|____ /$$/
| $$__/  | $$  /$$$$/   /$$$$/| $$__  $| $$  | $$  /$$$$/   /$$$$/ 
| $$     | $$ /$$__/   /$$__/ | $$  \ $| $$  | $$ /$$__/   /$$__/  
| $$     | $$/$$$$$$$$/$$$$$$$| $$$$$$$|  $$$$$$//$$$$$$$$/$$$$$$$$
|__/     |__|________|________|_______/ \______/|________|________/
                                                                  
&quot;&quot;&quot;)   
print('''

  /$$$$$$                                
 /$$__  $$                               
| $$  \__/ /$$$$$$ /$$$$$$/$$$$  /$$$$$$ 
| $$ /$$$$|____  $| $$_  $$_  $$/$$__  $$
| $$|_  $$ /$$$$$$| $$ \ $$ \ $| $$$$$$$$
| $$  \ $$/$$__  $| $$ | $$ | $| $$_____/
|  $$$$$$|  $$$$$$| $$ | $$ | $|  $$$$$$$
 \______/ \_______|__/ |__/ |__/\_______/
                                     
''')

while(ch == 'y'):
    n=int(input(&quot;Enter a Number : &quot;))
    winLoose=fizzbuzzgame(n)
    if(winLoose == &quot;fz&quot;):
        fizz+=1
    elif(winLoose == &quot;bz&quot;):
        buzz+=1
    elif(winLoose == &quot;fzbz&quot;):
        fizzbuzz+=1
    ch=input(&quot;Do you want to continue playing the game : (y/n)&quot;)
    if(ch=='n'):
        print('Congratulations, your score is\n FizzBuzz:%d\nFizz:%d\nBuzz:%d' %
(fizzbuzz,fizz,buzz))
    
'''Sample Output:

 /$$$$$$$$/$$                  /$$$$$$$                            
| $$_____|__/                 | $$__  $$                           
| $$      /$$/$$$$$$$$/$$$$$$$| $$  \ $$/$$   /$$/$$$$$$$$/$$$$$$$$
| $$$$$  | $|____ /$$|____ /$$| $$$$$$$| $$  | $|____ /$$|____ /$$/
| $$__/  | $$  /$$$$/   /$$$$/| $$__  $| $$  | $$  /$$$$/   /$$$$/ 
| $$     | $$ /$$__/   /$$__/ | $$  \ $| $$  | $$ /$$__/   /$$__/  
| $$     | $$/$$$$$$$$/$$$$$$$| $$$$$$$|  $$$$$$//$$$$$$$$/$$$$$$$$
|__/     |__|________|________|_______/ \______/|________|________/
                                                                                                                                   

  /$$$$$$                                
 /$$__  $$                               
| $$  \__/ /$$$$$$ /$$$$$$/$$$$  /$$$$$$ 
| $$ /$$$$|____  $| $$_  $$_  $$/$$__  $$
| $$|_  $$ /$$$$$$| $$ \ $$ \ $| $$$$$$$$
| $$  \ $$/$$__  $| $$ | $$ | $| $$_____/
|  $$$$$$|  $$$$$$| $$ | $$ | $|  $$$$$$$
 \______/ \_______|__/ |__/ |__/\_______/
                                         

Enter a Number : 666
666 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 777
777 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 555
555 FizzBuzz
Do you want to continue playing the game : (y/n)y
Enter a Number : 1
1
Do you want to continue playing the game : (y/n)y
Enter a Number : 789
789 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 25
25 Buzz
Do you want to continue playing the game : (y/n)n
Congratulations, your score is

FizzBuzz:1
Fizz:3
Buzz:1

&lt;/pre&gt;

=Crowd Computing: Just Estimate=
==Wisdom of Crowds==
 &lt;p style=&quot;text-align:justify&quot;&gt;
The concept of ’Wisdom of Crowds’ was proposed by Francis Galton. A weight-judging competition was carried on at the annual show of the West of England Fat Stock and Poultry Exhibition recently held at Plymouth, A fat ox having been selected, competitors bought stamped and numbered cards, each, on which to inscribe their respective names, addresses, and estimates of what the ox would weigh after it had been slaughtered. Those who guessed most successfully received prizes. About 8oo tickets were issued to the par- ticipants. The middlemost estimate of all the estimates recorded was 1207 lbs and the actual weight of the ox was 1198 lbs.&lt;/p&gt;

==Our Experiment==
 &lt;p style=&quot;text-align:justify&quot;&gt;
The crowd had to guess the number of candies/gems in a jar. Around 75 people participated in the experiment. The actual number of gems in the jar were 375. The median of all estimates came out to be 300 and the mean of all the estimates came out to be around 396. Median underestimated and mean overestimated the actual value. So according to recent studies, Trimmed mean must be used as an aggregate measure to estimate where Wisdom of Crowds is involved.
&lt;/p&gt;
[[File:Gemsjar.jpg|center|200px|caption]]

===Trimmed Mean===
 &lt;p style=&quot;text-align:justify&quot;&gt;
In these kinds of experiments, 10% trimmed mean is usually followed. For calculating 10% trimmed mean, remove 10% smallest and 10% largest values from the sample. Calculate the mean of the sample obtained. In the above experiment, the trimmed mean came out to be around 351 which is very close to the actual value.&lt;/p&gt;

==Implementation==
Here, we try to demonstrate the concept of trimmed mean through crowd computing.
&lt;ol&gt;
&lt;li&gt; Input a list of estimates done by the crowd .&lt;/li&gt;
&lt;li&gt; Sort the list.&lt;/li&gt;
&lt;li&gt; Remove the 10% smallest values.&lt;/li&gt;
&lt;li&gt; Remove the 10% largest values.
&lt;li&gt; Calculate the mean of the new list obtained .&lt;/li&gt;&lt;/ol&gt;&lt;hr&gt;

==Data of Experiment==       
    Estimates =[1000,1010,1786,2000,1500,1500,100,120,150,150,150,170,175,180,197,200,200,200,200,200,200,220,220,220,220,234,250,250,250,250,250,250,250,250,250,263,270,275,275,286,300,
                300,300,300,300,300,300,300,320,350,350,350,400, 400,400,400,400,450,467,500,500,500,500,500,500,500,550,550,600,600,600,650,700,700,720]

    '''CODE:'''
&lt;pre&gt;
Estimates = [1000,1010,1786,2000,1500,1500,100,120,150,150,150,170,175,180,197,200,200,200,200,200,200,220,220,220,220,234,250,250,250,250,250,250,250,250,250,263,270,275,275,286,300,                300,300,300,300,300,300,300,320,350,350,350,400,400,400,400,400,450,467,500,500,500,500,500,500,500,550,550,600,600,600,650,700,700,720]
Estimates.sort()
offset = int(0.10*len(Estimates))
for i in range(offset):
       del Estimates[0]
       del Estimates[-1]
Sum = 0    
for i in range(len(Estimates)):
       Sum += Estimates[i]
Mean_Value = Sum/len(Estimates)
print(&quot;Mean : &quot;, int(Mean_Value))
#Output:
Mean :  351
&lt;/pre&gt;
&lt;hr&gt;
==Trimmed Mean for the above example== 
&lt;h3&gt;Using scipy library&lt;/h3&gt;
&lt;pre&gt;
#import scipy to use the method of trim_mean
from scipy import stats
trimMean = stats.trim_mean(Estimates, 0.1) # Trim 10% at both ends
print(&quot;Trimmed Mean : &quot;,trimMean)
#Output:
Trimmed Mean :  335.1020408163265
&lt;/pre&gt;

&lt;h3&gt;Without using scipy library&lt;/h3&gt;
&lt;pre&gt;
#Trimmed mean with 10%
p=10/100
#sorted data
data=[2, 4, 6, 7, 11, 21, 81, 90, 105, 121]
n = len(data)
#Remove elements from both end
rem=int(n*p)
newData = data[rem:-rem]
mean = 0
for i in newData:
    mean += i
mean = int(mean/len(newData))
print(&quot;Trimmed mean : &quot;,mean)
#Output: Trimmed mean :  40
&lt;/pre&gt;
[[#Top]]

=Jumbled_Words Permutations: Jumbled Words=
==What are Permutations ?==
A permutation also called ordering of selected number of elements from a list denoted by nPr here we are choosing all elements of a list and so n=r&lt;br&gt;
nPr=n!/(n-r)!&lt;br&gt; as n=r
nPn=n!&lt;br&gt; which gives all possible arrangement of elements present in a list.

 For example, permutations of list [1,2,3] are [1,2,3], [1,3,2], [2,1,3], [2,3,1], 
[3,1,2], and [3,2,1]. 
The number of permutations of a list of elements nPn is given by n!. For example, there are 2! = 2 x 1 = 2 permutations of [1,2], namely [1,2] and [2,1], and 3! = 3 x 2 x 1 = 6 permutations of [1,2,3], as mentioned above.&lt;br/&gt;
[[File:Permutations.jpg]]

==Implementation==
Here, we try to demonstrate the concept of permutations through jumbled words. It is a two player game in which one person presents the other person a different permutation of the word in his mind. The other person has to guess the right word. If he guesses, the he wins otherwise he loses.
 Input an list of words.
 Randomly pick a word from the list of words .
 Shuffle this word and present it to the other player.
 if word guesses by the player is same as the one picked from list of w
     player wins
 else
     player loses

ALTERNATE CODE TO GENERATE THIS GAME:
&lt;pre&gt;
import random
p1=input(&quot;enter player 1 name:&quot;)
p2=input(&quot;enter player 2 name:&quot;)
l=[&quot;rainbow&quot;,&quot;computer&quot;,&quot;robot&quot;,&quot;butter&quot;,&quot;vegetable&quot;,&quot;science&quot;,&quot;correct&quot;]
c1=c2=a1=a2=f1=f2=0
k=1
i=3
def play():
    n=random.choice(l)        ##n=chooses a word from list l
    l1=[]
    for j in n:
       l1.append(j)      ##creates a list for word in n
    for t in range(len(l1)):
       p=random.choice(l1)     ##this randomly displays letters in the list
       print(p)
       l1.remove(p)          ##to avoid the repetition of a letter
    s=input(&quot;enter the word:&quot;)
    if(s==n):
        print(&quot;correct&quot;)
        return 1
    else:
        print(&quot;not correct&quot;)
        print(&quot;answer is&quot;,n)
        return 0
def stat():
     print(&quot;player 1:&quot;)
     print(&quot;score:&quot;,c1)
     print(&quot;answered:&quot;,a1)
     print(&quot;failed:&quot;,f1)
     print(&quot;.............&quot;)
     print(&quot;player 2:&quot;)
     print(&quot;score:&quot;,c2)
     print(&quot;answered:&quot;,a2)
     print(&quot;failed&quot;,f2)
     if(c1&gt;c2):
         print(p1,&quot; won over &quot;,p2)
     elif(c1==c2):
         print(&quot;draw game&quot;)
     else:
         print(p2,&quot; won over &quot;,p1) 
while(i!=4):
      if(i==3):
         if(k==1):
             print(&quot;player 1 turn&quot;)
             print(&quot;your jumbled word is:&quot;)
             k=k+1
             m=play()
             if(m==1):      ##if guessed answer is correct,then score and no.of answered count will be increased
                c1+=1
                a1+=1
             else:
                f1+=1       ##else count of no.of failed to answered will be incremented
         else:
             print(&quot;player 2 turn&quot;)
             print(&quot;your jumbled word is:&quot;)
             k=k-1
             m=play()
             if(m==1):
                c2=c2+1
                a2=a2+1
             else:
                f2=f2+1
       if(i==2):
             print(&quot;present status&quot;)
             stat()
       i=int(input(&quot;enter your choice  1.stop 2.status 3.continue&quot;))
       if(i==1):
             stat()
             i=i+3
&lt;/pre&gt;
&lt;hr&gt;
=== JumbledWord Simple Logic, In Short ===
[[File:jumbledWord.gif]]
&lt;hr&gt;
'''Logic to create a Jumbled Word'''
&lt;hr&gt;
&lt;pre&gt;
#Get Jumbled Word and print it Horizontally
import random

def getJumbledWord(b):
    jumble=''
    l1 = [ b[i] for i in range(0, len(b)) ]
    for t in range(len(l1)):
       p=random.choice(l1)     ##this randomly gets letters from the list      
       jumble=jumble+p       
       l1.remove(p)
    return jumble

b=input(&quot;Enter a word to make it jumbled : &quot;)
print(&quot;Jumbled Word : &quot;, getJumbledWord(b))
&lt;/pre&gt;
&lt;hr&gt;
'''Another Logic to create a Jumbled Word'''
&lt;hr&gt;
&lt;pre&gt;
b=input(&quot;Enter a word to make it jumbled : &quot;)

def getJumbledWord1(b):
    l1 = [ b[i] for i in range(0, len(b)) ]
    random.shuffle(l1)
    str1 = ''.join(l1)
    return str1

print(&quot;Jumbled Word : &quot;, getJumbledWord1(b))
&lt;/pre&gt;

====Sample Output:====
&lt;pre&gt;
---- Output1 
Enter a word to make it jumbled : butter
Jumbled Word :  tbture

---- Output2 
Enter a word to make it jumbled : petriotism
Jumbled Word :  pittrosime
&lt;/pre&gt;

=Theory of Evolution=

== What is Evolution ? ==
Evolution is the change in heritable characteristics over successive generations. The theory of evolution explains that DNA, which acts as a carrier of genetic information from one generation to other, tends to change or mutate occasionally. These changes are reflected in next generations to come. This is how life has evolved on earth from bacteria to human beings.&lt;br&gt;
[[File:Evolution.png|500px]]

== Implementation ==
An array representing DNA is stored in a file. As genes are forms of DNA, they contain information to be transferred to forthcoming generations. Assume that information is in the form of bits (in the form of 0s and 1s). A number is picked randomly from 1 to the size of the array. A new parameter has been introduced which decides whether mutation would occur or not. If the value of this new parameter is 1 (It is picked randomly from 1 to 100), then only change is reflected down the generations, otherwise it is not. The pseudo code is as follows :

Input an array containing genetic information .
Randomly generate a number (say m) from 1 to length of the array. Randomly generate other number (say p) from 1 to 100.

&lt;pre&gt; 
    if p is equal to 1 then 
        if m is 1 then
          set it to 0
        else
          set it to 1
&lt;/pre&gt;
[[#TOP]]</text>
      <sha1>qfh0pfyelhrlvwb09jm7rtsek8d62fz</sha1>
    </revision>
    <revision>
      <id>3618</id>
      <parentid>3617</parentid>
      <timestamp>2018-09-28T04:34:08Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* Implementation */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="30364">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_3 Contributors of this page]
*Week 3 Playlist: https://www.youtube.com/playlist?list=PLc_j0TNIaWxOVx_z9jAM2UB3RqYNXaoEo
=List=
List is a flexible data structure used for storing a group of data separated by comma. The elements in a list need not be of the same data type.

'''Example:'''
       List_1 = [ 1, 2,3] or 
       List_1 = [&quot;coffee&quot;, &quot;Tea&quot;, &quot;Milk&quot;] or
       List_1 = [1,&quot;coffee&quot;, &quot;Tea&quot;, 3, &quot;5&quot;]

==List Creation==
&lt;pre&gt;a) A list can be created by simply putting values (separated by comma) between square brackets as given below,
       List_1 = [1,&quot;coffee&quot;, &quot;Tea&quot;, 3, &quot;5&quot;] #this creates a list by name List_1 containing following items


Or,
(b)A List can be created from scratch and elements can be added 
        List_2 = [ ]
        List_2.append(&quot;Kala&quot;)
        List_2.append(&quot;Mala&quot;)
Here we use &quot;append&quot; ,which is a function in python that enable us to append or attach an element to a list .
Thus List_2 will now hold [&quot;Kala&quot;,&quot;Mala&quot;]
&lt;/pre&gt;
[[#TOP]]

==Operations and Methods to work with List==
&lt;pre&gt;
a = [25,30,50,90,12,13]
b = [100,300,500,200,250]
&lt;/pre&gt;
&lt;hr&gt;
&lt;table border=2&gt;
  &lt;tr&gt;
    &lt;th&gt;&lt;b&gt;Method/&lt;br&gt;Operator&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Function&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Syntax&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Output&lt;/b&gt;&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;len()&lt;/td&gt;
    &lt;td&gt;Find length of a list&lt;/td&gt;
    &lt;td&gt;len(a)&lt;/td&gt;
    &lt;td&gt;6&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;max()&lt;/td&gt;
    &lt;td&gt;Find maximum element from the list&lt;/td&gt;
    &lt;td&gt;max(a)&lt;/td&gt;
    &lt;td&gt;90&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;min()&lt;/td&gt;
    &lt;td&gt;Find minimum element from the list&lt;/td&gt;
    &lt;td&gt;min(a)&lt;/td&gt;
    &lt;td&gt;12&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sum()&lt;/td&gt;
    &lt;td&gt;Returns sum of all elements of the list&lt;/td&gt;
    &lt;td&gt;sum(a)&lt;/td&gt;
    &lt;td&gt;220&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;reverse()&lt;/td&gt;
    &lt;td&gt;Reverses the original list&lt;/td&gt;
    &lt;td&gt;a.reverse()&lt;/td&gt;
    &lt;td&gt;[13, 12, 90, 50, 30, 25]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sort()&lt;/td&gt;
    &lt;td&gt;Sorts the original list in ascending order&lt;/td&gt;
    &lt;td&gt;a.sort()&lt;/td&gt;
    &lt;td&gt;[12, 13, 25, 30, 50, 90]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sorted()&lt;/td&gt;
    &lt;td&gt;Returns the new sorted list &lt;/td&gt;
    &lt;td&gt;sorted(a)&lt;/td&gt;
    &lt;td&gt;[12, 13, 25, 30, 50, 90]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;insert()&lt;/td&gt;
    &lt;td&gt;Insert at a particular index in the list, and shifts remaining elements&lt;/td&gt;
    &lt;td&gt;a.insert(3,3)&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 3, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;append()&lt;/td&gt;
    &lt;td&gt;Adds elements/object to the end of the list&lt;/td&gt;
    &lt;td&gt;a.append(5)&lt;br&gt;a.append([10,20])&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 5]&lt;br&gt;[25, 30, 50, 90, 12, 13, [10, 20]]&lt;br&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;extend()&lt;/td&gt;
    &lt;td&gt;Adds object to the end of the list as elements not as object&lt;/td&gt;
    &lt;td&gt;a.extend([10,20])&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 10, 20]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;*&amp;nbsp;&amp;nbsp;Repeatation&lt;br&gt;operator&lt;/td&gt;
    &lt;td&gt;Repeat the list for n times and returns a new list&lt;/td&gt;
    &lt;td&gt;a*2&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 25, 30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;+ Concatenation&lt;br&gt;operator&lt;/td&gt;
    &lt;td&gt;Concatenates two lists, and returns a new list&lt;/td&gt;
    &lt;td&gt;a+b&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 100, 300, 500, 200, 250]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;index()&lt;/td&gt;
    &lt;td&gt;Finds index of a particular element in the list or not&lt;/td&gt;
    &lt;td&gt;a.index(25)&lt;br&gt;a.index(0)&lt;br&gt;&lt;/td&gt;
    &lt;td&gt;0&lt;br&gt;&lt;br&gt;ValueError: 0 is not in list&lt;br&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;in operator&lt;/td&gt;
    &lt;td&gt;Finds whether a particular element is in the list or not, returns boolean&lt;/td&gt;
    &lt;td&gt;25 in a&lt;/td&gt;
    &lt;td&gt;True&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;not in operator&lt;/td&gt;
    &lt;td&gt;Checks if element is not available in list, returns boolean&lt;/td&gt;
    &lt;td&gt;25 not in a&lt;/td&gt;
    &lt;td&gt;False&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;count()&lt;/td&gt;
    &lt;td&gt;Counts the number of occurence of an element in the list&lt;/td&gt;
    &lt;td&gt;a.count(25)&lt;/td&gt;
    &lt;td&gt;1&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;remove()&lt;/td&gt;
    &lt;td&gt;Removes an element from the list&lt;/td&gt;
    &lt;td&gt;a.remove(25)&lt;/td&gt;
    &lt;td&gt; [30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;pop()&lt;/td&gt;
    &lt;td&gt;Delete and return item at index 0&lt;/td&gt;
    &lt;td&gt;a.pop(0)&lt;/td&gt;
    &lt;td&gt;25 , a will be [30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;del&lt;/td&gt;
    &lt;td&gt;Deletes item at a particular index from the list&lt;/td&gt;
    &lt;td&gt;del a[0]&lt;/td&gt;
    &lt;td&gt;[30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;all()&lt;/td&gt;
&lt;td&gt;Returns True, if all items in list are True or it is an empty list&lt;/td&gt;
&lt;td&gt;all([True, True, True])
all([])
&lt;/td&gt;
&lt;td&gt;True&lt;br&gt;
True&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;any()&lt;/td&gt;
&lt;td&gt;Returns True, if any item in list is True else return False&lt;/td&gt;
&lt;td&gt;any([True, True, True])&lt;br&gt;
any([True, False, True])&lt;br&gt;
any([])&lt;/td&gt;
&lt;td&gt;True&lt;br&gt;False&lt;br&gt;False&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;

==Printing the List==
=== Print whole list ===
A list can be printed simply or using a ''for / while'' loop 

 print(List_2)     # To print the entire list
This code will print      
 ['Kala','Mala']     

===Print element at a particular index===
&lt;pre&gt;
Using index position
    List_2[0]     # prints 'Kala' ,i.e,the value at index position 0.
    List_2[1]     # prints 'Mala'.
&lt;/pre&gt;
=== Without using index position ===
&lt;pre&gt;
for item in List_2:   # here item is a variable used to access elements in list.
       print(item)
   This code snippet prints 
    Kala
    Mala
&lt;/pre&gt;
[[#TOP]]

==Search for a particular element in list==
Elements in a list can be searched by one of the two ways:
=== using index() function===
&lt;pre&gt;
ages1 = [11,23,12,23,45]

#if element is available in the list, index() returns the index value on which, the element is present.
print(ages1.index(45))#Output: 4

#if element is not available in the list, index() returns ''ValueError''
print(ages1.index(0))#Output: ValueError:
&lt;/pre&gt;

In programming, if such error occurs, program gets terminated. It can be solved using exception handling.
e.g.
&lt;pre&gt;
ages1 = [11,23,12,23,45]

try:
    print(ages1.index(0))
except ValueError:
    print(&quot;Exception has occured&quot;)    
    print(&quot;Element is not found in the list&quot;)

&lt;/pre&gt;
&lt;pre&gt;
'''Output: 
Exception has occured
Element is not found in the list
'''&lt;/pre&gt;
[[#TOP]]

=== using 'in' operator===
''in'' operator is used to check whether a particular element is available in the list or not.e.g.

&lt;pre&gt;
ages1 = [11,23,12,23,45]
no=11

if no in ages1:
    print(&quot;no is there in the list&quot;)
else:    
    print(&quot;no is NOT there in the list&quot;)
&lt;/pre&gt;
&lt;pre&gt;
#Output: no is there in the list
&lt;/pre&gt;


'''Number is not there in the list'''
&lt;pre&gt;
ages1 = [11,23,12,23,45]
no=15

if no in ages1:
    print(&quot;no is there in the list&quot;)
else:    
    print(&quot;no is NOT there in the list&quot;)
&lt;/pre&gt;
&lt;pre&gt;
Output: no is NOT there in the list
&lt;/pre&gt;
[[#TOP]]

==Updating the List==
The lists can be updated using ''append'' or ''insert'' function.  Append adds the element to the end of the list and Insert adds the element in the specified position.
&lt;pre&gt;
   # add the element 'Sheela' to the end of the list.
   List_2.append(&quot;Sheela&quot;)    
   print (List_2) will output 
   ['Kala', 'Mala', 'Sheela']
&lt;/pre&gt;
   &lt;pre&gt;
# add the element &quot;Bala&quot; in the list at the index 1.
   List_2.insert(1,&quot;Bala&quot;)    
   print (List_2) will output 
   ['Kala', 'Bala','Mala', 'Sheela']
&lt;/pre&gt;

=== Extend the list by adding elements of other list at end using extend()===
&lt;pre&gt;
ages = [11,23,12,23,45]
ages.extend([57,58])
print(ages)
&lt;/pre&gt;

&lt;pre&gt;
#Output: [11, 23, 12, 23, 45, 57, 58]
&lt;/pre&gt;

==== Difference between ''append and extend'' ====
Difference between append and extend can be easily understood, by the following example.

&lt;pre&gt;
appendlist = [11,23,12,23,45]
appendlist.append([57,58])

extendlist= [11,23,12,23,45]
extendlist.extend([57,58])
&lt;/pre&gt;

&lt;pre&gt;
'''Output:
[11, 23, 12, 23, 45, [57, 58]]
[11, 23, 12, 23, 45, 57, 58]'''
&lt;/pre&gt;

[[#TOP]]

==Basic Operations on List==
===Frequency of Occurrence===
list.count(object) will return the number of times the object occur in the list.
  '''Example'''
    ages = [11,23,12,23,45,43,22,24,23]
    ages.count(23) will return
    3
    ages.count(100) will return
    0

===Length of the List===
len(list) will return the length of the list ie. the number of objects in the list.
  '''Example'''
&lt;pre&gt;
    ages = [11,23,12,23,45,43,22,24,23]
    len(ages) # Output: 9
&lt;/pre&gt;

To print the objects in the list either use ''for item in list'' or ''for index in range(len(list))''
&lt;pre&gt;
    for item in ages:       
        print (item)  
        (OR)
    for index in range(len(ages)) :
        print (ages[index])
&lt;/pre&gt;

===Sort the List===
list.sort() will sort the list in ascending order
  '''Example'''
    ages = [11,23,12,23,45,43,22,24,23]
    ages.sort() 
    print (ages) 
    [11, 12, 22, 23, 23, 23, 24, 43, 45]

[[#TOP]]

===Sort the List using sorted() function===
sorted(list1) will sort the list and return a new list, it doesn't modify the original list
&lt;br&gt;'''Example: Sort in ascending order'''
&lt;pre&gt;
ages = [11,23,12,23,45,43,22,24,23]
newList=sorted(ages)
print(newList)

#Output: [11, 12, 22, 23, 23, 23, 24, 43, 45]
&lt;/pre&gt;

&lt;br&gt;'''Example: Sort in descending order'''
&lt;pre&gt;
ages = [11,23,12,23,45,43,22,24,23]
newList=sorted(ages,reverse=True)
print(newList)

#Output: [45, 43, 24, 23, 23, 23, 22, 12, 11]
&lt;/pre&gt;

===Reverse the List===
list.reverse() will reverse the original list
  '''Example'''
    ages = [11, 12, 22, 23, 23, 23, 24, 43, 45]
    ages.reverse()
    print (ages)
    [45, 43, 24, 23, 23, 23, 22, 12, 11]

Both sort() and reverse() list operation will work on numeric and alphanumeric data list.

A special use of the reverse() function is to descend a list that is sorted in ascending order.

  '''Example'''
&lt;pre&gt;
ages = [11, 12, 22, 23, 23, 23, 24, 43, 45]
ages.sort()
print(ages)
ages.reverse()
print(ages)
&lt;/pre&gt;

===Slicing===
Used to retrieve an object or objects in a range as a list  
  '''Example'''

Use ''list[index]'' to retrieve the object at the given index
&lt;pre&gt;
In [1]: student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
In [2]: student[3]     #Object at index 3.  Remember index starts at 0
Out[2]: 'Geetha'      
&lt;/pre&gt;

Use ''list[start_index : end_index + 1]'' to retrieve objects from the start_index to end_index 
&lt;pre&gt;
In [3]: student[2:4]     # Objects from index 2 to 3 as List. Note the [ and ]
Out[3]: ['Vijay', 'Geetha']   
&lt;/pre&gt;

Use ''list[:]'' to retrieve objects from the starting of the list to the end of the list. 
The default start value will be the starting index of the list (i.e. 0) and the default end value
will be the length of the list 
&lt;pre&gt;
In [4]: student[:]        # prints the entire list
Out[4]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma', 'Janani']
&lt;/pre&gt;
&lt;pre&gt;
In [5]: student[:5]       # prints the objects from the start of the list upto object at index 4
Out[5]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran']
&lt;/pre&gt;
&lt;pre&gt;
In [6]: student[2:]       # prints the objects from index 2 upto the end of the list
Out[6]: ['Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma', 'Janani']
&lt;/pre&gt;

Negative index too is available in Python. It starts from last element of the list. i.e.
&lt;pre&gt;
In [7]:student[-1]        #prints last index of list
Out[7]: 'Janani'
&lt;/pre&gt;
&lt;pre&gt;
In [8]:student[-1:-8]     #prints empty list
Out[8]: []
&lt;/pre&gt;
&lt;pre&gt;
In [9]:student[-8:-1]     #prints -8th index to -1st index elements
Out[9]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma']
&lt;/pre&gt;

[[#TOP]]

===Removing Item from list ===
----

Is used to remove a specific item from the list.

'''Example:'''
 
Use list.remove(entry/value)  Or   del list[index]    Or list.pop(index)
&lt;pre&gt;
student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
student.remove(&quot;Arun&quot;)   #This will delete item &quot;Arun&quot;
         Or    
del student[0]           # This will delete item at index 0
         Or
student.pop(0)         # This will delete and return item at index 0
print(student)    
Output: &quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
&lt;/pre&gt;

[[#TOP]]

===Delete list ===
----
Used to delete complete list

'''Example'''

Use del &lt;list name&gt;
&lt;pre&gt;
student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
del student&lt;/pre&gt;

===Concatenation of two lists===
----
''+'' is the concatenation operator which is used concatenate two lists. 
&lt;pre&gt;
ages1 = [11,23,12,23,45]
ages2 = [25, 24, 43, 47]
age=ages1+ages2
print(age)
#Output: [11, 23, 12, 23, 45, 25, 24, 43, 47]
&lt;/pre&gt;

===Repeatation of a list ===
----
''*'' is the operator to repeat a particular list.
&lt;pre&gt;
ages1 = [11,23,12,23,45]
age=ages1*5 #ages1 list is repeated 5 times and stroed in ''age'' list
print(age)

#Output: [11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45]
&lt;/pre&gt;

=== all and any for List===
all() and any() are special functions to check whether all elements in iterable is ''True'' or any element is ''True''
&lt;ol&gt;
&lt;li&gt;If all elements in a list are ''True'', '''all()''' will return ''True''&lt;/li&gt;
&lt;li&gt;If iterable is ''empty'', '''all()''' will return ''True''&lt;/li&gt;
&lt;li&gt;If iterable contains at least one ''True'', '''any()''' will return ''True''&lt;/li&gt;
&lt;li&gt;If iterable is ''empty'', '''any()''' will return ''False''&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;
lsit=[True, True, True, True]
print(all(lsit))#Output: True
print(any(lsit))#Output: True

lsit1=[True, False, True, True]
print(all(lsit1))#Output: False
print(any(lsit1))#Output: True

lsit2=[False,False,False]
print(all(lsit2))#Output: False
print(any(lsit2))#Output: False

lsit3=[]
print(all(lsit3))#Output: True
print(any(lsit3))#Output: False
&lt;/pre&gt;

==Conditional Statements==
&lt;pre&gt;Conditionals are used to check the condition and change the flow of the program 
accordingly. They are realized in programming languages through if statement. The 
syntax is as follows :
&lt;pre&gt;
         if condition : 
            statement
&lt;/pre&gt;
    '''Note:''' Do not forget indentation (inserting space/tab) in the line after the
 if condition.
    
    In case you want to execute a set of statements when a condition is true and another

set of statement when the condition is false.
&lt;pre&gt;
         if condition : 
            statement 1
         else :
            statement 2
&lt;/pre&gt;

&lt;pre&gt;    
    Multiple if-else statements can be written as follows:
         if condition_1 : 
            statement 1
         elif condition_2 : # 'elif' is short for 'else if'
            statement 2
         elif condition_3 :
            statement 3
        .
        .
         else :
            final statement
&lt;/pre&gt;

[[#TOP]]

=Loops and Conditionals : Fizzbuzz=
====Loops====
Loops are used to execute a set of repetitive statements. They are realised
through 'while' and 'for' loops in programming languages. The syntax of 'for' loop is 
as follows :
&lt;pre&gt;
for LOOPVARIABLE in SEQUENCE: 
            STATEMENTS&lt;/pre&gt;

    '''e.g.''' to print all the data from a list we can write:
&lt;pre&gt;
for item in list_name:
      print(item)&lt;/pre&gt;
    OR
&lt;pre&gt;
for index in range(len(list_name)):
      print(list_name[index])
 &lt;/pre&gt;   
    The syntax for while loop is as follows :
&lt;pre&gt;    
while BOOLEANEXPRESSION: 
     STATEMENTS
     INCREMENT/DECREMENT
&lt;/pre&gt;    
    '''e.g.''' if we want to print all numbers from 1 to 10
&lt;pre&gt;
i=1
while i&lt;=10 :
    print(i,&quot; &quot;)
    i=i+1
    &lt;/pre&gt;
 
'while' loop has indefinite iteration (run-time unknown). So, there must be loop,  break statement in it.
 Whereas 'for' loop is definite in nature (i.e. known or predictable span).&lt;br&gt;

&lt;b&gt;NOTE: Python doesn't have anything like do-while loop.&lt;/b&gt;

[[#TOP]]

==Implementation==
Here, we try to demonstrate the concept of loops and conditionals through a game called Fizzbuzz. The rules are as follows :&lt;br/&gt;
[[File:fizzBuzz.gif]]

• if input number is a multiple of ’3’ print ”Fizz”
&lt;br/&gt;
• if input number is a multiple of ’5’ print ”Buzz”
&lt;br/&gt;
• if input number is a multiple of both '3' and ’5’ print ”FizzBuzz”
&lt;br/&gt;
The pseudo code is as follows :
&lt;pre&gt;
   If input no % 3 == 0 and  input no % 5 == 0 : 
       print ”Fizzbuzz”
   else if input no % 3 == 0 : 
       print ”Fizz”
   else if input no % 5 == 0 : 
       print ”Buzz”
   else :
       print the input no
&lt;/pre&gt;
The order of statements execution matters to get the desired output. The highest priority condition should be first followed by other. In fizzbuzz programming, first checking should be done for both divisibility of 3 and 5. If condition not satisfied only then it should check individually for 3 or 5. So carefully choosing the order is crucial for better programming.
Note: There is some effect of present condition statements chosen on next conditions statements. That is why in first attempt fizzbuzz programming got struck.

Example: 
&lt;pre&gt;
#Code to achieve the above requirement in python3.
i = int(input(&quot;Enter the number&quot;)) 
if i%3 == 0 and i%5 == 0: print(i,&quot;FizzBuzz&quot;)  
elif i%5 == 0: print(i,&quot;Buzz&quot;)
elif i%3 == 0: print(i,&quot;Fizz&quot;)
else: print(i)
&lt;/pre&gt;
Lets put the same into a loop for a range given by the user.
&lt;pre&gt;
def fizzbuzzgame(start,stop):
    for i in range(start,stop+1):
        if i%3 == 0 and i%5 == 0:
            print(i,&quot;FizzBuzz&quot;)
        elif i%5 == 0:
            print(i,&quot;Buzz&quot;)
        elif i%3 == 0:
            print(i,&quot;Fizz&quot;)
        else: print(i)

fizzbuzzgame(50,100)
&lt;/pre&gt;
&lt;pre&gt;
#Output:
1235
Buzz
======================================
555
Fizzbuzz
======================================
1235
Buzz
======================================
999
Fizz
&lt;/pre&gt;

=== Fizz Buzz game in Interactive mode with Score ===
'''By Ms. Ami Tusharkant Choksi'''
&lt;pre&gt;
def fizzbuzzgame(i):
        if i%3 == 0 and i%5 == 0:
            print(i,&quot;FizzBuzz&quot;)
            return(&quot;fzbz&quot;)
        elif i%5 == 0:
            print(i,&quot;Buzz&quot;)
            return(&quot;bz&quot;)
        elif i%3 == 0:
            print(i,&quot;Fizz&quot;)
            return(&quot;fz&quot;)
        else:
            print(i)
            return(&quot;no&quot;)

ch = 'y'
fizzbuzz=0
fizz=0
buzz=0
nothing=0
print(&quot;&quot;&quot;

 /$$$$$$$$/$$                  /$$$$$$$                            
| $$_____|__/                 | $$__  $$                           
| $$      /$$/$$$$$$$$/$$$$$$$| $$  \ $$/$$   /$$/$$$$$$$$/$$$$$$$$
| $$$$$  | $|____ /$$|____ /$$| $$$$$$$| $$  | $|____ /$$|____ /$$/
| $$__/  | $$  /$$$$/   /$$$$/| $$__  $| $$  | $$  /$$$$/   /$$$$/ 
| $$     | $$ /$$__/   /$$__/ | $$  \ $| $$  | $$ /$$__/   /$$__/  
| $$     | $$/$$$$$$$$/$$$$$$$| $$$$$$$|  $$$$$$//$$$$$$$$/$$$$$$$$
|__/     |__|________|________|_______/ \______/|________|________/
                                                                  
&quot;&quot;&quot;)   
print('''

  /$$$$$$                                
 /$$__  $$                               
| $$  \__/ /$$$$$$ /$$$$$$/$$$$  /$$$$$$ 
| $$ /$$$$|____  $| $$_  $$_  $$/$$__  $$
| $$|_  $$ /$$$$$$| $$ \ $$ \ $| $$$$$$$$
| $$  \ $$/$$__  $| $$ | $$ | $| $$_____/
|  $$$$$$|  $$$$$$| $$ | $$ | $|  $$$$$$$
 \______/ \_______|__/ |__/ |__/\_______/
                                     
''')

while(ch == 'y'):
    n=int(input(&quot;Enter a Number : &quot;))
    winLoose=fizzbuzzgame(n)
    if(winLoose == &quot;fz&quot;):
        fizz+=1
    elif(winLoose == &quot;bz&quot;):
        buzz+=1
    elif(winLoose == &quot;fzbz&quot;):
        fizzbuzz+=1
    ch=input(&quot;Do you want to continue playing the game : (y/n)&quot;)
    if(ch=='n'):
        print('Congratulations, your score is\n FizzBuzz:%d\nFizz:%d\nBuzz:%d' %
(fizzbuzz,fizz,buzz))
    
'''Sample Output:

 /$$$$$$$$/$$                  /$$$$$$$                            
| $$_____|__/                 | $$__  $$                           
| $$      /$$/$$$$$$$$/$$$$$$$| $$  \ $$/$$   /$$/$$$$$$$$/$$$$$$$$
| $$$$$  | $|____ /$$|____ /$$| $$$$$$$| $$  | $|____ /$$|____ /$$/
| $$__/  | $$  /$$$$/   /$$$$/| $$__  $| $$  | $$  /$$$$/   /$$$$/ 
| $$     | $$ /$$__/   /$$__/ | $$  \ $| $$  | $$ /$$__/   /$$__/  
| $$     | $$/$$$$$$$$/$$$$$$$| $$$$$$$|  $$$$$$//$$$$$$$$/$$$$$$$$
|__/     |__|________|________|_______/ \______/|________|________/
                                                                                                                                   

  /$$$$$$                                
 /$$__  $$                               
| $$  \__/ /$$$$$$ /$$$$$$/$$$$  /$$$$$$ 
| $$ /$$$$|____  $| $$_  $$_  $$/$$__  $$
| $$|_  $$ /$$$$$$| $$ \ $$ \ $| $$$$$$$$
| $$  \ $$/$$__  $| $$ | $$ | $| $$_____/
|  $$$$$$|  $$$$$$| $$ | $$ | $|  $$$$$$$
 \______/ \_______|__/ |__/ |__/\_______/
                                         

Enter a Number : 666
666 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 777
777 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 555
555 FizzBuzz
Do you want to continue playing the game : (y/n)y
Enter a Number : 1
1
Do you want to continue playing the game : (y/n)y
Enter a Number : 789
789 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 25
25 Buzz
Do you want to continue playing the game : (y/n)n
Congratulations, your score is

FizzBuzz:1
Fizz:3
Buzz:1

&lt;/pre&gt;

=Crowd Computing: Just Estimate=
==Wisdom of Crowds==
 &lt;p style=&quot;text-align:justify&quot;&gt;
The concept of ’Wisdom of Crowds’ was proposed by Francis Galton. A weight-judging competition was carried on at the annual show of the West of England Fat Stock and Poultry Exhibition recently held at Plymouth, A fat ox having been selected, competitors bought stamped and numbered cards, each, on which to inscribe their respective names, addresses, and estimates of what the ox would weigh after it had been slaughtered. Those who guessed most successfully received prizes. About 8oo tickets were issued to the par- ticipants. The middlemost estimate of all the estimates recorded was 1207 lbs and the actual weight of the ox was 1198 lbs.&lt;/p&gt;

==Our Experiment==
 &lt;p style=&quot;text-align:justify&quot;&gt;
The crowd had to guess the number of candies/gems in a jar. Around 75 people participated in the experiment. The actual number of gems in the jar were 375. The median of all estimates came out to be 300 and the mean of all the estimates came out to be around 396. Median underestimated and mean overestimated the actual value. So according to recent studies, Trimmed mean must be used as an aggregate measure to estimate where Wisdom of Crowds is involved.
&lt;/p&gt;
[[File:Gemsjar.jpg|center|200px|caption]]

===Trimmed Mean===
 &lt;p style=&quot;text-align:justify&quot;&gt;
In these kinds of experiments, 10% trimmed mean is usually followed. For calculating 10% trimmed mean, remove 10% smallest and 10% largest values from the sample. Calculate the mean of the sample obtained. In the above experiment, the trimmed mean came out to be around 351 which is very close to the actual value.&lt;/p&gt;

==Implementation==
Here, we try to demonstrate the concept of trimmed mean through crowd computing.
&lt;ol&gt;
&lt;li&gt; Input a list of estimates done by the crowd .&lt;/li&gt;
&lt;li&gt; Sort the list.&lt;/li&gt;
&lt;li&gt; Remove the 10% smallest values.&lt;/li&gt;
&lt;li&gt; Remove the 10% largest values.
&lt;li&gt; Calculate the mean of the new list obtained .&lt;/li&gt;&lt;/ol&gt;&lt;hr&gt;

==Data of Experiment==       
    Estimates =[1000,1010,1786,2000,1500,1500,100,120,150,150,150,170,175,180,197,200,200,200,200,200,200,220,220,220,220,234,250,250,250,250,250,250,250,250,250,263,270,275,275,286,300,
                300,300,300,300,300,300,300,320,350,350,350,400, 400,400,400,400,450,467,500,500,500,500,500,500,500,550,550,600,600,600,650,700,700,720]

    '''CODE:'''
&lt;pre&gt;
Estimates = [1000,1010,1786,2000,1500,1500,100,120,150,150,150,170,175,180,197,200,200,200,200,200,200,220,220,220,220,234,250,250,250,250,250,250,250,250,250,263,270,275,275,286,300,                300,300,300,300,300,300,300,320,350,350,350,400,400,400,400,400,450,467,500,500,500,500,500,500,500,550,550,600,600,600,650,700,700,720]
Estimates.sort()
offset = int(0.10*len(Estimates))
for i in range(offset):
       del Estimates[0]
       del Estimates[-1]
Sum = 0    
for i in range(len(Estimates)):
       Sum += Estimates[i]
Mean_Value = Sum/len(Estimates)
print(&quot;Mean : &quot;, int(Mean_Value))
#Output:
Mean :  351
&lt;/pre&gt;
&lt;hr&gt;
==Trimmed Mean for the above example== 
&lt;h3&gt;Using scipy library&lt;/h3&gt;
&lt;pre&gt;
#import scipy to use the method of trim_mean
from scipy import stats
trimMean = stats.trim_mean(Estimates, 0.1) # Trim 10% at both ends
print(&quot;Trimmed Mean : &quot;,trimMean)
#Output:
Trimmed Mean :  335.1020408163265
&lt;/pre&gt;

&lt;h3&gt;Without using scipy library&lt;/h3&gt;
&lt;pre&gt;
#Trimmed mean with 10%
p=10/100
#sorted data
data=[2, 4, 6, 7, 11, 21, 81, 90, 105, 121]
n = len(data)
#Remove elements from both end
rem=int(n*p)
newData = data[rem:-rem]
mean = 0
for i in newData:
    mean += i
mean = int(mean/len(newData))
print(&quot;Trimmed mean : &quot;,mean)
#Output: Trimmed mean :  40
&lt;/pre&gt;
[[#Top]]

=Jumbled_Words Permutations: Jumbled Words=
==What are Permutations ?==
A permutation also called ordering of selected number of elements from a list denoted by nPr here we are choosing all elements of a list and so n=r&lt;br&gt;
nPr=n!/(n-r)!&lt;br&gt; as n=r
nPn=n!&lt;br&gt; which gives all possible arrangement of elements present in a list.

 For example, permutations of list [1,2,3] are [1,2,3], [1,3,2], [2,1,3], [2,3,1], 
[3,1,2], and [3,2,1]. 
The number of permutations of a list of elements nPn is given by n!. For example, there are 2! = 2 x 1 = 2 permutations of [1,2], namely [1,2] and [2,1], and 3! = 3 x 2 x 1 = 6 permutations of [1,2,3], as mentioned above.&lt;br/&gt;
[[File:Permutations.jpg]]

==Implementation==
 &lt;p style=&quot;text-align:justify&quot;&gt;
Here, we try to demonstrate the concept of permutations through jumbled words. It is a two player game in which one person presents the other person a different permutation of the word in his mind. The other person has to guess the right word. If he guesses, the he wins otherwise he loses.&lt;/p&gt;
 Input an list of words.
 Randomly pick a word from the list of words .
 Shuffle this word and present it to the other player.
 if word guesses by the player is same as the one picked from list of w
     player wins
 else
     player loses

ALTERNATE CODE TO GENERATE THIS GAME:
&lt;pre&gt;
import random
p1=input(&quot;enter player 1 name:&quot;)
p2=input(&quot;enter player 2 name:&quot;)
l=[&quot;rainbow&quot;,&quot;computer&quot;,&quot;robot&quot;,&quot;butter&quot;,&quot;vegetable&quot;,&quot;science&quot;,&quot;correct&quot;]
c1=c2=a1=a2=f1=f2=0
k=1
i=3
def play():
    n=random.choice(l)        ##n=chooses a word from list l
    l1=[]
    for j in n:
       l1.append(j)      ##creates a list for word in n
    for t in range(len(l1)):
       p=random.choice(l1)     ##this randomly displays letters in the list
       print(p)
       l1.remove(p)          ##to avoid the repetition of a letter
    s=input(&quot;enter the word:&quot;)
    if(s==n):
        print(&quot;correct&quot;)
        return 1
    else:
        print(&quot;not correct&quot;)
        print(&quot;answer is&quot;,n)
        return 0
def stat():
     print(&quot;player 1:&quot;)
     print(&quot;score:&quot;,c1)
     print(&quot;answered:&quot;,a1)
     print(&quot;failed:&quot;,f1)
     print(&quot;.............&quot;)
     print(&quot;player 2:&quot;)
     print(&quot;score:&quot;,c2)
     print(&quot;answered:&quot;,a2)
     print(&quot;failed&quot;,f2)
     if(c1&gt;c2):
         print(p1,&quot; won over &quot;,p2)
     elif(c1==c2):
         print(&quot;draw game&quot;)
     else:
         print(p2,&quot; won over &quot;,p1) 
while(i!=4):
      if(i==3):
         if(k==1):
             print(&quot;player 1 turn&quot;)
             print(&quot;your jumbled word is:&quot;)
             k=k+1
             m=play()
             if(m==1):      ##if guessed answer is correct,then score and no.of answered count will be increased
                c1+=1
                a1+=1
             else:
                f1+=1       ##else count of no.of failed to answered will be incremented
         else:
             print(&quot;player 2 turn&quot;)
             print(&quot;your jumbled word is:&quot;)
             k=k-1
             m=play()
             if(m==1):
                c2=c2+1
                a2=a2+1
             else:
                f2=f2+1
       if(i==2):
             print(&quot;present status&quot;)
             stat()
       i=int(input(&quot;enter your choice  1.stop 2.status 3.continue&quot;))
       if(i==1):
             stat()
             i=i+3
&lt;/pre&gt;
&lt;hr&gt;
=== JumbledWord Simple Logic, In Short ===
[[File:jumbledWord.gif]]
&lt;hr&gt;
'''Logic to create a Jumbled Word'''
&lt;hr&gt;
&lt;pre&gt;
#Get Jumbled Word and print it Horizontally
import random

def getJumbledWord(b):
    jumble=''
    l1 = [ b[i] for i in range(0, len(b)) ]
    for t in range(len(l1)):
       p=random.choice(l1)     ##this randomly gets letters from the list      
       jumble=jumble+p       
       l1.remove(p)
    return jumble

b=input(&quot;Enter a word to make it jumbled : &quot;)
print(&quot;Jumbled Word : &quot;, getJumbledWord(b))
&lt;/pre&gt;
&lt;hr&gt;
'''Another Logic to create a Jumbled Word'''
&lt;hr&gt;
&lt;pre&gt;
b=input(&quot;Enter a word to make it jumbled : &quot;)

def getJumbledWord1(b):
    l1 = [ b[i] for i in range(0, len(b)) ]
    random.shuffle(l1)
    str1 = ''.join(l1)
    return str1

print(&quot;Jumbled Word : &quot;, getJumbledWord1(b))
&lt;/pre&gt;

====Sample Output:====
&lt;pre&gt;
---- Output1 
Enter a word to make it jumbled : butter
Jumbled Word :  tbture

---- Output2 
Enter a word to make it jumbled : petriotism
Jumbled Word :  pittrosime
&lt;/pre&gt;

=Theory of Evolution=

== What is Evolution ? ==
Evolution is the change in heritable characteristics over successive generations. The theory of evolution explains that DNA, which acts as a carrier of genetic information from one generation to other, tends to change or mutate occasionally. These changes are reflected in next generations to come. This is how life has evolved on earth from bacteria to human beings.&lt;br&gt;
[[File:Evolution.png|500px]]

== Implementation ==
An array representing DNA is stored in a file. As genes are forms of DNA, they contain information to be transferred to forthcoming generations. Assume that information is in the form of bits (in the form of 0s and 1s). A number is picked randomly from 1 to the size of the array. A new parameter has been introduced which decides whether mutation would occur or not. If the value of this new parameter is 1 (It is picked randomly from 1 to 100), then only change is reflected down the generations, otherwise it is not. The pseudo code is as follows :

Input an array containing genetic information .
Randomly generate a number (say m) from 1 to length of the array. Randomly generate other number (say p) from 1 to 100.

&lt;pre&gt; 
    if p is equal to 1 then 
        if m is 1 then
          set it to 0
        else
          set it to 1
&lt;/pre&gt;
[[#TOP]]</text>
      <sha1>dum7r3tehyi2b2cuty5byn1ccktd6qt</sha1>
    </revision>
    <revision>
      <id>3619</id>
      <parentid>3618</parentid>
      <timestamp>2018-09-28T04:35:19Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* Implementation */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="30400">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_3 Contributors of this page]
*Week 3 Playlist: https://www.youtube.com/playlist?list=PLc_j0TNIaWxOVx_z9jAM2UB3RqYNXaoEo
=List=
List is a flexible data structure used for storing a group of data separated by comma. The elements in a list need not be of the same data type.

'''Example:'''
       List_1 = [ 1, 2,3] or 
       List_1 = [&quot;coffee&quot;, &quot;Tea&quot;, &quot;Milk&quot;] or
       List_1 = [1,&quot;coffee&quot;, &quot;Tea&quot;, 3, &quot;5&quot;]

==List Creation==
&lt;pre&gt;a) A list can be created by simply putting values (separated by comma) between square brackets as given below,
       List_1 = [1,&quot;coffee&quot;, &quot;Tea&quot;, 3, &quot;5&quot;] #this creates a list by name List_1 containing following items


Or,
(b)A List can be created from scratch and elements can be added 
        List_2 = [ ]
        List_2.append(&quot;Kala&quot;)
        List_2.append(&quot;Mala&quot;)
Here we use &quot;append&quot; ,which is a function in python that enable us to append or attach an element to a list .
Thus List_2 will now hold [&quot;Kala&quot;,&quot;Mala&quot;]
&lt;/pre&gt;
[[#TOP]]

==Operations and Methods to work with List==
&lt;pre&gt;
a = [25,30,50,90,12,13]
b = [100,300,500,200,250]
&lt;/pre&gt;
&lt;hr&gt;
&lt;table border=2&gt;
  &lt;tr&gt;
    &lt;th&gt;&lt;b&gt;Method/&lt;br&gt;Operator&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Function&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Syntax&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Output&lt;/b&gt;&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;len()&lt;/td&gt;
    &lt;td&gt;Find length of a list&lt;/td&gt;
    &lt;td&gt;len(a)&lt;/td&gt;
    &lt;td&gt;6&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;max()&lt;/td&gt;
    &lt;td&gt;Find maximum element from the list&lt;/td&gt;
    &lt;td&gt;max(a)&lt;/td&gt;
    &lt;td&gt;90&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;min()&lt;/td&gt;
    &lt;td&gt;Find minimum element from the list&lt;/td&gt;
    &lt;td&gt;min(a)&lt;/td&gt;
    &lt;td&gt;12&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sum()&lt;/td&gt;
    &lt;td&gt;Returns sum of all elements of the list&lt;/td&gt;
    &lt;td&gt;sum(a)&lt;/td&gt;
    &lt;td&gt;220&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;reverse()&lt;/td&gt;
    &lt;td&gt;Reverses the original list&lt;/td&gt;
    &lt;td&gt;a.reverse()&lt;/td&gt;
    &lt;td&gt;[13, 12, 90, 50, 30, 25]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sort()&lt;/td&gt;
    &lt;td&gt;Sorts the original list in ascending order&lt;/td&gt;
    &lt;td&gt;a.sort()&lt;/td&gt;
    &lt;td&gt;[12, 13, 25, 30, 50, 90]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sorted()&lt;/td&gt;
    &lt;td&gt;Returns the new sorted list &lt;/td&gt;
    &lt;td&gt;sorted(a)&lt;/td&gt;
    &lt;td&gt;[12, 13, 25, 30, 50, 90]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;insert()&lt;/td&gt;
    &lt;td&gt;Insert at a particular index in the list, and shifts remaining elements&lt;/td&gt;
    &lt;td&gt;a.insert(3,3)&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 3, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;append()&lt;/td&gt;
    &lt;td&gt;Adds elements/object to the end of the list&lt;/td&gt;
    &lt;td&gt;a.append(5)&lt;br&gt;a.append([10,20])&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 5]&lt;br&gt;[25, 30, 50, 90, 12, 13, [10, 20]]&lt;br&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;extend()&lt;/td&gt;
    &lt;td&gt;Adds object to the end of the list as elements not as object&lt;/td&gt;
    &lt;td&gt;a.extend([10,20])&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 10, 20]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;*&amp;nbsp;&amp;nbsp;Repeatation&lt;br&gt;operator&lt;/td&gt;
    &lt;td&gt;Repeat the list for n times and returns a new list&lt;/td&gt;
    &lt;td&gt;a*2&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 25, 30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;+ Concatenation&lt;br&gt;operator&lt;/td&gt;
    &lt;td&gt;Concatenates two lists, and returns a new list&lt;/td&gt;
    &lt;td&gt;a+b&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 100, 300, 500, 200, 250]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;index()&lt;/td&gt;
    &lt;td&gt;Finds index of a particular element in the list or not&lt;/td&gt;
    &lt;td&gt;a.index(25)&lt;br&gt;a.index(0)&lt;br&gt;&lt;/td&gt;
    &lt;td&gt;0&lt;br&gt;&lt;br&gt;ValueError: 0 is not in list&lt;br&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;in operator&lt;/td&gt;
    &lt;td&gt;Finds whether a particular element is in the list or not, returns boolean&lt;/td&gt;
    &lt;td&gt;25 in a&lt;/td&gt;
    &lt;td&gt;True&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;not in operator&lt;/td&gt;
    &lt;td&gt;Checks if element is not available in list, returns boolean&lt;/td&gt;
    &lt;td&gt;25 not in a&lt;/td&gt;
    &lt;td&gt;False&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;count()&lt;/td&gt;
    &lt;td&gt;Counts the number of occurence of an element in the list&lt;/td&gt;
    &lt;td&gt;a.count(25)&lt;/td&gt;
    &lt;td&gt;1&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;remove()&lt;/td&gt;
    &lt;td&gt;Removes an element from the list&lt;/td&gt;
    &lt;td&gt;a.remove(25)&lt;/td&gt;
    &lt;td&gt; [30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;pop()&lt;/td&gt;
    &lt;td&gt;Delete and return item at index 0&lt;/td&gt;
    &lt;td&gt;a.pop(0)&lt;/td&gt;
    &lt;td&gt;25 , a will be [30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;del&lt;/td&gt;
    &lt;td&gt;Deletes item at a particular index from the list&lt;/td&gt;
    &lt;td&gt;del a[0]&lt;/td&gt;
    &lt;td&gt;[30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;all()&lt;/td&gt;
&lt;td&gt;Returns True, if all items in list are True or it is an empty list&lt;/td&gt;
&lt;td&gt;all([True, True, True])
all([])
&lt;/td&gt;
&lt;td&gt;True&lt;br&gt;
True&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;any()&lt;/td&gt;
&lt;td&gt;Returns True, if any item in list is True else return False&lt;/td&gt;
&lt;td&gt;any([True, True, True])&lt;br&gt;
any([True, False, True])&lt;br&gt;
any([])&lt;/td&gt;
&lt;td&gt;True&lt;br&gt;False&lt;br&gt;False&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;

==Printing the List==
=== Print whole list ===
A list can be printed simply or using a ''for / while'' loop 

 print(List_2)     # To print the entire list
This code will print      
 ['Kala','Mala']     

===Print element at a particular index===
&lt;pre&gt;
Using index position
    List_2[0]     # prints 'Kala' ,i.e,the value at index position 0.
    List_2[1]     # prints 'Mala'.
&lt;/pre&gt;
=== Without using index position ===
&lt;pre&gt;
for item in List_2:   # here item is a variable used to access elements in list.
       print(item)
   This code snippet prints 
    Kala
    Mala
&lt;/pre&gt;
[[#TOP]]

==Search for a particular element in list==
Elements in a list can be searched by one of the two ways:
=== using index() function===
&lt;pre&gt;
ages1 = [11,23,12,23,45]

#if element is available in the list, index() returns the index value on which, the element is present.
print(ages1.index(45))#Output: 4

#if element is not available in the list, index() returns ''ValueError''
print(ages1.index(0))#Output: ValueError:
&lt;/pre&gt;

In programming, if such error occurs, program gets terminated. It can be solved using exception handling.
e.g.
&lt;pre&gt;
ages1 = [11,23,12,23,45]

try:
    print(ages1.index(0))
except ValueError:
    print(&quot;Exception has occured&quot;)    
    print(&quot;Element is not found in the list&quot;)

&lt;/pre&gt;
&lt;pre&gt;
'''Output: 
Exception has occured
Element is not found in the list
'''&lt;/pre&gt;
[[#TOP]]

=== using 'in' operator===
''in'' operator is used to check whether a particular element is available in the list or not.e.g.

&lt;pre&gt;
ages1 = [11,23,12,23,45]
no=11

if no in ages1:
    print(&quot;no is there in the list&quot;)
else:    
    print(&quot;no is NOT there in the list&quot;)
&lt;/pre&gt;
&lt;pre&gt;
#Output: no is there in the list
&lt;/pre&gt;


'''Number is not there in the list'''
&lt;pre&gt;
ages1 = [11,23,12,23,45]
no=15

if no in ages1:
    print(&quot;no is there in the list&quot;)
else:    
    print(&quot;no is NOT there in the list&quot;)
&lt;/pre&gt;
&lt;pre&gt;
Output: no is NOT there in the list
&lt;/pre&gt;
[[#TOP]]

==Updating the List==
The lists can be updated using ''append'' or ''insert'' function.  Append adds the element to the end of the list and Insert adds the element in the specified position.
&lt;pre&gt;
   # add the element 'Sheela' to the end of the list.
   List_2.append(&quot;Sheela&quot;)    
   print (List_2) will output 
   ['Kala', 'Mala', 'Sheela']
&lt;/pre&gt;
   &lt;pre&gt;
# add the element &quot;Bala&quot; in the list at the index 1.
   List_2.insert(1,&quot;Bala&quot;)    
   print (List_2) will output 
   ['Kala', 'Bala','Mala', 'Sheela']
&lt;/pre&gt;

=== Extend the list by adding elements of other list at end using extend()===
&lt;pre&gt;
ages = [11,23,12,23,45]
ages.extend([57,58])
print(ages)
&lt;/pre&gt;

&lt;pre&gt;
#Output: [11, 23, 12, 23, 45, 57, 58]
&lt;/pre&gt;

==== Difference between ''append and extend'' ====
Difference between append and extend can be easily understood, by the following example.

&lt;pre&gt;
appendlist = [11,23,12,23,45]
appendlist.append([57,58])

extendlist= [11,23,12,23,45]
extendlist.extend([57,58])
&lt;/pre&gt;

&lt;pre&gt;
'''Output:
[11, 23, 12, 23, 45, [57, 58]]
[11, 23, 12, 23, 45, 57, 58]'''
&lt;/pre&gt;

[[#TOP]]

==Basic Operations on List==
===Frequency of Occurrence===
list.count(object) will return the number of times the object occur in the list.
  '''Example'''
    ages = [11,23,12,23,45,43,22,24,23]
    ages.count(23) will return
    3
    ages.count(100) will return
    0

===Length of the List===
len(list) will return the length of the list ie. the number of objects in the list.
  '''Example'''
&lt;pre&gt;
    ages = [11,23,12,23,45,43,22,24,23]
    len(ages) # Output: 9
&lt;/pre&gt;

To print the objects in the list either use ''for item in list'' or ''for index in range(len(list))''
&lt;pre&gt;
    for item in ages:       
        print (item)  
        (OR)
    for index in range(len(ages)) :
        print (ages[index])
&lt;/pre&gt;

===Sort the List===
list.sort() will sort the list in ascending order
  '''Example'''
    ages = [11,23,12,23,45,43,22,24,23]
    ages.sort() 
    print (ages) 
    [11, 12, 22, 23, 23, 23, 24, 43, 45]

[[#TOP]]

===Sort the List using sorted() function===
sorted(list1) will sort the list and return a new list, it doesn't modify the original list
&lt;br&gt;'''Example: Sort in ascending order'''
&lt;pre&gt;
ages = [11,23,12,23,45,43,22,24,23]
newList=sorted(ages)
print(newList)

#Output: [11, 12, 22, 23, 23, 23, 24, 43, 45]
&lt;/pre&gt;

&lt;br&gt;'''Example: Sort in descending order'''
&lt;pre&gt;
ages = [11,23,12,23,45,43,22,24,23]
newList=sorted(ages,reverse=True)
print(newList)

#Output: [45, 43, 24, 23, 23, 23, 22, 12, 11]
&lt;/pre&gt;

===Reverse the List===
list.reverse() will reverse the original list
  '''Example'''
    ages = [11, 12, 22, 23, 23, 23, 24, 43, 45]
    ages.reverse()
    print (ages)
    [45, 43, 24, 23, 23, 23, 22, 12, 11]

Both sort() and reverse() list operation will work on numeric and alphanumeric data list.

A special use of the reverse() function is to descend a list that is sorted in ascending order.

  '''Example'''
&lt;pre&gt;
ages = [11, 12, 22, 23, 23, 23, 24, 43, 45]
ages.sort()
print(ages)
ages.reverse()
print(ages)
&lt;/pre&gt;

===Slicing===
Used to retrieve an object or objects in a range as a list  
  '''Example'''

Use ''list[index]'' to retrieve the object at the given index
&lt;pre&gt;
In [1]: student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
In [2]: student[3]     #Object at index 3.  Remember index starts at 0
Out[2]: 'Geetha'      
&lt;/pre&gt;

Use ''list[start_index : end_index + 1]'' to retrieve objects from the start_index to end_index 
&lt;pre&gt;
In [3]: student[2:4]     # Objects from index 2 to 3 as List. Note the [ and ]
Out[3]: ['Vijay', 'Geetha']   
&lt;/pre&gt;

Use ''list[:]'' to retrieve objects from the starting of the list to the end of the list. 
The default start value will be the starting index of the list (i.e. 0) and the default end value
will be the length of the list 
&lt;pre&gt;
In [4]: student[:]        # prints the entire list
Out[4]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma', 'Janani']
&lt;/pre&gt;
&lt;pre&gt;
In [5]: student[:5]       # prints the objects from the start of the list upto object at index 4
Out[5]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran']
&lt;/pre&gt;
&lt;pre&gt;
In [6]: student[2:]       # prints the objects from index 2 upto the end of the list
Out[6]: ['Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma', 'Janani']
&lt;/pre&gt;

Negative index too is available in Python. It starts from last element of the list. i.e.
&lt;pre&gt;
In [7]:student[-1]        #prints last index of list
Out[7]: 'Janani'
&lt;/pre&gt;
&lt;pre&gt;
In [8]:student[-1:-8]     #prints empty list
Out[8]: []
&lt;/pre&gt;
&lt;pre&gt;
In [9]:student[-8:-1]     #prints -8th index to -1st index elements
Out[9]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma']
&lt;/pre&gt;

[[#TOP]]

===Removing Item from list ===
----

Is used to remove a specific item from the list.

'''Example:'''
 
Use list.remove(entry/value)  Or   del list[index]    Or list.pop(index)
&lt;pre&gt;
student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
student.remove(&quot;Arun&quot;)   #This will delete item &quot;Arun&quot;
         Or    
del student[0]           # This will delete item at index 0
         Or
student.pop(0)         # This will delete and return item at index 0
print(student)    
Output: &quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
&lt;/pre&gt;

[[#TOP]]

===Delete list ===
----
Used to delete complete list

'''Example'''

Use del &lt;list name&gt;
&lt;pre&gt;
student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
del student&lt;/pre&gt;

===Concatenation of two lists===
----
''+'' is the concatenation operator which is used concatenate two lists. 
&lt;pre&gt;
ages1 = [11,23,12,23,45]
ages2 = [25, 24, 43, 47]
age=ages1+ages2
print(age)
#Output: [11, 23, 12, 23, 45, 25, 24, 43, 47]
&lt;/pre&gt;

===Repeatation of a list ===
----
''*'' is the operator to repeat a particular list.
&lt;pre&gt;
ages1 = [11,23,12,23,45]
age=ages1*5 #ages1 list is repeated 5 times and stroed in ''age'' list
print(age)

#Output: [11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45]
&lt;/pre&gt;

=== all and any for List===
all() and any() are special functions to check whether all elements in iterable is ''True'' or any element is ''True''
&lt;ol&gt;
&lt;li&gt;If all elements in a list are ''True'', '''all()''' will return ''True''&lt;/li&gt;
&lt;li&gt;If iterable is ''empty'', '''all()''' will return ''True''&lt;/li&gt;
&lt;li&gt;If iterable contains at least one ''True'', '''any()''' will return ''True''&lt;/li&gt;
&lt;li&gt;If iterable is ''empty'', '''any()''' will return ''False''&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;
lsit=[True, True, True, True]
print(all(lsit))#Output: True
print(any(lsit))#Output: True

lsit1=[True, False, True, True]
print(all(lsit1))#Output: False
print(any(lsit1))#Output: True

lsit2=[False,False,False]
print(all(lsit2))#Output: False
print(any(lsit2))#Output: False

lsit3=[]
print(all(lsit3))#Output: True
print(any(lsit3))#Output: False
&lt;/pre&gt;

==Conditional Statements==
&lt;pre&gt;Conditionals are used to check the condition and change the flow of the program 
accordingly. They are realized in programming languages through if statement. The 
syntax is as follows :
&lt;pre&gt;
         if condition : 
            statement
&lt;/pre&gt;
    '''Note:''' Do not forget indentation (inserting space/tab) in the line after the
 if condition.
    
    In case you want to execute a set of statements when a condition is true and another

set of statement when the condition is false.
&lt;pre&gt;
         if condition : 
            statement 1
         else :
            statement 2
&lt;/pre&gt;

&lt;pre&gt;    
    Multiple if-else statements can be written as follows:
         if condition_1 : 
            statement 1
         elif condition_2 : # 'elif' is short for 'else if'
            statement 2
         elif condition_3 :
            statement 3
        .
        .
         else :
            final statement
&lt;/pre&gt;

[[#TOP]]

=Loops and Conditionals : Fizzbuzz=
====Loops====
Loops are used to execute a set of repetitive statements. They are realised
through 'while' and 'for' loops in programming languages. The syntax of 'for' loop is 
as follows :
&lt;pre&gt;
for LOOPVARIABLE in SEQUENCE: 
            STATEMENTS&lt;/pre&gt;

    '''e.g.''' to print all the data from a list we can write:
&lt;pre&gt;
for item in list_name:
      print(item)&lt;/pre&gt;
    OR
&lt;pre&gt;
for index in range(len(list_name)):
      print(list_name[index])
 &lt;/pre&gt;   
    The syntax for while loop is as follows :
&lt;pre&gt;    
while BOOLEANEXPRESSION: 
     STATEMENTS
     INCREMENT/DECREMENT
&lt;/pre&gt;    
    '''e.g.''' if we want to print all numbers from 1 to 10
&lt;pre&gt;
i=1
while i&lt;=10 :
    print(i,&quot; &quot;)
    i=i+1
    &lt;/pre&gt;
 
'while' loop has indefinite iteration (run-time unknown). So, there must be loop,  break statement in it.
 Whereas 'for' loop is definite in nature (i.e. known or predictable span).&lt;br&gt;

&lt;b&gt;NOTE: Python doesn't have anything like do-while loop.&lt;/b&gt;

[[#TOP]]

==Implementation==
Here, we try to demonstrate the concept of loops and conditionals through a game called Fizzbuzz. The rules are as follows :&lt;br/&gt;
[[File:fizzBuzz.gif]]

• if input number is a multiple of ’3’ print ”Fizz”
&lt;br/&gt;
• if input number is a multiple of ’5’ print ”Buzz”
&lt;br/&gt;
• if input number is a multiple of both '3' and ’5’ print ”FizzBuzz”
&lt;br/&gt;
The pseudo code is as follows :
&lt;pre&gt;
   If input no % 3 == 0 and  input no % 5 == 0 : 
       print ”Fizzbuzz”
   else if input no % 3 == 0 : 
       print ”Fizz”
   else if input no % 5 == 0 : 
       print ”Buzz”
   else :
       print the input no
&lt;/pre&gt;
The order of statements execution matters to get the desired output. The highest priority condition should be first followed by other. In fizzbuzz programming, first checking should be done for both divisibility of 3 and 5. If condition not satisfied only then it should check individually for 3 or 5. So carefully choosing the order is crucial for better programming.
Note: There is some effect of present condition statements chosen on next conditions statements. That is why in first attempt fizzbuzz programming got struck.

Example: 
&lt;pre&gt;
#Code to achieve the above requirement in python3.
i = int(input(&quot;Enter the number&quot;)) 
if i%3 == 0 and i%5 == 0: print(i,&quot;FizzBuzz&quot;)  
elif i%5 == 0: print(i,&quot;Buzz&quot;)
elif i%3 == 0: print(i,&quot;Fizz&quot;)
else: print(i)
&lt;/pre&gt;
Lets put the same into a loop for a range given by the user.
&lt;pre&gt;
def fizzbuzzgame(start,stop):
    for i in range(start,stop+1):
        if i%3 == 0 and i%5 == 0:
            print(i,&quot;FizzBuzz&quot;)
        elif i%5 == 0:
            print(i,&quot;Buzz&quot;)
        elif i%3 == 0:
            print(i,&quot;Fizz&quot;)
        else: print(i)

fizzbuzzgame(50,100)
&lt;/pre&gt;
&lt;pre&gt;
#Output:
1235
Buzz
======================================
555
Fizzbuzz
======================================
1235
Buzz
======================================
999
Fizz
&lt;/pre&gt;

=== Fizz Buzz game in Interactive mode with Score ===
'''By Ms. Ami Tusharkant Choksi'''
&lt;pre&gt;
def fizzbuzzgame(i):
        if i%3 == 0 and i%5 == 0:
            print(i,&quot;FizzBuzz&quot;)
            return(&quot;fzbz&quot;)
        elif i%5 == 0:
            print(i,&quot;Buzz&quot;)
            return(&quot;bz&quot;)
        elif i%3 == 0:
            print(i,&quot;Fizz&quot;)
            return(&quot;fz&quot;)
        else:
            print(i)
            return(&quot;no&quot;)

ch = 'y'
fizzbuzz=0
fizz=0
buzz=0
nothing=0
print(&quot;&quot;&quot;

 /$$$$$$$$/$$                  /$$$$$$$                            
| $$_____|__/                 | $$__  $$                           
| $$      /$$/$$$$$$$$/$$$$$$$| $$  \ $$/$$   /$$/$$$$$$$$/$$$$$$$$
| $$$$$  | $|____ /$$|____ /$$| $$$$$$$| $$  | $|____ /$$|____ /$$/
| $$__/  | $$  /$$$$/   /$$$$/| $$__  $| $$  | $$  /$$$$/   /$$$$/ 
| $$     | $$ /$$__/   /$$__/ | $$  \ $| $$  | $$ /$$__/   /$$__/  
| $$     | $$/$$$$$$$$/$$$$$$$| $$$$$$$|  $$$$$$//$$$$$$$$/$$$$$$$$
|__/     |__|________|________|_______/ \______/|________|________/
                                                                  
&quot;&quot;&quot;)   
print('''

  /$$$$$$                                
 /$$__  $$                               
| $$  \__/ /$$$$$$ /$$$$$$/$$$$  /$$$$$$ 
| $$ /$$$$|____  $| $$_  $$_  $$/$$__  $$
| $$|_  $$ /$$$$$$| $$ \ $$ \ $| $$$$$$$$
| $$  \ $$/$$__  $| $$ | $$ | $| $$_____/
|  $$$$$$|  $$$$$$| $$ | $$ | $|  $$$$$$$
 \______/ \_______|__/ |__/ |__/\_______/
                                     
''')

while(ch == 'y'):
    n=int(input(&quot;Enter a Number : &quot;))
    winLoose=fizzbuzzgame(n)
    if(winLoose == &quot;fz&quot;):
        fizz+=1
    elif(winLoose == &quot;bz&quot;):
        buzz+=1
    elif(winLoose == &quot;fzbz&quot;):
        fizzbuzz+=1
    ch=input(&quot;Do you want to continue playing the game : (y/n)&quot;)
    if(ch=='n'):
        print('Congratulations, your score is\n FizzBuzz:%d\nFizz:%d\nBuzz:%d' %
(fizzbuzz,fizz,buzz))
    
'''Sample Output:

 /$$$$$$$$/$$                  /$$$$$$$                            
| $$_____|__/                 | $$__  $$                           
| $$      /$$/$$$$$$$$/$$$$$$$| $$  \ $$/$$   /$$/$$$$$$$$/$$$$$$$$
| $$$$$  | $|____ /$$|____ /$$| $$$$$$$| $$  | $|____ /$$|____ /$$/
| $$__/  | $$  /$$$$/   /$$$$/| $$__  $| $$  | $$  /$$$$/   /$$$$/ 
| $$     | $$ /$$__/   /$$__/ | $$  \ $| $$  | $$ /$$__/   /$$__/  
| $$     | $$/$$$$$$$$/$$$$$$$| $$$$$$$|  $$$$$$//$$$$$$$$/$$$$$$$$
|__/     |__|________|________|_______/ \______/|________|________/
                                                                                                                                   

  /$$$$$$                                
 /$$__  $$                               
| $$  \__/ /$$$$$$ /$$$$$$/$$$$  /$$$$$$ 
| $$ /$$$$|____  $| $$_  $$_  $$/$$__  $$
| $$|_  $$ /$$$$$$| $$ \ $$ \ $| $$$$$$$$
| $$  \ $$/$$__  $| $$ | $$ | $| $$_____/
|  $$$$$$|  $$$$$$| $$ | $$ | $|  $$$$$$$
 \______/ \_______|__/ |__/ |__/\_______/
                                         

Enter a Number : 666
666 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 777
777 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 555
555 FizzBuzz
Do you want to continue playing the game : (y/n)y
Enter a Number : 1
1
Do you want to continue playing the game : (y/n)y
Enter a Number : 789
789 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 25
25 Buzz
Do you want to continue playing the game : (y/n)n
Congratulations, your score is

FizzBuzz:1
Fizz:3
Buzz:1

&lt;/pre&gt;

=Crowd Computing: Just Estimate=
==Wisdom of Crowds==
 &lt;p style=&quot;text-align:justify&quot;&gt;
The concept of ’Wisdom of Crowds’ was proposed by Francis Galton. A weight-judging competition was carried on at the annual show of the West of England Fat Stock and Poultry Exhibition recently held at Plymouth, A fat ox having been selected, competitors bought stamped and numbered cards, each, on which to inscribe their respective names, addresses, and estimates of what the ox would weigh after it had been slaughtered. Those who guessed most successfully received prizes. About 8oo tickets were issued to the par- ticipants. The middlemost estimate of all the estimates recorded was 1207 lbs and the actual weight of the ox was 1198 lbs.&lt;/p&gt;

==Our Experiment==
 &lt;p style=&quot;text-align:justify&quot;&gt;
The crowd had to guess the number of candies/gems in a jar. Around 75 people participated in the experiment. The actual number of gems in the jar were 375. The median of all estimates came out to be 300 and the mean of all the estimates came out to be around 396. Median underestimated and mean overestimated the actual value. So according to recent studies, Trimmed mean must be used as an aggregate measure to estimate where Wisdom of Crowds is involved.
&lt;/p&gt;
[[File:Gemsjar.jpg|center|200px|caption]]

===Trimmed Mean===
 &lt;p style=&quot;text-align:justify&quot;&gt;
In these kinds of experiments, 10% trimmed mean is usually followed. For calculating 10% trimmed mean, remove 10% smallest and 10% largest values from the sample. Calculate the mean of the sample obtained. In the above experiment, the trimmed mean came out to be around 351 which is very close to the actual value.&lt;/p&gt;

==Implementation==
Here, we try to demonstrate the concept of trimmed mean through crowd computing.
&lt;ol&gt;
&lt;li&gt; Input a list of estimates done by the crowd .&lt;/li&gt;
&lt;li&gt; Sort the list.&lt;/li&gt;
&lt;li&gt; Remove the 10% smallest values.&lt;/li&gt;
&lt;li&gt; Remove the 10% largest values.
&lt;li&gt; Calculate the mean of the new list obtained .&lt;/li&gt;&lt;/ol&gt;&lt;hr&gt;

==Data of Experiment==       
    Estimates =[1000,1010,1786,2000,1500,1500,100,120,150,150,150,170,175,180,197,200,200,200,200,200,200,220,220,220,220,234,250,250,250,250,250,250,250,250,250,263,270,275,275,286,300,
                300,300,300,300,300,300,300,320,350,350,350,400, 400,400,400,400,450,467,500,500,500,500,500,500,500,550,550,600,600,600,650,700,700,720]

    '''CODE:'''
&lt;pre&gt;
Estimates = [1000,1010,1786,2000,1500,1500,100,120,150,150,150,170,175,180,197,200,200,200,200,200,200,220,220,220,220,234,250,250,250,250,250,250,250,250,250,263,270,275,275,286,300,                300,300,300,300,300,300,300,320,350,350,350,400,400,400,400,400,450,467,500,500,500,500,500,500,500,550,550,600,600,600,650,700,700,720]
Estimates.sort()
offset = int(0.10*len(Estimates))
for i in range(offset):
       del Estimates[0]
       del Estimates[-1]
Sum = 0    
for i in range(len(Estimates)):
       Sum += Estimates[i]
Mean_Value = Sum/len(Estimates)
print(&quot;Mean : &quot;, int(Mean_Value))
#Output:
Mean :  351
&lt;/pre&gt;
&lt;hr&gt;
==Trimmed Mean for the above example== 
&lt;h3&gt;Using scipy library&lt;/h3&gt;
&lt;pre&gt;
#import scipy to use the method of trim_mean
from scipy import stats
trimMean = stats.trim_mean(Estimates, 0.1) # Trim 10% at both ends
print(&quot;Trimmed Mean : &quot;,trimMean)
#Output:
Trimmed Mean :  335.1020408163265
&lt;/pre&gt;

&lt;h3&gt;Without using scipy library&lt;/h3&gt;
&lt;pre&gt;
#Trimmed mean with 10%
p=10/100
#sorted data
data=[2, 4, 6, 7, 11, 21, 81, 90, 105, 121]
n = len(data)
#Remove elements from both end
rem=int(n*p)
newData = data[rem:-rem]
mean = 0
for i in newData:
    mean += i
mean = int(mean/len(newData))
print(&quot;Trimmed mean : &quot;,mean)
#Output: Trimmed mean :  40
&lt;/pre&gt;
[[#Top]]

=Jumbled_Words Permutations: Jumbled Words=
==What are Permutations ?==
A permutation also called ordering of selected number of elements from a list denoted by nPr here we are choosing all elements of a list and so n=r&lt;br&gt;
nPr=n!/(n-r)!&lt;br&gt; as n=r
nPn=n!&lt;br&gt; which gives all possible arrangement of elements present in a list.

 For example, permutations of list [1,2,3] are [1,2,3], [1,3,2], [2,1,3], [2,3,1], 
[3,1,2], and [3,2,1]. 
The number of permutations of a list of elements nPn is given by n!. For example, there are 2! = 2 x 1 = 2 permutations of [1,2], namely [1,2] and [2,1], and 3! = 3 x 2 x 1 = 6 permutations of [1,2,3], as mentioned above.&lt;br/&gt;
[[File:Permutations.jpg]]

==Implementation==
 &lt;p style=&quot;text-align:justify&quot;&gt;
Here, we try to demonstrate the concept of permutations through jumbled words. It is a two player game in which one person presents the other person a different permutation of the word in his mind. The other person has to guess the right word. If he guesses, the he wins otherwise he loses.&lt;/p&gt;
 Input an list of words.
 Randomly pick a word from the list of words .
 Shuffle this word and present it to the other player.
 if word guesses by the player is same as the one picked from list of w
     player wins
 else
     player loses

ALTERNATE CODE TO GENERATE THIS GAME:
&lt;pre&gt;
import random
p1=input(&quot;enter player 1 name:&quot;)
p2=input(&quot;enter player 2 name:&quot;)
l=[&quot;rainbow&quot;,&quot;computer&quot;,&quot;robot&quot;,&quot;butter&quot;,&quot;vegetable&quot;,&quot;science&quot;,&quot;correct&quot;]
c1=c2=a1=a2=f1=f2=0
k=1
i=3
def play():
    n=random.choice(l)        ##n=chooses a word from list l
    l1=[]
    for j in n:
       l1.append(j)      ##creates a list for word in n
    for t in range(len(l1)):
       p=random.choice(l1)     ##this randomly displays letters in the list
       print(p)
       l1.remove(p)          ##to avoid the repetition of a letter
    s=input(&quot;enter the word:&quot;)
    if(s==n):
        print(&quot;correct&quot;)
        return 1
    else:
        print(&quot;not correct&quot;)
        print(&quot;answer is&quot;,n)
        return 0
def stat():
     print(&quot;player 1:&quot;)
     print(&quot;score:&quot;,c1)
     print(&quot;answered:&quot;,a1)
     print(&quot;failed:&quot;,f1)
     print(&quot;.............&quot;)
     print(&quot;player 2:&quot;)
     print(&quot;score:&quot;,c2)
     print(&quot;answered:&quot;,a2)
     print(&quot;failed&quot;,f2)
     if(c1&gt;c2):
         print(p1,&quot; won over &quot;,p2)
     elif(c1==c2):
         print(&quot;draw game&quot;)
     else:
         print(p2,&quot; won over &quot;,p1) 
while(i!=4):
      if(i==3):
         if(k==1):
             print(&quot;player 1 turn&quot;)
             print(&quot;your jumbled word is:&quot;)
             k=k+1
             m=play()
             if(m==1):      ##if guessed answer is correct,then score and no.of answered count will be increased
                c1+=1
                a1+=1
             else:
                f1+=1       ##else count of no.of failed to answered will be incremented
         else:
             print(&quot;player 2 turn&quot;)
             print(&quot;your jumbled word is:&quot;)
             k=k-1
             m=play()
             if(m==1):
                c2=c2+1
                a2=a2+1
             else:
                f2=f2+1
       if(i==2):
             print(&quot;present status&quot;)
             stat()
       i=int(input(&quot;enter your choice  1.stop 2.status 3.continue&quot;))
       if(i==1):
             stat()
             i=i+3
&lt;/pre&gt;
&lt;hr&gt;
=== JumbledWord Simple Logic, In Short ===
[[File:jumbledWord.gif]]
&lt;hr&gt;
'''Logic to create a Jumbled Word'''
&lt;hr&gt;
&lt;pre&gt;
#Get Jumbled Word and print it Horizontally
import random

def getJumbledWord(b):
    jumble=''
    l1 = [ b[i] for i in range(0, len(b)) ]
    for t in range(len(l1)):
       p=random.choice(l1)     ##this randomly gets letters from the list      
       jumble=jumble+p       
       l1.remove(p)
    return jumble

b=input(&quot;Enter a word to make it jumbled : &quot;)
print(&quot;Jumbled Word : &quot;, getJumbledWord(b))
&lt;/pre&gt;
&lt;hr&gt;
'''Another Logic to create a Jumbled Word'''
&lt;hr&gt;
&lt;pre&gt;
b=input(&quot;Enter a word to make it jumbled : &quot;)

def getJumbledWord1(b):
    l1 = [ b[i] for i in range(0, len(b)) ]
    random.shuffle(l1)
    str1 = ''.join(l1)
    return str1

print(&quot;Jumbled Word : &quot;, getJumbledWord1(b))
&lt;/pre&gt;

====Sample Output:====
&lt;pre&gt;
---- Output1 
Enter a word to make it jumbled : butter
Jumbled Word :  tbture

---- Output2 
Enter a word to make it jumbled : petriotism
Jumbled Word :  pittrosime
&lt;/pre&gt;

=Theory of Evolution=

== What is Evolution ? ==
Evolution is the change in heritable characteristics over successive generations. The theory of evolution explains that DNA, which acts as a carrier of genetic information from one generation to other, tends to change or mutate occasionally. These changes are reflected in next generations to come. This is how life has evolved on earth from bacteria to human beings.&lt;br&gt;
[[File:Evolution.png|500px]]

== Implementation ==
 &lt;p style=&quot;text-align:justify&quot;&gt;
An array representing DNA is stored in a file. As genes are forms of DNA, they contain information to be transferred to forthcoming generations. Assume that information is in the form of bits (in the form of 0s and 1s). A number is picked randomly from 1 to the size of the array. A new parameter has been introduced which decides whether mutation would occur or not. If the value of this new parameter is 1 (It is picked randomly from 1 to 100), then only change is reflected down the generations, otherwise it is not. The pseudo code is as follows :
&lt;/p&gt;
Input an array containing genetic information .
Randomly generate a number (say m) from 1 to length of the array. Randomly generate other number (say p) from 1 to 100.

&lt;pre&gt; 
    if p is equal to 1 then 
        if m is 1 then
          set it to 0
        else
          set it to 1
&lt;/pre&gt;
[[#TOP]]</text>
      <sha1>3n7be5yala2gwu13bjpl1unoqieep90</sha1>
    </revision>
    <revision>
      <id>3620</id>
      <parentid>3619</parentid>
      <timestamp>2018-09-28T04:35:41Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* Implementation */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="30436">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_3 Contributors of this page]
*Week 3 Playlist: https://www.youtube.com/playlist?list=PLc_j0TNIaWxOVx_z9jAM2UB3RqYNXaoEo
=List=
List is a flexible data structure used for storing a group of data separated by comma. The elements in a list need not be of the same data type.

'''Example:'''
       List_1 = [ 1, 2,3] or 
       List_1 = [&quot;coffee&quot;, &quot;Tea&quot;, &quot;Milk&quot;] or
       List_1 = [1,&quot;coffee&quot;, &quot;Tea&quot;, 3, &quot;5&quot;]

==List Creation==
&lt;pre&gt;a) A list can be created by simply putting values (separated by comma) between square brackets as given below,
       List_1 = [1,&quot;coffee&quot;, &quot;Tea&quot;, 3, &quot;5&quot;] #this creates a list by name List_1 containing following items


Or,
(b)A List can be created from scratch and elements can be added 
        List_2 = [ ]
        List_2.append(&quot;Kala&quot;)
        List_2.append(&quot;Mala&quot;)
Here we use &quot;append&quot; ,which is a function in python that enable us to append or attach an element to a list .
Thus List_2 will now hold [&quot;Kala&quot;,&quot;Mala&quot;]
&lt;/pre&gt;
[[#TOP]]

==Operations and Methods to work with List==
&lt;pre&gt;
a = [25,30,50,90,12,13]
b = [100,300,500,200,250]
&lt;/pre&gt;
&lt;hr&gt;
&lt;table border=2&gt;
  &lt;tr&gt;
    &lt;th&gt;&lt;b&gt;Method/&lt;br&gt;Operator&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Function&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Syntax&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Output&lt;/b&gt;&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;len()&lt;/td&gt;
    &lt;td&gt;Find length of a list&lt;/td&gt;
    &lt;td&gt;len(a)&lt;/td&gt;
    &lt;td&gt;6&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;max()&lt;/td&gt;
    &lt;td&gt;Find maximum element from the list&lt;/td&gt;
    &lt;td&gt;max(a)&lt;/td&gt;
    &lt;td&gt;90&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;min()&lt;/td&gt;
    &lt;td&gt;Find minimum element from the list&lt;/td&gt;
    &lt;td&gt;min(a)&lt;/td&gt;
    &lt;td&gt;12&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sum()&lt;/td&gt;
    &lt;td&gt;Returns sum of all elements of the list&lt;/td&gt;
    &lt;td&gt;sum(a)&lt;/td&gt;
    &lt;td&gt;220&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;reverse()&lt;/td&gt;
    &lt;td&gt;Reverses the original list&lt;/td&gt;
    &lt;td&gt;a.reverse()&lt;/td&gt;
    &lt;td&gt;[13, 12, 90, 50, 30, 25]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sort()&lt;/td&gt;
    &lt;td&gt;Sorts the original list in ascending order&lt;/td&gt;
    &lt;td&gt;a.sort()&lt;/td&gt;
    &lt;td&gt;[12, 13, 25, 30, 50, 90]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sorted()&lt;/td&gt;
    &lt;td&gt;Returns the new sorted list &lt;/td&gt;
    &lt;td&gt;sorted(a)&lt;/td&gt;
    &lt;td&gt;[12, 13, 25, 30, 50, 90]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;insert()&lt;/td&gt;
    &lt;td&gt;Insert at a particular index in the list, and shifts remaining elements&lt;/td&gt;
    &lt;td&gt;a.insert(3,3)&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 3, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;append()&lt;/td&gt;
    &lt;td&gt;Adds elements/object to the end of the list&lt;/td&gt;
    &lt;td&gt;a.append(5)&lt;br&gt;a.append([10,20])&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 5]&lt;br&gt;[25, 30, 50, 90, 12, 13, [10, 20]]&lt;br&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;extend()&lt;/td&gt;
    &lt;td&gt;Adds object to the end of the list as elements not as object&lt;/td&gt;
    &lt;td&gt;a.extend([10,20])&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 10, 20]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;*&amp;nbsp;&amp;nbsp;Repeatation&lt;br&gt;operator&lt;/td&gt;
    &lt;td&gt;Repeat the list for n times and returns a new list&lt;/td&gt;
    &lt;td&gt;a*2&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 25, 30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;+ Concatenation&lt;br&gt;operator&lt;/td&gt;
    &lt;td&gt;Concatenates two lists, and returns a new list&lt;/td&gt;
    &lt;td&gt;a+b&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 100, 300, 500, 200, 250]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;index()&lt;/td&gt;
    &lt;td&gt;Finds index of a particular element in the list or not&lt;/td&gt;
    &lt;td&gt;a.index(25)&lt;br&gt;a.index(0)&lt;br&gt;&lt;/td&gt;
    &lt;td&gt;0&lt;br&gt;&lt;br&gt;ValueError: 0 is not in list&lt;br&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;in operator&lt;/td&gt;
    &lt;td&gt;Finds whether a particular element is in the list or not, returns boolean&lt;/td&gt;
    &lt;td&gt;25 in a&lt;/td&gt;
    &lt;td&gt;True&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;not in operator&lt;/td&gt;
    &lt;td&gt;Checks if element is not available in list, returns boolean&lt;/td&gt;
    &lt;td&gt;25 not in a&lt;/td&gt;
    &lt;td&gt;False&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;count()&lt;/td&gt;
    &lt;td&gt;Counts the number of occurence of an element in the list&lt;/td&gt;
    &lt;td&gt;a.count(25)&lt;/td&gt;
    &lt;td&gt;1&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;remove()&lt;/td&gt;
    &lt;td&gt;Removes an element from the list&lt;/td&gt;
    &lt;td&gt;a.remove(25)&lt;/td&gt;
    &lt;td&gt; [30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;pop()&lt;/td&gt;
    &lt;td&gt;Delete and return item at index 0&lt;/td&gt;
    &lt;td&gt;a.pop(0)&lt;/td&gt;
    &lt;td&gt;25 , a will be [30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;del&lt;/td&gt;
    &lt;td&gt;Deletes item at a particular index from the list&lt;/td&gt;
    &lt;td&gt;del a[0]&lt;/td&gt;
    &lt;td&gt;[30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;all()&lt;/td&gt;
&lt;td&gt;Returns True, if all items in list are True or it is an empty list&lt;/td&gt;
&lt;td&gt;all([True, True, True])
all([])
&lt;/td&gt;
&lt;td&gt;True&lt;br&gt;
True&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;any()&lt;/td&gt;
&lt;td&gt;Returns True, if any item in list is True else return False&lt;/td&gt;
&lt;td&gt;any([True, True, True])&lt;br&gt;
any([True, False, True])&lt;br&gt;
any([])&lt;/td&gt;
&lt;td&gt;True&lt;br&gt;False&lt;br&gt;False&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;

==Printing the List==
=== Print whole list ===
A list can be printed simply or using a ''for / while'' loop 

 print(List_2)     # To print the entire list
This code will print      
 ['Kala','Mala']     

===Print element at a particular index===
&lt;pre&gt;
Using index position
    List_2[0]     # prints 'Kala' ,i.e,the value at index position 0.
    List_2[1]     # prints 'Mala'.
&lt;/pre&gt;
=== Without using index position ===
&lt;pre&gt;
for item in List_2:   # here item is a variable used to access elements in list.
       print(item)
   This code snippet prints 
    Kala
    Mala
&lt;/pre&gt;
[[#TOP]]

==Search for a particular element in list==
Elements in a list can be searched by one of the two ways:
=== using index() function===
&lt;pre&gt;
ages1 = [11,23,12,23,45]

#if element is available in the list, index() returns the index value on which, the element is present.
print(ages1.index(45))#Output: 4

#if element is not available in the list, index() returns ''ValueError''
print(ages1.index(0))#Output: ValueError:
&lt;/pre&gt;

In programming, if such error occurs, program gets terminated. It can be solved using exception handling.
e.g.
&lt;pre&gt;
ages1 = [11,23,12,23,45]

try:
    print(ages1.index(0))
except ValueError:
    print(&quot;Exception has occured&quot;)    
    print(&quot;Element is not found in the list&quot;)

&lt;/pre&gt;
&lt;pre&gt;
'''Output: 
Exception has occured
Element is not found in the list
'''&lt;/pre&gt;
[[#TOP]]

=== using 'in' operator===
''in'' operator is used to check whether a particular element is available in the list or not.e.g.

&lt;pre&gt;
ages1 = [11,23,12,23,45]
no=11

if no in ages1:
    print(&quot;no is there in the list&quot;)
else:    
    print(&quot;no is NOT there in the list&quot;)
&lt;/pre&gt;
&lt;pre&gt;
#Output: no is there in the list
&lt;/pre&gt;


'''Number is not there in the list'''
&lt;pre&gt;
ages1 = [11,23,12,23,45]
no=15

if no in ages1:
    print(&quot;no is there in the list&quot;)
else:    
    print(&quot;no is NOT there in the list&quot;)
&lt;/pre&gt;
&lt;pre&gt;
Output: no is NOT there in the list
&lt;/pre&gt;
[[#TOP]]

==Updating the List==
The lists can be updated using ''append'' or ''insert'' function.  Append adds the element to the end of the list and Insert adds the element in the specified position.
&lt;pre&gt;
   # add the element 'Sheela' to the end of the list.
   List_2.append(&quot;Sheela&quot;)    
   print (List_2) will output 
   ['Kala', 'Mala', 'Sheela']
&lt;/pre&gt;
   &lt;pre&gt;
# add the element &quot;Bala&quot; in the list at the index 1.
   List_2.insert(1,&quot;Bala&quot;)    
   print (List_2) will output 
   ['Kala', 'Bala','Mala', 'Sheela']
&lt;/pre&gt;

=== Extend the list by adding elements of other list at end using extend()===
&lt;pre&gt;
ages = [11,23,12,23,45]
ages.extend([57,58])
print(ages)
&lt;/pre&gt;

&lt;pre&gt;
#Output: [11, 23, 12, 23, 45, 57, 58]
&lt;/pre&gt;

==== Difference between ''append and extend'' ====
Difference between append and extend can be easily understood, by the following example.

&lt;pre&gt;
appendlist = [11,23,12,23,45]
appendlist.append([57,58])

extendlist= [11,23,12,23,45]
extendlist.extend([57,58])
&lt;/pre&gt;

&lt;pre&gt;
'''Output:
[11, 23, 12, 23, 45, [57, 58]]
[11, 23, 12, 23, 45, 57, 58]'''
&lt;/pre&gt;

[[#TOP]]

==Basic Operations on List==
===Frequency of Occurrence===
list.count(object) will return the number of times the object occur in the list.
  '''Example'''
    ages = [11,23,12,23,45,43,22,24,23]
    ages.count(23) will return
    3
    ages.count(100) will return
    0

===Length of the List===
len(list) will return the length of the list ie. the number of objects in the list.
  '''Example'''
&lt;pre&gt;
    ages = [11,23,12,23,45,43,22,24,23]
    len(ages) # Output: 9
&lt;/pre&gt;

To print the objects in the list either use ''for item in list'' or ''for index in range(len(list))''
&lt;pre&gt;
    for item in ages:       
        print (item)  
        (OR)
    for index in range(len(ages)) :
        print (ages[index])
&lt;/pre&gt;

===Sort the List===
list.sort() will sort the list in ascending order
  '''Example'''
    ages = [11,23,12,23,45,43,22,24,23]
    ages.sort() 
    print (ages) 
    [11, 12, 22, 23, 23, 23, 24, 43, 45]

[[#TOP]]

===Sort the List using sorted() function===
sorted(list1) will sort the list and return a new list, it doesn't modify the original list
&lt;br&gt;'''Example: Sort in ascending order'''
&lt;pre&gt;
ages = [11,23,12,23,45,43,22,24,23]
newList=sorted(ages)
print(newList)

#Output: [11, 12, 22, 23, 23, 23, 24, 43, 45]
&lt;/pre&gt;

&lt;br&gt;'''Example: Sort in descending order'''
&lt;pre&gt;
ages = [11,23,12,23,45,43,22,24,23]
newList=sorted(ages,reverse=True)
print(newList)

#Output: [45, 43, 24, 23, 23, 23, 22, 12, 11]
&lt;/pre&gt;

===Reverse the List===
list.reverse() will reverse the original list
  '''Example'''
    ages = [11, 12, 22, 23, 23, 23, 24, 43, 45]
    ages.reverse()
    print (ages)
    [45, 43, 24, 23, 23, 23, 22, 12, 11]

Both sort() and reverse() list operation will work on numeric and alphanumeric data list.

A special use of the reverse() function is to descend a list that is sorted in ascending order.

  '''Example'''
&lt;pre&gt;
ages = [11, 12, 22, 23, 23, 23, 24, 43, 45]
ages.sort()
print(ages)
ages.reverse()
print(ages)
&lt;/pre&gt;

===Slicing===
Used to retrieve an object or objects in a range as a list  
  '''Example'''

Use ''list[index]'' to retrieve the object at the given index
&lt;pre&gt;
In [1]: student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
In [2]: student[3]     #Object at index 3.  Remember index starts at 0
Out[2]: 'Geetha'      
&lt;/pre&gt;

Use ''list[start_index : end_index + 1]'' to retrieve objects from the start_index to end_index 
&lt;pre&gt;
In [3]: student[2:4]     # Objects from index 2 to 3 as List. Note the [ and ]
Out[3]: ['Vijay', 'Geetha']   
&lt;/pre&gt;

Use ''list[:]'' to retrieve objects from the starting of the list to the end of the list. 
The default start value will be the starting index of the list (i.e. 0) and the default end value
will be the length of the list 
&lt;pre&gt;
In [4]: student[:]        # prints the entire list
Out[4]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma', 'Janani']
&lt;/pre&gt;
&lt;pre&gt;
In [5]: student[:5]       # prints the objects from the start of the list upto object at index 4
Out[5]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran']
&lt;/pre&gt;
&lt;pre&gt;
In [6]: student[2:]       # prints the objects from index 2 upto the end of the list
Out[6]: ['Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma', 'Janani']
&lt;/pre&gt;

Negative index too is available in Python. It starts from last element of the list. i.e.
&lt;pre&gt;
In [7]:student[-1]        #prints last index of list
Out[7]: 'Janani'
&lt;/pre&gt;
&lt;pre&gt;
In [8]:student[-1:-8]     #prints empty list
Out[8]: []
&lt;/pre&gt;
&lt;pre&gt;
In [9]:student[-8:-1]     #prints -8th index to -1st index elements
Out[9]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma']
&lt;/pre&gt;

[[#TOP]]

===Removing Item from list ===
----

Is used to remove a specific item from the list.

'''Example:'''
 
Use list.remove(entry/value)  Or   del list[index]    Or list.pop(index)
&lt;pre&gt;
student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
student.remove(&quot;Arun&quot;)   #This will delete item &quot;Arun&quot;
         Or    
del student[0]           # This will delete item at index 0
         Or
student.pop(0)         # This will delete and return item at index 0
print(student)    
Output: &quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
&lt;/pre&gt;

[[#TOP]]

===Delete list ===
----
Used to delete complete list

'''Example'''

Use del &lt;list name&gt;
&lt;pre&gt;
student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
del student&lt;/pre&gt;

===Concatenation of two lists===
----
''+'' is the concatenation operator which is used concatenate two lists. 
&lt;pre&gt;
ages1 = [11,23,12,23,45]
ages2 = [25, 24, 43, 47]
age=ages1+ages2
print(age)
#Output: [11, 23, 12, 23, 45, 25, 24, 43, 47]
&lt;/pre&gt;

===Repeatation of a list ===
----
''*'' is the operator to repeat a particular list.
&lt;pre&gt;
ages1 = [11,23,12,23,45]
age=ages1*5 #ages1 list is repeated 5 times and stroed in ''age'' list
print(age)

#Output: [11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45]
&lt;/pre&gt;

=== all and any for List===
all() and any() are special functions to check whether all elements in iterable is ''True'' or any element is ''True''
&lt;ol&gt;
&lt;li&gt;If all elements in a list are ''True'', '''all()''' will return ''True''&lt;/li&gt;
&lt;li&gt;If iterable is ''empty'', '''all()''' will return ''True''&lt;/li&gt;
&lt;li&gt;If iterable contains at least one ''True'', '''any()''' will return ''True''&lt;/li&gt;
&lt;li&gt;If iterable is ''empty'', '''any()''' will return ''False''&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;
lsit=[True, True, True, True]
print(all(lsit))#Output: True
print(any(lsit))#Output: True

lsit1=[True, False, True, True]
print(all(lsit1))#Output: False
print(any(lsit1))#Output: True

lsit2=[False,False,False]
print(all(lsit2))#Output: False
print(any(lsit2))#Output: False

lsit3=[]
print(all(lsit3))#Output: True
print(any(lsit3))#Output: False
&lt;/pre&gt;

==Conditional Statements==
&lt;pre&gt;Conditionals are used to check the condition and change the flow of the program 
accordingly. They are realized in programming languages through if statement. The 
syntax is as follows :
&lt;pre&gt;
         if condition : 
            statement
&lt;/pre&gt;
    '''Note:''' Do not forget indentation (inserting space/tab) in the line after the
 if condition.
    
    In case you want to execute a set of statements when a condition is true and another

set of statement when the condition is false.
&lt;pre&gt;
         if condition : 
            statement 1
         else :
            statement 2
&lt;/pre&gt;

&lt;pre&gt;    
    Multiple if-else statements can be written as follows:
         if condition_1 : 
            statement 1
         elif condition_2 : # 'elif' is short for 'else if'
            statement 2
         elif condition_3 :
            statement 3
        .
        .
         else :
            final statement
&lt;/pre&gt;

[[#TOP]]

=Loops and Conditionals : Fizzbuzz=
====Loops====
Loops are used to execute a set of repetitive statements. They are realised
through 'while' and 'for' loops in programming languages. The syntax of 'for' loop is 
as follows :
&lt;pre&gt;
for LOOPVARIABLE in SEQUENCE: 
            STATEMENTS&lt;/pre&gt;

    '''e.g.''' to print all the data from a list we can write:
&lt;pre&gt;
for item in list_name:
      print(item)&lt;/pre&gt;
    OR
&lt;pre&gt;
for index in range(len(list_name)):
      print(list_name[index])
 &lt;/pre&gt;   
    The syntax for while loop is as follows :
&lt;pre&gt;    
while BOOLEANEXPRESSION: 
     STATEMENTS
     INCREMENT/DECREMENT
&lt;/pre&gt;    
    '''e.g.''' if we want to print all numbers from 1 to 10
&lt;pre&gt;
i=1
while i&lt;=10 :
    print(i,&quot; &quot;)
    i=i+1
    &lt;/pre&gt;
 
'while' loop has indefinite iteration (run-time unknown). So, there must be loop,  break statement in it.
 Whereas 'for' loop is definite in nature (i.e. known or predictable span).&lt;br&gt;

&lt;b&gt;NOTE: Python doesn't have anything like do-while loop.&lt;/b&gt;

[[#TOP]]

==Implementation==
Here, we try to demonstrate the concept of loops and conditionals through a game called Fizzbuzz. The rules are as follows :&lt;br/&gt;
[[File:fizzBuzz.gif]]

• if input number is a multiple of ’3’ print ”Fizz”
&lt;br/&gt;
• if input number is a multiple of ’5’ print ”Buzz”
&lt;br/&gt;
• if input number is a multiple of both '3' and ’5’ print ”FizzBuzz”
&lt;br/&gt;
The pseudo code is as follows :
&lt;pre&gt;
   If input no % 3 == 0 and  input no % 5 == 0 : 
       print ”Fizzbuzz”
   else if input no % 3 == 0 : 
       print ”Fizz”
   else if input no % 5 == 0 : 
       print ”Buzz”
   else :
       print the input no
&lt;/pre&gt;
 &lt;p style=&quot;text-align:justify&quot;&gt;
The order of statements execution matters to get the desired output. The highest priority condition should be first followed by other. In fizzbuzz programming, first checking should be done for both divisibility of 3 and 5. If condition not satisfied only then it should check individually for 3 or 5. So carefully choosing the order is crucial for better programming.
Note: There is some effect of present condition statements chosen on next conditions statements. That is why in first attempt fizzbuzz programming got struck.&lt;/p&gt;

Example: 
&lt;pre&gt;
#Code to achieve the above requirement in python3.
i = int(input(&quot;Enter the number&quot;)) 
if i%3 == 0 and i%5 == 0: print(i,&quot;FizzBuzz&quot;)  
elif i%5 == 0: print(i,&quot;Buzz&quot;)
elif i%3 == 0: print(i,&quot;Fizz&quot;)
else: print(i)
&lt;/pre&gt;
Lets put the same into a loop for a range given by the user.
&lt;pre&gt;
def fizzbuzzgame(start,stop):
    for i in range(start,stop+1):
        if i%3 == 0 and i%5 == 0:
            print(i,&quot;FizzBuzz&quot;)
        elif i%5 == 0:
            print(i,&quot;Buzz&quot;)
        elif i%3 == 0:
            print(i,&quot;Fizz&quot;)
        else: print(i)

fizzbuzzgame(50,100)
&lt;/pre&gt;
&lt;pre&gt;
#Output:
1235
Buzz
======================================
555
Fizzbuzz
======================================
1235
Buzz
======================================
999
Fizz
&lt;/pre&gt;

=== Fizz Buzz game in Interactive mode with Score ===
'''By Ms. Ami Tusharkant Choksi'''
&lt;pre&gt;
def fizzbuzzgame(i):
        if i%3 == 0 and i%5 == 0:
            print(i,&quot;FizzBuzz&quot;)
            return(&quot;fzbz&quot;)
        elif i%5 == 0:
            print(i,&quot;Buzz&quot;)
            return(&quot;bz&quot;)
        elif i%3 == 0:
            print(i,&quot;Fizz&quot;)
            return(&quot;fz&quot;)
        else:
            print(i)
            return(&quot;no&quot;)

ch = 'y'
fizzbuzz=0
fizz=0
buzz=0
nothing=0
print(&quot;&quot;&quot;

 /$$$$$$$$/$$                  /$$$$$$$                            
| $$_____|__/                 | $$__  $$                           
| $$      /$$/$$$$$$$$/$$$$$$$| $$  \ $$/$$   /$$/$$$$$$$$/$$$$$$$$
| $$$$$  | $|____ /$$|____ /$$| $$$$$$$| $$  | $|____ /$$|____ /$$/
| $$__/  | $$  /$$$$/   /$$$$/| $$__  $| $$  | $$  /$$$$/   /$$$$/ 
| $$     | $$ /$$__/   /$$__/ | $$  \ $| $$  | $$ /$$__/   /$$__/  
| $$     | $$/$$$$$$$$/$$$$$$$| $$$$$$$|  $$$$$$//$$$$$$$$/$$$$$$$$
|__/     |__|________|________|_______/ \______/|________|________/
                                                                  
&quot;&quot;&quot;)   
print('''

  /$$$$$$                                
 /$$__  $$                               
| $$  \__/ /$$$$$$ /$$$$$$/$$$$  /$$$$$$ 
| $$ /$$$$|____  $| $$_  $$_  $$/$$__  $$
| $$|_  $$ /$$$$$$| $$ \ $$ \ $| $$$$$$$$
| $$  \ $$/$$__  $| $$ | $$ | $| $$_____/
|  $$$$$$|  $$$$$$| $$ | $$ | $|  $$$$$$$
 \______/ \_______|__/ |__/ |__/\_______/
                                     
''')

while(ch == 'y'):
    n=int(input(&quot;Enter a Number : &quot;))
    winLoose=fizzbuzzgame(n)
    if(winLoose == &quot;fz&quot;):
        fizz+=1
    elif(winLoose == &quot;bz&quot;):
        buzz+=1
    elif(winLoose == &quot;fzbz&quot;):
        fizzbuzz+=1
    ch=input(&quot;Do you want to continue playing the game : (y/n)&quot;)
    if(ch=='n'):
        print('Congratulations, your score is\n FizzBuzz:%d\nFizz:%d\nBuzz:%d' %
(fizzbuzz,fizz,buzz))
    
'''Sample Output:

 /$$$$$$$$/$$                  /$$$$$$$                            
| $$_____|__/                 | $$__  $$                           
| $$      /$$/$$$$$$$$/$$$$$$$| $$  \ $$/$$   /$$/$$$$$$$$/$$$$$$$$
| $$$$$  | $|____ /$$|____ /$$| $$$$$$$| $$  | $|____ /$$|____ /$$/
| $$__/  | $$  /$$$$/   /$$$$/| $$__  $| $$  | $$  /$$$$/   /$$$$/ 
| $$     | $$ /$$__/   /$$__/ | $$  \ $| $$  | $$ /$$__/   /$$__/  
| $$     | $$/$$$$$$$$/$$$$$$$| $$$$$$$|  $$$$$$//$$$$$$$$/$$$$$$$$
|__/     |__|________|________|_______/ \______/|________|________/
                                                                                                                                   

  /$$$$$$                                
 /$$__  $$                               
| $$  \__/ /$$$$$$ /$$$$$$/$$$$  /$$$$$$ 
| $$ /$$$$|____  $| $$_  $$_  $$/$$__  $$
| $$|_  $$ /$$$$$$| $$ \ $$ \ $| $$$$$$$$
| $$  \ $$/$$__  $| $$ | $$ | $| $$_____/
|  $$$$$$|  $$$$$$| $$ | $$ | $|  $$$$$$$
 \______/ \_______|__/ |__/ |__/\_______/
                                         

Enter a Number : 666
666 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 777
777 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 555
555 FizzBuzz
Do you want to continue playing the game : (y/n)y
Enter a Number : 1
1
Do you want to continue playing the game : (y/n)y
Enter a Number : 789
789 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 25
25 Buzz
Do you want to continue playing the game : (y/n)n
Congratulations, your score is

FizzBuzz:1
Fizz:3
Buzz:1

&lt;/pre&gt;

=Crowd Computing: Just Estimate=
==Wisdom of Crowds==
 &lt;p style=&quot;text-align:justify&quot;&gt;
The concept of ’Wisdom of Crowds’ was proposed by Francis Galton. A weight-judging competition was carried on at the annual show of the West of England Fat Stock and Poultry Exhibition recently held at Plymouth, A fat ox having been selected, competitors bought stamped and numbered cards, each, on which to inscribe their respective names, addresses, and estimates of what the ox would weigh after it had been slaughtered. Those who guessed most successfully received prizes. About 8oo tickets were issued to the par- ticipants. The middlemost estimate of all the estimates recorded was 1207 lbs and the actual weight of the ox was 1198 lbs.&lt;/p&gt;

==Our Experiment==
 &lt;p style=&quot;text-align:justify&quot;&gt;
The crowd had to guess the number of candies/gems in a jar. Around 75 people participated in the experiment. The actual number of gems in the jar were 375. The median of all estimates came out to be 300 and the mean of all the estimates came out to be around 396. Median underestimated and mean overestimated the actual value. So according to recent studies, Trimmed mean must be used as an aggregate measure to estimate where Wisdom of Crowds is involved.
&lt;/p&gt;
[[File:Gemsjar.jpg|center|200px|caption]]

===Trimmed Mean===
 &lt;p style=&quot;text-align:justify&quot;&gt;
In these kinds of experiments, 10% trimmed mean is usually followed. For calculating 10% trimmed mean, remove 10% smallest and 10% largest values from the sample. Calculate the mean of the sample obtained. In the above experiment, the trimmed mean came out to be around 351 which is very close to the actual value.&lt;/p&gt;

==Implementation==
Here, we try to demonstrate the concept of trimmed mean through crowd computing.
&lt;ol&gt;
&lt;li&gt; Input a list of estimates done by the crowd .&lt;/li&gt;
&lt;li&gt; Sort the list.&lt;/li&gt;
&lt;li&gt; Remove the 10% smallest values.&lt;/li&gt;
&lt;li&gt; Remove the 10% largest values.
&lt;li&gt; Calculate the mean of the new list obtained .&lt;/li&gt;&lt;/ol&gt;&lt;hr&gt;

==Data of Experiment==       
    Estimates =[1000,1010,1786,2000,1500,1500,100,120,150,150,150,170,175,180,197,200,200,200,200,200,200,220,220,220,220,234,250,250,250,250,250,250,250,250,250,263,270,275,275,286,300,
                300,300,300,300,300,300,300,320,350,350,350,400, 400,400,400,400,450,467,500,500,500,500,500,500,500,550,550,600,600,600,650,700,700,720]

    '''CODE:'''
&lt;pre&gt;
Estimates = [1000,1010,1786,2000,1500,1500,100,120,150,150,150,170,175,180,197,200,200,200,200,200,200,220,220,220,220,234,250,250,250,250,250,250,250,250,250,263,270,275,275,286,300,                300,300,300,300,300,300,300,320,350,350,350,400,400,400,400,400,450,467,500,500,500,500,500,500,500,550,550,600,600,600,650,700,700,720]
Estimates.sort()
offset = int(0.10*len(Estimates))
for i in range(offset):
       del Estimates[0]
       del Estimates[-1]
Sum = 0    
for i in range(len(Estimates)):
       Sum += Estimates[i]
Mean_Value = Sum/len(Estimates)
print(&quot;Mean : &quot;, int(Mean_Value))
#Output:
Mean :  351
&lt;/pre&gt;
&lt;hr&gt;
==Trimmed Mean for the above example== 
&lt;h3&gt;Using scipy library&lt;/h3&gt;
&lt;pre&gt;
#import scipy to use the method of trim_mean
from scipy import stats
trimMean = stats.trim_mean(Estimates, 0.1) # Trim 10% at both ends
print(&quot;Trimmed Mean : &quot;,trimMean)
#Output:
Trimmed Mean :  335.1020408163265
&lt;/pre&gt;

&lt;h3&gt;Without using scipy library&lt;/h3&gt;
&lt;pre&gt;
#Trimmed mean with 10%
p=10/100
#sorted data
data=[2, 4, 6, 7, 11, 21, 81, 90, 105, 121]
n = len(data)
#Remove elements from both end
rem=int(n*p)
newData = data[rem:-rem]
mean = 0
for i in newData:
    mean += i
mean = int(mean/len(newData))
print(&quot;Trimmed mean : &quot;,mean)
#Output: Trimmed mean :  40
&lt;/pre&gt;
[[#Top]]

=Jumbled_Words Permutations: Jumbled Words=
==What are Permutations ?==
A permutation also called ordering of selected number of elements from a list denoted by nPr here we are choosing all elements of a list and so n=r&lt;br&gt;
nPr=n!/(n-r)!&lt;br&gt; as n=r
nPn=n!&lt;br&gt; which gives all possible arrangement of elements present in a list.

 For example, permutations of list [1,2,3] are [1,2,3], [1,3,2], [2,1,3], [2,3,1], 
[3,1,2], and [3,2,1]. 
The number of permutations of a list of elements nPn is given by n!. For example, there are 2! = 2 x 1 = 2 permutations of [1,2], namely [1,2] and [2,1], and 3! = 3 x 2 x 1 = 6 permutations of [1,2,3], as mentioned above.&lt;br/&gt;
[[File:Permutations.jpg]]

==Implementation==
 &lt;p style=&quot;text-align:justify&quot;&gt;
Here, we try to demonstrate the concept of permutations through jumbled words. It is a two player game in which one person presents the other person a different permutation of the word in his mind. The other person has to guess the right word. If he guesses, the he wins otherwise he loses.&lt;/p&gt;
 Input an list of words.
 Randomly pick a word from the list of words .
 Shuffle this word and present it to the other player.
 if word guesses by the player is same as the one picked from list of w
     player wins
 else
     player loses

ALTERNATE CODE TO GENERATE THIS GAME:
&lt;pre&gt;
import random
p1=input(&quot;enter player 1 name:&quot;)
p2=input(&quot;enter player 2 name:&quot;)
l=[&quot;rainbow&quot;,&quot;computer&quot;,&quot;robot&quot;,&quot;butter&quot;,&quot;vegetable&quot;,&quot;science&quot;,&quot;correct&quot;]
c1=c2=a1=a2=f1=f2=0
k=1
i=3
def play():
    n=random.choice(l)        ##n=chooses a word from list l
    l1=[]
    for j in n:
       l1.append(j)      ##creates a list for word in n
    for t in range(len(l1)):
       p=random.choice(l1)     ##this randomly displays letters in the list
       print(p)
       l1.remove(p)          ##to avoid the repetition of a letter
    s=input(&quot;enter the word:&quot;)
    if(s==n):
        print(&quot;correct&quot;)
        return 1
    else:
        print(&quot;not correct&quot;)
        print(&quot;answer is&quot;,n)
        return 0
def stat():
     print(&quot;player 1:&quot;)
     print(&quot;score:&quot;,c1)
     print(&quot;answered:&quot;,a1)
     print(&quot;failed:&quot;,f1)
     print(&quot;.............&quot;)
     print(&quot;player 2:&quot;)
     print(&quot;score:&quot;,c2)
     print(&quot;answered:&quot;,a2)
     print(&quot;failed&quot;,f2)
     if(c1&gt;c2):
         print(p1,&quot; won over &quot;,p2)
     elif(c1==c2):
         print(&quot;draw game&quot;)
     else:
         print(p2,&quot; won over &quot;,p1) 
while(i!=4):
      if(i==3):
         if(k==1):
             print(&quot;player 1 turn&quot;)
             print(&quot;your jumbled word is:&quot;)
             k=k+1
             m=play()
             if(m==1):      ##if guessed answer is correct,then score and no.of answered count will be increased
                c1+=1
                a1+=1
             else:
                f1+=1       ##else count of no.of failed to answered will be incremented
         else:
             print(&quot;player 2 turn&quot;)
             print(&quot;your jumbled word is:&quot;)
             k=k-1
             m=play()
             if(m==1):
                c2=c2+1
                a2=a2+1
             else:
                f2=f2+1
       if(i==2):
             print(&quot;present status&quot;)
             stat()
       i=int(input(&quot;enter your choice  1.stop 2.status 3.continue&quot;))
       if(i==1):
             stat()
             i=i+3
&lt;/pre&gt;
&lt;hr&gt;
=== JumbledWord Simple Logic, In Short ===
[[File:jumbledWord.gif]]
&lt;hr&gt;
'''Logic to create a Jumbled Word'''
&lt;hr&gt;
&lt;pre&gt;
#Get Jumbled Word and print it Horizontally
import random

def getJumbledWord(b):
    jumble=''
    l1 = [ b[i] for i in range(0, len(b)) ]
    for t in range(len(l1)):
       p=random.choice(l1)     ##this randomly gets letters from the list      
       jumble=jumble+p       
       l1.remove(p)
    return jumble

b=input(&quot;Enter a word to make it jumbled : &quot;)
print(&quot;Jumbled Word : &quot;, getJumbledWord(b))
&lt;/pre&gt;
&lt;hr&gt;
'''Another Logic to create a Jumbled Word'''
&lt;hr&gt;
&lt;pre&gt;
b=input(&quot;Enter a word to make it jumbled : &quot;)

def getJumbledWord1(b):
    l1 = [ b[i] for i in range(0, len(b)) ]
    random.shuffle(l1)
    str1 = ''.join(l1)
    return str1

print(&quot;Jumbled Word : &quot;, getJumbledWord1(b))
&lt;/pre&gt;

====Sample Output:====
&lt;pre&gt;
---- Output1 
Enter a word to make it jumbled : butter
Jumbled Word :  tbture

---- Output2 
Enter a word to make it jumbled : petriotism
Jumbled Word :  pittrosime
&lt;/pre&gt;

=Theory of Evolution=

== What is Evolution ? ==
Evolution is the change in heritable characteristics over successive generations. The theory of evolution explains that DNA, which acts as a carrier of genetic information from one generation to other, tends to change or mutate occasionally. These changes are reflected in next generations to come. This is how life has evolved on earth from bacteria to human beings.&lt;br&gt;
[[File:Evolution.png|500px]]

== Implementation ==
 &lt;p style=&quot;text-align:justify&quot;&gt;
An array representing DNA is stored in a file. As genes are forms of DNA, they contain information to be transferred to forthcoming generations. Assume that information is in the form of bits (in the form of 0s and 1s). A number is picked randomly from 1 to the size of the array. A new parameter has been introduced which decides whether mutation would occur or not. If the value of this new parameter is 1 (It is picked randomly from 1 to 100), then only change is reflected down the generations, otherwise it is not. The pseudo code is as follows :
&lt;/p&gt;
Input an array containing genetic information .
Randomly generate a number (say m) from 1 to length of the array. Randomly generate other number (say p) from 1 to 100.

&lt;pre&gt; 
    if p is equal to 1 then 
        if m is 1 then
          set it to 0
        else
          set it to 1
&lt;/pre&gt;
[[#TOP]]</text>
      <sha1>ie3dod928llwk61mg8tc85oo212uxyl</sha1>
    </revision>
    <revision>
      <id>3621</id>
      <parentid>3620</parentid>
      <timestamp>2018-09-28T04:37:46Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* JumbledWord Simple Logic, In Short */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="30450">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_3 Contributors of this page]
*Week 3 Playlist: https://www.youtube.com/playlist?list=PLc_j0TNIaWxOVx_z9jAM2UB3RqYNXaoEo
=List=
List is a flexible data structure used for storing a group of data separated by comma. The elements in a list need not be of the same data type.

'''Example:'''
       List_1 = [ 1, 2,3] or 
       List_1 = [&quot;coffee&quot;, &quot;Tea&quot;, &quot;Milk&quot;] or
       List_1 = [1,&quot;coffee&quot;, &quot;Tea&quot;, 3, &quot;5&quot;]

==List Creation==
&lt;pre&gt;a) A list can be created by simply putting values (separated by comma) between square brackets as given below,
       List_1 = [1,&quot;coffee&quot;, &quot;Tea&quot;, 3, &quot;5&quot;] #this creates a list by name List_1 containing following items


Or,
(b)A List can be created from scratch and elements can be added 
        List_2 = [ ]
        List_2.append(&quot;Kala&quot;)
        List_2.append(&quot;Mala&quot;)
Here we use &quot;append&quot; ,which is a function in python that enable us to append or attach an element to a list .
Thus List_2 will now hold [&quot;Kala&quot;,&quot;Mala&quot;]
&lt;/pre&gt;
[[#TOP]]

==Operations and Methods to work with List==
&lt;pre&gt;
a = [25,30,50,90,12,13]
b = [100,300,500,200,250]
&lt;/pre&gt;
&lt;hr&gt;
&lt;table border=2&gt;
  &lt;tr&gt;
    &lt;th&gt;&lt;b&gt;Method/&lt;br&gt;Operator&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Function&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Syntax&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Output&lt;/b&gt;&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;len()&lt;/td&gt;
    &lt;td&gt;Find length of a list&lt;/td&gt;
    &lt;td&gt;len(a)&lt;/td&gt;
    &lt;td&gt;6&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;max()&lt;/td&gt;
    &lt;td&gt;Find maximum element from the list&lt;/td&gt;
    &lt;td&gt;max(a)&lt;/td&gt;
    &lt;td&gt;90&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;min()&lt;/td&gt;
    &lt;td&gt;Find minimum element from the list&lt;/td&gt;
    &lt;td&gt;min(a)&lt;/td&gt;
    &lt;td&gt;12&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sum()&lt;/td&gt;
    &lt;td&gt;Returns sum of all elements of the list&lt;/td&gt;
    &lt;td&gt;sum(a)&lt;/td&gt;
    &lt;td&gt;220&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;reverse()&lt;/td&gt;
    &lt;td&gt;Reverses the original list&lt;/td&gt;
    &lt;td&gt;a.reverse()&lt;/td&gt;
    &lt;td&gt;[13, 12, 90, 50, 30, 25]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sort()&lt;/td&gt;
    &lt;td&gt;Sorts the original list in ascending order&lt;/td&gt;
    &lt;td&gt;a.sort()&lt;/td&gt;
    &lt;td&gt;[12, 13, 25, 30, 50, 90]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sorted()&lt;/td&gt;
    &lt;td&gt;Returns the new sorted list &lt;/td&gt;
    &lt;td&gt;sorted(a)&lt;/td&gt;
    &lt;td&gt;[12, 13, 25, 30, 50, 90]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;insert()&lt;/td&gt;
    &lt;td&gt;Insert at a particular index in the list, and shifts remaining elements&lt;/td&gt;
    &lt;td&gt;a.insert(3,3)&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 3, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;append()&lt;/td&gt;
    &lt;td&gt;Adds elements/object to the end of the list&lt;/td&gt;
    &lt;td&gt;a.append(5)&lt;br&gt;a.append([10,20])&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 5]&lt;br&gt;[25, 30, 50, 90, 12, 13, [10, 20]]&lt;br&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;extend()&lt;/td&gt;
    &lt;td&gt;Adds object to the end of the list as elements not as object&lt;/td&gt;
    &lt;td&gt;a.extend([10,20])&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 10, 20]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;*&amp;nbsp;&amp;nbsp;Repeatation&lt;br&gt;operator&lt;/td&gt;
    &lt;td&gt;Repeat the list for n times and returns a new list&lt;/td&gt;
    &lt;td&gt;a*2&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 25, 30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;+ Concatenation&lt;br&gt;operator&lt;/td&gt;
    &lt;td&gt;Concatenates two lists, and returns a new list&lt;/td&gt;
    &lt;td&gt;a+b&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 100, 300, 500, 200, 250]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;index()&lt;/td&gt;
    &lt;td&gt;Finds index of a particular element in the list or not&lt;/td&gt;
    &lt;td&gt;a.index(25)&lt;br&gt;a.index(0)&lt;br&gt;&lt;/td&gt;
    &lt;td&gt;0&lt;br&gt;&lt;br&gt;ValueError: 0 is not in list&lt;br&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;in operator&lt;/td&gt;
    &lt;td&gt;Finds whether a particular element is in the list or not, returns boolean&lt;/td&gt;
    &lt;td&gt;25 in a&lt;/td&gt;
    &lt;td&gt;True&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;not in operator&lt;/td&gt;
    &lt;td&gt;Checks if element is not available in list, returns boolean&lt;/td&gt;
    &lt;td&gt;25 not in a&lt;/td&gt;
    &lt;td&gt;False&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;count()&lt;/td&gt;
    &lt;td&gt;Counts the number of occurence of an element in the list&lt;/td&gt;
    &lt;td&gt;a.count(25)&lt;/td&gt;
    &lt;td&gt;1&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;remove()&lt;/td&gt;
    &lt;td&gt;Removes an element from the list&lt;/td&gt;
    &lt;td&gt;a.remove(25)&lt;/td&gt;
    &lt;td&gt; [30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;pop()&lt;/td&gt;
    &lt;td&gt;Delete and return item at index 0&lt;/td&gt;
    &lt;td&gt;a.pop(0)&lt;/td&gt;
    &lt;td&gt;25 , a will be [30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;del&lt;/td&gt;
    &lt;td&gt;Deletes item at a particular index from the list&lt;/td&gt;
    &lt;td&gt;del a[0]&lt;/td&gt;
    &lt;td&gt;[30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;all()&lt;/td&gt;
&lt;td&gt;Returns True, if all items in list are True or it is an empty list&lt;/td&gt;
&lt;td&gt;all([True, True, True])
all([])
&lt;/td&gt;
&lt;td&gt;True&lt;br&gt;
True&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;any()&lt;/td&gt;
&lt;td&gt;Returns True, if any item in list is True else return False&lt;/td&gt;
&lt;td&gt;any([True, True, True])&lt;br&gt;
any([True, False, True])&lt;br&gt;
any([])&lt;/td&gt;
&lt;td&gt;True&lt;br&gt;False&lt;br&gt;False&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;

==Printing the List==
=== Print whole list ===
A list can be printed simply or using a ''for / while'' loop 

 print(List_2)     # To print the entire list
This code will print      
 ['Kala','Mala']     

===Print element at a particular index===
&lt;pre&gt;
Using index position
    List_2[0]     # prints 'Kala' ,i.e,the value at index position 0.
    List_2[1]     # prints 'Mala'.
&lt;/pre&gt;
=== Without using index position ===
&lt;pre&gt;
for item in List_2:   # here item is a variable used to access elements in list.
       print(item)
   This code snippet prints 
    Kala
    Mala
&lt;/pre&gt;
[[#TOP]]

==Search for a particular element in list==
Elements in a list can be searched by one of the two ways:
=== using index() function===
&lt;pre&gt;
ages1 = [11,23,12,23,45]

#if element is available in the list, index() returns the index value on which, the element is present.
print(ages1.index(45))#Output: 4

#if element is not available in the list, index() returns ''ValueError''
print(ages1.index(0))#Output: ValueError:
&lt;/pre&gt;

In programming, if such error occurs, program gets terminated. It can be solved using exception handling.
e.g.
&lt;pre&gt;
ages1 = [11,23,12,23,45]

try:
    print(ages1.index(0))
except ValueError:
    print(&quot;Exception has occured&quot;)    
    print(&quot;Element is not found in the list&quot;)

&lt;/pre&gt;
&lt;pre&gt;
'''Output: 
Exception has occured
Element is not found in the list
'''&lt;/pre&gt;
[[#TOP]]

=== using 'in' operator===
''in'' operator is used to check whether a particular element is available in the list or not.e.g.

&lt;pre&gt;
ages1 = [11,23,12,23,45]
no=11

if no in ages1:
    print(&quot;no is there in the list&quot;)
else:    
    print(&quot;no is NOT there in the list&quot;)
&lt;/pre&gt;
&lt;pre&gt;
#Output: no is there in the list
&lt;/pre&gt;


'''Number is not there in the list'''
&lt;pre&gt;
ages1 = [11,23,12,23,45]
no=15

if no in ages1:
    print(&quot;no is there in the list&quot;)
else:    
    print(&quot;no is NOT there in the list&quot;)
&lt;/pre&gt;
&lt;pre&gt;
Output: no is NOT there in the list
&lt;/pre&gt;
[[#TOP]]

==Updating the List==
The lists can be updated using ''append'' or ''insert'' function.  Append adds the element to the end of the list and Insert adds the element in the specified position.
&lt;pre&gt;
   # add the element 'Sheela' to the end of the list.
   List_2.append(&quot;Sheela&quot;)    
   print (List_2) will output 
   ['Kala', 'Mala', 'Sheela']
&lt;/pre&gt;
   &lt;pre&gt;
# add the element &quot;Bala&quot; in the list at the index 1.
   List_2.insert(1,&quot;Bala&quot;)    
   print (List_2) will output 
   ['Kala', 'Bala','Mala', 'Sheela']
&lt;/pre&gt;

=== Extend the list by adding elements of other list at end using extend()===
&lt;pre&gt;
ages = [11,23,12,23,45]
ages.extend([57,58])
print(ages)
&lt;/pre&gt;

&lt;pre&gt;
#Output: [11, 23, 12, 23, 45, 57, 58]
&lt;/pre&gt;

==== Difference between ''append and extend'' ====
Difference between append and extend can be easily understood, by the following example.

&lt;pre&gt;
appendlist = [11,23,12,23,45]
appendlist.append([57,58])

extendlist= [11,23,12,23,45]
extendlist.extend([57,58])
&lt;/pre&gt;

&lt;pre&gt;
'''Output:
[11, 23, 12, 23, 45, [57, 58]]
[11, 23, 12, 23, 45, 57, 58]'''
&lt;/pre&gt;

[[#TOP]]

==Basic Operations on List==
===Frequency of Occurrence===
list.count(object) will return the number of times the object occur in the list.
  '''Example'''
    ages = [11,23,12,23,45,43,22,24,23]
    ages.count(23) will return
    3
    ages.count(100) will return
    0

===Length of the List===
len(list) will return the length of the list ie. the number of objects in the list.
  '''Example'''
&lt;pre&gt;
    ages = [11,23,12,23,45,43,22,24,23]
    len(ages) # Output: 9
&lt;/pre&gt;

To print the objects in the list either use ''for item in list'' or ''for index in range(len(list))''
&lt;pre&gt;
    for item in ages:       
        print (item)  
        (OR)
    for index in range(len(ages)) :
        print (ages[index])
&lt;/pre&gt;

===Sort the List===
list.sort() will sort the list in ascending order
  '''Example'''
    ages = [11,23,12,23,45,43,22,24,23]
    ages.sort() 
    print (ages) 
    [11, 12, 22, 23, 23, 23, 24, 43, 45]

[[#TOP]]

===Sort the List using sorted() function===
sorted(list1) will sort the list and return a new list, it doesn't modify the original list
&lt;br&gt;'''Example: Sort in ascending order'''
&lt;pre&gt;
ages = [11,23,12,23,45,43,22,24,23]
newList=sorted(ages)
print(newList)

#Output: [11, 12, 22, 23, 23, 23, 24, 43, 45]
&lt;/pre&gt;

&lt;br&gt;'''Example: Sort in descending order'''
&lt;pre&gt;
ages = [11,23,12,23,45,43,22,24,23]
newList=sorted(ages,reverse=True)
print(newList)

#Output: [45, 43, 24, 23, 23, 23, 22, 12, 11]
&lt;/pre&gt;

===Reverse the List===
list.reverse() will reverse the original list
  '''Example'''
    ages = [11, 12, 22, 23, 23, 23, 24, 43, 45]
    ages.reverse()
    print (ages)
    [45, 43, 24, 23, 23, 23, 22, 12, 11]

Both sort() and reverse() list operation will work on numeric and alphanumeric data list.

A special use of the reverse() function is to descend a list that is sorted in ascending order.

  '''Example'''
&lt;pre&gt;
ages = [11, 12, 22, 23, 23, 23, 24, 43, 45]
ages.sort()
print(ages)
ages.reverse()
print(ages)
&lt;/pre&gt;

===Slicing===
Used to retrieve an object or objects in a range as a list  
  '''Example'''

Use ''list[index]'' to retrieve the object at the given index
&lt;pre&gt;
In [1]: student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
In [2]: student[3]     #Object at index 3.  Remember index starts at 0
Out[2]: 'Geetha'      
&lt;/pre&gt;

Use ''list[start_index : end_index + 1]'' to retrieve objects from the start_index to end_index 
&lt;pre&gt;
In [3]: student[2:4]     # Objects from index 2 to 3 as List. Note the [ and ]
Out[3]: ['Vijay', 'Geetha']   
&lt;/pre&gt;

Use ''list[:]'' to retrieve objects from the starting of the list to the end of the list. 
The default start value will be the starting index of the list (i.e. 0) and the default end value
will be the length of the list 
&lt;pre&gt;
In [4]: student[:]        # prints the entire list
Out[4]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma', 'Janani']
&lt;/pre&gt;
&lt;pre&gt;
In [5]: student[:5]       # prints the objects from the start of the list upto object at index 4
Out[5]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran']
&lt;/pre&gt;
&lt;pre&gt;
In [6]: student[2:]       # prints the objects from index 2 upto the end of the list
Out[6]: ['Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma', 'Janani']
&lt;/pre&gt;

Negative index too is available in Python. It starts from last element of the list. i.e.
&lt;pre&gt;
In [7]:student[-1]        #prints last index of list
Out[7]: 'Janani'
&lt;/pre&gt;
&lt;pre&gt;
In [8]:student[-1:-8]     #prints empty list
Out[8]: []
&lt;/pre&gt;
&lt;pre&gt;
In [9]:student[-8:-1]     #prints -8th index to -1st index elements
Out[9]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma']
&lt;/pre&gt;

[[#TOP]]

===Removing Item from list ===
----

Is used to remove a specific item from the list.

'''Example:'''
 
Use list.remove(entry/value)  Or   del list[index]    Or list.pop(index)
&lt;pre&gt;
student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
student.remove(&quot;Arun&quot;)   #This will delete item &quot;Arun&quot;
         Or    
del student[0]           # This will delete item at index 0
         Or
student.pop(0)         # This will delete and return item at index 0
print(student)    
Output: &quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
&lt;/pre&gt;

[[#TOP]]

===Delete list ===
----
Used to delete complete list

'''Example'''

Use del &lt;list name&gt;
&lt;pre&gt;
student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
del student&lt;/pre&gt;

===Concatenation of two lists===
----
''+'' is the concatenation operator which is used concatenate two lists. 
&lt;pre&gt;
ages1 = [11,23,12,23,45]
ages2 = [25, 24, 43, 47]
age=ages1+ages2
print(age)
#Output: [11, 23, 12, 23, 45, 25, 24, 43, 47]
&lt;/pre&gt;

===Repeatation of a list ===
----
''*'' is the operator to repeat a particular list.
&lt;pre&gt;
ages1 = [11,23,12,23,45]
age=ages1*5 #ages1 list is repeated 5 times and stroed in ''age'' list
print(age)

#Output: [11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45]
&lt;/pre&gt;

=== all and any for List===
all() and any() are special functions to check whether all elements in iterable is ''True'' or any element is ''True''
&lt;ol&gt;
&lt;li&gt;If all elements in a list are ''True'', '''all()''' will return ''True''&lt;/li&gt;
&lt;li&gt;If iterable is ''empty'', '''all()''' will return ''True''&lt;/li&gt;
&lt;li&gt;If iterable contains at least one ''True'', '''any()''' will return ''True''&lt;/li&gt;
&lt;li&gt;If iterable is ''empty'', '''any()''' will return ''False''&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;
lsit=[True, True, True, True]
print(all(lsit))#Output: True
print(any(lsit))#Output: True

lsit1=[True, False, True, True]
print(all(lsit1))#Output: False
print(any(lsit1))#Output: True

lsit2=[False,False,False]
print(all(lsit2))#Output: False
print(any(lsit2))#Output: False

lsit3=[]
print(all(lsit3))#Output: True
print(any(lsit3))#Output: False
&lt;/pre&gt;

==Conditional Statements==
&lt;pre&gt;Conditionals are used to check the condition and change the flow of the program 
accordingly. They are realized in programming languages through if statement. The 
syntax is as follows :
&lt;pre&gt;
         if condition : 
            statement
&lt;/pre&gt;
    '''Note:''' Do not forget indentation (inserting space/tab) in the line after the
 if condition.
    
    In case you want to execute a set of statements when a condition is true and another

set of statement when the condition is false.
&lt;pre&gt;
         if condition : 
            statement 1
         else :
            statement 2
&lt;/pre&gt;

&lt;pre&gt;    
    Multiple if-else statements can be written as follows:
         if condition_1 : 
            statement 1
         elif condition_2 : # 'elif' is short for 'else if'
            statement 2
         elif condition_3 :
            statement 3
        .
        .
         else :
            final statement
&lt;/pre&gt;

[[#TOP]]

=Loops and Conditionals : Fizzbuzz=
====Loops====
Loops are used to execute a set of repetitive statements. They are realised
through 'while' and 'for' loops in programming languages. The syntax of 'for' loop is 
as follows :
&lt;pre&gt;
for LOOPVARIABLE in SEQUENCE: 
            STATEMENTS&lt;/pre&gt;

    '''e.g.''' to print all the data from a list we can write:
&lt;pre&gt;
for item in list_name:
      print(item)&lt;/pre&gt;
    OR
&lt;pre&gt;
for index in range(len(list_name)):
      print(list_name[index])
 &lt;/pre&gt;   
    The syntax for while loop is as follows :
&lt;pre&gt;    
while BOOLEANEXPRESSION: 
     STATEMENTS
     INCREMENT/DECREMENT
&lt;/pre&gt;    
    '''e.g.''' if we want to print all numbers from 1 to 10
&lt;pre&gt;
i=1
while i&lt;=10 :
    print(i,&quot; &quot;)
    i=i+1
    &lt;/pre&gt;
 
'while' loop has indefinite iteration (run-time unknown). So, there must be loop,  break statement in it.
 Whereas 'for' loop is definite in nature (i.e. known or predictable span).&lt;br&gt;

&lt;b&gt;NOTE: Python doesn't have anything like do-while loop.&lt;/b&gt;

[[#TOP]]

==Implementation==
Here, we try to demonstrate the concept of loops and conditionals through a game called Fizzbuzz. The rules are as follows :&lt;br/&gt;
[[File:fizzBuzz.gif]]

• if input number is a multiple of ’3’ print ”Fizz”
&lt;br/&gt;
• if input number is a multiple of ’5’ print ”Buzz”
&lt;br/&gt;
• if input number is a multiple of both '3' and ’5’ print ”FizzBuzz”
&lt;br/&gt;
The pseudo code is as follows :
&lt;pre&gt;
   If input no % 3 == 0 and  input no % 5 == 0 : 
       print ”Fizzbuzz”
   else if input no % 3 == 0 : 
       print ”Fizz”
   else if input no % 5 == 0 : 
       print ”Buzz”
   else :
       print the input no
&lt;/pre&gt;
 &lt;p style=&quot;text-align:justify&quot;&gt;
The order of statements execution matters to get the desired output. The highest priority condition should be first followed by other. In fizzbuzz programming, first checking should be done for both divisibility of 3 and 5. If condition not satisfied only then it should check individually for 3 or 5. So carefully choosing the order is crucial for better programming.
Note: There is some effect of present condition statements chosen on next conditions statements. That is why in first attempt fizzbuzz programming got struck.&lt;/p&gt;

Example: 
&lt;pre&gt;
#Code to achieve the above requirement in python3.
i = int(input(&quot;Enter the number&quot;)) 
if i%3 == 0 and i%5 == 0: print(i,&quot;FizzBuzz&quot;)  
elif i%5 == 0: print(i,&quot;Buzz&quot;)
elif i%3 == 0: print(i,&quot;Fizz&quot;)
else: print(i)
&lt;/pre&gt;
Lets put the same into a loop for a range given by the user.
&lt;pre&gt;
def fizzbuzzgame(start,stop):
    for i in range(start,stop+1):
        if i%3 == 0 and i%5 == 0:
            print(i,&quot;FizzBuzz&quot;)
        elif i%5 == 0:
            print(i,&quot;Buzz&quot;)
        elif i%3 == 0:
            print(i,&quot;Fizz&quot;)
        else: print(i)

fizzbuzzgame(50,100)
&lt;/pre&gt;
&lt;pre&gt;
#Output:
1235
Buzz
======================================
555
Fizzbuzz
======================================
1235
Buzz
======================================
999
Fizz
&lt;/pre&gt;

=== Fizz Buzz game in Interactive mode with Score ===
'''By Ms. Ami Tusharkant Choksi'''
&lt;pre&gt;
def fizzbuzzgame(i):
        if i%3 == 0 and i%5 == 0:
            print(i,&quot;FizzBuzz&quot;)
            return(&quot;fzbz&quot;)
        elif i%5 == 0:
            print(i,&quot;Buzz&quot;)
            return(&quot;bz&quot;)
        elif i%3 == 0:
            print(i,&quot;Fizz&quot;)
            return(&quot;fz&quot;)
        else:
            print(i)
            return(&quot;no&quot;)

ch = 'y'
fizzbuzz=0
fizz=0
buzz=0
nothing=0
print(&quot;&quot;&quot;

 /$$$$$$$$/$$                  /$$$$$$$                            
| $$_____|__/                 | $$__  $$                           
| $$      /$$/$$$$$$$$/$$$$$$$| $$  \ $$/$$   /$$/$$$$$$$$/$$$$$$$$
| $$$$$  | $|____ /$$|____ /$$| $$$$$$$| $$  | $|____ /$$|____ /$$/
| $$__/  | $$  /$$$$/   /$$$$/| $$__  $| $$  | $$  /$$$$/   /$$$$/ 
| $$     | $$ /$$__/   /$$__/ | $$  \ $| $$  | $$ /$$__/   /$$__/  
| $$     | $$/$$$$$$$$/$$$$$$$| $$$$$$$|  $$$$$$//$$$$$$$$/$$$$$$$$
|__/     |__|________|________|_______/ \______/|________|________/
                                                                  
&quot;&quot;&quot;)   
print('''

  /$$$$$$                                
 /$$__  $$                               
| $$  \__/ /$$$$$$ /$$$$$$/$$$$  /$$$$$$ 
| $$ /$$$$|____  $| $$_  $$_  $$/$$__  $$
| $$|_  $$ /$$$$$$| $$ \ $$ \ $| $$$$$$$$
| $$  \ $$/$$__  $| $$ | $$ | $| $$_____/
|  $$$$$$|  $$$$$$| $$ | $$ | $|  $$$$$$$
 \______/ \_______|__/ |__/ |__/\_______/
                                     
''')

while(ch == 'y'):
    n=int(input(&quot;Enter a Number : &quot;))
    winLoose=fizzbuzzgame(n)
    if(winLoose == &quot;fz&quot;):
        fizz+=1
    elif(winLoose == &quot;bz&quot;):
        buzz+=1
    elif(winLoose == &quot;fzbz&quot;):
        fizzbuzz+=1
    ch=input(&quot;Do you want to continue playing the game : (y/n)&quot;)
    if(ch=='n'):
        print('Congratulations, your score is\n FizzBuzz:%d\nFizz:%d\nBuzz:%d' %
(fizzbuzz,fizz,buzz))
    
'''Sample Output:

 /$$$$$$$$/$$                  /$$$$$$$                            
| $$_____|__/                 | $$__  $$                           
| $$      /$$/$$$$$$$$/$$$$$$$| $$  \ $$/$$   /$$/$$$$$$$$/$$$$$$$$
| $$$$$  | $|____ /$$|____ /$$| $$$$$$$| $$  | $|____ /$$|____ /$$/
| $$__/  | $$  /$$$$/   /$$$$/| $$__  $| $$  | $$  /$$$$/   /$$$$/ 
| $$     | $$ /$$__/   /$$__/ | $$  \ $| $$  | $$ /$$__/   /$$__/  
| $$     | $$/$$$$$$$$/$$$$$$$| $$$$$$$|  $$$$$$//$$$$$$$$/$$$$$$$$
|__/     |__|________|________|_______/ \______/|________|________/
                                                                                                                                   

  /$$$$$$                                
 /$$__  $$                               
| $$  \__/ /$$$$$$ /$$$$$$/$$$$  /$$$$$$ 
| $$ /$$$$|____  $| $$_  $$_  $$/$$__  $$
| $$|_  $$ /$$$$$$| $$ \ $$ \ $| $$$$$$$$
| $$  \ $$/$$__  $| $$ | $$ | $| $$_____/
|  $$$$$$|  $$$$$$| $$ | $$ | $|  $$$$$$$
 \______/ \_______|__/ |__/ |__/\_______/
                                         

Enter a Number : 666
666 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 777
777 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 555
555 FizzBuzz
Do you want to continue playing the game : (y/n)y
Enter a Number : 1
1
Do you want to continue playing the game : (y/n)y
Enter a Number : 789
789 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 25
25 Buzz
Do you want to continue playing the game : (y/n)n
Congratulations, your score is

FizzBuzz:1
Fizz:3
Buzz:1

&lt;/pre&gt;

=Crowd Computing: Just Estimate=
==Wisdom of Crowds==
 &lt;p style=&quot;text-align:justify&quot;&gt;
The concept of ’Wisdom of Crowds’ was proposed by Francis Galton. A weight-judging competition was carried on at the annual show of the West of England Fat Stock and Poultry Exhibition recently held at Plymouth, A fat ox having been selected, competitors bought stamped and numbered cards, each, on which to inscribe their respective names, addresses, and estimates of what the ox would weigh after it had been slaughtered. Those who guessed most successfully received prizes. About 8oo tickets were issued to the par- ticipants. The middlemost estimate of all the estimates recorded was 1207 lbs and the actual weight of the ox was 1198 lbs.&lt;/p&gt;

==Our Experiment==
 &lt;p style=&quot;text-align:justify&quot;&gt;
The crowd had to guess the number of candies/gems in a jar. Around 75 people participated in the experiment. The actual number of gems in the jar were 375. The median of all estimates came out to be 300 and the mean of all the estimates came out to be around 396. Median underestimated and mean overestimated the actual value. So according to recent studies, Trimmed mean must be used as an aggregate measure to estimate where Wisdom of Crowds is involved.
&lt;/p&gt;
[[File:Gemsjar.jpg|center|200px|caption]]

===Trimmed Mean===
 &lt;p style=&quot;text-align:justify&quot;&gt;
In these kinds of experiments, 10% trimmed mean is usually followed. For calculating 10% trimmed mean, remove 10% smallest and 10% largest values from the sample. Calculate the mean of the sample obtained. In the above experiment, the trimmed mean came out to be around 351 which is very close to the actual value.&lt;/p&gt;

==Implementation==
Here, we try to demonstrate the concept of trimmed mean through crowd computing.
&lt;ol&gt;
&lt;li&gt; Input a list of estimates done by the crowd .&lt;/li&gt;
&lt;li&gt; Sort the list.&lt;/li&gt;
&lt;li&gt; Remove the 10% smallest values.&lt;/li&gt;
&lt;li&gt; Remove the 10% largest values.
&lt;li&gt; Calculate the mean of the new list obtained .&lt;/li&gt;&lt;/ol&gt;&lt;hr&gt;

==Data of Experiment==       
    Estimates =[1000,1010,1786,2000,1500,1500,100,120,150,150,150,170,175,180,197,200,200,200,200,200,200,220,220,220,220,234,250,250,250,250,250,250,250,250,250,263,270,275,275,286,300,
                300,300,300,300,300,300,300,320,350,350,350,400, 400,400,400,400,450,467,500,500,500,500,500,500,500,550,550,600,600,600,650,700,700,720]

    '''CODE:'''
&lt;pre&gt;
Estimates = [1000,1010,1786,2000,1500,1500,100,120,150,150,150,170,175,180,197,200,200,200,200,200,200,220,220,220,220,234,250,250,250,250,250,250,250,250,250,263,270,275,275,286,300,                300,300,300,300,300,300,300,320,350,350,350,400,400,400,400,400,450,467,500,500,500,500,500,500,500,550,550,600,600,600,650,700,700,720]
Estimates.sort()
offset = int(0.10*len(Estimates))
for i in range(offset):
       del Estimates[0]
       del Estimates[-1]
Sum = 0    
for i in range(len(Estimates)):
       Sum += Estimates[i]
Mean_Value = Sum/len(Estimates)
print(&quot;Mean : &quot;, int(Mean_Value))
#Output:
Mean :  351
&lt;/pre&gt;
&lt;hr&gt;
==Trimmed Mean for the above example== 
&lt;h3&gt;Using scipy library&lt;/h3&gt;
&lt;pre&gt;
#import scipy to use the method of trim_mean
from scipy import stats
trimMean = stats.trim_mean(Estimates, 0.1) # Trim 10% at both ends
print(&quot;Trimmed Mean : &quot;,trimMean)
#Output:
Trimmed Mean :  335.1020408163265
&lt;/pre&gt;

&lt;h3&gt;Without using scipy library&lt;/h3&gt;
&lt;pre&gt;
#Trimmed mean with 10%
p=10/100
#sorted data
data=[2, 4, 6, 7, 11, 21, 81, 90, 105, 121]
n = len(data)
#Remove elements from both end
rem=int(n*p)
newData = data[rem:-rem]
mean = 0
for i in newData:
    mean += i
mean = int(mean/len(newData))
print(&quot;Trimmed mean : &quot;,mean)
#Output: Trimmed mean :  40
&lt;/pre&gt;
[[#Top]]

=Jumbled_Words Permutations: Jumbled Words=
==What are Permutations ?==
A permutation also called ordering of selected number of elements from a list denoted by nPr here we are choosing all elements of a list and so n=r&lt;br&gt;
nPr=n!/(n-r)!&lt;br&gt; as n=r
nPn=n!&lt;br&gt; which gives all possible arrangement of elements present in a list.

 For example, permutations of list [1,2,3] are [1,2,3], [1,3,2], [2,1,3], [2,3,1], 
[3,1,2], and [3,2,1]. 
The number of permutations of a list of elements nPn is given by n!. For example, there are 2! = 2 x 1 = 2 permutations of [1,2], namely [1,2] and [2,1], and 3! = 3 x 2 x 1 = 6 permutations of [1,2,3], as mentioned above.&lt;br/&gt;
[[File:Permutations.jpg]]

==Implementation==
 &lt;p style=&quot;text-align:justify&quot;&gt;
Here, we try to demonstrate the concept of permutations through jumbled words. It is a two player game in which one person presents the other person a different permutation of the word in his mind. The other person has to guess the right word. If he guesses, the he wins otherwise he loses.&lt;/p&gt;
 Input an list of words.
 Randomly pick a word from the list of words .
 Shuffle this word and present it to the other player.
 if word guesses by the player is same as the one picked from list of w
     player wins
 else
     player loses

ALTERNATE CODE TO GENERATE THIS GAME:
&lt;pre&gt;
import random
p1=input(&quot;enter player 1 name:&quot;)
p2=input(&quot;enter player 2 name:&quot;)
l=[&quot;rainbow&quot;,&quot;computer&quot;,&quot;robot&quot;,&quot;butter&quot;,&quot;vegetable&quot;,&quot;science&quot;,&quot;correct&quot;]
c1=c2=a1=a2=f1=f2=0
k=1
i=3
def play():
    n=random.choice(l)        ##n=chooses a word from list l
    l1=[]
    for j in n:
       l1.append(j)      ##creates a list for word in n
    for t in range(len(l1)):
       p=random.choice(l1)     ##this randomly displays letters in the list
       print(p)
       l1.remove(p)          ##to avoid the repetition of a letter
    s=input(&quot;enter the word:&quot;)
    if(s==n):
        print(&quot;correct&quot;)
        return 1
    else:
        print(&quot;not correct&quot;)
        print(&quot;answer is&quot;,n)
        return 0
def stat():
     print(&quot;player 1:&quot;)
     print(&quot;score:&quot;,c1)
     print(&quot;answered:&quot;,a1)
     print(&quot;failed:&quot;,f1)
     print(&quot;.............&quot;)
     print(&quot;player 2:&quot;)
     print(&quot;score:&quot;,c2)
     print(&quot;answered:&quot;,a2)
     print(&quot;failed&quot;,f2)
     if(c1&gt;c2):
         print(p1,&quot; won over &quot;,p2)
     elif(c1==c2):
         print(&quot;draw game&quot;)
     else:
         print(p2,&quot; won over &quot;,p1) 
while(i!=4):
      if(i==3):
         if(k==1):
             print(&quot;player 1 turn&quot;)
             print(&quot;your jumbled word is:&quot;)
             k=k+1
             m=play()
             if(m==1):      ##if guessed answer is correct,then score and no.of answered count will be increased
                c1+=1
                a1+=1
             else:
                f1+=1       ##else count of no.of failed to answered will be incremented
         else:
             print(&quot;player 2 turn&quot;)
             print(&quot;your jumbled word is:&quot;)
             k=k-1
             m=play()
             if(m==1):
                c2=c2+1
                a2=a2+1
             else:
                f2=f2+1
       if(i==2):
             print(&quot;present status&quot;)
             stat()
       i=int(input(&quot;enter your choice  1.stop 2.status 3.continue&quot;))
       if(i==1):
             stat()
             i=i+3
&lt;/pre&gt;
&lt;hr&gt;
=== JumbledWord Simple Logic, In Short ===
[[File:jumbledWord.gif]]
&lt;hr&gt;
'''Logic to create a Jumbled Word'''
&lt;hr&gt;
&lt;pre&gt;
#Get Jumbled Word and print it Horizontally
import random

def getJumbledWord(b):
    jumble=''
    l1 = [ b[i] for i in range(0, len(b)) ]
    for t in range(len(l1)):
       p=random.choice(l1)     ##this randomly gets letters from the list      
       jumble=jumble+p       
       l1.remove(p)
    return jumble

b=input(&quot;Enter a word to make it jumbled : &quot;)
print(&quot;Jumbled Word : &quot;, getJumbledWord(b))
&lt;/pre&gt;
&lt;hr&gt;
'''Another Logic to create a Jumbled Word'''
&lt;hr&gt;
&lt;pre&gt;
import random
b=input(&quot;Enter a word to make it jumbled : &quot;)

def getJumbledWord1(b):
    l1 = [ b[i] for i in range(0, len(b)) ]
    random.shuffle(l1)
    str1 = ''.join(l1)
    return str1

print(&quot;Jumbled Word : &quot;, getJumbledWord1(b))
&lt;/pre&gt;

====Sample Output:====
&lt;pre&gt;
---- Output1 
Enter a word to make it jumbled : butter
Jumbled Word :  tbture

---- Output2 
Enter a word to make it jumbled : petriotism
Jumbled Word :  pittrosime
&lt;/pre&gt;

=Theory of Evolution=

== What is Evolution ? ==
Evolution is the change in heritable characteristics over successive generations. The theory of evolution explains that DNA, which acts as a carrier of genetic information from one generation to other, tends to change or mutate occasionally. These changes are reflected in next generations to come. This is how life has evolved on earth from bacteria to human beings.&lt;br&gt;
[[File:Evolution.png|500px]]

== Implementation ==
 &lt;p style=&quot;text-align:justify&quot;&gt;
An array representing DNA is stored in a file. As genes are forms of DNA, they contain information to be transferred to forthcoming generations. Assume that information is in the form of bits (in the form of 0s and 1s). A number is picked randomly from 1 to the size of the array. A new parameter has been introduced which decides whether mutation would occur or not. If the value of this new parameter is 1 (It is picked randomly from 1 to 100), then only change is reflected down the generations, otherwise it is not. The pseudo code is as follows :
&lt;/p&gt;
Input an array containing genetic information .
Randomly generate a number (say m) from 1 to length of the array. Randomly generate other number (say p) from 1 to 100.

&lt;pre&gt; 
    if p is equal to 1 then 
        if m is 1 then
          set it to 0
        else
          set it to 1
&lt;/pre&gt;
[[#TOP]]</text>
      <sha1>ds6knog6455reyth54d6avwbiq4fwl8</sha1>
    </revision>
    <revision>
      <id>3622</id>
      <parentid>3621</parentid>
      <timestamp>2018-09-28T04:40:42Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* JumbledWord Simple Logic, In Short */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="30449">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_3 Contributors of this page]
*Week 3 Playlist: https://www.youtube.com/playlist?list=PLc_j0TNIaWxOVx_z9jAM2UB3RqYNXaoEo
=List=
List is a flexible data structure used for storing a group of data separated by comma. The elements in a list need not be of the same data type.

'''Example:'''
       List_1 = [ 1, 2,3] or 
       List_1 = [&quot;coffee&quot;, &quot;Tea&quot;, &quot;Milk&quot;] or
       List_1 = [1,&quot;coffee&quot;, &quot;Tea&quot;, 3, &quot;5&quot;]

==List Creation==
&lt;pre&gt;a) A list can be created by simply putting values (separated by comma) between square brackets as given below,
       List_1 = [1,&quot;coffee&quot;, &quot;Tea&quot;, 3, &quot;5&quot;] #this creates a list by name List_1 containing following items


Or,
(b)A List can be created from scratch and elements can be added 
        List_2 = [ ]
        List_2.append(&quot;Kala&quot;)
        List_2.append(&quot;Mala&quot;)
Here we use &quot;append&quot; ,which is a function in python that enable us to append or attach an element to a list .
Thus List_2 will now hold [&quot;Kala&quot;,&quot;Mala&quot;]
&lt;/pre&gt;
[[#TOP]]

==Operations and Methods to work with List==
&lt;pre&gt;
a = [25,30,50,90,12,13]
b = [100,300,500,200,250]
&lt;/pre&gt;
&lt;hr&gt;
&lt;table border=2&gt;
  &lt;tr&gt;
    &lt;th&gt;&lt;b&gt;Method/&lt;br&gt;Operator&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Function&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Syntax&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Output&lt;/b&gt;&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;len()&lt;/td&gt;
    &lt;td&gt;Find length of a list&lt;/td&gt;
    &lt;td&gt;len(a)&lt;/td&gt;
    &lt;td&gt;6&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;max()&lt;/td&gt;
    &lt;td&gt;Find maximum element from the list&lt;/td&gt;
    &lt;td&gt;max(a)&lt;/td&gt;
    &lt;td&gt;90&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;min()&lt;/td&gt;
    &lt;td&gt;Find minimum element from the list&lt;/td&gt;
    &lt;td&gt;min(a)&lt;/td&gt;
    &lt;td&gt;12&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sum()&lt;/td&gt;
    &lt;td&gt;Returns sum of all elements of the list&lt;/td&gt;
    &lt;td&gt;sum(a)&lt;/td&gt;
    &lt;td&gt;220&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;reverse()&lt;/td&gt;
    &lt;td&gt;Reverses the original list&lt;/td&gt;
    &lt;td&gt;a.reverse()&lt;/td&gt;
    &lt;td&gt;[13, 12, 90, 50, 30, 25]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sort()&lt;/td&gt;
    &lt;td&gt;Sorts the original list in ascending order&lt;/td&gt;
    &lt;td&gt;a.sort()&lt;/td&gt;
    &lt;td&gt;[12, 13, 25, 30, 50, 90]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sorted()&lt;/td&gt;
    &lt;td&gt;Returns the new sorted list &lt;/td&gt;
    &lt;td&gt;sorted(a)&lt;/td&gt;
    &lt;td&gt;[12, 13, 25, 30, 50, 90]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;insert()&lt;/td&gt;
    &lt;td&gt;Insert at a particular index in the list, and shifts remaining elements&lt;/td&gt;
    &lt;td&gt;a.insert(3,3)&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 3, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;append()&lt;/td&gt;
    &lt;td&gt;Adds elements/object to the end of the list&lt;/td&gt;
    &lt;td&gt;a.append(5)&lt;br&gt;a.append([10,20])&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 5]&lt;br&gt;[25, 30, 50, 90, 12, 13, [10, 20]]&lt;br&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;extend()&lt;/td&gt;
    &lt;td&gt;Adds object to the end of the list as elements not as object&lt;/td&gt;
    &lt;td&gt;a.extend([10,20])&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 10, 20]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;*&amp;nbsp;&amp;nbsp;Repeatation&lt;br&gt;operator&lt;/td&gt;
    &lt;td&gt;Repeat the list for n times and returns a new list&lt;/td&gt;
    &lt;td&gt;a*2&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 25, 30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;+ Concatenation&lt;br&gt;operator&lt;/td&gt;
    &lt;td&gt;Concatenates two lists, and returns a new list&lt;/td&gt;
    &lt;td&gt;a+b&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 100, 300, 500, 200, 250]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;index()&lt;/td&gt;
    &lt;td&gt;Finds index of a particular element in the list or not&lt;/td&gt;
    &lt;td&gt;a.index(25)&lt;br&gt;a.index(0)&lt;br&gt;&lt;/td&gt;
    &lt;td&gt;0&lt;br&gt;&lt;br&gt;ValueError: 0 is not in list&lt;br&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;in operator&lt;/td&gt;
    &lt;td&gt;Finds whether a particular element is in the list or not, returns boolean&lt;/td&gt;
    &lt;td&gt;25 in a&lt;/td&gt;
    &lt;td&gt;True&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;not in operator&lt;/td&gt;
    &lt;td&gt;Checks if element is not available in list, returns boolean&lt;/td&gt;
    &lt;td&gt;25 not in a&lt;/td&gt;
    &lt;td&gt;False&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;count()&lt;/td&gt;
    &lt;td&gt;Counts the number of occurence of an element in the list&lt;/td&gt;
    &lt;td&gt;a.count(25)&lt;/td&gt;
    &lt;td&gt;1&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;remove()&lt;/td&gt;
    &lt;td&gt;Removes an element from the list&lt;/td&gt;
    &lt;td&gt;a.remove(25)&lt;/td&gt;
    &lt;td&gt; [30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;pop()&lt;/td&gt;
    &lt;td&gt;Delete and return item at index 0&lt;/td&gt;
    &lt;td&gt;a.pop(0)&lt;/td&gt;
    &lt;td&gt;25 , a will be [30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;del&lt;/td&gt;
    &lt;td&gt;Deletes item at a particular index from the list&lt;/td&gt;
    &lt;td&gt;del a[0]&lt;/td&gt;
    &lt;td&gt;[30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;all()&lt;/td&gt;
&lt;td&gt;Returns True, if all items in list are True or it is an empty list&lt;/td&gt;
&lt;td&gt;all([True, True, True])
all([])
&lt;/td&gt;
&lt;td&gt;True&lt;br&gt;
True&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;any()&lt;/td&gt;
&lt;td&gt;Returns True, if any item in list is True else return False&lt;/td&gt;
&lt;td&gt;any([True, True, True])&lt;br&gt;
any([True, False, True])&lt;br&gt;
any([])&lt;/td&gt;
&lt;td&gt;True&lt;br&gt;False&lt;br&gt;False&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;

==Printing the List==
=== Print whole list ===
A list can be printed simply or using a ''for / while'' loop 

 print(List_2)     # To print the entire list
This code will print      
 ['Kala','Mala']     

===Print element at a particular index===
&lt;pre&gt;
Using index position
    List_2[0]     # prints 'Kala' ,i.e,the value at index position 0.
    List_2[1]     # prints 'Mala'.
&lt;/pre&gt;
=== Without using index position ===
&lt;pre&gt;
for item in List_2:   # here item is a variable used to access elements in list.
       print(item)
   This code snippet prints 
    Kala
    Mala
&lt;/pre&gt;
[[#TOP]]

==Search for a particular element in list==
Elements in a list can be searched by one of the two ways:
=== using index() function===
&lt;pre&gt;
ages1 = [11,23,12,23,45]

#if element is available in the list, index() returns the index value on which, the element is present.
print(ages1.index(45))#Output: 4

#if element is not available in the list, index() returns ''ValueError''
print(ages1.index(0))#Output: ValueError:
&lt;/pre&gt;

In programming, if such error occurs, program gets terminated. It can be solved using exception handling.
e.g.
&lt;pre&gt;
ages1 = [11,23,12,23,45]

try:
    print(ages1.index(0))
except ValueError:
    print(&quot;Exception has occured&quot;)    
    print(&quot;Element is not found in the list&quot;)

&lt;/pre&gt;
&lt;pre&gt;
'''Output: 
Exception has occured
Element is not found in the list
'''&lt;/pre&gt;
[[#TOP]]

=== using 'in' operator===
''in'' operator is used to check whether a particular element is available in the list or not.e.g.

&lt;pre&gt;
ages1 = [11,23,12,23,45]
no=11

if no in ages1:
    print(&quot;no is there in the list&quot;)
else:    
    print(&quot;no is NOT there in the list&quot;)
&lt;/pre&gt;
&lt;pre&gt;
#Output: no is there in the list
&lt;/pre&gt;


'''Number is not there in the list'''
&lt;pre&gt;
ages1 = [11,23,12,23,45]
no=15

if no in ages1:
    print(&quot;no is there in the list&quot;)
else:    
    print(&quot;no is NOT there in the list&quot;)
&lt;/pre&gt;
&lt;pre&gt;
Output: no is NOT there in the list
&lt;/pre&gt;
[[#TOP]]

==Updating the List==
The lists can be updated using ''append'' or ''insert'' function.  Append adds the element to the end of the list and Insert adds the element in the specified position.
&lt;pre&gt;
   # add the element 'Sheela' to the end of the list.
   List_2.append(&quot;Sheela&quot;)    
   print (List_2) will output 
   ['Kala', 'Mala', 'Sheela']
&lt;/pre&gt;
   &lt;pre&gt;
# add the element &quot;Bala&quot; in the list at the index 1.
   List_2.insert(1,&quot;Bala&quot;)    
   print (List_2) will output 
   ['Kala', 'Bala','Mala', 'Sheela']
&lt;/pre&gt;

=== Extend the list by adding elements of other list at end using extend()===
&lt;pre&gt;
ages = [11,23,12,23,45]
ages.extend([57,58])
print(ages)
&lt;/pre&gt;

&lt;pre&gt;
#Output: [11, 23, 12, 23, 45, 57, 58]
&lt;/pre&gt;

==== Difference between ''append and extend'' ====
Difference between append and extend can be easily understood, by the following example.

&lt;pre&gt;
appendlist = [11,23,12,23,45]
appendlist.append([57,58])

extendlist= [11,23,12,23,45]
extendlist.extend([57,58])
&lt;/pre&gt;

&lt;pre&gt;
'''Output:
[11, 23, 12, 23, 45, [57, 58]]
[11, 23, 12, 23, 45, 57, 58]'''
&lt;/pre&gt;

[[#TOP]]

==Basic Operations on List==
===Frequency of Occurrence===
list.count(object) will return the number of times the object occur in the list.
  '''Example'''
    ages = [11,23,12,23,45,43,22,24,23]
    ages.count(23) will return
    3
    ages.count(100) will return
    0

===Length of the List===
len(list) will return the length of the list ie. the number of objects in the list.
  '''Example'''
&lt;pre&gt;
    ages = [11,23,12,23,45,43,22,24,23]
    len(ages) # Output: 9
&lt;/pre&gt;

To print the objects in the list either use ''for item in list'' or ''for index in range(len(list))''
&lt;pre&gt;
    for item in ages:       
        print (item)  
        (OR)
    for index in range(len(ages)) :
        print (ages[index])
&lt;/pre&gt;

===Sort the List===
list.sort() will sort the list in ascending order
  '''Example'''
    ages = [11,23,12,23,45,43,22,24,23]
    ages.sort() 
    print (ages) 
    [11, 12, 22, 23, 23, 23, 24, 43, 45]

[[#TOP]]

===Sort the List using sorted() function===
sorted(list1) will sort the list and return a new list, it doesn't modify the original list
&lt;br&gt;'''Example: Sort in ascending order'''
&lt;pre&gt;
ages = [11,23,12,23,45,43,22,24,23]
newList=sorted(ages)
print(newList)

#Output: [11, 12, 22, 23, 23, 23, 24, 43, 45]
&lt;/pre&gt;

&lt;br&gt;'''Example: Sort in descending order'''
&lt;pre&gt;
ages = [11,23,12,23,45,43,22,24,23]
newList=sorted(ages,reverse=True)
print(newList)

#Output: [45, 43, 24, 23, 23, 23, 22, 12, 11]
&lt;/pre&gt;

===Reverse the List===
list.reverse() will reverse the original list
  '''Example'''
    ages = [11, 12, 22, 23, 23, 23, 24, 43, 45]
    ages.reverse()
    print (ages)
    [45, 43, 24, 23, 23, 23, 22, 12, 11]

Both sort() and reverse() list operation will work on numeric and alphanumeric data list.

A special use of the reverse() function is to descend a list that is sorted in ascending order.

  '''Example'''
&lt;pre&gt;
ages = [11, 12, 22, 23, 23, 23, 24, 43, 45]
ages.sort()
print(ages)
ages.reverse()
print(ages)
&lt;/pre&gt;

===Slicing===
Used to retrieve an object or objects in a range as a list  
  '''Example'''

Use ''list[index]'' to retrieve the object at the given index
&lt;pre&gt;
In [1]: student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
In [2]: student[3]     #Object at index 3.  Remember index starts at 0
Out[2]: 'Geetha'      
&lt;/pre&gt;

Use ''list[start_index : end_index + 1]'' to retrieve objects from the start_index to end_index 
&lt;pre&gt;
In [3]: student[2:4]     # Objects from index 2 to 3 as List. Note the [ and ]
Out[3]: ['Vijay', 'Geetha']   
&lt;/pre&gt;

Use ''list[:]'' to retrieve objects from the starting of the list to the end of the list. 
The default start value will be the starting index of the list (i.e. 0) and the default end value
will be the length of the list 
&lt;pre&gt;
In [4]: student[:]        # prints the entire list
Out[4]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma', 'Janani']
&lt;/pre&gt;
&lt;pre&gt;
In [5]: student[:5]       # prints the objects from the start of the list upto object at index 4
Out[5]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran']
&lt;/pre&gt;
&lt;pre&gt;
In [6]: student[2:]       # prints the objects from index 2 upto the end of the list
Out[6]: ['Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma', 'Janani']
&lt;/pre&gt;

Negative index too is available in Python. It starts from last element of the list. i.e.
&lt;pre&gt;
In [7]:student[-1]        #prints last index of list
Out[7]: 'Janani'
&lt;/pre&gt;
&lt;pre&gt;
In [8]:student[-1:-8]     #prints empty list
Out[8]: []
&lt;/pre&gt;
&lt;pre&gt;
In [9]:student[-8:-1]     #prints -8th index to -1st index elements
Out[9]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma']
&lt;/pre&gt;

[[#TOP]]

===Removing Item from list ===
----

Is used to remove a specific item from the list.

'''Example:'''
 
Use list.remove(entry/value)  Or   del list[index]    Or list.pop(index)
&lt;pre&gt;
student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
student.remove(&quot;Arun&quot;)   #This will delete item &quot;Arun&quot;
         Or    
del student[0]           # This will delete item at index 0
         Or
student.pop(0)         # This will delete and return item at index 0
print(student)    
Output: &quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
&lt;/pre&gt;

[[#TOP]]

===Delete list ===
----
Used to delete complete list

'''Example'''

Use del &lt;list name&gt;
&lt;pre&gt;
student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
del student&lt;/pre&gt;

===Concatenation of two lists===
----
''+'' is the concatenation operator which is used concatenate two lists. 
&lt;pre&gt;
ages1 = [11,23,12,23,45]
ages2 = [25, 24, 43, 47]
age=ages1+ages2
print(age)
#Output: [11, 23, 12, 23, 45, 25, 24, 43, 47]
&lt;/pre&gt;

===Repeatation of a list ===
----
''*'' is the operator to repeat a particular list.
&lt;pre&gt;
ages1 = [11,23,12,23,45]
age=ages1*5 #ages1 list is repeated 5 times and stroed in ''age'' list
print(age)

#Output: [11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45]
&lt;/pre&gt;

=== all and any for List===
all() and any() are special functions to check whether all elements in iterable is ''True'' or any element is ''True''
&lt;ol&gt;
&lt;li&gt;If all elements in a list are ''True'', '''all()''' will return ''True''&lt;/li&gt;
&lt;li&gt;If iterable is ''empty'', '''all()''' will return ''True''&lt;/li&gt;
&lt;li&gt;If iterable contains at least one ''True'', '''any()''' will return ''True''&lt;/li&gt;
&lt;li&gt;If iterable is ''empty'', '''any()''' will return ''False''&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;
lsit=[True, True, True, True]
print(all(lsit))#Output: True
print(any(lsit))#Output: True

lsit1=[True, False, True, True]
print(all(lsit1))#Output: False
print(any(lsit1))#Output: True

lsit2=[False,False,False]
print(all(lsit2))#Output: False
print(any(lsit2))#Output: False

lsit3=[]
print(all(lsit3))#Output: True
print(any(lsit3))#Output: False
&lt;/pre&gt;

==Conditional Statements==
&lt;pre&gt;Conditionals are used to check the condition and change the flow of the program 
accordingly. They are realized in programming languages through if statement. The 
syntax is as follows :
&lt;pre&gt;
         if condition : 
            statement
&lt;/pre&gt;
    '''Note:''' Do not forget indentation (inserting space/tab) in the line after the
 if condition.
    
    In case you want to execute a set of statements when a condition is true and another

set of statement when the condition is false.
&lt;pre&gt;
         if condition : 
            statement 1
         else :
            statement 2
&lt;/pre&gt;

&lt;pre&gt;    
    Multiple if-else statements can be written as follows:
         if condition_1 : 
            statement 1
         elif condition_2 : # 'elif' is short for 'else if'
            statement 2
         elif condition_3 :
            statement 3
        .
        .
         else :
            final statement
&lt;/pre&gt;

[[#TOP]]

=Loops and Conditionals : Fizzbuzz=
====Loops====
Loops are used to execute a set of repetitive statements. They are realised
through 'while' and 'for' loops in programming languages. The syntax of 'for' loop is 
as follows :
&lt;pre&gt;
for LOOPVARIABLE in SEQUENCE: 
            STATEMENTS&lt;/pre&gt;

    '''e.g.''' to print all the data from a list we can write:
&lt;pre&gt;
for item in list_name:
      print(item)&lt;/pre&gt;
    OR
&lt;pre&gt;
for index in range(len(list_name)):
      print(list_name[index])
 &lt;/pre&gt;   
    The syntax for while loop is as follows :
&lt;pre&gt;    
while BOOLEANEXPRESSION: 
     STATEMENTS
     INCREMENT/DECREMENT
&lt;/pre&gt;    
    '''e.g.''' if we want to print all numbers from 1 to 10
&lt;pre&gt;
i=1
while i&lt;=10 :
    print(i,&quot; &quot;)
    i=i+1
    &lt;/pre&gt;
 
'while' loop has indefinite iteration (run-time unknown). So, there must be loop,  break statement in it.
 Whereas 'for' loop is definite in nature (i.e. known or predictable span).&lt;br&gt;

&lt;b&gt;NOTE: Python doesn't have anything like do-while loop.&lt;/b&gt;

[[#TOP]]

==Implementation==
Here, we try to demonstrate the concept of loops and conditionals through a game called Fizzbuzz. The rules are as follows :&lt;br/&gt;
[[File:fizzBuzz.gif]]

• if input number is a multiple of ’3’ print ”Fizz”
&lt;br/&gt;
• if input number is a multiple of ’5’ print ”Buzz”
&lt;br/&gt;
• if input number is a multiple of both '3' and ’5’ print ”FizzBuzz”
&lt;br/&gt;
The pseudo code is as follows :
&lt;pre&gt;
   If input no % 3 == 0 and  input no % 5 == 0 : 
       print ”Fizzbuzz”
   else if input no % 3 == 0 : 
       print ”Fizz”
   else if input no % 5 == 0 : 
       print ”Buzz”
   else :
       print the input no
&lt;/pre&gt;
 &lt;p style=&quot;text-align:justify&quot;&gt;
The order of statements execution matters to get the desired output. The highest priority condition should be first followed by other. In fizzbuzz programming, first checking should be done for both divisibility of 3 and 5. If condition not satisfied only then it should check individually for 3 or 5. So carefully choosing the order is crucial for better programming.
Note: There is some effect of present condition statements chosen on next conditions statements. That is why in first attempt fizzbuzz programming got struck.&lt;/p&gt;

Example: 
&lt;pre&gt;
#Code to achieve the above requirement in python3.
i = int(input(&quot;Enter the number&quot;)) 
if i%3 == 0 and i%5 == 0: print(i,&quot;FizzBuzz&quot;)  
elif i%5 == 0: print(i,&quot;Buzz&quot;)
elif i%3 == 0: print(i,&quot;Fizz&quot;)
else: print(i)
&lt;/pre&gt;
Lets put the same into a loop for a range given by the user.
&lt;pre&gt;
def fizzbuzzgame(start,stop):
    for i in range(start,stop+1):
        if i%3 == 0 and i%5 == 0:
            print(i,&quot;FizzBuzz&quot;)
        elif i%5 == 0:
            print(i,&quot;Buzz&quot;)
        elif i%3 == 0:
            print(i,&quot;Fizz&quot;)
        else: print(i)

fizzbuzzgame(50,100)
&lt;/pre&gt;
&lt;pre&gt;
#Output:
1235
Buzz
======================================
555
Fizzbuzz
======================================
1235
Buzz
======================================
999
Fizz
&lt;/pre&gt;

=== Fizz Buzz game in Interactive mode with Score ===
'''By Ms. Ami Tusharkant Choksi'''
&lt;pre&gt;
def fizzbuzzgame(i):
        if i%3 == 0 and i%5 == 0:
            print(i,&quot;FizzBuzz&quot;)
            return(&quot;fzbz&quot;)
        elif i%5 == 0:
            print(i,&quot;Buzz&quot;)
            return(&quot;bz&quot;)
        elif i%3 == 0:
            print(i,&quot;Fizz&quot;)
            return(&quot;fz&quot;)
        else:
            print(i)
            return(&quot;no&quot;)

ch = 'y'
fizzbuzz=0
fizz=0
buzz=0
nothing=0
print(&quot;&quot;&quot;

 /$$$$$$$$/$$                  /$$$$$$$                            
| $$_____|__/                 | $$__  $$                           
| $$      /$$/$$$$$$$$/$$$$$$$| $$  \ $$/$$   /$$/$$$$$$$$/$$$$$$$$
| $$$$$  | $|____ /$$|____ /$$| $$$$$$$| $$  | $|____ /$$|____ /$$/
| $$__/  | $$  /$$$$/   /$$$$/| $$__  $| $$  | $$  /$$$$/   /$$$$/ 
| $$     | $$ /$$__/   /$$__/ | $$  \ $| $$  | $$ /$$__/   /$$__/  
| $$     | $$/$$$$$$$$/$$$$$$$| $$$$$$$|  $$$$$$//$$$$$$$$/$$$$$$$$
|__/     |__|________|________|_______/ \______/|________|________/
                                                                  
&quot;&quot;&quot;)   
print('''

  /$$$$$$                                
 /$$__  $$                               
| $$  \__/ /$$$$$$ /$$$$$$/$$$$  /$$$$$$ 
| $$ /$$$$|____  $| $$_  $$_  $$/$$__  $$
| $$|_  $$ /$$$$$$| $$ \ $$ \ $| $$$$$$$$
| $$  \ $$/$$__  $| $$ | $$ | $| $$_____/
|  $$$$$$|  $$$$$$| $$ | $$ | $|  $$$$$$$
 \______/ \_______|__/ |__/ |__/\_______/
                                     
''')

while(ch == 'y'):
    n=int(input(&quot;Enter a Number : &quot;))
    winLoose=fizzbuzzgame(n)
    if(winLoose == &quot;fz&quot;):
        fizz+=1
    elif(winLoose == &quot;bz&quot;):
        buzz+=1
    elif(winLoose == &quot;fzbz&quot;):
        fizzbuzz+=1
    ch=input(&quot;Do you want to continue playing the game : (y/n)&quot;)
    if(ch=='n'):
        print('Congratulations, your score is\n FizzBuzz:%d\nFizz:%d\nBuzz:%d' %
(fizzbuzz,fizz,buzz))
    
'''Sample Output:

 /$$$$$$$$/$$                  /$$$$$$$                            
| $$_____|__/                 | $$__  $$                           
| $$      /$$/$$$$$$$$/$$$$$$$| $$  \ $$/$$   /$$/$$$$$$$$/$$$$$$$$
| $$$$$  | $|____ /$$|____ /$$| $$$$$$$| $$  | $|____ /$$|____ /$$/
| $$__/  | $$  /$$$$/   /$$$$/| $$__  $| $$  | $$  /$$$$/   /$$$$/ 
| $$     | $$ /$$__/   /$$__/ | $$  \ $| $$  | $$ /$$__/   /$$__/  
| $$     | $$/$$$$$$$$/$$$$$$$| $$$$$$$|  $$$$$$//$$$$$$$$/$$$$$$$$
|__/     |__|________|________|_______/ \______/|________|________/
                                                                                                                                   

  /$$$$$$                                
 /$$__  $$                               
| $$  \__/ /$$$$$$ /$$$$$$/$$$$  /$$$$$$ 
| $$ /$$$$|____  $| $$_  $$_  $$/$$__  $$
| $$|_  $$ /$$$$$$| $$ \ $$ \ $| $$$$$$$$
| $$  \ $$/$$__  $| $$ | $$ | $| $$_____/
|  $$$$$$|  $$$$$$| $$ | $$ | $|  $$$$$$$
 \______/ \_______|__/ |__/ |__/\_______/
                                         

Enter a Number : 666
666 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 777
777 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 555
555 FizzBuzz
Do you want to continue playing the game : (y/n)y
Enter a Number : 1
1
Do you want to continue playing the game : (y/n)y
Enter a Number : 789
789 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 25
25 Buzz
Do you want to continue playing the game : (y/n)n
Congratulations, your score is

FizzBuzz:1
Fizz:3
Buzz:1

&lt;/pre&gt;

=Crowd Computing: Just Estimate=
==Wisdom of Crowds==
 &lt;p style=&quot;text-align:justify&quot;&gt;
The concept of ’Wisdom of Crowds’ was proposed by Francis Galton. A weight-judging competition was carried on at the annual show of the West of England Fat Stock and Poultry Exhibition recently held at Plymouth, A fat ox having been selected, competitors bought stamped and numbered cards, each, on which to inscribe their respective names, addresses, and estimates of what the ox would weigh after it had been slaughtered. Those who guessed most successfully received prizes. About 8oo tickets were issued to the par- ticipants. The middlemost estimate of all the estimates recorded was 1207 lbs and the actual weight of the ox was 1198 lbs.&lt;/p&gt;

==Our Experiment==
 &lt;p style=&quot;text-align:justify&quot;&gt;
The crowd had to guess the number of candies/gems in a jar. Around 75 people participated in the experiment. The actual number of gems in the jar were 375. The median of all estimates came out to be 300 and the mean of all the estimates came out to be around 396. Median underestimated and mean overestimated the actual value. So according to recent studies, Trimmed mean must be used as an aggregate measure to estimate where Wisdom of Crowds is involved.
&lt;/p&gt;
[[File:Gemsjar.jpg|center|200px|caption]]

===Trimmed Mean===
 &lt;p style=&quot;text-align:justify&quot;&gt;
In these kinds of experiments, 10% trimmed mean is usually followed. For calculating 10% trimmed mean, remove 10% smallest and 10% largest values from the sample. Calculate the mean of the sample obtained. In the above experiment, the trimmed mean came out to be around 351 which is very close to the actual value.&lt;/p&gt;

==Implementation==
Here, we try to demonstrate the concept of trimmed mean through crowd computing.
&lt;ol&gt;
&lt;li&gt; Input a list of estimates done by the crowd .&lt;/li&gt;
&lt;li&gt; Sort the list.&lt;/li&gt;
&lt;li&gt; Remove the 10% smallest values.&lt;/li&gt;
&lt;li&gt; Remove the 10% largest values.
&lt;li&gt; Calculate the mean of the new list obtained .&lt;/li&gt;&lt;/ol&gt;&lt;hr&gt;

==Data of Experiment==       
    Estimates =[1000,1010,1786,2000,1500,1500,100,120,150,150,150,170,175,180,197,200,200,200,200,200,200,220,220,220,220,234,250,250,250,250,250,250,250,250,250,263,270,275,275,286,300,
                300,300,300,300,300,300,300,320,350,350,350,400, 400,400,400,400,450,467,500,500,500,500,500,500,500,550,550,600,600,600,650,700,700,720]

    '''CODE:'''
&lt;pre&gt;
Estimates = [1000,1010,1786,2000,1500,1500,100,120,150,150,150,170,175,180,197,200,200,200,200,200,200,220,220,220,220,234,250,250,250,250,250,250,250,250,250,263,270,275,275,286,300,                300,300,300,300,300,300,300,320,350,350,350,400,400,400,400,400,450,467,500,500,500,500,500,500,500,550,550,600,600,600,650,700,700,720]
Estimates.sort()
offset = int(0.10*len(Estimates))
for i in range(offset):
       del Estimates[0]
       del Estimates[-1]
Sum = 0    
for i in range(len(Estimates)):
       Sum += Estimates[i]
Mean_Value = Sum/len(Estimates)
print(&quot;Mean : &quot;, int(Mean_Value))
#Output:
Mean :  351
&lt;/pre&gt;
&lt;hr&gt;
==Trimmed Mean for the above example== 
&lt;h3&gt;Using scipy library&lt;/h3&gt;
&lt;pre&gt;
#import scipy to use the method of trim_mean
from scipy import stats
trimMean = stats.trim_mean(Estimates, 0.1) # Trim 10% at both ends
print(&quot;Trimmed Mean : &quot;,trimMean)
#Output:
Trimmed Mean :  335.1020408163265
&lt;/pre&gt;

&lt;h3&gt;Without using scipy library&lt;/h3&gt;
&lt;pre&gt;
#Trimmed mean with 10%
p=10/100
#sorted data
data=[2, 4, 6, 7, 11, 21, 81, 90, 105, 121]
n = len(data)
#Remove elements from both end
rem=int(n*p)
newData = data[rem:-rem]
mean = 0
for i in newData:
    mean += i
mean = int(mean/len(newData))
print(&quot;Trimmed mean : &quot;,mean)
#Output: Trimmed mean :  40
&lt;/pre&gt;
[[#Top]]

=Jumbled_Words Permutations: Jumbled Words=
==What are Permutations ?==
A permutation also called ordering of selected number of elements from a list denoted by nPr here we are choosing all elements of a list and so n=r&lt;br&gt;
nPr=n!/(n-r)!&lt;br&gt; as n=r
nPn=n!&lt;br&gt; which gives all possible arrangement of elements present in a list.

 For example, permutations of list [1,2,3] are [1,2,3], [1,3,2], [2,1,3], [2,3,1], 
[3,1,2], and [3,2,1]. 
The number of permutations of a list of elements nPn is given by n!. For example, there are 2! = 2 x 1 = 2 permutations of [1,2], namely [1,2] and [2,1], and 3! = 3 x 2 x 1 = 6 permutations of [1,2,3], as mentioned above.&lt;br/&gt;
[[File:Permutations.jpg]]

==Implementation==
 &lt;p style=&quot;text-align:justify&quot;&gt;
Here, we try to demonstrate the concept of permutations through jumbled words. It is a two player game in which one person presents the other person a different permutation of the word in his mind. The other person has to guess the right word. If he guesses, the he wins otherwise he loses.&lt;/p&gt;
 Input an list of words.
 Randomly pick a word from the list of words .
 Shuffle this word and present it to the other player.
 if word guesses by the player is same as the one picked from list of w
     player wins
 else
     player loses

ALTERNATE CODE TO GENERATE THIS GAME:
&lt;pre&gt;
import random
p1=input(&quot;enter player 1 name:&quot;)
p2=input(&quot;enter player 2 name:&quot;)
l=[&quot;rainbow&quot;,&quot;computer&quot;,&quot;robot&quot;,&quot;butter&quot;,&quot;vegetable&quot;,&quot;science&quot;,&quot;correct&quot;]
c1=c2=a1=a2=f1=f2=0
k=1
i=3
def play():
    n=random.choice(l)        ##n=chooses a word from list l
    l1=[]
    for j in n:
       l1.append(j)      ##creates a list for word in n
    for t in range(len(l1)):
       p=random.choice(l1)     ##this randomly displays letters in the list
       print(p)
       l1.remove(p)          ##to avoid the repetition of a letter
    s=input(&quot;enter the word:&quot;)
    if(s==n):
        print(&quot;correct&quot;)
        return 1
    else:
        print(&quot;not correct&quot;)
        print(&quot;answer is&quot;,n)
        return 0
def stat():
     print(&quot;player 1:&quot;)
     print(&quot;score:&quot;,c1)
     print(&quot;answered:&quot;,a1)
     print(&quot;failed:&quot;,f1)
     print(&quot;.............&quot;)
     print(&quot;player 2:&quot;)
     print(&quot;score:&quot;,c2)
     print(&quot;answered:&quot;,a2)
     print(&quot;failed&quot;,f2)
     if(c1&gt;c2):
         print(p1,&quot; won over &quot;,p2)
     elif(c1==c2):
         print(&quot;draw game&quot;)
     else:
         print(p2,&quot; won over &quot;,p1) 
while(i!=4):
      if(i==3):
         if(k==1):
             print(&quot;player 1 turn&quot;)
             print(&quot;your jumbled word is:&quot;)
             k=k+1
             m=play()
             if(m==1):      ##if guessed answer is correct,then score and no.of answered count will be increased
                c1+=1
                a1+=1
             else:
                f1+=1       ##else count of no.of failed to answered will be incremented
         else:
             print(&quot;player 2 turn&quot;)
             print(&quot;your jumbled word is:&quot;)
             k=k-1
             m=play()
             if(m==1):
                c2=c2+1
                a2=a2+1
             else:
                f2=f2+1
       if(i==2):
             print(&quot;present status&quot;)
             stat()
       i=int(input(&quot;enter your choice  1.stop 2.status 3.continue&quot;))
       if(i==1):
             stat()
             i=i+3
&lt;/pre&gt;
&lt;hr&gt;
=== JumbledWord Simple Logic, In Short ===
[[File:jumbledWord.gif]]
&lt;hr&gt;
'''Logic to create a Jumbled Word'''
&lt;hr&gt;
&lt;pre&gt;
#Get Jumbled Word and print it Horizontally
import random

def getJumbledWord(b):
    jumble=''
    l1 = [ b[i] for i in range(0, len(b)) ]
    for t in range(len(l1)):
       p=random.choice(l1)     #this randomly gets letters from the list      
       jumble=jumble+p       
       l1.remove(p)
    return jumble

b=input(&quot;Enter a word to make it jumbled : &quot;)
print(&quot;Jumbled Word : &quot;, getJumbledWord(b))
&lt;/pre&gt;
&lt;hr&gt;
'''Another Logic to create a Jumbled Word'''
&lt;hr&gt;
&lt;pre&gt;
import random
b=input(&quot;Enter a word to make it jumbled : &quot;)

def getJumbledWord1(b):
    l1 = [ b[i] for i in range(0, len(b)) ]
    random.shuffle(l1)
    str1 = ''.join(l1)
    return str1

print(&quot;Jumbled Word : &quot;, getJumbledWord1(b))
&lt;/pre&gt;

====Sample Output:====
&lt;pre&gt;
---- Output1 
Enter a word to make it jumbled : butter
Jumbled Word :  tbture

---- Output2 
Enter a word to make it jumbled : petriotism
Jumbled Word :  pittrosime
&lt;/pre&gt;

=Theory of Evolution=

== What is Evolution ? ==
Evolution is the change in heritable characteristics over successive generations. The theory of evolution explains that DNA, which acts as a carrier of genetic information from one generation to other, tends to change or mutate occasionally. These changes are reflected in next generations to come. This is how life has evolved on earth from bacteria to human beings.&lt;br&gt;
[[File:Evolution.png|500px]]

== Implementation ==
 &lt;p style=&quot;text-align:justify&quot;&gt;
An array representing DNA is stored in a file. As genes are forms of DNA, they contain information to be transferred to forthcoming generations. Assume that information is in the form of bits (in the form of 0s and 1s). A number is picked randomly from 1 to the size of the array. A new parameter has been introduced which decides whether mutation would occur or not. If the value of this new parameter is 1 (It is picked randomly from 1 to 100), then only change is reflected down the generations, otherwise it is not. The pseudo code is as follows :
&lt;/p&gt;
Input an array containing genetic information .
Randomly generate a number (say m) from 1 to length of the array. Randomly generate other number (say p) from 1 to 100.

&lt;pre&gt; 
    if p is equal to 1 then 
        if m is 1 then
          set it to 0
        else
          set it to 1
&lt;/pre&gt;
[[#TOP]]</text>
      <sha1>lver2zzpqdf844ccu7ncu8ofp1s4log</sha1>
    </revision>
    <revision>
      <id>3623</id>
      <parentid>3622</parentid>
      <timestamp>2018-09-28T04:41:06Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* JumbledWord Simple Logic, In Short */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="30450">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_3 Contributors of this page]
*Week 3 Playlist: https://www.youtube.com/playlist?list=PLc_j0TNIaWxOVx_z9jAM2UB3RqYNXaoEo
=List=
List is a flexible data structure used for storing a group of data separated by comma. The elements in a list need not be of the same data type.

'''Example:'''
       List_1 = [ 1, 2,3] or 
       List_1 = [&quot;coffee&quot;, &quot;Tea&quot;, &quot;Milk&quot;] or
       List_1 = [1,&quot;coffee&quot;, &quot;Tea&quot;, 3, &quot;5&quot;]

==List Creation==
&lt;pre&gt;a) A list can be created by simply putting values (separated by comma) between square brackets as given below,
       List_1 = [1,&quot;coffee&quot;, &quot;Tea&quot;, 3, &quot;5&quot;] #this creates a list by name List_1 containing following items


Or,
(b)A List can be created from scratch and elements can be added 
        List_2 = [ ]
        List_2.append(&quot;Kala&quot;)
        List_2.append(&quot;Mala&quot;)
Here we use &quot;append&quot; ,which is a function in python that enable us to append or attach an element to a list .
Thus List_2 will now hold [&quot;Kala&quot;,&quot;Mala&quot;]
&lt;/pre&gt;
[[#TOP]]

==Operations and Methods to work with List==
&lt;pre&gt;
a = [25,30,50,90,12,13]
b = [100,300,500,200,250]
&lt;/pre&gt;
&lt;hr&gt;
&lt;table border=2&gt;
  &lt;tr&gt;
    &lt;th&gt;&lt;b&gt;Method/&lt;br&gt;Operator&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Function&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Syntax&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Output&lt;/b&gt;&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;len()&lt;/td&gt;
    &lt;td&gt;Find length of a list&lt;/td&gt;
    &lt;td&gt;len(a)&lt;/td&gt;
    &lt;td&gt;6&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;max()&lt;/td&gt;
    &lt;td&gt;Find maximum element from the list&lt;/td&gt;
    &lt;td&gt;max(a)&lt;/td&gt;
    &lt;td&gt;90&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;min()&lt;/td&gt;
    &lt;td&gt;Find minimum element from the list&lt;/td&gt;
    &lt;td&gt;min(a)&lt;/td&gt;
    &lt;td&gt;12&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sum()&lt;/td&gt;
    &lt;td&gt;Returns sum of all elements of the list&lt;/td&gt;
    &lt;td&gt;sum(a)&lt;/td&gt;
    &lt;td&gt;220&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;reverse()&lt;/td&gt;
    &lt;td&gt;Reverses the original list&lt;/td&gt;
    &lt;td&gt;a.reverse()&lt;/td&gt;
    &lt;td&gt;[13, 12, 90, 50, 30, 25]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sort()&lt;/td&gt;
    &lt;td&gt;Sorts the original list in ascending order&lt;/td&gt;
    &lt;td&gt;a.sort()&lt;/td&gt;
    &lt;td&gt;[12, 13, 25, 30, 50, 90]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sorted()&lt;/td&gt;
    &lt;td&gt;Returns the new sorted list &lt;/td&gt;
    &lt;td&gt;sorted(a)&lt;/td&gt;
    &lt;td&gt;[12, 13, 25, 30, 50, 90]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;insert()&lt;/td&gt;
    &lt;td&gt;Insert at a particular index in the list, and shifts remaining elements&lt;/td&gt;
    &lt;td&gt;a.insert(3,3)&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 3, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;append()&lt;/td&gt;
    &lt;td&gt;Adds elements/object to the end of the list&lt;/td&gt;
    &lt;td&gt;a.append(5)&lt;br&gt;a.append([10,20])&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 5]&lt;br&gt;[25, 30, 50, 90, 12, 13, [10, 20]]&lt;br&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;extend()&lt;/td&gt;
    &lt;td&gt;Adds object to the end of the list as elements not as object&lt;/td&gt;
    &lt;td&gt;a.extend([10,20])&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 10, 20]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;*&amp;nbsp;&amp;nbsp;Repeatation&lt;br&gt;operator&lt;/td&gt;
    &lt;td&gt;Repeat the list for n times and returns a new list&lt;/td&gt;
    &lt;td&gt;a*2&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 25, 30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;+ Concatenation&lt;br&gt;operator&lt;/td&gt;
    &lt;td&gt;Concatenates two lists, and returns a new list&lt;/td&gt;
    &lt;td&gt;a+b&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 100, 300, 500, 200, 250]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;index()&lt;/td&gt;
    &lt;td&gt;Finds index of a particular element in the list or not&lt;/td&gt;
    &lt;td&gt;a.index(25)&lt;br&gt;a.index(0)&lt;br&gt;&lt;/td&gt;
    &lt;td&gt;0&lt;br&gt;&lt;br&gt;ValueError: 0 is not in list&lt;br&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;in operator&lt;/td&gt;
    &lt;td&gt;Finds whether a particular element is in the list or not, returns boolean&lt;/td&gt;
    &lt;td&gt;25 in a&lt;/td&gt;
    &lt;td&gt;True&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;not in operator&lt;/td&gt;
    &lt;td&gt;Checks if element is not available in list, returns boolean&lt;/td&gt;
    &lt;td&gt;25 not in a&lt;/td&gt;
    &lt;td&gt;False&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;count()&lt;/td&gt;
    &lt;td&gt;Counts the number of occurence of an element in the list&lt;/td&gt;
    &lt;td&gt;a.count(25)&lt;/td&gt;
    &lt;td&gt;1&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;remove()&lt;/td&gt;
    &lt;td&gt;Removes an element from the list&lt;/td&gt;
    &lt;td&gt;a.remove(25)&lt;/td&gt;
    &lt;td&gt; [30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;pop()&lt;/td&gt;
    &lt;td&gt;Delete and return item at index 0&lt;/td&gt;
    &lt;td&gt;a.pop(0)&lt;/td&gt;
    &lt;td&gt;25 , a will be [30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;del&lt;/td&gt;
    &lt;td&gt;Deletes item at a particular index from the list&lt;/td&gt;
    &lt;td&gt;del a[0]&lt;/td&gt;
    &lt;td&gt;[30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;all()&lt;/td&gt;
&lt;td&gt;Returns True, if all items in list are True or it is an empty list&lt;/td&gt;
&lt;td&gt;all([True, True, True])
all([])
&lt;/td&gt;
&lt;td&gt;True&lt;br&gt;
True&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;any()&lt;/td&gt;
&lt;td&gt;Returns True, if any item in list is True else return False&lt;/td&gt;
&lt;td&gt;any([True, True, True])&lt;br&gt;
any([True, False, True])&lt;br&gt;
any([])&lt;/td&gt;
&lt;td&gt;True&lt;br&gt;False&lt;br&gt;False&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;

==Printing the List==
=== Print whole list ===
A list can be printed simply or using a ''for / while'' loop 

 print(List_2)     # To print the entire list
This code will print      
 ['Kala','Mala']     

===Print element at a particular index===
&lt;pre&gt;
Using index position
    List_2[0]     # prints 'Kala' ,i.e,the value at index position 0.
    List_2[1]     # prints 'Mala'.
&lt;/pre&gt;
=== Without using index position ===
&lt;pre&gt;
for item in List_2:   # here item is a variable used to access elements in list.
       print(item)
   This code snippet prints 
    Kala
    Mala
&lt;/pre&gt;
[[#TOP]]

==Search for a particular element in list==
Elements in a list can be searched by one of the two ways:
=== using index() function===
&lt;pre&gt;
ages1 = [11,23,12,23,45]

#if element is available in the list, index() returns the index value on which, the element is present.
print(ages1.index(45))#Output: 4

#if element is not available in the list, index() returns ''ValueError''
print(ages1.index(0))#Output: ValueError:
&lt;/pre&gt;

In programming, if such error occurs, program gets terminated. It can be solved using exception handling.
e.g.
&lt;pre&gt;
ages1 = [11,23,12,23,45]

try:
    print(ages1.index(0))
except ValueError:
    print(&quot;Exception has occured&quot;)    
    print(&quot;Element is not found in the list&quot;)

&lt;/pre&gt;
&lt;pre&gt;
'''Output: 
Exception has occured
Element is not found in the list
'''&lt;/pre&gt;
[[#TOP]]

=== using 'in' operator===
''in'' operator is used to check whether a particular element is available in the list or not.e.g.

&lt;pre&gt;
ages1 = [11,23,12,23,45]
no=11

if no in ages1:
    print(&quot;no is there in the list&quot;)
else:    
    print(&quot;no is NOT there in the list&quot;)
&lt;/pre&gt;
&lt;pre&gt;
#Output: no is there in the list
&lt;/pre&gt;


'''Number is not there in the list'''
&lt;pre&gt;
ages1 = [11,23,12,23,45]
no=15

if no in ages1:
    print(&quot;no is there in the list&quot;)
else:    
    print(&quot;no is NOT there in the list&quot;)
&lt;/pre&gt;
&lt;pre&gt;
Output: no is NOT there in the list
&lt;/pre&gt;
[[#TOP]]

==Updating the List==
The lists can be updated using ''append'' or ''insert'' function.  Append adds the element to the end of the list and Insert adds the element in the specified position.
&lt;pre&gt;
   # add the element 'Sheela' to the end of the list.
   List_2.append(&quot;Sheela&quot;)    
   print (List_2) will output 
   ['Kala', 'Mala', 'Sheela']
&lt;/pre&gt;
   &lt;pre&gt;
# add the element &quot;Bala&quot; in the list at the index 1.
   List_2.insert(1,&quot;Bala&quot;)    
   print (List_2) will output 
   ['Kala', 'Bala','Mala', 'Sheela']
&lt;/pre&gt;

=== Extend the list by adding elements of other list at end using extend()===
&lt;pre&gt;
ages = [11,23,12,23,45]
ages.extend([57,58])
print(ages)
&lt;/pre&gt;

&lt;pre&gt;
#Output: [11, 23, 12, 23, 45, 57, 58]
&lt;/pre&gt;

==== Difference between ''append and extend'' ====
Difference between append and extend can be easily understood, by the following example.

&lt;pre&gt;
appendlist = [11,23,12,23,45]
appendlist.append([57,58])

extendlist= [11,23,12,23,45]
extendlist.extend([57,58])
&lt;/pre&gt;

&lt;pre&gt;
'''Output:
[11, 23, 12, 23, 45, [57, 58]]
[11, 23, 12, 23, 45, 57, 58]'''
&lt;/pre&gt;

[[#TOP]]

==Basic Operations on List==
===Frequency of Occurrence===
list.count(object) will return the number of times the object occur in the list.
  '''Example'''
    ages = [11,23,12,23,45,43,22,24,23]
    ages.count(23) will return
    3
    ages.count(100) will return
    0

===Length of the List===
len(list) will return the length of the list ie. the number of objects in the list.
  '''Example'''
&lt;pre&gt;
    ages = [11,23,12,23,45,43,22,24,23]
    len(ages) # Output: 9
&lt;/pre&gt;

To print the objects in the list either use ''for item in list'' or ''for index in range(len(list))''
&lt;pre&gt;
    for item in ages:       
        print (item)  
        (OR)
    for index in range(len(ages)) :
        print (ages[index])
&lt;/pre&gt;

===Sort the List===
list.sort() will sort the list in ascending order
  '''Example'''
    ages = [11,23,12,23,45,43,22,24,23]
    ages.sort() 
    print (ages) 
    [11, 12, 22, 23, 23, 23, 24, 43, 45]

[[#TOP]]

===Sort the List using sorted() function===
sorted(list1) will sort the list and return a new list, it doesn't modify the original list
&lt;br&gt;'''Example: Sort in ascending order'''
&lt;pre&gt;
ages = [11,23,12,23,45,43,22,24,23]
newList=sorted(ages)
print(newList)

#Output: [11, 12, 22, 23, 23, 23, 24, 43, 45]
&lt;/pre&gt;

&lt;br&gt;'''Example: Sort in descending order'''
&lt;pre&gt;
ages = [11,23,12,23,45,43,22,24,23]
newList=sorted(ages,reverse=True)
print(newList)

#Output: [45, 43, 24, 23, 23, 23, 22, 12, 11]
&lt;/pre&gt;

===Reverse the List===
list.reverse() will reverse the original list
  '''Example'''
    ages = [11, 12, 22, 23, 23, 23, 24, 43, 45]
    ages.reverse()
    print (ages)
    [45, 43, 24, 23, 23, 23, 22, 12, 11]

Both sort() and reverse() list operation will work on numeric and alphanumeric data list.

A special use of the reverse() function is to descend a list that is sorted in ascending order.

  '''Example'''
&lt;pre&gt;
ages = [11, 12, 22, 23, 23, 23, 24, 43, 45]
ages.sort()
print(ages)
ages.reverse()
print(ages)
&lt;/pre&gt;

===Slicing===
Used to retrieve an object or objects in a range as a list  
  '''Example'''

Use ''list[index]'' to retrieve the object at the given index
&lt;pre&gt;
In [1]: student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
In [2]: student[3]     #Object at index 3.  Remember index starts at 0
Out[2]: 'Geetha'      
&lt;/pre&gt;

Use ''list[start_index : end_index + 1]'' to retrieve objects from the start_index to end_index 
&lt;pre&gt;
In [3]: student[2:4]     # Objects from index 2 to 3 as List. Note the [ and ]
Out[3]: ['Vijay', 'Geetha']   
&lt;/pre&gt;

Use ''list[:]'' to retrieve objects from the starting of the list to the end of the list. 
The default start value will be the starting index of the list (i.e. 0) and the default end value
will be the length of the list 
&lt;pre&gt;
In [4]: student[:]        # prints the entire list
Out[4]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma', 'Janani']
&lt;/pre&gt;
&lt;pre&gt;
In [5]: student[:5]       # prints the objects from the start of the list upto object at index 4
Out[5]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran']
&lt;/pre&gt;
&lt;pre&gt;
In [6]: student[2:]       # prints the objects from index 2 upto the end of the list
Out[6]: ['Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma', 'Janani']
&lt;/pre&gt;

Negative index too is available in Python. It starts from last element of the list. i.e.
&lt;pre&gt;
In [7]:student[-1]        #prints last index of list
Out[7]: 'Janani'
&lt;/pre&gt;
&lt;pre&gt;
In [8]:student[-1:-8]     #prints empty list
Out[8]: []
&lt;/pre&gt;
&lt;pre&gt;
In [9]:student[-8:-1]     #prints -8th index to -1st index elements
Out[9]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma']
&lt;/pre&gt;

[[#TOP]]

===Removing Item from list ===
----

Is used to remove a specific item from the list.

'''Example:'''
 
Use list.remove(entry/value)  Or   del list[index]    Or list.pop(index)
&lt;pre&gt;
student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
student.remove(&quot;Arun&quot;)   #This will delete item &quot;Arun&quot;
         Or    
del student[0]           # This will delete item at index 0
         Or
student.pop(0)         # This will delete and return item at index 0
print(student)    
Output: &quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
&lt;/pre&gt;

[[#TOP]]

===Delete list ===
----
Used to delete complete list

'''Example'''

Use del &lt;list name&gt;
&lt;pre&gt;
student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
del student&lt;/pre&gt;

===Concatenation of two lists===
----
''+'' is the concatenation operator which is used concatenate two lists. 
&lt;pre&gt;
ages1 = [11,23,12,23,45]
ages2 = [25, 24, 43, 47]
age=ages1+ages2
print(age)
#Output: [11, 23, 12, 23, 45, 25, 24, 43, 47]
&lt;/pre&gt;

===Repeatation of a list ===
----
''*'' is the operator to repeat a particular list.
&lt;pre&gt;
ages1 = [11,23,12,23,45]
age=ages1*5 #ages1 list is repeated 5 times and stroed in ''age'' list
print(age)

#Output: [11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45]
&lt;/pre&gt;

=== all and any for List===
all() and any() are special functions to check whether all elements in iterable is ''True'' or any element is ''True''
&lt;ol&gt;
&lt;li&gt;If all elements in a list are ''True'', '''all()''' will return ''True''&lt;/li&gt;
&lt;li&gt;If iterable is ''empty'', '''all()''' will return ''True''&lt;/li&gt;
&lt;li&gt;If iterable contains at least one ''True'', '''any()''' will return ''True''&lt;/li&gt;
&lt;li&gt;If iterable is ''empty'', '''any()''' will return ''False''&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;
lsit=[True, True, True, True]
print(all(lsit))#Output: True
print(any(lsit))#Output: True

lsit1=[True, False, True, True]
print(all(lsit1))#Output: False
print(any(lsit1))#Output: True

lsit2=[False,False,False]
print(all(lsit2))#Output: False
print(any(lsit2))#Output: False

lsit3=[]
print(all(lsit3))#Output: True
print(any(lsit3))#Output: False
&lt;/pre&gt;

==Conditional Statements==
&lt;pre&gt;Conditionals are used to check the condition and change the flow of the program 
accordingly. They are realized in programming languages through if statement. The 
syntax is as follows :
&lt;pre&gt;
         if condition : 
            statement
&lt;/pre&gt;
    '''Note:''' Do not forget indentation (inserting space/tab) in the line after the
 if condition.
    
    In case you want to execute a set of statements when a condition is true and another

set of statement when the condition is false.
&lt;pre&gt;
         if condition : 
            statement 1
         else :
            statement 2
&lt;/pre&gt;

&lt;pre&gt;    
    Multiple if-else statements can be written as follows:
         if condition_1 : 
            statement 1
         elif condition_2 : # 'elif' is short for 'else if'
            statement 2
         elif condition_3 :
            statement 3
        .
        .
         else :
            final statement
&lt;/pre&gt;

[[#TOP]]

=Loops and Conditionals : Fizzbuzz=
====Loops====
Loops are used to execute a set of repetitive statements. They are realised
through 'while' and 'for' loops in programming languages. The syntax of 'for' loop is 
as follows :
&lt;pre&gt;
for LOOPVARIABLE in SEQUENCE: 
            STATEMENTS&lt;/pre&gt;

    '''e.g.''' to print all the data from a list we can write:
&lt;pre&gt;
for item in list_name:
      print(item)&lt;/pre&gt;
    OR
&lt;pre&gt;
for index in range(len(list_name)):
      print(list_name[index])
 &lt;/pre&gt;   
    The syntax for while loop is as follows :
&lt;pre&gt;    
while BOOLEANEXPRESSION: 
     STATEMENTS
     INCREMENT/DECREMENT
&lt;/pre&gt;    
    '''e.g.''' if we want to print all numbers from 1 to 10
&lt;pre&gt;
i=1
while i&lt;=10 :
    print(i,&quot; &quot;)
    i=i+1
    &lt;/pre&gt;
 
'while' loop has indefinite iteration (run-time unknown). So, there must be loop,  break statement in it.
 Whereas 'for' loop is definite in nature (i.e. known or predictable span).&lt;br&gt;

&lt;b&gt;NOTE: Python doesn't have anything like do-while loop.&lt;/b&gt;

[[#TOP]]

==Implementation==
Here, we try to demonstrate the concept of loops and conditionals through a game called Fizzbuzz. The rules are as follows :&lt;br/&gt;
[[File:fizzBuzz.gif]]

• if input number is a multiple of ’3’ print ”Fizz”
&lt;br/&gt;
• if input number is a multiple of ’5’ print ”Buzz”
&lt;br/&gt;
• if input number is a multiple of both '3' and ’5’ print ”FizzBuzz”
&lt;br/&gt;
The pseudo code is as follows :
&lt;pre&gt;
   If input no % 3 == 0 and  input no % 5 == 0 : 
       print ”Fizzbuzz”
   else if input no % 3 == 0 : 
       print ”Fizz”
   else if input no % 5 == 0 : 
       print ”Buzz”
   else :
       print the input no
&lt;/pre&gt;
 &lt;p style=&quot;text-align:justify&quot;&gt;
The order of statements execution matters to get the desired output. The highest priority condition should be first followed by other. In fizzbuzz programming, first checking should be done for both divisibility of 3 and 5. If condition not satisfied only then it should check individually for 3 or 5. So carefully choosing the order is crucial for better programming.
Note: There is some effect of present condition statements chosen on next conditions statements. That is why in first attempt fizzbuzz programming got struck.&lt;/p&gt;

Example: 
&lt;pre&gt;
#Code to achieve the above requirement in python3.
i = int(input(&quot;Enter the number&quot;)) 
if i%3 == 0 and i%5 == 0: print(i,&quot;FizzBuzz&quot;)  
elif i%5 == 0: print(i,&quot;Buzz&quot;)
elif i%3 == 0: print(i,&quot;Fizz&quot;)
else: print(i)
&lt;/pre&gt;
Lets put the same into a loop for a range given by the user.
&lt;pre&gt;
def fizzbuzzgame(start,stop):
    for i in range(start,stop+1):
        if i%3 == 0 and i%5 == 0:
            print(i,&quot;FizzBuzz&quot;)
        elif i%5 == 0:
            print(i,&quot;Buzz&quot;)
        elif i%3 == 0:
            print(i,&quot;Fizz&quot;)
        else: print(i)

fizzbuzzgame(50,100)
&lt;/pre&gt;
&lt;pre&gt;
#Output:
1235
Buzz
======================================
555
Fizzbuzz
======================================
1235
Buzz
======================================
999
Fizz
&lt;/pre&gt;

=== Fizz Buzz game in Interactive mode with Score ===
'''By Ms. Ami Tusharkant Choksi'''
&lt;pre&gt;
def fizzbuzzgame(i):
        if i%3 == 0 and i%5 == 0:
            print(i,&quot;FizzBuzz&quot;)
            return(&quot;fzbz&quot;)
        elif i%5 == 0:
            print(i,&quot;Buzz&quot;)
            return(&quot;bz&quot;)
        elif i%3 == 0:
            print(i,&quot;Fizz&quot;)
            return(&quot;fz&quot;)
        else:
            print(i)
            return(&quot;no&quot;)

ch = 'y'
fizzbuzz=0
fizz=0
buzz=0
nothing=0
print(&quot;&quot;&quot;

 /$$$$$$$$/$$                  /$$$$$$$                            
| $$_____|__/                 | $$__  $$                           
| $$      /$$/$$$$$$$$/$$$$$$$| $$  \ $$/$$   /$$/$$$$$$$$/$$$$$$$$
| $$$$$  | $|____ /$$|____ /$$| $$$$$$$| $$  | $|____ /$$|____ /$$/
| $$__/  | $$  /$$$$/   /$$$$/| $$__  $| $$  | $$  /$$$$/   /$$$$/ 
| $$     | $$ /$$__/   /$$__/ | $$  \ $| $$  | $$ /$$__/   /$$__/  
| $$     | $$/$$$$$$$$/$$$$$$$| $$$$$$$|  $$$$$$//$$$$$$$$/$$$$$$$$
|__/     |__|________|________|_______/ \______/|________|________/
                                                                  
&quot;&quot;&quot;)   
print('''

  /$$$$$$                                
 /$$__  $$                               
| $$  \__/ /$$$$$$ /$$$$$$/$$$$  /$$$$$$ 
| $$ /$$$$|____  $| $$_  $$_  $$/$$__  $$
| $$|_  $$ /$$$$$$| $$ \ $$ \ $| $$$$$$$$
| $$  \ $$/$$__  $| $$ | $$ | $| $$_____/
|  $$$$$$|  $$$$$$| $$ | $$ | $|  $$$$$$$
 \______/ \_______|__/ |__/ |__/\_______/
                                     
''')

while(ch == 'y'):
    n=int(input(&quot;Enter a Number : &quot;))
    winLoose=fizzbuzzgame(n)
    if(winLoose == &quot;fz&quot;):
        fizz+=1
    elif(winLoose == &quot;bz&quot;):
        buzz+=1
    elif(winLoose == &quot;fzbz&quot;):
        fizzbuzz+=1
    ch=input(&quot;Do you want to continue playing the game : (y/n)&quot;)
    if(ch=='n'):
        print('Congratulations, your score is\n FizzBuzz:%d\nFizz:%d\nBuzz:%d' %
(fizzbuzz,fizz,buzz))
    
'''Sample Output:

 /$$$$$$$$/$$                  /$$$$$$$                            
| $$_____|__/                 | $$__  $$                           
| $$      /$$/$$$$$$$$/$$$$$$$| $$  \ $$/$$   /$$/$$$$$$$$/$$$$$$$$
| $$$$$  | $|____ /$$|____ /$$| $$$$$$$| $$  | $|____ /$$|____ /$$/
| $$__/  | $$  /$$$$/   /$$$$/| $$__  $| $$  | $$  /$$$$/   /$$$$/ 
| $$     | $$ /$$__/   /$$__/ | $$  \ $| $$  | $$ /$$__/   /$$__/  
| $$     | $$/$$$$$$$$/$$$$$$$| $$$$$$$|  $$$$$$//$$$$$$$$/$$$$$$$$
|__/     |__|________|________|_______/ \______/|________|________/
                                                                                                                                   

  /$$$$$$                                
 /$$__  $$                               
| $$  \__/ /$$$$$$ /$$$$$$/$$$$  /$$$$$$ 
| $$ /$$$$|____  $| $$_  $$_  $$/$$__  $$
| $$|_  $$ /$$$$$$| $$ \ $$ \ $| $$$$$$$$
| $$  \ $$/$$__  $| $$ | $$ | $| $$_____/
|  $$$$$$|  $$$$$$| $$ | $$ | $|  $$$$$$$
 \______/ \_______|__/ |__/ |__/\_______/
                                         

Enter a Number : 666
666 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 777
777 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 555
555 FizzBuzz
Do you want to continue playing the game : (y/n)y
Enter a Number : 1
1
Do you want to continue playing the game : (y/n)y
Enter a Number : 789
789 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 25
25 Buzz
Do you want to continue playing the game : (y/n)n
Congratulations, your score is

FizzBuzz:1
Fizz:3
Buzz:1

&lt;/pre&gt;

=Crowd Computing: Just Estimate=
==Wisdom of Crowds==
 &lt;p style=&quot;text-align:justify&quot;&gt;
The concept of ’Wisdom of Crowds’ was proposed by Francis Galton. A weight-judging competition was carried on at the annual show of the West of England Fat Stock and Poultry Exhibition recently held at Plymouth, A fat ox having been selected, competitors bought stamped and numbered cards, each, on which to inscribe their respective names, addresses, and estimates of what the ox would weigh after it had been slaughtered. Those who guessed most successfully received prizes. About 8oo tickets were issued to the par- ticipants. The middlemost estimate of all the estimates recorded was 1207 lbs and the actual weight of the ox was 1198 lbs.&lt;/p&gt;

==Our Experiment==
 &lt;p style=&quot;text-align:justify&quot;&gt;
The crowd had to guess the number of candies/gems in a jar. Around 75 people participated in the experiment. The actual number of gems in the jar were 375. The median of all estimates came out to be 300 and the mean of all the estimates came out to be around 396. Median underestimated and mean overestimated the actual value. So according to recent studies, Trimmed mean must be used as an aggregate measure to estimate where Wisdom of Crowds is involved.
&lt;/p&gt;
[[File:Gemsjar.jpg|center|200px|caption]]

===Trimmed Mean===
 &lt;p style=&quot;text-align:justify&quot;&gt;
In these kinds of experiments, 10% trimmed mean is usually followed. For calculating 10% trimmed mean, remove 10% smallest and 10% largest values from the sample. Calculate the mean of the sample obtained. In the above experiment, the trimmed mean came out to be around 351 which is very close to the actual value.&lt;/p&gt;

==Implementation==
Here, we try to demonstrate the concept of trimmed mean through crowd computing.
&lt;ol&gt;
&lt;li&gt; Input a list of estimates done by the crowd .&lt;/li&gt;
&lt;li&gt; Sort the list.&lt;/li&gt;
&lt;li&gt; Remove the 10% smallest values.&lt;/li&gt;
&lt;li&gt; Remove the 10% largest values.
&lt;li&gt; Calculate the mean of the new list obtained .&lt;/li&gt;&lt;/ol&gt;&lt;hr&gt;

==Data of Experiment==       
    Estimates =[1000,1010,1786,2000,1500,1500,100,120,150,150,150,170,175,180,197,200,200,200,200,200,200,220,220,220,220,234,250,250,250,250,250,250,250,250,250,263,270,275,275,286,300,
                300,300,300,300,300,300,300,320,350,350,350,400, 400,400,400,400,450,467,500,500,500,500,500,500,500,550,550,600,600,600,650,700,700,720]

    '''CODE:'''
&lt;pre&gt;
Estimates = [1000,1010,1786,2000,1500,1500,100,120,150,150,150,170,175,180,197,200,200,200,200,200,200,220,220,220,220,234,250,250,250,250,250,250,250,250,250,263,270,275,275,286,300,                300,300,300,300,300,300,300,320,350,350,350,400,400,400,400,400,450,467,500,500,500,500,500,500,500,550,550,600,600,600,650,700,700,720]
Estimates.sort()
offset = int(0.10*len(Estimates))
for i in range(offset):
       del Estimates[0]
       del Estimates[-1]
Sum = 0    
for i in range(len(Estimates)):
       Sum += Estimates[i]
Mean_Value = Sum/len(Estimates)
print(&quot;Mean : &quot;, int(Mean_Value))
#Output:
Mean :  351
&lt;/pre&gt;
&lt;hr&gt;
==Trimmed Mean for the above example== 
&lt;h3&gt;Using scipy library&lt;/h3&gt;
&lt;pre&gt;
#import scipy to use the method of trim_mean
from scipy import stats
trimMean = stats.trim_mean(Estimates, 0.1) # Trim 10% at both ends
print(&quot;Trimmed Mean : &quot;,trimMean)
#Output:
Trimmed Mean :  335.1020408163265
&lt;/pre&gt;

&lt;h3&gt;Without using scipy library&lt;/h3&gt;
&lt;pre&gt;
#Trimmed mean with 10%
p=10/100
#sorted data
data=[2, 4, 6, 7, 11, 21, 81, 90, 105, 121]
n = len(data)
#Remove elements from both end
rem=int(n*p)
newData = data[rem:-rem]
mean = 0
for i in newData:
    mean += i
mean = int(mean/len(newData))
print(&quot;Trimmed mean : &quot;,mean)
#Output: Trimmed mean :  40
&lt;/pre&gt;
[[#Top]]

=Jumbled_Words Permutations: Jumbled Words=
==What are Permutations ?==
A permutation also called ordering of selected number of elements from a list denoted by nPr here we are choosing all elements of a list and so n=r&lt;br&gt;
nPr=n!/(n-r)!&lt;br&gt; as n=r
nPn=n!&lt;br&gt; which gives all possible arrangement of elements present in a list.

 For example, permutations of list [1,2,3] are [1,2,3], [1,3,2], [2,1,3], [2,3,1], 
[3,1,2], and [3,2,1]. 
The number of permutations of a list of elements nPn is given by n!. For example, there are 2! = 2 x 1 = 2 permutations of [1,2], namely [1,2] and [2,1], and 3! = 3 x 2 x 1 = 6 permutations of [1,2,3], as mentioned above.&lt;br/&gt;
[[File:Permutations.jpg]]

==Implementation==
 &lt;p style=&quot;text-align:justify&quot;&gt;
Here, we try to demonstrate the concept of permutations through jumbled words. It is a two player game in which one person presents the other person a different permutation of the word in his mind. The other person has to guess the right word. If he guesses, the he wins otherwise he loses.&lt;/p&gt;
 Input an list of words.
 Randomly pick a word from the list of words .
 Shuffle this word and present it to the other player.
 if word guesses by the player is same as the one picked from list of w
     player wins
 else
     player loses

ALTERNATE CODE TO GENERATE THIS GAME:
&lt;pre&gt;
import random
p1=input(&quot;enter player 1 name:&quot;)
p2=input(&quot;enter player 2 name:&quot;)
l=[&quot;rainbow&quot;,&quot;computer&quot;,&quot;robot&quot;,&quot;butter&quot;,&quot;vegetable&quot;,&quot;science&quot;,&quot;correct&quot;]
c1=c2=a1=a2=f1=f2=0
k=1
i=3
def play():
    n=random.choice(l)        ##n=chooses a word from list l
    l1=[]
    for j in n:
       l1.append(j)      ##creates a list for word in n
    for t in range(len(l1)):
       p=random.choice(l1)     ##this randomly displays letters in the list
       print(p)
       l1.remove(p)          ##to avoid the repetition of a letter
    s=input(&quot;enter the word:&quot;)
    if(s==n):
        print(&quot;correct&quot;)
        return 1
    else:
        print(&quot;not correct&quot;)
        print(&quot;answer is&quot;,n)
        return 0
def stat():
     print(&quot;player 1:&quot;)
     print(&quot;score:&quot;,c1)
     print(&quot;answered:&quot;,a1)
     print(&quot;failed:&quot;,f1)
     print(&quot;.............&quot;)
     print(&quot;player 2:&quot;)
     print(&quot;score:&quot;,c2)
     print(&quot;answered:&quot;,a2)
     print(&quot;failed&quot;,f2)
     if(c1&gt;c2):
         print(p1,&quot; won over &quot;,p2)
     elif(c1==c2):
         print(&quot;draw game&quot;)
     else:
         print(p2,&quot; won over &quot;,p1) 
while(i!=4):
      if(i==3):
         if(k==1):
             print(&quot;player 1 turn&quot;)
             print(&quot;your jumbled word is:&quot;)
             k=k+1
             m=play()
             if(m==1):      ##if guessed answer is correct,then score and no.of answered count will be increased
                c1+=1
                a1+=1
             else:
                f1+=1       ##else count of no.of failed to answered will be incremented
         else:
             print(&quot;player 2 turn&quot;)
             print(&quot;your jumbled word is:&quot;)
             k=k-1
             m=play()
             if(m==1):
                c2=c2+1
                a2=a2+1
             else:
                f2=f2+1
       if(i==2):
             print(&quot;present status&quot;)
             stat()
       i=int(input(&quot;enter your choice  1.stop 2.status 3.continue&quot;))
       if(i==1):
             stat()
             i=i+3
&lt;/pre&gt;
&lt;hr&gt;
=== JumbledWord Simple Logic, In Short ===
[[File:jumbledWord.gif]]
&lt;hr&gt;
'''Logic to create a Jumbled Word'''
&lt;hr&gt;
&lt;pre&gt;
#Get Jumbled Word and print it Horizontally
import random

def getJumbledWord(b):
    jumble=''
    l1 = [ b[i] for i in range(0, len(b)) ]
    for t in range(len(l1)):
       p=random.choice(l1)     ##this randomly gets letters from the list      
       jumble=jumble+p       
       l1.remove(p)
    return jumble

b=input(&quot;Enter a word to make it jumbled : &quot;)
print(&quot;Jumbled Word : &quot;, getJumbledWord(b))
&lt;/pre&gt;
&lt;hr&gt;
'''Another Logic to create a Jumbled Word'''
&lt;hr&gt;
&lt;pre&gt;
import random
b=input(&quot;Enter a word to make it jumbled : &quot;)

def getJumbledWord1(b):
    l1 = [ b[i] for i in range(0, len(b)) ]
    random.shuffle(l1)
    str1 = ''.join(l1)
    return str1

print(&quot;Jumbled Word : &quot;, getJumbledWord1(b))
&lt;/pre&gt;

====Sample Output:====
&lt;pre&gt;
---- Output1 
Enter a word to make it jumbled : butter
Jumbled Word :  tbture

---- Output2 
Enter a word to make it jumbled : petriotism
Jumbled Word :  pittrosime
&lt;/pre&gt;

=Theory of Evolution=

== What is Evolution ? ==
Evolution is the change in heritable characteristics over successive generations. The theory of evolution explains that DNA, which acts as a carrier of genetic information from one generation to other, tends to change or mutate occasionally. These changes are reflected in next generations to come. This is how life has evolved on earth from bacteria to human beings.&lt;br&gt;
[[File:Evolution.png|500px]]

== Implementation ==
 &lt;p style=&quot;text-align:justify&quot;&gt;
An array representing DNA is stored in a file. As genes are forms of DNA, they contain information to be transferred to forthcoming generations. Assume that information is in the form of bits (in the form of 0s and 1s). A number is picked randomly from 1 to the size of the array. A new parameter has been introduced which decides whether mutation would occur or not. If the value of this new parameter is 1 (It is picked randomly from 1 to 100), then only change is reflected down the generations, otherwise it is not. The pseudo code is as follows :
&lt;/p&gt;
Input an array containing genetic information .
Randomly generate a number (say m) from 1 to length of the array. Randomly generate other number (say p) from 1 to 100.

&lt;pre&gt; 
    if p is equal to 1 then 
        if m is 1 then
          set it to 0
        else
          set it to 1
&lt;/pre&gt;
[[#TOP]]</text>
      <sha1>ds6knog6455reyth54d6avwbiq4fwl8</sha1>
    </revision>
    <revision>
      <id>3624</id>
      <parentid>3623</parentid>
      <timestamp>2018-09-28T04:41:20Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* JumbledWord Simple Logic, In Short */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="30449">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_3 Contributors of this page]
*Week 3 Playlist: https://www.youtube.com/playlist?list=PLc_j0TNIaWxOVx_z9jAM2UB3RqYNXaoEo
=List=
List is a flexible data structure used for storing a group of data separated by comma. The elements in a list need not be of the same data type.

'''Example:'''
       List_1 = [ 1, 2,3] or 
       List_1 = [&quot;coffee&quot;, &quot;Tea&quot;, &quot;Milk&quot;] or
       List_1 = [1,&quot;coffee&quot;, &quot;Tea&quot;, 3, &quot;5&quot;]

==List Creation==
&lt;pre&gt;a) A list can be created by simply putting values (separated by comma) between square brackets as given below,
       List_1 = [1,&quot;coffee&quot;, &quot;Tea&quot;, 3, &quot;5&quot;] #this creates a list by name List_1 containing following items


Or,
(b)A List can be created from scratch and elements can be added 
        List_2 = [ ]
        List_2.append(&quot;Kala&quot;)
        List_2.append(&quot;Mala&quot;)
Here we use &quot;append&quot; ,which is a function in python that enable us to append or attach an element to a list .
Thus List_2 will now hold [&quot;Kala&quot;,&quot;Mala&quot;]
&lt;/pre&gt;
[[#TOP]]

==Operations and Methods to work with List==
&lt;pre&gt;
a = [25,30,50,90,12,13]
b = [100,300,500,200,250]
&lt;/pre&gt;
&lt;hr&gt;
&lt;table border=2&gt;
  &lt;tr&gt;
    &lt;th&gt;&lt;b&gt;Method/&lt;br&gt;Operator&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Function&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Syntax&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Output&lt;/b&gt;&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;len()&lt;/td&gt;
    &lt;td&gt;Find length of a list&lt;/td&gt;
    &lt;td&gt;len(a)&lt;/td&gt;
    &lt;td&gt;6&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;max()&lt;/td&gt;
    &lt;td&gt;Find maximum element from the list&lt;/td&gt;
    &lt;td&gt;max(a)&lt;/td&gt;
    &lt;td&gt;90&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;min()&lt;/td&gt;
    &lt;td&gt;Find minimum element from the list&lt;/td&gt;
    &lt;td&gt;min(a)&lt;/td&gt;
    &lt;td&gt;12&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sum()&lt;/td&gt;
    &lt;td&gt;Returns sum of all elements of the list&lt;/td&gt;
    &lt;td&gt;sum(a)&lt;/td&gt;
    &lt;td&gt;220&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;reverse()&lt;/td&gt;
    &lt;td&gt;Reverses the original list&lt;/td&gt;
    &lt;td&gt;a.reverse()&lt;/td&gt;
    &lt;td&gt;[13, 12, 90, 50, 30, 25]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sort()&lt;/td&gt;
    &lt;td&gt;Sorts the original list in ascending order&lt;/td&gt;
    &lt;td&gt;a.sort()&lt;/td&gt;
    &lt;td&gt;[12, 13, 25, 30, 50, 90]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sorted()&lt;/td&gt;
    &lt;td&gt;Returns the new sorted list &lt;/td&gt;
    &lt;td&gt;sorted(a)&lt;/td&gt;
    &lt;td&gt;[12, 13, 25, 30, 50, 90]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;insert()&lt;/td&gt;
    &lt;td&gt;Insert at a particular index in the list, and shifts remaining elements&lt;/td&gt;
    &lt;td&gt;a.insert(3,3)&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 3, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;append()&lt;/td&gt;
    &lt;td&gt;Adds elements/object to the end of the list&lt;/td&gt;
    &lt;td&gt;a.append(5)&lt;br&gt;a.append([10,20])&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 5]&lt;br&gt;[25, 30, 50, 90, 12, 13, [10, 20]]&lt;br&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;extend()&lt;/td&gt;
    &lt;td&gt;Adds object to the end of the list as elements not as object&lt;/td&gt;
    &lt;td&gt;a.extend([10,20])&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 10, 20]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;*&amp;nbsp;&amp;nbsp;Repeatation&lt;br&gt;operator&lt;/td&gt;
    &lt;td&gt;Repeat the list for n times and returns a new list&lt;/td&gt;
    &lt;td&gt;a*2&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 25, 30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;+ Concatenation&lt;br&gt;operator&lt;/td&gt;
    &lt;td&gt;Concatenates two lists, and returns a new list&lt;/td&gt;
    &lt;td&gt;a+b&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 100, 300, 500, 200, 250]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;index()&lt;/td&gt;
    &lt;td&gt;Finds index of a particular element in the list or not&lt;/td&gt;
    &lt;td&gt;a.index(25)&lt;br&gt;a.index(0)&lt;br&gt;&lt;/td&gt;
    &lt;td&gt;0&lt;br&gt;&lt;br&gt;ValueError: 0 is not in list&lt;br&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;in operator&lt;/td&gt;
    &lt;td&gt;Finds whether a particular element is in the list or not, returns boolean&lt;/td&gt;
    &lt;td&gt;25 in a&lt;/td&gt;
    &lt;td&gt;True&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;not in operator&lt;/td&gt;
    &lt;td&gt;Checks if element is not available in list, returns boolean&lt;/td&gt;
    &lt;td&gt;25 not in a&lt;/td&gt;
    &lt;td&gt;False&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;count()&lt;/td&gt;
    &lt;td&gt;Counts the number of occurence of an element in the list&lt;/td&gt;
    &lt;td&gt;a.count(25)&lt;/td&gt;
    &lt;td&gt;1&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;remove()&lt;/td&gt;
    &lt;td&gt;Removes an element from the list&lt;/td&gt;
    &lt;td&gt;a.remove(25)&lt;/td&gt;
    &lt;td&gt; [30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;pop()&lt;/td&gt;
    &lt;td&gt;Delete and return item at index 0&lt;/td&gt;
    &lt;td&gt;a.pop(0)&lt;/td&gt;
    &lt;td&gt;25 , a will be [30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;del&lt;/td&gt;
    &lt;td&gt;Deletes item at a particular index from the list&lt;/td&gt;
    &lt;td&gt;del a[0]&lt;/td&gt;
    &lt;td&gt;[30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;all()&lt;/td&gt;
&lt;td&gt;Returns True, if all items in list are True or it is an empty list&lt;/td&gt;
&lt;td&gt;all([True, True, True])
all([])
&lt;/td&gt;
&lt;td&gt;True&lt;br&gt;
True&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;any()&lt;/td&gt;
&lt;td&gt;Returns True, if any item in list is True else return False&lt;/td&gt;
&lt;td&gt;any([True, True, True])&lt;br&gt;
any([True, False, True])&lt;br&gt;
any([])&lt;/td&gt;
&lt;td&gt;True&lt;br&gt;False&lt;br&gt;False&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;

==Printing the List==
=== Print whole list ===
A list can be printed simply or using a ''for / while'' loop 

 print(List_2)     # To print the entire list
This code will print      
 ['Kala','Mala']     

===Print element at a particular index===
&lt;pre&gt;
Using index position
    List_2[0]     # prints 'Kala' ,i.e,the value at index position 0.
    List_2[1]     # prints 'Mala'.
&lt;/pre&gt;
=== Without using index position ===
&lt;pre&gt;
for item in List_2:   # here item is a variable used to access elements in list.
       print(item)
   This code snippet prints 
    Kala
    Mala
&lt;/pre&gt;
[[#TOP]]

==Search for a particular element in list==
Elements in a list can be searched by one of the two ways:
=== using index() function===
&lt;pre&gt;
ages1 = [11,23,12,23,45]

#if element is available in the list, index() returns the index value on which, the element is present.
print(ages1.index(45))#Output: 4

#if element is not available in the list, index() returns ''ValueError''
print(ages1.index(0))#Output: ValueError:
&lt;/pre&gt;

In programming, if such error occurs, program gets terminated. It can be solved using exception handling.
e.g.
&lt;pre&gt;
ages1 = [11,23,12,23,45]

try:
    print(ages1.index(0))
except ValueError:
    print(&quot;Exception has occured&quot;)    
    print(&quot;Element is not found in the list&quot;)

&lt;/pre&gt;
&lt;pre&gt;
'''Output: 
Exception has occured
Element is not found in the list
'''&lt;/pre&gt;
[[#TOP]]

=== using 'in' operator===
''in'' operator is used to check whether a particular element is available in the list or not.e.g.

&lt;pre&gt;
ages1 = [11,23,12,23,45]
no=11

if no in ages1:
    print(&quot;no is there in the list&quot;)
else:    
    print(&quot;no is NOT there in the list&quot;)
&lt;/pre&gt;
&lt;pre&gt;
#Output: no is there in the list
&lt;/pre&gt;


'''Number is not there in the list'''
&lt;pre&gt;
ages1 = [11,23,12,23,45]
no=15

if no in ages1:
    print(&quot;no is there in the list&quot;)
else:    
    print(&quot;no is NOT there in the list&quot;)
&lt;/pre&gt;
&lt;pre&gt;
Output: no is NOT there in the list
&lt;/pre&gt;
[[#TOP]]

==Updating the List==
The lists can be updated using ''append'' or ''insert'' function.  Append adds the element to the end of the list and Insert adds the element in the specified position.
&lt;pre&gt;
   # add the element 'Sheela' to the end of the list.
   List_2.append(&quot;Sheela&quot;)    
   print (List_2) will output 
   ['Kala', 'Mala', 'Sheela']
&lt;/pre&gt;
   &lt;pre&gt;
# add the element &quot;Bala&quot; in the list at the index 1.
   List_2.insert(1,&quot;Bala&quot;)    
   print (List_2) will output 
   ['Kala', 'Bala','Mala', 'Sheela']
&lt;/pre&gt;

=== Extend the list by adding elements of other list at end using extend()===
&lt;pre&gt;
ages = [11,23,12,23,45]
ages.extend([57,58])
print(ages)
&lt;/pre&gt;

&lt;pre&gt;
#Output: [11, 23, 12, 23, 45, 57, 58]
&lt;/pre&gt;

==== Difference between ''append and extend'' ====
Difference between append and extend can be easily understood, by the following example.

&lt;pre&gt;
appendlist = [11,23,12,23,45]
appendlist.append([57,58])

extendlist= [11,23,12,23,45]
extendlist.extend([57,58])
&lt;/pre&gt;

&lt;pre&gt;
'''Output:
[11, 23, 12, 23, 45, [57, 58]]
[11, 23, 12, 23, 45, 57, 58]'''
&lt;/pre&gt;

[[#TOP]]

==Basic Operations on List==
===Frequency of Occurrence===
list.count(object) will return the number of times the object occur in the list.
  '''Example'''
    ages = [11,23,12,23,45,43,22,24,23]
    ages.count(23) will return
    3
    ages.count(100) will return
    0

===Length of the List===
len(list) will return the length of the list ie. the number of objects in the list.
  '''Example'''
&lt;pre&gt;
    ages = [11,23,12,23,45,43,22,24,23]
    len(ages) # Output: 9
&lt;/pre&gt;

To print the objects in the list either use ''for item in list'' or ''for index in range(len(list))''
&lt;pre&gt;
    for item in ages:       
        print (item)  
        (OR)
    for index in range(len(ages)) :
        print (ages[index])
&lt;/pre&gt;

===Sort the List===
list.sort() will sort the list in ascending order
  '''Example'''
    ages = [11,23,12,23,45,43,22,24,23]
    ages.sort() 
    print (ages) 
    [11, 12, 22, 23, 23, 23, 24, 43, 45]

[[#TOP]]

===Sort the List using sorted() function===
sorted(list1) will sort the list and return a new list, it doesn't modify the original list
&lt;br&gt;'''Example: Sort in ascending order'''
&lt;pre&gt;
ages = [11,23,12,23,45,43,22,24,23]
newList=sorted(ages)
print(newList)

#Output: [11, 12, 22, 23, 23, 23, 24, 43, 45]
&lt;/pre&gt;

&lt;br&gt;'''Example: Sort in descending order'''
&lt;pre&gt;
ages = [11,23,12,23,45,43,22,24,23]
newList=sorted(ages,reverse=True)
print(newList)

#Output: [45, 43, 24, 23, 23, 23, 22, 12, 11]
&lt;/pre&gt;

===Reverse the List===
list.reverse() will reverse the original list
  '''Example'''
    ages = [11, 12, 22, 23, 23, 23, 24, 43, 45]
    ages.reverse()
    print (ages)
    [45, 43, 24, 23, 23, 23, 22, 12, 11]

Both sort() and reverse() list operation will work on numeric and alphanumeric data list.

A special use of the reverse() function is to descend a list that is sorted in ascending order.

  '''Example'''
&lt;pre&gt;
ages = [11, 12, 22, 23, 23, 23, 24, 43, 45]
ages.sort()
print(ages)
ages.reverse()
print(ages)
&lt;/pre&gt;

===Slicing===
Used to retrieve an object or objects in a range as a list  
  '''Example'''

Use ''list[index]'' to retrieve the object at the given index
&lt;pre&gt;
In [1]: student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
In [2]: student[3]     #Object at index 3.  Remember index starts at 0
Out[2]: 'Geetha'      
&lt;/pre&gt;

Use ''list[start_index : end_index + 1]'' to retrieve objects from the start_index to end_index 
&lt;pre&gt;
In [3]: student[2:4]     # Objects from index 2 to 3 as List. Note the [ and ]
Out[3]: ['Vijay', 'Geetha']   
&lt;/pre&gt;

Use ''list[:]'' to retrieve objects from the starting of the list to the end of the list. 
The default start value will be the starting index of the list (i.e. 0) and the default end value
will be the length of the list 
&lt;pre&gt;
In [4]: student[:]        # prints the entire list
Out[4]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma', 'Janani']
&lt;/pre&gt;
&lt;pre&gt;
In [5]: student[:5]       # prints the objects from the start of the list upto object at index 4
Out[5]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran']
&lt;/pre&gt;
&lt;pre&gt;
In [6]: student[2:]       # prints the objects from index 2 upto the end of the list
Out[6]: ['Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma', 'Janani']
&lt;/pre&gt;

Negative index too is available in Python. It starts from last element of the list. i.e.
&lt;pre&gt;
In [7]:student[-1]        #prints last index of list
Out[7]: 'Janani'
&lt;/pre&gt;
&lt;pre&gt;
In [8]:student[-1:-8]     #prints empty list
Out[8]: []
&lt;/pre&gt;
&lt;pre&gt;
In [9]:student[-8:-1]     #prints -8th index to -1st index elements
Out[9]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma']
&lt;/pre&gt;

[[#TOP]]

===Removing Item from list ===
----

Is used to remove a specific item from the list.

'''Example:'''
 
Use list.remove(entry/value)  Or   del list[index]    Or list.pop(index)
&lt;pre&gt;
student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
student.remove(&quot;Arun&quot;)   #This will delete item &quot;Arun&quot;
         Or    
del student[0]           # This will delete item at index 0
         Or
student.pop(0)         # This will delete and return item at index 0
print(student)    
Output: &quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
&lt;/pre&gt;

[[#TOP]]

===Delete list ===
----
Used to delete complete list

'''Example'''

Use del &lt;list name&gt;
&lt;pre&gt;
student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
del student&lt;/pre&gt;

===Concatenation of two lists===
----
''+'' is the concatenation operator which is used concatenate two lists. 
&lt;pre&gt;
ages1 = [11,23,12,23,45]
ages2 = [25, 24, 43, 47]
age=ages1+ages2
print(age)
#Output: [11, 23, 12, 23, 45, 25, 24, 43, 47]
&lt;/pre&gt;

===Repeatation of a list ===
----
''*'' is the operator to repeat a particular list.
&lt;pre&gt;
ages1 = [11,23,12,23,45]
age=ages1*5 #ages1 list is repeated 5 times and stroed in ''age'' list
print(age)

#Output: [11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45]
&lt;/pre&gt;

=== all and any for List===
all() and any() are special functions to check whether all elements in iterable is ''True'' or any element is ''True''
&lt;ol&gt;
&lt;li&gt;If all elements in a list are ''True'', '''all()''' will return ''True''&lt;/li&gt;
&lt;li&gt;If iterable is ''empty'', '''all()''' will return ''True''&lt;/li&gt;
&lt;li&gt;If iterable contains at least one ''True'', '''any()''' will return ''True''&lt;/li&gt;
&lt;li&gt;If iterable is ''empty'', '''any()''' will return ''False''&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;
lsit=[True, True, True, True]
print(all(lsit))#Output: True
print(any(lsit))#Output: True

lsit1=[True, False, True, True]
print(all(lsit1))#Output: False
print(any(lsit1))#Output: True

lsit2=[False,False,False]
print(all(lsit2))#Output: False
print(any(lsit2))#Output: False

lsit3=[]
print(all(lsit3))#Output: True
print(any(lsit3))#Output: False
&lt;/pre&gt;

==Conditional Statements==
&lt;pre&gt;Conditionals are used to check the condition and change the flow of the program 
accordingly. They are realized in programming languages through if statement. The 
syntax is as follows :
&lt;pre&gt;
         if condition : 
            statement
&lt;/pre&gt;
    '''Note:''' Do not forget indentation (inserting space/tab) in the line after the
 if condition.
    
    In case you want to execute a set of statements when a condition is true and another

set of statement when the condition is false.
&lt;pre&gt;
         if condition : 
            statement 1
         else :
            statement 2
&lt;/pre&gt;

&lt;pre&gt;    
    Multiple if-else statements can be written as follows:
         if condition_1 : 
            statement 1
         elif condition_2 : # 'elif' is short for 'else if'
            statement 2
         elif condition_3 :
            statement 3
        .
        .
         else :
            final statement
&lt;/pre&gt;

[[#TOP]]

=Loops and Conditionals : Fizzbuzz=
====Loops====
Loops are used to execute a set of repetitive statements. They are realised
through 'while' and 'for' loops in programming languages. The syntax of 'for' loop is 
as follows :
&lt;pre&gt;
for LOOPVARIABLE in SEQUENCE: 
            STATEMENTS&lt;/pre&gt;

    '''e.g.''' to print all the data from a list we can write:
&lt;pre&gt;
for item in list_name:
      print(item)&lt;/pre&gt;
    OR
&lt;pre&gt;
for index in range(len(list_name)):
      print(list_name[index])
 &lt;/pre&gt;   
    The syntax for while loop is as follows :
&lt;pre&gt;    
while BOOLEANEXPRESSION: 
     STATEMENTS
     INCREMENT/DECREMENT
&lt;/pre&gt;    
    '''e.g.''' if we want to print all numbers from 1 to 10
&lt;pre&gt;
i=1
while i&lt;=10 :
    print(i,&quot; &quot;)
    i=i+1
    &lt;/pre&gt;
 
'while' loop has indefinite iteration (run-time unknown). So, there must be loop,  break statement in it.
 Whereas 'for' loop is definite in nature (i.e. known or predictable span).&lt;br&gt;

&lt;b&gt;NOTE: Python doesn't have anything like do-while loop.&lt;/b&gt;

[[#TOP]]

==Implementation==
Here, we try to demonstrate the concept of loops and conditionals through a game called Fizzbuzz. The rules are as follows :&lt;br/&gt;
[[File:fizzBuzz.gif]]

• if input number is a multiple of ’3’ print ”Fizz”
&lt;br/&gt;
• if input number is a multiple of ’5’ print ”Buzz”
&lt;br/&gt;
• if input number is a multiple of both '3' and ’5’ print ”FizzBuzz”
&lt;br/&gt;
The pseudo code is as follows :
&lt;pre&gt;
   If input no % 3 == 0 and  input no % 5 == 0 : 
       print ”Fizzbuzz”
   else if input no % 3 == 0 : 
       print ”Fizz”
   else if input no % 5 == 0 : 
       print ”Buzz”
   else :
       print the input no
&lt;/pre&gt;
 &lt;p style=&quot;text-align:justify&quot;&gt;
The order of statements execution matters to get the desired output. The highest priority condition should be first followed by other. In fizzbuzz programming, first checking should be done for both divisibility of 3 and 5. If condition not satisfied only then it should check individually for 3 or 5. So carefully choosing the order is crucial for better programming.
Note: There is some effect of present condition statements chosen on next conditions statements. That is why in first attempt fizzbuzz programming got struck.&lt;/p&gt;

Example: 
&lt;pre&gt;
#Code to achieve the above requirement in python3.
i = int(input(&quot;Enter the number&quot;)) 
if i%3 == 0 and i%5 == 0: print(i,&quot;FizzBuzz&quot;)  
elif i%5 == 0: print(i,&quot;Buzz&quot;)
elif i%3 == 0: print(i,&quot;Fizz&quot;)
else: print(i)
&lt;/pre&gt;
Lets put the same into a loop for a range given by the user.
&lt;pre&gt;
def fizzbuzzgame(start,stop):
    for i in range(start,stop+1):
        if i%3 == 0 and i%5 == 0:
            print(i,&quot;FizzBuzz&quot;)
        elif i%5 == 0:
            print(i,&quot;Buzz&quot;)
        elif i%3 == 0:
            print(i,&quot;Fizz&quot;)
        else: print(i)

fizzbuzzgame(50,100)
&lt;/pre&gt;
&lt;pre&gt;
#Output:
1235
Buzz
======================================
555
Fizzbuzz
======================================
1235
Buzz
======================================
999
Fizz
&lt;/pre&gt;

=== Fizz Buzz game in Interactive mode with Score ===
'''By Ms. Ami Tusharkant Choksi'''
&lt;pre&gt;
def fizzbuzzgame(i):
        if i%3 == 0 and i%5 == 0:
            print(i,&quot;FizzBuzz&quot;)
            return(&quot;fzbz&quot;)
        elif i%5 == 0:
            print(i,&quot;Buzz&quot;)
            return(&quot;bz&quot;)
        elif i%3 == 0:
            print(i,&quot;Fizz&quot;)
            return(&quot;fz&quot;)
        else:
            print(i)
            return(&quot;no&quot;)

ch = 'y'
fizzbuzz=0
fizz=0
buzz=0
nothing=0
print(&quot;&quot;&quot;

 /$$$$$$$$/$$                  /$$$$$$$                            
| $$_____|__/                 | $$__  $$                           
| $$      /$$/$$$$$$$$/$$$$$$$| $$  \ $$/$$   /$$/$$$$$$$$/$$$$$$$$
| $$$$$  | $|____ /$$|____ /$$| $$$$$$$| $$  | $|____ /$$|____ /$$/
| $$__/  | $$  /$$$$/   /$$$$/| $$__  $| $$  | $$  /$$$$/   /$$$$/ 
| $$     | $$ /$$__/   /$$__/ | $$  \ $| $$  | $$ /$$__/   /$$__/  
| $$     | $$/$$$$$$$$/$$$$$$$| $$$$$$$|  $$$$$$//$$$$$$$$/$$$$$$$$
|__/     |__|________|________|_______/ \______/|________|________/
                                                                  
&quot;&quot;&quot;)   
print('''

  /$$$$$$                                
 /$$__  $$                               
| $$  \__/ /$$$$$$ /$$$$$$/$$$$  /$$$$$$ 
| $$ /$$$$|____  $| $$_  $$_  $$/$$__  $$
| $$|_  $$ /$$$$$$| $$ \ $$ \ $| $$$$$$$$
| $$  \ $$/$$__  $| $$ | $$ | $| $$_____/
|  $$$$$$|  $$$$$$| $$ | $$ | $|  $$$$$$$
 \______/ \_______|__/ |__/ |__/\_______/
                                     
''')

while(ch == 'y'):
    n=int(input(&quot;Enter a Number : &quot;))
    winLoose=fizzbuzzgame(n)
    if(winLoose == &quot;fz&quot;):
        fizz+=1
    elif(winLoose == &quot;bz&quot;):
        buzz+=1
    elif(winLoose == &quot;fzbz&quot;):
        fizzbuzz+=1
    ch=input(&quot;Do you want to continue playing the game : (y/n)&quot;)
    if(ch=='n'):
        print('Congratulations, your score is\n FizzBuzz:%d\nFizz:%d\nBuzz:%d' %
(fizzbuzz,fizz,buzz))
    
'''Sample Output:

 /$$$$$$$$/$$                  /$$$$$$$                            
| $$_____|__/                 | $$__  $$                           
| $$      /$$/$$$$$$$$/$$$$$$$| $$  \ $$/$$   /$$/$$$$$$$$/$$$$$$$$
| $$$$$  | $|____ /$$|____ /$$| $$$$$$$| $$  | $|____ /$$|____ /$$/
| $$__/  | $$  /$$$$/   /$$$$/| $$__  $| $$  | $$  /$$$$/   /$$$$/ 
| $$     | $$ /$$__/   /$$__/ | $$  \ $| $$  | $$ /$$__/   /$$__/  
| $$     | $$/$$$$$$$$/$$$$$$$| $$$$$$$|  $$$$$$//$$$$$$$$/$$$$$$$$
|__/     |__|________|________|_______/ \______/|________|________/
                                                                                                                                   

  /$$$$$$                                
 /$$__  $$                               
| $$  \__/ /$$$$$$ /$$$$$$/$$$$  /$$$$$$ 
| $$ /$$$$|____  $| $$_  $$_  $$/$$__  $$
| $$|_  $$ /$$$$$$| $$ \ $$ \ $| $$$$$$$$
| $$  \ $$/$$__  $| $$ | $$ | $| $$_____/
|  $$$$$$|  $$$$$$| $$ | $$ | $|  $$$$$$$
 \______/ \_______|__/ |__/ |__/\_______/
                                         

Enter a Number : 666
666 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 777
777 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 555
555 FizzBuzz
Do you want to continue playing the game : (y/n)y
Enter a Number : 1
1
Do you want to continue playing the game : (y/n)y
Enter a Number : 789
789 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 25
25 Buzz
Do you want to continue playing the game : (y/n)n
Congratulations, your score is

FizzBuzz:1
Fizz:3
Buzz:1

&lt;/pre&gt;

=Crowd Computing: Just Estimate=
==Wisdom of Crowds==
 &lt;p style=&quot;text-align:justify&quot;&gt;
The concept of ’Wisdom of Crowds’ was proposed by Francis Galton. A weight-judging competition was carried on at the annual show of the West of England Fat Stock and Poultry Exhibition recently held at Plymouth, A fat ox having been selected, competitors bought stamped and numbered cards, each, on which to inscribe their respective names, addresses, and estimates of what the ox would weigh after it had been slaughtered. Those who guessed most successfully received prizes. About 8oo tickets were issued to the par- ticipants. The middlemost estimate of all the estimates recorded was 1207 lbs and the actual weight of the ox was 1198 lbs.&lt;/p&gt;

==Our Experiment==
 &lt;p style=&quot;text-align:justify&quot;&gt;
The crowd had to guess the number of candies/gems in a jar. Around 75 people participated in the experiment. The actual number of gems in the jar were 375. The median of all estimates came out to be 300 and the mean of all the estimates came out to be around 396. Median underestimated and mean overestimated the actual value. So according to recent studies, Trimmed mean must be used as an aggregate measure to estimate where Wisdom of Crowds is involved.
&lt;/p&gt;
[[File:Gemsjar.jpg|center|200px|caption]]

===Trimmed Mean===
 &lt;p style=&quot;text-align:justify&quot;&gt;
In these kinds of experiments, 10% trimmed mean is usually followed. For calculating 10% trimmed mean, remove 10% smallest and 10% largest values from the sample. Calculate the mean of the sample obtained. In the above experiment, the trimmed mean came out to be around 351 which is very close to the actual value.&lt;/p&gt;

==Implementation==
Here, we try to demonstrate the concept of trimmed mean through crowd computing.
&lt;ol&gt;
&lt;li&gt; Input a list of estimates done by the crowd .&lt;/li&gt;
&lt;li&gt; Sort the list.&lt;/li&gt;
&lt;li&gt; Remove the 10% smallest values.&lt;/li&gt;
&lt;li&gt; Remove the 10% largest values.
&lt;li&gt; Calculate the mean of the new list obtained .&lt;/li&gt;&lt;/ol&gt;&lt;hr&gt;

==Data of Experiment==       
    Estimates =[1000,1010,1786,2000,1500,1500,100,120,150,150,150,170,175,180,197,200,200,200,200,200,200,220,220,220,220,234,250,250,250,250,250,250,250,250,250,263,270,275,275,286,300,
                300,300,300,300,300,300,300,320,350,350,350,400, 400,400,400,400,450,467,500,500,500,500,500,500,500,550,550,600,600,600,650,700,700,720]

    '''CODE:'''
&lt;pre&gt;
Estimates = [1000,1010,1786,2000,1500,1500,100,120,150,150,150,170,175,180,197,200,200,200,200,200,200,220,220,220,220,234,250,250,250,250,250,250,250,250,250,263,270,275,275,286,300,                300,300,300,300,300,300,300,320,350,350,350,400,400,400,400,400,450,467,500,500,500,500,500,500,500,550,550,600,600,600,650,700,700,720]
Estimates.sort()
offset = int(0.10*len(Estimates))
for i in range(offset):
       del Estimates[0]
       del Estimates[-1]
Sum = 0    
for i in range(len(Estimates)):
       Sum += Estimates[i]
Mean_Value = Sum/len(Estimates)
print(&quot;Mean : &quot;, int(Mean_Value))
#Output:
Mean :  351
&lt;/pre&gt;
&lt;hr&gt;
==Trimmed Mean for the above example== 
&lt;h3&gt;Using scipy library&lt;/h3&gt;
&lt;pre&gt;
#import scipy to use the method of trim_mean
from scipy import stats
trimMean = stats.trim_mean(Estimates, 0.1) # Trim 10% at both ends
print(&quot;Trimmed Mean : &quot;,trimMean)
#Output:
Trimmed Mean :  335.1020408163265
&lt;/pre&gt;

&lt;h3&gt;Without using scipy library&lt;/h3&gt;
&lt;pre&gt;
#Trimmed mean with 10%
p=10/100
#sorted data
data=[2, 4, 6, 7, 11, 21, 81, 90, 105, 121]
n = len(data)
#Remove elements from both end
rem=int(n*p)
newData = data[rem:-rem]
mean = 0
for i in newData:
    mean += i
mean = int(mean/len(newData))
print(&quot;Trimmed mean : &quot;,mean)
#Output: Trimmed mean :  40
&lt;/pre&gt;
[[#Top]]

=Jumbled_Words Permutations: Jumbled Words=
==What are Permutations ?==
A permutation also called ordering of selected number of elements from a list denoted by nPr here we are choosing all elements of a list and so n=r&lt;br&gt;
nPr=n!/(n-r)!&lt;br&gt; as n=r
nPn=n!&lt;br&gt; which gives all possible arrangement of elements present in a list.

 For example, permutations of list [1,2,3] are [1,2,3], [1,3,2], [2,1,3], [2,3,1], 
[3,1,2], and [3,2,1]. 
The number of permutations of a list of elements nPn is given by n!. For example, there are 2! = 2 x 1 = 2 permutations of [1,2], namely [1,2] and [2,1], and 3! = 3 x 2 x 1 = 6 permutations of [1,2,3], as mentioned above.&lt;br/&gt;
[[File:Permutations.jpg]]

==Implementation==
 &lt;p style=&quot;text-align:justify&quot;&gt;
Here, we try to demonstrate the concept of permutations through jumbled words. It is a two player game in which one person presents the other person a different permutation of the word in his mind. The other person has to guess the right word. If he guesses, the he wins otherwise he loses.&lt;/p&gt;
 Input an list of words.
 Randomly pick a word from the list of words .
 Shuffle this word and present it to the other player.
 if word guesses by the player is same as the one picked from list of w
     player wins
 else
     player loses

ALTERNATE CODE TO GENERATE THIS GAME:
&lt;pre&gt;
import random
p1=input(&quot;enter player 1 name:&quot;)
p2=input(&quot;enter player 2 name:&quot;)
l=[&quot;rainbow&quot;,&quot;computer&quot;,&quot;robot&quot;,&quot;butter&quot;,&quot;vegetable&quot;,&quot;science&quot;,&quot;correct&quot;]
c1=c2=a1=a2=f1=f2=0
k=1
i=3
def play():
    n=random.choice(l)        ##n=chooses a word from list l
    l1=[]
    for j in n:
       l1.append(j)      ##creates a list for word in n
    for t in range(len(l1)):
       p=random.choice(l1)     ##this randomly displays letters in the list
       print(p)
       l1.remove(p)          ##to avoid the repetition of a letter
    s=input(&quot;enter the word:&quot;)
    if(s==n):
        print(&quot;correct&quot;)
        return 1
    else:
        print(&quot;not correct&quot;)
        print(&quot;answer is&quot;,n)
        return 0
def stat():
     print(&quot;player 1:&quot;)
     print(&quot;score:&quot;,c1)
     print(&quot;answered:&quot;,a1)
     print(&quot;failed:&quot;,f1)
     print(&quot;.............&quot;)
     print(&quot;player 2:&quot;)
     print(&quot;score:&quot;,c2)
     print(&quot;answered:&quot;,a2)
     print(&quot;failed&quot;,f2)
     if(c1&gt;c2):
         print(p1,&quot; won over &quot;,p2)
     elif(c1==c2):
         print(&quot;draw game&quot;)
     else:
         print(p2,&quot; won over &quot;,p1) 
while(i!=4):
      if(i==3):
         if(k==1):
             print(&quot;player 1 turn&quot;)
             print(&quot;your jumbled word is:&quot;)
             k=k+1
             m=play()
             if(m==1):      ##if guessed answer is correct,then score and no.of answered count will be increased
                c1+=1
                a1+=1
             else:
                f1+=1       ##else count of no.of failed to answered will be incremented
         else:
             print(&quot;player 2 turn&quot;)
             print(&quot;your jumbled word is:&quot;)
             k=k-1
             m=play()
             if(m==1):
                c2=c2+1
                a2=a2+1
             else:
                f2=f2+1
       if(i==2):
             print(&quot;present status&quot;)
             stat()
       i=int(input(&quot;enter your choice  1.stop 2.status 3.continue&quot;))
       if(i==1):
             stat()
             i=i+3
&lt;/pre&gt;
&lt;hr&gt;
=== JumbledWord Simple Logic, In Short ===
[[File:jumbledWord.gif]]
&lt;hr&gt;
'''Logic to create a Jumbled Word'''
&lt;hr&gt;
&lt;pre&gt;
#Get Jumbled Word and print it Horizontally
import random

def getJumbledWord(b):
    jumble=''
    l1 = [ b[i] for i in range(0, len(b)) ]
    for t in range(len(l1)):
       p=random.choice(l1)     #this randomly gets letters from the list      
       jumble=jumble+p       
       l1.remove(p)
    return jumble

b=input(&quot;Enter a word to make it jumbled : &quot;)
print(&quot;Jumbled Word : &quot;, getJumbledWord(b))
&lt;/pre&gt;
&lt;hr&gt;
'''Another Logic to create a Jumbled Word'''
&lt;hr&gt;
&lt;pre&gt;
import random
b=input(&quot;Enter a word to make it jumbled : &quot;)

def getJumbledWord1(b):
    l1 = [ b[i] for i in range(0, len(b)) ]
    random.shuffle(l1)
    str1 = ''.join(l1)
    return str1

print(&quot;Jumbled Word : &quot;, getJumbledWord1(b))
&lt;/pre&gt;

====Sample Output:====
&lt;pre&gt;
---- Output1 
Enter a word to make it jumbled : butter
Jumbled Word :  tbture

---- Output2 
Enter a word to make it jumbled : petriotism
Jumbled Word :  pittrosime
&lt;/pre&gt;

=Theory of Evolution=

== What is Evolution ? ==
Evolution is the change in heritable characteristics over successive generations. The theory of evolution explains that DNA, which acts as a carrier of genetic information from one generation to other, tends to change or mutate occasionally. These changes are reflected in next generations to come. This is how life has evolved on earth from bacteria to human beings.&lt;br&gt;
[[File:Evolution.png|500px]]

== Implementation ==
 &lt;p style=&quot;text-align:justify&quot;&gt;
An array representing DNA is stored in a file. As genes are forms of DNA, they contain information to be transferred to forthcoming generations. Assume that information is in the form of bits (in the form of 0s and 1s). A number is picked randomly from 1 to the size of the array. A new parameter has been introduced which decides whether mutation would occur or not. If the value of this new parameter is 1 (It is picked randomly from 1 to 100), then only change is reflected down the generations, otherwise it is not. The pseudo code is as follows :
&lt;/p&gt;
Input an array containing genetic information .
Randomly generate a number (say m) from 1 to length of the array. Randomly generate other number (say p) from 1 to 100.

&lt;pre&gt; 
    if p is equal to 1 then 
        if m is 1 then
          set it to 0
        else
          set it to 1
&lt;/pre&gt;
[[#TOP]]</text>
      <sha1>lver2zzpqdf844ccu7ncu8ofp1s4log</sha1>
    </revision>
    <revision>
      <id>3625</id>
      <parentid>3624</parentid>
      <timestamp>2018-09-28T04:42:18Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* JumbledWord Simple Logic, In Short */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="30614">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_3 Contributors of this page]
*Week 3 Playlist: https://www.youtube.com/playlist?list=PLc_j0TNIaWxOVx_z9jAM2UB3RqYNXaoEo
=List=
List is a flexible data structure used for storing a group of data separated by comma. The elements in a list need not be of the same data type.

'''Example:'''
       List_1 = [ 1, 2,3] or 
       List_1 = [&quot;coffee&quot;, &quot;Tea&quot;, &quot;Milk&quot;] or
       List_1 = [1,&quot;coffee&quot;, &quot;Tea&quot;, 3, &quot;5&quot;]

==List Creation==
&lt;pre&gt;a) A list can be created by simply putting values (separated by comma) between square brackets as given below,
       List_1 = [1,&quot;coffee&quot;, &quot;Tea&quot;, 3, &quot;5&quot;] #this creates a list by name List_1 containing following items


Or,
(b)A List can be created from scratch and elements can be added 
        List_2 = [ ]
        List_2.append(&quot;Kala&quot;)
        List_2.append(&quot;Mala&quot;)
Here we use &quot;append&quot; ,which is a function in python that enable us to append or attach an element to a list .
Thus List_2 will now hold [&quot;Kala&quot;,&quot;Mala&quot;]
&lt;/pre&gt;
[[#TOP]]

==Operations and Methods to work with List==
&lt;pre&gt;
a = [25,30,50,90,12,13]
b = [100,300,500,200,250]
&lt;/pre&gt;
&lt;hr&gt;
&lt;table border=2&gt;
  &lt;tr&gt;
    &lt;th&gt;&lt;b&gt;Method/&lt;br&gt;Operator&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Function&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Syntax&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Output&lt;/b&gt;&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;len()&lt;/td&gt;
    &lt;td&gt;Find length of a list&lt;/td&gt;
    &lt;td&gt;len(a)&lt;/td&gt;
    &lt;td&gt;6&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;max()&lt;/td&gt;
    &lt;td&gt;Find maximum element from the list&lt;/td&gt;
    &lt;td&gt;max(a)&lt;/td&gt;
    &lt;td&gt;90&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;min()&lt;/td&gt;
    &lt;td&gt;Find minimum element from the list&lt;/td&gt;
    &lt;td&gt;min(a)&lt;/td&gt;
    &lt;td&gt;12&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sum()&lt;/td&gt;
    &lt;td&gt;Returns sum of all elements of the list&lt;/td&gt;
    &lt;td&gt;sum(a)&lt;/td&gt;
    &lt;td&gt;220&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;reverse()&lt;/td&gt;
    &lt;td&gt;Reverses the original list&lt;/td&gt;
    &lt;td&gt;a.reverse()&lt;/td&gt;
    &lt;td&gt;[13, 12, 90, 50, 30, 25]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sort()&lt;/td&gt;
    &lt;td&gt;Sorts the original list in ascending order&lt;/td&gt;
    &lt;td&gt;a.sort()&lt;/td&gt;
    &lt;td&gt;[12, 13, 25, 30, 50, 90]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sorted()&lt;/td&gt;
    &lt;td&gt;Returns the new sorted list &lt;/td&gt;
    &lt;td&gt;sorted(a)&lt;/td&gt;
    &lt;td&gt;[12, 13, 25, 30, 50, 90]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;insert()&lt;/td&gt;
    &lt;td&gt;Insert at a particular index in the list, and shifts remaining elements&lt;/td&gt;
    &lt;td&gt;a.insert(3,3)&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 3, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;append()&lt;/td&gt;
    &lt;td&gt;Adds elements/object to the end of the list&lt;/td&gt;
    &lt;td&gt;a.append(5)&lt;br&gt;a.append([10,20])&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 5]&lt;br&gt;[25, 30, 50, 90, 12, 13, [10, 20]]&lt;br&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;extend()&lt;/td&gt;
    &lt;td&gt;Adds object to the end of the list as elements not as object&lt;/td&gt;
    &lt;td&gt;a.extend([10,20])&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 10, 20]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;*&amp;nbsp;&amp;nbsp;Repeatation&lt;br&gt;operator&lt;/td&gt;
    &lt;td&gt;Repeat the list for n times and returns a new list&lt;/td&gt;
    &lt;td&gt;a*2&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 25, 30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;+ Concatenation&lt;br&gt;operator&lt;/td&gt;
    &lt;td&gt;Concatenates two lists, and returns a new list&lt;/td&gt;
    &lt;td&gt;a+b&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 100, 300, 500, 200, 250]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;index()&lt;/td&gt;
    &lt;td&gt;Finds index of a particular element in the list or not&lt;/td&gt;
    &lt;td&gt;a.index(25)&lt;br&gt;a.index(0)&lt;br&gt;&lt;/td&gt;
    &lt;td&gt;0&lt;br&gt;&lt;br&gt;ValueError: 0 is not in list&lt;br&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;in operator&lt;/td&gt;
    &lt;td&gt;Finds whether a particular element is in the list or not, returns boolean&lt;/td&gt;
    &lt;td&gt;25 in a&lt;/td&gt;
    &lt;td&gt;True&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;not in operator&lt;/td&gt;
    &lt;td&gt;Checks if element is not available in list, returns boolean&lt;/td&gt;
    &lt;td&gt;25 not in a&lt;/td&gt;
    &lt;td&gt;False&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;count()&lt;/td&gt;
    &lt;td&gt;Counts the number of occurence of an element in the list&lt;/td&gt;
    &lt;td&gt;a.count(25)&lt;/td&gt;
    &lt;td&gt;1&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;remove()&lt;/td&gt;
    &lt;td&gt;Removes an element from the list&lt;/td&gt;
    &lt;td&gt;a.remove(25)&lt;/td&gt;
    &lt;td&gt; [30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;pop()&lt;/td&gt;
    &lt;td&gt;Delete and return item at index 0&lt;/td&gt;
    &lt;td&gt;a.pop(0)&lt;/td&gt;
    &lt;td&gt;25 , a will be [30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;del&lt;/td&gt;
    &lt;td&gt;Deletes item at a particular index from the list&lt;/td&gt;
    &lt;td&gt;del a[0]&lt;/td&gt;
    &lt;td&gt;[30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;all()&lt;/td&gt;
&lt;td&gt;Returns True, if all items in list are True or it is an empty list&lt;/td&gt;
&lt;td&gt;all([True, True, True])
all([])
&lt;/td&gt;
&lt;td&gt;True&lt;br&gt;
True&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;any()&lt;/td&gt;
&lt;td&gt;Returns True, if any item in list is True else return False&lt;/td&gt;
&lt;td&gt;any([True, True, True])&lt;br&gt;
any([True, False, True])&lt;br&gt;
any([])&lt;/td&gt;
&lt;td&gt;True&lt;br&gt;False&lt;br&gt;False&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;

==Printing the List==
=== Print whole list ===
A list can be printed simply or using a ''for / while'' loop 

 print(List_2)     # To print the entire list
This code will print      
 ['Kala','Mala']     

===Print element at a particular index===
&lt;pre&gt;
Using index position
    List_2[0]     # prints 'Kala' ,i.e,the value at index position 0.
    List_2[1]     # prints 'Mala'.
&lt;/pre&gt;
=== Without using index position ===
&lt;pre&gt;
for item in List_2:   # here item is a variable used to access elements in list.
       print(item)
   This code snippet prints 
    Kala
    Mala
&lt;/pre&gt;
[[#TOP]]

==Search for a particular element in list==
Elements in a list can be searched by one of the two ways:
=== using index() function===
&lt;pre&gt;
ages1 = [11,23,12,23,45]

#if element is available in the list, index() returns the index value on which, the element is present.
print(ages1.index(45))#Output: 4

#if element is not available in the list, index() returns ''ValueError''
print(ages1.index(0))#Output: ValueError:
&lt;/pre&gt;

In programming, if such error occurs, program gets terminated. It can be solved using exception handling.
e.g.
&lt;pre&gt;
ages1 = [11,23,12,23,45]

try:
    print(ages1.index(0))
except ValueError:
    print(&quot;Exception has occured&quot;)    
    print(&quot;Element is not found in the list&quot;)

&lt;/pre&gt;
&lt;pre&gt;
'''Output: 
Exception has occured
Element is not found in the list
'''&lt;/pre&gt;
[[#TOP]]

=== using 'in' operator===
''in'' operator is used to check whether a particular element is available in the list or not.e.g.

&lt;pre&gt;
ages1 = [11,23,12,23,45]
no=11

if no in ages1:
    print(&quot;no is there in the list&quot;)
else:    
    print(&quot;no is NOT there in the list&quot;)
&lt;/pre&gt;
&lt;pre&gt;
#Output: no is there in the list
&lt;/pre&gt;


'''Number is not there in the list'''
&lt;pre&gt;
ages1 = [11,23,12,23,45]
no=15

if no in ages1:
    print(&quot;no is there in the list&quot;)
else:    
    print(&quot;no is NOT there in the list&quot;)
&lt;/pre&gt;
&lt;pre&gt;
Output: no is NOT there in the list
&lt;/pre&gt;
[[#TOP]]

==Updating the List==
The lists can be updated using ''append'' or ''insert'' function.  Append adds the element to the end of the list and Insert adds the element in the specified position.
&lt;pre&gt;
   # add the element 'Sheela' to the end of the list.
   List_2.append(&quot;Sheela&quot;)    
   print (List_2) will output 
   ['Kala', 'Mala', 'Sheela']
&lt;/pre&gt;
   &lt;pre&gt;
# add the element &quot;Bala&quot; in the list at the index 1.
   List_2.insert(1,&quot;Bala&quot;)    
   print (List_2) will output 
   ['Kala', 'Bala','Mala', 'Sheela']
&lt;/pre&gt;

=== Extend the list by adding elements of other list at end using extend()===
&lt;pre&gt;
ages = [11,23,12,23,45]
ages.extend([57,58])
print(ages)
&lt;/pre&gt;

&lt;pre&gt;
#Output: [11, 23, 12, 23, 45, 57, 58]
&lt;/pre&gt;

==== Difference between ''append and extend'' ====
Difference between append and extend can be easily understood, by the following example.

&lt;pre&gt;
appendlist = [11,23,12,23,45]
appendlist.append([57,58])

extendlist= [11,23,12,23,45]
extendlist.extend([57,58])
&lt;/pre&gt;

&lt;pre&gt;
'''Output:
[11, 23, 12, 23, 45, [57, 58]]
[11, 23, 12, 23, 45, 57, 58]'''
&lt;/pre&gt;

[[#TOP]]

==Basic Operations on List==
===Frequency of Occurrence===
list.count(object) will return the number of times the object occur in the list.
  '''Example'''
    ages = [11,23,12,23,45,43,22,24,23]
    ages.count(23) will return
    3
    ages.count(100) will return
    0

===Length of the List===
len(list) will return the length of the list ie. the number of objects in the list.
  '''Example'''
&lt;pre&gt;
    ages = [11,23,12,23,45,43,22,24,23]
    len(ages) # Output: 9
&lt;/pre&gt;

To print the objects in the list either use ''for item in list'' or ''for index in range(len(list))''
&lt;pre&gt;
    for item in ages:       
        print (item)  
        (OR)
    for index in range(len(ages)) :
        print (ages[index])
&lt;/pre&gt;

===Sort the List===
list.sort() will sort the list in ascending order
  '''Example'''
    ages = [11,23,12,23,45,43,22,24,23]
    ages.sort() 
    print (ages) 
    [11, 12, 22, 23, 23, 23, 24, 43, 45]

[[#TOP]]

===Sort the List using sorted() function===
sorted(list1) will sort the list and return a new list, it doesn't modify the original list
&lt;br&gt;'''Example: Sort in ascending order'''
&lt;pre&gt;
ages = [11,23,12,23,45,43,22,24,23]
newList=sorted(ages)
print(newList)

#Output: [11, 12, 22, 23, 23, 23, 24, 43, 45]
&lt;/pre&gt;

&lt;br&gt;'''Example: Sort in descending order'''
&lt;pre&gt;
ages = [11,23,12,23,45,43,22,24,23]
newList=sorted(ages,reverse=True)
print(newList)

#Output: [45, 43, 24, 23, 23, 23, 22, 12, 11]
&lt;/pre&gt;

===Reverse the List===
list.reverse() will reverse the original list
  '''Example'''
    ages = [11, 12, 22, 23, 23, 23, 24, 43, 45]
    ages.reverse()
    print (ages)
    [45, 43, 24, 23, 23, 23, 22, 12, 11]

Both sort() and reverse() list operation will work on numeric and alphanumeric data list.

A special use of the reverse() function is to descend a list that is sorted in ascending order.

  '''Example'''
&lt;pre&gt;
ages = [11, 12, 22, 23, 23, 23, 24, 43, 45]
ages.sort()
print(ages)
ages.reverse()
print(ages)
&lt;/pre&gt;

===Slicing===
Used to retrieve an object or objects in a range as a list  
  '''Example'''

Use ''list[index]'' to retrieve the object at the given index
&lt;pre&gt;
In [1]: student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
In [2]: student[3]     #Object at index 3.  Remember index starts at 0
Out[2]: 'Geetha'      
&lt;/pre&gt;

Use ''list[start_index : end_index + 1]'' to retrieve objects from the start_index to end_index 
&lt;pre&gt;
In [3]: student[2:4]     # Objects from index 2 to 3 as List. Note the [ and ]
Out[3]: ['Vijay', 'Geetha']   
&lt;/pre&gt;

Use ''list[:]'' to retrieve objects from the starting of the list to the end of the list. 
The default start value will be the starting index of the list (i.e. 0) and the default end value
will be the length of the list 
&lt;pre&gt;
In [4]: student[:]        # prints the entire list
Out[4]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma', 'Janani']
&lt;/pre&gt;
&lt;pre&gt;
In [5]: student[:5]       # prints the objects from the start of the list upto object at index 4
Out[5]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran']
&lt;/pre&gt;
&lt;pre&gt;
In [6]: student[2:]       # prints the objects from index 2 upto the end of the list
Out[6]: ['Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma', 'Janani']
&lt;/pre&gt;

Negative index too is available in Python. It starts from last element of the list. i.e.
&lt;pre&gt;
In [7]:student[-1]        #prints last index of list
Out[7]: 'Janani'
&lt;/pre&gt;
&lt;pre&gt;
In [8]:student[-1:-8]     #prints empty list
Out[8]: []
&lt;/pre&gt;
&lt;pre&gt;
In [9]:student[-8:-1]     #prints -8th index to -1st index elements
Out[9]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma']
&lt;/pre&gt;

[[#TOP]]

===Removing Item from list ===
----

Is used to remove a specific item from the list.

'''Example:'''
 
Use list.remove(entry/value)  Or   del list[index]    Or list.pop(index)
&lt;pre&gt;
student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
student.remove(&quot;Arun&quot;)   #This will delete item &quot;Arun&quot;
         Or    
del student[0]           # This will delete item at index 0
         Or
student.pop(0)         # This will delete and return item at index 0
print(student)    
Output: &quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
&lt;/pre&gt;

[[#TOP]]

===Delete list ===
----
Used to delete complete list

'''Example'''

Use del &lt;list name&gt;
&lt;pre&gt;
student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
del student&lt;/pre&gt;

===Concatenation of two lists===
----
''+'' is the concatenation operator which is used concatenate two lists. 
&lt;pre&gt;
ages1 = [11,23,12,23,45]
ages2 = [25, 24, 43, 47]
age=ages1+ages2
print(age)
#Output: [11, 23, 12, 23, 45, 25, 24, 43, 47]
&lt;/pre&gt;

===Repeatation of a list ===
----
''*'' is the operator to repeat a particular list.
&lt;pre&gt;
ages1 = [11,23,12,23,45]
age=ages1*5 #ages1 list is repeated 5 times and stroed in ''age'' list
print(age)

#Output: [11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45]
&lt;/pre&gt;

=== all and any for List===
all() and any() are special functions to check whether all elements in iterable is ''True'' or any element is ''True''
&lt;ol&gt;
&lt;li&gt;If all elements in a list are ''True'', '''all()''' will return ''True''&lt;/li&gt;
&lt;li&gt;If iterable is ''empty'', '''all()''' will return ''True''&lt;/li&gt;
&lt;li&gt;If iterable contains at least one ''True'', '''any()''' will return ''True''&lt;/li&gt;
&lt;li&gt;If iterable is ''empty'', '''any()''' will return ''False''&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;
lsit=[True, True, True, True]
print(all(lsit))#Output: True
print(any(lsit))#Output: True

lsit1=[True, False, True, True]
print(all(lsit1))#Output: False
print(any(lsit1))#Output: True

lsit2=[False,False,False]
print(all(lsit2))#Output: False
print(any(lsit2))#Output: False

lsit3=[]
print(all(lsit3))#Output: True
print(any(lsit3))#Output: False
&lt;/pre&gt;

==Conditional Statements==
&lt;pre&gt;Conditionals are used to check the condition and change the flow of the program 
accordingly. They are realized in programming languages through if statement. The 
syntax is as follows :
&lt;pre&gt;
         if condition : 
            statement
&lt;/pre&gt;
    '''Note:''' Do not forget indentation (inserting space/tab) in the line after the
 if condition.
    
    In case you want to execute a set of statements when a condition is true and another

set of statement when the condition is false.
&lt;pre&gt;
         if condition : 
            statement 1
         else :
            statement 2
&lt;/pre&gt;

&lt;pre&gt;    
    Multiple if-else statements can be written as follows:
         if condition_1 : 
            statement 1
         elif condition_2 : # 'elif' is short for 'else if'
            statement 2
         elif condition_3 :
            statement 3
        .
        .
         else :
            final statement
&lt;/pre&gt;

[[#TOP]]

=Loops and Conditionals : Fizzbuzz=
====Loops====
Loops are used to execute a set of repetitive statements. They are realised
through 'while' and 'for' loops in programming languages. The syntax of 'for' loop is 
as follows :
&lt;pre&gt;
for LOOPVARIABLE in SEQUENCE: 
            STATEMENTS&lt;/pre&gt;

    '''e.g.''' to print all the data from a list we can write:
&lt;pre&gt;
for item in list_name:
      print(item)&lt;/pre&gt;
    OR
&lt;pre&gt;
for index in range(len(list_name)):
      print(list_name[index])
 &lt;/pre&gt;   
    The syntax for while loop is as follows :
&lt;pre&gt;    
while BOOLEANEXPRESSION: 
     STATEMENTS
     INCREMENT/DECREMENT
&lt;/pre&gt;    
    '''e.g.''' if we want to print all numbers from 1 to 10
&lt;pre&gt;
i=1
while i&lt;=10 :
    print(i,&quot; &quot;)
    i=i+1
    &lt;/pre&gt;
 
'while' loop has indefinite iteration (run-time unknown). So, there must be loop,  break statement in it.
 Whereas 'for' loop is definite in nature (i.e. known or predictable span).&lt;br&gt;

&lt;b&gt;NOTE: Python doesn't have anything like do-while loop.&lt;/b&gt;

[[#TOP]]

==Implementation==
Here, we try to demonstrate the concept of loops and conditionals through a game called Fizzbuzz. The rules are as follows :&lt;br/&gt;
[[File:fizzBuzz.gif]]

• if input number is a multiple of ’3’ print ”Fizz”
&lt;br/&gt;
• if input number is a multiple of ’5’ print ”Buzz”
&lt;br/&gt;
• if input number is a multiple of both '3' and ’5’ print ”FizzBuzz”
&lt;br/&gt;
The pseudo code is as follows :
&lt;pre&gt;
   If input no % 3 == 0 and  input no % 5 == 0 : 
       print ”Fizzbuzz”
   else if input no % 3 == 0 : 
       print ”Fizz”
   else if input no % 5 == 0 : 
       print ”Buzz”
   else :
       print the input no
&lt;/pre&gt;
 &lt;p style=&quot;text-align:justify&quot;&gt;
The order of statements execution matters to get the desired output. The highest priority condition should be first followed by other. In fizzbuzz programming, first checking should be done for both divisibility of 3 and 5. If condition not satisfied only then it should check individually for 3 or 5. So carefully choosing the order is crucial for better programming.
Note: There is some effect of present condition statements chosen on next conditions statements. That is why in first attempt fizzbuzz programming got struck.&lt;/p&gt;

Example: 
&lt;pre&gt;
#Code to achieve the above requirement in python3.
i = int(input(&quot;Enter the number&quot;)) 
if i%3 == 0 and i%5 == 0: print(i,&quot;FizzBuzz&quot;)  
elif i%5 == 0: print(i,&quot;Buzz&quot;)
elif i%3 == 0: print(i,&quot;Fizz&quot;)
else: print(i)
&lt;/pre&gt;
Lets put the same into a loop for a range given by the user.
&lt;pre&gt;
def fizzbuzzgame(start,stop):
    for i in range(start,stop+1):
        if i%3 == 0 and i%5 == 0:
            print(i,&quot;FizzBuzz&quot;)
        elif i%5 == 0:
            print(i,&quot;Buzz&quot;)
        elif i%3 == 0:
            print(i,&quot;Fizz&quot;)
        else: print(i)

fizzbuzzgame(50,100)
&lt;/pre&gt;
&lt;pre&gt;
#Output:
1235
Buzz
======================================
555
Fizzbuzz
======================================
1235
Buzz
======================================
999
Fizz
&lt;/pre&gt;

=== Fizz Buzz game in Interactive mode with Score ===
'''By Ms. Ami Tusharkant Choksi'''
&lt;pre&gt;
def fizzbuzzgame(i):
        if i%3 == 0 and i%5 == 0:
            print(i,&quot;FizzBuzz&quot;)
            return(&quot;fzbz&quot;)
        elif i%5 == 0:
            print(i,&quot;Buzz&quot;)
            return(&quot;bz&quot;)
        elif i%3 == 0:
            print(i,&quot;Fizz&quot;)
            return(&quot;fz&quot;)
        else:
            print(i)
            return(&quot;no&quot;)

ch = 'y'
fizzbuzz=0
fizz=0
buzz=0
nothing=0
print(&quot;&quot;&quot;

 /$$$$$$$$/$$                  /$$$$$$$                            
| $$_____|__/                 | $$__  $$                           
| $$      /$$/$$$$$$$$/$$$$$$$| $$  \ $$/$$   /$$/$$$$$$$$/$$$$$$$$
| $$$$$  | $|____ /$$|____ /$$| $$$$$$$| $$  | $|____ /$$|____ /$$/
| $$__/  | $$  /$$$$/   /$$$$/| $$__  $| $$  | $$  /$$$$/   /$$$$/ 
| $$     | $$ /$$__/   /$$__/ | $$  \ $| $$  | $$ /$$__/   /$$__/  
| $$     | $$/$$$$$$$$/$$$$$$$| $$$$$$$|  $$$$$$//$$$$$$$$/$$$$$$$$
|__/     |__|________|________|_______/ \______/|________|________/
                                                                  
&quot;&quot;&quot;)   
print('''

  /$$$$$$                                
 /$$__  $$                               
| $$  \__/ /$$$$$$ /$$$$$$/$$$$  /$$$$$$ 
| $$ /$$$$|____  $| $$_  $$_  $$/$$__  $$
| $$|_  $$ /$$$$$$| $$ \ $$ \ $| $$$$$$$$
| $$  \ $$/$$__  $| $$ | $$ | $| $$_____/
|  $$$$$$|  $$$$$$| $$ | $$ | $|  $$$$$$$
 \______/ \_______|__/ |__/ |__/\_______/
                                     
''')

while(ch == 'y'):
    n=int(input(&quot;Enter a Number : &quot;))
    winLoose=fizzbuzzgame(n)
    if(winLoose == &quot;fz&quot;):
        fizz+=1
    elif(winLoose == &quot;bz&quot;):
        buzz+=1
    elif(winLoose == &quot;fzbz&quot;):
        fizzbuzz+=1
    ch=input(&quot;Do you want to continue playing the game : (y/n)&quot;)
    if(ch=='n'):
        print('Congratulations, your score is\n FizzBuzz:%d\nFizz:%d\nBuzz:%d' %
(fizzbuzz,fizz,buzz))
    
'''Sample Output:

 /$$$$$$$$/$$                  /$$$$$$$                            
| $$_____|__/                 | $$__  $$                           
| $$      /$$/$$$$$$$$/$$$$$$$| $$  \ $$/$$   /$$/$$$$$$$$/$$$$$$$$
| $$$$$  | $|____ /$$|____ /$$| $$$$$$$| $$  | $|____ /$$|____ /$$/
| $$__/  | $$  /$$$$/   /$$$$/| $$__  $| $$  | $$  /$$$$/   /$$$$/ 
| $$     | $$ /$$__/   /$$__/ | $$  \ $| $$  | $$ /$$__/   /$$__/  
| $$     | $$/$$$$$$$$/$$$$$$$| $$$$$$$|  $$$$$$//$$$$$$$$/$$$$$$$$
|__/     |__|________|________|_______/ \______/|________|________/
                                                                                                                                   

  /$$$$$$                                
 /$$__  $$                               
| $$  \__/ /$$$$$$ /$$$$$$/$$$$  /$$$$$$ 
| $$ /$$$$|____  $| $$_  $$_  $$/$$__  $$
| $$|_  $$ /$$$$$$| $$ \ $$ \ $| $$$$$$$$
| $$  \ $$/$$__  $| $$ | $$ | $| $$_____/
|  $$$$$$|  $$$$$$| $$ | $$ | $|  $$$$$$$
 \______/ \_______|__/ |__/ |__/\_______/
                                         

Enter a Number : 666
666 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 777
777 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 555
555 FizzBuzz
Do you want to continue playing the game : (y/n)y
Enter a Number : 1
1
Do you want to continue playing the game : (y/n)y
Enter a Number : 789
789 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 25
25 Buzz
Do you want to continue playing the game : (y/n)n
Congratulations, your score is

FizzBuzz:1
Fizz:3
Buzz:1

&lt;/pre&gt;

=Crowd Computing: Just Estimate=
==Wisdom of Crowds==
 &lt;p style=&quot;text-align:justify&quot;&gt;
The concept of ’Wisdom of Crowds’ was proposed by Francis Galton. A weight-judging competition was carried on at the annual show of the West of England Fat Stock and Poultry Exhibition recently held at Plymouth, A fat ox having been selected, competitors bought stamped and numbered cards, each, on which to inscribe their respective names, addresses, and estimates of what the ox would weigh after it had been slaughtered. Those who guessed most successfully received prizes. About 8oo tickets were issued to the par- ticipants. The middlemost estimate of all the estimates recorded was 1207 lbs and the actual weight of the ox was 1198 lbs.&lt;/p&gt;

==Our Experiment==
 &lt;p style=&quot;text-align:justify&quot;&gt;
The crowd had to guess the number of candies/gems in a jar. Around 75 people participated in the experiment. The actual number of gems in the jar were 375. The median of all estimates came out to be 300 and the mean of all the estimates came out to be around 396. Median underestimated and mean overestimated the actual value. So according to recent studies, Trimmed mean must be used as an aggregate measure to estimate where Wisdom of Crowds is involved.
&lt;/p&gt;
[[File:Gemsjar.jpg|center|200px|caption]]

===Trimmed Mean===
 &lt;p style=&quot;text-align:justify&quot;&gt;
In these kinds of experiments, 10% trimmed mean is usually followed. For calculating 10% trimmed mean, remove 10% smallest and 10% largest values from the sample. Calculate the mean of the sample obtained. In the above experiment, the trimmed mean came out to be around 351 which is very close to the actual value.&lt;/p&gt;

==Implementation==
Here, we try to demonstrate the concept of trimmed mean through crowd computing.
&lt;ol&gt;
&lt;li&gt; Input a list of estimates done by the crowd .&lt;/li&gt;
&lt;li&gt; Sort the list.&lt;/li&gt;
&lt;li&gt; Remove the 10% smallest values.&lt;/li&gt;
&lt;li&gt; Remove the 10% largest values.
&lt;li&gt; Calculate the mean of the new list obtained .&lt;/li&gt;&lt;/ol&gt;&lt;hr&gt;

==Data of Experiment==       
    Estimates =[1000,1010,1786,2000,1500,1500,100,120,150,150,150,170,175,180,197,200,200,200,200,200,200,220,220,220,220,234,250,250,250,250,250,250,250,250,250,263,270,275,275,286,300,
                300,300,300,300,300,300,300,320,350,350,350,400, 400,400,400,400,450,467,500,500,500,500,500,500,500,550,550,600,600,600,650,700,700,720]

    '''CODE:'''
&lt;pre&gt;
Estimates = [1000,1010,1786,2000,1500,1500,100,120,150,150,150,170,175,180,197,200,200,200,200,200,200,220,220,220,220,234,250,250,250,250,250,250,250,250,250,263,270,275,275,286,300,                300,300,300,300,300,300,300,320,350,350,350,400,400,400,400,400,450,467,500,500,500,500,500,500,500,550,550,600,600,600,650,700,700,720]
Estimates.sort()
offset = int(0.10*len(Estimates))
for i in range(offset):
       del Estimates[0]
       del Estimates[-1]
Sum = 0    
for i in range(len(Estimates)):
       Sum += Estimates[i]
Mean_Value = Sum/len(Estimates)
print(&quot;Mean : &quot;, int(Mean_Value))
#Output:
Mean :  351
&lt;/pre&gt;
&lt;hr&gt;
==Trimmed Mean for the above example== 
&lt;h3&gt;Using scipy library&lt;/h3&gt;
&lt;pre&gt;
#import scipy to use the method of trim_mean
from scipy import stats
trimMean = stats.trim_mean(Estimates, 0.1) # Trim 10% at both ends
print(&quot;Trimmed Mean : &quot;,trimMean)
#Output:
Trimmed Mean :  335.1020408163265
&lt;/pre&gt;

&lt;h3&gt;Without using scipy library&lt;/h3&gt;
&lt;pre&gt;
#Trimmed mean with 10%
p=10/100
#sorted data
data=[2, 4, 6, 7, 11, 21, 81, 90, 105, 121]
n = len(data)
#Remove elements from both end
rem=int(n*p)
newData = data[rem:-rem]
mean = 0
for i in newData:
    mean += i
mean = int(mean/len(newData))
print(&quot;Trimmed mean : &quot;,mean)
#Output: Trimmed mean :  40
&lt;/pre&gt;
[[#Top]]

=Jumbled_Words Permutations: Jumbled Words=
==What are Permutations ?==
A permutation also called ordering of selected number of elements from a list denoted by nPr here we are choosing all elements of a list and so n=r&lt;br&gt;
nPr=n!/(n-r)!&lt;br&gt; as n=r
nPn=n!&lt;br&gt; which gives all possible arrangement of elements present in a list.

 For example, permutations of list [1,2,3] are [1,2,3], [1,3,2], [2,1,3], [2,3,1], 
[3,1,2], and [3,2,1]. 
The number of permutations of a list of elements nPn is given by n!. For example, there are 2! = 2 x 1 = 2 permutations of [1,2], namely [1,2] and [2,1], and 3! = 3 x 2 x 1 = 6 permutations of [1,2,3], as mentioned above.&lt;br/&gt;
[[File:Permutations.jpg]]

==Implementation==
 &lt;p style=&quot;text-align:justify&quot;&gt;
Here, we try to demonstrate the concept of permutations through jumbled words. It is a two player game in which one person presents the other person a different permutation of the word in his mind. The other person has to guess the right word. If he guesses, the he wins otherwise he loses.&lt;/p&gt;
 Input an list of words.
 Randomly pick a word from the list of words .
 Shuffle this word and present it to the other player.
 if word guesses by the player is same as the one picked from list of w
     player wins
 else
     player loses

ALTERNATE CODE TO GENERATE THIS GAME:
&lt;pre&gt;
import random
p1=input(&quot;enter player 1 name:&quot;)
p2=input(&quot;enter player 2 name:&quot;)
l=[&quot;rainbow&quot;,&quot;computer&quot;,&quot;robot&quot;,&quot;butter&quot;,&quot;vegetable&quot;,&quot;science&quot;,&quot;correct&quot;]
c1=c2=a1=a2=f1=f2=0
k=1
i=3
def play():
    n=random.choice(l)        ##n=chooses a word from list l
    l1=[]
    for j in n:
       l1.append(j)      ##creates a list for word in n
    for t in range(len(l1)):
       p=random.choice(l1)     ##this randomly displays letters in the list
       print(p)
       l1.remove(p)          ##to avoid the repetition of a letter
    s=input(&quot;enter the word:&quot;)
    if(s==n):
        print(&quot;correct&quot;)
        return 1
    else:
        print(&quot;not correct&quot;)
        print(&quot;answer is&quot;,n)
        return 0
def stat():
     print(&quot;player 1:&quot;)
     print(&quot;score:&quot;,c1)
     print(&quot;answered:&quot;,a1)
     print(&quot;failed:&quot;,f1)
     print(&quot;.............&quot;)
     print(&quot;player 2:&quot;)
     print(&quot;score:&quot;,c2)
     print(&quot;answered:&quot;,a2)
     print(&quot;failed&quot;,f2)
     if(c1&gt;c2):
         print(p1,&quot; won over &quot;,p2)
     elif(c1==c2):
         print(&quot;draw game&quot;)
     else:
         print(p2,&quot; won over &quot;,p1) 
while(i!=4):
      if(i==3):
         if(k==1):
             print(&quot;player 1 turn&quot;)
             print(&quot;your jumbled word is:&quot;)
             k=k+1
             m=play()
             if(m==1):      ##if guessed answer is correct,then score and no.of answered count will be increased
                c1+=1
                a1+=1
             else:
                f1+=1       ##else count of no.of failed to answered will be incremented
         else:
             print(&quot;player 2 turn&quot;)
             print(&quot;your jumbled word is:&quot;)
             k=k-1
             m=play()
             if(m==1):
                c2=c2+1
                a2=a2+1
             else:
                f2=f2+1
       if(i==2):
             print(&quot;present status&quot;)
             stat()
       i=int(input(&quot;enter your choice  1.stop 2.status 3.continue&quot;))
       if(i==1):
             stat()
             i=i+3
&lt;/pre&gt;
&lt;hr&gt;
=== JumbledWord Simple Logic, In Short ===
[[File:jumbledWord.gif]]
&lt;hr&gt;
'''Logic to create a Jumbled Word'''
&lt;hr&gt;
&lt;pre&gt;
#Get Jumbled Word and print it Horizontally
import random

def getJumbledWord(b):
    jumble=''
    l1 = [ b[i] for i in range(0, len(b)) ]
    for t in range(len(l1)):
       p=random.choice(l1)     #this randomly gets letters from the list      
       jumble=jumble+p       
       l1.remove(p)
    return jumble

b=input(&quot;Enter a word to make it jumbled : &quot;)
print(&quot;Jumbled Word : &quot;, getJumbledWord(b))
&lt;/pre&gt;
&lt;pre&gt;
Output:
Enter a word to make it jumbled : live and let live others
Jumbled Word :  vel  toldeisrte aihv len
==========================================

&lt;/pre&gt;
&lt;hr&gt;
'''Another Logic to create a Jumbled Word'''
&lt;hr&gt;
&lt;pre&gt;
import random
b=input(&quot;Enter a word to make it jumbled : &quot;)

def getJumbledWord1(b):
    l1 = [ b[i] for i in range(0, len(b)) ]
    random.shuffle(l1)
    str1 = ''.join(l1)
    return str1

print(&quot;Jumbled Word : &quot;, getJumbledWord1(b))
&lt;/pre&gt;

====Sample Output:====
&lt;pre&gt;
---- Output1 
Enter a word to make it jumbled : butter
Jumbled Word :  tbture

---- Output2 
Enter a word to make it jumbled : petriotism
Jumbled Word :  pittrosime
&lt;/pre&gt;

=Theory of Evolution=

== What is Evolution ? ==
Evolution is the change in heritable characteristics over successive generations. The theory of evolution explains that DNA, which acts as a carrier of genetic information from one generation to other, tends to change or mutate occasionally. These changes are reflected in next generations to come. This is how life has evolved on earth from bacteria to human beings.&lt;br&gt;
[[File:Evolution.png|500px]]

== Implementation ==
 &lt;p style=&quot;text-align:justify&quot;&gt;
An array representing DNA is stored in a file. As genes are forms of DNA, they contain information to be transferred to forthcoming generations. Assume that information is in the form of bits (in the form of 0s and 1s). A number is picked randomly from 1 to the size of the array. A new parameter has been introduced which decides whether mutation would occur or not. If the value of this new parameter is 1 (It is picked randomly from 1 to 100), then only change is reflected down the generations, otherwise it is not. The pseudo code is as follows :
&lt;/p&gt;
Input an array containing genetic information .
Randomly generate a number (say m) from 1 to length of the array. Randomly generate other number (say p) from 1 to 100.

&lt;pre&gt; 
    if p is equal to 1 then 
        if m is 1 then
          set it to 0
        else
          set it to 1
&lt;/pre&gt;
[[#TOP]]</text>
      <sha1>hr50uu7dq8rgysz182ild8yyyxdutsu</sha1>
    </revision>
    <revision>
      <id>3626</id>
      <parentid>3625</parentid>
      <timestamp>2018-09-28T04:42:55Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* JumbledWord Simple Logic, In Short */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="30681">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_3 Contributors of this page]
*Week 3 Playlist: https://www.youtube.com/playlist?list=PLc_j0TNIaWxOVx_z9jAM2UB3RqYNXaoEo
=List=
List is a flexible data structure used for storing a group of data separated by comma. The elements in a list need not be of the same data type.

'''Example:'''
       List_1 = [ 1, 2,3] or 
       List_1 = [&quot;coffee&quot;, &quot;Tea&quot;, &quot;Milk&quot;] or
       List_1 = [1,&quot;coffee&quot;, &quot;Tea&quot;, 3, &quot;5&quot;]

==List Creation==
&lt;pre&gt;a) A list can be created by simply putting values (separated by comma) between square brackets as given below,
       List_1 = [1,&quot;coffee&quot;, &quot;Tea&quot;, 3, &quot;5&quot;] #this creates a list by name List_1 containing following items


Or,
(b)A List can be created from scratch and elements can be added 
        List_2 = [ ]
        List_2.append(&quot;Kala&quot;)
        List_2.append(&quot;Mala&quot;)
Here we use &quot;append&quot; ,which is a function in python that enable us to append or attach an element to a list .
Thus List_2 will now hold [&quot;Kala&quot;,&quot;Mala&quot;]
&lt;/pre&gt;
[[#TOP]]

==Operations and Methods to work with List==
&lt;pre&gt;
a = [25,30,50,90,12,13]
b = [100,300,500,200,250]
&lt;/pre&gt;
&lt;hr&gt;
&lt;table border=2&gt;
  &lt;tr&gt;
    &lt;th&gt;&lt;b&gt;Method/&lt;br&gt;Operator&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Function&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Syntax&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Output&lt;/b&gt;&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;len()&lt;/td&gt;
    &lt;td&gt;Find length of a list&lt;/td&gt;
    &lt;td&gt;len(a)&lt;/td&gt;
    &lt;td&gt;6&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;max()&lt;/td&gt;
    &lt;td&gt;Find maximum element from the list&lt;/td&gt;
    &lt;td&gt;max(a)&lt;/td&gt;
    &lt;td&gt;90&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;min()&lt;/td&gt;
    &lt;td&gt;Find minimum element from the list&lt;/td&gt;
    &lt;td&gt;min(a)&lt;/td&gt;
    &lt;td&gt;12&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sum()&lt;/td&gt;
    &lt;td&gt;Returns sum of all elements of the list&lt;/td&gt;
    &lt;td&gt;sum(a)&lt;/td&gt;
    &lt;td&gt;220&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;reverse()&lt;/td&gt;
    &lt;td&gt;Reverses the original list&lt;/td&gt;
    &lt;td&gt;a.reverse()&lt;/td&gt;
    &lt;td&gt;[13, 12, 90, 50, 30, 25]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sort()&lt;/td&gt;
    &lt;td&gt;Sorts the original list in ascending order&lt;/td&gt;
    &lt;td&gt;a.sort()&lt;/td&gt;
    &lt;td&gt;[12, 13, 25, 30, 50, 90]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sorted()&lt;/td&gt;
    &lt;td&gt;Returns the new sorted list &lt;/td&gt;
    &lt;td&gt;sorted(a)&lt;/td&gt;
    &lt;td&gt;[12, 13, 25, 30, 50, 90]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;insert()&lt;/td&gt;
    &lt;td&gt;Insert at a particular index in the list, and shifts remaining elements&lt;/td&gt;
    &lt;td&gt;a.insert(3,3)&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 3, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;append()&lt;/td&gt;
    &lt;td&gt;Adds elements/object to the end of the list&lt;/td&gt;
    &lt;td&gt;a.append(5)&lt;br&gt;a.append([10,20])&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 5]&lt;br&gt;[25, 30, 50, 90, 12, 13, [10, 20]]&lt;br&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;extend()&lt;/td&gt;
    &lt;td&gt;Adds object to the end of the list as elements not as object&lt;/td&gt;
    &lt;td&gt;a.extend([10,20])&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 10, 20]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;*&amp;nbsp;&amp;nbsp;Repeatation&lt;br&gt;operator&lt;/td&gt;
    &lt;td&gt;Repeat the list for n times and returns a new list&lt;/td&gt;
    &lt;td&gt;a*2&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 25, 30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;+ Concatenation&lt;br&gt;operator&lt;/td&gt;
    &lt;td&gt;Concatenates two lists, and returns a new list&lt;/td&gt;
    &lt;td&gt;a+b&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 100, 300, 500, 200, 250]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;index()&lt;/td&gt;
    &lt;td&gt;Finds index of a particular element in the list or not&lt;/td&gt;
    &lt;td&gt;a.index(25)&lt;br&gt;a.index(0)&lt;br&gt;&lt;/td&gt;
    &lt;td&gt;0&lt;br&gt;&lt;br&gt;ValueError: 0 is not in list&lt;br&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;in operator&lt;/td&gt;
    &lt;td&gt;Finds whether a particular element is in the list or not, returns boolean&lt;/td&gt;
    &lt;td&gt;25 in a&lt;/td&gt;
    &lt;td&gt;True&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;not in operator&lt;/td&gt;
    &lt;td&gt;Checks if element is not available in list, returns boolean&lt;/td&gt;
    &lt;td&gt;25 not in a&lt;/td&gt;
    &lt;td&gt;False&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;count()&lt;/td&gt;
    &lt;td&gt;Counts the number of occurence of an element in the list&lt;/td&gt;
    &lt;td&gt;a.count(25)&lt;/td&gt;
    &lt;td&gt;1&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;remove()&lt;/td&gt;
    &lt;td&gt;Removes an element from the list&lt;/td&gt;
    &lt;td&gt;a.remove(25)&lt;/td&gt;
    &lt;td&gt; [30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;pop()&lt;/td&gt;
    &lt;td&gt;Delete and return item at index 0&lt;/td&gt;
    &lt;td&gt;a.pop(0)&lt;/td&gt;
    &lt;td&gt;25 , a will be [30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;del&lt;/td&gt;
    &lt;td&gt;Deletes item at a particular index from the list&lt;/td&gt;
    &lt;td&gt;del a[0]&lt;/td&gt;
    &lt;td&gt;[30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;all()&lt;/td&gt;
&lt;td&gt;Returns True, if all items in list are True or it is an empty list&lt;/td&gt;
&lt;td&gt;all([True, True, True])
all([])
&lt;/td&gt;
&lt;td&gt;True&lt;br&gt;
True&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;any()&lt;/td&gt;
&lt;td&gt;Returns True, if any item in list is True else return False&lt;/td&gt;
&lt;td&gt;any([True, True, True])&lt;br&gt;
any([True, False, True])&lt;br&gt;
any([])&lt;/td&gt;
&lt;td&gt;True&lt;br&gt;False&lt;br&gt;False&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;

==Printing the List==
=== Print whole list ===
A list can be printed simply or using a ''for / while'' loop 

 print(List_2)     # To print the entire list
This code will print      
 ['Kala','Mala']     

===Print element at a particular index===
&lt;pre&gt;
Using index position
    List_2[0]     # prints 'Kala' ,i.e,the value at index position 0.
    List_2[1]     # prints 'Mala'.
&lt;/pre&gt;
=== Without using index position ===
&lt;pre&gt;
for item in List_2:   # here item is a variable used to access elements in list.
       print(item)
   This code snippet prints 
    Kala
    Mala
&lt;/pre&gt;
[[#TOP]]

==Search for a particular element in list==
Elements in a list can be searched by one of the two ways:
=== using index() function===
&lt;pre&gt;
ages1 = [11,23,12,23,45]

#if element is available in the list, index() returns the index value on which, the element is present.
print(ages1.index(45))#Output: 4

#if element is not available in the list, index() returns ''ValueError''
print(ages1.index(0))#Output: ValueError:
&lt;/pre&gt;

In programming, if such error occurs, program gets terminated. It can be solved using exception handling.
e.g.
&lt;pre&gt;
ages1 = [11,23,12,23,45]

try:
    print(ages1.index(0))
except ValueError:
    print(&quot;Exception has occured&quot;)    
    print(&quot;Element is not found in the list&quot;)

&lt;/pre&gt;
&lt;pre&gt;
'''Output: 
Exception has occured
Element is not found in the list
'''&lt;/pre&gt;
[[#TOP]]

=== using 'in' operator===
''in'' operator is used to check whether a particular element is available in the list or not.e.g.

&lt;pre&gt;
ages1 = [11,23,12,23,45]
no=11

if no in ages1:
    print(&quot;no is there in the list&quot;)
else:    
    print(&quot;no is NOT there in the list&quot;)
&lt;/pre&gt;
&lt;pre&gt;
#Output: no is there in the list
&lt;/pre&gt;


'''Number is not there in the list'''
&lt;pre&gt;
ages1 = [11,23,12,23,45]
no=15

if no in ages1:
    print(&quot;no is there in the list&quot;)
else:    
    print(&quot;no is NOT there in the list&quot;)
&lt;/pre&gt;
&lt;pre&gt;
Output: no is NOT there in the list
&lt;/pre&gt;
[[#TOP]]

==Updating the List==
The lists can be updated using ''append'' or ''insert'' function.  Append adds the element to the end of the list and Insert adds the element in the specified position.
&lt;pre&gt;
   # add the element 'Sheela' to the end of the list.
   List_2.append(&quot;Sheela&quot;)    
   print (List_2) will output 
   ['Kala', 'Mala', 'Sheela']
&lt;/pre&gt;
   &lt;pre&gt;
# add the element &quot;Bala&quot; in the list at the index 1.
   List_2.insert(1,&quot;Bala&quot;)    
   print (List_2) will output 
   ['Kala', 'Bala','Mala', 'Sheela']
&lt;/pre&gt;

=== Extend the list by adding elements of other list at end using extend()===
&lt;pre&gt;
ages = [11,23,12,23,45]
ages.extend([57,58])
print(ages)
&lt;/pre&gt;

&lt;pre&gt;
#Output: [11, 23, 12, 23, 45, 57, 58]
&lt;/pre&gt;

==== Difference between ''append and extend'' ====
Difference between append and extend can be easily understood, by the following example.

&lt;pre&gt;
appendlist = [11,23,12,23,45]
appendlist.append([57,58])

extendlist= [11,23,12,23,45]
extendlist.extend([57,58])
&lt;/pre&gt;

&lt;pre&gt;
'''Output:
[11, 23, 12, 23, 45, [57, 58]]
[11, 23, 12, 23, 45, 57, 58]'''
&lt;/pre&gt;

[[#TOP]]

==Basic Operations on List==
===Frequency of Occurrence===
list.count(object) will return the number of times the object occur in the list.
  '''Example'''
    ages = [11,23,12,23,45,43,22,24,23]
    ages.count(23) will return
    3
    ages.count(100) will return
    0

===Length of the List===
len(list) will return the length of the list ie. the number of objects in the list.
  '''Example'''
&lt;pre&gt;
    ages = [11,23,12,23,45,43,22,24,23]
    len(ages) # Output: 9
&lt;/pre&gt;

To print the objects in the list either use ''for item in list'' or ''for index in range(len(list))''
&lt;pre&gt;
    for item in ages:       
        print (item)  
        (OR)
    for index in range(len(ages)) :
        print (ages[index])
&lt;/pre&gt;

===Sort the List===
list.sort() will sort the list in ascending order
  '''Example'''
    ages = [11,23,12,23,45,43,22,24,23]
    ages.sort() 
    print (ages) 
    [11, 12, 22, 23, 23, 23, 24, 43, 45]

[[#TOP]]

===Sort the List using sorted() function===
sorted(list1) will sort the list and return a new list, it doesn't modify the original list
&lt;br&gt;'''Example: Sort in ascending order'''
&lt;pre&gt;
ages = [11,23,12,23,45,43,22,24,23]
newList=sorted(ages)
print(newList)

#Output: [11, 12, 22, 23, 23, 23, 24, 43, 45]
&lt;/pre&gt;

&lt;br&gt;'''Example: Sort in descending order'''
&lt;pre&gt;
ages = [11,23,12,23,45,43,22,24,23]
newList=sorted(ages,reverse=True)
print(newList)

#Output: [45, 43, 24, 23, 23, 23, 22, 12, 11]
&lt;/pre&gt;

===Reverse the List===
list.reverse() will reverse the original list
  '''Example'''
    ages = [11, 12, 22, 23, 23, 23, 24, 43, 45]
    ages.reverse()
    print (ages)
    [45, 43, 24, 23, 23, 23, 22, 12, 11]

Both sort() and reverse() list operation will work on numeric and alphanumeric data list.

A special use of the reverse() function is to descend a list that is sorted in ascending order.

  '''Example'''
&lt;pre&gt;
ages = [11, 12, 22, 23, 23, 23, 24, 43, 45]
ages.sort()
print(ages)
ages.reverse()
print(ages)
&lt;/pre&gt;

===Slicing===
Used to retrieve an object or objects in a range as a list  
  '''Example'''

Use ''list[index]'' to retrieve the object at the given index
&lt;pre&gt;
In [1]: student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
In [2]: student[3]     #Object at index 3.  Remember index starts at 0
Out[2]: 'Geetha'      
&lt;/pre&gt;

Use ''list[start_index : end_index + 1]'' to retrieve objects from the start_index to end_index 
&lt;pre&gt;
In [3]: student[2:4]     # Objects from index 2 to 3 as List. Note the [ and ]
Out[3]: ['Vijay', 'Geetha']   
&lt;/pre&gt;

Use ''list[:]'' to retrieve objects from the starting of the list to the end of the list. 
The default start value will be the starting index of the list (i.e. 0) and the default end value
will be the length of the list 
&lt;pre&gt;
In [4]: student[:]        # prints the entire list
Out[4]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma', 'Janani']
&lt;/pre&gt;
&lt;pre&gt;
In [5]: student[:5]       # prints the objects from the start of the list upto object at index 4
Out[5]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran']
&lt;/pre&gt;
&lt;pre&gt;
In [6]: student[2:]       # prints the objects from index 2 upto the end of the list
Out[6]: ['Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma', 'Janani']
&lt;/pre&gt;

Negative index too is available in Python. It starts from last element of the list. i.e.
&lt;pre&gt;
In [7]:student[-1]        #prints last index of list
Out[7]: 'Janani'
&lt;/pre&gt;
&lt;pre&gt;
In [8]:student[-1:-8]     #prints empty list
Out[8]: []
&lt;/pre&gt;
&lt;pre&gt;
In [9]:student[-8:-1]     #prints -8th index to -1st index elements
Out[9]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma']
&lt;/pre&gt;

[[#TOP]]

===Removing Item from list ===
----

Is used to remove a specific item from the list.

'''Example:'''
 
Use list.remove(entry/value)  Or   del list[index]    Or list.pop(index)
&lt;pre&gt;
student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
student.remove(&quot;Arun&quot;)   #This will delete item &quot;Arun&quot;
         Or    
del student[0]           # This will delete item at index 0
         Or
student.pop(0)         # This will delete and return item at index 0
print(student)    
Output: &quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
&lt;/pre&gt;

[[#TOP]]

===Delete list ===
----
Used to delete complete list

'''Example'''

Use del &lt;list name&gt;
&lt;pre&gt;
student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
del student&lt;/pre&gt;

===Concatenation of two lists===
----
''+'' is the concatenation operator which is used concatenate two lists. 
&lt;pre&gt;
ages1 = [11,23,12,23,45]
ages2 = [25, 24, 43, 47]
age=ages1+ages2
print(age)
#Output: [11, 23, 12, 23, 45, 25, 24, 43, 47]
&lt;/pre&gt;

===Repeatation of a list ===
----
''*'' is the operator to repeat a particular list.
&lt;pre&gt;
ages1 = [11,23,12,23,45]
age=ages1*5 #ages1 list is repeated 5 times and stroed in ''age'' list
print(age)

#Output: [11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45]
&lt;/pre&gt;

=== all and any for List===
all() and any() are special functions to check whether all elements in iterable is ''True'' or any element is ''True''
&lt;ol&gt;
&lt;li&gt;If all elements in a list are ''True'', '''all()''' will return ''True''&lt;/li&gt;
&lt;li&gt;If iterable is ''empty'', '''all()''' will return ''True''&lt;/li&gt;
&lt;li&gt;If iterable contains at least one ''True'', '''any()''' will return ''True''&lt;/li&gt;
&lt;li&gt;If iterable is ''empty'', '''any()''' will return ''False''&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;
lsit=[True, True, True, True]
print(all(lsit))#Output: True
print(any(lsit))#Output: True

lsit1=[True, False, True, True]
print(all(lsit1))#Output: False
print(any(lsit1))#Output: True

lsit2=[False,False,False]
print(all(lsit2))#Output: False
print(any(lsit2))#Output: False

lsit3=[]
print(all(lsit3))#Output: True
print(any(lsit3))#Output: False
&lt;/pre&gt;

==Conditional Statements==
&lt;pre&gt;Conditionals are used to check the condition and change the flow of the program 
accordingly. They are realized in programming languages through if statement. The 
syntax is as follows :
&lt;pre&gt;
         if condition : 
            statement
&lt;/pre&gt;
    '''Note:''' Do not forget indentation (inserting space/tab) in the line after the
 if condition.
    
    In case you want to execute a set of statements when a condition is true and another

set of statement when the condition is false.
&lt;pre&gt;
         if condition : 
            statement 1
         else :
            statement 2
&lt;/pre&gt;

&lt;pre&gt;    
    Multiple if-else statements can be written as follows:
         if condition_1 : 
            statement 1
         elif condition_2 : # 'elif' is short for 'else if'
            statement 2
         elif condition_3 :
            statement 3
        .
        .
         else :
            final statement
&lt;/pre&gt;

[[#TOP]]

=Loops and Conditionals : Fizzbuzz=
====Loops====
Loops are used to execute a set of repetitive statements. They are realised
through 'while' and 'for' loops in programming languages. The syntax of 'for' loop is 
as follows :
&lt;pre&gt;
for LOOPVARIABLE in SEQUENCE: 
            STATEMENTS&lt;/pre&gt;

    '''e.g.''' to print all the data from a list we can write:
&lt;pre&gt;
for item in list_name:
      print(item)&lt;/pre&gt;
    OR
&lt;pre&gt;
for index in range(len(list_name)):
      print(list_name[index])
 &lt;/pre&gt;   
    The syntax for while loop is as follows :
&lt;pre&gt;    
while BOOLEANEXPRESSION: 
     STATEMENTS
     INCREMENT/DECREMENT
&lt;/pre&gt;    
    '''e.g.''' if we want to print all numbers from 1 to 10
&lt;pre&gt;
i=1
while i&lt;=10 :
    print(i,&quot; &quot;)
    i=i+1
    &lt;/pre&gt;
 
'while' loop has indefinite iteration (run-time unknown). So, there must be loop,  break statement in it.
 Whereas 'for' loop is definite in nature (i.e. known or predictable span).&lt;br&gt;

&lt;b&gt;NOTE: Python doesn't have anything like do-while loop.&lt;/b&gt;

[[#TOP]]

==Implementation==
Here, we try to demonstrate the concept of loops and conditionals through a game called Fizzbuzz. The rules are as follows :&lt;br/&gt;
[[File:fizzBuzz.gif]]

• if input number is a multiple of ’3’ print ”Fizz”
&lt;br/&gt;
• if input number is a multiple of ’5’ print ”Buzz”
&lt;br/&gt;
• if input number is a multiple of both '3' and ’5’ print ”FizzBuzz”
&lt;br/&gt;
The pseudo code is as follows :
&lt;pre&gt;
   If input no % 3 == 0 and  input no % 5 == 0 : 
       print ”Fizzbuzz”
   else if input no % 3 == 0 : 
       print ”Fizz”
   else if input no % 5 == 0 : 
       print ”Buzz”
   else :
       print the input no
&lt;/pre&gt;
 &lt;p style=&quot;text-align:justify&quot;&gt;
The order of statements execution matters to get the desired output. The highest priority condition should be first followed by other. In fizzbuzz programming, first checking should be done for both divisibility of 3 and 5. If condition not satisfied only then it should check individually for 3 or 5. So carefully choosing the order is crucial for better programming.
Note: There is some effect of present condition statements chosen on next conditions statements. That is why in first attempt fizzbuzz programming got struck.&lt;/p&gt;

Example: 
&lt;pre&gt;
#Code to achieve the above requirement in python3.
i = int(input(&quot;Enter the number&quot;)) 
if i%3 == 0 and i%5 == 0: print(i,&quot;FizzBuzz&quot;)  
elif i%5 == 0: print(i,&quot;Buzz&quot;)
elif i%3 == 0: print(i,&quot;Fizz&quot;)
else: print(i)
&lt;/pre&gt;
Lets put the same into a loop for a range given by the user.
&lt;pre&gt;
def fizzbuzzgame(start,stop):
    for i in range(start,stop+1):
        if i%3 == 0 and i%5 == 0:
            print(i,&quot;FizzBuzz&quot;)
        elif i%5 == 0:
            print(i,&quot;Buzz&quot;)
        elif i%3 == 0:
            print(i,&quot;Fizz&quot;)
        else: print(i)

fizzbuzzgame(50,100)
&lt;/pre&gt;
&lt;pre&gt;
#Output:
1235
Buzz
======================================
555
Fizzbuzz
======================================
1235
Buzz
======================================
999
Fizz
&lt;/pre&gt;

=== Fizz Buzz game in Interactive mode with Score ===
'''By Ms. Ami Tusharkant Choksi'''
&lt;pre&gt;
def fizzbuzzgame(i):
        if i%3 == 0 and i%5 == 0:
            print(i,&quot;FizzBuzz&quot;)
            return(&quot;fzbz&quot;)
        elif i%5 == 0:
            print(i,&quot;Buzz&quot;)
            return(&quot;bz&quot;)
        elif i%3 == 0:
            print(i,&quot;Fizz&quot;)
            return(&quot;fz&quot;)
        else:
            print(i)
            return(&quot;no&quot;)

ch = 'y'
fizzbuzz=0
fizz=0
buzz=0
nothing=0
print(&quot;&quot;&quot;

 /$$$$$$$$/$$                  /$$$$$$$                            
| $$_____|__/                 | $$__  $$                           
| $$      /$$/$$$$$$$$/$$$$$$$| $$  \ $$/$$   /$$/$$$$$$$$/$$$$$$$$
| $$$$$  | $|____ /$$|____ /$$| $$$$$$$| $$  | $|____ /$$|____ /$$/
| $$__/  | $$  /$$$$/   /$$$$/| $$__  $| $$  | $$  /$$$$/   /$$$$/ 
| $$     | $$ /$$__/   /$$__/ | $$  \ $| $$  | $$ /$$__/   /$$__/  
| $$     | $$/$$$$$$$$/$$$$$$$| $$$$$$$|  $$$$$$//$$$$$$$$/$$$$$$$$
|__/     |__|________|________|_______/ \______/|________|________/
                                                                  
&quot;&quot;&quot;)   
print('''

  /$$$$$$                                
 /$$__  $$                               
| $$  \__/ /$$$$$$ /$$$$$$/$$$$  /$$$$$$ 
| $$ /$$$$|____  $| $$_  $$_  $$/$$__  $$
| $$|_  $$ /$$$$$$| $$ \ $$ \ $| $$$$$$$$
| $$  \ $$/$$__  $| $$ | $$ | $| $$_____/
|  $$$$$$|  $$$$$$| $$ | $$ | $|  $$$$$$$
 \______/ \_______|__/ |__/ |__/\_______/
                                     
''')

while(ch == 'y'):
    n=int(input(&quot;Enter a Number : &quot;))
    winLoose=fizzbuzzgame(n)
    if(winLoose == &quot;fz&quot;):
        fizz+=1
    elif(winLoose == &quot;bz&quot;):
        buzz+=1
    elif(winLoose == &quot;fzbz&quot;):
        fizzbuzz+=1
    ch=input(&quot;Do you want to continue playing the game : (y/n)&quot;)
    if(ch=='n'):
        print('Congratulations, your score is\n FizzBuzz:%d\nFizz:%d\nBuzz:%d' %
(fizzbuzz,fizz,buzz))
    
'''Sample Output:

 /$$$$$$$$/$$                  /$$$$$$$                            
| $$_____|__/                 | $$__  $$                           
| $$      /$$/$$$$$$$$/$$$$$$$| $$  \ $$/$$   /$$/$$$$$$$$/$$$$$$$$
| $$$$$  | $|____ /$$|____ /$$| $$$$$$$| $$  | $|____ /$$|____ /$$/
| $$__/  | $$  /$$$$/   /$$$$/| $$__  $| $$  | $$  /$$$$/   /$$$$/ 
| $$     | $$ /$$__/   /$$__/ | $$  \ $| $$  | $$ /$$__/   /$$__/  
| $$     | $$/$$$$$$$$/$$$$$$$| $$$$$$$|  $$$$$$//$$$$$$$$/$$$$$$$$
|__/     |__|________|________|_______/ \______/|________|________/
                                                                                                                                   

  /$$$$$$                                
 /$$__  $$                               
| $$  \__/ /$$$$$$ /$$$$$$/$$$$  /$$$$$$ 
| $$ /$$$$|____  $| $$_  $$_  $$/$$__  $$
| $$|_  $$ /$$$$$$| $$ \ $$ \ $| $$$$$$$$
| $$  \ $$/$$__  $| $$ | $$ | $| $$_____/
|  $$$$$$|  $$$$$$| $$ | $$ | $|  $$$$$$$
 \______/ \_______|__/ |__/ |__/\_______/
                                         

Enter a Number : 666
666 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 777
777 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 555
555 FizzBuzz
Do you want to continue playing the game : (y/n)y
Enter a Number : 1
1
Do you want to continue playing the game : (y/n)y
Enter a Number : 789
789 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 25
25 Buzz
Do you want to continue playing the game : (y/n)n
Congratulations, your score is

FizzBuzz:1
Fizz:3
Buzz:1

&lt;/pre&gt;

=Crowd Computing: Just Estimate=
==Wisdom of Crowds==
 &lt;p style=&quot;text-align:justify&quot;&gt;
The concept of ’Wisdom of Crowds’ was proposed by Francis Galton. A weight-judging competition was carried on at the annual show of the West of England Fat Stock and Poultry Exhibition recently held at Plymouth, A fat ox having been selected, competitors bought stamped and numbered cards, each, on which to inscribe their respective names, addresses, and estimates of what the ox would weigh after it had been slaughtered. Those who guessed most successfully received prizes. About 8oo tickets were issued to the par- ticipants. The middlemost estimate of all the estimates recorded was 1207 lbs and the actual weight of the ox was 1198 lbs.&lt;/p&gt;

==Our Experiment==
 &lt;p style=&quot;text-align:justify&quot;&gt;
The crowd had to guess the number of candies/gems in a jar. Around 75 people participated in the experiment. The actual number of gems in the jar were 375. The median of all estimates came out to be 300 and the mean of all the estimates came out to be around 396. Median underestimated and mean overestimated the actual value. So according to recent studies, Trimmed mean must be used as an aggregate measure to estimate where Wisdom of Crowds is involved.
&lt;/p&gt;
[[File:Gemsjar.jpg|center|200px|caption]]

===Trimmed Mean===
 &lt;p style=&quot;text-align:justify&quot;&gt;
In these kinds of experiments, 10% trimmed mean is usually followed. For calculating 10% trimmed mean, remove 10% smallest and 10% largest values from the sample. Calculate the mean of the sample obtained. In the above experiment, the trimmed mean came out to be around 351 which is very close to the actual value.&lt;/p&gt;

==Implementation==
Here, we try to demonstrate the concept of trimmed mean through crowd computing.
&lt;ol&gt;
&lt;li&gt; Input a list of estimates done by the crowd .&lt;/li&gt;
&lt;li&gt; Sort the list.&lt;/li&gt;
&lt;li&gt; Remove the 10% smallest values.&lt;/li&gt;
&lt;li&gt; Remove the 10% largest values.
&lt;li&gt; Calculate the mean of the new list obtained .&lt;/li&gt;&lt;/ol&gt;&lt;hr&gt;

==Data of Experiment==       
    Estimates =[1000,1010,1786,2000,1500,1500,100,120,150,150,150,170,175,180,197,200,200,200,200,200,200,220,220,220,220,234,250,250,250,250,250,250,250,250,250,263,270,275,275,286,300,
                300,300,300,300,300,300,300,320,350,350,350,400, 400,400,400,400,450,467,500,500,500,500,500,500,500,550,550,600,600,600,650,700,700,720]

    '''CODE:'''
&lt;pre&gt;
Estimates = [1000,1010,1786,2000,1500,1500,100,120,150,150,150,170,175,180,197,200,200,200,200,200,200,220,220,220,220,234,250,250,250,250,250,250,250,250,250,263,270,275,275,286,300,                300,300,300,300,300,300,300,320,350,350,350,400,400,400,400,400,450,467,500,500,500,500,500,500,500,550,550,600,600,600,650,700,700,720]
Estimates.sort()
offset = int(0.10*len(Estimates))
for i in range(offset):
       del Estimates[0]
       del Estimates[-1]
Sum = 0    
for i in range(len(Estimates)):
       Sum += Estimates[i]
Mean_Value = Sum/len(Estimates)
print(&quot;Mean : &quot;, int(Mean_Value))
#Output:
Mean :  351
&lt;/pre&gt;
&lt;hr&gt;
==Trimmed Mean for the above example== 
&lt;h3&gt;Using scipy library&lt;/h3&gt;
&lt;pre&gt;
#import scipy to use the method of trim_mean
from scipy import stats
trimMean = stats.trim_mean(Estimates, 0.1) # Trim 10% at both ends
print(&quot;Trimmed Mean : &quot;,trimMean)
#Output:
Trimmed Mean :  335.1020408163265
&lt;/pre&gt;

&lt;h3&gt;Without using scipy library&lt;/h3&gt;
&lt;pre&gt;
#Trimmed mean with 10%
p=10/100
#sorted data
data=[2, 4, 6, 7, 11, 21, 81, 90, 105, 121]
n = len(data)
#Remove elements from both end
rem=int(n*p)
newData = data[rem:-rem]
mean = 0
for i in newData:
    mean += i
mean = int(mean/len(newData))
print(&quot;Trimmed mean : &quot;,mean)
#Output: Trimmed mean :  40
&lt;/pre&gt;
[[#Top]]

=Jumbled_Words Permutations: Jumbled Words=
==What are Permutations ?==
A permutation also called ordering of selected number of elements from a list denoted by nPr here we are choosing all elements of a list and so n=r&lt;br&gt;
nPr=n!/(n-r)!&lt;br&gt; as n=r
nPn=n!&lt;br&gt; which gives all possible arrangement of elements present in a list.

 For example, permutations of list [1,2,3] are [1,2,3], [1,3,2], [2,1,3], [2,3,1], 
[3,1,2], and [3,2,1]. 
The number of permutations of a list of elements nPn is given by n!. For example, there are 2! = 2 x 1 = 2 permutations of [1,2], namely [1,2] and [2,1], and 3! = 3 x 2 x 1 = 6 permutations of [1,2,3], as mentioned above.&lt;br/&gt;
[[File:Permutations.jpg]]

==Implementation==
 &lt;p style=&quot;text-align:justify&quot;&gt;
Here, we try to demonstrate the concept of permutations through jumbled words. It is a two player game in which one person presents the other person a different permutation of the word in his mind. The other person has to guess the right word. If he guesses, the he wins otherwise he loses.&lt;/p&gt;
 Input an list of words.
 Randomly pick a word from the list of words .
 Shuffle this word and present it to the other player.
 if word guesses by the player is same as the one picked from list of w
     player wins
 else
     player loses

ALTERNATE CODE TO GENERATE THIS GAME:
&lt;pre&gt;
import random
p1=input(&quot;enter player 1 name:&quot;)
p2=input(&quot;enter player 2 name:&quot;)
l=[&quot;rainbow&quot;,&quot;computer&quot;,&quot;robot&quot;,&quot;butter&quot;,&quot;vegetable&quot;,&quot;science&quot;,&quot;correct&quot;]
c1=c2=a1=a2=f1=f2=0
k=1
i=3
def play():
    n=random.choice(l)        ##n=chooses a word from list l
    l1=[]
    for j in n:
       l1.append(j)      ##creates a list for word in n
    for t in range(len(l1)):
       p=random.choice(l1)     ##this randomly displays letters in the list
       print(p)
       l1.remove(p)          ##to avoid the repetition of a letter
    s=input(&quot;enter the word:&quot;)
    if(s==n):
        print(&quot;correct&quot;)
        return 1
    else:
        print(&quot;not correct&quot;)
        print(&quot;answer is&quot;,n)
        return 0
def stat():
     print(&quot;player 1:&quot;)
     print(&quot;score:&quot;,c1)
     print(&quot;answered:&quot;,a1)
     print(&quot;failed:&quot;,f1)
     print(&quot;.............&quot;)
     print(&quot;player 2:&quot;)
     print(&quot;score:&quot;,c2)
     print(&quot;answered:&quot;,a2)
     print(&quot;failed&quot;,f2)
     if(c1&gt;c2):
         print(p1,&quot; won over &quot;,p2)
     elif(c1==c2):
         print(&quot;draw game&quot;)
     else:
         print(p2,&quot; won over &quot;,p1) 
while(i!=4):
      if(i==3):
         if(k==1):
             print(&quot;player 1 turn&quot;)
             print(&quot;your jumbled word is:&quot;)
             k=k+1
             m=play()
             if(m==1):      ##if guessed answer is correct,then score and no.of answered count will be increased
                c1+=1
                a1+=1
             else:
                f1+=1       ##else count of no.of failed to answered will be incremented
         else:
             print(&quot;player 2 turn&quot;)
             print(&quot;your jumbled word is:&quot;)
             k=k-1
             m=play()
             if(m==1):
                c2=c2+1
                a2=a2+1
             else:
                f2=f2+1
       if(i==2):
             print(&quot;present status&quot;)
             stat()
       i=int(input(&quot;enter your choice  1.stop 2.status 3.continue&quot;))
       if(i==1):
             stat()
             i=i+3
&lt;/pre&gt;
&lt;hr&gt;
=== JumbledWord Simple Logic, In Short ===
[[File:jumbledWord.gif]]
&lt;hr&gt;
'''Logic to create a Jumbled Word'''
&lt;hr&gt;
&lt;pre&gt;
#Get Jumbled Word and print it Horizontally
import random

def getJumbledWord(b):
    jumble=''
    l1 = [ b[i] for i in range(0, len(b)) ]
    for t in range(len(l1)):
       p=random.choice(l1)     #this randomly gets letters from the list      
       jumble=jumble+p       
       l1.remove(p)
    return jumble

b=input(&quot;Enter a word to make it jumbled : &quot;)
print(&quot;Jumbled Word : &quot;, getJumbledWord(b))
&lt;/pre&gt;
&lt;pre&gt;
Output:
Enter a word to make it jumbled : live and let live others
Jumbled Word :  vel  toldeisrte aihv len
==========================================
Enter a word to make it jumbled : junkfood
Jumbled Word :  nfukdooj
&lt;/pre&gt;
&lt;hr&gt;
'''Another Logic to create a Jumbled Word'''
&lt;hr&gt;
&lt;pre&gt;
import random
b=input(&quot;Enter a word to make it jumbled : &quot;)

def getJumbledWord1(b):
    l1 = [ b[i] for i in range(0, len(b)) ]
    random.shuffle(l1)
    str1 = ''.join(l1)
    return str1

print(&quot;Jumbled Word : &quot;, getJumbledWord1(b))
&lt;/pre&gt;

====Sample Output:====
&lt;pre&gt;
---- Output1 
Enter a word to make it jumbled : butter
Jumbled Word :  tbture

---- Output2 
Enter a word to make it jumbled : petriotism
Jumbled Word :  pittrosime
&lt;/pre&gt;

=Theory of Evolution=

== What is Evolution ? ==
Evolution is the change in heritable characteristics over successive generations. The theory of evolution explains that DNA, which acts as a carrier of genetic information from one generation to other, tends to change or mutate occasionally. These changes are reflected in next generations to come. This is how life has evolved on earth from bacteria to human beings.&lt;br&gt;
[[File:Evolution.png|500px]]

== Implementation ==
 &lt;p style=&quot;text-align:justify&quot;&gt;
An array representing DNA is stored in a file. As genes are forms of DNA, they contain information to be transferred to forthcoming generations. Assume that information is in the form of bits (in the form of 0s and 1s). A number is picked randomly from 1 to the size of the array. A new parameter has been introduced which decides whether mutation would occur or not. If the value of this new parameter is 1 (It is picked randomly from 1 to 100), then only change is reflected down the generations, otherwise it is not. The pseudo code is as follows :
&lt;/p&gt;
Input an array containing genetic information .
Randomly generate a number (say m) from 1 to length of the array. Randomly generate other number (say p) from 1 to 100.

&lt;pre&gt; 
    if p is equal to 1 then 
        if m is 1 then
          set it to 0
        else
          set it to 1
&lt;/pre&gt;
[[#TOP]]</text>
      <sha1>5ip9bbu9frjzk6ffj6nylzcpmuw5rn0</sha1>
    </revision>
    <revision>
      <id>3627</id>
      <parentid>3626</parentid>
      <timestamp>2018-09-28T04:43:31Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* JumbledWord Simple Logic, In Short */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="30678">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_3 Contributors of this page]
*Week 3 Playlist: https://www.youtube.com/playlist?list=PLc_j0TNIaWxOVx_z9jAM2UB3RqYNXaoEo
=List=
List is a flexible data structure used for storing a group of data separated by comma. The elements in a list need not be of the same data type.

'''Example:'''
       List_1 = [ 1, 2,3] or 
       List_1 = [&quot;coffee&quot;, &quot;Tea&quot;, &quot;Milk&quot;] or
       List_1 = [1,&quot;coffee&quot;, &quot;Tea&quot;, 3, &quot;5&quot;]

==List Creation==
&lt;pre&gt;a) A list can be created by simply putting values (separated by comma) between square brackets as given below,
       List_1 = [1,&quot;coffee&quot;, &quot;Tea&quot;, 3, &quot;5&quot;] #this creates a list by name List_1 containing following items


Or,
(b)A List can be created from scratch and elements can be added 
        List_2 = [ ]
        List_2.append(&quot;Kala&quot;)
        List_2.append(&quot;Mala&quot;)
Here we use &quot;append&quot; ,which is a function in python that enable us to append or attach an element to a list .
Thus List_2 will now hold [&quot;Kala&quot;,&quot;Mala&quot;]
&lt;/pre&gt;
[[#TOP]]

==Operations and Methods to work with List==
&lt;pre&gt;
a = [25,30,50,90,12,13]
b = [100,300,500,200,250]
&lt;/pre&gt;
&lt;hr&gt;
&lt;table border=2&gt;
  &lt;tr&gt;
    &lt;th&gt;&lt;b&gt;Method/&lt;br&gt;Operator&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Function&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Syntax&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Output&lt;/b&gt;&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;len()&lt;/td&gt;
    &lt;td&gt;Find length of a list&lt;/td&gt;
    &lt;td&gt;len(a)&lt;/td&gt;
    &lt;td&gt;6&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;max()&lt;/td&gt;
    &lt;td&gt;Find maximum element from the list&lt;/td&gt;
    &lt;td&gt;max(a)&lt;/td&gt;
    &lt;td&gt;90&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;min()&lt;/td&gt;
    &lt;td&gt;Find minimum element from the list&lt;/td&gt;
    &lt;td&gt;min(a)&lt;/td&gt;
    &lt;td&gt;12&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sum()&lt;/td&gt;
    &lt;td&gt;Returns sum of all elements of the list&lt;/td&gt;
    &lt;td&gt;sum(a)&lt;/td&gt;
    &lt;td&gt;220&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;reverse()&lt;/td&gt;
    &lt;td&gt;Reverses the original list&lt;/td&gt;
    &lt;td&gt;a.reverse()&lt;/td&gt;
    &lt;td&gt;[13, 12, 90, 50, 30, 25]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sort()&lt;/td&gt;
    &lt;td&gt;Sorts the original list in ascending order&lt;/td&gt;
    &lt;td&gt;a.sort()&lt;/td&gt;
    &lt;td&gt;[12, 13, 25, 30, 50, 90]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sorted()&lt;/td&gt;
    &lt;td&gt;Returns the new sorted list &lt;/td&gt;
    &lt;td&gt;sorted(a)&lt;/td&gt;
    &lt;td&gt;[12, 13, 25, 30, 50, 90]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;insert()&lt;/td&gt;
    &lt;td&gt;Insert at a particular index in the list, and shifts remaining elements&lt;/td&gt;
    &lt;td&gt;a.insert(3,3)&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 3, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;append()&lt;/td&gt;
    &lt;td&gt;Adds elements/object to the end of the list&lt;/td&gt;
    &lt;td&gt;a.append(5)&lt;br&gt;a.append([10,20])&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 5]&lt;br&gt;[25, 30, 50, 90, 12, 13, [10, 20]]&lt;br&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;extend()&lt;/td&gt;
    &lt;td&gt;Adds object to the end of the list as elements not as object&lt;/td&gt;
    &lt;td&gt;a.extend([10,20])&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 10, 20]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;*&amp;nbsp;&amp;nbsp;Repeatation&lt;br&gt;operator&lt;/td&gt;
    &lt;td&gt;Repeat the list for n times and returns a new list&lt;/td&gt;
    &lt;td&gt;a*2&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 25, 30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;+ Concatenation&lt;br&gt;operator&lt;/td&gt;
    &lt;td&gt;Concatenates two lists, and returns a new list&lt;/td&gt;
    &lt;td&gt;a+b&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 100, 300, 500, 200, 250]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;index()&lt;/td&gt;
    &lt;td&gt;Finds index of a particular element in the list or not&lt;/td&gt;
    &lt;td&gt;a.index(25)&lt;br&gt;a.index(0)&lt;br&gt;&lt;/td&gt;
    &lt;td&gt;0&lt;br&gt;&lt;br&gt;ValueError: 0 is not in list&lt;br&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;in operator&lt;/td&gt;
    &lt;td&gt;Finds whether a particular element is in the list or not, returns boolean&lt;/td&gt;
    &lt;td&gt;25 in a&lt;/td&gt;
    &lt;td&gt;True&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;not in operator&lt;/td&gt;
    &lt;td&gt;Checks if element is not available in list, returns boolean&lt;/td&gt;
    &lt;td&gt;25 not in a&lt;/td&gt;
    &lt;td&gt;False&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;count()&lt;/td&gt;
    &lt;td&gt;Counts the number of occurence of an element in the list&lt;/td&gt;
    &lt;td&gt;a.count(25)&lt;/td&gt;
    &lt;td&gt;1&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;remove()&lt;/td&gt;
    &lt;td&gt;Removes an element from the list&lt;/td&gt;
    &lt;td&gt;a.remove(25)&lt;/td&gt;
    &lt;td&gt; [30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;pop()&lt;/td&gt;
    &lt;td&gt;Delete and return item at index 0&lt;/td&gt;
    &lt;td&gt;a.pop(0)&lt;/td&gt;
    &lt;td&gt;25 , a will be [30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;del&lt;/td&gt;
    &lt;td&gt;Deletes item at a particular index from the list&lt;/td&gt;
    &lt;td&gt;del a[0]&lt;/td&gt;
    &lt;td&gt;[30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;all()&lt;/td&gt;
&lt;td&gt;Returns True, if all items in list are True or it is an empty list&lt;/td&gt;
&lt;td&gt;all([True, True, True])
all([])
&lt;/td&gt;
&lt;td&gt;True&lt;br&gt;
True&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;any()&lt;/td&gt;
&lt;td&gt;Returns True, if any item in list is True else return False&lt;/td&gt;
&lt;td&gt;any([True, True, True])&lt;br&gt;
any([True, False, True])&lt;br&gt;
any([])&lt;/td&gt;
&lt;td&gt;True&lt;br&gt;False&lt;br&gt;False&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;

==Printing the List==
=== Print whole list ===
A list can be printed simply or using a ''for / while'' loop 

 print(List_2)     # To print the entire list
This code will print      
 ['Kala','Mala']     

===Print element at a particular index===
&lt;pre&gt;
Using index position
    List_2[0]     # prints 'Kala' ,i.e,the value at index position 0.
    List_2[1]     # prints 'Mala'.
&lt;/pre&gt;
=== Without using index position ===
&lt;pre&gt;
for item in List_2:   # here item is a variable used to access elements in list.
       print(item)
   This code snippet prints 
    Kala
    Mala
&lt;/pre&gt;
[[#TOP]]

==Search for a particular element in list==
Elements in a list can be searched by one of the two ways:
=== using index() function===
&lt;pre&gt;
ages1 = [11,23,12,23,45]

#if element is available in the list, index() returns the index value on which, the element is present.
print(ages1.index(45))#Output: 4

#if element is not available in the list, index() returns ''ValueError''
print(ages1.index(0))#Output: ValueError:
&lt;/pre&gt;

In programming, if such error occurs, program gets terminated. It can be solved using exception handling.
e.g.
&lt;pre&gt;
ages1 = [11,23,12,23,45]

try:
    print(ages1.index(0))
except ValueError:
    print(&quot;Exception has occured&quot;)    
    print(&quot;Element is not found in the list&quot;)

&lt;/pre&gt;
&lt;pre&gt;
'''Output: 
Exception has occured
Element is not found in the list
'''&lt;/pre&gt;
[[#TOP]]

=== using 'in' operator===
''in'' operator is used to check whether a particular element is available in the list or not.e.g.

&lt;pre&gt;
ages1 = [11,23,12,23,45]
no=11

if no in ages1:
    print(&quot;no is there in the list&quot;)
else:    
    print(&quot;no is NOT there in the list&quot;)
&lt;/pre&gt;
&lt;pre&gt;
#Output: no is there in the list
&lt;/pre&gt;


'''Number is not there in the list'''
&lt;pre&gt;
ages1 = [11,23,12,23,45]
no=15

if no in ages1:
    print(&quot;no is there in the list&quot;)
else:    
    print(&quot;no is NOT there in the list&quot;)
&lt;/pre&gt;
&lt;pre&gt;
Output: no is NOT there in the list
&lt;/pre&gt;
[[#TOP]]

==Updating the List==
The lists can be updated using ''append'' or ''insert'' function.  Append adds the element to the end of the list and Insert adds the element in the specified position.
&lt;pre&gt;
   # add the element 'Sheela' to the end of the list.
   List_2.append(&quot;Sheela&quot;)    
   print (List_2) will output 
   ['Kala', 'Mala', 'Sheela']
&lt;/pre&gt;
   &lt;pre&gt;
# add the element &quot;Bala&quot; in the list at the index 1.
   List_2.insert(1,&quot;Bala&quot;)    
   print (List_2) will output 
   ['Kala', 'Bala','Mala', 'Sheela']
&lt;/pre&gt;

=== Extend the list by adding elements of other list at end using extend()===
&lt;pre&gt;
ages = [11,23,12,23,45]
ages.extend([57,58])
print(ages)
&lt;/pre&gt;

&lt;pre&gt;
#Output: [11, 23, 12, 23, 45, 57, 58]
&lt;/pre&gt;

==== Difference between ''append and extend'' ====
Difference between append and extend can be easily understood, by the following example.

&lt;pre&gt;
appendlist = [11,23,12,23,45]
appendlist.append([57,58])

extendlist= [11,23,12,23,45]
extendlist.extend([57,58])
&lt;/pre&gt;

&lt;pre&gt;
'''Output:
[11, 23, 12, 23, 45, [57, 58]]
[11, 23, 12, 23, 45, 57, 58]'''
&lt;/pre&gt;

[[#TOP]]

==Basic Operations on List==
===Frequency of Occurrence===
list.count(object) will return the number of times the object occur in the list.
  '''Example'''
    ages = [11,23,12,23,45,43,22,24,23]
    ages.count(23) will return
    3
    ages.count(100) will return
    0

===Length of the List===
len(list) will return the length of the list ie. the number of objects in the list.
  '''Example'''
&lt;pre&gt;
    ages = [11,23,12,23,45,43,22,24,23]
    len(ages) # Output: 9
&lt;/pre&gt;

To print the objects in the list either use ''for item in list'' or ''for index in range(len(list))''
&lt;pre&gt;
    for item in ages:       
        print (item)  
        (OR)
    for index in range(len(ages)) :
        print (ages[index])
&lt;/pre&gt;

===Sort the List===
list.sort() will sort the list in ascending order
  '''Example'''
    ages = [11,23,12,23,45,43,22,24,23]
    ages.sort() 
    print (ages) 
    [11, 12, 22, 23, 23, 23, 24, 43, 45]

[[#TOP]]

===Sort the List using sorted() function===
sorted(list1) will sort the list and return a new list, it doesn't modify the original list
&lt;br&gt;'''Example: Sort in ascending order'''
&lt;pre&gt;
ages = [11,23,12,23,45,43,22,24,23]
newList=sorted(ages)
print(newList)

#Output: [11, 12, 22, 23, 23, 23, 24, 43, 45]
&lt;/pre&gt;

&lt;br&gt;'''Example: Sort in descending order'''
&lt;pre&gt;
ages = [11,23,12,23,45,43,22,24,23]
newList=sorted(ages,reverse=True)
print(newList)

#Output: [45, 43, 24, 23, 23, 23, 22, 12, 11]
&lt;/pre&gt;

===Reverse the List===
list.reverse() will reverse the original list
  '''Example'''
    ages = [11, 12, 22, 23, 23, 23, 24, 43, 45]
    ages.reverse()
    print (ages)
    [45, 43, 24, 23, 23, 23, 22, 12, 11]

Both sort() and reverse() list operation will work on numeric and alphanumeric data list.

A special use of the reverse() function is to descend a list that is sorted in ascending order.

  '''Example'''
&lt;pre&gt;
ages = [11, 12, 22, 23, 23, 23, 24, 43, 45]
ages.sort()
print(ages)
ages.reverse()
print(ages)
&lt;/pre&gt;

===Slicing===
Used to retrieve an object or objects in a range as a list  
  '''Example'''

Use ''list[index]'' to retrieve the object at the given index
&lt;pre&gt;
In [1]: student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
In [2]: student[3]     #Object at index 3.  Remember index starts at 0
Out[2]: 'Geetha'      
&lt;/pre&gt;

Use ''list[start_index : end_index + 1]'' to retrieve objects from the start_index to end_index 
&lt;pre&gt;
In [3]: student[2:4]     # Objects from index 2 to 3 as List. Note the [ and ]
Out[3]: ['Vijay', 'Geetha']   
&lt;/pre&gt;

Use ''list[:]'' to retrieve objects from the starting of the list to the end of the list. 
The default start value will be the starting index of the list (i.e. 0) and the default end value
will be the length of the list 
&lt;pre&gt;
In [4]: student[:]        # prints the entire list
Out[4]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma', 'Janani']
&lt;/pre&gt;
&lt;pre&gt;
In [5]: student[:5]       # prints the objects from the start of the list upto object at index 4
Out[5]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran']
&lt;/pre&gt;
&lt;pre&gt;
In [6]: student[2:]       # prints the objects from index 2 upto the end of the list
Out[6]: ['Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma', 'Janani']
&lt;/pre&gt;

Negative index too is available in Python. It starts from last element of the list. i.e.
&lt;pre&gt;
In [7]:student[-1]        #prints last index of list
Out[7]: 'Janani'
&lt;/pre&gt;
&lt;pre&gt;
In [8]:student[-1:-8]     #prints empty list
Out[8]: []
&lt;/pre&gt;
&lt;pre&gt;
In [9]:student[-8:-1]     #prints -8th index to -1st index elements
Out[9]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma']
&lt;/pre&gt;

[[#TOP]]

===Removing Item from list ===
----

Is used to remove a specific item from the list.

'''Example:'''
 
Use list.remove(entry/value)  Or   del list[index]    Or list.pop(index)
&lt;pre&gt;
student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
student.remove(&quot;Arun&quot;)   #This will delete item &quot;Arun&quot;
         Or    
del student[0]           # This will delete item at index 0
         Or
student.pop(0)         # This will delete and return item at index 0
print(student)    
Output: &quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
&lt;/pre&gt;

[[#TOP]]

===Delete list ===
----
Used to delete complete list

'''Example'''

Use del &lt;list name&gt;
&lt;pre&gt;
student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
del student&lt;/pre&gt;

===Concatenation of two lists===
----
''+'' is the concatenation operator which is used concatenate two lists. 
&lt;pre&gt;
ages1 = [11,23,12,23,45]
ages2 = [25, 24, 43, 47]
age=ages1+ages2
print(age)
#Output: [11, 23, 12, 23, 45, 25, 24, 43, 47]
&lt;/pre&gt;

===Repeatation of a list ===
----
''*'' is the operator to repeat a particular list.
&lt;pre&gt;
ages1 = [11,23,12,23,45]
age=ages1*5 #ages1 list is repeated 5 times and stroed in ''age'' list
print(age)

#Output: [11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45]
&lt;/pre&gt;

=== all and any for List===
all() and any() are special functions to check whether all elements in iterable is ''True'' or any element is ''True''
&lt;ol&gt;
&lt;li&gt;If all elements in a list are ''True'', '''all()''' will return ''True''&lt;/li&gt;
&lt;li&gt;If iterable is ''empty'', '''all()''' will return ''True''&lt;/li&gt;
&lt;li&gt;If iterable contains at least one ''True'', '''any()''' will return ''True''&lt;/li&gt;
&lt;li&gt;If iterable is ''empty'', '''any()''' will return ''False''&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;
lsit=[True, True, True, True]
print(all(lsit))#Output: True
print(any(lsit))#Output: True

lsit1=[True, False, True, True]
print(all(lsit1))#Output: False
print(any(lsit1))#Output: True

lsit2=[False,False,False]
print(all(lsit2))#Output: False
print(any(lsit2))#Output: False

lsit3=[]
print(all(lsit3))#Output: True
print(any(lsit3))#Output: False
&lt;/pre&gt;

==Conditional Statements==
&lt;pre&gt;Conditionals are used to check the condition and change the flow of the program 
accordingly. They are realized in programming languages through if statement. The 
syntax is as follows :
&lt;pre&gt;
         if condition : 
            statement
&lt;/pre&gt;
    '''Note:''' Do not forget indentation (inserting space/tab) in the line after the
 if condition.
    
    In case you want to execute a set of statements when a condition is true and another

set of statement when the condition is false.
&lt;pre&gt;
         if condition : 
            statement 1
         else :
            statement 2
&lt;/pre&gt;

&lt;pre&gt;    
    Multiple if-else statements can be written as follows:
         if condition_1 : 
            statement 1
         elif condition_2 : # 'elif' is short for 'else if'
            statement 2
         elif condition_3 :
            statement 3
        .
        .
         else :
            final statement
&lt;/pre&gt;

[[#TOP]]

=Loops and Conditionals : Fizzbuzz=
====Loops====
Loops are used to execute a set of repetitive statements. They are realised
through 'while' and 'for' loops in programming languages. The syntax of 'for' loop is 
as follows :
&lt;pre&gt;
for LOOPVARIABLE in SEQUENCE: 
            STATEMENTS&lt;/pre&gt;

    '''e.g.''' to print all the data from a list we can write:
&lt;pre&gt;
for item in list_name:
      print(item)&lt;/pre&gt;
    OR
&lt;pre&gt;
for index in range(len(list_name)):
      print(list_name[index])
 &lt;/pre&gt;   
    The syntax for while loop is as follows :
&lt;pre&gt;    
while BOOLEANEXPRESSION: 
     STATEMENTS
     INCREMENT/DECREMENT
&lt;/pre&gt;    
    '''e.g.''' if we want to print all numbers from 1 to 10
&lt;pre&gt;
i=1
while i&lt;=10 :
    print(i,&quot; &quot;)
    i=i+1
    &lt;/pre&gt;
 
'while' loop has indefinite iteration (run-time unknown). So, there must be loop,  break statement in it.
 Whereas 'for' loop is definite in nature (i.e. known or predictable span).&lt;br&gt;

&lt;b&gt;NOTE: Python doesn't have anything like do-while loop.&lt;/b&gt;

[[#TOP]]

==Implementation==
Here, we try to demonstrate the concept of loops and conditionals through a game called Fizzbuzz. The rules are as follows :&lt;br/&gt;
[[File:fizzBuzz.gif]]

• if input number is a multiple of ’3’ print ”Fizz”
&lt;br/&gt;
• if input number is a multiple of ’5’ print ”Buzz”
&lt;br/&gt;
• if input number is a multiple of both '3' and ’5’ print ”FizzBuzz”
&lt;br/&gt;
The pseudo code is as follows :
&lt;pre&gt;
   If input no % 3 == 0 and  input no % 5 == 0 : 
       print ”Fizzbuzz”
   else if input no % 3 == 0 : 
       print ”Fizz”
   else if input no % 5 == 0 : 
       print ”Buzz”
   else :
       print the input no
&lt;/pre&gt;
 &lt;p style=&quot;text-align:justify&quot;&gt;
The order of statements execution matters to get the desired output. The highest priority condition should be first followed by other. In fizzbuzz programming, first checking should be done for both divisibility of 3 and 5. If condition not satisfied only then it should check individually for 3 or 5. So carefully choosing the order is crucial for better programming.
Note: There is some effect of present condition statements chosen on next conditions statements. That is why in first attempt fizzbuzz programming got struck.&lt;/p&gt;

Example: 
&lt;pre&gt;
#Code to achieve the above requirement in python3.
i = int(input(&quot;Enter the number&quot;)) 
if i%3 == 0 and i%5 == 0: print(i,&quot;FizzBuzz&quot;)  
elif i%5 == 0: print(i,&quot;Buzz&quot;)
elif i%3 == 0: print(i,&quot;Fizz&quot;)
else: print(i)
&lt;/pre&gt;
Lets put the same into a loop for a range given by the user.
&lt;pre&gt;
def fizzbuzzgame(start,stop):
    for i in range(start,stop+1):
        if i%3 == 0 and i%5 == 0:
            print(i,&quot;FizzBuzz&quot;)
        elif i%5 == 0:
            print(i,&quot;Buzz&quot;)
        elif i%3 == 0:
            print(i,&quot;Fizz&quot;)
        else: print(i)

fizzbuzzgame(50,100)
&lt;/pre&gt;
&lt;pre&gt;
#Output:
1235
Buzz
======================================
555
Fizzbuzz
======================================
1235
Buzz
======================================
999
Fizz
&lt;/pre&gt;

=== Fizz Buzz game in Interactive mode with Score ===
'''By Ms. Ami Tusharkant Choksi'''
&lt;pre&gt;
def fizzbuzzgame(i):
        if i%3 == 0 and i%5 == 0:
            print(i,&quot;FizzBuzz&quot;)
            return(&quot;fzbz&quot;)
        elif i%5 == 0:
            print(i,&quot;Buzz&quot;)
            return(&quot;bz&quot;)
        elif i%3 == 0:
            print(i,&quot;Fizz&quot;)
            return(&quot;fz&quot;)
        else:
            print(i)
            return(&quot;no&quot;)

ch = 'y'
fizzbuzz=0
fizz=0
buzz=0
nothing=0
print(&quot;&quot;&quot;

 /$$$$$$$$/$$                  /$$$$$$$                            
| $$_____|__/                 | $$__  $$                           
| $$      /$$/$$$$$$$$/$$$$$$$| $$  \ $$/$$   /$$/$$$$$$$$/$$$$$$$$
| $$$$$  | $|____ /$$|____ /$$| $$$$$$$| $$  | $|____ /$$|____ /$$/
| $$__/  | $$  /$$$$/   /$$$$/| $$__  $| $$  | $$  /$$$$/   /$$$$/ 
| $$     | $$ /$$__/   /$$__/ | $$  \ $| $$  | $$ /$$__/   /$$__/  
| $$     | $$/$$$$$$$$/$$$$$$$| $$$$$$$|  $$$$$$//$$$$$$$$/$$$$$$$$
|__/     |__|________|________|_______/ \______/|________|________/
                                                                  
&quot;&quot;&quot;)   
print('''

  /$$$$$$                                
 /$$__  $$                               
| $$  \__/ /$$$$$$ /$$$$$$/$$$$  /$$$$$$ 
| $$ /$$$$|____  $| $$_  $$_  $$/$$__  $$
| $$|_  $$ /$$$$$$| $$ \ $$ \ $| $$$$$$$$
| $$  \ $$/$$__  $| $$ | $$ | $| $$_____/
|  $$$$$$|  $$$$$$| $$ | $$ | $|  $$$$$$$
 \______/ \_______|__/ |__/ |__/\_______/
                                     
''')

while(ch == 'y'):
    n=int(input(&quot;Enter a Number : &quot;))
    winLoose=fizzbuzzgame(n)
    if(winLoose == &quot;fz&quot;):
        fizz+=1
    elif(winLoose == &quot;bz&quot;):
        buzz+=1
    elif(winLoose == &quot;fzbz&quot;):
        fizzbuzz+=1
    ch=input(&quot;Do you want to continue playing the game : (y/n)&quot;)
    if(ch=='n'):
        print('Congratulations, your score is\n FizzBuzz:%d\nFizz:%d\nBuzz:%d' %
(fizzbuzz,fizz,buzz))
    
'''Sample Output:

 /$$$$$$$$/$$                  /$$$$$$$                            
| $$_____|__/                 | $$__  $$                           
| $$      /$$/$$$$$$$$/$$$$$$$| $$  \ $$/$$   /$$/$$$$$$$$/$$$$$$$$
| $$$$$  | $|____ /$$|____ /$$| $$$$$$$| $$  | $|____ /$$|____ /$$/
| $$__/  | $$  /$$$$/   /$$$$/| $$__  $| $$  | $$  /$$$$/   /$$$$/ 
| $$     | $$ /$$__/   /$$__/ | $$  \ $| $$  | $$ /$$__/   /$$__/  
| $$     | $$/$$$$$$$$/$$$$$$$| $$$$$$$|  $$$$$$//$$$$$$$$/$$$$$$$$
|__/     |__|________|________|_______/ \______/|________|________/
                                                                                                                                   

  /$$$$$$                                
 /$$__  $$                               
| $$  \__/ /$$$$$$ /$$$$$$/$$$$  /$$$$$$ 
| $$ /$$$$|____  $| $$_  $$_  $$/$$__  $$
| $$|_  $$ /$$$$$$| $$ \ $$ \ $| $$$$$$$$
| $$  \ $$/$$__  $| $$ | $$ | $| $$_____/
|  $$$$$$|  $$$$$$| $$ | $$ | $|  $$$$$$$
 \______/ \_______|__/ |__/ |__/\_______/
                                         

Enter a Number : 666
666 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 777
777 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 555
555 FizzBuzz
Do you want to continue playing the game : (y/n)y
Enter a Number : 1
1
Do you want to continue playing the game : (y/n)y
Enter a Number : 789
789 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 25
25 Buzz
Do you want to continue playing the game : (y/n)n
Congratulations, your score is

FizzBuzz:1
Fizz:3
Buzz:1

&lt;/pre&gt;

=Crowd Computing: Just Estimate=
==Wisdom of Crowds==
 &lt;p style=&quot;text-align:justify&quot;&gt;
The concept of ’Wisdom of Crowds’ was proposed by Francis Galton. A weight-judging competition was carried on at the annual show of the West of England Fat Stock and Poultry Exhibition recently held at Plymouth, A fat ox having been selected, competitors bought stamped and numbered cards, each, on which to inscribe their respective names, addresses, and estimates of what the ox would weigh after it had been slaughtered. Those who guessed most successfully received prizes. About 8oo tickets were issued to the par- ticipants. The middlemost estimate of all the estimates recorded was 1207 lbs and the actual weight of the ox was 1198 lbs.&lt;/p&gt;

==Our Experiment==
 &lt;p style=&quot;text-align:justify&quot;&gt;
The crowd had to guess the number of candies/gems in a jar. Around 75 people participated in the experiment. The actual number of gems in the jar were 375. The median of all estimates came out to be 300 and the mean of all the estimates came out to be around 396. Median underestimated and mean overestimated the actual value. So according to recent studies, Trimmed mean must be used as an aggregate measure to estimate where Wisdom of Crowds is involved.
&lt;/p&gt;
[[File:Gemsjar.jpg|center|200px|caption]]

===Trimmed Mean===
 &lt;p style=&quot;text-align:justify&quot;&gt;
In these kinds of experiments, 10% trimmed mean is usually followed. For calculating 10% trimmed mean, remove 10% smallest and 10% largest values from the sample. Calculate the mean of the sample obtained. In the above experiment, the trimmed mean came out to be around 351 which is very close to the actual value.&lt;/p&gt;

==Implementation==
Here, we try to demonstrate the concept of trimmed mean through crowd computing.
&lt;ol&gt;
&lt;li&gt; Input a list of estimates done by the crowd .&lt;/li&gt;
&lt;li&gt; Sort the list.&lt;/li&gt;
&lt;li&gt; Remove the 10% smallest values.&lt;/li&gt;
&lt;li&gt; Remove the 10% largest values.
&lt;li&gt; Calculate the mean of the new list obtained .&lt;/li&gt;&lt;/ol&gt;&lt;hr&gt;

==Data of Experiment==       
    Estimates =[1000,1010,1786,2000,1500,1500,100,120,150,150,150,170,175,180,197,200,200,200,200,200,200,220,220,220,220,234,250,250,250,250,250,250,250,250,250,263,270,275,275,286,300,
                300,300,300,300,300,300,300,320,350,350,350,400, 400,400,400,400,450,467,500,500,500,500,500,500,500,550,550,600,600,600,650,700,700,720]

    '''CODE:'''
&lt;pre&gt;
Estimates = [1000,1010,1786,2000,1500,1500,100,120,150,150,150,170,175,180,197,200,200,200,200,200,200,220,220,220,220,234,250,250,250,250,250,250,250,250,250,263,270,275,275,286,300,                300,300,300,300,300,300,300,320,350,350,350,400,400,400,400,400,450,467,500,500,500,500,500,500,500,550,550,600,600,600,650,700,700,720]
Estimates.sort()
offset = int(0.10*len(Estimates))
for i in range(offset):
       del Estimates[0]
       del Estimates[-1]
Sum = 0    
for i in range(len(Estimates)):
       Sum += Estimates[i]
Mean_Value = Sum/len(Estimates)
print(&quot;Mean : &quot;, int(Mean_Value))
#Output:
Mean :  351
&lt;/pre&gt;
&lt;hr&gt;
==Trimmed Mean for the above example== 
&lt;h3&gt;Using scipy library&lt;/h3&gt;
&lt;pre&gt;
#import scipy to use the method of trim_mean
from scipy import stats
trimMean = stats.trim_mean(Estimates, 0.1) # Trim 10% at both ends
print(&quot;Trimmed Mean : &quot;,trimMean)
#Output:
Trimmed Mean :  335.1020408163265
&lt;/pre&gt;

&lt;h3&gt;Without using scipy library&lt;/h3&gt;
&lt;pre&gt;
#Trimmed mean with 10%
p=10/100
#sorted data
data=[2, 4, 6, 7, 11, 21, 81, 90, 105, 121]
n = len(data)
#Remove elements from both end
rem=int(n*p)
newData = data[rem:-rem]
mean = 0
for i in newData:
    mean += i
mean = int(mean/len(newData))
print(&quot;Trimmed mean : &quot;,mean)
#Output: Trimmed mean :  40
&lt;/pre&gt;
[[#Top]]

=Jumbled_Words Permutations: Jumbled Words=
==What are Permutations ?==
A permutation also called ordering of selected number of elements from a list denoted by nPr here we are choosing all elements of a list and so n=r&lt;br&gt;
nPr=n!/(n-r)!&lt;br&gt; as n=r
nPn=n!&lt;br&gt; which gives all possible arrangement of elements present in a list.

 For example, permutations of list [1,2,3] are [1,2,3], [1,3,2], [2,1,3], [2,3,1], 
[3,1,2], and [3,2,1]. 
The number of permutations of a list of elements nPn is given by n!. For example, there are 2! = 2 x 1 = 2 permutations of [1,2], namely [1,2] and [2,1], and 3! = 3 x 2 x 1 = 6 permutations of [1,2,3], as mentioned above.&lt;br/&gt;
[[File:Permutations.jpg]]

==Implementation==
 &lt;p style=&quot;text-align:justify&quot;&gt;
Here, we try to demonstrate the concept of permutations through jumbled words. It is a two player game in which one person presents the other person a different permutation of the word in his mind. The other person has to guess the right word. If he guesses, the he wins otherwise he loses.&lt;/p&gt;
 Input an list of words.
 Randomly pick a word from the list of words .
 Shuffle this word and present it to the other player.
 if word guesses by the player is same as the one picked from list of w
     player wins
 else
     player loses

ALTERNATE CODE TO GENERATE THIS GAME:
&lt;pre&gt;
import random
p1=input(&quot;enter player 1 name:&quot;)
p2=input(&quot;enter player 2 name:&quot;)
l=[&quot;rainbow&quot;,&quot;computer&quot;,&quot;robot&quot;,&quot;butter&quot;,&quot;vegetable&quot;,&quot;science&quot;,&quot;correct&quot;]
c1=c2=a1=a2=f1=f2=0
k=1
i=3
def play():
    n=random.choice(l)        ##n=chooses a word from list l
    l1=[]
    for j in n:
       l1.append(j)      ##creates a list for word in n
    for t in range(len(l1)):
       p=random.choice(l1)     ##this randomly displays letters in the list
       print(p)
       l1.remove(p)          ##to avoid the repetition of a letter
    s=input(&quot;enter the word:&quot;)
    if(s==n):
        print(&quot;correct&quot;)
        return 1
    else:
        print(&quot;not correct&quot;)
        print(&quot;answer is&quot;,n)
        return 0
def stat():
     print(&quot;player 1:&quot;)
     print(&quot;score:&quot;,c1)
     print(&quot;answered:&quot;,a1)
     print(&quot;failed:&quot;,f1)
     print(&quot;.............&quot;)
     print(&quot;player 2:&quot;)
     print(&quot;score:&quot;,c2)
     print(&quot;answered:&quot;,a2)
     print(&quot;failed&quot;,f2)
     if(c1&gt;c2):
         print(p1,&quot; won over &quot;,p2)
     elif(c1==c2):
         print(&quot;draw game&quot;)
     else:
         print(p2,&quot; won over &quot;,p1) 
while(i!=4):
      if(i==3):
         if(k==1):
             print(&quot;player 1 turn&quot;)
             print(&quot;your jumbled word is:&quot;)
             k=k+1
             m=play()
             if(m==1):      ##if guessed answer is correct,then score and no.of answered count will be increased
                c1+=1
                a1+=1
             else:
                f1+=1       ##else count of no.of failed to answered will be incremented
         else:
             print(&quot;player 2 turn&quot;)
             print(&quot;your jumbled word is:&quot;)
             k=k-1
             m=play()
             if(m==1):
                c2=c2+1
                a2=a2+1
             else:
                f2=f2+1
       if(i==2):
             print(&quot;present status&quot;)
             stat()
       i=int(input(&quot;enter your choice  1.stop 2.status 3.continue&quot;))
       if(i==1):
             stat()
             i=i+3
&lt;/pre&gt;
&lt;hr&gt;
=== JumbledWord Simple Logic, In Short ===
[[File:jumbledWord.gif]]
&lt;hr&gt;
'''Logic to create a Jumbled Word'''
&lt;hr&gt;
&lt;pre&gt;
#Get Jumbled Word and print it Horizontally
import random

def getJumbledWord(b):
    jumble=''
    l1 = [ b[i] for i in range(0, len(b)) ]
    for t in range(len(l1)):
       p=random.choice(l1)  #this randomly gets letters from the list      
       jumble=jumble+p       
       l1.remove(p)
    return jumble

b=input(&quot;Enter a word to make it jumbled : &quot;)
print(&quot;Jumbled Word : &quot;, getJumbledWord(b))
&lt;/pre&gt;
&lt;pre&gt;
Output:
Enter a word to make it jumbled : live and let live others
Jumbled Word :  vel  toldeisrte aihv len
==========================================
Enter a word to make it jumbled : junkfood
Jumbled Word :  nfukdooj
&lt;/pre&gt;
&lt;hr&gt;
'''Another Logic to create a Jumbled Word'''
&lt;hr&gt;
&lt;pre&gt;
import random
b=input(&quot;Enter a word to make it jumbled : &quot;)

def getJumbledWord1(b):
    l1 = [ b[i] for i in range(0, len(b)) ]
    random.shuffle(l1)
    str1 = ''.join(l1)
    return str1

print(&quot;Jumbled Word : &quot;, getJumbledWord1(b))
&lt;/pre&gt;

====Sample Output:====
&lt;pre&gt;
---- Output1 
Enter a word to make it jumbled : butter
Jumbled Word :  tbture

---- Output2 
Enter a word to make it jumbled : petriotism
Jumbled Word :  pittrosime
&lt;/pre&gt;

=Theory of Evolution=

== What is Evolution ? ==
Evolution is the change in heritable characteristics over successive generations. The theory of evolution explains that DNA, which acts as a carrier of genetic information from one generation to other, tends to change or mutate occasionally. These changes are reflected in next generations to come. This is how life has evolved on earth from bacteria to human beings.&lt;br&gt;
[[File:Evolution.png|500px]]

== Implementation ==
 &lt;p style=&quot;text-align:justify&quot;&gt;
An array representing DNA is stored in a file. As genes are forms of DNA, they contain information to be transferred to forthcoming generations. Assume that information is in the form of bits (in the form of 0s and 1s). A number is picked randomly from 1 to the size of the array. A new parameter has been introduced which decides whether mutation would occur or not. If the value of this new parameter is 1 (It is picked randomly from 1 to 100), then only change is reflected down the generations, otherwise it is not. The pseudo code is as follows :
&lt;/p&gt;
Input an array containing genetic information .
Randomly generate a number (say m) from 1 to length of the array. Randomly generate other number (say p) from 1 to 100.

&lt;pre&gt; 
    if p is equal to 1 then 
        if m is 1 then
          set it to 0
        else
          set it to 1
&lt;/pre&gt;
[[#TOP]]</text>
      <sha1>the7xphegopi364zok08ko8wsujfg03</sha1>
    </revision>
    <revision>
      <id>3628</id>
      <parentid>3627</parentid>
      <timestamp>2018-09-28T04:44:16Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* JumbledWord Simple Logic, In Short */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="30682">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_3 Contributors of this page]
*Week 3 Playlist: https://www.youtube.com/playlist?list=PLc_j0TNIaWxOVx_z9jAM2UB3RqYNXaoEo
=List=
List is a flexible data structure used for storing a group of data separated by comma. The elements in a list need not be of the same data type.

'''Example:'''
       List_1 = [ 1, 2,3] or 
       List_1 = [&quot;coffee&quot;, &quot;Tea&quot;, &quot;Milk&quot;] or
       List_1 = [1,&quot;coffee&quot;, &quot;Tea&quot;, 3, &quot;5&quot;]

==List Creation==
&lt;pre&gt;a) A list can be created by simply putting values (separated by comma) between square brackets as given below,
       List_1 = [1,&quot;coffee&quot;, &quot;Tea&quot;, 3, &quot;5&quot;] #this creates a list by name List_1 containing following items


Or,
(b)A List can be created from scratch and elements can be added 
        List_2 = [ ]
        List_2.append(&quot;Kala&quot;)
        List_2.append(&quot;Mala&quot;)
Here we use &quot;append&quot; ,which is a function in python that enable us to append or attach an element to a list .
Thus List_2 will now hold [&quot;Kala&quot;,&quot;Mala&quot;]
&lt;/pre&gt;
[[#TOP]]

==Operations and Methods to work with List==
&lt;pre&gt;
a = [25,30,50,90,12,13]
b = [100,300,500,200,250]
&lt;/pre&gt;
&lt;hr&gt;
&lt;table border=2&gt;
  &lt;tr&gt;
    &lt;th&gt;&lt;b&gt;Method/&lt;br&gt;Operator&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Function&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Syntax&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Output&lt;/b&gt;&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;len()&lt;/td&gt;
    &lt;td&gt;Find length of a list&lt;/td&gt;
    &lt;td&gt;len(a)&lt;/td&gt;
    &lt;td&gt;6&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;max()&lt;/td&gt;
    &lt;td&gt;Find maximum element from the list&lt;/td&gt;
    &lt;td&gt;max(a)&lt;/td&gt;
    &lt;td&gt;90&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;min()&lt;/td&gt;
    &lt;td&gt;Find minimum element from the list&lt;/td&gt;
    &lt;td&gt;min(a)&lt;/td&gt;
    &lt;td&gt;12&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sum()&lt;/td&gt;
    &lt;td&gt;Returns sum of all elements of the list&lt;/td&gt;
    &lt;td&gt;sum(a)&lt;/td&gt;
    &lt;td&gt;220&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;reverse()&lt;/td&gt;
    &lt;td&gt;Reverses the original list&lt;/td&gt;
    &lt;td&gt;a.reverse()&lt;/td&gt;
    &lt;td&gt;[13, 12, 90, 50, 30, 25]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sort()&lt;/td&gt;
    &lt;td&gt;Sorts the original list in ascending order&lt;/td&gt;
    &lt;td&gt;a.sort()&lt;/td&gt;
    &lt;td&gt;[12, 13, 25, 30, 50, 90]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sorted()&lt;/td&gt;
    &lt;td&gt;Returns the new sorted list &lt;/td&gt;
    &lt;td&gt;sorted(a)&lt;/td&gt;
    &lt;td&gt;[12, 13, 25, 30, 50, 90]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;insert()&lt;/td&gt;
    &lt;td&gt;Insert at a particular index in the list, and shifts remaining elements&lt;/td&gt;
    &lt;td&gt;a.insert(3,3)&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 3, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;append()&lt;/td&gt;
    &lt;td&gt;Adds elements/object to the end of the list&lt;/td&gt;
    &lt;td&gt;a.append(5)&lt;br&gt;a.append([10,20])&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 5]&lt;br&gt;[25, 30, 50, 90, 12, 13, [10, 20]]&lt;br&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;extend()&lt;/td&gt;
    &lt;td&gt;Adds object to the end of the list as elements not as object&lt;/td&gt;
    &lt;td&gt;a.extend([10,20])&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 10, 20]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;*&amp;nbsp;&amp;nbsp;Repeatation&lt;br&gt;operator&lt;/td&gt;
    &lt;td&gt;Repeat the list for n times and returns a new list&lt;/td&gt;
    &lt;td&gt;a*2&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 25, 30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;+ Concatenation&lt;br&gt;operator&lt;/td&gt;
    &lt;td&gt;Concatenates two lists, and returns a new list&lt;/td&gt;
    &lt;td&gt;a+b&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 100, 300, 500, 200, 250]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;index()&lt;/td&gt;
    &lt;td&gt;Finds index of a particular element in the list or not&lt;/td&gt;
    &lt;td&gt;a.index(25)&lt;br&gt;a.index(0)&lt;br&gt;&lt;/td&gt;
    &lt;td&gt;0&lt;br&gt;&lt;br&gt;ValueError: 0 is not in list&lt;br&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;in operator&lt;/td&gt;
    &lt;td&gt;Finds whether a particular element is in the list or not, returns boolean&lt;/td&gt;
    &lt;td&gt;25 in a&lt;/td&gt;
    &lt;td&gt;True&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;not in operator&lt;/td&gt;
    &lt;td&gt;Checks if element is not available in list, returns boolean&lt;/td&gt;
    &lt;td&gt;25 not in a&lt;/td&gt;
    &lt;td&gt;False&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;count()&lt;/td&gt;
    &lt;td&gt;Counts the number of occurence of an element in the list&lt;/td&gt;
    &lt;td&gt;a.count(25)&lt;/td&gt;
    &lt;td&gt;1&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;remove()&lt;/td&gt;
    &lt;td&gt;Removes an element from the list&lt;/td&gt;
    &lt;td&gt;a.remove(25)&lt;/td&gt;
    &lt;td&gt; [30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;pop()&lt;/td&gt;
    &lt;td&gt;Delete and return item at index 0&lt;/td&gt;
    &lt;td&gt;a.pop(0)&lt;/td&gt;
    &lt;td&gt;25 , a will be [30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;del&lt;/td&gt;
    &lt;td&gt;Deletes item at a particular index from the list&lt;/td&gt;
    &lt;td&gt;del a[0]&lt;/td&gt;
    &lt;td&gt;[30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;all()&lt;/td&gt;
&lt;td&gt;Returns True, if all items in list are True or it is an empty list&lt;/td&gt;
&lt;td&gt;all([True, True, True])
all([])
&lt;/td&gt;
&lt;td&gt;True&lt;br&gt;
True&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;any()&lt;/td&gt;
&lt;td&gt;Returns True, if any item in list is True else return False&lt;/td&gt;
&lt;td&gt;any([True, True, True])&lt;br&gt;
any([True, False, True])&lt;br&gt;
any([])&lt;/td&gt;
&lt;td&gt;True&lt;br&gt;False&lt;br&gt;False&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;

==Printing the List==
=== Print whole list ===
A list can be printed simply or using a ''for / while'' loop 

 print(List_2)     # To print the entire list
This code will print      
 ['Kala','Mala']     

===Print element at a particular index===
&lt;pre&gt;
Using index position
    List_2[0]     # prints 'Kala' ,i.e,the value at index position 0.
    List_2[1]     # prints 'Mala'.
&lt;/pre&gt;
=== Without using index position ===
&lt;pre&gt;
for item in List_2:   # here item is a variable used to access elements in list.
       print(item)
   This code snippet prints 
    Kala
    Mala
&lt;/pre&gt;
[[#TOP]]

==Search for a particular element in list==
Elements in a list can be searched by one of the two ways:
=== using index() function===
&lt;pre&gt;
ages1 = [11,23,12,23,45]

#if element is available in the list, index() returns the index value on which, the element is present.
print(ages1.index(45))#Output: 4

#if element is not available in the list, index() returns ''ValueError''
print(ages1.index(0))#Output: ValueError:
&lt;/pre&gt;

In programming, if such error occurs, program gets terminated. It can be solved using exception handling.
e.g.
&lt;pre&gt;
ages1 = [11,23,12,23,45]

try:
    print(ages1.index(0))
except ValueError:
    print(&quot;Exception has occured&quot;)    
    print(&quot;Element is not found in the list&quot;)

&lt;/pre&gt;
&lt;pre&gt;
'''Output: 
Exception has occured
Element is not found in the list
'''&lt;/pre&gt;
[[#TOP]]

=== using 'in' operator===
''in'' operator is used to check whether a particular element is available in the list or not.e.g.

&lt;pre&gt;
ages1 = [11,23,12,23,45]
no=11

if no in ages1:
    print(&quot;no is there in the list&quot;)
else:    
    print(&quot;no is NOT there in the list&quot;)
&lt;/pre&gt;
&lt;pre&gt;
#Output: no is there in the list
&lt;/pre&gt;


'''Number is not there in the list'''
&lt;pre&gt;
ages1 = [11,23,12,23,45]
no=15

if no in ages1:
    print(&quot;no is there in the list&quot;)
else:    
    print(&quot;no is NOT there in the list&quot;)
&lt;/pre&gt;
&lt;pre&gt;
Output: no is NOT there in the list
&lt;/pre&gt;
[[#TOP]]

==Updating the List==
The lists can be updated using ''append'' or ''insert'' function.  Append adds the element to the end of the list and Insert adds the element in the specified position.
&lt;pre&gt;
   # add the element 'Sheela' to the end of the list.
   List_2.append(&quot;Sheela&quot;)    
   print (List_2) will output 
   ['Kala', 'Mala', 'Sheela']
&lt;/pre&gt;
   &lt;pre&gt;
# add the element &quot;Bala&quot; in the list at the index 1.
   List_2.insert(1,&quot;Bala&quot;)    
   print (List_2) will output 
   ['Kala', 'Bala','Mala', 'Sheela']
&lt;/pre&gt;

=== Extend the list by adding elements of other list at end using extend()===
&lt;pre&gt;
ages = [11,23,12,23,45]
ages.extend([57,58])
print(ages)
&lt;/pre&gt;

&lt;pre&gt;
#Output: [11, 23, 12, 23, 45, 57, 58]
&lt;/pre&gt;

==== Difference between ''append and extend'' ====
Difference between append and extend can be easily understood, by the following example.

&lt;pre&gt;
appendlist = [11,23,12,23,45]
appendlist.append([57,58])

extendlist= [11,23,12,23,45]
extendlist.extend([57,58])
&lt;/pre&gt;

&lt;pre&gt;
'''Output:
[11, 23, 12, 23, 45, [57, 58]]
[11, 23, 12, 23, 45, 57, 58]'''
&lt;/pre&gt;

[[#TOP]]

==Basic Operations on List==
===Frequency of Occurrence===
list.count(object) will return the number of times the object occur in the list.
  '''Example'''
    ages = [11,23,12,23,45,43,22,24,23]
    ages.count(23) will return
    3
    ages.count(100) will return
    0

===Length of the List===
len(list) will return the length of the list ie. the number of objects in the list.
  '''Example'''
&lt;pre&gt;
    ages = [11,23,12,23,45,43,22,24,23]
    len(ages) # Output: 9
&lt;/pre&gt;

To print the objects in the list either use ''for item in list'' or ''for index in range(len(list))''
&lt;pre&gt;
    for item in ages:       
        print (item)  
        (OR)
    for index in range(len(ages)) :
        print (ages[index])
&lt;/pre&gt;

===Sort the List===
list.sort() will sort the list in ascending order
  '''Example'''
    ages = [11,23,12,23,45,43,22,24,23]
    ages.sort() 
    print (ages) 
    [11, 12, 22, 23, 23, 23, 24, 43, 45]

[[#TOP]]

===Sort the List using sorted() function===
sorted(list1) will sort the list and return a new list, it doesn't modify the original list
&lt;br&gt;'''Example: Sort in ascending order'''
&lt;pre&gt;
ages = [11,23,12,23,45,43,22,24,23]
newList=sorted(ages)
print(newList)

#Output: [11, 12, 22, 23, 23, 23, 24, 43, 45]
&lt;/pre&gt;

&lt;br&gt;'''Example: Sort in descending order'''
&lt;pre&gt;
ages = [11,23,12,23,45,43,22,24,23]
newList=sorted(ages,reverse=True)
print(newList)

#Output: [45, 43, 24, 23, 23, 23, 22, 12, 11]
&lt;/pre&gt;

===Reverse the List===
list.reverse() will reverse the original list
  '''Example'''
    ages = [11, 12, 22, 23, 23, 23, 24, 43, 45]
    ages.reverse()
    print (ages)
    [45, 43, 24, 23, 23, 23, 22, 12, 11]

Both sort() and reverse() list operation will work on numeric and alphanumeric data list.

A special use of the reverse() function is to descend a list that is sorted in ascending order.

  '''Example'''
&lt;pre&gt;
ages = [11, 12, 22, 23, 23, 23, 24, 43, 45]
ages.sort()
print(ages)
ages.reverse()
print(ages)
&lt;/pre&gt;

===Slicing===
Used to retrieve an object or objects in a range as a list  
  '''Example'''

Use ''list[index]'' to retrieve the object at the given index
&lt;pre&gt;
In [1]: student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
In [2]: student[3]     #Object at index 3.  Remember index starts at 0
Out[2]: 'Geetha'      
&lt;/pre&gt;

Use ''list[start_index : end_index + 1]'' to retrieve objects from the start_index to end_index 
&lt;pre&gt;
In [3]: student[2:4]     # Objects from index 2 to 3 as List. Note the [ and ]
Out[3]: ['Vijay', 'Geetha']   
&lt;/pre&gt;

Use ''list[:]'' to retrieve objects from the starting of the list to the end of the list. 
The default start value will be the starting index of the list (i.e. 0) and the default end value
will be the length of the list 
&lt;pre&gt;
In [4]: student[:]        # prints the entire list
Out[4]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma', 'Janani']
&lt;/pre&gt;
&lt;pre&gt;
In [5]: student[:5]       # prints the objects from the start of the list upto object at index 4
Out[5]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran']
&lt;/pre&gt;
&lt;pre&gt;
In [6]: student[2:]       # prints the objects from index 2 upto the end of the list
Out[6]: ['Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma', 'Janani']
&lt;/pre&gt;

Negative index too is available in Python. It starts from last element of the list. i.e.
&lt;pre&gt;
In [7]:student[-1]        #prints last index of list
Out[7]: 'Janani'
&lt;/pre&gt;
&lt;pre&gt;
In [8]:student[-1:-8]     #prints empty list
Out[8]: []
&lt;/pre&gt;
&lt;pre&gt;
In [9]:student[-8:-1]     #prints -8th index to -1st index elements
Out[9]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma']
&lt;/pre&gt;

[[#TOP]]

===Removing Item from list ===
----

Is used to remove a specific item from the list.

'''Example:'''
 
Use list.remove(entry/value)  Or   del list[index]    Or list.pop(index)
&lt;pre&gt;
student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
student.remove(&quot;Arun&quot;)   #This will delete item &quot;Arun&quot;
         Or    
del student[0]           # This will delete item at index 0
         Or
student.pop(0)         # This will delete and return item at index 0
print(student)    
Output: &quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
&lt;/pre&gt;

[[#TOP]]

===Delete list ===
----
Used to delete complete list

'''Example'''

Use del &lt;list name&gt;
&lt;pre&gt;
student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
del student&lt;/pre&gt;

===Concatenation of two lists===
----
''+'' is the concatenation operator which is used concatenate two lists. 
&lt;pre&gt;
ages1 = [11,23,12,23,45]
ages2 = [25, 24, 43, 47]
age=ages1+ages2
print(age)
#Output: [11, 23, 12, 23, 45, 25, 24, 43, 47]
&lt;/pre&gt;

===Repeatation of a list ===
----
''*'' is the operator to repeat a particular list.
&lt;pre&gt;
ages1 = [11,23,12,23,45]
age=ages1*5 #ages1 list is repeated 5 times and stroed in ''age'' list
print(age)

#Output: [11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45]
&lt;/pre&gt;

=== all and any for List===
all() and any() are special functions to check whether all elements in iterable is ''True'' or any element is ''True''
&lt;ol&gt;
&lt;li&gt;If all elements in a list are ''True'', '''all()''' will return ''True''&lt;/li&gt;
&lt;li&gt;If iterable is ''empty'', '''all()''' will return ''True''&lt;/li&gt;
&lt;li&gt;If iterable contains at least one ''True'', '''any()''' will return ''True''&lt;/li&gt;
&lt;li&gt;If iterable is ''empty'', '''any()''' will return ''False''&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;
lsit=[True, True, True, True]
print(all(lsit))#Output: True
print(any(lsit))#Output: True

lsit1=[True, False, True, True]
print(all(lsit1))#Output: False
print(any(lsit1))#Output: True

lsit2=[False,False,False]
print(all(lsit2))#Output: False
print(any(lsit2))#Output: False

lsit3=[]
print(all(lsit3))#Output: True
print(any(lsit3))#Output: False
&lt;/pre&gt;

==Conditional Statements==
&lt;pre&gt;Conditionals are used to check the condition and change the flow of the program 
accordingly. They are realized in programming languages through if statement. The 
syntax is as follows :
&lt;pre&gt;
         if condition : 
            statement
&lt;/pre&gt;
    '''Note:''' Do not forget indentation (inserting space/tab) in the line after the
 if condition.
    
    In case you want to execute a set of statements when a condition is true and another

set of statement when the condition is false.
&lt;pre&gt;
         if condition : 
            statement 1
         else :
            statement 2
&lt;/pre&gt;

&lt;pre&gt;    
    Multiple if-else statements can be written as follows:
         if condition_1 : 
            statement 1
         elif condition_2 : # 'elif' is short for 'else if'
            statement 2
         elif condition_3 :
            statement 3
        .
        .
         else :
            final statement
&lt;/pre&gt;

[[#TOP]]

=Loops and Conditionals : Fizzbuzz=
====Loops====
Loops are used to execute a set of repetitive statements. They are realised
through 'while' and 'for' loops in programming languages. The syntax of 'for' loop is 
as follows :
&lt;pre&gt;
for LOOPVARIABLE in SEQUENCE: 
            STATEMENTS&lt;/pre&gt;

    '''e.g.''' to print all the data from a list we can write:
&lt;pre&gt;
for item in list_name:
      print(item)&lt;/pre&gt;
    OR
&lt;pre&gt;
for index in range(len(list_name)):
      print(list_name[index])
 &lt;/pre&gt;   
    The syntax for while loop is as follows :
&lt;pre&gt;    
while BOOLEANEXPRESSION: 
     STATEMENTS
     INCREMENT/DECREMENT
&lt;/pre&gt;    
    '''e.g.''' if we want to print all numbers from 1 to 10
&lt;pre&gt;
i=1
while i&lt;=10 :
    print(i,&quot; &quot;)
    i=i+1
    &lt;/pre&gt;
 
'while' loop has indefinite iteration (run-time unknown). So, there must be loop,  break statement in it.
 Whereas 'for' loop is definite in nature (i.e. known or predictable span).&lt;br&gt;

&lt;b&gt;NOTE: Python doesn't have anything like do-while loop.&lt;/b&gt;

[[#TOP]]

==Implementation==
Here, we try to demonstrate the concept of loops and conditionals through a game called Fizzbuzz. The rules are as follows :&lt;br/&gt;
[[File:fizzBuzz.gif]]

• if input number is a multiple of ’3’ print ”Fizz”
&lt;br/&gt;
• if input number is a multiple of ’5’ print ”Buzz”
&lt;br/&gt;
• if input number is a multiple of both '3' and ’5’ print ”FizzBuzz”
&lt;br/&gt;
The pseudo code is as follows :
&lt;pre&gt;
   If input no % 3 == 0 and  input no % 5 == 0 : 
       print ”Fizzbuzz”
   else if input no % 3 == 0 : 
       print ”Fizz”
   else if input no % 5 == 0 : 
       print ”Buzz”
   else :
       print the input no
&lt;/pre&gt;
 &lt;p style=&quot;text-align:justify&quot;&gt;
The order of statements execution matters to get the desired output. The highest priority condition should be first followed by other. In fizzbuzz programming, first checking should be done for both divisibility of 3 and 5. If condition not satisfied only then it should check individually for 3 or 5. So carefully choosing the order is crucial for better programming.
Note: There is some effect of present condition statements chosen on next conditions statements. That is why in first attempt fizzbuzz programming got struck.&lt;/p&gt;

Example: 
&lt;pre&gt;
#Code to achieve the above requirement in python3.
i = int(input(&quot;Enter the number&quot;)) 
if i%3 == 0 and i%5 == 0: print(i,&quot;FizzBuzz&quot;)  
elif i%5 == 0: print(i,&quot;Buzz&quot;)
elif i%3 == 0: print(i,&quot;Fizz&quot;)
else: print(i)
&lt;/pre&gt;
Lets put the same into a loop for a range given by the user.
&lt;pre&gt;
def fizzbuzzgame(start,stop):
    for i in range(start,stop+1):
        if i%3 == 0 and i%5 == 0:
            print(i,&quot;FizzBuzz&quot;)
        elif i%5 == 0:
            print(i,&quot;Buzz&quot;)
        elif i%3 == 0:
            print(i,&quot;Fizz&quot;)
        else: print(i)

fizzbuzzgame(50,100)
&lt;/pre&gt;
&lt;pre&gt;
#Output:
1235
Buzz
======================================
555
Fizzbuzz
======================================
1235
Buzz
======================================
999
Fizz
&lt;/pre&gt;

=== Fizz Buzz game in Interactive mode with Score ===
'''By Ms. Ami Tusharkant Choksi'''
&lt;pre&gt;
def fizzbuzzgame(i):
        if i%3 == 0 and i%5 == 0:
            print(i,&quot;FizzBuzz&quot;)
            return(&quot;fzbz&quot;)
        elif i%5 == 0:
            print(i,&quot;Buzz&quot;)
            return(&quot;bz&quot;)
        elif i%3 == 0:
            print(i,&quot;Fizz&quot;)
            return(&quot;fz&quot;)
        else:
            print(i)
            return(&quot;no&quot;)

ch = 'y'
fizzbuzz=0
fizz=0
buzz=0
nothing=0
print(&quot;&quot;&quot;

 /$$$$$$$$/$$                  /$$$$$$$                            
| $$_____|__/                 | $$__  $$                           
| $$      /$$/$$$$$$$$/$$$$$$$| $$  \ $$/$$   /$$/$$$$$$$$/$$$$$$$$
| $$$$$  | $|____ /$$|____ /$$| $$$$$$$| $$  | $|____ /$$|____ /$$/
| $$__/  | $$  /$$$$/   /$$$$/| $$__  $| $$  | $$  /$$$$/   /$$$$/ 
| $$     | $$ /$$__/   /$$__/ | $$  \ $| $$  | $$ /$$__/   /$$__/  
| $$     | $$/$$$$$$$$/$$$$$$$| $$$$$$$|  $$$$$$//$$$$$$$$/$$$$$$$$
|__/     |__|________|________|_______/ \______/|________|________/
                                                                  
&quot;&quot;&quot;)   
print('''

  /$$$$$$                                
 /$$__  $$                               
| $$  \__/ /$$$$$$ /$$$$$$/$$$$  /$$$$$$ 
| $$ /$$$$|____  $| $$_  $$_  $$/$$__  $$
| $$|_  $$ /$$$$$$| $$ \ $$ \ $| $$$$$$$$
| $$  \ $$/$$__  $| $$ | $$ | $| $$_____/
|  $$$$$$|  $$$$$$| $$ | $$ | $|  $$$$$$$
 \______/ \_______|__/ |__/ |__/\_______/
                                     
''')

while(ch == 'y'):
    n=int(input(&quot;Enter a Number : &quot;))
    winLoose=fizzbuzzgame(n)
    if(winLoose == &quot;fz&quot;):
        fizz+=1
    elif(winLoose == &quot;bz&quot;):
        buzz+=1
    elif(winLoose == &quot;fzbz&quot;):
        fizzbuzz+=1
    ch=input(&quot;Do you want to continue playing the game : (y/n)&quot;)
    if(ch=='n'):
        print('Congratulations, your score is\n FizzBuzz:%d\nFizz:%d\nBuzz:%d' %
(fizzbuzz,fizz,buzz))
    
'''Sample Output:

 /$$$$$$$$/$$                  /$$$$$$$                            
| $$_____|__/                 | $$__  $$                           
| $$      /$$/$$$$$$$$/$$$$$$$| $$  \ $$/$$   /$$/$$$$$$$$/$$$$$$$$
| $$$$$  | $|____ /$$|____ /$$| $$$$$$$| $$  | $|____ /$$|____ /$$/
| $$__/  | $$  /$$$$/   /$$$$/| $$__  $| $$  | $$  /$$$$/   /$$$$/ 
| $$     | $$ /$$__/   /$$__/ | $$  \ $| $$  | $$ /$$__/   /$$__/  
| $$     | $$/$$$$$$$$/$$$$$$$| $$$$$$$|  $$$$$$//$$$$$$$$/$$$$$$$$
|__/     |__|________|________|_______/ \______/|________|________/
                                                                                                                                   

  /$$$$$$                                
 /$$__  $$                               
| $$  \__/ /$$$$$$ /$$$$$$/$$$$  /$$$$$$ 
| $$ /$$$$|____  $| $$_  $$_  $$/$$__  $$
| $$|_  $$ /$$$$$$| $$ \ $$ \ $| $$$$$$$$
| $$  \ $$/$$__  $| $$ | $$ | $| $$_____/
|  $$$$$$|  $$$$$$| $$ | $$ | $|  $$$$$$$
 \______/ \_______|__/ |__/ |__/\_______/
                                         

Enter a Number : 666
666 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 777
777 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 555
555 FizzBuzz
Do you want to continue playing the game : (y/n)y
Enter a Number : 1
1
Do you want to continue playing the game : (y/n)y
Enter a Number : 789
789 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 25
25 Buzz
Do you want to continue playing the game : (y/n)n
Congratulations, your score is

FizzBuzz:1
Fizz:3
Buzz:1

&lt;/pre&gt;

=Crowd Computing: Just Estimate=
==Wisdom of Crowds==
 &lt;p style=&quot;text-align:justify&quot;&gt;
The concept of ’Wisdom of Crowds’ was proposed by Francis Galton. A weight-judging competition was carried on at the annual show of the West of England Fat Stock and Poultry Exhibition recently held at Plymouth, A fat ox having been selected, competitors bought stamped and numbered cards, each, on which to inscribe their respective names, addresses, and estimates of what the ox would weigh after it had been slaughtered. Those who guessed most successfully received prizes. About 8oo tickets were issued to the par- ticipants. The middlemost estimate of all the estimates recorded was 1207 lbs and the actual weight of the ox was 1198 lbs.&lt;/p&gt;

==Our Experiment==
 &lt;p style=&quot;text-align:justify&quot;&gt;
The crowd had to guess the number of candies/gems in a jar. Around 75 people participated in the experiment. The actual number of gems in the jar were 375. The median of all estimates came out to be 300 and the mean of all the estimates came out to be around 396. Median underestimated and mean overestimated the actual value. So according to recent studies, Trimmed mean must be used as an aggregate measure to estimate where Wisdom of Crowds is involved.
&lt;/p&gt;
[[File:Gemsjar.jpg|center|200px|caption]]

===Trimmed Mean===
 &lt;p style=&quot;text-align:justify&quot;&gt;
In these kinds of experiments, 10% trimmed mean is usually followed. For calculating 10% trimmed mean, remove 10% smallest and 10% largest values from the sample. Calculate the mean of the sample obtained. In the above experiment, the trimmed mean came out to be around 351 which is very close to the actual value.&lt;/p&gt;

==Implementation==
Here, we try to demonstrate the concept of trimmed mean through crowd computing.
&lt;ol&gt;
&lt;li&gt; Input a list of estimates done by the crowd .&lt;/li&gt;
&lt;li&gt; Sort the list.&lt;/li&gt;
&lt;li&gt; Remove the 10% smallest values.&lt;/li&gt;
&lt;li&gt; Remove the 10% largest values.
&lt;li&gt; Calculate the mean of the new list obtained .&lt;/li&gt;&lt;/ol&gt;&lt;hr&gt;

==Data of Experiment==       
    Estimates =[1000,1010,1786,2000,1500,1500,100,120,150,150,150,170,175,180,197,200,200,200,200,200,200,220,220,220,220,234,250,250,250,250,250,250,250,250,250,263,270,275,275,286,300,
                300,300,300,300,300,300,300,320,350,350,350,400, 400,400,400,400,450,467,500,500,500,500,500,500,500,550,550,600,600,600,650,700,700,720]

    '''CODE:'''
&lt;pre&gt;
Estimates = [1000,1010,1786,2000,1500,1500,100,120,150,150,150,170,175,180,197,200,200,200,200,200,200,220,220,220,220,234,250,250,250,250,250,250,250,250,250,263,270,275,275,286,300,                300,300,300,300,300,300,300,320,350,350,350,400,400,400,400,400,450,467,500,500,500,500,500,500,500,550,550,600,600,600,650,700,700,720]
Estimates.sort()
offset = int(0.10*len(Estimates))
for i in range(offset):
       del Estimates[0]
       del Estimates[-1]
Sum = 0    
for i in range(len(Estimates)):
       Sum += Estimates[i]
Mean_Value = Sum/len(Estimates)
print(&quot;Mean : &quot;, int(Mean_Value))
#Output:
Mean :  351
&lt;/pre&gt;
&lt;hr&gt;
==Trimmed Mean for the above example== 
&lt;h3&gt;Using scipy library&lt;/h3&gt;
&lt;pre&gt;
#import scipy to use the method of trim_mean
from scipy import stats
trimMean = stats.trim_mean(Estimates, 0.1) # Trim 10% at both ends
print(&quot;Trimmed Mean : &quot;,trimMean)
#Output:
Trimmed Mean :  335.1020408163265
&lt;/pre&gt;

&lt;h3&gt;Without using scipy library&lt;/h3&gt;
&lt;pre&gt;
#Trimmed mean with 10%
p=10/100
#sorted data
data=[2, 4, 6, 7, 11, 21, 81, 90, 105, 121]
n = len(data)
#Remove elements from both end
rem=int(n*p)
newData = data[rem:-rem]
mean = 0
for i in newData:
    mean += i
mean = int(mean/len(newData))
print(&quot;Trimmed mean : &quot;,mean)
#Output: Trimmed mean :  40
&lt;/pre&gt;
[[#Top]]

=Jumbled_Words Permutations: Jumbled Words=
==What are Permutations ?==
A permutation also called ordering of selected number of elements from a list denoted by nPr here we are choosing all elements of a list and so n=r&lt;br&gt;
nPr=n!/(n-r)!&lt;br&gt; as n=r
nPn=n!&lt;br&gt; which gives all possible arrangement of elements present in a list.

 For example, permutations of list [1,2,3] are [1,2,3], [1,3,2], [2,1,3], [2,3,1], 
[3,1,2], and [3,2,1]. 
The number of permutations of a list of elements nPn is given by n!. For example, there are 2! = 2 x 1 = 2 permutations of [1,2], namely [1,2] and [2,1], and 3! = 3 x 2 x 1 = 6 permutations of [1,2,3], as mentioned above.&lt;br/&gt;
[[File:Permutations.jpg]]

==Implementation==
 &lt;p style=&quot;text-align:justify&quot;&gt;
Here, we try to demonstrate the concept of permutations through jumbled words. It is a two player game in which one person presents the other person a different permutation of the word in his mind. The other person has to guess the right word. If he guesses, the he wins otherwise he loses.&lt;/p&gt;
 Input an list of words.
 Randomly pick a word from the list of words .
 Shuffle this word and present it to the other player.
 if word guesses by the player is same as the one picked from list of w
     player wins
 else
     player loses

ALTERNATE CODE TO GENERATE THIS GAME:
&lt;pre&gt;
import random
p1=input(&quot;enter player 1 name:&quot;)
p2=input(&quot;enter player 2 name:&quot;)
l=[&quot;rainbow&quot;,&quot;computer&quot;,&quot;robot&quot;,&quot;butter&quot;,&quot;vegetable&quot;,&quot;science&quot;,&quot;correct&quot;]
c1=c2=a1=a2=f1=f2=0
k=1
i=3
def play():
    n=random.choice(l)        ##n=chooses a word from list l
    l1=[]
    for j in n:
       l1.append(j)      ##creates a list for word in n
    for t in range(len(l1)):
       p=random.choice(l1)     ##this randomly displays letters in the list
       print(p)
       l1.remove(p)          ##to avoid the repetition of a letter
    s=input(&quot;enter the word:&quot;)
    if(s==n):
        print(&quot;correct&quot;)
        return 1
    else:
        print(&quot;not correct&quot;)
        print(&quot;answer is&quot;,n)
        return 0
def stat():
     print(&quot;player 1:&quot;)
     print(&quot;score:&quot;,c1)
     print(&quot;answered:&quot;,a1)
     print(&quot;failed:&quot;,f1)
     print(&quot;.............&quot;)
     print(&quot;player 2:&quot;)
     print(&quot;score:&quot;,c2)
     print(&quot;answered:&quot;,a2)
     print(&quot;failed&quot;,f2)
     if(c1&gt;c2):
         print(p1,&quot; won over &quot;,p2)
     elif(c1==c2):
         print(&quot;draw game&quot;)
     else:
         print(p2,&quot; won over &quot;,p1) 
while(i!=4):
      if(i==3):
         if(k==1):
             print(&quot;player 1 turn&quot;)
             print(&quot;your jumbled word is:&quot;)
             k=k+1
             m=play()
             if(m==1):      ##if guessed answer is correct,then score and no.of answered count will be increased
                c1+=1
                a1+=1
             else:
                f1+=1       ##else count of no.of failed to answered will be incremented
         else:
             print(&quot;player 2 turn&quot;)
             print(&quot;your jumbled word is:&quot;)
             k=k-1
             m=play()
             if(m==1):
                c2=c2+1
                a2=a2+1
             else:
                f2=f2+1
       if(i==2):
             print(&quot;present status&quot;)
             stat()
       i=int(input(&quot;enter your choice  1.stop 2.status 3.continue&quot;))
       if(i==1):
             stat()
             i=i+3
&lt;/pre&gt;
&lt;hr&gt;
=== JumbledWord Simple Logic, In Short ===
[[File:jumbledWord.gif]]
---
&lt;hr&gt;
'''Logic to create a Jumbled Word'''
&lt;hr&gt;
&lt;pre&gt;
#Get Jumbled Word and print it Horizontally
import random

def getJumbledWord(b):
    jumble=''
    l1 = [ b[i] for i in range(0, len(b)) ]
    for t in range(len(l1)):
       p=random.choice(l1)  #this randomly gets letters from the list      
       jumble=jumble+p       
       l1.remove(p)
    return jumble

b=input(&quot;Enter a word to make it jumbled : &quot;)
print(&quot;Jumbled Word : &quot;, getJumbledWord(b))
&lt;/pre&gt;
&lt;pre&gt;
Output:
Enter a word to make it jumbled : live and let live others
Jumbled Word :  vel  toldeisrte aihv len
==========================================
Enter a word to make it jumbled : junkfood
Jumbled Word :  nfukdooj
&lt;/pre&gt;
&lt;hr&gt;
'''Another Logic to create a Jumbled Word'''
&lt;hr&gt;
&lt;pre&gt;
import random
b=input(&quot;Enter a word to make it jumbled : &quot;)

def getJumbledWord1(b):
    l1 = [ b[i] for i in range(0, len(b)) ]
    random.shuffle(l1)
    str1 = ''.join(l1)
    return str1

print(&quot;Jumbled Word : &quot;, getJumbledWord1(b))
&lt;/pre&gt;

====Sample Output:====
&lt;pre&gt;
---- Output1 
Enter a word to make it jumbled : butter
Jumbled Word :  tbture

---- Output2 
Enter a word to make it jumbled : petriotism
Jumbled Word :  pittrosime
&lt;/pre&gt;

=Theory of Evolution=

== What is Evolution ? ==
Evolution is the change in heritable characteristics over successive generations. The theory of evolution explains that DNA, which acts as a carrier of genetic information from one generation to other, tends to change or mutate occasionally. These changes are reflected in next generations to come. This is how life has evolved on earth from bacteria to human beings.&lt;br&gt;
[[File:Evolution.png|500px]]

== Implementation ==
 &lt;p style=&quot;text-align:justify&quot;&gt;
An array representing DNA is stored in a file. As genes are forms of DNA, they contain information to be transferred to forthcoming generations. Assume that information is in the form of bits (in the form of 0s and 1s). A number is picked randomly from 1 to the size of the array. A new parameter has been introduced which decides whether mutation would occur or not. If the value of this new parameter is 1 (It is picked randomly from 1 to 100), then only change is reflected down the generations, otherwise it is not. The pseudo code is as follows :
&lt;/p&gt;
Input an array containing genetic information .
Randomly generate a number (say m) from 1 to length of the array. Randomly generate other number (say p) from 1 to 100.

&lt;pre&gt; 
    if p is equal to 1 then 
        if m is 1 then
          set it to 0
        else
          set it to 1
&lt;/pre&gt;
[[#TOP]]</text>
      <sha1>fukaheyszbgu8mpo0xggv947maahszx</sha1>
    </revision>
    <revision>
      <id>3738</id>
      <parentid>3628</parentid>
      <timestamp>2018-09-29T02:34:38Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* List */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="30682">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_3 Contributors of this page]
*Week 3 Playlist: https://www.youtube.com/playlist?list=PLc_j0TNIaWxOVx_z9jAM2UB3RqYNXaoEo
=List=
List is a flexible data structure used for storing a group of data separated by comma. The elements in a list need not be of the same data type.

'''Example:'''
       List_1 = [ 1, 2,3] or 
       List_1 = [&quot;coffee&quot;, &quot;Tea&quot;, &quot;Milk&quot;] or
       List_1 = [1,&quot;coffee&quot;, &quot;Tea&quot;, 3, &quot;5&quot;]

==List Creation==
&lt;pre&gt;a) A list can be created by simply putting values (separated by comma) between square brackets as given below,
       List_1 = [1,&quot;coffee&quot;, &quot;Tea&quot;, 3, &quot;5&quot;] #this creates a list by name List_1 containing following items


Or,
(b)A List can be created from scratch and elements can be added 
        List_2 = [ ]
        List_2.append(&quot;Kala&quot;)
        List_2.append(&quot;Mala&quot;)
Here we use &quot;append&quot;, which is a function in python that enable us to append or attach an element to a list .
Thus List_2 will now hold [&quot;Kala&quot;,&quot;Mala&quot;]
&lt;/pre&gt;
[[#Top]]

==Operations and Methods to work with List==
&lt;pre&gt;
a = [25,30,50,90,12,13]
b = [100,300,500,200,250]
&lt;/pre&gt;
&lt;hr&gt;
&lt;table border=2&gt;
  &lt;tr&gt;
    &lt;th&gt;&lt;b&gt;Method/&lt;br&gt;Operator&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Function&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Syntax&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Output&lt;/b&gt;&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;len()&lt;/td&gt;
    &lt;td&gt;Find length of a list&lt;/td&gt;
    &lt;td&gt;len(a)&lt;/td&gt;
    &lt;td&gt;6&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;max()&lt;/td&gt;
    &lt;td&gt;Find maximum element from the list&lt;/td&gt;
    &lt;td&gt;max(a)&lt;/td&gt;
    &lt;td&gt;90&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;min()&lt;/td&gt;
    &lt;td&gt;Find minimum element from the list&lt;/td&gt;
    &lt;td&gt;min(a)&lt;/td&gt;
    &lt;td&gt;12&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sum()&lt;/td&gt;
    &lt;td&gt;Returns sum of all elements of the list&lt;/td&gt;
    &lt;td&gt;sum(a)&lt;/td&gt;
    &lt;td&gt;220&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;reverse()&lt;/td&gt;
    &lt;td&gt;Reverses the original list&lt;/td&gt;
    &lt;td&gt;a.reverse()&lt;/td&gt;
    &lt;td&gt;[13, 12, 90, 50, 30, 25]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sort()&lt;/td&gt;
    &lt;td&gt;Sorts the original list in ascending order&lt;/td&gt;
    &lt;td&gt;a.sort()&lt;/td&gt;
    &lt;td&gt;[12, 13, 25, 30, 50, 90]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sorted()&lt;/td&gt;
    &lt;td&gt;Returns the new sorted list &lt;/td&gt;
    &lt;td&gt;sorted(a)&lt;/td&gt;
    &lt;td&gt;[12, 13, 25, 30, 50, 90]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;insert()&lt;/td&gt;
    &lt;td&gt;Insert at a particular index in the list, and shifts remaining elements&lt;/td&gt;
    &lt;td&gt;a.insert(3,3)&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 3, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;append()&lt;/td&gt;
    &lt;td&gt;Adds elements/object to the end of the list&lt;/td&gt;
    &lt;td&gt;a.append(5)&lt;br&gt;a.append([10,20])&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 5]&lt;br&gt;[25, 30, 50, 90, 12, 13, [10, 20]]&lt;br&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;extend()&lt;/td&gt;
    &lt;td&gt;Adds object to the end of the list as elements not as object&lt;/td&gt;
    &lt;td&gt;a.extend([10,20])&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 10, 20]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;*&amp;nbsp;&amp;nbsp;Repeatation&lt;br&gt;operator&lt;/td&gt;
    &lt;td&gt;Repeat the list for n times and returns a new list&lt;/td&gt;
    &lt;td&gt;a*2&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 25, 30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;+ Concatenation&lt;br&gt;operator&lt;/td&gt;
    &lt;td&gt;Concatenates two lists, and returns a new list&lt;/td&gt;
    &lt;td&gt;a+b&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 100, 300, 500, 200, 250]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;index()&lt;/td&gt;
    &lt;td&gt;Finds index of a particular element in the list or not&lt;/td&gt;
    &lt;td&gt;a.index(25)&lt;br&gt;a.index(0)&lt;br&gt;&lt;/td&gt;
    &lt;td&gt;0&lt;br&gt;&lt;br&gt;ValueError: 0 is not in list&lt;br&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;in operator&lt;/td&gt;
    &lt;td&gt;Finds whether a particular element is in the list or not, returns boolean&lt;/td&gt;
    &lt;td&gt;25 in a&lt;/td&gt;
    &lt;td&gt;True&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;not in operator&lt;/td&gt;
    &lt;td&gt;Checks if element is not available in list, returns boolean&lt;/td&gt;
    &lt;td&gt;25 not in a&lt;/td&gt;
    &lt;td&gt;False&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;count()&lt;/td&gt;
    &lt;td&gt;Counts the number of occurence of an element in the list&lt;/td&gt;
    &lt;td&gt;a.count(25)&lt;/td&gt;
    &lt;td&gt;1&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;remove()&lt;/td&gt;
    &lt;td&gt;Removes an element from the list&lt;/td&gt;
    &lt;td&gt;a.remove(25)&lt;/td&gt;
    &lt;td&gt; [30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;pop()&lt;/td&gt;
    &lt;td&gt;Delete and return item at index 0&lt;/td&gt;
    &lt;td&gt;a.pop(0)&lt;/td&gt;
    &lt;td&gt;25 , a will be [30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;del&lt;/td&gt;
    &lt;td&gt;Deletes item at a particular index from the list&lt;/td&gt;
    &lt;td&gt;del a[0]&lt;/td&gt;
    &lt;td&gt;[30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;all()&lt;/td&gt;
&lt;td&gt;Returns True, if all items in list are True or it is an empty list&lt;/td&gt;
&lt;td&gt;all([True, True, True])
all([])
&lt;/td&gt;
&lt;td&gt;True&lt;br&gt;
True&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;any()&lt;/td&gt;
&lt;td&gt;Returns True, if any item in list is True else return False&lt;/td&gt;
&lt;td&gt;any([True, True, True])&lt;br&gt;
any([True, False, True])&lt;br&gt;
any([])&lt;/td&gt;
&lt;td&gt;True&lt;br&gt;False&lt;br&gt;False&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;

==Printing the List==
=== Print whole list ===
A list can be printed simply or using a ''for / while'' loop 

 print(List_2)     # To print the entire list
This code will print      
 ['Kala','Mala']     

===Print element at a particular index===
&lt;pre&gt;
Using index position
    List_2[0]     # prints 'Kala' ,i.e,the value at index position 0.
    List_2[1]     # prints 'Mala'.
&lt;/pre&gt;
=== Without using index position ===
&lt;pre&gt;
for item in List_2:   # here item is a variable used to access elements in list.
       print(item)
   This code snippet prints 
    Kala
    Mala
&lt;/pre&gt;
[[#TOP]]

==Search for a particular element in list==
Elements in a list can be searched by one of the two ways:
=== using index() function===
&lt;pre&gt;
ages1 = [11,23,12,23,45]

#if element is available in the list, index() returns the index value on which, the element is present.
print(ages1.index(45))#Output: 4

#if element is not available in the list, index() returns ''ValueError''
print(ages1.index(0))#Output: ValueError:
&lt;/pre&gt;

In programming, if such error occurs, program gets terminated. It can be solved using exception handling.
e.g.
&lt;pre&gt;
ages1 = [11,23,12,23,45]

try:
    print(ages1.index(0))
except ValueError:
    print(&quot;Exception has occured&quot;)    
    print(&quot;Element is not found in the list&quot;)

&lt;/pre&gt;
&lt;pre&gt;
'''Output: 
Exception has occured
Element is not found in the list
'''&lt;/pre&gt;
[[#TOP]]

=== using 'in' operator===
''in'' operator is used to check whether a particular element is available in the list or not.e.g.

&lt;pre&gt;
ages1 = [11,23,12,23,45]
no=11

if no in ages1:
    print(&quot;no is there in the list&quot;)
else:    
    print(&quot;no is NOT there in the list&quot;)
&lt;/pre&gt;
&lt;pre&gt;
#Output: no is there in the list
&lt;/pre&gt;


'''Number is not there in the list'''
&lt;pre&gt;
ages1 = [11,23,12,23,45]
no=15

if no in ages1:
    print(&quot;no is there in the list&quot;)
else:    
    print(&quot;no is NOT there in the list&quot;)
&lt;/pre&gt;
&lt;pre&gt;
Output: no is NOT there in the list
&lt;/pre&gt;
[[#TOP]]

==Updating the List==
The lists can be updated using ''append'' or ''insert'' function.  Append adds the element to the end of the list and Insert adds the element in the specified position.
&lt;pre&gt;
   # add the element 'Sheela' to the end of the list.
   List_2.append(&quot;Sheela&quot;)    
   print (List_2) will output 
   ['Kala', 'Mala', 'Sheela']
&lt;/pre&gt;
   &lt;pre&gt;
# add the element &quot;Bala&quot; in the list at the index 1.
   List_2.insert(1,&quot;Bala&quot;)    
   print (List_2) will output 
   ['Kala', 'Bala','Mala', 'Sheela']
&lt;/pre&gt;

=== Extend the list by adding elements of other list at end using extend()===
&lt;pre&gt;
ages = [11,23,12,23,45]
ages.extend([57,58])
print(ages)
&lt;/pre&gt;

&lt;pre&gt;
#Output: [11, 23, 12, 23, 45, 57, 58]
&lt;/pre&gt;

==== Difference between ''append and extend'' ====
Difference between append and extend can be easily understood, by the following example.

&lt;pre&gt;
appendlist = [11,23,12,23,45]
appendlist.append([57,58])

extendlist= [11,23,12,23,45]
extendlist.extend([57,58])
&lt;/pre&gt;

&lt;pre&gt;
'''Output:
[11, 23, 12, 23, 45, [57, 58]]
[11, 23, 12, 23, 45, 57, 58]'''
&lt;/pre&gt;

[[#TOP]]

==Basic Operations on List==
===Frequency of Occurrence===
list.count(object) will return the number of times the object occur in the list.
  '''Example'''
    ages = [11,23,12,23,45,43,22,24,23]
    ages.count(23) will return
    3
    ages.count(100) will return
    0

===Length of the List===
len(list) will return the length of the list ie. the number of objects in the list.
  '''Example'''
&lt;pre&gt;
    ages = [11,23,12,23,45,43,22,24,23]
    len(ages) # Output: 9
&lt;/pre&gt;

To print the objects in the list either use ''for item in list'' or ''for index in range(len(list))''
&lt;pre&gt;
    for item in ages:       
        print (item)  
        (OR)
    for index in range(len(ages)) :
        print (ages[index])
&lt;/pre&gt;

===Sort the List===
list.sort() will sort the list in ascending order
  '''Example'''
    ages = [11,23,12,23,45,43,22,24,23]
    ages.sort() 
    print (ages) 
    [11, 12, 22, 23, 23, 23, 24, 43, 45]

[[#TOP]]

===Sort the List using sorted() function===
sorted(list1) will sort the list and return a new list, it doesn't modify the original list
&lt;br&gt;'''Example: Sort in ascending order'''
&lt;pre&gt;
ages = [11,23,12,23,45,43,22,24,23]
newList=sorted(ages)
print(newList)

#Output: [11, 12, 22, 23, 23, 23, 24, 43, 45]
&lt;/pre&gt;

&lt;br&gt;'''Example: Sort in descending order'''
&lt;pre&gt;
ages = [11,23,12,23,45,43,22,24,23]
newList=sorted(ages,reverse=True)
print(newList)

#Output: [45, 43, 24, 23, 23, 23, 22, 12, 11]
&lt;/pre&gt;

===Reverse the List===
list.reverse() will reverse the original list
  '''Example'''
    ages = [11, 12, 22, 23, 23, 23, 24, 43, 45]
    ages.reverse()
    print (ages)
    [45, 43, 24, 23, 23, 23, 22, 12, 11]

Both sort() and reverse() list operation will work on numeric and alphanumeric data list.

A special use of the reverse() function is to descend a list that is sorted in ascending order.

  '''Example'''
&lt;pre&gt;
ages = [11, 12, 22, 23, 23, 23, 24, 43, 45]
ages.sort()
print(ages)
ages.reverse()
print(ages)
&lt;/pre&gt;

===Slicing===
Used to retrieve an object or objects in a range as a list  
  '''Example'''

Use ''list[index]'' to retrieve the object at the given index
&lt;pre&gt;
In [1]: student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
In [2]: student[3]     #Object at index 3.  Remember index starts at 0
Out[2]: 'Geetha'      
&lt;/pre&gt;

Use ''list[start_index : end_index + 1]'' to retrieve objects from the start_index to end_index 
&lt;pre&gt;
In [3]: student[2:4]     # Objects from index 2 to 3 as List. Note the [ and ]
Out[3]: ['Vijay', 'Geetha']   
&lt;/pre&gt;

Use ''list[:]'' to retrieve objects from the starting of the list to the end of the list. 
The default start value will be the starting index of the list (i.e. 0) and the default end value
will be the length of the list 
&lt;pre&gt;
In [4]: student[:]        # prints the entire list
Out[4]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma', 'Janani']
&lt;/pre&gt;
&lt;pre&gt;
In [5]: student[:5]       # prints the objects from the start of the list upto object at index 4
Out[5]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran']
&lt;/pre&gt;
&lt;pre&gt;
In [6]: student[2:]       # prints the objects from index 2 upto the end of the list
Out[6]: ['Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma', 'Janani']
&lt;/pre&gt;

Negative index too is available in Python. It starts from last element of the list. i.e.
&lt;pre&gt;
In [7]:student[-1]        #prints last index of list
Out[7]: 'Janani'
&lt;/pre&gt;
&lt;pre&gt;
In [8]:student[-1:-8]     #prints empty list
Out[8]: []
&lt;/pre&gt;
&lt;pre&gt;
In [9]:student[-8:-1]     #prints -8th index to -1st index elements
Out[9]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma']
&lt;/pre&gt;

[[#TOP]]

===Removing Item from list ===
----

Is used to remove a specific item from the list.

'''Example:'''
 
Use list.remove(entry/value)  Or   del list[index]    Or list.pop(index)
&lt;pre&gt;
student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
student.remove(&quot;Arun&quot;)   #This will delete item &quot;Arun&quot;
         Or    
del student[0]           # This will delete item at index 0
         Or
student.pop(0)         # This will delete and return item at index 0
print(student)    
Output: &quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
&lt;/pre&gt;

[[#TOP]]

===Delete list ===
----
Used to delete complete list

'''Example'''

Use del &lt;list name&gt;
&lt;pre&gt;
student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
del student&lt;/pre&gt;

===Concatenation of two lists===
----
''+'' is the concatenation operator which is used concatenate two lists. 
&lt;pre&gt;
ages1 = [11,23,12,23,45]
ages2 = [25, 24, 43, 47]
age=ages1+ages2
print(age)
#Output: [11, 23, 12, 23, 45, 25, 24, 43, 47]
&lt;/pre&gt;

===Repeatation of a list ===
----
''*'' is the operator to repeat a particular list.
&lt;pre&gt;
ages1 = [11,23,12,23,45]
age=ages1*5 #ages1 list is repeated 5 times and stroed in ''age'' list
print(age)

#Output: [11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45]
&lt;/pre&gt;

=== all and any for List===
all() and any() are special functions to check whether all elements in iterable is ''True'' or any element is ''True''
&lt;ol&gt;
&lt;li&gt;If all elements in a list are ''True'', '''all()''' will return ''True''&lt;/li&gt;
&lt;li&gt;If iterable is ''empty'', '''all()''' will return ''True''&lt;/li&gt;
&lt;li&gt;If iterable contains at least one ''True'', '''any()''' will return ''True''&lt;/li&gt;
&lt;li&gt;If iterable is ''empty'', '''any()''' will return ''False''&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;
lsit=[True, True, True, True]
print(all(lsit))#Output: True
print(any(lsit))#Output: True

lsit1=[True, False, True, True]
print(all(lsit1))#Output: False
print(any(lsit1))#Output: True

lsit2=[False,False,False]
print(all(lsit2))#Output: False
print(any(lsit2))#Output: False

lsit3=[]
print(all(lsit3))#Output: True
print(any(lsit3))#Output: False
&lt;/pre&gt;

==Conditional Statements==
&lt;pre&gt;Conditionals are used to check the condition and change the flow of the program 
accordingly. They are realized in programming languages through if statement. The 
syntax is as follows :
&lt;pre&gt;
         if condition : 
            statement
&lt;/pre&gt;
    '''Note:''' Do not forget indentation (inserting space/tab) in the line after the
 if condition.
    
    In case you want to execute a set of statements when a condition is true and another

set of statement when the condition is false.
&lt;pre&gt;
         if condition : 
            statement 1
         else :
            statement 2
&lt;/pre&gt;

&lt;pre&gt;    
    Multiple if-else statements can be written as follows:
         if condition_1 : 
            statement 1
         elif condition_2 : # 'elif' is short for 'else if'
            statement 2
         elif condition_3 :
            statement 3
        .
        .
         else :
            final statement
&lt;/pre&gt;

[[#TOP]]

=Loops and Conditionals : Fizzbuzz=
====Loops====
Loops are used to execute a set of repetitive statements. They are realised
through 'while' and 'for' loops in programming languages. The syntax of 'for' loop is 
as follows :
&lt;pre&gt;
for LOOPVARIABLE in SEQUENCE: 
            STATEMENTS&lt;/pre&gt;

    '''e.g.''' to print all the data from a list we can write:
&lt;pre&gt;
for item in list_name:
      print(item)&lt;/pre&gt;
    OR
&lt;pre&gt;
for index in range(len(list_name)):
      print(list_name[index])
 &lt;/pre&gt;   
    The syntax for while loop is as follows :
&lt;pre&gt;    
while BOOLEANEXPRESSION: 
     STATEMENTS
     INCREMENT/DECREMENT
&lt;/pre&gt;    
    '''e.g.''' if we want to print all numbers from 1 to 10
&lt;pre&gt;
i=1
while i&lt;=10 :
    print(i,&quot; &quot;)
    i=i+1
    &lt;/pre&gt;
 
'while' loop has indefinite iteration (run-time unknown). So, there must be loop,  break statement in it.
 Whereas 'for' loop is definite in nature (i.e. known or predictable span).&lt;br&gt;

&lt;b&gt;NOTE: Python doesn't have anything like do-while loop.&lt;/b&gt;

[[#TOP]]

==Implementation==
Here, we try to demonstrate the concept of loops and conditionals through a game called Fizzbuzz. The rules are as follows :&lt;br/&gt;
[[File:fizzBuzz.gif]]

• if input number is a multiple of ’3’ print ”Fizz”
&lt;br/&gt;
• if input number is a multiple of ’5’ print ”Buzz”
&lt;br/&gt;
• if input number is a multiple of both '3' and ’5’ print ”FizzBuzz”
&lt;br/&gt;
The pseudo code is as follows :
&lt;pre&gt;
   If input no % 3 == 0 and  input no % 5 == 0 : 
       print ”Fizzbuzz”
   else if input no % 3 == 0 : 
       print ”Fizz”
   else if input no % 5 == 0 : 
       print ”Buzz”
   else :
       print the input no
&lt;/pre&gt;
 &lt;p style=&quot;text-align:justify&quot;&gt;
The order of statements execution matters to get the desired output. The highest priority condition should be first followed by other. In fizzbuzz programming, first checking should be done for both divisibility of 3 and 5. If condition not satisfied only then it should check individually for 3 or 5. So carefully choosing the order is crucial for better programming.
Note: There is some effect of present condition statements chosen on next conditions statements. That is why in first attempt fizzbuzz programming got struck.&lt;/p&gt;

Example: 
&lt;pre&gt;
#Code to achieve the above requirement in python3.
i = int(input(&quot;Enter the number&quot;)) 
if i%3 == 0 and i%5 == 0: print(i,&quot;FizzBuzz&quot;)  
elif i%5 == 0: print(i,&quot;Buzz&quot;)
elif i%3 == 0: print(i,&quot;Fizz&quot;)
else: print(i)
&lt;/pre&gt;
Lets put the same into a loop for a range given by the user.
&lt;pre&gt;
def fizzbuzzgame(start,stop):
    for i in range(start,stop+1):
        if i%3 == 0 and i%5 == 0:
            print(i,&quot;FizzBuzz&quot;)
        elif i%5 == 0:
            print(i,&quot;Buzz&quot;)
        elif i%3 == 0:
            print(i,&quot;Fizz&quot;)
        else: print(i)

fizzbuzzgame(50,100)
&lt;/pre&gt;
&lt;pre&gt;
#Output:
1235
Buzz
======================================
555
Fizzbuzz
======================================
1235
Buzz
======================================
999
Fizz
&lt;/pre&gt;

=== Fizz Buzz game in Interactive mode with Score ===
'''By Ms. Ami Tusharkant Choksi'''
&lt;pre&gt;
def fizzbuzzgame(i):
        if i%3 == 0 and i%5 == 0:
            print(i,&quot;FizzBuzz&quot;)
            return(&quot;fzbz&quot;)
        elif i%5 == 0:
            print(i,&quot;Buzz&quot;)
            return(&quot;bz&quot;)
        elif i%3 == 0:
            print(i,&quot;Fizz&quot;)
            return(&quot;fz&quot;)
        else:
            print(i)
            return(&quot;no&quot;)

ch = 'y'
fizzbuzz=0
fizz=0
buzz=0
nothing=0
print(&quot;&quot;&quot;

 /$$$$$$$$/$$                  /$$$$$$$                            
| $$_____|__/                 | $$__  $$                           
| $$      /$$/$$$$$$$$/$$$$$$$| $$  \ $$/$$   /$$/$$$$$$$$/$$$$$$$$
| $$$$$  | $|____ /$$|____ /$$| $$$$$$$| $$  | $|____ /$$|____ /$$/
| $$__/  | $$  /$$$$/   /$$$$/| $$__  $| $$  | $$  /$$$$/   /$$$$/ 
| $$     | $$ /$$__/   /$$__/ | $$  \ $| $$  | $$ /$$__/   /$$__/  
| $$     | $$/$$$$$$$$/$$$$$$$| $$$$$$$|  $$$$$$//$$$$$$$$/$$$$$$$$
|__/     |__|________|________|_______/ \______/|________|________/
                                                                  
&quot;&quot;&quot;)   
print('''

  /$$$$$$                                
 /$$__  $$                               
| $$  \__/ /$$$$$$ /$$$$$$/$$$$  /$$$$$$ 
| $$ /$$$$|____  $| $$_  $$_  $$/$$__  $$
| $$|_  $$ /$$$$$$| $$ \ $$ \ $| $$$$$$$$
| $$  \ $$/$$__  $| $$ | $$ | $| $$_____/
|  $$$$$$|  $$$$$$| $$ | $$ | $|  $$$$$$$
 \______/ \_______|__/ |__/ |__/\_______/
                                     
''')

while(ch == 'y'):
    n=int(input(&quot;Enter a Number : &quot;))
    winLoose=fizzbuzzgame(n)
    if(winLoose == &quot;fz&quot;):
        fizz+=1
    elif(winLoose == &quot;bz&quot;):
        buzz+=1
    elif(winLoose == &quot;fzbz&quot;):
        fizzbuzz+=1
    ch=input(&quot;Do you want to continue playing the game : (y/n)&quot;)
    if(ch=='n'):
        print('Congratulations, your score is\n FizzBuzz:%d\nFizz:%d\nBuzz:%d' %
(fizzbuzz,fizz,buzz))
    
'''Sample Output:

 /$$$$$$$$/$$                  /$$$$$$$                            
| $$_____|__/                 | $$__  $$                           
| $$      /$$/$$$$$$$$/$$$$$$$| $$  \ $$/$$   /$$/$$$$$$$$/$$$$$$$$
| $$$$$  | $|____ /$$|____ /$$| $$$$$$$| $$  | $|____ /$$|____ /$$/
| $$__/  | $$  /$$$$/   /$$$$/| $$__  $| $$  | $$  /$$$$/   /$$$$/ 
| $$     | $$ /$$__/   /$$__/ | $$  \ $| $$  | $$ /$$__/   /$$__/  
| $$     | $$/$$$$$$$$/$$$$$$$| $$$$$$$|  $$$$$$//$$$$$$$$/$$$$$$$$
|__/     |__|________|________|_______/ \______/|________|________/
                                                                                                                                   

  /$$$$$$                                
 /$$__  $$                               
| $$  \__/ /$$$$$$ /$$$$$$/$$$$  /$$$$$$ 
| $$ /$$$$|____  $| $$_  $$_  $$/$$__  $$
| $$|_  $$ /$$$$$$| $$ \ $$ \ $| $$$$$$$$
| $$  \ $$/$$__  $| $$ | $$ | $| $$_____/
|  $$$$$$|  $$$$$$| $$ | $$ | $|  $$$$$$$
 \______/ \_______|__/ |__/ |__/\_______/
                                         

Enter a Number : 666
666 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 777
777 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 555
555 FizzBuzz
Do you want to continue playing the game : (y/n)y
Enter a Number : 1
1
Do you want to continue playing the game : (y/n)y
Enter a Number : 789
789 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 25
25 Buzz
Do you want to continue playing the game : (y/n)n
Congratulations, your score is

FizzBuzz:1
Fizz:3
Buzz:1

&lt;/pre&gt;

=Crowd Computing: Just Estimate=
==Wisdom of Crowds==
 &lt;p style=&quot;text-align:justify&quot;&gt;
The concept of ’Wisdom of Crowds’ was proposed by Francis Galton. A weight-judging competition was carried on at the annual show of the West of England Fat Stock and Poultry Exhibition recently held at Plymouth, A fat ox having been selected, competitors bought stamped and numbered cards, each, on which to inscribe their respective names, addresses, and estimates of what the ox would weigh after it had been slaughtered. Those who guessed most successfully received prizes. About 8oo tickets were issued to the par- ticipants. The middlemost estimate of all the estimates recorded was 1207 lbs and the actual weight of the ox was 1198 lbs.&lt;/p&gt;

==Our Experiment==
 &lt;p style=&quot;text-align:justify&quot;&gt;
The crowd had to guess the number of candies/gems in a jar. Around 75 people participated in the experiment. The actual number of gems in the jar were 375. The median of all estimates came out to be 300 and the mean of all the estimates came out to be around 396. Median underestimated and mean overestimated the actual value. So according to recent studies, Trimmed mean must be used as an aggregate measure to estimate where Wisdom of Crowds is involved.
&lt;/p&gt;
[[File:Gemsjar.jpg|center|200px|caption]]

===Trimmed Mean===
 &lt;p style=&quot;text-align:justify&quot;&gt;
In these kinds of experiments, 10% trimmed mean is usually followed. For calculating 10% trimmed mean, remove 10% smallest and 10% largest values from the sample. Calculate the mean of the sample obtained. In the above experiment, the trimmed mean came out to be around 351 which is very close to the actual value.&lt;/p&gt;

==Implementation==
Here, we try to demonstrate the concept of trimmed mean through crowd computing.
&lt;ol&gt;
&lt;li&gt; Input a list of estimates done by the crowd .&lt;/li&gt;
&lt;li&gt; Sort the list.&lt;/li&gt;
&lt;li&gt; Remove the 10% smallest values.&lt;/li&gt;
&lt;li&gt; Remove the 10% largest values.
&lt;li&gt; Calculate the mean of the new list obtained .&lt;/li&gt;&lt;/ol&gt;&lt;hr&gt;

==Data of Experiment==       
    Estimates =[1000,1010,1786,2000,1500,1500,100,120,150,150,150,170,175,180,197,200,200,200,200,200,200,220,220,220,220,234,250,250,250,250,250,250,250,250,250,263,270,275,275,286,300,
                300,300,300,300,300,300,300,320,350,350,350,400, 400,400,400,400,450,467,500,500,500,500,500,500,500,550,550,600,600,600,650,700,700,720]

    '''CODE:'''
&lt;pre&gt;
Estimates = [1000,1010,1786,2000,1500,1500,100,120,150,150,150,170,175,180,197,200,200,200,200,200,200,220,220,220,220,234,250,250,250,250,250,250,250,250,250,263,270,275,275,286,300,                300,300,300,300,300,300,300,320,350,350,350,400,400,400,400,400,450,467,500,500,500,500,500,500,500,550,550,600,600,600,650,700,700,720]
Estimates.sort()
offset = int(0.10*len(Estimates))
for i in range(offset):
       del Estimates[0]
       del Estimates[-1]
Sum = 0    
for i in range(len(Estimates)):
       Sum += Estimates[i]
Mean_Value = Sum/len(Estimates)
print(&quot;Mean : &quot;, int(Mean_Value))
#Output:
Mean :  351
&lt;/pre&gt;
&lt;hr&gt;
==Trimmed Mean for the above example== 
&lt;h3&gt;Using scipy library&lt;/h3&gt;
&lt;pre&gt;
#import scipy to use the method of trim_mean
from scipy import stats
trimMean = stats.trim_mean(Estimates, 0.1) # Trim 10% at both ends
print(&quot;Trimmed Mean : &quot;,trimMean)
#Output:
Trimmed Mean :  335.1020408163265
&lt;/pre&gt;

&lt;h3&gt;Without using scipy library&lt;/h3&gt;
&lt;pre&gt;
#Trimmed mean with 10%
p=10/100
#sorted data
data=[2, 4, 6, 7, 11, 21, 81, 90, 105, 121]
n = len(data)
#Remove elements from both end
rem=int(n*p)
newData = data[rem:-rem]
mean = 0
for i in newData:
    mean += i
mean = int(mean/len(newData))
print(&quot;Trimmed mean : &quot;,mean)
#Output: Trimmed mean :  40
&lt;/pre&gt;
[[#Top]]

=Jumbled_Words Permutations: Jumbled Words=
==What are Permutations ?==
A permutation also called ordering of selected number of elements from a list denoted by nPr here we are choosing all elements of a list and so n=r&lt;br&gt;
nPr=n!/(n-r)!&lt;br&gt; as n=r
nPn=n!&lt;br&gt; which gives all possible arrangement of elements present in a list.

 For example, permutations of list [1,2,3] are [1,2,3], [1,3,2], [2,1,3], [2,3,1], 
[3,1,2], and [3,2,1]. 
The number of permutations of a list of elements nPn is given by n!. For example, there are 2! = 2 x 1 = 2 permutations of [1,2], namely [1,2] and [2,1], and 3! = 3 x 2 x 1 = 6 permutations of [1,2,3], as mentioned above.&lt;br/&gt;
[[File:Permutations.jpg]]

==Implementation==
 &lt;p style=&quot;text-align:justify&quot;&gt;
Here, we try to demonstrate the concept of permutations through jumbled words. It is a two player game in which one person presents the other person a different permutation of the word in his mind. The other person has to guess the right word. If he guesses, the he wins otherwise he loses.&lt;/p&gt;
 Input an list of words.
 Randomly pick a word from the list of words .
 Shuffle this word and present it to the other player.
 if word guesses by the player is same as the one picked from list of w
     player wins
 else
     player loses

ALTERNATE CODE TO GENERATE THIS GAME:
&lt;pre&gt;
import random
p1=input(&quot;enter player 1 name:&quot;)
p2=input(&quot;enter player 2 name:&quot;)
l=[&quot;rainbow&quot;,&quot;computer&quot;,&quot;robot&quot;,&quot;butter&quot;,&quot;vegetable&quot;,&quot;science&quot;,&quot;correct&quot;]
c1=c2=a1=a2=f1=f2=0
k=1
i=3
def play():
    n=random.choice(l)        ##n=chooses a word from list l
    l1=[]
    for j in n:
       l1.append(j)      ##creates a list for word in n
    for t in range(len(l1)):
       p=random.choice(l1)     ##this randomly displays letters in the list
       print(p)
       l1.remove(p)          ##to avoid the repetition of a letter
    s=input(&quot;enter the word:&quot;)
    if(s==n):
        print(&quot;correct&quot;)
        return 1
    else:
        print(&quot;not correct&quot;)
        print(&quot;answer is&quot;,n)
        return 0
def stat():
     print(&quot;player 1:&quot;)
     print(&quot;score:&quot;,c1)
     print(&quot;answered:&quot;,a1)
     print(&quot;failed:&quot;,f1)
     print(&quot;.............&quot;)
     print(&quot;player 2:&quot;)
     print(&quot;score:&quot;,c2)
     print(&quot;answered:&quot;,a2)
     print(&quot;failed&quot;,f2)
     if(c1&gt;c2):
         print(p1,&quot; won over &quot;,p2)
     elif(c1==c2):
         print(&quot;draw game&quot;)
     else:
         print(p2,&quot; won over &quot;,p1) 
while(i!=4):
      if(i==3):
         if(k==1):
             print(&quot;player 1 turn&quot;)
             print(&quot;your jumbled word is:&quot;)
             k=k+1
             m=play()
             if(m==1):      ##if guessed answer is correct,then score and no.of answered count will be increased
                c1+=1
                a1+=1
             else:
                f1+=1       ##else count of no.of failed to answered will be incremented
         else:
             print(&quot;player 2 turn&quot;)
             print(&quot;your jumbled word is:&quot;)
             k=k-1
             m=play()
             if(m==1):
                c2=c2+1
                a2=a2+1
             else:
                f2=f2+1
       if(i==2):
             print(&quot;present status&quot;)
             stat()
       i=int(input(&quot;enter your choice  1.stop 2.status 3.continue&quot;))
       if(i==1):
             stat()
             i=i+3
&lt;/pre&gt;
&lt;hr&gt;
=== JumbledWord Simple Logic, In Short ===
[[File:jumbledWord.gif]]
---
&lt;hr&gt;
'''Logic to create a Jumbled Word'''
&lt;hr&gt;
&lt;pre&gt;
#Get Jumbled Word and print it Horizontally
import random

def getJumbledWord(b):
    jumble=''
    l1 = [ b[i] for i in range(0, len(b)) ]
    for t in range(len(l1)):
       p=random.choice(l1)  #this randomly gets letters from the list      
       jumble=jumble+p       
       l1.remove(p)
    return jumble

b=input(&quot;Enter a word to make it jumbled : &quot;)
print(&quot;Jumbled Word : &quot;, getJumbledWord(b))
&lt;/pre&gt;
&lt;pre&gt;
Output:
Enter a word to make it jumbled : live and let live others
Jumbled Word :  vel  toldeisrte aihv len
==========================================
Enter a word to make it jumbled : junkfood
Jumbled Word :  nfukdooj
&lt;/pre&gt;
&lt;hr&gt;
'''Another Logic to create a Jumbled Word'''
&lt;hr&gt;
&lt;pre&gt;
import random
b=input(&quot;Enter a word to make it jumbled : &quot;)

def getJumbledWord1(b):
    l1 = [ b[i] for i in range(0, len(b)) ]
    random.shuffle(l1)
    str1 = ''.join(l1)
    return str1

print(&quot;Jumbled Word : &quot;, getJumbledWord1(b))
&lt;/pre&gt;

====Sample Output:====
&lt;pre&gt;
---- Output1 
Enter a word to make it jumbled : butter
Jumbled Word :  tbture

---- Output2 
Enter a word to make it jumbled : petriotism
Jumbled Word :  pittrosime
&lt;/pre&gt;

=Theory of Evolution=

== What is Evolution ? ==
Evolution is the change in heritable characteristics over successive generations. The theory of evolution explains that DNA, which acts as a carrier of genetic information from one generation to other, tends to change or mutate occasionally. These changes are reflected in next generations to come. This is how life has evolved on earth from bacteria to human beings.&lt;br&gt;
[[File:Evolution.png|500px]]

== Implementation ==
 &lt;p style=&quot;text-align:justify&quot;&gt;
An array representing DNA is stored in a file. As genes are forms of DNA, they contain information to be transferred to forthcoming generations. Assume that information is in the form of bits (in the form of 0s and 1s). A number is picked randomly from 1 to the size of the array. A new parameter has been introduced which decides whether mutation would occur or not. If the value of this new parameter is 1 (It is picked randomly from 1 to 100), then only change is reflected down the generations, otherwise it is not. The pseudo code is as follows :
&lt;/p&gt;
Input an array containing genetic information .
Randomly generate a number (say m) from 1 to length of the array. Randomly generate other number (say p) from 1 to 100.

&lt;pre&gt; 
    if p is equal to 1 then 
        if m is 1 then
          set it to 0
        else
          set it to 1
&lt;/pre&gt;
[[#TOP]]</text>
      <sha1>oyr7w3q051og8nvlz9vv382x7ba9ivx</sha1>
    </revision>
    <revision>
      <id>3739</id>
      <parentid>3738</parentid>
      <timestamp>2018-09-29T02:35:33Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* List Creation */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="30690">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_3 Contributors of this page]
*Week 3 Playlist: https://www.youtube.com/playlist?list=PLc_j0TNIaWxOVx_z9jAM2UB3RqYNXaoEo
=List=
List is a flexible data structure used for storing a group of data separated by comma. The elements in a list need not be of the same data type.

'''Example:'''
       List_1 = [ 1, 2,3] or 
       List_1 = [&quot;coffee&quot;, &quot;Tea&quot;, &quot;Milk&quot;] or
       List_1 = [1,&quot;coffee&quot;, &quot;Tea&quot;, 3, &quot;5&quot;]

==List Creation==
a) A list can be created by simply putting values (separated by comma) between square
 brackets as given below,
&lt;pre&gt;List_1 = [1,&quot;coffee&quot;, &quot;Tea&quot;, 3, &quot;5&quot;] #this creates a list by name List_1 containing
 following items
&lt;/pre&gt;


Or,
(b)A List can be created from scratch and elements can be added 
&lt;pre&gt;
        List_2 = [ ]
        List_2.append(&quot;Kala&quot;)
        List_2.append(&quot;Mala&quot;)
Here we use &quot;append&quot;, which is a function in python that enable us to append or attach an element to a list .
Thus List_2 will now hold [&quot;Kala&quot;,&quot;Mala&quot;]
&lt;/pre&gt;
[[#Top]]

==Operations and Methods to work with List==
&lt;pre&gt;
a = [25,30,50,90,12,13]
b = [100,300,500,200,250]
&lt;/pre&gt;
&lt;hr&gt;
&lt;table border=2&gt;
  &lt;tr&gt;
    &lt;th&gt;&lt;b&gt;Method/&lt;br&gt;Operator&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Function&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Syntax&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Output&lt;/b&gt;&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;len()&lt;/td&gt;
    &lt;td&gt;Find length of a list&lt;/td&gt;
    &lt;td&gt;len(a)&lt;/td&gt;
    &lt;td&gt;6&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;max()&lt;/td&gt;
    &lt;td&gt;Find maximum element from the list&lt;/td&gt;
    &lt;td&gt;max(a)&lt;/td&gt;
    &lt;td&gt;90&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;min()&lt;/td&gt;
    &lt;td&gt;Find minimum element from the list&lt;/td&gt;
    &lt;td&gt;min(a)&lt;/td&gt;
    &lt;td&gt;12&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sum()&lt;/td&gt;
    &lt;td&gt;Returns sum of all elements of the list&lt;/td&gt;
    &lt;td&gt;sum(a)&lt;/td&gt;
    &lt;td&gt;220&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;reverse()&lt;/td&gt;
    &lt;td&gt;Reverses the original list&lt;/td&gt;
    &lt;td&gt;a.reverse()&lt;/td&gt;
    &lt;td&gt;[13, 12, 90, 50, 30, 25]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sort()&lt;/td&gt;
    &lt;td&gt;Sorts the original list in ascending order&lt;/td&gt;
    &lt;td&gt;a.sort()&lt;/td&gt;
    &lt;td&gt;[12, 13, 25, 30, 50, 90]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sorted()&lt;/td&gt;
    &lt;td&gt;Returns the new sorted list &lt;/td&gt;
    &lt;td&gt;sorted(a)&lt;/td&gt;
    &lt;td&gt;[12, 13, 25, 30, 50, 90]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;insert()&lt;/td&gt;
    &lt;td&gt;Insert at a particular index in the list, and shifts remaining elements&lt;/td&gt;
    &lt;td&gt;a.insert(3,3)&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 3, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;append()&lt;/td&gt;
    &lt;td&gt;Adds elements/object to the end of the list&lt;/td&gt;
    &lt;td&gt;a.append(5)&lt;br&gt;a.append([10,20])&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 5]&lt;br&gt;[25, 30, 50, 90, 12, 13, [10, 20]]&lt;br&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;extend()&lt;/td&gt;
    &lt;td&gt;Adds object to the end of the list as elements not as object&lt;/td&gt;
    &lt;td&gt;a.extend([10,20])&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 10, 20]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;*&amp;nbsp;&amp;nbsp;Repeatation&lt;br&gt;operator&lt;/td&gt;
    &lt;td&gt;Repeat the list for n times and returns a new list&lt;/td&gt;
    &lt;td&gt;a*2&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 25, 30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;+ Concatenation&lt;br&gt;operator&lt;/td&gt;
    &lt;td&gt;Concatenates two lists, and returns a new list&lt;/td&gt;
    &lt;td&gt;a+b&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 100, 300, 500, 200, 250]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;index()&lt;/td&gt;
    &lt;td&gt;Finds index of a particular element in the list or not&lt;/td&gt;
    &lt;td&gt;a.index(25)&lt;br&gt;a.index(0)&lt;br&gt;&lt;/td&gt;
    &lt;td&gt;0&lt;br&gt;&lt;br&gt;ValueError: 0 is not in list&lt;br&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;in operator&lt;/td&gt;
    &lt;td&gt;Finds whether a particular element is in the list or not, returns boolean&lt;/td&gt;
    &lt;td&gt;25 in a&lt;/td&gt;
    &lt;td&gt;True&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;not in operator&lt;/td&gt;
    &lt;td&gt;Checks if element is not available in list, returns boolean&lt;/td&gt;
    &lt;td&gt;25 not in a&lt;/td&gt;
    &lt;td&gt;False&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;count()&lt;/td&gt;
    &lt;td&gt;Counts the number of occurence of an element in the list&lt;/td&gt;
    &lt;td&gt;a.count(25)&lt;/td&gt;
    &lt;td&gt;1&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;remove()&lt;/td&gt;
    &lt;td&gt;Removes an element from the list&lt;/td&gt;
    &lt;td&gt;a.remove(25)&lt;/td&gt;
    &lt;td&gt; [30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;pop()&lt;/td&gt;
    &lt;td&gt;Delete and return item at index 0&lt;/td&gt;
    &lt;td&gt;a.pop(0)&lt;/td&gt;
    &lt;td&gt;25 , a will be [30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;del&lt;/td&gt;
    &lt;td&gt;Deletes item at a particular index from the list&lt;/td&gt;
    &lt;td&gt;del a[0]&lt;/td&gt;
    &lt;td&gt;[30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;all()&lt;/td&gt;
&lt;td&gt;Returns True, if all items in list are True or it is an empty list&lt;/td&gt;
&lt;td&gt;all([True, True, True])
all([])
&lt;/td&gt;
&lt;td&gt;True&lt;br&gt;
True&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;any()&lt;/td&gt;
&lt;td&gt;Returns True, if any item in list is True else return False&lt;/td&gt;
&lt;td&gt;any([True, True, True])&lt;br&gt;
any([True, False, True])&lt;br&gt;
any([])&lt;/td&gt;
&lt;td&gt;True&lt;br&gt;False&lt;br&gt;False&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;

==Printing the List==
=== Print whole list ===
A list can be printed simply or using a ''for / while'' loop 

 print(List_2)     # To print the entire list
This code will print      
 ['Kala','Mala']     

===Print element at a particular index===
&lt;pre&gt;
Using index position
    List_2[0]     # prints 'Kala' ,i.e,the value at index position 0.
    List_2[1]     # prints 'Mala'.
&lt;/pre&gt;
=== Without using index position ===
&lt;pre&gt;
for item in List_2:   # here item is a variable used to access elements in list.
       print(item)
   This code snippet prints 
    Kala
    Mala
&lt;/pre&gt;
[[#TOP]]

==Search for a particular element in list==
Elements in a list can be searched by one of the two ways:
=== using index() function===
&lt;pre&gt;
ages1 = [11,23,12,23,45]

#if element is available in the list, index() returns the index value on which, the element is present.
print(ages1.index(45))#Output: 4

#if element is not available in the list, index() returns ''ValueError''
print(ages1.index(0))#Output: ValueError:
&lt;/pre&gt;

In programming, if such error occurs, program gets terminated. It can be solved using exception handling.
e.g.
&lt;pre&gt;
ages1 = [11,23,12,23,45]

try:
    print(ages1.index(0))
except ValueError:
    print(&quot;Exception has occured&quot;)    
    print(&quot;Element is not found in the list&quot;)

&lt;/pre&gt;
&lt;pre&gt;
'''Output: 
Exception has occured
Element is not found in the list
'''&lt;/pre&gt;
[[#TOP]]

=== using 'in' operator===
''in'' operator is used to check whether a particular element is available in the list or not.e.g.

&lt;pre&gt;
ages1 = [11,23,12,23,45]
no=11

if no in ages1:
    print(&quot;no is there in the list&quot;)
else:    
    print(&quot;no is NOT there in the list&quot;)
&lt;/pre&gt;
&lt;pre&gt;
#Output: no is there in the list
&lt;/pre&gt;


'''Number is not there in the list'''
&lt;pre&gt;
ages1 = [11,23,12,23,45]
no=15

if no in ages1:
    print(&quot;no is there in the list&quot;)
else:    
    print(&quot;no is NOT there in the list&quot;)
&lt;/pre&gt;
&lt;pre&gt;
Output: no is NOT there in the list
&lt;/pre&gt;
[[#TOP]]

==Updating the List==
The lists can be updated using ''append'' or ''insert'' function.  Append adds the element to the end of the list and Insert adds the element in the specified position.
&lt;pre&gt;
   # add the element 'Sheela' to the end of the list.
   List_2.append(&quot;Sheela&quot;)    
   print (List_2) will output 
   ['Kala', 'Mala', 'Sheela']
&lt;/pre&gt;
   &lt;pre&gt;
# add the element &quot;Bala&quot; in the list at the index 1.
   List_2.insert(1,&quot;Bala&quot;)    
   print (List_2) will output 
   ['Kala', 'Bala','Mala', 'Sheela']
&lt;/pre&gt;

=== Extend the list by adding elements of other list at end using extend()===
&lt;pre&gt;
ages = [11,23,12,23,45]
ages.extend([57,58])
print(ages)
&lt;/pre&gt;

&lt;pre&gt;
#Output: [11, 23, 12, 23, 45, 57, 58]
&lt;/pre&gt;

==== Difference between ''append and extend'' ====
Difference between append and extend can be easily understood, by the following example.

&lt;pre&gt;
appendlist = [11,23,12,23,45]
appendlist.append([57,58])

extendlist= [11,23,12,23,45]
extendlist.extend([57,58])
&lt;/pre&gt;

&lt;pre&gt;
'''Output:
[11, 23, 12, 23, 45, [57, 58]]
[11, 23, 12, 23, 45, 57, 58]'''
&lt;/pre&gt;

[[#TOP]]

==Basic Operations on List==
===Frequency of Occurrence===
list.count(object) will return the number of times the object occur in the list.
  '''Example'''
    ages = [11,23,12,23,45,43,22,24,23]
    ages.count(23) will return
    3
    ages.count(100) will return
    0

===Length of the List===
len(list) will return the length of the list ie. the number of objects in the list.
  '''Example'''
&lt;pre&gt;
    ages = [11,23,12,23,45,43,22,24,23]
    len(ages) # Output: 9
&lt;/pre&gt;

To print the objects in the list either use ''for item in list'' or ''for index in range(len(list))''
&lt;pre&gt;
    for item in ages:       
        print (item)  
        (OR)
    for index in range(len(ages)) :
        print (ages[index])
&lt;/pre&gt;

===Sort the List===
list.sort() will sort the list in ascending order
  '''Example'''
    ages = [11,23,12,23,45,43,22,24,23]
    ages.sort() 
    print (ages) 
    [11, 12, 22, 23, 23, 23, 24, 43, 45]

[[#TOP]]

===Sort the List using sorted() function===
sorted(list1) will sort the list and return a new list, it doesn't modify the original list
&lt;br&gt;'''Example: Sort in ascending order'''
&lt;pre&gt;
ages = [11,23,12,23,45,43,22,24,23]
newList=sorted(ages)
print(newList)

#Output: [11, 12, 22, 23, 23, 23, 24, 43, 45]
&lt;/pre&gt;

&lt;br&gt;'''Example: Sort in descending order'''
&lt;pre&gt;
ages = [11,23,12,23,45,43,22,24,23]
newList=sorted(ages,reverse=True)
print(newList)

#Output: [45, 43, 24, 23, 23, 23, 22, 12, 11]
&lt;/pre&gt;

===Reverse the List===
list.reverse() will reverse the original list
  '''Example'''
    ages = [11, 12, 22, 23, 23, 23, 24, 43, 45]
    ages.reverse()
    print (ages)
    [45, 43, 24, 23, 23, 23, 22, 12, 11]

Both sort() and reverse() list operation will work on numeric and alphanumeric data list.

A special use of the reverse() function is to descend a list that is sorted in ascending order.

  '''Example'''
&lt;pre&gt;
ages = [11, 12, 22, 23, 23, 23, 24, 43, 45]
ages.sort()
print(ages)
ages.reverse()
print(ages)
&lt;/pre&gt;

===Slicing===
Used to retrieve an object or objects in a range as a list  
  '''Example'''

Use ''list[index]'' to retrieve the object at the given index
&lt;pre&gt;
In [1]: student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
In [2]: student[3]     #Object at index 3.  Remember index starts at 0
Out[2]: 'Geetha'      
&lt;/pre&gt;

Use ''list[start_index : end_index + 1]'' to retrieve objects from the start_index to end_index 
&lt;pre&gt;
In [3]: student[2:4]     # Objects from index 2 to 3 as List. Note the [ and ]
Out[3]: ['Vijay', 'Geetha']   
&lt;/pre&gt;

Use ''list[:]'' to retrieve objects from the starting of the list to the end of the list. 
The default start value will be the starting index of the list (i.e. 0) and the default end value
will be the length of the list 
&lt;pre&gt;
In [4]: student[:]        # prints the entire list
Out[4]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma', 'Janani']
&lt;/pre&gt;
&lt;pre&gt;
In [5]: student[:5]       # prints the objects from the start of the list upto object at index 4
Out[5]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran']
&lt;/pre&gt;
&lt;pre&gt;
In [6]: student[2:]       # prints the objects from index 2 upto the end of the list
Out[6]: ['Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma', 'Janani']
&lt;/pre&gt;

Negative index too is available in Python. It starts from last element of the list. i.e.
&lt;pre&gt;
In [7]:student[-1]        #prints last index of list
Out[7]: 'Janani'
&lt;/pre&gt;
&lt;pre&gt;
In [8]:student[-1:-8]     #prints empty list
Out[8]: []
&lt;/pre&gt;
&lt;pre&gt;
In [9]:student[-8:-1]     #prints -8th index to -1st index elements
Out[9]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma']
&lt;/pre&gt;

[[#TOP]]

===Removing Item from list ===
----

Is used to remove a specific item from the list.

'''Example:'''
 
Use list.remove(entry/value)  Or   del list[index]    Or list.pop(index)
&lt;pre&gt;
student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
student.remove(&quot;Arun&quot;)   #This will delete item &quot;Arun&quot;
         Or    
del student[0]           # This will delete item at index 0
         Or
student.pop(0)         # This will delete and return item at index 0
print(student)    
Output: &quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
&lt;/pre&gt;

[[#TOP]]

===Delete list ===
----
Used to delete complete list

'''Example'''

Use del &lt;list name&gt;
&lt;pre&gt;
student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
del student&lt;/pre&gt;

===Concatenation of two lists===
----
''+'' is the concatenation operator which is used concatenate two lists. 
&lt;pre&gt;
ages1 = [11,23,12,23,45]
ages2 = [25, 24, 43, 47]
age=ages1+ages2
print(age)
#Output: [11, 23, 12, 23, 45, 25, 24, 43, 47]
&lt;/pre&gt;

===Repeatation of a list ===
----
''*'' is the operator to repeat a particular list.
&lt;pre&gt;
ages1 = [11,23,12,23,45]
age=ages1*5 #ages1 list is repeated 5 times and stroed in ''age'' list
print(age)

#Output: [11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45]
&lt;/pre&gt;

=== all and any for List===
all() and any() are special functions to check whether all elements in iterable is ''True'' or any element is ''True''
&lt;ol&gt;
&lt;li&gt;If all elements in a list are ''True'', '''all()''' will return ''True''&lt;/li&gt;
&lt;li&gt;If iterable is ''empty'', '''all()''' will return ''True''&lt;/li&gt;
&lt;li&gt;If iterable contains at least one ''True'', '''any()''' will return ''True''&lt;/li&gt;
&lt;li&gt;If iterable is ''empty'', '''any()''' will return ''False''&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;
lsit=[True, True, True, True]
print(all(lsit))#Output: True
print(any(lsit))#Output: True

lsit1=[True, False, True, True]
print(all(lsit1))#Output: False
print(any(lsit1))#Output: True

lsit2=[False,False,False]
print(all(lsit2))#Output: False
print(any(lsit2))#Output: False

lsit3=[]
print(all(lsit3))#Output: True
print(any(lsit3))#Output: False
&lt;/pre&gt;

==Conditional Statements==
&lt;pre&gt;Conditionals are used to check the condition and change the flow of the program 
accordingly. They are realized in programming languages through if statement. The 
syntax is as follows :
&lt;pre&gt;
         if condition : 
            statement
&lt;/pre&gt;
    '''Note:''' Do not forget indentation (inserting space/tab) in the line after the
 if condition.
    
    In case you want to execute a set of statements when a condition is true and another

set of statement when the condition is false.
&lt;pre&gt;
         if condition : 
            statement 1
         else :
            statement 2
&lt;/pre&gt;

&lt;pre&gt;    
    Multiple if-else statements can be written as follows:
         if condition_1 : 
            statement 1
         elif condition_2 : # 'elif' is short for 'else if'
            statement 2
         elif condition_3 :
            statement 3
        .
        .
         else :
            final statement
&lt;/pre&gt;

[[#TOP]]

=Loops and Conditionals : Fizzbuzz=
====Loops====
Loops are used to execute a set of repetitive statements. They are realised
through 'while' and 'for' loops in programming languages. The syntax of 'for' loop is 
as follows :
&lt;pre&gt;
for LOOPVARIABLE in SEQUENCE: 
            STATEMENTS&lt;/pre&gt;

    '''e.g.''' to print all the data from a list we can write:
&lt;pre&gt;
for item in list_name:
      print(item)&lt;/pre&gt;
    OR
&lt;pre&gt;
for index in range(len(list_name)):
      print(list_name[index])
 &lt;/pre&gt;   
    The syntax for while loop is as follows :
&lt;pre&gt;    
while BOOLEANEXPRESSION: 
     STATEMENTS
     INCREMENT/DECREMENT
&lt;/pre&gt;    
    '''e.g.''' if we want to print all numbers from 1 to 10
&lt;pre&gt;
i=1
while i&lt;=10 :
    print(i,&quot; &quot;)
    i=i+1
    &lt;/pre&gt;
 
'while' loop has indefinite iteration (run-time unknown). So, there must be loop,  break statement in it.
 Whereas 'for' loop is definite in nature (i.e. known or predictable span).&lt;br&gt;

&lt;b&gt;NOTE: Python doesn't have anything like do-while loop.&lt;/b&gt;

[[#TOP]]

==Implementation==
Here, we try to demonstrate the concept of loops and conditionals through a game called Fizzbuzz. The rules are as follows :&lt;br/&gt;
[[File:fizzBuzz.gif]]

• if input number is a multiple of ’3’ print ”Fizz”
&lt;br/&gt;
• if input number is a multiple of ’5’ print ”Buzz”
&lt;br/&gt;
• if input number is a multiple of both '3' and ’5’ print ”FizzBuzz”
&lt;br/&gt;
The pseudo code is as follows :
&lt;pre&gt;
   If input no % 3 == 0 and  input no % 5 == 0 : 
       print ”Fizzbuzz”
   else if input no % 3 == 0 : 
       print ”Fizz”
   else if input no % 5 == 0 : 
       print ”Buzz”
   else :
       print the input no
&lt;/pre&gt;
 &lt;p style=&quot;text-align:justify&quot;&gt;
The order of statements execution matters to get the desired output. The highest priority condition should be first followed by other. In fizzbuzz programming, first checking should be done for both divisibility of 3 and 5. If condition not satisfied only then it should check individually for 3 or 5. So carefully choosing the order is crucial for better programming.
Note: There is some effect of present condition statements chosen on next conditions statements. That is why in first attempt fizzbuzz programming got struck.&lt;/p&gt;

Example: 
&lt;pre&gt;
#Code to achieve the above requirement in python3.
i = int(input(&quot;Enter the number&quot;)) 
if i%3 == 0 and i%5 == 0: print(i,&quot;FizzBuzz&quot;)  
elif i%5 == 0: print(i,&quot;Buzz&quot;)
elif i%3 == 0: print(i,&quot;Fizz&quot;)
else: print(i)
&lt;/pre&gt;
Lets put the same into a loop for a range given by the user.
&lt;pre&gt;
def fizzbuzzgame(start,stop):
    for i in range(start,stop+1):
        if i%3 == 0 and i%5 == 0:
            print(i,&quot;FizzBuzz&quot;)
        elif i%5 == 0:
            print(i,&quot;Buzz&quot;)
        elif i%3 == 0:
            print(i,&quot;Fizz&quot;)
        else: print(i)

fizzbuzzgame(50,100)
&lt;/pre&gt;
&lt;pre&gt;
#Output:
1235
Buzz
======================================
555
Fizzbuzz
======================================
1235
Buzz
======================================
999
Fizz
&lt;/pre&gt;

=== Fizz Buzz game in Interactive mode with Score ===
'''By Ms. Ami Tusharkant Choksi'''
&lt;pre&gt;
def fizzbuzzgame(i):
        if i%3 == 0 and i%5 == 0:
            print(i,&quot;FizzBuzz&quot;)
            return(&quot;fzbz&quot;)
        elif i%5 == 0:
            print(i,&quot;Buzz&quot;)
            return(&quot;bz&quot;)
        elif i%3 == 0:
            print(i,&quot;Fizz&quot;)
            return(&quot;fz&quot;)
        else:
            print(i)
            return(&quot;no&quot;)

ch = 'y'
fizzbuzz=0
fizz=0
buzz=0
nothing=0
print(&quot;&quot;&quot;

 /$$$$$$$$/$$                  /$$$$$$$                            
| $$_____|__/                 | $$__  $$                           
| $$      /$$/$$$$$$$$/$$$$$$$| $$  \ $$/$$   /$$/$$$$$$$$/$$$$$$$$
| $$$$$  | $|____ /$$|____ /$$| $$$$$$$| $$  | $|____ /$$|____ /$$/
| $$__/  | $$  /$$$$/   /$$$$/| $$__  $| $$  | $$  /$$$$/   /$$$$/ 
| $$     | $$ /$$__/   /$$__/ | $$  \ $| $$  | $$ /$$__/   /$$__/  
| $$     | $$/$$$$$$$$/$$$$$$$| $$$$$$$|  $$$$$$//$$$$$$$$/$$$$$$$$
|__/     |__|________|________|_______/ \______/|________|________/
                                                                  
&quot;&quot;&quot;)   
print('''

  /$$$$$$                                
 /$$__  $$                               
| $$  \__/ /$$$$$$ /$$$$$$/$$$$  /$$$$$$ 
| $$ /$$$$|____  $| $$_  $$_  $$/$$__  $$
| $$|_  $$ /$$$$$$| $$ \ $$ \ $| $$$$$$$$
| $$  \ $$/$$__  $| $$ | $$ | $| $$_____/
|  $$$$$$|  $$$$$$| $$ | $$ | $|  $$$$$$$
 \______/ \_______|__/ |__/ |__/\_______/
                                     
''')

while(ch == 'y'):
    n=int(input(&quot;Enter a Number : &quot;))
    winLoose=fizzbuzzgame(n)
    if(winLoose == &quot;fz&quot;):
        fizz+=1
    elif(winLoose == &quot;bz&quot;):
        buzz+=1
    elif(winLoose == &quot;fzbz&quot;):
        fizzbuzz+=1
    ch=input(&quot;Do you want to continue playing the game : (y/n)&quot;)
    if(ch=='n'):
        print('Congratulations, your score is\n FizzBuzz:%d\nFizz:%d\nBuzz:%d' %
(fizzbuzz,fizz,buzz))
    
'''Sample Output:

 /$$$$$$$$/$$                  /$$$$$$$                            
| $$_____|__/                 | $$__  $$                           
| $$      /$$/$$$$$$$$/$$$$$$$| $$  \ $$/$$   /$$/$$$$$$$$/$$$$$$$$
| $$$$$  | $|____ /$$|____ /$$| $$$$$$$| $$  | $|____ /$$|____ /$$/
| $$__/  | $$  /$$$$/   /$$$$/| $$__  $| $$  | $$  /$$$$/   /$$$$/ 
| $$     | $$ /$$__/   /$$__/ | $$  \ $| $$  | $$ /$$__/   /$$__/  
| $$     | $$/$$$$$$$$/$$$$$$$| $$$$$$$|  $$$$$$//$$$$$$$$/$$$$$$$$
|__/     |__|________|________|_______/ \______/|________|________/
                                                                                                                                   

  /$$$$$$                                
 /$$__  $$                               
| $$  \__/ /$$$$$$ /$$$$$$/$$$$  /$$$$$$ 
| $$ /$$$$|____  $| $$_  $$_  $$/$$__  $$
| $$|_  $$ /$$$$$$| $$ \ $$ \ $| $$$$$$$$
| $$  \ $$/$$__  $| $$ | $$ | $| $$_____/
|  $$$$$$|  $$$$$$| $$ | $$ | $|  $$$$$$$
 \______/ \_______|__/ |__/ |__/\_______/
                                         

Enter a Number : 666
666 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 777
777 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 555
555 FizzBuzz
Do you want to continue playing the game : (y/n)y
Enter a Number : 1
1
Do you want to continue playing the game : (y/n)y
Enter a Number : 789
789 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 25
25 Buzz
Do you want to continue playing the game : (y/n)n
Congratulations, your score is

FizzBuzz:1
Fizz:3
Buzz:1

&lt;/pre&gt;

=Crowd Computing: Just Estimate=
==Wisdom of Crowds==
 &lt;p style=&quot;text-align:justify&quot;&gt;
The concept of ’Wisdom of Crowds’ was proposed by Francis Galton. A weight-judging competition was carried on at the annual show of the West of England Fat Stock and Poultry Exhibition recently held at Plymouth, A fat ox having been selected, competitors bought stamped and numbered cards, each, on which to inscribe their respective names, addresses, and estimates of what the ox would weigh after it had been slaughtered. Those who guessed most successfully received prizes. About 8oo tickets were issued to the par- ticipants. The middlemost estimate of all the estimates recorded was 1207 lbs and the actual weight of the ox was 1198 lbs.&lt;/p&gt;

==Our Experiment==
 &lt;p style=&quot;text-align:justify&quot;&gt;
The crowd had to guess the number of candies/gems in a jar. Around 75 people participated in the experiment. The actual number of gems in the jar were 375. The median of all estimates came out to be 300 and the mean of all the estimates came out to be around 396. Median underestimated and mean overestimated the actual value. So according to recent studies, Trimmed mean must be used as an aggregate measure to estimate where Wisdom of Crowds is involved.
&lt;/p&gt;
[[File:Gemsjar.jpg|center|200px|caption]]

===Trimmed Mean===
 &lt;p style=&quot;text-align:justify&quot;&gt;
In these kinds of experiments, 10% trimmed mean is usually followed. For calculating 10% trimmed mean, remove 10% smallest and 10% largest values from the sample. Calculate the mean of the sample obtained. In the above experiment, the trimmed mean came out to be around 351 which is very close to the actual value.&lt;/p&gt;

==Implementation==
Here, we try to demonstrate the concept of trimmed mean through crowd computing.
&lt;ol&gt;
&lt;li&gt; Input a list of estimates done by the crowd .&lt;/li&gt;
&lt;li&gt; Sort the list.&lt;/li&gt;
&lt;li&gt; Remove the 10% smallest values.&lt;/li&gt;
&lt;li&gt; Remove the 10% largest values.
&lt;li&gt; Calculate the mean of the new list obtained .&lt;/li&gt;&lt;/ol&gt;&lt;hr&gt;

==Data of Experiment==       
    Estimates =[1000,1010,1786,2000,1500,1500,100,120,150,150,150,170,175,180,197,200,200,200,200,200,200,220,220,220,220,234,250,250,250,250,250,250,250,250,250,263,270,275,275,286,300,
                300,300,300,300,300,300,300,320,350,350,350,400, 400,400,400,400,450,467,500,500,500,500,500,500,500,550,550,600,600,600,650,700,700,720]

    '''CODE:'''
&lt;pre&gt;
Estimates = [1000,1010,1786,2000,1500,1500,100,120,150,150,150,170,175,180,197,200,200,200,200,200,200,220,220,220,220,234,250,250,250,250,250,250,250,250,250,263,270,275,275,286,300,                300,300,300,300,300,300,300,320,350,350,350,400,400,400,400,400,450,467,500,500,500,500,500,500,500,550,550,600,600,600,650,700,700,720]
Estimates.sort()
offset = int(0.10*len(Estimates))
for i in range(offset):
       del Estimates[0]
       del Estimates[-1]
Sum = 0    
for i in range(len(Estimates)):
       Sum += Estimates[i]
Mean_Value = Sum/len(Estimates)
print(&quot;Mean : &quot;, int(Mean_Value))
#Output:
Mean :  351
&lt;/pre&gt;
&lt;hr&gt;
==Trimmed Mean for the above example== 
&lt;h3&gt;Using scipy library&lt;/h3&gt;
&lt;pre&gt;
#import scipy to use the method of trim_mean
from scipy import stats
trimMean = stats.trim_mean(Estimates, 0.1) # Trim 10% at both ends
print(&quot;Trimmed Mean : &quot;,trimMean)
#Output:
Trimmed Mean :  335.1020408163265
&lt;/pre&gt;

&lt;h3&gt;Without using scipy library&lt;/h3&gt;
&lt;pre&gt;
#Trimmed mean with 10%
p=10/100
#sorted data
data=[2, 4, 6, 7, 11, 21, 81, 90, 105, 121]
n = len(data)
#Remove elements from both end
rem=int(n*p)
newData = data[rem:-rem]
mean = 0
for i in newData:
    mean += i
mean = int(mean/len(newData))
print(&quot;Trimmed mean : &quot;,mean)
#Output: Trimmed mean :  40
&lt;/pre&gt;
[[#Top]]

=Jumbled_Words Permutations: Jumbled Words=
==What are Permutations ?==
A permutation also called ordering of selected number of elements from a list denoted by nPr here we are choosing all elements of a list and so n=r&lt;br&gt;
nPr=n!/(n-r)!&lt;br&gt; as n=r
nPn=n!&lt;br&gt; which gives all possible arrangement of elements present in a list.

 For example, permutations of list [1,2,3] are [1,2,3], [1,3,2], [2,1,3], [2,3,1], 
[3,1,2], and [3,2,1]. 
The number of permutations of a list of elements nPn is given by n!. For example, there are 2! = 2 x 1 = 2 permutations of [1,2], namely [1,2] and [2,1], and 3! = 3 x 2 x 1 = 6 permutations of [1,2,3], as mentioned above.&lt;br/&gt;
[[File:Permutations.jpg]]

==Implementation==
 &lt;p style=&quot;text-align:justify&quot;&gt;
Here, we try to demonstrate the concept of permutations through jumbled words. It is a two player game in which one person presents the other person a different permutation of the word in his mind. The other person has to guess the right word. If he guesses, the he wins otherwise he loses.&lt;/p&gt;
 Input an list of words.
 Randomly pick a word from the list of words .
 Shuffle this word and present it to the other player.
 if word guesses by the player is same as the one picked from list of w
     player wins
 else
     player loses

ALTERNATE CODE TO GENERATE THIS GAME:
&lt;pre&gt;
import random
p1=input(&quot;enter player 1 name:&quot;)
p2=input(&quot;enter player 2 name:&quot;)
l=[&quot;rainbow&quot;,&quot;computer&quot;,&quot;robot&quot;,&quot;butter&quot;,&quot;vegetable&quot;,&quot;science&quot;,&quot;correct&quot;]
c1=c2=a1=a2=f1=f2=0
k=1
i=3
def play():
    n=random.choice(l)        ##n=chooses a word from list l
    l1=[]
    for j in n:
       l1.append(j)      ##creates a list for word in n
    for t in range(len(l1)):
       p=random.choice(l1)     ##this randomly displays letters in the list
       print(p)
       l1.remove(p)          ##to avoid the repetition of a letter
    s=input(&quot;enter the word:&quot;)
    if(s==n):
        print(&quot;correct&quot;)
        return 1
    else:
        print(&quot;not correct&quot;)
        print(&quot;answer is&quot;,n)
        return 0
def stat():
     print(&quot;player 1:&quot;)
     print(&quot;score:&quot;,c1)
     print(&quot;answered:&quot;,a1)
     print(&quot;failed:&quot;,f1)
     print(&quot;.............&quot;)
     print(&quot;player 2:&quot;)
     print(&quot;score:&quot;,c2)
     print(&quot;answered:&quot;,a2)
     print(&quot;failed&quot;,f2)
     if(c1&gt;c2):
         print(p1,&quot; won over &quot;,p2)
     elif(c1==c2):
         print(&quot;draw game&quot;)
     else:
         print(p2,&quot; won over &quot;,p1) 
while(i!=4):
      if(i==3):
         if(k==1):
             print(&quot;player 1 turn&quot;)
             print(&quot;your jumbled word is:&quot;)
             k=k+1
             m=play()
             if(m==1):      ##if guessed answer is correct,then score and no.of answered count will be increased
                c1+=1
                a1+=1
             else:
                f1+=1       ##else count of no.of failed to answered will be incremented
         else:
             print(&quot;player 2 turn&quot;)
             print(&quot;your jumbled word is:&quot;)
             k=k-1
             m=play()
             if(m==1):
                c2=c2+1
                a2=a2+1
             else:
                f2=f2+1
       if(i==2):
             print(&quot;present status&quot;)
             stat()
       i=int(input(&quot;enter your choice  1.stop 2.status 3.continue&quot;))
       if(i==1):
             stat()
             i=i+3
&lt;/pre&gt;
&lt;hr&gt;
=== JumbledWord Simple Logic, In Short ===
[[File:jumbledWord.gif]]
---
&lt;hr&gt;
'''Logic to create a Jumbled Word'''
&lt;hr&gt;
&lt;pre&gt;
#Get Jumbled Word and print it Horizontally
import random

def getJumbledWord(b):
    jumble=''
    l1 = [ b[i] for i in range(0, len(b)) ]
    for t in range(len(l1)):
       p=random.choice(l1)  #this randomly gets letters from the list      
       jumble=jumble+p       
       l1.remove(p)
    return jumble

b=input(&quot;Enter a word to make it jumbled : &quot;)
print(&quot;Jumbled Word : &quot;, getJumbledWord(b))
&lt;/pre&gt;
&lt;pre&gt;
Output:
Enter a word to make it jumbled : live and let live others
Jumbled Word :  vel  toldeisrte aihv len
==========================================
Enter a word to make it jumbled : junkfood
Jumbled Word :  nfukdooj
&lt;/pre&gt;
&lt;hr&gt;
'''Another Logic to create a Jumbled Word'''
&lt;hr&gt;
&lt;pre&gt;
import random
b=input(&quot;Enter a word to make it jumbled : &quot;)

def getJumbledWord1(b):
    l1 = [ b[i] for i in range(0, len(b)) ]
    random.shuffle(l1)
    str1 = ''.join(l1)
    return str1

print(&quot;Jumbled Word : &quot;, getJumbledWord1(b))
&lt;/pre&gt;

====Sample Output:====
&lt;pre&gt;
---- Output1 
Enter a word to make it jumbled : butter
Jumbled Word :  tbture

---- Output2 
Enter a word to make it jumbled : petriotism
Jumbled Word :  pittrosime
&lt;/pre&gt;

=Theory of Evolution=

== What is Evolution ? ==
Evolution is the change in heritable characteristics over successive generations. The theory of evolution explains that DNA, which acts as a carrier of genetic information from one generation to other, tends to change or mutate occasionally. These changes are reflected in next generations to come. This is how life has evolved on earth from bacteria to human beings.&lt;br&gt;
[[File:Evolution.png|500px]]

== Implementation ==
 &lt;p style=&quot;text-align:justify&quot;&gt;
An array representing DNA is stored in a file. As genes are forms of DNA, they contain information to be transferred to forthcoming generations. Assume that information is in the form of bits (in the form of 0s and 1s). A number is picked randomly from 1 to the size of the array. A new parameter has been introduced which decides whether mutation would occur or not. If the value of this new parameter is 1 (It is picked randomly from 1 to 100), then only change is reflected down the generations, otherwise it is not. The pseudo code is as follows :
&lt;/p&gt;
Input an array containing genetic information .
Randomly generate a number (say m) from 1 to length of the array. Randomly generate other number (say p) from 1 to 100.

&lt;pre&gt; 
    if p is equal to 1 then 
        if m is 1 then
          set it to 0
        else
          set it to 1
&lt;/pre&gt;
[[#TOP]]</text>
      <sha1>e9enp7ribeoiyqsu59w3mv5enpi9ih0</sha1>
    </revision>
    <revision>
      <id>3740</id>
      <parentid>3739</parentid>
      <timestamp>2018-09-29T02:36:24Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* List Creation */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="30702">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_3 Contributors of this page]
*Week 3 Playlist: https://www.youtube.com/playlist?list=PLc_j0TNIaWxOVx_z9jAM2UB3RqYNXaoEo
=List=
List is a flexible data structure used for storing a group of data separated by comma. The elements in a list need not be of the same data type.

'''Example:'''
       List_1 = [ 1, 2,3] or 
       List_1 = [&quot;coffee&quot;, &quot;Tea&quot;, &quot;Milk&quot;] or
       List_1 = [1,&quot;coffee&quot;, &quot;Tea&quot;, 3, &quot;5&quot;]

==List Creation==
a) A list can be created by simply putting values (separated by comma) between square
 brackets as given below,
&lt;pre&gt;List_1 = [1,&quot;coffee&quot;, &quot;Tea&quot;, 3, &quot;5&quot;] #this creates a list by name List_1 containing
 following items
&lt;/pre&gt;


Or,
(b)A List can be created from scratch and elements can be added 
&lt;pre&gt;
        List_2 = [ ]
        List_2.append(&quot;Kala&quot;)
        List_2.append(&quot;Mala&quot;)
&lt;/pre&gt;
Here we use &quot;append&quot;, which is a function in python that enable us to append or attach an element to a list .
&lt;pre&gt;Thus List_2 will now hold [&quot;Kala&quot;,&quot;Mala&quot;]&lt;/pre&gt;

[[#Top]]

==Operations and Methods to work with List==
&lt;pre&gt;
a = [25,30,50,90,12,13]
b = [100,300,500,200,250]
&lt;/pre&gt;
&lt;hr&gt;
&lt;table border=2&gt;
  &lt;tr&gt;
    &lt;th&gt;&lt;b&gt;Method/&lt;br&gt;Operator&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Function&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Syntax&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Output&lt;/b&gt;&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;len()&lt;/td&gt;
    &lt;td&gt;Find length of a list&lt;/td&gt;
    &lt;td&gt;len(a)&lt;/td&gt;
    &lt;td&gt;6&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;max()&lt;/td&gt;
    &lt;td&gt;Find maximum element from the list&lt;/td&gt;
    &lt;td&gt;max(a)&lt;/td&gt;
    &lt;td&gt;90&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;min()&lt;/td&gt;
    &lt;td&gt;Find minimum element from the list&lt;/td&gt;
    &lt;td&gt;min(a)&lt;/td&gt;
    &lt;td&gt;12&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sum()&lt;/td&gt;
    &lt;td&gt;Returns sum of all elements of the list&lt;/td&gt;
    &lt;td&gt;sum(a)&lt;/td&gt;
    &lt;td&gt;220&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;reverse()&lt;/td&gt;
    &lt;td&gt;Reverses the original list&lt;/td&gt;
    &lt;td&gt;a.reverse()&lt;/td&gt;
    &lt;td&gt;[13, 12, 90, 50, 30, 25]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sort()&lt;/td&gt;
    &lt;td&gt;Sorts the original list in ascending order&lt;/td&gt;
    &lt;td&gt;a.sort()&lt;/td&gt;
    &lt;td&gt;[12, 13, 25, 30, 50, 90]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sorted()&lt;/td&gt;
    &lt;td&gt;Returns the new sorted list &lt;/td&gt;
    &lt;td&gt;sorted(a)&lt;/td&gt;
    &lt;td&gt;[12, 13, 25, 30, 50, 90]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;insert()&lt;/td&gt;
    &lt;td&gt;Insert at a particular index in the list, and shifts remaining elements&lt;/td&gt;
    &lt;td&gt;a.insert(3,3)&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 3, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;append()&lt;/td&gt;
    &lt;td&gt;Adds elements/object to the end of the list&lt;/td&gt;
    &lt;td&gt;a.append(5)&lt;br&gt;a.append([10,20])&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 5]&lt;br&gt;[25, 30, 50, 90, 12, 13, [10, 20]]&lt;br&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;extend()&lt;/td&gt;
    &lt;td&gt;Adds object to the end of the list as elements not as object&lt;/td&gt;
    &lt;td&gt;a.extend([10,20])&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 10, 20]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;*&amp;nbsp;&amp;nbsp;Repeatation&lt;br&gt;operator&lt;/td&gt;
    &lt;td&gt;Repeat the list for n times and returns a new list&lt;/td&gt;
    &lt;td&gt;a*2&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 25, 30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;+ Concatenation&lt;br&gt;operator&lt;/td&gt;
    &lt;td&gt;Concatenates two lists, and returns a new list&lt;/td&gt;
    &lt;td&gt;a+b&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 100, 300, 500, 200, 250]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;index()&lt;/td&gt;
    &lt;td&gt;Finds index of a particular element in the list or not&lt;/td&gt;
    &lt;td&gt;a.index(25)&lt;br&gt;a.index(0)&lt;br&gt;&lt;/td&gt;
    &lt;td&gt;0&lt;br&gt;&lt;br&gt;ValueError: 0 is not in list&lt;br&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;in operator&lt;/td&gt;
    &lt;td&gt;Finds whether a particular element is in the list or not, returns boolean&lt;/td&gt;
    &lt;td&gt;25 in a&lt;/td&gt;
    &lt;td&gt;True&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;not in operator&lt;/td&gt;
    &lt;td&gt;Checks if element is not available in list, returns boolean&lt;/td&gt;
    &lt;td&gt;25 not in a&lt;/td&gt;
    &lt;td&gt;False&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;count()&lt;/td&gt;
    &lt;td&gt;Counts the number of occurence of an element in the list&lt;/td&gt;
    &lt;td&gt;a.count(25)&lt;/td&gt;
    &lt;td&gt;1&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;remove()&lt;/td&gt;
    &lt;td&gt;Removes an element from the list&lt;/td&gt;
    &lt;td&gt;a.remove(25)&lt;/td&gt;
    &lt;td&gt; [30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;pop()&lt;/td&gt;
    &lt;td&gt;Delete and return item at index 0&lt;/td&gt;
    &lt;td&gt;a.pop(0)&lt;/td&gt;
    &lt;td&gt;25 , a will be [30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;del&lt;/td&gt;
    &lt;td&gt;Deletes item at a particular index from the list&lt;/td&gt;
    &lt;td&gt;del a[0]&lt;/td&gt;
    &lt;td&gt;[30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;all()&lt;/td&gt;
&lt;td&gt;Returns True, if all items in list are True or it is an empty list&lt;/td&gt;
&lt;td&gt;all([True, True, True])
all([])
&lt;/td&gt;
&lt;td&gt;True&lt;br&gt;
True&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;any()&lt;/td&gt;
&lt;td&gt;Returns True, if any item in list is True else return False&lt;/td&gt;
&lt;td&gt;any([True, True, True])&lt;br&gt;
any([True, False, True])&lt;br&gt;
any([])&lt;/td&gt;
&lt;td&gt;True&lt;br&gt;False&lt;br&gt;False&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;

==Printing the List==
=== Print whole list ===
A list can be printed simply or using a ''for / while'' loop 

 print(List_2)     # To print the entire list
This code will print      
 ['Kala','Mala']     

===Print element at a particular index===
&lt;pre&gt;
Using index position
    List_2[0]     # prints 'Kala' ,i.e,the value at index position 0.
    List_2[1]     # prints 'Mala'.
&lt;/pre&gt;
=== Without using index position ===
&lt;pre&gt;
for item in List_2:   # here item is a variable used to access elements in list.
       print(item)
   This code snippet prints 
    Kala
    Mala
&lt;/pre&gt;
[[#TOP]]

==Search for a particular element in list==
Elements in a list can be searched by one of the two ways:
=== using index() function===
&lt;pre&gt;
ages1 = [11,23,12,23,45]

#if element is available in the list, index() returns the index value on which, the element is present.
print(ages1.index(45))#Output: 4

#if element is not available in the list, index() returns ''ValueError''
print(ages1.index(0))#Output: ValueError:
&lt;/pre&gt;

In programming, if such error occurs, program gets terminated. It can be solved using exception handling.
e.g.
&lt;pre&gt;
ages1 = [11,23,12,23,45]

try:
    print(ages1.index(0))
except ValueError:
    print(&quot;Exception has occured&quot;)    
    print(&quot;Element is not found in the list&quot;)

&lt;/pre&gt;
&lt;pre&gt;
'''Output: 
Exception has occured
Element is not found in the list
'''&lt;/pre&gt;
[[#TOP]]

=== using 'in' operator===
''in'' operator is used to check whether a particular element is available in the list or not.e.g.

&lt;pre&gt;
ages1 = [11,23,12,23,45]
no=11

if no in ages1:
    print(&quot;no is there in the list&quot;)
else:    
    print(&quot;no is NOT there in the list&quot;)
&lt;/pre&gt;
&lt;pre&gt;
#Output: no is there in the list
&lt;/pre&gt;


'''Number is not there in the list'''
&lt;pre&gt;
ages1 = [11,23,12,23,45]
no=15

if no in ages1:
    print(&quot;no is there in the list&quot;)
else:    
    print(&quot;no is NOT there in the list&quot;)
&lt;/pre&gt;
&lt;pre&gt;
Output: no is NOT there in the list
&lt;/pre&gt;
[[#TOP]]

==Updating the List==
The lists can be updated using ''append'' or ''insert'' function.  Append adds the element to the end of the list and Insert adds the element in the specified position.
&lt;pre&gt;
   # add the element 'Sheela' to the end of the list.
   List_2.append(&quot;Sheela&quot;)    
   print (List_2) will output 
   ['Kala', 'Mala', 'Sheela']
&lt;/pre&gt;
   &lt;pre&gt;
# add the element &quot;Bala&quot; in the list at the index 1.
   List_2.insert(1,&quot;Bala&quot;)    
   print (List_2) will output 
   ['Kala', 'Bala','Mala', 'Sheela']
&lt;/pre&gt;

=== Extend the list by adding elements of other list at end using extend()===
&lt;pre&gt;
ages = [11,23,12,23,45]
ages.extend([57,58])
print(ages)
&lt;/pre&gt;

&lt;pre&gt;
#Output: [11, 23, 12, 23, 45, 57, 58]
&lt;/pre&gt;

==== Difference between ''append and extend'' ====
Difference between append and extend can be easily understood, by the following example.

&lt;pre&gt;
appendlist = [11,23,12,23,45]
appendlist.append([57,58])

extendlist= [11,23,12,23,45]
extendlist.extend([57,58])
&lt;/pre&gt;

&lt;pre&gt;
'''Output:
[11, 23, 12, 23, 45, [57, 58]]
[11, 23, 12, 23, 45, 57, 58]'''
&lt;/pre&gt;

[[#TOP]]

==Basic Operations on List==
===Frequency of Occurrence===
list.count(object) will return the number of times the object occur in the list.
  '''Example'''
    ages = [11,23,12,23,45,43,22,24,23]
    ages.count(23) will return
    3
    ages.count(100) will return
    0

===Length of the List===
len(list) will return the length of the list ie. the number of objects in the list.
  '''Example'''
&lt;pre&gt;
    ages = [11,23,12,23,45,43,22,24,23]
    len(ages) # Output: 9
&lt;/pre&gt;

To print the objects in the list either use ''for item in list'' or ''for index in range(len(list))''
&lt;pre&gt;
    for item in ages:       
        print (item)  
        (OR)
    for index in range(len(ages)) :
        print (ages[index])
&lt;/pre&gt;

===Sort the List===
list.sort() will sort the list in ascending order
  '''Example'''
    ages = [11,23,12,23,45,43,22,24,23]
    ages.sort() 
    print (ages) 
    [11, 12, 22, 23, 23, 23, 24, 43, 45]

[[#TOP]]

===Sort the List using sorted() function===
sorted(list1) will sort the list and return a new list, it doesn't modify the original list
&lt;br&gt;'''Example: Sort in ascending order'''
&lt;pre&gt;
ages = [11,23,12,23,45,43,22,24,23]
newList=sorted(ages)
print(newList)

#Output: [11, 12, 22, 23, 23, 23, 24, 43, 45]
&lt;/pre&gt;

&lt;br&gt;'''Example: Sort in descending order'''
&lt;pre&gt;
ages = [11,23,12,23,45,43,22,24,23]
newList=sorted(ages,reverse=True)
print(newList)

#Output: [45, 43, 24, 23, 23, 23, 22, 12, 11]
&lt;/pre&gt;

===Reverse the List===
list.reverse() will reverse the original list
  '''Example'''
    ages = [11, 12, 22, 23, 23, 23, 24, 43, 45]
    ages.reverse()
    print (ages)
    [45, 43, 24, 23, 23, 23, 22, 12, 11]

Both sort() and reverse() list operation will work on numeric and alphanumeric data list.

A special use of the reverse() function is to descend a list that is sorted in ascending order.

  '''Example'''
&lt;pre&gt;
ages = [11, 12, 22, 23, 23, 23, 24, 43, 45]
ages.sort()
print(ages)
ages.reverse()
print(ages)
&lt;/pre&gt;

===Slicing===
Used to retrieve an object or objects in a range as a list  
  '''Example'''

Use ''list[index]'' to retrieve the object at the given index
&lt;pre&gt;
In [1]: student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
In [2]: student[3]     #Object at index 3.  Remember index starts at 0
Out[2]: 'Geetha'      
&lt;/pre&gt;

Use ''list[start_index : end_index + 1]'' to retrieve objects from the start_index to end_index 
&lt;pre&gt;
In [3]: student[2:4]     # Objects from index 2 to 3 as List. Note the [ and ]
Out[3]: ['Vijay', 'Geetha']   
&lt;/pre&gt;

Use ''list[:]'' to retrieve objects from the starting of the list to the end of the list. 
The default start value will be the starting index of the list (i.e. 0) and the default end value
will be the length of the list 
&lt;pre&gt;
In [4]: student[:]        # prints the entire list
Out[4]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma', 'Janani']
&lt;/pre&gt;
&lt;pre&gt;
In [5]: student[:5]       # prints the objects from the start of the list upto object at index 4
Out[5]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran']
&lt;/pre&gt;
&lt;pre&gt;
In [6]: student[2:]       # prints the objects from index 2 upto the end of the list
Out[6]: ['Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma', 'Janani']
&lt;/pre&gt;

Negative index too is available in Python. It starts from last element of the list. i.e.
&lt;pre&gt;
In [7]:student[-1]        #prints last index of list
Out[7]: 'Janani'
&lt;/pre&gt;
&lt;pre&gt;
In [8]:student[-1:-8]     #prints empty list
Out[8]: []
&lt;/pre&gt;
&lt;pre&gt;
In [9]:student[-8:-1]     #prints -8th index to -1st index elements
Out[9]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma']
&lt;/pre&gt;

[[#TOP]]

===Removing Item from list ===
----

Is used to remove a specific item from the list.

'''Example:'''
 
Use list.remove(entry/value)  Or   del list[index]    Or list.pop(index)
&lt;pre&gt;
student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
student.remove(&quot;Arun&quot;)   #This will delete item &quot;Arun&quot;
         Or    
del student[0]           # This will delete item at index 0
         Or
student.pop(0)         # This will delete and return item at index 0
print(student)    
Output: &quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
&lt;/pre&gt;

[[#TOP]]

===Delete list ===
----
Used to delete complete list

'''Example'''

Use del &lt;list name&gt;
&lt;pre&gt;
student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
del student&lt;/pre&gt;

===Concatenation of two lists===
----
''+'' is the concatenation operator which is used concatenate two lists. 
&lt;pre&gt;
ages1 = [11,23,12,23,45]
ages2 = [25, 24, 43, 47]
age=ages1+ages2
print(age)
#Output: [11, 23, 12, 23, 45, 25, 24, 43, 47]
&lt;/pre&gt;

===Repeatation of a list ===
----
''*'' is the operator to repeat a particular list.
&lt;pre&gt;
ages1 = [11,23,12,23,45]
age=ages1*5 #ages1 list is repeated 5 times and stroed in ''age'' list
print(age)

#Output: [11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45]
&lt;/pre&gt;

=== all and any for List===
all() and any() are special functions to check whether all elements in iterable is ''True'' or any element is ''True''
&lt;ol&gt;
&lt;li&gt;If all elements in a list are ''True'', '''all()''' will return ''True''&lt;/li&gt;
&lt;li&gt;If iterable is ''empty'', '''all()''' will return ''True''&lt;/li&gt;
&lt;li&gt;If iterable contains at least one ''True'', '''any()''' will return ''True''&lt;/li&gt;
&lt;li&gt;If iterable is ''empty'', '''any()''' will return ''False''&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;
lsit=[True, True, True, True]
print(all(lsit))#Output: True
print(any(lsit))#Output: True

lsit1=[True, False, True, True]
print(all(lsit1))#Output: False
print(any(lsit1))#Output: True

lsit2=[False,False,False]
print(all(lsit2))#Output: False
print(any(lsit2))#Output: False

lsit3=[]
print(all(lsit3))#Output: True
print(any(lsit3))#Output: False
&lt;/pre&gt;

==Conditional Statements==
&lt;pre&gt;Conditionals are used to check the condition and change the flow of the program 
accordingly. They are realized in programming languages through if statement. The 
syntax is as follows :
&lt;pre&gt;
         if condition : 
            statement
&lt;/pre&gt;
    '''Note:''' Do not forget indentation (inserting space/tab) in the line after the
 if condition.
    
    In case you want to execute a set of statements when a condition is true and another

set of statement when the condition is false.
&lt;pre&gt;
         if condition : 
            statement 1
         else :
            statement 2
&lt;/pre&gt;

&lt;pre&gt;    
    Multiple if-else statements can be written as follows:
         if condition_1 : 
            statement 1
         elif condition_2 : # 'elif' is short for 'else if'
            statement 2
         elif condition_3 :
            statement 3
        .
        .
         else :
            final statement
&lt;/pre&gt;

[[#TOP]]

=Loops and Conditionals : Fizzbuzz=
====Loops====
Loops are used to execute a set of repetitive statements. They are realised
through 'while' and 'for' loops in programming languages. The syntax of 'for' loop is 
as follows :
&lt;pre&gt;
for LOOPVARIABLE in SEQUENCE: 
            STATEMENTS&lt;/pre&gt;

    '''e.g.''' to print all the data from a list we can write:
&lt;pre&gt;
for item in list_name:
      print(item)&lt;/pre&gt;
    OR
&lt;pre&gt;
for index in range(len(list_name)):
      print(list_name[index])
 &lt;/pre&gt;   
    The syntax for while loop is as follows :
&lt;pre&gt;    
while BOOLEANEXPRESSION: 
     STATEMENTS
     INCREMENT/DECREMENT
&lt;/pre&gt;    
    '''e.g.''' if we want to print all numbers from 1 to 10
&lt;pre&gt;
i=1
while i&lt;=10 :
    print(i,&quot; &quot;)
    i=i+1
    &lt;/pre&gt;
 
'while' loop has indefinite iteration (run-time unknown). So, there must be loop,  break statement in it.
 Whereas 'for' loop is definite in nature (i.e. known or predictable span).&lt;br&gt;

&lt;b&gt;NOTE: Python doesn't have anything like do-while loop.&lt;/b&gt;

[[#TOP]]

==Implementation==
Here, we try to demonstrate the concept of loops and conditionals through a game called Fizzbuzz. The rules are as follows :&lt;br/&gt;
[[File:fizzBuzz.gif]]

• if input number is a multiple of ’3’ print ”Fizz”
&lt;br/&gt;
• if input number is a multiple of ’5’ print ”Buzz”
&lt;br/&gt;
• if input number is a multiple of both '3' and ’5’ print ”FizzBuzz”
&lt;br/&gt;
The pseudo code is as follows :
&lt;pre&gt;
   If input no % 3 == 0 and  input no % 5 == 0 : 
       print ”Fizzbuzz”
   else if input no % 3 == 0 : 
       print ”Fizz”
   else if input no % 5 == 0 : 
       print ”Buzz”
   else :
       print the input no
&lt;/pre&gt;
 &lt;p style=&quot;text-align:justify&quot;&gt;
The order of statements execution matters to get the desired output. The highest priority condition should be first followed by other. In fizzbuzz programming, first checking should be done for both divisibility of 3 and 5. If condition not satisfied only then it should check individually for 3 or 5. So carefully choosing the order is crucial for better programming.
Note: There is some effect of present condition statements chosen on next conditions statements. That is why in first attempt fizzbuzz programming got struck.&lt;/p&gt;

Example: 
&lt;pre&gt;
#Code to achieve the above requirement in python3.
i = int(input(&quot;Enter the number&quot;)) 
if i%3 == 0 and i%5 == 0: print(i,&quot;FizzBuzz&quot;)  
elif i%5 == 0: print(i,&quot;Buzz&quot;)
elif i%3 == 0: print(i,&quot;Fizz&quot;)
else: print(i)
&lt;/pre&gt;
Lets put the same into a loop for a range given by the user.
&lt;pre&gt;
def fizzbuzzgame(start,stop):
    for i in range(start,stop+1):
        if i%3 == 0 and i%5 == 0:
            print(i,&quot;FizzBuzz&quot;)
        elif i%5 == 0:
            print(i,&quot;Buzz&quot;)
        elif i%3 == 0:
            print(i,&quot;Fizz&quot;)
        else: print(i)

fizzbuzzgame(50,100)
&lt;/pre&gt;
&lt;pre&gt;
#Output:
1235
Buzz
======================================
555
Fizzbuzz
======================================
1235
Buzz
======================================
999
Fizz
&lt;/pre&gt;

=== Fizz Buzz game in Interactive mode with Score ===
'''By Ms. Ami Tusharkant Choksi'''
&lt;pre&gt;
def fizzbuzzgame(i):
        if i%3 == 0 and i%5 == 0:
            print(i,&quot;FizzBuzz&quot;)
            return(&quot;fzbz&quot;)
        elif i%5 == 0:
            print(i,&quot;Buzz&quot;)
            return(&quot;bz&quot;)
        elif i%3 == 0:
            print(i,&quot;Fizz&quot;)
            return(&quot;fz&quot;)
        else:
            print(i)
            return(&quot;no&quot;)

ch = 'y'
fizzbuzz=0
fizz=0
buzz=0
nothing=0
print(&quot;&quot;&quot;

 /$$$$$$$$/$$                  /$$$$$$$                            
| $$_____|__/                 | $$__  $$                           
| $$      /$$/$$$$$$$$/$$$$$$$| $$  \ $$/$$   /$$/$$$$$$$$/$$$$$$$$
| $$$$$  | $|____ /$$|____ /$$| $$$$$$$| $$  | $|____ /$$|____ /$$/
| $$__/  | $$  /$$$$/   /$$$$/| $$__  $| $$  | $$  /$$$$/   /$$$$/ 
| $$     | $$ /$$__/   /$$__/ | $$  \ $| $$  | $$ /$$__/   /$$__/  
| $$     | $$/$$$$$$$$/$$$$$$$| $$$$$$$|  $$$$$$//$$$$$$$$/$$$$$$$$
|__/     |__|________|________|_______/ \______/|________|________/
                                                                  
&quot;&quot;&quot;)   
print('''

  /$$$$$$                                
 /$$__  $$                               
| $$  \__/ /$$$$$$ /$$$$$$/$$$$  /$$$$$$ 
| $$ /$$$$|____  $| $$_  $$_  $$/$$__  $$
| $$|_  $$ /$$$$$$| $$ \ $$ \ $| $$$$$$$$
| $$  \ $$/$$__  $| $$ | $$ | $| $$_____/
|  $$$$$$|  $$$$$$| $$ | $$ | $|  $$$$$$$
 \______/ \_______|__/ |__/ |__/\_______/
                                     
''')

while(ch == 'y'):
    n=int(input(&quot;Enter a Number : &quot;))
    winLoose=fizzbuzzgame(n)
    if(winLoose == &quot;fz&quot;):
        fizz+=1
    elif(winLoose == &quot;bz&quot;):
        buzz+=1
    elif(winLoose == &quot;fzbz&quot;):
        fizzbuzz+=1
    ch=input(&quot;Do you want to continue playing the game : (y/n)&quot;)
    if(ch=='n'):
        print('Congratulations, your score is\n FizzBuzz:%d\nFizz:%d\nBuzz:%d' %
(fizzbuzz,fizz,buzz))
    
'''Sample Output:

 /$$$$$$$$/$$                  /$$$$$$$                            
| $$_____|__/                 | $$__  $$                           
| $$      /$$/$$$$$$$$/$$$$$$$| $$  \ $$/$$   /$$/$$$$$$$$/$$$$$$$$
| $$$$$  | $|____ /$$|____ /$$| $$$$$$$| $$  | $|____ /$$|____ /$$/
| $$__/  | $$  /$$$$/   /$$$$/| $$__  $| $$  | $$  /$$$$/   /$$$$/ 
| $$     | $$ /$$__/   /$$__/ | $$  \ $| $$  | $$ /$$__/   /$$__/  
| $$     | $$/$$$$$$$$/$$$$$$$| $$$$$$$|  $$$$$$//$$$$$$$$/$$$$$$$$
|__/     |__|________|________|_______/ \______/|________|________/
                                                                                                                                   

  /$$$$$$                                
 /$$__  $$                               
| $$  \__/ /$$$$$$ /$$$$$$/$$$$  /$$$$$$ 
| $$ /$$$$|____  $| $$_  $$_  $$/$$__  $$
| $$|_  $$ /$$$$$$| $$ \ $$ \ $| $$$$$$$$
| $$  \ $$/$$__  $| $$ | $$ | $| $$_____/
|  $$$$$$|  $$$$$$| $$ | $$ | $|  $$$$$$$
 \______/ \_______|__/ |__/ |__/\_______/
                                         

Enter a Number : 666
666 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 777
777 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 555
555 FizzBuzz
Do you want to continue playing the game : (y/n)y
Enter a Number : 1
1
Do you want to continue playing the game : (y/n)y
Enter a Number : 789
789 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 25
25 Buzz
Do you want to continue playing the game : (y/n)n
Congratulations, your score is

FizzBuzz:1
Fizz:3
Buzz:1

&lt;/pre&gt;

=Crowd Computing: Just Estimate=
==Wisdom of Crowds==
 &lt;p style=&quot;text-align:justify&quot;&gt;
The concept of ’Wisdom of Crowds’ was proposed by Francis Galton. A weight-judging competition was carried on at the annual show of the West of England Fat Stock and Poultry Exhibition recently held at Plymouth, A fat ox having been selected, competitors bought stamped and numbered cards, each, on which to inscribe their respective names, addresses, and estimates of what the ox would weigh after it had been slaughtered. Those who guessed most successfully received prizes. About 8oo tickets were issued to the par- ticipants. The middlemost estimate of all the estimates recorded was 1207 lbs and the actual weight of the ox was 1198 lbs.&lt;/p&gt;

==Our Experiment==
 &lt;p style=&quot;text-align:justify&quot;&gt;
The crowd had to guess the number of candies/gems in a jar. Around 75 people participated in the experiment. The actual number of gems in the jar were 375. The median of all estimates came out to be 300 and the mean of all the estimates came out to be around 396. Median underestimated and mean overestimated the actual value. So according to recent studies, Trimmed mean must be used as an aggregate measure to estimate where Wisdom of Crowds is involved.
&lt;/p&gt;
[[File:Gemsjar.jpg|center|200px|caption]]

===Trimmed Mean===
 &lt;p style=&quot;text-align:justify&quot;&gt;
In these kinds of experiments, 10% trimmed mean is usually followed. For calculating 10% trimmed mean, remove 10% smallest and 10% largest values from the sample. Calculate the mean of the sample obtained. In the above experiment, the trimmed mean came out to be around 351 which is very close to the actual value.&lt;/p&gt;

==Implementation==
Here, we try to demonstrate the concept of trimmed mean through crowd computing.
&lt;ol&gt;
&lt;li&gt; Input a list of estimates done by the crowd .&lt;/li&gt;
&lt;li&gt; Sort the list.&lt;/li&gt;
&lt;li&gt; Remove the 10% smallest values.&lt;/li&gt;
&lt;li&gt; Remove the 10% largest values.
&lt;li&gt; Calculate the mean of the new list obtained .&lt;/li&gt;&lt;/ol&gt;&lt;hr&gt;

==Data of Experiment==       
    Estimates =[1000,1010,1786,2000,1500,1500,100,120,150,150,150,170,175,180,197,200,200,200,200,200,200,220,220,220,220,234,250,250,250,250,250,250,250,250,250,263,270,275,275,286,300,
                300,300,300,300,300,300,300,320,350,350,350,400, 400,400,400,400,450,467,500,500,500,500,500,500,500,550,550,600,600,600,650,700,700,720]

    '''CODE:'''
&lt;pre&gt;
Estimates = [1000,1010,1786,2000,1500,1500,100,120,150,150,150,170,175,180,197,200,200,200,200,200,200,220,220,220,220,234,250,250,250,250,250,250,250,250,250,263,270,275,275,286,300,                300,300,300,300,300,300,300,320,350,350,350,400,400,400,400,400,450,467,500,500,500,500,500,500,500,550,550,600,600,600,650,700,700,720]
Estimates.sort()
offset = int(0.10*len(Estimates))
for i in range(offset):
       del Estimates[0]
       del Estimates[-1]
Sum = 0    
for i in range(len(Estimates)):
       Sum += Estimates[i]
Mean_Value = Sum/len(Estimates)
print(&quot;Mean : &quot;, int(Mean_Value))
#Output:
Mean :  351
&lt;/pre&gt;
&lt;hr&gt;
==Trimmed Mean for the above example== 
&lt;h3&gt;Using scipy library&lt;/h3&gt;
&lt;pre&gt;
#import scipy to use the method of trim_mean
from scipy import stats
trimMean = stats.trim_mean(Estimates, 0.1) # Trim 10% at both ends
print(&quot;Trimmed Mean : &quot;,trimMean)
#Output:
Trimmed Mean :  335.1020408163265
&lt;/pre&gt;

&lt;h3&gt;Without using scipy library&lt;/h3&gt;
&lt;pre&gt;
#Trimmed mean with 10%
p=10/100
#sorted data
data=[2, 4, 6, 7, 11, 21, 81, 90, 105, 121]
n = len(data)
#Remove elements from both end
rem=int(n*p)
newData = data[rem:-rem]
mean = 0
for i in newData:
    mean += i
mean = int(mean/len(newData))
print(&quot;Trimmed mean : &quot;,mean)
#Output: Trimmed mean :  40
&lt;/pre&gt;
[[#Top]]

=Jumbled_Words Permutations: Jumbled Words=
==What are Permutations ?==
A permutation also called ordering of selected number of elements from a list denoted by nPr here we are choosing all elements of a list and so n=r&lt;br&gt;
nPr=n!/(n-r)!&lt;br&gt; as n=r
nPn=n!&lt;br&gt; which gives all possible arrangement of elements present in a list.

 For example, permutations of list [1,2,3] are [1,2,3], [1,3,2], [2,1,3], [2,3,1], 
[3,1,2], and [3,2,1]. 
The number of permutations of a list of elements nPn is given by n!. For example, there are 2! = 2 x 1 = 2 permutations of [1,2], namely [1,2] and [2,1], and 3! = 3 x 2 x 1 = 6 permutations of [1,2,3], as mentioned above.&lt;br/&gt;
[[File:Permutations.jpg]]

==Implementation==
 &lt;p style=&quot;text-align:justify&quot;&gt;
Here, we try to demonstrate the concept of permutations through jumbled words. It is a two player game in which one person presents the other person a different permutation of the word in his mind. The other person has to guess the right word. If he guesses, the he wins otherwise he loses.&lt;/p&gt;
 Input an list of words.
 Randomly pick a word from the list of words .
 Shuffle this word and present it to the other player.
 if word guesses by the player is same as the one picked from list of w
     player wins
 else
     player loses

ALTERNATE CODE TO GENERATE THIS GAME:
&lt;pre&gt;
import random
p1=input(&quot;enter player 1 name:&quot;)
p2=input(&quot;enter player 2 name:&quot;)
l=[&quot;rainbow&quot;,&quot;computer&quot;,&quot;robot&quot;,&quot;butter&quot;,&quot;vegetable&quot;,&quot;science&quot;,&quot;correct&quot;]
c1=c2=a1=a2=f1=f2=0
k=1
i=3
def play():
    n=random.choice(l)        ##n=chooses a word from list l
    l1=[]
    for j in n:
       l1.append(j)      ##creates a list for word in n
    for t in range(len(l1)):
       p=random.choice(l1)     ##this randomly displays letters in the list
       print(p)
       l1.remove(p)          ##to avoid the repetition of a letter
    s=input(&quot;enter the word:&quot;)
    if(s==n):
        print(&quot;correct&quot;)
        return 1
    else:
        print(&quot;not correct&quot;)
        print(&quot;answer is&quot;,n)
        return 0
def stat():
     print(&quot;player 1:&quot;)
     print(&quot;score:&quot;,c1)
     print(&quot;answered:&quot;,a1)
     print(&quot;failed:&quot;,f1)
     print(&quot;.............&quot;)
     print(&quot;player 2:&quot;)
     print(&quot;score:&quot;,c2)
     print(&quot;answered:&quot;,a2)
     print(&quot;failed&quot;,f2)
     if(c1&gt;c2):
         print(p1,&quot; won over &quot;,p2)
     elif(c1==c2):
         print(&quot;draw game&quot;)
     else:
         print(p2,&quot; won over &quot;,p1) 
while(i!=4):
      if(i==3):
         if(k==1):
             print(&quot;player 1 turn&quot;)
             print(&quot;your jumbled word is:&quot;)
             k=k+1
             m=play()
             if(m==1):      ##if guessed answer is correct,then score and no.of answered count will be increased
                c1+=1
                a1+=1
             else:
                f1+=1       ##else count of no.of failed to answered will be incremented
         else:
             print(&quot;player 2 turn&quot;)
             print(&quot;your jumbled word is:&quot;)
             k=k-1
             m=play()
             if(m==1):
                c2=c2+1
                a2=a2+1
             else:
                f2=f2+1
       if(i==2):
             print(&quot;present status&quot;)
             stat()
       i=int(input(&quot;enter your choice  1.stop 2.status 3.continue&quot;))
       if(i==1):
             stat()
             i=i+3
&lt;/pre&gt;
&lt;hr&gt;
=== JumbledWord Simple Logic, In Short ===
[[File:jumbledWord.gif]]
---
&lt;hr&gt;
'''Logic to create a Jumbled Word'''
&lt;hr&gt;
&lt;pre&gt;
#Get Jumbled Word and print it Horizontally
import random

def getJumbledWord(b):
    jumble=''
    l1 = [ b[i] for i in range(0, len(b)) ]
    for t in range(len(l1)):
       p=random.choice(l1)  #this randomly gets letters from the list      
       jumble=jumble+p       
       l1.remove(p)
    return jumble

b=input(&quot;Enter a word to make it jumbled : &quot;)
print(&quot;Jumbled Word : &quot;, getJumbledWord(b))
&lt;/pre&gt;
&lt;pre&gt;
Output:
Enter a word to make it jumbled : live and let live others
Jumbled Word :  vel  toldeisrte aihv len
==========================================
Enter a word to make it jumbled : junkfood
Jumbled Word :  nfukdooj
&lt;/pre&gt;
&lt;hr&gt;
'''Another Logic to create a Jumbled Word'''
&lt;hr&gt;
&lt;pre&gt;
import random
b=input(&quot;Enter a word to make it jumbled : &quot;)

def getJumbledWord1(b):
    l1 = [ b[i] for i in range(0, len(b)) ]
    random.shuffle(l1)
    str1 = ''.join(l1)
    return str1

print(&quot;Jumbled Word : &quot;, getJumbledWord1(b))
&lt;/pre&gt;

====Sample Output:====
&lt;pre&gt;
---- Output1 
Enter a word to make it jumbled : butter
Jumbled Word :  tbture

---- Output2 
Enter a word to make it jumbled : petriotism
Jumbled Word :  pittrosime
&lt;/pre&gt;

=Theory of Evolution=

== What is Evolution ? ==
Evolution is the change in heritable characteristics over successive generations. The theory of evolution explains that DNA, which acts as a carrier of genetic information from one generation to other, tends to change or mutate occasionally. These changes are reflected in next generations to come. This is how life has evolved on earth from bacteria to human beings.&lt;br&gt;
[[File:Evolution.png|500px]]

== Implementation ==
 &lt;p style=&quot;text-align:justify&quot;&gt;
An array representing DNA is stored in a file. As genes are forms of DNA, they contain information to be transferred to forthcoming generations. Assume that information is in the form of bits (in the form of 0s and 1s). A number is picked randomly from 1 to the size of the array. A new parameter has been introduced which decides whether mutation would occur or not. If the value of this new parameter is 1 (It is picked randomly from 1 to 100), then only change is reflected down the generations, otherwise it is not. The pseudo code is as follows :
&lt;/p&gt;
Input an array containing genetic information .
Randomly generate a number (say m) from 1 to length of the array. Randomly generate other number (say p) from 1 to 100.

&lt;pre&gt; 
    if p is equal to 1 then 
        if m is 1 then
          set it to 0
        else
          set it to 1
&lt;/pre&gt;
[[#TOP]]</text>
      <sha1>7lx5my6ur9tm933k4105k78duo7hptt</sha1>
    </revision>
    <revision>
      <id>3741</id>
      <parentid>3740</parentid>
      <timestamp>2018-09-29T02:37:23Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* using index() function */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="30704">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_3 Contributors of this page]
*Week 3 Playlist: https://www.youtube.com/playlist?list=PLc_j0TNIaWxOVx_z9jAM2UB3RqYNXaoEo
=List=
List is a flexible data structure used for storing a group of data separated by comma. The elements in a list need not be of the same data type.

'''Example:'''
       List_1 = [ 1, 2,3] or 
       List_1 = [&quot;coffee&quot;, &quot;Tea&quot;, &quot;Milk&quot;] or
       List_1 = [1,&quot;coffee&quot;, &quot;Tea&quot;, 3, &quot;5&quot;]

==List Creation==
a) A list can be created by simply putting values (separated by comma) between square
 brackets as given below,
&lt;pre&gt;List_1 = [1,&quot;coffee&quot;, &quot;Tea&quot;, 3, &quot;5&quot;] #this creates a list by name List_1 containing
 following items
&lt;/pre&gt;


Or,
(b)A List can be created from scratch and elements can be added 
&lt;pre&gt;
        List_2 = [ ]
        List_2.append(&quot;Kala&quot;)
        List_2.append(&quot;Mala&quot;)
&lt;/pre&gt;
Here we use &quot;append&quot;, which is a function in python that enable us to append or attach an element to a list .
&lt;pre&gt;Thus List_2 will now hold [&quot;Kala&quot;,&quot;Mala&quot;]&lt;/pre&gt;

[[#Top]]

==Operations and Methods to work with List==
&lt;pre&gt;
a = [25,30,50,90,12,13]
b = [100,300,500,200,250]
&lt;/pre&gt;
&lt;hr&gt;
&lt;table border=2&gt;
  &lt;tr&gt;
    &lt;th&gt;&lt;b&gt;Method/&lt;br&gt;Operator&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Function&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Syntax&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Output&lt;/b&gt;&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;len()&lt;/td&gt;
    &lt;td&gt;Find length of a list&lt;/td&gt;
    &lt;td&gt;len(a)&lt;/td&gt;
    &lt;td&gt;6&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;max()&lt;/td&gt;
    &lt;td&gt;Find maximum element from the list&lt;/td&gt;
    &lt;td&gt;max(a)&lt;/td&gt;
    &lt;td&gt;90&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;min()&lt;/td&gt;
    &lt;td&gt;Find minimum element from the list&lt;/td&gt;
    &lt;td&gt;min(a)&lt;/td&gt;
    &lt;td&gt;12&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sum()&lt;/td&gt;
    &lt;td&gt;Returns sum of all elements of the list&lt;/td&gt;
    &lt;td&gt;sum(a)&lt;/td&gt;
    &lt;td&gt;220&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;reverse()&lt;/td&gt;
    &lt;td&gt;Reverses the original list&lt;/td&gt;
    &lt;td&gt;a.reverse()&lt;/td&gt;
    &lt;td&gt;[13, 12, 90, 50, 30, 25]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sort()&lt;/td&gt;
    &lt;td&gt;Sorts the original list in ascending order&lt;/td&gt;
    &lt;td&gt;a.sort()&lt;/td&gt;
    &lt;td&gt;[12, 13, 25, 30, 50, 90]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sorted()&lt;/td&gt;
    &lt;td&gt;Returns the new sorted list &lt;/td&gt;
    &lt;td&gt;sorted(a)&lt;/td&gt;
    &lt;td&gt;[12, 13, 25, 30, 50, 90]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;insert()&lt;/td&gt;
    &lt;td&gt;Insert at a particular index in the list, and shifts remaining elements&lt;/td&gt;
    &lt;td&gt;a.insert(3,3)&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 3, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;append()&lt;/td&gt;
    &lt;td&gt;Adds elements/object to the end of the list&lt;/td&gt;
    &lt;td&gt;a.append(5)&lt;br&gt;a.append([10,20])&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 5]&lt;br&gt;[25, 30, 50, 90, 12, 13, [10, 20]]&lt;br&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;extend()&lt;/td&gt;
    &lt;td&gt;Adds object to the end of the list as elements not as object&lt;/td&gt;
    &lt;td&gt;a.extend([10,20])&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 10, 20]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;*&amp;nbsp;&amp;nbsp;Repeatation&lt;br&gt;operator&lt;/td&gt;
    &lt;td&gt;Repeat the list for n times and returns a new list&lt;/td&gt;
    &lt;td&gt;a*2&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 25, 30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;+ Concatenation&lt;br&gt;operator&lt;/td&gt;
    &lt;td&gt;Concatenates two lists, and returns a new list&lt;/td&gt;
    &lt;td&gt;a+b&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 100, 300, 500, 200, 250]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;index()&lt;/td&gt;
    &lt;td&gt;Finds index of a particular element in the list or not&lt;/td&gt;
    &lt;td&gt;a.index(25)&lt;br&gt;a.index(0)&lt;br&gt;&lt;/td&gt;
    &lt;td&gt;0&lt;br&gt;&lt;br&gt;ValueError: 0 is not in list&lt;br&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;in operator&lt;/td&gt;
    &lt;td&gt;Finds whether a particular element is in the list or not, returns boolean&lt;/td&gt;
    &lt;td&gt;25 in a&lt;/td&gt;
    &lt;td&gt;True&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;not in operator&lt;/td&gt;
    &lt;td&gt;Checks if element is not available in list, returns boolean&lt;/td&gt;
    &lt;td&gt;25 not in a&lt;/td&gt;
    &lt;td&gt;False&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;count()&lt;/td&gt;
    &lt;td&gt;Counts the number of occurence of an element in the list&lt;/td&gt;
    &lt;td&gt;a.count(25)&lt;/td&gt;
    &lt;td&gt;1&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;remove()&lt;/td&gt;
    &lt;td&gt;Removes an element from the list&lt;/td&gt;
    &lt;td&gt;a.remove(25)&lt;/td&gt;
    &lt;td&gt; [30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;pop()&lt;/td&gt;
    &lt;td&gt;Delete and return item at index 0&lt;/td&gt;
    &lt;td&gt;a.pop(0)&lt;/td&gt;
    &lt;td&gt;25 , a will be [30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;del&lt;/td&gt;
    &lt;td&gt;Deletes item at a particular index from the list&lt;/td&gt;
    &lt;td&gt;del a[0]&lt;/td&gt;
    &lt;td&gt;[30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;all()&lt;/td&gt;
&lt;td&gt;Returns True, if all items in list are True or it is an empty list&lt;/td&gt;
&lt;td&gt;all([True, True, True])
all([])
&lt;/td&gt;
&lt;td&gt;True&lt;br&gt;
True&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;any()&lt;/td&gt;
&lt;td&gt;Returns True, if any item in list is True else return False&lt;/td&gt;
&lt;td&gt;any([True, True, True])&lt;br&gt;
any([True, False, True])&lt;br&gt;
any([])&lt;/td&gt;
&lt;td&gt;True&lt;br&gt;False&lt;br&gt;False&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;

==Printing the List==
=== Print whole list ===
A list can be printed simply or using a ''for / while'' loop 

 print(List_2)     # To print the entire list
This code will print      
 ['Kala','Mala']     

===Print element at a particular index===
&lt;pre&gt;
Using index position
    List_2[0]     # prints 'Kala' ,i.e,the value at index position 0.
    List_2[1]     # prints 'Mala'.
&lt;/pre&gt;
=== Without using index position ===
&lt;pre&gt;
for item in List_2:   # here item is a variable used to access elements in list.
       print(item)
   This code snippet prints 
    Kala
    Mala
&lt;/pre&gt;
[[#TOP]]

==Search for a particular element in list==
Elements in a list can be searched by one of the two ways:
=== using index() function===
&lt;pre&gt;
ages1 = [11,23,12,23,45]

#if element is available in the list, index() returns the index value on which, the element is
 present.
print(ages1.index(45))#Output: 4

#if element is not available in the list, index() returns ''ValueError''
print(ages1.index(0))#Output: ValueError:
&lt;/pre&gt;

In programming, if such error occurs, program gets terminated. It can be solved using
 exception handling.
e.g.
&lt;pre&gt;
ages1 = [11,23,12,23,45]

try:
    print(ages1.index(0))
except ValueError:
    print(&quot;Exception has occured&quot;)    
    print(&quot;Element is not found in the list&quot;)

&lt;/pre&gt;
&lt;pre&gt;
'''Output: 
Exception has occured
Element is not found in the list
'''&lt;/pre&gt;
[[#TOP]]

=== using 'in' operator===
''in'' operator is used to check whether a particular element is available in the list or not.e.g.

&lt;pre&gt;
ages1 = [11,23,12,23,45]
no=11

if no in ages1:
    print(&quot;no is there in the list&quot;)
else:    
    print(&quot;no is NOT there in the list&quot;)
&lt;/pre&gt;
&lt;pre&gt;
#Output: no is there in the list
&lt;/pre&gt;


'''Number is not there in the list'''
&lt;pre&gt;
ages1 = [11,23,12,23,45]
no=15

if no in ages1:
    print(&quot;no is there in the list&quot;)
else:    
    print(&quot;no is NOT there in the list&quot;)
&lt;/pre&gt;
&lt;pre&gt;
Output: no is NOT there in the list
&lt;/pre&gt;
[[#TOP]]

==Updating the List==
The lists can be updated using ''append'' or ''insert'' function.  Append adds the element to the end of the list and Insert adds the element in the specified position.
&lt;pre&gt;
   # add the element 'Sheela' to the end of the list.
   List_2.append(&quot;Sheela&quot;)    
   print (List_2) will output 
   ['Kala', 'Mala', 'Sheela']
&lt;/pre&gt;
   &lt;pre&gt;
# add the element &quot;Bala&quot; in the list at the index 1.
   List_2.insert(1,&quot;Bala&quot;)    
   print (List_2) will output 
   ['Kala', 'Bala','Mala', 'Sheela']
&lt;/pre&gt;

=== Extend the list by adding elements of other list at end using extend()===
&lt;pre&gt;
ages = [11,23,12,23,45]
ages.extend([57,58])
print(ages)
&lt;/pre&gt;

&lt;pre&gt;
#Output: [11, 23, 12, 23, 45, 57, 58]
&lt;/pre&gt;

==== Difference between ''append and extend'' ====
Difference between append and extend can be easily understood, by the following example.

&lt;pre&gt;
appendlist = [11,23,12,23,45]
appendlist.append([57,58])

extendlist= [11,23,12,23,45]
extendlist.extend([57,58])
&lt;/pre&gt;

&lt;pre&gt;
'''Output:
[11, 23, 12, 23, 45, [57, 58]]
[11, 23, 12, 23, 45, 57, 58]'''
&lt;/pre&gt;

[[#TOP]]

==Basic Operations on List==
===Frequency of Occurrence===
list.count(object) will return the number of times the object occur in the list.
  '''Example'''
    ages = [11,23,12,23,45,43,22,24,23]
    ages.count(23) will return
    3
    ages.count(100) will return
    0

===Length of the List===
len(list) will return the length of the list ie. the number of objects in the list.
  '''Example'''
&lt;pre&gt;
    ages = [11,23,12,23,45,43,22,24,23]
    len(ages) # Output: 9
&lt;/pre&gt;

To print the objects in the list either use ''for item in list'' or ''for index in range(len(list))''
&lt;pre&gt;
    for item in ages:       
        print (item)  
        (OR)
    for index in range(len(ages)) :
        print (ages[index])
&lt;/pre&gt;

===Sort the List===
list.sort() will sort the list in ascending order
  '''Example'''
    ages = [11,23,12,23,45,43,22,24,23]
    ages.sort() 
    print (ages) 
    [11, 12, 22, 23, 23, 23, 24, 43, 45]

[[#TOP]]

===Sort the List using sorted() function===
sorted(list1) will sort the list and return a new list, it doesn't modify the original list
&lt;br&gt;'''Example: Sort in ascending order'''
&lt;pre&gt;
ages = [11,23,12,23,45,43,22,24,23]
newList=sorted(ages)
print(newList)

#Output: [11, 12, 22, 23, 23, 23, 24, 43, 45]
&lt;/pre&gt;

&lt;br&gt;'''Example: Sort in descending order'''
&lt;pre&gt;
ages = [11,23,12,23,45,43,22,24,23]
newList=sorted(ages,reverse=True)
print(newList)

#Output: [45, 43, 24, 23, 23, 23, 22, 12, 11]
&lt;/pre&gt;

===Reverse the List===
list.reverse() will reverse the original list
  '''Example'''
    ages = [11, 12, 22, 23, 23, 23, 24, 43, 45]
    ages.reverse()
    print (ages)
    [45, 43, 24, 23, 23, 23, 22, 12, 11]

Both sort() and reverse() list operation will work on numeric and alphanumeric data list.

A special use of the reverse() function is to descend a list that is sorted in ascending order.

  '''Example'''
&lt;pre&gt;
ages = [11, 12, 22, 23, 23, 23, 24, 43, 45]
ages.sort()
print(ages)
ages.reverse()
print(ages)
&lt;/pre&gt;

===Slicing===
Used to retrieve an object or objects in a range as a list  
  '''Example'''

Use ''list[index]'' to retrieve the object at the given index
&lt;pre&gt;
In [1]: student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
In [2]: student[3]     #Object at index 3.  Remember index starts at 0
Out[2]: 'Geetha'      
&lt;/pre&gt;

Use ''list[start_index : end_index + 1]'' to retrieve objects from the start_index to end_index 
&lt;pre&gt;
In [3]: student[2:4]     # Objects from index 2 to 3 as List. Note the [ and ]
Out[3]: ['Vijay', 'Geetha']   
&lt;/pre&gt;

Use ''list[:]'' to retrieve objects from the starting of the list to the end of the list. 
The default start value will be the starting index of the list (i.e. 0) and the default end value
will be the length of the list 
&lt;pre&gt;
In [4]: student[:]        # prints the entire list
Out[4]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma', 'Janani']
&lt;/pre&gt;
&lt;pre&gt;
In [5]: student[:5]       # prints the objects from the start of the list upto object at index 4
Out[5]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran']
&lt;/pre&gt;
&lt;pre&gt;
In [6]: student[2:]       # prints the objects from index 2 upto the end of the list
Out[6]: ['Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma', 'Janani']
&lt;/pre&gt;

Negative index too is available in Python. It starts from last element of the list. i.e.
&lt;pre&gt;
In [7]:student[-1]        #prints last index of list
Out[7]: 'Janani'
&lt;/pre&gt;
&lt;pre&gt;
In [8]:student[-1:-8]     #prints empty list
Out[8]: []
&lt;/pre&gt;
&lt;pre&gt;
In [9]:student[-8:-1]     #prints -8th index to -1st index elements
Out[9]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma']
&lt;/pre&gt;

[[#TOP]]

===Removing Item from list ===
----

Is used to remove a specific item from the list.

'''Example:'''
 
Use list.remove(entry/value)  Or   del list[index]    Or list.pop(index)
&lt;pre&gt;
student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
student.remove(&quot;Arun&quot;)   #This will delete item &quot;Arun&quot;
         Or    
del student[0]           # This will delete item at index 0
         Or
student.pop(0)         # This will delete and return item at index 0
print(student)    
Output: &quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
&lt;/pre&gt;

[[#TOP]]

===Delete list ===
----
Used to delete complete list

'''Example'''

Use del &lt;list name&gt;
&lt;pre&gt;
student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
del student&lt;/pre&gt;

===Concatenation of two lists===
----
''+'' is the concatenation operator which is used concatenate two lists. 
&lt;pre&gt;
ages1 = [11,23,12,23,45]
ages2 = [25, 24, 43, 47]
age=ages1+ages2
print(age)
#Output: [11, 23, 12, 23, 45, 25, 24, 43, 47]
&lt;/pre&gt;

===Repeatation of a list ===
----
''*'' is the operator to repeat a particular list.
&lt;pre&gt;
ages1 = [11,23,12,23,45]
age=ages1*5 #ages1 list is repeated 5 times and stroed in ''age'' list
print(age)

#Output: [11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45]
&lt;/pre&gt;

=== all and any for List===
all() and any() are special functions to check whether all elements in iterable is ''True'' or any element is ''True''
&lt;ol&gt;
&lt;li&gt;If all elements in a list are ''True'', '''all()''' will return ''True''&lt;/li&gt;
&lt;li&gt;If iterable is ''empty'', '''all()''' will return ''True''&lt;/li&gt;
&lt;li&gt;If iterable contains at least one ''True'', '''any()''' will return ''True''&lt;/li&gt;
&lt;li&gt;If iterable is ''empty'', '''any()''' will return ''False''&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;
lsit=[True, True, True, True]
print(all(lsit))#Output: True
print(any(lsit))#Output: True

lsit1=[True, False, True, True]
print(all(lsit1))#Output: False
print(any(lsit1))#Output: True

lsit2=[False,False,False]
print(all(lsit2))#Output: False
print(any(lsit2))#Output: False

lsit3=[]
print(all(lsit3))#Output: True
print(any(lsit3))#Output: False
&lt;/pre&gt;

==Conditional Statements==
&lt;pre&gt;Conditionals are used to check the condition and change the flow of the program 
accordingly. They are realized in programming languages through if statement. The 
syntax is as follows :
&lt;pre&gt;
         if condition : 
            statement
&lt;/pre&gt;
    '''Note:''' Do not forget indentation (inserting space/tab) in the line after the
 if condition.
    
    In case you want to execute a set of statements when a condition is true and another

set of statement when the condition is false.
&lt;pre&gt;
         if condition : 
            statement 1
         else :
            statement 2
&lt;/pre&gt;

&lt;pre&gt;    
    Multiple if-else statements can be written as follows:
         if condition_1 : 
            statement 1
         elif condition_2 : # 'elif' is short for 'else if'
            statement 2
         elif condition_3 :
            statement 3
        .
        .
         else :
            final statement
&lt;/pre&gt;

[[#TOP]]

=Loops and Conditionals : Fizzbuzz=
====Loops====
Loops are used to execute a set of repetitive statements. They are realised
through 'while' and 'for' loops in programming languages. The syntax of 'for' loop is 
as follows :
&lt;pre&gt;
for LOOPVARIABLE in SEQUENCE: 
            STATEMENTS&lt;/pre&gt;

    '''e.g.''' to print all the data from a list we can write:
&lt;pre&gt;
for item in list_name:
      print(item)&lt;/pre&gt;
    OR
&lt;pre&gt;
for index in range(len(list_name)):
      print(list_name[index])
 &lt;/pre&gt;   
    The syntax for while loop is as follows :
&lt;pre&gt;    
while BOOLEANEXPRESSION: 
     STATEMENTS
     INCREMENT/DECREMENT
&lt;/pre&gt;    
    '''e.g.''' if we want to print all numbers from 1 to 10
&lt;pre&gt;
i=1
while i&lt;=10 :
    print(i,&quot; &quot;)
    i=i+1
    &lt;/pre&gt;
 
'while' loop has indefinite iteration (run-time unknown). So, there must be loop,  break statement in it.
 Whereas 'for' loop is definite in nature (i.e. known or predictable span).&lt;br&gt;

&lt;b&gt;NOTE: Python doesn't have anything like do-while loop.&lt;/b&gt;

[[#TOP]]

==Implementation==
Here, we try to demonstrate the concept of loops and conditionals through a game called Fizzbuzz. The rules are as follows :&lt;br/&gt;
[[File:fizzBuzz.gif]]

• if input number is a multiple of ’3’ print ”Fizz”
&lt;br/&gt;
• if input number is a multiple of ’5’ print ”Buzz”
&lt;br/&gt;
• if input number is a multiple of both '3' and ’5’ print ”FizzBuzz”
&lt;br/&gt;
The pseudo code is as follows :
&lt;pre&gt;
   If input no % 3 == 0 and  input no % 5 == 0 : 
       print ”Fizzbuzz”
   else if input no % 3 == 0 : 
       print ”Fizz”
   else if input no % 5 == 0 : 
       print ”Buzz”
   else :
       print the input no
&lt;/pre&gt;
 &lt;p style=&quot;text-align:justify&quot;&gt;
The order of statements execution matters to get the desired output. The highest priority condition should be first followed by other. In fizzbuzz programming, first checking should be done for both divisibility of 3 and 5. If condition not satisfied only then it should check individually for 3 or 5. So carefully choosing the order is crucial for better programming.
Note: There is some effect of present condition statements chosen on next conditions statements. That is why in first attempt fizzbuzz programming got struck.&lt;/p&gt;

Example: 
&lt;pre&gt;
#Code to achieve the above requirement in python3.
i = int(input(&quot;Enter the number&quot;)) 
if i%3 == 0 and i%5 == 0: print(i,&quot;FizzBuzz&quot;)  
elif i%5 == 0: print(i,&quot;Buzz&quot;)
elif i%3 == 0: print(i,&quot;Fizz&quot;)
else: print(i)
&lt;/pre&gt;
Lets put the same into a loop for a range given by the user.
&lt;pre&gt;
def fizzbuzzgame(start,stop):
    for i in range(start,stop+1):
        if i%3 == 0 and i%5 == 0:
            print(i,&quot;FizzBuzz&quot;)
        elif i%5 == 0:
            print(i,&quot;Buzz&quot;)
        elif i%3 == 0:
            print(i,&quot;Fizz&quot;)
        else: print(i)

fizzbuzzgame(50,100)
&lt;/pre&gt;
&lt;pre&gt;
#Output:
1235
Buzz
======================================
555
Fizzbuzz
======================================
1235
Buzz
======================================
999
Fizz
&lt;/pre&gt;

=== Fizz Buzz game in Interactive mode with Score ===
'''By Ms. Ami Tusharkant Choksi'''
&lt;pre&gt;
def fizzbuzzgame(i):
        if i%3 == 0 and i%5 == 0:
            print(i,&quot;FizzBuzz&quot;)
            return(&quot;fzbz&quot;)
        elif i%5 == 0:
            print(i,&quot;Buzz&quot;)
            return(&quot;bz&quot;)
        elif i%3 == 0:
            print(i,&quot;Fizz&quot;)
            return(&quot;fz&quot;)
        else:
            print(i)
            return(&quot;no&quot;)

ch = 'y'
fizzbuzz=0
fizz=0
buzz=0
nothing=0
print(&quot;&quot;&quot;

 /$$$$$$$$/$$                  /$$$$$$$                            
| $$_____|__/                 | $$__  $$                           
| $$      /$$/$$$$$$$$/$$$$$$$| $$  \ $$/$$   /$$/$$$$$$$$/$$$$$$$$
| $$$$$  | $|____ /$$|____ /$$| $$$$$$$| $$  | $|____ /$$|____ /$$/
| $$__/  | $$  /$$$$/   /$$$$/| $$__  $| $$  | $$  /$$$$/   /$$$$/ 
| $$     | $$ /$$__/   /$$__/ | $$  \ $| $$  | $$ /$$__/   /$$__/  
| $$     | $$/$$$$$$$$/$$$$$$$| $$$$$$$|  $$$$$$//$$$$$$$$/$$$$$$$$
|__/     |__|________|________|_______/ \______/|________|________/
                                                                  
&quot;&quot;&quot;)   
print('''

  /$$$$$$                                
 /$$__  $$                               
| $$  \__/ /$$$$$$ /$$$$$$/$$$$  /$$$$$$ 
| $$ /$$$$|____  $| $$_  $$_  $$/$$__  $$
| $$|_  $$ /$$$$$$| $$ \ $$ \ $| $$$$$$$$
| $$  \ $$/$$__  $| $$ | $$ | $| $$_____/
|  $$$$$$|  $$$$$$| $$ | $$ | $|  $$$$$$$
 \______/ \_______|__/ |__/ |__/\_______/
                                     
''')

while(ch == 'y'):
    n=int(input(&quot;Enter a Number : &quot;))
    winLoose=fizzbuzzgame(n)
    if(winLoose == &quot;fz&quot;):
        fizz+=1
    elif(winLoose == &quot;bz&quot;):
        buzz+=1
    elif(winLoose == &quot;fzbz&quot;):
        fizzbuzz+=1
    ch=input(&quot;Do you want to continue playing the game : (y/n)&quot;)
    if(ch=='n'):
        print('Congratulations, your score is\n FizzBuzz:%d\nFizz:%d\nBuzz:%d' %
(fizzbuzz,fizz,buzz))
    
'''Sample Output:

 /$$$$$$$$/$$                  /$$$$$$$                            
| $$_____|__/                 | $$__  $$                           
| $$      /$$/$$$$$$$$/$$$$$$$| $$  \ $$/$$   /$$/$$$$$$$$/$$$$$$$$
| $$$$$  | $|____ /$$|____ /$$| $$$$$$$| $$  | $|____ /$$|____ /$$/
| $$__/  | $$  /$$$$/   /$$$$/| $$__  $| $$  | $$  /$$$$/   /$$$$/ 
| $$     | $$ /$$__/   /$$__/ | $$  \ $| $$  | $$ /$$__/   /$$__/  
| $$     | $$/$$$$$$$$/$$$$$$$| $$$$$$$|  $$$$$$//$$$$$$$$/$$$$$$$$
|__/     |__|________|________|_______/ \______/|________|________/
                                                                                                                                   

  /$$$$$$                                
 /$$__  $$                               
| $$  \__/ /$$$$$$ /$$$$$$/$$$$  /$$$$$$ 
| $$ /$$$$|____  $| $$_  $$_  $$/$$__  $$
| $$|_  $$ /$$$$$$| $$ \ $$ \ $| $$$$$$$$
| $$  \ $$/$$__  $| $$ | $$ | $| $$_____/
|  $$$$$$|  $$$$$$| $$ | $$ | $|  $$$$$$$
 \______/ \_______|__/ |__/ |__/\_______/
                                         

Enter a Number : 666
666 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 777
777 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 555
555 FizzBuzz
Do you want to continue playing the game : (y/n)y
Enter a Number : 1
1
Do you want to continue playing the game : (y/n)y
Enter a Number : 789
789 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 25
25 Buzz
Do you want to continue playing the game : (y/n)n
Congratulations, your score is

FizzBuzz:1
Fizz:3
Buzz:1

&lt;/pre&gt;

=Crowd Computing: Just Estimate=
==Wisdom of Crowds==
 &lt;p style=&quot;text-align:justify&quot;&gt;
The concept of ’Wisdom of Crowds’ was proposed by Francis Galton. A weight-judging competition was carried on at the annual show of the West of England Fat Stock and Poultry Exhibition recently held at Plymouth, A fat ox having been selected, competitors bought stamped and numbered cards, each, on which to inscribe their respective names, addresses, and estimates of what the ox would weigh after it had been slaughtered. Those who guessed most successfully received prizes. About 8oo tickets were issued to the par- ticipants. The middlemost estimate of all the estimates recorded was 1207 lbs and the actual weight of the ox was 1198 lbs.&lt;/p&gt;

==Our Experiment==
 &lt;p style=&quot;text-align:justify&quot;&gt;
The crowd had to guess the number of candies/gems in a jar. Around 75 people participated in the experiment. The actual number of gems in the jar were 375. The median of all estimates came out to be 300 and the mean of all the estimates came out to be around 396. Median underestimated and mean overestimated the actual value. So according to recent studies, Trimmed mean must be used as an aggregate measure to estimate where Wisdom of Crowds is involved.
&lt;/p&gt;
[[File:Gemsjar.jpg|center|200px|caption]]

===Trimmed Mean===
 &lt;p style=&quot;text-align:justify&quot;&gt;
In these kinds of experiments, 10% trimmed mean is usually followed. For calculating 10% trimmed mean, remove 10% smallest and 10% largest values from the sample. Calculate the mean of the sample obtained. In the above experiment, the trimmed mean came out to be around 351 which is very close to the actual value.&lt;/p&gt;

==Implementation==
Here, we try to demonstrate the concept of trimmed mean through crowd computing.
&lt;ol&gt;
&lt;li&gt; Input a list of estimates done by the crowd .&lt;/li&gt;
&lt;li&gt; Sort the list.&lt;/li&gt;
&lt;li&gt; Remove the 10% smallest values.&lt;/li&gt;
&lt;li&gt; Remove the 10% largest values.
&lt;li&gt; Calculate the mean of the new list obtained .&lt;/li&gt;&lt;/ol&gt;&lt;hr&gt;

==Data of Experiment==       
    Estimates =[1000,1010,1786,2000,1500,1500,100,120,150,150,150,170,175,180,197,200,200,200,200,200,200,220,220,220,220,234,250,250,250,250,250,250,250,250,250,263,270,275,275,286,300,
                300,300,300,300,300,300,300,320,350,350,350,400, 400,400,400,400,450,467,500,500,500,500,500,500,500,550,550,600,600,600,650,700,700,720]

    '''CODE:'''
&lt;pre&gt;
Estimates = [1000,1010,1786,2000,1500,1500,100,120,150,150,150,170,175,180,197,200,200,200,200,200,200,220,220,220,220,234,250,250,250,250,250,250,250,250,250,263,270,275,275,286,300,                300,300,300,300,300,300,300,320,350,350,350,400,400,400,400,400,450,467,500,500,500,500,500,500,500,550,550,600,600,600,650,700,700,720]
Estimates.sort()
offset = int(0.10*len(Estimates))
for i in range(offset):
       del Estimates[0]
       del Estimates[-1]
Sum = 0    
for i in range(len(Estimates)):
       Sum += Estimates[i]
Mean_Value = Sum/len(Estimates)
print(&quot;Mean : &quot;, int(Mean_Value))
#Output:
Mean :  351
&lt;/pre&gt;
&lt;hr&gt;
==Trimmed Mean for the above example== 
&lt;h3&gt;Using scipy library&lt;/h3&gt;
&lt;pre&gt;
#import scipy to use the method of trim_mean
from scipy import stats
trimMean = stats.trim_mean(Estimates, 0.1) # Trim 10% at both ends
print(&quot;Trimmed Mean : &quot;,trimMean)
#Output:
Trimmed Mean :  335.1020408163265
&lt;/pre&gt;

&lt;h3&gt;Without using scipy library&lt;/h3&gt;
&lt;pre&gt;
#Trimmed mean with 10%
p=10/100
#sorted data
data=[2, 4, 6, 7, 11, 21, 81, 90, 105, 121]
n = len(data)
#Remove elements from both end
rem=int(n*p)
newData = data[rem:-rem]
mean = 0
for i in newData:
    mean += i
mean = int(mean/len(newData))
print(&quot;Trimmed mean : &quot;,mean)
#Output: Trimmed mean :  40
&lt;/pre&gt;
[[#Top]]

=Jumbled_Words Permutations: Jumbled Words=
==What are Permutations ?==
A permutation also called ordering of selected number of elements from a list denoted by nPr here we are choosing all elements of a list and so n=r&lt;br&gt;
nPr=n!/(n-r)!&lt;br&gt; as n=r
nPn=n!&lt;br&gt; which gives all possible arrangement of elements present in a list.

 For example, permutations of list [1,2,3] are [1,2,3], [1,3,2], [2,1,3], [2,3,1], 
[3,1,2], and [3,2,1]. 
The number of permutations of a list of elements nPn is given by n!. For example, there are 2! = 2 x 1 = 2 permutations of [1,2], namely [1,2] and [2,1], and 3! = 3 x 2 x 1 = 6 permutations of [1,2,3], as mentioned above.&lt;br/&gt;
[[File:Permutations.jpg]]

==Implementation==
 &lt;p style=&quot;text-align:justify&quot;&gt;
Here, we try to demonstrate the concept of permutations through jumbled words. It is a two player game in which one person presents the other person a different permutation of the word in his mind. The other person has to guess the right word. If he guesses, the he wins otherwise he loses.&lt;/p&gt;
 Input an list of words.
 Randomly pick a word from the list of words .
 Shuffle this word and present it to the other player.
 if word guesses by the player is same as the one picked from list of w
     player wins
 else
     player loses

ALTERNATE CODE TO GENERATE THIS GAME:
&lt;pre&gt;
import random
p1=input(&quot;enter player 1 name:&quot;)
p2=input(&quot;enter player 2 name:&quot;)
l=[&quot;rainbow&quot;,&quot;computer&quot;,&quot;robot&quot;,&quot;butter&quot;,&quot;vegetable&quot;,&quot;science&quot;,&quot;correct&quot;]
c1=c2=a1=a2=f1=f2=0
k=1
i=3
def play():
    n=random.choice(l)        ##n=chooses a word from list l
    l1=[]
    for j in n:
       l1.append(j)      ##creates a list for word in n
    for t in range(len(l1)):
       p=random.choice(l1)     ##this randomly displays letters in the list
       print(p)
       l1.remove(p)          ##to avoid the repetition of a letter
    s=input(&quot;enter the word:&quot;)
    if(s==n):
        print(&quot;correct&quot;)
        return 1
    else:
        print(&quot;not correct&quot;)
        print(&quot;answer is&quot;,n)
        return 0
def stat():
     print(&quot;player 1:&quot;)
     print(&quot;score:&quot;,c1)
     print(&quot;answered:&quot;,a1)
     print(&quot;failed:&quot;,f1)
     print(&quot;.............&quot;)
     print(&quot;player 2:&quot;)
     print(&quot;score:&quot;,c2)
     print(&quot;answered:&quot;,a2)
     print(&quot;failed&quot;,f2)
     if(c1&gt;c2):
         print(p1,&quot; won over &quot;,p2)
     elif(c1==c2):
         print(&quot;draw game&quot;)
     else:
         print(p2,&quot; won over &quot;,p1) 
while(i!=4):
      if(i==3):
         if(k==1):
             print(&quot;player 1 turn&quot;)
             print(&quot;your jumbled word is:&quot;)
             k=k+1
             m=play()
             if(m==1):      ##if guessed answer is correct,then score and no.of answered count will be increased
                c1+=1
                a1+=1
             else:
                f1+=1       ##else count of no.of failed to answered will be incremented
         else:
             print(&quot;player 2 turn&quot;)
             print(&quot;your jumbled word is:&quot;)
             k=k-1
             m=play()
             if(m==1):
                c2=c2+1
                a2=a2+1
             else:
                f2=f2+1
       if(i==2):
             print(&quot;present status&quot;)
             stat()
       i=int(input(&quot;enter your choice  1.stop 2.status 3.continue&quot;))
       if(i==1):
             stat()
             i=i+3
&lt;/pre&gt;
&lt;hr&gt;
=== JumbledWord Simple Logic, In Short ===
[[File:jumbledWord.gif]]
---
&lt;hr&gt;
'''Logic to create a Jumbled Word'''
&lt;hr&gt;
&lt;pre&gt;
#Get Jumbled Word and print it Horizontally
import random

def getJumbledWord(b):
    jumble=''
    l1 = [ b[i] for i in range(0, len(b)) ]
    for t in range(len(l1)):
       p=random.choice(l1)  #this randomly gets letters from the list      
       jumble=jumble+p       
       l1.remove(p)
    return jumble

b=input(&quot;Enter a word to make it jumbled : &quot;)
print(&quot;Jumbled Word : &quot;, getJumbledWord(b))
&lt;/pre&gt;
&lt;pre&gt;
Output:
Enter a word to make it jumbled : live and let live others
Jumbled Word :  vel  toldeisrte aihv len
==========================================
Enter a word to make it jumbled : junkfood
Jumbled Word :  nfukdooj
&lt;/pre&gt;
&lt;hr&gt;
'''Another Logic to create a Jumbled Word'''
&lt;hr&gt;
&lt;pre&gt;
import random
b=input(&quot;Enter a word to make it jumbled : &quot;)

def getJumbledWord1(b):
    l1 = [ b[i] for i in range(0, len(b)) ]
    random.shuffle(l1)
    str1 = ''.join(l1)
    return str1

print(&quot;Jumbled Word : &quot;, getJumbledWord1(b))
&lt;/pre&gt;

====Sample Output:====
&lt;pre&gt;
---- Output1 
Enter a word to make it jumbled : butter
Jumbled Word :  tbture

---- Output2 
Enter a word to make it jumbled : petriotism
Jumbled Word :  pittrosime
&lt;/pre&gt;

=Theory of Evolution=

== What is Evolution ? ==
Evolution is the change in heritable characteristics over successive generations. The theory of evolution explains that DNA, which acts as a carrier of genetic information from one generation to other, tends to change or mutate occasionally. These changes are reflected in next generations to come. This is how life has evolved on earth from bacteria to human beings.&lt;br&gt;
[[File:Evolution.png|500px]]

== Implementation ==
 &lt;p style=&quot;text-align:justify&quot;&gt;
An array representing DNA is stored in a file. As genes are forms of DNA, they contain information to be transferred to forthcoming generations. Assume that information is in the form of bits (in the form of 0s and 1s). A number is picked randomly from 1 to the size of the array. A new parameter has been introduced which decides whether mutation would occur or not. If the value of this new parameter is 1 (It is picked randomly from 1 to 100), then only change is reflected down the generations, otherwise it is not. The pseudo code is as follows :
&lt;/p&gt;
Input an array containing genetic information .
Randomly generate a number (say m) from 1 to length of the array. Randomly generate other number (say p) from 1 to 100.

&lt;pre&gt; 
    if p is equal to 1 then 
        if m is 1 then
          set it to 0
        else
          set it to 1
&lt;/pre&gt;
[[#TOP]]</text>
      <sha1>sokfe89k209tsdj0vcdxzwkc439etn4</sha1>
    </revision>
    <revision>
      <id>3742</id>
      <parentid>3741</parentid>
      <timestamp>2018-09-29T02:38:03Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* using index() function */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="30705">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_3 Contributors of this page]
*Week 3 Playlist: https://www.youtube.com/playlist?list=PLc_j0TNIaWxOVx_z9jAM2UB3RqYNXaoEo
=List=
List is a flexible data structure used for storing a group of data separated by comma. The elements in a list need not be of the same data type.

'''Example:'''
       List_1 = [ 1, 2,3] or 
       List_1 = [&quot;coffee&quot;, &quot;Tea&quot;, &quot;Milk&quot;] or
       List_1 = [1,&quot;coffee&quot;, &quot;Tea&quot;, 3, &quot;5&quot;]

==List Creation==
a) A list can be created by simply putting values (separated by comma) between square
 brackets as given below,
&lt;pre&gt;List_1 = [1,&quot;coffee&quot;, &quot;Tea&quot;, 3, &quot;5&quot;] #this creates a list by name List_1 containing
 following items
&lt;/pre&gt;


Or,
(b)A List can be created from scratch and elements can be added 
&lt;pre&gt;
        List_2 = [ ]
        List_2.append(&quot;Kala&quot;)
        List_2.append(&quot;Mala&quot;)
&lt;/pre&gt;
Here we use &quot;append&quot;, which is a function in python that enable us to append or attach an element to a list .
&lt;pre&gt;Thus List_2 will now hold [&quot;Kala&quot;,&quot;Mala&quot;]&lt;/pre&gt;

[[#Top]]

==Operations and Methods to work with List==
&lt;pre&gt;
a = [25,30,50,90,12,13]
b = [100,300,500,200,250]
&lt;/pre&gt;
&lt;hr&gt;
&lt;table border=2&gt;
  &lt;tr&gt;
    &lt;th&gt;&lt;b&gt;Method/&lt;br&gt;Operator&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Function&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Syntax&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Output&lt;/b&gt;&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;len()&lt;/td&gt;
    &lt;td&gt;Find length of a list&lt;/td&gt;
    &lt;td&gt;len(a)&lt;/td&gt;
    &lt;td&gt;6&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;max()&lt;/td&gt;
    &lt;td&gt;Find maximum element from the list&lt;/td&gt;
    &lt;td&gt;max(a)&lt;/td&gt;
    &lt;td&gt;90&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;min()&lt;/td&gt;
    &lt;td&gt;Find minimum element from the list&lt;/td&gt;
    &lt;td&gt;min(a)&lt;/td&gt;
    &lt;td&gt;12&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sum()&lt;/td&gt;
    &lt;td&gt;Returns sum of all elements of the list&lt;/td&gt;
    &lt;td&gt;sum(a)&lt;/td&gt;
    &lt;td&gt;220&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;reverse()&lt;/td&gt;
    &lt;td&gt;Reverses the original list&lt;/td&gt;
    &lt;td&gt;a.reverse()&lt;/td&gt;
    &lt;td&gt;[13, 12, 90, 50, 30, 25]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sort()&lt;/td&gt;
    &lt;td&gt;Sorts the original list in ascending order&lt;/td&gt;
    &lt;td&gt;a.sort()&lt;/td&gt;
    &lt;td&gt;[12, 13, 25, 30, 50, 90]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sorted()&lt;/td&gt;
    &lt;td&gt;Returns the new sorted list &lt;/td&gt;
    &lt;td&gt;sorted(a)&lt;/td&gt;
    &lt;td&gt;[12, 13, 25, 30, 50, 90]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;insert()&lt;/td&gt;
    &lt;td&gt;Insert at a particular index in the list, and shifts remaining elements&lt;/td&gt;
    &lt;td&gt;a.insert(3,3)&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 3, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;append()&lt;/td&gt;
    &lt;td&gt;Adds elements/object to the end of the list&lt;/td&gt;
    &lt;td&gt;a.append(5)&lt;br&gt;a.append([10,20])&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 5]&lt;br&gt;[25, 30, 50, 90, 12, 13, [10, 20]]&lt;br&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;extend()&lt;/td&gt;
    &lt;td&gt;Adds object to the end of the list as elements not as object&lt;/td&gt;
    &lt;td&gt;a.extend([10,20])&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 10, 20]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;*&amp;nbsp;&amp;nbsp;Repeatation&lt;br&gt;operator&lt;/td&gt;
    &lt;td&gt;Repeat the list for n times and returns a new list&lt;/td&gt;
    &lt;td&gt;a*2&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 25, 30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;+ Concatenation&lt;br&gt;operator&lt;/td&gt;
    &lt;td&gt;Concatenates two lists, and returns a new list&lt;/td&gt;
    &lt;td&gt;a+b&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 100, 300, 500, 200, 250]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;index()&lt;/td&gt;
    &lt;td&gt;Finds index of a particular element in the list or not&lt;/td&gt;
    &lt;td&gt;a.index(25)&lt;br&gt;a.index(0)&lt;br&gt;&lt;/td&gt;
    &lt;td&gt;0&lt;br&gt;&lt;br&gt;ValueError: 0 is not in list&lt;br&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;in operator&lt;/td&gt;
    &lt;td&gt;Finds whether a particular element is in the list or not, returns boolean&lt;/td&gt;
    &lt;td&gt;25 in a&lt;/td&gt;
    &lt;td&gt;True&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;not in operator&lt;/td&gt;
    &lt;td&gt;Checks if element is not available in list, returns boolean&lt;/td&gt;
    &lt;td&gt;25 not in a&lt;/td&gt;
    &lt;td&gt;False&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;count()&lt;/td&gt;
    &lt;td&gt;Counts the number of occurence of an element in the list&lt;/td&gt;
    &lt;td&gt;a.count(25)&lt;/td&gt;
    &lt;td&gt;1&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;remove()&lt;/td&gt;
    &lt;td&gt;Removes an element from the list&lt;/td&gt;
    &lt;td&gt;a.remove(25)&lt;/td&gt;
    &lt;td&gt; [30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;pop()&lt;/td&gt;
    &lt;td&gt;Delete and return item at index 0&lt;/td&gt;
    &lt;td&gt;a.pop(0)&lt;/td&gt;
    &lt;td&gt;25 , a will be [30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;del&lt;/td&gt;
    &lt;td&gt;Deletes item at a particular index from the list&lt;/td&gt;
    &lt;td&gt;del a[0]&lt;/td&gt;
    &lt;td&gt;[30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;all()&lt;/td&gt;
&lt;td&gt;Returns True, if all items in list are True or it is an empty list&lt;/td&gt;
&lt;td&gt;all([True, True, True])
all([])
&lt;/td&gt;
&lt;td&gt;True&lt;br&gt;
True&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;any()&lt;/td&gt;
&lt;td&gt;Returns True, if any item in list is True else return False&lt;/td&gt;
&lt;td&gt;any([True, True, True])&lt;br&gt;
any([True, False, True])&lt;br&gt;
any([])&lt;/td&gt;
&lt;td&gt;True&lt;br&gt;False&lt;br&gt;False&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;

==Printing the List==
=== Print whole list ===
A list can be printed simply or using a ''for / while'' loop 

 print(List_2)     # To print the entire list
This code will print      
 ['Kala','Mala']     

===Print element at a particular index===
&lt;pre&gt;
Using index position
    List_2[0]     # prints 'Kala' ,i.e,the value at index position 0.
    List_2[1]     # prints 'Mala'.
&lt;/pre&gt;
=== Without using index position ===
&lt;pre&gt;
for item in List_2:   # here item is a variable used to access elements in list.
       print(item)
   This code snippet prints 
    Kala
    Mala
&lt;/pre&gt;
[[#TOP]]

==Search for a particular element in list==
Elements in a list can be searched by one of the two ways:
=== using index() function===
&lt;pre&gt;
ages1 = [11,23,12,23,45]

#if element is available in the list, index() returns the index value on which, the element is
 present.
print(ages1.index(45))#Output: 4

#if element is not available in the list, index() returns ''ValueError''
print(ages1.index(0))#Output: ValueError:
&lt;/pre&gt;

In programming, if such error occurs, program gets terminated. It can be solved using exception handling.
 
e.g.
&lt;pre&gt;
ages1 = [11,23,12,23,45]

try:
    print(ages1.index(0))
except ValueError:
    print(&quot;Exception has occured&quot;)    
    print(&quot;Element is not found in the list&quot;)

&lt;/pre&gt;
&lt;pre&gt;
'''Output: 
Exception has occured
Element is not found in the list
'''&lt;/pre&gt;
[[#TOP]]

=== using 'in' operator===
''in'' operator is used to check whether a particular element is available in the list or not.e.g.

&lt;pre&gt;
ages1 = [11,23,12,23,45]
no=11

if no in ages1:
    print(&quot;no is there in the list&quot;)
else:    
    print(&quot;no is NOT there in the list&quot;)
&lt;/pre&gt;
&lt;pre&gt;
#Output: no is there in the list
&lt;/pre&gt;


'''Number is not there in the list'''
&lt;pre&gt;
ages1 = [11,23,12,23,45]
no=15

if no in ages1:
    print(&quot;no is there in the list&quot;)
else:    
    print(&quot;no is NOT there in the list&quot;)
&lt;/pre&gt;
&lt;pre&gt;
Output: no is NOT there in the list
&lt;/pre&gt;
[[#TOP]]

==Updating the List==
The lists can be updated using ''append'' or ''insert'' function.  Append adds the element to the end of the list and Insert adds the element in the specified position.
&lt;pre&gt;
   # add the element 'Sheela' to the end of the list.
   List_2.append(&quot;Sheela&quot;)    
   print (List_2) will output 
   ['Kala', 'Mala', 'Sheela']
&lt;/pre&gt;
   &lt;pre&gt;
# add the element &quot;Bala&quot; in the list at the index 1.
   List_2.insert(1,&quot;Bala&quot;)    
   print (List_2) will output 
   ['Kala', 'Bala','Mala', 'Sheela']
&lt;/pre&gt;

=== Extend the list by adding elements of other list at end using extend()===
&lt;pre&gt;
ages = [11,23,12,23,45]
ages.extend([57,58])
print(ages)
&lt;/pre&gt;

&lt;pre&gt;
#Output: [11, 23, 12, 23, 45, 57, 58]
&lt;/pre&gt;

==== Difference between ''append and extend'' ====
Difference between append and extend can be easily understood, by the following example.

&lt;pre&gt;
appendlist = [11,23,12,23,45]
appendlist.append([57,58])

extendlist= [11,23,12,23,45]
extendlist.extend([57,58])
&lt;/pre&gt;

&lt;pre&gt;
'''Output:
[11, 23, 12, 23, 45, [57, 58]]
[11, 23, 12, 23, 45, 57, 58]'''
&lt;/pre&gt;

[[#TOP]]

==Basic Operations on List==
===Frequency of Occurrence===
list.count(object) will return the number of times the object occur in the list.
  '''Example'''
    ages = [11,23,12,23,45,43,22,24,23]
    ages.count(23) will return
    3
    ages.count(100) will return
    0

===Length of the List===
len(list) will return the length of the list ie. the number of objects in the list.
  '''Example'''
&lt;pre&gt;
    ages = [11,23,12,23,45,43,22,24,23]
    len(ages) # Output: 9
&lt;/pre&gt;

To print the objects in the list either use ''for item in list'' or ''for index in range(len(list))''
&lt;pre&gt;
    for item in ages:       
        print (item)  
        (OR)
    for index in range(len(ages)) :
        print (ages[index])
&lt;/pre&gt;

===Sort the List===
list.sort() will sort the list in ascending order
  '''Example'''
    ages = [11,23,12,23,45,43,22,24,23]
    ages.sort() 
    print (ages) 
    [11, 12, 22, 23, 23, 23, 24, 43, 45]

[[#TOP]]

===Sort the List using sorted() function===
sorted(list1) will sort the list and return a new list, it doesn't modify the original list
&lt;br&gt;'''Example: Sort in ascending order'''
&lt;pre&gt;
ages = [11,23,12,23,45,43,22,24,23]
newList=sorted(ages)
print(newList)

#Output: [11, 12, 22, 23, 23, 23, 24, 43, 45]
&lt;/pre&gt;

&lt;br&gt;'''Example: Sort in descending order'''
&lt;pre&gt;
ages = [11,23,12,23,45,43,22,24,23]
newList=sorted(ages,reverse=True)
print(newList)

#Output: [45, 43, 24, 23, 23, 23, 22, 12, 11]
&lt;/pre&gt;

===Reverse the List===
list.reverse() will reverse the original list
  '''Example'''
    ages = [11, 12, 22, 23, 23, 23, 24, 43, 45]
    ages.reverse()
    print (ages)
    [45, 43, 24, 23, 23, 23, 22, 12, 11]

Both sort() and reverse() list operation will work on numeric and alphanumeric data list.

A special use of the reverse() function is to descend a list that is sorted in ascending order.

  '''Example'''
&lt;pre&gt;
ages = [11, 12, 22, 23, 23, 23, 24, 43, 45]
ages.sort()
print(ages)
ages.reverse()
print(ages)
&lt;/pre&gt;

===Slicing===
Used to retrieve an object or objects in a range as a list  
  '''Example'''

Use ''list[index]'' to retrieve the object at the given index
&lt;pre&gt;
In [1]: student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
In [2]: student[3]     #Object at index 3.  Remember index starts at 0
Out[2]: 'Geetha'      
&lt;/pre&gt;

Use ''list[start_index : end_index + 1]'' to retrieve objects from the start_index to end_index 
&lt;pre&gt;
In [3]: student[2:4]     # Objects from index 2 to 3 as List. Note the [ and ]
Out[3]: ['Vijay', 'Geetha']   
&lt;/pre&gt;

Use ''list[:]'' to retrieve objects from the starting of the list to the end of the list. 
The default start value will be the starting index of the list (i.e. 0) and the default end value
will be the length of the list 
&lt;pre&gt;
In [4]: student[:]        # prints the entire list
Out[4]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma', 'Janani']
&lt;/pre&gt;
&lt;pre&gt;
In [5]: student[:5]       # prints the objects from the start of the list upto object at index 4
Out[5]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran']
&lt;/pre&gt;
&lt;pre&gt;
In [6]: student[2:]       # prints the objects from index 2 upto the end of the list
Out[6]: ['Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma', 'Janani']
&lt;/pre&gt;

Negative index too is available in Python. It starts from last element of the list. i.e.
&lt;pre&gt;
In [7]:student[-1]        #prints last index of list
Out[7]: 'Janani'
&lt;/pre&gt;
&lt;pre&gt;
In [8]:student[-1:-8]     #prints empty list
Out[8]: []
&lt;/pre&gt;
&lt;pre&gt;
In [9]:student[-8:-1]     #prints -8th index to -1st index elements
Out[9]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma']
&lt;/pre&gt;

[[#TOP]]

===Removing Item from list ===
----

Is used to remove a specific item from the list.

'''Example:'''
 
Use list.remove(entry/value)  Or   del list[index]    Or list.pop(index)
&lt;pre&gt;
student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
student.remove(&quot;Arun&quot;)   #This will delete item &quot;Arun&quot;
         Or    
del student[0]           # This will delete item at index 0
         Or
student.pop(0)         # This will delete and return item at index 0
print(student)    
Output: &quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
&lt;/pre&gt;

[[#TOP]]

===Delete list ===
----
Used to delete complete list

'''Example'''

Use del &lt;list name&gt;
&lt;pre&gt;
student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
del student&lt;/pre&gt;

===Concatenation of two lists===
----
''+'' is the concatenation operator which is used concatenate two lists. 
&lt;pre&gt;
ages1 = [11,23,12,23,45]
ages2 = [25, 24, 43, 47]
age=ages1+ages2
print(age)
#Output: [11, 23, 12, 23, 45, 25, 24, 43, 47]
&lt;/pre&gt;

===Repeatation of a list ===
----
''*'' is the operator to repeat a particular list.
&lt;pre&gt;
ages1 = [11,23,12,23,45]
age=ages1*5 #ages1 list is repeated 5 times and stroed in ''age'' list
print(age)

#Output: [11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45]
&lt;/pre&gt;

=== all and any for List===
all() and any() are special functions to check whether all elements in iterable is ''True'' or any element is ''True''
&lt;ol&gt;
&lt;li&gt;If all elements in a list are ''True'', '''all()''' will return ''True''&lt;/li&gt;
&lt;li&gt;If iterable is ''empty'', '''all()''' will return ''True''&lt;/li&gt;
&lt;li&gt;If iterable contains at least one ''True'', '''any()''' will return ''True''&lt;/li&gt;
&lt;li&gt;If iterable is ''empty'', '''any()''' will return ''False''&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;
lsit=[True, True, True, True]
print(all(lsit))#Output: True
print(any(lsit))#Output: True

lsit1=[True, False, True, True]
print(all(lsit1))#Output: False
print(any(lsit1))#Output: True

lsit2=[False,False,False]
print(all(lsit2))#Output: False
print(any(lsit2))#Output: False

lsit3=[]
print(all(lsit3))#Output: True
print(any(lsit3))#Output: False
&lt;/pre&gt;

==Conditional Statements==
&lt;pre&gt;Conditionals are used to check the condition and change the flow of the program 
accordingly. They are realized in programming languages through if statement. The 
syntax is as follows :
&lt;pre&gt;
         if condition : 
            statement
&lt;/pre&gt;
    '''Note:''' Do not forget indentation (inserting space/tab) in the line after the
 if condition.
    
    In case you want to execute a set of statements when a condition is true and another

set of statement when the condition is false.
&lt;pre&gt;
         if condition : 
            statement 1
         else :
            statement 2
&lt;/pre&gt;

&lt;pre&gt;    
    Multiple if-else statements can be written as follows:
         if condition_1 : 
            statement 1
         elif condition_2 : # 'elif' is short for 'else if'
            statement 2
         elif condition_3 :
            statement 3
        .
        .
         else :
            final statement
&lt;/pre&gt;

[[#TOP]]

=Loops and Conditionals : Fizzbuzz=
====Loops====
Loops are used to execute a set of repetitive statements. They are realised
through 'while' and 'for' loops in programming languages. The syntax of 'for' loop is 
as follows :
&lt;pre&gt;
for LOOPVARIABLE in SEQUENCE: 
            STATEMENTS&lt;/pre&gt;

    '''e.g.''' to print all the data from a list we can write:
&lt;pre&gt;
for item in list_name:
      print(item)&lt;/pre&gt;
    OR
&lt;pre&gt;
for index in range(len(list_name)):
      print(list_name[index])
 &lt;/pre&gt;   
    The syntax for while loop is as follows :
&lt;pre&gt;    
while BOOLEANEXPRESSION: 
     STATEMENTS
     INCREMENT/DECREMENT
&lt;/pre&gt;    
    '''e.g.''' if we want to print all numbers from 1 to 10
&lt;pre&gt;
i=1
while i&lt;=10 :
    print(i,&quot; &quot;)
    i=i+1
    &lt;/pre&gt;
 
'while' loop has indefinite iteration (run-time unknown). So, there must be loop,  break statement in it.
 Whereas 'for' loop is definite in nature (i.e. known or predictable span).&lt;br&gt;

&lt;b&gt;NOTE: Python doesn't have anything like do-while loop.&lt;/b&gt;

[[#TOP]]

==Implementation==
Here, we try to demonstrate the concept of loops and conditionals through a game called Fizzbuzz. The rules are as follows :&lt;br/&gt;
[[File:fizzBuzz.gif]]

• if input number is a multiple of ’3’ print ”Fizz”
&lt;br/&gt;
• if input number is a multiple of ’5’ print ”Buzz”
&lt;br/&gt;
• if input number is a multiple of both '3' and ’5’ print ”FizzBuzz”
&lt;br/&gt;
The pseudo code is as follows :
&lt;pre&gt;
   If input no % 3 == 0 and  input no % 5 == 0 : 
       print ”Fizzbuzz”
   else if input no % 3 == 0 : 
       print ”Fizz”
   else if input no % 5 == 0 : 
       print ”Buzz”
   else :
       print the input no
&lt;/pre&gt;
 &lt;p style=&quot;text-align:justify&quot;&gt;
The order of statements execution matters to get the desired output. The highest priority condition should be first followed by other. In fizzbuzz programming, first checking should be done for both divisibility of 3 and 5. If condition not satisfied only then it should check individually for 3 or 5. So carefully choosing the order is crucial for better programming.
Note: There is some effect of present condition statements chosen on next conditions statements. That is why in first attempt fizzbuzz programming got struck.&lt;/p&gt;

Example: 
&lt;pre&gt;
#Code to achieve the above requirement in python3.
i = int(input(&quot;Enter the number&quot;)) 
if i%3 == 0 and i%5 == 0: print(i,&quot;FizzBuzz&quot;)  
elif i%5 == 0: print(i,&quot;Buzz&quot;)
elif i%3 == 0: print(i,&quot;Fizz&quot;)
else: print(i)
&lt;/pre&gt;
Lets put the same into a loop for a range given by the user.
&lt;pre&gt;
def fizzbuzzgame(start,stop):
    for i in range(start,stop+1):
        if i%3 == 0 and i%5 == 0:
            print(i,&quot;FizzBuzz&quot;)
        elif i%5 == 0:
            print(i,&quot;Buzz&quot;)
        elif i%3 == 0:
            print(i,&quot;Fizz&quot;)
        else: print(i)

fizzbuzzgame(50,100)
&lt;/pre&gt;
&lt;pre&gt;
#Output:
1235
Buzz
======================================
555
Fizzbuzz
======================================
1235
Buzz
======================================
999
Fizz
&lt;/pre&gt;

=== Fizz Buzz game in Interactive mode with Score ===
'''By Ms. Ami Tusharkant Choksi'''
&lt;pre&gt;
def fizzbuzzgame(i):
        if i%3 == 0 and i%5 == 0:
            print(i,&quot;FizzBuzz&quot;)
            return(&quot;fzbz&quot;)
        elif i%5 == 0:
            print(i,&quot;Buzz&quot;)
            return(&quot;bz&quot;)
        elif i%3 == 0:
            print(i,&quot;Fizz&quot;)
            return(&quot;fz&quot;)
        else:
            print(i)
            return(&quot;no&quot;)

ch = 'y'
fizzbuzz=0
fizz=0
buzz=0
nothing=0
print(&quot;&quot;&quot;

 /$$$$$$$$/$$                  /$$$$$$$                            
| $$_____|__/                 | $$__  $$                           
| $$      /$$/$$$$$$$$/$$$$$$$| $$  \ $$/$$   /$$/$$$$$$$$/$$$$$$$$
| $$$$$  | $|____ /$$|____ /$$| $$$$$$$| $$  | $|____ /$$|____ /$$/
| $$__/  | $$  /$$$$/   /$$$$/| $$__  $| $$  | $$  /$$$$/   /$$$$/ 
| $$     | $$ /$$__/   /$$__/ | $$  \ $| $$  | $$ /$$__/   /$$__/  
| $$     | $$/$$$$$$$$/$$$$$$$| $$$$$$$|  $$$$$$//$$$$$$$$/$$$$$$$$
|__/     |__|________|________|_______/ \______/|________|________/
                                                                  
&quot;&quot;&quot;)   
print('''

  /$$$$$$                                
 /$$__  $$                               
| $$  \__/ /$$$$$$ /$$$$$$/$$$$  /$$$$$$ 
| $$ /$$$$|____  $| $$_  $$_  $$/$$__  $$
| $$|_  $$ /$$$$$$| $$ \ $$ \ $| $$$$$$$$
| $$  \ $$/$$__  $| $$ | $$ | $| $$_____/
|  $$$$$$|  $$$$$$| $$ | $$ | $|  $$$$$$$
 \______/ \_______|__/ |__/ |__/\_______/
                                     
''')

while(ch == 'y'):
    n=int(input(&quot;Enter a Number : &quot;))
    winLoose=fizzbuzzgame(n)
    if(winLoose == &quot;fz&quot;):
        fizz+=1
    elif(winLoose == &quot;bz&quot;):
        buzz+=1
    elif(winLoose == &quot;fzbz&quot;):
        fizzbuzz+=1
    ch=input(&quot;Do you want to continue playing the game : (y/n)&quot;)
    if(ch=='n'):
        print('Congratulations, your score is\n FizzBuzz:%d\nFizz:%d\nBuzz:%d' %
(fizzbuzz,fizz,buzz))
    
'''Sample Output:

 /$$$$$$$$/$$                  /$$$$$$$                            
| $$_____|__/                 | $$__  $$                           
| $$      /$$/$$$$$$$$/$$$$$$$| $$  \ $$/$$   /$$/$$$$$$$$/$$$$$$$$
| $$$$$  | $|____ /$$|____ /$$| $$$$$$$| $$  | $|____ /$$|____ /$$/
| $$__/  | $$  /$$$$/   /$$$$/| $$__  $| $$  | $$  /$$$$/   /$$$$/ 
| $$     | $$ /$$__/   /$$__/ | $$  \ $| $$  | $$ /$$__/   /$$__/  
| $$     | $$/$$$$$$$$/$$$$$$$| $$$$$$$|  $$$$$$//$$$$$$$$/$$$$$$$$
|__/     |__|________|________|_______/ \______/|________|________/
                                                                                                                                   

  /$$$$$$                                
 /$$__  $$                               
| $$  \__/ /$$$$$$ /$$$$$$/$$$$  /$$$$$$ 
| $$ /$$$$|____  $| $$_  $$_  $$/$$__  $$
| $$|_  $$ /$$$$$$| $$ \ $$ \ $| $$$$$$$$
| $$  \ $$/$$__  $| $$ | $$ | $| $$_____/
|  $$$$$$|  $$$$$$| $$ | $$ | $|  $$$$$$$
 \______/ \_______|__/ |__/ |__/\_______/
                                         

Enter a Number : 666
666 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 777
777 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 555
555 FizzBuzz
Do you want to continue playing the game : (y/n)y
Enter a Number : 1
1
Do you want to continue playing the game : (y/n)y
Enter a Number : 789
789 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 25
25 Buzz
Do you want to continue playing the game : (y/n)n
Congratulations, your score is

FizzBuzz:1
Fizz:3
Buzz:1

&lt;/pre&gt;

=Crowd Computing: Just Estimate=
==Wisdom of Crowds==
 &lt;p style=&quot;text-align:justify&quot;&gt;
The concept of ’Wisdom of Crowds’ was proposed by Francis Galton. A weight-judging competition was carried on at the annual show of the West of England Fat Stock and Poultry Exhibition recently held at Plymouth, A fat ox having been selected, competitors bought stamped and numbered cards, each, on which to inscribe their respective names, addresses, and estimates of what the ox would weigh after it had been slaughtered. Those who guessed most successfully received prizes. About 8oo tickets were issued to the par- ticipants. The middlemost estimate of all the estimates recorded was 1207 lbs and the actual weight of the ox was 1198 lbs.&lt;/p&gt;

==Our Experiment==
 &lt;p style=&quot;text-align:justify&quot;&gt;
The crowd had to guess the number of candies/gems in a jar. Around 75 people participated in the experiment. The actual number of gems in the jar were 375. The median of all estimates came out to be 300 and the mean of all the estimates came out to be around 396. Median underestimated and mean overestimated the actual value. So according to recent studies, Trimmed mean must be used as an aggregate measure to estimate where Wisdom of Crowds is involved.
&lt;/p&gt;
[[File:Gemsjar.jpg|center|200px|caption]]

===Trimmed Mean===
 &lt;p style=&quot;text-align:justify&quot;&gt;
In these kinds of experiments, 10% trimmed mean is usually followed. For calculating 10% trimmed mean, remove 10% smallest and 10% largest values from the sample. Calculate the mean of the sample obtained. In the above experiment, the trimmed mean came out to be around 351 which is very close to the actual value.&lt;/p&gt;

==Implementation==
Here, we try to demonstrate the concept of trimmed mean through crowd computing.
&lt;ol&gt;
&lt;li&gt; Input a list of estimates done by the crowd .&lt;/li&gt;
&lt;li&gt; Sort the list.&lt;/li&gt;
&lt;li&gt; Remove the 10% smallest values.&lt;/li&gt;
&lt;li&gt; Remove the 10% largest values.
&lt;li&gt; Calculate the mean of the new list obtained .&lt;/li&gt;&lt;/ol&gt;&lt;hr&gt;

==Data of Experiment==       
    Estimates =[1000,1010,1786,2000,1500,1500,100,120,150,150,150,170,175,180,197,200,200,200,200,200,200,220,220,220,220,234,250,250,250,250,250,250,250,250,250,263,270,275,275,286,300,
                300,300,300,300,300,300,300,320,350,350,350,400, 400,400,400,400,450,467,500,500,500,500,500,500,500,550,550,600,600,600,650,700,700,720]

    '''CODE:'''
&lt;pre&gt;
Estimates = [1000,1010,1786,2000,1500,1500,100,120,150,150,150,170,175,180,197,200,200,200,200,200,200,220,220,220,220,234,250,250,250,250,250,250,250,250,250,263,270,275,275,286,300,                300,300,300,300,300,300,300,320,350,350,350,400,400,400,400,400,450,467,500,500,500,500,500,500,500,550,550,600,600,600,650,700,700,720]
Estimates.sort()
offset = int(0.10*len(Estimates))
for i in range(offset):
       del Estimates[0]
       del Estimates[-1]
Sum = 0    
for i in range(len(Estimates)):
       Sum += Estimates[i]
Mean_Value = Sum/len(Estimates)
print(&quot;Mean : &quot;, int(Mean_Value))
#Output:
Mean :  351
&lt;/pre&gt;
&lt;hr&gt;
==Trimmed Mean for the above example== 
&lt;h3&gt;Using scipy library&lt;/h3&gt;
&lt;pre&gt;
#import scipy to use the method of trim_mean
from scipy import stats
trimMean = stats.trim_mean(Estimates, 0.1) # Trim 10% at both ends
print(&quot;Trimmed Mean : &quot;,trimMean)
#Output:
Trimmed Mean :  335.1020408163265
&lt;/pre&gt;

&lt;h3&gt;Without using scipy library&lt;/h3&gt;
&lt;pre&gt;
#Trimmed mean with 10%
p=10/100
#sorted data
data=[2, 4, 6, 7, 11, 21, 81, 90, 105, 121]
n = len(data)
#Remove elements from both end
rem=int(n*p)
newData = data[rem:-rem]
mean = 0
for i in newData:
    mean += i
mean = int(mean/len(newData))
print(&quot;Trimmed mean : &quot;,mean)
#Output: Trimmed mean :  40
&lt;/pre&gt;
[[#Top]]

=Jumbled_Words Permutations: Jumbled Words=
==What are Permutations ?==
A permutation also called ordering of selected number of elements from a list denoted by nPr here we are choosing all elements of a list and so n=r&lt;br&gt;
nPr=n!/(n-r)!&lt;br&gt; as n=r
nPn=n!&lt;br&gt; which gives all possible arrangement of elements present in a list.

 For example, permutations of list [1,2,3] are [1,2,3], [1,3,2], [2,1,3], [2,3,1], 
[3,1,2], and [3,2,1]. 
The number of permutations of a list of elements nPn is given by n!. For example, there are 2! = 2 x 1 = 2 permutations of [1,2], namely [1,2] and [2,1], and 3! = 3 x 2 x 1 = 6 permutations of [1,2,3], as mentioned above.&lt;br/&gt;
[[File:Permutations.jpg]]

==Implementation==
 &lt;p style=&quot;text-align:justify&quot;&gt;
Here, we try to demonstrate the concept of permutations through jumbled words. It is a two player game in which one person presents the other person a different permutation of the word in his mind. The other person has to guess the right word. If he guesses, the he wins otherwise he loses.&lt;/p&gt;
 Input an list of words.
 Randomly pick a word from the list of words .
 Shuffle this word and present it to the other player.
 if word guesses by the player is same as the one picked from list of w
     player wins
 else
     player loses

ALTERNATE CODE TO GENERATE THIS GAME:
&lt;pre&gt;
import random
p1=input(&quot;enter player 1 name:&quot;)
p2=input(&quot;enter player 2 name:&quot;)
l=[&quot;rainbow&quot;,&quot;computer&quot;,&quot;robot&quot;,&quot;butter&quot;,&quot;vegetable&quot;,&quot;science&quot;,&quot;correct&quot;]
c1=c2=a1=a2=f1=f2=0
k=1
i=3
def play():
    n=random.choice(l)        ##n=chooses a word from list l
    l1=[]
    for j in n:
       l1.append(j)      ##creates a list for word in n
    for t in range(len(l1)):
       p=random.choice(l1)     ##this randomly displays letters in the list
       print(p)
       l1.remove(p)          ##to avoid the repetition of a letter
    s=input(&quot;enter the word:&quot;)
    if(s==n):
        print(&quot;correct&quot;)
        return 1
    else:
        print(&quot;not correct&quot;)
        print(&quot;answer is&quot;,n)
        return 0
def stat():
     print(&quot;player 1:&quot;)
     print(&quot;score:&quot;,c1)
     print(&quot;answered:&quot;,a1)
     print(&quot;failed:&quot;,f1)
     print(&quot;.............&quot;)
     print(&quot;player 2:&quot;)
     print(&quot;score:&quot;,c2)
     print(&quot;answered:&quot;,a2)
     print(&quot;failed&quot;,f2)
     if(c1&gt;c2):
         print(p1,&quot; won over &quot;,p2)
     elif(c1==c2):
         print(&quot;draw game&quot;)
     else:
         print(p2,&quot; won over &quot;,p1) 
while(i!=4):
      if(i==3):
         if(k==1):
             print(&quot;player 1 turn&quot;)
             print(&quot;your jumbled word is:&quot;)
             k=k+1
             m=play()
             if(m==1):      ##if guessed answer is correct,then score and no.of answered count will be increased
                c1+=1
                a1+=1
             else:
                f1+=1       ##else count of no.of failed to answered will be incremented
         else:
             print(&quot;player 2 turn&quot;)
             print(&quot;your jumbled word is:&quot;)
             k=k-1
             m=play()
             if(m==1):
                c2=c2+1
                a2=a2+1
             else:
                f2=f2+1
       if(i==2):
             print(&quot;present status&quot;)
             stat()
       i=int(input(&quot;enter your choice  1.stop 2.status 3.continue&quot;))
       if(i==1):
             stat()
             i=i+3
&lt;/pre&gt;
&lt;hr&gt;
=== JumbledWord Simple Logic, In Short ===
[[File:jumbledWord.gif]]
---
&lt;hr&gt;
'''Logic to create a Jumbled Word'''
&lt;hr&gt;
&lt;pre&gt;
#Get Jumbled Word and print it Horizontally
import random

def getJumbledWord(b):
    jumble=''
    l1 = [ b[i] for i in range(0, len(b)) ]
    for t in range(len(l1)):
       p=random.choice(l1)  #this randomly gets letters from the list      
       jumble=jumble+p       
       l1.remove(p)
    return jumble

b=input(&quot;Enter a word to make it jumbled : &quot;)
print(&quot;Jumbled Word : &quot;, getJumbledWord(b))
&lt;/pre&gt;
&lt;pre&gt;
Output:
Enter a word to make it jumbled : live and let live others
Jumbled Word :  vel  toldeisrte aihv len
==========================================
Enter a word to make it jumbled : junkfood
Jumbled Word :  nfukdooj
&lt;/pre&gt;
&lt;hr&gt;
'''Another Logic to create a Jumbled Word'''
&lt;hr&gt;
&lt;pre&gt;
import random
b=input(&quot;Enter a word to make it jumbled : &quot;)

def getJumbledWord1(b):
    l1 = [ b[i] for i in range(0, len(b)) ]
    random.shuffle(l1)
    str1 = ''.join(l1)
    return str1

print(&quot;Jumbled Word : &quot;, getJumbledWord1(b))
&lt;/pre&gt;

====Sample Output:====
&lt;pre&gt;
---- Output1 
Enter a word to make it jumbled : butter
Jumbled Word :  tbture

---- Output2 
Enter a word to make it jumbled : petriotism
Jumbled Word :  pittrosime
&lt;/pre&gt;

=Theory of Evolution=

== What is Evolution ? ==
Evolution is the change in heritable characteristics over successive generations. The theory of evolution explains that DNA, which acts as a carrier of genetic information from one generation to other, tends to change or mutate occasionally. These changes are reflected in next generations to come. This is how life has evolved on earth from bacteria to human beings.&lt;br&gt;
[[File:Evolution.png|500px]]

== Implementation ==
 &lt;p style=&quot;text-align:justify&quot;&gt;
An array representing DNA is stored in a file. As genes are forms of DNA, they contain information to be transferred to forthcoming generations. Assume that information is in the form of bits (in the form of 0s and 1s). A number is picked randomly from 1 to the size of the array. A new parameter has been introduced which decides whether mutation would occur or not. If the value of this new parameter is 1 (It is picked randomly from 1 to 100), then only change is reflected down the generations, otherwise it is not. The pseudo code is as follows :
&lt;/p&gt;
Input an array containing genetic information .
Randomly generate a number (say m) from 1 to length of the array. Randomly generate other number (say p) from 1 to 100.

&lt;pre&gt; 
    if p is equal to 1 then 
        if m is 1 then
          set it to 0
        else
          set it to 1
&lt;/pre&gt;
[[#TOP]]</text>
      <sha1>373nbkzjd67r33jdmzq8zeq0muqaijk</sha1>
    </revision>
    <revision>
      <id>3743</id>
      <parentid>3742</parentid>
      <timestamp>2018-09-29T02:38:26Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* using index() function */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="30705">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_3 Contributors of this page]
*Week 3 Playlist: https://www.youtube.com/playlist?list=PLc_j0TNIaWxOVx_z9jAM2UB3RqYNXaoEo
=List=
List is a flexible data structure used for storing a group of data separated by comma. The elements in a list need not be of the same data type.

'''Example:'''
       List_1 = [ 1, 2,3] or 
       List_1 = [&quot;coffee&quot;, &quot;Tea&quot;, &quot;Milk&quot;] or
       List_1 = [1,&quot;coffee&quot;, &quot;Tea&quot;, 3, &quot;5&quot;]

==List Creation==
a) A list can be created by simply putting values (separated by comma) between square
 brackets as given below,
&lt;pre&gt;List_1 = [1,&quot;coffee&quot;, &quot;Tea&quot;, 3, &quot;5&quot;] #this creates a list by name List_1 containing
 following items
&lt;/pre&gt;


Or,
(b)A List can be created from scratch and elements can be added 
&lt;pre&gt;
        List_2 = [ ]
        List_2.append(&quot;Kala&quot;)
        List_2.append(&quot;Mala&quot;)
&lt;/pre&gt;
Here we use &quot;append&quot;, which is a function in python that enable us to append or attach an element to a list .
&lt;pre&gt;Thus List_2 will now hold [&quot;Kala&quot;,&quot;Mala&quot;]&lt;/pre&gt;

[[#Top]]

==Operations and Methods to work with List==
&lt;pre&gt;
a = [25,30,50,90,12,13]
b = [100,300,500,200,250]
&lt;/pre&gt;
&lt;hr&gt;
&lt;table border=2&gt;
  &lt;tr&gt;
    &lt;th&gt;&lt;b&gt;Method/&lt;br&gt;Operator&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Function&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Syntax&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Output&lt;/b&gt;&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;len()&lt;/td&gt;
    &lt;td&gt;Find length of a list&lt;/td&gt;
    &lt;td&gt;len(a)&lt;/td&gt;
    &lt;td&gt;6&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;max()&lt;/td&gt;
    &lt;td&gt;Find maximum element from the list&lt;/td&gt;
    &lt;td&gt;max(a)&lt;/td&gt;
    &lt;td&gt;90&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;min()&lt;/td&gt;
    &lt;td&gt;Find minimum element from the list&lt;/td&gt;
    &lt;td&gt;min(a)&lt;/td&gt;
    &lt;td&gt;12&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sum()&lt;/td&gt;
    &lt;td&gt;Returns sum of all elements of the list&lt;/td&gt;
    &lt;td&gt;sum(a)&lt;/td&gt;
    &lt;td&gt;220&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;reverse()&lt;/td&gt;
    &lt;td&gt;Reverses the original list&lt;/td&gt;
    &lt;td&gt;a.reverse()&lt;/td&gt;
    &lt;td&gt;[13, 12, 90, 50, 30, 25]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sort()&lt;/td&gt;
    &lt;td&gt;Sorts the original list in ascending order&lt;/td&gt;
    &lt;td&gt;a.sort()&lt;/td&gt;
    &lt;td&gt;[12, 13, 25, 30, 50, 90]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sorted()&lt;/td&gt;
    &lt;td&gt;Returns the new sorted list &lt;/td&gt;
    &lt;td&gt;sorted(a)&lt;/td&gt;
    &lt;td&gt;[12, 13, 25, 30, 50, 90]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;insert()&lt;/td&gt;
    &lt;td&gt;Insert at a particular index in the list, and shifts remaining elements&lt;/td&gt;
    &lt;td&gt;a.insert(3,3)&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 3, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;append()&lt;/td&gt;
    &lt;td&gt;Adds elements/object to the end of the list&lt;/td&gt;
    &lt;td&gt;a.append(5)&lt;br&gt;a.append([10,20])&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 5]&lt;br&gt;[25, 30, 50, 90, 12, 13, [10, 20]]&lt;br&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;extend()&lt;/td&gt;
    &lt;td&gt;Adds object to the end of the list as elements not as object&lt;/td&gt;
    &lt;td&gt;a.extend([10,20])&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 10, 20]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;*&amp;nbsp;&amp;nbsp;Repeatation&lt;br&gt;operator&lt;/td&gt;
    &lt;td&gt;Repeat the list for n times and returns a new list&lt;/td&gt;
    &lt;td&gt;a*2&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 25, 30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;+ Concatenation&lt;br&gt;operator&lt;/td&gt;
    &lt;td&gt;Concatenates two lists, and returns a new list&lt;/td&gt;
    &lt;td&gt;a+b&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 100, 300, 500, 200, 250]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;index()&lt;/td&gt;
    &lt;td&gt;Finds index of a particular element in the list or not&lt;/td&gt;
    &lt;td&gt;a.index(25)&lt;br&gt;a.index(0)&lt;br&gt;&lt;/td&gt;
    &lt;td&gt;0&lt;br&gt;&lt;br&gt;ValueError: 0 is not in list&lt;br&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;in operator&lt;/td&gt;
    &lt;td&gt;Finds whether a particular element is in the list or not, returns boolean&lt;/td&gt;
    &lt;td&gt;25 in a&lt;/td&gt;
    &lt;td&gt;True&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;not in operator&lt;/td&gt;
    &lt;td&gt;Checks if element is not available in list, returns boolean&lt;/td&gt;
    &lt;td&gt;25 not in a&lt;/td&gt;
    &lt;td&gt;False&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;count()&lt;/td&gt;
    &lt;td&gt;Counts the number of occurence of an element in the list&lt;/td&gt;
    &lt;td&gt;a.count(25)&lt;/td&gt;
    &lt;td&gt;1&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;remove()&lt;/td&gt;
    &lt;td&gt;Removes an element from the list&lt;/td&gt;
    &lt;td&gt;a.remove(25)&lt;/td&gt;
    &lt;td&gt; [30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;pop()&lt;/td&gt;
    &lt;td&gt;Delete and return item at index 0&lt;/td&gt;
    &lt;td&gt;a.pop(0)&lt;/td&gt;
    &lt;td&gt;25 , a will be [30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;del&lt;/td&gt;
    &lt;td&gt;Deletes item at a particular index from the list&lt;/td&gt;
    &lt;td&gt;del a[0]&lt;/td&gt;
    &lt;td&gt;[30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;all()&lt;/td&gt;
&lt;td&gt;Returns True, if all items in list are True or it is an empty list&lt;/td&gt;
&lt;td&gt;all([True, True, True])
all([])
&lt;/td&gt;
&lt;td&gt;True&lt;br&gt;
True&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;any()&lt;/td&gt;
&lt;td&gt;Returns True, if any item in list is True else return False&lt;/td&gt;
&lt;td&gt;any([True, True, True])&lt;br&gt;
any([True, False, True])&lt;br&gt;
any([])&lt;/td&gt;
&lt;td&gt;True&lt;br&gt;False&lt;br&gt;False&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;

==Printing the List==
=== Print whole list ===
A list can be printed simply or using a ''for / while'' loop 

 print(List_2)     # To print the entire list
This code will print      
 ['Kala','Mala']     

===Print element at a particular index===
&lt;pre&gt;
Using index position
    List_2[0]     # prints 'Kala' ,i.e,the value at index position 0.
    List_2[1]     # prints 'Mala'.
&lt;/pre&gt;
=== Without using index position ===
&lt;pre&gt;
for item in List_2:   # here item is a variable used to access elements in list.
       print(item)
   This code snippet prints 
    Kala
    Mala
&lt;/pre&gt;
[[#TOP]]

==Search for a particular element in list==
Elements in a list can be searched by one of the two ways:
=== using index() function===
&lt;pre&gt;
ages1 = [11,23,12,23,45]

#if element is available in the list, index() returns the index value on which, the element is
 present.
print(ages1.index(45))#Output: 4

#if element is not available in the list, index() returns ''ValueError''
print(ages1.index(0))#Output: ValueError:
&lt;/pre&gt;

In programming, if such error occurs, program gets terminated. It can be solved using exception handling.
 
e.g.
&lt;pre&gt;
ages1 = [11,23,12,23,45]

try:
    print(ages1.index(0))
except ValueError:
    print(&quot;Exception has occured&quot;)    
    print(&quot;Element is not found in the list&quot;)

&lt;/pre&gt;
&lt;pre&gt;
'''Output: 
Exception has occured
Element is not found in the list
'''&lt;/pre&gt;
[[#Top]]

=== using 'in' operator===
''in'' operator is used to check whether a particular element is available in the list or not.e.g.

&lt;pre&gt;
ages1 = [11,23,12,23,45]
no=11

if no in ages1:
    print(&quot;no is there in the list&quot;)
else:    
    print(&quot;no is NOT there in the list&quot;)
&lt;/pre&gt;
&lt;pre&gt;
#Output: no is there in the list
&lt;/pre&gt;


'''Number is not there in the list'''
&lt;pre&gt;
ages1 = [11,23,12,23,45]
no=15

if no in ages1:
    print(&quot;no is there in the list&quot;)
else:    
    print(&quot;no is NOT there in the list&quot;)
&lt;/pre&gt;
&lt;pre&gt;
Output: no is NOT there in the list
&lt;/pre&gt;
[[#TOP]]

==Updating the List==
The lists can be updated using ''append'' or ''insert'' function.  Append adds the element to the end of the list and Insert adds the element in the specified position.
&lt;pre&gt;
   # add the element 'Sheela' to the end of the list.
   List_2.append(&quot;Sheela&quot;)    
   print (List_2) will output 
   ['Kala', 'Mala', 'Sheela']
&lt;/pre&gt;
   &lt;pre&gt;
# add the element &quot;Bala&quot; in the list at the index 1.
   List_2.insert(1,&quot;Bala&quot;)    
   print (List_2) will output 
   ['Kala', 'Bala','Mala', 'Sheela']
&lt;/pre&gt;

=== Extend the list by adding elements of other list at end using extend()===
&lt;pre&gt;
ages = [11,23,12,23,45]
ages.extend([57,58])
print(ages)
&lt;/pre&gt;

&lt;pre&gt;
#Output: [11, 23, 12, 23, 45, 57, 58]
&lt;/pre&gt;

==== Difference between ''append and extend'' ====
Difference between append and extend can be easily understood, by the following example.

&lt;pre&gt;
appendlist = [11,23,12,23,45]
appendlist.append([57,58])

extendlist= [11,23,12,23,45]
extendlist.extend([57,58])
&lt;/pre&gt;

&lt;pre&gt;
'''Output:
[11, 23, 12, 23, 45, [57, 58]]
[11, 23, 12, 23, 45, 57, 58]'''
&lt;/pre&gt;

[[#TOP]]

==Basic Operations on List==
===Frequency of Occurrence===
list.count(object) will return the number of times the object occur in the list.
  '''Example'''
    ages = [11,23,12,23,45,43,22,24,23]
    ages.count(23) will return
    3
    ages.count(100) will return
    0

===Length of the List===
len(list) will return the length of the list ie. the number of objects in the list.
  '''Example'''
&lt;pre&gt;
    ages = [11,23,12,23,45,43,22,24,23]
    len(ages) # Output: 9
&lt;/pre&gt;

To print the objects in the list either use ''for item in list'' or ''for index in range(len(list))''
&lt;pre&gt;
    for item in ages:       
        print (item)  
        (OR)
    for index in range(len(ages)) :
        print (ages[index])
&lt;/pre&gt;

===Sort the List===
list.sort() will sort the list in ascending order
  '''Example'''
    ages = [11,23,12,23,45,43,22,24,23]
    ages.sort() 
    print (ages) 
    [11, 12, 22, 23, 23, 23, 24, 43, 45]

[[#TOP]]

===Sort the List using sorted() function===
sorted(list1) will sort the list and return a new list, it doesn't modify the original list
&lt;br&gt;'''Example: Sort in ascending order'''
&lt;pre&gt;
ages = [11,23,12,23,45,43,22,24,23]
newList=sorted(ages)
print(newList)

#Output: [11, 12, 22, 23, 23, 23, 24, 43, 45]
&lt;/pre&gt;

&lt;br&gt;'''Example: Sort in descending order'''
&lt;pre&gt;
ages = [11,23,12,23,45,43,22,24,23]
newList=sorted(ages,reverse=True)
print(newList)

#Output: [45, 43, 24, 23, 23, 23, 22, 12, 11]
&lt;/pre&gt;

===Reverse the List===
list.reverse() will reverse the original list
  '''Example'''
    ages = [11, 12, 22, 23, 23, 23, 24, 43, 45]
    ages.reverse()
    print (ages)
    [45, 43, 24, 23, 23, 23, 22, 12, 11]

Both sort() and reverse() list operation will work on numeric and alphanumeric data list.

A special use of the reverse() function is to descend a list that is sorted in ascending order.

  '''Example'''
&lt;pre&gt;
ages = [11, 12, 22, 23, 23, 23, 24, 43, 45]
ages.sort()
print(ages)
ages.reverse()
print(ages)
&lt;/pre&gt;

===Slicing===
Used to retrieve an object or objects in a range as a list  
  '''Example'''

Use ''list[index]'' to retrieve the object at the given index
&lt;pre&gt;
In [1]: student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
In [2]: student[3]     #Object at index 3.  Remember index starts at 0
Out[2]: 'Geetha'      
&lt;/pre&gt;

Use ''list[start_index : end_index + 1]'' to retrieve objects from the start_index to end_index 
&lt;pre&gt;
In [3]: student[2:4]     # Objects from index 2 to 3 as List. Note the [ and ]
Out[3]: ['Vijay', 'Geetha']   
&lt;/pre&gt;

Use ''list[:]'' to retrieve objects from the starting of the list to the end of the list. 
The default start value will be the starting index of the list (i.e. 0) and the default end value
will be the length of the list 
&lt;pre&gt;
In [4]: student[:]        # prints the entire list
Out[4]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma', 'Janani']
&lt;/pre&gt;
&lt;pre&gt;
In [5]: student[:5]       # prints the objects from the start of the list upto object at index 4
Out[5]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran']
&lt;/pre&gt;
&lt;pre&gt;
In [6]: student[2:]       # prints the objects from index 2 upto the end of the list
Out[6]: ['Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma', 'Janani']
&lt;/pre&gt;

Negative index too is available in Python. It starts from last element of the list. i.e.
&lt;pre&gt;
In [7]:student[-1]        #prints last index of list
Out[7]: 'Janani'
&lt;/pre&gt;
&lt;pre&gt;
In [8]:student[-1:-8]     #prints empty list
Out[8]: []
&lt;/pre&gt;
&lt;pre&gt;
In [9]:student[-8:-1]     #prints -8th index to -1st index elements
Out[9]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma']
&lt;/pre&gt;

[[#TOP]]

===Removing Item from list ===
----

Is used to remove a specific item from the list.

'''Example:'''
 
Use list.remove(entry/value)  Or   del list[index]    Or list.pop(index)
&lt;pre&gt;
student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
student.remove(&quot;Arun&quot;)   #This will delete item &quot;Arun&quot;
         Or    
del student[0]           # This will delete item at index 0
         Or
student.pop(0)         # This will delete and return item at index 0
print(student)    
Output: &quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
&lt;/pre&gt;

[[#TOP]]

===Delete list ===
----
Used to delete complete list

'''Example'''

Use del &lt;list name&gt;
&lt;pre&gt;
student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
del student&lt;/pre&gt;

===Concatenation of two lists===
----
''+'' is the concatenation operator which is used concatenate two lists. 
&lt;pre&gt;
ages1 = [11,23,12,23,45]
ages2 = [25, 24, 43, 47]
age=ages1+ages2
print(age)
#Output: [11, 23, 12, 23, 45, 25, 24, 43, 47]
&lt;/pre&gt;

===Repeatation of a list ===
----
''*'' is the operator to repeat a particular list.
&lt;pre&gt;
ages1 = [11,23,12,23,45]
age=ages1*5 #ages1 list is repeated 5 times and stroed in ''age'' list
print(age)

#Output: [11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45]
&lt;/pre&gt;

=== all and any for List===
all() and any() are special functions to check whether all elements in iterable is ''True'' or any element is ''True''
&lt;ol&gt;
&lt;li&gt;If all elements in a list are ''True'', '''all()''' will return ''True''&lt;/li&gt;
&lt;li&gt;If iterable is ''empty'', '''all()''' will return ''True''&lt;/li&gt;
&lt;li&gt;If iterable contains at least one ''True'', '''any()''' will return ''True''&lt;/li&gt;
&lt;li&gt;If iterable is ''empty'', '''any()''' will return ''False''&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;
lsit=[True, True, True, True]
print(all(lsit))#Output: True
print(any(lsit))#Output: True

lsit1=[True, False, True, True]
print(all(lsit1))#Output: False
print(any(lsit1))#Output: True

lsit2=[False,False,False]
print(all(lsit2))#Output: False
print(any(lsit2))#Output: False

lsit3=[]
print(all(lsit3))#Output: True
print(any(lsit3))#Output: False
&lt;/pre&gt;

==Conditional Statements==
&lt;pre&gt;Conditionals are used to check the condition and change the flow of the program 
accordingly. They are realized in programming languages through if statement. The 
syntax is as follows :
&lt;pre&gt;
         if condition : 
            statement
&lt;/pre&gt;
    '''Note:''' Do not forget indentation (inserting space/tab) in the line after the
 if condition.
    
    In case you want to execute a set of statements when a condition is true and another

set of statement when the condition is false.
&lt;pre&gt;
         if condition : 
            statement 1
         else :
            statement 2
&lt;/pre&gt;

&lt;pre&gt;    
    Multiple if-else statements can be written as follows:
         if condition_1 : 
            statement 1
         elif condition_2 : # 'elif' is short for 'else if'
            statement 2
         elif condition_3 :
            statement 3
        .
        .
         else :
            final statement
&lt;/pre&gt;

[[#TOP]]

=Loops and Conditionals : Fizzbuzz=
====Loops====
Loops are used to execute a set of repetitive statements. They are realised
through 'while' and 'for' loops in programming languages. The syntax of 'for' loop is 
as follows :
&lt;pre&gt;
for LOOPVARIABLE in SEQUENCE: 
            STATEMENTS&lt;/pre&gt;

    '''e.g.''' to print all the data from a list we can write:
&lt;pre&gt;
for item in list_name:
      print(item)&lt;/pre&gt;
    OR
&lt;pre&gt;
for index in range(len(list_name)):
      print(list_name[index])
 &lt;/pre&gt;   
    The syntax for while loop is as follows :
&lt;pre&gt;    
while BOOLEANEXPRESSION: 
     STATEMENTS
     INCREMENT/DECREMENT
&lt;/pre&gt;    
    '''e.g.''' if we want to print all numbers from 1 to 10
&lt;pre&gt;
i=1
while i&lt;=10 :
    print(i,&quot; &quot;)
    i=i+1
    &lt;/pre&gt;
 
'while' loop has indefinite iteration (run-time unknown). So, there must be loop,  break statement in it.
 Whereas 'for' loop is definite in nature (i.e. known or predictable span).&lt;br&gt;

&lt;b&gt;NOTE: Python doesn't have anything like do-while loop.&lt;/b&gt;

[[#TOP]]

==Implementation==
Here, we try to demonstrate the concept of loops and conditionals through a game called Fizzbuzz. The rules are as follows :&lt;br/&gt;
[[File:fizzBuzz.gif]]

• if input number is a multiple of ’3’ print ”Fizz”
&lt;br/&gt;
• if input number is a multiple of ’5’ print ”Buzz”
&lt;br/&gt;
• if input number is a multiple of both '3' and ’5’ print ”FizzBuzz”
&lt;br/&gt;
The pseudo code is as follows :
&lt;pre&gt;
   If input no % 3 == 0 and  input no % 5 == 0 : 
       print ”Fizzbuzz”
   else if input no % 3 == 0 : 
       print ”Fizz”
   else if input no % 5 == 0 : 
       print ”Buzz”
   else :
       print the input no
&lt;/pre&gt;
 &lt;p style=&quot;text-align:justify&quot;&gt;
The order of statements execution matters to get the desired output. The highest priority condition should be first followed by other. In fizzbuzz programming, first checking should be done for both divisibility of 3 and 5. If condition not satisfied only then it should check individually for 3 or 5. So carefully choosing the order is crucial for better programming.
Note: There is some effect of present condition statements chosen on next conditions statements. That is why in first attempt fizzbuzz programming got struck.&lt;/p&gt;

Example: 
&lt;pre&gt;
#Code to achieve the above requirement in python3.
i = int(input(&quot;Enter the number&quot;)) 
if i%3 == 0 and i%5 == 0: print(i,&quot;FizzBuzz&quot;)  
elif i%5 == 0: print(i,&quot;Buzz&quot;)
elif i%3 == 0: print(i,&quot;Fizz&quot;)
else: print(i)
&lt;/pre&gt;
Lets put the same into a loop for a range given by the user.
&lt;pre&gt;
def fizzbuzzgame(start,stop):
    for i in range(start,stop+1):
        if i%3 == 0 and i%5 == 0:
            print(i,&quot;FizzBuzz&quot;)
        elif i%5 == 0:
            print(i,&quot;Buzz&quot;)
        elif i%3 == 0:
            print(i,&quot;Fizz&quot;)
        else: print(i)

fizzbuzzgame(50,100)
&lt;/pre&gt;
&lt;pre&gt;
#Output:
1235
Buzz
======================================
555
Fizzbuzz
======================================
1235
Buzz
======================================
999
Fizz
&lt;/pre&gt;

=== Fizz Buzz game in Interactive mode with Score ===
'''By Ms. Ami Tusharkant Choksi'''
&lt;pre&gt;
def fizzbuzzgame(i):
        if i%3 == 0 and i%5 == 0:
            print(i,&quot;FizzBuzz&quot;)
            return(&quot;fzbz&quot;)
        elif i%5 == 0:
            print(i,&quot;Buzz&quot;)
            return(&quot;bz&quot;)
        elif i%3 == 0:
            print(i,&quot;Fizz&quot;)
            return(&quot;fz&quot;)
        else:
            print(i)
            return(&quot;no&quot;)

ch = 'y'
fizzbuzz=0
fizz=0
buzz=0
nothing=0
print(&quot;&quot;&quot;

 /$$$$$$$$/$$                  /$$$$$$$                            
| $$_____|__/                 | $$__  $$                           
| $$      /$$/$$$$$$$$/$$$$$$$| $$  \ $$/$$   /$$/$$$$$$$$/$$$$$$$$
| $$$$$  | $|____ /$$|____ /$$| $$$$$$$| $$  | $|____ /$$|____ /$$/
| $$__/  | $$  /$$$$/   /$$$$/| $$__  $| $$  | $$  /$$$$/   /$$$$/ 
| $$     | $$ /$$__/   /$$__/ | $$  \ $| $$  | $$ /$$__/   /$$__/  
| $$     | $$/$$$$$$$$/$$$$$$$| $$$$$$$|  $$$$$$//$$$$$$$$/$$$$$$$$
|__/     |__|________|________|_______/ \______/|________|________/
                                                                  
&quot;&quot;&quot;)   
print('''

  /$$$$$$                                
 /$$__  $$                               
| $$  \__/ /$$$$$$ /$$$$$$/$$$$  /$$$$$$ 
| $$ /$$$$|____  $| $$_  $$_  $$/$$__  $$
| $$|_  $$ /$$$$$$| $$ \ $$ \ $| $$$$$$$$
| $$  \ $$/$$__  $| $$ | $$ | $| $$_____/
|  $$$$$$|  $$$$$$| $$ | $$ | $|  $$$$$$$
 \______/ \_______|__/ |__/ |__/\_______/
                                     
''')

while(ch == 'y'):
    n=int(input(&quot;Enter a Number : &quot;))
    winLoose=fizzbuzzgame(n)
    if(winLoose == &quot;fz&quot;):
        fizz+=1
    elif(winLoose == &quot;bz&quot;):
        buzz+=1
    elif(winLoose == &quot;fzbz&quot;):
        fizzbuzz+=1
    ch=input(&quot;Do you want to continue playing the game : (y/n)&quot;)
    if(ch=='n'):
        print('Congratulations, your score is\n FizzBuzz:%d\nFizz:%d\nBuzz:%d' %
(fizzbuzz,fizz,buzz))
    
'''Sample Output:

 /$$$$$$$$/$$                  /$$$$$$$                            
| $$_____|__/                 | $$__  $$                           
| $$      /$$/$$$$$$$$/$$$$$$$| $$  \ $$/$$   /$$/$$$$$$$$/$$$$$$$$
| $$$$$  | $|____ /$$|____ /$$| $$$$$$$| $$  | $|____ /$$|____ /$$/
| $$__/  | $$  /$$$$/   /$$$$/| $$__  $| $$  | $$  /$$$$/   /$$$$/ 
| $$     | $$ /$$__/   /$$__/ | $$  \ $| $$  | $$ /$$__/   /$$__/  
| $$     | $$/$$$$$$$$/$$$$$$$| $$$$$$$|  $$$$$$//$$$$$$$$/$$$$$$$$
|__/     |__|________|________|_______/ \______/|________|________/
                                                                                                                                   

  /$$$$$$                                
 /$$__  $$                               
| $$  \__/ /$$$$$$ /$$$$$$/$$$$  /$$$$$$ 
| $$ /$$$$|____  $| $$_  $$_  $$/$$__  $$
| $$|_  $$ /$$$$$$| $$ \ $$ \ $| $$$$$$$$
| $$  \ $$/$$__  $| $$ | $$ | $| $$_____/
|  $$$$$$|  $$$$$$| $$ | $$ | $|  $$$$$$$
 \______/ \_______|__/ |__/ |__/\_______/
                                         

Enter a Number : 666
666 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 777
777 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 555
555 FizzBuzz
Do you want to continue playing the game : (y/n)y
Enter a Number : 1
1
Do you want to continue playing the game : (y/n)y
Enter a Number : 789
789 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 25
25 Buzz
Do you want to continue playing the game : (y/n)n
Congratulations, your score is

FizzBuzz:1
Fizz:3
Buzz:1

&lt;/pre&gt;

=Crowd Computing: Just Estimate=
==Wisdom of Crowds==
 &lt;p style=&quot;text-align:justify&quot;&gt;
The concept of ’Wisdom of Crowds’ was proposed by Francis Galton. A weight-judging competition was carried on at the annual show of the West of England Fat Stock and Poultry Exhibition recently held at Plymouth, A fat ox having been selected, competitors bought stamped and numbered cards, each, on which to inscribe their respective names, addresses, and estimates of what the ox would weigh after it had been slaughtered. Those who guessed most successfully received prizes. About 8oo tickets were issued to the par- ticipants. The middlemost estimate of all the estimates recorded was 1207 lbs and the actual weight of the ox was 1198 lbs.&lt;/p&gt;

==Our Experiment==
 &lt;p style=&quot;text-align:justify&quot;&gt;
The crowd had to guess the number of candies/gems in a jar. Around 75 people participated in the experiment. The actual number of gems in the jar were 375. The median of all estimates came out to be 300 and the mean of all the estimates came out to be around 396. Median underestimated and mean overestimated the actual value. So according to recent studies, Trimmed mean must be used as an aggregate measure to estimate where Wisdom of Crowds is involved.
&lt;/p&gt;
[[File:Gemsjar.jpg|center|200px|caption]]

===Trimmed Mean===
 &lt;p style=&quot;text-align:justify&quot;&gt;
In these kinds of experiments, 10% trimmed mean is usually followed. For calculating 10% trimmed mean, remove 10% smallest and 10% largest values from the sample. Calculate the mean of the sample obtained. In the above experiment, the trimmed mean came out to be around 351 which is very close to the actual value.&lt;/p&gt;

==Implementation==
Here, we try to demonstrate the concept of trimmed mean through crowd computing.
&lt;ol&gt;
&lt;li&gt; Input a list of estimates done by the crowd .&lt;/li&gt;
&lt;li&gt; Sort the list.&lt;/li&gt;
&lt;li&gt; Remove the 10% smallest values.&lt;/li&gt;
&lt;li&gt; Remove the 10% largest values.
&lt;li&gt; Calculate the mean of the new list obtained .&lt;/li&gt;&lt;/ol&gt;&lt;hr&gt;

==Data of Experiment==       
    Estimates =[1000,1010,1786,2000,1500,1500,100,120,150,150,150,170,175,180,197,200,200,200,200,200,200,220,220,220,220,234,250,250,250,250,250,250,250,250,250,263,270,275,275,286,300,
                300,300,300,300,300,300,300,320,350,350,350,400, 400,400,400,400,450,467,500,500,500,500,500,500,500,550,550,600,600,600,650,700,700,720]

    '''CODE:'''
&lt;pre&gt;
Estimates = [1000,1010,1786,2000,1500,1500,100,120,150,150,150,170,175,180,197,200,200,200,200,200,200,220,220,220,220,234,250,250,250,250,250,250,250,250,250,263,270,275,275,286,300,                300,300,300,300,300,300,300,320,350,350,350,400,400,400,400,400,450,467,500,500,500,500,500,500,500,550,550,600,600,600,650,700,700,720]
Estimates.sort()
offset = int(0.10*len(Estimates))
for i in range(offset):
       del Estimates[0]
       del Estimates[-1]
Sum = 0    
for i in range(len(Estimates)):
       Sum += Estimates[i]
Mean_Value = Sum/len(Estimates)
print(&quot;Mean : &quot;, int(Mean_Value))
#Output:
Mean :  351
&lt;/pre&gt;
&lt;hr&gt;
==Trimmed Mean for the above example== 
&lt;h3&gt;Using scipy library&lt;/h3&gt;
&lt;pre&gt;
#import scipy to use the method of trim_mean
from scipy import stats
trimMean = stats.trim_mean(Estimates, 0.1) # Trim 10% at both ends
print(&quot;Trimmed Mean : &quot;,trimMean)
#Output:
Trimmed Mean :  335.1020408163265
&lt;/pre&gt;

&lt;h3&gt;Without using scipy library&lt;/h3&gt;
&lt;pre&gt;
#Trimmed mean with 10%
p=10/100
#sorted data
data=[2, 4, 6, 7, 11, 21, 81, 90, 105, 121]
n = len(data)
#Remove elements from both end
rem=int(n*p)
newData = data[rem:-rem]
mean = 0
for i in newData:
    mean += i
mean = int(mean/len(newData))
print(&quot;Trimmed mean : &quot;,mean)
#Output: Trimmed mean :  40
&lt;/pre&gt;
[[#Top]]

=Jumbled_Words Permutations: Jumbled Words=
==What are Permutations ?==
A permutation also called ordering of selected number of elements from a list denoted by nPr here we are choosing all elements of a list and so n=r&lt;br&gt;
nPr=n!/(n-r)!&lt;br&gt; as n=r
nPn=n!&lt;br&gt; which gives all possible arrangement of elements present in a list.

 For example, permutations of list [1,2,3] are [1,2,3], [1,3,2], [2,1,3], [2,3,1], 
[3,1,2], and [3,2,1]. 
The number of permutations of a list of elements nPn is given by n!. For example, there are 2! = 2 x 1 = 2 permutations of [1,2], namely [1,2] and [2,1], and 3! = 3 x 2 x 1 = 6 permutations of [1,2,3], as mentioned above.&lt;br/&gt;
[[File:Permutations.jpg]]

==Implementation==
 &lt;p style=&quot;text-align:justify&quot;&gt;
Here, we try to demonstrate the concept of permutations through jumbled words. It is a two player game in which one person presents the other person a different permutation of the word in his mind. The other person has to guess the right word. If he guesses, the he wins otherwise he loses.&lt;/p&gt;
 Input an list of words.
 Randomly pick a word from the list of words .
 Shuffle this word and present it to the other player.
 if word guesses by the player is same as the one picked from list of w
     player wins
 else
     player loses

ALTERNATE CODE TO GENERATE THIS GAME:
&lt;pre&gt;
import random
p1=input(&quot;enter player 1 name:&quot;)
p2=input(&quot;enter player 2 name:&quot;)
l=[&quot;rainbow&quot;,&quot;computer&quot;,&quot;robot&quot;,&quot;butter&quot;,&quot;vegetable&quot;,&quot;science&quot;,&quot;correct&quot;]
c1=c2=a1=a2=f1=f2=0
k=1
i=3
def play():
    n=random.choice(l)        ##n=chooses a word from list l
    l1=[]
    for j in n:
       l1.append(j)      ##creates a list for word in n
    for t in range(len(l1)):
       p=random.choice(l1)     ##this randomly displays letters in the list
       print(p)
       l1.remove(p)          ##to avoid the repetition of a letter
    s=input(&quot;enter the word:&quot;)
    if(s==n):
        print(&quot;correct&quot;)
        return 1
    else:
        print(&quot;not correct&quot;)
        print(&quot;answer is&quot;,n)
        return 0
def stat():
     print(&quot;player 1:&quot;)
     print(&quot;score:&quot;,c1)
     print(&quot;answered:&quot;,a1)
     print(&quot;failed:&quot;,f1)
     print(&quot;.............&quot;)
     print(&quot;player 2:&quot;)
     print(&quot;score:&quot;,c2)
     print(&quot;answered:&quot;,a2)
     print(&quot;failed&quot;,f2)
     if(c1&gt;c2):
         print(p1,&quot; won over &quot;,p2)
     elif(c1==c2):
         print(&quot;draw game&quot;)
     else:
         print(p2,&quot; won over &quot;,p1) 
while(i!=4):
      if(i==3):
         if(k==1):
             print(&quot;player 1 turn&quot;)
             print(&quot;your jumbled word is:&quot;)
             k=k+1
             m=play()
             if(m==1):      ##if guessed answer is correct,then score and no.of answered count will be increased
                c1+=1
                a1+=1
             else:
                f1+=1       ##else count of no.of failed to answered will be incremented
         else:
             print(&quot;player 2 turn&quot;)
             print(&quot;your jumbled word is:&quot;)
             k=k-1
             m=play()
             if(m==1):
                c2=c2+1
                a2=a2+1
             else:
                f2=f2+1
       if(i==2):
             print(&quot;present status&quot;)
             stat()
       i=int(input(&quot;enter your choice  1.stop 2.status 3.continue&quot;))
       if(i==1):
             stat()
             i=i+3
&lt;/pre&gt;
&lt;hr&gt;
=== JumbledWord Simple Logic, In Short ===
[[File:jumbledWord.gif]]
---
&lt;hr&gt;
'''Logic to create a Jumbled Word'''
&lt;hr&gt;
&lt;pre&gt;
#Get Jumbled Word and print it Horizontally
import random

def getJumbledWord(b):
    jumble=''
    l1 = [ b[i] for i in range(0, len(b)) ]
    for t in range(len(l1)):
       p=random.choice(l1)  #this randomly gets letters from the list      
       jumble=jumble+p       
       l1.remove(p)
    return jumble

b=input(&quot;Enter a word to make it jumbled : &quot;)
print(&quot;Jumbled Word : &quot;, getJumbledWord(b))
&lt;/pre&gt;
&lt;pre&gt;
Output:
Enter a word to make it jumbled : live and let live others
Jumbled Word :  vel  toldeisrte aihv len
==========================================
Enter a word to make it jumbled : junkfood
Jumbled Word :  nfukdooj
&lt;/pre&gt;
&lt;hr&gt;
'''Another Logic to create a Jumbled Word'''
&lt;hr&gt;
&lt;pre&gt;
import random
b=input(&quot;Enter a word to make it jumbled : &quot;)

def getJumbledWord1(b):
    l1 = [ b[i] for i in range(0, len(b)) ]
    random.shuffle(l1)
    str1 = ''.join(l1)
    return str1

print(&quot;Jumbled Word : &quot;, getJumbledWord1(b))
&lt;/pre&gt;

====Sample Output:====
&lt;pre&gt;
---- Output1 
Enter a word to make it jumbled : butter
Jumbled Word :  tbture

---- Output2 
Enter a word to make it jumbled : petriotism
Jumbled Word :  pittrosime
&lt;/pre&gt;

=Theory of Evolution=

== What is Evolution ? ==
Evolution is the change in heritable characteristics over successive generations. The theory of evolution explains that DNA, which acts as a carrier of genetic information from one generation to other, tends to change or mutate occasionally. These changes are reflected in next generations to come. This is how life has evolved on earth from bacteria to human beings.&lt;br&gt;
[[File:Evolution.png|500px]]

== Implementation ==
 &lt;p style=&quot;text-align:justify&quot;&gt;
An array representing DNA is stored in a file. As genes are forms of DNA, they contain information to be transferred to forthcoming generations. Assume that information is in the form of bits (in the form of 0s and 1s). A number is picked randomly from 1 to the size of the array. A new parameter has been introduced which decides whether mutation would occur or not. If the value of this new parameter is 1 (It is picked randomly from 1 to 100), then only change is reflected down the generations, otherwise it is not. The pseudo code is as follows :
&lt;/p&gt;
Input an array containing genetic information .
Randomly generate a number (say m) from 1 to length of the array. Randomly generate other number (say p) from 1 to 100.

&lt;pre&gt; 
    if p is equal to 1 then 
        if m is 1 then
          set it to 0
        else
          set it to 1
&lt;/pre&gt;
[[#TOP]]</text>
      <sha1>mqlaj21dnft8gzlj0eo2p6sy3qztiir</sha1>
    </revision>
    <revision>
      <id>3744</id>
      <parentid>3743</parentid>
      <timestamp>2018-09-29T04:02:43Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* Length of the List */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="30716">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_3 Contributors of this page]
*Week 3 Playlist: https://www.youtube.com/playlist?list=PLc_j0TNIaWxOVx_z9jAM2UB3RqYNXaoEo
=List=
List is a flexible data structure used for storing a group of data separated by comma. The elements in a list need not be of the same data type.

'''Example:'''
       List_1 = [ 1, 2,3] or 
       List_1 = [&quot;coffee&quot;, &quot;Tea&quot;, &quot;Milk&quot;] or
       List_1 = [1,&quot;coffee&quot;, &quot;Tea&quot;, 3, &quot;5&quot;]

==List Creation==
a) A list can be created by simply putting values (separated by comma) between square
 brackets as given below,
&lt;pre&gt;List_1 = [1,&quot;coffee&quot;, &quot;Tea&quot;, 3, &quot;5&quot;] #this creates a list by name List_1 containing
 following items
&lt;/pre&gt;


Or,
(b)A List can be created from scratch and elements can be added 
&lt;pre&gt;
        List_2 = [ ]
        List_2.append(&quot;Kala&quot;)
        List_2.append(&quot;Mala&quot;)
&lt;/pre&gt;
Here we use &quot;append&quot;, which is a function in python that enable us to append or attach an element to a list .
&lt;pre&gt;Thus List_2 will now hold [&quot;Kala&quot;,&quot;Mala&quot;]&lt;/pre&gt;

[[#Top]]

==Operations and Methods to work with List==
&lt;pre&gt;
a = [25,30,50,90,12,13]
b = [100,300,500,200,250]
&lt;/pre&gt;
&lt;hr&gt;
&lt;table border=2&gt;
  &lt;tr&gt;
    &lt;th&gt;&lt;b&gt;Method/&lt;br&gt;Operator&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Function&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Syntax&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Output&lt;/b&gt;&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;len()&lt;/td&gt;
    &lt;td&gt;Find length of a list&lt;/td&gt;
    &lt;td&gt;len(a)&lt;/td&gt;
    &lt;td&gt;6&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;max()&lt;/td&gt;
    &lt;td&gt;Find maximum element from the list&lt;/td&gt;
    &lt;td&gt;max(a)&lt;/td&gt;
    &lt;td&gt;90&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;min()&lt;/td&gt;
    &lt;td&gt;Find minimum element from the list&lt;/td&gt;
    &lt;td&gt;min(a)&lt;/td&gt;
    &lt;td&gt;12&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sum()&lt;/td&gt;
    &lt;td&gt;Returns sum of all elements of the list&lt;/td&gt;
    &lt;td&gt;sum(a)&lt;/td&gt;
    &lt;td&gt;220&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;reverse()&lt;/td&gt;
    &lt;td&gt;Reverses the original list&lt;/td&gt;
    &lt;td&gt;a.reverse()&lt;/td&gt;
    &lt;td&gt;[13, 12, 90, 50, 30, 25]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sort()&lt;/td&gt;
    &lt;td&gt;Sorts the original list in ascending order&lt;/td&gt;
    &lt;td&gt;a.sort()&lt;/td&gt;
    &lt;td&gt;[12, 13, 25, 30, 50, 90]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sorted()&lt;/td&gt;
    &lt;td&gt;Returns the new sorted list &lt;/td&gt;
    &lt;td&gt;sorted(a)&lt;/td&gt;
    &lt;td&gt;[12, 13, 25, 30, 50, 90]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;insert()&lt;/td&gt;
    &lt;td&gt;Insert at a particular index in the list, and shifts remaining elements&lt;/td&gt;
    &lt;td&gt;a.insert(3,3)&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 3, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;append()&lt;/td&gt;
    &lt;td&gt;Adds elements/object to the end of the list&lt;/td&gt;
    &lt;td&gt;a.append(5)&lt;br&gt;a.append([10,20])&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 5]&lt;br&gt;[25, 30, 50, 90, 12, 13, [10, 20]]&lt;br&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;extend()&lt;/td&gt;
    &lt;td&gt;Adds object to the end of the list as elements not as object&lt;/td&gt;
    &lt;td&gt;a.extend([10,20])&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 10, 20]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;*&amp;nbsp;&amp;nbsp;Repeatation&lt;br&gt;operator&lt;/td&gt;
    &lt;td&gt;Repeat the list for n times and returns a new list&lt;/td&gt;
    &lt;td&gt;a*2&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 25, 30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;+ Concatenation&lt;br&gt;operator&lt;/td&gt;
    &lt;td&gt;Concatenates two lists, and returns a new list&lt;/td&gt;
    &lt;td&gt;a+b&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 100, 300, 500, 200, 250]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;index()&lt;/td&gt;
    &lt;td&gt;Finds index of a particular element in the list or not&lt;/td&gt;
    &lt;td&gt;a.index(25)&lt;br&gt;a.index(0)&lt;br&gt;&lt;/td&gt;
    &lt;td&gt;0&lt;br&gt;&lt;br&gt;ValueError: 0 is not in list&lt;br&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;in operator&lt;/td&gt;
    &lt;td&gt;Finds whether a particular element is in the list or not, returns boolean&lt;/td&gt;
    &lt;td&gt;25 in a&lt;/td&gt;
    &lt;td&gt;True&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;not in operator&lt;/td&gt;
    &lt;td&gt;Checks if element is not available in list, returns boolean&lt;/td&gt;
    &lt;td&gt;25 not in a&lt;/td&gt;
    &lt;td&gt;False&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;count()&lt;/td&gt;
    &lt;td&gt;Counts the number of occurence of an element in the list&lt;/td&gt;
    &lt;td&gt;a.count(25)&lt;/td&gt;
    &lt;td&gt;1&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;remove()&lt;/td&gt;
    &lt;td&gt;Removes an element from the list&lt;/td&gt;
    &lt;td&gt;a.remove(25)&lt;/td&gt;
    &lt;td&gt; [30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;pop()&lt;/td&gt;
    &lt;td&gt;Delete and return item at index 0&lt;/td&gt;
    &lt;td&gt;a.pop(0)&lt;/td&gt;
    &lt;td&gt;25 , a will be [30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;del&lt;/td&gt;
    &lt;td&gt;Deletes item at a particular index from the list&lt;/td&gt;
    &lt;td&gt;del a[0]&lt;/td&gt;
    &lt;td&gt;[30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;all()&lt;/td&gt;
&lt;td&gt;Returns True, if all items in list are True or it is an empty list&lt;/td&gt;
&lt;td&gt;all([True, True, True])
all([])
&lt;/td&gt;
&lt;td&gt;True&lt;br&gt;
True&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;any()&lt;/td&gt;
&lt;td&gt;Returns True, if any item in list is True else return False&lt;/td&gt;
&lt;td&gt;any([True, True, True])&lt;br&gt;
any([True, False, True])&lt;br&gt;
any([])&lt;/td&gt;
&lt;td&gt;True&lt;br&gt;False&lt;br&gt;False&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;

==Printing the List==
=== Print whole list ===
A list can be printed simply or using a ''for / while'' loop 

 print(List_2)     # To print the entire list
This code will print      
 ['Kala','Mala']     

===Print element at a particular index===
&lt;pre&gt;
Using index position
    List_2[0]     # prints 'Kala' ,i.e,the value at index position 0.
    List_2[1]     # prints 'Mala'.
&lt;/pre&gt;
=== Without using index position ===
&lt;pre&gt;
for item in List_2:   # here item is a variable used to access elements in list.
       print(item)
   This code snippet prints 
    Kala
    Mala
&lt;/pre&gt;
[[#TOP]]

==Search for a particular element in list==
Elements in a list can be searched by one of the two ways:
=== using index() function===
&lt;pre&gt;
ages1 = [11,23,12,23,45]

#if element is available in the list, index() returns the index value on which, the element is
 present.
print(ages1.index(45))#Output: 4

#if element is not available in the list, index() returns ''ValueError''
print(ages1.index(0))#Output: ValueError:
&lt;/pre&gt;

In programming, if such error occurs, program gets terminated. It can be solved using exception handling.
 
e.g.
&lt;pre&gt;
ages1 = [11,23,12,23,45]

try:
    print(ages1.index(0))
except ValueError:
    print(&quot;Exception has occured&quot;)    
    print(&quot;Element is not found in the list&quot;)

&lt;/pre&gt;
&lt;pre&gt;
'''Output: 
Exception has occured
Element is not found in the list
'''&lt;/pre&gt;
[[#Top]]

=== using 'in' operator===
''in'' operator is used to check whether a particular element is available in the list or not.e.g.

&lt;pre&gt;
ages1 = [11,23,12,23,45]
no=11

if no in ages1:
    print(&quot;no is there in the list&quot;)
else:    
    print(&quot;no is NOT there in the list&quot;)
&lt;/pre&gt;
&lt;pre&gt;
#Output: no is there in the list
&lt;/pre&gt;


'''Number is not there in the list'''
&lt;pre&gt;
ages1 = [11,23,12,23,45]
no=15

if no in ages1:
    print(&quot;no is there in the list&quot;)
else:    
    print(&quot;no is NOT there in the list&quot;)
&lt;/pre&gt;
&lt;pre&gt;
Output: no is NOT there in the list
&lt;/pre&gt;
[[#TOP]]

==Updating the List==
The lists can be updated using ''append'' or ''insert'' function.  Append adds the element to the end of the list and Insert adds the element in the specified position.
&lt;pre&gt;
   # add the element 'Sheela' to the end of the list.
   List_2.append(&quot;Sheela&quot;)    
   print (List_2) will output 
   ['Kala', 'Mala', 'Sheela']
&lt;/pre&gt;
   &lt;pre&gt;
# add the element &quot;Bala&quot; in the list at the index 1.
   List_2.insert(1,&quot;Bala&quot;)    
   print (List_2) will output 
   ['Kala', 'Bala','Mala', 'Sheela']
&lt;/pre&gt;

=== Extend the list by adding elements of other list at end using extend()===
&lt;pre&gt;
ages = [11,23,12,23,45]
ages.extend([57,58])
print(ages)
&lt;/pre&gt;

&lt;pre&gt;
#Output: [11, 23, 12, 23, 45, 57, 58]
&lt;/pre&gt;

==== Difference between ''append and extend'' ====
Difference between append and extend can be easily understood, by the following example.

&lt;pre&gt;
appendlist = [11,23,12,23,45]
appendlist.append([57,58])

extendlist= [11,23,12,23,45]
extendlist.extend([57,58])
&lt;/pre&gt;

&lt;pre&gt;
'''Output:
[11, 23, 12, 23, 45, [57, 58]]
[11, 23, 12, 23, 45, 57, 58]'''
&lt;/pre&gt;

[[#TOP]]

==Basic Operations on List==
===Frequency of Occurrence===
list.count(object) will return the number of times the object occur in the list.
  '''Example'''
    ages = [11,23,12,23,45,43,22,24,23]
    ages.count(23) will return
    3
    ages.count(100) will return
    0

===Length of the List===
&lt;pre&gt;len(list)&lt;/pre&gt; will return the length of the list ie. the number of objects in the list.
  '''Example'''
&lt;pre&gt;
    ages = [11,23,12,23,45,43,22,24,23]
    len(ages) # Output: 9
&lt;/pre&gt;

To print the objects in the list either use ''for item in list'' or ''for index in range(len(list))''
&lt;pre&gt;
    for item in ages:       
        print (item)  
        (OR)
    for index in range(len(ages)) :
        print (ages[index])
&lt;/pre&gt;

===Sort the List===
list.sort() will sort the list in ascending order
  '''Example'''
    ages = [11,23,12,23,45,43,22,24,23]
    ages.sort() 
    print (ages) 
    [11, 12, 22, 23, 23, 23, 24, 43, 45]

[[#TOP]]

===Sort the List using sorted() function===
sorted(list1) will sort the list and return a new list, it doesn't modify the original list
&lt;br&gt;'''Example: Sort in ascending order'''
&lt;pre&gt;
ages = [11,23,12,23,45,43,22,24,23]
newList=sorted(ages)
print(newList)

#Output: [11, 12, 22, 23, 23, 23, 24, 43, 45]
&lt;/pre&gt;

&lt;br&gt;'''Example: Sort in descending order'''
&lt;pre&gt;
ages = [11,23,12,23,45,43,22,24,23]
newList=sorted(ages,reverse=True)
print(newList)

#Output: [45, 43, 24, 23, 23, 23, 22, 12, 11]
&lt;/pre&gt;

===Reverse the List===
list.reverse() will reverse the original list
  '''Example'''
    ages = [11, 12, 22, 23, 23, 23, 24, 43, 45]
    ages.reverse()
    print (ages)
    [45, 43, 24, 23, 23, 23, 22, 12, 11]

Both sort() and reverse() list operation will work on numeric and alphanumeric data list.

A special use of the reverse() function is to descend a list that is sorted in ascending order.

  '''Example'''
&lt;pre&gt;
ages = [11, 12, 22, 23, 23, 23, 24, 43, 45]
ages.sort()
print(ages)
ages.reverse()
print(ages)
&lt;/pre&gt;

===Slicing===
Used to retrieve an object or objects in a range as a list  
  '''Example'''

Use ''list[index]'' to retrieve the object at the given index
&lt;pre&gt;
In [1]: student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
In [2]: student[3]     #Object at index 3.  Remember index starts at 0
Out[2]: 'Geetha'      
&lt;/pre&gt;

Use ''list[start_index : end_index + 1]'' to retrieve objects from the start_index to end_index 
&lt;pre&gt;
In [3]: student[2:4]     # Objects from index 2 to 3 as List. Note the [ and ]
Out[3]: ['Vijay', 'Geetha']   
&lt;/pre&gt;

Use ''list[:]'' to retrieve objects from the starting of the list to the end of the list. 
The default start value will be the starting index of the list (i.e. 0) and the default end value
will be the length of the list 
&lt;pre&gt;
In [4]: student[:]        # prints the entire list
Out[4]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma', 'Janani']
&lt;/pre&gt;
&lt;pre&gt;
In [5]: student[:5]       # prints the objects from the start of the list upto object at index 4
Out[5]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran']
&lt;/pre&gt;
&lt;pre&gt;
In [6]: student[2:]       # prints the objects from index 2 upto the end of the list
Out[6]: ['Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma', 'Janani']
&lt;/pre&gt;

Negative index too is available in Python. It starts from last element of the list. i.e.
&lt;pre&gt;
In [7]:student[-1]        #prints last index of list
Out[7]: 'Janani'
&lt;/pre&gt;
&lt;pre&gt;
In [8]:student[-1:-8]     #prints empty list
Out[8]: []
&lt;/pre&gt;
&lt;pre&gt;
In [9]:student[-8:-1]     #prints -8th index to -1st index elements
Out[9]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma']
&lt;/pre&gt;

[[#TOP]]

===Removing Item from list ===
----

Is used to remove a specific item from the list.

'''Example:'''
 
Use list.remove(entry/value)  Or   del list[index]    Or list.pop(index)
&lt;pre&gt;
student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
student.remove(&quot;Arun&quot;)   #This will delete item &quot;Arun&quot;
         Or    
del student[0]           # This will delete item at index 0
         Or
student.pop(0)         # This will delete and return item at index 0
print(student)    
Output: &quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
&lt;/pre&gt;

[[#TOP]]

===Delete list ===
----
Used to delete complete list

'''Example'''

Use del &lt;list name&gt;
&lt;pre&gt;
student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
del student&lt;/pre&gt;

===Concatenation of two lists===
----
''+'' is the concatenation operator which is used concatenate two lists. 
&lt;pre&gt;
ages1 = [11,23,12,23,45]
ages2 = [25, 24, 43, 47]
age=ages1+ages2
print(age)
#Output: [11, 23, 12, 23, 45, 25, 24, 43, 47]
&lt;/pre&gt;

===Repeatation of a list ===
----
''*'' is the operator to repeat a particular list.
&lt;pre&gt;
ages1 = [11,23,12,23,45]
age=ages1*5 #ages1 list is repeated 5 times and stroed in ''age'' list
print(age)

#Output: [11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45]
&lt;/pre&gt;

=== all and any for List===
all() and any() are special functions to check whether all elements in iterable is ''True'' or any element is ''True''
&lt;ol&gt;
&lt;li&gt;If all elements in a list are ''True'', '''all()''' will return ''True''&lt;/li&gt;
&lt;li&gt;If iterable is ''empty'', '''all()''' will return ''True''&lt;/li&gt;
&lt;li&gt;If iterable contains at least one ''True'', '''any()''' will return ''True''&lt;/li&gt;
&lt;li&gt;If iterable is ''empty'', '''any()''' will return ''False''&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;
lsit=[True, True, True, True]
print(all(lsit))#Output: True
print(any(lsit))#Output: True

lsit1=[True, False, True, True]
print(all(lsit1))#Output: False
print(any(lsit1))#Output: True

lsit2=[False,False,False]
print(all(lsit2))#Output: False
print(any(lsit2))#Output: False

lsit3=[]
print(all(lsit3))#Output: True
print(any(lsit3))#Output: False
&lt;/pre&gt;

==Conditional Statements==
&lt;pre&gt;Conditionals are used to check the condition and change the flow of the program 
accordingly. They are realized in programming languages through if statement. The 
syntax is as follows :
&lt;pre&gt;
         if condition : 
            statement
&lt;/pre&gt;
    '''Note:''' Do not forget indentation (inserting space/tab) in the line after the
 if condition.
    
    In case you want to execute a set of statements when a condition is true and another

set of statement when the condition is false.
&lt;pre&gt;
         if condition : 
            statement 1
         else :
            statement 2
&lt;/pre&gt;

&lt;pre&gt;    
    Multiple if-else statements can be written as follows:
         if condition_1 : 
            statement 1
         elif condition_2 : # 'elif' is short for 'else if'
            statement 2
         elif condition_3 :
            statement 3
        .
        .
         else :
            final statement
&lt;/pre&gt;

[[#TOP]]

=Loops and Conditionals : Fizzbuzz=
====Loops====
Loops are used to execute a set of repetitive statements. They are realised
through 'while' and 'for' loops in programming languages. The syntax of 'for' loop is 
as follows :
&lt;pre&gt;
for LOOPVARIABLE in SEQUENCE: 
            STATEMENTS&lt;/pre&gt;

    '''e.g.''' to print all the data from a list we can write:
&lt;pre&gt;
for item in list_name:
      print(item)&lt;/pre&gt;
    OR
&lt;pre&gt;
for index in range(len(list_name)):
      print(list_name[index])
 &lt;/pre&gt;   
    The syntax for while loop is as follows :
&lt;pre&gt;    
while BOOLEANEXPRESSION: 
     STATEMENTS
     INCREMENT/DECREMENT
&lt;/pre&gt;    
    '''e.g.''' if we want to print all numbers from 1 to 10
&lt;pre&gt;
i=1
while i&lt;=10 :
    print(i,&quot; &quot;)
    i=i+1
    &lt;/pre&gt;
 
'while' loop has indefinite iteration (run-time unknown). So, there must be loop,  break statement in it.
 Whereas 'for' loop is definite in nature (i.e. known or predictable span).&lt;br&gt;

&lt;b&gt;NOTE: Python doesn't have anything like do-while loop.&lt;/b&gt;

[[#TOP]]

==Implementation==
Here, we try to demonstrate the concept of loops and conditionals through a game called Fizzbuzz. The rules are as follows :&lt;br/&gt;
[[File:fizzBuzz.gif]]

• if input number is a multiple of ’3’ print ”Fizz”
&lt;br/&gt;
• if input number is a multiple of ’5’ print ”Buzz”
&lt;br/&gt;
• if input number is a multiple of both '3' and ’5’ print ”FizzBuzz”
&lt;br/&gt;
The pseudo code is as follows :
&lt;pre&gt;
   If input no % 3 == 0 and  input no % 5 == 0 : 
       print ”Fizzbuzz”
   else if input no % 3 == 0 : 
       print ”Fizz”
   else if input no % 5 == 0 : 
       print ”Buzz”
   else :
       print the input no
&lt;/pre&gt;
 &lt;p style=&quot;text-align:justify&quot;&gt;
The order of statements execution matters to get the desired output. The highest priority condition should be first followed by other. In fizzbuzz programming, first checking should be done for both divisibility of 3 and 5. If condition not satisfied only then it should check individually for 3 or 5. So carefully choosing the order is crucial for better programming.
Note: There is some effect of present condition statements chosen on next conditions statements. That is why in first attempt fizzbuzz programming got struck.&lt;/p&gt;

Example: 
&lt;pre&gt;
#Code to achieve the above requirement in python3.
i = int(input(&quot;Enter the number&quot;)) 
if i%3 == 0 and i%5 == 0: print(i,&quot;FizzBuzz&quot;)  
elif i%5 == 0: print(i,&quot;Buzz&quot;)
elif i%3 == 0: print(i,&quot;Fizz&quot;)
else: print(i)
&lt;/pre&gt;
Lets put the same into a loop for a range given by the user.
&lt;pre&gt;
def fizzbuzzgame(start,stop):
    for i in range(start,stop+1):
        if i%3 == 0 and i%5 == 0:
            print(i,&quot;FizzBuzz&quot;)
        elif i%5 == 0:
            print(i,&quot;Buzz&quot;)
        elif i%3 == 0:
            print(i,&quot;Fizz&quot;)
        else: print(i)

fizzbuzzgame(50,100)
&lt;/pre&gt;
&lt;pre&gt;
#Output:
1235
Buzz
======================================
555
Fizzbuzz
======================================
1235
Buzz
======================================
999
Fizz
&lt;/pre&gt;

=== Fizz Buzz game in Interactive mode with Score ===
'''By Ms. Ami Tusharkant Choksi'''
&lt;pre&gt;
def fizzbuzzgame(i):
        if i%3 == 0 and i%5 == 0:
            print(i,&quot;FizzBuzz&quot;)
            return(&quot;fzbz&quot;)
        elif i%5 == 0:
            print(i,&quot;Buzz&quot;)
            return(&quot;bz&quot;)
        elif i%3 == 0:
            print(i,&quot;Fizz&quot;)
            return(&quot;fz&quot;)
        else:
            print(i)
            return(&quot;no&quot;)

ch = 'y'
fizzbuzz=0
fizz=0
buzz=0
nothing=0
print(&quot;&quot;&quot;

 /$$$$$$$$/$$                  /$$$$$$$                            
| $$_____|__/                 | $$__  $$                           
| $$      /$$/$$$$$$$$/$$$$$$$| $$  \ $$/$$   /$$/$$$$$$$$/$$$$$$$$
| $$$$$  | $|____ /$$|____ /$$| $$$$$$$| $$  | $|____ /$$|____ /$$/
| $$__/  | $$  /$$$$/   /$$$$/| $$__  $| $$  | $$  /$$$$/   /$$$$/ 
| $$     | $$ /$$__/   /$$__/ | $$  \ $| $$  | $$ /$$__/   /$$__/  
| $$     | $$/$$$$$$$$/$$$$$$$| $$$$$$$|  $$$$$$//$$$$$$$$/$$$$$$$$
|__/     |__|________|________|_______/ \______/|________|________/
                                                                  
&quot;&quot;&quot;)   
print('''

  /$$$$$$                                
 /$$__  $$                               
| $$  \__/ /$$$$$$ /$$$$$$/$$$$  /$$$$$$ 
| $$ /$$$$|____  $| $$_  $$_  $$/$$__  $$
| $$|_  $$ /$$$$$$| $$ \ $$ \ $| $$$$$$$$
| $$  \ $$/$$__  $| $$ | $$ | $| $$_____/
|  $$$$$$|  $$$$$$| $$ | $$ | $|  $$$$$$$
 \______/ \_______|__/ |__/ |__/\_______/
                                     
''')

while(ch == 'y'):
    n=int(input(&quot;Enter a Number : &quot;))
    winLoose=fizzbuzzgame(n)
    if(winLoose == &quot;fz&quot;):
        fizz+=1
    elif(winLoose == &quot;bz&quot;):
        buzz+=1
    elif(winLoose == &quot;fzbz&quot;):
        fizzbuzz+=1
    ch=input(&quot;Do you want to continue playing the game : (y/n)&quot;)
    if(ch=='n'):
        print('Congratulations, your score is\n FizzBuzz:%d\nFizz:%d\nBuzz:%d' %
(fizzbuzz,fizz,buzz))
    
'''Sample Output:

 /$$$$$$$$/$$                  /$$$$$$$                            
| $$_____|__/                 | $$__  $$                           
| $$      /$$/$$$$$$$$/$$$$$$$| $$  \ $$/$$   /$$/$$$$$$$$/$$$$$$$$
| $$$$$  | $|____ /$$|____ /$$| $$$$$$$| $$  | $|____ /$$|____ /$$/
| $$__/  | $$  /$$$$/   /$$$$/| $$__  $| $$  | $$  /$$$$/   /$$$$/ 
| $$     | $$ /$$__/   /$$__/ | $$  \ $| $$  | $$ /$$__/   /$$__/  
| $$     | $$/$$$$$$$$/$$$$$$$| $$$$$$$|  $$$$$$//$$$$$$$$/$$$$$$$$
|__/     |__|________|________|_______/ \______/|________|________/
                                                                                                                                   

  /$$$$$$                                
 /$$__  $$                               
| $$  \__/ /$$$$$$ /$$$$$$/$$$$  /$$$$$$ 
| $$ /$$$$|____  $| $$_  $$_  $$/$$__  $$
| $$|_  $$ /$$$$$$| $$ \ $$ \ $| $$$$$$$$
| $$  \ $$/$$__  $| $$ | $$ | $| $$_____/
|  $$$$$$|  $$$$$$| $$ | $$ | $|  $$$$$$$
 \______/ \_______|__/ |__/ |__/\_______/
                                         

Enter a Number : 666
666 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 777
777 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 555
555 FizzBuzz
Do you want to continue playing the game : (y/n)y
Enter a Number : 1
1
Do you want to continue playing the game : (y/n)y
Enter a Number : 789
789 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 25
25 Buzz
Do you want to continue playing the game : (y/n)n
Congratulations, your score is

FizzBuzz:1
Fizz:3
Buzz:1

&lt;/pre&gt;

=Crowd Computing: Just Estimate=
==Wisdom of Crowds==
 &lt;p style=&quot;text-align:justify&quot;&gt;
The concept of ’Wisdom of Crowds’ was proposed by Francis Galton. A weight-judging competition was carried on at the annual show of the West of England Fat Stock and Poultry Exhibition recently held at Plymouth, A fat ox having been selected, competitors bought stamped and numbered cards, each, on which to inscribe their respective names, addresses, and estimates of what the ox would weigh after it had been slaughtered. Those who guessed most successfully received prizes. About 8oo tickets were issued to the par- ticipants. The middlemost estimate of all the estimates recorded was 1207 lbs and the actual weight of the ox was 1198 lbs.&lt;/p&gt;

==Our Experiment==
 &lt;p style=&quot;text-align:justify&quot;&gt;
The crowd had to guess the number of candies/gems in a jar. Around 75 people participated in the experiment. The actual number of gems in the jar were 375. The median of all estimates came out to be 300 and the mean of all the estimates came out to be around 396. Median underestimated and mean overestimated the actual value. So according to recent studies, Trimmed mean must be used as an aggregate measure to estimate where Wisdom of Crowds is involved.
&lt;/p&gt;
[[File:Gemsjar.jpg|center|200px|caption]]

===Trimmed Mean===
 &lt;p style=&quot;text-align:justify&quot;&gt;
In these kinds of experiments, 10% trimmed mean is usually followed. For calculating 10% trimmed mean, remove 10% smallest and 10% largest values from the sample. Calculate the mean of the sample obtained. In the above experiment, the trimmed mean came out to be around 351 which is very close to the actual value.&lt;/p&gt;

==Implementation==
Here, we try to demonstrate the concept of trimmed mean through crowd computing.
&lt;ol&gt;
&lt;li&gt; Input a list of estimates done by the crowd .&lt;/li&gt;
&lt;li&gt; Sort the list.&lt;/li&gt;
&lt;li&gt; Remove the 10% smallest values.&lt;/li&gt;
&lt;li&gt; Remove the 10% largest values.
&lt;li&gt; Calculate the mean of the new list obtained .&lt;/li&gt;&lt;/ol&gt;&lt;hr&gt;

==Data of Experiment==       
    Estimates =[1000,1010,1786,2000,1500,1500,100,120,150,150,150,170,175,180,197,200,200,200,200,200,200,220,220,220,220,234,250,250,250,250,250,250,250,250,250,263,270,275,275,286,300,
                300,300,300,300,300,300,300,320,350,350,350,400, 400,400,400,400,450,467,500,500,500,500,500,500,500,550,550,600,600,600,650,700,700,720]

    '''CODE:'''
&lt;pre&gt;
Estimates = [1000,1010,1786,2000,1500,1500,100,120,150,150,150,170,175,180,197,200,200,200,200,200,200,220,220,220,220,234,250,250,250,250,250,250,250,250,250,263,270,275,275,286,300,                300,300,300,300,300,300,300,320,350,350,350,400,400,400,400,400,450,467,500,500,500,500,500,500,500,550,550,600,600,600,650,700,700,720]
Estimates.sort()
offset = int(0.10*len(Estimates))
for i in range(offset):
       del Estimates[0]
       del Estimates[-1]
Sum = 0    
for i in range(len(Estimates)):
       Sum += Estimates[i]
Mean_Value = Sum/len(Estimates)
print(&quot;Mean : &quot;, int(Mean_Value))
#Output:
Mean :  351
&lt;/pre&gt;
&lt;hr&gt;
==Trimmed Mean for the above example== 
&lt;h3&gt;Using scipy library&lt;/h3&gt;
&lt;pre&gt;
#import scipy to use the method of trim_mean
from scipy import stats
trimMean = stats.trim_mean(Estimates, 0.1) # Trim 10% at both ends
print(&quot;Trimmed Mean : &quot;,trimMean)
#Output:
Trimmed Mean :  335.1020408163265
&lt;/pre&gt;

&lt;h3&gt;Without using scipy library&lt;/h3&gt;
&lt;pre&gt;
#Trimmed mean with 10%
p=10/100
#sorted data
data=[2, 4, 6, 7, 11, 21, 81, 90, 105, 121]
n = len(data)
#Remove elements from both end
rem=int(n*p)
newData = data[rem:-rem]
mean = 0
for i in newData:
    mean += i
mean = int(mean/len(newData))
print(&quot;Trimmed mean : &quot;,mean)
#Output: Trimmed mean :  40
&lt;/pre&gt;
[[#Top]]

=Jumbled_Words Permutations: Jumbled Words=
==What are Permutations ?==
A permutation also called ordering of selected number of elements from a list denoted by nPr here we are choosing all elements of a list and so n=r&lt;br&gt;
nPr=n!/(n-r)!&lt;br&gt; as n=r
nPn=n!&lt;br&gt; which gives all possible arrangement of elements present in a list.

 For example, permutations of list [1,2,3] are [1,2,3], [1,3,2], [2,1,3], [2,3,1], 
[3,1,2], and [3,2,1]. 
The number of permutations of a list of elements nPn is given by n!. For example, there are 2! = 2 x 1 = 2 permutations of [1,2], namely [1,2] and [2,1], and 3! = 3 x 2 x 1 = 6 permutations of [1,2,3], as mentioned above.&lt;br/&gt;
[[File:Permutations.jpg]]

==Implementation==
 &lt;p style=&quot;text-align:justify&quot;&gt;
Here, we try to demonstrate the concept of permutations through jumbled words. It is a two player game in which one person presents the other person a different permutation of the word in his mind. The other person has to guess the right word. If he guesses, the he wins otherwise he loses.&lt;/p&gt;
 Input an list of words.
 Randomly pick a word from the list of words .
 Shuffle this word and present it to the other player.
 if word guesses by the player is same as the one picked from list of w
     player wins
 else
     player loses

ALTERNATE CODE TO GENERATE THIS GAME:
&lt;pre&gt;
import random
p1=input(&quot;enter player 1 name:&quot;)
p2=input(&quot;enter player 2 name:&quot;)
l=[&quot;rainbow&quot;,&quot;computer&quot;,&quot;robot&quot;,&quot;butter&quot;,&quot;vegetable&quot;,&quot;science&quot;,&quot;correct&quot;]
c1=c2=a1=a2=f1=f2=0
k=1
i=3
def play():
    n=random.choice(l)        ##n=chooses a word from list l
    l1=[]
    for j in n:
       l1.append(j)      ##creates a list for word in n
    for t in range(len(l1)):
       p=random.choice(l1)     ##this randomly displays letters in the list
       print(p)
       l1.remove(p)          ##to avoid the repetition of a letter
    s=input(&quot;enter the word:&quot;)
    if(s==n):
        print(&quot;correct&quot;)
        return 1
    else:
        print(&quot;not correct&quot;)
        print(&quot;answer is&quot;,n)
        return 0
def stat():
     print(&quot;player 1:&quot;)
     print(&quot;score:&quot;,c1)
     print(&quot;answered:&quot;,a1)
     print(&quot;failed:&quot;,f1)
     print(&quot;.............&quot;)
     print(&quot;player 2:&quot;)
     print(&quot;score:&quot;,c2)
     print(&quot;answered:&quot;,a2)
     print(&quot;failed&quot;,f2)
     if(c1&gt;c2):
         print(p1,&quot; won over &quot;,p2)
     elif(c1==c2):
         print(&quot;draw game&quot;)
     else:
         print(p2,&quot; won over &quot;,p1) 
while(i!=4):
      if(i==3):
         if(k==1):
             print(&quot;player 1 turn&quot;)
             print(&quot;your jumbled word is:&quot;)
             k=k+1
             m=play()
             if(m==1):      ##if guessed answer is correct,then score and no.of answered count will be increased
                c1+=1
                a1+=1
             else:
                f1+=1       ##else count of no.of failed to answered will be incremented
         else:
             print(&quot;player 2 turn&quot;)
             print(&quot;your jumbled word is:&quot;)
             k=k-1
             m=play()
             if(m==1):
                c2=c2+1
                a2=a2+1
             else:
                f2=f2+1
       if(i==2):
             print(&quot;present status&quot;)
             stat()
       i=int(input(&quot;enter your choice  1.stop 2.status 3.continue&quot;))
       if(i==1):
             stat()
             i=i+3
&lt;/pre&gt;
&lt;hr&gt;
=== JumbledWord Simple Logic, In Short ===
[[File:jumbledWord.gif]]
---
&lt;hr&gt;
'''Logic to create a Jumbled Word'''
&lt;hr&gt;
&lt;pre&gt;
#Get Jumbled Word and print it Horizontally
import random

def getJumbledWord(b):
    jumble=''
    l1 = [ b[i] for i in range(0, len(b)) ]
    for t in range(len(l1)):
       p=random.choice(l1)  #this randomly gets letters from the list      
       jumble=jumble+p       
       l1.remove(p)
    return jumble

b=input(&quot;Enter a word to make it jumbled : &quot;)
print(&quot;Jumbled Word : &quot;, getJumbledWord(b))
&lt;/pre&gt;
&lt;pre&gt;
Output:
Enter a word to make it jumbled : live and let live others
Jumbled Word :  vel  toldeisrte aihv len
==========================================
Enter a word to make it jumbled : junkfood
Jumbled Word :  nfukdooj
&lt;/pre&gt;
&lt;hr&gt;
'''Another Logic to create a Jumbled Word'''
&lt;hr&gt;
&lt;pre&gt;
import random
b=input(&quot;Enter a word to make it jumbled : &quot;)

def getJumbledWord1(b):
    l1 = [ b[i] for i in range(0, len(b)) ]
    random.shuffle(l1)
    str1 = ''.join(l1)
    return str1

print(&quot;Jumbled Word : &quot;, getJumbledWord1(b))
&lt;/pre&gt;

====Sample Output:====
&lt;pre&gt;
---- Output1 
Enter a word to make it jumbled : butter
Jumbled Word :  tbture

---- Output2 
Enter a word to make it jumbled : petriotism
Jumbled Word :  pittrosime
&lt;/pre&gt;

=Theory of Evolution=

== What is Evolution ? ==
Evolution is the change in heritable characteristics over successive generations. The theory of evolution explains that DNA, which acts as a carrier of genetic information from one generation to other, tends to change or mutate occasionally. These changes are reflected in next generations to come. This is how life has evolved on earth from bacteria to human beings.&lt;br&gt;
[[File:Evolution.png|500px]]

== Implementation ==
 &lt;p style=&quot;text-align:justify&quot;&gt;
An array representing DNA is stored in a file. As genes are forms of DNA, they contain information to be transferred to forthcoming generations. Assume that information is in the form of bits (in the form of 0s and 1s). A number is picked randomly from 1 to the size of the array. A new parameter has been introduced which decides whether mutation would occur or not. If the value of this new parameter is 1 (It is picked randomly from 1 to 100), then only change is reflected down the generations, otherwise it is not. The pseudo code is as follows :
&lt;/p&gt;
Input an array containing genetic information .
Randomly generate a number (say m) from 1 to length of the array. Randomly generate other number (say p) from 1 to 100.

&lt;pre&gt; 
    if p is equal to 1 then 
        if m is 1 then
          set it to 0
        else
          set it to 1
&lt;/pre&gt;
[[#TOP]]</text>
      <sha1>r3000rqmr6ntdso2ra6823t9rqqah9u</sha1>
    </revision>
    <revision>
      <id>3745</id>
      <parentid>3744</parentid>
      <timestamp>2018-09-29T04:03:26Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* Length of the List */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="30709">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_3 Contributors of this page]
*Week 3 Playlist: https://www.youtube.com/playlist?list=PLc_j0TNIaWxOVx_z9jAM2UB3RqYNXaoEo
=List=
List is a flexible data structure used for storing a group of data separated by comma. The elements in a list need not be of the same data type.

'''Example:'''
       List_1 = [ 1, 2,3] or 
       List_1 = [&quot;coffee&quot;, &quot;Tea&quot;, &quot;Milk&quot;] or
       List_1 = [1,&quot;coffee&quot;, &quot;Tea&quot;, 3, &quot;5&quot;]

==List Creation==
a) A list can be created by simply putting values (separated by comma) between square
 brackets as given below,
&lt;pre&gt;List_1 = [1,&quot;coffee&quot;, &quot;Tea&quot;, 3, &quot;5&quot;] #this creates a list by name List_1 containing
 following items
&lt;/pre&gt;


Or,
(b)A List can be created from scratch and elements can be added 
&lt;pre&gt;
        List_2 = [ ]
        List_2.append(&quot;Kala&quot;)
        List_2.append(&quot;Mala&quot;)
&lt;/pre&gt;
Here we use &quot;append&quot;, which is a function in python that enable us to append or attach an element to a list .
&lt;pre&gt;Thus List_2 will now hold [&quot;Kala&quot;,&quot;Mala&quot;]&lt;/pre&gt;

[[#Top]]

==Operations and Methods to work with List==
&lt;pre&gt;
a = [25,30,50,90,12,13]
b = [100,300,500,200,250]
&lt;/pre&gt;
&lt;hr&gt;
&lt;table border=2&gt;
  &lt;tr&gt;
    &lt;th&gt;&lt;b&gt;Method/&lt;br&gt;Operator&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Function&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Syntax&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Output&lt;/b&gt;&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;len()&lt;/td&gt;
    &lt;td&gt;Find length of a list&lt;/td&gt;
    &lt;td&gt;len(a)&lt;/td&gt;
    &lt;td&gt;6&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;max()&lt;/td&gt;
    &lt;td&gt;Find maximum element from the list&lt;/td&gt;
    &lt;td&gt;max(a)&lt;/td&gt;
    &lt;td&gt;90&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;min()&lt;/td&gt;
    &lt;td&gt;Find minimum element from the list&lt;/td&gt;
    &lt;td&gt;min(a)&lt;/td&gt;
    &lt;td&gt;12&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sum()&lt;/td&gt;
    &lt;td&gt;Returns sum of all elements of the list&lt;/td&gt;
    &lt;td&gt;sum(a)&lt;/td&gt;
    &lt;td&gt;220&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;reverse()&lt;/td&gt;
    &lt;td&gt;Reverses the original list&lt;/td&gt;
    &lt;td&gt;a.reverse()&lt;/td&gt;
    &lt;td&gt;[13, 12, 90, 50, 30, 25]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sort()&lt;/td&gt;
    &lt;td&gt;Sorts the original list in ascending order&lt;/td&gt;
    &lt;td&gt;a.sort()&lt;/td&gt;
    &lt;td&gt;[12, 13, 25, 30, 50, 90]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sorted()&lt;/td&gt;
    &lt;td&gt;Returns the new sorted list &lt;/td&gt;
    &lt;td&gt;sorted(a)&lt;/td&gt;
    &lt;td&gt;[12, 13, 25, 30, 50, 90]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;insert()&lt;/td&gt;
    &lt;td&gt;Insert at a particular index in the list, and shifts remaining elements&lt;/td&gt;
    &lt;td&gt;a.insert(3,3)&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 3, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;append()&lt;/td&gt;
    &lt;td&gt;Adds elements/object to the end of the list&lt;/td&gt;
    &lt;td&gt;a.append(5)&lt;br&gt;a.append([10,20])&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 5]&lt;br&gt;[25, 30, 50, 90, 12, 13, [10, 20]]&lt;br&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;extend()&lt;/td&gt;
    &lt;td&gt;Adds object to the end of the list as elements not as object&lt;/td&gt;
    &lt;td&gt;a.extend([10,20])&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 10, 20]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;*&amp;nbsp;&amp;nbsp;Repeatation&lt;br&gt;operator&lt;/td&gt;
    &lt;td&gt;Repeat the list for n times and returns a new list&lt;/td&gt;
    &lt;td&gt;a*2&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 25, 30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;+ Concatenation&lt;br&gt;operator&lt;/td&gt;
    &lt;td&gt;Concatenates two lists, and returns a new list&lt;/td&gt;
    &lt;td&gt;a+b&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 100, 300, 500, 200, 250]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;index()&lt;/td&gt;
    &lt;td&gt;Finds index of a particular element in the list or not&lt;/td&gt;
    &lt;td&gt;a.index(25)&lt;br&gt;a.index(0)&lt;br&gt;&lt;/td&gt;
    &lt;td&gt;0&lt;br&gt;&lt;br&gt;ValueError: 0 is not in list&lt;br&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;in operator&lt;/td&gt;
    &lt;td&gt;Finds whether a particular element is in the list or not, returns boolean&lt;/td&gt;
    &lt;td&gt;25 in a&lt;/td&gt;
    &lt;td&gt;True&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;not in operator&lt;/td&gt;
    &lt;td&gt;Checks if element is not available in list, returns boolean&lt;/td&gt;
    &lt;td&gt;25 not in a&lt;/td&gt;
    &lt;td&gt;False&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;count()&lt;/td&gt;
    &lt;td&gt;Counts the number of occurence of an element in the list&lt;/td&gt;
    &lt;td&gt;a.count(25)&lt;/td&gt;
    &lt;td&gt;1&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;remove()&lt;/td&gt;
    &lt;td&gt;Removes an element from the list&lt;/td&gt;
    &lt;td&gt;a.remove(25)&lt;/td&gt;
    &lt;td&gt; [30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;pop()&lt;/td&gt;
    &lt;td&gt;Delete and return item at index 0&lt;/td&gt;
    &lt;td&gt;a.pop(0)&lt;/td&gt;
    &lt;td&gt;25 , a will be [30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;del&lt;/td&gt;
    &lt;td&gt;Deletes item at a particular index from the list&lt;/td&gt;
    &lt;td&gt;del a[0]&lt;/td&gt;
    &lt;td&gt;[30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;all()&lt;/td&gt;
&lt;td&gt;Returns True, if all items in list are True or it is an empty list&lt;/td&gt;
&lt;td&gt;all([True, True, True])
all([])
&lt;/td&gt;
&lt;td&gt;True&lt;br&gt;
True&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;any()&lt;/td&gt;
&lt;td&gt;Returns True, if any item in list is True else return False&lt;/td&gt;
&lt;td&gt;any([True, True, True])&lt;br&gt;
any([True, False, True])&lt;br&gt;
any([])&lt;/td&gt;
&lt;td&gt;True&lt;br&gt;False&lt;br&gt;False&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;

==Printing the List==
=== Print whole list ===
A list can be printed simply or using a ''for / while'' loop 

 print(List_2)     # To print the entire list
This code will print      
 ['Kala','Mala']     

===Print element at a particular index===
&lt;pre&gt;
Using index position
    List_2[0]     # prints 'Kala' ,i.e,the value at index position 0.
    List_2[1]     # prints 'Mala'.
&lt;/pre&gt;
=== Without using index position ===
&lt;pre&gt;
for item in List_2:   # here item is a variable used to access elements in list.
       print(item)
   This code snippet prints 
    Kala
    Mala
&lt;/pre&gt;
[[#TOP]]

==Search for a particular element in list==
Elements in a list can be searched by one of the two ways:
=== using index() function===
&lt;pre&gt;
ages1 = [11,23,12,23,45]

#if element is available in the list, index() returns the index value on which, the element is
 present.
print(ages1.index(45))#Output: 4

#if element is not available in the list, index() returns ''ValueError''
print(ages1.index(0))#Output: ValueError:
&lt;/pre&gt;

In programming, if such error occurs, program gets terminated. It can be solved using exception handling.
 
e.g.
&lt;pre&gt;
ages1 = [11,23,12,23,45]

try:
    print(ages1.index(0))
except ValueError:
    print(&quot;Exception has occured&quot;)    
    print(&quot;Element is not found in the list&quot;)

&lt;/pre&gt;
&lt;pre&gt;
'''Output: 
Exception has occured
Element is not found in the list
'''&lt;/pre&gt;
[[#Top]]

=== using 'in' operator===
''in'' operator is used to check whether a particular element is available in the list or not.e.g.

&lt;pre&gt;
ages1 = [11,23,12,23,45]
no=11

if no in ages1:
    print(&quot;no is there in the list&quot;)
else:    
    print(&quot;no is NOT there in the list&quot;)
&lt;/pre&gt;
&lt;pre&gt;
#Output: no is there in the list
&lt;/pre&gt;


'''Number is not there in the list'''
&lt;pre&gt;
ages1 = [11,23,12,23,45]
no=15

if no in ages1:
    print(&quot;no is there in the list&quot;)
else:    
    print(&quot;no is NOT there in the list&quot;)
&lt;/pre&gt;
&lt;pre&gt;
Output: no is NOT there in the list
&lt;/pre&gt;
[[#TOP]]

==Updating the List==
The lists can be updated using ''append'' or ''insert'' function.  Append adds the element to the end of the list and Insert adds the element in the specified position.
&lt;pre&gt;
   # add the element 'Sheela' to the end of the list.
   List_2.append(&quot;Sheela&quot;)    
   print (List_2) will output 
   ['Kala', 'Mala', 'Sheela']
&lt;/pre&gt;
   &lt;pre&gt;
# add the element &quot;Bala&quot; in the list at the index 1.
   List_2.insert(1,&quot;Bala&quot;)    
   print (List_2) will output 
   ['Kala', 'Bala','Mala', 'Sheela']
&lt;/pre&gt;

=== Extend the list by adding elements of other list at end using extend()===
&lt;pre&gt;
ages = [11,23,12,23,45]
ages.extend([57,58])
print(ages)
&lt;/pre&gt;

&lt;pre&gt;
#Output: [11, 23, 12, 23, 45, 57, 58]
&lt;/pre&gt;

==== Difference between ''append and extend'' ====
Difference between append and extend can be easily understood, by the following example.

&lt;pre&gt;
appendlist = [11,23,12,23,45]
appendlist.append([57,58])

extendlist= [11,23,12,23,45]
extendlist.extend([57,58])
&lt;/pre&gt;

&lt;pre&gt;
'''Output:
[11, 23, 12, 23, 45, [57, 58]]
[11, 23, 12, 23, 45, 57, 58]'''
&lt;/pre&gt;

[[#TOP]]

==Basic Operations on List==
===Frequency of Occurrence===
list.count(object) will return the number of times the object occur in the list.
  '''Example'''
    ages = [11,23,12,23,45,43,22,24,23]
    ages.count(23) will return
    3
    ages.count(100) will return
    0

===Length of the List===
''len(list)'' will return the length of the list ie. the number of objects in the list.
  '''Example'''
&lt;pre&gt;
    ages = [11,23,12,23,45,43,22,24,23]
    len(ages) # Output: 9
&lt;/pre&gt;

To print the objects in the list either use ''for item in list'' or ''for index in range(len(list))''
&lt;pre&gt;
    for item in ages:       
        print (item)  
        (OR)
    for index in range(len(ages)) :
        print (ages[index])
&lt;/pre&gt;

===Sort the List===
list.sort() will sort the list in ascending order
  '''Example'''
    ages = [11,23,12,23,45,43,22,24,23]
    ages.sort() 
    print (ages) 
    [11, 12, 22, 23, 23, 23, 24, 43, 45]

[[#TOP]]

===Sort the List using sorted() function===
sorted(list1) will sort the list and return a new list, it doesn't modify the original list
&lt;br&gt;'''Example: Sort in ascending order'''
&lt;pre&gt;
ages = [11,23,12,23,45,43,22,24,23]
newList=sorted(ages)
print(newList)

#Output: [11, 12, 22, 23, 23, 23, 24, 43, 45]
&lt;/pre&gt;

&lt;br&gt;'''Example: Sort in descending order'''
&lt;pre&gt;
ages = [11,23,12,23,45,43,22,24,23]
newList=sorted(ages,reverse=True)
print(newList)

#Output: [45, 43, 24, 23, 23, 23, 22, 12, 11]
&lt;/pre&gt;

===Reverse the List===
list.reverse() will reverse the original list
  '''Example'''
    ages = [11, 12, 22, 23, 23, 23, 24, 43, 45]
    ages.reverse()
    print (ages)
    [45, 43, 24, 23, 23, 23, 22, 12, 11]

Both sort() and reverse() list operation will work on numeric and alphanumeric data list.

A special use of the reverse() function is to descend a list that is sorted in ascending order.

  '''Example'''
&lt;pre&gt;
ages = [11, 12, 22, 23, 23, 23, 24, 43, 45]
ages.sort()
print(ages)
ages.reverse()
print(ages)
&lt;/pre&gt;

===Slicing===
Used to retrieve an object or objects in a range as a list  
  '''Example'''

Use ''list[index]'' to retrieve the object at the given index
&lt;pre&gt;
In [1]: student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
In [2]: student[3]     #Object at index 3.  Remember index starts at 0
Out[2]: 'Geetha'      
&lt;/pre&gt;

Use ''list[start_index : end_index + 1]'' to retrieve objects from the start_index to end_index 
&lt;pre&gt;
In [3]: student[2:4]     # Objects from index 2 to 3 as List. Note the [ and ]
Out[3]: ['Vijay', 'Geetha']   
&lt;/pre&gt;

Use ''list[:]'' to retrieve objects from the starting of the list to the end of the list. 
The default start value will be the starting index of the list (i.e. 0) and the default end value
will be the length of the list 
&lt;pre&gt;
In [4]: student[:]        # prints the entire list
Out[4]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma', 'Janani']
&lt;/pre&gt;
&lt;pre&gt;
In [5]: student[:5]       # prints the objects from the start of the list upto object at index 4
Out[5]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran']
&lt;/pre&gt;
&lt;pre&gt;
In [6]: student[2:]       # prints the objects from index 2 upto the end of the list
Out[6]: ['Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma', 'Janani']
&lt;/pre&gt;

Negative index too is available in Python. It starts from last element of the list. i.e.
&lt;pre&gt;
In [7]:student[-1]        #prints last index of list
Out[7]: 'Janani'
&lt;/pre&gt;
&lt;pre&gt;
In [8]:student[-1:-8]     #prints empty list
Out[8]: []
&lt;/pre&gt;
&lt;pre&gt;
In [9]:student[-8:-1]     #prints -8th index to -1st index elements
Out[9]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma']
&lt;/pre&gt;

[[#TOP]]

===Removing Item from list ===
----

Is used to remove a specific item from the list.

'''Example:'''
 
Use list.remove(entry/value)  Or   del list[index]    Or list.pop(index)
&lt;pre&gt;
student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
student.remove(&quot;Arun&quot;)   #This will delete item &quot;Arun&quot;
         Or    
del student[0]           # This will delete item at index 0
         Or
student.pop(0)         # This will delete and return item at index 0
print(student)    
Output: &quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
&lt;/pre&gt;

[[#TOP]]

===Delete list ===
----
Used to delete complete list

'''Example'''

Use del &lt;list name&gt;
&lt;pre&gt;
student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
del student&lt;/pre&gt;

===Concatenation of two lists===
----
''+'' is the concatenation operator which is used concatenate two lists. 
&lt;pre&gt;
ages1 = [11,23,12,23,45]
ages2 = [25, 24, 43, 47]
age=ages1+ages2
print(age)
#Output: [11, 23, 12, 23, 45, 25, 24, 43, 47]
&lt;/pre&gt;

===Repeatation of a list ===
----
''*'' is the operator to repeat a particular list.
&lt;pre&gt;
ages1 = [11,23,12,23,45]
age=ages1*5 #ages1 list is repeated 5 times and stroed in ''age'' list
print(age)

#Output: [11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45]
&lt;/pre&gt;

=== all and any for List===
all() and any() are special functions to check whether all elements in iterable is ''True'' or any element is ''True''
&lt;ol&gt;
&lt;li&gt;If all elements in a list are ''True'', '''all()''' will return ''True''&lt;/li&gt;
&lt;li&gt;If iterable is ''empty'', '''all()''' will return ''True''&lt;/li&gt;
&lt;li&gt;If iterable contains at least one ''True'', '''any()''' will return ''True''&lt;/li&gt;
&lt;li&gt;If iterable is ''empty'', '''any()''' will return ''False''&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;
lsit=[True, True, True, True]
print(all(lsit))#Output: True
print(any(lsit))#Output: True

lsit1=[True, False, True, True]
print(all(lsit1))#Output: False
print(any(lsit1))#Output: True

lsit2=[False,False,False]
print(all(lsit2))#Output: False
print(any(lsit2))#Output: False

lsit3=[]
print(all(lsit3))#Output: True
print(any(lsit3))#Output: False
&lt;/pre&gt;

==Conditional Statements==
&lt;pre&gt;Conditionals are used to check the condition and change the flow of the program 
accordingly. They are realized in programming languages through if statement. The 
syntax is as follows :
&lt;pre&gt;
         if condition : 
            statement
&lt;/pre&gt;
    '''Note:''' Do not forget indentation (inserting space/tab) in the line after the
 if condition.
    
    In case you want to execute a set of statements when a condition is true and another

set of statement when the condition is false.
&lt;pre&gt;
         if condition : 
            statement 1
         else :
            statement 2
&lt;/pre&gt;

&lt;pre&gt;    
    Multiple if-else statements can be written as follows:
         if condition_1 : 
            statement 1
         elif condition_2 : # 'elif' is short for 'else if'
            statement 2
         elif condition_3 :
            statement 3
        .
        .
         else :
            final statement
&lt;/pre&gt;

[[#TOP]]

=Loops and Conditionals : Fizzbuzz=
====Loops====
Loops are used to execute a set of repetitive statements. They are realised
through 'while' and 'for' loops in programming languages. The syntax of 'for' loop is 
as follows :
&lt;pre&gt;
for LOOPVARIABLE in SEQUENCE: 
            STATEMENTS&lt;/pre&gt;

    '''e.g.''' to print all the data from a list we can write:
&lt;pre&gt;
for item in list_name:
      print(item)&lt;/pre&gt;
    OR
&lt;pre&gt;
for index in range(len(list_name)):
      print(list_name[index])
 &lt;/pre&gt;   
    The syntax for while loop is as follows :
&lt;pre&gt;    
while BOOLEANEXPRESSION: 
     STATEMENTS
     INCREMENT/DECREMENT
&lt;/pre&gt;    
    '''e.g.''' if we want to print all numbers from 1 to 10
&lt;pre&gt;
i=1
while i&lt;=10 :
    print(i,&quot; &quot;)
    i=i+1
    &lt;/pre&gt;
 
'while' loop has indefinite iteration (run-time unknown). So, there must be loop,  break statement in it.
 Whereas 'for' loop is definite in nature (i.e. known or predictable span).&lt;br&gt;

&lt;b&gt;NOTE: Python doesn't have anything like do-while loop.&lt;/b&gt;

[[#TOP]]

==Implementation==
Here, we try to demonstrate the concept of loops and conditionals through a game called Fizzbuzz. The rules are as follows :&lt;br/&gt;
[[File:fizzBuzz.gif]]

• if input number is a multiple of ’3’ print ”Fizz”
&lt;br/&gt;
• if input number is a multiple of ’5’ print ”Buzz”
&lt;br/&gt;
• if input number is a multiple of both '3' and ’5’ print ”FizzBuzz”
&lt;br/&gt;
The pseudo code is as follows :
&lt;pre&gt;
   If input no % 3 == 0 and  input no % 5 == 0 : 
       print ”Fizzbuzz”
   else if input no % 3 == 0 : 
       print ”Fizz”
   else if input no % 5 == 0 : 
       print ”Buzz”
   else :
       print the input no
&lt;/pre&gt;
 &lt;p style=&quot;text-align:justify&quot;&gt;
The order of statements execution matters to get the desired output. The highest priority condition should be first followed by other. In fizzbuzz programming, first checking should be done for both divisibility of 3 and 5. If condition not satisfied only then it should check individually for 3 or 5. So carefully choosing the order is crucial for better programming.
Note: There is some effect of present condition statements chosen on next conditions statements. That is why in first attempt fizzbuzz programming got struck.&lt;/p&gt;

Example: 
&lt;pre&gt;
#Code to achieve the above requirement in python3.
i = int(input(&quot;Enter the number&quot;)) 
if i%3 == 0 and i%5 == 0: print(i,&quot;FizzBuzz&quot;)  
elif i%5 == 0: print(i,&quot;Buzz&quot;)
elif i%3 == 0: print(i,&quot;Fizz&quot;)
else: print(i)
&lt;/pre&gt;
Lets put the same into a loop for a range given by the user.
&lt;pre&gt;
def fizzbuzzgame(start,stop):
    for i in range(start,stop+1):
        if i%3 == 0 and i%5 == 0:
            print(i,&quot;FizzBuzz&quot;)
        elif i%5 == 0:
            print(i,&quot;Buzz&quot;)
        elif i%3 == 0:
            print(i,&quot;Fizz&quot;)
        else: print(i)

fizzbuzzgame(50,100)
&lt;/pre&gt;
&lt;pre&gt;
#Output:
1235
Buzz
======================================
555
Fizzbuzz
======================================
1235
Buzz
======================================
999
Fizz
&lt;/pre&gt;

=== Fizz Buzz game in Interactive mode with Score ===
'''By Ms. Ami Tusharkant Choksi'''
&lt;pre&gt;
def fizzbuzzgame(i):
        if i%3 == 0 and i%5 == 0:
            print(i,&quot;FizzBuzz&quot;)
            return(&quot;fzbz&quot;)
        elif i%5 == 0:
            print(i,&quot;Buzz&quot;)
            return(&quot;bz&quot;)
        elif i%3 == 0:
            print(i,&quot;Fizz&quot;)
            return(&quot;fz&quot;)
        else:
            print(i)
            return(&quot;no&quot;)

ch = 'y'
fizzbuzz=0
fizz=0
buzz=0
nothing=0
print(&quot;&quot;&quot;

 /$$$$$$$$/$$                  /$$$$$$$                            
| $$_____|__/                 | $$__  $$                           
| $$      /$$/$$$$$$$$/$$$$$$$| $$  \ $$/$$   /$$/$$$$$$$$/$$$$$$$$
| $$$$$  | $|____ /$$|____ /$$| $$$$$$$| $$  | $|____ /$$|____ /$$/
| $$__/  | $$  /$$$$/   /$$$$/| $$__  $| $$  | $$  /$$$$/   /$$$$/ 
| $$     | $$ /$$__/   /$$__/ | $$  \ $| $$  | $$ /$$__/   /$$__/  
| $$     | $$/$$$$$$$$/$$$$$$$| $$$$$$$|  $$$$$$//$$$$$$$$/$$$$$$$$
|__/     |__|________|________|_______/ \______/|________|________/
                                                                  
&quot;&quot;&quot;)   
print('''

  /$$$$$$                                
 /$$__  $$                               
| $$  \__/ /$$$$$$ /$$$$$$/$$$$  /$$$$$$ 
| $$ /$$$$|____  $| $$_  $$_  $$/$$__  $$
| $$|_  $$ /$$$$$$| $$ \ $$ \ $| $$$$$$$$
| $$  \ $$/$$__  $| $$ | $$ | $| $$_____/
|  $$$$$$|  $$$$$$| $$ | $$ | $|  $$$$$$$
 \______/ \_______|__/ |__/ |__/\_______/
                                     
''')

while(ch == 'y'):
    n=int(input(&quot;Enter a Number : &quot;))
    winLoose=fizzbuzzgame(n)
    if(winLoose == &quot;fz&quot;):
        fizz+=1
    elif(winLoose == &quot;bz&quot;):
        buzz+=1
    elif(winLoose == &quot;fzbz&quot;):
        fizzbuzz+=1
    ch=input(&quot;Do you want to continue playing the game : (y/n)&quot;)
    if(ch=='n'):
        print('Congratulations, your score is\n FizzBuzz:%d\nFizz:%d\nBuzz:%d' %
(fizzbuzz,fizz,buzz))
    
'''Sample Output:

 /$$$$$$$$/$$                  /$$$$$$$                            
| $$_____|__/                 | $$__  $$                           
| $$      /$$/$$$$$$$$/$$$$$$$| $$  \ $$/$$   /$$/$$$$$$$$/$$$$$$$$
| $$$$$  | $|____ /$$|____ /$$| $$$$$$$| $$  | $|____ /$$|____ /$$/
| $$__/  | $$  /$$$$/   /$$$$/| $$__  $| $$  | $$  /$$$$/   /$$$$/ 
| $$     | $$ /$$__/   /$$__/ | $$  \ $| $$  | $$ /$$__/   /$$__/  
| $$     | $$/$$$$$$$$/$$$$$$$| $$$$$$$|  $$$$$$//$$$$$$$$/$$$$$$$$
|__/     |__|________|________|_______/ \______/|________|________/
                                                                                                                                   

  /$$$$$$                                
 /$$__  $$                               
| $$  \__/ /$$$$$$ /$$$$$$/$$$$  /$$$$$$ 
| $$ /$$$$|____  $| $$_  $$_  $$/$$__  $$
| $$|_  $$ /$$$$$$| $$ \ $$ \ $| $$$$$$$$
| $$  \ $$/$$__  $| $$ | $$ | $| $$_____/
|  $$$$$$|  $$$$$$| $$ | $$ | $|  $$$$$$$
 \______/ \_______|__/ |__/ |__/\_______/
                                         

Enter a Number : 666
666 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 777
777 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 555
555 FizzBuzz
Do you want to continue playing the game : (y/n)y
Enter a Number : 1
1
Do you want to continue playing the game : (y/n)y
Enter a Number : 789
789 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 25
25 Buzz
Do you want to continue playing the game : (y/n)n
Congratulations, your score is

FizzBuzz:1
Fizz:3
Buzz:1

&lt;/pre&gt;

=Crowd Computing: Just Estimate=
==Wisdom of Crowds==
 &lt;p style=&quot;text-align:justify&quot;&gt;
The concept of ’Wisdom of Crowds’ was proposed by Francis Galton. A weight-judging competition was carried on at the annual show of the West of England Fat Stock and Poultry Exhibition recently held at Plymouth, A fat ox having been selected, competitors bought stamped and numbered cards, each, on which to inscribe their respective names, addresses, and estimates of what the ox would weigh after it had been slaughtered. Those who guessed most successfully received prizes. About 8oo tickets were issued to the par- ticipants. The middlemost estimate of all the estimates recorded was 1207 lbs and the actual weight of the ox was 1198 lbs.&lt;/p&gt;

==Our Experiment==
 &lt;p style=&quot;text-align:justify&quot;&gt;
The crowd had to guess the number of candies/gems in a jar. Around 75 people participated in the experiment. The actual number of gems in the jar were 375. The median of all estimates came out to be 300 and the mean of all the estimates came out to be around 396. Median underestimated and mean overestimated the actual value. So according to recent studies, Trimmed mean must be used as an aggregate measure to estimate where Wisdom of Crowds is involved.
&lt;/p&gt;
[[File:Gemsjar.jpg|center|200px|caption]]

===Trimmed Mean===
 &lt;p style=&quot;text-align:justify&quot;&gt;
In these kinds of experiments, 10% trimmed mean is usually followed. For calculating 10% trimmed mean, remove 10% smallest and 10% largest values from the sample. Calculate the mean of the sample obtained. In the above experiment, the trimmed mean came out to be around 351 which is very close to the actual value.&lt;/p&gt;

==Implementation==
Here, we try to demonstrate the concept of trimmed mean through crowd computing.
&lt;ol&gt;
&lt;li&gt; Input a list of estimates done by the crowd .&lt;/li&gt;
&lt;li&gt; Sort the list.&lt;/li&gt;
&lt;li&gt; Remove the 10% smallest values.&lt;/li&gt;
&lt;li&gt; Remove the 10% largest values.
&lt;li&gt; Calculate the mean of the new list obtained .&lt;/li&gt;&lt;/ol&gt;&lt;hr&gt;

==Data of Experiment==       
    Estimates =[1000,1010,1786,2000,1500,1500,100,120,150,150,150,170,175,180,197,200,200,200,200,200,200,220,220,220,220,234,250,250,250,250,250,250,250,250,250,263,270,275,275,286,300,
                300,300,300,300,300,300,300,320,350,350,350,400, 400,400,400,400,450,467,500,500,500,500,500,500,500,550,550,600,600,600,650,700,700,720]

    '''CODE:'''
&lt;pre&gt;
Estimates = [1000,1010,1786,2000,1500,1500,100,120,150,150,150,170,175,180,197,200,200,200,200,200,200,220,220,220,220,234,250,250,250,250,250,250,250,250,250,263,270,275,275,286,300,                300,300,300,300,300,300,300,320,350,350,350,400,400,400,400,400,450,467,500,500,500,500,500,500,500,550,550,600,600,600,650,700,700,720]
Estimates.sort()
offset = int(0.10*len(Estimates))
for i in range(offset):
       del Estimates[0]
       del Estimates[-1]
Sum = 0    
for i in range(len(Estimates)):
       Sum += Estimates[i]
Mean_Value = Sum/len(Estimates)
print(&quot;Mean : &quot;, int(Mean_Value))
#Output:
Mean :  351
&lt;/pre&gt;
&lt;hr&gt;
==Trimmed Mean for the above example== 
&lt;h3&gt;Using scipy library&lt;/h3&gt;
&lt;pre&gt;
#import scipy to use the method of trim_mean
from scipy import stats
trimMean = stats.trim_mean(Estimates, 0.1) # Trim 10% at both ends
print(&quot;Trimmed Mean : &quot;,trimMean)
#Output:
Trimmed Mean :  335.1020408163265
&lt;/pre&gt;

&lt;h3&gt;Without using scipy library&lt;/h3&gt;
&lt;pre&gt;
#Trimmed mean with 10%
p=10/100
#sorted data
data=[2, 4, 6, 7, 11, 21, 81, 90, 105, 121]
n = len(data)
#Remove elements from both end
rem=int(n*p)
newData = data[rem:-rem]
mean = 0
for i in newData:
    mean += i
mean = int(mean/len(newData))
print(&quot;Trimmed mean : &quot;,mean)
#Output: Trimmed mean :  40
&lt;/pre&gt;
[[#Top]]

=Jumbled_Words Permutations: Jumbled Words=
==What are Permutations ?==
A permutation also called ordering of selected number of elements from a list denoted by nPr here we are choosing all elements of a list and so n=r&lt;br&gt;
nPr=n!/(n-r)!&lt;br&gt; as n=r
nPn=n!&lt;br&gt; which gives all possible arrangement of elements present in a list.

 For example, permutations of list [1,2,3] are [1,2,3], [1,3,2], [2,1,3], [2,3,1], 
[3,1,2], and [3,2,1]. 
The number of permutations of a list of elements nPn is given by n!. For example, there are 2! = 2 x 1 = 2 permutations of [1,2], namely [1,2] and [2,1], and 3! = 3 x 2 x 1 = 6 permutations of [1,2,3], as mentioned above.&lt;br/&gt;
[[File:Permutations.jpg]]

==Implementation==
 &lt;p style=&quot;text-align:justify&quot;&gt;
Here, we try to demonstrate the concept of permutations through jumbled words. It is a two player game in which one person presents the other person a different permutation of the word in his mind. The other person has to guess the right word. If he guesses, the he wins otherwise he loses.&lt;/p&gt;
 Input an list of words.
 Randomly pick a word from the list of words .
 Shuffle this word and present it to the other player.
 if word guesses by the player is same as the one picked from list of w
     player wins
 else
     player loses

ALTERNATE CODE TO GENERATE THIS GAME:
&lt;pre&gt;
import random
p1=input(&quot;enter player 1 name:&quot;)
p2=input(&quot;enter player 2 name:&quot;)
l=[&quot;rainbow&quot;,&quot;computer&quot;,&quot;robot&quot;,&quot;butter&quot;,&quot;vegetable&quot;,&quot;science&quot;,&quot;correct&quot;]
c1=c2=a1=a2=f1=f2=0
k=1
i=3
def play():
    n=random.choice(l)        ##n=chooses a word from list l
    l1=[]
    for j in n:
       l1.append(j)      ##creates a list for word in n
    for t in range(len(l1)):
       p=random.choice(l1)     ##this randomly displays letters in the list
       print(p)
       l1.remove(p)          ##to avoid the repetition of a letter
    s=input(&quot;enter the word:&quot;)
    if(s==n):
        print(&quot;correct&quot;)
        return 1
    else:
        print(&quot;not correct&quot;)
        print(&quot;answer is&quot;,n)
        return 0
def stat():
     print(&quot;player 1:&quot;)
     print(&quot;score:&quot;,c1)
     print(&quot;answered:&quot;,a1)
     print(&quot;failed:&quot;,f1)
     print(&quot;.............&quot;)
     print(&quot;player 2:&quot;)
     print(&quot;score:&quot;,c2)
     print(&quot;answered:&quot;,a2)
     print(&quot;failed&quot;,f2)
     if(c1&gt;c2):
         print(p1,&quot; won over &quot;,p2)
     elif(c1==c2):
         print(&quot;draw game&quot;)
     else:
         print(p2,&quot; won over &quot;,p1) 
while(i!=4):
      if(i==3):
         if(k==1):
             print(&quot;player 1 turn&quot;)
             print(&quot;your jumbled word is:&quot;)
             k=k+1
             m=play()
             if(m==1):      ##if guessed answer is correct,then score and no.of answered count will be increased
                c1+=1
                a1+=1
             else:
                f1+=1       ##else count of no.of failed to answered will be incremented
         else:
             print(&quot;player 2 turn&quot;)
             print(&quot;your jumbled word is:&quot;)
             k=k-1
             m=play()
             if(m==1):
                c2=c2+1
                a2=a2+1
             else:
                f2=f2+1
       if(i==2):
             print(&quot;present status&quot;)
             stat()
       i=int(input(&quot;enter your choice  1.stop 2.status 3.continue&quot;))
       if(i==1):
             stat()
             i=i+3
&lt;/pre&gt;
&lt;hr&gt;
=== JumbledWord Simple Logic, In Short ===
[[File:jumbledWord.gif]]
---
&lt;hr&gt;
'''Logic to create a Jumbled Word'''
&lt;hr&gt;
&lt;pre&gt;
#Get Jumbled Word and print it Horizontally
import random

def getJumbledWord(b):
    jumble=''
    l1 = [ b[i] for i in range(0, len(b)) ]
    for t in range(len(l1)):
       p=random.choice(l1)  #this randomly gets letters from the list      
       jumble=jumble+p       
       l1.remove(p)
    return jumble

b=input(&quot;Enter a word to make it jumbled : &quot;)
print(&quot;Jumbled Word : &quot;, getJumbledWord(b))
&lt;/pre&gt;
&lt;pre&gt;
Output:
Enter a word to make it jumbled : live and let live others
Jumbled Word :  vel  toldeisrte aihv len
==========================================
Enter a word to make it jumbled : junkfood
Jumbled Word :  nfukdooj
&lt;/pre&gt;
&lt;hr&gt;
'''Another Logic to create a Jumbled Word'''
&lt;hr&gt;
&lt;pre&gt;
import random
b=input(&quot;Enter a word to make it jumbled : &quot;)

def getJumbledWord1(b):
    l1 = [ b[i] for i in range(0, len(b)) ]
    random.shuffle(l1)
    str1 = ''.join(l1)
    return str1

print(&quot;Jumbled Word : &quot;, getJumbledWord1(b))
&lt;/pre&gt;

====Sample Output:====
&lt;pre&gt;
---- Output1 
Enter a word to make it jumbled : butter
Jumbled Word :  tbture

---- Output2 
Enter a word to make it jumbled : petriotism
Jumbled Word :  pittrosime
&lt;/pre&gt;

=Theory of Evolution=

== What is Evolution ? ==
Evolution is the change in heritable characteristics over successive generations. The theory of evolution explains that DNA, which acts as a carrier of genetic information from one generation to other, tends to change or mutate occasionally. These changes are reflected in next generations to come. This is how life has evolved on earth from bacteria to human beings.&lt;br&gt;
[[File:Evolution.png|500px]]

== Implementation ==
 &lt;p style=&quot;text-align:justify&quot;&gt;
An array representing DNA is stored in a file. As genes are forms of DNA, they contain information to be transferred to forthcoming generations. Assume that information is in the form of bits (in the form of 0s and 1s). A number is picked randomly from 1 to the size of the array. A new parameter has been introduced which decides whether mutation would occur or not. If the value of this new parameter is 1 (It is picked randomly from 1 to 100), then only change is reflected down the generations, otherwise it is not. The pseudo code is as follows :
&lt;/p&gt;
Input an array containing genetic information .
Randomly generate a number (say m) from 1 to length of the array. Randomly generate other number (say p) from 1 to 100.

&lt;pre&gt; 
    if p is equal to 1 then 
        if m is 1 then
          set it to 0
        else
          set it to 1
&lt;/pre&gt;
[[#TOP]]</text>
      <sha1>ol2urkg7s3yxb7z39ruclnivs8sp7yh</sha1>
    </revision>
    <revision>
      <id>3746</id>
      <parentid>3745</parentid>
      <timestamp>2018-09-29T04:04:47Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* Sort the List */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="30713">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_3 Contributors of this page]
*Week 3 Playlist: https://www.youtube.com/playlist?list=PLc_j0TNIaWxOVx_z9jAM2UB3RqYNXaoEo
=List=
List is a flexible data structure used for storing a group of data separated by comma. The elements in a list need not be of the same data type.

'''Example:'''
       List_1 = [ 1, 2,3] or 
       List_1 = [&quot;coffee&quot;, &quot;Tea&quot;, &quot;Milk&quot;] or
       List_1 = [1,&quot;coffee&quot;, &quot;Tea&quot;, 3, &quot;5&quot;]

==List Creation==
a) A list can be created by simply putting values (separated by comma) between square
 brackets as given below,
&lt;pre&gt;List_1 = [1,&quot;coffee&quot;, &quot;Tea&quot;, 3, &quot;5&quot;] #this creates a list by name List_1 containing
 following items
&lt;/pre&gt;


Or,
(b)A List can be created from scratch and elements can be added 
&lt;pre&gt;
        List_2 = [ ]
        List_2.append(&quot;Kala&quot;)
        List_2.append(&quot;Mala&quot;)
&lt;/pre&gt;
Here we use &quot;append&quot;, which is a function in python that enable us to append or attach an element to a list .
&lt;pre&gt;Thus List_2 will now hold [&quot;Kala&quot;,&quot;Mala&quot;]&lt;/pre&gt;

[[#Top]]

==Operations and Methods to work with List==
&lt;pre&gt;
a = [25,30,50,90,12,13]
b = [100,300,500,200,250]
&lt;/pre&gt;
&lt;hr&gt;
&lt;table border=2&gt;
  &lt;tr&gt;
    &lt;th&gt;&lt;b&gt;Method/&lt;br&gt;Operator&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Function&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Syntax&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Output&lt;/b&gt;&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;len()&lt;/td&gt;
    &lt;td&gt;Find length of a list&lt;/td&gt;
    &lt;td&gt;len(a)&lt;/td&gt;
    &lt;td&gt;6&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;max()&lt;/td&gt;
    &lt;td&gt;Find maximum element from the list&lt;/td&gt;
    &lt;td&gt;max(a)&lt;/td&gt;
    &lt;td&gt;90&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;min()&lt;/td&gt;
    &lt;td&gt;Find minimum element from the list&lt;/td&gt;
    &lt;td&gt;min(a)&lt;/td&gt;
    &lt;td&gt;12&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sum()&lt;/td&gt;
    &lt;td&gt;Returns sum of all elements of the list&lt;/td&gt;
    &lt;td&gt;sum(a)&lt;/td&gt;
    &lt;td&gt;220&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;reverse()&lt;/td&gt;
    &lt;td&gt;Reverses the original list&lt;/td&gt;
    &lt;td&gt;a.reverse()&lt;/td&gt;
    &lt;td&gt;[13, 12, 90, 50, 30, 25]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sort()&lt;/td&gt;
    &lt;td&gt;Sorts the original list in ascending order&lt;/td&gt;
    &lt;td&gt;a.sort()&lt;/td&gt;
    &lt;td&gt;[12, 13, 25, 30, 50, 90]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sorted()&lt;/td&gt;
    &lt;td&gt;Returns the new sorted list &lt;/td&gt;
    &lt;td&gt;sorted(a)&lt;/td&gt;
    &lt;td&gt;[12, 13, 25, 30, 50, 90]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;insert()&lt;/td&gt;
    &lt;td&gt;Insert at a particular index in the list, and shifts remaining elements&lt;/td&gt;
    &lt;td&gt;a.insert(3,3)&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 3, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;append()&lt;/td&gt;
    &lt;td&gt;Adds elements/object to the end of the list&lt;/td&gt;
    &lt;td&gt;a.append(5)&lt;br&gt;a.append([10,20])&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 5]&lt;br&gt;[25, 30, 50, 90, 12, 13, [10, 20]]&lt;br&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;extend()&lt;/td&gt;
    &lt;td&gt;Adds object to the end of the list as elements not as object&lt;/td&gt;
    &lt;td&gt;a.extend([10,20])&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 10, 20]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;*&amp;nbsp;&amp;nbsp;Repeatation&lt;br&gt;operator&lt;/td&gt;
    &lt;td&gt;Repeat the list for n times and returns a new list&lt;/td&gt;
    &lt;td&gt;a*2&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 25, 30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;+ Concatenation&lt;br&gt;operator&lt;/td&gt;
    &lt;td&gt;Concatenates two lists, and returns a new list&lt;/td&gt;
    &lt;td&gt;a+b&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 100, 300, 500, 200, 250]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;index()&lt;/td&gt;
    &lt;td&gt;Finds index of a particular element in the list or not&lt;/td&gt;
    &lt;td&gt;a.index(25)&lt;br&gt;a.index(0)&lt;br&gt;&lt;/td&gt;
    &lt;td&gt;0&lt;br&gt;&lt;br&gt;ValueError: 0 is not in list&lt;br&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;in operator&lt;/td&gt;
    &lt;td&gt;Finds whether a particular element is in the list or not, returns boolean&lt;/td&gt;
    &lt;td&gt;25 in a&lt;/td&gt;
    &lt;td&gt;True&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;not in operator&lt;/td&gt;
    &lt;td&gt;Checks if element is not available in list, returns boolean&lt;/td&gt;
    &lt;td&gt;25 not in a&lt;/td&gt;
    &lt;td&gt;False&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;count()&lt;/td&gt;
    &lt;td&gt;Counts the number of occurence of an element in the list&lt;/td&gt;
    &lt;td&gt;a.count(25)&lt;/td&gt;
    &lt;td&gt;1&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;remove()&lt;/td&gt;
    &lt;td&gt;Removes an element from the list&lt;/td&gt;
    &lt;td&gt;a.remove(25)&lt;/td&gt;
    &lt;td&gt; [30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;pop()&lt;/td&gt;
    &lt;td&gt;Delete and return item at index 0&lt;/td&gt;
    &lt;td&gt;a.pop(0)&lt;/td&gt;
    &lt;td&gt;25 , a will be [30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;del&lt;/td&gt;
    &lt;td&gt;Deletes item at a particular index from the list&lt;/td&gt;
    &lt;td&gt;del a[0]&lt;/td&gt;
    &lt;td&gt;[30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;all()&lt;/td&gt;
&lt;td&gt;Returns True, if all items in list are True or it is an empty list&lt;/td&gt;
&lt;td&gt;all([True, True, True])
all([])
&lt;/td&gt;
&lt;td&gt;True&lt;br&gt;
True&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;any()&lt;/td&gt;
&lt;td&gt;Returns True, if any item in list is True else return False&lt;/td&gt;
&lt;td&gt;any([True, True, True])&lt;br&gt;
any([True, False, True])&lt;br&gt;
any([])&lt;/td&gt;
&lt;td&gt;True&lt;br&gt;False&lt;br&gt;False&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;

==Printing the List==
=== Print whole list ===
A list can be printed simply or using a ''for / while'' loop 

 print(List_2)     # To print the entire list
This code will print      
 ['Kala','Mala']     

===Print element at a particular index===
&lt;pre&gt;
Using index position
    List_2[0]     # prints 'Kala' ,i.e,the value at index position 0.
    List_2[1]     # prints 'Mala'.
&lt;/pre&gt;
=== Without using index position ===
&lt;pre&gt;
for item in List_2:   # here item is a variable used to access elements in list.
       print(item)
   This code snippet prints 
    Kala
    Mala
&lt;/pre&gt;
[[#TOP]]

==Search for a particular element in list==
Elements in a list can be searched by one of the two ways:
=== using index() function===
&lt;pre&gt;
ages1 = [11,23,12,23,45]

#if element is available in the list, index() returns the index value on which, the element is
 present.
print(ages1.index(45))#Output: 4

#if element is not available in the list, index() returns ''ValueError''
print(ages1.index(0))#Output: ValueError:
&lt;/pre&gt;

In programming, if such error occurs, program gets terminated. It can be solved using exception handling.
 
e.g.
&lt;pre&gt;
ages1 = [11,23,12,23,45]

try:
    print(ages1.index(0))
except ValueError:
    print(&quot;Exception has occured&quot;)    
    print(&quot;Element is not found in the list&quot;)

&lt;/pre&gt;
&lt;pre&gt;
'''Output: 
Exception has occured
Element is not found in the list
'''&lt;/pre&gt;
[[#Top]]

=== using 'in' operator===
''in'' operator is used to check whether a particular element is available in the list or not.e.g.

&lt;pre&gt;
ages1 = [11,23,12,23,45]
no=11

if no in ages1:
    print(&quot;no is there in the list&quot;)
else:    
    print(&quot;no is NOT there in the list&quot;)
&lt;/pre&gt;
&lt;pre&gt;
#Output: no is there in the list
&lt;/pre&gt;


'''Number is not there in the list'''
&lt;pre&gt;
ages1 = [11,23,12,23,45]
no=15

if no in ages1:
    print(&quot;no is there in the list&quot;)
else:    
    print(&quot;no is NOT there in the list&quot;)
&lt;/pre&gt;
&lt;pre&gt;
Output: no is NOT there in the list
&lt;/pre&gt;
[[#TOP]]

==Updating the List==
The lists can be updated using ''append'' or ''insert'' function.  Append adds the element to the end of the list and Insert adds the element in the specified position.
&lt;pre&gt;
   # add the element 'Sheela' to the end of the list.
   List_2.append(&quot;Sheela&quot;)    
   print (List_2) will output 
   ['Kala', 'Mala', 'Sheela']
&lt;/pre&gt;
   &lt;pre&gt;
# add the element &quot;Bala&quot; in the list at the index 1.
   List_2.insert(1,&quot;Bala&quot;)    
   print (List_2) will output 
   ['Kala', 'Bala','Mala', 'Sheela']
&lt;/pre&gt;

=== Extend the list by adding elements of other list at end using extend()===
&lt;pre&gt;
ages = [11,23,12,23,45]
ages.extend([57,58])
print(ages)
&lt;/pre&gt;

&lt;pre&gt;
#Output: [11, 23, 12, 23, 45, 57, 58]
&lt;/pre&gt;

==== Difference between ''append and extend'' ====
Difference between append and extend can be easily understood, by the following example.

&lt;pre&gt;
appendlist = [11,23,12,23,45]
appendlist.append([57,58])

extendlist= [11,23,12,23,45]
extendlist.extend([57,58])
&lt;/pre&gt;

&lt;pre&gt;
'''Output:
[11, 23, 12, 23, 45, [57, 58]]
[11, 23, 12, 23, 45, 57, 58]'''
&lt;/pre&gt;

[[#TOP]]

==Basic Operations on List==
===Frequency of Occurrence===
list.count(object) will return the number of times the object occur in the list.
  '''Example'''
    ages = [11,23,12,23,45,43,22,24,23]
    ages.count(23) will return
    3
    ages.count(100) will return
    0

===Length of the List===
''len(list)'' will return the length of the list ie. the number of objects in the list.
  '''Example'''
&lt;pre&gt;
    ages = [11,23,12,23,45,43,22,24,23]
    len(ages) # Output: 9
&lt;/pre&gt;

To print the objects in the list either use ''for item in list'' or ''for index in range(len(list))''
&lt;pre&gt;
    for item in ages:       
        print (item)  
        (OR)
    for index in range(len(ages)) :
        print (ages[index])
&lt;/pre&gt;

===Sort the List===
''list.sort()'' will sort the list in ascending order
  '''Example'''
    ages = [11,23,12,23,45,43,22,24,23]
    ages.sort() 
    print (ages) 
    [11, 12, 22, 23, 23, 23, 24, 43, 45]

[[#TOP]]

===Sort the List using sorted() function===
sorted(list1) will sort the list and return a new list, it doesn't modify the original list
&lt;br&gt;'''Example: Sort in ascending order'''
&lt;pre&gt;
ages = [11,23,12,23,45,43,22,24,23]
newList=sorted(ages)
print(newList)

#Output: [11, 12, 22, 23, 23, 23, 24, 43, 45]
&lt;/pre&gt;

&lt;br&gt;'''Example: Sort in descending order'''
&lt;pre&gt;
ages = [11,23,12,23,45,43,22,24,23]
newList=sorted(ages,reverse=True)
print(newList)

#Output: [45, 43, 24, 23, 23, 23, 22, 12, 11]
&lt;/pre&gt;

===Reverse the List===
list.reverse() will reverse the original list
  '''Example'''
    ages = [11, 12, 22, 23, 23, 23, 24, 43, 45]
    ages.reverse()
    print (ages)
    [45, 43, 24, 23, 23, 23, 22, 12, 11]

Both sort() and reverse() list operation will work on numeric and alphanumeric data list.

A special use of the reverse() function is to descend a list that is sorted in ascending order.

  '''Example'''
&lt;pre&gt;
ages = [11, 12, 22, 23, 23, 23, 24, 43, 45]
ages.sort()
print(ages)
ages.reverse()
print(ages)
&lt;/pre&gt;

===Slicing===
Used to retrieve an object or objects in a range as a list  
  '''Example'''

Use ''list[index]'' to retrieve the object at the given index
&lt;pre&gt;
In [1]: student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
In [2]: student[3]     #Object at index 3.  Remember index starts at 0
Out[2]: 'Geetha'      
&lt;/pre&gt;

Use ''list[start_index : end_index + 1]'' to retrieve objects from the start_index to end_index 
&lt;pre&gt;
In [3]: student[2:4]     # Objects from index 2 to 3 as List. Note the [ and ]
Out[3]: ['Vijay', 'Geetha']   
&lt;/pre&gt;

Use ''list[:]'' to retrieve objects from the starting of the list to the end of the list. 
The default start value will be the starting index of the list (i.e. 0) and the default end value
will be the length of the list 
&lt;pre&gt;
In [4]: student[:]        # prints the entire list
Out[4]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma', 'Janani']
&lt;/pre&gt;
&lt;pre&gt;
In [5]: student[:5]       # prints the objects from the start of the list upto object at index 4
Out[5]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran']
&lt;/pre&gt;
&lt;pre&gt;
In [6]: student[2:]       # prints the objects from index 2 upto the end of the list
Out[6]: ['Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma', 'Janani']
&lt;/pre&gt;

Negative index too is available in Python. It starts from last element of the list. i.e.
&lt;pre&gt;
In [7]:student[-1]        #prints last index of list
Out[7]: 'Janani'
&lt;/pre&gt;
&lt;pre&gt;
In [8]:student[-1:-8]     #prints empty list
Out[8]: []
&lt;/pre&gt;
&lt;pre&gt;
In [9]:student[-8:-1]     #prints -8th index to -1st index elements
Out[9]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma']
&lt;/pre&gt;

[[#TOP]]

===Removing Item from list ===
----

Is used to remove a specific item from the list.

'''Example:'''
 
Use list.remove(entry/value)  Or   del list[index]    Or list.pop(index)
&lt;pre&gt;
student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
student.remove(&quot;Arun&quot;)   #This will delete item &quot;Arun&quot;
         Or    
del student[0]           # This will delete item at index 0
         Or
student.pop(0)         # This will delete and return item at index 0
print(student)    
Output: &quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
&lt;/pre&gt;

[[#TOP]]

===Delete list ===
----
Used to delete complete list

'''Example'''

Use del &lt;list name&gt;
&lt;pre&gt;
student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
del student&lt;/pre&gt;

===Concatenation of two lists===
----
''+'' is the concatenation operator which is used concatenate two lists. 
&lt;pre&gt;
ages1 = [11,23,12,23,45]
ages2 = [25, 24, 43, 47]
age=ages1+ages2
print(age)
#Output: [11, 23, 12, 23, 45, 25, 24, 43, 47]
&lt;/pre&gt;

===Repeatation of a list ===
----
''*'' is the operator to repeat a particular list.
&lt;pre&gt;
ages1 = [11,23,12,23,45]
age=ages1*5 #ages1 list is repeated 5 times and stroed in ''age'' list
print(age)

#Output: [11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45]
&lt;/pre&gt;

=== all and any for List===
all() and any() are special functions to check whether all elements in iterable is ''True'' or any element is ''True''
&lt;ol&gt;
&lt;li&gt;If all elements in a list are ''True'', '''all()''' will return ''True''&lt;/li&gt;
&lt;li&gt;If iterable is ''empty'', '''all()''' will return ''True''&lt;/li&gt;
&lt;li&gt;If iterable contains at least one ''True'', '''any()''' will return ''True''&lt;/li&gt;
&lt;li&gt;If iterable is ''empty'', '''any()''' will return ''False''&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;
lsit=[True, True, True, True]
print(all(lsit))#Output: True
print(any(lsit))#Output: True

lsit1=[True, False, True, True]
print(all(lsit1))#Output: False
print(any(lsit1))#Output: True

lsit2=[False,False,False]
print(all(lsit2))#Output: False
print(any(lsit2))#Output: False

lsit3=[]
print(all(lsit3))#Output: True
print(any(lsit3))#Output: False
&lt;/pre&gt;

==Conditional Statements==
&lt;pre&gt;Conditionals are used to check the condition and change the flow of the program 
accordingly. They are realized in programming languages through if statement. The 
syntax is as follows :
&lt;pre&gt;
         if condition : 
            statement
&lt;/pre&gt;
    '''Note:''' Do not forget indentation (inserting space/tab) in the line after the
 if condition.
    
    In case you want to execute a set of statements when a condition is true and another

set of statement when the condition is false.
&lt;pre&gt;
         if condition : 
            statement 1
         else :
            statement 2
&lt;/pre&gt;

&lt;pre&gt;    
    Multiple if-else statements can be written as follows:
         if condition_1 : 
            statement 1
         elif condition_2 : # 'elif' is short for 'else if'
            statement 2
         elif condition_3 :
            statement 3
        .
        .
         else :
            final statement
&lt;/pre&gt;

[[#TOP]]

=Loops and Conditionals : Fizzbuzz=
====Loops====
Loops are used to execute a set of repetitive statements. They are realised
through 'while' and 'for' loops in programming languages. The syntax of 'for' loop is 
as follows :
&lt;pre&gt;
for LOOPVARIABLE in SEQUENCE: 
            STATEMENTS&lt;/pre&gt;

    '''e.g.''' to print all the data from a list we can write:
&lt;pre&gt;
for item in list_name:
      print(item)&lt;/pre&gt;
    OR
&lt;pre&gt;
for index in range(len(list_name)):
      print(list_name[index])
 &lt;/pre&gt;   
    The syntax for while loop is as follows :
&lt;pre&gt;    
while BOOLEANEXPRESSION: 
     STATEMENTS
     INCREMENT/DECREMENT
&lt;/pre&gt;    
    '''e.g.''' if we want to print all numbers from 1 to 10
&lt;pre&gt;
i=1
while i&lt;=10 :
    print(i,&quot; &quot;)
    i=i+1
    &lt;/pre&gt;
 
'while' loop has indefinite iteration (run-time unknown). So, there must be loop,  break statement in it.
 Whereas 'for' loop is definite in nature (i.e. known or predictable span).&lt;br&gt;

&lt;b&gt;NOTE: Python doesn't have anything like do-while loop.&lt;/b&gt;

[[#TOP]]

==Implementation==
Here, we try to demonstrate the concept of loops and conditionals through a game called Fizzbuzz. The rules are as follows :&lt;br/&gt;
[[File:fizzBuzz.gif]]

• if input number is a multiple of ’3’ print ”Fizz”
&lt;br/&gt;
• if input number is a multiple of ’5’ print ”Buzz”
&lt;br/&gt;
• if input number is a multiple of both '3' and ’5’ print ”FizzBuzz”
&lt;br/&gt;
The pseudo code is as follows :
&lt;pre&gt;
   If input no % 3 == 0 and  input no % 5 == 0 : 
       print ”Fizzbuzz”
   else if input no % 3 == 0 : 
       print ”Fizz”
   else if input no % 5 == 0 : 
       print ”Buzz”
   else :
       print the input no
&lt;/pre&gt;
 &lt;p style=&quot;text-align:justify&quot;&gt;
The order of statements execution matters to get the desired output. The highest priority condition should be first followed by other. In fizzbuzz programming, first checking should be done for both divisibility of 3 and 5. If condition not satisfied only then it should check individually for 3 or 5. So carefully choosing the order is crucial for better programming.
Note: There is some effect of present condition statements chosen on next conditions statements. That is why in first attempt fizzbuzz programming got struck.&lt;/p&gt;

Example: 
&lt;pre&gt;
#Code to achieve the above requirement in python3.
i = int(input(&quot;Enter the number&quot;)) 
if i%3 == 0 and i%5 == 0: print(i,&quot;FizzBuzz&quot;)  
elif i%5 == 0: print(i,&quot;Buzz&quot;)
elif i%3 == 0: print(i,&quot;Fizz&quot;)
else: print(i)
&lt;/pre&gt;
Lets put the same into a loop for a range given by the user.
&lt;pre&gt;
def fizzbuzzgame(start,stop):
    for i in range(start,stop+1):
        if i%3 == 0 and i%5 == 0:
            print(i,&quot;FizzBuzz&quot;)
        elif i%5 == 0:
            print(i,&quot;Buzz&quot;)
        elif i%3 == 0:
            print(i,&quot;Fizz&quot;)
        else: print(i)

fizzbuzzgame(50,100)
&lt;/pre&gt;
&lt;pre&gt;
#Output:
1235
Buzz
======================================
555
Fizzbuzz
======================================
1235
Buzz
======================================
999
Fizz
&lt;/pre&gt;

=== Fizz Buzz game in Interactive mode with Score ===
'''By Ms. Ami Tusharkant Choksi'''
&lt;pre&gt;
def fizzbuzzgame(i):
        if i%3 == 0 and i%5 == 0:
            print(i,&quot;FizzBuzz&quot;)
            return(&quot;fzbz&quot;)
        elif i%5 == 0:
            print(i,&quot;Buzz&quot;)
            return(&quot;bz&quot;)
        elif i%3 == 0:
            print(i,&quot;Fizz&quot;)
            return(&quot;fz&quot;)
        else:
            print(i)
            return(&quot;no&quot;)

ch = 'y'
fizzbuzz=0
fizz=0
buzz=0
nothing=0
print(&quot;&quot;&quot;

 /$$$$$$$$/$$                  /$$$$$$$                            
| $$_____|__/                 | $$__  $$                           
| $$      /$$/$$$$$$$$/$$$$$$$| $$  \ $$/$$   /$$/$$$$$$$$/$$$$$$$$
| $$$$$  | $|____ /$$|____ /$$| $$$$$$$| $$  | $|____ /$$|____ /$$/
| $$__/  | $$  /$$$$/   /$$$$/| $$__  $| $$  | $$  /$$$$/   /$$$$/ 
| $$     | $$ /$$__/   /$$__/ | $$  \ $| $$  | $$ /$$__/   /$$__/  
| $$     | $$/$$$$$$$$/$$$$$$$| $$$$$$$|  $$$$$$//$$$$$$$$/$$$$$$$$
|__/     |__|________|________|_______/ \______/|________|________/
                                                                  
&quot;&quot;&quot;)   
print('''

  /$$$$$$                                
 /$$__  $$                               
| $$  \__/ /$$$$$$ /$$$$$$/$$$$  /$$$$$$ 
| $$ /$$$$|____  $| $$_  $$_  $$/$$__  $$
| $$|_  $$ /$$$$$$| $$ \ $$ \ $| $$$$$$$$
| $$  \ $$/$$__  $| $$ | $$ | $| $$_____/
|  $$$$$$|  $$$$$$| $$ | $$ | $|  $$$$$$$
 \______/ \_______|__/ |__/ |__/\_______/
                                     
''')

while(ch == 'y'):
    n=int(input(&quot;Enter a Number : &quot;))
    winLoose=fizzbuzzgame(n)
    if(winLoose == &quot;fz&quot;):
        fizz+=1
    elif(winLoose == &quot;bz&quot;):
        buzz+=1
    elif(winLoose == &quot;fzbz&quot;):
        fizzbuzz+=1
    ch=input(&quot;Do you want to continue playing the game : (y/n)&quot;)
    if(ch=='n'):
        print('Congratulations, your score is\n FizzBuzz:%d\nFizz:%d\nBuzz:%d' %
(fizzbuzz,fizz,buzz))
    
'''Sample Output:

 /$$$$$$$$/$$                  /$$$$$$$                            
| $$_____|__/                 | $$__  $$                           
| $$      /$$/$$$$$$$$/$$$$$$$| $$  \ $$/$$   /$$/$$$$$$$$/$$$$$$$$
| $$$$$  | $|____ /$$|____ /$$| $$$$$$$| $$  | $|____ /$$|____ /$$/
| $$__/  | $$  /$$$$/   /$$$$/| $$__  $| $$  | $$  /$$$$/   /$$$$/ 
| $$     | $$ /$$__/   /$$__/ | $$  \ $| $$  | $$ /$$__/   /$$__/  
| $$     | $$/$$$$$$$$/$$$$$$$| $$$$$$$|  $$$$$$//$$$$$$$$/$$$$$$$$
|__/     |__|________|________|_______/ \______/|________|________/
                                                                                                                                   

  /$$$$$$                                
 /$$__  $$                               
| $$  \__/ /$$$$$$ /$$$$$$/$$$$  /$$$$$$ 
| $$ /$$$$|____  $| $$_  $$_  $$/$$__  $$
| $$|_  $$ /$$$$$$| $$ \ $$ \ $| $$$$$$$$
| $$  \ $$/$$__  $| $$ | $$ | $| $$_____/
|  $$$$$$|  $$$$$$| $$ | $$ | $|  $$$$$$$
 \______/ \_______|__/ |__/ |__/\_______/
                                         

Enter a Number : 666
666 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 777
777 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 555
555 FizzBuzz
Do you want to continue playing the game : (y/n)y
Enter a Number : 1
1
Do you want to continue playing the game : (y/n)y
Enter a Number : 789
789 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 25
25 Buzz
Do you want to continue playing the game : (y/n)n
Congratulations, your score is

FizzBuzz:1
Fizz:3
Buzz:1

&lt;/pre&gt;

=Crowd Computing: Just Estimate=
==Wisdom of Crowds==
 &lt;p style=&quot;text-align:justify&quot;&gt;
The concept of ’Wisdom of Crowds’ was proposed by Francis Galton. A weight-judging competition was carried on at the annual show of the West of England Fat Stock and Poultry Exhibition recently held at Plymouth, A fat ox having been selected, competitors bought stamped and numbered cards, each, on which to inscribe their respective names, addresses, and estimates of what the ox would weigh after it had been slaughtered. Those who guessed most successfully received prizes. About 8oo tickets were issued to the par- ticipants. The middlemost estimate of all the estimates recorded was 1207 lbs and the actual weight of the ox was 1198 lbs.&lt;/p&gt;

==Our Experiment==
 &lt;p style=&quot;text-align:justify&quot;&gt;
The crowd had to guess the number of candies/gems in a jar. Around 75 people participated in the experiment. The actual number of gems in the jar were 375. The median of all estimates came out to be 300 and the mean of all the estimates came out to be around 396. Median underestimated and mean overestimated the actual value. So according to recent studies, Trimmed mean must be used as an aggregate measure to estimate where Wisdom of Crowds is involved.
&lt;/p&gt;
[[File:Gemsjar.jpg|center|200px|caption]]

===Trimmed Mean===
 &lt;p style=&quot;text-align:justify&quot;&gt;
In these kinds of experiments, 10% trimmed mean is usually followed. For calculating 10% trimmed mean, remove 10% smallest and 10% largest values from the sample. Calculate the mean of the sample obtained. In the above experiment, the trimmed mean came out to be around 351 which is very close to the actual value.&lt;/p&gt;

==Implementation==
Here, we try to demonstrate the concept of trimmed mean through crowd computing.
&lt;ol&gt;
&lt;li&gt; Input a list of estimates done by the crowd .&lt;/li&gt;
&lt;li&gt; Sort the list.&lt;/li&gt;
&lt;li&gt; Remove the 10% smallest values.&lt;/li&gt;
&lt;li&gt; Remove the 10% largest values.
&lt;li&gt; Calculate the mean of the new list obtained .&lt;/li&gt;&lt;/ol&gt;&lt;hr&gt;

==Data of Experiment==       
    Estimates =[1000,1010,1786,2000,1500,1500,100,120,150,150,150,170,175,180,197,200,200,200,200,200,200,220,220,220,220,234,250,250,250,250,250,250,250,250,250,263,270,275,275,286,300,
                300,300,300,300,300,300,300,320,350,350,350,400, 400,400,400,400,450,467,500,500,500,500,500,500,500,550,550,600,600,600,650,700,700,720]

    '''CODE:'''
&lt;pre&gt;
Estimates = [1000,1010,1786,2000,1500,1500,100,120,150,150,150,170,175,180,197,200,200,200,200,200,200,220,220,220,220,234,250,250,250,250,250,250,250,250,250,263,270,275,275,286,300,                300,300,300,300,300,300,300,320,350,350,350,400,400,400,400,400,450,467,500,500,500,500,500,500,500,550,550,600,600,600,650,700,700,720]
Estimates.sort()
offset = int(0.10*len(Estimates))
for i in range(offset):
       del Estimates[0]
       del Estimates[-1]
Sum = 0    
for i in range(len(Estimates)):
       Sum += Estimates[i]
Mean_Value = Sum/len(Estimates)
print(&quot;Mean : &quot;, int(Mean_Value))
#Output:
Mean :  351
&lt;/pre&gt;
&lt;hr&gt;
==Trimmed Mean for the above example== 
&lt;h3&gt;Using scipy library&lt;/h3&gt;
&lt;pre&gt;
#import scipy to use the method of trim_mean
from scipy import stats
trimMean = stats.trim_mean(Estimates, 0.1) # Trim 10% at both ends
print(&quot;Trimmed Mean : &quot;,trimMean)
#Output:
Trimmed Mean :  335.1020408163265
&lt;/pre&gt;

&lt;h3&gt;Without using scipy library&lt;/h3&gt;
&lt;pre&gt;
#Trimmed mean with 10%
p=10/100
#sorted data
data=[2, 4, 6, 7, 11, 21, 81, 90, 105, 121]
n = len(data)
#Remove elements from both end
rem=int(n*p)
newData = data[rem:-rem]
mean = 0
for i in newData:
    mean += i
mean = int(mean/len(newData))
print(&quot;Trimmed mean : &quot;,mean)
#Output: Trimmed mean :  40
&lt;/pre&gt;
[[#Top]]

=Jumbled_Words Permutations: Jumbled Words=
==What are Permutations ?==
A permutation also called ordering of selected number of elements from a list denoted by nPr here we are choosing all elements of a list and so n=r&lt;br&gt;
nPr=n!/(n-r)!&lt;br&gt; as n=r
nPn=n!&lt;br&gt; which gives all possible arrangement of elements present in a list.

 For example, permutations of list [1,2,3] are [1,2,3], [1,3,2], [2,1,3], [2,3,1], 
[3,1,2], and [3,2,1]. 
The number of permutations of a list of elements nPn is given by n!. For example, there are 2! = 2 x 1 = 2 permutations of [1,2], namely [1,2] and [2,1], and 3! = 3 x 2 x 1 = 6 permutations of [1,2,3], as mentioned above.&lt;br/&gt;
[[File:Permutations.jpg]]

==Implementation==
 &lt;p style=&quot;text-align:justify&quot;&gt;
Here, we try to demonstrate the concept of permutations through jumbled words. It is a two player game in which one person presents the other person a different permutation of the word in his mind. The other person has to guess the right word. If he guesses, the he wins otherwise he loses.&lt;/p&gt;
 Input an list of words.
 Randomly pick a word from the list of words .
 Shuffle this word and present it to the other player.
 if word guesses by the player is same as the one picked from list of w
     player wins
 else
     player loses

ALTERNATE CODE TO GENERATE THIS GAME:
&lt;pre&gt;
import random
p1=input(&quot;enter player 1 name:&quot;)
p2=input(&quot;enter player 2 name:&quot;)
l=[&quot;rainbow&quot;,&quot;computer&quot;,&quot;robot&quot;,&quot;butter&quot;,&quot;vegetable&quot;,&quot;science&quot;,&quot;correct&quot;]
c1=c2=a1=a2=f1=f2=0
k=1
i=3
def play():
    n=random.choice(l)        ##n=chooses a word from list l
    l1=[]
    for j in n:
       l1.append(j)      ##creates a list for word in n
    for t in range(len(l1)):
       p=random.choice(l1)     ##this randomly displays letters in the list
       print(p)
       l1.remove(p)          ##to avoid the repetition of a letter
    s=input(&quot;enter the word:&quot;)
    if(s==n):
        print(&quot;correct&quot;)
        return 1
    else:
        print(&quot;not correct&quot;)
        print(&quot;answer is&quot;,n)
        return 0
def stat():
     print(&quot;player 1:&quot;)
     print(&quot;score:&quot;,c1)
     print(&quot;answered:&quot;,a1)
     print(&quot;failed:&quot;,f1)
     print(&quot;.............&quot;)
     print(&quot;player 2:&quot;)
     print(&quot;score:&quot;,c2)
     print(&quot;answered:&quot;,a2)
     print(&quot;failed&quot;,f2)
     if(c1&gt;c2):
         print(p1,&quot; won over &quot;,p2)
     elif(c1==c2):
         print(&quot;draw game&quot;)
     else:
         print(p2,&quot; won over &quot;,p1) 
while(i!=4):
      if(i==3):
         if(k==1):
             print(&quot;player 1 turn&quot;)
             print(&quot;your jumbled word is:&quot;)
             k=k+1
             m=play()
             if(m==1):      ##if guessed answer is correct,then score and no.of answered count will be increased
                c1+=1
                a1+=1
             else:
                f1+=1       ##else count of no.of failed to answered will be incremented
         else:
             print(&quot;player 2 turn&quot;)
             print(&quot;your jumbled word is:&quot;)
             k=k-1
             m=play()
             if(m==1):
                c2=c2+1
                a2=a2+1
             else:
                f2=f2+1
       if(i==2):
             print(&quot;present status&quot;)
             stat()
       i=int(input(&quot;enter your choice  1.stop 2.status 3.continue&quot;))
       if(i==1):
             stat()
             i=i+3
&lt;/pre&gt;
&lt;hr&gt;
=== JumbledWord Simple Logic, In Short ===
[[File:jumbledWord.gif]]
---
&lt;hr&gt;
'''Logic to create a Jumbled Word'''
&lt;hr&gt;
&lt;pre&gt;
#Get Jumbled Word and print it Horizontally
import random

def getJumbledWord(b):
    jumble=''
    l1 = [ b[i] for i in range(0, len(b)) ]
    for t in range(len(l1)):
       p=random.choice(l1)  #this randomly gets letters from the list      
       jumble=jumble+p       
       l1.remove(p)
    return jumble

b=input(&quot;Enter a word to make it jumbled : &quot;)
print(&quot;Jumbled Word : &quot;, getJumbledWord(b))
&lt;/pre&gt;
&lt;pre&gt;
Output:
Enter a word to make it jumbled : live and let live others
Jumbled Word :  vel  toldeisrte aihv len
==========================================
Enter a word to make it jumbled : junkfood
Jumbled Word :  nfukdooj
&lt;/pre&gt;
&lt;hr&gt;
'''Another Logic to create a Jumbled Word'''
&lt;hr&gt;
&lt;pre&gt;
import random
b=input(&quot;Enter a word to make it jumbled : &quot;)

def getJumbledWord1(b):
    l1 = [ b[i] for i in range(0, len(b)) ]
    random.shuffle(l1)
    str1 = ''.join(l1)
    return str1

print(&quot;Jumbled Word : &quot;, getJumbledWord1(b))
&lt;/pre&gt;

====Sample Output:====
&lt;pre&gt;
---- Output1 
Enter a word to make it jumbled : butter
Jumbled Word :  tbture

---- Output2 
Enter a word to make it jumbled : petriotism
Jumbled Word :  pittrosime
&lt;/pre&gt;

=Theory of Evolution=

== What is Evolution ? ==
Evolution is the change in heritable characteristics over successive generations. The theory of evolution explains that DNA, which acts as a carrier of genetic information from one generation to other, tends to change or mutate occasionally. These changes are reflected in next generations to come. This is how life has evolved on earth from bacteria to human beings.&lt;br&gt;
[[File:Evolution.png|500px]]

== Implementation ==
 &lt;p style=&quot;text-align:justify&quot;&gt;
An array representing DNA is stored in a file. As genes are forms of DNA, they contain information to be transferred to forthcoming generations. Assume that information is in the form of bits (in the form of 0s and 1s). A number is picked randomly from 1 to the size of the array. A new parameter has been introduced which decides whether mutation would occur or not. If the value of this new parameter is 1 (It is picked randomly from 1 to 100), then only change is reflected down the generations, otherwise it is not. The pseudo code is as follows :
&lt;/p&gt;
Input an array containing genetic information .
Randomly generate a number (say m) from 1 to length of the array. Randomly generate other number (say p) from 1 to 100.

&lt;pre&gt; 
    if p is equal to 1 then 
        if m is 1 then
          set it to 0
        else
          set it to 1
&lt;/pre&gt;
[[#TOP]]</text>
      <sha1>qhzekeswoyrsidoo8qbv1czs306uprb</sha1>
    </revision>
    <revision>
      <id>3747</id>
      <parentid>3746</parentid>
      <timestamp>2018-09-29T04:04:59Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* Sort the List */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="30713">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_3 Contributors of this page]
*Week 3 Playlist: https://www.youtube.com/playlist?list=PLc_j0TNIaWxOVx_z9jAM2UB3RqYNXaoEo
=List=
List is a flexible data structure used for storing a group of data separated by comma. The elements in a list need not be of the same data type.

'''Example:'''
       List_1 = [ 1, 2,3] or 
       List_1 = [&quot;coffee&quot;, &quot;Tea&quot;, &quot;Milk&quot;] or
       List_1 = [1,&quot;coffee&quot;, &quot;Tea&quot;, 3, &quot;5&quot;]

==List Creation==
a) A list can be created by simply putting values (separated by comma) between square
 brackets as given below,
&lt;pre&gt;List_1 = [1,&quot;coffee&quot;, &quot;Tea&quot;, 3, &quot;5&quot;] #this creates a list by name List_1 containing
 following items
&lt;/pre&gt;


Or,
(b)A List can be created from scratch and elements can be added 
&lt;pre&gt;
        List_2 = [ ]
        List_2.append(&quot;Kala&quot;)
        List_2.append(&quot;Mala&quot;)
&lt;/pre&gt;
Here we use &quot;append&quot;, which is a function in python that enable us to append or attach an element to a list .
&lt;pre&gt;Thus List_2 will now hold [&quot;Kala&quot;,&quot;Mala&quot;]&lt;/pre&gt;

[[#Top]]

==Operations and Methods to work with List==
&lt;pre&gt;
a = [25,30,50,90,12,13]
b = [100,300,500,200,250]
&lt;/pre&gt;
&lt;hr&gt;
&lt;table border=2&gt;
  &lt;tr&gt;
    &lt;th&gt;&lt;b&gt;Method/&lt;br&gt;Operator&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Function&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Syntax&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Output&lt;/b&gt;&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;len()&lt;/td&gt;
    &lt;td&gt;Find length of a list&lt;/td&gt;
    &lt;td&gt;len(a)&lt;/td&gt;
    &lt;td&gt;6&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;max()&lt;/td&gt;
    &lt;td&gt;Find maximum element from the list&lt;/td&gt;
    &lt;td&gt;max(a)&lt;/td&gt;
    &lt;td&gt;90&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;min()&lt;/td&gt;
    &lt;td&gt;Find minimum element from the list&lt;/td&gt;
    &lt;td&gt;min(a)&lt;/td&gt;
    &lt;td&gt;12&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sum()&lt;/td&gt;
    &lt;td&gt;Returns sum of all elements of the list&lt;/td&gt;
    &lt;td&gt;sum(a)&lt;/td&gt;
    &lt;td&gt;220&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;reverse()&lt;/td&gt;
    &lt;td&gt;Reverses the original list&lt;/td&gt;
    &lt;td&gt;a.reverse()&lt;/td&gt;
    &lt;td&gt;[13, 12, 90, 50, 30, 25]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sort()&lt;/td&gt;
    &lt;td&gt;Sorts the original list in ascending order&lt;/td&gt;
    &lt;td&gt;a.sort()&lt;/td&gt;
    &lt;td&gt;[12, 13, 25, 30, 50, 90]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sorted()&lt;/td&gt;
    &lt;td&gt;Returns the new sorted list &lt;/td&gt;
    &lt;td&gt;sorted(a)&lt;/td&gt;
    &lt;td&gt;[12, 13, 25, 30, 50, 90]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;insert()&lt;/td&gt;
    &lt;td&gt;Insert at a particular index in the list, and shifts remaining elements&lt;/td&gt;
    &lt;td&gt;a.insert(3,3)&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 3, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;append()&lt;/td&gt;
    &lt;td&gt;Adds elements/object to the end of the list&lt;/td&gt;
    &lt;td&gt;a.append(5)&lt;br&gt;a.append([10,20])&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 5]&lt;br&gt;[25, 30, 50, 90, 12, 13, [10, 20]]&lt;br&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;extend()&lt;/td&gt;
    &lt;td&gt;Adds object to the end of the list as elements not as object&lt;/td&gt;
    &lt;td&gt;a.extend([10,20])&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 10, 20]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;*&amp;nbsp;&amp;nbsp;Repeatation&lt;br&gt;operator&lt;/td&gt;
    &lt;td&gt;Repeat the list for n times and returns a new list&lt;/td&gt;
    &lt;td&gt;a*2&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 25, 30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;+ Concatenation&lt;br&gt;operator&lt;/td&gt;
    &lt;td&gt;Concatenates two lists, and returns a new list&lt;/td&gt;
    &lt;td&gt;a+b&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 100, 300, 500, 200, 250]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;index()&lt;/td&gt;
    &lt;td&gt;Finds index of a particular element in the list or not&lt;/td&gt;
    &lt;td&gt;a.index(25)&lt;br&gt;a.index(0)&lt;br&gt;&lt;/td&gt;
    &lt;td&gt;0&lt;br&gt;&lt;br&gt;ValueError: 0 is not in list&lt;br&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;in operator&lt;/td&gt;
    &lt;td&gt;Finds whether a particular element is in the list or not, returns boolean&lt;/td&gt;
    &lt;td&gt;25 in a&lt;/td&gt;
    &lt;td&gt;True&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;not in operator&lt;/td&gt;
    &lt;td&gt;Checks if element is not available in list, returns boolean&lt;/td&gt;
    &lt;td&gt;25 not in a&lt;/td&gt;
    &lt;td&gt;False&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;count()&lt;/td&gt;
    &lt;td&gt;Counts the number of occurence of an element in the list&lt;/td&gt;
    &lt;td&gt;a.count(25)&lt;/td&gt;
    &lt;td&gt;1&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;remove()&lt;/td&gt;
    &lt;td&gt;Removes an element from the list&lt;/td&gt;
    &lt;td&gt;a.remove(25)&lt;/td&gt;
    &lt;td&gt; [30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;pop()&lt;/td&gt;
    &lt;td&gt;Delete and return item at index 0&lt;/td&gt;
    &lt;td&gt;a.pop(0)&lt;/td&gt;
    &lt;td&gt;25 , a will be [30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;del&lt;/td&gt;
    &lt;td&gt;Deletes item at a particular index from the list&lt;/td&gt;
    &lt;td&gt;del a[0]&lt;/td&gt;
    &lt;td&gt;[30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;all()&lt;/td&gt;
&lt;td&gt;Returns True, if all items in list are True or it is an empty list&lt;/td&gt;
&lt;td&gt;all([True, True, True])
all([])
&lt;/td&gt;
&lt;td&gt;True&lt;br&gt;
True&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;any()&lt;/td&gt;
&lt;td&gt;Returns True, if any item in list is True else return False&lt;/td&gt;
&lt;td&gt;any([True, True, True])&lt;br&gt;
any([True, False, True])&lt;br&gt;
any([])&lt;/td&gt;
&lt;td&gt;True&lt;br&gt;False&lt;br&gt;False&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;

==Printing the List==
=== Print whole list ===
A list can be printed simply or using a ''for / while'' loop 

 print(List_2)     # To print the entire list
This code will print      
 ['Kala','Mala']     

===Print element at a particular index===
&lt;pre&gt;
Using index position
    List_2[0]     # prints 'Kala' ,i.e,the value at index position 0.
    List_2[1]     # prints 'Mala'.
&lt;/pre&gt;
=== Without using index position ===
&lt;pre&gt;
for item in List_2:   # here item is a variable used to access elements in list.
       print(item)
   This code snippet prints 
    Kala
    Mala
&lt;/pre&gt;
[[#TOP]]

==Search for a particular element in list==
Elements in a list can be searched by one of the two ways:
=== using index() function===
&lt;pre&gt;
ages1 = [11,23,12,23,45]

#if element is available in the list, index() returns the index value on which, the element is
 present.
print(ages1.index(45))#Output: 4

#if element is not available in the list, index() returns ''ValueError''
print(ages1.index(0))#Output: ValueError:
&lt;/pre&gt;

In programming, if such error occurs, program gets terminated. It can be solved using exception handling.
 
e.g.
&lt;pre&gt;
ages1 = [11,23,12,23,45]

try:
    print(ages1.index(0))
except ValueError:
    print(&quot;Exception has occured&quot;)    
    print(&quot;Element is not found in the list&quot;)

&lt;/pre&gt;
&lt;pre&gt;
'''Output: 
Exception has occured
Element is not found in the list
'''&lt;/pre&gt;
[[#Top]]

=== using 'in' operator===
''in'' operator is used to check whether a particular element is available in the list or not.e.g.

&lt;pre&gt;
ages1 = [11,23,12,23,45]
no=11

if no in ages1:
    print(&quot;no is there in the list&quot;)
else:    
    print(&quot;no is NOT there in the list&quot;)
&lt;/pre&gt;
&lt;pre&gt;
#Output: no is there in the list
&lt;/pre&gt;


'''Number is not there in the list'''
&lt;pre&gt;
ages1 = [11,23,12,23,45]
no=15

if no in ages1:
    print(&quot;no is there in the list&quot;)
else:    
    print(&quot;no is NOT there in the list&quot;)
&lt;/pre&gt;
&lt;pre&gt;
Output: no is NOT there in the list
&lt;/pre&gt;
[[#TOP]]

==Updating the List==
The lists can be updated using ''append'' or ''insert'' function.  Append adds the element to the end of the list and Insert adds the element in the specified position.
&lt;pre&gt;
   # add the element 'Sheela' to the end of the list.
   List_2.append(&quot;Sheela&quot;)    
   print (List_2) will output 
   ['Kala', 'Mala', 'Sheela']
&lt;/pre&gt;
   &lt;pre&gt;
# add the element &quot;Bala&quot; in the list at the index 1.
   List_2.insert(1,&quot;Bala&quot;)    
   print (List_2) will output 
   ['Kala', 'Bala','Mala', 'Sheela']
&lt;/pre&gt;

=== Extend the list by adding elements of other list at end using extend()===
&lt;pre&gt;
ages = [11,23,12,23,45]
ages.extend([57,58])
print(ages)
&lt;/pre&gt;

&lt;pre&gt;
#Output: [11, 23, 12, 23, 45, 57, 58]
&lt;/pre&gt;

==== Difference between ''append and extend'' ====
Difference between append and extend can be easily understood, by the following example.

&lt;pre&gt;
appendlist = [11,23,12,23,45]
appendlist.append([57,58])

extendlist= [11,23,12,23,45]
extendlist.extend([57,58])
&lt;/pre&gt;

&lt;pre&gt;
'''Output:
[11, 23, 12, 23, 45, [57, 58]]
[11, 23, 12, 23, 45, 57, 58]'''
&lt;/pre&gt;

[[#TOP]]

==Basic Operations on List==
===Frequency of Occurrence===
list.count(object) will return the number of times the object occur in the list.
  '''Example'''
    ages = [11,23,12,23,45,43,22,24,23]
    ages.count(23) will return
    3
    ages.count(100) will return
    0

===Length of the List===
''len(list)'' will return the length of the list ie. the number of objects in the list.
  '''Example'''
&lt;pre&gt;
    ages = [11,23,12,23,45,43,22,24,23]
    len(ages) # Output: 9
&lt;/pre&gt;

To print the objects in the list either use ''for item in list'' or ''for index in range(len(list))''
&lt;pre&gt;
    for item in ages:       
        print (item)  
        (OR)
    for index in range(len(ages)) :
        print (ages[index])
&lt;/pre&gt;

===Sort the List===
''list.sort()'' will sort the list in ascending order
  '''Example'''
    ages = [11,23,12,23,45,43,22,24,23]
    ages.sort() 
    print (ages) 
    [11, 12, 22, 23, 23, 23, 24, 43, 45]

[[#Top]]

===Sort the List using sorted() function===
sorted(list1) will sort the list and return a new list, it doesn't modify the original list
&lt;br&gt;'''Example: Sort in ascending order'''
&lt;pre&gt;
ages = [11,23,12,23,45,43,22,24,23]
newList=sorted(ages)
print(newList)

#Output: [11, 12, 22, 23, 23, 23, 24, 43, 45]
&lt;/pre&gt;

&lt;br&gt;'''Example: Sort in descending order'''
&lt;pre&gt;
ages = [11,23,12,23,45,43,22,24,23]
newList=sorted(ages,reverse=True)
print(newList)

#Output: [45, 43, 24, 23, 23, 23, 22, 12, 11]
&lt;/pre&gt;

===Reverse the List===
list.reverse() will reverse the original list
  '''Example'''
    ages = [11, 12, 22, 23, 23, 23, 24, 43, 45]
    ages.reverse()
    print (ages)
    [45, 43, 24, 23, 23, 23, 22, 12, 11]

Both sort() and reverse() list operation will work on numeric and alphanumeric data list.

A special use of the reverse() function is to descend a list that is sorted in ascending order.

  '''Example'''
&lt;pre&gt;
ages = [11, 12, 22, 23, 23, 23, 24, 43, 45]
ages.sort()
print(ages)
ages.reverse()
print(ages)
&lt;/pre&gt;

===Slicing===
Used to retrieve an object or objects in a range as a list  
  '''Example'''

Use ''list[index]'' to retrieve the object at the given index
&lt;pre&gt;
In [1]: student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
In [2]: student[3]     #Object at index 3.  Remember index starts at 0
Out[2]: 'Geetha'      
&lt;/pre&gt;

Use ''list[start_index : end_index + 1]'' to retrieve objects from the start_index to end_index 
&lt;pre&gt;
In [3]: student[2:4]     # Objects from index 2 to 3 as List. Note the [ and ]
Out[3]: ['Vijay', 'Geetha']   
&lt;/pre&gt;

Use ''list[:]'' to retrieve objects from the starting of the list to the end of the list. 
The default start value will be the starting index of the list (i.e. 0) and the default end value
will be the length of the list 
&lt;pre&gt;
In [4]: student[:]        # prints the entire list
Out[4]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma', 'Janani']
&lt;/pre&gt;
&lt;pre&gt;
In [5]: student[:5]       # prints the objects from the start of the list upto object at index 4
Out[5]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran']
&lt;/pre&gt;
&lt;pre&gt;
In [6]: student[2:]       # prints the objects from index 2 upto the end of the list
Out[6]: ['Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma', 'Janani']
&lt;/pre&gt;

Negative index too is available in Python. It starts from last element of the list. i.e.
&lt;pre&gt;
In [7]:student[-1]        #prints last index of list
Out[7]: 'Janani'
&lt;/pre&gt;
&lt;pre&gt;
In [8]:student[-1:-8]     #prints empty list
Out[8]: []
&lt;/pre&gt;
&lt;pre&gt;
In [9]:student[-8:-1]     #prints -8th index to -1st index elements
Out[9]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma']
&lt;/pre&gt;

[[#TOP]]

===Removing Item from list ===
----

Is used to remove a specific item from the list.

'''Example:'''
 
Use list.remove(entry/value)  Or   del list[index]    Or list.pop(index)
&lt;pre&gt;
student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
student.remove(&quot;Arun&quot;)   #This will delete item &quot;Arun&quot;
         Or    
del student[0]           # This will delete item at index 0
         Or
student.pop(0)         # This will delete and return item at index 0
print(student)    
Output: &quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
&lt;/pre&gt;

[[#TOP]]

===Delete list ===
----
Used to delete complete list

'''Example'''

Use del &lt;list name&gt;
&lt;pre&gt;
student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
del student&lt;/pre&gt;

===Concatenation of two lists===
----
''+'' is the concatenation operator which is used concatenate two lists. 
&lt;pre&gt;
ages1 = [11,23,12,23,45]
ages2 = [25, 24, 43, 47]
age=ages1+ages2
print(age)
#Output: [11, 23, 12, 23, 45, 25, 24, 43, 47]
&lt;/pre&gt;

===Repeatation of a list ===
----
''*'' is the operator to repeat a particular list.
&lt;pre&gt;
ages1 = [11,23,12,23,45]
age=ages1*5 #ages1 list is repeated 5 times and stroed in ''age'' list
print(age)

#Output: [11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45]
&lt;/pre&gt;

=== all and any for List===
all() and any() are special functions to check whether all elements in iterable is ''True'' or any element is ''True''
&lt;ol&gt;
&lt;li&gt;If all elements in a list are ''True'', '''all()''' will return ''True''&lt;/li&gt;
&lt;li&gt;If iterable is ''empty'', '''all()''' will return ''True''&lt;/li&gt;
&lt;li&gt;If iterable contains at least one ''True'', '''any()''' will return ''True''&lt;/li&gt;
&lt;li&gt;If iterable is ''empty'', '''any()''' will return ''False''&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;
lsit=[True, True, True, True]
print(all(lsit))#Output: True
print(any(lsit))#Output: True

lsit1=[True, False, True, True]
print(all(lsit1))#Output: False
print(any(lsit1))#Output: True

lsit2=[False,False,False]
print(all(lsit2))#Output: False
print(any(lsit2))#Output: False

lsit3=[]
print(all(lsit3))#Output: True
print(any(lsit3))#Output: False
&lt;/pre&gt;

==Conditional Statements==
&lt;pre&gt;Conditionals are used to check the condition and change the flow of the program 
accordingly. They are realized in programming languages through if statement. The 
syntax is as follows :
&lt;pre&gt;
         if condition : 
            statement
&lt;/pre&gt;
    '''Note:''' Do not forget indentation (inserting space/tab) in the line after the
 if condition.
    
    In case you want to execute a set of statements when a condition is true and another

set of statement when the condition is false.
&lt;pre&gt;
         if condition : 
            statement 1
         else :
            statement 2
&lt;/pre&gt;

&lt;pre&gt;    
    Multiple if-else statements can be written as follows:
         if condition_1 : 
            statement 1
         elif condition_2 : # 'elif' is short for 'else if'
            statement 2
         elif condition_3 :
            statement 3
        .
        .
         else :
            final statement
&lt;/pre&gt;

[[#TOP]]

=Loops and Conditionals : Fizzbuzz=
====Loops====
Loops are used to execute a set of repetitive statements. They are realised
through 'while' and 'for' loops in programming languages. The syntax of 'for' loop is 
as follows :
&lt;pre&gt;
for LOOPVARIABLE in SEQUENCE: 
            STATEMENTS&lt;/pre&gt;

    '''e.g.''' to print all the data from a list we can write:
&lt;pre&gt;
for item in list_name:
      print(item)&lt;/pre&gt;
    OR
&lt;pre&gt;
for index in range(len(list_name)):
      print(list_name[index])
 &lt;/pre&gt;   
    The syntax for while loop is as follows :
&lt;pre&gt;    
while BOOLEANEXPRESSION: 
     STATEMENTS
     INCREMENT/DECREMENT
&lt;/pre&gt;    
    '''e.g.''' if we want to print all numbers from 1 to 10
&lt;pre&gt;
i=1
while i&lt;=10 :
    print(i,&quot; &quot;)
    i=i+1
    &lt;/pre&gt;
 
'while' loop has indefinite iteration (run-time unknown). So, there must be loop,  break statement in it.
 Whereas 'for' loop is definite in nature (i.e. known or predictable span).&lt;br&gt;

&lt;b&gt;NOTE: Python doesn't have anything like do-while loop.&lt;/b&gt;

[[#TOP]]

==Implementation==
Here, we try to demonstrate the concept of loops and conditionals through a game called Fizzbuzz. The rules are as follows :&lt;br/&gt;
[[File:fizzBuzz.gif]]

• if input number is a multiple of ’3’ print ”Fizz”
&lt;br/&gt;
• if input number is a multiple of ’5’ print ”Buzz”
&lt;br/&gt;
• if input number is a multiple of both '3' and ’5’ print ”FizzBuzz”
&lt;br/&gt;
The pseudo code is as follows :
&lt;pre&gt;
   If input no % 3 == 0 and  input no % 5 == 0 : 
       print ”Fizzbuzz”
   else if input no % 3 == 0 : 
       print ”Fizz”
   else if input no % 5 == 0 : 
       print ”Buzz”
   else :
       print the input no
&lt;/pre&gt;
 &lt;p style=&quot;text-align:justify&quot;&gt;
The order of statements execution matters to get the desired output. The highest priority condition should be first followed by other. In fizzbuzz programming, first checking should be done for both divisibility of 3 and 5. If condition not satisfied only then it should check individually for 3 or 5. So carefully choosing the order is crucial for better programming.
Note: There is some effect of present condition statements chosen on next conditions statements. That is why in first attempt fizzbuzz programming got struck.&lt;/p&gt;

Example: 
&lt;pre&gt;
#Code to achieve the above requirement in python3.
i = int(input(&quot;Enter the number&quot;)) 
if i%3 == 0 and i%5 == 0: print(i,&quot;FizzBuzz&quot;)  
elif i%5 == 0: print(i,&quot;Buzz&quot;)
elif i%3 == 0: print(i,&quot;Fizz&quot;)
else: print(i)
&lt;/pre&gt;
Lets put the same into a loop for a range given by the user.
&lt;pre&gt;
def fizzbuzzgame(start,stop):
    for i in range(start,stop+1):
        if i%3 == 0 and i%5 == 0:
            print(i,&quot;FizzBuzz&quot;)
        elif i%5 == 0:
            print(i,&quot;Buzz&quot;)
        elif i%3 == 0:
            print(i,&quot;Fizz&quot;)
        else: print(i)

fizzbuzzgame(50,100)
&lt;/pre&gt;
&lt;pre&gt;
#Output:
1235
Buzz
======================================
555
Fizzbuzz
======================================
1235
Buzz
======================================
999
Fizz
&lt;/pre&gt;

=== Fizz Buzz game in Interactive mode with Score ===
'''By Ms. Ami Tusharkant Choksi'''
&lt;pre&gt;
def fizzbuzzgame(i):
        if i%3 == 0 and i%5 == 0:
            print(i,&quot;FizzBuzz&quot;)
            return(&quot;fzbz&quot;)
        elif i%5 == 0:
            print(i,&quot;Buzz&quot;)
            return(&quot;bz&quot;)
        elif i%3 == 0:
            print(i,&quot;Fizz&quot;)
            return(&quot;fz&quot;)
        else:
            print(i)
            return(&quot;no&quot;)

ch = 'y'
fizzbuzz=0
fizz=0
buzz=0
nothing=0
print(&quot;&quot;&quot;

 /$$$$$$$$/$$                  /$$$$$$$                            
| $$_____|__/                 | $$__  $$                           
| $$      /$$/$$$$$$$$/$$$$$$$| $$  \ $$/$$   /$$/$$$$$$$$/$$$$$$$$
| $$$$$  | $|____ /$$|____ /$$| $$$$$$$| $$  | $|____ /$$|____ /$$/
| $$__/  | $$  /$$$$/   /$$$$/| $$__  $| $$  | $$  /$$$$/   /$$$$/ 
| $$     | $$ /$$__/   /$$__/ | $$  \ $| $$  | $$ /$$__/   /$$__/  
| $$     | $$/$$$$$$$$/$$$$$$$| $$$$$$$|  $$$$$$//$$$$$$$$/$$$$$$$$
|__/     |__|________|________|_______/ \______/|________|________/
                                                                  
&quot;&quot;&quot;)   
print('''

  /$$$$$$                                
 /$$__  $$                               
| $$  \__/ /$$$$$$ /$$$$$$/$$$$  /$$$$$$ 
| $$ /$$$$|____  $| $$_  $$_  $$/$$__  $$
| $$|_  $$ /$$$$$$| $$ \ $$ \ $| $$$$$$$$
| $$  \ $$/$$__  $| $$ | $$ | $| $$_____/
|  $$$$$$|  $$$$$$| $$ | $$ | $|  $$$$$$$
 \______/ \_______|__/ |__/ |__/\_______/
                                     
''')

while(ch == 'y'):
    n=int(input(&quot;Enter a Number : &quot;))
    winLoose=fizzbuzzgame(n)
    if(winLoose == &quot;fz&quot;):
        fizz+=1
    elif(winLoose == &quot;bz&quot;):
        buzz+=1
    elif(winLoose == &quot;fzbz&quot;):
        fizzbuzz+=1
    ch=input(&quot;Do you want to continue playing the game : (y/n)&quot;)
    if(ch=='n'):
        print('Congratulations, your score is\n FizzBuzz:%d\nFizz:%d\nBuzz:%d' %
(fizzbuzz,fizz,buzz))
    
'''Sample Output:

 /$$$$$$$$/$$                  /$$$$$$$                            
| $$_____|__/                 | $$__  $$                           
| $$      /$$/$$$$$$$$/$$$$$$$| $$  \ $$/$$   /$$/$$$$$$$$/$$$$$$$$
| $$$$$  | $|____ /$$|____ /$$| $$$$$$$| $$  | $|____ /$$|____ /$$/
| $$__/  | $$  /$$$$/   /$$$$/| $$__  $| $$  | $$  /$$$$/   /$$$$/ 
| $$     | $$ /$$__/   /$$__/ | $$  \ $| $$  | $$ /$$__/   /$$__/  
| $$     | $$/$$$$$$$$/$$$$$$$| $$$$$$$|  $$$$$$//$$$$$$$$/$$$$$$$$
|__/     |__|________|________|_______/ \______/|________|________/
                                                                                                                                   

  /$$$$$$                                
 /$$__  $$                               
| $$  \__/ /$$$$$$ /$$$$$$/$$$$  /$$$$$$ 
| $$ /$$$$|____  $| $$_  $$_  $$/$$__  $$
| $$|_  $$ /$$$$$$| $$ \ $$ \ $| $$$$$$$$
| $$  \ $$/$$__  $| $$ | $$ | $| $$_____/
|  $$$$$$|  $$$$$$| $$ | $$ | $|  $$$$$$$
 \______/ \_______|__/ |__/ |__/\_______/
                                         

Enter a Number : 666
666 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 777
777 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 555
555 FizzBuzz
Do you want to continue playing the game : (y/n)y
Enter a Number : 1
1
Do you want to continue playing the game : (y/n)y
Enter a Number : 789
789 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 25
25 Buzz
Do you want to continue playing the game : (y/n)n
Congratulations, your score is

FizzBuzz:1
Fizz:3
Buzz:1

&lt;/pre&gt;

=Crowd Computing: Just Estimate=
==Wisdom of Crowds==
 &lt;p style=&quot;text-align:justify&quot;&gt;
The concept of ’Wisdom of Crowds’ was proposed by Francis Galton. A weight-judging competition was carried on at the annual show of the West of England Fat Stock and Poultry Exhibition recently held at Plymouth, A fat ox having been selected, competitors bought stamped and numbered cards, each, on which to inscribe their respective names, addresses, and estimates of what the ox would weigh after it had been slaughtered. Those who guessed most successfully received prizes. About 8oo tickets were issued to the par- ticipants. The middlemost estimate of all the estimates recorded was 1207 lbs and the actual weight of the ox was 1198 lbs.&lt;/p&gt;

==Our Experiment==
 &lt;p style=&quot;text-align:justify&quot;&gt;
The crowd had to guess the number of candies/gems in a jar. Around 75 people participated in the experiment. The actual number of gems in the jar were 375. The median of all estimates came out to be 300 and the mean of all the estimates came out to be around 396. Median underestimated and mean overestimated the actual value. So according to recent studies, Trimmed mean must be used as an aggregate measure to estimate where Wisdom of Crowds is involved.
&lt;/p&gt;
[[File:Gemsjar.jpg|center|200px|caption]]

===Trimmed Mean===
 &lt;p style=&quot;text-align:justify&quot;&gt;
In these kinds of experiments, 10% trimmed mean is usually followed. For calculating 10% trimmed mean, remove 10% smallest and 10% largest values from the sample. Calculate the mean of the sample obtained. In the above experiment, the trimmed mean came out to be around 351 which is very close to the actual value.&lt;/p&gt;

==Implementation==
Here, we try to demonstrate the concept of trimmed mean through crowd computing.
&lt;ol&gt;
&lt;li&gt; Input a list of estimates done by the crowd .&lt;/li&gt;
&lt;li&gt; Sort the list.&lt;/li&gt;
&lt;li&gt; Remove the 10% smallest values.&lt;/li&gt;
&lt;li&gt; Remove the 10% largest values.
&lt;li&gt; Calculate the mean of the new list obtained .&lt;/li&gt;&lt;/ol&gt;&lt;hr&gt;

==Data of Experiment==       
    Estimates =[1000,1010,1786,2000,1500,1500,100,120,150,150,150,170,175,180,197,200,200,200,200,200,200,220,220,220,220,234,250,250,250,250,250,250,250,250,250,263,270,275,275,286,300,
                300,300,300,300,300,300,300,320,350,350,350,400, 400,400,400,400,450,467,500,500,500,500,500,500,500,550,550,600,600,600,650,700,700,720]

    '''CODE:'''
&lt;pre&gt;
Estimates = [1000,1010,1786,2000,1500,1500,100,120,150,150,150,170,175,180,197,200,200,200,200,200,200,220,220,220,220,234,250,250,250,250,250,250,250,250,250,263,270,275,275,286,300,                300,300,300,300,300,300,300,320,350,350,350,400,400,400,400,400,450,467,500,500,500,500,500,500,500,550,550,600,600,600,650,700,700,720]
Estimates.sort()
offset = int(0.10*len(Estimates))
for i in range(offset):
       del Estimates[0]
       del Estimates[-1]
Sum = 0    
for i in range(len(Estimates)):
       Sum += Estimates[i]
Mean_Value = Sum/len(Estimates)
print(&quot;Mean : &quot;, int(Mean_Value))
#Output:
Mean :  351
&lt;/pre&gt;
&lt;hr&gt;
==Trimmed Mean for the above example== 
&lt;h3&gt;Using scipy library&lt;/h3&gt;
&lt;pre&gt;
#import scipy to use the method of trim_mean
from scipy import stats
trimMean = stats.trim_mean(Estimates, 0.1) # Trim 10% at both ends
print(&quot;Trimmed Mean : &quot;,trimMean)
#Output:
Trimmed Mean :  335.1020408163265
&lt;/pre&gt;

&lt;h3&gt;Without using scipy library&lt;/h3&gt;
&lt;pre&gt;
#Trimmed mean with 10%
p=10/100
#sorted data
data=[2, 4, 6, 7, 11, 21, 81, 90, 105, 121]
n = len(data)
#Remove elements from both end
rem=int(n*p)
newData = data[rem:-rem]
mean = 0
for i in newData:
    mean += i
mean = int(mean/len(newData))
print(&quot;Trimmed mean : &quot;,mean)
#Output: Trimmed mean :  40
&lt;/pre&gt;
[[#Top]]

=Jumbled_Words Permutations: Jumbled Words=
==What are Permutations ?==
A permutation also called ordering of selected number of elements from a list denoted by nPr here we are choosing all elements of a list and so n=r&lt;br&gt;
nPr=n!/(n-r)!&lt;br&gt; as n=r
nPn=n!&lt;br&gt; which gives all possible arrangement of elements present in a list.

 For example, permutations of list [1,2,3] are [1,2,3], [1,3,2], [2,1,3], [2,3,1], 
[3,1,2], and [3,2,1]. 
The number of permutations of a list of elements nPn is given by n!. For example, there are 2! = 2 x 1 = 2 permutations of [1,2], namely [1,2] and [2,1], and 3! = 3 x 2 x 1 = 6 permutations of [1,2,3], as mentioned above.&lt;br/&gt;
[[File:Permutations.jpg]]

==Implementation==
 &lt;p style=&quot;text-align:justify&quot;&gt;
Here, we try to demonstrate the concept of permutations through jumbled words. It is a two player game in which one person presents the other person a different permutation of the word in his mind. The other person has to guess the right word. If he guesses, the he wins otherwise he loses.&lt;/p&gt;
 Input an list of words.
 Randomly pick a word from the list of words .
 Shuffle this word and present it to the other player.
 if word guesses by the player is same as the one picked from list of w
     player wins
 else
     player loses

ALTERNATE CODE TO GENERATE THIS GAME:
&lt;pre&gt;
import random
p1=input(&quot;enter player 1 name:&quot;)
p2=input(&quot;enter player 2 name:&quot;)
l=[&quot;rainbow&quot;,&quot;computer&quot;,&quot;robot&quot;,&quot;butter&quot;,&quot;vegetable&quot;,&quot;science&quot;,&quot;correct&quot;]
c1=c2=a1=a2=f1=f2=0
k=1
i=3
def play():
    n=random.choice(l)        ##n=chooses a word from list l
    l1=[]
    for j in n:
       l1.append(j)      ##creates a list for word in n
    for t in range(len(l1)):
       p=random.choice(l1)     ##this randomly displays letters in the list
       print(p)
       l1.remove(p)          ##to avoid the repetition of a letter
    s=input(&quot;enter the word:&quot;)
    if(s==n):
        print(&quot;correct&quot;)
        return 1
    else:
        print(&quot;not correct&quot;)
        print(&quot;answer is&quot;,n)
        return 0
def stat():
     print(&quot;player 1:&quot;)
     print(&quot;score:&quot;,c1)
     print(&quot;answered:&quot;,a1)
     print(&quot;failed:&quot;,f1)
     print(&quot;.............&quot;)
     print(&quot;player 2:&quot;)
     print(&quot;score:&quot;,c2)
     print(&quot;answered:&quot;,a2)
     print(&quot;failed&quot;,f2)
     if(c1&gt;c2):
         print(p1,&quot; won over &quot;,p2)
     elif(c1==c2):
         print(&quot;draw game&quot;)
     else:
         print(p2,&quot; won over &quot;,p1) 
while(i!=4):
      if(i==3):
         if(k==1):
             print(&quot;player 1 turn&quot;)
             print(&quot;your jumbled word is:&quot;)
             k=k+1
             m=play()
             if(m==1):      ##if guessed answer is correct,then score and no.of answered count will be increased
                c1+=1
                a1+=1
             else:
                f1+=1       ##else count of no.of failed to answered will be incremented
         else:
             print(&quot;player 2 turn&quot;)
             print(&quot;your jumbled word is:&quot;)
             k=k-1
             m=play()
             if(m==1):
                c2=c2+1
                a2=a2+1
             else:
                f2=f2+1
       if(i==2):
             print(&quot;present status&quot;)
             stat()
       i=int(input(&quot;enter your choice  1.stop 2.status 3.continue&quot;))
       if(i==1):
             stat()
             i=i+3
&lt;/pre&gt;
&lt;hr&gt;
=== JumbledWord Simple Logic, In Short ===
[[File:jumbledWord.gif]]
---
&lt;hr&gt;
'''Logic to create a Jumbled Word'''
&lt;hr&gt;
&lt;pre&gt;
#Get Jumbled Word and print it Horizontally
import random

def getJumbledWord(b):
    jumble=''
    l1 = [ b[i] for i in range(0, len(b)) ]
    for t in range(len(l1)):
       p=random.choice(l1)  #this randomly gets letters from the list      
       jumble=jumble+p       
       l1.remove(p)
    return jumble

b=input(&quot;Enter a word to make it jumbled : &quot;)
print(&quot;Jumbled Word : &quot;, getJumbledWord(b))
&lt;/pre&gt;
&lt;pre&gt;
Output:
Enter a word to make it jumbled : live and let live others
Jumbled Word :  vel  toldeisrte aihv len
==========================================
Enter a word to make it jumbled : junkfood
Jumbled Word :  nfukdooj
&lt;/pre&gt;
&lt;hr&gt;
'''Another Logic to create a Jumbled Word'''
&lt;hr&gt;
&lt;pre&gt;
import random
b=input(&quot;Enter a word to make it jumbled : &quot;)

def getJumbledWord1(b):
    l1 = [ b[i] for i in range(0, len(b)) ]
    random.shuffle(l1)
    str1 = ''.join(l1)
    return str1

print(&quot;Jumbled Word : &quot;, getJumbledWord1(b))
&lt;/pre&gt;

====Sample Output:====
&lt;pre&gt;
---- Output1 
Enter a word to make it jumbled : butter
Jumbled Word :  tbture

---- Output2 
Enter a word to make it jumbled : petriotism
Jumbled Word :  pittrosime
&lt;/pre&gt;

=Theory of Evolution=

== What is Evolution ? ==
Evolution is the change in heritable characteristics over successive generations. The theory of evolution explains that DNA, which acts as a carrier of genetic information from one generation to other, tends to change or mutate occasionally. These changes are reflected in next generations to come. This is how life has evolved on earth from bacteria to human beings.&lt;br&gt;
[[File:Evolution.png|500px]]

== Implementation ==
 &lt;p style=&quot;text-align:justify&quot;&gt;
An array representing DNA is stored in a file. As genes are forms of DNA, they contain information to be transferred to forthcoming generations. Assume that information is in the form of bits (in the form of 0s and 1s). A number is picked randomly from 1 to the size of the array. A new parameter has been introduced which decides whether mutation would occur or not. If the value of this new parameter is 1 (It is picked randomly from 1 to 100), then only change is reflected down the generations, otherwise it is not. The pseudo code is as follows :
&lt;/p&gt;
Input an array containing genetic information .
Randomly generate a number (say m) from 1 to length of the array. Randomly generate other number (say p) from 1 to 100.

&lt;pre&gt; 
    if p is equal to 1 then 
        if m is 1 then
          set it to 0
        else
          set it to 1
&lt;/pre&gt;
[[#TOP]]</text>
      <sha1>6bcb7zjfd53pf5vbwstygbqclg51x6t</sha1>
    </revision>
    <revision>
      <id>3748</id>
      <parentid>3747</parentid>
      <timestamp>2018-09-29T04:05:33Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* Sort the List using sorted() function */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="30717">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_3 Contributors of this page]
*Week 3 Playlist: https://www.youtube.com/playlist?list=PLc_j0TNIaWxOVx_z9jAM2UB3RqYNXaoEo
=List=
List is a flexible data structure used for storing a group of data separated by comma. The elements in a list need not be of the same data type.

'''Example:'''
       List_1 = [ 1, 2,3] or 
       List_1 = [&quot;coffee&quot;, &quot;Tea&quot;, &quot;Milk&quot;] or
       List_1 = [1,&quot;coffee&quot;, &quot;Tea&quot;, 3, &quot;5&quot;]

==List Creation==
a) A list can be created by simply putting values (separated by comma) between square
 brackets as given below,
&lt;pre&gt;List_1 = [1,&quot;coffee&quot;, &quot;Tea&quot;, 3, &quot;5&quot;] #this creates a list by name List_1 containing
 following items
&lt;/pre&gt;


Or,
(b)A List can be created from scratch and elements can be added 
&lt;pre&gt;
        List_2 = [ ]
        List_2.append(&quot;Kala&quot;)
        List_2.append(&quot;Mala&quot;)
&lt;/pre&gt;
Here we use &quot;append&quot;, which is a function in python that enable us to append or attach an element to a list .
&lt;pre&gt;Thus List_2 will now hold [&quot;Kala&quot;,&quot;Mala&quot;]&lt;/pre&gt;

[[#Top]]

==Operations and Methods to work with List==
&lt;pre&gt;
a = [25,30,50,90,12,13]
b = [100,300,500,200,250]
&lt;/pre&gt;
&lt;hr&gt;
&lt;table border=2&gt;
  &lt;tr&gt;
    &lt;th&gt;&lt;b&gt;Method/&lt;br&gt;Operator&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Function&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Syntax&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Output&lt;/b&gt;&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;len()&lt;/td&gt;
    &lt;td&gt;Find length of a list&lt;/td&gt;
    &lt;td&gt;len(a)&lt;/td&gt;
    &lt;td&gt;6&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;max()&lt;/td&gt;
    &lt;td&gt;Find maximum element from the list&lt;/td&gt;
    &lt;td&gt;max(a)&lt;/td&gt;
    &lt;td&gt;90&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;min()&lt;/td&gt;
    &lt;td&gt;Find minimum element from the list&lt;/td&gt;
    &lt;td&gt;min(a)&lt;/td&gt;
    &lt;td&gt;12&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sum()&lt;/td&gt;
    &lt;td&gt;Returns sum of all elements of the list&lt;/td&gt;
    &lt;td&gt;sum(a)&lt;/td&gt;
    &lt;td&gt;220&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;reverse()&lt;/td&gt;
    &lt;td&gt;Reverses the original list&lt;/td&gt;
    &lt;td&gt;a.reverse()&lt;/td&gt;
    &lt;td&gt;[13, 12, 90, 50, 30, 25]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sort()&lt;/td&gt;
    &lt;td&gt;Sorts the original list in ascending order&lt;/td&gt;
    &lt;td&gt;a.sort()&lt;/td&gt;
    &lt;td&gt;[12, 13, 25, 30, 50, 90]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sorted()&lt;/td&gt;
    &lt;td&gt;Returns the new sorted list &lt;/td&gt;
    &lt;td&gt;sorted(a)&lt;/td&gt;
    &lt;td&gt;[12, 13, 25, 30, 50, 90]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;insert()&lt;/td&gt;
    &lt;td&gt;Insert at a particular index in the list, and shifts remaining elements&lt;/td&gt;
    &lt;td&gt;a.insert(3,3)&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 3, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;append()&lt;/td&gt;
    &lt;td&gt;Adds elements/object to the end of the list&lt;/td&gt;
    &lt;td&gt;a.append(5)&lt;br&gt;a.append([10,20])&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 5]&lt;br&gt;[25, 30, 50, 90, 12, 13, [10, 20]]&lt;br&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;extend()&lt;/td&gt;
    &lt;td&gt;Adds object to the end of the list as elements not as object&lt;/td&gt;
    &lt;td&gt;a.extend([10,20])&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 10, 20]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;*&amp;nbsp;&amp;nbsp;Repeatation&lt;br&gt;operator&lt;/td&gt;
    &lt;td&gt;Repeat the list for n times and returns a new list&lt;/td&gt;
    &lt;td&gt;a*2&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 25, 30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;+ Concatenation&lt;br&gt;operator&lt;/td&gt;
    &lt;td&gt;Concatenates two lists, and returns a new list&lt;/td&gt;
    &lt;td&gt;a+b&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 100, 300, 500, 200, 250]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;index()&lt;/td&gt;
    &lt;td&gt;Finds index of a particular element in the list or not&lt;/td&gt;
    &lt;td&gt;a.index(25)&lt;br&gt;a.index(0)&lt;br&gt;&lt;/td&gt;
    &lt;td&gt;0&lt;br&gt;&lt;br&gt;ValueError: 0 is not in list&lt;br&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;in operator&lt;/td&gt;
    &lt;td&gt;Finds whether a particular element is in the list or not, returns boolean&lt;/td&gt;
    &lt;td&gt;25 in a&lt;/td&gt;
    &lt;td&gt;True&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;not in operator&lt;/td&gt;
    &lt;td&gt;Checks if element is not available in list, returns boolean&lt;/td&gt;
    &lt;td&gt;25 not in a&lt;/td&gt;
    &lt;td&gt;False&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;count()&lt;/td&gt;
    &lt;td&gt;Counts the number of occurence of an element in the list&lt;/td&gt;
    &lt;td&gt;a.count(25)&lt;/td&gt;
    &lt;td&gt;1&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;remove()&lt;/td&gt;
    &lt;td&gt;Removes an element from the list&lt;/td&gt;
    &lt;td&gt;a.remove(25)&lt;/td&gt;
    &lt;td&gt; [30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;pop()&lt;/td&gt;
    &lt;td&gt;Delete and return item at index 0&lt;/td&gt;
    &lt;td&gt;a.pop(0)&lt;/td&gt;
    &lt;td&gt;25 , a will be [30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;del&lt;/td&gt;
    &lt;td&gt;Deletes item at a particular index from the list&lt;/td&gt;
    &lt;td&gt;del a[0]&lt;/td&gt;
    &lt;td&gt;[30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;all()&lt;/td&gt;
&lt;td&gt;Returns True, if all items in list are True or it is an empty list&lt;/td&gt;
&lt;td&gt;all([True, True, True])
all([])
&lt;/td&gt;
&lt;td&gt;True&lt;br&gt;
True&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;any()&lt;/td&gt;
&lt;td&gt;Returns True, if any item in list is True else return False&lt;/td&gt;
&lt;td&gt;any([True, True, True])&lt;br&gt;
any([True, False, True])&lt;br&gt;
any([])&lt;/td&gt;
&lt;td&gt;True&lt;br&gt;False&lt;br&gt;False&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;

==Printing the List==
=== Print whole list ===
A list can be printed simply or using a ''for / while'' loop 

 print(List_2)     # To print the entire list
This code will print      
 ['Kala','Mala']     

===Print element at a particular index===
&lt;pre&gt;
Using index position
    List_2[0]     # prints 'Kala' ,i.e,the value at index position 0.
    List_2[1]     # prints 'Mala'.
&lt;/pre&gt;
=== Without using index position ===
&lt;pre&gt;
for item in List_2:   # here item is a variable used to access elements in list.
       print(item)
   This code snippet prints 
    Kala
    Mala
&lt;/pre&gt;
[[#TOP]]

==Search for a particular element in list==
Elements in a list can be searched by one of the two ways:
=== using index() function===
&lt;pre&gt;
ages1 = [11,23,12,23,45]

#if element is available in the list, index() returns the index value on which, the element is
 present.
print(ages1.index(45))#Output: 4

#if element is not available in the list, index() returns ''ValueError''
print(ages1.index(0))#Output: ValueError:
&lt;/pre&gt;

In programming, if such error occurs, program gets terminated. It can be solved using exception handling.
 
e.g.
&lt;pre&gt;
ages1 = [11,23,12,23,45]

try:
    print(ages1.index(0))
except ValueError:
    print(&quot;Exception has occured&quot;)    
    print(&quot;Element is not found in the list&quot;)

&lt;/pre&gt;
&lt;pre&gt;
'''Output: 
Exception has occured
Element is not found in the list
'''&lt;/pre&gt;
[[#Top]]

=== using 'in' operator===
''in'' operator is used to check whether a particular element is available in the list or not.e.g.

&lt;pre&gt;
ages1 = [11,23,12,23,45]
no=11

if no in ages1:
    print(&quot;no is there in the list&quot;)
else:    
    print(&quot;no is NOT there in the list&quot;)
&lt;/pre&gt;
&lt;pre&gt;
#Output: no is there in the list
&lt;/pre&gt;


'''Number is not there in the list'''
&lt;pre&gt;
ages1 = [11,23,12,23,45]
no=15

if no in ages1:
    print(&quot;no is there in the list&quot;)
else:    
    print(&quot;no is NOT there in the list&quot;)
&lt;/pre&gt;
&lt;pre&gt;
Output: no is NOT there in the list
&lt;/pre&gt;
[[#TOP]]

==Updating the List==
The lists can be updated using ''append'' or ''insert'' function.  Append adds the element to the end of the list and Insert adds the element in the specified position.
&lt;pre&gt;
   # add the element 'Sheela' to the end of the list.
   List_2.append(&quot;Sheela&quot;)    
   print (List_2) will output 
   ['Kala', 'Mala', 'Sheela']
&lt;/pre&gt;
   &lt;pre&gt;
# add the element &quot;Bala&quot; in the list at the index 1.
   List_2.insert(1,&quot;Bala&quot;)    
   print (List_2) will output 
   ['Kala', 'Bala','Mala', 'Sheela']
&lt;/pre&gt;

=== Extend the list by adding elements of other list at end using extend()===
&lt;pre&gt;
ages = [11,23,12,23,45]
ages.extend([57,58])
print(ages)
&lt;/pre&gt;

&lt;pre&gt;
#Output: [11, 23, 12, 23, 45, 57, 58]
&lt;/pre&gt;

==== Difference between ''append and extend'' ====
Difference between append and extend can be easily understood, by the following example.

&lt;pre&gt;
appendlist = [11,23,12,23,45]
appendlist.append([57,58])

extendlist= [11,23,12,23,45]
extendlist.extend([57,58])
&lt;/pre&gt;

&lt;pre&gt;
'''Output:
[11, 23, 12, 23, 45, [57, 58]]
[11, 23, 12, 23, 45, 57, 58]'''
&lt;/pre&gt;

[[#TOP]]

==Basic Operations on List==
===Frequency of Occurrence===
list.count(object) will return the number of times the object occur in the list.
  '''Example'''
    ages = [11,23,12,23,45,43,22,24,23]
    ages.count(23) will return
    3
    ages.count(100) will return
    0

===Length of the List===
''len(list)'' will return the length of the list ie. the number of objects in the list.
  '''Example'''
&lt;pre&gt;
    ages = [11,23,12,23,45,43,22,24,23]
    len(ages) # Output: 9
&lt;/pre&gt;

To print the objects in the list either use ''for item in list'' or ''for index in range(len(list))''
&lt;pre&gt;
    for item in ages:       
        print (item)  
        (OR)
    for index in range(len(ages)) :
        print (ages[index])
&lt;/pre&gt;

===Sort the List===
''list.sort()'' will sort the list in ascending order
  '''Example'''
    ages = [11,23,12,23,45,43,22,24,23]
    ages.sort() 
    print (ages) 
    [11, 12, 22, 23, 23, 23, 24, 43, 45]

[[#Top]]

===Sort the List using sorted() function===
''sorted(list1)'' will sort the list and return a new list, it doesn't modify the original list
&lt;br&gt;'''Example: Sort in ascending order'''
&lt;pre&gt;
ages = [11,23,12,23,45,43,22,24,23]
newList=sorted(ages)
print(newList)

#Output: [11, 12, 22, 23, 23, 23, 24, 43, 45]
&lt;/pre&gt;

&lt;br&gt;'''Example: Sort in descending order'''
&lt;pre&gt;
ages = [11,23,12,23,45,43,22,24,23]
newList=sorted(ages,reverse=True)
print(newList)

#Output: [45, 43, 24, 23, 23, 23, 22, 12, 11]
&lt;/pre&gt;

===Reverse the List===
list.reverse() will reverse the original list
  '''Example'''
    ages = [11, 12, 22, 23, 23, 23, 24, 43, 45]
    ages.reverse()
    print (ages)
    [45, 43, 24, 23, 23, 23, 22, 12, 11]

Both sort() and reverse() list operation will work on numeric and alphanumeric data list.

A special use of the reverse() function is to descend a list that is sorted in ascending order.

  '''Example'''
&lt;pre&gt;
ages = [11, 12, 22, 23, 23, 23, 24, 43, 45]
ages.sort()
print(ages)
ages.reverse()
print(ages)
&lt;/pre&gt;

===Slicing===
Used to retrieve an object or objects in a range as a list  
  '''Example'''

Use ''list[index]'' to retrieve the object at the given index
&lt;pre&gt;
In [1]: student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
In [2]: student[3]     #Object at index 3.  Remember index starts at 0
Out[2]: 'Geetha'      
&lt;/pre&gt;

Use ''list[start_index : end_index + 1]'' to retrieve objects from the start_index to end_index 
&lt;pre&gt;
In [3]: student[2:4]     # Objects from index 2 to 3 as List. Note the [ and ]
Out[3]: ['Vijay', 'Geetha']   
&lt;/pre&gt;

Use ''list[:]'' to retrieve objects from the starting of the list to the end of the list. 
The default start value will be the starting index of the list (i.e. 0) and the default end value
will be the length of the list 
&lt;pre&gt;
In [4]: student[:]        # prints the entire list
Out[4]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma', 'Janani']
&lt;/pre&gt;
&lt;pre&gt;
In [5]: student[:5]       # prints the objects from the start of the list upto object at index 4
Out[5]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran']
&lt;/pre&gt;
&lt;pre&gt;
In [6]: student[2:]       # prints the objects from index 2 upto the end of the list
Out[6]: ['Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma', 'Janani']
&lt;/pre&gt;

Negative index too is available in Python. It starts from last element of the list. i.e.
&lt;pre&gt;
In [7]:student[-1]        #prints last index of list
Out[7]: 'Janani'
&lt;/pre&gt;
&lt;pre&gt;
In [8]:student[-1:-8]     #prints empty list
Out[8]: []
&lt;/pre&gt;
&lt;pre&gt;
In [9]:student[-8:-1]     #prints -8th index to -1st index elements
Out[9]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma']
&lt;/pre&gt;

[[#TOP]]

===Removing Item from list ===
----

Is used to remove a specific item from the list.

'''Example:'''
 
Use list.remove(entry/value)  Or   del list[index]    Or list.pop(index)
&lt;pre&gt;
student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
student.remove(&quot;Arun&quot;)   #This will delete item &quot;Arun&quot;
         Or    
del student[0]           # This will delete item at index 0
         Or
student.pop(0)         # This will delete and return item at index 0
print(student)    
Output: &quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
&lt;/pre&gt;

[[#TOP]]

===Delete list ===
----
Used to delete complete list

'''Example'''

Use del &lt;list name&gt;
&lt;pre&gt;
student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
del student&lt;/pre&gt;

===Concatenation of two lists===
----
''+'' is the concatenation operator which is used concatenate two lists. 
&lt;pre&gt;
ages1 = [11,23,12,23,45]
ages2 = [25, 24, 43, 47]
age=ages1+ages2
print(age)
#Output: [11, 23, 12, 23, 45, 25, 24, 43, 47]
&lt;/pre&gt;

===Repeatation of a list ===
----
''*'' is the operator to repeat a particular list.
&lt;pre&gt;
ages1 = [11,23,12,23,45]
age=ages1*5 #ages1 list is repeated 5 times and stroed in ''age'' list
print(age)

#Output: [11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45]
&lt;/pre&gt;

=== all and any for List===
all() and any() are special functions to check whether all elements in iterable is ''True'' or any element is ''True''
&lt;ol&gt;
&lt;li&gt;If all elements in a list are ''True'', '''all()''' will return ''True''&lt;/li&gt;
&lt;li&gt;If iterable is ''empty'', '''all()''' will return ''True''&lt;/li&gt;
&lt;li&gt;If iterable contains at least one ''True'', '''any()''' will return ''True''&lt;/li&gt;
&lt;li&gt;If iterable is ''empty'', '''any()''' will return ''False''&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;
lsit=[True, True, True, True]
print(all(lsit))#Output: True
print(any(lsit))#Output: True

lsit1=[True, False, True, True]
print(all(lsit1))#Output: False
print(any(lsit1))#Output: True

lsit2=[False,False,False]
print(all(lsit2))#Output: False
print(any(lsit2))#Output: False

lsit3=[]
print(all(lsit3))#Output: True
print(any(lsit3))#Output: False
&lt;/pre&gt;

==Conditional Statements==
&lt;pre&gt;Conditionals are used to check the condition and change the flow of the program 
accordingly. They are realized in programming languages through if statement. The 
syntax is as follows :
&lt;pre&gt;
         if condition : 
            statement
&lt;/pre&gt;
    '''Note:''' Do not forget indentation (inserting space/tab) in the line after the
 if condition.
    
    In case you want to execute a set of statements when a condition is true and another

set of statement when the condition is false.
&lt;pre&gt;
         if condition : 
            statement 1
         else :
            statement 2
&lt;/pre&gt;

&lt;pre&gt;    
    Multiple if-else statements can be written as follows:
         if condition_1 : 
            statement 1
         elif condition_2 : # 'elif' is short for 'else if'
            statement 2
         elif condition_3 :
            statement 3
        .
        .
         else :
            final statement
&lt;/pre&gt;

[[#TOP]]

=Loops and Conditionals : Fizzbuzz=
====Loops====
Loops are used to execute a set of repetitive statements. They are realised
through 'while' and 'for' loops in programming languages. The syntax of 'for' loop is 
as follows :
&lt;pre&gt;
for LOOPVARIABLE in SEQUENCE: 
            STATEMENTS&lt;/pre&gt;

    '''e.g.''' to print all the data from a list we can write:
&lt;pre&gt;
for item in list_name:
      print(item)&lt;/pre&gt;
    OR
&lt;pre&gt;
for index in range(len(list_name)):
      print(list_name[index])
 &lt;/pre&gt;   
    The syntax for while loop is as follows :
&lt;pre&gt;    
while BOOLEANEXPRESSION: 
     STATEMENTS
     INCREMENT/DECREMENT
&lt;/pre&gt;    
    '''e.g.''' if we want to print all numbers from 1 to 10
&lt;pre&gt;
i=1
while i&lt;=10 :
    print(i,&quot; &quot;)
    i=i+1
    &lt;/pre&gt;
 
'while' loop has indefinite iteration (run-time unknown). So, there must be loop,  break statement in it.
 Whereas 'for' loop is definite in nature (i.e. known or predictable span).&lt;br&gt;

&lt;b&gt;NOTE: Python doesn't have anything like do-while loop.&lt;/b&gt;

[[#TOP]]

==Implementation==
Here, we try to demonstrate the concept of loops and conditionals through a game called Fizzbuzz. The rules are as follows :&lt;br/&gt;
[[File:fizzBuzz.gif]]

• if input number is a multiple of ’3’ print ”Fizz”
&lt;br/&gt;
• if input number is a multiple of ’5’ print ”Buzz”
&lt;br/&gt;
• if input number is a multiple of both '3' and ’5’ print ”FizzBuzz”
&lt;br/&gt;
The pseudo code is as follows :
&lt;pre&gt;
   If input no % 3 == 0 and  input no % 5 == 0 : 
       print ”Fizzbuzz”
   else if input no % 3 == 0 : 
       print ”Fizz”
   else if input no % 5 == 0 : 
       print ”Buzz”
   else :
       print the input no
&lt;/pre&gt;
 &lt;p style=&quot;text-align:justify&quot;&gt;
The order of statements execution matters to get the desired output. The highest priority condition should be first followed by other. In fizzbuzz programming, first checking should be done for both divisibility of 3 and 5. If condition not satisfied only then it should check individually for 3 or 5. So carefully choosing the order is crucial for better programming.
Note: There is some effect of present condition statements chosen on next conditions statements. That is why in first attempt fizzbuzz programming got struck.&lt;/p&gt;

Example: 
&lt;pre&gt;
#Code to achieve the above requirement in python3.
i = int(input(&quot;Enter the number&quot;)) 
if i%3 == 0 and i%5 == 0: print(i,&quot;FizzBuzz&quot;)  
elif i%5 == 0: print(i,&quot;Buzz&quot;)
elif i%3 == 0: print(i,&quot;Fizz&quot;)
else: print(i)
&lt;/pre&gt;
Lets put the same into a loop for a range given by the user.
&lt;pre&gt;
def fizzbuzzgame(start,stop):
    for i in range(start,stop+1):
        if i%3 == 0 and i%5 == 0:
            print(i,&quot;FizzBuzz&quot;)
        elif i%5 == 0:
            print(i,&quot;Buzz&quot;)
        elif i%3 == 0:
            print(i,&quot;Fizz&quot;)
        else: print(i)

fizzbuzzgame(50,100)
&lt;/pre&gt;
&lt;pre&gt;
#Output:
1235
Buzz
======================================
555
Fizzbuzz
======================================
1235
Buzz
======================================
999
Fizz
&lt;/pre&gt;

=== Fizz Buzz game in Interactive mode with Score ===
'''By Ms. Ami Tusharkant Choksi'''
&lt;pre&gt;
def fizzbuzzgame(i):
        if i%3 == 0 and i%5 == 0:
            print(i,&quot;FizzBuzz&quot;)
            return(&quot;fzbz&quot;)
        elif i%5 == 0:
            print(i,&quot;Buzz&quot;)
            return(&quot;bz&quot;)
        elif i%3 == 0:
            print(i,&quot;Fizz&quot;)
            return(&quot;fz&quot;)
        else:
            print(i)
            return(&quot;no&quot;)

ch = 'y'
fizzbuzz=0
fizz=0
buzz=0
nothing=0
print(&quot;&quot;&quot;

 /$$$$$$$$/$$                  /$$$$$$$                            
| $$_____|__/                 | $$__  $$                           
| $$      /$$/$$$$$$$$/$$$$$$$| $$  \ $$/$$   /$$/$$$$$$$$/$$$$$$$$
| $$$$$  | $|____ /$$|____ /$$| $$$$$$$| $$  | $|____ /$$|____ /$$/
| $$__/  | $$  /$$$$/   /$$$$/| $$__  $| $$  | $$  /$$$$/   /$$$$/ 
| $$     | $$ /$$__/   /$$__/ | $$  \ $| $$  | $$ /$$__/   /$$__/  
| $$     | $$/$$$$$$$$/$$$$$$$| $$$$$$$|  $$$$$$//$$$$$$$$/$$$$$$$$
|__/     |__|________|________|_______/ \______/|________|________/
                                                                  
&quot;&quot;&quot;)   
print('''

  /$$$$$$                                
 /$$__  $$                               
| $$  \__/ /$$$$$$ /$$$$$$/$$$$  /$$$$$$ 
| $$ /$$$$|____  $| $$_  $$_  $$/$$__  $$
| $$|_  $$ /$$$$$$| $$ \ $$ \ $| $$$$$$$$
| $$  \ $$/$$__  $| $$ | $$ | $| $$_____/
|  $$$$$$|  $$$$$$| $$ | $$ | $|  $$$$$$$
 \______/ \_______|__/ |__/ |__/\_______/
                                     
''')

while(ch == 'y'):
    n=int(input(&quot;Enter a Number : &quot;))
    winLoose=fizzbuzzgame(n)
    if(winLoose == &quot;fz&quot;):
        fizz+=1
    elif(winLoose == &quot;bz&quot;):
        buzz+=1
    elif(winLoose == &quot;fzbz&quot;):
        fizzbuzz+=1
    ch=input(&quot;Do you want to continue playing the game : (y/n)&quot;)
    if(ch=='n'):
        print('Congratulations, your score is\n FizzBuzz:%d\nFizz:%d\nBuzz:%d' %
(fizzbuzz,fizz,buzz))
    
'''Sample Output:

 /$$$$$$$$/$$                  /$$$$$$$                            
| $$_____|__/                 | $$__  $$                           
| $$      /$$/$$$$$$$$/$$$$$$$| $$  \ $$/$$   /$$/$$$$$$$$/$$$$$$$$
| $$$$$  | $|____ /$$|____ /$$| $$$$$$$| $$  | $|____ /$$|____ /$$/
| $$__/  | $$  /$$$$/   /$$$$/| $$__  $| $$  | $$  /$$$$/   /$$$$/ 
| $$     | $$ /$$__/   /$$__/ | $$  \ $| $$  | $$ /$$__/   /$$__/  
| $$     | $$/$$$$$$$$/$$$$$$$| $$$$$$$|  $$$$$$//$$$$$$$$/$$$$$$$$
|__/     |__|________|________|_______/ \______/|________|________/
                                                                                                                                   

  /$$$$$$                                
 /$$__  $$                               
| $$  \__/ /$$$$$$ /$$$$$$/$$$$  /$$$$$$ 
| $$ /$$$$|____  $| $$_  $$_  $$/$$__  $$
| $$|_  $$ /$$$$$$| $$ \ $$ \ $| $$$$$$$$
| $$  \ $$/$$__  $| $$ | $$ | $| $$_____/
|  $$$$$$|  $$$$$$| $$ | $$ | $|  $$$$$$$
 \______/ \_______|__/ |__/ |__/\_______/
                                         

Enter a Number : 666
666 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 777
777 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 555
555 FizzBuzz
Do you want to continue playing the game : (y/n)y
Enter a Number : 1
1
Do you want to continue playing the game : (y/n)y
Enter a Number : 789
789 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 25
25 Buzz
Do you want to continue playing the game : (y/n)n
Congratulations, your score is

FizzBuzz:1
Fizz:3
Buzz:1

&lt;/pre&gt;

=Crowd Computing: Just Estimate=
==Wisdom of Crowds==
 &lt;p style=&quot;text-align:justify&quot;&gt;
The concept of ’Wisdom of Crowds’ was proposed by Francis Galton. A weight-judging competition was carried on at the annual show of the West of England Fat Stock and Poultry Exhibition recently held at Plymouth, A fat ox having been selected, competitors bought stamped and numbered cards, each, on which to inscribe their respective names, addresses, and estimates of what the ox would weigh after it had been slaughtered. Those who guessed most successfully received prizes. About 8oo tickets were issued to the par- ticipants. The middlemost estimate of all the estimates recorded was 1207 lbs and the actual weight of the ox was 1198 lbs.&lt;/p&gt;

==Our Experiment==
 &lt;p style=&quot;text-align:justify&quot;&gt;
The crowd had to guess the number of candies/gems in a jar. Around 75 people participated in the experiment. The actual number of gems in the jar were 375. The median of all estimates came out to be 300 and the mean of all the estimates came out to be around 396. Median underestimated and mean overestimated the actual value. So according to recent studies, Trimmed mean must be used as an aggregate measure to estimate where Wisdom of Crowds is involved.
&lt;/p&gt;
[[File:Gemsjar.jpg|center|200px|caption]]

===Trimmed Mean===
 &lt;p style=&quot;text-align:justify&quot;&gt;
In these kinds of experiments, 10% trimmed mean is usually followed. For calculating 10% trimmed mean, remove 10% smallest and 10% largest values from the sample. Calculate the mean of the sample obtained. In the above experiment, the trimmed mean came out to be around 351 which is very close to the actual value.&lt;/p&gt;

==Implementation==
Here, we try to demonstrate the concept of trimmed mean through crowd computing.
&lt;ol&gt;
&lt;li&gt; Input a list of estimates done by the crowd .&lt;/li&gt;
&lt;li&gt; Sort the list.&lt;/li&gt;
&lt;li&gt; Remove the 10% smallest values.&lt;/li&gt;
&lt;li&gt; Remove the 10% largest values.
&lt;li&gt; Calculate the mean of the new list obtained .&lt;/li&gt;&lt;/ol&gt;&lt;hr&gt;

==Data of Experiment==       
    Estimates =[1000,1010,1786,2000,1500,1500,100,120,150,150,150,170,175,180,197,200,200,200,200,200,200,220,220,220,220,234,250,250,250,250,250,250,250,250,250,263,270,275,275,286,300,
                300,300,300,300,300,300,300,320,350,350,350,400, 400,400,400,400,450,467,500,500,500,500,500,500,500,550,550,600,600,600,650,700,700,720]

    '''CODE:'''
&lt;pre&gt;
Estimates = [1000,1010,1786,2000,1500,1500,100,120,150,150,150,170,175,180,197,200,200,200,200,200,200,220,220,220,220,234,250,250,250,250,250,250,250,250,250,263,270,275,275,286,300,                300,300,300,300,300,300,300,320,350,350,350,400,400,400,400,400,450,467,500,500,500,500,500,500,500,550,550,600,600,600,650,700,700,720]
Estimates.sort()
offset = int(0.10*len(Estimates))
for i in range(offset):
       del Estimates[0]
       del Estimates[-1]
Sum = 0    
for i in range(len(Estimates)):
       Sum += Estimates[i]
Mean_Value = Sum/len(Estimates)
print(&quot;Mean : &quot;, int(Mean_Value))
#Output:
Mean :  351
&lt;/pre&gt;
&lt;hr&gt;
==Trimmed Mean for the above example== 
&lt;h3&gt;Using scipy library&lt;/h3&gt;
&lt;pre&gt;
#import scipy to use the method of trim_mean
from scipy import stats
trimMean = stats.trim_mean(Estimates, 0.1) # Trim 10% at both ends
print(&quot;Trimmed Mean : &quot;,trimMean)
#Output:
Trimmed Mean :  335.1020408163265
&lt;/pre&gt;

&lt;h3&gt;Without using scipy library&lt;/h3&gt;
&lt;pre&gt;
#Trimmed mean with 10%
p=10/100
#sorted data
data=[2, 4, 6, 7, 11, 21, 81, 90, 105, 121]
n = len(data)
#Remove elements from both end
rem=int(n*p)
newData = data[rem:-rem]
mean = 0
for i in newData:
    mean += i
mean = int(mean/len(newData))
print(&quot;Trimmed mean : &quot;,mean)
#Output: Trimmed mean :  40
&lt;/pre&gt;
[[#Top]]

=Jumbled_Words Permutations: Jumbled Words=
==What are Permutations ?==
A permutation also called ordering of selected number of elements from a list denoted by nPr here we are choosing all elements of a list and so n=r&lt;br&gt;
nPr=n!/(n-r)!&lt;br&gt; as n=r
nPn=n!&lt;br&gt; which gives all possible arrangement of elements present in a list.

 For example, permutations of list [1,2,3] are [1,2,3], [1,3,2], [2,1,3], [2,3,1], 
[3,1,2], and [3,2,1]. 
The number of permutations of a list of elements nPn is given by n!. For example, there are 2! = 2 x 1 = 2 permutations of [1,2], namely [1,2] and [2,1], and 3! = 3 x 2 x 1 = 6 permutations of [1,2,3], as mentioned above.&lt;br/&gt;
[[File:Permutations.jpg]]

==Implementation==
 &lt;p style=&quot;text-align:justify&quot;&gt;
Here, we try to demonstrate the concept of permutations through jumbled words. It is a two player game in which one person presents the other person a different permutation of the word in his mind. The other person has to guess the right word. If he guesses, the he wins otherwise he loses.&lt;/p&gt;
 Input an list of words.
 Randomly pick a word from the list of words .
 Shuffle this word and present it to the other player.
 if word guesses by the player is same as the one picked from list of w
     player wins
 else
     player loses

ALTERNATE CODE TO GENERATE THIS GAME:
&lt;pre&gt;
import random
p1=input(&quot;enter player 1 name:&quot;)
p2=input(&quot;enter player 2 name:&quot;)
l=[&quot;rainbow&quot;,&quot;computer&quot;,&quot;robot&quot;,&quot;butter&quot;,&quot;vegetable&quot;,&quot;science&quot;,&quot;correct&quot;]
c1=c2=a1=a2=f1=f2=0
k=1
i=3
def play():
    n=random.choice(l)        ##n=chooses a word from list l
    l1=[]
    for j in n:
       l1.append(j)      ##creates a list for word in n
    for t in range(len(l1)):
       p=random.choice(l1)     ##this randomly displays letters in the list
       print(p)
       l1.remove(p)          ##to avoid the repetition of a letter
    s=input(&quot;enter the word:&quot;)
    if(s==n):
        print(&quot;correct&quot;)
        return 1
    else:
        print(&quot;not correct&quot;)
        print(&quot;answer is&quot;,n)
        return 0
def stat():
     print(&quot;player 1:&quot;)
     print(&quot;score:&quot;,c1)
     print(&quot;answered:&quot;,a1)
     print(&quot;failed:&quot;,f1)
     print(&quot;.............&quot;)
     print(&quot;player 2:&quot;)
     print(&quot;score:&quot;,c2)
     print(&quot;answered:&quot;,a2)
     print(&quot;failed&quot;,f2)
     if(c1&gt;c2):
         print(p1,&quot; won over &quot;,p2)
     elif(c1==c2):
         print(&quot;draw game&quot;)
     else:
         print(p2,&quot; won over &quot;,p1) 
while(i!=4):
      if(i==3):
         if(k==1):
             print(&quot;player 1 turn&quot;)
             print(&quot;your jumbled word is:&quot;)
             k=k+1
             m=play()
             if(m==1):      ##if guessed answer is correct,then score and no.of answered count will be increased
                c1+=1
                a1+=1
             else:
                f1+=1       ##else count of no.of failed to answered will be incremented
         else:
             print(&quot;player 2 turn&quot;)
             print(&quot;your jumbled word is:&quot;)
             k=k-1
             m=play()
             if(m==1):
                c2=c2+1
                a2=a2+1
             else:
                f2=f2+1
       if(i==2):
             print(&quot;present status&quot;)
             stat()
       i=int(input(&quot;enter your choice  1.stop 2.status 3.continue&quot;))
       if(i==1):
             stat()
             i=i+3
&lt;/pre&gt;
&lt;hr&gt;
=== JumbledWord Simple Logic, In Short ===
[[File:jumbledWord.gif]]
---
&lt;hr&gt;
'''Logic to create a Jumbled Word'''
&lt;hr&gt;
&lt;pre&gt;
#Get Jumbled Word and print it Horizontally
import random

def getJumbledWord(b):
    jumble=''
    l1 = [ b[i] for i in range(0, len(b)) ]
    for t in range(len(l1)):
       p=random.choice(l1)  #this randomly gets letters from the list      
       jumble=jumble+p       
       l1.remove(p)
    return jumble

b=input(&quot;Enter a word to make it jumbled : &quot;)
print(&quot;Jumbled Word : &quot;, getJumbledWord(b))
&lt;/pre&gt;
&lt;pre&gt;
Output:
Enter a word to make it jumbled : live and let live others
Jumbled Word :  vel  toldeisrte aihv len
==========================================
Enter a word to make it jumbled : junkfood
Jumbled Word :  nfukdooj
&lt;/pre&gt;
&lt;hr&gt;
'''Another Logic to create a Jumbled Word'''
&lt;hr&gt;
&lt;pre&gt;
import random
b=input(&quot;Enter a word to make it jumbled : &quot;)

def getJumbledWord1(b):
    l1 = [ b[i] for i in range(0, len(b)) ]
    random.shuffle(l1)
    str1 = ''.join(l1)
    return str1

print(&quot;Jumbled Word : &quot;, getJumbledWord1(b))
&lt;/pre&gt;

====Sample Output:====
&lt;pre&gt;
---- Output1 
Enter a word to make it jumbled : butter
Jumbled Word :  tbture

---- Output2 
Enter a word to make it jumbled : petriotism
Jumbled Word :  pittrosime
&lt;/pre&gt;

=Theory of Evolution=

== What is Evolution ? ==
Evolution is the change in heritable characteristics over successive generations. The theory of evolution explains that DNA, which acts as a carrier of genetic information from one generation to other, tends to change or mutate occasionally. These changes are reflected in next generations to come. This is how life has evolved on earth from bacteria to human beings.&lt;br&gt;
[[File:Evolution.png|500px]]

== Implementation ==
 &lt;p style=&quot;text-align:justify&quot;&gt;
An array representing DNA is stored in a file. As genes are forms of DNA, they contain information to be transferred to forthcoming generations. Assume that information is in the form of bits (in the form of 0s and 1s). A number is picked randomly from 1 to the size of the array. A new parameter has been introduced which decides whether mutation would occur or not. If the value of this new parameter is 1 (It is picked randomly from 1 to 100), then only change is reflected down the generations, otherwise it is not. The pseudo code is as follows :
&lt;/p&gt;
Input an array containing genetic information .
Randomly generate a number (say m) from 1 to length of the array. Randomly generate other number (say p) from 1 to 100.

&lt;pre&gt; 
    if p is equal to 1 then 
        if m is 1 then
          set it to 0
        else
          set it to 1
&lt;/pre&gt;
[[#TOP]]</text>
      <sha1>07kloof0blqe45mh7vrjn1734ptbh38</sha1>
    </revision>
    <revision>
      <id>3749</id>
      <parentid>3748</parentid>
      <timestamp>2018-09-29T04:06:21Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* Reverse the List */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="30733">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_3 Contributors of this page]
*Week 3 Playlist: https://www.youtube.com/playlist?list=PLc_j0TNIaWxOVx_z9jAM2UB3RqYNXaoEo
=List=
List is a flexible data structure used for storing a group of data separated by comma. The elements in a list need not be of the same data type.

'''Example:'''
       List_1 = [ 1, 2,3] or 
       List_1 = [&quot;coffee&quot;, &quot;Tea&quot;, &quot;Milk&quot;] or
       List_1 = [1,&quot;coffee&quot;, &quot;Tea&quot;, 3, &quot;5&quot;]

==List Creation==
a) A list can be created by simply putting values (separated by comma) between square
 brackets as given below,
&lt;pre&gt;List_1 = [1,&quot;coffee&quot;, &quot;Tea&quot;, 3, &quot;5&quot;] #this creates a list by name List_1 containing
 following items
&lt;/pre&gt;


Or,
(b)A List can be created from scratch and elements can be added 
&lt;pre&gt;
        List_2 = [ ]
        List_2.append(&quot;Kala&quot;)
        List_2.append(&quot;Mala&quot;)
&lt;/pre&gt;
Here we use &quot;append&quot;, which is a function in python that enable us to append or attach an element to a list .
&lt;pre&gt;Thus List_2 will now hold [&quot;Kala&quot;,&quot;Mala&quot;]&lt;/pre&gt;

[[#Top]]

==Operations and Methods to work with List==
&lt;pre&gt;
a = [25,30,50,90,12,13]
b = [100,300,500,200,250]
&lt;/pre&gt;
&lt;hr&gt;
&lt;table border=2&gt;
  &lt;tr&gt;
    &lt;th&gt;&lt;b&gt;Method/&lt;br&gt;Operator&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Function&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Syntax&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Output&lt;/b&gt;&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;len()&lt;/td&gt;
    &lt;td&gt;Find length of a list&lt;/td&gt;
    &lt;td&gt;len(a)&lt;/td&gt;
    &lt;td&gt;6&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;max()&lt;/td&gt;
    &lt;td&gt;Find maximum element from the list&lt;/td&gt;
    &lt;td&gt;max(a)&lt;/td&gt;
    &lt;td&gt;90&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;min()&lt;/td&gt;
    &lt;td&gt;Find minimum element from the list&lt;/td&gt;
    &lt;td&gt;min(a)&lt;/td&gt;
    &lt;td&gt;12&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sum()&lt;/td&gt;
    &lt;td&gt;Returns sum of all elements of the list&lt;/td&gt;
    &lt;td&gt;sum(a)&lt;/td&gt;
    &lt;td&gt;220&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;reverse()&lt;/td&gt;
    &lt;td&gt;Reverses the original list&lt;/td&gt;
    &lt;td&gt;a.reverse()&lt;/td&gt;
    &lt;td&gt;[13, 12, 90, 50, 30, 25]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sort()&lt;/td&gt;
    &lt;td&gt;Sorts the original list in ascending order&lt;/td&gt;
    &lt;td&gt;a.sort()&lt;/td&gt;
    &lt;td&gt;[12, 13, 25, 30, 50, 90]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sorted()&lt;/td&gt;
    &lt;td&gt;Returns the new sorted list &lt;/td&gt;
    &lt;td&gt;sorted(a)&lt;/td&gt;
    &lt;td&gt;[12, 13, 25, 30, 50, 90]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;insert()&lt;/td&gt;
    &lt;td&gt;Insert at a particular index in the list, and shifts remaining elements&lt;/td&gt;
    &lt;td&gt;a.insert(3,3)&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 3, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;append()&lt;/td&gt;
    &lt;td&gt;Adds elements/object to the end of the list&lt;/td&gt;
    &lt;td&gt;a.append(5)&lt;br&gt;a.append([10,20])&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 5]&lt;br&gt;[25, 30, 50, 90, 12, 13, [10, 20]]&lt;br&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;extend()&lt;/td&gt;
    &lt;td&gt;Adds object to the end of the list as elements not as object&lt;/td&gt;
    &lt;td&gt;a.extend([10,20])&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 10, 20]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;*&amp;nbsp;&amp;nbsp;Repeatation&lt;br&gt;operator&lt;/td&gt;
    &lt;td&gt;Repeat the list for n times and returns a new list&lt;/td&gt;
    &lt;td&gt;a*2&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 25, 30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;+ Concatenation&lt;br&gt;operator&lt;/td&gt;
    &lt;td&gt;Concatenates two lists, and returns a new list&lt;/td&gt;
    &lt;td&gt;a+b&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 100, 300, 500, 200, 250]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;index()&lt;/td&gt;
    &lt;td&gt;Finds index of a particular element in the list or not&lt;/td&gt;
    &lt;td&gt;a.index(25)&lt;br&gt;a.index(0)&lt;br&gt;&lt;/td&gt;
    &lt;td&gt;0&lt;br&gt;&lt;br&gt;ValueError: 0 is not in list&lt;br&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;in operator&lt;/td&gt;
    &lt;td&gt;Finds whether a particular element is in the list or not, returns boolean&lt;/td&gt;
    &lt;td&gt;25 in a&lt;/td&gt;
    &lt;td&gt;True&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;not in operator&lt;/td&gt;
    &lt;td&gt;Checks if element is not available in list, returns boolean&lt;/td&gt;
    &lt;td&gt;25 not in a&lt;/td&gt;
    &lt;td&gt;False&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;count()&lt;/td&gt;
    &lt;td&gt;Counts the number of occurence of an element in the list&lt;/td&gt;
    &lt;td&gt;a.count(25)&lt;/td&gt;
    &lt;td&gt;1&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;remove()&lt;/td&gt;
    &lt;td&gt;Removes an element from the list&lt;/td&gt;
    &lt;td&gt;a.remove(25)&lt;/td&gt;
    &lt;td&gt; [30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;pop()&lt;/td&gt;
    &lt;td&gt;Delete and return item at index 0&lt;/td&gt;
    &lt;td&gt;a.pop(0)&lt;/td&gt;
    &lt;td&gt;25 , a will be [30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;del&lt;/td&gt;
    &lt;td&gt;Deletes item at a particular index from the list&lt;/td&gt;
    &lt;td&gt;del a[0]&lt;/td&gt;
    &lt;td&gt;[30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;all()&lt;/td&gt;
&lt;td&gt;Returns True, if all items in list are True or it is an empty list&lt;/td&gt;
&lt;td&gt;all([True, True, True])
all([])
&lt;/td&gt;
&lt;td&gt;True&lt;br&gt;
True&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;any()&lt;/td&gt;
&lt;td&gt;Returns True, if any item in list is True else return False&lt;/td&gt;
&lt;td&gt;any([True, True, True])&lt;br&gt;
any([True, False, True])&lt;br&gt;
any([])&lt;/td&gt;
&lt;td&gt;True&lt;br&gt;False&lt;br&gt;False&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;

==Printing the List==
=== Print whole list ===
A list can be printed simply or using a ''for / while'' loop 

 print(List_2)     # To print the entire list
This code will print      
 ['Kala','Mala']     

===Print element at a particular index===
&lt;pre&gt;
Using index position
    List_2[0]     # prints 'Kala' ,i.e,the value at index position 0.
    List_2[1]     # prints 'Mala'.
&lt;/pre&gt;
=== Without using index position ===
&lt;pre&gt;
for item in List_2:   # here item is a variable used to access elements in list.
       print(item)
   This code snippet prints 
    Kala
    Mala
&lt;/pre&gt;
[[#TOP]]

==Search for a particular element in list==
Elements in a list can be searched by one of the two ways:
=== using index() function===
&lt;pre&gt;
ages1 = [11,23,12,23,45]

#if element is available in the list, index() returns the index value on which, the element is
 present.
print(ages1.index(45))#Output: 4

#if element is not available in the list, index() returns ''ValueError''
print(ages1.index(0))#Output: ValueError:
&lt;/pre&gt;

In programming, if such error occurs, program gets terminated. It can be solved using exception handling.
 
e.g.
&lt;pre&gt;
ages1 = [11,23,12,23,45]

try:
    print(ages1.index(0))
except ValueError:
    print(&quot;Exception has occured&quot;)    
    print(&quot;Element is not found in the list&quot;)

&lt;/pre&gt;
&lt;pre&gt;
'''Output: 
Exception has occured
Element is not found in the list
'''&lt;/pre&gt;
[[#Top]]

=== using 'in' operator===
''in'' operator is used to check whether a particular element is available in the list or not.e.g.

&lt;pre&gt;
ages1 = [11,23,12,23,45]
no=11

if no in ages1:
    print(&quot;no is there in the list&quot;)
else:    
    print(&quot;no is NOT there in the list&quot;)
&lt;/pre&gt;
&lt;pre&gt;
#Output: no is there in the list
&lt;/pre&gt;


'''Number is not there in the list'''
&lt;pre&gt;
ages1 = [11,23,12,23,45]
no=15

if no in ages1:
    print(&quot;no is there in the list&quot;)
else:    
    print(&quot;no is NOT there in the list&quot;)
&lt;/pre&gt;
&lt;pre&gt;
Output: no is NOT there in the list
&lt;/pre&gt;
[[#TOP]]

==Updating the List==
The lists can be updated using ''append'' or ''insert'' function.  Append adds the element to the end of the list and Insert adds the element in the specified position.
&lt;pre&gt;
   # add the element 'Sheela' to the end of the list.
   List_2.append(&quot;Sheela&quot;)    
   print (List_2) will output 
   ['Kala', 'Mala', 'Sheela']
&lt;/pre&gt;
   &lt;pre&gt;
# add the element &quot;Bala&quot; in the list at the index 1.
   List_2.insert(1,&quot;Bala&quot;)    
   print (List_2) will output 
   ['Kala', 'Bala','Mala', 'Sheela']
&lt;/pre&gt;

=== Extend the list by adding elements of other list at end using extend()===
&lt;pre&gt;
ages = [11,23,12,23,45]
ages.extend([57,58])
print(ages)
&lt;/pre&gt;

&lt;pre&gt;
#Output: [11, 23, 12, 23, 45, 57, 58]
&lt;/pre&gt;

==== Difference between ''append and extend'' ====
Difference between append and extend can be easily understood, by the following example.

&lt;pre&gt;
appendlist = [11,23,12,23,45]
appendlist.append([57,58])

extendlist= [11,23,12,23,45]
extendlist.extend([57,58])
&lt;/pre&gt;

&lt;pre&gt;
'''Output:
[11, 23, 12, 23, 45, [57, 58]]
[11, 23, 12, 23, 45, 57, 58]'''
&lt;/pre&gt;

[[#TOP]]

==Basic Operations on List==
===Frequency of Occurrence===
list.count(object) will return the number of times the object occur in the list.
  '''Example'''
    ages = [11,23,12,23,45,43,22,24,23]
    ages.count(23) will return
    3
    ages.count(100) will return
    0

===Length of the List===
''len(list)'' will return the length of the list ie. the number of objects in the list.
  '''Example'''
&lt;pre&gt;
    ages = [11,23,12,23,45,43,22,24,23]
    len(ages) # Output: 9
&lt;/pre&gt;

To print the objects in the list either use ''for item in list'' or ''for index in range(len(list))''
&lt;pre&gt;
    for item in ages:       
        print (item)  
        (OR)
    for index in range(len(ages)) :
        print (ages[index])
&lt;/pre&gt;

===Sort the List===
''list.sort()'' will sort the list in ascending order
  '''Example'''
    ages = [11,23,12,23,45,43,22,24,23]
    ages.sort() 
    print (ages) 
    [11, 12, 22, 23, 23, 23, 24, 43, 45]

[[#Top]]

===Sort the List using sorted() function===
''sorted(list1)'' will sort the list and return a new list, it doesn't modify the original list
&lt;br&gt;'''Example: Sort in ascending order'''
&lt;pre&gt;
ages = [11,23,12,23,45,43,22,24,23]
newList=sorted(ages)
print(newList)

#Output: [11, 12, 22, 23, 23, 23, 24, 43, 45]
&lt;/pre&gt;

&lt;br&gt;'''Example: Sort in descending order'''
&lt;pre&gt;
ages = [11,23,12,23,45,43,22,24,23]
newList=sorted(ages,reverse=True)
print(newList)

#Output: [45, 43, 24, 23, 23, 23, 22, 12, 11]
&lt;/pre&gt;

===Reverse the List===
''list.reverse()'' will reverse the original list
  '''Example'''
    ages = [11, 12, 22, 23, 23, 23, 24, 43, 45]
    ages.reverse()
    print (ages)
    [45, 43, 24, 23, 23, 23, 22, 12, 11]

Both ''sort()'' and ''reverse()'' list operation will work on numeric and alphanumeric data list.

A special use of the ''reverse()'' function is to descend a list that is sorted in ascending order.

  '''Example'''
&lt;pre&gt;
ages = [11, 12, 22, 23, 23, 23, 24, 43, 45]
ages.sort()
print(ages)
ages.reverse()
print(ages)
&lt;/pre&gt;

===Slicing===
Used to retrieve an object or objects in a range as a list  
  '''Example'''

Use ''list[index]'' to retrieve the object at the given index
&lt;pre&gt;
In [1]: student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
In [2]: student[3]     #Object at index 3.  Remember index starts at 0
Out[2]: 'Geetha'      
&lt;/pre&gt;

Use ''list[start_index : end_index + 1]'' to retrieve objects from the start_index to end_index 
&lt;pre&gt;
In [3]: student[2:4]     # Objects from index 2 to 3 as List. Note the [ and ]
Out[3]: ['Vijay', 'Geetha']   
&lt;/pre&gt;

Use ''list[:]'' to retrieve objects from the starting of the list to the end of the list. 
The default start value will be the starting index of the list (i.e. 0) and the default end value
will be the length of the list 
&lt;pre&gt;
In [4]: student[:]        # prints the entire list
Out[4]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma', 'Janani']
&lt;/pre&gt;
&lt;pre&gt;
In [5]: student[:5]       # prints the objects from the start of the list upto object at index 4
Out[5]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran']
&lt;/pre&gt;
&lt;pre&gt;
In [6]: student[2:]       # prints the objects from index 2 upto the end of the list
Out[6]: ['Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma', 'Janani']
&lt;/pre&gt;

Negative index too is available in Python. It starts from last element of the list. i.e.
&lt;pre&gt;
In [7]:student[-1]        #prints last index of list
Out[7]: 'Janani'
&lt;/pre&gt;
&lt;pre&gt;
In [8]:student[-1:-8]     #prints empty list
Out[8]: []
&lt;/pre&gt;
&lt;pre&gt;
In [9]:student[-8:-1]     #prints -8th index to -1st index elements
Out[9]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma']
&lt;/pre&gt;

[[#TOP]]

===Removing Item from list ===
----

Is used to remove a specific item from the list.

'''Example:'''
 
Use list.remove(entry/value)  Or   del list[index]    Or list.pop(index)
&lt;pre&gt;
student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
student.remove(&quot;Arun&quot;)   #This will delete item &quot;Arun&quot;
         Or    
del student[0]           # This will delete item at index 0
         Or
student.pop(0)         # This will delete and return item at index 0
print(student)    
Output: &quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
&lt;/pre&gt;

[[#TOP]]

===Delete list ===
----
Used to delete complete list

'''Example'''

Use del &lt;list name&gt;
&lt;pre&gt;
student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
del student&lt;/pre&gt;

===Concatenation of two lists===
----
''+'' is the concatenation operator which is used concatenate two lists. 
&lt;pre&gt;
ages1 = [11,23,12,23,45]
ages2 = [25, 24, 43, 47]
age=ages1+ages2
print(age)
#Output: [11, 23, 12, 23, 45, 25, 24, 43, 47]
&lt;/pre&gt;

===Repeatation of a list ===
----
''*'' is the operator to repeat a particular list.
&lt;pre&gt;
ages1 = [11,23,12,23,45]
age=ages1*5 #ages1 list is repeated 5 times and stroed in ''age'' list
print(age)

#Output: [11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45]
&lt;/pre&gt;

=== all and any for List===
all() and any() are special functions to check whether all elements in iterable is ''True'' or any element is ''True''
&lt;ol&gt;
&lt;li&gt;If all elements in a list are ''True'', '''all()''' will return ''True''&lt;/li&gt;
&lt;li&gt;If iterable is ''empty'', '''all()''' will return ''True''&lt;/li&gt;
&lt;li&gt;If iterable contains at least one ''True'', '''any()''' will return ''True''&lt;/li&gt;
&lt;li&gt;If iterable is ''empty'', '''any()''' will return ''False''&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;
lsit=[True, True, True, True]
print(all(lsit))#Output: True
print(any(lsit))#Output: True

lsit1=[True, False, True, True]
print(all(lsit1))#Output: False
print(any(lsit1))#Output: True

lsit2=[False,False,False]
print(all(lsit2))#Output: False
print(any(lsit2))#Output: False

lsit3=[]
print(all(lsit3))#Output: True
print(any(lsit3))#Output: False
&lt;/pre&gt;

==Conditional Statements==
&lt;pre&gt;Conditionals are used to check the condition and change the flow of the program 
accordingly. They are realized in programming languages through if statement. The 
syntax is as follows :
&lt;pre&gt;
         if condition : 
            statement
&lt;/pre&gt;
    '''Note:''' Do not forget indentation (inserting space/tab) in the line after the
 if condition.
    
    In case you want to execute a set of statements when a condition is true and another

set of statement when the condition is false.
&lt;pre&gt;
         if condition : 
            statement 1
         else :
            statement 2
&lt;/pre&gt;

&lt;pre&gt;    
    Multiple if-else statements can be written as follows:
         if condition_1 : 
            statement 1
         elif condition_2 : # 'elif' is short for 'else if'
            statement 2
         elif condition_3 :
            statement 3
        .
        .
         else :
            final statement
&lt;/pre&gt;

[[#TOP]]

=Loops and Conditionals : Fizzbuzz=
====Loops====
Loops are used to execute a set of repetitive statements. They are realised
through 'while' and 'for' loops in programming languages. The syntax of 'for' loop is 
as follows :
&lt;pre&gt;
for LOOPVARIABLE in SEQUENCE: 
            STATEMENTS&lt;/pre&gt;

    '''e.g.''' to print all the data from a list we can write:
&lt;pre&gt;
for item in list_name:
      print(item)&lt;/pre&gt;
    OR
&lt;pre&gt;
for index in range(len(list_name)):
      print(list_name[index])
 &lt;/pre&gt;   
    The syntax for while loop is as follows :
&lt;pre&gt;    
while BOOLEANEXPRESSION: 
     STATEMENTS
     INCREMENT/DECREMENT
&lt;/pre&gt;    
    '''e.g.''' if we want to print all numbers from 1 to 10
&lt;pre&gt;
i=1
while i&lt;=10 :
    print(i,&quot; &quot;)
    i=i+1
    &lt;/pre&gt;
 
'while' loop has indefinite iteration (run-time unknown). So, there must be loop,  break statement in it.
 Whereas 'for' loop is definite in nature (i.e. known or predictable span).&lt;br&gt;

&lt;b&gt;NOTE: Python doesn't have anything like do-while loop.&lt;/b&gt;

[[#TOP]]

==Implementation==
Here, we try to demonstrate the concept of loops and conditionals through a game called Fizzbuzz. The rules are as follows :&lt;br/&gt;
[[File:fizzBuzz.gif]]

• if input number is a multiple of ’3’ print ”Fizz”
&lt;br/&gt;
• if input number is a multiple of ’5’ print ”Buzz”
&lt;br/&gt;
• if input number is a multiple of both '3' and ’5’ print ”FizzBuzz”
&lt;br/&gt;
The pseudo code is as follows :
&lt;pre&gt;
   If input no % 3 == 0 and  input no % 5 == 0 : 
       print ”Fizzbuzz”
   else if input no % 3 == 0 : 
       print ”Fizz”
   else if input no % 5 == 0 : 
       print ”Buzz”
   else :
       print the input no
&lt;/pre&gt;
 &lt;p style=&quot;text-align:justify&quot;&gt;
The order of statements execution matters to get the desired output. The highest priority condition should be first followed by other. In fizzbuzz programming, first checking should be done for both divisibility of 3 and 5. If condition not satisfied only then it should check individually for 3 or 5. So carefully choosing the order is crucial for better programming.
Note: There is some effect of present condition statements chosen on next conditions statements. That is why in first attempt fizzbuzz programming got struck.&lt;/p&gt;

Example: 
&lt;pre&gt;
#Code to achieve the above requirement in python3.
i = int(input(&quot;Enter the number&quot;)) 
if i%3 == 0 and i%5 == 0: print(i,&quot;FizzBuzz&quot;)  
elif i%5 == 0: print(i,&quot;Buzz&quot;)
elif i%3 == 0: print(i,&quot;Fizz&quot;)
else: print(i)
&lt;/pre&gt;
Lets put the same into a loop for a range given by the user.
&lt;pre&gt;
def fizzbuzzgame(start,stop):
    for i in range(start,stop+1):
        if i%3 == 0 and i%5 == 0:
            print(i,&quot;FizzBuzz&quot;)
        elif i%5 == 0:
            print(i,&quot;Buzz&quot;)
        elif i%3 == 0:
            print(i,&quot;Fizz&quot;)
        else: print(i)

fizzbuzzgame(50,100)
&lt;/pre&gt;
&lt;pre&gt;
#Output:
1235
Buzz
======================================
555
Fizzbuzz
======================================
1235
Buzz
======================================
999
Fizz
&lt;/pre&gt;

=== Fizz Buzz game in Interactive mode with Score ===
'''By Ms. Ami Tusharkant Choksi'''
&lt;pre&gt;
def fizzbuzzgame(i):
        if i%3 == 0 and i%5 == 0:
            print(i,&quot;FizzBuzz&quot;)
            return(&quot;fzbz&quot;)
        elif i%5 == 0:
            print(i,&quot;Buzz&quot;)
            return(&quot;bz&quot;)
        elif i%3 == 0:
            print(i,&quot;Fizz&quot;)
            return(&quot;fz&quot;)
        else:
            print(i)
            return(&quot;no&quot;)

ch = 'y'
fizzbuzz=0
fizz=0
buzz=0
nothing=0
print(&quot;&quot;&quot;

 /$$$$$$$$/$$                  /$$$$$$$                            
| $$_____|__/                 | $$__  $$                           
| $$      /$$/$$$$$$$$/$$$$$$$| $$  \ $$/$$   /$$/$$$$$$$$/$$$$$$$$
| $$$$$  | $|____ /$$|____ /$$| $$$$$$$| $$  | $|____ /$$|____ /$$/
| $$__/  | $$  /$$$$/   /$$$$/| $$__  $| $$  | $$  /$$$$/   /$$$$/ 
| $$     | $$ /$$__/   /$$__/ | $$  \ $| $$  | $$ /$$__/   /$$__/  
| $$     | $$/$$$$$$$$/$$$$$$$| $$$$$$$|  $$$$$$//$$$$$$$$/$$$$$$$$
|__/     |__|________|________|_______/ \______/|________|________/
                                                                  
&quot;&quot;&quot;)   
print('''

  /$$$$$$                                
 /$$__  $$                               
| $$  \__/ /$$$$$$ /$$$$$$/$$$$  /$$$$$$ 
| $$ /$$$$|____  $| $$_  $$_  $$/$$__  $$
| $$|_  $$ /$$$$$$| $$ \ $$ \ $| $$$$$$$$
| $$  \ $$/$$__  $| $$ | $$ | $| $$_____/
|  $$$$$$|  $$$$$$| $$ | $$ | $|  $$$$$$$
 \______/ \_______|__/ |__/ |__/\_______/
                                     
''')

while(ch == 'y'):
    n=int(input(&quot;Enter a Number : &quot;))
    winLoose=fizzbuzzgame(n)
    if(winLoose == &quot;fz&quot;):
        fizz+=1
    elif(winLoose == &quot;bz&quot;):
        buzz+=1
    elif(winLoose == &quot;fzbz&quot;):
        fizzbuzz+=1
    ch=input(&quot;Do you want to continue playing the game : (y/n)&quot;)
    if(ch=='n'):
        print('Congratulations, your score is\n FizzBuzz:%d\nFizz:%d\nBuzz:%d' %
(fizzbuzz,fizz,buzz))
    
'''Sample Output:

 /$$$$$$$$/$$                  /$$$$$$$                            
| $$_____|__/                 | $$__  $$                           
| $$      /$$/$$$$$$$$/$$$$$$$| $$  \ $$/$$   /$$/$$$$$$$$/$$$$$$$$
| $$$$$  | $|____ /$$|____ /$$| $$$$$$$| $$  | $|____ /$$|____ /$$/
| $$__/  | $$  /$$$$/   /$$$$/| $$__  $| $$  | $$  /$$$$/   /$$$$/ 
| $$     | $$ /$$__/   /$$__/ | $$  \ $| $$  | $$ /$$__/   /$$__/  
| $$     | $$/$$$$$$$$/$$$$$$$| $$$$$$$|  $$$$$$//$$$$$$$$/$$$$$$$$
|__/     |__|________|________|_______/ \______/|________|________/
                                                                                                                                   

  /$$$$$$                                
 /$$__  $$                               
| $$  \__/ /$$$$$$ /$$$$$$/$$$$  /$$$$$$ 
| $$ /$$$$|____  $| $$_  $$_  $$/$$__  $$
| $$|_  $$ /$$$$$$| $$ \ $$ \ $| $$$$$$$$
| $$  \ $$/$$__  $| $$ | $$ | $| $$_____/
|  $$$$$$|  $$$$$$| $$ | $$ | $|  $$$$$$$
 \______/ \_______|__/ |__/ |__/\_______/
                                         

Enter a Number : 666
666 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 777
777 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 555
555 FizzBuzz
Do you want to continue playing the game : (y/n)y
Enter a Number : 1
1
Do you want to continue playing the game : (y/n)y
Enter a Number : 789
789 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 25
25 Buzz
Do you want to continue playing the game : (y/n)n
Congratulations, your score is

FizzBuzz:1
Fizz:3
Buzz:1

&lt;/pre&gt;

=Crowd Computing: Just Estimate=
==Wisdom of Crowds==
 &lt;p style=&quot;text-align:justify&quot;&gt;
The concept of ’Wisdom of Crowds’ was proposed by Francis Galton. A weight-judging competition was carried on at the annual show of the West of England Fat Stock and Poultry Exhibition recently held at Plymouth, A fat ox having been selected, competitors bought stamped and numbered cards, each, on which to inscribe their respective names, addresses, and estimates of what the ox would weigh after it had been slaughtered. Those who guessed most successfully received prizes. About 8oo tickets were issued to the par- ticipants. The middlemost estimate of all the estimates recorded was 1207 lbs and the actual weight of the ox was 1198 lbs.&lt;/p&gt;

==Our Experiment==
 &lt;p style=&quot;text-align:justify&quot;&gt;
The crowd had to guess the number of candies/gems in a jar. Around 75 people participated in the experiment. The actual number of gems in the jar were 375. The median of all estimates came out to be 300 and the mean of all the estimates came out to be around 396. Median underestimated and mean overestimated the actual value. So according to recent studies, Trimmed mean must be used as an aggregate measure to estimate where Wisdom of Crowds is involved.
&lt;/p&gt;
[[File:Gemsjar.jpg|center|200px|caption]]

===Trimmed Mean===
 &lt;p style=&quot;text-align:justify&quot;&gt;
In these kinds of experiments, 10% trimmed mean is usually followed. For calculating 10% trimmed mean, remove 10% smallest and 10% largest values from the sample. Calculate the mean of the sample obtained. In the above experiment, the trimmed mean came out to be around 351 which is very close to the actual value.&lt;/p&gt;

==Implementation==
Here, we try to demonstrate the concept of trimmed mean through crowd computing.
&lt;ol&gt;
&lt;li&gt; Input a list of estimates done by the crowd .&lt;/li&gt;
&lt;li&gt; Sort the list.&lt;/li&gt;
&lt;li&gt; Remove the 10% smallest values.&lt;/li&gt;
&lt;li&gt; Remove the 10% largest values.
&lt;li&gt; Calculate the mean of the new list obtained .&lt;/li&gt;&lt;/ol&gt;&lt;hr&gt;

==Data of Experiment==       
    Estimates =[1000,1010,1786,2000,1500,1500,100,120,150,150,150,170,175,180,197,200,200,200,200,200,200,220,220,220,220,234,250,250,250,250,250,250,250,250,250,263,270,275,275,286,300,
                300,300,300,300,300,300,300,320,350,350,350,400, 400,400,400,400,450,467,500,500,500,500,500,500,500,550,550,600,600,600,650,700,700,720]

    '''CODE:'''
&lt;pre&gt;
Estimates = [1000,1010,1786,2000,1500,1500,100,120,150,150,150,170,175,180,197,200,200,200,200,200,200,220,220,220,220,234,250,250,250,250,250,250,250,250,250,263,270,275,275,286,300,                300,300,300,300,300,300,300,320,350,350,350,400,400,400,400,400,450,467,500,500,500,500,500,500,500,550,550,600,600,600,650,700,700,720]
Estimates.sort()
offset = int(0.10*len(Estimates))
for i in range(offset):
       del Estimates[0]
       del Estimates[-1]
Sum = 0    
for i in range(len(Estimates)):
       Sum += Estimates[i]
Mean_Value = Sum/len(Estimates)
print(&quot;Mean : &quot;, int(Mean_Value))
#Output:
Mean :  351
&lt;/pre&gt;
&lt;hr&gt;
==Trimmed Mean for the above example== 
&lt;h3&gt;Using scipy library&lt;/h3&gt;
&lt;pre&gt;
#import scipy to use the method of trim_mean
from scipy import stats
trimMean = stats.trim_mean(Estimates, 0.1) # Trim 10% at both ends
print(&quot;Trimmed Mean : &quot;,trimMean)
#Output:
Trimmed Mean :  335.1020408163265
&lt;/pre&gt;

&lt;h3&gt;Without using scipy library&lt;/h3&gt;
&lt;pre&gt;
#Trimmed mean with 10%
p=10/100
#sorted data
data=[2, 4, 6, 7, 11, 21, 81, 90, 105, 121]
n = len(data)
#Remove elements from both end
rem=int(n*p)
newData = data[rem:-rem]
mean = 0
for i in newData:
    mean += i
mean = int(mean/len(newData))
print(&quot;Trimmed mean : &quot;,mean)
#Output: Trimmed mean :  40
&lt;/pre&gt;
[[#Top]]

=Jumbled_Words Permutations: Jumbled Words=
==What are Permutations ?==
A permutation also called ordering of selected number of elements from a list denoted by nPr here we are choosing all elements of a list and so n=r&lt;br&gt;
nPr=n!/(n-r)!&lt;br&gt; as n=r
nPn=n!&lt;br&gt; which gives all possible arrangement of elements present in a list.

 For example, permutations of list [1,2,3] are [1,2,3], [1,3,2], [2,1,3], [2,3,1], 
[3,1,2], and [3,2,1]. 
The number of permutations of a list of elements nPn is given by n!. For example, there are 2! = 2 x 1 = 2 permutations of [1,2], namely [1,2] and [2,1], and 3! = 3 x 2 x 1 = 6 permutations of [1,2,3], as mentioned above.&lt;br/&gt;
[[File:Permutations.jpg]]

==Implementation==
 &lt;p style=&quot;text-align:justify&quot;&gt;
Here, we try to demonstrate the concept of permutations through jumbled words. It is a two player game in which one person presents the other person a different permutation of the word in his mind. The other person has to guess the right word. If he guesses, the he wins otherwise he loses.&lt;/p&gt;
 Input an list of words.
 Randomly pick a word from the list of words .
 Shuffle this word and present it to the other player.
 if word guesses by the player is same as the one picked from list of w
     player wins
 else
     player loses

ALTERNATE CODE TO GENERATE THIS GAME:
&lt;pre&gt;
import random
p1=input(&quot;enter player 1 name:&quot;)
p2=input(&quot;enter player 2 name:&quot;)
l=[&quot;rainbow&quot;,&quot;computer&quot;,&quot;robot&quot;,&quot;butter&quot;,&quot;vegetable&quot;,&quot;science&quot;,&quot;correct&quot;]
c1=c2=a1=a2=f1=f2=0
k=1
i=3
def play():
    n=random.choice(l)        ##n=chooses a word from list l
    l1=[]
    for j in n:
       l1.append(j)      ##creates a list for word in n
    for t in range(len(l1)):
       p=random.choice(l1)     ##this randomly displays letters in the list
       print(p)
       l1.remove(p)          ##to avoid the repetition of a letter
    s=input(&quot;enter the word:&quot;)
    if(s==n):
        print(&quot;correct&quot;)
        return 1
    else:
        print(&quot;not correct&quot;)
        print(&quot;answer is&quot;,n)
        return 0
def stat():
     print(&quot;player 1:&quot;)
     print(&quot;score:&quot;,c1)
     print(&quot;answered:&quot;,a1)
     print(&quot;failed:&quot;,f1)
     print(&quot;.............&quot;)
     print(&quot;player 2:&quot;)
     print(&quot;score:&quot;,c2)
     print(&quot;answered:&quot;,a2)
     print(&quot;failed&quot;,f2)
     if(c1&gt;c2):
         print(p1,&quot; won over &quot;,p2)
     elif(c1==c2):
         print(&quot;draw game&quot;)
     else:
         print(p2,&quot; won over &quot;,p1) 
while(i!=4):
      if(i==3):
         if(k==1):
             print(&quot;player 1 turn&quot;)
             print(&quot;your jumbled word is:&quot;)
             k=k+1
             m=play()
             if(m==1):      ##if guessed answer is correct,then score and no.of answered count will be increased
                c1+=1
                a1+=1
             else:
                f1+=1       ##else count of no.of failed to answered will be incremented
         else:
             print(&quot;player 2 turn&quot;)
             print(&quot;your jumbled word is:&quot;)
             k=k-1
             m=play()
             if(m==1):
                c2=c2+1
                a2=a2+1
             else:
                f2=f2+1
       if(i==2):
             print(&quot;present status&quot;)
             stat()
       i=int(input(&quot;enter your choice  1.stop 2.status 3.continue&quot;))
       if(i==1):
             stat()
             i=i+3
&lt;/pre&gt;
&lt;hr&gt;
=== JumbledWord Simple Logic, In Short ===
[[File:jumbledWord.gif]]
---
&lt;hr&gt;
'''Logic to create a Jumbled Word'''
&lt;hr&gt;
&lt;pre&gt;
#Get Jumbled Word and print it Horizontally
import random

def getJumbledWord(b):
    jumble=''
    l1 = [ b[i] for i in range(0, len(b)) ]
    for t in range(len(l1)):
       p=random.choice(l1)  #this randomly gets letters from the list      
       jumble=jumble+p       
       l1.remove(p)
    return jumble

b=input(&quot;Enter a word to make it jumbled : &quot;)
print(&quot;Jumbled Word : &quot;, getJumbledWord(b))
&lt;/pre&gt;
&lt;pre&gt;
Output:
Enter a word to make it jumbled : live and let live others
Jumbled Word :  vel  toldeisrte aihv len
==========================================
Enter a word to make it jumbled : junkfood
Jumbled Word :  nfukdooj
&lt;/pre&gt;
&lt;hr&gt;
'''Another Logic to create a Jumbled Word'''
&lt;hr&gt;
&lt;pre&gt;
import random
b=input(&quot;Enter a word to make it jumbled : &quot;)

def getJumbledWord1(b):
    l1 = [ b[i] for i in range(0, len(b)) ]
    random.shuffle(l1)
    str1 = ''.join(l1)
    return str1

print(&quot;Jumbled Word : &quot;, getJumbledWord1(b))
&lt;/pre&gt;

====Sample Output:====
&lt;pre&gt;
---- Output1 
Enter a word to make it jumbled : butter
Jumbled Word :  tbture

---- Output2 
Enter a word to make it jumbled : petriotism
Jumbled Word :  pittrosime
&lt;/pre&gt;

=Theory of Evolution=

== What is Evolution ? ==
Evolution is the change in heritable characteristics over successive generations. The theory of evolution explains that DNA, which acts as a carrier of genetic information from one generation to other, tends to change or mutate occasionally. These changes are reflected in next generations to come. This is how life has evolved on earth from bacteria to human beings.&lt;br&gt;
[[File:Evolution.png|500px]]

== Implementation ==
 &lt;p style=&quot;text-align:justify&quot;&gt;
An array representing DNA is stored in a file. As genes are forms of DNA, they contain information to be transferred to forthcoming generations. Assume that information is in the form of bits (in the form of 0s and 1s). A number is picked randomly from 1 to the size of the array. A new parameter has been introduced which decides whether mutation would occur or not. If the value of this new parameter is 1 (It is picked randomly from 1 to 100), then only change is reflected down the generations, otherwise it is not. The pseudo code is as follows :
&lt;/p&gt;
Input an array containing genetic information .
Randomly generate a number (say m) from 1 to length of the array. Randomly generate other number (say p) from 1 to 100.

&lt;pre&gt; 
    if p is equal to 1 then 
        if m is 1 then
          set it to 0
        else
          set it to 1
&lt;/pre&gt;
[[#TOP]]</text>
      <sha1>6nnzzl4js9w8yx9k13wzptce0ei2qyv</sha1>
    </revision>
    <revision>
      <id>3750</id>
      <parentid>3749</parentid>
      <timestamp>2018-09-29T04:07:04Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* Slicing */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="30733">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_3 Contributors of this page]
*Week 3 Playlist: https://www.youtube.com/playlist?list=PLc_j0TNIaWxOVx_z9jAM2UB3RqYNXaoEo
=List=
List is a flexible data structure used for storing a group of data separated by comma. The elements in a list need not be of the same data type.

'''Example:'''
       List_1 = [ 1, 2,3] or 
       List_1 = [&quot;coffee&quot;, &quot;Tea&quot;, &quot;Milk&quot;] or
       List_1 = [1,&quot;coffee&quot;, &quot;Tea&quot;, 3, &quot;5&quot;]

==List Creation==
a) A list can be created by simply putting values (separated by comma) between square
 brackets as given below,
&lt;pre&gt;List_1 = [1,&quot;coffee&quot;, &quot;Tea&quot;, 3, &quot;5&quot;] #this creates a list by name List_1 containing
 following items
&lt;/pre&gt;


Or,
(b)A List can be created from scratch and elements can be added 
&lt;pre&gt;
        List_2 = [ ]
        List_2.append(&quot;Kala&quot;)
        List_2.append(&quot;Mala&quot;)
&lt;/pre&gt;
Here we use &quot;append&quot;, which is a function in python that enable us to append or attach an element to a list .
&lt;pre&gt;Thus List_2 will now hold [&quot;Kala&quot;,&quot;Mala&quot;]&lt;/pre&gt;

[[#Top]]

==Operations and Methods to work with List==
&lt;pre&gt;
a = [25,30,50,90,12,13]
b = [100,300,500,200,250]
&lt;/pre&gt;
&lt;hr&gt;
&lt;table border=2&gt;
  &lt;tr&gt;
    &lt;th&gt;&lt;b&gt;Method/&lt;br&gt;Operator&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Function&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Syntax&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Output&lt;/b&gt;&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;len()&lt;/td&gt;
    &lt;td&gt;Find length of a list&lt;/td&gt;
    &lt;td&gt;len(a)&lt;/td&gt;
    &lt;td&gt;6&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;max()&lt;/td&gt;
    &lt;td&gt;Find maximum element from the list&lt;/td&gt;
    &lt;td&gt;max(a)&lt;/td&gt;
    &lt;td&gt;90&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;min()&lt;/td&gt;
    &lt;td&gt;Find minimum element from the list&lt;/td&gt;
    &lt;td&gt;min(a)&lt;/td&gt;
    &lt;td&gt;12&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sum()&lt;/td&gt;
    &lt;td&gt;Returns sum of all elements of the list&lt;/td&gt;
    &lt;td&gt;sum(a)&lt;/td&gt;
    &lt;td&gt;220&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;reverse()&lt;/td&gt;
    &lt;td&gt;Reverses the original list&lt;/td&gt;
    &lt;td&gt;a.reverse()&lt;/td&gt;
    &lt;td&gt;[13, 12, 90, 50, 30, 25]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sort()&lt;/td&gt;
    &lt;td&gt;Sorts the original list in ascending order&lt;/td&gt;
    &lt;td&gt;a.sort()&lt;/td&gt;
    &lt;td&gt;[12, 13, 25, 30, 50, 90]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sorted()&lt;/td&gt;
    &lt;td&gt;Returns the new sorted list &lt;/td&gt;
    &lt;td&gt;sorted(a)&lt;/td&gt;
    &lt;td&gt;[12, 13, 25, 30, 50, 90]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;insert()&lt;/td&gt;
    &lt;td&gt;Insert at a particular index in the list, and shifts remaining elements&lt;/td&gt;
    &lt;td&gt;a.insert(3,3)&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 3, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;append()&lt;/td&gt;
    &lt;td&gt;Adds elements/object to the end of the list&lt;/td&gt;
    &lt;td&gt;a.append(5)&lt;br&gt;a.append([10,20])&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 5]&lt;br&gt;[25, 30, 50, 90, 12, 13, [10, 20]]&lt;br&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;extend()&lt;/td&gt;
    &lt;td&gt;Adds object to the end of the list as elements not as object&lt;/td&gt;
    &lt;td&gt;a.extend([10,20])&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 10, 20]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;*&amp;nbsp;&amp;nbsp;Repeatation&lt;br&gt;operator&lt;/td&gt;
    &lt;td&gt;Repeat the list for n times and returns a new list&lt;/td&gt;
    &lt;td&gt;a*2&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 25, 30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;+ Concatenation&lt;br&gt;operator&lt;/td&gt;
    &lt;td&gt;Concatenates two lists, and returns a new list&lt;/td&gt;
    &lt;td&gt;a+b&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 100, 300, 500, 200, 250]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;index()&lt;/td&gt;
    &lt;td&gt;Finds index of a particular element in the list or not&lt;/td&gt;
    &lt;td&gt;a.index(25)&lt;br&gt;a.index(0)&lt;br&gt;&lt;/td&gt;
    &lt;td&gt;0&lt;br&gt;&lt;br&gt;ValueError: 0 is not in list&lt;br&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;in operator&lt;/td&gt;
    &lt;td&gt;Finds whether a particular element is in the list or not, returns boolean&lt;/td&gt;
    &lt;td&gt;25 in a&lt;/td&gt;
    &lt;td&gt;True&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;not in operator&lt;/td&gt;
    &lt;td&gt;Checks if element is not available in list, returns boolean&lt;/td&gt;
    &lt;td&gt;25 not in a&lt;/td&gt;
    &lt;td&gt;False&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;count()&lt;/td&gt;
    &lt;td&gt;Counts the number of occurence of an element in the list&lt;/td&gt;
    &lt;td&gt;a.count(25)&lt;/td&gt;
    &lt;td&gt;1&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;remove()&lt;/td&gt;
    &lt;td&gt;Removes an element from the list&lt;/td&gt;
    &lt;td&gt;a.remove(25)&lt;/td&gt;
    &lt;td&gt; [30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;pop()&lt;/td&gt;
    &lt;td&gt;Delete and return item at index 0&lt;/td&gt;
    &lt;td&gt;a.pop(0)&lt;/td&gt;
    &lt;td&gt;25 , a will be [30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;del&lt;/td&gt;
    &lt;td&gt;Deletes item at a particular index from the list&lt;/td&gt;
    &lt;td&gt;del a[0]&lt;/td&gt;
    &lt;td&gt;[30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;all()&lt;/td&gt;
&lt;td&gt;Returns True, if all items in list are True or it is an empty list&lt;/td&gt;
&lt;td&gt;all([True, True, True])
all([])
&lt;/td&gt;
&lt;td&gt;True&lt;br&gt;
True&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;any()&lt;/td&gt;
&lt;td&gt;Returns True, if any item in list is True else return False&lt;/td&gt;
&lt;td&gt;any([True, True, True])&lt;br&gt;
any([True, False, True])&lt;br&gt;
any([])&lt;/td&gt;
&lt;td&gt;True&lt;br&gt;False&lt;br&gt;False&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;

==Printing the List==
=== Print whole list ===
A list can be printed simply or using a ''for / while'' loop 

 print(List_2)     # To print the entire list
This code will print      
 ['Kala','Mala']     

===Print element at a particular index===
&lt;pre&gt;
Using index position
    List_2[0]     # prints 'Kala' ,i.e,the value at index position 0.
    List_2[1]     # prints 'Mala'.
&lt;/pre&gt;
=== Without using index position ===
&lt;pre&gt;
for item in List_2:   # here item is a variable used to access elements in list.
       print(item)
   This code snippet prints 
    Kala
    Mala
&lt;/pre&gt;
[[#TOP]]

==Search for a particular element in list==
Elements in a list can be searched by one of the two ways:
=== using index() function===
&lt;pre&gt;
ages1 = [11,23,12,23,45]

#if element is available in the list, index() returns the index value on which, the element is
 present.
print(ages1.index(45))#Output: 4

#if element is not available in the list, index() returns ''ValueError''
print(ages1.index(0))#Output: ValueError:
&lt;/pre&gt;

In programming, if such error occurs, program gets terminated. It can be solved using exception handling.
 
e.g.
&lt;pre&gt;
ages1 = [11,23,12,23,45]

try:
    print(ages1.index(0))
except ValueError:
    print(&quot;Exception has occured&quot;)    
    print(&quot;Element is not found in the list&quot;)

&lt;/pre&gt;
&lt;pre&gt;
'''Output: 
Exception has occured
Element is not found in the list
'''&lt;/pre&gt;
[[#Top]]

=== using 'in' operator===
''in'' operator is used to check whether a particular element is available in the list or not.e.g.

&lt;pre&gt;
ages1 = [11,23,12,23,45]
no=11

if no in ages1:
    print(&quot;no is there in the list&quot;)
else:    
    print(&quot;no is NOT there in the list&quot;)
&lt;/pre&gt;
&lt;pre&gt;
#Output: no is there in the list
&lt;/pre&gt;


'''Number is not there in the list'''
&lt;pre&gt;
ages1 = [11,23,12,23,45]
no=15

if no in ages1:
    print(&quot;no is there in the list&quot;)
else:    
    print(&quot;no is NOT there in the list&quot;)
&lt;/pre&gt;
&lt;pre&gt;
Output: no is NOT there in the list
&lt;/pre&gt;
[[#TOP]]

==Updating the List==
The lists can be updated using ''append'' or ''insert'' function.  Append adds the element to the end of the list and Insert adds the element in the specified position.
&lt;pre&gt;
   # add the element 'Sheela' to the end of the list.
   List_2.append(&quot;Sheela&quot;)    
   print (List_2) will output 
   ['Kala', 'Mala', 'Sheela']
&lt;/pre&gt;
   &lt;pre&gt;
# add the element &quot;Bala&quot; in the list at the index 1.
   List_2.insert(1,&quot;Bala&quot;)    
   print (List_2) will output 
   ['Kala', 'Bala','Mala', 'Sheela']
&lt;/pre&gt;

=== Extend the list by adding elements of other list at end using extend()===
&lt;pre&gt;
ages = [11,23,12,23,45]
ages.extend([57,58])
print(ages)
&lt;/pre&gt;

&lt;pre&gt;
#Output: [11, 23, 12, 23, 45, 57, 58]
&lt;/pre&gt;

==== Difference between ''append and extend'' ====
Difference between append and extend can be easily understood, by the following example.

&lt;pre&gt;
appendlist = [11,23,12,23,45]
appendlist.append([57,58])

extendlist= [11,23,12,23,45]
extendlist.extend([57,58])
&lt;/pre&gt;

&lt;pre&gt;
'''Output:
[11, 23, 12, 23, 45, [57, 58]]
[11, 23, 12, 23, 45, 57, 58]'''
&lt;/pre&gt;

[[#TOP]]

==Basic Operations on List==
===Frequency of Occurrence===
list.count(object) will return the number of times the object occur in the list.
  '''Example'''
    ages = [11,23,12,23,45,43,22,24,23]
    ages.count(23) will return
    3
    ages.count(100) will return
    0

===Length of the List===
''len(list)'' will return the length of the list ie. the number of objects in the list.
  '''Example'''
&lt;pre&gt;
    ages = [11,23,12,23,45,43,22,24,23]
    len(ages) # Output: 9
&lt;/pre&gt;

To print the objects in the list either use ''for item in list'' or ''for index in range(len(list))''
&lt;pre&gt;
    for item in ages:       
        print (item)  
        (OR)
    for index in range(len(ages)) :
        print (ages[index])
&lt;/pre&gt;

===Sort the List===
''list.sort()'' will sort the list in ascending order
  '''Example'''
    ages = [11,23,12,23,45,43,22,24,23]
    ages.sort() 
    print (ages) 
    [11, 12, 22, 23, 23, 23, 24, 43, 45]

[[#Top]]

===Sort the List using sorted() function===
''sorted(list1)'' will sort the list and return a new list, it doesn't modify the original list
&lt;br&gt;'''Example: Sort in ascending order'''
&lt;pre&gt;
ages = [11,23,12,23,45,43,22,24,23]
newList=sorted(ages)
print(newList)

#Output: [11, 12, 22, 23, 23, 23, 24, 43, 45]
&lt;/pre&gt;

&lt;br&gt;'''Example: Sort in descending order'''
&lt;pre&gt;
ages = [11,23,12,23,45,43,22,24,23]
newList=sorted(ages,reverse=True)
print(newList)

#Output: [45, 43, 24, 23, 23, 23, 22, 12, 11]
&lt;/pre&gt;

===Reverse the List===
''list.reverse()'' will reverse the original list
  '''Example'''
    ages = [11, 12, 22, 23, 23, 23, 24, 43, 45]
    ages.reverse()
    print (ages)
    [45, 43, 24, 23, 23, 23, 22, 12, 11]

Both ''sort()'' and ''reverse()'' list operation will work on numeric and alphanumeric data list.

A special use of the ''reverse()'' function is to descend a list that is sorted in ascending order.

  '''Example'''
&lt;pre&gt;
ages = [11, 12, 22, 23, 23, 23, 24, 43, 45]
ages.sort()
print(ages)
ages.reverse()
print(ages)
&lt;/pre&gt;

===Slicing===
Used to retrieve an object or objects in a range as a list  
  '''Example'''

Use ''list[index]'' to retrieve the object at the given index
&lt;pre&gt;
In [1]: student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
In [2]: student[3]     #Object at index 3.  Remember index starts at 0
Out[2]: 'Geetha'      
&lt;/pre&gt;

Use ''list[start_index : end_index + 1]'' to retrieve objects from the start_index to end_index 
&lt;pre&gt;
In [3]: student[2:4]     # Objects from index 2 to 3 as List. Note the [ and ]
Out[3]: ['Vijay', 'Geetha']   
&lt;/pre&gt;

Use ''list[:]'' to retrieve objects from the starting of the list to the end of the list. 
The default start value will be the starting index of the list (i.e. 0) and the default end value
will be the length of the list 
&lt;pre&gt;
In [4]: student[:]        # prints the entire list
Out[4]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma', 'Janani']
&lt;/pre&gt;
&lt;pre&gt;
In [5]: student[:5]       # prints the objects from the start of the list upto object at index 4
Out[5]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran']
&lt;/pre&gt;
&lt;pre&gt;
In [6]: student[2:]       # prints the objects from index 2 upto the end of the list
Out[6]: ['Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma', 'Janani']
&lt;/pre&gt;

Negative index too is available in Python. It starts from last element of the list. i.e.
&lt;pre&gt;
In [7]:student[-1]        #prints last index of list
Out[7]: 'Janani'
&lt;/pre&gt;
&lt;pre&gt;
In [8]:student[-1:-8]     #prints empty list
Out[8]: []
&lt;/pre&gt;
&lt;pre&gt;
In [9]:student[-8:-1]     #prints -8th index to -1st index elements
Out[9]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma']
&lt;/pre&gt;

[[#Top]]

===Removing Item from list ===
----

Is used to remove a specific item from the list.

'''Example:'''
 
Use list.remove(entry/value)  Or   del list[index]    Or list.pop(index)
&lt;pre&gt;
student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
student.remove(&quot;Arun&quot;)   #This will delete item &quot;Arun&quot;
         Or    
del student[0]           # This will delete item at index 0
         Or
student.pop(0)         # This will delete and return item at index 0
print(student)    
Output: &quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
&lt;/pre&gt;

[[#TOP]]

===Delete list ===
----
Used to delete complete list

'''Example'''

Use del &lt;list name&gt;
&lt;pre&gt;
student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
del student&lt;/pre&gt;

===Concatenation of two lists===
----
''+'' is the concatenation operator which is used concatenate two lists. 
&lt;pre&gt;
ages1 = [11,23,12,23,45]
ages2 = [25, 24, 43, 47]
age=ages1+ages2
print(age)
#Output: [11, 23, 12, 23, 45, 25, 24, 43, 47]
&lt;/pre&gt;

===Repeatation of a list ===
----
''*'' is the operator to repeat a particular list.
&lt;pre&gt;
ages1 = [11,23,12,23,45]
age=ages1*5 #ages1 list is repeated 5 times and stroed in ''age'' list
print(age)

#Output: [11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45]
&lt;/pre&gt;

=== all and any for List===
all() and any() are special functions to check whether all elements in iterable is ''True'' or any element is ''True''
&lt;ol&gt;
&lt;li&gt;If all elements in a list are ''True'', '''all()''' will return ''True''&lt;/li&gt;
&lt;li&gt;If iterable is ''empty'', '''all()''' will return ''True''&lt;/li&gt;
&lt;li&gt;If iterable contains at least one ''True'', '''any()''' will return ''True''&lt;/li&gt;
&lt;li&gt;If iterable is ''empty'', '''any()''' will return ''False''&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;
lsit=[True, True, True, True]
print(all(lsit))#Output: True
print(any(lsit))#Output: True

lsit1=[True, False, True, True]
print(all(lsit1))#Output: False
print(any(lsit1))#Output: True

lsit2=[False,False,False]
print(all(lsit2))#Output: False
print(any(lsit2))#Output: False

lsit3=[]
print(all(lsit3))#Output: True
print(any(lsit3))#Output: False
&lt;/pre&gt;

==Conditional Statements==
&lt;pre&gt;Conditionals are used to check the condition and change the flow of the program 
accordingly. They are realized in programming languages through if statement. The 
syntax is as follows :
&lt;pre&gt;
         if condition : 
            statement
&lt;/pre&gt;
    '''Note:''' Do not forget indentation (inserting space/tab) in the line after the
 if condition.
    
    In case you want to execute a set of statements when a condition is true and another

set of statement when the condition is false.
&lt;pre&gt;
         if condition : 
            statement 1
         else :
            statement 2
&lt;/pre&gt;

&lt;pre&gt;    
    Multiple if-else statements can be written as follows:
         if condition_1 : 
            statement 1
         elif condition_2 : # 'elif' is short for 'else if'
            statement 2
         elif condition_3 :
            statement 3
        .
        .
         else :
            final statement
&lt;/pre&gt;

[[#TOP]]

=Loops and Conditionals : Fizzbuzz=
====Loops====
Loops are used to execute a set of repetitive statements. They are realised
through 'while' and 'for' loops in programming languages. The syntax of 'for' loop is 
as follows :
&lt;pre&gt;
for LOOPVARIABLE in SEQUENCE: 
            STATEMENTS&lt;/pre&gt;

    '''e.g.''' to print all the data from a list we can write:
&lt;pre&gt;
for item in list_name:
      print(item)&lt;/pre&gt;
    OR
&lt;pre&gt;
for index in range(len(list_name)):
      print(list_name[index])
 &lt;/pre&gt;   
    The syntax for while loop is as follows :
&lt;pre&gt;    
while BOOLEANEXPRESSION: 
     STATEMENTS
     INCREMENT/DECREMENT
&lt;/pre&gt;    
    '''e.g.''' if we want to print all numbers from 1 to 10
&lt;pre&gt;
i=1
while i&lt;=10 :
    print(i,&quot; &quot;)
    i=i+1
    &lt;/pre&gt;
 
'while' loop has indefinite iteration (run-time unknown). So, there must be loop,  break statement in it.
 Whereas 'for' loop is definite in nature (i.e. known or predictable span).&lt;br&gt;

&lt;b&gt;NOTE: Python doesn't have anything like do-while loop.&lt;/b&gt;

[[#TOP]]

==Implementation==
Here, we try to demonstrate the concept of loops and conditionals through a game called Fizzbuzz. The rules are as follows :&lt;br/&gt;
[[File:fizzBuzz.gif]]

• if input number is a multiple of ’3’ print ”Fizz”
&lt;br/&gt;
• if input number is a multiple of ’5’ print ”Buzz”
&lt;br/&gt;
• if input number is a multiple of both '3' and ’5’ print ”FizzBuzz”
&lt;br/&gt;
The pseudo code is as follows :
&lt;pre&gt;
   If input no % 3 == 0 and  input no % 5 == 0 : 
       print ”Fizzbuzz”
   else if input no % 3 == 0 : 
       print ”Fizz”
   else if input no % 5 == 0 : 
       print ”Buzz”
   else :
       print the input no
&lt;/pre&gt;
 &lt;p style=&quot;text-align:justify&quot;&gt;
The order of statements execution matters to get the desired output. The highest priority condition should be first followed by other. In fizzbuzz programming, first checking should be done for both divisibility of 3 and 5. If condition not satisfied only then it should check individually for 3 or 5. So carefully choosing the order is crucial for better programming.
Note: There is some effect of present condition statements chosen on next conditions statements. That is why in first attempt fizzbuzz programming got struck.&lt;/p&gt;

Example: 
&lt;pre&gt;
#Code to achieve the above requirement in python3.
i = int(input(&quot;Enter the number&quot;)) 
if i%3 == 0 and i%5 == 0: print(i,&quot;FizzBuzz&quot;)  
elif i%5 == 0: print(i,&quot;Buzz&quot;)
elif i%3 == 0: print(i,&quot;Fizz&quot;)
else: print(i)
&lt;/pre&gt;
Lets put the same into a loop for a range given by the user.
&lt;pre&gt;
def fizzbuzzgame(start,stop):
    for i in range(start,stop+1):
        if i%3 == 0 and i%5 == 0:
            print(i,&quot;FizzBuzz&quot;)
        elif i%5 == 0:
            print(i,&quot;Buzz&quot;)
        elif i%3 == 0:
            print(i,&quot;Fizz&quot;)
        else: print(i)

fizzbuzzgame(50,100)
&lt;/pre&gt;
&lt;pre&gt;
#Output:
1235
Buzz
======================================
555
Fizzbuzz
======================================
1235
Buzz
======================================
999
Fizz
&lt;/pre&gt;

=== Fizz Buzz game in Interactive mode with Score ===
'''By Ms. Ami Tusharkant Choksi'''
&lt;pre&gt;
def fizzbuzzgame(i):
        if i%3 == 0 and i%5 == 0:
            print(i,&quot;FizzBuzz&quot;)
            return(&quot;fzbz&quot;)
        elif i%5 == 0:
            print(i,&quot;Buzz&quot;)
            return(&quot;bz&quot;)
        elif i%3 == 0:
            print(i,&quot;Fizz&quot;)
            return(&quot;fz&quot;)
        else:
            print(i)
            return(&quot;no&quot;)

ch = 'y'
fizzbuzz=0
fizz=0
buzz=0
nothing=0
print(&quot;&quot;&quot;

 /$$$$$$$$/$$                  /$$$$$$$                            
| $$_____|__/                 | $$__  $$                           
| $$      /$$/$$$$$$$$/$$$$$$$| $$  \ $$/$$   /$$/$$$$$$$$/$$$$$$$$
| $$$$$  | $|____ /$$|____ /$$| $$$$$$$| $$  | $|____ /$$|____ /$$/
| $$__/  | $$  /$$$$/   /$$$$/| $$__  $| $$  | $$  /$$$$/   /$$$$/ 
| $$     | $$ /$$__/   /$$__/ | $$  \ $| $$  | $$ /$$__/   /$$__/  
| $$     | $$/$$$$$$$$/$$$$$$$| $$$$$$$|  $$$$$$//$$$$$$$$/$$$$$$$$
|__/     |__|________|________|_______/ \______/|________|________/
                                                                  
&quot;&quot;&quot;)   
print('''

  /$$$$$$                                
 /$$__  $$                               
| $$  \__/ /$$$$$$ /$$$$$$/$$$$  /$$$$$$ 
| $$ /$$$$|____  $| $$_  $$_  $$/$$__  $$
| $$|_  $$ /$$$$$$| $$ \ $$ \ $| $$$$$$$$
| $$  \ $$/$$__  $| $$ | $$ | $| $$_____/
|  $$$$$$|  $$$$$$| $$ | $$ | $|  $$$$$$$
 \______/ \_______|__/ |__/ |__/\_______/
                                     
''')

while(ch == 'y'):
    n=int(input(&quot;Enter a Number : &quot;))
    winLoose=fizzbuzzgame(n)
    if(winLoose == &quot;fz&quot;):
        fizz+=1
    elif(winLoose == &quot;bz&quot;):
        buzz+=1
    elif(winLoose == &quot;fzbz&quot;):
        fizzbuzz+=1
    ch=input(&quot;Do you want to continue playing the game : (y/n)&quot;)
    if(ch=='n'):
        print('Congratulations, your score is\n FizzBuzz:%d\nFizz:%d\nBuzz:%d' %
(fizzbuzz,fizz,buzz))
    
'''Sample Output:

 /$$$$$$$$/$$                  /$$$$$$$                            
| $$_____|__/                 | $$__  $$                           
| $$      /$$/$$$$$$$$/$$$$$$$| $$  \ $$/$$   /$$/$$$$$$$$/$$$$$$$$
| $$$$$  | $|____ /$$|____ /$$| $$$$$$$| $$  | $|____ /$$|____ /$$/
| $$__/  | $$  /$$$$/   /$$$$/| $$__  $| $$  | $$  /$$$$/   /$$$$/ 
| $$     | $$ /$$__/   /$$__/ | $$  \ $| $$  | $$ /$$__/   /$$__/  
| $$     | $$/$$$$$$$$/$$$$$$$| $$$$$$$|  $$$$$$//$$$$$$$$/$$$$$$$$
|__/     |__|________|________|_______/ \______/|________|________/
                                                                                                                                   

  /$$$$$$                                
 /$$__  $$                               
| $$  \__/ /$$$$$$ /$$$$$$/$$$$  /$$$$$$ 
| $$ /$$$$|____  $| $$_  $$_  $$/$$__  $$
| $$|_  $$ /$$$$$$| $$ \ $$ \ $| $$$$$$$$
| $$  \ $$/$$__  $| $$ | $$ | $| $$_____/
|  $$$$$$|  $$$$$$| $$ | $$ | $|  $$$$$$$
 \______/ \_______|__/ |__/ |__/\_______/
                                         

Enter a Number : 666
666 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 777
777 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 555
555 FizzBuzz
Do you want to continue playing the game : (y/n)y
Enter a Number : 1
1
Do you want to continue playing the game : (y/n)y
Enter a Number : 789
789 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 25
25 Buzz
Do you want to continue playing the game : (y/n)n
Congratulations, your score is

FizzBuzz:1
Fizz:3
Buzz:1

&lt;/pre&gt;

=Crowd Computing: Just Estimate=
==Wisdom of Crowds==
 &lt;p style=&quot;text-align:justify&quot;&gt;
The concept of ’Wisdom of Crowds’ was proposed by Francis Galton. A weight-judging competition was carried on at the annual show of the West of England Fat Stock and Poultry Exhibition recently held at Plymouth, A fat ox having been selected, competitors bought stamped and numbered cards, each, on which to inscribe their respective names, addresses, and estimates of what the ox would weigh after it had been slaughtered. Those who guessed most successfully received prizes. About 8oo tickets were issued to the par- ticipants. The middlemost estimate of all the estimates recorded was 1207 lbs and the actual weight of the ox was 1198 lbs.&lt;/p&gt;

==Our Experiment==
 &lt;p style=&quot;text-align:justify&quot;&gt;
The crowd had to guess the number of candies/gems in a jar. Around 75 people participated in the experiment. The actual number of gems in the jar were 375. The median of all estimates came out to be 300 and the mean of all the estimates came out to be around 396. Median underestimated and mean overestimated the actual value. So according to recent studies, Trimmed mean must be used as an aggregate measure to estimate where Wisdom of Crowds is involved.
&lt;/p&gt;
[[File:Gemsjar.jpg|center|200px|caption]]

===Trimmed Mean===
 &lt;p style=&quot;text-align:justify&quot;&gt;
In these kinds of experiments, 10% trimmed mean is usually followed. For calculating 10% trimmed mean, remove 10% smallest and 10% largest values from the sample. Calculate the mean of the sample obtained. In the above experiment, the trimmed mean came out to be around 351 which is very close to the actual value.&lt;/p&gt;

==Implementation==
Here, we try to demonstrate the concept of trimmed mean through crowd computing.
&lt;ol&gt;
&lt;li&gt; Input a list of estimates done by the crowd .&lt;/li&gt;
&lt;li&gt; Sort the list.&lt;/li&gt;
&lt;li&gt; Remove the 10% smallest values.&lt;/li&gt;
&lt;li&gt; Remove the 10% largest values.
&lt;li&gt; Calculate the mean of the new list obtained .&lt;/li&gt;&lt;/ol&gt;&lt;hr&gt;

==Data of Experiment==       
    Estimates =[1000,1010,1786,2000,1500,1500,100,120,150,150,150,170,175,180,197,200,200,200,200,200,200,220,220,220,220,234,250,250,250,250,250,250,250,250,250,263,270,275,275,286,300,
                300,300,300,300,300,300,300,320,350,350,350,400, 400,400,400,400,450,467,500,500,500,500,500,500,500,550,550,600,600,600,650,700,700,720]

    '''CODE:'''
&lt;pre&gt;
Estimates = [1000,1010,1786,2000,1500,1500,100,120,150,150,150,170,175,180,197,200,200,200,200,200,200,220,220,220,220,234,250,250,250,250,250,250,250,250,250,263,270,275,275,286,300,                300,300,300,300,300,300,300,320,350,350,350,400,400,400,400,400,450,467,500,500,500,500,500,500,500,550,550,600,600,600,650,700,700,720]
Estimates.sort()
offset = int(0.10*len(Estimates))
for i in range(offset):
       del Estimates[0]
       del Estimates[-1]
Sum = 0    
for i in range(len(Estimates)):
       Sum += Estimates[i]
Mean_Value = Sum/len(Estimates)
print(&quot;Mean : &quot;, int(Mean_Value))
#Output:
Mean :  351
&lt;/pre&gt;
&lt;hr&gt;
==Trimmed Mean for the above example== 
&lt;h3&gt;Using scipy library&lt;/h3&gt;
&lt;pre&gt;
#import scipy to use the method of trim_mean
from scipy import stats
trimMean = stats.trim_mean(Estimates, 0.1) # Trim 10% at both ends
print(&quot;Trimmed Mean : &quot;,trimMean)
#Output:
Trimmed Mean :  335.1020408163265
&lt;/pre&gt;

&lt;h3&gt;Without using scipy library&lt;/h3&gt;
&lt;pre&gt;
#Trimmed mean with 10%
p=10/100
#sorted data
data=[2, 4, 6, 7, 11, 21, 81, 90, 105, 121]
n = len(data)
#Remove elements from both end
rem=int(n*p)
newData = data[rem:-rem]
mean = 0
for i in newData:
    mean += i
mean = int(mean/len(newData))
print(&quot;Trimmed mean : &quot;,mean)
#Output: Trimmed mean :  40
&lt;/pre&gt;
[[#Top]]

=Jumbled_Words Permutations: Jumbled Words=
==What are Permutations ?==
A permutation also called ordering of selected number of elements from a list denoted by nPr here we are choosing all elements of a list and so n=r&lt;br&gt;
nPr=n!/(n-r)!&lt;br&gt; as n=r
nPn=n!&lt;br&gt; which gives all possible arrangement of elements present in a list.

 For example, permutations of list [1,2,3] are [1,2,3], [1,3,2], [2,1,3], [2,3,1], 
[3,1,2], and [3,2,1]. 
The number of permutations of a list of elements nPn is given by n!. For example, there are 2! = 2 x 1 = 2 permutations of [1,2], namely [1,2] and [2,1], and 3! = 3 x 2 x 1 = 6 permutations of [1,2,3], as mentioned above.&lt;br/&gt;
[[File:Permutations.jpg]]

==Implementation==
 &lt;p style=&quot;text-align:justify&quot;&gt;
Here, we try to demonstrate the concept of permutations through jumbled words. It is a two player game in which one person presents the other person a different permutation of the word in his mind. The other person has to guess the right word. If he guesses, the he wins otherwise he loses.&lt;/p&gt;
 Input an list of words.
 Randomly pick a word from the list of words .
 Shuffle this word and present it to the other player.
 if word guesses by the player is same as the one picked from list of w
     player wins
 else
     player loses

ALTERNATE CODE TO GENERATE THIS GAME:
&lt;pre&gt;
import random
p1=input(&quot;enter player 1 name:&quot;)
p2=input(&quot;enter player 2 name:&quot;)
l=[&quot;rainbow&quot;,&quot;computer&quot;,&quot;robot&quot;,&quot;butter&quot;,&quot;vegetable&quot;,&quot;science&quot;,&quot;correct&quot;]
c1=c2=a1=a2=f1=f2=0
k=1
i=3
def play():
    n=random.choice(l)        ##n=chooses a word from list l
    l1=[]
    for j in n:
       l1.append(j)      ##creates a list for word in n
    for t in range(len(l1)):
       p=random.choice(l1)     ##this randomly displays letters in the list
       print(p)
       l1.remove(p)          ##to avoid the repetition of a letter
    s=input(&quot;enter the word:&quot;)
    if(s==n):
        print(&quot;correct&quot;)
        return 1
    else:
        print(&quot;not correct&quot;)
        print(&quot;answer is&quot;,n)
        return 0
def stat():
     print(&quot;player 1:&quot;)
     print(&quot;score:&quot;,c1)
     print(&quot;answered:&quot;,a1)
     print(&quot;failed:&quot;,f1)
     print(&quot;.............&quot;)
     print(&quot;player 2:&quot;)
     print(&quot;score:&quot;,c2)
     print(&quot;answered:&quot;,a2)
     print(&quot;failed&quot;,f2)
     if(c1&gt;c2):
         print(p1,&quot; won over &quot;,p2)
     elif(c1==c2):
         print(&quot;draw game&quot;)
     else:
         print(p2,&quot; won over &quot;,p1) 
while(i!=4):
      if(i==3):
         if(k==1):
             print(&quot;player 1 turn&quot;)
             print(&quot;your jumbled word is:&quot;)
             k=k+1
             m=play()
             if(m==1):      ##if guessed answer is correct,then score and no.of answered count will be increased
                c1+=1
                a1+=1
             else:
                f1+=1       ##else count of no.of failed to answered will be incremented
         else:
             print(&quot;player 2 turn&quot;)
             print(&quot;your jumbled word is:&quot;)
             k=k-1
             m=play()
             if(m==1):
                c2=c2+1
                a2=a2+1
             else:
                f2=f2+1
       if(i==2):
             print(&quot;present status&quot;)
             stat()
       i=int(input(&quot;enter your choice  1.stop 2.status 3.continue&quot;))
       if(i==1):
             stat()
             i=i+3
&lt;/pre&gt;
&lt;hr&gt;
=== JumbledWord Simple Logic, In Short ===
[[File:jumbledWord.gif]]
---
&lt;hr&gt;
'''Logic to create a Jumbled Word'''
&lt;hr&gt;
&lt;pre&gt;
#Get Jumbled Word and print it Horizontally
import random

def getJumbledWord(b):
    jumble=''
    l1 = [ b[i] for i in range(0, len(b)) ]
    for t in range(len(l1)):
       p=random.choice(l1)  #this randomly gets letters from the list      
       jumble=jumble+p       
       l1.remove(p)
    return jumble

b=input(&quot;Enter a word to make it jumbled : &quot;)
print(&quot;Jumbled Word : &quot;, getJumbledWord(b))
&lt;/pre&gt;
&lt;pre&gt;
Output:
Enter a word to make it jumbled : live and let live others
Jumbled Word :  vel  toldeisrte aihv len
==========================================
Enter a word to make it jumbled : junkfood
Jumbled Word :  nfukdooj
&lt;/pre&gt;
&lt;hr&gt;
'''Another Logic to create a Jumbled Word'''
&lt;hr&gt;
&lt;pre&gt;
import random
b=input(&quot;Enter a word to make it jumbled : &quot;)

def getJumbledWord1(b):
    l1 = [ b[i] for i in range(0, len(b)) ]
    random.shuffle(l1)
    str1 = ''.join(l1)
    return str1

print(&quot;Jumbled Word : &quot;, getJumbledWord1(b))
&lt;/pre&gt;

====Sample Output:====
&lt;pre&gt;
---- Output1 
Enter a word to make it jumbled : butter
Jumbled Word :  tbture

---- Output2 
Enter a word to make it jumbled : petriotism
Jumbled Word :  pittrosime
&lt;/pre&gt;

=Theory of Evolution=

== What is Evolution ? ==
Evolution is the change in heritable characteristics over successive generations. The theory of evolution explains that DNA, which acts as a carrier of genetic information from one generation to other, tends to change or mutate occasionally. These changes are reflected in next generations to come. This is how life has evolved on earth from bacteria to human beings.&lt;br&gt;
[[File:Evolution.png|500px]]

== Implementation ==
 &lt;p style=&quot;text-align:justify&quot;&gt;
An array representing DNA is stored in a file. As genes are forms of DNA, they contain information to be transferred to forthcoming generations. Assume that information is in the form of bits (in the form of 0s and 1s). A number is picked randomly from 1 to the size of the array. A new parameter has been introduced which decides whether mutation would occur or not. If the value of this new parameter is 1 (It is picked randomly from 1 to 100), then only change is reflected down the generations, otherwise it is not. The pseudo code is as follows :
&lt;/p&gt;
Input an array containing genetic information .
Randomly generate a number (say m) from 1 to length of the array. Randomly generate other number (say p) from 1 to 100.

&lt;pre&gt; 
    if p is equal to 1 then 
        if m is 1 then
          set it to 0
        else
          set it to 1
&lt;/pre&gt;
[[#TOP]]</text>
      <sha1>307e17s8v23k4zzxweld8pcy6i1ly80</sha1>
    </revision>
    <revision>
      <id>3751</id>
      <parentid>3750</parentid>
      <timestamp>2018-09-29T04:07:46Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* Removing Item from list */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="30745">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_3 Contributors of this page]
*Week 3 Playlist: https://www.youtube.com/playlist?list=PLc_j0TNIaWxOVx_z9jAM2UB3RqYNXaoEo
=List=
List is a flexible data structure used for storing a group of data separated by comma. The elements in a list need not be of the same data type.

'''Example:'''
       List_1 = [ 1, 2,3] or 
       List_1 = [&quot;coffee&quot;, &quot;Tea&quot;, &quot;Milk&quot;] or
       List_1 = [1,&quot;coffee&quot;, &quot;Tea&quot;, 3, &quot;5&quot;]

==List Creation==
a) A list can be created by simply putting values (separated by comma) between square
 brackets as given below,
&lt;pre&gt;List_1 = [1,&quot;coffee&quot;, &quot;Tea&quot;, 3, &quot;5&quot;] #this creates a list by name List_1 containing
 following items
&lt;/pre&gt;


Or,
(b)A List can be created from scratch and elements can be added 
&lt;pre&gt;
        List_2 = [ ]
        List_2.append(&quot;Kala&quot;)
        List_2.append(&quot;Mala&quot;)
&lt;/pre&gt;
Here we use &quot;append&quot;, which is a function in python that enable us to append or attach an element to a list .
&lt;pre&gt;Thus List_2 will now hold [&quot;Kala&quot;,&quot;Mala&quot;]&lt;/pre&gt;

[[#Top]]

==Operations and Methods to work with List==
&lt;pre&gt;
a = [25,30,50,90,12,13]
b = [100,300,500,200,250]
&lt;/pre&gt;
&lt;hr&gt;
&lt;table border=2&gt;
  &lt;tr&gt;
    &lt;th&gt;&lt;b&gt;Method/&lt;br&gt;Operator&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Function&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Syntax&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Output&lt;/b&gt;&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;len()&lt;/td&gt;
    &lt;td&gt;Find length of a list&lt;/td&gt;
    &lt;td&gt;len(a)&lt;/td&gt;
    &lt;td&gt;6&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;max()&lt;/td&gt;
    &lt;td&gt;Find maximum element from the list&lt;/td&gt;
    &lt;td&gt;max(a)&lt;/td&gt;
    &lt;td&gt;90&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;min()&lt;/td&gt;
    &lt;td&gt;Find minimum element from the list&lt;/td&gt;
    &lt;td&gt;min(a)&lt;/td&gt;
    &lt;td&gt;12&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sum()&lt;/td&gt;
    &lt;td&gt;Returns sum of all elements of the list&lt;/td&gt;
    &lt;td&gt;sum(a)&lt;/td&gt;
    &lt;td&gt;220&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;reverse()&lt;/td&gt;
    &lt;td&gt;Reverses the original list&lt;/td&gt;
    &lt;td&gt;a.reverse()&lt;/td&gt;
    &lt;td&gt;[13, 12, 90, 50, 30, 25]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sort()&lt;/td&gt;
    &lt;td&gt;Sorts the original list in ascending order&lt;/td&gt;
    &lt;td&gt;a.sort()&lt;/td&gt;
    &lt;td&gt;[12, 13, 25, 30, 50, 90]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sorted()&lt;/td&gt;
    &lt;td&gt;Returns the new sorted list &lt;/td&gt;
    &lt;td&gt;sorted(a)&lt;/td&gt;
    &lt;td&gt;[12, 13, 25, 30, 50, 90]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;insert()&lt;/td&gt;
    &lt;td&gt;Insert at a particular index in the list, and shifts remaining elements&lt;/td&gt;
    &lt;td&gt;a.insert(3,3)&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 3, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;append()&lt;/td&gt;
    &lt;td&gt;Adds elements/object to the end of the list&lt;/td&gt;
    &lt;td&gt;a.append(5)&lt;br&gt;a.append([10,20])&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 5]&lt;br&gt;[25, 30, 50, 90, 12, 13, [10, 20]]&lt;br&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;extend()&lt;/td&gt;
    &lt;td&gt;Adds object to the end of the list as elements not as object&lt;/td&gt;
    &lt;td&gt;a.extend([10,20])&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 10, 20]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;*&amp;nbsp;&amp;nbsp;Repeatation&lt;br&gt;operator&lt;/td&gt;
    &lt;td&gt;Repeat the list for n times and returns a new list&lt;/td&gt;
    &lt;td&gt;a*2&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 25, 30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;+ Concatenation&lt;br&gt;operator&lt;/td&gt;
    &lt;td&gt;Concatenates two lists, and returns a new list&lt;/td&gt;
    &lt;td&gt;a+b&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 100, 300, 500, 200, 250]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;index()&lt;/td&gt;
    &lt;td&gt;Finds index of a particular element in the list or not&lt;/td&gt;
    &lt;td&gt;a.index(25)&lt;br&gt;a.index(0)&lt;br&gt;&lt;/td&gt;
    &lt;td&gt;0&lt;br&gt;&lt;br&gt;ValueError: 0 is not in list&lt;br&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;in operator&lt;/td&gt;
    &lt;td&gt;Finds whether a particular element is in the list or not, returns boolean&lt;/td&gt;
    &lt;td&gt;25 in a&lt;/td&gt;
    &lt;td&gt;True&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;not in operator&lt;/td&gt;
    &lt;td&gt;Checks if element is not available in list, returns boolean&lt;/td&gt;
    &lt;td&gt;25 not in a&lt;/td&gt;
    &lt;td&gt;False&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;count()&lt;/td&gt;
    &lt;td&gt;Counts the number of occurence of an element in the list&lt;/td&gt;
    &lt;td&gt;a.count(25)&lt;/td&gt;
    &lt;td&gt;1&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;remove()&lt;/td&gt;
    &lt;td&gt;Removes an element from the list&lt;/td&gt;
    &lt;td&gt;a.remove(25)&lt;/td&gt;
    &lt;td&gt; [30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;pop()&lt;/td&gt;
    &lt;td&gt;Delete and return item at index 0&lt;/td&gt;
    &lt;td&gt;a.pop(0)&lt;/td&gt;
    &lt;td&gt;25 , a will be [30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;del&lt;/td&gt;
    &lt;td&gt;Deletes item at a particular index from the list&lt;/td&gt;
    &lt;td&gt;del a[0]&lt;/td&gt;
    &lt;td&gt;[30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;all()&lt;/td&gt;
&lt;td&gt;Returns True, if all items in list are True or it is an empty list&lt;/td&gt;
&lt;td&gt;all([True, True, True])
all([])
&lt;/td&gt;
&lt;td&gt;True&lt;br&gt;
True&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;any()&lt;/td&gt;
&lt;td&gt;Returns True, if any item in list is True else return False&lt;/td&gt;
&lt;td&gt;any([True, True, True])&lt;br&gt;
any([True, False, True])&lt;br&gt;
any([])&lt;/td&gt;
&lt;td&gt;True&lt;br&gt;False&lt;br&gt;False&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;

==Printing the List==
=== Print whole list ===
A list can be printed simply or using a ''for / while'' loop 

 print(List_2)     # To print the entire list
This code will print      
 ['Kala','Mala']     

===Print element at a particular index===
&lt;pre&gt;
Using index position
    List_2[0]     # prints 'Kala' ,i.e,the value at index position 0.
    List_2[1]     # prints 'Mala'.
&lt;/pre&gt;
=== Without using index position ===
&lt;pre&gt;
for item in List_2:   # here item is a variable used to access elements in list.
       print(item)
   This code snippet prints 
    Kala
    Mala
&lt;/pre&gt;
[[#TOP]]

==Search for a particular element in list==
Elements in a list can be searched by one of the two ways:
=== using index() function===
&lt;pre&gt;
ages1 = [11,23,12,23,45]

#if element is available in the list, index() returns the index value on which, the element is
 present.
print(ages1.index(45))#Output: 4

#if element is not available in the list, index() returns ''ValueError''
print(ages1.index(0))#Output: ValueError:
&lt;/pre&gt;

In programming, if such error occurs, program gets terminated. It can be solved using exception handling.
 
e.g.
&lt;pre&gt;
ages1 = [11,23,12,23,45]

try:
    print(ages1.index(0))
except ValueError:
    print(&quot;Exception has occured&quot;)    
    print(&quot;Element is not found in the list&quot;)

&lt;/pre&gt;
&lt;pre&gt;
'''Output: 
Exception has occured
Element is not found in the list
'''&lt;/pre&gt;
[[#Top]]

=== using 'in' operator===
''in'' operator is used to check whether a particular element is available in the list or not.e.g.

&lt;pre&gt;
ages1 = [11,23,12,23,45]
no=11

if no in ages1:
    print(&quot;no is there in the list&quot;)
else:    
    print(&quot;no is NOT there in the list&quot;)
&lt;/pre&gt;
&lt;pre&gt;
#Output: no is there in the list
&lt;/pre&gt;


'''Number is not there in the list'''
&lt;pre&gt;
ages1 = [11,23,12,23,45]
no=15

if no in ages1:
    print(&quot;no is there in the list&quot;)
else:    
    print(&quot;no is NOT there in the list&quot;)
&lt;/pre&gt;
&lt;pre&gt;
Output: no is NOT there in the list
&lt;/pre&gt;
[[#TOP]]

==Updating the List==
The lists can be updated using ''append'' or ''insert'' function.  Append adds the element to the end of the list and Insert adds the element in the specified position.
&lt;pre&gt;
   # add the element 'Sheela' to the end of the list.
   List_2.append(&quot;Sheela&quot;)    
   print (List_2) will output 
   ['Kala', 'Mala', 'Sheela']
&lt;/pre&gt;
   &lt;pre&gt;
# add the element &quot;Bala&quot; in the list at the index 1.
   List_2.insert(1,&quot;Bala&quot;)    
   print (List_2) will output 
   ['Kala', 'Bala','Mala', 'Sheela']
&lt;/pre&gt;

=== Extend the list by adding elements of other list at end using extend()===
&lt;pre&gt;
ages = [11,23,12,23,45]
ages.extend([57,58])
print(ages)
&lt;/pre&gt;

&lt;pre&gt;
#Output: [11, 23, 12, 23, 45, 57, 58]
&lt;/pre&gt;

==== Difference between ''append and extend'' ====
Difference between append and extend can be easily understood, by the following example.

&lt;pre&gt;
appendlist = [11,23,12,23,45]
appendlist.append([57,58])

extendlist= [11,23,12,23,45]
extendlist.extend([57,58])
&lt;/pre&gt;

&lt;pre&gt;
'''Output:
[11, 23, 12, 23, 45, [57, 58]]
[11, 23, 12, 23, 45, 57, 58]'''
&lt;/pre&gt;

[[#TOP]]

==Basic Operations on List==
===Frequency of Occurrence===
list.count(object) will return the number of times the object occur in the list.
  '''Example'''
    ages = [11,23,12,23,45,43,22,24,23]
    ages.count(23) will return
    3
    ages.count(100) will return
    0

===Length of the List===
''len(list)'' will return the length of the list ie. the number of objects in the list.
  '''Example'''
&lt;pre&gt;
    ages = [11,23,12,23,45,43,22,24,23]
    len(ages) # Output: 9
&lt;/pre&gt;

To print the objects in the list either use ''for item in list'' or ''for index in range(len(list))''
&lt;pre&gt;
    for item in ages:       
        print (item)  
        (OR)
    for index in range(len(ages)) :
        print (ages[index])
&lt;/pre&gt;

===Sort the List===
''list.sort()'' will sort the list in ascending order
  '''Example'''
    ages = [11,23,12,23,45,43,22,24,23]
    ages.sort() 
    print (ages) 
    [11, 12, 22, 23, 23, 23, 24, 43, 45]

[[#Top]]

===Sort the List using sorted() function===
''sorted(list1)'' will sort the list and return a new list, it doesn't modify the original list
&lt;br&gt;'''Example: Sort in ascending order'''
&lt;pre&gt;
ages = [11,23,12,23,45,43,22,24,23]
newList=sorted(ages)
print(newList)

#Output: [11, 12, 22, 23, 23, 23, 24, 43, 45]
&lt;/pre&gt;

&lt;br&gt;'''Example: Sort in descending order'''
&lt;pre&gt;
ages = [11,23,12,23,45,43,22,24,23]
newList=sorted(ages,reverse=True)
print(newList)

#Output: [45, 43, 24, 23, 23, 23, 22, 12, 11]
&lt;/pre&gt;

===Reverse the List===
''list.reverse()'' will reverse the original list
  '''Example'''
    ages = [11, 12, 22, 23, 23, 23, 24, 43, 45]
    ages.reverse()
    print (ages)
    [45, 43, 24, 23, 23, 23, 22, 12, 11]

Both ''sort()'' and ''reverse()'' list operation will work on numeric and alphanumeric data list.

A special use of the ''reverse()'' function is to descend a list that is sorted in ascending order.

  '''Example'''
&lt;pre&gt;
ages = [11, 12, 22, 23, 23, 23, 24, 43, 45]
ages.sort()
print(ages)
ages.reverse()
print(ages)
&lt;/pre&gt;

===Slicing===
Used to retrieve an object or objects in a range as a list  
  '''Example'''

Use ''list[index]'' to retrieve the object at the given index
&lt;pre&gt;
In [1]: student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
In [2]: student[3]     #Object at index 3.  Remember index starts at 0
Out[2]: 'Geetha'      
&lt;/pre&gt;

Use ''list[start_index : end_index + 1]'' to retrieve objects from the start_index to end_index 
&lt;pre&gt;
In [3]: student[2:4]     # Objects from index 2 to 3 as List. Note the [ and ]
Out[3]: ['Vijay', 'Geetha']   
&lt;/pre&gt;

Use ''list[:]'' to retrieve objects from the starting of the list to the end of the list. 
The default start value will be the starting index of the list (i.e. 0) and the default end value
will be the length of the list 
&lt;pre&gt;
In [4]: student[:]        # prints the entire list
Out[4]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma', 'Janani']
&lt;/pre&gt;
&lt;pre&gt;
In [5]: student[:5]       # prints the objects from the start of the list upto object at index 4
Out[5]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran']
&lt;/pre&gt;
&lt;pre&gt;
In [6]: student[2:]       # prints the objects from index 2 upto the end of the list
Out[6]: ['Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma', 'Janani']
&lt;/pre&gt;

Negative index too is available in Python. It starts from last element of the list. i.e.
&lt;pre&gt;
In [7]:student[-1]        #prints last index of list
Out[7]: 'Janani'
&lt;/pre&gt;
&lt;pre&gt;
In [8]:student[-1:-8]     #prints empty list
Out[8]: []
&lt;/pre&gt;
&lt;pre&gt;
In [9]:student[-8:-1]     #prints -8th index to -1st index elements
Out[9]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma']
&lt;/pre&gt;

[[#Top]]

===Removing Item from list ===
----

Is used to remove a specific item from the list.

'''Example:'''
 
Use ''list.remove(entry/value)''  Or   ''del list[index]''    Or ''list.pop(index)''
&lt;pre&gt;
student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
student.remove(&quot;Arun&quot;)   #This will delete item &quot;Arun&quot;
         Or    
del student[0]           # This will delete item at index 0
         Or
student.pop(0)         # This will delete and return item at index 0
print(student)    
Output: &quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
&lt;/pre&gt;

[[#TOP]]

===Delete list ===
----
Used to delete complete list

'''Example'''

Use del &lt;list name&gt;
&lt;pre&gt;
student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
del student&lt;/pre&gt;

===Concatenation of two lists===
----
''+'' is the concatenation operator which is used concatenate two lists. 
&lt;pre&gt;
ages1 = [11,23,12,23,45]
ages2 = [25, 24, 43, 47]
age=ages1+ages2
print(age)
#Output: [11, 23, 12, 23, 45, 25, 24, 43, 47]
&lt;/pre&gt;

===Repeatation of a list ===
----
''*'' is the operator to repeat a particular list.
&lt;pre&gt;
ages1 = [11,23,12,23,45]
age=ages1*5 #ages1 list is repeated 5 times and stroed in ''age'' list
print(age)

#Output: [11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45]
&lt;/pre&gt;

=== all and any for List===
all() and any() are special functions to check whether all elements in iterable is ''True'' or any element is ''True''
&lt;ol&gt;
&lt;li&gt;If all elements in a list are ''True'', '''all()''' will return ''True''&lt;/li&gt;
&lt;li&gt;If iterable is ''empty'', '''all()''' will return ''True''&lt;/li&gt;
&lt;li&gt;If iterable contains at least one ''True'', '''any()''' will return ''True''&lt;/li&gt;
&lt;li&gt;If iterable is ''empty'', '''any()''' will return ''False''&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;
lsit=[True, True, True, True]
print(all(lsit))#Output: True
print(any(lsit))#Output: True

lsit1=[True, False, True, True]
print(all(lsit1))#Output: False
print(any(lsit1))#Output: True

lsit2=[False,False,False]
print(all(lsit2))#Output: False
print(any(lsit2))#Output: False

lsit3=[]
print(all(lsit3))#Output: True
print(any(lsit3))#Output: False
&lt;/pre&gt;

==Conditional Statements==
&lt;pre&gt;Conditionals are used to check the condition and change the flow of the program 
accordingly. They are realized in programming languages through if statement. The 
syntax is as follows :
&lt;pre&gt;
         if condition : 
            statement
&lt;/pre&gt;
    '''Note:''' Do not forget indentation (inserting space/tab) in the line after the
 if condition.
    
    In case you want to execute a set of statements when a condition is true and another

set of statement when the condition is false.
&lt;pre&gt;
         if condition : 
            statement 1
         else :
            statement 2
&lt;/pre&gt;

&lt;pre&gt;    
    Multiple if-else statements can be written as follows:
         if condition_1 : 
            statement 1
         elif condition_2 : # 'elif' is short for 'else if'
            statement 2
         elif condition_3 :
            statement 3
        .
        .
         else :
            final statement
&lt;/pre&gt;

[[#TOP]]

=Loops and Conditionals : Fizzbuzz=
====Loops====
Loops are used to execute a set of repetitive statements. They are realised
through 'while' and 'for' loops in programming languages. The syntax of 'for' loop is 
as follows :
&lt;pre&gt;
for LOOPVARIABLE in SEQUENCE: 
            STATEMENTS&lt;/pre&gt;

    '''e.g.''' to print all the data from a list we can write:
&lt;pre&gt;
for item in list_name:
      print(item)&lt;/pre&gt;
    OR
&lt;pre&gt;
for index in range(len(list_name)):
      print(list_name[index])
 &lt;/pre&gt;   
    The syntax for while loop is as follows :
&lt;pre&gt;    
while BOOLEANEXPRESSION: 
     STATEMENTS
     INCREMENT/DECREMENT
&lt;/pre&gt;    
    '''e.g.''' if we want to print all numbers from 1 to 10
&lt;pre&gt;
i=1
while i&lt;=10 :
    print(i,&quot; &quot;)
    i=i+1
    &lt;/pre&gt;
 
'while' loop has indefinite iteration (run-time unknown). So, there must be loop,  break statement in it.
 Whereas 'for' loop is definite in nature (i.e. known or predictable span).&lt;br&gt;

&lt;b&gt;NOTE: Python doesn't have anything like do-while loop.&lt;/b&gt;

[[#TOP]]

==Implementation==
Here, we try to demonstrate the concept of loops and conditionals through a game called Fizzbuzz. The rules are as follows :&lt;br/&gt;
[[File:fizzBuzz.gif]]

• if input number is a multiple of ’3’ print ”Fizz”
&lt;br/&gt;
• if input number is a multiple of ’5’ print ”Buzz”
&lt;br/&gt;
• if input number is a multiple of both '3' and ’5’ print ”FizzBuzz”
&lt;br/&gt;
The pseudo code is as follows :
&lt;pre&gt;
   If input no % 3 == 0 and  input no % 5 == 0 : 
       print ”Fizzbuzz”
   else if input no % 3 == 0 : 
       print ”Fizz”
   else if input no % 5 == 0 : 
       print ”Buzz”
   else :
       print the input no
&lt;/pre&gt;
 &lt;p style=&quot;text-align:justify&quot;&gt;
The order of statements execution matters to get the desired output. The highest priority condition should be first followed by other. In fizzbuzz programming, first checking should be done for both divisibility of 3 and 5. If condition not satisfied only then it should check individually for 3 or 5. So carefully choosing the order is crucial for better programming.
Note: There is some effect of present condition statements chosen on next conditions statements. That is why in first attempt fizzbuzz programming got struck.&lt;/p&gt;

Example: 
&lt;pre&gt;
#Code to achieve the above requirement in python3.
i = int(input(&quot;Enter the number&quot;)) 
if i%3 == 0 and i%5 == 0: print(i,&quot;FizzBuzz&quot;)  
elif i%5 == 0: print(i,&quot;Buzz&quot;)
elif i%3 == 0: print(i,&quot;Fizz&quot;)
else: print(i)
&lt;/pre&gt;
Lets put the same into a loop for a range given by the user.
&lt;pre&gt;
def fizzbuzzgame(start,stop):
    for i in range(start,stop+1):
        if i%3 == 0 and i%5 == 0:
            print(i,&quot;FizzBuzz&quot;)
        elif i%5 == 0:
            print(i,&quot;Buzz&quot;)
        elif i%3 == 0:
            print(i,&quot;Fizz&quot;)
        else: print(i)

fizzbuzzgame(50,100)
&lt;/pre&gt;
&lt;pre&gt;
#Output:
1235
Buzz
======================================
555
Fizzbuzz
======================================
1235
Buzz
======================================
999
Fizz
&lt;/pre&gt;

=== Fizz Buzz game in Interactive mode with Score ===
'''By Ms. Ami Tusharkant Choksi'''
&lt;pre&gt;
def fizzbuzzgame(i):
        if i%3 == 0 and i%5 == 0:
            print(i,&quot;FizzBuzz&quot;)
            return(&quot;fzbz&quot;)
        elif i%5 == 0:
            print(i,&quot;Buzz&quot;)
            return(&quot;bz&quot;)
        elif i%3 == 0:
            print(i,&quot;Fizz&quot;)
            return(&quot;fz&quot;)
        else:
            print(i)
            return(&quot;no&quot;)

ch = 'y'
fizzbuzz=0
fizz=0
buzz=0
nothing=0
print(&quot;&quot;&quot;

 /$$$$$$$$/$$                  /$$$$$$$                            
| $$_____|__/                 | $$__  $$                           
| $$      /$$/$$$$$$$$/$$$$$$$| $$  \ $$/$$   /$$/$$$$$$$$/$$$$$$$$
| $$$$$  | $|____ /$$|____ /$$| $$$$$$$| $$  | $|____ /$$|____ /$$/
| $$__/  | $$  /$$$$/   /$$$$/| $$__  $| $$  | $$  /$$$$/   /$$$$/ 
| $$     | $$ /$$__/   /$$__/ | $$  \ $| $$  | $$ /$$__/   /$$__/  
| $$     | $$/$$$$$$$$/$$$$$$$| $$$$$$$|  $$$$$$//$$$$$$$$/$$$$$$$$
|__/     |__|________|________|_______/ \______/|________|________/
                                                                  
&quot;&quot;&quot;)   
print('''

  /$$$$$$                                
 /$$__  $$                               
| $$  \__/ /$$$$$$ /$$$$$$/$$$$  /$$$$$$ 
| $$ /$$$$|____  $| $$_  $$_  $$/$$__  $$
| $$|_  $$ /$$$$$$| $$ \ $$ \ $| $$$$$$$$
| $$  \ $$/$$__  $| $$ | $$ | $| $$_____/
|  $$$$$$|  $$$$$$| $$ | $$ | $|  $$$$$$$
 \______/ \_______|__/ |__/ |__/\_______/
                                     
''')

while(ch == 'y'):
    n=int(input(&quot;Enter a Number : &quot;))
    winLoose=fizzbuzzgame(n)
    if(winLoose == &quot;fz&quot;):
        fizz+=1
    elif(winLoose == &quot;bz&quot;):
        buzz+=1
    elif(winLoose == &quot;fzbz&quot;):
        fizzbuzz+=1
    ch=input(&quot;Do you want to continue playing the game : (y/n)&quot;)
    if(ch=='n'):
        print('Congratulations, your score is\n FizzBuzz:%d\nFizz:%d\nBuzz:%d' %
(fizzbuzz,fizz,buzz))
    
'''Sample Output:

 /$$$$$$$$/$$                  /$$$$$$$                            
| $$_____|__/                 | $$__  $$                           
| $$      /$$/$$$$$$$$/$$$$$$$| $$  \ $$/$$   /$$/$$$$$$$$/$$$$$$$$
| $$$$$  | $|____ /$$|____ /$$| $$$$$$$| $$  | $|____ /$$|____ /$$/
| $$__/  | $$  /$$$$/   /$$$$/| $$__  $| $$  | $$  /$$$$/   /$$$$/ 
| $$     | $$ /$$__/   /$$__/ | $$  \ $| $$  | $$ /$$__/   /$$__/  
| $$     | $$/$$$$$$$$/$$$$$$$| $$$$$$$|  $$$$$$//$$$$$$$$/$$$$$$$$
|__/     |__|________|________|_______/ \______/|________|________/
                                                                                                                                   

  /$$$$$$                                
 /$$__  $$                               
| $$  \__/ /$$$$$$ /$$$$$$/$$$$  /$$$$$$ 
| $$ /$$$$|____  $| $$_  $$_  $$/$$__  $$
| $$|_  $$ /$$$$$$| $$ \ $$ \ $| $$$$$$$$
| $$  \ $$/$$__  $| $$ | $$ | $| $$_____/
|  $$$$$$|  $$$$$$| $$ | $$ | $|  $$$$$$$
 \______/ \_______|__/ |__/ |__/\_______/
                                         

Enter a Number : 666
666 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 777
777 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 555
555 FizzBuzz
Do you want to continue playing the game : (y/n)y
Enter a Number : 1
1
Do you want to continue playing the game : (y/n)y
Enter a Number : 789
789 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 25
25 Buzz
Do you want to continue playing the game : (y/n)n
Congratulations, your score is

FizzBuzz:1
Fizz:3
Buzz:1

&lt;/pre&gt;

=Crowd Computing: Just Estimate=
==Wisdom of Crowds==
 &lt;p style=&quot;text-align:justify&quot;&gt;
The concept of ’Wisdom of Crowds’ was proposed by Francis Galton. A weight-judging competition was carried on at the annual show of the West of England Fat Stock and Poultry Exhibition recently held at Plymouth, A fat ox having been selected, competitors bought stamped and numbered cards, each, on which to inscribe their respective names, addresses, and estimates of what the ox would weigh after it had been slaughtered. Those who guessed most successfully received prizes. About 8oo tickets were issued to the par- ticipants. The middlemost estimate of all the estimates recorded was 1207 lbs and the actual weight of the ox was 1198 lbs.&lt;/p&gt;

==Our Experiment==
 &lt;p style=&quot;text-align:justify&quot;&gt;
The crowd had to guess the number of candies/gems in a jar. Around 75 people participated in the experiment. The actual number of gems in the jar were 375. The median of all estimates came out to be 300 and the mean of all the estimates came out to be around 396. Median underestimated and mean overestimated the actual value. So according to recent studies, Trimmed mean must be used as an aggregate measure to estimate where Wisdom of Crowds is involved.
&lt;/p&gt;
[[File:Gemsjar.jpg|center|200px|caption]]

===Trimmed Mean===
 &lt;p style=&quot;text-align:justify&quot;&gt;
In these kinds of experiments, 10% trimmed mean is usually followed. For calculating 10% trimmed mean, remove 10% smallest and 10% largest values from the sample. Calculate the mean of the sample obtained. In the above experiment, the trimmed mean came out to be around 351 which is very close to the actual value.&lt;/p&gt;

==Implementation==
Here, we try to demonstrate the concept of trimmed mean through crowd computing.
&lt;ol&gt;
&lt;li&gt; Input a list of estimates done by the crowd .&lt;/li&gt;
&lt;li&gt; Sort the list.&lt;/li&gt;
&lt;li&gt; Remove the 10% smallest values.&lt;/li&gt;
&lt;li&gt; Remove the 10% largest values.
&lt;li&gt; Calculate the mean of the new list obtained .&lt;/li&gt;&lt;/ol&gt;&lt;hr&gt;

==Data of Experiment==       
    Estimates =[1000,1010,1786,2000,1500,1500,100,120,150,150,150,170,175,180,197,200,200,200,200,200,200,220,220,220,220,234,250,250,250,250,250,250,250,250,250,263,270,275,275,286,300,
                300,300,300,300,300,300,300,320,350,350,350,400, 400,400,400,400,450,467,500,500,500,500,500,500,500,550,550,600,600,600,650,700,700,720]

    '''CODE:'''
&lt;pre&gt;
Estimates = [1000,1010,1786,2000,1500,1500,100,120,150,150,150,170,175,180,197,200,200,200,200,200,200,220,220,220,220,234,250,250,250,250,250,250,250,250,250,263,270,275,275,286,300,                300,300,300,300,300,300,300,320,350,350,350,400,400,400,400,400,450,467,500,500,500,500,500,500,500,550,550,600,600,600,650,700,700,720]
Estimates.sort()
offset = int(0.10*len(Estimates))
for i in range(offset):
       del Estimates[0]
       del Estimates[-1]
Sum = 0    
for i in range(len(Estimates)):
       Sum += Estimates[i]
Mean_Value = Sum/len(Estimates)
print(&quot;Mean : &quot;, int(Mean_Value))
#Output:
Mean :  351
&lt;/pre&gt;
&lt;hr&gt;
==Trimmed Mean for the above example== 
&lt;h3&gt;Using scipy library&lt;/h3&gt;
&lt;pre&gt;
#import scipy to use the method of trim_mean
from scipy import stats
trimMean = stats.trim_mean(Estimates, 0.1) # Trim 10% at both ends
print(&quot;Trimmed Mean : &quot;,trimMean)
#Output:
Trimmed Mean :  335.1020408163265
&lt;/pre&gt;

&lt;h3&gt;Without using scipy library&lt;/h3&gt;
&lt;pre&gt;
#Trimmed mean with 10%
p=10/100
#sorted data
data=[2, 4, 6, 7, 11, 21, 81, 90, 105, 121]
n = len(data)
#Remove elements from both end
rem=int(n*p)
newData = data[rem:-rem]
mean = 0
for i in newData:
    mean += i
mean = int(mean/len(newData))
print(&quot;Trimmed mean : &quot;,mean)
#Output: Trimmed mean :  40
&lt;/pre&gt;
[[#Top]]

=Jumbled_Words Permutations: Jumbled Words=
==What are Permutations ?==
A permutation also called ordering of selected number of elements from a list denoted by nPr here we are choosing all elements of a list and so n=r&lt;br&gt;
nPr=n!/(n-r)!&lt;br&gt; as n=r
nPn=n!&lt;br&gt; which gives all possible arrangement of elements present in a list.

 For example, permutations of list [1,2,3] are [1,2,3], [1,3,2], [2,1,3], [2,3,1], 
[3,1,2], and [3,2,1]. 
The number of permutations of a list of elements nPn is given by n!. For example, there are 2! = 2 x 1 = 2 permutations of [1,2], namely [1,2] and [2,1], and 3! = 3 x 2 x 1 = 6 permutations of [1,2,3], as mentioned above.&lt;br/&gt;
[[File:Permutations.jpg]]

==Implementation==
 &lt;p style=&quot;text-align:justify&quot;&gt;
Here, we try to demonstrate the concept of permutations through jumbled words. It is a two player game in which one person presents the other person a different permutation of the word in his mind. The other person has to guess the right word. If he guesses, the he wins otherwise he loses.&lt;/p&gt;
 Input an list of words.
 Randomly pick a word from the list of words .
 Shuffle this word and present it to the other player.
 if word guesses by the player is same as the one picked from list of w
     player wins
 else
     player loses

ALTERNATE CODE TO GENERATE THIS GAME:
&lt;pre&gt;
import random
p1=input(&quot;enter player 1 name:&quot;)
p2=input(&quot;enter player 2 name:&quot;)
l=[&quot;rainbow&quot;,&quot;computer&quot;,&quot;robot&quot;,&quot;butter&quot;,&quot;vegetable&quot;,&quot;science&quot;,&quot;correct&quot;]
c1=c2=a1=a2=f1=f2=0
k=1
i=3
def play():
    n=random.choice(l)        ##n=chooses a word from list l
    l1=[]
    for j in n:
       l1.append(j)      ##creates a list for word in n
    for t in range(len(l1)):
       p=random.choice(l1)     ##this randomly displays letters in the list
       print(p)
       l1.remove(p)          ##to avoid the repetition of a letter
    s=input(&quot;enter the word:&quot;)
    if(s==n):
        print(&quot;correct&quot;)
        return 1
    else:
        print(&quot;not correct&quot;)
        print(&quot;answer is&quot;,n)
        return 0
def stat():
     print(&quot;player 1:&quot;)
     print(&quot;score:&quot;,c1)
     print(&quot;answered:&quot;,a1)
     print(&quot;failed:&quot;,f1)
     print(&quot;.............&quot;)
     print(&quot;player 2:&quot;)
     print(&quot;score:&quot;,c2)
     print(&quot;answered:&quot;,a2)
     print(&quot;failed&quot;,f2)
     if(c1&gt;c2):
         print(p1,&quot; won over &quot;,p2)
     elif(c1==c2):
         print(&quot;draw game&quot;)
     else:
         print(p2,&quot; won over &quot;,p1) 
while(i!=4):
      if(i==3):
         if(k==1):
             print(&quot;player 1 turn&quot;)
             print(&quot;your jumbled word is:&quot;)
             k=k+1
             m=play()
             if(m==1):      ##if guessed answer is correct,then score and no.of answered count will be increased
                c1+=1
                a1+=1
             else:
                f1+=1       ##else count of no.of failed to answered will be incremented
         else:
             print(&quot;player 2 turn&quot;)
             print(&quot;your jumbled word is:&quot;)
             k=k-1
             m=play()
             if(m==1):
                c2=c2+1
                a2=a2+1
             else:
                f2=f2+1
       if(i==2):
             print(&quot;present status&quot;)
             stat()
       i=int(input(&quot;enter your choice  1.stop 2.status 3.continue&quot;))
       if(i==1):
             stat()
             i=i+3
&lt;/pre&gt;
&lt;hr&gt;
=== JumbledWord Simple Logic, In Short ===
[[File:jumbledWord.gif]]
---
&lt;hr&gt;
'''Logic to create a Jumbled Word'''
&lt;hr&gt;
&lt;pre&gt;
#Get Jumbled Word and print it Horizontally
import random

def getJumbledWord(b):
    jumble=''
    l1 = [ b[i] for i in range(0, len(b)) ]
    for t in range(len(l1)):
       p=random.choice(l1)  #this randomly gets letters from the list      
       jumble=jumble+p       
       l1.remove(p)
    return jumble

b=input(&quot;Enter a word to make it jumbled : &quot;)
print(&quot;Jumbled Word : &quot;, getJumbledWord(b))
&lt;/pre&gt;
&lt;pre&gt;
Output:
Enter a word to make it jumbled : live and let live others
Jumbled Word :  vel  toldeisrte aihv len
==========================================
Enter a word to make it jumbled : junkfood
Jumbled Word :  nfukdooj
&lt;/pre&gt;
&lt;hr&gt;
'''Another Logic to create a Jumbled Word'''
&lt;hr&gt;
&lt;pre&gt;
import random
b=input(&quot;Enter a word to make it jumbled : &quot;)

def getJumbledWord1(b):
    l1 = [ b[i] for i in range(0, len(b)) ]
    random.shuffle(l1)
    str1 = ''.join(l1)
    return str1

print(&quot;Jumbled Word : &quot;, getJumbledWord1(b))
&lt;/pre&gt;

====Sample Output:====
&lt;pre&gt;
---- Output1 
Enter a word to make it jumbled : butter
Jumbled Word :  tbture

---- Output2 
Enter a word to make it jumbled : petriotism
Jumbled Word :  pittrosime
&lt;/pre&gt;

=Theory of Evolution=

== What is Evolution ? ==
Evolution is the change in heritable characteristics over successive generations. The theory of evolution explains that DNA, which acts as a carrier of genetic information from one generation to other, tends to change or mutate occasionally. These changes are reflected in next generations to come. This is how life has evolved on earth from bacteria to human beings.&lt;br&gt;
[[File:Evolution.png|500px]]

== Implementation ==
 &lt;p style=&quot;text-align:justify&quot;&gt;
An array representing DNA is stored in a file. As genes are forms of DNA, they contain information to be transferred to forthcoming generations. Assume that information is in the form of bits (in the form of 0s and 1s). A number is picked randomly from 1 to the size of the array. A new parameter has been introduced which decides whether mutation would occur or not. If the value of this new parameter is 1 (It is picked randomly from 1 to 100), then only change is reflected down the generations, otherwise it is not. The pseudo code is as follows :
&lt;/p&gt;
Input an array containing genetic information .
Randomly generate a number (say m) from 1 to length of the array. Randomly generate other number (say p) from 1 to 100.

&lt;pre&gt; 
    if p is equal to 1 then 
        if m is 1 then
          set it to 0
        else
          set it to 1
&lt;/pre&gt;
[[#TOP]]</text>
      <sha1>516oe1je4eqfi8aynvwuu5i0chxb8sf</sha1>
    </revision>
    <revision>
      <id>3752</id>
      <parentid>3751</parentid>
      <timestamp>2018-09-29T04:08:08Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* Removing Item from list */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="30733">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_3 Contributors of this page]
*Week 3 Playlist: https://www.youtube.com/playlist?list=PLc_j0TNIaWxOVx_z9jAM2UB3RqYNXaoEo
=List=
List is a flexible data structure used for storing a group of data separated by comma. The elements in a list need not be of the same data type.

'''Example:'''
       List_1 = [ 1, 2,3] or 
       List_1 = [&quot;coffee&quot;, &quot;Tea&quot;, &quot;Milk&quot;] or
       List_1 = [1,&quot;coffee&quot;, &quot;Tea&quot;, 3, &quot;5&quot;]

==List Creation==
a) A list can be created by simply putting values (separated by comma) between square
 brackets as given below,
&lt;pre&gt;List_1 = [1,&quot;coffee&quot;, &quot;Tea&quot;, 3, &quot;5&quot;] #this creates a list by name List_1 containing
 following items
&lt;/pre&gt;


Or,
(b)A List can be created from scratch and elements can be added 
&lt;pre&gt;
        List_2 = [ ]
        List_2.append(&quot;Kala&quot;)
        List_2.append(&quot;Mala&quot;)
&lt;/pre&gt;
Here we use &quot;append&quot;, which is a function in python that enable us to append or attach an element to a list .
&lt;pre&gt;Thus List_2 will now hold [&quot;Kala&quot;,&quot;Mala&quot;]&lt;/pre&gt;

[[#Top]]

==Operations and Methods to work with List==
&lt;pre&gt;
a = [25,30,50,90,12,13]
b = [100,300,500,200,250]
&lt;/pre&gt;
&lt;hr&gt;
&lt;table border=2&gt;
  &lt;tr&gt;
    &lt;th&gt;&lt;b&gt;Method/&lt;br&gt;Operator&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Function&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Syntax&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Output&lt;/b&gt;&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;len()&lt;/td&gt;
    &lt;td&gt;Find length of a list&lt;/td&gt;
    &lt;td&gt;len(a)&lt;/td&gt;
    &lt;td&gt;6&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;max()&lt;/td&gt;
    &lt;td&gt;Find maximum element from the list&lt;/td&gt;
    &lt;td&gt;max(a)&lt;/td&gt;
    &lt;td&gt;90&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;min()&lt;/td&gt;
    &lt;td&gt;Find minimum element from the list&lt;/td&gt;
    &lt;td&gt;min(a)&lt;/td&gt;
    &lt;td&gt;12&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sum()&lt;/td&gt;
    &lt;td&gt;Returns sum of all elements of the list&lt;/td&gt;
    &lt;td&gt;sum(a)&lt;/td&gt;
    &lt;td&gt;220&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;reverse()&lt;/td&gt;
    &lt;td&gt;Reverses the original list&lt;/td&gt;
    &lt;td&gt;a.reverse()&lt;/td&gt;
    &lt;td&gt;[13, 12, 90, 50, 30, 25]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sort()&lt;/td&gt;
    &lt;td&gt;Sorts the original list in ascending order&lt;/td&gt;
    &lt;td&gt;a.sort()&lt;/td&gt;
    &lt;td&gt;[12, 13, 25, 30, 50, 90]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sorted()&lt;/td&gt;
    &lt;td&gt;Returns the new sorted list &lt;/td&gt;
    &lt;td&gt;sorted(a)&lt;/td&gt;
    &lt;td&gt;[12, 13, 25, 30, 50, 90]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;insert()&lt;/td&gt;
    &lt;td&gt;Insert at a particular index in the list, and shifts remaining elements&lt;/td&gt;
    &lt;td&gt;a.insert(3,3)&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 3, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;append()&lt;/td&gt;
    &lt;td&gt;Adds elements/object to the end of the list&lt;/td&gt;
    &lt;td&gt;a.append(5)&lt;br&gt;a.append([10,20])&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 5]&lt;br&gt;[25, 30, 50, 90, 12, 13, [10, 20]]&lt;br&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;extend()&lt;/td&gt;
    &lt;td&gt;Adds object to the end of the list as elements not as object&lt;/td&gt;
    &lt;td&gt;a.extend([10,20])&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 10, 20]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;*&amp;nbsp;&amp;nbsp;Repeatation&lt;br&gt;operator&lt;/td&gt;
    &lt;td&gt;Repeat the list for n times and returns a new list&lt;/td&gt;
    &lt;td&gt;a*2&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 25, 30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;+ Concatenation&lt;br&gt;operator&lt;/td&gt;
    &lt;td&gt;Concatenates two lists, and returns a new list&lt;/td&gt;
    &lt;td&gt;a+b&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 100, 300, 500, 200, 250]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;index()&lt;/td&gt;
    &lt;td&gt;Finds index of a particular element in the list or not&lt;/td&gt;
    &lt;td&gt;a.index(25)&lt;br&gt;a.index(0)&lt;br&gt;&lt;/td&gt;
    &lt;td&gt;0&lt;br&gt;&lt;br&gt;ValueError: 0 is not in list&lt;br&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;in operator&lt;/td&gt;
    &lt;td&gt;Finds whether a particular element is in the list or not, returns boolean&lt;/td&gt;
    &lt;td&gt;25 in a&lt;/td&gt;
    &lt;td&gt;True&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;not in operator&lt;/td&gt;
    &lt;td&gt;Checks if element is not available in list, returns boolean&lt;/td&gt;
    &lt;td&gt;25 not in a&lt;/td&gt;
    &lt;td&gt;False&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;count()&lt;/td&gt;
    &lt;td&gt;Counts the number of occurence of an element in the list&lt;/td&gt;
    &lt;td&gt;a.count(25)&lt;/td&gt;
    &lt;td&gt;1&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;remove()&lt;/td&gt;
    &lt;td&gt;Removes an element from the list&lt;/td&gt;
    &lt;td&gt;a.remove(25)&lt;/td&gt;
    &lt;td&gt; [30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;pop()&lt;/td&gt;
    &lt;td&gt;Delete and return item at index 0&lt;/td&gt;
    &lt;td&gt;a.pop(0)&lt;/td&gt;
    &lt;td&gt;25 , a will be [30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;del&lt;/td&gt;
    &lt;td&gt;Deletes item at a particular index from the list&lt;/td&gt;
    &lt;td&gt;del a[0]&lt;/td&gt;
    &lt;td&gt;[30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;all()&lt;/td&gt;
&lt;td&gt;Returns True, if all items in list are True or it is an empty list&lt;/td&gt;
&lt;td&gt;all([True, True, True])
all([])
&lt;/td&gt;
&lt;td&gt;True&lt;br&gt;
True&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;any()&lt;/td&gt;
&lt;td&gt;Returns True, if any item in list is True else return False&lt;/td&gt;
&lt;td&gt;any([True, True, True])&lt;br&gt;
any([True, False, True])&lt;br&gt;
any([])&lt;/td&gt;
&lt;td&gt;True&lt;br&gt;False&lt;br&gt;False&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;

==Printing the List==
=== Print whole list ===
A list can be printed simply or using a ''for / while'' loop 

 print(List_2)     # To print the entire list
This code will print      
 ['Kala','Mala']     

===Print element at a particular index===
&lt;pre&gt;
Using index position
    List_2[0]     # prints 'Kala' ,i.e,the value at index position 0.
    List_2[1]     # prints 'Mala'.
&lt;/pre&gt;
=== Without using index position ===
&lt;pre&gt;
for item in List_2:   # here item is a variable used to access elements in list.
       print(item)
   This code snippet prints 
    Kala
    Mala
&lt;/pre&gt;
[[#TOP]]

==Search for a particular element in list==
Elements in a list can be searched by one of the two ways:
=== using index() function===
&lt;pre&gt;
ages1 = [11,23,12,23,45]

#if element is available in the list, index() returns the index value on which, the element is
 present.
print(ages1.index(45))#Output: 4

#if element is not available in the list, index() returns ''ValueError''
print(ages1.index(0))#Output: ValueError:
&lt;/pre&gt;

In programming, if such error occurs, program gets terminated. It can be solved using exception handling.
 
e.g.
&lt;pre&gt;
ages1 = [11,23,12,23,45]

try:
    print(ages1.index(0))
except ValueError:
    print(&quot;Exception has occured&quot;)    
    print(&quot;Element is not found in the list&quot;)

&lt;/pre&gt;
&lt;pre&gt;
'''Output: 
Exception has occured
Element is not found in the list
'''&lt;/pre&gt;
[[#Top]]

=== using 'in' operator===
''in'' operator is used to check whether a particular element is available in the list or not.e.g.

&lt;pre&gt;
ages1 = [11,23,12,23,45]
no=11

if no in ages1:
    print(&quot;no is there in the list&quot;)
else:    
    print(&quot;no is NOT there in the list&quot;)
&lt;/pre&gt;
&lt;pre&gt;
#Output: no is there in the list
&lt;/pre&gt;


'''Number is not there in the list'''
&lt;pre&gt;
ages1 = [11,23,12,23,45]
no=15

if no in ages1:
    print(&quot;no is there in the list&quot;)
else:    
    print(&quot;no is NOT there in the list&quot;)
&lt;/pre&gt;
&lt;pre&gt;
Output: no is NOT there in the list
&lt;/pre&gt;
[[#TOP]]

==Updating the List==
The lists can be updated using ''append'' or ''insert'' function.  Append adds the element to the end of the list and Insert adds the element in the specified position.
&lt;pre&gt;
   # add the element 'Sheela' to the end of the list.
   List_2.append(&quot;Sheela&quot;)    
   print (List_2) will output 
   ['Kala', 'Mala', 'Sheela']
&lt;/pre&gt;
   &lt;pre&gt;
# add the element &quot;Bala&quot; in the list at the index 1.
   List_2.insert(1,&quot;Bala&quot;)    
   print (List_2) will output 
   ['Kala', 'Bala','Mala', 'Sheela']
&lt;/pre&gt;

=== Extend the list by adding elements of other list at end using extend()===
&lt;pre&gt;
ages = [11,23,12,23,45]
ages.extend([57,58])
print(ages)
&lt;/pre&gt;

&lt;pre&gt;
#Output: [11, 23, 12, 23, 45, 57, 58]
&lt;/pre&gt;

==== Difference between ''append and extend'' ====
Difference between append and extend can be easily understood, by the following example.

&lt;pre&gt;
appendlist = [11,23,12,23,45]
appendlist.append([57,58])

extendlist= [11,23,12,23,45]
extendlist.extend([57,58])
&lt;/pre&gt;

&lt;pre&gt;
'''Output:
[11, 23, 12, 23, 45, [57, 58]]
[11, 23, 12, 23, 45, 57, 58]'''
&lt;/pre&gt;

[[#TOP]]

==Basic Operations on List==
===Frequency of Occurrence===
list.count(object) will return the number of times the object occur in the list.
  '''Example'''
    ages = [11,23,12,23,45,43,22,24,23]
    ages.count(23) will return
    3
    ages.count(100) will return
    0

===Length of the List===
''len(list)'' will return the length of the list ie. the number of objects in the list.
  '''Example'''
&lt;pre&gt;
    ages = [11,23,12,23,45,43,22,24,23]
    len(ages) # Output: 9
&lt;/pre&gt;

To print the objects in the list either use ''for item in list'' or ''for index in range(len(list))''
&lt;pre&gt;
    for item in ages:       
        print (item)  
        (OR)
    for index in range(len(ages)) :
        print (ages[index])
&lt;/pre&gt;

===Sort the List===
''list.sort()'' will sort the list in ascending order
  '''Example'''
    ages = [11,23,12,23,45,43,22,24,23]
    ages.sort() 
    print (ages) 
    [11, 12, 22, 23, 23, 23, 24, 43, 45]

[[#Top]]

===Sort the List using sorted() function===
''sorted(list1)'' will sort the list and return a new list, it doesn't modify the original list
&lt;br&gt;'''Example: Sort in ascending order'''
&lt;pre&gt;
ages = [11,23,12,23,45,43,22,24,23]
newList=sorted(ages)
print(newList)

#Output: [11, 12, 22, 23, 23, 23, 24, 43, 45]
&lt;/pre&gt;

&lt;br&gt;'''Example: Sort in descending order'''
&lt;pre&gt;
ages = [11,23,12,23,45,43,22,24,23]
newList=sorted(ages,reverse=True)
print(newList)

#Output: [45, 43, 24, 23, 23, 23, 22, 12, 11]
&lt;/pre&gt;

===Reverse the List===
''list.reverse()'' will reverse the original list
  '''Example'''
    ages = [11, 12, 22, 23, 23, 23, 24, 43, 45]
    ages.reverse()
    print (ages)
    [45, 43, 24, 23, 23, 23, 22, 12, 11]

Both ''sort()'' and ''reverse()'' list operation will work on numeric and alphanumeric data list.

A special use of the ''reverse()'' function is to descend a list that is sorted in ascending order.

  '''Example'''
&lt;pre&gt;
ages = [11, 12, 22, 23, 23, 23, 24, 43, 45]
ages.sort()
print(ages)
ages.reverse()
print(ages)
&lt;/pre&gt;

===Slicing===
Used to retrieve an object or objects in a range as a list  
  '''Example'''

Use ''list[index]'' to retrieve the object at the given index
&lt;pre&gt;
In [1]: student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
In [2]: student[3]     #Object at index 3.  Remember index starts at 0
Out[2]: 'Geetha'      
&lt;/pre&gt;

Use ''list[start_index : end_index + 1]'' to retrieve objects from the start_index to end_index 
&lt;pre&gt;
In [3]: student[2:4]     # Objects from index 2 to 3 as List. Note the [ and ]
Out[3]: ['Vijay', 'Geetha']   
&lt;/pre&gt;

Use ''list[:]'' to retrieve objects from the starting of the list to the end of the list. 
The default start value will be the starting index of the list (i.e. 0) and the default end value
will be the length of the list 
&lt;pre&gt;
In [4]: student[:]        # prints the entire list
Out[4]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma', 'Janani']
&lt;/pre&gt;
&lt;pre&gt;
In [5]: student[:5]       # prints the objects from the start of the list upto object at index 4
Out[5]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran']
&lt;/pre&gt;
&lt;pre&gt;
In [6]: student[2:]       # prints the objects from index 2 upto the end of the list
Out[6]: ['Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma', 'Janani']
&lt;/pre&gt;

Negative index too is available in Python. It starts from last element of the list. i.e.
&lt;pre&gt;
In [7]:student[-1]        #prints last index of list
Out[7]: 'Janani'
&lt;/pre&gt;
&lt;pre&gt;
In [8]:student[-1:-8]     #prints empty list
Out[8]: []
&lt;/pre&gt;
&lt;pre&gt;
In [9]:student[-8:-1]     #prints -8th index to -1st index elements
Out[9]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma']
&lt;/pre&gt;

[[#Top]]

===Removing Item from list ===
----

Is used to remove a specific item from the list.

'''Example:'''
 
Use list.remove(entry/value)  Or   del list[index]    Or list.pop(index)
&lt;pre&gt;
student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
student.remove(&quot;Arun&quot;)   #This will delete item &quot;Arun&quot;
         Or    
del student[0]           # This will delete item at index 0
         Or
student.pop(0)         # This will delete and return item at index 0
print(student)    
Output: &quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
&lt;/pre&gt;

[[#TOP]]

===Delete list ===
----
Used to delete complete list

'''Example'''

Use del &lt;list name&gt;
&lt;pre&gt;
student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
del student&lt;/pre&gt;

===Concatenation of two lists===
----
''+'' is the concatenation operator which is used concatenate two lists. 
&lt;pre&gt;
ages1 = [11,23,12,23,45]
ages2 = [25, 24, 43, 47]
age=ages1+ages2
print(age)
#Output: [11, 23, 12, 23, 45, 25, 24, 43, 47]
&lt;/pre&gt;

===Repeatation of a list ===
----
''*'' is the operator to repeat a particular list.
&lt;pre&gt;
ages1 = [11,23,12,23,45]
age=ages1*5 #ages1 list is repeated 5 times and stroed in ''age'' list
print(age)

#Output: [11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45]
&lt;/pre&gt;

=== all and any for List===
all() and any() are special functions to check whether all elements in iterable is ''True'' or any element is ''True''
&lt;ol&gt;
&lt;li&gt;If all elements in a list are ''True'', '''all()''' will return ''True''&lt;/li&gt;
&lt;li&gt;If iterable is ''empty'', '''all()''' will return ''True''&lt;/li&gt;
&lt;li&gt;If iterable contains at least one ''True'', '''any()''' will return ''True''&lt;/li&gt;
&lt;li&gt;If iterable is ''empty'', '''any()''' will return ''False''&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;
lsit=[True, True, True, True]
print(all(lsit))#Output: True
print(any(lsit))#Output: True

lsit1=[True, False, True, True]
print(all(lsit1))#Output: False
print(any(lsit1))#Output: True

lsit2=[False,False,False]
print(all(lsit2))#Output: False
print(any(lsit2))#Output: False

lsit3=[]
print(all(lsit3))#Output: True
print(any(lsit3))#Output: False
&lt;/pre&gt;

==Conditional Statements==
&lt;pre&gt;Conditionals are used to check the condition and change the flow of the program 
accordingly. They are realized in programming languages through if statement. The 
syntax is as follows :
&lt;pre&gt;
         if condition : 
            statement
&lt;/pre&gt;
    '''Note:''' Do not forget indentation (inserting space/tab) in the line after the
 if condition.
    
    In case you want to execute a set of statements when a condition is true and another

set of statement when the condition is false.
&lt;pre&gt;
         if condition : 
            statement 1
         else :
            statement 2
&lt;/pre&gt;

&lt;pre&gt;    
    Multiple if-else statements can be written as follows:
         if condition_1 : 
            statement 1
         elif condition_2 : # 'elif' is short for 'else if'
            statement 2
         elif condition_3 :
            statement 3
        .
        .
         else :
            final statement
&lt;/pre&gt;

[[#TOP]]

=Loops and Conditionals : Fizzbuzz=
====Loops====
Loops are used to execute a set of repetitive statements. They are realised
through 'while' and 'for' loops in programming languages. The syntax of 'for' loop is 
as follows :
&lt;pre&gt;
for LOOPVARIABLE in SEQUENCE: 
            STATEMENTS&lt;/pre&gt;

    '''e.g.''' to print all the data from a list we can write:
&lt;pre&gt;
for item in list_name:
      print(item)&lt;/pre&gt;
    OR
&lt;pre&gt;
for index in range(len(list_name)):
      print(list_name[index])
 &lt;/pre&gt;   
    The syntax for while loop is as follows :
&lt;pre&gt;    
while BOOLEANEXPRESSION: 
     STATEMENTS
     INCREMENT/DECREMENT
&lt;/pre&gt;    
    '''e.g.''' if we want to print all numbers from 1 to 10
&lt;pre&gt;
i=1
while i&lt;=10 :
    print(i,&quot; &quot;)
    i=i+1
    &lt;/pre&gt;
 
'while' loop has indefinite iteration (run-time unknown). So, there must be loop,  break statement in it.
 Whereas 'for' loop is definite in nature (i.e. known or predictable span).&lt;br&gt;

&lt;b&gt;NOTE: Python doesn't have anything like do-while loop.&lt;/b&gt;

[[#TOP]]

==Implementation==
Here, we try to demonstrate the concept of loops and conditionals through a game called Fizzbuzz. The rules are as follows :&lt;br/&gt;
[[File:fizzBuzz.gif]]

• if input number is a multiple of ’3’ print ”Fizz”
&lt;br/&gt;
• if input number is a multiple of ’5’ print ”Buzz”
&lt;br/&gt;
• if input number is a multiple of both '3' and ’5’ print ”FizzBuzz”
&lt;br/&gt;
The pseudo code is as follows :
&lt;pre&gt;
   If input no % 3 == 0 and  input no % 5 == 0 : 
       print ”Fizzbuzz”
   else if input no % 3 == 0 : 
       print ”Fizz”
   else if input no % 5 == 0 : 
       print ”Buzz”
   else :
       print the input no
&lt;/pre&gt;
 &lt;p style=&quot;text-align:justify&quot;&gt;
The order of statements execution matters to get the desired output. The highest priority condition should be first followed by other. In fizzbuzz programming, first checking should be done for both divisibility of 3 and 5. If condition not satisfied only then it should check individually for 3 or 5. So carefully choosing the order is crucial for better programming.
Note: There is some effect of present condition statements chosen on next conditions statements. That is why in first attempt fizzbuzz programming got struck.&lt;/p&gt;

Example: 
&lt;pre&gt;
#Code to achieve the above requirement in python3.
i = int(input(&quot;Enter the number&quot;)) 
if i%3 == 0 and i%5 == 0: print(i,&quot;FizzBuzz&quot;)  
elif i%5 == 0: print(i,&quot;Buzz&quot;)
elif i%3 == 0: print(i,&quot;Fizz&quot;)
else: print(i)
&lt;/pre&gt;
Lets put the same into a loop for a range given by the user.
&lt;pre&gt;
def fizzbuzzgame(start,stop):
    for i in range(start,stop+1):
        if i%3 == 0 and i%5 == 0:
            print(i,&quot;FizzBuzz&quot;)
        elif i%5 == 0:
            print(i,&quot;Buzz&quot;)
        elif i%3 == 0:
            print(i,&quot;Fizz&quot;)
        else: print(i)

fizzbuzzgame(50,100)
&lt;/pre&gt;
&lt;pre&gt;
#Output:
1235
Buzz
======================================
555
Fizzbuzz
======================================
1235
Buzz
======================================
999
Fizz
&lt;/pre&gt;

=== Fizz Buzz game in Interactive mode with Score ===
'''By Ms. Ami Tusharkant Choksi'''
&lt;pre&gt;
def fizzbuzzgame(i):
        if i%3 == 0 and i%5 == 0:
            print(i,&quot;FizzBuzz&quot;)
            return(&quot;fzbz&quot;)
        elif i%5 == 0:
            print(i,&quot;Buzz&quot;)
            return(&quot;bz&quot;)
        elif i%3 == 0:
            print(i,&quot;Fizz&quot;)
            return(&quot;fz&quot;)
        else:
            print(i)
            return(&quot;no&quot;)

ch = 'y'
fizzbuzz=0
fizz=0
buzz=0
nothing=0
print(&quot;&quot;&quot;

 /$$$$$$$$/$$                  /$$$$$$$                            
| $$_____|__/                 | $$__  $$                           
| $$      /$$/$$$$$$$$/$$$$$$$| $$  \ $$/$$   /$$/$$$$$$$$/$$$$$$$$
| $$$$$  | $|____ /$$|____ /$$| $$$$$$$| $$  | $|____ /$$|____ /$$/
| $$__/  | $$  /$$$$/   /$$$$/| $$__  $| $$  | $$  /$$$$/   /$$$$/ 
| $$     | $$ /$$__/   /$$__/ | $$  \ $| $$  | $$ /$$__/   /$$__/  
| $$     | $$/$$$$$$$$/$$$$$$$| $$$$$$$|  $$$$$$//$$$$$$$$/$$$$$$$$
|__/     |__|________|________|_______/ \______/|________|________/
                                                                  
&quot;&quot;&quot;)   
print('''

  /$$$$$$                                
 /$$__  $$                               
| $$  \__/ /$$$$$$ /$$$$$$/$$$$  /$$$$$$ 
| $$ /$$$$|____  $| $$_  $$_  $$/$$__  $$
| $$|_  $$ /$$$$$$| $$ \ $$ \ $| $$$$$$$$
| $$  \ $$/$$__  $| $$ | $$ | $| $$_____/
|  $$$$$$|  $$$$$$| $$ | $$ | $|  $$$$$$$
 \______/ \_______|__/ |__/ |__/\_______/
                                     
''')

while(ch == 'y'):
    n=int(input(&quot;Enter a Number : &quot;))
    winLoose=fizzbuzzgame(n)
    if(winLoose == &quot;fz&quot;):
        fizz+=1
    elif(winLoose == &quot;bz&quot;):
        buzz+=1
    elif(winLoose == &quot;fzbz&quot;):
        fizzbuzz+=1
    ch=input(&quot;Do you want to continue playing the game : (y/n)&quot;)
    if(ch=='n'):
        print('Congratulations, your score is\n FizzBuzz:%d\nFizz:%d\nBuzz:%d' %
(fizzbuzz,fizz,buzz))
    
'''Sample Output:

 /$$$$$$$$/$$                  /$$$$$$$                            
| $$_____|__/                 | $$__  $$                           
| $$      /$$/$$$$$$$$/$$$$$$$| $$  \ $$/$$   /$$/$$$$$$$$/$$$$$$$$
| $$$$$  | $|____ /$$|____ /$$| $$$$$$$| $$  | $|____ /$$|____ /$$/
| $$__/  | $$  /$$$$/   /$$$$/| $$__  $| $$  | $$  /$$$$/   /$$$$/ 
| $$     | $$ /$$__/   /$$__/ | $$  \ $| $$  | $$ /$$__/   /$$__/  
| $$     | $$/$$$$$$$$/$$$$$$$| $$$$$$$|  $$$$$$//$$$$$$$$/$$$$$$$$
|__/     |__|________|________|_______/ \______/|________|________/
                                                                                                                                   

  /$$$$$$                                
 /$$__  $$                               
| $$  \__/ /$$$$$$ /$$$$$$/$$$$  /$$$$$$ 
| $$ /$$$$|____  $| $$_  $$_  $$/$$__  $$
| $$|_  $$ /$$$$$$| $$ \ $$ \ $| $$$$$$$$
| $$  \ $$/$$__  $| $$ | $$ | $| $$_____/
|  $$$$$$|  $$$$$$| $$ | $$ | $|  $$$$$$$
 \______/ \_______|__/ |__/ |__/\_______/
                                         

Enter a Number : 666
666 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 777
777 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 555
555 FizzBuzz
Do you want to continue playing the game : (y/n)y
Enter a Number : 1
1
Do you want to continue playing the game : (y/n)y
Enter a Number : 789
789 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 25
25 Buzz
Do you want to continue playing the game : (y/n)n
Congratulations, your score is

FizzBuzz:1
Fizz:3
Buzz:1

&lt;/pre&gt;

=Crowd Computing: Just Estimate=
==Wisdom of Crowds==
 &lt;p style=&quot;text-align:justify&quot;&gt;
The concept of ’Wisdom of Crowds’ was proposed by Francis Galton. A weight-judging competition was carried on at the annual show of the West of England Fat Stock and Poultry Exhibition recently held at Plymouth, A fat ox having been selected, competitors bought stamped and numbered cards, each, on which to inscribe their respective names, addresses, and estimates of what the ox would weigh after it had been slaughtered. Those who guessed most successfully received prizes. About 8oo tickets were issued to the par- ticipants. The middlemost estimate of all the estimates recorded was 1207 lbs and the actual weight of the ox was 1198 lbs.&lt;/p&gt;

==Our Experiment==
 &lt;p style=&quot;text-align:justify&quot;&gt;
The crowd had to guess the number of candies/gems in a jar. Around 75 people participated in the experiment. The actual number of gems in the jar were 375. The median of all estimates came out to be 300 and the mean of all the estimates came out to be around 396. Median underestimated and mean overestimated the actual value. So according to recent studies, Trimmed mean must be used as an aggregate measure to estimate where Wisdom of Crowds is involved.
&lt;/p&gt;
[[File:Gemsjar.jpg|center|200px|caption]]

===Trimmed Mean===
 &lt;p style=&quot;text-align:justify&quot;&gt;
In these kinds of experiments, 10% trimmed mean is usually followed. For calculating 10% trimmed mean, remove 10% smallest and 10% largest values from the sample. Calculate the mean of the sample obtained. In the above experiment, the trimmed mean came out to be around 351 which is very close to the actual value.&lt;/p&gt;

==Implementation==
Here, we try to demonstrate the concept of trimmed mean through crowd computing.
&lt;ol&gt;
&lt;li&gt; Input a list of estimates done by the crowd .&lt;/li&gt;
&lt;li&gt; Sort the list.&lt;/li&gt;
&lt;li&gt; Remove the 10% smallest values.&lt;/li&gt;
&lt;li&gt; Remove the 10% largest values.
&lt;li&gt; Calculate the mean of the new list obtained .&lt;/li&gt;&lt;/ol&gt;&lt;hr&gt;

==Data of Experiment==       
    Estimates =[1000,1010,1786,2000,1500,1500,100,120,150,150,150,170,175,180,197,200,200,200,200,200,200,220,220,220,220,234,250,250,250,250,250,250,250,250,250,263,270,275,275,286,300,
                300,300,300,300,300,300,300,320,350,350,350,400, 400,400,400,400,450,467,500,500,500,500,500,500,500,550,550,600,600,600,650,700,700,720]

    '''CODE:'''
&lt;pre&gt;
Estimates = [1000,1010,1786,2000,1500,1500,100,120,150,150,150,170,175,180,197,200,200,200,200,200,200,220,220,220,220,234,250,250,250,250,250,250,250,250,250,263,270,275,275,286,300,                300,300,300,300,300,300,300,320,350,350,350,400,400,400,400,400,450,467,500,500,500,500,500,500,500,550,550,600,600,600,650,700,700,720]
Estimates.sort()
offset = int(0.10*len(Estimates))
for i in range(offset):
       del Estimates[0]
       del Estimates[-1]
Sum = 0    
for i in range(len(Estimates)):
       Sum += Estimates[i]
Mean_Value = Sum/len(Estimates)
print(&quot;Mean : &quot;, int(Mean_Value))
#Output:
Mean :  351
&lt;/pre&gt;
&lt;hr&gt;
==Trimmed Mean for the above example== 
&lt;h3&gt;Using scipy library&lt;/h3&gt;
&lt;pre&gt;
#import scipy to use the method of trim_mean
from scipy import stats
trimMean = stats.trim_mean(Estimates, 0.1) # Trim 10% at both ends
print(&quot;Trimmed Mean : &quot;,trimMean)
#Output:
Trimmed Mean :  335.1020408163265
&lt;/pre&gt;

&lt;h3&gt;Without using scipy library&lt;/h3&gt;
&lt;pre&gt;
#Trimmed mean with 10%
p=10/100
#sorted data
data=[2, 4, 6, 7, 11, 21, 81, 90, 105, 121]
n = len(data)
#Remove elements from both end
rem=int(n*p)
newData = data[rem:-rem]
mean = 0
for i in newData:
    mean += i
mean = int(mean/len(newData))
print(&quot;Trimmed mean : &quot;,mean)
#Output: Trimmed mean :  40
&lt;/pre&gt;
[[#Top]]

=Jumbled_Words Permutations: Jumbled Words=
==What are Permutations ?==
A permutation also called ordering of selected number of elements from a list denoted by nPr here we are choosing all elements of a list and so n=r&lt;br&gt;
nPr=n!/(n-r)!&lt;br&gt; as n=r
nPn=n!&lt;br&gt; which gives all possible arrangement of elements present in a list.

 For example, permutations of list [1,2,3] are [1,2,3], [1,3,2], [2,1,3], [2,3,1], 
[3,1,2], and [3,2,1]. 
The number of permutations of a list of elements nPn is given by n!. For example, there are 2! = 2 x 1 = 2 permutations of [1,2], namely [1,2] and [2,1], and 3! = 3 x 2 x 1 = 6 permutations of [1,2,3], as mentioned above.&lt;br/&gt;
[[File:Permutations.jpg]]

==Implementation==
 &lt;p style=&quot;text-align:justify&quot;&gt;
Here, we try to demonstrate the concept of permutations through jumbled words. It is a two player game in which one person presents the other person a different permutation of the word in his mind. The other person has to guess the right word. If he guesses, the he wins otherwise he loses.&lt;/p&gt;
 Input an list of words.
 Randomly pick a word from the list of words .
 Shuffle this word and present it to the other player.
 if word guesses by the player is same as the one picked from list of w
     player wins
 else
     player loses

ALTERNATE CODE TO GENERATE THIS GAME:
&lt;pre&gt;
import random
p1=input(&quot;enter player 1 name:&quot;)
p2=input(&quot;enter player 2 name:&quot;)
l=[&quot;rainbow&quot;,&quot;computer&quot;,&quot;robot&quot;,&quot;butter&quot;,&quot;vegetable&quot;,&quot;science&quot;,&quot;correct&quot;]
c1=c2=a1=a2=f1=f2=0
k=1
i=3
def play():
    n=random.choice(l)        ##n=chooses a word from list l
    l1=[]
    for j in n:
       l1.append(j)      ##creates a list for word in n
    for t in range(len(l1)):
       p=random.choice(l1)     ##this randomly displays letters in the list
       print(p)
       l1.remove(p)          ##to avoid the repetition of a letter
    s=input(&quot;enter the word:&quot;)
    if(s==n):
        print(&quot;correct&quot;)
        return 1
    else:
        print(&quot;not correct&quot;)
        print(&quot;answer is&quot;,n)
        return 0
def stat():
     print(&quot;player 1:&quot;)
     print(&quot;score:&quot;,c1)
     print(&quot;answered:&quot;,a1)
     print(&quot;failed:&quot;,f1)
     print(&quot;.............&quot;)
     print(&quot;player 2:&quot;)
     print(&quot;score:&quot;,c2)
     print(&quot;answered:&quot;,a2)
     print(&quot;failed&quot;,f2)
     if(c1&gt;c2):
         print(p1,&quot; won over &quot;,p2)
     elif(c1==c2):
         print(&quot;draw game&quot;)
     else:
         print(p2,&quot; won over &quot;,p1) 
while(i!=4):
      if(i==3):
         if(k==1):
             print(&quot;player 1 turn&quot;)
             print(&quot;your jumbled word is:&quot;)
             k=k+1
             m=play()
             if(m==1):      ##if guessed answer is correct,then score and no.of answered count will be increased
                c1+=1
                a1+=1
             else:
                f1+=1       ##else count of no.of failed to answered will be incremented
         else:
             print(&quot;player 2 turn&quot;)
             print(&quot;your jumbled word is:&quot;)
             k=k-1
             m=play()
             if(m==1):
                c2=c2+1
                a2=a2+1
             else:
                f2=f2+1
       if(i==2):
             print(&quot;present status&quot;)
             stat()
       i=int(input(&quot;enter your choice  1.stop 2.status 3.continue&quot;))
       if(i==1):
             stat()
             i=i+3
&lt;/pre&gt;
&lt;hr&gt;
=== JumbledWord Simple Logic, In Short ===
[[File:jumbledWord.gif]]
---
&lt;hr&gt;
'''Logic to create a Jumbled Word'''
&lt;hr&gt;
&lt;pre&gt;
#Get Jumbled Word and print it Horizontally
import random

def getJumbledWord(b):
    jumble=''
    l1 = [ b[i] for i in range(0, len(b)) ]
    for t in range(len(l1)):
       p=random.choice(l1)  #this randomly gets letters from the list      
       jumble=jumble+p       
       l1.remove(p)
    return jumble

b=input(&quot;Enter a word to make it jumbled : &quot;)
print(&quot;Jumbled Word : &quot;, getJumbledWord(b))
&lt;/pre&gt;
&lt;pre&gt;
Output:
Enter a word to make it jumbled : live and let live others
Jumbled Word :  vel  toldeisrte aihv len
==========================================
Enter a word to make it jumbled : junkfood
Jumbled Word :  nfukdooj
&lt;/pre&gt;
&lt;hr&gt;
'''Another Logic to create a Jumbled Word'''
&lt;hr&gt;
&lt;pre&gt;
import random
b=input(&quot;Enter a word to make it jumbled : &quot;)

def getJumbledWord1(b):
    l1 = [ b[i] for i in range(0, len(b)) ]
    random.shuffle(l1)
    str1 = ''.join(l1)
    return str1

print(&quot;Jumbled Word : &quot;, getJumbledWord1(b))
&lt;/pre&gt;

====Sample Output:====
&lt;pre&gt;
---- Output1 
Enter a word to make it jumbled : butter
Jumbled Word :  tbture

---- Output2 
Enter a word to make it jumbled : petriotism
Jumbled Word :  pittrosime
&lt;/pre&gt;

=Theory of Evolution=

== What is Evolution ? ==
Evolution is the change in heritable characteristics over successive generations. The theory of evolution explains that DNA, which acts as a carrier of genetic information from one generation to other, tends to change or mutate occasionally. These changes are reflected in next generations to come. This is how life has evolved on earth from bacteria to human beings.&lt;br&gt;
[[File:Evolution.png|500px]]

== Implementation ==
 &lt;p style=&quot;text-align:justify&quot;&gt;
An array representing DNA is stored in a file. As genes are forms of DNA, they contain information to be transferred to forthcoming generations. Assume that information is in the form of bits (in the form of 0s and 1s). A number is picked randomly from 1 to the size of the array. A new parameter has been introduced which decides whether mutation would occur or not. If the value of this new parameter is 1 (It is picked randomly from 1 to 100), then only change is reflected down the generations, otherwise it is not. The pseudo code is as follows :
&lt;/p&gt;
Input an array containing genetic information .
Randomly generate a number (say m) from 1 to length of the array. Randomly generate other number (say p) from 1 to 100.

&lt;pre&gt; 
    if p is equal to 1 then 
        if m is 1 then
          set it to 0
        else
          set it to 1
&lt;/pre&gt;
[[#TOP]]</text>
      <sha1>307e17s8v23k4zzxweld8pcy6i1ly80</sha1>
    </revision>
    <revision>
      <id>3753</id>
      <parentid>3752</parentid>
      <timestamp>2018-09-29T04:08:32Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* Without using index position */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="30733">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_3 Contributors of this page]
*Week 3 Playlist: https://www.youtube.com/playlist?list=PLc_j0TNIaWxOVx_z9jAM2UB3RqYNXaoEo
=List=
List is a flexible data structure used for storing a group of data separated by comma. The elements in a list need not be of the same data type.

'''Example:'''
       List_1 = [ 1, 2,3] or 
       List_1 = [&quot;coffee&quot;, &quot;Tea&quot;, &quot;Milk&quot;] or
       List_1 = [1,&quot;coffee&quot;, &quot;Tea&quot;, 3, &quot;5&quot;]

==List Creation==
a) A list can be created by simply putting values (separated by comma) between square
 brackets as given below,
&lt;pre&gt;List_1 = [1,&quot;coffee&quot;, &quot;Tea&quot;, 3, &quot;5&quot;] #this creates a list by name List_1 containing
 following items
&lt;/pre&gt;


Or,
(b)A List can be created from scratch and elements can be added 
&lt;pre&gt;
        List_2 = [ ]
        List_2.append(&quot;Kala&quot;)
        List_2.append(&quot;Mala&quot;)
&lt;/pre&gt;
Here we use &quot;append&quot;, which is a function in python that enable us to append or attach an element to a list .
&lt;pre&gt;Thus List_2 will now hold [&quot;Kala&quot;,&quot;Mala&quot;]&lt;/pre&gt;

[[#Top]]

==Operations and Methods to work with List==
&lt;pre&gt;
a = [25,30,50,90,12,13]
b = [100,300,500,200,250]
&lt;/pre&gt;
&lt;hr&gt;
&lt;table border=2&gt;
  &lt;tr&gt;
    &lt;th&gt;&lt;b&gt;Method/&lt;br&gt;Operator&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Function&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Syntax&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Output&lt;/b&gt;&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;len()&lt;/td&gt;
    &lt;td&gt;Find length of a list&lt;/td&gt;
    &lt;td&gt;len(a)&lt;/td&gt;
    &lt;td&gt;6&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;max()&lt;/td&gt;
    &lt;td&gt;Find maximum element from the list&lt;/td&gt;
    &lt;td&gt;max(a)&lt;/td&gt;
    &lt;td&gt;90&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;min()&lt;/td&gt;
    &lt;td&gt;Find minimum element from the list&lt;/td&gt;
    &lt;td&gt;min(a)&lt;/td&gt;
    &lt;td&gt;12&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sum()&lt;/td&gt;
    &lt;td&gt;Returns sum of all elements of the list&lt;/td&gt;
    &lt;td&gt;sum(a)&lt;/td&gt;
    &lt;td&gt;220&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;reverse()&lt;/td&gt;
    &lt;td&gt;Reverses the original list&lt;/td&gt;
    &lt;td&gt;a.reverse()&lt;/td&gt;
    &lt;td&gt;[13, 12, 90, 50, 30, 25]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sort()&lt;/td&gt;
    &lt;td&gt;Sorts the original list in ascending order&lt;/td&gt;
    &lt;td&gt;a.sort()&lt;/td&gt;
    &lt;td&gt;[12, 13, 25, 30, 50, 90]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sorted()&lt;/td&gt;
    &lt;td&gt;Returns the new sorted list &lt;/td&gt;
    &lt;td&gt;sorted(a)&lt;/td&gt;
    &lt;td&gt;[12, 13, 25, 30, 50, 90]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;insert()&lt;/td&gt;
    &lt;td&gt;Insert at a particular index in the list, and shifts remaining elements&lt;/td&gt;
    &lt;td&gt;a.insert(3,3)&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 3, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;append()&lt;/td&gt;
    &lt;td&gt;Adds elements/object to the end of the list&lt;/td&gt;
    &lt;td&gt;a.append(5)&lt;br&gt;a.append([10,20])&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 5]&lt;br&gt;[25, 30, 50, 90, 12, 13, [10, 20]]&lt;br&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;extend()&lt;/td&gt;
    &lt;td&gt;Adds object to the end of the list as elements not as object&lt;/td&gt;
    &lt;td&gt;a.extend([10,20])&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 10, 20]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;*&amp;nbsp;&amp;nbsp;Repeatation&lt;br&gt;operator&lt;/td&gt;
    &lt;td&gt;Repeat the list for n times and returns a new list&lt;/td&gt;
    &lt;td&gt;a*2&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 25, 30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;+ Concatenation&lt;br&gt;operator&lt;/td&gt;
    &lt;td&gt;Concatenates two lists, and returns a new list&lt;/td&gt;
    &lt;td&gt;a+b&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 100, 300, 500, 200, 250]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;index()&lt;/td&gt;
    &lt;td&gt;Finds index of a particular element in the list or not&lt;/td&gt;
    &lt;td&gt;a.index(25)&lt;br&gt;a.index(0)&lt;br&gt;&lt;/td&gt;
    &lt;td&gt;0&lt;br&gt;&lt;br&gt;ValueError: 0 is not in list&lt;br&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;in operator&lt;/td&gt;
    &lt;td&gt;Finds whether a particular element is in the list or not, returns boolean&lt;/td&gt;
    &lt;td&gt;25 in a&lt;/td&gt;
    &lt;td&gt;True&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;not in operator&lt;/td&gt;
    &lt;td&gt;Checks if element is not available in list, returns boolean&lt;/td&gt;
    &lt;td&gt;25 not in a&lt;/td&gt;
    &lt;td&gt;False&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;count()&lt;/td&gt;
    &lt;td&gt;Counts the number of occurence of an element in the list&lt;/td&gt;
    &lt;td&gt;a.count(25)&lt;/td&gt;
    &lt;td&gt;1&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;remove()&lt;/td&gt;
    &lt;td&gt;Removes an element from the list&lt;/td&gt;
    &lt;td&gt;a.remove(25)&lt;/td&gt;
    &lt;td&gt; [30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;pop()&lt;/td&gt;
    &lt;td&gt;Delete and return item at index 0&lt;/td&gt;
    &lt;td&gt;a.pop(0)&lt;/td&gt;
    &lt;td&gt;25 , a will be [30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;del&lt;/td&gt;
    &lt;td&gt;Deletes item at a particular index from the list&lt;/td&gt;
    &lt;td&gt;del a[0]&lt;/td&gt;
    &lt;td&gt;[30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;all()&lt;/td&gt;
&lt;td&gt;Returns True, if all items in list are True or it is an empty list&lt;/td&gt;
&lt;td&gt;all([True, True, True])
all([])
&lt;/td&gt;
&lt;td&gt;True&lt;br&gt;
True&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;any()&lt;/td&gt;
&lt;td&gt;Returns True, if any item in list is True else return False&lt;/td&gt;
&lt;td&gt;any([True, True, True])&lt;br&gt;
any([True, False, True])&lt;br&gt;
any([])&lt;/td&gt;
&lt;td&gt;True&lt;br&gt;False&lt;br&gt;False&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;

==Printing the List==
=== Print whole list ===
A list can be printed simply or using a ''for / while'' loop 

 print(List_2)     # To print the entire list
This code will print      
 ['Kala','Mala']     

===Print element at a particular index===
&lt;pre&gt;
Using index position
    List_2[0]     # prints 'Kala' ,i.e,the value at index position 0.
    List_2[1]     # prints 'Mala'.
&lt;/pre&gt;
=== Without using index position ===
&lt;pre&gt;
for item in List_2:   # here item is a variable used to access elements in list.
       print(item)
   This code snippet prints 
    Kala
    Mala
&lt;/pre&gt;
[[#Top]]

==Search for a particular element in list==
Elements in a list can be searched by one of the two ways:
=== using index() function===
&lt;pre&gt;
ages1 = [11,23,12,23,45]

#if element is available in the list, index() returns the index value on which, the element is
 present.
print(ages1.index(45))#Output: 4

#if element is not available in the list, index() returns ''ValueError''
print(ages1.index(0))#Output: ValueError:
&lt;/pre&gt;

In programming, if such error occurs, program gets terminated. It can be solved using exception handling.
 
e.g.
&lt;pre&gt;
ages1 = [11,23,12,23,45]

try:
    print(ages1.index(0))
except ValueError:
    print(&quot;Exception has occured&quot;)    
    print(&quot;Element is not found in the list&quot;)

&lt;/pre&gt;
&lt;pre&gt;
'''Output: 
Exception has occured
Element is not found in the list
'''&lt;/pre&gt;
[[#Top]]

=== using 'in' operator===
''in'' operator is used to check whether a particular element is available in the list or not.e.g.

&lt;pre&gt;
ages1 = [11,23,12,23,45]
no=11

if no in ages1:
    print(&quot;no is there in the list&quot;)
else:    
    print(&quot;no is NOT there in the list&quot;)
&lt;/pre&gt;
&lt;pre&gt;
#Output: no is there in the list
&lt;/pre&gt;


'''Number is not there in the list'''
&lt;pre&gt;
ages1 = [11,23,12,23,45]
no=15

if no in ages1:
    print(&quot;no is there in the list&quot;)
else:    
    print(&quot;no is NOT there in the list&quot;)
&lt;/pre&gt;
&lt;pre&gt;
Output: no is NOT there in the list
&lt;/pre&gt;
[[#TOP]]

==Updating the List==
The lists can be updated using ''append'' or ''insert'' function.  Append adds the element to the end of the list and Insert adds the element in the specified position.
&lt;pre&gt;
   # add the element 'Sheela' to the end of the list.
   List_2.append(&quot;Sheela&quot;)    
   print (List_2) will output 
   ['Kala', 'Mala', 'Sheela']
&lt;/pre&gt;
   &lt;pre&gt;
# add the element &quot;Bala&quot; in the list at the index 1.
   List_2.insert(1,&quot;Bala&quot;)    
   print (List_2) will output 
   ['Kala', 'Bala','Mala', 'Sheela']
&lt;/pre&gt;

=== Extend the list by adding elements of other list at end using extend()===
&lt;pre&gt;
ages = [11,23,12,23,45]
ages.extend([57,58])
print(ages)
&lt;/pre&gt;

&lt;pre&gt;
#Output: [11, 23, 12, 23, 45, 57, 58]
&lt;/pre&gt;

==== Difference between ''append and extend'' ====
Difference between append and extend can be easily understood, by the following example.

&lt;pre&gt;
appendlist = [11,23,12,23,45]
appendlist.append([57,58])

extendlist= [11,23,12,23,45]
extendlist.extend([57,58])
&lt;/pre&gt;

&lt;pre&gt;
'''Output:
[11, 23, 12, 23, 45, [57, 58]]
[11, 23, 12, 23, 45, 57, 58]'''
&lt;/pre&gt;

[[#TOP]]

==Basic Operations on List==
===Frequency of Occurrence===
list.count(object) will return the number of times the object occur in the list.
  '''Example'''
    ages = [11,23,12,23,45,43,22,24,23]
    ages.count(23) will return
    3
    ages.count(100) will return
    0

===Length of the List===
''len(list)'' will return the length of the list ie. the number of objects in the list.
  '''Example'''
&lt;pre&gt;
    ages = [11,23,12,23,45,43,22,24,23]
    len(ages) # Output: 9
&lt;/pre&gt;

To print the objects in the list either use ''for item in list'' or ''for index in range(len(list))''
&lt;pre&gt;
    for item in ages:       
        print (item)  
        (OR)
    for index in range(len(ages)) :
        print (ages[index])
&lt;/pre&gt;

===Sort the List===
''list.sort()'' will sort the list in ascending order
  '''Example'''
    ages = [11,23,12,23,45,43,22,24,23]
    ages.sort() 
    print (ages) 
    [11, 12, 22, 23, 23, 23, 24, 43, 45]

[[#Top]]

===Sort the List using sorted() function===
''sorted(list1)'' will sort the list and return a new list, it doesn't modify the original list
&lt;br&gt;'''Example: Sort in ascending order'''
&lt;pre&gt;
ages = [11,23,12,23,45,43,22,24,23]
newList=sorted(ages)
print(newList)

#Output: [11, 12, 22, 23, 23, 23, 24, 43, 45]
&lt;/pre&gt;

&lt;br&gt;'''Example: Sort in descending order'''
&lt;pre&gt;
ages = [11,23,12,23,45,43,22,24,23]
newList=sorted(ages,reverse=True)
print(newList)

#Output: [45, 43, 24, 23, 23, 23, 22, 12, 11]
&lt;/pre&gt;

===Reverse the List===
''list.reverse()'' will reverse the original list
  '''Example'''
    ages = [11, 12, 22, 23, 23, 23, 24, 43, 45]
    ages.reverse()
    print (ages)
    [45, 43, 24, 23, 23, 23, 22, 12, 11]

Both ''sort()'' and ''reverse()'' list operation will work on numeric and alphanumeric data list.

A special use of the ''reverse()'' function is to descend a list that is sorted in ascending order.

  '''Example'''
&lt;pre&gt;
ages = [11, 12, 22, 23, 23, 23, 24, 43, 45]
ages.sort()
print(ages)
ages.reverse()
print(ages)
&lt;/pre&gt;

===Slicing===
Used to retrieve an object or objects in a range as a list  
  '''Example'''

Use ''list[index]'' to retrieve the object at the given index
&lt;pre&gt;
In [1]: student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
In [2]: student[3]     #Object at index 3.  Remember index starts at 0
Out[2]: 'Geetha'      
&lt;/pre&gt;

Use ''list[start_index : end_index + 1]'' to retrieve objects from the start_index to end_index 
&lt;pre&gt;
In [3]: student[2:4]     # Objects from index 2 to 3 as List. Note the [ and ]
Out[3]: ['Vijay', 'Geetha']   
&lt;/pre&gt;

Use ''list[:]'' to retrieve objects from the starting of the list to the end of the list. 
The default start value will be the starting index of the list (i.e. 0) and the default end value
will be the length of the list 
&lt;pre&gt;
In [4]: student[:]        # prints the entire list
Out[4]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma', 'Janani']
&lt;/pre&gt;
&lt;pre&gt;
In [5]: student[:5]       # prints the objects from the start of the list upto object at index 4
Out[5]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran']
&lt;/pre&gt;
&lt;pre&gt;
In [6]: student[2:]       # prints the objects from index 2 upto the end of the list
Out[6]: ['Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma', 'Janani']
&lt;/pre&gt;

Negative index too is available in Python. It starts from last element of the list. i.e.
&lt;pre&gt;
In [7]:student[-1]        #prints last index of list
Out[7]: 'Janani'
&lt;/pre&gt;
&lt;pre&gt;
In [8]:student[-1:-8]     #prints empty list
Out[8]: []
&lt;/pre&gt;
&lt;pre&gt;
In [9]:student[-8:-1]     #prints -8th index to -1st index elements
Out[9]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma']
&lt;/pre&gt;

[[#Top]]

===Removing Item from list ===
----

Is used to remove a specific item from the list.

'''Example:'''
 
Use list.remove(entry/value)  Or   del list[index]    Or list.pop(index)
&lt;pre&gt;
student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
student.remove(&quot;Arun&quot;)   #This will delete item &quot;Arun&quot;
         Or    
del student[0]           # This will delete item at index 0
         Or
student.pop(0)         # This will delete and return item at index 0
print(student)    
Output: &quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
&lt;/pre&gt;

[[#TOP]]

===Delete list ===
----
Used to delete complete list

'''Example'''

Use del &lt;list name&gt;
&lt;pre&gt;
student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
del student&lt;/pre&gt;

===Concatenation of two lists===
----
''+'' is the concatenation operator which is used concatenate two lists. 
&lt;pre&gt;
ages1 = [11,23,12,23,45]
ages2 = [25, 24, 43, 47]
age=ages1+ages2
print(age)
#Output: [11, 23, 12, 23, 45, 25, 24, 43, 47]
&lt;/pre&gt;

===Repeatation of a list ===
----
''*'' is the operator to repeat a particular list.
&lt;pre&gt;
ages1 = [11,23,12,23,45]
age=ages1*5 #ages1 list is repeated 5 times and stroed in ''age'' list
print(age)

#Output: [11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45]
&lt;/pre&gt;

=== all and any for List===
all() and any() are special functions to check whether all elements in iterable is ''True'' or any element is ''True''
&lt;ol&gt;
&lt;li&gt;If all elements in a list are ''True'', '''all()''' will return ''True''&lt;/li&gt;
&lt;li&gt;If iterable is ''empty'', '''all()''' will return ''True''&lt;/li&gt;
&lt;li&gt;If iterable contains at least one ''True'', '''any()''' will return ''True''&lt;/li&gt;
&lt;li&gt;If iterable is ''empty'', '''any()''' will return ''False''&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;
lsit=[True, True, True, True]
print(all(lsit))#Output: True
print(any(lsit))#Output: True

lsit1=[True, False, True, True]
print(all(lsit1))#Output: False
print(any(lsit1))#Output: True

lsit2=[False,False,False]
print(all(lsit2))#Output: False
print(any(lsit2))#Output: False

lsit3=[]
print(all(lsit3))#Output: True
print(any(lsit3))#Output: False
&lt;/pre&gt;

==Conditional Statements==
&lt;pre&gt;Conditionals are used to check the condition and change the flow of the program 
accordingly. They are realized in programming languages through if statement. The 
syntax is as follows :
&lt;pre&gt;
         if condition : 
            statement
&lt;/pre&gt;
    '''Note:''' Do not forget indentation (inserting space/tab) in the line after the
 if condition.
    
    In case you want to execute a set of statements when a condition is true and another

set of statement when the condition is false.
&lt;pre&gt;
         if condition : 
            statement 1
         else :
            statement 2
&lt;/pre&gt;

&lt;pre&gt;    
    Multiple if-else statements can be written as follows:
         if condition_1 : 
            statement 1
         elif condition_2 : # 'elif' is short for 'else if'
            statement 2
         elif condition_3 :
            statement 3
        .
        .
         else :
            final statement
&lt;/pre&gt;

[[#TOP]]

=Loops and Conditionals : Fizzbuzz=
====Loops====
Loops are used to execute a set of repetitive statements. They are realised
through 'while' and 'for' loops in programming languages. The syntax of 'for' loop is 
as follows :
&lt;pre&gt;
for LOOPVARIABLE in SEQUENCE: 
            STATEMENTS&lt;/pre&gt;

    '''e.g.''' to print all the data from a list we can write:
&lt;pre&gt;
for item in list_name:
      print(item)&lt;/pre&gt;
    OR
&lt;pre&gt;
for index in range(len(list_name)):
      print(list_name[index])
 &lt;/pre&gt;   
    The syntax for while loop is as follows :
&lt;pre&gt;    
while BOOLEANEXPRESSION: 
     STATEMENTS
     INCREMENT/DECREMENT
&lt;/pre&gt;    
    '''e.g.''' if we want to print all numbers from 1 to 10
&lt;pre&gt;
i=1
while i&lt;=10 :
    print(i,&quot; &quot;)
    i=i+1
    &lt;/pre&gt;
 
'while' loop has indefinite iteration (run-time unknown). So, there must be loop,  break statement in it.
 Whereas 'for' loop is definite in nature (i.e. known or predictable span).&lt;br&gt;

&lt;b&gt;NOTE: Python doesn't have anything like do-while loop.&lt;/b&gt;

[[#TOP]]

==Implementation==
Here, we try to demonstrate the concept of loops and conditionals through a game called Fizzbuzz. The rules are as follows :&lt;br/&gt;
[[File:fizzBuzz.gif]]

• if input number is a multiple of ’3’ print ”Fizz”
&lt;br/&gt;
• if input number is a multiple of ’5’ print ”Buzz”
&lt;br/&gt;
• if input number is a multiple of both '3' and ’5’ print ”FizzBuzz”
&lt;br/&gt;
The pseudo code is as follows :
&lt;pre&gt;
   If input no % 3 == 0 and  input no % 5 == 0 : 
       print ”Fizzbuzz”
   else if input no % 3 == 0 : 
       print ”Fizz”
   else if input no % 5 == 0 : 
       print ”Buzz”
   else :
       print the input no
&lt;/pre&gt;
 &lt;p style=&quot;text-align:justify&quot;&gt;
The order of statements execution matters to get the desired output. The highest priority condition should be first followed by other. In fizzbuzz programming, first checking should be done for both divisibility of 3 and 5. If condition not satisfied only then it should check individually for 3 or 5. So carefully choosing the order is crucial for better programming.
Note: There is some effect of present condition statements chosen on next conditions statements. That is why in first attempt fizzbuzz programming got struck.&lt;/p&gt;

Example: 
&lt;pre&gt;
#Code to achieve the above requirement in python3.
i = int(input(&quot;Enter the number&quot;)) 
if i%3 == 0 and i%5 == 0: print(i,&quot;FizzBuzz&quot;)  
elif i%5 == 0: print(i,&quot;Buzz&quot;)
elif i%3 == 0: print(i,&quot;Fizz&quot;)
else: print(i)
&lt;/pre&gt;
Lets put the same into a loop for a range given by the user.
&lt;pre&gt;
def fizzbuzzgame(start,stop):
    for i in range(start,stop+1):
        if i%3 == 0 and i%5 == 0:
            print(i,&quot;FizzBuzz&quot;)
        elif i%5 == 0:
            print(i,&quot;Buzz&quot;)
        elif i%3 == 0:
            print(i,&quot;Fizz&quot;)
        else: print(i)

fizzbuzzgame(50,100)
&lt;/pre&gt;
&lt;pre&gt;
#Output:
1235
Buzz
======================================
555
Fizzbuzz
======================================
1235
Buzz
======================================
999
Fizz
&lt;/pre&gt;

=== Fizz Buzz game in Interactive mode with Score ===
'''By Ms. Ami Tusharkant Choksi'''
&lt;pre&gt;
def fizzbuzzgame(i):
        if i%3 == 0 and i%5 == 0:
            print(i,&quot;FizzBuzz&quot;)
            return(&quot;fzbz&quot;)
        elif i%5 == 0:
            print(i,&quot;Buzz&quot;)
            return(&quot;bz&quot;)
        elif i%3 == 0:
            print(i,&quot;Fizz&quot;)
            return(&quot;fz&quot;)
        else:
            print(i)
            return(&quot;no&quot;)

ch = 'y'
fizzbuzz=0
fizz=0
buzz=0
nothing=0
print(&quot;&quot;&quot;

 /$$$$$$$$/$$                  /$$$$$$$                            
| $$_____|__/                 | $$__  $$                           
| $$      /$$/$$$$$$$$/$$$$$$$| $$  \ $$/$$   /$$/$$$$$$$$/$$$$$$$$
| $$$$$  | $|____ /$$|____ /$$| $$$$$$$| $$  | $|____ /$$|____ /$$/
| $$__/  | $$  /$$$$/   /$$$$/| $$__  $| $$  | $$  /$$$$/   /$$$$/ 
| $$     | $$ /$$__/   /$$__/ | $$  \ $| $$  | $$ /$$__/   /$$__/  
| $$     | $$/$$$$$$$$/$$$$$$$| $$$$$$$|  $$$$$$//$$$$$$$$/$$$$$$$$
|__/     |__|________|________|_______/ \______/|________|________/
                                                                  
&quot;&quot;&quot;)   
print('''

  /$$$$$$                                
 /$$__  $$                               
| $$  \__/ /$$$$$$ /$$$$$$/$$$$  /$$$$$$ 
| $$ /$$$$|____  $| $$_  $$_  $$/$$__  $$
| $$|_  $$ /$$$$$$| $$ \ $$ \ $| $$$$$$$$
| $$  \ $$/$$__  $| $$ | $$ | $| $$_____/
|  $$$$$$|  $$$$$$| $$ | $$ | $|  $$$$$$$
 \______/ \_______|__/ |__/ |__/\_______/
                                     
''')

while(ch == 'y'):
    n=int(input(&quot;Enter a Number : &quot;))
    winLoose=fizzbuzzgame(n)
    if(winLoose == &quot;fz&quot;):
        fizz+=1
    elif(winLoose == &quot;bz&quot;):
        buzz+=1
    elif(winLoose == &quot;fzbz&quot;):
        fizzbuzz+=1
    ch=input(&quot;Do you want to continue playing the game : (y/n)&quot;)
    if(ch=='n'):
        print('Congratulations, your score is\n FizzBuzz:%d\nFizz:%d\nBuzz:%d' %
(fizzbuzz,fizz,buzz))
    
'''Sample Output:

 /$$$$$$$$/$$                  /$$$$$$$                            
| $$_____|__/                 | $$__  $$                           
| $$      /$$/$$$$$$$$/$$$$$$$| $$  \ $$/$$   /$$/$$$$$$$$/$$$$$$$$
| $$$$$  | $|____ /$$|____ /$$| $$$$$$$| $$  | $|____ /$$|____ /$$/
| $$__/  | $$  /$$$$/   /$$$$/| $$__  $| $$  | $$  /$$$$/   /$$$$/ 
| $$     | $$ /$$__/   /$$__/ | $$  \ $| $$  | $$ /$$__/   /$$__/  
| $$     | $$/$$$$$$$$/$$$$$$$| $$$$$$$|  $$$$$$//$$$$$$$$/$$$$$$$$
|__/     |__|________|________|_______/ \______/|________|________/
                                                                                                                                   

  /$$$$$$                                
 /$$__  $$                               
| $$  \__/ /$$$$$$ /$$$$$$/$$$$  /$$$$$$ 
| $$ /$$$$|____  $| $$_  $$_  $$/$$__  $$
| $$|_  $$ /$$$$$$| $$ \ $$ \ $| $$$$$$$$
| $$  \ $$/$$__  $| $$ | $$ | $| $$_____/
|  $$$$$$|  $$$$$$| $$ | $$ | $|  $$$$$$$
 \______/ \_______|__/ |__/ |__/\_______/
                                         

Enter a Number : 666
666 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 777
777 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 555
555 FizzBuzz
Do you want to continue playing the game : (y/n)y
Enter a Number : 1
1
Do you want to continue playing the game : (y/n)y
Enter a Number : 789
789 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 25
25 Buzz
Do you want to continue playing the game : (y/n)n
Congratulations, your score is

FizzBuzz:1
Fizz:3
Buzz:1

&lt;/pre&gt;

=Crowd Computing: Just Estimate=
==Wisdom of Crowds==
 &lt;p style=&quot;text-align:justify&quot;&gt;
The concept of ’Wisdom of Crowds’ was proposed by Francis Galton. A weight-judging competition was carried on at the annual show of the West of England Fat Stock and Poultry Exhibition recently held at Plymouth, A fat ox having been selected, competitors bought stamped and numbered cards, each, on which to inscribe their respective names, addresses, and estimates of what the ox would weigh after it had been slaughtered. Those who guessed most successfully received prizes. About 8oo tickets were issued to the par- ticipants. The middlemost estimate of all the estimates recorded was 1207 lbs and the actual weight of the ox was 1198 lbs.&lt;/p&gt;

==Our Experiment==
 &lt;p style=&quot;text-align:justify&quot;&gt;
The crowd had to guess the number of candies/gems in a jar. Around 75 people participated in the experiment. The actual number of gems in the jar were 375. The median of all estimates came out to be 300 and the mean of all the estimates came out to be around 396. Median underestimated and mean overestimated the actual value. So according to recent studies, Trimmed mean must be used as an aggregate measure to estimate where Wisdom of Crowds is involved.
&lt;/p&gt;
[[File:Gemsjar.jpg|center|200px|caption]]

===Trimmed Mean===
 &lt;p style=&quot;text-align:justify&quot;&gt;
In these kinds of experiments, 10% trimmed mean is usually followed. For calculating 10% trimmed mean, remove 10% smallest and 10% largest values from the sample. Calculate the mean of the sample obtained. In the above experiment, the trimmed mean came out to be around 351 which is very close to the actual value.&lt;/p&gt;

==Implementation==
Here, we try to demonstrate the concept of trimmed mean through crowd computing.
&lt;ol&gt;
&lt;li&gt; Input a list of estimates done by the crowd .&lt;/li&gt;
&lt;li&gt; Sort the list.&lt;/li&gt;
&lt;li&gt; Remove the 10% smallest values.&lt;/li&gt;
&lt;li&gt; Remove the 10% largest values.
&lt;li&gt; Calculate the mean of the new list obtained .&lt;/li&gt;&lt;/ol&gt;&lt;hr&gt;

==Data of Experiment==       
    Estimates =[1000,1010,1786,2000,1500,1500,100,120,150,150,150,170,175,180,197,200,200,200,200,200,200,220,220,220,220,234,250,250,250,250,250,250,250,250,250,263,270,275,275,286,300,
                300,300,300,300,300,300,300,320,350,350,350,400, 400,400,400,400,450,467,500,500,500,500,500,500,500,550,550,600,600,600,650,700,700,720]

    '''CODE:'''
&lt;pre&gt;
Estimates = [1000,1010,1786,2000,1500,1500,100,120,150,150,150,170,175,180,197,200,200,200,200,200,200,220,220,220,220,234,250,250,250,250,250,250,250,250,250,263,270,275,275,286,300,                300,300,300,300,300,300,300,320,350,350,350,400,400,400,400,400,450,467,500,500,500,500,500,500,500,550,550,600,600,600,650,700,700,720]
Estimates.sort()
offset = int(0.10*len(Estimates))
for i in range(offset):
       del Estimates[0]
       del Estimates[-1]
Sum = 0    
for i in range(len(Estimates)):
       Sum += Estimates[i]
Mean_Value = Sum/len(Estimates)
print(&quot;Mean : &quot;, int(Mean_Value))
#Output:
Mean :  351
&lt;/pre&gt;
&lt;hr&gt;
==Trimmed Mean for the above example== 
&lt;h3&gt;Using scipy library&lt;/h3&gt;
&lt;pre&gt;
#import scipy to use the method of trim_mean
from scipy import stats
trimMean = stats.trim_mean(Estimates, 0.1) # Trim 10% at both ends
print(&quot;Trimmed Mean : &quot;,trimMean)
#Output:
Trimmed Mean :  335.1020408163265
&lt;/pre&gt;

&lt;h3&gt;Without using scipy library&lt;/h3&gt;
&lt;pre&gt;
#Trimmed mean with 10%
p=10/100
#sorted data
data=[2, 4, 6, 7, 11, 21, 81, 90, 105, 121]
n = len(data)
#Remove elements from both end
rem=int(n*p)
newData = data[rem:-rem]
mean = 0
for i in newData:
    mean += i
mean = int(mean/len(newData))
print(&quot;Trimmed mean : &quot;,mean)
#Output: Trimmed mean :  40
&lt;/pre&gt;
[[#Top]]

=Jumbled_Words Permutations: Jumbled Words=
==What are Permutations ?==
A permutation also called ordering of selected number of elements from a list denoted by nPr here we are choosing all elements of a list and so n=r&lt;br&gt;
nPr=n!/(n-r)!&lt;br&gt; as n=r
nPn=n!&lt;br&gt; which gives all possible arrangement of elements present in a list.

 For example, permutations of list [1,2,3] are [1,2,3], [1,3,2], [2,1,3], [2,3,1], 
[3,1,2], and [3,2,1]. 
The number of permutations of a list of elements nPn is given by n!. For example, there are 2! = 2 x 1 = 2 permutations of [1,2], namely [1,2] and [2,1], and 3! = 3 x 2 x 1 = 6 permutations of [1,2,3], as mentioned above.&lt;br/&gt;
[[File:Permutations.jpg]]

==Implementation==
 &lt;p style=&quot;text-align:justify&quot;&gt;
Here, we try to demonstrate the concept of permutations through jumbled words. It is a two player game in which one person presents the other person a different permutation of the word in his mind. The other person has to guess the right word. If he guesses, the he wins otherwise he loses.&lt;/p&gt;
 Input an list of words.
 Randomly pick a word from the list of words .
 Shuffle this word and present it to the other player.
 if word guesses by the player is same as the one picked from list of w
     player wins
 else
     player loses

ALTERNATE CODE TO GENERATE THIS GAME:
&lt;pre&gt;
import random
p1=input(&quot;enter player 1 name:&quot;)
p2=input(&quot;enter player 2 name:&quot;)
l=[&quot;rainbow&quot;,&quot;computer&quot;,&quot;robot&quot;,&quot;butter&quot;,&quot;vegetable&quot;,&quot;science&quot;,&quot;correct&quot;]
c1=c2=a1=a2=f1=f2=0
k=1
i=3
def play():
    n=random.choice(l)        ##n=chooses a word from list l
    l1=[]
    for j in n:
       l1.append(j)      ##creates a list for word in n
    for t in range(len(l1)):
       p=random.choice(l1)     ##this randomly displays letters in the list
       print(p)
       l1.remove(p)          ##to avoid the repetition of a letter
    s=input(&quot;enter the word:&quot;)
    if(s==n):
        print(&quot;correct&quot;)
        return 1
    else:
        print(&quot;not correct&quot;)
        print(&quot;answer is&quot;,n)
        return 0
def stat():
     print(&quot;player 1:&quot;)
     print(&quot;score:&quot;,c1)
     print(&quot;answered:&quot;,a1)
     print(&quot;failed:&quot;,f1)
     print(&quot;.............&quot;)
     print(&quot;player 2:&quot;)
     print(&quot;score:&quot;,c2)
     print(&quot;answered:&quot;,a2)
     print(&quot;failed&quot;,f2)
     if(c1&gt;c2):
         print(p1,&quot; won over &quot;,p2)
     elif(c1==c2):
         print(&quot;draw game&quot;)
     else:
         print(p2,&quot; won over &quot;,p1) 
while(i!=4):
      if(i==3):
         if(k==1):
             print(&quot;player 1 turn&quot;)
             print(&quot;your jumbled word is:&quot;)
             k=k+1
             m=play()
             if(m==1):      ##if guessed answer is correct,then score and no.of answered count will be increased
                c1+=1
                a1+=1
             else:
                f1+=1       ##else count of no.of failed to answered will be incremented
         else:
             print(&quot;player 2 turn&quot;)
             print(&quot;your jumbled word is:&quot;)
             k=k-1
             m=play()
             if(m==1):
                c2=c2+1
                a2=a2+1
             else:
                f2=f2+1
       if(i==2):
             print(&quot;present status&quot;)
             stat()
       i=int(input(&quot;enter your choice  1.stop 2.status 3.continue&quot;))
       if(i==1):
             stat()
             i=i+3
&lt;/pre&gt;
&lt;hr&gt;
=== JumbledWord Simple Logic, In Short ===
[[File:jumbledWord.gif]]
---
&lt;hr&gt;
'''Logic to create a Jumbled Word'''
&lt;hr&gt;
&lt;pre&gt;
#Get Jumbled Word and print it Horizontally
import random

def getJumbledWord(b):
    jumble=''
    l1 = [ b[i] for i in range(0, len(b)) ]
    for t in range(len(l1)):
       p=random.choice(l1)  #this randomly gets letters from the list      
       jumble=jumble+p       
       l1.remove(p)
    return jumble

b=input(&quot;Enter a word to make it jumbled : &quot;)
print(&quot;Jumbled Word : &quot;, getJumbledWord(b))
&lt;/pre&gt;
&lt;pre&gt;
Output:
Enter a word to make it jumbled : live and let live others
Jumbled Word :  vel  toldeisrte aihv len
==========================================
Enter a word to make it jumbled : junkfood
Jumbled Word :  nfukdooj
&lt;/pre&gt;
&lt;hr&gt;
'''Another Logic to create a Jumbled Word'''
&lt;hr&gt;
&lt;pre&gt;
import random
b=input(&quot;Enter a word to make it jumbled : &quot;)

def getJumbledWord1(b):
    l1 = [ b[i] for i in range(0, len(b)) ]
    random.shuffle(l1)
    str1 = ''.join(l1)
    return str1

print(&quot;Jumbled Word : &quot;, getJumbledWord1(b))
&lt;/pre&gt;

====Sample Output:====
&lt;pre&gt;
---- Output1 
Enter a word to make it jumbled : butter
Jumbled Word :  tbture

---- Output2 
Enter a word to make it jumbled : petriotism
Jumbled Word :  pittrosime
&lt;/pre&gt;

=Theory of Evolution=

== What is Evolution ? ==
Evolution is the change in heritable characteristics over successive generations. The theory of evolution explains that DNA, which acts as a carrier of genetic information from one generation to other, tends to change or mutate occasionally. These changes are reflected in next generations to come. This is how life has evolved on earth from bacteria to human beings.&lt;br&gt;
[[File:Evolution.png|500px]]

== Implementation ==
 &lt;p style=&quot;text-align:justify&quot;&gt;
An array representing DNA is stored in a file. As genes are forms of DNA, they contain information to be transferred to forthcoming generations. Assume that information is in the form of bits (in the form of 0s and 1s). A number is picked randomly from 1 to the size of the array. A new parameter has been introduced which decides whether mutation would occur or not. If the value of this new parameter is 1 (It is picked randomly from 1 to 100), then only change is reflected down the generations, otherwise it is not. The pseudo code is as follows :
&lt;/p&gt;
Input an array containing genetic information .
Randomly generate a number (say m) from 1 to length of the array. Randomly generate other number (say p) from 1 to 100.

&lt;pre&gt; 
    if p is equal to 1 then 
        if m is 1 then
          set it to 0
        else
          set it to 1
&lt;/pre&gt;
[[#TOP]]</text>
      <sha1>tord8xto5yost9mbxvhzddrgalfdfrl</sha1>
    </revision>
    <revision>
      <id>3754</id>
      <parentid>3753</parentid>
      <timestamp>2018-09-29T04:10:10Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* using 'in' operator */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="30733">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_3 Contributors of this page]
*Week 3 Playlist: https://www.youtube.com/playlist?list=PLc_j0TNIaWxOVx_z9jAM2UB3RqYNXaoEo
=List=
List is a flexible data structure used for storing a group of data separated by comma. The elements in a list need not be of the same data type.

'''Example:'''
       List_1 = [ 1, 2,3] or 
       List_1 = [&quot;coffee&quot;, &quot;Tea&quot;, &quot;Milk&quot;] or
       List_1 = [1,&quot;coffee&quot;, &quot;Tea&quot;, 3, &quot;5&quot;]

==List Creation==
a) A list can be created by simply putting values (separated by comma) between square
 brackets as given below,
&lt;pre&gt;List_1 = [1,&quot;coffee&quot;, &quot;Tea&quot;, 3, &quot;5&quot;] #this creates a list by name List_1 containing
 following items
&lt;/pre&gt;


Or,
(b)A List can be created from scratch and elements can be added 
&lt;pre&gt;
        List_2 = [ ]
        List_2.append(&quot;Kala&quot;)
        List_2.append(&quot;Mala&quot;)
&lt;/pre&gt;
Here we use &quot;append&quot;, which is a function in python that enable us to append or attach an element to a list .
&lt;pre&gt;Thus List_2 will now hold [&quot;Kala&quot;,&quot;Mala&quot;]&lt;/pre&gt;

[[#Top]]

==Operations and Methods to work with List==
&lt;pre&gt;
a = [25,30,50,90,12,13]
b = [100,300,500,200,250]
&lt;/pre&gt;
&lt;hr&gt;
&lt;table border=2&gt;
  &lt;tr&gt;
    &lt;th&gt;&lt;b&gt;Method/&lt;br&gt;Operator&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Function&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Syntax&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Output&lt;/b&gt;&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;len()&lt;/td&gt;
    &lt;td&gt;Find length of a list&lt;/td&gt;
    &lt;td&gt;len(a)&lt;/td&gt;
    &lt;td&gt;6&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;max()&lt;/td&gt;
    &lt;td&gt;Find maximum element from the list&lt;/td&gt;
    &lt;td&gt;max(a)&lt;/td&gt;
    &lt;td&gt;90&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;min()&lt;/td&gt;
    &lt;td&gt;Find minimum element from the list&lt;/td&gt;
    &lt;td&gt;min(a)&lt;/td&gt;
    &lt;td&gt;12&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sum()&lt;/td&gt;
    &lt;td&gt;Returns sum of all elements of the list&lt;/td&gt;
    &lt;td&gt;sum(a)&lt;/td&gt;
    &lt;td&gt;220&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;reverse()&lt;/td&gt;
    &lt;td&gt;Reverses the original list&lt;/td&gt;
    &lt;td&gt;a.reverse()&lt;/td&gt;
    &lt;td&gt;[13, 12, 90, 50, 30, 25]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sort()&lt;/td&gt;
    &lt;td&gt;Sorts the original list in ascending order&lt;/td&gt;
    &lt;td&gt;a.sort()&lt;/td&gt;
    &lt;td&gt;[12, 13, 25, 30, 50, 90]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sorted()&lt;/td&gt;
    &lt;td&gt;Returns the new sorted list &lt;/td&gt;
    &lt;td&gt;sorted(a)&lt;/td&gt;
    &lt;td&gt;[12, 13, 25, 30, 50, 90]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;insert()&lt;/td&gt;
    &lt;td&gt;Insert at a particular index in the list, and shifts remaining elements&lt;/td&gt;
    &lt;td&gt;a.insert(3,3)&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 3, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;append()&lt;/td&gt;
    &lt;td&gt;Adds elements/object to the end of the list&lt;/td&gt;
    &lt;td&gt;a.append(5)&lt;br&gt;a.append([10,20])&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 5]&lt;br&gt;[25, 30, 50, 90, 12, 13, [10, 20]]&lt;br&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;extend()&lt;/td&gt;
    &lt;td&gt;Adds object to the end of the list as elements not as object&lt;/td&gt;
    &lt;td&gt;a.extend([10,20])&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 10, 20]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;*&amp;nbsp;&amp;nbsp;Repeatation&lt;br&gt;operator&lt;/td&gt;
    &lt;td&gt;Repeat the list for n times and returns a new list&lt;/td&gt;
    &lt;td&gt;a*2&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 25, 30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;+ Concatenation&lt;br&gt;operator&lt;/td&gt;
    &lt;td&gt;Concatenates two lists, and returns a new list&lt;/td&gt;
    &lt;td&gt;a+b&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 100, 300, 500, 200, 250]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;index()&lt;/td&gt;
    &lt;td&gt;Finds index of a particular element in the list or not&lt;/td&gt;
    &lt;td&gt;a.index(25)&lt;br&gt;a.index(0)&lt;br&gt;&lt;/td&gt;
    &lt;td&gt;0&lt;br&gt;&lt;br&gt;ValueError: 0 is not in list&lt;br&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;in operator&lt;/td&gt;
    &lt;td&gt;Finds whether a particular element is in the list or not, returns boolean&lt;/td&gt;
    &lt;td&gt;25 in a&lt;/td&gt;
    &lt;td&gt;True&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;not in operator&lt;/td&gt;
    &lt;td&gt;Checks if element is not available in list, returns boolean&lt;/td&gt;
    &lt;td&gt;25 not in a&lt;/td&gt;
    &lt;td&gt;False&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;count()&lt;/td&gt;
    &lt;td&gt;Counts the number of occurence of an element in the list&lt;/td&gt;
    &lt;td&gt;a.count(25)&lt;/td&gt;
    &lt;td&gt;1&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;remove()&lt;/td&gt;
    &lt;td&gt;Removes an element from the list&lt;/td&gt;
    &lt;td&gt;a.remove(25)&lt;/td&gt;
    &lt;td&gt; [30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;pop()&lt;/td&gt;
    &lt;td&gt;Delete and return item at index 0&lt;/td&gt;
    &lt;td&gt;a.pop(0)&lt;/td&gt;
    &lt;td&gt;25 , a will be [30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;del&lt;/td&gt;
    &lt;td&gt;Deletes item at a particular index from the list&lt;/td&gt;
    &lt;td&gt;del a[0]&lt;/td&gt;
    &lt;td&gt;[30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;all()&lt;/td&gt;
&lt;td&gt;Returns True, if all items in list are True or it is an empty list&lt;/td&gt;
&lt;td&gt;all([True, True, True])
all([])
&lt;/td&gt;
&lt;td&gt;True&lt;br&gt;
True&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;any()&lt;/td&gt;
&lt;td&gt;Returns True, if any item in list is True else return False&lt;/td&gt;
&lt;td&gt;any([True, True, True])&lt;br&gt;
any([True, False, True])&lt;br&gt;
any([])&lt;/td&gt;
&lt;td&gt;True&lt;br&gt;False&lt;br&gt;False&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;

==Printing the List==
=== Print whole list ===
A list can be printed simply or using a ''for / while'' loop 

 print(List_2)     # To print the entire list
This code will print      
 ['Kala','Mala']     

===Print element at a particular index===
&lt;pre&gt;
Using index position
    List_2[0]     # prints 'Kala' ,i.e,the value at index position 0.
    List_2[1]     # prints 'Mala'.
&lt;/pre&gt;
=== Without using index position ===
&lt;pre&gt;
for item in List_2:   # here item is a variable used to access elements in list.
       print(item)
   This code snippet prints 
    Kala
    Mala
&lt;/pre&gt;
[[#Top]]

==Search for a particular element in list==
Elements in a list can be searched by one of the two ways:
=== using index() function===
&lt;pre&gt;
ages1 = [11,23,12,23,45]

#if element is available in the list, index() returns the index value on which, the element is
 present.
print(ages1.index(45))#Output: 4

#if element is not available in the list, index() returns ''ValueError''
print(ages1.index(0))#Output: ValueError:
&lt;/pre&gt;

In programming, if such error occurs, program gets terminated. It can be solved using exception handling.
 
e.g.
&lt;pre&gt;
ages1 = [11,23,12,23,45]

try:
    print(ages1.index(0))
except ValueError:
    print(&quot;Exception has occured&quot;)    
    print(&quot;Element is not found in the list&quot;)

&lt;/pre&gt;
&lt;pre&gt;
'''Output: 
Exception has occured
Element is not found in the list
'''&lt;/pre&gt;
[[#Top]]

=== using 'in' operator===
''in'' operator is used to check whether a particular element is available in the list or not.e.g.

&lt;pre&gt;
ages1 = [11,23,12,23,45]
no=11

if no in ages1:
    print(&quot;no is there in the list&quot;)
else:    
    print(&quot;no is NOT there in the list&quot;)
&lt;/pre&gt;
&lt;pre&gt;
#Output: no is there in the list
&lt;/pre&gt;


'''Number is not there in the list'''
&lt;pre&gt;
ages1 = [11,23,12,23,45]
no=15

if no in ages1:
    print(&quot;no is there in the list&quot;)
else:    
    print(&quot;no is NOT there in the list&quot;)
&lt;/pre&gt;
&lt;pre&gt;
Output: no is NOT there in the list
&lt;/pre&gt;
[[#Top]]

==Updating the List==
The lists can be updated using ''append'' or ''insert'' function.  Append adds the element to the end of the list and Insert adds the element in the specified position.
&lt;pre&gt;
   # add the element 'Sheela' to the end of the list.
   List_2.append(&quot;Sheela&quot;)    
   print (List_2) will output 
   ['Kala', 'Mala', 'Sheela']
&lt;/pre&gt;
   &lt;pre&gt;
# add the element &quot;Bala&quot; in the list at the index 1.
   List_2.insert(1,&quot;Bala&quot;)    
   print (List_2) will output 
   ['Kala', 'Bala','Mala', 'Sheela']
&lt;/pre&gt;

=== Extend the list by adding elements of other list at end using extend()===
&lt;pre&gt;
ages = [11,23,12,23,45]
ages.extend([57,58])
print(ages)
&lt;/pre&gt;

&lt;pre&gt;
#Output: [11, 23, 12, 23, 45, 57, 58]
&lt;/pre&gt;

==== Difference between ''append and extend'' ====
Difference between append and extend can be easily understood, by the following example.

&lt;pre&gt;
appendlist = [11,23,12,23,45]
appendlist.append([57,58])

extendlist= [11,23,12,23,45]
extendlist.extend([57,58])
&lt;/pre&gt;

&lt;pre&gt;
'''Output:
[11, 23, 12, 23, 45, [57, 58]]
[11, 23, 12, 23, 45, 57, 58]'''
&lt;/pre&gt;

[[#TOP]]

==Basic Operations on List==
===Frequency of Occurrence===
list.count(object) will return the number of times the object occur in the list.
  '''Example'''
    ages = [11,23,12,23,45,43,22,24,23]
    ages.count(23) will return
    3
    ages.count(100) will return
    0

===Length of the List===
''len(list)'' will return the length of the list ie. the number of objects in the list.
  '''Example'''
&lt;pre&gt;
    ages = [11,23,12,23,45,43,22,24,23]
    len(ages) # Output: 9
&lt;/pre&gt;

To print the objects in the list either use ''for item in list'' or ''for index in range(len(list))''
&lt;pre&gt;
    for item in ages:       
        print (item)  
        (OR)
    for index in range(len(ages)) :
        print (ages[index])
&lt;/pre&gt;

===Sort the List===
''list.sort()'' will sort the list in ascending order
  '''Example'''
    ages = [11,23,12,23,45,43,22,24,23]
    ages.sort() 
    print (ages) 
    [11, 12, 22, 23, 23, 23, 24, 43, 45]

[[#Top]]

===Sort the List using sorted() function===
''sorted(list1)'' will sort the list and return a new list, it doesn't modify the original list
&lt;br&gt;'''Example: Sort in ascending order'''
&lt;pre&gt;
ages = [11,23,12,23,45,43,22,24,23]
newList=sorted(ages)
print(newList)

#Output: [11, 12, 22, 23, 23, 23, 24, 43, 45]
&lt;/pre&gt;

&lt;br&gt;'''Example: Sort in descending order'''
&lt;pre&gt;
ages = [11,23,12,23,45,43,22,24,23]
newList=sorted(ages,reverse=True)
print(newList)

#Output: [45, 43, 24, 23, 23, 23, 22, 12, 11]
&lt;/pre&gt;

===Reverse the List===
''list.reverse()'' will reverse the original list
  '''Example'''
    ages = [11, 12, 22, 23, 23, 23, 24, 43, 45]
    ages.reverse()
    print (ages)
    [45, 43, 24, 23, 23, 23, 22, 12, 11]

Both ''sort()'' and ''reverse()'' list operation will work on numeric and alphanumeric data list.

A special use of the ''reverse()'' function is to descend a list that is sorted in ascending order.

  '''Example'''
&lt;pre&gt;
ages = [11, 12, 22, 23, 23, 23, 24, 43, 45]
ages.sort()
print(ages)
ages.reverse()
print(ages)
&lt;/pre&gt;

===Slicing===
Used to retrieve an object or objects in a range as a list  
  '''Example'''

Use ''list[index]'' to retrieve the object at the given index
&lt;pre&gt;
In [1]: student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
In [2]: student[3]     #Object at index 3.  Remember index starts at 0
Out[2]: 'Geetha'      
&lt;/pre&gt;

Use ''list[start_index : end_index + 1]'' to retrieve objects from the start_index to end_index 
&lt;pre&gt;
In [3]: student[2:4]     # Objects from index 2 to 3 as List. Note the [ and ]
Out[3]: ['Vijay', 'Geetha']   
&lt;/pre&gt;

Use ''list[:]'' to retrieve objects from the starting of the list to the end of the list. 
The default start value will be the starting index of the list (i.e. 0) and the default end value
will be the length of the list 
&lt;pre&gt;
In [4]: student[:]        # prints the entire list
Out[4]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma', 'Janani']
&lt;/pre&gt;
&lt;pre&gt;
In [5]: student[:5]       # prints the objects from the start of the list upto object at index 4
Out[5]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran']
&lt;/pre&gt;
&lt;pre&gt;
In [6]: student[2:]       # prints the objects from index 2 upto the end of the list
Out[6]: ['Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma', 'Janani']
&lt;/pre&gt;

Negative index too is available in Python. It starts from last element of the list. i.e.
&lt;pre&gt;
In [7]:student[-1]        #prints last index of list
Out[7]: 'Janani'
&lt;/pre&gt;
&lt;pre&gt;
In [8]:student[-1:-8]     #prints empty list
Out[8]: []
&lt;/pre&gt;
&lt;pre&gt;
In [9]:student[-8:-1]     #prints -8th index to -1st index elements
Out[9]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma']
&lt;/pre&gt;

[[#Top]]

===Removing Item from list ===
----

Is used to remove a specific item from the list.

'''Example:'''
 
Use list.remove(entry/value)  Or   del list[index]    Or list.pop(index)
&lt;pre&gt;
student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
student.remove(&quot;Arun&quot;)   #This will delete item &quot;Arun&quot;
         Or    
del student[0]           # This will delete item at index 0
         Or
student.pop(0)         # This will delete and return item at index 0
print(student)    
Output: &quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
&lt;/pre&gt;

[[#TOP]]

===Delete list ===
----
Used to delete complete list

'''Example'''

Use del &lt;list name&gt;
&lt;pre&gt;
student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
del student&lt;/pre&gt;

===Concatenation of two lists===
----
''+'' is the concatenation operator which is used concatenate two lists. 
&lt;pre&gt;
ages1 = [11,23,12,23,45]
ages2 = [25, 24, 43, 47]
age=ages1+ages2
print(age)
#Output: [11, 23, 12, 23, 45, 25, 24, 43, 47]
&lt;/pre&gt;

===Repeatation of a list ===
----
''*'' is the operator to repeat a particular list.
&lt;pre&gt;
ages1 = [11,23,12,23,45]
age=ages1*5 #ages1 list is repeated 5 times and stroed in ''age'' list
print(age)

#Output: [11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45]
&lt;/pre&gt;

=== all and any for List===
all() and any() are special functions to check whether all elements in iterable is ''True'' or any element is ''True''
&lt;ol&gt;
&lt;li&gt;If all elements in a list are ''True'', '''all()''' will return ''True''&lt;/li&gt;
&lt;li&gt;If iterable is ''empty'', '''all()''' will return ''True''&lt;/li&gt;
&lt;li&gt;If iterable contains at least one ''True'', '''any()''' will return ''True''&lt;/li&gt;
&lt;li&gt;If iterable is ''empty'', '''any()''' will return ''False''&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;
lsit=[True, True, True, True]
print(all(lsit))#Output: True
print(any(lsit))#Output: True

lsit1=[True, False, True, True]
print(all(lsit1))#Output: False
print(any(lsit1))#Output: True

lsit2=[False,False,False]
print(all(lsit2))#Output: False
print(any(lsit2))#Output: False

lsit3=[]
print(all(lsit3))#Output: True
print(any(lsit3))#Output: False
&lt;/pre&gt;

==Conditional Statements==
&lt;pre&gt;Conditionals are used to check the condition and change the flow of the program 
accordingly. They are realized in programming languages through if statement. The 
syntax is as follows :
&lt;pre&gt;
         if condition : 
            statement
&lt;/pre&gt;
    '''Note:''' Do not forget indentation (inserting space/tab) in the line after the
 if condition.
    
    In case you want to execute a set of statements when a condition is true and another

set of statement when the condition is false.
&lt;pre&gt;
         if condition : 
            statement 1
         else :
            statement 2
&lt;/pre&gt;

&lt;pre&gt;    
    Multiple if-else statements can be written as follows:
         if condition_1 : 
            statement 1
         elif condition_2 : # 'elif' is short for 'else if'
            statement 2
         elif condition_3 :
            statement 3
        .
        .
         else :
            final statement
&lt;/pre&gt;

[[#TOP]]

=Loops and Conditionals : Fizzbuzz=
====Loops====
Loops are used to execute a set of repetitive statements. They are realised
through 'while' and 'for' loops in programming languages. The syntax of 'for' loop is 
as follows :
&lt;pre&gt;
for LOOPVARIABLE in SEQUENCE: 
            STATEMENTS&lt;/pre&gt;

    '''e.g.''' to print all the data from a list we can write:
&lt;pre&gt;
for item in list_name:
      print(item)&lt;/pre&gt;
    OR
&lt;pre&gt;
for index in range(len(list_name)):
      print(list_name[index])
 &lt;/pre&gt;   
    The syntax for while loop is as follows :
&lt;pre&gt;    
while BOOLEANEXPRESSION: 
     STATEMENTS
     INCREMENT/DECREMENT
&lt;/pre&gt;    
    '''e.g.''' if we want to print all numbers from 1 to 10
&lt;pre&gt;
i=1
while i&lt;=10 :
    print(i,&quot; &quot;)
    i=i+1
    &lt;/pre&gt;
 
'while' loop has indefinite iteration (run-time unknown). So, there must be loop,  break statement in it.
 Whereas 'for' loop is definite in nature (i.e. known or predictable span).&lt;br&gt;

&lt;b&gt;NOTE: Python doesn't have anything like do-while loop.&lt;/b&gt;

[[#TOP]]

==Implementation==
Here, we try to demonstrate the concept of loops and conditionals through a game called Fizzbuzz. The rules are as follows :&lt;br/&gt;
[[File:fizzBuzz.gif]]

• if input number is a multiple of ’3’ print ”Fizz”
&lt;br/&gt;
• if input number is a multiple of ’5’ print ”Buzz”
&lt;br/&gt;
• if input number is a multiple of both '3' and ’5’ print ”FizzBuzz”
&lt;br/&gt;
The pseudo code is as follows :
&lt;pre&gt;
   If input no % 3 == 0 and  input no % 5 == 0 : 
       print ”Fizzbuzz”
   else if input no % 3 == 0 : 
       print ”Fizz”
   else if input no % 5 == 0 : 
       print ”Buzz”
   else :
       print the input no
&lt;/pre&gt;
 &lt;p style=&quot;text-align:justify&quot;&gt;
The order of statements execution matters to get the desired output. The highest priority condition should be first followed by other. In fizzbuzz programming, first checking should be done for both divisibility of 3 and 5. If condition not satisfied only then it should check individually for 3 or 5. So carefully choosing the order is crucial for better programming.
Note: There is some effect of present condition statements chosen on next conditions statements. That is why in first attempt fizzbuzz programming got struck.&lt;/p&gt;

Example: 
&lt;pre&gt;
#Code to achieve the above requirement in python3.
i = int(input(&quot;Enter the number&quot;)) 
if i%3 == 0 and i%5 == 0: print(i,&quot;FizzBuzz&quot;)  
elif i%5 == 0: print(i,&quot;Buzz&quot;)
elif i%3 == 0: print(i,&quot;Fizz&quot;)
else: print(i)
&lt;/pre&gt;
Lets put the same into a loop for a range given by the user.
&lt;pre&gt;
def fizzbuzzgame(start,stop):
    for i in range(start,stop+1):
        if i%3 == 0 and i%5 == 0:
            print(i,&quot;FizzBuzz&quot;)
        elif i%5 == 0:
            print(i,&quot;Buzz&quot;)
        elif i%3 == 0:
            print(i,&quot;Fizz&quot;)
        else: print(i)

fizzbuzzgame(50,100)
&lt;/pre&gt;
&lt;pre&gt;
#Output:
1235
Buzz
======================================
555
Fizzbuzz
======================================
1235
Buzz
======================================
999
Fizz
&lt;/pre&gt;

=== Fizz Buzz game in Interactive mode with Score ===
'''By Ms. Ami Tusharkant Choksi'''
&lt;pre&gt;
def fizzbuzzgame(i):
        if i%3 == 0 and i%5 == 0:
            print(i,&quot;FizzBuzz&quot;)
            return(&quot;fzbz&quot;)
        elif i%5 == 0:
            print(i,&quot;Buzz&quot;)
            return(&quot;bz&quot;)
        elif i%3 == 0:
            print(i,&quot;Fizz&quot;)
            return(&quot;fz&quot;)
        else:
            print(i)
            return(&quot;no&quot;)

ch = 'y'
fizzbuzz=0
fizz=0
buzz=0
nothing=0
print(&quot;&quot;&quot;

 /$$$$$$$$/$$                  /$$$$$$$                            
| $$_____|__/                 | $$__  $$                           
| $$      /$$/$$$$$$$$/$$$$$$$| $$  \ $$/$$   /$$/$$$$$$$$/$$$$$$$$
| $$$$$  | $|____ /$$|____ /$$| $$$$$$$| $$  | $|____ /$$|____ /$$/
| $$__/  | $$  /$$$$/   /$$$$/| $$__  $| $$  | $$  /$$$$/   /$$$$/ 
| $$     | $$ /$$__/   /$$__/ | $$  \ $| $$  | $$ /$$__/   /$$__/  
| $$     | $$/$$$$$$$$/$$$$$$$| $$$$$$$|  $$$$$$//$$$$$$$$/$$$$$$$$
|__/     |__|________|________|_______/ \______/|________|________/
                                                                  
&quot;&quot;&quot;)   
print('''

  /$$$$$$                                
 /$$__  $$                               
| $$  \__/ /$$$$$$ /$$$$$$/$$$$  /$$$$$$ 
| $$ /$$$$|____  $| $$_  $$_  $$/$$__  $$
| $$|_  $$ /$$$$$$| $$ \ $$ \ $| $$$$$$$$
| $$  \ $$/$$__  $| $$ | $$ | $| $$_____/
|  $$$$$$|  $$$$$$| $$ | $$ | $|  $$$$$$$
 \______/ \_______|__/ |__/ |__/\_______/
                                     
''')

while(ch == 'y'):
    n=int(input(&quot;Enter a Number : &quot;))
    winLoose=fizzbuzzgame(n)
    if(winLoose == &quot;fz&quot;):
        fizz+=1
    elif(winLoose == &quot;bz&quot;):
        buzz+=1
    elif(winLoose == &quot;fzbz&quot;):
        fizzbuzz+=1
    ch=input(&quot;Do you want to continue playing the game : (y/n)&quot;)
    if(ch=='n'):
        print('Congratulations, your score is\n FizzBuzz:%d\nFizz:%d\nBuzz:%d' %
(fizzbuzz,fizz,buzz))
    
'''Sample Output:

 /$$$$$$$$/$$                  /$$$$$$$                            
| $$_____|__/                 | $$__  $$                           
| $$      /$$/$$$$$$$$/$$$$$$$| $$  \ $$/$$   /$$/$$$$$$$$/$$$$$$$$
| $$$$$  | $|____ /$$|____ /$$| $$$$$$$| $$  | $|____ /$$|____ /$$/
| $$__/  | $$  /$$$$/   /$$$$/| $$__  $| $$  | $$  /$$$$/   /$$$$/ 
| $$     | $$ /$$__/   /$$__/ | $$  \ $| $$  | $$ /$$__/   /$$__/  
| $$     | $$/$$$$$$$$/$$$$$$$| $$$$$$$|  $$$$$$//$$$$$$$$/$$$$$$$$
|__/     |__|________|________|_______/ \______/|________|________/
                                                                                                                                   

  /$$$$$$                                
 /$$__  $$                               
| $$  \__/ /$$$$$$ /$$$$$$/$$$$  /$$$$$$ 
| $$ /$$$$|____  $| $$_  $$_  $$/$$__  $$
| $$|_  $$ /$$$$$$| $$ \ $$ \ $| $$$$$$$$
| $$  \ $$/$$__  $| $$ | $$ | $| $$_____/
|  $$$$$$|  $$$$$$| $$ | $$ | $|  $$$$$$$
 \______/ \_______|__/ |__/ |__/\_______/
                                         

Enter a Number : 666
666 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 777
777 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 555
555 FizzBuzz
Do you want to continue playing the game : (y/n)y
Enter a Number : 1
1
Do you want to continue playing the game : (y/n)y
Enter a Number : 789
789 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 25
25 Buzz
Do you want to continue playing the game : (y/n)n
Congratulations, your score is

FizzBuzz:1
Fizz:3
Buzz:1

&lt;/pre&gt;

=Crowd Computing: Just Estimate=
==Wisdom of Crowds==
 &lt;p style=&quot;text-align:justify&quot;&gt;
The concept of ’Wisdom of Crowds’ was proposed by Francis Galton. A weight-judging competition was carried on at the annual show of the West of England Fat Stock and Poultry Exhibition recently held at Plymouth, A fat ox having been selected, competitors bought stamped and numbered cards, each, on which to inscribe their respective names, addresses, and estimates of what the ox would weigh after it had been slaughtered. Those who guessed most successfully received prizes. About 8oo tickets were issued to the par- ticipants. The middlemost estimate of all the estimates recorded was 1207 lbs and the actual weight of the ox was 1198 lbs.&lt;/p&gt;

==Our Experiment==
 &lt;p style=&quot;text-align:justify&quot;&gt;
The crowd had to guess the number of candies/gems in a jar. Around 75 people participated in the experiment. The actual number of gems in the jar were 375. The median of all estimates came out to be 300 and the mean of all the estimates came out to be around 396. Median underestimated and mean overestimated the actual value. So according to recent studies, Trimmed mean must be used as an aggregate measure to estimate where Wisdom of Crowds is involved.
&lt;/p&gt;
[[File:Gemsjar.jpg|center|200px|caption]]

===Trimmed Mean===
 &lt;p style=&quot;text-align:justify&quot;&gt;
In these kinds of experiments, 10% trimmed mean is usually followed. For calculating 10% trimmed mean, remove 10% smallest and 10% largest values from the sample. Calculate the mean of the sample obtained. In the above experiment, the trimmed mean came out to be around 351 which is very close to the actual value.&lt;/p&gt;

==Implementation==
Here, we try to demonstrate the concept of trimmed mean through crowd computing.
&lt;ol&gt;
&lt;li&gt; Input a list of estimates done by the crowd .&lt;/li&gt;
&lt;li&gt; Sort the list.&lt;/li&gt;
&lt;li&gt; Remove the 10% smallest values.&lt;/li&gt;
&lt;li&gt; Remove the 10% largest values.
&lt;li&gt; Calculate the mean of the new list obtained .&lt;/li&gt;&lt;/ol&gt;&lt;hr&gt;

==Data of Experiment==       
    Estimates =[1000,1010,1786,2000,1500,1500,100,120,150,150,150,170,175,180,197,200,200,200,200,200,200,220,220,220,220,234,250,250,250,250,250,250,250,250,250,263,270,275,275,286,300,
                300,300,300,300,300,300,300,320,350,350,350,400, 400,400,400,400,450,467,500,500,500,500,500,500,500,550,550,600,600,600,650,700,700,720]

    '''CODE:'''
&lt;pre&gt;
Estimates = [1000,1010,1786,2000,1500,1500,100,120,150,150,150,170,175,180,197,200,200,200,200,200,200,220,220,220,220,234,250,250,250,250,250,250,250,250,250,263,270,275,275,286,300,                300,300,300,300,300,300,300,320,350,350,350,400,400,400,400,400,450,467,500,500,500,500,500,500,500,550,550,600,600,600,650,700,700,720]
Estimates.sort()
offset = int(0.10*len(Estimates))
for i in range(offset):
       del Estimates[0]
       del Estimates[-1]
Sum = 0    
for i in range(len(Estimates)):
       Sum += Estimates[i]
Mean_Value = Sum/len(Estimates)
print(&quot;Mean : &quot;, int(Mean_Value))
#Output:
Mean :  351
&lt;/pre&gt;
&lt;hr&gt;
==Trimmed Mean for the above example== 
&lt;h3&gt;Using scipy library&lt;/h3&gt;
&lt;pre&gt;
#import scipy to use the method of trim_mean
from scipy import stats
trimMean = stats.trim_mean(Estimates, 0.1) # Trim 10% at both ends
print(&quot;Trimmed Mean : &quot;,trimMean)
#Output:
Trimmed Mean :  335.1020408163265
&lt;/pre&gt;

&lt;h3&gt;Without using scipy library&lt;/h3&gt;
&lt;pre&gt;
#Trimmed mean with 10%
p=10/100
#sorted data
data=[2, 4, 6, 7, 11, 21, 81, 90, 105, 121]
n = len(data)
#Remove elements from both end
rem=int(n*p)
newData = data[rem:-rem]
mean = 0
for i in newData:
    mean += i
mean = int(mean/len(newData))
print(&quot;Trimmed mean : &quot;,mean)
#Output: Trimmed mean :  40
&lt;/pre&gt;
[[#Top]]

=Jumbled_Words Permutations: Jumbled Words=
==What are Permutations ?==
A permutation also called ordering of selected number of elements from a list denoted by nPr here we are choosing all elements of a list and so n=r&lt;br&gt;
nPr=n!/(n-r)!&lt;br&gt; as n=r
nPn=n!&lt;br&gt; which gives all possible arrangement of elements present in a list.

 For example, permutations of list [1,2,3] are [1,2,3], [1,3,2], [2,1,3], [2,3,1], 
[3,1,2], and [3,2,1]. 
The number of permutations of a list of elements nPn is given by n!. For example, there are 2! = 2 x 1 = 2 permutations of [1,2], namely [1,2] and [2,1], and 3! = 3 x 2 x 1 = 6 permutations of [1,2,3], as mentioned above.&lt;br/&gt;
[[File:Permutations.jpg]]

==Implementation==
 &lt;p style=&quot;text-align:justify&quot;&gt;
Here, we try to demonstrate the concept of permutations through jumbled words. It is a two player game in which one person presents the other person a different permutation of the word in his mind. The other person has to guess the right word. If he guesses, the he wins otherwise he loses.&lt;/p&gt;
 Input an list of words.
 Randomly pick a word from the list of words .
 Shuffle this word and present it to the other player.
 if word guesses by the player is same as the one picked from list of w
     player wins
 else
     player loses

ALTERNATE CODE TO GENERATE THIS GAME:
&lt;pre&gt;
import random
p1=input(&quot;enter player 1 name:&quot;)
p2=input(&quot;enter player 2 name:&quot;)
l=[&quot;rainbow&quot;,&quot;computer&quot;,&quot;robot&quot;,&quot;butter&quot;,&quot;vegetable&quot;,&quot;science&quot;,&quot;correct&quot;]
c1=c2=a1=a2=f1=f2=0
k=1
i=3
def play():
    n=random.choice(l)        ##n=chooses a word from list l
    l1=[]
    for j in n:
       l1.append(j)      ##creates a list for word in n
    for t in range(len(l1)):
       p=random.choice(l1)     ##this randomly displays letters in the list
       print(p)
       l1.remove(p)          ##to avoid the repetition of a letter
    s=input(&quot;enter the word:&quot;)
    if(s==n):
        print(&quot;correct&quot;)
        return 1
    else:
        print(&quot;not correct&quot;)
        print(&quot;answer is&quot;,n)
        return 0
def stat():
     print(&quot;player 1:&quot;)
     print(&quot;score:&quot;,c1)
     print(&quot;answered:&quot;,a1)
     print(&quot;failed:&quot;,f1)
     print(&quot;.............&quot;)
     print(&quot;player 2:&quot;)
     print(&quot;score:&quot;,c2)
     print(&quot;answered:&quot;,a2)
     print(&quot;failed&quot;,f2)
     if(c1&gt;c2):
         print(p1,&quot; won over &quot;,p2)
     elif(c1==c2):
         print(&quot;draw game&quot;)
     else:
         print(p2,&quot; won over &quot;,p1) 
while(i!=4):
      if(i==3):
         if(k==1):
             print(&quot;player 1 turn&quot;)
             print(&quot;your jumbled word is:&quot;)
             k=k+1
             m=play()
             if(m==1):      ##if guessed answer is correct,then score and no.of answered count will be increased
                c1+=1
                a1+=1
             else:
                f1+=1       ##else count of no.of failed to answered will be incremented
         else:
             print(&quot;player 2 turn&quot;)
             print(&quot;your jumbled word is:&quot;)
             k=k-1
             m=play()
             if(m==1):
                c2=c2+1
                a2=a2+1
             else:
                f2=f2+1
       if(i==2):
             print(&quot;present status&quot;)
             stat()
       i=int(input(&quot;enter your choice  1.stop 2.status 3.continue&quot;))
       if(i==1):
             stat()
             i=i+3
&lt;/pre&gt;
&lt;hr&gt;
=== JumbledWord Simple Logic, In Short ===
[[File:jumbledWord.gif]]
---
&lt;hr&gt;
'''Logic to create a Jumbled Word'''
&lt;hr&gt;
&lt;pre&gt;
#Get Jumbled Word and print it Horizontally
import random

def getJumbledWord(b):
    jumble=''
    l1 = [ b[i] for i in range(0, len(b)) ]
    for t in range(len(l1)):
       p=random.choice(l1)  #this randomly gets letters from the list      
       jumble=jumble+p       
       l1.remove(p)
    return jumble

b=input(&quot;Enter a word to make it jumbled : &quot;)
print(&quot;Jumbled Word : &quot;, getJumbledWord(b))
&lt;/pre&gt;
&lt;pre&gt;
Output:
Enter a word to make it jumbled : live and let live others
Jumbled Word :  vel  toldeisrte aihv len
==========================================
Enter a word to make it jumbled : junkfood
Jumbled Word :  nfukdooj
&lt;/pre&gt;
&lt;hr&gt;
'''Another Logic to create a Jumbled Word'''
&lt;hr&gt;
&lt;pre&gt;
import random
b=input(&quot;Enter a word to make it jumbled : &quot;)

def getJumbledWord1(b):
    l1 = [ b[i] for i in range(0, len(b)) ]
    random.shuffle(l1)
    str1 = ''.join(l1)
    return str1

print(&quot;Jumbled Word : &quot;, getJumbledWord1(b))
&lt;/pre&gt;

====Sample Output:====
&lt;pre&gt;
---- Output1 
Enter a word to make it jumbled : butter
Jumbled Word :  tbture

---- Output2 
Enter a word to make it jumbled : petriotism
Jumbled Word :  pittrosime
&lt;/pre&gt;

=Theory of Evolution=

== What is Evolution ? ==
Evolution is the change in heritable characteristics over successive generations. The theory of evolution explains that DNA, which acts as a carrier of genetic information from one generation to other, tends to change or mutate occasionally. These changes are reflected in next generations to come. This is how life has evolved on earth from bacteria to human beings.&lt;br&gt;
[[File:Evolution.png|500px]]

== Implementation ==
 &lt;p style=&quot;text-align:justify&quot;&gt;
An array representing DNA is stored in a file. As genes are forms of DNA, they contain information to be transferred to forthcoming generations. Assume that information is in the form of bits (in the form of 0s and 1s). A number is picked randomly from 1 to the size of the array. A new parameter has been introduced which decides whether mutation would occur or not. If the value of this new parameter is 1 (It is picked randomly from 1 to 100), then only change is reflected down the generations, otherwise it is not. The pseudo code is as follows :
&lt;/p&gt;
Input an array containing genetic information .
Randomly generate a number (say m) from 1 to length of the array. Randomly generate other number (say p) from 1 to 100.

&lt;pre&gt; 
    if p is equal to 1 then 
        if m is 1 then
          set it to 0
        else
          set it to 1
&lt;/pre&gt;
[[#TOP]]</text>
      <sha1>koh6lpgobaj7c8h3q120fb1b7kkfdvz</sha1>
    </revision>
    <revision>
      <id>3755</id>
      <parentid>3754</parentid>
      <timestamp>2018-09-29T04:10:49Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* Difference between append and extend */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="30749">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_3 Contributors of this page]
*Week 3 Playlist: https://www.youtube.com/playlist?list=PLc_j0TNIaWxOVx_z9jAM2UB3RqYNXaoEo
=List=
List is a flexible data structure used for storing a group of data separated by comma. The elements in a list need not be of the same data type.

'''Example:'''
       List_1 = [ 1, 2,3] or 
       List_1 = [&quot;coffee&quot;, &quot;Tea&quot;, &quot;Milk&quot;] or
       List_1 = [1,&quot;coffee&quot;, &quot;Tea&quot;, 3, &quot;5&quot;]

==List Creation==
a) A list can be created by simply putting values (separated by comma) between square
 brackets as given below,
&lt;pre&gt;List_1 = [1,&quot;coffee&quot;, &quot;Tea&quot;, 3, &quot;5&quot;] #this creates a list by name List_1 containing
 following items
&lt;/pre&gt;


Or,
(b)A List can be created from scratch and elements can be added 
&lt;pre&gt;
        List_2 = [ ]
        List_2.append(&quot;Kala&quot;)
        List_2.append(&quot;Mala&quot;)
&lt;/pre&gt;
Here we use &quot;append&quot;, which is a function in python that enable us to append or attach an element to a list .
&lt;pre&gt;Thus List_2 will now hold [&quot;Kala&quot;,&quot;Mala&quot;]&lt;/pre&gt;

[[#Top]]

==Operations and Methods to work with List==
&lt;pre&gt;
a = [25,30,50,90,12,13]
b = [100,300,500,200,250]
&lt;/pre&gt;
&lt;hr&gt;
&lt;table border=2&gt;
  &lt;tr&gt;
    &lt;th&gt;&lt;b&gt;Method/&lt;br&gt;Operator&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Function&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Syntax&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Output&lt;/b&gt;&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;len()&lt;/td&gt;
    &lt;td&gt;Find length of a list&lt;/td&gt;
    &lt;td&gt;len(a)&lt;/td&gt;
    &lt;td&gt;6&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;max()&lt;/td&gt;
    &lt;td&gt;Find maximum element from the list&lt;/td&gt;
    &lt;td&gt;max(a)&lt;/td&gt;
    &lt;td&gt;90&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;min()&lt;/td&gt;
    &lt;td&gt;Find minimum element from the list&lt;/td&gt;
    &lt;td&gt;min(a)&lt;/td&gt;
    &lt;td&gt;12&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sum()&lt;/td&gt;
    &lt;td&gt;Returns sum of all elements of the list&lt;/td&gt;
    &lt;td&gt;sum(a)&lt;/td&gt;
    &lt;td&gt;220&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;reverse()&lt;/td&gt;
    &lt;td&gt;Reverses the original list&lt;/td&gt;
    &lt;td&gt;a.reverse()&lt;/td&gt;
    &lt;td&gt;[13, 12, 90, 50, 30, 25]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sort()&lt;/td&gt;
    &lt;td&gt;Sorts the original list in ascending order&lt;/td&gt;
    &lt;td&gt;a.sort()&lt;/td&gt;
    &lt;td&gt;[12, 13, 25, 30, 50, 90]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sorted()&lt;/td&gt;
    &lt;td&gt;Returns the new sorted list &lt;/td&gt;
    &lt;td&gt;sorted(a)&lt;/td&gt;
    &lt;td&gt;[12, 13, 25, 30, 50, 90]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;insert()&lt;/td&gt;
    &lt;td&gt;Insert at a particular index in the list, and shifts remaining elements&lt;/td&gt;
    &lt;td&gt;a.insert(3,3)&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 3, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;append()&lt;/td&gt;
    &lt;td&gt;Adds elements/object to the end of the list&lt;/td&gt;
    &lt;td&gt;a.append(5)&lt;br&gt;a.append([10,20])&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 5]&lt;br&gt;[25, 30, 50, 90, 12, 13, [10, 20]]&lt;br&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;extend()&lt;/td&gt;
    &lt;td&gt;Adds object to the end of the list as elements not as object&lt;/td&gt;
    &lt;td&gt;a.extend([10,20])&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 10, 20]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;*&amp;nbsp;&amp;nbsp;Repeatation&lt;br&gt;operator&lt;/td&gt;
    &lt;td&gt;Repeat the list for n times and returns a new list&lt;/td&gt;
    &lt;td&gt;a*2&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 25, 30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;+ Concatenation&lt;br&gt;operator&lt;/td&gt;
    &lt;td&gt;Concatenates two lists, and returns a new list&lt;/td&gt;
    &lt;td&gt;a+b&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 100, 300, 500, 200, 250]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;index()&lt;/td&gt;
    &lt;td&gt;Finds index of a particular element in the list or not&lt;/td&gt;
    &lt;td&gt;a.index(25)&lt;br&gt;a.index(0)&lt;br&gt;&lt;/td&gt;
    &lt;td&gt;0&lt;br&gt;&lt;br&gt;ValueError: 0 is not in list&lt;br&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;in operator&lt;/td&gt;
    &lt;td&gt;Finds whether a particular element is in the list or not, returns boolean&lt;/td&gt;
    &lt;td&gt;25 in a&lt;/td&gt;
    &lt;td&gt;True&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;not in operator&lt;/td&gt;
    &lt;td&gt;Checks if element is not available in list, returns boolean&lt;/td&gt;
    &lt;td&gt;25 not in a&lt;/td&gt;
    &lt;td&gt;False&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;count()&lt;/td&gt;
    &lt;td&gt;Counts the number of occurence of an element in the list&lt;/td&gt;
    &lt;td&gt;a.count(25)&lt;/td&gt;
    &lt;td&gt;1&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;remove()&lt;/td&gt;
    &lt;td&gt;Removes an element from the list&lt;/td&gt;
    &lt;td&gt;a.remove(25)&lt;/td&gt;
    &lt;td&gt; [30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;pop()&lt;/td&gt;
    &lt;td&gt;Delete and return item at index 0&lt;/td&gt;
    &lt;td&gt;a.pop(0)&lt;/td&gt;
    &lt;td&gt;25 , a will be [30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;del&lt;/td&gt;
    &lt;td&gt;Deletes item at a particular index from the list&lt;/td&gt;
    &lt;td&gt;del a[0]&lt;/td&gt;
    &lt;td&gt;[30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;all()&lt;/td&gt;
&lt;td&gt;Returns True, if all items in list are True or it is an empty list&lt;/td&gt;
&lt;td&gt;all([True, True, True])
all([])
&lt;/td&gt;
&lt;td&gt;True&lt;br&gt;
True&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;any()&lt;/td&gt;
&lt;td&gt;Returns True, if any item in list is True else return False&lt;/td&gt;
&lt;td&gt;any([True, True, True])&lt;br&gt;
any([True, False, True])&lt;br&gt;
any([])&lt;/td&gt;
&lt;td&gt;True&lt;br&gt;False&lt;br&gt;False&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;

==Printing the List==
=== Print whole list ===
A list can be printed simply or using a ''for / while'' loop 

 print(List_2)     # To print the entire list
This code will print      
 ['Kala','Mala']     

===Print element at a particular index===
&lt;pre&gt;
Using index position
    List_2[0]     # prints 'Kala' ,i.e,the value at index position 0.
    List_2[1]     # prints 'Mala'.
&lt;/pre&gt;
=== Without using index position ===
&lt;pre&gt;
for item in List_2:   # here item is a variable used to access elements in list.
       print(item)
   This code snippet prints 
    Kala
    Mala
&lt;/pre&gt;
[[#Top]]

==Search for a particular element in list==
Elements in a list can be searched by one of the two ways:
=== using index() function===
&lt;pre&gt;
ages1 = [11,23,12,23,45]

#if element is available in the list, index() returns the index value on which, the element is
 present.
print(ages1.index(45))#Output: 4

#if element is not available in the list, index() returns ''ValueError''
print(ages1.index(0))#Output: ValueError:
&lt;/pre&gt;

In programming, if such error occurs, program gets terminated. It can be solved using exception handling.
 
e.g.
&lt;pre&gt;
ages1 = [11,23,12,23,45]

try:
    print(ages1.index(0))
except ValueError:
    print(&quot;Exception has occured&quot;)    
    print(&quot;Element is not found in the list&quot;)

&lt;/pre&gt;
&lt;pre&gt;
'''Output: 
Exception has occured
Element is not found in the list
'''&lt;/pre&gt;
[[#Top]]

=== using 'in' operator===
''in'' operator is used to check whether a particular element is available in the list or not.e.g.

&lt;pre&gt;
ages1 = [11,23,12,23,45]
no=11

if no in ages1:
    print(&quot;no is there in the list&quot;)
else:    
    print(&quot;no is NOT there in the list&quot;)
&lt;/pre&gt;
&lt;pre&gt;
#Output: no is there in the list
&lt;/pre&gt;


'''Number is not there in the list'''
&lt;pre&gt;
ages1 = [11,23,12,23,45]
no=15

if no in ages1:
    print(&quot;no is there in the list&quot;)
else:    
    print(&quot;no is NOT there in the list&quot;)
&lt;/pre&gt;
&lt;pre&gt;
Output: no is NOT there in the list
&lt;/pre&gt;
[[#Top]]

==Updating the List==
The lists can be updated using ''append'' or ''insert'' function.  Append adds the element to the end of the list and Insert adds the element in the specified position.
&lt;pre&gt;
   # add the element 'Sheela' to the end of the list.
   List_2.append(&quot;Sheela&quot;)    
   print (List_2) will output 
   ['Kala', 'Mala', 'Sheela']
&lt;/pre&gt;
   &lt;pre&gt;
# add the element &quot;Bala&quot; in the list at the index 1.
   List_2.insert(1,&quot;Bala&quot;)    
   print (List_2) will output 
   ['Kala', 'Bala','Mala', 'Sheela']
&lt;/pre&gt;

=== Extend the list by adding elements of other list at end using extend()===
&lt;pre&gt;
ages = [11,23,12,23,45]
ages.extend([57,58])
print(ages)
&lt;/pre&gt;

&lt;pre&gt;
#Output: [11, 23, 12, 23, 45, 57, 58]
&lt;/pre&gt;

==== Difference between ''append() and extend()'' ====
Difference between ''append()'' and ''extend()'' can be easily understood, by the following example.

&lt;pre&gt;
appendlist = [11,23,12,23,45]
appendlist.append([57,58])

extendlist= [11,23,12,23,45]
extendlist.extend([57,58])
&lt;/pre&gt;

&lt;pre&gt;
'''Output:
[11, 23, 12, 23, 45, [57, 58]]
[11, 23, 12, 23, 45, 57, 58]'''
&lt;/pre&gt;

[[#TOP]]

==Basic Operations on List==
===Frequency of Occurrence===
list.count(object) will return the number of times the object occur in the list.
  '''Example'''
    ages = [11,23,12,23,45,43,22,24,23]
    ages.count(23) will return
    3
    ages.count(100) will return
    0

===Length of the List===
''len(list)'' will return the length of the list ie. the number of objects in the list.
  '''Example'''
&lt;pre&gt;
    ages = [11,23,12,23,45,43,22,24,23]
    len(ages) # Output: 9
&lt;/pre&gt;

To print the objects in the list either use ''for item in list'' or ''for index in range(len(list))''
&lt;pre&gt;
    for item in ages:       
        print (item)  
        (OR)
    for index in range(len(ages)) :
        print (ages[index])
&lt;/pre&gt;

===Sort the List===
''list.sort()'' will sort the list in ascending order
  '''Example'''
    ages = [11,23,12,23,45,43,22,24,23]
    ages.sort() 
    print (ages) 
    [11, 12, 22, 23, 23, 23, 24, 43, 45]

[[#Top]]

===Sort the List using sorted() function===
''sorted(list1)'' will sort the list and return a new list, it doesn't modify the original list
&lt;br&gt;'''Example: Sort in ascending order'''
&lt;pre&gt;
ages = [11,23,12,23,45,43,22,24,23]
newList=sorted(ages)
print(newList)

#Output: [11, 12, 22, 23, 23, 23, 24, 43, 45]
&lt;/pre&gt;

&lt;br&gt;'''Example: Sort in descending order'''
&lt;pre&gt;
ages = [11,23,12,23,45,43,22,24,23]
newList=sorted(ages,reverse=True)
print(newList)

#Output: [45, 43, 24, 23, 23, 23, 22, 12, 11]
&lt;/pre&gt;

===Reverse the List===
''list.reverse()'' will reverse the original list
  '''Example'''
    ages = [11, 12, 22, 23, 23, 23, 24, 43, 45]
    ages.reverse()
    print (ages)
    [45, 43, 24, 23, 23, 23, 22, 12, 11]

Both ''sort()'' and ''reverse()'' list operation will work on numeric and alphanumeric data list.

A special use of the ''reverse()'' function is to descend a list that is sorted in ascending order.

  '''Example'''
&lt;pre&gt;
ages = [11, 12, 22, 23, 23, 23, 24, 43, 45]
ages.sort()
print(ages)
ages.reverse()
print(ages)
&lt;/pre&gt;

===Slicing===
Used to retrieve an object or objects in a range as a list  
  '''Example'''

Use ''list[index]'' to retrieve the object at the given index
&lt;pre&gt;
In [1]: student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
In [2]: student[3]     #Object at index 3.  Remember index starts at 0
Out[2]: 'Geetha'      
&lt;/pre&gt;

Use ''list[start_index : end_index + 1]'' to retrieve objects from the start_index to end_index 
&lt;pre&gt;
In [3]: student[2:4]     # Objects from index 2 to 3 as List. Note the [ and ]
Out[3]: ['Vijay', 'Geetha']   
&lt;/pre&gt;

Use ''list[:]'' to retrieve objects from the starting of the list to the end of the list. 
The default start value will be the starting index of the list (i.e. 0) and the default end value
will be the length of the list 
&lt;pre&gt;
In [4]: student[:]        # prints the entire list
Out[4]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma', 'Janani']
&lt;/pre&gt;
&lt;pre&gt;
In [5]: student[:5]       # prints the objects from the start of the list upto object at index 4
Out[5]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran']
&lt;/pre&gt;
&lt;pre&gt;
In [6]: student[2:]       # prints the objects from index 2 upto the end of the list
Out[6]: ['Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma', 'Janani']
&lt;/pre&gt;

Negative index too is available in Python. It starts from last element of the list. i.e.
&lt;pre&gt;
In [7]:student[-1]        #prints last index of list
Out[7]: 'Janani'
&lt;/pre&gt;
&lt;pre&gt;
In [8]:student[-1:-8]     #prints empty list
Out[8]: []
&lt;/pre&gt;
&lt;pre&gt;
In [9]:student[-8:-1]     #prints -8th index to -1st index elements
Out[9]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma']
&lt;/pre&gt;

[[#Top]]

===Removing Item from list ===
----

Is used to remove a specific item from the list.

'''Example:'''
 
Use list.remove(entry/value)  Or   del list[index]    Or list.pop(index)
&lt;pre&gt;
student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
student.remove(&quot;Arun&quot;)   #This will delete item &quot;Arun&quot;
         Or    
del student[0]           # This will delete item at index 0
         Or
student.pop(0)         # This will delete and return item at index 0
print(student)    
Output: &quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
&lt;/pre&gt;

[[#TOP]]

===Delete list ===
----
Used to delete complete list

'''Example'''

Use del &lt;list name&gt;
&lt;pre&gt;
student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
del student&lt;/pre&gt;

===Concatenation of two lists===
----
''+'' is the concatenation operator which is used concatenate two lists. 
&lt;pre&gt;
ages1 = [11,23,12,23,45]
ages2 = [25, 24, 43, 47]
age=ages1+ages2
print(age)
#Output: [11, 23, 12, 23, 45, 25, 24, 43, 47]
&lt;/pre&gt;

===Repeatation of a list ===
----
''*'' is the operator to repeat a particular list.
&lt;pre&gt;
ages1 = [11,23,12,23,45]
age=ages1*5 #ages1 list is repeated 5 times and stroed in ''age'' list
print(age)

#Output: [11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45]
&lt;/pre&gt;

=== all and any for List===
all() and any() are special functions to check whether all elements in iterable is ''True'' or any element is ''True''
&lt;ol&gt;
&lt;li&gt;If all elements in a list are ''True'', '''all()''' will return ''True''&lt;/li&gt;
&lt;li&gt;If iterable is ''empty'', '''all()''' will return ''True''&lt;/li&gt;
&lt;li&gt;If iterable contains at least one ''True'', '''any()''' will return ''True''&lt;/li&gt;
&lt;li&gt;If iterable is ''empty'', '''any()''' will return ''False''&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;
lsit=[True, True, True, True]
print(all(lsit))#Output: True
print(any(lsit))#Output: True

lsit1=[True, False, True, True]
print(all(lsit1))#Output: False
print(any(lsit1))#Output: True

lsit2=[False,False,False]
print(all(lsit2))#Output: False
print(any(lsit2))#Output: False

lsit3=[]
print(all(lsit3))#Output: True
print(any(lsit3))#Output: False
&lt;/pre&gt;

==Conditional Statements==
&lt;pre&gt;Conditionals are used to check the condition and change the flow of the program 
accordingly. They are realized in programming languages through if statement. The 
syntax is as follows :
&lt;pre&gt;
         if condition : 
            statement
&lt;/pre&gt;
    '''Note:''' Do not forget indentation (inserting space/tab) in the line after the
 if condition.
    
    In case you want to execute a set of statements when a condition is true and another

set of statement when the condition is false.
&lt;pre&gt;
         if condition : 
            statement 1
         else :
            statement 2
&lt;/pre&gt;

&lt;pre&gt;    
    Multiple if-else statements can be written as follows:
         if condition_1 : 
            statement 1
         elif condition_2 : # 'elif' is short for 'else if'
            statement 2
         elif condition_3 :
            statement 3
        .
        .
         else :
            final statement
&lt;/pre&gt;

[[#TOP]]

=Loops and Conditionals : Fizzbuzz=
====Loops====
Loops are used to execute a set of repetitive statements. They are realised
through 'while' and 'for' loops in programming languages. The syntax of 'for' loop is 
as follows :
&lt;pre&gt;
for LOOPVARIABLE in SEQUENCE: 
            STATEMENTS&lt;/pre&gt;

    '''e.g.''' to print all the data from a list we can write:
&lt;pre&gt;
for item in list_name:
      print(item)&lt;/pre&gt;
    OR
&lt;pre&gt;
for index in range(len(list_name)):
      print(list_name[index])
 &lt;/pre&gt;   
    The syntax for while loop is as follows :
&lt;pre&gt;    
while BOOLEANEXPRESSION: 
     STATEMENTS
     INCREMENT/DECREMENT
&lt;/pre&gt;    
    '''e.g.''' if we want to print all numbers from 1 to 10
&lt;pre&gt;
i=1
while i&lt;=10 :
    print(i,&quot; &quot;)
    i=i+1
    &lt;/pre&gt;
 
'while' loop has indefinite iteration (run-time unknown). So, there must be loop,  break statement in it.
 Whereas 'for' loop is definite in nature (i.e. known or predictable span).&lt;br&gt;

&lt;b&gt;NOTE: Python doesn't have anything like do-while loop.&lt;/b&gt;

[[#TOP]]

==Implementation==
Here, we try to demonstrate the concept of loops and conditionals through a game called Fizzbuzz. The rules are as follows :&lt;br/&gt;
[[File:fizzBuzz.gif]]

• if input number is a multiple of ’3’ print ”Fizz”
&lt;br/&gt;
• if input number is a multiple of ’5’ print ”Buzz”
&lt;br/&gt;
• if input number is a multiple of both '3' and ’5’ print ”FizzBuzz”
&lt;br/&gt;
The pseudo code is as follows :
&lt;pre&gt;
   If input no % 3 == 0 and  input no % 5 == 0 : 
       print ”Fizzbuzz”
   else if input no % 3 == 0 : 
       print ”Fizz”
   else if input no % 5 == 0 : 
       print ”Buzz”
   else :
       print the input no
&lt;/pre&gt;
 &lt;p style=&quot;text-align:justify&quot;&gt;
The order of statements execution matters to get the desired output. The highest priority condition should be first followed by other. In fizzbuzz programming, first checking should be done for both divisibility of 3 and 5. If condition not satisfied only then it should check individually for 3 or 5. So carefully choosing the order is crucial for better programming.
Note: There is some effect of present condition statements chosen on next conditions statements. That is why in first attempt fizzbuzz programming got struck.&lt;/p&gt;

Example: 
&lt;pre&gt;
#Code to achieve the above requirement in python3.
i = int(input(&quot;Enter the number&quot;)) 
if i%3 == 0 and i%5 == 0: print(i,&quot;FizzBuzz&quot;)  
elif i%5 == 0: print(i,&quot;Buzz&quot;)
elif i%3 == 0: print(i,&quot;Fizz&quot;)
else: print(i)
&lt;/pre&gt;
Lets put the same into a loop for a range given by the user.
&lt;pre&gt;
def fizzbuzzgame(start,stop):
    for i in range(start,stop+1):
        if i%3 == 0 and i%5 == 0:
            print(i,&quot;FizzBuzz&quot;)
        elif i%5 == 0:
            print(i,&quot;Buzz&quot;)
        elif i%3 == 0:
            print(i,&quot;Fizz&quot;)
        else: print(i)

fizzbuzzgame(50,100)
&lt;/pre&gt;
&lt;pre&gt;
#Output:
1235
Buzz
======================================
555
Fizzbuzz
======================================
1235
Buzz
======================================
999
Fizz
&lt;/pre&gt;

=== Fizz Buzz game in Interactive mode with Score ===
'''By Ms. Ami Tusharkant Choksi'''
&lt;pre&gt;
def fizzbuzzgame(i):
        if i%3 == 0 and i%5 == 0:
            print(i,&quot;FizzBuzz&quot;)
            return(&quot;fzbz&quot;)
        elif i%5 == 0:
            print(i,&quot;Buzz&quot;)
            return(&quot;bz&quot;)
        elif i%3 == 0:
            print(i,&quot;Fizz&quot;)
            return(&quot;fz&quot;)
        else:
            print(i)
            return(&quot;no&quot;)

ch = 'y'
fizzbuzz=0
fizz=0
buzz=0
nothing=0
print(&quot;&quot;&quot;

 /$$$$$$$$/$$                  /$$$$$$$                            
| $$_____|__/                 | $$__  $$                           
| $$      /$$/$$$$$$$$/$$$$$$$| $$  \ $$/$$   /$$/$$$$$$$$/$$$$$$$$
| $$$$$  | $|____ /$$|____ /$$| $$$$$$$| $$  | $|____ /$$|____ /$$/
| $$__/  | $$  /$$$$/   /$$$$/| $$__  $| $$  | $$  /$$$$/   /$$$$/ 
| $$     | $$ /$$__/   /$$__/ | $$  \ $| $$  | $$ /$$__/   /$$__/  
| $$     | $$/$$$$$$$$/$$$$$$$| $$$$$$$|  $$$$$$//$$$$$$$$/$$$$$$$$
|__/     |__|________|________|_______/ \______/|________|________/
                                                                  
&quot;&quot;&quot;)   
print('''

  /$$$$$$                                
 /$$__  $$                               
| $$  \__/ /$$$$$$ /$$$$$$/$$$$  /$$$$$$ 
| $$ /$$$$|____  $| $$_  $$_  $$/$$__  $$
| $$|_  $$ /$$$$$$| $$ \ $$ \ $| $$$$$$$$
| $$  \ $$/$$__  $| $$ | $$ | $| $$_____/
|  $$$$$$|  $$$$$$| $$ | $$ | $|  $$$$$$$
 \______/ \_______|__/ |__/ |__/\_______/
                                     
''')

while(ch == 'y'):
    n=int(input(&quot;Enter a Number : &quot;))
    winLoose=fizzbuzzgame(n)
    if(winLoose == &quot;fz&quot;):
        fizz+=1
    elif(winLoose == &quot;bz&quot;):
        buzz+=1
    elif(winLoose == &quot;fzbz&quot;):
        fizzbuzz+=1
    ch=input(&quot;Do you want to continue playing the game : (y/n)&quot;)
    if(ch=='n'):
        print('Congratulations, your score is\n FizzBuzz:%d\nFizz:%d\nBuzz:%d' %
(fizzbuzz,fizz,buzz))
    
'''Sample Output:

 /$$$$$$$$/$$                  /$$$$$$$                            
| $$_____|__/                 | $$__  $$                           
| $$      /$$/$$$$$$$$/$$$$$$$| $$  \ $$/$$   /$$/$$$$$$$$/$$$$$$$$
| $$$$$  | $|____ /$$|____ /$$| $$$$$$$| $$  | $|____ /$$|____ /$$/
| $$__/  | $$  /$$$$/   /$$$$/| $$__  $| $$  | $$  /$$$$/   /$$$$/ 
| $$     | $$ /$$__/   /$$__/ | $$  \ $| $$  | $$ /$$__/   /$$__/  
| $$     | $$/$$$$$$$$/$$$$$$$| $$$$$$$|  $$$$$$//$$$$$$$$/$$$$$$$$
|__/     |__|________|________|_______/ \______/|________|________/
                                                                                                                                   

  /$$$$$$                                
 /$$__  $$                               
| $$  \__/ /$$$$$$ /$$$$$$/$$$$  /$$$$$$ 
| $$ /$$$$|____  $| $$_  $$_  $$/$$__  $$
| $$|_  $$ /$$$$$$| $$ \ $$ \ $| $$$$$$$$
| $$  \ $$/$$__  $| $$ | $$ | $| $$_____/
|  $$$$$$|  $$$$$$| $$ | $$ | $|  $$$$$$$
 \______/ \_______|__/ |__/ |__/\_______/
                                         

Enter a Number : 666
666 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 777
777 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 555
555 FizzBuzz
Do you want to continue playing the game : (y/n)y
Enter a Number : 1
1
Do you want to continue playing the game : (y/n)y
Enter a Number : 789
789 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 25
25 Buzz
Do you want to continue playing the game : (y/n)n
Congratulations, your score is

FizzBuzz:1
Fizz:3
Buzz:1

&lt;/pre&gt;

=Crowd Computing: Just Estimate=
==Wisdom of Crowds==
 &lt;p style=&quot;text-align:justify&quot;&gt;
The concept of ’Wisdom of Crowds’ was proposed by Francis Galton. A weight-judging competition was carried on at the annual show of the West of England Fat Stock and Poultry Exhibition recently held at Plymouth, A fat ox having been selected, competitors bought stamped and numbered cards, each, on which to inscribe their respective names, addresses, and estimates of what the ox would weigh after it had been slaughtered. Those who guessed most successfully received prizes. About 8oo tickets were issued to the par- ticipants. The middlemost estimate of all the estimates recorded was 1207 lbs and the actual weight of the ox was 1198 lbs.&lt;/p&gt;

==Our Experiment==
 &lt;p style=&quot;text-align:justify&quot;&gt;
The crowd had to guess the number of candies/gems in a jar. Around 75 people participated in the experiment. The actual number of gems in the jar were 375. The median of all estimates came out to be 300 and the mean of all the estimates came out to be around 396. Median underestimated and mean overestimated the actual value. So according to recent studies, Trimmed mean must be used as an aggregate measure to estimate where Wisdom of Crowds is involved.
&lt;/p&gt;
[[File:Gemsjar.jpg|center|200px|caption]]

===Trimmed Mean===
 &lt;p style=&quot;text-align:justify&quot;&gt;
In these kinds of experiments, 10% trimmed mean is usually followed. For calculating 10% trimmed mean, remove 10% smallest and 10% largest values from the sample. Calculate the mean of the sample obtained. In the above experiment, the trimmed mean came out to be around 351 which is very close to the actual value.&lt;/p&gt;

==Implementation==
Here, we try to demonstrate the concept of trimmed mean through crowd computing.
&lt;ol&gt;
&lt;li&gt; Input a list of estimates done by the crowd .&lt;/li&gt;
&lt;li&gt; Sort the list.&lt;/li&gt;
&lt;li&gt; Remove the 10% smallest values.&lt;/li&gt;
&lt;li&gt; Remove the 10% largest values.
&lt;li&gt; Calculate the mean of the new list obtained .&lt;/li&gt;&lt;/ol&gt;&lt;hr&gt;

==Data of Experiment==       
    Estimates =[1000,1010,1786,2000,1500,1500,100,120,150,150,150,170,175,180,197,200,200,200,200,200,200,220,220,220,220,234,250,250,250,250,250,250,250,250,250,263,270,275,275,286,300,
                300,300,300,300,300,300,300,320,350,350,350,400, 400,400,400,400,450,467,500,500,500,500,500,500,500,550,550,600,600,600,650,700,700,720]

    '''CODE:'''
&lt;pre&gt;
Estimates = [1000,1010,1786,2000,1500,1500,100,120,150,150,150,170,175,180,197,200,200,200,200,200,200,220,220,220,220,234,250,250,250,250,250,250,250,250,250,263,270,275,275,286,300,                300,300,300,300,300,300,300,320,350,350,350,400,400,400,400,400,450,467,500,500,500,500,500,500,500,550,550,600,600,600,650,700,700,720]
Estimates.sort()
offset = int(0.10*len(Estimates))
for i in range(offset):
       del Estimates[0]
       del Estimates[-1]
Sum = 0    
for i in range(len(Estimates)):
       Sum += Estimates[i]
Mean_Value = Sum/len(Estimates)
print(&quot;Mean : &quot;, int(Mean_Value))
#Output:
Mean :  351
&lt;/pre&gt;
&lt;hr&gt;
==Trimmed Mean for the above example== 
&lt;h3&gt;Using scipy library&lt;/h3&gt;
&lt;pre&gt;
#import scipy to use the method of trim_mean
from scipy import stats
trimMean = stats.trim_mean(Estimates, 0.1) # Trim 10% at both ends
print(&quot;Trimmed Mean : &quot;,trimMean)
#Output:
Trimmed Mean :  335.1020408163265
&lt;/pre&gt;

&lt;h3&gt;Without using scipy library&lt;/h3&gt;
&lt;pre&gt;
#Trimmed mean with 10%
p=10/100
#sorted data
data=[2, 4, 6, 7, 11, 21, 81, 90, 105, 121]
n = len(data)
#Remove elements from both end
rem=int(n*p)
newData = data[rem:-rem]
mean = 0
for i in newData:
    mean += i
mean = int(mean/len(newData))
print(&quot;Trimmed mean : &quot;,mean)
#Output: Trimmed mean :  40
&lt;/pre&gt;
[[#Top]]

=Jumbled_Words Permutations: Jumbled Words=
==What are Permutations ?==
A permutation also called ordering of selected number of elements from a list denoted by nPr here we are choosing all elements of a list and so n=r&lt;br&gt;
nPr=n!/(n-r)!&lt;br&gt; as n=r
nPn=n!&lt;br&gt; which gives all possible arrangement of elements present in a list.

 For example, permutations of list [1,2,3] are [1,2,3], [1,3,2], [2,1,3], [2,3,1], 
[3,1,2], and [3,2,1]. 
The number of permutations of a list of elements nPn is given by n!. For example, there are 2! = 2 x 1 = 2 permutations of [1,2], namely [1,2] and [2,1], and 3! = 3 x 2 x 1 = 6 permutations of [1,2,3], as mentioned above.&lt;br/&gt;
[[File:Permutations.jpg]]

==Implementation==
 &lt;p style=&quot;text-align:justify&quot;&gt;
Here, we try to demonstrate the concept of permutations through jumbled words. It is a two player game in which one person presents the other person a different permutation of the word in his mind. The other person has to guess the right word. If he guesses, the he wins otherwise he loses.&lt;/p&gt;
 Input an list of words.
 Randomly pick a word from the list of words .
 Shuffle this word and present it to the other player.
 if word guesses by the player is same as the one picked from list of w
     player wins
 else
     player loses

ALTERNATE CODE TO GENERATE THIS GAME:
&lt;pre&gt;
import random
p1=input(&quot;enter player 1 name:&quot;)
p2=input(&quot;enter player 2 name:&quot;)
l=[&quot;rainbow&quot;,&quot;computer&quot;,&quot;robot&quot;,&quot;butter&quot;,&quot;vegetable&quot;,&quot;science&quot;,&quot;correct&quot;]
c1=c2=a1=a2=f1=f2=0
k=1
i=3
def play():
    n=random.choice(l)        ##n=chooses a word from list l
    l1=[]
    for j in n:
       l1.append(j)      ##creates a list for word in n
    for t in range(len(l1)):
       p=random.choice(l1)     ##this randomly displays letters in the list
       print(p)
       l1.remove(p)          ##to avoid the repetition of a letter
    s=input(&quot;enter the word:&quot;)
    if(s==n):
        print(&quot;correct&quot;)
        return 1
    else:
        print(&quot;not correct&quot;)
        print(&quot;answer is&quot;,n)
        return 0
def stat():
     print(&quot;player 1:&quot;)
     print(&quot;score:&quot;,c1)
     print(&quot;answered:&quot;,a1)
     print(&quot;failed:&quot;,f1)
     print(&quot;.............&quot;)
     print(&quot;player 2:&quot;)
     print(&quot;score:&quot;,c2)
     print(&quot;answered:&quot;,a2)
     print(&quot;failed&quot;,f2)
     if(c1&gt;c2):
         print(p1,&quot; won over &quot;,p2)
     elif(c1==c2):
         print(&quot;draw game&quot;)
     else:
         print(p2,&quot; won over &quot;,p1) 
while(i!=4):
      if(i==3):
         if(k==1):
             print(&quot;player 1 turn&quot;)
             print(&quot;your jumbled word is:&quot;)
             k=k+1
             m=play()
             if(m==1):      ##if guessed answer is correct,then score and no.of answered count will be increased
                c1+=1
                a1+=1
             else:
                f1+=1       ##else count of no.of failed to answered will be incremented
         else:
             print(&quot;player 2 turn&quot;)
             print(&quot;your jumbled word is:&quot;)
             k=k-1
             m=play()
             if(m==1):
                c2=c2+1
                a2=a2+1
             else:
                f2=f2+1
       if(i==2):
             print(&quot;present status&quot;)
             stat()
       i=int(input(&quot;enter your choice  1.stop 2.status 3.continue&quot;))
       if(i==1):
             stat()
             i=i+3
&lt;/pre&gt;
&lt;hr&gt;
=== JumbledWord Simple Logic, In Short ===
[[File:jumbledWord.gif]]
---
&lt;hr&gt;
'''Logic to create a Jumbled Word'''
&lt;hr&gt;
&lt;pre&gt;
#Get Jumbled Word and print it Horizontally
import random

def getJumbledWord(b):
    jumble=''
    l1 = [ b[i] for i in range(0, len(b)) ]
    for t in range(len(l1)):
       p=random.choice(l1)  #this randomly gets letters from the list      
       jumble=jumble+p       
       l1.remove(p)
    return jumble

b=input(&quot;Enter a word to make it jumbled : &quot;)
print(&quot;Jumbled Word : &quot;, getJumbledWord(b))
&lt;/pre&gt;
&lt;pre&gt;
Output:
Enter a word to make it jumbled : live and let live others
Jumbled Word :  vel  toldeisrte aihv len
==========================================
Enter a word to make it jumbled : junkfood
Jumbled Word :  nfukdooj
&lt;/pre&gt;
&lt;hr&gt;
'''Another Logic to create a Jumbled Word'''
&lt;hr&gt;
&lt;pre&gt;
import random
b=input(&quot;Enter a word to make it jumbled : &quot;)

def getJumbledWord1(b):
    l1 = [ b[i] for i in range(0, len(b)) ]
    random.shuffle(l1)
    str1 = ''.join(l1)
    return str1

print(&quot;Jumbled Word : &quot;, getJumbledWord1(b))
&lt;/pre&gt;

====Sample Output:====
&lt;pre&gt;
---- Output1 
Enter a word to make it jumbled : butter
Jumbled Word :  tbture

---- Output2 
Enter a word to make it jumbled : petriotism
Jumbled Word :  pittrosime
&lt;/pre&gt;

=Theory of Evolution=

== What is Evolution ? ==
Evolution is the change in heritable characteristics over successive generations. The theory of evolution explains that DNA, which acts as a carrier of genetic information from one generation to other, tends to change or mutate occasionally. These changes are reflected in next generations to come. This is how life has evolved on earth from bacteria to human beings.&lt;br&gt;
[[File:Evolution.png|500px]]

== Implementation ==
 &lt;p style=&quot;text-align:justify&quot;&gt;
An array representing DNA is stored in a file. As genes are forms of DNA, they contain information to be transferred to forthcoming generations. Assume that information is in the form of bits (in the form of 0s and 1s). A number is picked randomly from 1 to the size of the array. A new parameter has been introduced which decides whether mutation would occur or not. If the value of this new parameter is 1 (It is picked randomly from 1 to 100), then only change is reflected down the generations, otherwise it is not. The pseudo code is as follows :
&lt;/p&gt;
Input an array containing genetic information .
Randomly generate a number (say m) from 1 to length of the array. Randomly generate other number (say p) from 1 to 100.

&lt;pre&gt; 
    if p is equal to 1 then 
        if m is 1 then
          set it to 0
        else
          set it to 1
&lt;/pre&gt;
[[#TOP]]</text>
      <sha1>frjfgfbze9wbnycf8gc2ah16in3eht5</sha1>
    </revision>
    <revision>
      <id>3756</id>
      <parentid>3755</parentid>
      <timestamp>2018-09-29T04:11:01Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* Difference between append() and extend() */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="30749">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_3 Contributors of this page]
*Week 3 Playlist: https://www.youtube.com/playlist?list=PLc_j0TNIaWxOVx_z9jAM2UB3RqYNXaoEo
=List=
List is a flexible data structure used for storing a group of data separated by comma. The elements in a list need not be of the same data type.

'''Example:'''
       List_1 = [ 1, 2,3] or 
       List_1 = [&quot;coffee&quot;, &quot;Tea&quot;, &quot;Milk&quot;] or
       List_1 = [1,&quot;coffee&quot;, &quot;Tea&quot;, 3, &quot;5&quot;]

==List Creation==
a) A list can be created by simply putting values (separated by comma) between square
 brackets as given below,
&lt;pre&gt;List_1 = [1,&quot;coffee&quot;, &quot;Tea&quot;, 3, &quot;5&quot;] #this creates a list by name List_1 containing
 following items
&lt;/pre&gt;


Or,
(b)A List can be created from scratch and elements can be added 
&lt;pre&gt;
        List_2 = [ ]
        List_2.append(&quot;Kala&quot;)
        List_2.append(&quot;Mala&quot;)
&lt;/pre&gt;
Here we use &quot;append&quot;, which is a function in python that enable us to append or attach an element to a list .
&lt;pre&gt;Thus List_2 will now hold [&quot;Kala&quot;,&quot;Mala&quot;]&lt;/pre&gt;

[[#Top]]

==Operations and Methods to work with List==
&lt;pre&gt;
a = [25,30,50,90,12,13]
b = [100,300,500,200,250]
&lt;/pre&gt;
&lt;hr&gt;
&lt;table border=2&gt;
  &lt;tr&gt;
    &lt;th&gt;&lt;b&gt;Method/&lt;br&gt;Operator&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Function&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Syntax&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Output&lt;/b&gt;&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;len()&lt;/td&gt;
    &lt;td&gt;Find length of a list&lt;/td&gt;
    &lt;td&gt;len(a)&lt;/td&gt;
    &lt;td&gt;6&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;max()&lt;/td&gt;
    &lt;td&gt;Find maximum element from the list&lt;/td&gt;
    &lt;td&gt;max(a)&lt;/td&gt;
    &lt;td&gt;90&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;min()&lt;/td&gt;
    &lt;td&gt;Find minimum element from the list&lt;/td&gt;
    &lt;td&gt;min(a)&lt;/td&gt;
    &lt;td&gt;12&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sum()&lt;/td&gt;
    &lt;td&gt;Returns sum of all elements of the list&lt;/td&gt;
    &lt;td&gt;sum(a)&lt;/td&gt;
    &lt;td&gt;220&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;reverse()&lt;/td&gt;
    &lt;td&gt;Reverses the original list&lt;/td&gt;
    &lt;td&gt;a.reverse()&lt;/td&gt;
    &lt;td&gt;[13, 12, 90, 50, 30, 25]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sort()&lt;/td&gt;
    &lt;td&gt;Sorts the original list in ascending order&lt;/td&gt;
    &lt;td&gt;a.sort()&lt;/td&gt;
    &lt;td&gt;[12, 13, 25, 30, 50, 90]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sorted()&lt;/td&gt;
    &lt;td&gt;Returns the new sorted list &lt;/td&gt;
    &lt;td&gt;sorted(a)&lt;/td&gt;
    &lt;td&gt;[12, 13, 25, 30, 50, 90]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;insert()&lt;/td&gt;
    &lt;td&gt;Insert at a particular index in the list, and shifts remaining elements&lt;/td&gt;
    &lt;td&gt;a.insert(3,3)&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 3, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;append()&lt;/td&gt;
    &lt;td&gt;Adds elements/object to the end of the list&lt;/td&gt;
    &lt;td&gt;a.append(5)&lt;br&gt;a.append([10,20])&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 5]&lt;br&gt;[25, 30, 50, 90, 12, 13, [10, 20]]&lt;br&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;extend()&lt;/td&gt;
    &lt;td&gt;Adds object to the end of the list as elements not as object&lt;/td&gt;
    &lt;td&gt;a.extend([10,20])&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 10, 20]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;*&amp;nbsp;&amp;nbsp;Repeatation&lt;br&gt;operator&lt;/td&gt;
    &lt;td&gt;Repeat the list for n times and returns a new list&lt;/td&gt;
    &lt;td&gt;a*2&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 25, 30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;+ Concatenation&lt;br&gt;operator&lt;/td&gt;
    &lt;td&gt;Concatenates two lists, and returns a new list&lt;/td&gt;
    &lt;td&gt;a+b&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 100, 300, 500, 200, 250]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;index()&lt;/td&gt;
    &lt;td&gt;Finds index of a particular element in the list or not&lt;/td&gt;
    &lt;td&gt;a.index(25)&lt;br&gt;a.index(0)&lt;br&gt;&lt;/td&gt;
    &lt;td&gt;0&lt;br&gt;&lt;br&gt;ValueError: 0 is not in list&lt;br&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;in operator&lt;/td&gt;
    &lt;td&gt;Finds whether a particular element is in the list or not, returns boolean&lt;/td&gt;
    &lt;td&gt;25 in a&lt;/td&gt;
    &lt;td&gt;True&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;not in operator&lt;/td&gt;
    &lt;td&gt;Checks if element is not available in list, returns boolean&lt;/td&gt;
    &lt;td&gt;25 not in a&lt;/td&gt;
    &lt;td&gt;False&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;count()&lt;/td&gt;
    &lt;td&gt;Counts the number of occurence of an element in the list&lt;/td&gt;
    &lt;td&gt;a.count(25)&lt;/td&gt;
    &lt;td&gt;1&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;remove()&lt;/td&gt;
    &lt;td&gt;Removes an element from the list&lt;/td&gt;
    &lt;td&gt;a.remove(25)&lt;/td&gt;
    &lt;td&gt; [30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;pop()&lt;/td&gt;
    &lt;td&gt;Delete and return item at index 0&lt;/td&gt;
    &lt;td&gt;a.pop(0)&lt;/td&gt;
    &lt;td&gt;25 , a will be [30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;del&lt;/td&gt;
    &lt;td&gt;Deletes item at a particular index from the list&lt;/td&gt;
    &lt;td&gt;del a[0]&lt;/td&gt;
    &lt;td&gt;[30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;all()&lt;/td&gt;
&lt;td&gt;Returns True, if all items in list are True or it is an empty list&lt;/td&gt;
&lt;td&gt;all([True, True, True])
all([])
&lt;/td&gt;
&lt;td&gt;True&lt;br&gt;
True&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;any()&lt;/td&gt;
&lt;td&gt;Returns True, if any item in list is True else return False&lt;/td&gt;
&lt;td&gt;any([True, True, True])&lt;br&gt;
any([True, False, True])&lt;br&gt;
any([])&lt;/td&gt;
&lt;td&gt;True&lt;br&gt;False&lt;br&gt;False&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;

==Printing the List==
=== Print whole list ===
A list can be printed simply or using a ''for / while'' loop 

 print(List_2)     # To print the entire list
This code will print      
 ['Kala','Mala']     

===Print element at a particular index===
&lt;pre&gt;
Using index position
    List_2[0]     # prints 'Kala' ,i.e,the value at index position 0.
    List_2[1]     # prints 'Mala'.
&lt;/pre&gt;
=== Without using index position ===
&lt;pre&gt;
for item in List_2:   # here item is a variable used to access elements in list.
       print(item)
   This code snippet prints 
    Kala
    Mala
&lt;/pre&gt;
[[#Top]]

==Search for a particular element in list==
Elements in a list can be searched by one of the two ways:
=== using index() function===
&lt;pre&gt;
ages1 = [11,23,12,23,45]

#if element is available in the list, index() returns the index value on which, the element is
 present.
print(ages1.index(45))#Output: 4

#if element is not available in the list, index() returns ''ValueError''
print(ages1.index(0))#Output: ValueError:
&lt;/pre&gt;

In programming, if such error occurs, program gets terminated. It can be solved using exception handling.
 
e.g.
&lt;pre&gt;
ages1 = [11,23,12,23,45]

try:
    print(ages1.index(0))
except ValueError:
    print(&quot;Exception has occured&quot;)    
    print(&quot;Element is not found in the list&quot;)

&lt;/pre&gt;
&lt;pre&gt;
'''Output: 
Exception has occured
Element is not found in the list
'''&lt;/pre&gt;
[[#Top]]

=== using 'in' operator===
''in'' operator is used to check whether a particular element is available in the list or not.e.g.

&lt;pre&gt;
ages1 = [11,23,12,23,45]
no=11

if no in ages1:
    print(&quot;no is there in the list&quot;)
else:    
    print(&quot;no is NOT there in the list&quot;)
&lt;/pre&gt;
&lt;pre&gt;
#Output: no is there in the list
&lt;/pre&gt;


'''Number is not there in the list'''
&lt;pre&gt;
ages1 = [11,23,12,23,45]
no=15

if no in ages1:
    print(&quot;no is there in the list&quot;)
else:    
    print(&quot;no is NOT there in the list&quot;)
&lt;/pre&gt;
&lt;pre&gt;
Output: no is NOT there in the list
&lt;/pre&gt;
[[#Top]]

==Updating the List==
The lists can be updated using ''append'' or ''insert'' function.  Append adds the element to the end of the list and Insert adds the element in the specified position.
&lt;pre&gt;
   # add the element 'Sheela' to the end of the list.
   List_2.append(&quot;Sheela&quot;)    
   print (List_2) will output 
   ['Kala', 'Mala', 'Sheela']
&lt;/pre&gt;
   &lt;pre&gt;
# add the element &quot;Bala&quot; in the list at the index 1.
   List_2.insert(1,&quot;Bala&quot;)    
   print (List_2) will output 
   ['Kala', 'Bala','Mala', 'Sheela']
&lt;/pre&gt;

=== Extend the list by adding elements of other list at end using extend()===
&lt;pre&gt;
ages = [11,23,12,23,45]
ages.extend([57,58])
print(ages)
&lt;/pre&gt;

&lt;pre&gt;
#Output: [11, 23, 12, 23, 45, 57, 58]
&lt;/pre&gt;

==== Difference between ''append() and extend()'' ====
Difference between ''append()'' and ''extend()'' can be easily understood, by the following example.

&lt;pre&gt;
appendlist = [11,23,12,23,45]
appendlist.append([57,58])

extendlist= [11,23,12,23,45]
extendlist.extend([57,58])
&lt;/pre&gt;

&lt;pre&gt;
'''Output:
[11, 23, 12, 23, 45, [57, 58]]
[11, 23, 12, 23, 45, 57, 58]'''
&lt;/pre&gt;

[[#Top]]

==Basic Operations on List==
===Frequency of Occurrence===
list.count(object) will return the number of times the object occur in the list.
  '''Example'''
    ages = [11,23,12,23,45,43,22,24,23]
    ages.count(23) will return
    3
    ages.count(100) will return
    0

===Length of the List===
''len(list)'' will return the length of the list ie. the number of objects in the list.
  '''Example'''
&lt;pre&gt;
    ages = [11,23,12,23,45,43,22,24,23]
    len(ages) # Output: 9
&lt;/pre&gt;

To print the objects in the list either use ''for item in list'' or ''for index in range(len(list))''
&lt;pre&gt;
    for item in ages:       
        print (item)  
        (OR)
    for index in range(len(ages)) :
        print (ages[index])
&lt;/pre&gt;

===Sort the List===
''list.sort()'' will sort the list in ascending order
  '''Example'''
    ages = [11,23,12,23,45,43,22,24,23]
    ages.sort() 
    print (ages) 
    [11, 12, 22, 23, 23, 23, 24, 43, 45]

[[#Top]]

===Sort the List using sorted() function===
''sorted(list1)'' will sort the list and return a new list, it doesn't modify the original list
&lt;br&gt;'''Example: Sort in ascending order'''
&lt;pre&gt;
ages = [11,23,12,23,45,43,22,24,23]
newList=sorted(ages)
print(newList)

#Output: [11, 12, 22, 23, 23, 23, 24, 43, 45]
&lt;/pre&gt;

&lt;br&gt;'''Example: Sort in descending order'''
&lt;pre&gt;
ages = [11,23,12,23,45,43,22,24,23]
newList=sorted(ages,reverse=True)
print(newList)

#Output: [45, 43, 24, 23, 23, 23, 22, 12, 11]
&lt;/pre&gt;

===Reverse the List===
''list.reverse()'' will reverse the original list
  '''Example'''
    ages = [11, 12, 22, 23, 23, 23, 24, 43, 45]
    ages.reverse()
    print (ages)
    [45, 43, 24, 23, 23, 23, 22, 12, 11]

Both ''sort()'' and ''reverse()'' list operation will work on numeric and alphanumeric data list.

A special use of the ''reverse()'' function is to descend a list that is sorted in ascending order.

  '''Example'''
&lt;pre&gt;
ages = [11, 12, 22, 23, 23, 23, 24, 43, 45]
ages.sort()
print(ages)
ages.reverse()
print(ages)
&lt;/pre&gt;

===Slicing===
Used to retrieve an object or objects in a range as a list  
  '''Example'''

Use ''list[index]'' to retrieve the object at the given index
&lt;pre&gt;
In [1]: student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
In [2]: student[3]     #Object at index 3.  Remember index starts at 0
Out[2]: 'Geetha'      
&lt;/pre&gt;

Use ''list[start_index : end_index + 1]'' to retrieve objects from the start_index to end_index 
&lt;pre&gt;
In [3]: student[2:4]     # Objects from index 2 to 3 as List. Note the [ and ]
Out[3]: ['Vijay', 'Geetha']   
&lt;/pre&gt;

Use ''list[:]'' to retrieve objects from the starting of the list to the end of the list. 
The default start value will be the starting index of the list (i.e. 0) and the default end value
will be the length of the list 
&lt;pre&gt;
In [4]: student[:]        # prints the entire list
Out[4]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma', 'Janani']
&lt;/pre&gt;
&lt;pre&gt;
In [5]: student[:5]       # prints the objects from the start of the list upto object at index 4
Out[5]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran']
&lt;/pre&gt;
&lt;pre&gt;
In [6]: student[2:]       # prints the objects from index 2 upto the end of the list
Out[6]: ['Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma', 'Janani']
&lt;/pre&gt;

Negative index too is available in Python. It starts from last element of the list. i.e.
&lt;pre&gt;
In [7]:student[-1]        #prints last index of list
Out[7]: 'Janani'
&lt;/pre&gt;
&lt;pre&gt;
In [8]:student[-1:-8]     #prints empty list
Out[8]: []
&lt;/pre&gt;
&lt;pre&gt;
In [9]:student[-8:-1]     #prints -8th index to -1st index elements
Out[9]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma']
&lt;/pre&gt;

[[#Top]]

===Removing Item from list ===
----

Is used to remove a specific item from the list.

'''Example:'''
 
Use list.remove(entry/value)  Or   del list[index]    Or list.pop(index)
&lt;pre&gt;
student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
student.remove(&quot;Arun&quot;)   #This will delete item &quot;Arun&quot;
         Or    
del student[0]           # This will delete item at index 0
         Or
student.pop(0)         # This will delete and return item at index 0
print(student)    
Output: &quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
&lt;/pre&gt;

[[#TOP]]

===Delete list ===
----
Used to delete complete list

'''Example'''

Use del &lt;list name&gt;
&lt;pre&gt;
student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
del student&lt;/pre&gt;

===Concatenation of two lists===
----
''+'' is the concatenation operator which is used concatenate two lists. 
&lt;pre&gt;
ages1 = [11,23,12,23,45]
ages2 = [25, 24, 43, 47]
age=ages1+ages2
print(age)
#Output: [11, 23, 12, 23, 45, 25, 24, 43, 47]
&lt;/pre&gt;

===Repeatation of a list ===
----
''*'' is the operator to repeat a particular list.
&lt;pre&gt;
ages1 = [11,23,12,23,45]
age=ages1*5 #ages1 list is repeated 5 times and stroed in ''age'' list
print(age)

#Output: [11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45]
&lt;/pre&gt;

=== all and any for List===
all() and any() are special functions to check whether all elements in iterable is ''True'' or any element is ''True''
&lt;ol&gt;
&lt;li&gt;If all elements in a list are ''True'', '''all()''' will return ''True''&lt;/li&gt;
&lt;li&gt;If iterable is ''empty'', '''all()''' will return ''True''&lt;/li&gt;
&lt;li&gt;If iterable contains at least one ''True'', '''any()''' will return ''True''&lt;/li&gt;
&lt;li&gt;If iterable is ''empty'', '''any()''' will return ''False''&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;
lsit=[True, True, True, True]
print(all(lsit))#Output: True
print(any(lsit))#Output: True

lsit1=[True, False, True, True]
print(all(lsit1))#Output: False
print(any(lsit1))#Output: True

lsit2=[False,False,False]
print(all(lsit2))#Output: False
print(any(lsit2))#Output: False

lsit3=[]
print(all(lsit3))#Output: True
print(any(lsit3))#Output: False
&lt;/pre&gt;

==Conditional Statements==
&lt;pre&gt;Conditionals are used to check the condition and change the flow of the program 
accordingly. They are realized in programming languages through if statement. The 
syntax is as follows :
&lt;pre&gt;
         if condition : 
            statement
&lt;/pre&gt;
    '''Note:''' Do not forget indentation (inserting space/tab) in the line after the
 if condition.
    
    In case you want to execute a set of statements when a condition is true and another

set of statement when the condition is false.
&lt;pre&gt;
         if condition : 
            statement 1
         else :
            statement 2
&lt;/pre&gt;

&lt;pre&gt;    
    Multiple if-else statements can be written as follows:
         if condition_1 : 
            statement 1
         elif condition_2 : # 'elif' is short for 'else if'
            statement 2
         elif condition_3 :
            statement 3
        .
        .
         else :
            final statement
&lt;/pre&gt;

[[#TOP]]

=Loops and Conditionals : Fizzbuzz=
====Loops====
Loops are used to execute a set of repetitive statements. They are realised
through 'while' and 'for' loops in programming languages. The syntax of 'for' loop is 
as follows :
&lt;pre&gt;
for LOOPVARIABLE in SEQUENCE: 
            STATEMENTS&lt;/pre&gt;

    '''e.g.''' to print all the data from a list we can write:
&lt;pre&gt;
for item in list_name:
      print(item)&lt;/pre&gt;
    OR
&lt;pre&gt;
for index in range(len(list_name)):
      print(list_name[index])
 &lt;/pre&gt;   
    The syntax for while loop is as follows :
&lt;pre&gt;    
while BOOLEANEXPRESSION: 
     STATEMENTS
     INCREMENT/DECREMENT
&lt;/pre&gt;    
    '''e.g.''' if we want to print all numbers from 1 to 10
&lt;pre&gt;
i=1
while i&lt;=10 :
    print(i,&quot; &quot;)
    i=i+1
    &lt;/pre&gt;
 
'while' loop has indefinite iteration (run-time unknown). So, there must be loop,  break statement in it.
 Whereas 'for' loop is definite in nature (i.e. known or predictable span).&lt;br&gt;

&lt;b&gt;NOTE: Python doesn't have anything like do-while loop.&lt;/b&gt;

[[#TOP]]

==Implementation==
Here, we try to demonstrate the concept of loops and conditionals through a game called Fizzbuzz. The rules are as follows :&lt;br/&gt;
[[File:fizzBuzz.gif]]

• if input number is a multiple of ’3’ print ”Fizz”
&lt;br/&gt;
• if input number is a multiple of ’5’ print ”Buzz”
&lt;br/&gt;
• if input number is a multiple of both '3' and ’5’ print ”FizzBuzz”
&lt;br/&gt;
The pseudo code is as follows :
&lt;pre&gt;
   If input no % 3 == 0 and  input no % 5 == 0 : 
       print ”Fizzbuzz”
   else if input no % 3 == 0 : 
       print ”Fizz”
   else if input no % 5 == 0 : 
       print ”Buzz”
   else :
       print the input no
&lt;/pre&gt;
 &lt;p style=&quot;text-align:justify&quot;&gt;
The order of statements execution matters to get the desired output. The highest priority condition should be first followed by other. In fizzbuzz programming, first checking should be done for both divisibility of 3 and 5. If condition not satisfied only then it should check individually for 3 or 5. So carefully choosing the order is crucial for better programming.
Note: There is some effect of present condition statements chosen on next conditions statements. That is why in first attempt fizzbuzz programming got struck.&lt;/p&gt;

Example: 
&lt;pre&gt;
#Code to achieve the above requirement in python3.
i = int(input(&quot;Enter the number&quot;)) 
if i%3 == 0 and i%5 == 0: print(i,&quot;FizzBuzz&quot;)  
elif i%5 == 0: print(i,&quot;Buzz&quot;)
elif i%3 == 0: print(i,&quot;Fizz&quot;)
else: print(i)
&lt;/pre&gt;
Lets put the same into a loop for a range given by the user.
&lt;pre&gt;
def fizzbuzzgame(start,stop):
    for i in range(start,stop+1):
        if i%3 == 0 and i%5 == 0:
            print(i,&quot;FizzBuzz&quot;)
        elif i%5 == 0:
            print(i,&quot;Buzz&quot;)
        elif i%3 == 0:
            print(i,&quot;Fizz&quot;)
        else: print(i)

fizzbuzzgame(50,100)
&lt;/pre&gt;
&lt;pre&gt;
#Output:
1235
Buzz
======================================
555
Fizzbuzz
======================================
1235
Buzz
======================================
999
Fizz
&lt;/pre&gt;

=== Fizz Buzz game in Interactive mode with Score ===
'''By Ms. Ami Tusharkant Choksi'''
&lt;pre&gt;
def fizzbuzzgame(i):
        if i%3 == 0 and i%5 == 0:
            print(i,&quot;FizzBuzz&quot;)
            return(&quot;fzbz&quot;)
        elif i%5 == 0:
            print(i,&quot;Buzz&quot;)
            return(&quot;bz&quot;)
        elif i%3 == 0:
            print(i,&quot;Fizz&quot;)
            return(&quot;fz&quot;)
        else:
            print(i)
            return(&quot;no&quot;)

ch = 'y'
fizzbuzz=0
fizz=0
buzz=0
nothing=0
print(&quot;&quot;&quot;

 /$$$$$$$$/$$                  /$$$$$$$                            
| $$_____|__/                 | $$__  $$                           
| $$      /$$/$$$$$$$$/$$$$$$$| $$  \ $$/$$   /$$/$$$$$$$$/$$$$$$$$
| $$$$$  | $|____ /$$|____ /$$| $$$$$$$| $$  | $|____ /$$|____ /$$/
| $$__/  | $$  /$$$$/   /$$$$/| $$__  $| $$  | $$  /$$$$/   /$$$$/ 
| $$     | $$ /$$__/   /$$__/ | $$  \ $| $$  | $$ /$$__/   /$$__/  
| $$     | $$/$$$$$$$$/$$$$$$$| $$$$$$$|  $$$$$$//$$$$$$$$/$$$$$$$$
|__/     |__|________|________|_______/ \______/|________|________/
                                                                  
&quot;&quot;&quot;)   
print('''

  /$$$$$$                                
 /$$__  $$                               
| $$  \__/ /$$$$$$ /$$$$$$/$$$$  /$$$$$$ 
| $$ /$$$$|____  $| $$_  $$_  $$/$$__  $$
| $$|_  $$ /$$$$$$| $$ \ $$ \ $| $$$$$$$$
| $$  \ $$/$$__  $| $$ | $$ | $| $$_____/
|  $$$$$$|  $$$$$$| $$ | $$ | $|  $$$$$$$
 \______/ \_______|__/ |__/ |__/\_______/
                                     
''')

while(ch == 'y'):
    n=int(input(&quot;Enter a Number : &quot;))
    winLoose=fizzbuzzgame(n)
    if(winLoose == &quot;fz&quot;):
        fizz+=1
    elif(winLoose == &quot;bz&quot;):
        buzz+=1
    elif(winLoose == &quot;fzbz&quot;):
        fizzbuzz+=1
    ch=input(&quot;Do you want to continue playing the game : (y/n)&quot;)
    if(ch=='n'):
        print('Congratulations, your score is\n FizzBuzz:%d\nFizz:%d\nBuzz:%d' %
(fizzbuzz,fizz,buzz))
    
'''Sample Output:

 /$$$$$$$$/$$                  /$$$$$$$                            
| $$_____|__/                 | $$__  $$                           
| $$      /$$/$$$$$$$$/$$$$$$$| $$  \ $$/$$   /$$/$$$$$$$$/$$$$$$$$
| $$$$$  | $|____ /$$|____ /$$| $$$$$$$| $$  | $|____ /$$|____ /$$/
| $$__/  | $$  /$$$$/   /$$$$/| $$__  $| $$  | $$  /$$$$/   /$$$$/ 
| $$     | $$ /$$__/   /$$__/ | $$  \ $| $$  | $$ /$$__/   /$$__/  
| $$     | $$/$$$$$$$$/$$$$$$$| $$$$$$$|  $$$$$$//$$$$$$$$/$$$$$$$$
|__/     |__|________|________|_______/ \______/|________|________/
                                                                                                                                   

  /$$$$$$                                
 /$$__  $$                               
| $$  \__/ /$$$$$$ /$$$$$$/$$$$  /$$$$$$ 
| $$ /$$$$|____  $| $$_  $$_  $$/$$__  $$
| $$|_  $$ /$$$$$$| $$ \ $$ \ $| $$$$$$$$
| $$  \ $$/$$__  $| $$ | $$ | $| $$_____/
|  $$$$$$|  $$$$$$| $$ | $$ | $|  $$$$$$$
 \______/ \_______|__/ |__/ |__/\_______/
                                         

Enter a Number : 666
666 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 777
777 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 555
555 FizzBuzz
Do you want to continue playing the game : (y/n)y
Enter a Number : 1
1
Do you want to continue playing the game : (y/n)y
Enter a Number : 789
789 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 25
25 Buzz
Do you want to continue playing the game : (y/n)n
Congratulations, your score is

FizzBuzz:1
Fizz:3
Buzz:1

&lt;/pre&gt;

=Crowd Computing: Just Estimate=
==Wisdom of Crowds==
 &lt;p style=&quot;text-align:justify&quot;&gt;
The concept of ’Wisdom of Crowds’ was proposed by Francis Galton. A weight-judging competition was carried on at the annual show of the West of England Fat Stock and Poultry Exhibition recently held at Plymouth, A fat ox having been selected, competitors bought stamped and numbered cards, each, on which to inscribe their respective names, addresses, and estimates of what the ox would weigh after it had been slaughtered. Those who guessed most successfully received prizes. About 8oo tickets were issued to the par- ticipants. The middlemost estimate of all the estimates recorded was 1207 lbs and the actual weight of the ox was 1198 lbs.&lt;/p&gt;

==Our Experiment==
 &lt;p style=&quot;text-align:justify&quot;&gt;
The crowd had to guess the number of candies/gems in a jar. Around 75 people participated in the experiment. The actual number of gems in the jar were 375. The median of all estimates came out to be 300 and the mean of all the estimates came out to be around 396. Median underestimated and mean overestimated the actual value. So according to recent studies, Trimmed mean must be used as an aggregate measure to estimate where Wisdom of Crowds is involved.
&lt;/p&gt;
[[File:Gemsjar.jpg|center|200px|caption]]

===Trimmed Mean===
 &lt;p style=&quot;text-align:justify&quot;&gt;
In these kinds of experiments, 10% trimmed mean is usually followed. For calculating 10% trimmed mean, remove 10% smallest and 10% largest values from the sample. Calculate the mean of the sample obtained. In the above experiment, the trimmed mean came out to be around 351 which is very close to the actual value.&lt;/p&gt;

==Implementation==
Here, we try to demonstrate the concept of trimmed mean through crowd computing.
&lt;ol&gt;
&lt;li&gt; Input a list of estimates done by the crowd .&lt;/li&gt;
&lt;li&gt; Sort the list.&lt;/li&gt;
&lt;li&gt; Remove the 10% smallest values.&lt;/li&gt;
&lt;li&gt; Remove the 10% largest values.
&lt;li&gt; Calculate the mean of the new list obtained .&lt;/li&gt;&lt;/ol&gt;&lt;hr&gt;

==Data of Experiment==       
    Estimates =[1000,1010,1786,2000,1500,1500,100,120,150,150,150,170,175,180,197,200,200,200,200,200,200,220,220,220,220,234,250,250,250,250,250,250,250,250,250,263,270,275,275,286,300,
                300,300,300,300,300,300,300,320,350,350,350,400, 400,400,400,400,450,467,500,500,500,500,500,500,500,550,550,600,600,600,650,700,700,720]

    '''CODE:'''
&lt;pre&gt;
Estimates = [1000,1010,1786,2000,1500,1500,100,120,150,150,150,170,175,180,197,200,200,200,200,200,200,220,220,220,220,234,250,250,250,250,250,250,250,250,250,263,270,275,275,286,300,                300,300,300,300,300,300,300,320,350,350,350,400,400,400,400,400,450,467,500,500,500,500,500,500,500,550,550,600,600,600,650,700,700,720]
Estimates.sort()
offset = int(0.10*len(Estimates))
for i in range(offset):
       del Estimates[0]
       del Estimates[-1]
Sum = 0    
for i in range(len(Estimates)):
       Sum += Estimates[i]
Mean_Value = Sum/len(Estimates)
print(&quot;Mean : &quot;, int(Mean_Value))
#Output:
Mean :  351
&lt;/pre&gt;
&lt;hr&gt;
==Trimmed Mean for the above example== 
&lt;h3&gt;Using scipy library&lt;/h3&gt;
&lt;pre&gt;
#import scipy to use the method of trim_mean
from scipy import stats
trimMean = stats.trim_mean(Estimates, 0.1) # Trim 10% at both ends
print(&quot;Trimmed Mean : &quot;,trimMean)
#Output:
Trimmed Mean :  335.1020408163265
&lt;/pre&gt;

&lt;h3&gt;Without using scipy library&lt;/h3&gt;
&lt;pre&gt;
#Trimmed mean with 10%
p=10/100
#sorted data
data=[2, 4, 6, 7, 11, 21, 81, 90, 105, 121]
n = len(data)
#Remove elements from both end
rem=int(n*p)
newData = data[rem:-rem]
mean = 0
for i in newData:
    mean += i
mean = int(mean/len(newData))
print(&quot;Trimmed mean : &quot;,mean)
#Output: Trimmed mean :  40
&lt;/pre&gt;
[[#Top]]

=Jumbled_Words Permutations: Jumbled Words=
==What are Permutations ?==
A permutation also called ordering of selected number of elements from a list denoted by nPr here we are choosing all elements of a list and so n=r&lt;br&gt;
nPr=n!/(n-r)!&lt;br&gt; as n=r
nPn=n!&lt;br&gt; which gives all possible arrangement of elements present in a list.

 For example, permutations of list [1,2,3] are [1,2,3], [1,3,2], [2,1,3], [2,3,1], 
[3,1,2], and [3,2,1]. 
The number of permutations of a list of elements nPn is given by n!. For example, there are 2! = 2 x 1 = 2 permutations of [1,2], namely [1,2] and [2,1], and 3! = 3 x 2 x 1 = 6 permutations of [1,2,3], as mentioned above.&lt;br/&gt;
[[File:Permutations.jpg]]

==Implementation==
 &lt;p style=&quot;text-align:justify&quot;&gt;
Here, we try to demonstrate the concept of permutations through jumbled words. It is a two player game in which one person presents the other person a different permutation of the word in his mind. The other person has to guess the right word. If he guesses, the he wins otherwise he loses.&lt;/p&gt;
 Input an list of words.
 Randomly pick a word from the list of words .
 Shuffle this word and present it to the other player.
 if word guesses by the player is same as the one picked from list of w
     player wins
 else
     player loses

ALTERNATE CODE TO GENERATE THIS GAME:
&lt;pre&gt;
import random
p1=input(&quot;enter player 1 name:&quot;)
p2=input(&quot;enter player 2 name:&quot;)
l=[&quot;rainbow&quot;,&quot;computer&quot;,&quot;robot&quot;,&quot;butter&quot;,&quot;vegetable&quot;,&quot;science&quot;,&quot;correct&quot;]
c1=c2=a1=a2=f1=f2=0
k=1
i=3
def play():
    n=random.choice(l)        ##n=chooses a word from list l
    l1=[]
    for j in n:
       l1.append(j)      ##creates a list for word in n
    for t in range(len(l1)):
       p=random.choice(l1)     ##this randomly displays letters in the list
       print(p)
       l1.remove(p)          ##to avoid the repetition of a letter
    s=input(&quot;enter the word:&quot;)
    if(s==n):
        print(&quot;correct&quot;)
        return 1
    else:
        print(&quot;not correct&quot;)
        print(&quot;answer is&quot;,n)
        return 0
def stat():
     print(&quot;player 1:&quot;)
     print(&quot;score:&quot;,c1)
     print(&quot;answered:&quot;,a1)
     print(&quot;failed:&quot;,f1)
     print(&quot;.............&quot;)
     print(&quot;player 2:&quot;)
     print(&quot;score:&quot;,c2)
     print(&quot;answered:&quot;,a2)
     print(&quot;failed&quot;,f2)
     if(c1&gt;c2):
         print(p1,&quot; won over &quot;,p2)
     elif(c1==c2):
         print(&quot;draw game&quot;)
     else:
         print(p2,&quot; won over &quot;,p1) 
while(i!=4):
      if(i==3):
         if(k==1):
             print(&quot;player 1 turn&quot;)
             print(&quot;your jumbled word is:&quot;)
             k=k+1
             m=play()
             if(m==1):      ##if guessed answer is correct,then score and no.of answered count will be increased
                c1+=1
                a1+=1
             else:
                f1+=1       ##else count of no.of failed to answered will be incremented
         else:
             print(&quot;player 2 turn&quot;)
             print(&quot;your jumbled word is:&quot;)
             k=k-1
             m=play()
             if(m==1):
                c2=c2+1
                a2=a2+1
             else:
                f2=f2+1
       if(i==2):
             print(&quot;present status&quot;)
             stat()
       i=int(input(&quot;enter your choice  1.stop 2.status 3.continue&quot;))
       if(i==1):
             stat()
             i=i+3
&lt;/pre&gt;
&lt;hr&gt;
=== JumbledWord Simple Logic, In Short ===
[[File:jumbledWord.gif]]
---
&lt;hr&gt;
'''Logic to create a Jumbled Word'''
&lt;hr&gt;
&lt;pre&gt;
#Get Jumbled Word and print it Horizontally
import random

def getJumbledWord(b):
    jumble=''
    l1 = [ b[i] for i in range(0, len(b)) ]
    for t in range(len(l1)):
       p=random.choice(l1)  #this randomly gets letters from the list      
       jumble=jumble+p       
       l1.remove(p)
    return jumble

b=input(&quot;Enter a word to make it jumbled : &quot;)
print(&quot;Jumbled Word : &quot;, getJumbledWord(b))
&lt;/pre&gt;
&lt;pre&gt;
Output:
Enter a word to make it jumbled : live and let live others
Jumbled Word :  vel  toldeisrte aihv len
==========================================
Enter a word to make it jumbled : junkfood
Jumbled Word :  nfukdooj
&lt;/pre&gt;
&lt;hr&gt;
'''Another Logic to create a Jumbled Word'''
&lt;hr&gt;
&lt;pre&gt;
import random
b=input(&quot;Enter a word to make it jumbled : &quot;)

def getJumbledWord1(b):
    l1 = [ b[i] for i in range(0, len(b)) ]
    random.shuffle(l1)
    str1 = ''.join(l1)
    return str1

print(&quot;Jumbled Word : &quot;, getJumbledWord1(b))
&lt;/pre&gt;

====Sample Output:====
&lt;pre&gt;
---- Output1 
Enter a word to make it jumbled : butter
Jumbled Word :  tbture

---- Output2 
Enter a word to make it jumbled : petriotism
Jumbled Word :  pittrosime
&lt;/pre&gt;

=Theory of Evolution=

== What is Evolution ? ==
Evolution is the change in heritable characteristics over successive generations. The theory of evolution explains that DNA, which acts as a carrier of genetic information from one generation to other, tends to change or mutate occasionally. These changes are reflected in next generations to come. This is how life has evolved on earth from bacteria to human beings.&lt;br&gt;
[[File:Evolution.png|500px]]

== Implementation ==
 &lt;p style=&quot;text-align:justify&quot;&gt;
An array representing DNA is stored in a file. As genes are forms of DNA, they contain information to be transferred to forthcoming generations. Assume that information is in the form of bits (in the form of 0s and 1s). A number is picked randomly from 1 to the size of the array. A new parameter has been introduced which decides whether mutation would occur or not. If the value of this new parameter is 1 (It is picked randomly from 1 to 100), then only change is reflected down the generations, otherwise it is not. The pseudo code is as follows :
&lt;/p&gt;
Input an array containing genetic information .
Randomly generate a number (say m) from 1 to length of the array. Randomly generate other number (say p) from 1 to 100.

&lt;pre&gt; 
    if p is equal to 1 then 
        if m is 1 then
          set it to 0
        else
          set it to 1
&lt;/pre&gt;
[[#TOP]]</text>
      <sha1>1zwqe6utevabtecij9dnvl6iikwtcra</sha1>
    </revision>
    <revision>
      <id>3757</id>
      <parentid>3756</parentid>
      <timestamp>2018-09-29T04:11:52Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* Reverse the List */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="30759">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_3 Contributors of this page]
*Week 3 Playlist: https://www.youtube.com/playlist?list=PLc_j0TNIaWxOVx_z9jAM2UB3RqYNXaoEo
=List=
List is a flexible data structure used for storing a group of data separated by comma. The elements in a list need not be of the same data type.

'''Example:'''
       List_1 = [ 1, 2,3] or 
       List_1 = [&quot;coffee&quot;, &quot;Tea&quot;, &quot;Milk&quot;] or
       List_1 = [1,&quot;coffee&quot;, &quot;Tea&quot;, 3, &quot;5&quot;]

==List Creation==
a) A list can be created by simply putting values (separated by comma) between square
 brackets as given below,
&lt;pre&gt;List_1 = [1,&quot;coffee&quot;, &quot;Tea&quot;, 3, &quot;5&quot;] #this creates a list by name List_1 containing
 following items
&lt;/pre&gt;


Or,
(b)A List can be created from scratch and elements can be added 
&lt;pre&gt;
        List_2 = [ ]
        List_2.append(&quot;Kala&quot;)
        List_2.append(&quot;Mala&quot;)
&lt;/pre&gt;
Here we use &quot;append&quot;, which is a function in python that enable us to append or attach an element to a list .
&lt;pre&gt;Thus List_2 will now hold [&quot;Kala&quot;,&quot;Mala&quot;]&lt;/pre&gt;

[[#Top]]

==Operations and Methods to work with List==
&lt;pre&gt;
a = [25,30,50,90,12,13]
b = [100,300,500,200,250]
&lt;/pre&gt;
&lt;hr&gt;
&lt;table border=2&gt;
  &lt;tr&gt;
    &lt;th&gt;&lt;b&gt;Method/&lt;br&gt;Operator&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Function&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Syntax&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Output&lt;/b&gt;&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;len()&lt;/td&gt;
    &lt;td&gt;Find length of a list&lt;/td&gt;
    &lt;td&gt;len(a)&lt;/td&gt;
    &lt;td&gt;6&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;max()&lt;/td&gt;
    &lt;td&gt;Find maximum element from the list&lt;/td&gt;
    &lt;td&gt;max(a)&lt;/td&gt;
    &lt;td&gt;90&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;min()&lt;/td&gt;
    &lt;td&gt;Find minimum element from the list&lt;/td&gt;
    &lt;td&gt;min(a)&lt;/td&gt;
    &lt;td&gt;12&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sum()&lt;/td&gt;
    &lt;td&gt;Returns sum of all elements of the list&lt;/td&gt;
    &lt;td&gt;sum(a)&lt;/td&gt;
    &lt;td&gt;220&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;reverse()&lt;/td&gt;
    &lt;td&gt;Reverses the original list&lt;/td&gt;
    &lt;td&gt;a.reverse()&lt;/td&gt;
    &lt;td&gt;[13, 12, 90, 50, 30, 25]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sort()&lt;/td&gt;
    &lt;td&gt;Sorts the original list in ascending order&lt;/td&gt;
    &lt;td&gt;a.sort()&lt;/td&gt;
    &lt;td&gt;[12, 13, 25, 30, 50, 90]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sorted()&lt;/td&gt;
    &lt;td&gt;Returns the new sorted list &lt;/td&gt;
    &lt;td&gt;sorted(a)&lt;/td&gt;
    &lt;td&gt;[12, 13, 25, 30, 50, 90]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;insert()&lt;/td&gt;
    &lt;td&gt;Insert at a particular index in the list, and shifts remaining elements&lt;/td&gt;
    &lt;td&gt;a.insert(3,3)&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 3, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;append()&lt;/td&gt;
    &lt;td&gt;Adds elements/object to the end of the list&lt;/td&gt;
    &lt;td&gt;a.append(5)&lt;br&gt;a.append([10,20])&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 5]&lt;br&gt;[25, 30, 50, 90, 12, 13, [10, 20]]&lt;br&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;extend()&lt;/td&gt;
    &lt;td&gt;Adds object to the end of the list as elements not as object&lt;/td&gt;
    &lt;td&gt;a.extend([10,20])&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 10, 20]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;*&amp;nbsp;&amp;nbsp;Repeatation&lt;br&gt;operator&lt;/td&gt;
    &lt;td&gt;Repeat the list for n times and returns a new list&lt;/td&gt;
    &lt;td&gt;a*2&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 25, 30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;+ Concatenation&lt;br&gt;operator&lt;/td&gt;
    &lt;td&gt;Concatenates two lists, and returns a new list&lt;/td&gt;
    &lt;td&gt;a+b&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 100, 300, 500, 200, 250]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;index()&lt;/td&gt;
    &lt;td&gt;Finds index of a particular element in the list or not&lt;/td&gt;
    &lt;td&gt;a.index(25)&lt;br&gt;a.index(0)&lt;br&gt;&lt;/td&gt;
    &lt;td&gt;0&lt;br&gt;&lt;br&gt;ValueError: 0 is not in list&lt;br&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;in operator&lt;/td&gt;
    &lt;td&gt;Finds whether a particular element is in the list or not, returns boolean&lt;/td&gt;
    &lt;td&gt;25 in a&lt;/td&gt;
    &lt;td&gt;True&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;not in operator&lt;/td&gt;
    &lt;td&gt;Checks if element is not available in list, returns boolean&lt;/td&gt;
    &lt;td&gt;25 not in a&lt;/td&gt;
    &lt;td&gt;False&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;count()&lt;/td&gt;
    &lt;td&gt;Counts the number of occurence of an element in the list&lt;/td&gt;
    &lt;td&gt;a.count(25)&lt;/td&gt;
    &lt;td&gt;1&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;remove()&lt;/td&gt;
    &lt;td&gt;Removes an element from the list&lt;/td&gt;
    &lt;td&gt;a.remove(25)&lt;/td&gt;
    &lt;td&gt; [30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;pop()&lt;/td&gt;
    &lt;td&gt;Delete and return item at index 0&lt;/td&gt;
    &lt;td&gt;a.pop(0)&lt;/td&gt;
    &lt;td&gt;25 , a will be [30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;del&lt;/td&gt;
    &lt;td&gt;Deletes item at a particular index from the list&lt;/td&gt;
    &lt;td&gt;del a[0]&lt;/td&gt;
    &lt;td&gt;[30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;all()&lt;/td&gt;
&lt;td&gt;Returns True, if all items in list are True or it is an empty list&lt;/td&gt;
&lt;td&gt;all([True, True, True])
all([])
&lt;/td&gt;
&lt;td&gt;True&lt;br&gt;
True&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;any()&lt;/td&gt;
&lt;td&gt;Returns True, if any item in list is True else return False&lt;/td&gt;
&lt;td&gt;any([True, True, True])&lt;br&gt;
any([True, False, True])&lt;br&gt;
any([])&lt;/td&gt;
&lt;td&gt;True&lt;br&gt;False&lt;br&gt;False&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;

==Printing the List==
=== Print whole list ===
A list can be printed simply or using a ''for / while'' loop 

 print(List_2)     # To print the entire list
This code will print      
 ['Kala','Mala']     

===Print element at a particular index===
&lt;pre&gt;
Using index position
    List_2[0]     # prints 'Kala' ,i.e,the value at index position 0.
    List_2[1]     # prints 'Mala'.
&lt;/pre&gt;
=== Without using index position ===
&lt;pre&gt;
for item in List_2:   # here item is a variable used to access elements in list.
       print(item)
   This code snippet prints 
    Kala
    Mala
&lt;/pre&gt;
[[#Top]]

==Search for a particular element in list==
Elements in a list can be searched by one of the two ways:
=== using index() function===
&lt;pre&gt;
ages1 = [11,23,12,23,45]

#if element is available in the list, index() returns the index value on which, the element is
 present.
print(ages1.index(45))#Output: 4

#if element is not available in the list, index() returns ''ValueError''
print(ages1.index(0))#Output: ValueError:
&lt;/pre&gt;

In programming, if such error occurs, program gets terminated. It can be solved using exception handling.
 
e.g.
&lt;pre&gt;
ages1 = [11,23,12,23,45]

try:
    print(ages1.index(0))
except ValueError:
    print(&quot;Exception has occured&quot;)    
    print(&quot;Element is not found in the list&quot;)

&lt;/pre&gt;
&lt;pre&gt;
'''Output: 
Exception has occured
Element is not found in the list
'''&lt;/pre&gt;
[[#Top]]

=== using 'in' operator===
''in'' operator is used to check whether a particular element is available in the list or not.e.g.

&lt;pre&gt;
ages1 = [11,23,12,23,45]
no=11

if no in ages1:
    print(&quot;no is there in the list&quot;)
else:    
    print(&quot;no is NOT there in the list&quot;)
&lt;/pre&gt;
&lt;pre&gt;
#Output: no is there in the list
&lt;/pre&gt;


'''Number is not there in the list'''
&lt;pre&gt;
ages1 = [11,23,12,23,45]
no=15

if no in ages1:
    print(&quot;no is there in the list&quot;)
else:    
    print(&quot;no is NOT there in the list&quot;)
&lt;/pre&gt;
&lt;pre&gt;
Output: no is NOT there in the list
&lt;/pre&gt;
[[#Top]]

==Updating the List==
The lists can be updated using ''append'' or ''insert'' function.  Append adds the element to the end of the list and Insert adds the element in the specified position.
&lt;pre&gt;
   # add the element 'Sheela' to the end of the list.
   List_2.append(&quot;Sheela&quot;)    
   print (List_2) will output 
   ['Kala', 'Mala', 'Sheela']
&lt;/pre&gt;
   &lt;pre&gt;
# add the element &quot;Bala&quot; in the list at the index 1.
   List_2.insert(1,&quot;Bala&quot;)    
   print (List_2) will output 
   ['Kala', 'Bala','Mala', 'Sheela']
&lt;/pre&gt;

=== Extend the list by adding elements of other list at end using extend()===
&lt;pre&gt;
ages = [11,23,12,23,45]
ages.extend([57,58])
print(ages)
&lt;/pre&gt;

&lt;pre&gt;
#Output: [11, 23, 12, 23, 45, 57, 58]
&lt;/pre&gt;

==== Difference between ''append() and extend()'' ====
Difference between ''append()'' and ''extend()'' can be easily understood, by the following example.

&lt;pre&gt;
appendlist = [11,23,12,23,45]
appendlist.append([57,58])

extendlist= [11,23,12,23,45]
extendlist.extend([57,58])
&lt;/pre&gt;

&lt;pre&gt;
'''Output:
[11, 23, 12, 23, 45, [57, 58]]
[11, 23, 12, 23, 45, 57, 58]'''
&lt;/pre&gt;

[[#Top]]

==Basic Operations on List==
===Frequency of Occurrence===
list.count(object) will return the number of times the object occur in the list.
  '''Example'''
    ages = [11,23,12,23,45,43,22,24,23]
    ages.count(23) will return
    3
    ages.count(100) will return
    0

===Length of the List===
''len(list)'' will return the length of the list ie. the number of objects in the list.
  '''Example'''
&lt;pre&gt;
    ages = [11,23,12,23,45,43,22,24,23]
    len(ages) # Output: 9
&lt;/pre&gt;

To print the objects in the list either use ''for item in list'' or ''for index in range(len(list))''
&lt;pre&gt;
    for item in ages:       
        print (item)  
        (OR)
    for index in range(len(ages)) :
        print (ages[index])
&lt;/pre&gt;

===Sort the List===
''list.sort()'' will sort the list in ascending order
  '''Example'''
    ages = [11,23,12,23,45,43,22,24,23]
    ages.sort() 
    print (ages) 
    [11, 12, 22, 23, 23, 23, 24, 43, 45]

[[#Top]]

===Sort the List using sorted() function===
''sorted(list1)'' will sort the list and return a new list, it doesn't modify the original list
&lt;br&gt;'''Example: Sort in ascending order'''
&lt;pre&gt;
ages = [11,23,12,23,45,43,22,24,23]
newList=sorted(ages)
print(newList)

#Output: [11, 12, 22, 23, 23, 23, 24, 43, 45]
&lt;/pre&gt;

&lt;br&gt;'''Example: Sort in descending order'''
&lt;pre&gt;
ages = [11,23,12,23,45,43,22,24,23]
newList=sorted(ages,reverse=True)
print(newList)

#Output: [45, 43, 24, 23, 23, 23, 22, 12, 11]
&lt;/pre&gt;

===Reverse the List===
''list.reverse()'' will reverse the original list
  '''Example'''
    ages = [11, 12, 22, 23, 23, 23, 24, 43, 45]
    ages.reverse()
    print (ages)
    [45, 43, 24, 23, 23, 23, 22, 12, 11]

Both ''sort()'' and ''reverse()'' list operation will work on numeric and alphanumeric data list.

A special use of the ''reverse()'' function is to descend a list that is sorted in ascending order.

  '''Example'''
&lt;pre&gt;
ages = [11, 12, 22, 23, 23, 23, 24, 43, 45]
ages.sort()
print(ages)
ages.reverse()
print(ages)
&lt;/pre&gt;

[[#Top]]

===Slicing===
Used to retrieve an object or objects in a range as a list  
  '''Example'''

Use ''list[index]'' to retrieve the object at the given index
&lt;pre&gt;
In [1]: student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
In [2]: student[3]     #Object at index 3.  Remember index starts at 0
Out[2]: 'Geetha'      
&lt;/pre&gt;

Use ''list[start_index : end_index + 1]'' to retrieve objects from the start_index to end_index 
&lt;pre&gt;
In [3]: student[2:4]     # Objects from index 2 to 3 as List. Note the [ and ]
Out[3]: ['Vijay', 'Geetha']   
&lt;/pre&gt;

Use ''list[:]'' to retrieve objects from the starting of the list to the end of the list. 
The default start value will be the starting index of the list (i.e. 0) and the default end value
will be the length of the list 
&lt;pre&gt;
In [4]: student[:]        # prints the entire list
Out[4]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma', 'Janani']
&lt;/pre&gt;
&lt;pre&gt;
In [5]: student[:5]       # prints the objects from the start of the list upto object at index 4
Out[5]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran']
&lt;/pre&gt;
&lt;pre&gt;
In [6]: student[2:]       # prints the objects from index 2 upto the end of the list
Out[6]: ['Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma', 'Janani']
&lt;/pre&gt;

Negative index too is available in Python. It starts from last element of the list. i.e.
&lt;pre&gt;
In [7]:student[-1]        #prints last index of list
Out[7]: 'Janani'
&lt;/pre&gt;
&lt;pre&gt;
In [8]:student[-1:-8]     #prints empty list
Out[8]: []
&lt;/pre&gt;
&lt;pre&gt;
In [9]:student[-8:-1]     #prints -8th index to -1st index elements
Out[9]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma']
&lt;/pre&gt;

[[#Top]]

===Removing Item from list ===
----

Is used to remove a specific item from the list.

'''Example:'''
 
Use list.remove(entry/value)  Or   del list[index]    Or list.pop(index)
&lt;pre&gt;
student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
student.remove(&quot;Arun&quot;)   #This will delete item &quot;Arun&quot;
         Or    
del student[0]           # This will delete item at index 0
         Or
student.pop(0)         # This will delete and return item at index 0
print(student)    
Output: &quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
&lt;/pre&gt;

[[#TOP]]

===Delete list ===
----
Used to delete complete list

'''Example'''

Use del &lt;list name&gt;
&lt;pre&gt;
student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
del student&lt;/pre&gt;

===Concatenation of two lists===
----
''+'' is the concatenation operator which is used concatenate two lists. 
&lt;pre&gt;
ages1 = [11,23,12,23,45]
ages2 = [25, 24, 43, 47]
age=ages1+ages2
print(age)
#Output: [11, 23, 12, 23, 45, 25, 24, 43, 47]
&lt;/pre&gt;

===Repeatation of a list ===
----
''*'' is the operator to repeat a particular list.
&lt;pre&gt;
ages1 = [11,23,12,23,45]
age=ages1*5 #ages1 list is repeated 5 times and stroed in ''age'' list
print(age)

#Output: [11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45]
&lt;/pre&gt;

=== all and any for List===
all() and any() are special functions to check whether all elements in iterable is ''True'' or any element is ''True''
&lt;ol&gt;
&lt;li&gt;If all elements in a list are ''True'', '''all()''' will return ''True''&lt;/li&gt;
&lt;li&gt;If iterable is ''empty'', '''all()''' will return ''True''&lt;/li&gt;
&lt;li&gt;If iterable contains at least one ''True'', '''any()''' will return ''True''&lt;/li&gt;
&lt;li&gt;If iterable is ''empty'', '''any()''' will return ''False''&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;
lsit=[True, True, True, True]
print(all(lsit))#Output: True
print(any(lsit))#Output: True

lsit1=[True, False, True, True]
print(all(lsit1))#Output: False
print(any(lsit1))#Output: True

lsit2=[False,False,False]
print(all(lsit2))#Output: False
print(any(lsit2))#Output: False

lsit3=[]
print(all(lsit3))#Output: True
print(any(lsit3))#Output: False
&lt;/pre&gt;

==Conditional Statements==
&lt;pre&gt;Conditionals are used to check the condition and change the flow of the program 
accordingly. They are realized in programming languages through if statement. The 
syntax is as follows :
&lt;pre&gt;
         if condition : 
            statement
&lt;/pre&gt;
    '''Note:''' Do not forget indentation (inserting space/tab) in the line after the
 if condition.
    
    In case you want to execute a set of statements when a condition is true and another

set of statement when the condition is false.
&lt;pre&gt;
         if condition : 
            statement 1
         else :
            statement 2
&lt;/pre&gt;

&lt;pre&gt;    
    Multiple if-else statements can be written as follows:
         if condition_1 : 
            statement 1
         elif condition_2 : # 'elif' is short for 'else if'
            statement 2
         elif condition_3 :
            statement 3
        .
        .
         else :
            final statement
&lt;/pre&gt;

[[#TOP]]

=Loops and Conditionals : Fizzbuzz=
====Loops====
Loops are used to execute a set of repetitive statements. They are realised
through 'while' and 'for' loops in programming languages. The syntax of 'for' loop is 
as follows :
&lt;pre&gt;
for LOOPVARIABLE in SEQUENCE: 
            STATEMENTS&lt;/pre&gt;

    '''e.g.''' to print all the data from a list we can write:
&lt;pre&gt;
for item in list_name:
      print(item)&lt;/pre&gt;
    OR
&lt;pre&gt;
for index in range(len(list_name)):
      print(list_name[index])
 &lt;/pre&gt;   
    The syntax for while loop is as follows :
&lt;pre&gt;    
while BOOLEANEXPRESSION: 
     STATEMENTS
     INCREMENT/DECREMENT
&lt;/pre&gt;    
    '''e.g.''' if we want to print all numbers from 1 to 10
&lt;pre&gt;
i=1
while i&lt;=10 :
    print(i,&quot; &quot;)
    i=i+1
    &lt;/pre&gt;
 
'while' loop has indefinite iteration (run-time unknown). So, there must be loop,  break statement in it.
 Whereas 'for' loop is definite in nature (i.e. known or predictable span).&lt;br&gt;

&lt;b&gt;NOTE: Python doesn't have anything like do-while loop.&lt;/b&gt;

[[#TOP]]

==Implementation==
Here, we try to demonstrate the concept of loops and conditionals through a game called Fizzbuzz. The rules are as follows :&lt;br/&gt;
[[File:fizzBuzz.gif]]

• if input number is a multiple of ’3’ print ”Fizz”
&lt;br/&gt;
• if input number is a multiple of ’5’ print ”Buzz”
&lt;br/&gt;
• if input number is a multiple of both '3' and ’5’ print ”FizzBuzz”
&lt;br/&gt;
The pseudo code is as follows :
&lt;pre&gt;
   If input no % 3 == 0 and  input no % 5 == 0 : 
       print ”Fizzbuzz”
   else if input no % 3 == 0 : 
       print ”Fizz”
   else if input no % 5 == 0 : 
       print ”Buzz”
   else :
       print the input no
&lt;/pre&gt;
 &lt;p style=&quot;text-align:justify&quot;&gt;
The order of statements execution matters to get the desired output. The highest priority condition should be first followed by other. In fizzbuzz programming, first checking should be done for both divisibility of 3 and 5. If condition not satisfied only then it should check individually for 3 or 5. So carefully choosing the order is crucial for better programming.
Note: There is some effect of present condition statements chosen on next conditions statements. That is why in first attempt fizzbuzz programming got struck.&lt;/p&gt;

Example: 
&lt;pre&gt;
#Code to achieve the above requirement in python3.
i = int(input(&quot;Enter the number&quot;)) 
if i%3 == 0 and i%5 == 0: print(i,&quot;FizzBuzz&quot;)  
elif i%5 == 0: print(i,&quot;Buzz&quot;)
elif i%3 == 0: print(i,&quot;Fizz&quot;)
else: print(i)
&lt;/pre&gt;
Lets put the same into a loop for a range given by the user.
&lt;pre&gt;
def fizzbuzzgame(start,stop):
    for i in range(start,stop+1):
        if i%3 == 0 and i%5 == 0:
            print(i,&quot;FizzBuzz&quot;)
        elif i%5 == 0:
            print(i,&quot;Buzz&quot;)
        elif i%3 == 0:
            print(i,&quot;Fizz&quot;)
        else: print(i)

fizzbuzzgame(50,100)
&lt;/pre&gt;
&lt;pre&gt;
#Output:
1235
Buzz
======================================
555
Fizzbuzz
======================================
1235
Buzz
======================================
999
Fizz
&lt;/pre&gt;

=== Fizz Buzz game in Interactive mode with Score ===
'''By Ms. Ami Tusharkant Choksi'''
&lt;pre&gt;
def fizzbuzzgame(i):
        if i%3 == 0 and i%5 == 0:
            print(i,&quot;FizzBuzz&quot;)
            return(&quot;fzbz&quot;)
        elif i%5 == 0:
            print(i,&quot;Buzz&quot;)
            return(&quot;bz&quot;)
        elif i%3 == 0:
            print(i,&quot;Fizz&quot;)
            return(&quot;fz&quot;)
        else:
            print(i)
            return(&quot;no&quot;)

ch = 'y'
fizzbuzz=0
fizz=0
buzz=0
nothing=0
print(&quot;&quot;&quot;

 /$$$$$$$$/$$                  /$$$$$$$                            
| $$_____|__/                 | $$__  $$                           
| $$      /$$/$$$$$$$$/$$$$$$$| $$  \ $$/$$   /$$/$$$$$$$$/$$$$$$$$
| $$$$$  | $|____ /$$|____ /$$| $$$$$$$| $$  | $|____ /$$|____ /$$/
| $$__/  | $$  /$$$$/   /$$$$/| $$__  $| $$  | $$  /$$$$/   /$$$$/ 
| $$     | $$ /$$__/   /$$__/ | $$  \ $| $$  | $$ /$$__/   /$$__/  
| $$     | $$/$$$$$$$$/$$$$$$$| $$$$$$$|  $$$$$$//$$$$$$$$/$$$$$$$$
|__/     |__|________|________|_______/ \______/|________|________/
                                                                  
&quot;&quot;&quot;)   
print('''

  /$$$$$$                                
 /$$__  $$                               
| $$  \__/ /$$$$$$ /$$$$$$/$$$$  /$$$$$$ 
| $$ /$$$$|____  $| $$_  $$_  $$/$$__  $$
| $$|_  $$ /$$$$$$| $$ \ $$ \ $| $$$$$$$$
| $$  \ $$/$$__  $| $$ | $$ | $| $$_____/
|  $$$$$$|  $$$$$$| $$ | $$ | $|  $$$$$$$
 \______/ \_______|__/ |__/ |__/\_______/
                                     
''')

while(ch == 'y'):
    n=int(input(&quot;Enter a Number : &quot;))
    winLoose=fizzbuzzgame(n)
    if(winLoose == &quot;fz&quot;):
        fizz+=1
    elif(winLoose == &quot;bz&quot;):
        buzz+=1
    elif(winLoose == &quot;fzbz&quot;):
        fizzbuzz+=1
    ch=input(&quot;Do you want to continue playing the game : (y/n)&quot;)
    if(ch=='n'):
        print('Congratulations, your score is\n FizzBuzz:%d\nFizz:%d\nBuzz:%d' %
(fizzbuzz,fizz,buzz))
    
'''Sample Output:

 /$$$$$$$$/$$                  /$$$$$$$                            
| $$_____|__/                 | $$__  $$                           
| $$      /$$/$$$$$$$$/$$$$$$$| $$  \ $$/$$   /$$/$$$$$$$$/$$$$$$$$
| $$$$$  | $|____ /$$|____ /$$| $$$$$$$| $$  | $|____ /$$|____ /$$/
| $$__/  | $$  /$$$$/   /$$$$/| $$__  $| $$  | $$  /$$$$/   /$$$$/ 
| $$     | $$ /$$__/   /$$__/ | $$  \ $| $$  | $$ /$$__/   /$$__/  
| $$     | $$/$$$$$$$$/$$$$$$$| $$$$$$$|  $$$$$$//$$$$$$$$/$$$$$$$$
|__/     |__|________|________|_______/ \______/|________|________/
                                                                                                                                   

  /$$$$$$                                
 /$$__  $$                               
| $$  \__/ /$$$$$$ /$$$$$$/$$$$  /$$$$$$ 
| $$ /$$$$|____  $| $$_  $$_  $$/$$__  $$
| $$|_  $$ /$$$$$$| $$ \ $$ \ $| $$$$$$$$
| $$  \ $$/$$__  $| $$ | $$ | $| $$_____/
|  $$$$$$|  $$$$$$| $$ | $$ | $|  $$$$$$$
 \______/ \_______|__/ |__/ |__/\_______/
                                         

Enter a Number : 666
666 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 777
777 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 555
555 FizzBuzz
Do you want to continue playing the game : (y/n)y
Enter a Number : 1
1
Do you want to continue playing the game : (y/n)y
Enter a Number : 789
789 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 25
25 Buzz
Do you want to continue playing the game : (y/n)n
Congratulations, your score is

FizzBuzz:1
Fizz:3
Buzz:1

&lt;/pre&gt;

=Crowd Computing: Just Estimate=
==Wisdom of Crowds==
 &lt;p style=&quot;text-align:justify&quot;&gt;
The concept of ’Wisdom of Crowds’ was proposed by Francis Galton. A weight-judging competition was carried on at the annual show of the West of England Fat Stock and Poultry Exhibition recently held at Plymouth, A fat ox having been selected, competitors bought stamped and numbered cards, each, on which to inscribe their respective names, addresses, and estimates of what the ox would weigh after it had been slaughtered. Those who guessed most successfully received prizes. About 8oo tickets were issued to the par- ticipants. The middlemost estimate of all the estimates recorded was 1207 lbs and the actual weight of the ox was 1198 lbs.&lt;/p&gt;

==Our Experiment==
 &lt;p style=&quot;text-align:justify&quot;&gt;
The crowd had to guess the number of candies/gems in a jar. Around 75 people participated in the experiment. The actual number of gems in the jar were 375. The median of all estimates came out to be 300 and the mean of all the estimates came out to be around 396. Median underestimated and mean overestimated the actual value. So according to recent studies, Trimmed mean must be used as an aggregate measure to estimate where Wisdom of Crowds is involved.
&lt;/p&gt;
[[File:Gemsjar.jpg|center|200px|caption]]

===Trimmed Mean===
 &lt;p style=&quot;text-align:justify&quot;&gt;
In these kinds of experiments, 10% trimmed mean is usually followed. For calculating 10% trimmed mean, remove 10% smallest and 10% largest values from the sample. Calculate the mean of the sample obtained. In the above experiment, the trimmed mean came out to be around 351 which is very close to the actual value.&lt;/p&gt;

==Implementation==
Here, we try to demonstrate the concept of trimmed mean through crowd computing.
&lt;ol&gt;
&lt;li&gt; Input a list of estimates done by the crowd .&lt;/li&gt;
&lt;li&gt; Sort the list.&lt;/li&gt;
&lt;li&gt; Remove the 10% smallest values.&lt;/li&gt;
&lt;li&gt; Remove the 10% largest values.
&lt;li&gt; Calculate the mean of the new list obtained .&lt;/li&gt;&lt;/ol&gt;&lt;hr&gt;

==Data of Experiment==       
    Estimates =[1000,1010,1786,2000,1500,1500,100,120,150,150,150,170,175,180,197,200,200,200,200,200,200,220,220,220,220,234,250,250,250,250,250,250,250,250,250,263,270,275,275,286,300,
                300,300,300,300,300,300,300,320,350,350,350,400, 400,400,400,400,450,467,500,500,500,500,500,500,500,550,550,600,600,600,650,700,700,720]

    '''CODE:'''
&lt;pre&gt;
Estimates = [1000,1010,1786,2000,1500,1500,100,120,150,150,150,170,175,180,197,200,200,200,200,200,200,220,220,220,220,234,250,250,250,250,250,250,250,250,250,263,270,275,275,286,300,                300,300,300,300,300,300,300,320,350,350,350,400,400,400,400,400,450,467,500,500,500,500,500,500,500,550,550,600,600,600,650,700,700,720]
Estimates.sort()
offset = int(0.10*len(Estimates))
for i in range(offset):
       del Estimates[0]
       del Estimates[-1]
Sum = 0    
for i in range(len(Estimates)):
       Sum += Estimates[i]
Mean_Value = Sum/len(Estimates)
print(&quot;Mean : &quot;, int(Mean_Value))
#Output:
Mean :  351
&lt;/pre&gt;
&lt;hr&gt;
==Trimmed Mean for the above example== 
&lt;h3&gt;Using scipy library&lt;/h3&gt;
&lt;pre&gt;
#import scipy to use the method of trim_mean
from scipy import stats
trimMean = stats.trim_mean(Estimates, 0.1) # Trim 10% at both ends
print(&quot;Trimmed Mean : &quot;,trimMean)
#Output:
Trimmed Mean :  335.1020408163265
&lt;/pre&gt;

&lt;h3&gt;Without using scipy library&lt;/h3&gt;
&lt;pre&gt;
#Trimmed mean with 10%
p=10/100
#sorted data
data=[2, 4, 6, 7, 11, 21, 81, 90, 105, 121]
n = len(data)
#Remove elements from both end
rem=int(n*p)
newData = data[rem:-rem]
mean = 0
for i in newData:
    mean += i
mean = int(mean/len(newData))
print(&quot;Trimmed mean : &quot;,mean)
#Output: Trimmed mean :  40
&lt;/pre&gt;
[[#Top]]

=Jumbled_Words Permutations: Jumbled Words=
==What are Permutations ?==
A permutation also called ordering of selected number of elements from a list denoted by nPr here we are choosing all elements of a list and so n=r&lt;br&gt;
nPr=n!/(n-r)!&lt;br&gt; as n=r
nPn=n!&lt;br&gt; which gives all possible arrangement of elements present in a list.

 For example, permutations of list [1,2,3] are [1,2,3], [1,3,2], [2,1,3], [2,3,1], 
[3,1,2], and [3,2,1]. 
The number of permutations of a list of elements nPn is given by n!. For example, there are 2! = 2 x 1 = 2 permutations of [1,2], namely [1,2] and [2,1], and 3! = 3 x 2 x 1 = 6 permutations of [1,2,3], as mentioned above.&lt;br/&gt;
[[File:Permutations.jpg]]

==Implementation==
 &lt;p style=&quot;text-align:justify&quot;&gt;
Here, we try to demonstrate the concept of permutations through jumbled words. It is a two player game in which one person presents the other person a different permutation of the word in his mind. The other person has to guess the right word. If he guesses, the he wins otherwise he loses.&lt;/p&gt;
 Input an list of words.
 Randomly pick a word from the list of words .
 Shuffle this word and present it to the other player.
 if word guesses by the player is same as the one picked from list of w
     player wins
 else
     player loses

ALTERNATE CODE TO GENERATE THIS GAME:
&lt;pre&gt;
import random
p1=input(&quot;enter player 1 name:&quot;)
p2=input(&quot;enter player 2 name:&quot;)
l=[&quot;rainbow&quot;,&quot;computer&quot;,&quot;robot&quot;,&quot;butter&quot;,&quot;vegetable&quot;,&quot;science&quot;,&quot;correct&quot;]
c1=c2=a1=a2=f1=f2=0
k=1
i=3
def play():
    n=random.choice(l)        ##n=chooses a word from list l
    l1=[]
    for j in n:
       l1.append(j)      ##creates a list for word in n
    for t in range(len(l1)):
       p=random.choice(l1)     ##this randomly displays letters in the list
       print(p)
       l1.remove(p)          ##to avoid the repetition of a letter
    s=input(&quot;enter the word:&quot;)
    if(s==n):
        print(&quot;correct&quot;)
        return 1
    else:
        print(&quot;not correct&quot;)
        print(&quot;answer is&quot;,n)
        return 0
def stat():
     print(&quot;player 1:&quot;)
     print(&quot;score:&quot;,c1)
     print(&quot;answered:&quot;,a1)
     print(&quot;failed:&quot;,f1)
     print(&quot;.............&quot;)
     print(&quot;player 2:&quot;)
     print(&quot;score:&quot;,c2)
     print(&quot;answered:&quot;,a2)
     print(&quot;failed&quot;,f2)
     if(c1&gt;c2):
         print(p1,&quot; won over &quot;,p2)
     elif(c1==c2):
         print(&quot;draw game&quot;)
     else:
         print(p2,&quot; won over &quot;,p1) 
while(i!=4):
      if(i==3):
         if(k==1):
             print(&quot;player 1 turn&quot;)
             print(&quot;your jumbled word is:&quot;)
             k=k+1
             m=play()
             if(m==1):      ##if guessed answer is correct,then score and no.of answered count will be increased
                c1+=1
                a1+=1
             else:
                f1+=1       ##else count of no.of failed to answered will be incremented
         else:
             print(&quot;player 2 turn&quot;)
             print(&quot;your jumbled word is:&quot;)
             k=k-1
             m=play()
             if(m==1):
                c2=c2+1
                a2=a2+1
             else:
                f2=f2+1
       if(i==2):
             print(&quot;present status&quot;)
             stat()
       i=int(input(&quot;enter your choice  1.stop 2.status 3.continue&quot;))
       if(i==1):
             stat()
             i=i+3
&lt;/pre&gt;
&lt;hr&gt;
=== JumbledWord Simple Logic, In Short ===
[[File:jumbledWord.gif]]
---
&lt;hr&gt;
'''Logic to create a Jumbled Word'''
&lt;hr&gt;
&lt;pre&gt;
#Get Jumbled Word and print it Horizontally
import random

def getJumbledWord(b):
    jumble=''
    l1 = [ b[i] for i in range(0, len(b)) ]
    for t in range(len(l1)):
       p=random.choice(l1)  #this randomly gets letters from the list      
       jumble=jumble+p       
       l1.remove(p)
    return jumble

b=input(&quot;Enter a word to make it jumbled : &quot;)
print(&quot;Jumbled Word : &quot;, getJumbledWord(b))
&lt;/pre&gt;
&lt;pre&gt;
Output:
Enter a word to make it jumbled : live and let live others
Jumbled Word :  vel  toldeisrte aihv len
==========================================
Enter a word to make it jumbled : junkfood
Jumbled Word :  nfukdooj
&lt;/pre&gt;
&lt;hr&gt;
'''Another Logic to create a Jumbled Word'''
&lt;hr&gt;
&lt;pre&gt;
import random
b=input(&quot;Enter a word to make it jumbled : &quot;)

def getJumbledWord1(b):
    l1 = [ b[i] for i in range(0, len(b)) ]
    random.shuffle(l1)
    str1 = ''.join(l1)
    return str1

print(&quot;Jumbled Word : &quot;, getJumbledWord1(b))
&lt;/pre&gt;

====Sample Output:====
&lt;pre&gt;
---- Output1 
Enter a word to make it jumbled : butter
Jumbled Word :  tbture

---- Output2 
Enter a word to make it jumbled : petriotism
Jumbled Word :  pittrosime
&lt;/pre&gt;

=Theory of Evolution=

== What is Evolution ? ==
Evolution is the change in heritable characteristics over successive generations. The theory of evolution explains that DNA, which acts as a carrier of genetic information from one generation to other, tends to change or mutate occasionally. These changes are reflected in next generations to come. This is how life has evolved on earth from bacteria to human beings.&lt;br&gt;
[[File:Evolution.png|500px]]

== Implementation ==
 &lt;p style=&quot;text-align:justify&quot;&gt;
An array representing DNA is stored in a file. As genes are forms of DNA, they contain information to be transferred to forthcoming generations. Assume that information is in the form of bits (in the form of 0s and 1s). A number is picked randomly from 1 to the size of the array. A new parameter has been introduced which decides whether mutation would occur or not. If the value of this new parameter is 1 (It is picked randomly from 1 to 100), then only change is reflected down the generations, otherwise it is not. The pseudo code is as follows :
&lt;/p&gt;
Input an array containing genetic information .
Randomly generate a number (say m) from 1 to length of the array. Randomly generate other number (say p) from 1 to 100.

&lt;pre&gt; 
    if p is equal to 1 then 
        if m is 1 then
          set it to 0
        else
          set it to 1
&lt;/pre&gt;
[[#TOP]]</text>
      <sha1>3kgkg69v8obvz06xfkt2gl4axxs1tu9</sha1>
    </revision>
    <revision>
      <id>3758</id>
      <parentid>3757</parentid>
      <timestamp>2018-09-29T04:12:11Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* Removing Item from list */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="30759">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_3 Contributors of this page]
*Week 3 Playlist: https://www.youtube.com/playlist?list=PLc_j0TNIaWxOVx_z9jAM2UB3RqYNXaoEo
=List=
List is a flexible data structure used for storing a group of data separated by comma. The elements in a list need not be of the same data type.

'''Example:'''
       List_1 = [ 1, 2,3] or 
       List_1 = [&quot;coffee&quot;, &quot;Tea&quot;, &quot;Milk&quot;] or
       List_1 = [1,&quot;coffee&quot;, &quot;Tea&quot;, 3, &quot;5&quot;]

==List Creation==
a) A list can be created by simply putting values (separated by comma) between square
 brackets as given below,
&lt;pre&gt;List_1 = [1,&quot;coffee&quot;, &quot;Tea&quot;, 3, &quot;5&quot;] #this creates a list by name List_1 containing
 following items
&lt;/pre&gt;


Or,
(b)A List can be created from scratch and elements can be added 
&lt;pre&gt;
        List_2 = [ ]
        List_2.append(&quot;Kala&quot;)
        List_2.append(&quot;Mala&quot;)
&lt;/pre&gt;
Here we use &quot;append&quot;, which is a function in python that enable us to append or attach an element to a list .
&lt;pre&gt;Thus List_2 will now hold [&quot;Kala&quot;,&quot;Mala&quot;]&lt;/pre&gt;

[[#Top]]

==Operations and Methods to work with List==
&lt;pre&gt;
a = [25,30,50,90,12,13]
b = [100,300,500,200,250]
&lt;/pre&gt;
&lt;hr&gt;
&lt;table border=2&gt;
  &lt;tr&gt;
    &lt;th&gt;&lt;b&gt;Method/&lt;br&gt;Operator&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Function&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Syntax&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Output&lt;/b&gt;&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;len()&lt;/td&gt;
    &lt;td&gt;Find length of a list&lt;/td&gt;
    &lt;td&gt;len(a)&lt;/td&gt;
    &lt;td&gt;6&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;max()&lt;/td&gt;
    &lt;td&gt;Find maximum element from the list&lt;/td&gt;
    &lt;td&gt;max(a)&lt;/td&gt;
    &lt;td&gt;90&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;min()&lt;/td&gt;
    &lt;td&gt;Find minimum element from the list&lt;/td&gt;
    &lt;td&gt;min(a)&lt;/td&gt;
    &lt;td&gt;12&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sum()&lt;/td&gt;
    &lt;td&gt;Returns sum of all elements of the list&lt;/td&gt;
    &lt;td&gt;sum(a)&lt;/td&gt;
    &lt;td&gt;220&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;reverse()&lt;/td&gt;
    &lt;td&gt;Reverses the original list&lt;/td&gt;
    &lt;td&gt;a.reverse()&lt;/td&gt;
    &lt;td&gt;[13, 12, 90, 50, 30, 25]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sort()&lt;/td&gt;
    &lt;td&gt;Sorts the original list in ascending order&lt;/td&gt;
    &lt;td&gt;a.sort()&lt;/td&gt;
    &lt;td&gt;[12, 13, 25, 30, 50, 90]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sorted()&lt;/td&gt;
    &lt;td&gt;Returns the new sorted list &lt;/td&gt;
    &lt;td&gt;sorted(a)&lt;/td&gt;
    &lt;td&gt;[12, 13, 25, 30, 50, 90]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;insert()&lt;/td&gt;
    &lt;td&gt;Insert at a particular index in the list, and shifts remaining elements&lt;/td&gt;
    &lt;td&gt;a.insert(3,3)&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 3, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;append()&lt;/td&gt;
    &lt;td&gt;Adds elements/object to the end of the list&lt;/td&gt;
    &lt;td&gt;a.append(5)&lt;br&gt;a.append([10,20])&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 5]&lt;br&gt;[25, 30, 50, 90, 12, 13, [10, 20]]&lt;br&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;extend()&lt;/td&gt;
    &lt;td&gt;Adds object to the end of the list as elements not as object&lt;/td&gt;
    &lt;td&gt;a.extend([10,20])&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 10, 20]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;*&amp;nbsp;&amp;nbsp;Repeatation&lt;br&gt;operator&lt;/td&gt;
    &lt;td&gt;Repeat the list for n times and returns a new list&lt;/td&gt;
    &lt;td&gt;a*2&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 25, 30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;+ Concatenation&lt;br&gt;operator&lt;/td&gt;
    &lt;td&gt;Concatenates two lists, and returns a new list&lt;/td&gt;
    &lt;td&gt;a+b&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 100, 300, 500, 200, 250]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;index()&lt;/td&gt;
    &lt;td&gt;Finds index of a particular element in the list or not&lt;/td&gt;
    &lt;td&gt;a.index(25)&lt;br&gt;a.index(0)&lt;br&gt;&lt;/td&gt;
    &lt;td&gt;0&lt;br&gt;&lt;br&gt;ValueError: 0 is not in list&lt;br&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;in operator&lt;/td&gt;
    &lt;td&gt;Finds whether a particular element is in the list or not, returns boolean&lt;/td&gt;
    &lt;td&gt;25 in a&lt;/td&gt;
    &lt;td&gt;True&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;not in operator&lt;/td&gt;
    &lt;td&gt;Checks if element is not available in list, returns boolean&lt;/td&gt;
    &lt;td&gt;25 not in a&lt;/td&gt;
    &lt;td&gt;False&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;count()&lt;/td&gt;
    &lt;td&gt;Counts the number of occurence of an element in the list&lt;/td&gt;
    &lt;td&gt;a.count(25)&lt;/td&gt;
    &lt;td&gt;1&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;remove()&lt;/td&gt;
    &lt;td&gt;Removes an element from the list&lt;/td&gt;
    &lt;td&gt;a.remove(25)&lt;/td&gt;
    &lt;td&gt; [30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;pop()&lt;/td&gt;
    &lt;td&gt;Delete and return item at index 0&lt;/td&gt;
    &lt;td&gt;a.pop(0)&lt;/td&gt;
    &lt;td&gt;25 , a will be [30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;del&lt;/td&gt;
    &lt;td&gt;Deletes item at a particular index from the list&lt;/td&gt;
    &lt;td&gt;del a[0]&lt;/td&gt;
    &lt;td&gt;[30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;all()&lt;/td&gt;
&lt;td&gt;Returns True, if all items in list are True or it is an empty list&lt;/td&gt;
&lt;td&gt;all([True, True, True])
all([])
&lt;/td&gt;
&lt;td&gt;True&lt;br&gt;
True&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;any()&lt;/td&gt;
&lt;td&gt;Returns True, if any item in list is True else return False&lt;/td&gt;
&lt;td&gt;any([True, True, True])&lt;br&gt;
any([True, False, True])&lt;br&gt;
any([])&lt;/td&gt;
&lt;td&gt;True&lt;br&gt;False&lt;br&gt;False&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;

==Printing the List==
=== Print whole list ===
A list can be printed simply or using a ''for / while'' loop 

 print(List_2)     # To print the entire list
This code will print      
 ['Kala','Mala']     

===Print element at a particular index===
&lt;pre&gt;
Using index position
    List_2[0]     # prints 'Kala' ,i.e,the value at index position 0.
    List_2[1]     # prints 'Mala'.
&lt;/pre&gt;
=== Without using index position ===
&lt;pre&gt;
for item in List_2:   # here item is a variable used to access elements in list.
       print(item)
   This code snippet prints 
    Kala
    Mala
&lt;/pre&gt;
[[#Top]]

==Search for a particular element in list==
Elements in a list can be searched by one of the two ways:
=== using index() function===
&lt;pre&gt;
ages1 = [11,23,12,23,45]

#if element is available in the list, index() returns the index value on which, the element is
 present.
print(ages1.index(45))#Output: 4

#if element is not available in the list, index() returns ''ValueError''
print(ages1.index(0))#Output: ValueError:
&lt;/pre&gt;

In programming, if such error occurs, program gets terminated. It can be solved using exception handling.
 
e.g.
&lt;pre&gt;
ages1 = [11,23,12,23,45]

try:
    print(ages1.index(0))
except ValueError:
    print(&quot;Exception has occured&quot;)    
    print(&quot;Element is not found in the list&quot;)

&lt;/pre&gt;
&lt;pre&gt;
'''Output: 
Exception has occured
Element is not found in the list
'''&lt;/pre&gt;
[[#Top]]

=== using 'in' operator===
''in'' operator is used to check whether a particular element is available in the list or not.e.g.

&lt;pre&gt;
ages1 = [11,23,12,23,45]
no=11

if no in ages1:
    print(&quot;no is there in the list&quot;)
else:    
    print(&quot;no is NOT there in the list&quot;)
&lt;/pre&gt;
&lt;pre&gt;
#Output: no is there in the list
&lt;/pre&gt;


'''Number is not there in the list'''
&lt;pre&gt;
ages1 = [11,23,12,23,45]
no=15

if no in ages1:
    print(&quot;no is there in the list&quot;)
else:    
    print(&quot;no is NOT there in the list&quot;)
&lt;/pre&gt;
&lt;pre&gt;
Output: no is NOT there in the list
&lt;/pre&gt;
[[#Top]]

==Updating the List==
The lists can be updated using ''append'' or ''insert'' function.  Append adds the element to the end of the list and Insert adds the element in the specified position.
&lt;pre&gt;
   # add the element 'Sheela' to the end of the list.
   List_2.append(&quot;Sheela&quot;)    
   print (List_2) will output 
   ['Kala', 'Mala', 'Sheela']
&lt;/pre&gt;
   &lt;pre&gt;
# add the element &quot;Bala&quot; in the list at the index 1.
   List_2.insert(1,&quot;Bala&quot;)    
   print (List_2) will output 
   ['Kala', 'Bala','Mala', 'Sheela']
&lt;/pre&gt;

=== Extend the list by adding elements of other list at end using extend()===
&lt;pre&gt;
ages = [11,23,12,23,45]
ages.extend([57,58])
print(ages)
&lt;/pre&gt;

&lt;pre&gt;
#Output: [11, 23, 12, 23, 45, 57, 58]
&lt;/pre&gt;

==== Difference between ''append() and extend()'' ====
Difference between ''append()'' and ''extend()'' can be easily understood, by the following example.

&lt;pre&gt;
appendlist = [11,23,12,23,45]
appendlist.append([57,58])

extendlist= [11,23,12,23,45]
extendlist.extend([57,58])
&lt;/pre&gt;

&lt;pre&gt;
'''Output:
[11, 23, 12, 23, 45, [57, 58]]
[11, 23, 12, 23, 45, 57, 58]'''
&lt;/pre&gt;

[[#Top]]

==Basic Operations on List==
===Frequency of Occurrence===
list.count(object) will return the number of times the object occur in the list.
  '''Example'''
    ages = [11,23,12,23,45,43,22,24,23]
    ages.count(23) will return
    3
    ages.count(100) will return
    0

===Length of the List===
''len(list)'' will return the length of the list ie. the number of objects in the list.
  '''Example'''
&lt;pre&gt;
    ages = [11,23,12,23,45,43,22,24,23]
    len(ages) # Output: 9
&lt;/pre&gt;

To print the objects in the list either use ''for item in list'' or ''for index in range(len(list))''
&lt;pre&gt;
    for item in ages:       
        print (item)  
        (OR)
    for index in range(len(ages)) :
        print (ages[index])
&lt;/pre&gt;

===Sort the List===
''list.sort()'' will sort the list in ascending order
  '''Example'''
    ages = [11,23,12,23,45,43,22,24,23]
    ages.sort() 
    print (ages) 
    [11, 12, 22, 23, 23, 23, 24, 43, 45]

[[#Top]]

===Sort the List using sorted() function===
''sorted(list1)'' will sort the list and return a new list, it doesn't modify the original list
&lt;br&gt;'''Example: Sort in ascending order'''
&lt;pre&gt;
ages = [11,23,12,23,45,43,22,24,23]
newList=sorted(ages)
print(newList)

#Output: [11, 12, 22, 23, 23, 23, 24, 43, 45]
&lt;/pre&gt;

&lt;br&gt;'''Example: Sort in descending order'''
&lt;pre&gt;
ages = [11,23,12,23,45,43,22,24,23]
newList=sorted(ages,reverse=True)
print(newList)

#Output: [45, 43, 24, 23, 23, 23, 22, 12, 11]
&lt;/pre&gt;

===Reverse the List===
''list.reverse()'' will reverse the original list
  '''Example'''
    ages = [11, 12, 22, 23, 23, 23, 24, 43, 45]
    ages.reverse()
    print (ages)
    [45, 43, 24, 23, 23, 23, 22, 12, 11]

Both ''sort()'' and ''reverse()'' list operation will work on numeric and alphanumeric data list.

A special use of the ''reverse()'' function is to descend a list that is sorted in ascending order.

  '''Example'''
&lt;pre&gt;
ages = [11, 12, 22, 23, 23, 23, 24, 43, 45]
ages.sort()
print(ages)
ages.reverse()
print(ages)
&lt;/pre&gt;

[[#Top]]

===Slicing===
Used to retrieve an object or objects in a range as a list  
  '''Example'''

Use ''list[index]'' to retrieve the object at the given index
&lt;pre&gt;
In [1]: student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
In [2]: student[3]     #Object at index 3.  Remember index starts at 0
Out[2]: 'Geetha'      
&lt;/pre&gt;

Use ''list[start_index : end_index + 1]'' to retrieve objects from the start_index to end_index 
&lt;pre&gt;
In [3]: student[2:4]     # Objects from index 2 to 3 as List. Note the [ and ]
Out[3]: ['Vijay', 'Geetha']   
&lt;/pre&gt;

Use ''list[:]'' to retrieve objects from the starting of the list to the end of the list. 
The default start value will be the starting index of the list (i.e. 0) and the default end value
will be the length of the list 
&lt;pre&gt;
In [4]: student[:]        # prints the entire list
Out[4]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma', 'Janani']
&lt;/pre&gt;
&lt;pre&gt;
In [5]: student[:5]       # prints the objects from the start of the list upto object at index 4
Out[5]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran']
&lt;/pre&gt;
&lt;pre&gt;
In [6]: student[2:]       # prints the objects from index 2 upto the end of the list
Out[6]: ['Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma', 'Janani']
&lt;/pre&gt;

Negative index too is available in Python. It starts from last element of the list. i.e.
&lt;pre&gt;
In [7]:student[-1]        #prints last index of list
Out[7]: 'Janani'
&lt;/pre&gt;
&lt;pre&gt;
In [8]:student[-1:-8]     #prints empty list
Out[8]: []
&lt;/pre&gt;
&lt;pre&gt;
In [9]:student[-8:-1]     #prints -8th index to -1st index elements
Out[9]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma']
&lt;/pre&gt;

[[#Top]]

===Removing Item from list ===
----

Is used to remove a specific item from the list.

'''Example:'''
 
Use list.remove(entry/value)  Or   del list[index]    Or list.pop(index)
&lt;pre&gt;
student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
student.remove(&quot;Arun&quot;)   #This will delete item &quot;Arun&quot;
         Or    
del student[0]           # This will delete item at index 0
         Or
student.pop(0)         # This will delete and return item at index 0
print(student)    
Output: &quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
&lt;/pre&gt;

[[#Top]]

===Delete list ===
----
Used to delete complete list

'''Example'''

Use del &lt;list name&gt;
&lt;pre&gt;
student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
del student&lt;/pre&gt;

===Concatenation of two lists===
----
''+'' is the concatenation operator which is used concatenate two lists. 
&lt;pre&gt;
ages1 = [11,23,12,23,45]
ages2 = [25, 24, 43, 47]
age=ages1+ages2
print(age)
#Output: [11, 23, 12, 23, 45, 25, 24, 43, 47]
&lt;/pre&gt;

===Repeatation of a list ===
----
''*'' is the operator to repeat a particular list.
&lt;pre&gt;
ages1 = [11,23,12,23,45]
age=ages1*5 #ages1 list is repeated 5 times and stroed in ''age'' list
print(age)

#Output: [11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45]
&lt;/pre&gt;

=== all and any for List===
all() and any() are special functions to check whether all elements in iterable is ''True'' or any element is ''True''
&lt;ol&gt;
&lt;li&gt;If all elements in a list are ''True'', '''all()''' will return ''True''&lt;/li&gt;
&lt;li&gt;If iterable is ''empty'', '''all()''' will return ''True''&lt;/li&gt;
&lt;li&gt;If iterable contains at least one ''True'', '''any()''' will return ''True''&lt;/li&gt;
&lt;li&gt;If iterable is ''empty'', '''any()''' will return ''False''&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;
lsit=[True, True, True, True]
print(all(lsit))#Output: True
print(any(lsit))#Output: True

lsit1=[True, False, True, True]
print(all(lsit1))#Output: False
print(any(lsit1))#Output: True

lsit2=[False,False,False]
print(all(lsit2))#Output: False
print(any(lsit2))#Output: False

lsit3=[]
print(all(lsit3))#Output: True
print(any(lsit3))#Output: False
&lt;/pre&gt;

==Conditional Statements==
&lt;pre&gt;Conditionals are used to check the condition and change the flow of the program 
accordingly. They are realized in programming languages through if statement. The 
syntax is as follows :
&lt;pre&gt;
         if condition : 
            statement
&lt;/pre&gt;
    '''Note:''' Do not forget indentation (inserting space/tab) in the line after the
 if condition.
    
    In case you want to execute a set of statements when a condition is true and another

set of statement when the condition is false.
&lt;pre&gt;
         if condition : 
            statement 1
         else :
            statement 2
&lt;/pre&gt;

&lt;pre&gt;    
    Multiple if-else statements can be written as follows:
         if condition_1 : 
            statement 1
         elif condition_2 : # 'elif' is short for 'else if'
            statement 2
         elif condition_3 :
            statement 3
        .
        .
         else :
            final statement
&lt;/pre&gt;

[[#TOP]]

=Loops and Conditionals : Fizzbuzz=
====Loops====
Loops are used to execute a set of repetitive statements. They are realised
through 'while' and 'for' loops in programming languages. The syntax of 'for' loop is 
as follows :
&lt;pre&gt;
for LOOPVARIABLE in SEQUENCE: 
            STATEMENTS&lt;/pre&gt;

    '''e.g.''' to print all the data from a list we can write:
&lt;pre&gt;
for item in list_name:
      print(item)&lt;/pre&gt;
    OR
&lt;pre&gt;
for index in range(len(list_name)):
      print(list_name[index])
 &lt;/pre&gt;   
    The syntax for while loop is as follows :
&lt;pre&gt;    
while BOOLEANEXPRESSION: 
     STATEMENTS
     INCREMENT/DECREMENT
&lt;/pre&gt;    
    '''e.g.''' if we want to print all numbers from 1 to 10
&lt;pre&gt;
i=1
while i&lt;=10 :
    print(i,&quot; &quot;)
    i=i+1
    &lt;/pre&gt;
 
'while' loop has indefinite iteration (run-time unknown). So, there must be loop,  break statement in it.
 Whereas 'for' loop is definite in nature (i.e. known or predictable span).&lt;br&gt;

&lt;b&gt;NOTE: Python doesn't have anything like do-while loop.&lt;/b&gt;

[[#TOP]]

==Implementation==
Here, we try to demonstrate the concept of loops and conditionals through a game called Fizzbuzz. The rules are as follows :&lt;br/&gt;
[[File:fizzBuzz.gif]]

• if input number is a multiple of ’3’ print ”Fizz”
&lt;br/&gt;
• if input number is a multiple of ’5’ print ”Buzz”
&lt;br/&gt;
• if input number is a multiple of both '3' and ’5’ print ”FizzBuzz”
&lt;br/&gt;
The pseudo code is as follows :
&lt;pre&gt;
   If input no % 3 == 0 and  input no % 5 == 0 : 
       print ”Fizzbuzz”
   else if input no % 3 == 0 : 
       print ”Fizz”
   else if input no % 5 == 0 : 
       print ”Buzz”
   else :
       print the input no
&lt;/pre&gt;
 &lt;p style=&quot;text-align:justify&quot;&gt;
The order of statements execution matters to get the desired output. The highest priority condition should be first followed by other. In fizzbuzz programming, first checking should be done for both divisibility of 3 and 5. If condition not satisfied only then it should check individually for 3 or 5. So carefully choosing the order is crucial for better programming.
Note: There is some effect of present condition statements chosen on next conditions statements. That is why in first attempt fizzbuzz programming got struck.&lt;/p&gt;

Example: 
&lt;pre&gt;
#Code to achieve the above requirement in python3.
i = int(input(&quot;Enter the number&quot;)) 
if i%3 == 0 and i%5 == 0: print(i,&quot;FizzBuzz&quot;)  
elif i%5 == 0: print(i,&quot;Buzz&quot;)
elif i%3 == 0: print(i,&quot;Fizz&quot;)
else: print(i)
&lt;/pre&gt;
Lets put the same into a loop for a range given by the user.
&lt;pre&gt;
def fizzbuzzgame(start,stop):
    for i in range(start,stop+1):
        if i%3 == 0 and i%5 == 0:
            print(i,&quot;FizzBuzz&quot;)
        elif i%5 == 0:
            print(i,&quot;Buzz&quot;)
        elif i%3 == 0:
            print(i,&quot;Fizz&quot;)
        else: print(i)

fizzbuzzgame(50,100)
&lt;/pre&gt;
&lt;pre&gt;
#Output:
1235
Buzz
======================================
555
Fizzbuzz
======================================
1235
Buzz
======================================
999
Fizz
&lt;/pre&gt;

=== Fizz Buzz game in Interactive mode with Score ===
'''By Ms. Ami Tusharkant Choksi'''
&lt;pre&gt;
def fizzbuzzgame(i):
        if i%3 == 0 and i%5 == 0:
            print(i,&quot;FizzBuzz&quot;)
            return(&quot;fzbz&quot;)
        elif i%5 == 0:
            print(i,&quot;Buzz&quot;)
            return(&quot;bz&quot;)
        elif i%3 == 0:
            print(i,&quot;Fizz&quot;)
            return(&quot;fz&quot;)
        else:
            print(i)
            return(&quot;no&quot;)

ch = 'y'
fizzbuzz=0
fizz=0
buzz=0
nothing=0
print(&quot;&quot;&quot;

 /$$$$$$$$/$$                  /$$$$$$$                            
| $$_____|__/                 | $$__  $$                           
| $$      /$$/$$$$$$$$/$$$$$$$| $$  \ $$/$$   /$$/$$$$$$$$/$$$$$$$$
| $$$$$  | $|____ /$$|____ /$$| $$$$$$$| $$  | $|____ /$$|____ /$$/
| $$__/  | $$  /$$$$/   /$$$$/| $$__  $| $$  | $$  /$$$$/   /$$$$/ 
| $$     | $$ /$$__/   /$$__/ | $$  \ $| $$  | $$ /$$__/   /$$__/  
| $$     | $$/$$$$$$$$/$$$$$$$| $$$$$$$|  $$$$$$//$$$$$$$$/$$$$$$$$
|__/     |__|________|________|_______/ \______/|________|________/
                                                                  
&quot;&quot;&quot;)   
print('''

  /$$$$$$                                
 /$$__  $$                               
| $$  \__/ /$$$$$$ /$$$$$$/$$$$  /$$$$$$ 
| $$ /$$$$|____  $| $$_  $$_  $$/$$__  $$
| $$|_  $$ /$$$$$$| $$ \ $$ \ $| $$$$$$$$
| $$  \ $$/$$__  $| $$ | $$ | $| $$_____/
|  $$$$$$|  $$$$$$| $$ | $$ | $|  $$$$$$$
 \______/ \_______|__/ |__/ |__/\_______/
                                     
''')

while(ch == 'y'):
    n=int(input(&quot;Enter a Number : &quot;))
    winLoose=fizzbuzzgame(n)
    if(winLoose == &quot;fz&quot;):
        fizz+=1
    elif(winLoose == &quot;bz&quot;):
        buzz+=1
    elif(winLoose == &quot;fzbz&quot;):
        fizzbuzz+=1
    ch=input(&quot;Do you want to continue playing the game : (y/n)&quot;)
    if(ch=='n'):
        print('Congratulations, your score is\n FizzBuzz:%d\nFizz:%d\nBuzz:%d' %
(fizzbuzz,fizz,buzz))
    
'''Sample Output:

 /$$$$$$$$/$$                  /$$$$$$$                            
| $$_____|__/                 | $$__  $$                           
| $$      /$$/$$$$$$$$/$$$$$$$| $$  \ $$/$$   /$$/$$$$$$$$/$$$$$$$$
| $$$$$  | $|____ /$$|____ /$$| $$$$$$$| $$  | $|____ /$$|____ /$$/
| $$__/  | $$  /$$$$/   /$$$$/| $$__  $| $$  | $$  /$$$$/   /$$$$/ 
| $$     | $$ /$$__/   /$$__/ | $$  \ $| $$  | $$ /$$__/   /$$__/  
| $$     | $$/$$$$$$$$/$$$$$$$| $$$$$$$|  $$$$$$//$$$$$$$$/$$$$$$$$
|__/     |__|________|________|_______/ \______/|________|________/
                                                                                                                                   

  /$$$$$$                                
 /$$__  $$                               
| $$  \__/ /$$$$$$ /$$$$$$/$$$$  /$$$$$$ 
| $$ /$$$$|____  $| $$_  $$_  $$/$$__  $$
| $$|_  $$ /$$$$$$| $$ \ $$ \ $| $$$$$$$$
| $$  \ $$/$$__  $| $$ | $$ | $| $$_____/
|  $$$$$$|  $$$$$$| $$ | $$ | $|  $$$$$$$
 \______/ \_______|__/ |__/ |__/\_______/
                                         

Enter a Number : 666
666 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 777
777 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 555
555 FizzBuzz
Do you want to continue playing the game : (y/n)y
Enter a Number : 1
1
Do you want to continue playing the game : (y/n)y
Enter a Number : 789
789 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 25
25 Buzz
Do you want to continue playing the game : (y/n)n
Congratulations, your score is

FizzBuzz:1
Fizz:3
Buzz:1

&lt;/pre&gt;

=Crowd Computing: Just Estimate=
==Wisdom of Crowds==
 &lt;p style=&quot;text-align:justify&quot;&gt;
The concept of ’Wisdom of Crowds’ was proposed by Francis Galton. A weight-judging competition was carried on at the annual show of the West of England Fat Stock and Poultry Exhibition recently held at Plymouth, A fat ox having been selected, competitors bought stamped and numbered cards, each, on which to inscribe their respective names, addresses, and estimates of what the ox would weigh after it had been slaughtered. Those who guessed most successfully received prizes. About 8oo tickets were issued to the par- ticipants. The middlemost estimate of all the estimates recorded was 1207 lbs and the actual weight of the ox was 1198 lbs.&lt;/p&gt;

==Our Experiment==
 &lt;p style=&quot;text-align:justify&quot;&gt;
The crowd had to guess the number of candies/gems in a jar. Around 75 people participated in the experiment. The actual number of gems in the jar were 375. The median of all estimates came out to be 300 and the mean of all the estimates came out to be around 396. Median underestimated and mean overestimated the actual value. So according to recent studies, Trimmed mean must be used as an aggregate measure to estimate where Wisdom of Crowds is involved.
&lt;/p&gt;
[[File:Gemsjar.jpg|center|200px|caption]]

===Trimmed Mean===
 &lt;p style=&quot;text-align:justify&quot;&gt;
In these kinds of experiments, 10% trimmed mean is usually followed. For calculating 10% trimmed mean, remove 10% smallest and 10% largest values from the sample. Calculate the mean of the sample obtained. In the above experiment, the trimmed mean came out to be around 351 which is very close to the actual value.&lt;/p&gt;

==Implementation==
Here, we try to demonstrate the concept of trimmed mean through crowd computing.
&lt;ol&gt;
&lt;li&gt; Input a list of estimates done by the crowd .&lt;/li&gt;
&lt;li&gt; Sort the list.&lt;/li&gt;
&lt;li&gt; Remove the 10% smallest values.&lt;/li&gt;
&lt;li&gt; Remove the 10% largest values.
&lt;li&gt; Calculate the mean of the new list obtained .&lt;/li&gt;&lt;/ol&gt;&lt;hr&gt;

==Data of Experiment==       
    Estimates =[1000,1010,1786,2000,1500,1500,100,120,150,150,150,170,175,180,197,200,200,200,200,200,200,220,220,220,220,234,250,250,250,250,250,250,250,250,250,263,270,275,275,286,300,
                300,300,300,300,300,300,300,320,350,350,350,400, 400,400,400,400,450,467,500,500,500,500,500,500,500,550,550,600,600,600,650,700,700,720]

    '''CODE:'''
&lt;pre&gt;
Estimates = [1000,1010,1786,2000,1500,1500,100,120,150,150,150,170,175,180,197,200,200,200,200,200,200,220,220,220,220,234,250,250,250,250,250,250,250,250,250,263,270,275,275,286,300,                300,300,300,300,300,300,300,320,350,350,350,400,400,400,400,400,450,467,500,500,500,500,500,500,500,550,550,600,600,600,650,700,700,720]
Estimates.sort()
offset = int(0.10*len(Estimates))
for i in range(offset):
       del Estimates[0]
       del Estimates[-1]
Sum = 0    
for i in range(len(Estimates)):
       Sum += Estimates[i]
Mean_Value = Sum/len(Estimates)
print(&quot;Mean : &quot;, int(Mean_Value))
#Output:
Mean :  351
&lt;/pre&gt;
&lt;hr&gt;
==Trimmed Mean for the above example== 
&lt;h3&gt;Using scipy library&lt;/h3&gt;
&lt;pre&gt;
#import scipy to use the method of trim_mean
from scipy import stats
trimMean = stats.trim_mean(Estimates, 0.1) # Trim 10% at both ends
print(&quot;Trimmed Mean : &quot;,trimMean)
#Output:
Trimmed Mean :  335.1020408163265
&lt;/pre&gt;

&lt;h3&gt;Without using scipy library&lt;/h3&gt;
&lt;pre&gt;
#Trimmed mean with 10%
p=10/100
#sorted data
data=[2, 4, 6, 7, 11, 21, 81, 90, 105, 121]
n = len(data)
#Remove elements from both end
rem=int(n*p)
newData = data[rem:-rem]
mean = 0
for i in newData:
    mean += i
mean = int(mean/len(newData))
print(&quot;Trimmed mean : &quot;,mean)
#Output: Trimmed mean :  40
&lt;/pre&gt;
[[#Top]]

=Jumbled_Words Permutations: Jumbled Words=
==What are Permutations ?==
A permutation also called ordering of selected number of elements from a list denoted by nPr here we are choosing all elements of a list and so n=r&lt;br&gt;
nPr=n!/(n-r)!&lt;br&gt; as n=r
nPn=n!&lt;br&gt; which gives all possible arrangement of elements present in a list.

 For example, permutations of list [1,2,3] are [1,2,3], [1,3,2], [2,1,3], [2,3,1], 
[3,1,2], and [3,2,1]. 
The number of permutations of a list of elements nPn is given by n!. For example, there are 2! = 2 x 1 = 2 permutations of [1,2], namely [1,2] and [2,1], and 3! = 3 x 2 x 1 = 6 permutations of [1,2,3], as mentioned above.&lt;br/&gt;
[[File:Permutations.jpg]]

==Implementation==
 &lt;p style=&quot;text-align:justify&quot;&gt;
Here, we try to demonstrate the concept of permutations through jumbled words. It is a two player game in which one person presents the other person a different permutation of the word in his mind. The other person has to guess the right word. If he guesses, the he wins otherwise he loses.&lt;/p&gt;
 Input an list of words.
 Randomly pick a word from the list of words .
 Shuffle this word and present it to the other player.
 if word guesses by the player is same as the one picked from list of w
     player wins
 else
     player loses

ALTERNATE CODE TO GENERATE THIS GAME:
&lt;pre&gt;
import random
p1=input(&quot;enter player 1 name:&quot;)
p2=input(&quot;enter player 2 name:&quot;)
l=[&quot;rainbow&quot;,&quot;computer&quot;,&quot;robot&quot;,&quot;butter&quot;,&quot;vegetable&quot;,&quot;science&quot;,&quot;correct&quot;]
c1=c2=a1=a2=f1=f2=0
k=1
i=3
def play():
    n=random.choice(l)        ##n=chooses a word from list l
    l1=[]
    for j in n:
       l1.append(j)      ##creates a list for word in n
    for t in range(len(l1)):
       p=random.choice(l1)     ##this randomly displays letters in the list
       print(p)
       l1.remove(p)          ##to avoid the repetition of a letter
    s=input(&quot;enter the word:&quot;)
    if(s==n):
        print(&quot;correct&quot;)
        return 1
    else:
        print(&quot;not correct&quot;)
        print(&quot;answer is&quot;,n)
        return 0
def stat():
     print(&quot;player 1:&quot;)
     print(&quot;score:&quot;,c1)
     print(&quot;answered:&quot;,a1)
     print(&quot;failed:&quot;,f1)
     print(&quot;.............&quot;)
     print(&quot;player 2:&quot;)
     print(&quot;score:&quot;,c2)
     print(&quot;answered:&quot;,a2)
     print(&quot;failed&quot;,f2)
     if(c1&gt;c2):
         print(p1,&quot; won over &quot;,p2)
     elif(c1==c2):
         print(&quot;draw game&quot;)
     else:
         print(p2,&quot; won over &quot;,p1) 
while(i!=4):
      if(i==3):
         if(k==1):
             print(&quot;player 1 turn&quot;)
             print(&quot;your jumbled word is:&quot;)
             k=k+1
             m=play()
             if(m==1):      ##if guessed answer is correct,then score and no.of answered count will be increased
                c1+=1
                a1+=1
             else:
                f1+=1       ##else count of no.of failed to answered will be incremented
         else:
             print(&quot;player 2 turn&quot;)
             print(&quot;your jumbled word is:&quot;)
             k=k-1
             m=play()
             if(m==1):
                c2=c2+1
                a2=a2+1
             else:
                f2=f2+1
       if(i==2):
             print(&quot;present status&quot;)
             stat()
       i=int(input(&quot;enter your choice  1.stop 2.status 3.continue&quot;))
       if(i==1):
             stat()
             i=i+3
&lt;/pre&gt;
&lt;hr&gt;
=== JumbledWord Simple Logic, In Short ===
[[File:jumbledWord.gif]]
---
&lt;hr&gt;
'''Logic to create a Jumbled Word'''
&lt;hr&gt;
&lt;pre&gt;
#Get Jumbled Word and print it Horizontally
import random

def getJumbledWord(b):
    jumble=''
    l1 = [ b[i] for i in range(0, len(b)) ]
    for t in range(len(l1)):
       p=random.choice(l1)  #this randomly gets letters from the list      
       jumble=jumble+p       
       l1.remove(p)
    return jumble

b=input(&quot;Enter a word to make it jumbled : &quot;)
print(&quot;Jumbled Word : &quot;, getJumbledWord(b))
&lt;/pre&gt;
&lt;pre&gt;
Output:
Enter a word to make it jumbled : live and let live others
Jumbled Word :  vel  toldeisrte aihv len
==========================================
Enter a word to make it jumbled : junkfood
Jumbled Word :  nfukdooj
&lt;/pre&gt;
&lt;hr&gt;
'''Another Logic to create a Jumbled Word'''
&lt;hr&gt;
&lt;pre&gt;
import random
b=input(&quot;Enter a word to make it jumbled : &quot;)

def getJumbledWord1(b):
    l1 = [ b[i] for i in range(0, len(b)) ]
    random.shuffle(l1)
    str1 = ''.join(l1)
    return str1

print(&quot;Jumbled Word : &quot;, getJumbledWord1(b))
&lt;/pre&gt;

====Sample Output:====
&lt;pre&gt;
---- Output1 
Enter a word to make it jumbled : butter
Jumbled Word :  tbture

---- Output2 
Enter a word to make it jumbled : petriotism
Jumbled Word :  pittrosime
&lt;/pre&gt;

=Theory of Evolution=

== What is Evolution ? ==
Evolution is the change in heritable characteristics over successive generations. The theory of evolution explains that DNA, which acts as a carrier of genetic information from one generation to other, tends to change or mutate occasionally. These changes are reflected in next generations to come. This is how life has evolved on earth from bacteria to human beings.&lt;br&gt;
[[File:Evolution.png|500px]]

== Implementation ==
 &lt;p style=&quot;text-align:justify&quot;&gt;
An array representing DNA is stored in a file. As genes are forms of DNA, they contain information to be transferred to forthcoming generations. Assume that information is in the form of bits (in the form of 0s and 1s). A number is picked randomly from 1 to the size of the array. A new parameter has been introduced which decides whether mutation would occur or not. If the value of this new parameter is 1 (It is picked randomly from 1 to 100), then only change is reflected down the generations, otherwise it is not. The pseudo code is as follows :
&lt;/p&gt;
Input an array containing genetic information .
Randomly generate a number (say m) from 1 to length of the array. Randomly generate other number (say p) from 1 to 100.

&lt;pre&gt; 
    if p is equal to 1 then 
        if m is 1 then
          set it to 0
        else
          set it to 1
&lt;/pre&gt;
[[#TOP]]</text>
      <sha1>ihah4hcvk0xp4p5xon1uevlcwvxwsh9</sha1>
    </revision>
    <revision>
      <id>3759</id>
      <parentid>3758</parentid>
      <timestamp>2018-09-29T04:13:07Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* all and any for List */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="30751">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_3 Contributors of this page]
*Week 3 Playlist: https://www.youtube.com/playlist?list=PLc_j0TNIaWxOVx_z9jAM2UB3RqYNXaoEo
=List=
List is a flexible data structure used for storing a group of data separated by comma. The elements in a list need not be of the same data type.

'''Example:'''
       List_1 = [ 1, 2,3] or 
       List_1 = [&quot;coffee&quot;, &quot;Tea&quot;, &quot;Milk&quot;] or
       List_1 = [1,&quot;coffee&quot;, &quot;Tea&quot;, 3, &quot;5&quot;]

==List Creation==
a) A list can be created by simply putting values (separated by comma) between square
 brackets as given below,
&lt;pre&gt;List_1 = [1,&quot;coffee&quot;, &quot;Tea&quot;, 3, &quot;5&quot;] #this creates a list by name List_1 containing
 following items
&lt;/pre&gt;


Or,
(b)A List can be created from scratch and elements can be added 
&lt;pre&gt;
        List_2 = [ ]
        List_2.append(&quot;Kala&quot;)
        List_2.append(&quot;Mala&quot;)
&lt;/pre&gt;
Here we use &quot;append&quot;, which is a function in python that enable us to append or attach an element to a list .
&lt;pre&gt;Thus List_2 will now hold [&quot;Kala&quot;,&quot;Mala&quot;]&lt;/pre&gt;

[[#Top]]

==Operations and Methods to work with List==
&lt;pre&gt;
a = [25,30,50,90,12,13]
b = [100,300,500,200,250]
&lt;/pre&gt;
&lt;hr&gt;
&lt;table border=2&gt;
  &lt;tr&gt;
    &lt;th&gt;&lt;b&gt;Method/&lt;br&gt;Operator&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Function&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Syntax&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Output&lt;/b&gt;&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;len()&lt;/td&gt;
    &lt;td&gt;Find length of a list&lt;/td&gt;
    &lt;td&gt;len(a)&lt;/td&gt;
    &lt;td&gt;6&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;max()&lt;/td&gt;
    &lt;td&gt;Find maximum element from the list&lt;/td&gt;
    &lt;td&gt;max(a)&lt;/td&gt;
    &lt;td&gt;90&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;min()&lt;/td&gt;
    &lt;td&gt;Find minimum element from the list&lt;/td&gt;
    &lt;td&gt;min(a)&lt;/td&gt;
    &lt;td&gt;12&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sum()&lt;/td&gt;
    &lt;td&gt;Returns sum of all elements of the list&lt;/td&gt;
    &lt;td&gt;sum(a)&lt;/td&gt;
    &lt;td&gt;220&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;reverse()&lt;/td&gt;
    &lt;td&gt;Reverses the original list&lt;/td&gt;
    &lt;td&gt;a.reverse()&lt;/td&gt;
    &lt;td&gt;[13, 12, 90, 50, 30, 25]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sort()&lt;/td&gt;
    &lt;td&gt;Sorts the original list in ascending order&lt;/td&gt;
    &lt;td&gt;a.sort()&lt;/td&gt;
    &lt;td&gt;[12, 13, 25, 30, 50, 90]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sorted()&lt;/td&gt;
    &lt;td&gt;Returns the new sorted list &lt;/td&gt;
    &lt;td&gt;sorted(a)&lt;/td&gt;
    &lt;td&gt;[12, 13, 25, 30, 50, 90]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;insert()&lt;/td&gt;
    &lt;td&gt;Insert at a particular index in the list, and shifts remaining elements&lt;/td&gt;
    &lt;td&gt;a.insert(3,3)&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 3, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;append()&lt;/td&gt;
    &lt;td&gt;Adds elements/object to the end of the list&lt;/td&gt;
    &lt;td&gt;a.append(5)&lt;br&gt;a.append([10,20])&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 5]&lt;br&gt;[25, 30, 50, 90, 12, 13, [10, 20]]&lt;br&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;extend()&lt;/td&gt;
    &lt;td&gt;Adds object to the end of the list as elements not as object&lt;/td&gt;
    &lt;td&gt;a.extend([10,20])&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 10, 20]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;*&amp;nbsp;&amp;nbsp;Repeatation&lt;br&gt;operator&lt;/td&gt;
    &lt;td&gt;Repeat the list for n times and returns a new list&lt;/td&gt;
    &lt;td&gt;a*2&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 25, 30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;+ Concatenation&lt;br&gt;operator&lt;/td&gt;
    &lt;td&gt;Concatenates two lists, and returns a new list&lt;/td&gt;
    &lt;td&gt;a+b&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 100, 300, 500, 200, 250]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;index()&lt;/td&gt;
    &lt;td&gt;Finds index of a particular element in the list or not&lt;/td&gt;
    &lt;td&gt;a.index(25)&lt;br&gt;a.index(0)&lt;br&gt;&lt;/td&gt;
    &lt;td&gt;0&lt;br&gt;&lt;br&gt;ValueError: 0 is not in list&lt;br&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;in operator&lt;/td&gt;
    &lt;td&gt;Finds whether a particular element is in the list or not, returns boolean&lt;/td&gt;
    &lt;td&gt;25 in a&lt;/td&gt;
    &lt;td&gt;True&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;not in operator&lt;/td&gt;
    &lt;td&gt;Checks if element is not available in list, returns boolean&lt;/td&gt;
    &lt;td&gt;25 not in a&lt;/td&gt;
    &lt;td&gt;False&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;count()&lt;/td&gt;
    &lt;td&gt;Counts the number of occurence of an element in the list&lt;/td&gt;
    &lt;td&gt;a.count(25)&lt;/td&gt;
    &lt;td&gt;1&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;remove()&lt;/td&gt;
    &lt;td&gt;Removes an element from the list&lt;/td&gt;
    &lt;td&gt;a.remove(25)&lt;/td&gt;
    &lt;td&gt; [30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;pop()&lt;/td&gt;
    &lt;td&gt;Delete and return item at index 0&lt;/td&gt;
    &lt;td&gt;a.pop(0)&lt;/td&gt;
    &lt;td&gt;25 , a will be [30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;del&lt;/td&gt;
    &lt;td&gt;Deletes item at a particular index from the list&lt;/td&gt;
    &lt;td&gt;del a[0]&lt;/td&gt;
    &lt;td&gt;[30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;all()&lt;/td&gt;
&lt;td&gt;Returns True, if all items in list are True or it is an empty list&lt;/td&gt;
&lt;td&gt;all([True, True, True])
all([])
&lt;/td&gt;
&lt;td&gt;True&lt;br&gt;
True&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;any()&lt;/td&gt;
&lt;td&gt;Returns True, if any item in list is True else return False&lt;/td&gt;
&lt;td&gt;any([True, True, True])&lt;br&gt;
any([True, False, True])&lt;br&gt;
any([])&lt;/td&gt;
&lt;td&gt;True&lt;br&gt;False&lt;br&gt;False&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;

==Printing the List==
=== Print whole list ===
A list can be printed simply or using a ''for / while'' loop 

 print(List_2)     # To print the entire list
This code will print      
 ['Kala','Mala']     

===Print element at a particular index===
&lt;pre&gt;
Using index position
    List_2[0]     # prints 'Kala' ,i.e,the value at index position 0.
    List_2[1]     # prints 'Mala'.
&lt;/pre&gt;
=== Without using index position ===
&lt;pre&gt;
for item in List_2:   # here item is a variable used to access elements in list.
       print(item)
   This code snippet prints 
    Kala
    Mala
&lt;/pre&gt;
[[#Top]]

==Search for a particular element in list==
Elements in a list can be searched by one of the two ways:
=== using index() function===
&lt;pre&gt;
ages1 = [11,23,12,23,45]

#if element is available in the list, index() returns the index value on which, the element is
 present.
print(ages1.index(45))#Output: 4

#if element is not available in the list, index() returns ''ValueError''
print(ages1.index(0))#Output: ValueError:
&lt;/pre&gt;

In programming, if such error occurs, program gets terminated. It can be solved using exception handling.
 
e.g.
&lt;pre&gt;
ages1 = [11,23,12,23,45]

try:
    print(ages1.index(0))
except ValueError:
    print(&quot;Exception has occured&quot;)    
    print(&quot;Element is not found in the list&quot;)

&lt;/pre&gt;
&lt;pre&gt;
'''Output: 
Exception has occured
Element is not found in the list
'''&lt;/pre&gt;
[[#Top]]

=== using 'in' operator===
''in'' operator is used to check whether a particular element is available in the list or not.e.g.

&lt;pre&gt;
ages1 = [11,23,12,23,45]
no=11

if no in ages1:
    print(&quot;no is there in the list&quot;)
else:    
    print(&quot;no is NOT there in the list&quot;)
&lt;/pre&gt;
&lt;pre&gt;
#Output: no is there in the list
&lt;/pre&gt;


'''Number is not there in the list'''
&lt;pre&gt;
ages1 = [11,23,12,23,45]
no=15

if no in ages1:
    print(&quot;no is there in the list&quot;)
else:    
    print(&quot;no is NOT there in the list&quot;)
&lt;/pre&gt;
&lt;pre&gt;
Output: no is NOT there in the list
&lt;/pre&gt;
[[#Top]]

==Updating the List==
The lists can be updated using ''append'' or ''insert'' function.  Append adds the element to the end of the list and Insert adds the element in the specified position.
&lt;pre&gt;
   # add the element 'Sheela' to the end of the list.
   List_2.append(&quot;Sheela&quot;)    
   print (List_2) will output 
   ['Kala', 'Mala', 'Sheela']
&lt;/pre&gt;
   &lt;pre&gt;
# add the element &quot;Bala&quot; in the list at the index 1.
   List_2.insert(1,&quot;Bala&quot;)    
   print (List_2) will output 
   ['Kala', 'Bala','Mala', 'Sheela']
&lt;/pre&gt;

=== Extend the list by adding elements of other list at end using extend()===
&lt;pre&gt;
ages = [11,23,12,23,45]
ages.extend([57,58])
print(ages)
&lt;/pre&gt;

&lt;pre&gt;
#Output: [11, 23, 12, 23, 45, 57, 58]
&lt;/pre&gt;

==== Difference between ''append() and extend()'' ====
Difference between ''append()'' and ''extend()'' can be easily understood, by the following example.

&lt;pre&gt;
appendlist = [11,23,12,23,45]
appendlist.append([57,58])

extendlist= [11,23,12,23,45]
extendlist.extend([57,58])
&lt;/pre&gt;

&lt;pre&gt;
'''Output:
[11, 23, 12, 23, 45, [57, 58]]
[11, 23, 12, 23, 45, 57, 58]'''
&lt;/pre&gt;

[[#Top]]

==Basic Operations on List==
===Frequency of Occurrence===
list.count(object) will return the number of times the object occur in the list.
  '''Example'''
    ages = [11,23,12,23,45,43,22,24,23]
    ages.count(23) will return
    3
    ages.count(100) will return
    0

===Length of the List===
''len(list)'' will return the length of the list ie. the number of objects in the list.
  '''Example'''
&lt;pre&gt;
    ages = [11,23,12,23,45,43,22,24,23]
    len(ages) # Output: 9
&lt;/pre&gt;

To print the objects in the list either use ''for item in list'' or ''for index in range(len(list))''
&lt;pre&gt;
    for item in ages:       
        print (item)  
        (OR)
    for index in range(len(ages)) :
        print (ages[index])
&lt;/pre&gt;

===Sort the List===
''list.sort()'' will sort the list in ascending order
  '''Example'''
    ages = [11,23,12,23,45,43,22,24,23]
    ages.sort() 
    print (ages) 
    [11, 12, 22, 23, 23, 23, 24, 43, 45]

[[#Top]]

===Sort the List using sorted() function===
''sorted(list1)'' will sort the list and return a new list, it doesn't modify the original list
&lt;br&gt;'''Example: Sort in ascending order'''
&lt;pre&gt;
ages = [11,23,12,23,45,43,22,24,23]
newList=sorted(ages)
print(newList)

#Output: [11, 12, 22, 23, 23, 23, 24, 43, 45]
&lt;/pre&gt;

&lt;br&gt;'''Example: Sort in descending order'''
&lt;pre&gt;
ages = [11,23,12,23,45,43,22,24,23]
newList=sorted(ages,reverse=True)
print(newList)

#Output: [45, 43, 24, 23, 23, 23, 22, 12, 11]
&lt;/pre&gt;

===Reverse the List===
''list.reverse()'' will reverse the original list
  '''Example'''
    ages = [11, 12, 22, 23, 23, 23, 24, 43, 45]
    ages.reverse()
    print (ages)
    [45, 43, 24, 23, 23, 23, 22, 12, 11]

Both ''sort()'' and ''reverse()'' list operation will work on numeric and alphanumeric data list.

A special use of the ''reverse()'' function is to descend a list that is sorted in ascending order.

  '''Example'''
&lt;pre&gt;
ages = [11, 12, 22, 23, 23, 23, 24, 43, 45]
ages.sort()
print(ages)
ages.reverse()
print(ages)
&lt;/pre&gt;

[[#Top]]

===Slicing===
Used to retrieve an object or objects in a range as a list  
  '''Example'''

Use ''list[index]'' to retrieve the object at the given index
&lt;pre&gt;
In [1]: student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
In [2]: student[3]     #Object at index 3.  Remember index starts at 0
Out[2]: 'Geetha'      
&lt;/pre&gt;

Use ''list[start_index : end_index + 1]'' to retrieve objects from the start_index to end_index 
&lt;pre&gt;
In [3]: student[2:4]     # Objects from index 2 to 3 as List. Note the [ and ]
Out[3]: ['Vijay', 'Geetha']   
&lt;/pre&gt;

Use ''list[:]'' to retrieve objects from the starting of the list to the end of the list. 
The default start value will be the starting index of the list (i.e. 0) and the default end value
will be the length of the list 
&lt;pre&gt;
In [4]: student[:]        # prints the entire list
Out[4]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma', 'Janani']
&lt;/pre&gt;
&lt;pre&gt;
In [5]: student[:5]       # prints the objects from the start of the list upto object at index 4
Out[5]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran']
&lt;/pre&gt;
&lt;pre&gt;
In [6]: student[2:]       # prints the objects from index 2 upto the end of the list
Out[6]: ['Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma', 'Janani']
&lt;/pre&gt;

Negative index too is available in Python. It starts from last element of the list. i.e.
&lt;pre&gt;
In [7]:student[-1]        #prints last index of list
Out[7]: 'Janani'
&lt;/pre&gt;
&lt;pre&gt;
In [8]:student[-1:-8]     #prints empty list
Out[8]: []
&lt;/pre&gt;
&lt;pre&gt;
In [9]:student[-8:-1]     #prints -8th index to -1st index elements
Out[9]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma']
&lt;/pre&gt;

[[#Top]]

===Removing Item from list ===
----

Is used to remove a specific item from the list.

'''Example:'''
 
Use list.remove(entry/value)  Or   del list[index]    Or list.pop(index)
&lt;pre&gt;
student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
student.remove(&quot;Arun&quot;)   #This will delete item &quot;Arun&quot;
         Or    
del student[0]           # This will delete item at index 0
         Or
student.pop(0)         # This will delete and return item at index 0
print(student)    
Output: &quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
&lt;/pre&gt;

[[#Top]]

===Delete list ===
----
Used to delete complete list

'''Example'''

Use del &lt;list name&gt;
&lt;pre&gt;
student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
del student&lt;/pre&gt;

===Concatenation of two lists===
----
''+'' is the concatenation operator which is used concatenate two lists. 
&lt;pre&gt;
ages1 = [11,23,12,23,45]
ages2 = [25, 24, 43, 47]
age=ages1+ages2
print(age)
#Output: [11, 23, 12, 23, 45, 25, 24, 43, 47]
&lt;/pre&gt;

===Repeatation of a list ===
----
''*'' is the operator to repeat a particular list.
&lt;pre&gt;
ages1 = [11,23,12,23,45]
age=ages1*5 #ages1 list is repeated 5 times and stroed in ''age'' list
print(age)

#Output: [11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45]
&lt;/pre&gt;

=== all and any for List===
all() and any() are special functions to check whether all elements in iterable is ''True'' or any element is ''True''
&lt;ol&gt;
&lt;li&gt;If all elements in a list are ''True'', ''all()'' will return ''True''&lt;/li&gt;
&lt;li&gt;If iterable is ''empty'', ''all()'' will return ''True''&lt;/li&gt;
&lt;li&gt;If iterable contains at least one ''True'', ''any()'' will return ''True''&lt;/li&gt;
&lt;li&gt;If iterable is ''empty'', ''any()'' will return ''False''&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;
lsit=[True, True, True, True]
print(all(lsit))#Output: True
print(any(lsit))#Output: True

lsit1=[True, False, True, True]
print(all(lsit1))#Output: False
print(any(lsit1))#Output: True

lsit2=[False,False,False]
print(all(lsit2))#Output: False
print(any(lsit2))#Output: False

lsit3=[]
print(all(lsit3))#Output: True
print(any(lsit3))#Output: False
&lt;/pre&gt;

==Conditional Statements==
&lt;pre&gt;Conditionals are used to check the condition and change the flow of the program 
accordingly. They are realized in programming languages through if statement. The 
syntax is as follows :
&lt;pre&gt;
         if condition : 
            statement
&lt;/pre&gt;
    '''Note:''' Do not forget indentation (inserting space/tab) in the line after the
 if condition.
    
    In case you want to execute a set of statements when a condition is true and another

set of statement when the condition is false.
&lt;pre&gt;
         if condition : 
            statement 1
         else :
            statement 2
&lt;/pre&gt;

&lt;pre&gt;    
    Multiple if-else statements can be written as follows:
         if condition_1 : 
            statement 1
         elif condition_2 : # 'elif' is short for 'else if'
            statement 2
         elif condition_3 :
            statement 3
        .
        .
         else :
            final statement
&lt;/pre&gt;

[[#TOP]]

=Loops and Conditionals : Fizzbuzz=
====Loops====
Loops are used to execute a set of repetitive statements. They are realised
through 'while' and 'for' loops in programming languages. The syntax of 'for' loop is 
as follows :
&lt;pre&gt;
for LOOPVARIABLE in SEQUENCE: 
            STATEMENTS&lt;/pre&gt;

    '''e.g.''' to print all the data from a list we can write:
&lt;pre&gt;
for item in list_name:
      print(item)&lt;/pre&gt;
    OR
&lt;pre&gt;
for index in range(len(list_name)):
      print(list_name[index])
 &lt;/pre&gt;   
    The syntax for while loop is as follows :
&lt;pre&gt;    
while BOOLEANEXPRESSION: 
     STATEMENTS
     INCREMENT/DECREMENT
&lt;/pre&gt;    
    '''e.g.''' if we want to print all numbers from 1 to 10
&lt;pre&gt;
i=1
while i&lt;=10 :
    print(i,&quot; &quot;)
    i=i+1
    &lt;/pre&gt;
 
'while' loop has indefinite iteration (run-time unknown). So, there must be loop,  break statement in it.
 Whereas 'for' loop is definite in nature (i.e. known or predictable span).&lt;br&gt;

&lt;b&gt;NOTE: Python doesn't have anything like do-while loop.&lt;/b&gt;

[[#TOP]]

==Implementation==
Here, we try to demonstrate the concept of loops and conditionals through a game called Fizzbuzz. The rules are as follows :&lt;br/&gt;
[[File:fizzBuzz.gif]]

• if input number is a multiple of ’3’ print ”Fizz”
&lt;br/&gt;
• if input number is a multiple of ’5’ print ”Buzz”
&lt;br/&gt;
• if input number is a multiple of both '3' and ’5’ print ”FizzBuzz”
&lt;br/&gt;
The pseudo code is as follows :
&lt;pre&gt;
   If input no % 3 == 0 and  input no % 5 == 0 : 
       print ”Fizzbuzz”
   else if input no % 3 == 0 : 
       print ”Fizz”
   else if input no % 5 == 0 : 
       print ”Buzz”
   else :
       print the input no
&lt;/pre&gt;
 &lt;p style=&quot;text-align:justify&quot;&gt;
The order of statements execution matters to get the desired output. The highest priority condition should be first followed by other. In fizzbuzz programming, first checking should be done for both divisibility of 3 and 5. If condition not satisfied only then it should check individually for 3 or 5. So carefully choosing the order is crucial for better programming.
Note: There is some effect of present condition statements chosen on next conditions statements. That is why in first attempt fizzbuzz programming got struck.&lt;/p&gt;

Example: 
&lt;pre&gt;
#Code to achieve the above requirement in python3.
i = int(input(&quot;Enter the number&quot;)) 
if i%3 == 0 and i%5 == 0: print(i,&quot;FizzBuzz&quot;)  
elif i%5 == 0: print(i,&quot;Buzz&quot;)
elif i%3 == 0: print(i,&quot;Fizz&quot;)
else: print(i)
&lt;/pre&gt;
Lets put the same into a loop for a range given by the user.
&lt;pre&gt;
def fizzbuzzgame(start,stop):
    for i in range(start,stop+1):
        if i%3 == 0 and i%5 == 0:
            print(i,&quot;FizzBuzz&quot;)
        elif i%5 == 0:
            print(i,&quot;Buzz&quot;)
        elif i%3 == 0:
            print(i,&quot;Fizz&quot;)
        else: print(i)

fizzbuzzgame(50,100)
&lt;/pre&gt;
&lt;pre&gt;
#Output:
1235
Buzz
======================================
555
Fizzbuzz
======================================
1235
Buzz
======================================
999
Fizz
&lt;/pre&gt;

=== Fizz Buzz game in Interactive mode with Score ===
'''By Ms. Ami Tusharkant Choksi'''
&lt;pre&gt;
def fizzbuzzgame(i):
        if i%3 == 0 and i%5 == 0:
            print(i,&quot;FizzBuzz&quot;)
            return(&quot;fzbz&quot;)
        elif i%5 == 0:
            print(i,&quot;Buzz&quot;)
            return(&quot;bz&quot;)
        elif i%3 == 0:
            print(i,&quot;Fizz&quot;)
            return(&quot;fz&quot;)
        else:
            print(i)
            return(&quot;no&quot;)

ch = 'y'
fizzbuzz=0
fizz=0
buzz=0
nothing=0
print(&quot;&quot;&quot;

 /$$$$$$$$/$$                  /$$$$$$$                            
| $$_____|__/                 | $$__  $$                           
| $$      /$$/$$$$$$$$/$$$$$$$| $$  \ $$/$$   /$$/$$$$$$$$/$$$$$$$$
| $$$$$  | $|____ /$$|____ /$$| $$$$$$$| $$  | $|____ /$$|____ /$$/
| $$__/  | $$  /$$$$/   /$$$$/| $$__  $| $$  | $$  /$$$$/   /$$$$/ 
| $$     | $$ /$$__/   /$$__/ | $$  \ $| $$  | $$ /$$__/   /$$__/  
| $$     | $$/$$$$$$$$/$$$$$$$| $$$$$$$|  $$$$$$//$$$$$$$$/$$$$$$$$
|__/     |__|________|________|_______/ \______/|________|________/
                                                                  
&quot;&quot;&quot;)   
print('''

  /$$$$$$                                
 /$$__  $$                               
| $$  \__/ /$$$$$$ /$$$$$$/$$$$  /$$$$$$ 
| $$ /$$$$|____  $| $$_  $$_  $$/$$__  $$
| $$|_  $$ /$$$$$$| $$ \ $$ \ $| $$$$$$$$
| $$  \ $$/$$__  $| $$ | $$ | $| $$_____/
|  $$$$$$|  $$$$$$| $$ | $$ | $|  $$$$$$$
 \______/ \_______|__/ |__/ |__/\_______/
                                     
''')

while(ch == 'y'):
    n=int(input(&quot;Enter a Number : &quot;))
    winLoose=fizzbuzzgame(n)
    if(winLoose == &quot;fz&quot;):
        fizz+=1
    elif(winLoose == &quot;bz&quot;):
        buzz+=1
    elif(winLoose == &quot;fzbz&quot;):
        fizzbuzz+=1
    ch=input(&quot;Do you want to continue playing the game : (y/n)&quot;)
    if(ch=='n'):
        print('Congratulations, your score is\n FizzBuzz:%d\nFizz:%d\nBuzz:%d' %
(fizzbuzz,fizz,buzz))
    
'''Sample Output:

 /$$$$$$$$/$$                  /$$$$$$$                            
| $$_____|__/                 | $$__  $$                           
| $$      /$$/$$$$$$$$/$$$$$$$| $$  \ $$/$$   /$$/$$$$$$$$/$$$$$$$$
| $$$$$  | $|____ /$$|____ /$$| $$$$$$$| $$  | $|____ /$$|____ /$$/
| $$__/  | $$  /$$$$/   /$$$$/| $$__  $| $$  | $$  /$$$$/   /$$$$/ 
| $$     | $$ /$$__/   /$$__/ | $$  \ $| $$  | $$ /$$__/   /$$__/  
| $$     | $$/$$$$$$$$/$$$$$$$| $$$$$$$|  $$$$$$//$$$$$$$$/$$$$$$$$
|__/     |__|________|________|_______/ \______/|________|________/
                                                                                                                                   

  /$$$$$$                                
 /$$__  $$                               
| $$  \__/ /$$$$$$ /$$$$$$/$$$$  /$$$$$$ 
| $$ /$$$$|____  $| $$_  $$_  $$/$$__  $$
| $$|_  $$ /$$$$$$| $$ \ $$ \ $| $$$$$$$$
| $$  \ $$/$$__  $| $$ | $$ | $| $$_____/
|  $$$$$$|  $$$$$$| $$ | $$ | $|  $$$$$$$
 \______/ \_______|__/ |__/ |__/\_______/
                                         

Enter a Number : 666
666 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 777
777 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 555
555 FizzBuzz
Do you want to continue playing the game : (y/n)y
Enter a Number : 1
1
Do you want to continue playing the game : (y/n)y
Enter a Number : 789
789 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 25
25 Buzz
Do you want to continue playing the game : (y/n)n
Congratulations, your score is

FizzBuzz:1
Fizz:3
Buzz:1

&lt;/pre&gt;

=Crowd Computing: Just Estimate=
==Wisdom of Crowds==
 &lt;p style=&quot;text-align:justify&quot;&gt;
The concept of ’Wisdom of Crowds’ was proposed by Francis Galton. A weight-judging competition was carried on at the annual show of the West of England Fat Stock and Poultry Exhibition recently held at Plymouth, A fat ox having been selected, competitors bought stamped and numbered cards, each, on which to inscribe their respective names, addresses, and estimates of what the ox would weigh after it had been slaughtered. Those who guessed most successfully received prizes. About 8oo tickets were issued to the par- ticipants. The middlemost estimate of all the estimates recorded was 1207 lbs and the actual weight of the ox was 1198 lbs.&lt;/p&gt;

==Our Experiment==
 &lt;p style=&quot;text-align:justify&quot;&gt;
The crowd had to guess the number of candies/gems in a jar. Around 75 people participated in the experiment. The actual number of gems in the jar were 375. The median of all estimates came out to be 300 and the mean of all the estimates came out to be around 396. Median underestimated and mean overestimated the actual value. So according to recent studies, Trimmed mean must be used as an aggregate measure to estimate where Wisdom of Crowds is involved.
&lt;/p&gt;
[[File:Gemsjar.jpg|center|200px|caption]]

===Trimmed Mean===
 &lt;p style=&quot;text-align:justify&quot;&gt;
In these kinds of experiments, 10% trimmed mean is usually followed. For calculating 10% trimmed mean, remove 10% smallest and 10% largest values from the sample. Calculate the mean of the sample obtained. In the above experiment, the trimmed mean came out to be around 351 which is very close to the actual value.&lt;/p&gt;

==Implementation==
Here, we try to demonstrate the concept of trimmed mean through crowd computing.
&lt;ol&gt;
&lt;li&gt; Input a list of estimates done by the crowd .&lt;/li&gt;
&lt;li&gt; Sort the list.&lt;/li&gt;
&lt;li&gt; Remove the 10% smallest values.&lt;/li&gt;
&lt;li&gt; Remove the 10% largest values.
&lt;li&gt; Calculate the mean of the new list obtained .&lt;/li&gt;&lt;/ol&gt;&lt;hr&gt;

==Data of Experiment==       
    Estimates =[1000,1010,1786,2000,1500,1500,100,120,150,150,150,170,175,180,197,200,200,200,200,200,200,220,220,220,220,234,250,250,250,250,250,250,250,250,250,263,270,275,275,286,300,
                300,300,300,300,300,300,300,320,350,350,350,400, 400,400,400,400,450,467,500,500,500,500,500,500,500,550,550,600,600,600,650,700,700,720]

    '''CODE:'''
&lt;pre&gt;
Estimates = [1000,1010,1786,2000,1500,1500,100,120,150,150,150,170,175,180,197,200,200,200,200,200,200,220,220,220,220,234,250,250,250,250,250,250,250,250,250,263,270,275,275,286,300,                300,300,300,300,300,300,300,320,350,350,350,400,400,400,400,400,450,467,500,500,500,500,500,500,500,550,550,600,600,600,650,700,700,720]
Estimates.sort()
offset = int(0.10*len(Estimates))
for i in range(offset):
       del Estimates[0]
       del Estimates[-1]
Sum = 0    
for i in range(len(Estimates)):
       Sum += Estimates[i]
Mean_Value = Sum/len(Estimates)
print(&quot;Mean : &quot;, int(Mean_Value))
#Output:
Mean :  351
&lt;/pre&gt;
&lt;hr&gt;
==Trimmed Mean for the above example== 
&lt;h3&gt;Using scipy library&lt;/h3&gt;
&lt;pre&gt;
#import scipy to use the method of trim_mean
from scipy import stats
trimMean = stats.trim_mean(Estimates, 0.1) # Trim 10% at both ends
print(&quot;Trimmed Mean : &quot;,trimMean)
#Output:
Trimmed Mean :  335.1020408163265
&lt;/pre&gt;

&lt;h3&gt;Without using scipy library&lt;/h3&gt;
&lt;pre&gt;
#Trimmed mean with 10%
p=10/100
#sorted data
data=[2, 4, 6, 7, 11, 21, 81, 90, 105, 121]
n = len(data)
#Remove elements from both end
rem=int(n*p)
newData = data[rem:-rem]
mean = 0
for i in newData:
    mean += i
mean = int(mean/len(newData))
print(&quot;Trimmed mean : &quot;,mean)
#Output: Trimmed mean :  40
&lt;/pre&gt;
[[#Top]]

=Jumbled_Words Permutations: Jumbled Words=
==What are Permutations ?==
A permutation also called ordering of selected number of elements from a list denoted by nPr here we are choosing all elements of a list and so n=r&lt;br&gt;
nPr=n!/(n-r)!&lt;br&gt; as n=r
nPn=n!&lt;br&gt; which gives all possible arrangement of elements present in a list.

 For example, permutations of list [1,2,3] are [1,2,3], [1,3,2], [2,1,3], [2,3,1], 
[3,1,2], and [3,2,1]. 
The number of permutations of a list of elements nPn is given by n!. For example, there are 2! = 2 x 1 = 2 permutations of [1,2], namely [1,2] and [2,1], and 3! = 3 x 2 x 1 = 6 permutations of [1,2,3], as mentioned above.&lt;br/&gt;
[[File:Permutations.jpg]]

==Implementation==
 &lt;p style=&quot;text-align:justify&quot;&gt;
Here, we try to demonstrate the concept of permutations through jumbled words. It is a two player game in which one person presents the other person a different permutation of the word in his mind. The other person has to guess the right word. If he guesses, the he wins otherwise he loses.&lt;/p&gt;
 Input an list of words.
 Randomly pick a word from the list of words .
 Shuffle this word and present it to the other player.
 if word guesses by the player is same as the one picked from list of w
     player wins
 else
     player loses

ALTERNATE CODE TO GENERATE THIS GAME:
&lt;pre&gt;
import random
p1=input(&quot;enter player 1 name:&quot;)
p2=input(&quot;enter player 2 name:&quot;)
l=[&quot;rainbow&quot;,&quot;computer&quot;,&quot;robot&quot;,&quot;butter&quot;,&quot;vegetable&quot;,&quot;science&quot;,&quot;correct&quot;]
c1=c2=a1=a2=f1=f2=0
k=1
i=3
def play():
    n=random.choice(l)        ##n=chooses a word from list l
    l1=[]
    for j in n:
       l1.append(j)      ##creates a list for word in n
    for t in range(len(l1)):
       p=random.choice(l1)     ##this randomly displays letters in the list
       print(p)
       l1.remove(p)          ##to avoid the repetition of a letter
    s=input(&quot;enter the word:&quot;)
    if(s==n):
        print(&quot;correct&quot;)
        return 1
    else:
        print(&quot;not correct&quot;)
        print(&quot;answer is&quot;,n)
        return 0
def stat():
     print(&quot;player 1:&quot;)
     print(&quot;score:&quot;,c1)
     print(&quot;answered:&quot;,a1)
     print(&quot;failed:&quot;,f1)
     print(&quot;.............&quot;)
     print(&quot;player 2:&quot;)
     print(&quot;score:&quot;,c2)
     print(&quot;answered:&quot;,a2)
     print(&quot;failed&quot;,f2)
     if(c1&gt;c2):
         print(p1,&quot; won over &quot;,p2)
     elif(c1==c2):
         print(&quot;draw game&quot;)
     else:
         print(p2,&quot; won over &quot;,p1) 
while(i!=4):
      if(i==3):
         if(k==1):
             print(&quot;player 1 turn&quot;)
             print(&quot;your jumbled word is:&quot;)
             k=k+1
             m=play()
             if(m==1):      ##if guessed answer is correct,then score and no.of answered count will be increased
                c1+=1
                a1+=1
             else:
                f1+=1       ##else count of no.of failed to answered will be incremented
         else:
             print(&quot;player 2 turn&quot;)
             print(&quot;your jumbled word is:&quot;)
             k=k-1
             m=play()
             if(m==1):
                c2=c2+1
                a2=a2+1
             else:
                f2=f2+1
       if(i==2):
             print(&quot;present status&quot;)
             stat()
       i=int(input(&quot;enter your choice  1.stop 2.status 3.continue&quot;))
       if(i==1):
             stat()
             i=i+3
&lt;/pre&gt;
&lt;hr&gt;
=== JumbledWord Simple Logic, In Short ===
[[File:jumbledWord.gif]]
---
&lt;hr&gt;
'''Logic to create a Jumbled Word'''
&lt;hr&gt;
&lt;pre&gt;
#Get Jumbled Word and print it Horizontally
import random

def getJumbledWord(b):
    jumble=''
    l1 = [ b[i] for i in range(0, len(b)) ]
    for t in range(len(l1)):
       p=random.choice(l1)  #this randomly gets letters from the list      
       jumble=jumble+p       
       l1.remove(p)
    return jumble

b=input(&quot;Enter a word to make it jumbled : &quot;)
print(&quot;Jumbled Word : &quot;, getJumbledWord(b))
&lt;/pre&gt;
&lt;pre&gt;
Output:
Enter a word to make it jumbled : live and let live others
Jumbled Word :  vel  toldeisrte aihv len
==========================================
Enter a word to make it jumbled : junkfood
Jumbled Word :  nfukdooj
&lt;/pre&gt;
&lt;hr&gt;
'''Another Logic to create a Jumbled Word'''
&lt;hr&gt;
&lt;pre&gt;
import random
b=input(&quot;Enter a word to make it jumbled : &quot;)

def getJumbledWord1(b):
    l1 = [ b[i] for i in range(0, len(b)) ]
    random.shuffle(l1)
    str1 = ''.join(l1)
    return str1

print(&quot;Jumbled Word : &quot;, getJumbledWord1(b))
&lt;/pre&gt;

====Sample Output:====
&lt;pre&gt;
---- Output1 
Enter a word to make it jumbled : butter
Jumbled Word :  tbture

---- Output2 
Enter a word to make it jumbled : petriotism
Jumbled Word :  pittrosime
&lt;/pre&gt;

=Theory of Evolution=

== What is Evolution ? ==
Evolution is the change in heritable characteristics over successive generations. The theory of evolution explains that DNA, which acts as a carrier of genetic information from one generation to other, tends to change or mutate occasionally. These changes are reflected in next generations to come. This is how life has evolved on earth from bacteria to human beings.&lt;br&gt;
[[File:Evolution.png|500px]]

== Implementation ==
 &lt;p style=&quot;text-align:justify&quot;&gt;
An array representing DNA is stored in a file. As genes are forms of DNA, they contain information to be transferred to forthcoming generations. Assume that information is in the form of bits (in the form of 0s and 1s). A number is picked randomly from 1 to the size of the array. A new parameter has been introduced which decides whether mutation would occur or not. If the value of this new parameter is 1 (It is picked randomly from 1 to 100), then only change is reflected down the generations, otherwise it is not. The pseudo code is as follows :
&lt;/p&gt;
Input an array containing genetic information .
Randomly generate a number (say m) from 1 to length of the array. Randomly generate other number (say p) from 1 to 100.

&lt;pre&gt; 
    if p is equal to 1 then 
        if m is 1 then
          set it to 0
        else
          set it to 1
&lt;/pre&gt;
[[#TOP]]</text>
      <sha1>4mbjzlakchvijkgt9ur1jsna5frpgfo</sha1>
    </revision>
    <revision>
      <id>3760</id>
      <parentid>3759</parentid>
      <timestamp>2018-09-29T04:13:44Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* Conditional Statements */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="30751">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_3 Contributors of this page]
*Week 3 Playlist: https://www.youtube.com/playlist?list=PLc_j0TNIaWxOVx_z9jAM2UB3RqYNXaoEo
=List=
List is a flexible data structure used for storing a group of data separated by comma. The elements in a list need not be of the same data type.

'''Example:'''
       List_1 = [ 1, 2,3] or 
       List_1 = [&quot;coffee&quot;, &quot;Tea&quot;, &quot;Milk&quot;] or
       List_1 = [1,&quot;coffee&quot;, &quot;Tea&quot;, 3, &quot;5&quot;]

==List Creation==
a) A list can be created by simply putting values (separated by comma) between square
 brackets as given below,
&lt;pre&gt;List_1 = [1,&quot;coffee&quot;, &quot;Tea&quot;, 3, &quot;5&quot;] #this creates a list by name List_1 containing
 following items
&lt;/pre&gt;


Or,
(b)A List can be created from scratch and elements can be added 
&lt;pre&gt;
        List_2 = [ ]
        List_2.append(&quot;Kala&quot;)
        List_2.append(&quot;Mala&quot;)
&lt;/pre&gt;
Here we use &quot;append&quot;, which is a function in python that enable us to append or attach an element to a list .
&lt;pre&gt;Thus List_2 will now hold [&quot;Kala&quot;,&quot;Mala&quot;]&lt;/pre&gt;

[[#Top]]

==Operations and Methods to work with List==
&lt;pre&gt;
a = [25,30,50,90,12,13]
b = [100,300,500,200,250]
&lt;/pre&gt;
&lt;hr&gt;
&lt;table border=2&gt;
  &lt;tr&gt;
    &lt;th&gt;&lt;b&gt;Method/&lt;br&gt;Operator&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Function&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Syntax&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Output&lt;/b&gt;&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;len()&lt;/td&gt;
    &lt;td&gt;Find length of a list&lt;/td&gt;
    &lt;td&gt;len(a)&lt;/td&gt;
    &lt;td&gt;6&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;max()&lt;/td&gt;
    &lt;td&gt;Find maximum element from the list&lt;/td&gt;
    &lt;td&gt;max(a)&lt;/td&gt;
    &lt;td&gt;90&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;min()&lt;/td&gt;
    &lt;td&gt;Find minimum element from the list&lt;/td&gt;
    &lt;td&gt;min(a)&lt;/td&gt;
    &lt;td&gt;12&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sum()&lt;/td&gt;
    &lt;td&gt;Returns sum of all elements of the list&lt;/td&gt;
    &lt;td&gt;sum(a)&lt;/td&gt;
    &lt;td&gt;220&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;reverse()&lt;/td&gt;
    &lt;td&gt;Reverses the original list&lt;/td&gt;
    &lt;td&gt;a.reverse()&lt;/td&gt;
    &lt;td&gt;[13, 12, 90, 50, 30, 25]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sort()&lt;/td&gt;
    &lt;td&gt;Sorts the original list in ascending order&lt;/td&gt;
    &lt;td&gt;a.sort()&lt;/td&gt;
    &lt;td&gt;[12, 13, 25, 30, 50, 90]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sorted()&lt;/td&gt;
    &lt;td&gt;Returns the new sorted list &lt;/td&gt;
    &lt;td&gt;sorted(a)&lt;/td&gt;
    &lt;td&gt;[12, 13, 25, 30, 50, 90]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;insert()&lt;/td&gt;
    &lt;td&gt;Insert at a particular index in the list, and shifts remaining elements&lt;/td&gt;
    &lt;td&gt;a.insert(3,3)&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 3, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;append()&lt;/td&gt;
    &lt;td&gt;Adds elements/object to the end of the list&lt;/td&gt;
    &lt;td&gt;a.append(5)&lt;br&gt;a.append([10,20])&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 5]&lt;br&gt;[25, 30, 50, 90, 12, 13, [10, 20]]&lt;br&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;extend()&lt;/td&gt;
    &lt;td&gt;Adds object to the end of the list as elements not as object&lt;/td&gt;
    &lt;td&gt;a.extend([10,20])&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 10, 20]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;*&amp;nbsp;&amp;nbsp;Repeatation&lt;br&gt;operator&lt;/td&gt;
    &lt;td&gt;Repeat the list for n times and returns a new list&lt;/td&gt;
    &lt;td&gt;a*2&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 25, 30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;+ Concatenation&lt;br&gt;operator&lt;/td&gt;
    &lt;td&gt;Concatenates two lists, and returns a new list&lt;/td&gt;
    &lt;td&gt;a+b&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 100, 300, 500, 200, 250]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;index()&lt;/td&gt;
    &lt;td&gt;Finds index of a particular element in the list or not&lt;/td&gt;
    &lt;td&gt;a.index(25)&lt;br&gt;a.index(0)&lt;br&gt;&lt;/td&gt;
    &lt;td&gt;0&lt;br&gt;&lt;br&gt;ValueError: 0 is not in list&lt;br&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;in operator&lt;/td&gt;
    &lt;td&gt;Finds whether a particular element is in the list or not, returns boolean&lt;/td&gt;
    &lt;td&gt;25 in a&lt;/td&gt;
    &lt;td&gt;True&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;not in operator&lt;/td&gt;
    &lt;td&gt;Checks if element is not available in list, returns boolean&lt;/td&gt;
    &lt;td&gt;25 not in a&lt;/td&gt;
    &lt;td&gt;False&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;count()&lt;/td&gt;
    &lt;td&gt;Counts the number of occurence of an element in the list&lt;/td&gt;
    &lt;td&gt;a.count(25)&lt;/td&gt;
    &lt;td&gt;1&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;remove()&lt;/td&gt;
    &lt;td&gt;Removes an element from the list&lt;/td&gt;
    &lt;td&gt;a.remove(25)&lt;/td&gt;
    &lt;td&gt; [30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;pop()&lt;/td&gt;
    &lt;td&gt;Delete and return item at index 0&lt;/td&gt;
    &lt;td&gt;a.pop(0)&lt;/td&gt;
    &lt;td&gt;25 , a will be [30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;del&lt;/td&gt;
    &lt;td&gt;Deletes item at a particular index from the list&lt;/td&gt;
    &lt;td&gt;del a[0]&lt;/td&gt;
    &lt;td&gt;[30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;all()&lt;/td&gt;
&lt;td&gt;Returns True, if all items in list are True or it is an empty list&lt;/td&gt;
&lt;td&gt;all([True, True, True])
all([])
&lt;/td&gt;
&lt;td&gt;True&lt;br&gt;
True&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;any()&lt;/td&gt;
&lt;td&gt;Returns True, if any item in list is True else return False&lt;/td&gt;
&lt;td&gt;any([True, True, True])&lt;br&gt;
any([True, False, True])&lt;br&gt;
any([])&lt;/td&gt;
&lt;td&gt;True&lt;br&gt;False&lt;br&gt;False&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;

==Printing the List==
=== Print whole list ===
A list can be printed simply or using a ''for / while'' loop 

 print(List_2)     # To print the entire list
This code will print      
 ['Kala','Mala']     

===Print element at a particular index===
&lt;pre&gt;
Using index position
    List_2[0]     # prints 'Kala' ,i.e,the value at index position 0.
    List_2[1]     # prints 'Mala'.
&lt;/pre&gt;
=== Without using index position ===
&lt;pre&gt;
for item in List_2:   # here item is a variable used to access elements in list.
       print(item)
   This code snippet prints 
    Kala
    Mala
&lt;/pre&gt;
[[#Top]]

==Search for a particular element in list==
Elements in a list can be searched by one of the two ways:
=== using index() function===
&lt;pre&gt;
ages1 = [11,23,12,23,45]

#if element is available in the list, index() returns the index value on which, the element is
 present.
print(ages1.index(45))#Output: 4

#if element is not available in the list, index() returns ''ValueError''
print(ages1.index(0))#Output: ValueError:
&lt;/pre&gt;

In programming, if such error occurs, program gets terminated. It can be solved using exception handling.
 
e.g.
&lt;pre&gt;
ages1 = [11,23,12,23,45]

try:
    print(ages1.index(0))
except ValueError:
    print(&quot;Exception has occured&quot;)    
    print(&quot;Element is not found in the list&quot;)

&lt;/pre&gt;
&lt;pre&gt;
'''Output: 
Exception has occured
Element is not found in the list
'''&lt;/pre&gt;
[[#Top]]

=== using 'in' operator===
''in'' operator is used to check whether a particular element is available in the list or not.e.g.

&lt;pre&gt;
ages1 = [11,23,12,23,45]
no=11

if no in ages1:
    print(&quot;no is there in the list&quot;)
else:    
    print(&quot;no is NOT there in the list&quot;)
&lt;/pre&gt;
&lt;pre&gt;
#Output: no is there in the list
&lt;/pre&gt;


'''Number is not there in the list'''
&lt;pre&gt;
ages1 = [11,23,12,23,45]
no=15

if no in ages1:
    print(&quot;no is there in the list&quot;)
else:    
    print(&quot;no is NOT there in the list&quot;)
&lt;/pre&gt;
&lt;pre&gt;
Output: no is NOT there in the list
&lt;/pre&gt;
[[#Top]]

==Updating the List==
The lists can be updated using ''append'' or ''insert'' function.  Append adds the element to the end of the list and Insert adds the element in the specified position.
&lt;pre&gt;
   # add the element 'Sheela' to the end of the list.
   List_2.append(&quot;Sheela&quot;)    
   print (List_2) will output 
   ['Kala', 'Mala', 'Sheela']
&lt;/pre&gt;
   &lt;pre&gt;
# add the element &quot;Bala&quot; in the list at the index 1.
   List_2.insert(1,&quot;Bala&quot;)    
   print (List_2) will output 
   ['Kala', 'Bala','Mala', 'Sheela']
&lt;/pre&gt;

=== Extend the list by adding elements of other list at end using extend()===
&lt;pre&gt;
ages = [11,23,12,23,45]
ages.extend([57,58])
print(ages)
&lt;/pre&gt;

&lt;pre&gt;
#Output: [11, 23, 12, 23, 45, 57, 58]
&lt;/pre&gt;

==== Difference between ''append() and extend()'' ====
Difference between ''append()'' and ''extend()'' can be easily understood, by the following example.

&lt;pre&gt;
appendlist = [11,23,12,23,45]
appendlist.append([57,58])

extendlist= [11,23,12,23,45]
extendlist.extend([57,58])
&lt;/pre&gt;

&lt;pre&gt;
'''Output:
[11, 23, 12, 23, 45, [57, 58]]
[11, 23, 12, 23, 45, 57, 58]'''
&lt;/pre&gt;

[[#Top]]

==Basic Operations on List==
===Frequency of Occurrence===
list.count(object) will return the number of times the object occur in the list.
  '''Example'''
    ages = [11,23,12,23,45,43,22,24,23]
    ages.count(23) will return
    3
    ages.count(100) will return
    0

===Length of the List===
''len(list)'' will return the length of the list ie. the number of objects in the list.
  '''Example'''
&lt;pre&gt;
    ages = [11,23,12,23,45,43,22,24,23]
    len(ages) # Output: 9
&lt;/pre&gt;

To print the objects in the list either use ''for item in list'' or ''for index in range(len(list))''
&lt;pre&gt;
    for item in ages:       
        print (item)  
        (OR)
    for index in range(len(ages)) :
        print (ages[index])
&lt;/pre&gt;

===Sort the List===
''list.sort()'' will sort the list in ascending order
  '''Example'''
    ages = [11,23,12,23,45,43,22,24,23]
    ages.sort() 
    print (ages) 
    [11, 12, 22, 23, 23, 23, 24, 43, 45]

[[#Top]]

===Sort the List using sorted() function===
''sorted(list1)'' will sort the list and return a new list, it doesn't modify the original list
&lt;br&gt;'''Example: Sort in ascending order'''
&lt;pre&gt;
ages = [11,23,12,23,45,43,22,24,23]
newList=sorted(ages)
print(newList)

#Output: [11, 12, 22, 23, 23, 23, 24, 43, 45]
&lt;/pre&gt;

&lt;br&gt;'''Example: Sort in descending order'''
&lt;pre&gt;
ages = [11,23,12,23,45,43,22,24,23]
newList=sorted(ages,reverse=True)
print(newList)

#Output: [45, 43, 24, 23, 23, 23, 22, 12, 11]
&lt;/pre&gt;

===Reverse the List===
''list.reverse()'' will reverse the original list
  '''Example'''
    ages = [11, 12, 22, 23, 23, 23, 24, 43, 45]
    ages.reverse()
    print (ages)
    [45, 43, 24, 23, 23, 23, 22, 12, 11]

Both ''sort()'' and ''reverse()'' list operation will work on numeric and alphanumeric data list.

A special use of the ''reverse()'' function is to descend a list that is sorted in ascending order.

  '''Example'''
&lt;pre&gt;
ages = [11, 12, 22, 23, 23, 23, 24, 43, 45]
ages.sort()
print(ages)
ages.reverse()
print(ages)
&lt;/pre&gt;

[[#Top]]

===Slicing===
Used to retrieve an object or objects in a range as a list  
  '''Example'''

Use ''list[index]'' to retrieve the object at the given index
&lt;pre&gt;
In [1]: student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
In [2]: student[3]     #Object at index 3.  Remember index starts at 0
Out[2]: 'Geetha'      
&lt;/pre&gt;

Use ''list[start_index : end_index + 1]'' to retrieve objects from the start_index to end_index 
&lt;pre&gt;
In [3]: student[2:4]     # Objects from index 2 to 3 as List. Note the [ and ]
Out[3]: ['Vijay', 'Geetha']   
&lt;/pre&gt;

Use ''list[:]'' to retrieve objects from the starting of the list to the end of the list. 
The default start value will be the starting index of the list (i.e. 0) and the default end value
will be the length of the list 
&lt;pre&gt;
In [4]: student[:]        # prints the entire list
Out[4]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma', 'Janani']
&lt;/pre&gt;
&lt;pre&gt;
In [5]: student[:5]       # prints the objects from the start of the list upto object at index 4
Out[5]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran']
&lt;/pre&gt;
&lt;pre&gt;
In [6]: student[2:]       # prints the objects from index 2 upto the end of the list
Out[6]: ['Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma', 'Janani']
&lt;/pre&gt;

Negative index too is available in Python. It starts from last element of the list. i.e.
&lt;pre&gt;
In [7]:student[-1]        #prints last index of list
Out[7]: 'Janani'
&lt;/pre&gt;
&lt;pre&gt;
In [8]:student[-1:-8]     #prints empty list
Out[8]: []
&lt;/pre&gt;
&lt;pre&gt;
In [9]:student[-8:-1]     #prints -8th index to -1st index elements
Out[9]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma']
&lt;/pre&gt;

[[#Top]]

===Removing Item from list ===
----

Is used to remove a specific item from the list.

'''Example:'''
 
Use list.remove(entry/value)  Or   del list[index]    Or list.pop(index)
&lt;pre&gt;
student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
student.remove(&quot;Arun&quot;)   #This will delete item &quot;Arun&quot;
         Or    
del student[0]           # This will delete item at index 0
         Or
student.pop(0)         # This will delete and return item at index 0
print(student)    
Output: &quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
&lt;/pre&gt;

[[#Top]]

===Delete list ===
----
Used to delete complete list

'''Example'''

Use del &lt;list name&gt;
&lt;pre&gt;
student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
del student&lt;/pre&gt;

===Concatenation of two lists===
----
''+'' is the concatenation operator which is used concatenate two lists. 
&lt;pre&gt;
ages1 = [11,23,12,23,45]
ages2 = [25, 24, 43, 47]
age=ages1+ages2
print(age)
#Output: [11, 23, 12, 23, 45, 25, 24, 43, 47]
&lt;/pre&gt;

===Repeatation of a list ===
----
''*'' is the operator to repeat a particular list.
&lt;pre&gt;
ages1 = [11,23,12,23,45]
age=ages1*5 #ages1 list is repeated 5 times and stroed in ''age'' list
print(age)

#Output: [11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45]
&lt;/pre&gt;

=== all and any for List===
all() and any() are special functions to check whether all elements in iterable is ''True'' or any element is ''True''
&lt;ol&gt;
&lt;li&gt;If all elements in a list are ''True'', ''all()'' will return ''True''&lt;/li&gt;
&lt;li&gt;If iterable is ''empty'', ''all()'' will return ''True''&lt;/li&gt;
&lt;li&gt;If iterable contains at least one ''True'', ''any()'' will return ''True''&lt;/li&gt;
&lt;li&gt;If iterable is ''empty'', ''any()'' will return ''False''&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;
lsit=[True, True, True, True]
print(all(lsit))#Output: True
print(any(lsit))#Output: True

lsit1=[True, False, True, True]
print(all(lsit1))#Output: False
print(any(lsit1))#Output: True

lsit2=[False,False,False]
print(all(lsit2))#Output: False
print(any(lsit2))#Output: False

lsit3=[]
print(all(lsit3))#Output: True
print(any(lsit3))#Output: False
&lt;/pre&gt;

==Conditional Statements==
&lt;pre&gt;Conditionals are used to check the condition and change the flow of the program 
accordingly. They are realized in programming languages through if statement. The 
syntax is as follows :
&lt;pre&gt;
         if condition : 
            statement
&lt;/pre&gt;
    '''Note:''' Do not forget indentation (inserting space/tab) in the line after the
 if condition.
    
    In case you want to execute a set of statements when a condition is true and another

set of statement when the condition is false.
&lt;pre&gt;
         if condition : 
            statement 1
         else :
            statement 2
&lt;/pre&gt;

&lt;pre&gt;    
    Multiple if-else statements can be written as follows:
         if condition_1 : 
            statement 1
         elif condition_2 : # 'elif' is short for 'else if'
            statement 2
         elif condition_3 :
            statement 3
        .
        .
         else :
            final statement
&lt;/pre&gt;

[[#Top]]

=Loops and Conditionals : Fizzbuzz=
====Loops====
Loops are used to execute a set of repetitive statements. They are realised
through 'while' and 'for' loops in programming languages. The syntax of 'for' loop is 
as follows :
&lt;pre&gt;
for LOOPVARIABLE in SEQUENCE: 
            STATEMENTS&lt;/pre&gt;

    '''e.g.''' to print all the data from a list we can write:
&lt;pre&gt;
for item in list_name:
      print(item)&lt;/pre&gt;
    OR
&lt;pre&gt;
for index in range(len(list_name)):
      print(list_name[index])
 &lt;/pre&gt;   
    The syntax for while loop is as follows :
&lt;pre&gt;    
while BOOLEANEXPRESSION: 
     STATEMENTS
     INCREMENT/DECREMENT
&lt;/pre&gt;    
    '''e.g.''' if we want to print all numbers from 1 to 10
&lt;pre&gt;
i=1
while i&lt;=10 :
    print(i,&quot; &quot;)
    i=i+1
    &lt;/pre&gt;
 
'while' loop has indefinite iteration (run-time unknown). So, there must be loop,  break statement in it.
 Whereas 'for' loop is definite in nature (i.e. known or predictable span).&lt;br&gt;

&lt;b&gt;NOTE: Python doesn't have anything like do-while loop.&lt;/b&gt;

[[#TOP]]

==Implementation==
Here, we try to demonstrate the concept of loops and conditionals through a game called Fizzbuzz. The rules are as follows :&lt;br/&gt;
[[File:fizzBuzz.gif]]

• if input number is a multiple of ’3’ print ”Fizz”
&lt;br/&gt;
• if input number is a multiple of ’5’ print ”Buzz”
&lt;br/&gt;
• if input number is a multiple of both '3' and ’5’ print ”FizzBuzz”
&lt;br/&gt;
The pseudo code is as follows :
&lt;pre&gt;
   If input no % 3 == 0 and  input no % 5 == 0 : 
       print ”Fizzbuzz”
   else if input no % 3 == 0 : 
       print ”Fizz”
   else if input no % 5 == 0 : 
       print ”Buzz”
   else :
       print the input no
&lt;/pre&gt;
 &lt;p style=&quot;text-align:justify&quot;&gt;
The order of statements execution matters to get the desired output. The highest priority condition should be first followed by other. In fizzbuzz programming, first checking should be done for both divisibility of 3 and 5. If condition not satisfied only then it should check individually for 3 or 5. So carefully choosing the order is crucial for better programming.
Note: There is some effect of present condition statements chosen on next conditions statements. That is why in first attempt fizzbuzz programming got struck.&lt;/p&gt;

Example: 
&lt;pre&gt;
#Code to achieve the above requirement in python3.
i = int(input(&quot;Enter the number&quot;)) 
if i%3 == 0 and i%5 == 0: print(i,&quot;FizzBuzz&quot;)  
elif i%5 == 0: print(i,&quot;Buzz&quot;)
elif i%3 == 0: print(i,&quot;Fizz&quot;)
else: print(i)
&lt;/pre&gt;
Lets put the same into a loop for a range given by the user.
&lt;pre&gt;
def fizzbuzzgame(start,stop):
    for i in range(start,stop+1):
        if i%3 == 0 and i%5 == 0:
            print(i,&quot;FizzBuzz&quot;)
        elif i%5 == 0:
            print(i,&quot;Buzz&quot;)
        elif i%3 == 0:
            print(i,&quot;Fizz&quot;)
        else: print(i)

fizzbuzzgame(50,100)
&lt;/pre&gt;
&lt;pre&gt;
#Output:
1235
Buzz
======================================
555
Fizzbuzz
======================================
1235
Buzz
======================================
999
Fizz
&lt;/pre&gt;

=== Fizz Buzz game in Interactive mode with Score ===
'''By Ms. Ami Tusharkant Choksi'''
&lt;pre&gt;
def fizzbuzzgame(i):
        if i%3 == 0 and i%5 == 0:
            print(i,&quot;FizzBuzz&quot;)
            return(&quot;fzbz&quot;)
        elif i%5 == 0:
            print(i,&quot;Buzz&quot;)
            return(&quot;bz&quot;)
        elif i%3 == 0:
            print(i,&quot;Fizz&quot;)
            return(&quot;fz&quot;)
        else:
            print(i)
            return(&quot;no&quot;)

ch = 'y'
fizzbuzz=0
fizz=0
buzz=0
nothing=0
print(&quot;&quot;&quot;

 /$$$$$$$$/$$                  /$$$$$$$                            
| $$_____|__/                 | $$__  $$                           
| $$      /$$/$$$$$$$$/$$$$$$$| $$  \ $$/$$   /$$/$$$$$$$$/$$$$$$$$
| $$$$$  | $|____ /$$|____ /$$| $$$$$$$| $$  | $|____ /$$|____ /$$/
| $$__/  | $$  /$$$$/   /$$$$/| $$__  $| $$  | $$  /$$$$/   /$$$$/ 
| $$     | $$ /$$__/   /$$__/ | $$  \ $| $$  | $$ /$$__/   /$$__/  
| $$     | $$/$$$$$$$$/$$$$$$$| $$$$$$$|  $$$$$$//$$$$$$$$/$$$$$$$$
|__/     |__|________|________|_______/ \______/|________|________/
                                                                  
&quot;&quot;&quot;)   
print('''

  /$$$$$$                                
 /$$__  $$                               
| $$  \__/ /$$$$$$ /$$$$$$/$$$$  /$$$$$$ 
| $$ /$$$$|____  $| $$_  $$_  $$/$$__  $$
| $$|_  $$ /$$$$$$| $$ \ $$ \ $| $$$$$$$$
| $$  \ $$/$$__  $| $$ | $$ | $| $$_____/
|  $$$$$$|  $$$$$$| $$ | $$ | $|  $$$$$$$
 \______/ \_______|__/ |__/ |__/\_______/
                                     
''')

while(ch == 'y'):
    n=int(input(&quot;Enter a Number : &quot;))
    winLoose=fizzbuzzgame(n)
    if(winLoose == &quot;fz&quot;):
        fizz+=1
    elif(winLoose == &quot;bz&quot;):
        buzz+=1
    elif(winLoose == &quot;fzbz&quot;):
        fizzbuzz+=1
    ch=input(&quot;Do you want to continue playing the game : (y/n)&quot;)
    if(ch=='n'):
        print('Congratulations, your score is\n FizzBuzz:%d\nFizz:%d\nBuzz:%d' %
(fizzbuzz,fizz,buzz))
    
'''Sample Output:

 /$$$$$$$$/$$                  /$$$$$$$                            
| $$_____|__/                 | $$__  $$                           
| $$      /$$/$$$$$$$$/$$$$$$$| $$  \ $$/$$   /$$/$$$$$$$$/$$$$$$$$
| $$$$$  | $|____ /$$|____ /$$| $$$$$$$| $$  | $|____ /$$|____ /$$/
| $$__/  | $$  /$$$$/   /$$$$/| $$__  $| $$  | $$  /$$$$/   /$$$$/ 
| $$     | $$ /$$__/   /$$__/ | $$  \ $| $$  | $$ /$$__/   /$$__/  
| $$     | $$/$$$$$$$$/$$$$$$$| $$$$$$$|  $$$$$$//$$$$$$$$/$$$$$$$$
|__/     |__|________|________|_______/ \______/|________|________/
                                                                                                                                   

  /$$$$$$                                
 /$$__  $$                               
| $$  \__/ /$$$$$$ /$$$$$$/$$$$  /$$$$$$ 
| $$ /$$$$|____  $| $$_  $$_  $$/$$__  $$
| $$|_  $$ /$$$$$$| $$ \ $$ \ $| $$$$$$$$
| $$  \ $$/$$__  $| $$ | $$ | $| $$_____/
|  $$$$$$|  $$$$$$| $$ | $$ | $|  $$$$$$$
 \______/ \_______|__/ |__/ |__/\_______/
                                         

Enter a Number : 666
666 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 777
777 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 555
555 FizzBuzz
Do you want to continue playing the game : (y/n)y
Enter a Number : 1
1
Do you want to continue playing the game : (y/n)y
Enter a Number : 789
789 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 25
25 Buzz
Do you want to continue playing the game : (y/n)n
Congratulations, your score is

FizzBuzz:1
Fizz:3
Buzz:1

&lt;/pre&gt;

=Crowd Computing: Just Estimate=
==Wisdom of Crowds==
 &lt;p style=&quot;text-align:justify&quot;&gt;
The concept of ’Wisdom of Crowds’ was proposed by Francis Galton. A weight-judging competition was carried on at the annual show of the West of England Fat Stock and Poultry Exhibition recently held at Plymouth, A fat ox having been selected, competitors bought stamped and numbered cards, each, on which to inscribe their respective names, addresses, and estimates of what the ox would weigh after it had been slaughtered. Those who guessed most successfully received prizes. About 8oo tickets were issued to the par- ticipants. The middlemost estimate of all the estimates recorded was 1207 lbs and the actual weight of the ox was 1198 lbs.&lt;/p&gt;

==Our Experiment==
 &lt;p style=&quot;text-align:justify&quot;&gt;
The crowd had to guess the number of candies/gems in a jar. Around 75 people participated in the experiment. The actual number of gems in the jar were 375. The median of all estimates came out to be 300 and the mean of all the estimates came out to be around 396. Median underestimated and mean overestimated the actual value. So according to recent studies, Trimmed mean must be used as an aggregate measure to estimate where Wisdom of Crowds is involved.
&lt;/p&gt;
[[File:Gemsjar.jpg|center|200px|caption]]

===Trimmed Mean===
 &lt;p style=&quot;text-align:justify&quot;&gt;
In these kinds of experiments, 10% trimmed mean is usually followed. For calculating 10% trimmed mean, remove 10% smallest and 10% largest values from the sample. Calculate the mean of the sample obtained. In the above experiment, the trimmed mean came out to be around 351 which is very close to the actual value.&lt;/p&gt;

==Implementation==
Here, we try to demonstrate the concept of trimmed mean through crowd computing.
&lt;ol&gt;
&lt;li&gt; Input a list of estimates done by the crowd .&lt;/li&gt;
&lt;li&gt; Sort the list.&lt;/li&gt;
&lt;li&gt; Remove the 10% smallest values.&lt;/li&gt;
&lt;li&gt; Remove the 10% largest values.
&lt;li&gt; Calculate the mean of the new list obtained .&lt;/li&gt;&lt;/ol&gt;&lt;hr&gt;

==Data of Experiment==       
    Estimates =[1000,1010,1786,2000,1500,1500,100,120,150,150,150,170,175,180,197,200,200,200,200,200,200,220,220,220,220,234,250,250,250,250,250,250,250,250,250,263,270,275,275,286,300,
                300,300,300,300,300,300,300,320,350,350,350,400, 400,400,400,400,450,467,500,500,500,500,500,500,500,550,550,600,600,600,650,700,700,720]

    '''CODE:'''
&lt;pre&gt;
Estimates = [1000,1010,1786,2000,1500,1500,100,120,150,150,150,170,175,180,197,200,200,200,200,200,200,220,220,220,220,234,250,250,250,250,250,250,250,250,250,263,270,275,275,286,300,                300,300,300,300,300,300,300,320,350,350,350,400,400,400,400,400,450,467,500,500,500,500,500,500,500,550,550,600,600,600,650,700,700,720]
Estimates.sort()
offset = int(0.10*len(Estimates))
for i in range(offset):
       del Estimates[0]
       del Estimates[-1]
Sum = 0    
for i in range(len(Estimates)):
       Sum += Estimates[i]
Mean_Value = Sum/len(Estimates)
print(&quot;Mean : &quot;, int(Mean_Value))
#Output:
Mean :  351
&lt;/pre&gt;
&lt;hr&gt;
==Trimmed Mean for the above example== 
&lt;h3&gt;Using scipy library&lt;/h3&gt;
&lt;pre&gt;
#import scipy to use the method of trim_mean
from scipy import stats
trimMean = stats.trim_mean(Estimates, 0.1) # Trim 10% at both ends
print(&quot;Trimmed Mean : &quot;,trimMean)
#Output:
Trimmed Mean :  335.1020408163265
&lt;/pre&gt;

&lt;h3&gt;Without using scipy library&lt;/h3&gt;
&lt;pre&gt;
#Trimmed mean with 10%
p=10/100
#sorted data
data=[2, 4, 6, 7, 11, 21, 81, 90, 105, 121]
n = len(data)
#Remove elements from both end
rem=int(n*p)
newData = data[rem:-rem]
mean = 0
for i in newData:
    mean += i
mean = int(mean/len(newData))
print(&quot;Trimmed mean : &quot;,mean)
#Output: Trimmed mean :  40
&lt;/pre&gt;
[[#Top]]

=Jumbled_Words Permutations: Jumbled Words=
==What are Permutations ?==
A permutation also called ordering of selected number of elements from a list denoted by nPr here we are choosing all elements of a list and so n=r&lt;br&gt;
nPr=n!/(n-r)!&lt;br&gt; as n=r
nPn=n!&lt;br&gt; which gives all possible arrangement of elements present in a list.

 For example, permutations of list [1,2,3] are [1,2,3], [1,3,2], [2,1,3], [2,3,1], 
[3,1,2], and [3,2,1]. 
The number of permutations of a list of elements nPn is given by n!. For example, there are 2! = 2 x 1 = 2 permutations of [1,2], namely [1,2] and [2,1], and 3! = 3 x 2 x 1 = 6 permutations of [1,2,3], as mentioned above.&lt;br/&gt;
[[File:Permutations.jpg]]

==Implementation==
 &lt;p style=&quot;text-align:justify&quot;&gt;
Here, we try to demonstrate the concept of permutations through jumbled words. It is a two player game in which one person presents the other person a different permutation of the word in his mind. The other person has to guess the right word. If he guesses, the he wins otherwise he loses.&lt;/p&gt;
 Input an list of words.
 Randomly pick a word from the list of words .
 Shuffle this word and present it to the other player.
 if word guesses by the player is same as the one picked from list of w
     player wins
 else
     player loses

ALTERNATE CODE TO GENERATE THIS GAME:
&lt;pre&gt;
import random
p1=input(&quot;enter player 1 name:&quot;)
p2=input(&quot;enter player 2 name:&quot;)
l=[&quot;rainbow&quot;,&quot;computer&quot;,&quot;robot&quot;,&quot;butter&quot;,&quot;vegetable&quot;,&quot;science&quot;,&quot;correct&quot;]
c1=c2=a1=a2=f1=f2=0
k=1
i=3
def play():
    n=random.choice(l)        ##n=chooses a word from list l
    l1=[]
    for j in n:
       l1.append(j)      ##creates a list for word in n
    for t in range(len(l1)):
       p=random.choice(l1)     ##this randomly displays letters in the list
       print(p)
       l1.remove(p)          ##to avoid the repetition of a letter
    s=input(&quot;enter the word:&quot;)
    if(s==n):
        print(&quot;correct&quot;)
        return 1
    else:
        print(&quot;not correct&quot;)
        print(&quot;answer is&quot;,n)
        return 0
def stat():
     print(&quot;player 1:&quot;)
     print(&quot;score:&quot;,c1)
     print(&quot;answered:&quot;,a1)
     print(&quot;failed:&quot;,f1)
     print(&quot;.............&quot;)
     print(&quot;player 2:&quot;)
     print(&quot;score:&quot;,c2)
     print(&quot;answered:&quot;,a2)
     print(&quot;failed&quot;,f2)
     if(c1&gt;c2):
         print(p1,&quot; won over &quot;,p2)
     elif(c1==c2):
         print(&quot;draw game&quot;)
     else:
         print(p2,&quot; won over &quot;,p1) 
while(i!=4):
      if(i==3):
         if(k==1):
             print(&quot;player 1 turn&quot;)
             print(&quot;your jumbled word is:&quot;)
             k=k+1
             m=play()
             if(m==1):      ##if guessed answer is correct,then score and no.of answered count will be increased
                c1+=1
                a1+=1
             else:
                f1+=1       ##else count of no.of failed to answered will be incremented
         else:
             print(&quot;player 2 turn&quot;)
             print(&quot;your jumbled word is:&quot;)
             k=k-1
             m=play()
             if(m==1):
                c2=c2+1
                a2=a2+1
             else:
                f2=f2+1
       if(i==2):
             print(&quot;present status&quot;)
             stat()
       i=int(input(&quot;enter your choice  1.stop 2.status 3.continue&quot;))
       if(i==1):
             stat()
             i=i+3
&lt;/pre&gt;
&lt;hr&gt;
=== JumbledWord Simple Logic, In Short ===
[[File:jumbledWord.gif]]
---
&lt;hr&gt;
'''Logic to create a Jumbled Word'''
&lt;hr&gt;
&lt;pre&gt;
#Get Jumbled Word and print it Horizontally
import random

def getJumbledWord(b):
    jumble=''
    l1 = [ b[i] for i in range(0, len(b)) ]
    for t in range(len(l1)):
       p=random.choice(l1)  #this randomly gets letters from the list      
       jumble=jumble+p       
       l1.remove(p)
    return jumble

b=input(&quot;Enter a word to make it jumbled : &quot;)
print(&quot;Jumbled Word : &quot;, getJumbledWord(b))
&lt;/pre&gt;
&lt;pre&gt;
Output:
Enter a word to make it jumbled : live and let live others
Jumbled Word :  vel  toldeisrte aihv len
==========================================
Enter a word to make it jumbled : junkfood
Jumbled Word :  nfukdooj
&lt;/pre&gt;
&lt;hr&gt;
'''Another Logic to create a Jumbled Word'''
&lt;hr&gt;
&lt;pre&gt;
import random
b=input(&quot;Enter a word to make it jumbled : &quot;)

def getJumbledWord1(b):
    l1 = [ b[i] for i in range(0, len(b)) ]
    random.shuffle(l1)
    str1 = ''.join(l1)
    return str1

print(&quot;Jumbled Word : &quot;, getJumbledWord1(b))
&lt;/pre&gt;

====Sample Output:====
&lt;pre&gt;
---- Output1 
Enter a word to make it jumbled : butter
Jumbled Word :  tbture

---- Output2 
Enter a word to make it jumbled : petriotism
Jumbled Word :  pittrosime
&lt;/pre&gt;

=Theory of Evolution=

== What is Evolution ? ==
Evolution is the change in heritable characteristics over successive generations. The theory of evolution explains that DNA, which acts as a carrier of genetic information from one generation to other, tends to change or mutate occasionally. These changes are reflected in next generations to come. This is how life has evolved on earth from bacteria to human beings.&lt;br&gt;
[[File:Evolution.png|500px]]

== Implementation ==
 &lt;p style=&quot;text-align:justify&quot;&gt;
An array representing DNA is stored in a file. As genes are forms of DNA, they contain information to be transferred to forthcoming generations. Assume that information is in the form of bits (in the form of 0s and 1s). A number is picked randomly from 1 to the size of the array. A new parameter has been introduced which decides whether mutation would occur or not. If the value of this new parameter is 1 (It is picked randomly from 1 to 100), then only change is reflected down the generations, otherwise it is not. The pseudo code is as follows :
&lt;/p&gt;
Input an array containing genetic information .
Randomly generate a number (say m) from 1 to length of the array. Randomly generate other number (say p) from 1 to 100.

&lt;pre&gt; 
    if p is equal to 1 then 
        if m is 1 then
          set it to 0
        else
          set it to 1
&lt;/pre&gt;
[[#TOP]]</text>
      <sha1>lth0favhzak21z3zqg5tmqq3cme2q5f</sha1>
    </revision>
    <revision>
      <id>3761</id>
      <parentid>3760</parentid>
      <timestamp>2018-09-29T04:14:05Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* Conditional Statements */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="30746">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_3 Contributors of this page]
*Week 3 Playlist: https://www.youtube.com/playlist?list=PLc_j0TNIaWxOVx_z9jAM2UB3RqYNXaoEo
=List=
List is a flexible data structure used for storing a group of data separated by comma. The elements in a list need not be of the same data type.

'''Example:'''
       List_1 = [ 1, 2,3] or 
       List_1 = [&quot;coffee&quot;, &quot;Tea&quot;, &quot;Milk&quot;] or
       List_1 = [1,&quot;coffee&quot;, &quot;Tea&quot;, 3, &quot;5&quot;]

==List Creation==
a) A list can be created by simply putting values (separated by comma) between square
 brackets as given below,
&lt;pre&gt;List_1 = [1,&quot;coffee&quot;, &quot;Tea&quot;, 3, &quot;5&quot;] #this creates a list by name List_1 containing
 following items
&lt;/pre&gt;


Or,
(b)A List can be created from scratch and elements can be added 
&lt;pre&gt;
        List_2 = [ ]
        List_2.append(&quot;Kala&quot;)
        List_2.append(&quot;Mala&quot;)
&lt;/pre&gt;
Here we use &quot;append&quot;, which is a function in python that enable us to append or attach an element to a list .
&lt;pre&gt;Thus List_2 will now hold [&quot;Kala&quot;,&quot;Mala&quot;]&lt;/pre&gt;

[[#Top]]

==Operations and Methods to work with List==
&lt;pre&gt;
a = [25,30,50,90,12,13]
b = [100,300,500,200,250]
&lt;/pre&gt;
&lt;hr&gt;
&lt;table border=2&gt;
  &lt;tr&gt;
    &lt;th&gt;&lt;b&gt;Method/&lt;br&gt;Operator&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Function&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Syntax&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Output&lt;/b&gt;&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;len()&lt;/td&gt;
    &lt;td&gt;Find length of a list&lt;/td&gt;
    &lt;td&gt;len(a)&lt;/td&gt;
    &lt;td&gt;6&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;max()&lt;/td&gt;
    &lt;td&gt;Find maximum element from the list&lt;/td&gt;
    &lt;td&gt;max(a)&lt;/td&gt;
    &lt;td&gt;90&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;min()&lt;/td&gt;
    &lt;td&gt;Find minimum element from the list&lt;/td&gt;
    &lt;td&gt;min(a)&lt;/td&gt;
    &lt;td&gt;12&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sum()&lt;/td&gt;
    &lt;td&gt;Returns sum of all elements of the list&lt;/td&gt;
    &lt;td&gt;sum(a)&lt;/td&gt;
    &lt;td&gt;220&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;reverse()&lt;/td&gt;
    &lt;td&gt;Reverses the original list&lt;/td&gt;
    &lt;td&gt;a.reverse()&lt;/td&gt;
    &lt;td&gt;[13, 12, 90, 50, 30, 25]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sort()&lt;/td&gt;
    &lt;td&gt;Sorts the original list in ascending order&lt;/td&gt;
    &lt;td&gt;a.sort()&lt;/td&gt;
    &lt;td&gt;[12, 13, 25, 30, 50, 90]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sorted()&lt;/td&gt;
    &lt;td&gt;Returns the new sorted list &lt;/td&gt;
    &lt;td&gt;sorted(a)&lt;/td&gt;
    &lt;td&gt;[12, 13, 25, 30, 50, 90]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;insert()&lt;/td&gt;
    &lt;td&gt;Insert at a particular index in the list, and shifts remaining elements&lt;/td&gt;
    &lt;td&gt;a.insert(3,3)&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 3, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;append()&lt;/td&gt;
    &lt;td&gt;Adds elements/object to the end of the list&lt;/td&gt;
    &lt;td&gt;a.append(5)&lt;br&gt;a.append([10,20])&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 5]&lt;br&gt;[25, 30, 50, 90, 12, 13, [10, 20]]&lt;br&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;extend()&lt;/td&gt;
    &lt;td&gt;Adds object to the end of the list as elements not as object&lt;/td&gt;
    &lt;td&gt;a.extend([10,20])&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 10, 20]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;*&amp;nbsp;&amp;nbsp;Repeatation&lt;br&gt;operator&lt;/td&gt;
    &lt;td&gt;Repeat the list for n times and returns a new list&lt;/td&gt;
    &lt;td&gt;a*2&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 25, 30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;+ Concatenation&lt;br&gt;operator&lt;/td&gt;
    &lt;td&gt;Concatenates two lists, and returns a new list&lt;/td&gt;
    &lt;td&gt;a+b&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 100, 300, 500, 200, 250]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;index()&lt;/td&gt;
    &lt;td&gt;Finds index of a particular element in the list or not&lt;/td&gt;
    &lt;td&gt;a.index(25)&lt;br&gt;a.index(0)&lt;br&gt;&lt;/td&gt;
    &lt;td&gt;0&lt;br&gt;&lt;br&gt;ValueError: 0 is not in list&lt;br&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;in operator&lt;/td&gt;
    &lt;td&gt;Finds whether a particular element is in the list or not, returns boolean&lt;/td&gt;
    &lt;td&gt;25 in a&lt;/td&gt;
    &lt;td&gt;True&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;not in operator&lt;/td&gt;
    &lt;td&gt;Checks if element is not available in list, returns boolean&lt;/td&gt;
    &lt;td&gt;25 not in a&lt;/td&gt;
    &lt;td&gt;False&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;count()&lt;/td&gt;
    &lt;td&gt;Counts the number of occurence of an element in the list&lt;/td&gt;
    &lt;td&gt;a.count(25)&lt;/td&gt;
    &lt;td&gt;1&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;remove()&lt;/td&gt;
    &lt;td&gt;Removes an element from the list&lt;/td&gt;
    &lt;td&gt;a.remove(25)&lt;/td&gt;
    &lt;td&gt; [30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;pop()&lt;/td&gt;
    &lt;td&gt;Delete and return item at index 0&lt;/td&gt;
    &lt;td&gt;a.pop(0)&lt;/td&gt;
    &lt;td&gt;25 , a will be [30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;del&lt;/td&gt;
    &lt;td&gt;Deletes item at a particular index from the list&lt;/td&gt;
    &lt;td&gt;del a[0]&lt;/td&gt;
    &lt;td&gt;[30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;all()&lt;/td&gt;
&lt;td&gt;Returns True, if all items in list are True or it is an empty list&lt;/td&gt;
&lt;td&gt;all([True, True, True])
all([])
&lt;/td&gt;
&lt;td&gt;True&lt;br&gt;
True&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;any()&lt;/td&gt;
&lt;td&gt;Returns True, if any item in list is True else return False&lt;/td&gt;
&lt;td&gt;any([True, True, True])&lt;br&gt;
any([True, False, True])&lt;br&gt;
any([])&lt;/td&gt;
&lt;td&gt;True&lt;br&gt;False&lt;br&gt;False&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;

==Printing the List==
=== Print whole list ===
A list can be printed simply or using a ''for / while'' loop 

 print(List_2)     # To print the entire list
This code will print      
 ['Kala','Mala']     

===Print element at a particular index===
&lt;pre&gt;
Using index position
    List_2[0]     # prints 'Kala' ,i.e,the value at index position 0.
    List_2[1]     # prints 'Mala'.
&lt;/pre&gt;
=== Without using index position ===
&lt;pre&gt;
for item in List_2:   # here item is a variable used to access elements in list.
       print(item)
   This code snippet prints 
    Kala
    Mala
&lt;/pre&gt;
[[#Top]]

==Search for a particular element in list==
Elements in a list can be searched by one of the two ways:
=== using index() function===
&lt;pre&gt;
ages1 = [11,23,12,23,45]

#if element is available in the list, index() returns the index value on which, the element is
 present.
print(ages1.index(45))#Output: 4

#if element is not available in the list, index() returns ''ValueError''
print(ages1.index(0))#Output: ValueError:
&lt;/pre&gt;

In programming, if such error occurs, program gets terminated. It can be solved using exception handling.
 
e.g.
&lt;pre&gt;
ages1 = [11,23,12,23,45]

try:
    print(ages1.index(0))
except ValueError:
    print(&quot;Exception has occured&quot;)    
    print(&quot;Element is not found in the list&quot;)

&lt;/pre&gt;
&lt;pre&gt;
'''Output: 
Exception has occured
Element is not found in the list
'''&lt;/pre&gt;
[[#Top]]

=== using 'in' operator===
''in'' operator is used to check whether a particular element is available in the list or not.e.g.

&lt;pre&gt;
ages1 = [11,23,12,23,45]
no=11

if no in ages1:
    print(&quot;no is there in the list&quot;)
else:    
    print(&quot;no is NOT there in the list&quot;)
&lt;/pre&gt;
&lt;pre&gt;
#Output: no is there in the list
&lt;/pre&gt;


'''Number is not there in the list'''
&lt;pre&gt;
ages1 = [11,23,12,23,45]
no=15

if no in ages1:
    print(&quot;no is there in the list&quot;)
else:    
    print(&quot;no is NOT there in the list&quot;)
&lt;/pre&gt;
&lt;pre&gt;
Output: no is NOT there in the list
&lt;/pre&gt;
[[#Top]]

==Updating the List==
The lists can be updated using ''append'' or ''insert'' function.  Append adds the element to the end of the list and Insert adds the element in the specified position.
&lt;pre&gt;
   # add the element 'Sheela' to the end of the list.
   List_2.append(&quot;Sheela&quot;)    
   print (List_2) will output 
   ['Kala', 'Mala', 'Sheela']
&lt;/pre&gt;
   &lt;pre&gt;
# add the element &quot;Bala&quot; in the list at the index 1.
   List_2.insert(1,&quot;Bala&quot;)    
   print (List_2) will output 
   ['Kala', 'Bala','Mala', 'Sheela']
&lt;/pre&gt;

=== Extend the list by adding elements of other list at end using extend()===
&lt;pre&gt;
ages = [11,23,12,23,45]
ages.extend([57,58])
print(ages)
&lt;/pre&gt;

&lt;pre&gt;
#Output: [11, 23, 12, 23, 45, 57, 58]
&lt;/pre&gt;

==== Difference between ''append() and extend()'' ====
Difference between ''append()'' and ''extend()'' can be easily understood, by the following example.

&lt;pre&gt;
appendlist = [11,23,12,23,45]
appendlist.append([57,58])

extendlist= [11,23,12,23,45]
extendlist.extend([57,58])
&lt;/pre&gt;

&lt;pre&gt;
'''Output:
[11, 23, 12, 23, 45, [57, 58]]
[11, 23, 12, 23, 45, 57, 58]'''
&lt;/pre&gt;

[[#Top]]

==Basic Operations on List==
===Frequency of Occurrence===
list.count(object) will return the number of times the object occur in the list.
  '''Example'''
    ages = [11,23,12,23,45,43,22,24,23]
    ages.count(23) will return
    3
    ages.count(100) will return
    0

===Length of the List===
''len(list)'' will return the length of the list ie. the number of objects in the list.
  '''Example'''
&lt;pre&gt;
    ages = [11,23,12,23,45,43,22,24,23]
    len(ages) # Output: 9
&lt;/pre&gt;

To print the objects in the list either use ''for item in list'' or ''for index in range(len(list))''
&lt;pre&gt;
    for item in ages:       
        print (item)  
        (OR)
    for index in range(len(ages)) :
        print (ages[index])
&lt;/pre&gt;

===Sort the List===
''list.sort()'' will sort the list in ascending order
  '''Example'''
    ages = [11,23,12,23,45,43,22,24,23]
    ages.sort() 
    print (ages) 
    [11, 12, 22, 23, 23, 23, 24, 43, 45]

[[#Top]]

===Sort the List using sorted() function===
''sorted(list1)'' will sort the list and return a new list, it doesn't modify the original list
&lt;br&gt;'''Example: Sort in ascending order'''
&lt;pre&gt;
ages = [11,23,12,23,45,43,22,24,23]
newList=sorted(ages)
print(newList)

#Output: [11, 12, 22, 23, 23, 23, 24, 43, 45]
&lt;/pre&gt;

&lt;br&gt;'''Example: Sort in descending order'''
&lt;pre&gt;
ages = [11,23,12,23,45,43,22,24,23]
newList=sorted(ages,reverse=True)
print(newList)

#Output: [45, 43, 24, 23, 23, 23, 22, 12, 11]
&lt;/pre&gt;

===Reverse the List===
''list.reverse()'' will reverse the original list
  '''Example'''
    ages = [11, 12, 22, 23, 23, 23, 24, 43, 45]
    ages.reverse()
    print (ages)
    [45, 43, 24, 23, 23, 23, 22, 12, 11]

Both ''sort()'' and ''reverse()'' list operation will work on numeric and alphanumeric data list.

A special use of the ''reverse()'' function is to descend a list that is sorted in ascending order.

  '''Example'''
&lt;pre&gt;
ages = [11, 12, 22, 23, 23, 23, 24, 43, 45]
ages.sort()
print(ages)
ages.reverse()
print(ages)
&lt;/pre&gt;

[[#Top]]

===Slicing===
Used to retrieve an object or objects in a range as a list  
  '''Example'''

Use ''list[index]'' to retrieve the object at the given index
&lt;pre&gt;
In [1]: student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
In [2]: student[3]     #Object at index 3.  Remember index starts at 0
Out[2]: 'Geetha'      
&lt;/pre&gt;

Use ''list[start_index : end_index + 1]'' to retrieve objects from the start_index to end_index 
&lt;pre&gt;
In [3]: student[2:4]     # Objects from index 2 to 3 as List. Note the [ and ]
Out[3]: ['Vijay', 'Geetha']   
&lt;/pre&gt;

Use ''list[:]'' to retrieve objects from the starting of the list to the end of the list. 
The default start value will be the starting index of the list (i.e. 0) and the default end value
will be the length of the list 
&lt;pre&gt;
In [4]: student[:]        # prints the entire list
Out[4]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma', 'Janani']
&lt;/pre&gt;
&lt;pre&gt;
In [5]: student[:5]       # prints the objects from the start of the list upto object at index 4
Out[5]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran']
&lt;/pre&gt;
&lt;pre&gt;
In [6]: student[2:]       # prints the objects from index 2 upto the end of the list
Out[6]: ['Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma', 'Janani']
&lt;/pre&gt;

Negative index too is available in Python. It starts from last element of the list. i.e.
&lt;pre&gt;
In [7]:student[-1]        #prints last index of list
Out[7]: 'Janani'
&lt;/pre&gt;
&lt;pre&gt;
In [8]:student[-1:-8]     #prints empty list
Out[8]: []
&lt;/pre&gt;
&lt;pre&gt;
In [9]:student[-8:-1]     #prints -8th index to -1st index elements
Out[9]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma']
&lt;/pre&gt;

[[#Top]]

===Removing Item from list ===
----

Is used to remove a specific item from the list.

'''Example:'''
 
Use list.remove(entry/value)  Or   del list[index]    Or list.pop(index)
&lt;pre&gt;
student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
student.remove(&quot;Arun&quot;)   #This will delete item &quot;Arun&quot;
         Or    
del student[0]           # This will delete item at index 0
         Or
student.pop(0)         # This will delete and return item at index 0
print(student)    
Output: &quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
&lt;/pre&gt;

[[#Top]]

===Delete list ===
----
Used to delete complete list

'''Example'''

Use del &lt;list name&gt;
&lt;pre&gt;
student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
del student&lt;/pre&gt;

===Concatenation of two lists===
----
''+'' is the concatenation operator which is used concatenate two lists. 
&lt;pre&gt;
ages1 = [11,23,12,23,45]
ages2 = [25, 24, 43, 47]
age=ages1+ages2
print(age)
#Output: [11, 23, 12, 23, 45, 25, 24, 43, 47]
&lt;/pre&gt;

===Repeatation of a list ===
----
''*'' is the operator to repeat a particular list.
&lt;pre&gt;
ages1 = [11,23,12,23,45]
age=ages1*5 #ages1 list is repeated 5 times and stroed in ''age'' list
print(age)

#Output: [11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45]
&lt;/pre&gt;

=== all and any for List===
all() and any() are special functions to check whether all elements in iterable is ''True'' or any element is ''True''
&lt;ol&gt;
&lt;li&gt;If all elements in a list are ''True'', ''all()'' will return ''True''&lt;/li&gt;
&lt;li&gt;If iterable is ''empty'', ''all()'' will return ''True''&lt;/li&gt;
&lt;li&gt;If iterable contains at least one ''True'', ''any()'' will return ''True''&lt;/li&gt;
&lt;li&gt;If iterable is ''empty'', ''any()'' will return ''False''&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;
lsit=[True, True, True, True]
print(all(lsit))#Output: True
print(any(lsit))#Output: True

lsit1=[True, False, True, True]
print(all(lsit1))#Output: False
print(any(lsit1))#Output: True

lsit2=[False,False,False]
print(all(lsit2))#Output: False
print(any(lsit2))#Output: False

lsit3=[]
print(all(lsit3))#Output: True
print(any(lsit3))#Output: False
&lt;/pre&gt;

==Conditional Statements==
Conditionals are used to check the condition and change the flow of the program 
accordingly. They are realized in programming languages through if statement. The 
syntax is as follows :
&lt;pre&gt;
         if condition : 
            statement
&lt;/pre&gt;
    '''Note:''' Do not forget indentation (inserting space/tab) in the line after the
 if condition.
    
    In case you want to execute a set of statements when a condition is true and another

set of statement when the condition is false.
&lt;pre&gt;
         if condition : 
            statement 1
         else :
            statement 2
&lt;/pre&gt;

&lt;pre&gt;    
    Multiple if-else statements can be written as follows:
         if condition_1 : 
            statement 1
         elif condition_2 : # 'elif' is short for 'else if'
            statement 2
         elif condition_3 :
            statement 3
        .
        .
         else :
            final statement
&lt;/pre&gt;

[[#Top]]

=Loops and Conditionals : Fizzbuzz=
====Loops====
Loops are used to execute a set of repetitive statements. They are realised
through 'while' and 'for' loops in programming languages. The syntax of 'for' loop is 
as follows :
&lt;pre&gt;
for LOOPVARIABLE in SEQUENCE: 
            STATEMENTS&lt;/pre&gt;

    '''e.g.''' to print all the data from a list we can write:
&lt;pre&gt;
for item in list_name:
      print(item)&lt;/pre&gt;
    OR
&lt;pre&gt;
for index in range(len(list_name)):
      print(list_name[index])
 &lt;/pre&gt;   
    The syntax for while loop is as follows :
&lt;pre&gt;    
while BOOLEANEXPRESSION: 
     STATEMENTS
     INCREMENT/DECREMENT
&lt;/pre&gt;    
    '''e.g.''' if we want to print all numbers from 1 to 10
&lt;pre&gt;
i=1
while i&lt;=10 :
    print(i,&quot; &quot;)
    i=i+1
    &lt;/pre&gt;
 
'while' loop has indefinite iteration (run-time unknown). So, there must be loop,  break statement in it.
 Whereas 'for' loop is definite in nature (i.e. known or predictable span).&lt;br&gt;

&lt;b&gt;NOTE: Python doesn't have anything like do-while loop.&lt;/b&gt;

[[#TOP]]

==Implementation==
Here, we try to demonstrate the concept of loops and conditionals through a game called Fizzbuzz. The rules are as follows :&lt;br/&gt;
[[File:fizzBuzz.gif]]

• if input number is a multiple of ’3’ print ”Fizz”
&lt;br/&gt;
• if input number is a multiple of ’5’ print ”Buzz”
&lt;br/&gt;
• if input number is a multiple of both '3' and ’5’ print ”FizzBuzz”
&lt;br/&gt;
The pseudo code is as follows :
&lt;pre&gt;
   If input no % 3 == 0 and  input no % 5 == 0 : 
       print ”Fizzbuzz”
   else if input no % 3 == 0 : 
       print ”Fizz”
   else if input no % 5 == 0 : 
       print ”Buzz”
   else :
       print the input no
&lt;/pre&gt;
 &lt;p style=&quot;text-align:justify&quot;&gt;
The order of statements execution matters to get the desired output. The highest priority condition should be first followed by other. In fizzbuzz programming, first checking should be done for both divisibility of 3 and 5. If condition not satisfied only then it should check individually for 3 or 5. So carefully choosing the order is crucial for better programming.
Note: There is some effect of present condition statements chosen on next conditions statements. That is why in first attempt fizzbuzz programming got struck.&lt;/p&gt;

Example: 
&lt;pre&gt;
#Code to achieve the above requirement in python3.
i = int(input(&quot;Enter the number&quot;)) 
if i%3 == 0 and i%5 == 0: print(i,&quot;FizzBuzz&quot;)  
elif i%5 == 0: print(i,&quot;Buzz&quot;)
elif i%3 == 0: print(i,&quot;Fizz&quot;)
else: print(i)
&lt;/pre&gt;
Lets put the same into a loop for a range given by the user.
&lt;pre&gt;
def fizzbuzzgame(start,stop):
    for i in range(start,stop+1):
        if i%3 == 0 and i%5 == 0:
            print(i,&quot;FizzBuzz&quot;)
        elif i%5 == 0:
            print(i,&quot;Buzz&quot;)
        elif i%3 == 0:
            print(i,&quot;Fizz&quot;)
        else: print(i)

fizzbuzzgame(50,100)
&lt;/pre&gt;
&lt;pre&gt;
#Output:
1235
Buzz
======================================
555
Fizzbuzz
======================================
1235
Buzz
======================================
999
Fizz
&lt;/pre&gt;

=== Fizz Buzz game in Interactive mode with Score ===
'''By Ms. Ami Tusharkant Choksi'''
&lt;pre&gt;
def fizzbuzzgame(i):
        if i%3 == 0 and i%5 == 0:
            print(i,&quot;FizzBuzz&quot;)
            return(&quot;fzbz&quot;)
        elif i%5 == 0:
            print(i,&quot;Buzz&quot;)
            return(&quot;bz&quot;)
        elif i%3 == 0:
            print(i,&quot;Fizz&quot;)
            return(&quot;fz&quot;)
        else:
            print(i)
            return(&quot;no&quot;)

ch = 'y'
fizzbuzz=0
fizz=0
buzz=0
nothing=0
print(&quot;&quot;&quot;

 /$$$$$$$$/$$                  /$$$$$$$                            
| $$_____|__/                 | $$__  $$                           
| $$      /$$/$$$$$$$$/$$$$$$$| $$  \ $$/$$   /$$/$$$$$$$$/$$$$$$$$
| $$$$$  | $|____ /$$|____ /$$| $$$$$$$| $$  | $|____ /$$|____ /$$/
| $$__/  | $$  /$$$$/   /$$$$/| $$__  $| $$  | $$  /$$$$/   /$$$$/ 
| $$     | $$ /$$__/   /$$__/ | $$  \ $| $$  | $$ /$$__/   /$$__/  
| $$     | $$/$$$$$$$$/$$$$$$$| $$$$$$$|  $$$$$$//$$$$$$$$/$$$$$$$$
|__/     |__|________|________|_______/ \______/|________|________/
                                                                  
&quot;&quot;&quot;)   
print('''

  /$$$$$$                                
 /$$__  $$                               
| $$  \__/ /$$$$$$ /$$$$$$/$$$$  /$$$$$$ 
| $$ /$$$$|____  $| $$_  $$_  $$/$$__  $$
| $$|_  $$ /$$$$$$| $$ \ $$ \ $| $$$$$$$$
| $$  \ $$/$$__  $| $$ | $$ | $| $$_____/
|  $$$$$$|  $$$$$$| $$ | $$ | $|  $$$$$$$
 \______/ \_______|__/ |__/ |__/\_______/
                                     
''')

while(ch == 'y'):
    n=int(input(&quot;Enter a Number : &quot;))
    winLoose=fizzbuzzgame(n)
    if(winLoose == &quot;fz&quot;):
        fizz+=1
    elif(winLoose == &quot;bz&quot;):
        buzz+=1
    elif(winLoose == &quot;fzbz&quot;):
        fizzbuzz+=1
    ch=input(&quot;Do you want to continue playing the game : (y/n)&quot;)
    if(ch=='n'):
        print('Congratulations, your score is\n FizzBuzz:%d\nFizz:%d\nBuzz:%d' %
(fizzbuzz,fizz,buzz))
    
'''Sample Output:

 /$$$$$$$$/$$                  /$$$$$$$                            
| $$_____|__/                 | $$__  $$                           
| $$      /$$/$$$$$$$$/$$$$$$$| $$  \ $$/$$   /$$/$$$$$$$$/$$$$$$$$
| $$$$$  | $|____ /$$|____ /$$| $$$$$$$| $$  | $|____ /$$|____ /$$/
| $$__/  | $$  /$$$$/   /$$$$/| $$__  $| $$  | $$  /$$$$/   /$$$$/ 
| $$     | $$ /$$__/   /$$__/ | $$  \ $| $$  | $$ /$$__/   /$$__/  
| $$     | $$/$$$$$$$$/$$$$$$$| $$$$$$$|  $$$$$$//$$$$$$$$/$$$$$$$$
|__/     |__|________|________|_______/ \______/|________|________/
                                                                                                                                   

  /$$$$$$                                
 /$$__  $$                               
| $$  \__/ /$$$$$$ /$$$$$$/$$$$  /$$$$$$ 
| $$ /$$$$|____  $| $$_  $$_  $$/$$__  $$
| $$|_  $$ /$$$$$$| $$ \ $$ \ $| $$$$$$$$
| $$  \ $$/$$__  $| $$ | $$ | $| $$_____/
|  $$$$$$|  $$$$$$| $$ | $$ | $|  $$$$$$$
 \______/ \_______|__/ |__/ |__/\_______/
                                         

Enter a Number : 666
666 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 777
777 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 555
555 FizzBuzz
Do you want to continue playing the game : (y/n)y
Enter a Number : 1
1
Do you want to continue playing the game : (y/n)y
Enter a Number : 789
789 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 25
25 Buzz
Do you want to continue playing the game : (y/n)n
Congratulations, your score is

FizzBuzz:1
Fizz:3
Buzz:1

&lt;/pre&gt;

=Crowd Computing: Just Estimate=
==Wisdom of Crowds==
 &lt;p style=&quot;text-align:justify&quot;&gt;
The concept of ’Wisdom of Crowds’ was proposed by Francis Galton. A weight-judging competition was carried on at the annual show of the West of England Fat Stock and Poultry Exhibition recently held at Plymouth, A fat ox having been selected, competitors bought stamped and numbered cards, each, on which to inscribe their respective names, addresses, and estimates of what the ox would weigh after it had been slaughtered. Those who guessed most successfully received prizes. About 8oo tickets were issued to the par- ticipants. The middlemost estimate of all the estimates recorded was 1207 lbs and the actual weight of the ox was 1198 lbs.&lt;/p&gt;

==Our Experiment==
 &lt;p style=&quot;text-align:justify&quot;&gt;
The crowd had to guess the number of candies/gems in a jar. Around 75 people participated in the experiment. The actual number of gems in the jar were 375. The median of all estimates came out to be 300 and the mean of all the estimates came out to be around 396. Median underestimated and mean overestimated the actual value. So according to recent studies, Trimmed mean must be used as an aggregate measure to estimate where Wisdom of Crowds is involved.
&lt;/p&gt;
[[File:Gemsjar.jpg|center|200px|caption]]

===Trimmed Mean===
 &lt;p style=&quot;text-align:justify&quot;&gt;
In these kinds of experiments, 10% trimmed mean is usually followed. For calculating 10% trimmed mean, remove 10% smallest and 10% largest values from the sample. Calculate the mean of the sample obtained. In the above experiment, the trimmed mean came out to be around 351 which is very close to the actual value.&lt;/p&gt;

==Implementation==
Here, we try to demonstrate the concept of trimmed mean through crowd computing.
&lt;ol&gt;
&lt;li&gt; Input a list of estimates done by the crowd .&lt;/li&gt;
&lt;li&gt; Sort the list.&lt;/li&gt;
&lt;li&gt; Remove the 10% smallest values.&lt;/li&gt;
&lt;li&gt; Remove the 10% largest values.
&lt;li&gt; Calculate the mean of the new list obtained .&lt;/li&gt;&lt;/ol&gt;&lt;hr&gt;

==Data of Experiment==       
    Estimates =[1000,1010,1786,2000,1500,1500,100,120,150,150,150,170,175,180,197,200,200,200,200,200,200,220,220,220,220,234,250,250,250,250,250,250,250,250,250,263,270,275,275,286,300,
                300,300,300,300,300,300,300,320,350,350,350,400, 400,400,400,400,450,467,500,500,500,500,500,500,500,550,550,600,600,600,650,700,700,720]

    '''CODE:'''
&lt;pre&gt;
Estimates = [1000,1010,1786,2000,1500,1500,100,120,150,150,150,170,175,180,197,200,200,200,200,200,200,220,220,220,220,234,250,250,250,250,250,250,250,250,250,263,270,275,275,286,300,                300,300,300,300,300,300,300,320,350,350,350,400,400,400,400,400,450,467,500,500,500,500,500,500,500,550,550,600,600,600,650,700,700,720]
Estimates.sort()
offset = int(0.10*len(Estimates))
for i in range(offset):
       del Estimates[0]
       del Estimates[-1]
Sum = 0    
for i in range(len(Estimates)):
       Sum += Estimates[i]
Mean_Value = Sum/len(Estimates)
print(&quot;Mean : &quot;, int(Mean_Value))
#Output:
Mean :  351
&lt;/pre&gt;
&lt;hr&gt;
==Trimmed Mean for the above example== 
&lt;h3&gt;Using scipy library&lt;/h3&gt;
&lt;pre&gt;
#import scipy to use the method of trim_mean
from scipy import stats
trimMean = stats.trim_mean(Estimates, 0.1) # Trim 10% at both ends
print(&quot;Trimmed Mean : &quot;,trimMean)
#Output:
Trimmed Mean :  335.1020408163265
&lt;/pre&gt;

&lt;h3&gt;Without using scipy library&lt;/h3&gt;
&lt;pre&gt;
#Trimmed mean with 10%
p=10/100
#sorted data
data=[2, 4, 6, 7, 11, 21, 81, 90, 105, 121]
n = len(data)
#Remove elements from both end
rem=int(n*p)
newData = data[rem:-rem]
mean = 0
for i in newData:
    mean += i
mean = int(mean/len(newData))
print(&quot;Trimmed mean : &quot;,mean)
#Output: Trimmed mean :  40
&lt;/pre&gt;
[[#Top]]

=Jumbled_Words Permutations: Jumbled Words=
==What are Permutations ?==
A permutation also called ordering of selected number of elements from a list denoted by nPr here we are choosing all elements of a list and so n=r&lt;br&gt;
nPr=n!/(n-r)!&lt;br&gt; as n=r
nPn=n!&lt;br&gt; which gives all possible arrangement of elements present in a list.

 For example, permutations of list [1,2,3] are [1,2,3], [1,3,2], [2,1,3], [2,3,1], 
[3,1,2], and [3,2,1]. 
The number of permutations of a list of elements nPn is given by n!. For example, there are 2! = 2 x 1 = 2 permutations of [1,2], namely [1,2] and [2,1], and 3! = 3 x 2 x 1 = 6 permutations of [1,2,3], as mentioned above.&lt;br/&gt;
[[File:Permutations.jpg]]

==Implementation==
 &lt;p style=&quot;text-align:justify&quot;&gt;
Here, we try to demonstrate the concept of permutations through jumbled words. It is a two player game in which one person presents the other person a different permutation of the word in his mind. The other person has to guess the right word. If he guesses, the he wins otherwise he loses.&lt;/p&gt;
 Input an list of words.
 Randomly pick a word from the list of words .
 Shuffle this word and present it to the other player.
 if word guesses by the player is same as the one picked from list of w
     player wins
 else
     player loses

ALTERNATE CODE TO GENERATE THIS GAME:
&lt;pre&gt;
import random
p1=input(&quot;enter player 1 name:&quot;)
p2=input(&quot;enter player 2 name:&quot;)
l=[&quot;rainbow&quot;,&quot;computer&quot;,&quot;robot&quot;,&quot;butter&quot;,&quot;vegetable&quot;,&quot;science&quot;,&quot;correct&quot;]
c1=c2=a1=a2=f1=f2=0
k=1
i=3
def play():
    n=random.choice(l)        ##n=chooses a word from list l
    l1=[]
    for j in n:
       l1.append(j)      ##creates a list for word in n
    for t in range(len(l1)):
       p=random.choice(l1)     ##this randomly displays letters in the list
       print(p)
       l1.remove(p)          ##to avoid the repetition of a letter
    s=input(&quot;enter the word:&quot;)
    if(s==n):
        print(&quot;correct&quot;)
        return 1
    else:
        print(&quot;not correct&quot;)
        print(&quot;answer is&quot;,n)
        return 0
def stat():
     print(&quot;player 1:&quot;)
     print(&quot;score:&quot;,c1)
     print(&quot;answered:&quot;,a1)
     print(&quot;failed:&quot;,f1)
     print(&quot;.............&quot;)
     print(&quot;player 2:&quot;)
     print(&quot;score:&quot;,c2)
     print(&quot;answered:&quot;,a2)
     print(&quot;failed&quot;,f2)
     if(c1&gt;c2):
         print(p1,&quot; won over &quot;,p2)
     elif(c1==c2):
         print(&quot;draw game&quot;)
     else:
         print(p2,&quot; won over &quot;,p1) 
while(i!=4):
      if(i==3):
         if(k==1):
             print(&quot;player 1 turn&quot;)
             print(&quot;your jumbled word is:&quot;)
             k=k+1
             m=play()
             if(m==1):      ##if guessed answer is correct,then score and no.of answered count will be increased
                c1+=1
                a1+=1
             else:
                f1+=1       ##else count of no.of failed to answered will be incremented
         else:
             print(&quot;player 2 turn&quot;)
             print(&quot;your jumbled word is:&quot;)
             k=k-1
             m=play()
             if(m==1):
                c2=c2+1
                a2=a2+1
             else:
                f2=f2+1
       if(i==2):
             print(&quot;present status&quot;)
             stat()
       i=int(input(&quot;enter your choice  1.stop 2.status 3.continue&quot;))
       if(i==1):
             stat()
             i=i+3
&lt;/pre&gt;
&lt;hr&gt;
=== JumbledWord Simple Logic, In Short ===
[[File:jumbledWord.gif]]
---
&lt;hr&gt;
'''Logic to create a Jumbled Word'''
&lt;hr&gt;
&lt;pre&gt;
#Get Jumbled Word and print it Horizontally
import random

def getJumbledWord(b):
    jumble=''
    l1 = [ b[i] for i in range(0, len(b)) ]
    for t in range(len(l1)):
       p=random.choice(l1)  #this randomly gets letters from the list      
       jumble=jumble+p       
       l1.remove(p)
    return jumble

b=input(&quot;Enter a word to make it jumbled : &quot;)
print(&quot;Jumbled Word : &quot;, getJumbledWord(b))
&lt;/pre&gt;
&lt;pre&gt;
Output:
Enter a word to make it jumbled : live and let live others
Jumbled Word :  vel  toldeisrte aihv len
==========================================
Enter a word to make it jumbled : junkfood
Jumbled Word :  nfukdooj
&lt;/pre&gt;
&lt;hr&gt;
'''Another Logic to create a Jumbled Word'''
&lt;hr&gt;
&lt;pre&gt;
import random
b=input(&quot;Enter a word to make it jumbled : &quot;)

def getJumbledWord1(b):
    l1 = [ b[i] for i in range(0, len(b)) ]
    random.shuffle(l1)
    str1 = ''.join(l1)
    return str1

print(&quot;Jumbled Word : &quot;, getJumbledWord1(b))
&lt;/pre&gt;

====Sample Output:====
&lt;pre&gt;
---- Output1 
Enter a word to make it jumbled : butter
Jumbled Word :  tbture

---- Output2 
Enter a word to make it jumbled : petriotism
Jumbled Word :  pittrosime
&lt;/pre&gt;

=Theory of Evolution=

== What is Evolution ? ==
Evolution is the change in heritable characteristics over successive generations. The theory of evolution explains that DNA, which acts as a carrier of genetic information from one generation to other, tends to change or mutate occasionally. These changes are reflected in next generations to come. This is how life has evolved on earth from bacteria to human beings.&lt;br&gt;
[[File:Evolution.png|500px]]

== Implementation ==
 &lt;p style=&quot;text-align:justify&quot;&gt;
An array representing DNA is stored in a file. As genes are forms of DNA, they contain information to be transferred to forthcoming generations. Assume that information is in the form of bits (in the form of 0s and 1s). A number is picked randomly from 1 to the size of the array. A new parameter has been introduced which decides whether mutation would occur or not. If the value of this new parameter is 1 (It is picked randomly from 1 to 100), then only change is reflected down the generations, otherwise it is not. The pseudo code is as follows :
&lt;/p&gt;
Input an array containing genetic information .
Randomly generate a number (say m) from 1 to length of the array. Randomly generate other number (say p) from 1 to 100.

&lt;pre&gt; 
    if p is equal to 1 then 
        if m is 1 then
          set it to 0
        else
          set it to 1
&lt;/pre&gt;
[[#TOP]]</text>
      <sha1>06h5spjrzx25882710jtkms6m5wiver</sha1>
    </revision>
    <revision>
      <id>3762</id>
      <parentid>3761</parentid>
      <timestamp>2018-09-29T04:14:38Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* Loops */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="30746">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_3 Contributors of this page]
*Week 3 Playlist: https://www.youtube.com/playlist?list=PLc_j0TNIaWxOVx_z9jAM2UB3RqYNXaoEo
=List=
List is a flexible data structure used for storing a group of data separated by comma. The elements in a list need not be of the same data type.

'''Example:'''
       List_1 = [ 1, 2,3] or 
       List_1 = [&quot;coffee&quot;, &quot;Tea&quot;, &quot;Milk&quot;] or
       List_1 = [1,&quot;coffee&quot;, &quot;Tea&quot;, 3, &quot;5&quot;]

==List Creation==
a) A list can be created by simply putting values (separated by comma) between square
 brackets as given below,
&lt;pre&gt;List_1 = [1,&quot;coffee&quot;, &quot;Tea&quot;, 3, &quot;5&quot;] #this creates a list by name List_1 containing
 following items
&lt;/pre&gt;


Or,
(b)A List can be created from scratch and elements can be added 
&lt;pre&gt;
        List_2 = [ ]
        List_2.append(&quot;Kala&quot;)
        List_2.append(&quot;Mala&quot;)
&lt;/pre&gt;
Here we use &quot;append&quot;, which is a function in python that enable us to append or attach an element to a list .
&lt;pre&gt;Thus List_2 will now hold [&quot;Kala&quot;,&quot;Mala&quot;]&lt;/pre&gt;

[[#Top]]

==Operations and Methods to work with List==
&lt;pre&gt;
a = [25,30,50,90,12,13]
b = [100,300,500,200,250]
&lt;/pre&gt;
&lt;hr&gt;
&lt;table border=2&gt;
  &lt;tr&gt;
    &lt;th&gt;&lt;b&gt;Method/&lt;br&gt;Operator&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Function&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Syntax&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Output&lt;/b&gt;&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;len()&lt;/td&gt;
    &lt;td&gt;Find length of a list&lt;/td&gt;
    &lt;td&gt;len(a)&lt;/td&gt;
    &lt;td&gt;6&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;max()&lt;/td&gt;
    &lt;td&gt;Find maximum element from the list&lt;/td&gt;
    &lt;td&gt;max(a)&lt;/td&gt;
    &lt;td&gt;90&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;min()&lt;/td&gt;
    &lt;td&gt;Find minimum element from the list&lt;/td&gt;
    &lt;td&gt;min(a)&lt;/td&gt;
    &lt;td&gt;12&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sum()&lt;/td&gt;
    &lt;td&gt;Returns sum of all elements of the list&lt;/td&gt;
    &lt;td&gt;sum(a)&lt;/td&gt;
    &lt;td&gt;220&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;reverse()&lt;/td&gt;
    &lt;td&gt;Reverses the original list&lt;/td&gt;
    &lt;td&gt;a.reverse()&lt;/td&gt;
    &lt;td&gt;[13, 12, 90, 50, 30, 25]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sort()&lt;/td&gt;
    &lt;td&gt;Sorts the original list in ascending order&lt;/td&gt;
    &lt;td&gt;a.sort()&lt;/td&gt;
    &lt;td&gt;[12, 13, 25, 30, 50, 90]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sorted()&lt;/td&gt;
    &lt;td&gt;Returns the new sorted list &lt;/td&gt;
    &lt;td&gt;sorted(a)&lt;/td&gt;
    &lt;td&gt;[12, 13, 25, 30, 50, 90]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;insert()&lt;/td&gt;
    &lt;td&gt;Insert at a particular index in the list, and shifts remaining elements&lt;/td&gt;
    &lt;td&gt;a.insert(3,3)&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 3, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;append()&lt;/td&gt;
    &lt;td&gt;Adds elements/object to the end of the list&lt;/td&gt;
    &lt;td&gt;a.append(5)&lt;br&gt;a.append([10,20])&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 5]&lt;br&gt;[25, 30, 50, 90, 12, 13, [10, 20]]&lt;br&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;extend()&lt;/td&gt;
    &lt;td&gt;Adds object to the end of the list as elements not as object&lt;/td&gt;
    &lt;td&gt;a.extend([10,20])&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 10, 20]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;*&amp;nbsp;&amp;nbsp;Repeatation&lt;br&gt;operator&lt;/td&gt;
    &lt;td&gt;Repeat the list for n times and returns a new list&lt;/td&gt;
    &lt;td&gt;a*2&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 25, 30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;+ Concatenation&lt;br&gt;operator&lt;/td&gt;
    &lt;td&gt;Concatenates two lists, and returns a new list&lt;/td&gt;
    &lt;td&gt;a+b&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 100, 300, 500, 200, 250]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;index()&lt;/td&gt;
    &lt;td&gt;Finds index of a particular element in the list or not&lt;/td&gt;
    &lt;td&gt;a.index(25)&lt;br&gt;a.index(0)&lt;br&gt;&lt;/td&gt;
    &lt;td&gt;0&lt;br&gt;&lt;br&gt;ValueError: 0 is not in list&lt;br&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;in operator&lt;/td&gt;
    &lt;td&gt;Finds whether a particular element is in the list or not, returns boolean&lt;/td&gt;
    &lt;td&gt;25 in a&lt;/td&gt;
    &lt;td&gt;True&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;not in operator&lt;/td&gt;
    &lt;td&gt;Checks if element is not available in list, returns boolean&lt;/td&gt;
    &lt;td&gt;25 not in a&lt;/td&gt;
    &lt;td&gt;False&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;count()&lt;/td&gt;
    &lt;td&gt;Counts the number of occurence of an element in the list&lt;/td&gt;
    &lt;td&gt;a.count(25)&lt;/td&gt;
    &lt;td&gt;1&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;remove()&lt;/td&gt;
    &lt;td&gt;Removes an element from the list&lt;/td&gt;
    &lt;td&gt;a.remove(25)&lt;/td&gt;
    &lt;td&gt; [30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;pop()&lt;/td&gt;
    &lt;td&gt;Delete and return item at index 0&lt;/td&gt;
    &lt;td&gt;a.pop(0)&lt;/td&gt;
    &lt;td&gt;25 , a will be [30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;del&lt;/td&gt;
    &lt;td&gt;Deletes item at a particular index from the list&lt;/td&gt;
    &lt;td&gt;del a[0]&lt;/td&gt;
    &lt;td&gt;[30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;all()&lt;/td&gt;
&lt;td&gt;Returns True, if all items in list are True or it is an empty list&lt;/td&gt;
&lt;td&gt;all([True, True, True])
all([])
&lt;/td&gt;
&lt;td&gt;True&lt;br&gt;
True&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;any()&lt;/td&gt;
&lt;td&gt;Returns True, if any item in list is True else return False&lt;/td&gt;
&lt;td&gt;any([True, True, True])&lt;br&gt;
any([True, False, True])&lt;br&gt;
any([])&lt;/td&gt;
&lt;td&gt;True&lt;br&gt;False&lt;br&gt;False&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;

==Printing the List==
=== Print whole list ===
A list can be printed simply or using a ''for / while'' loop 

 print(List_2)     # To print the entire list
This code will print      
 ['Kala','Mala']     

===Print element at a particular index===
&lt;pre&gt;
Using index position
    List_2[0]     # prints 'Kala' ,i.e,the value at index position 0.
    List_2[1]     # prints 'Mala'.
&lt;/pre&gt;
=== Without using index position ===
&lt;pre&gt;
for item in List_2:   # here item is a variable used to access elements in list.
       print(item)
   This code snippet prints 
    Kala
    Mala
&lt;/pre&gt;
[[#Top]]

==Search for a particular element in list==
Elements in a list can be searched by one of the two ways:
=== using index() function===
&lt;pre&gt;
ages1 = [11,23,12,23,45]

#if element is available in the list, index() returns the index value on which, the element is
 present.
print(ages1.index(45))#Output: 4

#if element is not available in the list, index() returns ''ValueError''
print(ages1.index(0))#Output: ValueError:
&lt;/pre&gt;

In programming, if such error occurs, program gets terminated. It can be solved using exception handling.
 
e.g.
&lt;pre&gt;
ages1 = [11,23,12,23,45]

try:
    print(ages1.index(0))
except ValueError:
    print(&quot;Exception has occured&quot;)    
    print(&quot;Element is not found in the list&quot;)

&lt;/pre&gt;
&lt;pre&gt;
'''Output: 
Exception has occured
Element is not found in the list
'''&lt;/pre&gt;
[[#Top]]

=== using 'in' operator===
''in'' operator is used to check whether a particular element is available in the list or not.e.g.

&lt;pre&gt;
ages1 = [11,23,12,23,45]
no=11

if no in ages1:
    print(&quot;no is there in the list&quot;)
else:    
    print(&quot;no is NOT there in the list&quot;)
&lt;/pre&gt;
&lt;pre&gt;
#Output: no is there in the list
&lt;/pre&gt;


'''Number is not there in the list'''
&lt;pre&gt;
ages1 = [11,23,12,23,45]
no=15

if no in ages1:
    print(&quot;no is there in the list&quot;)
else:    
    print(&quot;no is NOT there in the list&quot;)
&lt;/pre&gt;
&lt;pre&gt;
Output: no is NOT there in the list
&lt;/pre&gt;
[[#Top]]

==Updating the List==
The lists can be updated using ''append'' or ''insert'' function.  Append adds the element to the end of the list and Insert adds the element in the specified position.
&lt;pre&gt;
   # add the element 'Sheela' to the end of the list.
   List_2.append(&quot;Sheela&quot;)    
   print (List_2) will output 
   ['Kala', 'Mala', 'Sheela']
&lt;/pre&gt;
   &lt;pre&gt;
# add the element &quot;Bala&quot; in the list at the index 1.
   List_2.insert(1,&quot;Bala&quot;)    
   print (List_2) will output 
   ['Kala', 'Bala','Mala', 'Sheela']
&lt;/pre&gt;

=== Extend the list by adding elements of other list at end using extend()===
&lt;pre&gt;
ages = [11,23,12,23,45]
ages.extend([57,58])
print(ages)
&lt;/pre&gt;

&lt;pre&gt;
#Output: [11, 23, 12, 23, 45, 57, 58]
&lt;/pre&gt;

==== Difference between ''append() and extend()'' ====
Difference between ''append()'' and ''extend()'' can be easily understood, by the following example.

&lt;pre&gt;
appendlist = [11,23,12,23,45]
appendlist.append([57,58])

extendlist= [11,23,12,23,45]
extendlist.extend([57,58])
&lt;/pre&gt;

&lt;pre&gt;
'''Output:
[11, 23, 12, 23, 45, [57, 58]]
[11, 23, 12, 23, 45, 57, 58]'''
&lt;/pre&gt;

[[#Top]]

==Basic Operations on List==
===Frequency of Occurrence===
list.count(object) will return the number of times the object occur in the list.
  '''Example'''
    ages = [11,23,12,23,45,43,22,24,23]
    ages.count(23) will return
    3
    ages.count(100) will return
    0

===Length of the List===
''len(list)'' will return the length of the list ie. the number of objects in the list.
  '''Example'''
&lt;pre&gt;
    ages = [11,23,12,23,45,43,22,24,23]
    len(ages) # Output: 9
&lt;/pre&gt;

To print the objects in the list either use ''for item in list'' or ''for index in range(len(list))''
&lt;pre&gt;
    for item in ages:       
        print (item)  
        (OR)
    for index in range(len(ages)) :
        print (ages[index])
&lt;/pre&gt;

===Sort the List===
''list.sort()'' will sort the list in ascending order
  '''Example'''
    ages = [11,23,12,23,45,43,22,24,23]
    ages.sort() 
    print (ages) 
    [11, 12, 22, 23, 23, 23, 24, 43, 45]

[[#Top]]

===Sort the List using sorted() function===
''sorted(list1)'' will sort the list and return a new list, it doesn't modify the original list
&lt;br&gt;'''Example: Sort in ascending order'''
&lt;pre&gt;
ages = [11,23,12,23,45,43,22,24,23]
newList=sorted(ages)
print(newList)

#Output: [11, 12, 22, 23, 23, 23, 24, 43, 45]
&lt;/pre&gt;

&lt;br&gt;'''Example: Sort in descending order'''
&lt;pre&gt;
ages = [11,23,12,23,45,43,22,24,23]
newList=sorted(ages,reverse=True)
print(newList)

#Output: [45, 43, 24, 23, 23, 23, 22, 12, 11]
&lt;/pre&gt;

===Reverse the List===
''list.reverse()'' will reverse the original list
  '''Example'''
    ages = [11, 12, 22, 23, 23, 23, 24, 43, 45]
    ages.reverse()
    print (ages)
    [45, 43, 24, 23, 23, 23, 22, 12, 11]

Both ''sort()'' and ''reverse()'' list operation will work on numeric and alphanumeric data list.

A special use of the ''reverse()'' function is to descend a list that is sorted in ascending order.

  '''Example'''
&lt;pre&gt;
ages = [11, 12, 22, 23, 23, 23, 24, 43, 45]
ages.sort()
print(ages)
ages.reverse()
print(ages)
&lt;/pre&gt;

[[#Top]]

===Slicing===
Used to retrieve an object or objects in a range as a list  
  '''Example'''

Use ''list[index]'' to retrieve the object at the given index
&lt;pre&gt;
In [1]: student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
In [2]: student[3]     #Object at index 3.  Remember index starts at 0
Out[2]: 'Geetha'      
&lt;/pre&gt;

Use ''list[start_index : end_index + 1]'' to retrieve objects from the start_index to end_index 
&lt;pre&gt;
In [3]: student[2:4]     # Objects from index 2 to 3 as List. Note the [ and ]
Out[3]: ['Vijay', 'Geetha']   
&lt;/pre&gt;

Use ''list[:]'' to retrieve objects from the starting of the list to the end of the list. 
The default start value will be the starting index of the list (i.e. 0) and the default end value
will be the length of the list 
&lt;pre&gt;
In [4]: student[:]        # prints the entire list
Out[4]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma', 'Janani']
&lt;/pre&gt;
&lt;pre&gt;
In [5]: student[:5]       # prints the objects from the start of the list upto object at index 4
Out[5]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran']
&lt;/pre&gt;
&lt;pre&gt;
In [6]: student[2:]       # prints the objects from index 2 upto the end of the list
Out[6]: ['Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma', 'Janani']
&lt;/pre&gt;

Negative index too is available in Python. It starts from last element of the list. i.e.
&lt;pre&gt;
In [7]:student[-1]        #prints last index of list
Out[7]: 'Janani'
&lt;/pre&gt;
&lt;pre&gt;
In [8]:student[-1:-8]     #prints empty list
Out[8]: []
&lt;/pre&gt;
&lt;pre&gt;
In [9]:student[-8:-1]     #prints -8th index to -1st index elements
Out[9]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma']
&lt;/pre&gt;

[[#Top]]

===Removing Item from list ===
----

Is used to remove a specific item from the list.

'''Example:'''
 
Use list.remove(entry/value)  Or   del list[index]    Or list.pop(index)
&lt;pre&gt;
student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
student.remove(&quot;Arun&quot;)   #This will delete item &quot;Arun&quot;
         Or    
del student[0]           # This will delete item at index 0
         Or
student.pop(0)         # This will delete and return item at index 0
print(student)    
Output: &quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
&lt;/pre&gt;

[[#Top]]

===Delete list ===
----
Used to delete complete list

'''Example'''

Use del &lt;list name&gt;
&lt;pre&gt;
student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
del student&lt;/pre&gt;

===Concatenation of two lists===
----
''+'' is the concatenation operator which is used concatenate two lists. 
&lt;pre&gt;
ages1 = [11,23,12,23,45]
ages2 = [25, 24, 43, 47]
age=ages1+ages2
print(age)
#Output: [11, 23, 12, 23, 45, 25, 24, 43, 47]
&lt;/pre&gt;

===Repeatation of a list ===
----
''*'' is the operator to repeat a particular list.
&lt;pre&gt;
ages1 = [11,23,12,23,45]
age=ages1*5 #ages1 list is repeated 5 times and stroed in ''age'' list
print(age)

#Output: [11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45]
&lt;/pre&gt;

=== all and any for List===
all() and any() are special functions to check whether all elements in iterable is ''True'' or any element is ''True''
&lt;ol&gt;
&lt;li&gt;If all elements in a list are ''True'', ''all()'' will return ''True''&lt;/li&gt;
&lt;li&gt;If iterable is ''empty'', ''all()'' will return ''True''&lt;/li&gt;
&lt;li&gt;If iterable contains at least one ''True'', ''any()'' will return ''True''&lt;/li&gt;
&lt;li&gt;If iterable is ''empty'', ''any()'' will return ''False''&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;
lsit=[True, True, True, True]
print(all(lsit))#Output: True
print(any(lsit))#Output: True

lsit1=[True, False, True, True]
print(all(lsit1))#Output: False
print(any(lsit1))#Output: True

lsit2=[False,False,False]
print(all(lsit2))#Output: False
print(any(lsit2))#Output: False

lsit3=[]
print(all(lsit3))#Output: True
print(any(lsit3))#Output: False
&lt;/pre&gt;

==Conditional Statements==
Conditionals are used to check the condition and change the flow of the program 
accordingly. They are realized in programming languages through if statement. The 
syntax is as follows :
&lt;pre&gt;
         if condition : 
            statement
&lt;/pre&gt;
    '''Note:''' Do not forget indentation (inserting space/tab) in the line after the
 if condition.
    
    In case you want to execute a set of statements when a condition is true and another

set of statement when the condition is false.
&lt;pre&gt;
         if condition : 
            statement 1
         else :
            statement 2
&lt;/pre&gt;

&lt;pre&gt;    
    Multiple if-else statements can be written as follows:
         if condition_1 : 
            statement 1
         elif condition_2 : # 'elif' is short for 'else if'
            statement 2
         elif condition_3 :
            statement 3
        .
        .
         else :
            final statement
&lt;/pre&gt;

[[#Top]]

=Loops and Conditionals : Fizzbuzz=
====Loops====
Loops are used to execute a set of repetitive statements. They are realised
through 'while' and 'for' loops in programming languages. The syntax of 'for' loop is 
as follows :
&lt;pre&gt;
for LOOPVARIABLE in SEQUENCE: 
            STATEMENTS&lt;/pre&gt;

    '''e.g.''' to print all the data from a list we can write:
&lt;pre&gt;
for item in list_name:
      print(item)&lt;/pre&gt;
    OR
&lt;pre&gt;
for index in range(len(list_name)):
      print(list_name[index])
 &lt;/pre&gt;   
    The syntax for while loop is as follows :
&lt;pre&gt;    
while BOOLEANEXPRESSION: 
     STATEMENTS
     INCREMENT/DECREMENT
&lt;/pre&gt;    
    '''e.g.''' if we want to print all numbers from 1 to 10
&lt;pre&gt;
i=1
while i&lt;=10 :
    print(i,&quot; &quot;)
    i=i+1
    &lt;/pre&gt;
 
'while' loop has indefinite iteration (run-time unknown). So, there must be loop,  break statement in it.
 Whereas 'for' loop is definite in nature (i.e. known or predictable span).&lt;br&gt;

&lt;b&gt;NOTE: Python doesn't have anything like do-while loop.&lt;/b&gt;

[[#Top]]

==Implementation==
Here, we try to demonstrate the concept of loops and conditionals through a game called Fizzbuzz. The rules are as follows :&lt;br/&gt;
[[File:fizzBuzz.gif]]

• if input number is a multiple of ’3’ print ”Fizz”
&lt;br/&gt;
• if input number is a multiple of ’5’ print ”Buzz”
&lt;br/&gt;
• if input number is a multiple of both '3' and ’5’ print ”FizzBuzz”
&lt;br/&gt;
The pseudo code is as follows :
&lt;pre&gt;
   If input no % 3 == 0 and  input no % 5 == 0 : 
       print ”Fizzbuzz”
   else if input no % 3 == 0 : 
       print ”Fizz”
   else if input no % 5 == 0 : 
       print ”Buzz”
   else :
       print the input no
&lt;/pre&gt;
 &lt;p style=&quot;text-align:justify&quot;&gt;
The order of statements execution matters to get the desired output. The highest priority condition should be first followed by other. In fizzbuzz programming, first checking should be done for both divisibility of 3 and 5. If condition not satisfied only then it should check individually for 3 or 5. So carefully choosing the order is crucial for better programming.
Note: There is some effect of present condition statements chosen on next conditions statements. That is why in first attempt fizzbuzz programming got struck.&lt;/p&gt;

Example: 
&lt;pre&gt;
#Code to achieve the above requirement in python3.
i = int(input(&quot;Enter the number&quot;)) 
if i%3 == 0 and i%5 == 0: print(i,&quot;FizzBuzz&quot;)  
elif i%5 == 0: print(i,&quot;Buzz&quot;)
elif i%3 == 0: print(i,&quot;Fizz&quot;)
else: print(i)
&lt;/pre&gt;
Lets put the same into a loop for a range given by the user.
&lt;pre&gt;
def fizzbuzzgame(start,stop):
    for i in range(start,stop+1):
        if i%3 == 0 and i%5 == 0:
            print(i,&quot;FizzBuzz&quot;)
        elif i%5 == 0:
            print(i,&quot;Buzz&quot;)
        elif i%3 == 0:
            print(i,&quot;Fizz&quot;)
        else: print(i)

fizzbuzzgame(50,100)
&lt;/pre&gt;
&lt;pre&gt;
#Output:
1235
Buzz
======================================
555
Fizzbuzz
======================================
1235
Buzz
======================================
999
Fizz
&lt;/pre&gt;

=== Fizz Buzz game in Interactive mode with Score ===
'''By Ms. Ami Tusharkant Choksi'''
&lt;pre&gt;
def fizzbuzzgame(i):
        if i%3 == 0 and i%5 == 0:
            print(i,&quot;FizzBuzz&quot;)
            return(&quot;fzbz&quot;)
        elif i%5 == 0:
            print(i,&quot;Buzz&quot;)
            return(&quot;bz&quot;)
        elif i%3 == 0:
            print(i,&quot;Fizz&quot;)
            return(&quot;fz&quot;)
        else:
            print(i)
            return(&quot;no&quot;)

ch = 'y'
fizzbuzz=0
fizz=0
buzz=0
nothing=0
print(&quot;&quot;&quot;

 /$$$$$$$$/$$                  /$$$$$$$                            
| $$_____|__/                 | $$__  $$                           
| $$      /$$/$$$$$$$$/$$$$$$$| $$  \ $$/$$   /$$/$$$$$$$$/$$$$$$$$
| $$$$$  | $|____ /$$|____ /$$| $$$$$$$| $$  | $|____ /$$|____ /$$/
| $$__/  | $$  /$$$$/   /$$$$/| $$__  $| $$  | $$  /$$$$/   /$$$$/ 
| $$     | $$ /$$__/   /$$__/ | $$  \ $| $$  | $$ /$$__/   /$$__/  
| $$     | $$/$$$$$$$$/$$$$$$$| $$$$$$$|  $$$$$$//$$$$$$$$/$$$$$$$$
|__/     |__|________|________|_______/ \______/|________|________/
                                                                  
&quot;&quot;&quot;)   
print('''

  /$$$$$$                                
 /$$__  $$                               
| $$  \__/ /$$$$$$ /$$$$$$/$$$$  /$$$$$$ 
| $$ /$$$$|____  $| $$_  $$_  $$/$$__  $$
| $$|_  $$ /$$$$$$| $$ \ $$ \ $| $$$$$$$$
| $$  \ $$/$$__  $| $$ | $$ | $| $$_____/
|  $$$$$$|  $$$$$$| $$ | $$ | $|  $$$$$$$
 \______/ \_______|__/ |__/ |__/\_______/
                                     
''')

while(ch == 'y'):
    n=int(input(&quot;Enter a Number : &quot;))
    winLoose=fizzbuzzgame(n)
    if(winLoose == &quot;fz&quot;):
        fizz+=1
    elif(winLoose == &quot;bz&quot;):
        buzz+=1
    elif(winLoose == &quot;fzbz&quot;):
        fizzbuzz+=1
    ch=input(&quot;Do you want to continue playing the game : (y/n)&quot;)
    if(ch=='n'):
        print('Congratulations, your score is\n FizzBuzz:%d\nFizz:%d\nBuzz:%d' %
(fizzbuzz,fizz,buzz))
    
'''Sample Output:

 /$$$$$$$$/$$                  /$$$$$$$                            
| $$_____|__/                 | $$__  $$                           
| $$      /$$/$$$$$$$$/$$$$$$$| $$  \ $$/$$   /$$/$$$$$$$$/$$$$$$$$
| $$$$$  | $|____ /$$|____ /$$| $$$$$$$| $$  | $|____ /$$|____ /$$/
| $$__/  | $$  /$$$$/   /$$$$/| $$__  $| $$  | $$  /$$$$/   /$$$$/ 
| $$     | $$ /$$__/   /$$__/ | $$  \ $| $$  | $$ /$$__/   /$$__/  
| $$     | $$/$$$$$$$$/$$$$$$$| $$$$$$$|  $$$$$$//$$$$$$$$/$$$$$$$$
|__/     |__|________|________|_______/ \______/|________|________/
                                                                                                                                   

  /$$$$$$                                
 /$$__  $$                               
| $$  \__/ /$$$$$$ /$$$$$$/$$$$  /$$$$$$ 
| $$ /$$$$|____  $| $$_  $$_  $$/$$__  $$
| $$|_  $$ /$$$$$$| $$ \ $$ \ $| $$$$$$$$
| $$  \ $$/$$__  $| $$ | $$ | $| $$_____/
|  $$$$$$|  $$$$$$| $$ | $$ | $|  $$$$$$$
 \______/ \_______|__/ |__/ |__/\_______/
                                         

Enter a Number : 666
666 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 777
777 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 555
555 FizzBuzz
Do you want to continue playing the game : (y/n)y
Enter a Number : 1
1
Do you want to continue playing the game : (y/n)y
Enter a Number : 789
789 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 25
25 Buzz
Do you want to continue playing the game : (y/n)n
Congratulations, your score is

FizzBuzz:1
Fizz:3
Buzz:1

&lt;/pre&gt;

=Crowd Computing: Just Estimate=
==Wisdom of Crowds==
 &lt;p style=&quot;text-align:justify&quot;&gt;
The concept of ’Wisdom of Crowds’ was proposed by Francis Galton. A weight-judging competition was carried on at the annual show of the West of England Fat Stock and Poultry Exhibition recently held at Plymouth, A fat ox having been selected, competitors bought stamped and numbered cards, each, on which to inscribe their respective names, addresses, and estimates of what the ox would weigh after it had been slaughtered. Those who guessed most successfully received prizes. About 8oo tickets were issued to the par- ticipants. The middlemost estimate of all the estimates recorded was 1207 lbs and the actual weight of the ox was 1198 lbs.&lt;/p&gt;

==Our Experiment==
 &lt;p style=&quot;text-align:justify&quot;&gt;
The crowd had to guess the number of candies/gems in a jar. Around 75 people participated in the experiment. The actual number of gems in the jar were 375. The median of all estimates came out to be 300 and the mean of all the estimates came out to be around 396. Median underestimated and mean overestimated the actual value. So according to recent studies, Trimmed mean must be used as an aggregate measure to estimate where Wisdom of Crowds is involved.
&lt;/p&gt;
[[File:Gemsjar.jpg|center|200px|caption]]

===Trimmed Mean===
 &lt;p style=&quot;text-align:justify&quot;&gt;
In these kinds of experiments, 10% trimmed mean is usually followed. For calculating 10% trimmed mean, remove 10% smallest and 10% largest values from the sample. Calculate the mean of the sample obtained. In the above experiment, the trimmed mean came out to be around 351 which is very close to the actual value.&lt;/p&gt;

==Implementation==
Here, we try to demonstrate the concept of trimmed mean through crowd computing.
&lt;ol&gt;
&lt;li&gt; Input a list of estimates done by the crowd .&lt;/li&gt;
&lt;li&gt; Sort the list.&lt;/li&gt;
&lt;li&gt; Remove the 10% smallest values.&lt;/li&gt;
&lt;li&gt; Remove the 10% largest values.
&lt;li&gt; Calculate the mean of the new list obtained .&lt;/li&gt;&lt;/ol&gt;&lt;hr&gt;

==Data of Experiment==       
    Estimates =[1000,1010,1786,2000,1500,1500,100,120,150,150,150,170,175,180,197,200,200,200,200,200,200,220,220,220,220,234,250,250,250,250,250,250,250,250,250,263,270,275,275,286,300,
                300,300,300,300,300,300,300,320,350,350,350,400, 400,400,400,400,450,467,500,500,500,500,500,500,500,550,550,600,600,600,650,700,700,720]

    '''CODE:'''
&lt;pre&gt;
Estimates = [1000,1010,1786,2000,1500,1500,100,120,150,150,150,170,175,180,197,200,200,200,200,200,200,220,220,220,220,234,250,250,250,250,250,250,250,250,250,263,270,275,275,286,300,                300,300,300,300,300,300,300,320,350,350,350,400,400,400,400,400,450,467,500,500,500,500,500,500,500,550,550,600,600,600,650,700,700,720]
Estimates.sort()
offset = int(0.10*len(Estimates))
for i in range(offset):
       del Estimates[0]
       del Estimates[-1]
Sum = 0    
for i in range(len(Estimates)):
       Sum += Estimates[i]
Mean_Value = Sum/len(Estimates)
print(&quot;Mean : &quot;, int(Mean_Value))
#Output:
Mean :  351
&lt;/pre&gt;
&lt;hr&gt;
==Trimmed Mean for the above example== 
&lt;h3&gt;Using scipy library&lt;/h3&gt;
&lt;pre&gt;
#import scipy to use the method of trim_mean
from scipy import stats
trimMean = stats.trim_mean(Estimates, 0.1) # Trim 10% at both ends
print(&quot;Trimmed Mean : &quot;,trimMean)
#Output:
Trimmed Mean :  335.1020408163265
&lt;/pre&gt;

&lt;h3&gt;Without using scipy library&lt;/h3&gt;
&lt;pre&gt;
#Trimmed mean with 10%
p=10/100
#sorted data
data=[2, 4, 6, 7, 11, 21, 81, 90, 105, 121]
n = len(data)
#Remove elements from both end
rem=int(n*p)
newData = data[rem:-rem]
mean = 0
for i in newData:
    mean += i
mean = int(mean/len(newData))
print(&quot;Trimmed mean : &quot;,mean)
#Output: Trimmed mean :  40
&lt;/pre&gt;
[[#Top]]

=Jumbled_Words Permutations: Jumbled Words=
==What are Permutations ?==
A permutation also called ordering of selected number of elements from a list denoted by nPr here we are choosing all elements of a list and so n=r&lt;br&gt;
nPr=n!/(n-r)!&lt;br&gt; as n=r
nPn=n!&lt;br&gt; which gives all possible arrangement of elements present in a list.

 For example, permutations of list [1,2,3] are [1,2,3], [1,3,2], [2,1,3], [2,3,1], 
[3,1,2], and [3,2,1]. 
The number of permutations of a list of elements nPn is given by n!. For example, there are 2! = 2 x 1 = 2 permutations of [1,2], namely [1,2] and [2,1], and 3! = 3 x 2 x 1 = 6 permutations of [1,2,3], as mentioned above.&lt;br/&gt;
[[File:Permutations.jpg]]

==Implementation==
 &lt;p style=&quot;text-align:justify&quot;&gt;
Here, we try to demonstrate the concept of permutations through jumbled words. It is a two player game in which one person presents the other person a different permutation of the word in his mind. The other person has to guess the right word. If he guesses, the he wins otherwise he loses.&lt;/p&gt;
 Input an list of words.
 Randomly pick a word from the list of words .
 Shuffle this word and present it to the other player.
 if word guesses by the player is same as the one picked from list of w
     player wins
 else
     player loses

ALTERNATE CODE TO GENERATE THIS GAME:
&lt;pre&gt;
import random
p1=input(&quot;enter player 1 name:&quot;)
p2=input(&quot;enter player 2 name:&quot;)
l=[&quot;rainbow&quot;,&quot;computer&quot;,&quot;robot&quot;,&quot;butter&quot;,&quot;vegetable&quot;,&quot;science&quot;,&quot;correct&quot;]
c1=c2=a1=a2=f1=f2=0
k=1
i=3
def play():
    n=random.choice(l)        ##n=chooses a word from list l
    l1=[]
    for j in n:
       l1.append(j)      ##creates a list for word in n
    for t in range(len(l1)):
       p=random.choice(l1)     ##this randomly displays letters in the list
       print(p)
       l1.remove(p)          ##to avoid the repetition of a letter
    s=input(&quot;enter the word:&quot;)
    if(s==n):
        print(&quot;correct&quot;)
        return 1
    else:
        print(&quot;not correct&quot;)
        print(&quot;answer is&quot;,n)
        return 0
def stat():
     print(&quot;player 1:&quot;)
     print(&quot;score:&quot;,c1)
     print(&quot;answered:&quot;,a1)
     print(&quot;failed:&quot;,f1)
     print(&quot;.............&quot;)
     print(&quot;player 2:&quot;)
     print(&quot;score:&quot;,c2)
     print(&quot;answered:&quot;,a2)
     print(&quot;failed&quot;,f2)
     if(c1&gt;c2):
         print(p1,&quot; won over &quot;,p2)
     elif(c1==c2):
         print(&quot;draw game&quot;)
     else:
         print(p2,&quot; won over &quot;,p1) 
while(i!=4):
      if(i==3):
         if(k==1):
             print(&quot;player 1 turn&quot;)
             print(&quot;your jumbled word is:&quot;)
             k=k+1
             m=play()
             if(m==1):      ##if guessed answer is correct,then score and no.of answered count will be increased
                c1+=1
                a1+=1
             else:
                f1+=1       ##else count of no.of failed to answered will be incremented
         else:
             print(&quot;player 2 turn&quot;)
             print(&quot;your jumbled word is:&quot;)
             k=k-1
             m=play()
             if(m==1):
                c2=c2+1
                a2=a2+1
             else:
                f2=f2+1
       if(i==2):
             print(&quot;present status&quot;)
             stat()
       i=int(input(&quot;enter your choice  1.stop 2.status 3.continue&quot;))
       if(i==1):
             stat()
             i=i+3
&lt;/pre&gt;
&lt;hr&gt;
=== JumbledWord Simple Logic, In Short ===
[[File:jumbledWord.gif]]
---
&lt;hr&gt;
'''Logic to create a Jumbled Word'''
&lt;hr&gt;
&lt;pre&gt;
#Get Jumbled Word and print it Horizontally
import random

def getJumbledWord(b):
    jumble=''
    l1 = [ b[i] for i in range(0, len(b)) ]
    for t in range(len(l1)):
       p=random.choice(l1)  #this randomly gets letters from the list      
       jumble=jumble+p       
       l1.remove(p)
    return jumble

b=input(&quot;Enter a word to make it jumbled : &quot;)
print(&quot;Jumbled Word : &quot;, getJumbledWord(b))
&lt;/pre&gt;
&lt;pre&gt;
Output:
Enter a word to make it jumbled : live and let live others
Jumbled Word :  vel  toldeisrte aihv len
==========================================
Enter a word to make it jumbled : junkfood
Jumbled Word :  nfukdooj
&lt;/pre&gt;
&lt;hr&gt;
'''Another Logic to create a Jumbled Word'''
&lt;hr&gt;
&lt;pre&gt;
import random
b=input(&quot;Enter a word to make it jumbled : &quot;)

def getJumbledWord1(b):
    l1 = [ b[i] for i in range(0, len(b)) ]
    random.shuffle(l1)
    str1 = ''.join(l1)
    return str1

print(&quot;Jumbled Word : &quot;, getJumbledWord1(b))
&lt;/pre&gt;

====Sample Output:====
&lt;pre&gt;
---- Output1 
Enter a word to make it jumbled : butter
Jumbled Word :  tbture

---- Output2 
Enter a word to make it jumbled : petriotism
Jumbled Word :  pittrosime
&lt;/pre&gt;

=Theory of Evolution=

== What is Evolution ? ==
Evolution is the change in heritable characteristics over successive generations. The theory of evolution explains that DNA, which acts as a carrier of genetic information from one generation to other, tends to change or mutate occasionally. These changes are reflected in next generations to come. This is how life has evolved on earth from bacteria to human beings.&lt;br&gt;
[[File:Evolution.png|500px]]

== Implementation ==
 &lt;p style=&quot;text-align:justify&quot;&gt;
An array representing DNA is stored in a file. As genes are forms of DNA, they contain information to be transferred to forthcoming generations. Assume that information is in the form of bits (in the form of 0s and 1s). A number is picked randomly from 1 to the size of the array. A new parameter has been introduced which decides whether mutation would occur or not. If the value of this new parameter is 1 (It is picked randomly from 1 to 100), then only change is reflected down the generations, otherwise it is not. The pseudo code is as follows :
&lt;/p&gt;
Input an array containing genetic information .
Randomly generate a number (say m) from 1 to length of the array. Randomly generate other number (say p) from 1 to 100.

&lt;pre&gt; 
    if p is equal to 1 then 
        if m is 1 then
          set it to 0
        else
          set it to 1
&lt;/pre&gt;
[[#TOP]]</text>
      <sha1>h3ot3sodzc9ltwt7zyxt5ble3zx0ucg</sha1>
    </revision>
    <revision>
      <id>3763</id>
      <parentid>3762</parentid>
      <timestamp>2018-09-29T04:15:41Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* Implementation */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="30756">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_3 Contributors of this page]
*Week 3 Playlist: https://www.youtube.com/playlist?list=PLc_j0TNIaWxOVx_z9jAM2UB3RqYNXaoEo
=List=
List is a flexible data structure used for storing a group of data separated by comma. The elements in a list need not be of the same data type.

'''Example:'''
       List_1 = [ 1, 2,3] or 
       List_1 = [&quot;coffee&quot;, &quot;Tea&quot;, &quot;Milk&quot;] or
       List_1 = [1,&quot;coffee&quot;, &quot;Tea&quot;, 3, &quot;5&quot;]

==List Creation==
a) A list can be created by simply putting values (separated by comma) between square
 brackets as given below,
&lt;pre&gt;List_1 = [1,&quot;coffee&quot;, &quot;Tea&quot;, 3, &quot;5&quot;] #this creates a list by name List_1 containing
 following items
&lt;/pre&gt;


Or,
(b)A List can be created from scratch and elements can be added 
&lt;pre&gt;
        List_2 = [ ]
        List_2.append(&quot;Kala&quot;)
        List_2.append(&quot;Mala&quot;)
&lt;/pre&gt;
Here we use &quot;append&quot;, which is a function in python that enable us to append or attach an element to a list .
&lt;pre&gt;Thus List_2 will now hold [&quot;Kala&quot;,&quot;Mala&quot;]&lt;/pre&gt;

[[#Top]]

==Operations and Methods to work with List==
&lt;pre&gt;
a = [25,30,50,90,12,13]
b = [100,300,500,200,250]
&lt;/pre&gt;
&lt;hr&gt;
&lt;table border=2&gt;
  &lt;tr&gt;
    &lt;th&gt;&lt;b&gt;Method/&lt;br&gt;Operator&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Function&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Syntax&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Output&lt;/b&gt;&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;len()&lt;/td&gt;
    &lt;td&gt;Find length of a list&lt;/td&gt;
    &lt;td&gt;len(a)&lt;/td&gt;
    &lt;td&gt;6&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;max()&lt;/td&gt;
    &lt;td&gt;Find maximum element from the list&lt;/td&gt;
    &lt;td&gt;max(a)&lt;/td&gt;
    &lt;td&gt;90&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;min()&lt;/td&gt;
    &lt;td&gt;Find minimum element from the list&lt;/td&gt;
    &lt;td&gt;min(a)&lt;/td&gt;
    &lt;td&gt;12&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sum()&lt;/td&gt;
    &lt;td&gt;Returns sum of all elements of the list&lt;/td&gt;
    &lt;td&gt;sum(a)&lt;/td&gt;
    &lt;td&gt;220&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;reverse()&lt;/td&gt;
    &lt;td&gt;Reverses the original list&lt;/td&gt;
    &lt;td&gt;a.reverse()&lt;/td&gt;
    &lt;td&gt;[13, 12, 90, 50, 30, 25]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sort()&lt;/td&gt;
    &lt;td&gt;Sorts the original list in ascending order&lt;/td&gt;
    &lt;td&gt;a.sort()&lt;/td&gt;
    &lt;td&gt;[12, 13, 25, 30, 50, 90]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sorted()&lt;/td&gt;
    &lt;td&gt;Returns the new sorted list &lt;/td&gt;
    &lt;td&gt;sorted(a)&lt;/td&gt;
    &lt;td&gt;[12, 13, 25, 30, 50, 90]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;insert()&lt;/td&gt;
    &lt;td&gt;Insert at a particular index in the list, and shifts remaining elements&lt;/td&gt;
    &lt;td&gt;a.insert(3,3)&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 3, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;append()&lt;/td&gt;
    &lt;td&gt;Adds elements/object to the end of the list&lt;/td&gt;
    &lt;td&gt;a.append(5)&lt;br&gt;a.append([10,20])&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 5]&lt;br&gt;[25, 30, 50, 90, 12, 13, [10, 20]]&lt;br&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;extend()&lt;/td&gt;
    &lt;td&gt;Adds object to the end of the list as elements not as object&lt;/td&gt;
    &lt;td&gt;a.extend([10,20])&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 10, 20]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;*&amp;nbsp;&amp;nbsp;Repeatation&lt;br&gt;operator&lt;/td&gt;
    &lt;td&gt;Repeat the list for n times and returns a new list&lt;/td&gt;
    &lt;td&gt;a*2&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 25, 30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;+ Concatenation&lt;br&gt;operator&lt;/td&gt;
    &lt;td&gt;Concatenates two lists, and returns a new list&lt;/td&gt;
    &lt;td&gt;a+b&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 100, 300, 500, 200, 250]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;index()&lt;/td&gt;
    &lt;td&gt;Finds index of a particular element in the list or not&lt;/td&gt;
    &lt;td&gt;a.index(25)&lt;br&gt;a.index(0)&lt;br&gt;&lt;/td&gt;
    &lt;td&gt;0&lt;br&gt;&lt;br&gt;ValueError: 0 is not in list&lt;br&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;in operator&lt;/td&gt;
    &lt;td&gt;Finds whether a particular element is in the list or not, returns boolean&lt;/td&gt;
    &lt;td&gt;25 in a&lt;/td&gt;
    &lt;td&gt;True&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;not in operator&lt;/td&gt;
    &lt;td&gt;Checks if element is not available in list, returns boolean&lt;/td&gt;
    &lt;td&gt;25 not in a&lt;/td&gt;
    &lt;td&gt;False&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;count()&lt;/td&gt;
    &lt;td&gt;Counts the number of occurence of an element in the list&lt;/td&gt;
    &lt;td&gt;a.count(25)&lt;/td&gt;
    &lt;td&gt;1&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;remove()&lt;/td&gt;
    &lt;td&gt;Removes an element from the list&lt;/td&gt;
    &lt;td&gt;a.remove(25)&lt;/td&gt;
    &lt;td&gt; [30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;pop()&lt;/td&gt;
    &lt;td&gt;Delete and return item at index 0&lt;/td&gt;
    &lt;td&gt;a.pop(0)&lt;/td&gt;
    &lt;td&gt;25 , a will be [30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;del&lt;/td&gt;
    &lt;td&gt;Deletes item at a particular index from the list&lt;/td&gt;
    &lt;td&gt;del a[0]&lt;/td&gt;
    &lt;td&gt;[30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;all()&lt;/td&gt;
&lt;td&gt;Returns True, if all items in list are True or it is an empty list&lt;/td&gt;
&lt;td&gt;all([True, True, True])
all([])
&lt;/td&gt;
&lt;td&gt;True&lt;br&gt;
True&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;any()&lt;/td&gt;
&lt;td&gt;Returns True, if any item in list is True else return False&lt;/td&gt;
&lt;td&gt;any([True, True, True])&lt;br&gt;
any([True, False, True])&lt;br&gt;
any([])&lt;/td&gt;
&lt;td&gt;True&lt;br&gt;False&lt;br&gt;False&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;

==Printing the List==
=== Print whole list ===
A list can be printed simply or using a ''for / while'' loop 

 print(List_2)     # To print the entire list
This code will print      
 ['Kala','Mala']     

===Print element at a particular index===
&lt;pre&gt;
Using index position
    List_2[0]     # prints 'Kala' ,i.e,the value at index position 0.
    List_2[1]     # prints 'Mala'.
&lt;/pre&gt;
=== Without using index position ===
&lt;pre&gt;
for item in List_2:   # here item is a variable used to access elements in list.
       print(item)
   This code snippet prints 
    Kala
    Mala
&lt;/pre&gt;
[[#Top]]

==Search for a particular element in list==
Elements in a list can be searched by one of the two ways:
=== using index() function===
&lt;pre&gt;
ages1 = [11,23,12,23,45]

#if element is available in the list, index() returns the index value on which, the element is
 present.
print(ages1.index(45))#Output: 4

#if element is not available in the list, index() returns ''ValueError''
print(ages1.index(0))#Output: ValueError:
&lt;/pre&gt;

In programming, if such error occurs, program gets terminated. It can be solved using exception handling.
 
e.g.
&lt;pre&gt;
ages1 = [11,23,12,23,45]

try:
    print(ages1.index(0))
except ValueError:
    print(&quot;Exception has occured&quot;)    
    print(&quot;Element is not found in the list&quot;)

&lt;/pre&gt;
&lt;pre&gt;
'''Output: 
Exception has occured
Element is not found in the list
'''&lt;/pre&gt;
[[#Top]]

=== using 'in' operator===
''in'' operator is used to check whether a particular element is available in the list or not.e.g.

&lt;pre&gt;
ages1 = [11,23,12,23,45]
no=11

if no in ages1:
    print(&quot;no is there in the list&quot;)
else:    
    print(&quot;no is NOT there in the list&quot;)
&lt;/pre&gt;
&lt;pre&gt;
#Output: no is there in the list
&lt;/pre&gt;


'''Number is not there in the list'''
&lt;pre&gt;
ages1 = [11,23,12,23,45]
no=15

if no in ages1:
    print(&quot;no is there in the list&quot;)
else:    
    print(&quot;no is NOT there in the list&quot;)
&lt;/pre&gt;
&lt;pre&gt;
Output: no is NOT there in the list
&lt;/pre&gt;
[[#Top]]

==Updating the List==
The lists can be updated using ''append'' or ''insert'' function.  Append adds the element to the end of the list and Insert adds the element in the specified position.
&lt;pre&gt;
   # add the element 'Sheela' to the end of the list.
   List_2.append(&quot;Sheela&quot;)    
   print (List_2) will output 
   ['Kala', 'Mala', 'Sheela']
&lt;/pre&gt;
   &lt;pre&gt;
# add the element &quot;Bala&quot; in the list at the index 1.
   List_2.insert(1,&quot;Bala&quot;)    
   print (List_2) will output 
   ['Kala', 'Bala','Mala', 'Sheela']
&lt;/pre&gt;

=== Extend the list by adding elements of other list at end using extend()===
&lt;pre&gt;
ages = [11,23,12,23,45]
ages.extend([57,58])
print(ages)
&lt;/pre&gt;

&lt;pre&gt;
#Output: [11, 23, 12, 23, 45, 57, 58]
&lt;/pre&gt;

==== Difference between ''append() and extend()'' ====
Difference between ''append()'' and ''extend()'' can be easily understood, by the following example.

&lt;pre&gt;
appendlist = [11,23,12,23,45]
appendlist.append([57,58])

extendlist= [11,23,12,23,45]
extendlist.extend([57,58])
&lt;/pre&gt;

&lt;pre&gt;
'''Output:
[11, 23, 12, 23, 45, [57, 58]]
[11, 23, 12, 23, 45, 57, 58]'''
&lt;/pre&gt;

[[#Top]]

==Basic Operations on List==
===Frequency of Occurrence===
list.count(object) will return the number of times the object occur in the list.
  '''Example'''
    ages = [11,23,12,23,45,43,22,24,23]
    ages.count(23) will return
    3
    ages.count(100) will return
    0

===Length of the List===
''len(list)'' will return the length of the list ie. the number of objects in the list.
  '''Example'''
&lt;pre&gt;
    ages = [11,23,12,23,45,43,22,24,23]
    len(ages) # Output: 9
&lt;/pre&gt;

To print the objects in the list either use ''for item in list'' or ''for index in range(len(list))''
&lt;pre&gt;
    for item in ages:       
        print (item)  
        (OR)
    for index in range(len(ages)) :
        print (ages[index])
&lt;/pre&gt;

===Sort the List===
''list.sort()'' will sort the list in ascending order
  '''Example'''
    ages = [11,23,12,23,45,43,22,24,23]
    ages.sort() 
    print (ages) 
    [11, 12, 22, 23, 23, 23, 24, 43, 45]

[[#Top]]

===Sort the List using sorted() function===
''sorted(list1)'' will sort the list and return a new list, it doesn't modify the original list
&lt;br&gt;'''Example: Sort in ascending order'''
&lt;pre&gt;
ages = [11,23,12,23,45,43,22,24,23]
newList=sorted(ages)
print(newList)

#Output: [11, 12, 22, 23, 23, 23, 24, 43, 45]
&lt;/pre&gt;

&lt;br&gt;'''Example: Sort in descending order'''
&lt;pre&gt;
ages = [11,23,12,23,45,43,22,24,23]
newList=sorted(ages,reverse=True)
print(newList)

#Output: [45, 43, 24, 23, 23, 23, 22, 12, 11]
&lt;/pre&gt;

===Reverse the List===
''list.reverse()'' will reverse the original list
  '''Example'''
    ages = [11, 12, 22, 23, 23, 23, 24, 43, 45]
    ages.reverse()
    print (ages)
    [45, 43, 24, 23, 23, 23, 22, 12, 11]

Both ''sort()'' and ''reverse()'' list operation will work on numeric and alphanumeric data list.

A special use of the ''reverse()'' function is to descend a list that is sorted in ascending order.

  '''Example'''
&lt;pre&gt;
ages = [11, 12, 22, 23, 23, 23, 24, 43, 45]
ages.sort()
print(ages)
ages.reverse()
print(ages)
&lt;/pre&gt;

[[#Top]]

===Slicing===
Used to retrieve an object or objects in a range as a list  
  '''Example'''

Use ''list[index]'' to retrieve the object at the given index
&lt;pre&gt;
In [1]: student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
In [2]: student[3]     #Object at index 3.  Remember index starts at 0
Out[2]: 'Geetha'      
&lt;/pre&gt;

Use ''list[start_index : end_index + 1]'' to retrieve objects from the start_index to end_index 
&lt;pre&gt;
In [3]: student[2:4]     # Objects from index 2 to 3 as List. Note the [ and ]
Out[3]: ['Vijay', 'Geetha']   
&lt;/pre&gt;

Use ''list[:]'' to retrieve objects from the starting of the list to the end of the list. 
The default start value will be the starting index of the list (i.e. 0) and the default end value
will be the length of the list 
&lt;pre&gt;
In [4]: student[:]        # prints the entire list
Out[4]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma', 'Janani']
&lt;/pre&gt;
&lt;pre&gt;
In [5]: student[:5]       # prints the objects from the start of the list upto object at index 4
Out[5]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran']
&lt;/pre&gt;
&lt;pre&gt;
In [6]: student[2:]       # prints the objects from index 2 upto the end of the list
Out[6]: ['Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma', 'Janani']
&lt;/pre&gt;

Negative index too is available in Python. It starts from last element of the list. i.e.
&lt;pre&gt;
In [7]:student[-1]        #prints last index of list
Out[7]: 'Janani'
&lt;/pre&gt;
&lt;pre&gt;
In [8]:student[-1:-8]     #prints empty list
Out[8]: []
&lt;/pre&gt;
&lt;pre&gt;
In [9]:student[-8:-1]     #prints -8th index to -1st index elements
Out[9]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma']
&lt;/pre&gt;

[[#Top]]

===Removing Item from list ===
----

Is used to remove a specific item from the list.

'''Example:'''
 
Use list.remove(entry/value)  Or   del list[index]    Or list.pop(index)
&lt;pre&gt;
student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
student.remove(&quot;Arun&quot;)   #This will delete item &quot;Arun&quot;
         Or    
del student[0]           # This will delete item at index 0
         Or
student.pop(0)         # This will delete and return item at index 0
print(student)    
Output: &quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
&lt;/pre&gt;

[[#Top]]

===Delete list ===
----
Used to delete complete list

'''Example'''

Use del &lt;list name&gt;
&lt;pre&gt;
student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
del student&lt;/pre&gt;

===Concatenation of two lists===
----
''+'' is the concatenation operator which is used concatenate two lists. 
&lt;pre&gt;
ages1 = [11,23,12,23,45]
ages2 = [25, 24, 43, 47]
age=ages1+ages2
print(age)
#Output: [11, 23, 12, 23, 45, 25, 24, 43, 47]
&lt;/pre&gt;

===Repeatation of a list ===
----
''*'' is the operator to repeat a particular list.
&lt;pre&gt;
ages1 = [11,23,12,23,45]
age=ages1*5 #ages1 list is repeated 5 times and stroed in ''age'' list
print(age)

#Output: [11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45]
&lt;/pre&gt;

=== all and any for List===
all() and any() are special functions to check whether all elements in iterable is ''True'' or any element is ''True''
&lt;ol&gt;
&lt;li&gt;If all elements in a list are ''True'', ''all()'' will return ''True''&lt;/li&gt;
&lt;li&gt;If iterable is ''empty'', ''all()'' will return ''True''&lt;/li&gt;
&lt;li&gt;If iterable contains at least one ''True'', ''any()'' will return ''True''&lt;/li&gt;
&lt;li&gt;If iterable is ''empty'', ''any()'' will return ''False''&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;
lsit=[True, True, True, True]
print(all(lsit))#Output: True
print(any(lsit))#Output: True

lsit1=[True, False, True, True]
print(all(lsit1))#Output: False
print(any(lsit1))#Output: True

lsit2=[False,False,False]
print(all(lsit2))#Output: False
print(any(lsit2))#Output: False

lsit3=[]
print(all(lsit3))#Output: True
print(any(lsit3))#Output: False
&lt;/pre&gt;

==Conditional Statements==
Conditionals are used to check the condition and change the flow of the program 
accordingly. They are realized in programming languages through if statement. The 
syntax is as follows :
&lt;pre&gt;
         if condition : 
            statement
&lt;/pre&gt;
    '''Note:''' Do not forget indentation (inserting space/tab) in the line after the
 if condition.
    
    In case you want to execute a set of statements when a condition is true and another

set of statement when the condition is false.
&lt;pre&gt;
         if condition : 
            statement 1
         else :
            statement 2
&lt;/pre&gt;

&lt;pre&gt;    
    Multiple if-else statements can be written as follows:
         if condition_1 : 
            statement 1
         elif condition_2 : # 'elif' is short for 'else if'
            statement 2
         elif condition_3 :
            statement 3
        .
        .
         else :
            final statement
&lt;/pre&gt;

[[#Top]]

=Loops and Conditionals : Fizzbuzz=
====Loops====
Loops are used to execute a set of repetitive statements. They are realised
through 'while' and 'for' loops in programming languages. The syntax of 'for' loop is 
as follows :
&lt;pre&gt;
for LOOPVARIABLE in SEQUENCE: 
            STATEMENTS&lt;/pre&gt;

    '''e.g.''' to print all the data from a list we can write:
&lt;pre&gt;
for item in list_name:
      print(item)&lt;/pre&gt;
    OR
&lt;pre&gt;
for index in range(len(list_name)):
      print(list_name[index])
 &lt;/pre&gt;   
    The syntax for while loop is as follows :
&lt;pre&gt;    
while BOOLEANEXPRESSION: 
     STATEMENTS
     INCREMENT/DECREMENT
&lt;/pre&gt;    
    '''e.g.''' if we want to print all numbers from 1 to 10
&lt;pre&gt;
i=1
while i&lt;=10 :
    print(i,&quot; &quot;)
    i=i+1
    &lt;/pre&gt;
 
'while' loop has indefinite iteration (run-time unknown). So, there must be loop,  break statement in it.
 Whereas 'for' loop is definite in nature (i.e. known or predictable span).&lt;br&gt;

&lt;b&gt;NOTE: Python doesn't have anything like do-while loop.&lt;/b&gt;

[[#Top]]

==Implementation==
Here, we try to demonstrate the concept of loops and conditionals through a game called Fizzbuzz. The rules are as follows :&lt;br/&gt;
[[File:fizzBuzz.gif]]

• if input number is a multiple of ’3’ print ”Fizz”
&lt;br/&gt;
• if input number is a multiple of ’5’ print ”Buzz”
&lt;br/&gt;
• if input number is a multiple of both '3' and ’5’ print ”FizzBuzz”
&lt;br/&gt;
The pseudo code is as follows :
&lt;pre&gt;
   If input no % 3 == 0 and  input no % 5 == 0 : 
       print ”Fizzbuzz”
   else if input no % 3 == 0 : 
       print ”Fizz”
   else if input no % 5 == 0 : 
       print ”Buzz”
   else :
       print the input no
&lt;/pre&gt;
 &lt;p style=&quot;text-align:justify&quot;&gt;
The order of statements execution matters to get the desired output. The highest priority condition should be first followed by other. In fizzbuzz programming, first checking should be done for both divisibility of 3 and 5. If condition not satisfied only then it should check individually for 3 or 5. So carefully choosing the order is crucial for better programming.
Note: There is some effect of present condition statements chosen on next conditions statements. That is why in first attempt fizzbuzz programming got struck.&lt;/p&gt;

Example: 
&lt;pre&gt;
#Code to achieve the above requirement in python3.
i = int(input(&quot;Enter the number&quot;)) 
if i%3 == 0 and i%5 == 0: print(i,&quot;FizzBuzz&quot;)  
elif i%5 == 0: print(i,&quot;Buzz&quot;)
elif i%3 == 0: print(i,&quot;Fizz&quot;)
else: print(i)
&lt;/pre&gt;
Lets put the same into a loop for a range given by the user.
&lt;pre&gt;
def fizzbuzzgame(start,stop):
    for i in range(start,stop+1):
        if i%3 == 0 and i%5 == 0:
            print(i,&quot;FizzBuzz&quot;)
        elif i%5 == 0:
            print(i,&quot;Buzz&quot;)
        elif i%3 == 0:
            print(i,&quot;Fizz&quot;)
        else: print(i)

fizzbuzzgame(50,100)
&lt;/pre&gt;
&lt;pre&gt;
#Output:
1235
Buzz
======================================
555
Fizzbuzz
======================================
1235
Buzz
======================================
999
Fizz
&lt;/pre&gt;

[[#Top]]

=== Fizz Buzz game in Interactive mode with Score ===
'''By Ms. Ami Tusharkant Choksi'''
&lt;pre&gt;
def fizzbuzzgame(i):
        if i%3 == 0 and i%5 == 0:
            print(i,&quot;FizzBuzz&quot;)
            return(&quot;fzbz&quot;)
        elif i%5 == 0:
            print(i,&quot;Buzz&quot;)
            return(&quot;bz&quot;)
        elif i%3 == 0:
            print(i,&quot;Fizz&quot;)
            return(&quot;fz&quot;)
        else:
            print(i)
            return(&quot;no&quot;)

ch = 'y'
fizzbuzz=0
fizz=0
buzz=0
nothing=0
print(&quot;&quot;&quot;

 /$$$$$$$$/$$                  /$$$$$$$                            
| $$_____|__/                 | $$__  $$                           
| $$      /$$/$$$$$$$$/$$$$$$$| $$  \ $$/$$   /$$/$$$$$$$$/$$$$$$$$
| $$$$$  | $|____ /$$|____ /$$| $$$$$$$| $$  | $|____ /$$|____ /$$/
| $$__/  | $$  /$$$$/   /$$$$/| $$__  $| $$  | $$  /$$$$/   /$$$$/ 
| $$     | $$ /$$__/   /$$__/ | $$  \ $| $$  | $$ /$$__/   /$$__/  
| $$     | $$/$$$$$$$$/$$$$$$$| $$$$$$$|  $$$$$$//$$$$$$$$/$$$$$$$$
|__/     |__|________|________|_______/ \______/|________|________/
                                                                  
&quot;&quot;&quot;)   
print('''

  /$$$$$$                                
 /$$__  $$                               
| $$  \__/ /$$$$$$ /$$$$$$/$$$$  /$$$$$$ 
| $$ /$$$$|____  $| $$_  $$_  $$/$$__  $$
| $$|_  $$ /$$$$$$| $$ \ $$ \ $| $$$$$$$$
| $$  \ $$/$$__  $| $$ | $$ | $| $$_____/
|  $$$$$$|  $$$$$$| $$ | $$ | $|  $$$$$$$
 \______/ \_______|__/ |__/ |__/\_______/
                                     
''')

while(ch == 'y'):
    n=int(input(&quot;Enter a Number : &quot;))
    winLoose=fizzbuzzgame(n)
    if(winLoose == &quot;fz&quot;):
        fizz+=1
    elif(winLoose == &quot;bz&quot;):
        buzz+=1
    elif(winLoose == &quot;fzbz&quot;):
        fizzbuzz+=1
    ch=input(&quot;Do you want to continue playing the game : (y/n)&quot;)
    if(ch=='n'):
        print('Congratulations, your score is\n FizzBuzz:%d\nFizz:%d\nBuzz:%d' %
(fizzbuzz,fizz,buzz))
    
'''Sample Output:

 /$$$$$$$$/$$                  /$$$$$$$                            
| $$_____|__/                 | $$__  $$                           
| $$      /$$/$$$$$$$$/$$$$$$$| $$  \ $$/$$   /$$/$$$$$$$$/$$$$$$$$
| $$$$$  | $|____ /$$|____ /$$| $$$$$$$| $$  | $|____ /$$|____ /$$/
| $$__/  | $$  /$$$$/   /$$$$/| $$__  $| $$  | $$  /$$$$/   /$$$$/ 
| $$     | $$ /$$__/   /$$__/ | $$  \ $| $$  | $$ /$$__/   /$$__/  
| $$     | $$/$$$$$$$$/$$$$$$$| $$$$$$$|  $$$$$$//$$$$$$$$/$$$$$$$$
|__/     |__|________|________|_______/ \______/|________|________/
                                                                                                                                   

  /$$$$$$                                
 /$$__  $$                               
| $$  \__/ /$$$$$$ /$$$$$$/$$$$  /$$$$$$ 
| $$ /$$$$|____  $| $$_  $$_  $$/$$__  $$
| $$|_  $$ /$$$$$$| $$ \ $$ \ $| $$$$$$$$
| $$  \ $$/$$__  $| $$ | $$ | $| $$_____/
|  $$$$$$|  $$$$$$| $$ | $$ | $|  $$$$$$$
 \______/ \_______|__/ |__/ |__/\_______/
                                         

Enter a Number : 666
666 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 777
777 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 555
555 FizzBuzz
Do you want to continue playing the game : (y/n)y
Enter a Number : 1
1
Do you want to continue playing the game : (y/n)y
Enter a Number : 789
789 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 25
25 Buzz
Do you want to continue playing the game : (y/n)n
Congratulations, your score is

FizzBuzz:1
Fizz:3
Buzz:1

&lt;/pre&gt;

=Crowd Computing: Just Estimate=
==Wisdom of Crowds==
 &lt;p style=&quot;text-align:justify&quot;&gt;
The concept of ’Wisdom of Crowds’ was proposed by Francis Galton. A weight-judging competition was carried on at the annual show of the West of England Fat Stock and Poultry Exhibition recently held at Plymouth, A fat ox having been selected, competitors bought stamped and numbered cards, each, on which to inscribe their respective names, addresses, and estimates of what the ox would weigh after it had been slaughtered. Those who guessed most successfully received prizes. About 8oo tickets were issued to the par- ticipants. The middlemost estimate of all the estimates recorded was 1207 lbs and the actual weight of the ox was 1198 lbs.&lt;/p&gt;

==Our Experiment==
 &lt;p style=&quot;text-align:justify&quot;&gt;
The crowd had to guess the number of candies/gems in a jar. Around 75 people participated in the experiment. The actual number of gems in the jar were 375. The median of all estimates came out to be 300 and the mean of all the estimates came out to be around 396. Median underestimated and mean overestimated the actual value. So according to recent studies, Trimmed mean must be used as an aggregate measure to estimate where Wisdom of Crowds is involved.
&lt;/p&gt;
[[File:Gemsjar.jpg|center|200px|caption]]

===Trimmed Mean===
 &lt;p style=&quot;text-align:justify&quot;&gt;
In these kinds of experiments, 10% trimmed mean is usually followed. For calculating 10% trimmed mean, remove 10% smallest and 10% largest values from the sample. Calculate the mean of the sample obtained. In the above experiment, the trimmed mean came out to be around 351 which is very close to the actual value.&lt;/p&gt;

==Implementation==
Here, we try to demonstrate the concept of trimmed mean through crowd computing.
&lt;ol&gt;
&lt;li&gt; Input a list of estimates done by the crowd .&lt;/li&gt;
&lt;li&gt; Sort the list.&lt;/li&gt;
&lt;li&gt; Remove the 10% smallest values.&lt;/li&gt;
&lt;li&gt; Remove the 10% largest values.
&lt;li&gt; Calculate the mean of the new list obtained .&lt;/li&gt;&lt;/ol&gt;&lt;hr&gt;

==Data of Experiment==       
    Estimates =[1000,1010,1786,2000,1500,1500,100,120,150,150,150,170,175,180,197,200,200,200,200,200,200,220,220,220,220,234,250,250,250,250,250,250,250,250,250,263,270,275,275,286,300,
                300,300,300,300,300,300,300,320,350,350,350,400, 400,400,400,400,450,467,500,500,500,500,500,500,500,550,550,600,600,600,650,700,700,720]

    '''CODE:'''
&lt;pre&gt;
Estimates = [1000,1010,1786,2000,1500,1500,100,120,150,150,150,170,175,180,197,200,200,200,200,200,200,220,220,220,220,234,250,250,250,250,250,250,250,250,250,263,270,275,275,286,300,                300,300,300,300,300,300,300,320,350,350,350,400,400,400,400,400,450,467,500,500,500,500,500,500,500,550,550,600,600,600,650,700,700,720]
Estimates.sort()
offset = int(0.10*len(Estimates))
for i in range(offset):
       del Estimates[0]
       del Estimates[-1]
Sum = 0    
for i in range(len(Estimates)):
       Sum += Estimates[i]
Mean_Value = Sum/len(Estimates)
print(&quot;Mean : &quot;, int(Mean_Value))
#Output:
Mean :  351
&lt;/pre&gt;
&lt;hr&gt;
==Trimmed Mean for the above example== 
&lt;h3&gt;Using scipy library&lt;/h3&gt;
&lt;pre&gt;
#import scipy to use the method of trim_mean
from scipy import stats
trimMean = stats.trim_mean(Estimates, 0.1) # Trim 10% at both ends
print(&quot;Trimmed Mean : &quot;,trimMean)
#Output:
Trimmed Mean :  335.1020408163265
&lt;/pre&gt;

&lt;h3&gt;Without using scipy library&lt;/h3&gt;
&lt;pre&gt;
#Trimmed mean with 10%
p=10/100
#sorted data
data=[2, 4, 6, 7, 11, 21, 81, 90, 105, 121]
n = len(data)
#Remove elements from both end
rem=int(n*p)
newData = data[rem:-rem]
mean = 0
for i in newData:
    mean += i
mean = int(mean/len(newData))
print(&quot;Trimmed mean : &quot;,mean)
#Output: Trimmed mean :  40
&lt;/pre&gt;
[[#Top]]

=Jumbled_Words Permutations: Jumbled Words=
==What are Permutations ?==
A permutation also called ordering of selected number of elements from a list denoted by nPr here we are choosing all elements of a list and so n=r&lt;br&gt;
nPr=n!/(n-r)!&lt;br&gt; as n=r
nPn=n!&lt;br&gt; which gives all possible arrangement of elements present in a list.

 For example, permutations of list [1,2,3] are [1,2,3], [1,3,2], [2,1,3], [2,3,1], 
[3,1,2], and [3,2,1]. 
The number of permutations of a list of elements nPn is given by n!. For example, there are 2! = 2 x 1 = 2 permutations of [1,2], namely [1,2] and [2,1], and 3! = 3 x 2 x 1 = 6 permutations of [1,2,3], as mentioned above.&lt;br/&gt;
[[File:Permutations.jpg]]

==Implementation==
 &lt;p style=&quot;text-align:justify&quot;&gt;
Here, we try to demonstrate the concept of permutations through jumbled words. It is a two player game in which one person presents the other person a different permutation of the word in his mind. The other person has to guess the right word. If he guesses, the he wins otherwise he loses.&lt;/p&gt;
 Input an list of words.
 Randomly pick a word from the list of words .
 Shuffle this word and present it to the other player.
 if word guesses by the player is same as the one picked from list of w
     player wins
 else
     player loses

ALTERNATE CODE TO GENERATE THIS GAME:
&lt;pre&gt;
import random
p1=input(&quot;enter player 1 name:&quot;)
p2=input(&quot;enter player 2 name:&quot;)
l=[&quot;rainbow&quot;,&quot;computer&quot;,&quot;robot&quot;,&quot;butter&quot;,&quot;vegetable&quot;,&quot;science&quot;,&quot;correct&quot;]
c1=c2=a1=a2=f1=f2=0
k=1
i=3
def play():
    n=random.choice(l)        ##n=chooses a word from list l
    l1=[]
    for j in n:
       l1.append(j)      ##creates a list for word in n
    for t in range(len(l1)):
       p=random.choice(l1)     ##this randomly displays letters in the list
       print(p)
       l1.remove(p)          ##to avoid the repetition of a letter
    s=input(&quot;enter the word:&quot;)
    if(s==n):
        print(&quot;correct&quot;)
        return 1
    else:
        print(&quot;not correct&quot;)
        print(&quot;answer is&quot;,n)
        return 0
def stat():
     print(&quot;player 1:&quot;)
     print(&quot;score:&quot;,c1)
     print(&quot;answered:&quot;,a1)
     print(&quot;failed:&quot;,f1)
     print(&quot;.............&quot;)
     print(&quot;player 2:&quot;)
     print(&quot;score:&quot;,c2)
     print(&quot;answered:&quot;,a2)
     print(&quot;failed&quot;,f2)
     if(c1&gt;c2):
         print(p1,&quot; won over &quot;,p2)
     elif(c1==c2):
         print(&quot;draw game&quot;)
     else:
         print(p2,&quot; won over &quot;,p1) 
while(i!=4):
      if(i==3):
         if(k==1):
             print(&quot;player 1 turn&quot;)
             print(&quot;your jumbled word is:&quot;)
             k=k+1
             m=play()
             if(m==1):      ##if guessed answer is correct,then score and no.of answered count will be increased
                c1+=1
                a1+=1
             else:
                f1+=1       ##else count of no.of failed to answered will be incremented
         else:
             print(&quot;player 2 turn&quot;)
             print(&quot;your jumbled word is:&quot;)
             k=k-1
             m=play()
             if(m==1):
                c2=c2+1
                a2=a2+1
             else:
                f2=f2+1
       if(i==2):
             print(&quot;present status&quot;)
             stat()
       i=int(input(&quot;enter your choice  1.stop 2.status 3.continue&quot;))
       if(i==1):
             stat()
             i=i+3
&lt;/pre&gt;
&lt;hr&gt;
=== JumbledWord Simple Logic, In Short ===
[[File:jumbledWord.gif]]
---
&lt;hr&gt;
'''Logic to create a Jumbled Word'''
&lt;hr&gt;
&lt;pre&gt;
#Get Jumbled Word and print it Horizontally
import random

def getJumbledWord(b):
    jumble=''
    l1 = [ b[i] for i in range(0, len(b)) ]
    for t in range(len(l1)):
       p=random.choice(l1)  #this randomly gets letters from the list      
       jumble=jumble+p       
       l1.remove(p)
    return jumble

b=input(&quot;Enter a word to make it jumbled : &quot;)
print(&quot;Jumbled Word : &quot;, getJumbledWord(b))
&lt;/pre&gt;
&lt;pre&gt;
Output:
Enter a word to make it jumbled : live and let live others
Jumbled Word :  vel  toldeisrte aihv len
==========================================
Enter a word to make it jumbled : junkfood
Jumbled Word :  nfukdooj
&lt;/pre&gt;
&lt;hr&gt;
'''Another Logic to create a Jumbled Word'''
&lt;hr&gt;
&lt;pre&gt;
import random
b=input(&quot;Enter a word to make it jumbled : &quot;)

def getJumbledWord1(b):
    l1 = [ b[i] for i in range(0, len(b)) ]
    random.shuffle(l1)
    str1 = ''.join(l1)
    return str1

print(&quot;Jumbled Word : &quot;, getJumbledWord1(b))
&lt;/pre&gt;

====Sample Output:====
&lt;pre&gt;
---- Output1 
Enter a word to make it jumbled : butter
Jumbled Word :  tbture

---- Output2 
Enter a word to make it jumbled : petriotism
Jumbled Word :  pittrosime
&lt;/pre&gt;

=Theory of Evolution=

== What is Evolution ? ==
Evolution is the change in heritable characteristics over successive generations. The theory of evolution explains that DNA, which acts as a carrier of genetic information from one generation to other, tends to change or mutate occasionally. These changes are reflected in next generations to come. This is how life has evolved on earth from bacteria to human beings.&lt;br&gt;
[[File:Evolution.png|500px]]

== Implementation ==
 &lt;p style=&quot;text-align:justify&quot;&gt;
An array representing DNA is stored in a file. As genes are forms of DNA, they contain information to be transferred to forthcoming generations. Assume that information is in the form of bits (in the form of 0s and 1s). A number is picked randomly from 1 to the size of the array. A new parameter has been introduced which decides whether mutation would occur or not. If the value of this new parameter is 1 (It is picked randomly from 1 to 100), then only change is reflected down the generations, otherwise it is not. The pseudo code is as follows :
&lt;/p&gt;
Input an array containing genetic information .
Randomly generate a number (say m) from 1 to length of the array. Randomly generate other number (say p) from 1 to 100.

&lt;pre&gt; 
    if p is equal to 1 then 
        if m is 1 then
          set it to 0
        else
          set it to 1
&lt;/pre&gt;
[[#TOP]]</text>
      <sha1>swaei8kfj1t5wu9xqdw8dwiknuti4zd</sha1>
    </revision>
    <revision>
      <id>3764</id>
      <parentid>3763</parentid>
      <timestamp>2018-09-29T04:16:13Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* Fizz Buzz game in Interactive mode with Score */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="30766">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_3 Contributors of this page]
*Week 3 Playlist: https://www.youtube.com/playlist?list=PLc_j0TNIaWxOVx_z9jAM2UB3RqYNXaoEo
=List=
List is a flexible data structure used for storing a group of data separated by comma. The elements in a list need not be of the same data type.

'''Example:'''
       List_1 = [ 1, 2,3] or 
       List_1 = [&quot;coffee&quot;, &quot;Tea&quot;, &quot;Milk&quot;] or
       List_1 = [1,&quot;coffee&quot;, &quot;Tea&quot;, 3, &quot;5&quot;]

==List Creation==
a) A list can be created by simply putting values (separated by comma) between square
 brackets as given below,
&lt;pre&gt;List_1 = [1,&quot;coffee&quot;, &quot;Tea&quot;, 3, &quot;5&quot;] #this creates a list by name List_1 containing
 following items
&lt;/pre&gt;


Or,
(b)A List can be created from scratch and elements can be added 
&lt;pre&gt;
        List_2 = [ ]
        List_2.append(&quot;Kala&quot;)
        List_2.append(&quot;Mala&quot;)
&lt;/pre&gt;
Here we use &quot;append&quot;, which is a function in python that enable us to append or attach an element to a list .
&lt;pre&gt;Thus List_2 will now hold [&quot;Kala&quot;,&quot;Mala&quot;]&lt;/pre&gt;

[[#Top]]

==Operations and Methods to work with List==
&lt;pre&gt;
a = [25,30,50,90,12,13]
b = [100,300,500,200,250]
&lt;/pre&gt;
&lt;hr&gt;
&lt;table border=2&gt;
  &lt;tr&gt;
    &lt;th&gt;&lt;b&gt;Method/&lt;br&gt;Operator&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Function&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Syntax&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Output&lt;/b&gt;&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;len()&lt;/td&gt;
    &lt;td&gt;Find length of a list&lt;/td&gt;
    &lt;td&gt;len(a)&lt;/td&gt;
    &lt;td&gt;6&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;max()&lt;/td&gt;
    &lt;td&gt;Find maximum element from the list&lt;/td&gt;
    &lt;td&gt;max(a)&lt;/td&gt;
    &lt;td&gt;90&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;min()&lt;/td&gt;
    &lt;td&gt;Find minimum element from the list&lt;/td&gt;
    &lt;td&gt;min(a)&lt;/td&gt;
    &lt;td&gt;12&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sum()&lt;/td&gt;
    &lt;td&gt;Returns sum of all elements of the list&lt;/td&gt;
    &lt;td&gt;sum(a)&lt;/td&gt;
    &lt;td&gt;220&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;reverse()&lt;/td&gt;
    &lt;td&gt;Reverses the original list&lt;/td&gt;
    &lt;td&gt;a.reverse()&lt;/td&gt;
    &lt;td&gt;[13, 12, 90, 50, 30, 25]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sort()&lt;/td&gt;
    &lt;td&gt;Sorts the original list in ascending order&lt;/td&gt;
    &lt;td&gt;a.sort()&lt;/td&gt;
    &lt;td&gt;[12, 13, 25, 30, 50, 90]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sorted()&lt;/td&gt;
    &lt;td&gt;Returns the new sorted list &lt;/td&gt;
    &lt;td&gt;sorted(a)&lt;/td&gt;
    &lt;td&gt;[12, 13, 25, 30, 50, 90]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;insert()&lt;/td&gt;
    &lt;td&gt;Insert at a particular index in the list, and shifts remaining elements&lt;/td&gt;
    &lt;td&gt;a.insert(3,3)&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 3, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;append()&lt;/td&gt;
    &lt;td&gt;Adds elements/object to the end of the list&lt;/td&gt;
    &lt;td&gt;a.append(5)&lt;br&gt;a.append([10,20])&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 5]&lt;br&gt;[25, 30, 50, 90, 12, 13, [10, 20]]&lt;br&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;extend()&lt;/td&gt;
    &lt;td&gt;Adds object to the end of the list as elements not as object&lt;/td&gt;
    &lt;td&gt;a.extend([10,20])&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 10, 20]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;*&amp;nbsp;&amp;nbsp;Repeatation&lt;br&gt;operator&lt;/td&gt;
    &lt;td&gt;Repeat the list for n times and returns a new list&lt;/td&gt;
    &lt;td&gt;a*2&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 25, 30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;+ Concatenation&lt;br&gt;operator&lt;/td&gt;
    &lt;td&gt;Concatenates two lists, and returns a new list&lt;/td&gt;
    &lt;td&gt;a+b&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 100, 300, 500, 200, 250]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;index()&lt;/td&gt;
    &lt;td&gt;Finds index of a particular element in the list or not&lt;/td&gt;
    &lt;td&gt;a.index(25)&lt;br&gt;a.index(0)&lt;br&gt;&lt;/td&gt;
    &lt;td&gt;0&lt;br&gt;&lt;br&gt;ValueError: 0 is not in list&lt;br&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;in operator&lt;/td&gt;
    &lt;td&gt;Finds whether a particular element is in the list or not, returns boolean&lt;/td&gt;
    &lt;td&gt;25 in a&lt;/td&gt;
    &lt;td&gt;True&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;not in operator&lt;/td&gt;
    &lt;td&gt;Checks if element is not available in list, returns boolean&lt;/td&gt;
    &lt;td&gt;25 not in a&lt;/td&gt;
    &lt;td&gt;False&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;count()&lt;/td&gt;
    &lt;td&gt;Counts the number of occurence of an element in the list&lt;/td&gt;
    &lt;td&gt;a.count(25)&lt;/td&gt;
    &lt;td&gt;1&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;remove()&lt;/td&gt;
    &lt;td&gt;Removes an element from the list&lt;/td&gt;
    &lt;td&gt;a.remove(25)&lt;/td&gt;
    &lt;td&gt; [30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;pop()&lt;/td&gt;
    &lt;td&gt;Delete and return item at index 0&lt;/td&gt;
    &lt;td&gt;a.pop(0)&lt;/td&gt;
    &lt;td&gt;25 , a will be [30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;del&lt;/td&gt;
    &lt;td&gt;Deletes item at a particular index from the list&lt;/td&gt;
    &lt;td&gt;del a[0]&lt;/td&gt;
    &lt;td&gt;[30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;all()&lt;/td&gt;
&lt;td&gt;Returns True, if all items in list are True or it is an empty list&lt;/td&gt;
&lt;td&gt;all([True, True, True])
all([])
&lt;/td&gt;
&lt;td&gt;True&lt;br&gt;
True&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;any()&lt;/td&gt;
&lt;td&gt;Returns True, if any item in list is True else return False&lt;/td&gt;
&lt;td&gt;any([True, True, True])&lt;br&gt;
any([True, False, True])&lt;br&gt;
any([])&lt;/td&gt;
&lt;td&gt;True&lt;br&gt;False&lt;br&gt;False&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;

==Printing the List==
=== Print whole list ===
A list can be printed simply or using a ''for / while'' loop 

 print(List_2)     # To print the entire list
This code will print      
 ['Kala','Mala']     

===Print element at a particular index===
&lt;pre&gt;
Using index position
    List_2[0]     # prints 'Kala' ,i.e,the value at index position 0.
    List_2[1]     # prints 'Mala'.
&lt;/pre&gt;
=== Without using index position ===
&lt;pre&gt;
for item in List_2:   # here item is a variable used to access elements in list.
       print(item)
   This code snippet prints 
    Kala
    Mala
&lt;/pre&gt;
[[#Top]]

==Search for a particular element in list==
Elements in a list can be searched by one of the two ways:
=== using index() function===
&lt;pre&gt;
ages1 = [11,23,12,23,45]

#if element is available in the list, index() returns the index value on which, the element is
 present.
print(ages1.index(45))#Output: 4

#if element is not available in the list, index() returns ''ValueError''
print(ages1.index(0))#Output: ValueError:
&lt;/pre&gt;

In programming, if such error occurs, program gets terminated. It can be solved using exception handling.
 
e.g.
&lt;pre&gt;
ages1 = [11,23,12,23,45]

try:
    print(ages1.index(0))
except ValueError:
    print(&quot;Exception has occured&quot;)    
    print(&quot;Element is not found in the list&quot;)

&lt;/pre&gt;
&lt;pre&gt;
'''Output: 
Exception has occured
Element is not found in the list
'''&lt;/pre&gt;
[[#Top]]

=== using 'in' operator===
''in'' operator is used to check whether a particular element is available in the list or not.e.g.

&lt;pre&gt;
ages1 = [11,23,12,23,45]
no=11

if no in ages1:
    print(&quot;no is there in the list&quot;)
else:    
    print(&quot;no is NOT there in the list&quot;)
&lt;/pre&gt;
&lt;pre&gt;
#Output: no is there in the list
&lt;/pre&gt;


'''Number is not there in the list'''
&lt;pre&gt;
ages1 = [11,23,12,23,45]
no=15

if no in ages1:
    print(&quot;no is there in the list&quot;)
else:    
    print(&quot;no is NOT there in the list&quot;)
&lt;/pre&gt;
&lt;pre&gt;
Output: no is NOT there in the list
&lt;/pre&gt;
[[#Top]]

==Updating the List==
The lists can be updated using ''append'' or ''insert'' function.  Append adds the element to the end of the list and Insert adds the element in the specified position.
&lt;pre&gt;
   # add the element 'Sheela' to the end of the list.
   List_2.append(&quot;Sheela&quot;)    
   print (List_2) will output 
   ['Kala', 'Mala', 'Sheela']
&lt;/pre&gt;
   &lt;pre&gt;
# add the element &quot;Bala&quot; in the list at the index 1.
   List_2.insert(1,&quot;Bala&quot;)    
   print (List_2) will output 
   ['Kala', 'Bala','Mala', 'Sheela']
&lt;/pre&gt;

=== Extend the list by adding elements of other list at end using extend()===
&lt;pre&gt;
ages = [11,23,12,23,45]
ages.extend([57,58])
print(ages)
&lt;/pre&gt;

&lt;pre&gt;
#Output: [11, 23, 12, 23, 45, 57, 58]
&lt;/pre&gt;

==== Difference between ''append() and extend()'' ====
Difference between ''append()'' and ''extend()'' can be easily understood, by the following example.

&lt;pre&gt;
appendlist = [11,23,12,23,45]
appendlist.append([57,58])

extendlist= [11,23,12,23,45]
extendlist.extend([57,58])
&lt;/pre&gt;

&lt;pre&gt;
'''Output:
[11, 23, 12, 23, 45, [57, 58]]
[11, 23, 12, 23, 45, 57, 58]'''
&lt;/pre&gt;

[[#Top]]

==Basic Operations on List==
===Frequency of Occurrence===
list.count(object) will return the number of times the object occur in the list.
  '''Example'''
    ages = [11,23,12,23,45,43,22,24,23]
    ages.count(23) will return
    3
    ages.count(100) will return
    0

===Length of the List===
''len(list)'' will return the length of the list ie. the number of objects in the list.
  '''Example'''
&lt;pre&gt;
    ages = [11,23,12,23,45,43,22,24,23]
    len(ages) # Output: 9
&lt;/pre&gt;

To print the objects in the list either use ''for item in list'' or ''for index in range(len(list))''
&lt;pre&gt;
    for item in ages:       
        print (item)  
        (OR)
    for index in range(len(ages)) :
        print (ages[index])
&lt;/pre&gt;

===Sort the List===
''list.sort()'' will sort the list in ascending order
  '''Example'''
    ages = [11,23,12,23,45,43,22,24,23]
    ages.sort() 
    print (ages) 
    [11, 12, 22, 23, 23, 23, 24, 43, 45]

[[#Top]]

===Sort the List using sorted() function===
''sorted(list1)'' will sort the list and return a new list, it doesn't modify the original list
&lt;br&gt;'''Example: Sort in ascending order'''
&lt;pre&gt;
ages = [11,23,12,23,45,43,22,24,23]
newList=sorted(ages)
print(newList)

#Output: [11, 12, 22, 23, 23, 23, 24, 43, 45]
&lt;/pre&gt;

&lt;br&gt;'''Example: Sort in descending order'''
&lt;pre&gt;
ages = [11,23,12,23,45,43,22,24,23]
newList=sorted(ages,reverse=True)
print(newList)

#Output: [45, 43, 24, 23, 23, 23, 22, 12, 11]
&lt;/pre&gt;

===Reverse the List===
''list.reverse()'' will reverse the original list
  '''Example'''
    ages = [11, 12, 22, 23, 23, 23, 24, 43, 45]
    ages.reverse()
    print (ages)
    [45, 43, 24, 23, 23, 23, 22, 12, 11]

Both ''sort()'' and ''reverse()'' list operation will work on numeric and alphanumeric data list.

A special use of the ''reverse()'' function is to descend a list that is sorted in ascending order.

  '''Example'''
&lt;pre&gt;
ages = [11, 12, 22, 23, 23, 23, 24, 43, 45]
ages.sort()
print(ages)
ages.reverse()
print(ages)
&lt;/pre&gt;

[[#Top]]

===Slicing===
Used to retrieve an object or objects in a range as a list  
  '''Example'''

Use ''list[index]'' to retrieve the object at the given index
&lt;pre&gt;
In [1]: student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
In [2]: student[3]     #Object at index 3.  Remember index starts at 0
Out[2]: 'Geetha'      
&lt;/pre&gt;

Use ''list[start_index : end_index + 1]'' to retrieve objects from the start_index to end_index 
&lt;pre&gt;
In [3]: student[2:4]     # Objects from index 2 to 3 as List. Note the [ and ]
Out[3]: ['Vijay', 'Geetha']   
&lt;/pre&gt;

Use ''list[:]'' to retrieve objects from the starting of the list to the end of the list. 
The default start value will be the starting index of the list (i.e. 0) and the default end value
will be the length of the list 
&lt;pre&gt;
In [4]: student[:]        # prints the entire list
Out[4]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma', 'Janani']
&lt;/pre&gt;
&lt;pre&gt;
In [5]: student[:5]       # prints the objects from the start of the list upto object at index 4
Out[5]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran']
&lt;/pre&gt;
&lt;pre&gt;
In [6]: student[2:]       # prints the objects from index 2 upto the end of the list
Out[6]: ['Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma', 'Janani']
&lt;/pre&gt;

Negative index too is available in Python. It starts from last element of the list. i.e.
&lt;pre&gt;
In [7]:student[-1]        #prints last index of list
Out[7]: 'Janani'
&lt;/pre&gt;
&lt;pre&gt;
In [8]:student[-1:-8]     #prints empty list
Out[8]: []
&lt;/pre&gt;
&lt;pre&gt;
In [9]:student[-8:-1]     #prints -8th index to -1st index elements
Out[9]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma']
&lt;/pre&gt;

[[#Top]]

===Removing Item from list ===
----

Is used to remove a specific item from the list.

'''Example:'''
 
Use list.remove(entry/value)  Or   del list[index]    Or list.pop(index)
&lt;pre&gt;
student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
student.remove(&quot;Arun&quot;)   #This will delete item &quot;Arun&quot;
         Or    
del student[0]           # This will delete item at index 0
         Or
student.pop(0)         # This will delete and return item at index 0
print(student)    
Output: &quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
&lt;/pre&gt;

[[#Top]]

===Delete list ===
----
Used to delete complete list

'''Example'''

Use del &lt;list name&gt;
&lt;pre&gt;
student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
del student&lt;/pre&gt;

===Concatenation of two lists===
----
''+'' is the concatenation operator which is used concatenate two lists. 
&lt;pre&gt;
ages1 = [11,23,12,23,45]
ages2 = [25, 24, 43, 47]
age=ages1+ages2
print(age)
#Output: [11, 23, 12, 23, 45, 25, 24, 43, 47]
&lt;/pre&gt;

===Repeatation of a list ===
----
''*'' is the operator to repeat a particular list.
&lt;pre&gt;
ages1 = [11,23,12,23,45]
age=ages1*5 #ages1 list is repeated 5 times and stroed in ''age'' list
print(age)

#Output: [11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45]
&lt;/pre&gt;

=== all and any for List===
all() and any() are special functions to check whether all elements in iterable is ''True'' or any element is ''True''
&lt;ol&gt;
&lt;li&gt;If all elements in a list are ''True'', ''all()'' will return ''True''&lt;/li&gt;
&lt;li&gt;If iterable is ''empty'', ''all()'' will return ''True''&lt;/li&gt;
&lt;li&gt;If iterable contains at least one ''True'', ''any()'' will return ''True''&lt;/li&gt;
&lt;li&gt;If iterable is ''empty'', ''any()'' will return ''False''&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;
lsit=[True, True, True, True]
print(all(lsit))#Output: True
print(any(lsit))#Output: True

lsit1=[True, False, True, True]
print(all(lsit1))#Output: False
print(any(lsit1))#Output: True

lsit2=[False,False,False]
print(all(lsit2))#Output: False
print(any(lsit2))#Output: False

lsit3=[]
print(all(lsit3))#Output: True
print(any(lsit3))#Output: False
&lt;/pre&gt;

==Conditional Statements==
Conditionals are used to check the condition and change the flow of the program 
accordingly. They are realized in programming languages through if statement. The 
syntax is as follows :
&lt;pre&gt;
         if condition : 
            statement
&lt;/pre&gt;
    '''Note:''' Do not forget indentation (inserting space/tab) in the line after the
 if condition.
    
    In case you want to execute a set of statements when a condition is true and another

set of statement when the condition is false.
&lt;pre&gt;
         if condition : 
            statement 1
         else :
            statement 2
&lt;/pre&gt;

&lt;pre&gt;    
    Multiple if-else statements can be written as follows:
         if condition_1 : 
            statement 1
         elif condition_2 : # 'elif' is short for 'else if'
            statement 2
         elif condition_3 :
            statement 3
        .
        .
         else :
            final statement
&lt;/pre&gt;

[[#Top]]

=Loops and Conditionals : Fizzbuzz=
====Loops====
Loops are used to execute a set of repetitive statements. They are realised
through 'while' and 'for' loops in programming languages. The syntax of 'for' loop is 
as follows :
&lt;pre&gt;
for LOOPVARIABLE in SEQUENCE: 
            STATEMENTS&lt;/pre&gt;

    '''e.g.''' to print all the data from a list we can write:
&lt;pre&gt;
for item in list_name:
      print(item)&lt;/pre&gt;
    OR
&lt;pre&gt;
for index in range(len(list_name)):
      print(list_name[index])
 &lt;/pre&gt;   
    The syntax for while loop is as follows :
&lt;pre&gt;    
while BOOLEANEXPRESSION: 
     STATEMENTS
     INCREMENT/DECREMENT
&lt;/pre&gt;    
    '''e.g.''' if we want to print all numbers from 1 to 10
&lt;pre&gt;
i=1
while i&lt;=10 :
    print(i,&quot; &quot;)
    i=i+1
    &lt;/pre&gt;
 
'while' loop has indefinite iteration (run-time unknown). So, there must be loop,  break statement in it.
 Whereas 'for' loop is definite in nature (i.e. known or predictable span).&lt;br&gt;

&lt;b&gt;NOTE: Python doesn't have anything like do-while loop.&lt;/b&gt;

[[#Top]]

==Implementation==
Here, we try to demonstrate the concept of loops and conditionals through a game called Fizzbuzz. The rules are as follows :&lt;br/&gt;
[[File:fizzBuzz.gif]]

• if input number is a multiple of ’3’ print ”Fizz”
&lt;br/&gt;
• if input number is a multiple of ’5’ print ”Buzz”
&lt;br/&gt;
• if input number is a multiple of both '3' and ’5’ print ”FizzBuzz”
&lt;br/&gt;
The pseudo code is as follows :
&lt;pre&gt;
   If input no % 3 == 0 and  input no % 5 == 0 : 
       print ”Fizzbuzz”
   else if input no % 3 == 0 : 
       print ”Fizz”
   else if input no % 5 == 0 : 
       print ”Buzz”
   else :
       print the input no
&lt;/pre&gt;
 &lt;p style=&quot;text-align:justify&quot;&gt;
The order of statements execution matters to get the desired output. The highest priority condition should be first followed by other. In fizzbuzz programming, first checking should be done for both divisibility of 3 and 5. If condition not satisfied only then it should check individually for 3 or 5. So carefully choosing the order is crucial for better programming.
Note: There is some effect of present condition statements chosen on next conditions statements. That is why in first attempt fizzbuzz programming got struck.&lt;/p&gt;

Example: 
&lt;pre&gt;
#Code to achieve the above requirement in python3.
i = int(input(&quot;Enter the number&quot;)) 
if i%3 == 0 and i%5 == 0: print(i,&quot;FizzBuzz&quot;)  
elif i%5 == 0: print(i,&quot;Buzz&quot;)
elif i%3 == 0: print(i,&quot;Fizz&quot;)
else: print(i)
&lt;/pre&gt;
Lets put the same into a loop for a range given by the user.
&lt;pre&gt;
def fizzbuzzgame(start,stop):
    for i in range(start,stop+1):
        if i%3 == 0 and i%5 == 0:
            print(i,&quot;FizzBuzz&quot;)
        elif i%5 == 0:
            print(i,&quot;Buzz&quot;)
        elif i%3 == 0:
            print(i,&quot;Fizz&quot;)
        else: print(i)

fizzbuzzgame(50,100)
&lt;/pre&gt;
&lt;pre&gt;
#Output:
1235
Buzz
======================================
555
Fizzbuzz
======================================
1235
Buzz
======================================
999
Fizz
&lt;/pre&gt;

[[#Top]]

=== Fizz Buzz game in Interactive mode with Score ===
'''By Ms. Ami Tusharkant Choksi'''
&lt;pre&gt;
def fizzbuzzgame(i):
        if i%3 == 0 and i%5 == 0:
            print(i,&quot;FizzBuzz&quot;)
            return(&quot;fzbz&quot;)
        elif i%5 == 0:
            print(i,&quot;Buzz&quot;)
            return(&quot;bz&quot;)
        elif i%3 == 0:
            print(i,&quot;Fizz&quot;)
            return(&quot;fz&quot;)
        else:
            print(i)
            return(&quot;no&quot;)

ch = 'y'
fizzbuzz=0
fizz=0
buzz=0
nothing=0
print(&quot;&quot;&quot;

 /$$$$$$$$/$$                  /$$$$$$$                            
| $$_____|__/                 | $$__  $$                           
| $$      /$$/$$$$$$$$/$$$$$$$| $$  \ $$/$$   /$$/$$$$$$$$/$$$$$$$$
| $$$$$  | $|____ /$$|____ /$$| $$$$$$$| $$  | $|____ /$$|____ /$$/
| $$__/  | $$  /$$$$/   /$$$$/| $$__  $| $$  | $$  /$$$$/   /$$$$/ 
| $$     | $$ /$$__/   /$$__/ | $$  \ $| $$  | $$ /$$__/   /$$__/  
| $$     | $$/$$$$$$$$/$$$$$$$| $$$$$$$|  $$$$$$//$$$$$$$$/$$$$$$$$
|__/     |__|________|________|_______/ \______/|________|________/
                                                                  
&quot;&quot;&quot;)   
print('''

  /$$$$$$                                
 /$$__  $$                               
| $$  \__/ /$$$$$$ /$$$$$$/$$$$  /$$$$$$ 
| $$ /$$$$|____  $| $$_  $$_  $$/$$__  $$
| $$|_  $$ /$$$$$$| $$ \ $$ \ $| $$$$$$$$
| $$  \ $$/$$__  $| $$ | $$ | $| $$_____/
|  $$$$$$|  $$$$$$| $$ | $$ | $|  $$$$$$$
 \______/ \_______|__/ |__/ |__/\_______/
                                     
''')

while(ch == 'y'):
    n=int(input(&quot;Enter a Number : &quot;))
    winLoose=fizzbuzzgame(n)
    if(winLoose == &quot;fz&quot;):
        fizz+=1
    elif(winLoose == &quot;bz&quot;):
        buzz+=1
    elif(winLoose == &quot;fzbz&quot;):
        fizzbuzz+=1
    ch=input(&quot;Do you want to continue playing the game : (y/n)&quot;)
    if(ch=='n'):
        print('Congratulations, your score is\n FizzBuzz:%d\nFizz:%d\nBuzz:%d' %
(fizzbuzz,fizz,buzz))
    
'''Sample Output:

 /$$$$$$$$/$$                  /$$$$$$$                            
| $$_____|__/                 | $$__  $$                           
| $$      /$$/$$$$$$$$/$$$$$$$| $$  \ $$/$$   /$$/$$$$$$$$/$$$$$$$$
| $$$$$  | $|____ /$$|____ /$$| $$$$$$$| $$  | $|____ /$$|____ /$$/
| $$__/  | $$  /$$$$/   /$$$$/| $$__  $| $$  | $$  /$$$$/   /$$$$/ 
| $$     | $$ /$$__/   /$$__/ | $$  \ $| $$  | $$ /$$__/   /$$__/  
| $$     | $$/$$$$$$$$/$$$$$$$| $$$$$$$|  $$$$$$//$$$$$$$$/$$$$$$$$
|__/     |__|________|________|_______/ \______/|________|________/
                                                                                                                                   

  /$$$$$$                                
 /$$__  $$                               
| $$  \__/ /$$$$$$ /$$$$$$/$$$$  /$$$$$$ 
| $$ /$$$$|____  $| $$_  $$_  $$/$$__  $$
| $$|_  $$ /$$$$$$| $$ \ $$ \ $| $$$$$$$$
| $$  \ $$/$$__  $| $$ | $$ | $| $$_____/
|  $$$$$$|  $$$$$$| $$ | $$ | $|  $$$$$$$
 \______/ \_______|__/ |__/ |__/\_______/
                                         

Enter a Number : 666
666 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 777
777 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 555
555 FizzBuzz
Do you want to continue playing the game : (y/n)y
Enter a Number : 1
1
Do you want to continue playing the game : (y/n)y
Enter a Number : 789
789 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 25
25 Buzz
Do you want to continue playing the game : (y/n)n
Congratulations, your score is

FizzBuzz:1
Fizz:3
Buzz:1

&lt;/pre&gt;

[[#Top]]

=Crowd Computing: Just Estimate=
==Wisdom of Crowds==
 &lt;p style=&quot;text-align:justify&quot;&gt;
The concept of ’Wisdom of Crowds’ was proposed by Francis Galton. A weight-judging competition was carried on at the annual show of the West of England Fat Stock and Poultry Exhibition recently held at Plymouth, A fat ox having been selected, competitors bought stamped and numbered cards, each, on which to inscribe their respective names, addresses, and estimates of what the ox would weigh after it had been slaughtered. Those who guessed most successfully received prizes. About 8oo tickets were issued to the par- ticipants. The middlemost estimate of all the estimates recorded was 1207 lbs and the actual weight of the ox was 1198 lbs.&lt;/p&gt;

==Our Experiment==
 &lt;p style=&quot;text-align:justify&quot;&gt;
The crowd had to guess the number of candies/gems in a jar. Around 75 people participated in the experiment. The actual number of gems in the jar were 375. The median of all estimates came out to be 300 and the mean of all the estimates came out to be around 396. Median underestimated and mean overestimated the actual value. So according to recent studies, Trimmed mean must be used as an aggregate measure to estimate where Wisdom of Crowds is involved.
&lt;/p&gt;
[[File:Gemsjar.jpg|center|200px|caption]]

===Trimmed Mean===
 &lt;p style=&quot;text-align:justify&quot;&gt;
In these kinds of experiments, 10% trimmed mean is usually followed. For calculating 10% trimmed mean, remove 10% smallest and 10% largest values from the sample. Calculate the mean of the sample obtained. In the above experiment, the trimmed mean came out to be around 351 which is very close to the actual value.&lt;/p&gt;

==Implementation==
Here, we try to demonstrate the concept of trimmed mean through crowd computing.
&lt;ol&gt;
&lt;li&gt; Input a list of estimates done by the crowd .&lt;/li&gt;
&lt;li&gt; Sort the list.&lt;/li&gt;
&lt;li&gt; Remove the 10% smallest values.&lt;/li&gt;
&lt;li&gt; Remove the 10% largest values.
&lt;li&gt; Calculate the mean of the new list obtained .&lt;/li&gt;&lt;/ol&gt;&lt;hr&gt;

==Data of Experiment==       
    Estimates =[1000,1010,1786,2000,1500,1500,100,120,150,150,150,170,175,180,197,200,200,200,200,200,200,220,220,220,220,234,250,250,250,250,250,250,250,250,250,263,270,275,275,286,300,
                300,300,300,300,300,300,300,320,350,350,350,400, 400,400,400,400,450,467,500,500,500,500,500,500,500,550,550,600,600,600,650,700,700,720]

    '''CODE:'''
&lt;pre&gt;
Estimates = [1000,1010,1786,2000,1500,1500,100,120,150,150,150,170,175,180,197,200,200,200,200,200,200,220,220,220,220,234,250,250,250,250,250,250,250,250,250,263,270,275,275,286,300,                300,300,300,300,300,300,300,320,350,350,350,400,400,400,400,400,450,467,500,500,500,500,500,500,500,550,550,600,600,600,650,700,700,720]
Estimates.sort()
offset = int(0.10*len(Estimates))
for i in range(offset):
       del Estimates[0]
       del Estimates[-1]
Sum = 0    
for i in range(len(Estimates)):
       Sum += Estimates[i]
Mean_Value = Sum/len(Estimates)
print(&quot;Mean : &quot;, int(Mean_Value))
#Output:
Mean :  351
&lt;/pre&gt;
&lt;hr&gt;
==Trimmed Mean for the above example== 
&lt;h3&gt;Using scipy library&lt;/h3&gt;
&lt;pre&gt;
#import scipy to use the method of trim_mean
from scipy import stats
trimMean = stats.trim_mean(Estimates, 0.1) # Trim 10% at both ends
print(&quot;Trimmed Mean : &quot;,trimMean)
#Output:
Trimmed Mean :  335.1020408163265
&lt;/pre&gt;

&lt;h3&gt;Without using scipy library&lt;/h3&gt;
&lt;pre&gt;
#Trimmed mean with 10%
p=10/100
#sorted data
data=[2, 4, 6, 7, 11, 21, 81, 90, 105, 121]
n = len(data)
#Remove elements from both end
rem=int(n*p)
newData = data[rem:-rem]
mean = 0
for i in newData:
    mean += i
mean = int(mean/len(newData))
print(&quot;Trimmed mean : &quot;,mean)
#Output: Trimmed mean :  40
&lt;/pre&gt;
[[#Top]]

=Jumbled_Words Permutations: Jumbled Words=
==What are Permutations ?==
A permutation also called ordering of selected number of elements from a list denoted by nPr here we are choosing all elements of a list and so n=r&lt;br&gt;
nPr=n!/(n-r)!&lt;br&gt; as n=r
nPn=n!&lt;br&gt; which gives all possible arrangement of elements present in a list.

 For example, permutations of list [1,2,3] are [1,2,3], [1,3,2], [2,1,3], [2,3,1], 
[3,1,2], and [3,2,1]. 
The number of permutations of a list of elements nPn is given by n!. For example, there are 2! = 2 x 1 = 2 permutations of [1,2], namely [1,2] and [2,1], and 3! = 3 x 2 x 1 = 6 permutations of [1,2,3], as mentioned above.&lt;br/&gt;
[[File:Permutations.jpg]]

==Implementation==
 &lt;p style=&quot;text-align:justify&quot;&gt;
Here, we try to demonstrate the concept of permutations through jumbled words. It is a two player game in which one person presents the other person a different permutation of the word in his mind. The other person has to guess the right word. If he guesses, the he wins otherwise he loses.&lt;/p&gt;
 Input an list of words.
 Randomly pick a word from the list of words .
 Shuffle this word and present it to the other player.
 if word guesses by the player is same as the one picked from list of w
     player wins
 else
     player loses

ALTERNATE CODE TO GENERATE THIS GAME:
&lt;pre&gt;
import random
p1=input(&quot;enter player 1 name:&quot;)
p2=input(&quot;enter player 2 name:&quot;)
l=[&quot;rainbow&quot;,&quot;computer&quot;,&quot;robot&quot;,&quot;butter&quot;,&quot;vegetable&quot;,&quot;science&quot;,&quot;correct&quot;]
c1=c2=a1=a2=f1=f2=0
k=1
i=3
def play():
    n=random.choice(l)        ##n=chooses a word from list l
    l1=[]
    for j in n:
       l1.append(j)      ##creates a list for word in n
    for t in range(len(l1)):
       p=random.choice(l1)     ##this randomly displays letters in the list
       print(p)
       l1.remove(p)          ##to avoid the repetition of a letter
    s=input(&quot;enter the word:&quot;)
    if(s==n):
        print(&quot;correct&quot;)
        return 1
    else:
        print(&quot;not correct&quot;)
        print(&quot;answer is&quot;,n)
        return 0
def stat():
     print(&quot;player 1:&quot;)
     print(&quot;score:&quot;,c1)
     print(&quot;answered:&quot;,a1)
     print(&quot;failed:&quot;,f1)
     print(&quot;.............&quot;)
     print(&quot;player 2:&quot;)
     print(&quot;score:&quot;,c2)
     print(&quot;answered:&quot;,a2)
     print(&quot;failed&quot;,f2)
     if(c1&gt;c2):
         print(p1,&quot; won over &quot;,p2)
     elif(c1==c2):
         print(&quot;draw game&quot;)
     else:
         print(p2,&quot; won over &quot;,p1) 
while(i!=4):
      if(i==3):
         if(k==1):
             print(&quot;player 1 turn&quot;)
             print(&quot;your jumbled word is:&quot;)
             k=k+1
             m=play()
             if(m==1):      ##if guessed answer is correct,then score and no.of answered count will be increased
                c1+=1
                a1+=1
             else:
                f1+=1       ##else count of no.of failed to answered will be incremented
         else:
             print(&quot;player 2 turn&quot;)
             print(&quot;your jumbled word is:&quot;)
             k=k-1
             m=play()
             if(m==1):
                c2=c2+1
                a2=a2+1
             else:
                f2=f2+1
       if(i==2):
             print(&quot;present status&quot;)
             stat()
       i=int(input(&quot;enter your choice  1.stop 2.status 3.continue&quot;))
       if(i==1):
             stat()
             i=i+3
&lt;/pre&gt;
&lt;hr&gt;
=== JumbledWord Simple Logic, In Short ===
[[File:jumbledWord.gif]]
---
&lt;hr&gt;
'''Logic to create a Jumbled Word'''
&lt;hr&gt;
&lt;pre&gt;
#Get Jumbled Word and print it Horizontally
import random

def getJumbledWord(b):
    jumble=''
    l1 = [ b[i] for i in range(0, len(b)) ]
    for t in range(len(l1)):
       p=random.choice(l1)  #this randomly gets letters from the list      
       jumble=jumble+p       
       l1.remove(p)
    return jumble

b=input(&quot;Enter a word to make it jumbled : &quot;)
print(&quot;Jumbled Word : &quot;, getJumbledWord(b))
&lt;/pre&gt;
&lt;pre&gt;
Output:
Enter a word to make it jumbled : live and let live others
Jumbled Word :  vel  toldeisrte aihv len
==========================================
Enter a word to make it jumbled : junkfood
Jumbled Word :  nfukdooj
&lt;/pre&gt;
&lt;hr&gt;
'''Another Logic to create a Jumbled Word'''
&lt;hr&gt;
&lt;pre&gt;
import random
b=input(&quot;Enter a word to make it jumbled : &quot;)

def getJumbledWord1(b):
    l1 = [ b[i] for i in range(0, len(b)) ]
    random.shuffle(l1)
    str1 = ''.join(l1)
    return str1

print(&quot;Jumbled Word : &quot;, getJumbledWord1(b))
&lt;/pre&gt;

====Sample Output:====
&lt;pre&gt;
---- Output1 
Enter a word to make it jumbled : butter
Jumbled Word :  tbture

---- Output2 
Enter a word to make it jumbled : petriotism
Jumbled Word :  pittrosime
&lt;/pre&gt;

=Theory of Evolution=

== What is Evolution ? ==
Evolution is the change in heritable characteristics over successive generations. The theory of evolution explains that DNA, which acts as a carrier of genetic information from one generation to other, tends to change or mutate occasionally. These changes are reflected in next generations to come. This is how life has evolved on earth from bacteria to human beings.&lt;br&gt;
[[File:Evolution.png|500px]]

== Implementation ==
 &lt;p style=&quot;text-align:justify&quot;&gt;
An array representing DNA is stored in a file. As genes are forms of DNA, they contain information to be transferred to forthcoming generations. Assume that information is in the form of bits (in the form of 0s and 1s). A number is picked randomly from 1 to the size of the array. A new parameter has been introduced which decides whether mutation would occur or not. If the value of this new parameter is 1 (It is picked randomly from 1 to 100), then only change is reflected down the generations, otherwise it is not. The pseudo code is as follows :
&lt;/p&gt;
Input an array containing genetic information .
Randomly generate a number (say m) from 1 to length of the array. Randomly generate other number (say p) from 1 to 100.

&lt;pre&gt; 
    if p is equal to 1 then 
        if m is 1 then
          set it to 0
        else
          set it to 1
&lt;/pre&gt;
[[#TOP]]</text>
      <sha1>n1v1xj9aw72bt6m9hea78r4euu3sbzv</sha1>
    </revision>
    <revision>
      <id>3765</id>
      <parentid>3764</parentid>
      <timestamp>2018-09-29T04:16:59Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* Implementation */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="30777">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_3 Contributors of this page]
*Week 3 Playlist: https://www.youtube.com/playlist?list=PLc_j0TNIaWxOVx_z9jAM2UB3RqYNXaoEo
=List=
List is a flexible data structure used for storing a group of data separated by comma. The elements in a list need not be of the same data type.

'''Example:'''
       List_1 = [ 1, 2,3] or 
       List_1 = [&quot;coffee&quot;, &quot;Tea&quot;, &quot;Milk&quot;] or
       List_1 = [1,&quot;coffee&quot;, &quot;Tea&quot;, 3, &quot;5&quot;]

==List Creation==
a) A list can be created by simply putting values (separated by comma) between square
 brackets as given below,
&lt;pre&gt;List_1 = [1,&quot;coffee&quot;, &quot;Tea&quot;, 3, &quot;5&quot;] #this creates a list by name List_1 containing
 following items
&lt;/pre&gt;


Or,
(b)A List can be created from scratch and elements can be added 
&lt;pre&gt;
        List_2 = [ ]
        List_2.append(&quot;Kala&quot;)
        List_2.append(&quot;Mala&quot;)
&lt;/pre&gt;
Here we use &quot;append&quot;, which is a function in python that enable us to append or attach an element to a list .
&lt;pre&gt;Thus List_2 will now hold [&quot;Kala&quot;,&quot;Mala&quot;]&lt;/pre&gt;

[[#Top]]

==Operations and Methods to work with List==
&lt;pre&gt;
a = [25,30,50,90,12,13]
b = [100,300,500,200,250]
&lt;/pre&gt;
&lt;hr&gt;
&lt;table border=2&gt;
  &lt;tr&gt;
    &lt;th&gt;&lt;b&gt;Method/&lt;br&gt;Operator&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Function&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Syntax&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Output&lt;/b&gt;&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;len()&lt;/td&gt;
    &lt;td&gt;Find length of a list&lt;/td&gt;
    &lt;td&gt;len(a)&lt;/td&gt;
    &lt;td&gt;6&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;max()&lt;/td&gt;
    &lt;td&gt;Find maximum element from the list&lt;/td&gt;
    &lt;td&gt;max(a)&lt;/td&gt;
    &lt;td&gt;90&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;min()&lt;/td&gt;
    &lt;td&gt;Find minimum element from the list&lt;/td&gt;
    &lt;td&gt;min(a)&lt;/td&gt;
    &lt;td&gt;12&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sum()&lt;/td&gt;
    &lt;td&gt;Returns sum of all elements of the list&lt;/td&gt;
    &lt;td&gt;sum(a)&lt;/td&gt;
    &lt;td&gt;220&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;reverse()&lt;/td&gt;
    &lt;td&gt;Reverses the original list&lt;/td&gt;
    &lt;td&gt;a.reverse()&lt;/td&gt;
    &lt;td&gt;[13, 12, 90, 50, 30, 25]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sort()&lt;/td&gt;
    &lt;td&gt;Sorts the original list in ascending order&lt;/td&gt;
    &lt;td&gt;a.sort()&lt;/td&gt;
    &lt;td&gt;[12, 13, 25, 30, 50, 90]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sorted()&lt;/td&gt;
    &lt;td&gt;Returns the new sorted list &lt;/td&gt;
    &lt;td&gt;sorted(a)&lt;/td&gt;
    &lt;td&gt;[12, 13, 25, 30, 50, 90]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;insert()&lt;/td&gt;
    &lt;td&gt;Insert at a particular index in the list, and shifts remaining elements&lt;/td&gt;
    &lt;td&gt;a.insert(3,3)&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 3, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;append()&lt;/td&gt;
    &lt;td&gt;Adds elements/object to the end of the list&lt;/td&gt;
    &lt;td&gt;a.append(5)&lt;br&gt;a.append([10,20])&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 5]&lt;br&gt;[25, 30, 50, 90, 12, 13, [10, 20]]&lt;br&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;extend()&lt;/td&gt;
    &lt;td&gt;Adds object to the end of the list as elements not as object&lt;/td&gt;
    &lt;td&gt;a.extend([10,20])&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 10, 20]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;*&amp;nbsp;&amp;nbsp;Repeatation&lt;br&gt;operator&lt;/td&gt;
    &lt;td&gt;Repeat the list for n times and returns a new list&lt;/td&gt;
    &lt;td&gt;a*2&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 25, 30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;+ Concatenation&lt;br&gt;operator&lt;/td&gt;
    &lt;td&gt;Concatenates two lists, and returns a new list&lt;/td&gt;
    &lt;td&gt;a+b&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 100, 300, 500, 200, 250]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;index()&lt;/td&gt;
    &lt;td&gt;Finds index of a particular element in the list or not&lt;/td&gt;
    &lt;td&gt;a.index(25)&lt;br&gt;a.index(0)&lt;br&gt;&lt;/td&gt;
    &lt;td&gt;0&lt;br&gt;&lt;br&gt;ValueError: 0 is not in list&lt;br&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;in operator&lt;/td&gt;
    &lt;td&gt;Finds whether a particular element is in the list or not, returns boolean&lt;/td&gt;
    &lt;td&gt;25 in a&lt;/td&gt;
    &lt;td&gt;True&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;not in operator&lt;/td&gt;
    &lt;td&gt;Checks if element is not available in list, returns boolean&lt;/td&gt;
    &lt;td&gt;25 not in a&lt;/td&gt;
    &lt;td&gt;False&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;count()&lt;/td&gt;
    &lt;td&gt;Counts the number of occurence of an element in the list&lt;/td&gt;
    &lt;td&gt;a.count(25)&lt;/td&gt;
    &lt;td&gt;1&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;remove()&lt;/td&gt;
    &lt;td&gt;Removes an element from the list&lt;/td&gt;
    &lt;td&gt;a.remove(25)&lt;/td&gt;
    &lt;td&gt; [30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;pop()&lt;/td&gt;
    &lt;td&gt;Delete and return item at index 0&lt;/td&gt;
    &lt;td&gt;a.pop(0)&lt;/td&gt;
    &lt;td&gt;25 , a will be [30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;del&lt;/td&gt;
    &lt;td&gt;Deletes item at a particular index from the list&lt;/td&gt;
    &lt;td&gt;del a[0]&lt;/td&gt;
    &lt;td&gt;[30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;all()&lt;/td&gt;
&lt;td&gt;Returns True, if all items in list are True or it is an empty list&lt;/td&gt;
&lt;td&gt;all([True, True, True])
all([])
&lt;/td&gt;
&lt;td&gt;True&lt;br&gt;
True&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;any()&lt;/td&gt;
&lt;td&gt;Returns True, if any item in list is True else return False&lt;/td&gt;
&lt;td&gt;any([True, True, True])&lt;br&gt;
any([True, False, True])&lt;br&gt;
any([])&lt;/td&gt;
&lt;td&gt;True&lt;br&gt;False&lt;br&gt;False&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;

==Printing the List==
=== Print whole list ===
A list can be printed simply or using a ''for / while'' loop 

 print(List_2)     # To print the entire list
This code will print      
 ['Kala','Mala']     

===Print element at a particular index===
&lt;pre&gt;
Using index position
    List_2[0]     # prints 'Kala' ,i.e,the value at index position 0.
    List_2[1]     # prints 'Mala'.
&lt;/pre&gt;
=== Without using index position ===
&lt;pre&gt;
for item in List_2:   # here item is a variable used to access elements in list.
       print(item)
   This code snippet prints 
    Kala
    Mala
&lt;/pre&gt;
[[#Top]]

==Search for a particular element in list==
Elements in a list can be searched by one of the two ways:
=== using index() function===
&lt;pre&gt;
ages1 = [11,23,12,23,45]

#if element is available in the list, index() returns the index value on which, the element is
 present.
print(ages1.index(45))#Output: 4

#if element is not available in the list, index() returns ''ValueError''
print(ages1.index(0))#Output: ValueError:
&lt;/pre&gt;

In programming, if such error occurs, program gets terminated. It can be solved using exception handling.
 
e.g.
&lt;pre&gt;
ages1 = [11,23,12,23,45]

try:
    print(ages1.index(0))
except ValueError:
    print(&quot;Exception has occured&quot;)    
    print(&quot;Element is not found in the list&quot;)

&lt;/pre&gt;
&lt;pre&gt;
'''Output: 
Exception has occured
Element is not found in the list
'''&lt;/pre&gt;
[[#Top]]

=== using 'in' operator===
''in'' operator is used to check whether a particular element is available in the list or not.e.g.

&lt;pre&gt;
ages1 = [11,23,12,23,45]
no=11

if no in ages1:
    print(&quot;no is there in the list&quot;)
else:    
    print(&quot;no is NOT there in the list&quot;)
&lt;/pre&gt;
&lt;pre&gt;
#Output: no is there in the list
&lt;/pre&gt;


'''Number is not there in the list'''
&lt;pre&gt;
ages1 = [11,23,12,23,45]
no=15

if no in ages1:
    print(&quot;no is there in the list&quot;)
else:    
    print(&quot;no is NOT there in the list&quot;)
&lt;/pre&gt;
&lt;pre&gt;
Output: no is NOT there in the list
&lt;/pre&gt;
[[#Top]]

==Updating the List==
The lists can be updated using ''append'' or ''insert'' function.  Append adds the element to the end of the list and Insert adds the element in the specified position.
&lt;pre&gt;
   # add the element 'Sheela' to the end of the list.
   List_2.append(&quot;Sheela&quot;)    
   print (List_2) will output 
   ['Kala', 'Mala', 'Sheela']
&lt;/pre&gt;
   &lt;pre&gt;
# add the element &quot;Bala&quot; in the list at the index 1.
   List_2.insert(1,&quot;Bala&quot;)    
   print (List_2) will output 
   ['Kala', 'Bala','Mala', 'Sheela']
&lt;/pre&gt;

=== Extend the list by adding elements of other list at end using extend()===
&lt;pre&gt;
ages = [11,23,12,23,45]
ages.extend([57,58])
print(ages)
&lt;/pre&gt;

&lt;pre&gt;
#Output: [11, 23, 12, 23, 45, 57, 58]
&lt;/pre&gt;

==== Difference between ''append() and extend()'' ====
Difference between ''append()'' and ''extend()'' can be easily understood, by the following example.

&lt;pre&gt;
appendlist = [11,23,12,23,45]
appendlist.append([57,58])

extendlist= [11,23,12,23,45]
extendlist.extend([57,58])
&lt;/pre&gt;

&lt;pre&gt;
'''Output:
[11, 23, 12, 23, 45, [57, 58]]
[11, 23, 12, 23, 45, 57, 58]'''
&lt;/pre&gt;

[[#Top]]

==Basic Operations on List==
===Frequency of Occurrence===
list.count(object) will return the number of times the object occur in the list.
  '''Example'''
    ages = [11,23,12,23,45,43,22,24,23]
    ages.count(23) will return
    3
    ages.count(100) will return
    0

===Length of the List===
''len(list)'' will return the length of the list ie. the number of objects in the list.
  '''Example'''
&lt;pre&gt;
    ages = [11,23,12,23,45,43,22,24,23]
    len(ages) # Output: 9
&lt;/pre&gt;

To print the objects in the list either use ''for item in list'' or ''for index in range(len(list))''
&lt;pre&gt;
    for item in ages:       
        print (item)  
        (OR)
    for index in range(len(ages)) :
        print (ages[index])
&lt;/pre&gt;

===Sort the List===
''list.sort()'' will sort the list in ascending order
  '''Example'''
    ages = [11,23,12,23,45,43,22,24,23]
    ages.sort() 
    print (ages) 
    [11, 12, 22, 23, 23, 23, 24, 43, 45]

[[#Top]]

===Sort the List using sorted() function===
''sorted(list1)'' will sort the list and return a new list, it doesn't modify the original list
&lt;br&gt;'''Example: Sort in ascending order'''
&lt;pre&gt;
ages = [11,23,12,23,45,43,22,24,23]
newList=sorted(ages)
print(newList)

#Output: [11, 12, 22, 23, 23, 23, 24, 43, 45]
&lt;/pre&gt;

&lt;br&gt;'''Example: Sort in descending order'''
&lt;pre&gt;
ages = [11,23,12,23,45,43,22,24,23]
newList=sorted(ages,reverse=True)
print(newList)

#Output: [45, 43, 24, 23, 23, 23, 22, 12, 11]
&lt;/pre&gt;

===Reverse the List===
''list.reverse()'' will reverse the original list
  '''Example'''
    ages = [11, 12, 22, 23, 23, 23, 24, 43, 45]
    ages.reverse()
    print (ages)
    [45, 43, 24, 23, 23, 23, 22, 12, 11]

Both ''sort()'' and ''reverse()'' list operation will work on numeric and alphanumeric data list.

A special use of the ''reverse()'' function is to descend a list that is sorted in ascending order.

  '''Example'''
&lt;pre&gt;
ages = [11, 12, 22, 23, 23, 23, 24, 43, 45]
ages.sort()
print(ages)
ages.reverse()
print(ages)
&lt;/pre&gt;

[[#Top]]

===Slicing===
Used to retrieve an object or objects in a range as a list  
  '''Example'''

Use ''list[index]'' to retrieve the object at the given index
&lt;pre&gt;
In [1]: student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
In [2]: student[3]     #Object at index 3.  Remember index starts at 0
Out[2]: 'Geetha'      
&lt;/pre&gt;

Use ''list[start_index : end_index + 1]'' to retrieve objects from the start_index to end_index 
&lt;pre&gt;
In [3]: student[2:4]     # Objects from index 2 to 3 as List. Note the [ and ]
Out[3]: ['Vijay', 'Geetha']   
&lt;/pre&gt;

Use ''list[:]'' to retrieve objects from the starting of the list to the end of the list. 
The default start value will be the starting index of the list (i.e. 0) and the default end value
will be the length of the list 
&lt;pre&gt;
In [4]: student[:]        # prints the entire list
Out[4]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma', 'Janani']
&lt;/pre&gt;
&lt;pre&gt;
In [5]: student[:5]       # prints the objects from the start of the list upto object at index 4
Out[5]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran']
&lt;/pre&gt;
&lt;pre&gt;
In [6]: student[2:]       # prints the objects from index 2 upto the end of the list
Out[6]: ['Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma', 'Janani']
&lt;/pre&gt;

Negative index too is available in Python. It starts from last element of the list. i.e.
&lt;pre&gt;
In [7]:student[-1]        #prints last index of list
Out[7]: 'Janani'
&lt;/pre&gt;
&lt;pre&gt;
In [8]:student[-1:-8]     #prints empty list
Out[8]: []
&lt;/pre&gt;
&lt;pre&gt;
In [9]:student[-8:-1]     #prints -8th index to -1st index elements
Out[9]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma']
&lt;/pre&gt;

[[#Top]]

===Removing Item from list ===
----

Is used to remove a specific item from the list.

'''Example:'''
 
Use list.remove(entry/value)  Or   del list[index]    Or list.pop(index)
&lt;pre&gt;
student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
student.remove(&quot;Arun&quot;)   #This will delete item &quot;Arun&quot;
         Or    
del student[0]           # This will delete item at index 0
         Or
student.pop(0)         # This will delete and return item at index 0
print(student)    
Output: &quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
&lt;/pre&gt;

[[#Top]]

===Delete list ===
----
Used to delete complete list

'''Example'''

Use del &lt;list name&gt;
&lt;pre&gt;
student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
del student&lt;/pre&gt;

===Concatenation of two lists===
----
''+'' is the concatenation operator which is used concatenate two lists. 
&lt;pre&gt;
ages1 = [11,23,12,23,45]
ages2 = [25, 24, 43, 47]
age=ages1+ages2
print(age)
#Output: [11, 23, 12, 23, 45, 25, 24, 43, 47]
&lt;/pre&gt;

===Repeatation of a list ===
----
''*'' is the operator to repeat a particular list.
&lt;pre&gt;
ages1 = [11,23,12,23,45]
age=ages1*5 #ages1 list is repeated 5 times and stroed in ''age'' list
print(age)

#Output: [11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45]
&lt;/pre&gt;

=== all and any for List===
all() and any() are special functions to check whether all elements in iterable is ''True'' or any element is ''True''
&lt;ol&gt;
&lt;li&gt;If all elements in a list are ''True'', ''all()'' will return ''True''&lt;/li&gt;
&lt;li&gt;If iterable is ''empty'', ''all()'' will return ''True''&lt;/li&gt;
&lt;li&gt;If iterable contains at least one ''True'', ''any()'' will return ''True''&lt;/li&gt;
&lt;li&gt;If iterable is ''empty'', ''any()'' will return ''False''&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;
lsit=[True, True, True, True]
print(all(lsit))#Output: True
print(any(lsit))#Output: True

lsit1=[True, False, True, True]
print(all(lsit1))#Output: False
print(any(lsit1))#Output: True

lsit2=[False,False,False]
print(all(lsit2))#Output: False
print(any(lsit2))#Output: False

lsit3=[]
print(all(lsit3))#Output: True
print(any(lsit3))#Output: False
&lt;/pre&gt;

==Conditional Statements==
Conditionals are used to check the condition and change the flow of the program 
accordingly. They are realized in programming languages through if statement. The 
syntax is as follows :
&lt;pre&gt;
         if condition : 
            statement
&lt;/pre&gt;
    '''Note:''' Do not forget indentation (inserting space/tab) in the line after the
 if condition.
    
    In case you want to execute a set of statements when a condition is true and another

set of statement when the condition is false.
&lt;pre&gt;
         if condition : 
            statement 1
         else :
            statement 2
&lt;/pre&gt;

&lt;pre&gt;    
    Multiple if-else statements can be written as follows:
         if condition_1 : 
            statement 1
         elif condition_2 : # 'elif' is short for 'else if'
            statement 2
         elif condition_3 :
            statement 3
        .
        .
         else :
            final statement
&lt;/pre&gt;

[[#Top]]

=Loops and Conditionals : Fizzbuzz=
====Loops====
Loops are used to execute a set of repetitive statements. They are realised
through 'while' and 'for' loops in programming languages. The syntax of 'for' loop is 
as follows :
&lt;pre&gt;
for LOOPVARIABLE in SEQUENCE: 
            STATEMENTS&lt;/pre&gt;

    '''e.g.''' to print all the data from a list we can write:
&lt;pre&gt;
for item in list_name:
      print(item)&lt;/pre&gt;
    OR
&lt;pre&gt;
for index in range(len(list_name)):
      print(list_name[index])
 &lt;/pre&gt;   
    The syntax for while loop is as follows :
&lt;pre&gt;    
while BOOLEANEXPRESSION: 
     STATEMENTS
     INCREMENT/DECREMENT
&lt;/pre&gt;    
    '''e.g.''' if we want to print all numbers from 1 to 10
&lt;pre&gt;
i=1
while i&lt;=10 :
    print(i,&quot; &quot;)
    i=i+1
    &lt;/pre&gt;
 
'while' loop has indefinite iteration (run-time unknown). So, there must be loop,  break statement in it.
 Whereas 'for' loop is definite in nature (i.e. known or predictable span).&lt;br&gt;

&lt;b&gt;NOTE: Python doesn't have anything like do-while loop.&lt;/b&gt;

[[#Top]]

==Implementation==
Here, we try to demonstrate the concept of loops and conditionals through a game called Fizzbuzz. The rules are as follows :&lt;br/&gt;
[[File:fizzBuzz.gif]]

• if input number is a multiple of ’3’ print ”Fizz”
&lt;br/&gt;
• if input number is a multiple of ’5’ print ”Buzz”
&lt;br/&gt;
• if input number is a multiple of both '3' and ’5’ print ”FizzBuzz”
&lt;br/&gt;
The pseudo code is as follows :
&lt;pre&gt;
   If input no % 3 == 0 and  input no % 5 == 0 : 
       print ”Fizzbuzz”
   else if input no % 3 == 0 : 
       print ”Fizz”
   else if input no % 5 == 0 : 
       print ”Buzz”
   else :
       print the input no
&lt;/pre&gt;
 &lt;p style=&quot;text-align:justify&quot;&gt;
The order of statements execution matters to get the desired output. The highest priority condition should be first followed by other. In fizzbuzz programming, first checking should be done for both divisibility of 3 and 5. If condition not satisfied only then it should check individually for 3 or 5. So carefully choosing the order is crucial for better programming.
Note: There is some effect of present condition statements chosen on next conditions statements. That is why in first attempt fizzbuzz programming got struck.&lt;/p&gt;

Example: 
&lt;pre&gt;
#Code to achieve the above requirement in python3.
i = int(input(&quot;Enter the number&quot;)) 
if i%3 == 0 and i%5 == 0: print(i,&quot;FizzBuzz&quot;)  
elif i%5 == 0: print(i,&quot;Buzz&quot;)
elif i%3 == 0: print(i,&quot;Fizz&quot;)
else: print(i)
&lt;/pre&gt;
Lets put the same into a loop for a range given by the user.
&lt;pre&gt;
def fizzbuzzgame(start,stop):
    for i in range(start,stop+1):
        if i%3 == 0 and i%5 == 0:
            print(i,&quot;FizzBuzz&quot;)
        elif i%5 == 0:
            print(i,&quot;Buzz&quot;)
        elif i%3 == 0:
            print(i,&quot;Fizz&quot;)
        else: print(i)

fizzbuzzgame(50,100)
&lt;/pre&gt;
&lt;pre&gt;
#Output:
1235
Buzz
======================================
555
Fizzbuzz
======================================
1235
Buzz
======================================
999
Fizz
&lt;/pre&gt;

[[#Top]]

=== Fizz Buzz game in Interactive mode with Score ===
'''By Ms. Ami Tusharkant Choksi'''
&lt;pre&gt;
def fizzbuzzgame(i):
        if i%3 == 0 and i%5 == 0:
            print(i,&quot;FizzBuzz&quot;)
            return(&quot;fzbz&quot;)
        elif i%5 == 0:
            print(i,&quot;Buzz&quot;)
            return(&quot;bz&quot;)
        elif i%3 == 0:
            print(i,&quot;Fizz&quot;)
            return(&quot;fz&quot;)
        else:
            print(i)
            return(&quot;no&quot;)

ch = 'y'
fizzbuzz=0
fizz=0
buzz=0
nothing=0
print(&quot;&quot;&quot;

 /$$$$$$$$/$$                  /$$$$$$$                            
| $$_____|__/                 | $$__  $$                           
| $$      /$$/$$$$$$$$/$$$$$$$| $$  \ $$/$$   /$$/$$$$$$$$/$$$$$$$$
| $$$$$  | $|____ /$$|____ /$$| $$$$$$$| $$  | $|____ /$$|____ /$$/
| $$__/  | $$  /$$$$/   /$$$$/| $$__  $| $$  | $$  /$$$$/   /$$$$/ 
| $$     | $$ /$$__/   /$$__/ | $$  \ $| $$  | $$ /$$__/   /$$__/  
| $$     | $$/$$$$$$$$/$$$$$$$| $$$$$$$|  $$$$$$//$$$$$$$$/$$$$$$$$
|__/     |__|________|________|_______/ \______/|________|________/
                                                                  
&quot;&quot;&quot;)   
print('''

  /$$$$$$                                
 /$$__  $$                               
| $$  \__/ /$$$$$$ /$$$$$$/$$$$  /$$$$$$ 
| $$ /$$$$|____  $| $$_  $$_  $$/$$__  $$
| $$|_  $$ /$$$$$$| $$ \ $$ \ $| $$$$$$$$
| $$  \ $$/$$__  $| $$ | $$ | $| $$_____/
|  $$$$$$|  $$$$$$| $$ | $$ | $|  $$$$$$$
 \______/ \_______|__/ |__/ |__/\_______/
                                     
''')

while(ch == 'y'):
    n=int(input(&quot;Enter a Number : &quot;))
    winLoose=fizzbuzzgame(n)
    if(winLoose == &quot;fz&quot;):
        fizz+=1
    elif(winLoose == &quot;bz&quot;):
        buzz+=1
    elif(winLoose == &quot;fzbz&quot;):
        fizzbuzz+=1
    ch=input(&quot;Do you want to continue playing the game : (y/n)&quot;)
    if(ch=='n'):
        print('Congratulations, your score is\n FizzBuzz:%d\nFizz:%d\nBuzz:%d' %
(fizzbuzz,fizz,buzz))
    
'''Sample Output:

 /$$$$$$$$/$$                  /$$$$$$$                            
| $$_____|__/                 | $$__  $$                           
| $$      /$$/$$$$$$$$/$$$$$$$| $$  \ $$/$$   /$$/$$$$$$$$/$$$$$$$$
| $$$$$  | $|____ /$$|____ /$$| $$$$$$$| $$  | $|____ /$$|____ /$$/
| $$__/  | $$  /$$$$/   /$$$$/| $$__  $| $$  | $$  /$$$$/   /$$$$/ 
| $$     | $$ /$$__/   /$$__/ | $$  \ $| $$  | $$ /$$__/   /$$__/  
| $$     | $$/$$$$$$$$/$$$$$$$| $$$$$$$|  $$$$$$//$$$$$$$$/$$$$$$$$
|__/     |__|________|________|_______/ \______/|________|________/
                                                                                                                                   

  /$$$$$$                                
 /$$__  $$                               
| $$  \__/ /$$$$$$ /$$$$$$/$$$$  /$$$$$$ 
| $$ /$$$$|____  $| $$_  $$_  $$/$$__  $$
| $$|_  $$ /$$$$$$| $$ \ $$ \ $| $$$$$$$$
| $$  \ $$/$$__  $| $$ | $$ | $| $$_____/
|  $$$$$$|  $$$$$$| $$ | $$ | $|  $$$$$$$
 \______/ \_______|__/ |__/ |__/\_______/
                                         

Enter a Number : 666
666 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 777
777 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 555
555 FizzBuzz
Do you want to continue playing the game : (y/n)y
Enter a Number : 1
1
Do you want to continue playing the game : (y/n)y
Enter a Number : 789
789 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 25
25 Buzz
Do you want to continue playing the game : (y/n)n
Congratulations, your score is

FizzBuzz:1
Fizz:3
Buzz:1

&lt;/pre&gt;

[[#Top]]

=Crowd Computing: Just Estimate=
==Wisdom of Crowds==
 &lt;p style=&quot;text-align:justify&quot;&gt;
The concept of ’Wisdom of Crowds’ was proposed by Francis Galton. A weight-judging competition was carried on at the annual show of the West of England Fat Stock and Poultry Exhibition recently held at Plymouth, A fat ox having been selected, competitors bought stamped and numbered cards, each, on which to inscribe their respective names, addresses, and estimates of what the ox would weigh after it had been slaughtered. Those who guessed most successfully received prizes. About 8oo tickets were issued to the par- ticipants. The middlemost estimate of all the estimates recorded was 1207 lbs and the actual weight of the ox was 1198 lbs.&lt;/p&gt;

==Our Experiment==
 &lt;p style=&quot;text-align:justify&quot;&gt;
The crowd had to guess the number of candies/gems in a jar. Around 75 people participated in the experiment. The actual number of gems in the jar were 375. The median of all estimates came out to be 300 and the mean of all the estimates came out to be around 396. Median underestimated and mean overestimated the actual value. So according to recent studies, Trimmed mean must be used as an aggregate measure to estimate where Wisdom of Crowds is involved.
&lt;/p&gt;
[[File:Gemsjar.jpg|center|200px|caption]]

===Trimmed Mean===
 &lt;p style=&quot;text-align:justify&quot;&gt;
In these kinds of experiments, 10% trimmed mean is usually followed. For calculating 10% trimmed mean, remove 10% smallest and 10% largest values from the sample. Calculate the mean of the sample obtained. In the above experiment, the trimmed mean came out to be around 351 which is very close to the actual value.&lt;/p&gt;

==Implementation==
Here, we try to demonstrate the concept of trimmed mean through crowd computing.
&lt;ol&gt;
&lt;li&gt; Input a list of estimates done by the crowd .&lt;/li&gt;
&lt;li&gt; Sort the list.&lt;/li&gt;
&lt;li&gt; Remove the 10% smallest values.&lt;/li&gt;
&lt;li&gt; Remove the 10% largest values.
&lt;li&gt; Calculate the mean of the new list obtained .&lt;/li&gt;&lt;/ol&gt;&lt;hr&gt;

==Data of Experiment==       
    Estimates =[1000,1010,1786,2000,1500,1500,100,120,150,150,150,170,175,180,197,200,200,200,200,200,200,220,220,220,220,234,250,250,250,250,250,250,250,250,250,263,270,275,275,286,300,
                300,300,300,300,300,300,300,320,350,350,350,400, 400,400,400,400,450,467,500,500,500,500,500,500,500,550,550,600,600,600,650,700,700,720]

    '''CODE:'''
&lt;pre&gt;
Estimates = [1000,1010,1786,2000,1500,1500,100,120,150,150,150,170,175,180,197,200,200,200,200,200,200,220,220,220,220,234,250,250,250,250,250,250,250,250,250,263,270,275,275,286,300,                300,300,300,300,300,300,300,320,350,350,350,400,400,400,400,400,450,467,500,500,500,500,500,500,500,550,550,600,600,600,650,700,700,720]
Estimates.sort()
offset = int(0.10*len(Estimates))
for i in range(offset):
       del Estimates[0]
       del Estimates[-1]
Sum = 0    
for i in range(len(Estimates)):
       Sum += Estimates[i]
Mean_Value = Sum/len(Estimates)
print(&quot;Mean : &quot;, int(Mean_Value))
#Output:
Mean :  351
&lt;/pre&gt;
&lt;hr&gt;
==Trimmed Mean for the above example== 
&lt;h3&gt;Using scipy library&lt;/h3&gt;
&lt;pre&gt;
#import scipy to use the method of trim_mean
from scipy import stats
trimMean = stats.trim_mean(Estimates, 0.1) # Trim 10% at both ends
print(&quot;Trimmed Mean : &quot;,trimMean)
#Output:
Trimmed Mean :  335.1020408163265
&lt;/pre&gt;

&lt;h3&gt;Without using scipy library&lt;/h3&gt;
&lt;pre&gt;
#Trimmed mean with 10%
p=10/100
#sorted data
data=[2, 4, 6, 7, 11, 21, 81, 90, 105, 121]
n = len(data)
#Remove elements from both end
rem=int(n*p)
newData = data[rem:-rem]
mean = 0
for i in newData:
    mean += i
mean = int(mean/len(newData))
print(&quot;Trimmed mean : &quot;,mean)
#Output: Trimmed mean :  40
&lt;/pre&gt;
[[#Top]]

=Jumbled_Words Permutations: Jumbled Words=
==What are Permutations ?==
A permutation also called ordering of selected number of elements from a list denoted by nPr here we are choosing all elements of a list and so n=r&lt;br&gt;
nPr=n!/(n-r)!&lt;br&gt; as n=r
nPn=n!&lt;br&gt; which gives all possible arrangement of elements present in a list.

 For example, permutations of list [1,2,3] are [1,2,3], [1,3,2], [2,1,3], [2,3,1], 
[3,1,2], and [3,2,1]. 
The number of permutations of a list of elements nPn is given by n!. For example, there are 2! = 2 x 1 = 2 permutations of [1,2], namely [1,2] and [2,1], and 3! = 3 x 2 x 1 = 6 permutations of [1,2,3], as mentioned above.&lt;br/&gt;
[[File:Permutations.jpg]]

==Implementation==
 &lt;p style=&quot;text-align:justify&quot;&gt;
Here, we try to demonstrate the concept of permutations through jumbled words. It is a two player game in which one person presents the other person a different permutation of the word in his mind. The other person has to guess the right word. If he guesses, the he wins otherwise he loses.&lt;/p&gt;
 Input an list of words.
 Randomly pick a word from the list of words .
 Shuffle this word and present it to the other player.
 if word guesses by the player is same as the one picked from list of w
     player wins
 else
     player loses

ALTERNATE CODE TO GENERATE THIS GAME:
&lt;pre&gt;
import random
p1=input(&quot;enter player 1 name:&quot;)
p2=input(&quot;enter player 2 name:&quot;)
l=[&quot;rainbow&quot;,&quot;computer&quot;,&quot;robot&quot;,&quot;butter&quot;,&quot;vegetable&quot;,&quot;science&quot;,&quot;correct&quot;]
c1=c2=a1=a2=f1=f2=0
k=1
i=3
def play():
    n=random.choice(l)        ##n=chooses a word from list l
    l1=[]
    for j in n:
       l1.append(j)      ##creates a list for word in n
    for t in range(len(l1)):
       p=random.choice(l1)     ##this randomly displays letters in the list
       print(p)
       l1.remove(p)          ##to avoid the repetition of a letter
    s=input(&quot;enter the word:&quot;)
    if(s==n):
        print(&quot;correct&quot;)
        return 1
    else:
        print(&quot;not correct&quot;)
        print(&quot;answer is&quot;,n)
        return 0
def stat():
     print(&quot;player 1:&quot;)
     print(&quot;score:&quot;,c1)
     print(&quot;answered:&quot;,a1)
     print(&quot;failed:&quot;,f1)
     print(&quot;.............&quot;)
     print(&quot;player 2:&quot;)
     print(&quot;score:&quot;,c2)
     print(&quot;answered:&quot;,a2)
     print(&quot;failed&quot;,f2)
     if(c1&gt;c2):
         print(p1,&quot; won over &quot;,p2)
     elif(c1==c2):
         print(&quot;draw game&quot;)
     else:
         print(p2,&quot; won over &quot;,p1) 
while(i!=4):
      if(i==3):
         if(k==1):
             print(&quot;player 1 turn&quot;)
             print(&quot;your jumbled word is:&quot;)
             k=k+1
             m=play()
             if(m==1):      ##if guessed answer is correct,then score and no.of answered count will be increased
                c1+=1
                a1+=1
             else:
                f1+=1       ##else count of no.of failed to answered will be incremented
         else:
             print(&quot;player 2 turn&quot;)
             print(&quot;your jumbled word is:&quot;)
             k=k-1
             m=play()
             if(m==1):
                c2=c2+1
                a2=a2+1
             else:
                f2=f2+1
       if(i==2):
             print(&quot;present status&quot;)
             stat()
       i=int(input(&quot;enter your choice  1.stop 2.status 3.continue&quot;))
       if(i==1):
             stat()
             i=i+3
&lt;/pre&gt;
&lt;hr&gt;

[[#Top]]

=== JumbledWord Simple Logic, In Short ===
[[File:jumbledWord.gif]]
---
&lt;hr&gt;
'''Logic to create a Jumbled Word'''
&lt;hr&gt;
&lt;pre&gt;
#Get Jumbled Word and print it Horizontally
import random

def getJumbledWord(b):
    jumble=''
    l1 = [ b[i] for i in range(0, len(b)) ]
    for t in range(len(l1)):
       p=random.choice(l1)  #this randomly gets letters from the list      
       jumble=jumble+p       
       l1.remove(p)
    return jumble

b=input(&quot;Enter a word to make it jumbled : &quot;)
print(&quot;Jumbled Word : &quot;, getJumbledWord(b))
&lt;/pre&gt;
&lt;pre&gt;
Output:
Enter a word to make it jumbled : live and let live others
Jumbled Word :  vel  toldeisrte aihv len
==========================================
Enter a word to make it jumbled : junkfood
Jumbled Word :  nfukdooj
&lt;/pre&gt;
&lt;hr&gt;
'''Another Logic to create a Jumbled Word'''
&lt;hr&gt;
&lt;pre&gt;
import random
b=input(&quot;Enter a word to make it jumbled : &quot;)

def getJumbledWord1(b):
    l1 = [ b[i] for i in range(0, len(b)) ]
    random.shuffle(l1)
    str1 = ''.join(l1)
    return str1

print(&quot;Jumbled Word : &quot;, getJumbledWord1(b))
&lt;/pre&gt;

====Sample Output:====
&lt;pre&gt;
---- Output1 
Enter a word to make it jumbled : butter
Jumbled Word :  tbture

---- Output2 
Enter a word to make it jumbled : petriotism
Jumbled Word :  pittrosime
&lt;/pre&gt;

=Theory of Evolution=

== What is Evolution ? ==
Evolution is the change in heritable characteristics over successive generations. The theory of evolution explains that DNA, which acts as a carrier of genetic information from one generation to other, tends to change or mutate occasionally. These changes are reflected in next generations to come. This is how life has evolved on earth from bacteria to human beings.&lt;br&gt;
[[File:Evolution.png|500px]]

== Implementation ==
 &lt;p style=&quot;text-align:justify&quot;&gt;
An array representing DNA is stored in a file. As genes are forms of DNA, they contain information to be transferred to forthcoming generations. Assume that information is in the form of bits (in the form of 0s and 1s). A number is picked randomly from 1 to the size of the array. A new parameter has been introduced which decides whether mutation would occur or not. If the value of this new parameter is 1 (It is picked randomly from 1 to 100), then only change is reflected down the generations, otherwise it is not. The pseudo code is as follows :
&lt;/p&gt;
Input an array containing genetic information .
Randomly generate a number (say m) from 1 to length of the array. Randomly generate other number (say p) from 1 to 100.

&lt;pre&gt; 
    if p is equal to 1 then 
        if m is 1 then
          set it to 0
        else
          set it to 1
&lt;/pre&gt;
[[#TOP]]</text>
      <sha1>1g814d0afwuyyz3tcfsqlnh8arwdqnv</sha1>
    </revision>
    <revision>
      <id>3766</id>
      <parentid>3765</parentid>
      <timestamp>2018-09-29T04:18:28Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* Wisdom of Crowds */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="30781">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_3 Contributors of this page]
*Week 3 Playlist: https://www.youtube.com/playlist?list=PLc_j0TNIaWxOVx_z9jAM2UB3RqYNXaoEo
=List=
List is a flexible data structure used for storing a group of data separated by comma. The elements in a list need not be of the same data type.

'''Example:'''
       List_1 = [ 1, 2,3] or 
       List_1 = [&quot;coffee&quot;, &quot;Tea&quot;, &quot;Milk&quot;] or
       List_1 = [1,&quot;coffee&quot;, &quot;Tea&quot;, 3, &quot;5&quot;]

==List Creation==
a) A list can be created by simply putting values (separated by comma) between square
 brackets as given below,
&lt;pre&gt;List_1 = [1,&quot;coffee&quot;, &quot;Tea&quot;, 3, &quot;5&quot;] #this creates a list by name List_1 containing
 following items
&lt;/pre&gt;


Or,
(b)A List can be created from scratch and elements can be added 
&lt;pre&gt;
        List_2 = [ ]
        List_2.append(&quot;Kala&quot;)
        List_2.append(&quot;Mala&quot;)
&lt;/pre&gt;
Here we use &quot;append&quot;, which is a function in python that enable us to append or attach an element to a list .
&lt;pre&gt;Thus List_2 will now hold [&quot;Kala&quot;,&quot;Mala&quot;]&lt;/pre&gt;

[[#Top]]

==Operations and Methods to work with List==
&lt;pre&gt;
a = [25,30,50,90,12,13]
b = [100,300,500,200,250]
&lt;/pre&gt;
&lt;hr&gt;
&lt;table border=2&gt;
  &lt;tr&gt;
    &lt;th&gt;&lt;b&gt;Method/&lt;br&gt;Operator&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Function&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Syntax&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Output&lt;/b&gt;&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;len()&lt;/td&gt;
    &lt;td&gt;Find length of a list&lt;/td&gt;
    &lt;td&gt;len(a)&lt;/td&gt;
    &lt;td&gt;6&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;max()&lt;/td&gt;
    &lt;td&gt;Find maximum element from the list&lt;/td&gt;
    &lt;td&gt;max(a)&lt;/td&gt;
    &lt;td&gt;90&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;min()&lt;/td&gt;
    &lt;td&gt;Find minimum element from the list&lt;/td&gt;
    &lt;td&gt;min(a)&lt;/td&gt;
    &lt;td&gt;12&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sum()&lt;/td&gt;
    &lt;td&gt;Returns sum of all elements of the list&lt;/td&gt;
    &lt;td&gt;sum(a)&lt;/td&gt;
    &lt;td&gt;220&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;reverse()&lt;/td&gt;
    &lt;td&gt;Reverses the original list&lt;/td&gt;
    &lt;td&gt;a.reverse()&lt;/td&gt;
    &lt;td&gt;[13, 12, 90, 50, 30, 25]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sort()&lt;/td&gt;
    &lt;td&gt;Sorts the original list in ascending order&lt;/td&gt;
    &lt;td&gt;a.sort()&lt;/td&gt;
    &lt;td&gt;[12, 13, 25, 30, 50, 90]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sorted()&lt;/td&gt;
    &lt;td&gt;Returns the new sorted list &lt;/td&gt;
    &lt;td&gt;sorted(a)&lt;/td&gt;
    &lt;td&gt;[12, 13, 25, 30, 50, 90]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;insert()&lt;/td&gt;
    &lt;td&gt;Insert at a particular index in the list, and shifts remaining elements&lt;/td&gt;
    &lt;td&gt;a.insert(3,3)&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 3, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;append()&lt;/td&gt;
    &lt;td&gt;Adds elements/object to the end of the list&lt;/td&gt;
    &lt;td&gt;a.append(5)&lt;br&gt;a.append([10,20])&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 5]&lt;br&gt;[25, 30, 50, 90, 12, 13, [10, 20]]&lt;br&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;extend()&lt;/td&gt;
    &lt;td&gt;Adds object to the end of the list as elements not as object&lt;/td&gt;
    &lt;td&gt;a.extend([10,20])&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 10, 20]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;*&amp;nbsp;&amp;nbsp;Repeatation&lt;br&gt;operator&lt;/td&gt;
    &lt;td&gt;Repeat the list for n times and returns a new list&lt;/td&gt;
    &lt;td&gt;a*2&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 25, 30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;+ Concatenation&lt;br&gt;operator&lt;/td&gt;
    &lt;td&gt;Concatenates two lists, and returns a new list&lt;/td&gt;
    &lt;td&gt;a+b&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 100, 300, 500, 200, 250]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;index()&lt;/td&gt;
    &lt;td&gt;Finds index of a particular element in the list or not&lt;/td&gt;
    &lt;td&gt;a.index(25)&lt;br&gt;a.index(0)&lt;br&gt;&lt;/td&gt;
    &lt;td&gt;0&lt;br&gt;&lt;br&gt;ValueError: 0 is not in list&lt;br&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;in operator&lt;/td&gt;
    &lt;td&gt;Finds whether a particular element is in the list or not, returns boolean&lt;/td&gt;
    &lt;td&gt;25 in a&lt;/td&gt;
    &lt;td&gt;True&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;not in operator&lt;/td&gt;
    &lt;td&gt;Checks if element is not available in list, returns boolean&lt;/td&gt;
    &lt;td&gt;25 not in a&lt;/td&gt;
    &lt;td&gt;False&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;count()&lt;/td&gt;
    &lt;td&gt;Counts the number of occurence of an element in the list&lt;/td&gt;
    &lt;td&gt;a.count(25)&lt;/td&gt;
    &lt;td&gt;1&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;remove()&lt;/td&gt;
    &lt;td&gt;Removes an element from the list&lt;/td&gt;
    &lt;td&gt;a.remove(25)&lt;/td&gt;
    &lt;td&gt; [30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;pop()&lt;/td&gt;
    &lt;td&gt;Delete and return item at index 0&lt;/td&gt;
    &lt;td&gt;a.pop(0)&lt;/td&gt;
    &lt;td&gt;25 , a will be [30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;del&lt;/td&gt;
    &lt;td&gt;Deletes item at a particular index from the list&lt;/td&gt;
    &lt;td&gt;del a[0]&lt;/td&gt;
    &lt;td&gt;[30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;all()&lt;/td&gt;
&lt;td&gt;Returns True, if all items in list are True or it is an empty list&lt;/td&gt;
&lt;td&gt;all([True, True, True])
all([])
&lt;/td&gt;
&lt;td&gt;True&lt;br&gt;
True&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;any()&lt;/td&gt;
&lt;td&gt;Returns True, if any item in list is True else return False&lt;/td&gt;
&lt;td&gt;any([True, True, True])&lt;br&gt;
any([True, False, True])&lt;br&gt;
any([])&lt;/td&gt;
&lt;td&gt;True&lt;br&gt;False&lt;br&gt;False&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;

==Printing the List==
=== Print whole list ===
A list can be printed simply or using a ''for / while'' loop 

 print(List_2)     # To print the entire list
This code will print      
 ['Kala','Mala']     

===Print element at a particular index===
&lt;pre&gt;
Using index position
    List_2[0]     # prints 'Kala' ,i.e,the value at index position 0.
    List_2[1]     # prints 'Mala'.
&lt;/pre&gt;
=== Without using index position ===
&lt;pre&gt;
for item in List_2:   # here item is a variable used to access elements in list.
       print(item)
   This code snippet prints 
    Kala
    Mala
&lt;/pre&gt;
[[#Top]]

==Search for a particular element in list==
Elements in a list can be searched by one of the two ways:
=== using index() function===
&lt;pre&gt;
ages1 = [11,23,12,23,45]

#if element is available in the list, index() returns the index value on which, the element is
 present.
print(ages1.index(45))#Output: 4

#if element is not available in the list, index() returns ''ValueError''
print(ages1.index(0))#Output: ValueError:
&lt;/pre&gt;

In programming, if such error occurs, program gets terminated. It can be solved using exception handling.
 
e.g.
&lt;pre&gt;
ages1 = [11,23,12,23,45]

try:
    print(ages1.index(0))
except ValueError:
    print(&quot;Exception has occured&quot;)    
    print(&quot;Element is not found in the list&quot;)

&lt;/pre&gt;
&lt;pre&gt;
'''Output: 
Exception has occured
Element is not found in the list
'''&lt;/pre&gt;
[[#Top]]

=== using 'in' operator===
''in'' operator is used to check whether a particular element is available in the list or not.e.g.

&lt;pre&gt;
ages1 = [11,23,12,23,45]
no=11

if no in ages1:
    print(&quot;no is there in the list&quot;)
else:    
    print(&quot;no is NOT there in the list&quot;)
&lt;/pre&gt;
&lt;pre&gt;
#Output: no is there in the list
&lt;/pre&gt;


'''Number is not there in the list'''
&lt;pre&gt;
ages1 = [11,23,12,23,45]
no=15

if no in ages1:
    print(&quot;no is there in the list&quot;)
else:    
    print(&quot;no is NOT there in the list&quot;)
&lt;/pre&gt;
&lt;pre&gt;
Output: no is NOT there in the list
&lt;/pre&gt;
[[#Top]]

==Updating the List==
The lists can be updated using ''append'' or ''insert'' function.  Append adds the element to the end of the list and Insert adds the element in the specified position.
&lt;pre&gt;
   # add the element 'Sheela' to the end of the list.
   List_2.append(&quot;Sheela&quot;)    
   print (List_2) will output 
   ['Kala', 'Mala', 'Sheela']
&lt;/pre&gt;
   &lt;pre&gt;
# add the element &quot;Bala&quot; in the list at the index 1.
   List_2.insert(1,&quot;Bala&quot;)    
   print (List_2) will output 
   ['Kala', 'Bala','Mala', 'Sheela']
&lt;/pre&gt;

=== Extend the list by adding elements of other list at end using extend()===
&lt;pre&gt;
ages = [11,23,12,23,45]
ages.extend([57,58])
print(ages)
&lt;/pre&gt;

&lt;pre&gt;
#Output: [11, 23, 12, 23, 45, 57, 58]
&lt;/pre&gt;

==== Difference between ''append() and extend()'' ====
Difference between ''append()'' and ''extend()'' can be easily understood, by the following example.

&lt;pre&gt;
appendlist = [11,23,12,23,45]
appendlist.append([57,58])

extendlist= [11,23,12,23,45]
extendlist.extend([57,58])
&lt;/pre&gt;

&lt;pre&gt;
'''Output:
[11, 23, 12, 23, 45, [57, 58]]
[11, 23, 12, 23, 45, 57, 58]'''
&lt;/pre&gt;

[[#Top]]

==Basic Operations on List==
===Frequency of Occurrence===
list.count(object) will return the number of times the object occur in the list.
  '''Example'''
    ages = [11,23,12,23,45,43,22,24,23]
    ages.count(23) will return
    3
    ages.count(100) will return
    0

===Length of the List===
''len(list)'' will return the length of the list ie. the number of objects in the list.
  '''Example'''
&lt;pre&gt;
    ages = [11,23,12,23,45,43,22,24,23]
    len(ages) # Output: 9
&lt;/pre&gt;

To print the objects in the list either use ''for item in list'' or ''for index in range(len(list))''
&lt;pre&gt;
    for item in ages:       
        print (item)  
        (OR)
    for index in range(len(ages)) :
        print (ages[index])
&lt;/pre&gt;

===Sort the List===
''list.sort()'' will sort the list in ascending order
  '''Example'''
    ages = [11,23,12,23,45,43,22,24,23]
    ages.sort() 
    print (ages) 
    [11, 12, 22, 23, 23, 23, 24, 43, 45]

[[#Top]]

===Sort the List using sorted() function===
''sorted(list1)'' will sort the list and return a new list, it doesn't modify the original list
&lt;br&gt;'''Example: Sort in ascending order'''
&lt;pre&gt;
ages = [11,23,12,23,45,43,22,24,23]
newList=sorted(ages)
print(newList)

#Output: [11, 12, 22, 23, 23, 23, 24, 43, 45]
&lt;/pre&gt;

&lt;br&gt;'''Example: Sort in descending order'''
&lt;pre&gt;
ages = [11,23,12,23,45,43,22,24,23]
newList=sorted(ages,reverse=True)
print(newList)

#Output: [45, 43, 24, 23, 23, 23, 22, 12, 11]
&lt;/pre&gt;

===Reverse the List===
''list.reverse()'' will reverse the original list
  '''Example'''
    ages = [11, 12, 22, 23, 23, 23, 24, 43, 45]
    ages.reverse()
    print (ages)
    [45, 43, 24, 23, 23, 23, 22, 12, 11]

Both ''sort()'' and ''reverse()'' list operation will work on numeric and alphanumeric data list.

A special use of the ''reverse()'' function is to descend a list that is sorted in ascending order.

  '''Example'''
&lt;pre&gt;
ages = [11, 12, 22, 23, 23, 23, 24, 43, 45]
ages.sort()
print(ages)
ages.reverse()
print(ages)
&lt;/pre&gt;

[[#Top]]

===Slicing===
Used to retrieve an object or objects in a range as a list  
  '''Example'''

Use ''list[index]'' to retrieve the object at the given index
&lt;pre&gt;
In [1]: student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
In [2]: student[3]     #Object at index 3.  Remember index starts at 0
Out[2]: 'Geetha'      
&lt;/pre&gt;

Use ''list[start_index : end_index + 1]'' to retrieve objects from the start_index to end_index 
&lt;pre&gt;
In [3]: student[2:4]     # Objects from index 2 to 3 as List. Note the [ and ]
Out[3]: ['Vijay', 'Geetha']   
&lt;/pre&gt;

Use ''list[:]'' to retrieve objects from the starting of the list to the end of the list. 
The default start value will be the starting index of the list (i.e. 0) and the default end value
will be the length of the list 
&lt;pre&gt;
In [4]: student[:]        # prints the entire list
Out[4]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma', 'Janani']
&lt;/pre&gt;
&lt;pre&gt;
In [5]: student[:5]       # prints the objects from the start of the list upto object at index 4
Out[5]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran']
&lt;/pre&gt;
&lt;pre&gt;
In [6]: student[2:]       # prints the objects from index 2 upto the end of the list
Out[6]: ['Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma', 'Janani']
&lt;/pre&gt;

Negative index too is available in Python. It starts from last element of the list. i.e.
&lt;pre&gt;
In [7]:student[-1]        #prints last index of list
Out[7]: 'Janani'
&lt;/pre&gt;
&lt;pre&gt;
In [8]:student[-1:-8]     #prints empty list
Out[8]: []
&lt;/pre&gt;
&lt;pre&gt;
In [9]:student[-8:-1]     #prints -8th index to -1st index elements
Out[9]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma']
&lt;/pre&gt;

[[#Top]]

===Removing Item from list ===
----

Is used to remove a specific item from the list.

'''Example:'''
 
Use list.remove(entry/value)  Or   del list[index]    Or list.pop(index)
&lt;pre&gt;
student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
student.remove(&quot;Arun&quot;)   #This will delete item &quot;Arun&quot;
         Or    
del student[0]           # This will delete item at index 0
         Or
student.pop(0)         # This will delete and return item at index 0
print(student)    
Output: &quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
&lt;/pre&gt;

[[#Top]]

===Delete list ===
----
Used to delete complete list

'''Example'''

Use del &lt;list name&gt;
&lt;pre&gt;
student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
del student&lt;/pre&gt;

===Concatenation of two lists===
----
''+'' is the concatenation operator which is used concatenate two lists. 
&lt;pre&gt;
ages1 = [11,23,12,23,45]
ages2 = [25, 24, 43, 47]
age=ages1+ages2
print(age)
#Output: [11, 23, 12, 23, 45, 25, 24, 43, 47]
&lt;/pre&gt;

===Repeatation of a list ===
----
''*'' is the operator to repeat a particular list.
&lt;pre&gt;
ages1 = [11,23,12,23,45]
age=ages1*5 #ages1 list is repeated 5 times and stroed in ''age'' list
print(age)

#Output: [11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45]
&lt;/pre&gt;

=== all and any for List===
all() and any() are special functions to check whether all elements in iterable is ''True'' or any element is ''True''
&lt;ol&gt;
&lt;li&gt;If all elements in a list are ''True'', ''all()'' will return ''True''&lt;/li&gt;
&lt;li&gt;If iterable is ''empty'', ''all()'' will return ''True''&lt;/li&gt;
&lt;li&gt;If iterable contains at least one ''True'', ''any()'' will return ''True''&lt;/li&gt;
&lt;li&gt;If iterable is ''empty'', ''any()'' will return ''False''&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;
lsit=[True, True, True, True]
print(all(lsit))#Output: True
print(any(lsit))#Output: True

lsit1=[True, False, True, True]
print(all(lsit1))#Output: False
print(any(lsit1))#Output: True

lsit2=[False,False,False]
print(all(lsit2))#Output: False
print(any(lsit2))#Output: False

lsit3=[]
print(all(lsit3))#Output: True
print(any(lsit3))#Output: False
&lt;/pre&gt;

==Conditional Statements==
Conditionals are used to check the condition and change the flow of the program 
accordingly. They are realized in programming languages through if statement. The 
syntax is as follows :
&lt;pre&gt;
         if condition : 
            statement
&lt;/pre&gt;
    '''Note:''' Do not forget indentation (inserting space/tab) in the line after the
 if condition.
    
    In case you want to execute a set of statements when a condition is true and another

set of statement when the condition is false.
&lt;pre&gt;
         if condition : 
            statement 1
         else :
            statement 2
&lt;/pre&gt;

&lt;pre&gt;    
    Multiple if-else statements can be written as follows:
         if condition_1 : 
            statement 1
         elif condition_2 : # 'elif' is short for 'else if'
            statement 2
         elif condition_3 :
            statement 3
        .
        .
         else :
            final statement
&lt;/pre&gt;

[[#Top]]

=Loops and Conditionals : Fizzbuzz=
====Loops====
Loops are used to execute a set of repetitive statements. They are realised
through 'while' and 'for' loops in programming languages. The syntax of 'for' loop is 
as follows :
&lt;pre&gt;
for LOOPVARIABLE in SEQUENCE: 
            STATEMENTS&lt;/pre&gt;

    '''e.g.''' to print all the data from a list we can write:
&lt;pre&gt;
for item in list_name:
      print(item)&lt;/pre&gt;
    OR
&lt;pre&gt;
for index in range(len(list_name)):
      print(list_name[index])
 &lt;/pre&gt;   
    The syntax for while loop is as follows :
&lt;pre&gt;    
while BOOLEANEXPRESSION: 
     STATEMENTS
     INCREMENT/DECREMENT
&lt;/pre&gt;    
    '''e.g.''' if we want to print all numbers from 1 to 10
&lt;pre&gt;
i=1
while i&lt;=10 :
    print(i,&quot; &quot;)
    i=i+1
    &lt;/pre&gt;
 
'while' loop has indefinite iteration (run-time unknown). So, there must be loop,  break statement in it.
 Whereas 'for' loop is definite in nature (i.e. known or predictable span).&lt;br&gt;

&lt;b&gt;NOTE: Python doesn't have anything like do-while loop.&lt;/b&gt;

[[#Top]]

==Implementation==
Here, we try to demonstrate the concept of loops and conditionals through a game called Fizzbuzz. The rules are as follows :&lt;br/&gt;
[[File:fizzBuzz.gif]]

• if input number is a multiple of ’3’ print ”Fizz”
&lt;br/&gt;
• if input number is a multiple of ’5’ print ”Buzz”
&lt;br/&gt;
• if input number is a multiple of both '3' and ’5’ print ”FizzBuzz”
&lt;br/&gt;
The pseudo code is as follows :
&lt;pre&gt;
   If input no % 3 == 0 and  input no % 5 == 0 : 
       print ”Fizzbuzz”
   else if input no % 3 == 0 : 
       print ”Fizz”
   else if input no % 5 == 0 : 
       print ”Buzz”
   else :
       print the input no
&lt;/pre&gt;
 &lt;p style=&quot;text-align:justify&quot;&gt;
The order of statements execution matters to get the desired output. The highest priority condition should be first followed by other. In fizzbuzz programming, first checking should be done for both divisibility of 3 and 5. If condition not satisfied only then it should check individually for 3 or 5. So carefully choosing the order is crucial for better programming.
Note: There is some effect of present condition statements chosen on next conditions statements. That is why in first attempt fizzbuzz programming got struck.&lt;/p&gt;

Example: 
&lt;pre&gt;
#Code to achieve the above requirement in python3.
i = int(input(&quot;Enter the number&quot;)) 
if i%3 == 0 and i%5 == 0: print(i,&quot;FizzBuzz&quot;)  
elif i%5 == 0: print(i,&quot;Buzz&quot;)
elif i%3 == 0: print(i,&quot;Fizz&quot;)
else: print(i)
&lt;/pre&gt;
Lets put the same into a loop for a range given by the user.
&lt;pre&gt;
def fizzbuzzgame(start,stop):
    for i in range(start,stop+1):
        if i%3 == 0 and i%5 == 0:
            print(i,&quot;FizzBuzz&quot;)
        elif i%5 == 0:
            print(i,&quot;Buzz&quot;)
        elif i%3 == 0:
            print(i,&quot;Fizz&quot;)
        else: print(i)

fizzbuzzgame(50,100)
&lt;/pre&gt;
&lt;pre&gt;
#Output:
1235
Buzz
======================================
555
Fizzbuzz
======================================
1235
Buzz
======================================
999
Fizz
&lt;/pre&gt;

[[#Top]]

=== Fizz Buzz game in Interactive mode with Score ===
'''By Ms. Ami Tusharkant Choksi'''
&lt;pre&gt;
def fizzbuzzgame(i):
        if i%3 == 0 and i%5 == 0:
            print(i,&quot;FizzBuzz&quot;)
            return(&quot;fzbz&quot;)
        elif i%5 == 0:
            print(i,&quot;Buzz&quot;)
            return(&quot;bz&quot;)
        elif i%3 == 0:
            print(i,&quot;Fizz&quot;)
            return(&quot;fz&quot;)
        else:
            print(i)
            return(&quot;no&quot;)

ch = 'y'
fizzbuzz=0
fizz=0
buzz=0
nothing=0
print(&quot;&quot;&quot;

 /$$$$$$$$/$$                  /$$$$$$$                            
| $$_____|__/                 | $$__  $$                           
| $$      /$$/$$$$$$$$/$$$$$$$| $$  \ $$/$$   /$$/$$$$$$$$/$$$$$$$$
| $$$$$  | $|____ /$$|____ /$$| $$$$$$$| $$  | $|____ /$$|____ /$$/
| $$__/  | $$  /$$$$/   /$$$$/| $$__  $| $$  | $$  /$$$$/   /$$$$/ 
| $$     | $$ /$$__/   /$$__/ | $$  \ $| $$  | $$ /$$__/   /$$__/  
| $$     | $$/$$$$$$$$/$$$$$$$| $$$$$$$|  $$$$$$//$$$$$$$$/$$$$$$$$
|__/     |__|________|________|_______/ \______/|________|________/
                                                                  
&quot;&quot;&quot;)   
print('''

  /$$$$$$                                
 /$$__  $$                               
| $$  \__/ /$$$$$$ /$$$$$$/$$$$  /$$$$$$ 
| $$ /$$$$|____  $| $$_  $$_  $$/$$__  $$
| $$|_  $$ /$$$$$$| $$ \ $$ \ $| $$$$$$$$
| $$  \ $$/$$__  $| $$ | $$ | $| $$_____/
|  $$$$$$|  $$$$$$| $$ | $$ | $|  $$$$$$$
 \______/ \_______|__/ |__/ |__/\_______/
                                     
''')

while(ch == 'y'):
    n=int(input(&quot;Enter a Number : &quot;))
    winLoose=fizzbuzzgame(n)
    if(winLoose == &quot;fz&quot;):
        fizz+=1
    elif(winLoose == &quot;bz&quot;):
        buzz+=1
    elif(winLoose == &quot;fzbz&quot;):
        fizzbuzz+=1
    ch=input(&quot;Do you want to continue playing the game : (y/n)&quot;)
    if(ch=='n'):
        print('Congratulations, your score is\n FizzBuzz:%d\nFizz:%d\nBuzz:%d' %
(fizzbuzz,fizz,buzz))
    
'''Sample Output:

 /$$$$$$$$/$$                  /$$$$$$$                            
| $$_____|__/                 | $$__  $$                           
| $$      /$$/$$$$$$$$/$$$$$$$| $$  \ $$/$$   /$$/$$$$$$$$/$$$$$$$$
| $$$$$  | $|____ /$$|____ /$$| $$$$$$$| $$  | $|____ /$$|____ /$$/
| $$__/  | $$  /$$$$/   /$$$$/| $$__  $| $$  | $$  /$$$$/   /$$$$/ 
| $$     | $$ /$$__/   /$$__/ | $$  \ $| $$  | $$ /$$__/   /$$__/  
| $$     | $$/$$$$$$$$/$$$$$$$| $$$$$$$|  $$$$$$//$$$$$$$$/$$$$$$$$
|__/     |__|________|________|_______/ \______/|________|________/
                                                                                                                                   

  /$$$$$$                                
 /$$__  $$                               
| $$  \__/ /$$$$$$ /$$$$$$/$$$$  /$$$$$$ 
| $$ /$$$$|____  $| $$_  $$_  $$/$$__  $$
| $$|_  $$ /$$$$$$| $$ \ $$ \ $| $$$$$$$$
| $$  \ $$/$$__  $| $$ | $$ | $| $$_____/
|  $$$$$$|  $$$$$$| $$ | $$ | $|  $$$$$$$
 \______/ \_______|__/ |__/ |__/\_______/
                                         

Enter a Number : 666
666 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 777
777 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 555
555 FizzBuzz
Do you want to continue playing the game : (y/n)y
Enter a Number : 1
1
Do you want to continue playing the game : (y/n)y
Enter a Number : 789
789 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 25
25 Buzz
Do you want to continue playing the game : (y/n)n
Congratulations, your score is

FizzBuzz:1
Fizz:3
Buzz:1

&lt;/pre&gt;

[[#Top]]

=Crowd Computing: Just Estimate=
==Wisdom of Crowds==
 &lt;p style=&quot;text-align:justify&quot;&gt;
The concept of ’Wisdom of Crowds’ was proposed by ''Francis Galton''. A weight-judging competition was carried on at the annual show of the West of England Fat Stock and Poultry Exhibition recently held at Plymouth, A fat ox having been selected, competitors bought stamped and numbered cards, each, on which to inscribe their respective names, addresses, and estimates of what the ox would weigh after it had been slaughtered. Those who guessed most successfully received prizes. About 8oo tickets were issued to the par- ticipants. The middlemost estimate of all the estimates recorded was 1207 lbs and the actual weight of the ox was 1198 lbs.&lt;/p&gt;

==Our Experiment==
 &lt;p style=&quot;text-align:justify&quot;&gt;
The crowd had to guess the number of candies/gems in a jar. Around 75 people participated in the experiment. The actual number of gems in the jar were 375. The median of all estimates came out to be 300 and the mean of all the estimates came out to be around 396. Median underestimated and mean overestimated the actual value. So according to recent studies, Trimmed mean must be used as an aggregate measure to estimate where Wisdom of Crowds is involved.
&lt;/p&gt;
[[File:Gemsjar.jpg|center|200px|caption]]

===Trimmed Mean===
 &lt;p style=&quot;text-align:justify&quot;&gt;
In these kinds of experiments, 10% trimmed mean is usually followed. For calculating 10% trimmed mean, remove 10% smallest and 10% largest values from the sample. Calculate the mean of the sample obtained. In the above experiment, the trimmed mean came out to be around 351 which is very close to the actual value.&lt;/p&gt;

==Implementation==
Here, we try to demonstrate the concept of trimmed mean through crowd computing.
&lt;ol&gt;
&lt;li&gt; Input a list of estimates done by the crowd .&lt;/li&gt;
&lt;li&gt; Sort the list.&lt;/li&gt;
&lt;li&gt; Remove the 10% smallest values.&lt;/li&gt;
&lt;li&gt; Remove the 10% largest values.
&lt;li&gt; Calculate the mean of the new list obtained .&lt;/li&gt;&lt;/ol&gt;&lt;hr&gt;

==Data of Experiment==       
    Estimates =[1000,1010,1786,2000,1500,1500,100,120,150,150,150,170,175,180,197,200,200,200,200,200,200,220,220,220,220,234,250,250,250,250,250,250,250,250,250,263,270,275,275,286,300,
                300,300,300,300,300,300,300,320,350,350,350,400, 400,400,400,400,450,467,500,500,500,500,500,500,500,550,550,600,600,600,650,700,700,720]

    '''CODE:'''
&lt;pre&gt;
Estimates = [1000,1010,1786,2000,1500,1500,100,120,150,150,150,170,175,180,197,200,200,200,200,200,200,220,220,220,220,234,250,250,250,250,250,250,250,250,250,263,270,275,275,286,300,                300,300,300,300,300,300,300,320,350,350,350,400,400,400,400,400,450,467,500,500,500,500,500,500,500,550,550,600,600,600,650,700,700,720]
Estimates.sort()
offset = int(0.10*len(Estimates))
for i in range(offset):
       del Estimates[0]
       del Estimates[-1]
Sum = 0    
for i in range(len(Estimates)):
       Sum += Estimates[i]
Mean_Value = Sum/len(Estimates)
print(&quot;Mean : &quot;, int(Mean_Value))
#Output:
Mean :  351
&lt;/pre&gt;
&lt;hr&gt;
==Trimmed Mean for the above example== 
&lt;h3&gt;Using scipy library&lt;/h3&gt;
&lt;pre&gt;
#import scipy to use the method of trim_mean
from scipy import stats
trimMean = stats.trim_mean(Estimates, 0.1) # Trim 10% at both ends
print(&quot;Trimmed Mean : &quot;,trimMean)
#Output:
Trimmed Mean :  335.1020408163265
&lt;/pre&gt;

&lt;h3&gt;Without using scipy library&lt;/h3&gt;
&lt;pre&gt;
#Trimmed mean with 10%
p=10/100
#sorted data
data=[2, 4, 6, 7, 11, 21, 81, 90, 105, 121]
n = len(data)
#Remove elements from both end
rem=int(n*p)
newData = data[rem:-rem]
mean = 0
for i in newData:
    mean += i
mean = int(mean/len(newData))
print(&quot;Trimmed mean : &quot;,mean)
#Output: Trimmed mean :  40
&lt;/pre&gt;
[[#Top]]

=Jumbled_Words Permutations: Jumbled Words=
==What are Permutations ?==
A permutation also called ordering of selected number of elements from a list denoted by nPr here we are choosing all elements of a list and so n=r&lt;br&gt;
nPr=n!/(n-r)!&lt;br&gt; as n=r
nPn=n!&lt;br&gt; which gives all possible arrangement of elements present in a list.

 For example, permutations of list [1,2,3] are [1,2,3], [1,3,2], [2,1,3], [2,3,1], 
[3,1,2], and [3,2,1]. 
The number of permutations of a list of elements nPn is given by n!. For example, there are 2! = 2 x 1 = 2 permutations of [1,2], namely [1,2] and [2,1], and 3! = 3 x 2 x 1 = 6 permutations of [1,2,3], as mentioned above.&lt;br/&gt;
[[File:Permutations.jpg]]

==Implementation==
 &lt;p style=&quot;text-align:justify&quot;&gt;
Here, we try to demonstrate the concept of permutations through jumbled words. It is a two player game in which one person presents the other person a different permutation of the word in his mind. The other person has to guess the right word. If he guesses, the he wins otherwise he loses.&lt;/p&gt;
 Input an list of words.
 Randomly pick a word from the list of words .
 Shuffle this word and present it to the other player.
 if word guesses by the player is same as the one picked from list of w
     player wins
 else
     player loses

ALTERNATE CODE TO GENERATE THIS GAME:
&lt;pre&gt;
import random
p1=input(&quot;enter player 1 name:&quot;)
p2=input(&quot;enter player 2 name:&quot;)
l=[&quot;rainbow&quot;,&quot;computer&quot;,&quot;robot&quot;,&quot;butter&quot;,&quot;vegetable&quot;,&quot;science&quot;,&quot;correct&quot;]
c1=c2=a1=a2=f1=f2=0
k=1
i=3
def play():
    n=random.choice(l)        ##n=chooses a word from list l
    l1=[]
    for j in n:
       l1.append(j)      ##creates a list for word in n
    for t in range(len(l1)):
       p=random.choice(l1)     ##this randomly displays letters in the list
       print(p)
       l1.remove(p)          ##to avoid the repetition of a letter
    s=input(&quot;enter the word:&quot;)
    if(s==n):
        print(&quot;correct&quot;)
        return 1
    else:
        print(&quot;not correct&quot;)
        print(&quot;answer is&quot;,n)
        return 0
def stat():
     print(&quot;player 1:&quot;)
     print(&quot;score:&quot;,c1)
     print(&quot;answered:&quot;,a1)
     print(&quot;failed:&quot;,f1)
     print(&quot;.............&quot;)
     print(&quot;player 2:&quot;)
     print(&quot;score:&quot;,c2)
     print(&quot;answered:&quot;,a2)
     print(&quot;failed&quot;,f2)
     if(c1&gt;c2):
         print(p1,&quot; won over &quot;,p2)
     elif(c1==c2):
         print(&quot;draw game&quot;)
     else:
         print(p2,&quot; won over &quot;,p1) 
while(i!=4):
      if(i==3):
         if(k==1):
             print(&quot;player 1 turn&quot;)
             print(&quot;your jumbled word is:&quot;)
             k=k+1
             m=play()
             if(m==1):      ##if guessed answer is correct,then score and no.of answered count will be increased
                c1+=1
                a1+=1
             else:
                f1+=1       ##else count of no.of failed to answered will be incremented
         else:
             print(&quot;player 2 turn&quot;)
             print(&quot;your jumbled word is:&quot;)
             k=k-1
             m=play()
             if(m==1):
                c2=c2+1
                a2=a2+1
             else:
                f2=f2+1
       if(i==2):
             print(&quot;present status&quot;)
             stat()
       i=int(input(&quot;enter your choice  1.stop 2.status 3.continue&quot;))
       if(i==1):
             stat()
             i=i+3
&lt;/pre&gt;
&lt;hr&gt;

[[#Top]]

=== JumbledWord Simple Logic, In Short ===
[[File:jumbledWord.gif]]
---
&lt;hr&gt;
'''Logic to create a Jumbled Word'''
&lt;hr&gt;
&lt;pre&gt;
#Get Jumbled Word and print it Horizontally
import random

def getJumbledWord(b):
    jumble=''
    l1 = [ b[i] for i in range(0, len(b)) ]
    for t in range(len(l1)):
       p=random.choice(l1)  #this randomly gets letters from the list      
       jumble=jumble+p       
       l1.remove(p)
    return jumble

b=input(&quot;Enter a word to make it jumbled : &quot;)
print(&quot;Jumbled Word : &quot;, getJumbledWord(b))
&lt;/pre&gt;
&lt;pre&gt;
Output:
Enter a word to make it jumbled : live and let live others
Jumbled Word :  vel  toldeisrte aihv len
==========================================
Enter a word to make it jumbled : junkfood
Jumbled Word :  nfukdooj
&lt;/pre&gt;
&lt;hr&gt;
'''Another Logic to create a Jumbled Word'''
&lt;hr&gt;
&lt;pre&gt;
import random
b=input(&quot;Enter a word to make it jumbled : &quot;)

def getJumbledWord1(b):
    l1 = [ b[i] for i in range(0, len(b)) ]
    random.shuffle(l1)
    str1 = ''.join(l1)
    return str1

print(&quot;Jumbled Word : &quot;, getJumbledWord1(b))
&lt;/pre&gt;

====Sample Output:====
&lt;pre&gt;
---- Output1 
Enter a word to make it jumbled : butter
Jumbled Word :  tbture

---- Output2 
Enter a word to make it jumbled : petriotism
Jumbled Word :  pittrosime
&lt;/pre&gt;

=Theory of Evolution=

== What is Evolution ? ==
Evolution is the change in heritable characteristics over successive generations. The theory of evolution explains that DNA, which acts as a carrier of genetic information from one generation to other, tends to change or mutate occasionally. These changes are reflected in next generations to come. This is how life has evolved on earth from bacteria to human beings.&lt;br&gt;
[[File:Evolution.png|500px]]

== Implementation ==
 &lt;p style=&quot;text-align:justify&quot;&gt;
An array representing DNA is stored in a file. As genes are forms of DNA, they contain information to be transferred to forthcoming generations. Assume that information is in the form of bits (in the form of 0s and 1s). A number is picked randomly from 1 to the size of the array. A new parameter has been introduced which decides whether mutation would occur or not. If the value of this new parameter is 1 (It is picked randomly from 1 to 100), then only change is reflected down the generations, otherwise it is not. The pseudo code is as follows :
&lt;/p&gt;
Input an array containing genetic information .
Randomly generate a number (say m) from 1 to length of the array. Randomly generate other number (say p) from 1 to 100.

&lt;pre&gt; 
    if p is equal to 1 then 
        if m is 1 then
          set it to 0
        else
          set it to 1
&lt;/pre&gt;
[[#TOP]]</text>
      <sha1>49ycjgogakwnnd6gda48sdavvzbee4a</sha1>
    </revision>
    <revision>
      <id>3767</id>
      <parentid>3766</parentid>
      <timestamp>2018-09-29T04:25:32Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* Crowd Computing: Just Estimate */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="30944">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_3 Contributors of this page]
*Week 3 Playlist: https://www.youtube.com/playlist?list=PLc_j0TNIaWxOVx_z9jAM2UB3RqYNXaoEo
=List=
List is a flexible data structure used for storing a group of data separated by comma. The elements in a list need not be of the same data type.

'''Example:'''
       List_1 = [ 1, 2,3] or 
       List_1 = [&quot;coffee&quot;, &quot;Tea&quot;, &quot;Milk&quot;] or
       List_1 = [1,&quot;coffee&quot;, &quot;Tea&quot;, 3, &quot;5&quot;]

==List Creation==
a) A list can be created by simply putting values (separated by comma) between square
 brackets as given below,
&lt;pre&gt;List_1 = [1,&quot;coffee&quot;, &quot;Tea&quot;, 3, &quot;5&quot;] #this creates a list by name List_1 containing
 following items
&lt;/pre&gt;


Or,
(b)A List can be created from scratch and elements can be added 
&lt;pre&gt;
        List_2 = [ ]
        List_2.append(&quot;Kala&quot;)
        List_2.append(&quot;Mala&quot;)
&lt;/pre&gt;
Here we use &quot;append&quot;, which is a function in python that enable us to append or attach an element to a list .
&lt;pre&gt;Thus List_2 will now hold [&quot;Kala&quot;,&quot;Mala&quot;]&lt;/pre&gt;

[[#Top]]

==Operations and Methods to work with List==
&lt;pre&gt;
a = [25,30,50,90,12,13]
b = [100,300,500,200,250]
&lt;/pre&gt;
&lt;hr&gt;
&lt;table border=2&gt;
  &lt;tr&gt;
    &lt;th&gt;&lt;b&gt;Method/&lt;br&gt;Operator&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Function&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Syntax&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Output&lt;/b&gt;&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;len()&lt;/td&gt;
    &lt;td&gt;Find length of a list&lt;/td&gt;
    &lt;td&gt;len(a)&lt;/td&gt;
    &lt;td&gt;6&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;max()&lt;/td&gt;
    &lt;td&gt;Find maximum element from the list&lt;/td&gt;
    &lt;td&gt;max(a)&lt;/td&gt;
    &lt;td&gt;90&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;min()&lt;/td&gt;
    &lt;td&gt;Find minimum element from the list&lt;/td&gt;
    &lt;td&gt;min(a)&lt;/td&gt;
    &lt;td&gt;12&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sum()&lt;/td&gt;
    &lt;td&gt;Returns sum of all elements of the list&lt;/td&gt;
    &lt;td&gt;sum(a)&lt;/td&gt;
    &lt;td&gt;220&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;reverse()&lt;/td&gt;
    &lt;td&gt;Reverses the original list&lt;/td&gt;
    &lt;td&gt;a.reverse()&lt;/td&gt;
    &lt;td&gt;[13, 12, 90, 50, 30, 25]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sort()&lt;/td&gt;
    &lt;td&gt;Sorts the original list in ascending order&lt;/td&gt;
    &lt;td&gt;a.sort()&lt;/td&gt;
    &lt;td&gt;[12, 13, 25, 30, 50, 90]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sorted()&lt;/td&gt;
    &lt;td&gt;Returns the new sorted list &lt;/td&gt;
    &lt;td&gt;sorted(a)&lt;/td&gt;
    &lt;td&gt;[12, 13, 25, 30, 50, 90]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;insert()&lt;/td&gt;
    &lt;td&gt;Insert at a particular index in the list, and shifts remaining elements&lt;/td&gt;
    &lt;td&gt;a.insert(3,3)&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 3, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;append()&lt;/td&gt;
    &lt;td&gt;Adds elements/object to the end of the list&lt;/td&gt;
    &lt;td&gt;a.append(5)&lt;br&gt;a.append([10,20])&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 5]&lt;br&gt;[25, 30, 50, 90, 12, 13, [10, 20]]&lt;br&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;extend()&lt;/td&gt;
    &lt;td&gt;Adds object to the end of the list as elements not as object&lt;/td&gt;
    &lt;td&gt;a.extend([10,20])&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 10, 20]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;*&amp;nbsp;&amp;nbsp;Repeatation&lt;br&gt;operator&lt;/td&gt;
    &lt;td&gt;Repeat the list for n times and returns a new list&lt;/td&gt;
    &lt;td&gt;a*2&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 25, 30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;+ Concatenation&lt;br&gt;operator&lt;/td&gt;
    &lt;td&gt;Concatenates two lists, and returns a new list&lt;/td&gt;
    &lt;td&gt;a+b&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 100, 300, 500, 200, 250]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;index()&lt;/td&gt;
    &lt;td&gt;Finds index of a particular element in the list or not&lt;/td&gt;
    &lt;td&gt;a.index(25)&lt;br&gt;a.index(0)&lt;br&gt;&lt;/td&gt;
    &lt;td&gt;0&lt;br&gt;&lt;br&gt;ValueError: 0 is not in list&lt;br&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;in operator&lt;/td&gt;
    &lt;td&gt;Finds whether a particular element is in the list or not, returns boolean&lt;/td&gt;
    &lt;td&gt;25 in a&lt;/td&gt;
    &lt;td&gt;True&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;not in operator&lt;/td&gt;
    &lt;td&gt;Checks if element is not available in list, returns boolean&lt;/td&gt;
    &lt;td&gt;25 not in a&lt;/td&gt;
    &lt;td&gt;False&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;count()&lt;/td&gt;
    &lt;td&gt;Counts the number of occurence of an element in the list&lt;/td&gt;
    &lt;td&gt;a.count(25)&lt;/td&gt;
    &lt;td&gt;1&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;remove()&lt;/td&gt;
    &lt;td&gt;Removes an element from the list&lt;/td&gt;
    &lt;td&gt;a.remove(25)&lt;/td&gt;
    &lt;td&gt; [30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;pop()&lt;/td&gt;
    &lt;td&gt;Delete and return item at index 0&lt;/td&gt;
    &lt;td&gt;a.pop(0)&lt;/td&gt;
    &lt;td&gt;25 , a will be [30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;del&lt;/td&gt;
    &lt;td&gt;Deletes item at a particular index from the list&lt;/td&gt;
    &lt;td&gt;del a[0]&lt;/td&gt;
    &lt;td&gt;[30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;all()&lt;/td&gt;
&lt;td&gt;Returns True, if all items in list are True or it is an empty list&lt;/td&gt;
&lt;td&gt;all([True, True, True])
all([])
&lt;/td&gt;
&lt;td&gt;True&lt;br&gt;
True&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;any()&lt;/td&gt;
&lt;td&gt;Returns True, if any item in list is True else return False&lt;/td&gt;
&lt;td&gt;any([True, True, True])&lt;br&gt;
any([True, False, True])&lt;br&gt;
any([])&lt;/td&gt;
&lt;td&gt;True&lt;br&gt;False&lt;br&gt;False&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;

==Printing the List==
=== Print whole list ===
A list can be printed simply or using a ''for / while'' loop 

 print(List_2)     # To print the entire list
This code will print      
 ['Kala','Mala']     

===Print element at a particular index===
&lt;pre&gt;
Using index position
    List_2[0]     # prints 'Kala' ,i.e,the value at index position 0.
    List_2[1]     # prints 'Mala'.
&lt;/pre&gt;
=== Without using index position ===
&lt;pre&gt;
for item in List_2:   # here item is a variable used to access elements in list.
       print(item)
   This code snippet prints 
    Kala
    Mala
&lt;/pre&gt;
[[#Top]]

==Search for a particular element in list==
Elements in a list can be searched by one of the two ways:
=== using index() function===
&lt;pre&gt;
ages1 = [11,23,12,23,45]

#if element is available in the list, index() returns the index value on which, the element is
 present.
print(ages1.index(45))#Output: 4

#if element is not available in the list, index() returns ''ValueError''
print(ages1.index(0))#Output: ValueError:
&lt;/pre&gt;

In programming, if such error occurs, program gets terminated. It can be solved using exception handling.
 
e.g.
&lt;pre&gt;
ages1 = [11,23,12,23,45]

try:
    print(ages1.index(0))
except ValueError:
    print(&quot;Exception has occured&quot;)    
    print(&quot;Element is not found in the list&quot;)

&lt;/pre&gt;
&lt;pre&gt;
'''Output: 
Exception has occured
Element is not found in the list
'''&lt;/pre&gt;
[[#Top]]

=== using 'in' operator===
''in'' operator is used to check whether a particular element is available in the list or not.e.g.

&lt;pre&gt;
ages1 = [11,23,12,23,45]
no=11

if no in ages1:
    print(&quot;no is there in the list&quot;)
else:    
    print(&quot;no is NOT there in the list&quot;)
&lt;/pre&gt;
&lt;pre&gt;
#Output: no is there in the list
&lt;/pre&gt;


'''Number is not there in the list'''
&lt;pre&gt;
ages1 = [11,23,12,23,45]
no=15

if no in ages1:
    print(&quot;no is there in the list&quot;)
else:    
    print(&quot;no is NOT there in the list&quot;)
&lt;/pre&gt;
&lt;pre&gt;
Output: no is NOT there in the list
&lt;/pre&gt;
[[#Top]]

==Updating the List==
The lists can be updated using ''append'' or ''insert'' function.  Append adds the element to the end of the list and Insert adds the element in the specified position.
&lt;pre&gt;
   # add the element 'Sheela' to the end of the list.
   List_2.append(&quot;Sheela&quot;)    
   print (List_2) will output 
   ['Kala', 'Mala', 'Sheela']
&lt;/pre&gt;
   &lt;pre&gt;
# add the element &quot;Bala&quot; in the list at the index 1.
   List_2.insert(1,&quot;Bala&quot;)    
   print (List_2) will output 
   ['Kala', 'Bala','Mala', 'Sheela']
&lt;/pre&gt;

=== Extend the list by adding elements of other list at end using extend()===
&lt;pre&gt;
ages = [11,23,12,23,45]
ages.extend([57,58])
print(ages)
&lt;/pre&gt;

&lt;pre&gt;
#Output: [11, 23, 12, 23, 45, 57, 58]
&lt;/pre&gt;

==== Difference between ''append() and extend()'' ====
Difference between ''append()'' and ''extend()'' can be easily understood, by the following example.

&lt;pre&gt;
appendlist = [11,23,12,23,45]
appendlist.append([57,58])

extendlist= [11,23,12,23,45]
extendlist.extend([57,58])
&lt;/pre&gt;

&lt;pre&gt;
'''Output:
[11, 23, 12, 23, 45, [57, 58]]
[11, 23, 12, 23, 45, 57, 58]'''
&lt;/pre&gt;

[[#Top]]

==Basic Operations on List==
===Frequency of Occurrence===
list.count(object) will return the number of times the object occur in the list.
  '''Example'''
    ages = [11,23,12,23,45,43,22,24,23]
    ages.count(23) will return
    3
    ages.count(100) will return
    0

===Length of the List===
''len(list)'' will return the length of the list ie. the number of objects in the list.
  '''Example'''
&lt;pre&gt;
    ages = [11,23,12,23,45,43,22,24,23]
    len(ages) # Output: 9
&lt;/pre&gt;

To print the objects in the list either use ''for item in list'' or ''for index in range(len(list))''
&lt;pre&gt;
    for item in ages:       
        print (item)  
        (OR)
    for index in range(len(ages)) :
        print (ages[index])
&lt;/pre&gt;

===Sort the List===
''list.sort()'' will sort the list in ascending order
  '''Example'''
    ages = [11,23,12,23,45,43,22,24,23]
    ages.sort() 
    print (ages) 
    [11, 12, 22, 23, 23, 23, 24, 43, 45]

[[#Top]]

===Sort the List using sorted() function===
''sorted(list1)'' will sort the list and return a new list, it doesn't modify the original list
&lt;br&gt;'''Example: Sort in ascending order'''
&lt;pre&gt;
ages = [11,23,12,23,45,43,22,24,23]
newList=sorted(ages)
print(newList)

#Output: [11, 12, 22, 23, 23, 23, 24, 43, 45]
&lt;/pre&gt;

&lt;br&gt;'''Example: Sort in descending order'''
&lt;pre&gt;
ages = [11,23,12,23,45,43,22,24,23]
newList=sorted(ages,reverse=True)
print(newList)

#Output: [45, 43, 24, 23, 23, 23, 22, 12, 11]
&lt;/pre&gt;

===Reverse the List===
''list.reverse()'' will reverse the original list
  '''Example'''
    ages = [11, 12, 22, 23, 23, 23, 24, 43, 45]
    ages.reverse()
    print (ages)
    [45, 43, 24, 23, 23, 23, 22, 12, 11]

Both ''sort()'' and ''reverse()'' list operation will work on numeric and alphanumeric data list.

A special use of the ''reverse()'' function is to descend a list that is sorted in ascending order.

  '''Example'''
&lt;pre&gt;
ages = [11, 12, 22, 23, 23, 23, 24, 43, 45]
ages.sort()
print(ages)
ages.reverse()
print(ages)
&lt;/pre&gt;

[[#Top]]

===Slicing===
Used to retrieve an object or objects in a range as a list  
  '''Example'''

Use ''list[index]'' to retrieve the object at the given index
&lt;pre&gt;
In [1]: student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
In [2]: student[3]     #Object at index 3.  Remember index starts at 0
Out[2]: 'Geetha'      
&lt;/pre&gt;

Use ''list[start_index : end_index + 1]'' to retrieve objects from the start_index to end_index 
&lt;pre&gt;
In [3]: student[2:4]     # Objects from index 2 to 3 as List. Note the [ and ]
Out[3]: ['Vijay', 'Geetha']   
&lt;/pre&gt;

Use ''list[:]'' to retrieve objects from the starting of the list to the end of the list. 
The default start value will be the starting index of the list (i.e. 0) and the default end value
will be the length of the list 
&lt;pre&gt;
In [4]: student[:]        # prints the entire list
Out[4]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma', 'Janani']
&lt;/pre&gt;
&lt;pre&gt;
In [5]: student[:5]       # prints the objects from the start of the list upto object at index 4
Out[5]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran']
&lt;/pre&gt;
&lt;pre&gt;
In [6]: student[2:]       # prints the objects from index 2 upto the end of the list
Out[6]: ['Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma', 'Janani']
&lt;/pre&gt;

Negative index too is available in Python. It starts from last element of the list. i.e.
&lt;pre&gt;
In [7]:student[-1]        #prints last index of list
Out[7]: 'Janani'
&lt;/pre&gt;
&lt;pre&gt;
In [8]:student[-1:-8]     #prints empty list
Out[8]: []
&lt;/pre&gt;
&lt;pre&gt;
In [9]:student[-8:-1]     #prints -8th index to -1st index elements
Out[9]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma']
&lt;/pre&gt;

[[#Top]]

===Removing Item from list ===
----

Is used to remove a specific item from the list.

'''Example:'''
 
Use list.remove(entry/value)  Or   del list[index]    Or list.pop(index)
&lt;pre&gt;
student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
student.remove(&quot;Arun&quot;)   #This will delete item &quot;Arun&quot;
         Or    
del student[0]           # This will delete item at index 0
         Or
student.pop(0)         # This will delete and return item at index 0
print(student)    
Output: &quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
&lt;/pre&gt;

[[#Top]]

===Delete list ===
----
Used to delete complete list

'''Example'''

Use del &lt;list name&gt;
&lt;pre&gt;
student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
del student&lt;/pre&gt;

===Concatenation of two lists===
----
''+'' is the concatenation operator which is used concatenate two lists. 
&lt;pre&gt;
ages1 = [11,23,12,23,45]
ages2 = [25, 24, 43, 47]
age=ages1+ages2
print(age)
#Output: [11, 23, 12, 23, 45, 25, 24, 43, 47]
&lt;/pre&gt;

===Repeatation of a list ===
----
''*'' is the operator to repeat a particular list.
&lt;pre&gt;
ages1 = [11,23,12,23,45]
age=ages1*5 #ages1 list is repeated 5 times and stroed in ''age'' list
print(age)

#Output: [11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45]
&lt;/pre&gt;

=== all and any for List===
all() and any() are special functions to check whether all elements in iterable is ''True'' or any element is ''True''
&lt;ol&gt;
&lt;li&gt;If all elements in a list are ''True'', ''all()'' will return ''True''&lt;/li&gt;
&lt;li&gt;If iterable is ''empty'', ''all()'' will return ''True''&lt;/li&gt;
&lt;li&gt;If iterable contains at least one ''True'', ''any()'' will return ''True''&lt;/li&gt;
&lt;li&gt;If iterable is ''empty'', ''any()'' will return ''False''&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;
lsit=[True, True, True, True]
print(all(lsit))#Output: True
print(any(lsit))#Output: True

lsit1=[True, False, True, True]
print(all(lsit1))#Output: False
print(any(lsit1))#Output: True

lsit2=[False,False,False]
print(all(lsit2))#Output: False
print(any(lsit2))#Output: False

lsit3=[]
print(all(lsit3))#Output: True
print(any(lsit3))#Output: False
&lt;/pre&gt;

==Conditional Statements==
Conditionals are used to check the condition and change the flow of the program 
accordingly. They are realized in programming languages through if statement. The 
syntax is as follows :
&lt;pre&gt;
         if condition : 
            statement
&lt;/pre&gt;
    '''Note:''' Do not forget indentation (inserting space/tab) in the line after the
 if condition.
    
    In case you want to execute a set of statements when a condition is true and another

set of statement when the condition is false.
&lt;pre&gt;
         if condition : 
            statement 1
         else :
            statement 2
&lt;/pre&gt;

&lt;pre&gt;    
    Multiple if-else statements can be written as follows:
         if condition_1 : 
            statement 1
         elif condition_2 : # 'elif' is short for 'else if'
            statement 2
         elif condition_3 :
            statement 3
        .
        .
         else :
            final statement
&lt;/pre&gt;

[[#Top]]

=Loops and Conditionals : Fizzbuzz=
====Loops====
Loops are used to execute a set of repetitive statements. They are realised
through 'while' and 'for' loops in programming languages. The syntax of 'for' loop is 
as follows :
&lt;pre&gt;
for LOOPVARIABLE in SEQUENCE: 
            STATEMENTS&lt;/pre&gt;

    '''e.g.''' to print all the data from a list we can write:
&lt;pre&gt;
for item in list_name:
      print(item)&lt;/pre&gt;
    OR
&lt;pre&gt;
for index in range(len(list_name)):
      print(list_name[index])
 &lt;/pre&gt;   
    The syntax for while loop is as follows :
&lt;pre&gt;    
while BOOLEANEXPRESSION: 
     STATEMENTS
     INCREMENT/DECREMENT
&lt;/pre&gt;    
    '''e.g.''' if we want to print all numbers from 1 to 10
&lt;pre&gt;
i=1
while i&lt;=10 :
    print(i,&quot; &quot;)
    i=i+1
    &lt;/pre&gt;
 
'while' loop has indefinite iteration (run-time unknown). So, there must be loop,  break statement in it.
 Whereas 'for' loop is definite in nature (i.e. known or predictable span).&lt;br&gt;

&lt;b&gt;NOTE: Python doesn't have anything like do-while loop.&lt;/b&gt;

[[#Top]]

==Implementation==
Here, we try to demonstrate the concept of loops and conditionals through a game called Fizzbuzz. The rules are as follows :&lt;br/&gt;
[[File:fizzBuzz.gif]]

• if input number is a multiple of ’3’ print ”Fizz”
&lt;br/&gt;
• if input number is a multiple of ’5’ print ”Buzz”
&lt;br/&gt;
• if input number is a multiple of both '3' and ’5’ print ”FizzBuzz”
&lt;br/&gt;
The pseudo code is as follows :
&lt;pre&gt;
   If input no % 3 == 0 and  input no % 5 == 0 : 
       print ”Fizzbuzz”
   else if input no % 3 == 0 : 
       print ”Fizz”
   else if input no % 5 == 0 : 
       print ”Buzz”
   else :
       print the input no
&lt;/pre&gt;
 &lt;p style=&quot;text-align:justify&quot;&gt;
The order of statements execution matters to get the desired output. The highest priority condition should be first followed by other. In fizzbuzz programming, first checking should be done for both divisibility of 3 and 5. If condition not satisfied only then it should check individually for 3 or 5. So carefully choosing the order is crucial for better programming.
Note: There is some effect of present condition statements chosen on next conditions statements. That is why in first attempt fizzbuzz programming got struck.&lt;/p&gt;

Example: 
&lt;pre&gt;
#Code to achieve the above requirement in python3.
i = int(input(&quot;Enter the number&quot;)) 
if i%3 == 0 and i%5 == 0: print(i,&quot;FizzBuzz&quot;)  
elif i%5 == 0: print(i,&quot;Buzz&quot;)
elif i%3 == 0: print(i,&quot;Fizz&quot;)
else: print(i)
&lt;/pre&gt;
Lets put the same into a loop for a range given by the user.
&lt;pre&gt;
def fizzbuzzgame(start,stop):
    for i in range(start,stop+1):
        if i%3 == 0 and i%5 == 0:
            print(i,&quot;FizzBuzz&quot;)
        elif i%5 == 0:
            print(i,&quot;Buzz&quot;)
        elif i%3 == 0:
            print(i,&quot;Fizz&quot;)
        else: print(i)

fizzbuzzgame(50,100)
&lt;/pre&gt;
&lt;pre&gt;
#Output:
1235
Buzz
======================================
555
Fizzbuzz
======================================
1235
Buzz
======================================
999
Fizz
&lt;/pre&gt;

[[#Top]]

=== Fizz Buzz game in Interactive mode with Score ===
'''By Ms. Ami Tusharkant Choksi'''
&lt;pre&gt;
def fizzbuzzgame(i):
        if i%3 == 0 and i%5 == 0:
            print(i,&quot;FizzBuzz&quot;)
            return(&quot;fzbz&quot;)
        elif i%5 == 0:
            print(i,&quot;Buzz&quot;)
            return(&quot;bz&quot;)
        elif i%3 == 0:
            print(i,&quot;Fizz&quot;)
            return(&quot;fz&quot;)
        else:
            print(i)
            return(&quot;no&quot;)

ch = 'y'
fizzbuzz=0
fizz=0
buzz=0
nothing=0
print(&quot;&quot;&quot;

 /$$$$$$$$/$$                  /$$$$$$$                            
| $$_____|__/                 | $$__  $$                           
| $$      /$$/$$$$$$$$/$$$$$$$| $$  \ $$/$$   /$$/$$$$$$$$/$$$$$$$$
| $$$$$  | $|____ /$$|____ /$$| $$$$$$$| $$  | $|____ /$$|____ /$$/
| $$__/  | $$  /$$$$/   /$$$$/| $$__  $| $$  | $$  /$$$$/   /$$$$/ 
| $$     | $$ /$$__/   /$$__/ | $$  \ $| $$  | $$ /$$__/   /$$__/  
| $$     | $$/$$$$$$$$/$$$$$$$| $$$$$$$|  $$$$$$//$$$$$$$$/$$$$$$$$
|__/     |__|________|________|_______/ \______/|________|________/
                                                                  
&quot;&quot;&quot;)   
print('''

  /$$$$$$                                
 /$$__  $$                               
| $$  \__/ /$$$$$$ /$$$$$$/$$$$  /$$$$$$ 
| $$ /$$$$|____  $| $$_  $$_  $$/$$__  $$
| $$|_  $$ /$$$$$$| $$ \ $$ \ $| $$$$$$$$
| $$  \ $$/$$__  $| $$ | $$ | $| $$_____/
|  $$$$$$|  $$$$$$| $$ | $$ | $|  $$$$$$$
 \______/ \_______|__/ |__/ |__/\_______/
                                     
''')

while(ch == 'y'):
    n=int(input(&quot;Enter a Number : &quot;))
    winLoose=fizzbuzzgame(n)
    if(winLoose == &quot;fz&quot;):
        fizz+=1
    elif(winLoose == &quot;bz&quot;):
        buzz+=1
    elif(winLoose == &quot;fzbz&quot;):
        fizzbuzz+=1
    ch=input(&quot;Do you want to continue playing the game : (y/n)&quot;)
    if(ch=='n'):
        print('Congratulations, your score is\n FizzBuzz:%d\nFizz:%d\nBuzz:%d' %
(fizzbuzz,fizz,buzz))
    
'''Sample Output:

 /$$$$$$$$/$$                  /$$$$$$$                            
| $$_____|__/                 | $$__  $$                           
| $$      /$$/$$$$$$$$/$$$$$$$| $$  \ $$/$$   /$$/$$$$$$$$/$$$$$$$$
| $$$$$  | $|____ /$$|____ /$$| $$$$$$$| $$  | $|____ /$$|____ /$$/
| $$__/  | $$  /$$$$/   /$$$$/| $$__  $| $$  | $$  /$$$$/   /$$$$/ 
| $$     | $$ /$$__/   /$$__/ | $$  \ $| $$  | $$ /$$__/   /$$__/  
| $$     | $$/$$$$$$$$/$$$$$$$| $$$$$$$|  $$$$$$//$$$$$$$$/$$$$$$$$
|__/     |__|________|________|_______/ \______/|________|________/
                                                                                                                                   

  /$$$$$$                                
 /$$__  $$                               
| $$  \__/ /$$$$$$ /$$$$$$/$$$$  /$$$$$$ 
| $$ /$$$$|____  $| $$_  $$_  $$/$$__  $$
| $$|_  $$ /$$$$$$| $$ \ $$ \ $| $$$$$$$$
| $$  \ $$/$$__  $| $$ | $$ | $| $$_____/
|  $$$$$$|  $$$$$$| $$ | $$ | $|  $$$$$$$
 \______/ \_______|__/ |__/ |__/\_______/
                                         

Enter a Number : 666
666 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 777
777 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 555
555 FizzBuzz
Do you want to continue playing the game : (y/n)y
Enter a Number : 1
1
Do you want to continue playing the game : (y/n)y
Enter a Number : 789
789 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 25
25 Buzz
Do you want to continue playing the game : (y/n)n
Congratulations, your score is

FizzBuzz:1
Fizz:3
Buzz:1

&lt;/pre&gt;

[[#Top]]

=Crowd Computing: Just Estimate=

Crowd computing is conceptualised in various ways as being related to crowdsourcing, human computation, social computing, cloud computing and mobile computing. 

==Wisdom of Crowds==
 &lt;p style=&quot;text-align:justify&quot;&gt;
The concept of ’Wisdom of Crowds’ was proposed by ''Francis Galton''. A weight-judging competition was carried on at the annual show of the West of England Fat Stock and Poultry Exhibition recently held at Plymouth, A fat ox having been selected, competitors bought stamped and numbered cards, each, on which to inscribe their respective names, addresses, and estimates of what the ox would weigh after it had been slaughtered. Those who guessed most successfully received prizes. About 8oo tickets were issued to the par- ticipants. The middlemost estimate of all the estimates recorded was 1207 lbs and the actual weight of the ox was 1198 lbs.&lt;/p&gt;

==Our Experiment==
 &lt;p style=&quot;text-align:justify&quot;&gt;
The crowd had to guess the number of candies/gems in a jar. Around 75 people participated in the experiment. The actual number of gems in the jar were 375. The median of all estimates came out to be 300 and the mean of all the estimates came out to be around 396. Median underestimated and mean overestimated the actual value. So according to recent studies, Trimmed mean must be used as an aggregate measure to estimate where Wisdom of Crowds is involved.
&lt;/p&gt;
[[File:Gemsjar.jpg|center|200px|caption]]

===Trimmed Mean===
 &lt;p style=&quot;text-align:justify&quot;&gt;
In these kinds of experiments, 10% trimmed mean is usually followed. For calculating 10% trimmed mean, remove 10% smallest and 10% largest values from the sample. Calculate the mean of the sample obtained. In the above experiment, the trimmed mean came out to be around 351 which is very close to the actual value.&lt;/p&gt;

==Implementation==
Here, we try to demonstrate the concept of trimmed mean through crowd computing.
&lt;ol&gt;
&lt;li&gt; Input a list of estimates done by the crowd .&lt;/li&gt;
&lt;li&gt; Sort the list.&lt;/li&gt;
&lt;li&gt; Remove the 10% smallest values.&lt;/li&gt;
&lt;li&gt; Remove the 10% largest values.
&lt;li&gt; Calculate the mean of the new list obtained .&lt;/li&gt;&lt;/ol&gt;&lt;hr&gt;

==Data of Experiment==       
    Estimates =[1000,1010,1786,2000,1500,1500,100,120,150,150,150,170,175,180,197,200,200,200,200,200,200,220,220,220,220,234,250,250,250,250,250,250,250,250,250,263,270,275,275,286,300,
                300,300,300,300,300,300,300,320,350,350,350,400, 400,400,400,400,450,467,500,500,500,500,500,500,500,550,550,600,600,600,650,700,700,720]

    '''CODE:'''
&lt;pre&gt;
Estimates = [1000,1010,1786,2000,1500,1500,100,120,150,150,150,170,175,180,197,200,200,200,200,200,200,220,220,220,220,234,250,250,250,250,250,250,250,250,250,263,270,275,275,286,300,                300,300,300,300,300,300,300,320,350,350,350,400,400,400,400,400,450,467,500,500,500,500,500,500,500,550,550,600,600,600,650,700,700,720]
Estimates.sort()
offset = int(0.10*len(Estimates))
for i in range(offset):
       del Estimates[0]
       del Estimates[-1]
Sum = 0    
for i in range(len(Estimates)):
       Sum += Estimates[i]
Mean_Value = Sum/len(Estimates)
print(&quot;Mean : &quot;, int(Mean_Value))
#Output:
Mean :  351
&lt;/pre&gt;
&lt;hr&gt;
==Trimmed Mean for the above example== 
&lt;h3&gt;Using scipy library&lt;/h3&gt;
&lt;pre&gt;
#import scipy to use the method of trim_mean
from scipy import stats
trimMean = stats.trim_mean(Estimates, 0.1) # Trim 10% at both ends
print(&quot;Trimmed Mean : &quot;,trimMean)
#Output:
Trimmed Mean :  335.1020408163265
&lt;/pre&gt;

&lt;h3&gt;Without using scipy library&lt;/h3&gt;
&lt;pre&gt;
#Trimmed mean with 10%
p=10/100
#sorted data
data=[2, 4, 6, 7, 11, 21, 81, 90, 105, 121]
n = len(data)
#Remove elements from both end
rem=int(n*p)
newData = data[rem:-rem]
mean = 0
for i in newData:
    mean += i
mean = int(mean/len(newData))
print(&quot;Trimmed mean : &quot;,mean)
#Output: Trimmed mean :  40
&lt;/pre&gt;
[[#Top]]

=Jumbled_Words Permutations: Jumbled Words=
==What are Permutations ?==
A permutation also called ordering of selected number of elements from a list denoted by nPr here we are choosing all elements of a list and so n=r&lt;br&gt;
nPr=n!/(n-r)!&lt;br&gt; as n=r
nPn=n!&lt;br&gt; which gives all possible arrangement of elements present in a list.

 For example, permutations of list [1,2,3] are [1,2,3], [1,3,2], [2,1,3], [2,3,1], 
[3,1,2], and [3,2,1]. 
The number of permutations of a list of elements nPn is given by n!. For example, there are 2! = 2 x 1 = 2 permutations of [1,2], namely [1,2] and [2,1], and 3! = 3 x 2 x 1 = 6 permutations of [1,2,3], as mentioned above.&lt;br/&gt;
[[File:Permutations.jpg]]

==Implementation==
 &lt;p style=&quot;text-align:justify&quot;&gt;
Here, we try to demonstrate the concept of permutations through jumbled words. It is a two player game in which one person presents the other person a different permutation of the word in his mind. The other person has to guess the right word. If he guesses, the he wins otherwise he loses.&lt;/p&gt;
 Input an list of words.
 Randomly pick a word from the list of words .
 Shuffle this word and present it to the other player.
 if word guesses by the player is same as the one picked from list of w
     player wins
 else
     player loses

ALTERNATE CODE TO GENERATE THIS GAME:
&lt;pre&gt;
import random
p1=input(&quot;enter player 1 name:&quot;)
p2=input(&quot;enter player 2 name:&quot;)
l=[&quot;rainbow&quot;,&quot;computer&quot;,&quot;robot&quot;,&quot;butter&quot;,&quot;vegetable&quot;,&quot;science&quot;,&quot;correct&quot;]
c1=c2=a1=a2=f1=f2=0
k=1
i=3
def play():
    n=random.choice(l)        ##n=chooses a word from list l
    l1=[]
    for j in n:
       l1.append(j)      ##creates a list for word in n
    for t in range(len(l1)):
       p=random.choice(l1)     ##this randomly displays letters in the list
       print(p)
       l1.remove(p)          ##to avoid the repetition of a letter
    s=input(&quot;enter the word:&quot;)
    if(s==n):
        print(&quot;correct&quot;)
        return 1
    else:
        print(&quot;not correct&quot;)
        print(&quot;answer is&quot;,n)
        return 0
def stat():
     print(&quot;player 1:&quot;)
     print(&quot;score:&quot;,c1)
     print(&quot;answered:&quot;,a1)
     print(&quot;failed:&quot;,f1)
     print(&quot;.............&quot;)
     print(&quot;player 2:&quot;)
     print(&quot;score:&quot;,c2)
     print(&quot;answered:&quot;,a2)
     print(&quot;failed&quot;,f2)
     if(c1&gt;c2):
         print(p1,&quot; won over &quot;,p2)
     elif(c1==c2):
         print(&quot;draw game&quot;)
     else:
         print(p2,&quot; won over &quot;,p1) 
while(i!=4):
      if(i==3):
         if(k==1):
             print(&quot;player 1 turn&quot;)
             print(&quot;your jumbled word is:&quot;)
             k=k+1
             m=play()
             if(m==1):      ##if guessed answer is correct,then score and no.of answered count will be increased
                c1+=1
                a1+=1
             else:
                f1+=1       ##else count of no.of failed to answered will be incremented
         else:
             print(&quot;player 2 turn&quot;)
             print(&quot;your jumbled word is:&quot;)
             k=k-1
             m=play()
             if(m==1):
                c2=c2+1
                a2=a2+1
             else:
                f2=f2+1
       if(i==2):
             print(&quot;present status&quot;)
             stat()
       i=int(input(&quot;enter your choice  1.stop 2.status 3.continue&quot;))
       if(i==1):
             stat()
             i=i+3
&lt;/pre&gt;
&lt;hr&gt;

[[#Top]]

=== JumbledWord Simple Logic, In Short ===
[[File:jumbledWord.gif]]
---
&lt;hr&gt;
'''Logic to create a Jumbled Word'''
&lt;hr&gt;
&lt;pre&gt;
#Get Jumbled Word and print it Horizontally
import random

def getJumbledWord(b):
    jumble=''
    l1 = [ b[i] for i in range(0, len(b)) ]
    for t in range(len(l1)):
       p=random.choice(l1)  #this randomly gets letters from the list      
       jumble=jumble+p       
       l1.remove(p)
    return jumble

b=input(&quot;Enter a word to make it jumbled : &quot;)
print(&quot;Jumbled Word : &quot;, getJumbledWord(b))
&lt;/pre&gt;
&lt;pre&gt;
Output:
Enter a word to make it jumbled : live and let live others
Jumbled Word :  vel  toldeisrte aihv len
==========================================
Enter a word to make it jumbled : junkfood
Jumbled Word :  nfukdooj
&lt;/pre&gt;
&lt;hr&gt;
'''Another Logic to create a Jumbled Word'''
&lt;hr&gt;
&lt;pre&gt;
import random
b=input(&quot;Enter a word to make it jumbled : &quot;)

def getJumbledWord1(b):
    l1 = [ b[i] for i in range(0, len(b)) ]
    random.shuffle(l1)
    str1 = ''.join(l1)
    return str1

print(&quot;Jumbled Word : &quot;, getJumbledWord1(b))
&lt;/pre&gt;

====Sample Output:====
&lt;pre&gt;
---- Output1 
Enter a word to make it jumbled : butter
Jumbled Word :  tbture

---- Output2 
Enter a word to make it jumbled : petriotism
Jumbled Word :  pittrosime
&lt;/pre&gt;

=Theory of Evolution=

== What is Evolution ? ==
Evolution is the change in heritable characteristics over successive generations. The theory of evolution explains that DNA, which acts as a carrier of genetic information from one generation to other, tends to change or mutate occasionally. These changes are reflected in next generations to come. This is how life has evolved on earth from bacteria to human beings.&lt;br&gt;
[[File:Evolution.png|500px]]

== Implementation ==
 &lt;p style=&quot;text-align:justify&quot;&gt;
An array representing DNA is stored in a file. As genes are forms of DNA, they contain information to be transferred to forthcoming generations. Assume that information is in the form of bits (in the form of 0s and 1s). A number is picked randomly from 1 to the size of the array. A new parameter has been introduced which decides whether mutation would occur or not. If the value of this new parameter is 1 (It is picked randomly from 1 to 100), then only change is reflected down the generations, otherwise it is not. The pseudo code is as follows :
&lt;/p&gt;
Input an array containing genetic information .
Randomly generate a number (say m) from 1 to length of the array. Randomly generate other number (say p) from 1 to 100.

&lt;pre&gt; 
    if p is equal to 1 then 
        if m is 1 then
          set it to 0
        else
          set it to 1
&lt;/pre&gt;
[[#TOP]]</text>
      <sha1>fisd2ba4xtszr3t4qwrfu0ti61iona2</sha1>
    </revision>
    <revision>
      <id>3768</id>
      <parentid>3767</parentid>
      <timestamp>2018-09-29T04:27:57Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* Crowd Computing: Just Estimate */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="31629">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_3 Contributors of this page]
*Week 3 Playlist: https://www.youtube.com/playlist?list=PLc_j0TNIaWxOVx_z9jAM2UB3RqYNXaoEo
=List=
List is a flexible data structure used for storing a group of data separated by comma. The elements in a list need not be of the same data type.

'''Example:'''
       List_1 = [ 1, 2,3] or 
       List_1 = [&quot;coffee&quot;, &quot;Tea&quot;, &quot;Milk&quot;] or
       List_1 = [1,&quot;coffee&quot;, &quot;Tea&quot;, 3, &quot;5&quot;]

==List Creation==
a) A list can be created by simply putting values (separated by comma) between square
 brackets as given below,
&lt;pre&gt;List_1 = [1,&quot;coffee&quot;, &quot;Tea&quot;, 3, &quot;5&quot;] #this creates a list by name List_1 containing
 following items
&lt;/pre&gt;


Or,
(b)A List can be created from scratch and elements can be added 
&lt;pre&gt;
        List_2 = [ ]
        List_2.append(&quot;Kala&quot;)
        List_2.append(&quot;Mala&quot;)
&lt;/pre&gt;
Here we use &quot;append&quot;, which is a function in python that enable us to append or attach an element to a list .
&lt;pre&gt;Thus List_2 will now hold [&quot;Kala&quot;,&quot;Mala&quot;]&lt;/pre&gt;

[[#Top]]

==Operations and Methods to work with List==
&lt;pre&gt;
a = [25,30,50,90,12,13]
b = [100,300,500,200,250]
&lt;/pre&gt;
&lt;hr&gt;
&lt;table border=2&gt;
  &lt;tr&gt;
    &lt;th&gt;&lt;b&gt;Method/&lt;br&gt;Operator&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Function&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Syntax&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Output&lt;/b&gt;&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;len()&lt;/td&gt;
    &lt;td&gt;Find length of a list&lt;/td&gt;
    &lt;td&gt;len(a)&lt;/td&gt;
    &lt;td&gt;6&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;max()&lt;/td&gt;
    &lt;td&gt;Find maximum element from the list&lt;/td&gt;
    &lt;td&gt;max(a)&lt;/td&gt;
    &lt;td&gt;90&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;min()&lt;/td&gt;
    &lt;td&gt;Find minimum element from the list&lt;/td&gt;
    &lt;td&gt;min(a)&lt;/td&gt;
    &lt;td&gt;12&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sum()&lt;/td&gt;
    &lt;td&gt;Returns sum of all elements of the list&lt;/td&gt;
    &lt;td&gt;sum(a)&lt;/td&gt;
    &lt;td&gt;220&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;reverse()&lt;/td&gt;
    &lt;td&gt;Reverses the original list&lt;/td&gt;
    &lt;td&gt;a.reverse()&lt;/td&gt;
    &lt;td&gt;[13, 12, 90, 50, 30, 25]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sort()&lt;/td&gt;
    &lt;td&gt;Sorts the original list in ascending order&lt;/td&gt;
    &lt;td&gt;a.sort()&lt;/td&gt;
    &lt;td&gt;[12, 13, 25, 30, 50, 90]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sorted()&lt;/td&gt;
    &lt;td&gt;Returns the new sorted list &lt;/td&gt;
    &lt;td&gt;sorted(a)&lt;/td&gt;
    &lt;td&gt;[12, 13, 25, 30, 50, 90]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;insert()&lt;/td&gt;
    &lt;td&gt;Insert at a particular index in the list, and shifts remaining elements&lt;/td&gt;
    &lt;td&gt;a.insert(3,3)&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 3, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;append()&lt;/td&gt;
    &lt;td&gt;Adds elements/object to the end of the list&lt;/td&gt;
    &lt;td&gt;a.append(5)&lt;br&gt;a.append([10,20])&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 5]&lt;br&gt;[25, 30, 50, 90, 12, 13, [10, 20]]&lt;br&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;extend()&lt;/td&gt;
    &lt;td&gt;Adds object to the end of the list as elements not as object&lt;/td&gt;
    &lt;td&gt;a.extend([10,20])&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 10, 20]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;*&amp;nbsp;&amp;nbsp;Repeatation&lt;br&gt;operator&lt;/td&gt;
    &lt;td&gt;Repeat the list for n times and returns a new list&lt;/td&gt;
    &lt;td&gt;a*2&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 25, 30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;+ Concatenation&lt;br&gt;operator&lt;/td&gt;
    &lt;td&gt;Concatenates two lists, and returns a new list&lt;/td&gt;
    &lt;td&gt;a+b&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 100, 300, 500, 200, 250]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;index()&lt;/td&gt;
    &lt;td&gt;Finds index of a particular element in the list or not&lt;/td&gt;
    &lt;td&gt;a.index(25)&lt;br&gt;a.index(0)&lt;br&gt;&lt;/td&gt;
    &lt;td&gt;0&lt;br&gt;&lt;br&gt;ValueError: 0 is not in list&lt;br&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;in operator&lt;/td&gt;
    &lt;td&gt;Finds whether a particular element is in the list or not, returns boolean&lt;/td&gt;
    &lt;td&gt;25 in a&lt;/td&gt;
    &lt;td&gt;True&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;not in operator&lt;/td&gt;
    &lt;td&gt;Checks if element is not available in list, returns boolean&lt;/td&gt;
    &lt;td&gt;25 not in a&lt;/td&gt;
    &lt;td&gt;False&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;count()&lt;/td&gt;
    &lt;td&gt;Counts the number of occurence of an element in the list&lt;/td&gt;
    &lt;td&gt;a.count(25)&lt;/td&gt;
    &lt;td&gt;1&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;remove()&lt;/td&gt;
    &lt;td&gt;Removes an element from the list&lt;/td&gt;
    &lt;td&gt;a.remove(25)&lt;/td&gt;
    &lt;td&gt; [30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;pop()&lt;/td&gt;
    &lt;td&gt;Delete and return item at index 0&lt;/td&gt;
    &lt;td&gt;a.pop(0)&lt;/td&gt;
    &lt;td&gt;25 , a will be [30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;del&lt;/td&gt;
    &lt;td&gt;Deletes item at a particular index from the list&lt;/td&gt;
    &lt;td&gt;del a[0]&lt;/td&gt;
    &lt;td&gt;[30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;all()&lt;/td&gt;
&lt;td&gt;Returns True, if all items in list are True or it is an empty list&lt;/td&gt;
&lt;td&gt;all([True, True, True])
all([])
&lt;/td&gt;
&lt;td&gt;True&lt;br&gt;
True&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;any()&lt;/td&gt;
&lt;td&gt;Returns True, if any item in list is True else return False&lt;/td&gt;
&lt;td&gt;any([True, True, True])&lt;br&gt;
any([True, False, True])&lt;br&gt;
any([])&lt;/td&gt;
&lt;td&gt;True&lt;br&gt;False&lt;br&gt;False&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;

==Printing the List==
=== Print whole list ===
A list can be printed simply or using a ''for / while'' loop 

 print(List_2)     # To print the entire list
This code will print      
 ['Kala','Mala']     

===Print element at a particular index===
&lt;pre&gt;
Using index position
    List_2[0]     # prints 'Kala' ,i.e,the value at index position 0.
    List_2[1]     # prints 'Mala'.
&lt;/pre&gt;
=== Without using index position ===
&lt;pre&gt;
for item in List_2:   # here item is a variable used to access elements in list.
       print(item)
   This code snippet prints 
    Kala
    Mala
&lt;/pre&gt;
[[#Top]]

==Search for a particular element in list==
Elements in a list can be searched by one of the two ways:
=== using index() function===
&lt;pre&gt;
ages1 = [11,23,12,23,45]

#if element is available in the list, index() returns the index value on which, the element is
 present.
print(ages1.index(45))#Output: 4

#if element is not available in the list, index() returns ''ValueError''
print(ages1.index(0))#Output: ValueError:
&lt;/pre&gt;

In programming, if such error occurs, program gets terminated. It can be solved using exception handling.
 
e.g.
&lt;pre&gt;
ages1 = [11,23,12,23,45]

try:
    print(ages1.index(0))
except ValueError:
    print(&quot;Exception has occured&quot;)    
    print(&quot;Element is not found in the list&quot;)

&lt;/pre&gt;
&lt;pre&gt;
'''Output: 
Exception has occured
Element is not found in the list
'''&lt;/pre&gt;
[[#Top]]

=== using 'in' operator===
''in'' operator is used to check whether a particular element is available in the list or not.e.g.

&lt;pre&gt;
ages1 = [11,23,12,23,45]
no=11

if no in ages1:
    print(&quot;no is there in the list&quot;)
else:    
    print(&quot;no is NOT there in the list&quot;)
&lt;/pre&gt;
&lt;pre&gt;
#Output: no is there in the list
&lt;/pre&gt;


'''Number is not there in the list'''
&lt;pre&gt;
ages1 = [11,23,12,23,45]
no=15

if no in ages1:
    print(&quot;no is there in the list&quot;)
else:    
    print(&quot;no is NOT there in the list&quot;)
&lt;/pre&gt;
&lt;pre&gt;
Output: no is NOT there in the list
&lt;/pre&gt;
[[#Top]]

==Updating the List==
The lists can be updated using ''append'' or ''insert'' function.  Append adds the element to the end of the list and Insert adds the element in the specified position.
&lt;pre&gt;
   # add the element 'Sheela' to the end of the list.
   List_2.append(&quot;Sheela&quot;)    
   print (List_2) will output 
   ['Kala', 'Mala', 'Sheela']
&lt;/pre&gt;
   &lt;pre&gt;
# add the element &quot;Bala&quot; in the list at the index 1.
   List_2.insert(1,&quot;Bala&quot;)    
   print (List_2) will output 
   ['Kala', 'Bala','Mala', 'Sheela']
&lt;/pre&gt;

=== Extend the list by adding elements of other list at end using extend()===
&lt;pre&gt;
ages = [11,23,12,23,45]
ages.extend([57,58])
print(ages)
&lt;/pre&gt;

&lt;pre&gt;
#Output: [11, 23, 12, 23, 45, 57, 58]
&lt;/pre&gt;

==== Difference between ''append() and extend()'' ====
Difference between ''append()'' and ''extend()'' can be easily understood, by the following example.

&lt;pre&gt;
appendlist = [11,23,12,23,45]
appendlist.append([57,58])

extendlist= [11,23,12,23,45]
extendlist.extend([57,58])
&lt;/pre&gt;

&lt;pre&gt;
'''Output:
[11, 23, 12, 23, 45, [57, 58]]
[11, 23, 12, 23, 45, 57, 58]'''
&lt;/pre&gt;

[[#Top]]

==Basic Operations on List==
===Frequency of Occurrence===
list.count(object) will return the number of times the object occur in the list.
  '''Example'''
    ages = [11,23,12,23,45,43,22,24,23]
    ages.count(23) will return
    3
    ages.count(100) will return
    0

===Length of the List===
''len(list)'' will return the length of the list ie. the number of objects in the list.
  '''Example'''
&lt;pre&gt;
    ages = [11,23,12,23,45,43,22,24,23]
    len(ages) # Output: 9
&lt;/pre&gt;

To print the objects in the list either use ''for item in list'' or ''for index in range(len(list))''
&lt;pre&gt;
    for item in ages:       
        print (item)  
        (OR)
    for index in range(len(ages)) :
        print (ages[index])
&lt;/pre&gt;

===Sort the List===
''list.sort()'' will sort the list in ascending order
  '''Example'''
    ages = [11,23,12,23,45,43,22,24,23]
    ages.sort() 
    print (ages) 
    [11, 12, 22, 23, 23, 23, 24, 43, 45]

[[#Top]]

===Sort the List using sorted() function===
''sorted(list1)'' will sort the list and return a new list, it doesn't modify the original list
&lt;br&gt;'''Example: Sort in ascending order'''
&lt;pre&gt;
ages = [11,23,12,23,45,43,22,24,23]
newList=sorted(ages)
print(newList)

#Output: [11, 12, 22, 23, 23, 23, 24, 43, 45]
&lt;/pre&gt;

&lt;br&gt;'''Example: Sort in descending order'''
&lt;pre&gt;
ages = [11,23,12,23,45,43,22,24,23]
newList=sorted(ages,reverse=True)
print(newList)

#Output: [45, 43, 24, 23, 23, 23, 22, 12, 11]
&lt;/pre&gt;

===Reverse the List===
''list.reverse()'' will reverse the original list
  '''Example'''
    ages = [11, 12, 22, 23, 23, 23, 24, 43, 45]
    ages.reverse()
    print (ages)
    [45, 43, 24, 23, 23, 23, 22, 12, 11]

Both ''sort()'' and ''reverse()'' list operation will work on numeric and alphanumeric data list.

A special use of the ''reverse()'' function is to descend a list that is sorted in ascending order.

  '''Example'''
&lt;pre&gt;
ages = [11, 12, 22, 23, 23, 23, 24, 43, 45]
ages.sort()
print(ages)
ages.reverse()
print(ages)
&lt;/pre&gt;

[[#Top]]

===Slicing===
Used to retrieve an object or objects in a range as a list  
  '''Example'''

Use ''list[index]'' to retrieve the object at the given index
&lt;pre&gt;
In [1]: student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
In [2]: student[3]     #Object at index 3.  Remember index starts at 0
Out[2]: 'Geetha'      
&lt;/pre&gt;

Use ''list[start_index : end_index + 1]'' to retrieve objects from the start_index to end_index 
&lt;pre&gt;
In [3]: student[2:4]     # Objects from index 2 to 3 as List. Note the [ and ]
Out[3]: ['Vijay', 'Geetha']   
&lt;/pre&gt;

Use ''list[:]'' to retrieve objects from the starting of the list to the end of the list. 
The default start value will be the starting index of the list (i.e. 0) and the default end value
will be the length of the list 
&lt;pre&gt;
In [4]: student[:]        # prints the entire list
Out[4]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma', 'Janani']
&lt;/pre&gt;
&lt;pre&gt;
In [5]: student[:5]       # prints the objects from the start of the list upto object at index 4
Out[5]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran']
&lt;/pre&gt;
&lt;pre&gt;
In [6]: student[2:]       # prints the objects from index 2 upto the end of the list
Out[6]: ['Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma', 'Janani']
&lt;/pre&gt;

Negative index too is available in Python. It starts from last element of the list. i.e.
&lt;pre&gt;
In [7]:student[-1]        #prints last index of list
Out[7]: 'Janani'
&lt;/pre&gt;
&lt;pre&gt;
In [8]:student[-1:-8]     #prints empty list
Out[8]: []
&lt;/pre&gt;
&lt;pre&gt;
In [9]:student[-8:-1]     #prints -8th index to -1st index elements
Out[9]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma']
&lt;/pre&gt;

[[#Top]]

===Removing Item from list ===
----

Is used to remove a specific item from the list.

'''Example:'''
 
Use list.remove(entry/value)  Or   del list[index]    Or list.pop(index)
&lt;pre&gt;
student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
student.remove(&quot;Arun&quot;)   #This will delete item &quot;Arun&quot;
         Or    
del student[0]           # This will delete item at index 0
         Or
student.pop(0)         # This will delete and return item at index 0
print(student)    
Output: &quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
&lt;/pre&gt;

[[#Top]]

===Delete list ===
----
Used to delete complete list

'''Example'''

Use del &lt;list name&gt;
&lt;pre&gt;
student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
del student&lt;/pre&gt;

===Concatenation of two lists===
----
''+'' is the concatenation operator which is used concatenate two lists. 
&lt;pre&gt;
ages1 = [11,23,12,23,45]
ages2 = [25, 24, 43, 47]
age=ages1+ages2
print(age)
#Output: [11, 23, 12, 23, 45, 25, 24, 43, 47]
&lt;/pre&gt;

===Repeatation of a list ===
----
''*'' is the operator to repeat a particular list.
&lt;pre&gt;
ages1 = [11,23,12,23,45]
age=ages1*5 #ages1 list is repeated 5 times and stroed in ''age'' list
print(age)

#Output: [11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45]
&lt;/pre&gt;

=== all and any for List===
all() and any() are special functions to check whether all elements in iterable is ''True'' or any element is ''True''
&lt;ol&gt;
&lt;li&gt;If all elements in a list are ''True'', ''all()'' will return ''True''&lt;/li&gt;
&lt;li&gt;If iterable is ''empty'', ''all()'' will return ''True''&lt;/li&gt;
&lt;li&gt;If iterable contains at least one ''True'', ''any()'' will return ''True''&lt;/li&gt;
&lt;li&gt;If iterable is ''empty'', ''any()'' will return ''False''&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;
lsit=[True, True, True, True]
print(all(lsit))#Output: True
print(any(lsit))#Output: True

lsit1=[True, False, True, True]
print(all(lsit1))#Output: False
print(any(lsit1))#Output: True

lsit2=[False,False,False]
print(all(lsit2))#Output: False
print(any(lsit2))#Output: False

lsit3=[]
print(all(lsit3))#Output: True
print(any(lsit3))#Output: False
&lt;/pre&gt;

==Conditional Statements==
Conditionals are used to check the condition and change the flow of the program 
accordingly. They are realized in programming languages through if statement. The 
syntax is as follows :
&lt;pre&gt;
         if condition : 
            statement
&lt;/pre&gt;
    '''Note:''' Do not forget indentation (inserting space/tab) in the line after the
 if condition.
    
    In case you want to execute a set of statements when a condition is true and another

set of statement when the condition is false.
&lt;pre&gt;
         if condition : 
            statement 1
         else :
            statement 2
&lt;/pre&gt;

&lt;pre&gt;    
    Multiple if-else statements can be written as follows:
         if condition_1 : 
            statement 1
         elif condition_2 : # 'elif' is short for 'else if'
            statement 2
         elif condition_3 :
            statement 3
        .
        .
         else :
            final statement
&lt;/pre&gt;

[[#Top]]

=Loops and Conditionals : Fizzbuzz=
====Loops====
Loops are used to execute a set of repetitive statements. They are realised
through 'while' and 'for' loops in programming languages. The syntax of 'for' loop is 
as follows :
&lt;pre&gt;
for LOOPVARIABLE in SEQUENCE: 
            STATEMENTS&lt;/pre&gt;

    '''e.g.''' to print all the data from a list we can write:
&lt;pre&gt;
for item in list_name:
      print(item)&lt;/pre&gt;
    OR
&lt;pre&gt;
for index in range(len(list_name)):
      print(list_name[index])
 &lt;/pre&gt;   
    The syntax for while loop is as follows :
&lt;pre&gt;    
while BOOLEANEXPRESSION: 
     STATEMENTS
     INCREMENT/DECREMENT
&lt;/pre&gt;    
    '''e.g.''' if we want to print all numbers from 1 to 10
&lt;pre&gt;
i=1
while i&lt;=10 :
    print(i,&quot; &quot;)
    i=i+1
    &lt;/pre&gt;
 
'while' loop has indefinite iteration (run-time unknown). So, there must be loop,  break statement in it.
 Whereas 'for' loop is definite in nature (i.e. known or predictable span).&lt;br&gt;

&lt;b&gt;NOTE: Python doesn't have anything like do-while loop.&lt;/b&gt;

[[#Top]]

==Implementation==
Here, we try to demonstrate the concept of loops and conditionals through a game called Fizzbuzz. The rules are as follows :&lt;br/&gt;
[[File:fizzBuzz.gif]]

• if input number is a multiple of ’3’ print ”Fizz”
&lt;br/&gt;
• if input number is a multiple of ’5’ print ”Buzz”
&lt;br/&gt;
• if input number is a multiple of both '3' and ’5’ print ”FizzBuzz”
&lt;br/&gt;
The pseudo code is as follows :
&lt;pre&gt;
   If input no % 3 == 0 and  input no % 5 == 0 : 
       print ”Fizzbuzz”
   else if input no % 3 == 0 : 
       print ”Fizz”
   else if input no % 5 == 0 : 
       print ”Buzz”
   else :
       print the input no
&lt;/pre&gt;
 &lt;p style=&quot;text-align:justify&quot;&gt;
The order of statements execution matters to get the desired output. The highest priority condition should be first followed by other. In fizzbuzz programming, first checking should be done for both divisibility of 3 and 5. If condition not satisfied only then it should check individually for 3 or 5. So carefully choosing the order is crucial for better programming.
Note: There is some effect of present condition statements chosen on next conditions statements. That is why in first attempt fizzbuzz programming got struck.&lt;/p&gt;

Example: 
&lt;pre&gt;
#Code to achieve the above requirement in python3.
i = int(input(&quot;Enter the number&quot;)) 
if i%3 == 0 and i%5 == 0: print(i,&quot;FizzBuzz&quot;)  
elif i%5 == 0: print(i,&quot;Buzz&quot;)
elif i%3 == 0: print(i,&quot;Fizz&quot;)
else: print(i)
&lt;/pre&gt;
Lets put the same into a loop for a range given by the user.
&lt;pre&gt;
def fizzbuzzgame(start,stop):
    for i in range(start,stop+1):
        if i%3 == 0 and i%5 == 0:
            print(i,&quot;FizzBuzz&quot;)
        elif i%5 == 0:
            print(i,&quot;Buzz&quot;)
        elif i%3 == 0:
            print(i,&quot;Fizz&quot;)
        else: print(i)

fizzbuzzgame(50,100)
&lt;/pre&gt;
&lt;pre&gt;
#Output:
1235
Buzz
======================================
555
Fizzbuzz
======================================
1235
Buzz
======================================
999
Fizz
&lt;/pre&gt;

[[#Top]]

=== Fizz Buzz game in Interactive mode with Score ===
'''By Ms. Ami Tusharkant Choksi'''
&lt;pre&gt;
def fizzbuzzgame(i):
        if i%3 == 0 and i%5 == 0:
            print(i,&quot;FizzBuzz&quot;)
            return(&quot;fzbz&quot;)
        elif i%5 == 0:
            print(i,&quot;Buzz&quot;)
            return(&quot;bz&quot;)
        elif i%3 == 0:
            print(i,&quot;Fizz&quot;)
            return(&quot;fz&quot;)
        else:
            print(i)
            return(&quot;no&quot;)

ch = 'y'
fizzbuzz=0
fizz=0
buzz=0
nothing=0
print(&quot;&quot;&quot;

 /$$$$$$$$/$$                  /$$$$$$$                            
| $$_____|__/                 | $$__  $$                           
| $$      /$$/$$$$$$$$/$$$$$$$| $$  \ $$/$$   /$$/$$$$$$$$/$$$$$$$$
| $$$$$  | $|____ /$$|____ /$$| $$$$$$$| $$  | $|____ /$$|____ /$$/
| $$__/  | $$  /$$$$/   /$$$$/| $$__  $| $$  | $$  /$$$$/   /$$$$/ 
| $$     | $$ /$$__/   /$$__/ | $$  \ $| $$  | $$ /$$__/   /$$__/  
| $$     | $$/$$$$$$$$/$$$$$$$| $$$$$$$|  $$$$$$//$$$$$$$$/$$$$$$$$
|__/     |__|________|________|_______/ \______/|________|________/
                                                                  
&quot;&quot;&quot;)   
print('''

  /$$$$$$                                
 /$$__  $$                               
| $$  \__/ /$$$$$$ /$$$$$$/$$$$  /$$$$$$ 
| $$ /$$$$|____  $| $$_  $$_  $$/$$__  $$
| $$|_  $$ /$$$$$$| $$ \ $$ \ $| $$$$$$$$
| $$  \ $$/$$__  $| $$ | $$ | $| $$_____/
|  $$$$$$|  $$$$$$| $$ | $$ | $|  $$$$$$$
 \______/ \_______|__/ |__/ |__/\_______/
                                     
''')

while(ch == 'y'):
    n=int(input(&quot;Enter a Number : &quot;))
    winLoose=fizzbuzzgame(n)
    if(winLoose == &quot;fz&quot;):
        fizz+=1
    elif(winLoose == &quot;bz&quot;):
        buzz+=1
    elif(winLoose == &quot;fzbz&quot;):
        fizzbuzz+=1
    ch=input(&quot;Do you want to continue playing the game : (y/n)&quot;)
    if(ch=='n'):
        print('Congratulations, your score is\n FizzBuzz:%d\nFizz:%d\nBuzz:%d' %
(fizzbuzz,fizz,buzz))
    
'''Sample Output:

 /$$$$$$$$/$$                  /$$$$$$$                            
| $$_____|__/                 | $$__  $$                           
| $$      /$$/$$$$$$$$/$$$$$$$| $$  \ $$/$$   /$$/$$$$$$$$/$$$$$$$$
| $$$$$  | $|____ /$$|____ /$$| $$$$$$$| $$  | $|____ /$$|____ /$$/
| $$__/  | $$  /$$$$/   /$$$$/| $$__  $| $$  | $$  /$$$$/   /$$$$/ 
| $$     | $$ /$$__/   /$$__/ | $$  \ $| $$  | $$ /$$__/   /$$__/  
| $$     | $$/$$$$$$$$/$$$$$$$| $$$$$$$|  $$$$$$//$$$$$$$$/$$$$$$$$
|__/     |__|________|________|_______/ \______/|________|________/
                                                                                                                                   

  /$$$$$$                                
 /$$__  $$                               
| $$  \__/ /$$$$$$ /$$$$$$/$$$$  /$$$$$$ 
| $$ /$$$$|____  $| $$_  $$_  $$/$$__  $$
| $$|_  $$ /$$$$$$| $$ \ $$ \ $| $$$$$$$$
| $$  \ $$/$$__  $| $$ | $$ | $| $$_____/
|  $$$$$$|  $$$$$$| $$ | $$ | $|  $$$$$$$
 \______/ \_______|__/ |__/ |__/\_______/
                                         

Enter a Number : 666
666 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 777
777 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 555
555 FizzBuzz
Do you want to continue playing the game : (y/n)y
Enter a Number : 1
1
Do you want to continue playing the game : (y/n)y
Enter a Number : 789
789 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 25
25 Buzz
Do you want to continue playing the game : (y/n)n
Congratulations, your score is

FizzBuzz:1
Fizz:3
Buzz:1

&lt;/pre&gt;

[[#Top]]

=Crowd Computing: Just Estimate=

Crowd computing is conceptualised in various ways as being related to crowdsourcing, human computation, social computing, cloud computing and mobile computing. 

Crowd computing has been described in various ways viz. 
&lt;ul&gt;&lt;li&gt;distribution of human intelligence tasks to mobile devices&lt;/li&gt;
 cloud computing with humans, human problem solving with large numbers of people using computers&lt;/ol&gt; 

Broadly, crowed computing is a set of human interaction tools for idea exchange and non-hierarchical decision making. 

From the literature four common characteristics can be identified to define the boundaries of the term, i.e.: participation by a crowd of humans, interaction with computing technology, activity that is predetermined by the initiator or application itself and the execution of tasks by the crowd utilising innate human capabilities.
==Wisdom of Crowds==
 &lt;p style=&quot;text-align:justify&quot;&gt;
The concept of ’Wisdom of Crowds’ was proposed by ''Francis Galton''. A weight-judging competition was carried on at the annual show of the West of England Fat Stock and Poultry Exhibition recently held at Plymouth, A fat ox having been selected, competitors bought stamped and numbered cards, each, on which to inscribe their respective names, addresses, and estimates of what the ox would weigh after it had been slaughtered. Those who guessed most successfully received prizes. About 8oo tickets were issued to the par- ticipants. The middlemost estimate of all the estimates recorded was 1207 lbs and the actual weight of the ox was 1198 lbs.&lt;/p&gt;

==Our Experiment==
 &lt;p style=&quot;text-align:justify&quot;&gt;
The crowd had to guess the number of candies/gems in a jar. Around 75 people participated in the experiment. The actual number of gems in the jar were 375. The median of all estimates came out to be 300 and the mean of all the estimates came out to be around 396. Median underestimated and mean overestimated the actual value. So according to recent studies, Trimmed mean must be used as an aggregate measure to estimate where Wisdom of Crowds is involved.
&lt;/p&gt;
[[File:Gemsjar.jpg|center|200px|caption]]

===Trimmed Mean===
 &lt;p style=&quot;text-align:justify&quot;&gt;
In these kinds of experiments, 10% trimmed mean is usually followed. For calculating 10% trimmed mean, remove 10% smallest and 10% largest values from the sample. Calculate the mean of the sample obtained. In the above experiment, the trimmed mean came out to be around 351 which is very close to the actual value.&lt;/p&gt;

==Implementation==
Here, we try to demonstrate the concept of trimmed mean through crowd computing.
&lt;ol&gt;
&lt;li&gt; Input a list of estimates done by the crowd .&lt;/li&gt;
&lt;li&gt; Sort the list.&lt;/li&gt;
&lt;li&gt; Remove the 10% smallest values.&lt;/li&gt;
&lt;li&gt; Remove the 10% largest values.
&lt;li&gt; Calculate the mean of the new list obtained .&lt;/li&gt;&lt;/ol&gt;&lt;hr&gt;

==Data of Experiment==       
    Estimates =[1000,1010,1786,2000,1500,1500,100,120,150,150,150,170,175,180,197,200,200,200,200,200,200,220,220,220,220,234,250,250,250,250,250,250,250,250,250,263,270,275,275,286,300,
                300,300,300,300,300,300,300,320,350,350,350,400, 400,400,400,400,450,467,500,500,500,500,500,500,500,550,550,600,600,600,650,700,700,720]

    '''CODE:'''
&lt;pre&gt;
Estimates = [1000,1010,1786,2000,1500,1500,100,120,150,150,150,170,175,180,197,200,200,200,200,200,200,220,220,220,220,234,250,250,250,250,250,250,250,250,250,263,270,275,275,286,300,                300,300,300,300,300,300,300,320,350,350,350,400,400,400,400,400,450,467,500,500,500,500,500,500,500,550,550,600,600,600,650,700,700,720]
Estimates.sort()
offset = int(0.10*len(Estimates))
for i in range(offset):
       del Estimates[0]
       del Estimates[-1]
Sum = 0    
for i in range(len(Estimates)):
       Sum += Estimates[i]
Mean_Value = Sum/len(Estimates)
print(&quot;Mean : &quot;, int(Mean_Value))
#Output:
Mean :  351
&lt;/pre&gt;
&lt;hr&gt;
==Trimmed Mean for the above example== 
&lt;h3&gt;Using scipy library&lt;/h3&gt;
&lt;pre&gt;
#import scipy to use the method of trim_mean
from scipy import stats
trimMean = stats.trim_mean(Estimates, 0.1) # Trim 10% at both ends
print(&quot;Trimmed Mean : &quot;,trimMean)
#Output:
Trimmed Mean :  335.1020408163265
&lt;/pre&gt;

&lt;h3&gt;Without using scipy library&lt;/h3&gt;
&lt;pre&gt;
#Trimmed mean with 10%
p=10/100
#sorted data
data=[2, 4, 6, 7, 11, 21, 81, 90, 105, 121]
n = len(data)
#Remove elements from both end
rem=int(n*p)
newData = data[rem:-rem]
mean = 0
for i in newData:
    mean += i
mean = int(mean/len(newData))
print(&quot;Trimmed mean : &quot;,mean)
#Output: Trimmed mean :  40
&lt;/pre&gt;
[[#Top]]

=Jumbled_Words Permutations: Jumbled Words=
==What are Permutations ?==
A permutation also called ordering of selected number of elements from a list denoted by nPr here we are choosing all elements of a list and so n=r&lt;br&gt;
nPr=n!/(n-r)!&lt;br&gt; as n=r
nPn=n!&lt;br&gt; which gives all possible arrangement of elements present in a list.

 For example, permutations of list [1,2,3] are [1,2,3], [1,3,2], [2,1,3], [2,3,1], 
[3,1,2], and [3,2,1]. 
The number of permutations of a list of elements nPn is given by n!. For example, there are 2! = 2 x 1 = 2 permutations of [1,2], namely [1,2] and [2,1], and 3! = 3 x 2 x 1 = 6 permutations of [1,2,3], as mentioned above.&lt;br/&gt;
[[File:Permutations.jpg]]

==Implementation==
 &lt;p style=&quot;text-align:justify&quot;&gt;
Here, we try to demonstrate the concept of permutations through jumbled words. It is a two player game in which one person presents the other person a different permutation of the word in his mind. The other person has to guess the right word. If he guesses, the he wins otherwise he loses.&lt;/p&gt;
 Input an list of words.
 Randomly pick a word from the list of words .
 Shuffle this word and present it to the other player.
 if word guesses by the player is same as the one picked from list of w
     player wins
 else
     player loses

ALTERNATE CODE TO GENERATE THIS GAME:
&lt;pre&gt;
import random
p1=input(&quot;enter player 1 name:&quot;)
p2=input(&quot;enter player 2 name:&quot;)
l=[&quot;rainbow&quot;,&quot;computer&quot;,&quot;robot&quot;,&quot;butter&quot;,&quot;vegetable&quot;,&quot;science&quot;,&quot;correct&quot;]
c1=c2=a1=a2=f1=f2=0
k=1
i=3
def play():
    n=random.choice(l)        ##n=chooses a word from list l
    l1=[]
    for j in n:
       l1.append(j)      ##creates a list for word in n
    for t in range(len(l1)):
       p=random.choice(l1)     ##this randomly displays letters in the list
       print(p)
       l1.remove(p)          ##to avoid the repetition of a letter
    s=input(&quot;enter the word:&quot;)
    if(s==n):
        print(&quot;correct&quot;)
        return 1
    else:
        print(&quot;not correct&quot;)
        print(&quot;answer is&quot;,n)
        return 0
def stat():
     print(&quot;player 1:&quot;)
     print(&quot;score:&quot;,c1)
     print(&quot;answered:&quot;,a1)
     print(&quot;failed:&quot;,f1)
     print(&quot;.............&quot;)
     print(&quot;player 2:&quot;)
     print(&quot;score:&quot;,c2)
     print(&quot;answered:&quot;,a2)
     print(&quot;failed&quot;,f2)
     if(c1&gt;c2):
         print(p1,&quot; won over &quot;,p2)
     elif(c1==c2):
         print(&quot;draw game&quot;)
     else:
         print(p2,&quot; won over &quot;,p1) 
while(i!=4):
      if(i==3):
         if(k==1):
             print(&quot;player 1 turn&quot;)
             print(&quot;your jumbled word is:&quot;)
             k=k+1
             m=play()
             if(m==1):      ##if guessed answer is correct,then score and no.of answered count will be increased
                c1+=1
                a1+=1
             else:
                f1+=1       ##else count of no.of failed to answered will be incremented
         else:
             print(&quot;player 2 turn&quot;)
             print(&quot;your jumbled word is:&quot;)
             k=k-1
             m=play()
             if(m==1):
                c2=c2+1
                a2=a2+1
             else:
                f2=f2+1
       if(i==2):
             print(&quot;present status&quot;)
             stat()
       i=int(input(&quot;enter your choice  1.stop 2.status 3.continue&quot;))
       if(i==1):
             stat()
             i=i+3
&lt;/pre&gt;
&lt;hr&gt;

[[#Top]]

=== JumbledWord Simple Logic, In Short ===
[[File:jumbledWord.gif]]
---
&lt;hr&gt;
'''Logic to create a Jumbled Word'''
&lt;hr&gt;
&lt;pre&gt;
#Get Jumbled Word and print it Horizontally
import random

def getJumbledWord(b):
    jumble=''
    l1 = [ b[i] for i in range(0, len(b)) ]
    for t in range(len(l1)):
       p=random.choice(l1)  #this randomly gets letters from the list      
       jumble=jumble+p       
       l1.remove(p)
    return jumble

b=input(&quot;Enter a word to make it jumbled : &quot;)
print(&quot;Jumbled Word : &quot;, getJumbledWord(b))
&lt;/pre&gt;
&lt;pre&gt;
Output:
Enter a word to make it jumbled : live and let live others
Jumbled Word :  vel  toldeisrte aihv len
==========================================
Enter a word to make it jumbled : junkfood
Jumbled Word :  nfukdooj
&lt;/pre&gt;
&lt;hr&gt;
'''Another Logic to create a Jumbled Word'''
&lt;hr&gt;
&lt;pre&gt;
import random
b=input(&quot;Enter a word to make it jumbled : &quot;)

def getJumbledWord1(b):
    l1 = [ b[i] for i in range(0, len(b)) ]
    random.shuffle(l1)
    str1 = ''.join(l1)
    return str1

print(&quot;Jumbled Word : &quot;, getJumbledWord1(b))
&lt;/pre&gt;

====Sample Output:====
&lt;pre&gt;
---- Output1 
Enter a word to make it jumbled : butter
Jumbled Word :  tbture

---- Output2 
Enter a word to make it jumbled : petriotism
Jumbled Word :  pittrosime
&lt;/pre&gt;

=Theory of Evolution=

== What is Evolution ? ==
Evolution is the change in heritable characteristics over successive generations. The theory of evolution explains that DNA, which acts as a carrier of genetic information from one generation to other, tends to change or mutate occasionally. These changes are reflected in next generations to come. This is how life has evolved on earth from bacteria to human beings.&lt;br&gt;
[[File:Evolution.png|500px]]

== Implementation ==
 &lt;p style=&quot;text-align:justify&quot;&gt;
An array representing DNA is stored in a file. As genes are forms of DNA, they contain information to be transferred to forthcoming generations. Assume that information is in the form of bits (in the form of 0s and 1s). A number is picked randomly from 1 to the size of the array. A new parameter has been introduced which decides whether mutation would occur or not. If the value of this new parameter is 1 (It is picked randomly from 1 to 100), then only change is reflected down the generations, otherwise it is not. The pseudo code is as follows :
&lt;/p&gt;
Input an array containing genetic information .
Randomly generate a number (say m) from 1 to length of the array. Randomly generate other number (say p) from 1 to 100.

&lt;pre&gt; 
    if p is equal to 1 then 
        if m is 1 then
          set it to 0
        else
          set it to 1
&lt;/pre&gt;
[[#TOP]]</text>
      <sha1>dq2dq2i3zubbcnvkfapv3vgkgsr4job</sha1>
    </revision>
    <revision>
      <id>3769</id>
      <parentid>3768</parentid>
      <timestamp>2018-09-29T04:30:52Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* Crowd Computing: Just Estimate */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="31603">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_3 Contributors of this page]
*Week 3 Playlist: https://www.youtube.com/playlist?list=PLc_j0TNIaWxOVx_z9jAM2UB3RqYNXaoEo
=List=
List is a flexible data structure used for storing a group of data separated by comma. The elements in a list need not be of the same data type.

'''Example:'''
       List_1 = [ 1, 2,3] or 
       List_1 = [&quot;coffee&quot;, &quot;Tea&quot;, &quot;Milk&quot;] or
       List_1 = [1,&quot;coffee&quot;, &quot;Tea&quot;, 3, &quot;5&quot;]

==List Creation==
a) A list can be created by simply putting values (separated by comma) between square
 brackets as given below,
&lt;pre&gt;List_1 = [1,&quot;coffee&quot;, &quot;Tea&quot;, 3, &quot;5&quot;] #this creates a list by name List_1 containing
 following items
&lt;/pre&gt;


Or,
(b)A List can be created from scratch and elements can be added 
&lt;pre&gt;
        List_2 = [ ]
        List_2.append(&quot;Kala&quot;)
        List_2.append(&quot;Mala&quot;)
&lt;/pre&gt;
Here we use &quot;append&quot;, which is a function in python that enable us to append or attach an element to a list .
&lt;pre&gt;Thus List_2 will now hold [&quot;Kala&quot;,&quot;Mala&quot;]&lt;/pre&gt;

[[#Top]]

==Operations and Methods to work with List==
&lt;pre&gt;
a = [25,30,50,90,12,13]
b = [100,300,500,200,250]
&lt;/pre&gt;
&lt;hr&gt;
&lt;table border=2&gt;
  &lt;tr&gt;
    &lt;th&gt;&lt;b&gt;Method/&lt;br&gt;Operator&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Function&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Syntax&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Output&lt;/b&gt;&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;len()&lt;/td&gt;
    &lt;td&gt;Find length of a list&lt;/td&gt;
    &lt;td&gt;len(a)&lt;/td&gt;
    &lt;td&gt;6&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;max()&lt;/td&gt;
    &lt;td&gt;Find maximum element from the list&lt;/td&gt;
    &lt;td&gt;max(a)&lt;/td&gt;
    &lt;td&gt;90&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;min()&lt;/td&gt;
    &lt;td&gt;Find minimum element from the list&lt;/td&gt;
    &lt;td&gt;min(a)&lt;/td&gt;
    &lt;td&gt;12&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sum()&lt;/td&gt;
    &lt;td&gt;Returns sum of all elements of the list&lt;/td&gt;
    &lt;td&gt;sum(a)&lt;/td&gt;
    &lt;td&gt;220&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;reverse()&lt;/td&gt;
    &lt;td&gt;Reverses the original list&lt;/td&gt;
    &lt;td&gt;a.reverse()&lt;/td&gt;
    &lt;td&gt;[13, 12, 90, 50, 30, 25]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sort()&lt;/td&gt;
    &lt;td&gt;Sorts the original list in ascending order&lt;/td&gt;
    &lt;td&gt;a.sort()&lt;/td&gt;
    &lt;td&gt;[12, 13, 25, 30, 50, 90]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sorted()&lt;/td&gt;
    &lt;td&gt;Returns the new sorted list &lt;/td&gt;
    &lt;td&gt;sorted(a)&lt;/td&gt;
    &lt;td&gt;[12, 13, 25, 30, 50, 90]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;insert()&lt;/td&gt;
    &lt;td&gt;Insert at a particular index in the list, and shifts remaining elements&lt;/td&gt;
    &lt;td&gt;a.insert(3,3)&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 3, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;append()&lt;/td&gt;
    &lt;td&gt;Adds elements/object to the end of the list&lt;/td&gt;
    &lt;td&gt;a.append(5)&lt;br&gt;a.append([10,20])&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 5]&lt;br&gt;[25, 30, 50, 90, 12, 13, [10, 20]]&lt;br&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;extend()&lt;/td&gt;
    &lt;td&gt;Adds object to the end of the list as elements not as object&lt;/td&gt;
    &lt;td&gt;a.extend([10,20])&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 10, 20]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;*&amp;nbsp;&amp;nbsp;Repeatation&lt;br&gt;operator&lt;/td&gt;
    &lt;td&gt;Repeat the list for n times and returns a new list&lt;/td&gt;
    &lt;td&gt;a*2&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 25, 30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;+ Concatenation&lt;br&gt;operator&lt;/td&gt;
    &lt;td&gt;Concatenates two lists, and returns a new list&lt;/td&gt;
    &lt;td&gt;a+b&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 100, 300, 500, 200, 250]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;index()&lt;/td&gt;
    &lt;td&gt;Finds index of a particular element in the list or not&lt;/td&gt;
    &lt;td&gt;a.index(25)&lt;br&gt;a.index(0)&lt;br&gt;&lt;/td&gt;
    &lt;td&gt;0&lt;br&gt;&lt;br&gt;ValueError: 0 is not in list&lt;br&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;in operator&lt;/td&gt;
    &lt;td&gt;Finds whether a particular element is in the list or not, returns boolean&lt;/td&gt;
    &lt;td&gt;25 in a&lt;/td&gt;
    &lt;td&gt;True&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;not in operator&lt;/td&gt;
    &lt;td&gt;Checks if element is not available in list, returns boolean&lt;/td&gt;
    &lt;td&gt;25 not in a&lt;/td&gt;
    &lt;td&gt;False&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;count()&lt;/td&gt;
    &lt;td&gt;Counts the number of occurence of an element in the list&lt;/td&gt;
    &lt;td&gt;a.count(25)&lt;/td&gt;
    &lt;td&gt;1&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;remove()&lt;/td&gt;
    &lt;td&gt;Removes an element from the list&lt;/td&gt;
    &lt;td&gt;a.remove(25)&lt;/td&gt;
    &lt;td&gt; [30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;pop()&lt;/td&gt;
    &lt;td&gt;Delete and return item at index 0&lt;/td&gt;
    &lt;td&gt;a.pop(0)&lt;/td&gt;
    &lt;td&gt;25 , a will be [30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;del&lt;/td&gt;
    &lt;td&gt;Deletes item at a particular index from the list&lt;/td&gt;
    &lt;td&gt;del a[0]&lt;/td&gt;
    &lt;td&gt;[30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;all()&lt;/td&gt;
&lt;td&gt;Returns True, if all items in list are True or it is an empty list&lt;/td&gt;
&lt;td&gt;all([True, True, True])
all([])
&lt;/td&gt;
&lt;td&gt;True&lt;br&gt;
True&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;any()&lt;/td&gt;
&lt;td&gt;Returns True, if any item in list is True else return False&lt;/td&gt;
&lt;td&gt;any([True, True, True])&lt;br&gt;
any([True, False, True])&lt;br&gt;
any([])&lt;/td&gt;
&lt;td&gt;True&lt;br&gt;False&lt;br&gt;False&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;

==Printing the List==
=== Print whole list ===
A list can be printed simply or using a ''for / while'' loop 

 print(List_2)     # To print the entire list
This code will print      
 ['Kala','Mala']     

===Print element at a particular index===
&lt;pre&gt;
Using index position
    List_2[0]     # prints 'Kala' ,i.e,the value at index position 0.
    List_2[1]     # prints 'Mala'.
&lt;/pre&gt;
=== Without using index position ===
&lt;pre&gt;
for item in List_2:   # here item is a variable used to access elements in list.
       print(item)
   This code snippet prints 
    Kala
    Mala
&lt;/pre&gt;
[[#Top]]

==Search for a particular element in list==
Elements in a list can be searched by one of the two ways:
=== using index() function===
&lt;pre&gt;
ages1 = [11,23,12,23,45]

#if element is available in the list, index() returns the index value on which, the element is
 present.
print(ages1.index(45))#Output: 4

#if element is not available in the list, index() returns ''ValueError''
print(ages1.index(0))#Output: ValueError:
&lt;/pre&gt;

In programming, if such error occurs, program gets terminated. It can be solved using exception handling.
 
e.g.
&lt;pre&gt;
ages1 = [11,23,12,23,45]

try:
    print(ages1.index(0))
except ValueError:
    print(&quot;Exception has occured&quot;)    
    print(&quot;Element is not found in the list&quot;)

&lt;/pre&gt;
&lt;pre&gt;
'''Output: 
Exception has occured
Element is not found in the list
'''&lt;/pre&gt;
[[#Top]]

=== using 'in' operator===
''in'' operator is used to check whether a particular element is available in the list or not.e.g.

&lt;pre&gt;
ages1 = [11,23,12,23,45]
no=11

if no in ages1:
    print(&quot;no is there in the list&quot;)
else:    
    print(&quot;no is NOT there in the list&quot;)
&lt;/pre&gt;
&lt;pre&gt;
#Output: no is there in the list
&lt;/pre&gt;


'''Number is not there in the list'''
&lt;pre&gt;
ages1 = [11,23,12,23,45]
no=15

if no in ages1:
    print(&quot;no is there in the list&quot;)
else:    
    print(&quot;no is NOT there in the list&quot;)
&lt;/pre&gt;
&lt;pre&gt;
Output: no is NOT there in the list
&lt;/pre&gt;
[[#Top]]

==Updating the List==
The lists can be updated using ''append'' or ''insert'' function.  Append adds the element to the end of the list and Insert adds the element in the specified position.
&lt;pre&gt;
   # add the element 'Sheela' to the end of the list.
   List_2.append(&quot;Sheela&quot;)    
   print (List_2) will output 
   ['Kala', 'Mala', 'Sheela']
&lt;/pre&gt;
   &lt;pre&gt;
# add the element &quot;Bala&quot; in the list at the index 1.
   List_2.insert(1,&quot;Bala&quot;)    
   print (List_2) will output 
   ['Kala', 'Bala','Mala', 'Sheela']
&lt;/pre&gt;

=== Extend the list by adding elements of other list at end using extend()===
&lt;pre&gt;
ages = [11,23,12,23,45]
ages.extend([57,58])
print(ages)
&lt;/pre&gt;

&lt;pre&gt;
#Output: [11, 23, 12, 23, 45, 57, 58]
&lt;/pre&gt;

==== Difference between ''append() and extend()'' ====
Difference between ''append()'' and ''extend()'' can be easily understood, by the following example.

&lt;pre&gt;
appendlist = [11,23,12,23,45]
appendlist.append([57,58])

extendlist= [11,23,12,23,45]
extendlist.extend([57,58])
&lt;/pre&gt;

&lt;pre&gt;
'''Output:
[11, 23, 12, 23, 45, [57, 58]]
[11, 23, 12, 23, 45, 57, 58]'''
&lt;/pre&gt;

[[#Top]]

==Basic Operations on List==
===Frequency of Occurrence===
list.count(object) will return the number of times the object occur in the list.
  '''Example'''
    ages = [11,23,12,23,45,43,22,24,23]
    ages.count(23) will return
    3
    ages.count(100) will return
    0

===Length of the List===
''len(list)'' will return the length of the list ie. the number of objects in the list.
  '''Example'''
&lt;pre&gt;
    ages = [11,23,12,23,45,43,22,24,23]
    len(ages) # Output: 9
&lt;/pre&gt;

To print the objects in the list either use ''for item in list'' or ''for index in range(len(list))''
&lt;pre&gt;
    for item in ages:       
        print (item)  
        (OR)
    for index in range(len(ages)) :
        print (ages[index])
&lt;/pre&gt;

===Sort the List===
''list.sort()'' will sort the list in ascending order
  '''Example'''
    ages = [11,23,12,23,45,43,22,24,23]
    ages.sort() 
    print (ages) 
    [11, 12, 22, 23, 23, 23, 24, 43, 45]

[[#Top]]

===Sort the List using sorted() function===
''sorted(list1)'' will sort the list and return a new list, it doesn't modify the original list
&lt;br&gt;'''Example: Sort in ascending order'''
&lt;pre&gt;
ages = [11,23,12,23,45,43,22,24,23]
newList=sorted(ages)
print(newList)

#Output: [11, 12, 22, 23, 23, 23, 24, 43, 45]
&lt;/pre&gt;

&lt;br&gt;'''Example: Sort in descending order'''
&lt;pre&gt;
ages = [11,23,12,23,45,43,22,24,23]
newList=sorted(ages,reverse=True)
print(newList)

#Output: [45, 43, 24, 23, 23, 23, 22, 12, 11]
&lt;/pre&gt;

===Reverse the List===
''list.reverse()'' will reverse the original list
  '''Example'''
    ages = [11, 12, 22, 23, 23, 23, 24, 43, 45]
    ages.reverse()
    print (ages)
    [45, 43, 24, 23, 23, 23, 22, 12, 11]

Both ''sort()'' and ''reverse()'' list operation will work on numeric and alphanumeric data list.

A special use of the ''reverse()'' function is to descend a list that is sorted in ascending order.

  '''Example'''
&lt;pre&gt;
ages = [11, 12, 22, 23, 23, 23, 24, 43, 45]
ages.sort()
print(ages)
ages.reverse()
print(ages)
&lt;/pre&gt;

[[#Top]]

===Slicing===
Used to retrieve an object or objects in a range as a list  
  '''Example'''

Use ''list[index]'' to retrieve the object at the given index
&lt;pre&gt;
In [1]: student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
In [2]: student[3]     #Object at index 3.  Remember index starts at 0
Out[2]: 'Geetha'      
&lt;/pre&gt;

Use ''list[start_index : end_index + 1]'' to retrieve objects from the start_index to end_index 
&lt;pre&gt;
In [3]: student[2:4]     # Objects from index 2 to 3 as List. Note the [ and ]
Out[3]: ['Vijay', 'Geetha']   
&lt;/pre&gt;

Use ''list[:]'' to retrieve objects from the starting of the list to the end of the list. 
The default start value will be the starting index of the list (i.e. 0) and the default end value
will be the length of the list 
&lt;pre&gt;
In [4]: student[:]        # prints the entire list
Out[4]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma', 'Janani']
&lt;/pre&gt;
&lt;pre&gt;
In [5]: student[:5]       # prints the objects from the start of the list upto object at index 4
Out[5]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran']
&lt;/pre&gt;
&lt;pre&gt;
In [6]: student[2:]       # prints the objects from index 2 upto the end of the list
Out[6]: ['Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma', 'Janani']
&lt;/pre&gt;

Negative index too is available in Python. It starts from last element of the list. i.e.
&lt;pre&gt;
In [7]:student[-1]        #prints last index of list
Out[7]: 'Janani'
&lt;/pre&gt;
&lt;pre&gt;
In [8]:student[-1:-8]     #prints empty list
Out[8]: []
&lt;/pre&gt;
&lt;pre&gt;
In [9]:student[-8:-1]     #prints -8th index to -1st index elements
Out[9]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma']
&lt;/pre&gt;

[[#Top]]

===Removing Item from list ===
----

Is used to remove a specific item from the list.

'''Example:'''
 
Use list.remove(entry/value)  Or   del list[index]    Or list.pop(index)
&lt;pre&gt;
student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
student.remove(&quot;Arun&quot;)   #This will delete item &quot;Arun&quot;
         Or    
del student[0]           # This will delete item at index 0
         Or
student.pop(0)         # This will delete and return item at index 0
print(student)    
Output: &quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
&lt;/pre&gt;

[[#Top]]

===Delete list ===
----
Used to delete complete list

'''Example'''

Use del &lt;list name&gt;
&lt;pre&gt;
student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
del student&lt;/pre&gt;

===Concatenation of two lists===
----
''+'' is the concatenation operator which is used concatenate two lists. 
&lt;pre&gt;
ages1 = [11,23,12,23,45]
ages2 = [25, 24, 43, 47]
age=ages1+ages2
print(age)
#Output: [11, 23, 12, 23, 45, 25, 24, 43, 47]
&lt;/pre&gt;

===Repeatation of a list ===
----
''*'' is the operator to repeat a particular list.
&lt;pre&gt;
ages1 = [11,23,12,23,45]
age=ages1*5 #ages1 list is repeated 5 times and stroed in ''age'' list
print(age)

#Output: [11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45]
&lt;/pre&gt;

=== all and any for List===
all() and any() are special functions to check whether all elements in iterable is ''True'' or any element is ''True''
&lt;ol&gt;
&lt;li&gt;If all elements in a list are ''True'', ''all()'' will return ''True''&lt;/li&gt;
&lt;li&gt;If iterable is ''empty'', ''all()'' will return ''True''&lt;/li&gt;
&lt;li&gt;If iterable contains at least one ''True'', ''any()'' will return ''True''&lt;/li&gt;
&lt;li&gt;If iterable is ''empty'', ''any()'' will return ''False''&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;
lsit=[True, True, True, True]
print(all(lsit))#Output: True
print(any(lsit))#Output: True

lsit1=[True, False, True, True]
print(all(lsit1))#Output: False
print(any(lsit1))#Output: True

lsit2=[False,False,False]
print(all(lsit2))#Output: False
print(any(lsit2))#Output: False

lsit3=[]
print(all(lsit3))#Output: True
print(any(lsit3))#Output: False
&lt;/pre&gt;

==Conditional Statements==
Conditionals are used to check the condition and change the flow of the program 
accordingly. They are realized in programming languages through if statement. The 
syntax is as follows :
&lt;pre&gt;
         if condition : 
            statement
&lt;/pre&gt;
    '''Note:''' Do not forget indentation (inserting space/tab) in the line after the
 if condition.
    
    In case you want to execute a set of statements when a condition is true and another

set of statement when the condition is false.
&lt;pre&gt;
         if condition : 
            statement 1
         else :
            statement 2
&lt;/pre&gt;

&lt;pre&gt;    
    Multiple if-else statements can be written as follows:
         if condition_1 : 
            statement 1
         elif condition_2 : # 'elif' is short for 'else if'
            statement 2
         elif condition_3 :
            statement 3
        .
        .
         else :
            final statement
&lt;/pre&gt;

[[#Top]]

=Loops and Conditionals : Fizzbuzz=
====Loops====
Loops are used to execute a set of repetitive statements. They are realised
through 'while' and 'for' loops in programming languages. The syntax of 'for' loop is 
as follows :
&lt;pre&gt;
for LOOPVARIABLE in SEQUENCE: 
            STATEMENTS&lt;/pre&gt;

    '''e.g.''' to print all the data from a list we can write:
&lt;pre&gt;
for item in list_name:
      print(item)&lt;/pre&gt;
    OR
&lt;pre&gt;
for index in range(len(list_name)):
      print(list_name[index])
 &lt;/pre&gt;   
    The syntax for while loop is as follows :
&lt;pre&gt;    
while BOOLEANEXPRESSION: 
     STATEMENTS
     INCREMENT/DECREMENT
&lt;/pre&gt;    
    '''e.g.''' if we want to print all numbers from 1 to 10
&lt;pre&gt;
i=1
while i&lt;=10 :
    print(i,&quot; &quot;)
    i=i+1
    &lt;/pre&gt;
 
'while' loop has indefinite iteration (run-time unknown). So, there must be loop,  break statement in it.
 Whereas 'for' loop is definite in nature (i.e. known or predictable span).&lt;br&gt;

&lt;b&gt;NOTE: Python doesn't have anything like do-while loop.&lt;/b&gt;

[[#Top]]

==Implementation==
Here, we try to demonstrate the concept of loops and conditionals through a game called Fizzbuzz. The rules are as follows :&lt;br/&gt;
[[File:fizzBuzz.gif]]

• if input number is a multiple of ’3’ print ”Fizz”
&lt;br/&gt;
• if input number is a multiple of ’5’ print ”Buzz”
&lt;br/&gt;
• if input number is a multiple of both '3' and ’5’ print ”FizzBuzz”
&lt;br/&gt;
The pseudo code is as follows :
&lt;pre&gt;
   If input no % 3 == 0 and  input no % 5 == 0 : 
       print ”Fizzbuzz”
   else if input no % 3 == 0 : 
       print ”Fizz”
   else if input no % 5 == 0 : 
       print ”Buzz”
   else :
       print the input no
&lt;/pre&gt;
 &lt;p style=&quot;text-align:justify&quot;&gt;
The order of statements execution matters to get the desired output. The highest priority condition should be first followed by other. In fizzbuzz programming, first checking should be done for both divisibility of 3 and 5. If condition not satisfied only then it should check individually for 3 or 5. So carefully choosing the order is crucial for better programming.
Note: There is some effect of present condition statements chosen on next conditions statements. That is why in first attempt fizzbuzz programming got struck.&lt;/p&gt;

Example: 
&lt;pre&gt;
#Code to achieve the above requirement in python3.
i = int(input(&quot;Enter the number&quot;)) 
if i%3 == 0 and i%5 == 0: print(i,&quot;FizzBuzz&quot;)  
elif i%5 == 0: print(i,&quot;Buzz&quot;)
elif i%3 == 0: print(i,&quot;Fizz&quot;)
else: print(i)
&lt;/pre&gt;
Lets put the same into a loop for a range given by the user.
&lt;pre&gt;
def fizzbuzzgame(start,stop):
    for i in range(start,stop+1):
        if i%3 == 0 and i%5 == 0:
            print(i,&quot;FizzBuzz&quot;)
        elif i%5 == 0:
            print(i,&quot;Buzz&quot;)
        elif i%3 == 0:
            print(i,&quot;Fizz&quot;)
        else: print(i)

fizzbuzzgame(50,100)
&lt;/pre&gt;
&lt;pre&gt;
#Output:
1235
Buzz
======================================
555
Fizzbuzz
======================================
1235
Buzz
======================================
999
Fizz
&lt;/pre&gt;

[[#Top]]

=== Fizz Buzz game in Interactive mode with Score ===
'''By Ms. Ami Tusharkant Choksi'''
&lt;pre&gt;
def fizzbuzzgame(i):
        if i%3 == 0 and i%5 == 0:
            print(i,&quot;FizzBuzz&quot;)
            return(&quot;fzbz&quot;)
        elif i%5 == 0:
            print(i,&quot;Buzz&quot;)
            return(&quot;bz&quot;)
        elif i%3 == 0:
            print(i,&quot;Fizz&quot;)
            return(&quot;fz&quot;)
        else:
            print(i)
            return(&quot;no&quot;)

ch = 'y'
fizzbuzz=0
fizz=0
buzz=0
nothing=0
print(&quot;&quot;&quot;

 /$$$$$$$$/$$                  /$$$$$$$                            
| $$_____|__/                 | $$__  $$                           
| $$      /$$/$$$$$$$$/$$$$$$$| $$  \ $$/$$   /$$/$$$$$$$$/$$$$$$$$
| $$$$$  | $|____ /$$|____ /$$| $$$$$$$| $$  | $|____ /$$|____ /$$/
| $$__/  | $$  /$$$$/   /$$$$/| $$__  $| $$  | $$  /$$$$/   /$$$$/ 
| $$     | $$ /$$__/   /$$__/ | $$  \ $| $$  | $$ /$$__/   /$$__/  
| $$     | $$/$$$$$$$$/$$$$$$$| $$$$$$$|  $$$$$$//$$$$$$$$/$$$$$$$$
|__/     |__|________|________|_______/ \______/|________|________/
                                                                  
&quot;&quot;&quot;)   
print('''

  /$$$$$$                                
 /$$__  $$                               
| $$  \__/ /$$$$$$ /$$$$$$/$$$$  /$$$$$$ 
| $$ /$$$$|____  $| $$_  $$_  $$/$$__  $$
| $$|_  $$ /$$$$$$| $$ \ $$ \ $| $$$$$$$$
| $$  \ $$/$$__  $| $$ | $$ | $| $$_____/
|  $$$$$$|  $$$$$$| $$ | $$ | $|  $$$$$$$
 \______/ \_______|__/ |__/ |__/\_______/
                                     
''')

while(ch == 'y'):
    n=int(input(&quot;Enter a Number : &quot;))
    winLoose=fizzbuzzgame(n)
    if(winLoose == &quot;fz&quot;):
        fizz+=1
    elif(winLoose == &quot;bz&quot;):
        buzz+=1
    elif(winLoose == &quot;fzbz&quot;):
        fizzbuzz+=1
    ch=input(&quot;Do you want to continue playing the game : (y/n)&quot;)
    if(ch=='n'):
        print('Congratulations, your score is\n FizzBuzz:%d\nFizz:%d\nBuzz:%d' %
(fizzbuzz,fizz,buzz))
    
'''Sample Output:

 /$$$$$$$$/$$                  /$$$$$$$                            
| $$_____|__/                 | $$__  $$                           
| $$      /$$/$$$$$$$$/$$$$$$$| $$  \ $$/$$   /$$/$$$$$$$$/$$$$$$$$
| $$$$$  | $|____ /$$|____ /$$| $$$$$$$| $$  | $|____ /$$|____ /$$/
| $$__/  | $$  /$$$$/   /$$$$/| $$__  $| $$  | $$  /$$$$/   /$$$$/ 
| $$     | $$ /$$__/   /$$__/ | $$  \ $| $$  | $$ /$$__/   /$$__/  
| $$     | $$/$$$$$$$$/$$$$$$$| $$$$$$$|  $$$$$$//$$$$$$$$/$$$$$$$$
|__/     |__|________|________|_______/ \______/|________|________/
                                                                                                                                   

  /$$$$$$                                
 /$$__  $$                               
| $$  \__/ /$$$$$$ /$$$$$$/$$$$  /$$$$$$ 
| $$ /$$$$|____  $| $$_  $$_  $$/$$__  $$
| $$|_  $$ /$$$$$$| $$ \ $$ \ $| $$$$$$$$
| $$  \ $$/$$__  $| $$ | $$ | $| $$_____/
|  $$$$$$|  $$$$$$| $$ | $$ | $|  $$$$$$$
 \______/ \_______|__/ |__/ |__/\_______/
                                         

Enter a Number : 666
666 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 777
777 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 555
555 FizzBuzz
Do you want to continue playing the game : (y/n)y
Enter a Number : 1
1
Do you want to continue playing the game : (y/n)y
Enter a Number : 789
789 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 25
25 Buzz
Do you want to continue playing the game : (y/n)n
Congratulations, your score is

FizzBuzz:1
Fizz:3
Buzz:1

&lt;/pre&gt;

[[#Top]]

=Crowd Computing: Just Estimate=

Crowd computing is conceptualised in various ways as being related to crowdsourcing, human computation, social computing, cloud computing and mobile computing. 

Crowd computing has been described in various ways viz. 
&lt;ul&gt;&lt;li&gt;distribution of human intelligence tasks to mobile devices&lt;/li&gt;
&lt;li&gt;cloud computing with humans&lt;/li&gt;
&lt;li&gt;human problem solving with large numbers of people using computers&lt;/li&gt;&lt;/ul&gt; 

Broadly, crowed computing is a set of human interaction tools for idea exchange and non-hierarchical decision making. 

Four common characteristics are used to identify the term: 
&lt;ol&gt;
&lt;li&gt;&lt;/li&gt;
&lt;li&gt;interaction with computing technology&lt;/li&gt;
&lt;li&gt;activity that is predetermined by the initiator or application itself&lt;/li&gt;
&lt;li&gt;the execution of tasks by the crowd utilising innate human capabilities.&lt;/li&gt;
&lt;/ol&gt;

==Wisdom of Crowds==
 &lt;p style=&quot;text-align:justify&quot;&gt;
The concept of ’Wisdom of Crowds’ was proposed by ''Francis Galton''. A weight-judging competition was carried on at the annual show of the West of England Fat Stock and Poultry Exhibition recently held at Plymouth, A fat ox having been selected, competitors bought stamped and numbered cards, each, on which to inscribe their respective names, addresses, and estimates of what the ox would weigh after it had been slaughtered. Those who guessed most successfully received prizes. About 8oo tickets were issued to the par- ticipants. The middlemost estimate of all the estimates recorded was 1207 lbs and the actual weight of the ox was 1198 lbs.&lt;/p&gt;

==Our Experiment==
 &lt;p style=&quot;text-align:justify&quot;&gt;
The crowd had to guess the number of candies/gems in a jar. Around 75 people participated in the experiment. The actual number of gems in the jar were 375. The median of all estimates came out to be 300 and the mean of all the estimates came out to be around 396. Median underestimated and mean overestimated the actual value. So according to recent studies, Trimmed mean must be used as an aggregate measure to estimate where Wisdom of Crowds is involved.
&lt;/p&gt;
[[File:Gemsjar.jpg|center|200px|caption]]

===Trimmed Mean===
 &lt;p style=&quot;text-align:justify&quot;&gt;
In these kinds of experiments, 10% trimmed mean is usually followed. For calculating 10% trimmed mean, remove 10% smallest and 10% largest values from the sample. Calculate the mean of the sample obtained. In the above experiment, the trimmed mean came out to be around 351 which is very close to the actual value.&lt;/p&gt;

==Implementation==
Here, we try to demonstrate the concept of trimmed mean through crowd computing.
&lt;ol&gt;
&lt;li&gt; Input a list of estimates done by the crowd .&lt;/li&gt;
&lt;li&gt; Sort the list.&lt;/li&gt;
&lt;li&gt; Remove the 10% smallest values.&lt;/li&gt;
&lt;li&gt; Remove the 10% largest values.
&lt;li&gt; Calculate the mean of the new list obtained .&lt;/li&gt;&lt;/ol&gt;&lt;hr&gt;

==Data of Experiment==       
    Estimates =[1000,1010,1786,2000,1500,1500,100,120,150,150,150,170,175,180,197,200,200,200,200,200,200,220,220,220,220,234,250,250,250,250,250,250,250,250,250,263,270,275,275,286,300,
                300,300,300,300,300,300,300,320,350,350,350,400, 400,400,400,400,450,467,500,500,500,500,500,500,500,550,550,600,600,600,650,700,700,720]

    '''CODE:'''
&lt;pre&gt;
Estimates = [1000,1010,1786,2000,1500,1500,100,120,150,150,150,170,175,180,197,200,200,200,200,200,200,220,220,220,220,234,250,250,250,250,250,250,250,250,250,263,270,275,275,286,300,                300,300,300,300,300,300,300,320,350,350,350,400,400,400,400,400,450,467,500,500,500,500,500,500,500,550,550,600,600,600,650,700,700,720]
Estimates.sort()
offset = int(0.10*len(Estimates))
for i in range(offset):
       del Estimates[0]
       del Estimates[-1]
Sum = 0    
for i in range(len(Estimates)):
       Sum += Estimates[i]
Mean_Value = Sum/len(Estimates)
print(&quot;Mean : &quot;, int(Mean_Value))
#Output:
Mean :  351
&lt;/pre&gt;
&lt;hr&gt;
==Trimmed Mean for the above example== 
&lt;h3&gt;Using scipy library&lt;/h3&gt;
&lt;pre&gt;
#import scipy to use the method of trim_mean
from scipy import stats
trimMean = stats.trim_mean(Estimates, 0.1) # Trim 10% at both ends
print(&quot;Trimmed Mean : &quot;,trimMean)
#Output:
Trimmed Mean :  335.1020408163265
&lt;/pre&gt;

&lt;h3&gt;Without using scipy library&lt;/h3&gt;
&lt;pre&gt;
#Trimmed mean with 10%
p=10/100
#sorted data
data=[2, 4, 6, 7, 11, 21, 81, 90, 105, 121]
n = len(data)
#Remove elements from both end
rem=int(n*p)
newData = data[rem:-rem]
mean = 0
for i in newData:
    mean += i
mean = int(mean/len(newData))
print(&quot;Trimmed mean : &quot;,mean)
#Output: Trimmed mean :  40
&lt;/pre&gt;
[[#Top]]

=Jumbled_Words Permutations: Jumbled Words=
==What are Permutations ?==
A permutation also called ordering of selected number of elements from a list denoted by nPr here we are choosing all elements of a list and so n=r&lt;br&gt;
nPr=n!/(n-r)!&lt;br&gt; as n=r
nPn=n!&lt;br&gt; which gives all possible arrangement of elements present in a list.

 For example, permutations of list [1,2,3] are [1,2,3], [1,3,2], [2,1,3], [2,3,1], 
[3,1,2], and [3,2,1]. 
The number of permutations of a list of elements nPn is given by n!. For example, there are 2! = 2 x 1 = 2 permutations of [1,2], namely [1,2] and [2,1], and 3! = 3 x 2 x 1 = 6 permutations of [1,2,3], as mentioned above.&lt;br/&gt;
[[File:Permutations.jpg]]

==Implementation==
 &lt;p style=&quot;text-align:justify&quot;&gt;
Here, we try to demonstrate the concept of permutations through jumbled words. It is a two player game in which one person presents the other person a different permutation of the word in his mind. The other person has to guess the right word. If he guesses, the he wins otherwise he loses.&lt;/p&gt;
 Input an list of words.
 Randomly pick a word from the list of words .
 Shuffle this word and present it to the other player.
 if word guesses by the player is same as the one picked from list of w
     player wins
 else
     player loses

ALTERNATE CODE TO GENERATE THIS GAME:
&lt;pre&gt;
import random
p1=input(&quot;enter player 1 name:&quot;)
p2=input(&quot;enter player 2 name:&quot;)
l=[&quot;rainbow&quot;,&quot;computer&quot;,&quot;robot&quot;,&quot;butter&quot;,&quot;vegetable&quot;,&quot;science&quot;,&quot;correct&quot;]
c1=c2=a1=a2=f1=f2=0
k=1
i=3
def play():
    n=random.choice(l)        ##n=chooses a word from list l
    l1=[]
    for j in n:
       l1.append(j)      ##creates a list for word in n
    for t in range(len(l1)):
       p=random.choice(l1)     ##this randomly displays letters in the list
       print(p)
       l1.remove(p)          ##to avoid the repetition of a letter
    s=input(&quot;enter the word:&quot;)
    if(s==n):
        print(&quot;correct&quot;)
        return 1
    else:
        print(&quot;not correct&quot;)
        print(&quot;answer is&quot;,n)
        return 0
def stat():
     print(&quot;player 1:&quot;)
     print(&quot;score:&quot;,c1)
     print(&quot;answered:&quot;,a1)
     print(&quot;failed:&quot;,f1)
     print(&quot;.............&quot;)
     print(&quot;player 2:&quot;)
     print(&quot;score:&quot;,c2)
     print(&quot;answered:&quot;,a2)
     print(&quot;failed&quot;,f2)
     if(c1&gt;c2):
         print(p1,&quot; won over &quot;,p2)
     elif(c1==c2):
         print(&quot;draw game&quot;)
     else:
         print(p2,&quot; won over &quot;,p1) 
while(i!=4):
      if(i==3):
         if(k==1):
             print(&quot;player 1 turn&quot;)
             print(&quot;your jumbled word is:&quot;)
             k=k+1
             m=play()
             if(m==1):      ##if guessed answer is correct,then score and no.of answered count will be increased
                c1+=1
                a1+=1
             else:
                f1+=1       ##else count of no.of failed to answered will be incremented
         else:
             print(&quot;player 2 turn&quot;)
             print(&quot;your jumbled word is:&quot;)
             k=k-1
             m=play()
             if(m==1):
                c2=c2+1
                a2=a2+1
             else:
                f2=f2+1
       if(i==2):
             print(&quot;present status&quot;)
             stat()
       i=int(input(&quot;enter your choice  1.stop 2.status 3.continue&quot;))
       if(i==1):
             stat()
             i=i+3
&lt;/pre&gt;
&lt;hr&gt;

[[#Top]]

=== JumbledWord Simple Logic, In Short ===
[[File:jumbledWord.gif]]
---
&lt;hr&gt;
'''Logic to create a Jumbled Word'''
&lt;hr&gt;
&lt;pre&gt;
#Get Jumbled Word and print it Horizontally
import random

def getJumbledWord(b):
    jumble=''
    l1 = [ b[i] for i in range(0, len(b)) ]
    for t in range(len(l1)):
       p=random.choice(l1)  #this randomly gets letters from the list      
       jumble=jumble+p       
       l1.remove(p)
    return jumble

b=input(&quot;Enter a word to make it jumbled : &quot;)
print(&quot;Jumbled Word : &quot;, getJumbledWord(b))
&lt;/pre&gt;
&lt;pre&gt;
Output:
Enter a word to make it jumbled : live and let live others
Jumbled Word :  vel  toldeisrte aihv len
==========================================
Enter a word to make it jumbled : junkfood
Jumbled Word :  nfukdooj
&lt;/pre&gt;
&lt;hr&gt;
'''Another Logic to create a Jumbled Word'''
&lt;hr&gt;
&lt;pre&gt;
import random
b=input(&quot;Enter a word to make it jumbled : &quot;)

def getJumbledWord1(b):
    l1 = [ b[i] for i in range(0, len(b)) ]
    random.shuffle(l1)
    str1 = ''.join(l1)
    return str1

print(&quot;Jumbled Word : &quot;, getJumbledWord1(b))
&lt;/pre&gt;

====Sample Output:====
&lt;pre&gt;
---- Output1 
Enter a word to make it jumbled : butter
Jumbled Word :  tbture

---- Output2 
Enter a word to make it jumbled : petriotism
Jumbled Word :  pittrosime
&lt;/pre&gt;

=Theory of Evolution=

== What is Evolution ? ==
Evolution is the change in heritable characteristics over successive generations. The theory of evolution explains that DNA, which acts as a carrier of genetic information from one generation to other, tends to change or mutate occasionally. These changes are reflected in next generations to come. This is how life has evolved on earth from bacteria to human beings.&lt;br&gt;
[[File:Evolution.png|500px]]

== Implementation ==
 &lt;p style=&quot;text-align:justify&quot;&gt;
An array representing DNA is stored in a file. As genes are forms of DNA, they contain information to be transferred to forthcoming generations. Assume that information is in the form of bits (in the form of 0s and 1s). A number is picked randomly from 1 to the size of the array. A new parameter has been introduced which decides whether mutation would occur or not. If the value of this new parameter is 1 (It is picked randomly from 1 to 100), then only change is reflected down the generations, otherwise it is not. The pseudo code is as follows :
&lt;/p&gt;
Input an array containing genetic information .
Randomly generate a number (say m) from 1 to length of the array. Randomly generate other number (say p) from 1 to 100.

&lt;pre&gt; 
    if p is equal to 1 then 
        if m is 1 then
          set it to 0
        else
          set it to 1
&lt;/pre&gt;
[[#TOP]]</text>
      <sha1>ewotbkdophf5w2qmxke068vzm60dpbb</sha1>
    </revision>
    <revision>
      <id>3770</id>
      <parentid>3769</parentid>
      <timestamp>2018-09-29T04:31:49Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* Crowd Computing: Just Estimate */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="31637">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_3 Contributors of this page]
*Week 3 Playlist: https://www.youtube.com/playlist?list=PLc_j0TNIaWxOVx_z9jAM2UB3RqYNXaoEo
=List=
List is a flexible data structure used for storing a group of data separated by comma. The elements in a list need not be of the same data type.

'''Example:'''
       List_1 = [ 1, 2,3] or 
       List_1 = [&quot;coffee&quot;, &quot;Tea&quot;, &quot;Milk&quot;] or
       List_1 = [1,&quot;coffee&quot;, &quot;Tea&quot;, 3, &quot;5&quot;]

==List Creation==
a) A list can be created by simply putting values (separated by comma) between square
 brackets as given below,
&lt;pre&gt;List_1 = [1,&quot;coffee&quot;, &quot;Tea&quot;, 3, &quot;5&quot;] #this creates a list by name List_1 containing
 following items
&lt;/pre&gt;


Or,
(b)A List can be created from scratch and elements can be added 
&lt;pre&gt;
        List_2 = [ ]
        List_2.append(&quot;Kala&quot;)
        List_2.append(&quot;Mala&quot;)
&lt;/pre&gt;
Here we use &quot;append&quot;, which is a function in python that enable us to append or attach an element to a list .
&lt;pre&gt;Thus List_2 will now hold [&quot;Kala&quot;,&quot;Mala&quot;]&lt;/pre&gt;

[[#Top]]

==Operations and Methods to work with List==
&lt;pre&gt;
a = [25,30,50,90,12,13]
b = [100,300,500,200,250]
&lt;/pre&gt;
&lt;hr&gt;
&lt;table border=2&gt;
  &lt;tr&gt;
    &lt;th&gt;&lt;b&gt;Method/&lt;br&gt;Operator&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Function&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Syntax&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Output&lt;/b&gt;&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;len()&lt;/td&gt;
    &lt;td&gt;Find length of a list&lt;/td&gt;
    &lt;td&gt;len(a)&lt;/td&gt;
    &lt;td&gt;6&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;max()&lt;/td&gt;
    &lt;td&gt;Find maximum element from the list&lt;/td&gt;
    &lt;td&gt;max(a)&lt;/td&gt;
    &lt;td&gt;90&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;min()&lt;/td&gt;
    &lt;td&gt;Find minimum element from the list&lt;/td&gt;
    &lt;td&gt;min(a)&lt;/td&gt;
    &lt;td&gt;12&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sum()&lt;/td&gt;
    &lt;td&gt;Returns sum of all elements of the list&lt;/td&gt;
    &lt;td&gt;sum(a)&lt;/td&gt;
    &lt;td&gt;220&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;reverse()&lt;/td&gt;
    &lt;td&gt;Reverses the original list&lt;/td&gt;
    &lt;td&gt;a.reverse()&lt;/td&gt;
    &lt;td&gt;[13, 12, 90, 50, 30, 25]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sort()&lt;/td&gt;
    &lt;td&gt;Sorts the original list in ascending order&lt;/td&gt;
    &lt;td&gt;a.sort()&lt;/td&gt;
    &lt;td&gt;[12, 13, 25, 30, 50, 90]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sorted()&lt;/td&gt;
    &lt;td&gt;Returns the new sorted list &lt;/td&gt;
    &lt;td&gt;sorted(a)&lt;/td&gt;
    &lt;td&gt;[12, 13, 25, 30, 50, 90]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;insert()&lt;/td&gt;
    &lt;td&gt;Insert at a particular index in the list, and shifts remaining elements&lt;/td&gt;
    &lt;td&gt;a.insert(3,3)&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 3, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;append()&lt;/td&gt;
    &lt;td&gt;Adds elements/object to the end of the list&lt;/td&gt;
    &lt;td&gt;a.append(5)&lt;br&gt;a.append([10,20])&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 5]&lt;br&gt;[25, 30, 50, 90, 12, 13, [10, 20]]&lt;br&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;extend()&lt;/td&gt;
    &lt;td&gt;Adds object to the end of the list as elements not as object&lt;/td&gt;
    &lt;td&gt;a.extend([10,20])&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 10, 20]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;*&amp;nbsp;&amp;nbsp;Repeatation&lt;br&gt;operator&lt;/td&gt;
    &lt;td&gt;Repeat the list for n times and returns a new list&lt;/td&gt;
    &lt;td&gt;a*2&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 25, 30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;+ Concatenation&lt;br&gt;operator&lt;/td&gt;
    &lt;td&gt;Concatenates two lists, and returns a new list&lt;/td&gt;
    &lt;td&gt;a+b&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 100, 300, 500, 200, 250]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;index()&lt;/td&gt;
    &lt;td&gt;Finds index of a particular element in the list or not&lt;/td&gt;
    &lt;td&gt;a.index(25)&lt;br&gt;a.index(0)&lt;br&gt;&lt;/td&gt;
    &lt;td&gt;0&lt;br&gt;&lt;br&gt;ValueError: 0 is not in list&lt;br&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;in operator&lt;/td&gt;
    &lt;td&gt;Finds whether a particular element is in the list or not, returns boolean&lt;/td&gt;
    &lt;td&gt;25 in a&lt;/td&gt;
    &lt;td&gt;True&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;not in operator&lt;/td&gt;
    &lt;td&gt;Checks if element is not available in list, returns boolean&lt;/td&gt;
    &lt;td&gt;25 not in a&lt;/td&gt;
    &lt;td&gt;False&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;count()&lt;/td&gt;
    &lt;td&gt;Counts the number of occurence of an element in the list&lt;/td&gt;
    &lt;td&gt;a.count(25)&lt;/td&gt;
    &lt;td&gt;1&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;remove()&lt;/td&gt;
    &lt;td&gt;Removes an element from the list&lt;/td&gt;
    &lt;td&gt;a.remove(25)&lt;/td&gt;
    &lt;td&gt; [30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;pop()&lt;/td&gt;
    &lt;td&gt;Delete and return item at index 0&lt;/td&gt;
    &lt;td&gt;a.pop(0)&lt;/td&gt;
    &lt;td&gt;25 , a will be [30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;del&lt;/td&gt;
    &lt;td&gt;Deletes item at a particular index from the list&lt;/td&gt;
    &lt;td&gt;del a[0]&lt;/td&gt;
    &lt;td&gt;[30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;all()&lt;/td&gt;
&lt;td&gt;Returns True, if all items in list are True or it is an empty list&lt;/td&gt;
&lt;td&gt;all([True, True, True])
all([])
&lt;/td&gt;
&lt;td&gt;True&lt;br&gt;
True&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;any()&lt;/td&gt;
&lt;td&gt;Returns True, if any item in list is True else return False&lt;/td&gt;
&lt;td&gt;any([True, True, True])&lt;br&gt;
any([True, False, True])&lt;br&gt;
any([])&lt;/td&gt;
&lt;td&gt;True&lt;br&gt;False&lt;br&gt;False&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;

==Printing the List==
=== Print whole list ===
A list can be printed simply or using a ''for / while'' loop 

 print(List_2)     # To print the entire list
This code will print      
 ['Kala','Mala']     

===Print element at a particular index===
&lt;pre&gt;
Using index position
    List_2[0]     # prints 'Kala' ,i.e,the value at index position 0.
    List_2[1]     # prints 'Mala'.
&lt;/pre&gt;
=== Without using index position ===
&lt;pre&gt;
for item in List_2:   # here item is a variable used to access elements in list.
       print(item)
   This code snippet prints 
    Kala
    Mala
&lt;/pre&gt;
[[#Top]]

==Search for a particular element in list==
Elements in a list can be searched by one of the two ways:
=== using index() function===
&lt;pre&gt;
ages1 = [11,23,12,23,45]

#if element is available in the list, index() returns the index value on which, the element is
 present.
print(ages1.index(45))#Output: 4

#if element is not available in the list, index() returns ''ValueError''
print(ages1.index(0))#Output: ValueError:
&lt;/pre&gt;

In programming, if such error occurs, program gets terminated. It can be solved using exception handling.
 
e.g.
&lt;pre&gt;
ages1 = [11,23,12,23,45]

try:
    print(ages1.index(0))
except ValueError:
    print(&quot;Exception has occured&quot;)    
    print(&quot;Element is not found in the list&quot;)

&lt;/pre&gt;
&lt;pre&gt;
'''Output: 
Exception has occured
Element is not found in the list
'''&lt;/pre&gt;
[[#Top]]

=== using 'in' operator===
''in'' operator is used to check whether a particular element is available in the list or not.e.g.

&lt;pre&gt;
ages1 = [11,23,12,23,45]
no=11

if no in ages1:
    print(&quot;no is there in the list&quot;)
else:    
    print(&quot;no is NOT there in the list&quot;)
&lt;/pre&gt;
&lt;pre&gt;
#Output: no is there in the list
&lt;/pre&gt;


'''Number is not there in the list'''
&lt;pre&gt;
ages1 = [11,23,12,23,45]
no=15

if no in ages1:
    print(&quot;no is there in the list&quot;)
else:    
    print(&quot;no is NOT there in the list&quot;)
&lt;/pre&gt;
&lt;pre&gt;
Output: no is NOT there in the list
&lt;/pre&gt;
[[#Top]]

==Updating the List==
The lists can be updated using ''append'' or ''insert'' function.  Append adds the element to the end of the list and Insert adds the element in the specified position.
&lt;pre&gt;
   # add the element 'Sheela' to the end of the list.
   List_2.append(&quot;Sheela&quot;)    
   print (List_2) will output 
   ['Kala', 'Mala', 'Sheela']
&lt;/pre&gt;
   &lt;pre&gt;
# add the element &quot;Bala&quot; in the list at the index 1.
   List_2.insert(1,&quot;Bala&quot;)    
   print (List_2) will output 
   ['Kala', 'Bala','Mala', 'Sheela']
&lt;/pre&gt;

=== Extend the list by adding elements of other list at end using extend()===
&lt;pre&gt;
ages = [11,23,12,23,45]
ages.extend([57,58])
print(ages)
&lt;/pre&gt;

&lt;pre&gt;
#Output: [11, 23, 12, 23, 45, 57, 58]
&lt;/pre&gt;

==== Difference between ''append() and extend()'' ====
Difference between ''append()'' and ''extend()'' can be easily understood, by the following example.

&lt;pre&gt;
appendlist = [11,23,12,23,45]
appendlist.append([57,58])

extendlist= [11,23,12,23,45]
extendlist.extend([57,58])
&lt;/pre&gt;

&lt;pre&gt;
'''Output:
[11, 23, 12, 23, 45, [57, 58]]
[11, 23, 12, 23, 45, 57, 58]'''
&lt;/pre&gt;

[[#Top]]

==Basic Operations on List==
===Frequency of Occurrence===
list.count(object) will return the number of times the object occur in the list.
  '''Example'''
    ages = [11,23,12,23,45,43,22,24,23]
    ages.count(23) will return
    3
    ages.count(100) will return
    0

===Length of the List===
''len(list)'' will return the length of the list ie. the number of objects in the list.
  '''Example'''
&lt;pre&gt;
    ages = [11,23,12,23,45,43,22,24,23]
    len(ages) # Output: 9
&lt;/pre&gt;

To print the objects in the list either use ''for item in list'' or ''for index in range(len(list))''
&lt;pre&gt;
    for item in ages:       
        print (item)  
        (OR)
    for index in range(len(ages)) :
        print (ages[index])
&lt;/pre&gt;

===Sort the List===
''list.sort()'' will sort the list in ascending order
  '''Example'''
    ages = [11,23,12,23,45,43,22,24,23]
    ages.sort() 
    print (ages) 
    [11, 12, 22, 23, 23, 23, 24, 43, 45]

[[#Top]]

===Sort the List using sorted() function===
''sorted(list1)'' will sort the list and return a new list, it doesn't modify the original list
&lt;br&gt;'''Example: Sort in ascending order'''
&lt;pre&gt;
ages = [11,23,12,23,45,43,22,24,23]
newList=sorted(ages)
print(newList)

#Output: [11, 12, 22, 23, 23, 23, 24, 43, 45]
&lt;/pre&gt;

&lt;br&gt;'''Example: Sort in descending order'''
&lt;pre&gt;
ages = [11,23,12,23,45,43,22,24,23]
newList=sorted(ages,reverse=True)
print(newList)

#Output: [45, 43, 24, 23, 23, 23, 22, 12, 11]
&lt;/pre&gt;

===Reverse the List===
''list.reverse()'' will reverse the original list
  '''Example'''
    ages = [11, 12, 22, 23, 23, 23, 24, 43, 45]
    ages.reverse()
    print (ages)
    [45, 43, 24, 23, 23, 23, 22, 12, 11]

Both ''sort()'' and ''reverse()'' list operation will work on numeric and alphanumeric data list.

A special use of the ''reverse()'' function is to descend a list that is sorted in ascending order.

  '''Example'''
&lt;pre&gt;
ages = [11, 12, 22, 23, 23, 23, 24, 43, 45]
ages.sort()
print(ages)
ages.reverse()
print(ages)
&lt;/pre&gt;

[[#Top]]

===Slicing===
Used to retrieve an object or objects in a range as a list  
  '''Example'''

Use ''list[index]'' to retrieve the object at the given index
&lt;pre&gt;
In [1]: student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
In [2]: student[3]     #Object at index 3.  Remember index starts at 0
Out[2]: 'Geetha'      
&lt;/pre&gt;

Use ''list[start_index : end_index + 1]'' to retrieve objects from the start_index to end_index 
&lt;pre&gt;
In [3]: student[2:4]     # Objects from index 2 to 3 as List. Note the [ and ]
Out[3]: ['Vijay', 'Geetha']   
&lt;/pre&gt;

Use ''list[:]'' to retrieve objects from the starting of the list to the end of the list. 
The default start value will be the starting index of the list (i.e. 0) and the default end value
will be the length of the list 
&lt;pre&gt;
In [4]: student[:]        # prints the entire list
Out[4]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma', 'Janani']
&lt;/pre&gt;
&lt;pre&gt;
In [5]: student[:5]       # prints the objects from the start of the list upto object at index 4
Out[5]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran']
&lt;/pre&gt;
&lt;pre&gt;
In [6]: student[2:]       # prints the objects from index 2 upto the end of the list
Out[6]: ['Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma', 'Janani']
&lt;/pre&gt;

Negative index too is available in Python. It starts from last element of the list. i.e.
&lt;pre&gt;
In [7]:student[-1]        #prints last index of list
Out[7]: 'Janani'
&lt;/pre&gt;
&lt;pre&gt;
In [8]:student[-1:-8]     #prints empty list
Out[8]: []
&lt;/pre&gt;
&lt;pre&gt;
In [9]:student[-8:-1]     #prints -8th index to -1st index elements
Out[9]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma']
&lt;/pre&gt;

[[#Top]]

===Removing Item from list ===
----

Is used to remove a specific item from the list.

'''Example:'''
 
Use list.remove(entry/value)  Or   del list[index]    Or list.pop(index)
&lt;pre&gt;
student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
student.remove(&quot;Arun&quot;)   #This will delete item &quot;Arun&quot;
         Or    
del student[0]           # This will delete item at index 0
         Or
student.pop(0)         # This will delete and return item at index 0
print(student)    
Output: &quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
&lt;/pre&gt;

[[#Top]]

===Delete list ===
----
Used to delete complete list

'''Example'''

Use del &lt;list name&gt;
&lt;pre&gt;
student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
del student&lt;/pre&gt;

===Concatenation of two lists===
----
''+'' is the concatenation operator which is used concatenate two lists. 
&lt;pre&gt;
ages1 = [11,23,12,23,45]
ages2 = [25, 24, 43, 47]
age=ages1+ages2
print(age)
#Output: [11, 23, 12, 23, 45, 25, 24, 43, 47]
&lt;/pre&gt;

===Repeatation of a list ===
----
''*'' is the operator to repeat a particular list.
&lt;pre&gt;
ages1 = [11,23,12,23,45]
age=ages1*5 #ages1 list is repeated 5 times and stroed in ''age'' list
print(age)

#Output: [11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45]
&lt;/pre&gt;

=== all and any for List===
all() and any() are special functions to check whether all elements in iterable is ''True'' or any element is ''True''
&lt;ol&gt;
&lt;li&gt;If all elements in a list are ''True'', ''all()'' will return ''True''&lt;/li&gt;
&lt;li&gt;If iterable is ''empty'', ''all()'' will return ''True''&lt;/li&gt;
&lt;li&gt;If iterable contains at least one ''True'', ''any()'' will return ''True''&lt;/li&gt;
&lt;li&gt;If iterable is ''empty'', ''any()'' will return ''False''&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;
lsit=[True, True, True, True]
print(all(lsit))#Output: True
print(any(lsit))#Output: True

lsit1=[True, False, True, True]
print(all(lsit1))#Output: False
print(any(lsit1))#Output: True

lsit2=[False,False,False]
print(all(lsit2))#Output: False
print(any(lsit2))#Output: False

lsit3=[]
print(all(lsit3))#Output: True
print(any(lsit3))#Output: False
&lt;/pre&gt;

==Conditional Statements==
Conditionals are used to check the condition and change the flow of the program 
accordingly. They are realized in programming languages through if statement. The 
syntax is as follows :
&lt;pre&gt;
         if condition : 
            statement
&lt;/pre&gt;
    '''Note:''' Do not forget indentation (inserting space/tab) in the line after the
 if condition.
    
    In case you want to execute a set of statements when a condition is true and another

set of statement when the condition is false.
&lt;pre&gt;
         if condition : 
            statement 1
         else :
            statement 2
&lt;/pre&gt;

&lt;pre&gt;    
    Multiple if-else statements can be written as follows:
         if condition_1 : 
            statement 1
         elif condition_2 : # 'elif' is short for 'else if'
            statement 2
         elif condition_3 :
            statement 3
        .
        .
         else :
            final statement
&lt;/pre&gt;

[[#Top]]

=Loops and Conditionals : Fizzbuzz=
====Loops====
Loops are used to execute a set of repetitive statements. They are realised
through 'while' and 'for' loops in programming languages. The syntax of 'for' loop is 
as follows :
&lt;pre&gt;
for LOOPVARIABLE in SEQUENCE: 
            STATEMENTS&lt;/pre&gt;

    '''e.g.''' to print all the data from a list we can write:
&lt;pre&gt;
for item in list_name:
      print(item)&lt;/pre&gt;
    OR
&lt;pre&gt;
for index in range(len(list_name)):
      print(list_name[index])
 &lt;/pre&gt;   
    The syntax for while loop is as follows :
&lt;pre&gt;    
while BOOLEANEXPRESSION: 
     STATEMENTS
     INCREMENT/DECREMENT
&lt;/pre&gt;    
    '''e.g.''' if we want to print all numbers from 1 to 10
&lt;pre&gt;
i=1
while i&lt;=10 :
    print(i,&quot; &quot;)
    i=i+1
    &lt;/pre&gt;
 
'while' loop has indefinite iteration (run-time unknown). So, there must be loop,  break statement in it.
 Whereas 'for' loop is definite in nature (i.e. known or predictable span).&lt;br&gt;

&lt;b&gt;NOTE: Python doesn't have anything like do-while loop.&lt;/b&gt;

[[#Top]]

==Implementation==
Here, we try to demonstrate the concept of loops and conditionals through a game called Fizzbuzz. The rules are as follows :&lt;br/&gt;
[[File:fizzBuzz.gif]]

• if input number is a multiple of ’3’ print ”Fizz”
&lt;br/&gt;
• if input number is a multiple of ’5’ print ”Buzz”
&lt;br/&gt;
• if input number is a multiple of both '3' and ’5’ print ”FizzBuzz”
&lt;br/&gt;
The pseudo code is as follows :
&lt;pre&gt;
   If input no % 3 == 0 and  input no % 5 == 0 : 
       print ”Fizzbuzz”
   else if input no % 3 == 0 : 
       print ”Fizz”
   else if input no % 5 == 0 : 
       print ”Buzz”
   else :
       print the input no
&lt;/pre&gt;
 &lt;p style=&quot;text-align:justify&quot;&gt;
The order of statements execution matters to get the desired output. The highest priority condition should be first followed by other. In fizzbuzz programming, first checking should be done for both divisibility of 3 and 5. If condition not satisfied only then it should check individually for 3 or 5. So carefully choosing the order is crucial for better programming.
Note: There is some effect of present condition statements chosen on next conditions statements. That is why in first attempt fizzbuzz programming got struck.&lt;/p&gt;

Example: 
&lt;pre&gt;
#Code to achieve the above requirement in python3.
i = int(input(&quot;Enter the number&quot;)) 
if i%3 == 0 and i%5 == 0: print(i,&quot;FizzBuzz&quot;)  
elif i%5 == 0: print(i,&quot;Buzz&quot;)
elif i%3 == 0: print(i,&quot;Fizz&quot;)
else: print(i)
&lt;/pre&gt;
Lets put the same into a loop for a range given by the user.
&lt;pre&gt;
def fizzbuzzgame(start,stop):
    for i in range(start,stop+1):
        if i%3 == 0 and i%5 == 0:
            print(i,&quot;FizzBuzz&quot;)
        elif i%5 == 0:
            print(i,&quot;Buzz&quot;)
        elif i%3 == 0:
            print(i,&quot;Fizz&quot;)
        else: print(i)

fizzbuzzgame(50,100)
&lt;/pre&gt;
&lt;pre&gt;
#Output:
1235
Buzz
======================================
555
Fizzbuzz
======================================
1235
Buzz
======================================
999
Fizz
&lt;/pre&gt;

[[#Top]]

=== Fizz Buzz game in Interactive mode with Score ===
'''By Ms. Ami Tusharkant Choksi'''
&lt;pre&gt;
def fizzbuzzgame(i):
        if i%3 == 0 and i%5 == 0:
            print(i,&quot;FizzBuzz&quot;)
            return(&quot;fzbz&quot;)
        elif i%5 == 0:
            print(i,&quot;Buzz&quot;)
            return(&quot;bz&quot;)
        elif i%3 == 0:
            print(i,&quot;Fizz&quot;)
            return(&quot;fz&quot;)
        else:
            print(i)
            return(&quot;no&quot;)

ch = 'y'
fizzbuzz=0
fizz=0
buzz=0
nothing=0
print(&quot;&quot;&quot;

 /$$$$$$$$/$$                  /$$$$$$$                            
| $$_____|__/                 | $$__  $$                           
| $$      /$$/$$$$$$$$/$$$$$$$| $$  \ $$/$$   /$$/$$$$$$$$/$$$$$$$$
| $$$$$  | $|____ /$$|____ /$$| $$$$$$$| $$  | $|____ /$$|____ /$$/
| $$__/  | $$  /$$$$/   /$$$$/| $$__  $| $$  | $$  /$$$$/   /$$$$/ 
| $$     | $$ /$$__/   /$$__/ | $$  \ $| $$  | $$ /$$__/   /$$__/  
| $$     | $$/$$$$$$$$/$$$$$$$| $$$$$$$|  $$$$$$//$$$$$$$$/$$$$$$$$
|__/     |__|________|________|_______/ \______/|________|________/
                                                                  
&quot;&quot;&quot;)   
print('''

  /$$$$$$                                
 /$$__  $$                               
| $$  \__/ /$$$$$$ /$$$$$$/$$$$  /$$$$$$ 
| $$ /$$$$|____  $| $$_  $$_  $$/$$__  $$
| $$|_  $$ /$$$$$$| $$ \ $$ \ $| $$$$$$$$
| $$  \ $$/$$__  $| $$ | $$ | $| $$_____/
|  $$$$$$|  $$$$$$| $$ | $$ | $|  $$$$$$$
 \______/ \_______|__/ |__/ |__/\_______/
                                     
''')

while(ch == 'y'):
    n=int(input(&quot;Enter a Number : &quot;))
    winLoose=fizzbuzzgame(n)
    if(winLoose == &quot;fz&quot;):
        fizz+=1
    elif(winLoose == &quot;bz&quot;):
        buzz+=1
    elif(winLoose == &quot;fzbz&quot;):
        fizzbuzz+=1
    ch=input(&quot;Do you want to continue playing the game : (y/n)&quot;)
    if(ch=='n'):
        print('Congratulations, your score is\n FizzBuzz:%d\nFizz:%d\nBuzz:%d' %
(fizzbuzz,fizz,buzz))
    
'''Sample Output:

 /$$$$$$$$/$$                  /$$$$$$$                            
| $$_____|__/                 | $$__  $$                           
| $$      /$$/$$$$$$$$/$$$$$$$| $$  \ $$/$$   /$$/$$$$$$$$/$$$$$$$$
| $$$$$  | $|____ /$$|____ /$$| $$$$$$$| $$  | $|____ /$$|____ /$$/
| $$__/  | $$  /$$$$/   /$$$$/| $$__  $| $$  | $$  /$$$$/   /$$$$/ 
| $$     | $$ /$$__/   /$$__/ | $$  \ $| $$  | $$ /$$__/   /$$__/  
| $$     | $$/$$$$$$$$/$$$$$$$| $$$$$$$|  $$$$$$//$$$$$$$$/$$$$$$$$
|__/     |__|________|________|_______/ \______/|________|________/
                                                                                                                                   

  /$$$$$$                                
 /$$__  $$                               
| $$  \__/ /$$$$$$ /$$$$$$/$$$$  /$$$$$$ 
| $$ /$$$$|____  $| $$_  $$_  $$/$$__  $$
| $$|_  $$ /$$$$$$| $$ \ $$ \ $| $$$$$$$$
| $$  \ $$/$$__  $| $$ | $$ | $| $$_____/
|  $$$$$$|  $$$$$$| $$ | $$ | $|  $$$$$$$
 \______/ \_______|__/ |__/ |__/\_______/
                                         

Enter a Number : 666
666 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 777
777 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 555
555 FizzBuzz
Do you want to continue playing the game : (y/n)y
Enter a Number : 1
1
Do you want to continue playing the game : (y/n)y
Enter a Number : 789
789 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 25
25 Buzz
Do you want to continue playing the game : (y/n)n
Congratulations, your score is

FizzBuzz:1
Fizz:3
Buzz:1

&lt;/pre&gt;

[[#Top]]

=Crowd Computing: Just Estimate=

Crowd computing is conceptualised in various ways as being related to crowdsourcing, human computation, social computing, cloud computing and mobile computing. 

Crowd computing has been described in various ways viz. 
&lt;ul&gt;&lt;li&gt;distribution of human intelligence tasks to mobile devices&lt;/li&gt;
&lt;li&gt;cloud computing with humans&lt;/li&gt;
&lt;li&gt;human problem solving with large numbers of people using computers&lt;/li&gt;&lt;/ul&gt; 

Broadly, crowed computing is a set of human interaction tools for idea exchange and non-hierarchical decision making. 

Four common characteristics are used to identify the term: 
&lt;ol&gt;
&lt;li&gt;participation by a crowd of humans&lt;/li&gt;
&lt;li&gt;interaction with computing technology&lt;/li&gt;
&lt;li&gt;activity that is predetermined by the initiator or application itself&lt;/li&gt;
&lt;li&gt;the execution of tasks by the crowd utilising innate human capabilities.&lt;/li&gt;
&lt;/ol&gt;

==Wisdom of Crowds==
 &lt;p style=&quot;text-align:justify&quot;&gt;
The concept of ’Wisdom of Crowds’ was proposed by ''Francis Galton''. A weight-judging competition was carried on at the annual show of the West of England Fat Stock and Poultry Exhibition recently held at Plymouth, A fat ox having been selected, competitors bought stamped and numbered cards, each, on which to inscribe their respective names, addresses, and estimates of what the ox would weigh after it had been slaughtered. Those who guessed most successfully received prizes. About 8oo tickets were issued to the par- ticipants. The middlemost estimate of all the estimates recorded was 1207 lbs and the actual weight of the ox was 1198 lbs.&lt;/p&gt;

==Our Experiment==
 &lt;p style=&quot;text-align:justify&quot;&gt;
The crowd had to guess the number of candies/gems in a jar. Around 75 people participated in the experiment. The actual number of gems in the jar were 375. The median of all estimates came out to be 300 and the mean of all the estimates came out to be around 396. Median underestimated and mean overestimated the actual value. So according to recent studies, Trimmed mean must be used as an aggregate measure to estimate where Wisdom of Crowds is involved.
&lt;/p&gt;
[[File:Gemsjar.jpg|center|200px|caption]]

===Trimmed Mean===
 &lt;p style=&quot;text-align:justify&quot;&gt;
In these kinds of experiments, 10% trimmed mean is usually followed. For calculating 10% trimmed mean, remove 10% smallest and 10% largest values from the sample. Calculate the mean of the sample obtained. In the above experiment, the trimmed mean came out to be around 351 which is very close to the actual value.&lt;/p&gt;

==Implementation==
Here, we try to demonstrate the concept of trimmed mean through crowd computing.
&lt;ol&gt;
&lt;li&gt; Input a list of estimates done by the crowd .&lt;/li&gt;
&lt;li&gt; Sort the list.&lt;/li&gt;
&lt;li&gt; Remove the 10% smallest values.&lt;/li&gt;
&lt;li&gt; Remove the 10% largest values.
&lt;li&gt; Calculate the mean of the new list obtained .&lt;/li&gt;&lt;/ol&gt;&lt;hr&gt;

==Data of Experiment==       
    Estimates =[1000,1010,1786,2000,1500,1500,100,120,150,150,150,170,175,180,197,200,200,200,200,200,200,220,220,220,220,234,250,250,250,250,250,250,250,250,250,263,270,275,275,286,300,
                300,300,300,300,300,300,300,320,350,350,350,400, 400,400,400,400,450,467,500,500,500,500,500,500,500,550,550,600,600,600,650,700,700,720]

    '''CODE:'''
&lt;pre&gt;
Estimates = [1000,1010,1786,2000,1500,1500,100,120,150,150,150,170,175,180,197,200,200,200,200,200,200,220,220,220,220,234,250,250,250,250,250,250,250,250,250,263,270,275,275,286,300,                300,300,300,300,300,300,300,320,350,350,350,400,400,400,400,400,450,467,500,500,500,500,500,500,500,550,550,600,600,600,650,700,700,720]
Estimates.sort()
offset = int(0.10*len(Estimates))
for i in range(offset):
       del Estimates[0]
       del Estimates[-1]
Sum = 0    
for i in range(len(Estimates)):
       Sum += Estimates[i]
Mean_Value = Sum/len(Estimates)
print(&quot;Mean : &quot;, int(Mean_Value))
#Output:
Mean :  351
&lt;/pre&gt;
&lt;hr&gt;
==Trimmed Mean for the above example== 
&lt;h3&gt;Using scipy library&lt;/h3&gt;
&lt;pre&gt;
#import scipy to use the method of trim_mean
from scipy import stats
trimMean = stats.trim_mean(Estimates, 0.1) # Trim 10% at both ends
print(&quot;Trimmed Mean : &quot;,trimMean)
#Output:
Trimmed Mean :  335.1020408163265
&lt;/pre&gt;

&lt;h3&gt;Without using scipy library&lt;/h3&gt;
&lt;pre&gt;
#Trimmed mean with 10%
p=10/100
#sorted data
data=[2, 4, 6, 7, 11, 21, 81, 90, 105, 121]
n = len(data)
#Remove elements from both end
rem=int(n*p)
newData = data[rem:-rem]
mean = 0
for i in newData:
    mean += i
mean = int(mean/len(newData))
print(&quot;Trimmed mean : &quot;,mean)
#Output: Trimmed mean :  40
&lt;/pre&gt;
[[#Top]]

=Jumbled_Words Permutations: Jumbled Words=
==What are Permutations ?==
A permutation also called ordering of selected number of elements from a list denoted by nPr here we are choosing all elements of a list and so n=r&lt;br&gt;
nPr=n!/(n-r)!&lt;br&gt; as n=r
nPn=n!&lt;br&gt; which gives all possible arrangement of elements present in a list.

 For example, permutations of list [1,2,3] are [1,2,3], [1,3,2], [2,1,3], [2,3,1], 
[3,1,2], and [3,2,1]. 
The number of permutations of a list of elements nPn is given by n!. For example, there are 2! = 2 x 1 = 2 permutations of [1,2], namely [1,2] and [2,1], and 3! = 3 x 2 x 1 = 6 permutations of [1,2,3], as mentioned above.&lt;br/&gt;
[[File:Permutations.jpg]]

==Implementation==
 &lt;p style=&quot;text-align:justify&quot;&gt;
Here, we try to demonstrate the concept of permutations through jumbled words. It is a two player game in which one person presents the other person a different permutation of the word in his mind. The other person has to guess the right word. If he guesses, the he wins otherwise he loses.&lt;/p&gt;
 Input an list of words.
 Randomly pick a word from the list of words .
 Shuffle this word and present it to the other player.
 if word guesses by the player is same as the one picked from list of w
     player wins
 else
     player loses

ALTERNATE CODE TO GENERATE THIS GAME:
&lt;pre&gt;
import random
p1=input(&quot;enter player 1 name:&quot;)
p2=input(&quot;enter player 2 name:&quot;)
l=[&quot;rainbow&quot;,&quot;computer&quot;,&quot;robot&quot;,&quot;butter&quot;,&quot;vegetable&quot;,&quot;science&quot;,&quot;correct&quot;]
c1=c2=a1=a2=f1=f2=0
k=1
i=3
def play():
    n=random.choice(l)        ##n=chooses a word from list l
    l1=[]
    for j in n:
       l1.append(j)      ##creates a list for word in n
    for t in range(len(l1)):
       p=random.choice(l1)     ##this randomly displays letters in the list
       print(p)
       l1.remove(p)          ##to avoid the repetition of a letter
    s=input(&quot;enter the word:&quot;)
    if(s==n):
        print(&quot;correct&quot;)
        return 1
    else:
        print(&quot;not correct&quot;)
        print(&quot;answer is&quot;,n)
        return 0
def stat():
     print(&quot;player 1:&quot;)
     print(&quot;score:&quot;,c1)
     print(&quot;answered:&quot;,a1)
     print(&quot;failed:&quot;,f1)
     print(&quot;.............&quot;)
     print(&quot;player 2:&quot;)
     print(&quot;score:&quot;,c2)
     print(&quot;answered:&quot;,a2)
     print(&quot;failed&quot;,f2)
     if(c1&gt;c2):
         print(p1,&quot; won over &quot;,p2)
     elif(c1==c2):
         print(&quot;draw game&quot;)
     else:
         print(p2,&quot; won over &quot;,p1) 
while(i!=4):
      if(i==3):
         if(k==1):
             print(&quot;player 1 turn&quot;)
             print(&quot;your jumbled word is:&quot;)
             k=k+1
             m=play()
             if(m==1):      ##if guessed answer is correct,then score and no.of answered count will be increased
                c1+=1
                a1+=1
             else:
                f1+=1       ##else count of no.of failed to answered will be incremented
         else:
             print(&quot;player 2 turn&quot;)
             print(&quot;your jumbled word is:&quot;)
             k=k-1
             m=play()
             if(m==1):
                c2=c2+1
                a2=a2+1
             else:
                f2=f2+1
       if(i==2):
             print(&quot;present status&quot;)
             stat()
       i=int(input(&quot;enter your choice  1.stop 2.status 3.continue&quot;))
       if(i==1):
             stat()
             i=i+3
&lt;/pre&gt;
&lt;hr&gt;

[[#Top]]

=== JumbledWord Simple Logic, In Short ===
[[File:jumbledWord.gif]]
---
&lt;hr&gt;
'''Logic to create a Jumbled Word'''
&lt;hr&gt;
&lt;pre&gt;
#Get Jumbled Word and print it Horizontally
import random

def getJumbledWord(b):
    jumble=''
    l1 = [ b[i] for i in range(0, len(b)) ]
    for t in range(len(l1)):
       p=random.choice(l1)  #this randomly gets letters from the list      
       jumble=jumble+p       
       l1.remove(p)
    return jumble

b=input(&quot;Enter a word to make it jumbled : &quot;)
print(&quot;Jumbled Word : &quot;, getJumbledWord(b))
&lt;/pre&gt;
&lt;pre&gt;
Output:
Enter a word to make it jumbled : live and let live others
Jumbled Word :  vel  toldeisrte aihv len
==========================================
Enter a word to make it jumbled : junkfood
Jumbled Word :  nfukdooj
&lt;/pre&gt;
&lt;hr&gt;
'''Another Logic to create a Jumbled Word'''
&lt;hr&gt;
&lt;pre&gt;
import random
b=input(&quot;Enter a word to make it jumbled : &quot;)

def getJumbledWord1(b):
    l1 = [ b[i] for i in range(0, len(b)) ]
    random.shuffle(l1)
    str1 = ''.join(l1)
    return str1

print(&quot;Jumbled Word : &quot;, getJumbledWord1(b))
&lt;/pre&gt;

====Sample Output:====
&lt;pre&gt;
---- Output1 
Enter a word to make it jumbled : butter
Jumbled Word :  tbture

---- Output2 
Enter a word to make it jumbled : petriotism
Jumbled Word :  pittrosime
&lt;/pre&gt;

=Theory of Evolution=

== What is Evolution ? ==
Evolution is the change in heritable characteristics over successive generations. The theory of evolution explains that DNA, which acts as a carrier of genetic information from one generation to other, tends to change or mutate occasionally. These changes are reflected in next generations to come. This is how life has evolved on earth from bacteria to human beings.&lt;br&gt;
[[File:Evolution.png|500px]]

== Implementation ==
 &lt;p style=&quot;text-align:justify&quot;&gt;
An array representing DNA is stored in a file. As genes are forms of DNA, they contain information to be transferred to forthcoming generations. Assume that information is in the form of bits (in the form of 0s and 1s). A number is picked randomly from 1 to the size of the array. A new parameter has been introduced which decides whether mutation would occur or not. If the value of this new parameter is 1 (It is picked randomly from 1 to 100), then only change is reflected down the generations, otherwise it is not. The pseudo code is as follows :
&lt;/p&gt;
Input an array containing genetic information .
Randomly generate a number (say m) from 1 to length of the array. Randomly generate other number (say p) from 1 to 100.

&lt;pre&gt; 
    if p is equal to 1 then 
        if m is 1 then
          set it to 0
        else
          set it to 1
&lt;/pre&gt;
[[#TOP]]</text>
      <sha1>oo3m8iw4jx1h6df1uwqvv9qfn4vl3bz</sha1>
    </revision>
    <revision>
      <id>3771</id>
      <parentid>3770</parentid>
      <timestamp>2018-09-29T04:32:47Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* Implementation */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="31646">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_3 Contributors of this page]
*Week 3 Playlist: https://www.youtube.com/playlist?list=PLc_j0TNIaWxOVx_z9jAM2UB3RqYNXaoEo
=List=
List is a flexible data structure used for storing a group of data separated by comma. The elements in a list need not be of the same data type.

'''Example:'''
       List_1 = [ 1, 2,3] or 
       List_1 = [&quot;coffee&quot;, &quot;Tea&quot;, &quot;Milk&quot;] or
       List_1 = [1,&quot;coffee&quot;, &quot;Tea&quot;, 3, &quot;5&quot;]

==List Creation==
a) A list can be created by simply putting values (separated by comma) between square
 brackets as given below,
&lt;pre&gt;List_1 = [1,&quot;coffee&quot;, &quot;Tea&quot;, 3, &quot;5&quot;] #this creates a list by name List_1 containing
 following items
&lt;/pre&gt;


Or,
(b)A List can be created from scratch and elements can be added 
&lt;pre&gt;
        List_2 = [ ]
        List_2.append(&quot;Kala&quot;)
        List_2.append(&quot;Mala&quot;)
&lt;/pre&gt;
Here we use &quot;append&quot;, which is a function in python that enable us to append or attach an element to a list .
&lt;pre&gt;Thus List_2 will now hold [&quot;Kala&quot;,&quot;Mala&quot;]&lt;/pre&gt;

[[#Top]]

==Operations and Methods to work with List==
&lt;pre&gt;
a = [25,30,50,90,12,13]
b = [100,300,500,200,250]
&lt;/pre&gt;
&lt;hr&gt;
&lt;table border=2&gt;
  &lt;tr&gt;
    &lt;th&gt;&lt;b&gt;Method/&lt;br&gt;Operator&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Function&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Syntax&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Output&lt;/b&gt;&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;len()&lt;/td&gt;
    &lt;td&gt;Find length of a list&lt;/td&gt;
    &lt;td&gt;len(a)&lt;/td&gt;
    &lt;td&gt;6&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;max()&lt;/td&gt;
    &lt;td&gt;Find maximum element from the list&lt;/td&gt;
    &lt;td&gt;max(a)&lt;/td&gt;
    &lt;td&gt;90&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;min()&lt;/td&gt;
    &lt;td&gt;Find minimum element from the list&lt;/td&gt;
    &lt;td&gt;min(a)&lt;/td&gt;
    &lt;td&gt;12&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sum()&lt;/td&gt;
    &lt;td&gt;Returns sum of all elements of the list&lt;/td&gt;
    &lt;td&gt;sum(a)&lt;/td&gt;
    &lt;td&gt;220&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;reverse()&lt;/td&gt;
    &lt;td&gt;Reverses the original list&lt;/td&gt;
    &lt;td&gt;a.reverse()&lt;/td&gt;
    &lt;td&gt;[13, 12, 90, 50, 30, 25]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sort()&lt;/td&gt;
    &lt;td&gt;Sorts the original list in ascending order&lt;/td&gt;
    &lt;td&gt;a.sort()&lt;/td&gt;
    &lt;td&gt;[12, 13, 25, 30, 50, 90]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sorted()&lt;/td&gt;
    &lt;td&gt;Returns the new sorted list &lt;/td&gt;
    &lt;td&gt;sorted(a)&lt;/td&gt;
    &lt;td&gt;[12, 13, 25, 30, 50, 90]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;insert()&lt;/td&gt;
    &lt;td&gt;Insert at a particular index in the list, and shifts remaining elements&lt;/td&gt;
    &lt;td&gt;a.insert(3,3)&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 3, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;append()&lt;/td&gt;
    &lt;td&gt;Adds elements/object to the end of the list&lt;/td&gt;
    &lt;td&gt;a.append(5)&lt;br&gt;a.append([10,20])&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 5]&lt;br&gt;[25, 30, 50, 90, 12, 13, [10, 20]]&lt;br&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;extend()&lt;/td&gt;
    &lt;td&gt;Adds object to the end of the list as elements not as object&lt;/td&gt;
    &lt;td&gt;a.extend([10,20])&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 10, 20]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;*&amp;nbsp;&amp;nbsp;Repeatation&lt;br&gt;operator&lt;/td&gt;
    &lt;td&gt;Repeat the list for n times and returns a new list&lt;/td&gt;
    &lt;td&gt;a*2&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 25, 30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;+ Concatenation&lt;br&gt;operator&lt;/td&gt;
    &lt;td&gt;Concatenates two lists, and returns a new list&lt;/td&gt;
    &lt;td&gt;a+b&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 100, 300, 500, 200, 250]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;index()&lt;/td&gt;
    &lt;td&gt;Finds index of a particular element in the list or not&lt;/td&gt;
    &lt;td&gt;a.index(25)&lt;br&gt;a.index(0)&lt;br&gt;&lt;/td&gt;
    &lt;td&gt;0&lt;br&gt;&lt;br&gt;ValueError: 0 is not in list&lt;br&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;in operator&lt;/td&gt;
    &lt;td&gt;Finds whether a particular element is in the list or not, returns boolean&lt;/td&gt;
    &lt;td&gt;25 in a&lt;/td&gt;
    &lt;td&gt;True&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;not in operator&lt;/td&gt;
    &lt;td&gt;Checks if element is not available in list, returns boolean&lt;/td&gt;
    &lt;td&gt;25 not in a&lt;/td&gt;
    &lt;td&gt;False&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;count()&lt;/td&gt;
    &lt;td&gt;Counts the number of occurence of an element in the list&lt;/td&gt;
    &lt;td&gt;a.count(25)&lt;/td&gt;
    &lt;td&gt;1&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;remove()&lt;/td&gt;
    &lt;td&gt;Removes an element from the list&lt;/td&gt;
    &lt;td&gt;a.remove(25)&lt;/td&gt;
    &lt;td&gt; [30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;pop()&lt;/td&gt;
    &lt;td&gt;Delete and return item at index 0&lt;/td&gt;
    &lt;td&gt;a.pop(0)&lt;/td&gt;
    &lt;td&gt;25 , a will be [30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;del&lt;/td&gt;
    &lt;td&gt;Deletes item at a particular index from the list&lt;/td&gt;
    &lt;td&gt;del a[0]&lt;/td&gt;
    &lt;td&gt;[30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;all()&lt;/td&gt;
&lt;td&gt;Returns True, if all items in list are True or it is an empty list&lt;/td&gt;
&lt;td&gt;all([True, True, True])
all([])
&lt;/td&gt;
&lt;td&gt;True&lt;br&gt;
True&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;any()&lt;/td&gt;
&lt;td&gt;Returns True, if any item in list is True else return False&lt;/td&gt;
&lt;td&gt;any([True, True, True])&lt;br&gt;
any([True, False, True])&lt;br&gt;
any([])&lt;/td&gt;
&lt;td&gt;True&lt;br&gt;False&lt;br&gt;False&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;

==Printing the List==
=== Print whole list ===
A list can be printed simply or using a ''for / while'' loop 

 print(List_2)     # To print the entire list
This code will print      
 ['Kala','Mala']     

===Print element at a particular index===
&lt;pre&gt;
Using index position
    List_2[0]     # prints 'Kala' ,i.e,the value at index position 0.
    List_2[1]     # prints 'Mala'.
&lt;/pre&gt;
=== Without using index position ===
&lt;pre&gt;
for item in List_2:   # here item is a variable used to access elements in list.
       print(item)
   This code snippet prints 
    Kala
    Mala
&lt;/pre&gt;
[[#Top]]

==Search for a particular element in list==
Elements in a list can be searched by one of the two ways:
=== using index() function===
&lt;pre&gt;
ages1 = [11,23,12,23,45]

#if element is available in the list, index() returns the index value on which, the element is
 present.
print(ages1.index(45))#Output: 4

#if element is not available in the list, index() returns ''ValueError''
print(ages1.index(0))#Output: ValueError:
&lt;/pre&gt;

In programming, if such error occurs, program gets terminated. It can be solved using exception handling.
 
e.g.
&lt;pre&gt;
ages1 = [11,23,12,23,45]

try:
    print(ages1.index(0))
except ValueError:
    print(&quot;Exception has occured&quot;)    
    print(&quot;Element is not found in the list&quot;)

&lt;/pre&gt;
&lt;pre&gt;
'''Output: 
Exception has occured
Element is not found in the list
'''&lt;/pre&gt;
[[#Top]]

=== using 'in' operator===
''in'' operator is used to check whether a particular element is available in the list or not.e.g.

&lt;pre&gt;
ages1 = [11,23,12,23,45]
no=11

if no in ages1:
    print(&quot;no is there in the list&quot;)
else:    
    print(&quot;no is NOT there in the list&quot;)
&lt;/pre&gt;
&lt;pre&gt;
#Output: no is there in the list
&lt;/pre&gt;


'''Number is not there in the list'''
&lt;pre&gt;
ages1 = [11,23,12,23,45]
no=15

if no in ages1:
    print(&quot;no is there in the list&quot;)
else:    
    print(&quot;no is NOT there in the list&quot;)
&lt;/pre&gt;
&lt;pre&gt;
Output: no is NOT there in the list
&lt;/pre&gt;
[[#Top]]

==Updating the List==
The lists can be updated using ''append'' or ''insert'' function.  Append adds the element to the end of the list and Insert adds the element in the specified position.
&lt;pre&gt;
   # add the element 'Sheela' to the end of the list.
   List_2.append(&quot;Sheela&quot;)    
   print (List_2) will output 
   ['Kala', 'Mala', 'Sheela']
&lt;/pre&gt;
   &lt;pre&gt;
# add the element &quot;Bala&quot; in the list at the index 1.
   List_2.insert(1,&quot;Bala&quot;)    
   print (List_2) will output 
   ['Kala', 'Bala','Mala', 'Sheela']
&lt;/pre&gt;

=== Extend the list by adding elements of other list at end using extend()===
&lt;pre&gt;
ages = [11,23,12,23,45]
ages.extend([57,58])
print(ages)
&lt;/pre&gt;

&lt;pre&gt;
#Output: [11, 23, 12, 23, 45, 57, 58]
&lt;/pre&gt;

==== Difference between ''append() and extend()'' ====
Difference between ''append()'' and ''extend()'' can be easily understood, by the following example.

&lt;pre&gt;
appendlist = [11,23,12,23,45]
appendlist.append([57,58])

extendlist= [11,23,12,23,45]
extendlist.extend([57,58])
&lt;/pre&gt;

&lt;pre&gt;
'''Output:
[11, 23, 12, 23, 45, [57, 58]]
[11, 23, 12, 23, 45, 57, 58]'''
&lt;/pre&gt;

[[#Top]]

==Basic Operations on List==
===Frequency of Occurrence===
list.count(object) will return the number of times the object occur in the list.
  '''Example'''
    ages = [11,23,12,23,45,43,22,24,23]
    ages.count(23) will return
    3
    ages.count(100) will return
    0

===Length of the List===
''len(list)'' will return the length of the list ie. the number of objects in the list.
  '''Example'''
&lt;pre&gt;
    ages = [11,23,12,23,45,43,22,24,23]
    len(ages) # Output: 9
&lt;/pre&gt;

To print the objects in the list either use ''for item in list'' or ''for index in range(len(list))''
&lt;pre&gt;
    for item in ages:       
        print (item)  
        (OR)
    for index in range(len(ages)) :
        print (ages[index])
&lt;/pre&gt;

===Sort the List===
''list.sort()'' will sort the list in ascending order
  '''Example'''
    ages = [11,23,12,23,45,43,22,24,23]
    ages.sort() 
    print (ages) 
    [11, 12, 22, 23, 23, 23, 24, 43, 45]

[[#Top]]

===Sort the List using sorted() function===
''sorted(list1)'' will sort the list and return a new list, it doesn't modify the original list
&lt;br&gt;'''Example: Sort in ascending order'''
&lt;pre&gt;
ages = [11,23,12,23,45,43,22,24,23]
newList=sorted(ages)
print(newList)

#Output: [11, 12, 22, 23, 23, 23, 24, 43, 45]
&lt;/pre&gt;

&lt;br&gt;'''Example: Sort in descending order'''
&lt;pre&gt;
ages = [11,23,12,23,45,43,22,24,23]
newList=sorted(ages,reverse=True)
print(newList)

#Output: [45, 43, 24, 23, 23, 23, 22, 12, 11]
&lt;/pre&gt;

===Reverse the List===
''list.reverse()'' will reverse the original list
  '''Example'''
    ages = [11, 12, 22, 23, 23, 23, 24, 43, 45]
    ages.reverse()
    print (ages)
    [45, 43, 24, 23, 23, 23, 22, 12, 11]

Both ''sort()'' and ''reverse()'' list operation will work on numeric and alphanumeric data list.

A special use of the ''reverse()'' function is to descend a list that is sorted in ascending order.

  '''Example'''
&lt;pre&gt;
ages = [11, 12, 22, 23, 23, 23, 24, 43, 45]
ages.sort()
print(ages)
ages.reverse()
print(ages)
&lt;/pre&gt;

[[#Top]]

===Slicing===
Used to retrieve an object or objects in a range as a list  
  '''Example'''

Use ''list[index]'' to retrieve the object at the given index
&lt;pre&gt;
In [1]: student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
In [2]: student[3]     #Object at index 3.  Remember index starts at 0
Out[2]: 'Geetha'      
&lt;/pre&gt;

Use ''list[start_index : end_index + 1]'' to retrieve objects from the start_index to end_index 
&lt;pre&gt;
In [3]: student[2:4]     # Objects from index 2 to 3 as List. Note the [ and ]
Out[3]: ['Vijay', 'Geetha']   
&lt;/pre&gt;

Use ''list[:]'' to retrieve objects from the starting of the list to the end of the list. 
The default start value will be the starting index of the list (i.e. 0) and the default end value
will be the length of the list 
&lt;pre&gt;
In [4]: student[:]        # prints the entire list
Out[4]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma', 'Janani']
&lt;/pre&gt;
&lt;pre&gt;
In [5]: student[:5]       # prints the objects from the start of the list upto object at index 4
Out[5]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran']
&lt;/pre&gt;
&lt;pre&gt;
In [6]: student[2:]       # prints the objects from index 2 upto the end of the list
Out[6]: ['Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma', 'Janani']
&lt;/pre&gt;

Negative index too is available in Python. It starts from last element of the list. i.e.
&lt;pre&gt;
In [7]:student[-1]        #prints last index of list
Out[7]: 'Janani'
&lt;/pre&gt;
&lt;pre&gt;
In [8]:student[-1:-8]     #prints empty list
Out[8]: []
&lt;/pre&gt;
&lt;pre&gt;
In [9]:student[-8:-1]     #prints -8th index to -1st index elements
Out[9]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma']
&lt;/pre&gt;

[[#Top]]

===Removing Item from list ===
----

Is used to remove a specific item from the list.

'''Example:'''
 
Use list.remove(entry/value)  Or   del list[index]    Or list.pop(index)
&lt;pre&gt;
student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
student.remove(&quot;Arun&quot;)   #This will delete item &quot;Arun&quot;
         Or    
del student[0]           # This will delete item at index 0
         Or
student.pop(0)         # This will delete and return item at index 0
print(student)    
Output: &quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
&lt;/pre&gt;

[[#Top]]

===Delete list ===
----
Used to delete complete list

'''Example'''

Use del &lt;list name&gt;
&lt;pre&gt;
student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
del student&lt;/pre&gt;

===Concatenation of two lists===
----
''+'' is the concatenation operator which is used concatenate two lists. 
&lt;pre&gt;
ages1 = [11,23,12,23,45]
ages2 = [25, 24, 43, 47]
age=ages1+ages2
print(age)
#Output: [11, 23, 12, 23, 45, 25, 24, 43, 47]
&lt;/pre&gt;

===Repeatation of a list ===
----
''*'' is the operator to repeat a particular list.
&lt;pre&gt;
ages1 = [11,23,12,23,45]
age=ages1*5 #ages1 list is repeated 5 times and stroed in ''age'' list
print(age)

#Output: [11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45]
&lt;/pre&gt;

=== all and any for List===
all() and any() are special functions to check whether all elements in iterable is ''True'' or any element is ''True''
&lt;ol&gt;
&lt;li&gt;If all elements in a list are ''True'', ''all()'' will return ''True''&lt;/li&gt;
&lt;li&gt;If iterable is ''empty'', ''all()'' will return ''True''&lt;/li&gt;
&lt;li&gt;If iterable contains at least one ''True'', ''any()'' will return ''True''&lt;/li&gt;
&lt;li&gt;If iterable is ''empty'', ''any()'' will return ''False''&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;
lsit=[True, True, True, True]
print(all(lsit))#Output: True
print(any(lsit))#Output: True

lsit1=[True, False, True, True]
print(all(lsit1))#Output: False
print(any(lsit1))#Output: True

lsit2=[False,False,False]
print(all(lsit2))#Output: False
print(any(lsit2))#Output: False

lsit3=[]
print(all(lsit3))#Output: True
print(any(lsit3))#Output: False
&lt;/pre&gt;

==Conditional Statements==
Conditionals are used to check the condition and change the flow of the program 
accordingly. They are realized in programming languages through if statement. The 
syntax is as follows :
&lt;pre&gt;
         if condition : 
            statement
&lt;/pre&gt;
    '''Note:''' Do not forget indentation (inserting space/tab) in the line after the
 if condition.
    
    In case you want to execute a set of statements when a condition is true and another

set of statement when the condition is false.
&lt;pre&gt;
         if condition : 
            statement 1
         else :
            statement 2
&lt;/pre&gt;

&lt;pre&gt;    
    Multiple if-else statements can be written as follows:
         if condition_1 : 
            statement 1
         elif condition_2 : # 'elif' is short for 'else if'
            statement 2
         elif condition_3 :
            statement 3
        .
        .
         else :
            final statement
&lt;/pre&gt;

[[#Top]]

=Loops and Conditionals : Fizzbuzz=
====Loops====
Loops are used to execute a set of repetitive statements. They are realised
through 'while' and 'for' loops in programming languages. The syntax of 'for' loop is 
as follows :
&lt;pre&gt;
for LOOPVARIABLE in SEQUENCE: 
            STATEMENTS&lt;/pre&gt;

    '''e.g.''' to print all the data from a list we can write:
&lt;pre&gt;
for item in list_name:
      print(item)&lt;/pre&gt;
    OR
&lt;pre&gt;
for index in range(len(list_name)):
      print(list_name[index])
 &lt;/pre&gt;   
    The syntax for while loop is as follows :
&lt;pre&gt;    
while BOOLEANEXPRESSION: 
     STATEMENTS
     INCREMENT/DECREMENT
&lt;/pre&gt;    
    '''e.g.''' if we want to print all numbers from 1 to 10
&lt;pre&gt;
i=1
while i&lt;=10 :
    print(i,&quot; &quot;)
    i=i+1
    &lt;/pre&gt;
 
'while' loop has indefinite iteration (run-time unknown). So, there must be loop,  break statement in it.
 Whereas 'for' loop is definite in nature (i.e. known or predictable span).&lt;br&gt;

&lt;b&gt;NOTE: Python doesn't have anything like do-while loop.&lt;/b&gt;

[[#Top]]

==Implementation==
Here, we try to demonstrate the concept of loops and conditionals through a game called Fizzbuzz. The rules are as follows :&lt;br/&gt;
[[File:fizzBuzz.gif]]

• if input number is a multiple of ’3’ print ”Fizz”
&lt;br/&gt;
• if input number is a multiple of ’5’ print ”Buzz”
&lt;br/&gt;
• if input number is a multiple of both '3' and ’5’ print ”FizzBuzz”
&lt;br/&gt;
The pseudo code is as follows :
&lt;pre&gt;
   If input no % 3 == 0 and  input no % 5 == 0 : 
       print ”Fizzbuzz”
   else if input no % 3 == 0 : 
       print ”Fizz”
   else if input no % 5 == 0 : 
       print ”Buzz”
   else :
       print the input no
&lt;/pre&gt;
 &lt;p style=&quot;text-align:justify&quot;&gt;
The order of statements execution matters to get the desired output. The highest priority condition should be first followed by other. In fizzbuzz programming, first checking should be done for both divisibility of 3 and 5. If condition not satisfied only then it should check individually for 3 or 5. So carefully choosing the order is crucial for better programming.
Note: There is some effect of present condition statements chosen on next conditions statements. That is why in first attempt fizzbuzz programming got struck.&lt;/p&gt;

Example: 
&lt;pre&gt;
#Code to achieve the above requirement in python3.
i = int(input(&quot;Enter the number&quot;)) 
if i%3 == 0 and i%5 == 0: print(i,&quot;FizzBuzz&quot;)  
elif i%5 == 0: print(i,&quot;Buzz&quot;)
elif i%3 == 0: print(i,&quot;Fizz&quot;)
else: print(i)
&lt;/pre&gt;
Lets put the same into a loop for a range given by the user.
&lt;pre&gt;
def fizzbuzzgame(start,stop):
    for i in range(start,stop+1):
        if i%3 == 0 and i%5 == 0:
            print(i,&quot;FizzBuzz&quot;)
        elif i%5 == 0:
            print(i,&quot;Buzz&quot;)
        elif i%3 == 0:
            print(i,&quot;Fizz&quot;)
        else: print(i)

fizzbuzzgame(50,100)
&lt;/pre&gt;
&lt;pre&gt;
#Output:
1235
Buzz
======================================
555
Fizzbuzz
======================================
1235
Buzz
======================================
999
Fizz
&lt;/pre&gt;

[[#Top]]

=== Fizz Buzz game in Interactive mode with Score ===
'''By Ms. Ami Tusharkant Choksi'''
&lt;pre&gt;
def fizzbuzzgame(i):
        if i%3 == 0 and i%5 == 0:
            print(i,&quot;FizzBuzz&quot;)
            return(&quot;fzbz&quot;)
        elif i%5 == 0:
            print(i,&quot;Buzz&quot;)
            return(&quot;bz&quot;)
        elif i%3 == 0:
            print(i,&quot;Fizz&quot;)
            return(&quot;fz&quot;)
        else:
            print(i)
            return(&quot;no&quot;)

ch = 'y'
fizzbuzz=0
fizz=0
buzz=0
nothing=0
print(&quot;&quot;&quot;

 /$$$$$$$$/$$                  /$$$$$$$                            
| $$_____|__/                 | $$__  $$                           
| $$      /$$/$$$$$$$$/$$$$$$$| $$  \ $$/$$   /$$/$$$$$$$$/$$$$$$$$
| $$$$$  | $|____ /$$|____ /$$| $$$$$$$| $$  | $|____ /$$|____ /$$/
| $$__/  | $$  /$$$$/   /$$$$/| $$__  $| $$  | $$  /$$$$/   /$$$$/ 
| $$     | $$ /$$__/   /$$__/ | $$  \ $| $$  | $$ /$$__/   /$$__/  
| $$     | $$/$$$$$$$$/$$$$$$$| $$$$$$$|  $$$$$$//$$$$$$$$/$$$$$$$$
|__/     |__|________|________|_______/ \______/|________|________/
                                                                  
&quot;&quot;&quot;)   
print('''

  /$$$$$$                                
 /$$__  $$                               
| $$  \__/ /$$$$$$ /$$$$$$/$$$$  /$$$$$$ 
| $$ /$$$$|____  $| $$_  $$_  $$/$$__  $$
| $$|_  $$ /$$$$$$| $$ \ $$ \ $| $$$$$$$$
| $$  \ $$/$$__  $| $$ | $$ | $| $$_____/
|  $$$$$$|  $$$$$$| $$ | $$ | $|  $$$$$$$
 \______/ \_______|__/ |__/ |__/\_______/
                                     
''')

while(ch == 'y'):
    n=int(input(&quot;Enter a Number : &quot;))
    winLoose=fizzbuzzgame(n)
    if(winLoose == &quot;fz&quot;):
        fizz+=1
    elif(winLoose == &quot;bz&quot;):
        buzz+=1
    elif(winLoose == &quot;fzbz&quot;):
        fizzbuzz+=1
    ch=input(&quot;Do you want to continue playing the game : (y/n)&quot;)
    if(ch=='n'):
        print('Congratulations, your score is\n FizzBuzz:%d\nFizz:%d\nBuzz:%d' %
(fizzbuzz,fizz,buzz))
    
'''Sample Output:

 /$$$$$$$$/$$                  /$$$$$$$                            
| $$_____|__/                 | $$__  $$                           
| $$      /$$/$$$$$$$$/$$$$$$$| $$  \ $$/$$   /$$/$$$$$$$$/$$$$$$$$
| $$$$$  | $|____ /$$|____ /$$| $$$$$$$| $$  | $|____ /$$|____ /$$/
| $$__/  | $$  /$$$$/   /$$$$/| $$__  $| $$  | $$  /$$$$/   /$$$$/ 
| $$     | $$ /$$__/   /$$__/ | $$  \ $| $$  | $$ /$$__/   /$$__/  
| $$     | $$/$$$$$$$$/$$$$$$$| $$$$$$$|  $$$$$$//$$$$$$$$/$$$$$$$$
|__/     |__|________|________|_______/ \______/|________|________/
                                                                                                                                   

  /$$$$$$                                
 /$$__  $$                               
| $$  \__/ /$$$$$$ /$$$$$$/$$$$  /$$$$$$ 
| $$ /$$$$|____  $| $$_  $$_  $$/$$__  $$
| $$|_  $$ /$$$$$$| $$ \ $$ \ $| $$$$$$$$
| $$  \ $$/$$__  $| $$ | $$ | $| $$_____/
|  $$$$$$|  $$$$$$| $$ | $$ | $|  $$$$$$$
 \______/ \_______|__/ |__/ |__/\_______/
                                         

Enter a Number : 666
666 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 777
777 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 555
555 FizzBuzz
Do you want to continue playing the game : (y/n)y
Enter a Number : 1
1
Do you want to continue playing the game : (y/n)y
Enter a Number : 789
789 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 25
25 Buzz
Do you want to continue playing the game : (y/n)n
Congratulations, your score is

FizzBuzz:1
Fizz:3
Buzz:1

&lt;/pre&gt;

[[#Top]]

=Crowd Computing: Just Estimate=

Crowd computing is conceptualised in various ways as being related to crowdsourcing, human computation, social computing, cloud computing and mobile computing. 

Crowd computing has been described in various ways viz. 
&lt;ul&gt;&lt;li&gt;distribution of human intelligence tasks to mobile devices&lt;/li&gt;
&lt;li&gt;cloud computing with humans&lt;/li&gt;
&lt;li&gt;human problem solving with large numbers of people using computers&lt;/li&gt;&lt;/ul&gt; 

Broadly, crowed computing is a set of human interaction tools for idea exchange and non-hierarchical decision making. 

Four common characteristics are used to identify the term: 
&lt;ol&gt;
&lt;li&gt;participation by a crowd of humans&lt;/li&gt;
&lt;li&gt;interaction with computing technology&lt;/li&gt;
&lt;li&gt;activity that is predetermined by the initiator or application itself&lt;/li&gt;
&lt;li&gt;the execution of tasks by the crowd utilising innate human capabilities.&lt;/li&gt;
&lt;/ol&gt;

==Wisdom of Crowds==
 &lt;p style=&quot;text-align:justify&quot;&gt;
The concept of ’Wisdom of Crowds’ was proposed by ''Francis Galton''. A weight-judging competition was carried on at the annual show of the West of England Fat Stock and Poultry Exhibition recently held at Plymouth, A fat ox having been selected, competitors bought stamped and numbered cards, each, on which to inscribe their respective names, addresses, and estimates of what the ox would weigh after it had been slaughtered. Those who guessed most successfully received prizes. About 8oo tickets were issued to the par- ticipants. The middlemost estimate of all the estimates recorded was 1207 lbs and the actual weight of the ox was 1198 lbs.&lt;/p&gt;

==Our Experiment==
 &lt;p style=&quot;text-align:justify&quot;&gt;
The crowd had to guess the number of candies/gems in a jar. Around 75 people participated in the experiment. The actual number of gems in the jar were 375. The median of all estimates came out to be 300 and the mean of all the estimates came out to be around 396. Median underestimated and mean overestimated the actual value. So according to recent studies, Trimmed mean must be used as an aggregate measure to estimate where Wisdom of Crowds is involved.
&lt;/p&gt;
[[File:Gemsjar.jpg|center|200px|caption]]

===Trimmed Mean===
 &lt;p style=&quot;text-align:justify&quot;&gt;
In these kinds of experiments, 10% trimmed mean is usually followed. For calculating 10% trimmed mean, remove 10% smallest and 10% largest values from the sample. Calculate the mean of the sample obtained. In the above experiment, the trimmed mean came out to be around 351 which is very close to the actual value.&lt;/p&gt;

==Implementation==
Here, we try to demonstrate the concept of trimmed mean through crowd computing.
&lt;ol&gt;
&lt;li&gt; Input a list of estimates done by the crowd .&lt;/li&gt;
&lt;li&gt; Sort the list.&lt;/li&gt;
&lt;li&gt; Remove the 10% smallest values.&lt;/li&gt;
&lt;li&gt; Remove the 10% largest values.
&lt;li&gt; Calculate the mean of the new list obtained .&lt;/li&gt;&lt;/ol&gt;&lt;hr&gt;
[[#Top]]

==Data of Experiment==       
    Estimates =[1000,1010,1786,2000,1500,1500,100,120,150,150,150,170,175,180,197,200,200,200,200,200,200,220,220,220,220,234,250,250,250,250,250,250,250,250,250,263,270,275,275,286,300,
                300,300,300,300,300,300,300,320,350,350,350,400, 400,400,400,400,450,467,500,500,500,500,500,500,500,550,550,600,600,600,650,700,700,720]

    '''CODE:'''
&lt;pre&gt;
Estimates = [1000,1010,1786,2000,1500,1500,100,120,150,150,150,170,175,180,197,200,200,200,200,200,200,220,220,220,220,234,250,250,250,250,250,250,250,250,250,263,270,275,275,286,300,                300,300,300,300,300,300,300,320,350,350,350,400,400,400,400,400,450,467,500,500,500,500,500,500,500,550,550,600,600,600,650,700,700,720]
Estimates.sort()
offset = int(0.10*len(Estimates))
for i in range(offset):
       del Estimates[0]
       del Estimates[-1]
Sum = 0    
for i in range(len(Estimates)):
       Sum += Estimates[i]
Mean_Value = Sum/len(Estimates)
print(&quot;Mean : &quot;, int(Mean_Value))
#Output:
Mean :  351
&lt;/pre&gt;
&lt;hr&gt;
==Trimmed Mean for the above example== 
&lt;h3&gt;Using scipy library&lt;/h3&gt;
&lt;pre&gt;
#import scipy to use the method of trim_mean
from scipy import stats
trimMean = stats.trim_mean(Estimates, 0.1) # Trim 10% at both ends
print(&quot;Trimmed Mean : &quot;,trimMean)
#Output:
Trimmed Mean :  335.1020408163265
&lt;/pre&gt;

&lt;h3&gt;Without using scipy library&lt;/h3&gt;
&lt;pre&gt;
#Trimmed mean with 10%
p=10/100
#sorted data
data=[2, 4, 6, 7, 11, 21, 81, 90, 105, 121]
n = len(data)
#Remove elements from both end
rem=int(n*p)
newData = data[rem:-rem]
mean = 0
for i in newData:
    mean += i
mean = int(mean/len(newData))
print(&quot;Trimmed mean : &quot;,mean)
#Output: Trimmed mean :  40
&lt;/pre&gt;
[[#Top]]

=Jumbled_Words Permutations: Jumbled Words=
==What are Permutations ?==
A permutation also called ordering of selected number of elements from a list denoted by nPr here we are choosing all elements of a list and so n=r&lt;br&gt;
nPr=n!/(n-r)!&lt;br&gt; as n=r
nPn=n!&lt;br&gt; which gives all possible arrangement of elements present in a list.

 For example, permutations of list [1,2,3] are [1,2,3], [1,3,2], [2,1,3], [2,3,1], 
[3,1,2], and [3,2,1]. 
The number of permutations of a list of elements nPn is given by n!. For example, there are 2! = 2 x 1 = 2 permutations of [1,2], namely [1,2] and [2,1], and 3! = 3 x 2 x 1 = 6 permutations of [1,2,3], as mentioned above.&lt;br/&gt;
[[File:Permutations.jpg]]

==Implementation==
 &lt;p style=&quot;text-align:justify&quot;&gt;
Here, we try to demonstrate the concept of permutations through jumbled words. It is a two player game in which one person presents the other person a different permutation of the word in his mind. The other person has to guess the right word. If he guesses, the he wins otherwise he loses.&lt;/p&gt;
 Input an list of words.
 Randomly pick a word from the list of words .
 Shuffle this word and present it to the other player.
 if word guesses by the player is same as the one picked from list of w
     player wins
 else
     player loses

ALTERNATE CODE TO GENERATE THIS GAME:
&lt;pre&gt;
import random
p1=input(&quot;enter player 1 name:&quot;)
p2=input(&quot;enter player 2 name:&quot;)
l=[&quot;rainbow&quot;,&quot;computer&quot;,&quot;robot&quot;,&quot;butter&quot;,&quot;vegetable&quot;,&quot;science&quot;,&quot;correct&quot;]
c1=c2=a1=a2=f1=f2=0
k=1
i=3
def play():
    n=random.choice(l)        ##n=chooses a word from list l
    l1=[]
    for j in n:
       l1.append(j)      ##creates a list for word in n
    for t in range(len(l1)):
       p=random.choice(l1)     ##this randomly displays letters in the list
       print(p)
       l1.remove(p)          ##to avoid the repetition of a letter
    s=input(&quot;enter the word:&quot;)
    if(s==n):
        print(&quot;correct&quot;)
        return 1
    else:
        print(&quot;not correct&quot;)
        print(&quot;answer is&quot;,n)
        return 0
def stat():
     print(&quot;player 1:&quot;)
     print(&quot;score:&quot;,c1)
     print(&quot;answered:&quot;,a1)
     print(&quot;failed:&quot;,f1)
     print(&quot;.............&quot;)
     print(&quot;player 2:&quot;)
     print(&quot;score:&quot;,c2)
     print(&quot;answered:&quot;,a2)
     print(&quot;failed&quot;,f2)
     if(c1&gt;c2):
         print(p1,&quot; won over &quot;,p2)
     elif(c1==c2):
         print(&quot;draw game&quot;)
     else:
         print(p2,&quot; won over &quot;,p1) 
while(i!=4):
      if(i==3):
         if(k==1):
             print(&quot;player 1 turn&quot;)
             print(&quot;your jumbled word is:&quot;)
             k=k+1
             m=play()
             if(m==1):      ##if guessed answer is correct,then score and no.of answered count will be increased
                c1+=1
                a1+=1
             else:
                f1+=1       ##else count of no.of failed to answered will be incremented
         else:
             print(&quot;player 2 turn&quot;)
             print(&quot;your jumbled word is:&quot;)
             k=k-1
             m=play()
             if(m==1):
                c2=c2+1
                a2=a2+1
             else:
                f2=f2+1
       if(i==2):
             print(&quot;present status&quot;)
             stat()
       i=int(input(&quot;enter your choice  1.stop 2.status 3.continue&quot;))
       if(i==1):
             stat()
             i=i+3
&lt;/pre&gt;
&lt;hr&gt;

[[#Top]]

=== JumbledWord Simple Logic, In Short ===
[[File:jumbledWord.gif]]
---
&lt;hr&gt;
'''Logic to create a Jumbled Word'''
&lt;hr&gt;
&lt;pre&gt;
#Get Jumbled Word and print it Horizontally
import random

def getJumbledWord(b):
    jumble=''
    l1 = [ b[i] for i in range(0, len(b)) ]
    for t in range(len(l1)):
       p=random.choice(l1)  #this randomly gets letters from the list      
       jumble=jumble+p       
       l1.remove(p)
    return jumble

b=input(&quot;Enter a word to make it jumbled : &quot;)
print(&quot;Jumbled Word : &quot;, getJumbledWord(b))
&lt;/pre&gt;
&lt;pre&gt;
Output:
Enter a word to make it jumbled : live and let live others
Jumbled Word :  vel  toldeisrte aihv len
==========================================
Enter a word to make it jumbled : junkfood
Jumbled Word :  nfukdooj
&lt;/pre&gt;
&lt;hr&gt;
'''Another Logic to create a Jumbled Word'''
&lt;hr&gt;
&lt;pre&gt;
import random
b=input(&quot;Enter a word to make it jumbled : &quot;)

def getJumbledWord1(b):
    l1 = [ b[i] for i in range(0, len(b)) ]
    random.shuffle(l1)
    str1 = ''.join(l1)
    return str1

print(&quot;Jumbled Word : &quot;, getJumbledWord1(b))
&lt;/pre&gt;

====Sample Output:====
&lt;pre&gt;
---- Output1 
Enter a word to make it jumbled : butter
Jumbled Word :  tbture

---- Output2 
Enter a word to make it jumbled : petriotism
Jumbled Word :  pittrosime
&lt;/pre&gt;

=Theory of Evolution=

== What is Evolution ? ==
Evolution is the change in heritable characteristics over successive generations. The theory of evolution explains that DNA, which acts as a carrier of genetic information from one generation to other, tends to change or mutate occasionally. These changes are reflected in next generations to come. This is how life has evolved on earth from bacteria to human beings.&lt;br&gt;
[[File:Evolution.png|500px]]

== Implementation ==
 &lt;p style=&quot;text-align:justify&quot;&gt;
An array representing DNA is stored in a file. As genes are forms of DNA, they contain information to be transferred to forthcoming generations. Assume that information is in the form of bits (in the form of 0s and 1s). A number is picked randomly from 1 to the size of the array. A new parameter has been introduced which decides whether mutation would occur or not. If the value of this new parameter is 1 (It is picked randomly from 1 to 100), then only change is reflected down the generations, otherwise it is not. The pseudo code is as follows :
&lt;/p&gt;
Input an array containing genetic information .
Randomly generate a number (say m) from 1 to length of the array. Randomly generate other number (say p) from 1 to 100.

&lt;pre&gt; 
    if p is equal to 1 then 
        if m is 1 then
          set it to 0
        else
          set it to 1
&lt;/pre&gt;
[[#TOP]]</text>
      <sha1>665cf2frr3z0c76177jra27wpfrvsgi</sha1>
    </revision>
    <revision>
      <id>3772</id>
      <parentid>3771</parentid>
      <timestamp>2018-09-29T04:33:54Z</timestamp>
      <contributor>
        <username>Amichoksi</username>
        <id>1571</id>
      </contributor>
      <comment>/* Implementation */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="31646">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_3 Contributors of this page]
*Week 3 Playlist: https://www.youtube.com/playlist?list=PLc_j0TNIaWxOVx_z9jAM2UB3RqYNXaoEo
=List=
List is a flexible data structure used for storing a group of data separated by comma. The elements in a list need not be of the same data type.

'''Example:'''
       List_1 = [ 1, 2,3] or 
       List_1 = [&quot;coffee&quot;, &quot;Tea&quot;, &quot;Milk&quot;] or
       List_1 = [1,&quot;coffee&quot;, &quot;Tea&quot;, 3, &quot;5&quot;]

==List Creation==
a) A list can be created by simply putting values (separated by comma) between square
 brackets as given below,
&lt;pre&gt;List_1 = [1,&quot;coffee&quot;, &quot;Tea&quot;, 3, &quot;5&quot;] #this creates a list by name List_1 containing
 following items
&lt;/pre&gt;


Or,
(b)A List can be created from scratch and elements can be added 
&lt;pre&gt;
        List_2 = [ ]
        List_2.append(&quot;Kala&quot;)
        List_2.append(&quot;Mala&quot;)
&lt;/pre&gt;
Here we use &quot;append&quot;, which is a function in python that enable us to append or attach an element to a list .
&lt;pre&gt;Thus List_2 will now hold [&quot;Kala&quot;,&quot;Mala&quot;]&lt;/pre&gt;

[[#Top]]

==Operations and Methods to work with List==
&lt;pre&gt;
a = [25,30,50,90,12,13]
b = [100,300,500,200,250]
&lt;/pre&gt;
&lt;hr&gt;
&lt;table border=2&gt;
  &lt;tr&gt;
    &lt;th&gt;&lt;b&gt;Method/&lt;br&gt;Operator&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Function&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Syntax&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Output&lt;/b&gt;&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;len()&lt;/td&gt;
    &lt;td&gt;Find length of a list&lt;/td&gt;
    &lt;td&gt;len(a)&lt;/td&gt;
    &lt;td&gt;6&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;max()&lt;/td&gt;
    &lt;td&gt;Find maximum element from the list&lt;/td&gt;
    &lt;td&gt;max(a)&lt;/td&gt;
    &lt;td&gt;90&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;min()&lt;/td&gt;
    &lt;td&gt;Find minimum element from the list&lt;/td&gt;
    &lt;td&gt;min(a)&lt;/td&gt;
    &lt;td&gt;12&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sum()&lt;/td&gt;
    &lt;td&gt;Returns sum of all elements of the list&lt;/td&gt;
    &lt;td&gt;sum(a)&lt;/td&gt;
    &lt;td&gt;220&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;reverse()&lt;/td&gt;
    &lt;td&gt;Reverses the original list&lt;/td&gt;
    &lt;td&gt;a.reverse()&lt;/td&gt;
    &lt;td&gt;[13, 12, 90, 50, 30, 25]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sort()&lt;/td&gt;
    &lt;td&gt;Sorts the original list in ascending order&lt;/td&gt;
    &lt;td&gt;a.sort()&lt;/td&gt;
    &lt;td&gt;[12, 13, 25, 30, 50, 90]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sorted()&lt;/td&gt;
    &lt;td&gt;Returns the new sorted list &lt;/td&gt;
    &lt;td&gt;sorted(a)&lt;/td&gt;
    &lt;td&gt;[12, 13, 25, 30, 50, 90]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;insert()&lt;/td&gt;
    &lt;td&gt;Insert at a particular index in the list, and shifts remaining elements&lt;/td&gt;
    &lt;td&gt;a.insert(3,3)&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 3, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;append()&lt;/td&gt;
    &lt;td&gt;Adds elements/object to the end of the list&lt;/td&gt;
    &lt;td&gt;a.append(5)&lt;br&gt;a.append([10,20])&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 5]&lt;br&gt;[25, 30, 50, 90, 12, 13, [10, 20]]&lt;br&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;extend()&lt;/td&gt;
    &lt;td&gt;Adds object to the end of the list as elements not as object&lt;/td&gt;
    &lt;td&gt;a.extend([10,20])&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 10, 20]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;*&amp;nbsp;&amp;nbsp;Repeatation&lt;br&gt;operator&lt;/td&gt;
    &lt;td&gt;Repeat the list for n times and returns a new list&lt;/td&gt;
    &lt;td&gt;a*2&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 25, 30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;+ Concatenation&lt;br&gt;operator&lt;/td&gt;
    &lt;td&gt;Concatenates two lists, and returns a new list&lt;/td&gt;
    &lt;td&gt;a+b&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 100, 300, 500, 200, 250]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;index()&lt;/td&gt;
    &lt;td&gt;Finds index of a particular element in the list or not&lt;/td&gt;
    &lt;td&gt;a.index(25)&lt;br&gt;a.index(0)&lt;br&gt;&lt;/td&gt;
    &lt;td&gt;0&lt;br&gt;&lt;br&gt;ValueError: 0 is not in list&lt;br&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;in operator&lt;/td&gt;
    &lt;td&gt;Finds whether a particular element is in the list or not, returns boolean&lt;/td&gt;
    &lt;td&gt;25 in a&lt;/td&gt;
    &lt;td&gt;True&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;not in operator&lt;/td&gt;
    &lt;td&gt;Checks if element is not available in list, returns boolean&lt;/td&gt;
    &lt;td&gt;25 not in a&lt;/td&gt;
    &lt;td&gt;False&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;count()&lt;/td&gt;
    &lt;td&gt;Counts the number of occurence of an element in the list&lt;/td&gt;
    &lt;td&gt;a.count(25)&lt;/td&gt;
    &lt;td&gt;1&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;remove()&lt;/td&gt;
    &lt;td&gt;Removes an element from the list&lt;/td&gt;
    &lt;td&gt;a.remove(25)&lt;/td&gt;
    &lt;td&gt; [30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;pop()&lt;/td&gt;
    &lt;td&gt;Delete and return item at index 0&lt;/td&gt;
    &lt;td&gt;a.pop(0)&lt;/td&gt;
    &lt;td&gt;25 , a will be [30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;del&lt;/td&gt;
    &lt;td&gt;Deletes item at a particular index from the list&lt;/td&gt;
    &lt;td&gt;del a[0]&lt;/td&gt;
    &lt;td&gt;[30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;all()&lt;/td&gt;
&lt;td&gt;Returns True, if all items in list are True or it is an empty list&lt;/td&gt;
&lt;td&gt;all([True, True, True])
all([])
&lt;/td&gt;
&lt;td&gt;True&lt;br&gt;
True&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;any()&lt;/td&gt;
&lt;td&gt;Returns True, if any item in list is True else return False&lt;/td&gt;
&lt;td&gt;any([True, True, True])&lt;br&gt;
any([True, False, True])&lt;br&gt;
any([])&lt;/td&gt;
&lt;td&gt;True&lt;br&gt;False&lt;br&gt;False&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;

==Printing the List==
=== Print whole list ===
A list can be printed simply or using a ''for / while'' loop 

 print(List_2)     # To print the entire list
This code will print      
 ['Kala','Mala']     

===Print element at a particular index===
&lt;pre&gt;
Using index position
    List_2[0]     # prints 'Kala' ,i.e,the value at index position 0.
    List_2[1]     # prints 'Mala'.
&lt;/pre&gt;
=== Without using index position ===
&lt;pre&gt;
for item in List_2:   # here item is a variable used to access elements in list.
       print(item)
   This code snippet prints 
    Kala
    Mala
&lt;/pre&gt;
[[#Top]]

==Search for a particular element in list==
Elements in a list can be searched by one of the two ways:
=== using index() function===
&lt;pre&gt;
ages1 = [11,23,12,23,45]

#if element is available in the list, index() returns the index value on which, the element is
 present.
print(ages1.index(45))#Output: 4

#if element is not available in the list, index() returns ''ValueError''
print(ages1.index(0))#Output: ValueError:
&lt;/pre&gt;

In programming, if such error occurs, program gets terminated. It can be solved using exception handling.
 
e.g.
&lt;pre&gt;
ages1 = [11,23,12,23,45]

try:
    print(ages1.index(0))
except ValueError:
    print(&quot;Exception has occured&quot;)    
    print(&quot;Element is not found in the list&quot;)

&lt;/pre&gt;
&lt;pre&gt;
'''Output: 
Exception has occured
Element is not found in the list
'''&lt;/pre&gt;
[[#Top]]

=== using 'in' operator===
''in'' operator is used to check whether a particular element is available in the list or not.e.g.

&lt;pre&gt;
ages1 = [11,23,12,23,45]
no=11

if no in ages1:
    print(&quot;no is there in the list&quot;)
else:    
    print(&quot;no is NOT there in the list&quot;)
&lt;/pre&gt;
&lt;pre&gt;
#Output: no is there in the list
&lt;/pre&gt;


'''Number is not there in the list'''
&lt;pre&gt;
ages1 = [11,23,12,23,45]
no=15

if no in ages1:
    print(&quot;no is there in the list&quot;)
else:    
    print(&quot;no is NOT there in the list&quot;)
&lt;/pre&gt;
&lt;pre&gt;
Output: no is NOT there in the list
&lt;/pre&gt;
[[#Top]]

==Updating the List==
The lists can be updated using ''append'' or ''insert'' function.  Append adds the element to the end of the list and Insert adds the element in the specified position.
&lt;pre&gt;
   # add the element 'Sheela' to the end of the list.
   List_2.append(&quot;Sheela&quot;)    
   print (List_2) will output 
   ['Kala', 'Mala', 'Sheela']
&lt;/pre&gt;
   &lt;pre&gt;
# add the element &quot;Bala&quot; in the list at the index 1.
   List_2.insert(1,&quot;Bala&quot;)    
   print (List_2) will output 
   ['Kala', 'Bala','Mala', 'Sheela']
&lt;/pre&gt;

=== Extend the list by adding elements of other list at end using extend()===
&lt;pre&gt;
ages = [11,23,12,23,45]
ages.extend([57,58])
print(ages)
&lt;/pre&gt;

&lt;pre&gt;
#Output: [11, 23, 12, 23, 45, 57, 58]
&lt;/pre&gt;

==== Difference between ''append() and extend()'' ====
Difference between ''append()'' and ''extend()'' can be easily understood, by the following example.

&lt;pre&gt;
appendlist = [11,23,12,23,45]
appendlist.append([57,58])

extendlist= [11,23,12,23,45]
extendlist.extend([57,58])
&lt;/pre&gt;

&lt;pre&gt;
'''Output:
[11, 23, 12, 23, 45, [57, 58]]
[11, 23, 12, 23, 45, 57, 58]'''
&lt;/pre&gt;

[[#Top]]

==Basic Operations on List==
===Frequency of Occurrence===
list.count(object) will return the number of times the object occur in the list.
  '''Example'''
    ages = [11,23,12,23,45,43,22,24,23]
    ages.count(23) will return
    3
    ages.count(100) will return
    0

===Length of the List===
''len(list)'' will return the length of the list ie. the number of objects in the list.
  '''Example'''
&lt;pre&gt;
    ages = [11,23,12,23,45,43,22,24,23]
    len(ages) # Output: 9
&lt;/pre&gt;

To print the objects in the list either use ''for item in list'' or ''for index in range(len(list))''
&lt;pre&gt;
    for item in ages:       
        print (item)  
        (OR)
    for index in range(len(ages)) :
        print (ages[index])
&lt;/pre&gt;

===Sort the List===
''list.sort()'' will sort the list in ascending order
  '''Example'''
    ages = [11,23,12,23,45,43,22,24,23]
    ages.sort() 
    print (ages) 
    [11, 12, 22, 23, 23, 23, 24, 43, 45]

[[#Top]]

===Sort the List using sorted() function===
''sorted(list1)'' will sort the list and return a new list, it doesn't modify the original list
&lt;br&gt;'''Example: Sort in ascending order'''
&lt;pre&gt;
ages = [11,23,12,23,45,43,22,24,23]
newList=sorted(ages)
print(newList)

#Output: [11, 12, 22, 23, 23, 23, 24, 43, 45]
&lt;/pre&gt;

&lt;br&gt;'''Example: Sort in descending order'''
&lt;pre&gt;
ages = [11,23,12,23,45,43,22,24,23]
newList=sorted(ages,reverse=True)
print(newList)

#Output: [45, 43, 24, 23, 23, 23, 22, 12, 11]
&lt;/pre&gt;

===Reverse the List===
''list.reverse()'' will reverse the original list
  '''Example'''
    ages = [11, 12, 22, 23, 23, 23, 24, 43, 45]
    ages.reverse()
    print (ages)
    [45, 43, 24, 23, 23, 23, 22, 12, 11]

Both ''sort()'' and ''reverse()'' list operation will work on numeric and alphanumeric data list.

A special use of the ''reverse()'' function is to descend a list that is sorted in ascending order.

  '''Example'''
&lt;pre&gt;
ages = [11, 12, 22, 23, 23, 23, 24, 43, 45]
ages.sort()
print(ages)
ages.reverse()
print(ages)
&lt;/pre&gt;

[[#Top]]

===Slicing===
Used to retrieve an object or objects in a range as a list  
  '''Example'''

Use ''list[index]'' to retrieve the object at the given index
&lt;pre&gt;
In [1]: student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
In [2]: student[3]     #Object at index 3.  Remember index starts at 0
Out[2]: 'Geetha'      
&lt;/pre&gt;

Use ''list[start_index : end_index + 1]'' to retrieve objects from the start_index to end_index 
&lt;pre&gt;
In [3]: student[2:4]     # Objects from index 2 to 3 as List. Note the [ and ]
Out[3]: ['Vijay', 'Geetha']   
&lt;/pre&gt;

Use ''list[:]'' to retrieve objects from the starting of the list to the end of the list. 
The default start value will be the starting index of the list (i.e. 0) and the default end value
will be the length of the list 
&lt;pre&gt;
In [4]: student[:]        # prints the entire list
Out[4]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma', 'Janani']
&lt;/pre&gt;
&lt;pre&gt;
In [5]: student[:5]       # prints the objects from the start of the list upto object at index 4
Out[5]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran']
&lt;/pre&gt;
&lt;pre&gt;
In [6]: student[2:]       # prints the objects from index 2 upto the end of the list
Out[6]: ['Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma', 'Janani']
&lt;/pre&gt;

Negative index too is available in Python. It starts from last element of the list. i.e.
&lt;pre&gt;
In [7]:student[-1]        #prints last index of list
Out[7]: 'Janani'
&lt;/pre&gt;
&lt;pre&gt;
In [8]:student[-1:-8]     #prints empty list
Out[8]: []
&lt;/pre&gt;
&lt;pre&gt;
In [9]:student[-8:-1]     #prints -8th index to -1st index elements
Out[9]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma']
&lt;/pre&gt;

[[#Top]]

===Removing Item from list ===
----

Is used to remove a specific item from the list.

'''Example:'''
 
Use list.remove(entry/value)  Or   del list[index]    Or list.pop(index)
&lt;pre&gt;
student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
student.remove(&quot;Arun&quot;)   #This will delete item &quot;Arun&quot;
         Or    
del student[0]           # This will delete item at index 0
         Or
student.pop(0)         # This will delete and return item at index 0
print(student)    
Output: &quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
&lt;/pre&gt;

[[#Top]]

===Delete list ===
----
Used to delete complete list

'''Example'''

Use del &lt;list name&gt;
&lt;pre&gt;
student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
del student&lt;/pre&gt;

===Concatenation of two lists===
----
''+'' is the concatenation operator which is used concatenate two lists. 
&lt;pre&gt;
ages1 = [11,23,12,23,45]
ages2 = [25, 24, 43, 47]
age=ages1+ages2
print(age)
#Output: [11, 23, 12, 23, 45, 25, 24, 43, 47]
&lt;/pre&gt;

===Repeatation of a list ===
----
''*'' is the operator to repeat a particular list.
&lt;pre&gt;
ages1 = [11,23,12,23,45]
age=ages1*5 #ages1 list is repeated 5 times and stroed in ''age'' list
print(age)

#Output: [11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45]
&lt;/pre&gt;

=== all and any for List===
all() and any() are special functions to check whether all elements in iterable is ''True'' or any element is ''True''
&lt;ol&gt;
&lt;li&gt;If all elements in a list are ''True'', ''all()'' will return ''True''&lt;/li&gt;
&lt;li&gt;If iterable is ''empty'', ''all()'' will return ''True''&lt;/li&gt;
&lt;li&gt;If iterable contains at least one ''True'', ''any()'' will return ''True''&lt;/li&gt;
&lt;li&gt;If iterable is ''empty'', ''any()'' will return ''False''&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;
lsit=[True, True, True, True]
print(all(lsit))#Output: True
print(any(lsit))#Output: True

lsit1=[True, False, True, True]
print(all(lsit1))#Output: False
print(any(lsit1))#Output: True

lsit2=[False,False,False]
print(all(lsit2))#Output: False
print(any(lsit2))#Output: False

lsit3=[]
print(all(lsit3))#Output: True
print(any(lsit3))#Output: False
&lt;/pre&gt;

==Conditional Statements==
Conditionals are used to check the condition and change the flow of the program 
accordingly. They are realized in programming languages through if statement. The 
syntax is as follows :
&lt;pre&gt;
         if condition : 
            statement
&lt;/pre&gt;
    '''Note:''' Do not forget indentation (inserting space/tab) in the line after the
 if condition.
    
    In case you want to execute a set of statements when a condition is true and another

set of statement when the condition is false.
&lt;pre&gt;
         if condition : 
            statement 1
         else :
            statement 2
&lt;/pre&gt;

&lt;pre&gt;    
    Multiple if-else statements can be written as follows:
         if condition_1 : 
            statement 1
         elif condition_2 : # 'elif' is short for 'else if'
            statement 2
         elif condition_3 :
            statement 3
        .
        .
         else :
            final statement
&lt;/pre&gt;

[[#Top]]

=Loops and Conditionals : Fizzbuzz=
====Loops====
Loops are used to execute a set of repetitive statements. They are realised
through 'while' and 'for' loops in programming languages. The syntax of 'for' loop is 
as follows :
&lt;pre&gt;
for LOOPVARIABLE in SEQUENCE: 
            STATEMENTS&lt;/pre&gt;

    '''e.g.''' to print all the data from a list we can write:
&lt;pre&gt;
for item in list_name:
      print(item)&lt;/pre&gt;
    OR
&lt;pre&gt;
for index in range(len(list_name)):
      print(list_name[index])
 &lt;/pre&gt;   
    The syntax for while loop is as follows :
&lt;pre&gt;    
while BOOLEANEXPRESSION: 
     STATEMENTS
     INCREMENT/DECREMENT
&lt;/pre&gt;    
    '''e.g.''' if we want to print all numbers from 1 to 10
&lt;pre&gt;
i=1
while i&lt;=10 :
    print(i,&quot; &quot;)
    i=i+1
    &lt;/pre&gt;
 
'while' loop has indefinite iteration (run-time unknown). So, there must be loop,  break statement in it.
 Whereas 'for' loop is definite in nature (i.e. known or predictable span).&lt;br&gt;

&lt;b&gt;NOTE: Python doesn't have anything like do-while loop.&lt;/b&gt;

[[#Top]]

==Implementation==
Here, we try to demonstrate the concept of loops and conditionals through a game called Fizzbuzz. The rules are as follows :&lt;br/&gt;
[[File:fizzBuzz.gif]]

• if input number is a multiple of ’3’ print ”Fizz”
&lt;br/&gt;
• if input number is a multiple of ’5’ print ”Buzz”
&lt;br/&gt;
• if input number is a multiple of both '3' and ’5’ print ”FizzBuzz”
&lt;br/&gt;
The pseudo code is as follows :
&lt;pre&gt;
   If input no % 3 == 0 and  input no % 5 == 0 : 
       print ”Fizzbuzz”
   else if input no % 3 == 0 : 
       print ”Fizz”
   else if input no % 5 == 0 : 
       print ”Buzz”
   else :
       print the input no
&lt;/pre&gt;
 &lt;p style=&quot;text-align:justify&quot;&gt;
The order of statements execution matters to get the desired output. The highest priority condition should be first followed by other. In fizzbuzz programming, first checking should be done for both divisibility of 3 and 5. If condition not satisfied only then it should check individually for 3 or 5. So carefully choosing the order is crucial for better programming.
Note: There is some effect of present condition statements chosen on next conditions statements. That is why in first attempt fizzbuzz programming got struck.&lt;/p&gt;

Example: 
&lt;pre&gt;
#Code to achieve the above requirement in python3.
i = int(input(&quot;Enter the number&quot;)) 
if i%3 == 0 and i%5 == 0: print(i,&quot;FizzBuzz&quot;)  
elif i%5 == 0: print(i,&quot;Buzz&quot;)
elif i%3 == 0: print(i,&quot;Fizz&quot;)
else: print(i)
&lt;/pre&gt;
Lets put the same into a loop for a range given by the user.
&lt;pre&gt;
def fizzbuzzgame(start,stop):
    for i in range(start,stop+1):
        if i%3 == 0 and i%5 == 0:
            print(i,&quot;FizzBuzz&quot;)
        elif i%5 == 0:
            print(i,&quot;Buzz&quot;)
        elif i%3 == 0:
            print(i,&quot;Fizz&quot;)
        else: print(i)

fizzbuzzgame(50,100)
&lt;/pre&gt;
&lt;pre&gt;
#Output:
1235
Buzz
======================================
555
Fizzbuzz
======================================
1235
Buzz
======================================
999
Fizz
&lt;/pre&gt;

[[#Top]]

=== Fizz Buzz game in Interactive mode with Score ===
'''By Ms. Ami Tusharkant Choksi'''
&lt;pre&gt;
def fizzbuzzgame(i):
        if i%3 == 0 and i%5 == 0:
            print(i,&quot;FizzBuzz&quot;)
            return(&quot;fzbz&quot;)
        elif i%5 == 0:
            print(i,&quot;Buzz&quot;)
            return(&quot;bz&quot;)
        elif i%3 == 0:
            print(i,&quot;Fizz&quot;)
            return(&quot;fz&quot;)
        else:
            print(i)
            return(&quot;no&quot;)

ch = 'y'
fizzbuzz=0
fizz=0
buzz=0
nothing=0
print(&quot;&quot;&quot;

 /$$$$$$$$/$$                  /$$$$$$$                            
| $$_____|__/                 | $$__  $$                           
| $$      /$$/$$$$$$$$/$$$$$$$| $$  \ $$/$$   /$$/$$$$$$$$/$$$$$$$$
| $$$$$  | $|____ /$$|____ /$$| $$$$$$$| $$  | $|____ /$$|____ /$$/
| $$__/  | $$  /$$$$/   /$$$$/| $$__  $| $$  | $$  /$$$$/   /$$$$/ 
| $$     | $$ /$$__/   /$$__/ | $$  \ $| $$  | $$ /$$__/   /$$__/  
| $$     | $$/$$$$$$$$/$$$$$$$| $$$$$$$|  $$$$$$//$$$$$$$$/$$$$$$$$
|__/     |__|________|________|_______/ \______/|________|________/
                                                                  
&quot;&quot;&quot;)   
print('''

  /$$$$$$                                
 /$$__  $$                               
| $$  \__/ /$$$$$$ /$$$$$$/$$$$  /$$$$$$ 
| $$ /$$$$|____  $| $$_  $$_  $$/$$__  $$
| $$|_  $$ /$$$$$$| $$ \ $$ \ $| $$$$$$$$
| $$  \ $$/$$__  $| $$ | $$ | $| $$_____/
|  $$$$$$|  $$$$$$| $$ | $$ | $|  $$$$$$$
 \______/ \_______|__/ |__/ |__/\_______/
                                     
''')

while(ch == 'y'):
    n=int(input(&quot;Enter a Number : &quot;))
    winLoose=fizzbuzzgame(n)
    if(winLoose == &quot;fz&quot;):
        fizz+=1
    elif(winLoose == &quot;bz&quot;):
        buzz+=1
    elif(winLoose == &quot;fzbz&quot;):
        fizzbuzz+=1
    ch=input(&quot;Do you want to continue playing the game : (y/n)&quot;)
    if(ch=='n'):
        print('Congratulations, your score is\n FizzBuzz:%d\nFizz:%d\nBuzz:%d' %
(fizzbuzz,fizz,buzz))
    
'''Sample Output:

 /$$$$$$$$/$$                  /$$$$$$$                            
| $$_____|__/                 | $$__  $$                           
| $$      /$$/$$$$$$$$/$$$$$$$| $$  \ $$/$$   /$$/$$$$$$$$/$$$$$$$$
| $$$$$  | $|____ /$$|____ /$$| $$$$$$$| $$  | $|____ /$$|____ /$$/
| $$__/  | $$  /$$$$/   /$$$$/| $$__  $| $$  | $$  /$$$$/   /$$$$/ 
| $$     | $$ /$$__/   /$$__/ | $$  \ $| $$  | $$ /$$__/   /$$__/  
| $$     | $$/$$$$$$$$/$$$$$$$| $$$$$$$|  $$$$$$//$$$$$$$$/$$$$$$$$
|__/     |__|________|________|_______/ \______/|________|________/
                                                                                                                                   

  /$$$$$$                                
 /$$__  $$                               
| $$  \__/ /$$$$$$ /$$$$$$/$$$$  /$$$$$$ 
| $$ /$$$$|____  $| $$_  $$_  $$/$$__  $$
| $$|_  $$ /$$$$$$| $$ \ $$ \ $| $$$$$$$$
| $$  \ $$/$$__  $| $$ | $$ | $| $$_____/
|  $$$$$$|  $$$$$$| $$ | $$ | $|  $$$$$$$
 \______/ \_______|__/ |__/ |__/\_______/
                                         

Enter a Number : 666
666 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 777
777 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 555
555 FizzBuzz
Do you want to continue playing the game : (y/n)y
Enter a Number : 1
1
Do you want to continue playing the game : (y/n)y
Enter a Number : 789
789 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 25
25 Buzz
Do you want to continue playing the game : (y/n)n
Congratulations, your score is

FizzBuzz:1
Fizz:3
Buzz:1

&lt;/pre&gt;

[[#Top]]

=Crowd Computing: Just Estimate=

Crowd computing is conceptualised in various ways as being related to crowdsourcing, human computation, social computing, cloud computing and mobile computing. 

Crowd computing has been described in various ways viz. 
&lt;ul&gt;&lt;li&gt;distribution of human intelligence tasks to mobile devices&lt;/li&gt;
&lt;li&gt;cloud computing with humans&lt;/li&gt;
&lt;li&gt;human problem solving with large numbers of people using computers&lt;/li&gt;&lt;/ul&gt; 

Broadly, crowed computing is a set of human interaction tools for idea exchange and non-hierarchical decision making. 

Four common characteristics are used to identify the term: 
&lt;ol&gt;
&lt;li&gt;participation by a crowd of humans&lt;/li&gt;
&lt;li&gt;interaction with computing technology&lt;/li&gt;
&lt;li&gt;activity that is predetermined by the initiator or application itself&lt;/li&gt;
&lt;li&gt;the execution of tasks by the crowd utilising innate human capabilities.&lt;/li&gt;
&lt;/ol&gt;

==Wisdom of Crowds==
 &lt;p style=&quot;text-align:justify&quot;&gt;
The concept of ’Wisdom of Crowds’ was proposed by ''Francis Galton''. A weight-judging competition was carried on at the annual show of the West of England Fat Stock and Poultry Exhibition recently held at Plymouth, A fat ox having been selected, competitors bought stamped and numbered cards, each, on which to inscribe their respective names, addresses, and estimates of what the ox would weigh after it had been slaughtered. Those who guessed most successfully received prizes. About 8oo tickets were issued to the par- ticipants. The middlemost estimate of all the estimates recorded was 1207 lbs and the actual weight of the ox was 1198 lbs.&lt;/p&gt;

==Our Experiment==
 &lt;p style=&quot;text-align:justify&quot;&gt;
The crowd had to guess the number of candies/gems in a jar. Around 75 people participated in the experiment. The actual number of gems in the jar were 375. The median of all estimates came out to be 300 and the mean of all the estimates came out to be around 396. Median underestimated and mean overestimated the actual value. So according to recent studies, Trimmed mean must be used as an aggregate measure to estimate where Wisdom of Crowds is involved.
&lt;/p&gt;
[[File:Gemsjar.jpg|center|200px|caption]]

===Trimmed Mean===
 &lt;p style=&quot;text-align:justify&quot;&gt;
In these kinds of experiments, 10% trimmed mean is usually followed. For calculating 10% trimmed mean, remove 10% smallest and 10% largest values from the sample. Calculate the mean of the sample obtained. In the above experiment, the trimmed mean came out to be around 351 which is very close to the actual value.&lt;/p&gt;

==Implementation==
Here, we try to demonstrate the concept of trimmed mean through crowd computing.
&lt;ol&gt;
&lt;li&gt; Input a list of estimates done by the crowd .&lt;/li&gt;
&lt;li&gt; Sort the list.&lt;/li&gt;
&lt;li&gt; Remove the 10% smallest values.&lt;/li&gt;
&lt;li&gt; Remove the 10% largest values.
&lt;li&gt; Calculate the mean of the new list obtained .&lt;/li&gt;&lt;/ol&gt;&lt;hr&gt;
[[#Top]]

==Data of Experiment==       
    Estimates =[1000,1010,1786,2000,1500,1500,100,120,150,150,150,170,175,180,197,200,200,200,200,200,200,220,220,220,220,234,250,250,250,250,250,250,250,250,250,263,270,275,275,286,300,
                300,300,300,300,300,300,300,320,350,350,350,400, 400,400,400,400,450,467,500,500,500,500,500,500,500,550,550,600,600,600,650,700,700,720]

    '''CODE:'''
&lt;pre&gt;
Estimates = [1000,1010,1786,2000,1500,1500,100,120,150,150,150,170,175,180,197,200,200,200,200,200,200,220,220,220,220,234,250,250,250,250,250,250,250,250,250,263,270,275,275,286,300,                300,300,300,300,300,300,300,320,350,350,350,400,400,400,400,400,450,467,500,500,500,500,500,500,500,550,550,600,600,600,650,700,700,720]
Estimates.sort()
offset = int(0.10*len(Estimates))
for i in range(offset):
       del Estimates[0]
       del Estimates[-1]
Sum = 0    
for i in range(len(Estimates)):
       Sum += Estimates[i]
Mean_Value = Sum/len(Estimates)
print(&quot;Mean : &quot;, int(Mean_Value))
#Output:
Mean :  351
&lt;/pre&gt;
&lt;hr&gt;
==Trimmed Mean for the above example== 
&lt;h3&gt;Using scipy library&lt;/h3&gt;
&lt;pre&gt;
#import scipy to use the method of trim_mean
from scipy import stats
trimMean = stats.trim_mean(Estimates, 0.1) # Trim 10% at both ends
print(&quot;Trimmed Mean : &quot;,trimMean)
#Output:
Trimmed Mean :  335.1020408163265
&lt;/pre&gt;

&lt;h3&gt;Without using scipy library&lt;/h3&gt;
&lt;pre&gt;
#Trimmed mean with 10%
p=10/100
#sorted data
data=[2, 4, 6, 7, 11, 21, 81, 90, 105, 121]
n = len(data)
#Remove elements from both end
rem=int(n*p)
newData = data[rem:-rem]
mean = 0
for i in newData:
    mean += i
mean = int(mean/len(newData))
print(&quot;Trimmed mean : &quot;,mean)
#Output: Trimmed mean :  40
&lt;/pre&gt;
[[#Top]]

=Jumbled_Words Permutations: Jumbled Words=
==What are Permutations ?==
A permutation also called ordering of selected number of elements from a list denoted by nPr here we are choosing all elements of a list and so n=r&lt;br&gt;
nPr=n!/(n-r)!&lt;br&gt; as n=r
nPn=n!&lt;br&gt; which gives all possible arrangement of elements present in a list.

 For example, permutations of list [1,2,3] are [1,2,3], [1,3,2], [2,1,3], [2,3,1], 
[3,1,2], and [3,2,1]. 
The number of permutations of a list of elements nPn is given by n!. For example, there are 2! = 2 x 1 = 2 permutations of [1,2], namely [1,2] and [2,1], and 3! = 3 x 2 x 1 = 6 permutations of [1,2,3], as mentioned above.&lt;br/&gt;
[[File:Permutations.jpg]]

==Implementation==
 &lt;p style=&quot;text-align:justify&quot;&gt;
Here, we try to demonstrate the concept of permutations through jumbled words. It is a two player game in which one person presents the other person a different permutation of the word in his mind. The other person has to guess the right word. If he guesses, the he wins otherwise he loses.&lt;/p&gt;
 Input an list of words.
 Randomly pick a word from the list of words .
 Shuffle this word and present it to the other player.
 if word guesses by the player is same as the one picked from list of w
     player wins
 else
     player loses

ALTERNATE CODE TO GENERATE THIS GAME:
&lt;pre&gt;
import random
p1=input(&quot;enter player 1 name:&quot;)
p2=input(&quot;enter player 2 name:&quot;)
l=[&quot;rainbow&quot;,&quot;computer&quot;,&quot;robot&quot;,&quot;butter&quot;,&quot;vegetable&quot;,&quot;science&quot;,&quot;correct&quot;]
c1=c2=a1=a2=f1=f2=0
k=1
i=3
def play():
    n=random.choice(l)        ##n=chooses a word from list l
    l1=[]
    for j in n:
       l1.append(j)      ##creates a list for word in n
    for t in range(len(l1)):
       p=random.choice(l1)     ##this randomly displays letters in the list
       print(p)
       l1.remove(p)          ##to avoid the repetition of a letter
    s=input(&quot;enter the word:&quot;)
    if(s==n):
        print(&quot;correct&quot;)
        return 1
    else:
        print(&quot;not correct&quot;)
        print(&quot;answer is&quot;,n)
        return 0
def stat():
     print(&quot;player 1:&quot;)
     print(&quot;score:&quot;,c1)
     print(&quot;answered:&quot;,a1)
     print(&quot;failed:&quot;,f1)
     print(&quot;.............&quot;)
     print(&quot;player 2:&quot;)
     print(&quot;score:&quot;,c2)
     print(&quot;answered:&quot;,a2)
     print(&quot;failed&quot;,f2)
     if(c1&gt;c2):
         print(p1,&quot; won over &quot;,p2)
     elif(c1==c2):
         print(&quot;draw game&quot;)
     else:
         print(p2,&quot; won over &quot;,p1) 
while(i!=4):
      if(i==3):
         if(k==1):
             print(&quot;player 1 turn&quot;)
             print(&quot;your jumbled word is:&quot;)
             k=k+1
             m=play()
             if(m==1):      ##if guessed answer is correct,then score and no.of answered count will be increased
                c1+=1
                a1+=1
             else:
                f1+=1       ##else count of no.of failed to answered will be incremented
         else:
             print(&quot;player 2 turn&quot;)
             print(&quot;your jumbled word is:&quot;)
             k=k-1
             m=play()
             if(m==1):
                c2=c2+1
                a2=a2+1
             else:
                f2=f2+1
       if(i==2):
             print(&quot;present status&quot;)
             stat()
       i=int(input(&quot;enter your choice  1.stop 2.status 3.continue&quot;))
       if(i==1):
             stat()
             i=i+3
&lt;/pre&gt;
&lt;hr&gt;

[[#Top]]

=== JumbledWord Simple Logic, In Short ===
[[File:jumbledWord.gif]]
---
&lt;hr&gt;
'''Logic to create a Jumbled Word'''
&lt;hr&gt;
&lt;pre&gt;
#Get Jumbled Word and print it Horizontally
import random

def getJumbledWord(b):
    jumble=''
    l1 = [ b[i] for i in range(0, len(b)) ]
    for t in range(len(l1)):
       p=random.choice(l1)  #this randomly gets letters from the list      
       jumble=jumble+p       
       l1.remove(p)
    return jumble

b=input(&quot;Enter a word to make it jumbled : &quot;)
print(&quot;Jumbled Word : &quot;, getJumbledWord(b))
&lt;/pre&gt;
&lt;pre&gt;
Output:
Enter a word to make it jumbled : live and let live others
Jumbled Word :  vel  toldeisrte aihv len
==========================================
Enter a word to make it jumbled : junkfood
Jumbled Word :  nfukdooj
&lt;/pre&gt;
&lt;hr&gt;
'''Another Logic to create a Jumbled Word'''
&lt;hr&gt;
&lt;pre&gt;
import random
b=input(&quot;Enter a word to make it jumbled : &quot;)

def getJumbledWord1(b):
    l1 = [ b[i] for i in range(0, len(b)) ]
    random.shuffle(l1)
    str1 = ''.join(l1)
    return str1

print(&quot;Jumbled Word : &quot;, getJumbledWord1(b))
&lt;/pre&gt;

====Sample Output:====
&lt;pre&gt;
---- Output1 
Enter a word to make it jumbled : butter
Jumbled Word :  tbture

---- Output2 
Enter a word to make it jumbled : petriotism
Jumbled Word :  pittrosime
&lt;/pre&gt;

=Theory of Evolution=

== What is Evolution ? ==
Evolution is the change in heritable characteristics over successive generations. The theory of evolution explains that DNA, which acts as a carrier of genetic information from one generation to other, tends to change or mutate occasionally. These changes are reflected in next generations to come. This is how life has evolved on earth from bacteria to human beings.&lt;br&gt;
[[File:Evolution.png|500px]]

== Implementation ==
 &lt;p style=&quot;text-align:justify&quot;&gt;
An array representing DNA is stored in a file. As genes are forms of DNA, they contain information to be transferred to forthcoming generations. Assume that information is in the form of bits (in the form of 0s and 1s). A number is picked randomly from 1 to the size of the array. A new parameter has been introduced which decides whether mutation would occur or not. If the value of this new parameter is 1 (It is picked randomly from 1 to 100), then only change is reflected down the generations, otherwise it is not. The pseudo code is as follows :
&lt;/p&gt;
Input an array containing genetic information .
Randomly generate a number (say m) from 1 to length of the array. Randomly generate other number (say p) from 1 to 100.

&lt;pre&gt; 
    if p is equal to 1 then 
        if m is 1 then
          set it to 0
        else
          set it to 1
&lt;/pre&gt;
[[#Top]]</text>
      <sha1>j51gglhy0r76g75sdmzpzqouuw19q4m</sha1>
    </revision>
    <revision>
      <id>4536</id>
      <parentid>3772</parentid>
      <timestamp>2018-10-23T13:13:17Z</timestamp>
      <contributor>
        <username>Iammak</username>
        <id>3720</id>
      </contributor>
      <comment>/* Operations and Methods to work with List */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="31646">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_3 Contributors of this page]
*Week 3 Playlist: https://www.youtube.com/playlist?list=PLc_j0TNIaWxOVx_z9jAM2UB3RqYNXaoEo
=List=
List is a flexible data structure used for storing a group of data separated by comma. The elements in a list need not be of the same data type.

'''Example:'''
       List_1 = [ 1, 2,3] or 
       List_1 = [&quot;coffee&quot;, &quot;Tea&quot;, &quot;Milk&quot;] or
       List_1 = [1,&quot;coffee&quot;, &quot;Tea&quot;, 3, &quot;5&quot;]

==List Creation==
a) A list can be created by simply putting values (separated by comma) between square
 brackets as given below,
&lt;pre&gt;List_1 = [1,&quot;coffee&quot;, &quot;Tea&quot;, 3, &quot;5&quot;] #this creates a list by name List_1 containing
 following items
&lt;/pre&gt;


Or,
(b)A List can be created from scratch and elements can be added 
&lt;pre&gt;
        List_2 = [ ]
        List_2.append(&quot;Kala&quot;)
        List_2.append(&quot;Mala&quot;)
&lt;/pre&gt;
Here we use &quot;append&quot;, which is a function in python that enable us to append or attach an element to a list .
&lt;pre&gt;Thus List_2 will now hold [&quot;Kala&quot;,&quot;Mala&quot;]&lt;/pre&gt;

[[#Top]]

==Operations and Methods to work with List==
&lt;pre&gt;
a = [25,30,50,90,12,13]
b = [100,300,500,200,250]
&lt;/pre&gt;
&lt;hr&gt;
&lt;table border=2&gt;
  &lt;tr&gt;
    &lt;th&gt;&lt;b&gt;Method/&lt;br&gt;Operator&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Function&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Syntax&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Output&lt;/b&gt;&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;len()&lt;/td&gt;
    &lt;td&gt;Find length of a list&lt;/td&gt;
    &lt;td&gt;len(a)&lt;/td&gt;
    &lt;td&gt;6&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;max()&lt;/td&gt;
    &lt;td&gt;Find maximum element from the list&lt;/td&gt;
    &lt;td&gt;max(a)&lt;/td&gt;
    &lt;td&gt;90&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;min()&lt;/td&gt;
    &lt;td&gt;Find minimum element from the list&lt;/td&gt;
    &lt;td&gt;min(a)&lt;/td&gt;
    &lt;td&gt;12&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sum()&lt;/td&gt;
    &lt;td&gt;Returns sum of all elements of the list&lt;/td&gt;
    &lt;td&gt;sum(a)&lt;/td&gt;
    &lt;td&gt;220&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;reverse()&lt;/td&gt;
    &lt;td&gt;Reverses the original list&lt;/td&gt;
    &lt;td&gt;a.reverse()&lt;/td&gt;
    &lt;td&gt;[13, 12, 90, 50, 30, 25]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sort()&lt;/td&gt;
    &lt;td&gt;Sorts the original list in ascending order&lt;/td&gt;
    &lt;td&gt;a.sort()&lt;/td&gt;
    &lt;td&gt;[12, 13, 25, 30, 50, 90]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sorted()&lt;/td&gt;
    &lt;td&gt;Returns the new sorted list &lt;/td&gt;
    &lt;td&gt;sorted(a)&lt;/td&gt;
    &lt;td&gt;[12, 13, 25, 30, 50, 90]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;insert()&lt;/td&gt;
    &lt;td&gt;Insert at a particular index in the list, and shifts remaining elements&lt;/td&gt;
    &lt;td&gt;a.insert(3,6)&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 3, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;append()&lt;/td&gt;
    &lt;td&gt;Adds elements/object to the end of the list&lt;/td&gt;
    &lt;td&gt;a.append(5)&lt;br&gt;a.append([10,20])&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 5]&lt;br&gt;[25, 30, 50, 90, 12, 13, [10, 20]]&lt;br&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;extend()&lt;/td&gt;
    &lt;td&gt;Adds object to the end of the list as elements not as object&lt;/td&gt;
    &lt;td&gt;a.extend([10,20])&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 10, 20]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;*&amp;nbsp;&amp;nbsp;Repeatation&lt;br&gt;operator&lt;/td&gt;
    &lt;td&gt;Repeat the list for n times and returns a new list&lt;/td&gt;
    &lt;td&gt;a*2&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 25, 30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;+ Concatenation&lt;br&gt;operator&lt;/td&gt;
    &lt;td&gt;Concatenates two lists, and returns a new list&lt;/td&gt;
    &lt;td&gt;a+b&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 100, 300, 500, 200, 250]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;index()&lt;/td&gt;
    &lt;td&gt;Finds index of a particular element in the list or not&lt;/td&gt;
    &lt;td&gt;a.index(25)&lt;br&gt;a.index(0)&lt;br&gt;&lt;/td&gt;
    &lt;td&gt;0&lt;br&gt;&lt;br&gt;ValueError: 0 is not in list&lt;br&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;in operator&lt;/td&gt;
    &lt;td&gt;Finds whether a particular element is in the list or not, returns boolean&lt;/td&gt;
    &lt;td&gt;25 in a&lt;/td&gt;
    &lt;td&gt;True&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;not in operator&lt;/td&gt;
    &lt;td&gt;Checks if element is not available in list, returns boolean&lt;/td&gt;
    &lt;td&gt;25 not in a&lt;/td&gt;
    &lt;td&gt;False&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;count()&lt;/td&gt;
    &lt;td&gt;Counts the number of occurence of an element in the list&lt;/td&gt;
    &lt;td&gt;a.count(25)&lt;/td&gt;
    &lt;td&gt;1&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;remove()&lt;/td&gt;
    &lt;td&gt;Removes an element from the list&lt;/td&gt;
    &lt;td&gt;a.remove(25)&lt;/td&gt;
    &lt;td&gt; [30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;pop()&lt;/td&gt;
    &lt;td&gt;Delete and return item at index 0&lt;/td&gt;
    &lt;td&gt;a.pop(0)&lt;/td&gt;
    &lt;td&gt;25 , a will be [30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;del&lt;/td&gt;
    &lt;td&gt;Deletes item at a particular index from the list&lt;/td&gt;
    &lt;td&gt;del a[0]&lt;/td&gt;
    &lt;td&gt;[30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;all()&lt;/td&gt;
&lt;td&gt;Returns True, if all items in list are True or it is an empty list&lt;/td&gt;
&lt;td&gt;all([True, True, True])
all([])
&lt;/td&gt;
&lt;td&gt;True&lt;br&gt;
True&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;any()&lt;/td&gt;
&lt;td&gt;Returns True, if any item in list is True else return False&lt;/td&gt;
&lt;td&gt;any([True, True, True])&lt;br&gt;
any([True, False, True])&lt;br&gt;
any([])&lt;/td&gt;
&lt;td&gt;True&lt;br&gt;False&lt;br&gt;False&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;

==Printing the List==
=== Print whole list ===
A list can be printed simply or using a ''for / while'' loop 

 print(List_2)     # To print the entire list
This code will print      
 ['Kala','Mala']     

===Print element at a particular index===
&lt;pre&gt;
Using index position
    List_2[0]     # prints 'Kala' ,i.e,the value at index position 0.
    List_2[1]     # prints 'Mala'.
&lt;/pre&gt;
=== Without using index position ===
&lt;pre&gt;
for item in List_2:   # here item is a variable used to access elements in list.
       print(item)
   This code snippet prints 
    Kala
    Mala
&lt;/pre&gt;
[[#Top]]

==Search for a particular element in list==
Elements in a list can be searched by one of the two ways:
=== using index() function===
&lt;pre&gt;
ages1 = [11,23,12,23,45]

#if element is available in the list, index() returns the index value on which, the element is
 present.
print(ages1.index(45))#Output: 4

#if element is not available in the list, index() returns ''ValueError''
print(ages1.index(0))#Output: ValueError:
&lt;/pre&gt;

In programming, if such error occurs, program gets terminated. It can be solved using exception handling.
 
e.g.
&lt;pre&gt;
ages1 = [11,23,12,23,45]

try:
    print(ages1.index(0))
except ValueError:
    print(&quot;Exception has occured&quot;)    
    print(&quot;Element is not found in the list&quot;)

&lt;/pre&gt;
&lt;pre&gt;
'''Output: 
Exception has occured
Element is not found in the list
'''&lt;/pre&gt;
[[#Top]]

=== using 'in' operator===
''in'' operator is used to check whether a particular element is available in the list or not.e.g.

&lt;pre&gt;
ages1 = [11,23,12,23,45]
no=11

if no in ages1:
    print(&quot;no is there in the list&quot;)
else:    
    print(&quot;no is NOT there in the list&quot;)
&lt;/pre&gt;
&lt;pre&gt;
#Output: no is there in the list
&lt;/pre&gt;


'''Number is not there in the list'''
&lt;pre&gt;
ages1 = [11,23,12,23,45]
no=15

if no in ages1:
    print(&quot;no is there in the list&quot;)
else:    
    print(&quot;no is NOT there in the list&quot;)
&lt;/pre&gt;
&lt;pre&gt;
Output: no is NOT there in the list
&lt;/pre&gt;
[[#Top]]

==Updating the List==
The lists can be updated using ''append'' or ''insert'' function.  Append adds the element to the end of the list and Insert adds the element in the specified position.
&lt;pre&gt;
   # add the element 'Sheela' to the end of the list.
   List_2.append(&quot;Sheela&quot;)    
   print (List_2) will output 
   ['Kala', 'Mala', 'Sheela']
&lt;/pre&gt;
   &lt;pre&gt;
# add the element &quot;Bala&quot; in the list at the index 1.
   List_2.insert(1,&quot;Bala&quot;)    
   print (List_2) will output 
   ['Kala', 'Bala','Mala', 'Sheela']
&lt;/pre&gt;

=== Extend the list by adding elements of other list at end using extend()===
&lt;pre&gt;
ages = [11,23,12,23,45]
ages.extend([57,58])
print(ages)
&lt;/pre&gt;

&lt;pre&gt;
#Output: [11, 23, 12, 23, 45, 57, 58]
&lt;/pre&gt;

==== Difference between ''append() and extend()'' ====
Difference between ''append()'' and ''extend()'' can be easily understood, by the following example.

&lt;pre&gt;
appendlist = [11,23,12,23,45]
appendlist.append([57,58])

extendlist= [11,23,12,23,45]
extendlist.extend([57,58])
&lt;/pre&gt;

&lt;pre&gt;
'''Output:
[11, 23, 12, 23, 45, [57, 58]]
[11, 23, 12, 23, 45, 57, 58]'''
&lt;/pre&gt;

[[#Top]]

==Basic Operations on List==
===Frequency of Occurrence===
list.count(object) will return the number of times the object occur in the list.
  '''Example'''
    ages = [11,23,12,23,45,43,22,24,23]
    ages.count(23) will return
    3
    ages.count(100) will return
    0

===Length of the List===
''len(list)'' will return the length of the list ie. the number of objects in the list.
  '''Example'''
&lt;pre&gt;
    ages = [11,23,12,23,45,43,22,24,23]
    len(ages) # Output: 9
&lt;/pre&gt;

To print the objects in the list either use ''for item in list'' or ''for index in range(len(list))''
&lt;pre&gt;
    for item in ages:       
        print (item)  
        (OR)
    for index in range(len(ages)) :
        print (ages[index])
&lt;/pre&gt;

===Sort the List===
''list.sort()'' will sort the list in ascending order
  '''Example'''
    ages = [11,23,12,23,45,43,22,24,23]
    ages.sort() 
    print (ages) 
    [11, 12, 22, 23, 23, 23, 24, 43, 45]

[[#Top]]

===Sort the List using sorted() function===
''sorted(list1)'' will sort the list and return a new list, it doesn't modify the original list
&lt;br&gt;'''Example: Sort in ascending order'''
&lt;pre&gt;
ages = [11,23,12,23,45,43,22,24,23]
newList=sorted(ages)
print(newList)

#Output: [11, 12, 22, 23, 23, 23, 24, 43, 45]
&lt;/pre&gt;

&lt;br&gt;'''Example: Sort in descending order'''
&lt;pre&gt;
ages = [11,23,12,23,45,43,22,24,23]
newList=sorted(ages,reverse=True)
print(newList)

#Output: [45, 43, 24, 23, 23, 23, 22, 12, 11]
&lt;/pre&gt;

===Reverse the List===
''list.reverse()'' will reverse the original list
  '''Example'''
    ages = [11, 12, 22, 23, 23, 23, 24, 43, 45]
    ages.reverse()
    print (ages)
    [45, 43, 24, 23, 23, 23, 22, 12, 11]

Both ''sort()'' and ''reverse()'' list operation will work on numeric and alphanumeric data list.

A special use of the ''reverse()'' function is to descend a list that is sorted in ascending order.

  '''Example'''
&lt;pre&gt;
ages = [11, 12, 22, 23, 23, 23, 24, 43, 45]
ages.sort()
print(ages)
ages.reverse()
print(ages)
&lt;/pre&gt;

[[#Top]]

===Slicing===
Used to retrieve an object or objects in a range as a list  
  '''Example'''

Use ''list[index]'' to retrieve the object at the given index
&lt;pre&gt;
In [1]: student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
In [2]: student[3]     #Object at index 3.  Remember index starts at 0
Out[2]: 'Geetha'      
&lt;/pre&gt;

Use ''list[start_index : end_index + 1]'' to retrieve objects from the start_index to end_index 
&lt;pre&gt;
In [3]: student[2:4]     # Objects from index 2 to 3 as List. Note the [ and ]
Out[3]: ['Vijay', 'Geetha']   
&lt;/pre&gt;

Use ''list[:]'' to retrieve objects from the starting of the list to the end of the list. 
The default start value will be the starting index of the list (i.e. 0) and the default end value
will be the length of the list 
&lt;pre&gt;
In [4]: student[:]        # prints the entire list
Out[4]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma', 'Janani']
&lt;/pre&gt;
&lt;pre&gt;
In [5]: student[:5]       # prints the objects from the start of the list upto object at index 4
Out[5]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran']
&lt;/pre&gt;
&lt;pre&gt;
In [6]: student[2:]       # prints the objects from index 2 upto the end of the list
Out[6]: ['Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma', 'Janani']
&lt;/pre&gt;

Negative index too is available in Python. It starts from last element of the list. i.e.
&lt;pre&gt;
In [7]:student[-1]        #prints last index of list
Out[7]: 'Janani'
&lt;/pre&gt;
&lt;pre&gt;
In [8]:student[-1:-8]     #prints empty list
Out[8]: []
&lt;/pre&gt;
&lt;pre&gt;
In [9]:student[-8:-1]     #prints -8th index to -1st index elements
Out[9]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma']
&lt;/pre&gt;

[[#Top]]

===Removing Item from list ===
----

Is used to remove a specific item from the list.

'''Example:'''
 
Use list.remove(entry/value)  Or   del list[index]    Or list.pop(index)
&lt;pre&gt;
student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
student.remove(&quot;Arun&quot;)   #This will delete item &quot;Arun&quot;
         Or    
del student[0]           # This will delete item at index 0
         Or
student.pop(0)         # This will delete and return item at index 0
print(student)    
Output: &quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
&lt;/pre&gt;

[[#Top]]

===Delete list ===
----
Used to delete complete list

'''Example'''

Use del &lt;list name&gt;
&lt;pre&gt;
student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
del student&lt;/pre&gt;

===Concatenation of two lists===
----
''+'' is the concatenation operator which is used concatenate two lists. 
&lt;pre&gt;
ages1 = [11,23,12,23,45]
ages2 = [25, 24, 43, 47]
age=ages1+ages2
print(age)
#Output: [11, 23, 12, 23, 45, 25, 24, 43, 47]
&lt;/pre&gt;

===Repeatation of a list ===
----
''*'' is the operator to repeat a particular list.
&lt;pre&gt;
ages1 = [11,23,12,23,45]
age=ages1*5 #ages1 list is repeated 5 times and stroed in ''age'' list
print(age)

#Output: [11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45]
&lt;/pre&gt;

=== all and any for List===
all() and any() are special functions to check whether all elements in iterable is ''True'' or any element is ''True''
&lt;ol&gt;
&lt;li&gt;If all elements in a list are ''True'', ''all()'' will return ''True''&lt;/li&gt;
&lt;li&gt;If iterable is ''empty'', ''all()'' will return ''True''&lt;/li&gt;
&lt;li&gt;If iterable contains at least one ''True'', ''any()'' will return ''True''&lt;/li&gt;
&lt;li&gt;If iterable is ''empty'', ''any()'' will return ''False''&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;
lsit=[True, True, True, True]
print(all(lsit))#Output: True
print(any(lsit))#Output: True

lsit1=[True, False, True, True]
print(all(lsit1))#Output: False
print(any(lsit1))#Output: True

lsit2=[False,False,False]
print(all(lsit2))#Output: False
print(any(lsit2))#Output: False

lsit3=[]
print(all(lsit3))#Output: True
print(any(lsit3))#Output: False
&lt;/pre&gt;

==Conditional Statements==
Conditionals are used to check the condition and change the flow of the program 
accordingly. They are realized in programming languages through if statement. The 
syntax is as follows :
&lt;pre&gt;
         if condition : 
            statement
&lt;/pre&gt;
    '''Note:''' Do not forget indentation (inserting space/tab) in the line after the
 if condition.
    
    In case you want to execute a set of statements when a condition is true and another

set of statement when the condition is false.
&lt;pre&gt;
         if condition : 
            statement 1
         else :
            statement 2
&lt;/pre&gt;

&lt;pre&gt;    
    Multiple if-else statements can be written as follows:
         if condition_1 : 
            statement 1
         elif condition_2 : # 'elif' is short for 'else if'
            statement 2
         elif condition_3 :
            statement 3
        .
        .
         else :
            final statement
&lt;/pre&gt;

[[#Top]]

=Loops and Conditionals : Fizzbuzz=
====Loops====
Loops are used to execute a set of repetitive statements. They are realised
through 'while' and 'for' loops in programming languages. The syntax of 'for' loop is 
as follows :
&lt;pre&gt;
for LOOPVARIABLE in SEQUENCE: 
            STATEMENTS&lt;/pre&gt;

    '''e.g.''' to print all the data from a list we can write:
&lt;pre&gt;
for item in list_name:
      print(item)&lt;/pre&gt;
    OR
&lt;pre&gt;
for index in range(len(list_name)):
      print(list_name[index])
 &lt;/pre&gt;   
    The syntax for while loop is as follows :
&lt;pre&gt;    
while BOOLEANEXPRESSION: 
     STATEMENTS
     INCREMENT/DECREMENT
&lt;/pre&gt;    
    '''e.g.''' if we want to print all numbers from 1 to 10
&lt;pre&gt;
i=1
while i&lt;=10 :
    print(i,&quot; &quot;)
    i=i+1
    &lt;/pre&gt;
 
'while' loop has indefinite iteration (run-time unknown). So, there must be loop,  break statement in it.
 Whereas 'for' loop is definite in nature (i.e. known or predictable span).&lt;br&gt;

&lt;b&gt;NOTE: Python doesn't have anything like do-while loop.&lt;/b&gt;

[[#Top]]

==Implementation==
Here, we try to demonstrate the concept of loops and conditionals through a game called Fizzbuzz. The rules are as follows :&lt;br/&gt;
[[File:fizzBuzz.gif]]

• if input number is a multiple of ’3’ print ”Fizz”
&lt;br/&gt;
• if input number is a multiple of ’5’ print ”Buzz”
&lt;br/&gt;
• if input number is a multiple of both '3' and ’5’ print ”FizzBuzz”
&lt;br/&gt;
The pseudo code is as follows :
&lt;pre&gt;
   If input no % 3 == 0 and  input no % 5 == 0 : 
       print ”Fizzbuzz”
   else if input no % 3 == 0 : 
       print ”Fizz”
   else if input no % 5 == 0 : 
       print ”Buzz”
   else :
       print the input no
&lt;/pre&gt;
 &lt;p style=&quot;text-align:justify&quot;&gt;
The order of statements execution matters to get the desired output. The highest priority condition should be first followed by other. In fizzbuzz programming, first checking should be done for both divisibility of 3 and 5. If condition not satisfied only then it should check individually for 3 or 5. So carefully choosing the order is crucial for better programming.
Note: There is some effect of present condition statements chosen on next conditions statements. That is why in first attempt fizzbuzz programming got struck.&lt;/p&gt;

Example: 
&lt;pre&gt;
#Code to achieve the above requirement in python3.
i = int(input(&quot;Enter the number&quot;)) 
if i%3 == 0 and i%5 == 0: print(i,&quot;FizzBuzz&quot;)  
elif i%5 == 0: print(i,&quot;Buzz&quot;)
elif i%3 == 0: print(i,&quot;Fizz&quot;)
else: print(i)
&lt;/pre&gt;
Lets put the same into a loop for a range given by the user.
&lt;pre&gt;
def fizzbuzzgame(start,stop):
    for i in range(start,stop+1):
        if i%3 == 0 and i%5 == 0:
            print(i,&quot;FizzBuzz&quot;)
        elif i%5 == 0:
            print(i,&quot;Buzz&quot;)
        elif i%3 == 0:
            print(i,&quot;Fizz&quot;)
        else: print(i)

fizzbuzzgame(50,100)
&lt;/pre&gt;
&lt;pre&gt;
#Output:
1235
Buzz
======================================
555
Fizzbuzz
======================================
1235
Buzz
======================================
999
Fizz
&lt;/pre&gt;

[[#Top]]

=== Fizz Buzz game in Interactive mode with Score ===
'''By Ms. Ami Tusharkant Choksi'''
&lt;pre&gt;
def fizzbuzzgame(i):
        if i%3 == 0 and i%5 == 0:
            print(i,&quot;FizzBuzz&quot;)
            return(&quot;fzbz&quot;)
        elif i%5 == 0:
            print(i,&quot;Buzz&quot;)
            return(&quot;bz&quot;)
        elif i%3 == 0:
            print(i,&quot;Fizz&quot;)
            return(&quot;fz&quot;)
        else:
            print(i)
            return(&quot;no&quot;)

ch = 'y'
fizzbuzz=0
fizz=0
buzz=0
nothing=0
print(&quot;&quot;&quot;

 /$$$$$$$$/$$                  /$$$$$$$                            
| $$_____|__/                 | $$__  $$                           
| $$      /$$/$$$$$$$$/$$$$$$$| $$  \ $$/$$   /$$/$$$$$$$$/$$$$$$$$
| $$$$$  | $|____ /$$|____ /$$| $$$$$$$| $$  | $|____ /$$|____ /$$/
| $$__/  | $$  /$$$$/   /$$$$/| $$__  $| $$  | $$  /$$$$/   /$$$$/ 
| $$     | $$ /$$__/   /$$__/ | $$  \ $| $$  | $$ /$$__/   /$$__/  
| $$     | $$/$$$$$$$$/$$$$$$$| $$$$$$$|  $$$$$$//$$$$$$$$/$$$$$$$$
|__/     |__|________|________|_______/ \______/|________|________/
                                                                  
&quot;&quot;&quot;)   
print('''

  /$$$$$$                                
 /$$__  $$                               
| $$  \__/ /$$$$$$ /$$$$$$/$$$$  /$$$$$$ 
| $$ /$$$$|____  $| $$_  $$_  $$/$$__  $$
| $$|_  $$ /$$$$$$| $$ \ $$ \ $| $$$$$$$$
| $$  \ $$/$$__  $| $$ | $$ | $| $$_____/
|  $$$$$$|  $$$$$$| $$ | $$ | $|  $$$$$$$
 \______/ \_______|__/ |__/ |__/\_______/
                                     
''')

while(ch == 'y'):
    n=int(input(&quot;Enter a Number : &quot;))
    winLoose=fizzbuzzgame(n)
    if(winLoose == &quot;fz&quot;):
        fizz+=1
    elif(winLoose == &quot;bz&quot;):
        buzz+=1
    elif(winLoose == &quot;fzbz&quot;):
        fizzbuzz+=1
    ch=input(&quot;Do you want to continue playing the game : (y/n)&quot;)
    if(ch=='n'):
        print('Congratulations, your score is\n FizzBuzz:%d\nFizz:%d\nBuzz:%d' %
(fizzbuzz,fizz,buzz))
    
'''Sample Output:

 /$$$$$$$$/$$                  /$$$$$$$                            
| $$_____|__/                 | $$__  $$                           
| $$      /$$/$$$$$$$$/$$$$$$$| $$  \ $$/$$   /$$/$$$$$$$$/$$$$$$$$
| $$$$$  | $|____ /$$|____ /$$| $$$$$$$| $$  | $|____ /$$|____ /$$/
| $$__/  | $$  /$$$$/   /$$$$/| $$__  $| $$  | $$  /$$$$/   /$$$$/ 
| $$     | $$ /$$__/   /$$__/ | $$  \ $| $$  | $$ /$$__/   /$$__/  
| $$     | $$/$$$$$$$$/$$$$$$$| $$$$$$$|  $$$$$$//$$$$$$$$/$$$$$$$$
|__/     |__|________|________|_______/ \______/|________|________/
                                                                                                                                   

  /$$$$$$                                
 /$$__  $$                               
| $$  \__/ /$$$$$$ /$$$$$$/$$$$  /$$$$$$ 
| $$ /$$$$|____  $| $$_  $$_  $$/$$__  $$
| $$|_  $$ /$$$$$$| $$ \ $$ \ $| $$$$$$$$
| $$  \ $$/$$__  $| $$ | $$ | $| $$_____/
|  $$$$$$|  $$$$$$| $$ | $$ | $|  $$$$$$$
 \______/ \_______|__/ |__/ |__/\_______/
                                         

Enter a Number : 666
666 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 777
777 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 555
555 FizzBuzz
Do you want to continue playing the game : (y/n)y
Enter a Number : 1
1
Do you want to continue playing the game : (y/n)y
Enter a Number : 789
789 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 25
25 Buzz
Do you want to continue playing the game : (y/n)n
Congratulations, your score is

FizzBuzz:1
Fizz:3
Buzz:1

&lt;/pre&gt;

[[#Top]]

=Crowd Computing: Just Estimate=

Crowd computing is conceptualised in various ways as being related to crowdsourcing, human computation, social computing, cloud computing and mobile computing. 

Crowd computing has been described in various ways viz. 
&lt;ul&gt;&lt;li&gt;distribution of human intelligence tasks to mobile devices&lt;/li&gt;
&lt;li&gt;cloud computing with humans&lt;/li&gt;
&lt;li&gt;human problem solving with large numbers of people using computers&lt;/li&gt;&lt;/ul&gt; 

Broadly, crowed computing is a set of human interaction tools for idea exchange and non-hierarchical decision making. 

Four common characteristics are used to identify the term: 
&lt;ol&gt;
&lt;li&gt;participation by a crowd of humans&lt;/li&gt;
&lt;li&gt;interaction with computing technology&lt;/li&gt;
&lt;li&gt;activity that is predetermined by the initiator or application itself&lt;/li&gt;
&lt;li&gt;the execution of tasks by the crowd utilising innate human capabilities.&lt;/li&gt;
&lt;/ol&gt;

==Wisdom of Crowds==
 &lt;p style=&quot;text-align:justify&quot;&gt;
The concept of ’Wisdom of Crowds’ was proposed by ''Francis Galton''. A weight-judging competition was carried on at the annual show of the West of England Fat Stock and Poultry Exhibition recently held at Plymouth, A fat ox having been selected, competitors bought stamped and numbered cards, each, on which to inscribe their respective names, addresses, and estimates of what the ox would weigh after it had been slaughtered. Those who guessed most successfully received prizes. About 8oo tickets were issued to the par- ticipants. The middlemost estimate of all the estimates recorded was 1207 lbs and the actual weight of the ox was 1198 lbs.&lt;/p&gt;

==Our Experiment==
 &lt;p style=&quot;text-align:justify&quot;&gt;
The crowd had to guess the number of candies/gems in a jar. Around 75 people participated in the experiment. The actual number of gems in the jar were 375. The median of all estimates came out to be 300 and the mean of all the estimates came out to be around 396. Median underestimated and mean overestimated the actual value. So according to recent studies, Trimmed mean must be used as an aggregate measure to estimate where Wisdom of Crowds is involved.
&lt;/p&gt;
[[File:Gemsjar.jpg|center|200px|caption]]

===Trimmed Mean===
 &lt;p style=&quot;text-align:justify&quot;&gt;
In these kinds of experiments, 10% trimmed mean is usually followed. For calculating 10% trimmed mean, remove 10% smallest and 10% largest values from the sample. Calculate the mean of the sample obtained. In the above experiment, the trimmed mean came out to be around 351 which is very close to the actual value.&lt;/p&gt;

==Implementation==
Here, we try to demonstrate the concept of trimmed mean through crowd computing.
&lt;ol&gt;
&lt;li&gt; Input a list of estimates done by the crowd .&lt;/li&gt;
&lt;li&gt; Sort the list.&lt;/li&gt;
&lt;li&gt; Remove the 10% smallest values.&lt;/li&gt;
&lt;li&gt; Remove the 10% largest values.
&lt;li&gt; Calculate the mean of the new list obtained .&lt;/li&gt;&lt;/ol&gt;&lt;hr&gt;
[[#Top]]

==Data of Experiment==       
    Estimates =[1000,1010,1786,2000,1500,1500,100,120,150,150,150,170,175,180,197,200,200,200,200,200,200,220,220,220,220,234,250,250,250,250,250,250,250,250,250,263,270,275,275,286,300,
                300,300,300,300,300,300,300,320,350,350,350,400, 400,400,400,400,450,467,500,500,500,500,500,500,500,550,550,600,600,600,650,700,700,720]

    '''CODE:'''
&lt;pre&gt;
Estimates = [1000,1010,1786,2000,1500,1500,100,120,150,150,150,170,175,180,197,200,200,200,200,200,200,220,220,220,220,234,250,250,250,250,250,250,250,250,250,263,270,275,275,286,300,                300,300,300,300,300,300,300,320,350,350,350,400,400,400,400,400,450,467,500,500,500,500,500,500,500,550,550,600,600,600,650,700,700,720]
Estimates.sort()
offset = int(0.10*len(Estimates))
for i in range(offset):
       del Estimates[0]
       del Estimates[-1]
Sum = 0    
for i in range(len(Estimates)):
       Sum += Estimates[i]
Mean_Value = Sum/len(Estimates)
print(&quot;Mean : &quot;, int(Mean_Value))
#Output:
Mean :  351
&lt;/pre&gt;
&lt;hr&gt;
==Trimmed Mean for the above example== 
&lt;h3&gt;Using scipy library&lt;/h3&gt;
&lt;pre&gt;
#import scipy to use the method of trim_mean
from scipy import stats
trimMean = stats.trim_mean(Estimates, 0.1) # Trim 10% at both ends
print(&quot;Trimmed Mean : &quot;,trimMean)
#Output:
Trimmed Mean :  335.1020408163265
&lt;/pre&gt;

&lt;h3&gt;Without using scipy library&lt;/h3&gt;
&lt;pre&gt;
#Trimmed mean with 10%
p=10/100
#sorted data
data=[2, 4, 6, 7, 11, 21, 81, 90, 105, 121]
n = len(data)
#Remove elements from both end
rem=int(n*p)
newData = data[rem:-rem]
mean = 0
for i in newData:
    mean += i
mean = int(mean/len(newData))
print(&quot;Trimmed mean : &quot;,mean)
#Output: Trimmed mean :  40
&lt;/pre&gt;
[[#Top]]

=Jumbled_Words Permutations: Jumbled Words=
==What are Permutations ?==
A permutation also called ordering of selected number of elements from a list denoted by nPr here we are choosing all elements of a list and so n=r&lt;br&gt;
nPr=n!/(n-r)!&lt;br&gt; as n=r
nPn=n!&lt;br&gt; which gives all possible arrangement of elements present in a list.

 For example, permutations of list [1,2,3] are [1,2,3], [1,3,2], [2,1,3], [2,3,1], 
[3,1,2], and [3,2,1]. 
The number of permutations of a list of elements nPn is given by n!. For example, there are 2! = 2 x 1 = 2 permutations of [1,2], namely [1,2] and [2,1], and 3! = 3 x 2 x 1 = 6 permutations of [1,2,3], as mentioned above.&lt;br/&gt;
[[File:Permutations.jpg]]

==Implementation==
 &lt;p style=&quot;text-align:justify&quot;&gt;
Here, we try to demonstrate the concept of permutations through jumbled words. It is a two player game in which one person presents the other person a different permutation of the word in his mind. The other person has to guess the right word. If he guesses, the he wins otherwise he loses.&lt;/p&gt;
 Input an list of words.
 Randomly pick a word from the list of words .
 Shuffle this word and present it to the other player.
 if word guesses by the player is same as the one picked from list of w
     player wins
 else
     player loses

ALTERNATE CODE TO GENERATE THIS GAME:
&lt;pre&gt;
import random
p1=input(&quot;enter player 1 name:&quot;)
p2=input(&quot;enter player 2 name:&quot;)
l=[&quot;rainbow&quot;,&quot;computer&quot;,&quot;robot&quot;,&quot;butter&quot;,&quot;vegetable&quot;,&quot;science&quot;,&quot;correct&quot;]
c1=c2=a1=a2=f1=f2=0
k=1
i=3
def play():
    n=random.choice(l)        ##n=chooses a word from list l
    l1=[]
    for j in n:
       l1.append(j)      ##creates a list for word in n
    for t in range(len(l1)):
       p=random.choice(l1)     ##this randomly displays letters in the list
       print(p)
       l1.remove(p)          ##to avoid the repetition of a letter
    s=input(&quot;enter the word:&quot;)
    if(s==n):
        print(&quot;correct&quot;)
        return 1
    else:
        print(&quot;not correct&quot;)
        print(&quot;answer is&quot;,n)
        return 0
def stat():
     print(&quot;player 1:&quot;)
     print(&quot;score:&quot;,c1)
     print(&quot;answered:&quot;,a1)
     print(&quot;failed:&quot;,f1)
     print(&quot;.............&quot;)
     print(&quot;player 2:&quot;)
     print(&quot;score:&quot;,c2)
     print(&quot;answered:&quot;,a2)
     print(&quot;failed&quot;,f2)
     if(c1&gt;c2):
         print(p1,&quot; won over &quot;,p2)
     elif(c1==c2):
         print(&quot;draw game&quot;)
     else:
         print(p2,&quot; won over &quot;,p1) 
while(i!=4):
      if(i==3):
         if(k==1):
             print(&quot;player 1 turn&quot;)
             print(&quot;your jumbled word is:&quot;)
             k=k+1
             m=play()
             if(m==1):      ##if guessed answer is correct,then score and no.of answered count will be increased
                c1+=1
                a1+=1
             else:
                f1+=1       ##else count of no.of failed to answered will be incremented
         else:
             print(&quot;player 2 turn&quot;)
             print(&quot;your jumbled word is:&quot;)
             k=k-1
             m=play()
             if(m==1):
                c2=c2+1
                a2=a2+1
             else:
                f2=f2+1
       if(i==2):
             print(&quot;present status&quot;)
             stat()
       i=int(input(&quot;enter your choice  1.stop 2.status 3.continue&quot;))
       if(i==1):
             stat()
             i=i+3
&lt;/pre&gt;
&lt;hr&gt;

[[#Top]]

=== JumbledWord Simple Logic, In Short ===
[[File:jumbledWord.gif]]
---
&lt;hr&gt;
'''Logic to create a Jumbled Word'''
&lt;hr&gt;
&lt;pre&gt;
#Get Jumbled Word and print it Horizontally
import random

def getJumbledWord(b):
    jumble=''
    l1 = [ b[i] for i in range(0, len(b)) ]
    for t in range(len(l1)):
       p=random.choice(l1)  #this randomly gets letters from the list      
       jumble=jumble+p       
       l1.remove(p)
    return jumble

b=input(&quot;Enter a word to make it jumbled : &quot;)
print(&quot;Jumbled Word : &quot;, getJumbledWord(b))
&lt;/pre&gt;
&lt;pre&gt;
Output:
Enter a word to make it jumbled : live and let live others
Jumbled Word :  vel  toldeisrte aihv len
==========================================
Enter a word to make it jumbled : junkfood
Jumbled Word :  nfukdooj
&lt;/pre&gt;
&lt;hr&gt;
'''Another Logic to create a Jumbled Word'''
&lt;hr&gt;
&lt;pre&gt;
import random
b=input(&quot;Enter a word to make it jumbled : &quot;)

def getJumbledWord1(b):
    l1 = [ b[i] for i in range(0, len(b)) ]
    random.shuffle(l1)
    str1 = ''.join(l1)
    return str1

print(&quot;Jumbled Word : &quot;, getJumbledWord1(b))
&lt;/pre&gt;

====Sample Output:====
&lt;pre&gt;
---- Output1 
Enter a word to make it jumbled : butter
Jumbled Word :  tbture

---- Output2 
Enter a word to make it jumbled : petriotism
Jumbled Word :  pittrosime
&lt;/pre&gt;

=Theory of Evolution=

== What is Evolution ? ==
Evolution is the change in heritable characteristics over successive generations. The theory of evolution explains that DNA, which acts as a carrier of genetic information from one generation to other, tends to change or mutate occasionally. These changes are reflected in next generations to come. This is how life has evolved on earth from bacteria to human beings.&lt;br&gt;
[[File:Evolution.png|500px]]

== Implementation ==
 &lt;p style=&quot;text-align:justify&quot;&gt;
An array representing DNA is stored in a file. As genes are forms of DNA, they contain information to be transferred to forthcoming generations. Assume that information is in the form of bits (in the form of 0s and 1s). A number is picked randomly from 1 to the size of the array. A new parameter has been introduced which decides whether mutation would occur or not. If the value of this new parameter is 1 (It is picked randomly from 1 to 100), then only change is reflected down the generations, otherwise it is not. The pseudo code is as follows :
&lt;/p&gt;
Input an array containing genetic information .
Randomly generate a number (say m) from 1 to length of the array. Randomly generate other number (say p) from 1 to 100.

&lt;pre&gt; 
    if p is equal to 1 then 
        if m is 1 then
          set it to 0
        else
          set it to 1
&lt;/pre&gt;
[[#Top]]</text>
      <sha1>fwr2izc56oxsr1dkntaskjta5j90c1u</sha1>
    </revision>
    <revision>
      <id>4539</id>
      <parentid>4536</parentid>
      <timestamp>2018-10-24T07:46:08Z</timestamp>
      <contributor>
        <username>PidWid</username>
        <id>350</id>
      </contributor>
      <minor/>
      <comment>/* Operations and Methods to work with List */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="31646">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_3 Contributors of this page]
*Week 3 Playlist: https://www.youtube.com/playlist?list=PLc_j0TNIaWxOVx_z9jAM2UB3RqYNXaoEo
=List=
List is a flexible data structure used for storing a group of data separated by comma. The elements in a list need not be of the same data type.

'''Example:'''
       List_1 = [ 1, 2,3] or 
       List_1 = [&quot;coffee&quot;, &quot;Tea&quot;, &quot;Milk&quot;] or
       List_1 = [1,&quot;coffee&quot;, &quot;Tea&quot;, 3, &quot;5&quot;]

==List Creation==
a) A list can be created by simply putting values (separated by comma) between square
 brackets as given below,
&lt;pre&gt;List_1 = [1,&quot;coffee&quot;, &quot;Tea&quot;, 3, &quot;5&quot;] #this creates a list by name List_1 containing
 following items
&lt;/pre&gt;


Or,
(b)A List can be created from scratch and elements can be added 
&lt;pre&gt;
        List_2 = [ ]
        List_2.append(&quot;Kala&quot;)
        List_2.append(&quot;Mala&quot;)
&lt;/pre&gt;
Here we use &quot;append&quot;, which is a function in python that enable us to append or attach an element to a list .
&lt;pre&gt;Thus List_2 will now hold [&quot;Kala&quot;,&quot;Mala&quot;]&lt;/pre&gt;

[[#Top]]

==Operations and Methods to work with List==
&lt;pre&gt;
a = [25,30,50,90,12,13]
b = [100,300,500,200,250]
&lt;/pre&gt;
&lt;hr&gt;
&lt;table border=2&gt;
  &lt;tr&gt;
    &lt;th&gt;&lt;b&gt;Method/&lt;br&gt;Operator&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Function&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Syntax&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Output&lt;/b&gt;&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;len()&lt;/td&gt;
    &lt;td&gt;Find length of a list&lt;/td&gt;
    &lt;td&gt;len(a)&lt;/td&gt;
    &lt;td&gt;6&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;max()&lt;/td&gt;
    &lt;td&gt;Find maximum element from the list&lt;/td&gt;
    &lt;td&gt;max(a)&lt;/td&gt;
    &lt;td&gt;90&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;min()&lt;/td&gt;
    &lt;td&gt;Find minimum element from the list&lt;/td&gt;
    &lt;td&gt;min(a)&lt;/td&gt;
    &lt;td&gt;12&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sum()&lt;/td&gt;
    &lt;td&gt;Returns sum of all elements of the list&lt;/td&gt;
    &lt;td&gt;sum(a)&lt;/td&gt;
    &lt;td&gt;220&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;reverse()&lt;/td&gt;
    &lt;td&gt;Reverses the original list&lt;/td&gt;
    &lt;td&gt;a.reverse()&lt;/td&gt;
    &lt;td&gt;[13, 12, 90, 50, 30, 25]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sort()&lt;/td&gt;
    &lt;td&gt;Sorts the original list in ascending order&lt;/td&gt;
    &lt;td&gt;a.sort()&lt;/td&gt;
    &lt;td&gt;[12, 13, 25, 30, 50, 90]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sorted()&lt;/td&gt;
    &lt;td&gt;Returns the new sorted list &lt;/td&gt;
    &lt;td&gt;sorted(a)&lt;/td&gt;
    &lt;td&gt;[12, 13, 25, 30, 50, 90]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;insert()&lt;/td&gt;
    &lt;td&gt;Insert at a particular index in the list, and shifts remaining elements&lt;/td&gt;
    &lt;td&gt;a.insert(3,6)&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 6, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;append()&lt;/td&gt;
    &lt;td&gt;Adds elements/object to the end of the list&lt;/td&gt;
    &lt;td&gt;a.append(5)&lt;br&gt;a.append([10,20])&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 5]&lt;br&gt;[25, 30, 50, 90, 12, 13, [10, 20]]&lt;br&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;extend()&lt;/td&gt;
    &lt;td&gt;Adds object to the end of the list as elements not as object&lt;/td&gt;
    &lt;td&gt;a.extend([10,20])&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 10, 20]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;*&amp;nbsp;&amp;nbsp;Repeatation&lt;br&gt;operator&lt;/td&gt;
    &lt;td&gt;Repeat the list for n times and returns a new list&lt;/td&gt;
    &lt;td&gt;a*2&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 25, 30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;+ Concatenation&lt;br&gt;operator&lt;/td&gt;
    &lt;td&gt;Concatenates two lists, and returns a new list&lt;/td&gt;
    &lt;td&gt;a+b&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 100, 300, 500, 200, 250]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;index()&lt;/td&gt;
    &lt;td&gt;Finds index of a particular element in the list or not&lt;/td&gt;
    &lt;td&gt;a.index(25)&lt;br&gt;a.index(0)&lt;br&gt;&lt;/td&gt;
    &lt;td&gt;0&lt;br&gt;&lt;br&gt;ValueError: 0 is not in list&lt;br&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;in operator&lt;/td&gt;
    &lt;td&gt;Finds whether a particular element is in the list or not, returns boolean&lt;/td&gt;
    &lt;td&gt;25 in a&lt;/td&gt;
    &lt;td&gt;True&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;not in operator&lt;/td&gt;
    &lt;td&gt;Checks if element is not available in list, returns boolean&lt;/td&gt;
    &lt;td&gt;25 not in a&lt;/td&gt;
    &lt;td&gt;False&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;count()&lt;/td&gt;
    &lt;td&gt;Counts the number of occurence of an element in the list&lt;/td&gt;
    &lt;td&gt;a.count(25)&lt;/td&gt;
    &lt;td&gt;1&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;remove()&lt;/td&gt;
    &lt;td&gt;Removes an element from the list&lt;/td&gt;
    &lt;td&gt;a.remove(25)&lt;/td&gt;
    &lt;td&gt; [30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;pop()&lt;/td&gt;
    &lt;td&gt;Delete and return item at index 0&lt;/td&gt;
    &lt;td&gt;a.pop(0)&lt;/td&gt;
    &lt;td&gt;25 , a will be [30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;del&lt;/td&gt;
    &lt;td&gt;Deletes item at a particular index from the list&lt;/td&gt;
    &lt;td&gt;del a[0]&lt;/td&gt;
    &lt;td&gt;[30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;all()&lt;/td&gt;
&lt;td&gt;Returns True, if all items in list are True or it is an empty list&lt;/td&gt;
&lt;td&gt;all([True, True, True])
all([])
&lt;/td&gt;
&lt;td&gt;True&lt;br&gt;
True&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;any()&lt;/td&gt;
&lt;td&gt;Returns True, if any item in list is True else return False&lt;/td&gt;
&lt;td&gt;any([True, True, True])&lt;br&gt;
any([True, False, True])&lt;br&gt;
any([])&lt;/td&gt;
&lt;td&gt;True&lt;br&gt;False&lt;br&gt;False&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;

==Printing the List==
=== Print whole list ===
A list can be printed simply or using a ''for / while'' loop 

 print(List_2)     # To print the entire list
This code will print      
 ['Kala','Mala']     

===Print element at a particular index===
&lt;pre&gt;
Using index position
    List_2[0]     # prints 'Kala' ,i.e,the value at index position 0.
    List_2[1]     # prints 'Mala'.
&lt;/pre&gt;
=== Without using index position ===
&lt;pre&gt;
for item in List_2:   # here item is a variable used to access elements in list.
       print(item)
   This code snippet prints 
    Kala
    Mala
&lt;/pre&gt;
[[#Top]]

==Search for a particular element in list==
Elements in a list can be searched by one of the two ways:
=== using index() function===
&lt;pre&gt;
ages1 = [11,23,12,23,45]

#if element is available in the list, index() returns the index value on which, the element is
 present.
print(ages1.index(45))#Output: 4

#if element is not available in the list, index() returns ''ValueError''
print(ages1.index(0))#Output: ValueError:
&lt;/pre&gt;

In programming, if such error occurs, program gets terminated. It can be solved using exception handling.
 
e.g.
&lt;pre&gt;
ages1 = [11,23,12,23,45]

try:
    print(ages1.index(0))
except ValueError:
    print(&quot;Exception has occured&quot;)    
    print(&quot;Element is not found in the list&quot;)

&lt;/pre&gt;
&lt;pre&gt;
'''Output: 
Exception has occured
Element is not found in the list
'''&lt;/pre&gt;
[[#Top]]

=== using 'in' operator===
''in'' operator is used to check whether a particular element is available in the list or not.e.g.

&lt;pre&gt;
ages1 = [11,23,12,23,45]
no=11

if no in ages1:
    print(&quot;no is there in the list&quot;)
else:    
    print(&quot;no is NOT there in the list&quot;)
&lt;/pre&gt;
&lt;pre&gt;
#Output: no is there in the list
&lt;/pre&gt;


'''Number is not there in the list'''
&lt;pre&gt;
ages1 = [11,23,12,23,45]
no=15

if no in ages1:
    print(&quot;no is there in the list&quot;)
else:    
    print(&quot;no is NOT there in the list&quot;)
&lt;/pre&gt;
&lt;pre&gt;
Output: no is NOT there in the list
&lt;/pre&gt;
[[#Top]]

==Updating the List==
The lists can be updated using ''append'' or ''insert'' function.  Append adds the element to the end of the list and Insert adds the element in the specified position.
&lt;pre&gt;
   # add the element 'Sheela' to the end of the list.
   List_2.append(&quot;Sheela&quot;)    
   print (List_2) will output 
   ['Kala', 'Mala', 'Sheela']
&lt;/pre&gt;
   &lt;pre&gt;
# add the element &quot;Bala&quot; in the list at the index 1.
   List_2.insert(1,&quot;Bala&quot;)    
   print (List_2) will output 
   ['Kala', 'Bala','Mala', 'Sheela']
&lt;/pre&gt;

=== Extend the list by adding elements of other list at end using extend()===
&lt;pre&gt;
ages = [11,23,12,23,45]
ages.extend([57,58])
print(ages)
&lt;/pre&gt;

&lt;pre&gt;
#Output: [11, 23, 12, 23, 45, 57, 58]
&lt;/pre&gt;

==== Difference between ''append() and extend()'' ====
Difference between ''append()'' and ''extend()'' can be easily understood, by the following example.

&lt;pre&gt;
appendlist = [11,23,12,23,45]
appendlist.append([57,58])

extendlist= [11,23,12,23,45]
extendlist.extend([57,58])
&lt;/pre&gt;

&lt;pre&gt;
'''Output:
[11, 23, 12, 23, 45, [57, 58]]
[11, 23, 12, 23, 45, 57, 58]'''
&lt;/pre&gt;

[[#Top]]

==Basic Operations on List==
===Frequency of Occurrence===
list.count(object) will return the number of times the object occur in the list.
  '''Example'''
    ages = [11,23,12,23,45,43,22,24,23]
    ages.count(23) will return
    3
    ages.count(100) will return
    0

===Length of the List===
''len(list)'' will return the length of the list ie. the number of objects in the list.
  '''Example'''
&lt;pre&gt;
    ages = [11,23,12,23,45,43,22,24,23]
    len(ages) # Output: 9
&lt;/pre&gt;

To print the objects in the list either use ''for item in list'' or ''for index in range(len(list))''
&lt;pre&gt;
    for item in ages:       
        print (item)  
        (OR)
    for index in range(len(ages)) :
        print (ages[index])
&lt;/pre&gt;

===Sort the List===
''list.sort()'' will sort the list in ascending order
  '''Example'''
    ages = [11,23,12,23,45,43,22,24,23]
    ages.sort() 
    print (ages) 
    [11, 12, 22, 23, 23, 23, 24, 43, 45]

[[#Top]]

===Sort the List using sorted() function===
''sorted(list1)'' will sort the list and return a new list, it doesn't modify the original list
&lt;br&gt;'''Example: Sort in ascending order'''
&lt;pre&gt;
ages = [11,23,12,23,45,43,22,24,23]
newList=sorted(ages)
print(newList)

#Output: [11, 12, 22, 23, 23, 23, 24, 43, 45]
&lt;/pre&gt;

&lt;br&gt;'''Example: Sort in descending order'''
&lt;pre&gt;
ages = [11,23,12,23,45,43,22,24,23]
newList=sorted(ages,reverse=True)
print(newList)

#Output: [45, 43, 24, 23, 23, 23, 22, 12, 11]
&lt;/pre&gt;

===Reverse the List===
''list.reverse()'' will reverse the original list
  '''Example'''
    ages = [11, 12, 22, 23, 23, 23, 24, 43, 45]
    ages.reverse()
    print (ages)
    [45, 43, 24, 23, 23, 23, 22, 12, 11]

Both ''sort()'' and ''reverse()'' list operation will work on numeric and alphanumeric data list.

A special use of the ''reverse()'' function is to descend a list that is sorted in ascending order.

  '''Example'''
&lt;pre&gt;
ages = [11, 12, 22, 23, 23, 23, 24, 43, 45]
ages.sort()
print(ages)
ages.reverse()
print(ages)
&lt;/pre&gt;

[[#Top]]

===Slicing===
Used to retrieve an object or objects in a range as a list  
  '''Example'''

Use ''list[index]'' to retrieve the object at the given index
&lt;pre&gt;
In [1]: student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
In [2]: student[3]     #Object at index 3.  Remember index starts at 0
Out[2]: 'Geetha'      
&lt;/pre&gt;

Use ''list[start_index : end_index + 1]'' to retrieve objects from the start_index to end_index 
&lt;pre&gt;
In [3]: student[2:4]     # Objects from index 2 to 3 as List. Note the [ and ]
Out[3]: ['Vijay', 'Geetha']   
&lt;/pre&gt;

Use ''list[:]'' to retrieve objects from the starting of the list to the end of the list. 
The default start value will be the starting index of the list (i.e. 0) and the default end value
will be the length of the list 
&lt;pre&gt;
In [4]: student[:]        # prints the entire list
Out[4]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma', 'Janani']
&lt;/pre&gt;
&lt;pre&gt;
In [5]: student[:5]       # prints the objects from the start of the list upto object at index 4
Out[5]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran']
&lt;/pre&gt;
&lt;pre&gt;
In [6]: student[2:]       # prints the objects from index 2 upto the end of the list
Out[6]: ['Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma', 'Janani']
&lt;/pre&gt;

Negative index too is available in Python. It starts from last element of the list. i.e.
&lt;pre&gt;
In [7]:student[-1]        #prints last index of list
Out[7]: 'Janani'
&lt;/pre&gt;
&lt;pre&gt;
In [8]:student[-1:-8]     #prints empty list
Out[8]: []
&lt;/pre&gt;
&lt;pre&gt;
In [9]:student[-8:-1]     #prints -8th index to -1st index elements
Out[9]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma']
&lt;/pre&gt;

[[#Top]]

===Removing Item from list ===
----

Is used to remove a specific item from the list.

'''Example:'''
 
Use list.remove(entry/value)  Or   del list[index]    Or list.pop(index)
&lt;pre&gt;
student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
student.remove(&quot;Arun&quot;)   #This will delete item &quot;Arun&quot;
         Or    
del student[0]           # This will delete item at index 0
         Or
student.pop(0)         # This will delete and return item at index 0
print(student)    
Output: &quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
&lt;/pre&gt;

[[#Top]]

===Delete list ===
----
Used to delete complete list

'''Example'''

Use del &lt;list name&gt;
&lt;pre&gt;
student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
del student&lt;/pre&gt;

===Concatenation of two lists===
----
''+'' is the concatenation operator which is used concatenate two lists. 
&lt;pre&gt;
ages1 = [11,23,12,23,45]
ages2 = [25, 24, 43, 47]
age=ages1+ages2
print(age)
#Output: [11, 23, 12, 23, 45, 25, 24, 43, 47]
&lt;/pre&gt;

===Repeatation of a list ===
----
''*'' is the operator to repeat a particular list.
&lt;pre&gt;
ages1 = [11,23,12,23,45]
age=ages1*5 #ages1 list is repeated 5 times and stroed in ''age'' list
print(age)

#Output: [11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45]
&lt;/pre&gt;

=== all and any for List===
all() and any() are special functions to check whether all elements in iterable is ''True'' or any element is ''True''
&lt;ol&gt;
&lt;li&gt;If all elements in a list are ''True'', ''all()'' will return ''True''&lt;/li&gt;
&lt;li&gt;If iterable is ''empty'', ''all()'' will return ''True''&lt;/li&gt;
&lt;li&gt;If iterable contains at least one ''True'', ''any()'' will return ''True''&lt;/li&gt;
&lt;li&gt;If iterable is ''empty'', ''any()'' will return ''False''&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;
lsit=[True, True, True, True]
print(all(lsit))#Output: True
print(any(lsit))#Output: True

lsit1=[True, False, True, True]
print(all(lsit1))#Output: False
print(any(lsit1))#Output: True

lsit2=[False,False,False]
print(all(lsit2))#Output: False
print(any(lsit2))#Output: False

lsit3=[]
print(all(lsit3))#Output: True
print(any(lsit3))#Output: False
&lt;/pre&gt;

==Conditional Statements==
Conditionals are used to check the condition and change the flow of the program 
accordingly. They are realized in programming languages through if statement. The 
syntax is as follows :
&lt;pre&gt;
         if condition : 
            statement
&lt;/pre&gt;
    '''Note:''' Do not forget indentation (inserting space/tab) in the line after the
 if condition.
    
    In case you want to execute a set of statements when a condition is true and another

set of statement when the condition is false.
&lt;pre&gt;
         if condition : 
            statement 1
         else :
            statement 2
&lt;/pre&gt;

&lt;pre&gt;    
    Multiple if-else statements can be written as follows:
         if condition_1 : 
            statement 1
         elif condition_2 : # 'elif' is short for 'else if'
            statement 2
         elif condition_3 :
            statement 3
        .
        .
         else :
            final statement
&lt;/pre&gt;

[[#Top]]

=Loops and Conditionals : Fizzbuzz=
====Loops====
Loops are used to execute a set of repetitive statements. They are realised
through 'while' and 'for' loops in programming languages. The syntax of 'for' loop is 
as follows :
&lt;pre&gt;
for LOOPVARIABLE in SEQUENCE: 
            STATEMENTS&lt;/pre&gt;

    '''e.g.''' to print all the data from a list we can write:
&lt;pre&gt;
for item in list_name:
      print(item)&lt;/pre&gt;
    OR
&lt;pre&gt;
for index in range(len(list_name)):
      print(list_name[index])
 &lt;/pre&gt;   
    The syntax for while loop is as follows :
&lt;pre&gt;    
while BOOLEANEXPRESSION: 
     STATEMENTS
     INCREMENT/DECREMENT
&lt;/pre&gt;    
    '''e.g.''' if we want to print all numbers from 1 to 10
&lt;pre&gt;
i=1
while i&lt;=10 :
    print(i,&quot; &quot;)
    i=i+1
    &lt;/pre&gt;
 
'while' loop has indefinite iteration (run-time unknown). So, there must be loop,  break statement in it.
 Whereas 'for' loop is definite in nature (i.e. known or predictable span).&lt;br&gt;

&lt;b&gt;NOTE: Python doesn't have anything like do-while loop.&lt;/b&gt;

[[#Top]]

==Implementation==
Here, we try to demonstrate the concept of loops and conditionals through a game called Fizzbuzz. The rules are as follows :&lt;br/&gt;
[[File:fizzBuzz.gif]]

• if input number is a multiple of ’3’ print ”Fizz”
&lt;br/&gt;
• if input number is a multiple of ’5’ print ”Buzz”
&lt;br/&gt;
• if input number is a multiple of both '3' and ’5’ print ”FizzBuzz”
&lt;br/&gt;
The pseudo code is as follows :
&lt;pre&gt;
   If input no % 3 == 0 and  input no % 5 == 0 : 
       print ”Fizzbuzz”
   else if input no % 3 == 0 : 
       print ”Fizz”
   else if input no % 5 == 0 : 
       print ”Buzz”
   else :
       print the input no
&lt;/pre&gt;
 &lt;p style=&quot;text-align:justify&quot;&gt;
The order of statements execution matters to get the desired output. The highest priority condition should be first followed by other. In fizzbuzz programming, first checking should be done for both divisibility of 3 and 5. If condition not satisfied only then it should check individually for 3 or 5. So carefully choosing the order is crucial for better programming.
Note: There is some effect of present condition statements chosen on next conditions statements. That is why in first attempt fizzbuzz programming got struck.&lt;/p&gt;

Example: 
&lt;pre&gt;
#Code to achieve the above requirement in python3.
i = int(input(&quot;Enter the number&quot;)) 
if i%3 == 0 and i%5 == 0: print(i,&quot;FizzBuzz&quot;)  
elif i%5 == 0: print(i,&quot;Buzz&quot;)
elif i%3 == 0: print(i,&quot;Fizz&quot;)
else: print(i)
&lt;/pre&gt;
Lets put the same into a loop for a range given by the user.
&lt;pre&gt;
def fizzbuzzgame(start,stop):
    for i in range(start,stop+1):
        if i%3 == 0 and i%5 == 0:
            print(i,&quot;FizzBuzz&quot;)
        elif i%5 == 0:
            print(i,&quot;Buzz&quot;)
        elif i%3 == 0:
            print(i,&quot;Fizz&quot;)
        else: print(i)

fizzbuzzgame(50,100)
&lt;/pre&gt;
&lt;pre&gt;
#Output:
1235
Buzz
======================================
555
Fizzbuzz
======================================
1235
Buzz
======================================
999
Fizz
&lt;/pre&gt;

[[#Top]]

=== Fizz Buzz game in Interactive mode with Score ===
'''By Ms. Ami Tusharkant Choksi'''
&lt;pre&gt;
def fizzbuzzgame(i):
        if i%3 == 0 and i%5 == 0:
            print(i,&quot;FizzBuzz&quot;)
            return(&quot;fzbz&quot;)
        elif i%5 == 0:
            print(i,&quot;Buzz&quot;)
            return(&quot;bz&quot;)
        elif i%3 == 0:
            print(i,&quot;Fizz&quot;)
            return(&quot;fz&quot;)
        else:
            print(i)
            return(&quot;no&quot;)

ch = 'y'
fizzbuzz=0
fizz=0
buzz=0
nothing=0
print(&quot;&quot;&quot;

 /$$$$$$$$/$$                  /$$$$$$$                            
| $$_____|__/                 | $$__  $$                           
| $$      /$$/$$$$$$$$/$$$$$$$| $$  \ $$/$$   /$$/$$$$$$$$/$$$$$$$$
| $$$$$  | $|____ /$$|____ /$$| $$$$$$$| $$  | $|____ /$$|____ /$$/
| $$__/  | $$  /$$$$/   /$$$$/| $$__  $| $$  | $$  /$$$$/   /$$$$/ 
| $$     | $$ /$$__/   /$$__/ | $$  \ $| $$  | $$ /$$__/   /$$__/  
| $$     | $$/$$$$$$$$/$$$$$$$| $$$$$$$|  $$$$$$//$$$$$$$$/$$$$$$$$
|__/     |__|________|________|_______/ \______/|________|________/
                                                                  
&quot;&quot;&quot;)   
print('''

  /$$$$$$                                
 /$$__  $$                               
| $$  \__/ /$$$$$$ /$$$$$$/$$$$  /$$$$$$ 
| $$ /$$$$|____  $| $$_  $$_  $$/$$__  $$
| $$|_  $$ /$$$$$$| $$ \ $$ \ $| $$$$$$$$
| $$  \ $$/$$__  $| $$ | $$ | $| $$_____/
|  $$$$$$|  $$$$$$| $$ | $$ | $|  $$$$$$$
 \______/ \_______|__/ |__/ |__/\_______/
                                     
''')

while(ch == 'y'):
    n=int(input(&quot;Enter a Number : &quot;))
    winLoose=fizzbuzzgame(n)
    if(winLoose == &quot;fz&quot;):
        fizz+=1
    elif(winLoose == &quot;bz&quot;):
        buzz+=1
    elif(winLoose == &quot;fzbz&quot;):
        fizzbuzz+=1
    ch=input(&quot;Do you want to continue playing the game : (y/n)&quot;)
    if(ch=='n'):
        print('Congratulations, your score is\n FizzBuzz:%d\nFizz:%d\nBuzz:%d' %
(fizzbuzz,fizz,buzz))
    
'''Sample Output:

 /$$$$$$$$/$$                  /$$$$$$$                            
| $$_____|__/                 | $$__  $$                           
| $$      /$$/$$$$$$$$/$$$$$$$| $$  \ $$/$$   /$$/$$$$$$$$/$$$$$$$$
| $$$$$  | $|____ /$$|____ /$$| $$$$$$$| $$  | $|____ /$$|____ /$$/
| $$__/  | $$  /$$$$/   /$$$$/| $$__  $| $$  | $$  /$$$$/   /$$$$/ 
| $$     | $$ /$$__/   /$$__/ | $$  \ $| $$  | $$ /$$__/   /$$__/  
| $$     | $$/$$$$$$$$/$$$$$$$| $$$$$$$|  $$$$$$//$$$$$$$$/$$$$$$$$
|__/     |__|________|________|_______/ \______/|________|________/
                                                                                                                                   

  /$$$$$$                                
 /$$__  $$                               
| $$  \__/ /$$$$$$ /$$$$$$/$$$$  /$$$$$$ 
| $$ /$$$$|____  $| $$_  $$_  $$/$$__  $$
| $$|_  $$ /$$$$$$| $$ \ $$ \ $| $$$$$$$$
| $$  \ $$/$$__  $| $$ | $$ | $| $$_____/
|  $$$$$$|  $$$$$$| $$ | $$ | $|  $$$$$$$
 \______/ \_______|__/ |__/ |__/\_______/
                                         

Enter a Number : 666
666 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 777
777 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 555
555 FizzBuzz
Do you want to continue playing the game : (y/n)y
Enter a Number : 1
1
Do you want to continue playing the game : (y/n)y
Enter a Number : 789
789 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 25
25 Buzz
Do you want to continue playing the game : (y/n)n
Congratulations, your score is

FizzBuzz:1
Fizz:3
Buzz:1

&lt;/pre&gt;

[[#Top]]

=Crowd Computing: Just Estimate=

Crowd computing is conceptualised in various ways as being related to crowdsourcing, human computation, social computing, cloud computing and mobile computing. 

Crowd computing has been described in various ways viz. 
&lt;ul&gt;&lt;li&gt;distribution of human intelligence tasks to mobile devices&lt;/li&gt;
&lt;li&gt;cloud computing with humans&lt;/li&gt;
&lt;li&gt;human problem solving with large numbers of people using computers&lt;/li&gt;&lt;/ul&gt; 

Broadly, crowed computing is a set of human interaction tools for idea exchange and non-hierarchical decision making. 

Four common characteristics are used to identify the term: 
&lt;ol&gt;
&lt;li&gt;participation by a crowd of humans&lt;/li&gt;
&lt;li&gt;interaction with computing technology&lt;/li&gt;
&lt;li&gt;activity that is predetermined by the initiator or application itself&lt;/li&gt;
&lt;li&gt;the execution of tasks by the crowd utilising innate human capabilities.&lt;/li&gt;
&lt;/ol&gt;

==Wisdom of Crowds==
 &lt;p style=&quot;text-align:justify&quot;&gt;
The concept of ’Wisdom of Crowds’ was proposed by ''Francis Galton''. A weight-judging competition was carried on at the annual show of the West of England Fat Stock and Poultry Exhibition recently held at Plymouth, A fat ox having been selected, competitors bought stamped and numbered cards, each, on which to inscribe their respective names, addresses, and estimates of what the ox would weigh after it had been slaughtered. Those who guessed most successfully received prizes. About 8oo tickets were issued to the par- ticipants. The middlemost estimate of all the estimates recorded was 1207 lbs and the actual weight of the ox was 1198 lbs.&lt;/p&gt;

==Our Experiment==
 &lt;p style=&quot;text-align:justify&quot;&gt;
The crowd had to guess the number of candies/gems in a jar. Around 75 people participated in the experiment. The actual number of gems in the jar were 375. The median of all estimates came out to be 300 and the mean of all the estimates came out to be around 396. Median underestimated and mean overestimated the actual value. So according to recent studies, Trimmed mean must be used as an aggregate measure to estimate where Wisdom of Crowds is involved.
&lt;/p&gt;
[[File:Gemsjar.jpg|center|200px|caption]]

===Trimmed Mean===
 &lt;p style=&quot;text-align:justify&quot;&gt;
In these kinds of experiments, 10% trimmed mean is usually followed. For calculating 10% trimmed mean, remove 10% smallest and 10% largest values from the sample. Calculate the mean of the sample obtained. In the above experiment, the trimmed mean came out to be around 351 which is very close to the actual value.&lt;/p&gt;

==Implementation==
Here, we try to demonstrate the concept of trimmed mean through crowd computing.
&lt;ol&gt;
&lt;li&gt; Input a list of estimates done by the crowd .&lt;/li&gt;
&lt;li&gt; Sort the list.&lt;/li&gt;
&lt;li&gt; Remove the 10% smallest values.&lt;/li&gt;
&lt;li&gt; Remove the 10% largest values.
&lt;li&gt; Calculate the mean of the new list obtained .&lt;/li&gt;&lt;/ol&gt;&lt;hr&gt;
[[#Top]]

==Data of Experiment==       
    Estimates =[1000,1010,1786,2000,1500,1500,100,120,150,150,150,170,175,180,197,200,200,200,200,200,200,220,220,220,220,234,250,250,250,250,250,250,250,250,250,263,270,275,275,286,300,
                300,300,300,300,300,300,300,320,350,350,350,400, 400,400,400,400,450,467,500,500,500,500,500,500,500,550,550,600,600,600,650,700,700,720]

    '''CODE:'''
&lt;pre&gt;
Estimates = [1000,1010,1786,2000,1500,1500,100,120,150,150,150,170,175,180,197,200,200,200,200,200,200,220,220,220,220,234,250,250,250,250,250,250,250,250,250,263,270,275,275,286,300,                300,300,300,300,300,300,300,320,350,350,350,400,400,400,400,400,450,467,500,500,500,500,500,500,500,550,550,600,600,600,650,700,700,720]
Estimates.sort()
offset = int(0.10*len(Estimates))
for i in range(offset):
       del Estimates[0]
       del Estimates[-1]
Sum = 0    
for i in range(len(Estimates)):
       Sum += Estimates[i]
Mean_Value = Sum/len(Estimates)
print(&quot;Mean : &quot;, int(Mean_Value))
#Output:
Mean :  351
&lt;/pre&gt;
&lt;hr&gt;
==Trimmed Mean for the above example== 
&lt;h3&gt;Using scipy library&lt;/h3&gt;
&lt;pre&gt;
#import scipy to use the method of trim_mean
from scipy import stats
trimMean = stats.trim_mean(Estimates, 0.1) # Trim 10% at both ends
print(&quot;Trimmed Mean : &quot;,trimMean)
#Output:
Trimmed Mean :  335.1020408163265
&lt;/pre&gt;

&lt;h3&gt;Without using scipy library&lt;/h3&gt;
&lt;pre&gt;
#Trimmed mean with 10%
p=10/100
#sorted data
data=[2, 4, 6, 7, 11, 21, 81, 90, 105, 121]
n = len(data)
#Remove elements from both end
rem=int(n*p)
newData = data[rem:-rem]
mean = 0
for i in newData:
    mean += i
mean = int(mean/len(newData))
print(&quot;Trimmed mean : &quot;,mean)
#Output: Trimmed mean :  40
&lt;/pre&gt;
[[#Top]]

=Jumbled_Words Permutations: Jumbled Words=
==What are Permutations ?==
A permutation also called ordering of selected number of elements from a list denoted by nPr here we are choosing all elements of a list and so n=r&lt;br&gt;
nPr=n!/(n-r)!&lt;br&gt; as n=r
nPn=n!&lt;br&gt; which gives all possible arrangement of elements present in a list.

 For example, permutations of list [1,2,3] are [1,2,3], [1,3,2], [2,1,3], [2,3,1], 
[3,1,2], and [3,2,1]. 
The number of permutations of a list of elements nPn is given by n!. For example, there are 2! = 2 x 1 = 2 permutations of [1,2], namely [1,2] and [2,1], and 3! = 3 x 2 x 1 = 6 permutations of [1,2,3], as mentioned above.&lt;br/&gt;
[[File:Permutations.jpg]]

==Implementation==
 &lt;p style=&quot;text-align:justify&quot;&gt;
Here, we try to demonstrate the concept of permutations through jumbled words. It is a two player game in which one person presents the other person a different permutation of the word in his mind. The other person has to guess the right word. If he guesses, the he wins otherwise he loses.&lt;/p&gt;
 Input an list of words.
 Randomly pick a word from the list of words .
 Shuffle this word and present it to the other player.
 if word guesses by the player is same as the one picked from list of w
     player wins
 else
     player loses

ALTERNATE CODE TO GENERATE THIS GAME:
&lt;pre&gt;
import random
p1=input(&quot;enter player 1 name:&quot;)
p2=input(&quot;enter player 2 name:&quot;)
l=[&quot;rainbow&quot;,&quot;computer&quot;,&quot;robot&quot;,&quot;butter&quot;,&quot;vegetable&quot;,&quot;science&quot;,&quot;correct&quot;]
c1=c2=a1=a2=f1=f2=0
k=1
i=3
def play():
    n=random.choice(l)        ##n=chooses a word from list l
    l1=[]
    for j in n:
       l1.append(j)      ##creates a list for word in n
    for t in range(len(l1)):
       p=random.choice(l1)     ##this randomly displays letters in the list
       print(p)
       l1.remove(p)          ##to avoid the repetition of a letter
    s=input(&quot;enter the word:&quot;)
    if(s==n):
        print(&quot;correct&quot;)
        return 1
    else:
        print(&quot;not correct&quot;)
        print(&quot;answer is&quot;,n)
        return 0
def stat():
     print(&quot;player 1:&quot;)
     print(&quot;score:&quot;,c1)
     print(&quot;answered:&quot;,a1)
     print(&quot;failed:&quot;,f1)
     print(&quot;.............&quot;)
     print(&quot;player 2:&quot;)
     print(&quot;score:&quot;,c2)
     print(&quot;answered:&quot;,a2)
     print(&quot;failed&quot;,f2)
     if(c1&gt;c2):
         print(p1,&quot; won over &quot;,p2)
     elif(c1==c2):
         print(&quot;draw game&quot;)
     else:
         print(p2,&quot; won over &quot;,p1) 
while(i!=4):
      if(i==3):
         if(k==1):
             print(&quot;player 1 turn&quot;)
             print(&quot;your jumbled word is:&quot;)
             k=k+1
             m=play()
             if(m==1):      ##if guessed answer is correct,then score and no.of answered count will be increased
                c1+=1
                a1+=1
             else:
                f1+=1       ##else count of no.of failed to answered will be incremented
         else:
             print(&quot;player 2 turn&quot;)
             print(&quot;your jumbled word is:&quot;)
             k=k-1
             m=play()
             if(m==1):
                c2=c2+1
                a2=a2+1
             else:
                f2=f2+1
       if(i==2):
             print(&quot;present status&quot;)
             stat()
       i=int(input(&quot;enter your choice  1.stop 2.status 3.continue&quot;))
       if(i==1):
             stat()
             i=i+3
&lt;/pre&gt;
&lt;hr&gt;

[[#Top]]

=== JumbledWord Simple Logic, In Short ===
[[File:jumbledWord.gif]]
---
&lt;hr&gt;
'''Logic to create a Jumbled Word'''
&lt;hr&gt;
&lt;pre&gt;
#Get Jumbled Word and print it Horizontally
import random

def getJumbledWord(b):
    jumble=''
    l1 = [ b[i] for i in range(0, len(b)) ]
    for t in range(len(l1)):
       p=random.choice(l1)  #this randomly gets letters from the list      
       jumble=jumble+p       
       l1.remove(p)
    return jumble

b=input(&quot;Enter a word to make it jumbled : &quot;)
print(&quot;Jumbled Word : &quot;, getJumbledWord(b))
&lt;/pre&gt;
&lt;pre&gt;
Output:
Enter a word to make it jumbled : live and let live others
Jumbled Word :  vel  toldeisrte aihv len
==========================================
Enter a word to make it jumbled : junkfood
Jumbled Word :  nfukdooj
&lt;/pre&gt;
&lt;hr&gt;
'''Another Logic to create a Jumbled Word'''
&lt;hr&gt;
&lt;pre&gt;
import random
b=input(&quot;Enter a word to make it jumbled : &quot;)

def getJumbledWord1(b):
    l1 = [ b[i] for i in range(0, len(b)) ]
    random.shuffle(l1)
    str1 = ''.join(l1)
    return str1

print(&quot;Jumbled Word : &quot;, getJumbledWord1(b))
&lt;/pre&gt;

====Sample Output:====
&lt;pre&gt;
---- Output1 
Enter a word to make it jumbled : butter
Jumbled Word :  tbture

---- Output2 
Enter a word to make it jumbled : petriotism
Jumbled Word :  pittrosime
&lt;/pre&gt;

=Theory of Evolution=

== What is Evolution ? ==
Evolution is the change in heritable characteristics over successive generations. The theory of evolution explains that DNA, which acts as a carrier of genetic information from one generation to other, tends to change or mutate occasionally. These changes are reflected in next generations to come. This is how life has evolved on earth from bacteria to human beings.&lt;br&gt;
[[File:Evolution.png|500px]]

== Implementation ==
 &lt;p style=&quot;text-align:justify&quot;&gt;
An array representing DNA is stored in a file. As genes are forms of DNA, they contain information to be transferred to forthcoming generations. Assume that information is in the form of bits (in the form of 0s and 1s). A number is picked randomly from 1 to the size of the array. A new parameter has been introduced which decides whether mutation would occur or not. If the value of this new parameter is 1 (It is picked randomly from 1 to 100), then only change is reflected down the generations, otherwise it is not. The pseudo code is as follows :
&lt;/p&gt;
Input an array containing genetic information .
Randomly generate a number (say m) from 1 to length of the array. Randomly generate other number (say p) from 1 to 100.

&lt;pre&gt; 
    if p is equal to 1 then 
        if m is 1 then
          set it to 0
        else
          set it to 1
&lt;/pre&gt;
[[#Top]]</text>
      <sha1>c1mmufx883aw64zslef0a9xwwp5z7z6</sha1>
    </revision>
    <revision>
      <id>4540</id>
      <parentid>4539</parentid>
      <timestamp>2018-10-24T08:17:16Z</timestamp>
      <contributor>
        <username>PidWid</username>
        <id>350</id>
      </contributor>
      <minor/>
      <comment>/* Operations and Methods to work with List */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="31645">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_3 Contributors of this page]
*Week 3 Playlist: https://www.youtube.com/playlist?list=PLc_j0TNIaWxOVx_z9jAM2UB3RqYNXaoEo
=List=
List is a flexible data structure used for storing a group of data separated by comma. The elements in a list need not be of the same data type.

'''Example:'''
       List_1 = [ 1, 2,3] or 
       List_1 = [&quot;coffee&quot;, &quot;Tea&quot;, &quot;Milk&quot;] or
       List_1 = [1,&quot;coffee&quot;, &quot;Tea&quot;, 3, &quot;5&quot;]

==List Creation==
a) A list can be created by simply putting values (separated by comma) between square
 brackets as given below,
&lt;pre&gt;List_1 = [1,&quot;coffee&quot;, &quot;Tea&quot;, 3, &quot;5&quot;] #this creates a list by name List_1 containing
 following items
&lt;/pre&gt;


Or,
(b)A List can be created from scratch and elements can be added 
&lt;pre&gt;
        List_2 = [ ]
        List_2.append(&quot;Kala&quot;)
        List_2.append(&quot;Mala&quot;)
&lt;/pre&gt;
Here we use &quot;append&quot;, which is a function in python that enable us to append or attach an element to a list .
&lt;pre&gt;Thus List_2 will now hold [&quot;Kala&quot;,&quot;Mala&quot;]&lt;/pre&gt;

[[#Top]]

==Operations and Methods to work with List==
&lt;pre&gt;
a = [25,30,50,90,12,13]
b = [100,300,500,200,250]
&lt;/pre&gt;
&lt;hr&gt;
&lt;table border=2&gt;
  &lt;tr&gt;
    &lt;th&gt;&lt;b&gt;Method/&lt;br&gt;Operator&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Function&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Syntax&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Output&lt;/b&gt;&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;len()&lt;/td&gt;
    &lt;td&gt;Find length of a list&lt;/td&gt;
    &lt;td&gt;len(a)&lt;/td&gt;
    &lt;td&gt;6&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;max()&lt;/td&gt;
    &lt;td&gt;Find maximum element from the list&lt;/td&gt;
    &lt;td&gt;max(a)&lt;/td&gt;
    &lt;td&gt;90&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;min()&lt;/td&gt;
    &lt;td&gt;Find minimum element from the list&lt;/td&gt;
    &lt;td&gt;min(a)&lt;/td&gt;
    &lt;td&gt;12&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sum()&lt;/td&gt;
    &lt;td&gt;Returns sum of all elements of the list&lt;/td&gt;
    &lt;td&gt;sum(a)&lt;/td&gt;
    &lt;td&gt;220&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;reverse()&lt;/td&gt;
    &lt;td&gt;Reverses the original list&lt;/td&gt;
    &lt;td&gt;a.reverse()&lt;/td&gt;
    &lt;td&gt;[13, 12, 90, 50, 30, 25]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sort()&lt;/td&gt;
    &lt;td&gt;Sorts the original list in ascending order&lt;/td&gt;
    &lt;td&gt;a.sort()&lt;/td&gt;
    &lt;td&gt;[12, 13, 25, 30, 50, 90]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sorted()&lt;/td&gt;
    &lt;td&gt;Returns the new sorted list &lt;/td&gt;
    &lt;td&gt;sorted(a)&lt;/td&gt;
    &lt;td&gt;[12, 13, 25, 30, 50, 90]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;insert()&lt;/td&gt;
    &lt;td&gt;Insert at a particular index in the list, and shifts remaining elements&lt;/td&gt;
    &lt;td&gt;a.insert(3,6)&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 6, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;append()&lt;/td&gt;
    &lt;td&gt;Adds elements/object to the end of the list&lt;/td&gt;
    &lt;td&gt;a.append(5)&lt;br&gt;a.append([10,20])&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 5]&lt;br&gt;[25, 30, 50, 90, 12, 13, [10, 20]]&lt;br&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;extend()&lt;/td&gt;
    &lt;td&gt;Adds object to the end of the list as elements not as object&lt;/td&gt;
    &lt;td&gt;a.extend([10,20])&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 10, 20]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;*&amp;nbsp;&amp;nbsp;Repeatation&lt;br&gt;operator&lt;/td&gt;
    &lt;td&gt;Repeat the list for n times and returns a new list&lt;/td&gt;
    &lt;td&gt;a*2&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 25, 30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;+ Concatenation&lt;br&gt;operator&lt;/td&gt;
    &lt;td&gt;Concatenates two lists, and returns a new list&lt;/td&gt;
    &lt;td&gt;a+b&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 100, 300, 500, 200, 250]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;index()&lt;/td&gt;
    &lt;td&gt;Finds index of a particular element in the list or not&lt;/td&gt;
    &lt;td&gt;a.index(25)&lt;br&gt;a.index(0)&lt;br&gt;&lt;/td&gt;
    &lt;td&gt;0&lt;br&gt;&lt;br&gt;ValueError: 0 is not in list&lt;br&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;in operator&lt;/td&gt;
    &lt;td&gt;Finds whether a particular element is in the list or not, returns boolean&lt;/td&gt;
    &lt;td&gt;25 in a&lt;/td&gt;
    &lt;td&gt;True&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;not in operator&lt;/td&gt;
    &lt;td&gt;Checks if element is not available in list, returns boolean&lt;/td&gt;
    &lt;td&gt;25 not in a&lt;/td&gt;
    &lt;td&gt;False&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;count()&lt;/td&gt;
    &lt;td&gt;Counts the number of occurence of an element in the list&lt;/td&gt;
    &lt;td&gt;a.count(25)&lt;/td&gt;
    &lt;td&gt;1&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;remove()&lt;/td&gt;
    &lt;td&gt;Removes an element from the list&lt;/td&gt;
    &lt;td&gt;a.remove(25)&lt;/td&gt;
    &lt;td&gt; [30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;pop()&lt;/td&gt;
    &lt;td&gt;Delete and return item at index 0&lt;/td&gt;
    &lt;td&gt;a.pop(0)&lt;/td&gt;
    &lt;td&gt;25 , a will be [30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;del&lt;/td&gt;
    &lt;td&gt;Deletes item at a particular index from the list&lt;/td&gt;
    &lt;td&gt;del a[0]&lt;/td&gt;
    &lt;td&gt;[30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;all()&lt;/td&gt;
&lt;td&gt;Returns True, if all items in list are True or it is an empty list&lt;/td&gt;
&lt;td&gt;all([True, True, True])
all([])
&lt;/td&gt;
&lt;td&gt;True&lt;br&gt;
True&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;any()&lt;/td&gt;
&lt;td&gt;Returns True, if any item in list is True else return False&lt;/td&gt;
&lt;td&gt;any([True, True, True])&lt;br&gt;
any([True, False, True])&lt;br&gt;
any([])&lt;/td&gt;
&lt;td&gt;True&lt;br&gt;True&lt;br&gt;False&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;

==Printing the List==
=== Print whole list ===
A list can be printed simply or using a ''for / while'' loop 

 print(List_2)     # To print the entire list
This code will print      
 ['Kala','Mala']     

===Print element at a particular index===
&lt;pre&gt;
Using index position
    List_2[0]     # prints 'Kala' ,i.e,the value at index position 0.
    List_2[1]     # prints 'Mala'.
&lt;/pre&gt;
=== Without using index position ===
&lt;pre&gt;
for item in List_2:   # here item is a variable used to access elements in list.
       print(item)
   This code snippet prints 
    Kala
    Mala
&lt;/pre&gt;
[[#Top]]

==Search for a particular element in list==
Elements in a list can be searched by one of the two ways:
=== using index() function===
&lt;pre&gt;
ages1 = [11,23,12,23,45]

#if element is available in the list, index() returns the index value on which, the element is
 present.
print(ages1.index(45))#Output: 4

#if element is not available in the list, index() returns ''ValueError''
print(ages1.index(0))#Output: ValueError:
&lt;/pre&gt;

In programming, if such error occurs, program gets terminated. It can be solved using exception handling.
 
e.g.
&lt;pre&gt;
ages1 = [11,23,12,23,45]

try:
    print(ages1.index(0))
except ValueError:
    print(&quot;Exception has occured&quot;)    
    print(&quot;Element is not found in the list&quot;)

&lt;/pre&gt;
&lt;pre&gt;
'''Output: 
Exception has occured
Element is not found in the list
'''&lt;/pre&gt;
[[#Top]]

=== using 'in' operator===
''in'' operator is used to check whether a particular element is available in the list or not.e.g.

&lt;pre&gt;
ages1 = [11,23,12,23,45]
no=11

if no in ages1:
    print(&quot;no is there in the list&quot;)
else:    
    print(&quot;no is NOT there in the list&quot;)
&lt;/pre&gt;
&lt;pre&gt;
#Output: no is there in the list
&lt;/pre&gt;


'''Number is not there in the list'''
&lt;pre&gt;
ages1 = [11,23,12,23,45]
no=15

if no in ages1:
    print(&quot;no is there in the list&quot;)
else:    
    print(&quot;no is NOT there in the list&quot;)
&lt;/pre&gt;
&lt;pre&gt;
Output: no is NOT there in the list
&lt;/pre&gt;
[[#Top]]

==Updating the List==
The lists can be updated using ''append'' or ''insert'' function.  Append adds the element to the end of the list and Insert adds the element in the specified position.
&lt;pre&gt;
   # add the element 'Sheela' to the end of the list.
   List_2.append(&quot;Sheela&quot;)    
   print (List_2) will output 
   ['Kala', 'Mala', 'Sheela']
&lt;/pre&gt;
   &lt;pre&gt;
# add the element &quot;Bala&quot; in the list at the index 1.
   List_2.insert(1,&quot;Bala&quot;)    
   print (List_2) will output 
   ['Kala', 'Bala','Mala', 'Sheela']
&lt;/pre&gt;

=== Extend the list by adding elements of other list at end using extend()===
&lt;pre&gt;
ages = [11,23,12,23,45]
ages.extend([57,58])
print(ages)
&lt;/pre&gt;

&lt;pre&gt;
#Output: [11, 23, 12, 23, 45, 57, 58]
&lt;/pre&gt;

==== Difference between ''append() and extend()'' ====
Difference between ''append()'' and ''extend()'' can be easily understood, by the following example.

&lt;pre&gt;
appendlist = [11,23,12,23,45]
appendlist.append([57,58])

extendlist= [11,23,12,23,45]
extendlist.extend([57,58])
&lt;/pre&gt;

&lt;pre&gt;
'''Output:
[11, 23, 12, 23, 45, [57, 58]]
[11, 23, 12, 23, 45, 57, 58]'''
&lt;/pre&gt;

[[#Top]]

==Basic Operations on List==
===Frequency of Occurrence===
list.count(object) will return the number of times the object occur in the list.
  '''Example'''
    ages = [11,23,12,23,45,43,22,24,23]
    ages.count(23) will return
    3
    ages.count(100) will return
    0

===Length of the List===
''len(list)'' will return the length of the list ie. the number of objects in the list.
  '''Example'''
&lt;pre&gt;
    ages = [11,23,12,23,45,43,22,24,23]
    len(ages) # Output: 9
&lt;/pre&gt;

To print the objects in the list either use ''for item in list'' or ''for index in range(len(list))''
&lt;pre&gt;
    for item in ages:       
        print (item)  
        (OR)
    for index in range(len(ages)) :
        print (ages[index])
&lt;/pre&gt;

===Sort the List===
''list.sort()'' will sort the list in ascending order
  '''Example'''
    ages = [11,23,12,23,45,43,22,24,23]
    ages.sort() 
    print (ages) 
    [11, 12, 22, 23, 23, 23, 24, 43, 45]

[[#Top]]

===Sort the List using sorted() function===
''sorted(list1)'' will sort the list and return a new list, it doesn't modify the original list
&lt;br&gt;'''Example: Sort in ascending order'''
&lt;pre&gt;
ages = [11,23,12,23,45,43,22,24,23]
newList=sorted(ages)
print(newList)

#Output: [11, 12, 22, 23, 23, 23, 24, 43, 45]
&lt;/pre&gt;

&lt;br&gt;'''Example: Sort in descending order'''
&lt;pre&gt;
ages = [11,23,12,23,45,43,22,24,23]
newList=sorted(ages,reverse=True)
print(newList)

#Output: [45, 43, 24, 23, 23, 23, 22, 12, 11]
&lt;/pre&gt;

===Reverse the List===
''list.reverse()'' will reverse the original list
  '''Example'''
    ages = [11, 12, 22, 23, 23, 23, 24, 43, 45]
    ages.reverse()
    print (ages)
    [45, 43, 24, 23, 23, 23, 22, 12, 11]

Both ''sort()'' and ''reverse()'' list operation will work on numeric and alphanumeric data list.

A special use of the ''reverse()'' function is to descend a list that is sorted in ascending order.

  '''Example'''
&lt;pre&gt;
ages = [11, 12, 22, 23, 23, 23, 24, 43, 45]
ages.sort()
print(ages)
ages.reverse()
print(ages)
&lt;/pre&gt;

[[#Top]]

===Slicing===
Used to retrieve an object or objects in a range as a list  
  '''Example'''

Use ''list[index]'' to retrieve the object at the given index
&lt;pre&gt;
In [1]: student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
In [2]: student[3]     #Object at index 3.  Remember index starts at 0
Out[2]: 'Geetha'      
&lt;/pre&gt;

Use ''list[start_index : end_index + 1]'' to retrieve objects from the start_index to end_index 
&lt;pre&gt;
In [3]: student[2:4]     # Objects from index 2 to 3 as List. Note the [ and ]
Out[3]: ['Vijay', 'Geetha']   
&lt;/pre&gt;

Use ''list[:]'' to retrieve objects from the starting of the list to the end of the list. 
The default start value will be the starting index of the list (i.e. 0) and the default end value
will be the length of the list 
&lt;pre&gt;
In [4]: student[:]        # prints the entire list
Out[4]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma', 'Janani']
&lt;/pre&gt;
&lt;pre&gt;
In [5]: student[:5]       # prints the objects from the start of the list upto object at index 4
Out[5]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran']
&lt;/pre&gt;
&lt;pre&gt;
In [6]: student[2:]       # prints the objects from index 2 upto the end of the list
Out[6]: ['Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma', 'Janani']
&lt;/pre&gt;

Negative index too is available in Python. It starts from last element of the list. i.e.
&lt;pre&gt;
In [7]:student[-1]        #prints last index of list
Out[7]: 'Janani'
&lt;/pre&gt;
&lt;pre&gt;
In [8]:student[-1:-8]     #prints empty list
Out[8]: []
&lt;/pre&gt;
&lt;pre&gt;
In [9]:student[-8:-1]     #prints -8th index to -1st index elements
Out[9]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma']
&lt;/pre&gt;

[[#Top]]

===Removing Item from list ===
----

Is used to remove a specific item from the list.

'''Example:'''
 
Use list.remove(entry/value)  Or   del list[index]    Or list.pop(index)
&lt;pre&gt;
student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
student.remove(&quot;Arun&quot;)   #This will delete item &quot;Arun&quot;
         Or    
del student[0]           # This will delete item at index 0
         Or
student.pop(0)         # This will delete and return item at index 0
print(student)    
Output: &quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
&lt;/pre&gt;

[[#Top]]

===Delete list ===
----
Used to delete complete list

'''Example'''

Use del &lt;list name&gt;
&lt;pre&gt;
student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
del student&lt;/pre&gt;

===Concatenation of two lists===
----
''+'' is the concatenation operator which is used concatenate two lists. 
&lt;pre&gt;
ages1 = [11,23,12,23,45]
ages2 = [25, 24, 43, 47]
age=ages1+ages2
print(age)
#Output: [11, 23, 12, 23, 45, 25, 24, 43, 47]
&lt;/pre&gt;

===Repeatation of a list ===
----
''*'' is the operator to repeat a particular list.
&lt;pre&gt;
ages1 = [11,23,12,23,45]
age=ages1*5 #ages1 list is repeated 5 times and stroed in ''age'' list
print(age)

#Output: [11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45]
&lt;/pre&gt;

=== all and any for List===
all() and any() are special functions to check whether all elements in iterable is ''True'' or any element is ''True''
&lt;ol&gt;
&lt;li&gt;If all elements in a list are ''True'', ''all()'' will return ''True''&lt;/li&gt;
&lt;li&gt;If iterable is ''empty'', ''all()'' will return ''True''&lt;/li&gt;
&lt;li&gt;If iterable contains at least one ''True'', ''any()'' will return ''True''&lt;/li&gt;
&lt;li&gt;If iterable is ''empty'', ''any()'' will return ''False''&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;
lsit=[True, True, True, True]
print(all(lsit))#Output: True
print(any(lsit))#Output: True

lsit1=[True, False, True, True]
print(all(lsit1))#Output: False
print(any(lsit1))#Output: True

lsit2=[False,False,False]
print(all(lsit2))#Output: False
print(any(lsit2))#Output: False

lsit3=[]
print(all(lsit3))#Output: True
print(any(lsit3))#Output: False
&lt;/pre&gt;

==Conditional Statements==
Conditionals are used to check the condition and change the flow of the program 
accordingly. They are realized in programming languages through if statement. The 
syntax is as follows :
&lt;pre&gt;
         if condition : 
            statement
&lt;/pre&gt;
    '''Note:''' Do not forget indentation (inserting space/tab) in the line after the
 if condition.
    
    In case you want to execute a set of statements when a condition is true and another

set of statement when the condition is false.
&lt;pre&gt;
         if condition : 
            statement 1
         else :
            statement 2
&lt;/pre&gt;

&lt;pre&gt;    
    Multiple if-else statements can be written as follows:
         if condition_1 : 
            statement 1
         elif condition_2 : # 'elif' is short for 'else if'
            statement 2
         elif condition_3 :
            statement 3
        .
        .
         else :
            final statement
&lt;/pre&gt;

[[#Top]]

=Loops and Conditionals : Fizzbuzz=
====Loops====
Loops are used to execute a set of repetitive statements. They are realised
through 'while' and 'for' loops in programming languages. The syntax of 'for' loop is 
as follows :
&lt;pre&gt;
for LOOPVARIABLE in SEQUENCE: 
            STATEMENTS&lt;/pre&gt;

    '''e.g.''' to print all the data from a list we can write:
&lt;pre&gt;
for item in list_name:
      print(item)&lt;/pre&gt;
    OR
&lt;pre&gt;
for index in range(len(list_name)):
      print(list_name[index])
 &lt;/pre&gt;   
    The syntax for while loop is as follows :
&lt;pre&gt;    
while BOOLEANEXPRESSION: 
     STATEMENTS
     INCREMENT/DECREMENT
&lt;/pre&gt;    
    '''e.g.''' if we want to print all numbers from 1 to 10
&lt;pre&gt;
i=1
while i&lt;=10 :
    print(i,&quot; &quot;)
    i=i+1
    &lt;/pre&gt;
 
'while' loop has indefinite iteration (run-time unknown). So, there must be loop,  break statement in it.
 Whereas 'for' loop is definite in nature (i.e. known or predictable span).&lt;br&gt;

&lt;b&gt;NOTE: Python doesn't have anything like do-while loop.&lt;/b&gt;

[[#Top]]

==Implementation==
Here, we try to demonstrate the concept of loops and conditionals through a game called Fizzbuzz. The rules are as follows :&lt;br/&gt;
[[File:fizzBuzz.gif]]

• if input number is a multiple of ’3’ print ”Fizz”
&lt;br/&gt;
• if input number is a multiple of ’5’ print ”Buzz”
&lt;br/&gt;
• if input number is a multiple of both '3' and ’5’ print ”FizzBuzz”
&lt;br/&gt;
The pseudo code is as follows :
&lt;pre&gt;
   If input no % 3 == 0 and  input no % 5 == 0 : 
       print ”Fizzbuzz”
   else if input no % 3 == 0 : 
       print ”Fizz”
   else if input no % 5 == 0 : 
       print ”Buzz”
   else :
       print the input no
&lt;/pre&gt;
 &lt;p style=&quot;text-align:justify&quot;&gt;
The order of statements execution matters to get the desired output. The highest priority condition should be first followed by other. In fizzbuzz programming, first checking should be done for both divisibility of 3 and 5. If condition not satisfied only then it should check individually for 3 or 5. So carefully choosing the order is crucial for better programming.
Note: There is some effect of present condition statements chosen on next conditions statements. That is why in first attempt fizzbuzz programming got struck.&lt;/p&gt;

Example: 
&lt;pre&gt;
#Code to achieve the above requirement in python3.
i = int(input(&quot;Enter the number&quot;)) 
if i%3 == 0 and i%5 == 0: print(i,&quot;FizzBuzz&quot;)  
elif i%5 == 0: print(i,&quot;Buzz&quot;)
elif i%3 == 0: print(i,&quot;Fizz&quot;)
else: print(i)
&lt;/pre&gt;
Lets put the same into a loop for a range given by the user.
&lt;pre&gt;
def fizzbuzzgame(start,stop):
    for i in range(start,stop+1):
        if i%3 == 0 and i%5 == 0:
            print(i,&quot;FizzBuzz&quot;)
        elif i%5 == 0:
            print(i,&quot;Buzz&quot;)
        elif i%3 == 0:
            print(i,&quot;Fizz&quot;)
        else: print(i)

fizzbuzzgame(50,100)
&lt;/pre&gt;
&lt;pre&gt;
#Output:
1235
Buzz
======================================
555
Fizzbuzz
======================================
1235
Buzz
======================================
999
Fizz
&lt;/pre&gt;

[[#Top]]

=== Fizz Buzz game in Interactive mode with Score ===
'''By Ms. Ami Tusharkant Choksi'''
&lt;pre&gt;
def fizzbuzzgame(i):
        if i%3 == 0 and i%5 == 0:
            print(i,&quot;FizzBuzz&quot;)
            return(&quot;fzbz&quot;)
        elif i%5 == 0:
            print(i,&quot;Buzz&quot;)
            return(&quot;bz&quot;)
        elif i%3 == 0:
            print(i,&quot;Fizz&quot;)
            return(&quot;fz&quot;)
        else:
            print(i)
            return(&quot;no&quot;)

ch = 'y'
fizzbuzz=0
fizz=0
buzz=0
nothing=0
print(&quot;&quot;&quot;

 /$$$$$$$$/$$                  /$$$$$$$                            
| $$_____|__/                 | $$__  $$                           
| $$      /$$/$$$$$$$$/$$$$$$$| $$  \ $$/$$   /$$/$$$$$$$$/$$$$$$$$
| $$$$$  | $|____ /$$|____ /$$| $$$$$$$| $$  | $|____ /$$|____ /$$/
| $$__/  | $$  /$$$$/   /$$$$/| $$__  $| $$  | $$  /$$$$/   /$$$$/ 
| $$     | $$ /$$__/   /$$__/ | $$  \ $| $$  | $$ /$$__/   /$$__/  
| $$     | $$/$$$$$$$$/$$$$$$$| $$$$$$$|  $$$$$$//$$$$$$$$/$$$$$$$$
|__/     |__|________|________|_______/ \______/|________|________/
                                                                  
&quot;&quot;&quot;)   
print('''

  /$$$$$$                                
 /$$__  $$                               
| $$  \__/ /$$$$$$ /$$$$$$/$$$$  /$$$$$$ 
| $$ /$$$$|____  $| $$_  $$_  $$/$$__  $$
| $$|_  $$ /$$$$$$| $$ \ $$ \ $| $$$$$$$$
| $$  \ $$/$$__  $| $$ | $$ | $| $$_____/
|  $$$$$$|  $$$$$$| $$ | $$ | $|  $$$$$$$
 \______/ \_______|__/ |__/ |__/\_______/
                                     
''')

while(ch == 'y'):
    n=int(input(&quot;Enter a Number : &quot;))
    winLoose=fizzbuzzgame(n)
    if(winLoose == &quot;fz&quot;):
        fizz+=1
    elif(winLoose == &quot;bz&quot;):
        buzz+=1
    elif(winLoose == &quot;fzbz&quot;):
        fizzbuzz+=1
    ch=input(&quot;Do you want to continue playing the game : (y/n)&quot;)
    if(ch=='n'):
        print('Congratulations, your score is\n FizzBuzz:%d\nFizz:%d\nBuzz:%d' %
(fizzbuzz,fizz,buzz))
    
'''Sample Output:

 /$$$$$$$$/$$                  /$$$$$$$                            
| $$_____|__/                 | $$__  $$                           
| $$      /$$/$$$$$$$$/$$$$$$$| $$  \ $$/$$   /$$/$$$$$$$$/$$$$$$$$
| $$$$$  | $|____ /$$|____ /$$| $$$$$$$| $$  | $|____ /$$|____ /$$/
| $$__/  | $$  /$$$$/   /$$$$/| $$__  $| $$  | $$  /$$$$/   /$$$$/ 
| $$     | $$ /$$__/   /$$__/ | $$  \ $| $$  | $$ /$$__/   /$$__/  
| $$     | $$/$$$$$$$$/$$$$$$$| $$$$$$$|  $$$$$$//$$$$$$$$/$$$$$$$$
|__/     |__|________|________|_______/ \______/|________|________/
                                                                                                                                   

  /$$$$$$                                
 /$$__  $$                               
| $$  \__/ /$$$$$$ /$$$$$$/$$$$  /$$$$$$ 
| $$ /$$$$|____  $| $$_  $$_  $$/$$__  $$
| $$|_  $$ /$$$$$$| $$ \ $$ \ $| $$$$$$$$
| $$  \ $$/$$__  $| $$ | $$ | $| $$_____/
|  $$$$$$|  $$$$$$| $$ | $$ | $|  $$$$$$$
 \______/ \_______|__/ |__/ |__/\_______/
                                         

Enter a Number : 666
666 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 777
777 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 555
555 FizzBuzz
Do you want to continue playing the game : (y/n)y
Enter a Number : 1
1
Do you want to continue playing the game : (y/n)y
Enter a Number : 789
789 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 25
25 Buzz
Do you want to continue playing the game : (y/n)n
Congratulations, your score is

FizzBuzz:1
Fizz:3
Buzz:1

&lt;/pre&gt;

[[#Top]]

=Crowd Computing: Just Estimate=

Crowd computing is conceptualised in various ways as being related to crowdsourcing, human computation, social computing, cloud computing and mobile computing. 

Crowd computing has been described in various ways viz. 
&lt;ul&gt;&lt;li&gt;distribution of human intelligence tasks to mobile devices&lt;/li&gt;
&lt;li&gt;cloud computing with humans&lt;/li&gt;
&lt;li&gt;human problem solving with large numbers of people using computers&lt;/li&gt;&lt;/ul&gt; 

Broadly, crowed computing is a set of human interaction tools for idea exchange and non-hierarchical decision making. 

Four common characteristics are used to identify the term: 
&lt;ol&gt;
&lt;li&gt;participation by a crowd of humans&lt;/li&gt;
&lt;li&gt;interaction with computing technology&lt;/li&gt;
&lt;li&gt;activity that is predetermined by the initiator or application itself&lt;/li&gt;
&lt;li&gt;the execution of tasks by the crowd utilising innate human capabilities.&lt;/li&gt;
&lt;/ol&gt;

==Wisdom of Crowds==
 &lt;p style=&quot;text-align:justify&quot;&gt;
The concept of ’Wisdom of Crowds’ was proposed by ''Francis Galton''. A weight-judging competition was carried on at the annual show of the West of England Fat Stock and Poultry Exhibition recently held at Plymouth, A fat ox having been selected, competitors bought stamped and numbered cards, each, on which to inscribe their respective names, addresses, and estimates of what the ox would weigh after it had been slaughtered. Those who guessed most successfully received prizes. About 8oo tickets were issued to the par- ticipants. The middlemost estimate of all the estimates recorded was 1207 lbs and the actual weight of the ox was 1198 lbs.&lt;/p&gt;

==Our Experiment==
 &lt;p style=&quot;text-align:justify&quot;&gt;
The crowd had to guess the number of candies/gems in a jar. Around 75 people participated in the experiment. The actual number of gems in the jar were 375. The median of all estimates came out to be 300 and the mean of all the estimates came out to be around 396. Median underestimated and mean overestimated the actual value. So according to recent studies, Trimmed mean must be used as an aggregate measure to estimate where Wisdom of Crowds is involved.
&lt;/p&gt;
[[File:Gemsjar.jpg|center|200px|caption]]

===Trimmed Mean===
 &lt;p style=&quot;text-align:justify&quot;&gt;
In these kinds of experiments, 10% trimmed mean is usually followed. For calculating 10% trimmed mean, remove 10% smallest and 10% largest values from the sample. Calculate the mean of the sample obtained. In the above experiment, the trimmed mean came out to be around 351 which is very close to the actual value.&lt;/p&gt;

==Implementation==
Here, we try to demonstrate the concept of trimmed mean through crowd computing.
&lt;ol&gt;
&lt;li&gt; Input a list of estimates done by the crowd .&lt;/li&gt;
&lt;li&gt; Sort the list.&lt;/li&gt;
&lt;li&gt; Remove the 10% smallest values.&lt;/li&gt;
&lt;li&gt; Remove the 10% largest values.
&lt;li&gt; Calculate the mean of the new list obtained .&lt;/li&gt;&lt;/ol&gt;&lt;hr&gt;
[[#Top]]

==Data of Experiment==       
    Estimates =[1000,1010,1786,2000,1500,1500,100,120,150,150,150,170,175,180,197,200,200,200,200,200,200,220,220,220,220,234,250,250,250,250,250,250,250,250,250,263,270,275,275,286,300,
                300,300,300,300,300,300,300,320,350,350,350,400, 400,400,400,400,450,467,500,500,500,500,500,500,500,550,550,600,600,600,650,700,700,720]

    '''CODE:'''
&lt;pre&gt;
Estimates = [1000,1010,1786,2000,1500,1500,100,120,150,150,150,170,175,180,197,200,200,200,200,200,200,220,220,220,220,234,250,250,250,250,250,250,250,250,250,263,270,275,275,286,300,                300,300,300,300,300,300,300,320,350,350,350,400,400,400,400,400,450,467,500,500,500,500,500,500,500,550,550,600,600,600,650,700,700,720]
Estimates.sort()
offset = int(0.10*len(Estimates))
for i in range(offset):
       del Estimates[0]
       del Estimates[-1]
Sum = 0    
for i in range(len(Estimates)):
       Sum += Estimates[i]
Mean_Value = Sum/len(Estimates)
print(&quot;Mean : &quot;, int(Mean_Value))
#Output:
Mean :  351
&lt;/pre&gt;
&lt;hr&gt;
==Trimmed Mean for the above example== 
&lt;h3&gt;Using scipy library&lt;/h3&gt;
&lt;pre&gt;
#import scipy to use the method of trim_mean
from scipy import stats
trimMean = stats.trim_mean(Estimates, 0.1) # Trim 10% at both ends
print(&quot;Trimmed Mean : &quot;,trimMean)
#Output:
Trimmed Mean :  335.1020408163265
&lt;/pre&gt;

&lt;h3&gt;Without using scipy library&lt;/h3&gt;
&lt;pre&gt;
#Trimmed mean with 10%
p=10/100
#sorted data
data=[2, 4, 6, 7, 11, 21, 81, 90, 105, 121]
n = len(data)
#Remove elements from both end
rem=int(n*p)
newData = data[rem:-rem]
mean = 0
for i in newData:
    mean += i
mean = int(mean/len(newData))
print(&quot;Trimmed mean : &quot;,mean)
#Output: Trimmed mean :  40
&lt;/pre&gt;
[[#Top]]

=Jumbled_Words Permutations: Jumbled Words=
==What are Permutations ?==
A permutation also called ordering of selected number of elements from a list denoted by nPr here we are choosing all elements of a list and so n=r&lt;br&gt;
nPr=n!/(n-r)!&lt;br&gt; as n=r
nPn=n!&lt;br&gt; which gives all possible arrangement of elements present in a list.

 For example, permutations of list [1,2,3] are [1,2,3], [1,3,2], [2,1,3], [2,3,1], 
[3,1,2], and [3,2,1]. 
The number of permutations of a list of elements nPn is given by n!. For example, there are 2! = 2 x 1 = 2 permutations of [1,2], namely [1,2] and [2,1], and 3! = 3 x 2 x 1 = 6 permutations of [1,2,3], as mentioned above.&lt;br/&gt;
[[File:Permutations.jpg]]

==Implementation==
 &lt;p style=&quot;text-align:justify&quot;&gt;
Here, we try to demonstrate the concept of permutations through jumbled words. It is a two player game in which one person presents the other person a different permutation of the word in his mind. The other person has to guess the right word. If he guesses, the he wins otherwise he loses.&lt;/p&gt;
 Input an list of words.
 Randomly pick a word from the list of words .
 Shuffle this word and present it to the other player.
 if word guesses by the player is same as the one picked from list of w
     player wins
 else
     player loses

ALTERNATE CODE TO GENERATE THIS GAME:
&lt;pre&gt;
import random
p1=input(&quot;enter player 1 name:&quot;)
p2=input(&quot;enter player 2 name:&quot;)
l=[&quot;rainbow&quot;,&quot;computer&quot;,&quot;robot&quot;,&quot;butter&quot;,&quot;vegetable&quot;,&quot;science&quot;,&quot;correct&quot;]
c1=c2=a1=a2=f1=f2=0
k=1
i=3
def play():
    n=random.choice(l)        ##n=chooses a word from list l
    l1=[]
    for j in n:
       l1.append(j)      ##creates a list for word in n
    for t in range(len(l1)):
       p=random.choice(l1)     ##this randomly displays letters in the list
       print(p)
       l1.remove(p)          ##to avoid the repetition of a letter
    s=input(&quot;enter the word:&quot;)
    if(s==n):
        print(&quot;correct&quot;)
        return 1
    else:
        print(&quot;not correct&quot;)
        print(&quot;answer is&quot;,n)
        return 0
def stat():
     print(&quot;player 1:&quot;)
     print(&quot;score:&quot;,c1)
     print(&quot;answered:&quot;,a1)
     print(&quot;failed:&quot;,f1)
     print(&quot;.............&quot;)
     print(&quot;player 2:&quot;)
     print(&quot;score:&quot;,c2)
     print(&quot;answered:&quot;,a2)
     print(&quot;failed&quot;,f2)
     if(c1&gt;c2):
         print(p1,&quot; won over &quot;,p2)
     elif(c1==c2):
         print(&quot;draw game&quot;)
     else:
         print(p2,&quot; won over &quot;,p1) 
while(i!=4):
      if(i==3):
         if(k==1):
             print(&quot;player 1 turn&quot;)
             print(&quot;your jumbled word is:&quot;)
             k=k+1
             m=play()
             if(m==1):      ##if guessed answer is correct,then score and no.of answered count will be increased
                c1+=1
                a1+=1
             else:
                f1+=1       ##else count of no.of failed to answered will be incremented
         else:
             print(&quot;player 2 turn&quot;)
             print(&quot;your jumbled word is:&quot;)
             k=k-1
             m=play()
             if(m==1):
                c2=c2+1
                a2=a2+1
             else:
                f2=f2+1
       if(i==2):
             print(&quot;present status&quot;)
             stat()
       i=int(input(&quot;enter your choice  1.stop 2.status 3.continue&quot;))
       if(i==1):
             stat()
             i=i+3
&lt;/pre&gt;
&lt;hr&gt;

[[#Top]]

=== JumbledWord Simple Logic, In Short ===
[[File:jumbledWord.gif]]
---
&lt;hr&gt;
'''Logic to create a Jumbled Word'''
&lt;hr&gt;
&lt;pre&gt;
#Get Jumbled Word and print it Horizontally
import random

def getJumbledWord(b):
    jumble=''
    l1 = [ b[i] for i in range(0, len(b)) ]
    for t in range(len(l1)):
       p=random.choice(l1)  #this randomly gets letters from the list      
       jumble=jumble+p       
       l1.remove(p)
    return jumble

b=input(&quot;Enter a word to make it jumbled : &quot;)
print(&quot;Jumbled Word : &quot;, getJumbledWord(b))
&lt;/pre&gt;
&lt;pre&gt;
Output:
Enter a word to make it jumbled : live and let live others
Jumbled Word :  vel  toldeisrte aihv len
==========================================
Enter a word to make it jumbled : junkfood
Jumbled Word :  nfukdooj
&lt;/pre&gt;
&lt;hr&gt;
'''Another Logic to create a Jumbled Word'''
&lt;hr&gt;
&lt;pre&gt;
import random
b=input(&quot;Enter a word to make it jumbled : &quot;)

def getJumbledWord1(b):
    l1 = [ b[i] for i in range(0, len(b)) ]
    random.shuffle(l1)
    str1 = ''.join(l1)
    return str1

print(&quot;Jumbled Word : &quot;, getJumbledWord1(b))
&lt;/pre&gt;

====Sample Output:====
&lt;pre&gt;
---- Output1 
Enter a word to make it jumbled : butter
Jumbled Word :  tbture

---- Output2 
Enter a word to make it jumbled : petriotism
Jumbled Word :  pittrosime
&lt;/pre&gt;

=Theory of Evolution=

== What is Evolution ? ==
Evolution is the change in heritable characteristics over successive generations. The theory of evolution explains that DNA, which acts as a carrier of genetic information from one generation to other, tends to change or mutate occasionally. These changes are reflected in next generations to come. This is how life has evolved on earth from bacteria to human beings.&lt;br&gt;
[[File:Evolution.png|500px]]

== Implementation ==
 &lt;p style=&quot;text-align:justify&quot;&gt;
An array representing DNA is stored in a file. As genes are forms of DNA, they contain information to be transferred to forthcoming generations. Assume that information is in the form of bits (in the form of 0s and 1s). A number is picked randomly from 1 to the size of the array. A new parameter has been introduced which decides whether mutation would occur or not. If the value of this new parameter is 1 (It is picked randomly from 1 to 100), then only change is reflected down the generations, otherwise it is not. The pseudo code is as follows :
&lt;/p&gt;
Input an array containing genetic information .
Randomly generate a number (say m) from 1 to length of the array. Randomly generate other number (say p) from 1 to 100.

&lt;pre&gt; 
    if p is equal to 1 then 
        if m is 1 then
          set it to 0
        else
          set it to 1
&lt;/pre&gt;
[[#Top]]</text>
      <sha1>etnce8zqv2u8bpopxjjgo04dk74gk1x</sha1>
    </revision>
    <revision>
      <id>4578</id>
      <parentid>4540</parentid>
      <timestamp>2018-10-27T06:04:42Z</timestamp>
      <contributor>
        <username>Balakrishna</username>
        <id>3073</id>
      </contributor>
      <comment>/* Operations and Methods to work with List */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="31645">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_3 Contributors of this page]
*Week 3 Playlist: https://www.youtube.com/playlist?list=PLc_j0TNIaWxOVx_z9jAM2UB3RqYNXaoEo
=List=
List is a flexible data structure used for storing a group of data separated by comma. The elements in a list need not be of the same data type.

'''Example:'''
       List_1 = [ 1, 2,3] or 
       List_1 = [&quot;coffee&quot;, &quot;Tea&quot;, &quot;Milk&quot;] or
       List_1 = [1,&quot;coffee&quot;, &quot;Tea&quot;, 3, &quot;5&quot;]

==List Creation==
a) A list can be created by simply putting values (separated by comma) between square
 brackets as given below,
&lt;pre&gt;List_1 = [1,&quot;coffee&quot;, &quot;Tea&quot;, 3, &quot;5&quot;] #this creates a list by name List_1 containing
 following items
&lt;/pre&gt;


Or,
(b)A List can be created from scratch and elements can be added 
&lt;pre&gt;
        List_2 = [ ]
        List_2.append(&quot;Kala&quot;)
        List_2.append(&quot;Mala&quot;)
&lt;/pre&gt;
Here we use &quot;append&quot;, which is a function in python that enable us to append or attach an element to a list .
&lt;pre&gt;Thus List_2 will now hold [&quot;Kala&quot;,&quot;Mala&quot;]&lt;/pre&gt;

[[#Top]]

==Operations and Methods to work with List==
&lt;pre&gt;
a = [25,30,50,90,12,13]
b = [100,300,500,200,250]
&lt;/pre&gt;
&lt;hr&gt;
&lt;table border=2&gt;
  &lt;tr&gt;
    &lt;th&gt;&lt;b&gt;Method/&lt;br&gt;Operator&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Function&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Syntax&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Output&lt;/b&gt;&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;len()&lt;/td&gt;
    &lt;td&gt;Find length of a list&lt;/td&gt;
    &lt;td&gt;len(a)&lt;/td&gt;
    &lt;td&gt;6&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;max()&lt;/td&gt;
    &lt;td&gt;Find maximum element from the list&lt;/td&gt;
    &lt;td&gt;max(a)&lt;/td&gt;
    &lt;td&gt;90&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;min()&lt;/td&gt;
    &lt;td&gt;Find minimum element from the list&lt;/td&gt;
    &lt;td&gt;min(a)&lt;/td&gt;
    &lt;td&gt;12&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sum()&lt;/td&gt;
    &lt;td&gt;Returns sum of all elements of the list&lt;/td&gt;
    &lt;td&gt;sum(a)&lt;/td&gt;
    &lt;td&gt;220&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;reverse()&lt;/td&gt;
    &lt;td&gt;Reverses the original list&lt;/td&gt;
    &lt;td&gt;a.reverse()&lt;/td&gt;
    &lt;td&gt;[13, 12, 90, 50, 30, 25]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sort()&lt;/td&gt;
    &lt;td&gt;Sorts the original list in ascending order&lt;/td&gt;
    &lt;td&gt;a.sort()&lt;/td&gt;
    &lt;td&gt;[12, 13, 25, 30, 50, 90]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sorted()&lt;/td&gt;
    &lt;td&gt;Returns the new sorted list &lt;/td&gt;
    &lt;td&gt;sorted(a)&lt;/td&gt;
    &lt;td&gt;[12, 13, 25, 30, 50, 90]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;insert()&lt;/td&gt;
    &lt;td&gt;Insert at a particular index in the list, and shifts remaining elements&lt;/td&gt;
    &lt;td&gt;a.insert(3,6)&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 6, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;append()&lt;/td&gt;
    &lt;td&gt;Adds elements/object to the end of the list&lt;/td&gt;
    &lt;td&gt;a.append(5)&lt;br&gt;a.append([10,20])&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 5]&lt;br&gt;[25, 30, 50, 90, 12, 13, [10, 20]]&lt;br&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;extend()&lt;/td&gt;
    &lt;td&gt;Adds object to the end of the list as elements not as object&lt;/td&gt;
    &lt;td&gt;a.extend([10,20])&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 10, 20]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;*&amp;nbsp;&amp;nbsp;Repeatation&lt;br&gt;operator&lt;/td&gt;
    &lt;td&gt;Repeat the list for n times and returns a new list&lt;/td&gt;
    &lt;td&gt;a*2&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 25, 30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;+ Concatenation&lt;br&gt;operator&lt;/td&gt;
    &lt;td&gt;Concatenates two lists, and returns a new list&lt;/td&gt;
    &lt;td&gt;a+b&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 100, 300, 500, 200, 250]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;index()&lt;/td&gt;
    &lt;td&gt;Finds index of a particular element in the list or not&lt;/td&gt;
    &lt;td&gt;a.index(25)&lt;br&gt;a.index(0)&lt;br&gt;&lt;/td&gt;
    &lt;td&gt;0&lt;br&gt;&lt;br&gt;ValueError: 0 is not in list&lt;br&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;in operator&lt;/td&gt;
    &lt;td&gt;Finds whether a particular element is in the list or not, returns boolean&lt;/td&gt;
    &lt;td&gt;25 in a&lt;/td&gt;
    &lt;td&gt;True&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;not in operator&lt;/td&gt;
    &lt;td&gt;Checks if element is not available in list, returns boolean&lt;/td&gt;
    &lt;td&gt;25 not in a&lt;/td&gt;
    &lt;td&gt;False&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;count()&lt;/td&gt;
    &lt;td&gt;Counts the number of occurence of an element in the list&lt;/td&gt;
    &lt;td&gt;a.count(25)&lt;/td&gt;
    &lt;td&gt;1&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;remove()&lt;/td&gt;
    &lt;td&gt;Removes an element from the list&lt;/td&gt;
    &lt;td&gt;a.remove(25)&lt;/td&gt;
    &lt;td&gt; [30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;pop()&lt;/td&gt;
    &lt;td&gt;Deletes and returns the last item&lt;/td&gt;
    &lt;td&gt;a.pop(0)&lt;/td&gt;
    &lt;td&gt;25 , a will be [30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;del&lt;/td&gt;
    &lt;td&gt;Deletes item at a particular index from the list&lt;/td&gt;
    &lt;td&gt;del a[0]&lt;/td&gt;
    &lt;td&gt;[30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;all()&lt;/td&gt;
&lt;td&gt;Returns True, if all items in list are True or it is an empty list&lt;/td&gt;
&lt;td&gt;all([True, True, True])
all([])
&lt;/td&gt;
&lt;td&gt;True&lt;br&gt;
True&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;any()&lt;/td&gt;
&lt;td&gt;Returns True, if any item in list is True else return False&lt;/td&gt;
&lt;td&gt;any([True, True, True])&lt;br&gt;
any([True, False, True])&lt;br&gt;
any([])&lt;/td&gt;
&lt;td&gt;True&lt;br&gt;True&lt;br&gt;False&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;

==Printing the List==
=== Print whole list ===
A list can be printed simply or using a ''for / while'' loop 

 print(List_2)     # To print the entire list
This code will print      
 ['Kala','Mala']     

===Print element at a particular index===
&lt;pre&gt;
Using index position
    List_2[0]     # prints 'Kala' ,i.e,the value at index position 0.
    List_2[1]     # prints 'Mala'.
&lt;/pre&gt;
=== Without using index position ===
&lt;pre&gt;
for item in List_2:   # here item is a variable used to access elements in list.
       print(item)
   This code snippet prints 
    Kala
    Mala
&lt;/pre&gt;
[[#Top]]

==Search for a particular element in list==
Elements in a list can be searched by one of the two ways:
=== using index() function===
&lt;pre&gt;
ages1 = [11,23,12,23,45]

#if element is available in the list, index() returns the index value on which, the element is
 present.
print(ages1.index(45))#Output: 4

#if element is not available in the list, index() returns ''ValueError''
print(ages1.index(0))#Output: ValueError:
&lt;/pre&gt;

In programming, if such error occurs, program gets terminated. It can be solved using exception handling.
 
e.g.
&lt;pre&gt;
ages1 = [11,23,12,23,45]

try:
    print(ages1.index(0))
except ValueError:
    print(&quot;Exception has occured&quot;)    
    print(&quot;Element is not found in the list&quot;)

&lt;/pre&gt;
&lt;pre&gt;
'''Output: 
Exception has occured
Element is not found in the list
'''&lt;/pre&gt;
[[#Top]]

=== using 'in' operator===
''in'' operator is used to check whether a particular element is available in the list or not.e.g.

&lt;pre&gt;
ages1 = [11,23,12,23,45]
no=11

if no in ages1:
    print(&quot;no is there in the list&quot;)
else:    
    print(&quot;no is NOT there in the list&quot;)
&lt;/pre&gt;
&lt;pre&gt;
#Output: no is there in the list
&lt;/pre&gt;


'''Number is not there in the list'''
&lt;pre&gt;
ages1 = [11,23,12,23,45]
no=15

if no in ages1:
    print(&quot;no is there in the list&quot;)
else:    
    print(&quot;no is NOT there in the list&quot;)
&lt;/pre&gt;
&lt;pre&gt;
Output: no is NOT there in the list
&lt;/pre&gt;
[[#Top]]

==Updating the List==
The lists can be updated using ''append'' or ''insert'' function.  Append adds the element to the end of the list and Insert adds the element in the specified position.
&lt;pre&gt;
   # add the element 'Sheela' to the end of the list.
   List_2.append(&quot;Sheela&quot;)    
   print (List_2) will output 
   ['Kala', 'Mala', 'Sheela']
&lt;/pre&gt;
   &lt;pre&gt;
# add the element &quot;Bala&quot; in the list at the index 1.
   List_2.insert(1,&quot;Bala&quot;)    
   print (List_2) will output 
   ['Kala', 'Bala','Mala', 'Sheela']
&lt;/pre&gt;

=== Extend the list by adding elements of other list at end using extend()===
&lt;pre&gt;
ages = [11,23,12,23,45]
ages.extend([57,58])
print(ages)
&lt;/pre&gt;

&lt;pre&gt;
#Output: [11, 23, 12, 23, 45, 57, 58]
&lt;/pre&gt;

==== Difference between ''append() and extend()'' ====
Difference between ''append()'' and ''extend()'' can be easily understood, by the following example.

&lt;pre&gt;
appendlist = [11,23,12,23,45]
appendlist.append([57,58])

extendlist= [11,23,12,23,45]
extendlist.extend([57,58])
&lt;/pre&gt;

&lt;pre&gt;
'''Output:
[11, 23, 12, 23, 45, [57, 58]]
[11, 23, 12, 23, 45, 57, 58]'''
&lt;/pre&gt;

[[#Top]]

==Basic Operations on List==
===Frequency of Occurrence===
list.count(object) will return the number of times the object occur in the list.
  '''Example'''
    ages = [11,23,12,23,45,43,22,24,23]
    ages.count(23) will return
    3
    ages.count(100) will return
    0

===Length of the List===
''len(list)'' will return the length of the list ie. the number of objects in the list.
  '''Example'''
&lt;pre&gt;
    ages = [11,23,12,23,45,43,22,24,23]
    len(ages) # Output: 9
&lt;/pre&gt;

To print the objects in the list either use ''for item in list'' or ''for index in range(len(list))''
&lt;pre&gt;
    for item in ages:       
        print (item)  
        (OR)
    for index in range(len(ages)) :
        print (ages[index])
&lt;/pre&gt;

===Sort the List===
''list.sort()'' will sort the list in ascending order
  '''Example'''
    ages = [11,23,12,23,45,43,22,24,23]
    ages.sort() 
    print (ages) 
    [11, 12, 22, 23, 23, 23, 24, 43, 45]

[[#Top]]

===Sort the List using sorted() function===
''sorted(list1)'' will sort the list and return a new list, it doesn't modify the original list
&lt;br&gt;'''Example: Sort in ascending order'''
&lt;pre&gt;
ages = [11,23,12,23,45,43,22,24,23]
newList=sorted(ages)
print(newList)

#Output: [11, 12, 22, 23, 23, 23, 24, 43, 45]
&lt;/pre&gt;

&lt;br&gt;'''Example: Sort in descending order'''
&lt;pre&gt;
ages = [11,23,12,23,45,43,22,24,23]
newList=sorted(ages,reverse=True)
print(newList)

#Output: [45, 43, 24, 23, 23, 23, 22, 12, 11]
&lt;/pre&gt;

===Reverse the List===
''list.reverse()'' will reverse the original list
  '''Example'''
    ages = [11, 12, 22, 23, 23, 23, 24, 43, 45]
    ages.reverse()
    print (ages)
    [45, 43, 24, 23, 23, 23, 22, 12, 11]

Both ''sort()'' and ''reverse()'' list operation will work on numeric and alphanumeric data list.

A special use of the ''reverse()'' function is to descend a list that is sorted in ascending order.

  '''Example'''
&lt;pre&gt;
ages = [11, 12, 22, 23, 23, 23, 24, 43, 45]
ages.sort()
print(ages)
ages.reverse()
print(ages)
&lt;/pre&gt;

[[#Top]]

===Slicing===
Used to retrieve an object or objects in a range as a list  
  '''Example'''

Use ''list[index]'' to retrieve the object at the given index
&lt;pre&gt;
In [1]: student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
In [2]: student[3]     #Object at index 3.  Remember index starts at 0
Out[2]: 'Geetha'      
&lt;/pre&gt;

Use ''list[start_index : end_index + 1]'' to retrieve objects from the start_index to end_index 
&lt;pre&gt;
In [3]: student[2:4]     # Objects from index 2 to 3 as List. Note the [ and ]
Out[3]: ['Vijay', 'Geetha']   
&lt;/pre&gt;

Use ''list[:]'' to retrieve objects from the starting of the list to the end of the list. 
The default start value will be the starting index of the list (i.e. 0) and the default end value
will be the length of the list 
&lt;pre&gt;
In [4]: student[:]        # prints the entire list
Out[4]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma', 'Janani']
&lt;/pre&gt;
&lt;pre&gt;
In [5]: student[:5]       # prints the objects from the start of the list upto object at index 4
Out[5]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran']
&lt;/pre&gt;
&lt;pre&gt;
In [6]: student[2:]       # prints the objects from index 2 upto the end of the list
Out[6]: ['Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma', 'Janani']
&lt;/pre&gt;

Negative index too is available in Python. It starts from last element of the list. i.e.
&lt;pre&gt;
In [7]:student[-1]        #prints last index of list
Out[7]: 'Janani'
&lt;/pre&gt;
&lt;pre&gt;
In [8]:student[-1:-8]     #prints empty list
Out[8]: []
&lt;/pre&gt;
&lt;pre&gt;
In [9]:student[-8:-1]     #prints -8th index to -1st index elements
Out[9]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma']
&lt;/pre&gt;

[[#Top]]

===Removing Item from list ===
----

Is used to remove a specific item from the list.

'''Example:'''
 
Use list.remove(entry/value)  Or   del list[index]    Or list.pop(index)
&lt;pre&gt;
student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
student.remove(&quot;Arun&quot;)   #This will delete item &quot;Arun&quot;
         Or    
del student[0]           # This will delete item at index 0
         Or
student.pop(0)         # This will delete and return item at index 0
print(student)    
Output: &quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
&lt;/pre&gt;

[[#Top]]

===Delete list ===
----
Used to delete complete list

'''Example'''

Use del &lt;list name&gt;
&lt;pre&gt;
student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
del student&lt;/pre&gt;

===Concatenation of two lists===
----
''+'' is the concatenation operator which is used concatenate two lists. 
&lt;pre&gt;
ages1 = [11,23,12,23,45]
ages2 = [25, 24, 43, 47]
age=ages1+ages2
print(age)
#Output: [11, 23, 12, 23, 45, 25, 24, 43, 47]
&lt;/pre&gt;

===Repeatation of a list ===
----
''*'' is the operator to repeat a particular list.
&lt;pre&gt;
ages1 = [11,23,12,23,45]
age=ages1*5 #ages1 list is repeated 5 times and stroed in ''age'' list
print(age)

#Output: [11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45]
&lt;/pre&gt;

=== all and any for List===
all() and any() are special functions to check whether all elements in iterable is ''True'' or any element is ''True''
&lt;ol&gt;
&lt;li&gt;If all elements in a list are ''True'', ''all()'' will return ''True''&lt;/li&gt;
&lt;li&gt;If iterable is ''empty'', ''all()'' will return ''True''&lt;/li&gt;
&lt;li&gt;If iterable contains at least one ''True'', ''any()'' will return ''True''&lt;/li&gt;
&lt;li&gt;If iterable is ''empty'', ''any()'' will return ''False''&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;
lsit=[True, True, True, True]
print(all(lsit))#Output: True
print(any(lsit))#Output: True

lsit1=[True, False, True, True]
print(all(lsit1))#Output: False
print(any(lsit1))#Output: True

lsit2=[False,False,False]
print(all(lsit2))#Output: False
print(any(lsit2))#Output: False

lsit3=[]
print(all(lsit3))#Output: True
print(any(lsit3))#Output: False
&lt;/pre&gt;

==Conditional Statements==
Conditionals are used to check the condition and change the flow of the program 
accordingly. They are realized in programming languages through if statement. The 
syntax is as follows :
&lt;pre&gt;
         if condition : 
            statement
&lt;/pre&gt;
    '''Note:''' Do not forget indentation (inserting space/tab) in the line after the
 if condition.
    
    In case you want to execute a set of statements when a condition is true and another

set of statement when the condition is false.
&lt;pre&gt;
         if condition : 
            statement 1
         else :
            statement 2
&lt;/pre&gt;

&lt;pre&gt;    
    Multiple if-else statements can be written as follows:
         if condition_1 : 
            statement 1
         elif condition_2 : # 'elif' is short for 'else if'
            statement 2
         elif condition_3 :
            statement 3
        .
        .
         else :
            final statement
&lt;/pre&gt;

[[#Top]]

=Loops and Conditionals : Fizzbuzz=
====Loops====
Loops are used to execute a set of repetitive statements. They are realised
through 'while' and 'for' loops in programming languages. The syntax of 'for' loop is 
as follows :
&lt;pre&gt;
for LOOPVARIABLE in SEQUENCE: 
            STATEMENTS&lt;/pre&gt;

    '''e.g.''' to print all the data from a list we can write:
&lt;pre&gt;
for item in list_name:
      print(item)&lt;/pre&gt;
    OR
&lt;pre&gt;
for index in range(len(list_name)):
      print(list_name[index])
 &lt;/pre&gt;   
    The syntax for while loop is as follows :
&lt;pre&gt;    
while BOOLEANEXPRESSION: 
     STATEMENTS
     INCREMENT/DECREMENT
&lt;/pre&gt;    
    '''e.g.''' if we want to print all numbers from 1 to 10
&lt;pre&gt;
i=1
while i&lt;=10 :
    print(i,&quot; &quot;)
    i=i+1
    &lt;/pre&gt;
 
'while' loop has indefinite iteration (run-time unknown). So, there must be loop,  break statement in it.
 Whereas 'for' loop is definite in nature (i.e. known or predictable span).&lt;br&gt;

&lt;b&gt;NOTE: Python doesn't have anything like do-while loop.&lt;/b&gt;

[[#Top]]

==Implementation==
Here, we try to demonstrate the concept of loops and conditionals through a game called Fizzbuzz. The rules are as follows :&lt;br/&gt;
[[File:fizzBuzz.gif]]

• if input number is a multiple of ’3’ print ”Fizz”
&lt;br/&gt;
• if input number is a multiple of ’5’ print ”Buzz”
&lt;br/&gt;
• if input number is a multiple of both '3' and ’5’ print ”FizzBuzz”
&lt;br/&gt;
The pseudo code is as follows :
&lt;pre&gt;
   If input no % 3 == 0 and  input no % 5 == 0 : 
       print ”Fizzbuzz”
   else if input no % 3 == 0 : 
       print ”Fizz”
   else if input no % 5 == 0 : 
       print ”Buzz”
   else :
       print the input no
&lt;/pre&gt;
 &lt;p style=&quot;text-align:justify&quot;&gt;
The order of statements execution matters to get the desired output. The highest priority condition should be first followed by other. In fizzbuzz programming, first checking should be done for both divisibility of 3 and 5. If condition not satisfied only then it should check individually for 3 or 5. So carefully choosing the order is crucial for better programming.
Note: There is some effect of present condition statements chosen on next conditions statements. That is why in first attempt fizzbuzz programming got struck.&lt;/p&gt;

Example: 
&lt;pre&gt;
#Code to achieve the above requirement in python3.
i = int(input(&quot;Enter the number&quot;)) 
if i%3 == 0 and i%5 == 0: print(i,&quot;FizzBuzz&quot;)  
elif i%5 == 0: print(i,&quot;Buzz&quot;)
elif i%3 == 0: print(i,&quot;Fizz&quot;)
else: print(i)
&lt;/pre&gt;
Lets put the same into a loop for a range given by the user.
&lt;pre&gt;
def fizzbuzzgame(start,stop):
    for i in range(start,stop+1):
        if i%3 == 0 and i%5 == 0:
            print(i,&quot;FizzBuzz&quot;)
        elif i%5 == 0:
            print(i,&quot;Buzz&quot;)
        elif i%3 == 0:
            print(i,&quot;Fizz&quot;)
        else: print(i)

fizzbuzzgame(50,100)
&lt;/pre&gt;
&lt;pre&gt;
#Output:
1235
Buzz
======================================
555
Fizzbuzz
======================================
1235
Buzz
======================================
999
Fizz
&lt;/pre&gt;

[[#Top]]

=== Fizz Buzz game in Interactive mode with Score ===
'''By Ms. Ami Tusharkant Choksi'''
&lt;pre&gt;
def fizzbuzzgame(i):
        if i%3 == 0 and i%5 == 0:
            print(i,&quot;FizzBuzz&quot;)
            return(&quot;fzbz&quot;)
        elif i%5 == 0:
            print(i,&quot;Buzz&quot;)
            return(&quot;bz&quot;)
        elif i%3 == 0:
            print(i,&quot;Fizz&quot;)
            return(&quot;fz&quot;)
        else:
            print(i)
            return(&quot;no&quot;)

ch = 'y'
fizzbuzz=0
fizz=0
buzz=0
nothing=0
print(&quot;&quot;&quot;

 /$$$$$$$$/$$                  /$$$$$$$                            
| $$_____|__/                 | $$__  $$                           
| $$      /$$/$$$$$$$$/$$$$$$$| $$  \ $$/$$   /$$/$$$$$$$$/$$$$$$$$
| $$$$$  | $|____ /$$|____ /$$| $$$$$$$| $$  | $|____ /$$|____ /$$/
| $$__/  | $$  /$$$$/   /$$$$/| $$__  $| $$  | $$  /$$$$/   /$$$$/ 
| $$     | $$ /$$__/   /$$__/ | $$  \ $| $$  | $$ /$$__/   /$$__/  
| $$     | $$/$$$$$$$$/$$$$$$$| $$$$$$$|  $$$$$$//$$$$$$$$/$$$$$$$$
|__/     |__|________|________|_______/ \______/|________|________/
                                                                  
&quot;&quot;&quot;)   
print('''

  /$$$$$$                                
 /$$__  $$                               
| $$  \__/ /$$$$$$ /$$$$$$/$$$$  /$$$$$$ 
| $$ /$$$$|____  $| $$_  $$_  $$/$$__  $$
| $$|_  $$ /$$$$$$| $$ \ $$ \ $| $$$$$$$$
| $$  \ $$/$$__  $| $$ | $$ | $| $$_____/
|  $$$$$$|  $$$$$$| $$ | $$ | $|  $$$$$$$
 \______/ \_______|__/ |__/ |__/\_______/
                                     
''')

while(ch == 'y'):
    n=int(input(&quot;Enter a Number : &quot;))
    winLoose=fizzbuzzgame(n)
    if(winLoose == &quot;fz&quot;):
        fizz+=1
    elif(winLoose == &quot;bz&quot;):
        buzz+=1
    elif(winLoose == &quot;fzbz&quot;):
        fizzbuzz+=1
    ch=input(&quot;Do you want to continue playing the game : (y/n)&quot;)
    if(ch=='n'):
        print('Congratulations, your score is\n FizzBuzz:%d\nFizz:%d\nBuzz:%d' %
(fizzbuzz,fizz,buzz))
    
'''Sample Output:

 /$$$$$$$$/$$                  /$$$$$$$                            
| $$_____|__/                 | $$__  $$                           
| $$      /$$/$$$$$$$$/$$$$$$$| $$  \ $$/$$   /$$/$$$$$$$$/$$$$$$$$
| $$$$$  | $|____ /$$|____ /$$| $$$$$$$| $$  | $|____ /$$|____ /$$/
| $$__/  | $$  /$$$$/   /$$$$/| $$__  $| $$  | $$  /$$$$/   /$$$$/ 
| $$     | $$ /$$__/   /$$__/ | $$  \ $| $$  | $$ /$$__/   /$$__/  
| $$     | $$/$$$$$$$$/$$$$$$$| $$$$$$$|  $$$$$$//$$$$$$$$/$$$$$$$$
|__/     |__|________|________|_______/ \______/|________|________/
                                                                                                                                   

  /$$$$$$                                
 /$$__  $$                               
| $$  \__/ /$$$$$$ /$$$$$$/$$$$  /$$$$$$ 
| $$ /$$$$|____  $| $$_  $$_  $$/$$__  $$
| $$|_  $$ /$$$$$$| $$ \ $$ \ $| $$$$$$$$
| $$  \ $$/$$__  $| $$ | $$ | $| $$_____/
|  $$$$$$|  $$$$$$| $$ | $$ | $|  $$$$$$$
 \______/ \_______|__/ |__/ |__/\_______/
                                         

Enter a Number : 666
666 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 777
777 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 555
555 FizzBuzz
Do you want to continue playing the game : (y/n)y
Enter a Number : 1
1
Do you want to continue playing the game : (y/n)y
Enter a Number : 789
789 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 25
25 Buzz
Do you want to continue playing the game : (y/n)n
Congratulations, your score is

FizzBuzz:1
Fizz:3
Buzz:1

&lt;/pre&gt;

[[#Top]]

=Crowd Computing: Just Estimate=

Crowd computing is conceptualised in various ways as being related to crowdsourcing, human computation, social computing, cloud computing and mobile computing. 

Crowd computing has been described in various ways viz. 
&lt;ul&gt;&lt;li&gt;distribution of human intelligence tasks to mobile devices&lt;/li&gt;
&lt;li&gt;cloud computing with humans&lt;/li&gt;
&lt;li&gt;human problem solving with large numbers of people using computers&lt;/li&gt;&lt;/ul&gt; 

Broadly, crowed computing is a set of human interaction tools for idea exchange and non-hierarchical decision making. 

Four common characteristics are used to identify the term: 
&lt;ol&gt;
&lt;li&gt;participation by a crowd of humans&lt;/li&gt;
&lt;li&gt;interaction with computing technology&lt;/li&gt;
&lt;li&gt;activity that is predetermined by the initiator or application itself&lt;/li&gt;
&lt;li&gt;the execution of tasks by the crowd utilising innate human capabilities.&lt;/li&gt;
&lt;/ol&gt;

==Wisdom of Crowds==
 &lt;p style=&quot;text-align:justify&quot;&gt;
The concept of ’Wisdom of Crowds’ was proposed by ''Francis Galton''. A weight-judging competition was carried on at the annual show of the West of England Fat Stock and Poultry Exhibition recently held at Plymouth, A fat ox having been selected, competitors bought stamped and numbered cards, each, on which to inscribe their respective names, addresses, and estimates of what the ox would weigh after it had been slaughtered. Those who guessed most successfully received prizes. About 8oo tickets were issued to the par- ticipants. The middlemost estimate of all the estimates recorded was 1207 lbs and the actual weight of the ox was 1198 lbs.&lt;/p&gt;

==Our Experiment==
 &lt;p style=&quot;text-align:justify&quot;&gt;
The crowd had to guess the number of candies/gems in a jar. Around 75 people participated in the experiment. The actual number of gems in the jar were 375. The median of all estimates came out to be 300 and the mean of all the estimates came out to be around 396. Median underestimated and mean overestimated the actual value. So according to recent studies, Trimmed mean must be used as an aggregate measure to estimate where Wisdom of Crowds is involved.
&lt;/p&gt;
[[File:Gemsjar.jpg|center|200px|caption]]

===Trimmed Mean===
 &lt;p style=&quot;text-align:justify&quot;&gt;
In these kinds of experiments, 10% trimmed mean is usually followed. For calculating 10% trimmed mean, remove 10% smallest and 10% largest values from the sample. Calculate the mean of the sample obtained. In the above experiment, the trimmed mean came out to be around 351 which is very close to the actual value.&lt;/p&gt;

==Implementation==
Here, we try to demonstrate the concept of trimmed mean through crowd computing.
&lt;ol&gt;
&lt;li&gt; Input a list of estimates done by the crowd .&lt;/li&gt;
&lt;li&gt; Sort the list.&lt;/li&gt;
&lt;li&gt; Remove the 10% smallest values.&lt;/li&gt;
&lt;li&gt; Remove the 10% largest values.
&lt;li&gt; Calculate the mean of the new list obtained .&lt;/li&gt;&lt;/ol&gt;&lt;hr&gt;
[[#Top]]

==Data of Experiment==       
    Estimates =[1000,1010,1786,2000,1500,1500,100,120,150,150,150,170,175,180,197,200,200,200,200,200,200,220,220,220,220,234,250,250,250,250,250,250,250,250,250,263,270,275,275,286,300,
                300,300,300,300,300,300,300,320,350,350,350,400, 400,400,400,400,450,467,500,500,500,500,500,500,500,550,550,600,600,600,650,700,700,720]

    '''CODE:'''
&lt;pre&gt;
Estimates = [1000,1010,1786,2000,1500,1500,100,120,150,150,150,170,175,180,197,200,200,200,200,200,200,220,220,220,220,234,250,250,250,250,250,250,250,250,250,263,270,275,275,286,300,                300,300,300,300,300,300,300,320,350,350,350,400,400,400,400,400,450,467,500,500,500,500,500,500,500,550,550,600,600,600,650,700,700,720]
Estimates.sort()
offset = int(0.10*len(Estimates))
for i in range(offset):
       del Estimates[0]
       del Estimates[-1]
Sum = 0    
for i in range(len(Estimates)):
       Sum += Estimates[i]
Mean_Value = Sum/len(Estimates)
print(&quot;Mean : &quot;, int(Mean_Value))
#Output:
Mean :  351
&lt;/pre&gt;
&lt;hr&gt;
==Trimmed Mean for the above example== 
&lt;h3&gt;Using scipy library&lt;/h3&gt;
&lt;pre&gt;
#import scipy to use the method of trim_mean
from scipy import stats
trimMean = stats.trim_mean(Estimates, 0.1) # Trim 10% at both ends
print(&quot;Trimmed Mean : &quot;,trimMean)
#Output:
Trimmed Mean :  335.1020408163265
&lt;/pre&gt;

&lt;h3&gt;Without using scipy library&lt;/h3&gt;
&lt;pre&gt;
#Trimmed mean with 10%
p=10/100
#sorted data
data=[2, 4, 6, 7, 11, 21, 81, 90, 105, 121]
n = len(data)
#Remove elements from both end
rem=int(n*p)
newData = data[rem:-rem]
mean = 0
for i in newData:
    mean += i
mean = int(mean/len(newData))
print(&quot;Trimmed mean : &quot;,mean)
#Output: Trimmed mean :  40
&lt;/pre&gt;
[[#Top]]

=Jumbled_Words Permutations: Jumbled Words=
==What are Permutations ?==
A permutation also called ordering of selected number of elements from a list denoted by nPr here we are choosing all elements of a list and so n=r&lt;br&gt;
nPr=n!/(n-r)!&lt;br&gt; as n=r
nPn=n!&lt;br&gt; which gives all possible arrangement of elements present in a list.

 For example, permutations of list [1,2,3] are [1,2,3], [1,3,2], [2,1,3], [2,3,1], 
[3,1,2], and [3,2,1]. 
The number of permutations of a list of elements nPn is given by n!. For example, there are 2! = 2 x 1 = 2 permutations of [1,2], namely [1,2] and [2,1], and 3! = 3 x 2 x 1 = 6 permutations of [1,2,3], as mentioned above.&lt;br/&gt;
[[File:Permutations.jpg]]

==Implementation==
 &lt;p style=&quot;text-align:justify&quot;&gt;
Here, we try to demonstrate the concept of permutations through jumbled words. It is a two player game in which one person presents the other person a different permutation of the word in his mind. The other person has to guess the right word. If he guesses, the he wins otherwise he loses.&lt;/p&gt;
 Input an list of words.
 Randomly pick a word from the list of words .
 Shuffle this word and present it to the other player.
 if word guesses by the player is same as the one picked from list of w
     player wins
 else
     player loses

ALTERNATE CODE TO GENERATE THIS GAME:
&lt;pre&gt;
import random
p1=input(&quot;enter player 1 name:&quot;)
p2=input(&quot;enter player 2 name:&quot;)
l=[&quot;rainbow&quot;,&quot;computer&quot;,&quot;robot&quot;,&quot;butter&quot;,&quot;vegetable&quot;,&quot;science&quot;,&quot;correct&quot;]
c1=c2=a1=a2=f1=f2=0
k=1
i=3
def play():
    n=random.choice(l)        ##n=chooses a word from list l
    l1=[]
    for j in n:
       l1.append(j)      ##creates a list for word in n
    for t in range(len(l1)):
       p=random.choice(l1)     ##this randomly displays letters in the list
       print(p)
       l1.remove(p)          ##to avoid the repetition of a letter
    s=input(&quot;enter the word:&quot;)
    if(s==n):
        print(&quot;correct&quot;)
        return 1
    else:
        print(&quot;not correct&quot;)
        print(&quot;answer is&quot;,n)
        return 0
def stat():
     print(&quot;player 1:&quot;)
     print(&quot;score:&quot;,c1)
     print(&quot;answered:&quot;,a1)
     print(&quot;failed:&quot;,f1)
     print(&quot;.............&quot;)
     print(&quot;player 2:&quot;)
     print(&quot;score:&quot;,c2)
     print(&quot;answered:&quot;,a2)
     print(&quot;failed&quot;,f2)
     if(c1&gt;c2):
         print(p1,&quot; won over &quot;,p2)
     elif(c1==c2):
         print(&quot;draw game&quot;)
     else:
         print(p2,&quot; won over &quot;,p1) 
while(i!=4):
      if(i==3):
         if(k==1):
             print(&quot;player 1 turn&quot;)
             print(&quot;your jumbled word is:&quot;)
             k=k+1
             m=play()
             if(m==1):      ##if guessed answer is correct,then score and no.of answered count will be increased
                c1+=1
                a1+=1
             else:
                f1+=1       ##else count of no.of failed to answered will be incremented
         else:
             print(&quot;player 2 turn&quot;)
             print(&quot;your jumbled word is:&quot;)
             k=k-1
             m=play()
             if(m==1):
                c2=c2+1
                a2=a2+1
             else:
                f2=f2+1
       if(i==2):
             print(&quot;present status&quot;)
             stat()
       i=int(input(&quot;enter your choice  1.stop 2.status 3.continue&quot;))
       if(i==1):
             stat()
             i=i+3
&lt;/pre&gt;
&lt;hr&gt;

[[#Top]]

=== JumbledWord Simple Logic, In Short ===
[[File:jumbledWord.gif]]
---
&lt;hr&gt;
'''Logic to create a Jumbled Word'''
&lt;hr&gt;
&lt;pre&gt;
#Get Jumbled Word and print it Horizontally
import random

def getJumbledWord(b):
    jumble=''
    l1 = [ b[i] for i in range(0, len(b)) ]
    for t in range(len(l1)):
       p=random.choice(l1)  #this randomly gets letters from the list      
       jumble=jumble+p       
       l1.remove(p)
    return jumble

b=input(&quot;Enter a word to make it jumbled : &quot;)
print(&quot;Jumbled Word : &quot;, getJumbledWord(b))
&lt;/pre&gt;
&lt;pre&gt;
Output:
Enter a word to make it jumbled : live and let live others
Jumbled Word :  vel  toldeisrte aihv len
==========================================
Enter a word to make it jumbled : junkfood
Jumbled Word :  nfukdooj
&lt;/pre&gt;
&lt;hr&gt;
'''Another Logic to create a Jumbled Word'''
&lt;hr&gt;
&lt;pre&gt;
import random
b=input(&quot;Enter a word to make it jumbled : &quot;)

def getJumbledWord1(b):
    l1 = [ b[i] for i in range(0, len(b)) ]
    random.shuffle(l1)
    str1 = ''.join(l1)
    return str1

print(&quot;Jumbled Word : &quot;, getJumbledWord1(b))
&lt;/pre&gt;

====Sample Output:====
&lt;pre&gt;
---- Output1 
Enter a word to make it jumbled : butter
Jumbled Word :  tbture

---- Output2 
Enter a word to make it jumbled : petriotism
Jumbled Word :  pittrosime
&lt;/pre&gt;

=Theory of Evolution=

== What is Evolution ? ==
Evolution is the change in heritable characteristics over successive generations. The theory of evolution explains that DNA, which acts as a carrier of genetic information from one generation to other, tends to change or mutate occasionally. These changes are reflected in next generations to come. This is how life has evolved on earth from bacteria to human beings.&lt;br&gt;
[[File:Evolution.png|500px]]

== Implementation ==
 &lt;p style=&quot;text-align:justify&quot;&gt;
An array representing DNA is stored in a file. As genes are forms of DNA, they contain information to be transferred to forthcoming generations. Assume that information is in the form of bits (in the form of 0s and 1s). A number is picked randomly from 1 to the size of the array. A new parameter has been introduced which decides whether mutation would occur or not. If the value of this new parameter is 1 (It is picked randomly from 1 to 100), then only change is reflected down the generations, otherwise it is not. The pseudo code is as follows :
&lt;/p&gt;
Input an array containing genetic information .
Randomly generate a number (say m) from 1 to length of the array. Randomly generate other number (say p) from 1 to 100.

&lt;pre&gt; 
    if p is equal to 1 then 
        if m is 1 then
          set it to 0
        else
          set it to 1
&lt;/pre&gt;
[[#Top]]</text>
      <sha1>o2qh4uxk8ccf5wapmwjjscws9ynxiiu</sha1>
    </revision>
    <revision>
      <id>4579</id>
      <parentid>4578</parentid>
      <timestamp>2018-10-27T06:05:32Z</timestamp>
      <contributor>
        <username>Balakrishna</username>
        <id>3073</id>
      </contributor>
      <comment>/* Operations and Methods to work with List */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="31687">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_3 Contributors of this page]
*Week 3 Playlist: https://www.youtube.com/playlist?list=PLc_j0TNIaWxOVx_z9jAM2UB3RqYNXaoEo
=List=
List is a flexible data structure used for storing a group of data separated by comma. The elements in a list need not be of the same data type.

'''Example:'''
       List_1 = [ 1, 2,3] or 
       List_1 = [&quot;coffee&quot;, &quot;Tea&quot;, &quot;Milk&quot;] or
       List_1 = [1,&quot;coffee&quot;, &quot;Tea&quot;, 3, &quot;5&quot;]

==List Creation==
a) A list can be created by simply putting values (separated by comma) between square
 brackets as given below,
&lt;pre&gt;List_1 = [1,&quot;coffee&quot;, &quot;Tea&quot;, 3, &quot;5&quot;] #this creates a list by name List_1 containing
 following items
&lt;/pre&gt;


Or,
(b)A List can be created from scratch and elements can be added 
&lt;pre&gt;
        List_2 = [ ]
        List_2.append(&quot;Kala&quot;)
        List_2.append(&quot;Mala&quot;)
&lt;/pre&gt;
Here we use &quot;append&quot;, which is a function in python that enable us to append or attach an element to a list .
&lt;pre&gt;Thus List_2 will now hold [&quot;Kala&quot;,&quot;Mala&quot;]&lt;/pre&gt;

[[#Top]]

==Operations and Methods to work with List==
&lt;pre&gt;
a = [25,30,50,90,12,13]
b = [100,300,500,200,250]
&lt;/pre&gt;
&lt;hr&gt;
&lt;table border=2&gt;
  &lt;tr&gt;
    &lt;th&gt;&lt;b&gt;Method/&lt;br&gt;Operator&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Function&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Syntax&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Output&lt;/b&gt;&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;len()&lt;/td&gt;
    &lt;td&gt;Find length of a list&lt;/td&gt;
    &lt;td&gt;len(a)&lt;/td&gt;
    &lt;td&gt;6&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;max()&lt;/td&gt;
    &lt;td&gt;Find maximum element from the list&lt;/td&gt;
    &lt;td&gt;max(a)&lt;/td&gt;
    &lt;td&gt;90&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;min()&lt;/td&gt;
    &lt;td&gt;Find minimum element from the list&lt;/td&gt;
    &lt;td&gt;min(a)&lt;/td&gt;
    &lt;td&gt;12&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sum()&lt;/td&gt;
    &lt;td&gt;Returns sum of all elements of the list&lt;/td&gt;
    &lt;td&gt;sum(a)&lt;/td&gt;
    &lt;td&gt;220&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;reverse()&lt;/td&gt;
    &lt;td&gt;Reverses the original list&lt;/td&gt;
    &lt;td&gt;a.reverse()&lt;/td&gt;
    &lt;td&gt;[13, 12, 90, 50, 30, 25]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sort()&lt;/td&gt;
    &lt;td&gt;Sorts the original list in ascending order&lt;/td&gt;
    &lt;td&gt;a.sort()&lt;/td&gt;
    &lt;td&gt;[12, 13, 25, 30, 50, 90]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sorted()&lt;/td&gt;
    &lt;td&gt;Returns the new sorted list &lt;/td&gt;
    &lt;td&gt;sorted(a)&lt;/td&gt;
    &lt;td&gt;[12, 13, 25, 30, 50, 90]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;insert()&lt;/td&gt;
    &lt;td&gt;Insert at a particular index in the list, and shifts remaining elements&lt;/td&gt;
    &lt;td&gt;a.insert(3,6)&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 6, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;append()&lt;/td&gt;
    &lt;td&gt;Adds elements/object to the end of the list&lt;/td&gt;
    &lt;td&gt;a.append(5)&lt;br&gt;a.append([10,20])&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 5]&lt;br&gt;[25, 30, 50, 90, 12, 13, [10, 20]]&lt;br&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;extend()&lt;/td&gt;
    &lt;td&gt;Adds object to the end of the list as elements not as object&lt;/td&gt;
    &lt;td&gt;a.extend([10,20])&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 10, 20]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;*&amp;nbsp;&amp;nbsp;Repeatation&lt;br&gt;operator&lt;/td&gt;
    &lt;td&gt;Repeat the list for n times and returns a new list&lt;/td&gt;
    &lt;td&gt;a*2&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 25, 30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;+ Concatenation&lt;br&gt;operator&lt;/td&gt;
    &lt;td&gt;Concatenates two lists, and returns a new list&lt;/td&gt;
    &lt;td&gt;a+b&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 100, 300, 500, 200, 250]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;index()&lt;/td&gt;
    &lt;td&gt;Finds index of a particular element in the list or not&lt;/td&gt;
    &lt;td&gt;a.index(25)&lt;br&gt;a.index(0)&lt;br&gt;&lt;/td&gt;
    &lt;td&gt;0&lt;br&gt;&lt;br&gt;ValueError: 0 is not in list&lt;br&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;in operator&lt;/td&gt;
    &lt;td&gt;Finds whether a particular element is in the list or not, returns boolean&lt;/td&gt;
    &lt;td&gt;25 in a&lt;/td&gt;
    &lt;td&gt;True&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;not in operator&lt;/td&gt;
    &lt;td&gt;Checks if element is not available in list, returns boolean&lt;/td&gt;
    &lt;td&gt;25 not in a&lt;/td&gt;
    &lt;td&gt;False&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;count()&lt;/td&gt;
    &lt;td&gt;Counts the number of occurence of an element in the list&lt;/td&gt;
    &lt;td&gt;a.count(25)&lt;/td&gt;
    &lt;td&gt;1&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;remove()&lt;/td&gt;
    &lt;td&gt;Removes an element from the list&lt;/td&gt;
    &lt;td&gt;a.remove(25)&lt;/td&gt;
    &lt;td&gt; [30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;pop()&lt;/td&gt;
    &lt;td&gt;Deletes and returns the last item if not provided with any method argument.&lt;/td&gt;
    &lt;td&gt;a.pop(0)&lt;/td&gt;
    &lt;td&gt;25 , a will be [30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;del&lt;/td&gt;
    &lt;td&gt;Deletes item at a particular index from the list&lt;/td&gt;
    &lt;td&gt;del a[0]&lt;/td&gt;
    &lt;td&gt;[30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;all()&lt;/td&gt;
&lt;td&gt;Returns True, if all items in list are True or it is an empty list&lt;/td&gt;
&lt;td&gt;all([True, True, True])
all([])
&lt;/td&gt;
&lt;td&gt;True&lt;br&gt;
True&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;any()&lt;/td&gt;
&lt;td&gt;Returns True, if any item in list is True else return False&lt;/td&gt;
&lt;td&gt;any([True, True, True])&lt;br&gt;
any([True, False, True])&lt;br&gt;
any([])&lt;/td&gt;
&lt;td&gt;True&lt;br&gt;True&lt;br&gt;False&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;

==Printing the List==
=== Print whole list ===
A list can be printed simply or using a ''for / while'' loop 

 print(List_2)     # To print the entire list
This code will print      
 ['Kala','Mala']     

===Print element at a particular index===
&lt;pre&gt;
Using index position
    List_2[0]     # prints 'Kala' ,i.e,the value at index position 0.
    List_2[1]     # prints 'Mala'.
&lt;/pre&gt;
=== Without using index position ===
&lt;pre&gt;
for item in List_2:   # here item is a variable used to access elements in list.
       print(item)
   This code snippet prints 
    Kala
    Mala
&lt;/pre&gt;
[[#Top]]

==Search for a particular element in list==
Elements in a list can be searched by one of the two ways:
=== using index() function===
&lt;pre&gt;
ages1 = [11,23,12,23,45]

#if element is available in the list, index() returns the index value on which, the element is
 present.
print(ages1.index(45))#Output: 4

#if element is not available in the list, index() returns ''ValueError''
print(ages1.index(0))#Output: ValueError:
&lt;/pre&gt;

In programming, if such error occurs, program gets terminated. It can be solved using exception handling.
 
e.g.
&lt;pre&gt;
ages1 = [11,23,12,23,45]

try:
    print(ages1.index(0))
except ValueError:
    print(&quot;Exception has occured&quot;)    
    print(&quot;Element is not found in the list&quot;)

&lt;/pre&gt;
&lt;pre&gt;
'''Output: 
Exception has occured
Element is not found in the list
'''&lt;/pre&gt;
[[#Top]]

=== using 'in' operator===
''in'' operator is used to check whether a particular element is available in the list or not.e.g.

&lt;pre&gt;
ages1 = [11,23,12,23,45]
no=11

if no in ages1:
    print(&quot;no is there in the list&quot;)
else:    
    print(&quot;no is NOT there in the list&quot;)
&lt;/pre&gt;
&lt;pre&gt;
#Output: no is there in the list
&lt;/pre&gt;


'''Number is not there in the list'''
&lt;pre&gt;
ages1 = [11,23,12,23,45]
no=15

if no in ages1:
    print(&quot;no is there in the list&quot;)
else:    
    print(&quot;no is NOT there in the list&quot;)
&lt;/pre&gt;
&lt;pre&gt;
Output: no is NOT there in the list
&lt;/pre&gt;
[[#Top]]

==Updating the List==
The lists can be updated using ''append'' or ''insert'' function.  Append adds the element to the end of the list and Insert adds the element in the specified position.
&lt;pre&gt;
   # add the element 'Sheela' to the end of the list.
   List_2.append(&quot;Sheela&quot;)    
   print (List_2) will output 
   ['Kala', 'Mala', 'Sheela']
&lt;/pre&gt;
   &lt;pre&gt;
# add the element &quot;Bala&quot; in the list at the index 1.
   List_2.insert(1,&quot;Bala&quot;)    
   print (List_2) will output 
   ['Kala', 'Bala','Mala', 'Sheela']
&lt;/pre&gt;

=== Extend the list by adding elements of other list at end using extend()===
&lt;pre&gt;
ages = [11,23,12,23,45]
ages.extend([57,58])
print(ages)
&lt;/pre&gt;

&lt;pre&gt;
#Output: [11, 23, 12, 23, 45, 57, 58]
&lt;/pre&gt;

==== Difference between ''append() and extend()'' ====
Difference between ''append()'' and ''extend()'' can be easily understood, by the following example.

&lt;pre&gt;
appendlist = [11,23,12,23,45]
appendlist.append([57,58])

extendlist= [11,23,12,23,45]
extendlist.extend([57,58])
&lt;/pre&gt;

&lt;pre&gt;
'''Output:
[11, 23, 12, 23, 45, [57, 58]]
[11, 23, 12, 23, 45, 57, 58]'''
&lt;/pre&gt;

[[#Top]]

==Basic Operations on List==
===Frequency of Occurrence===
list.count(object) will return the number of times the object occur in the list.
  '''Example'''
    ages = [11,23,12,23,45,43,22,24,23]
    ages.count(23) will return
    3
    ages.count(100) will return
    0

===Length of the List===
''len(list)'' will return the length of the list ie. the number of objects in the list.
  '''Example'''
&lt;pre&gt;
    ages = [11,23,12,23,45,43,22,24,23]
    len(ages) # Output: 9
&lt;/pre&gt;

To print the objects in the list either use ''for item in list'' or ''for index in range(len(list))''
&lt;pre&gt;
    for item in ages:       
        print (item)  
        (OR)
    for index in range(len(ages)) :
        print (ages[index])
&lt;/pre&gt;

===Sort the List===
''list.sort()'' will sort the list in ascending order
  '''Example'''
    ages = [11,23,12,23,45,43,22,24,23]
    ages.sort() 
    print (ages) 
    [11, 12, 22, 23, 23, 23, 24, 43, 45]

[[#Top]]

===Sort the List using sorted() function===
''sorted(list1)'' will sort the list and return a new list, it doesn't modify the original list
&lt;br&gt;'''Example: Sort in ascending order'''
&lt;pre&gt;
ages = [11,23,12,23,45,43,22,24,23]
newList=sorted(ages)
print(newList)

#Output: [11, 12, 22, 23, 23, 23, 24, 43, 45]
&lt;/pre&gt;

&lt;br&gt;'''Example: Sort in descending order'''
&lt;pre&gt;
ages = [11,23,12,23,45,43,22,24,23]
newList=sorted(ages,reverse=True)
print(newList)

#Output: [45, 43, 24, 23, 23, 23, 22, 12, 11]
&lt;/pre&gt;

===Reverse the List===
''list.reverse()'' will reverse the original list
  '''Example'''
    ages = [11, 12, 22, 23, 23, 23, 24, 43, 45]
    ages.reverse()
    print (ages)
    [45, 43, 24, 23, 23, 23, 22, 12, 11]

Both ''sort()'' and ''reverse()'' list operation will work on numeric and alphanumeric data list.

A special use of the ''reverse()'' function is to descend a list that is sorted in ascending order.

  '''Example'''
&lt;pre&gt;
ages = [11, 12, 22, 23, 23, 23, 24, 43, 45]
ages.sort()
print(ages)
ages.reverse()
print(ages)
&lt;/pre&gt;

[[#Top]]

===Slicing===
Used to retrieve an object or objects in a range as a list  
  '''Example'''

Use ''list[index]'' to retrieve the object at the given index
&lt;pre&gt;
In [1]: student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
In [2]: student[3]     #Object at index 3.  Remember index starts at 0
Out[2]: 'Geetha'      
&lt;/pre&gt;

Use ''list[start_index : end_index + 1]'' to retrieve objects from the start_index to end_index 
&lt;pre&gt;
In [3]: student[2:4]     # Objects from index 2 to 3 as List. Note the [ and ]
Out[3]: ['Vijay', 'Geetha']   
&lt;/pre&gt;

Use ''list[:]'' to retrieve objects from the starting of the list to the end of the list. 
The default start value will be the starting index of the list (i.e. 0) and the default end value
will be the length of the list 
&lt;pre&gt;
In [4]: student[:]        # prints the entire list
Out[4]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma', 'Janani']
&lt;/pre&gt;
&lt;pre&gt;
In [5]: student[:5]       # prints the objects from the start of the list upto object at index 4
Out[5]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran']
&lt;/pre&gt;
&lt;pre&gt;
In [6]: student[2:]       # prints the objects from index 2 upto the end of the list
Out[6]: ['Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma', 'Janani']
&lt;/pre&gt;

Negative index too is available in Python. It starts from last element of the list. i.e.
&lt;pre&gt;
In [7]:student[-1]        #prints last index of list
Out[7]: 'Janani'
&lt;/pre&gt;
&lt;pre&gt;
In [8]:student[-1:-8]     #prints empty list
Out[8]: []
&lt;/pre&gt;
&lt;pre&gt;
In [9]:student[-8:-1]     #prints -8th index to -1st index elements
Out[9]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma']
&lt;/pre&gt;

[[#Top]]

===Removing Item from list ===
----

Is used to remove a specific item from the list.

'''Example:'''
 
Use list.remove(entry/value)  Or   del list[index]    Or list.pop(index)
&lt;pre&gt;
student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
student.remove(&quot;Arun&quot;)   #This will delete item &quot;Arun&quot;
         Or    
del student[0]           # This will delete item at index 0
         Or
student.pop(0)         # This will delete and return item at index 0
print(student)    
Output: &quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
&lt;/pre&gt;

[[#Top]]

===Delete list ===
----
Used to delete complete list

'''Example'''

Use del &lt;list name&gt;
&lt;pre&gt;
student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
del student&lt;/pre&gt;

===Concatenation of two lists===
----
''+'' is the concatenation operator which is used concatenate two lists. 
&lt;pre&gt;
ages1 = [11,23,12,23,45]
ages2 = [25, 24, 43, 47]
age=ages1+ages2
print(age)
#Output: [11, 23, 12, 23, 45, 25, 24, 43, 47]
&lt;/pre&gt;

===Repeatation of a list ===
----
''*'' is the operator to repeat a particular list.
&lt;pre&gt;
ages1 = [11,23,12,23,45]
age=ages1*5 #ages1 list is repeated 5 times and stroed in ''age'' list
print(age)

#Output: [11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45]
&lt;/pre&gt;

=== all and any for List===
all() and any() are special functions to check whether all elements in iterable is ''True'' or any element is ''True''
&lt;ol&gt;
&lt;li&gt;If all elements in a list are ''True'', ''all()'' will return ''True''&lt;/li&gt;
&lt;li&gt;If iterable is ''empty'', ''all()'' will return ''True''&lt;/li&gt;
&lt;li&gt;If iterable contains at least one ''True'', ''any()'' will return ''True''&lt;/li&gt;
&lt;li&gt;If iterable is ''empty'', ''any()'' will return ''False''&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;
lsit=[True, True, True, True]
print(all(lsit))#Output: True
print(any(lsit))#Output: True

lsit1=[True, False, True, True]
print(all(lsit1))#Output: False
print(any(lsit1))#Output: True

lsit2=[False,False,False]
print(all(lsit2))#Output: False
print(any(lsit2))#Output: False

lsit3=[]
print(all(lsit3))#Output: True
print(any(lsit3))#Output: False
&lt;/pre&gt;

==Conditional Statements==
Conditionals are used to check the condition and change the flow of the program 
accordingly. They are realized in programming languages through if statement. The 
syntax is as follows :
&lt;pre&gt;
         if condition : 
            statement
&lt;/pre&gt;
    '''Note:''' Do not forget indentation (inserting space/tab) in the line after the
 if condition.
    
    In case you want to execute a set of statements when a condition is true and another

set of statement when the condition is false.
&lt;pre&gt;
         if condition : 
            statement 1
         else :
            statement 2
&lt;/pre&gt;

&lt;pre&gt;    
    Multiple if-else statements can be written as follows:
         if condition_1 : 
            statement 1
         elif condition_2 : # 'elif' is short for 'else if'
            statement 2
         elif condition_3 :
            statement 3
        .
        .
         else :
            final statement
&lt;/pre&gt;

[[#Top]]

=Loops and Conditionals : Fizzbuzz=
====Loops====
Loops are used to execute a set of repetitive statements. They are realised
through 'while' and 'for' loops in programming languages. The syntax of 'for' loop is 
as follows :
&lt;pre&gt;
for LOOPVARIABLE in SEQUENCE: 
            STATEMENTS&lt;/pre&gt;

    '''e.g.''' to print all the data from a list we can write:
&lt;pre&gt;
for item in list_name:
      print(item)&lt;/pre&gt;
    OR
&lt;pre&gt;
for index in range(len(list_name)):
      print(list_name[index])
 &lt;/pre&gt;   
    The syntax for while loop is as follows :
&lt;pre&gt;    
while BOOLEANEXPRESSION: 
     STATEMENTS
     INCREMENT/DECREMENT
&lt;/pre&gt;    
    '''e.g.''' if we want to print all numbers from 1 to 10
&lt;pre&gt;
i=1
while i&lt;=10 :
    print(i,&quot; &quot;)
    i=i+1
    &lt;/pre&gt;
 
'while' loop has indefinite iteration (run-time unknown). So, there must be loop,  break statement in it.
 Whereas 'for' loop is definite in nature (i.e. known or predictable span).&lt;br&gt;

&lt;b&gt;NOTE: Python doesn't have anything like do-while loop.&lt;/b&gt;

[[#Top]]

==Implementation==
Here, we try to demonstrate the concept of loops and conditionals through a game called Fizzbuzz. The rules are as follows :&lt;br/&gt;
[[File:fizzBuzz.gif]]

• if input number is a multiple of ’3’ print ”Fizz”
&lt;br/&gt;
• if input number is a multiple of ’5’ print ”Buzz”
&lt;br/&gt;
• if input number is a multiple of both '3' and ’5’ print ”FizzBuzz”
&lt;br/&gt;
The pseudo code is as follows :
&lt;pre&gt;
   If input no % 3 == 0 and  input no % 5 == 0 : 
       print ”Fizzbuzz”
   else if input no % 3 == 0 : 
       print ”Fizz”
   else if input no % 5 == 0 : 
       print ”Buzz”
   else :
       print the input no
&lt;/pre&gt;
 &lt;p style=&quot;text-align:justify&quot;&gt;
The order of statements execution matters to get the desired output. The highest priority condition should be first followed by other. In fizzbuzz programming, first checking should be done for both divisibility of 3 and 5. If condition not satisfied only then it should check individually for 3 or 5. So carefully choosing the order is crucial for better programming.
Note: There is some effect of present condition statements chosen on next conditions statements. That is why in first attempt fizzbuzz programming got struck.&lt;/p&gt;

Example: 
&lt;pre&gt;
#Code to achieve the above requirement in python3.
i = int(input(&quot;Enter the number&quot;)) 
if i%3 == 0 and i%5 == 0: print(i,&quot;FizzBuzz&quot;)  
elif i%5 == 0: print(i,&quot;Buzz&quot;)
elif i%3 == 0: print(i,&quot;Fizz&quot;)
else: print(i)
&lt;/pre&gt;
Lets put the same into a loop for a range given by the user.
&lt;pre&gt;
def fizzbuzzgame(start,stop):
    for i in range(start,stop+1):
        if i%3 == 0 and i%5 == 0:
            print(i,&quot;FizzBuzz&quot;)
        elif i%5 == 0:
            print(i,&quot;Buzz&quot;)
        elif i%3 == 0:
            print(i,&quot;Fizz&quot;)
        else: print(i)

fizzbuzzgame(50,100)
&lt;/pre&gt;
&lt;pre&gt;
#Output:
1235
Buzz
======================================
555
Fizzbuzz
======================================
1235
Buzz
======================================
999
Fizz
&lt;/pre&gt;

[[#Top]]

=== Fizz Buzz game in Interactive mode with Score ===
'''By Ms. Ami Tusharkant Choksi'''
&lt;pre&gt;
def fizzbuzzgame(i):
        if i%3 == 0 and i%5 == 0:
            print(i,&quot;FizzBuzz&quot;)
            return(&quot;fzbz&quot;)
        elif i%5 == 0:
            print(i,&quot;Buzz&quot;)
            return(&quot;bz&quot;)
        elif i%3 == 0:
            print(i,&quot;Fizz&quot;)
            return(&quot;fz&quot;)
        else:
            print(i)
            return(&quot;no&quot;)

ch = 'y'
fizzbuzz=0
fizz=0
buzz=0
nothing=0
print(&quot;&quot;&quot;

 /$$$$$$$$/$$                  /$$$$$$$                            
| $$_____|__/                 | $$__  $$                           
| $$      /$$/$$$$$$$$/$$$$$$$| $$  \ $$/$$   /$$/$$$$$$$$/$$$$$$$$
| $$$$$  | $|____ /$$|____ /$$| $$$$$$$| $$  | $|____ /$$|____ /$$/
| $$__/  | $$  /$$$$/   /$$$$/| $$__  $| $$  | $$  /$$$$/   /$$$$/ 
| $$     | $$ /$$__/   /$$__/ | $$  \ $| $$  | $$ /$$__/   /$$__/  
| $$     | $$/$$$$$$$$/$$$$$$$| $$$$$$$|  $$$$$$//$$$$$$$$/$$$$$$$$
|__/     |__|________|________|_______/ \______/|________|________/
                                                                  
&quot;&quot;&quot;)   
print('''

  /$$$$$$                                
 /$$__  $$                               
| $$  \__/ /$$$$$$ /$$$$$$/$$$$  /$$$$$$ 
| $$ /$$$$|____  $| $$_  $$_  $$/$$__  $$
| $$|_  $$ /$$$$$$| $$ \ $$ \ $| $$$$$$$$
| $$  \ $$/$$__  $| $$ | $$ | $| $$_____/
|  $$$$$$|  $$$$$$| $$ | $$ | $|  $$$$$$$
 \______/ \_______|__/ |__/ |__/\_______/
                                     
''')

while(ch == 'y'):
    n=int(input(&quot;Enter a Number : &quot;))
    winLoose=fizzbuzzgame(n)
    if(winLoose == &quot;fz&quot;):
        fizz+=1
    elif(winLoose == &quot;bz&quot;):
        buzz+=1
    elif(winLoose == &quot;fzbz&quot;):
        fizzbuzz+=1
    ch=input(&quot;Do you want to continue playing the game : (y/n)&quot;)
    if(ch=='n'):
        print('Congratulations, your score is\n FizzBuzz:%d\nFizz:%d\nBuzz:%d' %
(fizzbuzz,fizz,buzz))
    
'''Sample Output:

 /$$$$$$$$/$$                  /$$$$$$$                            
| $$_____|__/                 | $$__  $$                           
| $$      /$$/$$$$$$$$/$$$$$$$| $$  \ $$/$$   /$$/$$$$$$$$/$$$$$$$$
| $$$$$  | $|____ /$$|____ /$$| $$$$$$$| $$  | $|____ /$$|____ /$$/
| $$__/  | $$  /$$$$/   /$$$$/| $$__  $| $$  | $$  /$$$$/   /$$$$/ 
| $$     | $$ /$$__/   /$$__/ | $$  \ $| $$  | $$ /$$__/   /$$__/  
| $$     | $$/$$$$$$$$/$$$$$$$| $$$$$$$|  $$$$$$//$$$$$$$$/$$$$$$$$
|__/     |__|________|________|_______/ \______/|________|________/
                                                                                                                                   

  /$$$$$$                                
 /$$__  $$                               
| $$  \__/ /$$$$$$ /$$$$$$/$$$$  /$$$$$$ 
| $$ /$$$$|____  $| $$_  $$_  $$/$$__  $$
| $$|_  $$ /$$$$$$| $$ \ $$ \ $| $$$$$$$$
| $$  \ $$/$$__  $| $$ | $$ | $| $$_____/
|  $$$$$$|  $$$$$$| $$ | $$ | $|  $$$$$$$
 \______/ \_______|__/ |__/ |__/\_______/
                                         

Enter a Number : 666
666 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 777
777 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 555
555 FizzBuzz
Do you want to continue playing the game : (y/n)y
Enter a Number : 1
1
Do you want to continue playing the game : (y/n)y
Enter a Number : 789
789 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 25
25 Buzz
Do you want to continue playing the game : (y/n)n
Congratulations, your score is

FizzBuzz:1
Fizz:3
Buzz:1

&lt;/pre&gt;

[[#Top]]

=Crowd Computing: Just Estimate=

Crowd computing is conceptualised in various ways as being related to crowdsourcing, human computation, social computing, cloud computing and mobile computing. 

Crowd computing has been described in various ways viz. 
&lt;ul&gt;&lt;li&gt;distribution of human intelligence tasks to mobile devices&lt;/li&gt;
&lt;li&gt;cloud computing with humans&lt;/li&gt;
&lt;li&gt;human problem solving with large numbers of people using computers&lt;/li&gt;&lt;/ul&gt; 

Broadly, crowed computing is a set of human interaction tools for idea exchange and non-hierarchical decision making. 

Four common characteristics are used to identify the term: 
&lt;ol&gt;
&lt;li&gt;participation by a crowd of humans&lt;/li&gt;
&lt;li&gt;interaction with computing technology&lt;/li&gt;
&lt;li&gt;activity that is predetermined by the initiator or application itself&lt;/li&gt;
&lt;li&gt;the execution of tasks by the crowd utilising innate human capabilities.&lt;/li&gt;
&lt;/ol&gt;

==Wisdom of Crowds==
 &lt;p style=&quot;text-align:justify&quot;&gt;
The concept of ’Wisdom of Crowds’ was proposed by ''Francis Galton''. A weight-judging competition was carried on at the annual show of the West of England Fat Stock and Poultry Exhibition recently held at Plymouth, A fat ox having been selected, competitors bought stamped and numbered cards, each, on which to inscribe their respective names, addresses, and estimates of what the ox would weigh after it had been slaughtered. Those who guessed most successfully received prizes. About 8oo tickets were issued to the par- ticipants. The middlemost estimate of all the estimates recorded was 1207 lbs and the actual weight of the ox was 1198 lbs.&lt;/p&gt;

==Our Experiment==
 &lt;p style=&quot;text-align:justify&quot;&gt;
The crowd had to guess the number of candies/gems in a jar. Around 75 people participated in the experiment. The actual number of gems in the jar were 375. The median of all estimates came out to be 300 and the mean of all the estimates came out to be around 396. Median underestimated and mean overestimated the actual value. So according to recent studies, Trimmed mean must be used as an aggregate measure to estimate where Wisdom of Crowds is involved.
&lt;/p&gt;
[[File:Gemsjar.jpg|center|200px|caption]]

===Trimmed Mean===
 &lt;p style=&quot;text-align:justify&quot;&gt;
In these kinds of experiments, 10% trimmed mean is usually followed. For calculating 10% trimmed mean, remove 10% smallest and 10% largest values from the sample. Calculate the mean of the sample obtained. In the above experiment, the trimmed mean came out to be around 351 which is very close to the actual value.&lt;/p&gt;

==Implementation==
Here, we try to demonstrate the concept of trimmed mean through crowd computing.
&lt;ol&gt;
&lt;li&gt; Input a list of estimates done by the crowd .&lt;/li&gt;
&lt;li&gt; Sort the list.&lt;/li&gt;
&lt;li&gt; Remove the 10% smallest values.&lt;/li&gt;
&lt;li&gt; Remove the 10% largest values.
&lt;li&gt; Calculate the mean of the new list obtained .&lt;/li&gt;&lt;/ol&gt;&lt;hr&gt;
[[#Top]]

==Data of Experiment==       
    Estimates =[1000,1010,1786,2000,1500,1500,100,120,150,150,150,170,175,180,197,200,200,200,200,200,200,220,220,220,220,234,250,250,250,250,250,250,250,250,250,263,270,275,275,286,300,
                300,300,300,300,300,300,300,320,350,350,350,400, 400,400,400,400,450,467,500,500,500,500,500,500,500,550,550,600,600,600,650,700,700,720]

    '''CODE:'''
&lt;pre&gt;
Estimates = [1000,1010,1786,2000,1500,1500,100,120,150,150,150,170,175,180,197,200,200,200,200,200,200,220,220,220,220,234,250,250,250,250,250,250,250,250,250,263,270,275,275,286,300,                300,300,300,300,300,300,300,320,350,350,350,400,400,400,400,400,450,467,500,500,500,500,500,500,500,550,550,600,600,600,650,700,700,720]
Estimates.sort()
offset = int(0.10*len(Estimates))
for i in range(offset):
       del Estimates[0]
       del Estimates[-1]
Sum = 0    
for i in range(len(Estimates)):
       Sum += Estimates[i]
Mean_Value = Sum/len(Estimates)
print(&quot;Mean : &quot;, int(Mean_Value))
#Output:
Mean :  351
&lt;/pre&gt;
&lt;hr&gt;
==Trimmed Mean for the above example== 
&lt;h3&gt;Using scipy library&lt;/h3&gt;
&lt;pre&gt;
#import scipy to use the method of trim_mean
from scipy import stats
trimMean = stats.trim_mean(Estimates, 0.1) # Trim 10% at both ends
print(&quot;Trimmed Mean : &quot;,trimMean)
#Output:
Trimmed Mean :  335.1020408163265
&lt;/pre&gt;

&lt;h3&gt;Without using scipy library&lt;/h3&gt;
&lt;pre&gt;
#Trimmed mean with 10%
p=10/100
#sorted data
data=[2, 4, 6, 7, 11, 21, 81, 90, 105, 121]
n = len(data)
#Remove elements from both end
rem=int(n*p)
newData = data[rem:-rem]
mean = 0
for i in newData:
    mean += i
mean = int(mean/len(newData))
print(&quot;Trimmed mean : &quot;,mean)
#Output: Trimmed mean :  40
&lt;/pre&gt;
[[#Top]]

=Jumbled_Words Permutations: Jumbled Words=
==What are Permutations ?==
A permutation also called ordering of selected number of elements from a list denoted by nPr here we are choosing all elements of a list and so n=r&lt;br&gt;
nPr=n!/(n-r)!&lt;br&gt; as n=r
nPn=n!&lt;br&gt; which gives all possible arrangement of elements present in a list.

 For example, permutations of list [1,2,3] are [1,2,3], [1,3,2], [2,1,3], [2,3,1], 
[3,1,2], and [3,2,1]. 
The number of permutations of a list of elements nPn is given by n!. For example, there are 2! = 2 x 1 = 2 permutations of [1,2], namely [1,2] and [2,1], and 3! = 3 x 2 x 1 = 6 permutations of [1,2,3], as mentioned above.&lt;br/&gt;
[[File:Permutations.jpg]]

==Implementation==
 &lt;p style=&quot;text-align:justify&quot;&gt;
Here, we try to demonstrate the concept of permutations through jumbled words. It is a two player game in which one person presents the other person a different permutation of the word in his mind. The other person has to guess the right word. If he guesses, the he wins otherwise he loses.&lt;/p&gt;
 Input an list of words.
 Randomly pick a word from the list of words .
 Shuffle this word and present it to the other player.
 if word guesses by the player is same as the one picked from list of w
     player wins
 else
     player loses

ALTERNATE CODE TO GENERATE THIS GAME:
&lt;pre&gt;
import random
p1=input(&quot;enter player 1 name:&quot;)
p2=input(&quot;enter player 2 name:&quot;)
l=[&quot;rainbow&quot;,&quot;computer&quot;,&quot;robot&quot;,&quot;butter&quot;,&quot;vegetable&quot;,&quot;science&quot;,&quot;correct&quot;]
c1=c2=a1=a2=f1=f2=0
k=1
i=3
def play():
    n=random.choice(l)        ##n=chooses a word from list l
    l1=[]
    for j in n:
       l1.append(j)      ##creates a list for word in n
    for t in range(len(l1)):
       p=random.choice(l1)     ##this randomly displays letters in the list
       print(p)
       l1.remove(p)          ##to avoid the repetition of a letter
    s=input(&quot;enter the word:&quot;)
    if(s==n):
        print(&quot;correct&quot;)
        return 1
    else:
        print(&quot;not correct&quot;)
        print(&quot;answer is&quot;,n)
        return 0
def stat():
     print(&quot;player 1:&quot;)
     print(&quot;score:&quot;,c1)
     print(&quot;answered:&quot;,a1)
     print(&quot;failed:&quot;,f1)
     print(&quot;.............&quot;)
     print(&quot;player 2:&quot;)
     print(&quot;score:&quot;,c2)
     print(&quot;answered:&quot;,a2)
     print(&quot;failed&quot;,f2)
     if(c1&gt;c2):
         print(p1,&quot; won over &quot;,p2)
     elif(c1==c2):
         print(&quot;draw game&quot;)
     else:
         print(p2,&quot; won over &quot;,p1) 
while(i!=4):
      if(i==3):
         if(k==1):
             print(&quot;player 1 turn&quot;)
             print(&quot;your jumbled word is:&quot;)
             k=k+1
             m=play()
             if(m==1):      ##if guessed answer is correct,then score and no.of answered count will be increased
                c1+=1
                a1+=1
             else:
                f1+=1       ##else count of no.of failed to answered will be incremented
         else:
             print(&quot;player 2 turn&quot;)
             print(&quot;your jumbled word is:&quot;)
             k=k-1
             m=play()
             if(m==1):
                c2=c2+1
                a2=a2+1
             else:
                f2=f2+1
       if(i==2):
             print(&quot;present status&quot;)
             stat()
       i=int(input(&quot;enter your choice  1.stop 2.status 3.continue&quot;))
       if(i==1):
             stat()
             i=i+3
&lt;/pre&gt;
&lt;hr&gt;

[[#Top]]

=== JumbledWord Simple Logic, In Short ===
[[File:jumbledWord.gif]]
---
&lt;hr&gt;
'''Logic to create a Jumbled Word'''
&lt;hr&gt;
&lt;pre&gt;
#Get Jumbled Word and print it Horizontally
import random

def getJumbledWord(b):
    jumble=''
    l1 = [ b[i] for i in range(0, len(b)) ]
    for t in range(len(l1)):
       p=random.choice(l1)  #this randomly gets letters from the list      
       jumble=jumble+p       
       l1.remove(p)
    return jumble

b=input(&quot;Enter a word to make it jumbled : &quot;)
print(&quot;Jumbled Word : &quot;, getJumbledWord(b))
&lt;/pre&gt;
&lt;pre&gt;
Output:
Enter a word to make it jumbled : live and let live others
Jumbled Word :  vel  toldeisrte aihv len
==========================================
Enter a word to make it jumbled : junkfood
Jumbled Word :  nfukdooj
&lt;/pre&gt;
&lt;hr&gt;
'''Another Logic to create a Jumbled Word'''
&lt;hr&gt;
&lt;pre&gt;
import random
b=input(&quot;Enter a word to make it jumbled : &quot;)

def getJumbledWord1(b):
    l1 = [ b[i] for i in range(0, len(b)) ]
    random.shuffle(l1)
    str1 = ''.join(l1)
    return str1

print(&quot;Jumbled Word : &quot;, getJumbledWord1(b))
&lt;/pre&gt;

====Sample Output:====
&lt;pre&gt;
---- Output1 
Enter a word to make it jumbled : butter
Jumbled Word :  tbture

---- Output2 
Enter a word to make it jumbled : petriotism
Jumbled Word :  pittrosime
&lt;/pre&gt;

=Theory of Evolution=

== What is Evolution ? ==
Evolution is the change in heritable characteristics over successive generations. The theory of evolution explains that DNA, which acts as a carrier of genetic information from one generation to other, tends to change or mutate occasionally. These changes are reflected in next generations to come. This is how life has evolved on earth from bacteria to human beings.&lt;br&gt;
[[File:Evolution.png|500px]]

== Implementation ==
 &lt;p style=&quot;text-align:justify&quot;&gt;
An array representing DNA is stored in a file. As genes are forms of DNA, they contain information to be transferred to forthcoming generations. Assume that information is in the form of bits (in the form of 0s and 1s). A number is picked randomly from 1 to the size of the array. A new parameter has been introduced which decides whether mutation would occur or not. If the value of this new parameter is 1 (It is picked randomly from 1 to 100), then only change is reflected down the generations, otherwise it is not. The pseudo code is as follows :
&lt;/p&gt;
Input an array containing genetic information .
Randomly generate a number (say m) from 1 to length of the array. Randomly generate other number (say p) from 1 to 100.

&lt;pre&gt; 
    if p is equal to 1 then 
        if m is 1 then
          set it to 0
        else
          set it to 1
&lt;/pre&gt;
[[#Top]]</text>
      <sha1>ec8w8vldsy1iqv9sd7pvmvyg44tvp1v</sha1>
    </revision>
    <revision>
      <id>4580</id>
      <parentid>4579</parentid>
      <timestamp>2018-10-27T06:10:53Z</timestamp>
      <contributor>
        <username>Balakrishna</username>
        <id>3073</id>
      </contributor>
      <comment>/* Operations and Methods to work with List */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="31690">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_3 Contributors of this page]
*Week 3 Playlist: https://www.youtube.com/playlist?list=PLc_j0TNIaWxOVx_z9jAM2UB3RqYNXaoEo
=List=
List is a flexible data structure used for storing a group of data separated by comma. The elements in a list need not be of the same data type.

'''Example:'''
       List_1 = [ 1, 2,3] or 
       List_1 = [&quot;coffee&quot;, &quot;Tea&quot;, &quot;Milk&quot;] or
       List_1 = [1,&quot;coffee&quot;, &quot;Tea&quot;, 3, &quot;5&quot;]

==List Creation==
a) A list can be created by simply putting values (separated by comma) between square
 brackets as given below,
&lt;pre&gt;List_1 = [1,&quot;coffee&quot;, &quot;Tea&quot;, 3, &quot;5&quot;] #this creates a list by name List_1 containing
 following items
&lt;/pre&gt;


Or,
(b)A List can be created from scratch and elements can be added 
&lt;pre&gt;
        List_2 = [ ]
        List_2.append(&quot;Kala&quot;)
        List_2.append(&quot;Mala&quot;)
&lt;/pre&gt;
Here we use &quot;append&quot;, which is a function in python that enable us to append or attach an element to a list .
&lt;pre&gt;Thus List_2 will now hold [&quot;Kala&quot;,&quot;Mala&quot;]&lt;/pre&gt;

[[#Top]]

==Operations and Methods to work with List==
&lt;pre&gt;
a = [25,30,50,90,12,13]
b = [100,300,500,200,250]
&lt;/pre&gt;
&lt;hr&gt;
&lt;table border=2&gt;
  &lt;tr&gt;
    &lt;th&gt;&lt;b&gt;Method/&lt;br&gt;Operator&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Function&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Syntax&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Output&lt;/b&gt;&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;len()&lt;/td&gt;
    &lt;td&gt;Find length of a list&lt;/td&gt;
    &lt;td&gt;len(a)&lt;/td&gt;
    &lt;td&gt;6&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;max()&lt;/td&gt;
    &lt;td&gt;Find maximum element from the list&lt;/td&gt;
    &lt;td&gt;max(a)&lt;/td&gt;
    &lt;td&gt;90&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;min()&lt;/td&gt;
    &lt;td&gt;Find minimum element from the list&lt;/td&gt;
    &lt;td&gt;min(a)&lt;/td&gt;
    &lt;td&gt;12&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sum()&lt;/td&gt;
    &lt;td&gt;Returns sum of all elements of the list&lt;/td&gt;
    &lt;td&gt;sum(a)&lt;/td&gt;
    &lt;td&gt;220&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;reverse()&lt;/td&gt;
    &lt;td&gt;Reverses the original list&lt;/td&gt;
    &lt;td&gt;a.reverse()&lt;/td&gt;
    &lt;td&gt;[13, 12, 90, 50, 30, 25]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sort()&lt;/td&gt;
    &lt;td&gt;Sorts the original list in ascending order&lt;/td&gt;
    &lt;td&gt;a.sort()&lt;/td&gt;
    &lt;td&gt;[12, 13, 25, 30, 50, 90]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sorted()&lt;/td&gt;
    &lt;td&gt;Returns the new sorted list &lt;/td&gt;
    &lt;td&gt;sorted(a)&lt;/td&gt;
    &lt;td&gt;[12, 13, 25, 30, 50, 90]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;insert()&lt;/td&gt;
    &lt;td&gt;Insert at a particular index in the list, and shifts remaining elements&lt;/td&gt;
    &lt;td&gt;a.insert(3,6)&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 6, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;append()&lt;/td&gt;
    &lt;td&gt;Adds elements/object to the end of the list&lt;/td&gt;
    &lt;td&gt;a.append(5)&lt;br&gt;a.append([10,20])&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 5]&lt;br&gt;[25, 30, 50, 90, 12, 13, [10, 20]]&lt;br&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;extend()&lt;/td&gt;
    &lt;td&gt;Adds object to the end of the list as elements not as object&lt;/td&gt;
    &lt;td&gt;a.extend([10,20])&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 10, 20]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;*&amp;nbsp;&amp;nbsp;Repeatation&lt;br&gt;operator&lt;/td&gt;
    &lt;td&gt;Repeat the list for n times and returns a new list&lt;/td&gt;
    &lt;td&gt;a*2&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 25, 30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;+ Concatenation&lt;br&gt;operator&lt;/td&gt;
    &lt;td&gt;Concatenates two lists, and returns a new list&lt;/td&gt;
    &lt;td&gt;a+b&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 100, 300, 500, 200, 250]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;index()&lt;/td&gt;
    &lt;td&gt;Finds index of a particular element in the list or not&lt;/td&gt;
    &lt;td&gt;a.index(25)&lt;br&gt;a.index(0)&lt;br&gt;&lt;/td&gt;
    &lt;td&gt;0&lt;br&gt;&lt;br&gt;ValueError: 0 is not in list&lt;br&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;in operator&lt;/td&gt;
    &lt;td&gt;Finds whether a particular element is in the list or not, returns boolean&lt;/td&gt;
    &lt;td&gt;25 in a&lt;/td&gt;
    &lt;td&gt;True&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;not in operator&lt;/td&gt;
    &lt;td&gt;Checks if element is not available in list, returns boolean&lt;/td&gt;
    &lt;td&gt;25 not in a&lt;/td&gt;
    &lt;td&gt;False&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;count()&lt;/td&gt;
    &lt;td&gt;Counts the number of occurence of an element in the list&lt;/td&gt;
    &lt;td&gt;a.count(25)&lt;/td&gt;
    &lt;td&gt;1&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;remove()&lt;/td&gt;
    &lt;td&gt;Removes an element from the list&lt;/td&gt;
    &lt;td&gt;a.remove(25)&lt;/td&gt;
    &lt;td&gt; [30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;pop()&lt;/td&gt;
    &lt;td&gt;Deletes and returns the last item if not provided with any method argument.&lt;/td&gt;
    &lt;td&gt;a.pop(0)&lt;/td&gt;
    &lt;td&gt;25 , a will be [30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;del&lt;/td&gt;
    &lt;td&gt;Deletes item at a particular index from the list&lt;/td&gt;
    &lt;td&gt;del a[0]&lt;/td&gt;
    &lt;td&gt;[30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;all()&lt;/td&gt;
&lt;td&gt;Returns True, if list doesn't contain &quot;False&quot;, or it is an empty list&lt;/td&gt;
&lt;td&gt;all([True, True, True])
all([])
&lt;/td&gt;
&lt;td&gt;True&lt;br&gt;
True&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;any()&lt;/td&gt;
&lt;td&gt;Returns True, if any item in list is True else return False&lt;/td&gt;
&lt;td&gt;any([True, True, True])&lt;br&gt;
any([True, False, True])&lt;br&gt;
any([])&lt;/td&gt;
&lt;td&gt;True&lt;br&gt;True&lt;br&gt;False&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;

==Printing the List==
=== Print whole list ===
A list can be printed simply or using a ''for / while'' loop 

 print(List_2)     # To print the entire list
This code will print      
 ['Kala','Mala']     

===Print element at a particular index===
&lt;pre&gt;
Using index position
    List_2[0]     # prints 'Kala' ,i.e,the value at index position 0.
    List_2[1]     # prints 'Mala'.
&lt;/pre&gt;
=== Without using index position ===
&lt;pre&gt;
for item in List_2:   # here item is a variable used to access elements in list.
       print(item)
   This code snippet prints 
    Kala
    Mala
&lt;/pre&gt;
[[#Top]]

==Search for a particular element in list==
Elements in a list can be searched by one of the two ways:
=== using index() function===
&lt;pre&gt;
ages1 = [11,23,12,23,45]

#if element is available in the list, index() returns the index value on which, the element is
 present.
print(ages1.index(45))#Output: 4

#if element is not available in the list, index() returns ''ValueError''
print(ages1.index(0))#Output: ValueError:
&lt;/pre&gt;

In programming, if such error occurs, program gets terminated. It can be solved using exception handling.
 
e.g.
&lt;pre&gt;
ages1 = [11,23,12,23,45]

try:
    print(ages1.index(0))
except ValueError:
    print(&quot;Exception has occured&quot;)    
    print(&quot;Element is not found in the list&quot;)

&lt;/pre&gt;
&lt;pre&gt;
'''Output: 
Exception has occured
Element is not found in the list
'''&lt;/pre&gt;
[[#Top]]

=== using 'in' operator===
''in'' operator is used to check whether a particular element is available in the list or not.e.g.

&lt;pre&gt;
ages1 = [11,23,12,23,45]
no=11

if no in ages1:
    print(&quot;no is there in the list&quot;)
else:    
    print(&quot;no is NOT there in the list&quot;)
&lt;/pre&gt;
&lt;pre&gt;
#Output: no is there in the list
&lt;/pre&gt;


'''Number is not there in the list'''
&lt;pre&gt;
ages1 = [11,23,12,23,45]
no=15

if no in ages1:
    print(&quot;no is there in the list&quot;)
else:    
    print(&quot;no is NOT there in the list&quot;)
&lt;/pre&gt;
&lt;pre&gt;
Output: no is NOT there in the list
&lt;/pre&gt;
[[#Top]]

==Updating the List==
The lists can be updated using ''append'' or ''insert'' function.  Append adds the element to the end of the list and Insert adds the element in the specified position.
&lt;pre&gt;
   # add the element 'Sheela' to the end of the list.
   List_2.append(&quot;Sheela&quot;)    
   print (List_2) will output 
   ['Kala', 'Mala', 'Sheela']
&lt;/pre&gt;
   &lt;pre&gt;
# add the element &quot;Bala&quot; in the list at the index 1.
   List_2.insert(1,&quot;Bala&quot;)    
   print (List_2) will output 
   ['Kala', 'Bala','Mala', 'Sheela']
&lt;/pre&gt;

=== Extend the list by adding elements of other list at end using extend()===
&lt;pre&gt;
ages = [11,23,12,23,45]
ages.extend([57,58])
print(ages)
&lt;/pre&gt;

&lt;pre&gt;
#Output: [11, 23, 12, 23, 45, 57, 58]
&lt;/pre&gt;

==== Difference between ''append() and extend()'' ====
Difference between ''append()'' and ''extend()'' can be easily understood, by the following example.

&lt;pre&gt;
appendlist = [11,23,12,23,45]
appendlist.append([57,58])

extendlist= [11,23,12,23,45]
extendlist.extend([57,58])
&lt;/pre&gt;

&lt;pre&gt;
'''Output:
[11, 23, 12, 23, 45, [57, 58]]
[11, 23, 12, 23, 45, 57, 58]'''
&lt;/pre&gt;

[[#Top]]

==Basic Operations on List==
===Frequency of Occurrence===
list.count(object) will return the number of times the object occur in the list.
  '''Example'''
    ages = [11,23,12,23,45,43,22,24,23]
    ages.count(23) will return
    3
    ages.count(100) will return
    0

===Length of the List===
''len(list)'' will return the length of the list ie. the number of objects in the list.
  '''Example'''
&lt;pre&gt;
    ages = [11,23,12,23,45,43,22,24,23]
    len(ages) # Output: 9
&lt;/pre&gt;

To print the objects in the list either use ''for item in list'' or ''for index in range(len(list))''
&lt;pre&gt;
    for item in ages:       
        print (item)  
        (OR)
    for index in range(len(ages)) :
        print (ages[index])
&lt;/pre&gt;

===Sort the List===
''list.sort()'' will sort the list in ascending order
  '''Example'''
    ages = [11,23,12,23,45,43,22,24,23]
    ages.sort() 
    print (ages) 
    [11, 12, 22, 23, 23, 23, 24, 43, 45]

[[#Top]]

===Sort the List using sorted() function===
''sorted(list1)'' will sort the list and return a new list, it doesn't modify the original list
&lt;br&gt;'''Example: Sort in ascending order'''
&lt;pre&gt;
ages = [11,23,12,23,45,43,22,24,23]
newList=sorted(ages)
print(newList)

#Output: [11, 12, 22, 23, 23, 23, 24, 43, 45]
&lt;/pre&gt;

&lt;br&gt;'''Example: Sort in descending order'''
&lt;pre&gt;
ages = [11,23,12,23,45,43,22,24,23]
newList=sorted(ages,reverse=True)
print(newList)

#Output: [45, 43, 24, 23, 23, 23, 22, 12, 11]
&lt;/pre&gt;

===Reverse the List===
''list.reverse()'' will reverse the original list
  '''Example'''
    ages = [11, 12, 22, 23, 23, 23, 24, 43, 45]
    ages.reverse()
    print (ages)
    [45, 43, 24, 23, 23, 23, 22, 12, 11]

Both ''sort()'' and ''reverse()'' list operation will work on numeric and alphanumeric data list.

A special use of the ''reverse()'' function is to descend a list that is sorted in ascending order.

  '''Example'''
&lt;pre&gt;
ages = [11, 12, 22, 23, 23, 23, 24, 43, 45]
ages.sort()
print(ages)
ages.reverse()
print(ages)
&lt;/pre&gt;

[[#Top]]

===Slicing===
Used to retrieve an object or objects in a range as a list  
  '''Example'''

Use ''list[index]'' to retrieve the object at the given index
&lt;pre&gt;
In [1]: student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
In [2]: student[3]     #Object at index 3.  Remember index starts at 0
Out[2]: 'Geetha'      
&lt;/pre&gt;

Use ''list[start_index : end_index + 1]'' to retrieve objects from the start_index to end_index 
&lt;pre&gt;
In [3]: student[2:4]     # Objects from index 2 to 3 as List. Note the [ and ]
Out[3]: ['Vijay', 'Geetha']   
&lt;/pre&gt;

Use ''list[:]'' to retrieve objects from the starting of the list to the end of the list. 
The default start value will be the starting index of the list (i.e. 0) and the default end value
will be the length of the list 
&lt;pre&gt;
In [4]: student[:]        # prints the entire list
Out[4]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma', 'Janani']
&lt;/pre&gt;
&lt;pre&gt;
In [5]: student[:5]       # prints the objects from the start of the list upto object at index 4
Out[5]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran']
&lt;/pre&gt;
&lt;pre&gt;
In [6]: student[2:]       # prints the objects from index 2 upto the end of the list
Out[6]: ['Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma', 'Janani']
&lt;/pre&gt;

Negative index too is available in Python. It starts from last element of the list. i.e.
&lt;pre&gt;
In [7]:student[-1]        #prints last index of list
Out[7]: 'Janani'
&lt;/pre&gt;
&lt;pre&gt;
In [8]:student[-1:-8]     #prints empty list
Out[8]: []
&lt;/pre&gt;
&lt;pre&gt;
In [9]:student[-8:-1]     #prints -8th index to -1st index elements
Out[9]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma']
&lt;/pre&gt;

[[#Top]]

===Removing Item from list ===
----

Is used to remove a specific item from the list.

'''Example:'''
 
Use list.remove(entry/value)  Or   del list[index]    Or list.pop(index)
&lt;pre&gt;
student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
student.remove(&quot;Arun&quot;)   #This will delete item &quot;Arun&quot;
         Or    
del student[0]           # This will delete item at index 0
         Or
student.pop(0)         # This will delete and return item at index 0
print(student)    
Output: &quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
&lt;/pre&gt;

[[#Top]]

===Delete list ===
----
Used to delete complete list

'''Example'''

Use del &lt;list name&gt;
&lt;pre&gt;
student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
del student&lt;/pre&gt;

===Concatenation of two lists===
----
''+'' is the concatenation operator which is used concatenate two lists. 
&lt;pre&gt;
ages1 = [11,23,12,23,45]
ages2 = [25, 24, 43, 47]
age=ages1+ages2
print(age)
#Output: [11, 23, 12, 23, 45, 25, 24, 43, 47]
&lt;/pre&gt;

===Repeatation of a list ===
----
''*'' is the operator to repeat a particular list.
&lt;pre&gt;
ages1 = [11,23,12,23,45]
age=ages1*5 #ages1 list is repeated 5 times and stroed in ''age'' list
print(age)

#Output: [11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45]
&lt;/pre&gt;

=== all and any for List===
all() and any() are special functions to check whether all elements in iterable is ''True'' or any element is ''True''
&lt;ol&gt;
&lt;li&gt;If all elements in a list are ''True'', ''all()'' will return ''True''&lt;/li&gt;
&lt;li&gt;If iterable is ''empty'', ''all()'' will return ''True''&lt;/li&gt;
&lt;li&gt;If iterable contains at least one ''True'', ''any()'' will return ''True''&lt;/li&gt;
&lt;li&gt;If iterable is ''empty'', ''any()'' will return ''False''&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;
lsit=[True, True, True, True]
print(all(lsit))#Output: True
print(any(lsit))#Output: True

lsit1=[True, False, True, True]
print(all(lsit1))#Output: False
print(any(lsit1))#Output: True

lsit2=[False,False,False]
print(all(lsit2))#Output: False
print(any(lsit2))#Output: False

lsit3=[]
print(all(lsit3))#Output: True
print(any(lsit3))#Output: False
&lt;/pre&gt;

==Conditional Statements==
Conditionals are used to check the condition and change the flow of the program 
accordingly. They are realized in programming languages through if statement. The 
syntax is as follows :
&lt;pre&gt;
         if condition : 
            statement
&lt;/pre&gt;
    '''Note:''' Do not forget indentation (inserting space/tab) in the line after the
 if condition.
    
    In case you want to execute a set of statements when a condition is true and another

set of statement when the condition is false.
&lt;pre&gt;
         if condition : 
            statement 1
         else :
            statement 2
&lt;/pre&gt;

&lt;pre&gt;    
    Multiple if-else statements can be written as follows:
         if condition_1 : 
            statement 1
         elif condition_2 : # 'elif' is short for 'else if'
            statement 2
         elif condition_3 :
            statement 3
        .
        .
         else :
            final statement
&lt;/pre&gt;

[[#Top]]

=Loops and Conditionals : Fizzbuzz=
====Loops====
Loops are used to execute a set of repetitive statements. They are realised
through 'while' and 'for' loops in programming languages. The syntax of 'for' loop is 
as follows :
&lt;pre&gt;
for LOOPVARIABLE in SEQUENCE: 
            STATEMENTS&lt;/pre&gt;

    '''e.g.''' to print all the data from a list we can write:
&lt;pre&gt;
for item in list_name:
      print(item)&lt;/pre&gt;
    OR
&lt;pre&gt;
for index in range(len(list_name)):
      print(list_name[index])
 &lt;/pre&gt;   
    The syntax for while loop is as follows :
&lt;pre&gt;    
while BOOLEANEXPRESSION: 
     STATEMENTS
     INCREMENT/DECREMENT
&lt;/pre&gt;    
    '''e.g.''' if we want to print all numbers from 1 to 10
&lt;pre&gt;
i=1
while i&lt;=10 :
    print(i,&quot; &quot;)
    i=i+1
    &lt;/pre&gt;
 
'while' loop has indefinite iteration (run-time unknown). So, there must be loop,  break statement in it.
 Whereas 'for' loop is definite in nature (i.e. known or predictable span).&lt;br&gt;

&lt;b&gt;NOTE: Python doesn't have anything like do-while loop.&lt;/b&gt;

[[#Top]]

==Implementation==
Here, we try to demonstrate the concept of loops and conditionals through a game called Fizzbuzz. The rules are as follows :&lt;br/&gt;
[[File:fizzBuzz.gif]]

• if input number is a multiple of ’3’ print ”Fizz”
&lt;br/&gt;
• if input number is a multiple of ’5’ print ”Buzz”
&lt;br/&gt;
• if input number is a multiple of both '3' and ’5’ print ”FizzBuzz”
&lt;br/&gt;
The pseudo code is as follows :
&lt;pre&gt;
   If input no % 3 == 0 and  input no % 5 == 0 : 
       print ”Fizzbuzz”
   else if input no % 3 == 0 : 
       print ”Fizz”
   else if input no % 5 == 0 : 
       print ”Buzz”
   else :
       print the input no
&lt;/pre&gt;
 &lt;p style=&quot;text-align:justify&quot;&gt;
The order of statements execution matters to get the desired output. The highest priority condition should be first followed by other. In fizzbuzz programming, first checking should be done for both divisibility of 3 and 5. If condition not satisfied only then it should check individually for 3 or 5. So carefully choosing the order is crucial for better programming.
Note: There is some effect of present condition statements chosen on next conditions statements. That is why in first attempt fizzbuzz programming got struck.&lt;/p&gt;

Example: 
&lt;pre&gt;
#Code to achieve the above requirement in python3.
i = int(input(&quot;Enter the number&quot;)) 
if i%3 == 0 and i%5 == 0: print(i,&quot;FizzBuzz&quot;)  
elif i%5 == 0: print(i,&quot;Buzz&quot;)
elif i%3 == 0: print(i,&quot;Fizz&quot;)
else: print(i)
&lt;/pre&gt;
Lets put the same into a loop for a range given by the user.
&lt;pre&gt;
def fizzbuzzgame(start,stop):
    for i in range(start,stop+1):
        if i%3 == 0 and i%5 == 0:
            print(i,&quot;FizzBuzz&quot;)
        elif i%5 == 0:
            print(i,&quot;Buzz&quot;)
        elif i%3 == 0:
            print(i,&quot;Fizz&quot;)
        else: print(i)

fizzbuzzgame(50,100)
&lt;/pre&gt;
&lt;pre&gt;
#Output:
1235
Buzz
======================================
555
Fizzbuzz
======================================
1235
Buzz
======================================
999
Fizz
&lt;/pre&gt;

[[#Top]]

=== Fizz Buzz game in Interactive mode with Score ===
'''By Ms. Ami Tusharkant Choksi'''
&lt;pre&gt;
def fizzbuzzgame(i):
        if i%3 == 0 and i%5 == 0:
            print(i,&quot;FizzBuzz&quot;)
            return(&quot;fzbz&quot;)
        elif i%5 == 0:
            print(i,&quot;Buzz&quot;)
            return(&quot;bz&quot;)
        elif i%3 == 0:
            print(i,&quot;Fizz&quot;)
            return(&quot;fz&quot;)
        else:
            print(i)
            return(&quot;no&quot;)

ch = 'y'
fizzbuzz=0
fizz=0
buzz=0
nothing=0
print(&quot;&quot;&quot;

 /$$$$$$$$/$$                  /$$$$$$$                            
| $$_____|__/                 | $$__  $$                           
| $$      /$$/$$$$$$$$/$$$$$$$| $$  \ $$/$$   /$$/$$$$$$$$/$$$$$$$$
| $$$$$  | $|____ /$$|____ /$$| $$$$$$$| $$  | $|____ /$$|____ /$$/
| $$__/  | $$  /$$$$/   /$$$$/| $$__  $| $$  | $$  /$$$$/   /$$$$/ 
| $$     | $$ /$$__/   /$$__/ | $$  \ $| $$  | $$ /$$__/   /$$__/  
| $$     | $$/$$$$$$$$/$$$$$$$| $$$$$$$|  $$$$$$//$$$$$$$$/$$$$$$$$
|__/     |__|________|________|_______/ \______/|________|________/
                                                                  
&quot;&quot;&quot;)   
print('''

  /$$$$$$                                
 /$$__  $$                               
| $$  \__/ /$$$$$$ /$$$$$$/$$$$  /$$$$$$ 
| $$ /$$$$|____  $| $$_  $$_  $$/$$__  $$
| $$|_  $$ /$$$$$$| $$ \ $$ \ $| $$$$$$$$
| $$  \ $$/$$__  $| $$ | $$ | $| $$_____/
|  $$$$$$|  $$$$$$| $$ | $$ | $|  $$$$$$$
 \______/ \_______|__/ |__/ |__/\_______/
                                     
''')

while(ch == 'y'):
    n=int(input(&quot;Enter a Number : &quot;))
    winLoose=fizzbuzzgame(n)
    if(winLoose == &quot;fz&quot;):
        fizz+=1
    elif(winLoose == &quot;bz&quot;):
        buzz+=1
    elif(winLoose == &quot;fzbz&quot;):
        fizzbuzz+=1
    ch=input(&quot;Do you want to continue playing the game : (y/n)&quot;)
    if(ch=='n'):
        print('Congratulations, your score is\n FizzBuzz:%d\nFizz:%d\nBuzz:%d' %
(fizzbuzz,fizz,buzz))
    
'''Sample Output:

 /$$$$$$$$/$$                  /$$$$$$$                            
| $$_____|__/                 | $$__  $$                           
| $$      /$$/$$$$$$$$/$$$$$$$| $$  \ $$/$$   /$$/$$$$$$$$/$$$$$$$$
| $$$$$  | $|____ /$$|____ /$$| $$$$$$$| $$  | $|____ /$$|____ /$$/
| $$__/  | $$  /$$$$/   /$$$$/| $$__  $| $$  | $$  /$$$$/   /$$$$/ 
| $$     | $$ /$$__/   /$$__/ | $$  \ $| $$  | $$ /$$__/   /$$__/  
| $$     | $$/$$$$$$$$/$$$$$$$| $$$$$$$|  $$$$$$//$$$$$$$$/$$$$$$$$
|__/     |__|________|________|_______/ \______/|________|________/
                                                                                                                                   

  /$$$$$$                                
 /$$__  $$                               
| $$  \__/ /$$$$$$ /$$$$$$/$$$$  /$$$$$$ 
| $$ /$$$$|____  $| $$_  $$_  $$/$$__  $$
| $$|_  $$ /$$$$$$| $$ \ $$ \ $| $$$$$$$$
| $$  \ $$/$$__  $| $$ | $$ | $| $$_____/
|  $$$$$$|  $$$$$$| $$ | $$ | $|  $$$$$$$
 \______/ \_______|__/ |__/ |__/\_______/
                                         

Enter a Number : 666
666 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 777
777 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 555
555 FizzBuzz
Do you want to continue playing the game : (y/n)y
Enter a Number : 1
1
Do you want to continue playing the game : (y/n)y
Enter a Number : 789
789 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 25
25 Buzz
Do you want to continue playing the game : (y/n)n
Congratulations, your score is

FizzBuzz:1
Fizz:3
Buzz:1

&lt;/pre&gt;

[[#Top]]

=Crowd Computing: Just Estimate=

Crowd computing is conceptualised in various ways as being related to crowdsourcing, human computation, social computing, cloud computing and mobile computing. 

Crowd computing has been described in various ways viz. 
&lt;ul&gt;&lt;li&gt;distribution of human intelligence tasks to mobile devices&lt;/li&gt;
&lt;li&gt;cloud computing with humans&lt;/li&gt;
&lt;li&gt;human problem solving with large numbers of people using computers&lt;/li&gt;&lt;/ul&gt; 

Broadly, crowed computing is a set of human interaction tools for idea exchange and non-hierarchical decision making. 

Four common characteristics are used to identify the term: 
&lt;ol&gt;
&lt;li&gt;participation by a crowd of humans&lt;/li&gt;
&lt;li&gt;interaction with computing technology&lt;/li&gt;
&lt;li&gt;activity that is predetermined by the initiator or application itself&lt;/li&gt;
&lt;li&gt;the execution of tasks by the crowd utilising innate human capabilities.&lt;/li&gt;
&lt;/ol&gt;

==Wisdom of Crowds==
 &lt;p style=&quot;text-align:justify&quot;&gt;
The concept of ’Wisdom of Crowds’ was proposed by ''Francis Galton''. A weight-judging competition was carried on at the annual show of the West of England Fat Stock and Poultry Exhibition recently held at Plymouth, A fat ox having been selected, competitors bought stamped and numbered cards, each, on which to inscribe their respective names, addresses, and estimates of what the ox would weigh after it had been slaughtered. Those who guessed most successfully received prizes. About 8oo tickets were issued to the par- ticipants. The middlemost estimate of all the estimates recorded was 1207 lbs and the actual weight of the ox was 1198 lbs.&lt;/p&gt;

==Our Experiment==
 &lt;p style=&quot;text-align:justify&quot;&gt;
The crowd had to guess the number of candies/gems in a jar. Around 75 people participated in the experiment. The actual number of gems in the jar were 375. The median of all estimates came out to be 300 and the mean of all the estimates came out to be around 396. Median underestimated and mean overestimated the actual value. So according to recent studies, Trimmed mean must be used as an aggregate measure to estimate where Wisdom of Crowds is involved.
&lt;/p&gt;
[[File:Gemsjar.jpg|center|200px|caption]]

===Trimmed Mean===
 &lt;p style=&quot;text-align:justify&quot;&gt;
In these kinds of experiments, 10% trimmed mean is usually followed. For calculating 10% trimmed mean, remove 10% smallest and 10% largest values from the sample. Calculate the mean of the sample obtained. In the above experiment, the trimmed mean came out to be around 351 which is very close to the actual value.&lt;/p&gt;

==Implementation==
Here, we try to demonstrate the concept of trimmed mean through crowd computing.
&lt;ol&gt;
&lt;li&gt; Input a list of estimates done by the crowd .&lt;/li&gt;
&lt;li&gt; Sort the list.&lt;/li&gt;
&lt;li&gt; Remove the 10% smallest values.&lt;/li&gt;
&lt;li&gt; Remove the 10% largest values.
&lt;li&gt; Calculate the mean of the new list obtained .&lt;/li&gt;&lt;/ol&gt;&lt;hr&gt;
[[#Top]]

==Data of Experiment==       
    Estimates =[1000,1010,1786,2000,1500,1500,100,120,150,150,150,170,175,180,197,200,200,200,200,200,200,220,220,220,220,234,250,250,250,250,250,250,250,250,250,263,270,275,275,286,300,
                300,300,300,300,300,300,300,320,350,350,350,400, 400,400,400,400,450,467,500,500,500,500,500,500,500,550,550,600,600,600,650,700,700,720]

    '''CODE:'''
&lt;pre&gt;
Estimates = [1000,1010,1786,2000,1500,1500,100,120,150,150,150,170,175,180,197,200,200,200,200,200,200,220,220,220,220,234,250,250,250,250,250,250,250,250,250,263,270,275,275,286,300,                300,300,300,300,300,300,300,320,350,350,350,400,400,400,400,400,450,467,500,500,500,500,500,500,500,550,550,600,600,600,650,700,700,720]
Estimates.sort()
offset = int(0.10*len(Estimates))
for i in range(offset):
       del Estimates[0]
       del Estimates[-1]
Sum = 0    
for i in range(len(Estimates)):
       Sum += Estimates[i]
Mean_Value = Sum/len(Estimates)
print(&quot;Mean : &quot;, int(Mean_Value))
#Output:
Mean :  351
&lt;/pre&gt;
&lt;hr&gt;
==Trimmed Mean for the above example== 
&lt;h3&gt;Using scipy library&lt;/h3&gt;
&lt;pre&gt;
#import scipy to use the method of trim_mean
from scipy import stats
trimMean = stats.trim_mean(Estimates, 0.1) # Trim 10% at both ends
print(&quot;Trimmed Mean : &quot;,trimMean)
#Output:
Trimmed Mean :  335.1020408163265
&lt;/pre&gt;

&lt;h3&gt;Without using scipy library&lt;/h3&gt;
&lt;pre&gt;
#Trimmed mean with 10%
p=10/100
#sorted data
data=[2, 4, 6, 7, 11, 21, 81, 90, 105, 121]
n = len(data)
#Remove elements from both end
rem=int(n*p)
newData = data[rem:-rem]
mean = 0
for i in newData:
    mean += i
mean = int(mean/len(newData))
print(&quot;Trimmed mean : &quot;,mean)
#Output: Trimmed mean :  40
&lt;/pre&gt;
[[#Top]]

=Jumbled_Words Permutations: Jumbled Words=
==What are Permutations ?==
A permutation also called ordering of selected number of elements from a list denoted by nPr here we are choosing all elements of a list and so n=r&lt;br&gt;
nPr=n!/(n-r)!&lt;br&gt; as n=r
nPn=n!&lt;br&gt; which gives all possible arrangement of elements present in a list.

 For example, permutations of list [1,2,3] are [1,2,3], [1,3,2], [2,1,3], [2,3,1], 
[3,1,2], and [3,2,1]. 
The number of permutations of a list of elements nPn is given by n!. For example, there are 2! = 2 x 1 = 2 permutations of [1,2], namely [1,2] and [2,1], and 3! = 3 x 2 x 1 = 6 permutations of [1,2,3], as mentioned above.&lt;br/&gt;
[[File:Permutations.jpg]]

==Implementation==
 &lt;p style=&quot;text-align:justify&quot;&gt;
Here, we try to demonstrate the concept of permutations through jumbled words. It is a two player game in which one person presents the other person a different permutation of the word in his mind. The other person has to guess the right word. If he guesses, the he wins otherwise he loses.&lt;/p&gt;
 Input an list of words.
 Randomly pick a word from the list of words .
 Shuffle this word and present it to the other player.
 if word guesses by the player is same as the one picked from list of w
     player wins
 else
     player loses

ALTERNATE CODE TO GENERATE THIS GAME:
&lt;pre&gt;
import random
p1=input(&quot;enter player 1 name:&quot;)
p2=input(&quot;enter player 2 name:&quot;)
l=[&quot;rainbow&quot;,&quot;computer&quot;,&quot;robot&quot;,&quot;butter&quot;,&quot;vegetable&quot;,&quot;science&quot;,&quot;correct&quot;]
c1=c2=a1=a2=f1=f2=0
k=1
i=3
def play():
    n=random.choice(l)        ##n=chooses a word from list l
    l1=[]
    for j in n:
       l1.append(j)      ##creates a list for word in n
    for t in range(len(l1)):
       p=random.choice(l1)     ##this randomly displays letters in the list
       print(p)
       l1.remove(p)          ##to avoid the repetition of a letter
    s=input(&quot;enter the word:&quot;)
    if(s==n):
        print(&quot;correct&quot;)
        return 1
    else:
        print(&quot;not correct&quot;)
        print(&quot;answer is&quot;,n)
        return 0
def stat():
     print(&quot;player 1:&quot;)
     print(&quot;score:&quot;,c1)
     print(&quot;answered:&quot;,a1)
     print(&quot;failed:&quot;,f1)
     print(&quot;.............&quot;)
     print(&quot;player 2:&quot;)
     print(&quot;score:&quot;,c2)
     print(&quot;answered:&quot;,a2)
     print(&quot;failed&quot;,f2)
     if(c1&gt;c2):
         print(p1,&quot; won over &quot;,p2)
     elif(c1==c2):
         print(&quot;draw game&quot;)
     else:
         print(p2,&quot; won over &quot;,p1) 
while(i!=4):
      if(i==3):
         if(k==1):
             print(&quot;player 1 turn&quot;)
             print(&quot;your jumbled word is:&quot;)
             k=k+1
             m=play()
             if(m==1):      ##if guessed answer is correct,then score and no.of answered count will be increased
                c1+=1
                a1+=1
             else:
                f1+=1       ##else count of no.of failed to answered will be incremented
         else:
             print(&quot;player 2 turn&quot;)
             print(&quot;your jumbled word is:&quot;)
             k=k-1
             m=play()
             if(m==1):
                c2=c2+1
                a2=a2+1
             else:
                f2=f2+1
       if(i==2):
             print(&quot;present status&quot;)
             stat()
       i=int(input(&quot;enter your choice  1.stop 2.status 3.continue&quot;))
       if(i==1):
             stat()
             i=i+3
&lt;/pre&gt;
&lt;hr&gt;

[[#Top]]

=== JumbledWord Simple Logic, In Short ===
[[File:jumbledWord.gif]]
---
&lt;hr&gt;
'''Logic to create a Jumbled Word'''
&lt;hr&gt;
&lt;pre&gt;
#Get Jumbled Word and print it Horizontally
import random

def getJumbledWord(b):
    jumble=''
    l1 = [ b[i] for i in range(0, len(b)) ]
    for t in range(len(l1)):
       p=random.choice(l1)  #this randomly gets letters from the list      
       jumble=jumble+p       
       l1.remove(p)
    return jumble

b=input(&quot;Enter a word to make it jumbled : &quot;)
print(&quot;Jumbled Word : &quot;, getJumbledWord(b))
&lt;/pre&gt;
&lt;pre&gt;
Output:
Enter a word to make it jumbled : live and let live others
Jumbled Word :  vel  toldeisrte aihv len
==========================================
Enter a word to make it jumbled : junkfood
Jumbled Word :  nfukdooj
&lt;/pre&gt;
&lt;hr&gt;
'''Another Logic to create a Jumbled Word'''
&lt;hr&gt;
&lt;pre&gt;
import random
b=input(&quot;Enter a word to make it jumbled : &quot;)

def getJumbledWord1(b):
    l1 = [ b[i] for i in range(0, len(b)) ]
    random.shuffle(l1)
    str1 = ''.join(l1)
    return str1

print(&quot;Jumbled Word : &quot;, getJumbledWord1(b))
&lt;/pre&gt;

====Sample Output:====
&lt;pre&gt;
---- Output1 
Enter a word to make it jumbled : butter
Jumbled Word :  tbture

---- Output2 
Enter a word to make it jumbled : petriotism
Jumbled Word :  pittrosime
&lt;/pre&gt;

=Theory of Evolution=

== What is Evolution ? ==
Evolution is the change in heritable characteristics over successive generations. The theory of evolution explains that DNA, which acts as a carrier of genetic information from one generation to other, tends to change or mutate occasionally. These changes are reflected in next generations to come. This is how life has evolved on earth from bacteria to human beings.&lt;br&gt;
[[File:Evolution.png|500px]]

== Implementation ==
 &lt;p style=&quot;text-align:justify&quot;&gt;
An array representing DNA is stored in a file. As genes are forms of DNA, they contain information to be transferred to forthcoming generations. Assume that information is in the form of bits (in the form of 0s and 1s). A number is picked randomly from 1 to the size of the array. A new parameter has been introduced which decides whether mutation would occur or not. If the value of this new parameter is 1 (It is picked randomly from 1 to 100), then only change is reflected down the generations, otherwise it is not. The pseudo code is as follows :
&lt;/p&gt;
Input an array containing genetic information .
Randomly generate a number (say m) from 1 to length of the array. Randomly generate other number (say p) from 1 to 100.

&lt;pre&gt; 
    if p is equal to 1 then 
        if m is 1 then
          set it to 0
        else
          set it to 1
&lt;/pre&gt;
[[#Top]]</text>
      <sha1>4950r5zi6swaakvdadj3z6gi8hht58l</sha1>
    </revision>
    <revision>
      <id>4582</id>
      <parentid>4580</parentid>
      <timestamp>2018-10-27T07:44:59Z</timestamp>
      <contributor>
        <username>Balakrishna</username>
        <id>3073</id>
      </contributor>
      <comment>/* Sort the List */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="31758">[http://sccilabs.org/jocwiki/index.php/Special:Contributors/Lecture_Notes:_Week_3 Contributors of this page]
*Week 3 Playlist: https://www.youtube.com/playlist?list=PLc_j0TNIaWxOVx_z9jAM2UB3RqYNXaoEo
=List=
List is a flexible data structure used for storing a group of data separated by comma. The elements in a list need not be of the same data type.

'''Example:'''
       List_1 = [ 1, 2,3] or 
       List_1 = [&quot;coffee&quot;, &quot;Tea&quot;, &quot;Milk&quot;] or
       List_1 = [1,&quot;coffee&quot;, &quot;Tea&quot;, 3, &quot;5&quot;]

==List Creation==
a) A list can be created by simply putting values (separated by comma) between square
 brackets as given below,
&lt;pre&gt;List_1 = [1,&quot;coffee&quot;, &quot;Tea&quot;, 3, &quot;5&quot;] #this creates a list by name List_1 containing
 following items
&lt;/pre&gt;


Or,
(b)A List can be created from scratch and elements can be added 
&lt;pre&gt;
        List_2 = [ ]
        List_2.append(&quot;Kala&quot;)
        List_2.append(&quot;Mala&quot;)
&lt;/pre&gt;
Here we use &quot;append&quot;, which is a function in python that enable us to append or attach an element to a list .
&lt;pre&gt;Thus List_2 will now hold [&quot;Kala&quot;,&quot;Mala&quot;]&lt;/pre&gt;

[[#Top]]

==Operations and Methods to work with List==
&lt;pre&gt;
a = [25,30,50,90,12,13]
b = [100,300,500,200,250]
&lt;/pre&gt;
&lt;hr&gt;
&lt;table border=2&gt;
  &lt;tr&gt;
    &lt;th&gt;&lt;b&gt;Method/&lt;br&gt;Operator&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Function&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Syntax&lt;/b&gt;&lt;/th&gt;
    &lt;th&gt;&lt;b&gt;Output&lt;/b&gt;&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;len()&lt;/td&gt;
    &lt;td&gt;Find length of a list&lt;/td&gt;
    &lt;td&gt;len(a)&lt;/td&gt;
    &lt;td&gt;6&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;max()&lt;/td&gt;
    &lt;td&gt;Find maximum element from the list&lt;/td&gt;
    &lt;td&gt;max(a)&lt;/td&gt;
    &lt;td&gt;90&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;min()&lt;/td&gt;
    &lt;td&gt;Find minimum element from the list&lt;/td&gt;
    &lt;td&gt;min(a)&lt;/td&gt;
    &lt;td&gt;12&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sum()&lt;/td&gt;
    &lt;td&gt;Returns sum of all elements of the list&lt;/td&gt;
    &lt;td&gt;sum(a)&lt;/td&gt;
    &lt;td&gt;220&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;reverse()&lt;/td&gt;
    &lt;td&gt;Reverses the original list&lt;/td&gt;
    &lt;td&gt;a.reverse()&lt;/td&gt;
    &lt;td&gt;[13, 12, 90, 50, 30, 25]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sort()&lt;/td&gt;
    &lt;td&gt;Sorts the original list in ascending order&lt;/td&gt;
    &lt;td&gt;a.sort()&lt;/td&gt;
    &lt;td&gt;[12, 13, 25, 30, 50, 90]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;sorted()&lt;/td&gt;
    &lt;td&gt;Returns the new sorted list &lt;/td&gt;
    &lt;td&gt;sorted(a)&lt;/td&gt;
    &lt;td&gt;[12, 13, 25, 30, 50, 90]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;insert()&lt;/td&gt;
    &lt;td&gt;Insert at a particular index in the list, and shifts remaining elements&lt;/td&gt;
    &lt;td&gt;a.insert(3,6)&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 6, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;append()&lt;/td&gt;
    &lt;td&gt;Adds elements/object to the end of the list&lt;/td&gt;
    &lt;td&gt;a.append(5)&lt;br&gt;a.append([10,20])&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 5]&lt;br&gt;[25, 30, 50, 90, 12, 13, [10, 20]]&lt;br&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;extend()&lt;/td&gt;
    &lt;td&gt;Adds object to the end of the list as elements not as object&lt;/td&gt;
    &lt;td&gt;a.extend([10,20])&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 10, 20]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;*&amp;nbsp;&amp;nbsp;Repeatation&lt;br&gt;operator&lt;/td&gt;
    &lt;td&gt;Repeat the list for n times and returns a new list&lt;/td&gt;
    &lt;td&gt;a*2&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 25, 30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;+ Concatenation&lt;br&gt;operator&lt;/td&gt;
    &lt;td&gt;Concatenates two lists, and returns a new list&lt;/td&gt;
    &lt;td&gt;a+b&lt;/td&gt;
    &lt;td&gt;[25, 30, 50, 90, 12, 13, 100, 300, 500, 200, 250]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;index()&lt;/td&gt;
    &lt;td&gt;Finds index of a particular element in the list or not&lt;/td&gt;
    &lt;td&gt;a.index(25)&lt;br&gt;a.index(0)&lt;br&gt;&lt;/td&gt;
    &lt;td&gt;0&lt;br&gt;&lt;br&gt;ValueError: 0 is not in list&lt;br&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;in operator&lt;/td&gt;
    &lt;td&gt;Finds whether a particular element is in the list or not, returns boolean&lt;/td&gt;
    &lt;td&gt;25 in a&lt;/td&gt;
    &lt;td&gt;True&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;not in operator&lt;/td&gt;
    &lt;td&gt;Checks if element is not available in list, returns boolean&lt;/td&gt;
    &lt;td&gt;25 not in a&lt;/td&gt;
    &lt;td&gt;False&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;count()&lt;/td&gt;
    &lt;td&gt;Counts the number of occurence of an element in the list&lt;/td&gt;
    &lt;td&gt;a.count(25)&lt;/td&gt;
    &lt;td&gt;1&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;remove()&lt;/td&gt;
    &lt;td&gt;Removes an element from the list&lt;/td&gt;
    &lt;td&gt;a.remove(25)&lt;/td&gt;
    &lt;td&gt; [30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;pop()&lt;/td&gt;
    &lt;td&gt;Deletes and returns the last item if not provided with any method argument.&lt;/td&gt;
    &lt;td&gt;a.pop(0)&lt;/td&gt;
    &lt;td&gt;25 , a will be [30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;del&lt;/td&gt;
    &lt;td&gt;Deletes item at a particular index from the list&lt;/td&gt;
    &lt;td&gt;del a[0]&lt;/td&gt;
    &lt;td&gt;[30, 50, 90, 12, 13]&lt;/td&gt;
  &lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;all()&lt;/td&gt;
&lt;td&gt;Returns True, if list doesn't contain &quot;False&quot;, or it is an empty list&lt;/td&gt;
&lt;td&gt;all([True, True, True])
all([])
&lt;/td&gt;
&lt;td&gt;True&lt;br&gt;
True&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;any()&lt;/td&gt;
&lt;td&gt;Returns True, if any item in list is True else return False&lt;/td&gt;
&lt;td&gt;any([True, True, True])&lt;br&gt;
any([True, False, True])&lt;br&gt;
any([])&lt;/td&gt;
&lt;td&gt;True&lt;br&gt;True&lt;br&gt;False&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;

==Printing the List==
=== Print whole list ===
A list can be printed simply or using a ''for / while'' loop 

 print(List_2)     # To print the entire list
This code will print      
 ['Kala','Mala']     

===Print element at a particular index===
&lt;pre&gt;
Using index position
    List_2[0]     # prints 'Kala' ,i.e,the value at index position 0.
    List_2[1]     # prints 'Mala'.
&lt;/pre&gt;
=== Without using index position ===
&lt;pre&gt;
for item in List_2:   # here item is a variable used to access elements in list.
       print(item)
   This code snippet prints 
    Kala
    Mala
&lt;/pre&gt;
[[#Top]]

==Search for a particular element in list==
Elements in a list can be searched by one of the two ways:
=== using index() function===
&lt;pre&gt;
ages1 = [11,23,12,23,45]

#if element is available in the list, index() returns the index value on which, the element is
 present.
print(ages1.index(45))#Output: 4

#if element is not available in the list, index() returns ''ValueError''
print(ages1.index(0))#Output: ValueError:
&lt;/pre&gt;

In programming, if such error occurs, program gets terminated. It can be solved using exception handling.
 
e.g.
&lt;pre&gt;
ages1 = [11,23,12,23,45]

try:
    print(ages1.index(0))
except ValueError:
    print(&quot;Exception has occured&quot;)    
    print(&quot;Element is not found in the list&quot;)

&lt;/pre&gt;
&lt;pre&gt;
'''Output: 
Exception has occured
Element is not found in the list
'''&lt;/pre&gt;
[[#Top]]

=== using 'in' operator===
''in'' operator is used to check whether a particular element is available in the list or not.e.g.

&lt;pre&gt;
ages1 = [11,23,12,23,45]
no=11

if no in ages1:
    print(&quot;no is there in the list&quot;)
else:    
    print(&quot;no is NOT there in the list&quot;)
&lt;/pre&gt;
&lt;pre&gt;
#Output: no is there in the list
&lt;/pre&gt;


'''Number is not there in the list'''
&lt;pre&gt;
ages1 = [11,23,12,23,45]
no=15

if no in ages1:
    print(&quot;no is there in the list&quot;)
else:    
    print(&quot;no is NOT there in the list&quot;)
&lt;/pre&gt;
&lt;pre&gt;
Output: no is NOT there in the list
&lt;/pre&gt;
[[#Top]]

==Updating the List==
The lists can be updated using ''append'' or ''insert'' function.  Append adds the element to the end of the list and Insert adds the element in the specified position.
&lt;pre&gt;
   # add the element 'Sheela' to the end of the list.
   List_2.append(&quot;Sheela&quot;)    
   print (List_2) will output 
   ['Kala', 'Mala', 'Sheela']
&lt;/pre&gt;
   &lt;pre&gt;
# add the element &quot;Bala&quot; in the list at the index 1.
   List_2.insert(1,&quot;Bala&quot;)    
   print (List_2) will output 
   ['Kala', 'Bala','Mala', 'Sheela']
&lt;/pre&gt;

=== Extend the list by adding elements of other list at end using extend()===
&lt;pre&gt;
ages = [11,23,12,23,45]
ages.extend([57,58])
print(ages)
&lt;/pre&gt;

&lt;pre&gt;
#Output: [11, 23, 12, 23, 45, 57, 58]
&lt;/pre&gt;

==== Difference between ''append() and extend()'' ====
Difference between ''append()'' and ''extend()'' can be easily understood, by the following example.

&lt;pre&gt;
appendlist = [11,23,12,23,45]
appendlist.append([57,58])

extendlist= [11,23,12,23,45]
extendlist.extend([57,58])
&lt;/pre&gt;

&lt;pre&gt;
'''Output:
[11, 23, 12, 23, 45, [57, 58]]
[11, 23, 12, 23, 45, 57, 58]'''
&lt;/pre&gt;

[[#Top]]

==Basic Operations on List==
===Frequency of Occurrence===
list.count(object) will return the number of times the object occur in the list.
  '''Example'''
    ages = [11,23,12,23,45,43,22,24,23]
    ages.count(23) will return
    3
    ages.count(100) will return
    0

===Length of the List===
''len(list)'' will return the length of the list ie. the number of objects in the list.
  '''Example'''
&lt;pre&gt;
    ages = [11,23,12,23,45,43,22,24,23]
    len(ages) # Output: 9
&lt;/pre&gt;

To print the objects in the list either use ''for item in list'' or ''for index in range(len(list))''
&lt;pre&gt;
    for item in ages:       
        print (item)  
        (OR)
    for index in range(len(ages)) :
        print (ages[index])
&lt;/pre&gt;

===Sort the List===
''list.sort()'' will sort the list in ascending order
''list.sort(reverse=True)'' will sort the list in descending order

  '''Example'''
    ages = [11,23,12,23,45,43,22,24,23]
    ages.sort() 
    print (ages) 
    [11, 12, 22, 23, 23, 23, 24, 43, 45]

[[#Top]]

===Sort the List using sorted() function===
''sorted(list1)'' will sort the list and return a new list, it doesn't modify the original list
&lt;br&gt;'''Example: Sort in ascending order'''
&lt;pre&gt;
ages = [11,23,12,23,45,43,22,24,23]
newList=sorted(ages)
print(newList)

#Output: [11, 12, 22, 23, 23, 23, 24, 43, 45]
&lt;/pre&gt;

&lt;br&gt;'''Example: Sort in descending order'''
&lt;pre&gt;
ages = [11,23,12,23,45,43,22,24,23]
newList=sorted(ages,reverse=True)
print(newList)

#Output: [45, 43, 24, 23, 23, 23, 22, 12, 11]
&lt;/pre&gt;

===Reverse the List===
''list.reverse()'' will reverse the original list
  '''Example'''
    ages = [11, 12, 22, 23, 23, 23, 24, 43, 45]
    ages.reverse()
    print (ages)
    [45, 43, 24, 23, 23, 23, 22, 12, 11]

Both ''sort()'' and ''reverse()'' list operation will work on numeric and alphanumeric data list.

A special use of the ''reverse()'' function is to descend a list that is sorted in ascending order.

  '''Example'''
&lt;pre&gt;
ages = [11, 12, 22, 23, 23, 23, 24, 43, 45]
ages.sort()
print(ages)
ages.reverse()
print(ages)
&lt;/pre&gt;

[[#Top]]

===Slicing===
Used to retrieve an object or objects in a range as a list  
  '''Example'''

Use ''list[index]'' to retrieve the object at the given index
&lt;pre&gt;
In [1]: student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
In [2]: student[3]     #Object at index 3.  Remember index starts at 0
Out[2]: 'Geetha'      
&lt;/pre&gt;

Use ''list[start_index : end_index + 1]'' to retrieve objects from the start_index to end_index 
&lt;pre&gt;
In [3]: student[2:4]     # Objects from index 2 to 3 as List. Note the [ and ]
Out[3]: ['Vijay', 'Geetha']   
&lt;/pre&gt;

Use ''list[:]'' to retrieve objects from the starting of the list to the end of the list. 
The default start value will be the starting index of the list (i.e. 0) and the default end value
will be the length of the list 
&lt;pre&gt;
In [4]: student[:]        # prints the entire list
Out[4]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma', 'Janani']
&lt;/pre&gt;
&lt;pre&gt;
In [5]: student[:5]       # prints the objects from the start of the list upto object at index 4
Out[5]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran']
&lt;/pre&gt;
&lt;pre&gt;
In [6]: student[2:]       # prints the objects from index 2 upto the end of the list
Out[6]: ['Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma', 'Janani']
&lt;/pre&gt;

Negative index too is available in Python. It starts from last element of the list. i.e.
&lt;pre&gt;
In [7]:student[-1]        #prints last index of list
Out[7]: 'Janani'
&lt;/pre&gt;
&lt;pre&gt;
In [8]:student[-1:-8]     #prints empty list
Out[8]: []
&lt;/pre&gt;
&lt;pre&gt;
In [9]:student[-8:-1]     #prints -8th index to -1st index elements
Out[9]: ['Arun', 'Meena', 'Vijay', 'Geetha', 'Saran', 'Naveena', 'Roshma']
&lt;/pre&gt;

[[#Top]]

===Removing Item from list ===
----

Is used to remove a specific item from the list.

'''Example:'''
 
Use list.remove(entry/value)  Or   del list[index]    Or list.pop(index)
&lt;pre&gt;
student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
student.remove(&quot;Arun&quot;)   #This will delete item &quot;Arun&quot;
         Or    
del student[0]           # This will delete item at index 0
         Or
student.pop(0)         # This will delete and return item at index 0
print(student)    
Output: &quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
&lt;/pre&gt;

[[#Top]]

===Delete list ===
----
Used to delete complete list

'''Example'''

Use del &lt;list name&gt;
&lt;pre&gt;
student = [&quot;Arun&quot;,&quot;Meena&quot;,&quot;Vijay&quot;,&quot;Geetha&quot;,&quot;Saran&quot;,&quot;Naveena&quot;,&quot;Roshma&quot;,&quot;Janani&quot;]
del student&lt;/pre&gt;

===Concatenation of two lists===
----
''+'' is the concatenation operator which is used concatenate two lists. 
&lt;pre&gt;
ages1 = [11,23,12,23,45]
ages2 = [25, 24, 43, 47]
age=ages1+ages2
print(age)
#Output: [11, 23, 12, 23, 45, 25, 24, 43, 47]
&lt;/pre&gt;

===Repeatation of a list ===
----
''*'' is the operator to repeat a particular list.
&lt;pre&gt;
ages1 = [11,23,12,23,45]
age=ages1*5 #ages1 list is repeated 5 times and stroed in ''age'' list
print(age)

#Output: [11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45, 11, 23, 12, 23, 45]
&lt;/pre&gt;

=== all and any for List===
all() and any() are special functions to check whether all elements in iterable is ''True'' or any element is ''True''
&lt;ol&gt;
&lt;li&gt;If all elements in a list are ''True'', ''all()'' will return ''True''&lt;/li&gt;
&lt;li&gt;If iterable is ''empty'', ''all()'' will return ''True''&lt;/li&gt;
&lt;li&gt;If iterable contains at least one ''True'', ''any()'' will return ''True''&lt;/li&gt;
&lt;li&gt;If iterable is ''empty'', ''any()'' will return ''False''&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;
lsit=[True, True, True, True]
print(all(lsit))#Output: True
print(any(lsit))#Output: True

lsit1=[True, False, True, True]
print(all(lsit1))#Output: False
print(any(lsit1))#Output: True

lsit2=[False,False,False]
print(all(lsit2))#Output: False
print(any(lsit2))#Output: False

lsit3=[]
print(all(lsit3))#Output: True
print(any(lsit3))#Output: False
&lt;/pre&gt;

==Conditional Statements==
Conditionals are used to check the condition and change the flow of the program 
accordingly. They are realized in programming languages through if statement. The 
syntax is as follows :
&lt;pre&gt;
         if condition : 
            statement
&lt;/pre&gt;
    '''Note:''' Do not forget indentation (inserting space/tab) in the line after the
 if condition.
    
    In case you want to execute a set of statements when a condition is true and another

set of statement when the condition is false.
&lt;pre&gt;
         if condition : 
            statement 1
         else :
            statement 2
&lt;/pre&gt;

&lt;pre&gt;    
    Multiple if-else statements can be written as follows:
         if condition_1 : 
            statement 1
         elif condition_2 : # 'elif' is short for 'else if'
            statement 2
         elif condition_3 :
            statement 3
        .
        .
         else :
            final statement
&lt;/pre&gt;

[[#Top]]

=Loops and Conditionals : Fizzbuzz=
====Loops====
Loops are used to execute a set of repetitive statements. They are realised
through 'while' and 'for' loops in programming languages. The syntax of 'for' loop is 
as follows :
&lt;pre&gt;
for LOOPVARIABLE in SEQUENCE: 
            STATEMENTS&lt;/pre&gt;

    '''e.g.''' to print all the data from a list we can write:
&lt;pre&gt;
for item in list_name:
      print(item)&lt;/pre&gt;
    OR
&lt;pre&gt;
for index in range(len(list_name)):
      print(list_name[index])
 &lt;/pre&gt;   
    The syntax for while loop is as follows :
&lt;pre&gt;    
while BOOLEANEXPRESSION: 
     STATEMENTS
     INCREMENT/DECREMENT
&lt;/pre&gt;    
    '''e.g.''' if we want to print all numbers from 1 to 10
&lt;pre&gt;
i=1
while i&lt;=10 :
    print(i,&quot; &quot;)
    i=i+1
    &lt;/pre&gt;
 
'while' loop has indefinite iteration (run-time unknown). So, there must be loop,  break statement in it.
 Whereas 'for' loop is definite in nature (i.e. known or predictable span).&lt;br&gt;

&lt;b&gt;NOTE: Python doesn't have anything like do-while loop.&lt;/b&gt;

[[#Top]]

==Implementation==
Here, we try to demonstrate the concept of loops and conditionals through a game called Fizzbuzz. The rules are as follows :&lt;br/&gt;
[[File:fizzBuzz.gif]]

• if input number is a multiple of ’3’ print ”Fizz”
&lt;br/&gt;
• if input number is a multiple of ’5’ print ”Buzz”
&lt;br/&gt;
• if input number is a multiple of both '3' and ’5’ print ”FizzBuzz”
&lt;br/&gt;
The pseudo code is as follows :
&lt;pre&gt;
   If input no % 3 == 0 and  input no % 5 == 0 : 
       print ”Fizzbuzz”
   else if input no % 3 == 0 : 
       print ”Fizz”
   else if input no % 5 == 0 : 
       print ”Buzz”
   else :
       print the input no
&lt;/pre&gt;
 &lt;p style=&quot;text-align:justify&quot;&gt;
The order of statements execution matters to get the desired output. The highest priority condition should be first followed by other. In fizzbuzz programming, first checking should be done for both divisibility of 3 and 5. If condition not satisfied only then it should check individually for 3 or 5. So carefully choosing the order is crucial for better programming.
Note: There is some effect of present condition statements chosen on next conditions statements. That is why in first attempt fizzbuzz programming got struck.&lt;/p&gt;

Example: 
&lt;pre&gt;
#Code to achieve the above requirement in python3.
i = int(input(&quot;Enter the number&quot;)) 
if i%3 == 0 and i%5 == 0: print(i,&quot;FizzBuzz&quot;)  
elif i%5 == 0: print(i,&quot;Buzz&quot;)
elif i%3 == 0: print(i,&quot;Fizz&quot;)
else: print(i)
&lt;/pre&gt;
Lets put the same into a loop for a range given by the user.
&lt;pre&gt;
def fizzbuzzgame(start,stop):
    for i in range(start,stop+1):
        if i%3 == 0 and i%5 == 0:
            print(i,&quot;FizzBuzz&quot;)
        elif i%5 == 0:
            print(i,&quot;Buzz&quot;)
        elif i%3 == 0:
            print(i,&quot;Fizz&quot;)
        else: print(i)

fizzbuzzgame(50,100)
&lt;/pre&gt;
&lt;pre&gt;
#Output:
1235
Buzz
======================================
555
Fizzbuzz
======================================
1235
Buzz
======================================
999
Fizz
&lt;/pre&gt;

[[#Top]]

=== Fizz Buzz game in Interactive mode with Score ===
'''By Ms. Ami Tusharkant Choksi'''
&lt;pre&gt;
def fizzbuzzgame(i):
        if i%3 == 0 and i%5 == 0:
            print(i,&quot;FizzBuzz&quot;)
            return(&quot;fzbz&quot;)
        elif i%5 == 0:
            print(i,&quot;Buzz&quot;)
            return(&quot;bz&quot;)
        elif i%3 == 0:
            print(i,&quot;Fizz&quot;)
            return(&quot;fz&quot;)
        else:
            print(i)
            return(&quot;no&quot;)

ch = 'y'
fizzbuzz=0
fizz=0
buzz=0
nothing=0
print(&quot;&quot;&quot;

 /$$$$$$$$/$$                  /$$$$$$$                            
| $$_____|__/                 | $$__  $$                           
| $$      /$$/$$$$$$$$/$$$$$$$| $$  \ $$/$$   /$$/$$$$$$$$/$$$$$$$$
| $$$$$  | $|____ /$$|____ /$$| $$$$$$$| $$  | $|____ /$$|____ /$$/
| $$__/  | $$  /$$$$/   /$$$$/| $$__  $| $$  | $$  /$$$$/   /$$$$/ 
| $$     | $$ /$$__/   /$$__/ | $$  \ $| $$  | $$ /$$__/   /$$__/  
| $$     | $$/$$$$$$$$/$$$$$$$| $$$$$$$|  $$$$$$//$$$$$$$$/$$$$$$$$
|__/     |__|________|________|_______/ \______/|________|________/
                                                                  
&quot;&quot;&quot;)   
print('''

  /$$$$$$                                
 /$$__  $$                               
| $$  \__/ /$$$$$$ /$$$$$$/$$$$  /$$$$$$ 
| $$ /$$$$|____  $| $$_  $$_  $$/$$__  $$
| $$|_  $$ /$$$$$$| $$ \ $$ \ $| $$$$$$$$
| $$  \ $$/$$__  $| $$ | $$ | $| $$_____/
|  $$$$$$|  $$$$$$| $$ | $$ | $|  $$$$$$$
 \______/ \_______|__/ |__/ |__/\_______/
                                     
''')

while(ch == 'y'):
    n=int(input(&quot;Enter a Number : &quot;))
    winLoose=fizzbuzzgame(n)
    if(winLoose == &quot;fz&quot;):
        fizz+=1
    elif(winLoose == &quot;bz&quot;):
        buzz+=1
    elif(winLoose == &quot;fzbz&quot;):
        fizzbuzz+=1
    ch=input(&quot;Do you want to continue playing the game : (y/n)&quot;)
    if(ch=='n'):
        print('Congratulations, your score is\n FizzBuzz:%d\nFizz:%d\nBuzz:%d' %
(fizzbuzz,fizz,buzz))
    
'''Sample Output:

 /$$$$$$$$/$$                  /$$$$$$$                            
| $$_____|__/                 | $$__  $$                           
| $$      /$$/$$$$$$$$/$$$$$$$| $$  \ $$/$$   /$$/$$$$$$$$/$$$$$$$$
| $$$$$  | $|____ /$$|____ /$$| $$$$$$$| $$  | $|____ /$$|____ /$$/
| $$__/  | $$  /$$$$/   /$$$$/| $$__  $| $$  | $$  /$$$$/   /$$$$/ 
| $$     | $$ /$$__/   /$$__/ | $$  \ $| $$  | $$ /$$__/   /$$__/  
| $$     | $$/$$$$$$$$/$$$$$$$| $$$$$$$|  $$$$$$//$$$$$$$$/$$$$$$$$
|__/     |__|________|________|_______/ \______/|________|________/
                                                                                                                                   

  /$$$$$$                                
 /$$__  $$                               
| $$  \__/ /$$$$$$ /$$$$$$/$$$$  /$$$$$$ 
| $$ /$$$$|____  $| $$_  $$_  $$/$$__  $$
| $$|_  $$ /$$$$$$| $$ \ $$ \ $| $$$$$$$$
| $$  \ $$/$$__  $| $$ | $$ | $| $$_____/
|  $$$$$$|  $$$$$$| $$ | $$ | $|  $$$$$$$
 \______/ \_______|__/ |__/ |__/\_______/
                                         

Enter a Number : 666
666 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 777
777 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 555
555 FizzBuzz
Do you want to continue playing the game : (y/n)y
Enter a Number : 1
1
Do you want to continue playing the game : (y/n)y
Enter a Number : 789
789 Fizz
Do you want to continue playing the game : (y/n)y
Enter a Number : 25
25 Buzz
Do you want to continue playing the game : (y/n)n
Congratulations, your score is

FizzBuzz:1
Fizz:3
Buzz:1

&lt;/pre&gt;

[[#Top]]

=Crowd Computing: Just Estimate=

Crowd computing is conceptualised in various ways as being related to crowdsourcing, human computation, social computing, cloud computing and mobile computing. 

Crowd computing has been described in various ways viz. 
&lt;ul&gt;&lt;li&gt;distribution of human intelligence tasks to mobile devices&lt;/li&gt;
&lt;li&gt;cloud computing with humans&lt;/li&gt;
&lt;li&gt;human problem solving with large numbers of people using computers&lt;/li&gt;&lt;/ul&gt; 

Broadly, crowed computing is a set of human interaction tools for idea exchange and non-hierarchical decision making. 

Four common characteristics are used to identify the term: 
&lt;ol&gt;
&lt;li&gt;participation by a crowd of humans&lt;/li&gt;
&lt;li&gt;interaction with computing technology&lt;/li&gt;
&lt;li&gt;activity that is predetermined by the initiator or application itself&lt;/li&gt;
&lt;li&gt;the execution of tasks by the crowd utilising innate human capabilities.&lt;/li&gt;
&lt;/ol&gt;

==Wisdom of Crowds==
 &lt;p style=&quot;text-align:justify&quot;&gt;
The concept of ’Wisdom of Crowds’ was proposed by ''Francis Galton''. A weight-judging competition was carried on at the annual show of the West of England Fat Stock and Poultry Exhibition recently held at Plymouth, A fat ox having been selected, competitors bought stamped and numbered cards, each, on which to inscribe their respective names, addresses, and estimates of what the ox would weigh after it had been slaughtered. Those who guessed most successfully received prizes. About 8oo tickets were issued to the par- ticipants. The middlemost estimate of all the estimates recorded was 1207 lbs and the actual weight of the ox was 1198 lbs.&lt;/p&gt;

==Our Experiment==
 &lt;p style=&quot;text-align:justify&quot;&gt;
The crowd had to guess the number of candies/gems in a jar. Around 75 people participated in the experiment. The actual number of gems in the jar were 375. The median of all estimates came out to be 300 and the mean of all the estimates came out to be around 396. Median underestimated and mean overestimated the actual value. So according to recent studies, Trimmed mean must be used as an aggregate measure to estimate where Wisdom of Crowds is involved.
&lt;/p&gt;
[[File:Gemsjar.jpg|center|200px|caption]]

===Trimmed Mean===
 &lt;p style=&quot;text-align:justify&quot;&gt;
In these kinds of experiments, 10% trimmed mean is usually followed. For calculating 10% trimmed mean, remove 10% smallest and 10% largest values from the sample. Calculate the mean of the sample obtained. In the above experiment, the trimmed mean came out to be around 351 which is very close to the actual value.&lt;/p&gt;

==Implementation==
Here, we try to demonstrate the concept of trimmed mean through crowd computing.
&lt;ol&gt;
&lt;li&gt; Input a list of estimates done by the crowd .&lt;/li&gt;
&lt;li&gt; Sort the list.&lt;/li&gt;
&lt;li&gt; Remove the 10% smallest values.&lt;/li&gt;
&lt;li&gt; Remove the 10% largest values.
&lt;li&gt; Calculate the mean of the new list obtained .&lt;/li&gt;&lt;/ol&gt;&lt;hr&gt;
[[#Top]]

==Data of Experiment==       
    Estimates =[1000,1010,1786,2000,1500,1500,100,120,150,150,150,170,175,180,197,200,200,200,200,200,200,220,220,220,220,234,250,250,250,250,250,250,250,250,250,263,270,275,275,286,300,
                300,300,300,300,300,300,300,320,350,350,350,400, 400,400,400,400,450,467,500,500,500,500,500,500,500,550,550,600,600,600,650,700,700,720]

    '''CODE:'''
&lt;pre&gt;
Estimates = [1000,1010,1786,2000,1500,1500,100,120,150,150,150,170,175,180,197,200,200,200,200,200,200,220,220,220,220,234,250,250,250,250,250,250,250,250,250,263,270,275,275,286,300,                300,300,300,300,300,300,300,320,350,350,350,400,400,400,400,400,450,467,500,500,500,500,500,500,500,550,550,600,600,600,650,700,700,720]
Estimates.sort()
offset = int(0.10*len(Estimates))
for i in range(offset):
       del Estimates[0]
       del Estimates[-1]
Sum = 0    
for i in range(len(Estimates)):
       Sum += Estimates[i]
Mean_Value = Sum/len(Estimates)
print(&quot;Mean : &quot;, int(Mean_Value))
#Output:
Mean :  351
&lt;/pre&gt;
&lt;hr&gt;
==Trimmed Mean for the above example== 
&lt;h3&gt;Using scipy library&lt;/h3&gt;
&lt;pre&gt;
#import scipy to use the method of trim_mean
from scipy import stats
trimMean = stats.trim_mean(Estimates, 0.1) # Trim 10% at both ends
print(&quot;Trimmed Mean : &quot;,trimMean)
#Output:
Trimmed Mean :  335.1020408163265
&lt;/pre&gt;

&lt;h3&gt;Without using scipy library&lt;/h3&gt;
&lt;pre&gt;
#Trimmed mean with 10%
p=10/100
#sorted data
data=[2, 4, 6, 7, 11, 21, 81, 90, 105, 121]
n = len(data)
#Remove elements from both end
rem=int(n*p)
newData = data[rem:-rem]
mean = 0
for i in newData:
    mean += i
mean = int(mean/len(newData))
print(&quot;Trimmed mean : &quot;,mean)
#Output: Trimmed mean :  40
&lt;/pre&gt;
[[#Top]]

=Jumbled_Words Permutations: Jumbled Words=
==What are Permutations ?==
A permutation also called ordering of selected number of elements from a list denoted by nPr here we are choosing all elements of a list and so n=r&lt;br&gt;
nPr=n!/(n-r)!&lt;br&gt; as n=r
nPn=n!&lt;br&gt; which gives all possible arrangement of elements present in a list.

 For example, permutations of list [1,2,3] are [1,2,3], [1,3,2], [2,1,3], [2,3,1], 
[3,1,2], and [3,2,1]. 
The number of permutations of a list of elements nPn is given by n!. For example, there are 2! = 2 x 1 = 2 permutations of [1,2], namely [1,2] and [2,1], and 3! = 3 x 2 x 1 = 6 permutations of [1,2,3], as mentioned above.&lt;br/&gt;
[[File:Permutations.jpg]]

==Implementation==
 &lt;p style=&quot;text-align:justify&quot;&gt;
Here, we try to demonstrate the concept of permutations through jumbled words. It is a two player game in which one person presents the other person a different permutation of the word in his mind. The other person has to guess the right word. If he guesses, the he wins otherwise he loses.&lt;/p&gt;
 Input an list of words.
 Randomly pick a word from the list of words .
 Shuffle this word and present it to the other player.
 if word guesses by the player is same as the one picked from list of w
     player wins
 else
     player loses

ALTERNATE CODE TO GENERATE THIS GAME:
&lt;pre&gt;
import random
p1=input(&quot;enter player 1 name:&quot;)
p2=input(&quot;enter player 2 name:&quot;)
l=[&quot;rainbow&quot;,&quot;computer&quot;,&quot;robot&quot;,&quot;butter&quot;,&quot;vegetable&quot;,&quot;science&quot;,&quot;correct&quot;]
c1=c2=a1=a2=f1=f2=0
k=1
i=3
def play():
    n=random.choice(l)        ##n=chooses a word from list l
    l1=[]
    for j in n:
       l1.append(j)      ##creates a list for word in n
    for t in range(len(l1)):
       p=random.choice(l1)     ##this randomly displays letters in the list
       print(p)
       l1.remove(p)          ##to avoid the repetition of a letter
    s=input(&quot;enter the word:&quot;)
    if(s==n):
        print(&quot;correct&quot;)
        return 1
    else:
        print(&quot;not correct&quot;)
        print(&quot;answer is&quot;,n)
        return 0
def stat():
     print(&quot;player 1:&quot;)
     print(&quot;score:&quot;,c1)
     print(&quot;answered:&quot;,a1)
     print(&quot;failed:&quot;,f1)
     print(&quot;.............&quot;)
     print(&quot;player 2:&quot;)
     print(&quot;score:&quot;,c2)
     print(&quot;answered:&quot;,a2)
     print(&quot;failed&quot;,f2)
     if(c1&gt;c2):
         print(p1,&quot; won over &quot;,p2)
     elif(c1==c2):
         print(&quot;draw game&quot;)
     else:
         print(p2,&quot; won over &quot;,p1) 
while(i!=4):
      if(i==3):
         if(k==1):
             print(&quot;player 1 turn&quot;)
             print(&quot;your jumbled word is:&quot;)
             k=k+1
             m=play()
             if(m==1):      ##if guessed answer is correct,then score and no.of answered count will be increased
                c1+=1
                a1+=1
             else:
                f1+=1       ##else count of no.of failed to answered will be incremented
         else:
             print(&quot;player 2 turn&quot;)
             print(&quot;your jumbled word is:&quot;)
             k=k-1
             m=play()
             if(m==1):
                c2=c2+1
                a2=a2+1
             else:
                f2=f2+1
       if(i==2):
             print(&quot;present status&quot;)
             stat()
       i=int(input(&quot;enter your choice  1.stop 2.status 3.continue&quot;))
       if(i==1):
             stat()
             i=i+3
&lt;/pre&gt;
&lt;hr&gt;

[[#Top]]

=== JumbledWord Simple Logic, In Short ===
[[File:jumbledWord.gif]]
---
&lt;hr&gt;
'''Logic to create a Jumbled Word'''
&lt;hr&gt;
&lt;pre&gt;
#Get Jumbled Word and print it Horizontally
import random

def getJumbledWord(b):
    jumble=''
    l1 = [ b[i] for i in range(0, len(b)) ]
    for t in range(len(l1)):
       p=random.choice(l1)  #this randomly gets letters from the list      
       jumble=jumble+p       
       l1.remove(p)
    return jumble

b=input(&quot;Enter a word to make it jumbled : &quot;)
print(&quot;Jumbled Word : &quot;, getJumbledWord(b))
&lt;/pre&gt;
&lt;pre&gt;
Output:
Enter a word to make it jumbled : live and let live others
Jumbled Word :  vel  toldeisrte aihv len
==========================================
Enter a word to make it jumbled : junkfood
Jumbled Word :  nfukdooj
&lt;/pre&gt;
&lt;hr&gt;
'''Another Logic to create a Jumbled Word'''
&lt;hr&gt;
&lt;pre&gt;
import random
b=input(&quot;Enter a word to make it jumbled : &quot;)

def getJumbledWord1(b):
    l1 = [ b[i] for i in range(0, len(b)) ]
    random.shuffle(l1)
    str1 = ''.join(l1)
    return str1

print(&quot;Jumbled Word : &quot;, getJumbledWord1(b))
&lt;/pre&gt;

====Sample Output:====
&lt;pre&gt;
---- Output1 
Enter a word to make it jumbled : butter
Jumbled Word :  tbture

---- Output2 
Enter a word to make it jumbled : petriotism
Jumbled Word :  pittrosime
&lt;/pre&gt;

=Theory of Evolution=

== What is Evolution ? ==
Evolution is the change in heritable characteristics over successive generations. The theory of evolution explains that DNA, which acts as a carrier of genetic information from one generation to other, tends to change or mutate occasionally. These changes are reflected in next generations to come. This is how life has evolved on earth from bacteria to human beings.&lt;br&gt;
[[File:Evolution.png|500px]]

== Implementation ==
 &lt;p style=&quot;text-align:justify&quot;&gt;
An array representing DNA is stored in a file. As genes are forms of DNA, they contain information to be transferred to forthcoming generations. Assume that information is in the form of bits (in the form of 0s and 1s). A number is picked randomly from 1 to the size of the array. A new parameter has been introduced which decides whether mutation would occur or not. If the value of this new parameter is 1 (It is picked randomly from 1 to 100), then only change is reflected down the generations, otherwise it is not. The pseudo code is as follows :
&lt;/p&gt;
Input an array containing genetic information .
Randomly generate a number (say m) from 1 to length of the array. Randomly generate other number (say p) from 1 to 100.

&lt;pre&gt; 
    if p is equal to 1 then 
        if m is 1 then
          set it to 0
        else
          set it to 1
&lt;/pre&gt;
[[#Top]]</text>
      <sha1>go181ax6ql41q02212g4stwz0exksqp</sha1>
    </revision>
  </page>
</mediawiki>
